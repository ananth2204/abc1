{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011038000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 7113106, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 20, "INMDSNAM": "CBT.V500.FILE010.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 7113106, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 7113106, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE010.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00o\\x06'", "DS1TRBAL": "b'\\xa0N'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\x1d\\x00\\x0e\\x00%\\x00\\x05\\x00p'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x08\\x01 5\\x0f\\x01 5\\x0f\\x08\\x13\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-12-15T00:00:00", "modifydate": "2020-12-15T08:13:08", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  010\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE010\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 86 MEMBERS COUNTED; CUMULATIVE SIZE IS 67,152 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/15/20    08:13:08    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x03\\x08?\\x01 !/\\t\\x11\\x00N\\x00M\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-03-24T00:00:00", "modifydate": "2020-07-30T09:11:26", "lines": 78, "newlines": 77, "modlines": 0, "user": "GREG"}, "text": " MEMBER     CONTENT\n ======     =======\nASM      - ASSEMBLE AND LINK EDIT IM\nASMBB    - ASSEMBLE AND LINK EDIT IMXCF\nASMDG    - ASSEMBLE AND LINK EDIT IMDATGAT\nASMDR    - ASSEMBLE AND LINK EDIT IMDSSTRD\nASMG     - TRANSLATE, ASSEMBLE AND LINK EDIT IMPXAGLS\nASMGP    - ASSEMBLE AND LINK EDIT GLSPARSE\nASMIS    - ASSEMBLE AND LINK EDIT IMPXASPY\nASMLX1   - ASSEMBLE AND LINK EDIT IMLLAIX1 (CSVLLIX1)\nASMSP    - ASSEMBLE AND LINK EDIT IMSPACER\nDCS      - ASSEMBLER MACRO \"DEFINE CONSTANT FOR SCREEN\"\nDYNALC   - ASSEMBLER MACRO (DYNAMIC ALLOCATION)\nESRPRMTE - SOURCE OF OPTION \"T\" ESR SVC NUMBER PROMPT (ENGLISH)\nESRPRMTJ - SOURCE OF OPTION \"T\" ESR SVC NUMBER PROMPT (JAPANESE)\nGLSPARSE - HELP SCREEN \"COMPILER\"\nICFDSECT - ICF/VSAM CATALOG DATA FORMATS\nILRASMVT - SYS1.MODGEN(ILRASMVT) WITH EXTRN REFERENCES REMOVED\nIM@      - DOCUMENTATION RELIC\nIMCFDATA - IMCFLIST TRANSPORTED COUPLING FACILITY DETAILS (PLIST/RETURN)\nIMCFDOC  - IMCFDATA DOCUMENTATION\nIMCFLIST - SOURCE OF XES SERVICES INTERFACE MODULE\nIMDATGAT - SOURCE OF IMON DATA GATHERER\nIMDGPURG - SOURCE OF IMON DATA GATHERER OLD DATA PURGE ROUTINE\nIMDSDATA - IMDSPACE TRANSPORTED DATA SPACE DETAILS (PLIST/RETURN)\nIMDSPACE - SOURCE OF DATA SPACE DETAILS ACQUISITION MODULE\nIMDSSTRD - SOURCE OF DSST READ AND FORMAT SAMPLE PROGRAM\nIMGATCOM - IMON DATA GATHERER COMMON AREA\nIMGATDAT - IMON DATA GATHERER REPOSITORY DATA STRUCTURES\nIMGATGET - SOURCE OF IMON DATA GATHERER SMF DATA SET READ SUBROUTINE\nIMLLAIX1 - SOURCE OF IMON LLA FETCH INSTALLATION EXIT 1\nIMLLAREA - IMLLAIX1 REPOSITORY DATA STRUCTURES\nIMON     - IMON LOCAL 3270 SESSION STARTED TASK JCL\nIMONTEXT - DOCUMENTATION RELIC\nIMPCM$   - SOURCE OF OPTION \"$\" - MVS+MSP COMMON CODE\nIMPCME   - SOURCE OF OPTION \"E\" - MVS+MSP COMMON CODE\nIMPCMGG  - OPTION \"G\" INTERNAL DATA STRUCTURES - MVS+MSP COMMON CODE\nIMPCMK   - SOURCE OF OPTION \"K\" - MVS+MSP COMMON CODE\nIMPCMT   - SOURCE OF OPTION \"T\" - MVS+MSP COMMON CODE\nIMPCMW   - SOURCE OF \"WINDOW MANAGER\" - MVS+MSP COMMON CODE\nIMPCM1   - SOURCE OF ADDRESSABLE SUBROUTINES - MVS+MSP COMMON CODE\nIMPCM2   - SOURCE OF ADDRESSABLE DATA - MVS+MSP COMMON CODE\nIMPCM3   - SOURCE OF 3270 DATA STREAM GENERATOR - MVS+MSP COMMON CODE\nIMPCM4   - SOURCE OF UNADDRESSABLE SUBROUTINES - MVS+MSP COMMON CODE\nIMPGAT   - IMON DATA GATHERER STARTED TASK JCL\nIMPSPACE - IMON DISK SPACE DATA GATHERER STARTED TASK JCL\nIMPXA    - SOURCE OF IMON MAINLINE - MVS VERSION FOR MVS/XA AND LATER\nIMPXA@   - SOURCE OF OPTION \"@\"\nIMPXAA   - SOURCE OF OPTION \"A\"\nIMPXAB   - SOURCE OF OPTION \"B\"\nIMPXAC   - SOURCE OF OPTION \"C\"\nIMPXAD   - SOURCE OF OPTION \"D\"\nIMPXAF   - SOURCE OF OPTION \"F\"\nIMPXAG   - SOURCE OF OPTION \"G\"\nIMPXAGLS - SOURCE OF HELP SCREEN DISPLAYS\nIMPXAJ   - SOURCE OF OPTION \"J\"\nIMPXAL   - SOURCE OF OPTION \"L\"\nIMPXAM   - SOURCE OF OPTION \"M\"\nIMPXAN   - SOURCE OF OPTION \"N\"\nIMPXAO   - SOURCE OF OPTION \"O\"\nIMPXAP   - SOURCE OF OPTION \"P\"\nIMPXAR   - SOURCE OF OPTION \"R\"\nIMPXAS   - SOURCE OF OPTION \"S\"\nIMPXASPY - SOURCE OF OS CONSOLE SPY (CALLED BY OPTION \"O\")\nIMPXAT   - SOURCE OF OPTION \"T\" - MVS VERSION FOR MVS/XA AND LATER\nIMPXAU   - SOURCE OF OPTION \"U\"\nIMPXAV   - SOURCE OF OPTION \"V\"\nIMSPACER - SOURCE OF DISK SPACE DATA GATHERER\nIMSPDSST - DISK SPACE DATA GATHERER INTERNAL AND FILE DATA STRUCTURE\nIMSWAP   - SOURCE OF SRB SYSEVENT ROUTINE (CALLED BY OPTION \"V\")\nIMSWPTXT - IMSWAP DOCUMENTATION\nIMVTOCRD - SOURCE OF VTOC READING SUBROUTINE\nIMXACUST - IMON FEATURE AUTHORISATION CUSTOMISATION JOB FOR MVS VERSION\nIMXCDATA - IMXCF TRANSPORTED SYSPLEX DETAILS (PLIST/RETURN)\nIMXCF    - SOURCE OF XCF SERVICES INTERFACE MODULE\nIMXCFDOC - IMXCDATA DOCUMENTATION\nJPRFXMSG - SOURCE OF JOB NAME PREFIX/MASK PROMPT\nPDLFRECS - PERFORMANCE DATA LOGGING FACILITY SMF RECORD STRUCTURES\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTICE": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x14\\x01\\x00V\\x01\\x03\\x08?\\x01 $o\\x185\\x00\\x15\\x00\\x08\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "20.01", "flags": 0, "createdate": "2003-03-24T00:00:00", "modifydate": "2020-09-02T18:35:56", "lines": 21, "newlines": 8, "modlines": 0, "user": "GREG"}, "text": "  This file contains the source of the OS/390 and z/OS version of\n  IMON - the \"Interactive Monitor\" - an operating system real-time\n  monitor written, maintained and enhanced by Greg Price since 1981,\n  and a proprietary product of Prycroft Six Pty. Ltd. since 1986.\n  All rights reserved.\n\n  Source code for IMON versions for other operating systems (non-IBM\n  and pre-XA) is not included here.\n\n  Permission is hereby given for free use of this software.\n  You may also change it for your own use, but you may not\n  independently publish it without express permission while\n  Prycroft Six Pty Ltd (ABN 17 006 544 636) exists as a legal entity.\n  Prycroft Six Pty Ltd is automatically entitled to use any derivative\n  works.\n\n  Permission has been granted to include this software on the CBT Tape\n  under the above conditions.\n\n  If you do not agree with these conditions then please delete this\n  software from your system(s).  Thank you.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$STORY": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x14\\x01\\x00\\x01\\x01 \\x00\\x1f\\x01 !/#\\x04\\x00O\\x00A\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "20.01", "flags": 0, "createdate": "2020-01-01T00:00:00", "modifydate": "2020-07-30T23:04:01", "lines": 79, "newlines": 65, "modlines": 0, "user": "GREG"}, "text": "\n In 1981 I was a junior MVS sysprog given the task of looking after an\n OSIV/F4 system running on a M150F (rated at 0.4 MIPS) which had 3 MB\n of real storage.  Actually, FACOM specifed 2 MB in the tender, but the\n system required 3 MB to IPL.\n\n (Although the SECV was a MVS shop, a new system was required to run\n the Loy Yang A power station's Plant Management System.  The system\n would be located in the power station, and was not to be connected\n to the general purpose MVS system at head office.  The application\n was to be written in PL/I since the SECV was a PL/I shop and could\n therefore use existing staff for application development.  IBM's offer of\n a 4331 running DOS/VS did not impress, so the FACOM offer was accepted.)\n\n F4 was \"MVS-like\" and so I was interested in finding out how like MVS\n it was.  How many of our \"modern conveniences\" that we had on our\n large MVS system would work on F4?\n\n (F4 was eventually renamed to MSP - Multidimensional System Product.)\n\n Most of our software pertaining to DASD (the F493 units had the same\n geometry as 3350s), tapes, catalogs (yes, I set up a CVOL) and TSO\n (called TSS here) worked without change.  Even QUEUE worked, although\n the senior sysprog had to zap it to fix a TPUT macro expansion bug\n which Fujitsu had faithfully copied from the IBM service stream.\n\n But many control blocks were not the same.  For example, in fixed low\n core, the ASCB pointers were before the TCB pointers instead of after.\n Many of the TCB fields were the same, but the ASCB fields were rearranged.\n\n Anyway, I tried lots of programs from the SPLA and CBT tapes on the F4\n system, and some worked if compiled on MVS, some worked of compiled on\n F4, and some worked if I hacked the code.\n\n To replicate some sort of RMFMON functionality, I took the CHIMP program\n from one of the tapes and played around with it.  Eventually I got it\n to show me a line per address space in fullscreen mode, as it was intended\n to do.  I then found a later version of it which seemed to have provision\n for showing swap domain details, so I wrote a version of that for the\n FACOM system as well.  Options D, C, E, F, etc. followed in due course.\n\n I liked the program so much that I ported it to MVS.  Eventually I added\n 3270 extended data stream highlighting and colour, and so it snowballed.\n\n There were numerous iterations of porting improvements between MVS and\n MSP in both directions.\n\n I eventually left the SECV and become a contractor.  I converted my\n version of CHIMP to run under MVS/XA, renamed it to IMP, and began to\n license it.\n\n (The first time I tried the IMP command, I received\n ENTER SUBFIELD OF KEYWORD 'INDATASET' -\n from the system, so I abbreviated the command name even more to IM.)\n\n I had MSP and MVS customers, and kept it current for the newest releases\n of MVS/ESA and OS/390 that I had access to.  One of the distributors used\n the name IMON instead of IMP and so that's what it's called today.\n\n By the time z/OS came about all of the MSP sites in Australia (that I knew\n about) had transitioned off the platform, and most MVS customers had\n outsourced, though I continued to maintain it for my own use.  I allowed\n free use for 7060 (Multiprise 3000) and 1247 (Intel emulation) CPU types,\n and later for 9672 CPUs that could not migrate to z/OS.\n\n With the advent of Hercules around the turn of the century, I began work\n on retrofitting the OS/390 version to MVS 3.8, and that file is shipped\n separately.\n\n This file contains the z/OS version which seems to function up to V2R4.\n It lacks much 64-bit and UNIX awareness, but can still provide interesting\n insight into the overall performance of a z/OS system image.\n\n As I no longer have any paying customers for IMON, I have decided to make\n the source code generally available for such entertainment value as it\n may have.\n\n Greg Price, July 2020\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE010": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x02\\x01 5\\x0f\\x01 5\\x0f\\x08\\x13\\x00B\\x00B\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-12-15T00:00:00", "modifydate": "2020-12-15T08:13:02", "lines": 66, "newlines": 66, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 010 is from Greg Price, and contains source code and      *   FILE 010\n//*           a load library for his system monitor called IMON     *   FILE 010\n//*           or IM.                                                *   FILE 010\n//*                                                                 *   FILE 010\n//*       IMON used to be a \"pay product\", but since Greg           *   FILE 010\n//*       has no more paying customers, he has released the         *   FILE 010\n//*       source code for use by anyone, but only under the         *   FILE 010\n//*       conditions specified in the $$NOTICE meember of           *   FILE 010\n//*       this pds.                                                 *   FILE 010\n//*                                                                 *   FILE 010\n//*       This program is an extremely important multi-purpose      *   FILE 010\n//*       tool to have in your arsenal.  Every systems              *   FILE 010\n//*       programmer should learn how to use its many parts.        *   FILE 010\n//*       Previously, this marvelous program wasn't available       *   FILE 010\n//*       to the public.  Now, the author has graciously given      *   FILE 010\n//*       everyone access to it.                                    *   FILE 010\n//*                                                                 *   FILE 010\n//*       email:  greg.price@optusnet.com.au                        *   FILE 010\n//*                                                                 *   FILE 010\n//*       Load modules are included in XMIT format as member        *   FILE 010\n//*       LOADLIB.                                                  *   FILE 010\n//*                                                                 *   FILE 010\n//*       JCL members are included in XMIT format as member         *   FILE 010\n//*       IMONCNTL.                                                 *   FILE 010\n//*                                                                 *   FILE 010\n//*   Sample IMON main menu (condensed to fit in this space)        *   FILE 010\n//*                                                                 *   FILE 010\n//*      INTERACTIVE MONITORING PROGRAM FOR OS/390 AND z/OS         *   FILE 010\n//*   ? - INVOKE THE I-MON TUTORIAL   (PF1/13)                      *   FILE 010\n//*   $ - DISK SPACE DISPLAY                     I-MON              *   FILE 010\n//*   @ - UNIX USER DATA BASE DISPLAY           PRIMARY             *   FILE 010\n//*   A - ADDRESS SPACE MONITOR       (PF6/18)  OPTIONS             *   FILE 010\n//*   B - DISPLAY BLDL AND CSVQUERY RESULTS                         *   FILE 010\n//*   C - CHANNEL PATH MONITOR                                      *   FILE 010\n//*   D - INPUT/OUTPUT DEVICE MONITOR (PF9/21)  USERID-----: CBT0   *   FILE 010\n//*   E - RESERVE AND ENQUEUE MONITOR           TERMINAL---: TCP0   *   FILE 010\n//*   G - GRAPHIC ACTIVITY MONITOR              NETWORK----: VTAM   *   FILE 010\n//*   J - JOB STATUS MONITOR                    DATE-(NOW)-: 2020   *   FILE 010\n//*   K - HISTORICAL KNOWLEDGE DISPLAY          DATE-(IPL)-: 2020   *   FILE 010\n//*   L - SYSTEM LIBRARY DISPLAY                SYSTEM-ID--: CBT    *   FILE 010\n//*   M - SYSTEM/SYSPLEX MANAGEMENT MONITOR     SYSTEM-NAME: CBT    *   FILE 010\n//*   N - NUCLEUS MAP DISPLAY AND LOOKUP        SYSPLEX----: LOCA   *   FILE 010\n//*   O - OS CONSOLE AND MTT MONITOR            LPAR-NAME--: TRNG   *   FILE 010\n//*   P - PAGE DATA SET MONITOR                 CLONE-NAME-: BT     *   FILE 010\n//*   R - RATE CPU INSTRUCTION SPEED            VM-GUEST-ID:        *   FILE 010\n//*   S - SWAP DOMAIN OR SERVICE CLASS MONITOR  CONFIG-NAME: VI39   *   FILE 010\n//*   T - SVC TABLE DISPLAY                     CPU-SERIAL-: 02AB   *   FILE 010\n//*   U - PERFORM UNIT I/O SAMPLING             CPU-MODEL--: 3907   *   FILE 010\n//*   V - VIRTUAL STORAGE MONITOR                                   *   FILE 010\n//*   X - EXIT I-MON                  (PF3/15)                      *   FILE 010\n//*   (C) COPYRIGHT PRYCROFT SIX PTY. LTD. 1986-2020                *   FILE 010\n//*                                                                 *   FILE 010\n//*   IMON originated from the old CHIMP monitor that used to be    *   FILE 010\n//*   on the CBT Tape.  But:                                        *   FILE 010\n//*                                                                 *   FILE 010\n//*   1.  IMON works on current z/OS systems (2.4 at present)       *   FILE 010\n//*   2.  IMON was originally modified to work on Fujitsu FACOM     *   FILE 010\n//*        systems as well as MVS.                                  *   FILE 010\n//*   3.  IMON was a vendor product, sold for pay, for a long time, *   FILE 010\n//*        until now.                                               *   FILE 010\n//*                                                                 *   FILE 010\n//*   Don't pass up an opportunity to install this product,         *   FILE 010\n//*    and use its many featues.  This product is very precious.    *   FILE 010\n//*                                                                 *   FILE 010\n//*   Thanks, Greg....!!!!                                          *   FILE 010\n//*                                                                 *   FILE 010\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASM": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01^\\x00\\x13\\x00\\x89\\x12/\\x01 \\x00?\\x083\\x00\\x1b\\x00\\n\\x00\\x00\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.94", "flags": 0, "createdate": "1989-05-02T00:00:00", "modifydate": "2020-01-03T08:33:13", "lines": 27, "newlines": 10, "modlines": 0, "user": "GPRICE"}, "text": "//GPRICEA  JOB (SYS),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=&SYSUID.,REGION=128M,COND=(0,NE)\n/*JOBPARM L=120\n//ASM1    EXEC PGM=ASMA90,\n// PARM='TERM,NODECK,OBJECT,XREF(SHORT),USING(WARN(11)),FLAG(PAGE0)'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&SYSUID..I390.DATA,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=&SYSUID..I390.DATA(IMPXA),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,AC=1,NCAL,LET,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  *\n  INCLUDE SYSLIB(IM)\n  ORDER IMPXA\n  NAME IM(R)\n/*\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLIB   DD  DSN=&SYSUID..IMON.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&SYSUID..I390.LOAD,DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMBB": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x98!_\\x00\\x99#\\x7f\\x18S\\x00\\x15\\x00\\x14\\x00\\x00\\xe9\\xc7\\xe7\\xd7\\xf3\\xf0@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1998-08-03T00:00:00", "modifydate": "1999-08-25T18:53:00", "lines": 21, "newlines": 20, "modlines": 0, "user": "ZGXP30"}, "text": "//ZGXP30A  JOB (HUB00100),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=ZGXP30,REGION=4M,COND=(0,NE)\n/*JOBPARM L=90\n//ASM1    EXEC PGM=ASMA90,\n//             PARM='TERM,NODECK,OBJECT,XREF(SHORT),USING(WARN(11))'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=ZGXP30.IMVS.DATA,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=ZGXP30.IMVS.DATA(IMXCF),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DSN=ZGXP30.XA.LOAD(IMXCF),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMDG": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x16\\x00\\x00\\x00\\x91)_\\x01\\x03\\x06o\\x14'\\x00\\x17\\x00\\x1a\\x00\\x00\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@\"", "ispf": {"version": "01.22", "flags": 0, "createdate": "1991-10-22T00:00:00", "modifydate": "2003-03-07T14:27:00", "lines": 23, "newlines": 26, "modlines": 0, "user": "UBQ001"}, "text": "//ZGXP30A  JOB (SYS),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=&SYSUID.,REGION=2048K,COND=(0,NE)\n/*JOBPARM L=30\n//ASM1    EXEC PGM=ASMA90,\n//             PARM='TERM,NODECK,OBJECT,XREF(SHORT),USING(WARN(11))'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=&SYSUID..I390.DATA,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=&SYSUID..I390.DATA(IMDATGAT),DISP=SHR\n//         DD  DSN=&SYSUID..I390.DATA(IMGATGET),DISP=SHR\n//         DD  DSN=&SYSUID..I390.DATA(IMDGPURG),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL,AC=1'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DSN=&SYSUID..I390.LOAD(IMDATGAT),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMDR": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x12\\x0f\\x01\\x03\\x06o\\x14)\\x00\\x14\\x00\\x14\\x00\\x00\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-04-30T00:00:00", "modifydate": "2003-03-07T14:29:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "UBQ001"}, "text": "//UBQ001A JOB (SYS),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=&SYSUID.,REGION=3M,COND=(0,NE)\n//ASM1    EXEC PGM=ASMA90,\n//   PARM='TERM,NODECK,OBJECT,XREF(SHORT),USING(WARN(11))'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&SYSUID..I390.DATA,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=&SYSUID..I390.DATA(IMDSSTRD),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DSN=&SYSUID..I390.LOAD(IMDSSTRD),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMG": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00)\\x00\\x910O\\x01\\x16\\x05_\\x14(\\x00\\x1a\\x00\\x11\\x00\\x00\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1991-10-31T00:00:00", "modifydate": "2016-02-24T14:28:29", "lines": 26, "newlines": 17, "modlines": 0, "user": "GPRICE"}, "text": "//GPRICEG  JOB (SYS),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=&SYSUID.,REGION=3M,COND=(0,NE)\n/*JOBPARM L=50\n//PARSE   EXEC PGM=GLSPARSE\n//STEPLIB  DD  DSN=&SYSUID..XA.LOAD,DISP=SHR\n//SYSPUNCH DD  SYSOUT=*\n//SYSUT1   DD  DSN=&SYSUID..I390.DATA(IMPXAGLS),DISP=SHR\n//SYSUT2   DD  DSN=&&SYSIN,DISP=(NEW,PASS,DELETE),\n//             DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=0,\n//             UNIT=VIO,SPACE=(CYL,10)\n//ASM     EXEC PGM=ASMA90,PARM='TERM,NODECK,OBJECT,RENT,NOXREF'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=&SYSUID..I390.DATA,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=&&SYSIN,DISP=(OLD,DELETE)\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL,OL,REUS,RENT,REFR'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DSN=&SYSUID..I390.LOAD(IMPXAGLS),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMGP": {"ttr": 538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93\\x16\\x7f\\x01\\x01\\x08\\x7f\\x143\\x00\\x12\\x00\\x12\\x00\\x00\\xe9\\xc7\\xe7\\xd7\\xf3\\xf0@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-06-16T00:00:00", "modifydate": "2001-03-28T14:33:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "ZGXP30"}, "text": "//ZGXP30G  JOB (HUB00100),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=ZGXP30,REGION=1M,COND=(0,NE)\n/*JOBPARM L=10\n//ASM     EXEC PGM=ASMA90,PARM='TERM,NODECK,OBJECT'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=ZGXP30.XA.DATA(GLSPARSE),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DSN=ZGXP30.XA.LOAD(GLSPARSE),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMIS": {"ttr": 540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x17\\x00\\x89\\x19\\x8f\\x01\\x08\\x10\\x7f!C\\x00\\x11\\x00\\x10\\x00\\x00\\xc9\\xd5\\xe3\\xe3\\xf0\\xf3\\xf0@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1989-07-17T00:00:00", "modifydate": "2008-04-16T21:43:17", "lines": 17, "newlines": 16, "modlines": 0, "user": "INTT030"}, "text": "//INTT030S JOB (HUB00100),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=INTT030,REGION=2048K,COND=(0,NE)\n//ASM     EXEC PGM=ASMA90,PARM='TERM,NODECK,OBJECT,XREF(SHORT)'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=INTT030.I390.DATA(IMPXASPY),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL,RENT'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DSN=INTT030.I390.LOAD(IMPXASPY),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMLX1": {"ttr": 542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x95%\\x1f\\x00\\x99\\x02\\x1f!\\x10\\x00\\x14\\x00\\x14\\x00\\x00\\xe9\\xc7\\xe7\\xd7\\xf3\\xf0@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-09-08T00:00:00", "modifydate": "1999-01-21T21:10:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "ZGXP30"}, "text": "//ZGXP30X  JOB (HUB00100),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=ZGXP30,REGION=2M,COND=(0,NE)\n/*JOBPARM L=20\n//ASM1    EXEC PGM=ASMA90,PARM='TERM,NODECK,OBJECT,XREF(SHORT)'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=ZGXP30.IMVS.DATA,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=ZGXP30.IMVS.DATA(IMLLAIX1),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DSN=ZGXP30.XA.LOAD(CSVLLIX1),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMN": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00%\\x01\\x08\\x10\\x7f\\x01\\x08\\x10\\x7f\"\"\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc9\\xd5\\xe3\\xe3\\xf0\\xf3\\xf0@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2008-04-16T00:00:00", "modifydate": "2008-04-16T22:22:25", "lines": 26, "newlines": 26, "modlines": 0, "user": "INTT030"}, "text": "//INTT030A JOB (SYS),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=&SYSUID.,REGION=3M,COND=(0,NE)\n/*JOBPARM L=120\n//ASM1    EXEC PGM=ASMA90,\n//   PARM='TERM,NODECK,OBJECT,XREF(SHORT),USING(WARN(11))'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&SYSUID..I390.DATA,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=&SYSUID..I390.DATA(IMPXA),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,AC=1,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  *\n  ORDER IMPXA\n  NAME IM(R)\n/*\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLIB   DD  DSN=&SYSUID..I390.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&SYSUID..I390.LOAD,DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMSP": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00X\\x00\\x93%\\x1f\\x01\\x18\\x06\\x8f\\x13S\\x00\\x15\\x00\\x14\\x00\\x00\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1993-09-08T00:00:00", "modifydate": "2018-03-09T13:53:58", "lines": 21, "newlines": 20, "modlines": 0, "user": "GPRICE"}, "text": "//GPRICES  JOB ,G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=&SYSUID.,REGION=6M,COND=(0,NE)\n/*JOBPARM L=10\n//ASM     EXEC PGM=ASMA90,\n//             PARM='TERM,NODECK,OBJECT,USING(WARN(11)),FLAG(PAGE0)'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=GPRICE.I390.DATA,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=GPRICE.I390.DATA(IMSPACER),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL,AC=1'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DSN=GPRICE.IMON.LOAD(IMSPACER),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCS": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x02\\x00\\x00\\x00\\x86%\\x8f\\x01\\x06\\x06O\\x18T\\x02\\xf0\\x01\\x88\\x00\\x07\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "04.02", "flags": 0, "createdate": "1986-09-15T00:00:00", "modifydate": "2006-03-05T18:54:00", "lines": 752, "newlines": 392, "modlines": 7, "user": "UBQ001"}, "text": "         MACRO\n&NAME    DCS\n.**********************************************************************\n.*                                                                    *\n.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *\n.*                                                                    *\n.*        WRITTEN BY BILL GODFREY                                     *\n.*        PLANNING RESEARCH CORPORATION                               *\n.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *\n.*        DATE WRITTEN: JANUARY 8 1981.                               *\n.*        DATE UPDATED: MARCH 18 1982. (ROW AND COL IN PARENS)        *\n.*        GP@P6          JULY 25 1986. (EXTENDED ATTRS, MEDIUM INTENS)*\n.*        GP@P6     SEPTEMBER 23 1986. (ESCAPES, WRITES, RA, MFA, MF) *\n.*        GP@P6        AUGUST 24 1987. (EAU, WSF, RB, RM, RMA)        *\n.*        GP@P6       OCTOBER 15 1987. (3270 AND GRAPHIC EXTRAS)      *\n.*        GP@P6         MARCH 05 2006. (ALLOW UP TO LINE 43)          *\n.*                                                                    *\n.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *\n.*                                                                    *\n.*        SAMPLE                                                      *\n.*           DCS    AL1(WCC),SBA,(1,1),RTA,(7,1),X'00',IC             *\n.*                                                                    *\n.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *\n.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *\n.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *\n.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *\n.*           SO YOU DONT HAVE TO KNOW THE HEX CODES FOR THEM,         *\n.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *\n.*           (A SET OF RESERVED NAMES) SO YOU DONT HAVE TO KNOW       *\n.*           THE HEX CODES FOR THEM.                                  *\n.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *\n.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *\n.*                                                                    *\n.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *\n.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *\n.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *\n.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *\n.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *\n.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *\n.*                                                                    *\n.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *\n.*        ANY COMBINATION OF THE FOLLOWING.                           *\n.*                                                                    *\n.*        .  AN ESCAPE CHARACTER.                                     *\n.*           VALID ESCAPE CHARACTERS ARE:                             *\n.*           ESC - ESCAPE                                             *\n.*           GE  - GRAPHIC ESCAPE                                     *\n.*        .  A WRITE COMMAND.                                         *\n.*           VALID WRITE COMMANDS ARE:                                *\n.*           WR  - WRITE (WRT)                                        *\n.*           EW  - ERASE/WRITE                                        *\n.*           EWA - ERASE/WRITE ALTERNATE                              *\n.*           EAU - ERASE ALL UNPROTECTED                              *\n.*           WSF - WRITE STRUCTURED FIELD                             *\n.*        .  A READ COMMAND.                                          *\n.*           VALID READ COMMANDS ARE:                                 *\n.*           RB  - READ BUFFER                                        *\n.*           RM  - READ MODIFIED                                      *\n.*           RMA - READ MODIFIED ALL                                  *\n.*        .  A 3270 ORDER.                                            *\n.*           VALID 3270 ORDERS ARE:                                   *\n.*           SBA, SF, RA (RTA), IC, PT (HT), EUA, SA, SFE, MF (MFA).  *\n.*        .  A BUFFER ADDRESS IN PARENTHESES.                         *\n.*           IF AN OPERAND IS IN PARENTHESES, IT IS ASSUMED THAT      *\n.*           THE ROW AND COLUMN NUMBER ARE BETWEEN THE PARENS,        *\n.*           SEPARATED BY A COMMA.  EXAMPLE: (1,1)                    *\n.*           THIS FORM OF BUFFER ADDRESS IS NEW AS OF MARCH 18 1982.  *\n.*        .  A ROW OR COLUMN NUMBER OF A BUFFER ADDRESS (OLD FORMAT). *\n.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *\n.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *\n.*           SPECIFY THE BUFFER ADDRESS (ROW AND COLUMN) SO NUMERIC   *\n.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *\n.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *\n.*           THIS FORMAT IS SUPPORTED ONLY FOR COMPATIBILITY WITH     *\n.*           THE ORIGINAL VERSION OF THIS MACRO.                      *\n.*        .  AN ATTRIBUTE BYTE.                                       *\n.*           VALID ATTRIBUTE BYTES ARE:                               *\n.*           UNPLO  - UNPROTECTED NORMAL INTENSITY                    *\n.*           UNPMD  - UNPROTECTED MEDIUM INTENSITY                    *\n.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *\n.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *\n.*           PROLO  - PROTECTED NORMAL INTENSITY                      *\n.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *\n.*           PROMD  - PROTECTED MEDIUM INTENSITY                      *\n.*           PROMDS - PROTECTED MEDIUM INTENSITY AUTO-SKIP            *\n.*           PROHI  - PROTECTED HIGH INTENSITY                        *\n.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *\n.*        .  AN EXTENDED ATTRIBUTE TYPE.                              *\n.*           VALID ATTRIBUTE TYPES ARE:                               *\n.*           FIELD, VALIDN, OUTLIN, HILITE, COLOUR, PGMSYM, BKCOLR    *\n.*           AND TRANSP.                                              *\n.*        .  AN EXTENDED HIGHLIGHTING SPECIFICATION.                  *\n.*           VALID HIGHLIGHTINGS ARE:                                 *\n.*           NORMAL, BLINK, REVERSE AND USCORE.                       *\n.*        .  AN EXTENDED COLOUR SPECIFICATION.                        *\n.*           VALID COLOURS ARE:                                       *\n.*           BLUE, RED, PINK, GREEN, TURQ, YELLOW, WHITE AND NORMAL.  *\n.*        .  A BACKGROUND TRANSPARENCY SPECIFICATION.                 *\n.*           VALID TRANSPARENCIES ARE:                                *\n.*           NORMAL (TRANSPARENT) AND OPAQUE (NON-TRANSPARENT).       *\n.*        .  A FORMAT CONTROL ORDER.                                  *\n.*           VALID FORMAT CONTROL ORDERS ARE:                         *\n.*           NUL, SUB, DUP, FM, FF, CR, NL, EM, EO, BYP, RES, SI, SO. *\n.*        .  A GRAPHIC ORDER.                                         *\n.*           VALID GRAPHIC ORDERS ARE TOO NUMEROUS TO MENTION.        *\n.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *\n.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *\n.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *\n.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *\n.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *\n.*                                                                    *\n.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *\n.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *\n.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *\n.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *\n.*                                                                    *\n.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *\n.*        SCREEN SIZE OF 43 ROWS BY 80 COLUMNS. FOR SCREENS           *\n.*        OF OTHER DIMENSIONS THE MACRO NEEDS ONLY A FEW CHANGES.     *\n.*                                                                    *\n.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *\n.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *\n.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *\n.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *\n.*                                                                    *\n.*        PROGRAMMING NOTE:                                           *\n.*        SA,NORMAL,NORMAL     WILL DO IN THREE BYTES WHAT            *\n.*        SA,HILITE,NORMAL,SA,COLOUR,NORMAL,SA,PGMSYM,NORMAL          *\n.*                             WILL DO IN NINE BYTES.                 *\n.*                                                                    *\n.*        TECHNICAL NOTES:                                            *\n.*        ATTRIBUTES WITH CODES IN THE RANGE X'00' TO X'7F' HAVE      *\n.*        VALUES GIVEN BY A 1-BYTE BINARY NUMBER.  EG. X'42' (COLOUR) *\n.*        ATTRIBUTES WITH CODES IN THE RANGE X'C0' TO X'FF' HAVE      *\n.*        BIT-ENCODED VALUES.  EG. X'C0' (3270 FIELD ATTRIBUTE)       *\n.*        CHARACTER SETS:                                             *\n.*        X'00' - DEFAULT               X'40'-X'EF' - LOADABLE LCID   *\n.*        X'F0'-X'F7' - NON-LOADABLE LCID   X'F8'-X'FE' - DBCS LCID   *\n.*        FIELD VALIDATION:                                           *\n.*        SPECIFY A BYTE IN THE RANGE X'00' TO X'07' ON THE BASIS OF  *\n.*        X'01' ON FOR TRIGGER, X'02' ON FOR MANDATORY ENTRY AND      *\n.*        X'04' ON FOR MANDATORY FILL.                                *\n.*        FIELD OUTLINING:                                            *\n.*        SPECIFY A BYTE IN THE RANGE X'00' TO X'0F' ON THE BASIS OF  *\n.*        X'01' ON FOR UNDERLINE, X'02' ON FOR RIGHT VERTICAL LINE,   *\n.*        X'04' ON FOR OVERLINE AND X'08' ON FOR LEFT VERTICAL LINE.  *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &R,&C,&P,&Q\n         LCLA  &AN,&AS,&AL\n         LCLB  &B,&NUMERIC,&INTEGER\n         LCLC  &T(64)\n         LCLC  &N,&ROW,&COL\n         LCLC  &CS,&STRING\n&T(1)    SETC  '40'\n&T(2)    SETC  'C1'\n&T(3)    SETC  'C2'\n&T(4)    SETC  'C3'\n&T(5)    SETC  'C4'\n&T(6)    SETC  'C5'\n&T(7)    SETC  'C6'\n&T(8)    SETC  'C7'\n&T(9)    SETC  'C8'\n&T(10)   SETC  'C9'\n&T(11)   SETC  '4A'\n&T(12)   SETC  '4B'\n&T(13)   SETC  '4C'\n&T(14)   SETC  '4D'\n&T(15)   SETC  '4E'\n&T(16)   SETC  '4F'\n.*\n&T(17)   SETC  '50'\n&T(18)   SETC  'D1'\n&T(19)   SETC  'D2'\n&T(20)   SETC  'D3'\n&T(21)   SETC  'D4'\n&T(22)   SETC  'D5'\n&T(23)   SETC  'D6'\n&T(24)   SETC  'D7'\n&T(25)   SETC  'D8'\n&T(26)   SETC  'D9'\n&T(27)   SETC  '5A'\n&T(28)   SETC  '5B'\n&T(29)   SETC  '5C'\n&T(30)   SETC  '5D'\n&T(31)   SETC  '5E'\n&T(32)   SETC  '5F'\n.*\n&T(33)   SETC  '60'\n&T(34)   SETC  '61'\n&T(35)   SETC  'E2'\n&T(36)   SETC  'E3'\n&T(37)   SETC  'E4'\n&T(38)   SETC  'E5'\n&T(39)   SETC  'E6'\n&T(40)   SETC  'E7'\n&T(41)   SETC  'E8'\n&T(42)   SETC  'E9'\n&T(43)   SETC  '6A'\n&T(44)   SETC  '6B'\n&T(45)   SETC  '6C'\n&T(46)   SETC  '6D'\n&T(47)   SETC  '6E'\n&T(48)   SETC  '6F'\n.*\n&T(49)   SETC  'F0'\n&T(50)   SETC  'F1'\n&T(51)   SETC  'F2'\n&T(52)   SETC  'F3'\n&T(53)   SETC  'F4'\n&T(54)   SETC  'F5'\n&T(55)   SETC  'F6'\n&T(56)   SETC  'F7'\n&T(57)   SETC  'F8'\n&T(58)   SETC  'F9'\n&T(59)   SETC  '7A'\n&T(60)   SETC  '7B'\n&T(61)   SETC  '7C'\n&T(62)   SETC  '7D'\n&T(63)   SETC  '7E'\n&T(64)   SETC  '7F'\n.*\n&N       SETC  '&NAME'\n&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS\n&AS      SETA  0\n&B       SETB  0 FALSE\n.EACH    AIF   (&AN EQ 0).EPILOG\n&AS      SETA  &AS+1\n&CS      SETC  '&AS'\n&AL      SETA  K'&SYSLIST(&AS)\n         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT\n         AIF   ('&SYSLIST(&AS)'(1,1) EQ '(').PAIR\n&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS)'(1,1) GE '0')\n         AIF   (&NUMERIC AND &INTEGER).ROWCOL\n         AIF   (NOT &B).ROWCOLX\n         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'\n&B       SETB  0 FALSE\n.ROWCOLX ANOP\n&STRING  SETC  '&SYSLIST(&AS)'\n.*             ESCAPES\n         AIF   ('&STRING' EQ 'ESC').ESC\n         AIF   ('&STRING' EQ 'GE').GE\n.*             WRITES\n         AIF   ('&STRING' EQ 'WR').WR\n         AIF   ('&STRING' EQ 'WRT').WR\n         AIF   ('&STRING' EQ 'EW').EW\n         AIF   ('&STRING' EQ 'EWA').EWA\n         AIF   ('&STRING' EQ 'EAU').EAU\n         AIF   ('&STRING' EQ 'WSF').WSF\n.*             READS\n         AIF   ('&STRING' EQ 'RB').RB\n         AIF   ('&STRING' EQ 'RM').RM\n         AIF   ('&STRING' EQ 'RMA').RMA\n.*             3270 ORDERS\n         AIF   ('&STRING' EQ 'SBA').SBA\n         AIF   ('&STRING' EQ 'SF').SF\n         AIF   ('&STRING' EQ 'SFE').SFE\n         AIF   ('&STRING' EQ 'RA').RA\n         AIF   ('&STRING' EQ 'RTA').RA\n         AIF   ('&STRING' EQ 'IC').IC\n         AIF   ('&STRING' EQ 'PT').PT\n         AIF   ('&STRING' EQ 'HT').PT\n         AIF   ('&STRING' EQ 'EUA').EUA\n         AIF   ('&STRING' EQ 'SA').SA\n         AIF   ('&STRING' EQ 'MF').MF\n         AIF   ('&STRING' EQ 'MFA').MF\n.*             ATTRIBUTES\n         AIF   ('&STRING' EQ 'UNPLO').UNPLO\n         AIF   ('&STRING' EQ 'UNPMD').UNPMD\n         AIF   ('&STRING' EQ 'UNPHI').UNPHI\n         AIF   ('&STRING' EQ 'UNPNP').UNPNP\n         AIF   ('&STRING' EQ 'PROLO').PROLO\n         AIF   ('&STRING' EQ 'PROLOS').PROLOS\n         AIF   ('&STRING' EQ 'PROMD').PROMD\n         AIF   ('&STRING' EQ 'PROMDS').PROMDS\n         AIF   ('&STRING' EQ 'PROHI').PROHI\n         AIF   ('&STRING' EQ 'PROHIS').PROHIS\n.*             EXTENDED ATTRIBUTE TYPES\n         AIF   ('&STRING' EQ 'FIELD').FIELD\n         AIF   ('&STRING' EQ 'VALIDN').VALIDN\n         AIF   ('&STRING' EQ 'OUTLIN').OUTLIN\n         AIF   ('&STRING' EQ 'HILITE').HILITE\n         AIF   ('&STRING' EQ 'COLOUR').COLOUR\n         AIF   ('&STRING' EQ 'PGMSYM').PGMSYM\n         AIF   ('&STRING' EQ 'BKCOLR').BKCOLR\n         AIF   ('&STRING' EQ 'TRANSP').TRANSP\n.*             HIGHLIGHTING\n         AIF   ('&STRING' EQ 'NORMAL').NORMAL\n         AIF   ('&STRING' EQ 'BLINK').BLINK\n         AIF   ('&STRING' EQ 'REVERSE').REVERSE\n         AIF   ('&STRING' EQ 'USCORE').USCORE\n.*             COLOURS\n         AIF   ('&STRING' EQ 'BLUE').BLUE\n         AIF   ('&STRING' EQ 'RED').RED\n         AIF   ('&STRING' EQ 'PINK').PINK\n         AIF   ('&STRING' EQ 'GREEN').GREEN\n         AIF   ('&STRING' EQ 'TURQ').TURQ\n         AIF   ('&STRING' EQ 'YELLOW').YELLOW\n         AIF   ('&STRING' EQ 'WHITE').WHITE\n.*             TRANSPARENCIES\n         AIF   ('&STRING' EQ 'OPAQUE').OPAQUE\n.*             FORMAT CONTROL ORDERS\n         AIF   ('&STRING' EQ 'NUL').NUL\n         AIF   ('&STRING' EQ 'SUB').SUB\n         AIF   ('&STRING' EQ 'DUP').DUP\n         AIF   ('&STRING' EQ 'FM').FM\n         AIF   ('&STRING' EQ 'FF').FF\n         AIF   ('&STRING' EQ 'CR').CR\n         AIF   ('&STRING' EQ 'NL').NL\n         AIF   ('&STRING' EQ 'EM').EM\n         AIF   ('&STRING' EQ 'EO').EO\n         AIF   ('&STRING' EQ 'BYP').BYP\n         AIF   ('&STRING' EQ 'RES').RES\n         AIF   ('&STRING' EQ 'SI').SI\n         AIF   ('&STRING' EQ 'SO').SO\n.*             GRAPHIC ORDERS\n         AIF   ('&STRING' EQ 'GBAR').GBAR\n         AIF   ('&STRING' EQ 'GBIMG').GBIMG\n         AIF   ('&STRING' EQ 'GCBIMG').GCBIMG\n         AIF   ('&STRING' EQ 'GCHST').GCHST\n         AIF   ('&STRING' EQ 'GCCHST').GCCHST\n         AIF   ('&STRING' EQ 'GEAR').GEAR\n         AIF   ('&STRING' EQ 'GEIMG').GEIMG\n         AIF   ('&STRING' EQ 'GFLT').GFLT\n         AIF   ('&STRING' EQ 'GCFLT').GCFLT\n         AIF   ('&STRING' EQ 'GFARC').GFARC\n         AIF   ('&STRING' EQ 'GCFARC').GCFARC\n         AIF   ('&STRING' EQ 'GIMD').GIMD\n         AIF   ('&STRING' EQ 'GLINE').GLINE\n         AIF   ('&STRING' EQ 'GCLINE').GCLINE\n         AIF   ('&STRING' EQ 'GMRK').GMRK\n         AIF   ('&STRING' EQ 'GRLINE').GRLINE\n         AIF   ('&STRING' EQ 'GCRLINE').GCRLINE\n         AIF   ('&STRING' EQ 'GSBMX').GSBMX\n         AIF   ('&STRING' EQ 'GSCA').GSCA\n         AIF   ('&STRING' EQ 'GSCC').GSCC\n         AIF   ('&STRING' EQ 'GSCD').GSCD\n         AIF   ('&STRING' EQ 'GSCR').GSCR\n         AIF   ('&STRING' EQ 'GSCS').GSCS\n         AIF   ('&STRING' EQ 'GSCH').GSCH\n         AIF   ('&STRING' EQ 'GSCOL').GSCOL\n         AIF   ('&STRING' EQ 'GSECOL').GSECOL\n         AIF   ('&STRING' EQ 'GSLT').GSLT\n         AIF   ('&STRING' EQ 'GSLW').GSLW\n         AIF   ('&STRING' EQ 'GSMC').GSMC\n         AIF   ('&STRING' EQ 'GSMP').GSMP\n         AIF   ('&STRING' EQ 'GSMS').GSMS\n         AIF   ('&STRING' EQ 'GSMT').GSMT\n         AIF   ('&STRING' EQ 'GSMX').GSMX\n         AIF   ('&STRING' EQ 'GSPS').GSPS\n         AIF   ('&STRING' EQ 'GSPT').GSPT\n         AIF   ('&STRING' EQ 'GCOMT').GCOMT\n         AIF   ('&STRING' EQ 'GSAP').GSAP\n         AIF   ('&STRING' EQ 'GSCP').GSCP\n         AIF   ('&STRING' EQ 'GSGCH').GSGCH\n         AIF   ('&STRING' EQ 'GEPROL').GEPROL\n         AIF   ('&STRING' EQ 'GESD').GESD\n         AIF   ('&STRING' EQ 'GERASE').GERASE\n         AIF   ('&STRING' EQ 'GSTOPDR').GSTOPDR\n         AIF   ('&STRING' EQ 'GATTCUR').GATTCUR\n         AIF   ('&STRING' EQ 'GDETCUR').GDETCUR\n         AIF   ('&STRING' EQ 'GSETCUR').GSETCUR\n         AIF   ('&STRING' EQ 'GSCUDEF').GSCUDEF\n         AIF   ('&STRING' EQ 'GNOP1').GNOP1\n.*             CONSTANTS\n.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS\n.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.\n.DC      ANOP\n&N       DC    &STRING\n         AGO   .NEXT\n.ESC     ANOP\n&N       DC    X'27'               ESCAPE\n         AGO   .NEXT\n.GE      ANOP\n&N       DC    X'08'               GRAPHIC ESCAPE\n         AGO   .NEXT\n.WR      ANOP\n&N       DC    X'F1'               WRITE\n         AGO   .NEXT\n.EW      ANOP\n&N       DC    X'F5'               ERASE/WRITE\n         AGO   .NEXT\n.EWA     ANOP\n&N       DC    X'7E'               ERASE/WRITE ALTERNATE\n         AGO   .NEXT\n.EAU     ANOP\n&N       DC    X'6F'               ERASE ALL UNPROTECTED\n         AGO   .NEXT\n.WSF     ANOP\n&N       DC    X'F3'               WRITE STRUCTURED FIELD\n         AGO   .NEXT\n.RB      ANOP\n&N       DC    X'F2'               READ BUFFER\n         AGO   .NEXT\n.RM      ANOP\n&N       DC    X'F6'               READ MODIFIED\n         AGO   .NEXT\n.RMA     ANOP\n&N       DC    X'6E'               READ MODIFIED ALL\n         AGO   .NEXT\n.SBA     ANOP\n&N       DC    X'11'               SET BUFFER ADDRESS\n         AGO   .NEXT\n.SF      ANOP\n&N       DC    X'1D'               START FIELD\n         AGO   .NEXT\n.RA      ANOP\n&N       DC    X'3C'               REPEAT TO ADDRESS\n         AGO   .NEXT\n.IC      ANOP\n&N       DC    X'13'               INSERT CURSOR\n         AGO   .NEXT\n.PT      ANOP\n&N       DC    X'05'               PROGRAM TAB  (HORIZONTAL TAB)\n         AGO   .NEXT\n.EUA     ANOP\n&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS\n         AGO   .NEXT\n.SA      ANOP\n&N       DC    X'28'               SET ATTRIBUTE\n         AGO   .NEXT\n.SFE     ANOP\n&N       DC    X'29'               START FIELD EXTENDED\n         AGO   .NEXT\n.MF      ANOP\n&N       DC    X'2C'               MODIFY FIELD ATTRIBUTES\n         AGO   .NEXT\n.UNPLO   ANOP\n&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY\n         AGO   .NEXT\n.UNPMD   ANOP\n&N       DC    X'C4'               UNPROTECTED MEDIUM INTENSITY\n         AGO   .NEXT\n.UNPHI   ANOP\n&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY\n         AGO   .NEXT\n.UNPNP   ANOP\n&N       DC    X'4C'               UNPROTECTED NO-DISPLAY\n         AGO   .NEXT\n.PROLO   ANOP\n&N       DC    X'60'               PROTECTED NORMAL INTENSITY\n         AGO   .NEXT\n.PROLOS  ANOP\n&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP\n         AGO   .NEXT\n.PROMD   ANOP\n&N       DC    X'E4'               PROTECTED MEDIUM INTENSITY\n         AGO   .NEXT\n.PROMDS  ANOP\n&N       DC    X'F4'               PROTECTED MEDIUM INTENSITY SKIP\n         AGO   .NEXT\n.PROHI   ANOP\n&N       DC    X'E8'               PROTECTED HIGH INTENSITY\n         AGO   .NEXT\n.PROHIS  ANOP\n&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP\n         AGO   .NEXT\n.FIELD   ANOP\n&N       DC    X'C0'               3270 FIELD ATTRIBUTE\n         AGO   .NEXT\n.VALIDN  ANOP\n&N       DC    X'C1'               FIELD VALIDATION\n         AGO   .NEXT\n.OUTLIN  ANOP\n&N       DC    X'C2'               FIELD OUTLINING\n         AGO   .NEXT\n.HILITE  ANOP\n&N       DC    X'41'               EXTENDED HIGHLIGHTING\n         AGO   .NEXT\n.COLOUR  ANOP\n&N       DC    X'42'               EXTENDED COLOUR\n         AGO   .NEXT\n.PGMSYM  ANOP\n&N       DC    X'43'               PROGRAMMED SYMBOLS\n         AGO   .NEXT\n.BKCOLR  ANOP\n&N       DC    X'45'               BACKGROUND COLOUR\n         AGO   .NEXT\n.TRANSP  ANOP\n&N       DC    X'46'               BACKGROUND TRANSPARENCY\n         AGO   .NEXT\n.NORMAL  ANOP\n&N       DC    X'00'               CHARACTER ATTRIBUTE RESET (DEFAULT)\n         AGO   .NEXT\n.BLINK   ANOP\n&N       DC    X'F1'               BLINK HIGHLIGHTING\n         AGO   .NEXT\n.REVERSE ANOP\n&N       DC    X'F2'               REVERSE VIDEO HIGHLIGHTING\n         AGO   .NEXT\n.USCORE  ANOP\n&N       DC    X'F4'               UNDERSCORE HIGHLIGHTING\n         AGO   .NEXT\n.BLUE    ANOP\n&N       DC    X'F1'               BLUE COLOUR\n         AGO   .NEXT\n.RED     ANOP\n&N       DC    X'F2'               RED COLOUR\n         AGO   .NEXT\n.PINK    ANOP\n&N       DC    X'F3'               PINK COLOUR\n         AGO   .NEXT\n.GREEN   ANOP\n&N       DC    X'F4'               GREEN COLOUR\n         AGO   .NEXT\n.TURQ    ANOP\n&N       DC    X'F5'               TURQUOISE COLOUR\n         AGO   .NEXT\n.YELLOW  ANOP\n&N       DC    X'F6'               YELLOW COLOUR\n         AGO   .NEXT\n.WHITE   ANOP\n&N       DC    X'F7'               WHITE COLOUR\n         AGO   .NEXT\n.OPAQUE  ANOP\n&N       DC    X'FF'               OPAQUE (NON-TRANSPARENT)\n         AGO   .NEXT\n.NUL     ANOP\n&N       DC    X'00'               NULL\n         AGO   .NEXT\n.SUB     ANOP\n&N       DC    X'3F'               SUBSTITUTE\n         AGO   .NEXT\n.DUP     ANOP\n&N       DC    X'1C'               DUPLICATE\n         AGO   .NEXT\n.FM      ANOP\n&N       DC    X'1E'               FIELD MARK\n         AGO   .NEXT\n.FF      ANOP\n&N       DC    X'0C'               FORM FEED\n         AGO   .NEXT\n.CR      ANOP\n&N       DC    X'0D'               CARRIAGE RETURN\n         AGO   .NEXT\n.NL      ANOP\n&N       DC    X'15'               NEW LINE\n         AGO   .NEXT\n.EM      ANOP\n&N       DC    X'19'               END OF MESSAGE\n         AGO   .NEXT\n.EO      ANOP\n&N       DC    X'FF'               EIGHT ONES\n         AGO   .NEXT\n.BYP     ANOP\n&N       DC    X'24'               BYPASS  (INHIBIT PRESENTATION)\n         AGO   .NEXT\n.RES     ANOP\n&N       DC    X'14'               RESTORE  (ENABLE PRESENTATION)\n         AGO   .NEXT\n.SI      ANOP\n&N       DC    X'0F'               SHIFT IN\n         AGO   .NEXT\n.SO      ANOP\n&N       DC    X'0E'               SHIFT OUT\n         AGO   .NEXT\n.GBAR    ANOP\n&N       DC    X'68'               BEGIN AREA\n         AGO   .NEXT\n.GBIMG   ANOP\n&N       DC    X'D1'               BEGIN IMAGE\n         AGO   .NEXT\n.GCBIMG  ANOP\n&N       DC    X'91'               BEGIN IMAGE\n         AGO   .NEXT\n.GCHST   ANOP\n&N       DC    X'C3'               CHARACTER STRING\n         AGO   .NEXT\n.GCCHST  ANOP\n&N       DC    X'83'               CHARACTER STRING\n         AGO   .NEXT\n.GEAR    ANOP\n&N       DC    X'60'               END AREA\n         AGO   .NEXT\n.GEIMG   ANOP\n&N       DC    X'93'               END IMAGE\n         AGO   .NEXT\n.GFLT    ANOP\n&N       DC    X'C5'               FILLET\n         AGO   .NEXT\n.GCFLT   ANOP\n&N       DC    X'85'               FILLET\n         AGO   .NEXT\n.GFARC   ANOP\n&N       DC    X'C7'               FULL ARC\n         AGO   .NEXT\n.GCFARC  ANOP\n&N       DC    X'87'               FULL ARC\n         AGO   .NEXT\n.GIMD    ANOP\n&N       DC    X'92'               IMAGE DATA\n         AGO   .NEXT\n.GLINE   ANOP\n&N       DC    X'C1'               LINE\n         AGO   .NEXT\n.GCLINE  ANOP\n&N       DC    X'81'               LINE\n         AGO   .NEXT\n.GMRK    ANOP\n&N       DC    X'C3'               MARKER\n         AGO   .NEXT\n.GRLINE  ANOP\n&N       DC    X'E1'               RELATIVE LINE\n         AGO   .NEXT\n.GCRLINE ANOP\n&N       DC    X'A1'               RELATIVE LINE\n         AGO   .NEXT\n.GSBMX   ANOP\n&N       DC    X'0D'               SET BACKGROUND MIX\n         AGO   .NEXT\n.GSCA    ANOP\n&N       DC    X'34'               SET CHARACTER ANGLE\n         AGO   .NEXT\n.GSCC    ANOP\n&N       DC    X'33'               SET CHARACTER CELL\n         AGO   .NEXT\n.GSCD    ANOP\n&N       DC    X'3A'               SET CHARACTER DIRECTION\n         AGO   .NEXT\n.GSCR    ANOP\n&N       DC    X'39'               SET CHARACTER PRECISION\n         AGO   .NEXT\n.GSCS    ANOP\n&N       DC    X'38'               SET CHARACTER SET\n         AGO   .NEXT\n.GSCH    ANOP\n&N       DC    X'35'               SET CHARACTER SHEAR\n         AGO   .NEXT\n.GSCOL   ANOP\n&N       DC    X'0A'               SET COLOUR\n         AGO   .NEXT\n.GSECOL  ANOP\n&N       DC    X'26'               SET EXTENDED COLOUR\n         AGO   .NEXT\n.GSLT    ANOP\n&N       DC    X'18'               SET LINE TYPE\n         AGO   .NEXT\n.GSLW    ANOP\n&N       DC    X'19'               SET LINE WIDTH\n         AGO   .NEXT\n.GSMC    ANOP\n&N       DC    X'37'               SET MARKER CELL\n         AGO   .NEXT\n.GSMP    ANOP\n&N       DC    X'3B'               SET MARKER PRECISION\n         AGO   .NEXT\n.GSMS    ANOP\n&N       DC    X'3C'               SET MARKER SET\n         AGO   .NEXT\n.GSMT    ANOP\n&N       DC    X'29'               SET MARKER SYMBOL\n         AGO   .NEXT\n.GSMX    ANOP\n&N       DC    X'0C'               SET MIX\n         AGO   .NEXT\n.GSPS    ANOP\n&N       DC    X'08'               SET PATTERN SET\n         AGO   .NEXT\n.GSPT    ANOP\n&N       DC    X'28'               SET PATTERN SYMBOL\n         AGO   .NEXT\n.GCOMT   ANOP\n&N       DC    X'01'               COMMENT\n         AGO   .NEXT\n.GSAP    ANOP\n&N       DC    X'22'               SET ARC PARAMETERS\n         AGO   .NEXT\n.GSCP    ANOP\n&N       DC    X'21'               SET CURRENT POSITION\n         AGO   .NEXT\n.GSGCH   ANOP\n&N       DC    X'04'               SEGMENT CHARACTERISTICS\n         AGO   .NEXT\n.GEPROL  ANOP\n&N       DC    X'3E'               END PROLOGUE\n         AGO   .NEXT\n.GESD    ANOP\n&N       DC    X'FF'               END OF SYMBOL DEFINITION\n         AGO   .NEXT\n.GERASE  ANOP\n&N       DC    X'0A'               ERASE GRAPHIC PRESENTATION SPACE\n         AGO   .NEXT\n.GSTOPDR ANOP\n&N       DC    X'0F'               STOP DRAW\n         AGO   .NEXT\n.GATTCUR ANOP\n&N       DC    X'08'               ATTACH GRAPHIC CURSOR\n         AGO   .NEXT\n.GDETCUR ANOP\n&N       DC    X'09'               DETACH GRAPHIC CURSOR\n         AGO   .NEXT\n.GSETCUR ANOP\n&N       DC    X'31'               SET GRAPHIC CURSOR POSITION\n         AGO   .NEXT\n.GSCUDEF ANOP\n&N       DC    X'21'               SET CURRENT DEFAULTS\n         AGO   .NEXT\n.GNOP1   ANOP\n&N       DC    X'00'               NO OPERATION\n         AGO   .NEXT\n.**********************************************************************\n.PAIR    ANOP\n         AIF   (N'&SYSLIST(&AS) NE 2).PERR1\n&NUMERIC SETB  (T'&SYSLIST(&AS,1) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS,1)'(1,1) GE '0')\n         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2\n&R       SETA  &SYSLIST(&AS,1)\n&NUMERIC SETB  (T'&SYSLIST(&AS,2) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS,2)'(1,1) GE '0')\n         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2\n&C       SETA  &SYSLIST(&AS,2)\n         AIF   (&R LT 1 OR &R GT 43).ROWERR\n         AIF   (&C LT 1 OR &C GT 80).COLERR\n&P       SETA  (&R-1)*80+&C-1\n&Q       SETA  &P/64               QUOTIENT\n&R       SETA  &P-&Q*64+1          REMAINDER+1\n&Q       SETA  &Q+1                QUOTIENT+1\n&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN\n         AGO   .NEXT\n.PERR1   MNOTE 4,'             &CS.) PARENS FOUND BUT NOT 2 NUMBERS'\n         MEXIT\n.PERR2   MNOTE 4,'             &CS.) NON NUMERIC ROW/COLUMN'\n         MEXIT\n.**********************************************************************\n.ROWCOL  ANOP\n         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED\n&R       SETA  &SYSLIST(&AS)\n&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED\n         AGO   .NEXTR\n.COL     ANOP\n&C       SETA  &SYSLIST(&AS)\n&B       SETB  0 FALSE             RESET SWITCH\n         AIF   (&R LT 1 OR &R GT 43).ROWERR\n         AIF   (&C LT 1 OR &C GT 80).COLERR\n&P       SETA  (&R-1)*80+&C-1\n&Q       SETA  &P/64               QUOTIENT\n&R       SETA  &P-&Q*64+1          REMAINDER+1\n&Q       SETA  &Q+1                QUOTIENT+1\n&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN\n         AGO   .NEXT\n.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 43'\n         AGO   .NEXT\n.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'\n.NEXT    ANOP\n&N       SETC  ''                  TURN OFF NAME\n.NEXTR   ANOP\n&AN      SETA  &AN-1\n         AGO   .EACH\n.EPILOG  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNALC": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x902?\\x00\\x93\"O\\x13\\x00\\x02&\\x02%\\x00\\x02\\xe9\\xc7\\xc9\\xd7\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-11-19T00:00:00", "modifydate": "1993-08-12T13:00:00", "lines": 550, "newlines": 549, "modlines": 2, "user": "ZGIP01"}, "text": "***********************************************************************\n*        USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE        *\n*              PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'SUFFIX'    *\n*              PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST    *\n*              CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.          *\n*              EX. -      PARMLIB   DYNALC DSNAME=SYS1.PARMLIB        *\n*                                   ... ANY OTHER CODE                *\n*                                   LA  R1,PARMLIB                    *\n*                                   SVC 99                            *\n*                                   ... ANY OTHER CODE                *\n*        DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.  THE ONLY      *\n*              PARMETERS THAT WILL BE GENERATED FOR DYNAMIC           *\n*              ALLOCATION ARE THE ONES THAT ARE SPECIFICALLY CODED.   *\n*              THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO     *\n*              ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE     *\n*              PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF     *\n*              ALLOCATING IT.                                         *\n*                                                                     *\n*        LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.    *\n*              FOR SVC 99 RB POINTER, THE LABELS GENERATED ARE THE    *\n*              IEFZB4D0 MACRO LABEL MINUS THE S99 PREFIX AND SUFFIXED *\n*              BY A UNIQUE 3 BYTE VALUE (AUTOMATICALLY SUPPLIED OR AS *\n*              SPECIFIED BY 'SUFFIX=XXX'.  FOR EACH TEXT UNIT FIELD,  *\n*              THE LABELS GENERATED ARE THE IEFZB4D2 MACRO LABEL      *\n*              MINUS THE DAL PREFIX AND SUFFIXED AS SPECIFIED ABOVE.  *\n***********************************************************************\n         MACRO\n&NAME    DYNALC                                                        X\n               &DSNAME=,       DATASET NAME               (1-44 BYTES) X\n               &DDNAME=,       DDNAME                      (1-8 BYTES) X\n               &MEMBER=,       MEMBER NAME/GDG NUMBER        \"    \"    X\n               &STATUS=,       DATASET STATUS        (OLD/MOD/NEW/SHR) X\n               &NDISP=,        DATASET NORMAL DISP   (KEEP/DELETE/ETC) X\n               &CDISP=,        DATASET COND. DISP      \"     \"     \"   X\n               &TYPSP=,        TYPE SPACE            (CYL/TRK/BLKSIZE) X\n               &PRIME=,        PRIMARY SPACE REQUIREMENT (ANY NUMERIC) X\n               &SECND=,        SECONDARY SPACE REQUIREMENT      \"      X\n               &DIR=,          DIRECTORY BLOCKS OR INDEX SPACE  \"      X\n               &RLSE=,         RELEASE UNUSED SPACE        (ANY VALUE) X\n               &SPFRM=,        SPACE FORM            (ALX/MXIG/CONTIG) X\n               &ROUND=,        ROUND BLOCKS TO CYLINDERS   (ANY VALUE) X\n               &VOLSER=,       VOLUME SERIAL               (1-6 BYTES) X\n               &VOLCNT=,       VOLUME COUNT                    (1-255) X\n               &UNIT=,         UNIT TYPE                   (1-8 BYTES) X\n               &MSVGP=,        MSVGP GROUP                   \"    \"    X\n               &SYSOUT=,       SYSOUT CLASS              (A-Z/0-9/ETC) X\n               &SPGNM=,        SYSOUT PGM NAME             (1-8 BYTES) X\n               &FORM=,         SYSOUT FORM NAME              \"    \"    X\n               &OUTLIM=,       SYSOUT OUTPUT LIMIT       (ANY NUMERIC) X\n               &FREE=,         FREE AT CLOSE                   (CLOSE) X\n               &COPIES=,       SYSOUT NUMBER OF COPIES         (1-255) X\n               &LABEL=,        LABEL TYPE           (SL/NL/AL/BLP/ETC) X\n               &DSSEQ=,        DATASET SEQUENCE NUMBER   (TAPE FILE #) X\n               &PASPR=,        PASSWORD PROTECTION               (R/W) X\n               &EXPDT=,        EXPIRATION DATE                 (YYDDD) X\n               &RETPD=,        RETENTION PERIOD          (ANY NUMERIC) X\n               &DUMMY=,        DUMMY DATASET               (ANY VALUE) X\n               &DCBDS=,        DSNAME OF MODEL DSCB           (DSNAME) X\n               &DCBDD=,        DDNAME OF MODEL DSCB           (DDNAME) X\n               &BLKSIZE=,      BLOCKSIZE                 (ANY NUMERIC) X\n               &DEN=,          TAPE DENSITY                  (1/2/3/4) X\n               &DSORG=,        DATASET ORG.         (PO/PS/DA/POU/ETC) X\n               &EROPT=,        ERROR OPTIONS             (ABE/SKP/ACC) X\n               &KEYLEN=,       KEY LENGTH                (ANY NUMERIC) X\n               &LRECL=,        LOGICAL RECORD LENGTH          \"        X\n               &OPTCD=,        OPTION CODE                   (B/W/C/Z) X\n               &RECFM=,        RECORD FORMAT       (F/FB/VB/VBA/U/ETC) X\n               &PASSWRD=,      PASSWORD                    (1-8 BYTES) X\n               &PERM=,         PERM ALLOC                  (ANY VALUE) X\n               &RETDD=,        RETURN DDNAME                    \"      X\n               &RETDS=,        RETURN DSNAME                    \"      X\n               &RETVOL=,       RETURN VOLSER                    \"      X\n               &FUNC=,         FOR PUNCH OUTPUT INTERPRETING       (I) X\n               &SUFFIX=,       UNIQUE SUFFIX FOR LABELS    (MAX LEN=3) X\n               &DEALLOC=       FOR DEALLOCATION            (ANY VALUE)\n         LCLA  &A1,&A2,&A3\n         LCLC  &X,&NM\n         AIF   (T'&SUFFIX EQ 'O').SETSFX\n         AIF   (K'&SUFFIX GT 3).SFXERR\n&X       SETC  '&SUFFIX'\n         AGO   .CONT\n.SFXERR  MNOTE 8,'SUFFIX=&SUFFIX LONGER THAN 3 BYTES, FIRST THREE USED'\n&X       SETC  '&SUFFIX'(1,3)\n         AGO   .CONT\n.SETSFX  ANOP\n&X       SETC  '&SYSNDX'(2,3)\n.CONT    ANOP\n         AIF   (T'&NAME NE 'O').SETRB\n         MNOTE 8,'REQUIRED LABEL MISSING ON MACRO CALL'\n.SETRB   ANOP\n&NAME    DC    A(DYNRB&X+X'80000000') POINTER TO REQUEST BLOCK\n         AIF   (T'&DEALLOC EQ 'O').ALOCCHK\nDYNRB&X  DC    AL1(20,2,0,0)       LENGTH, DEALLOC VERB, FLAGS1\n         AGO   .ERINCHK\n.ALOCCHK ANOP\nDYNRB&X  DC    AL1(20,1,0,0)       LENGTH, ALLOC VERB, FLAGS1\n.ERINCHK ANOP\nERROR&X  DC    AL2(0)              ERROR CODE\nINFO&X   DC    AL2(0)              INFORMATION CODE\nTUPTR&X  DC    A(TXTPP&X)          TEXT UNIT POINTER\nS99X&X   DC    A(0),A(0)           ADDR OF REQ BLOCK EXTENSION, FLAGS2\n&A1      SETA  1\n         AIF   (T'&DDNAME EQ 'O').DSNCHK\n         AIF   (K'&DDNAME GT 8).DDNERR\nTS&X&A1  DC    XL2'01',AL2(1,8)    DDNAME KEY, NUM, PARMLEN\nDDNAM&X  DC    CL8'&DDNAME'        DDNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .DSNCHK\n.DDNERR  MNOTE 8,'DDNAME=&DDNAME GREATER THAN 8 BYTES'\n.DSNCHK  AIF   (T'&DSNAME EQ 'O').MEMCHK\n         AIF   (K'&DSNAME GT 44).DSNERR\nTS&X&A1  DC    XL2'02',AL2(1,44)   DSNAME KEY, NUM, PARMLEN\nDSNAM&X  DC    CL44'&DSNAME'       DSNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .MEMCHK\n.DSNERR  MNOTE 8,'DSNAME=&DSNAME GREATER THAN 44 BYTES'\n.MEMCHK  AIF   (T'&MEMBER EQ 'O').STATCHK\n         AIF   (K'&MEMBER GT 8).MEMERR\nTS&X&A1  DC    XL2'03',AL2(1,8)    MEMBER/GDG KEY, NUM, PARMLEN\nMEMBR&X  DC    CL8'&MEMBER'        MEMBER NAME/GDG LEVEL FIELD\n&A1      SETA  &A1+1\n         AGO   .STATCHK\n.MEMERR  MNOTE 8,'MEMBER=&MEMBER GREATER THAN 8 BYTES'\n.STATCHK AIF   (T'&STATUS EQ 'O').NDSPCHK\nTS&X&A1  DC    XL2'04',AL2(1,1)    DATASET STATUS KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&STATUS' NE 'OLD').STA1CHK  OLD = X'01'\nSTATS&X  DC    XL1'01'             CONSTANT FOR DISP=OLD\n         AGO   .NDSPCHK\n.STA1CHK AIF   ('&STATUS' NE 'MOD').STA2CHK  MOD = X'02'\nSTATS&X  DC    XL1'02'             CONSTANT FOR DISP=MOD\n         AGO   .NDSPCHK\n.STA2CHK AIF   ('&STATUS' NE 'NEW').STA3CHK  NEW = X'04'\nSTATS&X  DC    XL1'04'             CONSTANT FOR DISP=NEW\n         AGO   .NDSPCHK\n.STA3CHK AIF   ('&STATUS' NE 'SHR').STAERR   SHR = X'08'\nSTATS&X  DC    XL1'08'             CONSTANT FOR DISP=SHR\n         AGO   .NDSPCHK\n.STAERR  MNOTE 8,'STATUS=&STATUS INVALID'\n.NDSPCHK AIF   (T'&NDISP EQ 'O').CDSPCHK\nTS&X&A1  DC    XL2'05',AL2(1,1)    NORMAL DISP KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&NDISP' NE 'UNCATLG').NDS1CHK UNCATLG = X'01'\nNDISP&X  DC    XL1'01'             CONSTANT FOR NORMAL DISP=UNCATLG\n         AGO   .CDSPCHK\n.NDS1CHK AIF   ('&NDISP' NE 'CATLG').NDS2CHK CATLG   = X'02'\nNDISP&X  DC    XL1'02'             CONSTANT FOR NORMAL DISP=CATLG\n         AGO   .CDSPCHK\n.NDS2CHK AIF   ('&NDISP' NE 'DELETE').NDS3CHK DELETE = X'04'\nNDISP&X  DC    XL1'04'             CONSTANT FOR NORMAL DISP=DELETE\n         AGO   .CDSPCHK\n.NDS3CHK AIF   ('&NDISP' NE 'KEEP').NDSERR   KEEP    = X'08'\nNDISP&X  DC    XL1'08'             CONSTANT FOR NORMAL DISP=KEEP\n         AGO   .CDSPCHK\n.NDSERR  MNOTE 8,'NDISP=&NDISP INVALID'\n.CDSPCHK AIF   (T'&CDISP EQ 'O').TSPCCHK\nTS&X&A1  DC    XL2'06',AL2(1,1)    COND DISP KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&CDISP' NE 'UNCATLG').CDS1CHK UNCATLG = X'01'\nCDISP&X  DC    XL1'01'             CONSTANT FOR COND DISP=UNCALTG\n         AGO   .TSPCCHK\n.CDS1CHK AIF   ('&CDISP' NE 'CATLG').CDS2CHK   CATLG   = X'02'\nCDISP&X  DC    XL1'02'             CONSTANT FOR COND DISP=CATLG\n         AGO   .TSPCCHK\n.CDS2CHK AIF   ('&CDISP' NE 'DELETE').CDS3CHK  DELETE  = X'04'\nCDISP&X  DC    XL1'04'             CONSTANT FOR COND DISP=DELETE\n         AGO   .TSPCCHK\n.CDS3CHK AIF   ('&CDISP' NE 'KEEP').CDSERR     KEEP    = X'08'\nCDISP&X  DC    XL1'08'             CONSTANT FOR COND DISP=KEEP\n         AGO   .TSPCCHK\n.CDSERR  MNOTE 8,'CDISP=&CDISP INVALID'\n.TSPCCHK AIF   (T'&TYPSP EQ 'O').PSPCCHK\n         AIF   ('&TYPSP' NE 'TRK').TSP1CHK  IF TYPE SPACE SPECIFICATION\nTS&X&A1  DC    XL2'07',AL2(0)      TRACK SPACE KEY, NUM\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TSP1CHK AIF   ('&TYPSP' NE 'CYL').TSP2CHK  NOT TRK OR CYL THEN\nTS&X&A1  DC    XL2'08',AL2(0)      CYLINDER SPACE KEY, NUM\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TSP2CHK AIF   (T'&TYPSP NE 'N').TYPERR\n&A3      SETA  &TYPSP\n         AIF   (&A3 GT 32768).TYPERR\nTS&X&A1  DC    XL2'09',AL2(1,3)    BLOCK SPACE KEY, NUM, PARMLEN\nBLKLN&X  DC    AL3(&TYPSP)         AVG BLOCK LENGTH FIELD\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TYPERR  MNOTE 8,'TYPSP=&TYPSP INVALID OR GREATER THAN 32768'\n.PSPCCHK AIF   (T'&PRIME EQ 'O').DIRCCHK\n         AIF   (T'&PRIME NE 'N').PSPCERR\nTS&X&A1  DC    XL2'0A',AL2(1,3)    PRIME SPACE KEY, NUM, PARMLEN\nPRIME&X  DC    AL3(&PRIME)         PRIMARY SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .SSPCCHK\n.PSPCERR MNOTE 8,'PRIME=&PRIME INVALID'\n.SSPCCHK AIF   (T'&SECND EQ 'O').DIRCCHK\n         AIF   (T'&SECND NE 'N').SSPCERR\nTS&X&A1  DC    XL2'0B',AL2(1,3)    SECONDARY SPACE, NUM, PARMLEN\nSECND&X  DC    AL3(&SECND)         SECONDARY SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .DIRCCHK\n.SSPCERR MNOTE 8,'SECND=&SECND INVALID'\n.DIRCCHK AIF   (T'&DIR EQ 'O').RLSECHK\n         AIF   (T'&DIR NE 'N').DIRCERR\nTS&X&A1  DC    XL2'0C',AL2(1,3)    DIR SPACE KEY, NUM, PARMLEN\nDIR&X    DC    AL3(&DIR)           DIR SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .RLSECHK\n.DIRCERR MNOTE 8,'DIR=&DIR INVALID'\n.RLSECHK AIF   (T'&RLSE EQ 'O').FMSPCHK\nTS&X&A1  DC    XL2'0D',AL2(0)      RELEASE SPACE KEY, NUM\n&A1      SETA  &A1+1\n.FMSPCHK AIF   (T'&SPFRM EQ 'O').RNDCHK\nTS&X&A1  DC    XL2'0E',AL2(1,1)    SPACE FORM KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&SPFRM' NE 'ALX').FMS1CHK\nSPFRM&X  DC    XL1'02'             ALX SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMS1CHK AIF   ('&SPFRM' NE 'MXIG').FMS2CHK\nSPFRM&X  DC    XL1'04'             MXIG SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMS2CHK AIF   ('&SPFRM' NE 'CONTIG').FMSERR\nSPFRM&X  DC    XL1'02'             CONTIG SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMSERR  ANOP\n         MNOTE 8,'SPFRM=&SPFRM INVALID'\n.RNDCHK  AIF   (T'&ROUND EQ 'O').VSERCHK\nTS&X&A1  DC    XL2'0F',AL2(0)      ROUND KEY, NUM\n&A1      SETA  &A1+1\n.VSERCHK AIF   (T'&VOLSER EQ 'O').VLCNCHK\n         AIF   (K'&VOLSER GT 6).VLSRERR\nTS&X&A1  DC    XL2'10',AL2(1,6)    VOLSER KEY, NUM, PARMLEN\nVLSER&X  DC    CL6'&VOLSER'        VOLUME SERIAL FIELD\n&A1      SETA  &A1+1\n         AGO   .VLCNCHK\n.VLSRERR MNOTE 8,'VOLSER=&VOLSER GREATER THAN 6 BYTES'\n.VLCNCHK AIF   (T'&VOLCNT EQ 'O').UNITCHK\n         AIF   (T'&VOLCNT NE 'N').VLCERR\n&A3      SETA  &VOLCNT\n         AIF   (&A3 GT 255).VLCERR\nTS&X&A1  DC    XL2'13',AL2(1,1)    VOLUME COUNT KEY, NUM, PARMLEN\nVLCNT&X  DC    AL1(&VOLCNT)        VOLUME COUNT FIELD\n&A1      SETA  &A1+1\n         AGO   .UNITCHK\n.VLCERR  MNOTE 8,'VOLCNT=&VOLCNT IS INVALID OR GREATER THAN 255'\n.UNITCHK AIF   (T'&UNIT EQ 'O').SCLSCHK\nTS&X&A1  DC    XL2'15',AL2(1,8)    UNIT TYPE KEY, NUM, PARMLEN\nUNIT&X   DC    CL8'&UNIT'          UNIT TYPE FIELD\n&A1      SETA  &A1+1\n.SCLSCHK AIF   (T'&SYSOUT EQ 'O').SYSPCHK\nTS&X&A1  DC    XL2'18',AL2(1,1)    SYSOUT CLASS KEY, NUM, PARMLEN\nSYSOU&X  DC    CL1'&SYSOUT'        SYSOUT CLASS FIELD\n&A1      SETA  &A1+1\n.SYSPCHK AIF   (T'&SPGNM EQ 'O').FORMCHK\n         AIF   (K'&SPGNM GT 8).SYSPERR\nTS&X&A1  DC    XL2'19',AL2(1,8)    SYSOUT PGM KEY, NUM, PARMLEN\nSPGNM&X  DC    CL8'&SPGNM'         SYSOUT PGM FIELD\n&A1      SETA  &A1+1\n         AGO   .FORMCHK\n.SYSPERR MNOTE 8,'SPGNM=&SPGNM IS GREATER THAN 8 BYTES'\n.FORMCHK AIF   (T'&FORM EQ 'O').OUTLCHK\n         AIF   (K'&FORM GT 4).FORMERR\nTS&X&A1  DC    XL2'1A',AL2(1,4)    SYSOUT FORM KEY, NUM, PARMLEN\nFMNO&X   DC    CL4'&FORM'          SYSOUT FORM NUMBER FIELD\n&A1      SETA  &A1+1\n         AGO   .OUTLCHK\n.FORMERR MNOTE 8,'FORM=&FORM IS GREATER THAN 4 BYTES'\n.OUTLCHK AIF   (T'&OUTLIM EQ 'O').FREECHK\nTS&X&A1  DC    XL2'1B',AL2(1,3)    OUTLIM KEY, NUM, PARMLEN\nOUTLM&X  DC    AL3(&OUTLIM)        OUTLIM PGM FIELD\n&A1      SETA  &A1+1\n.FREECHK AIF   (T'&FREE EQ 'O').COPYCHK\n         AIF   ('&FREE' NE 'CLOSE').FREERR\nTS&X&A1  DC    XL2'1C',AL2(0)      FREE=CLOSE KEY, NUM\n&A1      SETA  &A1+1               ALL ELSE WILL GENERATE MNOTE\n         AGO   .COPYCHK\n.FREERR  MNOTE 8,'FREE=&FREE INVALID'\n.COPYCHK AIF   (T'&COPIES EQ 'O').LABLCHK\n&A3      SETA  &COPIES\n         AIF   (&A3 GT 255).COPYERR\nTS&X&A1  DC    XL2'1D',AL2(1,1)    SYSOUT COPIES KEY, NUM, PARMLEN\nCOPYS&X  DC    AL1(&COPIES)        SYSOUT COPIES FIELD\n&A1      SETA  &A1+1\n         AGO   .LABLCHK\n.COPYERR MNOTE 8,'COPIES=&COPIES GREATER THAN 255'\n.LABLCHK AIF   (T'&LABEL EQ 'O').DSSQCHK\nTS&X&A1  DC    XL2'1E',AL2(1,1)    LABEL TYPE KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&LABEL' NE 'NL').LAB1CHK NL  = X'01'\nLABEL&X  DC    XL1'01'             LABEL = NL\n         AGO   .DSSQCHK\n.LAB1CHK AIF   ('&LABEL' NE 'SL').LAB2CHK SL  = X'02'\nLABEL&X  DC    XL1'2'              LABEL = SL\n         AGO   .DSSQCHK\n.LAB2CHK AIF   ('&LABEL' NE 'NSL').LAB3CHK NSL = X'04'\nLABEL&X  DC    XL1'04'             LABEL = NSL\n         AGO   .DSSQCHK\n.LAB3CHK AIF   ('&LABEL' NE 'SUL').LAB4CHK SUL = X'0A'\nLABEL&X  DC    XL1'0A'             LABEL = SUL\n         AGO   .DSSQCHK\n.LAB4CHK AIF   ('&LABEL' NE 'BLP').LAB5CHK BLP = X'10'\nLABEL&X  DC    XL1'10'             LABEL = BLP\n         AGO   .DSSQCHK\n.LAB5CHK AIF   ('&LABEL' NE 'LTM').LAB6CHK LTM = X'21'\nLABEL&X  DC    XL1'21'             LABEL = LTM\n         AGO   .DSSQCHK\n.LAB6CHK AIF   ('&LABEL' NE 'AL').LAB7CHK AL  = X'40'\nLABEL&X  DC    XL1'40'             LABEL = AL\n         AGO   .DSSQCHK\n.LAB7CHK AIF   ('&LABEL' NE 'AUL').LABERR  AUL = X'48'\nLABEL&X  DC    XL1'48'             LABEL = AUL\n         AGO   .DSSQCHK\n.LABERR  MNOTE 8,'LABEL=&LABEL INVALID'\n.DSSQCHK AIF   (T'&DSSEQ EQ 'O').PASSCHK\n         AIF   (T'&DSSEQ NE 'N').DSSQERR\n         AIF   (&DSSEQ GT 9999).DSSQERR\nTS&X&A1  DC    XL2'1F',AL2(1,2)    DSN SEQUNECE KEY, NUM, PARMLEN\nDSSEQ&X  DC    AL2(&DSSEQ)         DSN SEQUENCE FIELD\n&A1      SETA  &A1+1\n         AGO   .PASSCHK\n.DSSQERR MNOTE 8,'DSSEQ=&DSSEQ INVALID OR OUT OF RANGE'\n.PASSCHK AIF   (T'&PASPR EQ 'O').EXPDCHK\n         AIF   ('&PASPR' NE 'R' AND 'PASPR' NE 'W').PASPERR\nTS&X&A1  DC    XL2'20',AL2(1,1)    PASSWORD PROTECT KEY, NUM, PARMLEN\n         AIF   ('&PASPR' EQ 'R').PASSRD\nPASPR&X  DC    X'30'               WRITE PROTECTION\n&A1      SETA  &A1+1\n         AGO   .EXPDCHK\n.PASSRD  ANOP\nPASPR&X  DC    X'10'               READ/WRITE PROTECTION\n&A1      SETA  &A1+1\n         AGO   .EXPDCHK\n.PASPERR MNOTE 8,'PASPR=&PASPR INVALID-SHOULD BE \"R\" OR \"W\"'\n.EXPDCHK AIF   (T'&EXPDT EQ 'O').RETPCHK\n         AIF   (K'&EXPDT GT 5).EXPDERR\nTS&X&A1  DC    XL2'22',AL2(1,5)    EXPIRATION DATE KEY, NUM, PARMLEN\nEXPDT&X  DC    CL5'&EXPDT'         EXPIRATION DATE FIELD\n&A1      SETA  &A1+1\n         AGO   .RETPCHK\n.EXPDERR MNOTE 8,'EXPDT=&EXPDT GREATER THAN 5 BYTES'\n.RETPCHK AIF   (T'&RETPD EQ 'O').DUMMCHK\n         AIF   (T'&RETPD NE 'N').RETPERR\n&A3      SETA  &RETPD\n         AIF   (&RETPD GT 9999).RETPERR\nTS&X&A1  DC    XL2'23',AL2(1,2)    RETENTION PERIOD KEY, NUM, PARMLEN\nRETPD&X  DC    AL2(&RETPD)         RETENTION PERIOD FIELD\n&A1      SETA  &A1+1\n         AGO   .DUMMCHK\n.RETPERR MNOTE 8,'RETPD=&RETPD NOT NUMERIC OR GREATER THAN 9999'\n.DUMMCHK AIF   (T'&DUMMY EQ 'O').DCBSCHK\nTS&X&A1  DC    XL2'24',AL2(0)      DUMMY DATASET KEY, NUM\n&A1      SETA  &A1+1\n.DCBSCHK AIF   (T'&DCBDS EQ 'O').DCBDCHK\n         AIF   (K'&DCBDS GT 44).DCBSERR\nTS&X&A1  DC    XL2'2C',AL2(1,44)   DCB REFERENCE DSN KEY, NUM, PARMLEN\nDCBDS&X  DC    CL44'&DCBDS'        DCB REFERENCE DSNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .DCBDCHK\n.DCBSERR MNOTE 8,'DCBDS=&DCBDS GREATER THAN 44 BYTES'\n.DCBDCHK AIF   (T'&DCBDD EQ 'O').BLKSCHK\n         AIF   (K'&DCBDS GT 8).DCBDERR\nTS&X&A1  DC    XL2'2D',AL2(1,8)    DCB REFERENCE DDN KEY, NUM, PARMLEN\nDCBDS&X  DC    CL8'&DCBDD'         DCB REFERENCE DDNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .BLKSCHK\n.DCBDERR MNOTE 8,'DCBDD=&DCBDD GREATER THAN 8 BYTES'\n.BLKSCHK AIF   (T'&BLKSIZE EQ 'O').DENSCHK\n         AIF   (T'&BLKSIZE NE 'N').BLKSERR\n&A3      SETA  &BLKSIZE\n         AIF   (&A3 GT 32768).BLKSERR\nTS&X&A1  DC    XL2'30',AL2(1,2)    BLOCKSIZE KEY, NUM, PARMLEN\nBLKSZ&X  DC    AL2(&BLKSIZE)       BLOCKSIZE FIELD\n&A1      SETA  &A1+1\n         AGO   .DENSCHK\n.BLKSERR MNOTE 8,'BLKSIZE=&BLKSIZE INVALID OR GREATER THAN 32768'\n.DENSCHK AIF   (T'&DEN EQ 'O').DSORCHK\nTS&X&A1  DC    XL2'3B',AL2(1,1)    DENSITY KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&DEN' NE '4').DEN1CHK DEN4 = X'D3'\nDEN&X    DC    XL1'D3'             DEN = 4\n         AGO   .DSORCHK\n.DEN1CHK AIF   ('&DEN' NE '3').DEN2CHK DEN3 = X'C3'\nDEN&X    DC    XL1'C3'             DEN = 3\n         AGO   .DSORCHK\n.DEN2CHK AIF   ('&DEN' NE '2').DEN3CHK DEN2 = X'83'\nDEN&X    DC    XL1'83'             DEN = 2\n         AGO   .DSORCHK\n.DEN3CHK AIF   ('&DEN' NE '1').DENERR  DEN1 = X'43'\nDEN&X    DC    XL1'43'             DEN = 1\n         AGO   .DSORCHK\n.DENERR  MNOTE 8,'DEN=&DEN INVALID'\n.DSORCHK AIF   (T'&DSORG EQ 'O').EROPCHK\nTS&X&A1  DC    XL2'3C',AL2(1,2)    DSORG KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&DSORG' NE 'PO').DSO1CHK DSORG PO = X'0200'\nDSORG&X  DC    XL2'0200'           DSORG = PO\n         AGO   .EROPCHK\n.DSO1CHK AIF   ('&DSORG' NE 'PS').DSO2CHK DSORG PS = X'4000'\nDSORG&X  DC    XL2'4000'           DSORG = PS\n         AGO   .EROPCHK\n.DSO2CHK AIF   ('&DSORG' NE 'DA').DSO3CHK DSORG DA = X'2000'\nDSORG&X  DC    XL2'2000'           DSORG = DA\n         AGO   .EROPCHK\n.DSO3CHK AIF   ('&DSORG' NE 'VS').DSO4CHK DSORG VS = X'0008'\nDSORG&X  DC    XL2'0008'           DSORG = VS\n         AGO   .EROPCHK\n.DSO4CHK AIF   ('&DSORG' NE 'POU').DSO5CHK DSORG POU = X'0300'\nDSORG&X  DC    XL2'0300'           DSORG = POU\n         AGO   .EROPCHK\n.DSO5CHK AIF   ('&DSORG' NE 'PSU').DSO6CHK DSORG PSU = X'4100'\nDSORG&X  DC    XL2'4100'           DSORG = PSU\n         AGO   .EROPCHK\n.DSO6CHK AIF   ('&DSORG' NE 'DAU').DSOERR  DSORG DAU = X'2100'\nDSORG&X  DC    XL2'2100'           DSORG = DAU\n         AGO   .EROPCHK\n.DSOERR  MNOTE 8,'DSORG=&DSORG INVALID'\n.EROPCHK AIF   (T'&EROPT EQ 'O').KEYLCHK\nTS&X&A1  DC    XL2'3D',AL2(1,1)    EROPT KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&EROPT' NE 'ABE').ERO1CHK EROPT ABE = X'20'\nEROPT&X  DC    XL1'20'             EROPT = ABE\n         AGO   .KEYLCHK\n.ERO1CHK AIF   ('&EROPT' NE 'SKP').ERO2CHK EROPT SKP = X'40'\nEROPT&X  DC    XL1'40'             EROPT = SKP\n         AGO   .KEYLCHK\n.ERO2CHK AIF   ('&EROPT' NE 'ACC').EROERR  EROPT ACC = X'80'\nEROPT&X  DC    XL1'80'             EROPT = ACC\n         AGO   .KEYLCHK\n.EROERR  MNOTE 8,'EROPT=&EROPT INVALID'\n.KEYLCHK AIF   (T'&KEYLEN EQ 'O').LRECCHK\nTS&X&A1  DC    XL2'40',AL2(1,1)    KEYLEN KEY, NUM, PARMLEN\nKYLEN&X  DC    AL1(&KEYLEN)        KEYLEN FIELD\n&A1      SETA  &A1+1\n.LRECCHK AIF   (T'&LRECL EQ 'O').OPTCCHK\nTS&X&A1  DC    XL2'42',AL2(1,2)    LRECL KEY, NUM, PARMLEN\nLRECL&X  DC    AL2(&LRECL)         LRECL FIELD\n&A1      SETA  &A1+1\n.OPTCCHK AIF   (T'&OPTCD EQ 'O').RECFCHK\nTS&X&A1  DC    XL2'45',AL2(1,1)    OPTCD KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&OPTCD' NE 'B').OPT1CHK OPTCD B = X'40'\nOPTCD&X  DC    XL1'40'             OPTCD = B\n         AGO   .RECFCHK\n.OPT1CHK AIF   ('&OPTCD' NE 'W').OPT2CHK OPTCD W = X'80'\nOPTCD&X  DC    XL1'80'             OPTCD = W\n         AGO   .RECFCHK\n.OPT2CHK AIF   ('&OPTCD' NE 'C').OPT3CHK OPTCD C = X'20'\nOPTCD&X  DC    XL1'20'             OPTCD = C\n         AGO   .RECFCHK\n.OPT3CHK AIF   ('&OPTCD' NE 'Z').OPTERR  OPTCD Z = X'04'\nOPTCD&X  DC    XL1'04'             OPTCD = Z\n         AGO   .RECFCHK\n.OPTERR  MNOTE 8,'OPTCD=&OPTCD INVALID'\n.RECFCHK AIF   (T'&RECFM EQ 'O').PASWCHK\nTS&X&A1  DC    XL2'49',AL2(1,1)    RECFM KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&RECFM' NE 'FBA').REC1CHK RECFM FBA = X'94'\nRECFM&X  DC    XL1'94'             RECFM = FBA\n         AGO   .PASWCHK\n.REC1CHK AIF   ('&RECFM' NE 'VBA').REC2CHK RECFM VBA = X'54'\nRECFM&X  DC    XL1'54'             RECFM = VBA\n         AGO   .PASWCHK\n.REC2CHK AIF   ('&RECFM' NE 'FB').REC3CHK RECFM FB = X'90'\nRECFM&X  DC    XL1'90'             RECFM = FB\n         AGO   .PASWCHK\n.REC3CHK AIF   ('&RECFM' NE 'VB').REC4CHK RECFM VB = X'50'\nRECFM&X  DC    XL1'50'             RECFM = VB\n         AGO   .PASWCHK\n.REC4CHK AIF   ('&RECFM' NE 'F').REC5CHK RECFM F = X'80'\nRECFM&X  DC    XL1'80'             RECFM = F\n         AGO   .PASWCHK\n.REC5CHK AIF   ('&RECFM' NE 'V').REC6CHK RECFM V = X'40'\nRECFM&X  DC    XL1'40'             RECFM = V\n         AGO   .PASWCHK\n.REC6CHK AIF   ('&RECFM' NE 'FBS').REC7CHK RECFM FBS = X'98'\nRECFM&X  DC    XL1'98'             RECFM = FBS\n         AGO   .PASWCHK\n.REC7CHK AIF   ('&RECFM' NE 'VBS').REC8CHK RECFM VBS = X'58'\nRECFM&X  DC    XL1'58'             RECFM = VBS\n         AGO   .PASWCHK\n.REC8CHK AIF   ('&RECFM' NE 'FA').REC9CHK RECFM FA = X'84'\nRECFM&X  DC    XL1'84'             RECFM = FA\n         AGO   .PASWCHK\n.REC9CHK AIF   ('&RECFM' NE 'VA').RECACHK RECFM VA = X'44'\nRECFM&X  DC    XL1'44'             RECFM = VA\n         AGO   .PASWCHK\n.RECACHK AIF   ('&RECFM' NE 'FBM').RECBCHK RECFM FBM = X'92'\nRECFM&X  DC    XL1'92'             RECFM = FBM\n         AGO   .PASWCHK\n.RECBCHK AIF   ('&RECFM' NE 'VBM').RECCCHK RECFM VBM = X'52'\nRECFM&X  DC    XL1'52'             RECFM = VBM\n         AGO   .PASWCHK\n.RECCCHK AIF   ('&RECFM' NE 'FBSA').RECDCHK RECFM FBSA = X'9C'\nRECFM&X  DC    XL1'9C'             RECFM = FBSA\n         AGO   .PASWCHK\n.RECDCHK AIF   ('&RECFM' NE 'U').RECFERR RECFM U = X'C0'\nRECFM&X  DC    XL1'C0'             RECFM = U\n         AGO   .PASWCHK\n.RECFERR MNOTE 8,'RECFM=&RECFM INVALID'\n.PASWCHK AIF   (T'&PASSWRD EQ 'O').PERMCHK\n         AIF   (K'&PASSWRD GT 8).PASWERR\nTS&X&A1  DC    XL2'50',AL2(1,8)    PASSWORD KEY, NUM, PARMLEN\nPASSW&X  DC    CL8'&PASSWRD'       PASSWORD\n&A1      SETA  &A1+1\n         AGO   .PERMCHK\n.PASWERR MNOTE 8,'PASSWRD=&PASSWRD GREATER THAN 8 BYTES'\n.PERMCHK AIF   (T'&PERM EQ 'O').RTDDCHK\nTS&X&A1  DC    XL2'52',AL2(0)      PERM ALLOC KEY, NUM\n&A1      SETA  &A1+1\n.RTDDCHK AIF   (T'&RETDD EQ 'O').RTDSCHK\nTS&X&A1  DC    XL2'55',AL2(1,8)    RETURN DDNAME, NUM, PARMLEN\nRTDDN&X  DC    CL8' '              RETURNED DDNAME\n&A1      SETA  &A1+1\n.RTDSCHK AIF   (T'&RETDS EQ 'O').FUNCCHK\nTS&X&A1  DC    XL2'56',AL2(1,44)   RETURN DSNAME, NUM, PARMLEN\nRTDSN&X  DC    CL44' '             RETURNED DSNAME\n&A1      SETA  &A1+1\n.FUNCCHK AIF   (T'&FUNC EQ 'O').RTVLCHK\n         AIF   ('&FUNC' NE 'I').FUNCERR\nTS&X&A1  DC    XL2'5A',AL2(1,1)    FUNCTION KEY, NUM, PARMLEN\nFUNC&X   DC    XL1'80'             INTERPRET FUNCTION FIELD\n&A1      SETA  &A1+1\n         AGO   .RTVLCHK\n.FUNCERR MNOTE 8,'FUNC=&FUNC NOT SUPPORTED BY MACRO'\n.RTVLCHK AIF   (T'&RETVOL EQ 'O').MSVGCHK\nTS&X&A1  DC    XL2'5D',AL2(1,6)    RETURN VOLSER, NUM, PARMLEN\nRTVOL&X  DC    CL6' '              RETURNED VOLSER\n&A1      SETA  &A1+1\n.MSVGCHK AIF   (T'&MSVGP EQ 'O').TUPLGEN\nTS&X&A1  DC    XL2'5E',AL2(1,8)    MSVGP KEY, NUM, PARMLEN\nMSVGP&X  DC    CL8'&MSVGP'         MSVGP FIELD\n&A1      SETA  &A1+1\n.TUPLGEN ANOP\n&A2      SETA  1\n&A1      SETA  &A1-1 BB\n         AIF   (&A1 GE 1).GENOK BB\n         MNOTE 8,'NO TEXT UNIT POINTERS WERE GENERATED' BB\n         MEXIT BB\n.GENOK   ANOP BB\n&NM      SETC  'TXTPP&X'\n.TULOOP  AIF   (&A2 EQ &A1).EOFGEN\n&NM      DC    A(TS&X&A2)          TEXT UNIT POINTER\n&NM      SETC  ' '\n&A2      SETA  &A2+1\n         AGO   .TULOOP\n.EOFGEN  AIF   (&A1 NE 1).SKIPCLR\n&NM      SETC  'TXTPP&X'\n.SKIPCLR ANOP\n&NM      DC    A(TS&X&A2+X'80000000') LAST TEXT UNIT POINTER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ESRPRMTE": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x11\\x1f\\x00\\x95\\x11\\x1f\\x17E\\x00\\r\\x00\\r\\x00\\x01\\xc9\\xe3\\xe3\\xd7\\xc7\\xc9@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-04-21T00:00:00", "modifydate": "1995-04-21T17:45:00", "lines": 13, "newlines": 13, "modlines": 1, "user": "ITTPGI"}, "text": "*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD\nESRPRMTE DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER DECIMAL SVC NUMBER OF EXTENDED SVC ROUTER'\n         DC    X'&MED',C'===>',X'1BC84E132841F4000000'\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(USE',X'&HIGH',C'E/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL ESR DISPLAY AND SHOW MAIN SVC TABLE)'\nGTESRELN EQU   *-ESRPRMTE\n         DC    X'11D1E2&HIGH'\n         DC    C'REENTER - SVC'\nESRERNOE DC    CL4' '\n         DC    C' IS NOT AN EXTENDED SVC ROUTER'\nGTESRELX EQU   *-ESRPRMTE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESRPRMTJ": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x11\\x1f\\x00\\x95\\x11\\x1f\\x17E\\x00+\\x00+\\x00\\x00\\xc9\\xe3\\xe3\\xd7\\xc7\\xc9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-04-21T00:00:00", "modifydate": "1995-04-21T17:45:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "ITTPGI"}, "text": "*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD\nESRPRMTJ DC    X'C11140403C40400011C5C2&LOW'\n*** ENTER DECIMAL SVC NUMBER OF EXTENDED SVC ROUTER\n         DC    X'400F'\n         DC    C'\u00b7HDv'\n         DC    X'0E40'\n         DC    C' SVC '\n         DC    X'400F'\n         DC    C'v\u00d4~\u00afv\u00d7u\u00f3'\n         DC    X'0E40'\n         DC    C' SVC '\n         DC    X'400F'\n         DC    C'HO\u00beWu2\u00d74C\u00f2u\u00f4uFF\u00da\u00f3\u00f5'\n         DC    X'0E40'\n***      DC    C'                                    '\n         DC    X'&MED',C'===>',X'1BC94E132841F4000000'\n         DC    X'2841001BF8C2'\n         DCS   SBA,(10,3)\n         DC    X'&LOW'\n*** (USE E/ FROM DETAIL SCREEN TO CANCEL ESR DISPLAY AND SHOW MAIN\n         DC    X'400F'\n         DC    C'~\u00ad\u00b4\u00fc[R\u00a5Y\u00f6\u00f6u\u00bfuZtE~\u00d7u2]H\u00f2Ju\u00bc\u00b7HDv'\n         DC    X'0E40'\n         DC    C' SVC '\n         DC    X'400F'\n         DC    C'v\u00d4~\u00afv\u00d7I\u00a8\u00afyu\u00f3v\u00ddvTv3v]v\u00d4\u00bdV~s'\n         DC    X'0E40'\n         DC    X'400F'\n         DC    C'\u00afX'\n         DC    X'0E40'\n         DCS   SBA,(11,6)\n         DC    C' SVC '\n         DC    X'400F'\n         DC    C'vF~\u00afvOv\u00d4u\u00f3I\u00a8\u00afyu\u00d0\u00a5DG\u00a8'\n         DC    X'0E40'\n         DC    C')'\n***\nGTESRJLN EQU   *-ESRPRMTJ\n         DC    X'11D1E2&HIGH'\n         DC    C'REENTER - SVC'\nESRERNOJ DC    CL4' '\n         DC    C' IS NOT AN EXTENDED SVC ROUTER'\nGTESRJLX EQU   *-ESRPRMTJ\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GLSPARSE": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93\\x17O\\x00\\x95\\x19\\x8f\\x14A\\x01\\x02\\x00\\xc6\\x00$\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-06-23T00:00:00", "modifydate": "1995-07-17T14:41:00", "lines": 258, "newlines": 198, "modlines": 36, "user": "T$QGP75"}, "text": "GLSPARSE TITLE 'IMON GLOSSARY SCREEN CONVERSION ROUTINE'\n*\n*        COPYRIGHT (C) 1993  PRYCROFT SIX PTY LTD\n*\n*        WRITTEN BY GREG PRICE        23 JUNE 1993\n*\nGLSPARSE CSECT\n         USING GLSPARSE,R15\n         B     START                  BRANCH AROUND LITERAL.\n         DC    AL1(53)\n         DC    C'GLSPARSE &SYSDATE COPYRIGHT (C) 1993 PRYCROFT SIX P/L'\n         DROP  R15                    GLSPARSE.\nSTART    DS    0H\n         STM   R14,R12,12(R13)        SAVE REGISTERS.\n         LR    R12,R15                COPY BASE REGISTER.\n         USING GLSPARSE,R12\n         LA    R3,SAVE                POINT TO NEW SAVE AREA.\n         ST    R3,8(,R13)             CHAIN FORWARD.\n         ST    R13,4(,R3)             CHAIN BACKWARD.\n         LR    R13,R3                 POINT TO NEW SAVE AREA.\n         OPEN  (SYSUT1,INPUT,SYSUT2,OUTPUT,SYSPUNCH,OUTPUT)\n         SPACE\nGETLOOP  GET   SYSUT1,INREC           GET AN INPUT RECORD.\n         CLI   INREC,C'*'             COPY COMMENT CARD.\n         BE    COPYREC\n         CLC   =C' TITLE ',INREC+8    COPY TITLE CARD.\n         BE    COPYREC\n         CLC   =C' EJECT ',INREC+8    COPY EJECT CARD.\n         BE    COPYREC\n         CLC   =C' SPACE ',INREC+8    COPY SPACE CARD.\n         BE    COPYREC\n         CLC   =C' START ',INREC+8    COPY START CARD.\n         BE    COPYREC\n         CLC   =C' CSECT ',INREC+8    COPY CSECT CARD.\n         BE    COPYREC\n         CLC   =C' DSECT ',INREC+8    COPY DSECT CARD.\n         BE    COPYREC\n         CLC   =C' AMODE ',INREC+8    COPY AMODE CARD.\n         BE    COPYREC\n         CLC   =C' RMODE ',INREC+8    COPY RMODE CARD.\n         BE    COPYREC\n         CLC   =C' USING ',INREC+8    COPY USING CARD.\n         BE    COPYREC\n         CLC   =C' DROP  ',INREC+8    COPY DROP CARD.\n         BE    COPYREC\n         CLC   =C' COPY  ',INREC+8    COPY COPY CARD.\n         BE    COPYREC\n         CLC   =C' ANOP  ',INREC+8    COPY ASSEMBLER NO-OPERATION CARD.\n         BE    COPYREC\n         CLC   =C' AIF   ',INREC+8    COPY ASSEMBLER IF CARD.\n         BE    COPYREC\n         CLC   =C' AGO   ',INREC+8    COPY ASSEMBLER BRANCH CARD.\n         BE    COPYREC\n         CLC   =C' END   ',INREC+8    COPY END CARD.\n         BE    COPYREC\n         CLC   =C' EQU   ',INREC+8    COPY EQUATE CARD.\n         BE    COPYREC\n         CLC   =C' DCS ',INREC+8      COPY \"DC FOR SCREEN\" CARD.\n         BE    COPYREC\n         CLC   =C' DC ',INREC+8       COPY DEFINE CONSTANT CARD.\n         BE    COPYREC\n         CLC   =C' DS ',INREC+8       COPY DEFINE STORAGE CARD.\n         BE    COPYREC\n         CLC   =C' GLB',INREC+8       COPY GLOBAL VARIABLE DEFINITION.\n         BE    COPYREC\n         CLC   =C' LCL',INREC+8       COPY LOCAL VARIABLE DEFINITION.\n         BE    COPYREC\n         CLC   =C' SET',INREC+8       COPY VARIABLE ASSIGNMENT.\n         BE    COPYREC\n         SPACE\n         MVC   OUTREC,INREC           COPY DOCUMENTATION TEXT.\nTRTPUNCH TRT   OUTREC,GETAB           ANY GRAPHICS ESCAPES?\n         BZ    PUTPUNCH               NO, RECORD READY FOR OUTPUT.\n         MVI   0(R1),C' '             YES, CONVERT IT TO A BLANK.\n         TR    1(1,R1),GRAFTABL-C' '  CONVERT APL BYTE TO BEST FIT.\n         B     TRTPUNCH               CHECK FOR ANY MORE GE BYTES.\nPUTPUNCH TR    OUTREC,PUNCHTAB        REMOVE UNPRINTABLES.\n         PUT   SYSPUNCH,OUTREC        WRITE IT OUT FOR REFERENCE.\n         LA    R4,INREC               POINT TO THE INPUT RECORD.\n         LA    R5,INREC+L'INREC       POINT PAST THE INPUT RECORD.\nEDITLOOP LR    R3,R5                  POINT PAST THE INPUT RECORD.\n         SR    R3,R4                  GET THE COUNT OF BYTES TO EDIT.\n         BNP   GETLOOP                ALL DONE, GET NEXT RECORD.\n         BCTR  R3,0                   DECREMENT FOR EXECUTE.\n         EX    R3,TRTCHARS            ANY SPECIAL FLAG BYTES?\n         LA    R3,1(,R3)              RESTORE BYTE COUNT.\n         BZ    DECLAREC               NO, OUTPUT CHARACTERS.\n         LR    R3,R1                  COPY FLAG BYTE ADDRESS.\n         SR    R3,R4                  GET OFFSET INTO INPUT RECORD.\n         BZ    CHRBITOK               FIRST BYTE HAS FLAG BYTE.\nDECLAREC CH    R3,=H'50'              MORE THAN FIFTY BYTES BEFORE IT?\n         BNH   CHRBIGOK               NO.\n         MVC   OUTREC,TEMPLATE        YES, OUTPUT THE FIRST FORTY.\n         MVC   OUTREC+17(40),0(R4)\n         MVI   OUTREC+57,QUOTE\n         PUT   SYSUT2,OUTREC\n         LA    R4,40(,R4)\n         SH    R3,=H'40'\nCHRBIGOK MVC   OUTREC,TEMPLATE\n         BCTR  R3,0                   DECREMENT FOR EXECUTE.\n         EX    R3,MVCCHARS            COPY DATA UP TO FLAG BYTE.\n         LA    R3,1(,R3)              RESTORE BYTE COUNT.\n         LA    R6,OUTREC+17(R3)       POINT PAST COPIED DATA.\n         MVI   0(R6),QUOTE            SUPPLY TRAILING QUOTE.\n         PUT   SYSUT2,OUTREC\n         ALR   R4,R3                  POINT PAST PROCESSED INPUT DATA.\n         CR    R4,R5                  END OF INPUT RECORD?\n         BNL   GETLOOP                YES, GET NEXT INPUT RECORD.\nCHRBITOK MVC   OUTREC,TEMPLATE\n         MVI   OUTREC+15,C'X'         DEFINE HEXADECIMAL.\n         CLI   0(R4),X'28'            FUJITSU SHIFT IN?\n         BE    SHIFTIN                YES, DEFINE IT IN HEX.\n         CLI   0(R4),X'29'            FUJITSU SHIFT OUT?\n         BE    SHIFTOUT               YES, DEFINE IT IN HEX.\n         CLI   0(R4),C' '             DISPLAYABLE CHARACTER?\n         BL    GETATTRS               NO, GO MAKE 3270 ORDERS.\n         UNPK  OUTREC+17(3),0(2,R4)   YES, UNPACK THE CHARACTER.\n         TR    OUTREC+17(2),HEX-C'0'\n         MVI   OUTREC+19,QUOTE\n         B     PUTHEX\nSHIFTIN  MVC   OUTREC+17(5),=C'400F'''\n         B     PUTHEX\nSHIFTOUT MVC   OUTREC+17(5),=C'0E40'''\n         B     PUTHEX\nTRTCHARS TRT   0(0,R4),SPECIALT       <<< EXECUTED >>>\nMVCCHARS MVC   OUTREC+17(0),0(4)      <<< EXECUTED >>>\n         SPACE\nGETATTRS CLI   0(R4),X'08'            GRAPHICS ESCAPE?\n         BE    MAKEAPL                YES.\n         MVC   OUTREC+17(9),=C'2841004B'''\n         CLI   0(R4),X'18'            NORMAL-HIGHLIGHTING,PERIOD?\n         BE    PUTHEX                 YES, NOW READY FOR OUTPUT.\n         MVI   OUTREC+24,C'0'\n         CLI   0(R4),X'10'            NORMAL-HIGHLIGHTING,BLANK?\n         BE    PUTHEX                 YES, NOW READY FOR OUTPUT.\n         LA    R6,OUTREC+17           POINT TO OUTPUT AREA.\n         TM    0(R4),X'08'            UNDERSCORE REQUIRED?\n         BZ    SETATTRS               NO.\n         MVC   OUTREC+21(2),=C'F4'    YES.\n         LA    R6,OUTREC+23           ADJUST POINTER.\nSETATTRS MVC   0(11,R6),=C'1DF02842F0'''     LOAD TEMPLATE.\n         SLR   R0,R0\n         IC    R0,0(,R4)              LOAD THE FLAG BYTE.\n         STC   R0,9(,R6)              OVERLAY LAST (COLOR) HEX DIGIT.\n         NI    9(R6),X'F7'            FOLD BACK TO VALID RANGE.\n         OI    9(R6),X'F0'            MAKE DECIMAL NUMERIC CHARACTER.\n         SRL   R0,4                   GET TOP NIBBLE.\n         BCTR  R0,0                   MAP 1->3 TO 0->2.\n         SLL   R0,2                   MULTIPLY BY FOUR.\n         STC   R0,3(,R6)              SUPPLY INTENSITY FLAGS.\n         OI    3(R6),X'F0'            MAKE DECIMAL NUMERIC CHARACTER.\nPUTHEX   LA    R4,1(,R4)              POINT PAST THE FLAG BYTE.\n         PUT   SYSUT2,OUTREC\n         B     EDITLOOP\nMAKEAPL  MVC   OUTREC+17(4),=C'4008'  INSERT A BLANK.\n         UNPK  OUTREC+21(3),1(2,R4)   SUPPLY THE ACTUAL CHARACTER.\n         TR    OUTREC+21(2),HEX-C'0'\n         MVI   OUTREC+23,QUOTE\n         LA    R4,1(,R4)              POINT PAST THE GRAPHIC ESCAPE.\n         B     PUTHEX                 NOW READY FOR OUTPUT.\n         SPACE\nCOPYREC  PUT   SYSUT2,INREC           TRANSMIT RECORD WITHOUT CHANGE.\n         CLI   INREC+71,C' '          IS THIS CARD CONTINUED?\n         BE    GETLOOP                NO.\n         GET   SYSUT1,INREC           YES, GET THE CONTINUATION.\n         B     COPYREC                COPY IT OUT.\n         SPACE\nEODATADR CLOSE (SYSUT1,,SYSUT2,,SYSPUNCH)\n         L     R13,4(,R13)            POINT BACK TO CALLER'S SAVE AREA.\n         LM    R14,R12,12(R13)        RESTORE REGISTERS.\n         SLR   R15,R15                ZERO RETURN CODE.\n         BR    R14                    RETURN.\n         SPACE\n         DROP  R12                    GLSPARSE.\n         TITLE 'CONSTANTS AND VARIABLES'\nSAVE     DC    18F'0'\nTEMPLATE DC    CL80'         DC    C''    '\nINREC    DC    CL80' '\nOUTREC   DC    CL80' '\nHEX      DC    CL16'0123456789ABCDEF'\nSPECIALT DC    X'00000000000000000800000000000000'\n         DC    X'101112131415161718191A1B1C1D1E1F'\n         DC    X'002122232425262728292A2B2C2D2E2F'\n         DC    X'0031323334353637003900003C3D3E3F'\n         DC    X'00000000000000000000000000000000'\n         DC    X'50000000000000000000000000000000'\n         DC    X'00000000000000000000000000000000'\n         DC    X'000000000000000000000000007D0000'\n         DC    X'00000000000000000000000000000000'\n         DC    X'00000000000000000000000000000000'\n         DC    X'00000000000000000000000000000000'\n         DC    X'00000000000000000000000000000000'\n         DC    X'00000000000000000000000000000000'\n         DC    X'00000000000000000000000000000000'\n         DC    X'00000000000000000000000000000000'\n         DC    X'00000000000000000000000000000000'\nPUNCHTAB DC    X'406C5B7B505C7C4A404E4E4E4E4E4E4E'\n         DC    X'40404040404040404040404040404040'\n         DC    X'40404040404040404040404040404040'\n         DC    X'40404040404040404040604F40404040'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'808182838485868788898A8B8C8D8E8F'\n         DC    X'909192939495969798999A9B9C9D9E9F'\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'\nGETAB    DC    XL8'00',X'08',XL247'00'\nGRAFTABL DC    C' ABCDEFGHI??????'       40 TO 4F.\n         DC    C'?JKLMNOPQR??????'       50 TO 5F.\n         DC    C'??STUVWXYZ??????'       60 TO 6F.\n         DC    C'?',X'5354',C'?????'     70 TO 77.\n         DC    X'52',C'???????'          78 TO 7F.\n         DC    C'~??\u00b3\u00b3\u00b3???????\u00b3\u00b3?'       80 TO 8F.\n         DC    C'???????????'            90 TO 9A.\n         DC    X'83',C'?',X'96',C'??'    9B TO 9F.\n         DC    X'4951',C'-?',X'95'       A0 TO A4.\n         DC    C'????????',X'41',C'??'   A5 TO AF.\n         DC    X'81858999A66FA7'         B0 TO B6.\n         DC    C'\\/???T',X'42',C'?\u00b3'     B7 TO BF.\n         DC    C'{(+?--\u00b3-'               C0 TO C7.\n         DC    X'48',C'???????'          C8 TO CF.\n         DC    C'})?+--\u00b3-???!????'       D0 TO DF.\n         DC    C'?123????????????'       E0 TO EF.\n         DC    C'0123456789??????'       F0 TO FF.  (FF IS INVALID.)\nSYSUT1   DCB   DSORG=PS,MACRF=(GM),DDNAME=SYSUT1,EODAD=EODATADR\nSYSUT2   DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSUT2\nSYSPUNCH DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPUNCH,RECFM=FB,LRECL=80\n         SPACE\n         LTORG\n         SPACE\n         DS    0D                     END OF CSECT.\n         TITLE 'EQUATES'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\nQUOTE    EQU   X'7D'                  INSTEAD OF C''''.\n         SPACE 2\n         END   GLSPARSE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ICFDSECT": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x00\\x90'\\x1f\\x00\\x92\\x19\\x1f\\x128\\x014\\x01\\xf3\\x00\\x13\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "1990-09-28T00:00:00", "modifydate": "1992-07-09T12:38:00", "lines": 308, "newlines": 499, "modlines": 19, "user": "CART1"}, "text": "         TITLE 'ICF/VSAM CATALOG DATA FORMATS'\nTYPE@C   DSECT\n***********************************************************************\n*        PDSDOC *ICF CATALOG BCS DATA FORMATS.........................*\n*                                                                     *\n*        V S A M   C L U S T E R   N A M E   C E L L                  *\n*                                                                     *\n***********************************************************************\nVCNC     DS    0CL52                   VSAM CLUSTER NAME CELL\nCLCELLN  DS    CL2                     LENGTH OF VCNC INCLUDING ITSELF\nCLTYPE   DS    C                       TYPE 'C' FOR CLUSTER\nCLCOMPLN DS    CL2                     LENGTH OF THE CLUSTER COMPONENT\nCLNOEXT  DS    C                       NUMBER OF EXTENTION RECORDS\nCLNMLEN  DS    C                       LENGTH OF THE CLUSTER KEY (45)\nCLNAME   DS    CL44                    CLUSTER NAME PART OF KEY\nCLNMPAD  DS    C                       PAD VALUE, SET TO BINARY ZERO\n         EJECT\nTYPE@D   DSECT\n***********************************************************************\n*                                                                     *\n*        D A T A / I N D E X   N A M E   C E L L                      *\n*                                                                     *\n***********************************************************************\nDINC     DS    0CL7                    DATA OR INDEX NAME CELL\nDIDLEN   DS    CL2                     LENGTH OF DINC\nDIDTYPE  DS    C                       TYPE 'D' OR 'I' FOR DATA/INDEX\nDIDCMPLN DS    CL2                     LENGTH OF DINC COMPONENT\nDIDIRFLG DS    C                       INTERRUPTION RECOGNITION FLAGS\nDIDELETE EQU   X'80'                   DELETE IN PROGRESS\nDIDUPDAT EQU   X'40'                   UPDATE-EXTENT IN PROGRESS\nDIDSRMU  EQU   X'20'                   SUB-REC MOVE AND UPDATE IN PROG.\nDIDRSV   EQU   X'1F'                   RESERVED\nDIDKEYLN DS    C                       CONDENSED KEY LENGTH\nDIDKEY   DS    0CL45                   CONDENSED KEY\n         EJECT\nTYPE@G   DSECT\n***********************************************************************\n*                                                                     *\n*        A L T E R N A T E   I N D E X  N A M E   C E L L             *\n*                                                                     *\n***********************************************************************\nANC      DS    0CL7                    ALTERNATE INDEX NAME CELL\nAIXCELN  DS    CL2                     LENGTH OF ANC\nAIXTYPE  DS    C                       TYPE 'G' FOR ALTERNATE INDEX\nAIXCMPLN DS    CL2                     LENGTH OF AIX COMPONENT\nAIXFLG   DS    C                       FLAG BYTE\nAIXUPG   EQU   X'80'                   AIX IS MEMBER OF UPGRADE SET\nAIXRSV   EQU   X'7F'                   RESERVED\nAIXKYLEN DS    C                       CONDENSED KEY LENGTH\nAIXKEY   DS    0CL45                   CONDENSED KEY\n         EJECT\nTYPE@R   DSECT\n***********************************************************************\n*                                                                     *\n*        P A T H  N A M E   C E L L                                   *\n*                                                                     *\n***********************************************************************\nPNC      DS    0CL52                   PATH NAME CELL\nPATHCELN DS    CL2                     LENGTH OF PNC\nPATHTYPE DS    C                       TYPE 'R' FOR PATH\nPATHRESV DS    CL2                     RESERVED\nPATHATTR DS    C                       PATH ATTRIBUTES\nPATHUPG  EQU   X'80'                   UPGRADE IF RELATED TO AIX\nPATHUPD  EQU   X'40'                   UPDATE IF RELATED TO CLUSTER\nPATHPSV1 EQU   X'20'                   RESERVED\nPATHREL  EQU   X'10'                   0 RELATED TO AIX, 1 TO CLUSTER\nPATHRSV  EQU   X'0F'                   RESERVED\nPATHKYLN DS    C                       LENGTH OF PATH KEY\nPATHNAME DS    CL44                    PATH NAME PART OF KEY\nPATHPAD  DS    C                       PAD VALUE (BINARY ZERO)\n         EJECT\nTYPE@A   DSECT\n***********************************************************************\n*                                                                     *\n*        N O N V S A M   N A M E   C E L L                            *\n*                                                                     *\n***********************************************************************\nNVNC     DS    0CL52                   NONVSAM NAME CELL\nNVCELEN  DS    CL2                     LENGTH OF NVNC\nNVTYPE   DS    C                       TYPE 'A' FOR NONVSAM\nNVRESV   DS    C                       RESERVED\nNVOLCNT  DS    CL2                     NO. OF VOLUME CELLS (UP TO 255)\nNVKEYLN  DS    C                       LENGTH OF NVSAM KEY\nNVNAME   DS    CL44                    NONVSAM NAME\nNVPAD    DS    C                       PAD VALUE (BINARY ZERO)\n         EJECT\nTYPE@B   DSECT\n***********************************************************************\n*                                                                     *\n*        G E N E R A T I O N   D A T A   G R O U P   N A M E   C E L L*\n*                                                                     *\n***********************************************************************\nGDGNC    DS    0CL52                   GENERATION DATA GROUP NAME CELL\nGDGCELLN DS    CL2                     LENGTH OF GDGNC\nGDGTYPE  DS    C                       TYPE 'B' FOR GDG\nGDGCMPLN DS    CL2                     LENGTH OF GDG COMPONENT\nGDGNOEXT DS    C                       NO. OF EXTENTION RECORDS\nGDGKYLEN DS    C                       LENGTH OF GDG KEY\nGDGKEY   DS    0CL45                   GDG KEY (NAME + PAD)\nGDGNAME  DS    CL44                    GDG NAME\nGDGPAD   DS    C                       PAD VALUE (BINARY ZERO)\n         EJECT\nTYPE@H   DSECT\n***********************************************************************\n*                                                                     *\n*        G E N E R A T I O N   D A T A   S E T   N A M E   C E L L    *\n*                                                                     *\n***********************************************************************\nGDSNC    DS    0CL10                   GENERATION DATA SET NAME CELL\nGDSCELEN DS    CL2                     LENGTH OF GDSNC\nGDSTYPE  DS    C                       TYPE 'H' FOR GDG DSN\nGDSCMPLN DS    CL2                     LENGTH OF GDS COMPONENT\nGDSGENO  DS    CL2                     GENERATION NUMBER OF GDS\nGDSVERNO DS    C                       VERSION NUMBER OF GDS\nGDSVOLCT DS    CL2                     NUMBER OF VOL CELLS IN GDS\n         EJECT\nTYPE@T   DSECT\n***********************************************************************\n*                                                                     *\n*        T R U E N A M E   N A M E   C E L L                          *\n*                                                                     *\n***********************************************************************\nTNC      DS    0CL52                   TRUENAME NAME CELL\nTRUCELN  DS    CL2                     LENGTH OF GDSNC\nTRUTYPE  DS    C                       TYPE 'T' FOR TRUENAME\nTRURESV  DS    CL2                     RESERVED\nTRUNTYPE DS    C                       TRUENAME REC FOR 'D',  'G', 'I'\nTRUKEYLN DS    C                       TRUENAME KEY LENGTH\nTRUNAME  DS    CL44                    DATA, INDEX OR AIX NAME\nTRUPAD   DS    C                       PAD VALUE (BINARY ZERO)\n         EJECT\nTYPE@E   DSECT\n***********************************************************************\n*                                                                     *\n*        E X T E N T I O N   N A M E   C E L L                        *\n*                                                                     *\n***********************************************************************\nENC      DS    0CL52                   EXTENTION NAME CELL\nEXTCELN  DS    CL2                     LENGTH OF ENC\nEXTTYPE  DS    C                       TYPE 'E' FOR VSAM, 'J' FOR GDG\nEXTRESV  DS    CL3                     RESERVED\nEXTNMLEN DS    C                       EXTENTION KEY LENGTH\nEXTKEY   DS    0CL45                   EXTENTION KEY\nEXTNAME  DS    CL44                    SHERE NAME PADDED WITH BLANKS\nEXTPAD   DS    C                       PAD VALUE X'01' ==> 'FF'\n         EJECT\nTYPE@U   DSECT\n***********************************************************************\n*                                                                     *\n*        I C F   C O N N E C T O R   N A M E   C E L L                *\n*                                                                     *\n***********************************************************************\nICFCNC   DS    0CL52                   ICF CONNECTOR NAME CELL\nCOCELEN  DS    CL2                     LENGTH OF ICFCNC\nCOTYPE   DS    C                       TYPE 'U' FOR ICF CONNECTOR\nCORESV   DS    CL2                     RESERVED\nCOFLAG   DS    C                       FLAG BYTE\nCOCATYPE EQU   X'80'                   0 => VSAM, 1 => ICF\nCOKEYLN  DS    C                       CATALOG KEY LENGTH\nCONAME   DS    CL44                    CATALOG NAME PART OF KEY\nCOPAD    DS    C                       PAD VALUE (BINARY ZERO)\n         EJECT\nTYPE@X   DSECT\n***********************************************************************\n*                                                                     *\n*        A L I A S   N A M E   C E L L                                *\n*                                                                     *\n***********************************************************************\nALNC     DS    0CL52                   ALIAS NAME CELL\nALICELN  DS    CL2                     LENGTH OF ALNC\nALITYPE  DS    C                       TYPE 'X' FOR ALIAS\nALIRESV  DS    CL2                     RESERVED\nALIRTYPE DS    C                       TYPE OF RELATED NAME\nALIKYLEN DS    C                       LENGTH OF ALIAS KEY\nALINAME  DS    CL44                    ALIAS NAME PART OF KEY\nALIPAD   DS    C                       PAD VALUE (BINARY ZERO)\n         EJECT\nTYPE@01  DSECT\n***********************************************************************\n*                                                                     *\n*        O W N E R S H I P   C E L L                                  *\n*                                                                     *\n***********************************************************************\nOWNERC   DS    0CL18                   OWNERSHIP CELL\nOWNCELLN DS    CL2                     LENGTH OF OWNERC\nOWNTYPE  DS    C                       TYPE X'01' FOR OWNERSHIP CELL\nOWNID    DS    CL8                     OWNER IDENTIFICATION\nOWNFLAG  DS    C                       FLAG BYTE\nOWNRACF  EQU   X'80'                   RACF PROTECTION\nOWNKSDS  EQU   X'40'                   INDEX COMPONENT DATASET\nOWNREUS  EQU   X'20'                   REUSEABLE DATASET\nOWNERASE EQU   X'10'                   ERASE SPECIFIED\nOWNRESV  EQU   X'0C'                   RESERVED\nOWNSWAP  EQU   X'02'                   SWAP SPACE\nOWNPAGE  EQU   X'01'                   PAGE SPACE\nOWNCREDT DS    CL3                     CREATION DATE\nOWNEXPDT DS    CL3                     EXPIRATION DATE\n         EJECT\nTYPE@02  DSECT\n***********************************************************************\n*                                                                     *\n*        S E C U R I T Y   C E L L                                    *\n*                                                                     *\n***********************************************************************\nSECURITY DS    0CL55                   SECURITY CELL\nSECELLN  DS    CL2                     LENGTH OF SECURITY CELL\nSECTYPE  DS    C                       TYPE X'02' FOR SECURITY CELL\nSECPSWD  DS    0CL32                   PASSWORDS\nSECMSTR  DS    CL8                     MASTER PASSWORD\nSECCI    DS    CL8                     CONTROL INTERVAL PASSWORD\nSECUPDTE DS    CL8                     UPDATE PASSWORD\nSECREAD  DS    CL8                     READ PASSWORD\nSECPMTCD DS    CL8                     PASSWORD PROMPTING CODE\nSECATMP  DS    CL2                     MAX. NO. OF ATTEMPTS\nSECVRMOD DS    CL8                     USER SECURITY VERIFICATION MOD\nSECRCDLN DS    CL2                     USER AUTHORISATION RECORD LENGTH\nSECRCD   DS    0CL256                  USER AUTHORISATION RECORD\n         EJECT\nTYPE@03  DSECT\n***********************************************************************\n*                                                                     *\n*        A S S O C I A T I O N   C E L L                              *\n*                                                                     *\n***********************************************************************\nASSOCC   DS    0CL5                    ASSOCIATION CELL\nASCLEN   DS    CL2                     LENGTH OF ASSOCIATION CELL\nASCTYPE  DS    C                       TYPE X'03' FOR ASSOCIATION CELL\nASCOUNT  DS    CL2                     COUNT OF ASSOCIATIONS (MAX. 64K)\nASCKEYS  DS    0CL2                    REPEATED ASCOUNT TIMES\nASCFLAG  DS    C                       FLAG BYTE\nASCREUS  EQU   X'80'                   USED IN RELATION CELL ONLY\nASCRESV  EQU   X'7F'                   RESERVED\nASCKYLEN DS    C                       ASSOCIATION KEY LENGTH\nASCKEY   DS    0CL45                   CONDENSED ASSOCIATION KEY\n         EJECT\nTYPE@04  DSECT\n***********************************************************************\n*                                                                     *\n*        V O L U M E   C E L L                                        *\n*                                                                     *\n***********************************************************************\nVOLCELL  DS    0CL28                   VOLUME CELL\nVOLLEN   DS    CL2                     LENGTH OF VOLUME CELL\nVOLTYPE  DS    C                       TYPE X'04' FOR VOLUME CELL\nVOLOFSET DS    C                       NOT USED\nVOLSERN  DS    CL6                     VOLUME SERIAL NUMBER\nVOLDEVTP DS    CL4                     DEVICE TYPE\nVOLFLAG1 DS    C                       VOLUME FLAG1\nVOLPRIME EQU   X'80'                   PRIME VOLUME ALLOCATED SPACE\nVOLCANDI EQU   X'40'                   CANDIDATE VOLUME - NO SPACE\nVOLOFLOW EQU   X'20'                   OVERFLOW KEYRANGE ONLY\nVOLCONV  EQU   X'10'                   CONVERTED VSAM DATASET VOLUME\nVOLNVSAM EQU   X'08'                   NONVSAM VOLUME CELL\nVOLKYRNG EQU   X'04'                   KEYRANGE QUALIFIER PRESENT\nVOLVPCI  EQU   X'02'                   PRIMARY VVR CI\nVOLSSQWD EQU   X'01'                   SEQUENCE SET WITH DATA\nVOLFLAG2 DS    C                       RESERVED\nVOLVVRBA DS    0CL4                    RELATIVE BYTE ADDRESS OF VVR\nVOLDSTTR DS    CL3                     NONVSAM FORMAT 1 DSCB TTR\nVOLRSV01 DS    C                       RESERVED\nVOLFLSEQ DS    CL2                     NONVSAM FILE SEQ. NUMBER (TAPE)\nVOLKRQL  DS    0CL4                    KEYRANGE QUALIFIER (VSAM ONLY)\nVOLRSV02 DS    CL4                     RESERVED FOR NONVSAM\nVOLLKYLN DS    CL2                     LENGTH OF LOW KEY RANGE KEY\nVOLLOWKY DS    0CL64                   1- 64 BYTES LOW KEY\n         ORG   VOLCELL\nVOLHKYLN DS    CL2                     LENGTH OF HIGH KEY RANGE KEY\nVOLHIKY  DS    0CL64                   1 - 64 BYTES HIGH KEY\n         EJECT\nTYPE@05  DSECT\n***********************************************************************\n*                                                                     *\n*        G E N E R A T I O N   A G I N G   T A B L E   C E L L        *\n*                                                                     *\n***********************************************************************\nGATC     DS    0CL6                    GENERATION AGING TABLE CELL\nGATCELN  DS    CL2                     LENGTH OF GAT CELL\nGATYPE   DS    C                       TYPE X'05' FOR GAT CELL\nGATATTR  DS    C                       ATTRIBUTES\nGATDELET EQU   X'80'                   0 => OLDEST, 1 => ALL ENTRIES\nGATSCRTH EQU   X'40'                   0 => NOSCR, 1 => SCR IF MOUNTED\nGATRESV  EQU   X'3F'                   RESERVED\nGATLIMIT DS    C                       MAX. GDG ENTRIES IN GDG BASE\nGATCNT   DS    C                       CURRENT NO. OF ENTRIES IN GAT\nGAT      DS    0CL4                    GAT ENTRY (FOR EVERY CUR. ENTRY)\nGATEXTNO DS    C                       EXTENTION RECORD SEQ. NO.\nGATGEN   DS    CL2                     GENERATION NUMBER OF GDS\nGATWRAP  EQU   X'80'                   NUMBER EXCEEDS 9999\nGATVER   DS    C                       VERSION NUMBER OF GDS\n         EJECT\nTYPE@06  DSECT\n***********************************************************************\n*                                                                     *\n*        R E L A T I O N S H I P   C E L L                            *\n*                                                                     *\n***********************************************************************\nRELCELL  DS    0CL5                    RELATIONSHIP CELL\nRELLEN   DS    CL2                     LENGTH OF RELATIONSHIP CELL\nRELTYPE  DS    C                       TYPE X'06' FOR RELATIONSHIP CELL\nRELRESV1 DS    C                       RESERVED\nRELCNT   DS    C                       COUNT OF RELKEYS\n         ORG   RELCELL\nRELKEYS  DS    0CL2                    REPEATED RELCNT TIMES\nRELFLAG  DS    C                       FLAG BYTE\nRELUPG   EQU   X'80'                   USED IN RELATION CELL ONLY\nRELRESV2 EQU   X'7F'                   RESERVED\nRELGLEN  DS    C                       LENGTH OF AIX CONDENSED KEY\nRELGKEY  DS    0CL45                   CONDENSED AIX KEY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IM@": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x91\\x01\\x1f\\x00\\x91\\x06o\\x17\\x14\\x00\\xe0\\x00|\\x00\\x00\\xe2\\xd7\\xc7\\xc9\\xd7@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1991-01-11T00:00:00", "modifydate": "1991-03-07T17:14:00", "lines": 224, "newlines": 124, "modlines": 0, "user": "SPGIP"}, "text": "\n        INTERACTIVE MONITORING PROGRAM - USER'S GUIDE\n        =========== ========== =======   ====== =====\n\n  0)    CONTENTS\n        --------\n        1)    INTRODUCTION\n        2)    INSTALLATION\n        3)    CUSTOMIZATION\n        4)    ORGANIZATION\n\n\n  1)    INTRODUCTION\n        ------------\n           The Interactive Monitoring Program (IMP) is a full-screen\n        real-time monitor of the MVS Operating System that runs in the\n        TSO foreground environment and interacts with the TSO user via\n        a 3270-family or compatible terminal.  IMP is designed to\n        exploit terminal features and so is best viewed on a terminal\n        with extended colour and highlighting capability.  Program\n        Access and Program Function Keys are used to simplify input\n        requests while intensity, colour and highlighting are used to\n        assist the understanding of output.\n           One of the functions IMP can perform is to display LSPACER\n        data on the TSO screen.  LSPACER is a separate product which\n        accumulates DASD free space statitics, enabling the observation\n        of disk space utilization cycles over a shift, day, or other\n        time period.  A possible use for this is to gauge disk space\n        restrictions on application batch windows.\n\n  2)    INSTALLATION\n        ------------\n           IMP consists of two (2) load modules which can be installed\n        in the same library.  The main module is IM which can be\n        invoked via the TSO CALL command, but is best installed into an\n        \"automatic\" library so that the user can invoke it via the IM\n        TSO command.  The other module is IMPXASPY which performs the\n        OS console display function, this being one of the options\n        available for selection and presented to the user in the main\n        menu.  If the LSPACER product is also supplied then there will\n        be two (2) additional load modules called LSPACER and LERASER.\n        All load modules will be shipped on tape in IEBCOPY-unloaded\n        format, and so IEBCOPY should be used to copy them to disk.\n        The COPYMOD statement may be used to reblock the modules to an\n        installation-preferred block size, but it is important that\n        the link edit attributes supplied be preserved throughout the\n        installation process.\n           While a good feel for IMP's capabilities may be gained by\n        running it unauthorized, an APF authorized environment is\n        required for full-function.  It is therefore expected that IMP\n        will be installed into an APF authorized library and that IM\n        will be registered as an APF authorized TSO command in the\n        standard way for the release of TSO or TSO/E installed.  Once\n        these steps are performed the IM TSO command should be ready\n        for use, although the installer may wish to carry out some\n        further customization.  (See CUSTOMIZATION below.)\n           The installer should note that it is the installer's\n        responsibility to restrict the availability of IMP functions\n        to those individuals who are authorized to use them at that\n        particular installation.  Typically, this may mean installing\n        IMP into a library that only system programmers can access,\n        or installing IMP into the link list but denying access to most\n        or all options to general users.\n\n  3)    CUSTOMIZATION\n        -------------\n           Once IMP is installed it may be desirable to restrict access\n        to some or all options to a subset of users.  When IMP is\n        invoked without any operands or parameters then the main menu\n        will be displayed which will list the options which may be\n        selected by the user.  Any option listed may be selected,\n        although all possible options may not be listed.  For example,\n        option \"O\" (the OS console display) requires an APF authorized\n        environment, so whenever IMP is invoked unauthorized option \"O\"\n        will never appear on the main menu.  Similarly, an installation\n        can choose to disable selected options for all users or some\n        users.\n           Every option has a flag byte which is constructed at execute\n        time and an authorization byte which is pre-set.  The last\n        three bits of the flag byte are for internal use and may change\n        during execution.  The first five bits are copied from the\n        option's authorization byte.  The installer can alter each\n        option's authorization byte using the AMASPZAP service aid or\n        an equivalent program.  The last three bits of the\n        authorization byte are ignored and should be left zero.\n           By specifying the first five bits of the authorization\n        bytes, the installer can make an option available to everyone\n        who can invoke IMP, a subset of users based on the OPER, ACCT,\n        JCL and MOUNT TSO privileges, or can disable the option for the\n        whole installation.\n           The meanings of the authorization byte's bits are:\n        X'80' - OPER is not needed for this option\n        X'40' - ACCT is not needed for this option\n        X'20' - JCL is not needed for this option\n        X'10' - MOUNT is not needed for this option\n        X'08' - this option is enabled at this installation\n        X'04' - unused and should be left zero\n        X'02' - unused and should be left zero\n        X'01' - unused and should be left zero\n           and some examples are:\n        X'F8' - access to this option is unrestricted\n        X'78' - OPER is required for this option\n        X'38' - OPER and ACCT are required for this option\n        X'D8' - JCL is required for this option\n        X'F0' - this option is disabled at this installation.\n           The offset of an option's authorization byte within the IM\n        load module is simply given by the hexadecimal for the EBCDIC\n        of the option name.  Therefore, the authorization bytes for\n        options \"$\", \"A\", \"B\", \"N\", \"O\" and \"T\" are at offsets +5B,\n        +C1, +C2, +D5, +D6 and +E3 respectively.  As shipped, users\n        with OPER, ACCT and JCL have full access to all IMP functions.\n           The installer may wish to display an option's flag byte\n        (including the authorization bits) for verification purposes.\n        This can be achieved by entering '..' (two periods) with PF2\n        or PF14.  The hexadecimal of the flag byte for the current\n        option will then be displayed on the heading line.  This\n        command is not documented anywhere else as it is not intended\n        for general usage.\n\n  4)    ORGANIZATION\n        ------------\n           IMP organization is designed to enable rapid selection of\n        the desired display with minimal keystrokes from any \"location\"\n        either elsewhere in IMP or from any \"place\" that supports TSO\n        commands.  Accordingly, IMP is an end-point for software\n        nesting, meaning that other programs or commands cannot not be\n        invoked directly from within IMP.  Whenever IMP functions are\n        desired IM can be quickly invoked by the user and then exited\n        with a single keystroke to allow the resumption of other work.\n           Although IMP may appear at first glance to be organized\n        hierarchically, it is in fact a collection of functional\n        components called \"options\" of which only one may be executing\n        at any given time.  The main menu display can be considered as\n        option \"blank\" or option \"null\" and exists chiefly to facilitate\n        passing control to other more productive options selected by the\n        user from the presented list.  Once an option has been selected\n        the user is free to re-display the primary menu and make another\n        selection or directly transfer control to another option without\n        displaying the menu.  Commands to do this are discussed under\n        below.\n           Every screen image presented by IMP has an input area in the\n        top left-hand corner of the screen.  This is called the PRIMARY\n        input area.  This area allows two bytes of input except when\n        the main menu is being displayed when up to three bytes may be\n        input.  Some screens presented by IMP may have other input\n        areas, but display-mode options and global subcommands are\n        usually only recognized when input from the primary input area.\n           IMP has several different types of screen.  They are:\n           - menus\n           - detail screens\n           - HELP panels\n           - GLOSSARY panels\n        and are shown in well-defined circumstances.  Currently the\n        only menu screen is the main menu, and it is similar to a HELP\n        panel in that it is substantially pre-coded but is modifiable\n        by IMP at execute-time.\n           The \"detail screens\" are the actual displays for which IMP\n        exists.  A given option has one or more display formats with\n        its contents being updated either automatically at regular\n        time intervals or whenever the user depresses the ENTER key.\n           Each option has a HELP panel which lists subcommands that\n        are valid for the current option.  Such commands are known as\n        LOCAL SUBCOMMANDS.  The user can also validly select a GLOBAL\n        SUBCOMMAND but these are only listed in the HELP panel for the\n        main menu.  The global subcommand '?' (question mark) is used\n        to display the help panel, although the help panel of an option\n        is also usually displayed whenever an invalid or unknown command\n        is requested.  The HELP panel can be edited at execute-time by\n        IMP to indicate current conditions and limitations.\n           The global subcommand '!' (exclamation mark) can be issued\n        at any time to request glossary information about the current\n        option.  This information is presented in the form of pre-coded\n        screen images which may be presented sequentially or accessed\n        individually by the user.  An option may have one or several\n        glossary panels, or none at all.  The glossary panels\n        accessable from the main menu contain \"general information\"\n        which pertains to IMP as a whole.  It may be instructive for\n        first-time IMP users to read this before attempting to fully\n        exploit IMP functionality.\n           IMP is geared to produce a display update whenever the user\n        depresses ENTER on the keyboard without any accompanying text.\n        Therefore, a HELP or GLOSSARY panel is only ever displayed after\n        explicit action by the user.  The user can use the subcommands\n        mentioned above or the corresponding PF Keys.  (PF1/PF13\n        requests the HELP panel while PF2/PF14 can be used to request\n        GLOSSARY information.)  To return to the detail display of the\n        current option the user merely selects ENTER.  Note that\n        PF3/PF15 is not needed to end the HELP or GLOSSARY display.\n        PF3/PF15 ALWAYS means \"terminate IMP\".  It also follows that\n        requests for consecutive GLOSSARY panels must be made\n        explicitly, this being done most easily with PF2/PF14.  If a\n        user knows that relevant information is contained on Glossary\n        page 4, for example, then this page can be displayed directly by\n        with the '!4' subcommand, or by entering '4' with PF2/PF14.\n           Users who wish to \"travel\" directly from one option to\n        another can use the '=' (equals sign) command.  Hence, by\n        entering '=E', for example, control can be transferred to option\n        \"E\" without an intervening display of the main menu.  If '=' is\n        entered without specifying an option, or if a non-existent or\n        unavailable option is selected, then the current option will\n        still be exited and the main menu will be displayed.  PF12/PF24\n        can be used to specify the '=' function, so that entering 'E'\n        with PF12/PF24 will also result in the transfer to option \"E\".\n        If PF12/PF24 is used anywhere within IMP without any\n        accompanying text then the main menu will always be displayed.\n           As mentioned above, PF3/PF15 can be used to terminate IMP.\n        The same result can be achieved with the 'Z' global subcommand,\n        and also by specifying '=X'.\n           To assist the user in obtaining the desired display as\n        quickly as possible, the initial main menu selection can be\n        specified when IM is invoked.  If IM is called as a program then\n        this selection is specified as the program parameter.  If IM is\n        invoked as a TSO command then the selection is specified as the\n        TSO command operand.  To demonstrate, consider the example\n        where the user would like to display a line for each batch job\n        currently running.  The user could invoke IM, select 'A', and\n        then issue the 'BJ' local subcommand.  As described above, the\n        user can get into option \"A\" directly without displaying the\n        main menu with the TSO command 'IM A'.  To further optimize the\n        process, most options can process an initial local subcommand\n        before the first display is produced.  It can now be seen that\n        the user can specify 'ABJ' from the main menu, or can issue\n        'IM ABJ' from TSO READY.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMCFDATA": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x98!o\\x00\\x98$o\\x16\\x07\\x00k\\x00g\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-08-04T00:00:00", "modifydate": "1998-09-03T16:07:00", "lines": 107, "newlines": 103, "modlines": 0, "user": "T$QGP75"}, "text": "*  (c) 1998 - B. Break    TCD - Transported coupling facility details\nINFTCD1  DSECT                  Structure information table\nTCD1SIZE DS    F                Structure information table size\nTCD1FLG1 DS    XL1              Structure type flag\nLISTSTR  EQU   X'80'            List structure\nLOCKSTR  EQU   X'40'            Lock structure\nCACHESTR EQU   X'20'            Cache structure\nUNKNWSTR EQU   X'10'            Unknown type (not allocated)\nTCD1FLG2 DS    XL1              Structure status flag\nSTRALOC  EQU   X'80'            Structure \"allocated\"\nSTRNALOC EQU   X'40'            Structure \"not allocated\"\n         DS    XL2              Reserved\nTCD1CFNM DS    CL8              Structure coupling facility name\nTCD1ASIZ DS    F                Allocated structure size in 1k blocks\nTCD1USIZ DS    F                Used structure size in 1k blocks\n*                               (list or lock, not valid for cache)\n*                               (If TCD1USIZ=0, then < 1k)\nTCD1ELC  DS    F                # list elements or lock record data\n*                               elements available,\n*                               or cache data element count\nTCD1ELU  DS    F                # list elements or lock record data\n*                                 elements used\nTCD1ENTA DS    F                # list entries available\nTCD1ENTU DS    F                # list entries currently in use\nTCD1LKTA DS    F                # lock table entries available\nTCD1LKTU DS    F                # lock table entries used\nTCD1LKCT DS    F                # total lock contention requests\nTCD1LKCF DS    F                # false lock contention requests\nTCD1DEC  DS    F                Cache directory entry count\nTCD1MXSC DS    XL1              Maximum cache storage class value\nTCD1MXCC DS    XL2              Maximum cache castout class value\n         DS    XL1              Reserved\nTCD1CNR# DS    F                Structure # connectors (32 maximum)\nTCD1CNRA EQU   *                Connectors area (32 maximum)\n\nTCD1CNR  DSECT                  Structure connector record\nTCD1CNNM DS    CL16             Structure connector name\nTCD1SYSN DS    CL8              Structure system name\nTCD1JOBN DS    CL8              Structure connecting jobname\nTCD1FLG3 DS    XL1              Stucture connector status flag\nCONACTV  EQU   X'80'            Connector \"active\"\nCONFAILP EQU   X'40'            Connector \"failed persistent\"\nCONFAILG EQU   X'20'            Connector \"failing\"\nCONDISCN EQU   X'10'            Connector \"disconnecting\"\n         DS    XL3              Reserved\nTCD1CNRL EQU   *-TCD1CNR        Structure connector record length\n\nINFTCD2  DSECT                  Coupling facility information table\nTCD2SIZE DS    F                Total table length\nTCD2CFR# DS    F                Number of CF records (10 maximum)\nTCD2CFRL DS    F                CF record length\nTCD2CNRA EQU   *                CF records area (10 maximum)\n\nTCD2CFR  DSECT                  Coupling facility record\nTCD2CFNM DS    CL8              Coupling facility name\nTCD2FLG1 DS    XL1              Coupling facility status flag\nCFACTV   EQU   X'80'            Coupling facility \"active\"\nCFFAILED EQU   X'40'            Coupling facility \"failed\"\nCFPEND   EQU   X'20'            Coupling facility \"pending\"\nCFRECON  EQU   X'10'            Coupling facility \"reconcile\"\n         DS    XL3              Reserved\nTCD2POLN DS    CL8              Coupling facility policy name\nTCD2ASIZ DS    F                Allocated CF size in 1k blocks\nTCD2FSIZ DS    F                Free CF size in 1k blocks\nTCD2ACSP DS    F                Allocated control space in 1k blocks\nTCD2FCSP DS    F                Free control space in 1k blocks\nTCD2ADMP DS    F                Allocated dumping space in 1k blocks\nTCD2FDMP DS    F                Free dumping space in 1k blocks\nTCD2SYS# DS    F                Number of connected systems\nTCD2SYSA DS    32CL8            Connected systems name area\nTCD2SCAL DS    F                Number of allocated subchannels\nTCD2SCAV DS    F                Number of available subchannels\n*                               Number of subchannel records in TCD2SCA\nTCD2SCMX DS    F                Maximum number of subchannels that\n*                               could be used if available\nTCD2SCNA DS    F                Number of times a free subchannel\n*                               was not available for\n*                               synchronous immediate operations\nTCD2SCUN DS    F                Number of summed times for\n*                               unsuccessful operations\nTCD2STR# DS    F                Number of str records (255 maximum)\nTCD2SCA  EQU   *                Subchannel records area (255 maximum)\nTCD2STRA EQU   *                Structure records area (255 maximum)\n\nTCD2SC   DSECT                  Coupling facility subchannel record\nTCD2SC#  DS    H                Subchannel number\nTCD2SCD# DS    H                Subchannel device number\nTCD2SCST DS    XL2              Subchannel status (High-order byte)\nSCNOPR   EQU   X'80'            Subchannel not operational\nSCOPRNU  EQU   X'40'            Subchannel operational but not used\nSCOPRU   EQU   X'20'            Subchannel operational and used\n         DS    XL2              Reserved\nTCD2SCB  DS    F                Subchannel busy count\nTCD2SCPB DS    F                Subchannel all paths busy count\nTCD2SCU  DS    F                Subchannel utilization count\nTCD2SCL  EQU   *-TCD2SC         Coupling facility sc record length\n\nTCD2STR  DSECT                  Coupling facility structure record\nTCD2STRN DS    CL16             Structure name\nTCD2FLG2 DS    XL1              Structure status flag\nSTRACTV  EQU   X'80'            Structure \"active\"\nSTRFAIL  EQU   X'40'            Structure \"failed\"\nSTRRBOLD EQU   X'20'            Structure \"rebuild/old\"\nSTRRBNEW EQU   X'10'            Structure \"rebuild/new\"\nSTRTRANS EQU   X'08'            Structure \"transitional\"\n         DS    XL3              Reserved\nTCD2STRL EQU   *-TCD2STR        Coupling facility str record length\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMCFDOC": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98!_\\x00\\x981?\\x17Q\\x00L\\x00L\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-08-03T00:00:00", "modifydate": "1998-11-09T17:51:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "T$QGP75"}, "text": "IMCFLIST return field descriptions\n----------------------------------\n\n\nType 2 call (general coupling facility information)\n---------------------------------------------------\n\nTAB2CFR DSECT (from either IXCQUERY service/IXCYQUAA area\n               or IXLMG service/IXLYAMDA area)\n----------------------------------------------------------\nTAB2CFNM - Coupling facility name. (QUACFNAME)\nTAB2FLG1 - Coupling facility status flag. (QUACFSTATE1/UQACFSTATE2)\nCFACTV   - Coupling facility active.\nCFFAILED - Coupling facility failed. (QUACFSTFAILED)\nCFPEND   - Policy change pending which will delete this coupling\n           facility from the           structures are gone from this coupling fa\n           (QUACFSTDPEND)\nCFRECON  - The coupling facility to CFRM policy reconcile process is in\n           progress.  When this bit is on IXLCONNs to structures in\n           this coupling facilityare not permitted. (QUACFSTRECONCILE)\nTAB2POLN - Policy name. (QUACFPOLNAME)\nTAB2ASIZ - Total facility space (1k blocks). Facility space is made up\n           of free space, dump space and structure space.\n           (IXLYAMDCF_TS)\nTAB2FSIZ - Total free space (1k blocks).\n           Free space = free control space + free non-control space.\n           (IXLYAMDCF_FS)\nTAB2ACSP - Total allocated control space (1k blocks). Control space +\n           non-control space = total space. (IXLYAMDCF_TCS)\nTAB2FCSP - Total free control space (1k blocks). (IXLYAMDCF_FCS)\nTAB2ADMP - Total dumping space (1k blocks). (IXLYAMDCF_TDS)\nTAB2FDMP - Free dumping space (1k blocks). (IXLYAMDCF_FDS)\nTAB2SYS# - Number of systems connected to coupling facility. (QUACFSC#)\nTAB2SYSA - Connected systems name area. (QUACFSCNAME)\nTAB2SCAL - Count of number of subchannels allocated to this coupling\n           facility. (IXLYAMDCF_SUBCH_ALLOCATED)\nTAB2SCAV - Count of number of subchannels available for use.\n           (IXLYAMDCF_SUBCH_INUSE)\nTAB2SCMX - Count of total number of subchannels that could be used for\n           operations if available. (IXLYAMDCF_SUBCH_MAXLIMIT)\nTAB2SCNA - Count of times a free subchannel was not available for\n           synchronous immediate operation. (IXLYAMDCF_SUBCH_CONTENTION)\nTAB2SCUN - Count of number of summed times for unsuccessful operations.\n           (IXLYAMDCF_SUBCH_FAILEDOPTIMECOUNT)\nTAB2STR# - Number of structures in the coupling facility. (QUACFSTR#)\n\nTAB2SC DSECT (from IXLMG service/IXLYAMDA area)\n-----------------------------------------------\nTAB2SC# -  Subchannel number (IXLYAMDSC_SCNUMBER)\nTAB2SCD# - Subchannel device number (IXLYAMDSC_SCDEVICE)\nTAB2SCST - Subchannel status (IXLYAMDSC_SUBCH_STATUS)\nSCNOPR   - Subchannel not operational (IXLYAMDSC_NOTOPERATIONAL)\nSCPRNU   - Subchannel operational but not being used for operations.\n           (IXLYAMDSC_NOTINUSE)\nSCPRU    - Subchannel operational and being used for operations.\n           (IXLYAMDSC_ACTIVE)\nTAB2SCB  - Subchannel busy count (IXLYAMDSC_SUBCH_BUSY)\nTAB2SCPB - Subchannel all paths busy count (IXLYAMDSC_ALLPATHS_BUSY)\nTAB2SCU  - Subchannel utilization count - Number of times subchannel was\n           picked for an operation.\n           (IXLYAMDSC_UTILIZATION)\n\nTAB2STR DSECT (from IXCQUERY service/IXCYQUAA area)\n---------------------------------------------------\nTAB2STRN - Structure name. (QUACFSTRNAME)\nTAB2FLG2 - Structure allocation status and state.\n           (QUACFSTRFLG/QUACFSTRFLG2)\nSTRACTV  - Structure allocated and active. (QUACFSTRACT)\nSTRFAIL  - Structure failed. (QUACFSTRSTRFAIL)\nSTRRBOLD - Structure rebuild/old.  If IXLREBLD has been initiated.\n           (QUACFSTRREBLDOLD)\nSTRRBNEW - Structure rebuild/new.  If IXLREBLD has been initiated.\n           (QUACFSTRREBLDNEW)\nSTRTRANS - Structure in transitional or holding state, or being dumped.\n           (QUACFSTRTRAN/QUACFSTRHOLD/QUACFSTRDUMPTBL)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IMCFLIST": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x98!_\\x00\\x98$o\\x16\\x08\\x03\\x85\\x03\\xeb\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-08-03T00:00:00", "modifydate": "1998-09-03T16:08:00", "lines": 901, "newlines": 1003, "modlines": 0, "user": "T$QGP75"}, "text": "IMCFLIST CSECT\nIMCFLIST AMODE 31\nIMCFLIST RMODE ANY\n\n*********************************************************************\n*                                                                   *\n*        Function: This module invokes XES services to obtain       *\n*                  various coupling facility information.           *\n*                                                                   *\n*        Entry point : IMCFLIST                                     *\n*                                                                   *\n*        Input registers:                                           *\n*          R0: N/A                                                  *\n*          R1: Address of caller's parameter list pointer           *\n*          R2-12: N/A                                               *\n*          R13: Address of register save area                       *\n*          R14: Return address                                      *\n*          R15: Entry point address                                 *\n*                                                                   *\n*        Output registers:                                          *\n*          R0-14: Same as on entry                                  *\n*          R15: Return code                                         *\n*               0 - IMCFLIST completed successfully                 *\n*              12 - IMCFLIST parameter list error                   *\n*              16 - IMCFLIST internal error                         *\n*              20 - Structure not defined in CFRM policy            *\n*              24 - Error accessing or reading CFRM policy          *\n*              28 - No coupling facilities defined in CFRM policy   *\n*                                                                   *\n*        Register usage(internal):                                  *\n*          R0-11: Work registers                                    *\n*          R12: Base register                                       *\n*          R13: Address of workarea                                 *\n*          R14-15: Work and linkage registers                       *\n*                                                                   *\n*                                                                   *\n*        Upon invocation of this routine, the caller must pass      *\n*        the following parameter list:                              *\n*                                                                   *\n*        PARMLIST DS   0CL20                                        *\n*        PARM1    DS   CL16 (structure name or blank)               *\n*        PARM2    DS   A    (return information table address)      *\n*                                                                   *\n*        PARM1 is an input parameter and requests either            *\n*        general information about all coupling facilities in the   *\n*        sysplex or detailed information about a specified          *\n*        stucture.  If coupling facility information is requested,  *\n*        PARM1 must contain 16 blanks.  If structure information    *\n*        is requested, the structure name may be a maximum length   *\n*        of 16 and must be left left-justified and blank padded on  *\n*        the right.                                                 *\n*                                                                   *\n*        PARM2 is an output parameter and contains the address of   *\n*        the return information table that this routine acquires.   *\n*        Storage for the table is acquired in E(PVT), subpool 130,  *\n*        and the caller's psw key.  It is the caller's              *\n*        responsibility to free storage for the table when finished *\n*        with its use.  The format of the information table is      *\n*        as follows:                                                *\n*                                                                   *\n*        INFTCD1  DS    0D      Format 1 - structure request        *\n*        TCD1SIZE DS    F       Total table size                    *\n*        TCD1FLG1 DS    XL1     Structure type flag                 *\n*        LISTSTR  EQU   X'80'   List structure                      *\n*        LOCKSTR  EQU   X'40'   Lock structure                      *\n*        CACHESTR EQU   X'20'   Cache structure                     *\n*        UNKNWSTR EQU   X'10'   Unknown type (not allocated)        *\n*        TCD1FLG2 DS    XL1     Structure status flag               *\n*        STRALOC  EQU   X'80'   Structure \"allocated\"               *\n*        STRNALOC EQU   X'40'   Structure \"not allocated\"           *\n*                 DS    XL2     Reserved                            *\n*        TCD1CFNM DS    CL8     Structure coupling facility name    *\n*        TCD1CNNM DS    CL16    Connector name                      *\n*        TCD1SYSN DS    CL8     System name                         *\n*        TCD1JOBN DS    CL8     Connecting jobname                  *\n*        TCD1FLG3 DS    XL1     Connector status flag               *\n*        CONACTV  EQU   X'80'   Connector \"active\"                  *\n*        CONFAILP EQU   X'40'   Connector \"failed persistent\"       *\n*        CONFAILG EQU   X'20'   Connector \"failing\"                 *\n*        CONDISCN EQU   X'10'   Connector \"disconnecting\"           *\n*                 DS    XL3     Reserved                            *\n*        TCD1ASIZ DS    F       Allocated structure size 1k blocks  *\n*        TCD1USIZ DS    F       Used structure size 1k blocks       *\n*                               (list or lock, not valid for cache) *\n*                               (If TCD1USIZ=0, then < 1k)          *\n*        TCD1ELC  DS    F       # list elements or lock record data *\n*                               elements available or cache entry   *\n*                               count                               *\n*        TCD1ELU  DS    F       # list elements or lock record data *\n*                               elements used                       *\n*        TCD1ENTA DS    F       # list entries available            *\n*        TCD1ENTU DS    F       # list entries currently used       *\n*        TCD1LKTA DS    F       # lock table entries available      *\n*        TCD1LKTU DS    F       # lock table entries used           *\n*        TCD1LKCT DS    F       # total lock contention requests    *\n*        TCD1LKCF DS    F       # false lock contention requests    *\n*        TCD1DEC  DS    F       Cache directory entry count         *\n*        TCD1MXSC DS    XL1     Maximum cache storage class value   *\n*        TCD1MXCC DS    XL2     Maximum cache castout class value   *\n*        TCD1CNR# DS    F       Structure # connectors (32 maximum) *\n*        TCD1CNRA EQU   *       Connectors area (32 maximum)        *\n*                                                                   *\n*        INFTCD2  DS    0D   Format 2 - coupling facility request   *\n*        TCD2SIZE DS    F    Total table length                     *\n*        TCD2CFR# DS    F    Number of CF records (10 maximum)      *\n*        TCD2CFRL DS    F    CF record length                       *\n*        TCD2CNRA EQU   *    CF records area (10 maximum)           *\n*                                                                   *\n*        Note that PARM1 and PARM2 must both be provided.           *\n*                                                                   *\n*        Environment: Amode 31, rmode any, supervisor state,        *\n*                     psw key 0.                                    *\n*                                                                   *\n*                                                                   *\n*        Author: Bob Break                                          *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\n***********************************************************************\n*                                                                     *\n*        Initialization.                                              *\n*                                                                     *\n***********************************************************************\n\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n\n         USING PSA,0\nIMCF0000 BAKR  R14,0                    Save caller's environment\n         LR    R12,R15                  Set base register\n         USING IMCF0000,R12               and addressability\n         B     IMCF0001                 Branch around module identifier\n         DC    CL8'IMCFLIST'            Module name\n         DC    C'&SYSDATE'              Assembly date\n         DC    C'VERS01'                Version\nIMCF0001 DS    0H\n         MODESET MODE=SUP               Set supervisor state\n         IPK   0(0)                     Get caller's psw key\n         SPKA  0(0)                     Set psw key 0\n         LA    R0,WORKSIZE              Get workarea size\n         STORAGE OBTAIN,LENGTH=(R0),LOC=ANY\n         LR    R3,R1                    Save workarea pointer\n         LR    R14,R3                   Get pointer into work register\n         LA    R15,WORKSIZE             Set move to length\n         XR    R1,R1                    Set move from length and pad\n         MVCL  R14,R0                   Clear workarea\n         ST    R3,8(,R13)               Chain save areas\n         ST    R13,4(,R3)               *\n         LR    R13,R3                   Set workarea pointer\n         USING WORKAREA,R13\n         EREG  R0,R1                    Restore entry registers 0-1\n         L     R1,0(,R1)                Point to input parm list\n         ST    R1,PARMPTR               Save parm list pointer\n         STC   R2,CALLKEY               Save caller's psw key\n\n***********************************************************************\n*                                                                     *\n*        Extract the input parameters.                                *\n*                                                                     *\n***********************************************************************\n\nIMCF0010 CLC   0(16,R1),=CL16' '         CF information request?\n         BE    IMCF0011                  Yes - branch, continue\n         MVC   STRNAME,0(R1)             Save structure name\n         OC    STRNAME,=CL16' '          Assure str name is upper case\n         L     R15,=A(IMCF0100)          Get str processing address\n         BALR  R14,R15                   Branch - processs str request\n         B     IMCFRET                   Branch - return\nIMCF0011 L     R15,=A(IMCF0500)          Get CF processing address\n         BALR  R14,R15                   Branch - process cf request\n         B     IMCFRET                   Branch - return\n\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n\nIMCFRET  L     R2,RETCODE                Get return code\n         LA    R0,WORKSIZE               Get workarea size\n         LR    R1,R13                    Get workarea pointer\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)\n         LR    R15,R2                    Set return code\n         PR                              Return to caller\n\n         LTORG\n\n\n*********************************************************************\n*********************************************************************\n*                                                                   *\n*        IMCF0100 - Invoke XCF/XES services to obtain information   *\n*                   about the specified structure.                  *\n*                                                                   *\n*        Register usage:                                            *\n*                                                                   *\n*        Input           Output           Internal                  *\n*        -----           ------           --------                  *\n* R0-11  N/A             Unchanged        Work                      *\n* R12    N/A             Unchanged        Base register             *\n* R13    Workarea        Unchanged        Workarea                  *\n* R14    BALR address    Return address   Work                      *\n* R15    N/A             Unchanged        Work                      *\n*                                                                   *\n*        Environment - Internal IMCFLIST routine.  Invoked by BALR. *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\nIMCF0100 DS    0H\n         BAKR  R14,0                Save caller's environment\n         LR    R12,R15              Set up base register\n         USING IMCF0100,R12           and addressability\n         L     R1,=F'4096'          Get answer area length\nIMCF0101 ST    R1,ANSWERL1          Set answer area length\n         STORAGE OBTAIN,LENGTH=(R1),BNDRY=PAGE,LOC=ANY\n         ST    R1,ANSWERA1          Save answer area address\n         LR    R2,R1                Set area pointer in work register\n         USING QUAHDR,R2\n         MVC   IXCQWRK(IXCQLL1),IXCQLST1  Move IXCQUERY parm list\n         IXCQUERY REQINFO=STR,      Request structure information      X\n               STRNAME=STRNAME,     Structure name                     X\n               ANSAREA=(R2),        Answer area                        X\n               ANSLEN=ANSWERL1,     Answer area length                 X\n               MF=(E,IXCQWRK)\n         LTR   R15,R15              IXCQUERY successful?\n         BZ    IMCF0140             Yes - branch, continue\n         C     R15,=F'4'            IXCQUERY rc=4?\n         BNE   IMCF0110             No - branch, continue\n         CLC   QUAHTLEN,ANSWERL1    Answer area large enough?\n         BNH   IMCF0130             Branch - internal error\n         L     R3,QUAHTLEN          Get required answer area length\n         L     R0,ANSWERL1          Get answer area length\n         L     R1,ANSWERA1          Get answer area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0)\n         LR    R1,R3                Reset required answer area length\n         B     IMCF0101             Loop back to issue IXCQUERY again\nIMCF0110 C     R15,=F'8'            IXCQUERY rc=8?\n         BNE   IMCF0120             No - branch, continue\n         LA    R1,QUAARSNSTRNOTFOUND  Was specified structure name\n         CR    R0,R1                    defined in active CFRM policy?\n         BNE   IMCF0130             No - branch, internal error\n         MVC   RETCODE,=F'20'       Set error return code\n         B     IMCF0160             Branch - continue\nIMCF0120 C     R15,=F'12'           IXCQUERY rc=12?\n         BNE   IMCF0130             No - branch, continue\n         LA    R1,QUAARSNNOCFRMDSN  Get system access to CFRM code\n         CR    R0,R1                System able to access CFRM?\n         BNE   IMCF0121             Yes - branch, continue\n         MVC   RETCODE,=F'24'       Set error return code\n         B     IMCF0160             Branch - continue\nIMCF0121 LA    R1,QUAARSNNOCFRMPOL  Get active CFRM policy code\n         CR    R0,R1                Is there an active CFRM policy?\n         BNE   IMCF0122             Yes - branch, continue\n         MVC   RETCODE,=F'24'       Set error return code\n         B     IMCF0160             Branch - continue\nIMCF0122 LA    R1,QUAARSNFAILCFRMREAD  Get CFRM read failure code\n         CR    R0,R1                CFRM read fail?\n         BNE   IMCF0130             No - branch, continue\n         MVC   RETCODE,=F'24'       Set error return code\n         B     IMCF0160             Branch - continue\nIMCF0130 MVC   RETCODE,=F'16'       Set error return code\n         B     IMCF0160             Branch - continue\nIMCF0140 ICM   R15,15,QUAH#REC      Get # structure records\n         BZ    IMCF0142             No records - branch\n         L     R1,QUAHSGOF          Get first structure record offset\n         DROP  R2                   QUAHDR\n         ALR   R2,R1                Point to first structure record\n         USING QUASTR,R2\nIMCF0141 CLC   QUASTRNAME,STRNAME   Structure name match?\n         BE    IMCF0150             Yes - branch, continue\n         TM    QUASTRTYP,QUATYPSTR_LAST  Last structure record?\n         BO    IMCF0142             Yes - branch, error\n         LH    R1,QUASTRLEN         Get structure record length\n         ALR   R2,R1                Point to next structure record\n         B     IMCF0141             Loop back to check next str rec\nIMCF0142 MVC   RETCODE,=F'16'       Set error return code\n         B     IMCF0160             Branch - continue\nIMCF0150 MVC   STRSTAT,QUASTRSTATE  Save structure state flags\n         MVC   STRINHDW,QUASTRINHDW  Save CF structure state flag\n         TM    QUASTRINHDW,QUASTRINHDWON  Structure allocated?\n         BZ    IMCF0160             No - branch, continue\n         ICM   R15,15,QUASTRCF#     Get # coupling facility records\n         BZ    IMCF0160             Branch - no CF records\n         L     R3,QUASTRCFO         Get first CF record offset\n         ALR   R3,R2                Point to first CF record\n         USING QUASTRCF,R3\nIMCF0151 TM    QUASTRCFFLG,QUASTRCFACT  Structure active in this CF?\n         BZ    IMCF0152             No - branch, continue\n         MVC   STRCFNAM,QUASTRCFNAME  Save structure CF name\n         B     IMCF0153             Branch - continue\n         TM    QUASTRCFTYP,QUATYPSTRCF_LAST  Last CF record?\n         BO    IMCF0160             Yes - branch, continue\nIMCF0152 LH    R1,QUASTRCFLEN       Get CF record length\n         ALR   R3,R1                Point to next CF record\n         B     IMCF0151             Loop back to check next CF record\n         DROP  R3                   QUASTRCF\nIMCF0153 ICM   R15,15,QUASTRUSER#   Get # structure connector records\n         BZ    IMCF0160             Branch - no connector records\n         MVC   STRCN#,QUASTRUSER#   Set #  connectors\n         L     R3,QUASTRUSERO       Get first connector record offset\n         ALR   R3,R2                Point to first connector record\n         USING QUASTRUSER,R3\n         LA    R15,STRCONNR         Point to connector records area\n         USING STRCONN,R15\nIMCF0154 MVC   STRCNNAM,QUASTRUSERCNAME  Save connect name\n         MVC   STRCNSYS,QUASTRUSERSYS  Save connect system name\n         MVC   STRCNJOB,QUASTRUSERJOB  Save connect jobname\n         MVC   STRCNFL1,QUASTRUSERFLG1  Save connect flag # 1\n         MVC   STRCNFL2,QUASTRUSERFLG2  Save connect flag # 1\n         TM    QUASTRUSERTYP,QUATYPSTRU_LAST  Last connector record?\n         BO    IMCF0160             Yes - branch, continue\nIMCF0155 LH    R1,QUASTRUSERLEN     Get connector record length\n         ALR   R3,R1                Point to next connector record\n         LA    R15,STRCONNL(,R15)   Point to next record save area\n         B     IMCF0154             Loop back to check next record\n         DROP  R15                  STRCONN\n         DROP  R3                   QUASTRUSER\nIMCF0160 L     R0,ANSWERL1          Get answer area length\n         L     R1,ANSWERA1          Get answer area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0)\n         DROP  R2                   QUASTR\n         CLC   RETCODE,=F'0'        Any errors previously detected?\n         BNE   IMCF0499             Branch - return\n         TM    STRINHDW,QUASTRINHDWON  Structure allocated?\n         BZ    IMCF0190             No - branch, continue\nIMCF0170 L     R1,=F'4096'          Get data area length\nIMCF0171 ST    R1,DATAL1            Set data area length\n         STORAGE OBTAIN,LENGTH=(R1),BNDRY=PAGE,SP=253,LOC=ANY\n         ST    R1,DATAA1            Save data area address\n         LR    R2,R1                Set area pointer in work register\n         USING IXLYAMDAREA,R2\n         MVC   IXLMGWRK(IXLMGLL1),IXLMGLS1  Move IXLMG parm list\n         IXLMG CFNAME=STRCFNAM,     Coupling facility name             X\n               DATAAREA=(R2),       Data area                          X\n               DATALEN=DATAL1,      Data area length                   X\n               MF=(E,IXLMGWRK)\n         LTR   R15,R15              IXLMG successful?\n         BZ    IMCF0172             Yes - branch, continue\n         C     R15,=F'4'            IXLMG rc=4?\n         BNE   IMCF0179             No - branch, internal error\n         CLC   IXLYAMDAREA_TLEN,DATAL1  Data area large enough?\n         BNH   IMCF0179             Yes - branch, internal error\n         L     R3,IXLYAMDAREA_TLEN  Get required data area length\n         L     R0,DATAL1            Get data area length\n         L     R1,DATAA1            Get data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         LR    R1,R3                Reset required data area length\n         B     IMCF0171             Loop back to issue IXLMG again\nIMCF0172 ICM   R3,15,IXLYAMDAREA_CFENT@  Get CF entry address\n         BZ    IMCF0179             Branch - internal error\n         USING IXLYAMDCF,R3\n         ICM   R4,15,IXLYAMDCF_STR@  Get first structure record\n         BZ    IMCF0179             Branch - internal error\n         DROP  R3                   IXLYAMDCF\n         USING IXLYAMDHD,R4\nIMCF0173 TM    IXLYAMDHD_TYPE,IXLYAMDA_TYPESTRC  Cache structure entry?\n         BO    IMCF0176             Yes - branch, continue\n         PUSH  USING                Save IXLYAMDHD addressability\n         USING IXLYAMDSTRL,R4\n         CLC   IXLYAMDSTRL_STRNAME,STRNAME  Structure name match?\n         BNE   IMCF0178             No - branch, get next entry\n         TM    IXLYAMDSTRL_TTY,IXLYAMDA_LOCK  Lock structure entry?\n         BNO   IMCF0174             No - branch, must be list entry\n         OI    STRTYPE,LOCKSTR      Set lock structure indicator\n         MVC   STR#ELA,IXLYAMDSTRL_MLSEC  Set # lock elements available\n         MVC   STR#ELU,IXLYAMDSTRL_LSEC  Set # lock elements used\n         MVC   STRLKCHR,IXLYAMDSTRL_LTECH  Set lock table entry char.\n         MVC   STR#LKTA,IXLYAMDSTRL_NLE  Set # lock table entries avail\n         MVC   STR#LKTU,IXLYAMDSTRL_NLTEC Set # lock table entries used\n         MVC   STR#LKCT,IXLYAMDSTRL_CONTCT Set total contention req. #\n         MVC   STR#LKCF,IXLYAMDSTRL_FCONTCT Set false contention req. #\n         B     IMCF0175             Branch - continue\nIMCF0174 OI    STRTYPE,LISTSTR      Set list structure indicator\n         MVC   STRDECHR,IXLYAMDSTRL_LELX  Set list element char.\n         MVC   STR#ELU,IXLYAMDSTRL_LSELC  Set # list elements in use\n         MVC   STR#ELA,IXLYAMDSTRL_MLSELC Set # list elements available\n         MVC   STR#ENTU,IXLYAMDSTRL_LSEC  Set # list entries in use\n         MVC   STR#ENTA,IXLYAMDSTRL_MLSEC  Set # list entries available\nIMCF0175 MVC   STRDFLAG,IXLYAMDSTRL_DATAFLAGS  Set str control flag\n         MVC   STRASIZE,IXLYAMDSTRL_SS  Set allocated structure size\n         MVC   STRCSIZE,IXLYAMDSTRL_MRSS  Set structure control size\n         MVC   STRDSIZE,IXLYAMDSTRL_DTS  Set structure dump table size\n         MVC   STRSTFLG,IXLYAMDSTRL_STFLAGS  Set structure status flag\n         B     IMCF0180             Branch - continue\n         DROP  R4                   IXLYAMDSTRL\n         USING IXLYAMDSTRC,R4\nIMCF0176 CLC   IXLYAMDSTRC_STRNAME,STRNAME  Structure name match?\n         BNE   IMCF0178             No - branch, get next entry\n         MVC   STRDFLAG,IXLYAMDSTRC_DATAFLAGS  Set str control flag\n         OI    STRTYPE,CACHESTR     Set cache structure indicator\n         MVC   STRDECHR,IXLYAMDSTRC_DAEX  Set data element char.\n         MVC   STRSCMAX,IXLYAMDSTRC_MSCV  Set max. storage class value\n         MVC   STRCCMAX,IXLYAMDSTRC_MCCV  Set max. castout class value\n         MVC   STR#ELC,IXLYAMDSTRC_TDAEC  Set data element count\n         MVC   STR#DEC,IXLYAMDSTRC_TDEC  Set directory entry count\n         MVC   STRASIZE,IXLYAMDSTRC_SS  Set allocated structure size\n         MVC   STRCSIZE,IXLYAMDSTRC_MRSS  Set structure control size\n         MVC   STRDSIZE,IXLYAMDSTRC_DTS  Set structure dump table size\n         MVC   STRSTFLG,IXLYAMDSTRC_BITS Set structure status bits\n         B     IMCF0180             Branch - continue\n         DROP  R4                   IXLYAMDSTRC\n         POP   USING                Restore IXLYAMDHD addressability\nIMCF0178 ICM   R4,15,IXLYAMDHD_NEXT  Get next structure entry address\n         BNZ   IMCF0173             Loop back to check next structure\nIMCF0179 MVC   RETCODE,=F'16'       Set error return code\n         DROP  R4                   IXLYAMDHD\nIMCF0180 L     R0,DATAL1            Get data area length\n         L     R1,DATAA1            Get data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         DROP  R2                   IXLYAMDAREA\n         CLC   RETCODE,=F'0'        Any errors detected so far?\n         BNE   IMCF0499             Branch - return\nIMCF0190 LA    R0,(TCD1CNRA-INFTCD1)  Calculate partial INFTCD1 length\n         LA    R1,TCD1CNRL          Get connector record length\n         MH    R1,=H'32'            Times maximum number connectors\n         ALR   R0,R1                Calculate total INFTCD1 length\n         LR    R3,R0                Save INFTCD1 length\n         IC    R5,CALLKEY           Get caller's psw key\n         STORAGE OBTAIN,LENGTH=(R0),SP=130,KEY=(R5),LOC=ANY\n         ST    R1,INFTABP           Save table pointer\n         LR    R11,R1               Set table pointer\n         LR    R14,R1               Get pointer into work register\n         LR    R15,R3               Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear table\n         USING INFTCD1,R11\n         ST    R3,TCD1SIZE          Set INFTCD1 size in table\n         L     R1,PARMPTR           Get input parameter list pointer\n         ST    R11,16(,R1)          Set table address for caller\n         TM    STRINHDW,QUASTRINHDWON  Structure allocated?\n         BO    IMCF0191             Yes - branch, continue\n         OI    TCD1FLG1,UNKNWSTR    Set unknown structure type flag\n         MVC   TCD1CFNM,=8C'*'      Set unknown CF name\n         OI    TCD1FLG2,STRNALOC    Set \"not allocated\" flag\n         B     IMCF0192             Branch - continue\nIMCF0191 MVC   TCD1FLG1,STRTYPE     Set structure type flag\n         MVC   TCD1CFNM,STRCFNAM    Set CF name\n         OI    TCD1FLG2,STRALOC     Set \"allocated\" flag\n         MVC   TCD1CNR#,STRCN#      Set # connectors\nIMCF0192 CLC   STRCN#,=F'0'         Any connectors?\n         BZ    IMCF0200             No - branch, continue\n         LA    R2,STRCONNR          Point to connector records area\n         USING STRCONN,R2\n         L     R3,STRCN#            Get # connector records\n         LA    R10,TCD1CNRA         Point to connector records area\n         USING TCD1CNR,R10\nIMCF0193 MVC   TCD1CNNM,STRCNNAM    Set connection name\n         MVC   TCD1SYSN,STRCNSYS    Set connection system\n         MVC   TCD1JOBN,STRCNJOB    Set connection jobname\n         TM    STRCNFL1,QUASTRUSERACT  Is connection active?\n         BZ    IMCF0194             No - branch, continue\n         OI    TCD1FLG3,CONACTV     Set active flag\n         B     IMCF0199             Branch - continue\nIMCF0194 TM    STRCNFL1,QUASTRUSERFAIL  Failed persistent?\n         BZ    IMCF0195             No - branch, continue\n         OI    TCD1FLG3,CONFAILP    Set failed persistent flag\n         B     IMCF0199             Branch - continue\nIMCF0195 TM    STRCNFL1,QUASTRUSERTERM  Connection failing?\n         BZ    IMCF0196             No - branch, continue\n         OI    TCD1FLG3,CONFAILG    Set failing flag\n         B     IMCF0199             Branch - continue\nIMCF0196 TM    STRCNFL1,QUASTRUSERDISC  Connection disconnecting?\n         BZ    IMCF0199             No - branch, continue\n         OI    TCD1FLG3,CONDISCN    Set disconnecting flag\nIMCF0199 LA    R2,STRCONNL(,R2)     Point to next connector area\n         LA    R10,TCD1CNRL(,R10)   Bump to next connector record\n         BCT   R3,IMCF0193          Loop back for next record\n         DROP  R2,R10               STRCONN, TCD1CNR\nIMCF0200 TM    STRINHDW,QUASTRINHDWON  Structure allocated?\n         BZ    IMCF0499             No - branch, continue\n         L     R1,STRASIZE          Get allocated size (4k blocks)\n         SLL   R1,2                 Convert size to 1k blocks\n         ST    R1,TCD1ASIZ          Set allocated structure size\n         TM    STRTYPE,LOCKSTR      Lock structure?\n         BO    IMCF0210             Yes - branch, continue\n         TM    STRTYPE,CACHESTR     Cache structure?\n         BO    IMCF0250             Yes - branch, continue\n         TM    STRDFLAG,IXLYAMDSTRL_VALID  List control info valid?\n         BZ    IMCF0499             No - branch, return\n         LA    R15,1                Init element size multiplier = 1\n         XR    R1,R1                Clear R1 for ICM\n         ICM   R1,1,STRDECHR        Get list characteristic\n         BZ    IMCF0202             Branch - characteristic = zero\nIMCF0201 MH    R15,=H'2'            Reset element size multiplier\n         BCT   R1,IMCF0201          Loop back for next power of 2\nIMCF0202 MH    R15,=H'256'          Calculate element size\n         L     R1,STR#ELU           Get count of used elements\n         XR    R0,R0                Clear R0 for multiply\n         MR    R0,R15               Calculate used storage (in bytes)\n         TM    STRSTFLG,IXLYAMDSTRL_ST_AI  Adjunct areas present?\n         BZ    IMCF0203             No - branch, continue\n         L     R15,STR#ENTU         Get count of used entries\n         MH    R15,=H'64'           Multiply by adjunct area size\n         ALR   R1,R15               Add to total\nIMCF0203 XR    R0,R0                Clear R0 for divide\n         D     R0,=F'1024'          Convert to 1k blocks\n         TM    STRDFLAG,IXLYAMDSTRL_DTSVALID  Dump table info valid?\n         BZ    IMCF0204             No - branch, continue\n         L     R15,STRDSIZE         Get dump table size (4k blocks)\n         MH    R15,=H'4'            Convert to 1k blocks\n         ALR   R1,R15               Add dump space to total used\nIMCF0204 ST    R1,TCD1USIZ          Set used structure size\nIMCF0210 TM    STRTYPE,LOCKSTR      Lock structure?\n         BO    IMCF0220             Yes - branch, continue\n         MVC   TCD1ELC,STR#ELA      Set # available list elements\n         MVC   TCD1ELU,STR#ELU      Set # used list elements\n         MVC   TCD1ENTA,STR#ENTA    Set # available list entries\n         MVC   TCD1ENTU,STR#ENTU    Set # used list entries\n         B     IMCF0499             Branch - return\nIMCF0220 MVC   TCD1LKTA,STR#LKTA    Set # available lock table entries\n         MVC   TCD1LKTU,STR#LKTU    Set # used lock table entries\n         MVC   TCD1ELC,STR#ELA      Set # available\n*                                   lock record data elements\n         MVC   TCD1ELU,STR#ELU      Set # used\n*                                   lock record data elements\n         MVC   TCD1LKCT,STR#LKCT    Set # lock table\n*                                   total contention requests\n         MVC   TCD1LKCF,STR#LKCF    Set # lock table\n*                                   false contention requests\n         B     IMCF0499             Branch - return\nIMCF0250 TM    STRDFLAG,IXLYAMDSTRC_VALID  Cache control info valid?\n         BZ    IMCF0499             No - branch, return\n         MVC   TCD1ELC,STR#ELC      Set data element count\n         MVC   TCD1DEC,STR#DEC      Set directory entry count\n         MVC   TCD1MXSC,STRSCMAX    Set max. number of storage classes\n         MVC   TCD1MXCC,STRCCMAX    Set max. number of castout classes\n         B     IMCF0499             Branch - return\n\nIMCF0499 PR                         Restore environment & return\n\n         DROP  R11,R12              INFTCD1, IMCF0100 base\n\n         IXCQUERY MF=(L,IXCQLST1)    IXCQUERY parm list\nIXCQLL1  EQU   *-IXCQLST1\n\n         IXLMG MF=(L,IXLMGLS1)       IXLMG parm list\nIXLMGLL1 EQU   *-IXLMGLS1\n\n\n*********************************************************************\n*********************************************************************\n*                                                                   *\n*        IMCF0500 - Invoke XCF/XES services to obtain coupling      *\n*                   facility information.                           *\n*                                                                   *\n*        Register usage:                                            *\n*                                                                   *\n*        Input           Output           Internal                  *\n*        -----           ------           --------                  *\n* R0-11  N/A             Unchanged        Work                      *\n* R12    N/A             Unchanged        Base register             *\n* R13    Workarea        Unchanged        Workarea                  *\n* R14    BALR address    Return address   Work                      *\n* R15    N/A             Unchanged        Work                      *\n*                                                                   *\n*        Environment - Internal IMCFLIST routine.  Invoked by BALR. *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\nIMCF0500 DS    0H\n         BAKR  R14,0                Save caller's environment\n         LR    R12,R15              Set up base register\n         USING IMCF0500,R12           and addressability\n         L     R1,=F'4096'          Get answer area length\nIMCF0501 ST    R1,ANSWERL1          Set answer area length\n         STORAGE OBTAIN,LENGTH=(R1),BNDRY=PAGE,LOC=ANY\n         ST    R1,ANSWERA1          Save answer area address\n         LR    R2,R1                Set area pointer in work register\n         USING QUAHDR,R2\n         MVC   IXCQWRK(IXCQLL2),IXCQLST2  Move IXCQUERY parm list\n         IXCQUERY REQINFO=CF_ALLDATA,  Request coupling facility info  X\n               ANSAREA=(R2),        Answer area                        X\n               ANSLEN=ANSWERL1,     Answer area length                 X\n               MF=(E,IXCQWRK)\n         LTR   R15,R15              IXCQUERY successful?\n         BZ    IMCF0520             Yes - branch, continue\n         C     R15,=F'4'            IXCQUERY rc=4?\n         BNE   IMCF0510             No - branch, continue\n         CLC   QUAHTLEN,ANSWERL1    Answer area large enough?\n         BNH   IMCF0513             Branch - internal error\n         L     R3,QUAHTLEN          Get required answer area length\n         L     R0,ANSWERL1          Get answer area length\n         L     R1,ANSWERA1          Get answer area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0)\n         LR    R1,R3                Reset required answer area length\n         B     IMCF0501             Loop back to issue IXCQUERY again\nIMCF0510 C     R15,=F'8'            IXCQUERY rc=8?\n         BE    IMCF0513             Yes - branch, continue\n         C     R15,=F'12'           IXCQUERY rc=12?\n         BNE   IMCF0513             No - branch, continue\n         LA    R1,QUAARSNNOCFRMDSN  Get system access to CFRM code\n         CR    R0,R1                System able to access CFRM?\n         BNE   IMCF0511             Yes - branch, continue\n         MVC   RETCODE,=F'24'       Set error return code\n         B     IMCF0590             Branch - continue\nIMCF0511 LA    R1,QUAARSNNOCFRMPOL  Get active CFRM policy code\n         CR    R0,R1                Is there an active CFRM policy?\n         BNE   IMCF0512             Yes - branch, continue\n         MVC   RETCODE,=F'24'       Set error return code\n         B     IMCF0590             Branch - continue\nIMCF0512 LA    R1,QUAARSNFAILCFRMREAD  Get CFRM read failure code\n         CR    R0,R1                CFRM read fail?\n         BNE   IMCF0513             No - branch, continue\n         MVC   RETCODE,=F'24'       Set error return code\n         B     IMCF0590             Branch - continue\nIMCF0513 MVC   RETCODE,=F'16'       Set error return code\n         B     IMCF0590             Branch - continue\nIMCF0520 ICM   R15,15,QUAH#REC      Get # coupling facility records\n         BNZ   IMCF0521             Branch - continue\n         MVC   RETCODE,=F'28'       Set error return code\n         B     IMCF0590             Branch - continue\nIMCF0521 LA    R0,(TCD2SCA-TCD2CFR)  Calculate partial CF record len\n         LA    R1,TCD2SCL           Get subchannel record length\n         MH    R1,=H'255'           Times maximum number subchannels\n         ALR   R0,R1                Add to CF record length\n         LA    R1,TCD2STRL          Get structure record length\n         MH    R1,=H'255'           Times maximum number structures\n         ALR   R0,R1                Add to CF record length\n         LR    R3,R0                Save CF record length\n         LA    R0,(TCD2CNRA-INFTCD2)  Calculate partial INFTCD2 length\n         LA    R15,10               Get maximum number of CFs\n         XR    R14,R14              Calculate CF records area length\n         MR    R14,R3               *\n         ALR   R0,R15               Calculate total INFTCD2 length\n         LR    R4,R0                Save INFTCD2 length\n         IC    R5,CALLKEY           Get caller's psw key\n         STORAGE OBTAIN,LENGTH=(R0),SP=130,KEY=(R5),LOC=ANY\n         ST    R1,INFTABP           Save table pointer\n         LR    R11,R1               Set table pointer\n         LR    R14,R1               Get pointer into work register\n         LR    R15,R4               Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear table\n         USING INFTCD2,R11\n         ST    R4,TCD2SIZE          Set INFTCD2 size in table\n         ST    R3,TCD2CFRL          Set CF record length\n         L     R1,PARMPTR           Get input parameter list pointer\n         ST    R11,16(,R1)          Set table address for caller\nIMCF0530 MVC   TCD2CFR#,QUAH#REC    Set # coupling facility records\n         L     R1,QUAHSGOF          Get first CR record offset\n         ALR   R2,R1                Point to first CF record\n         DROP  R2                   QUAHDR\n         USING QUACF,R2\n         LA    R10,TCD2CNRA         Point to CF records area\n         USING TCD2CFR,R10\nIMCF0531 MVC   TCD2CFNM,QUACFNAME   Set CF name\n         MVC   TCD2POLN,QUACFPOLNAME  Set policy name\n         TM    QUACFSTATE2,QUACFSTFAILED  CF state = failed?\n         BZ    IMCF0532             No - branch, continue\n         OI    TCD2FLG1,CFFAILED    Set \"failed\" flag\n         B     IMCF0540             Branch - continue\nIMCF0532 TM    QUACFSTATE1,QUACFSTDPEND  CF state = pending?\n         BZ    IMCF0533             No - branch, continue\n         OI    TCD2FLG1,CFPEND      Set \"pending\" flag\n         B     IMCF0540             Branch - continue\nIMCF0533 TM    QUACFSTATE2,QUACFSTRECONCILE CF state = reconcile?\n         BZ    IMCF0534             No - branch, continue\n         OI    TCD2FLG1,CFRECON     Set \"reconcile\" flag\n         B     IMCF0540             Branch - continue\nIMCF0534 OI    TCD2FLG1,CFACTV      Set \"active\" flag\nIMCF0540 ICM   R15,15,QUACFSC#      Get # systems connected records\n         BZ    IMCF0550             Branch - no connected systems\n         MVC   TCD2SYS#,QUACFSC#    Set # connected systems\n         LA    R9,TCD2SYSA          Point to connected systems area\n         L     R3,QUACFSCO          Get first system record offset\n         ALR   R3,R2                Point to first system record\n         USING QUACFSC,R3\nIMCF0541 MVC   0(8,R9),QUACFSCNAME  Set system name\n         TM    QUACFSCTYP,QUATYPCFSC_LAST  Last system record?\n         BO    IMCF0550             Yes - branch, continue\n         LH    R1,QUACFSCLEN        Get system record length\n         ALR   R3,R1                Point to next system record\n         LA    R9,8(,R9)            Point to next system entry\n         B     IMCF0541             Loop back for next system record\n         DROP  R3                   QUACFSC\nIMCF0550 ICM   R15,15,QUACFSTR#     Get # structure records\n         BZ    IMCF0560             Branch - no structure records\n         MVC   TCD2STR#,QUACFSTR#   Set # structures\n         LA    R9,TCD2SCA           Point to subchannels area\n         LA    R1,TCD2SCL           Get subchannel record length\n         MH    R1,=H'255'           Times maximum number subchannels\n         ALR   R9,R1                Point to structures area\n         USING TCD2STR,R9\nIMCF0551 L     R3,QUACFSTRO         Get first structure record offset\n         ALR   R3,R2                Point to first structure record\n         USING QUACFSTR,R3\nIMCF0552 MVC   TCD2STRN,QUACFSTRNAME  Set structure name\n         TM    QUACFSTRFLG,QUACFSTRACT  Structure active?\n         BZ    IMCF0553             No - branch, continue\n         OI    TCD2FLG2,STRACTV     Set \"active\" flag\n         B     IMCF0557             Branch - continue\nIMCF0553 TM    QUACFSTRFLG2,QUACFSTRSTRFAIL  Structure failed?\n         BZ    IMCF0554             No - branch, continue\n         OI    TCD2FLG2,STRFAIL     Set \"failed\" flag\n         B     IMCF0557             Branch - continue\nIMCF0554 TM    QUACFSTRFLG,QUACFSTRREBLDOLD  Structure rebuild/old?\n         BZ    IMCF0555             No - branch, continue\n         OI    TCD2FLG2,STRRBOLD    Set \"rebuild/old\" flag\n         B     IMCF0557             Branch - continue\nIMCF0555 TM    QUACFSTRFLG,QUACFSTRREBLDNEW  Structure rebuild/new?\n         BZ    IMCF0556             No - branch, continue\n         OI    TCD2FLG2,STRRBNEW    Set \"rebuild/new\" flag\n         B     IMCF0557             Branch - continue\nIMCF0556 TM    QUACFSTRFLG,QUACFSTRTRAN+QUACFSTRHOLD+QUACFSTRDUMPTBL\n         BZ    IMCF0557             No - branch, continue\n         OI    TCD2FLG2,STRTRANS    Set \"transitional\" flag\nIMCF0557 TM    QUACFSTRTYP,QUATYPCFSTR_LAST  Last structure record?\n         BO    IMCF0560             Yes - branch, continue\n         LH    R1,QUACFSTRLEN       Get structure record length\n         ALR   R3,R1                Point to next structure record\n         LA    R9,TCD2STRL(,R9)     Point to next structure entry\n         B     IMCF0552             Loop back for next structure record\n         DROP  R3,R9                QUACFSTR, TCD2STR\nIMCF0560 L     R1,=F'4096'          Get data area length\nIMCF0561 ST    R1,DATAL1            Set data area length\n         STORAGE OBTAIN,LENGTH=(R1),BNDRY=PAGE,SP=253,LOC=ANY\n         ST    R1,DATAA1            Save data area address\n         LR    R4,R1                Set area pointer in work register\n         USING IXLYAMDAREA,R4\n         MVC   IXLMGWRK(IXLMGLL2),IXLMGLS2  Move IXLMG parm list\n         IXLMG CFNAME=QUACFNAME,    Coupling facility name             X\n               DATAAREA=(R4),       Data area                          X\n               DATALEN=DATAL1,      Data area length                   X\n               MF=(E,IXLMGWRK)\n         LTR   R15,R15              IXLMG successful?\n         BZ    IMCF0563             Yes - branch, continue\n         C     R15,=F'4'            IXLMG rc=4?\n         BE    IMCF0562             Yes - branch, continue\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMCF0569             Branch - return\nIMCF0562 L     R3,IXLYAMDAREA_TLEN  Get required data area length\n         L     R0,DATAL1            Get data area length\n         L     R1,DATAA1            Get data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         LR    R1,R3                Reset required data area length\n         B     IMCF0561             Loop back to issue IXLMG again\nIMCF0563 ICM   R4,15,IXLYAMDAREA_CFENT@  Get CF entry address\n         DROP  R4                   IXLYAMDAREA\n         USING IXLYAMDCF,R4\n         L     R1,IXLYAMDCF_TS      Get total space (4k blocks)\n         SLL   R1,2                 Convert space to 1k blocks\n         ST    R1,TCD2ASIZ          Set allocated CF size\n         L     R1,IXLYAMDCF_FS      Get total free space (4k blocks)\n         SLL   R1,2                 Convert space to 1k blocks\n         ST    R1,TCD2FSIZ          Set free CF size\n         L     R1,IXLYAMDCF_TCS     Get total control space (4k blocks)\n         SLL   R1,2                 Convert space to 1k blocks\n         ST    R1,TCD2ACSP          Set allocated CF control space\n         L     R1,IXLYAMDCF_FCS     Get total free cntl space (4k blks)\n         SLL   R1,2                 Convert space to 1k blocks\n         ST    R1,TCD2FCSP          Set free CF control space\n         L     R1,IXLYAMDCF_TDS     Get total dumping space (4k blks)\n         SLL   R1,2                 Convert space to 1k blocks\n         ST    R1,TCD2ADMP          Set allocated CF dumping space\n         L     R1,IXLYAMDCF_FDS     Get free dumping space (4k blks)\n         SLL   R1,2                 Convert space to 1k blocks\n         ST    R1,TCD2FDMP          Set free CF dumping space\n         ICM   R1,15,IXLYAMDCF_MI@  Get CF measurement entry\n         BZ    IMCF0564             Branch - no measurement information\n         MVC   TCD2SCAL,IXLYAMDCF_SUBCH_ALLOCATED  Set allocated SCs\n         MVC   TCD2SCAV,IXLYAMDCF_SUBCH_INUSE      Set available SCs\n         MVC   TCD2SCMX,IXLYAMDCF_SUBCH_MAXLIMIT   Set max number SCs\n         MVC   TCD2SCNA,IXLYAMDCF_SUBCH_CONTENTION  Set contention ct.\n         MVC   TCD2SCUN,IXLYAMDCF_FAILEDOPTIMECOUNT  Set failed count\nIMCF0564 ICM   R3,15,IXLYAMDCF_SC@  Get 1st subchannel entry address\n         BZ    IMCF0569             Branch - no subchannel entries\n         USING IXLYAMDSC,R3\n         LA    R9,TCD2SCA           Point to subchannels area\n         USING TCD2SC,R9\nIMCF0565 MVC   TCD2SC#,IXLYAMDSC_SCNUMBER  Set subchannel number\n         MVC   TCD2SCD#,IXLYAMDSC_SCDEVICE  Set subchannel device #\n         MVC   TCD2SCST,IXLYAMDSC_SUBCH_STATUS  Set subchannel status\n         MVC   TCD2SCB,IXLYAMDSC_SUBCH_BUSY  Set subchannel busy ct.\n         MVC   TCD2SCPB,IXLYAMDSC_ALLPATHS_BUSY  Set all paths busy ct.\n         MVC   TCD2SCU,IXLYAMDSC_UTILIZATION  Set utilization count\n         LA    R9,TCD2SCL(,R9)      Point to next subchannel entry\n         ICM   R3,15,IXLYAMDSC_SCNEXT  Point to next subchannel record\n         BNZ   IMCF0565             Loop back for next record\n         DROP  R3,R4,R9             IXLYAMDSC, IXLYAMDCF, TCD2SC\nIMCF0569 L     R0,DATAL1            Get data area length\n         L     R1,DATAA1            Get data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         TM    QUACFTYP,QUATYPCF_LAST  Last CF record?\n         BO    IMCF0590             Yes - branch, continue\n         LH    R1,QUACFLEN          Get CF record length\n         ALR   R2,R1                Point to next CF record\n         L     R15,TCD2CFRL         Point to next INFTCD2 CF record\n         ALR   R10,R15              *\n         B     IMCF0531             Loop back for next CF record\n         DROP  R2                   QUACF\nIMCF0590 L     R0,ANSWERL1          Get answer area length\n         L     R1,ANSWERA1          Get answer area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0)\n\nIMCF0699 PR                         Restore environment & return\n\n         DROP  R10,R11              TCD2CFR, INFTCD2\n         DROP  R12                  IMCF0500 base\n\n         LTORG\n\n         IXCQUERY MF=(L,IXCQLST2)    IXCQUERY parm list\nIXCQLL2  EQU   *-IXCQLST2\n\n         IXLMG MF=(L,IXLMGLS2)       IXLMG parm list\nIXLMGLL2 EQU   *-IXLMGLS2\n\n\n         DROP  R13                   WORKAREA\n\n\nWORKAREA DSECT\n         DS    18F\nRETCODE  DS    F                IMCFLIST return code\nPARMPTR  DS    A                Input parameter list pointer\nWORKFLAG DS    XL1              Flag byte\nCALLKEY  DS    XL1              Caller's psw key\n         DS    XL2              Reserved\nINFTABP  DS    A                Information table pointer\nSTRNAME  DS    CL16             Input structure name\nCFNAME   DS    CL8              Input coupling facility name\nSTRSTAT  DS    XL4              Structure status flags\nSTRDECHR DS    XL1              Structure data element characteristic\nSTRLKCHR DS    XL1              Structure lock entry characteristic\nSTRDFLAG DS    XL1              Structure list control section flag\nSTRSTFLG DS    XL1              Structure list status flag\nSTRESIZE DS    F                Structure list element size\nSTRCN#   DS    F                Number of connectors\nSTRCONNR DS    (STRCONNL*32)X   Structure connector data records area\nSTRASIZE DS    F                Allocated structure size in 4k blocks\nSTRCSIZE DS    F                Structure control size in 4k blocks\nSTRDSIZE DS    F                Structure dump table size in 4k blocks\nSTR#ELU  DS    F                # list/lock elements currently in use\nSTR#ELA  DS    F                # list/lock elements available\nSTR#ENTU DS    F                # list entries currently in use\nSTR#ENTA DS    F                # list entries available\nSTR#LKTA DS    F                # lock table entries available\nSTR#LKTU DS    F                # lock table entries used\nSTR#LKCT DS    F                # total lock contention requests\nSTR#LKCF DS    F                # false lock contention requests\nSTR#DEC  DS    F                Cache directory entry count\nSTR#ELC  DS    F                Cache data element count\nSTRCFNAM DS    CL8              Structure CF name\nSTRTYPE  DS    XL1              Structure type flag\n*LISTSTR  EQU   X'80'            List structure type\n*LOCKSTR  EQU   X'40'            Lock structure type\n*CACHESTR EQU   X'20'            Cache structure type\n*UNKNWSTR EQU   X'10'            Unknown structure type\nSTRINHDW DS    XL1              Structure hardware flag\nSTRSCMAX DS    XL1              Maximum cache storage class value\nSTRCCMAX DS    XL2              Maximum cache castout class value\n         DS    0D\nIXCQWRK  DS    (IXCQLL1)X       IXCQUERY parm list workarea\nANSWERA1 DS    A                IXCQUERY answer area address\nANSWERL1 DS    F                IXCQUERY answer area length\n         DS    0D\nIXLMGWRK DS    (IXLMGLL1)X      IXLMG parm list workarea\nDATAA1   DS    A                IXLMG data area address\nDATAL1   DS    F                IXLMG data area length\nWORKSIZE EQU   *-WORKAREA\n\nSTRCONN  DSECT                  Structure connection data record\nSTRCNFL1 DS    XL1              Connect flag #1\nSTRCNFL2 DS    XL1              Connect flag #2\n         DS    XL2              Reserved\nSTRCNNAM DS    CL16             Connect name\nSTRCNSYS DS    CL8              Connect system name\nSTRCNJOB DS    CL8              Connect jobname\nSTRCONNL EQU   *-STRCONN        Structure connection data record length\n\n         COPY  IMCFDATA         Transported coupling facility details\n\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEFJESCT\n         IEFJSCVT\n         IHAASCB\n         IHAASVT\n         IHAASXB\n         IHAPSA\n         IXCYQUAA\n         IXLYAMDA\n\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMDATGAT": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+.\\x00\\x00\\x00\\x91)o\\x01\\x01$/\\x11F\\x0e:\\x01\"\\x02\\xbf\\xe9\\xc7\\xe7\\xd7\\xf3\\xf0@@@@'", "ispf": {"version": "43.46", "flags": 0, "createdate": "1991-10-23T00:00:00", "modifydate": "2001-08-30T11:46:00", "lines": 3642, "newlines": 290, "modlines": 703, "user": "ZGXP30"}, "text": "IMDATGAT TITLE 'IMP DATA GATHERER'\n*        COPYRIGHT (C) 1991  PRYCROFT SIX PTY LTD\n         LCLC  &IMPDATE\n&IMPDATE SETC  '&SYSDATE'\n         AIF   ('&IMPDATE'(3,1) NE '/').GOTDATE\n&MM      SETC  '&IMPDATE'(1,2)          GET MM.\n&DD      SETC  '&IMPDATE'(4,2)          GET DD.\n&YY      SETC  '&IMPDATE'(7,2)          GET YY.\n&IMPDATE SETC  '&YY..&MM..&DD'          GET YY.MM.DD (FACOM &SYSDATE).\n.GOTDATE ANOP\nIMDATGAT CSECT\nIMDATGAT AMODE 31\nIMDATGAT RMODE 24\n         USING IMDATGAT,R15\n         B     GATSTART           BRANCH AROUND HEADER.\n         DC    AL1(47)\n         DC    CL47'IMDATGAT COPYRIGHT (C) 1991 PRYCROFT SIX P/L   '\nDGBASEAD DC    A(0)               POINTER TO DATA IN STORAGE.\n         DROP  R15                IMDATGAT.\n         DC    CL8'&IMPDATE'\nGATSTART STM   R14,R12,12(R13)    SAVE REGISTERS.\n         LR    R12,R15            COPY BASE REGISTER.\n         LA    R11,2048(,R12)\n         LA    R11,2048(,R11)     LOAD SECOND BASE REGISTER.\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)     LOAD THIRD BASE REGISTER.\n         USING IMDATGAT,R12,R11,R10\n         L     R2,GATCOMAD        POINT TO COMMON AREA.\n         ST    R2,8(,R13)\n         ST    R13,4(,R2)         CHAIN SAVE AREAS.\n         LR    R13,R2\n         USING IMGATCOM,R13\n         L     R15,INITADDR       GET INITIALIZATION ROUTINE EP.\n         BASR  R14,R15            CALL INITIALIZATION ROUTINE.\n         TM    GATFLAGS,TSU       RUNNING IN A TSO USER ADDRESS SPACE?\n         BZ    DGDEAMON           NO, RUNNING AS AN IMPISH DEMON.\n         OI    GATFLAGS,NOTRACK   YES, DO NOT TRACK CURRENT SMF.\n         B     GATSOINT           GO INITIALIZE.\n         SPACE\nDGDEAMON ENQ   (IMPMAJOR,IMPMINOR,E,IMINRLEN,SYSTEM),RET=USE\n         LTR   R15,R15            DATA GATHERER ALREADY ACTIVE?\n         BZ    GATINIT            NO, GO INITIALIZE.\n         LA    R1,GATWTO01        YES, ISSUE NOTIFICATION OF THIS.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n         L     R13,4(,R13)        POINT TO CALLER'S SAVE AREA.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         LA    R15,12             LOAD RETURN CODE.\n         BSM   0,R14              RETURN WITHOUT INITIALIZING.\n         SPACE\n         DS    0F\nGATCOMAD DC    V(IMGATCOM)        COMMON AREA ADDRESS.\nGATGETAD DC    V(IMGATGET)        GET RECORD ROUTINE ADDRESS.\nDGPURGAD DC    V(IMDGPURG)        OLD ENTRY PURGE ROUTINE ADDRESS.\nDELAY    DC    F'500'             WAIT DURATION IS FIVE SECONDS.\nGATWTO00 WTO   'PRY630I  IMPGAT STARTED',                              +\n               ROUTCDE=(2,11),MF=L\nGATWTO01 WTO   'PRY631I  IMPGAT STOPPING BECAUSE ALREADY ACTIVE',      +\n               ROUTCDE=(2,11),MF=L\nGATWTO02 WTO   'PRY632I  IMPGAT STOPPING BECAUSE OF STOP COMMAND',     +\n               ROUTCDE=(2,11),MF=L\nGATWTO09 WTO   'PRY639I  IMPGAT HAS PURGED DATA FROM DAY YYYY.DDD',    +\n               ROUTCDE=(2,11),MF=L\nOPURGEDT EQU   GATWTO09+44,9\nMSKWTO09 DC    XL9'40202021204B202020'\n         DS    0F\nIMPMAJOR DC    CL8'IMPMAJOR'      ENQUEUE MAJOR NAME.\nIMPMINOR DC    C'IMPDATGAT ACTIVE'    ENQ MINOR NAME.\nIMINRLEN EQU   *-IMPMINOR         ENQUEUE MINOR NAME LENGTH.\n         DS    0F\nMDSTSUP0 MODESET KEY=ZERO,MODE=SUP,MF=L\nMDSTPROB MODESET KEY=NZERO,MODE=PROB,MF=L\n         SPACE\nESTAEON  ESTAE GATABEND,PARAM=SCANZONE,MF=L\n         SPACE\nSCANZONE DC    A(DATGAT70)        START OF DATA EXTRACTION CODE.\nINITADDR DC    A(IMDGINIT)        END OF DATA EXTRACTION CODE.\nRETRYADR DC    A(GATRETRY)        RETRY ADDRESS AFTER EXTRACTION ABEND.\nRECTIME  DC    F'0'               SMF RECORD TIME (HHMMSSTH).\nCHNTRIPL DC    A(0)               ADDRESS OF FIRST+LAST+COUNT TRIPLET.\nCHNENTRY DC    A(0)               ADDRESS OF ENTRY TO INSERT IN CHAIN.\nCHNPTROF DC    F'0'               OFFSET OF NEXT AND PREVIOUS POINTERS.\nCHNCMPOF DC    F'0'               OFFSET OF COMPARE OR \"KEY\" FIELD.\nCHNCMPLN DC    F'0'               LENGTH OF COMPARE OR \"KEY\" FIELD.\n*\n*        STORAGE PARTITIONING TABLE.\n*\n*        3 FULLWORDS PER ENTRY:\n*          1. HIGH-WATER-MARK - ADDRESS OF NEXT ENTRY TO ALLOCATE.\n*          2. MAXIMUM VALUE ALLOWED FOR H-W-M WITHOUT ANOTHER GETMAIN.\n*          3. GETMAIN SIZE TO BE USED FOR THIS ENTRY TYPE.\n*\nDGHWM    EQU   0                  ADDRESS TO BE USED FOR NEXT ENTRY.\nDGMAX    EQU   4                  MAXIMUM VALUE FOR DGHWM THIS GETMAIN.\nDGSIZE   EQU   8                  GETMAIN SIZE FOR RMF DATA.\nSTGTABLE DS    0F                 STORAGE TABLE.\n*              HWM  MAX  SIZE\n         DC    F'0',F'0',F'65536'  0 - DEFAULT.\n         DC    F'0',F'0',F'4096'   1 - BASE, SYSTEM, ID LISTS.\n         DC    F'0',F'0',F'65536'  2 - RMF AND PDLF INTERVALS.\n         DC    F'0',F'0',F'65536'  3 - CHANNEL PATHS.\n         DC    F'0',F'0',F'65536'  4 - DEVICES.\n         DC    F'0',F'0',F'65536'  5 - PERFORMANCE GROUPS.\n         DC    F'0',F'0',F'65536'  6 - PAGE DATA SET.\n         DC    F'0',F'0',F'4096'   7 - DATA SET NAME.\n         DC    F'0',F'0',F'65536'  8 - DATA SET EVENT.\n         DC    F'0',F'0',F'4096'   9 - PROGRAM NAME.\n         DC    F'0',F'0',F'65536' 10 - JOB STEP END EVENT.\n         DC    F'0',F'0',F'16384' 11 - TAPE VOLUME SERIAL NUMBER.\n         DC    F'0',F'0',F'32768' 12 - TAPE VOLUME EVENT.\n         DC    F'0',F'0',F'4096'  13 - JOB NAME.\nMAXENTYP EQU   13                 MAXIMUM ENTRY TYPE VALUE.\nSTENTSIZ DC    H'12'              SIZE OF A STORAGE TABLE ENTRY.\n         TITLE 'SUBROUTINES'\nDGNEWENT DS    0H                 CREATE AN ENTRY IN VIRTUAL STORAGE.\n         STM   R14,R12,12(R13)    SAVE REGISTERS.\n         SLR   R8,R8              CLEAR FOR INSERT.\n         CLI   ENTRYTYP,MAXENTYP  VALID ENTRY TYPE?\n         BH    GOTENTYP           NO, USE DEFAULT.\n         TM    GATFLAGS,TSU       TIME SHARING USER?\n         BO    GOTENTYP           YES, GO FOR CAPACITY, NOT SPEED.\n         IC    R8,ENTRYTYP        LOAD VALID TYPE IF STARTED TASK.\nGOTENTYP MH    R8,STENTSIZ        MULTIPLY BY SIZE FOR INDEX.\n         LA    R8,STGTABLE(R8)    POINT TO TABLE ENTRY FOR THIS TYPE.\n         LR    R7,R0              COPY REQUESTED LENGTH.\n         BCTR  R7,0               DECREMENT FOR EXECUTE.\n         L     R6,DGHWM(,R8)      GET ADDRESS OF NEW ENTRY.\n         LA    R1,1(R7,R6)        DERIVE NEW HIGH WATER MARK.\n         C     R1,DGMAX(,R8)      USED ALL OF GETMAINED AREA?\n         BH    DGFREEMN           YES, GETMAIN SOME MORE STORAGE.\n         ST    R1,DGHWM(,R8)      NO, SAVE FUTURE ENTRY'S ADDRESS.\n         EX    R7,DGNEWCLR        ERASE ANY RESIDUAL DATA.\n         CH    R7,=H'255'         ENTRY SIZE MORE THAN 256 BYTES?\n         BNH   ENTCLRED           NO, STORAGE SET TO ZEROS.\n         XC    0(256,R6),0(R6)    YES, ERASE ANY RESIDUAL DATA\n         EX    R7,DGNEWCLX        FROM THE WHOLE ENTRY.\nENTCLRED ST    R6,20(,R13)        SAVE THIS ENTRY'S ADDRESS IN R0 SLOT.\n         MVI   ENTRYTYP,0         RESET STORAGE ENTRY TYPE CODE.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         BR    R14                RETURN TO CALLER.\n         SPACE\nDGFREEMN L     R0,DGMAX(,R8)      POINT PAST CURRENT AREA.\n         LR    R1,R6              POINT TO UNUSABLE REMNANT.\n         SR    R0,R1              GET SIZE OF UNUSABLE REMNANT.\n         BNP   DGETMAIN           EXACTLY ALL OF THE AREA WAS USED.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\nDGETMAIN L     R0,DGSIZE(,R8)     LOAD THE GETMAIN CHUNK SIZE.\n         GETMAIN RU,LV=(0),LOC=(ANY),SP=23\n         ST    R1,DGHWM(,R8)      SUPPLY THE STARTING HIGH-WATER-MARK.\n         CLI   DGHWM(R8),0        NEW STORAGE IN EXTENDED REGION?\n         BE    DGCALLPG           NO, TIME TO FREE UP SOME SPACE.\n         A     R1,DGSIZE(,R8)     POINT PAST GETMAINED AREA.\n         ST    R1,DGMAX(,R8)      SAVE MAX ADDRESS BEFORE NEW GETMAIN.\n         LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS.\n         B     DGNEWENT           REDRIVE THE CALLER'S REQUEST.\n         SPACE\nDGCALLPG L     R0,DGSIZE(,R8)     LOAD THE GETMAIN CHUNK SIZE.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         ST    R15,DGMAX(,R8)     FORCE NEW GETMAIN FOR ENTRY TYPE.\n         L     R15,DGPURGAD       POINT PURGE ROUTINE ENTRY POINT.\n         L     R1,DGBASEAD        POINT TO DATA REPOSITORY.\n         BASR  R14,R15            PURGE OLD ENTRIES TO RECLAIM SPACE.\n         USING DGBASE,R1\n         ZAP   WORK,DGPURGDT      COPY THE LATEST PURGE DATE.\n         DROP  R1                 DGBASE.\n         AP    WORK,=P'1900000'   CONVERT YEAR TO FOUR DIGITS.\n         MVC   OPURGEDT,MSKWTO09  FORMAT LATEST PURGE DATE.\n         ED    OPURGEDT,WORK+4\n         LA    R1,GATWTO09        REPORT LATEST PURGE DATE.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n         L     R15,DGBASEAD       POINT TO DATA REPOSITORY.\n         USING DGBASE,R15\nDGNJSEOK L     R1,24(,R13)        RESTORE CALLER'S RECORD POINTER.\n         USING SMF70HDR,R1\n         CLC   DGPURGDT,SMF70DTE  IS RECORD FROM AFTER PURGE DATE?\n         BNL   DGNPURGE           NO, DISCARD RECORD.\n         CLI   SMF70RTY,70        IS THIS AN RMF SMF RECORD?\n         BL    DGETMAIN           NO, REDRIVE THE GETMAIN.\n         CLI   SMF70RTY,127       IS THIS A PDLF SMF RECORD?\n         BE    DGNINTCK           YES, CHECK INTERVAL START DATE.\n         CLI   SMF70RTY,79        IS THIS AN RMF SMF RECORD?\n         BH    DGETMAIN           NO, REDRIVE THE GETMAIN.\n         DROP  R1                 SMF70HDR.\nDGNINTCK CLC   DGPURGDT,WORK+4    IS INTERVAL FROM AFTER PURGE DATE?\n         BL    DGETMAIN           YES, REDRIVE THE GETMAIN.\n         DROP  R15                DGBASE.\nDGNPURGE LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS.\n         B     GATMAIN            DISCARD RECORD.\n         SPACE\nDGNEWCLR XC    0(0,R6),0(R6)      <<< EXECUTED >>>\nDGNEWCLX XC    256(0,R6),256(R6)  <<< EXECUTED >>>\n         SPACE 2\nCHAINADD DS    0H                 INSERT NEW ENTRY INTO CHAIN.\n         STM   R14,R12,12(R13)    SAVE REGISTERS.\n         L     R3,CHNTRIPL        ROOT FIRST/LAST/COUNT TRIPLET PTR.\n         ICM   R0,15,0(R3)        ANY FIRST ENTRY?\n         BZ    CHAINNEW           NO, THIS IS THE ONLY ENTRY SO FAR.\n         L     R6,CHNENTRY        POINT TO ENTRY TO ADD.\n         LR    R4,R3              COPY ROOT TRIPLET POINTER.\n         S     R4,CHNPTROF        POINT TO BEFORE ROOT POINTERS.\n         LR    R1,R6              POINT TO NEW ENTRY.\n         A     R1,CHNCMPOF        POINT TO \"KEY\".\n         L     R8,CHNCMPLN        GET \"KEY\" LENGTH.\n         BCTR  R8,0               DECREMENT FOR COMPARE EXECUTE.\nCHAINLP  A     R4,CHNPTROF        POINT TO NEXT/PREVIOUS POINTERS.\n         ICM   R4,15,4(R4)        POINT TO PREVIOUS ENTRY.\n         BZ    CHAINFST           START OF CHAIN, SO NEW GOES FIRST.\n         LR    R7,R4\n         A     R7,CHNCMPOF        POINT TO THIS ENTRY'S \"KEY\".\n         EX    R8,CHNCOMPR        IS NEW ENTRY BEFORE THIS ENTRY?\n         BL    CHAINLP            YES, GO BACK ANOTHER ONE.\n         LR    R7,R4\n         A     R7,CHNPTROF        NO, POINT TO ENTRY'S POINTERS.\n         A     R6,CHNPTROF        POINT TO NEW ENTRY'S POINTERS.\n         ST    R4,4(,R6)          SET NEW BACKWARD POINTER.\n         MVC   0(4,R6),0(R7)      SET NEW FORWARD POINTER.\n         MVC   0(4,R7),CHNENTRY   SET PREVIOUS FORWARD POINTER.\n         ICM   R5,15,0(R6)        POINT TO NEXT ENTRY.\n         BZ    CHAINLST           NEW ENTRY IS LAST ENTRY.\n         A     R5,CHNPTROF        POINT TO NEXT ENTRY'S POINTERS.\n         MVC   4(4,R5),CHNENTRY   SET NEXT BACKWARD POINTER.\n         B     CHAINCNT           GO UPDATE CHAIN ENTRY COUNT.\nCHAINFST A     R6,CHNPTROF        POINT TO NEW ENTRY'S POINTERS.\n         L     R5,0(,R3)          POINT TO OLD FIRST ENTRY.\n         A     R5,CHNPTROF        POINT TO OLD FIRST ENTRY'S POINTERS.\n         MVC   0(4,R6),0(R3)      SET NEW FORWARD POINTER FROM OLD 1ST.\n         MVC   4(4,R5),CHNENTRY   SET OLD 1ST BACK PTR TO NEW ENTRY.\n         MVC   0(4,R3),CHNENTRY   SET FIRST POINTER TO NEW ENTRY.\n         B     CHAINCNT           GO UPDATE CHAIN ENTRY COUNT.\nCHAINNEW MVC   0(4,R3),CHNENTRY   SET FIRST POINTER TO NEW ENTRY.\nCHAINLST MVC   4(4,R3),CHNENTRY   SET LAST POINTER TO NEW ENTRY.\nCHAINCNT LA    R0,1\n         A     R0,8(,R3)          INCREMENT ENTRY COUNTER.\n         ST    R0,8(,R3)\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         BR    R14                RETURN TO CALLER.\nCHNCOMPR CLC   0(0,R1),0(R7)      <<< EXECUTED >>>\n         SPACE 2\nPICTOBIN DS    0H                 CONVERT EBCDIC NUMBER TO BINARY.\n         STM   R14,R12,12(R13)    SAVE REGISTERS.\n         ST    R0,WORK            PUT CHARACTERS IN STORAGE.\n         MVI   WORK+4,0           CLEAR A FLAG BYTE.\n         SLR   R0,R0              ZERO ACCUMULATOR.\n         LA    R1,4               GET COUNT OF BYTES TO SCAN.\n         SLR   R2,R2              CLEAR FOR WORK.\n         LA    R3,WORK            POINT TO FIRST POSSIBLE DIGIT.\nPICLOOP  NI    0(R3),X'0F'        REMOVE ZONE.\n         CLI   0(R3),10           VALID DECIMAL?\n         BL    PICDIGIT           YES, PROCESS THE DIGIT.\n         MVI   WORK+4,1           NO, FLAG DECIMAL POINT ENCOUNTERED.\n         B     PICNEXT            GO LOOK AT THE NEXT BYTE.\nPICDIGIT MH    R0,PICHW10         PROMOTE PREVIOUS DIGITS.\n         IC    R2,0(,R3)          GET THIS DIGIT.\n         AR    R0,R2              ADD THIS DIGIT TO ACCUMULATOR.\n         OI    WORK+4,2           SET DIGIT PROCESSED FLAG.\n         TM    WORK+4,3           FIRST DIGIT AFTER DECIMAL POINT?\n         BO    PICOKAY            YES, TENTHS IS ONLY FRACTION HANDLED.\nPICNEXT  LA    R3,1(,R3)          POINT TO NEXT CANDIDATE DIGIT.\n         BCT   R1,PICLOOP         PROCESS IT IF APPROPRIATE.\n         MH    R0,PICHW10         CONVERT INTEGER TO TENTHS.\nPICOKAY  ST    R0,20(,R13)        SAVE BINARY TENTHS IN R0 SLOT.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         BR    R14                RETURN TO CALLER.\n         SPACE\nPICHW10  DC    H'10'              TEN.\n         SPACE 2\nCENTITOD DS    0H                 CONVERT BINARY CENTISECS TO HHMMSSTH.\n         SLR   R4,R4              CLEAR FOR DIVIDE - R5 HAS INPUT TIME.\n         D     R4,=F'6000'        CONVERT TO MINUTES.\n         CVD   R4,WORK            GET CENTISECONDS NOT IN MINUTES.\n         L     R2,WORK+4          GET 000SSTHF.\n         SRL   R2,4               SHIFT OUT DECIMAL SIGN.\n         SLR   R4,R4              CLEAR FOR DIVIDE.\n         D     R4,=F'60'          GET HOURS AND MINUTES.\n         CVD   R4,WORK            GET MINUTES NOT IN HOURS.\n         L     R4,WORK+4          GET 00000MMF.\n         SRL   R4,4               SHIFT OUT DECIMAL SIGN.\n         SLL   R4,16              PUT IN CORRECT POSITION.\n         OR    R2,R4              GET 00MMSSTH.\n         CVD   R5,WORK            GET HOURS.\n         L     R5,WORK+4          GET 00000HHF.\n         SRL   R5,4               SHIFT OUT DECIMAL SIGN.\n         SLL   R5,24              PUT IN CORRECT POSITION.\n         OR    R2,R5              GET HHMMSSTH - R2 HAS OUTPUT TIME.\n         BR    R14                RETURN TO CALLER.\n         SPACE 2\nGREG2JUL DS    0H                 CONVERT CYYMMDDF TO 0CYYDDDF.\n         STM   R14,R12,12(R13)    SAVE REGISTERS.\n         LR    R1,R0              COPY INPUT DATE.\n         SLL   R1,4               GET YY IN TOP BYTE.\n         ST    R1,WORK            PLACE IN WORK AREA.\n         MVI   MONTHTAB+5,28      ASSUME NOT A LEAP YEAR.\n         TM    WORK,X'01'         ODD NUMBERED YEAR?\n         BO    LEAPOKAY           YES, NOT A LEAP YEAR.\n         TM    WORK,X'12'         LEAP YEAR?\n         BM    LEAPOKAY           NO.\n         MVI   MONTHTAB+5,29      YES.\nLEAPOKAY XC    WORK,WORK          CLEAR A WORK AREA.\n         STCM  R0,B'0110',WORK+6\n         NI    WORK+6,X'0F'\n         OI    WORK+7,X'0F'       GET 00000MMF.\n         CVB   R1,WORK            GET THE BINARY MONTH NUMBER.\n         LA    R2,MONTHTAB        POINT TO DAYS PER MONTH TABLE.\n         SLR   R3,R3              CLEAR ACCUMULATOR.\nMNTHLOOP AH    R3,0(,R2)          ADD DAYS OF A PREVIOUS MONTH.\n         LA    R2,2(,R2)          POINT TO NEXT MONTH'S ENTRY.\n         BCT   R1,MNTHLOOP\n         XC    WORK,WORK          CLEAR A WORK AREA.\n         STH   R0,WORK+6\n         NI    WORK+6,X'0F'       GET 00000DDF.\n         CVB   R1,WORK            GET BINARY DAY OF MONTH.\n         AR    R3,R1              GET JULIAN DAY OF YEAR.\n         CVD   R3,WORK            GET DECIMAL JULIAN DAY OF YEAR.\n         OI    WORK+7,X'0F'       GET REQUIRED DECIMAL POSITIVE SIGN.\n         SRL   R0,4               GET 0CYYMMDD FROM INPUT DATE.\n         ICM   R0,3,WORK+6        GET 0CYYDDDF.\n         ST    R0,20(,R13)        SAVE VALUE IN R0 SLOT.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         BR    R14                RETURN TO CALLER.\n         SPACE\nMONTHTAB DC    AL2(0,31,28,31,30,31,30,31,31,30,31,30)\n         SPACE 2\nDGPUTMSG DS    0H                 ISSUE WTO OR TPUT AS APPROPRIATE.\n         TM    GATFLAGS,TSU       RUNNING IN A TSO USER ADDRESS SPACE?\n         BO    DGTSUPUT           YES, PERFORM A TPUT.\n         WTO   MF=(E,(1))         NO, ISSUE THE WTO.\n         BR    R14                RETURN TO CALLER.\nDGTSUPUT LA    R15,4              GET FOUR.\n         LH    R0,0(,R1)          GET WTO LENGTH.\n         SR    R0,R15             GET TPUT LENGTH.\n         LA    R1,4(,R1)          GET MESSAGE ADDRESS.\n         TPUT  (1),(0),R          SHOW ON TSO TERMINAL, NOT OS CONSOLE.\n         BR    R14                RETURN TO CALLER.\n         SPACE 2\nMASKTEST DS    0H                 COMPARE TWO STRINGS WITH '*' WILD.\n         CLI   0(R3),C'*'         WILD CARD IN MASK?\n         BE    MASKOKAY           YES, SAME AS EQUAL.\n         CLC   0(1,R3),0(R2)      COMPARE MASK TO INPUT STRING.\n         BNER  R14                RETURN TO CALLER IF NOT EQUAL.\nMASKOKAY LA    R3,1(,R3)          POINT TO NEXT BYTE OF MASK.\n         LA    R2,1(,R2)          POINT TO NEXT BYTE OF INPUT STRING.\n         BCT   R0,MASKTEST        TEST NEXT CHARACTER.\n         BR    R14                EXACT MATCH SO RETURN TO CALLER.\n         SPACE 2\n**********************************************\n* FIXED - FLOATING POINT CONVERSION ROUTINES *\n**********************************************\n         SPACE\n* ROUTINE FIXFL CONVERTS A BINARY NUMBER IN GENERAL REGISTER 0 TO A\n* FLOATING POINT NUMBER IN FLOATING POINT REGISTER 0.\n* ROUTINE FLFIX CONVERTS A FLOATING POINT NUMBER IN FLOATING POINT\n* REGISTER 0 TO A BINARY NUMBER IN GENERAL REGISTER 0.\n         SPACE\nFIXFL    X     R0,FLCONST+4\n         ST    R0,FLTEMP+4\n         X     R0,FLCONST+4\n         LD    E0,FLTEMP\n         SD    E0,FLCONST\n         BR    R14\n         SPACE\nFLFIX    AD    E0,FIXCONST\n         STD   E0,FIXTEMP\n         L     R0,FIXTEMP+4\n         BR    R14\n         SPACE\n*                                 FLOATING POINT REGISTER EQUATES.\nE0       EQU   0\nE2       EQU   2\nE4       EQU   4\nE6       EQU   6\n         DS    0D\nFLCONST  DC    XL8'4E00000080000000'\nFIXCONST DC    XL8'4F08000000000000'\nFLTEMP   DC    XL8'4E00000000000000'\nFIXTEMP  DC    XL8'0000000000000000'\n         TITLE 'INITIALIZATION'\n*        BECOME NON-SWAPPABLE TO FACILITATE CROSS-MEMORY ACCESS.\n         SPACE\nGATINIT  DS    0H\n         MODESET MF=(E,MDSTSUP0)  GET INTO SYSTEM STATE.\n         XC    WORK,WORK          CLEAR AN ECB.\n         LA    R1,WORK            POINT TO A MAKESHIFT ECB.\n         SYSEVENT TRANSWAP        BECOME NON-SWAPPABLE.\n         LTR   R15,R15            WAS ANYTHING TO BE DONE?\n         BNZ   TRANOKAY           NO, ALREADY NON-SWAPPABLE.\n         WAIT  ECB=WORK           YES, WAIT TILL TRANSWAP COMPLETE.\nTRANOKAY OI    GATFLAGS,NONSWAP   REMEMBER CURRENTLY NON-SWAPPABLE.\n         MODESET MF=(E,MDSTPROB)  REVERT TO PROBLEM STATE.\n         SPACE 2\n*        CREATE THE BASE ENTRY FOR THE WHOLE DATA STRUCTURE.\n         SPACE\nGATSOINT LA    R0,DGBASLEN        GET THE BASE ENTRY LENGTH.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       CREATE THE BASE ENTRY.\n         LR    R1,R0              COPY THE DATA AREA ADDRESS.\n         USING DGBASE,R1\n         LA    R0,DGSMFTYP        GET NUMBER OF SMF EVENT TYPES.\n         ST    R0,DGSMFCNT        SAVE IT FOR POST-PROCESSING.\n         ST    R1,DGBASEAD        SAVE THE DATA AREA ADDRESS.\n         MVC   DGBASEID,DGSTRING  LOAD THE HEADER STRING.\n         DROP  R1                 DGBASE.\n         SPACE\n         ESTAE MF=(E,ESTAEON)     ENABLE TASK ABNORMAL END EXIT.\n         SPACE\n         LA    R1,GATWTO00        ISSUE NOTIFICATION OF IMPGAT START.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n         B     GATMAIN            START READING SMF RECORDS.\n         TITLE 'MAIN PROCESSING LOOP'\nGATWAIT  DS    0H\n         STIMER WAIT,BINTVL=DELAY WAIT A BIT.\nGATMAIN  DS    0H\n         SLR   R0,R0              ENTRY CODE FOR RECORD GET.\n         L     R1,COMMADDR        POINT TO MODIFY/STOP ECB ADDRESS.\n         L     R1,0(,R1)          POINT TO MODIFY/STOP ECB.\n         TM    0(R1),X'40'        HAS THE ECB BEEN POSTED?\n         BZ    CALLGET            NO, SEE IF ANY MORE INPUT DATA YET.\n         LA    R0,4               YES, TELL IMGATGET TO CLOSE FILE.\nCALLGET  L     R15,GATGETAD       GET GET RECORD ROUTINE ENTRY ADDRESS.\n         BASSM R14,R15            CALL IT.\n         LTR   R15,R15            ANY RECORD RETURNED?\n         BZ    DGDIGEST           YES, PROCESS IT.\n         CH    R15,=H'4'          NO, TERMINATION IN PROGRESS?\n         BH    GATWAIT            NO, WAIT A BIT THEN CHECK FOR DATA.\n         TM    GATFLAGS,TSU       RUNNING UNDER TSO USER?\n         BO    GATTERM            YES, TERMINATE WITH DATA IN STORAGE.\n         LA    R1,GATWTO02        ISSUE NOTIFICATION OF TERMINATION.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n*                                 DEQ, FREE STORAGE AND TERMINATE.\n         DEQ   (IMPMAJOR,IMPMINOR,IMINRLEN,SYSTEM),RET=NONE\n         MODESET MF=(E,MDSTSUP0)  GET INTO SYSTEM STATE.\n         SYSEVENT OKSWAP          BECOME SWAPPABLE.\n         MODESET MF=(E,MDSTPROB)  REVERT TO PROBLEM STATE.\n         FREEMAIN RU,SP=23        FREE ALL THE STORAGE.\nGATTERM  DS    0H                 COMMON TERMINATION CODE.\n         ESTAE 0                  DISABLE TASK ABNORMAL END EXIT.\n         L     R13,4(,R13)        POINT TO CALLER'S SAVE AREA.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         SLR   R15,R15            SET ZERO RETURN CODE.\n         BSM   0,R14              RETURN TO CALLER IN CALLER'S AMODE.\n         SPACE 2\nDGDIGEST DS    0H\n         USING SMF70HDR,R1\n         L     R2,DGBASEAD        POINT TO THE BASE ENTRY.\n         USING DGBASE,R2\n         CLC   DGPURGDT,SMF70DTE  IS RECORD FROM AFTER PURGE DATE?\n         BNL   GATMAIN            NO, DISCARD RECORD.\n         DROP  R2                 DGBASE.\n         ICM   R5,15,SMF70TME     GET THE SMF TIME OF DAY.\n         BAS   R14,CENTITOD       CONVERT TO HOURS/MINUTES/SECONDS.\n         ST    R2,RECTIME         SAVE FOR TESTING AND LOADING.\n         TM    SELFLAGS,DSET      COLLECTING SMF DATA SET EVENTS?\n         BZ    TESTPGMS           NO, TEST FOR OTHER DATA.\n         SPACE\n*              DIVERT NON-RMF SMF RECORDS OF INTEREST.\n         SPACE\n         CLI   SMF70RTY,14        TYPE 14 SMF RECORD?\n         BE    DGDSET14           YES, PROCESS IT.\n         CLI   SMF70RTY,15        TYPE 15 SMF RECORD?\n         BE    DGDSET14           YES, PROCESS IT.\n         CLI   SMF70RTY,17        TYPE 17 SMF RECORD?\n         BE    DGDSET17           YES, PROCESS IT.\n         CLI   SMF70RTY,18        TYPE 18 SMF RECORD?\n         BE    DGDSET18           YES, PROCESS IT.\n         CLI   SMF70RTY,61        TYPE 61 SMF RECORD?\n         BE    DGDSET61           YES, PROCESS IT.\n         CLI   SMF70RTY,62        TYPE 62 SMF RECORD?\n         BE    DGDSET62           YES, PROCESS IT.\n         CLI   SMF70RTY,64        TYPE 64 SMF RECORD?\n         BE    DGDSET64           YES, PROCESS IT.\n         CLI   SMF70RTY,65        TYPE 65 SMF RECORD?\n         BE    DGDSET65           YES, PROCESS IT.\n         CLI   SMF70RTY,66        TYPE 66 SMF RECORD?\n         BE    DGDSET66           YES, PROCESS IT.\n         TM    SMF70RTY,X'80'     USER SMF RECORD TYPE?\n         BZ    TESTPGMS           NO, TEST FOR OTHER DATA.\n         CLC   =H'100',0(R1)      YES, POSSIBLY WORTH INVESTIGATING?\n         BH    GATMAIN            NO, TOO SHORT SO DISCARD.\n         CLC   =C'DSR',21(R1)     HSM DAILY STATISTICS RECORD?\n         BE    HSMSTATS           YES.\n         CLC   =C'VSR',21(R1)     HSM VOLUME STATISTICS RECORD?\n         BE    HSMSTATS           YES.\n         CLC   HSMFNTYP,5(R1)     HSM FUNCTION RECORD?\n         BE    DGDSETHF           YES.\n         CLC   =C'**HSM***',34(R1)\n         BE    DGDSETHF           YES, THAT WAS LUCKY!\n         CLC   =C'*H*S*M*',35(R1)\n         BE    DGDSETHF           YES, THAT WAS LUCKY!\n         B     GATMAIN            PROBABLY NOT.\nHSMSTATS IC    R15,5(,R1)         GET THE SMF RECORD TYPE.\n         LA    R15,1(,R15)        ADD ONE.\n         STC   R15,HSMFNTYP       SAVE THE HSM FUNCTION RECORD TYPE.\n         B     GATMAIN\nTESTPGMS CLI   SMF70RTY,30        TYPE 30 SMF RECORD?\n         BNE   TESTPERF           NO, TEST FOR PERFORMANCE DATA.\n         TM    SELFLAGS,PGMS      COLLECTING SMF JOB STEP END EVENTS?\n         BZ    GATMAIN            NO, DISCARD THE RECORD.\n         L     R9,=A(DATGAT30)    YES, LOAD ROUTINE ENTRY POINT.\n         BR    R9                 CALL PROCESSING ROUTINE.\nTESTPERF TM    SELFLAGS,PERF      COLLECTING PERFORMANCE HISTORY?\n         BZ    GATMAIN            NO, FETCH ANOTHER RECORD.\n         CLI   SMF70RTY,6         IS THIS A TYPE 6 SMF RECORD?\n         BE    CHKSYSID           YES, OBTAIN MATCHING SYSTEM ENTRY.\n         CLI   SMF70RTY,57        IS THIS A TYPE 57 SMF RECORD?\n         BE    CHKSYSID           YES, OBTAIN MATCHING SYSTEM ENTRY.\n         DROP  R1                 SMF70HDR.\n         SPACE\n*              PROCESS FUJITSU PDLF SMF RECORDS.\n         SPACE\n         USING PDLFHDR,R1\n         DS    0H\n         CLI   PDLFRTY,127        TYPE 127 SMF RECORD?\n         BNE   TEST4RMF           NO, GO TEST FOR RMF RECORD.\n         CLC   =C'S001',PDLFCRID  SYSTEM PERFORMANCE RECORD?\n         BE    PDLFDATE           YES.\n         CLC   =C'I001',PDLFCRID  I/O PERFORMANCE RECORD?\n         BE    PDLFDATE           YES.\n         CLC   =C'P001',PDLFCRID  PERFORMANCE GROUP PERFORMANCE RECORD?\n         BE    PDLFDATE           YES.\n         B     GATMAIN            NOT A KNOWN PDLF RECORD, GET ANOTHER.\nPDLFDATE ICM   R0,15,PDLFCDTE     LOAD PDLF INTERVAL START DATE.\n         BAS   R14,GREG2JUL       CONVERT TO JULIAN DATE.\n         ST    R0,WORK+4          SAVE PDLF INTERVAL START DATE.\n         ICM   R0,15,PDLFCTME     LOAD PDLF INTERVAL START TIME.\n         SRL   R0,4               CONVERT HHMMSSTH TO 0HHMMSST.\n         ST    R0,WORK            SAVE PDLF INTERVAL START TIME.\n         OI    WORK+3,X'0F'       CONVERT 0HHMMSST TO 0HHMMSSF.\n         L     R5,DGBASEAD        POINT TO THE BASE ENTRY.\n         USING DGBASE,R5\n         CLC   DGPURGDT,WORK+4    IS INTERVAL FROM AFTER PURGE DATE?\n         BNL   GATMAIN            NO, DISCARD RECORD.\n         B     CHKSYSID\n         DROP  R1,R5              PDLFHDR, DGBASEAD.\n         SPACE\n*              PROCESS SUITABLE RMF SMF RECORDS.\n         SPACE\n         USING SMF70HDR,R1\nTEST4RMF DS    0H\n         TM    SMF70FLG,SMF70SUT+SMF70VXA+SMF70OS   SUBTYPES+XA+VS2?\n         BNO   GATMAIN            NO, FETCH ANOTHER RECORD.\n         CLI   SMF70RTY,70        IS THIS AN RMF SMF RECORD?\n         BL    GATMAIN            NO, FETCH ANOTHER RECORD.\n         CLI   SMF70RTY,79        IS THIS AN RMF SMF RECORD?\n         BH    GATMAIN            NO, FETCH ANOTHER RECORD.\n         CLI   SMF70RTY,70        IS THIS A TYPE 70 SMF RECORD?\n         BE    CHKSYSID           YES, PROCESS IT.\n         CLI   SMF70RTY,71        IS THIS A TYPE 71 SMF RECORD?\n         BE    CHKSYSID           YES, PROCESS IT.\n         CLI   SMF70RTY,72        IS THIS A TYPE 72 SMF RECORD?\n         BNE   CHECK73            NO.\n         CLC   =H'1',SMF70STY     SUBTYPE 1?\n         BNE   GATMAIN            NO, IGNORE RMF MONITOR III DATA.\n         B     CHKSYSID           YES, PROCESS IT.\nCHECK73  CLI   SMF70RTY,73        IS THIS A TYPE 73 SMF RECORD?\n         BE    CHKSYSID           YES, PROCESS IT.\n         CLI   SMF70RTY,74        IS THIS A TYPE 74 SMF RECORD?\n         BNE   CHECK75            NO.\n         CLC   =H'1',SMF70STY     SUBTYPE 1?\n         BNE   GATMAIN            NO, IGNORE RMF MONITOR III DATA.\n         B     CHKSYSID           YES, PROCESS IT.\nCHECK75  CLI   SMF70RTY,75        IS THIS A TYPE 75 SMF RECORD?\n         BE    CHKSYSID           YES, PROCESS IT.\n         CLI   SMF70RTY,78        IS THIS A TYPE 78 SMF RECORD?\n         BNE   GATMAIN            NO.\n         CLC   =H'2',SMF70STY     SUBTYPE 2?\n         BNE   GATMAIN            NO, I/O QUEUING DATA.\nCHKSYSID L     R3,DGBASEAD        YES, POINT TO THE BASE ENTRY.\n         USING DGBASE,R3\n         LA    R3,DGFSTSYS        POINT TO SYSTEM ENTRY ANCHORS.\n         DROP  R3                 DGBASE.\nDGSYSLP  ICM   R3,15,0(R3)        POINT TO THE NEXT SYSTEM ENTRY.\n         BZ    MKNEWSYS           NO MORE SYSTEM ENTRIES SO MAKE ONE.\n         USING DGSYSTEM,R3\n         CLC   DGSYSID,SMF70SID   FOUND THE MATCHING SYSTEM ENTRY?\n         BE    SYSMATCH           YES.\n         B     DGSYSLP            NO, TRY THE NEXT ONE.\n         SPACE\nMKNEWSYS LA    R0,DGSYSLEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R3,R0              POINT TO THE NEW ENTRY.\n         MVC   DGSYSID,SMF70SID   LOAD THE SMF SYSTEM IDENTIFIER.\n         L     R2,DGBASEAD        POINT TO THE BASE ENTRY.\n         USING DGBASE,R2\n         ICM   R4,15,DGLSTSYS     POINT TO THE LAST SYSTEM ENTRY.\n         BNZ   CHAINSYS           GO UPDATE SYSTEM ENTRY CHAINS.\n         ST    R3,DGFSTSYS        NO LAST SO THIS IS THE FIRST SYSTEM.\n         B     LASTSYS            IT IS ALSO THE LAST SYSTEM.\nCHAINSYS ST    R3,0(,R4)          MAKE OLD LAST POINT TO NEW ONE.\n         ST    R4,DGSYSPRV        MAKE THIS ONE POINT BACK TO OLD LAST.\nLASTSYS  ST    R3,DGLSTSYS        NEW ONE IS NOW THE LAST ONE.\n         LA    R0,1\n         A     R0,DGNUMSYS        INCREMENT THE SYSTEM ENTRY COUNTER.\n         ST    R0,DGNUMSYS\n         DROP  R2                 DGBASE.\n         SPACE\nSYSMATCH LA    R4,DGFSTINT        POINT TO THE INTERVAL ENTRY POINTERS.\n         CLI   SMF70RTY,6         IS THIS JES2/JES3/PSF/XWTR OUTPUT?\n         BE    INTEVENT           YES, RECORD EVENT IN INTERVAL STATS.\n         CLI   SMF70RTY,57        IS THIS NJE OUTPUT?\n         BE    INTEVENT           YES, RECORD EVENT IN INTERVAL STATS.\n         CLI   SMF70RTY,127       IS THIS A PDLF SMF RECORD?\n         BE    DGINTLP            YES, TIME AND DATE ALREADY IN WORK.\n         CLC   =H'1',SMF70PRN     IS ONE RMF PRODUCT SECTION PRESENT?\n         BNE   GATMAIN            NO, IGNORE RECORD AND FETCH ANOTHER.\n         ICM   R2,15,SMF70PRS     YES, GET ITS OFFSET.\n         ALR   R2,R1              POINT TO IT.\n         OI    DGSYSFLG,DGRMFSYS  FLAG RMF DATA FOUND FOR THIS SYSTEM.\n         USING SMF70PRO,R2\n         MVC   WORK(4),SMF70IST   COPY RMF INTERVAL START TIME.\n         MVC   WORK+4(4),SMF70DAT COPY RMF INTERVAL START DATE.\n         L     R5,DGBASEAD        POINT TO THE BASE ENTRY.\n         USING DGBASE,R5\n         CLC   DGPURGDT,WORK+4    IS INTERVAL FROM AFTER PURGE DATE?\n         BNL   GATMAIN            NO, DISCARD RECORD.\n         DROP  R5                 DGBASEAD.\nDGINTLP  LR    R5,R4              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R4,15,4(R4)        POINT TO THE PREVIOUS INTERVAL ENTRY.\n         BZ    MKNEWINT           NO MORE INTERVAL ENTRIES SO MAKE ONE.\n         USING DGRMFINT,R4\n         CLC   DGINTDAT,WORK+4    COMPARE THE DATES.\n         BH    DGINTLP            RECORD FROM EARLIER DATE SO BACK UP.\n         BL    MKNEWINT           RECORD FROM LATER DATE SO MAKE ENTRY.\n         CLC   DGINTTIM,WORK      COMPARE THE TIMES.\n         BH    DGINTLP            RECORD FROM EARLIER TIME SO BACK UP.\n         BE    INTCHNOK           FOUND THE MATCHING RMF INTERVAL.\n*        BL    MKNEWINT           RECORD FROM LATER TIME SO MAKE ENTRY.\n         DROP  R4                 DGRMFINT.\n         SPACE\nMKNEWINT LA    R0,DGINTLEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,2         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGRMFINT,R6\n         LA    R0,1\n         ST    R0,DGCPUCNT        ASSUME UNIPROCESSOR FOR THE MOMENT.\n         L     R0,RECTIME         GET THE SMF TIME OF DAY.\n         IC    R0,=X'F0'          OVERLAY SECONDS FRACTION WITH SIGN.\n         SRL   R0,4               GET SMF RECORD TIME IN 0HHMMSSF.\n         ST    R0,DGINTEND        SAVE AS THE INTERVAL END TIME.\n         MVC   DGINTPRL,DGCUMPRL  LOAD INTERVAL PRINT LINE COUNTS.\n         MVC   DGINTPRX,DGCUMPRX\n         MVC   DGINTPRN,DGCUMPRN\n         L     R0,DGINTPRL\n         A     R0,DGINTPRX\n         A     R0,DGINTPRN        GET TOTAL PRINT LINES THIS INTERVAL.\n         C     R0,DGMAXPRT        MORE THAN PREVIOUS HIGHEST?\n         BNH   CLRPRCUM           NO, CLEAR THE PRINT ACCUMULATORS.\n         ST    R0,DGMAXPRT        YES, UPDATE THE HIGH-WATER-MARK.\nCLRPRCUM SLR   R0,R0\n         ST    R0,DGCUMPRL        RESET ACCUMULATORS.\n         ST    R0,DGCUMPRX\n         ST    R0,DGCUMPRN\n         MVC   DGINTTIM,WORK      COPY RMF INTERVAL START TIME.\n         MVC   DGINTDAT,WORK+4    COPY RMF INTERVAL START DATE.\n         CLI   SMF70RTY,127       IS THIS A PDLF SMF RECORD?\n         BNE   DORMFINT           NO, IT IS AN RMF SMF RECORD.\n         DROP  R1                 SMF70HDR.\n         USING PDLFHDR,R1\n         SLR   R9,R9\n         ICM   R9,3,PDLFCITV      GET PDLF INTERVAL LENGTH IN MINUTES.\n         CVD   R9,WORK            GET THE DECIMAL MINUTE COUNT.\n         SRP   WORK,5,0           CONVERT TO MMSS000C.\n         ZAP   DGINTDUR,WORK      SAVE IT.\n         OI    DGINTDUR+3,X'0F'   CONVERT TO MMSS000F.\n         M     R8,=F'60000'       CONVERT MINUTES TO MILLISECONDS.\n         ST    R9,DGINTSIZ        SAVE IT.\n         B     INTDUROK           INTERVAL DURATION NOW CALCULATED.\n         DROP  R1                 PDLFHDR.\n         SPACE\n         USING SMFRECD,R1\nINTEVENT L     R2,RECTIME         GET THE SMF TIME OF DAY.\n         IC    R2,=X'F0'          OVERLAY SECONDS FRACTION WITH SIGN.\n         SRL   R2,4               GET SMF RECORD TIME IN 0HHMMSSF.\n         ICM   R6,15,DGLSTINT     POINT TO THE LAST INTERVAL ENTRY.\n         BZ    DGCUMNOW           NO INTERVALS YET, ACCUMULATE FOR NOW.\nSMFINTLP CLC   DGINTDAT,SMF6DTE   EVENT DATE AFTER LAST INTERVAL?\n         BL    DGCUMNOW           YES, ACCUMULATE FOR NOW.\n         BH    SMFINTBK           NO, BEFORE SO GET PREVIOUS INTERVAL.\n         C     R2,DGINTTIM        IS TIME BEFORE INTERVAL START TIME?\n         BL    SMFINTBK           YES, SO GET PREVIOUS INTERVAL.\n         CLC   DGINTTIM,DGINTEND  START TIME AFTER END TIME?\n         BH    SMFGOTIT           YES, USE THIS INTERVAL.\n         C     R2,DGINTEND        EVENT TIME BEFORE INTERVAL END?\n         BL    SMFGOTIT           YES, USE THIS INTERVAL.\n         C     R6,DGLSTINT        POINTING TO LAST INTERVAL?\n         BE    DGCUMNOW           YES, SO ACCUMULATE FOR NOW.\n         B     GATMAIN            NO, MISSING INTERVAL SO DISCARD.\nSMFINTBK ICM   R6,15,DGINTPRV     POINT TO PREVIOUS INTERVAL.\n         BNZ   SMFINTLP           CHECK ITS TIME.\n         B     GATMAIN            MISSING INTERVAL SO DISCARD.\nDGCUMNOW SLR   R6,R6              CLEAR INTERVAL ENTRY POINTER.\nSMFGOTIT CLI   SMF6RTY,6          IS THIS JES2/JES3/PSF/XWTR OUTPUT?\n         BE    DGSYSOUT           YES, ACCUMULATE OUTPUT VOLUMES.\n         CLI   SMF57RTY,57        IS THIS NJE OUTPUT?\n         BE    DGNJEOUT           YES, ACCUMULATE OUTPUT VOLUMES.\n         B     GATMAIN            UNKNOWN TYPE - SHOULDN'T HAPPEN.\nDGSYSOUT ICM   R9,15,SMF6NLR      GET THE NUMBER OF LOGICAL RECORDS.\n         BZ    GATMAIN            FORGET IT IF NONE.\n         TM    SMF6SBS+1,X'0F'    WAS EXTERNAL WRITER USED?\n         BZ    DGXRITER           YES, EITHER THAT OR CA-DISPATCH.\n         LTR   R6,R6              ADDING TO AN EXISTING INTERVAL ENTRY?\n         BNZ   MOREOLDL           YES.\n         A     R9,DGCUMPRL        NO.\n         ST    R9,DGCUMPRL        UPDATE LOCAL PRINT LINE COUNT.\n         B     GATMAIN\nMOREOLDL A     R9,DGINTPRL\n         ST    R9,DGINTPRL        UPDATE LOCAL PRINT LINE COUNT.\n         B     PRMAXCHK\nDGXRITER LTR   R6,R6              ADDING TO AN EXISTING INTERVAL ENTRY?\n         BNZ   MOREOLDX           YES.\n         A     R9,DGCUMPRX        NO.\n         ST    R9,DGCUMPRX        UPDATE XWTR PRINT LINE COUNT.\n         B     GATMAIN\nMOREOLDX A     R9,DGINTPRX\n         ST    R9,DGINTPRX        UPDATE XWTR PRINT LINE COUNT.\n         B     PRMAXCHK\nDGNJEOUT CLI   SMF57SBS+1,2       JES2?\n         BNE   DGNJEOP3           NO.\n         ICM   R9,15,SMF57CNT     GET THE NUMBER OF LOGICAL RECORDS.\n         B     DGNJECHK\nDGNJEOP3 CLI   SMF57SBS+1,5       JES3?\n         BNE   GATMAIN            NO, UNKNOWN SUBSYSTEM.\n         CLC   =C'OP',32(R1)      OUTPUT?\n         BNE   GATMAIN            NO, PROBABLY 'JB' FOR JOB STREAM.\n         ICM   R9,15,158(R1)      GET THE NUMBER OF LOGICAL RECORDS.\nDGNJECHK BZ    GATMAIN            FORGET IT IF NONE.\n         LTR   R6,R6              ADDING TO AN EXISTING INTERVAL ENTRY?\n         BNZ   MOREOLDN           YES.\n         A     R9,DGCUMPRN\n         ST    R9,DGCUMPRN        UPDATE NJE PRINT LINE COUNT.\n         B     GATMAIN\nMOREOLDN A     R9,DGINTPRN\n         ST    R9,DGINTPRN        UPDATE NJE PRINT LINE COUNT.\nPRMAXCHK L     R9,DGINTPRL\n         A     R9,DGINTPRX\n         A     R9,DGINTPRN        GET TOTAL PRINT LINES THIS INTERVAL.\n         C     R9,DGMAXPRT        MORE THAN PREVIOUS HIGHEST?\n         BNH   GATMAIN            NO, RECORD NOW PROCESSED.\n         ST    R9,DGMAXPRT        YES, UPDATE THE HIGH-WATER-MARK.\n         B     GATMAIN\n         DROP  R1                 SMFRECD.\n         SPACE\n         USING SMF70HDR,R1\nDORMFINT MVC   DGINTDUR,SMF70INT  COPY RMF INTERVAL DURATION.\n         ZAP   WORK,DGINTDUR      COPY RMF INTERVAL DURATION.\n         SRP   WORK,64-5,0        GET INTERVAL WHOLE MINUTES.\n         MP    WORK,=PL2'60'      CONVERT MINUTES TO SECONDS.\n         SRP   WORK,3,0           CONVERT SECONDS TO MILLISECONDS.\n         AP    WORK,DGINTDUR+1(3) ADD TRUNCATED MILLISECONDS.\n         CVB   R0,WORK            GET BINARY DURATION MILLISECONDS.\n         ST    R0,DGINTSIZ        SAVE IT.\nINTDUROK MVI   DGCPUTIL,X'80'     FLAG NO-TYPE-70-YET.\n         MVI   DGNUCPCT,X'80'     FLAG NO-TYPE-71-YET.\n         MVI   DGPAGEIN,X'80'     FLAG NO-TYPE-71-YET.\n         LTR   R4,R4              ENCOUNTERED END OF BACKWARD CHAIN?\n         BNZ   LATERINT           NO, THIS INTERVAL IS LATER.\n         ICM   R0,15,DGNUMINT     YES, ANY INTERVALS ON CHAIN?\n         BZ    FIRSTINT           NO, THIS IS THE FIRST RECORD READ.\n         ST    R5,DGINTNXT        YES, NEW POINTS TO OLD NEXT ENTRY.\n         ST    R6,4(,R5)          OLD NEXT POINTS BACK TO NEW ENTRY.\n         ST    R6,DGFSTINT        NEW ENTRY IS NOW THE FIRST ENTRY.\n         B     CTINTENT           RMF INTERVAL ENTRY CHAIN NOW UPDATED.\nFIRSTINT ST    R6,DGFSTINT        NEW ENTRY IS NOW THE FIRST ENTRY.\n         ST    R6,DGLSTINT        NEW ENTRY IS NOW THE LAST ENTRY.\n         B     CTINTENT           RMF INTERVAL ENTRY CHAIN NOW UPDATED.\nLATERINT ST    R4,DGINTPRV        NEW ENTRY POINTS BACK TO OLD ENTRY.\n         MVC   DGINTNXT,0(R4)     OLD FORWARD POINTER IS NEW FWD PTR.\n         ST    R6,4(,R5)          POINT BACK TO NEW ENTRY.\n         ST    R6,0(,R4)          POINT FORWARD TO NEW ENTRY.\n         DROP  R6                 DGRMFINT.\nCTINTENT LA    R0,1\n         A     R0,DGNUMINT        INCREMENT THE INTERVAL ENTRY COUNTER\n         ST    R0,DGNUMINT        FOR THIS SYSTEM.\n         LR    R4,R6              COPY THE INTERVAL ENTRY ADDRESS.\n         USING DGRMFINT,R4\nINTCHNOK DS    0H\n         CLI   SMF70RTY,127       IS THIS A PDLF SMF RECORD?\n         BE    DATGAT7F           YES, EXECUTE RELEVANT CODE.\n         MVC   RMFSAMCT,SMF70SAM  GET RMF SAMPLE COUNT FOR INTERVAL.\n         MVC   RMFSMFRL,SMF70SRL  GET RMF SMF RECORD LEVEL INDICATOR.\n         CLI   SMF70RTY,70        IS THIS A TYPE 70 SMF RECORD?\n         BE    DATGAT70           YES, PROCESS IT.\n         CLI   SMF70RTY,71        IS THIS A TYPE 71 SMF RECORD?\n         BE    DATGAT71           YES, PROCESS IT.\n         CLI   SMF70RTY,72        IS THIS A TYPE 72 SMF RECORD?\n         BE    DATGAT72           YES, PROCESS IT.\n         CLI   SMF70RTY,73        IS THIS A TYPE 73 SMF RECORD?\n         BE    DATGAT73           YES, PROCESS IT.\n         CLI   SMF70RTY,74        IS THIS A TYPE 74 SMF RECORD?\n         BE    DATGAT74           YES, PROCESS IT.\n         CLI   SMF70RTY,75        IS THIS A TYPE 75 SMF RECORD?\n         BE    DATGAT75           YES, PROCESS IT.\n         CLI   SMF70RTY,78        IS THIS A TYPE 78 SMF RECORD?\n         BE    DATGAT78           YES, PROCESS IT.\n         B     GATMAIN            IGNORE UNWANTED RECORD.\n         TITLE 'PROCESS RMF SMF RECORD TYPE 70'\nDATGAT70 DS    0H                 PROCESS RMF SMF RECORD TYPE 70.\n         CLC   =H'1',SMF70STY     SUBTYPE 1?\n         BNE   GATMAIN            NO, SO RETURN.\n         MVC   DGPRSMNM,BLANKS    LOAD BLANKS FOR PR/SM LPAR NAME.\n         ICM   R15,3,SMF70BCN     ANY PR/SM DATA SECTIONS PRESENT?\n         BZ    NOTPARTN           NO, ASSUME NOT PR/SM PARTITION.\n         SLR   R15,R15\n         ICM   R15,1,SMF70PTN     GET THE PR/SM PARTITION NUMBER.\n         BZ    LPAR0CMF           ASSUME FIRST ENTRY, PROBABLY CMF.\n         DROP  R2                 SMF70PRO.\n         SPACE\n         ST    R15,WORK           SAVE THE PR/SM PARTITION NUMBER.\n         CLM   R15,3,SMF70BCN     ENOUGH PR/SM DATA SECTIONS PRESENT?\n         BH    NOTPARTN           NO, ASSUME NOT PR/SM PARTITION.\n         BCTR  R15,0              DECREMENT FOR INDEX.\n         LTR   R15,R15            ANY PR/SM DATA SECTIONS PRESENT?\n         BM    NOTPARTN           NO, ASSUME NOT PR/SM PARTITION.\n         MVC   WORK(2),SMF70BCL   GET PR/SM DATA SECTION LENGTH.\n         MH    R15,WORK           GET INDEX INTO PR/SM DATA SECTIONS.\nLPAR0CMF ICM   R0,15,SMF70BCS     GET OFFSET TO FIRST DATA SECTION.\n         ALR   R15,R0             GET OFFSET TO REQUIRED DATA SECTION.\n         ALR   R15,R1             POINT TO REQUIRED PR/SM DATA SECTION.\n         USING SMF70BCT,R15\n         MVC   DGPRSMNM,SMF70LPM  COPY LOGICAL PARTITION NAME.\n         MVC   DGCPUCNT+2(2),SMF70BDN  COPY LOGICAL PROCESSOR COUNT.\n         MVC   WORK+4(4),SMF70BDS COPY SECTION SKIP COUNT.\n         DROP  R15                SMF70BCT.\n         SLR   R7,R7\n         ICM   R7,3,SMF70BVL      GET LPAR DATA SECTION LENGTH.\n         ICM   R15,15,SMF70BVS    GET OFFSET TO LPAR DATA SECTION.\n         ALR   R15,R1             POINT TO FIRST LPAR DATA SECTION.\n         ICM   R0,15,WORK+4       GET COUNT OF SECTIONS TO SKIP.\n         BZ    CPSKIPOK           DO NOT SKIP ANY SECTIONS.\nCPSKIPLP ALR   R15,R7             SKIP OVER ONE LPAR DATA SECTION.\n         BCT   R0,CPSKIPLP\n         USING SMF70BPD,R15\nCPSKIPOK SLR   R8,R8\n         SLR   R9,R9              ZERO ACCUMULATOR.\n         L     R0,DGCPUCNT        GET CENTRAL PROCESSOR COUNT.\n         XC    WORK(16),WORK      CLEAR SOME BYTES.\nLPARLOOP CLI   SMF70BPS,X'FF'     DEDICATED PROCESSOR?\n         BE    NOTPARTN           YES, TREAT AS PR/SM PARTITION.\n         SLR   R5,R5              CLEAR FOR INSERT.\n         ICM   R5,3,SMF70VPA      GET LOGICAL PARTITION ADDRESS.\n         LA    R5,WORK(R5)        POINT TO A FLAG BYTE.\n         MVI   0(R5),X'FF'        REMEMBER THE CP NUMBER USED HERE.\n         ICM   R5,15,SMF70PDT+4   LOAD DISPATCH MICROSECONDS.\n         ALR   R9,R5              ACCUMULATE DISPATCH MICROSECONDS.\n         BC    12,CPOFLWOK        THERE IS NO OVERFLOW.\n         LA    R8,1(,R8)          COUNT OVERFLOW.\nCPOFLWOK ALR   R15,R7             POINT TO THE NEXT LPAR DATA SECTION.\n         BCT   R0,LPARLOOP        PROCESS NEXT LPAR FOR THIS OS IF ANY.\n         D     R8,DGINTSIZ        DIVIDE ACCUMLATOR BY ELAPSED TIME.\n         SLR   R8,R8\n         D     R8,DGCPUCNT        AVERAGE UTILIZATION OVER EACH CP.\n         ST    R9,DGCPUTIL        SAVE AVERAGE CPU BUSY FOR THIS MVS.\n         ICM   R15,15,SMF70BVS    GET OFFSET TO LPAR DATA SECTION.\n         ALR   R15,R1             POINT TO FIRST LPAR DATA SECTION.\n         SLR   R0,R0\n         ICM   R0,3,SMF70BVN      GET COUNT OF LPAR DATA SECTIONS.\n         SLR   R8,R8\n         SLR   R9,R9              ZERO ACCUMULATOR.\nCPLPARLP CLI   SMF70BPS,X'FF'     DEDICATED PROCESSOR?\n         BE    NEXTCPLP           YES, CAN'T BE SHARING WITH THIS LPAR.\n         SLR   R5,R5              CLEAR FOR INSERT.\n         ICM   R5,3,SMF70VPA      GET LOGICAL PARTITION ADDRESS.\n         LA    R5,WORK(R5)        POINT TO A FLAG BYTE.\n         CLI   0(R5),X'FF'        CAN LPAR USE THIS CP?\n         BNE   NEXTCPLP           NO, DO NOT COUNT IT.\n         ICM   R5,15,SMF70PDT+4   YES, LOAD DISPATCH MICROSECONDS.\n         ALR   R9,R5              ACCUMULATE DISPATCH MICROSECONDS.\n         BC    12,NEXTCPLP        THERE IS NO OVERFLOW.\n         LA    R8,1(,R8)          COUNT OVERFLOW.\nNEXTCPLP ALR   R15,R7             POINT TO THE NEXT LPAR DATA SECTION.\n         BCT   R0,CPLPARLP        PROCESS NEXT LPAR IF ANY.\n         D     R8,DGINTSIZ        DIVIDE ACCUMLATOR BY ELAPSED TIME.\n         SLR   R8,R8\n         D     R8,DGCPUCNT        AVERAGE UTILIZATION OVER EACH CP.\n         ST    R9,DGCPBUSY        SAVE AVERAGE PHYSICAL CPU BUSY.\n         B     DGCPOKAY           NOW HAVE CPU AVERAGE UTILIZATION.\n         DROP  R15                SMF70BPD.\n         SPACE\nNOTPARTN SLR   R0,R0\n         ICM   R0,3,SMF70CPN      GET THE CPU DATA SECTION COUNT.\n         BZ    GATMAIN            UNEXPECTED FORMAT IF NONE.\n         ST    R0,DGCPUCNT        SAVE THE CENTRAL PROCESSOR COUNT.\n         SLR   R2,R2              ZERO ACCUMULATOR.\n         SLR   R7,R7\n         ICM   R7,3,SMF70CPL      GET THE CPU DATA SECTION LENGTH.\n         ICM   R15,15,SMF70CPS    GET THE CPU DATA SECTION OFFSET.\n         ALR   R15,R1             POINT TO THE FIRST CPU DATA SECTION.\n         USING SMF70CPU,R15\nCPWAITLP ICM   R8,15,SMF70WAT     LOAD CPU DISPATCHED WAIT TIME.\n         ICM   R9,15,SMF70WAT+4\n         SRDL  R8,12              CONVERT TO MICROSECONDS.\n         ALR   R2,R9              ACCUMULATE WAIT MICROSECONDS.\n         ALR   R15,R7             POINT TO CPU DATA SECTION IF ANY.\n         BCT   R0,CPWAITLP        PROCESS NEXT CP IF ANY.\n         DROP  R15                SMF70CPU.\n         LR    R9,R2              GET TOTAL WAIT MICROSECONDS.\n         SLR   R8,R8\n         D     R8,DGINTSIZ        DIVIDE ACCUMLATOR BY ELAPSED TIME.\n         SLR   R8,R8\n         D     R8,DGCPUCNT        AVERAGE WAIT TIME OVER EACH CP.\n         LA    R8,1000\n         SR    R8,R9              CONVERT WAIT TO UTILIZATION.\n         ST    R8,DGCPUTIL        SAVE AVERAGE CPU BUSY FOR THIS MVS.\n         ST    R8,DGCPBUSY        SAVE AVERAGE PHYSICAL CPU BUSY.\n         SPACE\nDGCPOKAY DS    0H                 NOW CALCULATE THE AVERAGE I/O RATE.\n         SLR   R0,R0\n         ICM   R0,3,SMF70CPN      GET THE CPU DATA SECTION COUNT.\n         BZ    GATMAIN            UNEXPECTED FORMAT IF NONE.\n         SLR   R2,R2              ZERO ACCUMULATORS.\n         SLR   R9,R9              ZERO ACCUMULATORS.\n         SLR   R7,R7\n         ICM   R7,3,SMF70CPL      GET THE CPU DATA SECTION LENGTH.\n         ICM   R15,15,SMF70CPS    GET THE CPU DATA SECTION OFFSET.\n         ALR   R15,R1             POINT TO THE FIRST CPU DATA SECTION.\n         USING SMF70CPU,R15\nIOCOMPLP ICM   R8,15,SMF70SLH     LOAD ENTRY TO I/O SLIH COUNT.\n         AR    R2,R8              ACCUMULATE IT.\n         ICM   R8,15,SMF70TPI     LOAD TPI WITH CC=1 COUNT.\n         AR    R9,R8              ACCUMULATE IT.\n         ALR   R15,R7             POINT TO CPU DATA SECTION IF ANY.\n         BCT   R0,IOCOMPLP        PROCESS NEXT CP IF ANY.\n         DROP  R15                SMF70CPU.\n         AR    R2,R9              GET TOTAL I/O COMPLETION COUNT.\n         M     R8,=F'100000'      WANT HUNDREDTHS PER SECOND.\n         D     R8,DGINTSIZ        DIVIDE ACCUMLATOR BY ELAPSED TIME.\n         ST    R9,DGIOTPI1        SAVE TPI WITH CC=1 RATE.\n         LR    R9,R2              GET TOTAL I/O COMPLETION COUNT.\n         M     R8,=F'100000'      WANT HUNDREDTHS PER SECOND.\n         D     R8,DGINTSIZ        DIVIDE ACCUMLATOR BY ELAPSED TIME.\n         ST    R9,DGIORATE        SAVE TOTAL SYSTEM I/O RATE.\n         C     R9,DGMAXIOR        NEW MAXIMUM I/O RATE FOR SYSTEM?\n         BNH   ASIDCNTS           NO, RECORD ASID COUNT STATISTICS.\n         ST    R9,DGMAXIOR        YES, SAVE IT FOR SCALING PURPOSES.\n         SPACE\nASIDCNTS CLC   =H'1',SMF70ASN     ONE ASID DATA SECTION PRESENT?\n         BNE   GATMAIN            NO, UNEXPECTED FORMAT.\n         ICM   R15,15,SMF70ASS    GET THE ASID DATA SECTION OFFSET.\n         ALR   R15,R1             POINT TO THE FIRST CPU DATA SECTION.\n         USING SMF70AID,R15\n         LA    R5,DGMAXRDY        PROCESS READY USER ASID COUNTS.\n         LA    R6,DGRDYLOW\n         LA    R7,SMF70RMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXINU        PROCESS IN USER ASID COUNTS.\n         LA    R6,DGINULOW\n         LA    R7,SMF70IMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXOTU        PROCESS OUT USER ASID COUNTS.\n         LA    R6,DGOTULOW\n         LA    R7,SMF70OMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXWTU        PROCESS WAIT USER ASID COUNTS.\n         LA    R6,DGWTULOW\n         LA    R7,SMF70WMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXJOB        PROCESS BATCH JOB ASID COUNTS.\n         LA    R6,DGJOBLOW\n         LA    R7,SMF70BMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXSTC        PROCESS STARTED TASK ASID COUNTS.\n         LA    R6,DGSTCLOW\n         LA    R7,SMF70SMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXTSU        PROCESS TSO USER ASID COUNTS.\n         LA    R6,DGTSULOW\n         LA    R7,SMF70TMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXLRD        PROCESS LOGICAL READY ASID COUNTS.\n         LA    R6,DGLRDLOW\n         LA    R7,SMF70LMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXLWT        PROCESS LOGICAL WAIT ASID COUNTS.\n         LA    R6,DGLWTLOW\n         LA    R7,SMF70AMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXASC        PROCESS ASCH ASID COUNTS.\n         LA    R6,DGASCLOW\n         LA    R7,SMF70PMN-SMF70AID\n         BAS   R14,ASIDCALC\n         LA    R5,DGMAXOED        PROCESS OPEN EDITION MVS ASID COUNTS.\n         LA    R6,DGOEDLOW\n         LA    R7,SMF70PMN-SMF70AID\n         BAS   R14,ASIDCALC\n         B     GATMAIN            REQUEST NEXT INPUT RECORD.\n         DROP  R15                SMF70AID.\nASIDCALC DS    0H                 GET MIN, MAX AND AVERAGE ASID COUNTS.\n         CLM   R7,3,SMF70ASL      IS THE ASID SECTION LONG ENOUGH?\n         BNLR  R14                NO, THE FIGURES AREN'T SUPPLIED.\n         ALR   R7,R15             YES, POINT TO THE SOURCE DATA.\n         MVC   0(4,R6),0(R7)      COPY THE MINIMUM AND MAXIMUM COUNTS.\n         ICM   R9,15,4(R7)        GET TOTAL OF ALL SAMPLES.\n         M     R8,=F'10'          MULTIPLY BY TEN.\n         D     R8,RMFSAMCT        GET AVERAGE TO ONE DECIMAL PLACE.\n         ST    R9,4(,R6)          SAVE IT.\n         CLC   0(2,R5),2(R6)      NEW ALL-TIME MAXIMUM?\n         BNLR  R14                NO, RETURN.\n         MVC   0(2,R5),2(R6)      YES, COPY THE NEW HIGH-WATER-MARK.\n         BR    R14                RETURN.\n         SPACE\n         DROP  R1                 SMF70HDR.\n         TITLE 'PROCESS RMF SMF RECORD TYPE 71'\n         USING SMF71HDR,R1\nDATGAT71 DS    0H                 PROCESS RMF SMF RECORD TYPE 71.\n         CLC   =H'1',SMF71STY     SUBTYPE 1?\n         BNE   GATMAIN            NO, SO RETURN.\n         ICM   R15,3,SMF71PDN     PAGING DATA SECTION PRESENT?\n         BZ    GATMAIN            NO, SO RETURN.\n         ICM   R15,15,SMF71PDS    YES, GET ITS OFFSET.\n         ALR   R15,R1             POINT TO THE PAGING DATA SECTION.\n         USING SMF71PAG,R15\n         L     R0,DGINTSIZ        GET THE INTERVAL SIZE (MS).\n         ICM   R9,15,SMF71PIN     GET THE NON-VIO PAGE-IN COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGPAGEIN        SAVE IT.\n         ICM   R9,15,SMF71POT     GET THE NON-VIO PAGE-OUT COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGPAGOUT        SAVE IT.\n         ICM   R9,15,SMF71SIN     GET THE SWAP PAGE-IN COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGSWPGIN        SAVE IT.\n         ICM   R9,15,SMF71SOT     GET THE SWAP PAGE-OUT COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGSWPGOT        SAVE IT.\n         ICM   R9,15,SMF71VIN     GET THE VIO PAGE-IN COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGVIOIN         SAVE IT.\n         ICM   R9,15,SMF71VOT     GET THE VIO PAGE-OUT COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGVIOOUT        SAVE IT.\n         AL    R9,DGVIOIN\n         AL    R9,DGSWPGOT\n         AL    R9,DGSWPGIN\n         AL    R9,DGPAGOUT\n         AL    R9,DGPAGEIN        GET THE TOTAL SYSTEM PAGING RATE.\n         CL    R9,DGMAXPGR        NEW MAXIMUM SYSTEM PAGING RATE?\n         BNH   EPAGRTOK           NO.\n         ST    R9,DGMAXPGR        YES, SAVE IT FOR SCALING PURPOSES.\nEPAGRTOK ICM   R9,15,SMF71RES     GET THE EXPANDED PAGE READ COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGESTGRD        SAVE IT.\n         ICM   R9,15,SMF71PES     GET THE MOVE PAGE TO EXPANDED COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGESTGWR        SAVE IT.\n         A     R9,DGESTGRD        GET TOTAL EXPANDED READ/WRITE COUNT.\n         C     R9,DGMAXEIO        NEW MAXIMUM SYSTEM ESTOR I/O RATE?\n         BNH   ESTGRDOK           NO.\n         ST    R9,DGMAXEIO        YES, SAVE IT FOR SCALING PURPOSES.\nESTGRDOK ICM   R0,15,SMF71FIN     GET THE NUMBER OF NUCLEUS FRAMES.\n         LR    R9,R0              COPY IT.\n         ICM   R8,15,SMF71TFC     LOAD THE RSM FRAME COUNT.\n         AR    R0,R8              GET THE TOTAL USABLE FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET NUCLEUS CENTRAL STORAGE FRACTION.\n         ST    R9,DGNUCPCT        SAVE IT.\n         ICM   R9,15,SMF71AVQ     GET THE AVERAGE SQA FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET SQA CENTRAL STORAGE FRACTION.\n         ST    R9,DGSQAPCT        SAVE IT.\n         ICM   R9,15,SMF71AVP     GET THE AVERAGE CSA FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET CSA CENTRAL STORAGE FRACTION.\n         ST    R9,DGCSAPCT        SAVE IT.\n         ICM   R9,15,SMF71ALP     GET THE AVERAGE LPA FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET LPA CENTRAL STORAGE FRACTION.\n         ST    R9,DGLPAPCT        SAVE IT.\n         ICM   R9,15,SMF71AVS     GET THE AVERAGE NON-FIXED PVT COUNT.\n         ICM   R8,15,SMF71AVR     GET THE AVERAGE FIXED PVT COUNT.\n         AR    R9,R8              GET THE AVERAGE NON-LSQA PVT FRAMES.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET REGION CENTRAL STORAGE FRACTION.\n         ST    R9,DGRGNPCT        SAVE IT.\n         ICM   R9,15,SMF71ALS     GET THE AVERAGE LSQA FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET LSQA CENTRAL STORAGE FRACTION.\n         ST    R9,DGLSQPCT        SAVE IT.\n         MVC   DGUICLOW,SMF71LIC  COPY MINIMUM SYSTEM HIGH UIC.\n         MVC   DGUICHIG,SMF71HIC  COPY MAXIMUM SYSTEM HIGH UIC.\n         MVC   DGUICAVG,SMF71ACA  COPY AVERAGE SYSTEM HIGH UIC BY 10.\n         MVC   DGMIGLOW,SMF71LMA  COPY MINIMUM SYSTEM HIGH MIG AGE.\n         MVC   DGMIGHIG,SMF71HMA  COPY MAXIMUM SYSTEM HIGH MIG AGE.\n         MVC   DGMIGAVG,SMF71AMA  COPY AVERAGE SYSTEM HIGH MIG BY 10.\n         CLC   DGMIGHIG,DGMAXMIG  NEW MAXIMUM MIGRATION AGE FOR SYSTEM?\n         BNH   EXPMIGOK           NO.\n         MVC   DGMAXMIG,DGMIGHIG  YES, SAVE IT FOR SCALING PURPOSES.\nEXPMIGOK MVI   DGHPREXP,X'80'     INDICATE NO ESTOR USAGE STATISTICS.\n         TM    SMF71FLG,SMF71ESA  RECORD FROM AN MVS/ESA SYSTEM?\n         BZ    GATMAIN            NO, REQUEST NEXT INPUT RECORD.\n         ICM   R0,15,SMF71OLE     GET THE ONLINE ESTOR FRAME COUNT.\n         BZ    GATMAIN            ZERO, SO REQUEST NEXT INPUT RECORD.\n         ICM   R9,15,SMF71AHE     GET THE AVERAGE HIPERSPACE FRAME CNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET HIPERSPACE EXPD STORAGE FRACTION.\n         ST    R9,DGHPREXP        SAVE IT.\n         ICM   R9,15,SMF71ASE     GET THE AVERAGE SQA FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET SQA EXPANDED STORAGE FRACTION.\n         ST    R9,DGSQAEXP        SAVE IT.\n         ICM   R9,15,SMF71CAE     GET THE AVERAGE CSA FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET CSA EXPANDED STORAGE FRACTION.\n         ST    R9,DGCSAEXP        SAVE IT.\n         ICM   R9,15,SMF71LAE     GET THE AVERAGE LPA FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET LPA EXPANDED STORAGE FRACTION.\n         ST    R9,DGLPAEXP        SAVE IT.\n         ICM   R9,15,SMF71RAE     GET THE AVERAGE NON-LSQA PVT COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET REGION EXPANDED STORAGE FRACTION.\n         ST    R9,DGRGNEXP        SAVE IT.\n         ICM   R9,15,SMF71ALE     GET THE AVERAGE LSQA FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET LSQA EXPANDED STORAGE FRACTION.\n         ST    R9,DGLSQEXP        SAVE IT.\n         ICM   R9,15,SMF71AVE     GET THE AVERAGE VIO FRAME COUNT.\n         M     R8,=F'100'         WANT PERCENTAGE.\n         DR    R8,R0              GET VIO EXPANDED STORAGE FRACTION.\n         ST    R9,DGVIOEXP        SAVE IT.\n         B     GATMAIN            REQUEST NEXT INPUT RECORD.\n         SPACE\n         DROP  R1                 SMF71HDR.\n         TITLE 'PROCESS RMF SMF RECORD TYPE 72'\n         USING SMF72HDR,R1\nDATGAT72 DS    0H                 PROCESS RMF SMF RECORD TYPE 72.\n         CLC   =H'1',SMF72STY     SUBTYPE 1?\n         BNE   GATMAIN            NO, SO RETURN.\n         ICM   R15,3,SMF72WLN     WORKLOAD CONTROL SECTION PRESENT?\n         BZ    GATMAIN            NO, SO RETURN.\n         ICM   R15,3,SMF72PGN     ANY PERF. GROUP PERIOD DATA SECTION?\n         BZ    GATMAIN            NO, SO RETURN.\n         OI    DGSYSFLG,DGRMFPRF  FLAG SYSTEM HAS RMF WORKLOAD DATA.\n         ICM   R15,15,SMF72WLS    GET WORKLOAD CONTROL SECTION OFFSET.\n         ALR   R15,R1             POINT TO WORKLOAD CONTROL SECTION.\n         USING SMF72CTL,R15\n         SLR   R2,R2\n         ICM   R2,3,SMF72SUB      LOAD THE PERFORMANCE GROUP NUMBER.\n         LA    R7,DGFSTPG#        POINT TO THE PGN ENTRY POINTERS.\nDGPGNLP  LR    R5,R7              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R7,15,0(R7)        POINT TO THE NEXT PG NUMBER ENTRY.\n         BZ    MKNEWPGN           NO MORE PGN ENTRIES SO MAKE ONE.\n         USING DGPG#ENT,R7\n         C     R2,DGPG#           COMPARE PERFORMANCE GROUP NUMBERS.\n         BH    DGPGNLP            RECORD FROM HIGHER PGN SO CONTINUE.\n         BE    PGNENTOK           FOUND THE PGN ENTRY IN THE LIST.\n*        BL    MKNEWPGN           RECORD FROM LOWER PGN SO MAKE ENTRY.\n         SPACE\nMKNEWPGN LA    R0,DGPG#LEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R7,R0              POINT TO THE NEW ENTRY.\n         ST    R2,DGPG#           STORE PERFORMANCE GROUP NUMBER.\n         LA    R0,DGFSTPG#        POINT TO PG NUMBER TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         ST    R7,CHNENTRY        SUPPLY PGN ENTRY ADDRESS.\n         LA    R0,DGPG#NXT-DGPG#ENT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         LA    R0,DGPG#-DGPG#ENT\n         ST    R0,CHNCMPOF        SUPPLY PG NUMBER OFFSET.\n         LA    R0,4\n         ST    R0,CHNCMPLN        SUPPLY DGPG# LENGTH.\n         BAS   R14,CHAINADD       ADD PGN TO PGN ENTRY CHAIN.\nPGNENTOK LA    R0,1\n         A     R0,DGPG#NUM        INCREMENT THE NUMBER OF RMF INTERVALS\n         ST    R0,DGPG#NUM        WITH THIS PERFORMANCE GROUP NUMBER.\n         DROP  R7                 DGPG#ENT.\n         LA    R8,DGPERLEN        GET THE PERIOD SECTION LENGTH.\n         STH   R8,WORK\n         ICM   R8,3,SMF72PGN      GET THE PERIOD COUNT FOR THIS GROUP.\n         MH    R8,WORK            GET THE LENGTH FOR ALL PERIODS.\n         LA    R0,DGPRFLEN(,R8)   GET THE TOTAL GROUP ENTRY SIZE.\n         MVI   ENTRYTYP,5         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGPRFGRP,R6\n         ICM   R7,15,DGLSTPGN     POINT TO THE PREVIOUSLY LAST ENTRY.\n         BZ    FIRSTPRF           ZERO SO FIRST TYPE 72 FOR INTERVAL.\n         ST    R7,DGPRFPRV        NEW POINTS BACK TO OLD LAST.\n         ST    R6,0(,R7)          OLD LAST POINTS FORWARD TO NEW.\n         B     LASTPERF           GO UPDATE THE INTERVAL ENTRY.\nFIRSTPRF ST    R6,DGFSTPGN        THIS IS THE FIRST PG ENTRY.\nLASTPERF ST    R6,DGLSTPGN        THIS IS NOW THE LAST PG ENTRY.\n         ST    R2,DGPRFNUM        PUT PG NUMBER INTO ENTRY.\n         MVC   DGPRFFLG,SMF72FG1  COPY PERFORMANCE GROUP FLAGS.\n         MVC   DGPRFSYS,SMF72SYS  COPY ASSOCIATED SUBSYSTEM.\n         MVC   DGPRFCLS,SMF72CLS  COPY ASSOCIATED TRANSACTION CLASS.\n         MVC   DGPRFUSR,SMF72USR  COPY ASSOCIATED USER IDENTIFIER.\n         MVC   DGPRFNAM,SMF72NAM  COPY ASSOCIATED TRANSACTION NAME.\n         SLR   R0,R0\n         ICM   R0,3,SMF72PGN      GET THE PERFORMANCE PERIOD COUNT.\n         ST    R0,DGPRFPER        SAVE IT.\n         MVC   DGADJC,SMF72ADJ    SAVE THE ADJUSTMENT COEFFICIENT.\n         ICM   R0,15,SMF72CSD     LOAD THE CPU SERVICE COEFFICIENT.\n         BAS   R14,PICTOBIN       CONVERT IT TO BINARY TIMES 10.\n         ST    R0,DGTCBC          SAVE IT.\n         ICM   R0,15,SMF72SSD     LOAD THE SRB SERVICE COEFFICIENT.\n         BAS   R14,PICTOBIN       CONVERT IT TO BINARY TIMES 10.\n         ST    R0,DGSRBC          SAVE IT.\n         DROP  R15                SMF72CTL.\n         SLR   R5,R5\n         ICM   R5,3,SMF72PGL      GET PG PERIOD DATA SECTION LENGTH.\n         ST    R5,WORK            SAVE IT FOR LATER.\n         L     R5,DGPRFPER        LOAD THE COUNT OF PERIODS IN GROUP.\n         ICM   R15,15,SMF72PGS    GET FIRST PERIOD DATA SECTION OFFSET.\n         ALR   R15,R1             POINT TO PG PERIOD DATA SECTION.\n         USING SMF72WKL,R15\n         ST    R6,SAVE+24         SAVE THE PERF. GROUP ENTRY ADDRESS.\n         LA    R6,DGPERIOD        POINT TO FIRST PERF. PERIOD SECTION.\n         DROP  R6                 DGPRFGRP.\n         XC    SAVE+28(8),SAVE+28 CLEAR ACCUMULATORS.\n         USING DGPERIOD,R6\nDGPPLOOP ICM   R7,15,SMF72TTX     LOAD TERMINATED TRANSACTION COUNT.\n         BZ    PP0XACTN           SKIP DIVIDE IF NO TRANSACTION ENDED.\n         ST    R7,DGPERXAN        SAVE IT.\n         LR    R8,R7              COPY IT.\n         A     R8,SAVE+28         ACCUMULATE WHOLE GROUP XACTN COUNT.\n         ST    R8,SAVE+28\n         ICM   R9,15,SMF72TTM     GET PERIOD TRANSACTION ELAPSED TIME.\n         LR    R8,R9              COPY IT.\n         A     R8,SAVE+32         ACCUMULATE WHOLE GROUP XACTN TIME.\n         ST    R8,SAVE+32\n         SLR   R8,R8\n         CLI   SMF72TTM,X'7D'     WILL SCALING CAUSE AN S0C9?\n         BL    PPSCALOK           NO.\n         L     R9,RMFMAXTM        YES, SET TO MAXIMUM.\n         B     PPSCALDN           SCALING NOW DONE.\nPPSCALOK SLDL  R8,10              CONVERT TO MICROSECONDS.\n         D     R8,=F'1000'        CONVERT TO MILLESECONDS.\n         SLR   R8,R8\nPPSCALDN DR    R8,R7              GET MILLISECONDS PER TRANSACTION.\n         ST    R9,DGPERXTM        SAVE IT.\nPP0XACTN SLR   R8,R8\n         ICM   R9,15,SMF72SER     GET TOTAL SERVICE UNIT CONSUMPTION.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         D     R8,DGINTSIZ        GET SERVICE UNITS PER 100SECONDS.\n         ST    R9,DGPERSRV        SAVE IT.\n         ICM   R9,15,SMF72STS     GET THE SRB CPU SERVICE UNITS.\n         M     R8,DGADJC          CONVERT TO CPU 16*MICROSECONDS-ISH.\n         SRDL  R8,4               CONVERT TO CPU MICROSECONDS-ISH.\n         D     R8,DGSRBC          CONVERT TO CPU MICROSECONDS/10.\n         M     R8,=F'10'          CONVERT TO CPU MICROSECONDS.\n         LR    R7,R9              SAVE FOR NOW.\n         ICM   R9,15,SMF72CTS     GET THE TCB CPU SERVICE UNITS.\n         M     R8,DGADJC          CONVERT TO CPU 16*MICROSECONDS-ISH.\n         SRDL  R8,4               CONVERT TO CPU MICROSECONDS-ISH.\n         D     R8,DGTCBC          CONVERT TO CPU MICROSECONDS/10.\n         M     R8,=F'10'          CONVERT TO CPU MICROSECONDS.\n         ALR   R9,R7              ADD SRB TO TCB FOR TOTAL CPU TIME.\n         BC    12,PPOFLWOK        THERE IS NO OVERFLOW.\n         LA    R8,1(,R8)          COUNT OVERFLOW.\nPPOFLWOK D     R8,DGINTSIZ        GET PP CPU AVERAGE PERMILLAGE.\n         ST    R9,DGPERCPU        SAVE IT.\n         ICM   R9,15,SMF72PIN     GET THE PERIOD PAGE-IN COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         D     R8,DGINTSIZ        GET THE RATE.\n         ST    R9,DGPERPIN        SAVE IT.\n         AL    R15,WORK           POINT TO NEXT PP DATA SECTION.\n         LA    R6,DGPERLEN(,R6)   POINT TO NEXT PG PERIOD SECTION.\n         BCT   R5,DGPPLOOP        PROCESS THE NEXT PERFORMANCE PERIOD.\n         DROP  R6                 DGPERIOD.\n         SPACE\n         L     R6,SAVE+24         POINT BACK TO PERF. GROUP ENTRY.\n         USING DGPRFGRP,R6\n         ICM   R7,15,SAVE+28      GET PERF. GROUP TRANSACTION COUNT.\n         BZ    GATMAIN            RETURN IF NO TRANSACTIONS ENDED.\n         ST    R7,DGPRFXAN        SAVE THE GROUP TRANSACTION COUNT.\n         L     R9,SAVE+32         GET PERF. GROUP TRANSACTION TIME.\n         SLR   R8,R8\n         CLI   SAVE+32,X'7D'      WILL SCALING CAUSE AN S0C9?\n         BL    PGSCALOK           NO.\n         L     R9,RMFMAXTM        YES, SET TO MAXIMUM.\n         B     PGSCALDN           SCALING NOW DONE.\nPGSCALOK SLDL  R8,10              CONVERT TO MICROSECONDS.\n         D     R8,=F'1000'        CONVERT TO MILLESECONDS.\n         SLR   R8,R8\nPGSCALDN DR    R8,R7              GET MILLISECONDS PER TRANSACTION.\n         ST    R9,DGPRFXTM        SAVE IT.\n         B     GATMAIN            REQUEST NEXT INPUT RECORD.\n         SPACE\n         DROP  R6,R15             DGPERIOD, SMF72WKL.\n         SPACE\nDGADJC   DC    F'0'               SRM CPU ADJUSTMENT COEFFICIENT.\nDGTCBC   DC    F'0'               TCB CPU IPS SERVICE COEFF.  (1/10THS)\nDGSRBC   DC    F'0'               SRB CPU IPS SERVICE COEFF.  (1/10THS)\n         SPACE\n         DROP  R1                 SMF72HDR.\n         TITLE 'PROCESS RMF SMF RECORD TYPE 73'\n         USING SMF73HDR,R1\nDATGAT73 DS    0H                 PROCESS RMF SMF RECORD TYPE 73.\n         CLC   =H'1',SMF73STY     SUBTYPE 1?\n         BNE   GATMAIN            NO, SO RETURN.\n         ICM   R15,3,SMF73HIN     CHANNEL PATH CONTROL SECTION PRESENT?\n         BZ    GATMAIN            NO, SO RETURN.\n         ICM   R15,15,SMF73HIS    YES, GET ITS OFFSET.\n         ALR   R15,R1             POINT TO IT.\n         USING SMF73CTL,R15\n         MVC   WORK(4),SMF73SMP   COPY SRM CHANNEL SAMPLE COUNT.\n         DROP  R15                SMF73CTL.\n         SLR   R5,R5\n         ICM   R5,3,SMF73HPN      ANY CHANNEL PATH DATA SECTIONS?\n         BZ    GATMAIN            NO, SO RETURN.\n         STH   R5,WORK+4          YES, SAVE THE NUMBER.\n         SLR   R7,R7\n         ICM   R7,3,SMF73HPL      GET THE LENGTH OF CHP DATA SECTION.\n         STH   R7,WORK+6          SAVE THE LENGTH.\n         LA    R7,DGCHPLEN        GET THE LENGTH OF A CHPID SECTION.\n         MH    R7,WORK+4          MULTIPLY BY CHPID COUNT.\n         LA    R0,DGCHNLEN(,R7)   GET SIZE FOR NEW CHANNEL PATH ENTRY.\n         MVI   ENTRYTYP,3         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              COPY THE ENTRY ADDRESS.\n         ST    R6,DGFSTCHN        SAVE THE ADDRESS.\n         ST    R6,DGLSTCHN\n         USING DGCHPID,R6\n         ST    R5,DGCHNNUM        SUPPLY THE CHPID COUNT.\n         LA    R6,DGCHPATH        POINT TO THE FIRST CHPID SECTION.\n         DROP  R6                 DGCHPID.\n         USING DGCHPATH,R6\n         ICM   R15,15,SMF73HPS    GET CHANNEL PATH DATA SECTION OFFSET.\n         ALR   R15,R1             POINT TO CHANNEL PATH DATA SECTION.\n         USING SMF73CHA,R15\nCHPIDLP  DS    0H                 PROCESS NEXT CHPID.\n         STH   R5,WORK+4          SAVE REMAINING CHPID COUNT.\n         TM    SMF73FG2,SMF73STA  IS THE CHPID ONLINE?\n         BNO   CHPIDOFF           NO, SKIP DISPLAY ITEM CREATION.\n         SLR   R2,R2\n         IC    R2,SMF73PID        LOAD THE CHANNEL PATH NUMBER.\n         LA    R7,DGFSTCH#        POINT TO THE CHN ENTRY POINTERS.\nDGCHNLP  LR    R5,R7              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R7,15,0(R7)        POINT TO THE NEXT CHP NUMBER ENTRY.\n         BZ    MKNEWCHN           NO MORE CHN ENTRIES SO MAKE ONE.\n         USING DGCH#ENT,R7\n         C     R2,DGCH#           COMPARE CHANNEL PATH NUMBERS.\n         BH    DGCHNLP            RECORD FROM HIGHER CHN SO CONTINUE.\n         BE    CHNENTOK           FOUND THE CHN ENTRY IN THE LIST.\n*        BL    MKNEWCHN           RECORD FROM LOWER CHN SO MAKE ENTRY.\n         SPACE\nMKNEWCHN LA    R0,DGCH#LEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R7,R0              POINT TO THE NEW ENTRY.\n         ST    R2,DGCH#           STORE CHPID NUMBER.\n         MVC   DGCH#ACR,BLANKS    CLEAR CHANNEL TYPE ACRONYM.\n         LA    R0,DGFSTCH#        POINT TO CHPID NUMBER TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         ST    R7,CHNENTRY        SUPPLY CHPID ENTRY ADDRESS.\n         LA    R0,DGCH#NXT-DGCH#ENT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         LA    R0,DGCH#-DGCH#ENT\n         ST    R0,CHNCMPOF        SUPPLY CHPID NUMBER OFFSET.\n         LA    R0,4\n         ST    R0,CHNCMPLN        SUPPLY DGCH# LENGTH.\n         BAS   R14,CHAINADD       ADD CHPID TO CHPID ENTRY CHAIN.\nCHNENTOK LA    R0,1\n         A     R0,DGCH#NUM        INCREMENT THE COUNT OF RMF\n         ST    R0,DGCH#NUM        INTERVALS WITH THIS CHPID ID.\n         LA    R8,SMF73ACR-SMF73CHA+5\n         CH    R8,WORK+6          SECTION LONG ENOUGH FOR ACRONYM?\n         BL    CHPIDOFF           NO.\n         MVC   DGCH#ACR,SMF73ACR  YES, UPDATE IT.\n         DROP  R7                 DGCH#ENT.\nCHPIDOFF MVC   DGCHPPID,SMF73PID  COPY CHANNEL PATH ID AND FLAGS.\n         ICM   R9,15,SMF73BSY     GET THE CHANNEL PATH BUSY COUNT.\n         M     R8,=F'10000'       PREPARE FOR HUNDREDTHS OF PERCENT.\n         D     R8,WORK            GET BUSY FRACTION OF TIME.\n         ST    R9,DGCHPBSY        SAVE IT.\n         AH    R15,WORK+6         POINT TO NEXT CHPID DATA SECTION.\n         LA    R6,DGCHPLEN(,R6)   POINT TO NEXT CHPID ENTRY SECTION.\n         LH    R5,WORK+4          GET REMAINING CHPID COUNT.\n         BCT   R5,CHPIDLP         PROCESS NEXT CHPID, IF ANY.\n         B     GATMAIN            REQUEST NEXT INPUT RECORD.\n         SPACE\n         DROP  R6,R15             DGCHPATH, SMF73CHA.\n         SPACE\n         DROP  R1                 SMF73HDR.\n         TITLE 'PROCESS RMF SMF RECORD TYPE 74'\n         USING SMF74HDR,R1\nDATGAT74 DS    0H                 PROCESS RMF SMF RECORD TYPE 74.\n         CLC   =H'1',SMF74STY     SUBTYPE 1?\n         BNE   GATMAIN            NO, SO RETURN.\n         SLR   R5,R5\n         ICM   R5,3,SMF74DDN      ANY DEVICE DATA SECTIONS?\n         BZ    GATMAIN            NO, SO RETURN.\n         SLR   R7,R7\n         ICM   R7,3,SMF74DDL      GET THE LENGTH OF DEV DATA SECTION.\n         STH   R7,WORK+6          SAVE THE LENGTH.\n         ICM   R15,15,SMF74DDS    GET FIRST DEVICE DATA SECTION OFFSET.\n         ALR   R15,R1             POINT TO FIRST DEVICE DATA SECTION.\n         USING SMF74B,R15\nDEVICELP DS    0H                 PROCESS NEXT DEVICE.\n         STH   R5,WORK+4          SAVE REMAINING DEVICE COUNT.\n         SLR   R2,R2\n         ICM   R2,3,SMF74NUM      LOAD THE DEVICE NUMBER.\n         LA    R7,DGFSTDV#        POINT TO THE DEV ENTRY POINTERS.\nDGDEVLP  LR    R5,R7              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R7,15,0(R7)        POINT TO THE NEXT DEV NUMBER ENTRY.\n         BZ    MKNEWDEV           NO MORE DVN ENTRIES SO MAKE ONE.\n         USING DGDV#ENT,R7\n         C     R2,DGDV#           COMPARE DEVICE NUMBERS.\n         BH    DGDEVLP            RECORD FROM HIGHER DEV SO CONTINUE.\n         BE    DEVENTOK           FOUND THE DEVICE ENTRY IN THE LIST.\n*        BL    MKNEWDEV           RECORD FROM LOWER DEV SO MAKE ENTRY.\n         SPACE\nMKNEWDEV LA    R0,DGDV#LEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R7,R0              POINT TO THE NEW ENTRY.\n         ST    R2,DGDV#           STORE DEVICE NUMBER.\n         LA    R0,DGFSTDV#        POINT TO DEVICE NUMBER TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         ST    R7,CHNENTRY        SUPPLY DEVICE NUMBER ENTRY ADDRESS.\n         LA    R0,DGDV#NXT-DGDV#ENT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         LA    R0,DGDV#-DGDV#ENT\n         ST    R0,CHNCMPOF        SUPPLY DEVICE NUMBER OFFSET.\n         LA    R0,4\n         ST    R0,CHNCMPLN        SUPPLY DGDV# LENGTH.\n         BAS   R14,CHAINADD       ADD DEV# TO DEVICE NUMBER CHAIN.\nDEVENTOK LA    R0,1\n         A     R0,DGDV#NUM        INCREMENT THE NUMBER OF RMF\n         ST    R0,DGDV#NUM        INTERVALS WITH THIS DEVICE NUMBER.\n         DROP  R7                 DGDV#ENT.\n         LA    R0,DGDEVLEN        GET THE DEVICE ENTRY SIZE.\n         MVI   ENTRYTYP,4         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGDEVICE,R6\n         ICM   R7,15,DGLSTDEV     POINT TO THE PREVIOUSLY LAST ENTRY.\n         BZ    FIRSTDEV           ZERO SO FIRST TYPE 74 FOR INTERVAL.\n         ST    R7,DGDEVPRV        NEW POINTS BACK TO OLD LAST.\n         ST    R6,0(,R7)          OLD LAST POINTS FORWARD TO NEW.\n         B     LASTDEV            GO UPDATE THE INTERVAL ENTRY.\nFIRSTDEV ST    R6,DGFSTDEV        THIS IS THE FIRST DEVICE ENTRY.\nLASTDEV  ST    R6,DGLSTDEV        THIS IS NOW THE LAST DEVICE ENTRY.\n         ST    R2,DGDEVNAM        PUT DEVICE NUMBER INTO ENTRY.\n         ICM   R2,3,SMF74LCU      GET LOGICAL CONTROL UNIT NUMBER.\n         ST    R2,DGDEVLCU        PUT LCU NUMBER INTO ENTRY.\n         MVC   DGDEVFLG,SMF74CNF  COPY DEVICE FLAG BYTE INTO ENTRY.\n         MVC   DGDEVVOL,SMF74SER  COPY VOLUME SERIAL NUMBER.\n         MVC   DGDEVTYP,SMF74TYP  COPY DEVICE UNIT TYPE BYTES.\n         MVC   DGDEVSGN,SMF74SGN  COPY DEVICE SMS STORAGE GROUP NAME.\n         OI    DGDEVFL2,DGDEV0IO  ASSUME ZERO I/O IN INTERVAL.\n         ICM   R9,15,SMF74SSC     GET THE DEVICE I/O COUNT.\n         BZ    DVIOCTOK           ZERO SO SKIP SOME CALCULATIONS.\n         ST    R9,WORK            SAVE IT FOR LATER.\n         XI    DGDEVFL2,DGDEV0IO  NON-ZERO I/O IN INTERVAL.\n         M     R8,=F'100000'      WANT HUNDREDTHS PER SECOND.\n         D     R8,DGINTSIZ        DIVIDE I/O COUNT BY ELAPSED TIME.\n         ST    R9,DGDEVACT        SAVE DEVICE ACTIVATION RATE.\n         ICM   R0,15,SMF74MEC     GET THE DEVICE MEASURED I/O COUNT.\n         BZ    DVIOCTOK           ZERO SO SKIP SOME CALCULATIONS.\n         ICM   R9,15,SMF74CNN     GET THE DEVICE CONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET CONNECT MICROSECONDS PER IO.\n         ST    R9,DGDEVAVC        SAVE IT.\n         ICM   R9,15,SMF74DIS     GET THE DEVICE DISCONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET DISCONNECT MICROSECONDS PER IO.\n         ST    R9,DGDEVAVD        SAVE IT.\n         ICM   R9,15,SMF74PEN     GET THE DEVICE PENDING TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET PENDING MICROSECONDS PER IO.\n         ST    R9,DGDEVAVP        SAVE IT.\n         ICM   R9,15,SMF74DVB     GET THE DEVICE BUSY DELAY TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET BUSY DELAY MICROSECONDS PER IO.\n         ST    R9,DGDEVBSW        SAVE IT.\n         ICM   R9,15,SMF74CUB     GET THE CU BUSY DELAY TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET BUSY DELAY MICROSECONDS PER IO.\n         ST    R9,DGDEVCUW        SAVE IT.\n         TM    SMF74FLG,SMF74ESA  RECORD FROM AN MVS/ESA SYSTEM?\n         BZ    DIRPRTOK           NO.\n         CLI   RMFSMFRL,5         DIRECTOR PORT MEASUREMENT AVAILABLE?\n         BL    DIRPRTOK           NO.\n         ICM   R9,15,SMF74DPB     GET THE DIR. PORT BUSY DELAY TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET BUSY DELAY MICROSECONDS PER IO.\n         ST    R9,DGDEVDPW        SAVE IT.\nDIRPRTOK ICM   R9,15,SMF74CNN     GET THE DEVICE CONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         D     R8,DGINTSIZ        DIVIDE BY ELAPSED TIME.\n         ST    R9,DGDEVCON        SAVE CONNECT TIME PERMILLAGE.\n         ICM   R9,15,SMF74DIS     GET THE DEVICE DISCONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         D     R8,DGINTSIZ        DIVIDE BY ELAPSED TIME.\n         ST    R9,DGDEVDIS        SAVE DISCONNECT TIME PERMILLAGE.\n         ICM   R9,15,SMF74PEN     GET THE DEVICE PENDING TIME.\n         SLR   R8,R8\n         SLDL  R8,7               CONVERT TO MICROSECONDS.\n         D     R8,DGINTSIZ        DIVIDE BY ELAPSED TIME.\n         ST    R9,DGDEVPND        SAVE PENDING TIME PERMILLAGE.\n         ICM   R9,15,SMF74QUE     GET IOS-QUEUED I/O COUNT.\n         M     R8,=F'1000'        PREPARE FOR PERMILLAGE.\n         D     R8,WORK            GET QUEUED FRACTION OF ALL I/O'S.\n         ST    R9,DGDEVQUE        SAVE IT.\nDVIOCTOK ICM   R9,15,SMF74RSV     GET RESERVED SAMPLE COUNT.\n         M     R8,=F'1000'        PREPARE FOR PERMILLAGE.\n         D     R8,RMFSAMCT        GET RESERVED FRACTION OF TIME.\n         ST    R9,DGDEVRSV        SAVE IT.\n         ICM   R9,15,SMF74MTP     GET MOUNT PENDING SAMPLE COUNT.\n         M     R8,=F'1000'        PREPARE FOR PERMILLAGE.\n         D     R8,RMFSAMCT        GET MOUNT PENDING FRACTION OF TIME.\n         ST    R9,DGDEVMTP        SAVE IT.\n         ICM   R9,15,SMF74NRD     GET NOT READY SAMPLE COUNT.\n         M     R8,=F'1000'        PREPARE FOR PERMILLAGE.\n         D     R8,RMFSAMCT        GET NOT READY FRACTION OF TIME.\n         ST    R9,DGDEVNRD        SAVE IT.\n         AH    R15,WORK+6         POINT TO NEXT DEVICE DATA SECTION.\n         LH    R5,WORK+4          GET REMAINING DEVICE COUNT OF RECORD.\n         BCT   R5,DEVICELP        PROCESS NEXT DEVICE, IF ANY.\n         B     GATMAIN            REQUEST NEXT INPUT RECORD.\n         SPACE\n         DROP  R6,R15             DGDEVICE, SMF74B.\n         SPACE\n         DROP  R1                 SMF74HDR.\n         TITLE 'PROCESS RMF SMF RECORD TYPE 75'\n         USING SMF75HDR,R1\nDATGAT75 DS    0H                 PROCESS RMF SMF RECORD TYPE 75.\n         CLC   =H'1',SMF75STY     SUBTYPE 1?\n         BNE   GATMAIN            NO, SO RETURN.\n         ICM   R15,3,SMF75PSN     PAGE/SWAP D/S DATA SECTION PRESENT?\n         BZ    GATMAIN            NO, SO RETURN.\n         ICM   R15,15,SMF75PSS    GET DATA SET DATA SECTION OFFSET.\n         ALR   R15,R1             POINT TO DATA SET DATA SECTION.\n         USING SMF75PSD,R15\n         LA    R7,DGFSTPDN        POINT TO THE PDN ENTRY POINTERS.\nDGPDNLP  LR    R5,R7              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R7,15,0(R7)        POINT TO THE NEXT PAGE DSN ENTRY.\n         BZ    MKNEWPDN           NO MORE PAGE DSN ENTRIES SO MAKE ONE.\n         USING DGPDNENT,R7\n         CLC   DGPDNAME,SMF75DSN  COMPARE PAGE/SWAP DATA SET NAMES.\n         BE    PDNENTOK           FOUND THE PAGE DSN ENTRY IN THE LIST.\n         B     DGPDNLP            NOT THIS ONE SO CONTINUE SEARCH.\n         SPACE\nMKNEWPDN LA    R0,DGPDNLEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R7,R0              POINT TO THE NEW ENTRY.\n         MVC   DGPDNAME,SMF75DSN  LOAD PAGE/SWAP DATA SET NAME.\n         LA    R0,DGFSTPDN        POINT TO DEVICE NUMBER TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         ST    R7,CHNENTRY        SUPPLY PDN ENTRY ADDRESS.\n         LA    R0,DGPDNNXT-DGPDNENT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         LA    R0,DGPDNAME-DGPDNENT\n         ST    R0,CHNCMPOF        SUPPLY PAGE DATA SET NAME OFFSET.\n         LA    R0,4               SMALL VALUE FOR LITTLE SORTING.\n         ST    R0,CHNCMPLN        SUPPLY DATA SET NAME SORT LENGTH.\n         BAS   R14,CHAINADD       ADD DSN TO DSN CHAIN.\nPDNENTOK LA    R0,1\n         A     R0,DGPDNNUM        INCREMENT THE NUMBER OF RMF INTERVALS\n         ST    R0,DGPDNNUM        WITH THIS PAGE DATA SET NAME.\n         DROP  R7                 DGPDNENT.\n         LA    R0,DGPAGLEN        GET THE PAGE DATA SET ENTRY SIZE.\n         MVI   ENTRYTYP,6         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGPAGEDS,R6\n         ICM   R7,15,DGLSTPAG     POINT TO THE PREVIOUSLY LAST ENTRY.\n         BZ    FIRSTPAG           ZERO SO FIRST TYPE 75 FOR INTERVAL.\n         ST    R7,DGPAGPRV        NEW POINTS BACK TO OLD LAST.\n         ST    R6,0(,R7)          OLD LAST POINTS FORWARD TO NEW.\n         B     LASTPAGE           GO UPDATE THE INTERVAL ENTRY.\nFIRSTPAG ST    R6,DGFSTPAG        THIS IS THE FIRST DATA SET ENTRY.\nLASTPAGE ST    R6,DGLSTPAG        THIS IS NOW THE LAST DATA SET ENTRY.\n         MVC   DGPAGDSN,SMF75DSN  COPY PAGE/SWAP DATA SET NAME.\n         MVC   DGPAGFLG,SMF75PST  COPY PAGE/SWAP DATA SET FLAGS.\n         MVC   DGPAGBAD,SMF75BDS  COPY UNUSABLE SLOT/SWAP SET COUNT.\n         ICM   R0,15,SMF75SLA     GET THE DATA SET SLOT/SWAP SET SIZE.\n         BNP   PAGSIZOK           HANDLE UNEXPECTED DATA.\n         ICM   R9,15,SMF75MXU     GET MAXIMUM USED COUNT.\n         M     R8,=F'1000'        PREPARE FOR PERMILLAGE.\n         DR    R8,R0              GET MAXIMUM FRACTION USED.\n         ST    R9,DGPAGMAX        SAVE IT.\n         ICM   R9,15,SMF75MNU     GET MINIMUM USED COUNT.\n         M     R8,=F'1000'        PREPARE FOR PERMILLAGE.\n         DR    R8,R0              GET MINIMUM FRACTION USED.\n         ST    R9,DGPAGMIN        SAVE IT.\n         ICM   R9,15,SMF75AVU     GET AVERAGE USED COUNT.\n         M     R8,=F'1000'        PREPARE FOR PERMILLAGE.\n         DR    R8,R0              GET AVERAGE FRACTION USED.\n         ST    R9,DGPAGAVG        SAVE IT.\nPAGSIZOK ICM   R9,15,SMF75USE     GET THE IN-USE SAMPLE COUNT.\n         BZ    PAGUSEOK           NO ACTIVITY CAPTURED BY RMF.\n         M     R8,=F'1000'        PREPARE FOR PERMILLAGE.\n         D     R8,RMFSAMCT        GET THE BUSY FRACTION OF TIME.\n         ST    R9,DGPAGBSY        SAVE IT.\n         M     R8,DGINTSIZ        GET BUSY MICROSECONDS.\n         ICM   R0,15,SMF75PGX     GET THE PAGE TRANSFER COUNT.\n         BZ    PAGUSEOK           HANDLE ZERO ACTIVITY.\n         DR    R8,R0              GET MICROSECONDS/PAGE-TRANSFERRED.\n         ST    R9,DGPAGTIM        SAVE PAGE TRANSFER SERVICE TIME.\nPAGUSEOK ICM   R9,15,SMF75SIO     GET THE DATA SET I/O REQUEST COUNT.\n         M     R8,=F'100000'      SCALE IT FOR MILLISECONDS.\n         D     R8,DGINTSIZ        DIVIDE I/O COUNT BY ELAPSED TIME.\n         ST    R9,DGPAGIOR        SAVE THE DATA SET I/O RATE.\n         ICM   R9,15,SMF75PGX     GET THE PAGE TRANSFER COUNT.\n         M     R8,=F'100000'      SCALE IT FOR MILLISECONDS.\n         D     R8,DGINTSIZ        DIVIDE XFR COUNT BY ELAPSED TIME.\n         ST    R9,DGPAGXFR        SAVE THE DATA SET TRANSFER RATE.\n         B     GATMAIN            REQUEST NEXT INPUT RECORD.\n         SPACE\n         DROP  R6,R15             DGPAGEDS, SMF75PSD.\n         SPACE\n         DROP  R1                 SMF75HDR.\n         TITLE 'PROCESS RMF SMF RECORD TYPE 78'\n         USING SMF78HDR,R1\nDATGAT78 DS    0H                 PROCESS RMF SMF RECORD TYPE 78.\n         CLC   =H'2',SMF78STY     SUBTYPE 2?\n         BNE   GATMAIN            NO, SO RETURN.\n         ICM   R15,3,SMF78DCN     VS COMMON STORAGE SECTION PRESENT?\n         BZ    GATMAIN            NO, SO RETURN.\n         ICM   R15,15,SMF78DCS    GET COMMON STG DATA SECTION OFFSET.\n         ALR   R15,R1             POINT TO COMMON STORAGE DATA SECTION.\n         USING R782COMN,R15\n         ICM   R0,15,R782CS       GET TOTAL CSA SIZE.\n         BZ    GATMAIN            AVOID ABEND FOR ZERO DATA.\n         ST    R0,WORK+4          SAVE IT FOR LATER.\n         ICM   R9,15,R782CSAU+8   GET MAXIMUM CSA USAGE.\n         M     R8,=F'1000'        MULTIPLY FOR PERMILLAGE.\n         DR    R8,R0              GET MAXIMUM CSA USAGE PERMILLAGE.\n         STH   R9,DGCSAMAX        SAVE IT.\n         MVC   DGCSAALC,R782CSAL+8     COPY MAXIMUM CSA ALLOCATION.\n         MVC   DGCSAEXT,R782CSLF  COPY MINIMUM CSA LARGEST FREE EXTENT.\n         LA    R6,R782227K+196    GET CSA SUBPOOL 227 AVERAGE USAGE.\n         BAS   R7,CMNAVG78\n         STH   R9,DG227AVG\n         LA    R6,R782228K+196    GET CSA SUBPOOL 228 AVERAGE USAGE.\n         BAS   R7,CMNAVG78\n         STH   R9,DG228AVG\n         LA    R6,R782231K+196    GET CSA SUBPOOL 231 AVERAGE USAGE.\n         BAS   R7,CMNAVG78\n         STH   R9,DG231AVG\n         LA    R6,R782241K+196    GET CSA SUBPOOL 241 AVERAGE USAGE.\n         BAS   R7,CMNAVG78\n         STH   R9,DG241AVG\n         LA    R6,R782CSAU+16     GET CSA TOTAL AVERAGE USAGE.\n         BAS   R7,CMNAVG78\n         STH   R9,DGCSAAVG\n         ICM   R0,15,R782ECS      GET TOTAL ECSA SIZE.\n         BZ    GATMAIN            AVOID ABEND FOR ZERO DATA.\n         ST    R0,WORK+4          SAVE IT FOR LATER.\n         ICM   R9,15,R782CSAU+28  GET MAXIMUM ECSA USAGE.\n         M     R8,=F'1000'        MULTIPLY FOR PERMILLAGE.\n         DR    R8,R0              GET MAXIMUM ECSA USAGE PERMILLAGE.\n         STH   R9,DGECSAMX        SAVE IT.\n         MVC   DGECSAAL,R782CSAL+28   COPY MAXIMUM ECSA ALLOCATION.\n         MVC   DGECSAXT,R782CSLF+20   COPY MIN. ECSA LRGST FREE XTNT.\n         LA    R6,R782CSAU+36     GET ECSA TOTAL AVERAGE USAGE.\n         BAS   R7,CMNAVG78\n         STH   R9,DGECSAAV\n         B     GATMAIN            REQUEST NEXT INPUT RECORD.\n         SPACE\nCMNAVG78 DS    0H                 GET FLOATING POINT AVERAGE.\n         MVC   WORK(4),0(R6)      COPY SAMPLE TOTAL.\n         LE    E4,WORK            LOAD SAMPLE TOTAL.\n         ICM   R0,15,RMFSAMCT     GET SAMPLE COUNT.\n         BZ    GATMAIN            AVOID ABEND FOR ZERO DATA.\n         BAS   R14,FIXFL          GET SAMPLE COUNT IN FLOATING POINT.\n         DDR   E4,E0              GET AVERAGE USAGE.\n         LDR   E0,E4              COPY IT.\n         BAS   R14,FLFIX          CONVERT TO FIXED POINT.\n         LR    R9,R0              COPY IT.\n         M     R8,=F'1000'        MULTIPLY FOR PERMILLAGE.\n         D     R8,WORK+4          GET PERMILLAGE.\n         BR    R7                 RETURN TO CALLER.\n         SPACE\n         DROP  R15                R782COMN.\n         SPACE\n         DROP  R1                 SMF78HDR.\n         TITLE 'PROCESS PERFORMANCE DATA LOGGING FACILITY DATA'\n         USING PDLFHDR,R1\nDATGAT7F DS    0H\n         TM    PDLFCFLG,PDLFCMNP  WAS MEASUREMENT POSSIBLE?\n         BO    GATMAIN            NO, IPS WAS PROBABLY SET IN INTERVAL.\n         LA    R2,PDLFCMNE        POINT TO FIRST ELEMENT DESCRIPTOR.\n         USING PDLFCELM,R2\n         CLI   PDLFCENO,1         ELEMENT NUMBER ONE?\n         BNE   GATMAIN            NO, UNEXPECTED FORMAT SO DISCARD IT.\n         SLR   R15,R15\n         ICM   R15,3,PDLFCOFF     GET OFFSET TO FIRST ELEMENT.\n         LA    R15,PDLFCMNS(R15)  POINT TO THE FIRST ELEMENT.\n         CLC   =C'S001',PDLFCRID  SYSTEM PERFORMANCE RECORD?\n         BE    SCANS001           YES.\n         CLC   =C'I001',PDLFCRID  I/O PERFORMANCE RECORD?\n         BE    SCANI001           YES.\n         CLC   =C'P001',PDLFCRID  PERFORMANCE GROUP PERFORMANCE RECORD?\n         BE    SCANP001           YES.\n         B     GATMAIN            UNKNOWN RECORD TYPE SO DISCARD IT.\n         SPACE 2\n*        USING PDLFS1,R15\nSCANS001 DS    0H                 PROCESS SYSTEM PERFORMANCE RECORD.\n         SLR   R0,R0\n         ICM   R0,3,PDLFCELN      GET THE CPU COUNT @ 1 BYTE PER CPU.\n         SLR   R5,R5              ZERO ACTIVE CPU COUNT.\n         SLR   R6,R6              ZERO WORK REGISTER.\n         SLR   R7,R7              ZERO CPU UTLIZATION ACCUMULATOR.\nS1CPULP  CLI   0(R15),X'FF'       ACTIVE CPU?\n         BE    S1CPUNXT           NO, DO NOT COUNT IT.\n         IC    R6,0(,R15)         YES, GET ITS UTILIZATION.\n         AR    R7,R6              ACCUMULATE IT.\n         LA    R5,1(,R5)          INCREMENT ACTIVE CPU COUNT.\nS1CPUNXT LA    R15,1(,R15)        POINT TO THE NEXT CPU'S BUSY RATE.\n         BCT   R0,S1CPULP         PROCESS NEXT CPU ENTRY.\n         LTR   R5,R5              ANY ACTIVE CPU?\n         BZ    S1PAGING           NO.  (SHOULDN'T HAPPEN.)\n         ST    R5,DGCPUCNT        YES, SAVE THE ACTIVE CPU COUNT.\n         M     R6,=F'10'          CONVERT PERCENTAGE TO PERMILLAGE.\n         DR    R6,R5              GET AVERAGE CPU UTILIZATION.\n         ST    R7,DGCPUTIL        SAVE LOGICAL CPU BUSY RATE.\n         ST    R7,DGCPBUSY        SAVE PHYSICAL CPU BUSY RATE.\nS1PAGING ICM   R0,3,PDLFCELN      GET THE THE LENGTH OF ELEMENT 1.\n*        DROP  R15                PDLFS1.\n         AR    R15,R0             POINT TO ELEMENT 2.\n         LA    R2,PDLFCELE        POINT TO THE ELEMENT 2 DESCRIPTOR.\n         CLI   PDLFCENO,2         ELEMENT NUMBER TWO?\n         BNE   GATMAIN            NO, UNEXPECTED FORMAT SO DISCARD IT.\n         USING PDLFS2,R15\n         L     R0,DGINTSIZ        GET THE INTERVAL SIZE (MS).\n         ICM   R9,15,PDLFS2PI     GET THE PAGE-IN COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGPAGEIN        SAVE IT.\n         ICM   R9,15,PDLFS2PO     GET THE PAGE-OUT COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGPAGOUT        SAVE IT.\n         ICM   R9,15,PDLFS2SI     GET THE SWAP PAGE-IN COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGSWPGIN        SAVE IT.\n         ICM   R9,15,PDLFS2SO     GET THE SWAP PAGE-OUT COUNT.\n         M     R8,=F'100000'      WANT RATE AS HUNDREDTHS PER SECOND.\n         DR    R8,R0              GET THE RATE.\n         ST    R9,DGSWPGOT        SAVE IT.\n         AL    R9,DGSWPGIN\n         AL    R9,DGPAGOUT\n         AL    R9,DGPAGEIN        GET THE TOTAL SYSTEM PAGING RATE.\n         CL    R9,DGMAXPGR        NEW MAXIMUM SYSTEM PAGING RATE?\n         BNH   GATMAIN            NO, END OF PDLF S001 RECORD STUFF.\n         ST    R9,DGMAXPGR        YES, SAVE IT FOR SCALING PURPOSES.\n         B     GATMAIN            END OF PDLF S001 RECORD PROCESSING.\n         DROP  R15,R2             PDLFS2, PDLFCELM.\n         SPACE 2\n*        USING PDLFIREC,R15\nSCANI001 DS    0H                 PROCESS I/O PERFORMANCE RECORD.\n         ST    R15,WORK           SAVE ELEMENT 1 ADDRESS.\n         LA    R5,256             GET THE NUMBER OF CHANNEL SECTIONS.\n         SLR   R6,R6              ZERO THE ACTIVE CHANNEL COUNTER.\nI1CHNLP1 DS    0H                 PROCESS NEXT CHANNEL.\n         CLI   0(R15),PDLFI1OF    ACTIVE CHANNEL?\n         BE    I1CHNNX1           NO, CHANNEL IS OFFLINE.\n         LA    R2,256             YES.\n         SLR   R2,R5              GET THE CHANNEL NUMBER.\n         LA    R7,DGFSTCH#        POINT TO THE CHN ENTRY POINTERS.\n         ST    R5,WORK+4          SAVE WORK REGISTER.\nI1CHNLP2 LR    R5,R7              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R7,15,0(R7)        POINT TO THE NEXT CHAN NUMBER ENTRY.\n         BZ    I1NEWCHN           NO MORE CHN ENTRIES SO MAKE ONE.\n         USING DGCH#ENT,R7\n         C     R2,DGCH#           COMPARE CHANNEL NUMBERS.\n         BH    I1CHNLP2           RECORD FROM HIGHER CHN SO CONTINUE.\n         BE    I1CENTOK           FOUND THE CHANNEL ENTRY IN THE LIST.\n*        BL    I1NEWCHN           RECORD FROM LOWER CHN SO MAKE ENTRY.\n         DROP  R7                 DGCH#ENT.\n         SPACE\nI1NEWCHN LA    R0,DGCH#LEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R9,R0              POINT TO THE NEW ENTRY.\n         USING DGCH#ENT,R9\n         ST    R2,DGCH#           STORE CHANNEL NUMBER.\n         LTR   R7,R7              ENCOUNTERED END OF FORWARD CHAIN?\n         BNZ   I1LWRCHN           NO, THIS CHANNEL NUMBER IS LOWER.\n         ICM   R0,15,DGNUMCH#     YES, ANY ENTRIES ON CHAIN?\n         BZ    I1FSTCHN           NO, THIS IS THE FIRST CHANNEL READ.\n         ST    R5,DGCH#PRV        YES, NEW POINTS BACK TO OLD LAST.\n         ST    R9,0(,R5)          OLD LAST POINTS FWD TO NEW ENTRY.\n         ST    R9,DGLSTCH#        NEW ENTRY IS NOW THE LAST ENTRY.\n         B     I1CNTCHN           CHN NUMBER ENTRY CHAIN NOW UPDATED.\nI1FSTCHN ST    R9,DGFSTCH#        NEW ENTRY IS NOW THE FIRST ENTRY.\n         ST    R9,DGLSTCH#        NEW ENTRY IS NOW THE LAST ENTRY.\n         B     I1CNTCHN           CHN NUMBER ENTRY CHAIN NOW UPDATED.\nI1LWRCHN ST    R7,DGCH#NXT        NEW ENTRY POINTS FWD TO OLD ENTRY.\n         MVC   DGCH#PRV,4(R7)     OLD BACK POINTER IS NEW BACK PTR.\n         ST    R9,0(,R5)          POINT FORWARD TO NEW ENTRY.\n         ST    R9,4(,R7)          POINT BACK TO NEW ENTRY.\n         DROP  R9                 DGCH#ENT.\nI1CNTCHN LA    R0,1\n         A     R0,DGNUMCH#        INCREMENT THE DIFFERENT CHANNEL\n         ST    R0,DGNUMCH#        NUMBER COUNT FOR THIS SYSTEM.\nI1CENTOK LA    R6,1(,R6)          COUNT THE ACTIVE CHANNEL.\n         L     R5,WORK+4          RESTORE WORK REGISTER.\nI1CHNNX1 LA    R15,2(,R15)        POINT TO NEXT CHANNEL FIELD.\n         BCT   R5,I1CHNLP1        PROCESS THE NEXT CHANNEL ENTRY.\n         SPACE\n         LA    R15,DGCHPLEN       GET THE CHPID SECTION LENGTH.\n         MR    R14,R6             GET LENGTH OF ALL CHPID SECTIONS.\n         LA    R0,DGCHNLEN(,R15)  GET THE INTERVAL CHPID ENTRY SIZE.\n         MVI   ENTRYTYP,3         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R7,R0              POINT TO THE NEW ENTRY.\n         ST    R7,DGFSTCHN        SAVE THE CHANNEL PATH ENTRY ADDRESS.\n         ST    R7,DGLSTCHN\n         USING DGCHPID,R7\n         ST    R6,DGCHNNUM        SAVE THE CHPID SECTION COUNT.\n         LA    R7,DGCHPATH        POINT TO THE FIRST SECTION.\n         DROP  R7                 DGCHPID.\n         USING DGCHPATH,R7\n         L     R15,WORK           POINT TO THE START OF ELEMENT 1.\n         LA    R0,256             GET MAXIMUM CHANNEL COUNT.\nI1CHNLP3 DS    0H\n         CLI   0(R15),PDLFI1OF    ACTIVE CHANNEL?\n         BE    I1CHNNX3           NO, CHANNEL IS OFFLINE.\n         LA    R9,256\n         SLR   R9,R0              GET THE CHANNEL NUMBER.\n         STC   R9,DGCHPPID        SAVE IT.\n         OI    DGCHPPID+1,X'01'   TURN ON RMF \"CHANNEL ONLINE\" FLAG.\n         ICM   R9,3,0(R15)        GET THE CHANNEL BUSY PERCENTAGE.\n         M     R8,=F'100'         MAKE IT HUNDREDTHS OF PERCENT.\n         ST    R9,DGCHPBSY        SAVE IT.\n         LA    R7,DGCHPLEN(,R7)   POINT TO NEXT CHANNEL PATH SECTION.\nI1CHNNX3 LA    R15,2(,R15)        POINT TO NEXT CHANNEL FIELD.\n         BCT   R0,I1CHNLP3        PROCESS NEXT CHANNEL FIELD, IF ANY.\n         DROP  R7                 DGCHPATH.\n*        DROP  R15                PDLFIREC.\n         SPACE 2\n*                                 PROCESS I/O DEVICE ELEMENT.\n         LA    R2,PDLFCMNE        POINT TO FIRST ELEMENT DESCRIPTOR.\n         USING PDLFCELM,R2\n         SLR   R15,R15\n         ICM   R15,3,PDLFCOFF     GET OFFSET TO FIRST ELEMENT.\n         LA    R15,PDLFCMNS(R15)  POINT TO THE FIRST ELEMENT.\n         SLR   R9,R9\n         ICM   R9,3,PDLFCELN      GET THE LENGTH OF THE 1ST ELEMENT.\n         ALR   R15,R9             POINT TO THE 2ND (DEVICE) ELEMENT.\n         USING PDLFI2HD,R15\n         LA    R2,PDLFCELE        POINT TO THE ELEMENT 2 DESCRIPTOR.\n         CLI   PDLFCENO,2         ELEMENT NUMBER TWO?\n         BNE   GATMAIN            NO, UNEXPECTED FORMAT SO DISCARD IT.\n         CLC   PDLFCELN,PDLFI2LN+2    CONSISTENT LENGTH FIELDS?\n         BNE   GATMAIN            NO, UNEXPECTED FORMAT SO DISCARD IT.\n         DROP  R2                 PDLFCELM.\n         ICM   R9,3,PDLFI2LN+2    GET THE WHOLE 2ND ELEMENT LENGTH.\n         SH    R9,=H'8'           ANY DEVICE DATA SECTIONS?\n         BZ    GATMAIN            NO, SO RETURN.\n         SLR   R7,R7\n         ICM   R7,3,PDLFI2EL      GET THE LENGTH OF DEV DATA SECTION.\n         BNP   GATMAIN            UNEXPECTED FORMAT SO DISCARD DATA.\n         STH   R7,WORK+6          SAVE THE LENGTH.\n         SLR   R8,R8              PREPARE FOR DIVIDE.\n         DR    R8,R7              GET THE NUMBER OF DEVICE ENTRIES.\n         LR    R5,R9              COPY IT.\n         LA    R15,PDLFI2ST       POINT TO FIRST DEVICE DATA SECTION.\n         DROP  R15                PDLFI2HD\n         USING PDLFI2ST,R15\nI1DEVLP1 DS    0H                 PROCESS NEXT DEVICE.\n         STH   R5,WORK+4          SAVE REMAINING DEVICE COUNT.\n         SLR   R2,R2\n         ICM   R2,3,PDLFI2AD      LOAD THE DEVICE NUMBER.\n         LA    R7,DGFSTDV#        POINT TO THE DEV ENTRY POINTERS.\nI1DEVLP2 LR    R5,R7              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R7,15,0(R7)        POINT TO THE NEXT DEV NUMBER ENTRY.\n         BZ    I1NEWDEV           NO MORE DVN ENTRIES SO MAKE ONE.\n         USING DGDV#ENT,R7\n         C     R2,DGDV#           COMPARE DEVICE NUMBERS.\n         BH    I1DEVLP2           RECORD FROM HIGHER DEV SO CONTINUE.\n         BE    I1DENTOK           FOUND THE DEVICE ENTRY IN THE LIST.\n*        BL    I1NEWDEV           RECORD FROM LOWER DEV SO MAKE ENTRY.\n         DROP  R7                 DGDV#ENT.\n         SPACE\nI1NEWDEV LA    R0,DGDV#LEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R9,R0              POINT TO THE NEW ENTRY.\n         USING DGDV#ENT,R9\n         ST    R2,DGDV#           STORE DEVICE NUMBER.\n         LTR   R7,R7              ENCOUNTERED END OF FORWARD CHAIN?\n         BNZ   I1LWRDVN           NO, THIS DEVICE NUMBER IS LOWER.\n         ICM   R0,15,DGNUMDV#     YES, ANY ENTRIES ON CHAIN?\n         BZ    I1FSTDVN           NO, THIS IS THE FIRST DEVICE READ.\n         ST    R5,DGDV#PRV        YES, NEW POINTS BACK TO OLD LAST.\n         ST    R9,0(,R5)          OLD LAST POINTS FWD TO NEW ENTRY.\n         ST    R9,DGLSTDV#        NEW ENTRY IS NOW THE LAST ENTRY.\n         B     I1CNTDVN           DEV NUMBER ENTRY CHAIN NOW UPDATED.\nI1FSTDVN ST    R9,DGFSTDV#        NEW ENTRY IS NOW THE FIRST ENTRY.\n         ST    R9,DGLSTDV#        NEW ENTRY IS NOW THE LAST ENTRY.\n         B     I1CNTDVN           DEV NUMBER ENTRY CHAIN NOW UPDATED.\nI1LWRDVN ST    R7,DGDV#NXT        NEW ENTRY POINTS FWD TO OLD ENTRY.\n         MVC   DGDV#PRV,4(R7)     OLD BACK POINTER IS NEW BACK PTR.\n         ST    R9,0(,R5)          POINT FORWARD TO NEW ENTRY.\n         ST    R9,4(,R7)          POINT BACK TO NEW ENTRY.\n         DROP  R9                 DGDV#ENT.\nI1CNTDVN LA    R0,1\n         A     R0,DGNUMDV#        INCREMENT THE DIFFERENT DEVICE\n         ST    R0,DGNUMDV#        NUMBER COUNT FOR THIS SYSTEM.\nI1DENTOK DS    0H\n         LA    R0,DGDEVLEN        GET THE DEVICE ENTRY SIZE.\n         MVI   ENTRYTYP,4         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGDEVICE,R6\n         ICM   R7,15,DGLSTDEV     POINT TO THE PREVIOUSLY LAST ENTRY.\n         BZ    I1FSTDEV           ZERO SO FIRST TYPE 74 FOR INTERVAL.\n         ST    R7,DGDEVPRV        NEW POINTS BACK TO OLD LAST.\n         ST    R6,0(,R7)          OLD LAST POINTS FORWARD TO NEW.\n         B     I1LSTDEV           GO UPDATE THE INTERVAL ENTRY.\nI1FSTDEV ST    R6,DGFSTDEV        THIS IS THE FIRST DEVICE ENTRY.\nI1LSTDEV ST    R6,DGLSTDEV        THIS IS NOW THE LAST DEVICE ENTRY.\n         ST    R2,DGDEVNAM        PUT DEVICE NUMBER INTO ENTRY.\n         MVI   DGDEVFLG,X'41'     SAY NO LCU DATA AND ONLINE.\n         MVC   DGDEVVOL,PDLFI2VL  COPY VOLUME SERIAL NUMBER.\n         MVI   DGDEVTYP+2,X'20'   COPY DEVICE UNIT TYPE BYTES.\n         MVC   DGDEVSGN,PDLFI2DT  COPY EBCDIC DEVICE TYPE NAME.\n         OI    DGDEVFL2,DGDEV0IO  ASSUME ZERO I/O IN INTERVAL.\n         ICM   R9,15,PDLFI2IR     GET THE DEVICE I/O COUNT.\n         BZ    I1DIOCOK           ZERO SO SKIP SOME CALCULATIONS.\n         LR    R0,R9              COPY IT.\n         XI    DGDEVFL2,DGDEV0IO  NON-ZERO I/O IN INTERVAL.\n         M     R8,=F'100000'      WANT HUNDREDTHS PER SECOND.\n         D     R8,DGINTSIZ        DIVIDE I/O COUNT BY ELAPSED TIME.\n         ST    R9,DGDEVACT        SAVE DEVICE ACTIVATION RATE.\n         TM    PDLFI2F2,PDLFI2NI  DEVICE TIME MEASUREMENTS LOGGED?\n         BZ    I1IOOKAY           YES, USE THEM.\nI1BADATA SLR   R9,R9              NO, USE SAMPLED UTILIZATION.\n         ICM   R9,3,PDLFI2DB      GET DEVICE BUSY PERCENT.\n         CL    R9,=F'10000'       IS IT TOO STUPID EVEN FOR US?\n         BNL   I1DIOCOK           YES, IGNORE IT TOTALLY.\n         M     R8,=F'10'          CONVERT TO PERMILLE.\n         ST    R9,DGDEVMTP        SAVE IT IN \"MOUNT PENDING\" FIELD.\n         B     I1DIOCOK           IGNORE ERRONEOUS MEASUREMENTS.\nI1IOOKAY CLI   PDLFI2CT,X'00'     DEVICE CONNECT TIME TOO LARGE?\n         BH    I1BADATA           YES, AVOID S0C9 ABEND.\n         CLI   PDLFI2SD,X'00'     DEVICE DISCONNECT TIME TOO LARGE?\n         BH    I1BADATA           YES, AVOID S0C9 ABEND.\n         CLI   PDLFI2RP,X'00'     REQUEST PENDING TIME TOO LARGE?\n         BH    I1BADATA           YES, AVOID S0C9 ABEND.\n         ICM   R9,15,PDLFI2CT     GET THE DEVICE CONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,10              CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET CONNECT MICROSECONDS PER IO.\n         ST    R9,DGDEVAVC        SAVE IT.\n         ICM   R9,15,PDLFI2SD     GET THE DEVICE DISCONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,10              CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET DISCONNECT MICROSECONDS PER IO.\n         ST    R9,DGDEVAVD        SAVE IT.\n         ICM   R9,15,PDLFI2RP     GET THE DEVICE PENDING TIME.\n         SLR   R8,R8\n         SLDL  R8,10              CONVERT TO MICROSECONDS.\n         DR    R8,R0              GET PENDING MICROSECONDS PER IO.\n         ST    R9,DGDEVAVP        SAVE IT.\n         ICM   R9,15,PDLFI2CT     GET THE DEVICE CONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,10              CONVERT TO MICROSECONDS.\n         D     R8,DGINTSIZ        DIVIDE BY ELAPSED TIME.\n         ST    R9,DGDEVCON        SAVE CONNECT TIME PERMILLAGE.\n         ICM   R9,15,PDLFI2SD     GET THE DEVICE DISCONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,10              CONVERT TO MICROSECONDS.\n         D     R8,DGINTSIZ        DIVIDE BY ELAPSED TIME.\n         ST    R9,DGDEVDIS        SAVE DISCONNECT TIME PERMILLAGE.\n         ICM   R9,15,PDLFI2RP     GET THE DEVICE PENDING TIME.\n         SLR   R8,R8\n         SLDL  R8,10              CONVERT TO MICROSECONDS.\n         D     R8,DGINTSIZ        DIVIDE BY ELAPSED TIME.\n         ST    R9,DGDEVPND        SAVE PENDING TIME PERMILLAGE.\nI1DIOCOK AH    R15,WORK+6         POINT TO NEXT DEVICE DATA SECTION.\n         LH    R5,WORK+4          GET REMAINING DEVICE COUNT OF RECORD.\n         BCT   R5,I1DEVLP1        PROCESS NEXT DEVICE, IF ANY.\n         B     GATMAIN            END OF PDLF I001 RECORD PROCESSING.\n         SPACE\n         DROP  R6,R15             DGDEVICE, PDLFI2ST.\n         SPACE 2\nSCANP001 DS    0H                 PROCESS PERFORMANCE GROUP RECORD.\n         USING PDLFCELM,R2\n         USING PDLFP1HD,R15\n         MVC   WORK+2(2),PDLFCELN COPY PERF. PERIOD ELEMENT LENGTH.\n         DROP  R2                 PDLFCELM.\n         SLR   R5,R5\n         ICM   R5,3,PDLFCNOE      GET THE PERFORMANCE PERIOD COUNT.\nP1PGNLP1 SLR   R2,R2\n         IC    R2,PDLFP1PG        LOAD THE PERFORMANCE GROUP NUMBER.\n         ST    R5,WORK+4          REMEMBER REMAINING ELEMENT COUNT.\n         LA    R7,DGFSTPG#        POINT TO THE PGN ENTRY POINTERS.\nP1PGNLP2 LR    R5,R7              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R7,15,0(R7)        POINT TO THE NEXT PG NUMBER ENTRY.\n         BZ    P1NEWPGN           NO MORE PGN ENTRIES SO MAKE ONE.\n         USING DGPG#ENT,R7\n         C     R2,DGPG#           COMPARE PERFORMANCE GROUP NUMBERS.\n         BH    P1PGNLP2           RECORD FROM HIGHER PGN SO CONTINUE.\n         BE    P1PENTOK           FOUND THE PGN ENTRY IN THE LIST.\n*        BL    P1NEWPGN           RECORD FROM LOWER PGN SO MAKE ENTRY.\n         DROP  R7                 DGPG#ENT.\n         SPACE\nP1NEWPGN LA    R0,DGPG#LEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,1         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGPG#ENT,R6\n         ST    R2,DGPG#           STORE PERFORMANCE GROUP NUMBER.\n         LTR   R7,R7              ENCOUNTERED END OF FORWARD CHAIN?\n         BNZ   P1LWRPGN           NO, THIS PG NUMBER IS LOWER.\n         ICM   R0,15,DGNUMPG#     YES, ANY ENTRIES ON CHAIN?\n         BZ    P1FSTPGN           NO, THIS IS THE FIRST PGN READ.\n         ST    R5,DGPG#PRV        YES, NEW POINTS BACK TO OLD LAST.\n         ST    R6,0(,R5)          OLD LAST POINTS FWD TO NEW ENTRY.\n         ST    R6,DGLSTPG#        NEW ENTRY IS NOW THE LAST ENTRY.\n         B     P1CNTPGN           PG NUMBER ENTRY CHAIN NOW UPDATED.\nP1FSTPGN ST    R6,DGFSTPG#        NEW ENTRY IS NOW THE FIRST ENTRY.\n         ST    R6,DGLSTPG#        NEW ENTRY IS NOW THE LAST ENTRY.\n         B     P1CNTPGN           PG NUMBER ENTRY CHAIN NOW UPDATED.\nP1LWRPGN ST    R7,DGPG#NXT        NEW ENTRY POINTS FWD TO OLD ENTRY.\n         MVC   DGPG#PRV,4(R7)     OLD BACK POINTER IS NEW BACK PTR.\n         ST    R6,0(,R5)          POINT FORWARD TO NEW ENTRY.\n         ST    R6,4(,R7)          POINT BACK TO NEW ENTRY.\n         DROP  R6                 DGPG#ENT.\nP1CNTPGN LA    R0,1\n         A     R0,DGNUMPG#        INCREMENT THE DIFFERENT PERFORMANCE\n         ST    R0,DGNUMPG#        GROUP NUMBER COUNT FOR THIS SYSTEM.\nP1PENTOK L     R5,WORK+4          RESTORE REMAINING ELEMENT COUNT.\n         LR    R8,R5              COPY IT.\n         SLR   R6,R6              CLEAR THE PERIOD COUNTER.\n         LR    R7,R15             COPY CURRENT ELEMENT POINTER.\nP1PGNLP3 CLC   PDLFP1PG,0(R7)     THIS PERIOD IN THE SAME GROUP?\n         BNE   P1EOPLP3           NO, PAST THIS GROUP'S DATA.\n         LA    R6,1(,R6)          YES, COUNT IT.\n         AH    R7,WORK+2          POINT TO THE NEXT PERIOD ELEMENT.\n         BCT   R8,P1PGNLP3        CHECK THE NEXT PERIOD ELEMENT.\nP1EOPLP3 ST    R6,WORK+4          SAVE THE PERIOD COUNT.\n         LA    R8,DGPERLEN        GET THE PERIOD SECTION LENGTH.\n         STH   R8,WORK\n         LR    R8,R6              GET THE PERIOD COUNT FOR THIS GROUP.\n         MH    R8,WORK            GET THE LENGTH FOR ALL PERIODS.\n         LA    R0,DGPRFLEN(,R8)   GET THE TOTAL GROUP ENTRY SIZE.\n         MVI   ENTRYTYP,5         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGPRFGRP,R6\n         ICM   R7,15,DGLSTPGN     POINT TO THE PREVIOUSLY LAST ENTRY.\n         BZ    P1FSTPRF           ZERO SO PROBABLY PGN 0 (IE. 1ST PG).\n         ST    R7,DGPRFPRV        NEW POINTS BACK TO OLD LAST.\n         ST    R6,0(,R7)          OLD LAST POINTS FORWARD TO NEW.\n         B     P1LSTPRF           GO UPDATE THE INTERVAL ENTRY.\nP1FSTPRF ST    R6,DGFSTPGN        THIS IS THE FIRST PG ENTRY.\nP1LSTPRF ST    R6,DGLSTPGN        THIS IS NOW THE LAST PG ENTRY.\n         ST    R2,DGPRFNUM        PUT PG NUMBER INTO ENTRY.\n         MVC   DGPRFPER,WORK+4    LOAD THE PERF. GROUP PERIOD COUNT.\n         L     R0,DGPRFPER        GET THE PERIOD COUNT.\n         ST    R15,WORK+4         SAVE CURRENT ELEMENT POINTER.\n         SLR   R9,R9              CLEAR ACCUMULATOR.\nP1PGNLP4 ICM   R8,15,PDLFP1RQ     GET THE PERIOD I/O REQUEST COUNT.\n         ALR   R9,R8              ACCUMULATE IT.\n         AH    R15,WORK+2         POINT TO THE NEXT ELEMENT.\n         BCT   R0,P1PGNLP4        PROCESS NEXT PERIOD.\n         M     R8,=F'100000'      WANT HUNDREDTHS PER SECOND.\n         D     R8,DGINTSIZ        DIVIDE ACCUMLATOR BY ELAPSED TIME.\n         A     R9,DGIORATE        ACCUMULATE SYSTEM I/O RATE.\n         ST    R9,DGIORATE        SAVE TOTAL SYSTEM I/O RATE.\n         C     R9,DGMAXIOR        NEW MAXIMUM I/O RATE FOR SYSTEM?\n         BNH   P1IORTOK           NO, DO NOT ALTER HIGH-WATER-MARK.\n         ST    R9,DGMAXIOR        YES, SAVE IT FOR SCALING PURPOSES.\nP1IORTOK L     R0,DGPRFPER        GET THE PERIOD COUNT.\n         L     R15,WORK+4         RESTORE CURRENT ELEMENT POINTER.\n         SLR   R7,R7              CLEAR ACCUMULATOR.\n         SLR   R9,R9              CLEAR ACCUMULATOR.\nP1PGNLP5 SLR   R8,R8              CLEAR FOR INSERT.\n         ICM   R8,3,PDLFP1TJ      PERIOD INTERVAL TRANSACTION COUNT.\n         ALR   R7,R8              ACCUMULATE IT.\n         ICM   R8,15,PDLFP1RT     PERIOD INTERVAL RESPONSE TIME.\n         ALR   R9,R8              ACCUMULATE IT.\n         AH    R15,WORK+2         POINT TO THE NEXT ELEMENT.\n         BCT   R0,P1PGNLP5        PROCESS NEXT PERIOD.\n         ST    R7,DGPRFXAN        SAVE PERF. GROUP TRANSACTION COUNT.\n         LTR   R7,R7              ANY TRANSACTIONS?\n         BNP   P1PGXNOK           NO, DO NOT DIVIDE BY ZERO.\n         SLR   R8,R8\n         DR    R8,R7              GET PG RESPONSE TIME PER TRANSACTION.\n         ST    R9,DGPRFXTM        SAVE IT.\nP1PGXNOK L     R15,WORK+4         RESTORE CURRENT ELEMENT POINTER.\n         L     R0,DGPRFPER        GET THE PERIOD COUNT.\n         LA    R2,DGPRFLEN(,R6)   POINT TO FIRST PERIOD SECTION.\n         USING DGPERIOD,R2\nP1PGNLP6 SLR   R7,R7              CLEAR FOR INSERT.\n         ICM   R7,3,PDLFP1TJ      PERIOD INTERVAL TRANSACTION COUNT.\n         BZ    P1PPXNOK           DO NOT DIVIDE BY ZERO.\n         ST    R7,DGPERXAN        SAVE IT.\n         ICM   R9,15,PDLFP1RT     PERIOD INTERVAL RESPONSE TIME.\n         SLR   R8,R8\n         DR    R8,R7              GET PP RESPONSE TIME PER TRANSACTION.\n         ST    R9,DGPERXTM        SAVE IT.\nP1PPXNOK STM   R14,R12,12(R13)    SAVE REGISTERS.\n         LA    R0,8               LOAD MAXIMUM CPU COUNT.\n         SLR   R7,R7              ZERO ACTIVE CPU COUNT.\n         SLR   R9,R9              ZERO CPU UTILIZATION.\n         SLR   R14,R14            CLEAR WORK REGISTER.\n         LA    R8,PDLFP1C0        POINT TO FIRST CPU BUSY FIELD.\nP1PGNLP7 CLI   0(R8),PDLFP1OF     ACTIVE CPU?\n         BE    P1PGNXT7           NO, DO NOT COUNT.\n         IC    R14,0(,R8)         YES, GET PERIOD UTILIZATION.\n         ALR   R9,R14             ACCUMULATE IT.\n         LA    R7,1(,R7)          INCREMENT CPU COUNT.\nP1PGNXT7 LA    R8,1(,R8)          POINT TO NEXT CPU FIELD.\n         BCT   R0,P1PGNLP7        PROCESS NEXT CPU.\n         M     R8,=F'10'          CONVERT PERCENT TO PERMILLE.\n         DR    R8,R7              GET AVERAGE OVER EACH CP.\n         ST    R9,DGPERCPU        SAVE IT.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         LA    R2,DGPERLEN(,R6)   POINT TO NEXT PERIOD SECTION.\n         AH    R15,WORK+2         POINT TO THE NEXT ELEMENT.\n         BCT   R0,P1PGNLP6        PROCESS NEXT PERIOD.\n         S     R5,DGPRFPER        UPDATE ELEMENT COUNT FOR NEXT P.G.\n         BP    P1PGNLP1           PROCESS NEXT PERFORMANCE GROUP.\n         B     GATMAIN            END OF PDLF P001 RECORD PROCESSING.\n         SPACE\n         DROP  R2,R6,R15          DGPERIOD, DGPRFGRP, PDLFP1HD.\n         SPACE\n         DROP  R1                 PDLFHDR.\n         SPACE 2\n         DROP  R4,R3              DGRMFINT, DGSYSTEM.\n         TITLE 'PROCESS DATA SET EVENT SMF RECORD TYPES'\n         USING SMFRECD,R1\nDGDSET14 DS    0H                 PROCESS SMF RECORD TYPE 14/15.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF14JBN        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF14JBN        POINT TO THE JOB NAME.\n         LA    R3,DASDJOB         POINT TO THE JOB NAME MASK.\n         TM    SMF14RIN,SMF14DAD  DASD DATA SET?\n         BO    DGJOBN14           YES, CHECK DASD JOB NAME MASK.\n         LA    R3,TAPEJOB         NO, CHECK TAPE JOB NAME MASK.\nDGJOBN14 BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BE    GATMAIN            NO, DISCARD THE DATA.\n         LA    R8,SMFJFCB1        POINT TO THE DATA SET NAME.\n         CLC   =CL8'********',TRACEJOB\n         BNE   DGKEEP14           COLLECT EVENT IF TRACING JOB.\n         L     R15,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R15            COMMUNICATION VECTOR TABLE.\n         L     R15,CVTSMCA        POINT TO THE SMCA.\n         DROP  R15                CVT.\n         USING SMCABASE,R15       SMF COMMUNICATION AREA.\n         TM    SMCAOPT,SMCATDS    TEMPORARY SCRATCH DATA FOR THIS SITE?\n         BO    DGKEEP14           YES, COLLECT ALL DATA POSSIBLE.\n         DROP  R15                SMCABASE.\n*                                 NO, SELECTIVELY DISCARD SOME RECORDS.\n         TM    SMF14RIN,SMF14DAD  TAPE DATA SET?\n         BZ    DGKEEP14           YES, COLLECT THE DATA.\n         TM    SMF14RIN,SMF14IS+SMF14JIS   ANY HINT OF ISAM?\n         BNZ   DGKEEP14           YES, COLLECT THE DATA.\n         TM    SMF14RIN,SMF14VIO  VIO DATA SET?\n         BO    GATMAIN            YES, DISCARD THE DATA.\n         TM    SMF14RIN,SMF14TDS  DASD TEMPORARY DATA SET?\n         BO    GATMAIN            YES, DISCARD THE DATA.\n         TM    SMFDEBOP,X'0B'     OPEN FOR OTHER THAN INPUT OR UPDAT?\n         BNZ   DGKEEP14           YES, COLLECT THE DATA.\n         TM    SMFDEBOP,X'0F'     OPEN FOR OTHER THAN INPUT?\n         BNZ   HLQCHECK           YES, CHECK THE HIGH LEVEL QUALIFIER.\n         CLC   =C'SMPPTS  ',SMFTIOE5   SMP PTF TERMPORARY STORE?\n         BE    BPAMREAD                YES.\n         CLC   =C'SYSPROC ',SMFTIOE5   CLIST FILE?\n         BE    BPAMREAD                YES.\n         CLC   =C'SYSEXEC ',SMFTIOE5   REXX FILE?\n         BE    BPAMREAD                YES.\n*        CLC   =C'SYSUPROC',SMFTIOE5   USER CLIST FILE?\n*        BE    BPAMREAD                YES.\n*        CLC   =C'SYSUEXEC',SMFTIOE5   USER REXX FILE?\n*        BE    BPAMREAD                YES.\n         CLC   =C'PFDMENUS',SMFTIOE5   PFD PANEL FILE?\n         BE    BPAMREAD                YES.\n         CLC   =C'PFDMSGS ',SMFTIOE5   PFD MESSAGE FILE?\n         BE    BPAMREAD                YES.\n         CLC   =C'PFDPROCS',SMFTIOE5   PFD SKELETON FILE?\n         BE    BPAMREAD                YES.\n         CLC   =C'ISP',SMFTIOE5        ISPF FILE?\n         BNE   HLQCHECK                NO.\n         CLC   =C'LIB ',SMFTIOE5+4     ISPF FILE?\n         BNE   HLQCHECK                NO.\nBPAMREAD TM    SMFDCBOR,JFCORGPO       INPUT USING BPAM?\n         BO    GATMAIN                 YES, DISCARD THE DATA.\nHLQCHECK CLC   =C'ISPPROF ',SMFTIOE5   ISPF PROFILE?\n         BE    GATMAIN                 YES, DISCARD FOR ANY HLQ.\n         CLC   =C'PFDATTRS',SMFTIOE5   PFD PROFILE?\n         BE    GATMAIN                 YES, DISCARD FOR ANY HLQ.\n         LA    R9,SMF14JBN+7      POINT TO THE JOB NAME.\n         LA    R7,7(,R8)          POINT TO THE DATA SET NAME.\n         LA    R0,8               GET THE MAXIMUM LENGTH TO CHECK.\nPREFXLP1 CLI   0(R9),C' '         TRAILING BLANK IN JOB NAME?\n         BNE   PREFXLP2           NO, START COMPARISON.\n         BCTR  R9,0               YES, BACK UP ONE IN JOB NAME.\n         BCTR  R7,0               BACK UP ONE IN DATA SET NAME.\n         BCT   R0,PREFXLP1        CONTINUE.\n         B     DGKEEP14           LOOK FOR MATCHING BLANK DSNAME ENTRY.\nPREFXLP2 CLC   0(1,R9),0(R7)      JOBNAME/DSN PREFIX MISMATCH?\n         BNE   JMRUCHEK           YES, GO CHECK FOR MATCHING USERID.\n         BCTR  R9,0               NO, BACK UP ONE IN JOB NAME.\n         BCTR  R7,0               BACK UP ONE IN DATA SET NAME.\n         BCT   R0,PREFXLP2        CONTINUE.\n         B     GATMAIN            ASSUME USER LOOKING AT OWN FILE.\nJMRUCHEK LA    R9,SMF14UID        POINT TO THE JMR USER FIELD.\n         LR    R7,R8              POINT TO THE DATA SET NAME.\n         LA    R0,8               GET THE MAXIMUM LENGTH TO CHECK.\nPREFXLP3 CLI   0(R9),C' '         BLANK IN \"USERID\"?\n         BNH   Q1ENDCHK           YES, CHECK FOR THE END OF THE HLQ.\n         CLC   0(1,R7),0(R9)      USERID/DSN PREFIX MISMATCH?\n         BNE   DGKEEP14           YES, COLLECT THE DATA.\n         LA    R9,1(,R9)          POINT TO NEXT BYTE IN USERID.\n         LA    R7,1(,R7)          POINT TO NEXT BYTE IN DATA SET NAME.\n         BCT   R0,PREFXLP3        CONTINUE.\nQ1ENDCHK CLI   0(R7),C'.'         END OF FIRST QUALIFIER?\n         BE    GATMAIN            YES, MATCH SO DISCARD THE DATA.\n*        B     DGKEEP14           NO, MISMATCH SO COLLECT THE DATA.\nDGKEEP14 LA    R0,DGDSEL14        LOAD TYPE 14/15 ENTRY SIZE.\n         B     DGDSSRCH           COLLECT THE DATA.\n         SPACE\nDGDSET17 DS    0H                 PROCESS SMF RECORD TYPE 17.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF17JBN        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF17JBN        POINT TO THE JOB NAME.\n         LA    R3,DASDJOB         POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BE    GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,DGDSEL17        LOAD TYPE 17 ENTRY SIZE.\n         LA    R8,SMF17DSN        POINT TO THE DATA SET NAME.\n         B     DGDSSRCH           LOOK FOR MATCHING DSNAME ENTRY.\n         SPACE\nDGDSET18 DS    0H                 PROCESS SMF RECORD TYPE 18.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF18JBN        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF18JBN        POINT TO THE JOB NAME.\n         LA    R3,DASDJOB         POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BE    GATMAIN            NO, DISCARD THE DATA.\n         XC    RENCOMMA,RENCOMMA  CLEAR THE RENAME COMMUNICATION AREA.\n         LA    R0,DGDSEL18        LOAD TYPE 18 ENTRY SIZE.\n         LA    R8,SMF18ODS        POINT TO THE OLD DATA SET NAME.\n         B     DGDSSRCH           LOOK FOR MATCHING DSNAME ENTRY.\n         SPACE\nDGDSET61 DS    0H                 PROCESS SMF RECORD TYPE 61.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF61JNM        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,DGDSEL61        LOAD TYPE 61 ENTRY SIZE.\n         LA    R8,SMF61ENM        POINT TO THE ENTRY NAME.\n         B     DGDSSRCH           LOOK FOR MATCHING DSNAME ENTRY.\n         SPACE\nDGDSET62 DS    0H                 PROCESS SMF RECORD TYPE 62.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF62JBN        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,DGDSEL62        LOAD TYPE 62 ENTRY SIZE.\n         LA    R8,SMF62DNM        POINT TO THE ENTRY NAME.\n         B     DGDSSRCH           LOOK FOR MATCHING DSNAME ENTRY.\n         SPACE\nDGDSET64 DS    0H                 PROCESS SMF RECORD TYPE 64.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF64JBN        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,DGDSEL64        LOAD TYPE 64 ENTRY SIZE.\n         LA    R8,SMF64DNM        POINT TO THE PHYSICAL DATA SET NAME.\n         CLI   0(R8),C'$'         VALID NAME?\n         BNL   DGDSSRCH           POSSIBLY, ASSUME IT IS.\n         SLR   R8,R8              NO, CLEAR FOR INSERT.\n         ICM   R8,3,SMF64ESL      GET EXTENT SECTION LENGTH.\n         LA    R8,SMF64FEX(R8)    POINT PAST EXTENT SECTION.\n         USING SMF64STS,R8        STATISTICS SECTION ADDRESSABILITY.\n         LA    R8,SMF64CLN        USE THE JCL DATA SET NAME.\n         DROP  R8                 SMF64STS.\n         B     DGDSSRCH           LOOK FOR MATCHING DSNAME ENTRY.\n         SPACE\nDGDSET65 DS    0H                 PROCESS SMF RECORD TYPE 65.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF65JNM        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,DGDSEL65        LOAD TYPE 65 ENTRY SIZE.\n         LA    R8,SMF65ENM        POINT TO THE ENTRY NAME.\n         B     DGDSSRCH           LOOK FOR MATCHING DSNAME ENTRY.\n         SPACE\nDGDSET66 DS    0H                 PROCESS SMF RECORD TYPE 66.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF66JNM        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,DGDSEL66        LOAD TYPE 66 ENTRY SIZE.\n         LA    R8,SMF66ENM        POINT TO THE ENTRY NAME.\n         B     DGDSSRCH           LOOK FOR MATCHING DSNAME ENTRY.\n         SPACE\nDGDSETHF DS    0H                 PROCESS HSM FUNCTION SMF RECORD.\n         CLC   =H'300',0(R1)      AT LEAST 300 BYTES LONG?\n         BL    GATMAIN            NO, CAN'T BE HSM SO DISCARD RECORD.\n         MVC   HSMFNTYP,5(R1)     UPDATE THE HSM FUNCTION RECORD TYPE.\n         CLI   42(R1),14          KNOWN FUNCTION TYPE CODE?\n         BH    GATMAIN            NO, DISCARD THIS RECORD.\n         SLR   R15,R15            CLEAR FOR INSERT.\n         IC    R15,42(,R1)        LOAD FUNCTION TYPE CODE.\n         LA    R15,HSMSEL(R15)    POINT TO SELECTION BYTE.\n         ICM   R0,1,0(R15)        INTERESTED IN THIS RECORD?\n         BZ    GATMAIN            NO, DISCARD IT.\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF14JBN        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         LA    R0,DGDSEL14        LOAD TYPE 14/15 ENTRY SIZE.\n         LA    R8,44(,R1)         POINT TO THE DATA SET NAME.\n         B     DGDSSRCH           LOOK FOR MATCHING DSNAME ENTRY.\n         SPACE\nDGDSTARG DS    0H                 PROCESS \"RENAME-TO\" ENTRIES.\n         LA    R0,DGDSEL18        LOAD TYPE 18 ENTRY SIZE.\n         LA    R8,SMF18NDS        POINT TO THE NEW DATA SET NAME.\n         CLI   SMF18RTY,18        TYPE 18 SMF RECORD?\n         BE    DGDSSRCH           YES, PROCESS IT.\n         LA    R0,DGDSEL66        LOAD TYPE 66 ENTRY SIZE.\n         LA    R8,SMF66NNM        NO, MUST BE A TYPE 66 SMF RECORD.\n         SPACE\nDGDSSRCH CLI   0(R8),C'$'         VALID NAME?\n         BNL   MKNEWDSE           YES, ASSUME IT IS AND PROCEED.\n         CLI   0(R8),X'04'        WAS THE VTOC ACCESSED?\n         BNE   GATMAIN            NO, IGNORE BLANK OR BAD NAME.\n         LA    R8,=CL44' *** FORMAT4.DSCB/VTOC *** '\nMKNEWDSE MVI   ENTRYTYP,8         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGDSEVNT,R6\n         L     R2,DGBASEAD        POINT TO THE BASE ENTRY.\n         USING DGBASE,R2\n         LA    R3,DGFSTDSN        POINT TO THE FIRST DSN ENTRY POINTER.\n         LR    R5,R3              COPY FIRST DSN ENTRY POINTER.\n         CLI   0(R8),C'R'         DSNAME STARTS WITH 'S' OR LATER?\n         BH    DGDSNLP2           YES, SEARCH FROM END, NOT START.\nDGDSNLP1 LR    R5,R3              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R3,15,0(R3)        POINT TO THE NEXT DSNAME ENTRY.\n         BZ    MKNEWDSN           NO MORE DSNAME ENTRIES SO MAKE ONE.\n         USING DGDATAST,R3\n         CLC   DGDSNAME,0(R8)     FOUND THE MATCHING DSNAME ENTRY?\n         BE    DSNMATCH           YES.\n         BL    DGDSNLP1           NO, TRY THE NEXT ONE.\n         B     MKNEWDSN           PAST WHERE IT SHOULD BE SO MAKE IT.\nDGDSNLP2 ICM   R3,15,4(R3)        POINT TO THE PREVIOUS DSNAME ENTRY.\n         BZ    MKNEWDSN           NO MORE DSNAME ENTRIES SO MAKE ONE.\n         USING DGDATAST,R3\n         CLC   DGDSNAME,0(R8)     FOUND THE MATCHING DSNAME ENTRY?\n         BE    DSNMATCH           YES.\n         BH    DGDSNLP2           NO, TRY THE NEXT ONE.\n         LR    R5,R3              REMEMBER ENTRY BEFORE NEW ENTRY.\n*        B     MKNEWDSN           PAST WHERE IT SHOULD BE SO MAKE IT.\nMKNEWDSN LA    R0,DGDSNLEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,7         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R3,R0              POINT TO THE NEW ENTRY.\n         MVC   DGDSNAME,0(R8)     LOAD THE DATA SET NAME.\n         ICM   R4,15,0(R5)        ENCOUNTERED END OF CHAIN?\n         BZ    LASTDSN            YES, ADD NEW LAST ENTRY.\n         ST    R4,DGDSNNXT        NO, POINT FORWARD TO NEXT ENTRY.\n         ST    R3,4(,R4)          POINT BACKWARD TO THIS ENTRY.\n         B     CHAINDSN           CONTINUE WITH CHAIN UPDATE.\nLASTDSN  ST    R3,DGLSTDSN        NEW ONE IS NOW THE LAST ONE.\nCHAINDSN LA    R0,DGFSTDSN        POINT TO THE FIRST DSN ENTRY POINTER.\n         CR    R5,R0              IS THIS THE FIRST DSNAME ENTRY?\n         BE    FIRSTDSN           YES.\n         ST    R3,0(,R5)          NO, POINT FORWARD TO THIS ENTRY.\n         ST    R5,DGDSNPRV        POINT BACK TO PREVIOUS ENTRY.\n         B     COUNTDSN           GO INCREMENT THE DSN ENTRY COUNT.\nFIRSTDSN ST    R3,DGFSTDSN        THIS IS THE FIRST DSNAME ENTRY.\nCOUNTDSN LA    R0,1\n         A     R0,DGNUMDSN        INCREMENT THE DSNAME ENTRY COUNTER.\n         ST    R0,DGNUMDSN\n         DROP  R2                 DGBASE.\n         SPACE\nDSNMATCH DS    0H                 FILL IN THE DATA SET EVENT ENTRY.\n         MVC   DGDSETYP,SMF14RTY  COPY SMF RECORD TYPE.\n         MVC   DGDSETIM,RECTIME   COPY SMF RECORD TIME.\n         MVC   DGDSEDAT,SMF14DTE  COPY SMF RECORD DATE.\n         MVC   DGDSESID,SMF14SID  COPY SMF SYSTEM IDENTIFIER.\n         ST    R3,DGDSENAM        SAVE POINTER TO DATA SET ENTRY.\n         MVI   DGDSEVOL,C' '      BLANK THE VOLUME SERIAL NUMBER LIST.\n         MVC   DGDSEVOL+1(29),DGDSEVOL\n         CLI   SMF61RTY,61        TYPE 61?\n         BE    FILDSE61           YES, FILL IN TYPE 61 DETAILS.\n         CLI   SMF61RTY,62        TYPE 62?\n         BE    FILDSE62           YES, FILL IN TYPE 62 DETAILS.\n         CLI   SMF65RTY,65        TYPE 65?\n         BE    FILDSE65           YES, FILL IN TYPE 65 DETAILS.\n         CLI   SMF65RTY,66        TYPE 66?\n         BE    FILDSE66           YES, FILL IN TYPE 66 DETAILS.\n         MVC   DGDSEJOB,SMF14JBN  COPY THE JOB NAME.\n         MVC   DGDSEUSR,SMF14UID  COPY THE JMRUSEID FIELD.\n         TM    SMF14RTY,X'80'     HSM FUNCTION RECORD?\n         BO    FILDSEHF           YES, FILL IN HSM DETAILS.\n         MVC   DGDSERIN,SMF14RIN  COPY SMF RECORD INDICATORS.\n         CLI   SMF64RTY,64        TYPE 64?\n         BE    FILDSE64           YES, FILL IN TYPE 64 DETAILS.\n         CLI   SMF17RTY,17        TYPE 17?\n         BE    FILDSE17           YES, FILL IN TYPE 17 DETAILS.\n         CLI   SMF17RTY,18        TYPE 18?\n         BE    FILDSE18           YES, FILL IN TYPE 18 DETAILS.\n         SPACE\n         DS    0H                 FILL IN TYPE 14/15 DETAILS.\n         LA    R9,DGDSEVOL        POINT TO THE FIRST VOLUME SLOT.\n         LA    R7,JFCBVOLS        POINT TO THE FIRST VOLUME OF FILE.\n         LA    R0,5               LOAD UP TO FIVE VOLUME SERIALS.\nVL1415LP CLI   0(R7),X'FF'        SCRATCH VOLUME?\n         BE    VL1415OK           YES, END OF KNOWN VOLUME SERIAL LIST.\n         MVC   0(6,R9),0(R7)      NO, COPY VOLUME SERIAL NUMBER.\n         LA    R9,6(,R9)          POINT TO NEXT VOLUME SLOT.\n         LA    R7,6(,R7)          POINT TO NEXT VOLUME IN JFCB.\n         BCT   R0,VL1415LP        PROCESS NEXT VOLUME IF ANY.\nVL1415OK MVC   DGDSEDDN,SMFTIOE5  COPY THE DATA DEFINITION NAME.\n         MVC   DGDSEMEM,JFCBELNM  COPY THE ELEMENT OR MEMBER NAME.\n         MVC   DGDSEDCO,SMFDCBOR  COPY DCBDSORG.\n         MVC   DGDSEDSO,JFCDSORG  COPY JFCDSORG.\n         MVC   DGDSEDMF,SMFDCBMF  COPY DCBMACRF.\n         MVC   DGDSEOPT,SMFDCBOP  COPY DCBOPTCD.\n         MVC   DGDSEEOP,SMFDEBOP  COPY DEBOPATB.\n         SLR   R0,R0\n         IC    R0,SMF14NUC        GET UCB SECTION COUNT.\n         STH   R0,DGDSENUM        SAVE THE UNIT COUNT.\n         SLR   R9,R9\n         IC    R9,SMF14SUC        GET UCB SECTION SIZE.\n         SLR   R7,R7              CLEAR ACCUMULATOR.\n         LA    R15,SMF14UCB       POINT TO THE FIRST UCB SECTION.\n         TM    SMF14OPD+3,X'0F'   VALID OPEN DATE?\n         BO    UCB14LP1           YES, RECORD FROM SP5 OR LATER.\n         SH    R15,=H'4'          NO, ITEM DOES NOT EXIST SO ADJUST.\n         USING SMF14UCB,R15\nUCB14LP1 ICM   R8,15,SMFEXCP      GET THE UCB EXCP COUNT.\n         AR    R7,R8              ACCUMULATE IT.\n         ALR   R15,R9             POINT TO THE NEXT UCB SECTION.\n         BCT   R0,UCB14LP1        PROCESS NEXT UCB SECTION.\n         DROP  R15                SMF14UCB.\n         ST    R7,DGDSEXCP        SAVE THE TOTAL EXCP COUNT.\n         MVC   DGDSEBLK,JFCBLKSI  COPY THE DATA SET BLOCK SIZE.\n         MVC   DGDSELRL,JFCLRECL  COPY THE DATA SET RECORD LENGTH.\n         MVC   DGDSERFM,JFCRECFM  COPY THE DATA SET RECORD FORMAT.\n         MVC   DGDSEDEV,SMFUCBDV  COPY THE UCB DEVICE NUMBER.\n         MVC   DGDSEUCV,SMFSRTEV  COPY THE UCB VOLUME SERIAL NUMBER.\n         MVC   DGDSETBC,SMFDCBBL  COPY THE TAPE VOLUME BLOCK COUNT.\n         MVC   DGDSEFSC,SMFSRTEF  COPY THE FILE SEQUENCE COUNT.\n         MVC   DGDSEFSN,SMFSRTEQ  COPY THE FILE SEQUENCE NUMBER.\n         TM    SMF14RIN,SMF14DAD  TAPE DATA SET?\n         BZ    XTRA1415           YES, JUMP OVER DASD PROCESSING.\n         TM    SMF14RIN,SMF14EOV  END-OF-VOLUME EVENT?\n         BO    XTRA1415           YES, NO TRACKS AND EXTENTS DATA.\n         MVC   DGDSEKEY,JFCKEYLE  COPY THE DATA SET KEY LENGTH.\n         IC    R0,SMF14NUC        GET UCB SECTION COUNT.\n         SLR   R7,R7              CLEAR ACCUMULATOR.\n         LA    R15,SMF14UCB       POINT TO THE FIRST UCB SECTION.\n         TM    SMF14OPD+3,X'0F'   VALID OPEN DATE?\n         BO    UCB14LP2           YES, RECORD FROM SP5 OR LATER.\n         SH    R15,=H'4'          NO, ITEM DOES NOT EXIST SO ADJUST.\n         USING SMF14UCB,R15\nUCB14LP2 ICM   R8,15,SMF14NTA     GET THE VOLUME ALLOCATED TRACK COUNT.\n         AR    R7,R8              ACCUMULATE IT.\n         ALR   R15,R9             POINT TO THE NEXT UCB SECTION.\n         BCT   R0,UCB14LP2        PROCESS NEXT UCB SECTION.\n         DROP  R15                SMF14UCB.\n         ICM   R8,15,SMF14NTR     GET THE DADSM RELEASED TRACK COUNT.\n         SR    R7,R8              GET THE TOTAL REMAINING TRACK COUNT.\n         ST    R7,DGDSETRK        SAVE THE FINAL TOTAL TRACK COUNT.\n         IC    R0,SMF14NUC        GET UCB SECTION COUNT.\n         LA    R15,SMF14UCB       POINT TO THE FIRST UCB SECTION.\n         SLR   R7,R7              CLEAR ACCUMULATOR.\n         SLR   R8,R8              CLEAR FOR INSERT.\n         USING SMF14UCB,R15\nUCB14LP3 IC    R8,SMF14NEX        GET THE VOLUME EXTENT COUNT.\n         AR    R7,R8              ACCUMULATE IT.\n         ALR   R15,R9             POINT TO THE NEXT UCB SECTION.\n         BCT   R0,UCB14LP3        PROCESS NEXT UCB SECTION.\n         DROP  R15                SMF14UCB.\n         IC    R8,SMF14NER        GET THE DADSM RELEASED EXTENT COUNT.\n         SR    R7,R8              GET THE REMAINING EXTENT COUNT.\n         STH   R7,DGDSEEXT        SAVE THE FINAL TOTAL EXTENT COUNT.\nXTRA1415 DS    0H                 PROCESS NEW TYPE 14/15 FIELDS.\n         TM    SMF14RIN+1,SMF14XSG     ANY EXTENDED INFORMATION?\n         BZ    DSEFILLD           NO.\n         TM    SMF14RIN,SMF14IS+SMF14JIS   ANY HINT OF ISAM?\n         BNZ   DSEFILLD           YES, MAY BE ISAM SECTION PRESENT.\n         TM    SMF14RIN+1,SMF14HBT      HIPERBATCH SECTION PRESENT?\n         BNZ   DSEFILLD           YES, SKIP IT.\n         USING SMF14XIS,R15\n         SLR   R7,R7\n         ICM   R7,3,SMF14SXS      GET EXTENDED SECTION SIZE.\n         BNP   DSEFILLD           IGNORE BAD DATA.\n         LA    R0,0(R7,R15)       POINT PAST EXTENDED INFORMATION.\n         SR    R0,R1              GET REQUIRED RECORD LENGTH.\n         CLM   R0,3,SMF14LEN      RECORD LONG ENOUGH TO HOLD SECTION?\n         BH    DSEFILLD           NO, IGNORE BAD DATA.\n         LA    R0,SMF14XIC-SMF14XIS POINT TO PAST EXTENDED INFO HEADER.\n         DROP  R15                SMF14XIS.\n         USING SMF14XIC,R15\nXTRA14LP SR    R7,R0              ANY EXTENDED INFORMATION LEFT?\n         BNP   DSEFILLD           NO.\n         AR    15,R0              YES, POINT TO IT.\n         ICM   R0,3,SMF14ESL      GET LENGTH OF THIS SECTION.\n         CLI   SMF14STY,SMF14SMS  PROCESS THIS SECTION?\n         BE    XTRA14T2           YES.\n         CLI   SMF14STY,SMF14STP  PROCESS THIS SECTION?\n         BE    XTRA14T3           YES.\n         B     XTRA14LP           CHECK FOR ANOTHER SECTION.\nXTRA14T2 MVC   DGDSEMCN,SMF14MCN  COPY MANAGEMENT CLASS NAME.\n         MVC   DGDSEDCN,SMF14DCN  COPY DATA CLASS NAME.\n         MVC   DGDSESCN,SMF14SCN  COPY STORAGE CLASS NAME.\n         B     XTRA14LP           CHECK FOR ANOTHER SECTION.\nXTRA14T3 MVC   DGDSESTP,SMF14SPN  COPY STEP NAME.\n         MVC   DGDSEPGM,SMF14PGN  COPY ACTIVE PROGRAM NAME.\n         B     XTRA14LP           CHECK FOR ANOTHER SECTION.\n         DROP  R15                SMF14XIC.\n         SPACE\nFILDSE17 DS    0H                 FILL IN TYPE 17 DETAILS.\n         SLR   R0,R0              CLEAR FOR INSERT.\n         ICM   R0,1,SMF17NVL      GET THE NUMBER OF VOLUMES.\n         STH   R0,DGDSENUM        SAVE IT.\n         BZ    DSEFILLD           SKIP PROCESSING IF NO DATA.\n         LA    R15,5              GET THE MAXIMUM VOLUME SLOT COUNT.\n         CR    R0,R15             ACTUAL COUNT HIGHER THAN MAXIMUM?\n         BNH   CNT17OK            NO.\n         LR    R0,R15             YES, REDUCE IT TO THE MAXIMUM.\nCNT17OK  LA    R8,DGDSEVOL        POINT TO THE FIRST VOLUME SLOT.\n         LA    R15,SMF17FVL       POINT TO THE FIRST VOLUME SERIAL.\nVOL17LP  MVC   0(6,R8),0(R15)     COPY THE VOLUME SERIAL NUMBER.\n         LA    R8,6(,R8)          POINT TO THE NEXT VOLUME SLOT.\n         LA    R15,8(,R15)        POINT TO THE NEXT VOLUME SERIAL.\n         BCT   R0,VOL17LP         PROCESS NEXT VOLUME ENTRY.\n         B     DSEFILLD           TYPE 17 DSE DATA NOW COMPLETE.\n         SPACE\nFILDSE18 DS    0H                 FILL IN TYPE 18 DETAILS.\n         SLR   R0,R0              CLEAR FOR INSERT.\n         ICM   R0,1,SMF18NVL      GET THE NUMBER OF VOLUMES.\n         STH   R0,DGDSENUM        SAVE IT.\n         BZ    VOL18OK            SKIP PROCESSING IF NO DATA.\n         LA    R15,5              GET THE MAXIMUM VOLUME SLOT COUNT.\n         CR    R0,R15             ACTUAL COUNT HIGHER THAN MAXIMUM?\n         BNH   CNT18OK            NO.\n         LR    R0,R15             YES, REDUCE IT TO THE MAXIMUM.\nCNT18OK  LA    R8,DGDSEVOL        POINT TO THE FIRST VOLUME SLOT.\n         LA    R15,SMF18FVL       POINT TO THE FIRST VOLUME SERIAL.\nVOL18LP  MVC   0(6,R8),0(R15)     COPY THE VOLUME SERIAL NUMBER.\n         LA    R8,6(,R8)          POINT TO THE NEXT VOLUME SLOT.\n         LA    R15,8(,R15)        POINT TO THE NEXT VOLUME SERIAL.\n         BCT   R0,VOL18LP         PROCESS NEXT VOLUME ENTRY.\nVOL18OK  LM    R14,R15,RENCOMMA   LOAD RENAME COMMUNCIATION AREA DATA.\n         LTR   R15,R15            IS THIS THE \"RENAME-FROM\" ENTRY?\n         BZ    FROM18             YES, PERFORM THE RELEVANT PROCESSING.\n         ST    R14,DGDSEONM       NO, \"RENAME-TO\" SO SAVE OLD DSNAME.\n         OI    DGDSESBT,DGDSENEW  FLAG THAT THIS IS THE \"NEW\" ENTRY.\n         ST    R3,DGDSEONM-DGDSEVNT(,R15)  SAVE NEW DSNAME IN \"OLD\".\n         XC    RENCOMMA,RENCOMMA  CLEAR THE RENAME COMMUNICATION AREA.\n         B     DSEFILLD           TYPE 18 DSE DATA NOW COMPLETE.\nFROM18   ST    R3,RENCOMMA        SAVE DGDATAST ADDRESS.\n         ST    R6,RENCOMMA+4      SAVE DGDSEVNT ADDRESS.\n         B     DSEFILLD           GO CHAIN UP THIS DATA SET ENTRY.\n         SPACE\nFILDSE61 DS    0H                 FILL IN TYPE 61 DETAILS.\n         MVC   DGDSEJOB,SMF61JNM  COPY THE JOB NAME.\n         MVC   DGDSEUSR,SMF61UID  COPY THE JMRUSEID FIELD.\n         MVC   DGDSEENT,SMF61TYP  COPY THE CATALOG ENTRY TYPE.\n         LA    R15,SMF61CRC       POINT TO THE CATALOG RECORD.\n         B     DSECATRC           EXTRACT ANY VOLUME SERIAL NUMBER(S).\n         SPACE\nFILDSE62 DS    0H                 FILL IN TYPE 62 DETAILS.\n         MVC   DGDSEJOB,SMF62JBN  COPY THE JOB NAME.\n         MVC   DGDSEUSR,SMF62UIF  COPY THE JMRUSEID FIELD.\n         MVC   DGDSERIN,SMF62IND  COPY 1/2 OF SMF RECORD INDICATORS.\n         SLR   R0,R0              CLEAR FOR INSERT.\n         ICM   R0,3,SMF62VCT      GET THE NUMBER OF VOLUMES.\n         STH   R0,DGDSENUM        SAVE IT.\n         BZ    DSEFILLD           SKIP PROCESSING IF NO DATA.\n         LA    R15,5              GET THE MAXIMUM VOLUME SLOT COUNT.\n         CR    R0,R15             ACTUAL COUNT HIGHER THAN MAXIMUM?\n         BNH   CNT62OK            NO.\n         LR    R0,R15             YES, REDUCE IT TO THE MAXIMUM.\nCNT62OK  LA    R8,DGDSEVOL        POINT TO THE FIRST VOLUME SLOT.\n         LA    R15,SMF62VSR       POINT TO THE FIRST VOLUME SERIAL.\nVOL62LP  MVC   0(6,R8),0(R15)     COPY THE VOLUME SERIAL NUMBER.\n         LA    R8,6(,R8)          POINT TO THE NEXT VOLUME SLOT.\n         LA    R15,10(,R15)       POINT TO THE NEXT VOLUME SERIAL.\n         BCT   R0,VOL62LP         PROCESS NEXT VOLUME ENTRY.\n         B     DSEFILLD           TYPE 62 DSE DATA NOW COMPLETE.\n         SPACE\nFILDSE64 DS    0H                 FILL IN TYPE 64 DETAILS.\n         SLR   R15,R15            CLEAR FOR INSERT.\n         ICM   R15,3,SMF64ESL     GET EXTENT SECTION LENGTH.\n         LA    R15,SMF64FEX(R15)  POINT PAST EXTENT SECTION.\n         USING SMF64STS,R15       STATISTICS SECTION ADDRESSABILITY.\n         MVC   DGDSEDDN,SMF64DDN  COPY DATA DEFINITION NAME.\n         MVC   DGDSEXCP,SMF64DEP  COPY CHANGE IN EXCP COUNT.\n         MVC   DGDSEBLK,SMF64DBS+2     COPY PHYSICAL BLOCK SIZE.\n         MVC   DGDSELRL,SMF64DLS+2     COPY MAXIMUM RECORD SIZE.\n         MVC   DGDSEKEY(2),SMF64DKL    COPY KEY LENGTH.\n         MVC   DGDSETRK+2(2),SMF64NTR  COPY TRACK REQUEST THAT FAILED.\n         ICM   R7,15,SMF64NEX     GET ORIGINAL EXTENT COUNT.\n         ICM   R8,15,SMF64DEX     GET CHANGE IN EXTENT COUNT.\n         AR    R7,R8              GET FINAL EXTENT COUNT.\n         STH   R7,DGDSEEXT        SAVE IT.\n         MVC   DGDSEDMF(3),SMF64MC1    COPY ACBMACRF.\n         DROP  R15                SMF64STS.\n         SLR   R0,R0              CLEAR FOR INSERT.\n         ICM   R0,3,SMF64ESL      GET THE EXTENT SECTION LENGTH.\n         BZ    DSEFILLD           SKIP PROCESSING IF NO DATA.\n         LA    R9,26              GET EXTENT ENTRY LENGTH.\n         LA    R15,SMF64FEX       POINT TO THE EXTENT SECTION.\n         USING SMF64FEX,R15       EXTENT SECTION ADDRESSABILITY.\n         MVC   DGDSEUCV,SMF64VSN  COPY THE FIRST VOLUME SERIAL NUMBER.\n         MVC   DGDSEDEV,SMF64CUU  COPY THE FIRST DEVICE NUMBER.\n         MVC   DGDSEVOL(6),SMF64VSN\n         LA    R7,1               INITIALIZE VOLUME COUNTER.\n         LA    R8,DGDSEVOL        INITIALIZE VOLUME SLOT POINTER.\nEXT64LP1 CLC   0(6,R8),SMF64VSN   ALREADY HAVE THIS VOLUME SERIAL?\n         BE    EXT64NX1           YES.\n         LA    R7,1(,R7)          NO, INCREMENT VOLUME SERIAL COUNT.\n         CH    R7,=H'5'           ANY EMPTY SLOTS LEFT?\n         BH    EXT64NX1           NO, TERMINATE VOLUME SERIAL SCAN.\n         LA    R8,6(,R8)          YES, POINT TO THE NEXT VOLUME SLOT.\n         MVC   0(6,R8),SMF64VSN   COPY THIS VOLUME SERIAL NUMBER.\nEXT64NX1 AR    R15,R9             POINT TO NEXT EXTENT ENTRY.\n         SR    R0,R9              SUBTRACT LENGTH OF ONE EXTENT ENTRY.\n         BP    EXT64LP1           PROCESS NEXT EXTENT ENTRY.\n         STH   R7,DGDSENUM        SAVE THE TOTAL VOLUME COUNT.\n         DROP  R15                SMF64FEX.\n         B     DSEFILLD           TYPE 64 DSE DATA NOW COMPLETE.\n         SPACE\nFILDSE65 DS    0H                 FILL IN TYPE 65 DETAILS.\n         MVC   DGDSEJOB,SMF65JNM  COPY THE JOB NAME.\n         MVC   DGDSEUSR,SMF65UID  COPY THE JMRUSEID FIELD.\n         MVC   DGDSEENT,SMF65TYP  COPY THE CATALOG ENTRY TYPE.\n         MVC   DGDSEFNC,SMF65FNC  COPY THE SCRATCH INDICATOR.\n         LA    R15,SMF65CRC       POINT TO THE CATALOG RECORD.\n         B     DSECATRC           EXTRACT ANY VOLUME SERIAL NUMBER(S).\n         SPACE\nFILDSE66 DS    0H                 FILL IN TYPE 61 DETAILS.\n         MVC   DGDSEJOB,SMF66JNM  COPY THE JOB NAME.\n         MVC   DGDSEUSR,SMF66UID  COPY THE JMRUSEID FIELD.\n         MVC   DGDSEENT,SMF66TYP  COPY THE CATALOG ENTRY TYPE.\n         MVC   DGDSEFNC,SMF66FNC  COPY THE RENAME INDICATOR.\n         CLI   DGDSEFNC,C'R'      WAS THE ALTER A RENAME OPERATION?\n         BNE   TIDY66             NO.\n         LM    R14,R15,RENCOMMA   LOAD RENAME COMMUNCIATION AREA DATA.\n         LTR   R15,R15            IS THIS THE \"RENAME-FROM\" ENTRY?\n         BZ    FROM66             YES, PERFORM THE RELEVANT PROCESSING.\n         ST    R14,DGDSEONM       NO, \"RENAME-TO\" SO SAVE OLD DSNAME.\n         OI    DGDSESBT,DGDSENEW  FLAG THAT THIS IS THE \"NEW\" ENTRY.\n         ST    R3,DGDSEONM-DGDSEVNT(,R15)  SAVE NEW DSNAME IN \"OLD\".\n         XC    RENCOMMA,RENCOMMA  CLEAR THE RENAME COMMUNICATION AREA.\n         B     TIDY66             PARSE CATALOG RECORD.\nFROM66   ST    R3,RENCOMMA        SAVE DGDATAST ADDRESS.\n         ST    R6,RENCOMMA+4      SAVE DGDSEVNT ADDRESS.\nTIDY66   LA    R15,SMF66CRC       POINT TO THE CATALOG RECORD.\n         B     DSECATRC           EXTRACT ANY VOLUME SERIAL NUMBER(S).\n         SPACE\nDSECATRC LR    R0,R15             COPY THIS ADDRESS.\n         SLR   R0,R1              GET THE CATALOG RECORD OFFSET.\n         CLM   R0,3,SMF65LEN      IS THE RECORD LONG ENOUGH?\n         BNL   DSEFILLD           NO, CATALOG RECORD NOT IN SMF RECORD.\n         SLR   R9,R9\n         ICM   R9,3,0(R15)        GET THE CATALOG RECORD LENGTH.\n         ALR   R9,R0              ADD THE CATALOG RECORD OFFSET.\n         CLM   R9,3,SMF65LEN      DOES THIS ADD UP?\n         BNE   DSEFILLD           NO, VALIDITY CHECK FAILURE.\n         AH    R15,=H'2'          POINT TO THE FIRST CELL.\n         AH    R0,=H'2'           ADJUST CURRENT RECORD OFFSET.\n         CLI   DGDSEENT,C'H'      GENERATION DATA GROUP MEMBER?\n         BNE   DSNOTGEN           NO.\nGOOVOOIT LA    R8,35              YES, GET MAXIMUM CHECK COUNT.\n         LA    R7,DGDSNAME+35     POINT TO LAST POSSIBLE '.G' SPOT.\nGOOVOOLP CLI   0(R7),C'.'         FOUND LAST QUALIFIER?\n         BE    GOTGENUM           YES.\n         BCTR  R7,0               NO, BACK UP ONE BYTE.\n         BCT   R8,GOOVOOLP        CONTINUE SEARCH.\n         B     DSEFILLD           NOT FOUND SO GIVE UP.\nGOTGENUM CLI   1(R7),C'G'         GENERATION NUMBER HERE?\n         BNE   DSEFILLD           NO, VALIDITY CHECK FAILURE.\n         CLI   6(R7),C'V'         VERSION NUMBER HERE?\n         BNE   DSEFILLD           NO, VALIDITY CHECK FAILURE.\n         PACK  WORK,2(4,R7)       PACK THE GENERATION NUMBER.\n         CVB   R8,WORK            GET THE BINARY GENERATION NUMBER.\n         PACK  WORK,7(2,R7)       PACK THE VERSION NUMBER.\n         CVB   R7,WORK            GET THE BINARY VERSION NUMBER.\n         STH   R8,WORK            STORE THE GENERATION NUMBER.\n         STC   R7,WORK+2          STORE THE VERSION NUMBER.\n         SLR   R7,R7              ZERO THE VOLUME COUNT.\n         LA    R8,DGDSEVOL        POINT TO THE VOLUME AREA.\n         USING TYPE@H,R15\nHCELLOOP CLI   GDSTYPE,C'H'       GENERATION CELL?\n         BNE   NXTHCELL           NO.\n         CLC   GDSGENO,WORK       YES, CORRECT GENERATION?\n         BNE   NXTHCELL           NO.\n         CLC   GDSVERNO,WORK+2    YES, CORRECT VERSION?\n         BNE   NXTHCELL           NO.\n         ICM   R7,3,GDSVOLCT      YES, GET THE VOLUME COUNT.\n         STH   R7,DGDSENUM        SAVE IT.\n         CH    R7,=H'5'           MORE THAN FIVE VOLUMES?\n         BNH   HVOLCTOK           NO, ROOM FOR ALL OF THEM.\n         LH    R7,=H'5'           YES, JUST SAVE THE FIRST FIVE.\n         B     HVOLCTOK           GO PROCESS VOLUME CELLS.\nNXTHCELL ICM   R9,3,GDSCELEN      GET THE GDS CELL LENGTH.\n         BNP   DSEFILLD           HANDLE BAD LENGTH.\n         AR    R0,R9              GET THE NEW SMF RECORD OFFSET.\n         CLM   R0,3,SMF65LEN      END OF SMF RECORD?\n         BNL   DSEFILLD           YES.\n         ALR   R15,R9             NO, POINT TO THE NEXT CELL.\n         B     HCELLOOP           PROCESS THE NEXT CELL.\n         DROP  R15                TYPE@H\n         USING TYPE@04,R15\nHVOLCTOK CLI   VOLTYPE,X'04'      VOLUME CELL?\n         BNE   LOOK4H04           NO.\n         MVC   0(6,R8),VOLSERN    YES, COPY THE VOLUME SERIAL.\n         LA    R8,6(,R8)          POINT TO NEXT VOLUME SERIAL SLOT.\n         ICM   R9,3,VOLLEN        GET THE CELL LENGTH.\n         BNP   DSEFILLD           HANDLE BAD LENGTH.\n         AR    R0,R9              GET THE NEW SMF RECORD OFFSET.\n         CLM   R0,3,SMF65LEN      END OF SMF RECORD?\n         BNL   DSEFILLD           YES.\n         ALR   R15,R9             NO, POINT TO THE NEXT CELL.\n         BCT   R7,HVOLCTOK        PROCESS THE NEXT CELL.\n         B     DSEFILLD           NOW HAVE CORRECT NUMBER OF VOLUMES.\nLOOK4H04 ICM   R9,3,VOLLEN        GET THE CELL LENGTH.\n         BNP   DSEFILLD           HANDLE BAD LENGTH.\n         AR    R0,R9              GET THE NEW SMF RECORD OFFSET.\n         CLM   R0,3,SMF65LEN      END OF SMF RECORD?\n         BNL   DSEFILLD           YES.\n         ALR   R15,R9             NO, POINT TO THE NEXT CELL.\n         B     HVOLCTOK           SEE IF IT IS A VOLUME CELL.\n         SPACE\nDSNOTGEN SLR   R7,R7              ZERO THE VOLUME COUNT.\n         LA    R8,DGDSEVOL        POINT TO THE VOLUME AREA.\nCCELLOOP CLI   VOLTYPE,C'H'       NONVSAM ACTUALLY A GDG MEMBER?\n         BE    GOOVOOIT           YES, PROBABLY MSP, PROCESS AS 'H'.\n         CLI   VOLTYPE,X'04'      VOLUME CELL?\n         BNE   NXTCCELL           NO.\n         LA    R7,1(,R7)          YES, INCREMENT VOLUME COUNT.\n         STH   R7,DGDSENUM        UPDATE THE VOLUME COUNT.\n         CH    R7,=H'5'           MORE THAN FIVE VOLUMES SO FAR?\n         BH    NXTCCELL           YES, NO ROOM FOR VOLUME SERIAL.\n         MVC   0(6,R8),VOLSERN    NO, COPY THE VOLUME SERIAL.\n         LA    R8,6(,R8)          POINT TO NEXT VOLUME SERIAL SLOT.\nNXTCCELL ICM   R9,3,VOLLEN        GET THE CELL LENGTH.\n         BNP   DSEFILLD           HANDLE BAD LENGTH.\n         AR    R0,R9              GET THE NEW SMF RECORD OFFSET.\n         CLM   R0,3,SMF65LEN      END OF SMF RECORD?\n         BNL   DSEFILLD           YES.\n         ALR   R15,R9             NO, POINT TO THE NEXT CELL.\n         B     CCELLOOP           PROCESS THE NEXT CELL.\n         DROP  R15                TYPE@04\n         SPACE\nFILDSEHF DS    0H                 FILL IN HSM DETAILS.\n         MVC   DGDSETYP,42(R1)    COPY FUNCTION TYPE.\n         OI    DGDSETYP,X'80'     GET IMP INTERNAL CODE OF THIS.\n         MVC   DGDSEDEV,96(R1)    COPY DEVICE TYPE BYTES.\n         MVC   DGDSERIN,178(R1)   COPY FUNCTION FLAGS.\n         MVC   DGDSEDCO,176(R1)   COPY THE DATA SET ORGANIZATION.\n         MVC   DGDSEOPT,187(R1)   COPY THE I/O OPTION CODES.\n         MVC   DGDSERFM,186(R1)   COPY THE RECORD FORMAT.\n         MVC   DGDSESCN,196(R1)   COPY THE STORAGE CLASS NAME.\n         MVC   DGDSEMCN,214(R1)   COPY THE MANAGEMENT CLASS NAME.\n         MVC   DGDSEXCP+2(2),184(R1)   COPY THE AGE.\n         MVI   DGDSENUM+1,1       ASSUME ONE VOLUME INVOLVED.\n         CLI   42(R1),4           RECALL?\n         BE    HSMTODSK           YES.\n         CLI   42(R1),5           RECALL?\n         BE    HSMTODSK           YES.\n         CLI   42(R1),9           RECOVER?\n         BE    HSMTODSK           YES.\n         CLI   42(R1),14          RESTORE?\n         BE    HSMTODSK           YES.\n         MVC   DGDSEUCV,98(R1)    LOAD SOURCE VOLUME.\n         MVC   DGDSEVOL,88(R1)    LOAD TARGET VOLUME.\n         MVC   DGDSETRK+2(2),172(R1)  GET THE NUMBER OF TRACKS READ.\n         B     HSMTPCHK           GO CHECK FOR TAPE USAGE.\nHSMTODSK MVC   DGDSEEOP,X'08'     INDICATE OUTPUT PROCESSING.\n         MVC   DGDSEVOL,98(R1)    LOAD SOURCE VOLUME.\n         MVC   DGDSEUCV,88(R1)    LOAD TARGET VOLUME.\n         MVC   DGDSETRK+2(2),174(R1)  GET THE NUMBER OF TRACKS WRITTEN.\n         TM    43(R1),X'20'       DATA SET BIGGER THAN 32K TRACKS?\n         BNO   HSMTPCHK           NO.\n         MVC   DGDSETRK,208(R1)   GET THE NUMBER OF TRACKS WRITTEN.\nHSMTPCHK SLR   R0,R0              CLEAR FOR INSERT.\n         ICM   R0,3,240(R1)       GET THE NUMBER OF TAPES USED.\n         BZ    DSEFILLD           DATA COMPLETE IF ZERO.\n         STH   R0,DGDSENUM        LOAD THE NUMBER OF VOLUMES.\n         LA    R15,5              GET MAXIMUM THAT CAN BE HANDLED HERE.\n         CR    R0,R15             IS THE COUNT OKAY?\n         BNH   HSMTPSOK           YES.\n         LR    R0,R15             NO, USE THE MAXIMUM.\nHSMTPSOK LA    R15,DGDSEVOL       POINT TO TARGET AREA.\n         LA    R14,300(,R1)       POINT TO SOURCE AREA.\nHSMTPLP  MVC   0(6,R15),0(R14)    COPY VOLUME SERIAL NUMBER.\n         LA    R15,6(,R15)        POINT TO NEXT TARGET AREA.\n         LA    R14,8(,R14)        POINT TO NEXT SOURCE AREA.\n         BCT   R0,HSMTPLP         PROCESS NEXT SLOT.\n         SPACE\nDSEFILLD LA    R0,DGDSNDSF        POINT TO DATA SET DSE TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         ST    R6,CHNENTRY        SUPPLY DSE ENTRY ADDRESS.\n         LA    R0,DGDSEDSN-DGDSEVNT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         LA    R0,DGDSEDAT-DGDSEVNT\n         ST    R0,CHNCMPOF        SUPPLY TIMESTAMP OFFSET.\n         LA    R0,8\n         ST    R0,CHNCMPLN        SUPPLY TIMESTAMP LENGTH.\n         BAS   R14,CHAINADD       ADD DSE TO DSN DSE CHAIN.\n         L     R2,DGBASEAD        POINT TO THE BASE ENTRY.\n         USING DGBASE,R2\n         LA    R0,DGFSTDSE        POINT TO GLOBAL DSE TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         LA    R0,DGDSENXT-DGDSEVNT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         BAS   R14,CHAINADD       ADD DSE TO GLOBAL DSE CHAIN.\n         ICM   R0,15,RENCOMMA     IN THE MIDDLE OF A RENAME?\n         BNZ   DGDSTARG           YES, GO FINISH IT.\n         B     GATMAIN            NO, RECORD PROCESSING NOW COMPLETE.\n         DROP  R6,R3,R2,R1        DGDSEVNT, DGDATAST, DGBASE, SMFRECD.\n         TITLE 'VARIABLES AND CONSTANTS'\nRMFSAMCT DC    F'0'               RMF INTERVAL SAMPLE COUNT HOLD AREA.\nRMFMAXTM DC    X'7FFFFFFF'        MAXIMUM TIME IN FULLWORD.\nRENCOMMA DC    FL8'0'             RENAME COMMUNICATION AREA.\nBLANKS   DC    CL8' '             EXTEND IF NECESSARY.\nDGSTRING DC    CL32'IMON DATA GATHERER DATA &IMPDATE'\nRMFSMFRL DC    FL1'0'             RMF SMF RECORD LEVEL.\nHSMSEL   DC    X'00010003040506070809000B00000E00'\n         SPACE\n         LTORG\n         SPACE\n         DC    (((*-IMDATGAT-1)/256)*256+256+IMDATGAT-*)X'00'\n         TITLE 'PROCESS SMF RECORD TYPE 30'\n         USING DATGAT30,R9\n         USING SMFRCD30,R1\nDATGAT30 DS    0H\n         CLC   =H'1',SMF30SON     ONE SUBSYSTEM SECTION PRESENT?\n         BNE   GATMAIN            NO, DISCARD THE RECORD.\n         CLC   =H'1',SMF30ION     ONE IDENTIFICATION SECTION PRESENT?\n         BNE   GATMAIN            NO, DISCARD THE RECORD.\n         CLC   =H'1',SMF30UON     ONE I/O ACTIVITY SECTION PRESENT?\n         BNE   GATMAIN            NO, DISCARD THE RECORD.\n         CLC   =H'1',SMF30TON     ONE COMPLETION SECTION PRESENT?\n         BNE   GATMAIN            NO, DISCARD THE RECORD.\n         CLC   =H'1',SMF30CON     ONE PROCESSOR SECTION PRESENT?\n         BNE   GATMAIN            NO, DISCARD THE RECORD.\n         CLC   =H'1',SMF30RON     ONE STORAGE SECTION PRESENT?\n         BNE   GATMAIN            NO, DISCARD THE RECORD.\n         CLC   =H'1',SMF30PON     ONE PERFORMANCE SECTION PRESENT?\n         BNE   GATMAIN            NO, DISCARD THE RECORD.\n         ICM   R8,15,SMF30TOF     GET COMPLETION SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE COMPLETION SECTION.\n         USING SMF30CMP,R8\n         TM    SMF30STI,SMF30FLH  WAS THE STEP FLUSHED?\n         BO    GATMAIN            YES, DISCARD THE RECORD.\n         DROP  R8                 SMF30CMP.\n         ICM   R8,15,SMF30SOF     GET SUBSYSTEM SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE SUBSYSTEM SECTION.\n         USING SMF30PSS,R8\n         CLC   =H'4',SMF30TYP     STEP TOTAL (SUBTYPE 4) RECORD?\n         BNE   GATMAIN            NO, DISCARD THE RECORD.\n         DROP  R8                 SMF30PSS.\n         SPACE\n         ICM   R8,15,SMF30IOF     GET IDENTIFICATION SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE IDENTIFICATION SECTION.\n         USING SMF30ID,R8\n         LA    R0,8               GET LENGTH OF JOB NAME MASK.\n         LA    R2,SMF30JBN        POINT TO THE JOB NAME.\n         LA    R3,TRACEJOB        POINT TO THE JOB NAME MASK.\n         BAS   R14,MASKTEST       RECORD THIS EVENT?\n         BNE   GATMAIN            NO, DISCARD THE DATA.\n         SPACE\n         LA    R0,DGJSELEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,10        SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R6,R0              POINT TO THE NEW ENTRY.\n         USING DGJSEVNT,R6\n         MVC   DGJSETIM,RECTIME   COPY SMF RECORD TIME.\n         MVC   DGJSEDAT,SMF30DTE  COPY SMF RECORD DATE.\n         MVC   DGJSESID,SMF30SID  COPY SMF SYSTEM IDENTIFIER.\n         MVC   DGJSEWID,SMF30WID  COPY SMF SUBSYSTEM IDENTIFIER.\n         STM   R14,R12,12(R13)    SAVE REGISTERS.\n         ICM   R5,15,SMF30SIT     LOAD STEP INITIATION TIME.\n         BAS   R14,CENTITOD       CONVERT TO HOURS/MINUTES/SECONDS.\n         ST    R2,DGJSESIT        SAVE STEP INITIATION TIME.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         ZAP   WORK,SMF30DTE      GET THE STEP END DATE.\n         SP    WORK,SMF30STD      GET THE DAYS DIFFERENCE IN DATES.\n         CVB   R15,WORK           GET THIS DAY COUNT IN BINARY.\n         CLC   SMF30DTE(2),SMF30STD   START AND END IN SAME YEAR?\n         BE    ELYR30OK           YES.\n         LA    R14,1000-365       NO, GET THE APPROPRIATE ADJUSTMENT.\n         TM    SMF30STD+1,X'01'   IS THE START YEAR ODD?\n         BO    ELLP30OK           YES, SO NOT A LEAP YEAR.\n         TM    SMF30STD+1,X'12'   IS THE START YEAR A LEAP YEAR?\n         BM    ELLP30OK           NO.\n         BCTR  R14,0              YES, ADJUST THE ADJUSTMENT.\nELLP30OK SR    R15,R14            GET THE JOB STEP ELAPSED DAYS.\nELYR30OK M     R14,=F'8640000'    CONVERT DAYS TO CENTISECONDS.\n         ICM   R14,15,SMF30TME    GET THE STEP END TIME OF DAY.\n         ICM   R0,15,SMF30SIT     GET THE STEP START TIME OF DAY.\n         SR    R14,R0             GET THE STEP ELAPSED TIME.\n         AR    R15,R14            GET THE STEP CENTISECONDS DURATION.\n         ST    R15,DGJSELAP       SAVE THE STEP ELAPSED TIME.\n         MVC   DGJSESTD,SMF30STD  COPY STEP INITIATION DATE.\n         MVC   DGJSEJOB,SMF30JBN  COPY JOB NAME.\n         MVC   DGJSEJID,SMF30JNM  COPY JES JOB NUMBER.\n         MVC   DGJSEUSR,SMF30UIF  COPY JMRUSEID.\n         MVC   DGJSESTP,SMF30STM  COPY JOB STEP NAME.\n         MVC   DGJSESTN,SMF30STN  COPY STEP NUMBER.\n         MVC   DGJSECLS,SMF30CLS  COPY JES JOB CLASS.\n         MVC   DGJSEPGN,SMF30PGN  COPY PERFORMANCE GROUP NUMBER.\n         MVC   DGJSEUID,SMF30USR  COPY PROGRAMMER'S NAME.\n         MVC   DGJSERUD,SMF30RUD  COPY RACF USER IDENTIFIER.\n         MVC   DGJSEGRP,SMF30GRP  COPY RACF GROUP IDENTIFIER.\n         MVC   DGJSEPGM,SMF30PGM  COPY PROGRAM NAME.\n         MVC   DGJSEPSN+1(6),=C'(UNKN)'\n         CLC   =H'140',SMF30ILN   IS THE PROC STEP NAME PRESENT?\n         BH    IDNT30OK           NO, IDENTIFICATION SECTION TOO SHORT.\n         MVC   DGJSEPSN,SMF30PSN  COPY PROCEDURE STEP NAME.\nIDNT30OK DS    0H\n         DROP  R8                 SMF30ID.\n         ICM   R8,15,SMF30UOF     GET I/O ACTIVITY SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE I/O ACTIVITY SECTION.\n         USING SMF30URA,R8\n         MVC   DGJSETEP,SMF30TEP  COPY EXCP COUNT.\n         MVC   DGJSETPT,SMF30TPT  COPY TPUT COUNT.\n         MVC   DGJSETGT,SMF30TGT  COPY TGET COUNT.\n         TM    SMF30FLG,X'06'     MVS/XA OR LATER?\n         BNO   CNCT30OK           NO.\n         MVC   DGJSETCN,SMF30TCN  YES, COPY CHANNEL CONNECT TIME.\nCNCT30OK DS    0H\n         DROP  R8                 SMF30URA.\n         ICM   R8,15,SMF30TOF     GET COMPLETION SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE COMPLETION SECTION.\n         USING SMF30CMP,R8\n         MVC   DGJSECMP,SMF30SCC  COPY THE STEP COMPLETION CODE.\n         TM    SMF30SCC,X'80'     USER ABEND?\n         BO    COMP30OK           YES.\n         TM    SMF30STI,SMF30ABD  SYSTEM ABEND?\n         BZ    COMP30OK           NO.\n         OI    DGJSECMP,X'C0'     YES, INDICATE THIS.\nCOMP30OK DS    0H\n         DROP  R8                 SMF30CMP.\n         ICM   R8,15,SMF30COF     GET PROCESSOR SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE PROCESSOR SECTION.\n         USING SMF30CAS,R8\n         MVC   DGJSEPTY,SMF30PTY  COPY DISPATCHING PRIORITY.\n         MVC   DGJSECPT,SMF30CPT  COPY PROBLEM PROGRAM CPU TCB TIME.\n         MVC   DGJSECPS,SMF30CPS  COPY PROBLEM PROGRAM CPU SRB TIME.\n         MVC   DGJSEICU,SMF30ICU  COPY INITIATOR CPU TCB TIME.\n         MVC   DGJSEISB,SMF30ISB  COPY INITIATOR CPU SRB TIME.\n         TM    SMF30FLG,X'DE'     MVS/SP4 SMF RECORD?\n         BNO   PROC30OK           NO, OTHER CPU TIMES NOT AVAILABLE.\n         MVC   DGJSEIIP,SMF30IIP  COPY I/O INTERRUPT CPU TIME.\n         MVC   DGJSERCT,SMF30RCT  COPY REGION CONTROL TASK CPU TIME.\n         MVC   DGJSEHPT,SMF30HPT  COPY HIPERSPACE TRANSFER CPU TIME.\nPROC30OK DS    0H\n         DROP  R8                 SMF30CAS.\n         ICM   R8,15,SMF30ROF     GET STORAGE SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE STORAGE SECTION.\n         USING SMF30SAP,R8\n         MVC   DGJSESPK,SMF30SPK  COPY STORAGE PROTECT KEY.\n         MVC   DGJSEPRI,SMF30PRV  COPY REGION HIGH-WATER-MARK.\n         MVC   DGJSESYS,SMF30SYS  COPY LSQA HIGH-WATER-MARK.\n         MVC   DGJSEEUR,SMF30EUR  COPY EXTENDED REGION HIGH-WATER-MARK.\n         MVC   DGJSEEAR,SMF30EAR  COPY ELSQA HIGH-WATER-MARK.\n         MVC   DGJSEPGI,SMF30PGI  COPY PAGE-IN COUNT.\n         MVC   DGJSEPGO,SMF30PGO  COPY PAGE-OUT COUNT.\n         MVC   DGJSEPSI,SMF30PSI  COPY SWAP PAGE-IN COUNT.\n         MVC   DGJSEPSO,SMF30PSO  COPY SWAP PAGE-OUT COUNT.\n         MVC   DGJSEVPI,SMF30VPI  COPY VIO PAGE-IN COUNT.\n         MVC   DGJSEVPO,SMF30VPO  COPY VIO PAGE-OUT COUNT.\n         MVC   DGJSEVPR,SMF30VPR  COPY VIO RECLAIM COUNT.\n         MVC   DGJSECPI,SMF30CPI  COPY COMMON PAGE-IN COUNT.\n         MVC   DGJSERGN+2(2),SMF30RSV  COPY OLD REGION FIELD.\n         LA    R0,SMF30RGN-SMF30SAP+4\n         CLM   R0,3,SMF30RLN      SECTION LONG ENOUGH FOR NEW FIELD?\n         BH    STOR30OK           NO.\n         MVC   DGJSERGN,SMF30RGN  COPY REQUESTED REGION SIZE.\n         TM    SMF30FLG,X'CE'     MVS/ESA SMF RECORD?\n         BNO   STOR30OK           NO, NO SUCH THING AS A DATA SPACE.\n         MVC   DGJSEDSV,SMF30DSV  COPY DATA SPACE HIGH-WATER-MARK.\nSTOR30OK DS    0H\n         DROP  R8                 SMF30SAP.\n         ICM   R8,15,SMF30POF     GET PERFORMANCE SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE PERFORMANCE SECTION.\n         USING SMF30PRF,R8\n         MVC   DGJSESRV,SMF30SRV  COPY TOTAL SERVICE.\n         MVC   DGJSECSU,SMF30CSU  COPY CPU SERVICE.\n         MVC   DGJSESRB,SMF30SRB  COPY SRB SERVICE.\n         MVC   DGJSEIOS,SMF30IO   COPY IOS SERVICE.\n         MVC   DGJSEMSO,SMF30MSO  COPY MSO SERVICE.\n         MVC   DGJSETRS,SMF30TRS  COPY SRM TRANSACTION COUNT.\n         DROP  R8                 SMF30PRF.\n         ICM   R8,3,SMF30OON      ANY OPERATOR SECTION PRESENT?\n         BZ    OPER30OK           NO.\n         ICM   R8,15,SMF30OOF     YES, GET OPERATOR SECTION OFFSET.\n         ALR   R8,R1              POINT TO THE OPERATOR SECTION.\n         USING SMF30OPS,R8\n         L     R15,SMF30PDM       GET NON-SPECIFIC DASD MOUNT COUNT.\n         A     R15,SMF30PRD       ADD SPECIFIC DASD MOUNT COUNT.\n         A     R15,SMF30PTM       ADD NON-SPECIFIC TAPE MOUNT COUNT.\n         A     R15,SMF30TPR       ADD SPECIFIC TAPE MOUNT COUNT.\n         ST    R15,DGJSEVOL       SAVE TOTAL VOLUME MOUNT COUNT.\n         DROP  R8                 SMF30OPS.\nOPER30OK DS    0H\n         SPACE\n         L     R2,DGBASEAD        POINT TO THE BASE ENTRY.\n         USING DGBASE,R2\n         LA    R0,DGFSTJSE        POINT TO GLOBAL JSE TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         ST    R6,CHNENTRY        SUPPLY JSE ENTRY ADDRESS.\n         LA    R0,DGJSENXT-DGJSEVNT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         LA    R0,DGJSEDAT-DGJSEVNT\n         ST    R0,CHNCMPOF        SUPPLY TIMESTAMP OFFSET.\n         LA    R0,8\n         ST    R0,CHNCMPLN        SUPPLY TIMESTAMP LENGTH.\n         BAS   R14,CHAINADD       ADD JSE TO GLOBAL JSE CHAIN.\n         SPACE\n         LA    R3,DGFSTPGM        POINT TO THE FIRST PGM ENTRY POINTER.\nDGPROGLP LR    R5,R3              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R3,15,0(R3)        POINT TO THE FIRST PROGRAM ENTRY.\n         BZ    MKNEWPGM           NO MORE PROGRAM ENTRIES SO MAKE ONE.\n         USING DGPROGRM,R3\n         CLC   DGPGMNAM,DGJSEPGM  FOUND THE MATCHING PROGRAM ENTRY?\n         BE    PGMMATCH           YES.\n         BL    DGPROGLP           NO, TRY THE NEXT ONE.\n*        BH    MKNEWPGM           PAST WHERE IT SHOULD BE SO MAKE IT.\n         SPACE\nMKNEWPGM LA    R0,DGPGMLEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,9         SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R3,R0              POINT TO THE NEW ENTRY.\n         MVC   DGPGMNAM,DGJSEPGM  LOAD THE PROGRAM NAME.\n         OI    DGPGMXCP+7,X'0C'   INITIALIZE DECIMAL COUNTER.\n         OI    DGPGMSRV+7,X'0C'   INITIALIZE DECIMAL COUNTER.\n         ICM   R4,15,0(R5)        ENCOUNTERED END OF CHAIN?\n         BZ    LASTPGM            YES, ADD NEW LAST ENTRY.\n         ST    R4,DGPGMNXT        NO, POINT FORWARD TO NEXT ENTRY.\n         ST    R3,4(,R4)          POINT BACKWARD TO THIS ENTRY.\n         B     CHAINPGM           CONTINUE WITH CHAIN UPDATE.\nLASTPGM  ST    R3,DGLSTPGM        NEW ONE IS NOW THE LAST ONE.\nCHAINPGM LA    R0,DGFSTPGM        POINT TO THE FIRST PGM ENTRY POINTER.\n         CR    R5,R0              IS THIS THE FIRST PROGRAM ENTRY?\n         BE    FIRSTPGM           YES.\n         ST    R3,0(,R5)          NO, POINT FORWARD TO THIS ENTRY.\n         ST    R5,DGPGMPRV        POINT BACK TO PREVIOUS ENTRY.\n         B     COUNTPGM           GO INCREMENT THE PGM ENTRY COUNT.\nFIRSTPGM ST    R3,DGFSTPGM        THIS IS THE FIRST PROGRAM ENTRY.\nCOUNTPGM LA    R0,1\n         A     R0,DGNUMPGM        INCREMENT THE PROGRAM ENTRY COUNTER.\n         ST    R0,DGNUMPGM\n         SPACE\nPGMMATCH ST    R3,DGJSEPGA        POINT TO OWNING PROGRAM ENTRY.\n         LA    R0,DGPGMJSF        POINT TO PROGRAM JSE TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         ST    R6,CHNENTRY        SUPPLY JSE ENTRY ADDRESS.\n         LA    R0,DGJSEPRN-DGJSEVNT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         LA    R0,DGJSEDAT-DGJSEVNT\n         ST    R0,CHNCMPOF        SUPPLY TIMESTAMP OFFSET.\n         LA    R0,8\n         ST    R0,CHNCMPLN        SUPPLY TIMESTAMP LENGTH.\n         BAS   R14,CHAINADD       ADD JSE TO PROGRAM JSE CHAIN.\n         L     R0,DGJSECPT        GET PROGRAM STEP TCB TIME.\n         A     R0,DGJSECPS        ADD PROGRAM STEP SRB TIME.\n         A     R0,DGPGMCPU        ADD PREVIOUS PROGRAM CPU TIME.\n         ST    R0,DGPGMCPU        SAVE NEW PROGRAM CPU TIME TOTAL.\n         L     R0,DGJSETEP        GET PROGRAM STEP EXCP COUNT.\n         CVD   R0,WORK            CONVERT TO PACKED DECIMAL.\n         AP    DGPGMXCP,WORK      GET NEW PROGRAM EXCP TOTAL.\n         L     R0,DGJSESRV        GET PROGRAM STEP TOTAL SERVICE.\n         CVD   R0,WORK            CONVERT TO PACKED DECIMAL.\n         AP    DGPGMSRV,WORK      GET NEW PROGRAM SERVICE TOTAL.\n         DROP  R3                 DGPROGRM.\n         SPACE\n         LA    R3,DGFSTJOB        POINT TO THE FIRST JOB ENTRY POINTER.\nDGJBNMLP LR    R5,R3              REMEMBER PREVIOUS POINTER VALUE.\n         ICM   R3,15,0(R3)        POINT TO THE FIRST JOB ENTRY.\n         BZ    MKNEWJOB           NO MORE JOB ENTRIES SO MAKE ONE.\n         USING DGJOB,R3\n         CLC   DGJOBNAM,DGJSEJOB  FOUND THE MATCHING JOB ENTRY?\n         BE    JOBMATCH           YES.\n         BL    DGJBNMLP           NO, TRY THE NEXT ONE.\n*        BH    MKNEWJOB           PAST WHERE IT SHOULD BE SO MAKE IT.\n         SPACE\nMKNEWJOB LA    R0,DGJOBLEN        GET THE SIZE OF THE DESIRED ENTRY.\n         MVI   ENTRYTYP,13        SET STORAGE ENTRY TYPE CODE.\n         BAS   R14,DGNEWENT       GET THE NEW ENTRY.\n         LR    R3,R0              POINT TO THE NEW ENTRY.\n         MVC   DGJOBNAM,DGJSEJOB  LOAD THE JOB NAME.\n         OI    DGJOBXCP+7,X'0C'   INITIALIZE DECIMAL COUNTER.\n         OI    DGJOBSRV+7,X'0C'   INITIALIZE DECIMAL COUNTER.\n         ICM   R4,15,0(R5)        ENCOUNTERED END OF CHAIN?\n         BZ    LASTJOB            YES, ADD NEW LAST ENTRY.\n         ST    R4,DGJOBNXT        NO, POINT FORWARD TO NEXT ENTRY.\n         ST    R3,4(,R4)          POINT BACKWARD TO THIS ENTRY.\n         B     CHAINJOB           CONTINUE WITH CHAIN UPDATE.\nLASTJOB  ST    R3,DGLSTJOB        NEW ONE IS NOW THE LAST ONE.\nCHAINJOB LA    R0,DGFSTJOB        POINT TO THE FIRST JOB ENTRY POINTER.\n         CR    R5,R0              IS THIS THE FIRST JOB ENTRY?\n         BE    FIRSTJOB           YES.\n         ST    R3,0(,R5)          NO, POINT FORWARD TO THIS ENTRY.\n         ST    R5,DGJOBPRV        POINT BACK TO PREVIOUS ENTRY.\n         B     COUNTJOB           GO INCREMENT THE JOB ENTRY COUNT.\nFIRSTJOB ST    R3,DGFSTJOB        THIS IS THE FIRST JOB ENTRY.\nCOUNTJOB LA    R0,1\n         A     R0,DGNUMJOB        INCREMENT THE JOB ENTRY COUNTER.\n         ST    R0,DGNUMJOB\n         DROP  R2                 DGBASE.\n         SPACE\nJOBMATCH ST    R3,DGJSEJBA        POINT TO OWNING JOB ENTRY.\n         LA    R0,DGJOBJSF        POINT TO PROGRAM JSE TRIPLET.\n         ST    R0,CHNTRIPL        SUPPLY ITS ADDRESS IN PARAMETERS.\n         ST    R6,CHNENTRY        SUPPLY JSE ENTRY ADDRESS.\n         LA    R0,DGJSEJBN-DGJSEVNT\n         ST    R0,CHNPTROF        SUPPLY CHAIN POINTERS OFFSET.\n         LA    R0,DGJSEDAT-DGJSEVNT\n         ST    R0,CHNCMPOF        SUPPLY TIMESTAMP OFFSET.\n         LA    R0,8\n         ST    R0,CHNCMPLN        SUPPLY TIMESTAMP LENGTH.\n         BAS   R14,CHAINADD       ADD JSE TO JOB JSE CHAIN.\n         L     R0,DGJSECPT        GET JOB STEP TCB TIME.\n         A     R0,DGJSECPS        ADD JOB STEP SRB TIME.\n         A     R0,DGJOBCPU        ADD PREVIOUS JOB CPU TIME.\n         ST    R0,DGJOBCPU        SAVE NEW JOB CPU TIME TOTAL.\n         L     R0,DGJSETEP        GET JOB STEP EXCP COUNT.\n         CVD   R0,WORK            CONVERT TO PACKED DECIMAL.\n         AP    DGJOBXCP,WORK      GET NEW JOB EXCP TOTAL.\n         L     R0,DGJSESRV        GET JOB STEP TOTAL SERVICE.\n         CVD   R0,WORK            CONVERT TO PACKED DECIMAL.\n         AP    DGJOBSRV,WORK      GET NEW JOB SERVICE TOTAL.\n         B     GATMAIN            RECORD PROCESSING NOW COMPLETE.\n         DROP  R6,R3,R1           DGJSEVNT, DGJOB, SMFRCD30.\n         DROP  R9                 DATGAT30.\n         TITLE 'VARIABLES AND CONSTANTS  (TYPE 30 ROUTINE)'\n         LTORG\n         SPACE\n         DC    (((*-IMDATGAT-1)/256)*256+256+IMDATGAT-*)X'00'\n         TITLE 'GENERAL INITIALIZATION ROUTINE'\nIMDGINIT DS    0D\n         STM   R14,R12,12(R13)    SAVE REGISTERS.\n         LR    R9,R15             COPY BASE REGISTER.\n         USING IMDGINIT,R9\n         MVI   GATFLAGS,0         RESET ALL STATUS FLAGS.\n         MVI   SELFLAGS,SELINIT   INITIALIZE SELECTION FLAGS.\n         L     R15,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R15            COMMUNICATION VECTOR TABLE.\n         MVC   OSBITS,CVTDCB      COPY THE OS FLAGS.\n         XC    OSLVL,OSLVL        CLEAR ESA FEATURE FLAGS.\n         TM    OSBITS,X'9B'       MVS/ESA?\n         BNO   GOTOSLVL           NO.\n         MVC   OSLVL,CVTOSLVL     YES, COPY MVS/ESA FEATURE FLAGS.\n         TM    CVTOSLV1,CVTH6603  OS/390 1.3OR LATER?\n         BNO   GOTOSLVL           NO.\n         OI    GATGETAD,X'80'     YES, RUN IMGATGET IN AMODE 31.\nGOTOSLVL DS    0H\n         DROP  R15                CVT.\n         MVI   HSMFNTYP,0         RESET HSM FUNCTION SMF RECORD TYPE.\n         L     R2,0(,R1)          POINT TO PROGRAM PARAMETER.\n         EXTRACT MF=(E,EXTRACTL)  GET ADDRESS OF TSO FLAG.\n         MVC   COMMADDR,EXTRFLDS  COPY COMMUNICATION LIST ADDRESS.\n         L     R1,EXTRFLDS+4      POINT TO TSU FLAG BYTE.\n         TM    0(R1),X'80'        TIME SHARING USER ADDRESS SPACE?\n         BZ    TSUKNOWN           NO.\n         OI    GATFLAGS,TSU       YES.\n         NI    GATGETAD,X'7F'     RUN IMGATGET IN AMODE 24.\nTSUKNOWN LA    R1,0(,R2)          ENSURE ADDRESS FORMAT.\n         LTR   R1,R1              ANY PARAMETER ADDRESS?\n         BNP   PARMDONE           NO.\n         CLI   0(R1),0            PARAMETER LESS THAN 256 BYTES?\n         BNE   PARMDONE           NO, IGNORE IT.\n         CLI   1(R1),0            ANY PARAMETER AT ALL?\n         BE    PARMDONE           NO, IGNORE IT.\n         LH    R4,0(,R1)          GET THE PARAMETER LENGTH.\n         LA    R3,2(,R1)          POINT TO START OF PARAMETER TEXT.\nNEWKEYWD LR    R5,R3              POINT TO START OF POSSIBLE KEYWORD.\n         CLI   0(R3),C','         COMMA?\n         BE    XTRADLIM           YES.\n         CLI   0(R3),C' '         BLANK?\n         BNE   PKWCHKLP           NO.\nXTRADLIM LA    R3,1(,R3)          YES, IGNORE IT.\n         BCT   R4,NEWKEYWD        LOOK AT THE NEXT CHARACTER.\n         B     PARMDONE           END OF PARAMETER.\nPKWCHKLP CLI   0(R3),C'='         EQUALS SIGN?\n         BE    KWCHECK            YES, SEE WHICH KEYWORD WAS SPECIFIED.\n         CLI   0(R3),C','         COMMA?\n         BE    PREMDLIM           YES, NO ASSIGNMENT VALUE SUPPLIED.\n         CLI   0(R3),C' '         BLANK?\n         BE    PREMDLIM           YES, NO ASSIGNMENT VALUE SUPPLIED.\n         LA    R3,1(,R3)          NO, POINT TO THE NEXT BYTE.\n         BCT   R4,PKWCHKLP        LOOK AT THE NEXT CHARACTER.\n         B     PARMDONE           END OF PARAMETER.\nPREMDLIM LR    R6,R3              POINT TO THE DELIMITER.\n         SR    R6,R5              GET THE KEYWORD LENGTH.\n         BNP   COMMASCN           HANDLE OMITTED KEYWORD.\n         LA    R0,KWTELEN-8       GET MAXIMUM KEYWORD LENGTH.\n         CR    R6,R0              IS THE KEYWORD TOO LONG?\n         BNH   PREKLNOK           NO.\n         LR    R6,R0              YES, USE THE MAXIMUM LENGTH.\nPREKLNOK BCTR  R6,0               DECREMENT FOR EXECUTE.\n         EX    R6,LOADPREM        SHOW THE IGNORED KEYWORD.\n         LA    R1,GATWTO04        ISSUE \"PREMATURE DELIMITER\" MESSAGE.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n         LA    R3,1(,R3)          POINT PAST THE DELIMITER.\n         BCT   R4,COMMASCN        LOOK FOR NEXT KEYWORD.\n         B     PARMDONE           END OF PARAMETER.\nLOADPREM MVC   KEYWORD4(0),0(R5)  <<< EXECUTED >>>\nNOKEYWD  LA    R1,GATWTO04        ISSUE \"MISSING KEYWORD\" MESSAGE.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n         B     COMMASCN\nKWCHECK  LR    R6,R3              POINT TO EQUALS SIGN.\n         SR    R6,R5              GET THE KEYWORD LENGTH.\n         BNP   NOKEYWD            HANDLE MISSING KEYWORD.\n         BCTR  R6,0               DECREMENT FOR EXECUTE.\n         LA    R7,KEYWDTAB        POINT TO THE KEYWORD TABLE.\nKWDSCNLP CLI   0(R7),X'FF'        END OF TABLE?\n         BE    BADKEYWD           YES, UNKNOWN KEYWORD.\n         C     R6,0(,R7)          IS THE KEYWORD THE CORRECT LENGTH?\n         BNE   NXTKEYWD           NO.\n         EX    R6,KEYWDCMP        YES, IS IT THIS KEYWORD?\n         BE    GOTKEYWD           YES, GO PROCESS IT.\nNXTKEYWD LA    R7,KWTELEN(,R7)    POINT TO THE NEXT TABLE ENTRY.\n         B     KWDSCNLP           CONTINUE KEYWORD TABLE SCAN.\nKEYWDCMP CLC   8(0,R7),0(R5)      <<< EXECUTED >>>\nBADKEYWD LA    R0,KWTELEN-9       GET MAXIMUM KEYWORD LENGTH.\n         CR    R6,R0              IS THE KEYWORD TOO LONG?\n         BNH   BADKLNOK           NO.\n         LR    R6,R0              YES, USE THE MAXIMUM LENGTH.\nBADKLNOK EX    R6,LOADBDWD        SHOW THE IGNORED KEYWORD.\n         LA    R1,GATWTO03        ISSUE \"UNKNOWN KEYWORD\" MESSAGE.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\nCOMMASCN CLI   0(R3),C','         COMMA?\n         BE    VALUEEND           END OF THE ASSIGNED VALUE.\n         CLI   0(R3),C' '         BLANK?\n         BE    VALUEEND           END OF THE ASSIGNED VALUE.\n         LA    R3,1(,R3)          NO, POINT TO THE NEXT BYTE.\n         BCT   R4,COMMASCN        LOOK AT THE NEXT CHARACTER.\n         B     PARMDONE           END OF PARAMETER.\nVALUEEND LA    R3,1(,R3)          POINT PAST THE COMMA.\n         BCT   R4,NEWKEYWD        PROCESS THE NEW KEYWORD.\n         B     PARMDONE           END OF PARAMETER.\nLOADBDWD MVC   KEYWORD3(0),0(R5)  <<< EXECUTED >>>\nGOTKEYWD LA    R3,1(,R3)          POINT PAST THE EQUALS SIGN.\n         BCT   R4,GETVALUE        LOOK AT THE NEXT CHARACTER.\n         B     PARMDONE           NO VALUE SPECIFIED, END OF PARAMETER.\nGETVALUE CLI   0(R3),C','         COMMA?\n         BE    VALUEEND           YES, NO VALUE SPECIFIED.\n         CLI   0(R3),C' '         BLANK?\n         BE    VALUEEND           END OF THE ASSIGNED VALUE.\n         L     R15,4(,R7)         LOAD THE APPROPRIATE BRANCH ADDRESS.\n         BR    R15                GO BRANCH THERE.\nKDATASET CLI   0(R3),C'N'         IS 'NO' REQUESTED?\n         BNE   COMMASCN           NO, 'YES' IS ALREADY SET.\n         MVI   ODATASET,C'N'      YES, SET 'NO'.\n         NI    SELFLAGS,255-DSET\n         B     COMMASCN\nKPERFORM CLI   0(R3),C'N'         IS 'NO' REQUESTED?\n         BNE   COMMASCN           NO, 'YES' IS ALREADY SET.\n         MVI   OPERFORM,C'N'      YES, SET 'NO'.\n         NI    SELFLAGS,255-PERF\n         B     COMMASCN\nKJOBSTEP CLI   0(R3),C'N'         IS 'NO' REQUESTED?\n         BNE   COMMASCN           NO, 'YES' IS ALREADY SET.\n         MVI   OJOBSTEP,C'N'      YES, SET 'NO'.\n         NI    SELFLAGS,255-PGMS\n         B     COMMASCN\n*TAPEVOL CLI   0(R3),C'N'         IS 'NO' REQUESTED?\n*        BNE   COMMASCN           NO, 'YES' IS ALREADY SET.\n*        MVI   OTAPEVOL,C'N'      YES, SET 'NO'.\n*        NI    SELFLAGS,255-TAPE\n*        B     COMMASCN\n*DASDVOL CLI   0(R3),C'N'         IS 'NO' REQUESTED?\n*        BNE   COMMASCN           NO, 'YES' IS ALREADY SET.\n*        MVI   ODASDVOL,C'N'      YES, SET 'NO'.\n*        NI    SELFLAGS,255-DASD\n*        B     COMMASCN\nKTAPEJOB LA    R0,8               GET MAXIMUM JOB NAME LENGTH.\n         LA    R15,OTAPEJOB       POINT TO TARGET.\nKTPJOBLP CLI   0(R3),C','         DELIMITER?\n         BE    VALUEEND           YES.\n         CLI   0(R3),C' '         DELIMITER?\n         BE    VALUEEND           YES.\n         MVC   0(1,R15),0(R3)     NO, COPY BYTE.\n         LA    R3,1(,R3)          NO, POINT TO THE NEXT BYTE.\n         LA    R15,1(,R15)        POINT TO THE NEXT TARGET BYTE.\n         BCTR  R4,0               DECREMENT PARAMETER LENGTH.\n         LTR   R4,R4              END OF PARAMETER?\n         BNP   PARMDONE           YES.\n         BCT   R0,KTPJOBLP        LOOK AT THE NEXT CHARACTER.\n         B     COMMASCN           TRUNCATE THE JOB NAME TO 8 BYTES.\nKDASDJOB LA    R0,8               GET MAXIMUM JOB NAME LENGTH.\n         LA    R15,ODASDJOB       POINT TO TARGET.\n         B     KTPJOBLP           BRANCH TO COMMON CODE.\nKTRACJOB LA    R0,8               GET MAXIMUM JOB NAME LENGTH.\n         LA    R15,OTRACJOB       POINT TO TARGET.\n         B     KTPJOBLP           BRANCH TO COMMON CODE.\n         SPACE\nPARMDONE MVC   DASDJOB,ODASDJOB   SHOW \"DASD\" JOB NAME MASK.\n         MVC   TAPEJOB,OTAPEJOB   SHOW \"TAPE\" JOB NAME MASK.\n         MVC   TRACEJOB,OTRACJOB  SHOW \"TRACE\" JOB NAME MASK.\n         LA    R1,GATWTO06        DISPLAY OPTIONS IN USE.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n         LA    R1,GATWTO07        DISPLAY OPTIONS IN USE.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n         TM    SELFLAGS,SELANY    SELECTING ANYTHING?\n         BNZ   SELNOKAY           YES.\n         LA    R1,GATWTO08        NO, DISPLAY WARNING MESSAGE.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\nSELNOKAY DS    0H\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         SLR   R15,R15            SET ZERO RETURN CODE.\n         BR    R14                RETURN TO CALLER.\n         SPACE\n         DROP  R9                 IMDGINIT.\n         TITLE 'VARIABLES AND CONSTANTS'\nEXTRACTL EXTRACT EXTRFLDS,'S',FIELDS=(COMM,TSO),MF=L\nEXTRFLDS DC    2A(0)              ADDRESS OF EXTRACTED FIELDS.\nKEYWDTAB DS    0F                 PARAMETER KEYWORD TABLE.\n         DC    F'6',A(KDATASET),CL8'DATASET ' DATA SET EVENTS.\n         DC    F'3',A(KDATASET),CL8'DSET    ' DATA SET EVENTS.\n         DC    F'6',A(KPERFORM),CL8'PERFORM ' RMF/PDLF DATA.\n         DC    F'3',A(KPERFORM),CL8'PERF    ' RMF/PDLF DATA.\n         DC    F'6',A(KJOBSTEP),CL8'JOBSTEP ' JOB STEP TERMINATIONS.\n         DC    F'3',A(KJOBSTEP),CL8'STEP    ' JOB STEP TERMINATIONS.\n*        DC    F'6',A(KTAPEVOL),CL8'TAPEVOL ' TAPE VOLUME DISMOUNTS.\n*        DC    F'3',A(KTAPEVOL),CL8'TAPE    ' TAPE VOLUME DISMOUNTS.\n*        DC    F'6',A(KDASDVOL),CL8'DASDVOL ' DASD SPACE STATISTICS.\n*        DC    F'3',A(KDASDVOL),CL8'DASD    ' DASD SPACE STATISTICS.\n         DC    F'6',A(KTAPEJOB),CL8'TAPEJOB ' NO TAPE 14/15 EVENTS.\n         DC    F'6',A(KDASDJOB),CL8'DASDJOB ' NO DASD 14/15/17/18.\n         DC    F'7',A(KTRACJOB),CL8'TRACEJOB' ONLY EVENTS FOR THIS JOB.\n         DC    F'-1'              END OF TABLE.\nKWTELEN  EQU   16                 LENGTH OF A SINGLE TABLE ENTRY.\n         SPACE\nGATWTO03 WTO   'PRY633I  IMPGAT IGNORING UNKNOWN KEYWORD:         ',   +\n               ROUTCDE=(2,11),MF=L\nKEYWORD3 EQU   GATWTO03+46,8\nGATWTO04 WTO   'PRY634I  PREMATURE DELIMITER SO IGNORING KEYWORD:      +\n                  ',ROUTCDE=(2,11),MF=L\nKEYWORD4 EQU   GATWTO04+54,8\nGATWTO05 WTO   'PRY635I  NO KEYWORD FOUND BEFORE EQUALS SIGN',         +\n               ROUTCDE=(2,11),MF=L\nGATWTO06 WTO   'PRY636I  USING OPTIONS: PERFORM=Y DATASET=Y JOBSTEP=Y',+\n               ROUTCDE=(2,11),MF=L\nGATWTO07 WTO   'PRY637I  USING OPTIONS: TAPEJOB=         DASDJOB=      +\n                  TRACEJOB=********',                                  +\n               ROUTCDE=(2,11),MF=L\nGATWTO08 WTO   'PRY638W  WARNING: IMPGAT WILL NOT SELECT ANY DATA',    +\n               ROUTCDE=(2,11),MF=L\nOPERFORM EQU   GATWTO06+36,1\nODATASET EQU   GATWTO06+46,1\nOJOBSTEP EQU   GATWTO06+56,1\nOTAPEJOB EQU   GATWTO07+36,8\nODASDJOB EQU   GATWTO07+53,8\nOTRACJOB EQU   GATWTO07+71,8\n         SPACE 2\n         LTORG\n         SPACE\n         DC    (((*-IMDATGAT-1)/256)*256+256+IMDATGAT-*)X'00'\n         TITLE 'ABEND HANDLING ROUTINE'\nGATRETRY DS    0D\n         USING GATRETRY,R9\n         L     R9,RETRYADR        INITIALIZE BASE REGISTER.\n         MVC   RETABCDE,ABENDCDE  LOAD ABEND CODE INTO MESSAGE.\n         UNPK  RETYYYY,10(3,R1)   LOAD YEAR INTO MESSAGE.\n         TR    RETYYYY(4),ABENDHEX-C'0'\n         MVI   RETYYYY+4,C'.'\n         UNPK  RETDDD,12(2,R1)    LOAD JULIAN DAY INTO MESSAGE.\n         TR    RETDDD,ABENDHEX-C'0'\n         ICM   R7,15,6(R1)        GET THE TIME OF DAY.\n         SLR   R6,R6              CLEAR FOR DIVIDE.\n         D     R6,=F'360000'      GET THE HOURS.\n         LA    R15,RETHH          POINT TO OUTPUT FIELD.\n         BAS   R14,RETIMSG        CALL FORMATTING ROUTINE.\n         LR    R7,R6              USE THE REMAINDER.\n         SLR   R6,R6              CLEAR FOR DIVIDE.\n         D     R6,=F'6000'        GET THE MINUTES.\n         LA    R15,RETMM          POINT TO OUTPUT FIELD.\n         BAS   R14,RETIMSG        CALL FORMATTING ROUTINE.\n         LR    R7,R6              USE THE REMAINDER.\n         SLR   R6,R6              CLEAR FOR DIVIDE.\n         D     R6,=F'100'         GET THE SECONDS.\n         LA    R15,RETSS          POINT TO OUTPUT FIELD.\n         BAS   R14,RETIMSG        CALL FORMATTING ROUTINE.\n         LR    R7,R6              GET THE CENTISECONDS.\n         LA    R15,RETTH          POINT TO OUTPUT FIELD.\n         BAS   R14,RETIMSG        CALL FORMATTING ROUTINE.\n         SLR   R0,R0              CLEAR FOR INSERT.\n         IC    R0,5(,R1)          GET THE SMF RECORD TYPE.\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  RETTYPE,WORK+6(2)  LOAD SMF RECORD TYPE INTO MESSAGE.\n         MVC   RETSID,14(R1)      LOAD SYSTEM IDENTIFIER INTO MESSAGE.\n         LA    R1,GATWTO13        ISSUE NOTIFICATION OF IMPGAT START.\n         BAS   R14,DGPUTMSG       CALL MESSAGE ISSUING ROUTINE.\n         B     GATMAIN            RETURN TO MAIN PROCESSING LOOP.\n         SPACE\nRETIMSG  DS    0H                 PUT TIME COMPONENT INTO MESSAGE.\n         CVD   R7,WORK\n         OI    WORK+7,X'0F'\n         UNPK  0(2,R15),WORK+6(2)\n         BR    R14\n         SPACE\n         DROP  R12,R11,R10,R9     IMDATGAT, GATRETRY.\n         SPACE 2\nGATWTO13 WTO   'PRY613I  ABEND S___-____ PROCESSING RECORD YYYY.DDD HH:+\n               MM:SS.TH TYPE ### FROM SYSTEM ____',ROUTCDE=(2,11),MF=L\nRETABCDE EQU   GATWTO13+20,8\nRETYYYY  EQU   GATWTO13+47,5\nRETDDD   EQU   GATWTO13+52,3\nRETHH    EQU   GATWTO13+56,2\nRETMM    EQU   GATWTO13+59,2\nRETSS    EQU   GATWTO13+62,2\nRETTH    EQU   GATWTO13+65,2\nRETTYPE  EQU   GATWTO13+73,3\nRETSID   EQU   GATWTO13+89,4\n         SPACE\n         LTORG\n         SPACE\n         DC    (((*-IMDATGAT-1)/256)*256+256+IMDATGAT-*)X'00'\n         TITLE 'IMP DATA GATHERER ABNORMAL END EXIT'\n         USING GATABEND,R15\nGATABEND DS    0D\n         CH    R0,TWELVE        ENTRY CODE 12?\n         BE    ENTRY12          YES, ISSUE MESSAGE AND PERCOLATE ABEND.\n         SPACE\n         STM   R14,R12,12(R13)  NO, SAVE REGISTERS IN SUPPLIED AREA.\n         DROP  R15              GATABEND.\n         USING GATABEND,R10\n         LR    R10,R15          LOAD EXIT BASE REGISTER.\n         USING SDWA,R3\n         LR    R3,R1            POINT TO SYSTEM DIAGNOSTIC WORK AREA.\n         UNPK  ABENDCDE,SDWACMPC(2)\n         OI    ABENDCDE+2,X'F0' DISPLAY THE ABEND CODE.\n         TR    ABENDCDE,ABENDHEX-C'0'\n         UNPK  ABENDINT(5),SDWAINC1(3)\n         CLI   SDWACMPC,X'0C'   ABEND S0CX?\n         BE    GOTINTCD         YES, INTERRUPT CODE IS RELEVANT.\n         CLI   SDWACMPC,X'0D'   ABEND S0DX?\n         BE    GOTINTCD         YES, INTERRUPT CODE IS RELEVANT.\n         UNPK  ABENDINT(5),SDWASR15+2(3)\nGOTINTCD TR    ABENDINT,ABENDHEX-C'0'\n         MVI   ABENDINT+4,C'P'  RESTORE NEXT MESSAGE'S MSGID.\n         LA    R1,ABENDMS1\n         LA    R0,ABENDLN1\n         TPUT  (1),(0),R        DISPLAY ABEND CODE DETAILS.\n         UNPK  ABENDPSW(9),SDWAEC1(5)\n         TR    ABENDPSW(8),ABENDHEX-C'0'\n         MVI   ABENDPSW+8,C' '  ERASE GARBAGE.\n         UNPK  ABENDADR(9),SDWANXT1(5)\n         TR    ABENDADR(8),ABENDHEX-C'0'\n         MVI   ABENDADR+8,C'P'  RESTORE NEXT MESSAGE'S MSGID.\n         LA    R1,ABENDMS2\n         LA    R0,ABENDLN2\n         TPUT  (1),(0),R        DISPLAY PSW DETAILS.\n         LA    R1,ABENDMSN\n         LA    R0,L'ABENDMSN\n         CLI   SDWANAME+5,0     ANY ACTIVE MODULE?\n         BE    PUTACTIV         NO.\n         MVC   ABENDNAM,SDWANAME\n         UNPK  ABENDEPA(9),SDWAEPA(5)\n         TR    ABENDEPA(8),ABENDHEX-C'0'\n         MVI   ABENDEPA+8,C' '  ERASE GARBAGE.\n         L     R1,SDWANXT1\n         SL    R1,SDWAEPA       GET THE OFFSET.\n         ST    R1,ABNDTEMP\n         NI    ABNDTEMP,X'7F'   ENSURE SIGN BIT IS OFF.\n         UNPK  ABENDOFF(9),ABNDTEMP(5)\n         TR    ABENDOFF(8),ABENDHEX-C'0'\n         MVI   ABENDOFF+8,C'P'  RESTORE NEXT MESSAGE'S MSGID.\n         LA    R1,ABENDMS3\n         LA    R0,ABENDLN3\nPUTACTIV TPUT  (1),(0),R        DISPLAY ACTIVE MODULE DETAILS.\n         L     R1,SDWANXT1\n         LA    R1,0(,R1)\n         LA    R0,6\n         SR    R1,R0            POINT TO BEFORE FAILING INSTRUCTION.\n         ST    R1,ABNDTEMP\n         UNPK  ABENDTAD(9),ABNDTEMP(5)\n         TR    ABENDTAD(8),ABENDHEX-C'0'\n         MVI   ABENDTAD+8,C' '\n         LA    R0,3\n         LA    R15,ABENDATA\nABNDATLP UNPK  0(9,R15),0(5,1)\n         TR    0(8,R15),ABENDHEX-C'0'\n         MVI   8(R15),C' '\n         LA    R1,4(,R1)\n         LA    R15,9(,R15)\n         BCT   R0,ABNDATLP\n         LA    R1,ABENDMS4\n         LA    R0,ABENDLN4\n         TPUT  (1),(0),R        DISPLAY DATA AT PSW DETAILS.\n         LA    R6,4             FOUR REGISTER LINES TO BE SHOWN.\n         LA    R7,ABNDREGS      POINT TO REGISTER LABELS.\n         LA    R8,SDWAGRSV      POINT TO REGISTER CONTENTS.\nABRGLNLP MVC   ABENDRGS,0(R7)   LABEL THE REGISTERS OF THIS LINE.\n         LA    R0,4             FOUR REGISTERS SHOWN ON THIS LINE.\n         LA    R5,ABENDRDT      POINT TO FIRST DISPLAY SLOT.\nABNDRGLP UNPK  0(9,R5),0(5,R8)\n         TR    0(8,R5),ABENDHEX-C'0'\n         MVI   8(R5),C' '\n         LA    R8,4(,R8)        POINT TO NEXT REGISTER'S DATA.\n         LA    R5,9(,R5)        POINT TO NEXT DISPLAY SLOT.\n         BCT   R0,ABNDRGLP\n         LA    R1,ABENDMS5\n         LA    R0,ABENDLN5\n         TPUT  (1),(0),R        DISPLAY REGISTER CONTENTS DETAILS.\n         LA    R7,3(,R7)        POINT TO NEXT LABEL LITERAL.\n         BCT   R6,ABRGLNLP\n         L     R12,SDWAPARM     LOAD THE RETRY ADDRESS.\n         TM    SDWANXT1,X'7F'   EXECUTING ABOVE THE LINE?\n         BNZ   GATFAIL          YES, PERCOLATE THE ABEND.\n         CLC   SDWAADD1,1(R12)  ADDRESS BEFORE EXTRACTION ZONE?\n         BL    GATFAIL          YES, PERCOLATE THE ABEND.\n         CLC   SDWAADD1,5(R12)  ADDRESS AFTER EXTRACTION ZONE?\n         BNL   GATFAIL          YES, PERCOLATE THE ABEND.\n         L     R12,8(,R12)      LOAD THE RETRY ADDRESS.\n         SETRP WKAREA=(3),REGS=(14,12),DUMP=NO,RC=4,                   +\n               RETADDR=(12),RETREGS=YES,FRESDWA=YES\nGATFAIL  DS    0H               ABNORMALLY TERMINATE WITH A DUMP.\n         SETRP WKAREA=(3),REGS=(14,12),DUMP=YES,RC=0\n         DROP  3                SDWA.\n         SPACE\nENTRY12  LR    R10,R15          LOAD EXIT BASE REGISTER.\n         LR    R5,R14           SAVE RETURN ADDRESS.\n         LA    R1,ABN12MSG      POINT TO ESTAE EXIT NOTIFY MESSAGE.\n         WTO   MF=(E,(1))       ISSUE THE MESSAGE.\n         LR    R14,R5           RESTORE RETURN ADDRESS.\n         SLR   R15,R15          CONTINUE WITH ABEND (PERCOLATE).\n         BR    R14              EXIT FROM EXIT.\n         SPACE\n         DROP  R10              GATABEND.\n         SPACE 2\nABNDTEMP DC    F'0'\nTWELVE   DC    H'12'\nABENDMS1 DC    C'PRY691I  IMDATGAT TASK ABEND S'\nABENDCDE DC    C'___',C'-'\nABENDINT DC    C'____'\nABENDLN1 EQU   *-ABENDMS1\nABENDMS2 DC    C'PRY692I    PSW  '\nABENDPSW DC    CL8' ',C' '\nABENDADR DC    CL8' '\nABENDLN2 EQU   *-ABENDMS2\nABENDMS3 DC    C'PRY693I    ACTIVE MODULE '\nABENDNAM DC    CL8'________',C'  EPA '\nABENDEPA DC    CL8'________',C'  OFFSET +'\nABENDOFF DC    CL8'________'\nABENDLN3 EQU   *-ABENDMS3\nABENDMS4 DC    C'PRY694I    DATA AT '\nABENDTAD DC    CL8'________',C'   '\nABENDATA DC    CL27' '\nABENDLN4 EQU   *-ABENDMS4\nABENDMS5 DC    C'PRY695I    GPRS '\nABENDRGS DC    C'#-#',C'  '\nABENDRDT DC    CL36' '\nABENDLN5 EQU   *-ABENDMS5\nABENDMSN DC    C'PRY696I    NO ACTIVE MODULE FOUND'\nABENDHEX DC    C'0123456789ABCDEF'\nABNDREGS DC    C'0-34-78-BC-F'\nABN12MSG WTO   'PRY699I  IMDATGAT ESTAE EXIT - ENTRY CODE 12 - NO VIRTU+\n               AL STORAGE FOR RTM SDWA',ROUTCDE=(2,11),MF=L\n         SPACE\n         LTORG\n         SPACE\n         DS    0D                 END OF CSECT.\n         COPY  IMGATCOM\n         TITLE 'INTERNAL DATA AREAS'\n         COPY  IMGATDAT\n         TITLE 'RMF RECORD STRUCTURES'\n         ERBSMFR (70,71,72,73,75,78)\n         ERBSMF74 1\n         TITLE 'SMF RECORD STRUCTURES'\nSMFRECD  DSECT\n         IFASMFR (6)\n         EJECT\n         ORG   SMFRECD\n         IFASMFR (14)\n         SPACE\n         ORG   SMFJFCB1\n         IEFJFCBN\n         EJECT\n         ORG   SMFRECD\n         IFASMFR (17)\n         ORG   SMFRECD\n         IFASMFR (18)\n         EJECT\n         ORG   SMFRECD\n         IFASMFR (57)             INVOKE MACRO IAZSMF57.\n         EJECT\n         ORG   SMFRECD\n         IFASMFI6 61\n         ORG   SMFRECD\n         IFASMFR (62)\n         ORG   SMFRECD\n         IFASMFR (64)\n         ORG   SMFRECD\n         IFASMFI6 65\n         ORG   SMFRECD\n         IFASMFI6 66\n         EJECT\n         IFASMFR (30)\n         EJECT\n         COPY  PDLFRECS\n         TITLE 'SYSTEM CONTROL BLOCKS'\n         IHASDWA VRAMAP=NO\n         EJECT\n         COPY  ICFDSECT\n         EJECT\n         CVT   DSECT=YES\n         SPACE 2\n         IEESMCA\n         SPACE 2\n         END   IMDATGAT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMDGPURG": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00\\x00\\x00\\x984\\x9f\\x01\\x00'\\x1f\\x17#\\x01\\x84\\x01t\\x00r\\xe9\\xc7\\xe7\\xd7\\xf3\\xf0@@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "1998-12-15T00:00:00", "modifydate": "2000-09-27T17:23:00", "lines": 388, "newlines": 372, "modlines": 114, "user": "ZGXP30"}, "text": "IMDGPURG TITLE 'IMP DATA GATHERER - PURGE OLDEST ENTRIES'\n*        COPYRIGHT (C) 1998  PRYCROFT SIX PTY LTD\n*\n*        DGBASE ADDRESS IN R1 UPON ENTRY.\n*        DGPURGDT UPDATED UPON EXIT.\n*\n         SPACE 2\n************************************************************\n*                                                          *\n*         ENTRY AND INITIALIZATION                         *\n*                                                          *\n************************************************************\n         SPACE\nIMDGPURG CSECT\nIMDGPURG AMODE 31\nIMDGPURG RMODE 24\n         USING IMDGPURG,R15\n         B     PRGSTART           BRANCH AROUND HEADER.\n         DC    AL1(47)\n         DC    CL47'IMDGPURG COPYRIGHT (C) 1998 PRYCROFT SIX P/L   '\nPURGSAVE DC    16F'0'\nPRGSTART STM   R0,R15,PURGSAVE    SAVE REGISTERS.\n         LR    R12,R15            COPY BASE REGISTER.\n         LA    R11,2048(,R12)\n         LA    R11,2048(,R11)     LOAD SECOND BASE REGISTER.\n         DROP  R15                IMDGPURG.\n         USING IMDGPURG,R12,R11\n         LR    R2,R1              POINT TO BASE ENTRY.\n         USING DGBASE,R2\n         SPACE 2\n************************************************************\n*                                                          *\n*         DETERMINE NEW PURGE DATE                         *\n*                                                          *\n************************************************************\n         SPACE\n         OI    DGPURGDT,X'90'     SET PURGE DATE HIGH.\n         L     R3,DGFSTSYS        POINT TO FIRST SYSTEM.\n         USING DGSYSTEM,R3\nPGSYSLP1 LTR   R3,R3              END OF SYSTEM CHAIN?\n         BZ    PGSYSOK1           YES.\n         ICM   R4,15,DGFSTINT     POINT TO FIRST INTERVAL ENTRY.\n         BZ    PGINTOK1           SYSTEM HAS NO INTERVAL ENTRIES.\n         USING DGRMFINT,R4\n         CLC   DGPURGDT,DGINTDAT  NEW LOW DATE?\n         BNH   PGINTOK1           NO.\n         MVC   DGPURGDT,DGINTDAT  YES.\n         DROP  R4                 DGRMFINT.\nPGINTOK1 L     R3,DGSYSNXT        POINT TO NEXT SYSTEM ENTRY.\n         B     PGSYSLP1\n         DROP  R3                 DGSYSTEM.\nPGSYSOK1 ICM   R3,15,DGFSTDSE     POINT TO FIRST DATA SET EVENT.\n         BZ    PGDSEOK1           THERE ARE NO DATA SET EVENTS.\n         USING DGDSEVNT,R3\n         CLC   DGPURGDT,DGDSEDAT  NEW LOW DATE?\n         BNH   PGDSEOK1           NO.\n         MVC   DGPURGDT,DGDSEDAT  YES.\n         DROP  R3                 DGDSEVNT.\nPGDSEOK1 ICM   R3,15,DGFSTJSE     POINT TO FIRST JOB STEP EVENT.\n         BZ    PGJSEOK1           THERE ARE NO JOB STEP EVENTS.\n         USING DGJSEVNT,R3\n         CLC   DGPURGDT,DGJSEDAT  NEW LOW DATE?\n         BNH   PGJSEOK1           NO.\n         MVC   DGPURGDT,DGJSEDAT  YES.\n         DROP  R3                 DGJSEVNT.\n         SPACE 2\n************************************************************\n*                                                          *\n*         PURGE OLDEST PERFORMANCE DATA                    *\n*                                                          *\n************************************************************\n         SPACE\nPGJSEOK1 L     R3,DGFSTSYS        POINT TO FIRST SYSTEM.\n         USING DGSYSTEM,R3\nPGSYSLP2 LTR   R3,R3              END OF SYSTEM CHAIN?\n         BZ    PGSYSOK2           YES.\n         L     R4,DGFSTINT        POINT TO FIRST INTERVAL ENTRY.\n         USING DGRMFINT,R4\nPGINTLP2 LTR   R4,R4              ANY INTERVAL HERE?\n         BZ    PURGESYS           NO, DELETE SYSTEM ENTRY.\n         CLC   DGPURGDT,DGINTDAT  PURGE THIS INTERVAL?\n         BL    PGINTOK2           NO.\n         L     R5,DGFSTPGN        POINT TO FIRST ENTRY ADDRESS.\n         USING DGPRFGRP,R5\nPGNXTPRF LTR   R1,R5              GET ADDRESS OF THIS ENTRY.\n         BZ    PGPRFGON           ALL ENTRIES GONE.\n         LA    R15,DGPERLEN       GET LENGTH OF PERIOD SECTION.\n         M     R14,DGPRFPER       GET LENGTH OF ALL PERIOD SECTIONS.\n         LA    R0,DGPRFLEN(,R15)  GET LENGTH OF P.G. ENTRY.\n         L     R5,DGPRFNXT        POINT TO NEXT ENTRY.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         B     PGNXTPRF           GO PURGE THE NEXT ONE.\n         DROP  R5                 DGPRFGRP.\nPGPRFGON ST    R5,DGFSTPGN        NO FIRST ENTRY.\n         ST    R5,DGLSTPGN        NO LAST ENTRY.\n         L     R5,DGFSTCHN        POINT TO FIRST ENTRY ADDRESS.\n         USING DGCHPID,R5\nPGNXTCHN LTR   R1,R5              GET ADDRESS OF THIS ENTRY.\n         BZ    PGCHNGON           ALL ENTRIES GONE.\n         LA    R15,DGCHPLEN       GET LENGTH OF CHPID SECTION.\n         M     R14,DGCHNNUM       GET LENGTH OF ALL CHPID SECTIONS.\n         LA    R0,DGCHNLEN(,R15)  GET LENGTH OF CHANNEL ENTRY.\n         L     R5,DGCHNNXT        POINT TO NEXT ENTRY.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         B     PGNXTCHN           GO PURGE THE NEXT ONE.\n         DROP  R5                 DGCHPID.\nPGCHNGON ST    R5,DGFSTCHN        NO FIRST ENTRY.\n         ST    R5,DGLSTCHN        NO LAST ENTRY.\n         L     R5,DGFSTDEV        POINT TO FIRST ENTRY ADDRESS.\n         USING DGDEVICE,R5\nPGNXTDEV LTR   R1,R5              GET ADDRESS OF THIS ENTRY.\n         BZ    PGDEVGON           ALL ENTRIES GONE.\n         LA    R0,DGDEVLEN        GET LENGTH OF DEVICE ENTRY.\n         L     R5,DGDEVNXT        POINT TO NEXT ENTRY.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         B     PGNXTDEV           GO PURGE THE NEXT ONE.\n         DROP  R5                 DGDEVICE.\nPGDEVGON ST    R5,DGFSTDEV        NO FIRST ENTRY.\n         ST    R5,DGLSTDEV        NO LAST ENTRY.\n         L     R5,DGFSTPAG        POINT TO FIRST ENTRY ADDRESS.\n         USING DGPAGEDS,R5\nPGNXTPAG LTR   R1,R5              GET ADDRESS OF THIS ENTRY.\n         BZ    PGPAGGON           ALL ENTRIES GONE.\n         LA    R0,DGPAGLEN        GET LENGTH OF PAGE DATA SET ENTRY.\n         L     R5,DGPAGNXT        POINT TO NEXT ENTRY.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         B     PGNXTPAG           GO PURGE THE NEXT ONE.\n         DROP  R5                 DGPAGEDS.\nPGPAGGON ST    R5,DGFSTPAG        NO FIRST ENTRY.\n         ST    R5,DGLSTPAG        NO LAST ENTRY.\n         LA    R6,DGFSTINT        POINT TO RMF INTERVAL ANCHORS.\n         LA    R7,DGINTLEN        GET RMF INTERVAL ENTRY LENGTH.\n         BAS   R8,PURGITEM        PURGE THIS INTERVAL ENTRY.\n         B     PGINTLP2           PROCESS NEXT INTERVAL.\n         DROP  R4                 DGRMFINT.\n         SPACE\nPURGESYS L     R5,DGFSTPG#        POINT TO FIRST ENTRY ADDRESS.\n         USING DGPG#ENT,R5\nPGNXTPG# LTR   R1,R5              GET ADDRESS OF THIS ENTRY.\n         BZ    PGPG#GON           ALL ENTRIES GONE.\n         LA    R0,DGPG#LEN        GET LENGTH OF THE ENTRY.\n         L     R5,DGPG#NXT        POINT TO NEXT ENTRY.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         B     PGNXTPG#           GO PURGE THE NEXT ONE.\n         DROP  R5                 DGPG#ENT.\nPGPG#GON ST    R5,DGFSTPG#        NO FIRST ENTRY.\n         ST    R5,DGLSTPG#        NO LAST ENTRY.\n         L     R5,DGFSTCH#        POINT TO FIRST ENTRY ADDRESS.\n         USING DGCH#ENT,R5\nPGNXTCH# LTR   R1,R5              GET ADDRESS OF THIS ENTRY.\n         BZ    PGCH#GON           ALL ENTRIES GONE.\n         LA    R0,DGCH#LEN        GET LENGTH OF THE ENTRY.\n         L     R5,DGCH#NXT        POINT TO NEXT ENTRY.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         B     PGNXTCH#           GO PURGE THE NEXT ONE.\n         DROP  R5                 DGCH#ENT.\nPGCH#GON ST    R5,DGFSTCH#        NO FIRST ENTRY.\n         ST    R5,DGLSTCH#        NO LAST ENTRY.\n         L     R5,DGFSTDV#        POINT TO FIRST ENTRY ADDRESS.\n         USING DGDV#ENT,R5\nPGNXTDV# LTR   R1,R5              GET ADDRESS OF THIS ENTRY.\n         BZ    PGDV#GON           ALL ENTRIES GONE.\n         LA    R0,DGDV#LEN        GET LENGTH OF THE ENTRY.\n         L     R5,DGDV#NXT        POINT TO NEXT ENTRY.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         B     PGNXTDV#           GO PURGE THE NEXT ONE.\n         DROP  R5                 DGDV#ENT.\nPGDV#GON ST    R5,DGFSTDV#        NO FIRST ENTRY.\n         ST    R5,DGLSTDV#        NO LAST ENTRY.\n         L     R5,DGFSTPDN        POINT TO FIRST ENTRY ADDRESS.\n         USING DGPDNENT,R5\nPGNXTPDN LTR   R1,R5              GET ADDRESS OF THIS ENTRY.\n         BZ    PGPDNGON           ALL ENTRIES GONE.\n         LA    R0,DGPDNLEN        GET LENGTH OF THE ENTRY.\n         L     R5,DGPDNNXT        POINT TO NEXT ENTRY.\n         FREEMAIN RU,LV=(0),A=(1),SP=23\n         B     PGNXTPDN           GO PURGE THE NEXT ONE.\n         DROP  R5                 DGPDNENT.\nPGPDNGON ST    R5,DGFSTPDN        NO FIRST ENTRY.\n         ST    R5,DGLSTPDN        NO LAST ENTRY.\n         LR    R4,R3              POINT TO SYSTEM ENTRY TO PURGE.\n         LA    R6,DGFSTSYS        POINT TO SYSTEM ENTRY ANCHORS.\n         LA    R7,DGSYSLEN        GET SYSTEM ENTRY LENGTH.\n         BAS   R8,PURGITEM        PURGE THIS SYSTEM ENTRY.\n         LR    R3,R4              POINT TO NEXT SYSTEM ENTRY.\n         B     PGSYSLP2           PROCESS IT.\nPGINTOK2 L     R3,DGSYSNXT        POINT TO THE NEXT SYSTEM ENTRY.\n         B     PGSYSLP2           PROCESS IT.\n         DROP  R3                 DGSYSTEM.\n         SPACE 2\n************************************************************\n*                                                          *\n*         PURGE DATA SET EVENT DATA                        *\n*                                                          *\n************************************************************\n         SPACE\nPGSYSOK2 L     R3,DGFSTDSE        POINT TO FIRST DATA SET EVENT.\n         USING DGDSEVNT,R3\nPGDSELP2 LTR   R3,R3              END OF DSE CHAIN?\n         BZ    PGDSEOK2           YES.\n         CLC   DGPURGDT,DGDSEDAT  PURGE THIS EVENT?\n         BL    PGDSEOK2           NO.\n         L     R6,DGDSENAM        YES, POINT TO OWNING DATA SET ENTRY.\n         USING DGDATAST,R6\n         SLR   R0,R0              GET ZERO.\n         ICM   R5,15,DGDSEDSN     POINT TO THE NEXT ENTRY.\n         BZ    PURGEDSN           PURGING THE LAST ENTRY.\n         DROP  R3                 DGDSEVNT.\n         USING DGDSEVNT,R5\n         ST    R0,DGDSEDSP        ZERO NEW FIRST'S BACK POINTER.\n         ST    R5,DGDSNDSF        UPDATE POINTER TO FIRST ENTRY.\n         DROP  R5                 DGDSEVNT.\n         ICM   R0,15,DGDSNDS#     GET ENTRY COUNTER AFTER ANCHORS.\n         BNP   PGDSDSOK           AVOID GOING NEGATIVE.\n         BCTR  R0,0               DECREMENT.\n         ST    R0,DGDSNDS#        SAVE THE UPDATED COUNTER.\n         B     PGDSDSOK           DO NOT PURGE DATA SET NAME ENTRY.\nPURGEDSN ST    R0,DGDSNDSF        NO FIRST ENTRY.\n         ST    R0,DGDSNDSL        NO LAST ENTRY.\n         ST    R0,DGDSNDS#        NO ENTRIES.\n         DROP  R6                 DGDATAST.\n         LR    R4,R6              POINT TO ENTRY TO PURGE.\n         LA    R6,DGFSTDSN        POINT TO ENTRY ANCHORS.\n         LA    R7,DGDSNLEN        GET ENTRY LENGTH.\n         BAS   R8,PURGITEM        PURGE THIS DATA SET ENTRY.\n         USING DGDSEVNT,R3\nPGDSDSOK LR    R4,R3              POINT TO EVENT ENTRY TO PURGE.\n         LA    R6,DGFSTDSE        POINT TO EVENT ENTRY ANCHORS.\n         LA    R7,DGDSEL14        GET EVENT ENTRY LENGTH.\n         CLI   DGDSETYP,14        GOT THE RIGHT LENGTH?\n         BE    PGTHEDSE           YES.\n         CLI   DGDSETYP,15        GOT THE RIGHT LENGTH?\n         BE    PGTHEDSE           YES.\n         CLI   DGDSETYP,127       GOT THE RIGHT LENGTH?\n         BH    PGTHEDSE           YES.\n         LA    R7,DGDSEL64        GET EVENT ENTRY LENGTH.\n         CLI   DGDSETYP,64        GOT THE RIGHT LENGTH?\n         BE    PGTHEDSE           YES.\n         LA    R7,DGDSEL17        GET EVENT ENTRY LENGTH.\nPGTHEDSE BAS   R8,PURGITEM        PURGE THIS DATA SET EVENT ENTRY.\n         LR    R3,R4              POINT TO NEXT EVENT ENTRY.\n         B     PGDSELP2           PROCESS IT.\n         DROP  R3                 DGDSEVNT.\n         SPACE 2\n************************************************************\n*                                                          *\n*         PURGE JOB STEP EVENT DATA                        *\n*                                                          *\n************************************************************\n         SPACE\nPGDSEOK2 L     R3,DGFSTJSE        POINT TO FIRST JOB STEP EVENT.\n         USING DGJSEVNT,R3\nPGJSELP2 LTR   R3,R3              END OF JSE CHAIN?\n         BZ    PGJSEOK2           YES.\n         CLC   DGPURGDT,DGJSEDAT  PURGE THIS EVENT?\n         BL    PGJSEOK2           NO.\n         L     R6,DGJSEPGA        YES, POINT TO OWNING PROGRAM ENTRY.\n         USING DGPROGRM,R6\n         SLR   R0,R0              GET ZERO.\n         ICM   R5,15,DGJSEPRN     POINT TO THE NEXT ENTRY.\n         BZ    PURGEPGM           PURGING THE LAST ENTRY.\n         DROP  R3                 DGJSEVNT.\n         USING DGJSEVNT,R5\n         ST    R0,DGJSEPRP        ZERO NEW FIRST'S BACK POINTER.\n         ST    R5,DGPGMJSF        UPDATE POINTER TO FIRST ENTRY.\n         DROP  R5                 DGJSEVNT.\n         ICM   R0,15,DGPGMJS#     GET ENTRY COUNTER AFTER ANCHORS.\n         BNP   PGJSPROK           AVOID GOING NEGATIVE.\n         BCTR  R0,0               DECREMENT.\n         ST    R0,DGPGMJS#        SAVE THE UPDATED COUNTER.\n         B     PGJSPROK           DO NOT PURGE PROGRAM ENTRY.\nPURGEPGM ST    R0,DGPGMJSF        NO FIRST ENTRY.\n         ST    R0,DGPGMJSL        NO LAST ENTRY.\n         ST    R0,DGPGMJS#        NO ENTRIES.\n         DROP  R6                 DGPROGRM.\n         LR    R4,R6              POINT TO ENTRY TO PURGE.\n         LA    R6,DGFSTPGM        POINT TO ENTRY ANCHORS.\n         LA    R7,DGPGMLEN        GET ENTRY LENGTH.\n         BAS   R8,PURGITEM        PURGE THIS PROGRAM ENTRY.\n         USING DGJSEVNT,R3\nPGJSPROK L     R6,DGJSEJBA        POINT TO OWNING JOB ENTRY.\n         USING DGJOB,R6\n         SLR   R0,R0              GET ZERO.\n         ICM   R5,15,DGJSEJBN     POINT TO THE NEXT ENTRY.\n         BZ    PURGEJOB           PURGING THE LAST ENTRY.\n         DROP  R3                 DGJSEVNT.\n         USING DGJSEVNT,R5\n         ST    R0,DGJSEJBP        ZERO NEW FIRST'S BACK POINTER.\n         ST    R5,DGJOBJSF        UPDATE POINTER TO FIRST ENTRY.\n         DROP  R5                 DGJSEVNT.\n         ICM   R0,15,DGJOBJS#     GET ENTRY COUNTER AFTER ANCHORS.\n         BNP   PGJSJBOK           AVOID GOING NEGATIVE.\n         BCTR  R0,0               DECREMENT.\n         ST    R0,DGJOBJS#        SAVE THE UPDATED COUNTER.\n         B     PGJSJBOK           DO NOT PURGE JOB ENTRY.\nPURGEJOB ST    R0,DGJOBJSF        NO FIRST ENTRY.\n         ST    R0,DGJOBJSL        NO LAST ENTRY.\n         ST    R0,DGJOBJS#        NO ENTRIES.\n         DROP  R6                 DGJOB.\n         LR    R4,R6              POINT TO ENTRY TO PURGE.\n         LA    R6,DGFSTJOB        POINT TO ENTRY ANCHORS.\n         LA    R7,DGJOBLEN        GET ENTRY LENGTH.\n         BAS   R8,PURGITEM        PURGE THIS JOB ENTRY.\nPGJSJBOK LR    R4,R3              POINT TO EVENT ENTRY TO PURGE.\n         LA    R6,DGFSTJSE        POINT TO EVENT ENTRY ANCHORS.\n         LA    R7,DGJSELEN        GET EVENT ENTRY LENGTH.\n         BAS   R8,PURGITEM        PURGE THIS JOB STEP EVENT ENTRY.\n         LR    R3,R4              POINT TO NEXT EVENT ENTRY.\n         B     PGJSELP2           PROCESS IT.\n         SPACE 2\n************************************************************\n*                                                          *\n*         TERMINATION AND EXIT                             *\n*                                                          *\n************************************************************\n         SPACE\nPGJSEOK2 LM    R0,R15,PURGSAVE    RESTORE REGISTERS.\n         BR    R14                RETURN TO CALLER.\n         DROP  R2                 DGBASE.\n         SPACE 2\n************************************************************\n*                                                          *\n*         PURGE AN ENTRY ON A CHAIN                        *\n*                                                          *\n************************************************************\n*                                                          *\n*        R4 = ADDRESS OF ENTRY TO PURGE.                   *\n*        R5 = ADDRESS OF NEXT/PREVIOUS ENTRIES (WORK).     *\n*        R6 = ENTRY CHAIN ANCHORS (FIRST/LAST/COUNT).      *\n*        R7 = LENGTH OF ENTRY TO PURGE.                    *\n*        R8 = RETURN ADDRESS.                              *\n*                                                          *\n*  ASSUMPTION:  NEXT/PREVIOUS POINTERS AT START OF ENTRY.  *\n*                                                          *\n************************************************************\n         SPACE\nPURGITEM ICM   R5,15,4(R4)        POINT TO THE PREVIOUS ENTRY.\n         BZ    PGDELFST           PURGING THE FIRST ENTRY.\n         MVC   0(4,R5),0(R4)      COPY NEXT POINTER TO PREVIOUS.\n         B     PGDELPRV           PREVIOUS ENTRY NOW UPDATED.\nPGDELFST MVC   0(4,R6),0(R4)      COPY NEXT POINTER TO FIRST POINTER.\nPGDELPRV ICM   R5,15,0(R4)        POINT TO THE NEXT ENTRY.\n         BZ    PGDELLST           PURGING THE LAST ENTRY.\n         MVC   4(4,R5),4(R4)      COPY PREVIOUS POINTER TO NEXT.\n         B     PGDELNXT           NEXT ENTRY NOW UPDATED.\nPGDELLST MVC   4(4,R6),4(R4)      COPY PREV POINTER TO LAST POINTER.\nPGDELNXT ICM   R0,15,8(R6)        GET ENTRY COUNTER AFTER ANCHORS.\n         BNP   PGDELCNT           AVOID GOING NEGATIVE.\n         BCTR  R0,0               DECREMENT.\n         ST    R0,8(,R6)          SAVE THE UPDATED COUNTER.\nPGDELCNT FREEMAIN RU,LV=(R7),A=(R4),SP=23\n         LR    R4,R5              POINT TO THE NEXT ENTRY.\n         BR    R8                 RETURN TO CALLER.\n         SPACE 2\n************************************************************\n*                                                          *\n*         CONSTANTS AND VARIABLES                          *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE 2\n************************************************************\n*                                                          *\n*         DSECTS AND EQUATES                               *\n*                                                          *\n************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         COPY  IMGATDAT\n         SPACE 2\n         END   IMDGPURG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMDSDATA": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98#\\x7f\\x00\\x98#\\x7f\\x17\\x02\\x00\\x19\\x00\\x19\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-08-25T00:00:00", "modifydate": "1998-08-25T17:02:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "T$QGP75"}, "text": "*  (c) 1998 - B. Break    TDD - Transported Dataspace Details\nINFTDD1  DSECT                  Asid dataspace information table\nTDD1SIZE DS    F                INFTDD1 size\nTDD1DSP# DS    F                Number of dataspace records\nTDD1DSPL DS    F                Dataspace record length\nTDD1DSPA EQU   *                Dataspace records area\n\nTDD1DSP  DSECT                  Dataspace record\nTDD1DSPN DS    CL8              Dataspace name\nTDD1STOK DS    CL8              Dataspace STOKEN\nTDD1ASTE DS    A                Dataspace ASTE real address\nTDD1ATTR DS    XL1              Dataspace attribute\nTDD1SALL EQU   X'80'            Dataspace scope = \"ALL\"\nTDD1SSGL EQU   X'40'            Dataspace scope = \"SINGLE\"\nTDD1SCMN EQU   X'10'            Dataspace scope = \"COMMON\"\nTDD1KEYS DS    XL1              Dataspace key/fetch protect\n* Bits 0-3 --> Storage key\n* Bit 4 --> Fetch protection indicator\n* Bits 5-8 --> Unused\n         DS    XL2              Reserved\nTDD1OTCB DS    F                Dataspace owning TCB address\nTDD1RANG DS    A                Dataspace storage range\nTDD1ORIG DS    F                Dataspace origin (0 or 4096)\nTDD1BLKS DS    F                Dataspace maximum # 4k storage blocks\nTDD1DSPS EQU   *-TDD1DSP        Dataspace record size\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMDSPACE": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x98#\\x7f\\x00\\x98)o\\x15D\\x03\\xef\\x04\\x00\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1998-08-25T00:00:00", "modifydate": "1998-10-23T15:44:00", "lines": 1007, "newlines": 1024, "modlines": 0, "user": "T$QGP75"}, "text": "IMDSPACE CSECT\nIMDSPACE AMODE 31\nIMDSPACE RMODE ANY\n\n*********************************************************************\n*                                                                   *\n*        This module performs the following functions:              *\n*        1. List all dataspaces owned by a specified address space, *\n*           along with general information about the dataspace.     *\n*        2. Display a 4K page of dataspace storage.                 *\n*                                                                   *\n*        Entry point : IMDSPACE                                     *\n*                                                                   *\n*        Input registers:                                           *\n*          R0: N/A                                                  *\n*          R1: Address of caller's parameter list pointer           *\n*          R2-12: N/A                                               *\n*          R13: Address of register save area                       *\n*          R14: Return address                                      *\n*          R15: Entry point address                                 *\n*                                                                   *\n*        Output registers:                                          *\n*          R0-14: Same as on entry                                  *\n*          R15: Return code                                         *\n*               0 - IMDSPACE completed successfully                 *\n*               4 - No dataspaces owned by the specified asid       *\n*               8 - Invalid asid or STOKEN specified                *\n*              12 - IMDSPACE parameter list error                   *\n*              16 - IMDSPACE internal error                         *\n*              20 - Storage address out of range                    *\n*                                                                   *\n*        Register usage(internal):                                  *\n*          R0-11: Work registers                                    *\n*          R12: Base register                                       *\n*          R13: Address of workarea                                 *\n*          R14-15: Work and linkage registers                       *\n*                                                                   *\n*                                                                   *\n*        Upon entry to this routine, R1 must point to the address   *\n*        of the caller's parameter list pointer.  The parameter     *\n*        list must be formatted as follows:                         *\n*                                                                   *\n*        PARMLIST DS   0CL20                                        *\n*        PARM1    DS   CL4 (function request type \"LD\" or \"DS\")     *\n*        PARM2    DS   XL4 (asid or storage start address)          *\n*        PARM3    DS   CL8 (dataspace STOKEN)                       *\n*        PARM4    DS   A   (return information table address        *\n*                           or storage display buffer address)      *\n*                                                                   *\n*        PARM1 is an input parameter and specifies the function     *\n*        request type.  PARM1 can have any of the following values: *\n*        \"LD\" - List all dataspaces owned by the specified asid.    *\n*        \"DS\" - Display one 4k page of dataspace storage.           *\n*        The function type must be left justified and blank padded  *\n*        on the right.                                              *\n*                                                                   *\n*        PARM2 must contain an asid if PARM1 specified \"LD\".  The   *\n*        asid must be right-justified and padded with zeros on the  *\n*        left.  If PARM1 specified \"DS\", then PARM2 must contain    *\n*        the start address of the dataspace page of storage that is *\n*        to be displayed (address must be on a 4k page boundary).   *\n*                                                                   *\n*        PARM3 must contain a dataspace STOKEN if PARM1 specified   *\n*        \"DS\".                                                      *\n*                                                                   *\n*        PARM4 is an output parameter and contains the address of   *\n*        the return information table that this routine acquires    *\n*        for a \"LD\" type call or the address of the storage display *\n*        buffer for a \"DS\" type call.  Storage for the information  *\n*        return table is obtained in E(PVT), subpool 130, and the   *\n*        caller's psw key, while storage for the dataspace storage  *\n*        display buffer is obtained in E(CSA), subpool 241, and the *\n*        caller's psw key.  It is the caller's responsibilty to     *\n*        free storage when finished with its' use.                  *\n*                                                                   *\n*        The format of the \"LD\" information table is as follows:    *\n*                                                                   *\n*        INFTDD1  DS    0D   All dataspaces owned by specified asid *\n*        TDD1SIZE DS    F    Total table size                       *\n*        TDD1DSP# DS    F    Number of dataspace records            *\n*        TDD1DSPL DS    F    Dataspace record length                *\n*        TDD1DSPA EQU   *    Dataspace records area                 *\n*                                                                   *\n*        Environment: Amode 31, rmode any, supervisor state,        *\n*                     psw key 0.                                    *\n*                                                                   *\n*                                                                   *\n*        Author: Bob Break                                          *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\n***********************************************************************\n*                                                                     *\n*        Initialization.                                              *\n*                                                                     *\n***********************************************************************\n\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n\n         USING PSA,0\nIMDSP000 BAKR R14,0                     Save caller's environment\n         LR    R12,R15                  Set base register\n         USING IMDSP000,R12               and addressability\n         B     IMDSP001                 Branch around module identifier\n         DC    CL8'IMDSPACE'            Module name\n         DC    C'&SYSDATE'              Assembly date\n         DC    C'VERS01'                Version\nIMDSP001 DS    0H\n         MODESET MODE=SUP               Set supervisor state\n         IPK   0(0)                     Get caller's psw key\n         SPKA  0(0)                     Set psw key 0\n         LA    R0,WORKSIZE              Get workarea size\n         STORAGE OBTAIN,LENGTH=(R0),LOC=ANY\n         LR    R3,R1                    Save workarea pointer\n         LR    R14,R3                   Get pointer into work register\n         LA    R15,WORKSIZE             Set move to length\n         XR    R1,R1                    Set move from length and pad\n         MVCL  R14,R0                   Clear workarea\n         ST    R3,8(,R13)               Chain save areas\n         ST    R13,4(,R3)               *\n         LR    R13,R3                   Set workarea pointer\n         USING WORKAREA,R13\n         EREG  R0,R1                    Restore entry registers 0-1\n         L     R1,0(,R1)                Point to input parm list\n         ST    R1,PARMPTR               Save parm list pointer\n         STC   R2,CALLKEY               Save caller's psw key\n\n***********************************************************************\n*                                                                     *\n*        Extract the input parameters.                                *\n*                                                                     *\n***********************************************************************\n\nIMDSP010 CLC   0(2,R1),=CL2'LD'          List dataspaces for asid?\n         BNE   IMDSP011                  No - branch, continue\n         L     R15,=A(IMDSP100)          Get dsp list routine pointer\n         BALR  R14,R15                   Branch - process request\n         B     IMDSPRET                  Branch - return\nIMDSP011 CLC   0(2,R1),=CL2'DS'          Display dataspace storage?\n         BE    IMDSP012                  Yes - branch, continue\n         MVC   RETCODE,=F'12'            Set error return code\n         B     IMDSPRET                  Branch - return\nIMDSP012 L     R15,=A(IMDSP200)          Get dataspace storage pointer\n         BALR  R14,R15                   Branch - process request\n         B     IMDSPRET                  Branch - return\n\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n\nIMDSPRET L     R2,RETCODE                Get return code\n         LA    R0,WORKSIZE               Get workarea size\n         LR    R1,R13                    Get workarea pointer\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)\n         LR    R15,R2                    Set return code\n         PR                              Return to caller\n\n         LTORG\n\n\n*********************************************************************\n*********************************************************************\n*                                                                   *\n*        IMDSP100 - List all dataspaces owned by a specified asid.  *\n*                                                                   *\n*        Register usage:                                            *\n*                                                                   *\n*        Input           Output           Internal                  *\n*        -----           ------           --------                  *\n* R0-11  N/A             Unchanged        Work                      *\n* R12    N/A             Unchanged        Base register             *\n* R13    Workarea        Unchanged        Workarea                  *\n* R14    BALR address    Return address   Work                      *\n* R15    N/A             Unchanged        Work                      *\n*                                                                   *\n*        Environment - Internal IMDSPACE routine. Invoked by BALR.  *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\nIMDSP100 DS    0H\n         BAKR  R14,0                Save caller's environment\n         LR    R12,R15              Set up base register\n         USING IMDSP100,R12           and addressability\n\n***********************************************************************\n*                                                                     *\n*        Determine the specified asid number.                         *\n*                                                                     *\n***********************************************************************\n\nIMDSP110 XR    R1,R1                Clear work register\n         L     R14,PARMPTR          Get input parm pointer\n         LA    R14,4(,R14)          Get input asid value\n         LA    R15,4                Set scan limit\nIMDSP111 CLI   0(R14),C'A'          Validity check digit\n         BL    IMDSP115             Branch if invalid\n         CLI   0(R14),C'F'          Validity check digit\n         BH    IMDSP112             Branch of not 'A' - 'F'\n         TR    0(1,R14),ASIDTRAN    Translate character\n         B     IMDSP113             Branch - continue\nIMDSP112 CLI   0(R14),C'0'          Validity check digit\n         BL    IMDSP115             Branch if invalid\n         CLI   0(R14),C'9'          Validity check digit\n         BH    IMDSP115             Branch if invalid\nIMDSP113 NI    0(R14),X'0F'         Isolate digit\n         XR    R0,R0                Retrieve digit\n         IC    R0,0(R14)            *\n         MH    R1,=H'16'            Multiply asid # by 16\n         AR    R1,R0                Add current digit to total\n         LA    R14,1(,R14)          Bump to next character\n         BCT   R15,IMDSP111         Loop back for next digit\nIMDSP114 LTR   R1,R1                ASID zero?\n         BZ    IMDSP115             Yes - branch, invalid\n         L     R15,CVTPTR(,0)       Get CVT pointer\n         L     R15,CVTASVT-CVT(,R15)  Get ASVT pointer\n         C     R1,ASVTMAXU-ASVT(,R15)  Is asid number valid?\n         BH    IMDSP115             Branch - invalid asid\n         STH   R1,ASIDNBR           Save specified asid number\n         SLL   R1,2                 Multiply asid number by 4\n         LA    R14,ASVTFRST-ASVT(R1,R15)  Get ASVT entry pointer\n         TM    0(R14),ASVTAVAL      Address space active?\n         BZ    IMDSP120             Yes - branch, continue\nIMDSP115 MVC   RETCODE,=F'8'        Set error return code\n         B     IMDSP199             Branch - return\n\n***********************************************************************\n*                                                                     *\n*        Obtain a list of all dataspaces owned by the specified       *\n*        address space, along with general information for each       *\n*        dataspace.                                                   *\n*                                                                     *\n***********************************************************************\n\nIMDSP120 L     R1,CVTPTR(,0)        Get CVT pointer\n         L     R1,CVTASVT-CVTMAP(,R1)  Get ASVT pointer\n         USING ASVT,R1\n         L     R0,ASVTMAXU          Get max address spaces\n         LA    R1,ASVTENTY          Get address of ASVT entries\n         DROP  R1                   ASVT\nIMDSP121 TM    0(R1),ASVTAVAL       Slot occupied?\n         BO    IMDSP122             No - bypass this one\n         ICM   R14,15,0(R1)         Get ASCB pointer\n         BZ    IMDSP122             Branch - no ASCB pointer\n         USING ASCB,R14\n         ICM   R15,15,ASCBJBNS      Get jobname field for stc/tsu\n         BZ    IMDSP122             Branch - batch ASCB\n         CLC   0(8,R15),=CL8'RASP'  RASP ASCB?\n         BE    IMDSP123             Yes - branch, continue\nIMDSP122 LA    R1,4(,R1)            Point to next ASVT entry\n         BCT   R0,IMDSP121          Loop back to check next ASVT\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP199             Branch - return\nIMDSP123 LA    R1,WORKDSPL          Set parm pointer for DSPLIST\n         USING DSPLIST,R1\n         MVC   DSPLASID,ASCBASID    Set RASP asid for DSPLIST\n         DROP  R1                   DSPLIST\n         DROP  R14                  ASCB\n         L     R15,CVTPTR(,0)       Get CVT pointer\n         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer\n         L     R15,PVTCCDSL-PVT(,R15)  Get IARCCDSL address\n         BALR  R14,R15              Invoke DSPLIST service routine\n         LTR   R15,R15              DSPLIST successful?\n         BZ    IMDSP124             Yes - branch, continue\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP199             Branch - return\nIMDSP124 LA    R1,WORKDSPL          Get DSPLIST pointer\n         USING DSPLIST,R1\n         ICM   R2,15,DSPLDSDP       Get DSD pointer\n         BNZ   IMDSP125             Branch - continue\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP199             Branch - return\n         DROP  R1                   DSPLIST\n         USING DSD,R2\nIMDSP125 ICM   R15,15,DSDTNUM       Get number of dataspace records\n         BNZ   IMDSP126             Branch - continue\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP129             Branch - continue\nIMDSP126 LA    R3,DSDTAB            Point to DSDTAB\n         USING DSDE,R3\n         L     R9,DSDTNUM           Get # DSDTAB entries\n         LA    R10,RASPALET         Point to RASP ALETs save area\nIMDSP127 MVC   WORKALET,=F'-1'      Set input ALET for ALESERV\n         ALESERV SEARCH,ALET=WORKALET,STOKEN=DSDESTOK,AL=WORKUNIT\n         LTR   R15,R15              ALET found?\n         BZ    IMDSP128             Yes - branch, continue\n         ALESERV ADD,ALET=WORKALET,STOKEN=DSDESTOK,AL=WORKUNIT,        X\n               CHKEAX=NO\nIMDSP128 MVC   0(4,R10),WORKALET    Save RASP dataspace ALET\n         LA    R3,DSDESIZE(,R3)     Bump to next DSDTAB entry\n         LA    R10,4(,R10)          Bump to next RASP ALET save area\n         BCT   R9,IMDSP127          Loop back for next DSDTAB entry\nIMDSP129 L     R0,DSDLEN            Get DSD length\n         XR    R3,R3                Get DSD subpool number\n         IC    R3,DSDSPID           *\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R2),SP=(R3)\n         DROP  R2,R3                DSD, DSDE\n         CLC   RETCODE,=F'0'        Any errors so far?\n         BNE   IMDSP199             Yes - branch, return\nIMDSP130 XC    WORKDSPL(DSPLISTL),WORKDSPL  Clear DSPLIST parm list\n         LA    R1,WORKDSPL          Set parm pointer for DSPLIST\n         USING DSPLIST,R1\n         MVC   DSPLASID,ASIDNBR     Set asid for DSPLIST\n         DROP  R1                   DSPLIST\n         L     R15,CVTPTR(,0)       Get CVT pointer\n         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer\n         L     R15,PVTCCDSL-PVT(,R15)  Get IARCCDSL address\n         BALR  R14,R15              Invoke DSPLIST service routine\n         LTR   R15,R15              DSPLIST successful?\n         BZ    IMDSP131             Yes - branch, continue\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP199             Branch - return\nIMDSP131 LA    R1,WORKDSPL          Get DSPLIST pointer\n         USING DSPLIST,R1\n         ICM   R2,15,DSPLDSDP       Get DSD pointer\n         BNZ   IMDSP132             Branch - continue\n         MVC   RETCODE,=F'4'        Set no dataspaces return code\n         B     IMDSP199             Branch - return\n         DROP  R1                   DSPLIST\n         USING DSD,R2\nIMDSP132 LA    R1,TDD1DSPS          Get dataspace record size\n         ICM   R15,15,DSDTNUM       Get number of dataspace records\n         BNZ   IMDSP133             Branch - continue\n         MVC   RETCODE,=F'4'        Set no dataspaces return code\n         B     IMDSP160             Branch - continue\nIMDSP133 MR    R14,R1               Calculate dataspaces area length\n         LA    R0,(TDD1DSPA-INFTDD1)  Get fixed INFTDD1 length\n         ALR   R0,R15               Calculate total INFTDD1 length\n         LR    R3,R0                Save INFTDD1 length\n         IC    R5,CALLKEY           Get caller's psw key\n         STORAGE OBTAIN,LENGTH=(R0),SP=130,KEY=(R5),LOC=ANY\n         ST    R1,INFTABP           Save table pointer\n         LR    R11,R1               Set table pointer\n         LR    R14,R1               Get pointer into work register\n         LR    R15,R3               Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear table\n         USING INFTDD1,R11\n         ST    R3,TDD1SIZE          Set INFTDD1 size in table\n         L     R1,PARMPTR           Get input parameter list pointer\n         ST    R11,16(,R1)          Set table address for caller\n         MVC   TDD1DSP#,DSDTNUM     Set # dataspace records\n         LA    R1,TDD1DSPS          Get dataspace record size\n         ST    R1,TDD1DSPL          Set dataspace record length\n         LA    R3,DSDTAB            Point to DSDTAB\n         USING DSDE,R3\n         L     R9,DSDTNUM           Get # DSDTAB entries\n         LA    R10,TDD1DSPA         Point to dataspace records area\n         USING TDD1DSP,R10\nIMDSP134 MVC   TDD1DSPN,DSDENAME    Set dataspace name\n         MVC   TDD1STOK,DSDESTOK    Set dataspace STOKEN\n         MVC   TDD1ASTE,DSDEASTE    Set dataspace ASTE\n         XC    WORKDSPC(DSPCNVTS),WORKDSPC  Clear CONVERT parm area\n         LA    R1,WORKDSPC          Set parm pointer for CONVERT\n         LR    R4,R1                Get CONVERT parm area in work reg\n         USING DSPCNVT,R4\n         MVI   DSPCLEVL,X'01'       Set CONVERT level\n         MVC   DSPCSTOK,DSDESTOK    Set dataspace STOKEN for CONVERT\n         LA    R0,2                 Indicate CONVERT TONAME call type\n         L     R15,CVTPTR(,0)       Get CVT pointer\n         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer\n         L     R15,PVTDLCON-PVT(,R15)  Get IARDLCON address\n         BALR  R14,R15              Invoke CONVERT service routine\n         LTR   R15,R15              CONVERT service successful?\n         BNZ   IMDSP150             No - branch for next DSDTAB entry\n         CLC   DSPCDSPN,DSDENAME    Converted dataspace name match?\n         BNE   IMDSP150             No - branch for next DSDTAB entry\n         MVC   TDD1ATTR,DSPCATTR    Set dataspace scope attribute\n         MVC   TDD1KEYS,DSPCKEYS    Set dataspace key/fetch protect\n         LA    R1,RASPALET          Point to RASP ALETs save area\n         XR    R14,R14              Get RASP dataspace SIB index #\n         IC    R14,DSDESTOK+3       *\n         SLL   R14,2                Multiply index # by 4\n         ALR   R1,R14               Index to RASP dataspace ALET\n         LAM   R15,R15,0(R1)        Get RASP dataspace ALET\n         L     R15,=X'00800000'     Point to start of SIB pool\n         LA    R15,SIBHDRL(,R15)    Bump past SIB pool header\n         SAC   512                  Enter access register mode\n         SYSSTATE ASCENV=AR         Indicate AR mode\n         USING SIB,R15\nIMDSP135 CLC   SIBNAME,DSDENAME     Dataspace name match?\n         BNE   IMDSP137             No - branch, check next SIB\n         MVC   TDD1OTCB,SIBOTCB     Set owning TCB address\n         MVC   TDD1RANG,SIBRANG     Set dataspace storage range\n         L     R1,CVTPTR(,0)        Get CVT pointer\n         L     R1,CVTSCPIN-CVT(,R1)  Get SCCB pointer\n         USING SCCB,R1\n         LH    R14,SCCBOCP          Get cpu data array offset\n         ALR   R1,R14               Point to cpu data array\n         DROP  R1                   SCCB\n         USING SCCBCP,R1\n         TM    SCCBCPF2,SCCBMPSB    Private space bit installed?\n         BO    IMDSP136             Yes - branch, continue\n         DROP  R1                   SCCBCP\n         MVC   TDD1ORIG,=F'4096'    Set dataspace origin = 4096\nIMDSP136 MVC   TDD1BLKS,SIBBLKS     Set max. # dataspace storage blocks\n         B     IMDSP138             Branch - continue\nIMDSP137 LA    R15,SIBSIZE(,R15)    Point to next SIB\n         CLC   SIBNAME,=XL8'00'     Last SIB checked?\n         BNE   IMDSP135             Loop back to check next SIB\nIMDSP138 SAC   0                    Return to primary mode\n         SYSSTATE ASCENV=P          Indicate primary mode\n         LAM   R0,R15,=16F'0'       Clear all access registers\n         DROP  R15                  SIB\nIMDSP150 LA    R3,DSDESIZE(,R3)     Bump to next DSDTAB entry\n         LA    R10,TDD1DSPS(,R10)   Bump to next dataspace record\n         BCT   R9,IMDSP134          Loop back for next DSDTAB entry\nIMDSP160 L     R0,DSDLEN            Get DSD length\n         XR    R3,R3                Get DSD subpool number\n         IC    R3,DSDSPID           *\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R2),SP=(R3)\n         DROP  R2,R3,R4             DSD, DSDE, DSPCNVT\n         DROP  R10,R11              TDD1DSP, INFTDD1\n\nIMDSP199 PR                         Restore environment & return\n\n         DROP  R12                  IMDSP100 base\n\n         LTORG\n\nASIDTRAN EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'      ASID translate table\n\nSIBHDRL  EQU   X'14'                SIB pool header length\n\n\n*********************************************************************\n*********************************************************************\n*                                                                   *\n*        IMDSP200 - Display one 4k page of dataspace storage.       *\n*                                                                   *\n*        Register usage:                                            *\n*                                                                   *\n*        Input           Output           Internal                  *\n*        -----           ------           --------                  *\n* R0-11  N/A             Unchanged        Work                      *\n* R12    N/A             Unchanged        Base register             *\n* R13    Workarea        Unchanged        Workarea                  *\n* R14    BALR address    Return address   Work                      *\n* R15    N/A             Unchanged        Work                      *\n*                                                                   *\n*        Environment - Internal IMDSPACE routine. Invoked by BALR.  *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\nIMDSP200 DS    0H\n         BAKR  R14,0                Save caller's environment\n         LR    R12,R15              Set up base register\n         USING IMDSP200,R12           and addressability\n         L     R14,PARMPTR          Get input parm pointer\n         MVC   STORADDR,4(R14)      Get input storage start address\n         MVC   WORKSTOK,8(R14)      Get input STOKEN\n         XC    WORKDSPC(DSPCNVTS),WORKDSPC  Clear CONVERT parm area\n         LA    R1,WORKDSPC          Set parm pointer for CONVERT\n         LR    R4,R1                Get CONVERT parm area in work reg\n         USING DSPCNVT,R4\n         MVI   DSPCLEVL,X'01'       Set CONVERT level\n         MVC   DSPCSTOK,WORKSTOK    Set dataspace STOKEN for CONVERT\n         LA    R0,2                 Indicate CONVERT TONAME call type\n         L     R15,CVTPTR(,0)       Get CVT pointer\n         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer\n         L     R15,PVTDLCON-PVT(,R15)  Get IARDLCON address\n         BALR  R14,R15              Invoke CONVERT service routine\n         LTR   R15,R15              CONVERT service successful?\n         BZ    IMDSP210             Yes - branch, continue\n         MVC   RETCODE,=F'8'        Set error return code\n         B     IMDSP299             Branch - return\nIMDSP210 L     R1,CVTPTR(,0)        Get CVT pointer\n         L     R1,CVTASVT-CVTMAP(,R1)  Get ASVT pointer\n         USING ASVT,R1\n         L     R0,ASVTMAXU          Get max address spaces\n         LA    R1,ASVTENTY          Get address of ASVT entries\n         DROP  R1                   ASVT\nIMDSP211 TM    0(R1),ASVTAVAL       Slot occupied?\n         BO    IMDSP212             No - bypass this one\n         ICM   R14,15,0(R1)         Get ASCB pointer\n         BZ    IMDSP212             Branch - no ASCB pointer\n         USING ASCB,R14\n         ICM   R15,15,ASCBJBNS      Get jobname field for stc/tsu\n         BZ    IMDSP212             Branch - batch ASCB\n         CLC   0(8,R15),=CL8'RASP'  RASP ASCB?\n         BE    IMDSP213             Yes - branch, continue\nIMDSP212 LA    R1,4(,R1)            Point to next ASVT entry\n         BCT   R0,IMDSP211          Loop back to check next ASVT\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP299             Branch - return\nIMDSP213 LA    R1,WORKDSPL          Set parm pointer for DSPLIST\n         USING DSPLIST,R1\n         MVC   DSPLASID,ASCBASID    Set RASP asid for DSPLIST\n         DROP  R1                   DSPLIST\n         DROP  R14                  ASCB\n         L     R15,CVTPTR(,0)       Get CVT pointer\n         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer\n         L     R15,PVTCCDSL-PVT(,R15)  Get IARCCDSL address\n         BALR  R14,R15              Invoke DSPLIST service routine\n         LTR   R15,R15              DSPLIST successful?\n         BZ    IMDSP214             Yes - branch, continue\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP299             Branch - return\nIMDSP214 LA    R1,WORKDSPL          Get DSPLIST pointer\n         USING DSPLIST,R1\n         ICM   R2,15,DSPLDSDP       Get DSD pointer\n         BNZ   IMDSP215             Branch - continue\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP299             Branch - return\n         DROP  R1                   DSPLIST\n         USING DSD,R2\nIMDSP215 ICM   R15,15,DSDTNUM       Get number of dataspace records\n         BNZ   IMDSP216             Branch - continue\n         MVC   RETCODE,=F'16'       Set error return code\n         B     IMDSP219             Branch - continue\nIMDSP216 LA    R3,DSDTAB            Point to DSDTAB\n         USING DSDE,R3\n         L     R9,DSDTNUM           Get # DSDTAB entries\n         LA    R10,RASPALET         Point to RASP ALETs save area\nIMDSP217 MVC   WORKALET,=F'-1'      Set input ALET for ALESERV\n         ALESERV SEARCH,ALET=WORKALET,STOKEN=DSDESTOK,AL=WORKUNIT\n         LTR   R15,R15              ALET found?\n         BZ    IMDSP218             Yes - branch, continue\n         ALESERV ADD,ALET=WORKALET,STOKEN=DSDESTOK,AL=WORKUNIT,        X\n               CHKEAX=NO\nIMDSP218 MVC   0(4,R10),WORKALET    Save RASP dataspace ALET\n         LA    R3,DSDESIZE(,R3)     Bump to next DSDTAB entry\n         LA    R10,4(,R10)          Bump to next RASP ALET save area\n         BCT   R9,IMDSP217          Loop back for next DSDTAB entry\nIMDSP219 L     R0,DSDLEN            Get DSD length\n         XR    R3,R3                Get DSD subpool number\n         IC    R3,DSDSPID           *\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R2),SP=(R3)\n         DROP  R2,R3                DSD, DSDE\n         CLC   RETCODE,=F'0'        Any errors so far?\n         BNE   IMDSP299             Yes - branch, return\nIMDSP220 LA    R1,RASPALET          Point to RASP ALETs save area\n         XR    R14,R14              Get RASP dataspace SIB index #\n         IC    R14,WORKSTOK+3       *\n         SLL   R14,2                Multiply index # by 4\n         ALR   R1,R14               Index to RASP dataspace ALET\n         LAM   R15,R15,0(R1)        Get RASP dataspace ALET\n         L     R15,=X'00800000'     Point to start of SIB pool\n         LA    R15,SIBHDRL(,R15)    Bump past SIB pool header\n         SAC   512                  Enter access register mode\n         SYSSTATE ASCENV=AR         Indicate AR mode\n         USING SIB,R15\nIMDSP221 CLC   SIBNAME,DSPCDSPN     Dataspace name match?\n         BNE   IMDSP222             No - branch, check next SIB\n         L     R0,SIBRANG           Get dataspace storage range\n         B     IMDSP223             Branch - continue\nIMDSP222 LA    R15,SIBSIZE(,R15)    Point to next SIB\n         CLC   SIBNAME,=XL8'00'     Last SIB checked?\n         BNE   IMDSP221             Loop back to check next SIB\n         MVC   RETCODE,=F'16'       Set error return code\n         DROP  R15                  SIB\nIMDSP223 SAC   0                    Return to primary mode\n         SYSSTATE ASCENV=P          Indicate primary mode\n         LAM   R0,R15,=16F'0'       Clear all access registers\n         L     R1,CVTPTR(,0)        Get CVT pointer\n         L     R1,CVTSCPIN-CVT(,R1)  Get SCCB pointer\n         USING SCCB,R1\n         LH    R14,SCCBOCP          Get cpu data array offset\n         ALR   R1,R14               Point to cpu data array\n         DROP  R1                   SCCB\n         USING SCCBCP,R1\n         TM    SCCBCPF2,SCCBMPSB    Private space bit installed?\n         BO    IMDSP224             Yes - branch, continue\n         CLC   STORADDR,=F'0'       Storage address = 0?\n         BNE   IMDSP224             No - branch, continue\n         MVC   RETCODE,=F'20'       Set error return code\n         B     IMDSP299             Branch - return\nIMDSP224 L     R1,STORADDR          Get storage address\n         A     R1,=F'4095'          Point to end of page\n         CR    R1,R0                Storage address out of range?\n         BNH   IMDSP225             No - branch, continue\n         MVC   RETCODE,=F'20'       Set error return code\n         B     IMDSP299             Branch - return\nIMDSP225 L     R0,=F'4096'          Get storage buffer length\n         IC    R5,CALLKEY           Get caller's psw key\n         STORAGE OBTAIN,LENGTH=(R0),SP=241,KEY=(R5),BNDRY=PAGE,LOC=ANY\n         L     R14,PARMPTR          Get input parm pointer\n         ST    R1,16(,R14)          Set buffer pointer for caller\n         LR    R7,R1                Set buffer pointer work register\n         LR    R14,R1               Set move to address\n         L     R15,=F'4096'         Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear return buffer\n         TM    DSPCATTR,TDD1SCMN    Dataspace scope = \"COMMON\"?\n         BO    IMDSP230             Yes - branch, continue\n         TM    DSPCATTR,TDD1SALL    Dataspace scope = \"ALL\"?\n         BO    IMDSP231             Yes - branch, continue\n         B     IMDSP240             Branch - scope = \"SINGLE\"\nIMDSP230 MVC   WORKALET,=F'-1'      Set input ALET for ALESERV\n         ALESERV SEARCH,ALET=WORKALET,STOKEN=WORKSTOK,AL=PASN\n         LTR   R15,R15              ALET found?\n         BZ    IMDSP232             Yes - branch, continue\n         ALESERV ADD,ALET=WORKALET,STOKEN=WORKSTOK,AL=PASN,CHKEAX=NO\n         B     IMDSP232             Branch - continue\nIMDSP231 MVC   WORKALET,=F'-1'      Set input ALET for ALESERV\n         ALESERV SEARCH,ALET=WORKALET,STOKEN=WORKSTOK,AL=WORKUNIT\n         LTR   R15,R15              ALET found?\n         BZ    IMDSP232             Yes - branch, continue\n         ALESERV ADD,ALET=WORKALET,STOKEN=WORKSTOK,AL=WORKUNIT,        X\n               CHKEAX=NO\nIMDSP232 SAC   512                  Enter access register mode\n         SYSSTATE ASCENV=AR         Indicate AR mode\n         L     R15,STORADDR         Get storage start address\n         LAM   R15,R15,WORKALET     Get dataspace ALET\n         LA    R0,256               Prepare for MVPG\n         MVPG  R7,R15               Move storage into return buffer\n         SAC   0                    Return to primary mode\n         SYSSTATE ASCENV=P          Indicate primary mode\n         LAM   R0,R15,=16F'0'       Clear all access registers\n         B     IMDSP299             Branch - return\nIMDSP240 LA    R0,SRBMODSL          Get SRB modules lengths\n         STORAGE OBTAIN,LENGTH=(R0),SP=241,LOC=ANY\n         ST    R1,SRBMODSP          Save SRB modules pointer\n         LR    R0,R1                Set move to address\n         LA    R1,SRBMODSL          Set move to length\n         LA    R14,SRBMODS          Set move from address\n         LR    R15,R1               Set move from length and pad\n         MVCL  R0,R14               Relocate SRB modules code\n         L     R1,SRBMODSP          Get SRB modules pointer\n         MVC   CALLASCB-SRBMODS(4,R1),PSAAOLD  Set ASCB for xmpost\n         MVC   SRBSTOK-SRBMODS(8,R1),WORKSTOK  Set dataspace STOKEN\n         MVC   SRBSTORA-SRBMODS(4,R1),STORADDR  Set storage address\n         ST    R7,SRBBUFA-SRBMODS(,R1)  Set return buffer address\n         LA    R0,SRBSIZE           Get SRB length\n         STORAGE OBTAIN,LENGTH=(R0),SP=245,LOC=ANY\n         ST    R1,SRBPTR            Save SRB pointer\n         USING SRBSECT,R1\n         XC    SRBSECT(SRBSIZE),SRBSECT  Initialize SRB\n         MVC   SRBID,=C'SRB '       Set SRB identifier\n         MVC   SRBASCB,DSPCASCB     Set ASCB pointer\n         L     R15,PSAAOLD          Get current ASCB pointer\n         MVC   SRBPASID,ASCBASID-ASCB(R15)  Set asid\n         MVC   SRBPTCB,PSATOLD      Set TCB pointer\n         L     R15,SRBMODSP         Set SRB modules pointer in SRB\n         ST    R15,SRBEP            *\n         OI    SRBEP,SRBMODE        Run SRB in AMODE 31\n         LA    R15,RMTRBEG-SRBMODS(,R15)  Set RMTR pointer in SRB\n         ST    R15,SRBRMTR          *\n         OI    SRBRMTR,SRBRMODE     Run RMTR in AMODE 31\n         L     R15,SRBMODSP         Get SRB modules pointer\n         LA    R15,FRRBEG-SRBMODS(,R15)  Set FRR module pointer in SRB\n         ST    R15,SRBFRRA          *\n         OI    SRBFRRA,SRBRMODE     Run FRR in AMODE 31\n         DROP  R1,R4                SRBSECT, DSPCNVT\n         SCHEDULE SRB=(R1),SCOPE=LOCAL,FRR=YES\n         LA    R3,100               Set maximum wait of 10 seconds\nIMDSP241 STIMER WAIT,BINTVL=WAITTIME  Wait .1 second\n         L     R15,SRBMODSP         Get SRB modules pointer\n         TM    CALLECB-SRBMODS(R15),X'40'  Did SRB routine finish?\n         BO    IMDSP242             Yes - branch, return\n         BCT   R3,IMDSP241          Loop back to wait again\n         MVC   RETCODE,=F'16'       Set error return code\n         L     R15,SRBMODSP         Get SRB modules pointer\n         L     R1,SRBPTR            Get SRB pointer\n         USING SRBSECT,R1\n         L     R15,SRBASCB          Get target ASCB pointer\n         MVC   ASIDNBR,ASCBASID-ASCB(R15)  Set target asid\n         XC    WORKPDQ,WORKPDQ      Init PURGEDQ parm list\n         MVC   WORKPDQA,SRBPASID    Init PURGEDQ ASID\n         MVC   WORKPDQT,SRBPTCB     Init PURGEDQ TCB pointer\n         L     R3,SRBRMTR           Get RMTR pointer\n         OI    SRBFLGS,SRBFRRCL     Set SRB not complete flag\n         DROP  R1                   SRBSECT\n         MVC   WORKPURG(PURGEDQL),PURGEDQ  Set PURGEDQ parm list\n         PURGEDQ RMTR=(R3),                                            X\n               ASID=ASIDNBR,                                           X\n               ASIDTCB=WORKPDQ,                                        X\n               MF=(E,WORKPURG)\n         L     R15,SRBMODSP         Get SRB modules pointer\n         TM    CALLECB-SRBMODS(R15),X'40'  SRB purged?\n         BO    IMDSP242             Yes - branch, continue\n         L     R1,SRBPTR            Get SRB pointer\n         USING SRBSECT,R1\n         L     R15,CVTPTR(,0)       Get CVT pointer\n         LA    R15,CVTBRET-CVT(,R15)  Set \"B R14\" instruction pointer\n         ST    R15,SRBEP                in SRB\n         OI    SRBEP,SRBMODE        Run SRB in AMODE 31\n         ST    R15,SRBRMTR          Replace RMTR routine pointer\n         OI    SRBRMTR,SRBRMODE     Run RMTR in AMODE 31\n         ST    R15,SRBFRRA          Replace FRR routine pointer\n         OI    SRBFRRA,SRBRMODE     Run FRR in AMODE 31\n         DROP  R1                   SRBSECT\nIMDSP242 STIMER WAIT,BINTVL=WAITTIME  Wait .1 second\n         ICM   R1,15,SRBPTR         Get SRB pointer\n         BZ    IMDSP243             Branch - no SRB\n         USING SRBSECT,R1\n         TM    SRBPARM,X'80'        Did SRB execute?\n         BZ    IMDSP243             No - branch, continue\n         DROP  R1                   SRBSECT\n         LA    R0,SRBSIZE           Get SRB size\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=245\nIMDSP243 STIMER WAIT,BINTVL=WAITTIME  Wait .1 second\n         ICM   R1,15,SRBMODSP       Get SRB modules pointer\n         BZ    IMDSP299             Branch - return, no SRB modules\n         LA    R0,SRBMODSL          Get SRB modules length\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=241\n\nIMDSP299 STIMER WAIT,BINTVL=WAITTIME  Wait .1 second\n         PR                         Restore environment & return\n\n         DROP  R12                  IMDSP200 base\n\n         LTORG\n\nWAITTIME DC    F'10'                Wait interval (.1 second)\n\nPURGEDQ  PURGEDQ MF=L                   PURGEDQ parameter list\nPURGEDQL EQU   *-PURGEDQ\n\n\n***********************************************************************\n*                                                                     *\n*        SRB routine.                                                 *\n*                                                                     *\n***********************************************************************\n\n         USING PSA,0\nSRBMODS  DS    0F\nSRBBEG   EQU   *\n         LR    R12,R15                   Set base register\n         USING SRBBEG,R12                  and addressability\n         LR    R8,R14                    Save return address\n         LR    R10,R0                    Get SRB pointer\n         USING SRBSECT,R10\n         TM    SRBFLGS,SRBFRRCL          Main task not waiting?\n         BOR   R14                       Yes - branch, return to system\n         OI    SRBPARM,X'80'             Set SRB executed flag\n         LR    R9,R2                     Get FRR parm list pointer\n         USING FRRPARMS,R9\n         XC    FRRPARMS(FRRPARML),FRRPARMS  Init FRR parm list\n         ST    R10,FRRSRB                Set SRB ptr in FRR parm list\n         MVC   SRBALET,=F'-1'       Set input ALET for ALESERV\n         ALESERV SEARCH,ALET=SRBALET,STOKEN=SRBSTOK,AL=WORKUNIT\n         LTR   R15,R15              ALET found?\n         BZ    SRBMOVE              Yes - branch, continue\n         ALESERV ADD,ALET=SRBALET,STOKEN=SRBSTOK,AL=WORKUNIT,          X\n               CHKEAX=NO\n         OI    SRBPARM,X'40'        Set ALET added flag\nSRBMOVE  SAC   512                  Enter access register mode\n         SYSSTATE ASCENV=AR         Indicate AR mode\n         L     R15,SRBSTORA         Get storage start address\n         LAM   R15,R15,SRBALET      Get dataspace ALET\n         L     R7,SRBBUFA           Get return buffer address\n         LA    R0,256               Prepare for MVPG\n         MVPG  R7,R15               Move storage into return buffer\n         SAC   0                    Return to primary mode\n         SYSSTATE ASCENV=P          Indicate primary mode\n         LAM   R0,R15,=16F'0'       Clear all access registers\n         TM    SRBPARM,X'40'        ALET added?\n         BZ    SRBSETLK             No - branch, continue\n         ALESERV DELETE,ALET=SRBALET,CHKEAX=NO\nSRBSETLK SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE\n         OI    FRRFLAGS,FRRLOCAL         Set local lock held flag\n         XR    R0,R0                     Indicate ECB in key 0 storage\n         LA    R10,X'7F'                 Set post code\n         SLL   R10,24                    *\n         LA    R11,CALLECB               Get ECB pointer\n         CLC   PSAAOLD,CALLASCB          Cross memory post?\n         BE    SRBNXMP                   No - branch, continue\n         O     R11,SRBHBIT               Indicate cross memory post\nSRBNXMP  L     R13,CALLASCB              Get ASCB pointer\n         LA    R12,SRBRTRN               Set post error address\n         DROP  R12                       Base\n         L     R15,CVTPTR(,0)            Get CVT pointer\n         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point\n         BALR  R14,R15                   Post ECB\n         OI    FRRFLAGS,FRRPOST          Indicate post completed\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE\n         NI    FRRFLAGS,255-FRRLOCAL     Reset local lock held flag\n         LR    R14,R8                    Get return address\nSRBRTRN  BR    R14                       Return to caller\n         DROP\n\n\n***********************************************************************\n*                                                                     *\n*        RMTR routine.                                                *\n*                                                                     *\n***********************************************************************\n\n         USING PSA,0\nRMTRBEG  DS    0H\n         LR    R12,R15                   Set base register\n         USING RMTRBEG,R12                 and addressability\n         LR    R10,R1                    Get SRB pointer\n         USING SRBSECT,R10\n         OI    SRBPARM,X'80'             Set SRB executed flag\n         LR    R8,R14                    Save return address\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE\n         XR    R0,R0                     Indicate ECB in key 0 storage\n         LA    R10,X'7F'                 Set post code\n         SLL   R10,24                    *\n         LA    R11,CALLECB               Get ECB pointer\n         CLC   PSAAOLD,CALLASCB          Cross memory post?\n         BE    RMTRNXMP                  No -branch, continue\n         O     R11,SRBHBIT               Indicate cross memory post\nRMTRNXMP L     R13,CALLASCB              Get ASCB pointer\n         LA    R12,RMTRRTRN              Set post error address\n         DROP  R12                       Base\n         L     R15,CVTPTR(,0)            Get CVT pointer\n         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point\n         BALR  R14,R15                   Post ECB\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE\n         LR    R14,R8                    Get return address\nRMTRRTRN BR    R14                         and return to caller\n         DROP\n\n\n***********************************************************************\n*                                                                     *\n*        FRR ROUTINE.                                                 *\n*                                                                     *\n***********************************************************************\n\n         USING PSA,0\nFRRBEG   DS    0H\n         LR    R12,R15                   Set base register\n         USING FRRBEG,R12                  and addressability\n         LR    R2,R1                     Get SDWA pointer\n         USING SDWA,R2\n         L     R9,SDWAPARM               Get FRR parm list pointer\n         USING FRRPARMS,R9\n         TM    FRRPARMS,FRRENTER         FRR previously entered?\n         BOR   R14                       Yes - branch, return\n         OI    FRRPARMS,FRRENTER         Set FRR entered flag\n         ST    R14,FRRETURN              Save return address\n         ICM   R1,15,FRRSRB              Is there an SRB?\n         BZ    FRRNOSRB                  No - branch, continue\n         USING SRBSECT,R1\n         OI    SRBPARM,X'80'             Set SRB executed flag\n         DROP  R1                        SRBSECT\nFRRNOSRB TM    FRRFLAGS,FRRPOST          ECB already posted?\n         BO    FRRNPOST                  Yes - branch, continue\n         TM    FRRFLAGS,FRRLOCAL         Local lock held?\n         BO    FRRLOCK                   Yes - branch, continue\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE\n         OI    FRRFLAGS,FRRLOCAL         Set local lock held flag\nFRRLOCK  XR    R0,R0                     Indicate ECB in key 0 storage\n         LA    R10,X'7F'                 Set post code\n         SLL   R10,24                    *\n         LA    R11,CALLECB               Get ECB pointer\n         CLC   PSAAOLD,CALLASCB          Cross memory post?\n         BE    FRRNXMP                   No - branch, continue\n         O     R11,SRBHBIT               Indicate cross memory post\nFRRNXMP  L     R13,CALLASCB              Get ASCB pointer\n         ST    R12,FRRBASE               Save base register\n         LA    R12,FRRPSTER              Set post error address\n         L     R15,CVTPTR(,0)            Get CVT pointer\n         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point\n         BALR  R14,R15                   Post ECB\n         L     R12,FRRBASE               Restore base register\nFRRNPOST TM    FRRFLAGS,FRRLOCAL         Local lock held?\n         BZ    FRRRTRN                   No - branch, continue\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE\n         B     FRRRTRN                   Branch - continue\nFRRPSTER BR    R14                       Branch - return to RTM\n\n***********************************************************************\n*                                                                     *\n*        Return to RTM.                                               *\n*                                                                     *\n***********************************************************************\n\nFRRRTRN  LR    R1,R2                     Set SDWA pointer for SETRP\n         SETRP DUMP=YES,RECORD=YES,RC=0  Set return options\n         L     R14,FRRETURN              Set FRR return address\n         BR    R14                       Branch - return to RTM\n         DS    0F\nSRBHBIT  DC    X'80000000'               High-order bit indicator\n\n         LTORG\n\nCALLASCB DC    F'0'                      Caller's ASCB pointer\nCALLECB  DC    F'0'                      ECB for xmpost\nSRBSTOK  DC    CL8' '                    Dataspace STOKEN\nSRBALET  DC    F'0'                      Dataspace ALET\nSRBSTORA DC    A(0)                      Storage start address\nSRBBUFA  DC    A(0)                      Storage return buffer address\nSRBMODSL EQU   *-SRBMODS                 SRB modules length\n         DROP\n\nFRRPARMS DSECT                           FRR parameter list (6 words)\nFRRFLAGS DS    X                         FRR flag byte\nFRRENTER EQU   X'80'                     FRR recursion indicator\nFRRLOCAL EQU   X'40'                     Local lock acquired\nFRRPOST  EQU   X'20'                     ECB posted\n         DS    3X                        Reserved\nFRRETURN DS    A                         FRR return address\nFRRBASE  DS    F                         FRR base register\nFRRSRB   DS    A                         SRB pointer (or zero)\n         DS    2F                        Reserved\nFRRPARML EQU   *-FRRPARMS                FRR parameter list length\n\n\nWORKAREA DSECT\n         DS    18F\nRETCODE  DS    F                IMDSPACE return code\nPARMPTR  DS    A                Input parameter list pointer\nWORKFLAG DS    XL1              Flag byte\nCALLKEY  DS    XL1              Caller's psw key\nWORKATTR DS    XL1              Dataspace\n         DS    XL1              Reserved\nASIDNBR  DS    H                Input asid number\nSTORADDR DS    A                Input storage start address\nWORKSTOK DS    CL8              Input STOKEN\n         DS    0F\nWORKDSPL DS    XL(DSPLISTL)     RSM DSPCALL DSPLIST parm list area\n         DS    0F\nWORKDSPC DS    XL(DSPCNVTS)     RSM DSPCALL CONVERT parm list area\nRASPALET DS    10F              RASP dataspace ALETs save area\nWORKALET DS    F                ALESERV ALET\nINFTABP  DS    A                Information table pointer\nSRBMODSP DS    A                SRB modules pointer\nSRBPTR   DS    A                SRB area pointer\nWORKPURG DS    (PURGEDQL)X      PURGEDQ parameter list\nWORKPDQ  DS    0D               PURGEDQ parameter area\nWORKPDQR DS    H                PURGEDQ reserved area\nWORKPDQA DS    H                PURGEDQ asid\nWORKPDQT DS    A                PURGEDQ TCB pointer\nWORKSIZE EQU   *-WORKAREA\n\nDSPLIST  DSECT                  RSM DSPCALL DSPLIST parm list\n         DS    H                Reserved\nDSPLASID DS    H                Requested ASID\nDSPLDSDP DS    A                DSD pointer\nDSPLISTL EQU   *-DSPLIST\n\nDSD      DSECT                  Dataspace data table\nDSDNEXT  DS    A                Next DSD pointer\nDSDPREV  DS    A                Previous DSD pointer\nDSDID    DS    CL4              'DSD' identifier\nDSDVER   DS    X                Version number\nDSDSPID  DS    X                DSD subpool id\nDSDFLGS  DS    X                Flags\nDSDSWAP  EQU   X'80'            0 - ASID swapped in\n*                               1 - ASID swapped in\n         DS    X                Reserved\nDSDLEN   DS    F                DSD length\nDSDASID  DS    H                DSDTAB owner\n         DS    H                Reserved\nDSDTNUM  DS    F                # dataspaces listed in DSDTAB\nDSDTAB   DS    0CL20            Dataspace information table\n\nDSDE     DSECT                  Dataspace data table entry\nDSDENAME DS    CL8              Dataspace name\nDSDESTOK DS    CL8              Dataspace STOKEN\nDSDEASTE DS    A                Dataspace ASTE real address\nDSDESIZE EQU   *-DSDE\n\nDSPCNVT  DSECT                  RSM DSPCALL CONVERT parm list\nDSPCLEVL DS    XL1              Parm list level\n         DS    XL1              Reserved\nDSPCATTR DS    XL1              Dataspace attributes\nDSPCKEYS DS    XL1              Dataspace key/fetch protect\n* Bits 0-3 --> Storage key\n* Bit 4 --> Fetch protection indicator\n* Bits 5-8 --> Unused\nDSPCSTOK DS    CL8              Dataspace STOKEN\nDSPCASCB DS    A                Dataspace ASCB\nDSPCDSPN DS    CL8              Dataspace name\nDSPCNVTS EQU   *-DSPCNVT\n\nSIB      DSECT                  Dataspace SIB entry\nSIBNAME  DS    CL8              Dataspace name\nSIBSEQ#  DS    F                Dataspace sequence number\nSIBRDD   DS    A                RASP RDD address\nSIBASTE  DS    A                Dataspace ASTE virtual address\nSIBOTCB  DS    F                Dataspace owning TCB address\nSIBRANG  DS    F                Dataspace storage range\n         DS    F                Reserved\nSIBBLKS  DS    F                Dataspace maximum # 4K storage blocks\n         DS    7F               Reserved\nSIBSIZE  EQU   *-SIB\n\n         COPY  IMDSDATA         Transported Dataspace Details\n\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAASCB\n         IHAASVT\n         IHAPSA\n         IHAPVT\n         IHASCCB\n         IHASDWA\n         IHASRB\n\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMDSSTRD": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x10\\x8f\\x01\\x01\\x12\\x0f\\x14\\x14\\x00m\\x00m\\x00\\x02\\xe9\\xc7\\xe7\\xd7\\xf3\\xf0@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-04-18T00:00:00", "modifydate": "2001-04-30T14:14:00", "lines": 109, "newlines": 109, "modlines": 2, "user": "ZGXP30"}, "text": "IMDSSTRD TITLE ' READ AND FORMAT IMON DISK SPACE SNAP SHOT FILE '\n*\n*         WRITTEN 18TH APRIL 2001 BY GREG PRICE\n*\nIMDSSTRD CSECT\n         USING IMDSSTRD,R15\n         B     $START\n         DROP  R15                 IMDSSTRD.\n         DC    AL1(17),C'IMDSSTRD &SYSDATC'\n$START   STM   R14,R12,12(R13)\n         LR    R11,R15\n         USING IMDSSTRD,R11\n         LA    R9,SAVE\n         ST    R13,SAVE+4\n         ST    R9,8(,R13)\n         LR    R13,R9\n         LA    R10,INREC\n         OPEN  (DSSTIN,INPUT)\n         OPEN  (DSSTOUT,OUTPUT)\n         PUT   DSSTOUT,OUTREC\nGETLOOP  GET   DSSTIN,INREC\n         CLC   BASEID,INREC+24\n         BNE   VOLREC\n         USING DSST,R10\n         ZAP   WORK,=P'1900000'\n         AP    WORK,DSSTDATE\n         MVC   OUTDATE,=X'40212020204B202020'\n         ED    OUTDATE,WORK+4\n         UNPK  OUTTIME(3),DSSTTIME(2)\n         UNPK  OUTTIME+3(3),DSSTTIME+1(2)\n         MVI   OUTTIME+2,C':'\n         MVI   OUTTIME+5,C','\n         B     GETLOOP\n         DROP  R10\n         USING DSSTE,R10\nVOLREC   MVC   OUTUNIT,DSSTEUCB\n         MVC   OUTVOL,DSSTEVOL\n         MVC   OUTSG,DSSTEGRP\n         OC    OUTSG,=CL8' '\n         SLR   R0,R0\n         ICM   R0,3,DSSTETSZ\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTSZ,WORK\n         L     R0,DSSTECYL\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTCYL,WORK\n         L     R0,DSSTETRK\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTTRK,WORK\n         L     R0,DSSTEEXT\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTEXT,WORK\n         L     R0,DSSTEMXC\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTMXC,WORK\n         L     R0,DSSTEMXT\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTMXT,WORK\n         PUT   DSSTOUT,OUTREC\n         B     GETLOOP\nENDOFDAT CLOSE (DSSTIN)\n         CLOSE (DSSTOUT)\n         L     R13,SAVE+4\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n         TITLE ' WORKING STORAGE '\nWORK     DC    D'0'\nSAVE     DC    18F'0'\nBASEID   EQU   *,24\n         DC    XL20'00',C'DSST'\nINREC    DC    CL48' '\nOUTREC   DC    CL80' '\n         ORG   OUTREC\nOUTDATE  DC    C'  DATE   '\n         DC    C','\nOUTTIME  DC    C'TIME '\n         DC    C','\nOUTUNIT  DC    C'UNIT'\n         DC    C','\nOUTVOL   DC    C'VOLUME'\n         DC    C','\nOUTSG    DC    C'STOGROUP'\n         DC    C','\nOUTSZ    DC    C'TRKSZ'\n         DC    C','\nOUTCYL   DC    C'FREEC'\n         DC    C','\nOUTTRK   DC    C'FREET'\n         DC    C','\nOUTEXT   DC    C'XTNTS'\n         DC    C','\nOUTMXC   DC    C'LARGC'\n         DC    C','\nOUTMXT   DC    C'LARGT'\n         ORG\n         LTORG\nDSSTIN   DCB   DSORG=PS,MACRF=GM,RECFM=FB,LRECL=48,DDNAME=DSSTIN,      +\n               EODAD=ENDOFDAT\nDSSTOUT  DCB   DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80,DDNAME=DSSTOUT\n         COPY  IMSPDSST\n         YREGS\n         END   IMDSSTRD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMGATCOM": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x03\\x00\\x00\\x00\\x913?\\x00\\x986?\\x16@\\x003\\x00\\x1f\\x00\\x03\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "43.03", "flags": 0, "createdate": "1991-11-29T00:00:00", "modifydate": "1998-12-29T16:40:00", "lines": 51, "newlines": 31, "modlines": 3, "user": "T$QGP75"}, "text": "         TITLE 'COMMON AREA'\nIMGATCOM COM\nSAVE     DS    18F\nWORK     DS    D\nWORK2    DS    D\nDASDJOB  DS    CL8                DROP DASD 14/15/17/18 FOR THIS JOB.\nTAPEJOB  DS    CL8                DROP TAPE 14/15 EVENTS FOR THIS JOB.\nTRACEJOB DS    CL8                COLLECT EVENTS ONLY FOR THIS JOB.\nOSLVL    DS    XL16               MVS/ESA FEATURE FLAGS FROM CVTOSLVL.\nCOMMADDR DS    A                  ADDRESS OF COMMUNICATIONS LIST.\nGATFLAGS DS    X                  STATUS FLAGS.\nOWNSYS   EQU   X'80'              ONLY PROCESS DATA FROM THIS SYSTEM.\nNOTRACK  EQU   X'40'              DO NOT TRACK CURRENT SMF DATA.\nDONEOPEN EQU   X'20'              CURRENTLY IN \"PRIMING\" MODE.\nDONCLOSE EQU   X'10'              \"PRIMING\" MODE HAS COMPLETED.\nNONSWAP  EQU   X'08'              CURRENTLY NON-SWAPPABLE.\nTSU      EQU   X'04'              RUNNING IN TIME SHARING USER A.S.\nBELOW    EQU   X'02'              GETMAINED STORAGE BELOW THE LINE.\n*        EQU   X'01'              UNUSED.\nSELFLAGS DS    X                  SELECTION FLAGS.\nSELINIT  EQU   X'E4'              SELECTION FLAGS INITIAL PATTERN.\nSELANY   EQU   X'E0'              ANY DATA TO BE SELECTED FLAG.\nDSET     EQU   X'80'              COLLECT DATA SET EVENTS.\nPERF     EQU   X'40'              COLLECT SYSTEM PERFORMANCE DATA.\nPGMS     EQU   X'20'              COLLECT JOB STEP PROGRAM ACTIVITY.\nTAPE     EQU   X'10'              COLLECT TAPE VOLUME USAGE DATA.\nDASD     EQU   X'08'              COLLECT DASD SPACE USAGE DATA.\n*        EQU   X'04'              UNUSED.\n*        EQU   X'02'              UNUSED.\n*        EQU   X'01'              UNUSED.\nOSBITS   DS    X                  OS BITS FROM CVTDCB.\nENTRYTYP DS    X                  STORAGE ENTRY TYPE CODE.\nHSMFNTYP DS    X                  HSM FUNCTION SMF RECORD TYPE.\n         DS    0D                 END OF COMMON AREA.\n         TITLE 'REGISTER EQUATES'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMGATDAT": {"ttr": 4109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x0c\\x00\\x00\\x00\\x91(\\x9f\\x01\\x01\\x17/\\x16\\x02\\x01\\xd9\\x00!\\x00\\x85\\xe9\\xc7\\xe7\\xd7\\xf3\\xf0@@@@'", "ispf": {"version": "43.12", "flags": 0, "createdate": "1991-10-16T00:00:00", "modifydate": "2001-06-21T16:02:00", "lines": 473, "newlines": 33, "modlines": 133, "user": "ZGXP30"}, "text": "*        COPYRIGHT (C) 1991  PRYCROFT SIX PTY LTD\nDGBASE   DSECT                    BASE ENTRY.\nDGBASEID DS    CL32               DATA AREA IDENTIFICATION STRING.\nDGFSTSYS DS    A                  ADDRESS OF FIRST SYSTEM ENTRY.\nDGLSTSYS DS    A                  ADDRESS OF LAST SYSTEM ENTRY.\nDGNUMSYS DS    F                  NUMBER OF SYSTEM ENTRIES.\nDGPURGDT DS    PL4                PURGE DATE - MUST BE LATER TO ADD.\nDGSMFCNT DS    F                  NUMBER OF SMF EVENT TRIPLETS HERE.\nDGSMFTYP EQU   3                  NUMBER OF SMF EVENT TRIPLETS ALLOWED.\nDGFSTDSN DS    A                  ADDRESS OF FIRST DATA SET ENTRY.\nDGLSTDSN DS    A                  ADDRESS OF LAST DATA SET ENTRY.\nDGNUMDSN DS    F                  NUMBER OF DATA SET ENTRIES.\nDGFSTPGM DS    A                  ADDRESS OF FIRST PROGRAM ENTRY.\nDGLSTPGM DS    A                  ADDRESS OF LAST PROGRAM ENTRY.\nDGNUMPGM DS    F                  NUMBER OF PROGRAM ENTRIES.\nDGFSTJOB DS    A                  ADDRESS OF FIRST JOB ENTRY.\nDGLSTJOB DS    A                  ADDRESS OF LAST JOB ENTRY.\nDGNUMJOB DS    F                  NUMBER OF JOB ENTRIES.\n*                                 HOUSEKEEPING TRIPLETS FOLLOW.\nDGFSTDSE DS    A                  ADDRESS OF FIRST DATA SET EVENT.\nDGLSTDSE DS    A                  ADDRESS OF LAST DATA SET EVENT.\nDGNUMDSE DS    F                  NUMBER OF DATA SET EVENTS.\nDGFSTJSE DS    A                  ADDRESS OF FIRST JOB STEP EVENT.\nDGLSTJSE DS    A                  ADDRESS OF LAST JOB STEP EVENT.\nDGNUMJSE DS    F                  NUMBER OF JOB STEP EVENTS.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGBASLEN EQU   *-DGBASE           LENGTH OF THE BASE ENTRY.\n         SPACE\nDGSYSTEM DSECT                    SYSTEM ENTRY.\nDGSYSNXT DS    A                  ADDRESS OF NEXT SYSTEM ENTRY.\nDGSYSPRV DS    A                  ADDRESS OF PREVIOUS SYSTEM ENTRY.\nDGSYSID  DS    CL4                SYSTEM ID OF THIS ENTRY.\nDGFSTINT DS    A                  ADDRESS OF FIRST RMF INTERVAL ENTRY.\nDGLSTINT DS    A                  ADDRESS OF LAST RMF INTERVAL ENTRY.\nDGNUMINT DS    F                  NUMBER OF RMF INTERVAL ENTRIES.\nDGFSTPG# DS    A                  ADDRESS OF FIRST PG NUMBER ENTRY.\nDGLSTPG# DS    A                  ADDRESS OF LAST PG NUMBER ENTRY.\nDGNUMPG# DS    F                  COUNT OF DIFFERENT PG NUMBERS.\nDGFSTCH# DS    A                  ADDRESS OF FIRST CHPID NUMBER ENTRY.\nDGLSTCH# DS    A                  ADDRESS OF LAST CHPID NUMBER ENTRY.\nDGNUMCH# DS    F                  COUNT OF DIFFERENT CHPID NUMBERS.\nDGFSTDV# DS    A                  ADDRESS OF FIRST DEVICE NUMBER ENTRY.\nDGLSTDV# DS    A                  ADDRESS OF LAST DEVICE NUMBER ENTRY.\nDGNUMDV# DS    F                  COUNT OF DIFFERENT DEVICE NUMBERS.\nDGFSTPDN DS    A                  ADDRESS OF FIRST PAGE DSN ENTRY.\nDGLSTPDN DS    A                  ADDRESS OF LAST PAGE DSN ENTRY.\nDGNUMPDN DS    F                  COUNT OF DIFFERENT PAGE DSNAMES.\nDGMAXIOR DS    F                  MAXIMUM I/O RATE ENCOUNTERED.\nDGMAXPGR DS    F                  MAXIMUM PAGING RATE ENCOUNTERED.\nDGMAXMIG DS    F                  MAXIMUM MIGRATION AGE VALUE FOUND.\nDGMAXEIO DS    F                  MAXIMUM ESTOR I/O RATE ENCOUNTERED.\nDGSYSFLG DS    F                  FLAGS FOR SYSTEM ENTRY.\nDGRMFSYS EQU   X'80'              SOME RMF DATA PRESENT FOR SYSTEM.\nDGRMFPRF EQU   X'40'              SOME RMF WORKLOAD DATA PRESENT.\nDGCUMPRL DS    F                  PRINT LINES PRINTED AT THIS NODE.\nDGCUMPRX DS    F                  PRINT LINES PRINTED TO EXTERNAL WTRS.\nDGCUMPRN DS    F                  PRINT LINES SHIPPED TO OTHER NODES.\nDGMAXPRT DS    F                  MAXIMUM INTERVAL PRINT LINE TOTAL.\nDGMAXRDY DS    H                  MAXIMUM READY USER ASID COUNT.\nDGMAXINU DS    H                  MAXIMUM IN USER ASID COUNT.\nDGMAXOTU DS    H                  MAXIMUM OUT USER ASID COUNT.\nDGMAXWTU DS    H                  MAXIMUM WAIT USER ASID COUNT.\nDGMAXJOB DS    H                  MAXIMUM BATCH JOB ASID COUNT.\nDGMAXSTC DS    H                  MAXIMUM STARTED TASK ASID COUNT.\nDGMAXTSU DS    H                  MAXIMUM TIME SHARING USER ASID COUNT.\nDGMAXLRD DS    H                  MAXIMUM LOG. READY USER ASID COUNT.\nDGMAXLWT DS    H                  MAXIMUM LOG. WAIT USER ASID COUNT.\nDGMAXASC DS    H                  MAXIMUM ASCH ASID COUNT.\nDGMAXOED DS    H                  MAXIMUM OPEN EDITION MVS ASID COUNT.\n         DS    H                  SPARE.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGSYSLEN EQU   *-DGSYSTEM         LENGTH OF SYSTEM ENTRY.\n         SPACE\nDGRMFINT DSECT                    RMF INTERVAL ENTRY.\nDGINTNXT DS    A                  ADDRESS OF NEXT RMF INTERVAL ENTRY.\nDGINTPRV DS    A                  ADDR OF PREVIOUS RMF INTERVAL ENTRY.\nDGINTTIM DS    PL4                TIME RMF INTERVAL STARTED.\nDGINTDAT DS    PL4                DATE RMF INTERVAL STARTED.\nDGINTDUR DS    PL4                DURATION OF RMF INTERVAL.\nDGINTSIZ DS    F                  DURATION OF RMF INTERVAL (BINARY MS).\nDGPRSMNM DS    CL8                PR/SM PARTITION NAME.\nDGCPUTIL DS    F                  LOGICAL CPU UTILIZATION PERMILLE.\nDGCPUCNT DS    F                  NUMBER OF CPUS IN SYSTEM.\nDGIORATE DS    F                  TOTAL I/O COMPLETION RATE.\nDGIOTPI1 DS    F                  TPI INSTRUCTION WITH CC=1 RATE.\nDGPAGEIN DS    F                  NON-VIO NON-SWAP PAGE-IN RATE.\nDGPAGOUT DS    F                  NON-VIO NON-SWAP PAGE-OUT RATE.\nDGSWPGIN DS    F                  NON-VIO SWAP PAGE-IN RATE.\nDGSWPGOT DS    F                  NON-VIO SWAP PAGE-OUT RATE.\nDGVIOIN  DS    F                  VIO PAGE-IN RATE.\nDGVIOOUT DS    F                  VIO PAGE-OUT RATE.\nDGNUCPCT DS    F                  NUCLEUS PERCENTAGE OF USABLE REAL.\nDGSQAPCT DS    F                  SQA PERCENTAGE OF USABLE REAL.\nDGRGNPCT DS    F                  REGION PERCENTAGE OF USABLE REAL.\nDGLSQPCT DS    F                  LSQA PERCENTAGE OF USABLE REAL.\nDGLPAPCT DS    F                  LINK PACK PERCENTAGE OF USABLE REAL.\nDGCSAPCT DS    F                  CSA PERCENTAGE OF USABLE REAL.\nDGUICLOW DS    F                  MINIMUM HIGH UIC.\nDGUICHIG DS    F                  MAXIMUM HIGH UIC.\nDGUICAVG DS    F                  AVERAGE HIGH UIC BY 10.\nDGESTGRD DS    F                  EXPANDED STORAGE PAGE READ RATE.\nDGESTGWR DS    F                  MOVE PAGE TO EXPANDED STORAGE RATE.\nDGMIGLOW DS    F                  MINIMUM HIGH MIGRATION AGE.\nDGMIGHIG DS    F                  MAXIMUM HIGH MIGRATION AGE.\nDGMIGAVG DS    F                  AVERAGE HIGH MIGRATION AGE BY 10.\nDGHPREXP DS    F                  HIPERSPACE FRACTION OF ONLINE ESTOR.\nDGSQAEXP DS    F                  SQA PERCENTAGE OF ONLINE EXPANDED.\nDGRGNEXP DS    F                  REGION PERCENTAGE OF ONLINE ESTOR.\nDGLSQEXP DS    F                  LSQA PERCENTAGE OF ONLINE EXPANDED.\nDGLPAEXP DS    F                  LINK PACK PERCENTAGE OF ONLINE ESTOR.\nDGCSAEXP DS    F                  CSA PERCENTAGE OF ONLINE EXPANDED.\nDGVIOEXP DS    F                  VIO PERCENTAGE OF ONLINE EXPANDED.\nDGFSTPGN DS    A                  ADDRESS OF FIRST PERF. GROUP ENTRY.\nDGLSTPGN DS    A                  ADDRESS OF LAST PERF. GROUP ENTRY.\nDGFSTCHN DS    A                  ADDRESS OF FIRST CHPID ENTRY.\nDGLSTCHN DS    A                  ADDRESS OF LAST CHPID ENTRY.\nDGFSTDEV DS    A                  ADDRESS OF FIRST DEVICE ENTRY.\nDGLSTDEV DS    A                  ADDRESS OF LAST DEVICE ENTRY.\nDGFSTPAG DS    A                  ADDRESS OF FIRST PAGE DATA SET ENTRY.\nDGLSTPAG DS    A                  ADDRESS OF LAST PAGE DATA SET ENTRY.\nDGCPBUSY DS    F                  PHYSICAL CPU UTILIZATION PERMILLE.\nDG227AVG DS    H                  CSA S.P. 227 AVERAGE USAGE PERMILLE.\nDG228AVG DS    H                  CSA S.P. 228 AVERAGE USAGE PERMILLE.\nDG231AVG DS    H                  CSA S.P. 231 AVERAGE USAGE PERMILLE.\nDG241AVG DS    H                  CSA S.P. 241 AVERAGE USAGE PERMILLE.\nDGCSAAVG DS    H                  CSA TOTAL AVERAGE USAGE PERMILLE.\nDGCSAMAX DS    H                  CSA TOTAL MAXIMUM USAGE PERMILLE.\nDGECSAAV DS    H                  ECSA TOTAL AVERAGE USAGE PERMILLE.\nDGECSAMX DS    H                  ECSA TOTAL MAXIMUM USAGE PERMILLE.\nDGCSAALC DS    F                  MAXIMUM CSA ALLOCATED BYTES.\nDGCSAEXT DS    F                  MINIMUM CSA LARGEST FREE EXTENT.\nDGECSAAL DS    F                  MAXIMUM ECSA ALLOCATED BYTES.\nDGECSAXT DS    F                  MINIMUM ECSA LARGEST FREE EXTENT.\nDGINTEND DS    PL4                TIME RMF INTERVAL ENDED.\nDGINTPRL DS    F                  PRINT LINES PRINTED AT THIS NODE.\nDGINTPRX DS    F                  PRINT LINES PRINTED TO EXTERNAL WTRS.\nDGINTPRN DS    F                  PRINT LINES SHIPPED TO OTHER NODES.\nDGRDYLOW DS    H                  MINIMUM READY USER ASID COUNT.\nDGRDYHIG DS    H                  MAXIMUM READY USER ASID COUNT.\nDGRDYAVG DS    F                  AVERAGE READY USER ASID COUNT BY 10.\nDGINULOW DS    H                  MINIMUM IN USER ASID COUNT.\nDGINUHIG DS    H                  MAXIMUM IN USER ASID COUNT.\nDGINUAVG DS    F                  AVERAGE IN USER ASID COUNT BY 10.\nDGOTULOW DS    H                  MINIMUM OUT USER ASID COUNT.\nDGOTUHIG DS    H                  MAXIMUM OUT USER ASID COUNT.\nDGOTUAVG DS    F                  AVERAGE OUT USER ASID COUNT BY 10.\nDGWTULOW DS    H                  MINIMUM WAIT USER ASID COUNT.\nDGWTUHIG DS    H                  MAXIMUM WAIT USER ASID COUNT.\nDGWTUAVG DS    F                  AVERAGE WAIT USER ASID COUNT BY 10.\nDGJOBLOW DS    H                  MINIMUM BATCH JOB ASID COUNT.\nDGJOBHIG DS    H                  MAXIMUM BATCH JOB ASID COUNT.\nDGJOBAVG DS    F                  AVERAGE BATCH JOB ASID COUNT BY 10.\nDGSTCLOW DS    H                  MINIMUM STC ASID COUNT.\nDGSTCHIG DS    H                  MAXIMUM STC ASID COUNT.\nDGSTCAVG DS    F                  AVERAGE STC ASID COUNT BY 10.\nDGTSULOW DS    H                  MINIMUM TSO USER ASID COUNT.\nDGTSUHIG DS    H                  MAXIMUM TSO USER ASID COUNT.\nDGTSUAVG DS    F                  AVERAGE TSO USER ASID COUNT BY 10.\nDGLRDLOW DS    H                  MINIMUM LOG-RDY USR ASID COUNT.\nDGLRDHIG DS    H                  MAXIMUM LOG-RDY USR ASID COUNT.\nDGLRDAVG DS    F                  AVERAGE LOG-RDY USR ASID COUNT BY 10.\nDGLWTLOW DS    H                  MINIMUM LOG-WT USER ASID COUNT.\nDGLWTHIG DS    H                  MAXIMUM LOG-WT USER ASID COUNT.\nDGLWTAVG DS    F                  AVERAGE LOG-WT USER ASID COUNT BY 10.\nDGASCLOW DS    H                  MINIMUM ASCH ASID COUNT.\nDGASCHIG DS    H                  MAXIMUM ASCH ASID COUNT.\nDGASCAVG DS    F                  AVERAGE ASCH ASID COUNT BY 10.\nDGOEDLOW DS    H                  MINIMUM OPEN MVS ASID COUNT.\nDGOEDHIG DS    H                  MAXIMUM OPEN MVS ASID COUNT.\nDGOEDAVG DS    F                  AVERAGE OPEN MVS ASID COUNT BY 10.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGINTLEN EQU   *-DGRMFINT         LENGTH OF INTERVAL ENTRY.\n         SPACE\nDGPG#ENT DSECT                    PERFORMANCE GROUP NUMBER ENTRY.\nDGPG#NXT DS    A                  ADDRESS OF NEXT PG NUMBER ENTRY.\nDGPG#PRV DS    A                  ADDR OF PREVIOUS PG NUMBER ENTRY.\nDGPG#NUM DS    F                  NUMBER OF INTERVALS WITH THIS PG.\nDGPG#    DS    F                  PERFORMANCE GROUP NUMBER.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGPG#LEN EQU   *-DGPG#ENT         LENGTH OF PG NUMBER ENTRY.\n         SPACE\nDGCH#ENT DSECT                    CHANNEL PATH ID NUMBER ENTRY.\nDGCH#NXT DS    A                  ADDRESS OF NEXT CHPID NUMBER ENTRY.\nDGCH#PRV DS    A                  ADDR OF PREVIOUS CHPID NUMBER ENTRY.\nDGCH#NUM DS    F                  NUMBER OF INTERVALS WITH THIS CHPID.\nDGCH#    DS    F                  CHANNEL PATH ID NUMBER.\nDGCH#ACR DS    CL5                CHANNEL PATH TYPE ACRONYM.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGCH#LEN EQU   *-DGCH#ENT         LENGTH OF CHPID NUMBER ENTRY.\n         SPACE\nDGDV#ENT DSECT                    DEVICE NUMBER ENTRY.\nDGDV#NXT DS    A                  ADDRESS OF NEXT DEVICE NUMBER ENTRY.\nDGDV#PRV DS    A                  ADDR OF PREVIOUS DEVICE NUMBER ENTRY.\nDGDV#NUM DS    F                  NUMBER OF INTERVALS WITH THIS DEVICE.\nDGDV#    DS    F                  DEVICE NUMBER.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGDV#LEN EQU   *-DGDV#ENT         LENGTH OF DEVICE NUMBER ENTRY.\n         SPACE\nDGPDNENT DSECT                    PAGE DATA SET NAME ENTRY.\nDGPDNNXT DS    A                  ADDRESS OF NEXT PAGE DSN ENTRY.\nDGPDNPRV DS    A                  ADDRESS OF PREVIOUS PAGE DSN ENTRY.\nDGPDNNUM DS    F                  NUMBER OF INTERVALS WITH THIS DSN.\nDGPDNAME DS    CL44               PAGE DATA SET NAME.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGPDNLEN EQU   *-DGPDNENT         LENGTH OF PAGE DATA SET NAME ENTRY.\n         SPACE\nDGPRFGRP DSECT                    PERFORMANCE GROUP ENTRY.\nDGPRFNXT DS    A                  ADDRESS OF NEXT PERF. GROUP ENTRY.\nDGPRFPRV DS    A                  ADDR OF PREVIOUS PERF. GROUP ENTRY.\nDGPRFNUM DS    F                  PERFORMANCE GROUP NUMBER.\nDGPRFSYS DS    CL4                PERFORMANCE GROUP SUBSYSTEM.\nDGPRFFLG DS    H                  PERFORMANCE GROUP FLAGS.\nDGPRFCLS DS    CL10               PERFORMANCE GROUP TRANSACTION CLASS.\nDGPRFUSR DS    CL10               PERFORMANCE GROUP USER IDENTIFIER.\nDGPRFNAM DS    CL10               PERFORMANCE GROUP TRANSACTION NAME.\nDGPRFPER DS    F                  NUMBER OF PERIODS IN GROUP.\nDGPRFXAN DS    F                  NUMBER OF TRANSACTIONS TERMINATED.\nDGPRFXTM DS    F                  ACTIVE TIME PER TRANSACTION.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGPRFLEN EQU   *-DGPRFGRP         LENGTH OF PERF. GROUP ENTRY BASE.\nDGPERIOD DS    0F                 PERFORMANCE PERIOD SECTION.\nDGPERXAN DS    F                  NUMBER OF TRANSACTIONS TERMINATED.\nDGPERXTM DS    F                  ACTIVE TIME PER TRANSACTION.\nDGPERCPU DS    F                  CPU PERMILLAGE OF PERFORMANCE PERIOD.\nDGPERSRV DS    F                  CONSUMED SERVICE UNITS/100SECONDS.\nDGPERPIN DS    F                  PERIOD PAGE-IN RATE.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGPERLEN EQU   *-DGPERIOD         LENGTH OF PERF. PERIOD SECTION.\n         SPACE\nDGCHPID  DSECT                    CHANNEL PATH ENTRY.\nDGCHNNXT DS    A                  ADDRESS OF NEXT CHPID ENTRY.\nDGCHNPRV DS    A                  ADDR OF PREVIOUS CHPID ENTRY.\nDGCHNNUM DS    F                  NUMBER OF CHPIDS IN THIS ENTRY.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGCHNLEN EQU   *-DGCHPID          LENGTH OF CHANNEL PATH ENTRY BASE.\nDGCHPATH DS    0D                 CHPID SECTION.\nDGCHPPID DS    F                  CHANNEL PATH IDENTIFICATION.\nDGCHPBSY DS    F                  CHANNEL PATH UTILIZATION (1/100THS%).\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGCHPLEN EQU   *-DGCHPATH         LENGTH OF CHPID SECTION.\n         SPACE\nDGDEVICE DSECT                    DEVICE ENTRY.\nDGDEVNXT DS    A                  ADDRESS OF NEXT DEVICE ENTRY.\nDGDEVPRV DS    A                  ADDRESS OF PREVIOUS DEVICE ENTRY.\nDGDEVNAM DS    F                  DEVICE NUMBER.\nDGDEVLCU DS    F                  DEVICE LOGICAL CONTROL UNIT NUMBER.\nDGDEVFLG DS    X                  DEVICE FLAGS.\nDGDEVFL2 DS    X                  DEVICE FLAGS.\nDGDEV0IO EQU   X'80'              DEVICE I/O COUNT ZERO FOR INTERVAL.\nDGDEVVOL DS    CL6                DEVICE VOLUME SERIAL NUMBER.\nDGDEVTYP DS    F                  DEVICE UNIT TYPE.\nDGDEVACT DS    F                  DEVICE SSCH+RSCH RATE.\nDGDEVAVC DS    F                  DEVICE AVERAGE CONNECT PER IO.\nDGDEVAVD DS    F                  DEVICE AVERAGE DISCONNECT PER IO.\nDGDEVAVP DS    F                  DEVICE AVERAGE PENDING PER IO.\nDGDEVBSW DS    F                  DEVICE AVERAGE BUSY WAIT PER IO.\nDGDEVCUW DS    F                  DEVICE AVERAGE CU BUSY WAIT PER IO.\nDGDEVDPW DS    F                  DEVICE AVERAGE PORT BUSY WAIT PER IO.\nDGDEVCON DS    F                  DEVICE CONNECT TIME PERMILLAGE.\nDGDEVDIS DS    F                  DEVICE DISCONNECT TIME PERMILLAGE.\nDGDEVPND DS    F                  DEVICE PENDING TIME PERMILLAGE.\nDGDEVQUE DS    F                  DEVICE REQUEST QUEUED PERMILLAGE.\nDGDEVRSV DS    F                  DEVICE RESERVED PERMILLAGE.\nDGDEVMTP DS    F                  DEVICE MOUNT PENDING PERMILLAGE.\nDGDEVNRD DS    F                  DEVICE NOT READY PERMILLAGE.\nDGDEVSGN DS    CL8                DEVICE SMS STORAGE GROUP NAME.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGDEVLEN EQU   *-DGDEVICE         LENGTH OF DEVICE ENTRY.\n         SPACE\nDGPAGEDS DSECT                    PAGE DATA SET ENTRY.\nDGPAGNXT DS    A                  ADDRESS OF NEXT PAGE DATA SET ENTRY.\nDGPAGPRV DS    A                  ADDR OF PREVIOUS PAGE DATA SET ENTRY.\nDGPAGDSN DS    CL44               PAGE DATA SET NAME.\nDGPAGFLG DS    F                  PAGE DATA SET FLAGS.\nDGPAGBAD DS    F                  UNUSABLE SLOT OR SWAP SET COUNT.\nDGPAGMAX DS    F                  MAXIMUM PERMILLE FULL.\nDGPAGMIN DS    F                  MINIMUM PERMILLE FULL.\nDGPAGAVG DS    F                  AVERAGE PERMILLE FULL.\nDGPAGBSY DS    F                  AVERAGE PERMILLE IN-USE.\nDGPAGIOR DS    F                  AVERAGE I/O RATE.\nDGPAGXFR DS    F                  AVERAGE TRANSFER RATE.\nDGPAGTIM DS    F                  AVERAGE TRANSFER SERVICE TIME.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGPAGLEN EQU   *-DGPAGEDS         LENGTH OF PAGE DATA SET ENTRY.\n         SPACE\nDGDATAST DSECT                    DATA SET ENTRY.\nDGDSNNXT DS    A                  ADDRESS OF NEXT DATA SET ENTRY.\nDGDSNPRV DS    A                  ADDR OF PREVIOUS DATA SET ENTRY.\nDGDSNAME DS    CL44               DATA SET NAME.\nDGDSNDSF DS    F                  ADDR OF FIRST DATA SET EVENT ENTRY.\nDGDSNDSL DS    F                  ADDR OF LAST DATA SET EVENT ENTRY.\nDGDSNDS# DS    F                  NUMBER OF DATA SET EVENT ENTRIES.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGDSNLEN EQU   *-DGDATAST         LENGTH OF DATA SET ENTRY.\n         SPACE\nDGDSEVNT DSECT                    DATA SET EVENT ENTRY.\nDGDSENXT DS    A      / DSE \\     ADDRESS OF NEXT EVENT DATA SET ENTRY.\nDGDSEPRV DS    A      \\CHAIN/     ADDR OF PREV. EVENT DATA SET ENTRY.\nDGDSEDSN DS    A      / DSN \\     ADDRESS OF NEXT EVENT DATA SET ENTRY.\nDGDSEDSP DS    A      \\CHAIN/     ADDR OF PREV. EVENT DATA SET ENTRY.\nDGDSENAM DS    A                  ADDR OF OWNING DATA SET ENTRY.\nDGDSEDAT DS    PL4                DATE OF DATA SET EVENT (SIGNED).\nDGDSETIM DS    PL4                TIME OF DATA SET EVENT (HHMMSSTH).\nDGDSESID DS    CL4                SMF SYS-ID ON WHICH EVENT OCCURRED.\nDGDSEJOB DS    CL8                NAME OF JOB CAUSING EVENT.\nDGDSEUSR DS    CL8                JMRUSEID FIELD.\nDGDSETYP DS    X                  EVENT CODE (SMF RECORD TYPE).\n*        EQU   14                 READ FROM THIS DATA SET.\n*        EQU   15                 WROTE TO THIS DATA SET.\n*        EQU   17                 SCRATCHED THIS DATA SET.\n*        EQU   18                 RENAMED FROM THIS DATA SET NAME.\n*        EQU   61                 THIS ENTRY NAME DEFINED - ICF.\n*        EQU   62                 THIS VSAM DATA SET OPENED.\n*        EQU   63                 THIS ENTRY NAME DEFINED - NON-ICF.\n*        EQU   64                 ACCESSED THIS VSAM DATA SET.\n*        EQU   65                 THIS ENTRY UNCATALOGUED - ICF.\n*        EQU   66                 THIS ENTRY ALTERED - ICF.\n*        EQU   67                 THIS ENTRY UNCATALOGUED - NON-ICF.\n*        EQU   68                 RENAMED FROM THIS NAME - NON-ICF.\n*        EQU   128+1              PRIMARY TO LEVEL-1 MIGRATION.\n*        EQU   128+2              MIGRATION MOVEMENT.\n*        EQU   128+3              PRIMARY TO LEVEL-2 MIGRATION.\n*        EQU   128+4              RECALL FROM LEVEL-1 TO PRIMARY.\n*        EQU   128+5              RECALL FROM LEVEL-2 TO PRIMARY.\n*        EQU   128+6              DELETE A MIGRATED DATA SET.\n*        EQU   128+7              DAILY BACKUP.\n*        EQU   128+8              SPILL BACKUP.\n*        EQU   128+9              RECOVERY.\n*        EQU   128+10             RECYCLE BACKUP VOLUME.\n*        EQU   128+11             DATA SET DELETION BY AGE.\n*        EQU   128+12             RECYCLE MIGRATION VOLUME.\n*        EQU   128+13             FULL VOLUME DUMP.\n*        EQU   128+14             VOLUME OR DATA SET RESTORE.\nDGDSESBT DS    X                  EVENT FLAGS.\nDGDSENEW EQU   X'80'              RENAME WAS TO THIS DATA SET NAME.\nDGDSEVAR DS    0H                 VARIABLE PART DEPENDENT ON TYPE.\nDGDSENUM DS    H                  NUMBER OF UNITS OR VOLUMES.\nDGDSEVOL DS    5CL6               FIRST FIVE VOLUME SERIAL NUMBERS.\nDGDSERIN DS    0H                 RECORD INDICATORS.\nDGDSEENT DS    C                  CATALOG ENTRY TYPE.\nDGDSEFNC DS    C                  EVENT FUNCTION BYTE.\n*                                 65: 'S' IF SCRATCHED OR 'U' IF NOT.\n*                                 66: 'R' IF ALTER WAS A RENAME.\nDGDSEONM DS    F                  ADDRESS OF NEW/OLD NAME ENTRY.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGDSEL17 EQU   *-DGDSEVNT         LENGTH OF DATA SET EVENT 17 ENTRY.\nDGDSEL61 EQU   *-DGDSEVNT         LENGTH OF DATA SET EVENT 61 ENTRY.\nDGDSEL62 EQU   *-DGDSEVNT         LENGTH OF DATA SET EVENT 62 ENTRY.\nDGDSEL65 EQU   *-DGDSEVNT         LENGTH OF DATA SET EVENT 65 ENTRY.\nDGDSEL18 EQU   *-DGDSEVNT         LENGTH OF DATA SET EVENT 18 ENTRY.\nDGDSEL66 EQU   *-DGDSEVNT         LENGTH OF DATA SET EVENT 66 ENTRY.\n         ORG   DGDSEONM\nDGDSEDDN DS    CL8                DATA DEFINITION NAME USED.\nDGDSEMEM DS    CL8                DATA SET ELEMENT OR MEMBER NAME.\nDGDSEDCO DS    XL2                DCBDSORG.\nDGDSEDSO DS    XL2                JFCDSORG.\nDGDSEDMF DS    XL2                DCBMACRF.\nDGDSEOPT DS    X                  DCBOPTCD.\nDGDSEEOP DS    X                  DEBOPATB.\nDGDSEXCP DS    F                  TOTAL EXCP COUNT.\nDGDSEBLK DS    H                  BLOCK SIZE.\nDGDSEEXT DS    H                  NUMBER OF EXTENTS.\nDGDSETBC DS    0F                 TAPE VOLUME BLOCK COUNT.\nDGDSETRK DS    F                  TRACKS REMAINING AFTER DADSM RELEASE.\nDGDSEDEV DS    XL2                DEVICE NUMBER FROM UCB.\nDGDSEUCV DS    CL6                VOLUME SERIAL NUMBER FROM UCB.\nDGDSEFSC DS    H                  DATA SET SEQUENCE COUNT.\nDGDSEFSN DS    H                  DATA SET SEQUENCE NUMBER.\nDGDSELRL DS    H                  LOGICAL RECORD LENGTH.\nDGDSEKEY DS    X                  KEY LENGTH.  (2 BYTES FOR VSAM.)\nDGDSERFM DS    X                  RECORD FORMAT.  (NON-VSAM ONLY.)\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGDSEL64 EQU   *-DGDSEVNT         LENGTH OF DATA SET EVENT 64 ENTRY.\nDGDSEMCN DS    CL8                SMS MANAGEMENT CLASS NAME.\nDGDSEDCN DS    CL8                SMS DATA CLASS NAME.\nDGDSESCN DS    CL8                SMS STORAGE CLASS NAME.\nDGDSESTP DS    CL8                STEP NAME.\nDGDSEPGM DS    CL8                ACTIVE PROGRAM NAME.\nDGDSEL14 EQU   *-DGDSEVNT         LENGTH OF DATA SET EVENT 14/15 ENTRY.\n         SPACE\nDGPROGRM DSECT                    PROGRAM ENTRY.\nDGPGMNXT DS    A                  ADDRESS OF NEXT PROGRAM ENTRY.\nDGPGMPRV DS    A                  ADDR OF PREVIOUS PROGRAM ENTRY.\nDGPGMNAM DS    CL8                PROGRAM NAME.\nDGPGMJSF DS    F                  ADDR OF FIRST JOB STEP END ENTRY.\nDGPGMJSL DS    F                  ADDR OF LAST JOB STEP END ENTRY.\nDGPGMJS# DS    F                  NUMBER OF JOB STEP END EVENT ENTRIES.\nDGPGMCPU DS    F                  TOTAL TCB+SRB TIME FOR ALL EVENTS.\nDGPGMXCP DS    PL8                TOTAL EXCP COUNT FOR ALL EVENTS.\nDGPGMSRV DS    PL8                TOTAL SERVICE UNITS FOR ALL EVENTS.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGPGMLEN EQU   *-DGPROGRM         LENGTH OF PROGRAM ENTRY.\n         SPACE\nDGJOB    DSECT                    JOB ENTRY.\nDGJOBNXT DS    A                  ADDRESS OF NEXT JOB ENTRY.\nDGJOBPRV DS    A                  ADDR OF PREVIOUS JOB ENTRY.\nDGJOBNAM DS    CL8                JOB NAME.\nDGJOBJSF DS    F                  ADDR OF FIRST JOB STEP END ENTRY.\nDGJOBJSL DS    F                  ADDR OF LAST JOB STEP END ENTRY.\nDGJOBJS# DS    F                  NUMBER OF JOB STEP END EVENT ENTRIES.\nDGJOBCPU DS    F                  TOTAL TCB+SRB TIME FOR ALL EVENTS.\nDGJOBXCP DS    PL8                TOTAL EXCP COUNT FOR ALL EVENTS.\nDGJOBSRV DS    PL8                TOTAL SERVICE UNITS FOR ALL EVENTS.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGJOBLEN EQU   *-DGJOB            LENGTH OF JOB ENTRY.\n         SPACE\nDGJSEVNT DSECT                    JOB STEP END EVENT ENTRY.\nDGJSENXT DS    A      / JSE \\     ADDRESS OF NEXT EVENT JOB STEP ENTRY.\nDGJSEPRV DS    A      \\CHAIN/     ADDR OF PREV. EVENT JOB STEP ENTRY.\nDGJSEPRN DS    A      / PGM \\     ADDRESS OF NEXT EVENT JOB STEP ENTRY.\nDGJSEPRP DS    A      \\CHAIN/     ADDR OF PREV. EVENT JOB STEP ENTRY.\nDGJSEJBN DS    A      / JOB \\     ADDRESS OF NEXT EVENT JOB STEP ENTRY.\nDGJSEJBP DS    A      \\CHAIN/     ADDR OF PREV. EVENT JOB STEP ENTRY.\nDGJSEPGA DS    A                  ADDR OF OWNING PROGRAM ENTRY.\nDGJSEJBA DS    A                  ADDR OF OWNING JOB ENTRY.\nDGJSEDAT DS    PL4                DATE OF JOB STEP END (SIGNED).\nDGJSETIM DS    PL4                TIME OF JOB STEP END (HHMMSSTH).\nDGJSESID DS    CL4                SMF SYS-ID ON WHICH EVENT OCCURRED.\nDGJSEWID DS    CL4                SUBSYSTEM IDENTIFIER.\nDGJSESIT DS    PL4                TIME OF JOB STEP START (HHMMSSTH).\nDGJSESTD DS    PL4                DATE OF JOB STEP START (SIGNED).\nDGJSEJOB DS    CL8                NAME OF JOB CAUSING EVENT.\nDGJSEJID DS    CL8                JES JOB NUMBER.\nDGJSEUSR DS    CL8                JMRUSEID FIELD.\nDGJSESTP DS    CL8                JOB STEP NAME.\nDGJSEPSN DS    CL8                JOB PROC STEP NAME.\nDGJSEPGM DS    CL8                NAME OF JOB STEP PROGRAM.\nDGJSESTN DS    H                  JOB STEP NUMBER.\nDGJSECLS DS    X                  JOB CLASS.\nDGJSESPK DS    X                  STORAGE PROTECT KEY.\nDGJSEPGN DS    H                  PERFORMANCE GROUP NUMBER.\nDGJSEPTY DS    H                  DISPATCHING PRIORITY.\nDGJSEUID DS    CL20               PROGRAMMER NAME.\nDGJSERUD DS    CL8                RACF USER IDENTIFIER.\nDGJSEGRP DS    CL8                RACF GROUP IDENTIFIER.\nDGJSELAP DS    F                  JOB STEP ELAPSED TIME.\nDGJSETEP DS    F                  EXCP COUNT.\nDGJSETPT DS    F                  TPUT COUNT.\nDGJSETGT DS    F                  TGET COUNT.\nDGJSETCN DS    F                  TOTAL CONNECT TIME.\nDGJSECMP DS    H                  STEP COMPLETION CODE.\n         DS    H                  UNUSED.\nDGJSECPT DS    F                  STEP TCB TIME.\nDGJSECPS DS    F                  STEP SRB TIME.\nDGJSEICU DS    F                  INITIATOR TCB TIME.\nDGJSEISB DS    F                  INITIATOR SRB TIME.\nDGJSEIIP DS    F                  I/O INTERRUPT CPU TIME.\nDGJSERCT DS    F                  REGION CONTROL TASK CPU TIME.\nDGJSEHPT DS    F                  HIPERSPACE TRANSFER CPU TIME.\nDGJSEPRI DS    H                  PRIVATE AREA KB HIGH-WATER-MARK.\nDGJSESYS DS    H                  LSQA KB HIGH-WATER-MARK.\nDGJSEEUR DS    F                  EXT-PRIVATE STG AREA HIGH-WATER-MARK.\nDGJSEEAR DS    F                  ELSQA STORAGE HIGH-WATER-MARK.\nDGJSEDSV DS    F                  DATA SPACE STORAGE HIGH-WATER-MARK.\nDGJSEPGI DS    F                  PAGE-IN COUNT.\nDGJSEPGO DS    F                  PAGE-OUT COUNT.\nDGJSEPSI DS    F                  PAGES SWAPPED-IN COUNT.\nDGJSEPSO DS    F                  PAGES SWAPPED-OUT COUNT.\nDGJSEVPI DS    F                  VIO PAGE-IN COUNT.\nDGJSEVPO DS    F                  VIO PAGE-OUT COUNT.\nDGJSEVPR DS    F                  VIO PAGE RECLAIM COUNT.\nDGJSECPI DS    F                  COMMON PAGE-IN COUNT.\nDGJSESRV DS    F                  TOTAL SERVICE UNITS.\nDGJSECSU DS    F                  CPU SERVICE UNITS.\nDGJSESRB DS    F                  SRB SERVICE UNITS.\nDGJSEIOS DS    F                  IOS SERVICE UNITS.\nDGJSEMSO DS    F                  MSO SERVICE UNITS.\nDGJSETRS DS    F                  SRM TRANSACTION COUNT.\nDGJSEVOL DS    F                  NUMBER OF VOLUME MOUNTS.\nDGJSERGN DS    F                  REQUESTED REGION KB.\n         DS    0D                 ENTRY LENGTH ALIGNMENT.\nDGJSELEN EQU   *-DGJSEVNT         LENGTH OF JOB STEP END EVENT ENTRY.\n         SPACE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMGATGET": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'*\\x13\\x00\\x00\\x00\\x91)_\\x00\\x985\\x0f\\x121\\x02\\x9f\\x00T\\x00\\xaa\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "42.19", "flags": 0, "createdate": "1991-10-22T00:00:00", "modifydate": "1998-12-16T12:31:00", "lines": 671, "newlines": 84, "modlines": 170, "user": "T$QGP75"}, "text": "IMGATGET TITLE 'IMP DATA GATHERER - GET INPUT RECORD'\n*        COPYRIGHT (C) 1991  PRYCROFT SIX PTY LTD\n*\n*        ENTRY CODE IN R0 UPON ENTRY.\n*        RETURN CODE IN R15 UPON EXIT.\n*\n*        R0 = 0 ==> REQUEST AN SMF RECORD IF AVAILABLE.\n*                   R15 = 0 ==> RECORD RETURNED WITH ADDRESS IN R1.\n*                   R15 = 8 ==> NO RECORD CURRENTLY AVAILABLE.\n*\n*        R0 = 4 ==> REQUEST TERMINATION.\n*                   R15 = 4 ==> TERMINATION COMPLETE (FILE(S) CLOSED).\n*\n         SPACE\n************************************************************\n*                                                          *\n*         PERFORM INITIALIZATION FOR THIS INVOCATION       *\n*                                                          *\n************************************************************\n         SPACE\nIMGATGET CSECT\nIMGATGET AMODE ANY\nIMGATGET RMODE 24\n         USING IMGATGET,R15\n         B     GETSTART           BRANCH AROUND HEADER.\n         DC    AL1(47)\n         DC    CL47'IMGATGET COPYRIGHT (C) 1991 PRYCROFT SIX P/L   '\n         DROP  R15                IMGATGET.\nGETSTART STM   R14,R12,12(R13)    SAVE REGISTERS.\n         LR    R12,R15            COPY BASE REGISTER.\n         LA    R11,2048(,R12)\n         LA    R11,2048(,R11)     LOAD SECOND BASE REGISTER.\n         USING IMGATGET,R12,R11\n         LA    R2,GETSAVE         POINT TO NEW SAVE AREA.\n         ST    R2,8(,R13)\n         ST    R13,4(,R2)         CHAIN SAVE AREAS.\n         LR    R13,R2\n         L     R10,=V(IMGATCOM)   POINT TO DATA GATHERER COMMON AREA.\n         USING IMGATCOM,R10\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE INVOCATION TYPE                        *\n*                                                          *\n************************************************************\n         SPACE\n         LTR   R0,R0              INPUT RECORD REQUESTED?\n         BZ    GETINIT            YES.\n*                                 NO, TERMINATION HAS BEEN REQUESTED.\n         SPACE\n************************************************************\n*                                                          *\n*         PERFORM FINAL TERMINATION                        *\n*                                                          *\n************************************************************\n         SPACE\n         TM    GATFLAGS,DONEOPEN+DONCLOSE\n         BNM   TERMEXIT\n         CLOSE SMFPRIME           CLOSE THE \"PRIMING\" FILE.\n         OI    GATFLAGS,DONCLOSE  FLAG THAT THE CLOSE WAS DONE.\nACTIVXIT ICM   R4,15,ACTIVRDS     CURRENTLY PROCESSING A VSAM RDS?\n         BZ    TERMEXIT           NO.\n         CLOSE MANX               YES, CLOSE IT.\n         MODESET MF=(E,MDSET0)    GET INTO KEY ZERO.\n         L     R1,540             POINT TO THE CURRENT TCB.\n         L     R1,180(,R1)        POINT TO THE ASSOCIATED JSCB.\n*        L     R1,348(,R1)        POINT TO THE ACTIVE JSCB.\n         NI    243(R1),X'7F'      DISABLE BYPASS PASSWORD PROTECTION.\n         ICM   R1,15,LIDADDR      WAS READALL ATTRIBUTE SET HERE?\n         BZ    *+8                NO.\n         NI    220(R4),X'FB'      YES, RESET READALL ATTRIBUTE.\n         MODESET MF=(E,MDSETN0)   REVERT TO USER KEY.\n         LA    R1,MANXFREE        POINT TO THE DYNALLOC PARAMETER LIST.\n         DYNALLOC                 FREE THE VSAM SMF DATA SET.\nTERMEXIT L     R0,SPANSIZE\n         ICM   R1,15,SPANPTR      ANY SPANNED RECORD BLOCK TO FREE?\n         BZ    SPANFREE           NO.\n         FREEMAIN RU,LV=(0),A=(1) YES, FREE IT.\nSPANFREE L     R0,SPANSIZE\n         ICM   R1,15,BLOCKPTR     ANY CI BLOCK BUFFER TO FREE?\n         BZ    BLOKFREE           NO.\n         FREEMAIN RU,LV=(0),A=(1) YES, FREE IT.\nBLOKFREE L     R13,4(,R13)        POINT TO CALLER'S SAVE AREA.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         LA    R15,4              INDICATE THAT THERE IS NO OPEN FILE.\n         BSM   0,R14              RETURN TO CALLER.\n         SPACE\n************************************************************\n*                                                          *\n*         PERFORM FINAL TERMINATION UNDER TSO              *\n*                                                          *\n************************************************************\n         SPACE\nTSOTERM  LA    R1,PRIMEMSG        POINT TO THE RECORD COUNT MESSAGE.\n         LA    R0,L'PRIMEMSG      GET THE MESSAGE LENGTH.\n         TPUT  (1),(0),R          SHOW FINAL COUNT ON THE TERMINAL.\n         STIMER WAIT,BINTVL==F'150'    WAIT 1.5 SECONDS.\n         STLINENO LINE=1,MODE=ON  TURN ON FULLSCREEN MODE FOR I-MON.\nTSOTERMD L     R13,4(,R13)        POINT TO CALLER'S SAVE AREA.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         LA    R15,4              INDICATE THAT THERE IS NO OPEN FILE.\n         BSM   0,R14              RETURN TO CALLER.\n         SPACE\n************************************************************\n*                                                          *\n*         PERFORM PRIMING FILE PROCESSING                  *\n*                                                          *\n************************************************************\n         SPACE\nGETINIT  TM    GATFLAGS,DONEOPEN  ALREADY OPENED THE FILE?\n         BO    OPENOKAY           YES.\n         OI    GATFLAGS,DONEOPEN  FLAG THAT THE OPEN HAS NOW BEEN DONE.\n         SLR   R5,R5\n         L     R4,540             GET POINTER TO CURRENT TCB.\n         L     R4,12(,R4)         POINT TO TIOT.\n         LA    R4,24(,R4)         POINT TO TIOELNGH.\nCHKDDNM1 CLC   DCBDDNAM-IHADCB+SMFPRIME,4(R4)\n         BE    OPENFILE           FILE EXISTS SO GO AND OPEN IT.\n         IC    R5,0(,R4)          GET TIOT ENTRY LENGTH.\n         AR    R4,R5              POINT TO NEXT TIOT ENTRY.\n         CLI   0(R4),0            ZERO LENGTH ENTRY?\n         BNE   CHKDDNM1           NO, CHECK OUT THIS ENTRY.\n         B     FLAGCLOS           YES, NOT IN TIOT SO NO PRIMING FILE.\nOPENFILE DS    0H\n         OPEN  (SMFPRIME,(INPUT)) NO, OPEN THE INPUT PRIMING FILE.\nOPENOKAY DS    0H\n         TM    GATFLAGS,DONCLOSE  ALREADY CLOSED THE FILE?\n         BO    ACTIVCHK           YES, CHECK ACTIVE FILE STATUS.\n         TM    GATFLAGS,TSU       RUNNING UNDER A TSO USER?\n         BZ    GETGET             NO, JUST GET A RECORD.\n         L     R0,PRIMEDEC        YES, COUNT DOWN TO MESSAGE.\n         BCT   R0,GETDECD         PERFORM DECREMENT.\n         L     R0,CLEARDEC        DO MESSAGE, COUNT DOWN TO CLEAR.\n         BCT   R0,GETCLRD         PERFORM DECREMENT.\n         STLINENO LINE=4,MODE=OFF CLEAR THE SCREEN.\n         LA    R0,CLEARINT        GET THE CLEAR SCREEN INTERVAL.\nGETCLRD  ST    R0,CLEARDEC        UPDATE COUNT DOWN QUANTITY.\n         L     R0,PRIMECNT        GET SMFPRIME RECORD COUNT SO FAR.\n         CVD   R0,GETWORK\n         MVC   PRIMSGCT,PRIMEMSK  LOAD EDIT MASK.\n         ED    PRIMSGCT,GETWORK+3 SHOW RECORD COUNT IN MESSAGE.\n         LA    R1,PRIMEMSG        POINT TO THE RECORD COUNT MESSAGE.\n         LA    R0,L'PRIMEMSG      GET THE MESSAGE LENGTH.\n         TPUT  (1),(0),R          SHOW COUNT ON THE TERMINAL.\n         LA    R0,PRIMEINT        GET THE MESSAGE INTERVAL.\nGETDECD  ST    R0,PRIMEDEC        UPDATE COUNT DOWN QUANTITY.\nGETGET   DS    0H\n         GET   SMFPRIME           GET AN INPUT RECORD.\n         LA    R0,1               INCREMENT SMFPRIME RECORD COUNT.\n         A     R0,PRIMECNT\n         ST    R0,PRIMECNT\n         SPACE\n************************************************************\n*                                                          *\n*         EXIT WITH AN SMF RECORD TO RETURN                *\n*                                                          *\n************************************************************\n         SPACE\nRECRDXIT L     R13,4(,R13)        POINT TO CALLER'S SAVE AREA.\n         ST    R1,24(,R13)        SAVE RECORD ADDRESS IN R1 SLOT.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         SLR   R15,R15            INDICATE THAT A RECORD IS RETURNED.\n         BSM   0,R14              RETURN TO CALLER.\n         SPACE\n************************************************************\n*                                                          *\n*         HANDLE THE END OF THE PRIMING DATA               *\n*                                                          *\n************************************************************\n         SPACE\nSMFEODAD DS    0H\n         CLOSE SMFPRIME           END OF FILE SO CLOSE THE FILE.\n         L     R0,PRIMECNT        GET SMFPRIME RECORD COUNT.\n         CVD   R0,GETWORK\n         MVC   PRIMSGCT,PRIMEMSK  LOAD EDIT MASK.\n         ED    PRIMSGCT,GETWORK+3 SHOW RECORD COUNT IN MESSAGE.\n         TM    GATFLAGS,NOTRACK   TRACKING CURRENT DATA REQUIRED?\n         BO    TSOTERM            NO, SIGNAL TERMINATION.\n         WTO   MF=(E,PRIMEWTO)    ISSUE PRIMING RECORD COUNT MESSAGE.\nFLAGCLOS OI    GATFLAGS,DONCLOSE  FLAG THAT THE CLOSE WAS DONE.\n         SLR   R5,R5\n         L     R4,540             GET POINTER TO CURRENT TCB.\n         L     R4,12(,R4)         POINT TO TIOT.\n         LA    R4,24(,R4)         POINT TO TIOELNGH.\nCHKDDNM2 CLC   DCBDDNAM-IHADCB+SMFPRIME,4(R4)\n         BE    FREEFILE           FILE REMAINS SO GO AND FREE IT.\n         IC    R5,0(,R4)          GET TIOT ENTRY LENGTH.\n         AR    R4,R5              POINT TO NEXT TIOT ENTRY.\n         CLI   0(R4),0            ZERO LENGTH ENTRY?\n         BNE   CHKDDNM2           NO, CHECK OUT THIS ENTRY.\n*                                 YES, NOT IN TIOT SO FREE=CLOSE OKAY.\n         TM    GATFLAGS,NOTRACK   TRACKING CURRENT DATA REQUIRED?\n         BO    TSOTERMD           NO, SIGNAL TERMINATION.\n         B     ENDPRIME           YES, END OF PRIMING PROCESSING.\nFREEFILE LA    R1,MANXFREE        POINT TO THE DYNALLOC PARAMETER LIST.\n         DYNALLOC                 FREE THE PRIMING FILE.\nENDPRIME DS    0H                 END OF PRIMING PROCESSING.\n         SPACE\n************************************************************\n*                                                          *\n*         PERFORM ONCE-ONLY VSAM INITIALIZATION            *\n*                                                          *\n************************************************************\n         SPACE\n         MODESET MF=(E,MDSET0)    GET INTO KEY ZERO.\n         L     R1,540             POINT TO THE CURRENT TCB.\n         L     R1,180(,R1)        POINT TO THE ASSOCIATED JSCB.\n*        L     R1,348(,R1)        POINT TO THE ACTIVE JSCB.\n         OI    243(R1),X'80'      ENABLE BYPASS PASSWORD PROTECTION.\n         MODESET MF=(E,MDSETN0)   REVERT TO USER KEY.\n         L     R0,SPANSIZE        GET AREA LARGE ENOUGH FOR ANY BLOCK.\n         GETMAIN RU,LV=(0),LOC=BELOW\n         ST    R1,BLOCKPTR        SAVE ITS ADDRESS.\n         L     R0,SPANSIZE        GET AREA LARGE ENOUGH FOR ANY RECORD.\n         GETMAIN RU,LV=(0),LOC=(BELOW,ANY)\n         ST    R1,SPANPTR         SAVE ITS ADDRESS.\n         TM    OSBITS,X'13'       MVS?\n         BNO   ACTIVCHK           NO, SKIP ACF2 CHECK.\n         L     R3,CVTPTR(,0)      POINT TO THE CVT.\n         USING CVT,R3\n         L     R4,CVTJESCT        POINT TO THE JESCT.\n         DROP  R3                 CVT.\n         USING JESCT,R4\n         L     R4,JESSSCT         POINT TO THE FIRST SSCVT.\n         DROP  R4                 JESCT.\n         USING SSCT,R4\nSSCTLOOP CLC   =C'ACF2',SSCTSNAM  ACF2?\n         BE    ACF2HERE           YES, ACF2 IS PRESENT.\n         ICM   R4,15,SSCTSCTA     NO, POINT TO NEXT SSCVT.\n         BNZ   SSCTLOOP           TRY NEXT SUBSYSTEM.\n         B     ACTIVCHK           ACF2 SUBSYSTEM NOT ON CHAIN.\nACF2HERE L     R4,SSCTSUSE        GET ACCVT ADDRESS.\n         DROP  R4                 SSCT.\n         L     R4,100(,R4)        POINT TO ACFASVT.\n         L     R3,548             POINT TO CURRENT ASCB.\n         SLR   R0,R0\n         ICM   R0,3,36(R3)        LOAD ASID.\n         SLL   R0,5               MULTIPLY ASID BY 32 FOR INDEX.\n         ALR   R4,R0              POINT TO ACASVT ENTRY.\n         L     R4,28(,R4)         POINT TO ACUCB.\n         L     R4,28(,R4)         POINT TO LID.\n         TM    220(R4),X'04'      DOES USER HAVE READALL ATTRIBUTE?\n         BO    ACTIVCHK           YES, DO NOT ZAP THE LID.\n         ST    R4,LIDADDR         NO, SAVE ITS ADDRESS.\n         MODESET MF=(E,MDSET0)    GET INTO KEY ZERO.\n         OI    220(R4),X'04'      SET READALL ATTRIBUTE.\n         MODESET MF=(E,MDSETN0)   REVERT TO USER KEY.\n         SPACE\n************************************************************\n*                                                          *\n*         PERFORM CURRENT VSAM DATA SET CHECKING           *\n*                                                          *\n************************************************************\n         SPACE\nACTIVCHK TM    GATFLAGS,NOTRACK   TRACKING CURRENT DATA REQUIRED?\n         BO    NORECXIT           NO, RETURN WITHOUT AN SMF RECORD.\n         ICM   R4,15,ACTIVRDS     LOAD THE ACTIVE RDS POINTER.\n         BNZ   READVSAM           GET THE NEXT LOGICAL RECORD.\n*                                 IF THE POINTER IS ZERO THEN THE\n*                                 ACTIVE RDS IS UNKNOWN, SO IT WILL\n*                                 HAVE TO BE DETERMINED.\n         L     R4,CVTPTR(,0)      POINT TO THE CVT.\n         USING CVT,R4\n         L     R4,CVTSMCA         POINT TO THE SMCA.\n         DROP  R4                 CVT.\n         TM    OSBITS,X'13'       MVS?\n         BO    MVSRDS             YES.\n         ICM   R5,15,40(R4)       NO, POINT TO FIRST SDMC UNDER MSP.\n         BZ    NORECXIT           IF ZERO THEN NO RECORD CAN BE READ.\nSMDCLOOP CLI   72(R5),X'60'       ACTIVE DATA SET?\n         BE    MSPACTIV           YES.\n         ICM   R5,15,4(R5)        NO, POINT TO NEXT SMDC.\n         BZ    NORECXIT           IF ZERO THEN NO RECORD CAN BE READ.\n         C     R5,40(,R4)         BACK TO FIRST SDMC?\n         BE    NORECXIT           YES, NO RECORD CAN BE READ.\n         B     SMDCLOOP           NO, SEE IF THIS IS THE ACTIVE ONE.\nMSPACTIV LR    R4,R5              POINT TO THE ACTIVE SDMC.\n         MVC   DSNAMMA(9),16(R4)  COPY VSAM CLUSTER NAME TO ALLOCATE.\n         B     USERDS             GO ALLOCATE THE DATA SET.\nMVSRDS   ICM   R4,15,252(R4)      POINT TO THE ACTIVE RDS.\n         BZ    NORECXIT           IF ZERO THEN NO RECORD CAN BE READ.\n         USING RDS,R4\n         TM    RDSFLAG2,RDSLOST   DUMMY RDS FOR LOST DATA?\n         BO    NORECXIT           YES, NO DATA CAN BE READ.\n         SPACE\n************************************************************\n*                                                          *\n*         ALLOCATE AND OPEN THE NEW CURRENT VSAM RDS       *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   MANX+DCBBLKSI-IHADCB,RDSCINV+2  COPY CISZ TO BLKSIZE.\n         MVC   DSNAMMA(9),RDSNAME COPY VSAM CLUSTER NAME TO ALLOCATE.\n         TM    OSLVL+1,X'20'      MVS/SP5 OR LATER?\n         BZ    USERDS             NO.\n         MVC   MANX+DCBBLKSI-IHADCB,RDSCINV+38 COPY CISZ TO BLKSIZE.\n         MVC   DSNAMMA,RDSNAME    COPY VSAM CLUSTER NAME TO ALLOCATE.\n         LA    R1,DSNAMMA         POINT TO DATA SET NAME.\n         LA    R0,44              GET LENGTH OF DATA SET NAME.\nNAMLENLP CLI   0(R1),C' '         REACHED END OF DATA SET NAME?\n         BE    ADDDATA            YES\n         LA    R1,1(,R1)          NO, POINT TO NEXT CHARACTER IN NAME.\n         BCT   R0,NAMLENLP        GO TEST IT.\nADDDATA  CH    R0,=H'2'           AT LEAST 2 BLANKS SPARE?\n         BL    USERDS             NO, LOOKS LIKE ABEND TIME.\n         MVC   0(2,R1),DATASUFX   YES, ADD '.D'.\n         CH    R0,=H'5'           AT LEAST 5 BLANKS SPARE?\n         BL    USERDS             NO, DATA COMPONENT NAME COMPLETE.\n         MVC   0(5,R1),DATASUFX   YES, ADD '.DATA'.\n         XI    SUFXFLAG,1         FLIP RETRY FLAG.\nUSERDS   ST    R4,ACTIVRDS        SAVE THIS ADDRESS FOR LATER.\n         LA    R1,MANXALOC        POINT TO THE DYNALLOC PARAMETER LIST.\n         DYNALLOC                 ALLOCATE THE VSAM SMF DATA SET.\n         LTR   R15,R15            WAS ALLOCATION SUCCESSFUL?\n         BNZ   ALOCFAIL           NO, DISPLAY ERROR DETAILS.\n         MVI   SUFXFLAG,0         YES, RESET RETRY FLAG.\n         MVC   DCBDDNAM-IHADCB+MANX,RTDDNMA   PUT DDNAME INTO DCB.\n         MVC   DDNAMMF,RTDDNMA    LOAD DDNAME TO FREE LATER.\n         OPEN  (MANX,(INPUT))     OPEN THE VSAM SMF FILE.\n         XC    TTRZ,TTRZ          CLEAR RESIDUAL TTR DATA.\n         SPACE\n************************************************************\n*                                                          *\n*         GET A LOGICAL RECORD FROM THE VSAM RDS           *\n*                                                          *\n************************************************************\n         SPACE\nREADVSAM OC    DEBLOCKS,DEBLOCKS  FIRST READ?\n         BZ    READI              YES.\n         LM    R0,R1,DEBLOCKS+4   NO, GET DEBLOCKING STATUS.\n         L     R2,DEBLOCKS        GET CIDF POINTER.\n         L     R5,BLOCKPTR        POINT TO THE START OF THE CI.\n         AH    R5,0(R2)           POINT PAST END OF CI DATA.\n         AR    R1,R0              POINT TO NEXT RECORD.\n         CR    R1,R5              END OF CONTROLINTERVAL DATA?\n         BNL   READI              YES, BRANCH.\n         ST    R1,DEBLOCKS+8      NO, SAVE NEXT RECORD POINTER.\n         L     R1,BLOCKPTR        POINT TO THE START OF THE CI.\n         SLR   R5,R5\nNEXTRDF  SH    R2,=H'3'           POINT TO \"NEXT\" RDF.\n         LA    R0,1               ASSUME ONE RECORD DESCRIBED BY IT.\n         ICM   R5,3,1(R2)         GET ITS HALFWORD COUNTER.\n         CLI   0(R2),X'40'        ASSOCIATED WITH RDF TO THE LEFT?\n         BNE   RDFLOOP            NO, THE TESTED BYTE SHOULD BE NULL.\n         SH    R2,=H'3'           POINT TO ASSOCIATED RDF.\n         ICM   R0,3,1(R2)         GET ITS HALFWORD COUNTER.\nRDFLOOP  AR    R1,R5              POINT TO NEXT RECORD.\n         C     R1,DEBLOCKS+8      PAST THE CURRENT RECORD?\n         BH    RDFEXIT            YES, NOW HAVE RECORD'S LENGTH.\n         BCT   R0,RDFLOOP         NO, KEEP GOING.\n         B     NEXTRDF            GET MORE RDF'S TO KEEP GOING.\nRDFEXIT  ST    R5,DEBLOCKS+4      SAVE THE CURRENT RECORD'S LENGTH.\nNOTSEGX  LM    R1,R2,DEBLOCKS+4   LOAD RECORD'S LENGTH AND ADDRESS.\n         SPACE\nREADX    LR    R0,R1              GET RECORD'S LENGTH.\n         LR    R1,R2              PUT RECORD ADDRESS INTO CORRECT GPR.\n         CH    R0,=H'18'          DOES RECORD HAVE VALID SMF LENGTH?\n         BNL   RECRDXIT           YES, EXIT WITH A RECORD.\n         WTO   'PRY641W  IMPGAT ENCOUNTERED RECORD TOO SHORT FOR SMF', +\n               ROUTCDE=(2,11)\n         B     ALTCHECK           SEE IF RDS IS STILL ACTIVE.\n         SPACE\nREADI    L     R2,BLOCKPTR\n         XC    DEBLOCKS(12),DEBLOCKS\n         TM    OSBITS,X'13'       MVS?\n         BO    READMVS            YES.\n         L     R5,84(,R4)         LOAD MSP USED BLOCK COUNT.\n         C     R5,CICOUNTR        READ ALL USED BLOCKS?\n         BNH   ALTCHECK           YES, SEE IF IT IS STILL ACTIVE.\n         CLI   72(R4),X'60'       STILL LOOKING AT ACTIVE RDS?\n         BNE   REREAD             NO, INDICATES NOT THE ACTIVE RDS.\n         C     R5,CICOUNTR        READ ALL USED BLOCKS?\n         BNH   ALTCHECK           YES, SEE IF IT IS STILL ACTIVE.\n         B     REREAD             NO, GO READ A BLOCK.\nREADMVS  L     R5,RDSNXTBL        GET THE NEXT FREE BLOCK NUMBER.\n         TM    OSLVL+1,X'20'      MVS/SP5 OR LATER?\n         BZ    USENXTBL           NO.\n         L     R5,RDSNXTBL+36     GET THE NEXT FREE BLOCK NUMBER.\nUSENXTBL BCTR  R5,0               GET THE USED BLOCK COUNT.\n         C     R5,CICOUNTR        READ ALL USED BLOCKS?\n         BNH   ALTCHECK           YES, SEE IF IT IS STILL ACTIVE.\n         ICM   R0,14,RDSFLAG1     ARE ANY RDS FLAGS ON?\n         BNZ   REREAD             YES, INDICATES NOT THE ACTIVE RDS.\n         BCTR  R5,0               GET THE \"WRITTEN\" BLOCK COUNT.\n         C     R5,CICOUNTR        READ ALL OF THESE BLOCKS?\n         BNH   NORECXIT           YES, SO RETURN WITHOUT A RECORD.\n         BCTR  R5,0               GET WRITTEN BLOCK COUNT MINUS ONE.\n         C     R5,CICOUNTR        JUST ONE MORE BLOCK TO READ?\n         BNE   REREAD             NO, MORE THAN ONE SO GET READING.\n         STIMER WAIT,BINTVL==F'100'   WAIT A SECOND FOR SMF TO WRITE.\nREREAD   DS    0H                 CONTINUE FETCHING BLOCKS FOR CI.\n         READ  DYNDECB,SF,,(R2),'S',MF=E\n         MVI   SYNADSW,0          RESET SYNAD FLAG.\n         CHECK DYNDECB\n         CLI   SYNADSW,X'FF'      WAS SYNAD EXIT TAKEN JUST NOW?\n         BE    ALTCHECK           YES, BRANCH.\n         ICM   R0,15,DEBLOCKS+4   NO, FIRST READ FOR THIS CI?\n         BNZ   GETNOTED           NO, SKIP NOTE MACRO.\n         NOTE  MANX               YES, GET THE BLOCK ADDRESS.\n         ST    R1,TTRZ            SAVE IT FOR LATER.\nGETNOTED LH    R1,DCBBLKSI-IHADCB+MANX\n         L     R14,DYNDECB+16\n         SH    R1,14(,R14)        SUBTRACT RESIDUAL COUNT.\n         LA    R0,0(R1,R2)        END OF BLOCK.\n         A     R1,DEBLOCKS+4      ADD PREVIOUSLY READ DATA OF THIS CI.\n         STM   R0,R2,DEBLOCKS     SAVE STATUS INFO.\n         CLM   R1,3,DCBBLKSI-IHADCB+MANX  BLOCK SHORTER THAN CI?\n         BE    VSAMCIOK           NO, PROCESS CONTROLINTERVAL.\n         BH    READEOD            NO, TOO LARGE SO SIGNAL E-O-D.\n         LR    R2,R0              POINT PAST BLOCK JUST READ.\n         B     REREAD             READ ANOTHER BLOCK FOR THIS CI.\nVSAMCIOK L     R2,BLOCKPTR        POINT TO THE CI START.\n         CLC   EOFMARK,4(R2)      DOES THIS CI HAVE SMF RECORDS?\n         BNE   REC1OKAY           YES.\n         POINT MANX,TTRZ          NO, POINT BACK TO CI JUST READ.\n         B     ALTCHECK           GO RE-VERIFY THE ENVIRONMENT.\nREC1OKAY L     R2,DEBLOCKS        POINT PAST END OF CI.\n         SH    R2,=H'4'           POINT TO CI DEFINITION FIELD.\n         ST    R2,DEBLOCKS        SAVE CIDF ADDRESS.\n         LA    R0,1\n         A     R0,CICOUNTR        INCREMENT READ CI COUNT.\n         ST    R0,CICOUNTR\n         ICM   R0,B'1111',0(R2)   NULL CIDF?\n         BZ    SOFTEOD            YES, SOFTWARE END-OF-FILE.\nVSAMRDF  SH    R2,=H'3'            POINT TO \"FIRST\" RDF.\n         MVC   DEBLOCKS+6(2),1(R2) LOAD LENGTH OF FIRST RECORD.\n         TM    0(R2),X'30'         VSAM SPANNED SEGMENT?\n         BZ    NOTSEGX             NO, EXIT NORMALLY\n*        BNZ   READVSEG            YES, HANDLE IT\n         SPACE\n*               FLAG BYTE HAS X'50' FOR FIRST SEGMENT\n*                             X'70' FOR MIDDLE SEGMENT\n*                             X'60' FOR LAST SEGMENT\nREADVSEG CLI   0(R2),X'50'        FIRST SEGMENT?\n         BNE   RDVSSEG2           NO.\n         L     R14,SPANPTR        ADDRESS TO MOVE TO.\n         LH    R15,DEBLOCKS+6     LENGTH TO MOVE.\n         LR    R1,R15             LENGTH TO MOVE.\n         ST    R1,GETWORK         SAVE LENGTH SO FAR.\n         L     R0,DEBLOCKS+8      ADDRESS TO MOVE FROM.\n         MVCL  R14,R0             MOVE VSAM RECORD SEGMENT.\n         B     READI              GET NEXT CI FOR NEXT SEGMENT.\nRDVSSEG2 L     R14,SPANPTR        ADDRESS OF FIRST SEGMENT.\n         A     R14,GETWORK        ADDRESS OF THIS SEGMENT.\n         LH    R15,DEBLOCKS+6     LENGTH TO MOVE.\n         LR    R1,R15             LENGTH TO MOVE.\n         A     R1,GETWORK         ADD PREVIOUS LENGTH.\n         ST    R1,GETWORK         SAVE LENGTH SO FAR.\n         LR    R1,R15             LENGTH TO MOVE.\n         L     R0,DEBLOCKS+8      ADDRESS TO MOVE FROM.\n         MVCL  R14,R0             MOVE SEGMENT DATA.\n         CLI   0(R2),X'60'        LAST SEGMENT?\n         BNE   READI              NO, GET NEXT CI FOR NEXT SEGMENT.\n         L     R2,SPANPTR         YES, POINT TO COMBINED RECORD.\n         L     R1,GETWORK         GET COMBINED LENGTH.\n         B     READX              EXIT.\n         SPACE\n************************************************************\n*                                                          *\n*         END-OF-FILE AND I/O ERROR HANDLING               *\n*                                                          *\n************************************************************\n         SPACE\nREADEOD  WTO   'PRY642W  IMPGAT ENCOUNTERED UNEXPECTED END-OF-FILE',   +\n               ROUTCDE=(2,11)\n         B     ALTCHECK\n         SPACE\nSOFTEOD  WTO   'PRY643W  IMPGAT ENCOUNTERED UNEXPECTED SOFTWARE END-OF-+\n               FILE',ROUTCDE=(2,11)\n         B     ALTCHECK\n         SPACE\nRDSYNAD  WTO   MF=(E,SYNADWTO)\n         B     ALTCHECK\nSYNADWTO WTO   'PRY644W  1234567890123456789012345678901234567890123456+\n               78901234567890123456789012345678 ',ROUTCDE=(2,11),MF=L\nSYNADMSG EQU   SYNADWTO+13,78\n         SPACE\nPRIMEWTO WTO   'PRY646I  ZZZ,ZZZ,ZZ9 IMPGAT PRIMING RECORDS READ',     +\n               ROUTCDE=(2,11),MF=L\nPRIMSGCT EQU   PRIMEWTO+12,12\nPRIMEMSG EQU   PRIMEWTO+4,48\n         SPACE\n************************************************************\n*                                                          *\n*         SYNAD EXIT                                       *\n*                                                          *\n************************************************************\n         SPACE\n*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO\n*        IF AN I/O ERROR OCCURS.\n         SPACE\nDYNSYNAD DS    0H\n         SYNADAF ACSMETH=BSAM\n         MVC   SYNADMSG(78),50(R1)\n         MVI   SYNADSW,X'FF'\n         SYNADRLS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         CHECK FOR AND PERFORM ACTIVE DATA SET CHANGE     *\n*                                                          *\n************************************************************\n         SPACE\nALTCHECK TM    OSBITS,X'13'       MVS?\n         BO    MVSCHECK           YES.\n         CLI   72(R4),X'60'       STILL LOOKING AT ACTIVE RDS?\n         BE    NORECXIT           YES, SO NO RECORD AT THIS TIME.\n         B     ALTCLOSE           NO, CLOSE THIS DATA SET.\nMVSCHECK L     R1,CVTPTR(,0)      POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTSMCA         POINT TO THE SMCA.\n         DROP  R1                 CVT.\n         C     R4,252(,R1)        STILL LOOKING AT ACTIVE RDS?\n         BE    NORECXIT           YES, SO NO RECORD AT THIS TIME.\nALTCLOSE CLOSE MANX               NO, SO CLOSE THIS FILE.\n         LA    R1,MANXFREE        POINT TO THE DYNALLOC PARAMETER LIST.\n         DYNALLOC                 FREE THE VSAM SMF DATA SET.\n         SLR   R0,R0\n         ST    R0,ACTIVRDS        RESET THE ACTIVE RDS POINTER.\n         ST    R0,CICOUNTR        RESET THE READ BLOCKS COUNTER.\n         B     ACTIVCHK           DETERMINE THE NEW ACTIVE RDS.\n         SPACE\n************************************************************\n*                                                          *\n*         HANDLE ALLOCATION FAILURE                        *\n*                                                          *\n************************************************************\n         SPACE\nALOCFAIL SLR   R0,R0              ALLOCATION FAILURE EXIT POINT.\n         ST    R0,ACTIVRDS        ZERO ADDRESS OF RDS BEING TRACKED.\n         MVC   ALWTODSN,DSNAMMA   LOAD DATA SET NAME INTO MESSAGE.\n         ST    R15,GETWORK\n         UNPK  ALWTORC(3),GETWORK+3(2)\n         TR    ALWTORC,GETHEX-C'0'\n         MVI   ALWTORC+2,C' '     LOAD RETURN CODE INTO MESSAGE.\n         UNPK  ALWTOERR(5),ERRORMA(3)\n         TR    ALWTOERR,GETHEX-C'0'\n         MVI   ALWTOERR+4,C' '    LOAD ERROR CODE INTO MESSAGE.\n         UNPK  ALWTOINF(5),INFOMA(3)\n         TR    ALWTOINF,GETHEX-C'0'\n         MVI   ALWTOINF+4,C' '    LOAD INFORMATION CODE INTO MESSAGE.\n         WTO   MF=(E,ALLOCWTO)    ISSUE ALLOCATION FAILURE MESSAGE.\n         SPACE\n         CLI   SUFXFLAG,0         RETRY ALLOWED?\n         BE    NORECXIT           NO, EXIT FROM SUBROUTINE.\n         XC    DATASUFX+2(3),=X'81A381'\n         B     ACTIVCHK           YES, SO RETRY WITH DIFFERENT NAME.\n         SPACE\n************************************************************\n*                                                          *\n*         RETURN WITHOUT ANY RECORD                        *\n*                                                          *\n************************************************************\n         SPACE\nNORECXIT L     R13,4(,R13)        YES, POINT TO CALLER'S SAVE AREA.\n         LM    R14,R12,12(R13)    RESTORE REGISTERS.\n         LA    R15,8              INDICATE THAT NO RECORD IS RETURNED.\n         BSM   0,R14              RETURN TO CALLER.\n         TITLE 'VARIABLES AND CONSTANTS'\nGETWORK  DC    D'0'\nGETSAVE  DC    18F'0'\nGETHEX   DC    CL16'0123456789ABCDEF'\nPRIMEMSK DC    XL12'402020206B2020206B202120'\nSPANSIZE DC    F'32768'           SIZE OF SPANNED RECORD BLOCK.\nLIDADDR  DC    A(0)               ADDRESS OF ACF2 LOGONID AREA.\nBLOCKPTR DC    A(0)               ADDRESS OF CONTROLINTERVAL BUFFER.\nSPANPTR  DC    A(0)               ADDRESS OF SPANNED RECORD BLOCK.\nCIPNTR   DC    A(0)               ADDRESS OF CONTROL INTERVAL BLOCK.\nACTIVRDS DC    A(0)               ADDRESS OF ACTIVE RECORDING DATA SET.\nPRIMECNT DC    F'0'               COUNT OF SMFPRIME RECORDS READ.\nPRIMEINT EQU   1000               INTERVAL BETWEEN RECORD COUNT MSGS.\nPRIMEDEC DC    AL4(PRIMEINT+1)    DECREMENT AND SHOW MESSAGE ON ZERO.\nCLEARINT EQU   1                  LINE COUNT BETWEEN CLEAR SCREENS.\nCLEARDEC DC    F'1'               DECREMENT AND CLEAR SCREEN ON ZERO.\nCICOUNTR DC    F'0'               COUNT OF READ BLOCKS IN ACTIVE RDS.\nTTRZ     DC    F'0'               RELATIVE ADDRESS OF LAST BLOCK READ.\nDEBLOCKS DC    3F'0'              CI DEBLOCKING STATUS SAVE AREA.\n         SPACE\nMDSTSUP0 MODESET KEY=ZERO,MODE=SUP,MF=L\nMDSTPROB MODESET KEY=NZERO,MODE=PROB,MF=L\nMDSET0   MODESET KEY=ZERO,MF=L\nMDSETN0  MODESET KEY=NZERO,MF=L\n         SPACE\nDYNREAD  READ  DYNDECB,SF,MANX,0,'S',MF=L\n         SPACE\nMANXALOC DYNALC SUFFIX=MA,DSNAME=SYS1.MANX.DATA,RETDD=YES,             +\n               STATUS=SHR\nMANXFREE DYNALC SUFFIX=MF,DEALLOC=YES,DDNAME=SMFPRIME,TYPSP=TRK\n         SPACE\nALLOCWTO WTO   'PRY645W  ALLOC FAIL RC=__ ERROR=____ INFO=____ DSN=1111+\n               1111.22222222.33333333.44444444.55555555',              +\n               ROUTCDE=(2,11),MF=L\nALWTORC  EQU   ALLOCWTO+27,2\nALWTOERR EQU   ALLOCWTO+36,4\nALWTOINF EQU   ALLOCWTO+46,4\nALWTODSN EQU   ALLOCWTO+55,44\n         SPACE\nEOFMARK  DC    C'SMFEOFMARK'      SMF EMPTY CONTROLINTERVAL MARKER.\nSYNADSW  DC    X'00'              SYNAD EXIT I/O ERROR FLAG.\nDATASUFX DC    C'.DATA'           DATA COMPONENT SUFFIX.\nSUFXFLAG DC    X'00'              SUFFIX ALLOCATION RETRY FLAG.\n         SPACE\n         DS    0F\n         SPACE\n         PRINT NOGEN\n         SPACE\nSMFPRIME DCB   DSORG=PS,MACRF=GL,DDNAME=SMFPRIME,BFTEK=A,EODAD=SMFEODAD\n         SPACE\nMANX     DCB   DSORG=PS,MACRF=RP,DDNAME=MANXFILE,BLKSIZE=4096,         +\n               EODAD=READEOD,SYNAD=DYNSYNAD\n         SPACE\n         LTORG\n         SPACE 2\n         DS    0D                 END OF CSECT.\n         COPY  IMGATCOM\n         TITLE 'DSECTS'\nRDS      DSECT\n******* START OF SPECIFICATIONS ***************************************\n***                                                                  **\n***  MACRO-NAME = IEEMBRDS                                           **\n***                                                                  **\n***  DESCRIPTIVE-NAME = SMF RECORDING DATA SET CONTROL BLOCK         **\n***                                                                  **\n***                                                                  **\n***  FUNCTION = MAPPING FOR THE RDS.  AN RDS CONTAINS THE            **\n***             DATA NECESSARY TO CONTROL AN SMF RECORDING           **\n***             DATASET.  IT INCLUDES THE VSAM ACB AND RPL AND       **\n***             OTHER FLAGS AND FIELDS DESCRIBING THE STATUS         **\n***             OF THE DATASET.                                      **\n***                                                                  **\n******* END OF SPECIFICATIONS *****************************************\nRDSID    DS    CL4           CONTROL BLOCK ID\nRDSNEXT  DS    F             FORWARD CHAIN POINTER\nRDSPREV  DS    F             BACKWARD CHAIN POINTER\nRDSFLAG1 DS    XL1           DATASET STATUS INDICATORS\n*                            XXX. ....  RESERVED\nRDSFREE  EQU   X'10'         ...1 ....  NEED TO FREE DATASET AND RDS\nRDSDUMP  EQU   X'08'         .... 1...  OPER HAS BEEN TOLD TO DUMP DS\nRDSREADY EQU   X'04'         .... .1..  DS IS OPEN AND READY TO USE\nRDSCLOSE EQU   X'02'         .... ..1.  DS NEEDS TO BE CLOSED\nRDSNDOP  EQU   X'01'         .... ...1  DS NEEDS TO BE OPENED\nRDSFLAG2 DS    XL1           DATASET STATUS INDICATORS\nRDSLOST  EQU   X'80'         1... ....  DUMMY RDS FOR LOST DATA\nRDSPHYER EQU   X'40'         .1.. ....  PHYSICAL I/O ERROR\nRDSLOGER EQU   X'20'         ..1. ....  LOGICAL I/O ERROR\n*                            ...X XXXX  RESERVED\nRDSFLAG3 DS    XL1           RESERVED\nRDSFLAG4 DS    XL1           RESERVED\nRDSNAME  DS    CL10          DATASET NAME\nRDSVOLID DS    CL6           VOLUME SERIAL\nRDSDDN   DS    CL8           DDNAME RETURNED BY DYNAMIC ALLOC\nRDSCAPTY DS    F             DATASET CAPACITY IN # OF BLOCKS\nRDSNXTBL DS    F             NUMBER OF NEXT AVAILABLE BLOCK\nRDSBQE   DS    A             ADDRESS OF BQE BEING WRITTEN\nRDSAVSPC DS    F             AVAILABLE SPACE FROM SHOWCB\nRDSENRBA DS    F             ENDRBA FROM SHOWCB\nRDSCINV  DS    F             CONTROL INTERVAL SIZE\nRDSDOMID DS    F             MSG # OF DUMP MSG\nRDSRPL   DS    CL76          VSAM RPL\nRDSACB   DS    CL76          VSAM ACB\n         SPACE 2\n         DCBD  DSORG=PS,DEVD=DA\n         SPACE 2\n         CVT   DSECT=YES\n         SPACE 2\n         IEFJESCT\n         SPACE 2\n         IEFJSCVT\n         SPACE 2\n         END   IMGATGET\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMLLAIX1": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x95#o\\x00\\x985o\\x18\\x05\\x02\\x03\\x00\\xf4\\x00q\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1995-08-24T00:00:00", "modifydate": "1998-12-22T18:05:00", "lines": 515, "newlines": 244, "modlines": 113, "user": "T$QGP75"}, "text": "IMLLAIX1 TITLE 'CSVLLIX1 - LLA FETCH INSTALLATION EXIT 1'\nIMLLAIX1 CSECT\n*/****START OF SPECIFICATIONS*****************************************\n*\n*01* MODULE-NAME: CSVLLIX1\n*\n*02*   CSECT-NAME: IMLLAIX1\n*\n*02*   LOAD-MODULE-NAME: CSVLLIX1\n*\n*01* DESCRIPTIVE-NAME: LLA FETCH INSTALLATION EXIT\n*\n*01*  STATUS: IMON FOR MVS/ESA\n*\n*01* FUNCTION:\n*\n*     FOR EACH MODULE WHICH IS FETCHED FROM A LIBRARY LOOKASIDE\n*     (LLA) MANAGED LIBRARY, LLA FETCH CALLS CSVLLIX1. CSVLLIX1\n*     BE USED TO CONTROL WHEN LLA STAGING IS TRIGGERED AND TO\n*     GATHER FETCH STATISTICS. LLA STAGING USES SAMPLES OF FETCH\n*     STATISTICS TO DECIDE WHICH MODULES TO STAGE INTO VIRTUAL\n*     STORAGE TO AVOID PROGRAM FETCH OVERHEAD.\n*\n*\n*\n*02*   OPERATION:\n*\n*      . CSVLLIX1 CAN DO ANALYSIS OF THE FETCH STATISTICS PROVIDED\n*        IN THE LLA FETCH INSTALLATION EXIT PARAMETERS (LLP1).\n*        THIS MAY INCLUDE RECORDING THEM TO A LOG FILE.\n*\n*      . CSVLLIX1 CAN DETERMINE WHETHER TO CONTROL THE TRIGGERING\n*        OF LLA STAGING AND SET THE RETURN CODE AND REASON\n*        CODE ACCORDINGLY.\n*\n*02*   RECOVERY-OPERATION:\n*\n*        IN THE EVENT OF AN ERROR, LLA FETCH'S ESTAE RECORDS\n*        DIAGNOSTIC INFORMATION IN THE SYSTEM DIAGNOSTIC WORK\n*        AREA (SDWA), RECORDS THE ERROR IN SYS1.LOGREC, AND\n*        TAKES AN SVC DUMP. LLA FETCH'S ESTAE ISSUES MESSAGE\n*        \"CSV232I LLA HAS DEACTIVATED EXIT CSVLLIX1. ABEND=SXXX\n*        U=YYY, REASON=RRRRRRRR\", DEACTIVATES CSVLLIX1, AND RETRIES\n*        TO A POINT WITHIN LLA FETCH AFTER THE CALL TO INVOKE\n*        CSVLLIX1.\n*\n*\n*01* NOTES:\n*\n*     THE LLA FETCH INSTALLATION EXIT, WHEN ACTIVE, RECEIVES\n*     CONTROL AFTER EVERY LLA MANAGED MODULE IS FETCHED - IN EVERY\n*     ADDRESS SPACE.  INSURE THAT ANY SERVICES THAT MAY BE INVOKED\n*     FROM THIS EXIT ARE AVAILABLE BEFORE INVOKING THE SERVICE.\n*\n*02*   DEPENDENCIES: NONE\n*02*   CHARACTER-CODE-DEPENDENCIES: NONE\n*02*   RESTRICTIONS:\n*\n*      CSVLLIX1 MUST RESIDE IN AN APF AUTHORIZED LIBRARY IN THE LNKLST.\n*\n*      CSVLLIX1 CANNOT (1) ISSUE OR (2) INVOKE ANY SERVICE WHICH\n*      WILL IN TURN ISSUE A LINK, LOAD, XCTL OR ATTACH MACRO THAT\n*      WOULD CAUSE A LLA MANGED MODULE TO BE FETCHED. THIS\n*      WILL RESULT IN RECURSIVE CALLS TO THE LLA FETCH\n*      INSTALLATION EXIT.\n*\n*02*   REGISTER-CONVENTIONS:\n*03*     REGISTERS-SAVED: 0-15 VIA REGISTER 13.\n*03*     REGISTERS-RESTORED: 1-14\n*03*     CODE-REGISTER : REGISTER 8.\n*03*     DATA-REGISTER : NONE\n*\n*02*   PATCH-LABEL: NONE.\n*\n*01* MODULE-TYPE: PROCEDURE\n*\n*02*   PROCESSOR: ASSEMBLER-H\n*\n*02*   MODULE-SIZE:  SEE ASSEMBLER EXTERNAL SYMBOL DICTIONARY.\n*\n*02*   ATTRIBUTES:\n*03*     LOCATION:      CSA OR ECSA\n*03*     KEY:           0\n*03*     STATE:         SUPERVISOR\n*03*     MODE:          TASK\n*04*     AMODE:         31\n*04*     RMODE:         ANY\n*04*     TYPE:          REENTRANT\n*03*     SERIALIZATION: ENABLED / UNLOCKED\n*03*     ASC MODE:      PRIMARY\n*03*     X-MEMORY MODE: HASID=PASID=SASID\n*\n*01* ENTRY-POINT: CSVLLIX1\n*\n*02*   PURPOSE: SEE \"FUNCTION\" TOPIC.\n*03*     OPERATION: SEE MAIN \"OPERATION\" TOPIC.\n*03*     ATTRIBUTES: SEE MAIN \"ATTRIBUTES\" TOPIC.\n*\n*02*   LINKAGE: BALR\n*03*     CALLERS: LLA FETCH\n*\n*03*     ENTRY-REGISTERS:\n*          REGISTER       0 - ZERO\n*          REGISTER       1 - ADDRESS OF LLA FETCH INSTALLATION\n*                             EXIT PARAMETERS (LLP1)\n*          REGISTERS   2-12 - IRRELEVANT\n*          REGISTER      13 - ADDRESS OF STANDARD 72 BYTE\n*                             SAVE AREA\n*          REGISTER      14 - RETURN ADDRESS\n*          REGISTER      15 - ENTRY ADDRESS OF CSVLLIX1\n*\n*02*   INPUT:\n*        THE LLP1 CONTAINS THE FOLLOWING INFORMATION:\n*\n*        . STATISTICAL DATA ABOUT THE FETCH WHICH JUST COMPLETED\n*          INCLUDING THE PROVIDER OF THE FETCH (LLP1PROV),\n*          THE DURATION (LLP1DUR), THE ENTRY POINTS' PDS\n*          DIRECTORY ENTRY (LLP1PDS2) AND ITS DATA SET NAME (LLP1DSN).\n*\n*        . AVERAGE REAL STORAGE UNREFERENCED INTERVAL COUNT\n*          (LLP1AVUI) AND EXPANDED STORAGE MIGRATION AGE (LLP1AVMG).\n*\n*        . A POINTER (LLP1USER) TO A 4 BYTE USER DATA AREA.\n*          THE USER DATA AREA IS INITIALLY ZERO, THEN SUBSEQUENTLY\n*          CONTAINS ANY VALUE STORED IN IT BY CSVLLIX1.\n*\n*02*   OUTPUT:\n*\n*        . A RETURN AND REASON CODE INDICATING IF LLA STAGING\n*          SHOULD OR SHOULD NOT BE TRIGGERED.\n*\n*        . UPDATED USER DATA AREA (POINTED TO BY LLP1USER).\n*\n*02*   EXIT-NORMAL: RETURNS TO THE CALLER.\n*03*     CONDITIONS: REQUESTED FUNCTION COMPLETE.\n*03*     EXIT-REGISTERS:\n*         REGISTER       0 - REASON CODE\n*         REGISTERS   1-14 - RESTORED\n*         REGISTER      15 - RETURN CODE\n*\n*03*     RETURN-CODES:\n*\n*         0 - USE THE DEFAULT THRESHOLD TO TRIGGER LLA STAGING.\n*         4 - CSVLLIX1 HAS SPECIFIED WHETHER OR NOT TO TRIGGER\n*             LLA STAGING. THE REASON CODE IN REGISTER 0\n*             SPECIFIES THE REQUIRED ACTION.\n*\n*\n*        REASON-CODES:\n*         0 - USE DEFAULT THRESHOLD TO TRIGGER LLA STAGING.\n*             (RETURN CODE 0)\n*         1 - TRIGGER LLA STAGING NOW. (RETURN CODE 4)\n*         2 - DO NOT TRIGGER LLA STAGING NOW. (RETURN CODE 4)\n*\n*         NOTE: LLA FETCH IGNORES ANY OTHER REASON CODES AND THE\n*               DEFAULT THRESHOLD IS USED TO TRIGGER LLA STAGING.\n*\n*\n*02*   EXIT-ERROR: NO EXIT ERROR CONDITIONS.\n*\n*\n*01* EXTERNAL-REFERENCES:\n*02*   ROUTINES:   NONE.\n*02*   DATA-AREAS: IMLLAREA - THE REPOSITORY DATA STRUCTURE.\n*02*   CONTROL-BLOCKS:\n*\n*    COMMON NAME/USE        MACRO ID   FULL NAME\n*    ---------------        --------   ---------\n*    LLP1       R,W         IHALLP1    LLA FETCH INSTALLATION\n*                                      EXIT PARAMETERS.\n*    ASCB       R           IHAASCB    ADDRESS SPACE CONTROL BLOCK.\n*    PSA        R           IHAPSA     PREFIXED SAVE AREA.\n*    PDS2       R           IHAPDS     PDS DIRECTORY ENTRY RETURNED\n*                                      BY BLDL IN EXIT PARAMETERS.\n*\n*    (C=CREATE, R=READ, W=WRITE, D=DELETE)\n*\n*01* TABLES: NONE.\n*\n*01* MACROS-EXECUTABLE:\n*      GETMAIN, FREEMAIN\n*\n*01* SERIALIZATION:\n*      CSVLLIX1 MUST MANAGE THE SERIALIZATION OF THE FOUR BYTE\n*      USER DATA AREA POINTED TO BY LLP1USER. COMPARE-AND-SWAP (CS)\n*      IS A POTENTIAL SERIALIZATION METHOD.\n*\n*01* MESSAGES: NONE.\n*      PRYL01W - ISSUED WHEN ECSA CANNOT CONTAIN DATA REPOSITORY AND\n*                DATA COLLECTION CAN ONLY BE RETRIED AFTER AN IPL.\n*\n*01* ABEND-CODES: NONE.\n*01* WAIT-STATE-CODES: NONE.\n*\n*01* PROGRAM TEMPLATE BY COPIED FROM SYS1.SAMPLIB(CSVLLIX1).\n*\n*****END OF SPECIFICATIONS******************************************/\n         EJECT\n***********************************************************************\n*        STANDARD ENTRY TO LLA FETCH INSTALLATION EXIT.               *\n***********************************************************************\nIMLLAIX1 AMODE 31\nIMLLAIX1 RMODE ANY\n         ENTRY CSVLLIX1\nCSVLLIX1 DS    0D                      ENTRY POINT.\n         USING IMLLAIX1,R15\n         B     IX1START                JUMP OVER EYE-CATCHER.\n         DC    AL1(59)\n         DC    CL20'IMON CSVLLIX1 MODULE'\n         DC    CL39' - (C) COPYRIGHT PRYCROFT SIX P/L 1995 '\nIMLX1PG# DC    H'64'                   PAGE COUNT OF REPOSITORY.\nIX1START DS    0H\n         STM   R14,R12,12(R13)         SAVE ENTRY REGISTERS.\n         LR    R8,R15                  INITIALIZE CODE REGISTER.\n         DROP  R15                     DROP TEMPORARY ADDRESSABILITY.\n         USING IMLLAIX1,R8             ESTABLISH R8 AS CODE REGISTER.\n         LR    R2,R1                   COPY PARAMETER POINTER.\n         USING LLP1,R2                 ADDRESSABILITY TO LLP1.\n         L     R3,LLP1USER             POINT TO REPOSITORY ADDRESS.\n         ICM   R1,15,0(R3)             LOAD REPOSITORY ADDRESS.\n         BM    EXIT                    DISABLE FUNCTION FLAG ON.\n         BP    CUMSTGOK                REPOSITORY AREA EXISTS.\n         LH    R0,IMLX1PG#             GET PAGE COUNT FOR REPOSITORY.\n         LA    R4,16                   GET MINIMUM PAGE COUNT.\n         CR    R0,R4                   VALID AMOUNT?\n         BNL   IMLLPGOK                YES.\n         LR    R0,R4                   NO, SO USE MINIMUM AMOUNT.\nIMLLPGOK SLL   R0,12                   CONVERT TO BYTES.\n         LR    R4,R0                   COPY THE SIZE REQUEST.\n         GETMAIN RC,LV=(0),LOC=(ANY),SP=241   GET REPOSITORY AREA.\n         LTR   R15,R15                 AREA SUCCESSFULLY ACQUIRED?\n         BZ    AREAINIT                YES.\nNULLAIX1 OI    0(R3),X'80'             NO, DISABLE PROCESSING.\n         WTO   MF=(E,WTOL01W)          ISSUE STATUS NOTIFICATION.\n         B     EXIT\n***********************************************************************\n*        INITIALIZE NEW AREA.                                         *\n***********************************************************************\n         USING IMLLBASE,R1\nAREAINIT LA    R1,0(,R1)               ENSURE POSITIVE ADDRESS.\n         LR    R5,R1                   COPY ADDRESS OF NEW STORAGE.\n         SRA   R5,24                   SHIFT OUT BOTTOM 24 BITS.\n         BZ    AREA2LOW                IF ZERO THEN AREA BELOW 16MB.\n         MVC   IMLLID,=C'IMONLIX1'     SET AREA IDENTIFIER.\n         ST    R4,IMLLSIZE             SAVE AREA SIZE.\n         STCK  IMLLINIT                SET AREA CREATION TIMESTAMP.\n         MVI   IMLLPGMM,C'*'           SET PGM AND JOBS MASKS TO STARS.\n         MVC   IMLLPGMM+1(15),IMLLPGMM ASSUME IMLLJOBM AFTER IMLLPGMM.\n         MVI   IMLLPGMX,C'_'           SET REJECTION MASKS TO USCORES.\n         MVC   IMLLPGMX+1(15),IMLLPGMX ASSUME IMLLJOBX AFTER IMLLPGMX.\n         LA    R5,0(R4,R1)             POINT PAST END OF AREA.\n         LA    R0,IMLLBSIZ             GET SIZE OF THE BASE SECTION.\n         STH   R0,IMLLVERS             SET VERSION PARTICULARS.\n         LA    R0,IMLLNTSZ             GET SIZE OF A PROGRAM ENTRY.\n         STH   R0,IMLLVERS+2           SET VERSION PARTICULARS.\n         SLR   R5,R0                   POINT TO AN ENTRY BEFORE END.\n         ST    R5,IMLLLAST             POINT TO LAST POSSIBLE ENTRY.\n         LA    R5,IMLLBSIZ(,R1)        POINT PAST REPOSITORY BASE.\n         ST    R5,IMLLHIGH             SAVE ADDRESS OF NEXT ENTRY.\n         CS    R15,R1,0(R3)            PUT AREA ADDR IN SUPPLIED WORD.\n         BZ    CUMSTGOK                NOW PROCESS THIS EVENT AS USUAL.\nAREA2LOW LR    R0,R4                   COPY THE SIZE OF THIS ATTEMPT.\n         FREEMAIN RU,LV=(0),A=(1),SP=241    FREE SUPERFLUOUS AREA.\n         ICM   R1,15,0(R3)             POINT TO ALREADY CREATED AREA.\n         BZ    NULLAIX1                NO AREA, DO NOTHING UNTIL REIPL.\n         BM    EXIT                    FUNCTION ALREADY DISABLED.\n***********************************************************************\n*        SEARCH FOR ENTRY FOR THIS PROGRAM.                           *\n***********************************************************************\n         USING IMLLBASE,R1\nCUMSTGOK CLC   IMLLID,=C'IMONLIX1'     FOUND CORRECT DATA REPOSITORY?\n         BNE   EXIT                    NO, CANNOT ACCUMULATE DATA.\n         LA    R7,IMLLBSIZ             GET SIZE OF THE BASE SECTION.\n         CH    R7,IMLLVERS             RIGHT AREA VERSION?\n         BNE   EXIT                    NO, CANNOT ACCUMULATE DATA.\n         LA    R7,IMLLNTSZ             GET SIZE OF A PROGRAM ENTRY.\n         CH    R7,IMLLVERS+2           RIGHT AREA VERSION?\n         BNE   EXIT                    NO, CANNOT ACCUMULATE DATA.\n         LA    R7,LLP1PDS2             POINT TO BLDL DIRECTORY ENTRY.\n         USING PDS2,R7\n         LA    R10,IMLLPGMM            POINT TO PROGRAM NAME MASK.\n         LA    R11,PDS2NAME            POINT TO ACTUAL PROGRAM NAME.\n         BAS   R14,MASKCHEK            IS THIS PROGRAM TO BE SELECTED?\n         BNE   EXIT                    NO, DISCARD EVENT.\n         LA    R10,IMLLPGMX            POINT TO PROGRAM NAME MASK.\n         LA    R11,PDS2NAME            POINT TO ACTUAL PROGRAM NAME.\n         BAS   R14,MASKCHEK            IS THIS PROGRAM TO BE EXCLUDED?\n         BE    EXIT                    YES, DISCARD EVENT.\n         USING PSA,0\n         L     R12,PSAAOLD             POINT TO THE CURRENT ASCB.\n         USING ASCB,R12\n         ICM   R9,15,ASCBJBNI          POINT TO JOB NAME.\n         BNZ   FJOBNMOK                FOUND A POINTER.\n         ICM   R9,15,ASCBJBNS          POINT TO JOB NAME.\n         BNZ   FJOBNMOK                FOUND A POINTER.\n         LA    R9,=CL8'*LOGON* '       POINT TO JOB NAME.\n         ICM   R6,15,ASCBTSB           CHECK FOR TSB.\n         BNZ   FJOBNMOK                FOUND A POINTER.\n         LA    R9,=CL8'STARTING'       POINT TO JOB NAME.\nFJOBNMOK LA    R10,IMLLJOBM            POINT TO JOB NAME MASK.\n         LR    R11,R9                  POINT TO ACTUAL JOB NAME.\n         BAS   R14,MASKCHEK            IS THIS JOB TO BE SELECTED?\n         BNE   EXIT                    NO, DISCARD EVENT.\n         LA    R10,IMLLJOBX            POINT TO JOB NAME MASK.\n         LR    R11,R9                  POINT TO ACTUAL JOB NAME.\n         BAS   R14,MASKCHEK            IS THIS JOB TO BE EXCLUDED?\n         BE    EXIT                    YES, DISCARD EVENT.\n         SLR   R14,R14                 NO, FLAG FIRST TIME THROUGH.\n         LA    R3,IMLLTABL             POINT TO CATCH-ALL ENTRY.\n         CLI   PDS2NAME,C'A'           PROGRAM 1ST BYTE LESS THAN 'A'?\n         BL    PROGLOOP                YES.\n         CLI   PDS2NAME,C'Z'           PROGRAM 1ST BYTE MORE THAN 'Z'?\n         BH    PROGLOOP                YES.\n         SLR   R5,R5\n         IC    R5,PDS2NAME             GET FIRST BYTE OF PROGRAM NAME.\n         CLI   PDS2NAME,C'I'           PROGRAM NAME BEGINS WITH 'I'?\n         BL    GETANCHR                NO, CALCULATE ANCHOR ENTRY SLOT.\n         LA    R3,42*4(,R3)            SKIP 'I' TABLE FOR 'J' AND OVER.\n         BH    GETANCHR                NO, CALCULATE ANCHOR ENTRY SLOT.\n         LA    R3,IMLLTBLI             POINT TO 'I' CATCH-ALL ENTRY.\n         CLI   PDS2NAME+1,C'A'         PROGRAM 2ND BYTE LESS THAN 'A'?\n         BL    PROGLOOP                YES.\n         CLI   PDS2NAME+1,C'Z'         PROGRAM 2ND BYTE MORE THAN 'Z'?\n         BH    PROGLOOP                YES.\n         IC    R5,PDS2NAME+1           GET SECOND BYTE OF PROGRAM NAME.\nGETANCHR LA    R0,X'C0'                GET OFFSET OFFSET.\n         SLR   R5,R0                   GET \"FALSE ZERO\" OFFSET.\n         SLL   R5,2                    MULTIPLY BY BYTES PER WORD.\n         LA    R3,0(R5,R3)             POINT TO CORRECT CHAIN ANCHOR.\n         USING IMLLNTRY,R3\nPROGLOOP LR    R4,R3                   COPY \"PREVIOUS\" ENTRY ADDRESS.\n         ICM   R3,15,IMLLNEXT          POINT TO NEXT ENTRY IN CHAIN.\n         BZ    NEWPRGRM                END OF CHAIN - HAVE NEW PROGRAM.\n         CLC   IMLLPROG,PDS2NAME       CORRECT PROGRAM NAME?\n         BL    PROGLOOP                NO, CONTINUE SCANNING CHAIN.\n         BH    NEWPRGRM                NO, CREATE A NEW PROGRAM ENTRY.\n         CLC   IMLLDSET,LLP1DSN        CORRECT DATA SET NAME?\n         BL    PROGLOOP                NO, CONTINUE SCANNING CHAIN.\n         BH    NEWPRGRM                NO, CREATE A NEW PROGRAM ENTRY.\n         CLC   IMLLSTOR,PDS2STOR       CORRECT PROGRAM SIZE?\n         BNE   PROGLOOP                NO.\n         B     ADDSTATS                YES, ACCUMULATE STATISTICS.\nNEWPRGRM LR    R0,R3                   REMEMBER NEW NEXT ENTRY ADDRESS.\n         LTR   R3,R14                  GOT A NEW SLOT YET?\n         BNZ   NEWCHAIN                YES, DON'T GET ANOTHER ONE.\n         L     R3,IMLLHIGH             NO, POINT TO NEXT FREE SLOT.\n         C     R3,IMLLLAST             IS THIS USABLE?\n         BH    EVNTLOST                NO, UPDATE LOST EVENT COUNT.\n         LA    R5,IMLLNTSZ(,R3)        POINT TO NEW NEXT FREE SLOT.\n         CS    R3,R5,IMLLHIGH          UPDATE NEXT FREE SLOT POINTER.\n         BNZ   NEWPRGRM                CHANGED - GET LATEST NEXT SLOT.\n         MVC   IMLLPROG,PDS2NAME       SUPPLY PROGRAM NAME.\n         MVC   IMLLDSET,LLP1DSN        SUPPLY DATA SET NAME.\n         MVC   IMLLSTOR,PDS2STOR       SUPPLY PROGRAM SIZE.\nNEWCHAIN ST    R0,IMLLNEXT             SUPPLY FORWARD CHAIN POINTER.\n         CS    R0,R3,0(R4)             UPDATE CHAIN POINTER.\n         BZ    PGMCHNOK                CHAIN UPDATED SUCCESSFULLY.\n         LR    R14,R3                  REMEMBER ADDRESS OF NEW SLOT.\n         LR    R3,R4                   THIS CHAIN HAS CHANGED.\n         B     PROGLOOP                FIND RIGHT SPOT IN NEW CHAIN.\nPGMCHNOK MVC   IMLFASID,ASCBASID       LOAD FIRST ASID.\n         DROP  R12                     ASCB.\n         MVC   IMLFJOBN,0(R9)          LOAD FIRST JOB NAME.\n         STCK  IMLFTIME                SAVE FIRST-USE TIMESTAMP.\n         MVC   IMLLATTR,PDS2ATR        COPY ATTRIBUTE FLAGS.\n         MVC   IMLLTTRN(3),PDS2TTRP    COPY MEMBER START TTR.\n         MVC   IMLLTTRN+3(1),PDS2INDC  COPY ALIAS FLAG AND H/W COUNT.\n         MVC   IMLLCNCT,PDS2CNCT       COPY CONCATENATION COUNT.\n         MVC   IMLLLOCN,PDS2LIBF       COPY LIBRARY FLAG FIELD.\n         MVC   IMLLATR3,PDS2FTB2       COPY AMODE/RMODE FLAGS.\n         XC    IMLLNEW0,IMLLNEW0       CLEAR RESIDUAL DATA.\n         DROP  R7                      PDS2.\n         L     R4,IMLLPGMS             GET CURRENT PROGRAM COUNT.\nPGMSLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.\n         CS    R4,R5,IMLLPGMS          SET INCREMENTED COUNT.\n         BNZ   PGMSLOOP                ENSURE COUNT GETS INCREMENTED.\n***********************************************************************\n*        UPDATE PROGRAM ENTRY STATISTICS.                             *\n***********************************************************************\nADDSTATS L     R4,PSAAOLD              POINT TO THE CURRENT ASCB.\n         DROP  0                       PSA.\n         USING ASCB,R4\n         MVC   IMLLASID,ASCBASID       LOAD LATEST ASID.\n         ICM   R5,15,ASCBJBNI          POINT TO JOB NAME.\n         BNZ   LJOBNMOK                FOUND A POINTER.\n         ICM   R5,15,ASCBJBNS          POINT TO JOB NAME.\n         BNZ   LJOBNMOK                FOUND A POINTER.\n         LA    R5,=CL8'*LOGON* '       POINT TO JOB NAME.\n         ICM   R6,15,ASCBTSB           CHECK FOR TSB.\n         BNZ   LJOBNMOK                FOUND A POINTER.\n         LA    R5,=CL8'STARTING'       POINT TO JOB NAME.\n         DROP  R4                      ASCB.\nLJOBNMOK MVC   IMLLJOBN,0(R5)          LOAD LATEST JOB NAME.\n         STCK  IMLLTIME                SAVE LATEST-USE TIMESTAMP.\n         MVC   IMLLFECH,LLP1DUR        GET DURATION OF THIS FETCH.\n         NI    IMLLFECH+7,X'FE'        ENSURE LAST BIT IS ZERO.\n         CLI   LLP1PROV,C'L'           LLA USED FOR FETCH?\n         BE    LLAFETCH                YES.\n         L     R4,IMLLPGMF             GET TOTAL DFP FETCH COUNT.\nPGMFLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.\n         CS    R4,R5,IMLLPGMF          SET INCREMENTED COUNT.\n         BNZ   PGMFLOOP                ENSURE COUNT GETS INCREMENTED.\n         L     R4,IMLPFCNT             GET CURRENT PROGRAM FETCH COUNT.\nPFCTLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.\n         CS    R4,R5,IMLPFCNT          SET INCREMENTED COUNT.\n         BNZ   PFCTLOOP                ENSURE COUNT GETS INCREMENTED.\nPFFTLOOP LM    R4,R5,IMLPFCUM          GET CURRENT DURATION TOTAL.\n         LM    R6,R7,LLP1DUR           GET DURATION OF THIS FETCH.\n         ALR   R7,R5                   GET NEW TOTAL LOW-ORDER.\n         BC    12,PFNOOFLW             NO OVERFLOW.\n         LA    R6,1(,R6)               OVERFLOW SO ADJUST HIGH-ORDER.\nPFNOOFLW ALR   R6,R4                   GET NEW TOTAL HIGH-ORDER.\n         CDS   R4,R6,IMLPFCUM          SET NEW FETCH DURATION TOTAL.\n         BNZ   PFFTLOOP                ENSURE TIME GET ACCULUATED.\n         B     EXIT                    STATISTICS NOW UPDATED.\nLLAFETCH OI    IMLLFECH+7,X'01'        FLAG THIS FETCH WAS LLA.\n         L     R4,IMLLLLAF             GET TOTAL LLA FETCH COUNT.\nLLAFLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.\n         CS    R4,R5,IMLLLLAF          SET INCREMENTED COUNT.\n         BNZ   LLAFLOOP                ENSURE COUNT GETS INCREMENTED.\n         L     R4,IMLLACNT             GET CURRENT LLA FETCH COUNT.\nLFCTLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.\n         CS    R4,R5,IMLLACNT          SET INCREMENTED COUNT.\n         BNZ   LFCTLOOP                ENSURE COUNT GETS INCREMENTED.\nLFFTLOOP LM    R4,R5,IMLLACUM          GET CURRENT DURATION TOTAL.\n         LM    R6,R7,LLP1DUR           GET DURATION OF THIS FETCH.\n         ALR   R7,R5                   GET NEW TOTAL LOW-ORDER.\n         BC    12,LFNOOFLW             NO OVERFLOW.\n         LA    R6,1(,R6)               OVERFLOW SO ADJUST HIGH-ORDER.\nLFNOOFLW ALR   R6,R4                   GET NEW TOTAL HIGH-ORDER.\n         CDS   R4,R6,IMLLACUM          SET NEW FETCH DURATION TOTAL.\n         BNZ   LFFTLOOP                ENSURE TIME GET ACCULUATED.\n         B     EXIT                    STATISTICS NOW UPDATED.\n***********************************************************************\n*        COUNT EVENTS LOST DUE TO TABLE SIZE.                         *\n***********************************************************************\nEVNTLOST CLI   LLP1PROV,C'L'           LLA USED FOR FETCH?\n         BE    LOSTLLAF                YES.\n         L     R4,IMLLOSTP             GET DFP LOST FETCH EVENT COUNT.\nLOSTPFLP LA    R5,1(,R4)               GET INCREMENTED COUNT.\n         CS    R4,R5,IMLLOSTP          SET INCREMENTED COUNT.\n         BNZ   LOSTPFLP                ENSURE COUNT GETS INCREMENTED.\n         B     EXIT                    STATISTICS NOW UPDATED.\nLOSTLLAF L     R4,IMLLOSTL             GET LLA LOST FETCH EVENT COUNT.\nLOSTLFLP LA    R5,1(,R4)               GET INCREMENTED COUNT.\n         CS    R4,R5,IMLLOSTL          SET INCREMENTED COUNT.\n         BNZ   LOSTLFLP                ENSURE COUNT GETS INCREMENTED.\n***********************************************************************\n*        STANDARD EXIT LINKAGE.                                       *\n***********************************************************************\nEXIT     LA    R15,#RCIX1_DEFAULT      INITIALIZE RETURN CODE.\n         LA    R0,#RSIX1_DEFAULT       INITIALIZE REASON CODE.\n         L     R14,12(,R13)            RESTORE THE RETURN ADDRESS.\n         LM    R1,R12,24(R13)          RESTORE OTHERS EXCEPT R15 AND R0\n         BR    R14                     RETURN TO THE CALLER.\n***********************************************************************\n*        VERIFY EVENT AGAINST SELECTION MASK                          *\n***********************************************************************\nMASKCHEK LA    R0,8                    GET CHARACTER STRING LENGTH.\nMASKLOOP CLI   0(R10),C'*'             GENERIC CHARACTER?\n         BE    MASKEQAL                YES, NO MISMATCH YET.\n         CLC   0(1,R10),0(R11)         NO, COMPARE A BYTE.\n         BNER  R14                     MISMATCH FOUND SO EXIT.\nMASKEQAL LA    R10,1(,R10)             POINT TO NEXT CHARACTER.\n         LA    R11,1(,R11)             POINT TO NEXT CHARACTER.\n         BCT   R0,MASKLOOP             GO CHECK NEXT CHARACTER, IF ANY.\n         BR    R14                     RETURN TO CALLER.\n         EJECT\n***********************************************************************\n*        CONSTANTS AND LITERALS                                       *\n***********************************************************************\nWTOL01W  WTO   'PRYL01W LLA MONITORING DISABLED UNTIL NEXT IPL - LACK O+\n               F ECSA',ROUTCDE=(2),MF=L\n         SPACE\n         LTORG\n         SPACE\n         DS    0D                      END OF CSECT.\n         EJECT\n***********************************************************************\n*        REGISTER ASSIGNMENTS                                         *\n***********************************************************************\n         SPACE\nR0       EQU   0                       WORK REGISTER.\nR1       EQU   1                       INPUT PARAMETER ADDR, AREA BASE.\nR2       EQU   2                       PARAMETER ADDRESS.\nR3       EQU   3                       PROGRAM ENTRY ADDRESS.\nR4       EQU   4                       WORK REGISTER.\nR5       EQU   5                       WORK REGISTER.\nR6       EQU   6                       WORK REGISTER.\nR7       EQU   7                       BLDL RESULTS, WORK REGISTER.\nR8       EQU   8                       CODE REGISTER.\nR9       EQU   9                       NOT USED.\nR10      EQU   10                      NOT USED.\nR11      EQU   11                      NOT USED.\nR12      EQU   12                      NOT USED.\nR13      EQU   13                      SAVE AREA ADDRESS\nR14      EQU   14                      RETURN ADDRESS, UPDATE MARKER.\nR15      EQU   15                      ENTRY POINT ADDRESS AT ENTRY,\n*                                      RETURN CODE AT EXIT.\n         EJECT\n***********************************************************************\n*        CONTROL BLOCKS AND DATA AREAS.                               *\n***********************************************************************\n         SPACE\n         IHAASCB\n         SPACE 2\n         IHALLP1\n         SPACE 2\n         IHAPDS\n         SPACE 2\n         IHAPSA\n         EJECT\n         COPY  IMLLAREA\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMLLAREA": {"ttr": 4872, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x95$\\x1f\\x00\\x97!\\x1f\\x11\\x16\\x00U\\x00?\\x00\\x1d\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1995-08-29T00:00:00", "modifydate": "1997-07-30T11:16:00", "lines": 85, "newlines": 63, "modlines": 29, "user": "T$QGP75"}, "text": "*        (C) COPYRIGHT 1995 PRYCROFT SIX PTY LTD\n         SPACE\nIMLLBASE DSECT ,                    IMLLAIX1 DATA REPOSITORY BASE.\nIMLLID   DS    CL8                  AREA ID - 'IMONLIX1'.\nIMLLINIT DS    D                    TIME STAMP OF AREA CREATION.\nIMLLSIZE DS    F                    SIZE OF THIS AREA IN BYTES.\nIMLLHIGH DS    A                    ADDRESS OF NEXT AVAILABLE ENTRY.\nIMLLLAST DS    A                    HIGHEST ENTRY ADDRESS ALLOWED.\nIMLLOSTP DS    F                    COUNT OF LOST DFP FETCHES.\nIMLLOSTL DS    F                    COUNT OF LOST LLA FETCHES.\nIMLLPGMS DS    F                    COUNT OF PROGRAMS CAPTURED.\nIMLLPGMF DS    F                    COUNT OF DFP FETCHES CAPTURED.\nIMLLLLAF DS    F                    COUNT OF LLA FETCHES CAPTURED.\nIMLLVERS DS    D                    AREA VERSION IDENTIFIER.\nIMLLPTIM DS    D                    TIME OF LAST STOP (SUSPENSION).\nIMLLSTIM DS    D                    TIME OF LAST START (RESTART).\nIMLLPUID DS    CL8                  USERID WHICH ISSUED LAST STOP.\nIMLLSUID DS    CL8                  USERID WHICH ISSUED LAST START.\nIMLLRTIM DS    D                    TIME OF LAST RESET.\nIMLLRUID DS    CL8                  USERID WHICH ISSUED LAST RESET.\nIMLLPGMM DS    CL8                  PROGRAM NAME SELECTION MASK.\nIMLLJOBM DS    CL8                  JOB NAME SELECTION MASK.\nIMLLPGMX DS    CL8                  PROGRAM NAME EXCLUSION MASK.\nIMLLJOBX DS    CL8                  JOB NAME EXCLUSION MASK.\nIMLLMTIM DS    D                    TIME OF PROGRAM NAME MASK CHANGE.\nIMLLJTIM DS    D                    TIME OF JOB NAME MASK CHANGE.\nIMLLMUID DS    CL8                  USERID WHICH CHANGED PROGRAM MASK.\nIMLLJUID DS    CL8                  USERID WHICH CHANGED JOB MASK.\nIMLLTABL DS    0F                   MAIN ENTRY INDEX TABLE ORIGIN LIST.\n         DS    10F                  ORIGIN LIST FOR $-H (I ENTRY 0).\nIMLLTBLI DS    42F                  \"I\" ENTRY INDEX TABLE ORIGIN LIST.\nIMLLTBLJ DS    32F                  ORIGIN LIST FOR J-Z.\nIMLLBSND DS    0D                   END OF REPOSITORY BASE SECTION.\nIMLLBSIZ EQU   IMLLBSND-IMLLBASE    LENGTH OF REPOSITORY BASE SECTION.\n         SPACE 2\nIMLLNTRY DSECT ,                    IMLLAIX1 REPOSITORY PROGRAM ENTRY.\nIMLLNEXT DS    A                    ADDRESS OF NEXT CHAINED ENTRY.\nIMLLDSET DS    CL44                 NAME OF PROGRAM DATA SET.\nIMLLPROG DS    CL8                  PROGRAM NAME.\nIMLLSTOR DS    XL3                  STORAGE SIZE REQUIRED BY PROGRAM.\nIMLLCNCT DS    XL1                  CONCATENATION CODE.\nIMLLLOCN DS    XL1                  LOCATION CODE (1 = LINKLIST).\nIMLLATTR DS    0XL2                 LOAD MODULE ATTRIBUTES.\nIMLLATR1 DS    XL1                  LOAD MODULE ATTRIBUTES BYTE 1.\nIMLLRENT EQU   X'80'                REENTERABLE.\nIMLLREUS EQU   X'40'                REUSABLE.\nIMLLOVLY EQU   X'20'                IN OVERLAY STRUCTURE.\nIMLLTEST EQU   X'10'                MODULE TO BE TESTED - TESTRAN.\nIMLLLOAD EQU   X'08'                ONLY LOADABLE.\nIMLLSCTR EQU   X'04'                SCATTER FORMAT.\nIMLLEXEC EQU   X'02'                EXECUTABLE.\nIMLL1BLK EQU   X'01'                ONE TEXT BLOCK WITH NO RLD ITEMS.\nIMLLATR2 DS    XL1                  LOAD MODULE ATTRIBUTES BYTE 2.\nIMLLFLVL EQU   X'80'                F-LEVEL LINKAGE EDITOR ONLY.\nIMLLORG0 EQU   X'40'                FIRST BLOCK BEGINS AT OFFSET ZERO.\nIMLLEP0  EQU   X'20'                ENTRY POINT IS AT OFFSET ZERO.\nIMLLNRLD EQU   X'10'                NO RLD ITEMS.\nIMLLNREP EQU   X'08'                CANNOT BE RE-LINK EDITED,\nIMLLTSTN EQU   X'04'                CONTAINS TESTRAN SYMBOL CARDS.\nIMLLLEVF EQU   X'02'                CREATED BY LINKAGE EDITOR F.\nIMLLREFR EQU   X'01'                REFRESHABLE.\nIMLLATR3 DS    XL1                  LOAD MODULE ATTRIBUTES BYTE 3.\nIMLLRMOD EQU   X'10'                LOAD MODULE RESIDENCE MODE.\nIMLLAANY EQU   X'0C'                ALIAS ADDRESS MODE ANY.\nIMLLAA31 EQU   X'08'                ALIAS ADDRESS MODE 31.\nIMLLAA24 EQU   X'04'                ALIAS ADDRESS MODE 24.\nIMLLMANY EQU   X'03'                MAIN ADDRESS MODE ANY.\nIMLLMA31 EQU   X'02'                MAIN ADDRESS MODE 31.\nIMLLMA24 EQU   X'01'                MAIN ADDRESS MODE 24.\nIMLFTIME DS    D                    FIRST PROGRAM FETCH T-O-D (STCK).\nIMLLTIME DS    D                    LAST PROGRAM FETCH T-O-D (STCK).\nIMLLNEW0 EQU   *,24                 AREA TO BE ZEROED FOR NEW ENTRY.\nIMLPFCUM DS    D                    PROGRAM FETCH TIME ACCUMULATOR.\nIMLLACUM DS    D                    LOOKASIDE FETCH TIME ACCUMULATOR.\nIMLPFCNT DS    F                    PROGRAM FETCH COUNT.\nIMLLACNT DS    F                    LOOKASIDE FETCH COUNT.\nIMLFJOBN DS    CL8                  FIRST PROGRAM FETCH JOB NAME.\nIMLLJOBN DS    CL8                  LAST PROGRAM FETCH JOB NAME.\nIMLFASID DS    XL2                  FIRST PROGRAM FETCH ASID.\nIMLLASID DS    XL2                  LAST PROGRAM FETCH ASID.\nIMLLTTRN DS    XL4                  TTR + ALIAS FLAG + USER H/W COUNT.\nIMLLFECH DS    D                    LAST FETCH TIME.\n*                         LAST BIT: 0=DFP FETCH.  1=LLA FETCH.\nIMLLNTND DS    0D                   END OF REPOSITORY ENTRY SECTION.\nIMLLNTSZ EQU   IMLLNTND-IMLLNTRY    LENGTH OF REPOSITORY ENTRY SECTION.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMON": {"ttr": 4875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x96\"\\x1f\\x00\\x96\"\\x1f\\x152\\x00\\x05\\x00\\x05\\x00\\x00\\xc9`\\xd4\\xd6\\xd5@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-08-08T00:00:00", "modifydate": "1996-08-08T15:32:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "I-MON"}, "text": "//IEFPROC EXEC PGM=IM,TIME=1440,REGION=6M\n//*\n//*  ISSUE START IMON.DEV# TO USE IMON ON 3270 AT ADDRESS DEV#.\n//*  THE 3270 TERMINAL MUST BE ONLINE BUT NOT ALLOCATED.\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMONCNTL": {"ttr": 4877, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00B\\x01 $o\\x01 $o\\x18U\\x02\\x0e\\x02\\x0e\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-09-02T00:00:00", "modifydate": "2020-09-02T18:55:42", "lines": 526, "newlines": 526, "modlines": 0, "user": "JCL"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "IMONJOB": {"ttr": 5129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x030O\\x01\\x030O\\x16B\\x00\\x0b\\x00\\x0c\\x00\\x00\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-10-31T00:00:00", "modifydate": "2003-10-31T16:42:00", "lines": 11, "newlines": 12, "modlines": 0, "user": "UBQ001"}, "text": "//UBQ001I  JOB (),G.PRICE,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             REGION=6M,NOTIFY=UBQ001\n//STEP1   EXEC PGM=IM\n//STEPLIB  DD  DSN=UBQ001.I390.LOAD,DISP=SHR\n//IMPLOG   DD  SYSOUT=*\n//IMREPORT DD  SYSOUT=*,RECFM=VB,LRECL=255\n//IEFRDER  DD  *\nVV\n!\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMONTEXT": {"ttr": 5131, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x96\\x07/\\x00\\x98\\x03\\x0f\\x16\\x08\\x00?\\x001\\x00\\x00\\xc9`\\xd4\\xd6\\xd5@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1996-03-12T00:00:00", "modifydate": "1998-01-30T16:08:00", "lines": 63, "newlines": 49, "modlines": 0, "user": "I-MON"}, "text": "\n\n  HERE IS A FILE CONTAINING I-MON.\n\n\n  BINARY TRANSFER IT TO YOUR MVS SYSTEM.\n\n  USE THE TSO/E RECEIVE COMMAND WITH INDATASET OPERAND\n  TO PRODUCE A LOAD LIBRARY FROM THIS FILE.\n\n  APPLY YOUR SITE'S CUSTOMIZATION ZAPS (IF ANY)\n  TO CONTROL ACCESS TO OPTIONS AND FEATURES.\n\n\n\n  CALL THE IM LOAD MODULE FROM TSO AND VERIFY BASIC FUNCTIONALITY.\n\n  COPY THE LOAD MODULES TO THE APPROPRIATE LOCATION(S).\n\n\n\n  INCLUDED MODULES ARE\n\n CSVLLIX1 - LLA EXIT 1.  REQUIRED FOR OPTION \"BF\".\n            ONLY USED BY LLA IF IN THE LINKLIST WHEN LLA STARTS.\n            AT HEX OFFSET 40 IS A HALFWORD CONTAINING THE 4K PAGE\n            COUNT USED FOR THE FIXED-LENGTH PROGRAM TABLE IN ECSA.\n            YOU MAY ZAP THIS TO CHANGE IT FOR YOUR SITE.  DEFAULT=64.\n IM       - MAIN TSO COMMAND AND 3270 EXCP STARTED TASK PROGRAM.\n            REQUIRED FOR ALL DISPLAYS.\n IMP$CODE - CONTAINS THE PRODUCT AUTHORIZATION CODE FOR YOUR SITE.\n IMDATGAT - PROGRAM FOR IMPGAT STARTED TASK AND TSO SMFPRIME PROCESSING.\n            REQUIRED FOR OPTION \"K\".\n IMPXAGLS - HELP PANEL MODULE.  REQUIRED FOR PF1/13 OR ? PROCESSING.\n IMPXASPY - CONSOLE DISPLAY PROGRAM.\n            REQUIRED FOR OPTION \"O\" OTHER THAN \"OT\".\n IMSPACER - DISK FREE SPACE MONITOR STARTED TASK PROGRAM.\n            REQUIRED FOR OPTION \"$\".\n\n\n  EXAMPLES OF TSO COMMANDS TO INVOKE IMON:\n\n IM                            DISPLAY MAIN (\"PRIMARY\") MENU\n IM ?5                         DISPLAY TERMINAL \"TEST PATTERN\"\n IM ?6                         DISPLAY TERMINAL CHARACTER SET(S)\n IM ABJO                       DISPLAY ALL BATCH JOBS\n IM ATO                        DISPLAY ALL TSO USERS\n IM D                          DISPLAY ALL DASD DEVICES\n IM DT                         DISPLAY ALL DASD AND TAPE DEVICES\n IM DDT                        DISPLAY ALL TAPE DEVICES\n IM DPTI                       DISPLAY ALL PAGING DISKS AND TAPES IN USE\n IM DVTSO                      DISPLAY DASD VOLUMES BEGINNING WITH 'TSO'\n IM DDTV*0                     DISPLAY TAPE VOLUMES WITH '0' IN 2ND CHAR\n IM ED                         DISPLAY ALL HARDWARE RESERVES\n IM EW                         DISPLAY ENQUEUE CONFLICTS\n IM JRJ=                       DISPLAY YOUR ASID AND SHOW RBS\n IM JLJJES2                    DISPLAY THE JES2 ASID WITH LLES\n IM JAPGJDFHSM                 DISPLAY ALL DISPLAYABLE DATA FROM THE\n                                 DFHSM ADDRESS SPACE EXCEPT REGISTERS\n IM VBCVT                      DISPLAY THE CVT STORAGE CONTENTS\n IM VB5000                     DISPLAY DATA FROM STORAGE ADDRESS 5000.\n IM Z                          CLEAR THE SCREEN AND TERMINATE\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCM$": {"ttr": 5133, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x0c\\x00\\x00\\x00\\x89\\x04O\\x01\\x05\\x02o#)\\x04\\x16\\x018\\x00\\xbd\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "43.12", "flags": 0, "createdate": "1989-02-13T00:00:00", "modifydate": "2005-01-26T23:29:00", "lines": 1046, "newlines": 312, "modlines": 189, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1989  PRYCROFT SIX PTY LTD\n         TITLE 'DISK SPACE SNAP-SHOT TABLE'\n         COPY  IMSPDSST\n         TITLE 'DISK SPACE STATUS DISPLAY SUBROUTINE'\n&IMPSECT CSECT\n         USING DSK$PACE,R11,R10\nDSK$PACE DS    0H\n         LA    R10,2048(,R11)    INITIALIZE SECOND\n         LA    R10,2048(,R10)                      BASE REGISTER.\n         AIF   (&MSPMON).$INIT\n         XC    SECTIOWA,SECTIOWA CLEAR A WORK AREA.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   $NOSERV1          NO, USE IEFEB4UV.\n         CLI   $UNITNAM,C' '     ANY UNIT NAME SPECIFIED?\n         BNH   $UNIT1OK          NO.\n         LA    R4,32             YES.\n         SLL   R4,10             GET 32K.\n         LR    R0,R4             SET GETMAIN AMOUNT.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(ANY)\n         ST    R1,SECTIOWA       SAVE DEVICE NUMBER LIST ADDRESS.\n         ST    R4,0(,R1)         SAVE DEVICE NUMBER LIST SIZE.\n         EDTINFO RTNDEVN,        REQUEST DEVICE NUMBER LIST            +\n               UNITNAME=$UNITNAM,        FOR THIS UNIT.                +\n               DYNAMIC=YES,                                            +\n               DEVNLIST=SECTIOWA,                                      +\n               RANGE=ALL,                                              +\n               LOC=ANY,                                                +\n               MF=S\n         LTR   R15,R15           UCB LIST SUCCESSFULLY SUPPLIED?\n         BZ    $UNIT1OK          YES.\n         B     $NOUNIT1          NO, ZERO THE UNIT NAME.\n$NOSERV1 LA    R4,SECTIOWA+16    POINT TO AREA FOR FUNCTION FLAGS.\n         USING FUNCFLGS,R4\n         MVI   FUNCFLG1,RETNUCBS REQUEST RETURN OF UCB ADDRESS.\n         MVI   FUNCFLG2,SPECSUBP SUBPOOL WILL BE SPECFIED.\n         ST    R4,SECTIOWA+4     SAVE SECOND PARAMETER IN PLIST.\n         OI    SECTIOWA+4,X'80'  IT IS ALSO THE LAST PARAMETER.\n         DROP  R4                FUNCFLGS.\n         LA    R4,SECTIOWA+32    POINT TO AREA FOR UNIT TABLE.\n         USING UNITTAB,R4\n         MVC   UNITNM,$UNITNAM   INITIALIZE UNIT NAME.\n         MVI   UNSUBPL+1,SUBPOOL SUPPLY SUBPOOL TO BE USED.\n         MVI   UNDEVCL,UCB3DACC  LIMIT SEARCH TO DASD DEVICE CLASS.\n         ST    R4,SECTIOWA       SAVE FIRST PARAMETER IN PLIST.\n         CLI   UNITNM,C' '       ANY UNIT NAME SPECIFIED?\n         BNH   $UNIT1OK          NO.\n         LA    R1,SECTIOWA       YES, POINT TO PARAMETER LIST.\n         LINK  EPLOC=EB4UVNAM    INVOKE IEFEB4UV FOR UCB ADDRESS LIST.\n         LTR   R15,R15           UCB LIST SUCCESSFULLY SUPPLIED?\n         BZ    $UNIT1OK          YES.\n         XC    UNITNM,UNITNM     NO, ZERO THE UNIT NAME.\n$NOUNIT1 XC    $UNITNAM,$UNITNAM\n         DROP  R4                UNITTAB.\n.$INIT   ANOP\n$UNIT1OK L     R15,PRNTADDR      GET ADDRESSABILITY TO TRANSLATE TABLE.\n         USING SCRNPRNT,R15\n         MVI   PRTXLATE+4,C'.'   MONOCHROME REPLACEMENT CHR FOR GREEN.\n         MVI   PRTXLATE+6,C'_'   MONOCHROME REPLACEMENT CHR FOR YELLOW.\n         OI    MODESW2,CLNF      FLAG CLEANUP REQUIRED UPON EXIT.\n         DROP  R15               SCRNPRNT.\n         LA    R2,BUFFER         RESET BUFFER POINTER.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '      ADJUST ANY COMMAND INPUT.\n         SLR   R5,R5             INDICATE RESTART REQUIRED.\n         B     CMDSCAN$          PROCESS INITIAL SUBCOMMAND.\n         SPACE\nNOL$PACE DS    0H                SHOW MESSAGE WHY NO DATA IS AVAILABLE.\n         MVC   0(LL-79,R2),HIGHX\n         MVI   LL-79(R2),C' '    BLANK DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-70(20,R2),=CL22'DATA NOT DISPLAYED -'\n         SLL   R3,5              MULTPLY BY 32 FOR INDEX INTO MESSAGES.\n         LA    R1,$PACERRS(R3)   POINT TO APPROPRIATE MESSAGE.\n         MVC   LL-49(32,R2),0(R1) LOAD MESSAGE.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         SLR   R0,R0\n         ST    R0,$PCDSPST       ZERO ANY REMEMBERED DSST ADDRESS.\n         B     $XMUNDUN          GO SHOW IT.\n         SPACE\n         AIF   (&MSPMON).REDO$\n$ALLUNIT XC    $UNITNAM,$UNITNAM RESET ANY SPECIFIED UNIT NAME.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   REDO$PAC          NO.\n         ICM   R1,15,SECTIOWA    POINT TO DEVICE NUMBER LIST AREA.\n         BZ    REDO$PAC          THERE IS NONE TO FREE.\n         L     R0,0(,R1)         GET ITS SIZE.\n         LA    R15,SUBPOOL       GET THE SUBPOOL.\n         FREEMAIN RU,LV=(0),A=(1),SP=(15)\n         ST    R15,SECTIOWA      CLEAR DEVICE NUMBER LIST POINTER.\n.REDO$   ANOP\nREDO$PAC MVC   HEADING,HEADING$  LOAD FREE SPACE DISPLAY HEADING.\n         AIF   (&MSPMON).$REDO\n         CLI   $STORNAM,C' '     ANY SMS STORAGE GROUP SELECTION?\n         BNH   $SGHDGOK          NO.\n         MVC   HEADING+39(13),=C'(SG=********)'\n         LH    R1,$PRFXLEN       GET THE LENGTH OF THE GROUP PREFIX.\n         BCTR  R1,0              LESS ONE FOR EXECUTE.\n$GETSHDG MVC   HEADING+43(0),$STORNAM\n         EX    R1,$GETSHDG       LOAD THE GROUP PREFIX INTO HEADING.\n$SGHDGOK L     R4,SECTIOWA       POINT TO THE UNIT TABLE.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   $NOSERV2          NO.\n         SLR   R8,R8             YES, RESET LIST POINTER.\n         CLI   $UNITNAM,C' '     ANY UNIT NAME SPECIFIED?\n         BNH   $HDGUOK           NO, NO UNIT TO PUT IN HEADING.\n         L     R0,4(,R4)         YES, GET SUPPLIED DEVICE NUMBER COUNT.\n         L     R8,8(,R4)         POINT TO THE FIRST DEVICE NUMBER.\n         B     $UHDGNUM          SHOW THE NUMBER OF DEVICES IN UNIT.\n         USING UNITTAB,R4\n$NOSERV2 ICM   R8,15,UNUCBL4P    POINT TO THE UCB LIST.\n         BZ    $HDGUOK           NO LIST SO UNIT PART OF HEADING IS OK.\n         DROP  R4                UNITTAB.\n         USING UCBLIST4,R8\n         L     R0,LIST4NUM       GET THE NUMBER OF SUPPLIED UCBS.\n$UHDGNUM CVD   R0,WORK\n         MVC   HEADING+26(6),ED5\n         ED    HEADING+26(6),WORK+5\n         MVC   HEADING+38(8),=CL8'IN UNIT='\n         MVC   HEADING+46(8),$UNITNAM\n         AGO   .$REDONE\n.$REDO   ANOP\n         L     R15,=A(UPRFXLEN)  GET ADDRESSABAILITY TO SELUCBID.\n         USING UPRFXLEN,R15\n         CLI   SELUCBID,C' '     ANY UCB NAME MASKING?\n         BNH   $HDGUOK           NO.\n         MVC   HEADING+38(R11),=CL11'IN UNIT=***'\n         LH    R1,UPRFXLEN       GET THE LENGTH OF THE UCB NAME PREFIX.\n         BCTR  R1,0              LESS ONE FOR EXECUTE.\n$GETUHDG MVC   HEADING+46(0),SELUCBID\n         EX    R1,$GETUHDG       LOAD THE UCB NAME PREFIX INTO HEADING.\n         DROP  R15               UPRFXLEN.\n.$REDONE ANOP\n$HDGUOK  L     R15,=A(VPRFXLEN)  GET ADDRESSABAILITY TO SELVOLID.\n         USING VPRFXLEN,R15\n         CLI   SELVOLID,C' '     ANY VOLUME SERIAL MASKING?\n         BNH   $HDGVOK           NO.\n         MVC   HEADING+54(16),=CL16'(VOL=SER=******)'\n         LH    R1,VPRFXLEN       GET THE LENGTH OF THE VOLUME PREFIX.\n         BCTR  R1,0              LESS ONE FOR EXECUTE.\n$GETVHDG MVC   HEADING+63(0),SELVOLID\n         EX    R1,$GETVHDG       LOAD THE VOLUME PREFIX INTO HEADING.\n         DROP  R15               VPRFXLEN.\n$HDGVOK  TR    HEADING,XLATETBL HANDLE UNPRINTABLES.\n         SLR   R0,R0\n         ST    R0,GQ$TOKEN       ZERO THE GQSCAN TOKEN.\n         SLR   R3,R3             PREPARE FOR MESSAGE 0.\n         LA    R5,SECWORKA       GET A GQSCAN WORK AREA.\n         GQSCAN AREA=((5),512),SCOPE=SYSTEM,                           +\n               RESNAME=(IMPMAJNM,IMPMINNM,IMINORLN,SPECIFIC,8),        +\n               TOKEN=GQ$TOKEN\n         LTR   R15,R15           FOUND AN ENQUEUE?\n         BZ    $FINDGAT          YES, GO LOOK AT IT.\n         CHI   R15,8             WAS AREA FILLED WITH TOO MUCH DATA?\n         BNE   NOL$PACE          NO, THE SPACE MONITOR IS DOWN.\n         GQSCAN QUIT=YES,TOKEN=GQ$TOKEN YES, SO QUIT THE GQSCAN FIRST.\n         SPACE\n$FINDGAT DS    0H                GO FIND THE SPACE MONITOR ASID.\n         LA    R1,SECWORKA       POINT TO RIB.\n         USING RIB,R1\n         SLR   R4,R4\n         ICM   R4,3,RIBVLEN      GET LENGTH OF RIBVAR.\n         SRL   R0,16             GET LENGTH OF FIXED RIB PORTION.\n         ALR   R4,R0             GET OFFSET TO FIRST RIBE.\n         ALR   R4,R1             POINT TO FIRST RIBE.\n         DROP  R1                RIB.\n         USING RIBE,R4\n         SLR   R1,R1\n         ICM   R1,3,RIBEASID     LOAD THE SPACE MONITOR ASID.\n         C     R1,$GATASID       IS IT STILL THE SAME ADDRESS SPACE?\n         BE    $GATASOK          YES, PROCEED.\n         XC    $TATADRS($TATADLN),$TATADRS  RESET CURRENT STATUS AREA.\n         ST    R1,$GATASID       SAVE THE ASID FOR LATER.\n$GATASOK SLL   R1,2              MULTIPLY ASID BY FOUR FOR INDEX.\n         A     R1,ASVTADDR\n         AIF   (&MVSMON).$OSASID\n         AIF   (&XATEST).$OSASID\n         ICM   R1,B'1111',0(R1)  LOAD SPACE MONITOR ASCB POINTER.\n         BNM   NOL$PACE          THE ADDRESS SPACE IS NOT ASSIGNED.\n         AGO   .$F4ASID\n.$OSASID ANOP\n         ICM   R1,15,524(R1)     LOAD SPACE MONITOR ASCB POINTER.\n         BM    NOL$PACE          THE ADDRESS SPACE IS NOT ASSIGNED.\n.$F4ASID ANOP\n         MVC   $GTCBADR,RIBETCB  SAVE THE SPACE MONITOR TCB ADDRESS.\n         DROP  R4                RIBE.\n         SPACE\n         AIF   (&MSPMON).$XAI\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BNO   $AXSTUFF          NO, CAN'T USE ACCESS REGISTERS.\n         L     R5,$PACALET       YES, LOAD THE PREVIOUS ALET VALUE.\n         L     R1,336(,R1)       POINT TO THE SPACE MONITOR ASSB.\n         CLC   DG$TOKEN,48(R1)   SAME SPACE TOKEN AS BEFORE?\n         BNE   $GETSTKN          NO, GO GET THE NEW ONE.\n         LTR   R5,R5             YES, STILL HAVE THE CURRENT ALET?\n         BNZ   $GOTALET          YES, PROCEED.\n$GETSTKN MVC   DG$TOKEN,48(R1)   NO, COPY SPACE MONITOR SPACE TOKEN.\n         MODESET MF=(E,MDSTSUP0)\n         LTR   R5,R5             OUT-OF-DATE ALET STILL IN DU-AL?\n         BZ    $DGDELOK          NO, VALID ALET CANNOT BE ZERO.\n         ALESERV DELETE,ALET=(5),CHKEAX=NO,MF=(E,ALESERVL)\n         SLR   R5,R5             ALET NOW DELETED.\n         ST    R5,$PACALET       ZERO THE REMEMBERED ALET VALUE.\n         XC    $TATADRS($TATADLN),$TATADRS  RESET CURRENT STATUS AREA.\n$DGDELOK DS    0H\n         ALESERV ADD,STOKEN=DG$TOKEN,ALET=(5),CHKEAX=NO,               +\n               MF=(E,ALESERVL)   ADD ALET TO DU-AL.\n         LR    R3,R15            SAVE THE RETURN CODE.\n         MODESET MF=(E,MDSTPROB)\n         LTR   R3,R3             WAS THE ADD SUCCESSFUL?\n         BZ    $DGADDOK          YES, PROCEED.\n         XC    DG$TOKEN,DG$TOKEN  NO, ERASE REMEMBERED STOKEN VALUE.\n         NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.\n         ST    R3,WORK\n         UNPK  $BADMSG1+27(3),WORK+3(2)\n         TR    $BADMSG1+27(2),HEX-C'0'\n         MVI   $BADMSG1+29,C' '  DISPLAY THE RETURN CODE.\n         LA    R3,1              PREPARE FOR MESSAGE 1.\n         B     NOL$PACE\n$DGADDOK ST    R5,$PACALET       SAVE THE ALET.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n$GOTALET DS    0H                CROSS-MEMORY ACCESS NOW ESTABLISHED.\n         SAR   A4,R5             AR 4 WILL ACCESS IMSPACER.\n         SAR   A5,R5             AR 5 WILL ACCESS IMSPACER.\n         SAR   A6,R5             AR 6 WILL ACCESS IMSPACER.\n         SAC   X'200'            GET INTO ACCESS REGISTER MODE.\n         B     $GETEPAD          CROSS-MEMORY ACCESS NOW ESTABLISHED.\n         SPACE\n$AXSTUFF DS    0H                ESTABLISH XA CROSS-MEMORY ACCESS.\n.$XAI    ANOP\n         MODESET MF=(E,MDSTSUP0)\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\n         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.\n         LA    R1,1              ADDRESS ALL AX NUMBER.\n         AXSET AX=(1)            SET AX = 1.\n         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.\n         L     R4,$GATASID       GET TARGET ASID.\n         SSAR  R4                MAKE TARGET JOB THE SECONDARY ASID.\n*        B     $GETEPAD          XA CROSS-MEMORY ACCESS ESTABLISHED OK.\n         SPACE\n$GETEPAD ICM   R4,15,$BASEADR    GET FIRST AND LAST POINTERS ADDRESS.\n         BNZ   $GOTBASE          PROCEED.\n         L     R4,$GTCBADR       POINT TO THE SPACE MONITOR TCB.\n         LA    R0,4              FIRST 4 BYTES OF R4->TCB POINTS TO RB.\n         BAS   R14,R4ACCES$\n         L     R4,0(,R4)         POINT TO THE TOP RB.\n         LA    R0,32             GET FIRST 32 BYTES OF R4->RB.\n$GRBLOOP LR    R5,R4             COPY THE RB ADDRESS.\n         BAS   R14,R4ACCES$\n         ICM   R4,7,29(R4)       POINT TO NEXT RB.\n         C     R4,$GTCBADR       IS THIS THE TCB ADDRESS?\n         BNE   $GRBLOOP          NO, FOLLOW CHAIN TO ORIGINAL RB.\n         LA    R0,16             YES, GET FIRST 16 BYTES OF R5->RB.\n         BAS   R14,R5ACCES$\n         L     R4,12(,R5)        POINT TO THE ORIGINAL CDE.\n         SLL   R4,8\n         SRL   R4,8              ENSURE 24-BIT ADDRESS.\n         LA    R0,20             GET FIRST 20 BYTES OF R4->CDE.\n         BAS   R14,R4ACCES$\n         L     R4,16(,R4)        POINT TO IMSPACER ENTRY POINT.\n$GOTDGEP LA    R4,52(,R4)        POINT TO FIRST AND LAST DSST POINTERS.\n         ST    R4,$BASEADR       SAVE ADDRESS OF DSST POINTERS.\n$GOTBASE LA    R0,8              SET LENGTH OF TWO POINTERS.\n         BAS   R14,R4ACCES$      RETRIEVE FIRST AND LAST POINTERS.\n         ICM   R5,15,$PCDSPST    POINT TO FIRST SNAP-SHOT TO DISPLAY.\n         BZ    $SHOWTOP          IF ZERO THEN SHOW FROM THE TOP.\n         USING DSST,R5\n         LA    R0,DSSTBLEN\n         BAS   R14,R5ACCES$\n         CLI   $SCRLAMT,X'7F'    BOTTOM REQUESTED?\n         BE    $SHOWBTM          YES, DIRECTLY ACCESS THE BOTTOM.\n         ICM   R1,15,$SCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.\n         BZ    FRSTDSST          ZERO SO START FORMATTING.\n         BP    $FORWDLP          POSITIVE SO SCROLL FORWARD.\n         LPR   R1,R1             NEGATIVE SO GET COUNT TO SCROLL BACK.\n$BAKWDLP ICM   R5,15,DSSTBACK    POINT TO THE PREVIOUS SNAP-SHOT.\n         BZ    $SHOWTOP          BACKWARD CHAIN END SO SHOW FROM TOP.\n         ST    R5,$PCDSPST       THIS MAY BE THE NEW TOP OF SCREEN.\n         LA    R0,DSSTBLEN\n         BAS   R14,R5ACCES$\n         BCT   R1,$BAKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     FRSTDSST          NOW AT THE CORRECT LOCATION.\n$SHOWBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.\n         L     R5,4(,R4)         POINT TO THE LAST SNAP-SHOT.\n         LA    R0,DSSTBLEN\n         BAS   R14,R5ACCES$\n         L     R1,LINES          GET THE SCREEN LINE COUNT.\n         AHI   R1,-4             GET THE SCROLL UP VALUE.\n         B     $BAKWDLP          GO DO IT.\n$FORWDLP ICM   R5,15,DSSTDSST    POINT TO THE NEXT SNAP-SHOT.\n         BZ    $SHOWTOP          HANDLE END OF CHAIN IF ENCOUNTERED.\n         ST    R5,$PCDSPST       THIS MAY BE THE NEW TOP OF SCREEN.\n         LA    R0,DSSTBLEN\n         BAS   R14,R5ACCES$\n         BCT   R1,$FORWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     FRSTDSST          GET FORMATTING.\n$SHOWTOP CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?\n         BE    $SHOWBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.\n         L     R5,0(,R4)         POINT TO THE FIRST DSNAME SNAP-SHOT.\n         ST    R5,$PCDSPST       THIS IS THE NEW TOP OF SCREEN.\n         SLR   R1,R1\n         SPACE\nFRSTDSST DS    0H                SUPPLY A SUB-HEADING TO LABEL COLUMNS.\n         ST    R1,$SCRLAMT       RESET PREVIOUS SCROLL AMOUNT.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),SUBHDG$$\n         TM    $FLAGS,$GRAFON    IS GRAPHIC DISPLAY MODE ACTIVE?\n         BZ    $SBHDGOK          NO, CONTINUE WITH \"NORMAL\" DISPLAY.\n         MVC   LL-79(79,R2),SUBHDGG$ YES, LOAD APPROPRIATE SUB-HEADING.\n$SBHDGOK TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R5,$PCDSPST       POINT TO FIRST ENTRY TO DISPLAY.\nTHISDSST LTR   R5,R5             ANY DATA TO SHOW?\n         BZ    DONE$PAC          NO.\n         MVC   0(LL-79,R2),LOWX  YES, INITIALIZE DISPLAY LINE.\n         MVI   $PACLINE,C' '\n         MVC   $PACLINE+1(78),$PACLINE\n         SLR   R0,R0\n         BCTR  R0,0              MAKE REGISTER 0 NEGATIVE.\n         BAS   R14,R5ACCES$      RETRIEVE DISK SPACE SNAP-SHOT TABLE.\n         TM    $FLAGS,$DATEFMT   NO, USING YYMMDD DATE FORMAT?\n         BO    $DATEYMD          YES.\n         UNPK  $DATE+1(5),DSSTDATE+1(3)\n         MVC   $DATE(2),$DATE+1\n         MVI   $DATE+2,C'.'      DISPLAY DATE IN YY.DDD FORMAT.\n         B     $DTFMTOK\n$DATEYMD L     R1,DSSTDATE       GET THE JULIAN DATE.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7            CONVERT THE JULIAN DATE.\n         MVC   $DATE(2),WORK     LOAD YY\n         MVC   $DATE+2(2),WORK+3 AND MM\n         MVC   $DATE+4(2),WORK+6 AND DD.\n$DTFMTOK UNPK  $TIME,DSSTTIME(3)\n         ICM   R0,3,$TIME+2\n         STCM  R0,3,$TIME+3      MOVE MINUTES TO RIGHT SPOT.\n         MVI   $TIME+2,C':'      DISPLAY TIME IN HH:MM FORMAT.\n         XC    $CNTRS($CTLN),$CNTRS     ZERO DSSTE ACCUMULATORS.\n         L     R14,DSSTSIZE      GET ENTIRE DSSTSIZE.\n         AHI   R14,-DSSTBLEN     GET SIZE OF ALL DSST ENTRIES.\n         BNP   EODSSTES          MUST BE ALL UNSUPPORTED DEVICE TYPES.\n         SPACE\n         LA    R6,DSSTE          POINT TO THE FIRST DSSTE.\n         USING DSSTE,R6\nGOTDSSTE CLI   DSSTEVOL,0        ANY DATA IN THIS DSSTE?\n         BE    NXTDSSTE          NO, GO GET NEXT ONE.\n         L     R3,DSSTEUCB       YES, GET UCB NAME OR ADDRESS.\n         AIF   (&MSPMON).$MSPU\n         TM    OSLEVEL,X'88'     UCB SERVICES AVAILABLE?\n         BNO   $NOSERV3          NO.\n         ICM   R1,15,SECTIOWA    YES, POINT TO DEVICE LIST AREA.\n         BZ    $GOODUCB          NO LIST, DON'T REJECT THE UCB HERE.\n         ICM   R0,15,4(R1)       GET THE NUMBER OF UCBS IN LIST.\n         BZ    NXTDSSTE          THERE ARE NONE SO REJECT THE VOLUME.\n         LA    R1,8(,R1)         POINT TO FIRST DEVICE NUMBER IN LIST.\n         B     $UCBLOOP          SEARCH FOR THIS DEVICE IN THE LIST.\n$NOSERV3 LTR   R8,R8             ANY UCB LIST CHECKING REQUIRED?\n         BZ    $GOODUCB          NO, DON'T REJECT THE UCB HERE.\n         ICM   R0,15,LIST4NUM    YES, GET THE NUMBER OF UCBS IN LIST.\n         BZ    NXTDSSTE          THERE ARE NONE SO REJECT THE VOLUME.\n         LA    R1,LIST4UCB       POINT TO THE UCB ADDRESS LIST.\n$UCBLOOP CL    R3,0(,R1)         MATCHING UCB ADDRESS?\n         BE    $GOODUCB          YES, PROCESS IT.\n         LA    R1,4(,R1)         NO, POINT TO THE NEXT ADDRESS.\n         BCT   R0,$UCBLOOP       CHECK OUT THE NEXT UCB ADDRESS.\n         B     NXTDSSTE          UCB ADDRESS NOT IN LIST SO REJECT IT.\n         DROP  R8                UCBLIST4.\n         AGO   .$GDUCB\n.$MSPU   ANOP\n         L     R7,=A(UPRFXLEN)   YES, GET ADDRESSABILITY TO SELUCBID.\n         USING UPRFXLEN,R7\n         CLI   SELUCBID,C' '     ANY UCB NAME MASKING?\n         BNH   $GOODUCB          NO.\n         LH    R1,UPRFXLEN       GET THE LENGTH OF THE UCB NAME PREFIX.\n         LA    R15,SELUCBID      POINT TO DESIRED PREFIX.\n         MVC   LL-70(3,R2),13(R3) COPY UCB NAME TO WORK AREA.\n         LA    R0,LL-70(,R2)     POINT TO UCB NAME.\n         DROP  R7                UPRFXLEN.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE UCB NAME WITH PREFIX.\n         BNE   NXTDSSTE          DIDN'T MATCH SO GET NEXT ONE.\n.$GDUCB  ANOP\n$GOODUCB L     R7,=A(VPRFXLEN)   YES, GET ADDRESSABILITY TO SELVOLID.\n         USING VPRFXLEN,R7\n         CLI   SELVOLID,C' '     ANY VOLUME SERIAL MASKING?\n         BNH   $GOODVOL          NO.\n         LH    R1,VPRFXLEN       GET THE LENGTH OF THE VOLUME PREFIX.\n         LA    R15,SELVOLID      POINT TO DESIRED PREFIX.\n         MVC   LL-70(6,R2),DSSTEVOL    COPY VOLUME SERIAL TO WORK AREA.\n         LA    R0,LL-70(,R2)     POINT TO DISK VOLUME SERIAL.\n         DROP  R7                VPRFXLEN.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE VOLUME SERIAL WITH PREFIX.\n         BNE   NXTDSSTE          DIDN'T MATCH SO GET NEXT ONE.\n$GOODVOL DS    0H\n         AIF   (&MSPMON).$GDGRP\n         CLI   $STORNAM,C' '     ANY STORAGE GROUP NAME MASKING?\n         BNH   $GOODGRP          NO.\n         LH    R1,$PRFXLEN       GET THE LENGTH OF THE GROUP PREFIX.\n         LA    R15,$STORNAM      POINT TO DESIRED PREFIX.\n         MVC   LL-70(8,R2),DSSTEGRP    COPY STORAGE GROUP TO WORK AREA.\n         LA    R0,LL-70(,R2)     POINT TO DISK STORAGE GROUP.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE VOLUME SERIAL WITH PREFIX.\n         BNE   NXTDSSTE          DIDN'T MATCH SO GET NEXT ONE.\n$GOODGRP DS    0H\n.$GDGRP  ANOP\n         LA    R0,1              INCREMENT THE USABLE VOLUME COUNTER.\n         A     R0,GOODVOLS\n         ST    R0,GOODVOLS\n         SLR   R0,R0\n         ICM   R0,3,DSSTETSZ     GET THE TRACK SIZE.\n         SRL   R0,11             TRUNCATE TO 2K BOUNDARY.\n         SLL   R0,1              CONVERT TO KILOBYTES.\n         STH   R0,WORK           SAVE FOR LATER.\n         L     R15,DSSTECYL      GET FREE CYLINDERS FOR THIS VOLUME.\n         LR    R0,15             COPY IT.\n         A     R0,FREECYLS\n         ST    R0,FREECYLS       ADD IT TO TOTAL FREE CYLINDERS.\n         MH    R15,DSSTETPC      CONVERT IT TO TRACKS.\n         L     R0,DSSTETRK       GET FREE TRACKS FOR THIS VOLUME.\n         AR    R15,R0            GET TOTAL FREE TRACKS FOR THIS VOLUME.\n         A     R0,FREETRKS\n         ST    R0,FREETRKS       TOTAL UP ACROSS VOLUMES.\n         MH    R15,WORK          CONVERT FREE TRACKS TO KILOBYTES.\n         SRL   R15,10            CONVERT FROM KILOBYTES TO MEGABYTES.\n         A     R15,FREEMEGS\n         ST    R15,FREEMEGS      TOTAL UP FREE MB ACROSS VOLUMES.\n         L     R0,DSSTEEXT       GET FREE EXTENTS FOR THIS VOLUME.\n         A     R0,FREEEXTS\n         ST    R0,FREEEXTS       TOTAL UP FREE EXTENTS ACROSS VOLUMES.\n         L     R15,DSSTEMXC      GET BIGGEST FREE EXTENT CYLINDERS.\n         LR    R0,R15            COPY IT.\n         A     R0,LARGCYLS\n         ST    R0,LARGCYLS       TOTAL UP ACROSS VOLUMES.\n         MH    R15,DSSTETPC      CONVERT IT TO TRACKS.\n         L     R0,DSSTEMXT       GET BIGGEST FREE EXTENT TRACKS.\n         AR    R15,R0            GET CONTIG FREE TRACKS FOR THIS DISK.\n         A     R0,LARGTRKS\n         ST    R0,LARGTRKS       TOTAL UP ACROSS VOLUMES.\n         MH    R15,WORK          CONVERT FREE TRACKS TO KILOBYTES.\n         SRL   R15,10            CONVERT FROM KILOBYTES TO MEGABYTES.\n         A     R15,LARGMEGS\n         ST    R15,LARGMEGS      TOTAL UP CONTIG MB ACROSS VOLUMES.\n         SLR   R0,R0\n         ICM   R0,3,DSSTEUSE     GET VOLUME USAGE COUNT.\n         A     R0,ALLDDSCT\n         ST    R0,ALLDDSCT       TOTAL UP ACROSS VOLUMES.\n         AIF   (&MVSMON).$MVSOPN\n         ICM   R0,3,DSSTEOPN     GET VOLUME OPEN DCB COUNT.\n         AGO   .$OPENOK\n.$MVSOPN ANOP\n         SLR   R0,R0\n         IC    R0,DSSTEOPN       GET VOLUME OPEN DCB COUNT.\n.$OPENOK ANOP\n         A     R0,OPNDCBCT\n         ST    R0,OPNDCBCT       TOTAL UP ACROSS VOLUMES.\n         SLR   R15,R15\n         ICM   R15,3,DSSTECPV    GET THE VOLUME NUMBER OF CYLINDERS.\n         MH    R15,DSSTETPC      GET THE VOLUME NUMBER OF TRACKS.\n         MH    R15,WORK          GET THE KILOBYTES PER VOLUME.\n         SRL   R15,10            CONVERT FROM KILOBYTES TO MEGABYTES.\n         A     R15,TOTALMEG\n         ST    R15,TOTALMEG      TOTAL UP USABLE MB ACROSS VOLUMES.\nNXTDSSTE LA    R0,DSSTELEN       GET THE LENGTH OF A DSSTE.\n         ALR   R6,R0             POINT TO THE NEXT DSSTE.\n         SR    R14,R0            DECREMENT REMAINING STORAGE TO VIEW.\n         BP    GOTDSSTE          IF NOT LAST THEN CRUNCH NEXT DSSTE.\n         DROP  R6                DSSTE.\n         SPACE\nEODSSTES SLR   R1,R1             CATER FOR NO SPACE.\n         ICM   R15,15,TOTALMEG   GET TOTAL DASD STORAGE MEGABYTES.\n         BZ    NO$PRCNT          ZERO SO 0% AND AVOID S0C9 ABEND.\n         L     R1,FREEMEGS       FORMAT AND DISPLAY FREE MEGABYTES.\n         CVD   R1,WORK\n         MVC   $FREEMEG,ED9Z\n         ED    $FREEMEG,WORK+3\n         M     R0,AHUNDRED       TIMES ONE HUNDRED FOR PERCENTAGE.\n         DR    R0,R15            FREE SPACE AS PERCENTAGE OF TOTAL.\n         CVD   R1,WORK\n         MVC   $FREEPCT,ED3Z\n         ED    $FREEPCT,WORK+6\nNO$PRCNT L     R0,ALLDDSCT       FORMAT AND SHOW ALLOCATED FILE COUNT.\n         CVD   R0,WORK\n         MVC   $DDUSAGE,ED7Z\n         ED    $DDUSAGE,WORK+4\n         L     R0,OPNDCBCT       FORMAT AND SHOW OPEN DCB COUNT.\n         CVD   R0,WORK\n         MVC   $DCBOPEN,ED5Z\n         ED    $DCBOPEN,WORK+5\n         TM    $FLAGS,$GRAFON    IS GRAPHIC DISPLAY MODE ACTIVE?\n         BZ    $NOGRAFX          NO, CONTINUE WITH \"NORMAL\" DISPLAY.\n         MVC   $FREECYL(4),$FREEPCT SHOW PERCENT IN A DIFFERENT COLUMN.\n         TR    LL-79(79,2),XLATETBL\n         MVI   $FREECYL+4,X'3B'  PUT A BORDER BETWEEN COLUMN AND GRAPH.\n         MVI   $FREECYL+5,X'07'  WHITE FOR NO DASD EXIST.\n         LTR   R15,R15           ANY SPACE TO REPORT ON?\n         BZ    $GRFBKGD          NO, FILL IN BACKGROUND.\n         MVI   $FREECYL+5,X'02'  RED FOR USED DISK SPACE.\n$GRFBKGD MVC   $FREECYL+6(49),$FREECYL+5\n         LA    R1,1(,R1)         ROUND UPWARDS.\n         SRA   R1,R1             DIVIDE BY TWO.\n         BZ    $DONEGRF          NO FREE SPACE WORTH MENTIONING.\n         MVI   $FREECYL+5,X'06'  YELLOW FOR FREE DISK SPACE.\n         BCTR  R1,0              DECREMENT FOR BYTE ALREADY SUPPLIED.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         LTR   R1,R1             MORE THAN ONE SCREEN BYTE REQUIRED?\n         BM    PLOTDFRE          NO, SHOW LARGEST CONTIGUOUS PERCENT.\n         EX    R1,$GRFFREE       YES, SUPPLY THE REST.\nPLOTDFRE L     R1,LARGMEGS       FORMAT AND DISPLAY LARGEST FREE MEGS.\n         M     R0,AHUNDRED       TIMES ONE HUNDRED FOR PERCENTAGE.\n         DR    R0,R15            FREE SPACE AS PERCENTAGE OF TOTAL.\n         CVD   R1,WORK\n         LA    R1,1(,R1)         ROUND UPWARDS.\n         SRA   R1,1              DIVIDE BY TWO.\n         BZ    $DONEGRF          NO LARGE FREE SPACE WORTH MENTIONING.\n         MVI   $FREECYL+5,X'04'  GREEN FOR LARGEST FREE DISK SPACE.\n         BCTR  R1,0              DECREMENT FOR BYTE ALREADY SUPPLIED.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         LTR   R1,R1             MORE THAN ONE SCREEN BYTE REQUIRED?\n         BM    $DONEGRF          NO, GRAPH NOW COMPLETE.\n         EX    R1,$GRFFREE       YES, SUPPLY THE REST.\n         B     $DONEGRF          GRAPH NOW COMPLETE.\n$GRFFREE MVC   $FREECYL+6(0),$FREECYL+5         <<< EXECUTED >>>\n$NOGRAFX L     R0,FREECYLS       FORMAT AND SHOW FREE CYLINDER COUNT.\n         CVD   R0,WORK\n         MVC   $FREECYL,ED7Z\n         ED    $FREECYL,WORK+4\n         L     R0,FREETRKS       FORMAT AND SHOW FREE TRACK COUNT.\n         CVD   R0,WORK\n         MVC   $FREETRK,ED9Z\n         ED    $FREETRK,WORK+3\n         L     R0,FREEEXTS       FORMAT AND SHOW FREE EXTENT COUNT.\n         CVD   R0,WORK\n         MVC   $FREEEXT,ED5Z\n         ED    $FREEEXT,WORK+5\n         L     R0,LARGCYLS       FORMAT AND SHOW LARGEST CYL COUNT.\n         CVD   R0,WORK\n         MVC   $LARGCYL,ED7Z\n         ED    $LARGCYL,WORK+4\n         L     R0,LARGTRKS       FORMAT AND SHOW LARGEST TRACK COUNT.\n         CVD   R0,WORK\n         MVC   $LARGTRK,ED5Z\n         ED    $LARGTRK,WORK+5\n         TR    LL-79(79,R2),XLATETBL\n         MVI   $FREEMEG,X'3B'    INDICATE COLUMNS.\n         MVI   $FREEPCT,X'3B'\n         MVI   $FREEEXT,X'3B'\n         MVI   $FILLER,X'3B'\n         MVI   $DDUSAGE,X'3B'\n$DONEGRF MVI   $DCBOPEN,X'3B'\n         MVI   $FREECYL,X'3B'\n         MVC   LL-79(79,R2),$PACLINE PUT DETAIL LINE IN SCREEN BUFFER.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         C     R2,PAGEND         SCREEN NOW FULL?\n         BNL   DONE$PAC          YES, SHOW IT.\n         L     R5,DSSTDSST       NO, POINT TO THE NEXT DSST.\n         B     THISDSST          PROCESS THE NEW DSST.\nDONE$PAC DS    0H\n         AIF   (&MSPMON).$XAUN\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BNO   $XAUNDO           NO, CAN'T USE ACCESS REGISTERS.\n         SAC   X'000'            REVERT TO PRIMARY SPACE MODE.\n         XC    WORK(16),WORK     GET SOME NULLS.\n         LAM   A4,A6,WORK        ZERO ACCESS REGISTERS.\n         B     $XMUNDUN          ESA CROSS-MEMORY ACCESS NOW REMOVED.\n         SPACE\n.$XAUN   ANOP\n$XAUNDO  L     R8,PSAAOLD        GET CURRENT ASCB.\n         LH    R8,ASID(,R8)      GET CURRENT ASID.\n         SSAR  R8                GET OUT OF CROSS-MEMORY MODE.\n         L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\n         STATUS RESET,MC,STEP    START ALL OTHER TASKS.\n         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\n         MODESET MF=(E,MDSTPROB)\n$XMUNDUN C     R2,PAGEND         SCREEN NOW FULL?\n         BNL   PUT$PACE          YES, SHOW IT.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         C     R2,PAGEND         BUFFER FULL?\n         BNL   PUT$PACE          YES, SHOW THE PAGE.\n         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.\n         LA    R2,4(,R2)         ADJUST SCREEN SIZE.\nPUT$PACE L     R0,GOODVOLS       LOAD NUMBER OF VOLUMES COUNTED.\n         CVD   R0,WORK           FORMAT AND DISPLAY IT IN THE HEADING.\n         MVC   HEADING+17(6),ED5\n         ED    HEADING+17(6),WORK+5\n         TR    HEADING,XLATETBL  REMOVE ANY UNPRINTABLES.\n         L     R9,CCTADDR        GET CCT ADDRESS.\n         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.\n         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.\n         LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         LR    R0,R2             POINT TO END OF SCREEN BUFFER.\n         SR    R0,R1             GET SCREEN BUFFER LENGTH.\nPUTSCRN$ BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         LA    R2,BUFFER         RESET BUFFER POINTER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    $PACAUTO          YES.\n         TM    MODESW2,XFLG      NO, SUBROUTINE EXIT REQUIRED?\n         BZ    GETCMD$$          NO, PROCESS SUBCOMMAND.\n$CLEANUP DS    0H                YES, PERFORM CLEAN-UP.\n         AIF   (&MSPMON).$CLNUP\n         TM    OSLEVEL,X'88'     UCB SERVICES AVAILABLE?\n         BNO   $NOSERV4          NO.\n         ICM   R1,15,SECTIOWA    POINT TO DEVICE NUMBER LIST AREA.\n         BZ    UNITBCLN          THERE IS NONE TO FREE.\n         L     R0,0(,R1)         GET ITS SIZE.\n         LA    R15,SUBPOOL       GET THE SUBPOOL.\n         B     $CLEANFM          GO FREE THE AREA.\n$NOSERV4 L     R4,SECTIOWA       POINT TO UNIT TABLE.\n         USING UNITTAB,R4\n         ICM   R1,15,UNUCBL4P    POINT TO CURRENT UCB LIST.\n         BZ    UNITBCLN          THERE IS NONE TO FREE.\n         USING UCBLIST4,R1\n         SLR   R0,R0\n         ICM   R0,7,LIST4SIZ     GET THE SIZE OF THE AREA.\n         IC    R15,LIST4SP       GET THE SUBPOOL.\n         DROP  R1,R4             UCBLIST4, UNITTAB.\n$CLEANFM FREEMAIN RU,LV=(0),A=(1),SP=(15)\nUNITBCLN DS    0H\n.$CLNUP  ANOP\n         ICM   R0,15,SIZEDSST    ANY DSST COPY AREA TO FREE?\n         BZ    XADSSTOK          NO.\n         L     R1,AREADSST       YES, POINT TO THE AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         XC    SIZEDSST(8),SIZEDSST  CLEAR OLD DATA.\nXADSSTOK L     R15,PRNTADDR      GET ADDRESSABILITY TO TRANSLATE TABLE.\n         USING SCRNPRNT,R15\n         MVI   PRTXLATE+4,X'50'  RESTORE OLD CHARACTERS FOR MONOCHROME\n         MVI   PRTXLATE+6,X'7C'  SUBSTITUTION OF GREEN AND YELLOW.\n         DROP  R15               SCRNPRNT.\n         AIF   (&MSPMON).$CLNOK\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BNOR  R9                NO, NO ALET TO CLEAN UP.\n         ICM   R5,15,$PACALET    GET THE ALET TO DELETE.\n         BZR   R9                ZERO SO NO ALET TO DELETE.\n         MODESET MF=(E,MDSTSUP0)\n         ALESERV DELETE,ALET=(5),CHKEAX=NO,MF=(E,ALESERVL)\n         ST    R15,$PACALET      ZERO THE REMEMBERED ALET VALUE.\n         MODESET MF=(E,MDSTPROB)\n.$CLNOK  ANOP\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nGETCMD$$ CLI   INBUFF,1          PF1/13?\n         BE    GIVEHLP$          YES, HELP.\n         CLI   INBUFF,5          PF5/17?\n         BE    $PACGRAF          YES, TOGGLE GRAPHIC MODE.\n         CLI   INBUFF,7          PF7/19?\n         BE    $PACPFUP          YES, SCROLL UP.\n         CLI   INBUFF,8          PF8/20?\n         BE    $PACPFDN          YES, SCROLL DOWN.\nCMDSCAN$ CLI   INCHARS,C'-'      SCROLL UP REQUESTED?\n         BE    $PACUP            YES.\n         CLI   INCHARS,C'+'      SCROLL DOWN REQUESTED?\n         BE    $PACDOWN          YES.\n         CLI   INCHARS,C'B'      BOTTOM REQUESTED?\n         BE    $PACDOWN          YES.\n         CLI   INCHARS,C'T'      TOP REQUESTED?\n         BE    $PACUP            YES.\n         CLI   INCHARS,C'U'      REQUEST FOR NEW UNIT NAME?\n         BE    $PCNAME           YES.\n         CLI   INCHARS,C'V'      REQUEST FOR VOLUME PREFIX?\n         BE    $PACEVOL          YES.\n         AIF   (&MSPMON).$NOSG\n         CLI   INCHARS,C'S'      REQUEST FOR STORAGE GROUP PREFIX?\n         BE    $PACEGRP          YES.\n.$NOSG   ANOP\n         CLI   INCHARS,C'G'      TOGGLE GRAPHIC MODE?\n         BE    $PACGRAF          YES.\n         CLI   INCHARS,C'D'      DATE FORMAT TOGGLE REQUEST?\n         BE    $CHGDATE          YES.\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    REDO$PAC          YES.\n         B     GIVEHLP$          NO, SHOW HELP PANEL.\n$PACPFDN ICM   R1,15,SCRLAMT     ANY SCROLL AMOUNT SPECIFIED?\n         BNZ   $PACDNOK          YES, USE IT.\n$PACDOWN MVI   INBUFF,8          REMEMBER 'DOWN' EXPLICITLY REQUESTED.\n         CLI   INCHARS,C'M'      SCROLL DOWN MAXIMUM REQUESTED?\n         BE    $PACDNMX          YES, GO DO IT.\n         CLI   INCHARS,C'B'      BOTTOM REQUESTED?\n         BE    $PACDNMX          YES, GO DO IT.\n         CLI   INCHARS,C'+'      PLUS SUBCOMMAND?\n         BNE   $PACDNPG          NO, SCROLL DOWN A PAGE.\n         CLI   INCHARS+1,C'M'    YES, SCROLL DOWN MAXIMUM REQUEST?\n         BE    $PACDNMX          YES, GO DO IT.\n         CLI   INCHARS+1,C'0'    NO, NUMERIC OPERAND?\n         BL    $PACDNPG          NO, SO SCROLL DOWN A PAGE.\n         MVC   $SCRLAMT+3(1),INCHARS+1\n         NI    $SCRLAMT+3,X'0F'  YES, SAVE THE NUMBER FOR DISPLAY TIME.\n         B     REDO$PAC          GO CONSTRUCT A NEW SCREEN IMAGE.\n$PACDNMX MVI   $SCRLAMT,X'7F'    SCROLL DOWN AS FAR AS POSSIBLE.\n         B     REDO$PAC          GO CONSTRUCT A NEW SCREEN IMAGE.\n$PACAUTO MVI   INBUFF,8          REMEMBER 'DOWN' EXPLICITLY REQUESTED.\n$PACDNPG L     R1,LINES          GET LINES PER SCREEN.\n         BCTR  R1,0\n         BCTR  R1,0              GET DETAIL LINES TO SCROLL.\n$PACDNOK ST    R1,$SCRLAMT       SAVE FOR FOR DISPLAY TIME.\n         B     REDO$PAC          GO CONSTRUCT A NEW SCREEN IMAGE.\n$PACPFUP ICM   R1,15,SCRLAMT     ANY SCROLL AMOUNT SPECIFIED?\n         BNZ   $PACUPOK          YES, USE IT.\n$PACUP   CLI   INCHARS,C'M'      SCROLL UP MAXIMUM REQUESTED?\n         BE    $PACUPMX          YES, GO DO IT.\n         CLI   INCHARS,C'T'      TOP REQUESTED?\n         BE    $PACUPMX          YES, GO DO IT.\n         CLI   INCHARS,C'-'      MINUS SUBCOMMAND?\n         BNE   $PACUPPG          NO, SCROLL UP A PAGE.\n         CLI   INCHARS+1,C'M'    YES, SCROLL UP MAXIMUM REQUEST?\n         BE    $PACUPMX          YES, GO DO IT.\n         CLI   INCHARS+1,C'0'    NO, NUMERIC OPERAND?\n         BL    $PACUPPG          NO, SO SCROLL UP A PAGE.\n         MVC   $SCRLAMT+3(1),INCHARS+1\n         NI    $SCRLAMT+3,X'0F'  YES, GET THE NUMBER.\n         L     R1,$SCRLAMT       GET THE REQUESTED SCROLL AMOUNT.\n         B     $PACUPOK          GO PREPARE FOR SCROLL UP.\n$PACUPMX SLR   R0,R0             CAUSE TOP TO BE DIRECTLY ACCESSED.\n         ST    R0,$PCDSPST       ZERO TOP-OF-SCREEN DSST ADDRESS.\n         B     REDO$PAC          GO CONSTRUCT A NEW SCREEN IMAGE.\n$PACUPPG L     R1,LINES          GET LINES PER SCREEN.\n         BCTR  R1,0\n         BCTR  R1,0              GET DETAIL LINES TO SCROLL.\n$PACUPOK LNR   R1,R1             MAKE IT NEGATIVE FOR UP.\n         ST    R1,$SCRLAMT       SAVE FOR FOR DISPLAY TIME.\n         B     REDO$PAC          GO CONSTRUCT A NEW SCREEN IMAGE.\n         AIF   (&MSPMON).$XANAME\n$PACEGRP SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NO$PCGRP          YES, DO IT.\n$GETSGRP LA    R1,$STORNMP\n         LA    R0,$STORLEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    $CLEANUP          YES, CLEANUP AND EXIT.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    $GETSGRP          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   $STORNAM,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNO$PCGRP STH   R1,$PRFXLEN       STORE PREFIX LENGTH.\n         XC    $STORNAM,$STORNAM ERASE PREVIOUS STORAGEEGROUP.NAME.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         LTR   R1,R1             ANY PREFIX SUPPLIED?\n         BM    REDO$PAC          NO.\n         EX    R1,LODGRPNM       EXTRACT SPECIFIED PREFIX.\n         B     REDO$PAC          SHOW SAME TIMESPAN FOR NEW GROUP MASK.\nLODGRPNM MVC   $STORNAM(0),INCHARS              <<< EXECUTED >>>\n$PCNAME  TM    OSLEVEL,X'88'     UCB SERVICES AVAILABLE?\n         BO    ISNOUCBL          YES, DO NOT FREE UCB ADDRESS LIST.\n         L     R4,SECTIOWA       POINT TO UNIT TABLE.\n         USING UNITTAB,R4\n         ICM   R1,15,UNUCBL4P    POINT TO CURRENT UCB LIST.\n         BZ    ISNOUCBL          THERE IS NONE.\n         USING UCBLIST4,R1\n         SLR   R0,R0\n         ICM   R0,7,LIST4SIZ     GET THE SIZE OF THE AREA.\n         IC    R15,LIST4SP       GET THE SUBPOOL.\n         DROP  R1                UCBLIST4.\n         FREEMAIN RU,LV=(0),A=(1),SP=(15)\n         XC    UNUCBL4P,UNUCBL4P ERASE PREVIOUS UCB LIST POINTER.\n         MVC   UNITNM,BLANKS     CLEAR UNIT NAME.\nISNOUCBL CLI   INCHARS+1,C'/'    REMOVE UNIT RESTRICTION REQUEST?\n         BE    $ALLUNIT          YES, RESTRICT ONLY BY VOLUME PREFIX.\n$GETUNIT MVI   $UNITNMP,X'C1'    NO, RESET WCC FOR PROMPT.\n         LA    R0,$UNITLEN\n$PCNAMEX LA    R1,$UNITNMP       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    $CLEANUP          YES, CLEANUP AND EXIT.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    $GETUNIT          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   $UNITNAM,INCHARS  EXTRACT SPECIFIED ENTRY NAME.\n         CLC   $UNITNAM,BLANKS   NULL NAME?\n         BE    $ALLUNIT          YES, RESTRICT ONLY BY VOLUME PREFIX.\n         TM    OSLEVEL,X'88'     UCB SERVICES AVAILABLE?\n         BNO   $NOSERV5          NO.\n         ICM   R0,15,SECTIOWA    YES, HAS LIST AREA BEEN GETMAINED?\n         BNZ   $EDTINFO          YES.\n         LA    R4,32             NO.\n         SLL   R4,10             GET 32K.\n         LR    R0,R4             SET GETMAIN AMOUNT.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(ANY)\n         ST    R1,SECTIOWA       SAVE DEVICE NUMBER LIST ADDRESS.\n         ST    R4,0(,R1)         SAVE DEVICE NUMBER LIST SIZE.\n$EDTINFO EDTINFO RTNDEVN,        REQUEST DEVICE NUMBER LIST            +\n               UNITNAME=$UNITNAM,        FOR THIS UNIT.                +\n               DYNAMIC=YES,                                            +\n               DEVNLIST=SECTIOWA,                                      +\n               RANGE=ALL,                                              +\n               LOC=ANY,                                                +\n               MF=S\n         B     $CHKUNIT          CHECK SUCCESS.\n$NOSERV5 MVC   UNITNM,$UNITNAM   INITIALIZE UNIT NAME.\n         LA    R1,SECTIOWA       NO, POINT TO PARAMETER LIST.\n         LINK  EPLOC=EB4UVNAM    INVOKE IEFEB4UV FOR UCB ADDRESS LIST.\n$CHKUNIT MVI   $UNITNMP,X'C5'    PREPARE WCC FOR ERROR RE-PROMPT.\n         LA    R0,$UNITLNX       PREPARE FOR ERROR.\n         LTR   R15,R15           UCB LIST SUCCESSFULLY SUPPLIED?\n         BNZ   $PCNAMEX          NO, UNIT NAME NOT IN THE EDT.\n         B     REDO$PAC          SHOW SAME TIMESPAN FOR NEW UNIT NAME.\n         DROP  R4,R5             UNITTAB, DSST.\n         AGO   .$NAMEOK\n.$XANAME ANOP\n$PCNAME  L     R7,=A(UPRFXLEN)   GET ADDRESSABAILITY TO SELUCBID.\n         USING UPRFXLEN,R7\n         XC    SELUCBID,SELUCBID ERASE PREVIOUS UCB NAME.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NO$PCUCB          YES, DO IT.\n$GETUCBN LA    R1,UPRFXMSG\n         LA    R0,SELUCLEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    $CLEANUP          YES, CLEANUP AND EXIT.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    $GETUCBN          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   SELUCBID,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNO$PCUCB STH   R1,UPRFXLEN       STORE PREFIX LENGTH.\n         B     REDO$PAC          SHOW SAME TIMESPAN FOR NEW UCBID MASK.\n         DROP  R7                UPRFXLEN.\n.$NAMEOK ANOP\n$PACEVOL L     R7,=A(VPRFXLEN)   GET ADDRESSABAILITY TO SELVOLID.\n         USING VPRFXLEN,R7\n         XC    SELVOLID,SELVOLID ERASE PREVIOUS VOLID.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NO$PCVOL          YES, DO IT.\n$GETVLSR LA    R1,VPRFXMSG\n         LA    R0,SELVOLEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    $CLEANUP          YES, CLEANUP AND EXIT.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    $GETVLSR          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   SELVOLID,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNO$PCVOL STH   R1,VPRFXLEN       STORE PREFIX LENGTH.\n         B     REDO$PAC          SHOW SAME TIMESPAN FOR NEW VOLID MASK.\n         DROP  R7                VPRFXLEN.\n$PACGRAF XI    $FLAGS,$GRAFON    TOGGLE GRAPHIC MODE.\n         B     REDO$PAC          SHOW NEW DISPLAY MODE FOR SAME DATA.\n$CHGDATE XI    $FLAGS,$DATEFMT   TOGGLE YY.DDD/YYMMDD DATE FORMATS.\n         B     REDO$PAC          SHOW NEW DATE FORMAT FOR SAME DATA.\nGIVEHLP$ MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     PUTSCRN$          GO DISPLAY HELP PANEL.\n         SPACE 2\nR4ACCES$ DS    0H                MAKE GPR 4 ADDRESS RELEVANT DATA.\n         AIF   (&MSPMON).$R4AX\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BOR   R14               YES, USING ACCESS REGISTERS.\n.$R4AX   ANOP\n         STM   R14,R12,12(R13)   SAVE REGISTERS.\n         LA    R3,X'80'          USE STORAGE KEY EIGHT.\n         LR    R8,R0             GET THE LENGTH OF DATA TO FETCH.\n         LA    R7,SECTCT         POINT TO THE TARGET AREA.\n         XC    0(256,R7),0(R7)   RESET RESIDUAL DATA.\n         MVCP  0(R8,R7),0(R4),R3 FETCH THE DATA.\n         LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         LA    R4,SECTCT         POINT TO THE FETCHED DATA.\n         BR    R14\n         SPACE\nR5ACCES$ DS    0H                MAKE GPR 5 ADDRESS RELEVANT DATA.\n         AIF   (&MSPMON).$R5AX\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BOR   R14               YES, USING ACCESS REGISTERS.\n.$R5AX   ANOP\n         STM   R14,R12,12(R13)   SAVE REGISTERS.\n         LA    R3,X'80'          USE STORAGE KEY EIGHT.\n         LTR   R8,R0             GET THE LENGTH OF DATA TO FETCH.\n         BP    R5L$OKAY          POSITIVE LENGTH SO PROCEED.\n         LA    R8,4              FETCH DSST SIZE FIRST.\nR5L$OKAY LA    R7,SECTCT+256     POINT TO THE TARGET AREA.\n         XC    0(256,R7),0(R7)   RESET RESIDUAL DATA.\n         MVCP  0(R8,R7),0(R5),R3 FETCH THE DATA.\n         LTR   R0,R0             DSST FETCH REQUEST?\n         BNP   R5ACDSST          YES.\n         LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         LA    R5,SECTCT+256     POINT TO THE FETCHED DATA.\n         BR    R14\nR5ACDSST L     R8,SECTCT+256     GET THE SIZE OF WHOLE DSST.\n         C     R8,SIZEDSST       ENOUGH ROOM FOR WHOLE DSST?\n         BNH   R5$GETOK          YES, FETCH THE DSST.\n         L     R9,PSAAOLD        GET CURRENT ASCB.\n         LH    R9,ASID(,R9)      GET CURRENT ASID.\n         SSAR  R9                GET OUT OF CROSS-MEMORY MODE.\n         ICM   R0,15,SIZEDSST    GET THE PREVIOUS DSST SIZE.\n         BZ    $GETDSST          THIS IS THE FIRST SO SKIP FREEMAIN.\n         L     R1,AREADSST       GET THE PREVIOUSLY GOT ADDRESS.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n$GETDSST LR    R0,R8             GET THE LATEST SIZE OF WHOLE DSST.\n         ST    R0,SIZEDSST       SAVE IT.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(ANY,ANY)\n         ST    R1,AREADSST       SAVE LATEST ADDRESS OF DSST COPIES.\n         L     R4,$GATASID       GET TARGET ASID.\n         SSAR  R4                RESUME CROSS-MEMORY MODE.\nR5$GETOK L     R7,AREADSST       GET TARGET AREA ADDRESS.\n         LA    R0,256            GET LARGEST COPY CHUNK.\nR5$GETLP MVCP  0(R8,R7),0(R5),R3 FETCH UP TO 256 BYTES OF DSST.\n         BZ    R5$GETDN          LAST CHUNK DONE SO FINISH UP.\n         AR    R7,R0             POINT TO NEXT TARGET CHUNK.\n         AR    R5,R0             POINT TO NEXT SOURCE CHUNK.\n         SR    R8,R0             DECREASE REMAINING LENGTH.\n         B     R5$GETLP          FETCH NEXT DSST CHUNK.\nR5$GETDN LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         L     R5,AREADSST       POINT TO THE FETCHED DATA.\n         BR    R14\n         SPACE 2\n         DROP  R11,R10           DSK$PACE.\n         TITLE 'DISK SPACE STATUS DISPLAY - VARIABLES AND CONSTANTS'\nDG$TOKEN DC    D'0'              SPACE MONITOR SPACE TOKEN.\nIMPMAJNM DC    CL8'IMPMAJOR'\nIMPMINNM DC    C'IMPSPACER ACTIVE'\nIMINORLN EQU   *-IMPMINNM\n         AIF   (&MSPMON).$NOALET\nEB4UVNAM DC    CL8'IEFEB4UV'\n$PACALET DC    F'0'              ALET FOR SPACE MONITOR ADDRESS SPACE.\n.$NOALET ANOP\nGQ$TOKEN DC    F'0'              GQSCAN TOKEN.\n$GTCBADR DC    F'0'              SPACE MONITOR TCB ADDRESS.\n$GATASID DC    F'0'              SPACE MONITOR ASID.\n$TATADRS DS    0F                CURRENT STATUS AREA.\n$BASEADR DC    F'0'              SPACE MONITOR BASE ENTRY ADDRESS.\n$PCDSPST DC    F'0'              ADDRESS OF FIRST DSST ON SCREEN PAGE.\n$SCRLAMT DC    X'7F000000'       LINES TO SCROLL.\n$TATADLN EQU   *-$TATADRS        CURRENT STATUS AREA LENGTH.\nSIZEDSST DC    F'0'        \\     SIZE OF DSST TO FETCH.\nAREADSST DC    F'0'        /     ADDRESS OF DSST FETCH TARGET AREA.\n$PACERRS DC    CL32'DISK SPACE MONITOR IS NOT ACTIVE'    ERROR 0.\n         AIF   (&MVSMON).$ALSRVM\n         DC    CL32'$BADMSG1 - MVS/ESA BAD ALESERV  '    ERROR 1.\n         AGO   .$ERMSG1\n.$ALSRVM ANOP\n$BADMSG1 DC    CL32'   ALESERV ADD FAILED - RC=??   '    ERROR 1.\n.$ERMSG1 ANOP\n*DEVTBL  DS    0F                TRKS/CYL, KB/TRK, CYLS DEVICE TABLE.\n*        DC    AL1(00,00),H'0'                 NULL.\n*        DC    AL1(10,10),H'0'          2001 - 2311.\n*        DC    AL1(200,0),H'0'          2002 - 2301 DRUM.\n*        DC    AL1(10,00),H'0'          2003 - 2303 DRUM.\n*        DC    AL1(46,00),H'0'          2004 - 2302.\n*        DC    AL1(15,45),H'1440'   30102004 - 9345.\n*        DC    AL1(10,00),H'0'          2005 - 2321 DATA CELL.\n*        DC    AL1(08,14),H'48'         2006 - 2305-1 FIXED HEAD DISK.\n*        DC    AL1(08,14),H'96'     30502007 - 2305-2 FIXED HEAD DISK.\n*        DC    AL1(20,07),H'200'        2008 - 2314/2319.\n*        DC    AL1(19,12),H'404'    30502009 - 3330.   (7 ALT CYL)\n*        DC    AL1(12,00),H'0'      3040200A - 3340.\n*        DC    AL1(30,18),H'555'    3050200B - 3350.   (2 ALT CYL)\n*        DC    AL1(12,42),H'960'    3010200C - 3375.   (INCL. ALT)\n*        DC    AL1(19,12),H'808'    3050200D - 3330-1. (7 ALT CYL)\n*        DC    AL1(15,46),H'885'    3010200E - 3380.   (1 ALT CYL)\n*        DC    AL1(15,50),H'1113'   3010200F - 3390.\n$CNTRS   DS    0F                DSSTE STATISTICS ACCUMULATORS.\nFREECYLS DC    F'0'\nFREETRKS DC    F'0'\nFREEEXTS DC    F'0'\nFREEMEGS DC    F'0'\nLARGCYLS DC    F'0'\nLARGTRKS DC    F'0'\nALLDDSCT DC    F'0'\nOPNDCBCT DC    F'0'\nGOODVOLS DC    F'0'\nLARGMEGS DC    F'0'\nTOTALMEG DC    F'0'\n$CTLN    EQU   *-$CNTRS          SIZE OF ALL DSST COUNTERS TO BE RESET.\n         AIF   (&MSPMON).$NOGPL\n$PRFXLEN DC    H'0'              STORAGE GROUP NAME PREFIX LENGTH.\n.$NOGPL  ANOP\n$FLAGS   DC    X'00'\n$GRAFON  EQU   X'80'             GRAPHIC/TABULAR FORMAT SWITCH.\n$DATEFMT EQU   X'40'             JULIAN/YMD DATE FORMAT SWITCH.\n*        EQU   X'20'             UNUSED.\n*        EQU   X'10'             UNUSED.\n*        EQU   X'08'             UNUSED.\n*        EQU   X'04'             UNUSED.\n*        EQU   X'02'             UNUSED.\n*        EQU   X'01'             UNUSED.\n$PACLINE EQU   *,79\n$DATE    DC    CL6'YY.DDD'\n         DC    CL1' '\n$TIME    DC    CL5'HH:MM'\n$FREECYL DC    CL8' '\n$FREETRK DC    CL10' '\n$FREEMEG DC    CL10' '\n$FREEPCT DC    CL4' '\n$FREEEXT DC    CL6' '\n$FILLER  DC    CL1' '\n$LARGCYL DC    CL8' '\n$LARGTRK DC    CL6' '\n$DDUSAGE DC    CL8' '\n$DCBOPEN DC    CL6' '\nHEADING$ DC    CL71' DISK FREE SPACE:     0 OF TOTAL DASD              +\n                                   '           ZZZZ9      IN UNIT=SYSAL\n*              LDA (VOL=SER=******)'\nSUBHDG$$ DC    CL79' DATE  TIME UNUSED-CYLS+TRACKS MEGABYTES PCT XTNTS +\n               LARGEST-CONTIG #ALLOCS #OPEN'\nSUBHDGG$ DC    CL79' DATE  TIME  PCT ----+---2+0---+---4+0---+---6+0---+\n               +---8+0---+----% #ALCS #OPEN'\n         SPACE\n         LTORG\n         SPACE\n         AIF   (&MSPMON).$END\n$UNITNMP DC    X'C11140403C404000'\n         DCS   SBA,(5,3)\n         DC    X'&LOW'\n         DC    C'ENTER DASD UNIT NAME REQUIRED FOR FREE SPACE REPORT'\n         DCS   SBA,(7,3)\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\n$UNITNAM DC    X'0000000000000000'\n         DC    X'2841001BF0C2'\n         DCS   SBA,(12,3)\n         DC    X'&LOW'\n         DC    C'(USE',X'&HIGH',C'U/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL UNIT NAME SELECTION)'\n$UNITLEN EQU   *-$UNITNMP\n         DCS   SBA,(17,3)\n         DC    X'&HIGH'\n         DC   C'REENTER - SPECIFIED UNIT NAME WAS NOT FOUND IN THE EDT'\n$UNITLNX EQU   *-$UNITNMP\n         SPACE\n$STORNMP DC    X'C11140403C404000'\n         DCS   SBA,(5,3)\n         DC    X'&LOW'\n         DC    C'ENTER SMS STORAGE GROUP NAME REQUIRED FOR FREE SPACE R+\n               EPORT'\n         DCS   SBA,(7,3)\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\n$STORNAM DC    X'0000000000000000'\n         DC    X'2841001BF0C2'\n         DCS   SBA,(12,3)\n         DC    X'&LOW'\n         DC    C'(USE',X'&HIGH',C'S/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL STORAGE GROUP NAME SELECTION)'\n         DCS   SBA,(15,4)\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\n$STORLEN EQU   *-$STORNMP\n         DC    X'11D1E2&HIGH'\n         SPACE\n.$END    ANOP\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCME": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x12\\x00\\x00\\x00\\x93\"\\x8f\\x01\\x05\\x02o#0\\x02\\xdd\\x02X\\x00\\xaf\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "43.18", "flags": 0, "createdate": "1993-08-16T00:00:00", "modifydate": "2005-01-26T23:30:00", "lines": 733, "newlines": 600, "modlines": 175, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986,1994,1997  PRYCROFT SIX PTY LTD\n         TITLE 'ENQUEUE MONITOR DISPLAY LINE MAPPING'\nENQLINE  DSECT\nENQENTRY DS    XL(L'LOWX)\nQNAME    DS    CL8\nEXCLSIVE DS    CL1\nRNAME    DS    CL72\nENQUSER  EQU   *-8,8\nRLENGTH  DS    CL4\n         DS    CL1\nENQSYS   DS    CL8\n         DS    CL1\nRESUCB   DS    CL4\nRESFLAG  DS    CL1\nRESVOL   DS    CL6\n         DS    CL1\nENQJOB   DS    CL8\nSMC      DS    CL3\nNQDL     EQU   *-QNAME\nNQLL     EQU   *-ENQENTRY\n         SPACE 2\n         LCLC  &TSUQNAM\n         LCLC  &ODDQNAM\n         LCLC  &SPFQNAM\n         AIF   (&MVSMON).MVSENQ\n&TSUQNAM SETC  'SYSKEQUA'\n&ODDQNAM SETC  'SYSAIMS0'\n&SPFQNAM SETC  'SPFDSN  '\n         AGO   .MSPENQ\n.MVSENQ  ANOP\n&TSUQNAM SETC  'SYSIKJUA'\n&ODDQNAM SETC  'SPFUSER '\n&SPFQNAM SETC  'SPFEDIT '\n.MSPENQ  ANOP\n         TITLE 'ENQUEUE MONITOR SUBROUTINE'\n&IMPSECT CSECT\n         USING ENQUEUES,R11\nENQUEUES DS    0H\n         GETMAIN VRC,LV=(1048576,8192),SP=SUBPOOL,LOC=ANY\n         LTR   R15,R15           GETMAIN OK?\n         BZ    GQGMOKAY          YES.\n         LA    R1,NSMSG          NO, NOTIFY USER OF\n         LA    R0,NSMSGLEN           GETMAIN FAILURE\n         B     PUTSCRNE              AND GET NEXT USER REQUEST.\nGQGMOKAY STM   R0,R1,GQREGS      PREPARE PARAMETERS FOR FREEMAIN.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         SRL   R0,10             DIVIDE LENGTH BY 1024 FOR KILOBYTES.\n         CVD   R0,WORK\n         MVC   GQHLPSIZ,ED5      LOAD EDIT MASK.\n         ED    GQHLPSIZ,WORK+5   SHOW SIZE OBTAINED IN HELP PANEL.\n         CLI   INCHARS+1,C' '    ANY OPTION PRE-SPECIFIED?\n         BNH   REDOENQS          NO.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' YES, ADJUST ANY COMMAND INPUT.\n         SLR   R8,R8             FLAG QCB SCAN END FOR SCAN RESTART.\n         B     CMDSCANE          PROCESS IT.\n         SPACE\nREDOENQS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R2,2              ASSUME HEADINGS WILL BE SET UP OKAY.\n         ST    R2,WINLINES       INITIALIZE LINE COUNTER.\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         MVC   0(L'LOWX,R2),LOWX SUPPLY 3270 ATTRIBUTES.\n         MVI   0(R2),X'FF'       FIXED FLAG - NON-SCROLLABLE LINE.\n         LA    R2,LL-79(,R2)     POINT PAST ATTRIBUTES.\n         MVI   0(R2),C' '        BLANK A LINE.\n         MVC   1(NQDL-1,R2),0(R2)\n         MVC   0(79,R2),NQSELINE INDICATE SELECTION CRITERIA.\n         TM    WAITFLAG,X'88'    SELECTING ALL ENQUEUES BY PREFIX?\n         BZ    ENQPRFLN          YES, SHOW PREFIX MASKS.\n         MVC   38(40,R2),BLANKS  NO, BLANK OUT PREFIX TEMPLATES.\n         MVC   38(L'ERESVHDG,R2),ERESVHDG\n         TM    WAITFLAG,X'08'    SHOWING RESERVE ENQUEUES?\n         BO    ENQJMASK          YES, GOOD GUESS FOR CRITERIA HEADING.\n         MVC   38(L'EWAITHDG,R2),EWAITHDG\n         B     ENQJMASK          NO, MUST BE RESOURCE CONFLICTS.\nENQPRFLN CLI   SELMAJNM,C' '     USING JOB NAME PREFIX SELECTION?\n         BNH   ENQQMASK          NO.\n         LH    R1,QPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,NQQLDMSK       LOAD THE PREFIX INTO THE DISPLAY LINE.\nENQQMASK CLI   SELMINNM,C' '     USING JOB NAME PREFIX SELECTION?\n         BNH   ENQRMASK          NO.\n         LH    R1,RPRFXLEN       GET PREFIX LENGTH.\n         LA    R0,16             GET MAXIMUM SHOWABLE PREFIX LENGTH.\n         CR    R1,R0             MASK TOO LONG FOR DISPLAY?\n         BNH   ENQRMSKL          NO.\n         LR    R1,R0             YES, JUST SHOW FIRST 16 CHARACTERS.\nENQRMSKL BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,NQRLDMSK       LOAD THE PREFIX INTO THE DISPLAY LINE.\nENQRMASK CLI   SELJOBNM,C' '     USING JOB NAME PREFIX SELECTION?\n         BNH   ENQJMASK          NO.\n         LH    R1,JPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,NQJLDMSK       LOAD THE PREFIX INTO THE DISPLAY LINE.\nENQJMASK TR    0(79,R2),XLATETBL HANDLE ANY UNDISPLAYABLE DATA.\n         LA    R2,NQDL(,R2)      POINT TO NEXT DISPLAY LINE.\n         MVC   0(L'HIGHX,R2),HIGHX   LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVC   L'HIGHX(NQDL,R2),HEADINGE    LOAD DISPLAYABLE\n         TR    L'HIGHX(NQDL,R2),XLATETBL         HEADING.\n         LA    R2,NQLL(,R2)      POINT PAST HEADING.\n         DROP  R15               WNDWMNGR.\n         USING ENQLINE,R2\n         MVI   QNAME,C' '        BLANK OUT FIRST DETAIL LINE.\n         MVC   QNAME+1(NQDL-1),QNAME\n         NI    WAITFLAG,X'88'    TURN OFF DISPLAYED SUPPRESSED QNAMES.\nRESUMENQ L     R3,GQREG1         GET WORK AREA ADDRESS.\n         L     R4,GQREG0         GET WORK AREA LENGTH.\n         TM    WAITFLAG,X'80'    ENQUEUE WAITS ONLY REQUESTED?\n         BZ    NOTWAITS          NO.\n         GQSCAN AREA=((3),(4)),SCOPE=ALL,WAITCNT=1,TOKEN=GQTOKEN\n         B     QSCANEND          QUEUE SCAN DONE.\nNOTWAITS TM    WAITFLAG,X'08'    HARDWARE RESERVES ONLY REQUESTED?\n         BZ    NOTRESVS          NO.\n         GQSCAN AREA=((3),(4)),SCOPE=ALL,RESERVE=YES,TOKEN=GQTOKEN\n         B     QSCANEND          QUEUE SCAN DONE.\nNOTRESVS CLI   SELMAJNM,C' '     ANY QUEUE NAME FILTERING REQUESTED?\n         BNH   NOQNAMES          NO.\n         CLI   QPRFXLEN+1,8      ALL EIGHT CHARACTERS SPECIFIED?\n         BNE   NOQNAMES          NO.\n         LA    R0,8              EIGHT CHARACTERS TO CHECK.\n         LA    R1,SELMAJNM       POINT TO THE REQUESTED QNAME.\nQGENRCHK CLI   0(R1),C'*'        PLACE HOLDER CHARACTER?\n         BE    NOQNAMES          YES, GENERIC SCAN REQUIRED.\n         LA    R1,1(,R1)         NO, POINT TO NEXT CHARACTER.\n         BCT   R0,QGENRCHK       CONTINUE THE CHECKING.\n         GQSCAN AREA=((3),(4)),SCOPE=ALL,RESNAME=SELMAJNM,TOKEN=GQTOKEN\n         B     QSCANEND          QUEUE SCAN DONE.\nNOQNAMES GQSCAN AREA=((3),(4)),SCOPE=ALL,TOKEN=GQTOKEN\nQSCANEND LR    R8,R1             LOAD RIB COUNTER.\n         B     GQRTNTBL(R15)     ACT UPON RETURN CODE.\nGQRTNTBL B     RIBGALOR   RC=0   RIBS GALORE, SO PROCESS THAT DATA.\n         B     PUTALLNQ   RC=4   NOTHING FOUND.\n         B     RIBGALOR   RC=8   AREA FILLED, SO PROCESS THAT DATA.\n         B     PUTQEMSG   RC=12\n         B     PUTQEMSG   RC=16\nPUTQEMSG LA    R1,QEMSG   RC=20  NOTIFY USER OF\n         LA    R0,QEMSGLEN              GQSCAN FAILURE\n         B     PUTSCRNE                 AND GET NEXT USER REQUEST.\nRIBGALOR ST    R0,GQSCANR0       STORE RIB BASE AND RIBE SIZES.\n         L     R3,GQREG1         POINT TO FIRST RIB OF GQSCAN WORKAREA.\n         B     SELNQCHK          PROCESS FIRST RIB.\n         USING RIB,R3\nNEXTRIB  LR    R3,R4             POINT TO THE PREVIOUS RIBE.\n         AH    R3,NQRIBESZ       POINT TO THE NEXT RESOURCE INFO BLOCK.\n         BCT   R8,SELNQCHK       DECREMENT RIB COUNTER AND PROCESS RIB.\n         ICM   R1,B'1111',GQTOKEN\n         BNZ   RESUMENQ          QUEUE SCAN NOT COMPLETE SO RESUME IT.\n         B     PUTALLNQ          QUEUE SCAN COMPLETE SO SHOW RESULTS.\nSELNQCHK MVC   QNAME,RIBQNAME    LOAD QUEUE NAME.\n         TM    WAITFLAG,X'88'    OPTION W OR OPTION R ACTIVE?\n         BNZ   LOADRNAM          YES, DON'T FILTER QNAMES.\n         CLI   SELMAJNM,C' '     SELECTED MAJOR NAMES ONLY?\n         BNH   FILTERQ           NO, FILTER OUT MASSES.\n         LH    R10,QPRFXLEN      YES, GET QNAME PREFIX LENGTH.\n         LA    R9,SELMAJNM       POINT TO DESIRED PREFIX.\n         ST    R9,WORK+4         SAVE FIRST PARAMETER.\n         LA    R9,RIBQNAME       POINT TO QUEUE NAME.\n         STM   R9,R10,WORK2      SAVE REST OF PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             SEE IF ELIGIBLE.\n         BE    GOTQNAME          YES, GO DO IT.\n         B     DUMPRIB           NO, FORGET IT.\nFILTERQ  CLI   SELJOBNM,C' '     SPECIFIC JOBS?\n         BH    GOTQNAME          YES, DON'T SUPPRESS ANY MAJOR Q NAMES.\n         CLI   SELMINNM,C' '     SPECIFIC RESOURCES?\n         BH    GOTQNAME          YES, DON'T SUPPRESS ANY MAJOR Q NAMES.\n         CLC   =CL8'SYSDSN  ',RIBQNAME\n         BNE   TRYTSUNQ          CHECK FOR TIME SHARING USER ENQUEUE.\n         TM    WAITFLAG,X'40'    SYSDSN ENCOUNTERED BEFORE?\n         BO    DUMPRIB           YES.\n         OI    WAITFLAG,X'40'    NO, BUT IT HAS BEEN NOW.\n         B     SUPRESED          SUPPRESS DATA SET ENQUEUE DISPLAY.\nTRYTSUNQ CLC   =CL8'&TSUQNAM',RIBQNAME\n         BNE   TRYODDNQ          CHECK FOR SPFUSER/SYSAIMS0.\n         TM    WAITFLAG,X'20'    SYSIKJUA ENCOUNTERED BEFORE?\n         BO    DUMPRIB           YES.\n         OI    WAITFLAG,X'20'    NO, BUT IT HAS BEEN NOW.\n         B     SUPRESED          SUPPRESS TSO USERID ENQUEUE DISPLAY.\nTRYODDNQ CLC   =CL8'&ODDQNAM',RIBQNAME\n         BNE   TRYSPFED          CHECK FOR SPF EDIT DATA SET ENQUEUE.\n         TM    WAITFLAG,X'10'    SPFUSER ENCOUNTERED BEFORE?\n         BO    DUMPRIB           YES.\n         OI    WAITFLAG,X'10'    NO, BUT IT HAS BEEN NOW.\n         B     SUPRESED          SUPPRESS SPF USERID ENQUEUE DISPLAY.\nTRYSPFED CLC   =CL8'&SPFQNAM',RIBQNAME\n         BNE   TRYSVSAM          CHECK FOR SYSVSAM.\n         TM    WAITFLAG,X'04'    SPF EDIT DATA SET ENCOUNTERED BEFORE?\n         BO    DUMPRIB           YES.\n         OI    WAITFLAG,X'04'    NO, BUT IT HAS BEEN NOW.\n         B     SUPRESED          SUPPRESS SPF DATA SET ENQUEUE DISPLAY.\nTRYSVSAM CLC   =CL8'SYSVSAM ',RIBQNAME\n         BNE   TRYSPARE          CHECK FOR ???QNAME.\n         TM    WAITFLAG,X'02'    SYSVSAM ENCOUNTERED BEFORE?\n         BO    DUMPRIB           YES.\n         OI    WAITFLAG,X'02'    NO, BUT IT HAS BEEN NOW.\n         B     SUPRESED          SUPPRESS VSAM OPEN ENQUEUE DISPLAY.\nTRYSPARE L     R1,ATHTBADR       POINT TO CUSTOMIZABLE AREA.\n         LA    R9,256(,R1)       POINT TO ZAPPABLE SUPPRESSION MASK.\n         ST    R9,WORK+4         SAVE FIRST PARAMETER.\n         LA    R9,RIBQNAME       POINT TO QUEUE NAME.\n         LA    R10,8             GET THE QNAME LENGTH.\n         STM   R9,R10,WORK2      SAVE REST OF PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             SEE IF ELIGIBLE.\n         BNE   GOTQNAME          NOT ELIGIBLE FOR SUPPRESSION.\n         TM    WAITFLAG,X'01'    ???QNAME ENCOUNTERED BEFORE?\n         BO    DUMPRIB           YES.\n         OI    WAITFLAG,X'01'    NO, BUT IT HAS BEEN NOW.\n         L     R1,ATHTBADR       POINT TO CUSTOMIZABLE AREA.\n         MVC   QNAME,256(R1)     HANDLE GENERIC FILTERING.\nSUPRESED MVC   RNAME+16(27),=C'***SUPPRESSED-BY-DEFAULT***'\n         MVC   ENQENTRY,LOWX     LOW INTENSITY.\n         MVI   ENQENTRY+8,X'F2'  RED.                           (I3279)\n         SLR   R5,R5             ZERO REMAINING RIBE COUNTER AS A FLAG.\n         B     SHOWLINE          DISPLAY SUPPRESSION MESSAGE.\nDUMPRIB  L     R5,RIBNRIBE       GET RIBE NUMBER FOR THIS RIB.\n         LH    R4,RIBVLEN        GET LENGTH OF RIBVAR.\n         AH    R4,NQRIBFSZ       GET THE TOTAL RIB LENGTH.\n         AR    R4,R3             POINT TO THE FIRST RIBE OF THIS RIB.\n         MH    R5,NQRIBESZ       GET NUMBER OF RIBES BY RIBE LENGTH.\n         AR    R4,R5             POINT TO THE NEXT RIB.\n         SH    R4,NQRIBESZ       POINT TO THE LAST RIBE OF THIS RIB.\n         B     NEXTRIB           FORGET THIS RIB AND GET THE NEXT ONE.\nGOTQNAME CLI   SELMINNM,C' '     SELECTED MINOR NAMES ONLY?\n         BNH   LOADRNAM          NO, SHOW THE LOT.\n         LA    R9,SELMINNM       POINT TO DESIRED PREFIX.\n         ST    R9,WORK+4         SAVE FIRST POINTER OF PARAMETER LIST.\n         LH    R10,RPRFXLEN      YES, GET RNAME PREFIX LENGTH.\n         LA    R9,RIBEND         POINT TO RESOURCE NAME (RIBRNAME).\n         STM   R9,R10,WORK2      SAVE REST OF PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             SEE IF ELIGIBLE.\n         BNE   DUMPRIB           NO, FORGET IT.\nLOADRNAM SLR   R6,R6             PREPARE FOR INSERT CHARACTER.\n         IC    R6,RIBRNMLN       GET RESOURCE NAME LENGTH.\n         CVD   R6,WORK\n         MVC   RLENGTH,ED3       SHOW IT.\n         ED    RLENGTH,WORK+6\n         LA    R0,L'RNAME        GET MAXIMUM DISPLAYABLE LENGTH.\n         CR    R6,R0             TOO LONG TO SHOW WHOLE RNAME?\n         BNH   *+6               NO.\n         LR    R6,R0             YES, REDUCE TO MAXIMUM.\n         BCTR  R6,0              LESS 1 FOR EXECUTE.\n         MVC   RNAME,BLANKS      BLANK OUT PREVIOUS RUBBISH.\n         EX    R6,RNAMLOAD       LOAD RESOURCE NAME.\n         BAS   R14,RNAMECHK      CALL RNAME FIELD EDIT ROUTINE.\n         MVC   SMC,BLANKS        CLEAR OUT SET-MUST-COMPLETE FLAG.\n         L     R5,RIBNRIBE       GET RIBE NUMBER FOR THIS RIB.\n         LH    R4,RIBVLEN        GET LENGTH OF RIBVAR.\n         AH    R4,NQRIBFSZ       GET OFFSET TO FIRST RIBE.\n         AR    R4,R3             POINT TO FIRST RIBE.\n         SH    R4,NQRIBESZ       POINT TO BEFORE FIRST RIBE.\n         USING RIBE,R4\nNEXTRIBE AH    R4,NQRIBESZ       POINT TO NEXT RIBE.\n         MVC   ENQJOB,RIBEJBNM   MOVE IN JOBNAME.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         CLC   RIBESYSN,CVTSNAME IS ENQUEUE FROM THIS SYSTEM?\n         BNE   XTRNLENQ          NO, IT CAME FROM SOMEWHERE ELSE.\n         DROP  R1                CVT.\n         SLR   R1,R1\n         ICM   R1,B'0011',RIBEASID\n         BZ    CHKNQJOB          NO ASID SO LEAVE BLANK.\n         SLL   R1,2              GET INDEX INTO ASVT (MULTIPLY BY 4).\n         A     R1,ASVTADDR\n         AIF   (&MVSMON).EASVT1A\n         AIF   (&XATEST).EASVT1A\n         AGO   .EASVT1E\n.EASVT1A ANOP\n         LA    R1,524(,R1)       GET ASVT ENTRY FOR THIS ASID.\n.EASVT1E ANOP\n*        MVC   ENQJOB,ENDED      LEAVE RIBEJBNM SHOWING.\n         ICM   R15,B'1111',0(R1) IS THIS ADDRESS SPACE ACTIVE?\n         BM    CHKNQJOB          NO, THE JOB HAS ENDED.\n*        MVC   ENQJOB,STARTING   LEAVE RIBEJBNM SHOWING.\n         ICM   R1,15,JBNI(R15)   LOAD PTR TO JOBNAME.\n         BNZ   LODUNAME\n         ICM   R1,15,JBNS(R15)   LOAD PTR TO JOBNAME.\n         BZ    CHKNQJOB          JOB HAS NO NAME.\nLODUNAME MVC   ENQJOB,0(R1)      OTHERWISE, MOVE IN JOBNAME.\n         CLI   ENQJOB,X'49'      IS IT UNPRINTABLE?\n         BH    CHKNQJOB          NO, JOB NAME HAS BEEN ASCERTAINED.\n         MVC   ENQJOB,UNKNOWN    YES, JOB NAME NOT KNOWN.\n         B     CHKNQJOB          CHECK JOB NAME SELECTION.\nXTRNLENQ MVC   ENQSYS,RIBESYSN   LOAD SYSTEM NAME OF EXTERNAL ENQUEUE.\nCHKNQJOB TM    WAITFLAG,X'88'    OPTION W OR OPTION R ACTIVE?\n         BNZ   GOTNQJOB          YES, DON'T FILTER JOB NAMES.\n         CLI   SELJOBNM,C' '     SELECTED JOB NAMES ONLY?\n         BNH   GOTNQJOB          NO, SHOW THE LOT.\n         LH    R10,JPRFXLEN      YES, GET LENGTH OF JOB NAME PREFIX.\n         LA    R9,SELJOBNM       POINT TO DESIRED PREFIX.\n         ST    R9,WORK+4         SAVE FIRST PARAMETER.\n         LA    R9,ENQJOB         POINT TO JOB NAME.\n         STM   R9,R10,WORK2      SAVE REST OF PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BE    GOTNQJOB          KEEP IT IF IT MATCHES.\n         BCT   R5,NEXTRIBE       NO MATCH, PROCESS NEXT RIBE.\n         B     NEXTRIB           NO MORE RIB EXTENTS, PROCESS NEXT RIB.\nGOTNQJOB DS    0H\n         AIF   (&MSPMON).ENOX1\n         BAS   R14,RNMEXTRA      SUPPLY SYSTEM ID OR USER ASID MAYBE.\n.ENOX1   ANOP\n         TM    RIBSCOPE,RIBGLBL  SCOPE=GLOBAL?\n         BZ    NQLNCOLR          NO, NO NEED TO APPEND SYSTEM NAME.\n         CLC   BLANKS(4),RIBESYSN+4 SYSTEM NAME LESS THAN FIVE BYTES?\n         BNE   NQLNCOLR             NO, GO DECIDE DISPLAY COLOUR.\n         CLC   BLANKS(6),ENQJOB+3   ROOM FOR SYSTEM NAME IN JOB FIELD?\n         BNE   NQLNCOLR             NO, GO DECIDE DISPLAY COLOUR.\n         MVI   ENQJOB+3,C'-'        YES.\n         MVC   ENQJOB+4(4),RIBESYSN SHOW SYSTEM NAME OF ENQ'S ASID.\nNQLNCOLR MVC   ENQENTRY,LOWX        LOW INTENSITY.\n         MVI   ENQENTRY+8,X'F4'     GREEN.                      (I3279)\n         TM    RIBERFLG,RIBETYPE    SHARED ENQUEUE?\n         BO    SHARENQ              YES.\n         MVI   EXCLSIVE,C'*'        NO, INDICATE EXCLUSIVE.\nSHARENQ  TM    RIBESFLG,RIBESTAT    IS THE RESOURCE OWNED?\n         BO    HAVEDISP             YES.\n         MVI   ENQENTRY+4,X'F8'     HIGH INTENSITY FOR WAIT ENQUEUE.\n         MVI   ENQENTRY+5,X'50'     REVERSE VIDEO FOR WAIT.     (F9526)\n         OI    ENQENTRY+8,X'01'     WAITING SO ADD BLUE.        (I3279)\nHAVEDISP DS    0H\n         TM    RIBERFLG,RIBERESV    RESERVE?\n         BZ    SOFTENQ              NO.\n         CLI   ENQENTRY+4,X'F8'     ALREADY HIGH INTENSITY FOR WAIT?\n         BE    ALREDYHI             YES, DON'T OVERWRITE FOR RESERVE.\n         MVI   ENQENTRY+4,X'F4'     MEDIUM INTENSITY FOR DASD RESERVE.\nALREDYHI OI    ENQENTRY+8,X'02'     ADD RED FOR DASD RESERVE.   (I3279)\n         MVC   RESUCB+1(10),=C'NOT RESRVD'\n         TM    RIBERFLG,RIBERESC    RESERVE CONVERTED TO GLOBAL ENQ?\n         BZ    GRSCNVRT             NO.\n         MVI   RESFLAG,C'\u00a2'         YES, FLAG CONVERTED RESERVE.\nGRSCNVRT ICM   R6,B'1111',RIBEUCB   GET UCB ADDRESS.\n         BZ    SOFTENQ              NO ADDRESS, RESERVE NOT PERFORMED.\n         L     R1,CVTPTR(,0)        POINT TO THE CVT.\n         USING CVT,R1\n         CLC   RIBESYSN,CVTSNAME    IS ENQUEUE FROM THIS SYSTEM?\n         BNE   SOFTENQ              NO, DON'T CHECK GARBAGE ADDRESS.\n         DROP  R1                   CVT.\n         CLI   2(R6),X'FF'          STANDARD UCB?\n         BNE   SOFTENQ              NO, DON'T LOAD GARBAGE.\n         UNPK  WORK(5),4(3,R6)\n         TR    WORK(4),HEX-C'0'\n         MVC   RESUCB,WORK          UCB NAME.\n         MVC   RESVOL,28(R6)        VOLUME SERIAL NUMBER.\n         TM    RIBERFLG,RIBERESC    RESERVE CONVERTED TO GLOBAL ENQ?\n         BO    SOFTENQ              YES.\n         CLI   36(R6),0             NO, ANY RESERVES ON THIS DASD?\n         BNE   SOFTENQ              YES, GOOD.\n         MVI   RESFLAG,C'\u00ac'         NO, FLAG IT.\nSOFTENQ  DS    0H\n         CLI   SELJOBNM,C' '     JOB SELECTION ACTIVE?\n         BNH   SMCTEST           NO, DON'T RELOAD QNAME AND RNAME.\n         TM    WAITFLAG,X'88'    OPTION W OR OPTION R ACTIVE?\n         BNZ   SMCTEST           YES, DON'T RELOAD QNAME AND RNAME.\n         MVC   QNAME,RIBQNAME    LOAD QUEUE NAME.\n         SLR   R6,R6             PREPARE FOR INSERT CHARACTER.\n         IC    R6,RIBRNMLN       GET RESOURCE NAME LENGTH.\n         BCTR  R6,0              LESS 1 FOR EXECUTE.\n         CLI   RNAME+58,C')'     IS THIS A HARDWARE RESERVE?\n         BE    RSVRNAME          YES, DON'T OVERWRITE RESERVE DETAILS.\n         MVC   RNAME,BLANKS      BLANK OUT PREVIOUS RUBBISH.\nRSVRNAME MVC   RNAME(47),BLANKS  BLANK OUT PREVIOUS RUBBISH.\n         EX    R6,RNAMLOAD       LOAD RESOURCE NAME.\n         BAS   R14,RNAMECHK      CALL RNAME FIELD EDIT ROUTINE.\n         AIF   (&MSPMON).ENOX2\n         BAS   R14,RNMEXTRA      SUPPLY SYSTEM ID OR USER ASID MAYBE.\n.ENOX2   ANOP\nSMCTEST  TM    RIBERFLG,RIBEMC   MUST COMPLETE?\n         BZ    NOTMC             NO.\n         MVC   SMC+1(2),=C'MC'   YES, FLAG AS MUST-COMPLETE.\n         B     SHOWLINE\nNOTMC    MVI   SMC+1,C'<'        FLAG RIB AS LOCAL.\n         TM    RIBSCOPE,RIBGLBL  SCOPE=GLOBAL?\n         BZ    SCOPETST          NO.\n         MVI   SMC+1,C'>'        YES, FLAG AS GLOBAL.\nSCOPETST MVI   SMC+2,C'J'        INDICATE JOB-STEP-WIDE ENQUEUE.\n         TM    RIBSCOPE,RIBSTEP  SCOPE=STEP?\n         BO    SHOWLINE          YES.\n         MVI   SMC+2,C'O'        SHOW AS OPERATING-SYSTEM-WIDE ENQUEUE.\n         TM    RIBSCOPE,RIBSYS   SCOPE=SYSTEM?\n         BO    SHOWLINE          YES.\n         MVI   SMC+2,C'G'        SHOW AS COMPLEX-WIDE (GLOBAL) ENQUEUE.\n         TM    RIBSCOPE,RIBSYSS  SCOPE=SYSTEMS?\n         BO    SHOWLINE          YES.\n         MVI   SMC+2,C'?'        NO, UNKNOWN TYPE.\nSHOWLINE TR    LL-79(NQDL,R2),XLATETBL  HANDLE WACKY RESOURCE NAMES.\n         LA    R2,NQLL(,R2)      ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNE          IF YES, THEN GO PUT THIS SCREEN.\n         DROP  R15               WNDWMNGR.\n         MVI   QNAME,C' '        BLANK OUT DETAIL LINE.\n         MVC   QNAME+1(NQDL-1),QNAME\n         LTR   R5,R5             NO, IS THIS QNAME SUPPRESSED?\n         BZ    DUMPRIB           YES, FORGET ABOUT THIS RIB.\n         BCT   R5,NEXTRIBE       NO, PROCESS NEXT RIB EXTENT.\n         B     NEXTRIB           NO MORE RIB EXTENTS, PROCESS NEXT RIB.\nPUTALLNQ BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNE LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNE L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    ENQENTER          YES, PROCESS STACKED ENTERS.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    GETCMDNQ          NO, PROCESS SUBCOMMAND.\n         BAS   R14,QUITSCAN      YES, TERMINATE THIS SCAN FOR EXIT.\n         LM    R0,R1,GQREGS      RESTORE REGISTERS FOR FREEMAIN.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL  FREE GQSCAN WORK AREA.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nGETCMDNQ CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BNE   CMDSCANE          NO, CHECK FOR ENQMON SUBCOMMAND.\nENQENTER C     R8,GQTOKEN        YES, DID QUEUE SCAN COMPLETE?\n         BE    REDOENQS          YES, START OVER.\n         B     RESUMENQ          NO, RESUME FROM WHERE SCAN STOPPED.\nCMDSCANE CLI   INCHARS,C'W'      DASD RESERVE ONLY SELECTION?\n         BNE   TRYMAJOR          IF NOT, TRY FOR MAJOR NAME PREFIX.\n         MVI   WAITFLAG,X'80'    YES, SET ENQUEUE CONFLICT SWITCH.\n         BAS   R14,QUITSCAN      TERMINATE THIS SCAN FOR RESTART.\n         B     REDOENQS          RESTART QUEUE CONTROL BLOCK SCAN.\nTRYMAJOR CLI   INCHARS,C'Q'      CHECK FOR MAJOR QUEUE NAME PREFIX.\n         BNE   TRYMINOR          IF NOT, TRY FOR MINOR NAME PREFIX.\n         XC    SELMAJNM,SELMAJNM ERASE PREVIOUS JOBNAME.\n         BAS   R14,QUITSCAN      TERMINATE THIS SCAN FOR RESTART.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOMAJPFX          YES, DO IT.\n         CLI   INCHARS+1,C' '    QNAME PREFIX SUPPLIED?\n         BNH   EGETQNAM          NO.\n         MVC   SELMAJNM,INCHARS+1   LOAD PRE-PROMPT SUPPLIED MASK.\n         LA    R15,SELMAJNM+1    POINT TO FIRST BYTE TO CHECK.\n         LA    R0,7              MAXIMUM BYTES TO CHECK.\n         LA    R1,1              PREFIX LENGTH DETERMINED SO FAR.\nEQNMLOOP CLI   0(R15),C' '       END OF MAJOR NAME PREFIX FOUND?\n         BNH   NOMAJPFX          YES, SAVE THE PREFIX LENGTH.\n         LA    R15,1(,R15)       NO, POINT TO NEXT BYTE.\n         LA    R1,1(,R1)         INCREMENT PREFIX LENGTH.\n         BCT   R0,EQNMLOOP\n         B     NOMAJPFX          EIGHT CHARACTER MASK SUPPLIED.\nEGETQNAM NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.\n         LA    R1,QPRFXMSG\n         LA    R0,MAJSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    EGETQNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   SELMAJNM,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\nNOMAJPFX STH   R1,QPRFXLEN       STORE PREFIX LENGTH.\n         B     REDOENQS\nTRYMINOR CLI   INCHARS,C'R'      CHECK FOR MINOR QUEUE NAME PREFIX.\n         BNE   TRYNQJOB          IF NOT, TRY FOR JOB PREFIX REQUEST.\n         BAS   R14,QUITSCAN      TERMINATE THIS SCAN FOR RESTART.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOMINPFX          YES, DO IT.\n         CLI   INCHARS+1,C' '    JOB PREFIX SUPPLIED?\n         BNH   EGETRNAM          NO.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' YES, ADJUST ANY COMMAND INPUT.\n         LA    R15,INCHARS+1     POINT TO FIRST BYTE TO CHECK.\n         LA    R0,39             MAXIMUM BYTES TO CHECK.\n         LA    R1,1              PREFIX LENGTH DETERMINED SO FAR.\nERNMLOOP CLI   0(R15),C' '       END OF MINOR NAME PREFIX FOUND?\n         BNH   NOMINPFX          YES, SAVE THE PREFIX LENGTH.\n         LA    R15,1(,R15)       NO, POINT TO NEXT BYTE.\n         LA    R1,1(,R1)         INCREMENT PREFIX LENGTH.\n         BCT   R0,ERNMLOOP\n         B     NOMINPFX          FORTY CHARACTER MASK SUPPLIED.\nEGETRNAM NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.\n         LA    R1,RPRFXMSG\n         LA    R0,MINSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    EGETRNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\nNOMINPFX STH   R1,RPRFXLEN       STORE PREFIX LENGTH.\n         XC    SELMINNM,SELMINNM ERASE PREVIOUS RESOURCE NAME.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         LTR   R1,R1             ANY PREFIX SUPPLIED?\n         BM    REDOENQS          NO.\n         EX    R1,LODMINNM       EXTRACT SPECIFIED PREFIX.\n         B     REDOENQS\nLODMINNM MVC   SELMINNM(0),INCHARS              <<< EXECUTED >>>\nTRYNQJOB CLI   INCHARS,C'J'      CHECK FOR SPECIFIC JOB NAME PREFIX.\n         BNE   RSVCHECK          IF NOT, TRY FOR RESERVE SELECTION.\n         XC    SELJOBNM,SELJOBNM ERASE PREVIOUS JOBNAME.\n         BAS   R14,QUITSCAN      TERMINATE THIS SCAN FOR RESTART.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOJOBPNQ          YES, DO IT.\n         CLI   INCHARS+1,C' '    JOB PREFIX SUPPLIED?\n         BNH   EGETJNAM          NO.\n         MVC   SELJOBNM,INCHARS+1   LOAD PRE-PROMPT SUPPLIED MASK.\n         LA    R15,SELJOBNM+1    POINT TO FIRST BYTE TO CHECK.\n         LA    R0,7              MAXIMUM BYTES TO CHECK.\n         LA    R1,1              PREFIX LENGTH DETERMINED SO FAR.\nEJOBLOOP CLI   0(R15),C' '       END OF JOB NAME PREFIX FOUND?\n         BNH   NOJOBPNQ          YES, SAVE THE PREFIX LENGTH.\n         LA    R15,1(,R15)       NO, POINT TO NEXT BYTE.\n         LA    R1,1(,R1)         INCREMENT PREFIX LENGTH.\n         BCT   R0,EJOBLOOP\n         B     NOJOBPNQ          EIGHT CHARACTER MASK SUPPLIED.\nEGETJNAM NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.\n         LA    R1,JPRFXMSG\n         LA    R0,JOBSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    EGETJNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   SELJOBNM,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\nNOJOBPNQ STH   R1,JPRFXLEN       STORE PREFIX LENGTH.\n         B     REDOENQS          RESTART QUEUE CONTROL BLOCK SCAN.\nRSVCHECK CLI   INCHARS,C'D'      DASD RESERVE ONLY SELECTION?\n         BNE   NORMLCHK          NO, TRY FOR NORMAL MODE.\n         MVI   WAITFLAG,X'08'    YES, SET RESERVE SELECTION FLAG.\n         BAS   R14,QUITSCAN      TERMINATE THIS SCAN FOR RESTART.\n         B     REDOENQS          RESTART QUEUE CONTROL BLOCK SCAN.\nNORMLCHK CLI   INCHARS,C'P'      SELECTION SUBJECT ONLY TO PREFIXES?\n         BNE   GIVEHLPE          NO, DROP A HINT.\n         MVI   WAITFLAG,X'00'    YES, RESET WAIT AND RESERVE FLAGS.\n         BAS   R14,QUITSCAN      TERMINATE THIS SCAN FOR RESTART.\n         B     REDOENQS          RESTART QUEUE CONTROL BLOCK SCAN.\nGIVEHLPE MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNE          GO DISPLAY HELP PANEL.\n         TITLE 'ENQUEUE MONITOR - TERMINATE CURRENT QUEUE SCAN'\nQUITSCAN ICM   R1,B'1111',GQTOKEN\n         BZR   R14               CURRENT SCAN ALREADY ENDED SO RETURN.\n         GQSCAN QUIT=YES,TOKEN=GQTOKEN\n         BR    R14               RETURN TO CALLER.\n         TITLE 'ENQUEUE MONITOR - EDIT RESOURCE NAME'\nRNAMECHK DS    0H\n         AGO   .ENQHEX\n         CLC   RIBQNAME,=CL8'SYSIKJBC'  BRODCAST?\n         BE    RNAMEHEX                YES, SHOW RESOURCE NAME IN HEX.\n         CLC   RIBQNAME,=CL8'SYSZTIOT'  TIOT?\n         BE    RNAMEHEX                YES, SHOW RESOURCE NAME IN HEX.\n         CLC   RIBQNAME,=CL8'SYSCTLG '  OS/CVOL?\n         BNE   TSOECHK                  NO.\n         MVC   RNAME+8(3),=C'+X'''      INDICATE HEX DIGITS.\n         UNPK  RNAME+11(9),RIBEND+8(5)  SHOW UCB ADDR HEX IN EBCDIC.\n         MVC   RNAME+19(12),=C''' (SYSCTLG.V'\n         L     R1,WORK                  GET UCB ADDRESS.\n         MVC   RNAME+31(6),28(1)        MOVE IN VOLUME SERIAL NUMBER.\n         MVI   RNAME+37,C')'\n         TR    RNAME+11(8),HEX-C'0'\n         BR    R14\nTSOECHK  CLC   RIBQNAME,=CL8'SYSZTSOE'  TSO/E SESSION MANAGER?\n         BNE   QCMPSCHK                 NO.\n         CLI   RIBRNMLN,12              YES, EXPECTED FORMAT?\n         BNE   RGENLCHK                 NO.\n         MVC   RNAME(3),=C' C'''        YES, INDICATE CHARACTERS.\n         MVC   RNAME+3(4),RIBEND        LOAD CHARACTER PART.\n         MVC   RNAME+7(4),=C'''+X'''    INDICATE HEX DIGITS.\n         UNPK  RNAME+11(9),RIBEND+4(5)  SHOW HEX IN EBCDIC.\n         TR    RNAME+11(8),HEX-C'0'\n         MVI   RNAME+19,C''''\n         BR    R14\nQCMPSCHK CLC   RIBQNAME,=CL8'SRCOMPRS'  QUICK COMPRESS?\n         BE    RNAMEHEX                 YES, SHOW RESOURCE NAME IN HEX.\n         CLC   RIBQNAME,=CL8'SYSZIGGI'  TSO TSB?\n         BNE   RGENLCHK                 NO.\n         MVC   RNAME(7),=C'ASID=X'''    INDICATE HEX DIGITS.\n         UNPK  RNAME+7(5),RIBEND(3)     SHOW HEX IN EBCDIC\n         MVI   RNAME+11,C''''           HEXADECIMAL DIGITS.\n         TR    RNAME+7(4),HEX-C'0'\n         BR    R14\n.ENQHEX  ANOP\nRGENLCHK CLI   RIBRNMLN,29              NICE LENGTH TO SHOW IN HEX?\n         BHR   R14                      NO.\n         LR    R7,R2                    SAVE TRT REGISTER.\n         EX    R6,ENQXTEST              ANY UNDISPLAYABLES?\n         LR    R2,R7                    RESTORE TRT REGISTER.\n         BZR   R14                      NO, RETURN WITHOUT ACTION.\nRNAMEHEX LA    R6,1(,R6)                GET LENGTH OF RSOURCE NAME.\n         MVC   RNAME(3),=C' X'''        INDICATE HEX DIGITS.\n         LA    R7,RNAME+3               POINT TO FIRST DISPLAY BYTE.\n         LA    R9,RIBEND                POINT TO RIBRNAME.\nERNHEXLP UNPK  0(3,R7),0(2,9)           UNPACK A BYTE.\n         TR    0(2,R7),HEX-C'0'         CONVERT TO PRINTABLE HEX CHARS.\n         MVI   2(R7),C''''              IN CASE LAST BYTE.\n         LA    R7,2(,R7)                POINT TO NEXT DISPLAY POSITION.\n         LA    R9,1(,R9)                POINT TO NEXT SOURCE BYTE.\n         BCT   R6,ERNHEXLP              PROCESS NEXT BYTE IF ANY.\n         BR    R14\nENQXTEST TRT   RIBEND(0),HEXENQTB       <<< EXECUTED >>>\n         SPACE 2\n         AIF   (&MSPMON).ENOX3\n         AIF   (&MVSMON).ERX1\nRNMEXTRA L     R1,CVTPTR(,0)\n         USING CVT,R1\n         CLC   RIBESYSN,CVTSNAME    ENQUEUE FROM THIS SYSTEM?\n         DROP  R1                   CVT.\n         BNE   ESHOWSYS             NO, POSSIBLY SHOW THE SYSTEM ID.\n         TM    RIBERFLG,RIBESIDV    YES, ENQ ON BEHALF OF USER ASID?\n.ERX1    ANOP\nRNMEXTRA TM    RIBERFLG,RIBESIDV    YES, ENQ ON BEHALF OF USER ASID?\n         BZR   R14                  NO, RETURN WITHOUT ACTION.\n         CLC   RNAME+35(12),BLANKS NO, ROOM TO INDICATE ADDRESS SPACE?\n         BNER  R14                  NO, RETURN WITHOUT ACTION.\n         SLR   R1,R1\n         ICM   R1,B'0011',RIBESAID\n         BZR   R14                  SKIP NAME SEARCH IF ASID IS ZERO.\n         MVC   ENQUSER-1(5),=X'4D81A28984' =C'(ASID'\n         UNPK  ENQUSER+4(5),RIBESAID(3)\n         TR    ENQUSER+4(4),HEX-C'0' SHOW HEX ASID FOR BAD JOB NAME.\n         MVI   ENQUSER+8,C')'\n         SLL   R1,2                 MULTIPLY ASID BY 4 FOR ASVT INDEX.\n         A     R1,ASVTADDR\n         LA    R1,524(,R1)          GET ASVT ENTRY FOR THIS ASID.\n         ICM   R15,B'1111',0(R1)    POINT TO ASCB.\n         BMR   R14                  ASID IS NOT ASSIGNED.\n         ICM   R1,B'1111',JBNI(R15) LOAD POINTER TO JOB NAME.\n         BNZ   ESHOWUSR             HAVE JOB NAME POINTER.\n         ICM   R1,B'1111',JBNS(R15) LOAD POINTER TO JOB NAME.\n         BZR   R14                  NO JOB NAME SO LEAVE ASID ON SHOW.\nESHOWUSR MVC   ENQUSER,0(R1)        DISPLAY USER ADDRESS SPACE NAME.\n         BR    R14                  RETURN TO CALLER.\n         AGO   .ENOX3\nESHOWSYS CLC   RNAME+31(16),BLANKS  NO, ROOM TO INDICATE SYSNAME?\n         BNER  R14                  NO, RETURN WITHOUT ACTION.\n         MVC   RNAME+37(8),RIBESYSN YES, LOAD THE SYSTEM NAME.\n         MVC   RNAME+32(5),=C'(SYS='\n         LA    R1,RNAME+44          POINT TO LAST SYSNAME BYTE.\nRNAMBRAK CLI   0(R1),C' '           TRAILING BLANK?\n         BNE   ENDRNAME             NO.\n         BCTR  R1,0                 YES, TRY PREVIOUS BYTE.\n         B     RNAMBRAK\nENDRNAME MVI   1(R1),C')'           CLOSE PARENTHESES.\n         BR    R14                  RETURN TO CALLER.\n.ENOX3   ANOP\n         SPACE 2\nNQQLDMSK MVC   40(0,R2),SELMAJNM                <<< EXECUTED >>>\nNQRLDMSK MVC   51(0,R2),SELMINNM                <<< EXECUTED >>>\nNQJLDMSK MVC   70(0,R2),SELJOBNM                <<< EXECUTED >>>\nLOADJPFX MVC   HEADINGE+23(0),SELJOBNM          <<< EXECUTED >>>\nQPRFXLEN DC    H'0'                  LENGTH FOR FOLLOWING CLC AND MVC.\nMAJNMCMP CLC   SELMAJNM(0),RIBQNAME             <<< EXECUTED >>>\nLOADQPFX MVC   HEADINGE+34(0),SELMAJNM          <<< EXECUTED >>>\nRPRFXLEN DC    H'0'                  LENGTH FOR RESOURCE NAME PREFIX.\nRNAMLOAD MVC   RNAME(0),RIBEND (= RIBRNAME)     <<< EXECUTED >>>\nLOADRPFX MVC   HEADINGE+45(0),SELMINNM          <<< EXECUTED >>>\n         DROP  R2,R3,R4,R11          ENQLINE, RIB, RIBE, ENQUEUES.\n         TITLE 'ENQUEUE MONITOR - VARIABLES AND CONSTANTS'\nGQTOKEN  DC    F'0'               GQSCAN TOKEN.\nGQREGS   EQU   *,8                GETMAIN REGISTERS SAVE AREA.\nGQREG0   DS    F'0'\nGQREG1   DC    F'0'\nGQSCANR0 DS    0F                 REGISTER 0 AFTER GQSCAN.\nNQRIBFSZ DC    H'40'              SIZE OF RIB BASE (FROM GQSCAN).\nNQRIBESZ DC    H'36'              SIZE OF RIBE (FROM GQSCAN).\nWAITFLAG DC    X'00'\n*        EQU   X'80'              ONLY SHOW ENQUEUE WAITS.\n*        EQU   X'40'              SUPPRESSED MSG SHOWN FOR SYSDSN.\n*        EQU   X'20'              SUPPRESSED MSG SHOWN FOR SYSIKJUA.\n*        EQU   X'10'              SUPPRESSED MSG SHOWN FOR SPFUSER.\n*        EQU   X'08'              ONLY SHOW HARDWARE RESERVES.\n*        EQU   X'04'              SUPPRESSED MSG SHOWN FOR SPFEDIT.\n*        EQU   X'02'              SUPPRESSED MSG SHOWN FOR SYSVSAM.\n*        EQU   X'01'              SUPPRESSED MSG SHOWN FOR USER-ZAP.\nGQHLPSIZ DC    CL6' '             DEBUG DIAGNOSTIC.\n         DC    C'K BYTES OBTAINED FOR GQSCAN WORK AREA'\nQPRFXMSG DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER QUEUE NAME PREFIX OR COMPLETE MAJOR QUEUE NAME'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nSELMAJNM DC    XL8'00'\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(USE',X'&HIGH',C'Q/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL MAJOR QUEUE NAME PREFIX SELECTION)'\n         DC    X'11D1E3'\n         DC    C'ENTER ALL EIGHT (8) BYTES INCLUDING TRAILING BLANKS WH+\n               ERE APPROPRIATE'\n         DC    X'11D2F3'\n         DC    C'FOR IMPROVED PERFORMANCE.'\nMAJSELEN EQU   *-QPRFXMSG\nRPRFXMSG DC    X'C11140403C404000'\n         DCS   SBA,(5,3)\n         DC    X'&LOW'\n         DC    C'ENTER RESOURCE NAME PREFIX'\n         DCS   SBA,(6,3)\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nSELMINNM DC    XL40'00'\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(USE',X'&HIGH',C'R/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL RESOURCE NAME PREFIX SELECTION)'\n         DC    X'11D1E3'\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\nMINSELEN EQU   *-RPRFXMSG\nNQSELINE DC    CL79' ENQUEUE DISPLAY SELECTION CRITERIA:  Q=******** R=+\n               **************** J=******** '\nHEADINGE DC    CL49' Q-NAME E RESOURCE-NAME '\n         DC    CL32'RESOURCE-NAME '\n         DC    C'RLEN OTHERSYS RESV-DEVICE   USER     '\nEWAITHDG DC    C'ALL RESOURCE CONFLICTS (ENQUEUE WAITS)'\nERESVHDG DC    C'ALL DASD HARDWARE RESERVES'\nNSMSG    DC    X'C5115DD81DF82842F22841F2'   \"NO STORAGE\" MESSAGE.\n         DC    CL39'     INSUFFICIENT VIRTUAL STORAGE      '\n         DC    X'1140402842001D402841F4130000'\nNSMSGLEN EQU   *-NSMSG\nQEMSG    DC    X'C5115DD81DF82842F22841F2'  \"QUEUE SCAN ERROR\" MESSAGE.\n         DC    CL39'        QUEUE SCAN ABNORMALITY         '\n         DC    X'1140402842001D402841F4130000'\nQEMSGLEN EQU   *-QEMSG\n         SPACE\nHEXENQTB DS    0H\n         DC    64X'FF',191X'00',X'FF'\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCMGG": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'*\\x02\\x00\\x00\\x00\\x89\"\\x8f\\x01\\x00\\'\\x0f\\x14W\\x000\\x00\\x0e\\x00\\x0f\\xe9\\xc7\\xe7\\xd7\\xf3\\xf0@@@@'", "ispf": {"version": "42.02", "flags": 0, "createdate": "1989-08-16T00:00:00", "modifydate": "2000-09-26T14:57:00", "lines": 48, "newlines": 14, "modlines": 15, "user": "ZGXP30"}, "text": "GRFASTBL DSECT\nGRFASTOD DS   F                 TIME-OF-DAY THAT VALUES WERE COLLECTED.\nGRFASNUM DS   H                 ADDRESS SPACE IDENTIFIER.\nGRFASFLG DS   H                 FLAGS.\nGRFASUSS EQU  X'80'             ADDRESS SPACE DUBBED BY UNIX.\nGRFASTCP EQU  X'40'             ADDRESS SPACE IS USING TCP/IP.\nGRFASTSU EQU  X'20'             ADDRESS SPACE IS TSO USER.\nGRFASNAM DS   CL8               NAME OF ADDRESS SPACE.\nGRFASTCB DS   F                 ADDRESS SPACE TCB CPU TIME.\nGRFASSRB DS   F                 ADDRESS SPACE SRB CPU TIME.\nGRFASIOC DS   F                 ADDRESS SPACE CHANNEL CONNECT TIME.\nGRFASPGF DS   F                 ADDRESS SPACE PAGE FAULT COUNT.\nGRFADTOD DS   F                 CHANGE IN TIME-OF-DAY.\nGRFADTCB DS   F                 CHANGE IN TCB CPU TIME.\nGRFADSRB DS   F                 CHANGE IN SRB CPU TIME.\nGRFADIOC DS   F                 CHANGE IN CHANNEL CONNECT TIME.\nGRFADPGF DS   F                 CHANGE IN PAGE FAULT COUNT.\nGRFASPC1 DS   F                 TCB/ELAPSED PERCENTAGE.\nGRFASPC2 DS   F                 TCB+SRB/ELAPSED PERCENTAGE.\nGRFASPC3 DS   F                 TCB+SRB+IOC/ELAPSED PERCENTAGE.\nGRFASPC4 DS   F                 TCB+SRB+IOC+PAGING/ELAPSED PERCENTAGE.\nGRFAREAL DS   F                 ADDRESS SPACE PAGE FRAME COUNT.\nGRFAESTG DS   F                 ADDRESS SPACE EXPANDED FRAME COUNT.\nGRFANSLT DS   F                 ADDRESS SPACE NON-VIO SLOT COUNT.\nGRFAVSLT DS   F                 ADDRESS SPACE VIO SLOT COUNT.\nGRFASPGN DS   H                 ADDRESS SPACE PERFORMANCE GROUP NUMBER.\nGRFASNDP DS   X                 ADDRESS SPACE NEW DISPATCHING PRIORITY.\nGRFASCLS DS   X                 ADDRESS SPACE TRANSACTION (JOB) CLASS.\n         DS   0D                END OF GRFASTBL DSECT.\nGRFASSIZ EQU  *-GRFASTBL        LENGTH OF ENTRY.\nGRFDVTBL DSECT\nGRFDVUCB DS   0F                DEVICE UCB ADDRESS.\nGRFDVNUM DS   H                 DEVICE NUMBER.\nGRFDVVOL DS   CL6               DEVICE VOLUME SERIAL.\nGRFDVSMP DS   F                 DEVICE SAMPLE COUNT. \\\nGRFDVCON DS   F                 DEVICE CONNECT TIME.  \\\nGRFDVPND DS   F                 DEVICE PENDING TIME.   \\\nGRFDVDIS DS   F                 DEVICE DISCONNECT TIME. \\___(CMB ORDER)\nGRFDVJOB DS   CL8               DEVICE USER JOB NAME.\nGRFDVCYL DS   F                 DEVICE CYLINDER NUMBER OF ACTIVE I/O.\nGRFDVFLG DS   X                 DEVICE FLAGS.\nGRFDVONL EQU  X'80'             DEVICE ONLINE.\nGRFDVPAG EQU  X'40'             DEVICE IS A PAGING VOLUME.\nGRFDVSHR EQU  X'20'             DEVICE IS A SHARED DASD.\nGRFDVDYN EQU  X'10'             DEVICE HAS DYNAMIC I/O DATA.\nGRFDVNAM DS   CL3               DEVICE UCB NAME.\n         DS   0D                END OF GRFDVTBL DSECT.\nGRFDVSIZ EQU  *-GRFDVTBL        LENGTH OF ENTRY.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMPCMK": {"ttr": 5899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x16\\x00\\x00\\x00\\x91)o\\x01\\x05\\x02o#9\\x14\\x8f\\x00\\x96\\x01\\x10\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "43.22", "flags": 0, "createdate": "1991-10-23T00:00:00", "modifydate": "2005-01-26T23:39:00", "lines": 5263, "newlines": 150, "modlines": 272, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1991  PRYCROFT SIX PTY LTD\n         TITLE 'DATA GATHERER DYNAMIC AREA'\n         COPY  IMGATDAT\n         TITLE 'PERFORMANCE HISTORICAL KNOWLEDGE DISPLAY'\n&IMPSECT CSECT\n         USING KNOWSHOW,R11\nKNOWSHOW DS    0H\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '      ADJUST ANY COMMAND INPUT.\n         MVI   INBUFF+1,0        INDICATE CURSOR IN PRIMARY INPUT AREA.\n         B     CMDSCANK          PROCESS ANY (OTHER) INITIAL REQUEST.\n         SPACE\nREDOKNOW DS    0H\n         MVC   HEADING,BLANKS    INITIALIZE HEADING.\n         MVC   HEADING(L'HEADNGK0),HEADNGK0\n         TM    KFLAGS,KDGNOW     IN DATA GATHERING MODE?\n         BO    KPUTPARM          YES, ISSUE PARAMETER PROMPT.\n         TM    KFLAGS,KXM        USING CROSS-MEMORY MODE?\n         BO    KXMINIT           YES, CHECK FOR IMPGAT STARTED TASK.\n         ICM   R5,15,DGEPADDR    USING PRIVATE PROCESSING?\n         BNZ   KGOTDGEP          YES, ALREADY HAVE DATA SO LOOK AT IT.\n         SLR   R5,R5             NO, SO LOOK FOR SMFPRIME DD.\n         L     R4,PSATOLD        GET POINTER TO CURRENT TCB.\n         L     R4,12(,R4)        POINT TO TIOT.\n         LA    R4,24(,R4)        POINT TO TIOELNGH.\nCHKGATDD CLC   SMFPRIME,4(R4)\n         BE    VFYGATDD          FILE EXISTS SO VERIFY DEVICE TYPE.\n         IC    R5,0(,R4)         GET TIOT ENTRY LENGTH.\n         AR    R4,R5             POINT TO NEXT TIOT ENTRY.\n         CLI   0(R4),0           ZERO LENGTH ENTRY?\n         BNE   CHKGATDD          NO, CHECK OUT THIS ENTRY.\n         LA    R3,1              YES, PREPARE FOR MESSAGE 1.\n         B     BADGATDD          NOT IN TIOT SO NO PRIMING FILE.\nVFYGATDD LA    R3,3              PREPARE FOR MESSAGE 3.\n         ICM   R5,7,17(R4)       LOAD UCB POINTER.\n         BZ    BADGATDD          ZERO SO CAN'T BE DASD OR TAPE.\n         TM    18(R5),X'A0'      TAPE OR DASD DEVICE TYPE?\n         BM    KCALLGAT          YES, GO CALL IMDATGAT.\nBADGATDD TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    KGATDOWN          NO, DISPLAY ERROR MESSAGE.\nKXMINIT  L     R10,=A(KGQSCAN)   YES, TRY FOR STARTED TASK.\n         BR    R10               PERFORM CROSS-MEMORY INITIALIZATION.\n         SPACE\nKCALLGAT DS    0H\n         LA    R3,4              PREPARE FOR MESSAGE 4.\n         LOAD  EPLOC=DATGATNM,ERRET=KGATDOWN\n         LR    R1,R0             GET THE ENTRY POINT OF IMDATGAT.\n         ST    R0,DGEPADDR       SAVE IT FOR LATER.\n         LA    R0,DGOPTKNM       POINT TO TEMPORARY NAME TO IDENTIFY.\n         IDENTIFY EPLOC=(0),ENTRY=(1)\n         OI    KFLAGS,KDGNOW     FLAG ABOUT TO CALL IMDATGAT.\nKPUTPARM LA    R1,KPARMPRM       POINT TO PARAMETER PROMPTING SCREEN.\n         LA    R0,KPARMLEN       GET THE SCREEN DATA STREAM LENGTH.\n         B     PUTSCRNK          GO PROMPT FOR PARAMETERS.\n         SPACE\nKGATDOWN DS    0H\n         XC    KTOPADRS(KTOPADLN),KTOPADRS    RESET TOP ADDRESS.\n         MVI   KHDGCNT+1,1       REFRESH HEADING LINE COUNT.\n         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\n         MVC   KSHOWSYS,BLANKS   FLAG NO GATHERED DATA SHOWING.\n         LA    R2,BUFFER         POINT TO FIRST DETAIL LINE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(2)\n         SLL   R3,5              MULTIPLY MESSAGE ID FOR INDEX.\n         LA    R3,KBADMSGS(R3)   POINT TO THE ERROR MESSAGE.\n         MVC   LL-56(32,R2),0(R3) LOAD THE ERROR MESSAGE.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         B     KNOWSUMM          GO SHOW THE SYSTEM SUMMARY LINE.\n         SPACE\nKBASESPN L     R6,DGTCBADR       POINT TO THE DATA GATHERER TCB.\n         LA    R0,4\n         BAS   R14,R6ACCESS\n         L     R4,0(,R6)         POINT TO THE TOP RB.\n         LA    R0,32\nDGRBLOOP LR    R5,R4             COPY THE RB ADDRESS.\n         BAS   R14,R4ACCESS\n         ICM   R4,7,29(R4)       POINT TO NEXT RB.\n         C     R4,DGTCBADR       IS THIS THE TCB ADDRESS?\n         BNE   DGRBLOOP          NO, FOLLOW CHAIN TO ORIGINAL RB.\n         LA    R0,16\n         BAS   R14,R5ACCESS\n         L     R4,12(,R5)        YES, POINT TO THE ORIGINAL CDE.\n         SLL   R4,8\n         SRL   R4,8              ENSURE 24-BIT ADDRESS.\n         LA    R0,32\n         BAS   R14,R4ACCESS\n         L     R5,16(,R4)        POINT TO IMDATGAT ENTRY POINT.\n         LA    R0,64\n         BAS   R14,R5ACCESS\nKGOTDGEP ICM   R4,15,52(R5)      POINT TO GATHERED DATA BASE ENTRY.\n         BZ    KBASESPN          SPIN IF NOT FILLED IN YET.\n         LA    R0,DGBASLEN\n         BAS   R14,R4ACCESS\n         ST    R4,KBASEADR       SAVE ADDRESS OF BASE ENTRY.\n         USING DGBASE,R4\n         CLI   KSHOWSYS,C' '     ANY SELECTION YET?\n         BH    KTESTSYS          YES, GO TEST WHAT IT IS.\nKLISTSYS L     R10,=A(KDISPSYS)  NO, GO FORMAT AND SHOW SELECTION LIST.\n         BR    R10               INVOKE IT.\nKTESTSYS CLI   KSHOWSYS,C'*'     ANY SYSTEM SELECTED?\n         BNE   KUSESYS           YES, GO LOOK FOR PERFORMANCE DATA.\n         L     R10,=A(KSMFITEM)  YES, POINT TO SMF ITEM LIST ROUTINE.\n         BR    R10               INVOKE IT.\nKUSESYS  ICM   R0,15,DGNUMSYS    ANY SYSTEMS IN LIST?\n         BZ    KLISTSYS          NO, DISPLAY SELECTION LIST.\n         LA    R4,DGFSTSYS       YES, POINT TO FIRST SYSTEM ENTRY ADDR.\n         B     KSYSFRST          SEE IF ANY SYSTEMS YET.\n         DROP  R4                DGBASE.\n         USING DGSYSTEM,R4\nKSYSSRCH LA    R0,DGSYSLEN\n         BAS   R14,R4ACCESS\n         CLC   KSHOWSYS,DGSYSID  FOUND THE REQUIRED SYSTEM ENTRY?\n         BE    KSYSPERF          YES.\nKSYSFRST LR    R5,R4             NO, SAVE THIS SYSTEM ENTRY'S ADDRESS.\n         ICM   R4,15,DGSYSNXT    POINT TO THE NEXT ONE.\n         BNZ   KSYSSRCH          CHECK IT OUT.\n         LR    R4,R5             END OF LIST SO POINT BACK TO LAST ONE.\n         MVC   KSHOWSYS,DGSYSID  SELECT THE LAST ONE BY DEFAULT.\nKSYSPERF ICM   R10,15,DGNUMINT   ANY PERFORMANCE DATA AVAILABLE?\n         BZ    KZOOMOUT          NO, CAN'T SELECT THIS SYSTEM.\n         L     R10,=A(KNOWSYS)   GET PERFORMANCE DISPLAY SETUP ROUTINE.\n         BR    R10               INVOKE IT.\n         SPACE\n         USING DGRMFINT,R5\nKDGINTLP LA    R0,DGINTLEN\n         BAS   R14,R5ACCESS\nKINTAXOK LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.\n         CR    R2,R15            CURRENTLY LOADING THIS LINE?\n         BNE   KHDGOKAY          NO, LEAVE HEADING AS IS.\n         CLI   DGPRSMNM,C' '     YES, ANY PR/SM PARTITION NAME PRESENT?\n         BNH   KHDGOKAY          NO.\n         MVC   HEADING+35(18),=CL18'IN PR/SM PARTITION'\n         MVC   HEADING+54(8),DGPRSMNM\nKHDGOKAY MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         CLC   DGINTDAT,CVTDATE  RMF DATE GREATER THAN CVTDATE?\n         BH    KPDLFINT          YES, DATA MUST BE FROM PDLF.\n         DROP  R1                CVT.\n         TM    KFLAGS,KDATEFMT   NO, USING YYMMDD DATE FORMAT ANYWAY?\n         BO    KINTYMD           YES.\n         MVC   WORK(9),EDKYYDDD  NO, SHOW THE JULIAN DATE.\n         ED    WORK(9),DGINTDAT  DISPLAY THE DATE OF THE RMF INTERVAL.\n         MVC   LL-79(6,R2),WORK+3\n         B     KINTDTOK\nKINTYMD  L     R1,DGINTDAT       GET THE RMF INTERVAL JULIAN DATE.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7            CONVERT THE JULIAN DATE.\n         MVC   LL-79(2,R2),WORK  LOAD YY\n         MVC   LL-77(2,R2),WORK+3 AND MM\n         MVC   LL-75(2,R2),WORK+6 AND DD.\n         B     KINTDTOK\nKPDLFINT MVC   WORK,ED7\n         ED    WORK,DGINTDAT     DISPLAY THE DATE OF THE PDLF INTERVAL.\n         MVC   LL-79(6,R2),WORK+2\nKINTDTOK MVC   WORK,EDKHHMM\n         ED    WORK,DGINTTIM     DISPLAY THE TIME OF THE RMF INTERVAL.\n         MVC   LL-72(2,R2),WORK+2\n         MVI   LL-70(R2),C':'\n         MVC   LL-69(2,R2),WORK+4\n         LA    R1,KLEFT          POINT TO LEFT DISPLAY SPECIFICATION.\n         BAS   R14,KNOWDISP      INVOKE DISPLAY ROUTINE.\n         MVI   LL-66(R2),X'3B'   SEPARATE THIS DISPLAY AREA.\n         LA    R1,KRIGHT         POINT TO RIGHT DISPLAY SPECIFICATION.\n         BAS   R14,KNOWDISP      INVOKE DISPLAY ROUTINE.\n         MVI   LL-33(R2),X'3B'   SEPARATE THIS DISPLAY AREA.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   KEODGDAT          YES, END OF DATA GATHERER DISPLAY.\n         ICM   R5,15,DGINTNXT    NO, POINT TO NEXT RMF INTERVAL ENTRY.\n         BNZ   KDGINTLP          DISPLAY DATA FROM NEXT INTERVAL.\n         DROP  R4,R5             DGSYSTEM, DGRMFINT.\nKEODGDAT DS    0H\n         TM    KFLAGS,KXM        USING CROSS-MEMORY ACCESS?\n         BZ    KXMUNDUN          NO, SKIP CROSS-MEMORY STUFF.\n         L     R10,=A(KXMUNDO)   YES, RESTORE NORMAL ENVIRONMENT.\n         BR    R10               PERFORM CROSS-MEMORY TERMINATION.\nKXMUNDUN DS    0H                NO LONGER IN CROSS-MEMORY ENVIRONMENT.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   KNOWFILL          YES.\n         SPACE\nKNOWSUMM DS    0H\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   KNOWFILL          YES.\n         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.\n         LA    R2,4(,R2)         ADJUST BUFFER POINTER.\n         SPACE\nKNOWFILL DS    0H\n         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.\n         CLI   KSHOWSYS,C' '     IN SYSTEM SELECTION MODE?\n         BNH   KNOWTRLR          YES, DATA STREAM IS NOW COMPLETE.\n         CLI   KSHOWSYS,C'*'     NO, SHOWING GENERAL SMF EVENTS?\n         BE    KNOWTRLR          YES, DATA STREAM IS NOW COMPLETE.\n         MVC   0(TRLRKLEN,R2),TRAILERK  NO, LOAD THE SCREEN TRAILER.\n         LA    R2,TRLRKLEN(,R2)  ADJUST BUFFER POINTER.\n         TM    KFLAGS,KDATEFMT   USING YYMMDD DATE FORMAT?\n         BZ    KNOWTRLJ          NO, USING JULIAN DATE FORMAT.\n         MVC   0(TRLRKGLN,R2),TRAILRKG  LOAD THE DATE SCREEN TRAILER.\n         LA    R2,TRLRKGLN(,R2)  ADJUST BUFFER POINTER.\n         B     KNOWTRLR          DATA STREAM IS NOW COMPLETE.\nKNOWTRLJ MVC   0(TRLRKJLN,R2),TRAILRKJ  LOAD THE DATE SCREEN TRAILER.\n         LA    R2,TRLRKJLN(,R2)  ADJUST BUFFER POINTER.\nKNOWTRLR L     R9,CCTADDR        GET CCT ADDRESS.\n         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.\n         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.\n         LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         LR    R0,R2             POINT TO END OF SCREEN BUFFER.\n         SR    R0,R1             GET SCREEN BUFFER LENGTH.\nPUTSCRNK BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         TM    MODESW2,XFLG      NO, SUBROUTINE EXIT REQUIRED?\n         BZ    NOTEXITK          NO, PROCESS SUBCOMMAND.\nDOEXITK  DS    0H\n         AIF   (&MSPMON).DOEXITK\n         MODESET MF=(E,MDSTSUP0)\n         L     R5,KGATALET       GET THE ALET TO DELETE.\n         ALESERV DELETE,ALET=(5),CHKEAX=NO,MF=(E,ALESERVL)\n         ST    R15,KGATALET      ZERO THE REMEMBERED ALET VALUE.\n         MODESET MF=(E,MDSTPROB)\n.DOEXITK ANOP\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nNOTEXITK L     R15,=A(KNOWPARS)  GET FIELD PARSE ROUTINE ENTRY POINT.\n         BASR  R14,R15           PROCESS SECONDARY INPUT FIELDS.\n         TM    KFLAGS,KDGNOW     IN DATA GATHERING MODE?\n         BZ    KCHKPERR          NO, CHECK FOR PARSING ERRORS.\n         LA    R1,KDGPLIST       POINT TO PARAMETER LIST FOR IMDATGAT.\n         LINK  EPLOC=DGOPTKNM    INVOKE IMDATGAT.\n         NI    KFLAGS,255-KDGNOW FLAG NO LONGER CALLING IMDATGAT.\n         L     R5,DGEPADDR       GET THE LOAD MODULE ADDRESS.\n         B     KGOTDGEP          GO LOOK AT GATHERED DATA.\nKCHKPERR CLI   KERRSPLN,8        ANY INPUT FIELD ERRORS?\n         BL    GETCMDHK          NO, CONTINUE INPUT PROCESSING.\n         SLR   R0,R0             YES.\n         IC    R0,KERRSPLN       GET THE ERROR RESPONSE LENGTH.\n         LA    R1,KERRRESP       POINT TO THE WCC OF THE DATA STREAM.\n         MVI   KERRSPLN,7        RESET LENGTH TO JUST HEADER.\n         B     PUTSCRNK          SHOW THE ERRORS FOR USER CORRECTION.\nGETCMDHK CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    KNOWAUTO          YES.\n         CLI   INBUFF,1          PF1/13?\n         BE    GIVEHLPK          YES, HELP.\n         CLI   INBUFF,3          PF3/15?\n         BE    KNOWPFK3          YES, HELP.\n         CLI   INBUFF,5          PF5/17?\n         BE    KNOWPFK5          YES.\n         CLI   INBUFF,7          PF7/19?\n         BE    KNOWPFUP          YES, SCROLL UP.\n         CLI   INBUFF,8          PF8/20?\n         BE    KNOWPFDN          YES, SCROLL DOWN.\n         CLI   INBUFF,10         PF10/22?\n         BE    KNOWLEFT          YES, SCROLL LEFT.\n         CLI   INBUFF,11         PF11/23?\n         BE    KNOWRITE          YES, SCROLL RIGHT.\nCMDSCANK CLI   INCHARS,C'S'      SYSTEM SELECTION LIST REQUEST?\n         BE    KZOOMOUT          YES.\n         CLI   INCHARS,C'D'      DATE FORMAT TOGGLE REQUEST?\n         BE    KCHGDATE          YES.\n         CLI   INCHARS,C'B'      BOTTOM REQUESTED?\n         BE    KNOWDOWN          YES.\n         CLI   INCHARS,C'T'      TOP REQUESTED?\n         BE    KNOWUP            YES.\n         CLI   INCHARS,C'+'      SCROLL DOWN REQUESTED?\n         BE    KNOWDOWN          YES.\n         CLI   INCHARS,C'-'      SCROLL UP REQUESTED?\n         BE    KNOWUP            YES.\n         CLI   INCHARS,C'<'      SCROLL LEFT REQUESTED?\n         BE    KNOWLEFT          YES.\n         CLI   INCHARS,C'>'      SCROLL RIGHT REQUESTED?\n         BE    KNOWRITE          YES.\n         CLI   INCHARS,C'F'      FIX OR FREE REQUEST?\n         BE    KNOWFIDL          YES.\n         CLI   INCHARS,C'J'      SPECIFY JOB NAME MASK REQUEST?\n         BE    KGETJMSK          YES.\n         CLI   INCHARS,C'L'      SMF ITEM NAME LOCATE REQUEST?\n         BE    KLOCITEM          YES.\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    REDOKNOW          YES.\n         CLI   INCHARS,C'G'      \"GRAPH PAPER\" TOGGLE REQUESTED?\n         BNE   GIVEHLPK          NO, SHOW HELP PANEL.\n         CLI   INCHARS+1,C'L'    TOGGLE LEFT DISPLAY MODE?\n         BE    KMODELFT          YES.\n         CLI   INCHARS+1,C'R'    TOGGLE RIGHT DISPLAY MODE?\n         BE    KMODERIT          YES.\n         XI    KGCHAR,C' '+X'09' ALTER GRAPH BACKGROUND.\n         B     REDOKNOW          REGENERATE DISPLAY.\nGIVEHLPK MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     PUTSCRNK          GO DISPLAY HELP PANEL.\nKCHGDATE XI    KFLAGS,KDATEFMT   TOGGLE YY.DDD/YYMMDD DATE FORMATS.\n         B     REDOKNOW          REGENERATE DISPLAY.\nKMODELFT XI    KLEFT+8,X'80'     TOGGLE LEFT DISPLAY MODE FLAG.\n         B     REDOKNOW          REGENERATE DISPLAY.\nKMODERIT XI    KRIGHT+8,X'80'    TOGGLE RIGHT DISPLAY MODE FLAG.\n         B     REDOKNOW          REGENERATE DISPLAY.\nKNOWPFK3 SLR   R0,R0             GET ZERO.\n         ST    R0,KEVNTADR       ERASE EVENT LIST POINTER.\n         MVC   KSHOWITM,BLANKS   CLEAR SMF ITEM NAME SELECTION.\n         CLI   ENDDEPTH+1,0      ZOOM OUT TO ITEM LIST?\n         BNE   REDOKNOW          YES.\nKZOOMOUT MVC   KSHOWSYS,BLANKS   FORCE SYSTEM SELECTION LIST DISPLAY.\n         XC    KTOPADRS(KTOPADLN),KTOPADRS    RESET TOP ADDRESS.\n         MVI   KHDGCNT+1,1       UPDATE HEADING LINE COUNT.\n         B     REDOKNOW\nKNOWPFDN ICM   R1,15,SCRLAMT     ANY SCROLL AMOUNT SPECIFIED?\n         BNZ   KNOWDNOK          YES, USE IT.\nKNOWDOWN MVI   INBUFF,8          REMEMBER 'DOWN' EXPLICITLY REQUESTED.\n         CLI   INCHARS,C'M'      SCROLL DOWN MAXIMUM REQUESTED?\n         BE    KNOWDNMX          YES, GO DO IT.\n         CLI   INCHARS,C'B'      BOTTOM REQUESTED?\n         BE    KNOWDNMX          YES, GO DO IT.\n         CLI   INCHARS,C'+'      PLUS SUBCOMMAND?\n         BNE   KNOWDNPG          NO, SCROLL DOWN A PAGE.\n         CLI   INCHARS+1,C'M'    YES, SCROLL DOWN MAXIMUM REQUEST?\n         BE    KNOWDNMX          YES, GO DO IT.\n         CLI   INCHARS+1,C'0'    NO, NUMERIC OPERAND?\n         BL    KNOWDNPG          NO, SO SCROLL DOWN A PAGE.\n         MVC   KSCRLAMT+3(1),INCHARS+1\n         NI    KSCRLAMT+3,X'0F'  YES, SAVE THE NUMBER FOR DISPLAY TIME.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWDNMX MVI   KSCRLAMT,X'7F'    SCROLL DOWN AS FAR AS POSSIBLE.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWAUTO MVI   INBUFF,8          REMEMBER 'DOWN' EXPLICITLY REQUESTED.\nKNOWDNPG L     R1,LINES          GET LINES PER SCREEN.\n         SH    R1,KHDGCNT        GET DETAIL LINES TO SCROLL.\nKNOWDNOK ST    R1,KSCRLAMT       SAVE FOR FOR DISPLAY TIME.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWPFUP ICM   R1,15,SCRLAMT     ANY SCROLL AMOUNT SPECIFIED?\n         BNZ   KNOWUPOK          YES, USE IT.\nKNOWUP   CLI   INCHARS,C'M'      SCROLL UP MAXIMUM REQUESTED?\n         BE    KNOWUPMX          YES, GO DO IT.\n         CLI   INCHARS,C'T'      TOP REQUESTED?\n         BE    KNOWUPMX          YES, GO DO IT.\n         CLI   INCHARS,C'-'      MINUS SUBCOMMAND?\n         BNE   KNOWUPPG          NO, SCROLL UP A PAGE.\n         CLI   INCHARS+1,C'M'    YES, SCROLL UP MAXIMUM REQUEST?\n         BE    KNOWUPMX          YES, GO DO IT.\n         CLI   INCHARS+1,C'0'    NO, NUMERIC OPERAND?\n         BL    KNOWUPPG          NO, SO SCROLL UP A PAGE.\n         MVC   KSCRLAMT+3(1),INCHARS+1\n         NI    KSCRLAMT+3,X'0F' YES, GET THE NUMBER.\n         L     R1,KSCRLAMT\n         LNR   R1,R1             MAKE IT NEGATIVE FOR UP.\n         ST    R1,KSCRLAMT       SAVE THE NUMBER FOR DISPLAY TIME.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWUPMX SLR   R0,R0             CAUSE TOP TO BE DIRECTLY ACCESSED.\n         LA    R1,KTOPADLN/4     GET THE NUMBER OF POINTERS TO CHECK.\n         LA    R15,KTOPADRS+KTOPADLN POINT PAST LAST ONE.\nKUPMAXLP AHI   R15,-4            BACKUP ONE POINTER.\n         CL    R0,0(,R15)        IS THIS POINTER ZERO?\n         BNE   KUPMAXNX          NO, TAKE ACTION.\n         BCT   R1,KUPMAXLP       YES, CONTINUE POINTER SCAN.\nKUPMAXNX ST    R0,0(,R15)        ZERO THE ACTIVE POINTER.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWUPPG L     R1,LINES          GET LINES PER SCREEN.\n         SH    R1,KHDGCNT        GET DETAIL LINES TO SCROLL.\nKNOWUPOK LNR   R1,R1             MAKE IT NEGATIVE FOR UP.\n         ST    R1,KSCRLAMT       SAVE FOR FOR DISPLAY TIME.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWLEFT CLI   KSHOWSYS,C' '     IN SYSTEM SELECTION MODE?\n         BNH   REDOKNOW          YES, UPDATE IMDATGAT STATUS.\n         CLI   KSHOWSYS,C'*'     DISPLAYING SMF EVENTS?\n         BE    KSMFLEFT          YES.\n         LA    R15,KLEFT         POINT TO LEFT SIDE DISPLAY PARAMETERS.\n         BAS   R14,KGOLEFT       INVOKE SCROLL LEFT PROCESSING.\n         LA    R15,KRIGHT        POINT TO RIGHT SIDE DISPLAY PARMS.\n         BAS   R14,KGOLEFT       INVOKE SCROLL LEFT PROCESSING.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKGOLEFT  ICM   R1,15,0(R15)      GET DISPLAY CODE OF THIS SIDE.\n         BMR   R14               FROZEN SO RETURN WITHOUT ACTION.\n         CLI   INCHARS+1,C'<'    PREVIOUS DISPLAY TYPE REQUESTED?\n         BE    KLEFTER           YES.\n         L     R7,4(,R15)        NO, GET DISPLAY ITEM NUMBER.\n         BCTR  R7,0              DECREMENT IT.\n         LTR   R7,R7             STILL A POSITIVE NUMBER?\n         BNP   KLEFTER           NO, SCROLL LEFT TO PREVIOUS TYPE.\n         ST    R7,4(,R15)        YES, UPDATE THE ITEM NUMBER.\n         BR    R14               RETURN.\nKLEFTER  BCTR  R1,0              DECREMENT FOR SCROLL LEFT.\n         ST    R1,0(,R15)        SAVE THE NEW CODE.\n         LTR   R1,R1             IS IT LESS THAN ZERO?\n         BM    KLFTWRAP          YES, SO WRAP-AROUND.\n         LR    R7,R1             COPY DISPLAY CODE.\n         SLL   R7,2              MULTIPLY BY FOUR FOR INDEX.\n         L     R7,KMAXITEM(R7)   GET THE MAXIMUM ITEM NUMBER.\n         LTR   R7,R7             ANY ITEMS FOR THIS DISPLAY TYPE?\n         BNP   KLEFTER           NO, GO A WHOLE CATEGORY LEFT AGAIN.\n         ST    R7,4(,R15)        YES, SUPPLY DISPLAY ITEM NUMBER.\n         BR    R14               RETURN.  (ITEM NEEDED TO AVOID LOOP.)\nKLFTWRAP LA    R1,1              SCROLL LEFT TO RIGHT-MOST ITEM.\n         A     R1,KMAXSHOW       GET MAXIMUM TYPE CODE PLUS ONE.\n         B     KLEFTER           SCROLL LEFT A WHOLE DISPLAY CATEGORY.\nKSMFLEFT MVI   INBUFF,10         ENSURE SCROLL LEFT REQUEST FLAGGED.\n         B     REDOKNOW          GO UPDATE DISPLAY.\nKNOWRITE CLI   KSHOWSYS,C' '     IN SYSTEM SELECTION MODE?\n         BNH   REDOKNOW          YES, UPDATE IMDATGAT STATUS.\n         CLI   KSHOWSYS,C'*'     DISPLAYING SMF EVENTS?\n         BE    KSMFRITE          YES.\n         LA    R15,KLEFT         POINT TO LEFT SIDE DISPLAY PARAMETERS.\n         BAS   R14,KGORIGHT      INVOKE SCROLL RIGHT PROCESSING.\n         LA    R15,KRIGHT        POINT TO RIGHT SIDE DISPLAY PARMS.\n         BAS   R14,KGORIGHT      INVOKE SCROLL RIGHT PROCESSING.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKGORIGHT ICM   R1,15,0(R15)      GET DISPLAY CODE OF THIS SIDE.\n         BMR   R14               FROZEN SO RETURN WITHOUT ACTION.\n         CLI   INCHARS+1,C'>'    NEXT DISPLAY TYPE REQUESTED?\n         BE    KRIGHTER          YES.\n         LR    R7,R1             NO, COPY DISPLAY CODE.\n         SLL   R7,2              MULTIPLY BY FOUR FOR INDEX.\n         L     R7,KMAXITEM(R7)   GET THE MAXIMUM ITEM NUMBER.\n         C     R7,4(,R15)        GREATER THAN CURRENT ITEM NUMBER?\n         BNH   KRIGHTER          NO, GO RIGHT TO NEXT CATEGORY.\n         L     R7,4(,R15)        YES, GET THE CURRENT ITEM NUMBER.\n         LA    R7,1(,R7)         INCREMENT IT.\n         ST    R7,4(,R15)        SAVE IT.\n         BR    R14               RETURN.\nKRIGHTER LA    R1,1(,R1)         INCREMENT FOR SCROLL RIGHT.\n         LA    R7,1\n         ST    R7,4(,R15)        FORCE FIRST ITEM OF DISPLAY TYPE.\nKISRIGHT ST    R1,0(,R15)        SAVE THE NEW CODE.\n         C     R1,KMAXSHOW       GONE PAST MAXIMUM DISPLAY VALUE?\n         BH    KRITWRAP          YES, SO WRAP-AROUND.\n         LR    R7,R1             COPY DISPLAY CODE.\n         SLL   R7,2              MULTIPLY BY FOUR FOR INDEX.\n         L     R7,KMAXITEM(R7)   GET THE MAXIMUM ITEM NUMBER.\n         LTR   R7,R7             ANY ITEMS IN THIS CATEGORY?\n         BPR   R14               YES, RETURN.\n         B     KRIGHTER          NO, TRY NEXT DISPLAY TYPE.\nKRITWRAP SLR   R1,R1             SHOW LEFT-MOST DISPLAY TYPE.\n         B     KISRIGHT          SAVE THE ZERO VALUE.\nKSMFRITE MVI   INBUFF,11         ENSURE SCROLL RIGHT REQUEST FLAGGED.\n         B     REDOKNOW          GO UPDATE DISPLAY.\nKNOWFIDL CLI   INCHARS+1,C' '    FREE REQUEST?\n         BE    KNOWFREE          YES.\n         CLI   INCHARS+1,C'L'    FIX LEFT REQUEST?\n         BE    KNOWFIXL          YES.\n         CLI   INCHARS+1,C'R'    FIX RIGHT REQUEST?\n         BNE   GIVEHLPK          NO, SHOW THE HELP PANEL.\n         OI    KRIGHT,X'80'      YES, FIX THE RIGHT SIDE DISPLAY.\n         NI    KLEFT,X'7F'       ALLOW LEFT SIDE TO SCROLL SIDEWAYS.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWFIXL OI    KLEFT,X'80'       FIX THE LEFT SIDE DISPLAY.\n         NI    KRIGHT,X'7F'      ALLOW THE RIGHT TO SCROLL SIDEWAYS.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWFREE NI    KLEFT,X'7F'       ALLOW LEFT SIDE TO SCROLL SIDEWAYS.\n         NI    KRIGHT,X'7F'      ALLOW THE RIGHT TO SCROLL SIDEWAYS.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKNOWPFK5 XI    KLEFT+8,X'80'     TOGGLE LEFT DISPLAY MODE FLAG.\n         XI    KRIGHT+8,X'80'    TOGGLE RIGHT DISPLAY MODE FLAG.\n         B     REDOKNOW          REGENERATE DISPLAY.\n         SPACE\nKNULDATA DS    0H                RELEVANT RMF DATA NOT ENCOUNTERED YET.\n         TM    8(R1),X'80'       IN TABULAR MODE?\n         BOR   R14               YES, SO JUST RETURN.\n         L     R1,8(,R1)         NO, GET LINE DISPLAY SLOT OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY SLOT.\nKNULPLOT DS    0H                \"GRAPH PAPER\" ONLY WHEN NO DATA.\n         SLR   R9,R9             ZERO THE QUANTITY TO BE PLOTTED.\nKNOWPLOT DS    0H                GRAPH PLOT SUBROUTINE.\n         CLI   0(R1),X'3B'       BEEN HERE BEFORE?\n         BE    KNOPLTOK          YES, THE BACKGROUND STUFF IS DONE.\n         MVI   0(R1),X'3B'       NO, SEPARATE THIS DISPLAY AREA.\n         MVC   1(1,R1),KGCHAR    LOAD THE BACKGROUND CHARACTER.\n         MVC   2(24,R1),1(R1)    BUBBLE IT ALONG THE GRAPH AREA.\nKNOPLTOK LA    R9,2(,R9)         ROUND THE VALUE UPWARDS.\n         SRA   R9,2              QUARTER IT.\n         BZR   R14               DON'T PLOT ANYTHING FOR ZERO PERCENT.\n         STC   R15,1(,R1)        SUPPLY GRAPHIC CODE.\n         BCTR  R9,0              DECREMENT FOR BYTE ALREADY SUPPLIED.\n         BCTR  R9,0              DECREMENT FOR EXECUTE.\n         LTR   R9,R9             MORE THAN ONE SCREEN BYTE REQUIRED?\n         BMR   R14               NO, THIS PLOT NOW COMPLETE.\n         CHI   R9,23             YES, WILL IT FIT ON THE GRAPH?\n         BNH   KNOPLTEX          YES, PROCEED.\n         LA    R9,23             NO, SO TRUNCATE IT TO THE MAXIMUM.\nKNOPLTEX EX    R9,KNOPLTMV       SUPPLY THE REST.\n         BR    R14               NOW THIS PLOT IS COMPLETE.\nKNOPLTMV MVC   2(0,R1),1(R1)                    <<< EXECUTED >>>\n         SPACE 2\nKNOWDISP DS    0H                DISPLAY SUBROUTINE.\n         ST    R14,KSAVER14      SAVE RETURN ADDRESS.\n         L     R15,0(,R1)        GET DISPLAY TYPE.\n         SLL   R15,2             MUTLIPLY BY 4 FOR INDEX.\n         L     R10,KDISPTBL(R15) LOAD APPROPRIATE ROUTINE ENTRY POINT.\n         BR    R10               BRANCH TO APPROPRIATE ROUTINE.\nKLOCITEM CLI   KSHOWSYS,C'*'     LOOKING AT SMF EVENT LIST?\n         BNE   GIVEHLPK          NO, SHOW THE HELP PANEL.\n         MVC   KLOCNAME,INCHARS+1    PREPARE FOR PRE-PROMPT VALUE.\n         CLI   INCHARS+1,C' '    PRE-PROMPT VALUE SPECIFIED?\n         BH    REDOKNOW          YES, GO UPDATE DISPLAY.\nKGETLOCN LA    R1,KLOCNPRM\n         LA    R0,KLOCNLEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    DOEXITK           YES, DO IT.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    KGETLOCN          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   KLOCNAME,INCHARS  LOAD SUPPLIED DATA SET NAME/PREFIX.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nKGETJMSK XC    SELJOBNM,SELJOBNM ERASE PREVIOUS JOBNAME.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    KALLJOBS          YES, DO IT.\nKGETJNAM LA    R1,JPRFXMSG\n         LA    R0,JOBSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    KGETJNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   SELJOBNM,INCHARS  EXTRACT SPECIFIED PREFIX.\n         MVI   INBUFF+2,0        PREVENT ANY ZOOM PROCESSING.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nKALLJOBS STH   R1,JPRFXLEN       STORE PREFIX LENGTH.\n         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.\nR4ACCESS DS    0H                MAKE GPR 4 ADDRESS RELEVANT DATA.\n         TM    KFLAGS,KXM        USING CROSS-MEMORY MODE?\n         BZR   R14               NO, ADDRESSABILITY IS OKAY.\n         AIF   (&MSPMON).R4XAK\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BOR   R14               YES, USING ACCESS REGISTERS.\n.R4XAK   ANOP\n         STM   R14,R12,12(R13)   SAVE REGISTERS.\n         LA    R3,X'80'          USE STORAGE KEY EIGHT.\n         LR    R8,R0             GET THE LENGTH OF DATA TO FETCH.\n         LA    R7,SECTIOWA       POINT TO THE TARGET AREA.\n         XC    0(256,R7),0(R7)   RESET RESIDUAL DATA.\n         MVCP  0(8,R7),0(R4),3   FETCH THE DATA.\n         LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         LA    R4,SECTIOWA       POINT TO THE FETCHED DATA.\n         BR    R14\nR5ACCESS DS    0H                MAKE GPR 5 ADDRESS RELEVANT DATA.\n         TM    KFLAGS,KXM        USING CROSS-MEMORY MODE?\n         BZR   R14               NO, ADDRESSABILITY IS OKAY.\n         AIF   (&MSPMON).R5XAK\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BOR   R14               YES, USING ACCESS REGISTERS.\n.R5XAK   ANOP\n         STM   R14,R12,12(R13)   SAVE REGISTERS.\n         LA    R3,X'80'          USE STORAGE KEY EIGHT.\n         LR    R8,R0             GET THE LENGTH OF DATA TO FETCH.\n         LA    R0,256            GET MAXIMUM \"CHUNK\" SIZE.\n         LA    R7,SECTCT         POINT TO THE TARGET AREA.\nR5AXESLP XC    0(256,R7),0(R7)   RESET RESIDUAL DATA.\n         MVCP  0(R8,R7),0(R5),R3 FETCH THE DATA.\n         SR    R8,R0             DID 256 BYTES CONTAIN THE WHOLE AREA?\n         BNP   R5AXESOK          YES, RETURN TO CALLER.\n         ALR   R7,R0             NO, ADVANCE TARGET POINTER.\n         ALR   R5,R0             ADVANCE THE SOURCE POINTER.\n         B     R5AXESLP          GET ANOTHER CHUNK.\nR5AXESOK LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         LA    R5,SECTCT         POINT TO THE FETCHED DATA.\n         BR    R14\nR6ACCESS DS    0H                MAKE GPR 6 ADDRESS RELEVANT DATA.\n         TM    KFLAGS,KXM        USING CROSS-MEMORY MODE?\n         BZR   R14               NO, ADDRESSABILITY IS OKAY.\n         AIF   (&MSPMON).R6XAK\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BOR   R14               YES, USING ACCESS REGISTERS.\n.R6XAK   ANOP\n         STM   R14,R12,12(R13)   SAVE REGISTERS.\n         LA    R3,X'80'          USE STORAGE KEY EIGHT.\n         LR    R8,R0             GET THE LENGTH OF DATA TO FETCH.\n         LA    R7,SECTCT+512     POINT TO THE TARGET AREA.\n         XC    0(256,R7),0(R7)   RESET RESIDUAL DATA.\n         MVCP  0(R8,R7),0(R6),R3 FETCH THE DATA.\n         LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         LA    R6,SECTCT+512     POINT TO THE FETCHED DATA.\n         BR    R14\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - VARIABLES AND CONSTANTS'\nDGSTOKEN DC    D'0'              DATA GATHERER SPACE TOKEN.\nIMPMAJOR DC    CL8'IMPMAJOR'\nIMPMINOR DC    C'IMPDATGAT ACTIVE'\nIMINRLEN EQU   *-IMPMINOR\nSMFPRIME DC    CL8'SMFPRIME'\nDATGATNM DC    CL8'IMDATGAT'\nDGOPTKNM DC    CL8'IMDGOPTK'\nKLOCDATE DC    PL4'0'            REQUESTED DATE TO LOCATE.\nKSAVER14 DC    F'0'              GPR 14 SAVE AREA.\nKGATALET DC    F'0'              ALET FOR DATA GATHERER ADDRESS SPACE.\nGQKTOKEN DC    F'0'              GQSCAN TOKEN.\nDGTCBADR DC    F'0'              DATA GATHERER TCB ADDRESS.\nDGEPADDR DC    F'0'              DATA GATHERER ENTRY POINT ADDRESS.\nKGATASID DC    F'0'              DATA GATHERER ASID.\nKBASEADR DC    F'0'              DATA GATHERER BASE ENTRY ADDRESS.\nKSHOWSYS DC    CL4' '            SYSTEM OWNING THE DISPLAYED HISTORY.\nKSHOWITM DC    CL44' '           SMF ITEM NAME WHOSE EVENTS ARE LISTED.\nKTOPADRS DS    0F                TOP-OF-SCREEN ADDRESS LIST.\nKINTADDR DC    A(0)              TOP-OF-SCREEN INTERVAL ADDRESS.\nKITEMADR DC    A(0)              TOP-OF-SCREEN SMF ITEM NAME ADDRESS.\nKEVNTADR DC    A(0)              TOP-OF-SCREEN SMF EVENT ADDRESS.\nKTOPADLN EQU   *-KTOPADRS\nKSCRLAMT DC    F'0'              LINES TO SCROLL.\nKMAXSHOW DC    F'28'             HIGHEST DISPLAY TYPE CODE SUPPORTED.\nKMAXITEM DS    0F                MAXIMUM ITEM COUNT OF DISPLAY TYPES.\nKCPUCNT  DC    F'1'              TYPE 00 - CPU UTILIZATION.\nKIORCNT  DC    F'1'              TYPE 01 - SYSTEM I/O RATE.\nKPGRCNT  DC    F'1'              TYPE 02 - SYSTEM PAGING RATE.\nKUICCNT  DC    F'1'              TYPE 03 - SYSTEM HIGH UIC.\nKCNTCNT  DC    F'1'              TYPE 04 - CENTRAL STORAGE USAGE.\nKEIOCNT  DC    F'1'              TYPE 05 - EXPANDED STORAGE I/O RATE.\nKMIGCNT  DC    F'1'              TYPE 06 - EXPANDED STORAGE MIGR. AGE.\nKEXPCNT  DC    F'1'              TYPE 07 - EXPANDED STORAGE USAGE.\nKCSACNT  DC    F'1'              TYPE 08 - COMMON SERVICE AREA USAGE.\nKECSCNT  DC    F'1'              TYPE 09 - EXTENDED CSA USAGE.\nKRDYCNT  DC    F'1'              TYPE 10 - READY ASID COUNT.\nKINUCNT  DC    F'1'              TYPE 11 - IN ASID COUNT.\nKOTUCNT  DC    F'1'              TYPE 12 - OUT ASID COUNT.\nKWTUCNT  DC    F'1'              TYPE 13 - WAIT ASID COUNT.\nKJOBCNT  DC    F'1'              TYPE 14 - BATCH JOB ASID COUNT.\nKSTCCNT  DC    F'1'              TYPE 15 - STARTED TASK ASID COUNT.\nKTSUCNT  DC    F'1'              TYPE 16 - TSO USER ASID COUNT.\nKLRDCNT  DC    F'1'              TYPE 17 - LOGICAL READY ASID COUNT.\nKLWTCNT  DC    F'1'              TYPE 18 - LOGICAL WAIT ASID COUNT.\nKASCCNT  DC    F'1'              TYPE 19 - ASCH ASID COUNT.\nKOEDCNT  DC    F'1'              TYPE 20 - OPEN EDITION MVS ASID COUNT.\nKPRTCNT  DC    F'1'              TYPE 21 - PRINT OUTPUT VOLUMES.\nKPDACNT  DC    F'0'              TYPE 22 - PAGE/SWAP DATA SET ACTIVITY.\nKPDFCNT  DC    F'0'              TYPE 23 - PAGE/SWAP DATA SET FULLNESS.\nKCHNCNT  DC    F'0'              TYPE 24 - CHANNEL PATH UTILIZATION.\nKDVUCNT  DC    F'0'              TYPE 25 - DEVICE UTILIZATION.\nKDVTCNT  DC    F'0'              TYPE 26 - DEVICE SERVICE TIME.\nKTRTCNT  DC    F'0'              TYPE 27 - TRANSACTION RESPONSE TIME.\nKSRVCNT  DC    F'0'              TYPE 28 - SERVICE UNIT ABSORPTION.\nKMAXEND  DS    0F                END OF MAXIMUM ITEM VECTOR.\nKGSBH1TB DC    A(KSUBHDG1)       GRAPHIC SUBHEADING 1 TABLE ADDRESS.\nKGSBH2TB DC    A(KSUBHDG2)       GRAPHIC SUBHEADING 2 TABLE ADDRESS.\nKTSBH1TB DC    A(KSUBHDT1)       TABULAR SUBHEADING 1 TABLE ADDRESS.\nKTSBH2TB DC    A(KSUBHDT2)       TABULAR SUBHEADING 2 TABLE ADDRESS.\nKSCLTBAD DC    A(KSCLTABL)       VARIABLE CALLIBRATION TABLE ADDRESS.\nKNAMTBAD DC    A(KNAMETBL)       DISPLAY TYPE NAME TABLE ADDRESS.\nKDISPTBL DS    0F                DISPLAY SUBROUTINE ENTRY POINT TABLE.\n         DC    A(KDISPCPU)       TYPE 00 - CPU UTILIZATION.\n         DC    A(KDISPIOR)       TYPE 01 - SYSTEM I/O RATE.\n         DC    A(KDISPPGR)       TYPE 02 - SYSTEM PAGING RATE.\n         DC    A(KDISPUIC)       TYPE 03 - SYSTEM HIGH UIC.\n         DC    A(KDISPCNT)       TYPE 04 - CENTRAL STORAGE USAGE.\n         DC    A(KDISPEIO)       TYPE 05 - EXPANDED STORAGE I/O RATE.\n         DC    A(KDISPMIG)       TYPE 06 - EXPANDED STORAGE MIGR. AGE.\n         DC    A(KDISPEXP)       TYPE 07 - EXPANDED STORAGE USAGE.\n         DC    A(KDISPCSA)       TYPE 08 - COMMON SERVICE AREA USAGE.\n         DC    A(KDISPECS)       TYPE 09 - EXTENDED CSA USAGE.\n         DC    A(KDISPAS#)       TYPE 10 - READY ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 11 - IN ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 12 - OUT ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 13 - WAIT ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 14 - BATCH JOB ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 15 - STARTED TASK ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 16 - TSO USER ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 17 - LOGICAL READY ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 18 - LOGICAL WAIT ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 19 - ASCH ASID COUNT.\n         DC    A(KDISPAS#)       TYPE 20 - OPEN EDITION MVS ASID COUNT.\n         DC    A(KDISPPRT)       TYPE 21 - PRINT OUTPUT VOLUMES.\n         DC    A(KDISPPDU)       TYPE 22 - PAGE/SWAP DATA SET ACTIVITY.\n         DC    A(KDISPPDF)       TYPE 23 - PAGE/SWAP DATA SET FULLNESS.\n         DC    A(KDISPCHN)       TYPE 24 - CHANNEL PATH UTILIZATION.\n         DC    A(KDISPDVU)       TYPE 25 - DEVICE UTILIZATION.\n         DC    A(KDISPDVT)       TYPE 26 - DEVICE SERVICE TIME.\n         DC    A(KDISPTRT)       TYPE 27 - TRANSACTION RESPONSE TIME.\n         DC    A(KDISPSRV)       TYPE 28 - SERVICE UNIT ABSORPTION.\nKVARI    EQU   22                FIRST DISPLAY TYPE THAT CAN HAVE\n*                                MORE THAN ONE ITEM.\nKCHAN    EQU   24                ONLY CHANNEL PATH DISPLAY TYPE CODE.\n*                                DEVICE DISPLAYS MUST BE AFTER\n*                                CHANNEL PATH DISPLAYS AND BEFORE\n*                                PERFORMANCE GROUP DISPLAYS.\nKPERF    EQU   27                FIRST PERF. GROUP DISPLAY TYPE CODE.\n*                                            DISPLAY VECTOR.\n*                                     +0     X'80' - DISPLAY FIXED.\n*                                     +0     DISPLAY TYPE.\n*                                     +4     X'FF' - GET ITEM NUMBER.\n*                                     +4     DISPLAY ITEM NUMBER.\n*                                     +8     X'80' - TABULAR MODE.\n*                                     +8     DISPLAY LINE OFFSET.\n*                                     +C     DISPLAY ITEM IDENTIFIER.\n*                                    +10     DISPLAY SCALING FACTOR.\nKLEFT    DC    F'0',F'1',AL1(X'80'),AL3(LL-66),F'0',F'1',XL36'00'\nKRIGHT   DC    F'1',F'1',AL1(X'80'),AL3(LL-33),F'0',F'1',XL36'00'\nKDGPLIST DC    X'80',AL3(KPDGPLEN)   PROGRAM PARAMETER FOR IMDATGAT.\nKHDGCNT  DC    H'1'              CURRENT (SUB-) HEADING LINE COUNT.\nEDK2PNT3 DC    X'4021204B202020'\nEDK3PNT2 DC    X'402021204B20206C'\nEDK4PNT1 DC    X'40202021204B206C'\nEDK5PNT2 DC    X'4020202021204B2020'\nEDK6PNT1 DC    X'402020202021204B206C'\nEDKYYDDD DC    X'40202120204B202020'\nEDKHHMM  DC    X'4021202020202020'\n         AIF   (&MVSMON).KGRFPAP\nKGCHAR   DC    C' '              GRAPH BACKGROUND CHARACTER.\n         AGO   .KGRFOK\n.KGRFPAP ANOP\nKGCHAR   DC    X'09'             GRAPH BACKGROUND CHARACTER.\n.KGRFOK  ANOP\nKFLAGS   DC    X'00'             VARIOUS LOCAL FLAGS.\nKXM      EQU   X'80'             USING CROSS-MEMORY ACCESS.\nKDGNOW   EQU   X'40'             PERFORMING LOCAL DATA GATHERING.\n*        EQU   X'20'             UNUSED.\n*        EQU   X'10'             UNUSED.\n*        EQU   X'08'             UNUSED.\n*        EQU   X'04'             UNUSED.\n*        EQU   X'02'             UNUSED.\nKDATEFMT EQU   X'01'             JULIAN/YMD DATE FORMAT SWITCH.\nPL1ZERO  DC    PL1'0'            ZERO IN PACKED DECIMAL.\nHEADNGK0 DC    C'PERFORMANCE HISTORY DISPLAY'\nHEADNGK1 DC    CL71'PLACE CURSOR ON LINE AND HIT ENTER TO SELECT 1 FROM+\n                ZZ9 ITEM(S) LISTED '\nHEADINGK DC    C'PERFORMANCE HISTORY OF SYSTEM'\nTRAILERK DCS   SA,HILITE,NORMAL,SA,COLOUR,WHITE,SBA,(1,67)\n         DCS   C' FIXD:',SF,UNPHI,SA,HILITE,USCORE\nTRLKFIXD DC    C'?'\n         DCS   SF,PROHIS,SA,COLOUR,GREEN,SBA,(2,16),SF,UNPLO\nTRLKLNAM DC    CL7'_______'\n         DCS   SF,PROLOS,SBA,(2,45),SF,UNPLO\nTRLKLGRF DC    C'?'\n         DCS   SF,PROLOS,SBA,(2,49),SF,UNPLO\nTRLKRNAM DC    CL7'_______'\n         DCS   SF,PROLOS,SBA,(2,78),SF,UNPLO\nTRLKRGRF DC    C'?'\n         DCS   SF,PROLOS\nTRLRKLEN EQU   *-TRAILERK\nTRAILRKJ DCS   SBA,(2,8),SF,UNPLO\n         DC    CL5'YYDDD'\n         DCS   SF,PROLOS\nTRLRKJLN EQU   *-TRAILRKJ\nTRAILRKG DCS   SBA,(2,7),SF,UNPLO\n         DC    CL6'YYMMDD'\n         DCS   SF,PROLOS\nTRLRKGLN EQU   *-TRAILRKG\nKERRSPLN DC    AL1(7)            ACCUMULATED LENGTH OF ERROR RESPONSE.\nKERRRESP DS    0X                INPUT FIELD ERROR RESPONSE.\n         DCS   X'C6',SA,COLOUR,RED,SA,HILITE,REVERSE\n         DC    3CL10' '          ROOM FOR THREE INPUT FIELD ERRORS.\n         SPACE\n         LTORG\n         SPACE\nKBADMSGS DS    0X                ERROR MESSAGE TABLE.\nKBADMSG0 DC    CL32'IMON DATA GATHERER IS NOT ACTIVE'\nKBADMSG1 DC    CL32' SMFPRIME DD NOT PRE-ALLOCATED  '\nKBADMSG2 DC    CL32'   ALESERV ADD FAILED - RC=??   '\nKBADMSG3 DC    CL32' SMFPRIME NOT TAPE OR DISK FILE '\nKBADMSG4 DC    CL32'PGM=IMDATGAT COULD NOT BE LOADED'\n         SPACE\nKLOCNPRM DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER ITEM NAME OR PREFIX'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nKLOCNAME DC    XL44'00'\n         DC    X'2841001BF8C2'\nKLOCNLEN EQU   *-KLOCNPRM\n         SPACE\nKPARMPRM DC    X'C11140403C4040401B404E132841F400001BF8C62842F7'\n         DC    CL76'         HISTORICAL KNOWLEDGE DATA SELECTION PARAME+\n               TERS             &IMPDATE',X'284100'\n         DCS   SBA,(4,2)\n         DC    X'&HIGH',C'PERFORM =',X'1D402841F42842F4',C'Y'\n         DC    X'284100&MED',C'(Y/N)',X'&LOW'\n         DC    C' (COLLECT RMF/PDLF PERFORMANCE HISTORY?)'\n         DCS   SBA,(6,2)\n         DC    X'&HIGH',C'DATASET =',X'1D402841F42842F4',C'Y'\n         DC    X'284100&MED',C'(Y/N)',X'&LOW'\n         DC    C' (COLLECT DATA SET EVENT HISTORY?)'\n         DCS   SBA,(8,2)\n         DC    X'&HIGH',C'JOBSTEP =',X'1D402841F42842F4',C'Y'\n         DC    X'284100&MED',C'(Y/N)',X'&LOW'\n         DC    C' (COLLECT JOB STEP EVENT HISTORY?)'\n         DCS   SBA,(10,2)\n         DC    X'&HIGH',C'TAPEJOB =',X'1D402841F42842F4',CL8'CADISP**'\n         DC    X'284100&MED',C'(JOB NAME MASK)',X'&LOW'\n         DCS   SBA,(11,22)\n         DC    C'(IGNORE TAPE DATA SET EVENTS FOR THIS JOB NAME MASK.)'\n         DCS   SBA,(13,2)\n         DC    X'&HIGH',C'DASDJOB =',X'1D402841F42842F4',CL8'DFHSM***'\n         DC    X'284100&MED',C'(JOB NAME MASK)',X'&LOW'\n         DCS   SBA,(14,22)\n         DC    C'(IGNORE DASD DATA SET EVENTS FOR THIS JOB NAME MASK.)'\n         DCS   SBA,(16,1)\n         DC    X'&HIGH',C'TRACEJOB =',X'1D402841F42842F4',CL8'********'\n         DC    X'284100&MED',C'(JOB NAME MASK)',X'&LOW'\n         DCS   SBA,(17,22)\n         DC    C'(COLLECT SMF EVENTS FOR ONLY THIS JOB NAME MASK.)'\n         DCS   SBA,(20,1)\n         DC    X'1DF02842F1'\n         DC    CL40'   BY USING THESE PARAMETERS TO REDUCE T'\n         DC    CL40'HE COLLECTION OF UNWANTED DATA, YOU CAN '\n         DC    CL40'INCREASE THE QUANTITY OF RELEVANT DATA T'\n         DC    CL40'HAT WILL FIT INTO YOUR REGION, AS WELL  '\n         DC    CL40'AS DECREASE THE PROCESSING REQUIRED TO P'\n         DC    C'RODUCE A DISPLAY SCREEN IMAGE.'\nKPARMLEN EQU   *-KPARMPRM\n         SPACE\n         DS    0F\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SUBHEADINGS'\nKSUBHDG1 DS    0F               GRAPHIC SUBHEADING 1 TABLE.\n         DC    CL32'  CPU UTILIZATION (PERCENTAGE)  '\n         DC    C'I/O RATE - ',X'06',C'=TPI/CC=1 ',X'05',C'=I/O-SLIH'\n         DC    C'PAGING - '\n         DC    X'03',C'=DEMAND ',X'05',C'=SWAP ',X'06',C'=VIO  '\n         DC    C'SYS-HIGH-UIC - '\n         DC    X'04',C'=MIN ',X'05',C'=AVG ',X'01',C'=MAX'\n         DC    C' ',X'03',C'NUC ',X'05',C'SQA ',X'04',C'RGN '\n         DC    X'05',C'LSQA ',X'06',C'LPA ',X'01',C'CSA '\n         DC    C'EXPANDED STG I/O- ',X'04',C'=READ ',X'06',C'=WRITE'\n         DC    C'MIGRATION AGE- '\n         DC    X'04',C'=MIN ',X'05',C'=AVG ',X'01',C'=MAX'\n         DC    C' ',X'07',C'VIO ',X'05',C'SQA ',X'04',C'RGN '\n         DC    X'05',C'LSQA ',X'06',C'LPA ',X'01',C'CSA '\n         DC    C' CSA -  ',X'04',C'=227 ',X'05',C'=228 '\n         DC    X'06',C'=231 ',X'03',C'=241 '\n         DC    C' ',X'05',C'=AVERAGE USAGE ',X'06',C'=MAXIMUM USAGE'\n         DC    CL32' READY USER ADDRESS SPACE COUNT '\n         DC    CL32'   IN USER ADDRESS SPACE COUNT  '\n         DC    CL32'  OUT USER ADDRESS SPACE COUNT  '\n         DC    CL32' WAIT USER ADDRESS SPACE COUNT  '\n         DC    C' BATCH JOBS: '\n         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '\n         DC    C'  STC ASIDS: '\n         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '\n         DC    C'  TSU ASIDS: '\n         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '\n         DC    CL32' LOGICAL READY USER ASID COUNT  '\n         DC    CL32'  LOGICAL WAIT USER ASID COUNT  '\n         DC    C' ASCH ASIDS: '\n         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '\n         DC    C' OMVS ASIDS: '\n         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '\n         DC    C'PRINT LINES (000''S) '\n         DC    X'06',C'=XWTR ',X'03',C'=NJE'\n         DC    CL32'_____________________ IO/BSY/XFR'\n         DC    CL32'________________________ FULL(%)'\n         DC    CL32'  CHANNEL PATH __               '\n         DC    C' ___        '\n         DC    X'05',C'CON ',X'06',C'DISC ',X'02',C'PND ',X'01',C'MTP'\n         DC    C' ___        '\n         DC    X'05',C'=CON ',X'06',C'=DISC ',X'02',C'=PEND '\n         DC    C'PGN ___         '\n         DC    X'04',C'P1 ',X'03',C'P2 ',X'06',C'P3 ',X'01',C'P>3'\n         DC    C'PGN ___         '\n         DC    X'04',C'P1 ',X'03',C'P2 ',X'06',C'P3 ',X'01',C'P>3'\n         SPACE\nKSUBHDG2 DS    0F               GRAPHIC SUBHEADING 2 TABLE.\n         DC    CL32'---2+0--4+0--6+0--8+0---% TOTAL '\n         DC    CL32'----+---1+0---+---2+0---+ /SEC  '\n         DC    CL32'----+---1+0---+---2+0---+ /SEC  '\n         DC    CL32'----+---100---+---200---+   AVG '\n         DC    C'---2+0--4+0--6+0--8+0---%  ',X'0C',C'AVL '\n         DC    CL32'----+---1+0---+---2+0---+ /SEC  '\n         DC    CL32'----+---1+0---+---2+0---+   AVG '\n         DC    C'---2+0--4+0--6+0--8+0---%  ',X'02',C'HIPR'\n         DC    C'---2+0--4+0--6+0--8+0---% ',X'02',C'=MAX '\n         DC    CL32'---2+0--4+0--6+0--8+0---%   MAX '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '\n         DC    CL32'---2+0--4+0--6+0--8+0---+  TOTAL'\n         DC    CL32'---2+0--4+0--6+0--8+0---+  BUSY%'\n         DC    CL32'---2+0--4+0--6+0--8+0---%   AVG '\n         DC    CL32'---2+0--4+0--6+0--8+0---%   AVG '\n         DC    CL32'---2+0--4+0--6+0--8+0---%   AVG '\n         DC    C'---1+0--2+0--3+0--4+0--',X'94A2',C' SERVTM'\n         DC    C'----2----4----6----8-',X'A28583A2',C' PG-RSP'\n         DC    CL32'----+--40+00--+--80+00--+ SU/SEC'\n         SPACE\nKSUBHDT1 DS    0F                NON-GRAPHIC SUBHEADING 1 TABLE.\n         DC    CL32'  CPU UTILIZATION (PERCENTAGE)  '\n         DC    CL32'         SYSTEM I/O RATE        '\n         DC    CL32'       SYSTEM PAGING RATE       '\n         DC    CL32'HIGH UNREFERENCED INTERVAL COUNT'\n         DC    CL32'  CENTRAL (REAL) STORAGE USAGE  '\n         DC    CL32'   EXPANDED STORAGE I/O RATE    '\n         DC    CL32' EXPANDED STORAGE MIGRATION AGE '\n         DC    CL32'     EXPANDED STORAGE USAGE     '\n         DC    CL32'    COMMON SERVICE AREA USAGE   '\n         DC    CL32'  EXTENDED COMMON SERVICE AREA  '\n         DC    CL32' READY USER ADDRESS SPACE COUNT '\n         DC    CL32'   IN USER ADDRESS SPACE COUNT  '\n         DC    CL32'  OUT USER ADDRESS SPACE COUNT  '\n         DC    CL32' WAIT USER ADDRESS SPACE COUNT  '\n         DC    CL32' BATCH JOB ADDRESS SPACE COUNT  '\n         DC    CL32'    STARTED TASK ASID COUNT     '\n         DC    CL32'  TIME SHARING USER ASID COUNT  '\n         DC    CL32' LOGICAL READY USER ASID COUNT  '\n         DC    CL32'  LOGICAL WAIT USER ASID COUNT  '\n         DC    CL32'    ASCH ADDRESS SPACE COUNT    '\n         DC    CL32'   OPEN EDITION MVS ASID COUNT  '\n         DC    CL32'   PRINT LINE OUTPUT VOLUMES    '\n         DC    CL32'_______________________ ACTIVITY'\n         DC    CL32'________________________ FULL(%)'\n         DC    CL32'  CHANNEL PATH __               '\n         DC    CL32'DEVICE ___        UTILIZATION(%)'\n         DC    CL29'DEV ___         SERVICE TIME(',XL2'94A2',CL1')'\n         DC    CL32'PGN ___         RATE + RESP-TIME'\n         DC    CL32'PGN ___         PAGE-IN + ABSORP'\n         SPACE\nKSUBHDT2 DS    0F                NON-GRAPHIC SUBHEADING 2 TABLE.\n         DC    CL32'CAPTURED  CAPTURE-RATIO   TOTAL '\n         DC    CL32'   TPI%    TPI     SLIH    TOTAL'\n         DC    CL32'  DEMAND    SWAP     VIO   TOTAL'\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32' NUC SQA  RGN LSQA LPA CSA  AVL '\n         DC    CL32'READ/SEC   WRITE/SEC  READ+WRITE'\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32' VIO SQA  RGN LSQA LPA CSA HIPER'\n         DC    CL32' AVERAGE MAXIMUM MAXUSED BIGFREE'\n         DC    CL32' AVERAGE MAXIMUM MAXUSED BIGFREE'\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '\n         DC    CL32'LCL-NODE EXT-WTR NJE-XMIT  TOTAL'\n         DC    CL32'BAD  XFRTM   IORT  XFRRT   BUSY%'\n         DC    CL32'BAD MIN-FULL  AVG-FULL  MAX-FULL'\n         DC    CL32'            UTILIZATION PERCENT '\n         DC    CL32' RESV CONN DISC PEND  MNTP NTRDY'\n         DC    CL32' CONN DISC PEND  CUB DEVB  DPB  '\n         DC    CL32'TRN/S PP-1 PP-2 PP-3 PP-4  GROUP'\n         DC    CL32'PGS/S PP-1 PP-2 PP-3 PP-4 TOTAL '\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - VARIABLE CALLIBRATIONS'\nKSCLTABL DS    0F                                FULL-SCALE VALUE:\n         DC    F'500000',F'1'\n         DC    CL24'----+--40+00--+--80+00--'        10,000\nKSCLTBSZ EQU   *-KSCLTABL\n         DC    F'250000',F'2'\n         DC    CL24'----+--20+00--+--40+00--'         5,000\n         DC    F'200000',F'4'\n         DC    CL24'----+--10+00--+--20+00--'         2,500\n         DC    F'125000',F'5'\n         DC    CL24'----+---800---+--16+00--'         2,000\n         DC    F'100000',F'8'\n         DC    CL24'----+---500---+--10+00--'         1,250\n         DC    F'50000',F'10'\n         DC    CL24'----+---400---+---800---'         1,000\n         DC    F'25000',F'20'\n         DC    CL24'----+---200---+---400---'           500\n         DC    F'20000',F'40'\n         DC    CL24'----+---100---+---200---'           250\n         DC    F'12500',F'50'\n         DC    CL24'---4+0--8+0--120--160---'           200\n         DC    F'10000',F'80'\n         DC    CL24'---2+5--5+0--7+5--100---'           125\n         DC    F'5000',F'100'\n         DC    CL24'---2+0--4+0--6+0--8+0---'           100\n         DC    F'2500',F'200'\n         DC    CL24'---1+0--2+0--3+0--4+0---'            50\n         DC    F'2000',F'400'\n         DC    CL24'----+---1+0---+---2+0---'            25\n         DC    F'1250',F'500'\n         DC    CL24'----4----8---1+2--1+6---'            20\n         DC    F'1000',F'800'\n         DC    CL24'-1-2-3-4-5-6-7-8-9-+----'            12.5\n         DC    F'500',F'1000'\n         DC    CL24'----2----4----6----8----'            10\n         DC    F'250',F'2000'\n         DC    CL24'----1----2----3----4----'             5\n         DC    F'125',F'4000'\n         DC    CL24'----+----1----+----2----'             2.5\nKSCLTBNO EQU   (*-KSCLTABL)/KSCLTBSZ\n         DC    F'0',F'8000'\n         DC    CL24'----+----+----+----1----'             1.25\n         SPACE 2\nKNAMETBL DS    0F                DISPLAY TYPE NAME TABLE.\n         DC    C'CPU '           TYPE 00 - CPU UTILIZATION.\n         DC    C'IOR '           TYPE 01 - SYSTEM I/O RATE.\n         DC    C'PGR '           TYPE 02 - SYSTEM PAGING RATE.\n         DC    C'UIC '           TYPE 03 - SYSTEM HIGH UIC.\n         DC    C'CNT '           TYPE 04 - CENTRAL STORAGE USAGE.\n         DC    C'EIO '           TYPE 05 - EXPANDED STORAGE I/O RATE.\n         DC    C'MIG '           TYPE 06 - EXPANDED STORAGE MIGR. AGE.\n         DC    C'EXP '           TYPE 07 - EXPANDED STORAGE USAGE.\n         DC    C'CSA '           TYPE 08 - COMMON SERVICE AREA USAGE.\n         DC    C'ECS '           TYPE 09 - EXTENDED CSA USAGE.\n         DC    C'RDY '           TYPE 10 - READY ASID COUNT.\n         DC    C'INU '           TYPE 11 - IN ASID COUNT.\n         DC    C'OTU '           TYPE 12 - OUT ASID COUNT.\n         DC    C'WTU '           TYPE 13 - WAIT ASID COUNT.\n         DC    C'JOB '           TYPE 14 - BATCH JOB ASID COUNT.\n         DC    C'STC '           TYPE 15 - STARTED TASK ASID COUNT.\n         DC    C'TSU '           TYPE 16 - TSO USER ASID COUNT.\n         DC    C'LRD '           TYPE 17 - LOGICAL READY ASID COUNT.\n         DC    C'LWT '           TYPE 18 - LOGICAL WAIT ASID COUNT.\n         DC    C'ASC '           TYPE 19 - ASCH ASID COUNT.\n         DC    C'OED '           TYPE 20 - OPEN EDITION MVS ASID COUNT.\n         DC    C'PRT '           TYPE 21 - PRINT OUTPUT VOLUMES.\n         DC    C'PDA?'           TYPE 22 - PAGE/SWAP DATA SET ACTIVITY.\n         DC    C'PDF?'           TYPE 23 - PAGE/SWAP DATA SET FULLNESS.\n         DC    C'CHN?'           TYPE 24 - CHANNEL PATH UTILIZATION.\n         DC    C'DVU?'           TYPE 25 - DEVICE UTILIZATION.\n         DC    C'DVT?'           TYPE 26 - DEVICE SERVICE TIME.\n         DC    C'TRT?'           TYPE 27 - TRANSACTION RESPONSE TIME.\n         DC    C'SRV?'           TYPE 28 - SERVICE UNIT ABSORPTION.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - INPUT FIELD PARSING'\n         USING KNOWPARS,R15\nKNOWPARS DS    0H                PARSE INPUT BUFFER FOR CONTROL FIELDS.\n         LH    R1,TGETLEN        GET THE INPUT LENGTH.\n         LA    R2,INBUFF(R1)     POINT PAST LAST INPUT BYTE.\n         AHI   R1,-3             GET DATA LENGTH WITHOUT READ HEADER.\nKPARSFLD MVC   0(12,R2),BLANKS   REMOVE FIELD JUST PARSED FROM BUFFER.\n         LTR   R1,R1             ANY MORE DATA REMAINING TO PARSE?\n         BNPR  R14               NO, SO RETURN.\nKPARSELP BCTR  R2,0              BACK UP ONE BYTE.\n         CLI   0(R2),X'11'       SBA ORDER?\n         BE    KPGOTSBA          YES.\n         BCT   R1,KPARSELP       DECREMENT BYTES-TO-PROCESS COUNTER.\n         BR    R14               RETURN AT EODAD (SHOULD NOT HAPPEN).\nKPGOTSBA BCTR  R1,0              DECREMENT FOR SBA BYTE.\n         CLC   1(2,R2),KPFIXAD   UPDATE TO \"FIXED\" FIELD?\n         BE    KPFIX             YES.\n         CLC   1(2,R2),KPLC2AD   UPDATE TO \"LOCATE\" FIELD?\n         BE    KPLC2             YES.\n         CLC   1(2,R2),KPLOCAD   UPDATE TO \"LOCATE\" FIELD?\n         BE    KPLOC             YES.\n         CLC   1(2,R2),KPLNMAD   UPDATE TO LEFT \"NAME\" FIELD?\n         BE    KPLNM             YES.\n         CLC   1(2,R2),KPLGMAD   UPDATE TO LEFT \"GRAPHIC MODE\" FIELD?\n         BE    KPLGM             YES.\n         CLC   1(2,R2),KPRNMAD   UPDATE TO RIGHT \"NAME\" FIELD?\n         BE    KPRNM             YES.\n         CLC   1(2,R2),KPRGMAD   UPDATE TO RIGHT \"GRAPHIC MODE\" FIELD?\n         BE    KPRGM             YES.\n         CLC   1(2,R2),KPPRFAD   UPDATE TO PERFORM= PARAMETER FIELD?\n         BE    KPPRF             YES.\n         CLC   1(2,R2),KPDSNAD   UPDATE TO DATASET= PARAMETER FIELD?\n         BE    KPDSN             YES.\n         CLC   1(2,R2),KPPGMAD   UPDATE TO PROGRAM= PARAMETER FIELD?\n         BE    KPPGM             YES.\n         CLC   1(2,R2),KPMTJAD   UPDATE TO TAPEJOB= PARAMETER FIELD?\n         BE    KPMTJ             YES.\n         CLC   1(2,R2),KPDAJAD   UPDATE TO DASDJOB= PARAMETER FIELD?\n         BE    KPDAJ             YES.\n         CLC   1(2,R2),KPTRJAD   UPDATE TO TRACEJOB= PARAMETER FIELD?\n         BE    KPTRJ             YES.\n         BR    R14               RETURN IF PRIMARY OR UNKNOWN INPUT.\n         SPACE\nKPFIX    CLI   3(R2),C' '        ANY INPUT CHARACTER?\n         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.\n         CLI   3(R2),C'L'        FIX THE LEFT DISPLAY?\n         BE    KPFIXLFT          YES.\n         CLI   3(R2),C'R'        FIX THE RIGHT DISPLAY?\n         BE    KPFIXRIT          YES.\n         NI    KLEFT,X'7F'       ANY OTHER INPUT FREES BOTH DISPLAYS.\n         NI    KRIGHT,X'7F'\n         B     KPARSFLD          RETURN.\nKPFIXLFT OI    KLEFT,X'80'       FIX THE LEFT DISPLAY.\n         NI    KRIGHT,X'7F'      FREE THE RIGHT DISPLAY.\n         B     KPARSFLD          RETURN.\nKPFIXRIT NI    KLEFT,X'7F'       FREE THE LEFT DISPLAY.\n         OI    KRIGHT,X'80'      FIX THE RIGHT DISPLAY.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPLC2    CLI   3(R2),C' '        ANY INPUT CHARACTER?\n         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.\n         LA    R0,6              GET THE NUMBER OF REQUIRED DIGITS.\n         LA    R6,3(,R2)         POINT PAST SBA ORDER.\nKPLC2LP  CLI   0(R6),C'0'        DECIMAL DIGIT?\n         BL    KPLC2ERR          NO, ERROR.\n         LA    R6,1(,R6)         YES, POINT TO NEXT DIGIT.\n         BCT   R0,KPLC2LP\n         CLC   5(2,R2),=C'00'    RIDICULOUS MONTH NUMBER?\n         BNH   KPLC2ERR          YES, REJECT DATE.\n         CLC   5(2,R2),=C'12'    RIDICULOUS MONTH NUMBER?\n         BH    KPLC2ERR          YES, REJECT DATE.\n         CLC   7(2,R2),=C'00'    RIDICULOUS DAY OF MONTH NUMBER?\n         BNH   KPLC2ERR          YES, REJECT DATE.\n         CLC   5(2,R2),=C'31'    RIDICULOUS DAY OF MONTH NUMBER?\n         BH    KPLC2ERR          YES, REJECT DATE.\n         PACK  KLOCDATE,3(6,R2)  GET THE REQUESTED DATE.\n         L     R0,KLOCDATE       LOAD 0YYMMDDC.\n         ST    R14,KSAVER14      SAVE RETURN ADDRESS.\n         BAS   R14,GREG2JUL      CONVERT TO JULIAN DATE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         ST    R0,KLOCDATE       SAVE 00YYDDDC.\n         B     KCENTCHK          GO DETERMINE WHICH CENTURY.\nKPLC2ERR SLR   R7,R7\n         IC    R7,KERRSPLN       GET ERROR DATA STREAM LENGTH SO FAR.\n         LA    R0,10(,R7)        GET NEW LENGTH.\n         STC   R0,KERRSPLN       SAVE IT.\n         B     KP2NDERR          BRANCH TO COMMON CODE.\n         SPACE\nKPLOC    CLI   3(R2),C' '        ANY INPUT CHARACTER?\n         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.\n         LA    R0,5              GET THE NUMBER OF REQUIRED DIGITS.\n         LA    R6,3(,R2)         POINT PAST SBA ORDER.\nKPLOCLP  CLI   0(R6),C'0'        DECIMAL DIGIT?\n         BL    KPLOCERR          NO, ERROR.\n         LA    R6,1(,R6)         YES, POINT TO NEXT DIGIT.\n         BCT   R0,KPLOCLP\n         CLC   5(3,R2),=C'366'   RIDICULOUS JULIAN DAY?\n         BH    KPLOCERR          YES, REJECT DATE.\n         PACK  KLOCDATE,3(5,R2)  GET THE REQUESTED DATE.\n         CP    KLOCDATE,PL1ZERO  NON-ZERO DATE SPECIFIED?\n         BE    KPARSFLD          NO, RETURN WITHOUT ACTION.\nKCENTCHK CLI   KLOCDATE+1,X'70'  IS THE YEAR AFTER 1970?\n         BH    KPARSFLD          YES, LEAVE CENTURY BYTE ZERO.\n         MVI   KLOCDATE,X'01'    NO, ADJUST THE CENTURY FOR AFTER 1999.\n         B     KPARSFLD          RETURN.\nKPLOCERR SLR   R7,R7\n         IC    R7,KERRSPLN       GET ERROR DATA STREAM LENGTH SO FAR.\n         LA    R0,9(,R7)         GET NEW LENGTH.\n         STC   R0,KERRSPLN       SAVE IT.\n         B     KP2NDERR          BRANCH TO COMMON CODE.\n         SPACE\nKPLNM    LA    R3,KLEFT          POINT TO LEFT DISPLAY VECTOR.\n         B     KPNAME            BRANCH TO COMMON CODE.\nKPRNM    LA    R3,KRIGHT         POINT TO RIGHT DISPLAY VECTOR.\nKPNAME   CLI   3(R2),C' '        ANY INPUT CHARACTER?\n         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.\n         L     R7,KNAMTBAD       POINT TO DISPLAY NAME TABLE.\n         SLR   R6,R6             ZERO DISPLAY TYPE COUNTER.\nKPNMSRCH CLC   3(3,R2),0(R7)     REQUEST FOR THIS DISPLAY TYPE?\n         BE    KPFNDNAM          YES, FOUND IT.\n         C     R6,KMAXSHOW       NO, WAS THAT THE LAST TYPE?\n         BNL   KPNAMERR          YES, INPUT FIELD ERROR.\n         LA    R6,1(,R6)         NO, INCREMENT THE DISPLAY TYPE CODE.\n         LA    R7,4(,R7)         POINT TO THE NEXT DISPLAY TYPE NAME.\n         B     KPNMSRCH          CONTINUE SEARCH FOR A NAME MATCH.\nKPFNDNAM STCM  R6,R7,1(R3)       UPDATE THE DISPLAY CODE.\n         CLI   3(R3),KCHAN       ANY NEED TO CHECK FOR NUMBER?\n         BL    KPARSFLD          NO, RETURN.\n         CLI   3(R3),KPERF       YES, DECIMAL OR HEXADECIMAL?\n         BL    KPNAMHEX          HEXADECIMAL.\n         CLI   6(R2),C'0'        DECIMAL.  ANY DIGIT SUPPLIED?\n         BL    KPARSFLD          NO, RETURN.\n         SLR   R0,R0             YES, ZERO ACCUMULATOR.\n         SLR   R7,R7\n         LA    R8,6(,R2)         POINT TO FIRST DIGIT.\nKPNDECLP CLI   0(R8),C'0'        VALID DIGIT HERE?\n         BL    KPGOTIID          NO, NOW HAVE ITEM IDENTIFIER.\n         NI    0(R8),X'0F'       YES, RESET ZONE.\n         IC    R7,0(,R8)         GET NUMERIC.\n         MH    R0,TEN+2          PROMOTE PREVIOUS DIGITS.\n         AR    R0,R7             ADD THIS DIGIT.\n         LA    R8,1(,R8)         POINT TO NEXT DIGIT CANDIDATE.\n         B     KPNDECLP          SEE IF ANY MORE DIGITS.\nKPGOTIID ST    R0,12(,R3)        PUT ITEM IDENTIFIER IN DISPLAY VECTOR.\n         MVI   4(R3),X'FF'       FLAG DETERMINE ITEM NUMBER FROM ID.\n         B     KPARSFLD          RETURN.\nKPNAMHEX CLI   6(R2),C'A'        ANY HEXADECIMAL DIGIT SUPPLIED?\n         BL    KPARSFLD          NO, RETURN.\n         STM   R1,R2,WORK        SAVE REGISTERS ALTERED BY TRT.\n         TRT   6(1,R2),KPHEXTAB  ANY HEXADECIMAL DIGIT SUPPLIED?\n         LM    R1,R2,WORK        RESTORE REGISTERS ALTERED BY TRT.\n         BZ    KPARSFLD          NO, RETURN.\n         SLR   R0,R0             YES, ZERO ACCUMULATOR.\n         SLR   R7,R7\n         LA    R8,6(,R2)         POINT TO FIRST DIGIT.\nKPNHEXLP CLI   0(R8),C'A'        VALID DIGIT HERE?\n         BL    KPGOTIID          NO, NOW HAVE ITEM IDENTIFIER.\n         TR    0(1,R8),KPHEXTAB  CONVERT HEX CHARACTER TO A NUMBER.\n         CLI   0(R8),C'0'        VALID DIGIT HERE?\n         BL    KPGOTIID          NO, NOW HAVE ITEM IDENTIFIER.\n         NI    0(R8),X'0F'       YES, RESET ZONE.\n         IC    R7,0(,R8)         GET NUMERIC.\n         SLL   R0,4              PROMOTE PREVIOUS DIGITS.\n         AR    R0,R7             ADD THIS DIGIT.\n         LA    R8,1(,R8)         POINT TO NEXT DIGIT CANDIDATE.\n         B     KPNHEXLP          SEE IF ANY MORE DIGITS.\nKPNAMERR SLR   R7,R7\n         IC    R7,KERRSPLN       GET ERROR DATA STREAM LENGTH SO FAR.\n         LA    R0,10(,R7)        GET NEW LENGTH.\n         STC   R0,KERRSPLN       SAVE IT.\nKP2NDERR LA    R7,KERRRESP(R7)   POINT TO NEXT BUFFER PART TO UPDATE.\n         MVI   0(R7),X'11'       SUPPLY SET BUFFER ADDRESS ORDER.\n         MVI   3(R7),X'13'       SUPPLY IC ORDER.\n         MVC   4(6,R7),3(R2)     SUPPLY ERRONEOUS INPUT TEXT.\n         SLR   R0,R0             CLEAR FOR INSERT.\n         SLR   R6,R6             CLEAR FOR INSERT.\n         IC    R0,1(,R2)         GET THE RELATIVE ROW NUMBER.\n         IC    R6,2(,R2)         GET THE RELATIVE LINE NUMBER.\n         MH    R0,COLUMNS+2\n         AR    R0,R6             GET SCREEN BUFFER LOCATION.\n         STCM  R0,1,2(R7)        LOAD SECOND ADDRESS BYTE.\n         SLL   R0,2\n         STCM  R0,2,1(R7)        LOAD FIRST ADDRESS BYTE.\n         NI    2(R7),X'3F'       RESET EXTRANEOUS BITS.\n         TR    1(2,R7),TABLE     RE-TRANSLATE TO 3270 DATA STREAM CHAR.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPLGM    LA    R3,KLEFT          POINT TO LEFT DISPLAY VECTOR.\n         B     KPGRFMD           BRANCH TO COMMON CODE.\nKPRGM    LA    R3,KRIGHT         POINT TO RIGHT DISPLAY VECTOR.\nKPGRFMD  CLI   3(R2),C' '        ANY INPUT CHARACTER?\n         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.\n         CLI   3(R2),C'Y'        TURN ON GRAPHIC MODE?\n         BE    KPGMON            YES.\n         CLI   3(R2),C'N'        TURN OFF GRAPHIC MODE?\n         BE    KPGMOFF           YES.\n         XI    8(R3),X'80'       ANY OTHER NON-BLANK TOGGLES IT.\n         B     KPARSFLD          RETURN.\nKPGMON   NI    8(R3),X'7F'       TURN ON GRAPHIC MODE.\n         B     KPARSFLD          RETURN.\nKPGMOFF  OI    8(R3),X'80'       TURN ON TABULAR MODE.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPPRF    MVC   KPDGPPRF(1),3(R2) COPY PERFORMANCE DATA SWITCH.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPDSN    MVC   KPDGPDSN(1),3(R2) COPY DATA SET DATA SWITCH.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPPGM    MVC   KPDGPPGM(1),3(R2) COPY PROGRAM DATA SWITCH.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPMTJ    MVC   KPDGPTAP(8),3(R2) COPY TAPE EXCLUSION JOB NAME MASK.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPDAJ    MVC   KPDGPDSK(8),3(R2) COPY DASD EXCLUSION JOB NAME MASK.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPTRJ    MVC   KPDGPTRC(8),3(R2) COPY DASD EXCLUSION JOB NAME MASK.\n         B     KPARSFLD          RETURN.\n         SPACE\nKPFIXAD  DC    AL1(0,73)         DCS   (1,74)\nKPLC2AD  DC    AL1(1,07)         DCS   (2,08)\nKPLOCAD  DC    AL1(1,08)         DCS   (2,09)\nKPLNMAD  DC    AL1(1,16)         DCS   (2,17)\nKPLGMAD  DC    AL1(1,45)         DCS   (2,46)\nKPRNMAD  DC    AL1(1,49)         DCS   (2,50)\nKPRGMAD  DC    AL1(1,78)         DCS   (2,79)\nKPPRFAD  DC    AL1(3,12)         DCS   (4,13)\nKPDSNAD  DC    AL1(5,12)         DCS   (6,13)\nKPPGMAD  DC    AL1(7,12)         DCS   (8,13)\nKPMTJAD  DC    AL1(9,12)         DCS   (10,13)\nKPDAJAD  DC    AL1(12,12)        DCS   (13,13)\nKPTRJAD  DC    AL1(15,12)        DCS   (16,13)\n         DS    0F\nKPHEXTAB EQU   *-X'C0'\n         DC    XL16'00FAFBFCFDFEFF000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9000000000000'\n         SPACE\n         DS    0F                PROGRAM PARAMETER ALIGNMENT.\nKPDGPLEN DC    AL2(KPDGPLN)      PROGRAM PARAMETER LENGTH INDICATOR.\nKPDGPARM EQU   *\n         DC    C'PERF='\nKPDGPPRF DC    C'Y DSET='\nKPDGPDSN DC    C'Y STEP='\nKPDGPPGM DC    C'Y TAPEJOB='\nKPDGPTAP DC    C'CADISP** DASDJOB='\nKPDGPDSK DC    C'DFHSM*** TRACEJOB='\nKPDGPTRC DC    C'********'\nKPDGPLN  EQU   *-KPDGPARM        PROGRAM PARAMETER LENGTH.\n         SPACE 2\nGREG2JUL DS    0H                CONVERT CYYMMDDF TO 0CYYDDDF.\n         STM   R14,R12,12(R13)   SAVE REGISTERS.\n         LR    R1,R0             COPY INPUT DATE.\n         SLL   R1,4              GET YY IN TOP BYTE.\n         ST    R1,WORK           PLACE IN WORK AREA.\n         MVI   MONTHTAB+5,28     ASSUME NOT A LEAP YEAR.\n         TM    WORK,X'01'        ODD NUMBERED YEAR?\n         BO    LEAPOKAY          YES, NOT A LEAP YEAR.\n         TM    WORK,X'12'        LEAP YEAR?\n         BM    LEAPOKAY          NO.\n         MVI   MONTHTAB+5,29     YES.\nLEAPOKAY XC    WORK,WORK         CLEAR A WORK AREA.\n         STCM  R0,B'0110',WORK+6\n         NI    WORK+6,X'0F'\n         OI    WORK+7,X'0F'      GET 00000MMF.\n         CVB   R1,WORK           GET THE BINARY MONTH NUMBER.\n         LA    R2,MONTHTAB       POINT TO DAYS PER MONTH TABLE.\n         SLR   R3,R3             CLEAR ACCUMULATOR.\nMNTHLOOP AH    R3,0(,R2)         ADD DAYS OF A PREVIOUS MONTH.\n         LA    R2,2(,R2)         POINT TO NEXT MONTH'S ENTRY.\n         BCT   R1,MNTHLOOP\n         XC    WORK,WORK         CLEAR A WORK AREA.\n         STH   R0,WORK+6\n         NI    WORK+6,X'0F'      GET 00000DDF.\n         CVB   R1,WORK           GET BINARY DAY OF MONTH.\n         AR    R3,R1             GET JULIAN DAY OF YEAR.\n         CVD   R3,WORK           GET DECIMAL JULIAN DAY OF YEAR.\n         OI    WORK+7,X'0F'      GET REQUIRED DECIMAL POSITIVE SIGN.\n         SRL   R0,4              GET 0CYYMMDD FROM INPUT DATE.\n         ICM   R0,3,WORK+6       GET 0CYYDDDF.\n         ST    R0,20(,R13)       SAVE VALUE IN R0 SLOT.\n         LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nMONTHTAB DC    AL2(0,31,28,31,30,31,30,31,31,30,31,30)\n         SPACE\n         DROP  R15               KNOWPARS.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PERFORMANCE SELECTION'\n         USING DGSYSTEM,R4\n         USING KNOWSYS,R10\nKNOWSYS  DS    0H                POSITION PERFORMANCE HISTORY DISPLAY.\n         MVI   KUICCNT+3,0       ZERO \"UIC\" ITEM COUNT.\n         MVI   KCNTCNT+3,0       ZERO \"CNT\" ITEM COUNT.\n         MVI   KEIOCNT+3,0       ZERO \"EIO\" ITEM COUNT.\n         MVI   KMIGCNT+3,0       ZERO \"MIG\" ITEM COUNT.\n         MVI   KEXPCNT+3,0       ZERO \"EXP\" ITEM COUNT.\n         MVI   KCSACNT+3,0       ZERO \"CSA\" ITEM COUNT.\n         MVI   KECSCNT+3,0       ZERO \"ECS\" ITEM COUNT.\n         LA    R7,KRDYCNT        POINT TO \"RDY\" ITEM COUNT.\n         LH    R0,DGMAXRDY       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KINUCNT        POINT TO \"INU\" ITEM COUNT.\n         LH    R0,DGMAXINU       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KOTUCNT        POINT TO \"OTU\" ITEM COUNT.\n         LH    R0,DGMAXOTU       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KWTUCNT        POINT TO \"WTU\" ITEM COUNT.\n         LH    R0,DGMAXWTU       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KJOBCNT        POINT TO \"JOB\" ITEM COUNT.\n         LH    R0,DGMAXJOB       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KSTCCNT        POINT TO \"STC\" ITEM COUNT.\n         LH    R0,DGMAXSTC       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KTSUCNT        POINT TO \"TSU\" ITEM COUNT.\n         LH    R0,DGMAXTSU       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KLRDCNT        POINT TO \"LRD\" ITEM COUNT.\n         LH    R0,DGMAXLRD       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KLWTCNT        POINT TO \"LWT\" ITEM COUNT.\n         LH    R0,DGMAXLWT       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KASCCNT        POINT TO \"ASC\" ITEM COUNT.\n         LH    R0,DGMAXASC       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KOEDCNT        POINT TO \"OED\" ITEM COUNT.\n         LH    R0,DGMAXOED       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         LA    R7,KPRTCNT        POINT TO \"PRT\" ITEM COUNT.\n         L     R0,DGMAXPRT       LOAD MAXIMUM ENOUNTERED.\n         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.\n         TM    DGSYSFLG,DGRMFSYS\n         BZ    KNOWPDLF          SUPPRESS RMF-ONLY DATA IF PDLF.\n         MVI   KUICCNT+3,1       SHOW \"UIC\".\n         MVI   KCNTCNT+3,1       SHOW \"CNT\".\n         MVI   KEIOCNT+3,1       SHOW \"EIO\".\n         MVI   KMIGCNT+3,1       SHOW \"MIG\".\n         MVI   KEXPCNT+3,1       SHOW \"EXP\".\n         MVI   KCSACNT+3,1       SHOW \"CSA\".\n         MVI   KECSCNT+3,1       SHOW \"ECS\".\nKNOWPDLF XC    KSRVCNT,KSRVCNT   ZERO \"SRV\" PERFORMANCE GROUP COUNT.\n         TM    DGSYSFLG,DGRMFPRF\n         BZ    KNOWSERV          SUPPRESS \"SRV\" IF PDLF DATA ONLY.\n         MVC   KSRVCNT,DGNUMPG#  COPY KNOWN PERFORMANCE GROUP COUNT.\nKNOWSERV MVC   KTRTCNT,DGNUMPG#  COPY KNOWN PERFORMANCE GROUP COUNT.\n         MVC   KCHNCNT,DGNUMCH#  COPY KNOWN CHPID COUNT.\n         MVC   KDVUCNT,DGNUMDV#  COPY KNOWN DEVICE COUNT.\n         MVC   KDVTCNT,DGNUMDV#  COPY KNOWN DEVICE COUNT.\n         MVC   KPDACNT,DGNUMPDN  COPY KNOWN PAGE/SWAP DATA SET COUNT.\n         MVC   KPDFCNT,DGNUMPDN  COPY KNOWN PAGE/SWAP DATA SET COUNT.\n         MVC   HEADING,BLANKS    LOAD HEADING FOR THIS OPTION.\n         MVC   HEADING(L'HEADINGK),HEADINGK\n         MVC   HEADING+30(4),KSHOWSYS\n         MVC   HEADING+63(7),=C'FIXD: L'\n         MVI   KHDGCNT+1,4       UPDATE HEADING LINE COUNT.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'S'.\n         TM    KLEFT,X'80'       IS THE LEFT DISPLAY FIXED?\n         BO    KHDFIXOK          YES.\n         MVI   HEADING+69,C'R'   NO.\n         TM    KRIGHT,X'80'      IS THE RIGHT DISPLAY FIXED?\n         BO    KHDFIXOK          YES.\n         MVI   HEADING+69,C'N'   NO, NEITHER DISPLAY IS FIXED.\nKHDFIXOK MVC   TRLKFIXD,HEADING+69  UPDATE SCREEN TRAILER.\n         LA    R2,BUFFER         INITIALIZE SCREEN BUFFER POINTER.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVI   LL-79(R2),C' '    BLANK THE DIRECT ACCESS LOCATOR LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-77(10,R2),=C'LOC: _____'\n         TM    KFLAGS,KDATEFMT   NO, USING YYMMDD DATE FORMAT?\n         BZ    KLOCHDOK          NO.\n         MVC   LL-78(5,R2),LL-77(R2) YES, ADJUST HEADING.\nKLOCHDOK L     R3,=A(KNOWITEM)   GET ITEM IDENTIFICATION ROUTINE EP.\n         LA    R1,KLEFT          POINT TO LEFT DISPLAY SPECIFICATION.\n         BASR  R14,R3            INVOKE ITEM IDENTIFICATION ROUTINE.\n         MVI   LL-66(R2),X'3B'   SEPARATE THIS DISPLAY AREA.\n         LA    R1,KRIGHT         POINT TO RIGHT DISPLAY SPECIFICATION.\n         BASR  R14,R3            INVOKE ITEM IDENTIFICATION ROUTINE.\n         MVI   LL-33(R2),X'3B'   SEPARATE THIS DISPLAY AREA.\n         MVC   TRLKLNAM,LL-64(R2)\n         MVC   TRLKLGRF,LL-35(R2)\n         MVC   TRLKRNAM,LL-31(R2)\n         MVC   TRLKRGRF,LL-2(R2) UPDATE SCREEN TRAILER.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVI   LL-79(R2),C' '    BLANK THE SUB-HEADING-1 LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-79(12,R2),=CL12'INTRVL-START'\n         L     R1,KLEFT          GET LEFT DISPLAY TYPE.\n         SLL   R1,5              MULTIPLY BY 32 FOR INDEX.\n         TM    KLEFT+8,X'80'     LEFT DISPLAY IN TABULAR MODE?\n         BZ    KL1G              NO, GRAPHIC MODE.\n         AL    R1,KTSBH1TB       POINT TO CORRECT SUB-HEADING-1.\n         MVC   LL-65(32,R2),0(R1) LOAD LEFT SUB-HEADING-1.\n         TR    LL-65(32,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.\n         B     KL1OK\nKL1G     AL    R1,KGSBH1TB       POINT TO CORRECT SUB-HEADING-1.\n         MVC   LL-65(32,R2),0(R1) LOAD LEFT SUB-HEADING-1.\nKL1OK    MVI   LL-66(R2),X'3B'   SEPARATE THIS DISPLAY AREA.\n         L     R1,KRIGHT         GET RIGHT DISPLAY TYPE.\n         SLL   R1,5              MULTIPLY BY 32 FOR INDEX.\n         TM    KRIGHT+8,X'80'    RIGHT DISPLAY IN TABULAR MODE?\n         BZ    KR1G              NO, GRAPHIC MODE.\n         AL    R1,KTSBH1TB       POINT TO CORRECT SUB-HEADING-1.\n         MVC   LL-32(32,R2),0(R1) LOAD RIGHT SUB-HEADING-1.\n         TR    LL-32(32,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.\n         B     KR1OK\nKR1G     AL    R1,KGSBH1TB       POINT TO CORRECT SUB-HEADING-1.\n         MVC   LL-32(32,R2),0(R1) LOAD RIGHT SUB-HEADING-1.\nKR1OK    MVI   LL-33(R2),X'3B'   SEPARATE THIS DISPLAY AREA.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVI   LL-79(R2),C' '    BLANK THE SUB-HEADING-2 LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-78(10,R2),=CL10'DATE  TIME'\n         L     R1,KLEFT          GET LEFT DISPLAY TYPE.\n         SLL   R1,5              MULTIPLY BY 32 FOR INDEX.\n         TM    KLEFT+8,X'80'     LEFT DISPLAY IN TABULAR MODE?\n         BZ    KL2G              NO, GRAPHIC MODE.\n         AL    R1,KTSBH2TB       POINT TO CORRECT SUB-HEADING-2.\n         MVC   LL-65(32,R2),0(R1) LOAD LEFT SUB-HEADING-2.\n         TR    LL-65(32,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.\n         B     KL2OK\nKL2G     AL    R1,KGSBH2TB       POINT TO CORRECT SUB-HEADING-2.\n         MVC   LL-65(32,R2),0(R1) LOAD LEFT SUB-HEADING-2.\n         TR    LL-65(25,R2),XLATETBL  PERHAPS FOLD TO UPPER CASE.\nKL2OK    MVI   LL-66(R2),X'3B'   SEPARATE THIS DISPLAY AREA.\n         L     R1,KRIGHT         GET RIGHT DISPLAY TYPE.\n         SLL   R1,5              MULTIPLY BY 32 FOR INDEX.\n         TM    KRIGHT+8,X'80'    RIGHT DISPLAY IN TABULAR MODE?\n         BZ    KR2G              NO, GRAPHIC MODE.\n         AL    R1,KTSBH2TB       POINT TO CORRECT SUB-HEADING-2.\n         MVC   LL-32(32,R2),0(R1) LOAD RIGHT SUB-HEADING-2.\n         TR    LL-32(32,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.\n         B     KR2OK\nKR2G     AL    R1,KGSBH2TB       POINT TO CORRECT SUB-HEADING-2.\n         MVC   LL-32(32,R2),0(R1) LOAD RIGHT SUB-HEADING-2.\n         TR    LL-32(25,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.\nKR2OK    MVI   LL-33(R2),X'3B'   SEPARATE THIS DISPLAY AREA.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         ICM   R5,15,KINTADDR    POINT TO FIRST INTERVAL TO DISPLAY.\n         BZ    KSHOWTOP          IF ZERO THEN SHOW FROM THE TOP.\n         USING DGRMFINT,R5\n         CP    KLOCDATE,PL1ZERO  ANY DATE LOCATION REQUESTED?\n         BE    KINTSCRL          NO, PERFORM ANY SCROLLING.\n         MVC   WORK(4),KLOCDATE  COPY THE DATE TO LOCATE.\n         ZAP   KLOCDATE,PL1ZERO  REMEMBER THAT THE DATE IS NOW LOCATED.\n         L     R5,DGFSTINT       POINT TO THE FIRST RMF INTERVAL ENTRY.\n         LA    R0,DGINTLEN\n         BAS   R14,R5ACCESS\n         CLC   DGINTDAT,WORK\n         BNL   KSHOWTOP          REQUESTED DATE BEFORE FIRST INTERVAL.\n         SLR   R1,R1             IGNORE SCROLLING.\n         L     R5,KINTADDR       POINT TO THE TOP-OF-SCREEN ENTRY.\n         LA    R0,DGINTLEN\n         BAS   R14,R5ACCESS\n         CLC   DGINTDAT,WORK\n         BNL   KLOCNEXT          DATE BEFORE CURRENT TOP INTERVAL.\n         L     R5,DGLSTINT       POINT TO THE LAST RMF INTERVAL ENTRY.\nKLOCLOOP ST    R5,KINTADDR       THIS MAY BE THE NEW TOP OF SCREEN.\n         LA    R0,DGINTLEN\n         BAS   R14,R5ACCESS\n         CLC   DGINTDAT,WORK\n         BL    KINTAXOK          NOW AT CORRECT LOCATION.\nKLOCNEXT ICM   R5,15,DGINTPRV    POINT TO THE PREVIOUS INTERVAL ENTRY.\n         BNZ   KLOCLOOP          GO TEST ITS DATE.\n         B     KSHOWTOP          BACKWARD CHAIN END SO SHOW FROM TOP.\nKINTSCRL CLI   KSCRLAMT,X'7F'    BOTTOM RQUESTED?\n         BE    KSHOWBTM          YES, DIRECTLY ACCESS THE BOTTOM.\n         ICM   R1,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.\n         BZ    KDGINTLP          ZERO SO START FORMATTING.\n         BP    KFWDLOOP          POSITIVE SO SCROLL FORWARD.\n         LPR   R1,R1             NEGATIVE SO GET COUNT TO SCROLL BACK.\nKBWDLOOP LA    R0,DGINTLEN\n         BAS   R14,R5ACCESS\n         ICM   R5,15,DGINTPRV    POINT TO THE PREVIOUS INTERVAL ENTRY.\n         BZ    KSHOWTOP          BACKWARD CHAIN END SO SHOW FROM TOP.\n         BCT   R1,KBWDLOOP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KSHOTHIS          NOW AT THE CORRECT LOCATION.\nKSHOWBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.\n         L     R5,DGLSTINT       POINT TO THE LAST INTERVAL.\n         L     R1,LINES          GET THE SCREEN LINE COUNT.\n         AHI   R1,-6             GET THE SCROLL UP VALUE.\n         B     KBWDLOOP          GO DO IT.\nKFWDLOOP LA    R0,DGINTLEN\n         BAS   R14,R5ACCESS\n         ICM   R5,15,DGINTNXT    POINT TO THE NEXT INTERVAL ENTRY.\n         BZ    KSHOWTOP          HANDLE END OF CHAIN IF ENCOUNTERED.\n         BCT   R1,KFWDLOOP       CONTINUE SCROLLING TO CORRECT ENTRY.\nKSHOTHIS ST    R1,KSCRLAMT       RESET THE AMOUNT TO BE SCROLLED.\n         ST    R5,KINTADDR       THIS IS THE NEW TOP OF SCREEN.\n         B     KDGINTLP          GET FORMATTING.\nKSHOWTOP ST    R5,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?\n         BE    KSHOWBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.\n         L     R5,DGFSTINT       POINT TO THE FIRST RMF INTERVAL ENTRY.\n         ST    R5,KINTADDR       THIS IS THE NEW TOP OF SCREEN.\n         B     KDGINTLP          GET FORMATTING.\n         SPACE\nKSETITEM MVI   3(R7),0           FLAG NO ITEMS IN THIS CATEGORY.\n         LTR   R0,R0             ANY DATA TO SHOW?\n         BZR   R14               NO, RETURN WITH CATEGORY SUPPRESSED.\n         MVI   3(R7),1           YES, ONE ITEM TO SHOW.\n         BR    R14               RETURN.\n         SPACE\n         DROP  R10,R5            KNOWSYS, DGRMFINT.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - ITEM IDENTIFICATION'\n         USING KNOWITEM,R3\nKNOWITEM DS    0H                DETERMINE ITEM NUMBER AND IDENTIFIER.\n         ST    R14,KSAVER14      SAVE RETURN ADDRESS.\n         L     R15,0(,R1)        GET DISPLAY TYPE.\n         SLL   R15,2             MUTLIPLY BY 4 FOR INDEX.\n         B     KITEMTBL(R15)     BRANCH TO APPROPRIATE ROUTINE.\nKITEMTBL B     KNULITEM          TYPE 00 - CPU UTILIZATION.\n         B     KIORITEM          TYPE 01 - SYSTEM I/O RATE.\n         B     KPGRITEM          TYPE 02 - SYSTEM PAGING RATE.\n         B     KNULITEM          TYPE 03 - SYSTEM HIGH UIC.\n         B     KNULITEM          TYPE 04 - CENTRAL STORAGE USAGE.\n         B     KEIOITEM          TYPE 05 - EXPANDED STORAGE I/O RATE.\n         B     KMIGITEM          TYPE 06 - EXPANDED STORAGE MIGR. AGE.\n         B     KNULITEM          TYPE 07 - EXPANDED STORAGE USAGE.\n         B     KNULITEM          TYPE 08 - COMMON SERVICE AREA USAGE.\n         B     KNULITEM          TYPE 09 - EXTENDED CSA USAGE.\n         B     KAS#ITEM          TYPE 10 - READY ASID COUNT.\n         B     KAS#ITEM          TYPE 11 - IN ASID COUNT.\n         B     KAS#ITEM          TYPE 12 - OUT ASID COUNT.\n         B     KAS#ITEM          TYPE 13 - WAIT ASID COUNT.\n         B     KAS#ITEM          TYPE 14 - BATCH JOB ASID COUNT.\n         B     KAS#ITEM          TYPE 15 - STARTED TASK ASID COUNT.\n         B     KAS#ITEM          TYPE 16 - TSO USER ASID COUNT.\n         B     KAS#ITEM          TYPE 17 - LOGICAL READY ASID COUNT.\n         B     KAS#ITEM          TYPE 18 - LOGICAL WAIT ASID COUNT.\n         B     KAS#ITEM          TYPE 19 - ASCH ASID COUNT.\n         B     KAS#ITEM          TYPE 20 - OPEN EDITION MVS ASID COUNT.\n         B     KPRTITEM          TYPE 21 - PRINT OUTPUT VOLUMES.\n         B     KPDNITEM          TYPE 22 - PAGE/SWAP DATA SET ACTIVITY.\n         B     KPDNITEM          TYPE 23 - PAGE/SWAP DATA SET FULLNESS.\n         B     KCHNITEM          TYPE 24 - CHANNEL PATH UTILIZATION.\n         B     KDEVITEM          TYPE 25 - DEVICE UTILIZATION.\n         B     KDEVITEM          TYPE 26 - DEVICE SERVICE TIME.\n         B     KPGNITEM          TYPE 27 - TRANSACTION RESPONSE TIME.\n         B     KPGNITEM          TYPE 28 - SERVICE UNIT ABSORPTION.\nKIORITEM L     R6,DGMAXIOR       LOAD MAXIMUM I/O RATE FOR SYSTEM.\n         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.\nKPGRITEM L     R6,DGMAXPGR       LOAD MAXIMUM PAGING RATE FOR SYSTEM.\n         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.\nKEIOITEM L     R6,DGMAXEIO       LOAD MAXIMUM SYSTEM ESTG READ RATE.\n         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.\nKMIGITEM L     R6,DGMAXMIG       LOAD MAXIMUM MIGRATION AGE FOR SYSTEM.\n         MH    R6,TEN+2          CONVERT TO HUNDREDTHS.\n         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.\nKAS#ITEM L     R15,0(,R1)        GET ITEM CATEGORY.\n         S     R15,TEN           MAKE IT RELATIVE TO ASID DISPLAYS.\n         SLL   R15,1             DOUBLE IT FOR INDEX.\n         LA    R6,DGMAXRDY(R15)  POINT TO MAXIMUM COUNT ENCOUNTERED.\n         SLR   R7,R7             CLEAR FOR INSERT.\n         ICM   R7,3,0(R6)        GET THE HIGHEST VALUE FOUND.\n         MH    R7,HUNDRED        CORRECT THE ORDER OF MAGNITUDE.\n         LR    R6,R7             GET THE ANSWER.\n         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.\nKPRTITEM SLR   R6,R6             PREPARE FOR DIVIDE.\n         L     R7,DGMAXPRT       LOAD MAXIMUM INTERVAL PRINT LINES.\n         D     R6,TEN            CORRECT THE ORDER OF MAGNITUDE.\n         LA    R6,1(,R7)         GET THE ANSWER AND ROUND UP.\nKITMSCAL DS    0H                ONLY SCALE SINGLE ITEM CATEGORIES.\n         L     R9,0(,R1)         GET DISPLAY TYPE CODE.\n         SLL   R9,5              MULTIPLY BY 32 FOR INDEX.\n         AL    R9,KGSBH2TB       POINT TO TYPE'S GRAPH SCALE AXIS.\n         L     R7,KSCLTBAD       POINT TO FIRST SCALE TABLE ENTRY.\n         LA    R0,KSCLTBNO       GET THE NUMBER OF SCALE TABLE ENTRIES.\nKSCALELP CL    R6,0(,R7)         CORRECT SCALE?\n         BH    KGOTSCAL          YES.\n         LA    R7,KSCLTBSZ(,R7)  NO, POINT TO NEXT ENTRY.\n         BCT   R0,KSCALELP\nKGOTSCAL MVC   16(4,R1),4(R7)    LOAD SCALE FACTOR INTO DISPLAY VECTOR.\n         MVC   0(24,R9),8(R7)    SUPPLY CORRECT GRAPH CALLIBRATION.\nKNULITEM SLR   R15,R15\n         ST    R15,4(,R1)\n         MVI   7(R1),1           ONLY ONE ITEM SO ITEM NUMBER IS ONE.\n         ST    R15,12(,R1)       ONLY ONE ITEM SO ZERO ITEM IDENTIFIER.\n         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.\nKPGNITEM LA    R6,DGFSTPG#       POINT TO PG NUMBER ENTRY ANCHORS.\n         LA    R0,DGPG#LEN       GET LENGTH OF ENTRY TO FETCH.\n         B     KITMSRCH          COMMENCE SEARCH FOR ITEM.\nKCHNITEM LA    R6,DGFSTCH#       POINT TO CHP NUMBER ENTRY ANCHORS.\n         LA    R0,DGCH#LEN       GET LENGTH OF ENTRY TO FETCH.\n         B     KITMSRCH          COMMENCE SEARCH FOR ITEM.\nKDEVITEM LA    R6,DGFSTDV#       POINT TO DEVICE NUMBER ENTRY ANCHORS.\n         LA    R0,DGDV#LEN       GET LENGTH OF ENTRY TO FETCH.\nKITMSRCH ICM   R15,B'1111',4(R1) GET ITEM NUMBER.\n         BNP   KIIDSRCH          NOT POSITIVE SO SEARCH FOR IDENTIFIER.\n         C     R15,8(,R6)        IS ITEM NUMBER HIGHER THAN MAXIMUM?\n         BNH   KITMIDLP          NO, PROCEED.\n         L     R15,8(,R6)        YES, REDUCE ITEM NUMBER TO MAXIMUM.\nKNOITEMS ST    R15,4(,R1)        UPDATE THE DISPLAY VECTOR.\n         LTR   R15,R15           ANY ITEMS OF THIS TYPE KNOWN?\n         BNZ   KITMIDLP          YES, PROCEED.\n         ST    R15,0(,R1)        NO, JUST SHOW CPU UTILIZATION.\n         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.\n         USING DGPG#ENT,R6 = DGCH#ENT = DGDV#ENT.\nKITMIDLP L     R6,DGPG#NXT       CHAIN TO APPROPRIATE ENTRY.\n         BAS   R14,R6ACCESS\n         BCT   R15,KITMIDLP\n         MVC   12(4,R1),DGPG#    COPY ITEM IDENTIFIER.\n         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.\n         DROP  R6                DGPG#ENT = DGCH#ENT = DGDV#ENT.\nKIIDSRCH ICM   R15,15,8(R6)      ANY ITEMS OF THIS TYPE KNOWN?\n         BZ    KNOITEMS          NO, JUST SHOW CPU UTILIZATION.\n         L     R7,12(,R1)        YES, GET THE DESIRED ITEM IDENTIFIER.\n         SLR   R15,R15           CLEAR ITEM NUMBER COUNTER.\nKIIDLOOP LR    R5,R6             REMEMBER PREVIOUS ENTRY ADDRESS.\n         ICM   R6,15,0(R6)       POINT TO NEXT ENTRY ON CHAIN.\n         BZ    KIIDLAST          END OF CHAIN SO SHOW LAST ONE.\n         USING DGPG#ENT,R6 = DGCH#ENT = DGDV#ENT.\n         BAS   R14,R6ACCESS\n         LA    R15,1(,R15)       INCREMENT ITEM NUMBER COUNTER.\n         C     R7,DGPG#          FOUND THE CORRECT ITEM?\n         BH    KIIDLOOP          NO, CONTINUE FOLLOWING CHAIN.\nKIDFOUND ST    R15,4(,R1)        YES, SAVE IT.\n         MVC   12(4,R1),DGPG#    COPY ITEM IDENTIFIER IN CASE NOT SAME.\n         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.\n         DROP  R6                DGPG#ENT = DGCH#ENT = DGDV#ENT.\nKIIDLAST LR    R6,R5             POINT TO LAST ENTRY.\n         B     KIDFOUND          PRETEND IT WAS FOUND.\nKPDNITEM LA    R6,DGFSTPDN       POINT TO PAGE DSNAME ENTRY ANCHORS.\n         L     R15,4(,R1)        GET ITEM NUMBER.\n         C     R15,8(,R6)        IS ITEM NUMBER HIGHER THAN MAXIMUM?\n         BNH   KPDSNMLP          NO, PROCEED.\n         L     R15,8(,R6)        YES, REDUCE ITEM NUMBER TO MAXIMUM.\n         ST    R15,4(,R1)        UPDATE THE DISPLAY VECTOR.\n         LTR   R15,R15           ANY ITEMS OF THIS TYPE KNOWN?\n         BNZ   KPDSNMLP          YES, PROCEED.\n         ST    R15,0(,R1)        NO, JUST SHOW CPU UTILIZATION.\n         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.\n         USING DGPDNENT,R6\nKPDSNMLP L     R6,DGPDNNXT       CHAIN TO APPROPRIATE ENTRY.\n         LA    R0,DGPDNLEN\n         BAS   R14,R6ACCESS\n         BCT   R15,KPDSNMLP\n         MVC   12(44,R1),DGPDNAME COPY PAGE/SWAP DATA SET NAME.\n         DROP  R6                DGPDNENT.\n         SPACE\nKFMTITEM DS    0H                SHOW THE ITEM DISPLAY NAME.\n         L     R7,0(,R1)         GET THE DISPLAY TYPE CODE.\n         SLL   R7,2              MULTIPLY BY FOUR FOR INDEX.\n         LR    R9,R7             COPY IT.\n         AL    R7,KNAMTBAD       POINT TO DISPLAY TYPE NAME.\n         L     R8,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R8,R2             POINT TO DISPLAY LINE OFFSET.\n         MVC   2(3,R8),0(R7)     SHOW DISPLAY TYPE NAME.\n         MVC   25(8,R8),=CL8'GRAF: N '\n         TM    8(R1),X'80'       IS THIS DISPLAY IN TABULAR MODE?\n         BO    KIIGRFOK          YES.\n         MVI   31(R8),C'Y'       NO, IT IS IN GRAPHIC MODE.\nKIIGRFOK CLI   3(R1),KVARI       VARIABLE MAXIMUM DISPLAY TYPE?\n         BL    KIRETURN          NO, SO JUST RETURN.\n         L     R15,KMAXITEM(R9)  YES, GET ITS MAXIMUM.\n         CVD   R15,WORK          SHOW IT.\n         MVC   17(6,R8),ED5\n         ED    17(6,R8),WORK+5\n         MVI   23(R8),C')'\nKIIMXCHK CLI   19(R8),C' '       LEADING BLANK?\n         BNE   KIIMAXOK          NO.\n         MVC   19(5,R8),20(R8)   YES, SUPPRESS IT.\n         B     KIIMXCHK          CHECK IF LAST LEADING BLANK.\nKIIMAXOK MVC   16(2,R8),=C'OF'\n         LR    R9,R1             REMEMBER DISPLAY VECTOR ADDRESS.\n         L     R15,4(,R1)        GET THE ITEM NUMBER.\n         CVD   R15,WORK\n         LA    R1,14(,R8)        ITEM NUMBER CAN'T BE ZERO, BUT....\n         MVC   9(6,R8),ED5Z\n         EDMK  9(6,R8),WORK+5\n         BCTR  R1,0\n         MVI   0(R1),C'('\n         LR    R1,R9             RESTORE DISPLAY VECTOR ADDRESS.\n         CLI   3(R1),KCHAN       ITEM NAME TO BE SHOWN HERE?\n         BL    KIRETURN          NO, SO JUST RETURN.\n         BE    KIICHPID          YES, SHOW CHANNEL PATH IDENTIFIER.\n         CLI   3(R1),KPERF       YES, BUT IS IT A DEVICE NUMBER?\n         BL    KIIDEVID          YES, SHOW IT.\n         L     R7,12(,R1)        GET THE PERFORMANCE GROUP NUMBER.\n         CVD   R7,WORK           SHOW IT.\n         MVC   WORK2(6),=X'402120202020'\n         ED    WORK2(6),WORK+5\n         MVC   5(3,R8),WORK2+3\n         B     KIRETURN          RETURN.\nKIIDEVID UNPK  5(5,R8),14(3,R1)  SHOW DEVICE NUMBER.\n         TR    5(4,R8),HEX-C'0'\n         MVI   9(R8),C' '\n         B     KIRETURN          RETURN.\nKIICHPID UNPK  5(3,R8),15(2,R1)  SHOW CHANNEL PATH NUMBER.\n         TR    5(2,R8),HEX-C'0'\n         MVI   7(R8),C' '\nKIRETURN L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         BR    R14               RETURN.\n         SPACE\n         DROP  R3,R4             KNOWITEM, DGSYSTEM.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE - ESTABLISH CROSS-MEMORY ACCESS'\n         USING KGQSCAN,R10\nKGQSCAN  DS    0H\n         OI    KFLAGS,KXM        FLAG USING CROSS-MEMORY METHOD.\n         SLR   R0,R0\n         ST    R0,GQKTOKEN       ZERO THE GQSCAN TOKEN.\n         SLR   R3,R3             PREPARE FOR MESSAGE 0.\n         LA    R5,SECWORKA       GET A GQSCAN WORK AREA.\n         GQSCAN AREA=((5),512),SCOPE=SYSTEM,                           +\n               RESNAME=(IMPMAJOR,IMPMINOR,IMINRLEN,SPECIFIC,8),        +\n               TOKEN=GQKTOKEN\n         LTR   R15,R15           FOUND AN ENQUEUE?\n         BZ    KFINDGAT          YES, GO LOOK AT IT.\n         CHI   R15,8             WAS AREA FILLED WITH TOO MUCH DATA?\n         BNE   KGATDOWN          NO, THE DATA GATHERER IS DOWN.\n         GQSCAN QUIT=YES,TOKEN=GQKTOKEN YES, SO QUIT THE GQSCAN FIRST.\n         SPACE\nKFINDGAT DS    0H                GO FIND THE DATA GATHERER ASID.\n         LA    R1,SECWORKA       POINT TO RIB.\n         USING RIB,R1\n         SLR   R4,R4\n         ICM   R4,3,RIBVLEN      GET LENGTH OF RIBVAR.\n         SRL   R0,16             GET LENGTH OF FIXED RIB PORTION.\n         ALR   R4,R0             GET OFFSET TO FIRST RIBE.\n         ALR   R4,R1             POINT TO FIRST RIBE.\n         DROP  R1                RIB.\n         USING RIBE,R4\n         SLR   R1,R1\n         ICM   R1,3,RIBEASID     LOAD THE DATA GATHERER ASID.\n         C     R1,KGATASID       IS IT STILL THE SAME ADDRESS SPACE?\n         BE    KGATASOK          YES, PROCEED.\n         XC    KTOPADRS(KTOPADLN),KTOPADRS     RESET TOP ADDRESS.\n         ST    R1,KGATASID       SAVE THE ASID FOR LATER.\nKGATASOK SLL   R1,2              MULTIPLY ASID BY FOUR FOR INDEX.\n         A     R1,ASVTADDR\n         AIF   (&MVSMON).KOSASID\n         AIF   (&XATEST).KOSASID\n         ICM   R1,B'1111',0(R1)  LOAD DATA GATHERER ASCB POINTER.\n         BNM   KGATDOWN          THE ADDRESS SPACE IS NOT ASSIGNED.\n         AGO   .KF4ASID\n.KOSASID ANOP\n         ICM   R1,15,524(R1)     LOAD DATA GATHERER ASCB POINTER.\n         BM    KGATDOWN          THE ADDRESS SPACE IS NOT ASSIGNED.\n.KF4ASID ANOP\n         MVC   DGTCBADR,RIBETCB  SAVE THE DATA GATHERER TCB ADDRESS.\n         DROP  R4                RIBE.\n         AIF   (&MSPMON).KXASTUF\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BNO   KAXSTUFF          NO, CAN'T USE ACCESS REGISTERS.\n         L     R5,KGATALET       YES, LOAD THE PREVIOUS ALET VALUE.\n         L     R1,336(,R1)       POINT TO THE DATA GATHERER ASSB.\n         CLC   DGSTOKEN,48(R1)   SAME SPACE TOKEN AS BEFORE?\n         BNE   KGETSTKN          NO, GO GET THE NEW ONE.\n         LTR   R5,R5             YES, STILL HAVE THE CURRENT ALET?\n         BNZ   KGOTALET          YES, PROCEED.\nKGETSTKN MVC   DGSTOKEN,48(R1)   NO, COPY DATA GATHERER SPACE TOKEN.\n         MODESET MF=(E,MDSTSUP0)\n         LTR   R5,R5             OUT-OF-DATE ALET STILL IN DU-AL?\n         BZ    KDGDELOK          NO, VALID ALET CANNOT BE ZERO.\n         ALESERV DELETE,ALET=(5),CHKEAX=NO,MF=(E,ALESERVL)\n         SLR   R5,R5             ALET NOW DELETED.\n         ST    R5,KGATALET       ZERO THE REMEMBERED ALET VALUE.\n         XC    KTOPADRS(KTOPADLN),KTOPADRS     RESET TOP ADDRESS.\nKDGDELOK DS    0H\n         ALESERV ADD,STOKEN=DGSTOKEN,ALET=(5),CHKEAX=NO,               +\n               MF=(E,ALESERVL)   ADD ALET TO DU-AL.\n         LR    R3,R15            SAVE THE RETURN CODE.\n         MODESET MF=(E,MDSTPROB)\n         LTR   R3,R3             WAS THE ADD SUCCESSFUL?\n         BZ    KDGADDOK          YES, PROCEED.\n         XC    DGSTOKEN,DGSTOKEN  NO, ERASE REMEMBERED STOKEN VALUE.\n         NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.\n         ST    R3,WORK\n         UNPK  KBADMSG2+27(3),WORK+3(2)\n         TR    KBADMSG2+27(2),HEX-C'0'\n         MVI   KBADMSG2+29,C' '  DISPLAY THE RETURN CODE.\n         LA    R3,2              PREPARE FOR MESSAGE 2.\n         B     KGATDOWN\nKDGADDOK ST    R5,KGATALET       SAVE THE ALET.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\nKGOTALET DS    0H                CROSS-MEMORY ACCESS NOW ESTABLISHED.\n         SAR   A4,R5             ACCESS REGISTER 4 TO ACCESS IMDATGAT.\n         SAR   A5,R5             ACCESS REGISTER 5 TO ACCESS IMDATGAT.\n         SAR   A6,R5             ACCESS REGISTER 6 TO ACCESS IMDATGAT.\n         SAC   X'200'            GET INTO ACCESS REGISTER MODE.\n         B     KBASESPN          CROSS-MEMORY ACCESS NOW ESTABLISHED.\n         SPACE\nKAXSTUFF DS    0H                ESTABLISH XA CROSS-MEMORY ACCESS.\n.KXASTUF ANOP\n         MODESET MF=(E,MDSTSUP0)\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\n         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.\n         LA    R1,1              ADDRESS ALL AX NUMBER.\n         AXSET AX=(1)            SET AX = 1.\n         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.\n         L     R4,KGATASID       GET TARGET ASID.\n         SSAR  R4                MAKE TARGET JOB THE SECONDARY ASID.\n         B     KBASESPN          XA CROSS-MEMORY NOW ACCESSABLE.\n         DROP  R10               KGQSCAN.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE - REMOVE CROSS-MEMORY ACCESS'\n         USING KXMUNDO,R10\nKXMUNDO  DS    0H\n         AIF   (&MSPMON).KXAUNDO\n         TM    OSBITS,X'9B'      MVS/ESA?\n         BNO   KXAUNDO           NO, CAN'T USE ACCESS REGISTERS.\n         SAC   X'000'            REVERT TO PRIMARY SPACE MODE.\n         XC    WORK(16),WORK     GET SOME NULLS.\n         LAM   A4,A6,WORK        ZERO ACCESS REGISTERS.\n         B     KXMUNDUN          ESA CROSS-MEMORY ACCESS NOW REMOVED.\n         SPACE\nKXAUNDO  DS    0H                REMOVE XA CROSS-MEMORY ACCESS.\n.KXAUNDO ANOP\n         L     R8,PSAAOLD        GET CURRENT ASCB.\n         LH    R8,ASID(,R8)      GET CURRENT ASID.\n         SSAR  R8                GET OUT OF CROSS-MEMORY MODE.\n         L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\n         STATUS RESET,MC,STEP    START ALL OTHER TASKS.\n         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\n         MODESET MF=(E,MDSTPROB)\n         B     KXMUNDUN          XA CROSS-MEMORY ACCESS NOW REMOVED.\n         SPACE\n         DROP  R10               KXMUNDO.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE - DISPLAY SYSTEM SELECTION LIST'\n         USING KDISPSYS,R10\nKDISPSYS DS    0H                DISPLAY THE \"SYSTEM\" SELECTION LIST.\n         CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n         BE    KNOSYSEL          YES, DO NOT PERFORM SELECTION.\n         SLR   R1,R1             CLEAR FOR INSERT.\n         ICM   R1,1,INBUFF+1     CURSOR ON HEADING LINE?\n         BZ    KNOSYSEL          YES, SO NO SELECTION HAS BEEN MADE.\n         LA    R2,BUFFER-LL      NO, POINT TO BEFORE DETAIL BUFFER.\nKSZOOMLP LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\n         CLI   LL-80(R2),X'F5'   VALID LIST ITEM LINE?\n         BNE   KNOSYSEL          NO, CHECK IF SYSTEM SELECTION NEEDED.\n         BCT   R1,KSZOOMLP       YES, DECREMENT LINE COUNTER.\n         MVC   KSHOWSYS,LL-70(R2)     LOAD SELECTED SYSTEM ID.\n         B     KTESTSYS          GO DISPLAY DATA FOR THIS SYSTEM.\n         SPACE\nKNOSYSEL DS    0H                DISPLAY \"SYSTEM\" SELECTION LIST.\n         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\n*        L     R4,KBASEADR       LOAD ADDRESS OF BASE ENTRY.\n         USING DGBASE,R4\n         MVC   HEADING,HEADNGK1  LOAD SYSTEM SELECTION LIST HEADING.\n         MVC   KSHOWSYS,BLANKS   ERASE ANY SELECTED SYSTEM IDENTIFIER.\n         ICM   R0,15,DGSMFCNT    GET ONLINE SMF EVENT TRIPLET COUNT.\n         BZ    KSELDSYS          NONE, SO SHOW PERFORMANCE SYSID LIST.\n         LA    R15,KETYPMAX      GET MAXIMUM SUPPORTED HERE.\n         CR    R15,R0            MORE AVAILABLE THAN SUPPORTED?\n         BL    KTYPCTOK          YES, USE THE \"SUPPORTED HERE\" COUNT.\n         LR    R15,R0            NO, USE THE ACTUAL TRIPLET COUNT.\nKTYPCTOK SLR   R0,R0             RESET ZOOMABLE LINE COUNT.\n         LA    R1,KETYPTBL       POINT TO EVENT TYPE LABEL TABLE.\n         LA    R2,BUFFER         POINT TO FIRST DETAIL LINE.\n         LA    R5,DGFSTDSN       POINT TO FIRST EVENT TRIPLET.\nKEVENTLP ICM   R14,15,8(R5)      GET THE NUMBER OF ITEMS CAPTURED.\n         BZ    KNXTEVNT          IF ZERO THEN DO NOT LIST THEM.\n         AHI   R0,1              COUNT THE DATA SETS AS ONE LIST ITEM.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-70(20,R2),0(R1) SHOW THE NAME OF THE EVENT TYPE.\n         CVD   R14,WORK\n         MVC   LL-50(12,R2),ED11\n         ED    LL-50(12,R2),WORK+2\n         MVC   LL-37(12,R2),20(R1) SHOW THE NATURE OF THE ITEM LIST.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\nKNXTEVNT LA    R1,32(,R1)        POINT TO THE NEXT EVENT TYPE LABEL.\n         LA    R5,12(,R5)        POINT TO THE NEXT EVENT TRIPLET.\n         BCT   R15,KEVENTLP      PROCESS THE NEXT EVENT TYPE.\nKSELDSYS A     R0,DGNUMSYS       ADD THE NUMBER OF REGISTERED SYSTEMS.\n         CVD   R0,WORK           DISPLAY IT IN THE HEADING.\n         MVC   HEADING+51(4),ED3\n         ED    HEADING+51(4),WORK+6\n         LA    R4,DGFSTSYS       POINT TO FIRST SYSTEM ENTRY ADDRESS.\n         B     KSYSNEXT\n         DROP  R4                DGBASE.\n         USING DGSYSTEM,4\nKSYSSELP LA    R0,DGSYSLEN\n         BAS   R14,R4ACCESS\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-70(4,R2),DGSYSID LOAD SYSTEM IDENTIFIER.\n         L     R0,DGNUMINT       GET INTERVAL COUNT FOR THIS SYSTEM.\n         CVD   R0,WORK\n         MVC   LL-50(12,2),ED11\n         ED    LL-50(12,2),WORK+2\n         MVC   LL-37(22,2),KINTEVNT\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   KEODGDAT          YES, SO SHOW IT.\nKSYSNEXT ICM   R4,15,DGSYSNXT    POINT TO THE NEXT SYSTEM ENTRY.\n         BNZ   KSYSSELP          PROCESS IT.\n         B     KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.\n         DROP  R10               KDISPSYS.\n         SPACE\nKINTEVNT DC    CL22'RMF INTERVALS CAPTURED'\nKETYPTBL DS    0H                LABEL TABLE FOR SMF EVENT TYPES.\n         DC    CL20'* DATA SET EVENTS   ',CL12'DATA SETS   '\n         DC    CL20'* STEP END EVENTS   ',CL12'PROGRAMS    '\n         DC    CL20'* JOB STEP EVENTS   ',CL12'JOB NAMES   '\nKETYPMAX EQU   3                 NUMBER OF DIFFERENT TYPES SUPPORTED.\n         SPACE\n         LTORG\n         SPACE 2\n         USING DGRMFINT,R5\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CPU UTLIZATION'\n         USING KDISPCPU,R10\nKDISPCPU DS    0H                DISPLAY THE CPU UTILIZATION.\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KCPULPAR          YES, JUST SHOW LOGICAL FIGURES.\n         ICM   R0,15,DGCPBUSY    LOAD THE PHYSICAL CPU UTILIZATION.\n         BNP   KCPULPAR          NO DATA HERE TO SHOW.\n         CVD   R0,WORK\n         MVC   24(8,R1),EDK4PNT1\n         ED    24(7,R1),WORK+5\n         CL    R0,DGCPUTIL       PHYSICAL BUSY GREATER THAN LOGICAL?\n         BNH   KCPULPAR          NO, LEAVE DEFAULT FIRST SUBHEADING.\n         L     R8,8(,R7)         YES, GET THE DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL(R8)  POINT TO THE FIRST SUBHEADING.\n         L     R9,KGSBH1TB       POINT TO STANDARD SUBHEADING TABLE.\n         CLC   1(32,R8),0(R9)    STANDARD HEADING IN PLACE?\n         BNE   KCPUHDOK          NO, DO NOT OVERLAY WITH LPAR VERSION.\n         MVC   1(32,R8),KLPCPUHD YES, SHOW LEGEND FOR LPAR COMPONENTS.\nKCPUHDOK SLR   R8,R8\n         LR    R9,R0             COPY PHYSICAL CPU UTILIZATION.\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'07'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\nKCPULPAR ICM   R9,15,DGCPUTIL    LOAD THE CPU UTILIZATION.\n         BM    KCPUNULL          NO RMF TYPE 70 DATA SO SHOW NULL LINE.\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLCPU          YES.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH.\nKCPUNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    8(R7),X'80'       IN GRAPHIC MODE?\n         BZ    KNULPLOT          YES, JUST SO \"GRAPH PAPER\" PERHAPS.\n         BR    R14               NO, LEAVE TABULAR LINE BLANK.\n         SPACE\nKTABLCPU DS    0H\n         CVD   R9,WORK\n         MVC   24(8,R1),EDK4PNT1\n         ED    24(7,R1),WORK+5\n         CLI   KRIGHT+3,KPERF    PERFORMANCE GROUP IN RIGHT DISPLAY?\n         BNLR  R14               YES, LEAVE CAPTURE COLUMNS BLANK.\n         ICM   R6,15,DGFSTPGN    ANY PERFORMANCE GROUP ENTRIES?\n         BZR   R14               NO, SUPPRESS 0.0%.\n         CLC   DGCPBUSY,DGCPUTIL IS THIS MVS THE ONLY CPU LOAD?\n         BNH   KCPTBHDN          YES, CPU TABULAR HEADING ALL DONE.\n         L     R8,8(,R7)         NO, GET THE DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL+LL(R8)   POINT TO THE SECOND SUBHEADING.\n         MVI   27(8),C' '        OVERLAY 'TOTAL'.\n         MVC   28(4,R8),KSHOWSYS INDICATE LPAR TOTAL WITH SYSTEM-ID.\nKCPTBHDN SLR   R7,R7             ZERO CPU ACCUMULATOR.\n         ST    R7,WORK2          CLEAR A HOLDING AREA.\n         LA    R15,DGFSTPGN      POINT TO FIRST PERF. ENTRY ADDRESS.\n         USING DGPRFGRP,R6\nKCPUPGLP LR    R6,R15            POINT TO THIS PERFORMANCE GROUP ENTRY.\n         ICM   R6,15,DGPRFNXT    POINT TO NEXT PERFORMANCE GROUP ENTRY.\n         BZ    KCPDONPG          THERE IS NONE.\n         LR    R15,R6            COPY BASE SECTION ADDRESS.\n         LA    R0,DGPRFLEN+DGPERLEN\n         BAS   R14,R6ACCESS\n         CLI   DGPRFPER+3,1      MORE THAN ONE PERIOD IN GROUP?\n         BNH   KPPOKAY1          NO, HAVE RETRIEVED WHOLE GROUP'S DATA.\n         LA    R14,DGPERLEN      YES, GET A PERIOD ENTRY LENGTH.\n         MH    R14,DGPRFPER+2    MULTIPLY BY THE PERIOD COUNT.\n         LR    R6,R15            RESTORE BASE SECTION ADDRESS.\n         LA    R0,DGPRFLEN(,R14) GET TOTAL GROUP DATA LENGTH.\n         BAS   R14,R6ACCESS\nKPPOKAY1 ICM   R15,15,DGPRFNUM   IS THIS PERFORMANCE GROUP ZERO?\n         BNZ   KCPUPGOK          NO.\n         MVC   WORK2(4),DGPERCPU YES, SAVE P. G. 0 CPU UTILIZATION.\nKCPUPGOK LR    R15,R6            SAVE BASE SECTION ADDRESS FOR LATER.\n         TM    DGPRFFLG,X'02'    IS THIS A REPORT PERFORMANCE GROUP?\n         BO    KCPUPGLP          YES, DO NOT COUNT IT.\n         L     R3,DGPRFPER       GET NUMBER OF PERFORMANCE PERIODS.\n         LA    R6,DGPERIOD       POINT TO THE FIRST PERIOD SECTION.\n         DROP  R6                DGPRFGRP.\n         USING DGPERIOD,R6\nKCPUPPLP A     R7,DGPERCPU       ACCUMULATE CPU PERMILLAGE.\n         LA    R6,DGPERLEN(,R6)  POINT TO NEXT PERF. PERIOD SECTION.\n         BCT   R3,KCPUPPLP       PROCESS NEXT PERFORMANCE PERIOD.\n         B     KCPUPGLP          PROCESS NEXT PERFORMANCE GROUP.\n         DROP  R6                DGPRFGRP.\nKCPDONPG D     R6,DGCPUCNT       AVERAGE SERVICE ACROSS ALL CPUS.\n         ST    R7,WORK2+4        SAVE CAPTURED CPU UTILIZATION.\n         CVD   R7,WORK           SHOW CAPTURED CPU UTILIZATION.\n         MVC   1(8,R1),EDK4PNT1\n         ED    1(7,R1),WORK+5\n         CR    R7,R9             CAPTURED LESS THAN TOTAL?\n         BNL   KCRETURN          NO, DO NOT SHOW CAPTURE RATIO.\n         M     R6,ONEGRAND       MULTIPLY BY 1000 FOR PERMILLAGE.\n         DR    R6,R9             GET CAPTURE RATIO.\n         CVD   R7,WORK           SHOW CPU UTILIZATION CAPTURE RATIO.\n         MVC   10(5,R1),EDK2PNT3\n         ED    10(5,R1),WORK+6\n         MVI   15(R1),C'%'       INDICATE PERCENTAGE.\n         L     R7,WORK2+4        LOAD CAPTURED CPU UTILIZATION.\n         S     R7,WORK2          SUBTRACT CAPTURED PG ZERO CPU.\n         M     R6,ONEGRAND       MULTIPLY BY 1000 FOR PERMILLAGE.\n         DR    R6,R9             GET CAPTURE RATIO.\n         CVD   R7,WORK           SHOW CPU UTILIZATION CAPTURE RATIO.\n         MVC   17(5,R1),EDK2PNT3\n         ED    17(5,R1),WORK+6\n         MVI   22(R1),C'%'       INDICATE PERCENTAGE.\nKCRETURN L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPCPU.\n         SPACE\nKLPCPUHD DS    0CL32\n         DC    C' CPU-%: ',X'05',C'=THIS-LPAR  ',X'07',C'=OTHER(S) '\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SYSTEM I/O RATE'\n         USING KDISPIOR,R10\nKDISPIOR DS    0H                DISPLAY THE SYSTEM I/O RATE.\n         TM    DGCPUTIL,X'80'    ANY RMF TYPE 70 DATA FOR INTERVAL?\n         BO    KNULDATA          NO, SO LEAVE BLANK.\n         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.\n         L     R9,DGIORATE       LOAD THE SYSTEM I/O RATE.\n         CVD   R9,WORK\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         MVC   24(9,R1),EDK5PNT2\n         ED    24(9,R1),WORK+4   DISPLAY THE TOTAL I/O RATE.\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLIOR          YES.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,TENGRAND\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         L     R9,DGIOTPI1       DISPLAY THE TPI CC=1 RATE.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,TENGRAND\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH.\n         SPACE\nKTABLIOR DS    0H\n         LR    R7,R9             COPY THE TOTAL I/O RATE.\n         L     R8,DGIOTPI1       GET THE TPI CC=1 RATE.\n         SR    R9,R8             GET THE I/O SLIH ENTRY RATE.\n         CVD   R9,WORK\n         MVC   15(9,R1),EDK5PNT2\n         ED    15(9,R1),WORK+4   DISPLAY THE SLIH I/O RATE.\n         CVD   R8,WORK\n         MVC   6(9,R1),EDK5PNT2\n         ED    6(9,R1),WORK+4    DISPLAY THE TPI I/O RATE.\n         LTR   R7,R7             ANY I/O?\n         BZR   R14               NO, RETURN.\n         LR    R9,R8             COPY THE TPI I/O RATE.\n         M     R8,TENGRAND       SCALE FOR HUNDREDTHS OF PERCENT.\n         DR    R8,R7             GET TPI PERCENTAGE OF TOTAL.\n         CVD   R9,WORK\n         SRP   WORK,64-1,5       ROUND TO PERMILLAGE.\n         MVC   0(7,R1),EDK4PNT1\n         ED    0(7,R1),WORK+5    DISPLAY THE PERCENTAGE OF TPI CC=1.\n         MVI   7(R1),C'%'        INDICATE PERCENTAGE.\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPIOR.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SYSTEM PAGING RATE'\n         USING KDISPPGR,R10\nKDISPPGR DS    0H                DISPLAY THE SYSTEM TOTAL PAGING RATE.\n         TM    DGPAGEIN,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?\n         BO    KNULDATA          NO, SO LEAVE BLANK.\n         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.\n         L     R9,DGPAGEIN\n         A     R9,DGPAGOUT\n         A     R9,DGSWPGIN\n         A     R9,DGSWPGOT\n         A     R9,DGVIOIN\n         A     R9,DGVIOOUT\n         CVD   R9,WORK\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         MVC   24(9,R1),EDK5PNT2\n         ED    24(9,R1),WORK+4\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLPGR          YES.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,TENGRAND\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         L     R9,DGPAGEIN       DISPLAY SYSTEM NON-VIO PAGING RATE.\n         A     R9,DGPAGOUT\n         A     R9,DGSWPGIN\n         A     R9,DGSWPGOT\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,TENGRAND\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         L     R9,DGPAGEIN       DISPLAY THE SYSTEM DEMAND PAGING RATE.\n         A     R9,DGPAGOUT\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,TENGRAND\n         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH.\n         SPACE\nKTABLPGR DS    0H\n         L     R9,DGVIOIN        DISPLAY THE SYSTEM VIO PAGING RATE.\n         A     R9,DGVIOOUT\n         CVD   R9,WORK\n         MVC   16(9,R1),EDK5PNT2\n         ED    16(9,R1),WORK+4\n         L     R9,DGSWPGIN       DISPLAY THE SYSTEM SWAP PAGING RATE.\n         A     R9,DGSWPGOT\n         CVD   R9,WORK\n         MVC   8(9,R1),EDK5PNT2\n         ED    8(9,R1),WORK+4\n         L     R9,DGPAGEIN       DISPLAY THE SYSTEM DEMAND PAGING RATE.\n         A     R9,DGPAGOUT\n         CVD   R9,WORK\n         MVC   0(9,R1),EDK5PNT2\n         ED    0(9,R1),WORK+4\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPPGR.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SYSTEM HIGH UIC'\n         USING KDISPUIC,R10\nKDISPUIC DS    0H                DISPLAY UNREFERENCED INTERVAL COUNT.\n         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?\n         BO    KNULDATA          NO, SO LEAVE BLANK.\n         TM    8(R1),X'80'       IN TABULAR MODE?\n         BO    KTABLUIC          YES.\n         L     R9,DGUICAVG       LOAD AVERAGE SYSTEM-HIGH-UIC BY TEN.\n         CVD   R9,WORK\n         SLR   R8,R8\n         SLDL  R8,2              MULTIPLY BY FOUR.\n         D     R8,AHUNDRED       DIVIDE BY 100.\n         STH   R9,WORK+2         SAVE AVERAGE SYSTEM-HIGH-UIC/2.5.\n         L     R9,DGUICLOW       LOAD MINIMUM SYSTEM-HIGH-UIC.\n         SLR   R8,R8\n         SLDL  R8,2              MULTIPLY BY FOUR.\n         D     R8,TEN            DIVIDE BY 10.\n         STH   R9,WORK           SAVE MINIMUM SYSTEM-HIGH-UIC/2.5.\n         L     R9,DGUICHIG       LOAD MAXIMUM SYSTEM-HIGH-UIC.\n         SLR   R8,R8\n         SLDL  R8,2              MULTIPLY BY FOUR.\n         D     R8,TEN            DIVIDE BY 10.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         MVC   25(7,R1),EDK4PNT1\n         ED    25(7,R1),WORK+5\n         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT MAXIMUM SYSTEM-HIGH-UIC.\n         LH    R9,WORK+2         LOAD AVERAGE SYSTEM-HIGH-UIC/2.5.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT AVERAGE SYSTEM-HIGH-UIC.\n         LH    R9,WORK           LOAD MINIMUM SYSTEM-HIGH-UIC/2.5.\n         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT MINIMUM SYSTEM-HIGH-UIC.\n         DROP  R10               KDISPUIC.\n         SPACE\nKTABLUIC DS    0H\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         L     R9,DGUICLOW       SHOW MINIMUM SYSTEM-HIGH-UIC.\n         CVD   R9,WORK\n         MVC   2(8,R1),ED7\n         ED    2(8,R1),WORK+4\n         L     R9,DGUICAVG       LOAD AVERAGE SYSTEM-HIGH-UIC BY TEN.\n         CVD   R9,WORK\n         MVC   12(9,R1),EDK6PNT1\n         ED    12(9,R1),WORK+4\n         L     R9,DGUICHIG       LOAD MAXIMUM SYSTEM-HIGH-UIC.\n         CVD   R9,WORK\n         MVC   23(8,R1),ED7\n         ED    23(8,R1),WORK+4\n         BR    R14               PROCESSING NOW COMPLETE.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CENTRAL STORAGE USAGE'\n         USING KDISPCNT,R10\nKDISPCNT DS    0H                DISPLAY CENTRAL STORAGE USAGE.\n         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?\n         BO    KNULDATA          NO, SO LEAVE BLANK.\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         L     R8,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.\n         A     R8,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.\n         A     R8,DGRGNPCT       ADD PERCENTAGE USER REGION FRAMES.\n         A     R8,DGLSQPCT       ADD PERCENTAGE LSQA FRAMES.\n         A     R8,DGLPAPCT       ADD PERCENTAGE LPA FRAMES.\n         A     R8,DGCSAPCT       ADD PERCENTAGE CSA FRAMES.\n         L     R9,AHUNDRED\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KGRAFOK           YES.\n         LA    R15,X'0C'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT AVAILABLE FRAMES TO 100%.\n         L     R9,AHUNDRED\nKGRAFOK  SR    R9,R8             GET AVAILABLE FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   27(4,R1),ED3\n         ED    27(4,R1),WORK+6\n         MVI   31(R1),C'%'       INDICATE PERCENTAGE.\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLCNT          YES.\n         LR    R9,R8\n         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT CSA FRAMES.\n         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.\n         A     R9,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.\n         A     R9,DGRGNPCT       ADD PERCENTAGE USER REGION FRAMES.\n         A     R9,DGLSQPCT       ADD PERCENTAGE LSQA FRAMES.\n         A     R9,DGLPAPCT       ADD PERCENTAGE LPA FRAMES.\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT LPA FRAMES.\n         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.\n         A     R9,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.\n         A     R9,DGRGNPCT       ADD PERCENTAGE USER REGION FRAMES.\n         A     R9,DGLSQPCT       ADD PERCENTAGE LSQA FRAMES.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT LSQA FRAMES.\n         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.\n         A     R9,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.\n         A     R9,DGRGNPCT       ADD PERCENTAGE USER REGION FRAMES.\n         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT USER REGION FRAMES.\n         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.\n         A     R9,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT SQA FRAMES.\n         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.\n         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT NUCLEUS FRAMES.\n         SPACE\nKTABLCNT DS    0H\n         L     R9,DGCSAPCT       SHOW CSA FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   22(4,R1),ED3\n         ED    22(4,R1),WORK+6\n         MVI   26(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGLPAPCT       SHOW LPA FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   18(4,R1),ED3\n         ED    18(4,R1),WORK+6\n         MVI   22(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGLSQPCT       SHOW LSQA FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   14(4,R1),ED3\n         ED    14(4,R1),WORK+6\n         MVI   18(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGRGNPCT       SHOW USER REGION FRAME % AVERAGE.\n         CVD   R9,WORK\n         MVC   9(4,R1),ED3\n         ED    9(4,R1),WORK+6\n         MVI   13(R1),C'%'       INDICATE PERCENTAGE.\n         L     R4,DGSQAPCT       SHOW SQA FRAME PERCENT AVERAGE.\n         CVD   R4,WORK\n         MVC   4(4,R1),ED3\n         ED    4(4,R1),WORK+6\n         MVI   8(R1),C'%'        INDICATE PERCENTAGE.\n         L     R4,DGNUCPCT       SHOW NUCLEUS FRAME PERCENT AVERAGE.\n         CVD   R4,WORK\n         MVC   0(4,R1),ED3\n         ED    0(4,R1),WORK+6\n         MVI   4(R1),C'%'        INDICATE PERCENTAGE.\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPCNT.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - E-STORAGE I/O RATE'\n         USING KDISPEIO,R10\nKDISPEIO DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.\n         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?\n         BO    KNULDATA          NO, SO LEAVE BLANK.\n         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.\n         L     R9,DGESTGRD       LOAD THE SYSTEM E-STORAGE READ RATE.\n         A     R9,DGESTGWR       ADD THE SYSTEM E-STORAGE WRITE RATE.\n         CVD   R9,WORK\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         MVC   24(9,R1),EDK5PNT2\n         ED    24(9,R1),WORK+4\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLEIO          YES.\n         M     R8,WORK2          NO, SCALE FOR PLOTTING.\n         D     R8,TENGRAND\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         L     R9,DGESTGRD       LOAD THE SYSTEM E-STORAGE READ RATE.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,TENGRAND\n         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH.\n         SPACE\nKTABLEIO DS    0H\n         L     R9,DGESTGWR       LOAD THE SYSTEM E-STORAGE WRITE RATE.\n         CVD   R9,WORK\n         MVC   12(9,R1),EDK5PNT2\n         ED    12(9,R1),WORK+4\n         L     R9,DGESTGRD       LOAD THE SYSTEM E-STORAGE READ RATE.\n         CVD   R9,WORK\n         MVC   0(9,R1),EDK5PNT2\n         ED    0(9,R1),WORK+4\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPEIO.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - E-STOR MIGRATION AGE'\n         USING KDISPMIG,R10\nKDISPMIG DS    0H                SHOW EXPANDED STORAGE MIGRATION AGE.\n         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?\n         BO    KNULDATA          NO, SO LEAVE BLANK.\n         TM    8(R1),X'80'       IN TABULAR MODE?\n         BO    KTABLMIG          YES.\n         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         L     R9,DGMIGAVG       LOAD AVERAGE MIGRATION AGE BY TEN.\n         CVD   R9,WORK\n         MVC   24(9,R1),EDK6PNT1 DISPLAY IT IN NUMERIC FORM.\n         ED    24(9,R1),WORK+4\n         OC    WORK(4),WORK      ANY SIGNIFICANT DIGITS LOST?\n         BNZ   KBIGMIGA          YES.\n         TM    WORK+4,X'F0'      ANY SIGNIFICANT DIGITS LOST?\n         BZ    KMIGAVOK          NO.\nKBIGMIGA SRP   WORK,64-1,0       DIVIDE BY 10 AND TRUNCATE.\n         MVC   25(8,R1),ED7      DISPLAY IT IN NUMERIC FORM.\n         ED    25(8,R1),WORK+4\nKMIGAVOK L     R9,DGMIGHIG       LOAD MAXIMUM MIGRATION AGE.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,AHUNDRED\n         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT MAXIMUM MIGRATION AGE.\n         L     R9,DGMIGAVG       LOAD AVERAGE MIGRATION AGE BY TEN.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,ONEGRAND\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT AVERAGE MIGRATION AGE.\n         L     R9,DGMIGLOW       LOAD MINIMUM MIGRATION AGE.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,AHUNDRED\n         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT MINIMUM MIGRATION AGE.\n         SPACE\nKTABLMIG DS    0H\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         L     R9,DGMIGLOW       SHOW MINIMUM MIGRATION AGE.\n         CVD   R9,WORK\n         MVC   2(8,R1),ED7\n         ED    2(8,R1),WORK+4\n         L     R9,DGMIGAVG       LOAD AVERAGE MIGRATION AGE BY TEN.\n         CVD   R9,WORK\n         MVC   12(9,R1),EDK6PNT1\n         ED    12(9,R1),WORK+4\n         L     R9,DGMIGHIG       LOAD MAXIMUM MIGRATION AGE.\n         CVD   R9,WORK\n         MVC   23(8,R1),ED7\n         ED    23(8,R1),WORK+4\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPMIG.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - EXPANDED STORAGE USAGE'\n         USING KDISPEXP,R10\nKDISPEXP DS    0H                DISPLAY EXPANDED STORAGE USAGE.\n         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?\n         BO    KNULDATA          NO, SO LEAVE BLANK.\n         TM    DGHPREXP,X'80'    YES, ANY EXPANDED STORAGE USAGE DATA?\n         BO    KNULDATA          NO, SO LEAVE BLANK.\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLEXP          YES.\n         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.\n         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.\n         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.\n         A     R9,DGLSQEXP       ADD PERCENTAGE LSQA FRAMES.\n         A     R9,DGLPAEXP       ADD PERCENTAGE LPA FRAMES.\n         A     R9,DGCSAEXP       ADD PERCENTAGE CSA FRAMES.\n         A     R9,DGHPREXP       ADD PERCENTAGE HIPERSPACE FRAMES.\n         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT HIPERSPACE FRAMES.\n         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.\n         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.\n         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.\n         A     R9,DGLSQEXP       ADD PERCENTAGE LSQA FRAMES.\n         A     R9,DGLPAEXP       ADD PERCENTAGE LPA FRAMES.\n         A     R9,DGCSAEXP       ADD PERCENTAGE CSA FRAMES.\n         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT CSA FRAMES.\n         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.\n         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.\n         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.\n         A     R9,DGLSQEXP       ADD PERCENTAGE LSQA FRAMES.\n         A     R9,DGLPAEXP       ADD PERCENTAGE LPA FRAMES.\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT LPA FRAMES.\n         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.\n         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.\n         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.\n         A     R9,DGLSQEXP       ADD PERCENTAGE LSQA FRAMES.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT LSQA FRAMES.\n         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.\n         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.\n         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.\n         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT USER REGION FRAMES.\n         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.\n         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT SQA FRAMES.\n         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.\n         LA    R15,X'07'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT VIO FRAMES.\n         SPACE\nKTABLEXP DS    0H\n         L     R9,DGHPREXP       SHOW HIPERSPACE FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   27(4,R1),ED3\n         ED    27(4,R1),WORK+6\n         MVI   31(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGCSAEXP       SHOW CSA FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   22(4,R1),ED3\n         ED    22(4,R1),WORK+6\n         MVI   26(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGLPAEXP       SHOW LPA FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   18(4,R1),ED3\n         ED    18(4,R1),WORK+6\n         MVI   22(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGLSQEXP       SHOW LSQA FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   14(4,R1),ED3\n         ED    14(4,R1),WORK+6\n         MVI   18(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGRGNEXP       SHOW USER REGION FRAME % AVERAGE.\n         CVD   R9,WORK\n         MVC   9(4,R1),ED3\n         ED    9(4,R1),WORK+6\n         MVI   13(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGSQAEXP       SHOW SQA FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   4(4,R1),ED3\n         ED    4(4,R1),WORK+6\n         MVI   8(R1),C'%'        INDICATE PERCENTAGE.\n         L     R9,DGVIOEXP       SHOW VIO FRAME PERCENT AVERAGE.\n         CVD   R9,WORK\n         MVC   0(4,R1),ED3\n         ED    0(4,R1),WORK+6\n         MVI   4(R1),C'%'        INDICATE PERCENTAGE.\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPEXP.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CSA USAGE'\n         USING KDISPCSA,R10\nKDISPCSA DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         SLR   R9,R9\n         ICM   R9,3,DGCSAMAX     LOAD THE MAXIMUM CSA USAGE.\n         BNP   KCSANULL          NO DATA HERE TO SHOW.\n         CVD   R9,WORK\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLCSA          YES.\n         MVC   24(8,R1),EDK4PNT1\n         ED    24(7,R1),WORK+5   SHOW TOTAL AVERAGE CSA USAGE.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH FOR HIGHEST TOTAL CSA.\n         LH    R9,DGCSAAVG       LOAD THE AVERAGE CSA USAGE.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH FOR SUBPOOL 241.\n         LH    R9,DG227AVG\n         AH    R9,DG228AVG\n         AH    R9,DG231AVG\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH FOR SUBPOOL 231.\n         LH    R9,DG227AVG\n         AH    R9,DG228AVG\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH FOR SUBPOOL 228.\n         LH    R9,DG227AVG\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH FOR SUBPOOL 227.\nKCSANULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    8(R7),X'80'       IN GRAPHIC MODE?\n         BZ    KNULPLOT          YES, JUST SO \"GRAPH PAPER\" PERHAPS.\n         BR    R14               NO, LEAVE TABULAR LINE BLANK.\n         SPACE\nKTABLCSA DS    0H\n         MVC   8(8,R1),EDK4PNT1\n         ED    8(7,R1),WORK+5    SHOW THE MAXIMUM CSA USAGE.\n         ICM   R9,3,DGCSAAVG     LOAD THE AVERAGE CSA USAGE.\n         CVD   R9,WORK\n         MVC   0(8,R1),EDK4PNT1\n         ED    0(7,R1),WORK+5    SHOW THE AVERAGE CSA USAGE.\n         L     R9,DGCSAALC       GET THE MAXIMUM ALLOCATED CSA.\n         SRL   R9,10             CONVERT TO KILOBYTES.\n         CVD   R9,WORK\n         MVC   17(7,R1),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    17(6,R1),WORK+5\n         L     R9,DGCSAEXT       GET THE MINIMUM CSA LARGEST FREE XTNT.\n         SRL   R9,10             CONVERT TO KILOBYTES.\n         CVD   R9,WORK\n         MVC   25(7,R1),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    25(6,R1),WORK+5\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPCSA.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - EXTENDED CSA USAGE'\n         USING KDISPECS,R10\nKDISPECS DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         SLR   R9,R9\n         ICM   R9,3,DGECSAMX     LOAD THE MAXIMUM ECSA USAGE.\n         BNP   KECSNULL          NO DATA HERE TO SHOW.\n         CVD   R9,WORK\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLECS          YES.\n         MVC   24(8,R1),EDK4PNT1\n         ED    24(7,R1),WORK+5   SHOW TOTAL MAXIMUM ECSA USAGE.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         LH    R9,DGECSAAV       LOAD THE AVERAGE ECSA USAGE.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH.\nKECSNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    8(R7),X'80'       IN GRAPHIC MODE?\n         BZ    KNULPLOT          YES, JUST SO \"GRAPH PAPER\" PERHAPS.\n         BR    R14               NO, LEAVE TABULAR LINE BLANK.\n         SPACE\nKTABLECS DS    0H\n         MVC   8(8,R1),EDK4PNT1\n         ED    8(7,R1),WORK+5    SHOW THE MAXIMUM ECSA USAGE.\n         ICM   R9,3,DGECSAAV     LOAD THE AVERAGE ECSA USAGE.\n         CVD   R9,WORK\n         MVC   0(8,R1),EDK4PNT1\n         ED    0(7,R1),WORK+5    SHOW THE AVERAGE ECSA USAGE.\n         L     R9,DGECSAAL       GET THE MAXIMUM ALLOCATED ECSA.\n         SRL   R9,10             CONVERT TO KILOBYTES.\n         CVD   R9,WORK\n         MVC   17(7,R1),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    17(6,R1),WORK+5\n         L     R9,DGECSAXT       GET MINIMUM ECSA LARGEST FREE EXTENT.\n         SRL   R9,10             CONVERT TO KILOBYTES.\n         CVD   R9,WORK\n         MVC   25(7,R1),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    25(6,R1),WORK+5\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPECS.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - ADDRESS SPACE COUNTS'\n         USING KDISPAS#,R10\nKDISPAS# DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.\n         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.\n         L     R6,0(,R1)         GET THE DISPLAY CATEGORY NUMBER.\n         S     R6,TEN            MAKE IT RELATIVE TO ASID DISPLAYS.\n         SLL   R6,3              MULTIPLY BY EIGHT FOR INDEX.\n         LA    R6,DGRDYLOW(R6)   POINT TO ASID COUNT TRIPLET.\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         SLR   R9,R9             CLEAR FOR FIRST INSERT.\n         ICM   R9,3,2(R6)        LOAD THE MAXIMUM COUNT.\n         CVD   R9,WORK\n         MVC   25(6,R1),ED5Z\n         ED    25(6,R1),WORK+5\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLAS#          YES.\n         LTR   R9,R9             CHECK FOR ANY ACTIVITY.\n         BZ    KNOWPLOT          IF ZERO THEN JUST SHOW \"GRAPH PAPER\".\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,AHUNDRED\n         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         L     R9,4(,R6)         LOAD THE AVERAGE BY TEN.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,ONEGRAND\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         SLR   R9,R9\n         ICM   R9,3,0(R6)        LOAD THE MINIMUM COUNT.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,AHUNDRED\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH.\n         SPACE\nKTABLAS# DS    0H\n         LTR   R9,R9             CHECK FOR ANY ACTIVITY.\n         BZR   R14               IF ZERO THEN SUPPRESS ALL FIGURES.\n         ICM   R9,3,0(R6)        LOAD THE MINIMUM COUNT.\n         CVD   R9,WORK\n         MVC   4(6,R1),ED5\n         ED    4(6,R1),WORK+5\n         L     R9,4(,R6)         LOAD THE AVERAGE COUNT TIMES TEN.\n         CVD   R9,WORK\n         MVC   12(9,R1),EDK6PNT1\n         ED    12(9,R1),WORK+4\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPAS#.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PRINT OUTPUT VOLUMES'\n         USING KDISPPRT,R10\nKDISPPRT DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.\n         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.\n         L     R9,DGINTPRL       SHOW THE TOTAL INTERVAL LINE COUNT.\n         A     R9,DGINTPRX\n         A     R9,DGINTPRN\n         CVD   R9,WORK\n         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         MVC   25(8,R1),ED7Z\n         ED    25(8,R1),WORK+4\n         TM    8(R7),X'80'       IN TABULAR MODE?\n         BO    KTABLPRT          YES.\n         M     R8,WORK2          NO, SCALE FOR PLOTTING.\n         D     R8,=F'100000'     PLOTTING THOUSANDS OF PRINT LINES.\n         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         L     R9,DGINTPRL       LOAD THE NODE PRINT LINE COUNT.\n         A     R9,DGINTPRX       ADD THE XWTR PRINT LINE COUNT.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,=F'100000'     PLOTTING THOUSANDS OF PRINT LINES.\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         L     R9,DGINTPRL       LOAD THE NODE PRINT LINE COUNT.\n         M     R8,WORK2          SCALE FOR PLOTTING.\n         D     R8,=F'100000'     PLOTTING THOUSANDS OF PRINT LINES.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH.\n         SPACE\nKTABLPRT DS    0H\n         L     R9,DGINTPRL       SHOW THE NODE PRINT LINE COUNT.\n         CVD   R9,WORK\n         MVC   0(8,R1),ED7Z\n         ED    0(8,R1),WORK+4\n         L     R9,DGINTPRX       SHOW THE XWTR PRINT LINE COUNT.\n         CVD   R9,WORK\n         MVC   8(8,R1),ED7Z\n         ED    8(8,R1),WORK+4\n         L     R9,DGINTPRN       SHOW THE NJE PRINT LINE COUNT.\n         CVD   R9,WORK\n         MVC   16(8,R1),ED7Z\n         ED    16(8,R1),WORK+4\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10               KDISPPRT.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PAGE D/S UTILIZATION'\n         USING KDISPPDU,R10\nKDISPPDU DS    0H                DISPLAY PAGE/SWAP DATASET UTILIZATION.\n         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.\n         LA    R7,12(,R1)        POINT TO THE PAGE/SWAP DATA SET NAME.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.\n         MVC   1(21,R8),0(R7)    SUPPLY PAGE/SWAP DATA SET NAME.\n         TM    8(R3),X'80'       IN TABULAR MODE?\n         BZ    KTPDUHDG          NO.\n         MVC   1(23,R8),0(R7)    SUPPLY AN EXTRA TWO BYTES OF DSNAME.\nKTPDUHDG TR    1(32,R8),XLATETBL ENSURE NO UNPRINTABLE CHARACTERS.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         LA    R6,DGFSTPAG       POINT TO FIRST DEVICE ENTRY ADDRESS.\n         USING DGPAGEDS,R6\nKPDUSRCH ICM   R6,15,DGPAGNXT    POINT TO THE NEXT PAGE DATA SET ENTRY.\n         BZ    KPAGNULL          THERE IS NONE.\n         LA    R0,DGPAGLEN\n         BAS   R14,R6ACCESS\n         CLC   DGPAGDSN,0(R7)    FOUND THE RIGHT DATA SET ENTRY?\n         BNE   KPDUSRCH          NO, CONTINUE SEARCH.\n         L     R9,DGPAGBSY       SHOW THE DATA SET PERMILLE BUSY.\n         CVD   R9,WORK\n         MVC   25(7,R1),EDK4PNT1\n         ED    25(7,R1),WORK+5\n         MVI   32(R1),C'%'       INDICATE PERCENTAGE.\n         TM    8(R3),X'80'       IN TABULAR MODE?\n         BO    KTABLPDU          YES.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.\n         BAS   R7,KPDUPLOT       PLOT THE DATA SET UTILIZATION PERCENT.\n         L     R9,DGPAGXFR       LOAD THE DATA SET TRANSFER RATE.\n         SLR   R8,R8\n         D     R8,AHUNDRED       CONVERT TO WHOLE PAGES PER SECOND.\n         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.\n         BAS   R7,KPDUPLOT       PLOT THE DATA SET TRANSFER RATE.\n         L     R9,DGPAGIOR       LOAD THE DATA SET I/O RATE.\n         SLR   R8,R8\n         D     R8,AHUNDRED       CONVERT TO SSCH+RSCH PER SECOND.\n         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.\n         BAS   R7,KPDUPLOT       PLOT THE DATA SET I/O RATE.\n         LA    R3,25(,R1)        POINT TO LAST GRAPH COLUMN.\n         MVC   WORK2(1),KGCHAR   GET GRAPH BACKGROUND DISPLAY CODE.\n         ICM   R0,15,DGPAGBAD    ANY BAD SLOTS?\n         BZ    KPDUBGLP          NO.\n         MVI   WORK2,X'0A'       YES, USE RED \"GRAPH PAPER\".\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\nKPDUBGLP CLI   0(R3),X'00'       EMPTY BYTE?\n         BNER  R14               NO, PROCESSING NOW COMPLETE.\n         MVC   0(1,R3),WORK2     YES, LOAD BACKGROUND DISPLAY CODE.\n         BCTR  R3,0              BACK UP ONE BYTE.\n         B     KPDUBGLP          CONTINUE SUPPLY OF GRAPH BACKGROUND.\n         SPACE\nKPDUPLOT DS    0H                \"POLY\" GRAPH (NO LIE) PLOT SUBROUTINE.\n         CLI   0(R1),X'3B'       BEEN HERE BEFORE?\n         BE    KPGPLTOK          YES, THE BACKGROUND STUFF IS DONE.\n         MVI   0(R1),X'3B'       NO, SEPARATE THIS DISPLAY AREA.\n         XC    1(25,R1),1(R1)    CLEAR THE GRAPHIC AREA.\nKPGPLTOK LA    R9,2(,R9)         ROUND THE VALUE UPWARDS.\n         SRA   R9,2              QUARTER IT.\n         BZR   R7                DON'T PLOT ANYTHING FOR ZERO PERCENT.\n         STC   R15,SECWORKA      CREATE POTENTIAL GRAPHIC CODES.\n         MVC   SECWORKA+1(31),SECWORKA\n         BCTR  R9,0              DECREMENT FOR EXECUTE.\n         CHI   R9,24             WILL IT FIT ON THE GRAPH?\n         BNH   KPGPLTEX          YES, PROCEED.\n         LA    R9,24             NO, SO TRUNCATE IT TO THE MAXIMUM.\nKPGPLTEX EX    R9,KPGPLTOR       YES, SUPPLY THE REST.\n         BR    R7                NOW THIS PLOT IS COMPLETE.\nKPGPLTOR OC    1(0,R1),SECWORKA                 <<< EXECUTED >>>\n         SPACE\nKTABLPDU DS    0H\n         L     R9,DGPAGXFR       SHOW THE DATA SET TRANSFER RATE.\n         CVD   R9,WORK\n         SRP   WORK,64-1,5       ROUND TO TENTHS PER SECOND.\n         MVC   18(7,R1),EDK4PNT1\n         ED    18(7,R1),WORK+5\n         L     R9,DGPAGIOR       SHOW THE DATA SET I/O RATE.\n         CVD   R9,WORK\n         SRP   WORK,64-1,5       ROUND TO TENTHS PER SECOND.\n         MVC   11(7,R1),EDK4PNT1\n         ED    11(7,R1),WORK+5\n         ICM   R9,15,DGPAGTIM    SHOW DATA SET TRANSFER SERVICE TIME.\n         BZ    KPDUTMOK          LEAVE BLANK IF NO ACTIVITY (0US).\n         CVD   R9,WORK\n         SRP   WORK,64-2,5       ROUND TO 1/10,000THS OF A SECOND.\n         MVC   4(7,R1),EDK4PNT1\n         ED    4(7,R1),WORK+5\nKPDUTMOK L     R9,DGPAGBAD       SHOW THE BAD SLOT OR SWAP SET COUNT.\n         CVD   R9,WORK\n         MVC   0(4,R1),ED3Z\n         ED    0(4,R1),WORK+6\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10,R6            KDISPPDU, DGPAGEDS.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PAGE D/S FULLNESS'\n         USING KDISPPDF,R10\nKDISPPDF DS    0H                DISPLAY PAGE/SWAP DATA SET FULLNESS.\n         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.\n         LA    R7,12(,R1)        POINT TO THE PAGE/SWAP DATA SET NAME.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.\n         MVC   1(24,R8),0(R7)    SUPPLY PAGE/SWAP DATA SET NAME.\n         TR    1(24,R8),XLATETBL ENSURE NO UNPRINTABLE CHARACTERS.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         LA    R6,DGFSTPAG       POINT TO FIRST DEVICE ENTRY ADDRESS.\n         USING DGPAGEDS,R6\nKPDFSRCH ICM   R6,15,DGPAGNXT    POINT TO THE NEXT DEVICE ENTRY.\n         BZ    KPAGNULL          THERE IS NONE.\n         LA    R0,DGPAGLEN\n         BAS   R14,R6ACCESS\n         CLC   DGPAGDSN,0(R7)    FOUND THE RIGHT DATA SET ENTRY?\n         BNE   KPDFSRCH          NO, CONTINUE SEARCH.\n         TM    8(R3),X'80'       IN TABULAR MODE?\n         BO    KTABLPDF          YES.\n         L     R9,DGPAGAVG       SHOW THE DATA SET AVERAGE FULLNESS.\n         CVD   R9,WORK\n         MVC   25(7,R1),EDK4PNT1\n         ED    25(7,R1),WORK+5\n         MVI   32(R1),C'%'       INDICATE PERCENTAGE.\n         MVC   WORK2(1),KGCHAR   SAVE GRAPH BACKGROUND DISPLAY CODE.\n         ICM   R0,15,DGPAGBAD    ANY BAD SLOTS?\n         BZ    KPDFBDOK          NO.\n         MVI   KGCHAR,X'0A'      YES, USE RED \"GRAPH PAPER\".\nKPDFBDOK L     R9,DGPAGMAX       SHOW THE DATA SET MAXIMUM FULLNESS.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         MVC   KGCHAR,WORK2      RESTORE GRAPH BACKGROUND DISPLAY CODE.\n         L     R9,DGPAGAVG       SHOW THE DATA SET AVERAGE FULLNESS.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE GRAPH.\n         L     R9,DGPAGMIN       SHOW THE DATA SET MINIMUM FULLNESS.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         B     KNOWPLOT          PLOT THE GRAPH.\n         SPACE\nKTABLPDF DS    0H\n         L     R9,DGPAGMAX       SHOW THE DATA SET MAXIMUM FULLNESS.\n         CVD   R9,WORK\n         MVC   25(7,R1),EDK4PNT1\n         ED    25(7,R1),WORK+5\n         MVI   32(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGPAGAVG       SHOW THE DATA SET AVERAGE FULLNESS.\n         CVD   R9,WORK\n         MVC   15(7,R1),EDK4PNT1\n         ED    15(7,R1),WORK+5\n         MVI   22(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGPAGMIN       SHOW THE DATA SET MINIMUM FULLNESS.\n         CVD   R9,WORK\n         MVC   5(7,R1),EDK4PNT1\n         ED    5(7,R1),WORK+5\n         MVI   12(R1),C'%'       INDICATE PERCENTAGE.\n         L     R9,DGPAGBAD       SHOW THE BAD SLOT OR SWAP SET COUNT.\n         CVD   R9,WORK\n         MVC   0(4,R1),ED3Z\n         ED    0(4,R1),WORK+6\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         BR    R14               PROCESSING NOW COMPLETE.\nKPAGNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    8(R3),X'80'       IN GRAPHIC MODE?\n         BOR   R14               NO, SO EXIT.\n         B     KNULPLOT          PLOT THE GRAPH.\n         DROP  R10,R6            KDISPPDF, DGPAGEDS.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CHANNEL UTILIZATION'\n         USING KDISPCHN,R10\nKDISPCHN DS    0H                DISPLAY CHANNEL PATH UTILIZATION.\n         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R7,12(,R1)        LOAD THE CHANNEL PATH IDENTIFIER.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.\n         STC   R7,WORK\n         UNPK  16(3,R8),WORK(2)  SHOW THE CHANNEL PATH NUMBER.\n         TR    16(2,R8),HEX-C'0'\n         MVI   18(R8),C' '\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         ICM   R6,15,DGFSTCHN    POINT TO THE CHANNEL PATH ENTRY.\n         BZ    KCHNNULL          THERE IS NONE.\n         LR    R9,R6             SAVE CHANNEL PATH ENTRY ADDRESS.\n         LA    R0,DGCHNLEN\n         BAS   R14,R6ACCESS\n         USING DGCHPID,R6\n         L     R15,DGCHNNUM      GET THE CHPID COUNT.\n         DROP  R6                DGCHPID.\n         LA    R6,DGCHNLEN(,R9)  POINT TO FIRST CHPID SECTION.\nKCHNSRCH LR    R9,R6             SAVE CHPID SECTION ADDRESS.\n         LA    R0,DGCHPLEN\n         BAS   R14,R6ACCESS\n         USING DGCHPATH,R6\n         CLM   R7,1,DGCHPPID     FOUND THE RIGHT CHPID SECTION?\n         BE    KCHFOUND          YES.\n         LA    R6,DGCHPLEN(,R9)  NO, POINT TO NEXT CHPID SECTION.\n         BCT   R15,KCHNSRCH      CONTINUE SEARCH.\nKCHNNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    8(R3),X'80'       IN GRAPHIC MODE?\n         BOR   R14               NO, SO EXIT.\n         B     KNULPLOT          PLOT THE GRAPH.\nKCHFOUND LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.\n         CR    R2,R15            CURRENTLY ON THIS LINE?\n         BNE   KCHTYPOK          NO, SUBHEADING PROCESSING COMPLETE.\n         TM    DGCHPPID+2,X'80'  IS THIS AN ES CONNECTION CHANNEL?\n         BO    KCHESCON          YES.\n         TM    DGCHPPID+1,X'10'  IS THIS A BYTE MULTIPLEXOR CHANNEL?\n         BO    KCHBYTE           YES.\n         TM    DGCHPPID+1,X'20'  IS THIS A BLOCK MULTIPLEXOR CHANNEL?\n         BO    KCHBLOCK          YES.\n         B     KCHTYPOK\nKCHESCON MVC   20(12,R8),=CL12'(ES CONN)   '\n         B     KCHTYPOK\nKCHBYTE  MVC   20(12,R8),=CL12'(BYTE MUX)  '\n         B     KCHTYPOK\nKCHBLOCK MVC   20(12,R8),=CL12'(BLOCK MUX) '\nKCHTYPOK TM    DGCHPPID+1,X'01'  IS THE CHANNEL ONLINE?\n         BO    KCHONLIN          YES, SHOW THE UTILIZATION.\n         MVC   27(5,R1),=C'(OFF)'\n         B     KCHNNULL          FILL IN THE GRAPH PAPER.\nKCHONLIN L     R9,DGCHPBSY       LOAD THE CHANNEL UTILIZATION.\n         CVD   R9,WORK\n         MVC   25(8,R1),EDK3PNT2\n         ED    25(7,R1),WORK+5\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    8(R3),X'80'       IN TABULAR MODE?\n         BOR   R14               YES, SO PROCESSING NOW COMPLETE.\n         SLR   R8,R8\n         D     R8,AHUNDRED       CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         B     KNOWPLOT          PLOT THE GRAPH.\n         DROP  R10,R6            KDISPCNT, DGCHPATH.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - DEVICE UTILIZATION'\n         USING KDISPDVU,R10\nKDISPDVU DS    0H               DISPLAY DEVICE UTILIZATION.\n         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R7,12(,R1)        LOAD THE DEVICE NUMBER.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.\n         TM    8(R3),X'80'       IN GRAPHIC MODE?\n         BZ    KDEVUHDG          YES.\n         LA    R8,6(,R8)         NO, ADJUST FOR TABULAR HEADING FORMAT.\nKDEVUHDG STH   R7,WORK\n         UNPK  1(5,R8),WORK(3)   SHOW THE DEVICE NUMBER.\n         TR    1(4,R8),HEX-C'0'\n         MVI   5(R8),C' '\n         CLI   1(R8),C'0'        LEADING ZERO?\n         BNE   KDVUNOOK          NO.\n         MVI   1(R8),C' '        YES, SUPPRESS IT.\nKDVUNOOK ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         LA    R6,DGFSTDEV       POINT TO FIRST DEVICE ENTRY ADDRESS.\n         USING DGDEVICE,R6\nKDVUSRCH ICM   R6,15,DGDEVNXT    POINT TO THE NEXT DEVICE ENTRY.\n         BZ    KDEVNULL          THERE IS NONE.\n         LA    R0,DGDEVLEN\n         BAS   R14,R6ACCESS\n         C     R7,DGDEVNAM       FOUND THE RIGHT DEVICE ENTRY?\n         BE    KDEVUFND          YES.\n         B     KDVUSRCH          NO, CONTINUE SEARCH.\nKDEVUFND LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.\n         CR    R2,R15            CURRENTLY ON THIS LINE?\n         BNE   KDUVOLOK          NO, SUBHEADING PROCESSING COMPLETE.\n         MVC   6(6,R8),DGDEVVOL  LOAD THE DEVICE VOLUME SERIAL NUMBER.\n         TR    6(6,R8),XLATETBL  ENSURE NO UNPRINTABLE CHARACTERS.\n         CLI   6(R8),C'$'        VALID VOLUME SERIAL NUMBER?\n         BNL   KDUVOLOK          PROBABLY, SO ASSUME YES.\n         MVI   6(R8),C'X'-C' '   NO, SHOW DEVICE UNIT TYPE IN HEX.\n         UNPK  7(5,R8),DGDEVTYP+2(3)\n         TR    7(4,R8),HEX-C'0'\n         MVI   11(R8),C'X'-C' '\nKDUVOLOK TM    DGDEVFLG,X'01'    IS THE DEVICE ONLINE?\n         BO    KDVUONLN          YES, SHOW THE UTILIZATION.\n         MVC   27(5,R1),=C'(OFF)'\n         B     KDEVNULL          FILL IN THE GRAPH PAPER.\nKDVUONLN TM    8(R3),X'80'       IN TABULAR MODE?\n         BO    KTABLDVU          YES.\n         L     R9,DGDEVCON       LOAD THE DEVICE CONNECT PERMILLAGE.\n         A     R9,DGDEVDIS       ADD THE DEVICE DISCONNECT PERMILLAGE.\n         A     R9,DGDEVPND       ADD THE DEVICE PENDING PERMILLAGE.\n         LR    R0,R9             SAVE IT FOR LATER.\n         CVD   R9,WORK\n         MVC   25(8,R1),EDK4PNT1\n         ED    25(7,R1),WORK+5   SHOW AVERAGE UTILIZATION IN NUMERICS.\n         A     R9,DGDEVMTP       ADD THE MOUNT PENDING PERMILLAGE.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE MOUNT PENDING UTILIZATION.\n         LR    R9,R0             RESTORE THE CONVENTIONAL UTILIZATION.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE DEVICE PENDING UTILIZATION.\n         L     R9,DGDEVCON       LOAD THE DEVICE CONNECT PERMILLAGE.\n         A     R9,DGDEVDIS       ADD THE DEVICE DISCONNECT PERMILLAGE.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT DEVICE DISCONNECT UTILIZATION.\n         L     R9,DGDEVCON       LOAD DEVICE CONNECT PERMILLAGE.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE DEVICE CONNECT UTILIZATION.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         CLI   DGDEVTYP+2,X'80'  IS THE DEVICE A MAGNETIC TAPE UNIT?\n         BNER  R14               NO, PROCESSING NOW COMPLETE.\n         CLI   DGDEVVOL,C'$'     YES, VALID VOLUME SERIAL AVAILABLE?\n         BLR   R14               NO, PROCESSING NOW COMPLETE.\n         LA    R1,21(,R1)        POINT TO LAST SIX BYTES OF GRAPH.\n         CLC   KGCHAR,0(R1)      ROOM FOR VOLUME SERIAL IN GRAPH AREA?\n         BE    KDEVUVOL          YES, LOAD IT THERE.\n         LTR   R0,R0             NO, BUT WAS UTILIZATION ZERO?\n         BNZR  R14               NO, PROCESSING NOW COMPLETE.\n         LA    R1,6(,R1)         YES, POINT TO 0.0% AREA.\nKDEVUVOL MVC   0(6,R1),DGDEVVOL  LOAD THE DEVICE VOLUME SERIAL NUMBER.\n         TR    0(6,R1),XLATETBL  ENSURE NO UNPRINTABLE CHARACTERS.\n         BR    R14               PROCESSING NOW COMPLETE.\n         SPACE\nKTABLDVU DS    0H\n         ICM   R9,15,DGDEVNRD    SHOW THE NOT READY PERMILLAGE.\n         BZ    KDUNRDOK          LEAVE BLANK IF ZERO.\n         CVD   R9,WORK\n         MVC   26(7,R1),EDK4PNT1\n         ED    26(7,R1),WORK+5\nKDUNRDOK ICM   R9,15,DGDEVMTP    SHOW THE MOUNT PENDING PERMILLAGE.\n         BZ    KDUMTPOK          LEAVE BLANK IF ZERO.\n         CVD   R9,WORK\n         MVC   20(7,R1),EDK4PNT1\n         ED    20(7,R1),WORK+5\nKDUMTPOK L     R9,DGDEVPND       SHOW THE REQUEST PENDING PERMILLAGE.\n         CVD   R9,WORK\n         MVC   14(7,R1),EDK4PNT1\n         ED    14(7,R1),WORK+5\n         L     R9,DGDEVDIS       SHOW THE DEVICE DISCONNECT PERMILLAGE.\n         CVD   R9,WORK\n         MVC   9(7,R1),EDK4PNT1\n         ED    9(7,R1),WORK+5\n         L     R9,DGDEVCON       SHOW THE DEVICE CONNECT PERMILLAGE.\n         CVD   R9,WORK\n         MVC   4(7,R1),EDK4PNT1\n         ED    4(7,R1),WORK+5\n         ICM   R9,15,DGDEVRSV    SHOW THE DEVICE RESERVED PERMILLAGE.\n         BZ    KDURSVOK          LEAVE BLANK IF ZERO.\n         CVD   R9,WORK\n         MVC   100(7,R2),EDK4PNT1\n         ED    100(7,R2),WORK+5\n         MVC   0(6,R1),101(R2)\nKDURSVOK L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    DGDEVFL2,DGDEV0IO ANY I/O TO DEVICE IN INTERVAL?\n         BOR   R14               NO, PROCESSING NOW COMPLETE.\n         CLC   21(12,R1),BLANKS  ANY NOT READY OR MOUNT PENDING TIME?\n         BNER  R14               YES, PROCESSING NOW COMPLETE.\n         L     R9,DGDEVACT       SHOW THE DEVICE ACTIVATION RATE.\n         CVD   R9,WORK\n         SRP   WORK,64-1,5       ROUND TO TENTHS PER SECOND.\n         MVC   21(7,R1),EDK4PNT1\n         ED    21(7,R1),WORK+5\n         MVC   28(5,R1),KDUIOPRS INDICATE I/O RATE PER SECOND.\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10,R6            KDISPDVU, DGDEVICE.\n         SPACE\nKDUIOPRS DC    C'-IO/S '\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - DEVICE SERVICE TIME'\n         USING KDISPDVT,R10\nKDISPDVT DS    0H                DISPLAY DEVICE SERVICE TIME.\n         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R7,12(,R1)        LOAD THE DEVICE NUMBER.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.\n         TM    8(R3),X'80'       IN GRAPHIC MODE?\n         BZ    KDEVTHDG          YES.\n         LA    R8,3(,R8)         NO, ADJUST FOR TABULAR HEADING FORMAT.\nKDEVTHDG STH   R7,WORK\n         UNPK  1(5,R8),WORK(3)   SHOW THE DEVICE NUMBER.\n         TR    1(4,R8),HEX-C'0'\n         MVI   5(R8),C' '\n         CLI   1(R8),C'0'        LEADING ZERO?\n         BNE   KDVTNOOK          NO.\n         MVI   1(R8),C' '        YES, SUPPRESS IT.\nKDVTNOOK ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         LA    R6,DGFSTDEV       POINT TO FIRST DEVICE ENTRY ADDRESS.\n         USING DGDEVICE,R6\nKDVTSRCH ICM   R6,15,DGDEVNXT    POINT TO THE NEXT DEVICE ENTRY.\n         BZ    KDEVNULL          THERE IS NONE.\n         LA    R0,DGDEVLEN\n         BAS   R14,R6ACCESS\n         C     R7,DGDEVNAM       FOUND THE RIGHT DEVICE ENTRY?\n         BNE   KDVTSRCH          NO, CONTINUE SEARCH.\n         LA    R15,BUFFER+(3*LL) YES, POINT TO FIRST RMF INTERVAL LINE.\n         CR    R2,R15            CURRENTLY ON THIS LINE?\n         BNE   KDTVOLOK          NO, SUBHEADING PROCESSING COMPLETE.\n         MVC   6(6,R8),DGDEVVOL  LOAD THE DEVICE VOLUME SERIAL NUMBER.\n         TR    6(6,R8),XLATETBL  ENSURE NO UNPRINTABLE CHARACTERS.\n         CLI   6(R8),C'$'        VALID VOLUME SERIAL NUMBER?\n         BNL   KDTVOLOK          PROBABLY, SO ASSUME YES.\n         MVI   6(R8),C'X'-C' '   NO, SHOW DEVICE UNIT TYPE IN HEX.\n         UNPK  7(5,R8),DGDEVTYP+2(3)\n         TR    7(4,R8),HEX-C'0'\n         MVI   11(R8),C'X'-C' '\nKDTVOLOK TM    DGDEVFLG,X'01'    IS THE DEVICE ONLINE?\n         BO    KDVTONLN          YES, SHOW THE UTILIZATION.\n         MVC   27(5,R1),=C'(OFF)'\n         B     KDEVNULL          FILL IN THE GRAPH PAPER.\nKDVTONLN TM    DGDEVFL2,DGDEV0IO ANY I/O TO DEVICE IN INTERVAL?\n         BO    KDEVNULL          NO, JUST FILL IN THE GRAPH PAPER.\n         TM    8(R3),X'80'       IN TABULAR MODE?\n         BO    KTABLDVT          YES.\n         L     R9,DGDEVAVC       LOAD THE CONNECT TIME PER I/O.\n         A     R9,DGDEVAVD       ADD THE DISCONNECT TIME PER I/O.\n         A     R9,DGDEVAVP       ADD THE REQUEST PENDING TIME PER I/O.\n         LR    R0,R9             SAVE IT FOR LATER.\n         CVD   R9,WORK\n         SRP   WORK,64-2,5       DIVIDE BY 100 AND ROUND.\n         MVC   25(7,R1),EDK4PNT1\n         ED    25(7,R1),WORK+5   SHOW AVERAGE SERVICE TIME IN NUMERICS.\n         SLR   R8,R8\n         SLDL  R8,1              SCALE FOR PLOTTING.\n         D     R8,ONEGRAND       CONVERT TO MILLISECONDS BY TWO.\n         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE DEVICE PENDING SERVICE TIME.\n         L     R9,DGDEVAVC       LOAD THE CONNECT TIME PER I/O.\n         A     R9,DGDEVAVD       ADD THE DISCONNECT TIME PER I/O.\n         SLR   R8,R8\n         SLDL  R8,1              SCALE FOR PLOTTING.\n         D     R8,ONEGRAND       CONVERT TO MILLISECONDS BY TWO.\n         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE DEVICE DISCONNECT SERV. TIME.\n         L     R9,DGDEVAVC       LOAD THE CONNECT TIME PER I/O.\n         SLR   R8,R8\n         SLDL  R8,1              SCALE FOR PLOTTING.\n         D     R8,ONEGRAND       CONVERT TO MILLISECONDS BY TWO.\n         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE DEVICE CONNECT SERVICE TIME.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         CLI   DGDEVTYP+2,X'80'  IS THE DEVICE A MAGNETIC TAPE UNIT?\n         BNER  R14               NO, PROCESSING NOW COMPLETE.\n         CLI   DGDEVVOL,C'$'     YES, VALID VOLUME SERIAL AVAILABLE?\n         BLR   R14               NO, PROCESSING NOW COMPLETE.\n         LA    R1,21(,R1)        POINT TO LAST SIX BYTES OF GRAPH.\n         CLC   KGCHAR,0(R1)      ROOM FOR VOLUME SERIAL IN GRAPH AREA?\n         BE    KDEVTVOL          YES, LOAD IT THERE.\n         LTR   R0,R0             NO, BUT WAS UTILIZATION ZERO?\n         BNZR  R14               NO, PROCESSING NOW COMPLETE.\n         LA    R1,6(,R1)         YES, POINT TO 0.0 AREA.\nKDEVTVOL MVC   0(6,R1),DGDEVVOL  LOAD THE DEVICE VOLUME SERIAL NUMBER.\n         TR    0(6,R1),XLATETBL  ENSURE NO UNPRINTABLE CHARACTERS.\n         BR    R14               PROCESSING NOW COMPLETE.\nKDEVNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    8(R3),X'80'       IN GRAPHIC MODE?\n         BOR   R14               NO, SO EXIT.\n         B     KNULPLOT          PLOT THE GRAPH.\n         SPACE\nKTABLDVT DS    0H\n         ICM   R9,15,DGDEVDPW    SHOW DIRECTOR PORT BUSY DELAY PER I/O.\n         BZ    KDTDPWOK          LEAVE BLANK IF UNDER 1 MICROSECOND.\n         LA    R3,25(,R1)        POINT TO DISPLAY SLOT.\n         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.\nKDTDPWOK ICM   R9,15,DGDEVBSW    SHOW DEVICE BUSY DELAY PER I/O.\n         BZ    KDTDVWOK          LEAVE BLANK IF UNDER 1 MICROSECOND.\n         LA    R3,20(,R1)        POINT TO DISPLAY SLOT.\n         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.\nKDTDVWOK ICM   R9,15,DGDEVCUW    SHOW CONTROL UNIT BUSY DELAY PER I/O.\n         BZ    KDTCUWOK          LEAVE BLANK IF UNDER 1 MICROSECOND.\n         LA    R3,15(,R1)        POINT TO DISPLAY SLOT.\n         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.\nKDTCUWOK L     R9,DGDEVAVP       SHOW REQUEST PENDING TIME PER I/O.\n         LA    R3,10(,R1)        POINT TO DISPLAY SLOT.\n         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.\n         L     R9,DGDEVAVD       SHOW DEVICE DISCONNECT TIME PER I/O.\n         LA    R3,5(,R1)         POINT TO DISPLAY SLOT.\n         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.\n         L     R9,DGDEVAVC       SHOW DEVICE CONNECT TIME PER I/O.\n         LA    R3,0(,R1)         POINT TO DISPLAY SLOT.\n         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         BR    R14               PROCESSING NOW COMPLETE.\n         SPACE\nKDVTBFMT DS    0H                MILLISECOND FORMATTING SUBROUTINE.\n         CVD   R9,WORK           CONVERT MICROSECONDS TO DECIMAL.\n         OC    WORK(5),WORK      LESS THAN 100 MILLISECONDS?\n         BZ    KDVTFMT2          YES.\n         SRP   WORK,64-3,5       NO, ROUND TO WHOLE MILLISECONDS.\n         MVC   0(6,R3),ED5\n         ED    0(6,R3),WORK+5\n         BR    R15               RETURN.\nKDVTFMT2 SRP   WORK,64-2,5       ROUND TO TENTHS OF MILLISECONDS.\n         MVC   1(5,R3),ED2PNT1\n         ED    1(5,R3),WORK+6\n         BR    R15               RETURN.\n         DROP  R10,R6            KDISPDVT, DGDEVICE.\n         SPACE\n         LTORG\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - RESPONSE TIME'\n         USING KDISPTRT,R10\nKDISPTRT DS    0H                DISPLAY TRANSACTION RESPONSE TIME.\n         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R7,12(,R1)        LOAD THE PERFORMANCE GROUP NUMBER.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.\n         CVD   R7,WORK\n         MVC   4(4,R8),ED3\n         ED    4(4,R8),WORK+6    SHOW THE PERFORMANCE GROUP NUMBER.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         LA    R6,DGFSTPGN       POINT TO FIRST PERF. ENTRY ADDRESS.\n         ICM   R0,7,KLEFT+1      IS THE LEFT DISPLAY CPU UTILIZATION?\n         BNZ   KTRTSRCH          NO, PROCEED.\n         LA    R15,BUFFER+(3*LL) YES, POINT TO FIRST RMF INTERVAL LINE.\n         CR    R2,R15            CURRENTLY ON THIS LINE?\n         BNE   KTRTSRCH          NO, SUBHEADING PROCESSING COMPLETE.\n         L     R9,KLEFT+8        YES, GET THE LEFT DISPLAY LINE OFFSET.\n         LA    R9,BUFFER+LL(R9)  POINT TO THE FIRST LEFT SUBHEADING.\n         MVC   1(32,R9),KPGCPUHD OVERLAY THE CPU LEGEND WITH PGN DATA.\n         MVC   19(4,R9),ED3\n         ED    19(4,R9),WORK+6   SHOW THE PERFORMANCE GROUP NUMBER.\n         TM    KLEFT+8,X'80'     IS CPU DISPLAY IN GRAPHIC MODE?\n         BZ    KTRTSRCH          YES.\n         MVC   1(32,R9),KPTCPUHD OVERLAY THE CPU HEADING FOR TABLE.\n         MVC   20(4,R9),ED3\n         ED    20(4,R9),WORK+6   SHOW THE PERFORMANCE GROUP NUMBER.\n         MVC   LL+1(32,R9),KPTCP2HD   SUPPLY COLUMN HEADINGS.\n         USING DGPRFGRP,R6\nKTRTSRCH ICM   R6,15,DGPRFNXT    POINT TO NEXT PERFORMANCE GROUP ENTRY.\n         BZ    KPGNNULL          THERE IS NONE.\n         LR    R15,R6            COPY BASE SECTION ADDRESS.\n         LA    R0,DGPRFLEN+DGPERLEN\n         BAS   R14,R6ACCESS\n         CLI   DGPRFPER+3,1      MORE THAN ONE PERIOD IN GROUP?\n         BNH   KPPOKAY2          NO, HAVE RETRIEVED WHOLE GROUP'S DATA.\n         LA    R14,DGPERLEN      GET A PERIOD ENTRY LENGTH.\n         MH    R14,DGPRFPER+2    MULTIPLY BY THE PERIOD COUNT.\n         LR    R6,R15            YES, RESTORE BASE SECTION ADDRESS.\n         LA    R0,DGPRFLEN(,R14) GET TOTAL GROUP DATA LENGTH.\n         BAS   R14,R6ACCESS\nKPPOKAY2 C     R7,DGPRFNUM       FOUND RIGHT PERFORMANCE GROUP ENTRY?\n         BE    KTRTFND           YES.\n         B     KTRTSRCH          NO, CONTINUE SEARCH.\nKTRTFND  TM    DGPRFFLG,X'02'    REPORT PERFORMANCE GROUP?\n         BZ    KTRTPGNM          NO, GO SHOW PERFORMANCE GROUP NUMBER.\n         MVC   1(3,R8),=C'RPG'   YES, INDICATE THIS IN SUB-HEADING.\nKTRTPGNM LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.\n         CR    R2,R15            CURRENTLY ON THIS LINE?\n         BNE   KTRTSBDN          NO, SUBHEADING PROCESSING COMPLETE.\n         TM    DGPRFFLG,X'04'    ACCOUNTING INFORMATION USED?\n         BZ    KTRTACOK          NO, NOT FOR THIS PERFORMANCE GROUP.\n         MVI   9(R8),C'@'        YES, FLAG THIS.\nKTRTACOK MVC   11(4,R8),DGPRFSYS LOAD PERFORMANCE GROUP SUBSYSTEM NAME.\n         TR    11(4,R8),XLATETBL ENSURE NO UNPRINTABLES IN SUBSYSTEM.\n         CLC   DGPRFNAM,BLANKS   TRANSACTION NAME SPECIFIED?\n         BH    KTRTNAME          YES.\n         CLC   DGPRFUSR,BLANKS   USER SPECIFIED?\n         BH    KTRTUSER          YES.\n         CLC   DGPRFCLS,BLANKS   TRANSACTION CLASS SPECIFIED?\n         BNH   KTRTSBDN          NO, SUBHEADING NOW COMPLETE.\n         MVC   17(6,R8),=CL6'CLASS='\n         MVC   23(10,R8),DGPRFCLS\n         B     KTRTSBOK\nKTRTUSER MVC   17(6,R8),=CL6' USER='\n         MVC   23(10,R8),DGPRFUSR\n         B     KTRTSBOK\nKTRTNAME MVC   17(6,R8),=CL6' NAME='\n         MVC   23(10,R8),DGPRFNAM\nKTRTSBOK TR    1(32,R8),XLATETBL ENSURE NO UNPRINTABLES IN SUBHEADING.\nKTRTSBDN LR    R7,R3             COPY DISPLAY VECTOR ADDRESS.\n         SLR   R9,R9             PREPARE FOR NULL CASE.\n         ICM   R0,15,DGPRFXAN    GET THE GROUP ENDED TRANSACTION COUNT.\n         BZ    KTRTDONE          DO NOT DIVIDE BY ZERO.\n         L     R9,DGPRFXTM       LOAD MILLISECONDS PER TRANSACTION.\n         CVD   R9,WORK\n         OC    WORK(5),WORK      LESS THAN 100 SECONDS?\n         BNZ   KTRTLONG          NO.\n         MVC   26(7,R1),EDK2PNT3\n         ED    26(7,R1),WORK+5   SHOW AVERAGE RESPONSE TIME IN NUMBERS.\n         B     KTRTDONE\nKTRTLONG SRP   WORK,64-1,5       DIVIDE BY 10 AND ROUND.\n         MVC   24(9,R1),EDK5PNT2\n         ED    24(9,R1),WORK+4   SHOW AVERAGE RESPONSE TIME IN NUMBERS.\nKTRTDONE L     R3,DGPRFPER       GET NUMBER OF PERFORMANCE PERIODS.\n         ST    R3,WORK2+4        SAVE IT.\n         LA    R6,DGPERIOD       YES, POINT TO FIRST PERIOD SECTION.\n         DROP  R6                DGPRFGRP.\n         ST    R6,WORK2          SAVE ITS ADDRESS.\n         TM    8(R7),X'80'       IN TABULAR DISPLAY MODE?\n         BO    KTABLTRT          YES.\n         LA    R0,DGPERLEN       GET THE PERIOD SECTION LENGTH.\n         STH   R0,WORK           SAVE IT.\n         USING DGPERIOD,R6\nKTRTLOOP LR    R8,R3             GET THE PERIOD NUMBER.\n         BCTR  R8,0              MAKE IT RELATIVE.\n         MH    R8,WORK           GET INDEX.\n         L     R9,DGPERXTM(R8)   LOAD MILLISECONDS PER TRANSACTION.\n         SLR   R8,R8\n         D     R8,AHUNDRED       SCALE FOR PLOTTING.\n         LR    R15,R3            GET THE PERIOD NUMBER.\n         IC    R15,KCPUCODE-1(3) LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE TRANSACTION RESPONSE TIME.\n         BCT   R3,KTRTLOOP       PROCESS NEXT PERFORMANCE PERIOD.\n         B     KTRTCPUX\n         SPACE\nKTABLTRT DS    0H                PERFORM TABULAR PROCESSING.\n         LTR   R9,R0             COPY GROUP ENDED TRANSACTION COUNT.\n         BZ    KTRTCPUX          LEAVE LINE BLANK IF ZERO.\n         M     R8,=F'1000000'\n         D     R8,DGINTSIZ       GET GROUP TRANSACTION RATE.\n         CVD   R9,WORK\n         C     R9,=F'1000000'    IS RATE LESS THAN 999.9 PER SECOND?\n         BL    KTRTFEW           YES.\n         SRP   WORK,64-3,5       NO, DIVIDE BY 1000 AND ROUND.\n         MVC   0(6,R1),ED5       SHOW RATE AS A WHOLE NUMBER.\n         ED    0(6,R1),WORK+5    SHOW RATE AS A WHOLE NUMBER.\n         B     KTRATEOK\nKTRTFEW  SRP   WORK,64-2,5       DIVIDE BY 100 AND ROUND.\n         MVC   0(7,R1),EDK4PNT1\n         ED    0(7,R1),WORK+5\n         MVC   0(7,R1),1(R1)\n         CLI   1(R1),C' '        LEADING BLANK STILL?\n         BNE   KTRATEOK          NO, CAN'T SHIFT LEFT W/O DATA LOSS.\n         MVC   0(6,R1),1(R1)     YES, ENSURE BLANK BEFORE PP-1 DATUM.\nKTRATEOK L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.\n         L     R0,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.\n         CHI   R0,4              MORE THAN MAXIMUM SUPPORTED PERIODS?\n         BNH   KTRTTBLP          NO.\n         LA    R0,R4             YES, REDUCE TO MAXIMUM SUPPORTED.\nKTRTTBLP LA    R1,5(,R1)         POINT TO NEXT DISPLAY SLOT.\n         ICM   R9,15,DGPERXAN    GET GROUP ENDED TRANSACTION COUNT.\n         BZ    KTRTBNXT          DO NOT DIVIDE BY ZERO.\n         L     R9,DGPERXTM       LOAD MILLISECONDS PER TRANSACTION.\n         CVD   R9,WORK\n         OC    WORK(5),WORK      LESS THAN 100 SECONDS?\n         BNZ   KTRTBLNG          NO.\n         SRP   WORK,64-2,5       DIVIDE BY 100 AND ROUND.\n         MVC   1(5,R1),ED2PNT1\n         ED    1(5,R1),WORK+6    SHOW AVERAGE RESPONSE TIME IN NUMBERS.\n         B     KTRTBNXT\nKTRTBLNG SRP   WORK,64-3,5       DIVIDE BY 1000 AND ROUND.\n         MVC   100(6,R2),ED5     SHOW PERFORMANCE GROUP PERIOD RESPONSE\n         ED    100(6,R2),WORK+5  TIME WHOLE SECONDS IN NUMERICS.\n         MVC   1(5,R1),101(R2)\nKTRTBNXT LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.\n         BCT   R0,KTRTTBLP       PROCESS NEXT PERFORMANCE PERIOD.\n         SPACE\nKTRTCPUX LA    R10,KDISPSRV      UPDATE BASE REGISTER.\n         DROP  R10,R6            KDISPTRT, DGPERIOD.\n         USING KDISPSRV,R10\n         B     KPGCPPLT          GO CHECK FOR CPU IN LEFT DISPLAY.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SERVICE UNIT ABSORPTION'\nKDISPSRV DS    0H                DISPLAY SERVICE UNIT ABSORPTION RATE.\n         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.\n         L     R7,12(,R1)        LOAD THE PERFORMANCE GROUP NUMBER.\n         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.\n         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.\n         CVD   R7,WORK\n         MVC   4(4,R8),ED3\n         ED    4(4,R8),WORK+6    SHOW THE PERFORMANCE GROUP NUMBER.\n         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.\n         LA    R6,DGFSTPGN       POINT TO FIRST PERF. ENTRY ADDRESS.\n         ICM   R0,7,KLEFT+1      IS THE LEFT DISPLAY CPU UTILIZATION?\n         BNZ   KSRVSRCH          NO, PROCEED.\n         LA    R15,BUFFER+(3*LL) YES, POINT TO FIRST RMF INTERVAL LINE.\n         CR    R2,R15            CURRENTLY ON THIS LINE?\n         BNE   KSRVSRCH          NO, SUBHEADING PROCESSING COMPLETE.\n         L     R9,KLEFT+8        YES, GET THE LEFT DISPLAY LINE OFFSET.\n         LA    R9,BUFFER+LL(R9)  POINT TO THE FIRST LEFT SUBHEADING.\n         MVC   1(32,R9),KPGCPUHD OVERLAY THE CPU LEGEND WITH PGN DATA.\n         MVC   19(4,R9),ED3\n         ED    19(4,R9),WORK+6   SHOW THE PERFORMANCE GROUP NUMBER.\n         TM    KLEFT+8,X'80'     IS CPU DISPLAY IN GRAPHIC MODE?\n         BZ    KSRVSRCH          YES.\n         MVC   1(32,R9),KPTCPUHD OVERLAY THE CPU HEADING FOR TABLE.\n         MVC   20(4,R9),ED3\n         ED    20(4,R9),WORK+6   SHOW THE PERFORMANCE GROUP NUMBER.\n         MVC   LL+1(32,R9),KPTCP2HD   SUPPLY COLUMN HEADINGS.\n         USING DGPRFGRP,R6\nKSRVSRCH ICM   R6,15,DGPRFNXT    POINT TO NEXT PERFORMANCE GROUP ENTRY.\n         BZ    KPGNNULL          THERE IS NONE.\n         LR    R15,R6            COPY BASE SECTION ADDRESS.\n         LA    R0,DGPRFLEN+DGPERLEN\n         BAS   R14,R6ACCESS\n         CLI   DGPRFPER+3,1      MORE THAN ONE PERIOD IN GROUP?\n         BNH   KPPOKAY3          NO, HAVE RETRIEVED WHOLE GROUP'S DATA.\n         LA    R14,DGPERLEN      GET A PERIOD ENTRY LENGTH.\n         MH    R14,DGPRFPER+2    MULTIPLY BY THE PERIOD COUNT.\n         LR    R6,R15            YES, RESTORE BASE SECTION ADDRESS.\n         LA    R0,DGPRFLEN(,R14) GET TOTAL GROUP DATA LENGTH.\n         BAS   R14,R6ACCESS\nKPPOKAY3 C     R7,DGPRFNUM       FOUND RIGHT PERFORMANCE GROUP ENTRY?\n         BE    KSRVFND           YES.\n         B     KSRVSRCH          NO, CONTINUE SEARCH.\nKPGNNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         TM    8(R3),X'80'       IN GRAPHIC MODE?\n         BOR   R14               NO, SO EXIT.\n         B     KNULPLOT          PLOT THE GRAPH.\nKSRVFND  TM    DGPRFFLG,X'02'    REPORT PERFORMANCE GROUP?\n         BZ    KSRVPGNM          NO, GO SHOW PERFORMANCE GROUP NUMBER.\n         MVC   1(3,R8),=C'RPG'   YES, INDICATE THIS IN SUB-HEADING.\nKSRVPGNM LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.\n         CR    R2,R15            CURRENTLY ON THIS LINE?\n         BNE   KSRVSBDN          NO, SUBHEADING PROCESSING COMPLETE.\n         TM    DGPRFFLG,X'04'    ACCOUNTING INFORMATION USED?\n         BZ    KSRVACOK          NO, NOT FOR THIS PERFORMANCE GROUP.\n         MVI   9(R8),C'@'        YES, FLAG THIS.\nKSRVACOK MVC   11(4,R8),DGPRFSYS LOAD PERFORMANCE GROUP SUBSYSTEM NAME.\n         TR    11(4,R8),XLATETBL ENSURE NO UNPRINTABLES IN SUBSYSTEM.\n         CLC   DGPRFNAM,BLANKS   TRANSACTION NAME SPECIFIED?\n         BH    KSRVNAME          YES.\n         CLC   DGPRFUSR,BLANKS   USER SPECIFIED?\n         BH    KSRVUSER          YES.\n         CLC   DGPRFCLS,BLANKS   TRANSACTION CLASS SPECIFIED?\n         BNH   KSRVSBDN          NO, SUBHEADING NOW COMPLETE.\n         MVC   17(6,R8),=CL6'CLASS='\n         MVC   23(10,R8),DGPRFCLS\n         B     KSRVSBOK\nKSRVUSER MVC   17(6,R8),=CL6' USER='\n         MVC   23(10,R8),DGPRFUSR\n         B     KSRVSBOK\nKSRVNAME MVC   17(6,R8),=CL6' NAME='\n         MVC   23(10,R8),DGPRFNAM\nKSRVSBOK TR    1(32,R8),XLATETBL ENSURE NO UNPRINTABLES IN SUBHEADING.\nKSRVSBDN LR    R7,R3             COPY DISPLAY VECTOR ADDRESS.\n         L     R3,DGPRFPER       GET NUMBER OF PERFORMANCE PERIODS.\n         ST    R3,WORK2+4        SAVE IT.\n         LA    R6,DGPERIOD       YES, POINT TO FIRST PERIOD SECTION.\n         DROP  R6                DGPRFGRP.\n         ST    R6,WORK2          SAVE ITS ADDRESS.\n         USING DGPERIOD,R6\nKSRVLOOP LR    R0,R3             GET THE PERIOD NUMBER.\n         SLR   R9,R9             RESET ACCUMULATOR.\n         L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.\nKSRVPPLP A     R9,DGPERSRV       ACCUMULATE SERVICE UNITS PER SECOND.\n         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.\n         BCT   R0,KSRVPPLP\n         C     R3,WORK2+4        IS THIS THE LAST PERFORMANCE PERIOD?\n         BNE   KSRVPPOK          NO.\n         CVD   R9,WORK           YES.\n         SRP   WORK,64-2,0       DIVIDE BY 100 AND TRUNCATE.\n         MVC   26(6,R1),ED5      SHOW PERFORMANCE GROUP SERVICE\n         ED    26(6,R1),WORK+5   UNIT ABSORPTION RATE IN NUMERICS.\n         TM    8(R7),X'80'       IN TABULAR DISPLAY MODE?\n         BO    KTABLSRV          YES.\nKSRVPPOK SLR   R8,R8\n         D     R8,TENGRAND       SCALE FOR PLOTTING.\n         LR    R15,R3            GET THE PERIOD NUMBER.\n         IC    R15,KCPUCODE-1(R3) LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE TRANSACTION RESPONSE TIME.\n         BCT   R3,KSRVLOOP       PROCESS NEXT PERFORMANCE PERIOD.\n         B     KPGCPPLT          GO CHECK FOR EXTRA CPU DATA TO SHOW.\n         SPACE\nKTABLSRV DS    0H                PERFORM TABULAR PROCESSING.\n         L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.\n         L     R0,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.\n         SLR   R9,R9             CLEAR PAGE-IN ACCUMULATOR.\nKPPPAGLP A     R9,DGPERPIN       ACCUMULATE THE GROUP PAGE-IN RATE.\n         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.\n         BCT   R0,KPPPAGLP\n         CVD   R9,WORK           SHOW THE GROUP TOTAL PAGE-IN RATE.\n         SRP   WORK,64-1,5       DIVIDE BY 10 AND ROUND.\n         MVC   100(7,R2),EDK4PNT1\n         ED    100(7,R2),WORK+5  SHOW AS PAGE-INS PER SECOND.\n         MVC   1(5,R1),102(R2)\n         CLI   1(R1),C' '        LEADING BLANK STILL?\n         BNE   KSPGRTOK          NO, CAN'T SHIFT LEFT W/O DATA LOSS.\n         MVC   0(6,R1),1(R1)     YES, ENSURE BLANK BEFORE PP-1 DATUM.\nKSPGRTOK L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.\n         L     R0,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.\n         CHI   R0,4              MORE THAN MAXIMUM SUPPORTED PERIODS?\n         BNH   KSRVTBLP          NO.\n         LA    R0,4              YES, REDUCE TO MAXIMUM SUPPORTED.\nKSRVTBLP L     R9,DGPERSRV       GET PERIOD ABSORPTION RATE.\n         CVD   R9,WORK\n         SRP   WORK,64-2,0       DIVIDE BY 100 AND TRUNCATE.\n         MVC   100(6,R2),ED5     SHOW PERFORMANCE GROUP PERIOD SERVICE\n         ED    100(6,R2),WORK+5  UNIT ABSORPTION RATE IN NUMERICS.\n         LA    R1,5(,R1)         POINT TO NEXT DISPLAY SLOT.\n         MVC   1(5,R1),101(R2)\n         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.\n         BCT   R0,KSRVTBLP       PROCESS NEXT PERFORMANCE PERIOD.\n         SPACE 2\nKPGCPPLT L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         ICM   R0,7,KLEFT+1      IS THE LEFT DISPLAY CPU UTILIZATION?\n         BNZR  R14               NO, DO NOT SHOW EXTRA CPU DATA.\n         L     R1,KLEFT+8        LOAD DISPLAY LINE CPU OFFSET.\n         ALR   R1,R2             POINT TO DISPLAY LINE CPU SLOT.\n         L     R3,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.\n         LR    R7,R14            SAVE RETURN ADDRESS.\nKPGCPULP LTR   R0,R3             GET PERIODS TO COUNT IN THIS PLOT.\n         BZR   R14               NO PERIODS SO RETURN.\n         SLR   R9,R9             CLEAR CPU UTILIZATION ACCUMULATOR.\n         L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.\nKPPCPULP A     R9,DGPERCPU       LOAD THE PERF. PERIOD CPU UTILIZATION.\n         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.\n         BCT   R0,KPPCPULP\n         TM    KLEFT+8,X'80'     IN TABULAR MODE?\n         BO    KPPCPTAB          YES, JUST LOOP ONCE FOR P. G. TOTAL.\n         SLR   R8,R8\n         D     R8,DGCPUCNT       AVERAGE SERVICE ACROSS ALL CPUS.\n         SLR   R8,R8\n         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.\n         IC    R15,KCPUCODE-1(R3) NO, LOAD GRAPH DISPLAY CODE.\n         BAS   R14,KNOWPLOT      PLOT THE PERF. GROUP CPU UTILIZATION.\n         BCT   R3,KPGCPULP\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         BR    R14               CPU GRAPH PROCESSING NOW COMPLETE.\n         SPACE\nKPPCPTAB SLR   R8,R8\n         D     R8,DGCPUCNT       AVERAGE SERVICE ACROSS ALL CPUS.\n         CVD   R9,WORK\n         MVC   20(5,R1),ED2PNT1\n         ED    20(5,R1),WORK+6   SHOW PERF. GROUP CPU TOTAL USAGE.\n         L     R0,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.\n         L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.\n         CHI   R0,4              MORE THAN MAXIMUM COLUMNS?\n         BNH   KPPCPUTB          NO.\n         LA    R0,4              YES, LIMIT TO MAXIMUM.\nKPPCPUTB L     R9,DGPERCPU       GET CPU UTLIZATION OF THIS PERIOD.\n         SLR   R8,R8\n         D     R8,DGCPUCNT       AVERAGE SERVICE ACROSS ALL CPUS.\n         CVD   R9,WORK\n         MVC   0(5,R1),ED2PNT1\n         ED    0(5,R1),WORK+6    SHOW PERFORMANCE PERIOD CPU UTIL.\n         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.\n         LA    R1,5(,R1)         POINT TO THE NEXT DISPLAY COLUMN.\n         BCT   R0,KPPCPUTB       PROCESS NEXT PERIOD.\n         MVI   LL-66(R2),X'3B'   RESTORE CPU DISPLAY AREA SEPARATION.\n         L     R14,KSAVER14      RESTORE RETURN ADDRESS.\n         BR    R14               PROCESSING NOW COMPLETE.\n         DROP  R10,R6            KDISPTRT, DGPERIOD.\n         SPACE\nKPGCPUHD DS    0CL32\n         DC    C'CPU UTIL- ',X'04030601',C'=PGN ___ '\n         DC    X'0507',C'=OTHER '\nKPTCPUHD DC    CL32' CPU USAGE WITH PGN ___ DETAILS '\nKPTCP2HD DC    CL32'PP-1 PP-2 PP-3 PP-4 P.G.  TOTAL '\nKCPUCODE DC    XL8'0403060101010101'    8 PERIODS IS MAXIMUM ALLOWED.\n         LTORG\n         SPACE\n         DROP  R4,R5             DGSYSTEM, DGRMFINT.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SMF ITEM DATA LIST'\n         USING KSMFITEM,R10\n         USING DGBASE,R4\nKSMFITEM DS    0H                SELECT SMF CATEGORY TO DISPLAY.\n         CLI   KSHOWSYS+2,C'D'   SHOWING DATA SET DATA?\n         BE    KDSNITEM          YES.\n         CLI   KSHOWSYS+2,C'S'   SHOWING STEP END DATA?\n         BE    KPGMITEM          YES.\n         CLI   KSHOWSYS+2,C'J'   SHOWING JOB STEP DATA?\n         BE    KJOBITEM          YES.\nKNOOITEM MVI   INBUFF+2,0        AVOID ZOOM-IN RECURSION.\n         B     KLISTSYS          LIST SELECTABLE SYSTEMS/SMF EVENTS.\n         SPACE\nKDSNITEM ICM   R0,15,DGNUMDSN    ANY DATA SETS IN LIST?\n         BZ    KNOOITEM          NO, DISPLAY SELECTION LIST.\n         L     R10,KSHODADR      YES, POINT TO ROUTINE ENTRY POINT.\n         BR    R10               INVOKE ROUTINE.\nKPGMITEM ICM   R0,15,DGNUMPGM    ANY PROGRAMS IN LIST?\n         BZ    KNOOITEM          NO, DISPLAY SELECTION LIST.\n         L     R10,KSHOSADR      YES, POINT TO ROUTINE ENTRY POINT.\n         BR    R10               INVOKE ROUTINE.\nKJOBITEM ICM   R0,15,DGNUMJOB    ANY JOB NAMES IN LIST?\n         BZ    KNOOITEM          NO, DISPLAY SELECTION LIST.\n         L     R10,KSHOSADR      YES, POINT TO ROUTINE ENTRY POINT.\n         BR    R10               INVOKE ROUTINE.\n         SPACE\n         DROP  R10               KSMFITEM.\n         SPACE\nKSHODADR DC    A(KDISPDSN)\nKSHOSADR DC    A(KDISPPGM)\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - DATA SET NAME LIST'\n         USING KDISPDSN,R10\nKDISPDSN DS    0H                DISPLAY DATA SET NAME LIST.\n         MVC   HEADING,HEADNGKD  INITIALIZE HEADING.\n         MVI   KHDGCNT+1,1       UPDATE HEADING LINE COUNT.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'S'.\n         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.\n         LA    R2,BUFFER         INITIALIZE BUFFER POINTER.\n         LA    R0,DGDSNLEN       GET DATA SET NAME ENTRY LENGTH.\n         CLI   KLOCNAME,0        ANY DATA SET NAME/PREFIX TO LOCATE?\n         BE    KDNOPREF          NO.\n         LA    R5,DGFSTDSN       POINT TO THE FIRST/LAST DSN POINTERS.\n         USING DGDATAST,R5\n         CLI   KLOCNAME,C'M'     DSNAME CLOSER TO END OF CHARACTER SET?\n         BH    KDBLOCLP          YES, SEARCH BACKWARD FROM END OF LIST.\nKDFLOCLP ICM   R5,15,DGDSNNXT    POINT TO THE NEXT DSNAME ENTRY.\n         BZ    KDLOCBTM          END OF FORWARD CHAIN SO GO DOWN MAX.\n         ST    R5,KITEMADR       THIS MAY BE THE NEW TOP OF SCREEN.\n         BAS   R14,R5ACCESS\n         CLC   DGDSNAME,KLOCNAME LOCATED THE REQUESTED NAME?\n         BL    KDFLOCLP          NO, CONTINUE SEARCH.\n         BE    KDLOCDIT          YES, EXACT MATCH SO SHOW IT.\n*        B     KDBLOCLP   (BH)   YES, BUT PAST IT SO BACK UP.\nKDBLOCLP ICM   R5,15,DGDSNPRV    POINT TO THE PREVIOUS DSNAME ENTRY.\n         BZ    KDLOCTOP          BACKWARD CHAIN END SO SHOW FROM TOP.\n         ST    R5,KITEMADR       THIS IS THE NEW TOP OF SCREEN.\n         BAS   R14,R5ACCESS\n         CLC   DGDSNAME,KLOCNAME LOCATED THE REQUESTED NAME?\n         BH    KDBLOCLP          NO, CONTINUE SEARCH.\nKDLOCDIT XC    KLOCNAME,KLOCNAME CLEAR THE DATA SET NAME INPUT AREA.\n         B     KDSHOWIT          NOW AT THE CORRECT LOCATION.\nKDNOPREF ICM   R5,15,KITEMADR    POINT TO FIRST DATA SET TO DISPLAY.\n         BZ    KDSHOTOP          IF ZERO THEN SHOW FROM THE TOP.\n         BAS   R14,R5ACCESS\n         CLC   KSHOWITM,BLANKS   SHOWING SPECIFIC EVENTS?\n         BNE   KDISPDSE          YES, SHOW EVENTS OF A DATA SET.\n         CLI   KSCRLAMT,X'7F'    NO, BOTTOM RQUESTED?\n         BE    KDSHOBTM          YES, DIRECTLY ACCESS THE BOTTOM.\n         ICM   R1,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.\n         BZ    KDZMCHEK          ZERO SO CHECK FOR ZOOM REQUEST.\n         BP    KDFWRDLP          POSITIVE SO SCROLL FORWARD.\n         LPR   R1,R1             NEGATIVE SO GET COUNT TO SCROLL BACK.\nKDBKWDLP ICM   R5,15,DGDSNPRV    POINT TO THE PREVIOUS DSNAME ENTRY.\n         BZ    KDSHOTOP          BACKWARD CHAIN END SO SHOW FROM TOP.\n         ST    R5,KITEMADR       THIS MAY BE THE NEW TOP OF SCREEN.\n         BAS   R14,R5ACCESS\n         BCT   R1,KDBKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KDSHOWIT          NOW AT THE CORRECT LOCATION.\nKDLOCBTM XC    KLOCNAME,KLOCNAME CLEAR THE DATA SET NAME INPUT AREA.\nKDSHOBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.\n         L     R5,DGLSTDSN       POINT TO THE LAST DATA SET NAME.\n         BAS   R14,R5ACCESS\n         L     R1,LINES          GET THE SCREEN LINE COUNT.\n         AHI   R1,-3             GET THE SCROLL UP VALUE.\n         B     KDBKWDLP          GO DO IT.\nKDZMCHEK CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n         BE    KDGDSNLP          YES, DO NOT PERFORM SELECTION.\n         SLR   R1,R1             CLEAR FOR INSERT.\n         ICM   R1,1,INBUFF+1     GET THE CURSOR RELATIVE LINE NUMBER.\n         BNP   KDGDSNLP          ZERO, SO JUST SHOW DATA SET NAME LIST.\n         B     KDZOOMNX          ZOOM IN ON CORRECT DATA SET NAME.\nKDZOOMLP ICM   R5,15,DGDSNNXT    POINT TO THE NEXT DATA SET NAME ENTRY.\n         BZ    KDSHOBTM          HANDLE END OF CHAIN IF ENCOUNTERED.\n         ST    R5,KITEMADR       THIS MAY BE THE SELECTED DATA SET.\n         BAS   R14,R5ACCESS\nKDZOOMNX BCT   R1,KDZOOMLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         MVC   KSHOWITM,DGDSNAME COPY THE SELECTED DATA SET NAME.\n         B     KDISPDSE          GO SHOW EVENTS OF THIS DATA SET.\nKDFWRDLP ICM   R5,15,DGDSNNXT    POINT TO THE NEXT DATA SET NAME ENTRY.\n         BZ    KDSHOTOP          HANDLE END OF CHAIN IF ENCOUNTERED.\n         ST    R5,KITEMADR       THIS MAY BE THE NEW TOP OF SCREEN.\n         BAS   R14,R5ACCESS\n         BCT   R1,KDFWRDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KDSHOWIT          GET FORMATTING.\nKDLOCTOP XC    KLOCNAME,KLOCNAME CLEAR THE DATA SET NAME INPUT AREA.\nKDSHOTOP ST    R5,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?\n         BE    KDSHOBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.\n         L     R5,DGFSTDSN       POINT TO THE FIRST DSNAME ENTRY.\n         ST    R5,KITEMADR       THIS IS THE NEW TOP OF SCREEN.\n         BAS   R14,R5ACCESS\nKDSHOWIT SLR   R0,R0\n         ST    R0,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         ST    R0,KEVNTADR       CLEAR THE EVENT ENTRY POINTER.\n         MVC   KSHOWITM,BLANKS   RESET SELECTED DATA SET NAME.\nKDGDSNLP MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-78(44,R2),DGDSNAME  DISPLAY THE DATA SET NAME.\n         L     R0,DGDSNDS#       LOAD THE DATA SET EVENT COUNT.\n         CVD   R0,WORK           SHOW THE DATA SET EVENT COUNT.\n         MVC   LL-34(12,R2),ED11\n         ED    LL-34(12,R2),WORK+2\n         MVC   LL-21(17,R2),=CL17'DATA SET EVENT(S)'\n         TR    LL-79(79,R2),XLATETBL    ENSURE NO UNPRINTABLES.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   KEODGDAT          YES, SO SHOW IT.\n         ICM   R5,15,DGDSNNXT    POINT TO THE NEXT DATA SET NAME ENTRY.\n         BZ    KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.\n         LA    R0,DGDSNLEN\n         BAS   R14,R5ACCESS\n         B     KDGDSNLP          PROCESS IT.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - DATA SET EVENT LIST'\nKDISPDSE DS    0H                DISPLAY DATA SET EVENT LIST.\n         MVI   ENDDEPTH+1,2      MAKE PF3/15 SHOW DATA SET NAME LIST.\n         CLI   INBUFF,10         LEFT/RIGHT SCROLL REQUEST?\n         BL    KELROKAY          NO.\n         CLI   INBUFF,11\n         BH    KELROKAY          NO.\n         ICM   R0,15,SCRLAMT     ANY SCROLL AMOUNT SPECIFIED?\n         BNZ   KELRAMOK          YES, USE IT.\n         LA    R0,79             NO, DEFAULT TO A PAGE.\n         CLI   INCHARS+1,C'0'    SINGLE NUMERIC OPERAND OF '<' OR '>'?\n         BL    KELRAMOK          NO, A PAGE IT IS.\n         NI    INCHARS+1,X'0F'   YES, CONVERT IT TO BINARY.\n         IC    R0,INCHARS+1      LOAD IT.\nKELRAMOK CLI   INBUFF,10         SCROLL LEFT?\n         BNE   KEDIRNOK          NO.\n         LNR   R0,R0             YES, MAKE THE NUMBER NEGATIVE.\nKEDIRNOK AH    R0,KESCROLL       GET THE NEW HORIZONTAL OFFSET.\n         BM    KELRZERO          IF NEGATIVE FORCE LEFT MAXIMUM.\n         STH   R0,KESCROLL       SAVE THE NEW HORIZONTAL OFFSET.\n         CH    R0,KDSEMAXR       TOO FAR RIGHT?\n         BNH   KELROKAY          NO.\n         MVC   KESCROLL,KDSEMAXR YES, PERFORM RIGHT MAX.\n         B     KELROKAY\nKELRZERO XC    KESCROLL,KESCROLL ZERO THE OFFSET FOR LEFT MAX.\nKELROKAY CLC   DGDSNAME,KSHOWITM ALREADY POSITIONED AT THE DATA SET?\n         BE    KDSELIST          YES.\n         LA    R0,DGDSNLEN       NO, POSITION TO THAT DATA SET NAME.\n         LA    R5,DGFSTDSN       POINT TO FIRST DSNAME ENTRY ADDRESS.\nKEPOSILP ICM   R5,15,DGDSNNXT    POINT TO THE DATA SET NAME ENTRY.\n         BZ    KDLOCTOP          HANDLE END OF CHAIN IF ENCOUNTERED.\n         ST    R5,KITEMADR       THIS MAY BE THE SELECTED DATA SET.\n         BAS   R14,R5ACCESS\n         CLC   DGDSNAME,KSHOWITM FOUND THE DATA SET NAME?\n         BNE   KEPOSILP          NO, CONTINUE CHAINING.\n         SLR   R0,R0\n         ST    R0,KEVNTADR       YES, DROP ANY RETAINED DSE ADDRESS.\nKDSELIST MVC   HEADING,HEADNGKE  INITIALIZE HEADING.\n         MVC   HEADING+12(44),KSHOWITM      SUPPLY DATA SET NAME.\n         LH    R1,KESCROLL       GET LEFT/RIGHT SCROLL OFFSET.\n         LA    R1,1(,R1)         SHOW LEFT-MOST COLUMN NUMBER.\n         CVD   R1,WORK\n         OI    WORK+7,X'0F'\n         UNPK  HEADING+63(3),WORK+6(2)\n         LA    R1,78(,R1)        SHOW RIGHT-MOST COLUMN NUMBER.\n         CVD   R1,WORK\n         OI    WORK+7,X'0F'\n         UNPK  HEADING+67(3),WORK+6(2)\n         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.\n         LA    R2,BUFFER         INITIALIZE BUFFER POINTER.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         MVI   LL-80(R2),X'F5'   TURQUOISE.                     (I3279)\n         MVI   KHDGCNT+1,2       UPDATE HEADING LINE COUNT.\n         ICM   R6,15,KEVNTADR    POINT TO FIRST EVENT TO DISPLAY.\n         BZ    KESHOTOP          IF ZERO THEN SHOW FROM THE TOP.\n         LA    R0,DGDSEL14\n         BAS   R14,R6ACCESS\n         USING DGDSEVNT,R6\n         CLI   KSCRLAMT,X'7F'    BOTTOM REQUESTED?\n         BE    KESHOBTM          YES, DIRECTLY ACCESS THE BOTTOM.\n         ICM   R8,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.\n         BZ    KESHOWIT          ZERO SO START FORMATTING.\n         BP    KEFWRDLP          POSITIVE SO SCROLL FORWARD.\n         LPR   R8,R8             NEGATIVE SO GET COUNT TO SCROLL BACK.\nKEBKWDLP ICM   R6,15,DGDSEDSP    POINT TO THE PREVIOUS EVENT ENTRY.\n         BZ    KESHOTOP          BACKWARD CHAIN END SO SHOW FROM TOP.\n         ST    R6,KEVNTADR       THIS MAY BE THE NEW TOP OF SCREEN.\n         LA    R0,DGDSEL14\n         BAS   R14,R6ACCESS\nKEBKWDJB CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KEBKWDOK          NO, CONTINUE.\n         MVC   KEJOB,DGDSEJOB    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KEJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KEBKWDLP          IF NOT EQUAL THEN GO AWAY.\nKEBKWDOK BCT   R8,KEBKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KESHOWIT          NOW AT THE CORRECT LOCATION.\nKESHOBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.\n         L     R6,DGDSNDSL       POINT TO THE LAST DATA SET EVENT.\n         LA    R0,DGDSEL17\n         BAS   R14,R6ACCESS\n         L     R8,LINES          GET THE SCREEN LINE COUNT.\n         AHI   R8,-4             GET THE SCROLL UP VALUE.\n         B     KEBKWDJB          GO DO IT.\nKEFWRDLP ICM   R6,15,DGDSEDSN    POINT TO THE NEXT EVENT ENTRY.\n         BZ    KESHOTOP          HANDLE END OF CHAIN IF ENCOUNTERED.\n         ST    R6,KEVNTADR       THIS MAY BE THE NEW TOP OF SCREEN.\n         LA    R0,DGDSEL14\n         BAS   R14,R6ACCESS\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KEFWRDOK          NO, CONTINUE.\n         MVC   KEJOB,DGDSEJOB    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KEJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KEFWRDLP          IF NOT EQUAL THEN GO AWAY.\nKEFWRDOK BCT   R8,KEFWRDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KESHOWIT          GET FORMATTING.\nKESHOTOP ST    R6,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?\n         BE    KESHOBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.\n         L     R6,DGDSNDSF       POINT TO THE FIRST DSNAME EVENT ENTRY.\n         ST    R6,KEVNTADR       THIS IS THE NEW TOP OF SCREEN.\nKESHOWIT SLR   R0,R0\n         ST    R0,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         SLR   R6,R6             INDICATE FIRST ADDRESS NEEDED.\n         MVC   KDSELINE(KDSELEN),KESUBHDG\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KELINEOK          NO, DISPLAY SUB-HEADING.\n         MVC   KEJOB,STARS       YES, SHOW JOB NAME MASK.\n         LH    R1,JPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,KESLDMSK       LOAD THE PREFIX INTO THE COLUMN HDR.\n         B     KELINEOK          DISPLAY SUB-HEADING.\nKEGDSELP LA    R0,DGDSEL14\n         BAS   R14,R6ACCESS\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KEGDSEOK          NO, CONTINUE.\n         MVC   KEJOB,DGDSEJOB    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KEJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KEGOTDSE          IF NOT EQUAL THEN GO AWAY.\nKEGDSEOK MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   KDSELINE,C' '     BLANK DISPLAY LINE FORMATTING AREA.\n         MVC   KDSELINE+1(KDSELEN-1),KDSELINE\n         TM    KFLAGS,KDATEFMT   NO, USING YYMMDD DATE FORMAT?\n         BO    KEDSEYMD          YES.\n         MVC   WORK(9),EDKYYDDD  NO, SHOW THE JULIAN DATE.\n         ED    WORK(9),DGDSEDAT  DISPLAY THE DATE OF THE SMF EVENT.\n         MVC   KEDATE,WORK+3\n         B     KDSEDTOK\nKEDSEYMD L     R1,DGDSEDAT       GET THE SMF EVENT JULIAN DATE.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7            CONVERT THE JULIAN DATE.\n         MVC   KEDATE(2),WORK    LOAD YY\n         MVC   KEDATE+2(2),WORK+3 AND MM\n         MVC   KEDATE+4(2),WORK+6 AND DD.\nKDSEDTOK UNPK  KETIME(3),DGDSETIM(2)\n         UNPK  KETIME+3(3),DGDSETIM+1(2)\n         TR    KETIME,HEX-C'0'\n         MVI   KETIME+2,C':'     DISPLAY THE TIME OF THE SMF EVENT.\n         MVC   KESID,DGDSESID    SHOW SYSTEM IDENTIFIER.\n         MVC   KEJOB,DGDSEJOB    SHOW JOB NAME.\n         MVC   KEUSR,DGDSEUSR    SHOW USERID.\n         CLI   DGDSETYP,14       EVENT TYPE 14?\n         BE    KE14              YES.\n         CLI   DGDSETYP,15       EVENT TYPE 15?\n         BE    KE15              YES.\n         CLI   DGDSETYP,17       EVENT TYPE 17?\n         BE    KE17              YES.\n         CLI   DGDSETYP,18       EVENT TYPE 18?\n         BE    KE18              YES.\n         CLI   DGDSETYP,61       EVENT TYPE 61?\n         BE    KE61              YES.\n         CLI   DGDSETYP,62       EVENT TYPE 62?\n         BE    KE62              YES.\n         CLI   DGDSETYP,64       EVENT TYPE 64?\n         BE    KE64              YES.\n         CLI   DGDSETYP,65       EVENT TYPE 65?\n         BE    KE65              YES.\n         CLI   DGDSETYP,66       EVENT TYPE 66?\n         BE    KE66              YES.\n         CLI   DGDSETYP,128      HSM EVENT TYPE?\n         BH    KEHF              YES.\nKEUNKN   MVC   KEVENT(4),=C'UNKN'\n         SLR   R0,R0\n         IC    R0,DGDSETYP       SHOW UNKNOWN EVENT TYPE CODE.\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  KEVENT+4(3),WORK+6(2)\n         B     KELINEOK\nKE64     MVC   KEVENT,=C'NOSPACE'    SHOW EVENT TYPE.\n         MVI   4(R2),X'F8'       USE HIGH INTENSITY FOR NO-SPACE.\n         MVI   LL-80(R2),X'F2'   USE RED FOR NO-SPACE.          (I3279)\n         TM    DGDSERIN,X'20'    NO SPACE AVAILABLE?\n         BO    KECLOSOK          YES.\n         MVI   4(R2),X'F0'       USE LOW INTENSITY FOR VSAM OPEN.\n         MVI   LL-80(R2),X'F6'   USE YELLOW FOR VSAM OPEN.      (I3279)\n         MVC   KEVENT,BLANKS     NO.\n         MVI   KEVENT+6,C'V'     INDICATE VSAM ACCESS.\n         TM    DGDSERIN,X'08'    CLOSE, TYPE=T?\n         BZ    KE141564          NO.\n         MVI   KEVENT+6,C'T'     YES.\n         B     KE141564\nKE14     MVI   KEVENT+6,C'I'     INDICATE INPUT ONLY.\n         MVI   LL-80(R2),X'F4'   USE GREEN FOR READ-ONLY.       (I3279)\n         B     KE141564\nKE15     MVI   KEVENT+6,C'O'     INDICATE OUTPUT PROBABLE.\n         MVI   LL-80(R2),X'F6'   USE YELLOW FOR OUTPUT-ALLOWED. (I3279)\nKE141564 MVC   KEVENT(6),=C'CLOSE/' SHOW EVENT TYPE.\n         SLR   R7,R7             CLEAR OPTIONAL SERVICE CODES POINTER.\n         TM    DGDSERIN,X'40'    RECORD FROM END-OF-VOLUME?\n         BZ    KECLOSOK          NO.\n         MVC   KEVENT(5),=C'E-O-V' YES.\nKECLOSOK MVC   KDDN,DGDSEDDN     SHOW DATA DEFINITION NAME.\n         L     R0,DGDSEXCP\n         CVD   R0,WORK           SHOW THE TOTAL EXCP COUNT.\n         MVC   KEXCPS,ED11\n         ED    KEXCPS,WORK+2\n         SLR   R0,R0\n         ICM   R0,B'0011',DGDSEBLK\n         CVD   R0,WORK           SHOW THE BLOCK SIZE.\n         MVC   KBLKSI,ED5Z\n         ED    KBLKSI,WORK+5\n         ICM   R0,B'0011',DGDSELRL\n         CVD   R0,WORK           SHOW THE LOGICAL RECORD LENGTH.\n         MVC   KLRECL,ED5Z\n         ED    KLRECL,WORK+5\n         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.\n         CLI   DGDSETYP,64       VSAM ACCESS?\n         BNE   KENVSAM           NO.\n         MVC   KAM,=C'VSAM'      YES.\n         ICM   R0,B'0011',DGDSEKEY\n         CVD   R0,WORK           SHOW THE KEY LENGTH.\n         MVC   KKEYLE,ED5Z\n         ED    KKEYLE,WORK+5\n         IC    R1,DGDSEDMF       GET ACBMACR1 FLAGS.\n         SLL   R1,29             SHIFT OUT UNWANTED FLAGS.\n         SRL   R1,30             GET GET/PUT READ/WRITE FLAGS.\n         SLA   R1,3              MULTIPLY BY EIGHT FOR INDEX.\n         BZ    KEOPENOK          BOTH FLAGS OFF SO LEAVE BLANK.\n         LA    R1,KVOPNTYP-8(R1) POINT TO OPEN TYPE LITERAL.\n         MVC   KOPEN,0(R1)       SHOW THE OPEN TYPE.\n         CLI   KOPEN+1,C'I'      OPENED FOR INPUT?\n         BNE   KEOPENOK          NO.\n         MVI   LL-80(R2),X'F4'   YES, USE GREEN FOR READ-ONLY.  (I3279)\n         B     KEOPENOK\nKEHF     CLI   DGDSETYP,128+14   HSM EVENT TYPE?\n         BH    KEUNKN            NO.\n         MVC   WORK(1),DGDSETYP  YES, GET ENTRY CODE.\n         NI    WORK,X'7F'        CONVERT TO HSM FUNCTION CODE.\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,WORK           LOAD THE HSM FUNCTION CODE.\n         SLL   R1,3              MULTIPLY BY EIGHT FOR INDEX.\n         LA    R1,HSMFNCTN-8(R1) POINT TO HSM FUNCTION NAME.\n         MVC   KEVENT,1(R1)      SHOW THE HSM FUNCTION NAME.\n         L     R0,DGDSEXCP\n         CVD   R0,WORK           SHOW THE DATA SET AGE IN DAYS.\n         MVC   KEXCPS,ED11\n         ED    KEXCPS,WORK+2\n         MVC   KEXCPS+2(5),=C'AGE ='\n         MVC   LL-80(1,R2),0(R1) LOAD THE COLOUR CODE.          (I3279)\n         CLI   0(R1),X'F3'       PINK?\n         BH    KHFVSTST          NO, GREEN OR TURQUOISE SO LOW IS OKAY.\n         MVI   4(R2),X'F8'       MAKE LINE HIGH INTENSITY.\n         BL    KEOPENOK          NO, RED SO HIGH IS OKAY.\n         MVI   4(R2),X'F4'       YES, SO MAKE IT \"MEDIUM\" INTENSITY.\nKHFVSTST MVC   KAM,=C'VSAM'      PREPARE FOR VSAM.\n         TM    DGDSEDCO+1,X'08'  VSAM DATA SET?\n         BO    AM1415OK          YES, MESSAGE IS CORRECT.\nKENVSAM  SLR   R0,R0\n         IC    R0,DGDSEKEY\n         CVD   R0,WORK           SHOW THE KEY LENGTH.\n         MVC   KKEYLE,ED5Z\n         ED    KKEYLE,WORK+5\n         MVC   KEMCN,DGDSEMCN    SHOW SMS MANAGEMENT CLASS NAME.\n         MVC   KEDCN,DGDSEDCN    SHOW SMS DATA CLASS NAME.\n         MVC   KESCN,DGDSESCN    SHOW SMS STORAGE CLASS NAME.\n         MVC   KESTP,DGDSESTP    SHOW STEP NAME.\n         MVC   KEPGM,DGDSEPGM    SHOW ACTIVE PROGRAM NAME.\n         LA    R8,KEDRFTYP       ASSUME DISK DATA SET.\n         TM    DGDSERIN,X'20'    DASD DATA SET?\n         BO    KERTYPOK          YES, GOOD GUESS.\n         LA    R8,KETRFTYP       NO, MUST BE A TAPE DATA SET.\nKERTYPOK LA    R9,KRECFM         POINT TO RECFM DISPLAY AREA.\n         LA    R0,8              EIGHT BITS TO CHECK.\n         ICM   R1,8,DGDSERFM     LOAD THE RECORD FORMAT FLAG BYTE.\n         TM    DGDSERFM,X'C0'    UNDEFINED RECORD FORMAT?\n         BNO   KERCFMLP          NO, PROCEED.\n         MVI   0(R9),C'U'        YES, INDICATE THIS.\n         SLL   R1,2              TWO BITS ALREADY CHECKED.\n         LA    R0,6              ONLY SIX BITS LEFT TO CHECK.\n         B     KERECFMU          PROCEED.\nKERCFMLP LTR   R1,R1             IS TOP BIT ON?\n         BNM   KERFMNXT          NO.\n         MVC   0(1,R9),0(R8)     YES, LOAD INDICATOR.\nKERECFMU LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.\nKERFMNXT LA    R8,1(,R8)         ADVANCE INDICATOR POINTER.\n         SLL   R1,1              PROMOTE NEXT BIT.\n         BCT   R0,KERCFMLP       GO TEST NEXT BIT.\n         MVC   KAM,=C'EXCP'\n         TM    DGDSEDMF,X'80'    EXCP PROCESSING USED?\n         BNZ   AM1415OK          YES, MESSAGE IS CORRECT.\n         TM    DGDSEDCO,X'E2'    IS, PS, DA OR PO?\n         BZ    AM1415OK          NO, JUST SAY EXCP.\n         LA    R7,OPTIONIS       POINT TO ISAM OPTION CODES.\n         MVC   KAM,=C'ISAM'\n         TM    DGDSEDCO,X'80'    DCBDSORG=IS?\n         BO    AM1415OK          YES.\n         LA    R7,OPTIONDA       POINT TO BDAM OPTION CODES.\n         LA    R8,DAMMACRF       POINT TO MACRO FORM INDICATOR FLAGS.\n         MVC   KAM,=C'BDAM'\n         TM    DGDSEDCO,X'20'    DCBDSORG=DA?\n         BO    KESHOMAC          YES.\n         LA    R7,OPTIONPS       POINT TO SAM/PAM OPTION CODES.\n         LA    R8,SAMMACRF       POINT TO MACRO FORM INDICATOR FLAGS.\n         MVC   KAM,=C'BPAM'\n         TM    DGDSEDCO,X'02'    DCBDSORG=PO?\n         BO    KESHOMAC          YES.\n         MVC   KAM,=C'BSAM'\n         MVC   WORK(2),DGDSEDMF  COPY DCBMACRF.\n         LA    R1,WORK           POINT TO IT.\n         LA    R0,2              TWO BYTES TO TEST (INPUT AND OUTPUT).\nMACR14LP TM    0(R1),X'60'       TEST BASIC AND QUEUED BITS.\n         BM    KEQSTEST          DIFFERENT SO SEE WHICH TYPE.\n         LA    R1,1(,R1)         POINT TO NEXT BYTE.\n         BCT   R0,MACR14LP\n         B     AM1415OK          SHOULD NOT HAPPEN BUT LEAVE AS BSAM.\nKEQSTEST TM    0(R1),X'40'       IS THE QUEUED BIT ON?\n         BZ    KESHOMAC          NO, SO THE BASIC BIT IS ON.\n         MVC   KAM,=C'QSAM'\nKESHOMAC CLI   DGDSEVOL+7,C' '   FIRST OR ONLY VOLUME?\n         BH    AM1415OK          NO, DO NOT SHOW MACRO FORM.\n         ICM   R1,12,DGDSEDMF    LOAD ALL OF DCBMACRF.\n         BZ    AM1415OK          NO BITS ON SO DO NOT SHOW MACRO FORM.\n         MVC   KVOL3,=C'MACRF='  SHOW MACRO FORM OF DCB.\n         LA    R9,KVOL3+6        POINT TO OUTPUT AREA.\n         MVI   0(R9),C'('\n         LA    R0,8              8 INPUT BITS TO TEST.\n         ALR   R8,R0             POINT TO OUTPUT BITS.\n         ICM   R1,8,DGDSEDMF+1   LOAD THE OUTPUT-RELATED BYTE.\n         TM    DGDSEDMF,X'60'    GET OR READ?\n         BZ    KEMACOLP          NO, MUST BE OUTPUT ONLY.\n         ICM   R1,12,DGDSEDMF    YES, LOAD ALL OF DCBMACRF.\n         SLR   R8,R0             POINT TO BACK TO INPUT BITS.\nKEMACILP LTR   R1,R1             TOP BIT ON?\n         BNM   KENXTIBT          NO.\n         MVC   1(1,R9),0(R8)     YES, LOAD INDICATOR FLAG.\n         LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.\nKENXTIBT LA    R8,1(,R8)         ADVANCE INDICATOR POINTER.\n         SLL   R1,1              PROMOTE NEXT BIT.\n         BCT   R0,KEMACILP       GO TEST NEXT BIT.\n         MVI   1(R9),C')'        ASSUME INPUT-ONLY OPERATION.\n         TM    DGDSEDMF+1,X'60'  PUT OR WRITE?\n         BZ    AM1415OK          NO, ASSUMPTION CORRECT.\n         MVI   1(R9),C','        YES, SUPPLY COMMA.\n         LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.\n         LA    R0,8              8 OUTPUT BITS TO TEST.\nKEMACOLP LTR   R1,R1             TOP BIT ON?\n         BNM   KENXTOBT          NO.\n         MVC   1(1,R9),0(R8)     YES, LOAD INDICATOR FLAG.\n         LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.\nKENXTOBT LA    R8,1(,R8)         ADVANCE INDICATOR POINTER.\n         SLL   R1,1              PROMOTE NEXT BIT.\n         BCT   R0,KEMACOLP       GO TEST NEXT BIT.\n         MVI   1(R9),C')'        END OF MACRO FORM VALUE.\n         TM    DGDSERIN,X'01'    VIO DATA SET?\n         BO    AM1415OK          YES, UNBLOCKED IS ACCEPTABLE.\n         CLI   DGDSEKEY,0        KEYED FILE?\n         BNE   AM1415OK          YES, UNBLOCKED MAY BE NECESSARY.\n         TM    DGDSERFM,X'C0'    FIXED OR VARIABLE LENGTH RECORDS?\n         BNM   AM1415OK          NO.\n         TM    DGDSERFM,X'10'    BLOCKING PERMITTED?\n**       BZ    KEUNBLKD          NO, GO HIGHLIGHT THIS.\n         BZ    AM1415OK          NO, UNBLOCKED MAY BE NECESSARY.\n         CLC   DGDSELRL,DGDSEBLK LRECL=BLKSIZE?\n         BE    KEUNBLKD          YES, MUST BE (FIXED LENGTH) UNBLOCKED.\n         TM    DGDSERFM,X'40'    VARIABLE LENGTH RECORDS?\n         BZ    AM1415OK          NO, MUST BE FIXED BLOCKED.\n         TM    DGDSERFM,X'08'    VARIABLE SPANNED?\n         BO    AM1415OK          YES, BLOCKS PROBABLY FILLED.\n         CLC   =C'PL',KVOL4      QSAM PUT LOCATE MODE FOR OUTPUT?\n         BNE   AM1415OK          NO, CAN HAVE FULL LENGTH BLOCKS.\n         LH    R1,DGDSELRL       GET THE LOGICAL RECORD LENGTH.\n         LTR   R1,R1             FUNNY LRECL?\n         BNP   AM1415OK          YES, IGNORE.\n         SLL   R1,1              DOUBLE IT.\n         LA    R1,4(,R1)         ADD FOUR FOR BDW.\n         CH    R1,DGDSEBLK       MORE THAN BLOCK SIZE?\n         BNH   AM1415OK          NO.\nKEUNBLKD MVI   2(R2),X'F2'       REVERSE VIDEO FOR UNBLOCKED.   (I3279)\n         MVI   5(R2),X'50'       REVERSE VIDEO FOR UNBLOCKED.   (F9526)\n         MVC   KKEYLE+1(5),=C'UNBLK'\nAM1415OK BAS   R14,KEOPTCDS      DISPLAY ANY OPTIONAL SERVICE FLAGS.\n         IC    R1,DGDSEEOP       NO, GET DEBOPATB I/O METHOD FLAGS.\n         SLL   R1,28             SHIFT OUT DISPOSITION FLAGS.\n         SRL   R1,28-3           MULTIPLY BY EIGHT FOR INDEX.\n         LA    R1,KOPNTYPE(R1)   POINT TO OPEN TYPE LITERAL.\n         MVC   KOPEN,0(R1)       SHOW THE OPEN TYPE.\nKEOPENOK MVC   KMEM,DGDSEMEM\n         ICM   R0,3,DGDSEDEV     ANY NON-ZERO UNIT?\n         BZ    KCUAOKAY          NO.\n         UNPK  KUNIT(5),DGDSEDEV(3)\n         TR    KUNIT,HEX-C'0'\n         CLI   KUNIT,C'0'        LEADING ZERO?\n         BNE   KCUAOKAY          NO.\n         MVI   KUNIT,C' '        YES, SUPPRESS IT.\nKCUAOKAY MVC   KVOL,DGDSEUCV     SHOW UCB VOLUME SERIAL NUMBER.\n         CLI   DGDSETYP,64       VSAM DATA SET?\n         BE    KENVSDSK          YES, CANNOT BE TAPE.\n         BH    KEHSMDSK          HSM FUNCTION EVENT.\n         TM    DGDSERIN,X'20'    DASD DATA SET?\n         BO    KENVSDSK          YES.\n         ICM   R0,B'0011',DGDSEFSC\n         CVD   R0,WORK           SHOW DATA SET SEQUENCE COUNT.\n         MVC   KFSC,ED3Z\n         ED    KFSC,WORK+6\n         ICM   R0,B'0011',DGDSEFSN\n         CVD   R0,WORK           SHOW DATA SET SEQUENCE NUMBER.\n         MVC   KFSN,ED3Z\n         ED    KFSN,WORK+6\n         L     R0,DGDSETBC\n         CVD   R0,WORK           SHOW THE TAPE VOLUME BLOCK COUNT.\n         MVC   KBLKS,ED7\n         ED    KBLKS,WORK+4\n         B     KELINEOK          TIDY UP DISPLAY LINE.\nKENVSDSK ICM   R0,B'0011',DGDSEEXT\n         CVD   R0,WORK           SHOW THE REMAINING EXTENT COUNT.\n         MVC   KEXT,ED3\n         ED    KEXT,WORK+6\nKEHSMDSK L     R0,DGDSETRK\n         CVD   R0,WORK           SHOW THE REMAINING TRACK COUNT.\n         MVC   KTRKS,ED7Z\n         ED    KTRKS,WORK+4\n         B     KELINEOK          TYPE 14/15 PROCESSING NOW COMPLETE.\nKE17     MVC   KEVENT,=C'SCRATCH'     SHOW EVENT TYPE.\n         MVI   4(R2),X'F8'       USE HIGH INTENSITY FOR SCRATCH.\n         MVI   LL-80(R2),X'F2'   USE RED FOR SCRATCH.           (I3279)\n         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.\n         B     KELINEOK          TYPE 18 PROCESSING NOW COMPLETE.\nKE66     MVC   KEVENT(5),=C'ALTER'     SHOW EVENT TYPE.\n         MVI   LL-80(R2),X'F6'         USE YELLOW FOR ALTER.    (I3279)\n         CLI   DGDSEFNC,C' '           INTERESTING RENAME FLAG?\n         BNH   KE616566                NO.\n         MVI   KEVENT+5,C'/'           YES.\n         MVC   KEVENT+6(1),DGDSEFNC    SHOW RENAME FLAG.\n         CLI   DGDSEFNC,C'R'           ACTUALLY A RENAME?\n         BNE   KE616566                NO.\n         B     KE1866                  YES.\nKE18     MVC   KEVENT(6),=C'RENAME'    SHOW EVENT TYPE.\nKE1866   MVC   0(LL-79,R2),MEDX  USE MEDIUM/PINK FOR RENAME.    (I3279)\n         TM    DGDSESBT,DGDSENEW IS THIS THE \"NEW\" DATA SET NAME?\n         BZ    KEREN2OK          NO.\n         MVI   KEVENT+6,C'2'     YES, INDICATE THIS.\nKEREN2OK LR    R0,R5             SAVE CURRENT DSNAME ENTRY ADDRESS.\n         ICM   R5,15,DGDSEONM    POINT TO \"OTHER\" DSNAME ENTRY.\n         BZ    KE18DSOK          IGNORE ZERO POINTER.\n         LA    R0,DGDSNLEN\n         BAS   R14,R5ACCESS\n         MVC   KTRKS+3(8),=C'NEW-DSN='\n         TM    DGDSESBT,DGDSENEW IS THIS THE \"NEW\" DATA SET NAME?\n         BZ    KERENOK           NO, SO \"OTHER\" IS NEW.\n         MVC   KTRKS+3(3),=C'OLD' YES, SO \"OTHER\" IS OLD.\nKERENOK  MVC   KTRKS+11(44),DGDSNAME   SHOW THE \"OTHER\" DATA SET NAME.\nKE18DSOK LR    R5,R0             RESTORE CURRENT DSNAME ENTRY POINTER.\n         LA    R0,DGDSNLEN\n         BAS   R14,R5ACCESS\n         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.\n         B     KELINEOK          TYPE 18 PROCESSING NOW COMPLETE.\nKE61     MVC   KEVENT(6),=C'DEFINE'   SHOW EVENT TYPE.\n         MVI   LL-80(R2),X'F1'   USE BLUE FOR DEFINE CATALOG ENTRY.\n         B     KE616566          BRANCH TO COMMON CODE.\nKE62     MVC   KEVENT+1(4),=C'OPEN'   SHOW EVENT TYPE.\n         MVI   LL-80(R2),X'F5'   USE TURQUOISE FOR VSAM OPEN.   (I3279)\n         MVC   KAM,=C'VSAM'      INDICATE VSAM.\n         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.\n         TM    DGDSERIN,X'80'    SUCCESSFUL OPEN?\n         BO    OPEN62OK          YES.\n         MVI   4(R2),X'F8'       USE HIGH INTENSITY FOR OPEN FAILURE.\n         MVI   LL-80(R2),X'F2'   USE RED FOR OPEN FAILURE.      (I3279)\n         MVC   KDDN+1(6),=C'*FAIL*'\n         TM    DGDSERIN,X'40'    SECURITY VIOLATION?\n         BZ    OPEN62OK          NO.\n         MVC   KDDN(8),=C'*BAD-PW*'\nOPEN62OK TM    DGDSERIN,X'30'    CATALOG, CRA OR VVDS ACCESS?\n         BZ    KELINEOK          NO, TYPE 62 PROCESSING IS COMPLETE.\n         MVC   KOPEN,=C'CAT/RA'\n         TM    DGDSERIN,X'20'    CATALOG OR CRA?\n         BO    KELINEOK          YES, TYPE 62 PROCESSING IS COMPLETE.\n         MVC   KOPEN,=C'C/V/DS'  NO, MUST BE CATALOG/VVDS AS DATA SET.\n         B     KELINEOK          TYPE 62 PROCESSING NOW COMPLETE.\nKE65     MVC   KEVENT,=C'UNCATLG'     SHOW EVENT TYPE.\n         MVI   4(R2),X'F8'            USE HIGH INTENSITY FOR UNCATALOG.\n         MVI   LL-80(R2),X'F2'        USE RED FOR UNCATALOG.    (I3279)\n         CLI   DGDSEFNC,C' '          INTERESTING SCRATCH/UNCAT FLAG?\n         BNH   KE616566               NO.\n         MVI   KEVENT+5,C'/'          YES.\n         MVC   KEVENT+6(1),DGDSEFNC   SHOW SCRATCH/UNCAT-ONLY FLAG.\nKE616566 MVC   KMEM+1(4),=C'TYPE'\n         MVC   KMEM+6(1),DGDSEENT     SHOW CATALOG ENTRY TYPE.\n         MVC   KEXCPS+2(6),KMEM+1     SHOW CATALOG ENTRY TYPE.\n         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.\nKELINEOK TR    KDSELINE(KDSELEN),XLATETBL    ENSURE NO UNPRINTABLES.\n         MVI   KESEP01,X'3B'     SEPARATE DISPLAY AREAS.\n         MVI   KESEP02,X'3B'\n         MVI   KESEP03,X'3B'\n         MVI   KESEP04,X'3B'\n         MVI   KESEP05,X'3B'\n         MVI   KESEP06,X'3B'\n         MVI   KESEP07,X'3B'\n         MVI   KESEP08,X'3B'\n         CLI   KETIME,C'T'       SUB-HEADING LINE?\n         BE    KDOSEP09          YES.\n         CLI   KTRKS+6,C'-'      SUPPLYING \"OTHER\" DATA SET NAME?\n         BNE   KDOSEP09          NO.\n         CLI   KESEP14,C' '      DOES DATA SET NAME EXTEND THIS FAR?\n         BNE   KDOSEP15          YES.\n         MVI   KESEP14,X'3B'\n         CLI   KESEP13,C' '      DOES DATA SET NAME EXTEND THIS FAR?\n         BNE   KDOSEP15          YES.\n         MVI   KESEP13,X'3B'\n         CLI   KESEP12,C' '      DOES DATA SET NAME EXTEND THIS FAR?\n         BNE   KDOSEP15          YES.\n         MVI   KESEP12,X'3B'\n         CLI   KESEP11,C' '      DOES DATA SET NAME EXTEND THIS FAR?\n         BNE   KDOSEP15          YES.\n         MVI   KESEP11,X'3B'\n         CLI   KESEP10,C' '      DOES DATA SET NAME EXTEND THIS FAR?\n         BNE   KDOSEP15          YES.\n         MVI   KESEP10,X'3B'\n         CLI   KESEP09,C' '      DOES DATA SET NAME EXTEND THIS FAR?\n         BNE   KDOSEP15          YES.\n         MVI   KESEP09,X'3B'\n         B     KDOSEP15\nKDOSEP09 MVI   KESEP09,X'3B'\n         MVI   KESEP10,X'3B'\n         MVI   KESEP11,X'3B'\n         MVI   KESEP12,X'3B'\n         MVI   KESEP13,X'3B'\n         MVI   KESEP14,X'3B'\nKDOSEP15 MVI   KESEP15,X'3B'\n         MVI   KESEP16,X'3B'\n         MVI   KESEP17,X'3B'\n         MVI   KESEP18,X'3B'\n         MVI   KESEP19,X'3B'\n         MVI   KESEP20,X'3B'\n         MVI   KESEP21,X'3B'\n         MVI   KESEP22,X'3B'\n         MVI   KESEP23,X'3B'\n         MVI   KESEP24,X'3B'\n         MVI   KESEP25,X'3B'\n         MVI   KESEP26,X'3B'\n         MVI   KESEP27,X'3B'\n         LH    R1,KESCROLL       LOAD LEFT/RIGHT SCROLL OFFSET.\n         LA    R1,KDSELINE(R1)   POINT TO START OF LINE TO BE LOADED.\n         MVC   LL-79(79,R2),0(R1) LOAD DISPLAY LINE.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   KEODGDAT          YES, SO SHOW IT.\n         LTR   R6,R6             POINTING TO VALID DSE?\n         BNZ   KEGOTDSE          YES.\n         ICM   R6,15,KEVNTADR    POINT TO THE FIRST ADDRESS POINTER.\n         B     KENXTDSE\nKEGOTDSE ICM   R6,15,DGDSEDSN    POINT TO NEXT DATA SET EVENT ENTRY.\nKENXTDSE BNZ   KEGDSELP          PROCESS IT.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LR    R1,R2             POINT TO THIS LINE.\n         LA    R0,LL             GET THE LINE LENGTH.\n         SLR   R1,R0             POINT TO THE PREVIOUS LINE.\n         CLI   2(R1),X'00'       ANY EXTENDED HIGHLIGHTING ALREADY?\n         BNE   KELSTLIN          YES, DO NOT CHANGE IT.\n         MVI   2(R1),X'F4'       UNDERSCORE FOR PREVIOUS LINE.  (I3279)\n         MVI   5(R1),X'C4'       UNDERLINE FOR PREVIOUS LINE.   (F9526)\nKELSTLIN MVI   2(R2),X'F4'       UNDERSCORE FOR THIS LINE.      (I3279)\n         MVI   LL-80(R2),X'F5'   TURQUOISE.                     (I3279)\n         MVC   LL-58(37,R2),=C'HIT PF3/15 TO RETURN TO DATA SET LIST'\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         B     KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.\n         SPACE\nKESLDMSK MVC   KEJOB(0),SELJOBNM                <<< EXECUTED >>>\n         SPACE\nKEVOLS   MVC   KVOL,DGDSEVOL     SHOW FIRST VOLUME SERIAL NUMBER.\n         MVC   KVOL1,DGDSEVOL    SHOW UP TO FIRST FIVE VOLUME SERIALS.\n         MVC   KVOL2,DGDSEVOL+6\n         MVC   KVOL3,DGDSEVOL+12\n         MVC   KVOL4,DGDSEVOL+18\n         MVC   KVOL5,DGDSEVOL+24\n         SLR   R0,R0             SHOW THE VOLUME COUNT.\n         ICM   R0,B'0011',DGDSENUM\n         CVD   R0,WORK\n         MVC   K#DV,ED3Z\n         ED    K#DV,WORK+6\n         BR    R14               RETURN TO CALLER.\n         SPACE\nKEOPTCDS LTR   R7,R7             POINTING TO OPTIONAL SERVICE CODES?\n         BNPR  R14               NO, RETURN WITHOUT ACTION.\n         LA    R9,KOPT           POINT TO OUTPUT DISPLAY AREA.\n         LA    R0,8              8 OUTPUT BITS TO TEST.\n         ICM   R1,8,DGDSEOPT     LOAD DCBOPTCD.\nKEOPTNLP LTR   R1,R1             TOP BIT ON?\n         BNM   KENXTOPT          NO.\n         MVC   0(1,R9),0(R7)     YES, LOAD INDICATOR FLAG.\n         LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.\nKENXTOPT LA    R7,1(,R7)         ADVANCE INDICATOR POINTER.\n         SLL   R1,1              PROMOTE NEXT BIT.\n         BCT   R0,KEOPTNLP       GO TEST NEXT BIT.\n         BR    R14               RETURN TO CALLER.\n         SPACE\n         DROP  R10,R6,R5         KDISPDSN, DGDSEVNT, DGDATAST.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CONSTANTS AND VARIABLES'\nKESCROLL DC    H'0'              LEFT/RIGHT SCROLL OFFSET.\nKDSEMAXR DC    AL2(KDSELEN-79)   MAXIMUM SCROLL RIGHT OFFSET.\nDAMMACRF DC    C'EGRKISXC'       INPUT DA MACRF BITS (DCBMACR1).\n         DC    C'0PWKISAU'       OUTPUT DA MACRF BITS (DCBMACR2).\nSAMMACRF DC    C'EGRMLPCD'       INPUT PS MACRF BITS (DCBMACR1).\n         DC    C'0PWMLPCD'       OUTPUT PS MACRF BITS (DCBMACR2).\nOPTIONPS DC    C'WUCHQZTJ'       SAM/PAM OPTIONAL SERVICE CODES.\nOPTIONIS DC    C'WUMIY?LR'       ISAM OPTIONAL SERVICE CODES.\nOPTIONDA DC    C'WTEFADXB'       BDAM OPTIONAL SERVICE CODES.\nKEDRFTYP DC    C'FVTBSAM?'       DISK DATA SET RECORD FORMAT FLAGS.\nKETRFTYP DC    C'FVDBSAM?'       TAPE DATA SET RECORD FORMAT FLAGS.\n*                 OPEN TYPE      DEBOPATB SETTING\nKOPNTYPE DC    CL8' INPUT  '       0000      0\n         DC    CL8'RDBACK  '       0001      1\n         DC    CL8'?0010?  '       0010      2\n         DC    CL8' INOUT  '       0011      3\n         DC    CL8'UPDATE  '       0100      4\n         DC    CL8'?0101?  '       0101      5\n         DC    CL8'OUTINX  '       0110      6\n         DC    CL8' OUTIN  '       0111      7\n         DC    CL8'?1000?  '       1000      8\n         DC    CL8'?1001?  '       1001      9\n         DC    CL8'?1010?  '       1010      A\n         DC    CL8'?1011?  '       1011      B\n         DC    CL8'?1100?  '       1100      C\n         DC    CL8'?1101?  '       1101      D\n         DC    CL8'EXTEND  '       1110      E\n*        DC    CL8'OUTPUT  '       1111      F\n*                 OPEN TYPE      ACBMACR1 SETTING\nKVOPNTYP DC    CL8'OUTPUT  '       .01.      2\n         DC    CL8' INPUT  '       .10.      4\n         DC    CL8'UPDATE  '       .11.      6\nHSMFNCTN DS    0C                HSM FUNCTION CODE TABLE.\n         DC    CL8'4HMIG-L1'         1 - PRIMARY TO ML1.\n         DC    CL8'4MIG-MIG'         2 - ML1/2 TO ML1/2.\n         DC    CL8'4HMIG-L2'         3 - PRIMARY TO ML2.\n         DC    CL8'5HRECA-1'         4 - ML1 TO PRIMARY.\n         DC    CL8'5HRECA-2'         5 - ML2 TO PRIMARY.\n         DC    CL8'2HDELETE'         6 - HDELETE.\n         DC    CL8'4DBACKUP'         7 - DAILY BACKUP.\n         DC    CL8'4SBACKUP'         8 - SPILL BACKUP.\n         DC    CL8'3RECOVER'         9 - HRECOVER.\n         DC    CL8'4RECYCLE'         A - RECYCLE BACKUP VOLUME.\n         DC    CL8'2DEL-AGE'         B - DELETE BY AGE.\n         DC    CL8'4RECYCLE'         C - RECYCLE MIGRATION VOLUME.\n         DC    CL8'4DUMPVOL'         D - FULL VOLUME DUMP.\n         DC    CL8'3RESTORE'         E - VOLUME OR DATA SET RESTORE.\nHEADNGKD DC    CL71' PLACE CURSOR ON LINE AND HIT ENTER TO SELECT A DAT+\n               A SET FROM THE LIST '\nHEADNGKE DC    CL71' EVENTS FOR 11111111.22222222.33333333.44444444.555+\n               55555  COLS 001-079 '\nKDSELINE DS    0C\nKEDATE   DC    CL6'YY.DDD',CL1' '\nKETIME   DC    CL5'HH:MM'\nKESEP01  DC    CL1'|'\nKESID    DC    CL4' '\nKESEP02  DC    CL1'|'\nKEJOB    DC    CL8' '\nKESEP03  DC    CL1'|'\nKEVENT   DC    CL7' '\nKESEP04  DC    CL1'|'\nKDDN     DC    CL8' '\nKESEP05  DC    CL1'|'\nKUNIT    DC    CL4' '\nKESEP06  DC    CL1'|'\nKVOL     DC    CL6' '\nKESEP07  DC    0CL1'|'\nKEXT     DC    CL4' '\nKESEP08  DC    0CL1'|'\nKTRKS    DC    CL8' '\nKESEP09  DC    0CL1'|'\nKEXCPS   DC    CL12' '\nKESEP10  DC    0CL1'|'\nKBLKS    DC    CL8' '\nKESEP11  DC    0CL1'|'\nKFSC     DC    CL4' '\nKESEP12  DC    0CL1'|'\nKFSN     DC    CL4' '\nKESEP13  DC    CL1'|'\nKMEM     DC    CL8' '\nKESEP14  DC    CL1'|'\nKAM      DC    CL4' ',CL1' '\nKOPEN    DC    CL6' '\nKESEP15  DC    CL1'|'\nKRECFM   DC    CL5' '\nKESEP16  DC    0CL1'|'\nKLRECL   DC    CL6' '\nKESEP17  DC    0CL1'|'\nKBLKSI   DC    CL6' '\nKESEP18  DC    0CL1'|'\nKKEYLE   DC    CL6' '\nKESEP19  DC    CL1'|'\nKOPT     DC    CL8' '\nKESEP20  DC    CL1'|'\nKVOL1    DC    CL6' ',CL1' '\nKVOL2    DC    CL6' ',CL1' '\nKVOL3    DC    CL6' ',CL1' '\nKVOL4    DC    CL6' ',CL1' '\nKVOL5    DC    CL6' '\nKESEP21  DC    0CL1'|'\nK#DV     DC    CL4' ',CL1' '\nKESEP22  DC    CL1'|'\nKEUSR    DC    CL8' '\nKESEP23  DC    CL1'|'\nKEMCN    DC    CL8' '\nKESEP24  DC    CL1'|'\nKEDCN    DC    CL8' '\nKESEP25  DC    CL1'|'\nKESCN    DC    CL8' '\nKESEP26  DC    CL1'|'\nKESTP    DC    CL8' '\nKESEP27  DC    CL1'|'\nKEPGM    DC    CL8' '\nKDSELEN  EQU   *-KDSELINE\n         SPACE\n         LTORG\n         SPACE\nKESUBHDG DC    C' DATE  TIME |SID |JOB NAME| EVENT | DDNAME |UNIT|VOLUM+\n               E|EXT| TRACKS|TOTAL EXCPS| BLOCKS|FSC|FSN| MEMBER |ACCES+\n               S DTLS|RECFM|LRECL|BLKSI|KEYLN|OPTIONCD| VOL1   VOL2   V+\n               OL3   VOL4   VOL5 |#DEV|JMRUSEID|MGMTCLAS|DATACLAS|STORC+\n               LAS|STEPNAME|PROGRAM '\n         DS    0H\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PROGRAM NAME LIST'\n         USING KDISPPGM,R10\nKDISPPGM DS    0H                DISPLAY PROGRAM NAME LIST.\n         MVC   HEADING,HEADNGKP  INITIALIZE HEADING.\n         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?\n         BNE   KPHDKPOK          NO, MUST BE PROGRAM LIST.\n         MVC   HEADING(48),HEADING+1\n         MVC   HEADING+48(8),KJSUBHDG+23        C'JOB NAME'.\nKPHDKPOK MVI   KHDGCNT+1,1       UPDATE HEADING LINE COUNT.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'S'.\n         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.\n         LA    R2,BUFFER         INITIALIZE BUFFER POINTER.\n         LA    R0,DGPGMLEN       GET PROGRAM NAME ENTRY LENGTH.\n         CLI   KLOCNAME,0        ANY PROGRAM NAME/PREFIX TO LOCATE?\n         BE    KPNOPREF          NO.\n         LA    R5,DGFSTPGM       POINT TO THE FIRST/LAST PGM POINTERS.\n         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?\n         BNE   *+8               NO, MUST BE PROGRAM LIST.\n         LA    R5,DGFSTJOB       POINT TO THE FIRST/LAST JOB POINTERS.\n         USING DGPROGRM,R5\n         CLI   KLOCNAME,C'M'     NAME CLOSER TO END OF CHARACTER SET?\n         BH    KPBLOCLP          YES, SEARCH BACKWARD FROM END OF LIST.\nKPFLOCLP ICM   R5,15,DGPGMNXT    POINT TO THE NEXT PROGRAM NAME ENTRY.\n         BZ    KPLOCBTM          END OF FORWARD CHAIN SO GO DOWN MAX.\n         BAS   R14,R5ACCESS\n         CLC   DGPGMNAM,KLOCNAME LOCATED THE REQUESTED NAME?\n         BL    KPFLOCLP          NO, CONTINUE SEARCH.\n         BE    KPLOCDIT          YES, EXACT MATCH SO SHOW IT.\n*        B     KPBLOCLP   (BH)   YES, BUT PAST IT SO BACK UP.\nKPBLOCLP ICM   R5,15,DGPGMPRV    POINT TO THE PREVIOUS PGM NAME ENTRY.\n         BZ    KPLOCTOP          BACKWARD CHAIN END SO SHOW FROM TOP.\n         BAS   R14,R5ACCESS\n         CLC   DGPGMNAM,KLOCNAME LOCATED THE REQUESTED NAME?\n         BH    KPBLOCLP          NO, CONTINUE SEARCH.\nKPLOCDIT XC    KLOCNAME,KLOCNAME CLEAR THE PROGRAM NAME INPUT AREA.\n         B     KPSHOWIT          NOW AT THE CORRECT LOCATION.\nKPNOPREF ICM   R5,15,KITEMADR    POINT TO FIRST PROGRAM TO DISPLAY.\n         BZ    KPSHOTOP          IF ZERO THEN SHOW FROM THE TOP.\n         BAS   R14,R5ACCESS\n         CLC   KSHOWITM,BLANKS   SHOWING SPECIFIC EVENTS?\n         BNE   KDISPJSE          YES, SHOW EVENTS OF A PROGRAM.\n         CLI   KSCRLAMT,X'7F'    NO, BOTTOM RQUESTED?\n         BE    KPSHOBTM          YES, DIRECTLY ACCESS THE BOTTOM.\n         ICM   R1,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.\n         BZ    KPZMCHEK          ZERO SO CHECK FOR ZOOM REQUEST.\n         BP    KPFWRDLP          POSITIVE SO SCROLL FORWARD.\n         LPR   R1,R1             NEGATIVE SO GET COUNT TO SCROLL BACK.\nKPBKWDLP ICM   R5,15,DGPGMPRV    POINT TO THE PREVIOUS PGM NAME ENTRY.\n         BZ    KPSHOTOP          BACKWARD CHAIN END SO SHOW FROM TOP.\n         BAS   R14,R5ACCESS\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KPBKWDOK          NO, CONTINUE.\n         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BNE   KPBKWDOK          NO, CONTINUE.\n         MVC   KJJOB,DGPGMNAM    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KJJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KPBKWDLP          IF NOT EQUAL THEN GO AWAY.\nKPBKWDOK BCT   R1,KPBKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KPSHOWIT          NOW AT THE CORRECT LOCATION.\nKPLOCBTM XC    KLOCNAME,KLOCNAME CLEAR THE PROGRAM NAME INPUT AREA.\nKPSHOBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.\n         L     R5,DGLSTPGM       POINT TO THE LAST PROGRAM NAME.\n         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?\n         BNE   *+8               NO, MUST BE PROGRAM LIST.\n         L     R5,DGLSTJOB       POINT TO THE LAST JOB NAME ENTRY.\n         BAS   R14,R5ACCESS\n         L     R1,LINES          GET THE SCREEN LINE COUNT.\n         AHI   R1,-3             GET THE SCROLL UP VALUE.\n         B     KPBKWDLP          GO DO IT.\nKPZMCHEK CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n         BE    KDGPGMLP          YES, DO NOT PERFORM SELECTION.\n         SLR   R15,R15           CLEAR FOR INSERT.\n         ICM   R15,1,INBUFF+1    GET THE CURSOR RELATIVE LINE NUMBER.\n         BNP   KDGPGMLP          ZERO, SO JUST SHOW PROGRAM NAME LIST.\n         B     KPZOOMNX          ZOOM IN ON CORRECT PROGRAM NAME.\nKPZOOMLP ICM   R5,15,DGPGMNXT    POINT TO THE NEXT PROGRAM NAME ENTRY.\n         BZ    KPSHOBTM          HANDLE END OF CHAIN IF ENCOUNTERED.\n         ST    R5,KITEMADR       THIS MAY BE THE SELECTED PROGRAM.\n         BAS   R14,R5ACCESS\n         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?\n         BNE   KPZOOMNX          NO, MUST BE PROGRAM LIST.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KPZOOMNX          NO, CONTINUE.\n         MVC   KJJOB,DGPGMNAM    COPY JOB NAME TO HOLDING AREA.\n         LA    R1,SELJOBNM       POINT TO DESIRED PREFIX.\n         ST    R1,WORK+4         SAVE PARAMETER LIST ITEM.\n         LA    R0,KJJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R0,R1,WORK2       SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KPZOOMLP          IF NOT EQUAL THEN ENTRY NOT SHOWN.\nKPZOOMNX BCT   R15,KPZOOMLP      CONTINUE SCROLLING TO CORRECT ENTRY.\n         MVC   KSHOWITM(8),DGPGMNAM  COPY THE SELECTED PROGRAM NAME.\n         B     KDISPJSE          GO SHOW EVENTS OF THIS PROGRAM.\nKPFWRDLP ICM   R5,15,DGPGMNXT    POINT TO THE NEXT PROGRAM NAME ENTRY.\n         BZ    KPSHOTOP          HANDLE END OF CHAIN IF ENCOUNTERED.\n         BAS   R14,R5ACCESS\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KPFWRDOK          NO, CONTINUE.\n         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BNE   KPFWRDOK          NO, CONTINUE.\n         MVC   KJJOB,DGPGMNAM    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KJJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KPFWRDLP          IF NOT EQUAL THEN GO AWAY.\nKPFWRDOK BCT   R1,KPFWRDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KPSHOWIT          GET FORMATTING.\nKPLOCTOP XC    KLOCNAME,KLOCNAME CLEAR THE PROGRAM NAME INPUT AREA.\nKPSHOTOP ST    R5,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?\n         BE    KPSHOBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.\n         L     R5,DGFSTPGM       POINT TO THE FIRST PGM NAME ENTRY.\n         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?\n         BNE   *+8               NO, MUST BE PROGRAM LIST.\n         L     R5,DGFSTJOB       POINT TO THE FIRST JOB NAME ENTRY.\n         BAS   R14,R5ACCESS\nKPSHOWIT SLR   R0,R0\n         ST    R0,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         ST    R0,KEVNTADR       CLEAR THE EVENT ENTRY POINTER.\n         ST    R0,KITEMADR       RESET TOP OF SCREEN ENTRY ADDRESS.\n         MVC   KSHOWITM,BLANKS   RESET SELECTED PROGRAM NAME.\nKDGPGMLP CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BNE   KDGPGMOK          NO, CONTINUE.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KDGPGMOK          NO, CONTINUE.\n         MVC   KJJOB,DGPGMNAM    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KJJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KDPJNEXT          IF NOT EQUAL THEN GO AWAY.\nKDGPGMOK ICM   R0,15,KITEMADR    TOP OF SCREEN ITEM KNOWN?\n         BNZ   *+8               YES, DO NOT OVERLAY THE ADDRESS.\n         ST    R5,KITEMADR       NO, THIS IS THE NEW TOP OF SCREEN.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-78(8,R2),DGPGMNAM   DISPLAY THE PROGRAM NAME.\n         L     R0,DGPGMJS#       LOAD THE PROGRAM EVENT COUNT.\n         LA    R1,LL-70(,R2)     POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         MVC   LL-61(17,R2),=CL17'STEP END EVENT(S)'\n         ICM   R9,15,DGPGMCPU    LOAD THE PROGRAM CPU TOTAL.\n         BZ    KDPCPUOK          ZERO SO LEAVE FIELD BLANK.\n         LA    R1,LL-43(,R2)     POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY THE TIME.\n         MVC   LL-33(3,R2),=CL3'CPU'\nKDPCPUOK CP    DGPGMXCP,PL1ZERO  IS THE PROGRAM EXCP TOTAL ZERO?\n         BE    KDPXCPOK          YES, SO LEAVE FIELD BLANK.\n         MVC   WORK,DGPGMXCP     COPY FIELD TO BE DISPLAYED.\n         LA    R1,LL-29(,R2)     POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7P      FORMAT AND DISPLAY NUMBER.\n         MVC   LL-20(5,2),=CL5'EXCPS'\nKDPXCPOK CP    DGPGMSRV,PL1ZERO  IS PROGRAM SERVICE UNIT TOTAL ZERO?\n         BE    KDPSRVOK          YES, SO LEAVE FIELD BLANK.\n         LA    R1,LL-14(,R2)     POINT TO DISPLAY AREA.\n         MVC   WORK,DGPGMSRV     COPY FIELD TO BE DISPLAYED.\n         BAS   R14,KJSHOW7P      FORMAT AND DISPLAY NUMBER.\n         MVC   LL-5(4,2),=CL4'S.U.'\n         CLI   LL-7(R2),C'0'     SCALING LABEL PRESENT?\n         BNL   KDPSRVOK          NO, LEAVE AS LOW INTENISTY.\n         MVC   0(LL-79,R2),HIGHX YES, SHOW IN HIGH INTENSITY.\nKDPSRVOK TR    LL-79(79,R2),XLATETBL    ENSURE NO UNPRINTABLES.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   KEODGDAT          YES, SO SHOW IT.\nKDPJNEXT ICM   R5,15,DGPGMNXT    POINT TO THE NEXT PROGRAM NAME ENTRY.\n         BZ    KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.\n         LA    R0,DGPGMLEN\n         BAS   R14,R5ACCESS\n         B     KDGPGMLP          PROCESS IT.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - STEP END EVENT LIST'\nKDISPJSE DS    0H                DISPLAY STEP END EVENT LIST.\n         MVI   ENDDEPTH+1,2      MAKE PF3/15 PRODUCE PROGRAM NAME LIST.\n         CLI   INBUFF,10         LEFT RIGHT SCROLL REQUEST?\n         BL    KJLROKAY          NO.\n         CLI   INBUFF,11\n         BH    KJLROKAY          NO.\n         ICM   R0,15,SCRLAMT     ANY SPECIFIED SCROLL AMOUNT?\n         BNZ   KJLRAMOK          YES, USE IT.\n         LA    R0,79             NO, DEFAULT TO A PAGE.\n         CLI   INCHARS+1,C'0'    SINGLE NUMERIC OPERAND OF '<' OR '>'?\n         BL    KJLRAMOK          NO, A PAGE IT IS.\n         NI    INCHARS+1,X'0F'   YES, CONVERT IT TO BINARY.\n         IC    R0,INCHARS+1      LOAD IT.\nKJLRAMOK CLI   INBUFF,10         SCROLL LEFT?\n         BNE   KJDIRNOK          NO.\n         LNR   R0,R0             YES, MAKE THE NUMBER NEGATIVE.\nKJDIRNOK AH    R0,KJSCROLL       GET THE NEW HORIZONTAL OFFSET.\n         BM    KJLRZERO          IF NEGATIVE FORCE LEFT MAXIMUM.\n         STH   R0,KJSCROLL       SAVE THE NEW HORIZONTAL OFFSET.\n         CH    R0,KJSEMAXR       TOO FAR RIGHT?\n         BNH   KJLROKAY          NO.\n         MVC   KJSCROLL,KJSEMAXR YES, PERFORM RIGHT MAX.\n         B     KJLROKAY\nKJLRZERO XC    KJSCROLL,KJSCROLL ZERO THE OFFSET FOR LEFT MAX.\nKJLROKAY CLC   DGPGMNAM,KSHOWITM ALREADY POSITIONED AT THE PROGRAM?\n         BE    KJSELIST          YES.\n         LA    R0,DGPGMLEN       NO, POSITION TO THAT PROGRAM NAME.\n         LA    R5,DGFSTPGM       POINT TO FIRST PGM NAME ENTRY ADDRESS.\n         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?\n         BNE   KJPOSILP          NO, MUST BE PROGRAM LIST.\n         LA    R5,DGFSTJOB       POINT TO FIRST JOB NAME ENTRY ADDRESS.\nKJPOSILP ICM   R5,15,DGPGMNXT    POINT TO THE PROGRAM NAME ENTRY.\n         BZ    KPLOCTOP          HANDLE END OF CHAIN IF ENCOUNTERED.\n         ST    R5,KITEMADR       THIS MAY BE THE SELECTED PROGRAM.\n         BAS   R14,R5ACCESS\n         CLC   DGPGMNAM,KSHOWITM FOUND THE PROGRAM NAME?\n         BNE   KJPOSILP          NO, CONTINUE CHAINING.\n         ST    R0,KEVNTADR       YES, DROP ANY RETAINED JSE ADDRESS.\nKJSELIST MVC   HEADING,HEADNGKJ  INITIALIZE HEADING.\n         MVI   KJFUDGE+1,0       ASSUME PROGRAM VIEW.\n         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?\n         BNE   KJHDKJOK          NO, MUST BE PROGRAM LIST.\n         MVC   HEADING+12(3),HEADING+30    C'JOB'.\n         MVI   KJFUDGE+1,8       THE JOB VIEW IS BEING USED.\nKJHDKJOK MVC   HEADING+16(8),KSHOWITM      SUPPLY PROGRAM NAME.\n         CLI   SELJOBNM,C' '     USING JOB NAME PREFIX SELECTION?\n         BNH   KJHDGFIX          NO.\n         LH    R1,JPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,KJHLDMSK       LOAD THE PREFIX INTO THE DISPLAY LINE.\nKJHDGFIX LH    R1,KJSCROLL       GET LEFT/RIGHT SCROLL OFFSET.\n         LA    R1,1(,R1)         SHOW LEFT-MOST COLUMN NUMBER.\n         CVD   R1,WORK\n         OI    WORK+7,X'0F'\n         UNPK  HEADING+63(3),WORK+6(2)\n         LA    R1,78(,R1)        SHOW RIGHT-MOST COLUMN NUMBER.\n         CVD   R1,WORK\n         OI    WORK+7,X'0F'\n         UNPK  HEADING+67(3),WORK+6(2)\n         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.\n         LA    R2,BUFFER         INITIALIZE BUFFER POINTER.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         MVI   LL-80(R2),X'F5'   TURQUOISE.                     (I3279)\n         MVI   KHDGCNT+1,2       UPDATE HEADING LINE COUNT.\n         ICM   R6,15,KEVNTADR    POINT TO FIRST EVENT TO DISPLAY.\n         BZ    KJSHOTOP          IF ZERO THEN SHOW FROM THE TOP.\n         LA    R0,DGJSELEN\n         BAS   R14,R6ACCESS\n         USING DGJSEVNT,R6\n         CLI   KSCRLAMT,X'7F'    BOTTOM REQUESTED?\n         BE    KJSHOBTM          YES, DIRECTLY ACCESS THE BOTTOM.\n         ICM   R8,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.\n         BZ    KJSHOWIT          ZERO SO START FORMATTING.\n         BP    KJFWRDLP          POSITIVE SO SCROLL FORWARD.\n         LPR   R8,R8             NEGATIVE SO GET COUNT TO SCROLL BACK.\nKJBKWDLP LH    R14,KJFUDGE\n         L     R6,DGJSEPRP(R14)  POINT TO THE PREVIOUS EVENT ENTRY.\n         LTR   R6,R6             END OF BACKWARD CHAIN?\n         BZ    KJSHOTOP          YES, SHOW FROM TOP.\n         ST    R6,KEVNTADR       THIS MAY BE THE NEW TOP OF SCREEN.\n         LA    R0,DGJSELEN\n         BAS   R14,R6ACCESS\nKJBKWDJB CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KJBKWDOK          NO, CONTINUE.\n         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BE    KJBKWDOK          YES, CONTINUE.\n         MVC   KJJOB,DGJSEJOB    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KJJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KJBKWDLP          IF NOT EQUAL THEN GO AWAY.\nKJBKWDOK BCT   R8,KJBKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KJSHOWIT          NOW AT THE CORRECT LOCATION.\nKJSHOBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.\n         L     R6,DGPGMJSL       POINT TO THE LAST STEP END EVENT.\n         LA    R0,DGJSELEN\n         BAS   R14,R6ACCESS\n         L     R8,LINES          GET THE SCREEN LINE COUNT.\n         AHI   R8,-4             GET THE SCROLL UP VALUE.\n         B     KJBKWDJB          GO DO IT.\nKJFWRDLP LH    R14,KJFUDGE\n         L     R6,DGJSEPRN(R14)  POINT TO THE NEXT EVENT ENTRY.\n         LTR   R6,R6             END OF CHAIN?\n         BZ    KJSHOTOP          YES, SHOW FROM TOP.\n         ST    R6,KEVNTADR       THIS MAY BE THE NEW TOP OF SCREEN.\n         LA    R0,DGJSELEN\n         BAS   R14,R6ACCESS\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KJFWRDOK          NO, CONTINUE.\n         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BE    KJFWRDOK          YES, CONTINUE.\n         MVC   KJJOB,DGJSEJOB    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KJJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KJFWRDLP          IF NOT EQUAL THEN GO AWAY.\nKJFWRDOK BCT   R8,KJFWRDLP       CONTINUE SCROLLING TO CORRECT ENTRY.\n         B     KJSHOWIT          GET FORMATTING.\nKJSHOTOP ST    R6,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?\n         BE    KJSHOBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.\n         L     R6,DGPGMJSF       POINT TO FIRST PROGRAM EVENT ENTRY.\n         ST    R6,KEVNTADR       THIS IS THE NEW TOP OF SCREEN.\nKJSHOWIT SLR   R0,R0\n         ST    R0,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.\n         SLR   R6,R6             INDICATE FIRST ADDRESS NEEDED.\n         MVC   KJSELINE(256),KJSUBHDG\n         MVC   KJSELINE+256(KJSELEN-256),KJSUBHDG+256\n         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BNE   KJSBHDOK          NO, MUST BE PROGRAM VIEW.\n         MVC   KJJOB,HEADNGKP+49 C'PROGRAM '.\n         B     KJLINEOK          DISPLAY SUB-HEADING.\nKJSBHDOK CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KJLINEOK          NO, DISPLAY SUB-HEADING.\n         MVC   KJJOB,STARS       YES, SHOW JOB NAME MASK.\n         LH    R1,JPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,KJSLDMSK       LOAD THE PREFIX INTO THE COLUMN HDR.\n         B     KJLINEOK          DISPLAY SUB-HEADING.\nKJGJSELP LA    R0,DGJSELEN\n         BAS   R14,R6ACCESS\n         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BE    KJGJSEOK          YES, CONTINUE.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   KJGJSEOK          NO, CONTINUE.\n         MVC   KJJOB,DGJSEJOB    COPY JOB NAME TO HOLDING AREA.\n         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.\n         LA    R0,KJJOB          POINT TO JOB NAME.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   KJGOTJSE          IF NOT EQUAL THEN GO AWAY.\nKJGJSEOK MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F4'   USE GREEN FOR COND CODE ZERO.  (I3279)\n         MVI   KJSELINE,C' '     BLANK DISPLAY LINE FORMATTING AREA.\n         MVC   KJSELINE+1(256),KJSELINE\n         MVC   KJSELINE+256+1(KJSELEN-1-256),KJSELINE+256\n         TM    KFLAGS,KDATEFMT   NO, USING YYMMDD DATE FORMAT?\n         BO    KJJSEYMD          YES.\n         MVC   WORK(9),EDKYYDDD  NO, SHOW THE JULIAN DATE.\n         ED    WORK(9),DGJSEDAT  DISPLAY THE DATE OF THE SMF EVENT.\n         MVC   KJDATE,WORK+3\n         MVC   WORK(9),EDKYYDDD  NO, SHOW THE JULIAN DATE.\n         ED    WORK(9),DGJSESTD  DISPLAY THE DATE OF THE STEP START.\n         MVC   KJSDATE,WORK+3\n         B     KJSEDTOK\nKJJSEYMD L     R1,DGJSEDAT       GET THE SMF EVENT JULIAN DATE.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7            CONVERT THE JULIAN DATE.\n         MVC   KJDATE(2),WORK    LOAD YY\n         MVC   KJDATE+2(2),WORK+3 AND MM\n         MVC   KJDATE+4(2),WORK+6 AND DD.\n         L     R1,DGJSESTD       GET THE STEP START JULIAN DATE.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7            CONVERT THE JULIAN DATE.\n         MVC   KJSDATE(2),WORK   LOAD YY\n         MVC   KJSDATE+2(2),WORK+3 AND MM\n         MVC   KJSDATE+4(2),WORK+6 AND DD.\nKJSEDTOK UNPK  KJTIME(3),DGJSETIM(2)\n         UNPK  KJTIME+3(3),DGJSETIM+1(2)\n         TR    KJTIME,HEX-C'0'\n         MVI   KJTIME+2,C':'     DISPLAY THE TIME OF THE SMF EVENT.\n         UNPK  KJSTIME(3),DGJSESIT(2)\n         UNPK  KJSTIME+3(3),DGJSESIT+1(2)\n         TR    KJSTIME,HEX-C'0'\n         MVI   KJSTIME+2,C':'    DISPLAY THE TIME OF THE STEP START.\n         MVC   KJSID,DGJSESID    SHOW SYSTEM IDENTIFIER.\n         MVC   KJSUBS,DGJSEWID   SHOW SUBSYSTEM IDENTIFIER.\n         MVC   KJJOB,DGJSEJOB    SHOW JOB NAME.\n         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BNE   *+10              NO, MUST BE PROGRAM VIEW.\n         MVC   KJJOB,DGJSEPGM    SHOW PROGRAM NAME INSTEAD.\n         MVC   KJJID,DGJSEJID    SHOW JES JOB NUMBER.\n         MVC   KJUSR,DGJSEUSR    SHOW JMRUSEID FIELD.\n         MVC   KJSTEP,DGJSESTP   SHOW JOB STEP NAME.\n         MVC   KJPSN,DGJSEPSN    SHOW JOB PROC STEP NAME.\n         MVC   KJPGMR,DGJSEUID   SHOW JOB PROC STEP NAME.\n         LH    R0,DGJSESTN       GET THE STEP NUMBER.\n         CVD   R0,WORK\n         MVC   KJSTN,ED3\n         ED    KJSTN,WORK+6      SHOW THE STEP NUMBER.\n         MVC   KJCLASS,DGJSECLS  SHOW THE JOB CLASS.\n         LH    R0,DGJSEPGN       GET THE PERFORMANCE GROUP NUMBER.\n         CVD   R0,WORK\n         MVC   KJPGN,ED3\n         ED    KJPGN,WORK+6      SHOW THE PERFORMANCE GROUP NUMBER.\n         MVC   KJUSER,DGJSERUD   RACF USERID.\n         MVC   KJGROUP,DGJSEGRP  RACF GROUP.\n         UNPK  KJDP(3),DGJSEPTY+1(2)\n         TR    KJDP,HEX-C'0'     SHOW DISPATCHING PRIORITY.\n         LH    R0,DGJSECMP       LOAD THE COMPLETION CODE.\n         LTR   R0,R0             HOW WAS IT?\n         BZ    KJCONDOK          CONDITION CODE WAS ZERO.\n         BP    KJCCNOT0          CONDITION CODE WAS GREATER THAN ZERO.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR ABNORMAL END.\n         MVI   LL-80(R2),X'F2'   RED.                           (I3279)\n         TM    DGJSECMP,X'C0'    SYSTEM ABEND CODE?\n         BO    KJSYSEND          YES.\n         SLL   R0,20             NO, SHIFT OUT IRRELEVANT BITS.\n         SRL   R0,20             SHIFT USER ABEND CODE BACK.\n         CVD   R0,WORK           SHOW THE DECIMAL USER ABEND CODE.\n         B     KJBIGCMP          SHOW FOUR DECIMAL DIGITS.\nKJCCNOT0 MVC   0(LL-79,R2),MEDX  \"MEDIUM\" INTENSITY FOR NON-ZERO CC.\n         MVI   LL-80(R2),X'F6'   YELLOW.                        (I3279)\nKJCONDOK CVD   R0,WORK           SHOW THE DECIMAL CONDITION CODE.\n         CH    R0,HUNDRED        COND CODE LESS THAN 100?\n         BL    KJCCSMAL          YES.\nKJBIGCMP MVC   KJCOMP,ED5Z\n         MVI   KJCOMP+1,X'21'\n         ED    KJCOMP,WORK+5\n         MVC   KJCOMP(5),KJCOMP+1\n         MVI   KJCOMP+5,C' '\n         TM    DGJSECMP,X'80'    USER ABEND CODE?\n         BZ    KJCOMPOK          NO.\n         MVI   KJCOMP,C'U'       YES, INDICATE USER ABEND CODE.\n         B     KJCOMPOK\nKJCCSMAL MVC   WORK(4),ED3Z\n         MVI   WORK+1,X'21'\n         ED    WORK(4),WORK+6\n         MVC   KJCOMP+2(2),WORK+2\n         B     KJCOMPOK\nKJSYSEND UNPK  KJCOMP+2(4),DGJSECMP(3)\n         TR    KJCOMP+2(3),HEX-C'0'\n         MVI   KJCOMP+5,C' '     ERASE GARBAGE.\n         MVI   KJCOMP+1,C'S'     INDICATE SYSTEM ABEND CODE.\nKJCOMPOK L     R9,DGJSELAP       GET JOB STEP ELAPSED TIME.\n         LA    R1,KJELAP+1       POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R9,DGJSETCN       GET TOTAL CONNECT TIME.\n         SLR   R8,R8             CLEAR FOR SHIFT AND DIVIDE.\n         SLDL  R8,7              CONVERT TO MICROSECONDS.\n         D     R8,TENGRAND       CONVERT TO CENTISECONDS.\n         LA    R1,KJCNCT         POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R9,DGJSECPT       GET STEP TCB TIME.\n         LA    R1,KJTCB          POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R9,DGJSECPS       GET STEP SRB TIME.\n         LA    R1,KJSRB          POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R9,DGJSEICU       GET INITIATOR TCB TIME.\n         LA    R1,KJTCBI         POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R9,DGJSEISB       GET INITIATOR SRB TIME.\n         LA    R1,KJSRBI         POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R9,DGJSEIIP       GET I/O INTERRUPT CPU TIME.\n         LA    R1,KJIOIT         POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R9,DGJSERCT       GET REGION CONTROL TASK CPU TIME.\n         LA    R1,KJRCTT         POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R9,DGJSEHPT       GET HIPERSPACE TRANSFER CPU TIME.\n         LA    R1,KJHPRT         POINT TO DISPLAY AREA.\n         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.\n         L     R0,DGJSERGN       LOAD THE REQUESTED REGION SIZE.\n         LA    R1,KJREGN         POINT TO DISPLAY AREA.\n         BAS   R14,KJSTORK       FORMAT AND DISPLAY STORAGE SIZE.\n         LH    R0,DGJSEPRI       LOAD THE PRIVATE AREA HIGH-WATER-MARK.\n         LA    R1,KJPRIV         POINT TO DISPLAY AREA.\n         BAS   R14,KJSTORK       FORMAT AND DISPLAY STORAGE H-W-M.\n         LH    R0,DGJSESYS       LOAD THE LSQA HIGH-WATER-MARK.\n         LA    R1,KJLSQA         POINT TO DISPLAY AREA.\n         BAS   R14,KJSTORK       FORMAT AND DISPLAY STORAGE H-W-M.\n         L     R0,DGJSEEUR       LOAD THE PRIVATE AREA HIGH-WATER-MARK.\n         LA    R1,KJEPRIV        POINT TO DISPLAY AREA.\n         BAS   R14,KJSTOR        FORMAT AND DISPLAY STORAGE H-W-M.\n         L     R0,DGJSEEAR       LOAD THE ELSQA HIGH-WATER-MARK.\n         LA    R1,KJELSQA        POINT TO DISPLAY AREA.\n         BAS   R14,KJSTOR        FORMAT AND DISPLAY STORAGE H-W-M.\n         L     R0,DGJSEDSV       LOAD THE DATA SPACE HIGH-WATER-MARK.\n         LA    R1,KJDSPC         POINT TO DISPLAY AREA.\n         BAS   R14,KJSTOR        FORMAT AND DISPLAY STORAGE H-W-M.\n         L     R0,DGJSETEP       GET EXCP COUNT.\n         LA    R1,KJEXCPS        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSETEP       GET EXCP COUNT.\n         LA    R1,KJEXCPS        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSETPT       GET TPUT COUNT.\n         LA    R1,KJTPUTS        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSETGT       GET TGET COUNT.\n         LA    R1,KJTGETS        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEPGI       GET PAGE-IN COUNT.\n         LA    R1,KJPGIN         POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEPGO       GET PAGE-OUT COUNT.\n         LA    R1,KJPGOT         POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEPSI       GET PAGES SWAPPED-IN COUNT.\n         LA    R1,KJSPGIN        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEPSO       GET PAGES SWAPPED-OUT COUNT.\n         LA    R1,KJSPGOT        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEVPI       GET VIO PAGE-IN COUNT.\n         LA    R1,KJVIOIN        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEVPO       GET VIO PAGE-OUT COUNT.\n         LA    R1,KJVIOOT        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEVPR       GET VIO PAGE RECLAIM COUNT.\n         LA    R1,KJVOIRC        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSECPI       GET COMMON PAGE-IN COUNT.\n         LA    R1,KJCMNIN        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSESRV       GET TOTAL SERVICE UNITS.\n         LA    R1,KJTOTSR        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSECSU       GET CPU SERVICE UNITS.\n         LA    R1,KJCPUSR        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSESRB       GET SRB SERVICE UNITS.\n         LA    R1,KJSRBSR        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEIOS       GET IOS SERVICE UNITS.\n         LA    R1,KJIOSSR        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEMSO       GET MSO SERVICE UNITS.\n         LA    R1,KJMSOSR        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSETRS       GET SRM TRANSACTION COUNT.\n         LA    R1,KJXACTS        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         L     R0,DGJSEVOL       GET NUMBER OF VOLUME MOUNTS.\n         LA    R1,KJMONTS        POINT TO DISPLAY AREA.\n         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.\n         ICM   R0,15,DGJSELAP    GET JOB STEP ELAPSED TIME.\n         BZ    KJLINEOK          AVOID S0C9 BY NOT DIVIDING BY ZERO.\n         L     R9,DGJSECPT       GET STEP TCB TIME.\n         A     R9,DGJSECPS       ADD STEP SRB TIME.\n         A     R9,DGJSEICU       ADD INITIATOR TCB TIME.\n         A     R9,DGJSEISB       ADD INITIATOR SRB TIME.\n         A     R9,DGJSEIIP       ADD I/O INTERRUPT CPU TIME.\n         A     R9,DGJSERCT       ADD REGION CONTROL TASK CPU TIME.\n         A     R9,DGJSEHPT       ADD HIPERSPACE TRANSFER CPU TIME.\n         M     R8,TENGRAND       SCALE FOR % AND + 2 DECIMAL PLACES.\n         DR    R8,R0             GET CPU/ELAPSED PERCENTAGE.\n         CVD   R9,WORK           FORMAT AND DISPLAY.\n         MVC   KJCPUPC,=X'402021204B2020'\n         ED    KJCPUPC,WORK+5\n         CHI   R9,2500           LESS THAN 25% CPU?\n         BL    KJLINEOK          YES, LEAVE COLOUR AS IS.\n         CLC   =AL4(30*6000),DGJSELAP STEP RAN IN UNDER A HALF-HOUR?\n         BH    KJLINEOK          YES, LEAVE COLOUR AS IS.\n         OI    LL-80(R2),X'F1'   NO, ENABLE BLUE COLOUR TO HIGHLIGHT.\nKJLINEOK TR    KJSELINE(256),XLATETBL     ENSURE NO UNPRINTABLES.\n         TR    KJSELINE+256(KJSELEN-256),XLATETBL\n         MVI   KJSEP01,X'3B'     SEPARATE DISPLAY AREAS.\n         MVI   KJSEP02,X'3B'\n         MVI   KJSEP03,X'3B'\n         MVI   KJSEP04,X'3B'\n         MVI   KJSEP05,X'3B'\n         MVI   KJSEP06,X'3B'\n         MVI   KJSEP07,X'3B'\n         MVI   KJSEP08,X'3B'\n         MVI   KJSEP09,X'3B'\n         MVI   KJSEP10,X'3B'\n         MVI   KJSEP11,X'3B'\n         MVI   KJSEP12,X'3B'\n         MVI   KJSEP13,X'3B'\n         MVI   KJSEP14,X'3B'\n         MVI   KJSEP15,X'3B'\n         MVI   KJSEP16,X'3B'\n         MVI   KJSEP17,X'3B'\n         MVI   KJSEP18,X'3B'\n         MVI   KJSEP19,X'3B'\n         MVI   KJSEP20,X'3B'\n         MVI   KJSEP21,X'3B'\n         MVI   KJSEP22,X'3B'\n         MVI   KJSEP23,X'3B'\n         MVI   KJSEP24,X'3B'\n         MVI   KJSEP25,X'3B'\n         MVI   KJSEP26,X'3B'\n         MVI   KJSEP27,X'3B'\n         MVI   KJSEP28,X'3B'\n         MVI   KJSEP29,X'3B'\n         MVI   KJSEP30,X'3B'\n         MVI   KJSEP31,X'3B'\n         MVI   KJSEP32,X'3B'\n         MVI   KJSEP33,X'3B'\n         MVI   KJSEP34,X'3B'\n         MVI   KJSEP35,X'3B'\n         MVI   KJSEP36,X'3B'\n         MVI   KJSEP37,X'3B'\n         MVI   KJSEP38,X'3B'\n         MVI   KJSEP39,X'3B'\n         MVI   KJSEP40,X'3B'\n         MVI   KJSEP41,X'3B'\n         MVI   KJSEP42,X'3B'\n         MVI   KJSEP43,X'3B'\n         MVI   KJSEP44,X'3B'\n         MVI   KJSEP45,X'3B'\n         MVI   KJSEP46,X'3B'\n         MVI   KJSEP47,X'3B'\n         MVI   KJSEP48,X'3B'\n         MVI   KJSEP49,X'3B'\n         MVI   KJSEP50,X'3B'\n         LH    R1,KJSCROLL       LOAD LEFT/RIGHT SCROLL OFFSET.\n         LA    R1,KJSELINE(R1)   POINT TO START OF LINE TO BE LOADED.\n         MVC   LL-79(79,R2),0(R1) LOAD DISPLAY LINE.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   KEODGDAT          YES, SO SHOW IT.\n         LTR   R6,R6             POINTING TO VALID JSE?\n         BNZ   KJGOTJSE          YES.\n         ICM   R6,15,KEVNTADR    POINT TO THE FIRST ADDRESS POINTER.\n         B     KJNXTJSE\nKJGOTJSE LH    R14,KJFUDGE\n         L     R6,DGJSEPRN(R14)  POINT TO NEXT STEP END EVENT ENTRY.\n         LTR   R6,R6\nKJNXTJSE BNZ   KJGJSELP          PROCESS IT.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LR    R1,R2             POINT TO THIS LINE.\n         LA    R0,LL             GET THE LINE LENGTH.\n         SLR   R1,R0             POINT TO THE PREVIOUS LINE.\n         CLI   2(R1),X'00'       ANY EXTENDED HIGHLIGHTING ALREADY?\n         BNE   KJLSTLIN          YES, DO NOT CHANGE IT.\n         MVI   2(R1),X'F4'       UNDERSCORE FOR PREVIOUS LINE.  (I3279)\n         MVI   5(R1),X'C4'       UNDERLINE FOR PREVIOUS LINE.   (F9526)\nKJLSTLIN MVI   2(R2),X'F4'       UNDERSCORE FOR THIS LINE.      (I3279)\n         MVI   LL-80(R2),X'F5'   TURQUOISE.                     (I3279)\n         MVC   LL-58(36,R2),=CL36'HIT PF3/15 TO RETURN TO PROGRAM LIST'\n         LR    R1,R2             REMEMBER ADDRESS OF THIS LINE.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?\n         BNE   KEODGDAT          NO, SO SHOW SYSTEM SUMMARY LINE.\n         MVC   LL-59(24,R1),LL-58(R1)\n         MVC   LL-35(8,R1),KJSUBHDG+23        C'JOB NAME'.\n         B     KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.\n         SPACE\nKJSHOW7  DS    0H                FORMAT NUMBER IN SEVEN BYTES.\n         CVD   R0,WORK           GET NUMBER IN PACKED DECIMAL.\nKJSHOW7P OC    WORK(4),WORK      IS SEVEN DIGITS A BIG ENOUGH FIELD?\n         BNZ   KJSCALE7          NO.\n         MVC   0(8,R1),ED7Z      YES, LOAD EDIT MASK.\n         ED    0(8,R1),WORK+4    LOAD INTEGER.\n         BR    R14               RETURN TO CALLER.\nKJSCALE7 ICM   R15,15,=C'TGMK'   LOAD SCALING LABELS.\nKJSCALP  SRP   WORK,64-3,0       DIVIDE BY 1000 AND TRUNCATE.\n         OC    WORK(5),WORK      IS FIVE DIGITS A BIG ENOUGH FIELD NOW?\n         BZ    KJSCALOK          YES.\n         SRL   R15,8             NO, USE NEXT SCALING LABEL.\n         B     KJSCALP           CONTINUE SCALING.\nKJSCALOK MVC   1(6,R1),ED5       LOAD EDIT MASK.\n         ED    1(6,R1),WORK+5    LOAD TRUNCATED NUMBER.\n         STC   R15,7(,R1)        LOAD SCALING LABEL.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nKJHLDMSK MVC   HEADING+44(0),SELJOBNM           <<< EXECUTED >>>\nKJSLDMSK MVC   KJJOB(0),SELJOBNM                <<< EXECUTED >>>\n         SPACE\nKJSTOR   DS    0H                FORMAT STORAGE AMOUNT IN 7 BYTES.\n         SRL   R0,10             CONVERT FROM BYTES TO KILOBYTES.\nKJSTORK  DS    0H                FORMAT STORAGE AMOUNT IN 7 BYTES.\n         LTR   R0,R0             ANY STORAGE?\n         BZR   R14               NO, LEAVE FIELD BLANK.\n         ICM   R15,15,=C'TGMK'   YES, LOAD SCALING LABELS.\nKJSTORLP CVD   R0,WORK           DIVIDE BY 1000 AND TRUNCATE.\n         OC    WORK(5),WORK      IS FIVE DIGITS A BIG ENOUGH FIELD NOW?\n         BZ    KJSTOROK          YES.\n         SRL   R15,8             NO, USE NEXT SCALING LABEL.\n         SRL   R0,10             DIVIDE QUANTITY BY 1024.\n         B     KJSTORLP          CONTINUE SCALING.\nKJSTOROK MVC   0(6,R1),ED5       LOAD EDIT MASK.\n         ED    0(6,R1),WORK+5    LOAD TRUNCATED NUMBER.\n         STC   R15,6(,R1)        LOAD SCALING LABEL.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nKJPUTIME DS    0H                DISPLAY TIME AS SS.SS OR HH:MM:SS.\n         LTR   R9,R9             ANY TIME MEASURED?\n         BZR   R14               NO, LEAVE BLANK AND RETURN TO CALLER.\n         SLR   R8,R8             CLEAR FOR DIVIDE.\n         D     R8,AHUNDRED       GET SECONDS AND CENTISECONDS.\n         C     R9,=F'60'         LESS THAN ONE MINUTE?\n         BL    KJPUTSEC          YES, JUST SHOW SECONDS.\n         SLR   R8,R8             CLEAR FOR DIVIDE.\n         D     R8,=F'60'\n         CVD   R8,WORK           SHOW SECONDS.\n         OI    WORK+7,X'0F'\n         UNPK  7(2,R1),WORK+6(2)\n         MVI   6(R1),C':'\n         SLR   R8,R8             CLEAR FOR DIVIDE.\n         D     R8,=F'60'\n         CVD   R8,WORK           SHOW MINUTES.\n         OI    WORK+7,X'0F'\n         UNPK  4(2,R1),WORK+6(2)\n         MVI   3(R1),C':'\n         CVD   R9,WORK           SHOW HOURS.\n         MVC   WORK(4),ED3\n         ED    WORK(4),WORK+6\n         MVC   0(3,R1),WORK+1\n         BR    R14               RETURN TO CALLER.\nKJPUTSEC MVI   7(R1),X'A2'       INDICATE SECONDS.\n         CVD   R8,WORK           SHOW CENTISECONDS.\n         OI    WORK+7,X'0F'\n         UNPK  5(2,R1),WORK+6(2)\n         MVI   4(R1),C'.'\n         CVD   R9,WORK           SHOW WHOLE SECONDS.\n         MVC   WORK(4),ED3\n         ED    WORK(4),WORK+6\n         MVC   1(3,R1),WORK+1\n         BR    R14               RETURN TO CALLER.\n         SPACE\n         DROP  R10,R6,R5         KDISPPGM, DGJSEVNT, DGPROGRM.\n         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CONSTANTS AND VARIABLES'\nKJSCROLL DC    H'0'              LEFT/RIGHT SCROLL OFFSET.\nKJFUDGE  DC    H'0'              0 FOR PROGRAM VIEW, 8 FOR JOB VIEW.\nKJSEMAXR DC    AL2(KJSELEN-79)   MAXIMUM SCROLL RIGHT OFFSET.\nHEADNGKP DC    CL71'  PLACE CURSOR ON LINE AND HIT ENTER TO SELECT A PR+\n               OGRAM FROM THE LIST '\nHEADNGKJ DC    CL71' EVENTS FOR PGM=$$$$$$$$      JOB-NAME-MASK=*******+\n               *      COLS 001-079 '\nKJSUBHDG DC    C' DATE  TIME |SID |SUBS|JOB NAME|JES JOB#|STEPNAME|PROC+\n               STEP|PROGRAMMER NAME     |STP|USER ID |GROUP ID|C|PGN| S+\n               TEP START | ELAPSED |DP| COMP |TCB-TIME|SRB-TIME|INIT-TC+\n               B|INIT-SRB|I/O-I-TM|RCT-TIME|HPRSP-TM|CONCT-TM| REGIO'\n         DC    C'N|PVT<16'\n         DC    C'M|  LSQA |PVT>16M| ELSQA |DATASPC|PAGE-IN|PAGEOUT|SWPP+\n               GIN|SWPGOUT| VIO-IN|VIO-OUT|VIORCLM|CMNPGIN| EXCPS | TPU+\n               TS | TGETS |TRNSACT|TOT-SRV|CPU-SRV|SRB-SRV|IOS-SRV|MSO-+\n               SRV| CPU% | MOUNTS|JMRUSEID'\nKJSELINE DS    0C\nKJDATE   DC    CL6'YY.DDD',CL1' '\nKJTIME   DC    CL5'HH:MM'\nKJSEP01  DC    CL1'|'\nKJSID    DC    CL4' '\nKJSEP02  DC    CL1'|'\nKJSUBS   DC    CL4' '\nKJSEP03  DC    CL1'|'\nKJJOB    DC    CL8' '\nKJSEP04  DC    CL1'|'\nKJJID    DC    CL8' '\nKJSEP05  DC    CL1'|'\nKJSTEP   DC    CL8' '\nKJSEP06  DC    CL1'|'\nKJPSN    DC    CL8' '\nKJSEP07  DC    CL1'|'\nKJPGMR   DC    CL20' '\nKJSEP08  DC    0CL1'|'\nKJSTN    DC    CL4' '\nKJSEP09  DC    CL1'|'\nKJUSER   DC    CL8' '\nKJSEP10  DC    CL1'|'\nKJGROUP  DC    CL8' '\nKJSEP11  DC    CL1'|'\nKJCLASS  DC    CL1' '\nKJSEP12  DC    0CL1'|'\nKJPGN    DC    CL4' '\nKJSEP13  DC    CL1'|'\nKJSDATE  DC    CL6'YY.DDD',CL1' '\nKJSTIME  DC    CL5'HH:MM'\nKJSEP14  DC    0CL1'|'\nKJELAP   DC    CL10' '\nKJSEP15  DC    CL1'|'\nKJDP     DC    CL2' '\nKJSEP16  DC    CL1'|'\nKJCOMP   DC    CL6' '\nKJSEP17  DC    0CL1'|'\nKJTCB    DC    CL9' '\nKJSEP18  DC    0CL1'|'\nKJSRB    DC    CL9' '\nKJSEP19  DC    0CL1'|'\nKJTCBI   DC    CL9' '\nKJSEP20  DC    0CL1'|'\nKJSRBI   DC    CL9' '\nKJSEP21  DC    0CL1'|'\nKJIOIT   DC    CL9' '\nKJSEP22  DC    0CL1'|'\nKJRCTT   DC    CL9' '\nKJSEP23  DC    0CL1'|'\nKJHPRT   DC    CL9' '\nKJSEP24  DC    0CL1'|'\nKJCNCT   DC    CL9' '\nKJSEP25  DC    CL1'|'\nKJREGN   DC    CL7' '\nKJSEP26  DC    CL1'|'\nKJPRIV   DC    CL7' '\nKJSEP27  DC    CL1'|'\nKJLSQA   DC    CL7' '\nKJSEP28  DC    CL1'|'\nKJEPRIV  DC    CL7' '\nKJSEP29  DC    CL1'|'\nKJELSQA  DC    CL7' '\nKJSEP30  DC    CL1'|'\nKJDSPC   DC    CL7' '\nKJSEP31  DC    0CL1'|'\nKJPGIN   DC    CL8' '\nKJSEP32  DC    0CL1'|'\nKJPGOT   DC    CL8' '\nKJSEP33  DC    0CL1'|'\nKJSPGIN  DC    CL8' '\nKJSEP34  DC    0CL1'|'\nKJSPGOT  DC    CL8' '\nKJSEP35  DC    0CL1'|'\nKJVIOIN  DC    CL8' '\nKJSEP36  DC    0CL1'|'\nKJVIOOT  DC    CL8' '\nKJSEP37  DC    0CL1'|'\nKJVOIRC  DC    CL8' '\nKJSEP38  DC    0CL1'|'\nKJCMNIN  DC    CL8' '\nKJSEP39  DC    0CL1'|'\nKJEXCPS  DC    CL8' '\nKJSEP40  DC    0CL1'|'\nKJTPUTS  DC    CL8' '\nKJSEP41  DC    0CL1'|'\nKJTGETS  DC    CL8' '\nKJSEP42  DC    0CL1'|'\nKJXACTS  DC    CL8' '\nKJSEP43  DC    0CL1'|'\nKJTOTSR  DC    CL8' '\nKJSEP44  DC    0CL1'|'\nKJCPUSR  DC    CL8' '\nKJSEP45  DC    0CL1'|'\nKJSRBSR  DC    CL8' '\nKJSEP46  DC    0CL1'|'\nKJIOSSR  DC    CL8' '\nKJSEP47  DC    0CL1'|'\nKJMSOSR  DC    CL8' '\nKJSEP48  DC    0CL1'|'\nKJCPUPC  DC    CL7' '\nKJSEP49  DC    0CL1'|'\nKJMONTS  DC    CL8' '\nKJSEP50  DC    CL1'|'\nKJUSR    DC    CL8' '\nKJSELEN  EQU   *-KJSELINE\n         SPACE\n         LTORG\n         SPACE\n         DROP  R11,R4            KNOWSHOW, DGBASE.\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCMT": {"ttr": 8197, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\x0b\\x00\\x00\\x00\\x94\\x14O\\x01\\x05\\x02o#%\\x02V\\x01\\xd1\\x00s\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "52.11", "flags": 0, "createdate": "1994-05-24T00:00:00", "modifydate": "2005-01-26T23:25:00", "lines": 598, "newlines": 465, "modlines": 115, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD\n         TITLE 'SUPERVISOR CALL TABLE DISPLAY SUBROUTINE'\n         USING SVCLIST,R11,R10\nSVCLIST  DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         L     R5,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R5\n         L     R5,CVTABEND       POINT TO THE SCVT.\n         DROP  R5                CVT.\n         USING SCVTSECT,R5\n         L     R5,SCVTSVCT       POINT TO THE SVC TABLE.\n         DROP  R5                SCVTSECT.\n         ST    R5,MAINTABL       SAVE THE MAIN TABLE'S ADDRESS.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   WINTOP,TTOPLINE   SET TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.\n         ICM   R0,15,ESRSVCNO    LOOKING AT AN ESR TABLE?\n         BNZ   SVPRECMD          YES, ALREADY INITIALIZED SO PROCEED.\n         ST    R5,CRNTABLE       START OFF WITH THE MAIN TABLE.\n         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\nSVPRECMD MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' ADJUST ANY COMMAND INPUT.\n         B     CMDSCANT          PROCESS IT.\n         SPACE\nREDOSVCS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   8(R2),X'F3'       SHOW HEADING IN PINK.          (I3279)\n         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         MVI   LL-79(R2),C' '    BLANK DISPLAY LINE.\n         MVC   LL-78(SVDL-1,R2),LL-79(R2)\n         MVC   LL-79(79,R2),HEADINGT     LOAD DISPLAYABLE\n         TR    LL-79(79,R2),XLATETBL          HEADING.\n         LA    R2,SVLL(,R2)      POINT PAST HEADING.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVC   LL-79(SVDL,R2),SVCTCOLS\n         TR    LL-79(SVDL,R2),XLATETBL\n         CLI   ENDDEPTH+1,0      SHOWING MAIN SVC TABLE?\n         BE    SVCMNHDG          YES.\n         MVC   LL-78(6,R2),=C'ES# EC'\n         MVC   SVIAESR(SVDL-SVIAESR,R2),SVCTDTLS\n         B     SVCHDGOK          HEADING NOW CORRECT.\nSVCMNHDG TM    OSBITS,X'13'      MVS?\n         BO    SVCHDGOK          YES, HEADING IS CORRECT.\n         MVC   SVIAMSP(SVDL-SVIAMSP,R2),SVCTDTLS\nSVCHDGOK LA    R2,SVLL(,R2)      ADJUST BUFFER POINTER.\n         LA    R1,2\n         ST    R1,WINLINES       INITIALIZE LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         LM    R4,R5,TENTRYCT    GET ENTRY COUNT AND TABLE ADDRESS.\n         SLR   R3,R3             GET THE FIRST ENTRY NUMBER.\n         USING SVCENTRY,R5\nNEXTSVC  MVC   0(LL-79,R2),LOWX  LOW INTENSITY AND GREEN.\n         MVI   LL-80(R2),X'F4'   GREEN.                         (I3279)\n         MVI   LL-79(R2),C' '    BLANK DISPLAY LINE.\n         MVC   LL-78(SVDL-1,R2),LL-79(R2)\n         CVD   R3,WORK\n         CLC   CRNTABLE,MAINTABL IS THIS THE MAIN SVC TABLE?\n         BE    SVCNOOK           YES, GET THE RIGHT SVC NUMBER.\n         L     R0,ESRSVCNO       NO, GET THE ESR SVC NUMBER.\n         CVD   R0,WORK\nSVCNOOK  MVC   LL-79(4,R2),ED3   SHOW SVC NUMBER IN DECIMAL.\n         ED    LL-79(4,R2),WORK+6\n         STC   R3,WORK\n         UNPK  LL-74(3,R2),WORK(2)\n         TR    LL-74(2,R2),HEX-C'0'\n         MVI   LL-72(R2),C' '    SHOW SVC NUMBER IN HEXADECIMAL.\n         UNPK  LL-71(9,R2),SVCEP(5)  (MIGHT BE ESR ENTRY CODE.)\n         TR    LL-71(8,R2),HEX-C'0'\n         MVI   LL-63(R2),C' '    SHOW AMODE AND ENTRY POINT ADDRESS.\n         TM    SVCATTR1,SVCTP34  CHECK THE FIRST TWO TYPE BITS.\n         BZ    TYPE1OR6          ZERO SO IT IS A TYPE 1 OR TYPE 6.\n         BNO   SVCNOT34          NOT AN LPA TYPE.\n         MVC   LL-62(3,R2),=C'3/4'   YES, IT IS A TYPE 3 OR TYPE 4.\n         B     SVCTYPED          NOW HAVE THE SVC TYPE.\nSVCNOT34 MVI   LL-61(R2),C'2'    ASSUME A TYPE 2.\n         TM    SVCATTR1,SVCTP2   TEST THIS ASSUMPTION.\n         BO    SVCTYPED          CORRECT.\n         MVI   LL-61(R2),C'5'    ER, A TYPE 5 PERHAPS?\n         B     SVCTYPED          NOW HAVE THE SVC TYPE.\nTYPE1OR6 MVI   LL-61(R2),C'1'    ASSUME A TYPE 1.\n         TM    SVCATTR1,SVCTP6   TEST THIS ASSUMPTION.\n         BZ    SVCTYPED          CORRECT.\n         MVI   LL-61(R2),C'6'    IT IS A TYPE 6 AFTER ALL.\nSVCTYPED TM    SVCATTR1,SVCASF   CAN THE SVC BE ASSISTED?\n         BZ    SVCASIST          NO.\n         OI    LL-80(R2),X'01'   YES, ENABLE BLUE COMPONENT.    (I3279)\n         MVI   4(R2),X'F4'       MEDIUM INTENSITY FOR ASSIST ALLOWABLE.\nSVCASIST TM    SVCATTR1,SVCNP    NON-PREEMPTIVE SVC?\n         BZ    SVCPREMP          NO.\n         MVI   2(R2),X'F2'       YES, SET REVERSE VIDEO.        (I3279)\n         MVI   5(R2),X'50'       ALSO SET REVERSE VIDEO.        (F9526)\nSVCPREMP TM    SVCATTR1,SVCAPF   IS APF AUTHORIZATION REQUIRED FOR USE?\n         BZ    SVCAPFED          NO.\n         MVC   LL-58(3,R2),=C'YES'\n         MVI   4(R2),X'F8'       HIGH INTENSITY FOR APF.\n         OI    LL-80(R2),X'02'   ENABLE RED COMPONENT OF COLOR. (I3279)\nSVCAPFED TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?\n         BZ    SVCESRED          NO.\n         MVC   LL-54(3,R2),=C'YES'\nSVCESRED LA    R6,SVCLOCKS       POINT TO SVC LOCK FLAGS.\n         TM    OSBITS,X'13'      MVS?\n         BNO   SVLOCKF4          NO, IT MUST BE MSP.\n         TM    SVCATTR3,SVCAR    CAN SVC BE ISSUED IN AR MODE?\n         BZ    SVLOCKOK          NO.\n         MVC   LL-50(2,R2),=C'OK'\n         B     SVLOCKOK\nSVLOCKF4 BCTR  R6,0              NO, ADJUST FOR MSP.\nSVLOCKOK TM    0(R6),SVCLL       LOCAL LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   LL-47(R2),C'L'    YES.\n         TM    0(R6),SVCCMS      CMS LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   LL-46(R2),C'C'    YES.  (CROSS MEMORY SERVICES.)\n         TM    0(R6),SVCOPT      OPT (SRM) LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   LL-45(R2),C'O'    YES.  (SYSTEM RESOURCE MANAGEMENT.)\n         TM    0(R6),SVCALLOC    SALLOC LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   LL-44(R2),C'S'    YES.  (SPACE ALLOCATION.)\n         TM    0(R6),SVCDISP     DISP LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   LL-43(R2),C'D'    YES.  (DISPATCHER.)\n         LA    R15,SVIAESR(,R2)  POINT TO EYE-CATCHER DISPLAY AREA.\n         LA    R6,SVILESR        LOAD MAXIMUM DETAILS LENGTH.\n         CLC   CRNTABLE,MAINTABL STILL USING THE ACTUAL SVC TABLE?\n         BNE   SVCCHARS          NO, DON'T HAVE THE MACRO DETAILS.\n         CH    R3,=Y(MAXMACRO)   IS THERE A MACRO FOR THIS SVC?\n         BH    GOTMACRO          NO.\n         LR    R7,R3             YES, GET SVC NUMBER.\n         SLL   R7,4              MULTIPLY BY SIXTEEN.\n         LA    R9,SVCMACRO(R7)   POINT TO MACRO NAME.\n         MVC   LL-41(16,R2),0(R9) LOAD MACRO NAME(S).\nGOTMACRO LA    R15,SVIAMSP(,R2)  POINT TO EYE-CATCHER DISPLAY AREA.\n         LA    R6,SVILMSP        LOAD MAXIMUM DETAILS LENGTH.\n         TM    OSBITS,X'13'      MVS?\n         BNO   SVCCHARS          NO, GET MSP EYE-CATCHER.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTABEND       POINT TO THE SCVT.\n         DROP  R1                CVT.\n         USING SCVTSECT,R1\n         L     R1,SCVTSVCR       POINT TO THE SVC UPDATE TABLE.\n         DROP  R1                SCVTSECT.\n         LR    R0,R3             COPY THE SVC NUMBER.\n         SLL   R0,3              GET EIGHT TIMES SVC NUMBER.\n         ALR   R1,R0\n         SLL   R0,1              GET SIXTEEN TIMES SVC NUMBER.\n         ALR   R1,R0             POINT TO THE RIGHT UPDATE ENTRY.\n         USING SVCURT,R1\n         ICM   R0,3,SVCURCNT     GET THE UPDATE COUNT.\n         BZ    SVCUPDOK          ZERO ENTRY.\n         CVD   R0,WORK\n         MVC   LL-7(6,R2),ED5    SHOW THE UPDATE COUNT.\n         ED    LL-7(6,R2),WORK+5\n         CLI   22(R1),C' '       RELATED TO PARMLIB MEMBER?\n         BNH   SVCPRMOK          NO.\n         MVC   LL-24(6,R2),=C'IEASVC'\n         MVC   LL-18(2,R2),SVCURSX YES, SHOW MEMBER NAME.\nSVCPRMOK UNPK  LL(9,R2),SVCURNEW(5) SHOW NEW ENTRY POINT\n         UNPK  LL+9(9,R2),SVCUROLD(5) AND OLD ENTRY.\n         UNPK  LL+18(9,R2),SVCUROLD+4(5)\n         TR    LL(26,R2),HEX-C'0'\n         MVI   LL+8(R2),C' '\n         MVI   LL+17(R2),C'-'\n         MVI   LL+26(R2),C' '\n         TM    19(R1),X'0F'      EXPECTED SIGN IN DATE SLOT?\n         BNO   SVCUPDOK          NO, PROBABLY DATE FIELD IS ZERO.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         L     R1,SVCURDAT       LOAD CVTDATE OF UPDATE EVENT.\n         DROP  R1                SVCURT.\n         BASR  R14,R7\n         MVC   LL-15(8,R2),WORK  SHOW CHANGE YY-MM-DD.\nSVCUPDOK LA    R15,SVIAMVS(,R2)  POINT TO EYE-CATCHER DISPLAY AREA.\n         LA    R6,SVILMVS        LOAD MAXIMUM DETAILS LENGTH.\nSVCCHARS L     R7,SVCEP          GET ENTRY POINT ADDRESS.\n         LA    R7,0(,R7)         ENSURE ADDRESS FORMAT.\n         LTR   R7,R7\n         BNP   EOSVDTLS          IGNORE IF ZERO.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    TMODEOK1          NO.\n         LR    R9,R15            YES, SAVE REGISTER.\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         LR    R15,R9            RESTORE REGISTER.\n         OI    MODESW2,KEY0      REMEMBER KEY ZERO STATUS.\nTMODEOK1 LA    R9,4              REMEMBER LENGTH OF BRANCH INSTRUCTION.\n         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?\n         BZ    SVNUCTST          NO.\n         TM    OSBITS,X'13'      YES, IS THIS MVS?\n         BNO   EOSVDTLS          NO, NO ESR LABEL FOR MSP.\n         MVC   0(4,R15),0(R7)    YES, LOAD ESR AND TYPE LABEL.\n         TR    0(4,R15),SVCXLATE JUST IN CASE THINGS CHANGE.\n         B     EOSVDTLS          THAT'S ALL THERE IS.\nSVNUCTST TM    OSBITS,X'13'      IS THIS MVS?\n         BNO   SVBRANCH          NO, NO NUCLEUS MAP FOR MSP.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTNUCMP       POINT TO THE NUCLEUS MAP.\n         DROP  R1                CVT.\n         LR    R0,R1             COPY THIS ADDRESS.\n         A     R0,12(,R1)        ADD SIZE TO POINT PAST NUCLEUS MAP.\nSVNUCELP LA    R1,16(,R1)        POINT TO FIRST/NEXT ENTRY.\n         CR    R1,R0             GONE PAST NUCLEUS MAP?\n         BNL   SVBRANCH          YES, MUST BE ELPA TYPE SVC.\n         C     R7,8(,R1)         COMPARE ADDRESS WITH THIS ENTRY.\n         BL    SVBRANCH          PAST IT - MUST BE LPA TYPE SVC.\n         BH    SVNUCELP          NOT UP TO IT YET.\n         MVC   0(8,R15),0(R1)    LOAD IN ENTRY POINT NAME.\n         CLC   =C'ERROR',3(R15)  UNUSED SVC?\n         BE    EOSVDTLS          YES, LEAVE OBVIOUS NAME SHOWING.\n         CLC   =C'RETRN',3(R15)  DUMMY SVC?\n         BE    EOSVDTLS          YES, LEAVE OBVIOUS NAME SHOWING.\n         TM    12(R1),X'10'      JUST AN ENTRY POINT?\n         BO    SVBRANCH          NO, FULLY-FLEDGED CSECT.\n         LA    R0,16             GET LENGTH OF NUCLEUS MAP ENTRY.\nSVSECTLP SLR   R1,R0             POINT TO PREVIOUS ENTRY.\n         LR    R14,R7            COPY ENTRY POINT ADDRESS.\n         L     R7,8(,R1)         GET PRECEDING ENTRY POINT ADDRESS.\n         TM    12(R1),X'10'      BACK TO OWNING CSECT YET?\n         BZ    SVSECTLP          NO, BACK UP ANOTHER ONE.\n         CLI   0(R7),C'I'        DOES CSECT START WITH IBM EYE-CATCHER?\n         BNE   SVBRANCH          NO, FULLY-FLEDGED CSECT.\n         LR    R1,R14            YES, POINT TO FIRST NON-CSECT EP.\n         SR    R1,R7             SET UPPER LENGTH TO NON-TEXT.\n         AHI   R7,-4             POINT TO FOUR BYTES BEFORE IT.\n         B     DOSVCTXT          LOAD IT.\nSVBRANCH CLC   0(2,R7),=X'47F0'  FOUND A BRANCH?\n         BE    MVICTCHR          YES, GO LOAD EYE-CATCHER.\n         CLI   0(R7),X'05'       FOUND A BALR FOR ADDRESSABLILITY?\n         BE    SVBASBAL          YES.\n         CLI   0(R7),X'06'       DECREMENTING BASE REGISTER?\n         BE    SVBCTR            YES.\n         CLI   0(R7),X'07'       FOUND AN BCR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'0D'       FOUND A BASR FOR ADDRESSABLILITY?\n         BE    SVBASBAL          YES.\n         CLI   0(R7),X'12'       FOUND AN LTR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'17'       FOUND AN XR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'18'       FOUND AN LR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'1B'       FOUND AN SR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'1F'       FOUND AN SLR?\n         BE    SVFDLREG          YES.\n         B     LASTGASP          FORGET THE EYE-CATCHER.\nSVBASBAL LA    R7,2(,R7)         YES, POINT PAST BASR OR BALR.\n         LA    R9,4              RESET BASE REG. OFFSET ACCUMULATOR.\n         B     SVBRANCH          TRY FOR BRANCH AGAIN.\nSVBCTR   TM    1(R7),X'0F'       IS R2 OF BCTR ZERO?\n         BNZ   LASTGASP          NO, FORGET EYE-READABLE DETAILS.\n         LA    R9,1(,R9)         INCREMENT BASE OFFSET ACCUMULATOR.\nSVFDLREG LA    R9,2(,R9)         ADJUST BASE OFFSET ACCUMULATOR.\n         LA    R7,2(,R7)         POINT PAST RR-FORMAT INSTRUCTION.\n         B     SVBRANCH          TRY FOR BRANCH AGAIN.\nMVICTCHR SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,3(,R7)         GET TARGET OFFSET OF BRANCH.\n         SR    R1,R9             GET SIZE OF BRANCH JUMP.\n         CLI   4(R7),C'A'        DOES DATA BEGIN WITH A LENGTH CODE?\n         BNL   GOTILNTH          NO.\n         LA    R7,1(,R7)         DON'T SHOW LENGTH CODE.\nGOTILNTH LTR   R1,R1             IS IT ZERO LENGTH?\n         BNP   LASTGASP          YES, NOTHING TO LOAD.\nSVCLJUST CLC   4(2,R7),=X'47F0'  FOUND ANOTHER BRANCH?\n         BE    SVCJUST4          YES, SKIP FOUR BYTES OF INSTRUCTION.\n         MVC   WORK(3),4(R7)     NO, COPY THE FIRST CHARACTER.\n         TR    WORK(3),SVCXLATE  FILTER OUT RUBBISH.\n         CLI   WORK+1,C' '       ONE CHARACTER FOLLOWED BY A BLANK?\n         BE    SVCJUST1          YES, DISCARD THIS CHARACTER.\n         CLI   WORK,C'0'         FIRST CHARACTER OF INTEREST?\n         BL    SV1STNTN          PERHAPS, FIRST CHARACTER NOT NUMERIC.\n         CLI   WORK+1,C'0'       FIRST TWO CHARACTERS NUMERIC?\n         BL    SVCJUST1          NO, SUPPRESS A LEADING SINGLE DIGIT.\n         CLI   WORK+2,C'/'       PART OF A DATE?\n         BE    DOSVCTXT          GOSH, I HOPE SO.\n         CLI   WORK+2,C'.'       PART OF A DATE OR TIME?\n         BE    DOSVCTXT          GOSH, I HOPE SO.\n         CLI   WORK,C'5'         FIRST CHARACTER A FIVE?\n         BNE   SVCJUST1          NO, DISCARD.\n         B     DOSVCTXT          YES, COULD BE PRODUCT NUMBER.\nSV1STNTN CLI   WORK,C'A'         FIRST CHARACTER OF INTEREST?\n         BNL   DOSVCTXT          YES, DISPLAY IT ALL.\nSVCJUST1 LA    R7,1(,R7)         NO, SKIP IT.\n         BCT   R1,SVCLJUST       EXAMINE NEXT CHARACTER.\n         B     LASTGASP          FORGET IT IF ONLY ONE BYTE LONG.\nSVCJUST4 LA    R7,4(,R7)         SKIP OVER BRANCH INSTRUCTION.\n         AHI   R1,-4             ADJUST REMAINING DATA LENGTH.\n         BP    SVCLJUST          CONTINUE WITH LEFT JUSTIFICATION.\nLASTGASP L     R7,SVCEP          LAST DESPERATE EFFORT - GET EP AGAIN.\n         LR    R0,R7             COPY IT.\n         SRL   R0,12\n         SLL   R0,12\n         CR    R7,R0             IS ENTRY POINT ON PAGE BOUNDARY?\n         BE    EOSVDTLS          YES, DON'T BACK UP, JUST GIVE UP.\n         AHI   R7,-8             NO, POINT TO BEFORE ENTRY POINT.\n         TM    OSBITS,X'13'      MVS?\n         BO    TIGTEST           YES, LOOK FOR MVS NAME PREFIX.\n         CLI   1(R7),C'F'        FUJITSU LABEL BEFORE ENTRY POINT?\n         B     TVENDOR\nTIGTEST  CLC   0(2,R7),=C'IG'    IBM LABEL BEFORE ENTRY POINT?\nTVENDOR  BNE   EOSVDTLS          NO, I GIVE UP.\n         MVC   0(8,R15),0(R7)    LOOKS LIKE IT SO COPY IT.\n         TR    0(8,R15),SVCXLATE FILTER OUT ANY RUBBISH.\n         B     EOSVDTLS          HOORAY!!\nDOSVCTXT LR    R0,R2             SAVE CURRENT LINE POINTER.\n         CR    R1,R6             IS LENGTH BIGGER THAN MAXIMUM?\n         BNH   GOTBSIZE          NO, USE LENGTH DERIVED FROM MODULE.\n         LR    R1,R6             YES, USE MAXIMUM.\nGOTBSIZE TRT   4(1,R7),TICATCTB  IS THIS BYTE DISPLAYABLE?\n         LR    R2,R0             RESTORE CURRENT LINE POINTER.\n         BNZ   EOSVDTLS          NO, END OF EYE-CATCHER STRING.\n         MVC   0(1,R15),4(R7)    YES, COPY THE CHARACTER.\n         LA    R15,1(,R15)       POINT TO NEXT TARGET ADDRESS.\n         LA    R7,1(,R7)         POINT TO NEXT SOURCE ADDRESS.\n         BCT   R1,GOTBSIZE       CONTINUE.\nEOSVDTLS TM    MODESW2,KEY0      IN KEY ZERO?\n         BZ    TMODEOK2          NO.\n         MODESET MF=(E,MDSETN0)  YES.\n         NI    MODESW2,255-KEY0  NOT ANYMORE.\nTMODEOK2 TR    LL-79(SVDL,R2),XLATETBL\n         LA    R2,SVLL(,R2)      ADJUST BUFFER POINTER.\n         LA    R3,1(,R3)         INCREMENT SVC NUMBER.\n         LA    R5,8(,R5)         POINT TO THE NEXT SVC TABLE ENTRY.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNT          IF YES, THEN FORGET SUMMARY LINE.\n         BCT   R4,NEXTSVC        PROCESS NEXT SVC TABLE ENTRY.\n         DROP  R5                SVCENTRY.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNT LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNT L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    NOTEXITT          NO, PROCESS SUBCOMMAND.\nISEXITT  L     R15,WINMANAD      YES, POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   TTOPLINE,WINTOP   SAVE TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nNOTEXITT CLI   INBUFF,3          PF3/15?\n         BE    RESETESR          YES, SHOW MAIN SVC TABLE.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    SVCAUTO           YES.\nCMDSCANT CLI   INCHARS,C'E'      ESR TABLE FORMAT REQUESTED?\n         BE    ISESRCMD          YES.\n         CLI   INCHARS,C' '      DISPLAY UPDATE REQUESTED?\n         BNE   GIVEHLPT          NO, SHOW HELP PANEL.\n*        CLI   INBUFF+1,3        CURSOR ON HEADING LINE?\n*        BL    REDOSVCS          YES, RESHOW THE SCREEN.\n*        CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n*        BE    REDOSVCS          YES, RESHOW THE SCREEN.\n         SLR   R0,R0\n         IC    R0,INBUFF+1       GET THE CURSOR ROW NUMBER.\n         AHI   R0,-3             DO NOT COUNT HEADING LINES.\n         BM    REDOSVCS          CURSOR ON HEADING LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         A     R0,WINTOP         GET DETAIL LINE NUMBER.\n         AH    R0,WINHDGCT       COUNT THE HEADING LINES.\n         C     R0,WINLINES       BEFORE SUMMARY LINE?\n         BNL   REDOSVCS          NO, CURSOR PAST END OF MAP.\n         SH    R0,WINHDGCT       RESTORE DETAIL LINE NUMBER.\n         BCTR  R0,0              GET TABLE ENTRY (SVC) NUMBER.\n         LR    R6,R0             COPY IT.\n         SLL   R0,3              MULTIPLY BY EIGHT FOR INDEX.\n         L     R3,CRNTABLE       POINT TO THE CURRENT SVC TABLE.\n         ALR   R3,R0             POINT TO REQUESTED SVC TABLE ENTRY.\n         USING SVCENTRY,R3\n         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?\n         BO    TESRZOOM          YES.\n         L     R1,=A(BRWSPNTR)\n         MVC   0(4,R1),SVCEP     SUPPLY NEW BROWSE ADDRESS.\n         NI    0(R1),X'7F'       RESET THE SIGN BIT.\n         MVC   INBUFF(9),TZMSTR  SUPPLY THE ZOOM COMMAND STRING.\n         MVI   TGETLEN+1,9       SUPPLY \"INPUT\" DATA LENGTH.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNT          ZOOM TO OPTION \"VB\".\n         DROP  R15,R3            WNDWMNGR, SVCENTRY.\nSVCAUTO  MVI   INBUFF,X'F8'      SIMULATE A SCROLL DOWN REQUEST.\n         MVI   TGETLEN+1,3       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNT          GO SCROLL DOWN A PAGE.\nISESRCMD CLI   INCHARS+1,C'/'    DISPLAY MAIN TABLE REQUEST?\n         BE    RESETESR          YES.\nTGETESR# MVI   ESRPRMTE,X'C1'    RESET WCC.\n         LA    R0,GTESRELN       LOAD THE LENGTH OF THE DATA STREAM.\n         LA    R1,ESRPRMTE       POINT TO PROMPTING MESSAGE.\n         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.\n         TM    255(R15),X'10'    JAPANESE DISPLAY?\n         BZ    ASKESRNO          NO, USE ENGLISH PROMPT.\n         MVI   ESRPRMTJ,X'C1'    RESET WCC.\n         LA    R0,GTESRJLN       LOAD THE LENGTH OF THE DATA STREAM.\n         LA    R1,ESRPRMTJ       POINT TO PROMPTING MESSAGE.\nASKESRNO BAS   R14,SCREENIO      ISSUE PROMPT AND GET ESR NUMBER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    ISEXITT           YES, PERFORM TERMINATION.\n         CLI   INBUFF,3          PF3/15?\n         BE    RESETESR          YES, ASSUME PROMPT CANCEL REQUESTED.\n         LA    R15,INCHARS       POINT TO START OF TEXT.\n         LH    R0,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R0,-6             GET LENGTH OF TEXT.\n         BNP   RESETESR          HANDLE NULL INPUT.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    TGETESR#          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         SLR   R1,R1             CLEAR ESR SVC NUMBER.\nJUSTESR# CLI   0(R15),C' '       INPUT CHARACTER A BLANK?\n         BNE   CHKESR#           NO, INPUT IS LEFT JUSTIFIED.\n         LA    R15,1(,R15)       YES, POINT TO NEXT TEXT BYTE.\n         BCT   R0,JUSTESR#\nRESETESR LA    R4,256            NULL INPUT SO GET NUMBER OF SVCS.\n         L     R5,MAINTABL       GET ADDRESS OF MAIN SVC TABLE.\n         STM   R4,R5,TENTRYCT    STORE THESE.\n         ICM   R3,15,ESRSVCNO    GET THE ESR SVC NUMBER.\n         BZ    TESCRLOK          NONE SO AVOID SCROLLING.\n         LA    R3,1(,R3)         GET ITS LINE NUMBER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         ST    R3,WINTOP         MAKE THIS THE NEW TOP DETAIL LINE.\n         DROP  R15               WNDWMNGR.\nTESCRLOK MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\n         XC    ESRSVCNO,ESRSVCNO CLEAR ESR NUMBER.\n         B     REDOSVCS          GO FORMAT NEW SCREEN IMAGE.\nCHKESR#  CLI   0(R15),C'0'       NUMERIC CHARACTER?\n         BL    GOTESR#           NO, END OF INPUT TEXT PARSING.\n         SLL   R1,8              GET ROOM FOR ANOTHER DIGIT.\n         IC    R1,0(,R15)        LOAD UNPACKED DIGIT.\n         LA    R15,1(,R15)       POINT TO NEXT TEXT BYTE.\n         BCT   R0,CHKESR#        EXAMINE NEXT DIGIT, IF ANY.\nGOTESR#  ST    R1,WORK           GET UNPACKED NUMBER.\n         OI    WORK+3,X'F0'      ENSURE A VALID DECIMAL SIGN.\n         PACK  WORK+6(2),WORK+1(3)\n         XC    WORK(6),WORK      LEAVE PACKED NUMBER IN DOUBLEWORD.\n         CVB   R6,WORK           GET EQUIVALENT BINARY.\n         LA    R0,256            GET NUMBER OF SVCS.\n         CR    R6,R0             VALID SVC NUMBER?\n         BNL   ESRERROR          NO, CAN'T BE AN ESR.\nTESRZOOM LR    R1,R6             COPY THE POTENTIAL ESR SVC NUMBER.\n         SLL   R1,3              GET INDEX INTO SVC TABLE.\n         AL    R1,MAINTABL       POINT TO THE SVC TABLE ENTRY.\n         USING SVCENTRY,R1\n         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?\n         BZ    ESRERROR          NO.\n         ST    R6,ESRSVCNO       YES, SAVE THE SVC NUMBER.\n         L     R1,SVCESRAD       POINT TO THE ESR TABLE.\n         TM    OSBITS,X'13'      MVS?\n         BO    ESRTABOS          YES.\n         L     R4,0(,R1)         GET THE NUMBER OF TABLE ENTRIES.\n         LA    R5,4(,R1)         POINT TO THE LOGICAL TABLE ORIGIN.\n         B     ESRTABOK\nESRTABOS L     R4,SVCESRMX       GET THE HIGHEST ENTRY CODE.\n         LA    R4,1(,R4)         GET THE NUMBER OF TABLE ENTRIES.\n         LA    R5,8(,R1)         POINT TO THE LOGICAL TABLE ORIGIN.\n         DROP  R1                SVCENTRY.\nESRTABOK STM   R4,R5,TENTRYCT    SAVE THE ESR TABLE DETAILS.\n         LA    R1,1              GET ONE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         ST    R1,WINTOP         SHOW ESR TABLE FROM THE TOP.\n         DROP  R15               WNDWMNGR.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.\n         B     REDOSVCS          GO FORMAT FROM START OF TABLE.\nESRERROR MVC   ESRERNOE,ED3      SUPPLY SVC NUMBER IN ERROR MESSAGE.\n         ED    ESRERNOE,WORK+6\n         LA    R0,GTESRELX       LOAD THE LENGTH OF THE DATA STREAM.\n         MVI   ESRPRMTE,X'C5'    SET BELL BIT ON IN WCC.\n         LA    R1,ESRPRMTE       POINT TO PROMPTING MESSAGE.\n         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         TM    255(R15),X'10'    JAPANESE DISPLAY?\n         BZ    ASKESRNO          NO, USE ENGLISH PROMPT.\n         MVC   ESRERNOJ,ESRERNOE SUPPLY SVC NUMBER IN ERROR MESSAGE.\n         LA    R0,GTESRJLX       LOAD THE LENGTH OF THE DATA STREAM.\n         MVI   ESRPRMTJ,X'C5'    SET BELL BIT ON IN WCC.\n         LA    R1,ESRPRMTJ       POINT TO PROMPTING MESSAGE.\n         B     ASKESRNO          RE-PROMPT FOR ESR SVC NUMBER.\nGIVEHLPT MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNT          GO DISPLAY HELP PANEL.\n         SPACE\n         DROP  R11,R10           SVCLIST.\n         TITLE 'SVC TABLE DISPLAY - VARIABLES AND CONSTANTS'\nTTOPLINE DC    F'1'              TOP-OF-SCREEN LINE NUMBER.\nTENTRYCT DC    F'256'  \\__ LIKE  NUMBER OF ENTRIES IN CURRENT TABLE.\nCRNTABLE DC    A(0)    /   THIS  ADDRESS OF THE TABLE BEING DISPLAYED.\nMAINTABL DC    A(0)              ADDRESS OF THE MAIN SVC TABLE.\nESRSVCNO DC    F'0'              ESR SVC NUMBER OF TABLE BEING SHOWN.\nSVDL     EQU   221               DATA LINE LENGTH.\nSVLL     EQU   LL-79+SVDL        BYTE LINE LENGTH.\nSVIAMSP  EQU   LL-24             EYE-CATCHER LINE OFFSET FOR MSP.\nSVILMSP  EQU   SVDL-52           EYE-CATCHER LINE LENGTH FOR MSP.\nSVIAESR  EQU   LL-24-17          EYE-CATCHER LINE OFFSET FOR ESR.\nSVILESR  EQU   SVDL-52+17        EYE-CATCHER LINE LENGTH FOR ESR.\nSVIAMVS  EQU   LL+27             EYE-CATCHER LINE OFFSET FOR MVS.\nSVILMVS  EQU   SVDL-LL-27        EYE-CATCHER LINE LENGTH FOR MVS.\nTZMSTR   DC    X'7D40C11140C1'   READ HEADER FOR SVC ZOOM.\n         DC    C'=VB'            CHARACTER STRING FOR SVC ZOOM.\n         COPY  ESRPRMTE          ENGLISH ESR NUMBER PROMPT.\n         COPY  ESRPRMTJ          JAPANESE ESR NUMBER PROMPT.\nHEADINGT DC    CL79'             SVC TABLE AND EXTENDED SVC ROUTER (ESR+\n               ) TABLE DISPLAY             '\nSVCTCOLS DC    C' SVC-NO AMODE/EP TYP APF ESR AR LOCKS MACRO -COMPONENT+\n                PARM-MEM CHG-DATE+COUNT NEW-ADDR PRIOR-TABLE-ENTRY '\nSVCTDTLS DC    3CL71'MODULE-NAME/EYE-CATCHER '\n         DS    0H\nTICATCTB DC    4XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  00->3F\n         DC    2XL16'00FFFFFFFFFFFFFFFFFF000000000000'  40->5F\n         DC    1XL16'0000FFFFFFFFFFFFFFFF000000000000'  60->6F\n         DC    1XL16'0000FFFFFFFFFFFFFF00000000000000'  70->7F\n         DC    3XL16'FF000000000000000000FFFFFFFFFFFF'  80->AF\n         DC    1XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  B0->BF\n         DC    2XL16'00000000000000000000FFFFFFFFFFFF'  C0->DF\n         DC    1XL16'00FF0000000000000000FFFFFFFFFFFF'  E0->EF\n         DC    1XL16'00000000000000000000FFFFFFFFFFFF'  F0->FF\n*                <--------------><-------------->\nSVCXLATE DC    C'                                '     LIKELY\n         DC    C'                                '     EYE-CATCHER\n         DC    C'           .<(+            $*); '     CHARACTERS.\n         DC    C'-/         ,%_>           :#@   '\n         DC    C'                                '\n         DC    C'                                '\n         DC    C' ABCDEFGHI       JKLMNOPQR      '\n         DC    C'  STUVWXYZ      0123456789      '\n*                <--------------><--------------><-------------->\nSVCMACRO DC    C'EXCP/XDAP       WAIT/WAITR/PRTOVPOST            '    2\n         DC    C'EXIT            GETMAIN         FREEMAIN        '    5\n         DC    C'LINK/LINKX      XCTL/XCTLX      LOAD            '    8\n         DC    C'DELETE          GETMAIN/FREEMAINTIME            '   11\n         DC    C'SYNCH/SYNCHX    ABEND           SPIE            '   14\n         DC    C'ERREXCP         PURGE           RESTORE         '   17\n         DC    C'BLDL/FIND  -BPAMOPEN    -O/C/EOVCLOSE   -O/C/EOV'   20\n         DC    C'STOW       -BPAMOPEN TYPE=J -OCECLOSE TYPE=T-OCE'   23\n         DC    C'DEVTYPE     -SAMTRKBAL      -SAMCATALOG/LOCATE  '   26\n         DC    C'OBTAIN    -DADSMCVOL    -PRE-MVSSCRATCH   -DADSM'   29\n         DC    C'RENAME    -DADSMFEOV    -O/C/EOV{RE}ALLOC -DADSM'   32\n         DC    C'IOHALT          MGCR/QEDIT  -CMDWTO/WTOR   -COMM'   35\n         DC    C'WTL             SEGLD/SEGWT              -OS/360'   38\n         DC    C'LABEL -UTILITIESEXTRACT         IDENTIFY        '   41\n         DC    C'ATTACH/ATTACHX  CIRB            CHAP            '   44\n         DC    C'OVLYBRCH        TTIMER/STIMERM  STIMER/STIMERM  '   47\n         DC    C'DEQ             TEST     -OS/360                '   50\n         DC    C'SNAP{X}/SDUMP{X}RESTART -CKPT/RSRELEX      -BDAM'   53\n         DC    C'DISABLE    -ISAMEOV     -O/C/EOVENQ/RESERVE     '   56\n         DC    C'FREEDBUF   -BDAMREL+REQBUF -BTAMOLTEP     -OLTEP'   59\n         DC    C'{E}STAE/{E}STAI IKJEGS6A   -TESTDETACH          '   62\n         DC    C'CHKPT   -CKPT/RSRDJFCB  -O/C/EOV    -OS/360 QSAM'   65\n         DC    C'BTAMTEST   -BTAMENDREADY   -QTAMSYNADAF/SYNADRLS'   68\n         DC    C'BSP        -BSAMGSERV       -GAMASGN+RLSEBFR-GAM'   71\n         DC    C'CHATR      -COMMSPAR        -GAMDAR         -GAM'   74\n         DC    C'DQUEUE      -GAMIFBSTAT  -LOGRECQTAMTEST   -QTAM'   77\n         DC    C'LSPACE    -DADSMSTATUS                          '   80\n         DC    C'SETPRT+DEV  -SAMDASDR   -PRE-DFPSMFWTM/SMFEWTM  '   83\n         DC    C'GRAPHICS    -GAMDDRSWAP         ATLAS -UTILITIES'   86\n         DC    C'DOM        -COMMMOD88   -MVS/370EMSRV    -OS/VS1'   89\n         DC    C'XQMNGR   -OS/VS1VOLSTAT         TCBEXCP         '   92\n         DC    C'TGET/TPUT/TPG   -TSO TERMNL CNTLSYSEVENT        '   95\n         DC    C'STAX            IKJEGS9G   -TESTPROTECT   -DADSM'   98\n         DC    C'DYNALLOC        IKJEFFIB -TSO CPQTIP       -TCAM'  101\n         DC    C'AQCTL      -TCAMXLATE   -O/C/EOVTOPCTL     -TCAM'  104\n         DC    C'IMGLIB      -SAMISOLATE         MODESET         '  107\n         DC    C'                ESPIE/MSGDISP         -CMD SCHED'  110\n         DC    C'JECS        -JESPGRLSE          PGFIX/PGFREE &&C.' 113\n         DC    C'EXCPVR          BLKPAGE         CALLDISP  -+BTAM'  116\n         DC    C'DEBCHK                          TESTAUTH        '  119\n         DC    C'GETMAIN/FREEMAINVSAM       -VSAMLINK/XCTL/LOAD  '  122\n         DC    C'PURGEDQ/SPOST   TPIO       -VTAMEVENTS          '  125\n         DC    C'            -MSS                                '  128\n         DC    C'                RACHECK    -RACFRACINIT    -RACF'  131\n         DC    C'RACLIST    -RACFRACDEF     -RACF                '  134\n         DC    C'                                CALLDISP        '  137\n         DC    C'PGSER           CVAFDIR+DSM+SEQ CROSSPTN -OS/VS1'  140\n         DC    C'                                CUSP+PCF MACROS '  143\n         DC    C'PTRACE  -OPENMVS     -DEBUG TOOLBPESVC -IMS OTMA'  146\n*                <--------------><--------------><-------------->\nMAXMACRO EQU   146\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCMW": {"ttr": 8453, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x15\\x00!\\x00\\x94\\x11\\x1f\\x01\\x11\\x11?\\x19 \\x01\\xf7\\x01#\\x00\\xf8\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "43.21", "flags": 0, "createdate": "1994-04-21T00:00:00", "modifydate": "2011-04-23T19:20:21", "lines": 503, "newlines": 291, "modlines": 248, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1986,1994,1998,2011  PRYCROFT SIX PTY LTD\n         TITLE 'WINDOW MANAGER'\n         USING WNDWMNGR,R15\nWNDWMNGR ST    R11,WINSVR11      SAVE CALLING OPTION'S BASE ADDRESS.\n         ST    R14,WINSVR14      SAVE CALLING OPTION'S RETURN ADDRESS.\n         DROP  R15               WNDWMNGR.\n         LR    R11,R15           INITIALIZE BASE REGISTER.\n         USING WNDWMNGR,R11\n         STM   R14,R12,SAVE+12   SAVE GENERAL REGISTER VALUES.\n         LTR   R0,R0             ANY DATA TO DISPLAY?\n         BNP   WINPARSE          NO, GET REQUEST AND/OR PERFORM PARSE.\n         TM    MODESW2,COL1\n         BO    WINDSPOK\n         MVI   HEADATTR+1,X'60'  SHOW WINDOW HEADING IN LOW INTENSITY.\n         MVI   HEADATTR+5,X'F6'  YELLOW.                        (I3279)\n         ICM   R0,3,WINHDGCT     ANY FIXED HEADINGS?\n         BNZ   WINCLROK          YES, LEAVE FIRST LINE YELLOW.\n         MVI   HEADATTR+5,X'F7'  NO, WHITE FOR FIRST LINE.      (I3279)\nWINCLROK MVC   HEADING,BLANKS\n         MVC   HEADING+2(6),=C'System'\n         L     R1,SMCAADDR       POINT TO THE SMCA.\n         MVC   HEADING+9(4),16(R1)   SHOW THE SYSTEM IDENTIFIER.\n         TIME  DEC               GET THE DISPLAY TIMESTAMP.\n         STM   R0,R1,WORK\n         UNPK  HEADING+27(3),WORK(2)\n         MVI   HEADING+29,C':'\n         UNPK  HEADING+30(3),WORK+1(2)\n         MVI   HEADING+32,C':'\n         UNPK  HEADING+33(3),WORK+2(2)\n         MVI   HEADING+35,C'.'\n         UNPK  HEADING+36(3),WORK+3(2)\n         MVI   HEADING+38,C' '\n         AP    WORK,=P'1900000'  SHOW THE FOUR-DIGIT YEAR.\n         UNPK  HEADING+15(5),WORK+4(3)\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7            CONVERT THE JULIAN DATE.\n         MVC   HEADING+17(8),WORK   SHOW THE CURRENT DATE.\n         L     R9,CCTADDR        GET CCT ADDRESS.\n         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.\n         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.\n         LA    R9,LINES          POINT TO SCREEN DIMENSIONS.\n         ST    R9,WINSIZE        UPDATE THE SIZE VALUES POINTER.\n         CLI   OLDCOLS+3,80      USING A WIDE SCREEN?\n         BNH   WINDOWIT          NO.\n         L     R15,CRNTOPTN      YES, POINT TO THE CURRENT OPTION.\n         TM    2(R15),X'80'      FORCE 80-COLUMN SCREEN FOR THIS ONE?\n         BO    WINDOWIT          YES, DO NOT USE WIDE SCREEN.\n         LA    R9,OLDSIZE        POINT TO SCREEN SIZE TO USE.\n         ST    R9,WINSIZE        UPDATE THE SIZE VALUES POINTER.\n         L     R1,4(,R9)         GET SCREEN WIDTH.\n         LA    R1,WINLINOH(,R1)  GET DATA STREAM LINE LENGTH.\n         LNR   R1,R1             MAKE THIS NEGATIVE.\n         AH    R1,WINLNLEN       GET LARGEST SCROLL OFFSET.\n         BNM   *+4+2             NON-NEGATIVE IS GOOD.\n         SR    R1,R1             ZERO IS MINIUMUM AMOUNT.\n         CH    R1,WINOFFST       SCROLLED RIGHT MORE THAN MAXIMUM?\n         BNL   WINDOWIT          NO, PROCEED.\n         STH   R1,WINOFFST       YES, REDUCE TO MAXIMUM.\n         STH   R1,10(,R15)       SAVE IN LOOK-UP ENTRY.\nWINDOWIT MVC   HEADING+38(L'HEADING-38),BLANKS\n         LA    R15,HEADING+L'HEADING\n         LA    R0,WINLINOH       GET 3270 LINE OVERHEAD.\n         L     R9,WINSIZE        POINT TO SCREEN DIMENSIONS.\n         A     R0,4(,R9)         GET ACCOMMODATABLE LINE LENGTH.\n         CH    R0,WINLNLEN       SCREEN WIDE ENOUGH FOR DISPLAY?\n         BNL   WINLINDO          YES, DON'T DISPLAY SHOWN COLUMN RANGE.\n         LNR   R1,R0             NO, GET NEGATIVE DATA STREAM LENGTH.\n         SLR   R0,R0\n         ICM   R0,3,WINOFFST     GET SCROLL RIGHT OFFSET.\n         BZ    WINCOLOK          BRANCH IF AT LEFT MAX.\n         AH    R0,WINLEFT        GET LEFT COLUMN PRESERVE COUNT.\nWINCOLOK LR    R2,R0             REMEMBER START COLUMN OFFSET.\n         A     R0,4(,R9)         GET FIRST COLUMN PAST SCREEN.\n         BCTR  R0,0              ALLOW FOR ATTRIBUTES - GET LAST COL.\n         ICM   R14,3,WINOFFST    AT LEFT MAX?\n         BZ    WINCOLND          YES, HAVE LAST VISIBLE COLUMN NUMBER.\n         SH    R0,WINLEFT        NO, DON'T COUNT PRESERVED COLUMNS.\nWINCOLND AH    R1,WINLNLEN       GET LARGEST SCROLL OFFSET.\n         CH    R1,WINOFFST       AT RIGHT MAX?\n         BZ    WINCOLST          YES, HAVE LAST VISIBLE COLUMN NUMBER.\n         SH    R0,WINRIGHT       NO, DON'T COUNT PRESERVED COLUMNS.\nWINCOLST BAS   R14,WINHDNUM      SHOW RIGHT-MOST COLUMN NUMBER.\n         BCTR  R15,0             POINT BEFORE THIS NUMBER.\n         MVI   0(R15),C'-'\n         LA    R0,1(,R2)\n         BAS   R14,WINHDNUM      SHOW LEFT-MOST COLUMN NUMBER.\n         AHI   R15,-6\n         MVC   1(4,R15),=C'Cols'\nWINLINDO BCTR  R15,0\n         L     R0,WINLINES       GET TOTAL LINE COUNT.\n         SH    R0,WINHDGCT       SUBTRACT HEADING LINE COUNT.\n         BAS   R14,WINHDNUM      SHOW HIGHEST EXTANT LINE NUMBER.\n         LR    R2,R0             COPY THIS NUMBER.\n         L     R0,WINTOP         GET TOP-OF-SCREEN LINE NUMBER.\n         CLR   R0,R2             IS TOP-OF-SCREEN PAST END?\n         BNH   WINTOPOK          NO, MAINTAIN CURRENT TOP-OF-SCREEN.\n         LA    R0,2              YES, DO A \"DOWN MAX\".\n         AR    R0,R2\n         S     R0,0(,R9)         GET FIRST DETAIL LINE NUMBER.\n         AH    R0,WINHDGCT       ADJUST FOR OPTION'S HEADING LINES.\n         BP    WINADJTP          GO ADJUST THE TOP-OF-SCREEN.\n         LA    R0,1              LESS THAN A SCREENFUL - SHOW IT ALL.\nWINADJTP ST    R0,WINTOP         ADJUST TOP-OF-SCREEN LINE NUMBER.\nWINTOPOK AHI   R15,-4\n         MVC   1(2,R15),=C'of'\n         BAS   R14,WINHDNUM      SHOW TOP-OF-SCREEN LINE NUMBER.\n         AHI   R15,-6\n         MVC   1(4,R15),=C'Line'\n         LA    R2,BUFFER         INITIALIZE SCREEN BUFFER POINTER.\n         MVC   0(80,R2),BLANKS   PREPARE FOR WIDE SCREEN.\n         A     R2,4(,R9)         ADD SCREEN WIDTH.\n         AHI   R2,-80            POINT TO FIRST DETAIL LINE.\n         LH    R0,WINHDGCT       GET THE OPTION'S HEADING LINE COUNT.\n         LTR   R0,R0             ARE THE ANY HEADING LINES?\n         BZ    WINHDGOK          NO, PROCEED WITH DETAILS LINES.\n         L     R1,WINBUFF        YES, POINT TO THE HEADING LINES.\nWINLDHDG BAS   R14,WINLDLIN      LOAD A HEADING LINE.\n         BCT   R0,WINLDHDG       LOAD THE RIGHT NUMBER OF HEADINGS.\nWINHDGOK L     R1,WINTOP         GET TOP-OF-SCREEN LINE NUMBER.\n         BCTR  R1,0              MAKE RELATIVE FOR INDEX.\n         AH    R1,WINHDGCT       SKIP HEADING LINE DATA.\n         MH    R1,WINLNLEN       GET OFFSET INTO BUFFER.\n         A     R1,WINBUFF        POINT TO FIRST DETAIL LINE TO SHOW.\n         L     R0,0(,R9)         GET NUMBER OF LINES ON SCREEN.\n         BCTR  R0,0              ALLOW FOR WINDOW HEADER.\n         SH    R0,WINHDGCT       ALLOW FOR OPTION'S HEADING LINES.\nWINLDDTL BAS   R14,WINLDLIN      LOAD A DETAIL LINE.\n         BCT   R0,WINLDDTL       FILL THE SCREEN UP, IF POSSIBLE.\n         ICM   R15,15,WINSUFLN   ANY DATA STREAM SUFFIX TO ADD?\n         BM    WINSUFOK          NO, LENGTH CODE IS NEGATIVE.\n         L     R1,WINSUFIX       YES, POINT TO IT.\n         EX    R15,WINSUFMV      APPEND THE DATA STREAM SUFFIX.\n         LA    R2,1(R15,R2)      POINT PAST THE DATA STREAM SUFFIX.\nWINSUFOK LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         LR    R0,R2             POINT TO END OF SCREEN BUFFER.\n         SR    R0,R1             GET SCREEN BUFFER LENGTH.\n         LM    R2,R12,SAVE+28    RESTORE NON-COMMUNICATION REGISTERS.\nWINDSPOK LA    R14,OLDSIZE       POINT TO WIDE SCREEN DIMENSIONS.\n         C     R14,WINSIZE       USING A WIDE SCREEN?\n         BNE   WINPARSE          NO.\n         OI    MODESW,ALTS       YES, NEED ALTERNATE SCREEN SIZE.\nWINPARSE BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CHI   R15,4             ANY DATA READ FROM TERMINAL?\n         BE    WINLEAVE          NO.\n         TM    MODESW2,XFLG      OPTION EXIT REQUESTED?\n         BO    WINLEAVE          YES.\n         CLI   INBUFF,2          WRITE ENTIRE REPORT?\n         BE    WINWRITE          YES.\n         CLI   INBUFF,7          SCROLL UP REQUESTED VIA PFK?\n         BE    WINUPKEY          YES.\n         CLI   INBUFF,8          SCROLL DOWN REQUESTED VIA PFK?\n         BE    WINDNKEY          YES.\n         CLI   INBUFF,10         SCROLL LEFT REQUESTED VIA PFK?\n         BE    WINLFKEY          YES.\n         CLI   INBUFF,11         SCROLL RIGHT REQUESTED VIA PFK?\n         BE    WINRTKEY          YES.\n         CLI   INBUFF,13         ANY OTHER PROGRAM FUNCTION KEY?\n         BL    WINLEAVE          YES, SKIP ANY WINDOWING PROCESSING.\n         CLI   INCHARS,C'!'      WRITE ENTIRE REPORT?\n         BE    WINWRITE          YES.\n         CLI   INCHARS,C'-'      SCROLL UP REQUESTED VIA COMMAND?\n         BE    WINUPCMD          YES.\n         CLI   INCHARS,C'+'      SCROLL DOWN REQUESTED VIA COMMAND?\n         BE    WINDNCMD          YES.\n         CLI   INCHARS,C'<'      SCROLL LEFT REQUESTED VIA COMMAND?\n         BE    WINLFCMD          YES.\n         CLI   INCHARS,C'>'      SCROLL RIGHT REQUESTED VIA COMMAND?\n         BE    WINRTCMD          YES.\n         CLI   INCHARS,C' '      LOCAL SUBCOMMAND SPECIFIED?\n         BNE   WINLEAVE          YES.\n         L     R14,CRNTOPTN      POINT TO OPTION'S LOOK-UP ENTRY.\n         CLI   0(R14),C'V'       HANDLING ZOOM HERE?\n         BNE   WINLEAVE          NO.\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,INBUFF+1       GET RELATIVE LINE NUMBER OF CURSOR.\n         CH    R1,WINHDGCT       CURSOR ON A HEADING LINE?\n         BNH   WINLEAVE          YES, NOT A ZOOM REQUEST.\n         BCTR  R1,0              DISCOUNT WINDOW HEADING.\n         BCTR  R1,0              MAKE LINE NUMBER RELATIVE TO ZERO.\n         A     R1,WINTOP         CONVERT TO WINDOW LINE NUMBER.\n         C     R1,WINLINES       CURSOR BEFORE SUMMARY LINE?\n         BNL   WINLEAVE          NO, NOT A ZOOM REQUEST.\n         MH    R1,WINLNLEN       YES, GET AN INDEX INTO WINDOW AREA.\n         A     R1,WINBUFF        POINT TO DETAIL LINE CONTENTS.\n         SLR   R14,R14\n         IC    R14,INBUFF+2      GET RELATIVE COLUMN NUMBER.\n         LA    R1,LL-80(R14,R1)  POINT TO DATA UNDER CURSOR.\n         LA    R0,8              GET MAXIMUM ADDRESS DIGIT LENGTH.\nWINZMSCN BCTR  R1,0              BACK UP A BYTE.\n         CLI   0(R1),X'24'       FOUND START OF TAB SELECTABLE FIELD?\n         BE    WINZMFLD          YES.\n         BCT   R0,WINZMSCN       NO.\n         B     WINLEAVE          NOT A ZOOM REQUEST.\nWINZMFLD MVI   INCHARS,C'B'\n         MVC   INCHARS+1(8),1(R1)\n         L     R14,PSAAOLD       ENSURE ADDRESS SPACE BROWSE.\n         MVC   JBTARGAS,ASID(R14)\n         CLI   INCHARS+1,C'0'    DECIMAL FIRST DIGIT?\n         BNL   WINLEAVE          YES, LOCAL SUBCOMMAND.\n         TR    INCHARS+1(1),W32TO31T-C'A'\nWINLEAVE L     R14,WINSVR14      LOAD CALLING OPTION'S RETURN ADDRESS.\n         L     R11,WINSVR11      LOAD CALLING OPTION'S BASE ADDRESS.\n         BR    R14               RETURN TO CALLING OPTION.\n         SPACE\nWINUPKEY ICM   R0,15,SCRLAMT     SCROLL AMOUNT ALREADY DETERMINED?\n         BNZ   WINUPAMT          YES, USE IT.\nWINUPPAG L     R14,WINSIZE       NO, POINT TO NUMBER OF SCREEN LINES.\n         L     R0,0(,R14)        GET THE SCREEN LINE COUNT.\n         BCTR  R0,0              DISCOUNT WINDOW HEADER.\n         SH    R0,WINHDGCT       DISCOUNT OPTION HEADING LINES.\n         CLI   INCHARS+1,C'H'    HALF-PAGE SCROLL REQUEST?\n         BNE   WINUPAMT          NO, WHOLE PAGE BY DEFAULT.\n         SRA   R0,1              YES, HALVE IT.\nWINUPAMT LNR   R0,R0             MAKE NEGATIVE FOR UP.\nWINEWTOP A     R0,WINTOP         ADJUST TOP-OF-SCREEN LINE NUMBER.\n         ST    R0,WINTOP         SAVE THE NEW VALUE.\n         BP    WINDOWIT          GO ADJUST DISPLAY WINDOW.\nWINUPMAX LA    R0,1              SCROLLED ABOVE TOP - DO A \"UP MAX\".\n         ST    R0,WINTOP         SAVE THE NEW VALUE.\n         B     WINDOWIT\nWINDNKEY ICM   R0,15,SCRLAMT     SCROLL AMOUNT ALREADY DETERMINED?\n         BNZ   WINEWTOP          YES, USE IT.\nWINDNPAG L     R14,WINSIZE       NO, POINT TO NUMBER OF SCREEN LINES.\n         L     R0,0(,R14)        GET THE SCREEN LINE COUNT.\n         BCTR  R0,0              DISCOUNT WINDOW HEADER.\n         SH    R0,WINHDGCT       DISCOUNT OPTION HEADING LINES.\n         CLI   INCHARS+1,C'H'    HALF-PAGE SCROLL REQUEST?\n         BNE   WINEWTOP          NO, WHOLE PAGE BY DEFAULT.\n         SRA   R0,1              YES, HALVE IT.\n         B     WINEWTOP\nWINUPCMD CLI   INCHARS+1,C'M'    MAXIMUM SCROLL REQUESTED?\n         BE    WINUPMAX          YES.\n         CLI   INCHARS+1,C'0'    SCROLL AMOUNT SPECIFIED?\n         BL    WINUPPAG          NO, DEFAULT TO A PAGE.\n         IC    R0,INCHARS+1      YES, LOAD THE DIGIT.\n         SLL   R0,28             CONVERT IT TO BINARY.\n         SRL   R0,28\n         B     WINUPAMT\nWINDNCMD LH    R0,TABLE+62       LOAD A LARGE NUMBER.\n         CLI   INCHARS+1,C'M'    MAXIMUM SCROLL REQUESTED?\n         BE    WINEWTOP          YES.\n         CLI   INCHARS+1,C'0'    SCROLL AMOUNT SPECIFIED?\n         BL    WINDNPAG          NO, DEFAULT TO A PAGE.\n         IC    R0,INCHARS+1      YES, LOAD THE DIGIT.\n         SLL   R0,28             CONVERT IT TO BINARY.\n         SRL   R0,28\n         B     WINEWTOP\n         SPACE\nWINLFKEY ICM   R0,15,SCRLAMT     SCROLL AMOUNT ALREADY DETERMINED?\n         BNZ   WINLFAMT          YES, USE IT.\nWINLFPAG L     R1,WINSIZE        NO, POINT TO SCREEN DIMENSIONS.\n         L     R0,4(,R1)         GET THE SCREEN COLUMN COUNT.\n         BCTR  R0,0              DISCOUNT ATTRIBUTE BYTE.\n         SH    R0,WINLEFT        DISCOUNT PRESERVED COLUMNS.\n         SH    R0,WINRIGHT\n         CLI   INCHARS+1,C'H'    HALF-PAGE SCROLL REQUEST?\n         BNE   WINLFAMT          NO, WHOLE PAGE BY DEFAULT.\n         SRA   R0,1              YES, HALVE IT.\nWINLFAMT LNR   R0,R0             MAKE NEGATIVE FOR LEFT.\nWINEWOFF L     R15,CRNTOPTN      POINT TO OPTION'S LOOK-UP ENTRY.\n         AH    R0,WINOFFST       ADJUST SCROLL-RIGHT OFFSET.\n         STH   R0,WINOFFST       SAVE THE NEW VALUE.\n         BM    WINLFMAX          GO ADJUST DISPLAY WINDOW.\n         STH   R0,10(,R15)       SAVE THE NEW VALUE IN LOOK-UP ENTRY.\n         L     R1,WINSIZE        POINT TO SCREEN DIMENSIONS.\n         L     R1,4(,R1)         GET SCREEN WIDTH.\n         LA    R1,WINLINOH(,R1)  GET DATA STREAM LINE LENGTH.\n         LNR   R1,R1             MAKE THIS NEGATIVE.\n         AH    R1,WINLNLEN       GET LARGEST SCROLL OFFSET.\n         CR    R0,R1             SCROLLED RIGHT MORE THAN MAXIMUM?\n         BNH   WINDOWIT          NO, PROCEED.\n         STH   R1,WINOFFST       YES, REDUCE TO MAXIMUM.\n         STH   R1,10(,R15)       SAVE IN LOOK-UP ENTRY.\n         B     WINDOWIT\nWINLFMAX SLR   R0,R0             FORCE A \"LEFT MAX\".\n         STH   R0,WINOFFST       SAVE THE NEW VALUE.\n         STH   R0,10(,R15)       SAVE IN LOOK-UP ENTRY.\n         B     WINDOWIT\nWINRTKEY ICM   R0,15,SCRLAMT     SCROLL AMOUNT ALREADY DETERMINED?\n         BNZ   WINEWOFF          YES, USE IT.\nWINRTPAG L     R1,WINSIZE        NO, POINT TO SCREEN DIMENSIONS.\n         L     R0,4(,R1)         GET THE SCREEN COLUMN COUNT.\n         BCTR  R0,0              DISCOUNT ATTRIBUTE BYTE.\n         SH    R0,WINLEFT        DISCOUNT PRESERVED COLUMNS.\n         SH    R0,WINRIGHT\n         CLI   INCHARS+1,C'H'    HALF-PAGE SCROLL REQUEST?\n         BNE   WINEWOFF          NO, WHOLE PAGE BY DEFAULT.\n         SRA   R0,1              YES, HALVE IT.\n         B     WINEWOFF\nWINLFCMD CLI   INCHARS+1,C'M'    MAXIMUM SCROLL REQUESTED?\n         BE    WINLFMAX          YES.\n         CLI   INCHARS+1,C'0'    SCROLL AMOUNT SPECIFIED?\n         BL    WINLFPAG          NO, DEFAULT TO A PAGE.\n         IC    R0,INCHARS+1      YES, LOAD THE DIGIT.\n         SLL   R0,28             CONVERT IT TO BINARY.\n         SRL   R0,28\n         B     WINLFAMT\nWINRTCMD ICM   R0,14,FFFF+1      LOAD A LARGE NUMBER.\n         CLI   INCHARS+1,C'M'    MAXIMUM SCROLL REQUESTED?\n         BE    WINEWOFF          YES.\n         CLI   INCHARS+1,C'0'    SCROLL AMOUNT SPECIFIED?\n         BL    WINRTPAG          NO, DEFAULT TO A PAGE.\n         IC    R0,INCHARS+1      YES, LOAD THE DIGIT.\n         SLL   R0,28             CONVERT IT TO BINARY.\n         SRL   R0,28\n         B     WINEWOFF\n         SPACE\nWINHDNUM DS    0H                FORMAT A NUMBER ON THE WINDOW HEADER.\n         CVD   R0,WORK           GET DECIMAL NUMBER TO FORMAT.\n         AHI   R15,-6            POINT TO BEFORE EDIT MASK.\n         MVC   0(6,R15),ED5      LOAD EDIT MASK.\n         LA    R1,5(,R15)        POINT TO LAST DIGIT IN CASE OF ZERO.\n         EDMK  0(6,R15),WORK+5   FORMAT DECIMAL NUMBER.\n         LR    R15,R1            POINT TO FIRST DIGIT ON SHOW.\n         BR    R14               RETURN.\n         SPACE\nWINLDLIN DS    0H                LOAD A LINE INTO THE SCREEN BUFFER.\n         CLC   0(2,R1),FFFF+2    END OF DATA IN WINDOW?\n         BE    WINTRLER          YES, SUPPLY TRAILER.\n         CLC   0(2,R1),WINFULL   END OF WINDOW?\n         BE    WINFILLD          YES, SUPPLY TRAILER.\n         L     R15,4(,R9)        GET SCREEN WIDTH.\n         LA    R15,WINLINOH(,R15)    GET LINE DATA STREAM LENGTH.\n         CH    R15,WINLNLEN      COMPARE SCREEN WIDTH WITH DATA WIDTH.\n         BNH   WINPADOK          SCREEN IS NOT WIDER THAN DATA.\n         MVI   WINLINOH(R2),C' ' SCREEN IS WIDER SO BLANK WHOLE LINE.\n         BCTR  R15,0             DECREMENT FOR EXECUTE.\n         EX    R15,WINCLRMV      BLANK WHOLE LINE.\n         LH    R15,WINLNLEN      GET DATA STREAM LENGTH OF DATA.\nWINPADOK BCTR  R15,0             DECREMENT FOR EXECUTE.\n         EX    R15,WINSUFMV      COPY A LINE WITH ITS ATTRIBUTES.\n         BNL   WINFIXLN          WHOLE DATA LINE FITS ON SCREEN.\n         CLI   0(R2),X'FF'       NON-SCROLLABLE LINE?\n         BE    WINFIXLN          YES.\n         SLR   R15,R15\n         STM   R1,R2,WORK        SAVE LINE POINTERS.\n         ICM   R15,3,WINOFFST    SCROLLED RIGHT ANY?\n         BZ    WINLFTLN          NO, LINE ALREADY LOADED PROPERLY.\n         AR    R1,R15            YES, OFFSET SOURCE ADDRESS.\n         AH    R1,WINLEFT        ALLOW FOR PRESERVED COLUMNS.\n         AH    R2,WINLEFT        ALLOW FOR PRESERVED COLUMNS.\n         L     R15,4(,R9)        GET SCREEN WIDTH.\n         BCTR  R15,0             ALLOW FOR ATTRIBUTE BYTE.\n         SH    R15,WINLEFT       ALLOW FOR PRESERVED COLUMNS.\n         BCTR  R15,0             DECREMENT FOR EXECUTE.\n         EX    R15,WINLINMV      MOVE THE SCROLLABLE LINE SEGMENT.\n         LM    R1,R2,WORK        RESTORE LINE POINTERS.\nWINLFTLN SLR   R15,R15\n         ICM   R15,3,WINRIGHT    ANY RIGHT COLUMNS TO PRESERVE?\n         BZ    WINFIXLN          NO, LINE ALREADY LOADED PROPERLY.\n         A     R2,4(,R9)\n         LA    R2,WINLINOH(,R2)  POINT PAST SCREEN LINE.\n         AH    R1,WINLNLEN       POINT PAST WINDOW LINE.\n         SR    R2,R15            POINT TO PRESERVED DATA TARGET.\n         SR    R1,R15            POINT TO PRESERVED DATA SOURCE.\n         BCTR  R15,0             DECREMENT FOR EXECUTE.\n         EX    R15,WINSUFMV      MOVE THE PRESERVED RIGHT COLUMNS.\n         LM    R1,R2,WORK        RESTORE LINE POINTERS.\nWINFIXLN MVI   0(R2),X'28'       OVERLAY \"FIXED FLAG\" WITH SA ORDER.\n         AH    R1,WINLNLEN       POINT TO THE NEXT WINDOW LINE.\n         L     R15,WINSIZE       POINT TO SCREEN DIMENSIONS.\n         A     R2,4(,R15)\n         LA    R2,WINLINOH(,R2)  POINT TO THE NEXT SCREEN LINE.\n         BR    R14               RETURN.\nWINCLRMV MVC   WINLINOH+1(0,R2),WINLINOH(R2)    <<< EXECUTED >>>\nWINLINMV MVC   LL-79(0,R2),LL-79(R1)            <<< EXECUTED >>>\nWINSUFMV MVC   0(0,R2),0(R1)                    <<< EXECUTED >>>\nWINTRLER MVC   0(4,R2),BLNKREST  CLEAR THE REMAINDER OF THE SCREEN.\n         LA    R2,4(,R2)         POINT TO END OF LOADED DATA.\n         LA    R0,1              INDICATE LAST LINE HAS BEEN LOADED.\n         BR    R14               RETURN.\nWINFILLD MVC   0(LL,R2),WINFLMSG SUPPLY WARNING MESSAGE.\n         AH    R1,WINLNLEN       POINT TO THE NEXT WINDOW LINE.\n         MVC   0(2,R1),FFFF+2    ENSURE NO MORE LINES FETCHED.\n         LA    R2,LL(,R2)        POINT TO THE NEXT SCREEN LINE.\n         BR    R14               RETURN.\n         TITLE 'WINDOW MANAGER - VARIABLES AND CONSTANTS'\nWINSVR11 DC    F'0'              SAVE CALLING OPTION'S GPR11 VALUES.\nWINSVR14 DC    F'0'              SAVE CALLING OPTION'S GPR14 VALUES.\nWINLINES DC    F'0'              FORMATTED DISPLAY LINE COUNT.\nWINBUFFL DC    F'0'              SIZE OF THE WINDOW BUFFER.\nWINBUFF  DC    A(0)              ADDRESS OF THE WINDOW BUFFER.\nWINEND   DC    A(0)              SAFETY STOPPER FOR LINE LOADING.\nWINTOP   DC    F'1'              TOP-OF-SCREEN DISPLAY LINE NUMBER.\nWINSUFIX DC    A(0)              ADDRESS OF DATA STREAM SUFFIX.\nWINSUFLN DC    F'-1'             LENGTH CODE OF DATA STREAM SUFFIX.\nWINSIZE  DC    A(LINES)          POINTER SCREEN LINES AND COLUMNS.\nWINHDGCT DC    H'0'              NUMBER OF HEADING LINES TO PRESERVE.\nWINOFFST DC    H'0'              SCROLL RIGHT OFFSET.\nWINLNLEN DC    H'0'              LENGTH OF OPTION'S LINE.\nWINLEFT  DC    H'0'              LENGTH OF LEFT END TO PRESERVE.\nWINRIGHT DC    H'0'              LENGTH OF RIGHT END TO PRESERVE.\nWINLINOH EQU   8                 DATA STREAM LENGTH LESS COLUMN COUNT.\nWINFULL  DC    X'FFFE'           FLAG FOR FULL WINDOW - NO MORE LINES.\nWINFLMSG DC    X'2841F11BF8502842F2'\n         DC    CL79'   Display buffer full - data discarded   '\n         LTORG\nW32TO31T DC    C'234567'         MAP A->F TO 2->7.\n         SPACE\n         DS    0H\n         TITLE 'WINDOW MANAGER - WRITE ENTIRE REPORT SUBROUTINE'\nWINWRITE STM   R14,R12,SAVE+12   SAVE REGISTERS.\n         TM    MODESW,OPNR       REPORT FILE OPEN?\n         BO    WINDOWRT          YES, IMREPORT MUST EXIST.\n         L     R4,WINSIZE        NO, POINT TO SCREEN DIMENSIONS.\n         L     R5,0(,R4)         GET NUMBER OF LINES.\n         BCTR  R5,0\n         MH    R5,6(,R4)         GET BUFFER ADDR OF LAST LINE 1ST COL.\n         STCM  R5,3,WINDDMSG+2   SET IT INTO MESSAGE DATA STREAM.\n         STCM  R5,3,WINOKMSG+2   SET IT INTO MESSAGE DATA STREAM.\n         TM    WINDDMSG+2,X'F0'  BUFFER ADDRESS OVER 4095?\n         BNZ   WINGETDD          YES, 14-BIT ADDRESSING REQUIRED.\n         SRL   R5,6              NO, USE 12-BIT ADDRESSING.\n         STC   R5,WINDDMSG+2\n         NI    WINDDMSG+3,X'3F'\n         TR    WINDDMSG+2(2),TABLE\n         STC   R5,WINOKMSG+2\n         NI    WINOKMSG+3,X'3F'\n         TR    WINOKMSG+2(2),TABLE\nWINGETDD L     R4,PSATOLD        GET POINTER TO CURRENT TCB.\n         SLR   R5,R5             CLEAR WORK REGISTER.\n         L     R4,12(0,R4)       POINT TO TIOT.\n         LA    R4,24(0,R4)       POINT TO TIOELNGH.\nWINCHKDD CLC   4(8,R4),IMREPORT+DCBDDNAM-IHADCB\n         BE    WINUSEDD          FILE EXISTS SO GO AND OPEN IT.\n         IC    R5,0(0,R4)        GET TIOT ENTRY LENGTH.\n         AR    R4,R5             POINT TO NEXT TIOT ENTRY.\n         CLI   0(R4),0           ZERO LENGTH ENTRY?\n         BNE   WINCHKDD          NO, CHECK OUT THIS ENTRY.\n         LM    R14,R12,SAVE+12   YES, NOT THERE, RESTORE REGISTERS.\n         LA    R1,WINDDMSG       POINT TO THE MESSAGE.\n         LA    R0,WINDDMLN       GET THE MESSAGE LENGTH.\n         B     WINDSPOK          ISSUE THE MESSAGE AND GET NEXT INPUT.\nWINUSEDD OPEN  (IMREPORT,OUTPUT) OPEN THE REPORT FILE.\n         OI    MODESW,OPNR       FLAG REPORT FILE OPEN.\nWINDOWRT LA    R0,84             GET FIRST RECORD LENGTH.\n         STH   R0,WINVAREC       SET LENGTH IN RDW.\n         MVC   WINVAREC+4(80),BLANKS\n         MVI   WINVAREC+4,C'1'   NEW PAGE FOR NEW REPORT.\n         MVC   WINVAREC+8(40),HEADING\n         MVC   WINVAREC+79(5),BUSY\n         DROP  R13               GOTAREA.\n         LA    R1,WINWRTSA       CHAIN SAVE AREAS.\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         PUT   IMREPORT,WINVAREC WRITE REPORT HEADING.\n         MVI   WINVAREC+4,C' '   RESET CARRIAGE CONTROL.\n         L     R3,WINLINES       GET FORMATTED LINES TO WRITE.\n         L     R4,WINBUFF        POINT TO WINDOW BUFFER.\n         L     R5,PRNTADDR       POINT TO SCREEN PRINT SUBROUTINE.\n         USING SCRNPRNT,R5\n         LH    R6,WINLNLEN       GET OPTION'S LINE LENGTH.\n         AHI   R6,-(LL-79)       GET DATA BYTES PER LINE.\n         LA    R6,5(,R6)         CATER FOR RDW AND CARRIAGE CONTROL.\nWINWRTLP MVC   WINVAREC+5(252),LL-79(R4)\n         TR    WINVAREC+5(252),PRTXLATE\n         LR    R1,R6             COPY EXPECTED RECORD LENGTH.\n         CLI   0(R4),X'FF'       NON-SCROLLABLE LINE?\n         BNE   *+8               NO, CORRECT LENGTH LOADED.\n         LA    R1,79+5           YES, GET APPROPRIATE LENGTH.\n         LA    R15,WINVAREC      POINT TO THE RECORD.\n         AR    R15,R1            POINT PAST RECORD'S DATA.\nWINSPCLP BCTR  R15,0             BACK UP A BYTE.\n         CLI   0(R15),C' '       TRAILING BLANK?\n         BNE   WINRDWOK          NO, NOW HAVE LENGTH FOR RDW.\n         BCT   R1,WINSPCLP       YES, DECREMENT RECORD LENGTH.\nWINRDWOK CHI   R1,6              LENGTH LESS THAN MINIMUM?\n         BNL   *+8               NO, CONTINUE.\n         LHI   R1,6              YES, USE MINIMUM.\n         STH   R1,WINVAREC       SET LENGTH IN RDW.\n         PUT   IMREPORT,WINVAREC WRITE REPORT HEADING.\n         AH    R4,WINLNLEN       POINT TO NEXT LINE IN BUFFER.\n         BCT   R3,WINWRTLP       PROCESS NEXT LINE.\n         DROP  R5                SCRNPRNT.\n         L     R13,4(,R13)       POINT TO PREVIOUS SAVE AREA.\n         USING GOTAREA,R13\n         LM    R14,R12,SAVE+12   ALL DONE, RESTORE REGISTERS.\n         LA    R1,WINOKMSG       POINT TO CONFIRMATION MESSAGE.\n         LA    R0,WINOKMLN       GET THE MESSAGE LENGTH.\n         B     WINDSPOK          ISSUE THE MESSAGE AND GET NEXT INPUT.\n         DROP  R11               WNDWMNGR.\n         TITLE 'WINDOW MANAGER - WRITE ENTIRE REPORT DATA ITEMS'\nWINWRTSA DC    18F'0'            SAVE AREA.\nWINVAREC DC    XL256'00'\n         PRINT NOGEN\nIMREPORT DCB   DSORG=PS,MACRF=(PM),DDNAME=IMREPORT,RECFM=VBA,LRECL=255\n         PRINT GEN\nWINDDMSG DCS   X'C5',SBA,(24,1)\n         DC    X'1BF8502842F22841F2'\n         DC    CL79'         Report request ignored   -   IMREPORT file+\n                not pre-allocated          '\n         DC    X'1140402842001B404E2841F4130000'\nWINDDMLN EQU   *-WINDDMSG\nWINOKMSG DCS   X'C1',SBA,(24,1)\n         DC    X'1BF0502842F42841F2'\n         DC    CL79'                    Entire report written to IMREPO+\n               RT file                     '\n         DC    X'1140402842001B404E2841F4130000'\nWINOKMLN EQU   *-WINOKMSG\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCM1": {"ttr": 8708, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x08\\x00\\x00\\x00\\x95\\x08\\x1f\\x01\\x05\\x02o#8\\x00\\xd6\\x00\\xca\\x00\\x15\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "43.08", "flags": 0, "createdate": "1995-03-22T00:00:00", "modifydate": "2005-01-26T23:38:00", "lines": 214, "newlines": 202, "modlines": 21, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986  PRYCROFT SIX PTY LTD\n         TITLE 'MAINLINE - OPTION/SUBROUTINE/MONITOR SELECTION'\n         USING EXAMINEC,R12\n         USING GOTAREA,R13\nEXAMINEC SLR   R0,R0\n         STH   R0,ENDDEPTH       \"END\" OUT OF WHOLE MONITOR SUBROUTINE.\n         STH   R0,GLOSSPG#       CLEAR GLOSSARY PAGE NUMBER.\n         ST    R0,CRNTGLOS       CLEAR GLOSSARY VECTOR ORIGIN.\n         L     R1,INITADDR       GET ADDRESSABILITY TO SCRNHDR.\n         USING INITIAL,R1        RESTORE EXPECTED HEADING FORMAT.\n         MVC   HOME(HDRLEN),SCRNHDR\n         DROP  R1                INITIAL.\n         CLI   INCHARS,C'Z'      CHECK IF TERMINATION REQUESTED.\n         BE    EODAD             BYE BYE BABY....\n         CLI   INCHARS,C'X'      CHECK IF TERMINATION REQUESTED.\n         BE    EODAD             BYE BYE BABY....\n         MVC   INBUFF+1(2),ONE   FORCE AS IF PRIMARY INPUT.\nFINDOPTN L     R3,OPLKUPAD       POINT TO FIRST SUBROUTINE ENTRY.\nSCAN4MON CLC   0(1,R3),INCHARS   COMPARE ENTRY TO SELECTION.\n         BE    FOUNDMON          GREAT, FOUND IT!\n         BH    SHOWMENU          NOT FOUND BECAUSE IT WASN'T THERE.\n         LA    R3,OPTBLEN(,R3)   POINT TO NEXT ENTRY.\n         B     SCAN4MON          TRY NEXT ENTRY.\nSHOWMENU L     R3,OPLKUPAD       USE FIRST ENTRY WHICH IS MAIN MENU.\nFOUNDMON ST    R3,CRNTOPTN       REMEMBER ENTRY ADDRESS.\n         MVC   OPTNATR,COPYATR1  GET PSCBATR1 IN WORK AREA.\n         OC    OPTNATR,1(R3)     PROCESS AGAINST OPTION FLAG BYTE.\n         TM    OPTNATR,X'FA'     SUFFICIENT AUTHORITY FOR THIS OPTION?\n         BNO   SHOWMENU          NO, SHOW MAIN MENU.\n         L     R15,WINMANAD      YES, POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         ST    R1,WINTOP         RESET TOP-OF-SCREEN.\n         MVI   WINSUFLN,X'FF'    NEGATE DATA STREAM SUFFIX LENGTH CODE.\n         MVC   WINHDGCT(8),8(R3) COPY OPTION'S WINDOW VARIABLES.\n         MVC   WINRIGHT,2(R3)\n         NI    WINRIGHT,X'7F'\n         DROP  R15               WNDWMNGR.\n         L     R11,4(,R3)        LOAD OPTION'S START ADDRESS.\n         BR    R11               BRANCH TO OPTION'S SUBROUTINE.\nEXAMINEK SLR   R0,R0\n         STH   R0,ENDDEPTH       \"END\" OUT OF WHOLE MONITOR SUBROUTINE.\n         STH   R0,GLOSSPG#       CLEAR GLOSSARY PAGE NUMBER.\n         ST    R0,CRNTGLOS       CLEAR GLOSSARY VECTOR ORIGIN.\n         L     R1,INITADDR       GET ADDRESSABILITY TO SCRNHDR.\n         USING INITIAL,R1        RESTORE EXPECTED HEADING FORMAT.\n         MVC   HOME(HDRLEN),SCRNHDR\n         DROP  R1                INITIAL.\n         L     R3,OPLKUPAD\n         CLI   INBUFF,3          PF3/15?\n         BE    ENDPFKEY          YES.\n         LA    R3,ADDRMON-OPLOOKUP(,R3)\n         CLI   INBUFF,6          PF6/18?\n         BE    FOUNDMON          YES, CALL ADDRESS SPACE MONITOR.\n         LA    R3,DEVMON-ADDRMON(,R3)\n         CLI   INBUFF,9          PF9/21?\n         BE    FOUNDMON          YES, CALL DEVICE MONITOR.\n*                                SHOULD NEVER GET HERE - ALL PFKS USED.\n         LA    R3,LISTLSTR-DEVMON(,R3)\n         STFSMODE ON,NOEDIT=YES  RESTORE VTAM FULL SCREEN MODE FOR PA1.\n         B     FOUNDMON          CALL LIBRARY LISTER (BUG FREE SCREEN).\n         SPACE\n*         THE ABOVE CODE MEANS THAT A PA1/ATTN SHOULD BE ABLE TO BREAK\n*         A \"SCREEN ERASURE CAUSED BY ERROR RECOVERY PROCEDURE\" LOOP\n*         (ASSUMING OPTION \"L\" CAN COME UP WITH AN ERROR FREE SCREEN).\n         SPACE\nENDPFKEY C     R3,CRNTOPTN       CURRENTLY SHOWING THE MAIN MENU?\n         BNE   FOUNDMON          NO, SO \"END\" BACK TO IT.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZ    FOUNDMON          NO, PF3 CAN'T STOP STARTED TASK.\n         B     EODAD             YES, SO TERMINATE AND EXIT.\n         TITLE 'ATTENTION INTERRUPT EXIT'\n         USING ATTNEXIT,R15      ESTABLISH ADDRESSABILITY.\nATTNEXIT OI    MODESW2,ATTN      SET INTERRUPT REQUEST FLAG.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZR   R14               NO, RETURN.\n         STM   R14,R12,12(R13)   SAVE REGISTERS FOR EXTRA PROCESSING.\n         AIF   (&MSPMON).ATSACOK\n         SAC   X'000'            ENSURE PRIMARY SPACE MODE.\n.ATSACOK ANOP\n         L     R1,PSATOLD        GET POINTER TO CURRENT TCB.\n         TM    30(R1),X'08'      IS TCBFJMC ON?\n         BZ    ATTNTERM          NO, RETURN.\n         DROP  R15               ATTNEXIT.\n         SPACE 2\n*        THIS CODE WILL CAUSE AN ATTENTION TO RESTART OTHER TASKS\n*        IN THIS ADDRESS SPACE.  OTHERWISE THE TSO USER WOULD HAVE\n*        TO BE CANCELLED AND FORCED TO GET OUT OF THE NON-SWAPPABLE\n*        WAIT STATE CAUSED BY CROSS MEMORY FUNNIES IN SOME OPTIONS.\n         SPACE\n         LR    R11,R15           NEW BASE REGISTER FOR THIS EXIT.\n         USING ATTNEXIT,R11      ESTABLISH ADDRESSABILITY.\n         L     R1,PSAAOLD        POINT TO THE CURRENT ASCB.\n         LH    R1,ASID(,R1)      GET CURRENT ASID.\n         SSAR  R1                GET OUT OF CROSS MEMORY MODE.\n         L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\n         MODESET MF=(E,MDSET0)   KEY ZERO REQUIRED FOR STATUS MACRO.\n         STATUS RESET,MC,STEP    TURN OFF TCBJMC -MUST COMPLETE STATUS.\n         AIF   (&MSPMON).ATOKSWP\n         L     R1,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R1\n         L     R1,RMCTMCT        POINT TO THE MCT.\n         DROP  R1                RMCT.\n         USING MCT,R1\n         TM    MCTSFLGS,MCTSQA1+MCTSQA2 SQA SHORTAGE?\n         BNZ   ATTNNSWP                 YES, STAY NON-SWAPPABLE.\n         TM    MCTOFLGS,MCTASM1+MCTASM2 AUXILIARY STORAGE SHORTAGE?\n         BNZ   ATTNNSWP                 YES, STAY NON-SWAPPABLE.\n         TM    MCTCFLGS,MCTRLSHT+MCTB16SH REAL/PAGEABLE STG SHORTAGE?\n         BNZ   ATTNNSWP                 YES, STAY NON-SWAPPABLE.\n         DROP  R1                       MCT.\n         SYSEVENT OKSWAP                NO, BECOME SWAPPABLE.\nATTNNSWP DS    0H\n         AGO   .ATSWPOK\n.ATOKSWP ANOP\n         LA    R0,X'2A'          LOAD OKSWAP SYSEVENT CODE.\n         SVC   95                ISSUE SYSEVENT SVC.\n.ATSWPOK ANOP\n         MODESET MF=(E,MDSETN0)  RETURN TO TASK'S KEY.\nATTNTERM LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         BR    R14               RETURN.\n         DROP  R11               ATTNEXIT.\n         SPACE\nAXVALUE  DC    F'0'              SAVE AREA FOR ACCESS INDEX.\n         TITLE 'MACRO LIST FORMS'\nSTAXLIST STAX  ATTNEXIT,MF=L\n         SPACE 2\nMDSET0   MODESET KEY=ZERO,MF=L\n         SPACE 2\nMDSETN0  MODESET KEY=NZERO,MF=L\n         SPACE 2\nMDSTSUP0 MODESET MODE=SUP,KEY=ZERO,MF=L\n         SPACE 2\nMDSTPROB MODESET MODE=PROB,KEY=NZERO,MF=L\n         SPACE 2\nMDSTSUP  MODESET MODE=SUP,MF=L\n         SPACE 2\nMDSTPRB  MODESET MODE=PROB,MF=L\n         SPACE 2\n         AIF   (&MSPMON).NOBEER\nALESERVL ALESERV MF=L\n.NOBEER  ANOP\n         TITLE 'VTOC READING SUBROUTINE INTERFACE'\n*              THIS INTERFACE ROUTINE IS USED BECAUSE\n*              XVTCREAD IS A 24-BIT PROGRAM.\n*              THIS INTERFACE SHOULD BE INVOKED WITH A BASSM.\n*              HENCE, THIS INTERFACE SHOULD RUN IN 24-BIT AMODE.\n*              RETURN TO CALLING OPTION IS WITH A BSM.\n*              HENCE, THE AMODE OF THE CALLING OPTION IS RESTORED.\n         SPACE 2\nVTOCCOMM ST    R14,SAVRETAD      SAVE CALLING OPTION RETURN DETAILS.\n         L     R15,VTCRDADR      GET XVTCREAD ENTRY POINT ADDRESS.\n         BASR  R14,R15           INVOKE XVTCREAD.\n         L     R14,SAVRETAD      RESTORE RETURN ADDRESS AND MODE.\n         BSM   0,R14             RETURN TO CALLING OPTION.\n         TITLE 'SCREEN INPUT/OUTPUT MANAGER'\nSCREENIO STM   R14,R12,SAVE+12   SAVE ALL GENERAL REGISTER VALUES.\n         L     R11,STGCHKAD      GET STORAGE SHORTAGE CHECK ROUTINE EP.\n         BASR  R14,R11           CALL IT.\n         LM    R14,R12,SAVE+12   RESTORE ALL GENERAL PURPOSE REGISTERS.\n         L     R8,SCRNIOAD\n         BR    R8\n         TITLE 'STACKED ENTER MANAGER'\nSTACKER  L     R1,CRNTOPTN\n         TM    1(R1),X'04'       AUTO-UPDATE SUPPORTED?\n         BZ    DORESHOW          NO, SUPPRESS AUTO-UPDATE REQUEST.\n         ICM   R1,B'1111',DELAY  IS DELAY ZERO?\n         BNZ   NOHOLD            NO, HOLD TPUTS NOT REQUIRED.\n         MVI   TPUTFLG,X'0B'     YES, USE HOLD TPUTS (AVOID S0C9).\nNOHOLD   NI    INCHARS,X'0F'     GET NUMERIC PART.\n         SLR   R1,R1             CLEAR REGISTER.\n         IC    R1,INCHARS        GET FIRST NUMBER.\n         CLI   INCHARS+1,C'0'    SECOND DIGIT GIVEN?\n         BL    CHECKAID          NO, SINGLE DIGIT REQUEST.\n         MH    R1,TEN+2          YES, HAVE TENS DIGIT.\n         NI    INCHARS+1,X'0F'   GET NUMERIC PART OF UNITS.\n         SLR   R0,R0             CLEAR REGISTER.\n         IC    R0,INCHARS+1      GET SECOND NUMBER.\n         AR    R1,R0             GET COUNT OF STACKED ENTERS REQUESTED.\nCHECKAID CLI   INBUFF,13         ENTER?\n         BNL   NEXTONE           YES, UPDATE REFRESH COUNTER.\n         ST    R1,SCRLAMT        NO, THIS MAY BE A SCROLL AMOUNT.\n         BR    R9                RETURN TO CALLER.\n         SPACE 2\nWAITER   LH    R1,REFRESH#       GET STACK DEPTH.\n         BCT   R1,NEXTONE        DECREMENT.\nNEXTZERO STH   R1,REFRESH#       ZERO, SAVE COUNTER.\n         MVC   DOWNCNTR,FFFF     ERASE COUNTER REPEATER.\n         MVI   TPUTFLG,X'03'     USE NOHOLD TPUTS FOR MANUAL UPDATE.\n         B     DELAYIT           EXECUTE REQUESTED DELAY.\nDORESHOW L     R8,SCRNIOAD\n         USING SCRNIO,R8\n         B     DOORSHOW\n         DROP  R8                SCRNIO.\n         SPACE\nNEXTONE  STH   R1,REFRESH#       SAVE DECREMENTED COUNTER VALUE.\n         CVD   R1,WORK           REPORT REMAINING STACK DEPTH.\n         OI    WORK+7,X'0F'\n         UNPK  DOWNCNTR,WORK+6(2)\n         SPACE\nDELAYIT  ICM   R1,B'1111',DELAY  IS DELAY LENGTH ZERO?\n         BZ    DELAIDIT          YES, AVOID SVC OVERHEAD.\n         SPACE\n         STIMER WAIT,BINTVL=DELAY\n         SPACE\nDELAIDIT TM    MODESW2,ATTN      ANY ATTENTION INTERRUPTION?\n         BZR   R9                NO, RETURN TO CALLER.\n         XC    REFRESH#,REFRESH#     ZERO COUNTER.\n         MVC   DOWNCNTR,FFFF     ERASE COUNTER REPEATER.\n         MVI   TPUTFLG,X'03'     USE NOHOLD TPUTS FOR MANUAL UPDATE.\n         NI    MODESW2,255-ATTN  ZERO ATTENTION FLAG.\n         STFSMODE ON,NOEDIT=YES  RESTORE VTAM FULL SCREEN MODE.\n         BR    R9                DELAY DONE SO RETURN TO CALLER.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCM2": {"ttr": 8713, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x01\\x00\\x00\\x00\\x95\\x08\\x1f\\x00\\x955O\\x133\\x00G\\x00G\\x00\\x01\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "43.01", "flags": 0, "createdate": "1995-03-22T00:00:00", "modifydate": "1995-12-20T13:33:00", "lines": 71, "newlines": 71, "modlines": 1, "user": "T$QGP75"}, "text": "*        COPYRIGHT (C) 1986  PRYCROFT SIX PTY LTD\nLCMSG    DC    X'C1115DD81BF0502842F42841F2' \"LOG CLOSED\" MESSAGE.\n         DC    CL26'          IMPLOG CLOSED  ('\nLCMSGCLS DC    C'?',CL12')           '\n         DC    X'1140402842001B404E2841F4130000'\nLCMSGLEN EQU   *-LCMSG\nNFMSG    DC    X'C5115DD81BF8502842F22841F2' \"NO FILE\" MESSAGE.\n         DC    CL32'    IMPLOG NOT ALLOCATED  -  RC='\nNFMSGRC  DC    CL2'00',CL5' '\n         DC    X'1140402842001B404E2841F4130000'\nNFMSGLEN EQU   *-NFMSG\nNPMSG    DC    X'C5115DD81BF8502842F22841F2' \"NO PRINT\" MESSAGE.\n         DC    CL39'    NOT SUPPORTED UNDER THIS OPTION    '\n         DC    X'1140402842001B404E2841F4130000'\nNPMSGLEN EQU   *-NPMSG\nPRMSG    DC    X'C1115DD81BF0502842F42841F2' \"PRINTED\" MESSAGE.\n         DC    CL33'   DETAIL SCREEN IMAGE PRINTED  ('\nPRMSGCLS DC    C'?',CL5')    '\n         DC    X'1140402842001B404E2841F4130000'\nPRMSGLEN EQU   *-PRMSG\nED2PNT1  DC    X'4021204B20'\nED3      DC    X'40202120',C':00:'\nED5      DC    X'402020202120D2'\nED7      DC    X'4020202020202120'\nED3Z     DS    0CL4\nED5Z     DS    0CL6\nED7Z     DS    0CL8\nED9Z     DS    0CL10\nED11     DC    X'402020202020202020202120'\nLOWX     DC    X'284100&LOW'\nMEDX     DC    X'284100&MED'\nHIGHX    DC    X'284100&HIGH'\nBLNKREST DC    XL4'3C404040'\n         COPY  JPRFXMSG\n         AGO   .NOTJUSE\nJPRFXMSG DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER JOB NAME PREFIX OR COMPLETE JOB NAME'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nSELJOBNM DC    CL8' '\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(USE',X'&HIGH',C'J/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL JOB NAME PREFIX SELECTION)'\n         DC    X'11D1E3'\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\nJOBSELEN EQU   *-JPRFXMSG\n.NOTJUSE ANOP\n         SPACE\n         LTORG\n         DS    0D\nTABLE    DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         SPACE\nXLATETBL DC    X'404B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  3278 PRINTABLE\n         DC    X'4B4B4B6D4B4B4B4B4B4B4B4B1C4B1E4B'      CHARACTERS.\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'808182838485868788898A8B8C8D8E8F'\n         DC    X'909192939495969798999A9B9C9D9E9F'\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCM3": {"ttr": 8716, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x0c\\x004\\x00\\x95\\x08\\x1f\\x01\\x110\\x7f\\x14$\\x02\\xb7\\x02\\x06\\x00\\xc2\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "43.12", "flags": 0, "createdate": "1995-03-22T00:00:00", "modifydate": "2011-11-03T14:24:34", "lines": 695, "newlines": 518, "modlines": 194, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1989  PRYCROFT SIX PTY LTD\n         TITLE '3270 DATA STREAM GENERATOR'\n*\n*  THIS ROUTINE DYNAMICALLY ACQUIRES STORAGE, DYNAMICALLY GENERATES\n*  THE OPTIMISED OUTPUT TERMINAL DATA STREAM (HOUSED IN SAID STORAGE),\n*  SENDS THE DATA STREAM TO THE TERMINAL VIA A TPUT (IF RUNNING IN A\n*  TSO USER ADDRESS SPACE) OR VIA A CALL TO EXCP3270, FREES THE\n*  ACQUIRED STORAGE, AND RETURNS TO THE CALLER.\n*\n*  STRM3270 IS CALLED BY THE SCREEN I/O MANAGER SCRNIO.\n*\n*  ON ENTRY:   R0 = OUTPUT DATA LENGTH\n*              R1 = OUTPUT DATA ADDRESS\n*              R2 = RETURN ADDRESS\n*             R12 = GLOBAL BASE\n*\n*  MENU3270 IS THE ENTRY POINT USED BY MAINMENU AFTER IT HAS ACQUIRED\n*  STORAGE AND DYNAMICALLY LOADED AVAILABLE MENU OPTIONS INTO IT.\n*\n*  THE OUTPUT DATA TO BE PROCESSED AND OPTIMISED BY THIS ROUTINE MAY\n*  CONTAIN (IN NO PARTICULAR ORDER):\n*      (1) TEXT FOR DISPLAY;\n*      (2) VALID ESCAPE CODES AND ORDERS (INCLUDING A VTAM WRITE\n*          COMMAND) FOR BASIC 3270, EXTENDED 3270 AND FUJITSU F9526\n*          TERMINALS;\n*      (3) INTERNAL DISPLAY CODES TO BE INTERPRETED BY THIS ROUTINE.\n*\n*  THE OUTPUT DATA INPUT TO THIS ROUTINE REMAINS UNCHANGED.\n*\n*  THE OUTPUT DATA STREAM CREATED BY THIS ROUTINE MAY CONTAIN:\n*      (1) A VTAM WRITE COMMAND, POSSIBLY PRECEDED BY AN ESCAPE;\n*      (2) TEXT FOR DISPLAY;\n*      (3) BASIC 3270 ORDERS;\n*      (4) ORDERS OF ONE OF THE FOLLOWING TYPES:\n*          (A) EXTENDED 3270 ORDERS INCLUDING GRAPHIC ESCAPE;\n*          (B) EXTENDED FUJITSU F9526 ORDERS;\n*          (C) EXTENDED FUJITSU F6680 ORDERS.\n*\n*  SUPPORTED INTERNAL DISPLAY CODES ARE:\n*      (1) REVERSE VIDEO \"CROSS HATCH\" OF EACH COLOUR REQUESTED BY\n*          CODE POINTS IN THE X'01' TO X'07' RANGE.  REVERSE VIDEO\n*          BLANKS ARE USED WHEN THE TERMINAL DOES NOT SUPPORT\n*          GRAPHIC ESCAPE.  VARIOUS KEYBOARD CHARACTERS ARE USED AS\n*          SUPPLIED BY THE PRTXLATE TRANSLATE TABLE IF THE TERMINAL\n*          DOES NOT SUPPORT EXTENDED COLOUR.\n*      (2) NORMAL VIDEO \"CROSS HATCH\" OF EACH COLOUR REQUESTED BY\n*          CODE POINTS IN THE X'09' TO X'0F' RANGE.  BLANKS ARE\n*          USED WHEN THE TERMINAL DOES NOT SUPPORT GRAPHIC ESCAPE.\n*          PERIODS ARE USED AS SUPPLIED BY THE PRTXLATE TRANSLATE\n*          TABLE IF THE TERMINAL DOES NOT SUPPORT EXTENDED COLOUR.\n*      (3) SUPERSCRIPT DECIMAL DIGITS REQUESTED BY CODE POINTS IN THE\n*          X'30' TO X'39' RANGE.  NORMAL EBCDIC DECIMAL DIGITS ARE\n*          USED WHEN THE TERMINAL DOES NOT SUPPORT GRAPHIC ESCAPE.\n*          NOTE: \"ATTRIBUTE PERCOLATION\" IS SOMETIMES ENABLED WHERE\n*          THE ATTRIBUTES OF THE PREVIOUS DISPLAY LOCATION CAN BE\n*          INHERITED BY SUPERSCRIPT DIGITS.  THIS ALLOWS NUMBERS\n*          TO BE SHOWN IN A GRAPH PLOT WITHOUT AFFECTING THE ACTUAL\n*          PLOT DISPLAY.  THIS IS IMPLEMENTED FOR OPTION \"G\" (WHERE\n*          THE GRAPHS ARE HORIZONTAL) BUT NOT FOR OPTION \"U\" (WHERE\n*          THE GRAPHS ARE VERTICAL).\n*      (4) CONTINUOUS HORIZONTAL LINE REQUESTED BY THE X'3A' CODE\n*          POINT.  THE EBCDIC MINUS SIGN (X'60') IS USED WHEN THE\n*          TERMINAL DOES NOT SUPPORT GRAPHIC ESCAPE.\n*      (5) CONTINUOUS VERTICAL LINE REQUESTED BY THE X'3B' CODE\n*          POINT.  THE EBCDIC OR SIGN (X'4F') IS USED WHEN THE\n*          TERMINAL DOES NOT SUPPORT GRAPHIC ESCAPE.\n*      (6) IMBEDDED COLOUR CHANGE TO EACH COLOUR REQUESTED BY CODE\n*          POINTS IN THE X'21' TO X'27' RANGE.  THIS FEATURE WAS\n*          ADDED TO ALLOW MORE THAN ONE COLOUR TO BE SHOWN ON A\n*          SINGLE DISPLAY LINE.  THIS FEATURE IS ALSO USED TO CREATE\n*          TAB-SELECTABLE \"ZOOM\" FIELDS.  AS AN SA ORDER WILL BE USED\n*          TO EFFECT THE COLOUR CHANGE, THE SCREEN LOCATION WILL BE\n*          OCCUPIED BY EITHER A BLANK (WHEN THE OPTION DOES NOT\n*          POSSESS TAB-SELECTABLE FIELDS) OR A FIELD ATTRIBUTE BYTE\n*          (WHEN THE OPTION CAN MAKE TAB-SELECTABLE FIELDS), THE\n*          DECISION BEING MADE BY AN EXPLICIT CHECK FOR SPECIFIC\n*          OPTIONS.  TAB-SELECTABLE FIELDS ARE CREATED BY OPTIONS\n*          REQUESTING AN IMBEDDED COLOUR CHANGE TO GREEN, WHICH CAUSES\n*          THE GENERATED FIELD ATTRIBUTE TO BE UNPROTECTED.  FIELD\n*          ATTRIBUTES GENERATED BY REQUESTS FOR ALL SIX OTHER COLOURS\n*          ARE PROTECTED NON-AUTOSKIP.\n*\nSTRM3270 LR    R11,R0            SAVE ORIGINAL OUTPUT LENGTH.\n         LR    R9,R1             SAVE ORIGINAL OUTPUT ADDRESS.\n         LA    R0,2560\n         SLL   R0,3              GET GETMAIN REQUIREMENTS (20K).\n         LR    R6,R0             COPY STORAGE SIZE.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(BELOW,ANY)\n*  THE BRANCH TARGET OF THE GETMAIN MACRO ABOVE IS THE HIGHEST ADDRESS\n*  IN THE PROGRAM THAT NEEDS TO BE COVERED BY THE GLOBAL BASE GPR12.\n         LA    R1,0(,R1)         ENSURE ADDRESS FORMAT.\n         ST    R6,0(,R1)         SAVE STORAGE SIZE.\n         ST    R1,4(,R1)         SAVE STORAGE ADDRESS.\n         LR    R4,R1             POINT TO GETMAINED AREA.\n         LA    R11,0(R11,R9)     GET END ADDRESS OF ORIGINAL OUTPUT.\n         BASR  R3,0\n         USING MENU3270,R3\nMENU3270 BCTR  R11,0             POINT TO LAST DATA STREAM BYTE.\n         LA    R8,12(,R4)        POINT TO OUTPUT AREA.\n         ST    R2,8(,R4)         SAVE RETURN ADDRESS.\n         LA    R6,LINES          POINT TO SCREEN DIMENSIONS.\n         NI    MODESW4,255-ALTO  RESET ALTS-WAS-SET FLAG.\n         TM    MODESW,ALTS       WIDE SCREEN FORMAT REQUIRED?\n         BNO   ALTSOKAY          NO.\n         LA    R6,OLDSIZE        YES, POINT TO WIDE DIMENSIONS.\n         OI    MODESW4,ALTO      REMEMBER ALTS WAS SET.\nALTSOKAY L     R2,0(,R6)\n         MH    R2,6(,R6)         DETERMINE SCREEN SIZE.\n         TM    MODESW,BTMP       NEED A CLEAR OR SIZE RESYNC?\n         BNO   BTMPGONE          NO.\n         MVI   STRMERAS,X'F1'    YES, ENSURE IT HAPPENS.\n         NI    MODESW,255-BTMP   FLAG PROCESSED SO RESET IT.\nBTMPGONE L     R6,FFFF           INITIAL SCREEN ADDRESS UNKNOWN.\n         MVI   OLDHILIT,X'00'    USE DEFAULT FOR PREVIOUS HIGHLIGHTING.\n         MVI   OLDCOLOR,X'00'    USE DEFAULT FOR PREVIOUS COLOUR.\n         MVC   INTNLGRF(1),SACODE    LOAD CORRECT SA CODE VALUE.\n         MVC   INTNLGRF+3(1),SACODE\n         MVC   INTNLGRF+8(1),SACODE\n         MVC   INTNLGRF+11(1),SACODE\n         LA    R10,3\n         CLI   0(R9),X'27'       LEADING ESCAPE?\n         BNE   SCRNTESC          NO.\n         CLI   1(R9),X'F5'       ERASE/WRITE?\n         BE    STRMSVF5          YES.\n         CLI   1(R9),X'7E'       TEST FOR ERASE/WRITE ALTERATE?\n         BE    STRMSV7E          YES.\n         B     COPYDATA          COPY ESCAPE, OP-CODE AND WCC.\nSCRNTESC LA    R10,2\n         CLI   0(R9),X'F1'       TEST FOR WRITE.\n         BE    COPYDATA          COPY OP-CODE AND WCC.\n         CLI   0(R9),X'F5'       TEST FOR ERASE/WRITE.\n         BE    STRMSVF5          COPY OP-CODE AND WCC.\n         CLI   0(R9),X'7E'       TEST FOR ERASE/WRITE ALTERATE.\n         BE    STRMSV7E          COPY OP-CODE AND WCC.\n         LA    R10,1\n         TM    MODESW,ALTS       NEED WIDE SCREEN NOW?\n         BO    STRMALTS          YES.\n         CLI   OLDCOLS+3,80      USING A WIDE SCREEN?\n         BH    STRMPRIM          YES, BUT NEED 80 COLUMNS NOW.\n         CLI   STRMERAS,X'F5'    KNOWN SCREEN SIZE SETTING?\n         BE    COPYDATA          YES, COPY WCC.\n         CLI   STRMERAS,X'7E'    KNOWN SCREEN SIZE SETTING?\n         BE    COPYDATA          YES, COPY WCC.\n         CLI   LINES+3,24        80 COLUMNS, BUT MORE THAN 24 LINES?\n         BH    STRMWIDE          YES, SET ALTERNATE SCREEN SIZE.\nSTRMPRIM CLI   STRMERAS,X'F5'    CURRENTLY USING PRIMARY SIZE?\n         BE    COPYDATA          YES, COPY WCC.\n         MVI   STRMERAS,X'F5'    NO, UPDATE SETTING.\n         B     STRMSIZE          GO UPDATE SCREEN HARDWARE.\nSTRMALTS CLI   STRMERAS,X'7E'    CURRENTLY USING ALTERNATE SIZE?\n         BE    COPYDATA          YES, COPY WCC.\nSTRMWIDE MVI   STRMERAS,X'7E'    NO, UPDATE SETTING.\nSTRMSIZE MVC   0(2,R8),STRMESCP  CHANGE SCREEN SIZE.\n         LA    R8,2(,R8)         POINT PAST ESCAPE SEQUENCE.\n         B     COPYDATA          COPY WCC.\nSTRMSVF5 MVI   STRMERAS,X'F5'\n         B     COPYDATA\nSTRMSV7E MVI   STRMERAS,X'7E'\n         B     COPYDATA\n         SPACE\nTESTORDR CLI   0(R9),X'13'       TEST FOR INSERT CURSOR.\n         BE    HANDLEIC\n         CLI   0(R9),X'1D'       TEST FOR START FIELD.\n         BE    HANDL241\n         CLI   0(R9),X'1B'       TEST FOR START FIELD EXTENDED (F9526).\n         BE    HANDLSFE\n         CLI   0(R9),X'11'       TEST FOR SET BUFFER ADDRESS.\n         BE    UPDATADR\n         CLI   0(R9),X'12'       TEST FOR ERASE UNPROTECTED.\n         BE    UPDATADR\n         CLI   0(R9),X'3C'       TEST FOR REPEAT TO ADDRESS.\n         BE    UPDATADR\n         CLI   0(R9),X'28'       TEST FOR SET ATTRIBUTE.\n         BE    HANDLESA\n         CLI   0(R9),X'29'       TEST FOR START FIELD EXTENDED.\n         BE    HANDLEMF\n         CLI   0(R9),X'2C'       TEST FOR MODIFY FIELD ATTRIBUTE.\n         BE    HANDLEMF\n         CLI   0(R9),X'0E'       TEST FOR SHIFT OUT.\n         BE    HANDLESO\n         CLI   0(R9),X'0F'       TEST FOR SHIFT IN.\n         BE    HANDLESI\n         CLI   0(R9),X'00'       TEST FOR NULL.\n         BE    NOTORDER\n         CLI   0(R9),X'08'       TEST FOR GRAPHICS ESCAPE.\n         BE    HANDLEGE\n         CLI   0(R9),X'10'       TEST FOR IMP INTERNAL GRAPHIC BYTE.\n         BL    HANDLEGB\n         SPACE\nNOTORDER LA    R10,1             SET INCREMENT TO ONE.\n         LR    R7,R9             SAVE ADDRESS OF FIRST CHARACTER.\nTESTNEXT LA    R6,1(,R6)         INCREMENT SCREEN ADDRESS.\n         BXH   R9,R10,ENDBUF     INCREMENT TO NEXT CHARACTER.\n         CLI   0(R7),X'30'       NUMERIC SUPERSCRIPT REQUEST?\n         BL    REPCHECK          NO, CHECK FOR CHARACTER REPITITION.\n         CLI   0(R7),X'3B'       NUMERIC SUPERSCRIPT REQUEST?\n         BNH   ENDBUF            YES, PROCESS IT BYTE BY BYTE.\nREPCHECK CLC   0(1,R7),0(R9)     SEE IF SAME CHARACTER.\n         BE    TESTNEXT          IF SAME THEN LOOP.\n         SPACE\nENDBUF   LR    R1,R9             ADDRESS OF CURRENT CHARACTER.\n         SR    R1,R7             NUMBER OF SAME CHARACTERS.\n         CHI   R1,4              AT LEAST FOUR FOR RA.\n         BH    BUILDRA\n         TM    0(R7),X'F7'       IMP INTERNAL GRAPHIC BYTE?\n         BZ    SKIPRA            NO, DON'T FORCE AN RA ORDER.\n         CLI   0(R7),X'10'       IMP INTERNAL GRAPHIC BYTE?\n         BL    BUILDRA           YES, ALSO BUILD AN RA ORDER.\n         CLI   0(R7),X'21'       IMBEDDED COLOUR CHANGE?\n         BL    SKIPRA            NO, JUST COPY THE DATA.\n         CLI   0(R7),X'28'       IMBEDDED COLOUR CHANGE?\n         BL    COLRCHNG          YES, HANDLE IT.\n         CLI   0(R7),X'30'       NUMERIC SUPERSCRIPT REQUEST?\n         BL    SKIPRA            NO, JUST COPY THE DATA.\n         CLI   0(R7),X'3B'       NUMERIC SUPERSCRIPT REQUEST?\n         BH    SKIPRA            NO, JUST COPY THE DATA.\n         LA    R0,6              GET A SIX.\n         LR    R15,R8            YES, COPY OUTPUT ADDRESS.\n         SLR   R15,R0            POINT BACK SIX BYTES IN OUTPUT.\n         CLC   SACODE,0(R15)     POINTING TO A SET ATTRIBUTE?\n         BNE   DOSSHERE          NO, STAY AT CURRENT LOCATION.\n         CLC   SACODE,3(R15)     FOLLOWED BY ANOTHER SET ATTRIBUTE?\n         BNE   DOSSHERE          NO, STAY AT CURRENT LOCATION.\n         L     R1,CRNTOPTN       YES.\n         TM    0(R1),X'03'       OPTION NEEDING ATTRIBUTE PERCOLATION?\n         BZ    DOSSHERE          NO, STAY AT CURRENT LOCATION.\n         SLR   R8,R0             POINT TO THE EDS ORDERS.\n         MVC   6(6,R8),0(R8)     MOVE THEM OUT OF THE WAY.\n         MVC   2(6,R8),6(R8)     MOVE THEM BACK TO TWO BYTES LATER.\nDOSSHERE MVC   1(1,R8),0(R7)     COPY SOURCE BYTE TO OUTPUT AREA.\n         MVI   0(R8),X'08'       SUPPLY GRAPHIC ESCAPE FOR SUPERSCRIPT.\n         OI    1(R8),X'F0'       CONVERT X'30'-X'3B' TO X'F0'-X'FB'.\n         CLI   1(R8),X'FA'       NUMERIC?\n         BL    SSNUMBOK          YES, GOOD.\n         MVI   1(R8),X'A2'       NO, DISPLAY A CONTINUOUS DASH.\n         BE    SSNUMBOK\n         MVI   1(R8),X'85'       DISPLAY A CONTINUOUS VERTICAL BAR.\n         CLI   SACODE,X'0E'      FUJITSU SCREEN EQUIPMENT?\n         BNE   SSNUMBOK          NO, PROCEED.\n         MVI   0(R8),X'1B'       YES, USE F9526 EXTENSIONS.\n         MVC   1(2,R8),OLDFIELD  COPY PREVIOUS ATTRIBUTES.\n         NI    2(R8),X'3F'       TURN OFF 3270 \"PARITY\" BITS.\n         OI    2(R8),X'02'       TURN ON VERTICAL LINE.\n         TR    2(1,R8),TABLE     SET APPROPRIATE \"PARITY\" BITS.\n         LA    R1,2              COUNT EXTRA OUTPUT BYTES.\n         B     SKPXLATE\nSSNUMBOK LA    R1,1              COUNT GE AS AN EXTRA OUTPUT BYTE.\n         TM    GRAFLAGS,GEOK     APL CHARACTERS AVAILABLE?\n         BO    TIDYUPSS          YES, USE SUPERSCRIPT.\n         MVC   0(1,R8),0(R7)     NO, COPY BYTE TO OUTPUT AREA AGAIN.\n         MVC   1(6,R8),2(R8)     SHUFFLE UP TRAILING ORDERS.\n         L     R1,PRNTADDR       GET ADDRESSABILITY TO TRANSLATE TABLE.\n         USING SCRNPRNT,R1\n         TR    0(1,R8),PRTXLATE  DO NOT ATTEMPT TO USE GRAPHIC ESCAPE.\n         DROP  R1                SCRNPRNT.\n         SLR   R1,R1             DO NOT COUNT GE AFTER ALL.\nTIDYUPSS CR    R8,R15            WAS EDS DATA SHUFFLED?\n         BNE   SKPXLATE          NO, GO ADJUST OUTPUT POINTER.\n         LA    R8,6(,R8)         YES, ADJUST OUTPUT POINTER FOR THIS.\n         B     SKPXLATE          GO ADJUST OUTPUT POINTER.\nSKIPRA   BCTR  R1,0              SUBTRACT ONE FOR EXECUTE.\n         EX    R1,COPY           COPY TO OUTPUT AREA.\nXLATEJMP B     SKPXLATE          SKIP ROUGH GRAPHICS TRANSLATION.\n         TR    0(1,8),GRAFTABL-C' '\n         OI    XLATEJMP+1,X'F0'  RESTORE DEFAULT TO NO TRANSLATION.\nSKPXLATE LA    R8,1(R1,R8)       INCREMENT OUTPUT ADDRESS.\n         CR    R9,R11            SEE IF ANY MORE INPUT DATA.\n         BH    OUT               NO.\n         B     TESTORDR          YES, CHECK IT.\n         SPACE\nBUILDRA  MVC   3(1,R8),0(R7)     COPY CHARACTER TO BE REPEATED.\n         MVI   0(R8),X'3C'       MOVE IN RA ORDER CODE.\n         CR    R6,R2             CHECK FOR SCREEN WRAP-AROUND.\n         BL    GETADDR           ADDRESS IS LESS THAN SCREEN SIZE.\n         SR    R6,R2             ADDRESS TOO BIG - PERFORM WRAP-AROUND.\nGETADDR  STCM  R6,3,1(R8)        ENCODE SCREEN ADDRESS FOR DATA STREAM.\n         TM    MODESW,ADR14      14-BIT ADDRESSING SUPPORTED?\n         BO    GOTADDR           YES, USE IT.\n         LA    R14,4095\n         CLR   R6,R14            TOO BIG FOR 12-BIT ADDRESSING ANYWAY?\n         BH    GOTADDR           YES, USE 14-BIT ADDRESSING.\n         SLR   R14,R14           NO, USE 12-BIT ADDRESSING.\n         LR    R15,R6\n         SLDL  R14,26\n         SRL   R15,26\n         IC    R14,TABLE(R14)\n         IC    R15,TABLE(R15)\n         STC   R14,1(,R8)\n         STC   R15,2(,R8)\nGOTADDR  TM    3(R8),X'F7'       IMP INTERNAL GRAPHIC CHARACTER?\n         BZ    USUALRA           NO, NOTHING UNUSUAL HERE.\n         CLI   3(R8),X'0F'       IMP INTERNAL GRAPHIC CHARACTER?\n         BH    USUALRA           NO, NOTHING UNUSUAL HERE.\n         MVC   3(8,R8),INTNLGRF+6    YES, LOAD GRAPHIC DATA STREAM.\n         TM    GRAFLAGS,GEOK     APL CHARACTERS AVAILABLE?\n         BO    GBAPLOK2          YES, USING ONE TAKES TWO BYTES.\n         MVI   3(R8),C' '        NO, USE A BLANK.  (WAS A PLUS SIGN.)\n         MVC   4(6,R8),5(R8)     SHUFFLE UP ATTRIBUTE RESETS.\n         B     GRADONE1          CHARACTER SPECIFICATION TOOK ONE BYTE.\nGBAPLOK2 LA    R8,1(,R8)         COUNT THE GE BYTE.\nGRADONE1 CLC   OLDCOLOR,GBCOLOUR\n         BE    DROPGRCL          CORRECT COLOUR SO DROP EXIT COLOURING.\n         LA    R8,3(,R8)         COUNT THE COLOUR ORDER.\nGRCOLROK CLC   OLDHILIT,GBHILITE\n         BE    USUALRA           HIGHLIGHT OK SO DROP EXIT HILIGHTING.\n         LA    R8,3(,R8)         COUNT THE HIGHLIGHT ORDER.\nUSUALRA  LA    R8,4(,R8)         INCREMENT OUTPUT AREA ADDRESS.\n         CR    R9,R11            SEE IF ANY MORE INPUT DATA.\n         BH    OUT               NO.\n         B     TESTORDR          YES, CHECK IT.\nDROPGRCL MVC   4(3,R8),7(R8)     OVERLAY COLOR ORDER WITH HILITE ORDER.\n         B     GRCOLROK          NOW CHECK HIGHLIGHTING NECESSITY.\n         SPACE\nHANDLESA CLI   0(R9),X'0E'       FUJITSU SET ATTRIBUTE ORDER?\n         BNE   SACODEOK          NO, PROCEED.\n         CLI   1(R9),X'41'       VALID ATTRIBUTE TYPE?\n         BL    HANDLEGB          NO, MUST BE INTERNAL GRAPHIC CODE.\n         CLI   1(R9),X'42'       VALID ATTRIBUTE TYPE?\n         BH    HANDLEGB          NO, MUST BE INTERNAL GRAPHIC CODE.\nSACODEOK TM    MODESW2,COL2+COL4 7-COLOUR MODE?\n         BZ    COPYSETA          YES, FORGET ABOUT COLOUR CONVERSION.\n         TM    MODESW2,COL2      MONOCHROME MODE?\n         BO    IGNORESA          YES, FORGET ABOUT COLOUR CONVERSION.\n         CLI   1(R9),X'42'       COLOUR?\n         BNE   IGNORESA          NO, IGNORE OTHER HIGHLIGHTING.\n         CLI   2(R9),X'00'       DEFAULT?\n         BE    IGNORESA          YES, YOU GOT IT.\n         BCTR  R8,0\n         BCTR  R8,0\n         CLI   0(R8),X'1D'       IMMEDIATELY PRECEEDED BY START FIELD?\n         BNE   DONESETA          NO, CAN'T DO ANYTHING ANYWAY.\n         TM    1(R8),X'F0'       OUTPUT AUTOSKIP FIELD?\n         BNO   DONESETA          NO, CAN'T DO ANYTHING ANYWAY.\n         IC    R10,2(,R9)        GET 7-COLOUR CODE.\n         SLL   R10,28            SHIFT OUT ZONE.\n         SRL   R10,28            GET NUMERIC PART.\n         IC    R10,COLR4TBL(R10) GET CORRESPONDING 4-COLOUR CODE.\n         STC   R10,1(,R8)        REPLACE ATTRIBUTE BYTE.\nDONESETA LA    R8,2(,R8)         RESTORE OUTPUT BUFFER POINTER.\nIGNORESA LA    R10,R3            SET COUNT.\n         B     INCRPTR\nCOPYSETA ICM   R10,2,OLDHILIT    LOAD PREVIOUS HIGHLIGHTING.\n         ICM   R10,1,OLDCOLOR    LOAD PREVIOUS COLOUR.\n         CLI   1(R9),X'41'       NEW HIGHLIGHTING?\n         BE    NEWHILIT          YES.\n         CLI   1(R9),X'42'       NEW COLOUR?\n         BE    NEWCOLOR          YES.\n         OC    1(2,R9),1(R9)     DEFAULTS FOR ALL CHARACTER ATTRIBUTES?\n         BNZ   PERFRMSA          NO, COULD BE SETTING SYMBOL SET.\n         ICM   R10,3,1(R9)       YES, LOAD TWO NULLS.\n         B     TSTANYSA          SEE IF ANYTHING HAS CHANGED.\nNEWCOLOR TM    GRAFLAGS,DIDQRY+COLR  COLOUR DEFINITELY NOT SUPPORTED?\n         BM    IGNORESA          YES, DON'T DELIBERATELY CAUSE ERRORS.\n         SLR   R10,R10           CLEAR FOR INSERT.\n         ICM   R10,1,2(R9)       LOAD NEW COLOUR CODE.\n         BZ    DFLTCOLR          HANDLE DEFAULT REQUEST.\n         A     R10,ATHTBADR      POINT TO NEW COLOUR CODE.\n         IC    R10,0(,R10)       LOAD NEW COLOUR CODE.\nDFLTCOLR ICM   R10,2,OLDHILIT    RELOAD PREVIOUS HIGHLIGHTING.\n         B     TSTNEWSA          SEE IF ANYTHING HAS CHANGED.\nNEWHILIT ICM   R10,2,2(R9)       LOAD NEW HIGHLIGHTING CODE.\nTSTANYSA TM    GRAFLAGS,DIDQRY+HLIT HIGHLIGHT DEFINITELY NOT SUPPORTED?\n         BM    IGNORESA          YES, DON'T DELIBERATELY CAUSE ERROR.\nTSTNEWSA CLM   R10,2,OLDHILIT    ANY HIGHLIGHTING CHANGE?\n         BNE   GOTNEWSA          YES, TRANSMIT IT.\n         CLM   R10,1,OLDCOLOR    ANY COLOUR CHANGE?\n         BE    IGNORESA          NO, DON'T SEND THIS SET ATTRIBUTE.\nGOTNEWSA STCM  R10,2,OLDHILIT    YES, SAVE NEW CHARACTER ATTRIBUTES.\n         STCM  R10,1,OLDCOLOR\nPERFRMSA LA    R10,3             SET COUNT.\n         MVC   0(1,R8),SACODE    FORCE APPROPRIATE SA CODE.\n         MVC   1(2,R8),1(R9)     COPY SA SEQUENCE.\n         CLI   1(R8),X'42'       COLOR SA?\n         BNE   COLRSAOK          NO.\n         CLI   2(R8),X'F1'       VALID NON-DEFAULT COLOUR REQUEST?\n         BL    COLRSAOK          NO.\n         L     R15,ATHTBADR      POINT TO AUTHORIZATION TABLE.\n         TR    2(1,R8),0(R15)    CONVERT TO TARGET COLOUR.\nCOLRSAOK LR    R15,R8            COPY OUTPUT ADDRESS.\n         SLR   R15,R10           POINT BACK THREE BYTES.\n         CLC   0(2,R15),0(R8)    CONSECUTIVE (SAME) ATTRIBUTE CHANGES?\n         BNE   COPIEDOK          NO, COPY THIS SET ATTRIBUTE SEQUENCE.\n         MVC   2(1,R15),2(R8)    YES, OVERRIDE PREVIOUS ATTRIBUTE CODE.\n         B     INCRPTR           DO NOT COPY ANY MORE CODE FOR THIS SA.\n         SPACE\nHANDLEGE TM    GRAFLAGS,GEOK     IS GRAPHICS ESCAPE DEFINITELY OKAY?\n         BO    HANDL241          YES, THEN DON'T SUPPRESS IT.\n         LA    R10,1             SET COUNT.\n         NI    XLATEJMP+1,X'0F'  HOPE DON'T GET THE SAME BYTE FIRST AS\n         B     INCRPTR           GRAPHICS THEN MORE THAN THREE NORMAL.\n         SPACE\nHANDLEIC LA    R10,1             SET COUNT.\n         CR    R9,R11            POINTING AT LAST DATA STREAM BYTE?\n         BNL   COPYDATA          YES, COPY IT.\n         CLI   1(R9),X'13'       MULTIPLE IC?\n         BNE   COPYDATA          NO.\n         LA    R9,1(,R9)         YES, INCREMENT OUTPUT ADDRESS.\n         B     HANDLEIC          SEE IF THAT WAS THE LAST REPEAT.\n         SPACE\nHANDLESI L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         TM    255(R15),X'10'    JAPANESE DISPLAY?\n         BZ    HANDLEGB          NO, TREAT AS INTERNAL GRAPHIC CODE.\n         LA    R10,1             SET COUNT.\n         MVI   0(R8),X'0F'       LOAD IBM SHIFT IN CODE.\n         CLI   SACODE,X'28'      IBM COMPATIBLE SCREEN?\n         BE    COPIEDOK          YES, PROCEED.\n         MVI   0(R8),X'28'       NO, USE FUJITSU CODE.\n         B     COPIEDOK          PROCEED.\n         SPACE\nHANDLESO L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         TM    255(R15),X'10'    JAPANESE DISPLAY?\n         BZ    HANDLEGB          NO, TREAT AS INTERNAL GRAPHIC CODE.\n         LA    R10,1             SET COUNT.\n         MVI   0(R8),X'0E'       LOAD IBM SHIFT IN CODE.\n         CLI   SACODE,X'28'      IBM COMPATIBLE SCREEN?\n         BE    COPIEDOK          YES, PROCEED.\n         MVI   0(R8),X'29'       NO, USE FUJITSU CODE.\n         B     COPIEDOK          PROCEED.\n         SPACE\nHANDL241 LA    R10,2             SET COUNT.\n         LA    R6,1(,R6)         INCREMENT SCREEN ADDR FOR ATTR BYTE.\n         B     COPYDATA\n         SPACE\nHANDLSFE MVC   OLDFIELD,1(R9)    SAVE NEW FIELD ATTRIBUTES.\n         LA    R10,3             SET COUNT.\n         LA    R6,1(,R6)         INCREMENT SCREEN ADDR FOR ATTR BYTE.\n         CLI   2(R9),X'40'       USING F9526 EXTENSIONS?\n         BE    SFETOSF           NO, JUST USE NORMAL 3270 SF ANYWAY.\n         TM    MODESW2,COL2      0, 1, 2 OR 3-COLOUR MODE?\n         BZ    SFETOSF           NO, DROP F9526 EXTENSIONS.\n         CLI   SACODE,X'0E'      NO, F9526-TYPE TERMINAL?\n         BE    COPYDATA          YES, COPY THE THREE BYTES.\nSFETOSF  MVI   0(R8),X'1D'       USE 3270 SF CODE.\n         LR    R7,R9             COPY SOURCE ADDRESS.\n         MVC   1(1,R8),1(R7)     COPY ATTRIBUTE BYTE.\n         LA    R8,2(,R8)         UPDATE OUTPUT BUFFER ADDRESS.\n         B     INCRPTR           INCREMENT ADDRESS AND LOOP.\n         SPACE\nHANDLEMF SLR   R10,R10\n         IC    R10,1(,R9)        GET PAIR COUNT.\n         LR    R15,R8            COPY CURRENT OUTPUT POINTER.\n         MVC   0(2,R8),0(R9)     COPY ORDER AND PAIR COUNT.\n         CLI   SACODE,X'0E'      FUJITSU SCREEN EQUIPMENT?\n         BNE   SFEMFAOK          NO, 3270 COMPATIBLE.\n         CLI   0(R8),X'2C'       MODIFY FIELD ATTRIBUTE?\n         BE    SFEMFAOK          YES, SAME FOR 3270 AND 668X.\n         MVI   0(R8),X'0F'       NO, SUPPLY FUJITSU SFE ORDER.\nSFEMFAOK LA    R8,2(,R8)         POINT TO NEXT OUTPUT POSITION.\n         LA    R7,2(,R9)         POINT TO NEXT SOURCE POSITION.\nPAIRLOOP CLI   0(R7),X'C0'       FIELD ATTRIBUTE?\n         BE    COPYPAIR          YES, COPY IT.\n         TM    MODESW2,COL2+COL4 7-COLOUR MODE?\n         BNZ   SKIPPAIR          NO, DO NOT COPY THIS PAIR.\n         CLI   0(R7),X'41'       EXTENDED HIGHLIGHTING?\n         BE    COPYPAIR          YES, COPY IT.\n         CLI   0(R7),X'42'       EXTENDED COLOUR?\n         BNE   SKIPPAIR          NO, DO NOT COPY THIS PAIR.\nCOPYPAIR MVC   0(2,R8),0(R7)     COPY THE PAIR.\n         LA    R8,2(,R8)         POINT PAST THE PAIR.\nSKIPPAIR LA    R7,2(,R7)         POINT PAST THE PAIR.\n         BCT   R10,PAIRLOOP      PROCESS THE NEXT PAIR.\n         IC    R10,1(,R9)        GET PAIR COUNT.\n         LA    R10,1(,R10)\n         SLL   R10,1             GET TOTAL INPUT ORDER BYTE COUNT.\n         LA    R6,1(,R6)         INCREMENT SCREEN ADDR FOR ATTR BYTE.\n         LR    R0,R8             COPY FINAL OUTPUT POINTER.\n         SR    R0,R15            GET OUTPUT ORDER LENGTH.\n         SRL   R0,1              HALVE IT.\n         BCTR  R0,0              GET THE PAIR COUNT.\n         STC   R0,1(,R15)        SET OUTPUT ORDER PAIR COUNT.\n         CLI   0(R15),X'2C'      MODIFY FIELD ATTRIBUTE?\n         BE    DONOEDIT          YES, NOEDIT TPUT REQUIRED.\n         CLC   ONEFIELD,1(R15)   SFE WITH STANDARD FIELD ATTR ONLY?\n         BNE   DONOEDIT          NO, NOEDIT TPUT REQUIRED.\n         MVI   0(R15),X'1D'      YES, JUST USE STANDARD START FIELD.\n         MVC   1(1,R15),3(R15)   COPY THE ATTRIBUTE SPECIFICATION.\n         LA    R8,2(,R15)        ADJUST OUTPUT POINTER.\n         B     INCRPTR           GET MORE SOURCE DATA TO PROCESS.\nDONOEDIT OI    4(R4),X'80'       FLAG TPUT NOEDIT REQUIREMENT.\n         B     INCRPTR           GET MORE SOURCE DATA TO PROCESS.\n         SPACE\nHANDLEGB TM    GRAFLAGS,COLR+HLIT    WILL GRAPHIC CODES BE USED?\n         BM    XLATEGB           NO, REPLACE BYTE WITH A SPECIAL CHAR.\n         TM    MODESW2,COL2+COL4 7-COLOUR MODE?\n         BNZ   XLATEGB           NO, REPLACE BYTE WITH A SPECIAL CHAR.\n         LA    R0,6              YES, GET A SIX.\n         LR    R15,R8            COPY OUTPUT ADDRESS.\n         SLR   R15,R0            POINT BACK SIX BYTES IN OUTPUT.\n         CLC   SACODE,0(R15)     POINTING TO A SET ATTRIBUTE?\n         BNE   DOGBHERE          NO, STAY AT CURRENT LOCATION.\n         CLI   1(R15),X'41'      POINTING TO A SET ATTRIBUTE?\n         BL    DOGBHERE          NO, STAY AT CURRENT LOCATION.\n         CLI   1(R15),X'43'      POINTING TO A SET ATTRIBUTE?\n         BH    DOGBHERE          NO, STAY AT CURRENT LOCATION.\n         CLC   SACODE,3(R15)     FOLLOWED BY ANOTHER SET ATTRIBUTE?\n         BNE   DOGBHERE          NO, STAY AT CURRENT LOCATION.\n         CLI   4(R15),X'41'      FOLLOWED BY ANOTHER SET ATTRIBUTE?\n         BL    DOGBHERE          NO, STAY AT CURRENT LOCATION.\n         CLI   4(R15),X'43'      FOLLOWED BY ANOTHER SET ATTRIBUTE?\n         BH    DOGBHERE          NO, STAY AT CURRENT LOCATION.\n         SLR   R8,R0             YES, OVERWRITE THEM AND REDUCE OUTPUT.\n         BAS   R14,IGRFSTRG      LOAD INTERNAL GRAPHIC DATA STREAM.\n         LA    R8,6(,R8)         COUNT THE BYTES FOR THE ORDERS.\n         B     GBCLRDON          NOW CHECK FOR APL SUPPORT.\nDOGBHERE BAS   R14,IGRFSTRG      LOAD INTERNAL GRAPHIC DATA STREAM.\n         CLC   2(1,R8),OLDHILIT  HAS THE HIGHLIGHTING CHANGED?\n         BNE   GBDIFHIL          YES, NEED ALTERING ORDER.\n         MVC   0(11,R8),3(R8)    NO, OVERLAY ORDER AND SAVE 3 BYTES.\n         B     GBHILDON\nGBDIFHIL LA    R8,3(,R8)         COUNT THE HILITE ORDER BYTES.\nGBHILDON CLC   2(1,R8),OLDCOLOR  HAS THE COLOUR CHANGED?\n         BNE   GBDIFCLR          YES, NEED ALTERING ORDER.\n         MVC   0(8,R8),3(R8)     NO, OVERLAY ORDER AND SAVE 3 BYTES.\n         B     GBCLRDON\nGBDIFCLR LA    R8,3(,R8)         COUNT THE COLOUR ORDER BYTES.\nGBCLRDON CLC   1(1,R9),0(R9)     MORE THAN ONE SUCH CHARACTER?\n         BE    NOTORDER          YES, BUILD A REPEAT-TO-ADDRESS.\n         TM    GRAFLAGS,GEOK     APL CHARACTERS AVAILABLE?\n         BO    GBAPLOK1          YES, USING ONE TAKES TWO BYTES.\n         MVI   0(R8),C' '        NO, USE A BLANK.  (WAS A PLUS SIGN.)\n         MVC   1(6,R8),2(R8)     SHUFFLE UP ATTRIBUTE RESETS.\n         B     GBDONE01          CHARACTER SPECIFICATION TOOK ONE BYTE.\nGBAPLOK1 LA    R8,1(,R8)         COUNT THE GE BYTE.\nGBDONE01 LA    R8,1(,R8)         COUNT THE CHARACTER BYTE.\n         LA    R10,1             ONE SOURCE BYTE WAS PROCESSED.\n         LA    R6,1(,R6)         INCREMENT SCREEN ADDRESS.\n         CLC   OLDCOLOR,GBCOLOUR\n         BE    DROPGXCL          CORRECT COLOUR SO DROP EXIT COLOURING.\n         LA    R8,3(,R8)         COUNT THE COLOUR ORDER.\nGXCOLROK CLC   OLDHILIT,GBHILITE\n         BE    INCRPTR           HIGHLIGHT OK SO DROP EXIT HILIGHTING.\n         LA    R8,3(,R8)         COUNT THE HIGHLIGHT ORDER.\n         B     INCRPTR           GET MORE SOURCE DATA TO PROCESS.\nDROPGXCL MVC   0(3,R8),3(R8)     OVERLAY COLOR ORDER WITH HILITE ORDER.\n         B     GXCOLROK          NOW CHECK HIGHLIGHTING NECESSITY.\nIGRFSTRG MVC   0(14,R8),INTNLGRF LOAD INTERNAL GRAPHIC STRING.\n         MVC   5(1,R8),0(R9)     LET BYTE ITSELF DETERMINE COLOUR.\n         OI    5(R8),X'F0'       PUT COLOUR CODE IN CORRECT RANGE.\n         TM    5(R8),X'08'       VALID COLOUR?  (USE REVERSE VIDEO?)\n         BZ    IGRFSXIT          YES, IN X'F1' TO X'F7' RANGE.\n         MVI   2(R8),X'00'       NO, NON-REVERSE VIDEO FLAG IS ON.\n         NI    5(R8),X'F7'       FOLD INTO VALID COLOUR CODE RANGE.\nIGRFSXIT L     R15,ATHTBADR      POINT TO AUTHORIZATION TABLE.\n         TR    5(1,R8),0(R15)    CONVERT TO TARGET COLOUR.\n         MVC   GBHILITE,2(R8)    REMEMBER THE GRAPHIC BYTE HIGHLIGHT.\n         MVC   GBCOLOUR,5(R8)    REMEMBER THE GRAPHIC BYTE COLOUR.\n         BR    R14               RETURN TO CALLER.\nXLATEGB  L     R15,PRNTADDR      GET ADDRESSABILITY TO TRANSLATE TABLE.\n         USING SCRNPRNT,R15\n         IC    R0,PRTXLATE+11    CONVERT PINK CROSSHATCH TO PLUS.\n         MVI   PRTXLATE+11,C'+'  (PROBABLY FOR AN OPTION \"K\" DISPLAY.)\n         TR    0(1,R9),PRTXLATE  DO NOT ATTEMPT TO USE GRAPHIC ESCAPE.\n         STC   R0,PRTXLATE+11    RESTORE TRANSLATE TABLE TO ORIGINAL.\n         DROP  R15               SCRNPRNT.\n         B     TESTORDR          PROCESS IT AS USUAL.\n         SPACE\nCOLRCHNG TM    MODESW2,COL2+COL4 7-COLOUR MODE?\n         BNZ   COLRCHGD          NO, SKIP COLOUR ORDER.\n         IC    R15,0(,R7)        COPY SOURCE CODE BYTE.\n         LA    R15,X'D0'(,R15)   CONVERT INTO 3270 COLOUR CODE.\n         CLM   R15,1,OLDCOLOR    ANY COLOUR CHANGE?\n         BE    COLRCHGD          NO, SKIP REDUNDANT ORDER.\n         MVC   0(1,R8),SACODE    SET ATTRIBUTE.\n         MVI   1(R8),X'42'       COLOUR.\n         STC   R15,2(,R8)        COLOUR CODE.\n         LA    R8,3(,R8)         POINT PAST ORDER.\n         STC   R15,OLDCOLOR      UPDATE CURRENT COLOUR.\nCOLRCHGD MVI   0(R8),C' '        PREPARE FOR NO-OP.\n         L     R15,CRNTOPTN      POINT TO CURRENT OPTION ENTRY.\n         CLI   0(R15),C'S'       SERVICE CLASS MONITOR?\n         BE    COLRSFOK          YES, AVOID TABBABLE FIELD.\n         CLI   0(R15),C'C'       CHANNEL PATH MONITOR?\n         BE    COLRSFOK          YES, AVOID TABBABLE FIELD.\n         MVI   0(R8),X'1D'       START FIELD.\n         MVC   1(1,R8),0(R7)     COPY INTERNAL CODE BYTE.\n         NI    1(R8),X'07'       MAP INTO COLOUR CODE.\n         TR    1(1,R8),COLR4TBL  SUPPLY APPROPRIATE FIELD ATTRIBUTE.\n         CLI   0(R7),X'24'       REQUEST FOR GREEN?\n         BE    COLRTBOK          YES, LEAVE AS TABBABLE.\n         TM    MODESW2,COL4      4-COLOUR MODE?\n         BO    COLRTBOK          YES, LEAVE COLOUR MAPPING.\n         OI    1(R8),X'20'       MAKE FIELD PROTECTED.\nCOLRTBOK LA    R8,1(,R8)         POINT PAST START FIELD.\nCOLRSFOK LA    R8,1(,R8)         POINT PAST BLANK OR ATTRIBUTE.\n         LA    R7,1(,R7)         POINT TO NEXT INPUT BYTE.\n         BCT   R1,COLRCHNG       HANDLE MULTIPLE CONSECUTIVE CODES.\n         CR    R9,R11            SEE IF ANY MORE INPUT DATA.\n         BH    OUT               NO.\n         B     TESTORDR          YES, CHECK IT.\n         SPACE\nUPDATADR LA    R10,3             SET COUNT.\n         SLR   R15,R15\n         ICM   R15,B'0011',1(R9) LOAD SPECIFIED BUFFER ADDRESS.\n         TM    1(R9),X'40'       IS IT A 12-BIT ADDRESS?\n         BZ    ADR14BIT          NO, 14-BIT.\n         SLDL  R14,24            CONVERT ADDRESS TO SCREEN POSITION.\n         SLL   R15,2\n         SRDL  R14,6\n         SRL   R15,20\nADR14BIT CR    R6,R15            SEE IF ALREADY AT THIS ADDRESS.\n         BNE   RESETADR\n         CLI   0(R9),X'11'       IF ORDER IS SBA, SKIP IT.\n         BE    INCRPTR\nRESETADR LR    R6,R15            UPDATE SCREEN ADDRESS.\n         CLI   0(R9),X'3C'       REPEAT-TO-ADDRESS ORDER?\n         BNE   COPYDATA          NO, PROCEED WITH COPY.\n         LA    R10,4             YES, SET COUNT.\n         CLI   3(R9),X'08'       GRAPHICS CHARACTER TO BE REPEATED?\n         BNE   COPYDATA          NO, COPY ENTIRE ORDER STREAM.\n         LA    R10,3             YES, SET COUNT.\n         BCTR  R6,0              DECREMENT SCREEN ADDRESS.\n         LTR   R6,R6             BACK BEFORE START OF SCREEN?\n         BNM   COPYDATA          NO, PROCEED.\n         AR    R6,R2             YES, ADD BUFFER SIZE.\n         SPACE\nCOPYDATA BCTR  R10,0             DECREMENT COUNT FOR EXECUTE.\n         LR    R7,R9             COPY SOURCE ADDRESS.\n         EX    R10,COPY          COPY TO OUTPUT AREA.\n         LA    R10,1(,R10)       RESTORE COUNT.\nCOPIEDOK LA    R8,0(R10,R8)      UPDATE OUTPUT AREA ADDRESS.\nINCRPTR  BXLE  R9,R10,TESTORDR   INCREMENT ADDRESS AND LOOP.\n         SPACE\nOUT      LA    R1,12(,R4)        GET OUTPUT ADDRESS.\n         SR    R8,R1             CALCULATE OUTPUT LENGTH.\n         LA    R0,0(,R8)         TURN OFF HIGH BIT.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZ    OUTEXCP           NO, USE EXCP.\n         TM    4(R4),X'80'       IS A NOEDIT TPUT REQUIRED?\n         BO    OUTNOED           YES.\n         CLI   0(R1),X'F1'       START WITH WRITE?\n         BE    OUTNOED           YES.\n         CLI   0(R1),X'F5'       START WITH ERASE/WRITE?\n         BE    OUTNOED           YES.\n         CLI   0(R1),X'7E'       START WITH ERASE/WRITE ALTERATE?\n         BE    OUTNOED           YES.\n         ICM   R1,B'1000',TPUTFLG\n         TPUT  (1),(0),R         DISPLAY THIS SCREEN IMAGE.\nOUTTPUT  CL    R15,MAXPUTRC      ACCEPTABLE RETURN CODE?\n         BH    SVC3EXIT          NO, JUST EXIT WITH TPUT RETURN CODE.\nOUTOKAY  NI    4(R4),X'7F'       ENSURE NOEDIT FLAG IS RESET.\n         LM    R0,R2,0(R4)       GET FREEMAIN PARAMETERS AND EXIT ADDR.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         BR    R2                RETURN.\nOUTEXCP  LA    R15,4             SET ENTRY CODE OF FOUR.\n         L     R11,EXCPIOAD      GET EXCP I/O ROUTINE ENTRY POINT.\n         BASR  R14,R11           USE EXCP TO SEND THE DATA STREAM.\n         B     OUTOKAY\nOUTNOED  LR    R2,R1             COPY THE DATA STREAM ADDRESS.\n         TPUT  (R2),(R0),NOEDIT,WAIT,MF=(E,TPUTNOED)\n         B     OUTTPUT\n         DROP  R3                MENU3270.\n         SPACE\nSVC3EXIT SVC   3                 TERMINATE THIS PROGRAM.\n         SPACE\nTPUTNOED TPUT  0,0,NOEDIT,WAIT,MF=L\n         SPACE\nCOPY     MVC   0(0,R8),0(R7)                    <<< EXECUTED >>>\n         SPACE\nONEFIELD DC    XL2'01C0'         ONE PAIR, FIELD ATTRIBUTE.\nOLDFIELD DC    CL2'  '           FIELD ATTRIBUTE SAVE AREA.\nMAXPUTRC DC    F'8'              MAXIMUM TOLERATED TPUT RETURN CODE.\n         SPACE\nCOLR4TBL DC    C' '              7-COLOUR TO 4-COLOUR CONVERSION TABLE.\n         DCS   PROLO             BLUE TO BLUE.\n         DCS   UNPHI             RED TO RED.\n         DCS   UNPHI             PINK TO RED.\n         DCS   UNPLO             GREEN TO GREEN.\n         DCS   PROLO             TURQUOISE TO BLUE.\n         DCS   PROHI             YELLOW TO WHITE.\n         DCS   PROHI             WHITE TO WHITE.\nSTRMESCP DC    X'27'  \\______    ESCAPE (27).\nSTRMERAS DC    X'F1'  /          EW (F5) OR EWA (7E).\nINTNLGRF DC    X'2841F22842F608D32842'\nOLDCOLOR DC    X'00'             PREVIOUS COLOUR.\n         DC    X'2841'\nOLDHILIT DC    X'00'             PREVIOUS HIGHLIGHTING.\nGBCOLOUR DC    X'00'             COLOUR USED IN GRAPHIC BYTE(S).\nGBHILITE DC    X'00'             HILITE USED IN GRAPHIC BYTE(S).\nGRAFTABL DC    C' ABCDEFGHI??????'        40 TO 4F.\n         DC    C'?JKLMNOPQR??????'        50 TO 5F.\n         DC    C'??STUVWXYZ??????'        60 TO 6F.\n         DC    C'?',X'5354',C'?????'      70 TO 77.\n         DC    X'52',C'???????'           78 TO 7F.\n         DC    C'~??|||???????||?'        80 TO 8F.\n         DC    C'???????????'             90 TO 9A.\n         DC    X'83',C'?',X'96',C'??'     9B TO 9F.\n         DC    X'4951',C'-?',X'95'        A0 TO A4.\n         DC    C'????????',X'41',C'??'    A5 TO AF.\n         DC    X'81858999A66FA7'          B0 TO B6.\n         DC    C'\\/???T',X'42',C'?|'      B7 TO BF.\n         DC    C'{(+?--|-'                C0 TO C7.\n         DC    X'48',C'???????'           C8 TO CF.\n         DC    C'})?+--|-???!????'        D0 TO DF.\n         DC    C'?123????????????'        E0 TO EF.\n         DC    C'0123456789??????'        F0 TO FF.  (FF IS INVALID.)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPCM4": {"ttr": 8969, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+3\\x00\"\\x00\\x95\\x08\\x1f\\x01\\x16\\x02\\x1f\\x11E\\x04\\xe7\\x03\\xe1\\x01h\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "43.51", "flags": 0, "createdate": "1995-03-22T00:00:00", "modifydate": "2016-01-21T11:45:22", "lines": 1255, "newlines": 993, "modlines": 360, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1990  PRYCROFT SIX PTY LTD\n         TITLE 'SCAN AND EDIT INPUT 3270 DATA STREAM'\n*\n*  THIS ROUTINE EDITS THE INPUT DATA STREAM TO CONVERT ALL 2-BYTE 3270\n*  BUFFER ADDRESSES INTO ROW AND COLUMN RELATIVE CO-ORDINATE BYTES.\n*  ALSO, ALL INPUT TYPED TEXT IS FOLDED TO UPPER CASE.\n*\n         USING SCNINPUT,R15\nSCNINPUT NI    MODESW,255-ALTS    RESET WIDE-SCREEN REQUEST FLAG.\n         LH    R1,TGETLEN         GET THE INPUT DATA STREAM LENGTH.\n         LA    R2,INBUFF          POINT TO THE INPUT DATA STREAM.\n         LA    R3,STRM3270\n         USING STRM3270,R3\n         LA    R3,MENU3270\n         DROP  R3                 STRM3270.\n         USING MENU3270,R3\n         CLI   STRMERAS,X'7E'     ERASE/WRITE ALTERNATE USED?\n         DROP  R3                 MENU3270.\n         LA    R3,COLUMNS         POINT TO STANDARD WIDTH.\n         BNE   CNVBFRAD           NO.\n         CLI   OLDCOLS+3,80       USING A WIDE SCREEN?\n         BNH   CNVBFRAD           NO.\n         LA    R3,OLDCOLS         YES, POINT TO LARGER WIDTH.\nCNVBFRAD SLR   R5,R5              CLEAR FOR INSERT.\n         ICM   R5,3,1(R2)         LOAD BUFFER ADDRESS.\n         TM    1(R2),X'40'        12-BIT ADDRESS FORMAT?\n         BZ    GOTCSRAD           NO, 14-BIT ADDRESS FORMAT ALREADY.\n         SLL   R5,2               SHIFT UP LOW BYTE \"PARITY\" BITS.\n         ICM   R5,2,1(R2)         RELOAD HIGH BYTE.\n         SLL   R5,18              SHIFT OUT HIGH BYTE \"PARITY\" BITS.\n         SRL   R5,20              CONVERT TO BINARY NUMBER.\nGOTCSRAD SLR   R4,R4              CLEAR FOR DIVIDE.\n         D     R4,0(,R3)          GET RELATIVE CO-ORDINATES OF ADDRESS.\n         STC   R5,1(,R2)          SAVE RELATIVE LINE NUMBER.\n         STC   R4,2(,R2)          SAVE RELATIVE COLUMN NUMBER.\n         AHI   R1,-3              REDUCE BYTE COUNT.\n         BNPR  R14                RETURN IF END OF DATA STREAM.\n         LA    R2,3(,R2)          ADJUST BUFFER POINTER.\nSCANINLP CLI   0(R2),X'11'        FOUND A SET-BUFFER-ADDRESS?\n         BE    CNVBFRAD           YES, CONVERT IT TO CO-ORDINATES.\n         OI    0(R2),X'40'        NO, FOLD IT TO UPPER CASE.\n         LA    R2,1(,R2)          INCREMENT BUFFER POINTER.\n         BCT   R1,SCANINLP        DECREMENT BYTES-TO-GO COUNTER.\n         BR    R14                RETURN AT END OF DATA STREAM.\n         SPACE\n         DROP  R15                SCNINPUT.\n         TITLE 'TUTORIAL/GLOSSARY PANEL MANAGER'\n         USING TUTORIAL,R9\n         USING SCRNIO,R8\nTUTORIAL DS    0H                 PERFORM TUTORIAL PANEL NAVIGATION.\n         TM    MODESW2,CLNF       ANYTHING TO CLEANUP ON OPTION EXIT?\n         BNO   TBITMPOK           NO, CAN'T HAVE BITMAP ON SHOW.\n         TM    MODESW,VCTR        ARE VECTOR GRAPHICS USABLE?\n         BNO   TBITMPOK           NO, CAN'T HAVE BITMAP ON SHOW.\n         L     R1,CRNTOPTN        POINT TO THE CURRENT OPTION VECTOR.\n         CLI   0(R1),C' '         IS IT THE MAIN MENU?\n         BNE   TBITMPOK           NO, BITMAP CAN'T BE ON SHOW.\n         OI    MODESW,BTMP        YES, SIGNAL BITMAP NEEDS CLEARING.\n         NI    MODESW2,255-CLNF   OPTION EXIT CLEANUP NOW PERFORMED.\nTBITMPOK CLI   INBUFF,1           ENTRY BY PFK?\n         BE    TUTBYPF1           YES.\n         CLI   INCHARS,C'H'       CHECK IF HARDCOPY REQUESTED.\n         BE    DOPRINTX           OUTPUT THE SCREEN IMAGE.\n         CLI   INCHARS,C'Z'       CHECK IF TERMINATION REQUESTED.\n         BE    EXAMRTNX           RETURN TO MAINLINE FOR TERMINATION.\n         CLI   INCHARS,C'\u00a2'       CLOSE IMPLOG REQUEST?  (EBCDIC K/B.)\n         BE    CLOSELOG           YES, CLOSE IT.\n         CLI   INCHARS,C'`'       CLOSE IMPLOG REQUEST?  (ASCII K/B.)\n         BE    CLOSELOG           YES, CLOSE IT.\n         CLI   INBUFF,3           END REQUESTED?\n         BE    TUTOREND           YES.\n         CLI   INBUFF,7           UP REQUESTED?\n         BE    TUTORUP            YES.\n         CLC   =C'END ',INCHARS   END REQUESTED?\n         BE    TUTOREND           YES.\n         CLC   =C'UP  ',INCHARS   UP REQUESTED?\n         BE    TUTORUP            YES.\n         BAS   R14,TUTCOLOR       CALL SET COLOUR ROUTINE.\nTUTBYPF1 ICM   R0,15,IMGLSADR     GET GLOSSARY PANEL MODULE.\n         BNZ   TUTEADOK           ALREADY LOADED SO PROCEED.\n         LA    R0,TUTORENG        POINT TO TUTORIAL MODULE NAME.\n         L     R15,ATHTBADR       POINT TO CONFIGURATION FLAGS.\n         TM    255(R15),X'10'     JAPANESE DISPLAY?\n         BZ    LOADTUTE           NO, USE ENGLISH TUTORIAL.\n         LA    R0,TUTORJAP        POINT TO TUTORIAL MODULE NAME.\nLOADTUTE LOAD  EPLOC=(0),ERRET=TUTORXIT\n         ST    R0,IMGLSADR        SAVE ENTRY POINT FOR LATER.\nTUTEADOK LA    R8,INCHARS         POINT TO FIRST POTENTIAL DIGIT.\n         SLR   R5,R5              CLEAR WORK REGISTER.\n         SLR   R1,R1              CLEAR ACCUMULATOR.\n         CLI   INBUFF+4,23        INPUT FROM LINE 24?\n         BE    TUTEGOT#           YES, NUMBERS NOT A PAGE REQUEST.\nTUTEGET# CLI   0(R8),C'0'         NUMERIC DIGIT TO PROCESS?\n         BL    TUTEGOT#           NO, NOW HAVE COMPLETE NUMBER.\n         NI    0(R8),X'0F'        YES, RESET ZONE.\n         IC    R5,0(,R8)          LOAD NUMBER.\n         MH    R1,TEN+2           PROMOTE PREVIOUS DIGITS.\n         AR    R1,5               ADD LATEST DIGIT.\n         LA    R8,1(,R8)          POINT TO NEXT BYTE IN INPUT BUFFER.\n         B     TUTEGET#           PROCESS NEXT POTENTIAL DIGIT.\nTUTEGOT# L     R8,SCRNIOAD        RESTORE BASE REGISTER.\n         ICM   R7,15,CRNTGLOS     ALREADY IN TUTORIAL?\n         BNZ   TUTPGCHK           YES, GO CHECK PAGE NUMBER.\n         L     R7,CRNTOPTN        POINT TO THE CURRENT OPTION VECTOR.\n         IC    R5,0(,R7)          LOAD THE OPTION NAME.\nTUTOROPT L     R7,IMGLSADR        POINT TO THE GLOSSARY PANEL MODULE.\n         LR    R6,R7              COPY THIS ADDRESS.\n         AR    R6,R5              POINT OPTION'S ENTRY NUMBER.\n         IC    R5,0(,R6)          LOAD OPTION'S ENTRY NUMBER.\n         SLL   R5,2               MULTIPLY BY FOUR FOR INDEX.\n         L     R7,256(R5,R7)      POINT TO OPTION'S GLOSSARY VECTOR.\n         ST    R7,CRNTGLOS        SAVE THE VECTOR ORIGIN ADDRESS.\nTUTPGCHK CLI   INCHARS,C'\"'       REQUEST FOR SUBCOMMAND LIST?\n         BNE   TUTCHKPG           NO.\n         LH    R1,4(,R7)          GET THE TUTORIAL SUBCOMMANDS PAGE.\nTUTCHKPG LTR   R1,R1              EXPLICIT PAGE NUMBER REQUESTED?\n         BZ    TUTNXTPG           NO, PROCEED WITH NORMAL SEQUENCE.\n         CH    R1,2(,R7)          YES, IS IT HIGHER THAN THE MAXIMUM?\n         BNH   TUTGETPG           NO, NOW HAVE TARGET PAGE NUMBER.\nTUTNXTPG LH    R1,GLOSSPG#        GET THE PREVIOUSLY SHOWN PAGE NUMBER.\n         CLI   INCHARS,C'\\'       HIGHLIGHTING CHANGE REQUESTED?\n         BE    TUTRESHO           YES, JUST RESHOW THE SAME PANEL.\n         CLI   INBUFF+4,23        COLOUR CODE CHANGE REQUESTED?\n         BE    TUTRESHO           YES, JUST RESHOW THE SAME PANEL.\n         LA    R1,1               NO.\n         AH    R1,GLOSSPG#        ADD ONE TO PREVIOUS PAGE NUMBER.\n         CH    R1,2(,R7)          IS IT HIGHER THAN THE MAXIMUM?\n         BNH   TUTGETPG           NO, NOW HAVE TARGET PAGE NUMBER.\n         LA    R1,1               YES, LOOP AROUND TO PAGE 1.\nTUTGETPG STH   R1,GLOSSPG#        SAVE THE TARGET PAGE NUMBER.\nTUTRESHO SLL   R1,3               MULTIPLY PAGE NUMBER BY 8 FOR INDEX.\n         ALR   R1,R7              POINT TO THE PAGE ADDRESS AND LENGTH.\n         LM    R5,R6,0(R1)        LOAD THE SCREEN LENGTH AND ADDRESS.\n         LTR   R5,R5              ANY SCREEN IMAGE SUPPLIED?\n         BZ    SCRNEXIT           NO, OPTION MUST SUPPLY OWN PANEL.\n         MVC   HOME(L'TUTORHDR),TUTORHDR\n         LA    R4,HOME+L'TUTORHDR POINT PAST SCREEN SET-UP ORDERS.\n         MVC   0(74,R4),6(R6)     LOAD TUTORIAL PAGE HEADING LINE.\n         LH    R0,2(,R7)          GET MAXIMUM PAGE NUMBER.\n         CVD   R0,WORK\n         MVC   70(4,R4),ED3Z\n         LA    R1,73(,R4)\n         EDMK  70(4,R4),WORK+6    SHOW THE TOTAL PAGE COUNT.\n         AHI   R1,-4              BACKUP FOR ' OF '.\n         MVC   0(3,R1),=X'409686' LOAD ' OF'.\n         AHI   R1,-4              BACKUP FOR CURRENT PAGE NUMBER.\n         LH    R0,GLOSSPG#        GET THE CURRENT PAGE NUMBER.\n         CVD   R0,WORK\n         MVC   0(4,R1),ED3Z\n         EDMK  0(4,R1),WORK+6     SHOW THE CURRENT PAGE NUMBER.\n         AHI   R1,-5              BACKUP FOR 'PAGE '\n         MVC   0(4,R1),=X'D7818785'     LOAD 'PAGE'.\n         TR    0(74,R4),XLATETBL  TRANSLATE HEADING AS APPROPRIATE.\n         MVC   74(3,R4),LOWX      TURN OFF THE UNDERSCORE.\n         LA    R4,77(,R4)         POINT PAST THE DATA STREAM SO FAR.\n         LA    R0,L'TUTORHDR+3-6(,R5)   GET THE FINAL TPUT LENGTH.\n         AHI   R5,-80             DECREASE LENGTH SINCE HEADING DONE.\n         LA    R6,80(,R6)         POINT PAST THE HEADING LINE DATA.\n         LR    R7,R5              COPY THE LENGTH TO MOVE.\n         MVCL  R4,R6              MOVE PAGE CONTENTS TO BUFFER.\n         LA    R1,HOME            POINT TO THE DATA STREAM TO TPUT.\n         B     SCRNSHOW           DISPLAY GLOSSARY SCREEN FOR THIS MON.\nTUTORUP  ICM   R7,15,CRNTGLOS     POINT TO TUTORIAL VECTOR ORIGIN.\n         BZ    TUTORXIT           HANDLE ZERO POINTER.\n         L     R1,CRNTOPTN        POINT TO THE CURRENT OPTION ENTRY.\n         CLI   0(R1),C' '         IN THE MAIN MENU?\n         BE    TUTPAGE1           YES, SHOW PAGE 1.\n         MVC   PREVGLOS,CRNTGLOS  SAVE THE CURRENT TUTORIAL OPTION.\n         MVC   PREVGPG#,GLOSSPG#  SAVE THE CURRENT TUTORIAL PAGE.\n         SLR   R1,R1              CLEAR \"SPECIFIED PAGE NUMBER\".\n         STH   R1,GLOSSPG#        CLEAR GLOSSARY PAGE NUMBER.\n         ST    R1,CRNTGLOS        CLEAR GLOSSARY VECTOR ORIGIN.\n         LA    R5,C' '            PRIME FOR GENERAL INFORMATION.\n         B     TUTOROPT           RESUME TUTORIAL FROM THERE.\nTUTPAGE1 SLR   R0,R0              CLEAR ALL GLOSSARY STATUS DATA.\n         STH   R0,GLOSSPG#        CLEAR GLOSSARY PAGE NUMBER.\n         ST    R0,CRNTGLOS        CLEAR GLOSSARY VECTOR ORIGIN.\n         STH   R0,PREVGPG#        CLEAR PREVIOUS GLOSSARY PAGE NUMBER.\n         ST    R0,PREVGLOS        CLEAR PREVIOUS GLOSSARY VECTR ORIGIN.\n         B     TUTBYPF1           SHOW PAGE ONE OF GENERAL INFORMATION.\nTUTOREND ICM   R7,15,CRNTGLOS     POINT TO TUTORIAL VECTOR ORIGIN.\n         BZ    TUTORXIT           HANDLE ZERO POINTER.\n         L     R1,CRNTOPTN        POINT TO THE CURRENT OPTION ENTRY.\n         CLC   0(1,R1),0(R7)      IN TUTORIAL OF CURRENT OPTION?\n         BE    TUTORXIT           YES, SO TERMINATE THE TUTORIAL.\n         ICM   R0,15,PREVGLOS     NO, GET THE PREVIOUS TUTORIAL.\n         BZ    TUTORXIT           NONE SO TERMINATE THE TUTORIAL.\n         ST    R0,CRNTGLOS        NO, RETURN TO THE CURRENT OPTION.\n         MVC   GLOSSPG#,PREVGPG#  RETURN TO THE APPROPRIATE PAGE.\n         SLR   R0,R0\n         STH   R0,PREVGPG#        CLEAR PREVIOUS GLOSSARY PAGE NUMBER.\n         ST    R0,PREVGLOS        CLEAR PREVIOUS GLOSSARY VECTR ORIGIN.\n         LH    R1,GLOSSPG#        GET RESTORED PAGE NUMBER.\n         B     TUTEGOT#           RESUME TUTORIAL FROM THIS PAGE.\nTUTORXIT SLR   R0,R0\n         STH   R0,GLOSSPG#        CLEAR GLOSSARY PAGE NUMBER.\n         ST    R0,CRNTGLOS        CLEAR GLOSSARY VECTOR ORIGIN.\n         STH   R0,PREVGPG#        CLEAR PREVIOUS GLOSSARY PAGE NUMBER.\n         ST    R0,PREVGLOS        CLEAR PREVIOUS GLOSSARY VECTR ORIGIN.\n         MVI   INBUFF,13          RESET AID TO ENTER.\n         MVC   INBUFF+1(2),ONE    FORCE AS IF PRIMARY INPUT.\n         L     R1,INITADDR        GET ADDRESSABILITY TO SCRNHDR.\n         USING INITIAL,R1         RESTORE EXPECTED HEADING FORMAT.\n         MVC   HOME(HDRLEN),SCRNHDR\n         DROP  R1                 INITIAL.\n         MVC   INCHARS,BLANKS     REQUEST DISPLAY CONTINUE.\n         B     SCRNEXIT           RETURN TO LOCAL OPTION CONTROL.\n         DROP  R8                 SCRNIO.\nTUTCOLOR LH    R1,TGETLEN         GET THE INPUT DATA STREAM LENGTH.\n         BCTR  R1,0\n         LTR   R1,R1              ANY DATA?\n         BNPR  R14                NO, RETURN.\n         LA    R15,INBUFF(R1)     POINT TO LAST INPUT BYTE.\nTUTSBALP CLI   0(R15),X'11'       FOUND THE LAST SBA ORDER?\n         BE    TUTSBAOK           YES.\n         BCTR  R15,0              NO, POINT TO THE PREVIOUS BYTE.\n         BCT   R1,TUTSBALP\n         BR    R14                NO SBA FOUND SO RETURN.\nTUTSBAOK CLI   1(R15),23          INPUT FROM LINE 24?\n         BNER  R14                NO, RETURN.\n         LA    R0,7               YES, GET MAXIMUM COLOUR CODE COUNT.\n         LA    R1,3(,R15)         POINT TO FIRST POSSIBLE CODE.\n         L     R15,ATHTBADR       POINT TO CUSTOMIZABLE TABLE.\n         LA    R15,C'1'(,R15)     POINT TO FIRST TARGET CODE.\nTUTCLRLP CLI   0(R1),C'1'         VALID CODE?\n         BLR   R14                NO, RETURN.\n         CLI   0(R1),C'7'         VALID CODE?\n         BHR   R14                NO, RETURN.\n         MVC   0(1,R15),0(R1)     YES, UPDATE OPERATIONAL CODE TABLE.\n         LA    R1,1(,R1)          POINT TO NEXT POSSIBLE SOURCE CODE.\n         LA    R15,1(,R15)        POINT TO NEXT POSSIBLE TARGET CODE.\n         BCT   R0,TUTCLRLP        PROCESS POSSIBLE NEXT CODE.\n         BR    R14                RETURN.\n         DROP  R9                 TUTORIAL.\n         SPACE\nPREVGLOS DC    A(0)               PREVIOUS GLOSSARY VECTOR ORIGIN.\nPREVGPG# DC    H'0'               PREVIOUS GLOSSARY PAGE NUMBER.\n         AIF   (&MVSMON).MVSTUTE\nTUTORENG DC    CL8'IMPENGLS'\nTUTORJAP DC    CL8'IMPEXGLS'\n         AGO   .TUTRNMD\n.MVSTUTE ANOP\nTUTORENG DC    CL8'IMPXAGLS'\nTUTORJAP DC    CL8'IMPXAGLS'\n.TUTRNMD ANOP\nTUTORHDR DC    X'C11140401B404E132841F42842F4000000001BF8C62842F7'\n         LTORG\n         SPACE\n         DS    0H\n         TITLE 'CONVERT JULIAN DATE TO YY-MM-DD'\n*              INPUT - PACKED DECIMAL JULIAN DATE IN REGISTER 1\n*              OUTPUT- C'YY-MM-DD' IN WORK\n         SPACE\n         USING DATECONV,R7\nDATECONV DS    0H                       (FROM TAPESCAN DATE SUBROUTINE)\n         LR    R15,R9                      SAVE WORK REGISTER.\n         ST    R1,CONVWORK+4               STORE INPUT DATE FOR TESTING\n         ST    R1,CONVWORK+8                 AND CONVERSION.\n         UNPK  CONVWORK+12(3),CONVWORK+5(2)  FORMAT YEAR.\n         XC    CONVWORK(6),CONVWORK        GET JULIAN DAY IN DECIMAL.\n         CVB   R1,CONVWORK                 GET JULIAN DAY IN BINARY.\n         LA    R9,MNTHTBL-4                ADJUST FOR FIRST INCREMENT.\n         TM    CONVWORK+9,X'01'            IF ODD THEN\n         BO    NOTLEAP                                 NOT LEAP YEAR.\n         TM    CONVWORK+9,X'12'            TEST FOR LEAP (OK TILL 2099)\n         BNM   NEXTMNTH                         IF MIXED NOT LEAP YEAR.\nNOTLEAP  CHI   R1,60                       DDD AFTER 28TH FEBRUARY?\n         BL    NEXTMNTH                    NO, LEAP YEAR IRRELEVANT.\n         LA    R1,1(,R1)                   YES, FUDGE DDD ACCORDINGLY.\nNEXTMNTH LA    R9,4(,R9)                   INCREMENT THRU MONTH TABLE.\n         SH    R1,0(,R9)                   DECREASE NUMBER OF DAYS.\n         BP    NEXTMNTH                    NOT YET, TRY NEXT MONTH.\n         AH    R1,0(,R9)                   FOUND THE MONTH.\n         CVD   R1,CONVWORK                 GET DAY OF MONTH.\n         OI    CONVWORK+7,X'0F'            MAKE UNPK RESULT PRINTABLE.\n         UNPK  CONVWORK+18(2),CONVWORK+6(2) FORMAT DAY OF MONTH.\n         MVI   CONVWORK+14,C'-'            INSERT THE DASH.\n         MVC   CONVWORK+15(2),2(R9)        MOVE IN MONTH NUMBER.\n         MVI   CONVWORK+17,C'-'            INSERT THE DASH.\n         MVC   WORK,CONVWORK+12            RETURN THE ANSWER.\n         LR    R9,R15                      RESTORE WORK REGISTER.\n         BR    R14                         RETURN.\n         SPACE\n         DROP  R7                          DATECONV.\n         SPACE\nMNTHTBL  DC    H'31'                       JAN\n         DC    C'01'\n         DC    H'29'                       FEB\n         DC    C'02'\n         DC    H'31'                       MAR\n         DC    C'03'\n         DC    H'30'                       APR\n         DC    C'04'\n         DC    H'31'                       MAY\n         DC    C'05'\n         DC    H'30'                       JUN\n         DC    C'06'\n         DC    H'31'                       JUL\n         DC    C'07'\n         DC    H'31'                       AUG\n         DC    C'08'\n         DC    H'30'                       SEP\n         DC    C'09'\n         DC    H'31'                       OCT\n         DC    C'10'\n         DC    H'30'                       NOV\n         DC    C'11'\n         DC    H'255'                      DEC (ALLOW FOR STUPID DDD)\n         DC    C'12'\n         SPACE\n         DS    0D\nCONVWORK DC    CL20' '                     WORK AREA FOR THIS ROUTINE.\n         SPACE\n         LTORG\n         DS    0H\n         TITLE 'PREFIX CHECKING SUBROUTINE'\n         USING PREFCHEK,R7\nPREFCHEK STM   R14,R12,SAVE+12   SAVE ALL GENERAL REGISTER VALUES.\n         LM    R8,R10,WORK+4     LOAD PARAMETERS AND COMPARE LENGTH.\nPREFLOOP CLI   0(R8),C'*'        GENERIC CHARACTER?\n         BE    PRFCHREQ          YES, NO MISMATCH YET.\n         CLC   0(1,R8),0(R9)     NO, COMPARE A BYTE.\n         BNE   PREFCHKD          MISMATCH FOUND SO EXIT.\nPRFCHREQ LA    R8,1(,R8)         POINT TO NEXT CHARACTER.\n         LA    R9,1(,R9)         POINT TO NEXT CHARACTER.\n         BCT   R10,PREFLOOP      GO CHECK NEXT CHARACTER, IF ANY.\nPREFCHKD LM    R14,R12,SAVE+12   RESTORE REGISTERS.\n         BR    R1                RETURN TO CALLER.\n         DROP  R7                PREFCHEK.\n         TITLE 'EXCP DISPLAY FILE HANDLER'\n         USING EXCP3270,R11\nEXCP3270 DS    0H\n         CLI   EXCPQSAM,C'Q'     USING EXCP?\n         BE    QSAM3270          NO, QSAM.\n         L     R15,EXCPADTB(R15) GET ROUTINE ADDRESS.\n         BSM   0,R15             BRANCH TO APPROPRIATE AMODE24 ROUTINE.\n         SPACE\nEXCPOPEN DS    0H                OPEN EXCP DCB IF APPROPRIATE.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVI   C'S'-C' '(R15),X'F0' SET CUSTOMIZABLE BYTE.\n         SPACE\n         DEVTYPE DCBDDNAM-IHADCB+EXCPDCB,$DEVTYPE\n         LTR   R15,R15           DOES THE DDNAME EXIST?\n         BNZ   EXCPSCRN          NO, TRY IT AND ISSUE WTO.\n         CLI   $DEVTYPE+2,X'10'  GRAPHIC DEVICE CLASS?\n         BE    EXCPSCRN          YES, USE EXCP TO 3270 TERMINAL.\n         MVI   EXCPQSAM,C'Q'     NO, USE QSAM FILES INTEAD OF TERMINAL.\n         SLR   R15,R15           SET ENTRY CODE FOR OPEN.\n         B     QSAM3270          USE FILE I/O INSTEAD OF TERMINAL 1/O.\n         SPACE\nEXCPSCRN OI    COPYATR1,X'D0'    GIVE STARTED TASK OPER/JCL/MOUNT.\n         EXTRACT MF=(E,EXTRCOMM) GET ADDRESS OF COMMUNICATION LIST.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    TRANOKAY          NO, CAN'T GET NON-SWAPPABLE.\n         MODESET MF=(E,MDSTSUP0) GET AUTHORIZED FOR SYSEVENT.\n         LA    R1,EXCPECB        YES, POINT TO AN ECB.\n*        SYSEVENT TRANSWAP       BECOME NON-SWAPPABLE.\n         LA    R0,X'0E'          LOAD TRANSWAP SYSEVENT CODE.\n         SVC   95                ISSUE SYSEVENT SVC.\n         LTR   R15,R15           WAS ANYTHING TO BE DONE?\n         BNZ   TRANDONE          NO, ALREADY NON-SWAPPABLE.\n         WAIT  ECB=EXCPECB       YES, WAIT TILL TRANSWAP COMPLETE.\nTRANDONE DS    0H\n         MODESET MF=(E,MDSTPROB) BACK TO PROBLEM STATE AND KEY.\nTRANOKAY DS    0H\n         OPEN  MF=(E,EXOPNCLS)   OPEN THE FILE.\n         LA    R1,EXCPDCB        POINT TO THE DCB.\n         USING IHADCB,R1\n*        TM    DCBOFLGS,DCBOFOPN DID THE OPEN WORK?\n         TM    DCBOFLGS,X'10'    DID THE OPEN WORK?\n         BZ    BADEXOPN          NO.\n         OI    MODESW3,XCPO+AID  YES, REMEMBER THIS.\n         L     R1,DCBDEBAD       POINT TO THE DEB.\n         DROP  R1                IHADCB.\n         L     R1,32(,R1)        POINT TO THE UCB.\n         UNPK  INITUNIT(5),4(3,R1)\n         TR    INITUNIT,HEX-C'0' SHOW THE UNIT NAME.\n         MVI   INITUNIT+4,C')'\n         MVC   TERMUNIT,INITUNIT COPY THE UCB NAME.\n         MVC   BADUNIT,INITUNIT\n         SLR   R0,R0\n         ST    R0,EXCPECB        RESET THE ECB.\n         EXCP  EXCPIOB           ISSUE ERASE/WRITE AND INITIAL MESSAGE.\n         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.\n         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?\n         BNE   BADEXCP           NO, ISSUE MESSAGE AND TERMINATE.\n         SLR   R0,R0             YES.\n         ST    R0,EXCPECB        RESET THE ECB.\n         LA    R1,QUERYCCW       POINT TO THE CHANNEL PROGRAM.\n         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.\n         EXCP  EXCPIOB           ISSUE THE I/O.\n         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.\n         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?\n         BNE   EXCPXIT0          NO, SKIP QUERY STUFF, PRETEND A-OKAY.\n         SLR   R0,R0             YES.\n         ST    R0,EXCPECB        RESET THE ECB.\n         LA    R1,BUFFER         YES, GET WORKING INPUT BUFFER ADDRESS.\n         STCM  R1,7,QRYRDCCW+1   PUT THIS ADDRESS IN CCW.\n         LA    R1,QRYRDCCW       POINT TO THE CHANNEL PROGRAM.\n         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.\n         EXCP  EXCPIOB           ISSUE THE I/O.\n         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.\n         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?\n         BNE   BADEXCP           NO, ISSUE MESSAGE AND TERMINATE.\n         LA    R1,1024           YES, GET REQUESTED LENGTH.\n         SH    R1,I0BCSW+5       LESS RESIDUAL COUNT FOR ACTUAL LENGTH.\n         LA    R0,1\n         SLL   R0,31             GET AMODE BIT READY.\n         L     R10,INITADDR      POINT TO THE INITIALIZATION ROUTINE.\n         USING INITIAL,R10\n         LA    R14,QUERYGOT      GET TARGET OF BRANCH.\n         DROP  R10\n         OR    R14,R0            SET AMODE BIT.\nEXCPXIT0 SLR   R15,R15           SET RETURN CODE OF ZERO.\n         BSM   0,R14             RETURN TO CALLER.\n         SPACE\nBADEXOPN WTO   'PRY671I IMON - OPEN FAILURE - TASK TERMINATING',       +\n               ROUTCDE=(2,11)\n         LA    R15,20            SET COMPLETION CODE.\n         SVC   3                 TERMINATE THE CURRENT REQUEST BLOCK.\n         SPACE\nBADEXCP  UNPK  BADIOCC(3),EXCPECB(2)\n         TR    BADIOCC,HEX-C'0'  SHOW I/O COMPLETION CODE.\n         MVI   BADIOCC+2,C' '    ERASE GARBAGE.\n         LA    R0,16             GET UNIT/CHANNEL STATUS BIT COUNT.\n         LA    R15,IOSTATTB      POINT TO STATUS LABEL TABLE.\n         ICM   R1,X'C',I0BCSW+3  LOAD UNIT AND CHANNEL STATUS BYTES.\nBADSTALP LTR   R1,R1             IS THE HIGH BIT ON?\n         BM    BADSTAOK          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,16(,R15)      POINT TO NEXT LABEL.\n         BCT   R0,BADSTALP       TRY IT.\n         LA    R15,BLANKS        ALL BITS ARE ZERO.\nBADSTAOK MVC   BADSTAT,0(R15)    LOAD I/O STATUS LABEL.\n         LA    R0,8              GET SENSE BYTE BIT COUNT.\n         LA    R15,IOSENSTB      POINT TO SENSE LABEL TABLE.\n         ICM   R1,8,I0BSENS0     LOAD FIRST SENSE BYTE.\nBADSENLP LTR   R1,R1             IS THE HIGH BIT ON?\n         BM    BADSENOK          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,16(,R15)      POINT TO NEXT LABEL.\n         BCT   R0,BADSENLP       TRY IT.\n         LA    R15,BLANKS        ALL BITS ARE ZERO.\nBADSENOK MVC   BADSENS,0(R15)    LOAD I/O SENSE LABEL.\n         WTO   MF=(E,BADIOWTO)   ISSUE I/O FAILURE MESSAGE.\n         CLOSE MF=(E,EXOPNCLS)   CLOSE THE FILE.\n         LA    R15,20            SET COMPLETION CODE.\n         SVC   3                 TERMINATE THE CURRENT REQUEST BLOCK.\n         SPACE\nEXCPWRIT DS    0H                ISSUE WRITE TO SCREEN.\n         STCM  R1,7,WRITECCW+1   PUT DATA STREAM ADDRESS IN CCW.\n         STH   R0,WRITECCW+6     PUT DATA STREAM LENGTH IN CCW.\n         NI    0(R1),X'04'       RESET WCC EXCEPT FOR BELL.\n         TM    MODESW3,AID       IS AN AID ALREADY SET?\n         BZ    XFIXWCC           NO.\n         OI    0(R1),X'03'       YES, RESET AID/MDT AND UNLOCK K/B.\n         NI    MODESW3,255-AID   RESET AID-SET FLAG.\nXFIXWCC  TR    0(1,R1),TABLE     SET WCC \"PARITY\" BITS.\n         MVI   WRITECCW,X'01'    LOAD WRITE OP-CODE.\n         TM    MODESW3,EWA       ERASE/WRITE ALTERNATE REQUIRED?\n         BZ    EXCPOPOK          NO, OP-CODE IS NOW CORRECT.\n         MVI   WRITECCW,X'0D'    LOAD ERASE/WRITE ALTERNATE OP-CODE.\n         NI    MODESW3,255-EWA   FLAG NO LONGER REQUIRED.\nEXCPOPOK SLR   R0,R0\n         ST    R0,EXCPECB        RESET THE ECB.\n         LA    R1,WRITECCW       POINT TO THE CHANNEL PROGRAM.\n         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.\n         EXCP  EXCPIOB           ISSUE THE I/O.\n         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.\n         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?\n         BNE   BADEXCP           NO, ISSUE MESSAGE AND TERMINATE.\n         SLR   R15,R15           SET RETURN CODE OF ZERO.\n         BSM   0,R14             RETURN TO CALLER.\n         SPACE\nEXCPREAD DS    0H                ISSUE READ-MODIFIED TO SCREEN.\n         L     R1,COMMADDR       POINT TO MODIFY/STOP ECB ADDRESS.\n         L     R1,0(,R1)         POINT TO MODIFY/STOP ECB.\n         TM    0(R1),X'40'       HAS THE ECB BEEN POSTED?\n         BO    EODAD             YES, OPERATOR ISSUED STOP COMMAND.\n         SLR   R0,R0\n         ST    R0,EXCPECB        RESET THE ECB.\n         LA    R1,READCCW        POINT TO THE CHANNEL PROGRAM.\n         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.\n         EXCP  EXCPIOB           ISSUE THE I/O.\n         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.\n         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?\n         BNE   BADEXCP           NO, ISSUE MESSAGE AND TERMINATE.\n         CLI   INBUFF,X'60'      ANY AID SET?\n         BE    EXCPNULL          NO.\n         CLI   INBUFF,X'6D'      CLEAR BUTTON HIT?\n         BNE   EXCPAID           NO.\n         CLI   CLR+1,X'7E'       USING ALTERNATE SCREEN SIZE?\n         BNE   EXCPAID           NO.\n         OI    MODESW3,EWA       YES, NEED AN ERASE/WRITE ALTERNATE.\nEXCPAID  OI    MODESW3,AID       FLAG AID RETURNED FROM SCREEN.\n         LA    R1,INBUFLEN       GET REQUESTED LENGTH.\n         SH    R1,I0BCSW+5       LESS RESIDUAL COUNT FOR ACTUAL LENGTH.\n         SLR   R15,R15           SET RETURN CODE OF ZERO.\nEXCPRRTN BSM   0,R14             RETURN TO CALLER.\nEXCPNULL LA    R15,4             SET RETURN CODE OF FOUR.\n         AIF   (&MSPMON).XF4WTCK\n         CLI   TGETFLG,TGETFLGN  NOWAIT CURRENTLY IN EFFECT?\n         BE    EXCPRRTN          YES, RETURN TO CALLER.\n         AGO   .XWTCKOK\n.XF4WTCK ANOP\n         TM    MODESW3,NOWT      NOWAIT CURRENTLY IN EFFECT?\n         BO    EXCPRRTN          YES, RETURN TO CALLER.\n.XWTCKOK ANOP\n         STIMER WAIT,BINTVL=EXCPWAIT  NO, WAIT A BIT.\n         B     EXCPREAD          NOW REDRIVE THE READ.\n         SPACE\nEXCPCLOS DS    0H                CLOSE EXCP DCB IF IT IS OPEN.\n         TM    MODESW3,XCPO      WAS THE EXCP FILE OPENED?\n         BZ    EXCPCLSD          NO, RETURN TO CALLER.\n         TIME  DEC               YES, GET THE TIME.\n         STCM  R0,4,TERMMSG+6    SHOW IT IN THE TERMINATION MESSAGE.\n         OI    TERMMSG+6,X'F0'\n         STCM  R0,8,TERMMSG+3\n         OI    TERMMSG+3,X'F0'\n         SRL   R0,4\n         STCM  R0,4,TERMMSG+5\n         OI    TERMMSG+5,X'F0'\n         STCM  R0,8,TERMMSG+2\n         OI    TERMMSG+2,X'F0'\n         LA    R1,TERMMSG        POINT TO THE TERMINATION MESSAGE.\n         STCM  R1,7,INITCCW+1    PUT DATA STREAM ADDRESS IN CCW.\n         LA    R0,TRMSTPLN\n         L     R1,COMMADDR       POINT TO MODIFY/STOP ECB ADDRESS.\n         L     R1,0(,R1)         POINT TO MODIFY/STOP ECB.\n         TM    0(R1),X'40'       HAS THE ECB BEEN POSTED?\n         BO    TRMLENOK          YES, OPERATOR ISSUED STOP COMMAND.\n         LA    R0,L'TERMMSG      NO, TERMINAL USER SAID TO EXIT.\nTRMLENOK STH   R0,INITCCW+6      PUT DATA STREAM LENGTH IN CCW.\n         LA    R1,INITCCW        POINT TO THE CHANNEL PROGRAM.\n         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.\n         EXCP  EXCPIOB           ISSUE THE I/O.\n         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.\n         CLOSE MF=(E,EXOPNCLS)   CLOSE THE FILE.\n         NI    MODESW3,255-XCPO  THE EXCP FILE IS NOW CLOSED.\n         SLR   R15,R15           SET RETURN CODE OF ZERO.\nEXCPCLSD BSM   0,R14             RETURN TO CALLER.\n         SPACE\nEXCPLOGO DS    0H                LOAD PROGRAMMABLE SYMBOL SET.\n         SLR   R0,R0\n         ST    R0,EXCPECB        RESET THE ECB.\n         LA    R1,KANGACCW       POINT TO THE CHANNEL PROGRAM.\n         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.\n         EXCP  EXCPIOB           ISSUE THE I/O.\n         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.\n         LA    R15,8             PREPARE BAD RETURN CODE.\n         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?\n         BNE   LOGOEXIT          NO, RETURN WITH NON-ZERO RETURN CODE.\n         SLR   R15,R15           YES, SET RETURN CODE OF ZERO.\nLOGOEXIT BSM   0,R14             RETURN TO CALLER.\n         SPACE\n         DROP  R11               EXCP3270.\n         TITLE 'EXCP DISPLAY FILE HANDLER - CONSTANTS AND VARIABLES'\n$DEVTYPE DC    2F'0'             DEVTYPE RESULTS AREA.\nEXCPADTB DS    0F                ROUTINE ENTRY POINT VECTOR.\n         DC    A(EXCPOPEN)       ENTRY CODE 00 - OPEN FILE AND QUERY.\n         DC    A(EXCPWRIT)       ENTRY CODE 04 - WRITE DATA STREAM.\n         DC    A(EXCPREAD)       ENTRY CODE 08 - READ MODIFIED.\n         DC    A(EXCPCLOS)       ENTRY CODE 0C - CLOSE FILE.\n         DC    A(EXCPLOGO)       ENTRY CODE 10 - LOAD PROGRAM SYMBOLS.\nEXCPWAIT DC    F'100'            WAIT ONE SECOND.\nEXTRCOMM EXTRACT COMMADDR,'S',FIELDS=(COMM),MF=L\nCOMMADDR DC    A(0)              ADDRESS OF COMMUNICATION LIST.\nEXOPNCLS DC    AL1(128),AL3(EXCPDCB)\nEXCPECB  DC    F'0'              EXCP EVENT CONTROL BLOCK.\n         PRINT NOGEN\n         AIF   (&MVSMON).EXCPIEF\nEXCPDCB  DCB   DSORG=PS,MACRF=E,DDNAME=KDJRDER,BUFL=4096,RECFM=U,      +\n               IOBAD=EXCPIOB\n         AGO   .EXCPDDD\n.EXCPIEF ANOP\nEXCPDCB  DCB   DSORG=PS,MACRF=E,DDNAME=IEFRDER,BUFL=4096,RECFM=U,      +\n               IOBAD=EXCPIOB\n.EXCPDDD ANOP\n         PRINT GEN\nEXCPIOB  DS    0F\nI0BFLAG1 DC    X'02'\nI0BFLAG2 DC    X'00'\nI0BSENS0 DC    X'00'\nI0BSENS1 DC    X'00'\nI0BECBCC EQU   *,1\nI0BECBPT DC    A(EXCPECB)               ECB\nI0BFLAG3 DC    X'00'\nI0BCSW   DC    XL7'00000000000000'\nI0BSIOCC EQU   *,1\nI0BSTART DC    A(INITCCW)               CH PGM\nI0BFLAG4 EQU   *,1\nI0BDCBPT DC    A(EXCPDCB)               DCB ADD\nI0BRESTR DC    X'00000000'\nI0BINCAM DC    H'0'\nI0BERRCT DC    H'0'\n         DC    XL8'0000000000000000'    UCB INDEX\nINITCCW  CCW   X'05',INITMSG,X'20',L'INITMSG          ERASE/WRITE.\nEWALTCCW CCW   X'0D',BLANKS,X'20',1                   ERASE/WRITE ALT.\nQUERYCCW CCW   X'11',QUERY+1,X'20',L'QUERY-1          WSF.\nKANGACCW CCW   X'11',SYMFIELD,X'20',ADDSYMLN          WSF.\nQRYRDCCW CCW   X'06',0,X'20',1024                     READ-MODIFIED.\nWRITECCW CCW   X'01',0,X'20',0                        WRITE.\nREADCCW  CCW   X'06',INBUFF,X'20',INBUFLEN            READ-MODIFIED.\nIOSTATTB DS    0F\n         DC    CL16'ATTENTION       '\n         DC    CL16'STATUS MODIFIER '\n         DC    CL16'CONTROL UNIT END'\n         DC    CL16'BUSY            '\n         DC    CL16'CHANNEL END     '\n         DC    CL16'DEVICE END      '\n         DC    CL16'UNIT CHECK      '\n         DC    CL16'UNIT EXCEPTION  '\n         DC    CL16'PGM CNTL INTERPT'\n         DC    CL16'INCORRECT LENGTH'\n         DC    CL16'PROGRAM CHECK   '\n         DC    CL16'PROTECTION CHECK'\n         DC    CL16'CHANNEL DATA CHK'\n         DC    CL16'CHANNEL CNTL CHK'\n         DC    CL16'INTRFACE CTL CHK'\n         DC    CL16'CHAINING CHECK  '\nIOSENSTB DS    0F\n         DC    CL16'COMMAND REJECT  '\n         DC    CL16'INTERVENTION REQ'\n         DC    CL16'BUS-OUT CHECK   '\n         DC    CL16'EQUIPMENT CHECK '\n         DC    CL16'DATA CHECK      '\n         DC    CL16'OVERRUN         '\n         DC    CL16'CONTROL CHECK   '\n         DC    CL16'OPERATION CHECK '\nINITMSG  DC    C'G I-MON (????) INITIALIZING - PLEASE WAIT'\nINITUNIT EQU   INITMSG+9,4\nTERMMSG  DC    C'G HH:MM  -  I-MON (????) ENDED'\nTERMUNIT EQU   TERMMSG+19,4\n         DC    C' DUE TO OPERATOR STOP COMMAND'\nTRMSTPLN EQU   *-TERMMSG\nEXCPQSAM DC    C'E'              EXCP OR QSAM FLAG.\nBADIOWTO WTO   'PRY672W IMON (????) - I/O FAILURE - CC=?? - 0123456789A+\n               BCDEF - 0123456789ABCDEF',ROUTCDE=(2,11),MF=L\nBADUNIT  EQU   BADIOWTO+18,4\nBADIOCC  EQU   BADIOWTO+43,2\nBADSTAT  EQU   BADIOWTO+58,16\nBADSENS  EQU   BADIOWTO+67,16\n         SPACE\n         DS    0H\n         TITLE 'QSAM DISPLAY FILE HANDLER'\n         USING EXCP3270,R11\nQSAM3270 DS    0H\n         LA    R11,QSAM3270      SET LOCAL BASE.\n         DROP  R11               EXCP3270.\n         USING QSAM3270,R11\n         ST    R14,QSRETURN      SAVE RETURN ADDRESS.\n         L     R15,QSAMADTB(R15) GET ROUTINE ADDRESS.\n         BR    R15               BRANCH TO APPROPRIATE ROUTINE.\n         SPACE\nQSAMOPEN DS    0H                OPEN QSAM DCB.\n         OPEN  MF=(E,QSOPNCLS)   OPEN THE FILE.\n         OI    MODESW3,XCPO      REMEMBER THIS.\n         L     R14,QSRETURN      RESTORE RETURN ADDRESS.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nQSAMWRIT SLR   R1,R1             PRINT SCREEN IMAGE.\n         ST    R9,QSSAVER9       SAVE R9 VALUE.\n         L     R9,PRNTADDR       LOAD SUBROUTINE ENTRY POINT ADDRESS.\n         BASR  R14,R9            CALL HARDCOPY SUBROUTINE.\n         L     R9,QSSAVER9       RESTORE R9 VALUE.\n         L     R14,QSRETURN      RESTORE RETURN ADDRESS.\n         SLR   R15,R15           HOPE IT ALL WORKED.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nQSAMREAD MVC   INBUFF,QSAMINHD   SET READ HEADER.\n         MVI   INCHARS,C'Z'      PREPARE FOR END-OF-FILE.\n         ST    R13,PRNTSAVE+4    SAVE DYNAMIC AREA BASE REGISTER.\n         LA    R13,SAVEREGS      GET SAVE AREA ADDRESS.\n         STM   R14,R12,PRNTSAVE+12   SAVE OTHER REGISTERS.\n         GET   QSAMDCB,INCHARS   READ AN INPUT RECORD.\nQSAMEND  LM    R14,R12,PRNTSAVE+12    RESTORE OTHER REGISTERS.\n         L     R13,PRNTSAVE+4    RESTORE REGISTER 13.\n         OI    MODESW3,AID       FLAG AID RETURNED FROM SCREEN.\n         LA    R1,INBUFLEN       GET REQUESTED LENGTH.\n         L     R14,QSRETURN      RESTORE RETURN ADDRESS.\n         SLR   R15,R15           HOPE IT ALL WORKED.\nQSAMLOGO BR    R14               RETURN TO CALLER.\n         SPACE\nQSAMCLOS DS    0H                CLOSE EXCP DCB IF IT IS OPEN.\n         TM    MODESW3,XCPO      WAS THE EXCP FILE OPENED?\n         BZ    QSAMCLSD          NO, RETURN TO CALLER.\n         CLOSE MF=(E,QSOPNCLS)   CLOSE THE FILE.\n         NI    MODESW3,255-XCPO  THE EXCP FILE IS NOW CLOSED.\n         L     R14,QSRETURN      RESTORE RETURN ADDRESS.\n         SLR   R15,R15           SET RETURN CODE OF ZERO.\nQSAMCLSD BR    R14               RETURN TO CALLER.\n         SPACE\n         DROP  R11               QSAM3270.\n         TITLE 'QSAM DISPLAY FILE HANDLER - CONSTANTS AND VARIABLES'\nQSAMADTB DS    0F                ROUTINE ENTRY POINT VECTOR.\n         DC    A(QSAMOPEN)       ENTRY CODE 00 - OPEN FILE AND QUERY.\n         DC    A(QSAMWRIT)       ENTRY CODE 04 - WRITE DATA STREAM.\n         DC    A(QSAMREAD)       ENTRY CODE 08 - READ MODIFIED.\n         DC    A(QSAMCLOS)       ENTRY CODE 0C - CLOSE FILE.\n         DC    A(QSAMLOGO)       ENTRY CODE 10 - LOAD PROGRAM SYMBOLS.\nQSRETURN DC    F'0'\nQSSAVER9 DC    F'0'\nQSOPNCLS DC    AL1(128),AL3(QSAMDCB)\n         PRINT NOGEN\n         AIF   (&MVSMON).QSAMIEF\nQSAMDCB  DCB   DSORG=PS,MACRF=GM,DDNAME=KDJRDER,                       +\n               RECFM=FB,LRECL=80,EODAD=QSAMEND\n         AGO   .QSAMDDD\n.QSAMIEF ANOP\nQSAMDCB  DCB   DSORG=PS,MACRF=GM,DDNAME=IEFRDER,                       +\n               RECFM=FB,LRECL=80,EODAD=QSAMEND\n.QSAMDDD ANOP\n         PRINT GEN\nQSAMINHD DC    X'7D4040114040'\n         DS    0H\n         TITLE 'SCREEN PRINT SUBROUTINE - EXECUTES IN 24 BIT AMODE'\n         USING SCRNPRNT,R9\nSCRNPRNT ST    R13,PRNTSAVE+4    SAVE DYNAMIC AREA BASE REGISTER.\n         LA    R13,SAVEREGS      GET SAVE AREA ADDRESS.\n         STM   R14,R12,PRNTSAVE+12   SAVE OTHER REGISTERS.\n         LTR   R1,R1             HAVE WE COME TO CLOSE IMPLOG?\n         BNM   SUPPRTST          NO, TO PRINT A SCREEN IMAGE.\n         MVI   LCMSG,X'C5'       SOUND ALARM FOR CLOSE FAILURE.\n         MVI   LCMSG+5,X'F8'     HIGH INTENSITY FOR CLOSE FAILURE.\n         MVI   LCMSG+9,X'F2'     RED MESSAGE FOR CLOSE FAILURE. (I3279)\n         TM    MODESW,OPNF       IS IMPLOG OPEN?\n         BZ    CLOSEXIT          NO, RETURN TO CALLER.\n         CLOSE IMPLOG            YES, END OF HARDCOPY LOG FILE.\n         NI    MODESW,255-OPNF   TURN OFF OPEN FLAG.\n         MVC   LCMSGCLS,S99SYSOC ECHO SYSOUT CLASS.\n         CLI   S99SYSOC,C' '     WAS IMPLOG DYNAMICALLY ALLOCATED?\n         BE    CLOSEDOK          NO.\n         LA    R1,F99PTR         YES, DYNAMICALLY FREE IT.\n         DYNALLOC\n         LTR   R15,R15           SUCCESSFUL?\n         BNZ   PRNTEXIT          NO, DON'T TURN OFF FLAG.\nCLOSEDOK MVI   LCMSG,X'C1'       DON'T SOUND ALARM FOR CLOSE SUCCESS.\n         MVI   LCMSG+5,X'F0'     LOW INTENSITY FOR CLOSE SUCCESS.\n         MVI   LCMSG+9,X'F4'     GREEN MESSAGE FOR CLOSE OK.    (I3279)\n         MVI   S99SYSOC,C' '     TURN OFF DYNAMICALLY ALLOCATED FLAG.\nCLOSEXIT LA    R1,LCMSG          POINT TO \"LOG CLOSED\" MESSAGE.\n         LA    R0,LCMSGLEN       GET \"LOG CLOSED\" MESSAGE LENGTH.\nPRNTEXIT L     R13,PRNTSAVE+4    RESTORE REGISTER 13.\n         STM   R0,R1,PRNTSAVE+20 SAVE TPUT PARAMETERS FOR RESTORE.\n         LM    R14,R12,PRNTSAVE+12    RESTORE OTHER REGISTERS.\n         BR    R14               RETURN TO CALLER.\n         DROP  R13               GOTAREA.\n         USING GOTAREA,R10       LET'S FIND THE SCREEN IMAGE.\nSUPPRTST L     R10,PRNTSAVE+4    GET OLD REGISTER 13 VALUE.\n         LA    R1,HOME           POINT TO TO SCREEN BUFFER.\n         C     R1,SCRNPA3A+4     SCREEN IMAGE PRINT SUPPORTED?\n         BE    OPENTEST          YES, FUNCTION ALLOWED FOR THIS OPTION.\n         LA    R1,NPMSG          NO, POINT TO \"NO PRINT\" MESSAGE.\n         LA    R0,NPMSGLEN       GET \"NO PRINT\" MESSAGE LENGTH.\n         B     PRNTEXIT          RETURN TO MAINLINE.\nOPENTEST TM    MODESW,OPNF       IMPLOG ALREADY OPEN?\n         BO    PRNTSCRN          YES, PRINT THE SCREEN.\n         SLR   R5,R5             PREPARE FOR IC.\n         L     R4,SMCAADDR       GET SMCA ADDRESS.\n         MVC   HDGSMFID,16(R4)   SMF SYSTEM ID.\n         L     R4,PSATOLD        GET POINTER TO CURRENT TCB.\n         L     R4,12(0,R4)       POINT TO TIOT.\n         MVC   IMPUSRID,0(R4)    GET USERID.\n         LA    R4,24(0,R4)       POINT TO TIOELNGH.\nCHKDDNAM CLC   4(8,R4),=C'IMPLOG  '\n         BE    OPENFILE          FILE EXISTS SO GO AND OPEN IT.\n         IC    R5,0(0,R4)        GET TIOT ENTRY LENGTH.\n         AR    R4,R5             POINT TO NEXT TIOT ENTRY.\n         CLI   0(R4),0           ZERO LENGTH ENTRY?\n         BNE   CHKDDNAM          NO, CHECK OUT THIS ENTRY.\n         LA    R1,S99RB          YES, NOT THERE SO ALLOCATE IMPLOG.\n         CLI   INBUFF,4          PRINT REQUESTED BY PF4/16?\n         BE    CHKCLASS          YES, CLASS IS FIRST INPUT CHARACTER.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\nCHKCLASS CLI   INCHARS,C'A'      IS IT A VALID SYSOUT CLASS?\n         BL    GETCLASS          NO.\n         MVC   GETCLASS+1(1),INCHARS YES, GET NEW TEMPORARY LOG CLASS.\nGETCLASS MVI   S99SYSOC,C'0'     SUPPLY SYSOUT CLASS.\n         LA    R1,S99RBPTR       ADDR OF PARAMETER LIST FOR DYNALLOC.\n         DYNALLOC\n         LTR   R15,R15           CHECK RETURN CODE.\n         BZ    OPENFILE          SUCCESS SO OPEN FILE AND PRINT.\n         CVD   R15,WORK          FAILURE, SO REPORT RETURN CODE.\n         OI    WORK+7,15\n         UNPK  NFMSGRC,WORK+6(2)\n         LA    R1,NFMSG          POINT TO \"NO FILE\" MESSAGE.\n         LA    R0,NFMSGLEN       GET \"NO FILE\" MESSAGE LENGTH.\n         B     PRNTEXIT          EXIT SUBROUTINE.\n         USING IHADCB,R1\nOPENEXIT CLC   DCBBLKSI,HWZERO   ZERO BLOCK LENGTH?\n         BNER  R14               NO, MAKE NO CHANGE.\n         MVC   DCBBLKSI,HW3120   YES, SUPPLY BLKSIZE=3120.\n         BR    R14               RETURN TO OPEN.\n         DROP  R1                IHADCB.\nOPENFILE OPEN  (IMPLOG,OUTPUT)\n         OI    MODESW,OPNF       TURN ON LOG-OPENED FLAG.\n         OI    HEDGTEST+1,X'F0'  HEADING REQUIRED AFTER AN OPEN.\n         MVC   PAGE#,FFFF        RESET PAGE COUNT AFTER AN OPEN.\nPRNTSCRN CLI   LINES+3,24        MORE THAN 24 LINES ON SCREEN?\n         BH    EOHDGFIX          YES, ONLY ONE SCREEN IMAGE PER PAGE.\n         XI    HEDGTEST+1,X'F0'  ALLOW TWO SCREEN IMAGES\nHEDGTEST B     NOHEADNG                PER PAPER PAGE.\nEOHDGFIX DS    0H\n         TIME  DEC\n         L     R7,DTCONVAD       LOAD DATE CONVERSION ROUTINE ADDRESS.\n         LR    R13,R10           GET ADDRESSABILITY TO GOTAREA.\n         BASR  R14,R7            INVOKE IT.\n         LA    R13,SAVEREGS      RESTORE SAVE AREA ADDRESS.\n         MVC   PRNTDATE,WORK     LOAD THE CURRENT DATE.\n         IC    R0,HEX            PUT X'F0' IN LOW ORDER BYTE.\n         SRL   R0,4              MAKE VALID PACKED DECIMAL.\n         ST    R0,WORK           0HHMMSSF.\n         MVC   HHMMSS,=X'402120207A20207A2020'\n         ED    HHMMSS,WORK\n         LH    R1,PAGE#\n         LA    R1,1(,R1)         GET NEW PAGE NUMBER.\n         STH   R1,PAGE#          SAVE IT.\n         CVD   R1,WORK\n         OI    WORK+7,X'0F'\n         UNPK  PAGENUM,WORK+6(2) PRINT PAGE NUMBER.\n         PUT   IMPLOG,LOGPGHDG   WRITE HEADING FOR NEW PAGE.\nNOHEADNG LM    R3,R4,SCRNPA3A    GET SCREEN DATA STREAM DETAILS.\n         LA    R3,0(R3,R4)       POINT PAST END OF DATA STREAM.\n         LA    R4,4(,R4)         JUMP OVER WCC,SBA(1,1) ORDERS.\n         MVC   CARD,BLANKS       BLANK THE OUTPUT RECORD.\n         MVI   CARD,C'-'         SPACE A BIT FOR NEW SCREEN IMAGE.\nPRTLINLP SLR   R5,R5             ZERO BYTE COUNT OF THIS PRINT LINE.\n         LA    R6,CARD           POINT TO THE OUTPUT RECORD.\nPRNTCHAR CLI   0(R4),X'28'       SA?\n         BE    PRINTSA           YES.\n         CLI   0(R4),X'0E'       SA (F668X)?\n         BE    PRINTSA           YES.\n         CLI   0(R4),X'1D'       SF?\n         BE    PRINTSF           YES.\n         CLI   0(R4),X'1B'       SFE (F9526)?\n         BE    PRINTSFF          YES.\n         CLI   0(R4),X'13'       IC?\n         BE    PRINTIC           YES.\n         CLI   0(R4),X'08'       GE?\n         BE    PRINTGE           YES.\n         CLI   0(R4),X'11'       SBA?\n         BE    LASTLINE          YES.\n         CLI   0(R4),X'3C'       RA?\n         BE    LASTLINE          YES.\n         MVC   0(1,R6),0(R4)     COPY BYTE TO OUTPUT LINE.\nPRTSFRTN LA    R6,1(,R6)         INCREMENT OUTPUT ADDRESS.\n         LA    R5,1(,R5)         INCREMENT BYTE COUNT.\nPRINTIC  LA    R4,1(,R4)         INCREMENT INPUT ADDRESS.\nPRTORDER CLR   R4,R3             REACHED END OF BUFFER?\n         BNL   LASTLINE          YES, WIND UP THE PRINT.\n         C     R5,COLUMNS        DONE A WHOLE LINE YET?\n         BL    PRNTCHAR          NO, PROCESS NEXT BYTE.\n         TR    CARD,PRTXLATE     YES, GET RID OF UNPRINTABLES.\n         PUT   IMPLOG,CARD       OUTPUT THE RECORD.\n         MVC   CARD,BLANKS       SINGLE SPACING FOR DETAIL LINES.\n         B     PRTLINLP          GO MAKE THE NEXT PRINT LINE.\nPRINTSA  LA    R4,3(,R4)         JUMP OVER SA ORDER.\n         B     PRTORDER          RESUME PRINT OF SCREEN IMAGE.\nPRINTSFF LA    R4,1(,R4)         JUMP OVER SFE ORDER.\nPRINTSF  LA    R4,1(,R4)         JUMP OVER SF ORDER.\n         B     PRTSFRTN          RESUME PRINT OF SCREEN IMAGE.\nPRINTGE  LA    R4,1(,R4)         JUMP OVER GE CODE.\n         MVC   0(1,R6),0(R4)     COPY BYTE TO OUTPUT LINE.\n         LA    R1,STRM3270       GET TRANSLATE TABLE ADDRESSABILITY.\n         USING STRM3270,R1       TRANSLATE TO BEST FIT EBCDIC.\n         TR    0(1,R6),GRAFTABL-C' '\n         DROP  R1                STRM3270.\n         B     PRTSFRTN          RESUME PRINT OF SCREEN IMAGE.\nLASTLINE LTR   R5,R5             ANY BYTES NOT YET OUTPUT?\n         BZ    PUTPRMSG          NO, TERMINATE.\n         TR    CARD,PRTXLATE     YES, GET RID OF UNPRINTABLES.\n         PUT   IMPLOG,CARD       OUTPUT LAST LINE.\nPUTPRMSG MVC   PRMSGCLS,S99SYSOC ECHO SYSOUT CLASS.\n         LA    R1,PRMSG          POINT TO \"PRINTED\" MESSAGE.\n         LA    R0,PRMSGLEN       GET \"PRINTED\" MESSAGE LENGTH.\n         B     PRNTEXIT          PRINTED WHOLE SCREEN, SO LEAVE.\n         DROP  R9,R10            SCRNPRNT, GOTAREA.\n         TITLE 'SCREEN PRINT - DYNALLOC REQUEST PARAMETER BLOCKS'\n*        REQUEST BLOCK FOR IMPLOG SYSOUT ALLOCATION\n*                TO BE USED IF IMPLOG WAS NOT PRE-ALLOCATED.\n         SPACE 2\n         DS    0F\nS99RBPTR DC    X'80',AL3(S99RB)           SVC 99 REQUEST BLOCK POINTER.\n         SPACE\nS99RB    DS    0F                         SVC 99 REQUEST BLOCK.\nS99RBLN  DC    AL1(20)                    LENGTH=20 BYTES.\nS99VERB  DC    X'01'                      VERB CODE=01 (DSNAME ALLOC).\nS99FLAG1 DC    X'1000'                    DON'T USE EXISTING ALLOC.\nS99ERROR DC    AL2(0)                     ERROR CODE.\nS99INFO  DC    AL2(0)                     INFO  CODE.\nS99TXTPP DC    A(S99TUPL)                 POINTER TO TEXT UNIT POINTERS\nS99RSVD1 DC    A(0)                       RESERVED.\nS99FLAG2 DC    A(0)                       FLAGS 2.\nS99TUPL  DC    A(S99TUKY1)                TEXT UNIT POINTERS.\nS99EPARM DC    X'80',AL3(S99TUKY2)        LAST PARM ADDRESS.\nS99TUNIT DS    0F\nS99TUKY1 DC    X'0001',X'0001',X'0008',C'IMPLOG  ' DDNAME.\nS99TUKY2 DC    X'0018',X'0001',X'0001'    SYSOUT CLASS.\nS99SYSOC DC    C' '             USE AS DYNALLOC-PERFORMED FLAG.\n         DS    0D\nS99LENG  EQU   *-S99RBPTR\n         SPACE 3\n*        DYNAMIC ALLOCATION REQUEST BLOCK TO FREE DDNAME IMPLOG\n*                TO BE USED IF IMPLOG WAS DYNAMICALLY-ALLOCATED.\n         SPACE 2\n         DS    0F                 GET FULLWORD BOUNDARY.\nF99PTR   DC    X'80',AL3(F99RB)   THE POINTER TO THE MESS....\n         SPACE\nF99RB    DC    FL1'20'            LENGTH OF RB IN BYTES = 20\n         DC    XL1'02'            VERB CODE=X'02' - FREE BY DDNAME.\n         DC    AL2(0)             FLAGS1 - NO OPTIONS.\nF99RC    DC    XL2'0000'          ERROR CODE.\nF99INFO  DC    XL2'0000'          INFO CODE.\n         DC    AL4(F99TXPT)       ADDRESS OF TEXT UNITS.\n         DC    XL4'00'            RESERVED.\n         DC    XL4'00'            FLAGS2.\nF99TXPT  DC    AL4(F99TU1)        ADDR OF DDN TEXT UNIT.\n         DC    X'80',AL3(F99TU2)  ADDR OF LAST UNALLOC TEXT UNIT.\nF99TU1   DC    X'0001',X'0001',FL2'8',C'IMPLOG  ' DDNAME.\nF99TU2   DC    X'0007',X'0000'    UNALLOC EVEN IF PERM ALLOC.\nF99LEN   EQU   *-F99PTR           LENGTH OF FIELDS.\n         TITLE 'SCREEN PRINT - VARIABLES, CONSTANTS AND DCB'\n         DS    0D\nLOGPGHDG DC    CL29'1 I-MON  HARDCOPY LOG    SID='\nHDGSMFID DC    CL4' '\n         DC    CL9'    USER='\nIMPUSRID DC    CL8' '\n         DC    CL1' '\nPRNTDATE DC    CL8'YY-MM-DD'\n         DC    CL1' '\nHHMMSS   DC    CL10'  HH.MM.SS'\n         DC    CL7'  PAGE '\nPAGENUM  DC    CL3'000'\nCARD     DC    CL80' '\nPRNTSAVE DC    2F'0'             FUDGE UP SOME SAVE AREAS.\n         DC    A(SAVEREGS)\n         DC    15F'0'\nSAVEREGS DC    F'0'\n         DC    A(PRNTSAVE)\n         DC    16F'0'\nPAGE#    DC    H'0'\n         SPACE\n         LTORG\n         SPACE\n         DS    0F\nLOGEXLST DC    AL1(X'80'+X'05'),AL3(OPENEXIT)\nHWZERO   DC    H'0'\nHW3120   DC    H'3120'\n         SPACE\n         PRINT NOGEN\n         SPACE\nIMPLOG   DCB   DSORG=PS,MACRF=PM,DDNAME=IMPLOG,RECFM=FBA,LRECL=80,     +\n               EXLST=LOGEXLST,BUFNO=1\n         SPACE\n         PRINT GEN\n         SPACE\n*                   % $ # & * @\nPRTXLATE DC    X'406C5B7B505C7C4A4B4B4B4B4B4B4B4B'  IMPLOG PRINTABLE\n         DC    X'4B4B4B6D4B4B4B4B4B4B4B4B5C4B5E4B'         CHARACTERS.\n         DC    X'4B404040404040404B4B4B4B4B4B4B4B'\n         DC    X'F0F1F2F3F4F5F6F7F8F9604F4B4B4B4B'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'808182838485868788898A8B8C8D8E8F'\n         DC    X'909192939495969798999A9B9C9D9E9F'\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'\n         TITLE 'MAIN MENU DISPLAY SUBROUTINE'\n         USING GOTAREA,R13\n         USING MAINMENU,R11\nMAINMENU DS    0H\n         L     R3,SMCAADDR       POINT TO SMCA.\n         MVC   MENUSID,16(R3)    SUPPLY SYSTEM ID IN MAIN MENU.\n         L     R1,PSAPCCAV       POINT TO PCCA.\n         MVC   MENUSER,6(R1)     SHOW CPU SERIAL NUMBER.\n         MVC   MENUTYP,12(R1)    SHOW CPU MODEL NUMBER.\n         AIF   (&MSPMON).MSPMENU\n         L     R1,340(,R3)       LOAD THE IPL DATE.\n         ST    R1,WORK+4\n         AP    WORK+4(4),=P'1900000'\n         UNPK  MENUIPL(5),WORK+4(3)\n*        MVI   MENUIPL+4,C'.'\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7\n         MVC   MENUIPL+4(6),WORK+2\n*        MVI   MENUIPL+7,C'.'\n         L     R3,PSAAOLD        POINT TO THE CURRENT ASCB.\n         L     R3,108(,R3)       POINT TO THE CURRENT ASXB.\n         MVC   MENUUID,192(R3)   SHOW THE USERID (ASXBUSR8).\n         LARL  R3,TRMNETID       POINT TO DATA RETURN AREA.\n         USING TRMNETID,R3\n         MVC   MENUTRM,GTTRMID   SHOW THE TERMINAL NAME\n         MVC   MENUNET,GTNETID        AND NETWORK NAME.\n         DROP  R3                TRMNETID.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R1,CVTDATE\n         ST    R1,WORK+4\n         AP    WORK+4(4),=P'1900000'\n         UNPK  MENUNOW(5),WORK+4(3)\n*        MVI   MENUNOW+4,C'.'\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7\n         MVC   MENUNOW+4(6),WORK+2\n*        MVI   MENUNOW+7,C'.'\n         MVC   MENUSNM,CVTSNAME  SHOW SYSTEM NAME.\n         TM    OSLEVEL,X'08'     SP4 OR LATER?\n         BNO   MSPMENU           NO.\n         L     R4,CVTECVT        YES, POINT TO THE ECVT.\n         USING ECVT,R4\n         MVC   MENUSPX,ECVTSPLX  SHOW SYSPLEX NAME.\n         TM    OSLEVEL+1,X'80'   SP4.3 OR LATER?\n         BNO   MSPMENU           NO.\n         L     R1,CVTHID         POINT TO THE HID.\n         TM    22(R1),255-X'40'  VALID NODE DESCRIPTOR?\n         BZ    SKIPHID           NO, DO NOT PROCESS HID.\n         MVC   MENUSER,46(R1)    SHOW CPU SEQUENCE NUMBER.\n         MVC   MENUTYP,28(R1)    SHOW CPU TYPE.\n         MVI   MENUDSH,C'-'\n         MVC   MENUMDL,32(R1)    SHOW CPU MODEL.\nSKIPHID  TM    OSLEVEL+1,X'20'   SP5 OR LATER?\n         BNO   MSPMENU           NO.\n         MVC   MENUCLN,ECVTCLON  YES, SHOW CLONE NAME.\n         TM    OSLEVEL+1,X'10'   SP5.2 OR LATER?\n         BNO   MSPMENU           NO.\n         MVC   MENULPR,ECVTLPNM  SHOW LPAR NAME.\n         MVC   MENUVMG,ECVTVMNM  SHOW VM GUEST USERID.\n         MVC   MENUHDW,ECVTHDNM  SHOW HARDWARE NAME.\n         DROP  R3,R4             CVT, ECVT.\nMSPMENU  DS    0H\n.MSPMENU ANOP\n         CLI   INCHARS,C'?'      REQUEST FOR GENERAL INFORMATION?\n         BE    GIVEHELP          YES, PREPARE REQUEST FOR SCREENIO.\n         CLI   INCHARS,C'\\'      COLOUR MODE CHANGE AS PARAMETER?\n         BNE   REDOMENU          NO, JUST DISPLAY PRIMARY OPTIONS.\n         XI    MODESW2,COL2      YES, TOGGLE BY DEFAULT.\n         CLI   INCHARS+1,C'0'    NUMBER OF COLOURS SPECIFIED?\n         BL    REDOMENU          NO.\n         CLI   INCHARS+1,C'4'    YES, FOUR-COLOUR MODE?\n         BL    SOMECOLR          NO, 0, 1, 2 OR 3 (F9526 MODE).\n         BH    FULLCOLR          NO, 5, 6, 7, 8 OR 9 (FAT CHANCE).\n         OI    MODESW2,COL4      YES, TURN ON 4-COLOUR MODE.\n         NI    MODESW2,255-COL2  TURN OFF MONOCHROME.\n         B     REDOMENU          4-COLOUR MODE NOW ENABLED.\nSOMECOLR OI    MODESW2,COL2      TURN ON DUAL INTENSITY MODE.\n         NI    MODESW2,255-COL4  TURN OFF 4-COLOUR MODE.\n         B     REDOMENU\nFULLCOLR TM    GRAFLAGS,DIDQRY+HLIT\n         BM    REDOMENU          AVOID DATA STREAM ERROR CERTAINTY.\n         NI    MODESW2,255-COL2-COL4\n         SPACE\nREDOMENU LA    R0,1024\n         SLL   R0,2              GET GETMAIN REQUIREMENTS (4K).\n         LR    R6,R0             COPY STORAGE SIZE.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(BELOW,ANY)\n         LA    R1,0(,R1)         ENSURE ADDRESS FORMAT.\n         ST    R6,0(,R1)         SAVE STORAGE SIZE.\n         ST    R1,4(,R1)         SAVE STORAGE ADDRESS.\n         LR    R4,R1             POINT TO GETMAINED AREA.\n         LA    R5,14(,R4)        POINT TO DATA STREAM AREA.\n         LA    R3,STRM3270\n         USING STRM3270,R3\n         LA    R3,MENU3270\n         DROP  R3                STRM3270.\n         USING MENU3270,R3\n         CLI   OLDCOLS+3,80      USING A WIDE SCREEN?\n         BH    BITMAPOK          YES.\n         TM    MODESW,VCTR       NATIVE 3270 VECTOR GRAPHICS AVAILABLE?\n         BNO   BITMAPOK          NO.\n         TM    MODESW,TRIP       TRIPLE-PLANE SYMBOLS AVAILABLE?\n         BO    BITMAPOK          YES, DON'T NEED BITMAP FOR COLOUR.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BNO   BITMAPOK          NO.\n         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         CLI   C'X'-C' '(R15),C'0'\n         BE    BITMAPOK          BITMAP DISPLAY SUPPRESSED.\n         SLR   R1,R1\n         IC    R1,CHARSIZE       GET CHARACTER CELL PEL WIDTH.\n         MHI   R1,29             29 COLUMNS RIGHT OF CENTRE.\n         STCM  R1,3,SEGXPOS      SAVE GLOBE X CO-ORDINATE.\n         SLR   R1,R1\n         IC    R1,CHARSIZE+1     GET CHARACTER CELL PEL DEPTH.\n         CLI   C'X'-C' '(R15),C'X'\n         L     R15,LINES\n         BNE   *+8\n         LA    R15,24\n         SRL   R15,1\n         BCTR  R15,0\n         BCTR  R15,0             GET ROWS ABOVE CENTRE.\n         MR    R0,R15\n         STCM  R1,3,SEGYPOS      SAVE GLOBE Y CO-ORDINATE.\n         CLI   CLR+1,X'7E'       NEED ALTERNATE SCREEN SIZE?\n         BNE   *+8               NO.\n         MVI   GLBCLRSZ,X'80'    YES.\n         TPUT  GLBVECTR,GLBVECLN,NOEDIT\n         NI    MODESW,255-VCTR   SUPPRESS IN FUTURE IF FAILURE.\n         LTR   R15,R15           SUCCESS?\n         BNZ   BITMAPOK          NO.\n         OI    MODESW,VCTR       YES, USE VECTOR FOR MENU THIS SESSION.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVC   STRMERAS,CLR+1    FLAG SCREEN SIZE SET CORRECTLY.\n         NI    GRAFLAGS,255-LOGO SUPPRESS SYMBOL USAGE THIS SESSION.\n         NI    MODESW,255-BTMP   NO NEED TO CLEAR BITMAP YET.\nBITMAPOK MVC   OPTNPOSI,INITPOSI INITIALIZE OPTION ENTRY LINE LOCATION.\n         MVC   0(256,R5),MENU    LOAD FIRST 256 BYTES OF MENU, AND THEN\n         MVC   256(OPT$-MENU-256,R5),MENU+256   REST OF FIXED SECTION.\n         LA    R5,OPT$-MENU(,R5) POINT PAST GENERATED MENU SO FAR.\n         XC    WORK(3),WORK      CLEAR TOP THREE BYTES OF A FULLWORD.\n         L     R15,OPLKUPAD      POINT TO PRIMARY OPTION LOOKUP TABLE.\n         SPACE\nNEXTOPTN LA    R15,OPTBLEN(,R15) POINT TO NEXT TABLE ENTRY.\n         CLI   0(R15),255        END OF TABLE REACHED?\n         BE    MENUTRLR          YES, GO TACK ON MENU TRAILER SECTION.\n         MVC   OPTNATR,COPYATR1  NO, GET PSCBATR1 IN WORK AREA.\n         OC    OPTNATR,1(R15)    PROCESS AGAINST OPTION FLAG BYTE.\n         TM    OPTNATR,X'FA'     SUFFICIENT AUTHORITY FOR THIS OPTION?\n         BNO   NEXTOPTN          NO, SUPPRESS ITS DISPLAY IN MENU.\n         MVC   WORK+3(1),0(R15)  COPY THE OPTION CHARACTER.\n         TR    WORK+3(1),OPTXLATE-C' '    CONVERT TO AN OPTION NUMBER.\n         CLI   WORK+3,0          DOES IT RATE A LINE IN THE MENU?\n         BE    NEXTOPTN          NO, SO SKIP IT.\n         L     R1,WORK           YES, LOAD OPTION ENTRY NUMBER.\n         SLL   R1,3              CONVERT IT TO OPTTABLE INDEX.\n         LA    R1,OPTTABLE-8(R1) POINT TO OPTION MENU ENTRY.\n         LM    R1,R2,0(R1)       LOAD MENU ENTRY ADDRESS AND SIZE.\n         BCTR  R2,0              LESS ONE FOR EXECUTE.\n         EX    R2,MENUOPLD       LOAD THE ENTRY.\n         LH    R1,OPTNPOSI       GET SCREEN POSITION OF THIS ENTRY.\n         LR    R0,R1             COPY IT.\n         A     R0,COLUMNS        ADD A ROW FOR NEXT TIME.\n         STH   R0,OPTNPOSI       SAVE IT FOR NEXT TIME.\n         STC   R1,2(,R5)         STORE LOW-ORDER ADDRESS BYTE.\n         NI    2(R5),X'3F'       CLEAN IT UP.\n         SRL   R1,6\n         STC   R1,1(,R5)         STORE HIGH-ORDER ADDRESS BYTE.\n         TR    1(2,R5),TABLE     CONVERT TO 3270 BUFFER ADDRESS.\n         LA    R5,1(R2,R5)       UPDATE MENU GENERATION POINTER.\n         B     NEXTOPTN          GO PROCESS NEXT PRIMARY OPTION.\n         SPACE\nMENUOPLD MVC   0(0,R5),0(R1)                    <<< EXECUTED >>>\n         SPACE\n         AIF   (&MSPMON).MSPTRLR\nMENUTRLR LM    R0,R1,LINES       GET SCREEN DIMENSIONS.\n         BCTR  R0,0              WANT START OF LAST LINE.\n         MR    R0,R0\n         LA    R1,5(,R1)         POINT TO MESSAGE LOCATION.\n         STCM  R1,3,USAGEADR     STORE 14-BIT ADDRESS.\n         CHI   R1,4095           14-BIT ADDRESS REQUIRED?\n         BH    USGADROK          YES, DO NOT DERIVE 12-BIT ADDRESS.\n         STC   R1,USAGEADR+1     STORE LOW-ORDER ADDRESS BYTE.\n         NI    USAGEADR+1,X'3F'  CLEAN IT UP.\n         SRL   R1,6\n         STC   R1,USAGEADR       STORE HIGH-ORDER ADDRESS BYTE.\n         TR    USAGEADR,TABLE    CONVERT TO 3270 BUFFER ADDRESS.\n.MSPTRLR ANOP\nUSGADROK LA    R0,OPTX           SOURCE ADDRESS.\n         LA    R1,MENUEND-OPTX   SOURCE LENGTH.\n         LR    R14,R5            TARGET ADDRESS.\n         LR    R15,R1            TARGET LENGTH.\n         MVCL  R14,R0            COPY MENU TRAILER.\n         LH    R1,OPTNPOSI       GET SCREEN POSITION OF THIS ENTRY.\n         STC   R1,2(,R5)         STORE LOW-ORDER ADDRESS BYTE.\n         NI    2(R5),X'3F'       CLEAN IT UP.\n         SRL   R1,6\n         STC   R1,1(,R5)         STORE HIGH-ORDER ADDRESS BYTE.\n         TR    1(2,R5),TABLE     CONVERT TO 3270 BUFFER ADDRESS.\n         LR    R5,R14            UPDATE MENU GENERATION POINTER.\n         TM    GRAFLAGS,LOGO     EXTENDED CHARACTERS LOADED?\n         BZ    MENUDONE          NO, SO DON'T TRY TO USE THEM.\n         TM    MODESW,TRIP       USING MULTI-COLOUR SYMBOLS?\n         BO    COLRLOGO          YES.\n         CLI   CHARSIZE+1,12     YES, 12-ROW CHARACTER MATRIX?\n         BNH   COPYXTRA          YES, CORRECT DATA STREAM IN PLACE.\n         MVC   ROOROW2,=X'4647404849'\n         MVI   ROOROW3,C' '      NO, SUPPLY 16-ROW MATRIX OVERRIDES.\nCOPYXTRA MVC   0(MENULENX,R5),MENUEND  COPY EXTRA GRAPHIC TRAILER.\n         LA    R5,MENULENX(,R5)  UPDATE MENU GENERATION POINTER.\n         B     MENUDONE\nCOLRLOGO MVC   0(GLOBELEN,R5),GLOBE    COPY EXTRA GRAPHIC TRAILER.\n         LA    R5,GLOBELEN(,R5)  UPDATE MENU GENERATION POINTER.\n         SPACE\nMENUDONE LR    R11,R5            GET END ADDRESS OF ORIGINAL OUTPUT.\n         LA    R9,14(,R4)        POINT TO START OF DATA STREAM.\n         LA    R3,STRM3270\n         USING STRM3270,R3\n         LA    R3,MENU3270\n         DROP  R3                STRM3270.\n         BASR  R2,R3             CALL MAIN MENU E.P. OF STRM3270.\n         L     R11,OPLKUPAD\n         L     R11,4(,R11)       RESTORE MAINMENU BASE REGISTER.\n         SLR   R0,R0             REGISTER 0 IS ZERO FOR INPUT ONLY.\nPUTSCRN  XC    SCRNPA2A(16),SCRNPA2A  FORGET PREVIOUS DETAIL SCREENS.\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    NOTEXIT           NO, PROCESS SUBCOMMAND.\n         OI    MODESW,BTMP       SIGNAL BITMAP NEEDS CLEARING.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nNOTEXIT  CLI   INCHARS,C' '      ANY INPUT YET?\n         BE    REDOMENU          NO, ASK FOR SOME AGAIN.\n         TM    MODESW2,CLNF      WAS BITMAP SHOWN?\n         BNO   EXAMINEC          NO, RETURN TO MAINLINE.\n         OI    MODESW,BTMP       YES, SIGNAL BITMAP NEEDS CLEARING.\n         NI    MODESW2,255-CLNF  CLEANUP NOW PERFORMED.\n         B     EXAMINEC          RETURN TO MAINLINE.\nGIVEHELP MVC   INBUFF,BLANKS     SIMULATE PRIMARY INPUT AREA COMMAND.\n         MVI   INBUFF,X'7D'      SUPPLY AID FOR ENTER.\n         MVI   INBUFF+3,X'11'    SUPPLY SBA FOR INPUT FIELD.\n         MVI   TGETLEN+1,10      SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            REGISTER 0 IS NEGATIVE FOR PARSE ONLY.\n         B     PUTSCRN\n         SPACE\n         DROP  R11,R13           MAINMENU, GOTAREA.\n         TITLE 'MAIN MENU DISPLAY - VARIABLES AND CONSTANTS'\nOPTNPOSI DC    H'0'              SCREEN BUFFER ADDRESS OF NEXT ENTRY.\nINITPOSI DC    AL2(2*80+4)       SCREEN ADDRESS OF FIRST MENU ENTRY.\nOPTXLATE DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'40'-X'4F'.\n         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0)       X'50'-X'5F'.\n         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'60'-X'6F'.\n         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0)       X'70'-X'7F'.\n         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'80'-X'8F'.\n         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'90'-X'9F'.\n         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'A0'-X'AF'.\n         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'B0'-X'BF'.\n         DC    AL1(0,1,2,3,4,5,6,7,0,0,0,0,0,0,0,0)        _ABCDEFG__\n         DC    AL1(0,8,9,10,11,12,13,14,0,15,0,0,0,0,0,0)  _JKLMNOP_R\n         DC    AL1(0,0,16,17,18,19,0,0,0,0)                __STUV____\n         DS    0F\nOPTTABLE DC    A(OPTA),A(OPTB-OPTA)\n         DC    A(OPTB),A(OPTC-OPTB)\n         DC    A(OPTC),A(OPTD-OPTC)\n         DC    A(OPTD),A(OPTE-OPTD)\n         DC    A(OPTE),A(OPTF-OPTE)\n         DC    A(OPTF),A(OPTG-OPTF)\n         DC    A(OPTG),A(OPTJ-OPTG)\n         DC    A(OPTJ),A(OPTK-OPTJ)\n         DC    A(OPTK),A(OPTL-OPTK)\n         DC    A(OPTL),A(OPTM-OPTL)\n         DC    A(OPTM),A(OPTN-OPTM)\n         DC    A(OPTN),A(OPTO-OPTN)\n         DC    A(OPTO),A(OPTP-OPTO)\n         DC    A(OPTP),A(OPTR-OPTP)\n         DC    A(OPTR),A(OPTS-OPTR)\n         DC    A(OPTS),A(OPTT-OPTS)\n         DC    A(OPTT),A(OPTU-OPTT)\n         DC    A(OPTU),A(OPTV-OPTU)\n         DC    A(OPTV),A(OPTX-OPTV)\n         DC    A(OPT$),A(OPT@-OPT$)\n         DC    A(OPT@),A(OPTA-OPT@)\n         LTORG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPGAT": {"ttr": 9481, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x92\\x01\\x8f\\x00\\x986?\\x16P\\x00(\\x00\\x02\\x00\\x00\\xc9`\\xd4\\xd6\\xd5@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1992-01-18T00:00:00", "modifydate": "1998-12-29T16:50:00", "lines": 40, "newlines": 2, "modlines": 0, "user": "I-MON"}, "text": "//IMPGAT  PROC PRIMEDS='NULLFILE'\n//*\n//*  IMPGAT STARTED TASK JCL  -  IMON DATA GATHERER\n//*\n//*  IMPGAT IS STARTED BY THE OPERATOR START COMMAND\n//*        AND STOPPED BY THE OPERATOR STOP COMMAND.\n//*\n//*  THIS \"CONSTANTLY RUNNING\" STARTED TASK IS USED TO TRACK\n//*  SMF AND RMF DATA FROM SMF RECORDS AS THEY ARE WRITTEN TO\n//*  THE SYSTEM SMF DATA SETS.  IT EXTRACTS RELEVANT RMF\n//*  PERFORMANCE STATISTICS AND SMF EVENT DETAILS AND\n//*  ACCUMULATES THE DATA IN ITS OWN EXTENDED REGION.\n//*\n//*  THIS ACCUMULATED DATA IS THEN AVAILABLE FOR ONLINE\n//*  DISPLAY BY TSO OR TSS USERS VIA OPTION \"K\" OF THE\n//*  INTERACTIVE MONITORING PROGRAM (I-MON) UNDER MVS OR MSP.\n//*\n//*  USE THE REGION SIZE TO CONTROL STORAGE CAPACITY.\n//*\n//IMPGAT  EXEC PGM=IMDATGAT,TIME=1440,REGION=64M,\n//             PARM='PERFORM=Y DATASET=Y JOBSTEP=Y DASDJOB=DFHSM'\n//*\n//*  IF THE OPTIONAL 'SMFPRIME' DD CARD IS SUPPLIED,\n//*  IMPGAT WILL OPEN, READ AND CLOSE THE FILE BEFORE\n//*  BEGINNING TO TRACK CURRENT DATA.  'SMFPRIME' MUST\n//*  SPECIFY A QSAM-READABLE FILE OF VARIABLE LENGTH\n//*  SMF RECORDS.  'FREE=CLOSE' SHOULD BE SPECIFIED TO\n//*  MINIMIZE PRIMING DATA SET ALLOCATION TIME.\n//*\n//SMFPRIME DD  DSN=&PRIMEDS,DISP=SHR,FREE=CLOSE\n//*\n//*  IMPGAT CAN HANDLE RMF DATA FROM MVS/XA OR LATER\n//*  SYSTEMS, AND PDLF DATA FROM FUJITSU MSP SYSTEMS.\n//*\n//*  DATA FROM ANY NUMBER OF OPERATIONAL OR DEFUNCT SYSTEMS CAN\n//*  BE INPUT, ALTHOUGH IT IS HIGHLY ADVISABLE THAT EACH SYSTEM\n//*  HAS A UNIQUE SMF IDENTIFIER.  THERE ARE NO CONSTRAINTS ON THE\n//*  ORDERING OF INPUT RECORDS, BUT BEST PERFORMANCE IS OBTAINED\n//*  WHEN INPUT RECORDS ARE IN CHRONOLOGICAL ORDER.\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPSPACE": {"ttr": 9483, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x96\"\\x1f\\x00\\x991/\\x19!\\x00&\\x00\\x1f\\x00 \\xc9`\\xd4\\xd6\\xd5@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-08-08T00:00:00", "modifydate": "1999-11-08T19:21:00", "lines": 38, "newlines": 31, "modlines": 32, "user": "I-MON"}, "text": "//IMPSPACE EXEC PGM=IMSPACER,TIME=1440,REGION=64M,PARM='NOSMF'\n//*\n//*  Started Task to accumulate DASD free space details every\n//*  ten (10) minutes - data is displayed from IMON option \"$\".\n//*\n//*  IMPSPACE is started by the operator START command\n//*          and stopped by the operator STOP command.\n//*\n//*  Use the REGION size to limit the size of the online DASD\n//*  space history repository.  Oldest day's data is purged when\n//*  the extended region becomes full.\n//*\n//*\n//*SAVEHIST DD DSN=IMON.SAVEHIST,DISP=SHR   <==  Customise as required\n//*\n//*  If the optional SAVEHIST sequential file is specified,\n//*  data is written out at shutdown to preserve history over\n//*  a recycle (eg. for an IPL).\n//*\n//*  o  Autosave to SAVEHIST is done after midnight to reduce data\n//*     loss after a system crash.\n//*  o  Allocate a new SAVEHIST file with RECFM=FB,LRECL=48,BLKSIZE=0.\n//*  o  Ensure a new SAVEHIST file is empty with an end-of-file\n//*     marker, and has a capacity larger than the extended region.\n//*\n//*  By default, IMSPACER uses an SVC 78 flag byte of x'40' which means\n//*  generate a type 19 SMF record if the installation is collecting\n//*  volume accounting information.  A program parameter of 'SMF'\n//*  specifies the use of x'80' as the flag byte to unconditionally\n//*  request a type 19 record.  Type 19 records may be suppressed by\n//*  using a program parameter of 'NOSMF' which specifies that a flag\n//*  byte of x'00' is to be used.  The generation of type 19 SMF\n//*  records is a convenient way to save DASD free space information\n//*  across ipls for regular reporting by post-processing software.\n//*\n//*  Data can be accumulated every five (5) minutes with a program\n//*  parameter of '5', '5SMF' or '5NOSMF', as appropriate.\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXA": {"ttr": 9729, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4c\\x00\\x04\\x00\\x91\\x12/\\x01  \\x7f\\x15W\\r%C\\xd4\\x0b\\x9e\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "52.99", "flags": 0, "createdate": "1991-05-02T00:00:00", "modifydate": "2020-07-25T15:57:04", "lines": 3365, "newlines": 17364, "modlines": 2974, "user": "GREG"}, "text": "IM       TITLE 'IMPXA - REAL-TIME OS/390 + Z/OS SYSTEM MONITOR FOR TSO'\n         ENTRY IM\n***********************************************************************\n*        THE SOURCE OF THE NAME OF THIS PROGRAM IS/WAS:\n*         INTERACTIVE MONITORING PROGRAM  (FOR MVS/XA).\n*\n*        IMPXA REQUIRES MACROS FROM SYS1.MACLIB AND SYS1.MODGEN.\n*\n*        IMPXA IS NOT RE-ENTRANT NOR SERIALLY REUSABLE.\n*\n*        IMPXA REQUIRES AMODE=24 AND RMODE=24.\n*\n*        IMPXA WAS DEVELOPED AND WRITTEN BY GREG PRICE\n*              FOR PRYCROFT SIX PTY. LTD.\n*        (C) COPYRIGHT  1986-2019.\n*\n*        THIS COMMAND HAS DISPLAY OPTIONS (LISTED IN ORDER ADDED):\n*\n*     A  -  ADDRESS SPACE MONITOR                              (PF6/18)\n*     D  -  DEVICE MONITOR                                     (PF9/21)\n*     C  -  CHANNEL PATH MONITOR\n*     S  -  DOMAIN MONITOR\n*     E  -  RESERVE/ENQUEUE MONITOR\n*     P  -  PAGE DATA SET MONITOR\n*     F  -  REAL PAGE FRAME MEMORY MONITOR\n*     J  -  JOB STATUS MONITOR\n*     L  -  SYSTEM LIBRARY LISTER\n*     V  -  VIRTUAL STORAGE MONITOR\n*     B  -  BLDL AND LPA SEARCHER\n*     T  -  SVC TABLE DISPLAY\n*     R  -  CPU SPEED RATER\n*     O  -  OS/MVS CONSOLE MONITOR\n*     M  -  SYSTEM MANAGEMENT STATUS DISPLAY\n*     U  -  I/O UNIT ACTIVITY MONITOR\n*     N  -  NUCLEUS MAP DISPLAY AND LOOKUP\n*     $  -  DISK SPACE DISPLAY\n*     G  -  GRAPHIC ACTIVITY MONITOR\n*     K  -  HISTORICAL KNOWLEDGE DISPLAY\n*     @  -  UNIX USER AND GROUP DATA BASE DISPLAY\n*\n*     FOR TUTORIAL INFORMATION TYPE ?.                         (PF1/13)\n*\n*     TO EXIT FROM THIS COMMAND, SIMPLY TYPE Z.                (PF3/15)\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n* ADDRESS SPACE MONITOR OPTIONS:\n*\n*     I   - THIS MODE WILL DISPLAY ONLY THOSE MEMORIES WHICH ARE EITHER\n*           SWAPPED IN AND RUNNING OR SWAPPED OUT BUT READY TO RUN.\n*     O   - THIS MODE WILL DISPLAY ALL ACTIVE MEMORIES IN THE SYSTEM,\n*           REGARDLESS OF LOCATION.\n*\n*   TO SWITCH BETWEEN MODES, TYPE EITHER I OR O.\n*\n*\n*      YOU MAY ALSO ENTER OPTIONS TO RESTRICT THE OUTPUT TO ONLY\n*      TSO MEMORIES (IN EITHER IN/OUT OR WAITING STATUS ACCORDING\n*      TO YOUR USE OF THE I AND O OPTIONS ABOVE) OR ONLY STARTED\n*      TASK/BATCH JOB MEMORIES:\n*\n*     T  - RESTRICTS THE OUTPUT TO ONLY TSO MEMORIES.\n*\n*     B  - RESTRICTS THE OUTPUT TO STARTED TASK/BATCH MEMORIES.\n*\n*     A  - RESETS THE TSO/STARTED TASK/BATCH JOB SELECTION.\n*\n*     Y  - ALLOWS DISPLAY OF EMPTY INITIATORS WHERE APPLICABLE.\n*\n*     N  - SUPPRESSES DISPLAY OF EMPTY INITIATORS.\n*\n*\n*     J  - ISSUES A PROMPT FOR THE JOB NAME (OR JUST A PREFIX)\n*          TO WHICH YOU WISH TO RESTRICT THE DISPLAY.\n*\n*\n* DEVICE MONITOR OPTIONS:\n*\n*     O  - START/STOP SELECTION OF OFFLINE DEVICES.\n*\n*     D  - START/STOP SELECTION OF DIRECT ACCESS STORAGE DEVICES.\n*\n*     T  - START/STOP SELECTION OF MAGNETIC TAPE DEVICES.\n*\n*     G  - START/STOP SELECTION OF GRAPHICS DEVICES.\n*\n*     R  - START/STOP SELECTION OF UNIT RECORD DEVICES.\n*\n*     C  - START/STOP SELECTION OF COMMUNICATION DEVICES (INCL. CTC'S).\n*\n*     I  - START/STOP RESTRICTION OF UNITS TO IN-USE (IE. ALLOCATED OR\n*          OFFLINE & BUSY) DEVICES.\n*\n*     P  - START/STOP RESTRICTION OF DASD DEVICES TO PAGING VOLUMES.\n*\n*     U  - ISSUES A PROMPT FOR THE UCB LABEL (OR JUST A PREFIX)\n*          TO WHICH YOU WISH TO RESTRICT THE DISPLAY.\n*\n*     V  - ISSUES A PROMPT FOR THE VOLUME SERIAL (OR JUST A PREFIX)\n*          TO WHICH YOU WISH TO RESTRICT THE DISPLAY.\n*\n*     J  - ISSUES A PROMPT FOR THE JOB NAME (OR JUST A PREFIX)\n*          TO WHICH YOU WISH TO RESTRICT THE DISPLAY.\n*\n*\n* DOMAIN MONITOR OPTIONS:\n*\n*     PF10/22 SELECTS DISPLAY MODE-1 (THE DEFAULT).\n*\n*     PF11/23 SELECTS DISPLAY MODE-2 WHERE ACCUM-SRV IS DISPLAYED\n*             INSTEAD OF CONTN-IDX.\n*\n*\n* ENQUEUE MONITOR OPTIONS:\n*\n*     W  - SELECT RESOURCE CONFLICTS ONLY.\n*\n*     D  - SELECT HARDWARE DASD RESERVES ONLY.\n*\n*     P  - SELECT ALL ENQUEUES SUBJECT ONLY TO PREFIX SELECTION.\n*\n*     J  - ISSUES A PROMPT FOR THE JOB NAME (OR JUST A PREFIX)\n*          TO WHICH YOU WISH TO RESTRICT THE DISPLAY.\n*\n*     Q  - ISSUES A PROMPT FOR THE MAJOR QUEUE NAME (OR JUST A PREFIX)\n*          TO WHICH YOU WISH TO RESTRICT THE DISPLAY.\n*\n*     R  - ISSUES A PROMPT FOR THE MINOR QUEUE NAME (OR JUST A PREFIX)\n*          TO WHICH YOU WISH TO RESTRICT THE DISPLAY.\n*\n*\n*  GLOSSARY OF TERMS FOR OUTPUT DISPLAY:\n*\n*              ADDRESS SPACE MONITOR\n*    JOB       JOB NAME OF MEMORY.\n*    STEP      NAME OF CURRENT STEP.\n*  IORT(SWAP)  NUMBER OF EXCPS PER SECOND SO FAR THIS INTERVAL.\n*              IT IS ACTUALLY THE I/O COMPONENT OF INT-SRV DIVIDED\n*              BY THE IOC WEIGHTING DIVIDED BY ELAPSED TIME.\n*              ASSUMPTION: IOC COEFFICIENT IS A POSITIVE INTEGER.\n*              IF THIS IS ZERO THEN THE TOTAL NUMBER OF SWAPS THAT\n*              HAVE OCCURED THIS JOB STEP WILL BE REPORTED IN\n*              PARENTHESES.  FOR SWAPPED-OUT JOBS THIS FIGURE IS\n*              USUALLY UNAVAILABLE, SO THE DURATION OF THE SWAP-OUT\n*              WILL BE SHOWN IN MINUTES AND SECONDS.\n*              ALSO TWO CHARACTER CODE (RMF CONVENTION) FOR THE\n*              REASON OF SWAP-OUT:\n*                TO   TERMINAL OUTPUT WAIT SWAP-OUT.\n*                TI   TERMINAL INPUT WAIT SWAP-OUT.\n*                LW   LONG WAIT CAUSED SWAP-OUT.\n*                XS   AUXILIARY STORAGE SHORTAGE SWAP-OUT.\n*                RS   REAL STORAGE SHORTAGE SWAP-OUT.\n*                DW   MAIN STORAGE OCCUPANCY DETECTED WAIT SWAP-OUT.\n*                RQ   SWAP-OUT REQUESTED BY REQSWAP SYSEVENT.\n*                NQ   ENQ EXCHANGE SWAP-OUT.\n*                EX   EXCHANGE SWAP BASED UPON RECOMMENDATION VALUES.\n*                US   UNILATERAL SWAP-OUT.\n*                TR   TRANSITION SWAP-OUT (SWAPPABLE TO NON-SWAPPABLE).\n*    REAL      CURRENT AMOUNT OF REAL MEMORY ALLOCATED TO THIS MEMORY.\n*    WSS       SRM'S VIEW OF THE WORKING SET SIZE FOR THIS MEMORY.\n*    C         FIRST CHAR OF TRANSACTION CLASS OR @ FOR TSO USERS.\n*    LOC       CURRENT LOCATION OF THIS MEMORY:\n*                IN   SWAPPED IN AND ELIGIBLE TO RUN.\n*                PRV  SWAPPED IN, ELIGIBLE TO RUN AND PRIVILEGED.\n*                OUT  SWAPPED OUT BUT READY TO RUN.\n*                WT   SWAPPED OUT AND NOT READY (IE. IN A WAIT STATE).\n*                LOG  LOGICALLY SWAPPED OUT AND NOT READY TO RUN.\n*                N/S  SWAPPED IN NON-SWAPPABLE STATUS.\n*                V=R  SWAPPED IN AND V=R.\n*                <+>  TRANSITIONING BETWEEN STATES (TRANSITIONING IN).\n*                <->  TRANSITIONING BETWEEN STATES (TRANSITIONING OUT).\n*    DP        DISPATCHING PRIORITY OF MEMORY (IN HEXADECIMAL).\n*    DQ        DISPATCHING QUEUE POSITION OF MEMORY (IN DECIMAL).\n*    PG        PERFORMANCE GROUP.\n*    DMN       DOMAIN.\n*    XSC       NUMBER OF TIMES THE MEMORY HAS BEEN SWAPPED IN THE\n*              CURRENT TRANSACTION.\n*    WMR       CURRENT SRM WORKLOAD MANAGER RECOMMENDATION VALUE.\n*              (ACTUALLY THE WORKLOAD LEVEL AT WHICH THIS MEMORY IS\n*               OPERATING).\n*    INT-SRV   SERVICE ACCUMULATED IN THE LAST SWAPPED IN PERIOD.\n*    CPU       CPU TIME IN SECONDS USED BY THE MEMORY (SRB PLUS TASK).\n*\n*              REAL MEMORY SUMMARY\n*    DISPLAYED SUM OF REAL COLUMN FOR ALL JOBS SHOWN THIS SCAN.\n*    ALL JOBS  SUM OF REAL COLUMN FOR ALL JOBS (SHOWN OR NOT).\n*    COMMON    REAL STORAGE USED NOT ATTRIBUTABLE TO ANY JOB.\n*    MAX       TOTAL MAIN STORAGE OF CPU.\n*\n*              SYSTEM SUMMARY\n*    PDT       PAGE DELAY TIME IN MILLISECONDS.\n*    AFCA      AVAILABLE (REAL STORAGE) FRAME COUNT AVERAGE.\n*    UICA      UNREFERENCED INTERVAL COUNT AVERAGE.  A LOW VALUE\n*              INDICATES HIGH CONTENTION FOR REAL STORAGE.\n*    CPUA      AVERAGE CPU UTILIZATION.\n*    ASMQA     AVERAGE WORK QUEUE LENGTH FOR THE AUXILIARY\n*              STORAGE MANAGER.\n*    PGRT      AVERAGE PAGING RATE IN PAGES PER SECOND.\n*    TKT       SYSTEM THINK TIME IN SECONDS.\n*\n*              DEVICE MONITOR\n*    \u00ac         THE DEVICE IS NOT READY.\n*    V         VSAM IS ACTIVE ON THIS VOLUME.\n*    P         ACTIVE PAGE DATA SET(S) RESIDE ON THIS VOLUME.\n*    *         THIS IS A SHARED DASD DEVICE. (RESV/RLSE CAN BE USED.)\n*    VOLUME    VOLUME SERIAL NUMBER OF THE STORAGE UNIT.\n*    UCB       ADDRESS OF THE UNIT AS DEFINED AT SYSGEN TIME.\n*    PATH      PATH USED IN THE LAST I/O TO THE DEVICE.\n*    UNIT-STATUS\n*         OFF         THE DEVICE IS OFFLINE.\n*         OFF-IN-USE  THE DEVICE IS OFFLINE BUT IS BEING USED.\n*         ON          THE DEVICE IS ONLINE.\n*         ALC         THE DEVICE IS ONLINE AND ALLOCATED.\n*         UNL         THE OPERATOR HAS ISSUED AN UNLOAD COMMAND\n*                     FOR THIS DEVICE.\n*         VRY         THE OPERATOR HAS ISSUED A VARY COMMAND\n*                     FOR THIS DEVICE.\n*         SYS         THE DEVICE IS A SYSTEM CONSOLE OR THE DIRECT\n*                     ACCESS STORAGE DEVICE IS THE SYSTEM\n*                     RESIDENCE VOLUME.\n*         PVT         THIS VOLUME IS MOUNTED AS A PRIVATE VOLUME.\n*         PUB         THIS VOLUME IS MOUNTED AS A PUBLIC VOLUME.\n*         STG         THIS VOLUME IS MOUNTED AS A STORAGE VOLUME.\n*         REM         THIS VOLUME IS A REMOVABLE VOLUME.\n*         RSD         THIS VOLUME IS A PERMANENTLY RESIDENT VOLUME.\n*         RSV         THE MOUNT ATTRIBUTES OF THE VOLUME ARE RESERVED.\n*         REW         A REWIND COMMAND HAS BEEN ADDRESSED TO THIS\n*                     MAGNETIC TAPE DRIVE.\n*         INT-REQ     OPERATOR INTERVENTION OF SOME KIND IS REQUIRED.\n*         MNT-PND     A VOLUME MOUNT IS PENDING FOR THIS DEVICE.\n*         INT-REQ-PND PROBABLY A TAPE DID NOT LOAD PROPERLY.\n*    VTOC      TRACK ADDRESS OF THE VOLUME TABLE OF CONTENTS (IN HEX).\n*    USE       NUMBER OF LOGICAL FILES (DD CARDS) ALLOCATED TO\n*              THIS DEVICE.\n*    OPN       NUMBER OF OPEN FILES (DCB'S) RELATED TO THIS DEVICE.\n*    QUE       NUMBER OF REQUESTS QUEUED BECAUSE THE PATH IS BUSY.\n*    RSV       NUMBER OF HARDWARE RESERVES ISSUED TO THIS DASD DEVICE.\n*    IORATE    NUMBER OF I/O OPERATIONS PER SECOND SINCE LAST DISPLAY.\n*    RSPTM     AVERAGE DEVICE RESPONSE TIME SINCE LAST DISPLAY.  THIS\n*              THIS APPLIES TO DASD ONLY.  NOTE THE FOLLOWING RELATION:\n*                 RESPONSE TIME  =  TIME QUEUED + I/O SERVICE TIME\n*              THIS FIELD IS DERIVED FROM I/O RATE AND THE APPARENT\n*              BUSY PERCENTAGE.\n*    LST-USER  CURRENT NAME OF THE ADDRESS SPACE WHICH LAST ALLOCATED\n*              THIS UNIT.  FOR DASD, THIS IS PROBABLY NOT THE JOB\n*              RESPONSIBLE FOR THE INSTANTANEOUS I/O.  THIS ADDRESS\n*              SPACE MAY HAVE TERMINATED OR BE RUNNING ANOTHER JOB\n*              OR USER SINCE THE ALLOCATION.  IF THE DEVICE IS BUSY\n*              THIS IS THE NAME OF THE ADDRESS SPACE WHICH IS TO BE\n*              SCHEDULED AT I/O COMPLETION.\n*    CYL       CYLINDER ADDRESS OF THE LAST I/O REQUEST.\n*    FSC       FOR TAPES THIS IS THE DATA SET COUNT FOR THE VOLUME.\n*    HD        READ/WRITE HEAD USED BY THE LAST I/O REQUEST.\n*    LB        FOR TAPES THIS IS THE LABEL TYPE.\n*              SL - STANDARD LABELS.\n*              NL - NO LABELS, INCLUDING BYPASS LABEL PROCESSING.\n*              UL - NON-STANDARD OR USER LABELS.\n*    REC       RECORD NUMBER OF THE LAST I/O REQUEST.\n*    FSN       FOR TAPES THIS IS THE DATA SET SEQUENCE NUMBER.\n*    K         STORAGE PROTECT KEY OF THE CHANNEL PROGRAM.\n*    DRVR      NAME OF THE I/O DRIVER BEING USED.\n*    BUSY%     PERCENTAGE OF (ALL I/O ELAPSED TIME)/(REAL ELAPSED TIME)\n*              AND SO MAY BE OVER 100% IF REQUESTS ARE QUEUED.\n*              IN FACT THIS FIGURE IS THE SUM OF EACH BUSY PERCENTAGE\n*              AS VIEWED BY EVERY USER OF THE DASD (OR EVERY USER).\n*\n*              CHANNEL MONITOR\n*\n*              DOMAIN MONITOR\n*    ITEMS DISPLAYED BY THE DOMAIN MONITOR ARE SIMILAR TO THOSE SHOWN\n*    BY A \"D DMN\" OPERATOR COMMAND.  LOOK UP IEE796I IN THE SYSTEM\n*    MESSAGES MANUAL.\n*\n*    CONTN-IDX CONTENTION INDEX OF THE DOMAIN.  IT IS PROPORTIONAL\n*              TO THE SERVICE ABSORBTION RATE OF THE DOMAIN.\n*    ACCUM-SRV ACCUMULATED SERVICE UNITS CONSUMED BY THIS DOMAIN\n*              SINCE IPL.\n*\n*              ENQUEUE MONITOR\n*    QNAME     NAME OF THE CATEGORY OF RESOURCE THAT IS BEING USED.\n*    RESOURCE-NAME  NAME OF THE SPECIFIC RESOURCE.\n*    (RSV-DEVICE)   IF THE ENQUEUE IS ALSO A HARDWARE RESERVE THEN\n*              UNIT AND VOLUME OF THE RESERVED DASD WILL BE SHOWN\n*              IN PARETHESES.\n*    USER      THE NAME OF THE JOB ISSUING THE ENQUEUE.\n*\n*              PAGE DATASET MONITOR\n*    PAGE DATASET NAME  NAME OF THE PAGE DATASET.\n*    TYP       TYPE OF USAGE.\n*              LPA   PAGEABLE LINK PACK AREA PAGE DATASET.\n*              CMN   COMMON PAGE DATASET.\n*              DUC   DUPLEX DATASET FOR COMMON OR LPA.\n*              LCL   LOCAL PAGE DATASET.\n*              DUL   DUPLEX DATASET FOR LOCAL.\n*              BAD   PAGE DATASET MARKED IN ERROR AND NOT TO BE USED.\n*    BUSY      APPARENT FRACTION OF THE TIME THAT THE DATASET WAS BUSY.\n*    SRV-TM    AVERAGE SERVICE TIME PER PAGE READ/WRITTEN IN SECONDS.\n*    PIO-RT    AVERAGE NUMBER OF PAGES READ & WRITTEN PER SECOND.\n*              NOTE THAT THIS MAY BE GREATER THAN ASM EXCPS/SEC.\n*    VOLUME    VOLUME SERIAL NUMBER OF THE PAGING DEVICE.\n*    ALLOC     NUMBER OF SLOTS ALLOCATED. IE. THE SIZE OF THE DATASET.\n*    ERROR     NUMBER OF SLOTS MARKED AS UNUSABLE BECAUSE OF DETECTED\n*              I/O ERRORS.\n*    USED      NUMBER OF 4K SLOTS CURRENTLY IN USE.\n*       %      THE PERCENTAGE OF (USED/ALLOC) IS ALSO SHOWN.\n*\n*              REAL MEMORY (PAGE FRAME) MONITOR\n*    DISPLAYS THE USAGE OF EACH 4K FRAME OF REAL STORAGE, ONE MEGABYTE\n*    PER SCREEN IMAGE.  HARDCOPY IS NOT SUPPORTED IN THIS OPTION.\n*              FIVE BYTES ARE USED PER FRAME.  MEANING OF CONTENTS:\n*    AAAAA     FIRST FIVE CHARACTERS OF STARTED TASK NAME OR LAST FIVE\n*              NON-BLANK CHARACTERS OF JOB OR TIME SHARING USER NAME.\n*    *****     THE ADDRESS SPACE OWNING THIS FRAME HAS NO JOB NAME.\n*              (IE. EQUIVALENT TO STAR-TING. (PLAY ON WORDS.))\n*     ...      THIS FRAME IS UNUSED AND AVAILABLE FOR USE.\n*     ---      THIS FRAME IS USED BY A JOB WITH AN UNSELECTED NAME.\n*     BAD      THIS FRAME IS UNUSED BUT UNAVAILABLE FOR USE.\n*     OFF      THIS FRAME IS OFFLINE.\n*     R/W      THIS IS A READ/WRITE NUCLEUS FRAME.\n*     R-O      THIS IS A READ-ONLY NUCLEUS FRAME.\n*     V=R      THIS IS A DAT-OFF NUCLEUS FRAME.\n*     SQA      THIS IS A SYSTEM QUEUE AREA FRAME.\n*              RED       ==> LONG-TERM FIXED OR OFFLINE.\n*              TURQUOISE ==> SQA OR LSQA FRAME.\n*              WHITE     ==> PSA OR HSA FRAME.\n*              PINK      ==> NUCLEUS FRAME.\n*              GREEN     ==> PAGEABLE FRAME.\n*              BLUE      ==> PLPA/CSA FRAME.\n*              YELLOW    ==> VIO REUSEABLE FRAME.\n*\n*\n*\n*\n*\n*\n***********************************************************************\n         TITLE 'REGISTER EQUATES'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\nA0       EQU   0\nA1       EQU   1\nA2       EQU   2\nA3       EQU   3\nA4       EQU   4\nA5       EQU   5\nA6       EQU   6\nA7       EQU   7\nA8       EQU   8\nA9       EQU   9\nA10      EQU   10\nA11      EQU   11\nA12      EQU   12\nA13      EQU   13\nA14      EQU   14\nA15      EQU   15\n         SPACE 2\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         TITLE 'ASSEMBLER VARIABLES - DEFINE AND INITIALIZE'\n         LCLB  &MVSMON\n         LCLB  &MSPMON\n         LCLC  &LOW\n         LCLC  &MED\n         LCLC  &HIGH\n         LCLC  &DD\n         LCLC  &MM\n         LCLC  &YY\n         LCLC  &IMPDATE\n         LCLC  &IMPSECT\n&MVSMON  SETB  1                        MVS VERSION OF PROGRAM.\n&MSPMON  SETB  0                        NOT MSP VERSION OF PROGRAM.\n&LOW     SETC  '1BF0402842F5'           TURQUOISE FOR LOW INTENSITY.\n&MED     SETC  '1BF4402842F3'           PINK FOR \"MEDIUM\" INTENSITY.\n&HIGH    SETC  '1BF8402842F6'           YELLOW FOR HIGH INTENSITY.\n&IMPDATE SETC  '&SYSDATE'\n         AIF   ('&IMPDATE'(3,1) NE '/').GOTDATE\n&MM      SETC  '&IMPDATE'(1,2)          GET MM.\n&DD      SETC  '&IMPDATE'(4,2)          GET DD.\n&YY      SETC  '&IMPDATE'(7,2)          GET YY.\n&IMPDATE SETC  '&YY..&MM..&DD'          GET YY.MM.DD (FACOM &SYSDATE).\n.GOTDATE ANOP\n&IMPSECT SETC  'IMPXA'                  CSECT NAME.\n         TITLE 'GETMAINED AREA AND DYNAMIC DSECTS'\nGOTAREA  DSECT\nSAVE     DS    18F\nSECWORKA DS    CL256\nWORK     DS    D\nWORK2    DS    D\nSCRNPA2A DS    D\nSCRNPA3A DS    D\nVSBTRACE DS    64F              VIRTUAL STORAGE BROWSE TRACE TABLE.\nVSBTREND EQU   *\nSECTIOWA DS    CL256\nSECTCT   DS    CL1024\nSECRBPFX EQU   SECTCT,8         BUFFER FOR PREFIX FETCHED WITH RB.\nSECRB    EQU   SECTCT+8         RB AND TCT NOT USED AT SAME TIME.\nSECCDE   EQU   SECTCT+96\nSECJSCB  EQU   *-140,140\nTTSTATUS EQU   SECJSCB,8        TRACE TABLE/SYSLOG BUFFER STATUS.\nHOME     DC    X'C11140401B404E13'  BEGINNING OF SCREEN IMAGE.\n         DC    X'2841F42842F4'      SA,HILITE,USCORE,SA,COLOUR,GREEN.\nDOWNCNTR DC    X'0000'              COMMAND AREA.\nHEADATTR DC    X'1BF8C62842F7'      SF,PROHIS,SA,COLOUR,WHITE.\nHEADING  DC    CL71' '              HEADING.\nBUSYATTR DC    X'2841F42842F2'      SA,HILITE,USCORE,SA,COLOUR,RED.\nBUSY     DC    C' ZZ9'              CURRENT CPU UTILIZATION DISPLAY.\nTEMPHOME DC    C'%'\n*\n*  INTENSITY, COLOUR AND HIGHLIGHTING ARE GENERALLY IMPLEMENTED ON\n*  A DISPLAY-LINE BY DISPLAY-LINE BASIS.  A TYPICAL 80-COLUMN DETAIL\n*  DISPLAY LINE CONSISTS OF TERMINAL ORDERS WITH DISPLAY ATTRIBUTE\n*  INFORMATION CAUSING THE FIRST COLUMN TO BE OCCUPIED BY A FIELD\n*  ATTRIBUTE BYTE, AND 79 BYTES OF DISPLAY TEXT.\n*\n*  THE LL SYMBOL IS SET TO THE NUMBER OF BYTES REQUIRED TO CREATE\n*  A STANDARD DETAIL DISPLAY LINE.  AS THE ORDERS USED IN THE STANDARD\n*  DETAIL LINE HEADER CHANGE, THE VALUE OF LL WILL CHANGE ALSO.\n*\n*  BUT, AS LL CHANGES THE OFFSET OF EVERY ITEM DISPLAYED IN A DETAIL\n*  LINE ALSO CHANGES, WHICH CAN MEAN EXTENSIVE SOURCE CODE CHANGES.\n*\n*  HENCE, MANY SUBROUTINES EXPRESS THE DISPLAY OFFSET AS A FUNCTION\n*  OF LL.  FOR EXAMPLE, CODE TO SET A DISPLAY LINE TO BLANKS CAN BE:\n*        MVI   LL-79(R2),C' '\n*        MVC   LL-78(78,R2),LL-79(R2)\n*\n*  NOTE THAT R2 IS GENERALLY USED AS THE CURRENT LINE POINTER.\n*\n*  THE DETAIL LINE HEADER ORDER SEQUENCE HAS EVOLVED OVER YEARS.\n*\n*    ORDER SEQUENCE     LOW INTENSITY EXAMPLE   CORRESPONDING LL VALUE\n*         SF                   1DF0                      81\n*         SFE                  1BF040                    82\n*         SFE+COLR             1BF0402842F5              85\n*    HLIT+SFE+COLR       2841001BF0402842F5              88\n*\n*  SINCE THE COLOUR SA ORDER IS LAST, THE COLOUR CODE BYTE IS SOMETIMES\n*  REFERENCED VIA LL-80.  FOR EXAMPLE:\n*        MVI   LL-80(R2),X'F1'  MAKE THIS LINE BLUE.            (I3279)\n*\n*  IT WOULD BE POSSIBLE TO REENGINEER THINGS SO THAT ONLY 1 BYTE USING\n*  AN INTERNAL CODE SCHEME WOULD BE REQUIRED, THUS REDUCING LL TO 80,\n*  BUT THIS HAS NOT CURRENTLY BEEN PUT INTO EFFECT HERE.\n*\nLL       EQU   88               LINE LENGTH: 88 FOR 80 COLUMN SCREEN.\nBUFFER   DS    124CL(LL)        UP TO 123 DETAIL LINES PLUS TRAILERS.\nVBUFFER  DS    XL512            BROWSE FETCH HOLD AREA.\n*  THIS SHOULD GIVE ENOUGH SPACE FOR A 62 ROW BY 160 COLUMN SCREEN.\n         DS    0D               END OF PRIMARY DYNAMIC AREA.\nWORKLEN  EQU   *-SAVE\n         SPACE 2\nASENTRY  DSECT                  20 BYTE ADDRESS SPACE TABLE ENTRY.\nTOD      DS    F\nCPUSOFAR DS    F\nXCPSOFAR DS    F\nIOCSOFAR DS    F\nASPAGECT DS    F\nASENTLEN EQU   *-ASENTRY\n         SPACE 2\nIOENTRY  DSECT                  40 BYTE DEVICE TABLE ENTRY.\nIOTODBIN DS    F\nSIO_ECMB EQU   *,36\nSIOSOFAR DS    F\nSIOSAMPL DS    F               \\\nSIOCONTM DS    F                \\   SAME ORDER\nSIOPNDTM DS    F                 \\  AS IN (E)CMB.\nSIODSCTM DS    F                  \\\n*SIOCUQTM DS    F                  /\n*SIODAOTM DS    F                 /\n*SIODBZTM DS    F                /\n*SIOICRTM DS    F               /\nUCBDEVNO DS    H\nUCBUSYCT DS    H\nDEVQUEUD DS    H\nDEVRSRVD DS    H\nIOUCBADR DS    A\nIOPFXADR DS    A\nIOENTLEN EQU   *-IOENTRY\n         SPACE 2\nUDXENTRY DSECT                  64 BYTE DATA SET EXTENT ENTRY.\nUDXDSNAM DS    CL44\nUDSCBADR DS    XL5\nUDXTNTNO DS    XL1           \\\nUDXLCCHH DS    XL4            \\\nUDXHCCHH DS    XL4             \\____THESE THREE IN THIS ORDER.\nUDSCBPTR DS    XL5\nUDXTNTCT DS    XL1\n         DS    0D\nUDXENTSZ EQU   *-UDXENTRY\n         TITLE 'DSECTS AND EQUATES'\nRDS      DSECT\n******* START OF SPECIFICATIONS ***************************************\n***                                                                  **\n***  MACRO-NAME = IEEMBRDS                                           **\n***                                                                  **\n***  DESCRIPTIVE-NAME = SMF RECORDING DATA SET CONTROL BLOCK         **\n***                                                                  **\n***                                                                  **\n***  FUNCTION = MAPPING FOR THE RDS.  AN RDS CONTAINS THE            **\n***             DATA NECESSARY TO CONTROL AN SMF RECORDING           **\n***             DATASET.  IT INCLUDES THE VSAM ACB AND RPL AND       **\n***             OTHER FLAGS AND FIELDS DESCRIBING THE STATUS         **\n***             OF THE DATASET.                                      **\n***                                                                  **\n******* END OF SPECIFICATIONS *****************************************\nRDSID    DS    CL4           CONTROL BLOCK ID.\nRDSNEXT  DS    F             FORWARD CHAIN POINTER.\nRDSPREV  DS    F             BACKWARD CHAIN POINTER.\nRDSFLAG1 DS    XL1           DATASET STATUS INDICATORS.\n*                            XXX. ....  RESERVED.\nRDSFREE  EQU   X'10'         ...1 ....  NEED TO FREE DATASET AND RDS.\nRDSDUMP  EQU   X'08'         .... 1...  OPER HAS BEEN TOLD TO DUMP DS.\nRDSREADY EQU   X'04'         .... .1..  DS IS OPEN AND READY TO USE.\nRDSCLOSE EQU   X'02'         .... ..1.  DS NEEDS TO BE CLOSED.\nRDSNDOP  EQU   X'01'         .... ...1  DS NEEDS TO BE OPENED.\nRDSFLAG2 DS    XL1           DATASET STATUS INDICATORS.\nRDSLOST  EQU   X'80'         1... ....  DUMMY RDS FOR LOST DATA.\nRDSPHYER EQU   X'40'         .1.. ....  PHYSICAL I/O ERROR.\nRDSLOGER EQU   X'20'         ..1. ....  LOGICAL I/O ERROR.\n*                            ...X XXXX  RESERVED.\nRDSFLAG3 DS    XL1           RESERVED.\nRDSFLAG4 DS    XL1           RESERVED.\nRDSNAME  DS    CL10          DATASET NAME.\nRDSVOLID DS    CL6           VOLUME SERIAL.\nRDSDDN   DS    CL8           DDNAME RETURNED BY DYNAMIC ALLOCATION.\nRDSCAPTY DS    F             DATASET CAPACITY IN # OF BLOCKS.\nRDSNXTBL DS    F             NUMBER OF NEXT AVAILABLE BLOCK.\nRDSBQE   DS    A             ADDRESS OF BQE BEING WRITTEN.\nRDSAVSPC DS    F             AVAILABLE SPACE FROM SHOWCB.\nRDSENRBA DS    F             ENDRBA FROM SHOWCB.\nRDSCINV  DS    F             CONTROL INTERVAL SIZE.\nRDSDOMID DS    F             MSG # OF DUMP MSG.\nRDSRPL   DS    CL76          VSAM RPL.\nRDSACB   DS    CL76          VSAM ACB.\n         SPACE\n*        SYSTEM CONTROL OFFSETS TO CALLABLE SERVICES\n#BPX1ACC EQU   52                  ACCESS\n#BPX1ACK EQU   972                 AUTH_CHECK_RSRC_NP\n#BPX1ACP EQU   508                 ACCEPT\n#BPX1AIO EQU   988                 ASYNCIO\n#BPX1ALR EQU   224                 ALARM\n#BPX1ANR EQU   1060                ACCEPT_AND_RECV\n#BPX1ASP EQU   1088                AIO_SUSPEND\n#BPX1ATM EQU   668                 ATTACH_EXECMVS\n#BPX1ATX EQU   664                 ATTACH_EXEC\n#BPX1BND EQU   512                 BIND\n#BPX1CCA EQU   480                 COND_CANCEL\n#BPX1CCS EQU   1012                CONSOLE_NP\n#BPX1CHA EQU   84                  CHAUDIT\n#BPX1CHD EQU   56                  CHDIR\n#BPX1CHM EQU   60                  CHMOD\n#BPX1CHO EQU   64                  CHOWN\n#BPX1CHP EQU   764                 CHPRIORITY\n#BPX1CHR EQU   500                 CHATTR\n#BPX1CID EQU   968                 CONVERT_ID_NP\n#BPX1CLD EQU   68                  CLOSEDIR\n#BPX1CLO EQU   72                  CLOSE\n#BPX1CON EQU   516                 CONNECT\n#BPX1CPO EQU   484                 COND_POST\n#BPX1CRT EQU   872                 CHROOT\n#BPX1CSE EQU   488                 COND_SETUP\n#BPX1CTW EQU   492                 COND_TIMED_WAIT\n#BPX1CWA EQU   496                 COND_WAIT\n#BPX1DEL EQU   888                 DELETEHFS\n#BPX1ENV EQU   960                 OE_ENV_NP\n#BPX1EXC EQU   228                 EXEC\n#BPX1EXI EQU   232                 _EXIT\n#BPX1EXM EQU   236                 EXECMVS\n#BPX1EXT EQU   200                 EXTLINK_NP\n#BPX1FCA EQU   140                 FCHAUDIT\n#BPX1FCD EQU   852                 FCHDIR\n#BPX1FCM EQU   88                  FCHMOD\n#BPX1FCO EQU   92                  FCHOWN\n#BPX1FCR EQU   504                 FCHATTR\n#BPX1FCT EQU   96                  FCNTL\n#BPX1FPC EQU   100                 FPATHCONF\n#BPX1FRK EQU   240                 FORK\n#BPX1FST EQU   104                 FSTAT\n#BPX1FSY EQU   108                 FSYNC\n#BPX1FTR EQU   112                 FTRUNCATE\n#BPX1FTV EQU   848                 FSTATVFS\n#BPX1GCL EQU   1024                GETCLIENTID\n#BPX1GCW EQU   116                 GETCWD\n#BPX1GEG EQU   244                 GETEGID\n#BPX1GEP EQU   860                 GETPGID\n#BPX1GES EQU   864                 GETSID\n#BPX1GET EQU   736                 W_GETIPC\n#BPX1GEU EQU   248                 GETEUID\n#BPX1GGE EQU   772                 GETGRENT\n#BPX1GGI EQU   252                 GETGRGID\n#BPX1GGN EQU   256                 GETGRNAM\n#BPX1GGR EQU   260                 GETGROUPS\n#BPX1GID EQU   264                 GETGID\n#BPX1GIV EQU   1028                GIVESOCKET\n#BPX1GLG EQU   268                 GETLOGIN\n#BPX1GMN EQU   76                  W_GETMNTENT\n#BPX1GNM EQU   524                 GETPEERNAME\n#BPX1GPE EQU   776                 GETPWENT\n#BPX1GPG EQU   272                 GETPGRP\n#BPX1GPI EQU   276                 GETPID\n#BPX1GPN EQU   280                 GETPWNAM\n#BPX1GPP EQU   284                 GETPPID\n#BPX1GPS EQU   428                 W_GETPSENT\n#BPX1GPT EQU   916                 GRANTPT\n#BPX1GPU EQU   288                 GETPWUID\n#BPX1GPY EQU   744                 GETPRIORITY\n#BPX1GRL EQU   820                 GETRLIMIT\n#BPX1GRU EQU   824                 GETRUSAGE\n#BPX1GTH EQU   1056                __GETTHENT\n#BPX1GTR EQU   752                 GETITIMER\n#BPX1GUG EQU   292                 GETUGRPS\n#BPX1GUI EQU   296                 GETUID\n#BPX1GWD EQU   936                 GETWD\n#BPX1HST EQU   520                 GETHOSTID\n#BPX1IOC EQU   120                 W_IOCTL\n#BPX1IPT EQU   396                 MVSIPTAFFINITY\n#BPX1ITY EQU   12                  ISATTY\n#BPX1KIL EQU   308                 KILL\n#BPX1LCO EQU   832                 LCHOWN\n#BPX1LNK EQU   124                 LINK\n#BPX1LOD EQU   880                 LOADHFS\n#BPX1LSK EQU   128                 LSEEK\n#BPX1LSN EQU   532                 LISTEN\n#BPX1LST EQU   132                 LSTAT\n#BPX1MAT EQU   720                 SHMAT\n#BPX1MCT EQU   724                 SHMCTL\n#BPX1MDT EQU   728                 SHMDT\n#BPX1MGT EQU   732                 SHMGET\n#BPX1MKD EQU   136                 MKDIR\n#BPX1MKN EQU   144                 MKNOD\n#BPX1MMP EQU   796                 MMAP\n#BPX1MNT EQU   148                 MOUNT\n#BPX1MP  EQU   688                 MVSPAUSE\n#BPX1MPC EQU   408                 MVSPROCCLP\n#BPX1MPI EQU   680                 MVSPAUSEINIT\n#BPX1MPR EQU   800                 MPROTECT\n#BPX1MSD EQU   336                 MVSUNSIGSETUP\n#BPX1MSS EQU   312                 MVSSIGSETUP\n#BPX1MSY EQU   804                 MSYNC\n#BPX1MUN EQU   808                 MUNMAP\n#BPX1NIC EQU   748                 NICE\n#BPX1OPD EQU   152                 OPENDIR\n#BPX1OPN EQU   156                 OPEN\n#BPX1OPT EQU   528                 GETSOCKOPT\n#BPX1PAF EQU   1072                __PID_AFFINITY\n#BPX1PAS EQU   316                 PAUSE\n#BPX1PCF EQU   160                 PATHCONF\n#BPX1PCT EQU   768                 PFSCTL\n#BPX1PIO EQU   984                 W_PIOCTL\n#BPX1PIP EQU   164                 PIPE\n#BPX1POL EQU   932                 POLL\n#BPX1PSI EQU   460                 PTHREAD_SETINTR\n#BPX1PST EQU   472                 PTHREAD_SETINTRTYPE\n#BPX1PTB EQU   448                 PTHREAD_CANCEL\n#BPX1PTC EQU   432                 PTHREAD_CREATE\n#BPX1PTD EQU   444                 PTHREAD_DETACH\n#BPX1PTI EQU   476                 PTHREAD_TESTINTR\n#BPX1PTJ EQU   440                 PTHREAD_JOIN\n#BPX1PTK EQU   464                 PTHREAD_KILL\n#BPX1PTQ EQU   412                 PTHREAD_QUIESC\n#BPX1PTR EQU   320                 PTRACE\n#BPX1PTS EQU   452                 PTHREAD_SELF\n#BPX1PTT EQU   1016                PTHREAD_TAG_NP\n#BPX1PTX EQU   436                 PTHREAD_XANDG\n#BPX1PWD EQU   788                 __PASSWD\n#BPX1QCT EQU   692                 MSGCTL\n#BPX1QDB EQU   948                 QUERYDUB\n#BPX1QGT EQU   696                 MSGGET\n#BPX1QRC EQU   700                 MSGRCV\n#BPX1QSE EQU   388                 QUIESCE\n#BPX1QSN EQU   704                 MSGSND\n#BPX1RCV EQU   540                 RECV\n#BPX1RDD EQU   168                 READDIR\n#BPX1RDL EQU   172                 READLINK\n#BPX1RDV EQU   536                 READV\n#BPX1RDX EQU   940                 READ_EXTLINK\n#BPX1RD2 EQU   856                 READDIR2\n#BPX1RED EQU   176                 READ\n#BPXB1REL EQU  600                 V_REL\n#BPX1REN EQU   180                 RENAME\n#BPX1RFM EQU   544                 RECVFROM\n#BPX1RMD EQU   188                 RMDIR\n#BPX1RMG EQU   8                   RESOURCE\n#BPX1RMS EQU   548                 RECVMSG\n#BPX1RPH EQU   884                 REALPATH\n#BPX1RWD EQU   184                 REWINDDIR\n#BPX1SA2 EQU   1084                __SIGACTIONSET\n#BPX1SCT EQU   708                 SEMCTL\n#BPX1SDD EQU   300                 SET_DUB_DEFAULT\n#BPX1SEC EQU   1044                __SECURITY\n#BPX1SEG EQU   424                 SETEGID\n#BPX1SEL EQU   552                 SELECT\n#BPX1SEU EQU   420                 SETEUID\n#BPX1SF  EQU   1064                SEND_FILE PC-ONLY\n#BPX1SGE EQU   780                 SETGRENT\n#BPX1SGI EQU   328                 SETGID\n#BPX1SGR EQU   792                 SETGROUPS\n#BPX1SGT EQU   712                 SEMGET\n#BPX1SHT EQU   572                 SHUTDOWN\n#BPX1SIA EQU   324                 SIGACTION\n#BPX1SIN EQU   1004                SERVER_INIT\n#BPX1SIP EQU   340                 SIGPENDING\n#BPX1SLK EQU   1068                __SHM_LOCK\n#BPX1SLP EQU   344                 SLEEP\n#BPX1SMF EQU   1036                __SMF_RECORD\n#BPX1SMS EQU   560                 SENDMSG\n#BPX1SND EQU   556                 SEND\n#BPX1SOC EQU   576                 SOCKET_PAIR\n#BPX1SOP EQU   716                 SEMOP\n#BPX1SPB EQU   416                 SIGPUTBACK\n#BPX1SPE EQU   784                 SETPWENT\n#BPX1SPG EQU   348                 SETPGID\n#BPX1SPM EQU   352                 SIGPROCMASK\n#BPX1SPN EQU   760                 SPAWN\n#BPX1SPR EQU   568                 SETPEER\n#BPX1SPW EQU   1008                SERVER_PWU\n#BPX1SPY EQU   740                 SETPRIORITY\n#BPX1SRG EQU   896                 SETREGID\n#BPX1SRL EQU   816                 SETRLIMIT\n#BPX1SRU EQU   892                 SETREUID\n#BPX1SRX EQU   1080                SRX_NP\n#BPX1SSI EQU   356                 SETSID\n#BPX1SSU EQU   360                 SIGSUSPEND\n#BPX1STA EQU   192                 STAT\n#BPX1STE EQU   1076                SET_TIMER_EVENT\n#BPX1STF EQU   80                  W_STATFS\n#BPX1STL EQU   684                 SET_LIMITS\n#BPX1STO EQU   564                 SENDTO\n#BPX1STR EQU   756                 SETITIMER\n#BPX1STV EQU   844                 STATVFS\n#BPX1STW EQU   1096                SIGTIMEDWAIT\n#BPX1SUI EQU   364                 SETUID\n#BPX1SWT EQU   468                 SIGWAIT\n#BPX1SYC EQU   368                 SYSCONF\n#BPX1SYM EQU   196                 SYMLINK\n#BPX1SYN EQU   868                 SYNC\n#BPX1TAK EQU   1032                TAKESOCKET\n#BPX1TDR EQU   24                  TCDRAIN\n#BPX1TFH EQU   20                  TCFLUSH\n#BPX1TFW EQU   28                  TCFLOW\n#BPX1TGA EQU   32                  TCGETATTR\n#BPX1TGC EQU   900                 TCGETCP\n#BPX1TGP EQU   36                  TCGETPGRP\n#BPX1TGS EQU   912                 TCGETSID\n#BPX1TIM EQU   372                 TIMES\n#BPX1TLS EQU   964                 TSK_LVL_SEC_NP\n#BPX1TRU EQU   828                 TRUNCATE\n#BPX1TSA EQU   40                  TCSETATTR\n#BPX1TSB EQU   44                  TCSENDBREAK\n#BPX1TSC EQU   904                 TCSETCP\n         EJECT\n         PRINT NOGEN\n         SPACE\n         IEZBITS\n         SPACE\n         IHAPSA\n         SPACE\n         CSVAPFAA\n         SPACE\n         CSVEXAA DSECT=YES,LIST=NO,TITLE=NO,EXAAHDR=YES,               +\n               EXAAE=YES,EXAAM=NO,EXAAM1=YES\n         SPACE\n         CSVDLCB\n         SPACE\n         CVT   DSECT=YES\n         SPACE\n         IHAECVT DSECT=YES\n         SPACE\n         ISGRIB\n         SPACE\n         IHASDWA VRAMAP=NO\n         SPACE\n         IHAARL PREFIX=ARL,DSECT=YES,DESCR=NO\n         SPACE\n         IHAACEE\n         SPACE\n         IHAASCB\n         SPACE\n         IHAASSB\n         SPACE\n         IHAASXB\n         SPACE\n         IHAASVT\n         SPACE\n         IHACDE\n         SPACE\n         IHACDX DSECT=YES\n         SPACE\n         IHACSD\n         SPACE\n         IHADECB\n         SPACE\n         IHADFA\n         SPACE\n         IHADQE\n         SPACE\n         IHAFBQE\n         SPACE\n         IHAFQE\n         SPACE\n         IHAGDA\n         SPACE\n         IHAIHSA\n         SPACE\n         IHALCCA\n         SPACE\n         IHALDA\n         SPACE\n         IHALLE\n         SPACE\n         IHALPDE\n         SPACE\n         IHAORE\n         SPACE\n         IHAOUXB\n         SPACE\n         IHAPCCA\n         SPACE\n         IHAPVT\n         SPACE\n         IHARB\n         SPACE\n         IHASCCB\n         SPACE\n         IHASCVT\n         SPACE\n         IHASPQE\n         SPACE\n         IHASPQA\n         SPACE\n         IHASPT\n         SPACE\n         IHASTCB\n         SPACE\n         IHASVC UPDATE=YES\n         SPACE\n         IHASVT\n         SPACE\n         IHAWQE\n         SPACE\n         IHAXTLST\n         SPACE\n         IOSDUPI\nUCBBASIC EQU   *\n         SPACE\nDASDDCE  IECDDCE\n         SPACE\n         IECDIOCM\n         SPACE\n         IECDIOQ IOSIOQM=YES\n         SPACE\n         IECDIOSB\n         SPACE\n         IECUCBCX\n         SPACE\n         IEEBASEA\n         SPACE\nCSCB     DSECT\n         IEECHAIN\n         SPACE\n         IEECUCM\n         SPACE\n         IEESMCA\n         SPACE\n         IEESMCX\n         SPACE\n         IEEZB806\n         SPACE\n         IEFJESCT\n         SPACE\n         IEFJSCVT\n         SPACE\nTIOT     DSECT\n         IEFTIOT1\n         SPACE\n         IEFZB4UV\n         SPACE\n         IEFZB610\n         SPACE\n         IEFJSSIB\n         SPACE\n         IEFJSSOB\n         SPACE\n         IEFSSSA\n         SPACE\n         IEFTCT\n         SPACE\n         IEFUCBOB PREFIX=YES\n         SPACE\nDEB      DSECT\n         IEZDEB\n         SPACE\n         IEZIOB\n         SPACE\n         IEZJSCB\n         SPACE\n         IGDVLD\n         SPACE\n         IKJPSCB\n         SPACE\n         IKJTCB\n         SPACE\n         IKJTSB EXT=YES WHICH WILL INCLUDE IKTTSBX.\n         SPACE\n         IKTTCAST\n         SPACE\n         IKTTVWA\n         SPACE\n         ILRASMVT\n         SPACE\n         ILRIORB\n         SPACE\n         IRACMCT\n         SPACE\n         IRAOUCB\n         SPACE\n         IRARASD\n         SPACE\n         IRARMCA\n         SPACE\n         IRARMCT\n         SPACE\n         IRARMCTZ\n         SPACE\n         IRACCT\n         SPACE\n         IRAMCT\n         SPACE\n         IRARCT\n         SPACE\n         IAZJSAB\n         SPACE\n         IWMSVPOL\n         SPACE\n         IWMWRCAA\n         SPACE\n         IWMYCON\n         SPACE\n         IEANTASM\n         SPACE\n         ICHPRCVT\n         SPACE\n         IARRAX\n         SPACE\n         IARRCE\n         SPACE\n         IGVGQAT\n         SPACE\n         IGVGQE\n         SPACE\n         IGVCAUB\n         SPACE\n         CSRSIIDF SIV1=YES\n         SPACE\n         DCBD  DSORG=PS,DEVD=DA\n         SPACE\n         IFGACB\n         SPACE\n         PRINT GEN\n         TITLE 'PREPARE DYNAMIC TABLES AND INITIALIZE VARIABLES'\nIMPXA    CSECT\nIMPXA    AMODE 24\nIMPXA    RMODE 24\nIM       DS    0D                ENTRY POINT.\n         USING IMPXA,R15\n         B     IMPSTART          BRANCH OVER ID AND AUTH TABLE.\n         DROP  R15               IMPXA.\n         DC    AL1(28),CL28'IMON - 390 AND Z  - &IMPDATE'\n         DC    CL31' (C) 1986-2020 PRYCROFT SIX P/L'\n         DC    X'FAF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'     _________\u00a2.<(+|\n         DC    X'F0F0F0F0F0F0F0F0F0F0F0F8F0F0F0F0'    &_________!$*);\u00ac\n         DC    X'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'    -/________\u00a6,%_>?\n         DC    X'F0F0F0F0F0F0F0F0F0F0F0F0F8F0F0F0'    _________`:#@'=\"\n         DC    X'F0F078F0F0F0F0F0F0F0F0F0F0F0F0F0'    X'80'------X'8F'\n         DC    X'F0F0F058F0F0F0F0F058F0F0F0F0F0F0'    X'90'------X'9F'\n         DC    X'F0F058F0F058F0F8F0F0F0F0F0F0F0F0'    X'A0'------X'AF'\n         DC    X'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'    X'B0'------X'BF'\n         DC    X'F0F8F8F8F8F8F8F8F0F0F0F0F0F0F0F0'    {ABCDEFGHI______\n         DC    X'F0F8F8F8F8F8F8F8F8F8F0F0F0F0F0F0'    }JKLMNOPQR______\n         DC    X'F0F0F8F8F8F8F0F0F0F8F0F0F0F0F0F0'    \\_STUVWXYZ______\n         DC    X'F0F1F2F3F4F5F6F7F0F0F0F0F0F0F0C5'    0123456789______\n         DC    CL8'???QNAME'     CUSTOMIZABLE QNAME FOR OPTION \"E\".\n         SPACE\nASID     EQU   ASCBASID-ASCB     OFFSET OF ASCBASID.\nEJST     EQU   ASCBEJST-ASCB     OFFSET OF ASCBEJST.\nJBNI     EQU   ASCBJBNI-ASCB     OFFSET OF ASCBJBNI.\nJBNS     EQU   ASCBJBNS-ASCB     OFFSET OF ASCBJBNS.\nASOUCB   EQU   ASCBOUCB-ASCB     OFFSET OF ASCBOUCB.\nUTILP    EQU   CCVUTILP-CCT      OFFSET OF CCVUTILP.\n         SPACE\n         USING PSA,0\nIMPSTART STM   R14,R12,12(R13)   SAVE THE CALLERS REGISTERS.\n         LR    R12,R15           ESTABLISH\n         LA    R11,2048(,R12)    ADDRESSABILITY.\n         LA    R11,2048(,R11)\n         USING IMPXA,R12,R11\n         LR    R2,R1             SAVE PARAMETER POINTER.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         MVC   OSBITS,CVTDCB     COPY OPERATING SYSTEM FLAGS.\n         CLI   OSBITS,X'9B'      MVS/ESA OR LATER?\n         BE    MVSESAOK          YES.\n         UNPK  OSCODE,OSBITS(2)  NO, REPORT OS BITS.\n         TR    OSCODE(2),HEX-C'0'\n         MVI   OSCODE+2,C'\"'\n         LA    R1,NOTXAMSG       DISPLAY AN APPROPRIATE MESSAGE\n         LA    R0,NOTXALEN       ON THE TERMINAL...\nWRONGOSX TPUT  (1),(0),R\n         RETURN (14,12),RC=12    AND EXIT WITH A RETURN CODE OF 12.\nMVSESAOK MVC   OSLEVEL,CVTOSLVL  COPY MVS/ESA FEATURE FLAGS.\n         DROP  R1                CVT.\n         EXTRACT MF=(E,EXTRTSO)  GET ADDRESS OF TSO FLAG.\n         L     R1,TSOFIELD       POINT TO THE TSO FLAG.\n         TM    0(R1),X'80'       TIME SHARING USER?\n         BZ    SCREENOK          NO, SHOULD BE A STARTED TASK.\n         OI    MODESW3,TSU       YES, FLAG THIS FOR LATER.\n         GTSIZE\n         LTR   R15,R15           ANY PROBLEMS WITH GTSIZE?\n         BNZ   ISNOTVDU          YES, THAT'S VERY UNUSUAL.\n         LTR   R0,R0             IS THIS A VDU?\n         BNZ   FSMODEON          YES.\nISNOTVDU LA    R1,NTVDUMSG       NO, DISPLAY AN APPROPRIATE MESSAGE\n         LA    R0,L'NTVDUMSG     ON THE TERMINAL...\n         TPUT  (1),(0),R\n         RETURN (14,12),RC=8     AND EXIT WITH A RETURN CODE OF 8.\nFSMODEON STM   R0,R1,LINES       SAVE THE CURRENT SCREEN SIZE.\n*                                TURN ON VTAM FULL SCREEN MODE.\n         STFSMODE ON,INITIAL=YES,NOEDIT=YES\n******** STTMPMD ON              TURN OFF SESSION MANAGER.\n         LARL  R3,TRMNETID       POINT TO DATA RETURN AREA.\n         GTTERM TERMID=(R3),MF=(E,GETTERM)    GET TERMINAL ATTRS.\n         LTR   R15,R15           ANY PROBLEMS WITH GTTERM?\n         BNZ   SCREENOK          YES, THAT'S UNUSUAL, BUT PERSEVERE.\n         CLC   LINES+3(1),TRMALTSZ\n         BNE   SCREENOK          NOT IN ALTERNATE SIZE CURRENTLY.\n         CLC   COLUMNS+3(1),TRMALTSZ+1\n         BNE   SCREENOK          NOT IN ALTERNATE SIZE CURRENTLY.\n         MVI   CLR+1,X'7E'       USE ERASE WRITE ALTERNATE.\nSCREENOK TM    0(R2),X'80'       INVOKED AS PROGRAM OR TSO COMMAND?\n         BO    PGMPARM           PROGRAM.\n         L     R2,0(0,R2)        POINT TO THE COMMAND BUFFER.\n         LH    R3,2(0,R2)        GET LENGTH OF PARSING DONE.\n         LA    R3,4(0,R3)        GET OFFSET INTO COMMAND BUFFER.\n         LA    R6,0(R3,R2)       POINT TO FIRST NON-PARSED CHARACTER.\n         SH    R3,0(0,R2)        SUBTRACT COMMAND BUFFER LENGTH TO GET\n         BZ    MONODFLT          OPERAND LENGTH.  IF ZERO, FORGET IT.\n         LPR   R3,R3             GET ABSOLUTE (POSITIVE) VALUE.\n         B     INITCMD           OPERAND SPECIFIED SO USE IT.\nLOADPARM MVC   INCHARS(0),0(R6)                 <<< EXECUTED >>>\nPGMPARM  L     R2,0(0,R2)        POINT TO PROGRAM PARAMETER.\n         CLI   1(R2),0           ZERO PROGRAM PARAMETER LENGTH?\n         BE    MONODFLT          YES, SO NO INITIAL COMMAND.\n         LA    R6,2(,R2)         NO, POINT TO START OF PARAMETER TEXT.\n         LH    R3,0(,R2)         LOAD PARAMETER TEXT LENGTH.\nINITCMD  LA    R2,L'INCHARS      GET MAXIMUM USABLE OPERAND LENGTH.\n         CR    R3,R2             IS TRUNCATION REQUIRED?\n         BNH   LOADCMD           NO, LOAD UNPARSED PART OF PARM AS IS.\n         LR    R3,R2             YES, GET MAXIMUM PROCESSABLE LENGTH.\nLOADCMD  BCTR  R3,0              GET LENGTH CODE FOR EXECUTE.\n         EX    R3,LOADPARM       MOVE FIRST COMMAND TO INPUT AREA.\n         OC    INCHARS,BLANKS    FOLD TO UPPER CASE.\nMONODFLT OI    MODESW2,COL2+COL4 USE MONOCHROME UNLESS COLOUR PROVEN.\n         LA    R0,1\n         SLL   R0,31             GET AMODE BIT READY.\n         LA    R15,FINDCVT       GET TARGET OF BRANCH.\n         OR    R15,R0            SET AMODE BIT.\n         BSM   0,R15             GET INTO 31-BIT ADDRESSING MODE.\n         DROP  R12,R11           IMPXA.\n         SPACE 2\nTSOFIELD DC    F'0'              ADDRESS OF TSO FLAG.\nEXTRTSO  EXTRACT TSOFIELD,'S',FIELDS=(TSO),MF=L\nGETTERM  GTTERM PRMSZE=TERMSIZE,ALTSZE=TRMALTSZ,ATTRIB=TERMATTR,       +\n               TERMID=3,MF=L\n         SPACE 2\nNOTXAMSG DC    C'I-MON REQUIRES MVS/ESA - QUOTE OS CODE \"'\nOSCODE   DC    C'??\"'\n         DC    C' TO SUPPLIER FOR CORRECT VERSION'\nNOTXALEN EQU   *-NOTXAMSG\nNTVDUMSG DC    C'I-MON IS A FULL-SCREEN MONITOR REQUIRING A 3270-TYPE T+\n               SO TERMINAL'\n         LTORG\n         DS    0H\n         SPACE\n         USING FINDCVT,R15       INCREASE MAINLINE BASE REGISTER RANGE.\nFINDCVT  L     R2,CVTPTR(,0)          --> CVT\n         L     R9,CVTJESCT-CVT(,R2)   --> JESCT\n         L     R9,JESEDT-JESCT(,R9)   --> EDT\n         L     R11,64(,R13)           --> TGA\n         L     R8,CVTRCEP-CVT(,R2)    --> RCE\n         L     R7,CVTASMVT-CVT(,R2)   --> ASMVT\n         L     R10,4(,R7)             --> SART (PRE-Z/OS - WAS ASMSART)\n         L     R7,ASMPART-ASMVT(,R7)  --> PART\n*        L     R3,CVTABEND-CVT(,R2)   --> SCVT\n         L     R6,CVTOPCTP-CVT(,R2)   --> RMCT\n         L     R3,RMCTCMCT-RMCT(,R6)  --> CMCT\n*        L     R1,RMCTMCT-RMCT(,R6)   --> MCT\n         L     R1,RMCTRCT-RMCT(,R6)   --> RCT\n         L     R4,RMCTCCT-RMCT(,R6)   --> CCT\n         L     R5,CVTSMCA-CVT(,R2)    --> SMCA\n         L     R2,CVTASVT-CVT(,R2)    --> ASVT\n         STM   R1,R12,RCTADDR    SAVE ADDRESSES.\n         L     R10,INITADDR      LOAD INITIALIZATION PHASE ENTRY POINT.\n         LA    R12,EXAMINEC      ESTABLISH MAINLINE BASE REGISTER.\n         BR    R10               CALL INITIALIZATION PHASE.\n         SPACE\n         DROP  R15               FINDCVT.\n         SPACE\n         COPY  IMPCM1            ADDRESSABLE COMMON ROUTINES.\n         TITLE 'TERMINATION AND EXIT'\nEODAD    DS    0H\n         L     R5,MSTRALET       LOAD ALET TO *MASTER* IF USED.\n         BAS   R3,FREEALET       DELETE IT.\n         L     R5,COMMALET       LOAD ALET TO CONSOLE IF USED.\n         BAS   R3,FREEALET       DELETE IT.\n         ICM   R1,15,MCFLPREV    IMCFLIST AREA TO FREE?\n         BZ    CLOSEXCP          NO.\n         L     R0,0(,R1)         YES, GET SIZE OF RETURNED AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=130\n         ST    R15,MCFLPREV      RESET AREA POINTER.\nCLOSEXCP LA    R15,12            SET THE ENTRY CODE OF TWELVE.\n         L     R11,EXCPIOAD      GET EXCP I/O ROUTINE ENTRY POINT.\n         BASSM R14,R11           CLOSE THE EXCP FILE AND SET AMODE=24.\n         LNR   R1,R12            MAKE REGISTER 1 NEGATIVE.\n         L     R9,PRNTADDR       GET PRINT SUBROUTINE ADDRESS.\n         BASR  R14,R9            CLOSE IMPLOG.\n         TM    MODESW,OPNR       WAS IMREPORT USED?\n         BZ    ENDEXIT           NO.\n         L     R9,WINMANAD       GET WINDOW MANAGER ADDRESS.\n         USING WNDWMNGR,R9\n         CLOSE (IMREPORT)\n         DROP  R9                WNDWMNGR.\nENDEXIT  LM    R0,R1,GMREGS      RESTORE REGISTERS FOR FREEMAIN.\n         L     R13,SAVE+4        LOAD CALLER'S SAVE AREA POINTER.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZ    TERMTASK          NO.\n         STAX  ,                 CANCEL THE ATTENTION EXIT.\n******** STTMPMD OFF               ALLOW SESSION MANAGER.\n         STLINENO LINE=1,MODE=OFF  TURN OFF VTAM FULL SCREEN MODE.\n         TCLEARQ INPUT           CLEAR UNWANTED INPUT.\nTERMTASK RETURN (14,12),RC=0     AND AWAY WE GO....\n         SPACE 2\nFREEALET DS    0H                DELETE ALET FROM DU-AL ROUTINE.\n         LTR   R5,R5             ANY ALET TO FREE?\n         BZR   R3                NO, SO JUST RETURN WITHOUT ACTION.\n         ALESERV DELETE,ALET=(5),CHKEAX=NO,MF=(E,ALESERVL)\n         BR    R3                ALL DONE SO RETURN.\n         TITLE 'SYSTEM SUMMARY LINE SUBROUTINE'\nSYSUMMRY STM   R14,R12,SAVE+12   SAVE GENERAL REGISTER VALUES.\n         L     R8,CRNTOPTN\n         LH    R6,12(,R8)        GET THE WINDOW LINE LENGTH.\n         LTR   R6,R6             WINDOWING USED FOR THIS OPTION?\n         BNZ   SUMMLLOK          YES, LINE LENGTH NOW KNOWN.\n         LA    R6,LL             NO, GET THE STANDARD LINE LENGTH.\nSUMMLLOK CLI   0(R8),C'A'        CURRENTLY IN OPTION \"A\"?\n         BE    SUMONONE          YES, LET OPTION \"A\" HANDLE THIS.\n         LA    R7,BUFFER         NO, POINT TO USUAL DETAIL BUFFER.\n         CR    R7,R2             SYSTEM SUMMARY ON FIRST LINE?\n         BE    SUMONONE          YES, JUST FORMAT IT.\n         LR    R7,R2             NO, POINT TO THE CURRENT LINE.\n         SR    R7,R6             POINT TO THE PREVIOUS LINE.\n         CLI   2(R7),0           ANY HIGHLIGHTING THERE ALREADY?\n         BNE   SUMONONE          YES, DO NOT ALTER IT.\n         MVI   2(R7),X'F4'       NO, USE UNDERSCORE ON PREVIOUS LINE.\n         MVI   5(R7),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\nSUMONONE L     R7,RCTADDR        POINT TO THE RCT.\n         USING RCT,R7\n         TM    OSLEVEL+5,CVTH7720 Z/OS 1.7 OR LATER?\n         BO    SUM17AFC          YES, SKIP PDT.\n         SLR   R9,R9\n         ICM   R9,3,60(R7)       AVAILABLE FRAME COUNT AVERAGE.\n         CVD   R9,WORK           RCVAFQA H/W --> F/W IN Z/OS 1.7.\n         OI    WORK+7,15\n         UNPK  SUMMVARS+16(5),WORK\n         B     SUMAFCOK\nSUM17AFC L     R9,RCVAFQA\n         CVD   R9,WORK           AVAILABLE FRAME COUNT AVERAGE.\n         OI    WORK+7,15\n         UNPK  SUMMVARS+12(9),WORK\n         MVC   SUMMVARS+7(5),=C'AFCA='\n         SR    R9,R9\nSUMAFCOK ICM   R9,3,RCVUICA      UNREFERENCED INTERVAL COUNT AVERAGE.\n         CVD   R9,WORK\n         OI    WORK+7,15\n         UNPK  SUMMVARS+28(5),WORK\n         ICM   R9,3,RCVCPUA      CPU AVERAGE.\n         LA    R9,8(,R9)         ROUND TO NEAREST WHOLE PERCENT.\n         SRL   R9,4              THROW AWAY FRACTIONAL PART.\n         CVD   R9,WORK\n         OI    WORK+7,15\n         UNPK  SUMMVARS+39(3),WORK\n         ICM   R9,3,62(R7)       ASM QUEUE LENGTH AVERAGE.\n         TM    OSLEVEL+1,CVTH5510 SP5 OR LATER?\n         BZ    *+8               NO.\n         ICM   R9,3,RCVNSQLA     ASM QUEUE LENGTH AVERAGE.\n         CVD   R9,WORK\n         OI    WORK+7,15\n         UNPK  SUMMVARS+51(5),WORK\n         ICM   R9,3,68(R7)       TOTAL PAGING RATE.\n         TM    OSLEVEL+3,CVTH7708 Z/OS 1.5 OR LATER?\n         BO    *+8               YES, SKIP PDT.\n         L     R9,RCVPAGRT       TOTAL PAGING RATE.\n         CVD   R9,WORK\n         OI    WORK+7,15\n         UNPK  SUMMVARS+63(5),WORK\nSUMDPROK MVI   LL-80(R2),C' '    CLEAR LINE FOR WIDE SCREEN.\n         EX    R6,SYSUMCLR\n         MVC   0(LL,R2),SYSLINE  SHOW SYSTEM VALUE LINE.\n         TR    LL-79(79,R2),XLATETBL    ENSURE NO UNPRINTABLES.\n         LA    R0,LL             GET THE \"STANDARD\" LINE LENGTH.\n         CH    R0,12(,R8)        LEFT/RIGHT WINDOW SCROLLING ACTIVE?\n         BNL   SUMMSCRL          NO.\n         MVI   0(R2),X'FF'       SET FIXED FLAG - NON-SCROLLABLE LINE.\nSUMMSCRL ALR   R2,R6             ADJUST BUFFER POINTER.\n         ST    R2,SAVE+28        UPDATE R2 SAVE SLOT.\n         LM    R14,R12,SAVE+12   RESTORE REGISTERS.\n         BR    R1                RETURN TO CALLER.\n         DROP  R7                RCT.\nSYSUMCLR MVC   LL-79(0,R2),LL-80(R2)            <<< EXECUTED >>>\n         TITLE 'MAINLINE - VARIABLES AND CONSTANTS'\nCRNTOPTN DC    A(0)             CURRENT OPTION ENTRY POINTER.\nCRNTGLOS DC    A(0)             CURRENT GLOSSARY VECTOR ORIGIN.\nRCTADDR  DC    A(0)\nASVTADDR DC    A(0)\nCMCTADDR DC    A(0)\nCCTADDR  DC    A(0)\nSMCAADDR DC    A(0)\nRMCTADDR DC    A(0)\nPARTADDR DC    A(0)\nRCEADDR  DC    A(0)\nEDTADDR  DC    A(0)\nSARTADDR DC    A(0)\nSPARADDR DC    A(0)\nATHTBADR DC    A(0)             OPTION AUTHORIZATION TABLE ADDRESS.\nTERMSIZE DC    H'0'\nTRMALTSZ DC    H'0'\nTERMATTR DC    F'0'\nOSLEVEL  DC    XL16'00'         MVS/ESA FEATURE FLAGS FROM CVTOSLVL.\nHEX      DC    C'0123456789ABCDEF'\nSTARTING DC    C'STARTING'\nUNKNOWN  DC    C'?UNKNOWN'\nENDED    DC    C' *ENDED*'\nTGETLEN  DC    H'0'\nGLOSSPG# DC    H'0'\nONE      DC    H'1'\nEIGHTY   DC    H'80'\nTEN      DC    F'10'\nAHUNDRED DC    0F'100'\n         DC    H'0'\nHUNDRED  DC    H'100'\nONEGRAND DC    F'1000'\nTENGRAND DC    F'10000'\nFFFF     DC    F'65535'\nFRAME#   DC    F'0'             TOTAL NUMBER OF REAL PAGES (FRAMES).\nGMREGS   EQU   *,8              GETMAIN REGISTERS SAVE AREA.\nGMREG0   DC    F'0'             SIZE OF GOTAREA.\nGMREG1   DC    A(0)             ADDRESS OF GOTAREA.\nUDXTREGS EQU   *,8              DATA SET EXTENT TABLE FREEMAIN VALUES.\nUDXTBSIZ DC    F'0'             SIZE OF DATA SET EXTENT TABLE.\nUDXTABLE DC    A(0)             ADDRESS OF DATA SET EXTENT TABLE.\nIMCOMADR DC    V(IMPXACOM)      ADDRESS OF IMP/XA COMMON AREA.\nIMGLSADR DC    A(0)             ADDRESS OF IMP/XA GLOSSARY MODULE.\nVTCRDADR DC    V(IMVTOCRD)      ADDRESS OF VTOC READING ROUTINE.\nSAVRETAD DC    A(0)             SAVE AREA FOR RETURN ADDRESS.\nDEVTBL   DC    A(0)             ADDRESS OF I/O DEVICE TABLE.\nJOBTBL   DC    A(0)             ADDRESS OF ADDRESS SPACE TABLE.\nPRNTADDR DC    A(SCRNPRNT)      ADDRESS OF SCREEN PRINT SUBROUTINE.\nOPLKUPAD DC    A(OPLOOKUP)      ADDRESS OF OPTION LOOK-UP TABLE.\nINITADDR DC    A(INITIAL)       ADDRESS OF INITIALIZATION SUBROUTINE.\nPRFCHKAD DC    A(PREFCHEK)      ADDRESS OF PREFIX CHECK SUBROUTINE.\nSTGCHKAD DC    A(STORCHEK)      ADDRESS OF STORAGE CHECK SUBROUTINE.\nDTCONVAD DC    A(DATECONV)      ADDRESS OF DATE CONVERSION SUBROUTINE.\nEXCPIOAD DC    A(EXCP3270)      ADDRESS OF EXCP I/O SUBROUTINE.\nGETVLDAD DC    A(GETVLD)        ADDRESS OF SMS VLD SUBROUTINE.\nWINMANAD DC    A(WNDWMNGR)      ADDRESS OF WINDOW MANAGER SUBROUTINE.\nSCRNIOAD DC    A(SCRNIO)        ADDRESS OF SCREEN I/O SUBROUTINE.\nPAGEND   DC    A(0)             ADDRESS OF END OF SCREEN BUFFER.\nCREIOTAD DC    A(CREIOTBL)      ADDRESS OF I/O TABLE CREATION ROUTINE.\nIOSECMB@ DC    A(IOSECMB$)      ADDRESS OF IOSCMB ROUTINE.\nCNFGTKAD DC    A(CNFGTOKN)      ADDRESS OF I/O CONFIGURATION TOKEN.\nMCFLPREV DC    A(0)             ADDRESS OF PREVIOUS IMCFLIST AREA.\nWORKSIZE DC    A(WORKLEN)       SIZE OF FIXED DYNAMIC AREA.\nSMSWKLEN EQU   256              SIZE OF SMS SUBSYS INTERFACE WORK AREA.\nDELAY    DC    F'100'           CENTISEC DELAY BETWEEN STACKED ENTERS.\nSTCKCNVL STCKCONV MF=L          PARAMETER LIST FOR STCKCONV.\n         ORG   STCKCNVL\n         UCBLOOK MF=(L,UCBLKLS) PARAMETER LIST FOR UCBLOOK.\n         ORG   STCKCNVL\n         IOSCMB MF=(L,IOSCMBL)  PARAMETER LIST FOR IOSCMB.\n         ORG\n         DC    0F\nOLDSIZE  EQU   *,8              OLD SCREEN SIZE IF NOT 80-COLUMN MODE.\nOLDLINES DC    F'0'             ZERO OR NUMBER OF LINES UPON ENTRY.\nOLDCOLS  DC    F'0'             ZERO OR NUMBER OF COLUMNS UPON ENTRY.\nLINES    DC    F'0'             NUMBER OF LINES ON SCREEN.\nCOLUMNS  DC    F'0'             NUMBER OF COLUMNS ON SCREEN.\nMSTRALET DC    F'0'             ALET FOR AR ACCESS TO *MASTER*.\nCOMMALET DC    F'0'             ALET FOR AR ACCESS TO CONSOLE.\nSCRLAMT  DC    F'0'             VALUE OF NUMERIC PRIMARY INPUT.\nJBTARGI# DC    F'0'             TARGET ASID INSTANCE NUMBER.\nJPRFXLEN DC    H'0'             COMPARE LENGTH FOR JOB NAME PREFIX.\nREFRESH# DC    H'0'             NUMBER OF STACKED ENTERS REMAINING.\nENDDEPTH DC    H'0'             ENDS REQUIRED TO END OPTION.\nCLR      DC    X'27F5C113'      ESCAPE, VTAM ERASE/WRITE, NULL WCC, IC.\nSBLST    DC    X'7D40C11140C1'  READ HEADER FOR SUBCOMMAND LIST.\n         DC    C'?\"'            CHARACTER STRING FOR SUBCOMMAND LIST.\nSUBPOOL  EQU   23               SUBPOOL ID FOR IMPXA GETMAINS.\nPARTELEN DC    H'96'            SIZE OF PARTE: 64 FOR R1; 96 FOR R2.\nJBTARGAS DC    H'0'             TARGET ASID.\nOSBITS   DC    X'00'            OS FLAGS FROM CVTDCB.\nTPUTFLG  DC    X'03'            FLAG BYTE FOR FULL SCREEN TPUTS.\nTGETFLG  DC    X'81'            FLAG BYTE FOR TGETS BY SCREENIO.\nTGETFLGE EQU   X'80'            FLAG BYTE FOR EDIT TGETS.\nTGETFLGA EQU   X'81'            FLAG BYTE FOR ASIS TGETS.\nTGETFLGN EQU   X'91'            FLAG BYTE FOR ASIS NOWAIT TGETS.\nCOPYATR1 DC    X'00'            COPIED FROM PSCBATR1.\nOPTNATR  DC    X'00'            OPTION AUTHORIZATION CHECK WORK AREA.\nMODESW   DC    X'00'            DISPLAY MODE STATUS FLAGS.\nOPNR     EQU   X'80'            IMREPORT FILE OPENED.\nINMD     EQU   X'40'            SUPPRESS DISPLAY OF DRY INITIATORS.\nALTS     EQU   X'20'            ALTERNATE SCREEN SIZE REQUIRED.\nADR14    EQU   X'10'            14-BIT SCREEN ADDRESSING.\nTRIP     EQU   X'08'            LOGO IS IN TRIPLE-PLANE SYMBOL SET.\nVCTR     EQU   X'04'            NATIVE 3270 VECTOR GRAPHICS AVAILABLE.\nOPNF     EQU   X'02'            IMPLOG FILE OPENED.\nBTMP     EQU   X'01'            NEED TO CLEAR BITMAP FOR NEXT SCREEN.\nMODESW2  DC    X'00'            MORE STATUS FLAGS.\nATTN     EQU   X'80'            ATTENTION INTERRUPT FLAG.\nAUTH     EQU   X'40'            APF AUTHORIZATION FLAG.\nLFLG     EQU   X'20'            GOOD-LOCAL-PAGE-DATA-SET FLAG.\nCLNF     EQU   X'10'            CLEANUP-REQ'D-BEFORE-OPTION-EXIT FLAG.\nXFLG     EQU   X'08'            REQUEST-OPTION-EXIT FLAG.\nCOL4     EQU   X'04'            FOUR-COLOUR-MODE FLAG.\nCOL2     EQU   X'02'            TWO-COLOUR-MODE (MONOCHROME) FLAG.\nCOL1     EQU   X'01'            SILLINESS FLAG.\nKEY0     EQU   X'01'            CURRENTLY IN KEY ZERO.\nMODESW3  DC    X'00'            STILL MORE STATUS FLAGS.\nTSU      EQU   X'80'            TIME SHARING USER FLAG.\nXCPO     EQU   X'40'            EXCP DCB OPEN FLAG.\nAID      EQU   X'20'            ATTENTION-IDENTIFIER-SET FLAG.\nEWA      EQU   X'10'            ERASE/WRITE-ALTERNATE-TO-BE-USED FLAG.\n*NOWT    EQU   X'08'            DO NOT WAIT FOR TERMINAL INPUT.\n*IPND    EQU   X'04'            INPUT FROM TERMINAL IS PENDING.\n*FAIL    EQU   X'02'            IMP MAIN TASK ESTAE ENTERED.\n*MAGIC   EQU   X'01'            APF AUTHORITY OBTAINED VIA \"MAGIC\" SVC.\nMODESW4  DC    X'00'            FURTHER DIFFERENT OTHER STATUS FLAGS.\nECMB     EQU   X'80'            ECMB CONTROL BLOCKS BEING USED.\nALTO     EQU   X'40'            ALTS WAS SET FOR PREVIOUS SCREEN.\n*        EQU   X'20'            SPARE.\n*        EQU   X'10'            SPARE.\n*        EQU   X'08'            SPARE.\n*        EQU   X'04'            SPARE.\n*        EQU   X'02'            SPARE.\n*        EQU   X'01'            SPARE.\nGRAFLAGS DC    X'00'            EXTENDED DATA STREAM SUPPORT FLAGS.\nDIDQRY   EQU   X'80'            QUERY WAS ISSUED; CORRECT AID RETURNED.\nCOLR     EQU   X'40'            SEVEN-COLOUR SUPPORT VERIFIED BY QUERY.\nHLIT     EQU   X'20'            HIGHLIGHTING SUPPORT VERIFIED BY QUERY.\nGE       EQU   X'10'            GE SUPPORT VERIFIED BY QUERY.\nLOGO     EQU   X'08'            EXTENDED LOGO CHARACTERS ARE LOADED.\nGEOK     EQU   X'04'            USE GRAPHIC ESCAPES IN DATA STREAM.\nCMP      EQU   X'02'            NON-FUJITSU SUB-FIELD RETURNED.\nPA2RTN   EQU   X'01'            RETURN PA2 TO CURRENT OPTION.\nSACODE   DC    XL1'28'          IBM/FUJITSU TERMINAL TYPE FLAG.\nCHARSIZE DC    X'0000'          CHARACTER MATRIX WIDTH AND DEPTH.\nVIPMODE  DC    CL1'*'           OPERATOR COMMAND AUTHORITY FLAG.\nSTARS    DC    C'********'      CAN BE EXTENDED IF NECESSARY.\nBLANKS   DC    CL80' '          CAN BE EXTENDED IF NECESSARY.\nINBUFF   DC    XL6'7D4040110000' TGET DATA HEADER.\nINCHARS  DC    CL80' '          MAXIMUM INPUT IS 80 BYTES OF TEXT.\nINBUFLEN EQU   *-INBUFF\nVTOCALOC DYNALC SUFFIX=VA,RETDS=YES,RETDD=YES,                         +\n               VOLSER=VOLSER,UNIT=SYSALLDA,STATUS=OLD\nVTOCFREE DYNALC SUFFIX=VF,DEALLOC=YES,DDNAME=VTOCFILE\nUSAGEHEX DC    X'0D031D0003161728190907082300171928031916062300'\n         DC    X'220927001723280B001323040B003139383620323032300000'\nSYSLINE  DC    X'2841001BF4C82842F2'\nSUMMVARS DC    CL79'           AFCA=00000  UICA=0000  CPUA=000%  ASMQA=+\n               00000  PGRT=00000           '\n         COPY  IMPCM2            ADDRESSABLE COMMON DATA.\n         TITLE 'DONTSWAP/OKSWAP SYSEVENT ROUTINES'\nDONTSWAP DS    0H                BECOME TEMPORARILY NON-SWAPPABLE.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZR   R14               NO, DO NOTHING.\n         L     R1,PSAAOLD        POINT TO THE CURRENT ASCB.\n         L     R1,ASOUCB(,R1)    POINT TO THE CURRENT OUCB.\n         USING OUCB,R1\n         TM    OUCBSFL,OUCBNSW   ALREADY NON-SWAPPABLE?\n         BOR   R14               YES, SO DON'T ISSUE NEEDLESS SYSEVENT.\n         DROP  R1                OUCB.\n         SYSEVENT DONTSWAP       NO, BECOME NON-SWAPPABLE.\n         BR    R14               NOW NON-SWAPPABLE.\n         SPACE 2\nOKAYSWAP DS    0H                REVERT TO BEING SWAPPABLE.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZR   R14               NO, DO NOTHING.\n         L     R1,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R1\n         L     R1,RMCTMCT        POINT TO THE MCT.\n         DROP  R1                RMCT.\n         USING MCT,R1\n*                                SQA SHORTAGE?\n         TM    MCTSFLGS,MCTSQA1+MCTSQA2\n         BNZR  R14               YES, STAY NON-SWAPPABLE.\n*                                AUXILIARY STORAGE SHORTAGE?\n         TM    MCTOFLGS,MCTASM1+MCTASM2\n         BNZR  R14               YES, STAY NON-SWAPPABLE.\n*                                REAL/PAGEABLE STORAGE SHORTAGE?\n         TM    MCTCFLGS,MCTRLSHT+MCTB16SH+MCTDRSHT+MCTB2GSH\n         BNZR  R14               YES, STAY NON-SWAPPABLE.\n         DROP  R1                MCT.\n         SYSEVENT OKSWAP         NO, BECOME SWAPPABLE.\n         BR    R14               NOW NON-SWAPPABLE.\n         SPACE 2\n*                                MAINLINE BASE REGISTER DOES NOT\n*                                HAVE TO REACH PAST LABEL STRM3270.\n         COPY  IMPCM3            3270 DATA STREAM GENERATOR.\nTRMNETID DC    0D                GTTERM TERMID DATA.\nGTTRMID  DC    CL8'DOMIP6'       REQUEST 310-BYTE RETURN DATA.\nGTNETID  DC    CL8' '            NETWORK ID.\nGTIPADDR DC    XL16'00'          IP ADDRESS.\nGTIPPORT DC    XL2'00'           PORT NUMBER.\nGTFLAG1  DC    X'00'             FLAGS.\n*        EQU   X'80'             TRUNCATED DOMAIN NAME.\nGTIPV6   EQU   X'40'             IPV6 ADDRESS IN GTIPADDR.\nGTIPV4   EQU   X'20'             IPV4 ADDRESS IN GTIPADDR.\n*        EQU   X'10'             TRUNCATED ZONE ID.\nGTFLAG2  DC    X'00'             FLAGS.\nGTDOMNL  DC    H'0'              DOMAIN NAME LENGTH.\nGTDOMN   DC    XL255'00'         DOMAIN NAME.\nGTZONEL  DC    XL1'00'           ZONE ID LENGTH.\nGTZONE   DC    XL16'00'          ZONE ID.\n         TITLE 'SCREEN I/O MANAGER'\n         USING SCRNIO,R8\nSCRNIO   LTR   R0,R0             CHECK IF I/O OR PARSING REQUESTED.\n         BM    TRYPFKEY          DO NO I/O, JUST PARSE SUPPLIED INPUT.\n         BZ    SCRNTGET          ZERO DISPLAY DATA SO JUST GET INPUT.\nSCRNSHOW STM   R0,R1,SCRNPA2A    YES, SAVE VALUES IN CASE OF PA2.\n         LA    R9,HOME           POINT TO DETAIL SCREEN BUFFER.\n         CR    R1,R9             IS THIS A DETAIL SCREEN DISPLAY?\n         BNE   SHOWSCRN          NO, SHOW IT.\n         STM   R0,R1,SCRNPA3A    YES, SAVE VALUES IN CASE OF PA3.\nSHOWSCRN BAS   R2,STRM3270       CALL I/O DATA STREAM GENERATOR.\n         L     R8,SCRNIOAD       RESTORE BASE REGISTER.\nDONETPUT ST    R15,SAVE+16       SAVE TPUT RETURN CODE IN CASE NO TGET.\n         CLI   DOWNCNTR,C'0'     ARE WE IN AUTO REFRESH MODE?\n         BL    SCRNTGET          NO, GET A COMMAND FROM THE USER.\n         BAS   R9,WAITER         PERFORM DELAY AND DECREMENT COUNTER.\n         MVC   INCHARS,BLANKS    REQUEST DISPLAY CONTINUE.\nSCRNEXIT LM    R14,R12,SAVE+12   RESTORE REGISTERS.\n         BR    R14               CONTINUE WITH DISPLAYS.\nSCRNTGET NI    MODESW2,255-ATTN  RESET ATTENTION FLAG.\n         XC    INBUFF,INBUFF     CLEAR PREVIOUS READ HEADER.\n         MVC   INCHARS,BLANKS    CLEAR PREVIOUS INPUT TEXT.\n         XC    SCRLAMT,SCRLAMT   RESET PRIMARY NUMERIC INPUT VALUE.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BO    TGTTSOOK          YES, USE TGET FOR INPUT.\n         LA    R15,8             NO, SET ENTRY CODE OF EIGHT.\n         L     R11,EXCPIOAD      GET EXCP I/O ROUTINE ENTRY POINT.\n         BASSM R14,R11           GET THE EXCP USER'S REQUEST.\n         L     R8,SCRNIOAD       RESTORE BASE REGISTER.\n         B     TREADCMN          BRANCH TO COMMON CODE.\nTGTTSOOK LA    R1,INBUFF         LOAD ADDRESS OF INPUT BUFFER.\n         LA    R0,INBUFLEN       LOAD LENGTH OF BUFFER.\n         ICM   R1,8,TGETFLG      LOAD TGET TYPE FLAG BYTE.\n         L     R15,CRNTOPTN      POINT TO THE CURRENT LOOK-UP ENTRY.\n         CLI   0(R15),C'D'       OPTION \"D\"?\n         BE    TGTFLGOK          YES, LET UCB SAMPLING CONTINUE.\n         CLI   0(R15),C'G'       OPTION \"G\"?\n         BE    TGTFLGOK          YES, LET ASID SAMPLING CONTINUE.\n         ICM   R15,3,GLOSSPG#    SHOWING A GLOSSARY SCREEN?\n         BZ    TGTFLGOK          NO, PROCEED WITH TGET.\n         LA    R15,TGETFLGA      YES, GET TGET ASIS WAIT FLAG BYTE.\n         SLL   R15,24            PROMOTE IT.\n         SLL   R1,8              CLEAR OUT THE EXISTING FLAGS.\n         SRL   R1,8\n         OR    R1,R15            GATE NEW FLAGS INTO CORRECT REGISTER.\nTGTFLGOK TGET  (1),(0),R         READ THE INPUT DATA FROM USER.\nTREADCMN ST    R15,SAVE+16       SAVE TGET RETURN CODE.\n         STH   R1,TGETLEN        SAVE LENGTH OF INPUT STREAM.\n         TM    SAVE+19,X'03'     UNEXPECTED RETURN CODE?\n         BNZ   EODAD             YES, NOT A MULTIPLE OF FOUR.\n         CHI   R15,28            KNOWN RETURN CODE VALUE?\n         BH    EODAD             NO, TERMINATE IMP.\n         B     TGETBTAB(R15)     YES, PROCESS IT.\nTGETBTAB DS    0H                TGET BRANCH TABLE.\n         B     TINQOKAY     0 00 PROCESS DATA - SHOULD NOT HAPPEN.\n         B     SCRNEXIT     4 04 RETURN TO CALLER - NO DATA.\n         B     EODAD        8 08 TERMINATE IMP - ATTENTION INTERRUPT.\n         B     DOCLEARQ    12 0C FLUSH EXTRA DATA - SHOULD NOT HAPPEN.\n         B     EODAD       16 10 TERMINATE IMP - INVALID PARAMETERS.\n         B     EODAD       20 14 TERMINATE IMP - TERMINAL LOGGED OFF.\n         B     TINQOKAY    24 18 PROCESS DATA - NOEDIT MODE.\nDOCLEARQ DS    0H          28 1C FLUSH EXTRA DATA - NOEDIT MODE.\n         TCLEARQ INPUT           FLUSH EXCESS INPUT DATA.\nTINQOKAY TM    MODESW2,ATTN      ATTENTION INTERRUPT?\n         BO    EODAD             YES, EXIT AS REQUESTED.\n         CLI   INBUFF,X'88'      QUERY RESPONSE?  (I HOPE NOT.)\n         BE    SCRNTGET          YES, GET ANOTHER INPUT REQUEST.\n         CLI   INBUFF,X'6D'      CLEAR?  (SHOULD NEVER GET ONE HERE.)\n         BE    SCRNEXIT          YES, LET CURRENT OPTION HANDLE IT.\n         CLI   INBUFF,X'6C'      PA1?  (SHOULD NEVER GET ONE HERE.)\n         BE    SCRNEXIT          YES, LET CURRENT OPTION HANDLE IT.\n         CLI   INBUFF,X'6B'      PA3?\n         BNE   TRYRESHO          NO, CHECK FOR RESHOW LATEST SCREEN.\n         LM    R0,R1,SCRNPA3A    YES, RESHOW LATEST DETAIL SCREEN.\n         LTR   R0,R0             HAVE WE HAD A PREVIOUS DETAIL SCREEN?\n         BZ    ISRESHOW          NO, EQUIVALENT TO ORDINARY RESHOW.\n         B     ALTOCHEK          YES, RESHOW LAST DETAIL SCREEN IMAGE.\nTRYRESHO CLI   INBUFF,X'6E'      PA2?\n         BNE   TRYPFKEY          NO, CHECK FOR A PROGRAM FUNCTION KEY.\n         TM    GRAFLAGS,PA2RTN   YES, RETURN PA2 TO CURRENT OPTION?\n         BO    SCRNEXIT          YES, SO DO IT.\n         OI    MODESW,BTMP       ENSURE SCREEN SIZE IS PUT IN SYNC.\nISRESHOW LM    R0,R1,SCRNPA2A    RESTORE TPUT REGISTERS.\nALTOCHEK TM    MODESW4,ALTO      WAS ALTS SET FOR THIS SCREEN?\n         BNO   *+8               NO.\n         OI    MODESW,ALTS       YES, SET IT AGAIN.\n         LTR   R0,R0             ANY DATA TO SHOW?\n         BP    SHOWSCRN          YES, REDRIVE TERMINAL PUT.\n         B     SCRNEXIT          NO, EXIT TO CALLER FOR MENU DISPLAY.\nTRYPFKEY L     R15,=A(SCNINPUT)  GET DATA STREAM EDIT ROUTINE EP.\n         NI    HOME,255-X'04'    RESET BELL IN WCC.\n         BASR  R14,R15           INVOKE IT.\n         NI    INBUFF,X'0F'      GET PFK VALUE IN 1 TO 12 RANGE.\n         CLI   INBUFF,6          PF6/18?\n         BE    EXAMRTNK          YES, RETURN TO MAINLINE.\n         CLI   INBUFF,9          PF9/21?\n         BE    EXAMRTNK          YES, RETURN TO MAINLINE.\n         CLI   INBUFF,12         PF12/24?\n         BE    EXAMRTNX          YES, RETURN TO MAINLINE.\n         CLI   INBUFF,4          PF4/16?\n         BNE   GLOBLSCN          NO, CHECK FOR GLOBAL SUBCOMMANDS.\nDOPRINTX SLR   R1,R1             YES, PRINT SCREEN IMAGE.\n         L     R9,PRNTADDR       LOAD SUBROUTINE ENTRY POINT ADDRESS.\n         BASR  R14,R9            CALL HARDCOPY SUBROUTINE.\n         B     SHOWSCRN          SHOW VERIFICATION AND GET NEXT INPUT.\nGLOBLSCN CLI   INCHARS,C'\\'      COLOUR MODE CHANGE?\n         BE    BAKSLASH          YES.\n         CLI   INCHARS,C'='      REQUESTING MAINLINE OPTION?\n         BE    ISEQUALS          YES, PROCESS IT.\n         ICM   R0,3,GLOSSPG#     CURRENTLY IN TUTORIAL?\n         BNZ   CALLTUTE          YES, INVOKE TUTORIAL HANDLER.\n         CLI   INBUFF,1          PF1/13?\n         BNE   NOTTUTOR          NO, CHECK FOR OTHER PF KEYS.\n         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         TM    255(R15),X'10'    JAPANESE DISPLAY?\n         BO    CALLTUTE          YES, NEVER PERFORM FLAG BYTE DISPLAY.\n         CLC   INCHARS(2),XLATETBL+1 YES, BUT WITH TWO PERIODS?\n         BNE   CALLTUTE          NO, NOT A FLAG BYTE DISPLAY REQUEST.\n         L     R9,INITADDR       YES, GET ADDRESSABILITY TO SCRNHDR.\n         USING INITIAL,R9\n         MVC   INCHARS,SCRNHDR\n         DROP  R9\n         MVC   INCHARS+19(20),=CL20'OPTION ? FLAGS=X''??'''\n         L     R9,CRNTOPTN       POINT TO CURRENT OPTION ENTRY.\n         MVC   INCHARS+26(1),0(R9)   LOAD OPTION NAME.\n         UNPK  INCHARS+36(3),1(2,R9)\n         TR    INCHARS+36(2),HEX-C'0'\n         MVI   INCHARS+38,C''''\n         LA    R1,INCHARS\n         LA    R0,L'INCHARS      DISPLAY OPTION FLAG BYTE.\n         B     SHOWSCRN\nCALLTUTE L     R9,=A(TUTORIAL)   GET TUTORIAL HANDLER ENTRY POINT.\n         BR    R9\nEXAMRTNX TM    MODESW2,CLNF      NEED TO RETURN FOR RESOURCE CLEAN-UP?\n         BZ    RETURNX           NO, GO TO MAINLINE OPTION SELECTION.\n         OI    MODESW2,XFLG      YES, INDICATE SUBROUTINE EXIT NEEDED.\n         LM    R14,R12,SAVE+12   RESTORE REGISTERS.\n         BASR  R9,R14            MAKE SUBROUTINE CLEANUP ITS OWN MESS.\n         NI    MODESW2,255-CLNF-XFLG  SUBRTN RESOURCES NOW CLEANED UP.\nRETURNX  B     EXAMINEC          PROCESS COMMAND IN MAINLINE.\nBAKSLASH XI    MODESW2,COL2      TOGGLE BY DEFAULT.\n         CLI   INCHARS+1,C'0'    NUMBER OF COLOURS SPECIFIED?\n         BL    DOORSHOW          NO.\n         BH    GEON              YES, TRY TO TURN ON GE DATA.\n         NI    GRAFLAGS,255-GEOK      SUPPRESS APL DATA.\n         B     GEDONE\nGEON     TM    GRAFLAGS,GE       GE SUPPORT VERIFIED?\n         BZ    GEDONE            NO.\n         OI    GRAFLAGS,GEOK     YES, ENABLE APL DATA.\nGEDONE   CLI   INCHARS+1,C'4'    YES, FOUR-COLOUR MODE?\n         BL    SUMCOLOR          NO, 0, 1, 2 OR 3 (F9526 MODE).\n         BH    FULCOLOR          NO, 5, 6, 7, 8 OR 9 (FAT CHANCE).\n         OI    MODESW2,COL4      YES, TURN ON 4-COLOUR MODE.\n         NI    MODESW2,255-COL2  TURN OFF MONOCHROME.\n         OI    MODESW,BTMP       REQUEST SCREEN ERASE/RESET.\n         B     DOORSHOW    @@@@\n         LA    R1,CLR            PREPARE FOR THE\n         LA    R0,L'CLR             FULL SCREEN\n         ICM   R1,B'1000',TPUTFLG      TPUT TO CLEAR\n         TPUT  (1),(0),R                  THE SCREEN.\n         B     DOORSHOW          4-COLOUR MODE NOW ENABLED.\nSUMCOLOR OI    MODESW2,COL2      TURN ON DUAL INTENSITY MODE.\n         NI    MODESW2,255-COL4  TURN OFF 4-COLOUR MODE.\n         B     DOORSHOW\nFULCOLOR TM    GRAFLAGS,DIDQRY+HLIT\n         BM    DOORSHOW          AVOID CERTAIN DATA STREAM ERRORS.\n         NI    MODESW2,255-COL2-COL4\n         CLI   INCHARS+1,C'9'    EXPLICIT REQUEST TO FORCE APL DATA?\n         BNE   DOORSHOW          NO.\n         TM    GRAFLAGS,DIDQRY+GE\n         BM    DOORSHOW          AVOID CERTAIN DATA STREAM ERRORS.\n         OI    GRAFLAGS,GEOK     ERRORS ARE THE USER'S FAULT.\nDOORSHOW ICM   R15,3,GLOSSPG#    CURRENTLY IN GLOSSARY?\n         BNZ   CALLTUTE          YES, CALL ROUTINE FOR SCREEN RESHOW.\n         MVC   INCHARS,BLANKS    CLEAR REQUEST FROM THE INPUT BUFFER.\n         CLI   INBUFF,13         PF KEY SELECTED AS WELL?\n         BNL   ISRESHOW          NO, RESHOW PREVIOUS SCREEN IMAGE.\nNOTTUTOR CLI   INBUFF,3          PF3/15?\n         BE    DEPTHTST          YES, END.\n         CLI   INCHARS,X'11'     NULL INPUT FOLLOWED BY SBA?\n         BNE   PRIMCHEK          NO, CHECK THAT INPUT IS PRIMARY.\nNOTPRIME MVC   INBUFF+4(L'INCHARS-1),INCHARS+1\n         MVC   INCHARS+L'INCHARS-3(3),BLANKS\nPRIMCHEK CLI   INCHARS,C'='      REQUESTING MAINLINE OPTION?\n         BNE   PRIMTEST          NO, TEST INPUT FIELD ADDRESS.\nISEQUALS CLC   =X'1104267E40',INBUFF+3 OPTION \"J\" ON SELF?\n         BE    SCRNEXIT          YES, RETURN TO OPTION \"J\".\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' LEFT JUSTIFY OPTION REQUEST.\n         B     EXAMRTNX          PROCESS OPTION REQUEST.\nPRIMTEST CLC   ONE,INBUFF+4      IS DATA FROM PRIMARY INPUT AREA?\n         BL    SCRNEXIT          NO, RETURN REPLY TO SUBROUTINE PROMPT.\n         CLI   INCHARS,C' '      IS FIRST CHARACTER BLANK?\n         BNE   UPDATCHK          NO, LOOK AT IT.\n         LH    R0,TGETLEN        GET INPUT DATA STREAM LENGTH.\n         AHI   R0,-6             GET INPUT TYPED DATA LENGTH.\n         BNP   SCRNEXIT          HANDLE BAD LENGTH.\nPRIMBLNK MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' YES, PROMOTE SECOND CHARACTER.\n         CLI   INCHARS,X'11'     NULL INPUT FOLLOWED BY SBA?\n         BE    NOTPRIME          YES, CAN'T BE PRIMARY INPUT.\n         CLI   INCHARS,C' '      IS (NEW) FIRST CHARACTER BLANK?\n         BNE   UPDATCHK          NO, LOOK AT IT.\n         BCT   R0,PRIMBLNK       YES, SUPPRESS IT.\n         B     SCRNEXIT          NULL INPUT, START WRITING THE DISPLAY.\nUPDATCHK CLI   INCHARS,C'0'      NUMERIC FOR AUTOMATIC UPDATE?\n         BL    CMNDSCAN          NO, CONTINUE.\n         BAS   R9,STACKER        YES, PROCESS STACK REQUEST.\n         B     SCRNEXIT          START WRITING THE DISPLAYS.\nDEPTHTST MVC   INBUFF+1(2),ONE   INDICATE CURSOR IS AT HOME.\n         SLR   R0,R0             CLEAR FOR INSERT.\n         ICM   R0,3,ENDDEPTH     GET ENDS REQUIRED TO LEAVE OPTION.\n         BZ    EXAMRTNK          NONE, SO RETURN TO MAINLINE.\n         BCTR  R0,R0             DECREMENT.\n         STH   R0,ENDDEPTH       UPDATE THE DEPTH COUNTER.\n         B     SCRNEXIT          RETURN PF3/15 TO LOCAL OPTION.\nEXAMRTNK TM    MODESW2,CLNF      NEED TO RETURN FOR RESOURCE CLEAN-UP?\n         BZ    RETURNK           NO, GO AND PROCESS PFK IN MAINLINE.\n         OI    MODESW2,XFLG      YES, INDICATE SUBROUTINE EXIT NEEDED.\n         LM    R14,R12,SAVE+12   RESTORE REGISTERS.\n         BASR  R9,R14            MAKE SUBROUTINE CLEANUP ITS OWN MESS.\n         NI    MODESW2,255-CLNF-XFLG  SUBRTN RESOURCES NOW CLEANED UP.\nRETURNK  B     EXAMINEK          PROCESS PFK IN MAINLINE.\nCMNDSCAN CLI   INBUFF,6          SCROLLING KEY?\n         BL    CMNDENTR          NO, PROCESS COMMAND.\n         CLI   INBUFF,11         SCROLLING KEY?\n         BH    CMNDENTR          NO, PROCESS COMMAND.\n         CLI   INCHARS,C'M'      M FOR MAXIMUM REQUESTED?\n         BE    CMNDMAX           YES.\n         CLI   INCHARS,C'H'      H FOR HALF REQUESTED?\n         BE    CMNDHALF          YES.\n         B     SCRNEXIT          NO, JUST EXIT.\nCMNDMAX  MVI   SCRLAMT,X'7F'     LOAD LARGE NUMBER FOR MAXIMUM.\n         B     SCRNEXIT          RETURN TO LOCAL OPTION.\nCMNDHALF L     R0,COLUMNS        GET SCREEN WIDTH.\n         CLI   INBUFF,9          HORIZONTAL SCROLLING?\n         BH    HALFSIZE          YES.\n         L     R0,LINES          NO, VERTICAL SCROLLING.\nHALFSIZE SRL   R0,1              HALVE THE SCREEN SIZE.\n         BCTR  R0,0\n         ST    R0,SCRLAMT        REMEMBER THIS AMOUNT.\n         B     SCRNEXIT          RETURN TO LOCAL OPTION.\nCMNDENTR CLI   INCHARS,C'H'      CHECK IF HARDCOPY REQUESTED.\n         BE    DOPRINTX          OUTPUT THE SCREEN IMAGE.\n         CLI   INCHARS,C'Z'      CHECK IF TERMINATION REQUESTED.\n         BE    EXAMRTNX          RETURN TO MAINLINE FOR TERMINATION.\n         CLI   INCHARS,C'\u00a2'      CLOSE IMPLOG REQUEST?  (EBCDIC K/B.)\n         BE    CLOSELOG          YES, CLOSE IT.\n         CLI   INCHARS,C'`'      CLOSE IMPLOG REQUEST?  (ASCII K/B.)\n         BE    CLOSELOG          YES, CLOSE IT.\n         CLI   INCHARS,C'?'      WAS TUTORIAL REQUESTED?\n         BNE   WAITTEST          NO, CHECK FOR WAIT INTERVAL UPDATE.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1  YES, HANDLE SPECIFIC\n         MVI   INCHARS+L'INCHARS-1,C' '        PAGE REQUEST.\n         B     CALLTUTE          OUTPUT THE SCREEN IMAGE.\nWAITTEST CLI   INCHARS,C'W'      REQUESTING WAIT INTERVAL UPDATE?\n         BNE   SCRNEXIT          NO, RETURN TO CALLER.\n         CLI   INCHARS+1,C'0'    SECOND CHARACTER NUMERIC?\n         BL    SCRNEXIT          NO, COULD BE VALID SUBOPTION.\n         NI    INCHARS+1,X'0F'   GET NUMERIC PART.\n         SLR   R1,R1             CLEAR REGISTER.\n         IC    R1,INCHARS+1      GET NUMBER OF SECONDS DELAY REQUESTED.\n         CLI   INCHARS+2,C'0'    THIRD CHARACTER NUMERIC?\n         BL    GOTDELAY          NO, ALREADY HAVE SPECIFIED SECONDS.\n         NI    INCHARS+2,X'0F'   GET NUMERIC PART.\n         SLR   R15,R15           CLEAR REGISTER.\n         IC    R15,INCHARS+2     GET NUMBER OF SECONDS DELAY REQUESTED.\n         MHI   R1,10             CONVERT FIRST DIGIT TO TENS.\n         AR    R1,R15            ADD UNITS.\nGOTDELAY MHI   R1,100            GET CENTISECONDS.\n         ST    R1,DELAY          SAVE NEW DELAY TIME.\n         B     ISRESHOW          RESET SCREEN IMAGE.\nCLOSELOG LNR   R1,R12            MAKE REGISTER 1 NEGATIVE.\n         L     R9,PRNTADDR       GET PRINT SUBROUTINE ADDRESS.\n         BASR  R14,R9            CLOSE IMPLOG.\n         B     SHOWSCRN          DONE, GET NEXT INPUT.\n         DROP  R8                SCRNIO.\n         SPACE\n         LTORG\n         TITLE 'SUBROUTINE LOOK-UP TABLE'\nOPLOOKUP DS    0F\n         SPACE\n         DC    C' '                      SELECTION CODE.\n         DC    X'FA'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(MAINMENU)               SUBROUTINE ADDRESS.\n         DC    H'0'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    H'0'                      TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\nOPTBLEN  EQU   *-OPLOOKUP                LENGTH OF AN OPTION ENTRY.\n         SPACE\n         DC    C'$'                      SELECTION CODE.\n         DC    X'05'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(DSK$PACE)               SUBROUTINE ADDRESS.\n         DC    H'0'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    H'0'                      TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'@'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(UNIXUSER)               SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\nADDRMON  DC    C'A'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'5'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(ADDRSPCS)               SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'25'                     SCROLL RIGHT OFFSET.\n         DC    AL2(ASLL)                 TOTAL LINE LENGTH.\n         DC    H'9'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'B'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(BILDLIST)               SUBROUTINE ADDRESS.\n         DC    H'4'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'9'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'C'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(CHANNELS)               SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\nDEVMON   DC    C'D'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(DEVICES)                SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(DVLL)                 TOTAL LINE LENGTH.\n         DC    H'15'                     LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'E'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'11'                     RIGHT COLUMNS TO PRESERVE.\n         DC    A(ENQUEUES)               SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(NQLL)                 TOTAL LINE LENGTH.\n         DC    H'9'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\nFRAMEMON DC    C'F'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(FRAMES)                 SUBROUTINE ADDRESS.\n         DC    H'0'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    H'0'                      TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'G'                      SELECTION CODE.\n         DC    X'03'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(GRAFSTAT)               SUBROUTINE ADDRESS.\n         DC    H'0'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    H'0'                      TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'J'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(JOBSTATS)               SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'K'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(KNOWSHOW)               SUBROUTINE ADDRESS.\n         DC    H'0'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    H'0'                      TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\nLISTLSTR DC    C'L'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(LISTLIBS)               SUBROUTINE ADDRESS.\n         DC    H'1'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'M'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(MANSTATS)               SUBROUTINE ADDRESS.\n         DC    H'1'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'N'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(NUCLKMAP)               SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'O'                      SELECTION CODE.\n         DC    X'00'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(OSCONSOL)               SUBROUTINE ADDRESS.\n         DC    H'0'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    H'0'                      TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\nPAGDSMON DC    C'P'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    X'8000'                   RIGHT COLUMNS TO PRESERVE.\n         DC    A(PAGEDS)                 SUBROUTINE ADDRESS.\n         DC    H'1'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'Q'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'11'                     RIGHT COLUMNS TO PRESERVE.\n         DC    A(ENQUEUES)               SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(NQLL)                 TOTAL LINE LENGTH.\n         DC    H'9'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'R'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(RATEMIPS)               SUBROUTINE ADDRESS.\n         DC    H'1'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\nDMNMON   DC    C'S'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(DOMAINS)                SUBROUTINE ADDRESS.\n         DC    H'3'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(DMLL)                 TOTAL LINE LENGTH.\n         DC    H'13'                     LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'T'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(SVCLIST)                SUBROUTINE ADDRESS.\n         DC    H'2'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(SVLL)                 TOTAL LINE LENGTH.\n         DC    H'8'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'U'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(UNITSAMP)               SUBROUTINE ADDRESS.\n         DC    H'0'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    H'0'                      TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    C'V'                      SELECTION CODE.\n         DC    X'07'                     AUTH/FEATURE SUPPORT FLAGS.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         DC    A(VIRTSTOR)               SUBROUTINE ADDRESS.\n         DC    H'1'                      HEADING LINE COUNT.\n         DC    H'0'                      SCROLL RIGHT OFFSET.\n         DC    AL2(LL)                   TOTAL LINE LENGTH.\n         DC    H'0'                      LEFT COLUMNS TO PRESERVE.\n         SPACE\n         DC    AL1(255)                  END OF LOOK-UP TABLE.\n         SPACE\n         DC    X'FF'\n*        EQU   X'80'                     TSO OPER AUTHORITY NOT NEEDED.\n*        EQU   X'40'                     TSO ACCT AUTHORITY NOT NEEDED.\n*        EQU   X'20'                     TSO FIB AUTHORITY NOT NEEDED.\n*        EQU   X'10'                     TSO MOUNT AUTH NOT NEEDED.\n*        EQU   X'08'                     THE OPTION IS ENABLED.\n*        EQU   X'04'                     NUMERIC COMMAND IS SUPPORTED.\n*        EQU   X'02'                     APF AUTHORITY NOT NEEDED.\n*        EQU   X'01'                     SCREEN PRINT IS SUPPORTED.\n         DC    H'0'                      RIGHT COLUMNS TO PRESERVE.\n         SPACE\n         COPY  IMPCM4            UNADDRESSABLE COMMON ROUTINES.\n         TITLE 'MAIN MENU SCREEN'\nMENU     DC    X'C1'             WCC - RESET MDT.\n         DCS   SBA,(1,1),SF,UNPLO,IC,SA,HILITE,USCORE\n         DC    X'00000000'       SELECTION INPUT AREA.\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\n**       DC    C'       INTERACTIVE MONITORING PROGRAM FOR OS/390 AND Z\n**             /OS         &IMPDATE'\n         DC    C'       INTERACTIVE MONITORING PROGRAM FOR OS/390 AND '\n         DC    X'A9',C'/OS         &IMPDATE'\n         DCS   SA,HILITE,NORMAL\n         SPACE\n         DCS   RA,(3,56),C' ',SF,PROHIS,SA,HILITE,REVERSE\n         DCS   SA,COLOUR,WHITE\n         DCS   RA,(3,68),C' ',SA,HILITE,NORMAL\n         DCS   RA,(4,56),C' ',SF,PROHIS,SA,HILITE,REVERSE\n         DCS   SA,COLOUR,WHITE,C'  ',SA,COLOUR,RED,C' I-MON '\n         DCS   SA,COLOUR,WHITE,C'  '\n         DCS   SA,HILITE,NORMAL\n         DCS   RA,(5,56),C' ',SF,PROHIS,SA,HILITE,REVERSE\n         DCS   SA,COLOUR,WHITE,C'  ',SA,COLOUR,YELLOW,C'PRIMARY'\n         DCS   SA,COLOUR,WHITE,C'  '\n         DCS   SA,HILITE,NORMAL\n         DCS   RA,(6,56),C' ',SF,PROHIS,SA,HILITE,REVERSE\n         DCS   SA,COLOUR,WHITE,C'  ',SA,COLOUR,BLUE,C'OPTIONS'\n         DCS   SA,COLOUR,WHITE,C'  '\n         DCS   SA,HILITE,NORMAL\n         DCS   RA,(7,56),C' ',SF,PROHIS,SA,HILITE,REVERSE\n         DCS   SA,COLOUR,WHITE\n         DCS   RA,(7,68),C' ',SA,HILITE,NORMAL,RA,(1,1),C' '\n         SPACE\n         DCS   SBA,(2,5),X'&HIGH',C'?',X'&LOW',C'- INVOKE THE I-MON'\n         DC    X'&MED',C'TUTORIAL'\n         DCS   SBA,(2,45),X'&HIGH',C'(PF1/13)'\nOPT$     DCS   SBA,(3,5),X'&HIGH',C'$',X'&LOW',C'-'\n         DC    X'&MED',C'DISK SPACE',X'&LOW',C'DISPLAY'\nOPT@     DCS   SBA,(4,5),X'&HIGH',C'@',X'&LOW',C'-'\n         DC    X'&MED',C'UNIX USER',X'&LOW',C'DATA BASE DISPLAY'\nOPTA     DCS   SBA,(5,5),X'&HIGH',C'A',X'&LOW',C'-'\n         DC    X'&MED',C'ADDRESS SPACE',X'&LOW',C'MONITOR'\n         DC    CL14' ',X'&HIGH',C'(PF6/18)'\nOPTB     DCS   SBA,(6,5),X'&HIGH',C'B',X'&LOW'\n         DC    C'- DISPLAY',X'&MED',C'BLDL',X'&LOW',C'AND'\n         DC    X'&MED',C'CSVQUERY',X'&LOW',C'RESULTS'\nOPTC     DCS   SBA,(7,5),X'&HIGH',C'C',X'&LOW',C'-'\n         DC    X'&MED',C'CHANNEL PATH',X'&LOW',C'MONITOR'\nOPTD     DCS   SBA,(8,5),X'&HIGH',C'D',X'&LOW'\n         DC    C'- INPUT/OUTPUT',X'&MED',C'DEVICE',X'&LOW',C'MONITOR'\n         DC    CL8' ',X'&HIGH',C'(PF9/21)'\nOPTE     DCS   SBA,(9,5),X'&HIGH',C'E',X'&LOW'\n         DC    C'- RESERVE AND',X'&MED',C'ENQUEUE',X'&LOW',C'MONITOR'\nOPTF     DCS   SBA,(10,5),X'&HIGH',C'F',X'&LOW'\n         DC    C'- REAL MEMORY',X'&MED',C'FRAME',X'&LOW',C'MONITOR'\nOPTG     DCS   SBA,(11,5),X'&HIGH',C'G',X'&LOW',C'-'\n         DC    X'&MED',C'GRAPHIC',X'&LOW',C'ACTIVITY MONITOR'\nOPTJ     DCS   SBA,(12,5),X'&HIGH',C'J',X'&LOW',C'-'\n         DC    X'&MED',C'JOB STATUS',X'&LOW',C'MONITOR'\nOPTK     DCS   SBA,(13,5),X'&HIGH',C'K',X'&LOW',C'- HISTORICAL'\n         DC    X'&MED',C'KNOWLEDGE',X'&LOW',C'DISPLAY'\nOPTL     DCS   SBA,(14,5),X'&HIGH',C'L',X'&LOW'\n         DC    C'- SYSTEM',X'&MED',C'LIBRARY',X'&LOW',C'DISPLAY'\nOPTM     DCS   SBA,(15,5),X'&HIGH',C'M',X'&LOW',C'- SYSTEM/SYSPLEX'\n         DC    X'&MED',C'MANAGEMENT',X'&LOW',C'MONITOR'\nOPTN     DCS   SBA,(16,5),X'&HIGH',C'N',X'&LOW',C'-'\n         DC    X'&MED',C'NUCLEUS MAP',X'&LOW',C'DISPLAY AND LOOKUP'\nOPTO     DCS   SBA,(17,5),X'&HIGH',C'O',X'&LOW',C'-'\n         DC    X'&MED',C'OS CONSOLE',X'&LOW',C'AND MTT MONITOR'\nOPTP     DCS   SBA,(18,5),X'&HIGH',C'P',X'&LOW',C'-'\n         DC    X'&MED',C'PAGE DATA SET',X'&LOW',C'MONITOR'\nOPTR     DCS   SBA,(19,5),X'&HIGH',C'R',X'&LOW',C'-'\n         DC    X'&MED',C'RATE CPU',X'&LOW'\n         DC    C'INSTRUCTION SPEED'\nOPTS     DCS   SBA,(20,5),X'&HIGH',C'S',X'&LOW',C'-'\n         DC    X'&MED',C'SWAP DOMAIN',X'&LOW',C'OR'\n         DC    X'&MED',C'SERVICE CLASS',X'&LOW',C'MONITOR'\nOPTT     DCS   SBA,(21,5),X'&HIGH',C'T',X'&LOW',C'-'\n         DC    X'&MED',C'SVC TABLE',X'&LOW',C'DISPLAY'\nOPTU     DCS   SBA,(22,5),X'&HIGH',C'U',X'&LOW',C'- PERFORM'\n         DC    X'&MED',C'UNIT I/O',X'&LOW',C'SAMPLING'\nOPTV     DCS   SBA,(23,5),X'&HIGH',C'V',X'&LOW',C'-'\n         DC    X'&MED',C'VIRTUAL STORAGE',X'&LOW',C'MONITOR'\nOPTX     DCS   SBA,(24,5),X'&HIGH',C'X',X'&LOW',C'-'\n         DC    X'&MED',C'EXIT',X'&LOW',C'I-MON'\n         DC    CL25' ',X'&HIGH',C'(PF3/15)'\n         SPACE\n         DCS   SBA,(24,6)\nUSAGEADR EQU   *-2,2\nUSAGEMSG DC    X'4DC35D40C3D6D7E8D9C9C7C8E340D7D9E8C3D9D6C6E340'\n         DC    X'E2C9E740D7E3E84B40D3E3C44B40F1F9F8F660F2F0F2F04040'\nUSAGELEN EQU   *-USAGEMSG\n         SPACE\n         DCS   SBA,(9,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'USERID-----:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUUID  DC    CL8' '\n         SPACE\n         DCS   SBA,(10,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'TERMINAL---:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUTRM  DC    CL8' '\n         SPACE\n         DCS   SBA,(11,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'NETWORK----:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUNET  DC    CL8' '\n         SPACE\n         DCS   SBA,(12,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'DATE-(NOW)-:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUNOW  DC    CL10' '\n         SPACE\n         DCS   SBA,(13,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'DATE-(IPL)-:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUIPL  DC    CL10' '\n         SPACE\n         DCS   SBA,(14,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'SYSTEM-ID--:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUSID  DC    C'????'\n         SPACE\n         DCS   SBA,(15,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'SYSTEM-NAME:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUSNM  DC    CL8' '\n         SPACE\n         DCS   SBA,(16,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'SYSPLEX----:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUSPX  DC    CL8' '\n         SPACE\n         DCS   SBA,(17,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'LPAR-NAME--:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENULPR  DC    CL8' '\n         SPACE\n         DCS   SBA,(18,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'CLONE-NAME-:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUCLN  DC    CL2' '\n         SPACE\n         DCS   SBA,(19,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'VM-GUEST-ID:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUVMG  DC    CL8' '\n         SPACE\n         DCS   SBA,(20,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'CONFIG-NAME:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUHDW  DC    CL8' '\n         SPACE\n         DCS   SBA,(21,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'CPU-SERIAL-:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUSER  DC    C'XXXXXX'\n         SPACE\n         DCS   SBA,(22,56),SF,PROLOS,SA,COLOUR,GREEN\n         DC    C'CPU-MODEL--:'\n         DCS   SF,PROHIS,SA,COLOUR,WHITE\nMENUTYP  DC    C'XXXX'\nMENUDSH  DC    C' '\nMENUMDL  DC    C'   '\n         SPACE\nMENUEND  EQU   *\nMENULEN  EQU   MENUEND-MENU\n         SPACE\n         DCS   SA,PGMSYM,X'CB',SA,COLOUR,RED,SBA,(3,72)\n         DC    X'4142434445'\n         DCS   SBA,(4,73)\nROOROW2  DC    X'4A4B4C4D4E'\n         DCS   SBA,(5,73)\nROOROW3  DC    X'4F'\n         DCS   SBA,(6,69),SA,COLOUR,GREEN\n         DC    X'5051525354555640575859'\n         SPACE\n         DCS   SBA,(7,69),SA,COLOUR,BLUE\n         DC    X'5A405B5C5D5E405F606162'\n         DCS   SA,PGMSYM,NORMAL\n         SPACE\nMENULENX EQU   *-MENUEND\n         SPACE\nGLOBE    DCS   SA,PGMSYM,X'CB',SA,COLOUR,WHITE,SBA,(3,71)\n         DC    X'41424344454647'\n         DCS   SBA,(4,70)\n         DC    X'48494A4B4C4D4E4F50'\n         DCS   SBA,(5,70)\n         DC    X'515253545556575859'\n         DCS   SBA,(6,70)\n         DC    X'5A5B5C5D5E5F606162'\n         DCS   SBA,(7,71)\n         DC    X'63646566676869'\n         DCS   SA,PGMSYM,NORMAL\n         SPACE\nGLOBELEN EQU   *-GLOBE\n         SPACE\nGLBVECTR DC    X'F3'                 WRITE STRUCTURED FIELD\n         DC    X'0004'               LENGTH OF FIRST STRUCTURED FIELD\n         DC    X'03'                 ERASE/RESET\nGLBCLRSZ DC    X'00'                 IMPLICIT PARTITION SIZE - DEFAULT\nGLBVECSF DC    AL2(GLBVCSFL)         LENGTH OF STRUCTURED FIELD\n         DC    X'0F10'               GRAPHIC PICTURE\n         DC    X'00'                 PID\n         DC    B'11000000'           FLAGS - SPAN : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    X'00'                 RESERVED\n*\n         DC    X'70'                 BEGIN SEGMENT\n         DC    X'0C'                 LENGTH OF FOLLOWING PARAMETERS\n         DC    CL4'IMON'             NAME OF PROCEDURE TO BE CREATED\n         DC    B'01110100'           VISIBLE   NOHILITE\n         DC    B'01101000'           NOPROL NEW SEG DATA\n         DC    AL2(SEGLEN)           LENGTH OF PROCEDURE TO BE CREATED\n         DC    X'00000000'           P/S NAME\nSEGDATA  EQU   *\n         DC    X'0C04'               SET MIX (XOR)\n         DC    X'2104'               SET CURRENT POSITION\nSEGXPOS  DC    X'0000'               X\nSEGYPOS  DC    X'0000'               Y\n         DC    X'0A01'               SET COLOR\n         DC    X'9106000000500050'   IMAGE BEGIN\n*  BLUE PLANE\n         DC    X'920A000000001FE000000000'\n         DC    X'920A00000000AFFF80000000'\n         DC    X'920A00000003FFFE80000000'\n         DC    X'920A0000007FFFFF58000000'\n         DC    X'920A000000EB6A4148800000'\n         DC    X'920A00000754144014800000'\n         DC    X'920A00000CB22AC3D2A00000'\n         DC    X'920A0000108280037B900000'\n         DC    X'920A0000000040007DE80000'\n         DC    X'920A000000000004FF560000'\n         DC    X'920A000200200000BFDA0000'\n         DC    X'920A000000000001FDFB8000'\n         DC    X'920A000200000005AFEEA000'\n         DC    X'920A00100000000FDFFB6000'\n         DC    X'920A00000000015FBFF6D000'\n         DC    X'920A00400000079FBFBF6800'\n         DC    X'920A0000000001CF3FFFD400'\n         DC    X'920A0000000003D87FEF5E00'\n         DC    X'920A0000008001F7FFFDF000'\n         DC    X'920A0100007002F7FFFFFF00'\n         DC    X'920A01003D8800FFFFFFAA80'\n         DC    X'920A00001E0001FFFFFFFF00'\n         DC    X'920A0100000003FFFFFFB680'\n         DC    X'920A0140000002FFFFFFFD40'\n         DC    X'920A014000000DFFFFFFF740'\n         DC    X'920A015008003FFFFFFFFF60'\n         DC    X'920A02E03803FFFFFFFFFAD0'\n         DC    X'920A01607806FFFFFFFFFF40'\n         DC    X'920A03E1AC03FEFFFFFFF7D0'\n         DC    X'920A25E1FF43FDFFFFFFFFB0'\n         DC    X'920A0FE3FF01FFFFFFFFFEE8'\n         DC    X'920A2BA3F711FFFFFFFFFDA0'\n         DC    X'920A16E6FF63FFFFFFFFFB78'\n         DC    X'920A0FF3FFF7FF7FFFFFFFC4'\n         DC    X'920A15F9BF7FFF1FFFFFF6E8'\n         DC    X'920A05FBFF7FFEBFFFFFFFF8'\n         DC    X'920A17FFFF9FE3FFFFFFFED0'\n         DC    X'920A6FFFFC9FCFFFFFFFFB74'\n         DC    X'920A5EFFFE1F07FFFFFFFED8'\n         DC    X'920A77FFFF3C06AFFFFFFFE8'\n         DC    X'920A4BFFFE0C0FE7FFFFFD78'\n         DC    X'920A0FFFFF960D1C9FFFFFD0'\n         DC    X'920A3BFFFFC31AC203FFFFB4'\n         DC    X'920A0BFFFFCFFEFF80EFEFE8'\n         DC    X'920A57BFFFF3FDFFE53FFFB0'\n         DC    X'920A0DFFFFF83FFFC27FFBA8'\n         DC    X'920A1BFFFFFFFFBFF33FFDC8'\n         DC    X'920A07FFFFFFFEFFFFFF7EB0'\n         DC    X'920A1DFFFFFFFFFE7BFFFDE0'\n         DC    X'920A33FFFFFFFFF873FFFBA8'\n         DC    X'920A1EFFFFFFFF8871FFDED0'\n         DC    X'920A13BFFFFFFF0031FFFB40'\n         DC    X'920A07DFFFFFFF0003FFFEA0'\n         DC    X'920A02FFFFFFFE0000FFD6C0'\n         DC    X'920A03FFFFFFE000007FFF00'\n         DC    X'920A02BFFFFFC000007FFA40'\n         DC    X'920A057FFFFFC000003FF6A0'\n         DC    X'920A015FFFFFC000003EDD00'\n         DC    X'920A00BAFFFFE000003F7280'\n         DC    X'920A006FFFFFE000003FDA00'\n         DC    X'920A00B7FFFFE000007EB400'\n         DC    X'920A004FFFFFF03C00FF6A00'\n         DC    X'920A0015FFFFF3FE01FEA000'\n         DC    X'920A002BFFFFFFFF83EB5400'\n         DC    X'920A000EDFFFFFFF87FEE000'\n         DC    X'920A00057FFFFFFFFFB78000'\n         DC    X'920A000377FFFFFFE5D76000'\n         DC    X'920A0002DFFFFFFFFF378000'\n         DC    X'920A00006BFFFFFFFED44000'\n         DC    X'920A00002F5FFFFFEFF50000'\n         DC    X'920A000055FFFFFFFD5A0000'\n         DC    X'920A00000AADFFFFF7D00000'\n         DC    X'920A0000055B6BFBEE400000'\n         DC    X'920A00000176FEAF59000000'\n         DC    X'920A00000096B5FAC2000000'\n         DC    X'920A00000029DAAB68000000'\n         DC    X'920A0000001BFFFC00000000'\n         DC    X'920A00000003FFFF00000000'\n         DC    X'920A000000001FF800000000'\n         DC    X'920A00000000000000000000'\n*              800 BYTES IN PLANE BITMAP\n         DC    X'93020000'           IMAGE END\n         DC    X'0A02'               SET COLOR\n         DC    X'9106000000500050'   IMAGE BEGIN\n*   RED PLANE\n         DC    X'920A00000000078000000000'\n         DC    X'920A00000000203B00000000'\n         DC    X'920A0000000004C800000000'\n         DC    X'920A00000003525E00000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000C00000000000'\n         DC    X'920A0000001F000000000000'\n         DC    X'920A00000010000000000000'\n         DC    X'920A00000080000000000000'\n         DC    X'920A00100070000000000000'\n         DC    X'920A00103D80000000000000'\n         DC    X'920A00101E00000000000000'\n         DC    X'920A00200000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A04000000000000000000'\n         DC    X'920A02000000000000000000'\n         DC    X'920A0C000000000000000000'\n         DC    X'920A04000000000000000000'\n         DC    X'920A18000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000100000000000'\n         DC    X'920A00000000380000000000'\n         DC    X'920A00000000080000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000010000000'\n         DC    X'920A00000000000018000000'\n         DC    X'920A0000000000000C000000'\n         DC    X'920A0000000000000C000000'\n         DC    X'920A00000000000078000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000019FFFC00000000'\n         DC    X'920A00000003FFFE00000000'\n         DC    X'920A000000000FE000000000'\n         DC    X'920A00000000000000000000'\n*              800 BYTES IN PLANE BITMAP\n         DC    X'93020000'           IMAGE END\n         DC    X'0A04'               SET COLOR\n         DC    X'9106000000500050'   IMAGE BEGIN\n* GREEN PLANE\n         DC    X'920A00000000078000000000'\n         DC    X'920A00000000203B00000000'\n         DC    X'920A0000000004C800000000'\n         DC    X'920A00000003525EA0000000'\n         DC    X'920A0000001495BEB4000000'\n         DC    X'920A000000ABEBBFE2000000'\n         DC    X'920A0000034DD53C0C000000'\n         DC    X'920A00000F7D7FF804000000'\n         DC    X'920A00007FFFBFFF80000000'\n         DC    X'920A0000FFFFFFFB00000000'\n         DC    X'920A0001FFDFFFFF00000000'\n         DC    X'920A0007FFFFFFFE00000000'\n         DC    X'920A000DFFFFFFFA50000000'\n         DC    X'920A000FFFFFFFF020000000'\n         DC    X'920A002FFFFFFEA040000000'\n         DC    X'920A001FFFFFF86040000000'\n         DC    X'920A007FFFFFFE30C0000000'\n         DC    X'920A00FFFFFFFC2780000000'\n         DC    X'920A01FFFFFFFE0800000000'\n         DC    X'920A00FFFFFFFD0800000000'\n         DC    X'920A02FFFFF7FF0000000000'\n         DC    X'920A03FFFFFFFE0000000000'\n         DC    X'920A04FFFFFFFC0000000000'\n         DC    X'920A043FFFFFFD0000000000'\n         DC    X'920A0E3FFFFFF20000000000'\n         DC    X'920A0E2FF7FFC00000000000'\n         DC    X'920A0C1FC7FC000000000000'\n         DC    X'920A1C1F87F9000000000000'\n         DC    X'920A181E53FC010000000000'\n         DC    X'920A101E00BC020000000000'\n         DC    X'920A001C00FE000000000000'\n         DC    X'920A001C08EE000000000000'\n         DC    X'920A0019009C000000000000'\n         DC    X'920A200C0008008000000000'\n         DC    X'920A2006408000E000000000'\n         DC    X'920A60040080014000000000'\n         DC    X'920A400000601C0000000000'\n         DC    X'920A00000360300000000000'\n         DC    X'920A000001E0F80000000000'\n         DC    X'920A000000C3F95000000000'\n         DC    X'920A000001F3F01800000000'\n         DC    X'920A00000069F2E360000000'\n         DC    X'920A0000003CE53DFC000000'\n         DC    X'920A0000003001007F100000'\n         DC    X'920A0000000C02001AC00000'\n         DC    X'920A00000007C0003D800000'\n         DC    X'920A0000000000400CC00000'\n         DC    X'920A00000000010000008000'\n         DC    X'920A00000000000184000000'\n         DC    X'920A0000000000078C000000'\n         DC    X'920A0000000000778E002000'\n         DC    X'920A0000000000FFCE000000'\n         DC    X'920A0000000000FFFC000000'\n         DC    X'920A0800000001FFFF000000'\n         DC    X'920A000000001FFFFF800000'\n         DC    X'920A000000003FFFFF800000'\n         DC    X'920A000000003FFFFFC00000'\n         DC    X'920A000000003FFFFFC00000'\n         DC    X'920A000000001FFFFFC00000'\n         DC    X'920A000000001FFFFFC00000'\n         DC    X'920A000000001FFFFF800000'\n         DC    X'920A000000000FC3FF000000'\n         DC    X'920A000000000C01FE000000'\n         DC    X'920A0000000000007C008000'\n         DC    X'920A00000000000078000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000018000000'\n         DC    X'920A00000000000000080000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000000000000000000'\n         DC    X'920A00000019FFFC00000000'\n         DC    X'920A00000003FFFE00000000'\n         DC    X'920A000000000FE000000000'\n         DC    X'920A00000000000000000000'\n*              800 BYTES IN PLANE BITMAP\n         DC    X'93020000'           IMAGE END\nSEGLEN   EQU   *-SEGDATA\nGLBVCSFL EQU   *-GLBVECSF\nGLBVECLN EQU   *-GLBVECTR\n         SPACE 2\n         DS    0H\n         TITLE 'GLOBAL 31-BIT AMODE INITIALIZATION PHASE'\n         USING INITIAL,R10\nINITIAL  L     R15,OPLKUPAD      POINT TO PRIMARY OPTION LOOKUP TABLE.\nOPTNINIT LA    R15,OPTBLEN(,R15) POINT TO NEXT TABLE ENTRY.\n         CLI   0(R15),255        END OF TABLE REACHED?\n         BE    OPTINITD          YES, OPLOOKUP TABLE NOW INITIALIZED.\n         SLR   R1,R1\n         IC    R1,0(,R15)        LOAD OPTION NAME.\n         AL    R1,ATHTBADR       POINT TO BYTE WITHIN AUTH TABLE.\n         NI    0(R1),X'F8'       RESET NON-CONFIGURABLE BITS.\n         OC    1(1,R15),0(R1)    SET CONFIGURABLE BITS IN OPLOOKUP.\n         CLI   0(R15),C'F'       ENTRY FOR OPTION \"F\"?\n         BNE   OPTNINIT          NO, GO PROCESS NEXT OPTION.\n         TM    FLCFACL,FLCFZARA  OPERATING IN 64-BIT MODE?\n         BNO   OPTNINIT          NO, GO PROCESS NEXT OPTION.\n         NI    1(R15),X'F7'      DISABLE OPTION \"F\" - NO PFTE ACCESS.\n         B     OPTNINIT          GO PROCESS NEXT OPTION.\nOPTINITD L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         TM    255(R15),X'10'    JAPANESE DISPLAY?\n         BZ    XLTINITD          NO, ALLOW LOWER CASE LETTERS.\n         OC    XLATETBL+C'A'-C' '(9),BLANKS\n         OC    XLATETBL+C'J'-C' '(9),BLANKS\n         OC    XLATETBL+C'S'-C' '(8),BLANKS\nXLTINITD L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         USING ASVT,R2\n         L     R0,ASVTMAXU       GET MAXUSER -\n         MHI   R0,ASENTLEN           TIMES ASENTLEN.\n         DROP  R2                ASVT.\n         L     R1,WORKSIZE       SIZE OF SAVE AREA + WORK AREA + BUFFR.\n         LA    R1,SMSWKLEN(,R1)  ADD SMS INTERFACE WORK AREA SIZE.\n         AR    R1,R0             GET TOTAL GETMAIN REQUIREMENTS.\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3              ROUND SIZE TO DOUBLEWORD MULTIPLE.\n         LR    R0,R1             LOAD INTO CORRECT REGISTER.\n         ST    R0,GMREG0         SAVE STORAGE SIZE AND SUBPOOL.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(24,64)\n         ST    R1,GMREG1         SAVE STORAGE ADDRESS.\n         XC    0(72,R1),0(R1)    CLEAR NEW SAVE AREA.\n         ST    R13,4(,R1)        COMPLETE CHAINS BETWEEN CALLER'S\n         ST    R1,8(,R13)                 AND IMPXA'S SAVE AREAS.\n         LR    R13,R1            ADDRESSABILITY\n         USING GOTAREA,R13            FOR GETMAINED STORAGE.\n         A     R1,WORKSIZE\n         LA    R1,SMSWKLEN(,R1)  ADD SMS INTERFACE WORK AREA SIZE.\n         ST    R1,JOBTBL         SAVE ADDRESS SPACE TABLE ADDRESS.\n         TIME  BIN               GET TIME-OF-DAY.\n         L     R1,OPLKUPAD\n         L     R5,4(,R1)\n         LA    R8,USAGEMSG-MAINMENU(,R5)\n         MVC   HOME(HDRLEN),SCRNHDR  INITIALIZE SCREEN HEADING LINE.\n         MVC   BUFFER(USAGELEN),USAGEHEX\n         TR    BUFFER(USAGELEN),TABLE\n         CLC   BUFFER(USAGELEN),0(R8)\n         BE    MSGOK\n         MVI   16(R1),X'FF'\nMSGOK    MVI   BUFFER,X'3C'      INDICATE EMPTY SCREEN TO SCRNPRNT.\n         L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R4\n         L     R5,CVTEORM        GET END-OF-REAL-MEMORY.\n         L     R11,CVTECVT       POINT TO THE ECVT.\n         DROP  R4                CVT.\n         SR    R4,R4\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   EORMGOOD          NO.\n         USING ECVT,R11\n         LM    R4,R5,ECVTEORM    GET END-OF-REAL-MEMORY.\n         DROP  R11               ECVT.\nEORMGOOD LA    R11,1             ENSURE IT IS SIZE,\n         ALR   R5,R11               NOT HIGH ADDRESS.\n         BC    12,REALGOOD       NO CARRY.\n         ALR   R4,R11\nREALGOOD SRDL  R4,12             CONVERT TO 4K FRAME COUNT.\n         ST    R5,FRAME#         NUMBER OF FRAMES FOR CPU.\n         SRDL  R4,8              CONVERT TO MEGABYTES.\n         L     R11,OPLKUPAD\n         L     R11,ADDRMON+4-OPLOOKUP(,R11)\n         USING ADDRSPCS,R11\n         CVD   R5,WORK\n         OC    WORK(5),WORK      SCALED ENOUGH?\n         BZ    MEGAGIGS          YES\n         SRDL  R4,10             CONVERT TO GIGABYTES.\n         CVD   R5,WORK\n         MVI   REALVARS+73,C'G'  UPDATE SCALE INDICATOR.\nMEGAGIGS MVC   REALVARS+67(6),ED5\n         ED    REALVARS+67(6),WORK+5\n         DROP  R11               ADDRSPCS.\n         L     R11,OPLKUPAD\n         L     R11,FRAMEMON+4-OPLOOKUP(,R11)\n         USING FRAMES,R11\n         L     R3,RCEADDR        POINT TO RSM CNTRL & ENUMERATION AREA.\n         USING RCE,R3\n         L     R5,RCETOTPI       GET NUMBER OF PAGES PAGED IN.\n         AL    R5,RCETOTPO       ADD NUMBER OF PAGES PAGED OUT.\n         AL    R5,RCEVIOPI       ADD NUMBER OF VIO PAGES PAGED IN.\n         AL    R5,RCEVIOPO       ADD NUMBER OF VIO PAGES PAGED OUT.\n         AL    R5,RCESWPPI       ADD NUMBER OF PAGES SWAPPED IN.\n         AL    R5,RCESWPPO       ADD NUMBER OF PAGES SWAPPED OUT.\n         ST    R5,PAGIOCNT       SAVE CURRENT TOTAL.\n*        MVC   RECLMCNT,52(R3)   SAVE CURRENT TOTAL OF PAGES RECLAIMED.\n         L     R5,RCEESWRT       GET NUMBER OF PAGE WRITES TO E-STORE.\n         A     R5,RCEESREA       ADD NUMBER OF PAGE READ FROM E-STORE.\n         ST    R5,ESTOREIO       SAVE CURRENT TOTAL.\n         ST    R0,PAGETIME       STORE CURRENT CENTISECONDS.\n         DROP  R11               FRAMES.\n         L     R11,OPLKUPAD\n         L     R11,PAGDSMON+4-OPLOOKUP(,R11)\n         USING PAGEDS,R11\n*        L     R3,RCEADDR        POINT TO RSM CNTRL & ENUMERATION AREA.\n         MVC   NPIN,RCETOTPI     GET CURRENT NON-VIO PAGE-IN COUNT.\n         MVC   NPOUT,RCETOTPO    GET CURRENT NON-VIO PAGE-OUT COUNT.\n         MVC   VAMI,RCEVIOPI     GET CURRENT VIO PAGE-IN COUNT.\n         MVC   VAMO,RCEVIOPO     GET CURRENT VIO PAGE-OUT COUNT.\n         MVC   SPIN,RCESWPPI     GET CURRENT SWAP-IN PAGE COUNT.\n         MVC   SPOUT,RCESWPPO    GET CURRENT SWAP-OUT PAGE COUNT.\n         MVC   NPMOV,RCEPAGMV    GET CURRENT PAGE MOVEMENT COUNT.\n         MVC   NPREC,RCETOTRC    GET CURRENT RECLAIMED PAGE COUNT.\n         ST    R0,PGPRVTIM       STORE CURRENT CENTISECONDS.\n         DROP  R3                RCE.\n         SLR   R4,R4             ZERO DATA SET COUNTER.\n         L     R5,PARTADDR       POINT TO PAGING ACTIVITY REF. TABLE.\n         LA    R8,80(,R5)        POINT TO THE FIRST PARTE.\n         L     R3,IMCOMADR       POINT TO THE IMP/XA COMMON AREA.\n         USING IMPXACOM,R3\n         LA    R3,PGDSTABL       POINT TO FIRST IMPXA TABLE ENTRY.\n         DROP  R3                IMPXACOM.\n         MVC   WORK2(4),8(R5)    COPY USED PARTE COUNT.\n         LH    R1,WORK2          USED PARTE COUNT IS A HALFWORD FIELD.\n         ST    R1,WORK2          CONVERT IT TO A FULLWORD.\n         B     FSTPARTI\nNXTPARTI AH    R8,PARTELEN       POINT TO NEXT PART ENTRY.\n         LA    R3,12(,R3)        POINT TO NEXT COUNTER SAVE AREA ENTRY.\nFSTPARTI LA    R4,1(,R4)         INCREMENT USED PARTE COUNTER.\n         C     R4,WORK2          END OF USED PART ENTRIES?\n         BH    ASIDINIT          YES.\n         TM    9(R8),X'80'       IS THIS PARTE IN USE?\n         BO    NXTPARTI          NO, GET THE NEXT ONE.\n         L     R7,28(,R8)        POINT TO FIRST IORB.\n         USING IORB,R7\n         MVC   0(8,R3),IORTREQ   SAVE CURRENT FIGURES (INCL. IORSION).\n         ST    R0,8(,R3)         SAVE CURRENT TIME FOR NEXT TIME.\n         B     NXTPARTI          PROCESS IT.\n         DROP  R11,R7            PAGESDS, IORB.\n         SPACE\n         USING ASENTRY,R11\nASIDINIT L     R11,JOBTBL        ADDRESS TABLE ENTRY FOR THIS ASID.\n         L     R2,ASVTADDR       GET ASVT ADDRESS.\n         USING ASVT,R2\n         L     R3,ASVTMAXU       MAXIMUM NUMBER OF ENTRIES.\n         LA    R4,ASVTENTY       FIRST ASVT ENTRY.\n         B     FRSTASID          PROCESS FIRST ADDRESS SPACE.\nNEXTASID LA    R4,4(,R4)         BUMP BY FOUR.\n         LA    R11,ASENTLEN(,R11) POINT TO NEXT TABLE ENTRY.\nFRSTASID ST    R0,TOD            STORE TIME-OF-DAY.\n         XC    CPUSOFAR(12),CPUSOFAR ZERO COUNTS FOR NON-EXISTENT ASID.\n         ICM   R5,15,0(R4)       LOAD THE PTR.\n         BM    ASIDEND           FINISHED WITH NON-EXISTENT MEMORY.\n         USING ASCB,R5\n         MVC   XCPSOFAR,ASCBIOSC SAVE THE I/O SERVICE COUNT.\n         MVC   IOCSOFAR,ASCBDCTI SAVE THE I/O CONNECT TIME.\n         LM    R8,R9,ASCBEJST    LOAD UP EJST (CPU TIME - TASK TYPE).\n         SRDL  R8,12             GET MICROSECONDS.\n         LM    R14,R15,ASCBSRBT  LOAD UP SRB TIME.\n         SRDL  R14,12            GET MICROSECONDS.\n         ALR   R9,R15            ADD TOGETHER (LOW ORDER).\n         ST    R9,CPUSOFAR       STORE CPU TIME THIS STEP USED SO FAR.\n         ICM   R7,15,ASCBOUXB    POINT TO OUXB.\n         BZ    ASIDEND           NO OUXB TO CHECK.\n         USING OUXB,R7\n         L     R8,OUXBPIN        GET PRIVATE PAGE-IN COUNT.\n         A     R8,OUXBPOUT       ADD PRIVATE PAGE-OUT COUNT.\n         A     R8,OUXBVAMI       ADD VIO PAGE-IN COUNT.\n         A     R8,OUXBVAMO       ADD VIO PAGE-OUT COUNT.\n         A     R8,OUXBSPIN       ADD SWAP PAGE-IN COUNT.\n*        A     R8,OUXBSPOT       ADD SWAP PAGE-OUT COUNT.\n         A     R8,OUXBCAPI       ADD COMMON PAGE-IN COUNT.\n         C     R7,ASCBOUXB       STILL THE RIGHT OUXB?\n         BNE   DMYPGCNT          NO, A SWAP JUST HAPPENED.\n         ST    R8,ASPAGECT       YES, SAVE TOTAL PAGE TRANSFER COUNT.\n         LTR   R8,R8             ZERO FROM DUMMY OUXB?\n         BNZ   ASIDEND           NO, NON-ZERO COUNT SHOULD BE ACCURATE.\nDMYPGCNT MVI   ASPAGECT,X'7F'    FLAG SWAPPED-OUT STATUS.\nASIDEND  BCT   R3,NEXTASID       BRANCH BACK TO LOOK AT NEXT MEMORY.\n         DROP  R11,R7,R5,R2      ASENTRY, OUXB, ASCB, ASVT.\n         SPACE\n         L     R11,OPLKUPAD\n         L     R11,DMNMON+4-OPLOOKUP(,R11)\n         USING DOMAINS,R11\n         LA    R11,COLLINIT\n         DROP  R11               DOMAINS.\n         USING COLLINIT,R11\n         ST    R0,SWAPTIME       SAVE TIME-OF-DAY FOR SWAP RATE CALC.\n         L     R2,RMCTADDR       POINT TO RESOURCE MNGR CONTROL TABLE.\n         USING RMCT,R2\n         L     R2,RMCTRMCA       POINT TO RESOURCE MNGR CONTROL AREA.\n         DROP  R2                RMCT.\n         USING RMCA,R2\n         LA    R3,RMCASRC        POINT TO FIRST SWAP REASON COUNTER.\n         LA    R4,17             NUMBER OF SWAP REASONS.\n         SLR   R5,R5             CLEAR FOR ACCUMULATION.\nSWAPLOOP A     R5,0(,R3)         ADD COUNT FOR THIS SWAP REASON.\n         LA    R3,4(,R3)         POINT TO NEXT COUNTER.\n         BCT   R4,SWAPLOOP\n         ST    R5,TOTLSWAP       SAVE TOTAL SWAP COUNT.\n         MVC   LOGSWAP,288(R2)   SAVE TOTAL LOGICAL SWAP COUNT.\n         MVC   TPUTSWAP,RMCATOSC SAVE TPUT SWAP COUNT.\n         MVC   TGETSWAP,RMCATISC SAVE TGET SWAP COUNT.\n         DROP  R11,R2            COLLINIT, RMCA.\n         SPACE\n         L     R1,PSATOLD        POINT TO THE CURRENT TCB.\n         USING TCB,R1\n         ICM   R1,15,TCBJSCB     POINT TO THE CURRENT JSCB.\n         BZ    NOPSCB            WHAT HAPPENED THERE?\n         DROP  R1                TCB.\n         USING IEZJSCB,R1\n         ICM   R1,15,JSCBPSCB    POINT TO THE TSO USER'S PSCB.\n         BZ    NOPSCB            THERE IS NO PSCB.\n         DROP  R1                IEZJSCB.\n         USING PSCB,R1\n         MVC   COPYATR1,PSCBATR1 COPY FIRST BYTE OF USER ATTRIBUTES.\n         DROP  R1                PSCB.\n         TM    COPYATR1,PSCBCTRL+PSCBACCT   OPER AND ACCT?\n         BNO   NOPSCB            NO.\n         MVI   VIPMODE,C'*'      YES, AUTOMATIC COMMAND AUTHORITY.\nNOPSCB   NI    COPYATR1,X'F0'    RESET UNWANTED BITS.\n         TM    HEX,X'80'         EXPIRED?\n         BZ    HEXOKAY           YES.\n         CLC   SECTCT(7),SECJSCB EXPIRED?\n         BL    TSTDAUTH          YES.\nHEXOKAY  DS    0H\n         TESTAUTH FCTN=1         TEST FOR APF AUTHORIZATION.\n         LTR   R15,R15           AUTHORIZED?\n         BNZ   TSTDAUTH          NO.\n         OI    MODESW2,AUTH      YES, FLAG SAME.\n         OI    COPYATR1,X'02'    ENABLE APF DEPENDENT OPTIONS.\nTSTDAUTH DS    0H\n         L     R4,CREIOTAD       GET DEVICE TABLE CREATION ROUTINE EP.\n         BASR  R14,R4            CREATE DEVICE MEASUREMENT TABLE.\n         SPACE\n         L     R11,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R11\n         GETMAIN VRU,LV=(1024*1024,256*1024),SP=SUBPOOL,LOC=(31,64)\n         STM   R0,R1,WINBUFFL    SAVE WINDOW BUFFER SIZE AND ADDRESS.\n         AR    R1,R0             POINT PAST WINDOW BUFFER.\n         AHI   R1,-512           BACK UP A BIT.\n         ST    R1,WINEND         SAVE \"SAFETY STOPPER\" ADDRESS.\n         DROP  R11               WNDWMNGR.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZ    INITEXCP          NO, PERFORM EXCP INITIALIZATION.\n         STAX  MF=(E,STAXLIST)   SET AN ATTENTION EXIT.\n         SPACE\n         TM    TERMATTR+3,X'01'  IS THE QUERY BIT ON?\n         BZ    INITDONE          NO, CAN'T DO A QUERY, ALL READY TO GO.\n         SPACE\n         LA    R1,RESETAID       YES, RESET THE TERMINAL AID AND\n         LA    R0,L'RESETAID          WAIT TILL THIS IS DONE\n         ICM   R1,8,=X'03'            BEFORE PROCEEDING.\n         TPUT  (1),(0),R         TPUT FULLSCR,WAIT,NOHOLD.\n         TPG   QUERY,L'QUERY,NOEDIT,WAIT\n         LA    R3,2              SET A LOOP LIMIT.\nQRYREGET LA    R1,BUFFER         TEMPORARY TGET BUFFER FOR RESPONSE\n         LA    R0,1024                     FROM READ PARTITION.\n         ICM   R1,8,=X'81'       FLAGS FOR TGET ASIS,WAIT.\n         TGET  (1),(0),R         TGET ASIS,WAIT.\n         CLI   BUFFER,X'88'      QUERY RESPONSE AID?\n         BE    QUERYGOT          YES, GO PROCESS IT.\n         BCT   R3,QRYREGET       NO, ASSUME A TIMING GLITCH SO RETRY.\n         B     INITDONE          ASSUME QUERY NOT FUNCTIONAL.\nQUERYGOT OI    GRAFLAGS,DIDQRY   REMEMBER THAT QUERY WAS PERFORMED.\n         LR    R3,R1             YES, COPY TGET DATA LENGTH.\n         SLR   R4,R4             CLEAR FOR INSERTS.\n         LA    R5,BUFFER+1       POINT PAST THE AID.\n         BCT   R3,QUERYPRS       DECREMENT FOR AID.\n         B     INITDONE          JUST IN CASE.\nQUERYPRS CLI   2(R5),X'81'       QUERY REPLY ID?\n         BE    QVFYCONT          YES, LOOKS LIKE IT.\nQBADSUBF LA    R5,1(,R5)         NO, POINT TO NEXT BYTE.\n         BCT   R3,QUERYPRS       DECREMENT LENGTH AND TRY AGAIN.\n         B     INITDONE          JUST IN CASE.\nQVFYCONT TM    3(R5),X'80'       QCODE IN X'80' TO X'FF' RANGE?\n         BZ    QBADSUBF          NO, PROBABLY INVALID.\n*        CLI   0(R5),0           SUB-FIELD LENGTH LESS THAN 256?\n*        BNE   QBADSUBF          NO, PROBABLY INVALID.\n         CLI   3(R5),X'86'       QUERY REPLY COLOUR ID?\n         BE    QUERYCLR          YES, PROCESS COLOUR SUPPORT DATA.\n         CLI   3(R5),X'87'       QUERY REPLY HIGHLIGHTING ID?\n         BE    QUERYHLT          YES, PROCESS HIGHLIGHT SUPPORT DATA.\n         CLI   3(R5),X'85'       QUERY REPLY SYMBOL SETS ID?\n         BE    QUERYSYM          YES, PROCESS SYMBOL SETS SUPPORT DATA.\n         CLI   3(R5),X'93'       QUERY REPLY PC ATTACHMENT FACILITY ID?\n         BE    QUERYCMP          YES, PROCESS PC/PS2 3270 EMULATION.\n         CLI   3(R5),X'A6'       QUERY REPLY IMPLICIT PARTITION ID?\n         BE    QUERYIMP          YES, PROCESS IT.\n         CLI   3(R5),X'81'       QUERY REPLY USABLE AREA ID?\n         BE    QUERYUSE          YES, PROCESS IT.\n         CLI   3(R5),X'80'       QUERY REPLY SUMMARY ID?\n         BE    QUERYSUM          YES, PROCESS IT.\n         CLI   3(R5),X'B4'       QUERY REPLY GRAPHIC COLOUR?\n         BE    QUERYVEC          YES, PROCESS IT.\nNXTSBFLD ICM   R4,3,0(R5)        NO, LOAD SUB-FIELD LENGTH.\n         SR    R3,R4             SUBTRACT IT FROM TGET DATA LENGTH.\n         BZ    INITDONE          END OF QUERY, INITIALIZATION NOW DONE.\n         BM    QRYREGET          ASSUME REST OF DATA IN NEXT TGET.\n         AR    R5,R4             POINT TO NEXT SUB-FIELD.\n         B     QUERYPRS          EXAMINE IT.\nQUERYCLR CLI   5(R5),8           AT LEAST EIGHT COLOUR PAIRS?\n         BL    NXTSBFLD          NO, NO 7-COLOUR SUPPORT.\n         CLC   8(14,R5),=CL14'11223344556677' YES, ALL 7 SUPPORTED?\n         BNE   NXTSBFLD          NO, PROBABLY A MONOCHROME TERMINAL.\n         OI    GRAFLAGS,COLR     YES, FLAG COLOUR SUPPORT CERTAINTY.\n         B     NXTSBFLD          EXTENDED CAPABILITY NOW FLAGGED.\nQUERYHLT CLI   4(R5),4           AT LEAST FOUR HIGHLIGHTING PAIRS?\n         BL    NXTSBFLD          NO, SO DO NOT FLAG IT.\n         CLC   7(6,R5),=CL6'112244' YES, BLINK, REVERSE, UNDERSCORE OK?\n         BNE   NXTSBFLD          NO.\n         OI    GRAFLAGS,HLIT     YES, FLAG HILIGHTING SUPPORT VERACITY.\n         NI    MODESW2,255-COL2-COL4 ALSO RESTORE 7-COLOUR MODE.\n         B     NXTSBFLD          EXTENDED CAPABILITY NOW FLAGGED.\nQUERYSYM OI    GRAFLAGS,CMP      FLAG IBM COMPATIBILITY.\n         TM    4(R5),X'80'       IS GRAPHICS ESCAPE SUPPORTED?\n         BZ    GOTGEBIT          NO, SO DO NOT FLAG IT.\n         OI    GRAFLAGS,GE+GEOK  YES, FLAG GE SUPPORT CERTAINTY.\nGOTGEBIT MVC   CHARSIZE,6(R5)    SAVE CHARACTER MATRIX SIZE.\n         TM    4(R5),X'20'       IS LOAD PROGRAMMED SYMBOLS SUPPORTED?\n         BNO   NXTSBFLD          NO, CAN'T DO THE SNAZZY LOGO.\n         TM    8(R5),X'40'       FORMAT TYPE 1 SUPPORTED BY TERMINAL?\n         BNO   NXTSBFLD          NO, CAN'T DO THE SNAZZY LOGO.\n         SLR   R0,R0\n         SLR   R1,R1\n         IC    R0,12(,R5)        GET SYMBOL SET DESCRIPTOR LENGTH.\n         LA    R15,13(,R5)       POINT TO FIRST DESCRIPTOR.\n         ICM   R1,3,0(R5)        GET LENGTH OF WHOLE SUBFIELD.\n         AHI   R1,-13            GET LENGTH OF ALL DESCRIPTORS.\n         BNP   NXTSBFLD          IN CASE NO DESCRIPTORS.\nSYMSTGID CR    R0,R1             FOUND LAST RWS?\n         BE    GOTRWSTG          YES, LOOK AT IT.\n         SR    R1,R0             NO, SUBTRACT LENGTH.\n         BNP   NXTSBFLD          HANDLE END OF SUB-FIELD.\n         AR    R15,R0            POINT TO NEXT DESCRIPTOR.\n         B     SYMSTGID          LOOK AT IT.\nGOTRWSTG TM    1(R15),X'80'      LOADABLE TERMINAL STORAGE?\n         BZ    NXTSBFLD          NO, FORGET ALL THIS.\n         OI    GRAFLAGS,LOGO     YES, LOOKS GOOD.\n         MVC   STGID1,0(R15)     SET RWS ID.\n         TM    1(R15),X'40'      TRIPLE-PLANE?\n         BZ    LOGOMONO          NO, SINGLE-PLANE.\n         TM    4(R5),X'10'       IS LPS EXTENSION SUPPORTED?\n         BNO   LOGOMONO          NO, CAN'T LOAD COLOUR PLANES.\n         OI    MODESW,TRIP       CAN USE MULTI-COLOUR SYMBOLS.\nLOGOMONO CLI   2(R15),X'CB'      GOT IMP/XA LOGO SYMBOLS?\n         BE    NXTSBFLD          PROBABLY, SO DON'T RE-LOAD THEM.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZ    LOGOEXCP          NO, USE EXCP.\n         TM    MODESW,TRIP       TRIPLE-PLANE SYMBOLS AVAILABLE?\n         BO    LOGOCOLR          YES, GO LOAD THEM.\n         TPUT  PSBWSF,PSBLEN,NOEDIT,WAIT\n         B     LOGOTEST\nLOGOCOLR LA    R1,STGID3         SET RWS ID INTO STRUCTURED FIELDS.\n         MVC   0(1,R1),STGID1\n         MVC   ADDPLNLN(1,R1),0(R1)\n         MVC   ADDPLNLN+ADDPLNLN(1,R1),0(R1)\n         TPUT  PSFWSF,PSFLEN,NOEDIT,WAIT\nLOGOTEST LTR   R15,R15           HOW DID IT GO?\n         BZ    NXTSBFLD          NO WORRIES, PSB NOW LOADED.\n         NI    GRAFLAGS,255-LOGO NOT SO GOOD, BETTER NOT USE PSB.\n         B     NXTSBFLD          PROGRAM SYMBOLS SUB-FIELD NOW DONE.\nLOGOEXCP NI    MODESW,255-TRIP   NO TRIPLE-PLANE LOGO WITH EXCP.\n         LA    R15,16            SET ENTRY CODE OF SIXTEEN.\n         L     R11,EXCPIOAD      GET EXCP I/O ROUTINE ENTRY POINT.\n         BASSM R14,R11           USE EXCP TO LOAD PROGRAM SYMBOLS.\n         B     LOGOTEST\nQUERYIMP TM    MODESW3,TSU       TIME SHARING USER?\n         BO    QUERYCMP          YES, USE GTSIZE FOR SCREEN SIZE.\n         CLI   1(R5),17          LENGTH LESS THAN SEVENTEEN?\n         BL    QUERYCMP          YES, IGNORE.\n         CLI   6(R5),11          PARAMETER LENGTH LESS THAN ELEVEN?\n         BL    QUERYCMP          YES, IGNORE.\n         CLI   7(R5),1           IMPLICIT PARTITION SIZES?\n         BNE   QUERYCMP          NO, IGNORE.\n*        CLC   EIGHTY,9(R5)      PRIMARY SIZE EIGHTY COLUMNS?\n*        BNE   QUERYCMP          NO, IGNORE.\n         MVC   TERMSIZE(1),12(R5)          COPY PRIMARY LINES.\n         MVC   TERMSIZE+1(1),10(R5)        COPY PRIMARY COLUMNS.\n         MVC   TRMALTSZ(1),16(R5)          COPY ALTERNATE LINES.\n         MVC   TRMALTSZ+1(1),14(R5)        COPY ALTERNATE COLUMNS.\nQUERYUSE TM    4(R5),X'01'       14-BIT SCREEN ADDRESSING SUPPORTED?\n         BZ    NXTSBFLD          NO.\n         OI    MODESW,ADR14      YES, REMEMBER THIS.\n         B     NXTSBFLD          EXTENDED CAPABILITY NOW FLAGGED.\nQUERYSUM SLR   R14,R14\n         LA    R2,4(,R5)         POINT TO FIRST QCODE IN LIST.\n         ICM   R14,3,0(R5)       GET LENGTH OF WHOLE SUBFIELD.\n         LA    R0,4\n         SR    R14,R0            GET NUMBER OF QCODES IN LIST.\nQRYSUMLP CLI   0(R2),X'B2'       LINE TYPE?\n         BE    QUERYVEC          YES, SEEMS VECTOR GRAPHICS SUPPORTED.\n         LA    R2,1(,R2)         POINT TO NEXT QCODE.\n         BCT   R14,QRYSUMLP      CHECK IT.\n         B     NXTSBFLD          LOOK FOR NEXT QUERY REPLY SUB-FIELD.\nQUERYVEC OI    MODESW,VCTR       FLAG NATIVE 3270 VECTOR GRAPHICS.\n         B     NXTSBFLD          EXTENDED CAPABILITY NOW FLAGGED.\nQUERYCMP OI    GRAFLAGS,CMP      FLAG IBM COMPATIBILITY.\n         B     NXTSBFLD          EXTENDED CAPABILITY NOW FLAGGED.\nINITEXCP SLR   R15,R15           SET THE ENTRY CODE OF ZERO.\n         L     R11,EXCPIOAD      GET EXCP I/O ROUTINE ENTRY POINT.\n         BASSM R14,R11           OPEN THE EXCP FILE.\nINITDONE MVI   BUFFER,X'3C'      INDICATE EMPTY SCREEN TO SCRNPRNT.\n         CLC   EIGHTY,COLUMNS+2  IN EIGHTY COLUMN MODE?\n         BE    INITSIZE          YES, USE CURRENT SCREEN DIMENSIONS.\n         MVC   OLDSIZE,LINES     NO, SAVE CURRENT SCREEN DIMENSIONS.\n         LA    R0,24             GET NEW NUMBER OF LINES.\n         LA    R1,80             GET NEW NUMBER OF COLUMNS.\n         STM   R0,R1,LINES       SAVE FOR FUTURE REFERENCE.\n         CLI   TERMSIZE+1,80     IS PRIMARY WIDTH 80 COLUMNS?\n         BE    PRIM80OK          YES, GOOD.\n         TPUT  WARNMSG,L'WARNMSG NO, ISSUE WARNING.\n         B     INITSIZE\nPRIM80OK CLI   TERMSIZE,24       IS PRIMARY DEPTH MORE THAN 24 LINES?\n         BNH   *+10              NO.\n         MVC   LINES+3(1),TERMSIZE\n         CLI   TRMALTSZ+1,80     IS ALTERNATE WIDTH 80 COLUMNS?\n         BNE   INITSIZE          NO, MIGHT PROVE TO BE A PROBLEM.\n         CLI   TRMALTSZ,24       IS ALTERNATE DEPTH MORE THAN 24 LINES?\n         BNH   INITSIZE          NO.\n         MVC   LINES+3(1),TRMALTSZ\n         OI    MODESW3,EWA       FLAG NEED OF ERASE/WRITE ALTERNATE.\n         MVI   CLR+1,X'7E'       USE ERASE WRITE ALTERNATE.\nINITSIZE LA    R5,124            GET MAXIMUM SUPPORTED LINES.\n         C     R5,LINES          IS SCREEN TOO BIG FOR THIS?\n         BL    LINECTOK          YES, USE MAXIMUM.\n         L     R5,LINES          NO, USE SCREEN LINE COUNT.\nLINECTOK BCTR  R5,0              ALLOW FOR HEADING LINE BEFORE BUFFER.\n         LA    R1,LL             GET THE LINE LENGTH.\n         MR    R4,R1             GET THE DETAIL LINE BUFFER SIZE.\n         LA    R1,BUFFER(R5)     POINT PAST \"STANDARD\" SCREEN BUFFER.\n         ST    R1,PAGEND         SAVE FOR LATER TESTS.\n         CLI   INCHARS,C' '      ANY INITIAL COMMAND SPECIFIED?\n         BNH   FINDOPTN          NO, GO STRAIGHT TO OPTION LOOK-UP.\n         STIMER WAIT,BINTVL=TEN  YES, WAIT A TICK TO AVOID S0C9.\n         B     EXAMINEC          PROCESS INITIAL REQUEST.\n         DROP  R10               INITIAL.\n         TITLE 'GLOBAL INITIALIZATION - VARIABLES AND CONSTANTS'\nCNFGTOKN DC    XL48'00'         IOC TOKEN AREA.\nWARNMSG  DC    C'WARNING: PRIMARY SCREEN WIDTH IS NOT 80 COLUMNS'\nSCRNHDR  DC    X'C11140401B404E132841F42842F400001BF8C62842F7'\n         DC    CL71' ',X'2841F42842F2',C' ZZ9%'\nHDRLEN   EQU   *-SCRNHDR\nRESETAID DC    X'27F1C3'        ESCAPE, WRITE, WCC.\nQUERY    DC    X'F3000501FF02'  WRITE STRUCTURED FIELD, QUERY.\n*UERY    DC    X'F300064000F1C3000501FF02' WSF, 3270DS, WRT+WCC, QUERY.\nPSBWSF   DC    X'F3'            WSF TO LOAD SYMBOLS INTO PSB.\nSYMFIELD DC    AL2(ADDSYMLN)    STRUCTURED FIELD LENGTH. (SINGLE-PLANE)\n         DC    X'0641CB41'      LPS-ID,BASIC+CLR+TYP1,LCID,FIRST-SYM.\nSTGID1   DC    X'03'            READ/WRITE STORAGE ID.\n         DC    XL18'00000003061E37FFFF010000000000000000'  X'41'\n         DC    XL18'07800000000F1F3FFFFFFFFF7F3F1B0C0402'  X'42'\n         DC    XL18'1FF80000FFFFFFFFFFFFFFFFFFFFFF3E3030'  X'43' \"ROO\"\n         DC    XL18'3FF8000000C0F0F8FEFEFFFFFDF080000000'  X'44'\n         DC    XL18'00700000000000000000000080C0E070381C'  X'45'\n         SPACE\n         DC    XL18'000000000000000001070E38C00000000000'  X'46'\n         DC    XL18'03003030303070E0C0000000000000000000'  X'47' ROO24\n         DC    XL18'000007010000000000000000000000000000'  X'48'\n         DC    XL18'40000080FC00000000000000000000000000'  X'49'\n         SPACE\n         DC    XL18'00001B0C0402000000000000010700000000'  X'4A'\n         DC    XL18'8030FF3E30303030303070E0C00000000000'  X'4B'\n         DC    XL18'800000000000000000000000000000000000'  X'4C' ROO32\n         DC    XL18'0000E070381C070100000000000000000000'  X'4D'\n         DC    XL18'0400000000000080FC000000000000000000'  X'4E'\n         DC    XL18'00000E38C000000000000000000000000000'  X'4F'\n         SPACE\n         DC    XL18'000000000000000000000000000000000000'  X'50'\n         DC    XL18'000000000000000000000000000000000000'  X'51'\n         DC    XL18'000000000000000000000000000000000000'  X'52'\n         DC    XL18'000000000000000000000000000000000000'  X'53' AUST.\n         DC    XL18'000000000000000000000000000000000000'  X'54'\n         DC    XL18'000000000000000000000000000000000000'  X'55'\n         DC    XL18'000000000000000000000000000000000000'  X'56'\n         SPACE\n         DC    XL18'FF8011B2B252531212121200000000000000'  X'57'\n         DC    XL18'88008F484848C84848484F00000000000000'  X'58' MADE\n         DC    XL18'7F003E2020203C2020203E00000000000000'  X'59'\n         SPACE\n         DC    XL18'F00000002929C70101060000000000000000'  X'5A'  BY\n         SPACE\n         DC    XL18'1C003C428100000081836519000000000000'  X'5B'\n         DC    XL18'000000000000002E31202020000000000000'  X'5C' GREG\n         DC    XL18'010000000000003C42FE403F000000000000'  X'5D'\n         DC    XL18'008000000000003A46C23E02463800000000'  X'5E'\n         SPACE\n         DC    XL18'FFC0F008040408F203020202000000000000'  X'5F'\n         DC    XL18'04000000000800C8390A0C08000000000000'  X'60' PRICE\n         DC    XL18'04000000000000F089838578000000000000'  X'61'\n         DC    XL18'05400000000000E010F000E0000000000000'  X'62'\nADDSYMLN EQU   *-SYMFIELD\nPSBLEN   EQU   *-PSBWSF\n         SPACE\n         LTORG\n         SPACE\nPSFWSF   DC    X'F3'            WSF TO LOAD SYMBOLS INTO PSF.\n*  BLUE PLANE\nPLNFIELD DC    AL2(ADDPLNLN)    STRUCTURED FIELD LENGTH. (TRIPLE-PLANE)\n         DC    X'06C1CB41'      LPS-ID,EXT+CLR+TYP1,LCID,FIRST-SYM.\nSTGID3   DC    X'03'            READ/WRITE STORAGE ID.\n         DC    X'060009100001'  LENE,FLAGS,WIDTH,DEPTH,SUBSN,PLANE.\n         DC    X'000100000000000000000000080008400000'   X'41'\n         DC    X'000000000003073A65840000010000000000'   X'42'\n         DC    X'1600010A3FFFB64122280400000000000000'   X'43'\n         DC    X'FA00FCFFFFFF488858000000000000012BF3'   X'44'\n         DC    X'704F00E0A0D65205F4DE1F3F2F7F6BF7EFEF'   X'45'\n         DC    X'036F00000000404050C8F4ABEDFDF7FDFBDF'   X'46'\n         DC    X'0015000000000000000000000080A060D068'   X'47'\n         DC    X'0000000000020200020202020502074B1F57'   X'48'\n         DC    X'01FE00000000000000000040808186878F8F'   X'49'\n         DC    X'083F00000403ECF000000040C0C060FAF8B8'   X'4A'\n         DC    X'1001000000008000000000033F6F3F3F1F1F'   X'4B'\n         DC    X'00FF397B3E5E1F3F7F5FBFFFFFFFDFBFFFFF'   X'4C'\n         DC    X'BFFFCF1FFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   X'4D'\n         DC    X'FFFFFFF7FEFFFFFFFFFFFFFFFFFFFFFFFFFF'   X'4E'\n         DC    X'FFFFD45EF0FFAAFFB6FDF7FFFAFFF7FFFEFD'   X'4F'\n         DC    X'0A2F000000000000008080C0A080A060D040'   X'50'\n         DC    X'00002D1F2B0B2FDFBDEF971F7717AF1B370F'   X'51'\n         DC    X'FFF79BCFE6EFFFFFFFFFFFFFFFFFFFFFFFFF'   X'52'\n         DC    X'FFFFFBFFFBFBFCE4F0F9F0FCFEFEFFFFFFFF'   X'53'\n         DC    X'7F4F3F7FFFFFFEFCF0C0C06031FF3F83FFFF'   X'54'\n         DC    X'F4FFFFEFE3D77FFFFFD5FCA358DFBFFFF7DF'   X'55'\n         DC    X'FFDFFFFFFFFFFFFFFFFFFF2780E0F9F0FCFF'   X'56'\n         DC    X'FFE7FFFFFFFFFFFFFFFFFFFFFF779F3F9FFF'   X'57'\n         DC    X'FFFFFBFFF6FFFEFBFEFFFDFFFFEFFFFBFD7E'   X'58'\n         DC    X'7B7FF088D0F0A0E8B0D0F0A068D060509060'   X'59'\n         DC    X'00003B673D270F0507050A02010001000000'   X'5A'\n         DC    X'EED4FFFFFFFF7FFFFFFFFF7FEBBFDF3F57AF'   X'5B'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   X'5C'\n         DC    X'FFFFFFFFFFFFFFFFFEFCFCFCFEFEFEFFFFFF'   X'5D'\n         DC    X'FC01FFFFF1E0E0C000000000000000077FFF'   X'5E'\n         DC    X'80079E1C1C0C0000000000000000000080E0'   X'5F'\n         DC    X'C801FFFFFFFFFF7F3F3F1F1F1F1F3F7FFFF5'   X'60'\n         DC    X'FFB5FDFBDEFBFED6FFFAF6DD72DAB46AA054'   X'61'\n         DC    X'ECA0C050A080408000804000000000000000'   X'62'\n         DC    X'00003B150D0B010001000000000000000000'   X'63'\n         DC    X'6C00FFFFBFFF5F7AAF552A0B040100000000'   X'64'\n         DC    X'FEE8FFFFFFFFFFFFFFDFB66F6B9DBF3F0100'   X'65'\n         DC    X'FFDEFFFFFFFFFFFFFFFF7FD5BF55FFFFFF00'   X'66'\n         DC    X'FF4CE1FFF9FFFFFBFFFDFBD6B0DA00C00000'   X'67'\n         DC    X'DDA0FFDBEB9B6AFAADE82080000000000000'   X'68'\n         DC    X'7400E0806080400000000000000000000000'   X'69'\nADDPLNLN EQU   *-PLNFIELD\n*   RED PLANE\n         DC    AL2(ADDPLNLN)    STRUCTURED FIELD LENGTH. (TRIPLE-PLANE)\n         DC    X'06C1CB41'      LPS-ID,EXT+CLR+TYP1,LCID,FIRST-SYM.\n         DC    X'03'            READ/WRITE STORAGE ID.\n         DC    X'060009100002'  LENE,FLAGS,WIDTH,DEPTH,SUBSN,PLANE.\n         DC    X'000000000000000000000000000000000000'   X'41'\n         DC    X'000000000000000000000000000000000000'   X'42'\n         DC    X'00000002003500000000000000000000000C'   X'43'\n         DC    X'0000F007994B000000000000000000000000'   X'44'\n         DC    X'100000C00080000000000000000000000000'   X'45'\n         DC    X'000000000000000000000000000000000000'   X'46'\n         DC    X'000000000000000000000000000000000000'   X'47'\n         DC    X'000000000000000000000804180830000000'   X'48'\n         DC    X'000000000040404080000000000000000000'   X'49'\n         DC    X'080000000403ECF000000000000000000000'   X'4A'\n         DC    X'D000F0000000000000000000000000000000'   X'4B'\n         DC    X'000000000000000000000000000000000000'   X'4C'\n         DC    X'000000000000000000000000000000000000'   X'4D'\n         DC    X'000000000000000000000000000000000000'   X'4E'\n         DC    X'000000000000000000000000000000000000'   X'4F'\n         DC    X'000000000000000000000000000000000000'   X'50'\n         DC    X'000000000000000000000000000000000000'   X'51'\n         DC    X'000000000000000000000000000000000000'   X'52'\n         DC    X'000000000000000000000000000000000000'   X'53'\n         DC    X'000000000000000000000000000000000000'   X'54'\n         DC    X'000000000000000000000000000000000000'   X'55'\n         DC    X'000000000000000000000000000000000000'   X'56'\n         DC    X'000000000000000000000000000000000000'   X'57'\n         DC    X'000000000000000000000000000000000000'   X'58'\n         DC    X'000000000000000000000000000000000000'   X'59'\n         DC    X'000000000000000000000000000000000000'   X'5A'\n         DC    X'000000000000000000000000000000000000'   X'5B'\n         DC    X'000000000000000000000000000000000000'   X'5C'\n         DC    X'000000000000000001030000000000000000'   X'5D'\n         DC    X'018000000000000000000000000000000000'   X'5E'\n         DC    X'000000000000000000000000040603031E00'   X'5F'\n         DC    X'000000000000000000000000000000000000'   X'60'\n         DC    X'000000000000000000000000000000000000'   X'61'\n         DC    X'000000000000000000000000000000000000'   X'62'\n         DC    X'000000000000000000000000000000000000'   X'63'\n         DC    X'000000000000000000000000000000000000'   X'64'\n         DC    X'00080000000000000000000000009F3F0000'   X'65'\n         DC    X'000E000000000000000000000000FFFFFC00'   X'66'\n         DC    X'000C00000000000000000000000000800000'   X'67'\n         DC    X'000000000000000000000000000000000000'   X'68'\n         DC    X'000000000000000000000000000000000000'   X'69'\n* GREEN PLANE\n         DC    AL2(ADDPLNLN)    STRUCTURED FIELD LENGTH. (TRIPLE-PLANE)\n         DC    X'06C1CB41'      LPS-ID,EXT+CLR+TYP1,LCID,FIRST-SYM.\n         DC    X'03'            READ/WRITE STORAGE ID.\n         DC    X'060009100004'  LENE,FLAGS,WIDTH,DEPTH,SUBSN,PLANE.\n         DC    X'000000000000000000000103071F373FBF7F'   X'41'\n         DC    X'00FF0000000000051A7BFFFFFEFFFFFFFFFF'   X'42'\n         DC    X'09FF0002003549BEDDD7FBFFFFFFFFFFFFFF'   X'43'\n         DC    X'05FFF007994BB777A7FFFFFFFFFFFFFED40C'   X'44'\n         DC    X'1EB000C000A8ADF80301E0C0C08094081010'   X'45'\n         DC    X'040000000000000000000000000000000000'   X'46'\n         DC    X'000000000000000000000000000000000000'   X'47'\n         DC    X'000000010301050709081C1C183830200000'   X'48'\n         DC    X'FE00FFFFFFFFFFFFFFFFFFBF7F7E79787070'   X'49'\n         DC    X'FFC0FFFFFFFFFFFFFFFFFFBF3F3F9F050747'   X'4A'\n         DC    X'FFFEFFFFFFFF7FFFFFFFFFFCC090C0C0E0E0'   X'4B'\n         DC    X'FF00C684C1A1E0C080A04000000020400000'   X'4C'\n         DC    X'400030E00000000000000000000000000000'   X'4D'\n         DC    X'000000000000000000000000000000000000'   X'4E'\n         DC    X'000000000000000000000000000000000000'   X'4F'\n         DC    X'000000000000000000000000000000000000'   X'50'\n         DC    X'0000004040C0800000000000000000000000'   X'51'\n         DC    X'000064301910000000000000000000000000'   X'52'\n         DC    X'000004000404031B0F060F03010100000000'   X'53'\n         DC    X'80B0C080000001030F3F3F9FCE00C07C0000'   X'54'\n         DC    X'0B0000101C288000002A035CA72040000820'   X'55'\n         DC    X'0020000000000000000000D87F1F060F0300'   X'56'\n         DC    X'001800000000000000000000008860C06000'   X'57'\n         DC    X'000000000000000000000000000000000080'   X'58'\n         DC    X'000000000000000000000000000000000000'   X'59'\n         DC    X'000000000000001000000000000000000000'   X'5A'\n         DC    X'000000000000000000000000000000000000'   X'5B'\n         DC    X'000000000000000000000000000000000000'   X'5C'\n         DC    X'000000000000000001030303010101000000'   X'5D'\n         DC    X'03FE00000E1F1F3FFFFFFFFFFFFFFFF88000'   X'5E'\n         DC    X'7FF861E3E3F3FFFFFFFFFFFFFFFFFFFF7F1F'   X'5F'\n         DC    X'37FE000000000080C0C0E0E0E0E0C0800000'   X'60'\n         DC    X'000000002000000000000000000000000080'   X'61'\n         DC    X'000000000000000000000000000000000000'   X'62'\n         DC    X'000000000000000000000000000000000000'   X'63'\n         DC    X'000000000000000000000000000000000000'   X'64'\n         DC    X'00080000000000000000000000009F3F0000'   X'65'\n         DC    X'000E000000000000000000000000FFFFFC00'   X'66'\n         DC    X'000C1E000600000000000000000000800000'   X'67'\n         DC    X'000000000004000000000000000000000000'   X'68'\n         DC    X'000000000000000000000000000000000000'   X'69'\nPSFLEN   EQU   *-PSFWSF\n         SPACE\n         DC    XL18'7F80E2121212F21212121100000000000000'  X'50'\n         DC    XL18'008047484848474040488700000000000000'  X'51'\n         DC    XL18'47003E080808080808080800000000000000'  X'52'\n         DC    XL18'0000F0898989F1C1A1918900000000000000'  X'53' AUST.\n         DC    XL18'8800C4242424E42424242700000000000000'  X'54'\n         DC    XL18'008043444444474444444400000000000000'  X'55'\n         DC    XL18'880011999995959593939100000000000000'  X'56'\n         SPACE\n         DS    0H\n         TITLE 'STORAGE AVAILABILITY EXCEPTION DETECTION ROUTINE'\n         USING STORCHEK,R11\nSTORCHEK L     R3,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R3\n         L     R3,RMCTMCT        POINT TO THE MCT.\n         DROP  R3                RMCT.\n         USING MCT,R3\n*                                SQA SHORTAGE?\n         TM    MCTSFLGS,MCTSQA1+MCTSQA2\n         BNZ   STGSHORT          YES.\n*                                AUXILIARY STORAGE SHORTAGE?\n         TM    MCTOFLGS,MCTASM1+MCTASM2\n         BNZ   STGSHORT          YES.\n*                                REAL/PAGEABLE STORAGE SHORTAGE?\n         TM    MCTCFLGS,MCTRLSHT+MCTB16SH+MCTDRSHT+MCTB2GSH\n         BNZ   STGSHORT          YES.\n         DROP  R3                MCT.\n         SPACE\n         MVI   BUSYATTR+2,X'F4'  NO, PUT CPU BUSY BACK TO UNDERSCORE.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZR   R14               NO, RETURN.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZR   R14               NO, RETURN.\n         L     R3,PSAAOLD        POINT TO THE CURRENT ASCB.\n         L     R3,ASOUCB(,R3)    POINT TO THE CURRENT OUCB.\n         USING OUCB,R3\n         TM    OUCBSFL,OUCBNSW   NON-SWAPPABLE?\n         BZR   R14               NO, RETURN.\n         DROP  R3                OUCB.\n         MODESET MF=(E,MDSTSUP0) GET AUTHORIZED FOR SYSEVENT.\n         SYSEVENT OKSWAP         YES, BECOME SWAPPABLE.\n         MODESET MF=(E,MDSTPROB) BACK TO PROBLEM STATE AND KEY.\n         BR    R14               RETURN.\n         SPACE\nSTGSHORT MVI   BUSYATTR+2,X'F2'  MAKE CPU UTILIZATION REVERSE VIDEO.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZR   R14               NO, RETURN.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZR   R14               NO, RETURN.\n         L     R3,PSAAOLD        POINT TO THE CURRENT ASCB.\n         L     R3,ASOUCB(,R3)    POINT TO THE CURRENT OUCB.\n         USING OUCB,R3\n         TM    OUCBSFL,OUCBNSW   NON-SWAPPABLE?\n         BOR   R14               YES, RETURN.\n         DROP  R3                OUCB.\n         MODESET MF=(E,MDSTSUP0) GET AUTHORIZED FOR SYSEVENT.\n         SYSEVENT DONTSWAP       NO, BECOME NON-SWAPPABLE.\n         MODESET MF=(E,MDSTPROB) BACK TO PROBLEM STATE AND KEY.\n         BR    R14               RETURN.\n         SPACE\n         DROP  R11               STORCHEK.\n         TITLE 'EXTRACT SMS VLD (VOLUME DESCRIPTION) ROUTINE'\n*              INPUT - ADDRESS OF VOLUME SERIAL NUMBER IN REGISTER 1.\n*              OUTPUT- ADDRESS OF VLD IN WORD 0 OF SAVE AREA\n*                      CHAINED FORWARD FROM CALLER'S SAVE AREA.\n         SPACE\n         USING GETVLD,R11\nGETVLD   DS    0H                 DETERMINE STORAGE GROUP OF DISK.\n         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS.\n         LR    R11,R15            SET NEW BASE REGISTER.\n         LR    R3,R13             POINT TO SUPPLIED SAVE AREA.\n         A     R13,WORKSIZE       POINT TO THIS ROUTINE'S WORK AREA.\n         ST    R13,8(,R3)         CHAIN FORWARD.\n         ST    R3,4(,R13)         CHAIN BACKWARD.\n         MVC   72(6,R13),0(R1)    COPY INPUT VOLUME SERIAL NUMBER.\n         LA    R1,80(,R13)        POINT TO SSOB AREA.\n         USING SSOB,R1\n         MVC   SSOBID,=C'SSOB'    LOAD SSOB IDENTIFIER.\n         LA    R0,SSOBHSIZ        LOAD SSOB LENGTH.\n         STH   R0,SSOBLEN\n         LA    R0,SSOBSSMS        LOAD SSOB FUNCTION CODE TO 55.\n         STH   R0,SSOBFUNC\n         L     R2,CVTPTR(,0)      POINT TO THE CVT.\n         USING CVT,R2\n         L     R2,CVTJESCT        POINT TO THE JESCT.\n         DROP  R2                 CVT.\n         USING JESCT,R2\n         L     R2,JESCTEXT        POINT TO PAGEABLE JESCT ENTENSION.\n         DROP  R2                 JESCT.\n         USING JESPEXT,R2\n         LA    R15,12             PREPARE FOR NO SMS SUBSYSTEM.\n         ICM   R2,15,JESSMSIB     POINT TO THE SMS SSIB.\n         BZ    SKIPVLD            NO SSIB SO SKIP SMS CALL.\n         DROP  R2                 JESPEXT.\n         ST    R2,SSOBSSIB        SAVE THE SSIB ADDRESS.\n         XC    SSOBRETN,SSOBRETN  RESET SUBSYSTEM RETURN CODE.\n         LA    R2,SSOB+SSOBHSIZ   POINT PAST SSOB HEADER.\n         ST    R2,SSOBINDV        LOAD FUNCTION-DEPENDENT AREA PTR.\n         USING IEFSSSA,R2\n         LA    R0,SSSALN+SSSA1LN  LOAD SSOB SMS EXTENTION LENGTH.\n         STH   R0,SSSALEN\n         MVC   SSSAID,=C'SSSA'    SUPPLY IDENTIFIER.\n         MVI   SSSAVER+1,SSOBSSVR SUPPLY VERSION INDICATOR.\n         MVI   SSSASFN+1,SSSAACTV SUPPLY SUB-FUNCTION CODE.\n         TM    MODESW2,AUTH       APF AUTHORIZED?\n         BO    *+8                YES.\n         MVI   SSSAIFLG,SSSANAUT  NO, INDICATE NON-AUTHORIZED CALLER.\n         MVI   SSSA1TYP,SSSA1VOL  FLAG VOLSER IS SUPPLIED.\n         MVI   SSSA1CNT+3,1       FLAG ONE CONSTRUCT PASSED.\n         MVI   SSSA1NML+1,6       SET VOLUME SERIAL NUMBER LENGTH.\n         MVC   SSSA1NAM(6),72(R13)    LOAD VOLUME SERIAL NUMBER.\n         DROP  R1                 SSOB.\n         ST    R1,0(,R13)         SAVE PARAMETER LIST ITEM.\n         OI    0(R13),X'80'       INDICATE ONLY ITEM IN LIST.\n         TM    MODESW2,AUTH       APF AUTHORIZED?\n         BZ    SSAUTHOK           NO.\n         MODESET MF=(E,MDSTSUP0)  YES, ENHANCE PRIVILEGES.\nSSAUTHOK LA    R1,0(,R13)         POINT TO PARAMETER LIST.\n         IEFSSREQ ,               PASS REQUEST TO SUB-SYSTEM INTERFACE.\n         ICM   R0,15,SSSA1PTR     AREA RETURNED?\n         BZ    *+8                NO, RETURNED SIZE IRRELEVANT.\n         L     R0,SSSA1ALN        YES, GET SIZE OF RETURNED DATA.\n         ST    R0,SSSA1LEN        REUSE SAME RETURN AREA.\n         DROP  R2                 SSSA.\n         LR    R2,R15             COPY SSI RETURN CODE.\n         TM    MODESW2,AUTH       APF AUTHORIZED?\n         BZ    SKIPVLD            NO.\n         MODESET MF=(E,MDSTPROB)  YES, FORFEIT PRIVILEGES.\nSKIPVLD  L     R13,4(,R13)        POINT BACK TO CALLER'S SAVE AREA.\n         ST    R2,16(,R13)        SAVE SSI RETURN CODE.\n         LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS.\n         BR    R14                RETURN TO CALLER.\n         SPACE\n         DROP  R11                GETVLD.\n         SPACE 2\n         LTORG\n         DC    0H\n         TITLE 'FETCH ECMB FOR UCB ROUTINE'\n*              INPUT - UCB ADDRESS IN REGISTER 1.\n*              OUTPUT- 32-BYTE ECMB AT SECWORKA+48\n*                      RETURN CODE IN REGISTER 15.\n         SPACE\n         DROP  R13                GOTAREA.\n         USING GOTAREA,R10\n         USING IOSECMB$,R11\nIOSECMB$ BAKR  R14,0\n         LR    R11,R15\n         LR    R10,R13\n         LA    R13,SECWORKA+112   POINT TO 36-WORD SAVE AREA.\n         ST    R1,SECWORKA+32     SET UCB ADDRESS.\n         LR    R3,R1\n         XC    0(144,R13),0(R13)  SIMPLY DEBUGGING.\n         USING UCBOB,R3\n         MODESET MF=(E,MDSTSUP0)  ACQUIRE REQUIRED AUTHORIZATION.\n         CLI   UCBID,UCBSTND      REAL UCB OR JUST A COPY?\n         BE    IOSEREAL           REAL UCB.\n         UCBLOOK DEVN=UCBCHAN,    NOMINATE DEVICE NUMBER LOCATION.     +\n               UCBPTR=SECWORKA+32, NOMINATE UCB ADDRESS SAVE AREA.     +\n               LOC=ANY,           SEARCH ALL UCB LOCATIONS.            +\n               NOPIN,             DO NOT PIN ANY UCB.                  +\n               DYNAMIC=YES,       INCLUDE ALL UCB TYPES.               +\n               RANGE=ALL,         INCLUDE ALL UCB NUMBERS.             +\n               MF=(E,UCBLKLS,COMPLETE)\n         LTR   R15,R15            SUCCESS?\n         BZ    IOSEREAL           YES, CONTINUE.\n         PR    ,                  RETURN TO CALLER.\n         DROP  R3                 UCBOB.\nIOSEREAL LA    R0,SECWORKA+48     GET ECMB ADDRESS.\n         ST    R0,SECWORKA+36     SET ECMB ADDRESS.\n         IOSCMB GET,                                                   +\n               UCBPTR=SECWORKA+32,                                     +\n               CMBAREA=SECWORKA+36,                                    +\n               CMBLEN=32,                                              +\n               MF=(E,IOSCMBL,COMPLETE)\n         PR    ,                  RETURN TO CALLER.\n         DROP  R11,R10            IOSECMB$, GOTAREA.\n         USING GOTAREA,R13\n         LTORG\n         DC    0H\n         SPACE\n         COPY  IMPCMW            \"WINDOW\" SCREEN MANAGER.\n         SPACE\n         COPY  IMPXAA            OPTION \"A\".\n         SPACE\n         COPY  IMPXAD            OPTION \"D\".\n         SPACE\n         COPY  IMPXAC            OPTION \"C\".\n         SPACE\n         COPY  IMPXAS            OPTION \"S\".\n         SPACE\n         COPY  IMPCME            OPTION \"E\".\n         SPACE\n         COPY  IMPXAP            OPTION \"P\".\n         SPACE\n         COPY  IMPXAF            OPTION \"F\".\n         SPACE\n         COPY  IMPXAJ            OPTION \"J\".\n         SPACE\n         COPY  IMPXAL            OPTION \"L\".\n         SPACE\n         COPY  IMPXAV            OPTION \"V\".\n         SPACE\n         COPY  IMPXAB            OPTION \"B\".\n         SPACE\n         COPY  IMPXAT            OPTION \"T\".\n         SPACE\n         COPY  IMPXAR            OPTION \"R\".\n         SPACE\n         COPY  IMPXAO            OPTION \"O\".\n         SPACE\n         COPY  IMPXAM            OPTION \"M\".\n         SPACE\n         COPY  IMPXAU            OPTION \"U\".\n         SPACE\n         COPY  IMPXAN            OPTION \"N\".\n         SPACE\n         COPY  IMPCM$            OPTION \"$\".\n         SPACE\n         COPY  IMPXAG            OPTION \"G\".\n         SPACE\n         COPY  IMPCMK            OPTION \"K\".\n         SPACE\n         COPY  IMPXA@            OPTION \"@\".\n         SPACE 2\n         DS    0D                END OF CSECT.\n         TITLE 'COMMON AREA - UNINITIALIZED FIXED LENGTH WORK AREA'\nIMPXACOM COM\nPGDSTABL DC    64XL12'00'       TWELVE BYTE ENTRY PER D/SET:\n*                    WD1=XFER CNT, WD2=I/O CNT, WD3=T-O-D FOR COUNTERS.\n*                               (MVS/XA MAXIMUM = 256 PAGE + 256 SWAP.)\nUDXLARGE DS    10A              ADDRESS OF LARGEST EXTENT ENTRIES.\nUNITOCYL DS    F                CYLINDER NUMBER OF PREVIOUS I/O.\nUCYLHI   DS    H                HIGHEST CYLINDER ACCESSED IN SAMPLE.\nUCYLOW   DS    H                LOWEST CYLINDER ACCESSED IN SAMPLE.\nUNITSCYL DS    73H              CYLINDER RANGE SAMPLES.\nUNITJCYL DS    73H              CYLINDER RANGES NOT FOR JOB PREFIX.\nUNITHDMV DS    73H              HEAD MOVEMENT RANGE SAMPLES.\nUNITHDJB DS    73H              HEAD MOVEMENTS NOT FOR JOB PREFIX.\n         DS    0F               ALIGNMENT AID.\n         DS    H\nULOGREC  DS    0H               UNIT ACTIVITY LOGGING RECORD.\nULOGFLG  DS    XL1              RECORD FLAG BYTE.\nULOGRTY  DS    XL1              RECORD TYPE.\nULOGTIME DS    XL4              CENTISECOND TIMESTAMP.\nULOGDATE DS    XL4              DATESTAMP.\nULOGSID  DS    CL4              SYSTEM IDENTIFIER.\nULOGCOMP DS    CL4              COMPONENT IDENTIFIER.\nULOGSBTY DS    H                RECORD SUB-TYPE.\nUNITHHMM DS    H                UNIT SAMPLE TIMESTAMP.\nHDGUCODE DS    X                HEADING GUFF CODE.\nULOGUNIT DS    CL3              UNIT UCB NAME.\nUNITTYPE DS    XL4              UCB TYPE FIELD.\nUTIMEB4  DS    F                BINARY TIME-OF-DAY BEFORE SAMPLING.\nUTIMEAFT DS    F                BINARY TIME-OF-DAY AFTER SAMPLING.\nUIOCNTB4 DS    F                DASD I/O COUNTS BEFORE SAMPLING.\nUIOCNTAF DS    F                DASD I/O COUNTS AFTER SAMPLING.\nUIOTIMB4 DS    F                DASD I/O ELAPSED TIME BEFORE SAMPLING.\nUIOTIMAF DS    F                DASD I/O ELAPSED TIME AFTER SAMPLING.\nULOGZERO DS    0XL18            COUNTERS TO BE RESET BEFORE SAMPLING.\nUNITQLEN DS    F                TOTAL OF SAMPLED QUEUE LENGTHS.\nUNITRCNT DS    F                TOTAL OF SAMPLED RESERVE COUNTS.\nUNITQUED DS    H                SAMPLE COUNT OF I/O QUEUING.\nUNITRSVD DS    H                SAMPLE COUNT OF H/W RESERVE ACTIVE.\nUNITBUSY DS    H                SAMPLE COUNT OF UNIT BUSY.\nUNITDEFR DS    H                SAMPLE COUNT OF CONTROL UNIT BUSY.\nUNITNRDY DS    H                SAMPLE COUNT OF UNIT NOT READY.\nUNITCPU  DS    H                CCVUTILP AT SAMPLING TIME.\nDASDALOC DS    H                DASD ALLOCATION COUNT AFTER SAMPLING.\nDASDOPEN DS    H                DASD OPEN COUNT AFTER SAMPLING.\nTHEVOLUM DS    CL6              VOLUME SERIAL AT TIME OF SAMPLING.\nDASDLSPC DS    CL40             LSPACE MESSAGE BUFFER.\nUNITSCHR DS    100CL14          UNIT ACTIVITY SAMPLE ENTRIES.\n* JOB/ASID 0-7  FSN/CYL 8-9  HEAD 10  REC 11  FLAGS 12  CHN# 13\n*              FLAG BYTE BIT SETTINGS:\nULNOTRDY EQU   X'80'            DEVICE NOT READY.\nULIOADDR EQU   X'40'            FSN OR DISK I/O ADDRESS LOADED.\nULOFFLIN EQU   X'20'            DEVICE OFFLINE.\nULREWIND EQU   X'10'            TAPE UNIT REWINDING.\nULBOXED  EQU   X'08'            DEVICE BOXED OFFLINE.\n*        EQU   X'04'            UNUSED.\n*        EQU   X'02'            UNUSED.\n*        EQU   X'01'            UNUSED.\nUNITSUMM DS    CL79             SYSTEM SUMMARY AT SAMPLING TIME.\n         ORG   ULOGREC+2048     RESERVE SPACE FOR FUTURE EXPANSION.\nUNITJBSY DS    H                UNIT BUSY COUNT FOR JOB PREFIX.\n         DS    0H               ENSURE HALFWORD ALIGNMENT FOR UNITSJOB.\nUNITSJOB DS    101CL10          UNIT ACTIVITY JOB PROFILE.\n* JOB/ASID@ 0-3  LO-CYL 4-5  HI-CYL 6-7  COUNT 8-9\nIMCOMEND DS    0D               END OF COMMON AREA.\nIMCOMSIZ EQU   IMCOMEND-IMPXACOM\n         SPACE 2\n         END   IMPXA\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXA@": {"ttr": 11014, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x01)\\x0f\\x01\\x05\\x02o\\x17A\\x01\\x0f\\x00\\xc3\\x00q\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-10-17T00:00:00", "modifydate": "2005-01-26T17:41:00", "lines": 271, "newlines": 195, "modlines": 113, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 2001       PRYCROFT SIX PTY LTD\n         TITLE 'UNIX USER DATA BASE DISPLAY LINE MAPPING AND DSECTS'\nUULINE   DSECT\nUULNAT   DS    XL(L'LOWX)\nUUUID    DS    CL12\n         DS    CL1\nUUUSER   DS    CL8\nUUGID    DS    CL12\n         DS    CL1\nUUGROUP  DS    CL8\n         DS    CL1\nUUDIR    DS    CL36\nUUPGM    EQU   *-16,16\n         SPACE\nUGLINE   DSECT\nUGLNAT   DS    XL(L'LOWX)\nUGGID    DS    CL12\n         DS    CL1\nUGGROUP  DS    CL8\n         DS    CL58\n         SPACE\n         BPXYGIDN\n         BPXYGIDS\n         TITLE 'UNIX USER DATA BASE DISPLAY SUBROUTINE'\nIMPXA    CSECT\n         USING UNIXUSER,R11\nUNIXUSER DS    0H\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' ADJUST ANY COMMAND INPUT.\n         B     CMDSCAN@          PROCESS IT.\n         SPACE\nREDOUUID L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         SLR   R0,R0             GET ZERO.\n         ST    R0,WINLINES       INITIALIZE LINE COUNTER.\n         MVC   WINTOP,@TOPLINE   SET TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   8(R2),X'F3'       SHOW HEADING IN PINK.          (I3279)\n         CLI   @FLAG,C'G'        SHOWING GROUPS?\n         BE    REDOUGID          YES.\n         MVC   LL-79(79,R2),HEADING@\n         BAS   R14,@ADDLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVC   LL-79(79,R2),UUIDCOLS\n         BAS   R14,@ADDLINE      LINE NOW COMPLETE.\n         SPACE\n         USING UULINE,R2\nNEXTUUID DS    0H\n*        CALL  BPX1GPE,          SEQUENTIALLY ACCESS USER DATA BASE.\n         L     R1,CVTPTR(,0)\n         L     R1,CVTCSRT-CVT(,R1) CSRTABLE.\n         L     R1,24(,R1)        CSR SLOT.\n         L     R15,#BPX1GPE(,R1) ADDRESS OF THE SERVICE.\n         CALL  (15),             SEQUENTIALLY ACCESS USER DATA BASE.   +\n               (@RETVAL,@RETCD,@RSNCD),                                +\n               VL,MF=(E,WORK)\n         ICM   R3,15,@RETVAL     WAS AN ENTRY RETURNED?\n         BNZ   SHOWUUID          YES, ADDRESS RETURNED.\n         ICM   R3,15,@RETCD      END-OF-FILE?\n         BZ    ENDOFUID          YES.\n         MVC   UULNAT,HIGHX      NO, HIGH INTENSITY FOR ERROR CODES.\n         MVC   LL-63(23,R2),=CL23'BPX1GPE ERROR - HEX RC='\n         UNPK  LL-40(9,R2),@RETCD(5)\n         TR    LL-40(8,R2),HEX-C'0'\n         MVC   LL-32(5,R2),=CL5' RSN='\n         UNPK  LL-27(9,R2),@RSNCD(5)\n         TR    LL-27(8,R2),HEX-C'0'\n         MVI   LL-19(R2),C' '\n         B     DONEUUID          LINE NOW COMPLETE.\n         USING GIDN,R3\nSHOWUUID LA    R14,UUUSER        POINT TO TARGET.\n         LA    R15,L'UUUSER      LENGTH OF TARGET.\n         LA    R0,GIDN_U_NAME    POINT TO SOURCE.\n         ICM   R1,15,GIDN_U_LEN  LENGTH OF SOURCE.\n         ALR   R3,R1             ADJUST ADDRESSING FOR USER NAME.\n         ICM   R1,8,BLANKS       LOAD PAD BYTE.\n         MVCL  R14,R0            LOAD USER ID NAME.\n         ICM   R0,15,GIDN_USERID LOAD USER ID\n         CVD   R0,WORK\n         MVC   UUUID,ED11\n         ED    UUUID,WORK+2\n         ICM   R0,15,GIDN_GROUPID AND GROUP ID.\n         CVD   R0,WORK\n         STCM  R0,15,UUGROUP     SAVE FOR LATER GROUP LOOK-UP.\n         MVC   UUGID,ED11\n         ED    UUGID,WORK+2\n         LA    R14,UUDIR         POINT TO TARGET.\n         LA    R15,L'UUDIR       LENGTH OF TARGET.\n         LA    R0,GIDN_D_NAME    POINT TO SOURCE.\n         ICM   R1,15,GIDN_D_LEN  LENGTH OF SOURCE.\n         ALR   R3,R1             ADJUST ADDRESSING FOR PATH NAME.\n         ICM   R1,8,BLANKS       LOAD PAD BYTE.\n         MVCL  R14,R0            LOAD WORKING DIRECTORY NAME.\n         LA    R14,UUPGM         POINT TO TARGET.\n         LA    R15,L'UUPGM       LENGTH OF TARGET.\n         LA    R0,GIDN_P_NAME    POINT TO SOURCE.\n         ICM   R1,15,GIDN_P_LEN  LENGTH OF SOURCE.\n         BZ    DONEUUID          DO NOT OVERLAY DIRECTORY IF NONE.\n         ICM   R1,8,BLANKS       LOAD PAD BYTE.\n         MVCL  R14,R0            LOAD INITIAL PROGRAM NAME.\n         DROP  R3                GIDN.\nDONEUUID BAS   R14,@ADDLINE      LINE NOW COMPLETE.\n         ICM   R3,15,@RETVAL     STILL PROCESSING ENTRIES?\n         BNZ   NEXTUUID          YES, CREATE NEXT ENTRY LINE.\n         DROP  R2                UULINE.\n         USING WNDWMNGR,R15\nENDOFUID L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         L     R5,WINLINES       GET THE LINE COUNT.\n         AHI   R5,-2             DO NOT COUNT HEADING LINES.\n         BNP   SHOWSUM@          NO DETAIL LINES TO PROCESS.\n         L     R4,WINBUFF        POINT TO DATA ACCUMULATED SO FAR.\n         LA    R4,LL+LL(,R4)     POINT TO FIRST DETAIL LINE.\n         USING UULINE,R4\nUIDGIDLP CLI   UUUID-1,X'F5'     TURQUOISE LINE?\n         BNE   SHOWSUM@          NO, END OF DETAIL LINES.\n         ICM   R0,15,UUGROUP     YES, GET SAVED GID.\n         C     R0,@UIDGID        SAME AS LAST CALL?\n         BE    SHOWUGRP          YES, LOAD GROUP NAME.\n         ST    R0,@UIDGID        NO, SAVE IT FOR CALL.\n         MVC   @UIDGRP,BLANKS    CLEAR RESIDUAL DATA.\n*        CALL  BPX1GGI,          ACCESS GROUP DATA BASE BY ID.\n         L     R1,CVTPTR(,0)\n         L     R1,CVTCSRT-CVT(,R1) CSRTABLE.\n         L     R1,24(,R1)        CSR SLOT.\n         L     R15,#BPX1GGI(,R1) ADDRESS OF THE SERVICE.\n         CALL  (15),             ACCESS GROUP DATA BASE BY ID.         +\n               (@UIDGID,@RETVAL,@RETCD,@RSNCD),                        +\n               VL,MF=(E,WORK)\n         ICM   R3,15,@RETVAL     WAS AN ENTRY RETURNED?\n         BZ    SHOWUGRP          NO, NO DATA TO COPY.\n         USING GIDS,R3\n         LA    R14,@UIDGRP       POINT TO TARGET.\n         LA    R15,L'@UIDGRP     LENGTH OF TARGET.\n         LA    R0,GIDS_G_NAME    POINT TO SOURCE.\n         ICM   R1,15,GIDS_G_LEN  LENGTH OF SOURCE.\n         ICM   R1,8,BLANKS       LOAD PAD BYTE.\n         MVCL  R14,R0            LOAD USER ID NAME.\n         DROP  R3                GIDS.\nSHOWUGRP MVC   UUGROUP,@UIDGRP   SHOW GROUP NAME.\n         TR    LL-79(79,R4),XLATETBL    CLEAR UNPRINTABLES.\n         LA    R4,LL(,R4)        ADJUST BUFFER POINTER.\n         BCT   R5,UIDGIDLP       PROCESS NEXT LINE.\n         B     SHOWSUM@          JUST IN CASE.\n         DROP  R4                UULINE.\n         SPACE\nREDOUGID MVC   LL-79(79,R2),HEADNG2@\n         BAS   R14,@ADDLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVC   LL-70(9,R2),UGIDCOLS\n         BAS   R14,@ADDLINE      LINE NOW COMPLETE.\n         SPACE\n         USING UGLINE,R2\nNEXTUGID DS    0H\n*        CALL  BPX1GGE,          SEQUENTIALLY ACCESS GROUP DATA BASE.\n         L     R1,CVTPTR(,0)\n         L     R1,CVTCSRT-CVT(,R1) CSRTABLE.\n         L     R1,24(,R1)        CSR SLOT.\n         L     R15,#BPX1GGE(,R1) ADDRESS OF THE SERVICE.\n         CALL  (15),             SEQUENTIALLY ACCESS GROUP DATA BASE.  +\n               (@RETVAL,@RETCD,@RSNCD),                                +\n               VL,MF=(E,WORK)\n         ICM   R3,15,@RETVAL     WAS AN ENTRY RETURNED?\n         BNZ   SHOWUGID          YES, ADDRESS RETURNED.\n         ICM   R3,15,@RETCD      END-OF-FILE?\n         BZ    SHOWSUM@          YES.\n         MVC   UGLNAT,HIGHX      NO, HIGH INTENSITY FOR ERROR CODES.\n         MVC   LL-63(23,R2),=CL23'BPX1GPE ERROR - HEX RC='\n         MVI   LL-58(R2),C'G'\n         UNPK  LL-40(9,R2),@RETCD(5)\n         TR    LL-40(8,R2),HEX-C'0'\n         MVC   LL-32(5,R2),=CL5' RSN='\n         UNPK  LL-27(9,R2),@RSNCD(5)\n         TR    LL-27(8,R2),HEX-C'0'\n         MVI   LL-19(R2),C' '\n         BAS   R14,@ADDLINE      LINE NOW COMPLETE.\n         B     SHOWSUM@\n         SPACE\n         USING GIDS,R3\nSHOWUGID LA    R14,UGGROUP       POINT TO TARGET.\n         LA    R15,66            LENGTH OF TARGET.\n         LA    R0,GIDS_G_NAME    POINT TO SOURCE.\n         ICM   R1,15,GIDS_G_LEN  LENGTH OF SOURCE.\n         AR    R3,R1\n         ICM   R1,8,BLANKS       LOAD PAD BYTE.\n         MVCL  R14,R0            LOAD USER ID NAME.\n         ICM   R0,15,GIDS_GROUPID\n         CVD   R0,WORK\n         MVC   UGGID,ED11\n         ED    UGGID,WORK+2\n         BAS   R14,@ADDLINE      LINE NOW COMPLETE.\n         B     NEXTUGID          PROCESS NEXT GROUP.\n         DROP  R3                GIDS.\n         SPACE\nSHOWSUM@ BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRN@ LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRN@ L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         L     R15,WINMANAD      YES, POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   @TOPLINE,WINTOP   SAVE TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BOR   R9                YES, RETURN TO MAINLINE VIA SCREENIO.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDOUUID          YES.\nCMDSCAN@ CLI   INCHARS,C'U'      DISPLAY UNIX USERS REQUESTED?\n         BE    @SHOWSEL          YES.\n         CLI   INCHARS,C'G'      DISPLAY UNIX GROUPS REQUESTED?\n         BE    @SHOWSEL          YES.\n         CLI   INCHARS,C' '      DISPLAY UPDATE REQUESTED?\n         BNE   GIVEHLP@          NO, SHOW HELP PANEL.\n         B     REDOUUID          REGENERATE DISPLAY.\n@SHOWSEL CLC   @FLAG,INCHARS     CHANGE OF FUNCTION?\n         BE    REDOUUID          NO, REGENERATE DISPLAY.\n         MVC   @FLAG,INCHARS     YES, UPDATE FUNCTION FLAG.\n         LA    R0,1\n         ST    R0,@TOPLINE       SHOW NEW DISPLAY FROM THE TOP.\n         B     REDOUUID          REGENERATE DISPLAY.\nGIVEHLP@ MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRN@          GO DISPLAY HELP PANEL.\n         SPACE\n@ADDLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRN@          IF YES, THEN FORGET SUMMARY LINE.\n         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         BR    R14\n         SPACE\n         DROP  R11               UNIXUSER.\n         TITLE 'UNIX USER DATA BASE DISPLAY - VARIABLES AND CONSTANTS'\n@TOPLINE DC    F'1'              TOP-OF-SCREEN LINE NUMBER.\n@RETVAL  DC    F'0'              UNIX CALL RETURN VALUE.\n@RETCD   DC    F'0'              UNIX CALL RETURN CODE.\n@RSNCD   DC    F'0'              UNIX CALL REASON CODE.\n@UIDGID  DC    F'-1'             USER'S GID.\n@UIDGRP  DC    CL8' '            GROUP NAME.\n@FLAG    DC    C'U'              SUBROUTINE FUNCTION FLAG.\nHEADING@ DC    CL79'                          UNIX USER DATA BASE DISPL+\n               AY                          '\nHEADNG2@ DC    CL79'                         UNIX GROUP DATA BASE DISPL+\n               AY                          '\nUUIDCOLS DC    CL79'         UID USERNAME         GID GROUP    WORKING-+\n               DIRECTORY   INITIAL-PROGRAM '\nUGIDCOLS EQU   UUIDCOLS+30,9\n         SPACE\n         LTORG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMPXAA": {"ttr": 11019, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4!\\x00\\x00\\x00\\x94\\x01/\\x01\\x05\\x02o#\\x16\\x03z\\x02\\xe6\\x01\\x10\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "52.33", "flags": 0, "createdate": "1994-01-12T00:00:00", "modifydate": "2005-01-26T23:16:00", "lines": 890, "newlines": 742, "modlines": 272, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD\n         TITLE 'ADDRESS SPACE MONITOR DISPLAY LINE MAPPING'\nASLINE   DSECT\nLINE     DS    XL(L'LOWX)\nJOB      DS    CL8\n         DS    CL1\nSTEP     DS    CL8\n         DS    CL1\nPSTEPTRM DS    CL8\n         DS    CL1\nASENF    DS    CL3\n         DS    CL1\nASOMVS   DS    CL3\n         DS    CL1\nTYPE     DS    CL8\nCANFLAG  DS    CL1\nWHERE    DS    CL3\n         DS    CL1\nDP       DS    CL2\nDMN      DS    CL4\nSRVCLS   EQU   DMN+1,8\nPGN      DS    CL4\n         DS    CL2\nPER      DS    CL1\n         DS    CL1\nADSPCID  DS    CL4\nCORESIZE DS    CL6\n         DS    CL1\nESIZE    DS    CL6\n         DS    CL1\nAUXSIZE  DS    CL6\n         DS    CL1\nSWC      DS    CL4\nSWCT     DS    CL6\n         DS    CL1\nSWPRSN   DS    CL2\nAPAGING  DS    CL7\nAIORATE  DS    CL7\nAEXCPCT  DS    CL12\n         DS    CL1\nWMR      DS    CL4\nWMS      DS    CL8\nASWPTIME DS    CL10\nASCONNTM DS    CL9\nIOPERCNT DS    CL4\n         DS    CL1\nCPUTIME  DS    CL9\nUSAGE    DS    CL4\n         DS    CL1\nASDL     EQU   *-JOB\nASLL     EQU   *-LINE\n         TITLE 'ADDRESS SPACE MONITOR SUBROUTINE'\nIMPXA    CSECT\n         USING ADDRSPCS,R11\nADDRSPCS DS    0H\n         CLI   INBUFF,6          ENTRY VIA PF6/18?\n         BE    CMDSCANA          YES, ANY COMMAND ALREADY IN PLACE.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' NO, ADJUST ANY COMMAND INPUT.\n         B     CMDSCANA          PROCESS IT.\n         SPACE\nFINDASVT DS    0H\n         MVC   SECTIOWA,VSBTRACE PRESERVE OPTION \"VB\" TRACE.\n         MVC   HEADINGA+51(7),=C'DMN PGN'\n         L     R9,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R9\n         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?\n         BM    AWMPOLOK          NO, NO POLICY TO EXTRACT.\n         DROP  R9                RMCT.\n         MVC   HEADINGA+51(7),=C'SRVCLAS'\nAWMPOLOK XC    REALJOBS(8),REALJOBS     ZERO REAL STORAGE COUNTERS.\n         L     R10,JOBTBL        ADDRESS TABLE ENTRY FOR THIS ASID.\n         USING ASENTRY,R10\n         L     R2,ASVTADDR       GET ASVT ADDRESS.\n         USING ASVT,R2\n         L     R3,ASVTMAXU       MAXIMUM NUMBER OF ENTRIES.\n         LA    R4,ASVTENTY-4     FIRST ENTRY MINUS 4.\n         DROP  R2                ASVT.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R2,2              ASSUME HEADINGS WILL BE SET UP OKAY.\n         ST    R2,WINLINES       INITIALIZE LINE COUNTER.\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         MVC   0(L'LOWX,R2),LOWX SUPPLY 3270 ATTRIBUTES.\n         MVI   0(R2),X'FF'       FIXED FLAG - NON-SCROLLABLE LINE.\n         LA    R2,LL-79(,R2)     POINT PAST ATTRIBUTES.\n         MVI   0(R2),C' '        BLANK A LINE.\n         MVC   1(ASDL-1,R2),0(R2)\n         MVC   0(79,R2),ASSELINE INDICATE SELECTION CRITERIA.\n         TM    ASFLAGS,ASSTC     SELECTING STARTED TASKS?\n         BO    ASSTCOK           YES.\n         MVC   23(3,R2),BLANKS   NO.\nASSTCOK  TM    ASFLAGS,ASJOB     SELECTING BATCH JOBS?\n         BO    ASJOBOK           YES.\n         MVC   29(3,R2),BLANKS   NO.\nASJOBOK  TM    ASFLAGS,ASTSU     SELECTING TIME SHARING USERS?\n         BO    ASTSUOK           YES.\n         MVC   35(3,R2),BLANKS   NO.\nASTSUOK  TM    ASFLAGS,ASOUT     SELECTING SWAPPED OUT ADDRESS SPACES?\n         BNO   ASOUTOK           NO.\n         MVC   41(3,R2),=C'OUT'  YES.\nASOUTOK  TM    ASFLAGS,NINIT     SUPPRESSING INITIATOR/TERMINATORS?\n         BO    ASINITOK          YES.\n         MVC   47(6,R2),BLANKS   NO.\nASINITOK CLI   SELJOBNM,C' '     USING JOB NAME PREFIX SELECTION?\n         BNH   ASELJMSK          NO.\n         LH    R1,JPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,ASELDMSK       LOAD THE PREFIX INTO THE DISPLAY LINE.\nASELJMSK LA    R2,ASDL(,R2)      POINT TO NEXT DISPLAY LINE.\n         MVC   0(L'HIGHX,R2),HIGHX   LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVC   L'HIGHX(ASDL,R2),HEADINGA     LOAD DISPLAYABLE\n         TR    L'HIGHX(ASDL,R2),XLATETBL          HEADING.\n         LA    R2,ASLL(,R2)      POINT PAST HEADING.\n         DROP  R15               WNDWMNGR.\n         SPACE\n         USING ASLINE,R2\n         TIME  BIN               GET TIME-OF-DAY.\nASCBLOOP LA    R4,4(,R4)         POINT TO THE NEXT ASVT ENTRY.\n         ICM   R5,B'1111',0(R4)  LOAD THE ASCB PTR.\n         BNM   ASCBOK            PROCESS ASCB.\n         ST    R0,TOD            STORE TIME-OF-DAY.\n         XC    CPUSOFAR(12),CPUSOFAR ZERO COUNTS FOR NON-EXISTENT ASID.\n         B     NOGOOD            FINISHED WITH BAD PTR.\n         USING ASCB,R5\nASCBOK   L     R6,ASCBRSME       GET RAX POINTER.\n         USING RAX,R6\n         L     R6,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.\n         DROP  R6                RAX.\n         ST    R6,SAVE+56        SAVE CENTRAL STORAGE USAGE FOR LATER.\n         A     R6,REALJOBS       ACCUMULATE FRAME COUNTS\n         ST    R6,REALJOBS                  OF ALL JOBS.\n*        CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n*        BH    CLRLINE           YES, DON'T REJECT ANYTHING YET.\n         ICM   R6,15,ASCBOUCB    LOAD PTR TO OUCB FOR TSO & WAIT CHK.\n         BZ    CLRLINE           IF ZERO THEN NO OUCB EXISTS TO CHECK.\n         USING OUCB,R6\n         TM    OUCBQFL,OUCBOFF   TEST FOR WAIT STATE.\n         BZ    ASTSUCHK          PROCEED IF READY TO RUN.\n         TM    ASFLAGS,ASOUT     DISPLAY WAITING ADDRESS SPACES?\n         BZ    NOGOOD            NO.\nASTSUCHK TM    OUCBYFL,OUCBLOG   CHECK FOR TSO.\n         BZ    CLRLINE           PROCEED IF NOT.\n         TM    ASFLAGS,ASTSU     DISPLAY TSO USERS?\n         BZ    NOGOOD            NO.\n         DROP  R6                OUCB.\nCLRLINE  MVC   LINE,LOWX         LOAD 3270 LINE ATTRIBUTE ORDERS.\n         MVI   JOB,C' '          CLEAR OUTPUT LINE TO BLANKS.\n         MVC   JOB+1(ASDL-1),JOB\n         MVC   JOB,STARTING      TO BYPASS GARBAGE.\n         MVI   CANFLAG,C'.'      INDICATE NON-CANCELLABLE STATUS.\n         ICM   R6,15,ASCBJBNI    LOAD PTR TO JOBNAME. CSCB+8 / CSCX+18.\n         BZ    NOTBATCH          BRANCH IF ZERO POINTER.\n         TM    ASFLAGS,ASJOB     DISPLAY BATCH JOBS?\n         BZ    NOGOOD            NO.\n         MVC   JOB,0(R6)         OTHERWISE, MOVE IN JOBNAME.\n         LA    R1,8\n         SLR   R6,R1             POINT TO THE START OF THE CSCB.\n         TM    OSLEVEL,CVTH4410  IS THIS REALLY THE CSCX+10?\n         BNO   AJCSCBOK          NO, PRE-SP4.\n         L     R6,16(,R6)        YES, POINT TO THE CSCB VIA CHCSCBP.\n         USING CHAIN,R6\nAJCSCBOK TM    CHACT,CHCL+CHAFORCE CANCEL FLAGS OFF?\n         BZ    JOBOK             YES, JOB IS NON-CANCELLABLE.\n         MVI   CANFLAG,C'*'      NO, INDICATE JOB NOW FORCIBLE.\n         TM    CHACT,CHAFORCE    WAS THIS THE FLAG THAT WAS ON?\n         BO    JOBOK             YES, WELL DONE.\n         MVI   CANFLAG,C' '      NO, JOB CANCELLABLE FLAG WAS ON.\n         B     JOBOK             BYPASS FURTHER JOBNAME PROCESSING.\n         DROP  R6                CHAIN.\nNOTBATCH ICM   R7,15,ASCBCSCB    LOAD POINTER TO THE TOP CSCB.\n         BZ    SMLCSCB           ASSUME NON-CAN IF CSCB PTR IS ZERO.\n         USING CHAIN,R7\n         TM    CHACT,CHCL+CHAFORCE CANCEL FLAGS OFF?\n         BZ    SMLCSCB           YES, JOB IS NON-CANCELLABLE.\n         MVI   CANFLAG,C'*'      NO, INDICATE JOB NOW FORCIBLE.\n         TM    CHACT,CHAFORCE    WAS THIS THE FLAG THAT WAS ON?\n         BO    SMLCSCB           YES, WELL DONE.\n         MVI   CANFLAG,C' '      NO, JOB CANCELLABLE FLAG WAS ON.\n         DROP  R7                CHAIN.\nSMLCSCB  ICM   R6,15,ASCBTSB     TSO USER ADDRESS SPACE?\n         BZ    STRTNMOK          NO, LEAVE DEFAULT NAME AS 'STARTING'.\n         MVC   JOB,=C'*LOGON* '  YES, LOAD THE CORRECT \"JOB NAME\".\nSTRTNMOK ICM   R6,15,ASCBJBNS    PTR IF START/MOUNT/LOGON.\n         BZ    JOBOK             BYPASS THIS MOVE IF POINTER IS ZERO.\n         MVC   JOB,0(R6)         MOVE IN JOBNAME FOR S/M/L MEMORIES.\nJOBOK    DS    0H\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   CSCBLOOK          NO, CONTINUE.\n         LH    R15,JPRFXLEN      GET LENGTH OF JOB NAME PREFIX.\n         LA    R8,SELJOBNM       POINT TO DESIRED PREFIX.\n         LA    R9,JOB            POINT TO JOB NAME.\n         STM   R8,R9,WORK+4      SAVE PARAMETER LIST.\n         ST    R15,WORK2+4\n         L     R9,SAVE+56        SAVE CENTRAL STORAGE USAGE.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   NOGOOD            IF NOT EQUAL THEN GO AWAY.\nCSCBLOOK ICM   R7,15,ASCBCSCB    LOAD POINTER TO THE TOP CSCB.\n         BNZ   CSCBOK            BRANCH IF CSCB POINTER IS NOT ZERO.\n         TM    ASFLAGS,ASSTC     ARE STARTED TASKS SELECTED?\n         BZ    NOGOOD            NO.\n         B     STEPOK            YES, KEEP WHAT MUST BE A SYSTEM ASID.\n         USING CHAIN,R7\nCSCBOK   CLI   CHTRKID,CHTSID    IS IT A TIME SHARING USER?\n         BNE   TESTINIT          NO.\n         MVI   TYPE,C'@'         YES, SIGNIFY A TSU ADDRESS SPACE.\n         CLI   JOB+6,C'*'        STARTING TSU?\n         BE    STEPOK            YES, FORGET STEPNAME.\n         MVC   STEP,CHCLS        PICK UP CHCLS.\n         B     STEPOK            BYPASS FURTHER CSCB PROCESSING.\nTESTINIT CLI   CHTRKID,CHINITID  IS IT AN INITIATOR/TERMINATOR?\n         BNE   STORMT            NO, JOB IS START, OR MOUNT.\n         CLC   =C'INIT ',JOB     HAS THE INITIATOR A JOB?\n         BE    SELINTST          NO, TEST FOR SELECTIVITY.\n         CLC   =C'ASCHINT ',JOB  HAS THE INITIATOR A JOB?\n         BE    SELINTST          NO, TEST FOR SELECTIVITY.\n         CLC   =C'BPXAS ',JOB    HAS THE INITIATOR A JOB?\n         BNE   JOBONLY           YES, CONTINUE JOB PROCESSING.\nSELINTST TM    ASFLAGS,NINIT     DO WE WANT DRY INITIATORS?\n         BO    NOGOOD            NO, GO AWAY.\n         B     STORMT            YES, CONTINUE STC PROCESSING.\n         DROP  R7                CHAIN.\n         USING CHAIN,R6\nJOBONLY  MVC   STEP,CHSTEP       PICK UP CHSTEP.\n         MVC   PSTEPTRM,CHPROCSN PICK UP CHPROCSN.\n         B     STEPOK            BYPASS FURTHER CSCB PROCESSING.\n         DROP  R6                CHAIN.\n         USING CHAIN,R7\nSTORMT   TM    ASFLAGS,ASSTC     DO WE WANT STARTED TASKS?\n         BZ    NOGOOD            NO, GO AWAY.\n         MVC   STEP(8),CHKEY     PICK UP CHKEY.\n         MVC   PSTEPTRM,CHPROCSN PICK UP CHPROCSN.\n         DROP  R7                CHAIN.\nSTEPOK   UNPK  ADSPCID(5),ASID(3,R5)\n         TR    ADSPCID,HEX-C'0'  SHOW ASID IN HEX.\n         MVI   ADSPCID+4,C' '    ERASE GARBAGE.\n         L     R1,SAVE+56        RESTORE CENTRAL STORAGE FRAME COUNT.\n         LR    R15,R1            COPY IT.\n         A     R15,REALSHOW      ACCUMULATE FRAME COUNT FOR\n         ST    R15,REALSHOW                 DISPLAYED JOBS.\n         LA    R15,CORESIZE      POINT TO DISPLAY AREA.\n         BAS   R14,ASTGSIZE      DISPLAY CENTRAL STORAGE USAGE.\n         L     R1,ASCBRSME       GET RAX POINTER.\n         USING RAX,R1\n         L     R1,RAXESCT        LOAD EXPANDED STORAGE FRAME COUNT.\n         DROP  R1                RAX.\n         LA    R15,ESIZE         POINT TO DISPLAY AREA.\n         BAS   R14,ASTGSIZE      DISPLAY EXPANDED STORAGE USAGE.\n         MVI   LINE+4,X'F8'      HIGH INTENSITY.\n         MVI   LINE+5,X'40'      NO HIGHLIGHTING.               (F9526)\n         MVI   LINE+8,X'F5'      TURQUOISE.                     (I3279)\n         L     R6,ASCBASSB       LOAD POINTER TO ASSB.\n         USING ASSB,R6\n         TM    ASSBFLG2,ASSBENFL ENF?\n         BNO   ASENFOK           NO.\n         MVC   ASENF,=C'YES'     SHOW IT.\nASENFOK  ICM   R1,15,ASSBOASB    USS USED BY THIS ASID?\n         BZ    ASUNIXOK          NO.\n         MVC   ASOMVS,=C'YES'    YES, SHOW UNIX USAGE.\nASUNIXOK L     R1,ASSBVSC        GET NUMBER OF ASSIGNED VIO SLOTS.\n         A     R1,ASSBNVSC       ADD NON-VIO SLOT COUNT.\n         DROP  R6                ASSB.\n         LA    R15,AUXSIZE       POINT TO DISPLAY AREA.\n         BAS   R14,ASTGSIZE      DISPLAY AUXILIARY STORAGE USAGE.\n         ICM   R6,15,ASCBOUCB    LOAD THE POINTER TO THE OUCB.\n         BZ    GETASXCP          IF ZERO THEN NO OUCB EXISTS TO CHECK.\n         USING OUCB,R6\n         TM    OUCBYFL,OUCBLOG   TIME SHARING USER?\n         BZ    GOTPGCNT          NO.\n         MVC   PSTEPTRM,OUCBTRXN YES, SHOW TSO COMMAND.\nGOTPGCNT MVC   WHERE,=CL3'IN '   DEFAULT MEMORY POSITION IS IN.\n         TM    OUCBSFL,OUCBPVL   TEST FOR PRIVILEGED JOB.\n         BZ    TRYNS             BRANCH IF NOT PRIVILEGED.\n         MVC   WHERE,=CL3'PRV'   MOVE IN PRIVILEGE INDICATION.\nTRYNS    TM    OUCBSFL,OUCBNSW   TEST FOR NON-SWAP.\n         BZ    TRYWAIT           BRANCH IF NOT NON-SWAP.\n         MVI   LINE+8,X'F3'      PINK.                          (I3279)\n         MVC   WHERE,=CL3'N/S'   MOVE IN NON-SWAP INDICATION.\n         TM    ASCBRSMF,ASCBVEQR VIRTUAL EQUALS REAL USER?\n         BZ    WHEREOK           NO, NON-SWAPPABLE V=V.\n         MVC   WHERE,=CL3'V=R'   YES, MOVE IN REAL INDICATION.\n         B     WHEREOK           BYPASS REST OF POSITION PROCESSING.\nTRYWAIT  DS    0H\n         TM    OUCBQFL,OUCBOFF   CHECK FOR WAIT\n         BZ    TRYOUT            BRANCH IF NOT.\n         MVC   WHERE,=CL3'WT'    MOVE IN WAIT POSITION INDICATION.\n         MVI   LINE+4,X'F0'      LOW INTENSITY.\n         MVI   LINE+8,X'F4'      GREEN.                         (I3279)\n         TM    OUCBQFL,OUCBLSW   CHECK FOR TRIVIAL QUEUE POSITION.\n         BZ    WHEREOK           IF NOT, EXIT POSITION PROCESSING.\n         MVC   WHERE,=CL3'LOG'   LOGICAL SWAP (I S'POSE THAT'S TRIVIAL)\n         MVI   LINE+8,X'F6'      YELLOW.                        (I3279)\n         B     WHEREOK           BYPASS REST OF POSITION PROCESSING.\nTRYOUT   TM    OUCBQFL,OUCBOUT   TRY OUT QUEUE.\n         BZ    WHEREOK           BYPASS REST OF POSITION PROCESSING.\n         MVC   WHERE,=CL3'OUT'   MOVE IN OUT QUEUE POSITION.\n         MVI   LINE+4,X'F4'      MEDIUM INTENSITY.\n         MVI   LINE+8,X'F1'      BLUE.                          (I3279)\nWHEREOK  DS    0H\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB\n         BZ    NOTTRANS          BRANCH IF MEMORY NOT TRANSITIONING.\n         MVC   WHERE(3),=CL3'<+>' INDICATE TRANSITIONING IN.\n         TM    OUCBQFL,OUCBGOO   CHECK FOR TRANSITIONING OUT.\n         BZ    NOTTRANS          BRANCH IF MEMORY NOT GOING OUT.\n         MVI   WHERE+1,C'-'      INDICATE TRANSITIONING OUT.\n         MVI   LINE+4,X'F0'      LOW INTENSITY.\n         MVI   LINE+8,X'F4'      GREEN.                         (I3279)\nNOTTRANS DS    0H\n         TM    ASCBFLG1,ASCBABNT IS MEMORY ABNORMALLY TERMINATING?\n         BZ    NOCAN             NO, SO FORGET IT.\n         UNPK  STEP(9),ASCBMCC(5) SHOW MEMTERM COMPLETION CODE.\n         TR    STEP(8),HEX-C'0'  CONVERT TO PRINTABLE HEX.\n         MVI   STEP+8,C' '       ERASE GARBAGE.\n         MVI   LINE+8,X'F2'      DYING, SO MAKE IT RED.         (I3279)\nNOCAN    CLI   OUCBCLS,X'4A'     TEST TRANSACTION CLASS.\n         BL    NOCLASS           EMPTY - LEAVE BLANK OR @.\n         MVC   TYPE,OUCBCLS      REPORT TRANSACTION CLASS.\nNOCLASS  CLC   TYPE+1(7),BLANKS  ROOM FOR JOBID?\n         BNE   AJOBIDOK          NO.\n         TM    OSLEVEL,CVTH4410  SP4 OR LATER?\n         BNO   AJOBIDOK          NO, JSAB DOES NOT EXIST.\n         L     R1,ASCBASSB       LOAD POINTER TO ASSB.\n         USING ASSB,R1\n         ICM   R1,15,ASSBJSAB    LOAD POINTER TO JSAB.\n         BZ    AJOBIDOK          NO JSAB.\n         DROP  R1                ASSB.\n         USING JSAB,R1\n         TM    JSABFLG1,JSABNVAL VALID JSAB?\n         BO    AJOBIDOK          NO.\n         MVC   TYPE+2(1),JSABJBID    COPY JOB TYPE.\n         MVC   TYPE+3(5),JSABJBID+3  COPY JOB NUMBER.\n         DROP  R1                JSAB.\n         LA    R7,TYPE+2\n         LA    R1,4\nAJIDLOOP CLI   1(R7),C'0'        LEADING ZERO?\n         BNE   AJOBIDOK          NO.\n         MVC   1(1,R7),0(R7)     YES, SUPPRESS IT.\n         MVI   0(R7),C' '\n         LA    R7,1(,R7)\n         BCT   R1,AJIDLOOP\nAJOBIDOK TM    OSLEVEL+1,CVTWLM  WLM INSTALLED?\n         BNO   ANOWLM            NO, ACCESS THE OUCB.\n         LA    R1,SECTCT         POINT TO AREA FOR RASD.\n         USING RASD,R1\n         LA    R15,RASDSIZE      GET SIZE OF RASD.\n         STH   R15,RASDLEN       SET THE LENGTH INDICATOR.\n         STM   R14,R12,12(R13)   SAVE REGISTERS.\n         LH    R0,ASID(,R5)      YES, GET SUBJECT ASID.\n         LR    R7,R13            PRESERVE SAVE AREA POINTER.\n         LA    R13,SECWORKA      POINT TO WORK AREA.\n         SYSEVENT REQFASD,ASID=(0)\n         LR    R13,R7            POINT BACK TO SAVE.\n         CLM   R15,1,FFFF        CHECK RETURN CODE.\n         LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         BNE   AWLMDONE          NO RESULTS RETURNED.\n         TM    RASDBITS,RASDMODE IN GOAL MODE?\n         BZ    AWLMGOAL          YES.\n         LH    R7,RASDPGN        NO, GET PERFORMANCE GROUP NUMBER.\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         MVC   PGN,ED3           MOVE IN THE EDIT MASK.\n         ED    PGN,WORK+6        EDIT THE OUTPUT FIELD.\n         LH    R7,RASDDMN        GET DOMAIN NUMBER\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         MVC   DMN,ED3           MOVE IN THE EDIT MASK.\n         ED    DMN,WORK+6        EDIT THE OUTPUT FIELD.\n         B     AWLMDONE\nAWLMGOAL MVC   SRVCLS,RASDSCL    SHOW THE SERVICE CLASS NAME.\n         B     AWLMDONE\n         DROP  R1                RASD.\nANOWLM   LH    R7,OUCBNPG        NEW PERFORMANCE GROUP NUMBER.\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         MVC   PGN,ED3           MOVE IN THE EDIT MASK.\n         ED    PGN,WORK+6        EDIT THE OUTPUT FIELD.\n         SLR   R7,R7             PREPARE FOR THE IC.\n         IC    R7,OUCBDMN        NEW DOMAIN NUMBER\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         MVC   DMN,ED3           MOVE IN THE EDIT MASK.\n         ED    DMN,WORK+6        EDIT THE OUTPUT FIELD.\nAWLMDONE LH    R7,OUCBSWC        LOAD TRANSACTION SWAP COUNT.\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         MVC   SWC,ED3Z          MOVE IN THE EDIT MASK.\n         ED    SWC,WORK+6        EDIT THE OUTPUT FIELD.\n         TM    OSLEVEL,CVTH4410  EARLIER THAN MVS/SP4?\n         BNO   WMROLD            YES, DO IT THE \"OLD\" WAY.\n         L     R7,OUCBCMRV       GET COMPOSITE RECOMMENDATION VALUE.\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         LA    R1,WMR+3          HANDLE MULTIPLE OF 1000.\n         MVC   WMR,ED3           MOVE IN EDIT MASK.\n         EDMK  WMR,WORK+6        EDIT THE RESULT.\n         LTR   R7,R7             IS THE VALUE NEGATIVE?\n         BNM   WMRDONE           NO.\n         BCTR  R1,0              YES.\n         MVI   0(R1),C'-'        SUPPLY A MINUS SIGN.\n         B     WMRDONE\nWMROLD   L     R7,96(,R6)        LOAD OUCBWMR.\n         LTR   R7,R7             SEE IF HI-ORDER BIT IS ON\n         BNM   WMROK             INDICATING WMR INVALID.\n         MVC   WMR,=C'ERR'       IF SO, MOVE IN NOT AVAIL INDICATOR\n         MVI   WMS+4,C'-'        AND BLANK OUT THE SERVICE COUNTER.\n         B     WMSOK             BYPASS THE SERVICE PROCESSING.\nWMROK    SRL   R7,8              DIVIDE BY 256.\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         MVC   WMR,ED3           MOVE IN EDIT MASK.\n         ED    WMR,WORK+6        EDIT THE RESULT.\nWMRDONE  L     R7,OUCBWMS        LOAD SERVICE UNITS THIS TRANSACTION\n         CVD   R7,WORK           AND CONVERT TO DECIMAL.\n         MVC   WMS,ED7           MOVE IN THE EDIT MASK.\n         ED    WMS,WORK+4        EDIT THE RESULT.\n         ICM   R7,B'1111',WORK   IS INTERVAL SERVICE OVER 9,999,999?\n         BZ    WMSOK             NO, SO NO LOSS OF SIGNIFICANT DIGITS.\n         MVI   WMS+7,C' '        YES, SO BLANK DIGIT.\n         LA    R1,=C'KMGT'       POINT TO SCALE INDICATORS.\nWMSLOOP  SRP   WORK,64-3,0       DIVIDE BY ONE THOUSAND AND TRUNCATE.\n         MVC   WMS(6),ED5\n         ED    WMS(6),WORK+5     SHOW SCALED VALUE.\n         MVC   WMS+6(1),0(R1)    LOAD SCALING INDICATOR.\n         LA    R1,1(,R1)         POINT TO NEXT INDICATOR JUST IN CASE.\n         OC    WORK(5),WORK      IS NUMBER NOW ON SCALE?\n         BNZ   WMSLOOP           NO, FURTHER SCALING IS REQUIRED.\nWMSOK    SLR   R7,R7             CLEAR REGISTER FOR INSERT CHARACTER.\n         ICM   R7,1,OUCBSRC      GET REASON CODE FOR LAST SWAP-OUT.\n         BZ    SKIPRLS           SWAPPED IN.\n         SLL   R7,1              MULTIPLY BY 2.\n         LA    R7,SWPREASN(R7)   POINT TO RIGHT ENTRY.\n         MVC   SWPRSN,0(R7)      SHOW REASON FOR LAST SWAP.\nSKIPRLS  L     R7,ASCBOUXB       POINT TO OUXB.\n         USING OUXB,R7\n         L     R7,OUXBSWCT       LOAD SWAP COUNT.\n         DROP  R7                OUXB.\n         MVC   SWCT,ED5Z\n         CVD   R7,WORK\n         ED    SWCT,WORK+5       SHOW TOTAL SWAP COUNT, BLANK IF ZERO.\n         L     R9,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R9           POINT TO CURRENT OUCB.\n         L     R9,RMCTTOD        GET CURRENT 1024MICROSECS SINCE IPL.\n         DROP  R9                RMCT.\n         ICM   R8,15,OUCBTMS     GET TIME OF LAST SWAP-OUT.\n         BNZ   GTLSWPTM          NON-ZERO SO CONTINUE.\n         L     R8,OUCBTMO        USE TRANSACTION START TIME.\nGTLSWPTM SR    R9,R8             SUBTRACT TIME OF LAST SWAP-OUT.\n         BNP   ASWPTMOK          PREPOSTEROUS, I CAN'T BELIEVE IT.\n         SLR   R8,R8             PREPARE FOR DIVIDE.\n         SLDL  R8,10             CONVERT TO MICROSECONDS.\n         D     R8,=F'1000000'    GET TIME SINCE SWAP-OUT IN SECONDS.\n         SLR   R8,R8             PREPARE FOR DIVIDE.\n         D     R8,=F'60'         CONVERT TO MINUTES AND SECONDS.\n         CVD   R8,WORK           GET SECONDS INTO DECIMAL.\n         OI    WORK+7,15\n         UNPK  ASWPTIME+8(2),WORK+6(2)\n         MVI   ASWPTIME+7,C':'   SEPARATE MINUTES AND SECONDS.\n         SLR   R8,R8             PREPARE FOR DIVIDE.\n         D     R8,=F'60'         CONVERT TO HOURS AND MINUTES.\n         CVD   R8,WORK           GET MINUTES INTO DECIMAL.\n         OI    WORK+7,15\n         UNPK  ASWPTIME+5(2),WORK+6(2)\n         LTR   R9,R9             ANY HOURS?\n         BZ    ASWPTMOK          NO, LEAVES HOURS SLOT BLANK\n         MVI   ASWPTIME+4,C':'   SEPARATE HOURS AND MINUTES.\n         CVD   R9,WORK           GET HOURS INTO DECIMAL.\n         MVC   ASWPTIME(4),ED3   LOAD EDIT MASK FOR HOURS.\n         ED    ASWPTIME(4),WORK+6\nASWPTMOK SLR   R1,R1\n         IC    R1,OUCBPGP        LOAD WMPGP OFFSET.\n         L     R9,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R9\n         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?\n         BM    AOLDPGP           NO.\n         DROP  R9,R6             RMCT, OUCB.\n         BCT   R1,SHOWASPP       YES, SHOW PERIOD IF NOT 1.\n         B     APERIOD1          PERIOD IS 1.\nAOLDPGP  SRA   R1,4              GET RELATIVE PERFORMANCE PERIOD.\n         BNZ   SHOWASPP          SHOW IF NOT IN FIRST PERF. PERIOD.\nAPERIOD1 CLI   TYPE,C' '         STARTED TASK OR SYSTEM ADDRESS SPACE?\n         BNH   GETASXCP          YES, DON'T BOTHER WITH FIRST P.P.\nSHOWASPP LA    R1,1(,R1)         CONVERT TO PERFORMANCE PERIOD NUMBER.\n         STC   1,PER             SUPPLY PERFORMANCE PERIOD NUMBER.\n         TR    PER,HEX           MAKE DISPLAYABLE HEX DIGIT.\nGETASXCP L     R9,ASCBIOSC       GET SMF EXCP COUNT THIS STEP.\n         CVD   R9,WORK\n         MVC   AEXCPCT,=XL12'402020206B2020206B202020'\n         ED    AEXCPCT,WORK+3    DISPLAY IT.\n         LR    R1,R9\n         S     R9,XCPSOFAR       GET CHANGE IN EXCP COUNT.\n         BZ    CNCTCALC          NO CHANGE SO PROCEED.\n         ST    R1,XCPSOFAR       SAVE CURRENT EXCP COUNT.\n         BNM   AIORTOK           POSITIVE VALUE SO PROCEED.\n         LR    R9,R1             CHANGE OF STEP - USE CURRENT COUNT.\nAIORTOK  M     R8,TENGRAND       CENTISECONDS PLUS TWO DECIMAL PLACES.\nEXCPRATS LR    R1,R0             GET CURRENT TIME.\n         S     R1,TOD            GET CHANGE IN TIME.\n         BNZ   GETIORAT          WON'T GET S0C9.\n         TIME  BIN               SPIN LOOP FOR NEW CENTISECOND.\n         B     EXCPRATS          RATS!  TRY AGAIN.\nGETIORAT DR    R8,R1             GET EXCP'S PER SECOND.\n         MVC   AIORATE,=X'402021204B2020'\n         CVD   R9,WORK\n         ED    AIORATE,WORK+5\n         OC    WORK(5),WORK      EXCP RATE UNDER A THOUSAND PER SEC?\n         BZ    CNCTCALC          YES, PROCEED.\n         SRP   WORK,64-2,5       NO, ROUND 1/100THS TO INTEGER.\n         MVC   AIORATE+1(6),ED5  SHOW HIGHER RATE THAN 999.99/SEC.\n         ED    AIORATE+1(6),WORK+5\n         CLI   WORK+4,0          RATE UNDER 100,000?\n         BE    CNCTCALC          IT SEEMS TO BE.\n         MVC   AIORATE+1(1),WORK+4\n         OC    AIORATE+1(4),=C'0000'\nCNCTCALC L     R9,ASCBDCTI       GET CHANNEL CONNECT TIME.\n         LR    R1,R9\n         S     R9,IOCSOFAR       GET CHANGE CHANNEL CONNECT TIME.\n         BZ    CNCTDONE          NO CHANGE SO LEAVE BLANK.\n         ST    R1,IOCSOFAR       SAVE CURRENT CHANNEL CONNECT TIME.\n         BNM   ACNCTOK           POSITIVE VALUE SO PROCEED.\n         LR    R9,R1             CHANGE OF STEP - USE CURRENT VALUE.\nACNCTOK  SLR   R8,R8\n         SLDL  R8,7              CONVERT TO MICROSECONDS.\n         LR    R1,R0             GET CURRENT TIME.\n         S     R1,TOD            GET CHANGE IN TIME.\n         DR    R8,R1             GET FRACTION.\n         MVI   IOPERCNT+4,C'%'   INDICATE PERCENTAGE.\n         SLR   R8,R8\n         CHI   R9,994            HIGHER THAN 9.94%?\n         BH    CNCTNTGR          YES, CAN'T FIT IN FRACTIONAL %.\n         AHI   R9,5              ROUND FRACTIONAL DIGIT.\n         D     R8,TEN            GET N.N%.\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         OI    WORK+7,X'0F'      ENSURE NUMERIC RESULT.\n         UNPK  IOPERCNT+1(2),WORK+6(2)\n         MVC   IOPERCNT+3(1),IOPERCNT+2\n         MVI   IOPERCNT+2,C'.'\n         B     CNCTDONE          PERCENTAGE CALCULATION DONE.\nCNCTNTGR LA    R9,50(,R9)        ROUND TO NEAREST PERCENT.\n         D     R8,AHUNDRED       GET PERCENTAGE.\n         MVC   IOPERCNT+1(3),STARS\n         C     R9,ONEGRAND       MORE THAN 999%\n         BNL   CNCTDONE          YES, FIELD OVERFLOW.\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   IOPERCNT,ED3      MOVE IN EDIT MASK.\n         ED    IOPERCNT,WORK+6   EDIT THE OUTPUT FIELD.\nCNCTDONE L     R9,IOCSOFAR       GET CURRENT CHANNEL CONNECT TIME.\n         SLR   R8,R8\n         SLDL  R8,7              CONVERT TO MICROSECONDS.\n         D     R8,TENGRAND       DIVIDE TO GET CENTISECONDS.\n         CVD   R9,WORK           CONVERT CONNECT TIME TO DECIMAL.\n         MVC   ASCONNTM,=X'4020202021204B2020' MOVE IN THE EDIT MASK.\n         ED    ASCONNTM,WORK+4   EDIT THE RESULT.\n         ICM   R7,15,ASCBOUXB    POINT TO OUXB.\n         BZ    AGETDP            IGNORE IF NONE.\n         USING OUXB,R7\n         L     R8,OUXBPIN        GET PRIVATE PAGE-IN COUNT.\n         A     R8,OUXBPOUT       ADD PRIVATE PAGE-OUT COUNT.\n         A     R8,OUXBVAMI       ADD VIO PAGE-IN COUNT.\n         A     R8,OUXBVAMO       ADD VIO PAGE-OUT COUNT.\n*        A     R8,OUXBSPIN       ADD SWAP PAGE-IN COUNT.\n*        A     R8,OUXBSPOT       ADD SWAP PAGE-OUT COUNT.\n         A     R8,OUXBCAPI       ADD COMMON PAGE-IN COUNT.\n         BZ    AGETDP            OUXB WAS DUMMY FOR SWAPPED-OUT JOB.\n         C     R7,ASCBOUXB       STILL THE RIGHT OUXB?\n         BNE   AGETDP            NO, A SWAP JUST HAPPENED.\n         DROP  R7                OUXB.\n         C     R8,ASPAGECT       YES, ANY CHANGE IN COUNT?\n         BE    AGETDP            NO, INDICATE THIS WITH BLANKS.\n         LR    R9,R8             COPY TOTAL PAGE TRANSFER COUNT.\n         S     R9,ASPAGECT       SUBTRACT PREVIOUS COUNT.\n         ST    R8,ASPAGECT       SAVE NEW TOTAL PAGE TRANSFER COUNT.\n         BNM   APGRTOK           PROCEED IF POSITIVE.\n         LR    R9,R8             CHANGE OF STEP - USE CURRENT COUNT.\nAPGRTOK  M     R8,ONEGRAND       CENTISECONDS PLUS ONE DECIMAL PLACE.\n         LR    R1,R0             GET CURRENT TIME.\n         S     R1,TOD            GET CHANGE IN TIME.\n         DR    R8,R1             GET PAGE TRANSFERS PER SECOND.\n         CVD   R9,WORK\n         MVC   APAGING,=X'40202021204B20'\n         ED    APAGING,WORK+5    DISPLAY TOTAL JOB PAGE TRANSFER RATE.\nAGETDP   UNPK  DP(3),ASCBDP(2)   DISPLAY THE DISPATCHING PRIORITY.\n         TR    DP,HEX-C'0'\n         MVI   DP+2,C' '\n         LM    R8,R9,ASCBEJST    LOAD UP TCB TIME.\n         SRDL  R8,12             GET MICROSECONDS.\n         LM    R6,R7,ASCBSRBT    LOAD UP SRB TIME.\n         SRDL  R6,12             GET MICROSECONDS.\n         ALR   R9,R7             ADD TOGETHER (LOW ORDER).\n         BC    12,NOCARRY        CHECK FOR OVERFLOW.\n         LA    R6,1(,R6)         ADD 1 FOR CARRY.\nNOCARRY  AR    R8,R6             ADD TOGETHER (HIGH ORDER).\nDELTABAD LR    R7,R0             CURRENT TIME-OF-DAY.\n         S     R7,TOD            GET TIME SINCE LAST CHECK.\n         BNZ   DELTAOK           NON-ZERO SO SHOULDN'T GET S0C9.\n         TIME  BIN               SEE IF SAME CENTISEC IS TRANSPIRING.\n         B     DELTABAD          JUST AVOIDED AN S0C9.\nDELTAOK  LR    R1,R7             COPY THE TIME CHANGE.\n         LR    R7,R9             TOTAL CPU TIME.\n         S     R7,CPUSOFAR       GET CPU TIME USAGE SINCE LAST CHECK.\nSKIPPCNT ST    R9,CPUSOFAR       STORE CPU TIME THIS STEP USED SO FAR.\n         ST    R0,TOD            STORE THIS TIME.\n         LTR   R7,R7             IS CPU USAGE ABSOLUTELY NIL?\n         BZ    SKIPCALC          YES, SKIP USAGE CALCULATION.\n         BNM   ACPUSOK           POSITIVE SO PROCEED.\n         LR    R7,R9             CHANGE OF STEP - USE CURRENT VALUE.\nACPUSOK  SLR   R6,R6\n         DR    R6,R1             GET FRACTION.\n         MVC   USAGE(5),=X'21204B206C'   MOVE IN EDIT MASK.\n         SLR   R6,R6\n         CHI   R7,994            HIGHER THAN 9.94%?\n         BH    INTEGER           YES, CAN'T FIT IN FRACTIONAL %.\n         AHI   R7,5              ROUND FRACTIONAL DIGIT.\n         D     R6,TEN            GET N.N%.\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         ED    USAGE-1(5),WORK+6 EDIT THE OUTPUT FIELD.\n         B     SKIPCALC          PERCENTAGE CALCULATION DONE.\nINTEGER  LA    R7,50(,R7)        ROUND TO NEAREST PERCENT.\n         D     R6,AHUNDRED       GET PERCENTAGE.\n         CVD   R7,WORK           CONVERT IT TO DECIMAL.\n         MVC   USAGE,ED3         MOVE IN EDIT MASK.\n         ED    USAGE,WORK+6      EDIT THE OUTPUT FIELD.\nSKIPCALC N     R8,=F'511'        AVOID ABEND S0C9.\n         D     R8,TENGRAND       DIVIDE TO GET CENTISECONDS.\n         CVD   R9,WORK           CONVERT (TCB+SRB) TIME TO DECIMAL.\n         MVC   CPUTIME,=X'4020202021204B2020' MOVE IN THE EDIT MASK.\n         ED    CPUTIME,WORK+4    EDIT THE RESULT.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    DONELINE          NO, LINE COMPLETED.\n         ICM   R6,15,ASCBTSB     POINT TO TERMINAL STATUS BLOCK.\n         BZ    DONELINE          NO TSB OR ENTRY MAY BE COMPLETED.\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         MVC   PSTEPTRM,104(R6)  GET TSO TERMINAL NAME.\n         MODESET MF=(E,MDSETN0)  RETURN TO PROBLEM KEY.\nDONELINE TR    JOB(ASDL),XLATETBL  ENSURE NO UNPRINTABLES.\n         LA    R2,ASLL(,R2)      UPDATE CURRENT BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNA          IF YES, THEN GO PUT THIS SCREEN.\nNOGOOD   LA    R10,ASENTLEN(,R10) POINT TO NEXT TABLE ENTRY.\n         BCT   R3,ASCBLOOP       BRANCH BACK TO LOOK AT NEXT MEMORY.\n         DROP  R10,R2,R5         ASENTRY, ASLINE, ASCB.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         L     R1,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         CR    R1,R2             SUMMARY LINE ON FIRST LINE?\n         BE    ASLLOKAY          YES, LAST LINE EDIT NOT NEEDED.\n         LA    R9,ASLL\n         LR    R1,R2\n         SR    R1,R9\n         MVI   2(R1),X'F4'       USE UNDERSCORE ON LAST LINE.   (I3279)\n         MVI   5(R1),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         USING ASLINE,R2\nASLLOKAY MVI   JOB,C' '          PUT TRAILING BLANKS ON SUMMARY LINE.\n         MVC   JOB+1(ASDL-1),JOB\n         DROP  R2                ASLINE.\n         L     R1,REALSHOW       FRAMES USED BY DISPLAYED JOBS.\n         SRL   R1,8              CONVERT TO MEGABYTES.\n         CVD   R1,WORK\n         MVC   REALVARS+12(6),ED5\n         ED    REALVARS+12(6),WORK+5\n         L     R1,REALJOBS       FRAMES USED BY EVERY ADDRESS SPACE.\n         SRL   R1,8              CONVERT TO MEGABYTES.\n         CVD   R1,WORK\n         MVC   REALVARS+30(6),ED5\n         ED    REALVARS+30(6),WORK+5\n         L     R1,FRAME#         GET NUMBER OF REAL FRAMES FOR CPU.\n         L     R9,RCEADDR        POINT TO RSM CNTRL & ENUMERATION AREA.\n         S     R1,136(,R9)       SUBTRACT CURRENT AVAILABLE FRAMES.\n         S     R1,REALJOBS       SUBTRACT ALL JOBS' PRIVATE FRAMES.\n         SRL   R1,8              CONVERT TO MEGABYTES.\n         CVD   R1,WORK           RESULT SHOULD BE COMMON MEGABYTES.\n         MVC   REALVARS+51(6),ED5\n         ED    REALVARS+51(6),WORK+5\n         MVC   0(LL,R2),REALINE  LOAD REAL STORAGE SUMMARY LINE.\n         LA    R2,ASLL(,R2)      ADJUST BUFFER POINTER.\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNA          IF YES, THEN GO PUT THIS SCREEN.\n         USING ASLINE,R2\n         MVI   JOB,C' '          PUT TRAILING BLANKS ON SUMMARY LINE.\n         MVC   JOB+1(ASDL-1),JOB\n         DROP  R2                ASLINE.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNA LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\n         MVC   VSBTRACE(256),SECTIOWA RESTORE OPTION \"VB\" TRACE.\nGETSCRNA L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         CLI   INBUFF,5          PF5/17?\n         BE    ASIDEXAM          YES, PREPARE FOR OPTION \"J\".\n         CLI   DOWNCNTR,C' '     CURRENTLY IN AUTO REFRESH MODE?\n         BH    FINDASVT          YES, CONTINUE WITH DISPLAYS.\n* THE FOLLOWING TEST IS ONLY NEEDED WHEN TGET NOWAIT IS USED, BECAUSE\n* A MESSAGE MAY HAVE CLEARED THE SCREEN, AND LEFT THE CURSOR AT THE\n* START OF THE NEXT LINE.  SO, OPTIONS \"D\" AND \"G\" NEED TO CHECK THIS.\n* WHEN THE CURSOR IS \"HOME\" IT IS ON THE TOP LINE IN THE SECOND COLUMN.\n* IF THE USER JUST USED THE DOWN ARROW TO MOVE THE CURSOR, THE CURSOR\n* SHOULD STAY IN COLUMN 2, AND NOT BE IN THE FIRST SCREEN COLUMN.\n*        CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n*        BE    CMDSCANA          YES, DO NOT PERFORM ZOOM-IN.\n         CLI   INBUFF+1,0        CURSOR ON HEADING LINE?\n         BNE   ASIDEXAM          NO, CHECK FOR ZOOM-IN REQUEST.\nCMDSCANA CLI   INCHARS,C' '      CHECK FOR JUST PLAIN OLD ENTER.\n         BE    FINDASVT          GENERATE A DISPLAY UPDATE.\n         CLI   INCHARS,C'J'      CHECK FOR SPECIFIC JOB NAME PREFIX.\n         BNE   TSUCHECK          IF NOT, TRY FOR TS USERS ONLY MODE.\n         XC    SELJOBNM,SELJOBNM ERASE PREVIOUS JOBNAME.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOJOBPAS          YES, DO IT.\n         CLI   INCHARS+1,C' '    JOB PREFIX SUPPLIED?\n         BNH   AGETJNAM          NO.\n         MVC   SELJOBNM,INCHARS+1   LOAD PRE-PROMPT SUPPLIED MASK.\n         LA    R15,SELJOBNM+1    POINT TO FIRST BYTE TO CHECK.\n         LA    R0,7              MAXIMUM BYTES TO CHECK.\n         LA    R1,1              PREFIX LENGTH DETERMINED SO FAR.\nAJOBLOOP CLI   0(R15),C' '       END OF JOB NAME PREFIX FOUND?\n         BNH   NOJOBPAS          YES, SAVE THE PREFIX LENGTH.\n         LA    R15,1(,R15)       NO, POINT TO NEXT BYTE.\n         LA    R1,1(,R1)         INCREMENT PREFIX LENGTH.\n         BCT   R0,AJOBLOOP\n         B     NOJOBPAS          EIGHT CHARACTER MASK SUPPLIED.\nAGETJNAM LA    R1,JPRFXMSG\n         LA    R0,JOBSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    AGETJNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   SELJOBNM,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNOJOBPAS STH   R1,JPRFXLEN       STORE PREFIX LENGTH.\n         B     FINDASVT          START FROM 1ST ASID FOR SELECTED JOBS.\nTSUCHECK CLI   INCHARS,C'T'      CHECK FOR TSO ONLY.\n         BNE   INITCHKY          IF NOT, TRY FOR INITIATOR MODE.\n         OI    ASFLAGS,ASTSU     SELECT TS USERS.\n         NI    ASFLAGS,255-ASSTC-ASJOB\nINOUTCHK CLI   INCHARS+1,C'O'    ALSO SHOW SWAPPED OUT JOBS?\n         BE    INANDOUT          YES.\n         CLI   INCHARS+1,C'I'    ALSO SHOW SWAPPED IN JOBS ONLY?\n         BE    INLIKFLN          YES.\n         B     FINDASVT          BYPASS FURTHER INPUT CHECKING.\nGIVEHLPA MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNA          GO DISPLAY HELP PANEL.\nINITCHKY CLI   INCHARS,C'Y'      CHECK FOR DISPLAY INITIATORS.\n         BNE   INITCHKN          IF NOT, TRY FOR NO INITIATORS.\n         NI    ASFLAGS,255-NINIT DON'T SUPPRESS INITIATORS.\n         B     INOUTCHK          CHECK FOR IN/OUT REQUESTS AS WELL.\nINITCHKN CLI   INCHARS,C'N'      CHECK FOR DON'T DISPLAY INITIATORS.\n         BNE   BATCHCHK          IF NOT, TRY FOR BACKGROUND ONLY.\n         OI    ASFLAGS,NINIT     SUPPRESS INITIATOR/TERMINATORS.\n         B     INOUTCHK          CHECK FOR IN/OUT REQUESTS AS WELL.\nBATCHCHK CLI   INCHARS,C'B'      CHECK FOR BACKGROUND ONLY.\n         BNE   OTHERCHK          BRANCH TO CHECK OTHER OPTIONS.\n         OI    ASFLAGS,ASSTC+ASJOB\n         NI    ASFLAGS,255-ASTSU REJECT TS USERS.\nSUBCHECK CLI   INCHARS+1,C'J'    CHECK FOR BATCH JOBS ONLY.\n         BNE   STCSONLY          BRANCH TO NEXT SUB-CHECK.\n         NI    ASFLAGS,255-ASSTC ONLY SELECT BATCH JOBS.\n         B     IOROTHRD          CHECK FOR IN/OUT REQUEST ALSO.\nSTCSONLY CLI   INCHARS+1,C'S'    CHECK FOR STARTED TASKS ONLY.\n         BNE   INOUTCHK          CHECK FOR IN/OUT REQUESTS AS WELL.\n         NI    ASFLAGS,255-ASJOB ONLY SELECT STARTED TASKS.\nIOROTHRD MVC   INCHARS+1(1),INCHARS+2\n         B     INOUTCHK          CHECK FOR IN/OUT REQUEST ALSO.\nOTHERCHK CLI   INCHARS,C'A'      CHECK FOR EVERYTHING.\n         BNE   XYZ               IF NOT, TRY FOR IN OR OUT MODES.\n         OI    ASFLAGS,ASSTC+ASJOB+ASTSU\n         B     SUBCHECK\nXYZ      DS    0H\n         CLI   INCHARS,C'O'      CHECK FOR OUT MODE.\n         BNE   WHATHECK\nINANDOUT OI    ASFLAGS,ASOUT     ENABLE SWAPPED-OUT SELECTION.\n         B     FINDASVT          RESTART ADDRESS SPACE SCAN.\nWHATHECK CLI   INCHARS,C'I'      CHECK FOR IN OR READY MODE.\n         BNE   GIVEHLPA          INVALID REQUEST, GIVE SOME HELP.\nINLIKFLN NI    ASFLAGS,255-ASOUT DISABLE SWAPPED-OUT SELECTION.\n         B     FINDASVT          START OVER FROM BEGINNING.\n         SPACE\nASIDEXAM DS    0H                INVOKE OPTION \"J\" FOR SELECTED ASID.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,INBUFF+1       GET RELATIVE LINE NUMBER OF CURSOR.\n         CH    R1,WINHDGCT       CURSOR ON A HEADING LINE?\n         BNH   AJZOOMIT          YES, DO NOT SPECIFY ANY ADDRESS SPACE.\n         BCTR  R1,0\n         BCTR  R1,0\n         A     R1,WINTOP         CONVERT TO WINDOW LINE NUMBER.\n         C     R1,WINLINES       CURSOR AFTER LAST LINE?\n         BH    AJZOOMIT          YES, DO NOT SUPPLY AN ASID.\n         MH    R1,WINLNLEN       NO, GET AN INDEX INTO WINDOW AREA.\n         A     R1,WINBUFF        POINT TO DETAIL LINE CONTENTS.\n         CLI   0(R1),X'FF'       CURSOR ON SUMMARY LINE?\n         BE    AJZOOMIT          YES, DO NOT SUPPLY AN ASID.\n         USING ASLINE,R1\n         ICM   R1,15,ADSPCID     GET THE HEX ASID CHARACTERS.\n         DROP  R1,R15            ASLINE, WNDWMNGR.\n         MVC   INBUFF(L'INBUFF+L'INCHARS),BLANKS   CLEAR INPUT BUFFER.\n         MVI   INCHARS+1,C'J'    LOAD SUBCOMMAND FOR \"J\" TO PROCESS.\n         MVC   INCHARS+2(4),STARS LOAD ASTERISKS TO FIRST HALF OF NAME.\n         STCM  R1,15,INCHARS+6   LOAD ASID TO SECOND HALF OF NAME.\n         B     *+10              DON'T CLEAR WHAT WAS JUST DONE.\nAINVOKEJ MVC   INBUFF(L'INBUFF+L'INCHARS),BLANKS   CLEAR INPUT BUFFER.\n         MVI   INBUFF,X'7C'      SIMULATE PFK 12.\n         MVI   INCHARS,C'J'      SIMULATE OPTION \"J\" REQUEST.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNA          PERFORM INTER-OPTION JUMP.\nAJZOOMIT CLI   INBUFF,5          OPTION \"J\" REQUEST ANYWAY?\n         BE    AINVOKEJ          YES, DO NOT SPECIFY ANY ADDRESS SPACE.\n         B     CMDSCANA          NO, SCAN FOR LOCAL SUBCOMMAND.\n         SPACE\nASTGSIZE DS    0H                DISPLAY STORAGE USAGE.\n         LA    R9,=C'KMGT'       POINT TO SCALING LABELS.\n         ST    R1,WORK           PUT THE PAGE COUNT INTO STORAGE.\n         TM    WORK,X'E0'        OKAY TO MULTIPLY BY FOUR?\n         BZ    ASTGKILO          YES.\n         SRL   R1,8              NO, CONVERT TO MEGABYTES.\n         LA    R9,1(,R9)         ADJUST LABEL POINTER.\n         B     ASTGLOOP          GO PROCESS.\nASTGKILO SLL   R1,2              CONVERT PAGE COUNT TO KILOBYTES.\nASTGLOOP CL    R1,=F'99999'      IS 5 DECIMAL DIGITS SUFFICIENT?\n         BNH   ASTGSHOW          YES, FORMAT AND DISPLAY IT.\n         SRL   R1,10             NO, DIVIDE BY 1024.\n         LA    R9,1(,R9)         ADJUST LABEL POINTER.\n         B     ASTGLOOP          GO TRY AGAIN.\nASTGSHOW CVD   R1,WORK\n         MVC   0(6,R15),ED5\n         ED    0(6,R15),WORK+5\n         MVC   6(1,R15),0(R9)    SUPPLY SCALING INDICATOR.\n         BR    R14\n         SPACE\nASELDMSK MVC   70(0,R2),SELJOBNM                <<< EXECUTED >>>\n         SPACE\n         DROP  R11               ADDRSPCS.\n         TITLE 'ADDRESS SPACE MONITOR - VARIABLES AND CONSTANTS'\nREALJOBS DC    F'0'              NUMBER OF FRAMES USED BY ALL JOBS.\nREALSHOW DC    F'0'              NUMBER OF FRAMES USED BY SHOWN JOBS.\nSWPREASN EQU   *                 SWAP REASONS.\n         DC    C'IN'         0 - SWAPPED IN.\n         DC    C'TO'         1 - TERMINAL OUTPUT WAIT.\n         DC    C'TI'         2 - TERMINAL INPUT WAIT.\n         DC    C'LW'         3 - LONG WAIT.\n         DC    C'XS'         4 - AUXILIARY STORAGE SHORTAGE.\n         DC    C'RS'         5 - CENTRAL (REAL) STORAGE SHORTAGE.\n         DC    C'DW'         6 - DETECTED WAIT.\n         DC    C'RQ'         7 - REQUESTED SWAP.\n         DC    C'NQ'         8 - ENQUEUE EXCHANGE.\n         DC    C'EX'         9 - EXCHANGE BASED ON WMR VALUE.\n         DC    C'US'        10 - UNILATERAL.\n         DC    C'TS'        11 - TRANSITION SWAP.\n         DC    C'IC'        12 - IMPROVE CENTRAL STORAGE.\n         DC    C'IP'        13 - IMPROVE SYSTEM PAGING RATE.\n         DC    C'MR'        14 - MAKE ROOM TO SWAP IN OUT-TOO-LONG A.S.\n         DC    C'AW'        15 - APPC WAIT.\n         DC    C'IW'        16 - OMVS INPUT WAIT.\n         DC    C'OW'        17 - OMVS OUTPUT WAIT.\n         DC    C'SR'        18 - IN-REAL SWAP.\n         DC    C'  '        19 - SPARE SLOT.\nASFLAGS  DC    X'E0'             ADDRESS SPACE SELECTION FLAGS.\nASSTC    EQU   X'80'             SELECT STARTED TASKS.\nASJOB    EQU   X'40'             SELECT BATCH JOBS.\nASTSU    EQU   X'20'             SELECT TIME SHARING USERS.\nASOUT    EQU   X'10'             SELECT SWAPPED-OUT ADDRESS SPACES.\nNINIT    EQU   X'08'             SUPPRESS DISPLAY OF DRY INITIATORS.\n*        EQU   X'04'             SPARE.\n*        EQU   X'02'             SPARE.\n*        EQU   X'01'             SPARE.\nASSELINE DC    CL79' SELECTION CRITERIA:   STC   JOB   TSU   IN    NOIN+\n               IT   JOB-NAME-MASK=******** '\nHEADINGA DC    C' JOBNAME STEPNAME PROCSTEP ENF USS CLASS/ID LOC DP DMN+\n                PGN PP ASID  REAL  ESTOR    AUX  XSC SWAPS SR PAGING IO+\n               RATE  EXCP-COUNT  WMR INT-SRV SWAP-TIME  CONNECT IOC% CP+\n               U-TIME CPU%'\nREALINE  DC    X'FF41001BF4402842F2' FIXED FLAG - NON-SCROLLABLE LINE.\nREALVARS DC    CL79'REAL MEMORY: 00000MB DISPLAYED 00000MB FOR ALL JOBS+\n                00000MB COMMON  00000MB MAX'\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAB": {"ttr": 11525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+Z\\x00A\\x00\\x94\\x05\\x0f\\x01\\x11\\x18\\x9f\\x11V\\x06)\\x02\\x14\\x05\\n\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "43.90", "flags": 0, "createdate": "1994-02-19T00:00:00", "modifydate": "2011-07-08T11:56:41", "lines": 1577, "newlines": 532, "modlines": 1290, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1986,1994,2006  PRYCROFT SIX PTY LTD\n         TITLE 'LLA FETCH STATISTICS REPOSITORY STRUCTURE MAPPING'\n         COPY  IMLLAREA\n         TITLE 'PROGRAM FETCH STATISTICS DISPLAY LINE MAPPING'\nBFLINE   DSECT\nBFENTRY  DS    XL(L'LOWX)\nBFPROG   DS    CL8\nBFSEP01  DS    CL1\nBFSTOR   DS    CL7\nBFSEP02  DS    0CL1\nBFLAST   DS    CL9\nBFSEP03  DS    0CL1\nBFPCNT   DS    CL8\nBFSEP04  DS    0CL1\nBFPAVG   DS    CL9\nBFSEP05  DS    0CL1\nBFLCNT   DS    CL8\nBFSEP06  DS    0CL1\nBFLAVG   DS    CL9\nBFSEP07  DS    CL1\nBFLDATE  DS    CL6\nBFSEP08  DS    CL1\nBFLTIME  DS    CL11\nBFSEP09  DS    CL1\nBFLJOB   DS    CL8\nBFSEP10  DS    CL1\nBFLASID  DS    CL4\nBFSEP11  DS    CL1\nBFFDATE  DS    CL6\nBFSEP12  DS    CL1\nBFFTIME  DS    CL11\nBFSEP13  DS    CL1\nBFFJOB   DS    CL8\nBFSEP14  DS    CL1\nBFFASID  DS    CL4\nBFSEP15  DS    0CL1\nBFCNCT   DS    CL4\n         DS    CL1\nBFSEP16  DS    0CL1\nBFLOCN   DS    CL4\n         DS    CL1\nBFSEP17  DS    CL1\nBFFO     DS    CL2\n         DS    CL1\nBFNX     DS    CL2\n         DS    CL1\nBFOL     DS    CL2\n         DS    CL1\nBFOV     DS    CL2\n         DS    CL1\nBFRF     DS    CL2\n         DS    CL1\nBFRN     DS    CL2\n         DS    CL1\nBFRU     DS    CL2\n         DS    CL1\nBFSC     DS    CL2\n         DS    CL1\nBFTS     DS    CL2\nBFSEP18  DS    CL1\nBFAMOD   DS    CL4\nBFSEP19  DS    CL1\nBFRMOD   DS    CL4\nBFSEP20  DS    CL1\nBFDSET   DS    CL44\nBFDL     EQU   *-BFPROG\nBFLL     EQU   *-BFENTRY\n         TITLE 'LINK LIST AND LINK PACK AREA SEARCH SUBROUTINE'\nIMPXA    CSECT\n         USING BILDLIST,R11,R10\nBILDLIST DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '     ADJUST ANY COMMAND INPUT.\n         CLI   BSUBOPTN,C'B'     SHOWING BLDL SEARCH RESULTS?\n         BNE   CMDSCANB          NO, NO DATA STREAM SUFFIX REQUIRED.\nBBSETSUF L     R1,CRNTOPTN       POINT TO CURRENT OPTION VECTOR.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVI   9(R1),4           SET HEADING LINE COUNT.\n         MVI   WINHDGCT+1,4      SET HEADING LINE COUNT.\n         MVI   13(R1),LL         SET CORRECT LINE LENGTH.\n         MVI   WINLNLEN+1,LL     SET CORRECT LINE LENGTH.\n         LA    R1,PGMFUDGE       POINT TO DATA STREAM SUFFIX.\n         ST    R1,WINSUFIX       SAVE ITS ADDRESS.\n         LA    R1,PGMFIXLN-1     GET DATA STREAM SUFFIX LENGTH CODE.\n         ST    R1,WINSUFLN       SAVE IT.\n         CLI   OLDCOLS+3,80      USING A WIDE SCREEN?\n         BNH   BBSUFXOK          NO.\n         L     R1,OLDCOLS        YES, GET THE COLUMN COUNT.\n         MHI   R1,3\n         LA    R1,53(,R1)        GET BUFFER ADDRESS.\n         STC   R1,PGMFUDGE+2\n         SRL   R1,6\n         STC   R1,PGMFUDGE+1\n         NI    PGMFUDGE+2,X'3F'\n         TR    PGMFUDGE+1(2),TABLE\nBBSUFXOK XC    WORK2,WORK2       RESET SAVED REAL NAME.\n         CLI   INCHARS,C' '      ANY INITIAL SUBCOMMAND TO PROCESS?\n         BH    CMDSCANB          YES, PROCESS IT.\n         SPACE\nREDOBLDL MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         SLR   R0,R0\n         ST    R0,WINLINES       INITIALIZE LINE COUNTER.\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         LA    R9,REDOLLAF       POINT TO LLA FETCH DISPLAY ROUTINE.\n         CLI   BSUBOPTN,C'F'     LLA FETCH STATISTICS TO BE DISPLAYED?\n         BER   R9                YES, GO DO IT.\n         MVC   LL-79(79,R2),HEADINGB     LOAD DISPLAYABLE HEADING.\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         LR    R1,R2             RETAIN THIS ADDRESS FOR A SECOND.\n         BAS   R14,BSPCLINE      INSERT A BLANK LINE.\n         CLI   BSUBOPTN,C'B'     CORRECT SUB-OPTION FOR BLDL SEARCH?\n         BE    BILDITIS          YES, PROCEED.\n         MVI   BSUBOPTN,C'B'     NO, BUT IT IS NOW.\n         MVI   2(R1),X'F2'       SHOW MESSAGE IN REVERSE VIDEO. (I3279)\n         MVI   5(R1),X'F8'       SHOW MESSAGE IN HIGH INTENSITY.\n         MVI   8(R1),X'F2'       SHOW MESSAGE IN RED.           (I3279)\n         MVC   LL-79(79,R1),NOLLAMSG  LOAD MESSAGE INTO LINE.\nBILDITIS MVC   0(LL-79,R2),HIGHX SUPPLY ATTRIBUTE BYTES.\n         MVC   LL-60(33,R2),=C'PROGRAM NAME SEARCH ARGUMENT ===>'\n         MVC   LL-26(8,R2),BILDNAME\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         BAS   R14,BSPCLINE      INSERT A BLANK LINE.\n         MVC   BLDLNAME,BILDNAME\n         CLI   BILDNAME,C' '     ANY MODULE TO FIND?\n         BH    BUILDIT           YES, START LOOKING.\n         MVC   0(LL-79,R2),MEDX  SUPPLY ATTRIBUTE BYTES.\n         MVC   LL-60(12,R2),=CL12'CATALOG NAME'\n         MVC   LL-15(13,R2),=CL13'VOLUME  STRNO'\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R5,CVTGDA         POINT TO THE GLOBAL DATA AREA.\n         USING GDA,R5\n         L     R5,GDACSA         POINT TO THE START OF CSA.\n         DROP  R5                GDA.\n         L     R3,CVTCBSP        POINT TO THE ACCESS METHOD BLOCK LIST.\n         DROP  R3                CVT.\n         L     R1,8(,R3)         POINT TO THE VSAM ACB.\n         L     R1,64(,R1)        POINT TO THE CATALOG AUX. WORK AREA.\n         MVC   LL-76(15,R2),=C'MASTER CATALOG:'\n         MVC   LL-60(44,R2),52(R1)   LOAD THE MASTER CATALOG NAME.\n         L     R4,28(,R1)        SHOW THE VOLUME SERIAL NUMBER.\n         CR    R4,R5             IS UCB ADDRESS BELOW CSA?\n         BL    *+10              YES, SKIP VOLUME SERIAL DISPLAY.\n         USING UCBOB,R4\n         MVC   LL-15(6,R2),UCBVOLI\n         LH    R0,46(,R1)        GET THE REQUEST-PARAMETER-LIST COUNT.\n         CVD   R0,WORK\n         MVC   LL-8(6,R2),ED5\n         ED    LL-8(6,R2),WORK+5\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         L     R3,20(,R3)        POINT TO LATEST OPEN CATALOG CAX.\n         MVC   LL-76(19,R2),=C'USED USER CATALOGS:'\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\nBUSRCTLP MVC   LL-60(44,R2),52(R3)   LOAD THE USER CATALOG NAME.\n         L     R4,28(,R3)        SHOW THE VOLUME SERIAL NUMBER.\n         CR    R4,R5             IS UCB ADDRESS BELOW CSA?\n         BL    BCDISKOK          YES, SKIP VOLUME SERIAL DISPLAY.\n         TM    3(R4),X'80'       IS THE VOLUME ONLINE?\n         BZ    BCDISKOK          NO, CAN'T SHOW VOLUME SERIAL NUMBER.\n         MVC   LL-15(6,R2),UCBVOLI\nBCDISKOK LH    R0,46(,R3)        GET THE REQUEST-PARAMETER-LIST COUNT.\n         CVD   R0,WORK\n         MVC   LL-8(6,R2),ED5Z\n         ED    LL-8(6,R2),WORK+5\n         TM    8(R3),X'20'       IS THE CATALOG CLOSED?\n         BZ    BCOPENOK          NO.\n         MVC   LL-78(8,R2),=CL8'*CLOSED*'\nBCOPENOK TM    11(R3),X'80'      IS THE CATALOG FREED?\n         BO    BCALOCOK          NO.\n         MVC   LL-69(7,R2),=CL7'*FREED*'\nBCALOCOK BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         DROP  R4                UCBOB.\nBSKPMSTR ICM   R3,B'1111',4(R3)  POINT TO NEXT OPEN USER CATALOG CAX.\n         BZ    SHOWBLDL          END OF CHAIN IF ZERO.\n         CR    R3,R1             NOW AT MASTER CATALOG CAX?\n         BNZ   BUSRCTLP          NO, FOUND ANOTHER OPEN USER CATALOG.\n         B     BSKPMSTR          YES, SKIP IT.  (LAST ON CHAIN ANYWAY.)\n         DROP  R15               WNDWMNGR.\n         SPACE\nBUILDIT  L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R3,CVTLINK        POINT TO THE IPL-TIME LINK LIST DCB.\n         L     R4,CVTLLTA        POINT TO THE IPL-TIME LINK LIST TABLE.\n         DROP  R1                CVT.\n         TM    OSLEVEL+1,CVTDYNL OS/390 1.3 OR LATER?\n         BNO   BUILDLOK          NO, NO DYNAMIC LINK LIST FACILITY.\n         L     R1,PSAAOLD        POINT TO THE CURRENT ASCB.\n         USING ASCB,R1\n         L     R1,ASCBASSB       POINT TO THE CURRENT ASSB.\n         DROP  R1                ASCB.\n         USING ASSB,R1\n         L     R1,ASSBDLCB       POINT TO DYNAMIC LNKLST CONTROL BLOCK.\n         DROP  R1                ASSB.\n         USING DLCB,R1\n         LM    R3,R4,DLCBDCB@    GET CURRENT ADDRESS SPACE LNKLST DTLS.\n         DROP  R1                DLCB.\nBUILDLOK ST    R3,BBLNKDCB       SAVE CURRENT LINK LIST DCB ADDRESS.\n         ST    R4,BBLNKLLT       SAVE CURRENT LINK LIST TABLE ADDRESS.\n         XC    BLDLTT(68),BLDLTT ZERO ANY PREVIOUS DATA.\n         SLR   R3,R3             ZERO DCB POINTER & USE BLDL, NOT FIND.\n         CLC   BLDLMODE,BLLAFLAG PERFORMING STANDARD SEARCH BLDL?\n         BE    DOBLDL            YES, GO DO IT.\n         L     R1,CVTPTR(,0)     NO, POINT TO THE CVT.\n         USING CVT,R1\n         L     R3,CVTLINK        GET CSV-RECOGNIZED DCB ADDRESS.\n         DROP  R1                CVT.\n         CLI   BLLAFLAG,C'R'     LLACOPY FOR REFRESH TO BE DONE?\n         BNE   DOBLDL            NO, PERFORM A CONVENTIONAL BLDL.\n         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.\n         LLACOPY DCB=(R3),BLDLLIST=BLDLIST,MF=(E,BLLALIST)\n         STC   R15,WORK          SAVE RETURN CODE.\n         STC   R0,WORK+1         SAVE REASON CODE.\n         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM STATE.\n         B     DONEBLDL          HANDLE THE AFTERMATH.\nDOBLDL   LA    R0,BLDLIST        POINT TO BLDL PARAMETER LIST.\n         BLDL  (R3),(0)          PERFORM DIRECTORY SEARCH.\n         STC   R15,WORK          SAVE RETURN CODE.\n         STC   R0,WORK+1         SAVE REASON CODE.\n         CLC   BLDLMODE,BLLAFLAG AUTHORIZATION USED?\n         BE    DONEBLDL          NO, BOTH FLAGS ARE '0'.\nDONEBLDL MVC   0(LL-79,R2),MEDX  SUPPLY ATTRIBUTE BYTES.\n         MVC   LL-70(L'BLDLHDG,R2),BLDLHDG   SHOW BLDL RESULTS.\n         MVC   LL-52(1,R2),BLDLMODE          SHOW BLDL DCB MODE.\n         UNPK  LL-31(3,R2),WORK(2)\n         TR    LL-31(2,R2),HEX-C'0'\n         MVI   LL-29(R2),C''''   DISPLAY RETURN CODE.\n         UNPK  LL-12(3,R2),WORK+1(2)\n         TR    LL-12(2,R2),HEX-C'0'\n         MVI   LL-10(R2),C''''   DISPLAY REASON CODE.\n         CLI   BLLAFLAG,C'R'     LLACOPY FOR REFRESH DONE?\n         BNE   BLDLHDOK          NO.\n         MVC   LL-73(7,R2),=C'LLACOPY'\n         MVI   LL-52(R2),C'L'    ONLY LINK LIST REFRESH IS SUPPORTED.\nBLDLHDOK BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVC   LL-70(5,R2),=C'NAME='\n         MVC   LL-65(8,R2),PDS2NAME\n         CLI   PDS2TTRP+2,0      IS R OF TTR ZERO?\n         BNE   WASFOUND          NO, REPORT INFORMATION FOUND.\n         LA    R1,LL-50(,R2)     POINT TO MESSAGE AREA.\n         MVC   0(22,R1),=C'NOT FOUND IN LINK LIST'\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         CLI   WORK,8            WAS THE BLDL RETURN CODE EIGHT?\n         BNE   PLPALOOK          NO.\n         MVC   0(9,R1),=C'I/O ERROR'\n         B     PLPALOOK          YES, REPORT DIRECTORY I/O ERROR.\nWASFOUND MVC   LL-55(4,R2),=C'TTR='\n         UNPK  LL-51(7,R2),PDS2TTRP(4)\n         TR    LL-51(6,R2),HEX-C'0'\n         MVI   LL-45(R2),C' '\n         MVC   LL-43(14,R2),=C'CONCATENATION='\n         UNPK  LL-29(3,R2),PDS2CNCT(2)\n         TR    LL-29(2,R2),HEX-C'0'\n         MVI   LL-27(R2),C' '\n         MVC   LL-25(9,R2),=C'LOCATION='\n         UNPK  LL-16(3,R2),PDS2LIBF(2)\n         TR    LL-16(2,R2),HEX-C'0'\n         MVI   LL-14(R2),C' '\n         ST    R2,SAVE+28        SAVE DISPLAY LINE ADDRESS FOR LATER.\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVC   LL-70(5,R2),=C'SIZE='\n         LA    R15,LL-65(,R2)    POINT TO DISPLAY AREA.\n         UNPK  0(7,R15),PDS2STOR(4)\n         BAS   R14,B6HEXFIX      FORMAT AND SUPPRESS LEADING ZEROS.\n         MVC   LL-55(4,R2),=C'EPA='\n         LA    R15,LL-51(,R2)    POINT TO DISPLAY AREA.\n         UNPK  0(7,R15),PDS2EPA(4)\n         BAS   R14,B6HEXFIX      FORMAT AND SUPPRESS LEADING ZEROS.\n         MVC   WORK(1),PDS2INDC\n         NI    WORK,PDS2LUSR     GET USERDATA HALFWORD COUNT.\n         LA    R1,PDSBCEND       POINT PAST END OF SECTION.\n         TM    PDS2ATR1,PDS2SCTR IS THIS A SCATTER PROGRAM?\n         BZ    BPOCHECK          NO.\n         LA    R1,8(,R1)         YES, POINT PAST SCATTER SECTION.\nBPOCHECK TM    PDS2FTB1,PDS2PGMO PROGRAM OBJECT?\n         BO    NOTF4AE           YES, CAN'T BE AE LOAD MODULE.\n         TM    PDS2FTB1,X'41'    F4 ADDRESSING EXTENSION?\n         BZ    NOTF4AE           NO.\n         TM    PDS2FTB2,X'C0'    F4 AE EXPANSION PRESENT?\n         BZ    NOTF4AE           NO.\n         LA    R1,8(,R1)         YES, POINT PAST AE SECTION.\nNOTF4AE  TM    PDS2INDC,PDS2ALIS IS THE MEMBER AN ALIAS?\n         BZ    NOTALIAS          NO.\n         MVC   LL-5(5,R2),=C'ALIAS'\n         LA    R15,11+1(,R1)     POINT PAST REAL NAME (READY FOR HW).\n         LA    R0,PDS2USRD       POINT TO START OF USER DATA.\n         SR    R15,R0            GET NECESSARY BYTE COUNT.\n         SRL   R15,1             GET NECESSARY HALFWORD COUNT.\n         CLM   R15,1,WORK        SUFFICIENT USER DATA PRESENT?\n         BH    BBIGOKAY          NO, CAN'T KNOW REAL NAME.\n         MVC   WORK2,3(R1)       YES, SAVE REAL MEMBER NAME.\n         OC    WORK2,BLANKS      TRY TO ENSURE PRINTABLE CHARACTERS.\n         LA    R1,11(,R1)        POINT PAST ALIAS SECTION.\nNOTALIAS TM    PDS2FTB1,PDS2SSI  SSI DATA PRESENT?\n         BZ    BSSIOKAY          NO.\n         LA    R1,1(,R1)         YES.\n         SRL   R1,1              PROCESS SSI SECTION ALIGNMENT.\n         SLL   R1,1              POINT TO SSI SECTION.\n         LA    R1,4(,R1)         POINT PAST SSI SECTION.\nBSSIOKAY TM    PDS2FTB1,PDSAPFLG APF DATA PRESENT?\n         BZ    BAPFOKAY          NO.\n         LA    R15,2+1(,R1)      POINT PAST APF CODE (READY FOR H/W).\n         LA    R0,PDS2USRD       POINT TO START OF USER DATA.\n         SR    R15,R0            GET NECESSARY BYTE COUNT.\n         SRL   R15,1             GET NECESSARY HALFWORD COUNT.\n         CLM   R15,1,WORK        SUFFICIENT USER DATA PRESENT?\n         BH    BBIGOKAY          NO, CAN'T HAVE APF CODE.\n         MVC   LL-77(5,R2),=C'AC=??'\n         CLI   0(R1),1           IS AUTHORIZATION CODE ONE BYTE LONG?\n         BNE   BBIGOKAY          NO, INVALID DATA.\n         UNPK  LL-74(3,R2),1(2,R1)\n         TR    LL-74(2,R2),HEX-C'0'\n         MVI   LL-72(R2),C' '    SHOW PROGRAM AUTHORIZATION CODE.\n         LA    R1,2(,R1)         POINT PAST APF SECTION.\nBAPFOKAY TM    PDS2FTB1,PDS2BIG+PDS2PGMO\n         BNO   BBIGOKAY          NOT LARGE PROGRAM OBJECT.\n         UNPK  LL-65(9,R2),1(5,R1)\n         TR    LL-65(8,R2),HEX-C'0'\n         MVI   LL-57(R2),C' '    SHOW LARGE PROGRAM OBJECT SIZE.\n         UNPK  LL-51(9,R2),5(5,R1)          MAIN ENTRY POINT.\n         TM    PDS2INDC,PDS2ALIS IS THE MEMBER AN ALIAS?\n         BZ    BBIGEPOK          NO.\n         UNPK  LL-51(9,R2),9(5,R1)          ALIAS ENTRY POINT.\nBBIGEPOK TR    LL-51(8,R2),HEX-C'0'\n         MVI   LL-43(R2),C' '    SHOW LARGE ENTRY POINT OFFSET.\nBBIGOKAY LR    R1,R2             COPY LINE POINTER.\n         TM    PDS2FTB1,PDS2PGMO PROGRAM OBJECT?\n         BZ    LEVELCHK          NO.\n         LA    R1,3(,R2)         YES, ADJUST LINE POINTER.\n         TM    PDS2FTB3,PDS2NMIG MIGRATABLE TO LOAD MODULE?\n         BZ    DOWNWARD          YES.\n         MVC   LL-40(2,R2),=C'NM'\n         B     DOWNWARD          F-LEVEL IRRELEVANT.\nLEVELCHK MVC   LL-43(2,R2),=C'DC'\n         TM    PDS2ATR2,PDS2FLVL F-LEVEL ONLY?\n         BZ    DOWNWARD          NO, DOWNWARD COMPATIBLE.\n         MVC   LL-43(2,R2),=C'FO'\nDOWNWARD TM    PDS2ATR1,PDS2EXEC EXECUTABLE?\n         BO    EXECABLE          YES.\n         MVC   LL-40(2,R1),=C'NX'\nEXECABLE TM    PDS2ATR1,PDS2LOAD ONLY-LOADABLE?\n         BZ    LOADABLE          NO.\n         MVC   LL-37(2,R1),=C'OL'\nLOADABLE TM    PDS2FTB1,PDS2PAGA PAGE ALIGNED?\n         BZ    ANYALIGN          NO.\n         MVC   LL-34(2,R2),=C'PG'\nANYALIGN TM    PDS2ATR1,PDS2OVLY OVERLAY STRUCTURE?\n         BZ    NOTOVLY           NO.\n         MVC   LL-34(2,R2),=C'OV'\nNOTOVLY  TM    PDS2ATR2,PDS2REFR REFRESHABLE?\n         BZ    NOTREFR           NO.\n         MVC   LL-31(2,R2),=C'RF'\nNOTREFR  TM    PDS2ATR1,PDS2RENT REENTERABLE?\n         BZ    NOTRENT           NO.\n         MVC   LL-28(2,R2),=C'RN'\nNOTRENT  TM    PDS2ATR1,PDS2REUS REUSEABLE?\n         BZ    NOTREUS           NO.\n         MVC   LL-25(2,R2),=C'RU'\nNOTREUS  TM    PDS2ATR1,PDS2SCTR SCATTER FORMAT?\n         BZ    NOTSCTR           NO.\n         MVC   LL-22(2,R2),=C'SC'\nNOTSCTR  TM    PDS2ATR2,PDS2TSTN TEST?\n         BZ    NTESTRAN          NO.\n         MVC   LL-19(2,R2),=C'TS'\nNTESTRAN TM    PDS2FTB1,PDS2PGMO PROGRAM OBJECT?\n         BO    MVSXATTR          YES, CHECK MVS/XA MODES.\n         TM    PDS2FTB1,X'41'    AE LINK EDITED?\n         BZ    MVSXATTR          NO, CHECK MVS/XA MODES.\n         MVC   LL-15(2,R2),=C'AE'\n         TM    PDS2FTB2,X'C0'    AE SECTION PRESENT IN USERDATA?\n         BZ    GOTRMODE          NO, HAVE CORRECT DETAILS.\n         MVC   LL-15(5,R2),=C'CAP31'\n         TM    PDS2FTB2,X'04'    AMODE=CAP31?\n         BO    GOTRMODE          YES, HAVE CORRECT DETAILS.\n         MVC   LL-12(2,R2),=C'24'\n         TM    PDS2FTB2,X'03'    AMODE=CAP24?\n         BO    GOTRMODE          YES, HAVE CORRECT DETAILS.\n         MVC   LL-15(5,R2),=C'ANY  '\n         TM    PDS2FTB2,X'02'    AMODE=ANY?\n         BO    GOTRMODE          YES, HAVE CORRECT DETAILS.\n         MVC   LL-14(2,R2),=C'31'\n         TM    PDS2FTB2,X'01'    AMODE=31?\n         BO    GOTRMODE          YES, HAVE CORRECT DETAILS.\n         MVC   LL-14(2,R2),=C'24'\n         BO    GOTRMODE          AMODE=24 WAS SPECIFIED.\nMVSXATTR TM    PDS2INDC,PDS2ALIS ALIAS?\n         BO    ALAMODE           YES.\n         TM    PDS2FTB2,PDSMAMOD\n         BZ    GOTAMODE          NO AMODE SPECIFICATION.\n         MVC   LL-15(3,R2),=C'ANY'\n         BO    GOTAMODE          AMODE ANY SPECIFIED.\n         MVC   LL-14(2,R2),=C'31'\n         TM    PDS2FTB2,X'02'\n         BO    GOTAMODE          AMODE 31 SPECIFIED.\n         MVC   LL-14(2,R2),=C'64'\n         B     GOTAMODE          AMODE 64 SPECIFIED.\nALAMODE  TM    PDS2FTB2,PDSAAMOD\n         BZ    GOTAMODE          NO AMODE SPECIFICATION.\n         MVC   LL-15(3,R2),=C'ANY'\n         BO    GOTAMODE          AMODE ANY SPECIFIED.\n         MVC   LL-14(2,R2),=C'31'\n         TM    PDS2FTB2,X'08'\n         BO    GOTAMODE           AMODE 31 SPECIFIED.\n         MVC   LL-14(2,R2),=C'64' AMODE 64 SPECIFIED.\nGOTAMODE TM    PDS2FTB2,PDSLRMOD\n         BZ    GOTRMODE          RMODE ANY SPECIFIED.\n         MVC   LL-11(4,R2),=C'RANY'\nGOTRMODE BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         CLI   PDS2LIBF,PDS2LLNK WAS THE MEMBER FOUND IN THE LINK LIST?\n         BNE   STPLBCHK          NO, MUST BE FROM SOME SORT OF TASKLIB.\n         L     R7,BBLNKDCB       POINT TO THE LINK LIST DCB.\n         USING IHADCB,R7\n         L     R5,BBLNKLLT       POINT TO THE LINK LIST TABLE.\n         LA    R5,8(,R5)         POINT TO FIRST ENTRY.\n         SLR   R6,R6\n         ICM   R6,1,PDS2CNCT     LOAD CONCATENATION COUNT - IS IT ZERO?\n         BZ    FOUNDLL           YES, FOUND THE LIBRARY ALREADY.\n         LR    R0,R6             COPY CONCATENATION COUNT.\nNXTLLCHK LA    R5,45(,5)         POINT TO NEXT ENTRY.\n         BCT   R0,NXTLLCHK       GET NEXT ENTRY.\nFOUNDLL  ICM   R7,7,DCBDEBA      POINT TO THE LINK LIST/STEPLIB DEB.\n         DROP  R7                IHADCB.\n         USING DEBBASIC,R7\n         SLR   R9,R9\n         IC    R9,DEBNMEXT       GET THE NUMBER OF EXTENTS.\n         LA    R7,DEBBASND       POINT TO DEB DASD EXTENSION.\n         DROP  R7                DEBBASIC.\n         SLL   R9,4              TIMES 16 FOR DASD EXTENSION SIZE.\n         LA    R9,0(R9,R7)       POINT TO DEB BPAM EXTENSION.\n         BCTR  R9,0              POINT TO ONE BEFORE IT.\n         SLR   R1,R1\n         LTR   R6,R6             FIRST ENTRY?\n         BZ    HAVEDEBE          YES, ALREADY GOT DEB EXTNT DESCRIPTOR.\n         IC    R1,0(R6,R9)       NO, LOAD ENTRY'S FIRST EXTENT NUMBER.\n         SLL   R1,4              MULTIPLY BY 16 FOR INDEX.\nHAVEDEBE LA    R1,0(R1,R7)       POINT TO ENTRY'S FIRST DEB EXTENT.\n         USING DEBDASD,R1\n         ICM   R1,7,DEBUCBA      POINT TO ENTRY'S FIRST DEB EXTENT UCB.\n         DROP  R1                DEBDASD.\n         USING UCBOB,R1\n         L     R7,SAVE+28        POINT TO \"LOCATION\" DISPLAY LINE.\n         MVI   LL-13(R7),C'('\n         MVC   LL-12(3,R7),UCBNAME LOAD UCB NAME.\n         CLI   LL-12(R7),C'U'    FOUR-DIGIT UCB NAME?\n         BNE   BUCBNMOK          NO, PROCEED.\n         ST    R1,WORK+4         YES, STORE UCB ADDRESS.\n         DROP  R1                UCBOB.\n         UCBDEVN UCBPTR=WORK+4,DEVN=WORK    GET UCB NAME.\n         STCM  R1,15,LL-12(R7)   LOAD UCB NAME INTO DISPLAY LINE.\n         L     R1,WORK+4         RESTORE UCB POINTER.\n         LA    R7,1(,R7)         ALLOW FOR EXTRA NAME LENGTH.\nBUCBNMOK MVI   LL-9(R7),C'-'\n         MVC   LL-8(6,R7),28(R1) LOAD VOLUME SERIAL NUMBER.\n         MVI   LL-2(R7),C')'\n         MVC   LL-70(25,R2),=C'FOUND IN THE DIRECTORY OF'\n         MVC   LL-44(44,R2),1(5) LOAD LINK LIST LIBRARY NAME.\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\nENDOFBLD CLI   WORK2,0           ANY REAL NAME TO SEARCH FOR?\n         BE    PLPALOOK          NO, CHECK OUT THE LINK PACK AREA.\n         MVC   BLDLNAME,WORK2    YES, LOAD IT INTO BLDL PARAMETER LIST.\n         XC    WORK2,WORK2       RESET SAVED REAL NAME.\n         B     BUILDIT           PERFORM THE EXTRA BLDL.\nSTPLBCHK SLR   R0,R0             CLEAR FOR INSERTS.\n         L     R5,PSATOLD        GET POINTER TO CURRENT TCB.\n         L     R5,12(0,R5)       POINT TO TIOT.\n         LA    R5,24(0,R5)       POINT TO TIOELNGH.\nSTPLBSCN CLC   4(8,R5),=C'STEPLIB '\n         BE    STPLBLDL          FILE EXISTS SO GO AND OPEN IT.\n         IC    R0,0(0,R5)        GET TIOT ENTRY LENGTH.\n         ALR   R5,R0             POINT TO NEXT TIOT ENTRY.\n         CLI   0(R5),0           ZERO LENGTH ENTRY?\n         BNE   STPLBSCN          NO, CHECK OUT THIS ENTRY.\n         B     ENDOFBLD          YES, END OF TIOT AND NO STEPLIB.\nSTPLBLDL MVC   TTRKSAVE,BLDLTT   SAVE DCB=0 TTRK FOR COMPARISON.\n         USING ARL,R8\n         LA    R8,SECWORKA       POINT TO THE ARL STORAGE.\n         CLC   BLDLDCB-IHADCB+DCBDDNAM(8),=C'STEPLIB '\n         BNE   STEPOPEN          BLDLDCB ALREADY OPEN.\n         ST    R8,BLDEXLST       STORE THE POINTER TO THE ARL.\n         MVI   BLDEXLST,X'93'    SAVE ARL EXIT CODE PLUS LAST FLAG.\n         XC    ARL(36),ARL       ZERO THE ARL.\n         MVI   ARLLEN+1,36       SUPPLY THE LENGTH INDICATOR.\n         MVC   ARLIDENT,=C'AR'   SUPPLY ARL IDENTIFIER.\n         CLI   12(R5),0          IS JFCB ABOVE THE 16MEG LINE?\n         BNE   SKIPARL           NO, SKIP ALLOCATION RETRIEVAL.\n         RDJFCB (BLDLDCB)        FETCH ALLOCATION INFORMATION.\nSKIPARL  OPEN (BLDLDCB,(INPUT))  OPEN STEPLIB PRIVATELY.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\nSTEPOPEN BLDL  BLDLDCB,BLDLIST   ISSUE PRIVATE BLDL.\n         LTR   R15,R15           ZERO RETURN CODE?\n         BNZ   ENDOFBLD          NO, NOT FOUND IN STEPLIB.\n         CLC   TTRKSAVE,PDS2TTRP SAME TTR AND CONCATENATION?\n         BNE   ENDOFBLD          NO, THIS IS NOT THE ONE FOUND EARLIER.\n         LA    R7,BLDLDCB        POINT TO DCB FOR DEB SEARCH.\n         SLR   R0,R0             CLEAR REGISTER FOR INSERT.\n         ICM   R1,15,ARLAREA     POINT TO FIRST JFCB.\n         BZ    NORDJFCB          RDJFCB DID NO GOOD (BACK LEVEL DFP).\n         ICM   R0,1,PDS2CNCT     GET THE CONCATENATION NUMBER.\n         LR    R6,0              COPY IT FOR DEB EXTENT SCAN.\n         BZ    ARJFCBOK          IF ZERO THEN ALREADY HAVE THE JFCB.\nJFCBLOOP AH    R1,0(,R1)         POINT TO NEXT JFCB.\n         BCT   R0,JFCBLOOP       DECREMENT CONCATENATION COUNT.\nARJFCBOK LA    R5,3(,R1)         POINT TO ONE BYTE BEFORE DSNAME.\n         B     FOUNDLL           HAVE NOW FOUND THE LINK LIBRARY.\nNORDJFCB ICM   R0,1,PDS2CNCT     GET THE CONCATENATION NUMBER.\n         LR    R6,R0             COPY IT FOR DEB EXTENT SCAN.\n         BZ    STPDDENT          IF 0 THEN ALREADY HAVE THE DD ENTRY.\nCNCTLOOP IC    R1,0(,R5)         GET THE LENGTH OF THIS DD ENTRY.\n         ALR   R5,R1             POINT TO THE NEXT POINTER.\n         BCT   R0,CNCTLOOP       LOOP THROUGH NEXT CONCATENATION.\nSTPDDENT ICM   R1,7,12(R5)       POINT TO JFCB PREFIX.\n         LA    R5,15(,R1)        POINT TO ONE BYTE BEFORE DSNAME.\n         B     FOUNDLL           HAVE NOW FOUND THE LINK LIBRARY.\nPLPALOOK BAS   R14,BSPCLINE      INSERT A BLANK LINE.\n         MVC   0(LL-79,R2),MEDX  SUPPLY ATTRIBUTE BYTES.\n         MVC   LL-70(29,R2),=C'PLPA DIRECTORY SEARCH RESULTS'\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVC   LL-70(5,R2),=C'NAME='\n         MVC   LL-65(8,R2),BILDNAME\n         MVC   LL-55(14,R2),=C'LPDE NOT FOUND'\n         ICM   R0,15,BILDNAME    LOAD NAME FOR IEAVVMSR TO SEARCH FOR.\n         ICM   R1,15,BILDNAME+4\n         L     R3,CVTPTR(,0)     CVT POINTER REQUIRED BY IEAVVMSR.\n         USING CVT,R3\n         L     R15,CVTLPDSR      GET ENTRY POINT FOR IEAVVMSR.\n         DROP  R3                CVT.\n         BASR  R14,R15           CALL IEAVVMSR (7, 8 AND 9 WORK REGS).\n         B     ISINPLPA          FOUND IN PLPA.\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         B     PASTPLPA          NO LPDE, NOT IN PLPA.\nISINPLPA LR    R1,R0             SAVE LINK PACK DIRECTORY ELEMENT\n         USING LPDE,R1\nLPDEDTLS ST    R1,WORK                                    ADDRESS.\n         MVC   LL-51(6,R2),=C'-ADDR='\n         UNPK  LL-45(9,R2),WORK(5)\n         TR    LL-45(8,R2),HEX-C'0'\n         MVI   LL-37(R2),C' '    DISPLAY LPDE ADDRESS.\n         MVC   LL-35(12,R2),BEPEQ\n         UNPK  LL-23(9,R2),LPDENTP(5)\n         TR    LL-23(8,R2),HEX-C'0'\n*        MVI   LL-15(R2),C' '    DISPLAY ENTRY POINT ADDRESS.\n         MVC   LL-13(12,R2),=C'(MAJOR LPDE)'\n         TM    LPDEATTR,LPDEMIN  IS THIS A MINOR LPDE?\n         BZ    MAJRLPDE          NO, IT IS A MAJOR LPDE.\n         MVC   LL-11(2,R2),=C'IN'\n         TR    LL-79(BFDL,R2),XLATETBL\n         MVI   LL-36(R2),X'24'   MAKE ENTRY ADDRESS TAB SELECTABLE.\n         MVI   LL-15(R2),X'25'\n         BAS   R14,BSPCLINE      LINE NOW COMPLETE.\n         MVC   LL-70(5,R2),=C'NAME='\n         L     R1,LPDEMJP        POINT TO MAJOR LPDE.\n         MVC   LL-65(8,R2),LPDENAME ARGUMENT IS AN ALIAS OF THIS NAME.\n         MVC   LL-55(4,R2),=C'LPDE NOT FOUND'  (REUSE LITERAL.)\n         B     LPDEDTLS          FORMAT AND DISPLAY LPDE DETAILS.\nMAJRLPDE TR    LL-79(BFDL,R2),XLATETBL\n         MVI   LL-36(R2),X'24'   MAKE ENTRY ADDRESS TAB SELECTABLE.\n         MVI   LL-15(R2),X'25'\n         BAS   R14,BSPCLINE      LINE NOW COMPLETE.\n         MVC   LL-70(12,R2),BEXAD\n         UNPK  LL-58(9,R2),LPDEXTAD(5)\n         TR    LL-58(8,R2),HEX-C'0'\n*        MVI   LL-50(R2),C' '    DISPLAY LOAD MODULE START ADDRESS.\n         MVC   LL-48(14,R2),=C'EXTENT-LENGTH='\n         L     R14,LPDEXTLN      GET THE EXTENT LENGTH.\n         ST    R14,WORK\n         UNPK  LL-34(9,R2),WORK(5)\n         TR    LL-34(8,R2),HEX-C'0'\n         MVI   LL-26(R2),C' '    DISPLAY LOAD MODULE LENGTH.\nBPLPA0LP CLI   LL-34(R2),C'0'    LEADING ZERO?\n         BNE   DONEPLPA          NO.\n         MVC   LL-34(8,R2),LL-33(R2)\n         B     BPLPA0LP\n         DROP  R1                LPDE.\nDONEPLPA TR    LL-79(BFDL,R2),XLATETBL\n         MVI   LL-71(R2),X'24'   MAKE EXTENT ADDRESS TAB SELECTABLE.\n         MVI   LL-50(R2),X'25'\n         BAS   R14,BSPCLINE      LINE NOW COMPLETE.\nPASTPLPA BAS   R14,BSPCLINE      INSERT A BLANK LINE.\n         MVC   0(LL-79,2),MEDX   SUPPLY ATTRIBUTE BYTES.\n         MVC   LL-70(25,R2),=C'LPAQ CHAIN SEARCH RESULTS'\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVC   LL-70(5,R2),=C'NAME='\n         MVC   LL-65(8,R2),BILDNAME\n         MVC   LL-54(13,R2),=C'CDE NOT FOUND'\n         L     R15,CVTPTR(,0)    POINT TO CVT.\n         USING CVT,R15\n         L     R1,CVTQLPAQ       POINT TO LPAQ ORIGIN.\n         TM    CVTOSLV2,CVTDYLPA DYNAMIC LPA SUPPORTED?\n         BNO   LPAQLOOP          NO, DYNAMIC LPA NOT PRESENT.\n         L     R15,CVTECVT       YES, POINT TO THE ECVT.\n         DROP  R15               CVT.\n         USING ECVT,R15\n         LA    R1,ECVTDLPF       POINT TO CDE CHAIN ORIGIN.\n         DROP  R15               ECVT.\n         USING CDENTRY,R1\nLPAQLOOP ICM   R1,15,CDCHAIN     LAST CDE ON CHAIN?\n         BZ    PASTLPAQ          YES, WASN'T ON LINK PACK CHAIN.\n         CLC   BILDNAME,CDNAME   FOUND THE LOAD MODULE?\n         BNE   LPAQLOOP          NO, TRY NEXT ONE.\nCDEDTLS  ST    R1,WORK           STORE CONTENTS DIRECTORY ELEMENT ADDR.\n         MVC   LL-51(6,R2),=C'-ADDR='\n         UNPK  LL-45(9,R2),WORK(5)\n         TR    LL-45(8,R2),HEX-C'0'\n         MVI   LL-37(R2),C' '    DISPLAY CDE ADDRESS.\n         MVC   LL-35(12,R2),BEPEQ\n         UNPK  LL-23(9,R2),CDENTPT(5)\n         TR    LL-23(8,R2),HEX-C'0'\n*        MVI   LL-15(R2),C' '    DISPLAY ENTRY POINT ADDRESS.\n         MVC   LL-13(11,R2),=C'(MAJOR CDE)'\n         TM    CDATTR,CDMIN      IS THIS A MINOR CDE?\n         BZ    MAJORCDE          NO, IT IS A MAJOR CDE.\n         MVC   LL-11(2,R2),=C'IN'\n         TR    LL-79(BFDL,R2),XLATETBL\n         MVI   LL-36(R2),X'24'   MAKE ENTRY ADDRESS TAB SELECTABLE.\n         MVI   LL-15(R2),X'25'\n         BAS   R14,BSPCLINE      LINE NOW COMPLETE.\n         L     R1,CDXLMJP        POINT TO MAJOR CDE.\n         MVC   LL-70(5,R2),=C'NAME='\n         MVC   LL-65(8,R2),8(R1) ARGUMENT IS AN ALIAS OF THIS NAME.\n         MVC   LL-54(3,R2),=C'CDE NOT FOUND'  (REUSE LITERAL.)\n         B     CDEDTLS           FORMAT AND DISPLAY LPDE DETAILS.\nPASTLPAQ BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         B     SHOWCSVQ\nMAJORCDE TR    LL-79(BFDL,R2),XLATETBL\n         MVI   LL-36(R2),X'24'   MAKE ENTRY ADDRESS TAB SELECTABLE.\n         MVI   LL-15(R2),X'25'\n         BAS   R14,BSPCLINE      LINE NOW COMPLETE.\n         TM    CDATTR2,CDXLE     IS THERE AN EXTENT LIST?\n         BZ    SHOWCSVQ          NO.\n         L     R1,CDXLMJP        YES, POINT TO MAJOR CDE'S EXTENT LIST.\n         DROP  R1                CDENTRY..\n         USING XTLST,R1\n         MVC   LL-70(12,R2),BEXAD\n         L     R14,XTLMSBAD      GET THE EXTENT ADDRESS.\n         ST    R14,WORK\n         UNPK  LL-58(9,R2),WORK(5)\n         TR    LL-58(8,R2),HEX-C'0'\n*        MVI   LL-50(R2),C' '    DISPLAY LOAD MODULE START ADDRESS.\n         MVC   LL-48(14,R2),=C'EXTENT-LENGTH='\n         L     R14,XTLMSBLA      GET THE EXTENT LENGTH.\n         LA    R14,0(,R14)       RESET LAST-EXTENT FLAG IN SIGN BIT.\n         ST    R14,WORK\n         UNPK  LL-34(9,R2),WORK(5)\n         TR    LL-34(8,R2),HEX-C'0'\n         MVI   LL-26(R2),C' '    DISPLAY LOAD MODULE LENGTH.\nBLPAQ0LP CLI   LL-34(R2),C'0'    LEADING ZERO?\n         BNE   DONELPAQ          NO.\n         MVC   LL-34(8,R2),LL-33(R2)\n         B     BLPAQ0LP\n         DROP  R1                XTLST.\nDONELPAQ TR    LL-79(BFDL,R2),XLATETBL\n         MVI   LL-71(R2),X'24'   MAKE EXTENT ADDRESS TAB SELECTABLE.\n         MVI   LL-50(R2),X'25'\n         BAS   R14,BSPCLINE      LINE NOW COMPLETE.\nSHOWCSVQ BAS   R14,BSPCLINE      INSERT A BLANK LINE.\n         MVC   BLDLNAME,BILDNAME GET NAME TO SEARCH FOR.\nBDOQUERY CSVQUERY INEPNAME=BLDLNAME,SEARCH=JPALPA,                     +\n               OUTLENGTH=BQ_XOUTLENGTH,                              4 +\n               OUTEPA=BQ_XOUTEPA,                                    4 +\n               OUTMJNM=BQ_XOUTMJNM,                                  8 +\n               OUTLOADPT=BQ_XOUTLOADPT,                              4 +\n               OUTSP=BQ_XOUTSP,                                      1 +\n               OUTATTR1=BQ_XOUTATTR1,                                1 +\n               OUTATTR2=BQ_XOUTATTR2,                                1 +\n               OUTATTR3=BQ_XOUTATTR3,                                1 +\n               OUTPDATA=BQ_XOUTPDATA,                               16 +\n               OUTPID=BQ_XOUTPID,                                    4 +\n               MF=(E,BQ)\n         STC   R15,WORK          SAVE RETURN CODE.\n         MVC   0(LL-79,R2),MEDX  SUPPLY ATTRIBUTE BYTES.\n         MVC   LL-70(35,R2),=C'CSVQUERY RESULTS  -  RETURN CODE=X'''\n         UNPK  LL-35(3,R2),WORK(2)\n         TR    LL-35(2,R2),HEX-C'0'\n         MVI   LL-33(R2),C''''   DISPLAY RETURN CODE.\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVC   LL-70(5,R2),=C'NAME='\n         MVC   LL-65(8,R2),BLDLNAME\n         CLI   WORK,8            WAS THE PROGRAM NOT FOUND?\n         BNE   BQFOUND           NO, IT WAS FOUND.\n         MVC   LL-50(9,R2),=C'NOT FOUND IN LINK LIST'  (REUSE LITERAL.)\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\nBQFOUND  CLI   WORK,0            WAS CSVQUERY SUCCESSFUL?\n         BNE   SHOWBLDL          NO, OUTPUT COMPLETE.\n         MVC   LL-35(12,R2),BEPEQ\n         UNPK  LL-23(9,R2),BQ_XOUTEPA(5)\n         TR    LL-23(8,R2),HEX-C'0'\n*        MVI   LL-15(R2),C' '    DISPLAY ENTRY POINT ADDRESS.\n         TR    LL-79(BFDL,R2),XLATETBL\n         MVI   LL-36(R2),X'24'   MAKE ENTRY ADDRESS TAB SELECTABLE.\n         MVI   LL-15(R2),X'25'\n         BAS   R14,BSPCLINE      LINE NOW COMPLETE.\n         MVC   LL-70(12,R2),BEXAD\n         UNPK  LL-58(9,R2),BQ_XOUTLOADPT(5)\n         TR    LL-58(8,R2),HEX-C'0'\n*        MVI   LL-50(R2),C' '    DISPLAY LOAD MODULE START ADDRESS.\n         MVC   LL-48(14,R2),=C'EXTENT-LENGTH='\n         UNPK  LL-34(9,R2),BQ_XOUTLENGTH(5)\n         TR    LL-34(8,R2),HEX-C'0'\n         MVI   LL-26(R2),C' '    DISPLAY LOAD MODULE LENGTH.\nBCSVQ0LP CLI   LL-34(R2),C'0'    LEADING ZERO?\n         BNE   DONEQLEN          NO.\n         MVC   LL-34(8,R2),LL-33(R2)\n         B     BCSVQ0LP\nDONEQLEN TM    BQ_XOUTVALID,X'08'\n         BZ    BDONEQSP\n         MVC   LL-24(8,R2),=C'SUBPOOL='\n         SLR   R0,R0\n         IC    R0,BQ_XOUTSP\n         CVD   R0,WORK\n         MVC   LL-16(4,R2),ED3   DISPLAY LOAD MODULE SUBPOOL.\n         ED    LL-16(4,R2),WORK+6\nBSUBP0LP CLI   LL-16(R2),C' '\n         BNE   BDONEQSP\n         MVC   LL-16(4,R2),LL-15(R2)\n         B     BSUBP0LP\nBDONEQSP TR    LL-79(BFDL,R2),XLATETBL\n         MVI   LL-71(R2),X'24'   MAKE EXTENT ADDRESS TAB SELECTABLE.\n         MVI   LL-50(R2),X'25'\n         BAS   R14,BSPCLINE      LINE NOW COMPLETE.\n         TM    BQ_XOUTVALID+1,X'60'\n         BZ    BDONPROV\n         MVC   LL-70(17,R2),=C'PROVIDER DETAILS:'\n         OC    BQ_XOUTPDATA(16),BQ_XOUTPDATA\n         BZ    BDONPDAT          DON'T FORMAT AND SHOW NULLS.\n         UNPK  LL-51(9,R2),BQ_XOUTPDATA(5)\n         UNPK  LL-43(9,R2),BQ_XOUTPDATA+4(5)\n         TR    LL-51(16,R2),HEX-C'0'\n         MVI   LL-35(R2),C'.'\n         UNPK  LL-34(9,R2),BQ_XOUTPDATA+8(5)\n         TR    LL-34(8,R2),HEX-C'0'\n         MVI   LL-26(R2),C' '\n         ICM   R0,15,BQ_XOUTPDATA+12\n         BZ    BDONPDAT          OBVIOUSLY NOT A DDNAME.\n         MVC   LL-34(8,R2),BQ_XOUTPDATA+8\n         TM    BQ_XOUTPDATA+15,7 IS \"ADDRESS\" D/W ALIGNED?\n         BNZ   BDONPDAT          NO, ASSUME IT IS A DDNAME.\n         CLI   BQ_XOUTPDATA+12,0 IS \"ADDRESS\" BELOW THE LINE?\n         BE    LTRYFMD           YES, NULL NO GOOD IN DDNAME.\n         CLI   BQ_XOUTPDATA+12,C'$' IS IT HIGH ATL STORAGE?\n         BNH   BDONPDAT          NO, COULD BE DDNAME BLANK OR $.\nLTRYFMD  ICM   R1,15,BQ_XOUTPDATA+12 YES, LOAD THE ADDRESS.\n         BNP   BDONPDAT          PROBABLY DDNAME ALPHANUMERIC.\n***      TPROT (R1),0            IS THE ADDRESS ACCESSIBLE?\n***      BC    3,BDONPDAT        NO, AVOID S0C4.\n         CLC   =CL8'IEWLFMD',0(R1) POINTING TO AN FMD?\n         BNE   BDONPDAT          NO, IGNORE \"ADDRESS\".\n         MVC   LL-34(8,R2),44(R1) YES, COPY THE DDNAME.\nBDONPDAT MVC   LL-24(4,R2),BQ_XOUTPID\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\nBDONPROV MVC   LL-70(8,R2),=C'ATTR1=X'''\n         UNPK  LL-62(3,R2),BQ_XOUTATTR1(2)\n         TR    LL-62(2,R2),HEX-C'0'\n         MVI   LL-60(R2),C''''\n         MVC   LL-50(8,R2),=C'ATTR2=X'''\n         UNPK  LL-42(3,R2),BQ_XOUTATTR2(2)\n         TR    LL-42(2,R2),HEX-C'0'\n         MVI   LL-40(R2),C''''\n         MVC   LL-30(8,R2),=C'ATTR3=X'''\n         UNPK  LL-22(3,R2),BQ_XOUTATTR3(2)\n         TR    LL-22(2,R2),HEX-C'0'\n         MVI   LL-20(R2),C''''\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         XI    BQ_XOUTATTR1,X'08'     CHANGE NOT-OL TO OL.\n         ICM   R1,14,BQ_XOUTATTR1 LOAD 24 ATTRIBUTE FLAG BITS.\n         BZ    BQATDONE\n         LA    R14,BQATTAB       POINT TO ATTRIBUTE NAME TABLE.\n         LA    R0,24             LOAD FLAG BIT COUNT.\n         LA    R15,LL-70(,R2)    POINT TO FIRST DISPLAY LOCATION.\nBQATLOOP LTR   R1,R1             FLAG BIT ON?\n         BNM   BQATNEXT          NO.\n         MVC   0(8,R15),2(R14)   YES, COPY ATTRIBUTE NAME.\n         AH    R15,0(R14)        POINT TO NEXT DISPLAY LOCATION.\nBQATNEXT LA    R14,10(,R14)      POINT TO NEXT ATTRIBUTE TABLE ENTRY.\n         SLL   R1,1              PROMOTE NEXT FLAG BIT.\n         BCT   R0,BQATLOOP       PROCESS NEXT ATTRIBUTE.\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\nBQATDONE CLC   BLDLNAME,BQ_XOUTMJNM MAJOR NAME MATCHES SEARCH ARGUMENT?\n         BE    SHOWBLDL          YES, DISPLAY COMPLETE.\n         MVC   BLDLNAME,BQ_XOUTMJNM   NO, SUPPLY NEW SEARCH ARGUMENT.\n         B     BDOQUERY          PERFORM A QUERY ON THE MAJOR NAME.\nSHOWBLDL BAS   R14,BSPCLINE      INSERT A BLANK LINE.\n         DROP  R8                ARL.\n         SPACE\n         USING WNDWMNGR,R15\nBSHOWSUM L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         MVI   BLLAFLAG,C'0'     RESET LLA REFRESH FLAG.\n         DROP  R15               WNDWMNGR.\nPUTSCRNB LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\n         MVI   XLATETBL+X'3B',C'.'\nGETSCRNB L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    ANYPRGRM          NO, PROCESS TGET RESULTS.\nISEXITB  CLOSE (BLDLDCB)         YES, CLOSE PRIVATE STEPLIB OPENING.\n         LA    R8,SECWORKA       POINT TO ARL STORAGE.\n         USING ARL,R8\n         ICM   R0,15,ARLPOOL     LOAD ARL SUBPOOL AND SIZE.\n         BZR   R9                ALLOCATION RETRIEVAL AREA NOT USED.\n         L     R1,ARLAREA        LOAD ARL ADDRESS.\n         FREEMAIN R,A=(1),LV=(0) FREE ALLOCATION RETRIEVAL AREA.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\n         DROP  R8                ARL.\nANYPRGRM CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDOBLDL          YES.\n         CLC   ONE,INBUFF+4      TEXT FROM PRIMARY COMMAND AREA?\n         BNL   CMDSCANB          YES.\n         CLI   INBUFF+4,3        TEXT FROM LINE 4?\n         BNE   BBNOTPGM          NO, INPUT NOT PROGRAM NAME.\n         MVC   BILDNAME,INCHARS  LOAD NEW PROGRAM NAME.\n         B     REDOBLDL          PROCESS NEW SEARCH ARGUMENT.\nBBNOTPGM MVI   INCHARS,C' '      SUPPRESS COMMAND SCAN.\nCMDSCANB LA    R9,BPGMZOOM       GET SUBROUTINE ENTRY POINT.\n         BASR  R14,R9            CHECK FOR PROGRAM RELATED DATA ZOOM.\n         CLI   INCHARS,C'B'      REQUEST FOR PROGRAM SEARCH?\n         BE    BILDSRCH          YES.\n         CLI   INCHARS,C'F'      REQUEST FOR PROGRAM FETCH STATISTICS?\n         BE    BPGMFECH          YES.\n         CLI   BSUBOPTN,C'F'     IN PROGRAM FETCH REPORT MODE?\n         BE    CMDSCNBF          YES, LOOK FOR ITS SUBCOMMANDS.\n         CLI   INCHARS,C'S'      REQUEST FOR STANDARD SEARCH?\n         BE    BILDDCB0          YES, UPDATE BLDL DCB FLAG.\n         CLI   INCHARS,C'L'      REQUEST FOR LINKLIST-ONLY SEARCH?\n         BE    BILDDCBL          YES, UPDATE BLDL DCB FLAG.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    GIVEHLPB          NO, OTHER SUBCOMMAND IS NOT ALLOWED.\n         CLI   INCHARS,C'R'      REQUEST FOR LLA REFRESH VIA LLACOPY?\n         BE    BREFRESH          YES.\n         B     GIVEHLPB          NO, INVALID.\nCMDSCNBF CLI   INCHARS,C'L'      REQUEST FOR FETCH DISPLAY LOCATE?\n         BE    BFLOCATE          YES, UPDATE DISPLAY LINE LOCATION.\n         CLI   INCHARS,C'I'      REQUEST FOR FETCH DISPLAY LOCATE?\n         BE    BFLOCATE          YES, UPDATE DISPLAY LINE LOCATION.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    GIVEHLPB          NO, OTHER SUBCOMMAND IS NOT ALLOWED.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'V'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   GIVEHLPB          NO, INVALID.\n         LA    R9,REDOLLAF       POINT TO LLA FETCH DISPLAY ROUTINE.\n         USING REDOLLAF,R9\n         L     R4,BLLAADDR       YES, POINT TO LLA REPOSITORY.\n         L     R1,PSATOLD        POINT TO THE CURRENT TCB.\n         L     R1,12(,R1)        POINT TO THE TIOT JOB NAME.\n         USING IMLLBASE,R4\n         CLI   INCHARS,C'M'      SET PROGRAM NAME SELECTION MASK?\n         BE    BFETPGMM          YES.\n         CLI   INCHARS,C'J'      SET JOB NAME SELECTION MASK?\n         BE    BFETJOBM          YES.\n         CLI   INCHARS,C'C'      COLLECT DATA?\n         BE    BFETCOLL          YES.\n         CLI   INCHARS,C'R'      RESET DATA?\n         BE    BFETRSET          YES.\n         CLI   INCHARS,C'P'      PREVENT DATA COLLECTION?\n         BNE   GIVEHLPB          NO, INVALID.\n         MVC   BFPREVJB,0(R1)    YES, SUPPLY USERID IN MESSAGE.\n         MODESET MF=(E,MDSTSUP0) GET INTO KEY ZERO.\n         CLI   IMLLID+7,C'1'     IS DATA COLLECTION ALREADY PREVENTED?\n         BNE   BFPREVOK          YES, DO NO ACTION.\n         MVI   IMLLID+7,C'0'     NO, PREVENT IT NOW.\n         MVC   IMLLPUID,BFPREVJB SET USERID.\n         STCK  IMLLPTIM          SET TIMESTAMP.\n         WTO   MF=(E,BFWTO11)    ISSUE MESSAGE TO LOG.\nBFPREVOK MODESET MF=(E,MDSTPROB) REVERT TO USER KEY.\n         B     REDOBLDL\nBFETCOLL MVC   BFCOLLJB,0(R1)    SUPPLY USERID IN MESSAGE.\n         MODESET MF=(E,MDSTSUP0) GET INTO KEY ZERO.\n         CLI   IMLLID+7,C'1'     IS DATA COLLECTION ALREADY ALLOWED?\n         BE    BFCOLLOK          YES, DO NO ACTION.\n         MVI   IMLLID+7,C'1'     NO, ALLOW IT NOW.\n         MVC   IMLLSUID,BFPREVJB SET USERID.\n         STCK  IMLLSTIM          SET TIMESTAMP.\n         WTO   MF=(E,BFWTO12)    ISSUE MESSAGE TO LOG.\nBFCOLLOK MODESET MF=(E,MDSTPROB) REVERT TO USER KEY.\n         B     REDOBLDL\nBFETRSET MVC   BFRSETJB,0(R1)    SUPPLY USERID IN MESSAGE.\n         MVI   ENDDEPTH+1,1      ALLOW PF3/15 TO CANCEL THE REQUEST.\n         LA    R0,BCONMSGL\n         LA    R1,BCONFIRM\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    ISEXITB           YES, PERFORM TERMINATION.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    REDOBLDL          YES.\n         CLI   INBUFF,13         WAS ENTER SELECTED?\n         BNE   REDOBLDL          NO, ABORT APF LIBRARY LIST RESET.\n         MODESET MF=(E,MDSTSUP0) GET INTO KEY ZERO.\n         MVI   IMLLID+7,C'0'     PREVENT FURTHER DATA COLLECTION.\n         STIMER WAIT,BINTVL=TEN  WAIT A TICK FOR UPDATES TO COMPLETE.\n         XC    IMLLTABL(40),IMLLTABL    RESET INDEX POINTERS.\n         XC    IMLLTBLI(168),IMLLTBLI\n         XC    IMLLTBLJ(128),IMLLTBLJ\n         XC    IMLLOSTP(20),IMLLOSTP    RESET EVENT COUNTERS.\n         LA    R0,IMLLBSND\n         ST    R0,IMLLHIGH              RESET NEXT ENTRY POINTER.\n         MVI   IMLLID+7,C'1'     RESTART DATA COLLECTION.\n         MVC   IMLLRUID,BFRSETJB SET USERID.\n         STCK  IMLLRTIM          SET TIMESTAMP.\n         WTO   MF=(E,BFWTO13)    ISSUE MESSAGE TO LOG.\n         MODESET MF=(E,MDSTPROB) REVERT TO USER KEY.\n         B     REDOBLDL\nBFETPGMM MVC   BFPMSKJB,0(R1)    SUPPLY USERID IN MESSAGE.\n         MVC   BFPGMMSK,IMLLPGMM ECHO PREVIOUS MASK.\n         MVI   ENDDEPTH+1,1      ALLOW PF3/15 TO CANCEL THE REQUEST.\n         LA    R0,BFPGMLEN       LOAD THE LENGTH OF THE DATA STREAM.\n         LA    R1,BFPGMMSG       POINT TO PROMPTING MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT FOR PROGRAM NAME MASK.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    ISEXITB           YES, PERFORM TERMINATION.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    REDOBLDL          YES.\n         CLI   INBUFF,13         ENTER?\n         BNE   REDOBLDL          NO, CANCEL MASK UPDATE.\n         MVC   BFPMSK,STARS\n         LH    R15,TGETLEN       GET LENGTH OF INPUT STREAM.\n         AHI   R15,-6            GET LENGTH OF TEXT.\n         BNP   BFPMSKOK          HANDLE NULL INPUT.\n         BCTR  R15,0             GET LENGTH CODE OF TEXT INPUT.\n         EX    R15,BFPMSKLD      COMPLETE NEW PROGAM NAME MASK.\n         CLC   IMLLPGMM,BFPMSK   ANY CHANGE IN MASK?\n         BE    REDOBLDL          NO, SO NO UPDATE TO IMPLEMENT.\nBFPMSKOK MODESET MF=(E,MDSTSUP0) GET INTO KEY ZERO.\n         MVC   IMLLPGMM,BFPMSK   SET NEW PROGRAM NAME SELECTION MASK.\n         MVC   IMLLMUID,BFPMSKJB SET USERID.\n         STCK  IMLLMTIM          SET TIMESTAMP.\n         WTO   MF=(E,BFWTO14)    ISSUE MESSAGE TO LOG.\n         MODESET MF=(E,MDSTPROB) REVERT TO USER KEY.\n         B     REDOBLDL\nBFPMSKLD MVC   BFPMSK(0),INCHARS                <<< EXECUTED >>>\nBFETJOBM MVC   BFJMSKJB,0(R1)    SUPPLY USERID IN MESSAGE.\n         MVC   BFJOBMSK,IMLLJOBM ECHO PREVIOUS MASK.\n         MVI   ENDDEPTH+1,1      ALLOW PF3/15 TO CANCEL THE REQUEST.\n         LA    R0,BFJOBLEN       LOAD THE LENGTH OF THE DATA STREAM.\n         LA    R1,BFJOBMSG       POINT TO PROMPTING MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET JOB NAME MASK.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    ISEXITB           YES, PERFORM TERMINATION.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    REDOBLDL          YES.\n         CLI   INBUFF,13         ENTER?\n         BNE   REDOBLDL          NO, CANCEL MASK UPDATE.\n         MVC   BFJMSK,STARS\n         LH    R15,TGETLEN       GET LENGTH OF INPUT STREAM.\n         AHI   R15,-6            GET LENGTH OF TEXT.\n         BNP   BFJMSKOK          HANDLE NULL INPUT.\n         BCTR  R15,0             GET LENGTH CODE OF TEXT INPUT.\n         EX    R15,BFJMSKLD      COMPLETE NEW PROGAM NAME MASK.\n         CLC   IMLLJOBM,BFJMSK   ANY CHANGE IN MASK?\n         BE    REDOBLDL          NO, SO NO UPDATE TO IMPLEMENT.\nBFJMSKOK MODESET MF=(E,MDSTSUP0) GET INTO KEY ZERO.\n         MVC   IMLLJOBM,BFJMSK   SET NEW PROGRAM NAME SELECTION MASK.\n         MVC   IMLLJUID,BFJMSKJB SET USERID.\n         STCK  IMLLJTIM          SET TIMESTAMP.\n         WTO   MF=(E,BFWTO15)    ISSUE MESSAGE TO LOG.\n         MODESET MF=(E,MDSTPROB) REVERT TO USER KEY.\n         B     REDOBLDL\nBFJMSKLD MVC   BFJMSK(0),INCHARS                <<< EXECUTED >>>\n         DROP  R4                IMLLBASE.\nBFLOCATE CLI   BSUBOPTN,C'F'     IN PROGRAM FETCH REPORT MODE?\n         BNE   GIVEHLPB          NO, INVALID SUBCOMMAND.\n         MVC   BFLOCPGM,INCHARS  YES, LOAD LOCATE DATA.\n         CLI   INCHARS,C'L'      WAS IS AN I-MODULE?\n         BNE   REDOBLDL          YES, UPDATE THE SCREEN.\n         MVC   BFLOCPGM,INCHARS+1\n         MVI   BFLOCPGM+1,0      NO, CORRECT THE LOCATE DATA.\n         B     REDOBLDL          GO AND UPDATE THE SCREEN.\nBILDDCB0 MVI   BLDLMODE,C'0'     UPDATE BLDL DCB FLAG.\n         B     BPGMALSO          GO AND UPDATE THE SCREEN.\nBILDDCBL MVI   BLDLMODE,C'L'     UPDATE BLDL DCB FLAG.\n         B     BPGMALSO          GO AND UPDATE THE SCREEN.\nBREFRESH MVI   BLLAFLAG,C'R'     UPDATE LLA REFRESH REQUEST FLAG.\nBPGMALSO LA    R0,3              CHECK 3 BYTES FOR SBA.\n         LA    R1,INCHARS        POINT TO FIRST BYTE TO CHECK.\nBPGMSCAN CLI   0(R1),X'11'       FOUND AN SBA?\n         BE    BLOADPGM          PROGRAM NAME SPECIFIED.\n         LA    R1,1(,R1)         POINT TO THE NEXT BYTE TO CHECK.\n         BCT   R0,BPGMSCAN       CONTINUE SEARCH.\n         B     REDOBLDL          GO AND UPDATE THE SCREEN.\nBLOADPGM MVC   BILDNAME,3(R1)    LOAD NEW PROGRAM NAME.\n         B     REDOBLDL          GO AND UPDATE THE SCREEN.\nBILDSRCH MVI   BSUBOPTN,C'B'     UPDATE SUB-OPTION NAME.\n         MVI   INCHARS,C' '      CLEAR INPUT REQUEST.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         ST    R1,WINTOP         GO TO TOP FOR SEARCH RESULTS DISPLAY.\n         DROP  R15               WNDWMNGR.\n         CLI   INCHARS+1,C'$'    POSSIBLE PROGRAM NAME SUPPLIED?\n         BL    BBSETSUF          NO, GO INSTALL DATA STREAM SUFFIX.\n         MVC   BILDNAME,INCHARS+1    LOAD IT.\n         B     BBSETSUF          GO INSTALL DATA STREAM SUFFIX.\nBPGMFECH MVI   BSUBOPTN,C'F'     UPDATE SUB-OPTION NAME.\n         L     R1,CRNTOPTN       POINT TO CURRENT OPTION VECTOR.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVI   9(R1),5           SET HEADING LINE COUNT.\n         MVI   WINHDGCT+1,5      SET HEADING LINE COUNT.\n         MVI   13(R1),BFLL       SET CORRECT LINE LENGTH.\n         MVI   WINLNLEN+1,BFLL   SET CORRECT LINE LENGTH.\n         MVI   WINSUFLN,X'FF'    NEGATE DATA STREAM SUFFIX LENGTH CODE.\n         B     REDOBLDL          GO DISPLAY LLA STATISTICS.\n         DROP  R15,R9            WNDWMNGR, REDOLLAF.\nGIVEHLPB MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNB          GO DISPLAY HELP PANEL.\n         SPACE\nBADDLINE TR    LL-79(BFDL,R2),XLATETBL\nBSPCLINE L     R15,CRNTOPTN      POINT TO CURRENT OPTION VECTOR.\n         AH    R2,12(,R15)       ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNB          IF YES, THEN FORGET SUMMARY LINE.\n         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(BFDL-1,R2),LL-79(R2)\n         BR    R14\n         DROP  R15               WNDWMNGR.\n         SPACE\nB6HEXFIX TR    0(6,R15),HEX-C'0' MAKE DISPLAYABLE HEX DIGITS.\n         MVI   6(R15),C' '       ERASE GARBAGE.\n         LA    R0,5              GET MAXIMUM LEADING ZERO COUNT.\nB6HXFXLP CLI   0(R15),C'0'       LEADING ZERO?\n         BNER  R14               NO, RETURN.\n         MVC   0(6,R15),1(R15)   YES, SUPPRESS IT.\n         BCT   R0,B6HXFXLP       CONTINUE.\n         BR    R14               FIVE ZEROS NOW SUPPRESSED.\n         TITLE 'BLDL AND LPA SEARCHER - VARIABLES AND CONSTANTS'\n         CSVQUERY PLISTVER=MAX,MF=(L,BQ) CSVQUERY MACRO PARAMETER LIST.\nBLLALIST LLACOPY MF=(L,BL)       LLACOPY MACRO PARAMETER LIST.\nBBLNKDCB DC    A(0)              ADDRESS OF CURRENT LINK LIST DCB.\nBBLNKLLT DC    A(0)              ADDRESS OF CURRENT LINK LIST TABLE.\nTTRKSAVE DC    F'0'              SAVED TTRK FROM PREVIOUS BLDL.\nBLDLIST  DS    0F                BLDL PARAMETER LIST.\nBLDLFF   DC    H'1'              ONE ENTRY IN BUILD LIST.\nBLDLLL   DC    H'76'             CATER FOR MAXIMUM USER DATA LENGTH.\nBLDLNAME DC    CL8' '            LINK LIST LOAD MODULE NAME.\nBLDLTT   DC    XL2'0000'         RELATIVE TRACK OF MEMBER START.\nBLDLR    DC    XL1'00'           FIRST RECORD NUMBER (0 FOR NOT FOUND).\nBLDLK    DC    XL1'00'           CONCATENATION CODE.\nBLDLZ    DC    XL1'00'           LOCATION CODE.\nBLDLC    DC    XL1'00'           ALIAS FLAG + USERDATA HALFWORD COUNT.\nBLDLUSER DC    XL62'00'          USERDATA AREA.\n         ORG   BLDLNAME\n         IHAPDS PDSBLDL=YES,DSECT=NO\n         ORG   BLDLUSER+62\nBFLOCPGM DC    XL2'0000'         PROGRAM LOCATE REQUEST DETAILS.\nBQATTAB  DC    H'8',CL8'EOM-DEL '\n         DC    H'7',CL8'GLOBAL  '\n         DC    H'5',CL8'RENT    '\n         DC    H'5',CL8'REUS    '\n         DC    H'9',CL8'ONLYLOAD'\n         DC    H'8',CL8'OVERLAY '\n         DC    H'6',CL8'ALIAS   '\n         DC    H'7',CL8'AT1-01  '\n         DC    H'8',CL8'AUTHLIB '\n         DC    H'5',CL8'AC=1    '\n         DC    H'9',CL8'AMODEANY'\n         DC    H'8',CL8'AMODE31 '\n         DC    H'5',CL8'RTLS    '\n         DC    H'5',CL8'DLPA    '\n         DC    H'9',CL8'PAGEPROT'\n         DC    H'8',CL8'AMODE64 '\n         DC    H'8',CL8'RMODE31 '\n         DC    H'4',CL8'JPA     '\n         DC    H'5',CL8'PLPA    '\n         DC    H'5',CL8'MLPA    '\n         DC    H'5',CL8'FLPA    '\n         DC    H'4',CL8'CSA     '\n         DC    H'7',CL8'AT3-02  '\n         DC    H'7',CL8'AT3-01  '\nBLDLMODE DC    C'0'              BLDL DCB FLAG.\nBLLAFLAG DC    C'0'              LLACOPY REQUEST FLAG.\nBSUBOPTN DC    C'B'              SUB-OPTION DISPLAY FLAG.\nBEPEQ    DC    C'ENTRY-POINT='\nBEXAD    DC    C'EXTENT-ADDR='\nBLDLHDG  DC    C'BLDL RESULTS (DCB=0)  -  RETURN CODE=X''??''  REASON C+\n               ODE=X''??'''\nHEADINGB DC    CL79'                  LINK LIST AND LINK PACK AREA PROG+\n               RAM LOOK-UP                 '\nNOLLAMSG DC    CL79' PROGRAM FETCH STATISTICS CANNOT BE SHOWN BECAUSE T+\n               HEY ARE NOT BEING COLLECTED '\nPGMFUDGE DCS   SBA,(4,54),X'1B',UNPHI,X'4E',IC,SA,HILITE,USCORE\n         DCS   SA,COLOUR,YELLOW\nBILDNAME DC    XL8'00'           LOAD MODULE TO BE SEARCHED FOR.\n         DCS   X'1B',PROHI,X'C2'\nPGMFIXLN EQU   *-PGMFUDGE\n         SPACE\n         LTORG\n         SPACE\nBLDEXLST DC    F'0'\nBLDLDCB  DCB   DSORG=PO,DDNAME=STEPLIB,MACRF=(R),EXLST=BLDEXLST\n         TITLE 'BROWSE PROGRAM OR DIRECTORY ELEMENT ZOOM SUBROUTINE'\n         USING BPGMZOOM,R9\nBPGMZOOM CLI   INCHARS,C' '      NULL INPUT?\n         BNER  R14               NO, RETURN TO PROCESS SUBCOMMAND.\n         CLI   BSUBOPTN,C'B'     PROGRAM SEARCH DISPLAY?\n         BNE   REDOBLDL          NO, DO NOT PERFORM ZOOM PROCESSING.\n         SLR   R0,R0\n         ICM   R0,1,INBUFF+1     GET THE CURSOR ROW NUMBER.\n         BZ    REDOBLDL          CURSOR ON HEADING LINE.\n         BCTR  R0,0\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         A     R0,WINTOP         GET DETAIL LINE NUMBER.\n         C     R0,WINLINES       BEFORE SUMMARY LINE?\n         BNL   REDOBLDL          NO, CURSOR PAST END OF DISPLAY.\n         BCTR  R0,0              GET THE RELATIVE LINE NUMBER.\n         LA    R1,LL             GET THE LINE LENGTH.\n         MR    R0,R0             GET OFFSET INTO DISPLAY.\n         A     R1,WINBUFF        POINT TO THE DISPLAY LINE.\n         DROP  R15               WNDWMNGR.\n         LA    R15,LL-23(,R1)    POINT TO POSSIBLE ENTRY POINT.\n         CLC   BEPEQ,LL-35(R1)   ENTRY POINT AVAILABLE?\n         BE    BGOTZOOM          YES.\n         LA    R15,LL-58(,R1)    POINT TO POSSIBLE EXTENT ADDRESS.\n         CLC   BEXAD,LL-70(R1)   EXTENT ADDRESS AVAILABLE?\n         BNE   REDOBLDL          NO, NOT A ZOOMABLE LINE.\nBGOTZOOM MVC   INBUFF(9),BZMSTR  SUPPLY THE ZOOM COMMAND STRING.\n         MVC   INBUFF+9(8),0(R15)  LOAD BROWSE ADDRESS.\n         MVI   TGETLEN+1,17      SUPPLY \"INPUT\" DATA LENGTH.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         CLI   INBUFF+9,C'0'     LEADING DECIMAL DIGIT?\n         BNL   GETSCRNB          YES, PROCEED.\n         TR    INBUFF+9(1),BSIGNOFF-C'A'   RESET SIGN BIT.\n         B     GETSCRNB          ZOOM TO OPTION \"VB\".\n         DROP  R9                BPGMZOOM.\n         SPACE\nBSIGNOFF DC    C'234567'         TOP HEX DIGITS FOR POSITIVE NUMBER.\nBZMSTR   DC    X'7D40C11140C1'   READ HEADER FOR ZOOM.\n         DC    C'=VB'            CHARACTER STRING FOR ZOOM.\n         TITLE 'LLA PROGRAM FETCH STATISTICS DISPLAY SUBROUTINE'\n         USING REDOLLAF,R9\nREDOLLAF ICM   R4,15,BLLAADDR    KNOW THE LLA REPOSITORY ADDRESS?\n         BNZ   BFBASEOK          YES, USE IT.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         L     R3,CVTGDA-CVT(,R3) POINT TO THE GLOBAL DATA AREA.\n         L     R3,136(,R3)       POINT TO THE CSA SUBPOOL TABLE.\n         LA    R3,1172(,R3)      POINT TO SP=241,KEY=0,LOC=ANY ENTRY.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   *+8               NO, SKIP R10 CODE.\n         LA    R3,1948-1172(,R3) POINT TO SP=241,KEY=0,LOC=ANY ENTRY.\n         LR    R1,R3             COPY ENTRY ADDRESS.\nBNEXTDQE L     R1,0(,R1)         POINT TO DQE.\n         CR    R1,R3             END OF CHAIN?\n         BE    BNOFETCH          YES, LLA REPOSITORY NOT FOUND.\n         CLC   BLLASIZE,20(R1)   APPROPRIATE STORAGE SIZE?.\n         BH    BNEXTDQE          NO, LOOK AT THE NEXT DQE.\n         L     R4,16(,R1)        LOAD STORAGE BLOCK ADDRESS.\n         CLC   0(7,R4),=C'IMONLIX1'  FOUND LLA REPOSITORY?\n         BNE   BNEXTDQE          NO, LOOK AT THE NEXT DQE.\n         ST    R4,BLLAADDR           SAVE THE ADDRESS.\n         USING IMLLBASE,R4\nBFBASEOK LA    R5,IMLLINIT       POINT TO INITIALIZATION TIMESTAMP.\n         CLC   IMLLINIT,IMLLRTIM HAS A RESET BEEN DONE?\n         BH    BFTIMEOK          NO, USE CREATION TIME.\n         LA    R5,IMLLRTIM       YES, USE RESET TIME.\nBFTIMEOK STCKCONV STCKVAL=(R5),      SPECIFY INPUT STCK VALUE.         +\n               CONVVAL=SECRB,        POINT TO OUTPUT FOUR WORDS.       +\n               TIMETYPE=DEC,         GET DECIMAL TIME (DEFAULT).       +\n               DATETYPE=YYYYMMDD,    SPECIFY DATE FORMAT.              +\n               MF=(E,STCKCNVL)       SPECIFY MACRO PARAMETER LIST.\n         UNPK  BFSDATE(5),SECRB+8(3)     GET YYYY.\n         MVI   BFSDATE+4,C'-'\n         UNPK  BFSDATE+5(3),SECRB+10(2)  GET MM.\n         MVI   BFSDATE+7,C'-'\n         UNPK  BFSDATE+8(3),SECRB+11(2)  GET DD.\n         MVI   BFSDATE+10,C' '\n         UNPK  BFSTIME(3),SECRB(2)       GET HH.\n         MVI   BFSTIME+2,C':'\n         UNPK  BFSTIME+3(3),SECRB+1(2)   GET MM.\n         MVI   BFSTIME+5,C':'\n         UNPK  BFSTIME+6(3),SECRB+2(2)   GET SS.\n         MVC   BFSPGMCT,ED7      LOAD EDIT MASK.\n         L     R0,IMLLPGMS       GET CAPTURED PROGRAM COUNT.\n         CVD   R0,WORK           SHOW IT.\n         ED    BFSPGMCT,WORK+4\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(BFDL-1,R2),LL-79(R2)\n         MVC   LL-79(79,R2),BFSHEAD1     LOAD DISPLAYABLE HEADING.\n         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         L     R1,CRNTOPTN       POINT TO CURRENT OPTION VECTOR.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVI   9(R1),5           SET HEADING LINE COUNT.\n         MVI   WINHDGCT+1,5      SET HEADING LINE COUNT.\n         CLC   IMLLRTIM,IMLLPTIM RESET LATER THAN STOP?\n         BNL   BFSUSPOK          YES, SUSPENSION NOW IRRELEVANT.\n         MVC   0(LL-79,R2),HIGHX NO, SHOW SUSPENSION STUFF IN HIGH.\n         MVI   LL-80(R2),X'F2'   SHOW SUSPENSION STUFF IN RED.  (I3279)\n         CLI   IMLLID+7,C'1'     IS COLLECTION CURRENTLY ACTIVE?\n         BE    BFSTATOK          YES.\n         MVI   2(R2),X'F2'       NO, SHOW THIS WITH REVERSE.    (I3279)\nBFSTATOK MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         MVI   9(R1),6           SET HEADING LINE COUNT.\n         MVI   WINHDGCT+1,6      SET HEADING LINE COUNT.\n         DROP  R15               WNDWMNGR.\n         MVC   LL-78(9,R2),=C'SUSPENDED'\n         MVC   WORK,IMLLPTIM     DISPLAY SUSPEND TIME.\n         LA    R6,LL-68(,R2)\n         BAS   R7,BFDATIME\n         MVC   LL-53(4,R2),=C' BY '\n         MVC   LL-49(8,R2),IMLLPUID\n         CLI   IMLLSUID,0        ANY STARTING USERID?\n         BE    BFSUSPDN          NO, EXTRA LINE NOW COMPLETE.\n         MVC   LL-38(9,R2),=C'RESTARTED'\n         MVC   WORK,IMLLSTIM     DISPLAY SUSPEND TIME.\n         LA    R6,LL-28(,R2)\n         BAS   R7,BFDATIME\n         MVC   LL-13(4,R2),=C' BY '\n         MVC   LL-9(8,R2),IMLLSUID\nBFSUSPDN BAS   R14,BADDLINE      LINE NOW COMPLETE.\nBFSUSPOK L     R3,IMLLOSTP       GET LOST PGM FETCH COUNT.\n         L     R5,IMLLOSTL       GET LOST LLA FETCH COUNT.\n         L     R6,IMLLPGMF       GET CAPTURED PGM FETCH COUNT.\n         L     R7,IMLLLLAF       GET CAPTURED LLA FETCH COUNT.\n         LR    R0,R5             SHOW LLA LOST FETCH COUNT.\n         LA    R15,BFLLALST\n         BAS   R14,BF9NUM\n         AR    R0,R3             SHOW TOTAL LOST FETCH COUNT.\n         LA    R15,BFTOTLST\n         BAS   R14,BF9NUM\n         LR    R0,R7             SHOW LLA CAPTURED FETCH COUNT.\n         LA    R15,BFLLACAP\n         BAS   R14,BF9NUM\n         AR    R0,R6             SHOW TOTAL CAPTURED FETCH COUNT.\n         LA    R15,BFTOTCAP\n         BAS   R14,BF9NUM\n         LR    R0,R5             SHOW LLA TOTAL FETCH COUNT.\n         AR    R0,R7\n         LA    R15,BFLLATOT\n         BAS   R14,BF9NUM\n         AR    R0,R3             SHOW GRAND TOTAL FETCH COUNT.\n         AR    R0,R6\n         LA    R15,BFTOTTOT\n         BAS   R14,BF9NUM\n         MVC   0(LL-79,R2),MEDX  LOAD LINE ATTRIBUTES.\n         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         MVC   LL-79(79,R2),BFSHEAD2\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),MEDX  LOAD LINE ATTRIBUTES.\n         MVI   2(R2),X'F4'       UNDERSCORE FOR TOP OF TABLE.   (I3279)\n         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         MVC   LL-79(79,R2),BFSHEAD3\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVI   XLATETBL+C'|',X'3B'\n         MVC   0(LL-79,R2),HIGHX LOAD LINE ATTRIBUTES.\n         MVC   LL-79(BFDL,R2),BFDHEAD1\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX LOAD LINE ATTRIBUTES.\n         MVI   2(R2),X'F4'       UNDERSCORE TABLE HEADINGS.     (I3279)\n         MVC   LL-79(BFDL,R2),BFDHEAD2\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         MVI   XLATETBL+C'|',C'|'\n         SPACE\n         MVI   XLATETBL+X'3B',X'3B'\n         LA    R8,84             GET NUMBER OF CHAIN ORIGINS.\n         LA    R3,IMLLTABL       POINT TO ENTRY CHAIN ORIGIN TABLE.\n         USING BFLINE,R2\n         USING IMLLNTRY,R5\nBFNXTCHN LR    R5,R3             POINT TO ADDRESS OF FIRST ENTRY.\nBFNXTPGM ICM   R5,15,IMLLNEXT    POINT TO NEXT ENTRY IN CHAIN.\n         BZ    BFENDCHN          ADDRESS IS ZERO SO END OF CHAIN.\n         MVC   BFPROG,IMLLPROG   LOAD PROGRAM NAME.\n         UNPK  BFSTOR+1(7),IMLLSTOR(4)\n         TR    BFSTOR+1(6),HEX-C'0'\n         LA    R6,BFSTOR+1       SUPPRESS LEADING ZEROS.\nBFSTR0LP CLI   0(R6),C'0'\n         BNE   BFSTR0OK\n         MVI   0(R6),C' '\n         LA    R6,1(,R6)\n         B     BFSTR0LP\nBFSTR0OK LM    R6,R7,IMLLFECH    DISPLAY LATEST FETCH TIME.\n         STM   R6,R7,WORK\n         TM    WORK+7,X'01'      LOW-ORDER BIT ON?\n         BZ    BFATTROK          NO, NORMAL PROGRAM FETCH FLAGGED.\n         MVI   4(R2),X'F8'       YES, HIGH INTENSITY FOR LLA FETCH.\n         MVI   LL-80(R2),X'F7'   WHITE FOR LLA FETCH.           (I3279)\nBFATTROK SRDL  R6,12\n         CVD   R7,WORK\n         MVC   BFLAST,=X'40202021204B202020'\n         ED    BFLAST,WORK+4\n         ICM   R0,15,IMLPFCNT    DISPLAY DASD PROGRAM FETCH COUNT.\n         BZ    BFNOPGMF\n         CVD   R0,WORK\n         MVC   BFPCNT,ED7\n         ED    BFPCNT,WORK+4\n         LM    R6,R7,IMLPFCUM    DISPLAY DASD AVERAGE FETCH TIME.\n         SRDL  R6,12\n         DR    R6,R0\n         CVD   R7,WORK\n         MVC   BFPAVG,=X'40202021204B202020'\n         ED    BFPAVG,WORK+4\nBFNOPGMF ICM   R0,15,IMLLACNT    DISPLAY LLA PROGRAM FETCH COUNT.\n         BZ    BFNOLLAF\n         CVD   R0,WORK\n         MVC   BFLCNT,ED7\n         ED    BFLCNT,WORK+4\n         LM    R6,R7,IMLLACUM    DISPLAY LLA AVERAGE FETCH TIME.\n         SRDL  R6,12\n         DR    R6,R0\n         CVD   R7,WORK\n         MVC   BFLAVG,=X'40202021204B202020'\n         ED    BFLAVG,WORK+4\nBFNOLLAF MVC   WORK,IMLLTIME     DISPLAY LATEST FETCH TIMESTAMP.\n         LA    R6,BFLDATE\n         BAS   R7,BFDATIME\n         MVC   BFLJOB,IMLLJOBN   DISPLAY LATEST FETCH JOB NAME\n         UNPK  BFLASID(5),IMLLASID(3)                 AND ASID.\n         TR    BFLASID,HEX-C'0'\n         MVC   WORK,IMLFTIME     DISPLAY FIRST FETCH TIMESTAMP.\n         LA    R6,BFFDATE\n         BAS   R7,BFDATIME\n         MVC   BFFJOB,IMLFJOBN   DISPLAY FIRST FETCH JOB NAME\n         UNPK  BFFASID(5),IMLFASID(3)                AND ASID.\n         TR    BFFASID,HEX-C'0'\n         SLR   R0,R0\n         IC    R0,IMLLCNCT       DISPLAY CONCATENATION CODE.\n         CVD   R0,WORK\n         MVC   BFCNCT,ED3\n         ED    BFCNCT,WORK+6\n         IC    R0,IMLLLOCN       DISPLAY LOCATION CODE.\n         CVD   R0,WORK\n         MVC   BFLOCN,ED3\n         ED    BFLOCN,WORK+6\n         MVC   BFFO,=C'DC'         DOWNWARD COMPATIBLE.\n         TM    IMLLATR2,IMLLFLVL\n         BZ    *+10\n         MVC   BFFO,=C'FO'         F-LEVEL LINKAGE EDITOR ONLY.\n         TM    IMLLATR1,IMLLEXEC\n         BO    *+10\n         MVC   BFNX,=C'NX'         NOT EXECUTABLE.\n         TM    IMLLATR1,IMLLLOAD\n         BZ    *+10\n         MVC   BFOL,=C'OL'         ONLY LOADABLE.\n         TM    IMLLATR1,IMLLOVLY\n         BZ    *+10\n         MVC   BFOV,=C'OV'         OVERLAY STRUCTURE.\n         TM    IMLLATR2,IMLLREFR\n         BZ    *+10\n         MVC   BFRF,=C'RF'         REFRESHABLE.\n         TM    IMLLATR1,IMLLRENT\n         BZ    *+10\n         MVC   BFRN,=C'RN'         REENTERABLE.\n         TM    IMLLATR1,IMLLRENT\n         BZ    *+10\n         MVC   BFRU,=C'RU'         REUSABLE.\n         TM    IMLLATR1,IMLLSCTR\n         BZ    *+10\n         MVC   BFSC,=C'SC'         SCATTER FORMAT.\n         TM    IMLLATR2,IMLLTSTN\n         BZ    *+10\n         MVC   BFTS,=C'TS'         TEST SYMBOL CARDS.\n         IC    R1,IMLLATR3         DISPLAY ADDRESS MODE.\n         TM    IMLLTTRN+3,X'80'    ALIAS?\n         BZ    *+8                 NO.\n         SRL   R1,2                YES, REPORT AMODE OF ALIAS.\n         STC   R1,WORK\n         TM    WORK,X'03'\n         BZ    BFAMODOK\n         BO    BFAMODNE\n         MVC   BFAMOD+1(2),=C'24'\n         TM    WORK,X'01'\n         BO    BFAMODOK\n         MVC   BFAMOD+1(2),=C'31'\n         B     BFAMODOK\nBFAMODNE MVC   BFAMOD(3),=C'ANY'\nBFAMODOK MVC   BFRMOD+1(2),=C'24'  DISPLAY RESIDENCE MODE.\n         TM    IMLLATR3,IMLLRMOD\n         BZ    *+10\n         MVC   BFRMOD(3),=C'ANY'\n         MVC   BFDSET,IMLLDSET   LOAD DATA SET NAME CONTAINING PROGRAM.\n         MVI   BFSEP01,X'3B'     SUPPLY COLUMN DELINEATORS.\n         MVI   BFSEP02,X'3B'\n         MVI   BFSEP03,X'3B'\n         MVI   BFSEP04,X'3B'\n         MVI   BFSEP05,X'3B'\n         MVI   BFSEP06,X'3B'\n         MVI   BFSEP07,X'3B'\n         MVI   BFSEP08,X'3B'\n         MVI   BFSEP09,X'3B'\n         MVI   BFSEP10,X'3B'\n         MVI   BFSEP11,X'3B'\n         MVI   BFSEP12,X'3B'\n         MVI   BFSEP13,X'3B'\n         MVI   BFSEP14,X'3B'\n         MVI   BFSEP15,X'3B'\n         MVI   BFSEP16,X'3B'\n         MVI   BFSEP17,X'3B'\n         MVI   BFSEP18,X'3B'\n         MVI   BFSEP19,X'3B'\n         MVI   BFSEP20,X'3B'\n         BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         CLI   BFLOCPGM,0        ANY LOCATE REQUEST?\n         BE    BFNXTPGM          NO, LOOK FOR NEXT ENTRY ON THE CHAIN.\n         L     R15,WINMANAD      YES, POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R0,WINLINES       GET THE CURRENT LINE NUMBER.\n         SH    R0,WINHDGCT       ACCOUNT FOR FIXED HEADING LINES.\n         ST    R0,WINTOP         MAKE THIS LINE THE NEW TOP LINE.\n         CLC   BFLOCPGM,IMLLPROG UP TO REQUESTED SPOT YET?\n         BH    BFNXTPGM          NO, LOOK FOR NEXT ENTRY ON THE CHAIN.\n         MVI   BFLOCPGM,0        YES, CLEAR PENDING LOCATE REQUEST.\n         B     BFNXTPGM          LOOK FOR NEXT ENTRY ON THE CHAIN.\n         DROP  R15               WNDWMNGR.\nBFENDCHN LA    R3,4(,R3)         POINT TO NEXT CHAIN ORIGIN SLOT.\n         BCT   R8,BFNXTCHN       LOOK FOR NEXT CHAIN TO FOLLOW.\n         DROP  R2,R5             BFLINE, IMLLNTRY.\n         MVI   BFLOCPGM,0        CLEAR PENDING LOCATE REQUEST.\n         LR    R1,R2             POINT PAST LATEST LINE.\n         L     R15,CRNTOPTN      POINT TO CURRENT OPTION VECTOR.\n         SH    R1,12(,R15)       POINT TO LATEST LINE.\n         MVI   2(R1),X'F4'       UNDERSCORE FOR LAST LINE.      (I3279)\n         BAS   R14,BFTRLRLN      PREPARE A TRAILER LINE.\n         MVC   LL-78(34,R2),=C'PROGRAM NAME EVENT COLLECTION MASK'\n         MVC   LL-42(8,R2),IMLLPGMM\n         CLI   IMLLMUID,0\n         BE    BFMSETOK\n         MVC   LL-32(3,R2),=C'SET'\n         MVC   WORK,IMLLMTIM\n         LA    R6,LL-28(,R2)\n         BAS   R7,BFDATIME\n         MVC   LL-13(4,R2),=C' BY '\n         MVC   LL-9(8,R2),IMLLMUID\nBFMSETOK BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         BAS   R14,BFTRLRLN      PREPARE A TRAILER LINE.\n         MVC   LL-74(30,R2),=C'JOB NAME EVENT COLLECTION MASK'\n         MVC   LL-42(8,R2),IMLLJOBM\n         CLI   IMLLJUID,0\n         BE    BFJSETOK\n         MVC   LL-32(3,R2),=C'SET'\n         MVC   WORK,IMLLJTIM\n         LA    R6,LL-28(,R2)\n         BAS   R7,BFDATIME\n         MVC   LL-13(4,R2),=C' BY '\n         MVC   LL-9(8,R2),IMLLJUID\nBFJSETOK BAS   R14,BADDLINE      LINE NOW COMPLETE.\n         B     BSHOWSUM          COMPLETE DISPLAY WITH SYSTEM SUMMARY.\n         DROP  R4                IMLLBASE.\n         SPACE\nBNOFETCH MVI   INCHARS,C' '      CLEAR INPUT REQUEST.\n         MVI   BSUBOPTN,C'!'     FLAG FETCH REPOSITORY NOT FOUND.\n         B     BBSETSUF          REVERT TO SUBOPTION 'B'.\n         SPACE\nBFTRLRLN MVC   0(LL-79,R2),MEDX  SET LINE ATTRIBUTES.\n         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         BR    R14               TRAILER LINE NOW PREPARED.\n         SPACE\nBF9NUM   DS    0H                DISPLAY A NUMBER UP TO 9 DIGITS.\n         MVC   1(9,R15),ED11+3   LOAD EDIT MASK.\n         CVD   R0,WORK           GET DECIMAL NUMBER.\n         ED    0(10,R15),WORK+3  SHOW NUMBER.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nBFDATIME DS    0H                CONVERT STCK TO YYMMDD HH:MM:SS.\n         STCKCONV STCKVAL=WORK,      SPECIFY INPUT STCK VALUE.         +\n               CONVVAL=SECRB,        POINT TO OUTPUT FOUR WORDS.       +\n               TIMETYPE=DEC,         GET DECIMAL TIME (DEFAULT).       +\n               DATETYPE=YYYYMMDD,    SPECIFY DATE FORMAT.              +\n               MF=(E,STCKCNVL)       SPECIFY MACRO PARAMETER LIST.\n         UNPK  0(7,R6),SECRB+9(4)    GET YYMMDD.\n         MVI   6(R6),C' '\n         UNPK  7(3,R6),SECRB(2)      GET HH.\n         MVI   9(R6),C':'\n         UNPK  10(3,R6),SECRB+1(2)   GET MM.\n         MVI   12(R6),C':'\n         UNPK  13(3,R6),SECRB+2(2)   GET SS.\n         MVI   15(R6),C'.'\n         UNPK  16(3,R6),SECRB+3(2)   GET TH.\n         BR    R7                RETURN TO CALLER.\n         SPACE\n         DROP  R11,R10,R9        BILDLIST, REDOLLAF.\n         TITLE 'LLA FETCH STATISTICS DISPLAY - VARIABLES AND CONSTANTS'\nBLLASIZE DC    A(16*4096)        MINIMUM LLA REPOSITORY SIZE.\nBLLAADDR DC    A(0)              ADDRESS OF LLA REPOSITORY.\nBFSHEAD1 DC    CL79'LLA-MANAGED LIBRARY FETCH STATISTICS SINCE YYYY-MM-+\n               DD HH:MM:SS ####### PROGRAMS'\nBFSDATE  EQU   BFSHEAD1+43,10\nBFSTIME  EQU   BFSHEAD1+54,8\nBFSPGMCT EQU   BFSHEAD1+62,8\nBFSHEAD2 DC    CL79' TOTAL PROGRAM FETCHES: ######### CAPTURED + ######+\n               ### LOST = ######### TOTAL  '\nBFTOTCAP EQU   BFSHEAD2+23,10\nBFTOTLST EQU   BFSHEAD2+44,10\nBFTOTTOT EQU   BFSHEAD2+61,10\nBFSHEAD3 DC    CL79'   LLA PROGRAM FETCHES: ######### CAPTURED + ######+\n               ### LOST = ######### TOTAL  '\nBFLLACAP EQU   BFSHEAD3+23,10\nBFLLALST EQU   BFSHEAD3+44,10\nBFLLATOT EQU   BFSHEAD3+61,10\nBFDHEAD1 DC    C' PROGRAM|STORAGE| LATEST |_NON-LLA_FETCHES|___LLA_FETC+\n               HES__|_DATA_FROM_LATEST_PROGRAM_FETCH_|DATA_FROM_FIRST_C+\n               APTURED_PROGRAM_FETCH_INCLUDING_BLDL_FIELDS_AND_USERDATA+\n               _FLAGS|DATA SET                                    '\nBFDHEAD2 DC    C'  NAME  |  SIZE |MILLISEC|  COUNT|AVG-MSEC|  COUNT|AVG+\n               -MSEC| DATE |TIME-OF-DAY|JOB-NAME|ASID| DATE |TIME-OF-DA+\n               Y|JOB-NAME|ASID|CNCT|LOCN|FETCHED PROGRAM ATTRIBUTES|AMO+\n               D|RMOD|NAME                                        '\n*        DC    C'PROGNAME| XXXXXX|1234.567|1234567|1234.567|1234567|123\n*              4.567|YYMMDD|HH:MM:SS.SS|JOB-NAME|ASID|YYMMDD|HH:MM:SS.S\n*              S|JOB_NAME|ASID|CNCT|LOCN|FO NX OL OV RF RN RU SC TS|AMO\n*              D|RMOD|11111111.22222222.33333333.44444444.55555555'\n         SPACE\nBFPGMMSG DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER FETCH MONITOR PROGRAM NAME MASK'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nBFPGMMSK DC    CL8' '\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(USE',X'&HIGH',C'PF3/15',X'&LOW'\n         DC    C'TO CANCEL MASK CHANGE)'\n         DC    X'11D1E3'\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\nBFPGMLEN EQU   *-BFPGMMSG\n         SPACE\nBFJOBMSG DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER FETCH MONITOR JOB NAME MASK'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nBFJOBMSK DC    CL8' '\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(USE',X'&HIGH',C'PF3/15',X'&LOW'\n         DC    C'TO CANCEL MASK CHANGE)'\n         DC    X'11D1E3'\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\nBFJOBLEN EQU   *-BFJOBMSG\n         SPACE\nBCONFIRM DC    X'C51140403C40400013'\n         DCS   SBA,(6,1)\n         DC    X'&LOW',C'SELECT'\n         DC    X'&HIGH',C'ENTER',X'&LOW'\n         DC    C'TO CONFIRM THE',X'&MED'\n         DC    C'RESET AND LOSS',X'&LOW',C'OF ALL COLLECTED DATA.'\n         DCS   SBA,(10,2)\n         DC    C'SELECT',X'&HIGH',C'PF3/15',X'&LOW'\n         DC    C'TO CANCEL THIS REQUEST.'\nBCONMSGL EQU   *-BCONFIRM\n         SPACE\nBFWTO11  WTO   'PRYL11I IMON LLA FETCH MONITORING SUSPENDED BY 12345678+\n               ',ROUTCDE=(2),MF=L\nBFPREVJB EQU   BFWTO11+51,8\nBFWTO12  WTO   'PRYL12I IMON LLA FETCH MONITORING RESTARTED BY 12345678+\n               ',ROUTCDE=(2),MF=L\nBFCOLLJB EQU   BFWTO12+51,8\nBFWTO13  WTO   'PRYL13I IMON LLA FETCH MONITORING RESET BY 12345678',  +\n               ROUTCDE=(2),MF=L\nBFRSETJB EQU   BFWTO13+47,8\nBFWTO14  WTO   'PRYL14I IMON LLA FETCH MONITORING PGM MASK ******** SET+\n                BY 12345678',ROUTCDE=(2),MF=L\nBFPMSK   EQU   BFWTO14+47,8\nBFPMSKJB EQU   BFWTO14+63,8\nBFWTO15  WTO   'PRYL15I IMON LLA FETCH MONITORING JOB MASK ******** SET+\n                BY 12345678',ROUTCDE=(2),MF=L\nBFJMSK   EQU   BFWTO15+47,8\nBFJMSKJB EQU   BFWTO15+63,8\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAC": {"ttr": 12042, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\x0b\\x00\\x00\\x00\\x94\\x11\\x7f\\x01\\x06\\x11\\x1f#7\\x02/\\x01u\\x01\\x10\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "52.11", "flags": 0, "createdate": "1994-04-27T00:00:00", "modifydate": "2006-04-21T23:37:00", "lines": 559, "newlines": 373, "modlines": 272, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986,1994,2003,2006  PRYCROFT SIX PTY LTD\n         TITLE 'CHANNEL PATH MONITOR DISPLAY LINE MAPPING'\nCHNLINE  DSECT\nCHNENTRY DS    XL(L'LOWX)\nCHCHPID  DS    CL3\nCHPTYPE  DS    CL5\n         DS    CL1\nCHSTATUS DS    CL8\nCHBUSY   DS    CL7\n         DS    CL1\nCHDESC   DS    CL32\nCHBAR    DS    CL1\nCHGRAF   DS    CL20\n         DS    CL1\n         TITLE 'CHANNEL PATH MONITOR SUBROUTINE'\nIMPXA    CSECT\n         USING CHANNELS,R11\nCHANNELS DS    0H\n         L     R1,SMCAADDR       POINT TO THE SMCA.\n         MVC   CIOSRATE+71(4),16(R1)   COPY SYSTEM ID.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '  ADJUST ANY COMMAND INPUT.\n         B     CMDSCANC          PROCESS IT.\n         SPACE\n         USING WNDWMNGR,R15\nREDOCHAN L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         SLR   R0,R0\n         ST    R0,WINLINES       INITIALIZE LINE COUNTER.\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   8(R2),X'F3'       SHOW HEADING IN PINK.          (I3279)\n         MVC   LL-79(79,R2),BLANKS\n         MVC   LL-60(39,R2),HEADINGC\n         BAS   R14,CADDLINE      HEADING LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         CLI   CHANMDSW,C'S'     SHOWING SUMMARY?\n         BE    ESACHANS          YES.\n         USING CVT,R3\n         MVC   LL-79(79,R2),CHPDCOLS\n         BAS   R14,CADDLINE      COLUMN HEADINGS NOW COMPLETE.\n         L     R8,CVTICHPT       PT TO INSTALLATION CHANNEL PATH TBL.\n         DROP  R3                CVT.\n         L     R3,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         L     R4,12(,R3)        POINT TO CHANNEL PATH MEASUREMENT TBL.\n         LA    R4,12(,R4)        POINT TO FIRST CPMT ENTRY.\n         L     R3,28(,R3)        POINT TO LAST CPMT ENTRY.\n         LA    R6,256            GET MAXIMUM CHPID COUNT.\n         USING CHNLINE,R2\nCHPDLNLP TM    0(R8),X'80'       ANY SIGN OF LIFE?\n         BZ    NXTCHPID          HE'S DEAD, JIM.\n         MVC   CHNENTRY,LOWX     LOAD ATTRIBUTE BYTES.\n         MVI   CHBAR,C'|'        SUPPLY GRAPH BORDER.\n         MVI   CHBAR+5,C'\u00a6'\n         MVI   CHBAR+10,C'\u00a6'\n         MVI   CHBAR+15,C'\u00a6'\n         MVI   CHBAR+20,C'\u00a6'\n         LA    R0,256\n         SR    R0,R6             GET CHANNEL PATH ID.\n         STH   R0,CHANNMBR       SAVE IT.\n         UNPK  CHCHPID,CHANNMBR+1(2)\n         TR    CHCHPID,HEX-C'0'  SHOW IT.\n         MVI   CHCHPID+2,C' '\n         ICM   R0,1,0(R8)        GET ARRAY BYTE.\n         BNM   NXTCHPID          FLAG JUST GOT RESET.\n         SLR   R1,R1             PREPARE FOR SHIFT.\n         LA    R15,CHSTATAB      POINT TO STATUS LABELS.\n         SRL   R0,2              DISCARD UNWANTED BITS.\nCHSTATLP SRDL  R0,1              TRANSMIT A BIT.\n         LTR   R1,R1             WAS IT A ONE?\n         BNZ   CHSTATOK          YES, GO LOAD LABEL.\n         LA    R15,8(,R15)       NO, POINT TO NEXT LABEL.\n         B     CHSTATLP          GO TEST NEXT BIT.\nCHSTATOK MVC   CHSTATUS,0(R15)   SHOW CHANNEL STATUS.\n         CLI   0(R8),X'E0'       ONLINE AND HUNKY-DORY?\n         BE    CHCOLROK          YES.\n         MVI   CHCHPID-1,X'F1'   NO, SHOW OFFLINE IN BLUE.\n         BL    CHCOLROK          CHANNEL NOT ONLINE.\n         MVC   CHNENTRY,HIGHX    HIGH INTENSITY FOR ERROR STATUS.\nCHCOLROK DS    0H\n         IOSCHPD CHPID=CHANNMBR,ACRONYM=CHPTYPE,DESC=CHDESC,MF=(E,CCHP)\n         LH    R1,8(,R4)         GET CHANNEL PATH BUSY.\n         LTR   R1,R1             CHECK VALUE.\n         BNP   CHLINEOK          LEAVE BLANK IF ZERO OR OFFLINE.\n         LR    R14,R1            COPY VALUE.\n         M     R0,AHUNDRED       WANT % TO 2 DECIMAL PLACES.\n         LA    R1,128(,R1)       PERFORM ROUNDING.\n         SRL   R1,8              ALLOW FOR FRACTIONAL BITS.\n         CVD   R1,WORK\n         MVC   CHBUSY,=X'402021204B2020'\n         ED    CHBUSY,WORK+5     SHOW BUSY PERCENTAGE.\n         LR    R1,R14            RESTORE VALUE.\n         LA    R1,5*128(,R1)     PERFORM ROUNDING.\n         D     R0,=A(5*256)      MAP 100% TO 20.\n         LTR   R1,R1             ANYTHING TO GRAPH?\n         BNP   CHLINEOK          NO.\n         MVI   CHGRAF,X'05'      YES, GRAPH SOMETHING.\n         BCTR  R1,0              GET WHAT'S LEFT TO GRAPH.\n         LTR   R1,R1             ANYTHING TO GRAPH?\n         BNP   CHLINEOK          NO.\n         BCTR  R1,0              GET LENGTH CODE OF WHAT'S LEFT.\n         EX    R1,CHGRAFIT       FINISH THE GRAPH FOR THIS LINE.\nCHLINEOK BAS   R14,CADDLINE      DISPLAY LINE NOW COMPLETE.\nNXTCHPID LA    R4,12(,R4)        POINT TO NEXT CPMT ENTRY.\n         LA    R8,1(,R8)         POINT TO NEXT ICHPT ENTRY.\n         CR    R4,R3             PAST THE LAST VALID ENTRY?\n         BH    CLCSYSRT          YES, FINISH OFF DISPLAY SCREEN IMAGE.\n         BCT   R6,CHPDLNLP       PROCESS NEXT CHPID.\n         B     CLCSYSRT          CHPID X'FF' NOW FORMATTED.\nCHGRAFIT MVC   CHGRAF+1(0),CHGRAF               <<< EXECUTED >>>\n         DROP  R2                CHNLINE.\n         SPACE\nESACHANS MVC   LL-79(79,R2),CHANCOLS\n         BAS   R14,CADDLINE      COLUMN HEADINGS NOW COMPLETE.\n         LA    R1,2\n         ST    R1,WINLINES       INITIALIZE LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R8,CVTICHPT       POINT TO INSTALLED CHANNEL PATH TBL.\n         DROP  R3                CVT.\n         L     R3,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R3\n         L     R4,CMCTCPMT       POINT TO CHANNEL PATH MEASUREMENT TBL.\n         LA    R4,12(,R4)        POINT TO FIRST CPMT ENTRY.\n         L     R3,CMCTHICP       POINT TO LAST CPMT ENTRY.\n         DROP  R3                CMCT.\n         LA    R6,16             GET NUMBER OF LINES PER SCREEN.\nNXTCHLIN LA    R5,16             GET NUMBER OF CHANNELS PER LINE.\n         MVC   0(LL-79,R2),LOWX  LOAD ATTRIBUTE BYTES.\n         LA    R7,LL-79(,R2)     POINT PAST ATTRIBUTE BYTES.\n         BAS   R14,CADDLINE      THIS WHOLE LINE TO BE DISPLAYED.\nNEXTCHAN LH    R1,8(,R4)         GET CHANNEL PATH BUSY.\n         LTR   R1,R1             EXAMINE BUSY VALUE.\n         BM    ZEROCHAN          LEAVE BLANK IF CHANNEL PATH OFFLINE.\n         BP    PATHUSED          GO AND DO CALCULATION IF POSITIVE.\n         MVI   0(R7),X'24'       FLAG ONLINE WITH GREEN.\nSHOWCHAN MVI   3(R7),X'25'       REVERT TO TURQUOISE FOR UTILIZATION.\n         LA    R15,16\n         SR    R15,R6\n         STC   R15,1(,R7)\n         LA    R15,16\n         SR    R15,R5\n         STC   R15,2(,R7)\n         TR    1(2,R7),HEX       SHOW CHPID IF PATH COMPLETELY UNUSED.\n         B     DONECHAN          HAVE NOW PROCESSED THIS ENTRY.\nZEROCHAN CLI   0(R8),X'00'       IS THE CHANNEL PATH OWNED?\n         BE    DONECHAN          NO, LEAVE BLANK.\n         MVI   0(R7),X'22'       YES, FLAG WITH RED.\n         B     SHOWCHAN\nPATHUSED M     R0,TEN            WANT % TO 1 DECIMAL PLACE.\n         LA    R1,128(,R1)       PERFORM ROUNDING.\n         SRL   R1,8              CONVERT PERMILLE BUSY.\n         C     R1,ONEGRAND       CHANNEL AT LEAST TEN PERCENT BUSY?\n         BNL   INTECHER          YES, DON'T SHOW FRACTIONAL PERCENTAGE.\n         CVD   R1,WORK           GET DECIMAL PERMILLEAGE.\n         OI    WORK+7,X'0F'      ENSURE RESULT IS NUMERIC CHARACTERS.\n         UNPK  1(2,R7),WORK+6(2) UNPACK RESULT.\n         MVC   0(1,R7),1(R7)     PUT WHOLE PERCENT IN RIGHT COLUMN.\n         MVI   1(R7),C'.'        INSERT DECIMAL POINT.\n         B     CHANPCNT          GO GET PERCENTAGE SIGN.\nINTECHER LA    R1,5(,R1)         ROUND TO NEAREST PERCENT.\n         D     R0,TEN            GET PERCENT BUSY.\n         MVC   0(4,R7),ED3       LOAD EDIT MASK.\n         CVD   R1,WORK           GET DECIMAL PERCENTAGE.\n         ED    0(4,R7),WORK+6    LOAD PERCENTAGE INTO DISPLAY LINE.\n         MVC   0(3,R7),1(R7)     MOVE INTO CORRECT COLUMNS.\nCHANPCNT MVI   3(R7),C'%'        INDICATE PERCENTAGE.\nDONECHAN LA    R7,5(,R7)         UPDATE SCREEN BUFFER POINTER.\n         LA    R4,12(,R4)        POINT TO NEXT CPMT ENTRY.\n         LA    R8,1(,R8)         POINT TO NEXT ICHPT ENTRY.\n         CR    R4,R3             PAST THE LAST VALID ENTRY?\n         BH    CLCSYSRT          YES, FINISH OFF DISPLAY SCREEN IMAGE.\n         BCT   R5,NEXTCHAN       NO, PROCESS THE NEXT ENTRY,\n         BCT   R6,NXTCHLIN           PERHAPS ON THE NEXT DISPLAY LINE.\n*        B     CLCSYSRT          CHPID X'FF' NOW FORMATTED.\n         SPACE\nCLCSYSRT LR    R1,R2             POINT TO THE CURRENT DISPLAY LINE.\n         LA    R4,LL             GET THE LINE LENGTH.\n         SR    R1,R4             POINT TO THE PREVIOUS DISPLAY LINE.\n         MVI   2(R1),X'F4'       UNDERSCORE.                    (I3279)\n         MVI   5(R1),X'C4'       UNDERLINE.                     (F9526)\n         L     R5,PARTADDR       POINT TO PAGING ACTIVITY REF. TABLE.\n         LA    R8,80(,R5)        POINT TO THE FIRST PARTE.\n         SLR   R4,R4             ZERO DATA SET COUNTER.\n         ST    R4,CDAIOCT1       RESET DASD I/O COUNTERS.\n         ST    R4,CDAIOCT2\n         L     R1,4(,R5)         COPY TOTAL PARTE COUNT.\n         ST    R1,WORK2          CONVERT IT TO A FULLWORD.\n         SLR   R1,R1             ZERO ACCUMULATOR.\n         B     CFSTPRT1\nCNXTPRT1 AH    R8,PARTELEN       POINT TO NEXT PART ENTRY.\nCFSTPRT1 LA    R4,1(,R4)         INCREMENT USED PARTE COUNTER.\n         C     R4,WORK2          END OF USED PART ENTRIES?\n         BH    CPRTEOK1          YES, PROCESS SWAP DATA SETS.\n         TM    9(R8),X'80'       IS THIS PARTE IN USE?\n         BO    CNXTPRT1          NO, GET THE NEXT ONE.\n         L     R15,28(,R8)       POINT TO FIRST IORB.\n         USING IORB,R15\n         SLR   R0,R0\n         ICM   R0,1,IORNUM       GET PAGE DATA SET IORB COUNT.\n         BZ    CPRTRBL1          SHOULD NOT HAPPEN.\n         LA    R0,1\nCPRTRBL1 AL    R1,IORSION        GET CURRENT SSCH+RSCH COUNT.\n         L     R15,IORIORB       POINT TO THE NEXT IORB.\n         BCT   R0,CPRTRBL1\n         B     CNXTPRT1          PROCESS NEXT PARTE.\n         DROP  R15               IORB.\nCPRTEOK1 ST    R1,SAVE+20        SAVE PAGE I/O COUNT SOMEWHERE.\n         TIME  BIN               GET THE CURRENT TIME.\n         SLR   R1,R1             CLEAR FOR ACCUMULATION.\n         SLR   R15,R15           CLEAR FOR ACCUMULATION.\n         SLR   R9,R9             CLEAR FOR WORK.\n         USING ASVT,R7\n         L     R7,ASVTADDR       POINT TO ADDRESS SPACE VECTOR TABLE.\n         L     R8,ASVTMAXU       GET MAXUSER.\n         LA    R7,ASVTENTY       POINT TO FIRST ASVTE.\n         DROP  R7                ASVT.\nASVTLPC1 ICM   R4,15,0(R7)       POINT TO ASCB.\n         BM    ASVNXTC1          ASID NOT ASSIGNED.\n         USING ASCB,R4\n         AL    R1,ASCBIOSC       ACCUMULATE EXCP COUNT.\n         ICM   R9,3,ASCBSWCT     LOAD SHORT WAIT COUNT.\n         ALR   R15,R9            ACCUMULATE IT.\n         DROP  R4                ASCB.\nASVNXTC1 LA    R7,4(,R7)         POINT TO NEXT ENTRY.\n         BCT   R8,ASVTLPC1       NO, GET NEXT ASVT ENTRY.\n         STM   R15,R1,SAVE+40    SAVE COUNTS AND TIME-OF-DAY SOMEWHERE.\n         L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R4\n         L     R3,CVTUCBA        POINT TO FIRST UNIT CONTROL BLOCK.\n         DROP  R4                CVT.\n         L     R9,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R9\n         L     R9,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R9                CMCT.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   CHANUCB1          NO, FIRST TIME THROUGH THE LOOP.\n         XC    CSCNWORK,CSCNWORK CLEAR WORK AREA FOR THIS UCB SCAN.\nCNXTUCB1 TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   CNXAUCB1          NO, FOLLOW STATIC UCB CHAIN.\n         L     R15,CNFGTKAD      YES, POINT TO IOCTOKEN AREA.\n         UCBSCAN COPY,           SCAN UCBS, EVEN IF NOT APF'D.         +\n               WORKAREA=CSCNWORK,                                      +\n               UCBAREA=CSCNUCB,                                        +\n               UCBPAREA=CSCNPRFX,                                      +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=DASD,                                          +\n               IOCTOKEN=(R15),                                         +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,CSCN,COMPLETE)\n         LTR   R15,R15           WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   GOTUCNT1          NO, NO MORE UCB ENTRIES.\n         LA    R3,CSCNUCB        YES, POINT TO THE RETURNED UCB COPY.\n         B     CHANUCB1          PROCESS IT.\n         USING UCBPMCW1,R3\n         USING UCBOB,UCBBASIC\nCNXAUCB1 ICM   R3,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BZ    GOTUCNT1          CHECK FOR END OF UCB CHAIN.\nCHANUCB1 LA    R15,32            GET \"UCB PREFIX\" LENGTH.\n         SLR   R3,R15            POINT TO PATH MGMT CONTROL WORD.\n         CLI   UCBTBYT3,UCB3DACC DASD UCB?\n         BNE   CNXTUCB1          NO, TRY NEXT UCB.\n         TM    UCBPMCW1+1,UCBMCMB MEASUREMENTS BEING STORED IN CMB?\n         BZ    CNXTUCB1          NO, TRY NEXT UCB.\n         SLR   R1,R1\n         ICM   R1,3,UCBMBI       GET CMB BLOCK INDEX FOR THIS DEVICE.\n         SLL   R1,5              GET OFFSET OF ENTRY INTO CMB.\n         ALR   R1,R9             POINT TO ENTRY FOR THIS DEVICE.\n         TM    MODESW4,ECMB      ECMB RATHER THAN CMB FOR DEVICE?\n         BNO   CUSECMB1          NO, DIRECTLY ACCESS THE CMB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BNO   CNXTUCB1          NO, CANNOT FETCH ECMB DATA.\n         L     R15,IOSECMB@      YES, POINT TO IOSCMB ROUTINE.\n         LA    R1,32(,R3)        POINT TO THE UCB.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESS?\n         BNZ   CNXTUCB1          NO.\n         LA    R1,SECWORKA+48    POINT TO CMB DATA.\nCUSECMB1 SLR   R8,R8             CLEAR FOR INSERT.\n         ICM   R8,3,0(R1)        GET SSCH/RSCH COUNT.\n         A     R8,CDAIOCT1       ACCUMULATE DASD SSCH/RSCH COUNT.\n         ST    R8,CDAIOCT1\n         B     CNXTUCB1          GET NEXT UCB.\n         DROP  R3                UCBPMCW1.\nGOTUCNT1 BAS   R14,CTOTIORT      GET I/O COUNT ACCUMULATOR VALUES.\n         STM   R7,R8,SAVE+28     SAVE THESE VALUES SOMEWHERE.\n         STIMER WAIT,BINTVL=CHANRTWT WAIT FOR A FRACTION OF A SECOND.\n         L     R5,PARTADDR       POINT TO PAGING ACTIVITY REF. TABLE.\n         LA    R8,80(,R5)        POINT TO THE FIRST PARTE.\n         SLR   R4,R4             ZERO DATA SET COUNTER.\n         SLR   R5,R5             ZERO ACCUMULATOR.\n         B     CFSTPRT2\nCNXTPRT2 AH    R8,PARTELEN       POINT TO NEXT PART ENTRY.\nCFSTPRT2 LA    R4,1(,R4)         INCREMENT USED PARTE COUNTER.\n         C     R4,WORK2          END OF USED PART ENTRIES?\n         BH    CPRTEOK2          YES, PROCESS SWAP DATA SETS.\n         TM    9(R8),X'80'       IS THIS PARTE IN USE?\n         BO    CNXTPRT2          NO, GET THE NEXT ONE.\n         L     R15,28(,R8)       POINT TO FIRST IORB.\n         USING IORB,R15\n         SLR   R0,R0\n         ICM   R0,1,IORNUM       GET PAGE DATA SET IORB COUNT.\n         BZ    CPRTRBL2          SHOULD NOT HAPPEN.\n         LA    R0,1\nCPRTRBL2 AL    R5,IORSION        GET CURRENT SSCH+RSCH COUNT.\n         L     R15,IORIORB       POINT TO THE NEXT IORB.\n         BCT   R0,CPRTRBL2\n         B     CNXTPRT2          PROCESS NEXT PARTE.\n         DROP  R15               IORB.\nCPRTEOK2 SL    R5,SAVE+20        GET PAGE SSCH+RSCH COUNT CHANGE.\n         M     R4,TENGRAND\n         TIME  BIN               GET THE CURRENT TIME.\n         SL    R0,SAVE+44        GET THE CHANGE IN TIME.\n         ST    R0,SAVE+44        SAVE IT.\n         DR    R4,R0             GET PAGE SSCH+RSCH RATE.\n         CVD   R5,WORK\n         MVC   CASMRATE+24(9),=X'4020202021204B2020'\n         ED    CASMRATE+24(9),WORK+4\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),CASMRATE\n         BAS   R14,CADDLINE      LINE NOW COMPLETE.\n         L     R7,ASVTADDR       POINT TO ADDRESS SPACE VECTOR TABLE.\n         USING ASVT,R7\n         L     R8,ASVTMAXU       GET MAXUSER.\n         LA    R7,ASVTENTY       POINT TO FIRST ASVTE.\n         DROP  R7                ASVT.\n         SLR   R1,R1             CLEAR FOR ACCUMULATION.\n         SLR   R15,R15           CLEAR FOR ACCUMULATION.\n         SLR   R9,R9             CLEAR FOR WORK.\nASVTLPC2 ICM   R4,15,0(R7)       POINT TO ASCB.\n         BM    ASVNXTC2          ASID NOT ASSIGNED.\n         USING ASCB,R4\n         AL    R1,ASCBIOSC       ACCUMULATE EXCP COUNT.\n         ICM   R9,3,ASCBSWCT     LOAD SHORT WAIT COUNT.\n         ALR   R15,R9            ACCUMULATE IT.\n         DROP  R4                ASCB.\nASVNXTC2 LA    R7,4(,R7)         POINT TO NEXT ENTRY.\n         BCT   R8,ASVTLPC2       NO, GET NEXT ASVT ENTRY.\n         SL    R15,SAVE+40       GET THE CHANGE IN SHORT WAIT COUNT.\n         SL    R1,SAVE+48        GET THE CHANGE IN THE EXCP COUNT.\n         LTR   R15,R15\n         BM    CIOSLINE          SUPPRESS LINE UPON NEGATIVE RESULT.\n         LTR   R1,R1\n         BM    CIOSLINE          SUPPRESS LINE UPON NEGATIVE RESULT.\n         M     R0,TENGRAND       MULTIPLY FOR TWO FRACTIONAL DIGITS.\n         D     R0,SAVE+44        DIVIDE BY THE TIME TO GET THE RATE.\n         M     R14,TENGRAND      MULTIPLY FOR TWO FRACTIONAL DIGITS.\n         D     R14,SAVE+44       DIVIDE BY THE TIME TO GET THE RATE.\n         CVD   R1,WORK\n         MVC   CSYSRATE+24(9),=X'4020202021204B2020'\n         ED    CSYSRATE+24(9),WORK+4\n         CVD   R15,WORK\n         MVC   CSYSRATE+43(9),=X'4020202021204B2020'\n         ED    CSYSRATE+43(9),WORK+4\n         L     R9,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R9\n         L     R3,CVTUCBA        POINT TO FIRST UNIT CONTROL BLOCK.\n         DROP  R9                CVT.\n         L     R9,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R9\n         L     R9,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R9                CMCT.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   CHANUCB2          NO, FIRST TIME THROUGH THE LOOP.\n         XC    CSCNWORK,CSCNWORK CLEAR WORK AREA FOR THIS UCB SCAN.\nCNXTUCB2 TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   CNXAUCB2          NO, FOLLOW STATIC UCB CHAIN.\n         L     R15,CNFGTKAD      YES, POINT TO IOCTOKEN AREA.\n         UCBSCAN COPY,           SCAN UCBS, EVEN IF NOT APF'D.         +\n               WORKAREA=CSCNWORK,                                      +\n               UCBAREA=CSCNUCB,                                        +\n               UCBPAREA=CSCNPRFX,                                      +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=DASD,                                          +\n               IOCTOKEN=(R15),                                         +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,CSCN,COMPLETE)\n         LTR   R15,R15           WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   GOTUCNT2          NO, NO MORE UCB ENTRIES.\n         LA    R3,CSCNUCB        YES, POINT TO THE RETURNED UCB COPY.\n         B     CHANUCB2          PROCESS IT.\n         USING UCBPMCW1,R3\n         USING UCBOB,UCBBASIC\nCNXAUCB2 ICM   R3,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BZ    GOTUCNT2          CHECK FOR END OF UCB CHAIN.\nCHANUCB2 LA    R15,32            GET \"UCB PREFIX\" LENGTH.\n         SLR   R3,R15            POINT TO PATH MGMT CONTROL WORD.\n         CLI   UCBTBYT3,UCB3DACC DASD UCB?\n         BNE   CNXTUCB2          NO, TRY NEXT UCB.\n         TM    UCBPMCW1+1,UCBMCMB MEASUREMENTS BEING STORED IN CMB?\n         BZ    CNXTUCB2          NO, TRY NEXT UCB.\n         SLR   R1,R1\n         ICM   R1,3,UCBMBI       GET CMB BLOCK INDEX FOR THIS DEVICE.\n         SLL   R1,5              GET OFFSET OF ENTRY INTO CMB.\n         ALR   R1,R9             POINT TO ENTRY FOR THIS DEVICE.\n         TM    MODESW4,ECMB      ECMB RATHER THAN CMB FOR DEVICE?\n         BNO   CUSECMB2          NO, DIRECTLY ACCESS THE CMB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BNO   CNXTUCB2          NO, CANNOT FETCH ECMB DATA.\n         L     R15,IOSECMB@      YES, POINT TO IOSCMB ROUTINE.\n         LA    R1,32(,R3)        POINT TO THE UCB.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESS?\n         BNZ   CNXTUCB2          NO.\n         LA    R1,SECWORKA+48    POINT TO CMB DATA.\nCUSECMB2 SLR   R8,R8             CLEAR FOR INSERT.\n         SLR   R8,R8             CLEAR FOR INSERT.\n         ICM   R8,3,0(R1)        GET SSCH/RSCH COUNT.\n         A     R8,CDAIOCT2       ACCUMULATE DASD SSCH/RSCH COUNT.\n         ST    R8,CDAIOCT2\n         B     CNXTUCB2          GET NEXT UCB.\n         DROP  R3                UCBPMCW1.\nGOTUCNT2 S     R8,CDAIOCT1       GET TOTAL DASD SSCH/RSCH COUNT DELTA.\n         BNM   CUCNTOK           PROCEED IF NON-NEGATIVE.\nCUCNTNEG A     R8,SIXFOURK       HANDLE HALFWORD COUNTER WRAP-AROUND.\n         BM    CUCNTNEG          ASSUME MORE THAN 1 IF STILL NEGATIVE.\nCUCNTOK  LTR   R1,R8             COPY THE DASD SSCH/RSCH CHANGE.\n         BNZ   CUCNTPUT          SHOW THE NON-ZERO COUNT.\n         TM    MODESW4,ECMB      ECMBS BEING USED FOR THIS SYSTEM?\n         BNO   CUCNTPUT          NO, IT REALLY WAS ZERO.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BO    CUCNTPUT          YES, IT REALLY WAS ZERO.\n         MVC   CSYSRATE(9),=CL9'(NOT APF)'\n         B     CUCNTSHO          SHOW THE BAD NEWS.\nCUCNTPUT M     R0,TENGRAND       MULTIPLY FOR TWO FRACTIONAL DIGITS.\n         D     R0,SAVE+44        DIVIDE BY THE TIME TO GET THE RATE.\n         CVD   R1,WORK\n         MVC   CSYSRATE(9),=X'4020202021204B2020'\n         ED    CSYSRATE(9),WORK+4\nCUCNTSHO MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),CSYSRATE\n         BAS   R14,CADDLINE      LINE NOW COMPLETE.\nCIOSLINE BAS   R14,CTOTIORT      GET I/O COUNT ACCUMULATOR VALUES.\n         SL    R7,SAVE+28        GET THE I/O SLIH ENTRY COUNT CHANGE.\n         SL    R8,SAVE+32        GET THE TPI CC=1 COUNT CHANGE.\n         LR    R1,R7             COPY THE I/O SLIH ENTRY COUNT CHANGE.\n         ALR   R1,R8             ADD THE TPI CC=1 COUNT CHANGE.\n         M     R6,TENGRAND       MULTIPLY FOR TWO FRACTIONAL DIGITS.\n         D     R6,SAVE+44        DIVIDE BY THE TIME TO GET THE RATE.\n         CVD   R7,WORK\n         MVC   CIOSRATE(9),=X'4020202021204B2020'\n         ED    CIOSRATE(9),WORK+4\n         LR    R9,R8             COPY THE TPI CC=1 COUNT CHANGE.\n         M     R8,TENGRAND       MULTIPLY FOR TWO FRACTIONAL DIGITS.\n         D     R8,SAVE+44        DIVIDE BY THE TIME TO GET THE RATE.\n         CVD   R9,WORK\n         MVC   CIOSRATE+24(9),=X'4020202021204B2020'\n         ED    CIOSRATE+24(9),WORK+4\n         M     R0,TENGRAND       MULTIPLY FOR TWO FRACTIONAL DIGITS.\n         D     R0,SAVE+44        DIVIDE BY THE TIME TO GET THE RATE.\n         CVD   R1,WORK\n         MVC   CIOSRATE+43(9),=X'4020202021204B2020'\n         ED    CIOSRATE+43(9),WORK+4\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),CIOSRATE\n         BAS   R14,CADDLINE      LINE NOW COMPLETE.\n         SPACE\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNC LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNC L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDOCHAN          YES, CONTINUE WITH DISPLAYS.\nCMDSCANC CLI   INCHARS,C'D'      DISPLAY DETAILS REQUEST?\n         BE    CHANMODE          YES, SET DISPLAY MODE.\n         CLI   INCHARS,C'S'      DISPLAY SUMMARY REQUEST?\n         BE    CHANMODE          YES, SET DISPLAY MODE.\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    REDOCHAN          YES, CONTINUE WITH REPORT.\nGIVEHLPC MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNC          GO DISPLAY HELP PANEL.\nCHANMODE MVC   CHANMDSW,INCHARS  SET DISPLAY MODE.\n         B     REDOCHAN\n         SPACE\nCTOTIORT SLR   R7,R7             ZERO ACCUMULATOR.\n         SLR   R8,R8             ZERO ACCUMULATOR.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTPCCAT       POINT TO THE PCCA VECTOR TABLE.\n         DROP  R1                CVT.\n         LA    R0,16             GET MAXIMUM CPU COUNT.\nCHPCCALP ICM   R15,15,0(R1)      POINT TO PCCA OF THIS PCCAVT ENTRY.\n         BZ    CPCCANXT          ZERO POINTER SO CHECK OUT NEXT CPU.\n         USING PCCA,R15\n*                                LOAD ACCUMULATED I/O COUNTS.\n         LM    R4,R5,PCCASLIH + PCCASTPI\n         ALR   R7,R4             ACCUMULATE I/O SLIH ENTRY COUNT.\n         ALR   R8,R5             ACCUMULATE TPI WITH CC=1 COUNT.\n         DROP  R15               PCCA.\nCPCCANXT LA    R1,4(,R1)         POINT TO NEXT PCCA POINTER.\n         BCT   R0,CHPCCALP\n         BR    R14               RETURN TO CALLER.\n         SPACE\nCADDLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNC          IF YES, THEN FORGET SUMMARY LINE.\n         MVC   LL-79(79,R2),BLANKS\n         BR    R14\n         DROP  R15               WNDWMNGR.\n         SPACE\n         DROP  R11               CHANNELS.\n         TITLE 'CHANNEL PATH MONITOR - VARIABLES AND CONSTANTS'\nCHANRTWT DC    F'40'\nSIXFOURK DC    F'65536'\nCDAIOCT1 DC    F'0'\nCDAIOCT2 DC    F'0'\nCSCNWORK DC    XL100'00'         UCBSCAN WORKAREA.\nCSCNPRFX DC    XL48'00'          UCBSCAN UCB PREFIX AREA.\nCSCNUCB  DC    XL48'00'          UCBSCAN UCB BASE AREA.\nCHSTATAB DC    CL8'BADFORCE'\n         DC    CL8'VARY OFF'\n         DC    CL8'RECOVERY'\n         DC    CL8'ONLINE  '\n         DC    CL8'OFFLINE '\n         DC    CL8'OTHERSYS'\nCHANNMBR DC    H'0'              CHPID.\nCHANMDSW DC    C'D'              DISPLAY MODE FLAG.\nHEADINGC DC    CL39'CHANNEL PATH UTILIZATION/STATUS DISPLAY'\nCHANCOLS DC    CL79' X0   X1   X2   X3   X4   X5   X6   X7   X8   X9   +\n               XA   XB   XC   XD   XE   XF '\nCHPDCOLS DC    CL79'ID TYPE  STATUS    BUSY% DESCRIPTION               +\n                     |---2+5--5+0--7+5--->%'\nCASMRATE DC    CL79'SYSTEM I/O RATES:        ZZZZ9.99 ASM-PAGE-SSCH/SEC+\n                                           '\nCSYSRATE DC    CL79' ZZZZ9.99 DASD-SSCH/SEC  ZZZZ9.99 EXCP/SEC  ZZZZ9.9+\n               9 ADDR-SPACE-SHORT-WAITS/SEC'\nCIOSRATE DC    CL79' ZZZZ9.99 I/O-SLIH/SEC + ZZZZ9.99 TPI/SEC = ZZZZ9.9+\n               9 IO/SEC FOR SYSTEM SSSS    '\n         SPACE\n         UCBSCAN MF=(L,CSCN)     UCBSCAN PARAMETER LIST.\n         SPACE\n         IOSCHPD MF=(L,CCHP)     IOSCHPD PARAMETER LIST.\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAD": {"ttr": 12297, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4*\\x00\\t\\x00\\x94\\x10_\\x01\\x16\\x02\\x1f\\x13(\\x06\\xcc\\x05\\x85\\x06\\xcc\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "52.42", "flags": 0, "createdate": "1994-04-15T00:00:00", "modifydate": "2016-01-21T13:28:09", "lines": 1740, "newlines": 1413, "modlines": 1740, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1986-2016  PRYCROFT SIX PTY LTD\n         TITLE 'CREATE I/O DEVICE PERFORMANCE MONITOR TABLE'\n         USING CREIOTBL,R4\nCREIOTBL DS    0H                CREATE DEVICE STATISTICS TABLE.\n         LA    R11,DEVICES       GET ADDRESSABILITY TO OPTION \"D\".\n         LA    R6,2048(,R11)     SET UP SECOND\n         LA    R6,2048(,R6)                    BASE REGISTER.\n         USING DEVICES,R11,R6\n         ST    R14,CREIOR14      SAVE THE RETURN ADDRESS.\n         L     R15,CNFGTKAD      POINT TO IOCTOKEN AREA.\n         XC    0(48,R15),0(R15)  CLEAR THE TOKEN FOR THIS UCB SCAN.\n         ICM   R5,15,DEVTBL      DEVICE TABLE ALREADY THERE?\n         BZ    NODEVTBL          NO.\n         LM    R0,R1,0(R5)       YES, SO FREE IT FIRST.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         ST    R15,DEVTBL        RESET DEVICE TABLE ADDRESS.\nNODEVTBL L     R7,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R7\n         L     R3,CVTUCBA        POINT TO FIRST UCB ON CHAIN.\n         LA    R5,1+1            INITIALIZE UCB COUNTER.\n         TM    CVTOSLVL,CVTUCBSV UCB SERVICES AVAILABLE?\n         BNO   FRSTUCB1          NO, CHECK FIRST UCB.\n         L     R8,CNFGTKAD       YES, POINT TO IOCTOKEN AREA.\n         UCBINFO DEVCOUNT,       GET THE NUMBER OF UCBS.               +\n               COUNT=UCBCOUNT,                                         +\n               GROUP=DEVICECLASS,DEVCLASS=ALL,                         +\n               IOCTOKEN=(R8),                                          +\n               MF=(E,DUCBINFO,COMPLETE)\n         L     R5,UCBCOUNT       GET THE TOTAL UCB COUNT.\n         AHI   R5,1+1            FINALIZE TABLE SIZE.\n         B     DGETMAIN\n         USING UCBOB,R3\nNXTUCB1  ICM   R3,15,UCBNXUCB    GET UCB ADDRESS.\n         BZ    DGETMAIN          END OF UCB CHAIN.\nFRSTUCB1 LA    R5,1(,R5)         YES, INCREMENT DEVICE COUNTER.\n         B     NXTUCB1           GET NEXT UCB.\nDGETMAIN MHI   R5,IOENTLEN       GET NUMBER OF DEVICES TIMES IOENTLEN.\n         GETMAIN RU,LV=(R5),SP=SUBPOOL,LOC=(31,64)\n         ST    R5,0(,R1)         SAVE STORAGE SIZE.\n         ST    R1,4(,R1)         SAVE STORAGE ADDRESS.\n         XC    DSCNWORK,DSCNWORK CLEAR WORK AREA FOR THIS UCB SCAN.\n         LA    R3,CVTUCBA-8      POINT TO \"BEFORE\" FIRST UCB ON CHAIN.\n         LR    R5,R1             POINT TO THE DEVICE TABLE.\n         ST    R5,DEVTBL         SAVE THE DEVICE TABLE ADDRESS.\n         USING IOENTRY,R5\n         L     R9,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R9\n         TM    CVTOSLV3,CVTH7707 Z/OS 1.4 OR LATER?\n         BNO   DGETCMBV          NO, CANNOT HAVE ECMBS.\n         TM    CMCTECMBFLAGS,CMCTECMBMODE\n         BNO   DGETCMBV          DO NOT HAVE ECMBS.\n         OI    MODESW4,ECMB      FLAG ECMBS BEING USED BY SYSTEM.\nDGETCMBV L     R9,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R9,R7             CMCT, CVT.\n         TIME  BIN               GET THE CURRENT TIME.\n         ST    R0,CREIOTIM       SAVE IT FOR LATER.\nNXTUCB2A LA    R5,IOENTLEN(,R5)  POINT TO NEXT DEVICE TABLE ENTRY.\n         XC    IOENTRY(IOENTLEN),IOENTRY\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   NXTUCB2B          NO, FOLLOW STATIC UCB CHAIN.\n         L     R8,CNFGTKAD       YES, POINT TO IOCTOKEN AREA.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    DCOPYUCB          NO, HAVE TO COPY UCB.\n         TM    OSLEVEL+1,CVTH5520 SP5.2 OR LATER FOR UCBPXPTR?\n         BNO   DCOPYUCB          NO, HAVE TO COPY UCB.\n         MODESET MF=(E,MDSTSUP)  YES, GET INTO SUPERVISOR STATE.\n         UCBSCAN ADDRESS,        GET UCB ADDRESSES.                    +\n               WORKAREA=DSCNWORK,                                      +\n               UCBPTR=IOUCBADR,                                        +\n               NOPIN,                                                  +\n               UCBPXPTR=IOPFXADR,                                      +\n               LOC=ANY,                                                +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=ALL,                                           +\n               IOCTOKEN=(R8),                                          +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,DSCN,COMPLETE)\n         LR    R8,R15            SAVE UCBSCAN RETURN CODE.\n         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM STATE.\n         LTR   R8,R8             WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   CREIORTN          NO, NO MORE UCB ENTRIES.\n         L     R3,IOUCBADR       POINT TO THE UCB BASE.\n         LA    R1,L'DSCNUCB-1    GET UCB BASE SEGMENT LENGTH CODE.\n         CLI   UCBTBYT3,UCB3TAPE TAPE DEVICE CLASS?\n         BE    *+8               YES, SHOULD NOT GET S0C4.\n         LA    R1,L'DSCNUCB-9    NO, REDUCE LENGTH.\n         EX    R1,DBASESEG       COPY THE UCB BASE SEGMENT.\n         L     R1,IOPFXADR       POINT TO THE UCB PREFIX EXTENSION.\n         MVC   DSCNPRFX(40),0(R1) COPY THE UCB PREFIX ENTENSION.\n         B     DSCANUCB\nDBASESEG MVC   DSCNUCB(0),0(R3)                 <<< EXECUTED >>>\nDCOPYUCB UCBSCAN COPY,           SCAN UCBS, EVEN IF NOT APF'D.         +\n               WORKAREA=DSCNWORK,                                      +\n               UCBAREA=DSCNUCB,                                        +\n               CMXTAREA=DSCNCMXT,                                      +\n               DEVNCHAR=DSCNDEVN,                                      +\n               UCBPAREA=DSCNPRFX,                                      +\n               DCEAREA=DSCNDCE,                                        +\n               DCELEN=DSCNDCEL,                                        +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=ALL,                                           +\n               IOCTOKEN=(R8),                                          +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,DSCN,COMPLETE)\n         LTR   R15,R15           WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   CREIORTN          NO, NO MORE UCB ENTRIES.\nDSCANUCB LA    R3,DSCNUCB        YES, POINT TO THE RETURNED UCB COPY.\n         B     NXTUCB2C          JUMP OVER STATIC UCB CHAIN STUFF.\nNXTUCB2B ICM   R3,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BZ    CREIORTN          HANDLE END OF STATIC UCB CHAIN.\n         LR    R1,R3             POINT TO UCB.\n         AHI   R1,-48            POINT INTO UCB PREFIX.\n         ST    R3,IOUCBADR       SAVE ADDRESS OF UCB BASE.\n         ST    R1,IOPFXADR       SAVE ADDRESS OF UCB PREFIX EXTENSION.\nNXTUCB2C MVC   IOTODBIN,CREIOTIM GET TIME-OF-DAY.\n         MVC   UCBDEVNO,UCBCHAN  GET DEVICE NUMBER.\n         LR    R1,R3             POINT TO UCB.\n         AHI   R1,-48            POINT INTO UCB PREFIX.\n*        TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n*        BNO   *+8               NO, CONTINUE.\n*        LA    R1,DSCNPRFX       YES, POINT TO UCB PREFIX COPY.\n         USING UCBPDATA,R1\n         XC    UCBUSYCT(6),UCBUSYCT       ZERO SAMPLING COUNTERS.\n         SLR   R15,R15           CLEAR FOR INSERT.\n         SLR   R8,R8             CLEAR FOR INSERT.\n         ICM   R15,3,UCBMBI      GET CMB BLOCK INDEX FOR THIS DEVICE.\n         TM    UCBPMCW1+1,UCBMCMB     MEASUREMENTS BEING STORED IN CMB?\n         BO    CMBSTATS          YES, USE THEM.\n         DROP  R1                UCBPDATA.\n         TM    UCBTBYT3,UCB3TAPE NO, MAGNETIC TAPE DEVICE?\n         BNO   NXTUCB2A          NO, GET NEXT UCB.\n         ICM   R1,7,UCBXTNB      POINT TO MAGNETIC TAPE UCB EXTENSION.\n         BZ    NXTUCB2A          HANDLE UCB ABOVE THE LINE.\n         DROP  R3                UCBOB.\n         USING UCBMT,R1\n         ICM   R8,3,UCBSIO       GET SIO COUNT.\n         ST    R8,SIOSOFAR       SAVE SIO COUNT.\n         B     NXTUCB2A          GET NEXT UCB.\n         DROP  R1                UCBMT.\nCMBSTATS SLL   R15,5             GET OFFSET OF ENTRY INTO CMB.\n         ALR   R15,R9            POINT TO ENTRY FOR THIS DEVICE.\n         TM    MODESW4,ECMB      ECMB RATHER THAN CMB FOR DEVICE?\n         BNO   CREIOCMB          NO, DIRECTLY ACCESS THE CMB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BNO   CRECMBOK          NO, CANNOT ACCESS ECMBS.\n         L     R15,IOSECMB@      YES, POINT TO IOSCMB ROUTINE.\n         L     R1,IOUCBADR       POINT TO THE UCB COMMON SEGMENT.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESS?\n         BNZ   NXTUCB2A          NO.\nCRECMBOK LA    R15,SECWORKA+48   YES, POINT TO RETURNED CMB.\nCREIOCMB ICM   R8,3,0(R15)       GET SSCH COUNT.\n         ST    R8,SIOSOFAR       SAVE SSCH COUNT.\n         ICM   R8,3,2(R15)       GET SSCH DATA COLLECTION COUNT.\n         ST    R8,SIOSAMPL       SAVE SSCH DATA COLLECTION COUNT.\n         MVC   SIOCONTM(12),4(R15) SAVE DEVICE MEASUREMENT TIMES.\n         MVI   UCBUSYCT,X'FF'    FLAG CMB USED FOR THIS DEVICE.\n         B     NXTUCB2A          GET NEXT UCB.\n         DROP  R5                IOENTRY.\n         SPACE\nCREIORTN L     R14,CREIOR14      RESTORE RETURN ADDRESS.\n         BR    R14               RETURN TO CALLER.\n         DROP  R4,R11,R6         CREIOTBL, DEVICES.\n         SPACE\nUCBCOUNT DC    F'0'              UCB COUNT FROM UCBINFO.\nCREIOR14 DC    F'0'              SAVE AREA FOR RETURN ADDRESS.\nCREIOTIM DC    F'0'              SAVE AREA FOR CURRENT TIME.\n         UCBINFO PLISTVER=MAX,MF=(L,DUCBINFO)\n         LTORG\n         TITLE 'DEVICE MONITOR DISPLAY LINE MAPPING'\nDEVLINE  DSECT\nDEVENTRY DS    XL(L'LOWX)\nVSAMFLAG DS    CL1\nPAGEFLAG DS    CL1\nSHRDFLAG DS    CL1\nVOLUME   DS    CL6\n         DS    CL1\nDEVNAME  DS    CL4\n         DS    CL1\nSTATUS1  DS    CL3               ALC/ON /OFF/SYS/UNL/VRY/BOX\n         DS    CL1\nSTATUS2  DS    CL3               PVT/PUB/STG/SMS/INT-REQ\n         DS    CL1\nSTATUS3  DS    CL3               RSD/RSV/REM/MNT-PND/REW\nDEVPERM  DS    CL1\nDEVPATH  DS    CL3\nUSECOUNT DS    CL4\nOPNCOUNT DS    CL4\nQUECOUNT DS    CL4\nRSVCOUNT DS    CL4\nDEVGRFMK DS    CL1\nDEVGRFTM DS    CL32\nVTOC     DS    CL4\nDEVTYPNM DS    CL8\nDEVSIORT DS    CL7\n         DS    CL1\nUNITUSER DS    CL8\nCYLINDER DS    CL5\n         DS    CL1\nHEAD     DS    CL2\nRECORD   DS    CL4\n         DS    CL1\nKEY      DS    CL1\n         DS    CL1\nIODRIVER DS    CL4\nDEVSRVTM DS    CL6\nDEVRSPTM DS    CL6\nDEVBSYPC DS    CL4\nUNITPCNT DS    CL1\n         DS    CL1\nDEVCU    DS    CL3\nDEVCACHE DS    CL5\n         DS    CL1\nDEVDFW   DS    CL3\n         DS    CL1\nDEVDUPLX DS    CL3\n         DS    CL1\nDEVSTOGP DS    CL8\n         DS    CL1\nDEVSMSST DS    CL6\nDEVTOTAL DS    CL9\nDEVFREE  DS    CL9\nDEVLARGE DS    CL9\nDVDL     EQU   *-VSAMFLAG\nDVLL     EQU   *-DEVENTRY\n         TITLE 'DEVICE MONITOR SUBROUTINE'\nIMPXA    CSECT\n         USING DEVICES,R11,R6\nDEVICES  DS    0H\n         LA    R6,2048(,R11)     SET UP SECOND\n         LA    R6,2048(,R6)                    BASE REGISTER.\n         MVI   TGETFLG,TGETFLGN  PERFORM ASIS NOWAIT TGETS FOR DEVMON.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         CLI   INBUFF,9          ENTRY VIA PF9/21?\n         BE    DASDCHK           YES, ANY COMMAND ALREADY IN PLACE.\nDEVINITD MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '  NO, ADJUST ANY COMMAND INPUT.\n         B     DASDCHK           PROCESS IT.\n         SPACE\nREDODEVS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R2,2              ASSUME HEADINGS WILL BE SET UP OKAY.\n         ST    R2,WINLINES       INITIALIZE LINE COUNTER.\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         DROP  R15               WNDWMNGR.\n         LA    R15,WHATDEVS      POINT TO ROUTINE ENTRY POINT.\n         BR    R15               GO SHOW CURRENT SELECTION CRITERIA.\n         SPACE\n         USING DEVLINE,R2\n         USING UCBOB,R3\nMASKTEST TM    UCBTBYT3,X'00'                   <<< EXECUTED >>>\nDEVHDGOK L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         L     R3,CVTUCBA-CVT(,R4) POINT TO FIRST UCB.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   FIRSTUCB          NO, FIRST TIME THROUGH THE LOOP.\n         XC    DSCNWORK,DSCNWORK CLEAR WORK AREA FOR THIS UCB SCAN.\nNEXTUCB  TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   XANXTUCB          NO, FOLLOW STATIC UCB CHAIN.\n         L     R15,CNFGTKAD      YES, POINT TO IOCTOKEN AREA.\n         CLI   CLASMASK,X'00'    CAN ANY DEVICES BE SELECTED?\n         BE    SHOWDEVS          NO, SKIP UCBSCAN OVERHEAD.\n         CLI   CLASMASK,X'20'    JUST INTERESTED IN DASD?\n         BE    DUSCNCLS          YES, REDUCE UCBSCAN OVERHEAD.\n         CLI   CLASMASK,X'80'    JUST INTERESTED IN TAPE?\n         BE    DUSCNCLS          YES, REDUCE UCBSCAN OVERHEAD.\n         CLI   CLASMASK,X'08'    JUST INTERESTED IN UREC?\n         BE    DUSCNCLS          YES, REDUCE UCBSCAN OVERHEAD.\n         CLI   CLASMASK,X'10'    JUST INTERESTED IN DISP?\n         BE    DUSCNCLS          YES, REDUCE UCBSCAN OVERHEAD.\n         UCBSCAN COPY,           SCAN UCBS, EVEN IF NOT APF'D.         +\n               WORKAREA=DSCNWORK,                                      +\n               UCBAREA=DSCNUCB,                                        +\n               CMXTAREA=DSCNCMXT,                                      +\n               DEVNCHAR=DSCNDEVN,                                      +\n               UCBPAREA=DSCNPRFX,                                      +\n               DCEAREA=DSCNDCE,                                        +\n               DCELEN=DSCNDCEL,                                        +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=ALL,                                           +\n               IOCTOKEN=(R15),                                         +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,DSCN,COMPLETE)\n         B     DUSCNCHK          CHECK UCBSCAN RESULTS.\nDUSCNCLS UCBSCAN COPY,           SCAN UCBS OF A SPECIFIC DEVICE CLASS. +\n               WORKAREA=DSCNWORK,                                      +\n               UCBAREA=DSCNUCB,                                        +\n               CMXTAREA=DSCNCMXT,                                      +\n               DEVNCHAR=DSCNDEVN,                                      +\n               UCBPAREA=DSCNPRFX,                                      +\n               DCEAREA=DSCNDCE,                                        +\n               DCELEN=DSCNDCEL,                                        +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCID=CLASMASK,                                        +\n               IOCTOKEN=(R15),                                         +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,DSCN,COMPLETE)\nDUSCNCHK LTR   R15,R15           WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   DUSCNOT0          NO, HANDLE NON-ZERO RETURN CODE.\n         LA    R3,DSCNUCB        YES, POINT TO THE RETURNED UCB COPY.\n         B     FIRSTUCB          PROCESS IT.\nXANXTUCB ICM   R3,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BZ    SHOWDEVS          NO MORE UCB ENTRIES.\nFIRSTUCB IC    R1,CLASMASK       LOAD DEVICE CLASS SELECTION MASK.\n         EX    R1,MASKTEST       CORRECT DEVICE TYPE?\n         BZ    NEXTUCB           NO, TRY NEXT UCB.\n         CLI   SELVOLID,C' '     VOLUME SERIAL PREFIX SELECTION?\n         BNH   UCBVFY            NO, VERIFY UCB PREFIX CHECKING.\n         LH    R9,VPRFXLEN       YES, GET VOLUME SERIAL PREFIX LENGTH.\n         LA    R7,SELVOLID       POINT TO DESIRED PREFIX.\n         LA    R8,UCBVOLI        POINT TO VOLUME SERIAL NUMBER.\n         STM   R7,R9,WORK+4      SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE VOLUME SERIAL WITH PREFIX.\n         BNE   NEXTUCB           DIDN'T MATCH, SO GET THE NEXT ONE.\nUCBVFY   CLI   SELUCBID,C' '     UNIT CONTROL BLOCK PREFIX SELECTION?\n         BNH   LOADATTR          NO, LOAD ATTRIBUTE BYTES.\n         LH    R9,UPRFXLEN       YES, GET UCB LABEL PREFIX LENGTH.\n         LA    R7,SELUCBID       POINT TO DESIRED PREFIX.\n         LA    R8,UCBNAME        POINT TO UCB NAME.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   *+8               NO, CONTINUE.\n         LA    R8,DSCNDEVN       YES, POINT TO RETURNED DEVICE NUMBER.\n         STM   R7,R9,WORK+4      SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE UCB LABEL WITH PREFIX.\n         BNE   NEXTUCB           DIDN'T MATCH, SO GET THE NEXT ONE.\nLOADATTR MVC   DEVENTRY,LOWX     LOAD ATTRIBUTE BYTES.\n         MVI   DEVENTRY+4,X'F4'  MEDIUM INTENSITY.\n         MVI   DEVENTRY+8,X'F1'  BLUE.                          (I3279)\n         MVI   VSAMFLAG,C' '     BLANK OUT DETAIL LINE\n         MVC   PAGEFLAG(DVDL-1),VSAMFLAG               BEFORE USE.\n         MVC   DEVNAME+1(3),UCBNAME   SHOW UCB NAME.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   DUCBNMOK          NO, PROCEED.\n         MVC   DEVNAME,DSCNDEVN  YES, SHOW RETURNED DEVICE NUMBER.\nDUCBNMOK MVC   DEVTYPN,UCBTYP    GET UCB TYPE INDICATORS.\n         CLI   DEVTYPN+2,X'20'   DASD?\n         BNE   NOTDATYP          NO.\n         NI    DEVTYPN+1,X'DF'   YES, ENSURE SHARED BIT IS OFF.\nNOTDATYP TM    OSLEVEL,CVTUCBSV  IS EDTINFO AVAILABLE?\n         BNO   DEDTSCAN          NO, DO MANUAL SCAN.\n         CLC   DEVTYPO,DEVTYPN   SAME DEVICE TYPE AS PREVIOUSLY?\n         BNE   DNEWTYPE          NO, DETERMINE ITS UNIT NAME.\n         LA    R1,DEVTYPC-4      YES, POINT TO THE UNIT NAME.\n         B     GOTDVTYP          GO LOAD IT INTO THE DISPLAY LINE.\nDNEWTYPE MVC   DEVTYPO,DEVTYPN   SAVE THIS DEVICE TYPE.\n         EDTINFO RTNUNIT,        REQUEST GENERIC UNIT NAME.            +\n               EXTENDED=YES,     PERFORM EXTRA WORK FOR COMMS CLASS.   +\n               DEVTYPE=DEVTYPO,  INPUT DEVICE UCB TYPE BYTES.          +\n               OUTUNIT=DEVTYPC   OUTPUT CHARACTER GENERIC UNIT NAME.\n         LA    R1,DEVTYPC-4      POINT TO THE RESULTANT UNIT NAME.\n         LTR   R15,R15           UNIT NAME SUCCESSFULLY DETERMINED?\n         BZ    GOTDVTYP          YES, GO LOAD IT INTO THE DISPLAY LINE.\n         MVC   DEVTYPC,BLANKS    NO, ERASE ANY RESIDUAL GARBAGE.\n         B     DONDVTYP          PROCEED WITH FURTHER PROCESSING.\nDEDTSCAN ICM   R1,15,EDTADDR     POINT TO ELIGIBLE DEVICES TABLE.\n         BZ    DONEVIOT          SKIP SEARCH IF ADDRESS UNKNOWN.\n         L     R1,28(,R1)        POINT TO LOOK UP VALUE SECTION.\n         L     R15,8(,R1)        GET NUMBER OF UNIT NAMES.\n         ST    R15,WORK2+4       SAVE IT FOR \"HALFTEST\".\n         LA    R1,12(,R1)        POINT TO FIRST ENTRY MINUS FOUR.\n         ST    R1,WORK2          SAVE IT FOR \"HALFTEST\".\nFULLTEST CLC   DEVTYPN,12(R1)    IS THIS THE UNIT TYPE?\n         BE    GOTDVTYP          YES, GO AND LOAD THE UNIT NAME.\n         LA    R1,32(,R1)        NO, POINT TO NEXT ENTRY.\n         BCT   R15,FULLTEST      TRY THE NEXT UNIT TYPE.\n         L     R1,WORK2          POINT TO FIRST DEVICE NAME ENTRY.\n         L     R15,WORK2+4       GET NUMBER OF UNIT NAMES.\nHALFTEST CLC   DEVTYPN+2(2),14(R1) IS THIS THE UNIT TYPE?\n         BE    GOTDVTYP          YES, GO AND LOAD THE UNIT NAME.\n         LA    R1,32(,R1)        NO, POINT TO NEXT ENTRY.\n         BCT   R15,HALFTEST      TRY THE NEXT UNIT TYPE.\n*        MVC   DEVTYPNM+1(6),=C'(UNKN)'\n         B     DONDVTYP          COULDN'T FIND IT.\nGOTDVTYP MVC   DEVTYPNM+1(7),4(1)\nDONDVTYP TM    UCBJBNR,UCBVRDEV  IS THE UCB FOR A VIO DEVICE?\n         BZ    DONEVIOT          NO.\n         MVI   DEVTYPNM,C'V'     YES, INDICATE SAME.\nDONEVIOT LR    R5,R3             POINT TO UCB.\n         AHI   R5,-48            POINT INTO UCB PREFIX.\n*        TM    OSLEVEL,X'88'     UCB SERVICES AVAILABLE?\n*        BNO   *+8               NO, CONTINUE.\n*        LA    R5,DSCNPRFX       YES, POINT TO UCB PREFIX COPY.\n         LA    R1,24(,R5)        POINT TO UNIT CHANNEL PATH ARRAY.\n         ICM   R5,8,22(R5)       LOAD LAST PATH USED MASK.\n         BM    GTLSTPTH          LAST PATH WAS FIRST CHPID IN ARRAY.\n         LA    R9,7              SEVEN OTHER BITS IN THIS BYTE.\nLSTPTHLP LA    R1,1(,R1)         INCREMENT CHANNEL PATH ARRAY POINTER.\n         SLA   R5,1              TEST NEXT BIT.\n         BO    GTLSTPTH          THIS IS IT.\n         BCT   R9,LSTPTHLP       TRY NEXT ONE.\n         B     LSTPTHOK          COULD NOT FIND IT.\nGTLSTPTH UNPK  DEVPATH(3),0(2,R1) UNPACK LAST PATH CHPID BYTE.\n         TR    DEVPATH(2),HEX-C'0' CONVERT TO HEX CHARACTERS.\n         MVI   DEVPATH+2,C' '    ERASE GARBAGE.\nLSTPTHOK TM    UCBSTAT,UCBONLI   IS THE DEVICE ONLINE?\n         BO    ONLINE            YES.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BH    OFFLINE           YES.\n         TM    DEVFLAGS,DOFFLN   SELECTING OFFLINE DEVICES?\n         BZ    NEXTUCB           NO.\nOFFLINE  MVC   STATUS1,=C'OFF'   YES.\n         TM    UCBFLA,UCBBOX     HAS THE DEVICE BEEN FORCED OFFLINE?\n         BO    DEVBOXED          YES, DEVICE IS BOXED OFFLINE.\n         TM    UCBSTAT,UCBALOC   IS THE DEVICE ALLOCATED?\n         BO    ONLINE            YES, COULD BE BOXED OFFLINE.\n         TM    UCBFL5,UCBNALOC   BEING PROCESSED IN OFFLINE MODE?\n         BNO   OFFUNUSD          NO.\n         MVC   STATUS1+3(7),=C'-IN-USE'\n         MVI   DEVENTRY+4,X'F0'  SHOW IN LOW INTENSITY.\n         MVI   DEVENTRY+8,X'F4'  SHOW IN GREEN.                 (I3279)\n         B     OFFUNUSD          CATER FOR I/O DETAILS.\nDEVBOXED MVC   STATUS1,=C'BOX'   INDICATE BOXED OFFLINE.\n         MVI   DEVENTRY+4,X'F8'  SHOW IN HIGH INTENSITY.\n         MVI   DEVENTRY+8,X'F2'  SHOW IN RED.                   (I3279)\n         B     OFFUNUSD          GET ANY OTHER GOOD DATA GOING.\nONLINE   MVC   STATUS1,=C'ON '   DEVICE IS ONLINE.\n         MVI   DEVENTRY+4,X'F4'  MEDIUM INTENSITY.\n         MVI   DEVENTRY+8,X'F5'  SHOW IN TURQUOISE.             (I3279)\n         TM    UCBSTAT,UCBALOC   IS THE DEVICE ALLOCATED?\n         BZ    GOTALLOC          NO.\n         MVC   STATUS1,=C'ALC'   YES.\n         MVI   DEVENTRY+4,X'F0'  LOW INTENSITY.\n         MVI   DEVENTRY+8,X'F6'  SHOW IN YELLOW.                (I3279)\nGOTALLOC TM    UCBSTAT,UCBUNLD   IS THE DEVICE TO BE UNLOADED?\n         BZ    NOUNLOAD          NO.\n         MVC   STATUS1,=C'UNL'   YES.\nNOUNLOAD TM    UCBSTAT,UCBCHGS   IS THE DEVICE TO BE VARIED OFFLINE?\n         BZ    NOVARY            NO.\n         MVC   STATUS1,=C'VRY'   YES.\nNOVARY   TM    UCBSTAT,UCBSYSR   IS THIS THE SYSTEM RESIDENCE VOLUME?\n         BZ    GOTSYSRS          NO, NOT SYSRES NOR SYSTEM CONSOLE.\n         MVC   STATUS1,=C'SYS'   YES.\n         MVI   DEVENTRY+4,X'F0'  LOW INTENSITY.\n         MVI   DEVENTRY+8,X'F7'  SHOW IN WHITE.                 (I3279)\nGOTSYSRS TM    UCBFLA,UCBNRY     IS THE DEVICE NOT READY?\n         BZ    DEVREADY          NO.\n         MVI   VSAMFLAG,C'\u00ac'     YES.\nDEVREADY TM    UCBFLA,UCBPERM    SUBCHANNEL UNUSEABLE?\n         BZ    SCHOKAY           NO.\n         MVI   DEVPERM,C'?'      YES.\nSCHOKAY  TM    UCBTBYT3,UCB3TAPE+UCB3DACC DASD OR TAPE DEVICE?\n         BZ    NOTRSV            NO, SKIP VOLUME ATTRIBUTE TESTS.\n         TM    UCBSTAB,UCBBPRV   IS THIS A PRIVATE VOLUME?\n         BZ    NOTPVT            NO.\n         MVC   STATUS2,=C'PVT'   YES.\n         B     NOTSTG            SKIP PUBLIC & STORAGE TESTS.\nNOTPVT   TM    UCBSTAB,UCBBPUB   IS THIS A PUBLIC VOLUME?\n         BZ    NOTPUB            NO.\n         MVC   STATUS2,=C'PUB'   YES.\n         B     NOTSTG            SKIP STORAGE TEST.\nNOTPUB   TM    UCBSTAB,UCBBSTR   IS THIS A STORAGE VOLUME?\n         BZ    NOTSTG            NO.\n         MVC   STATUS2,=C'STG'   YES.\nNOTSTG   TM    UCBFL5,UCBSMS     IS THIS AN SMS-MANAGED VOLUME?\n         BZ    NOTSMS            NO.\n         MVC   STATUS2,=C'SMS'   YES.\n         LA    R1,UCBVOLI        POINT TO VOLUME SERIAL NUMBER.\n         L     R15,GETVLDAD      POINT TO SMS VLD EXTRACTION ROUTINE.\n         BASR  R14,R15           INVOKE SMS VLD EXTRACTION ROUTINE.\n         LTR   R15,R15           SUCCESSFUL SSI CALL?\n         BNZ   NOTSMS            NO, CAN'T TELL ANY STORAGE GROUP.\n         L     R1,8(,R13)        FOLLOW SAVE AREA FORWARD CHAIN.\n         LA    R1,80(,R1)        POINT TO SSOB.\n         USING SSOB,R1\n         L     R0,SSOBRETN       GET SUBSYSTEM RETURN CODE.\n         DROP  R1                SSOB.\n         LA    R1,SSOBHSIZ(,R1)  POINT TO SSSA.\n         USING IEFSSSA,R1\n         LTR   R0,R0             SUCCESSFUL SUBSYSTEM CALL?\n         BZ    DSHOWVLD          YES, SHOW VLD CONTENTS.\n         CVD   R0,WORK\n         MVC   DEVSMSST+2(4),ED3\n         ED    DEVSMSST+2(4),WORK+6\n         MVC   DEVSMSST(3),=C'RC='\n         L     R0,SSSARSN        SHOW REASON CODE.\n         CVD   R0,WORK\n         MVC   DEVFREE+3(6),ED5\n         ED    DEVFREE+3(6),WORK+5\n         MVC   DEVFREE(4),=C'RSN='\n         B     NOTSMS            CAN'T SHOW SMS PARTICULARS.\nDSHOWVLD ICM   R1,15,SSSA1PTR    POINT TO THE VLD.\n         DROP  R1                IEFSSSA.\n         BZ    NOTSMS            ONLY USE VLD IF IT EXISTS.\n         USING VLD,R1\n         MVC   DEVSTOGP,VLDSTGRP DISPLAY SMS STORAGE GROUP OF VOLUME.\n         CLI   VLDMVSS,VLDBOXED  IS THE DEVICE BOXED?\n         BNE   SMSBOXOK          NO.\n         MVC   STATUS1,=C'BOX'   YES, INDICATE THIS.\nSMSBOXOK IC    R5,VLDSMSS        LOAD VOLUME SMS STATUS.\n         SLL   R5,29             SHIFT OUT TOP 29 BITS.\n         SRL   R5,29             ENSURE VALUE IN 0-TO-7 RANGE.\n         MHI   R5,6              GET INDEX INTO STATUS LABEL TABLE.\n         LA    R5,SMSVSTAT(R5)   POINT TO STATUS LABEL.\n         MVC   DEVSMSST,0(R5)    SHOW VOLUME SMS STATUS.\n         L     R0,VLDNTCPY       LOAD TOTAL CAPACITY MEGABYTES.\n         LA    R15,DEVTOTAL      POINT TO DISPLAY AREA.\n         BAS   R14,DEVMEGS       FORMAT AND LOAD INTO DISPLAY AREA.\n         L     R0,VLDNFREE       LOAD FREE CAPACITY MEGABYTES.\n         LA    R15,DEVFREE       POINT TO DISPLAY AREA.\n         BAS   R14,DEVMEGS       FORMAT AND LOAD INTO DISPLAY AREA.\n         L     R0,VLDNLEXT       LOAD LARGEST FREE EXTENT MEGABYTES.\n         LA    R15,DEVLARGE      POINT TO DISPLAY AREA.\n         BAS   R14,DEVMEGS       FORMAT AND LOAD INTO DISPLAY AREA.\n         DROP  R1                VLD.\nNOTSMS   TM    UCBSTAB,UCBBSVL   IS THIS A REMOVABLE/DEMOUNTABLE DISK?\n         BZ    NOTREM            NO.\n         MVC   STATUS3,=C'REM'   YES.\n         B     NOTRSV            SKIP RESIDENT & RESERVED TESTS.\nNOTREM   TM    UCBSTAT,UCBPRES   IS THIS A PERMANENTLY RESIDENT VOLUME?\n         BZ    NOTRSD            NO.\n         MVC   STATUS3,=C'RSD'   YES.\nNOTRSD   TM    UCBSTAT,UCBRESV   IS THIS A RESERVED VOLUME?\n         BZ    NOTRSV            NO.\n         MVC   STATUS3,=C'RSV'   YES.\nNOTRSV   DS    0H                HAVE ALL MOUNT ATTRIBUTES.\n*        TM    UCBFLA,X'8E'      IS UCBDEFER/STRT/HALT/CLEAR ON?\n*        BZ    DONEDEVQ          NO, SO THERE CAN'T BE ANY QUEUING.\n         LR    R5,R3             POINT TO UCB.\n         AHI   R5,-48            POINT TO BEFORE UCBIOQF AND UCBIOQL.\n*        TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n*        BNO   *+8               NO, CONTINUE.\n*        LA    R5,DSCNPRFX       YES, POINT TO UCB PREFIX COPY.\n         SLR   R1,R1             RESET QUEUE LENGTH COUNTER.\n         LM    R8,R9,4(R5)       POINT TO FIRST AND LAST IOQS.\n         LTR   R5,R8             IS THE FIRST POINTER ZERO?\n         BZ    DONEDEVQ          YES, NO QUEUING.\n         USING IOQ,R5\nIOQLOOP  TM    IOQFLA,IOQACTV    IS THIS IOQ ACTIVE?\n         BO    NEXTIOQ           YES, SO THIS IS NOT QUEUED.\n         LA    R1,1(,R1)         NO, WAITING SO INCREMENT POINTER.\nNEXTIOQ  CR    R5,R9             LAST IOQ ON QUEUE?\n         BE    GOTIOQLN          YES, END OF CHAIN.\n         ICM   R5,15,IOQCHAIN    POINT TO NEXT IOQ ON UCB CHAIN.\n         BNZ   IOQLOOP           PROCESS IT.\n         DROP  R5                IOQ.\nGOTIOQLN CVD   R1,WORK           DISPLAY NUMBER OF I/O REQUESTS QUEUED\n         MVC   QUECOUNT,ED3Z             FOR THIS UNIT.\n         ED    QUECOUNT,WORK+6\nOFFUNUSD DS    0H                CATER FOR I/O TO OFFLINE DISKS.\nDONEDEVQ TIME  BIN               GET TIME-OF-DAY.\n         USING IOENTRY,R7\n         L     R7,DEVTBL         POINT TO FIRST DEVICE ENTRY.\nUCBNMCHK LA    R7,IOENTLEN(,R7)  GET NEXT ONE.\n         CLC   UCBDEVNO,UCBCHAN  ENTRY FOR THIS DEVICE?\n         BNE   UCBNMCHK          NO.\n         TM    UCBTBYT3,X'A0'    DASD OR TAPE DEVICE?\n         BNZ   GETVSN            YES, GET VOLUME SERIAL NUMBER.\n         CLI   UCBTBYT3,X'08'    UNIT RECORD DEVICE?\n         BNE   GETSTATS          NO.\n         CLI   UCBTBYT4,X'0E'    3800 PRINTING SUBSYSTEM?\n         BE    DTLS3800          YES.\n         TM    UCBTBYT2,X'80'    UNIVERSAL CHARACTER SET PRESENT?\n         BZ    GETSTATS          NO.\n         L     R5,UCBXTADR       YES, POINT TO UCS UCB EXTENSION.\n         MVC   VTOC,8(R5)        LOAD FORMS CONTROL BUFFER NAME.\n         MVC   USECOUNT+1,0(R5)  LOAD UNIVERSAL CHARACTER SET NAME.\n         B     GETSTATS\nDTLS3800 L     R5,UCBXTADR       YES, POINT TO 3800 UCB EXTENSION.\n         MVC   VTOC,24(R5)       LOAD FORMS CONTROL BUFFER NAME.\n         MVC   USECOUNT+1,28(R5) LOAD UNIVERSAL CHARACTER SET NAME.\n         B     GETSTATS\nGETVSN   MVC   VOLUME,UCBVOLI    DISPLAY VOLUME SERIAL NUMBER.\n         OC    VOLUME,VOLUME     IS VOLUME SERIAL NUMBER NULLS?\n         BZ    GETOPNCT          YES, GET THE DEVICE OPEN COUNT.\n         CLI   VOLUME,C'9'       NO, IS IT PRINTABLE?\n         BH    SCRATCH           NO, MUST BE A SCRATCH VOLUME REQUEST.\n         CLI   VOLUME,C'\u00a2'       IS IT PRINTABLE?\n         BNL   GETOPNCT          YES, REALLY IS VOLUME SERIAL NUMBER.\nSCRATCH  MVC   VOLUME,=C'SCRTCH' NO, ASSUME SCRATCH, AVOID SCREEN ERRS.\nGETOPNCT SLR   R1,R1             CLEAR A WORK REGISTER.\n         IC    R1,UCBDMCT        LOAD UCB OPEN COUNT.\n         CHI   R1,128            HIGH-ORDER BIT ON?\n         BL    SHOWOPEN          NO, SHOW COUNT.\n         AHI   R1,-128           TURN OFF HIGH-ORDER BIT.\n         MVC   STATUS3(7),=C'MNT-PND'    SHOW THAT A MOUNT IS PENDING.\nSHOWOPEN CVD   R1,WORK           DISPLAY NUMBER OF OPEN DCBS\n         MVC   OPNCOUNT,ED3Z            FOR THIS VOLUME.\n         ED    OPNCOUNT,WORK+6\n         CLI   UCBTBYT3,X'20'    DIRECT ACCESS STORAGE DEVICE?\n         BE    GETUSAGE          YES, PROCEED WITH DASD PARTICULARS.\n         CLI   UCBTBYT3,X'80'    MAGNETIC TAPE UNIT?\n         BNE   GETSTATS          NO, SKIP TAPE PARTICULARS.\n         LH    R1,UCBFSCT        GET FILE (DATA SET) SEQUENCE COUNT.\n         CVD   R1,WORK\n         MVC   CYLINDER+1(4),ED3Z\n         ED    CYLINDER+1(4),WORK+6 SHOW IT IN THE CYLINDER COLUMN.\n         ICM   R1,3,UCBFSEQ      GET FILE (DATA SET) SEQUENCE NUMBER.\n         BZ    LABELSOK          ZERO, SO TAPE NOT THERE YET.\n         CVD   R1,WORK\n         MVC   RECORD,ED3Z\n         ED    RECORD,WORK+6     SHOW IT IN THE RECORD COLUMN.\n         MVC   HEAD,=C'BL'       PREPARE FOR BYPASS LABEL PROCESSING.\n         TM    UCBTFL1,UCBBLP    LABEL=BLP?\n         BO    LABELSOK          YES.\n         MVI   HEAD,C'S'         NO, ASSUME STANDARD LABELS.\n         TM    UCBTFL1,UCBNLTP+UCBNSLTP   CHECK LABEL FLAGS.\n         BZ    LABELSOK          LABEL=SL VERIFIED.\n         MVI   HEAD,C'N'         ASSUME UNLABELLED VOLUME (OR BLP).\n         TM    UCBTFL1,UCBNSLTP  NON-STANDARD LABELS?\n         BZ    LABELSOK          NO, MUST BE UNLABELLED,\n         MVI   HEAD,C'U'         YES, CALL IT \"USER LABELS\".\nLABELSOK DS    0H\n         TM    UCBWGT,UCBREW     REWIND ISSUED TO THIS TAPE?\n         BNO   GETDNSTY          NO, GET SIO COUNT.\n         MVC   STATUS3,=C'REW'   YES, INDICATE SAME.\nGETDNSTY TM    UCBDMCT,UCBMOUNT  MOUNT PENDING?\n         BO    GETSTATS          YES, DENSITY NOT APPROPRIATE.\n         TM    UCBTFL2,UCBTVCMP  DOES VOLUME CONTAIN COMPACTED DATA?\n         BZ    MTCOMPOK          NO.\n         MVC   VTOC,=C'COMP'     YES.\nMTCOMPOK SLR   R1,R1\n         ICM   R1,7,UCBXTNB      POINT TO MAGNETIC TAPE UCB EXTENSION.\n         BZ    CALCMTIO          HANDLE UCB ABOVE THE LINE.\n         TM    UCBTBYT4,X'80'    3480?\n         BO    CARTDENS          YES, CARTRIDGE DEVICE.\n         TM    UCBTBYT1,X'01'    3400-9?  (3480 IN 3420 COMPAT MODE?)\n         BO    CARTDENS          YES, CARTRIDGE DEVICE.\n         CLI   11(R1),X'D3'      2250 BPI MODESET-2 OP-CODE?\n         BNE   TRY1600           NO.\n         MVC   VTOC,=C'6250'     YES.\n         B     CALCMTIO\nTRY1600  CLI   11(R1),X'C3'      1600 BPI MODESET-2 OP-CODE?\n         BNE   TRY800            NO.\n         MVC   VTOC,=C'1600'     YES.\n         B     CALCMTIO\nTRY800   CLI   11(R1),X'CB'      800 BPI MODESET-2 OP-CODE?\n         BNE   CALCMTIO          NO, 9-TRACK DENSITY MODE NOT SET.\n         MVC   VTOC,=C' 800'     YES.\n         B     CALCMTIO\nCARTDENS CLI   10(R1),C' '       ANY VOLUME TO DISMOUNT?\n         BNH   CALCMTIO          NO.\n         MVC   UNITUSER+2(6),10(R1)   YES, DISPLAY IT.\n         ICM   R1,8,4(R1)        LOAD DISMOUNT REQUEST CODE.\n         SRL   R1,5              DEMOTE THREE TOP BITS.\n         STCM  R1,8,UNITUSER     DISPLAY CODE. (SHOULD BE 1, 2 OR 4.)\n         TR    UNITUSER(1),KEEPCART   CONVERT TO PRINTABLE CHARACTER.\n*        CLI   VTOC+3,C' '       NULL IMBEDDED IN VOLUME SERIAL?\n*        BH    CALCMTIO          NO, CONTINUE.\n*        LA    R1,DSCNDCE        POINT TO UCB DEVICE CLASS EXTENSION.\n*        TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n*        BO    VOLREPAR          YES, CONTINUE.\n*        SLR   R1,R1\n*        ICM   R1,B'0111',21(R3) POINT TO UCB COMMON EXTENSION.\n*        ICM   R1,B'1111',24(R1) POINT TO THE UCB CLASS EXTENSION.\n*        BZ    CALCMTIO          NO CLASS EXTENSION EXISTS.\n*OLREPAR MVC   VTOC+3(1),57(R1)  COMPLETE THE VOLUME SERIAL.\nCALCMTIO LA    R15,48            CLEAR WORK REGISTER.\n         LR    R1,R3             POINT TO UCB.\n         SLR   R1,R15            GET INTO UCB PREFIX.\n*        TM    OSLEVEL,X'88'     UCB SERVICES AVAILABLE?\n*        BNO   *+8               NO, CONTINUE.\n*        LA    R1,DSCNPRFX       YES, POINT TO UCB PREFIX COPY.\n         TM    17(R1),X'10'      MEASUREMENTS BEING COLLECTED?\n         BO    GETSTATS          YES, DON'T USE TAPE UCB EXTN STATS.\n         ICM   R1,B'0111',45(R3) POINT TO MAGNETIC TAPE UCB EXTENSION.\n         BZ    GETSTATS          HANDLE UCB ABOVE THE LINE.\n         ICM   R15,B'0011',6(R1) GET SIO COUNT FOR THIS DATA SET.\n         L     R1,SIOSOFAR       GET PREVIOUS SIO COUNT.\n         ST    R15,SIOSOFAR      STORE NEW SIO COUNT.\n         SR    R15,R1            GET SIO CHANGE.\n         BZ    GETSTATS          NO I/O DONE, SO SKIP FORMATING.\n         MVC   DEVSIORT+4(6),=C'DS-CHG'\n         BM    GETSTATS          NEGATIVE, PROBABLY A DIFFERENT FILE.\n         LR    R1,R0             CURRENT TIME.\n         S     R1,IOTODBIN       GET CHANGE IN TIME.\n         ST    R0,IOTODBIN       SAVE PRESENT TIME.\n         M     R14,TENGRAND      FOR CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET SIO/SECOND.\n         CVD   R15,WORK\n         MVC   DEVSIORT,=X'402021204B2020'\n         ED    DEVSIORT,WORK+5\n         B     GETSTATS          CONTINUE WITH GENERAL TESTS.\nGETUSAGE DS    0H                DASD ONLY PROCESSING.\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,UCBSQC         LOAD RESERVE MACRO INSTRUCTION COUNT.\n         CVD   R1,WORK           DISPLAY NUMBER OF RESERVES ISSUED\n         MVC   RSVCOUNT,ED3Z             FOR THIS VOLUME.\n         ED    RSVCOUNT,WORK+6\n         TM    UCBSTAT,UCBONLI   IS THE DEVICE ONLINE?\n         BZ    GETUSECT          NO, OFFLINE.\n         CLC   UCBVTOC(2),FFFF   EXAMINE VTOC RELATIVE TT.\n         BNE   RELTRACK          NOT TRACK ZERO SO SHOW TRACK ADDRESS.\n         IC    R1,UCBVTOC+2      GET RECORD NUMBER OF TRACK ZERO.\n         LA    R1,HEX(R1)        GET HEX CHARACTER.\n         MVC   VTOC(3),=C'REC'   SHOW IT IS RECORD OF TRACK 0.\n         MVC   VTOC+3(1),0(R1)   SHOW RECORD NUMBER.  ('REC5' FOR VM.)\n         B     GETUSECT\nRELTRACK UNPK  VTOC(5),UCBVTOC(3) GET VTOC STARTING TTR.\n         TR    VTOC,HEX-C'0'     TRANSLATE TO HEXADECIMAL CHARACTERS.\n         MVI   VTOC+4,C' '       R OF TTR ALWAYS 1, SO DON'T SHOW.\nGETUSECT ICM   R1,3,UCBUSER      LOAD UCB USE COUNT.\n         CVD   R1,WORK           DISPLAY NUMBER OF ALLOCATIONS.\n         ICM   R15,3,DEVPATH     SAVE CHANNEL ID.\n         MVC   USECOUNT-2(6),ED5Z\n         ED    USECOUNT-2(6),WORK+5\n         STCM  R15,3,DEVPATH     RESTORE CHANNEL ID.\n         LA    R1,DSCNDCE        POINT TO UCB DEVICE CLASS EXTENSION.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BO    DDCECHEK          YES, CONTINUE.\n         SLR   R1,R1\n         ICM   R1,7,UCBEXTP      POINT TO UCB COMMON EXTENSION.\n         USING UCBCMEXT,R1\n         ICM   R1,15,UCBCLEXT    POINT TO THE UCB CLASS EXTENSION.\n         BZ    GETSTATS          NO CLASS EXTENSION EXISTS.\n         DROP  R1                UCBCMEXT.\n         USING DASDDCE,R1\nDDCECHEK TM    DCEFLAG1,DCECUVAL CONTROL UNIT VALID?\n         BNO   DEVCUDON          NO.\n         UNPK  DEVCU,DCECUID(2)  YES, SHOW CONTROL UNIT ID.\n         TR    DEVCU(2),HEX-C'0'\n         MVI   DEVCU+2,C' '\nDEVCUDON TM    DCEFLAG2,DCESSDPX DUPLEX VOLUME?\n         BNO   DEVDUPOK          NO.\n         MVC   DEVDUPLX,=C'YES'  YES.\n         TM    DCEFLAG2,DCESSPRI PRIMARY DUPLEX VOLUME?\n         BNO   DEVDUPL2          NO.\n         MVC   DEVDUPLX,=C'PRI'  YES.\nDEVDUPL2 TM    DCEFLAG2,DCESSSEC SECONDARY DUPLEX VOLUME?\n         BNO   DEVDUPOK          NO.\n         MVC   DEVDUPLX,=C'SEC'  YES.\nDEVDUPOK TM    DCEACTFE,DCEACACH CACHING THIS VOLUME?\n         BNO   DEVCACOK          NO.\n         MVC   DEVCACHE+1(3),=C'YES'\nDEVCACOK TM    DCEACTFE,DCEAFWRT DASDFASTWRITE ENABLED?\n         BNO   DEVDFWOK          NO.\n         MVC   DEVDFW,=C'YES'\nDEVDFWOK TM    DCEFLAG1,DCEVALFS DEVICE FIELDS VALID?\n         BNO   GETSTATS          NO.\n         CLI   UCBTBYT4,X'0E'    3380 OR 3390?\n         BL    GETSTATS          NO.\n         CLI   UCBTBYT4,X'0F'    3380 OR 3390?\n         BH    GETSTATS          NO.\n         MVC   WORK(1),DCEOBRDT  COPY OBR DEVICE TYPE CODE.\n         CLI   WORK,X'1E'        IN EXPECTED RANGE?\n         BL    GETSTATS          NO.\n         CLI   WORK,X'32'        IN EXPECTED RANGE?\n         BH    GETSTATS          NO.\n         TR    WORK,DASDMODL-X'1E'\n         CLI   WORK,C' '         GOT A MODEL NUMBER?\n         BNH   GETSTATS          NO.\n         MVI   DEVTYPNM+5,C'('   YES, SHOW IT.\n         MVC   DEVTYPNM+6(1),WORK\n         MVI   DEVTYPNM+7,C')'\n         DROP  R1                DASDDCE.\nGETSTATS LR    R5,R3             POINT TO COMMON UCB SECTION.\n         AHI   R5,-48            POINT TO UCB PREFIX.\n*        TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n*        BNO   *+8               NO, CONTINUE.\n*        LA    R5,DSCNPRFX       YES, POINT TO UCB PREFIX COPY.\n         USING UCBPDATA,R5\n         TM    UCBPMCW1+1,UCBMCMB    MEASUREMENTS BEING COLLECTED?\n         BZ    EDITBUSY          NO, NOT FOR THIS DEVICE.\n         SLR   R15,R15\n         MVI   DEVGRFMK,X'3B'    INDICATE START OF GRAPH.\n         MVI   DEVGRFTM+4,C'\u00a6'   CALLIBRATE GRAPH AND SHOW CMB EXISTS.\n         MVC   DEVGRFTM+5(25),DEVGRFTM\n         ICM   R15,3,18(R5)      GET MEASUREMENT BLOCK INDEX.\n         DROP  R5                UCBPDATA.\n         L     R1,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R1\n         L     R5,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R1                CMCT.\n         SLL   R15,5             GET ENTRY OFFSET INTO CMB.\n         ALR   R5,R15            POINT TO THIS DEVICE'S ENTRY.\n         TM    MODESW4,ECMB      ECMB RATHER THAN CMB FOR DEVICE?\n         BNO   DEVIOCMB          NO, DIRECTLY ACCESS THE CMB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BNO   EDITBUSY          NO, CANNOT ACCESS ECMBS.\n         L     R15,IOSECMB@      YES, POINT TO IOSCMB ROUTINE.\n         LR    R8,R0             SAVE TIME OF DAY.\n         LR    R1,R3             POINT TO THE UCB.\n         BASR  R14,R15           INVOKE IT.\n         LR    R0,R8             RESTORE TIME OF DAY.\n         LTR   R15,R15           SUCCESS?\n         BNZ   EDITBUSY          NO.\n         LA    R5,SECWORKA+48    YES, POINT TO RETURNED CMB.\nDEVIOCMB L     R15,0(,R5)        GET SSCH COUNTS FOR THIS DEVICE.\n         ST    R15,WORK2         SAVE FOR LATER.\n         SRL   R15,16            GET TOTAL SSCH COUNT FOR THIS DEVICE.\n         L     R1,SIOSOFAR       GET PREVIOUS SSCH COUNT.\n         ST    R15,SIOSOFAR      STORE NEW SSCH COUNT.\n         SR    R15,R1            GET SSCH CHANGE.\n         BNM   DEVSIOOK          NON-NEGATIVE SSCH COUNT IS OK.\n         A     R15,FFFF          WRAP-AROUND OCCURRED,\n         LA    R15,1(,R15)       SO MAKE CORRECTION.\nDEVSIOOK LR    R1,R0             CURRENT TIME.\n         S     R1,IOTODBIN       GET CHANGE IN TIME.\n         ST    R0,IOTODBIN       SAVE PRESENT TIME.\n         ST    R15,WORK2+4       SAVE SSCH COUNT CHANGE FOR LATER.\n         LTR   R15,R15           ANY I/O SINCE LAST TIME?\n         BZ    QUSAMPLE          NO, NO I/O DONE SO SKIP FORMATING.\n         M     R14,TENGRAND      FOR CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET SIO/SECOND TO TWO DECIMAL PLACES.\n         CVD   R15,WORK\n         MVC   DEVSIORT,=X'402021204B2020'\n         ED    DEVSIORT,WORK+5\n         SLR   R15,R15           CLEAR WORK REGISTER.\n         STH   R15,WORK2         ERASE TOTAL SSCH COUNT.\n         L     R15,WORK2         GET TOTAL SSCH SAMPLE COUNT.\n         S     R15,SIOSAMPL      GET CHANGE IN SSCH SAMPLE COUNT.\n         BNM   DVSAMPOK          NON-NEGATIVE SSCH SAMPLE COUNT IS OK.\n         A     R15,FFFF          WRAP-AROUND OCCURRED,\n         LA    R15,1(,R15)       SO MAKE CORRECTION.\nDVSAMPOK MVC   SIOSAMPL,WORK2    SAVE CURRENT SSCH SAMPLE COUNT.\n         ST    R15,WORK2         SSCH SAMPLE COUNT CHANGE FOR LATER.\n         LM    R8,R10,4(R5)      GET CMB CONTENTS.\n         MVC   SECWORKA(12),SIOCONTM  SAVE PREVIOUS CMB CONTENTS.\n         L     R15,SIOCONTM      LOAD PREVIOUS CONNECT TIME TOTAL.\n         L     R14,SIODSCTM      LOAD PREVIOUS DISCONNECT TIME TOTAL.\n         STM   R8,R10,SIOCONTM   SAVE CURRENT CMB VALUES.\n         SLR   R8,R15            GET CONNECT TIME TOTAL DIFFERENCE.\n         SLR   R10,R14           GET DISCONNECT TIME TOTAL DIFFERENCE.\n         LR    R15,R10           GET DISCONNECT TIME TOTAL DIFFERENCE.\n         ALR   R15,R8            GET TOTAL CHANGE IN BUSY 10**-4 SECS.\n         BZ    RESAMPLE          INDICATE EXACTLY ZERO WITH BLANKS.\n         LR    R9,R15            SAVE FOR LATER.\n         OC    WORK2(4),WORK2    ANY SAMPLE SSCH'S?\n         BZ    NOSAMPLS          NO, SHOULD NEVER HAPPEN.\n         M     R14,WORK2+4       MULTIPLY BY NUMBER OF SSCH'S.\n         SLDL  R14,7             CONVERT TIME SCALE TO MICROSECONDS.\n         LTR   R14,R14           OVERFLOW OCCURRED?\n         BM    QUSAMPLE          YES, AVOID S0C9 ABEND.\n         D     R14,WORK2         DIVIDE BY NUMBER OF SAMPLE SSCH'S.\nNOSAMPLS DR    R14,R1            GET PERCENTAGE TO TWO DECIMAL PLACES.\n         SLR   R14,R14           ZERO FOR DIVIDE.\n         CHI   R15,994           HIGHER THAN 9.94%?\n         BH    INTEGERB          YES, CAN'T FIT IN FRACTIONAL %.\n         AHI   R15,5             ROUND FRACTIONAL DIGIT.\n         D     R14,TEN           GET N.N%.\n         CVD   R15,WORK          CONVERT IT TO DECIMAL.\n         MVC   DEVBSYPC,ED2PNT1+1        MOVE IN EDIT MASK.\n         ED    DEVBSYPC-1(5),WORK+6      EDIT THE OUTPUT FIELD.\n         MVI   UNITPCNT,C'%'     INDICATE PERCENTAGE.\n         B     GETSRVTM          GOT PERCENTAGE BUSY, GET SERVICE TIME.\nINTEGERB LA    R15,50(,R15)      ROUND TO NEAREST PERCENT.\n         D     R14,AHUNDRED      GET PERCENTAGE.\n         CVD   R15,WORK          CONVERT IT TO DECIMAL.\n         MVC   DEVBSYPC,ED3      SHOW NEAREST WHOLE PERCENT.\n         ED    DEVBSYPC,WORK+6\n         MVI   UNITPCNT,C'%'     INDICATE PERCENTAGE.\nGETSRVTM SLR   R8,R8             CLEAR FOR DIVIDE.\n         SLDL  R8,7              CONVERT TIME SCALE TO MICROSECONDS.\n         D     R8,WORK2          DIVIDE BUSY TIME BY SAMPLE SSCH COUNT.\n         SLR   R8,R8             CLEAR FOR DIVIDE.\n         LR    R15,R9            COPY MICROSECONDS VALUE.\n         LA    R9,500(,R9)       PERFORM ROUNDING.\n         D     R8,ONEGRAND       CONVERT TO MILLISECONDS.\n         CVD   R9,WORK           GET AVERAGE BUSY MILLISECONDS PER I/O.\n         ST    R9,SECWORKA+12    SAVE FOR LATER.\n         MVC   DEVSRVTM,ED5\n         ED    DEVSRVTM,WORK+5   EDIT SERVICE TIME MILLISECONDS.\n         SLR   R14,R14           CLEAR FOR DIVIDE.\n         LA    R15,50(,R15)      PERFORM ROUNDING.\n         D     R14,AHUNDRED      CONVERT TO TENTHS OF MILLISECONDS.\n         CL    R15,AHUNDRED      TEN MILLISECONDS OR MORE?\n         BNL   DSRVTMOK          YES, NO NEED FOR FINER DETAIL.\n         CVD   R15,WORK          NO, SHOW FRACTIONAL MILLISECONDS.\n         MVC   DEVSRVTM+1(5),ED2PNT1\n         ED    DEVSRVTM+1(5),WORK+6\nDSRVTMOK L     R9,SIOCONTM\n         SL    R9,SECWORKA       GET THE CHANGE IN CONNECT TIME.\n         AL    R9,SIOPNDTM\n         SL    R9,SECWORKA+4     ADD THE CHANGE IN PENDING TIME.\n         AL    R9,SIODSCTM\n         SL    R9,SECWORKA+8     ADD THE CHANGE IN DISCONNECT TIME.\n         LTR   R9,R9             ANY DATA TO REPORT?\n         BNP   QUSAMPLE          NO, CMB DATA HAS NOW BEEN PROCESSED.\n         SLR   R8,R8             YES, CLEAR FOR DIVIDE.\n         SLDL  R8,7              CONVERT TIME SCALE TO MICROSECONDS.\n         D     R8,WORK2          DIVIDE TIME BY SAMPLE SSCH COUNT.\n         SLR   R8,R8             CLEAR FOR DIVIDE.\n         LR    R15,R9            COPY MICROSECONDS VALUE.\n         LA    R9,500(,R9)       PERFORM ROUNDING.\n         D     R8,ONEGRAND       CONVERT TO MILLISECONDS.\n         CVD   R9,WORK           GET AVERAGE MILLISECONDS PER I/O.\n         MVC   DEVRSPTM,ED5\n         ED    DEVRSPTM,WORK+5   EDIT SERVICE TIME MILLISECONDS.\n         SLR   R14,R14           CLEAR FOR DIVIDE.\n         LA    R15,50(,R15)      PERFORM ROUNDING.\n         D     R14,AHUNDRED      CONVERT TO TENTHS OF MILLISECONDS.\n         CL    R15,AHUNDRED      TEN MILLISECONDS OR MORE?\n         BNL   DRSPTMOK          YES, NO NEED FOR FINER DETAIL.\n         CVD   R15,WORK          NO, SHOW FRACTIONAL MILLISECONDS.\n         MVC   DEVRSPTM+1(5),ED2PNT1\n         ED    DEVRSPTM+1(5),WORK+6\nDRSPTMOK LA    R15,X'02'         USE RED FOR REQUEST PENDING TIME.\n         BAS   R14,DEVGRAPH      PLOT TOTAL RESPONSE TIME PER I/O.\n         L     R9,SECWORKA+12    GET DEVICE BUSY ON I/O TIME.\n         LA    R15,X'06'         USE YELLOW FOR DISCONNECT TIME.\n         BAS   R14,DEVGRAPH      PLOT TOTAL RESPONSE TIME PER I/O.\n         L     R9,SIOCONTM\n         SL    R9,SECWORKA       GET THE CHANGE IN CONNECT TIME.\n         SLR   R8,R8             CLEAR FOR DIVIDE.\n         SLDL  R8,7              CONVERT TIME SCALE TO MICROSECONDS.\n         D     R8,WORK2          DIVIDE TIME BY SAMPLE SSCH COUNT.\n         SLR   R8,R8             CLEAR FOR DIVIDE.\n         LA    R9,500(,R9)       PERFORM ROUNDING.\n         D     R8,ONEGRAND       CONVERT TO MILLISECONDS.\n         LA    R15,X'05'         USE TURQUOISE FOR CONNECT TIME.\n         BAS   R14,DEVGRAPH      PLOT TOTAL RESPONSE TIME PER I/O.\n         B     QUSAMPLE          CMB DATA HAS NOW BEEN PROCESSED.\nDEVGRAPH LTR   R9,R9             ANY NON-ZERO DATA TO PLOT?\n         BNPR  R14               NO, RETURN.\n         STC   R15,DEVGRFTM      YES, SHOW ONE AT LEAST.\n         BCTR  R9,0              GET REMAINING MAGNITUDE TO PLOT.\n         BCTR  R9,0              GET LENGTH CODE OF SAME.\n         LTR   R9,R9             WAS IT MORE THAN ONE?\n         BMR   R14               NO, PLOT NOW COMPLETE.\n         LA    R0,30             GET MAXIMUM THAT WILL FIT.\n         CR    R9,R0             DATA HIGHER THAN MAXIMUM?\n         BNH   DEVGRFOK          NO, PROCEED.\n         LR    R9,R0             YES, REDUCE TO MAXIMUM.\nDEVGRFOK EX    R9,DEVGRFLD       PLOT REST OF DATA.\n         BR    R14               PLOT COMPLETE SO RETURN TO CALLER.\nDEVGRFLD MVC   DEVGRFTM+1(0),DEVGRFTM           <<< EXECUTED >>>\nEDITBUSY SLR   R14,R14\n         LH    R1,SCANCNTR       GET CURRENT UNIT SAMPLE SCAN COUNT.\n         C     R1,TEN            DONE TEN OR MORE SCANS?\n         BL    FINDUSER          NO, DON'T REPORT SAMPLE PERCENTAGES.\n         LH    R15,UCBUSYCT      GET BUSY COUNT FOR THIS UNIT.\n         LTR   R15,R15           ANY I/O DETECTED?\n         BNP   QUSAMPLE          NO, INDICATE THIS BY SUPPRESSING 0%.\n         M     R14,AHUNDRED      PREPARE FOR PERCENTAGE.\n         DR    R14,R1            GET BUSY PERCENTAGE.\n         CVD   R15,WORK          TRUNCATE TO INTEGRAL PERCENT.\n         MVC   DEVBSYPC,ED3      0% MEANS SOME (BUT NOT MUCH) I/O\n         ED    DEVBSYPC,WORK+6      HAS BEEN DETECTED BY SAMPLING.\n         MVI   UNITPCNT,C'%'     INDICATE PERCENTAGE.\nQUSAMPLE LH    R1,SCANCNTR       GET CURRENT UNIT BUSY SCAN COUNT.\n         C     R1,TEN            DONE TEN OR MORE SCANS?\n         BL    FINDUSER          NO, DON'T REPORT PERCENTAGES.\n         CLI   DEVQUEUD+1,0      ZERO COUNTER?\n         BE    RESAMPLE          YES, DON'T SHOW IT.\n         CLI   QUECOUNT+3,C' '   DATA ALREADY THERE?\n         BNE   RESAMPLE          YES, DON'T OVERWRITE IT.\n         LH    R15,DEVQUEUD      GET QUEUED COUNT FOR THIS UNIT.\n         M     R14,AHUNDRED      PREPARE FOR PERCENTAGE.\n         DR    R14,R1            GET BUSY PERCENTAGE.\n         CVD   R15,WORK          TRUNCATE TO INTEGRAL PERCENT.\n         MVC   QUECOUNT,ED3\n         ED    QUECOUNT,WORK+6\n         MVC   QUECOUNT(3),QUECOUNT+1\n         MVI   QUECOUNT+3,C'%'   INDICATE PERCENTAGE.\nRESAMPLE CLI   DEVRSRVD+1,0      ZERO COUNTER?\n         BE    FINDUSER          YES, DON'T SHOW IT.\n         CLI   RSVCOUNT+3,C' '   DATA ALREADY THERE?\n         BNE   FINDUSER          YES, DON'T OVERWRITE IT.\n         LH    R15,DEVRSRVD      GET QUEUED COUNT FOR THIS UNIT.\n         M     R14,AHUNDRED      PREPARE FOR PERCENTAGE.\n         DR    R14,R1            GET BUSY PERCENTAGE.\n         CVD   R15,WORK          TRUNCATE TO INTEGRAL PERCENT.\n         MVC   RSVCOUNT,ED3\n         ED    RSVCOUNT,WORK+6\n         MVC   RSVCOUNT(3),RSVCOUNT+1\n         MVI   RSVCOUNT+3,C'%'   INDICATE PERCENTAGE.\n         DROP  R7                IOENTRY.\nFINDUSER SLR   R1,R1             CLEAR WORK REGISTER.\n         SLR   R5,R5             CLEAR POINTER REGISTER.\n         ICM   R5,B'0111',21(R3) POINT TO COMMON UCB EXTENSION.\n         ICM   R1,B'0011',14(R5) GET ASID OF LAST ALLOCATING JOB.\n         BZ    BUSYTEST          NO ASID.\n         SLL   R1,2              GET INDEX INTO ASVT (MULTIPLY BY 4).\n         AL    R1,ASVTADDR       GET ASVT ENTRY FOR THIS ASID.\n         LA    R1,ASVTENTY-ASVT-4(,R1)\n         MVC   UNITUSER,ENDED\n         ICM   R15,15,0(R1)      IS THIS ADDRESS SPACE ACTIVE?\n         BM    BUSYTEST          NO, THE JOB HAS ENDED.\n         MVC   UNITUSER,STARTING\n         ICM   R1,15,JBNI(R15)   LOAD PTR TO JOBNAME.\n         BNZ   LOADUSER\n         ICM   R1,15,JBNS(R15)   LOAD PTR TO JOBNAME.\n         BZ    BUSYTEST          JOB HAS NO NAME.\nLOADUSER MVC   UNITUSER,0(R1)    OTHERWISE, MOVE IN JOBNAME.\n         CLI   UNITUSER,X'49'    IS IT UNPRINTABLE?\n         BH    BUSYTEST          NO, BYPASS FURTHER JOBNAME PROCESSING.\n         MVC   UNITUSER,UNKNOWN  JOB NAME NOT KNOWN.\nBUSYTEST DS    0H\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   DOBSYTST          NO, CONTINUE.\n         TM    UCBTBYT3,X'A0'    TAPE OR DASD?\n         BNZ   DOBSYTST          YES, CONTINUE.\n         LH    R9,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         LA    R7,SELJOBNM       POINT TO DESIRED PREFIX.\n         LA    R8,UNITUSER       POINT TO JOB NAME.\n         STM   R7,R9,WORK+4      SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   NEXTUCB           IF NOT EQUAL THEN GO AWAY.\n*                                IS THE DEVICE BUSY?\nDOBSYTST TM    UCBFLA,UCBSTRT+UCBHALT+UCBCLEAR\n         BZ    SKIPIOSB          NO, UCBIOQ IS NOT VALID.\n         MVI   DEVENTRY+4,X'F8'  YES, HIGH INTENSITY.\n         MVI   DEVENTRY+8,X'F2'  YES, SHOW IN RED.              (I3279)\n*                                CLEAR OR HALT ACTIVE?\n         TM    UCBFLA,UCBHALT+UCBCLEAR\n         BNZ   SKIPIOSB          YES, SKIP SEEK ADDRESS DETAILS.\n         MVI   DEVENTRY+8,X'F3'  NO, SHOW IN PINK.              (I3279)\n         CLC   STATUS3,=C'REW'   IS THIS A REWINDING TAPE DRIVE?\n         BE    SKIPIOSB          YES, DETAILS PROBABLY INVALID.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BO    IOSBAUTH          YES, USE KEY ZERO JUST IN CASE.\n         MVI   WORK2,8           NO, FLAG STILL IN USER KEY.\n         TM    UCBSTAT,X'08'     IS THE DEVICE ALLOCATED?\n         BZ    IOSBOKAY          NO, CAN'T BE VTAM.\n         TM    UCBTBYT3,X'50'    YES, ALLOCATED GRAPHIC OR COMM DEVICE?\n         BZ    IOSBOKAY          NO, VTAM IS NOT THE ACCESS METHOD.\n         B     SKIPIOSB          YES, AVOID S0C4-4 ABEND WITH VTAM.\nIOSBAUTH DS    0H                USE KEY ZERO IF POSSIBLE TO BYPASS\n         MODESET MF=(E,MDSET0)   FETCH PROTECTION.\n         MVI   WORK2,0           REMEMBER THAT CURRENTLY IN KEY ZERO.\nIOSBOKAY LR    R5,R3             GET UCB ADDRESS.\n         AHI   R5,-4             GET IOQ HANDLING I/O FOR THIS UNIT.\n         L     R5,0(,R5)         POINT TO THE IOQ.\n         USING IOQ,R5\n         L     R5,IOQIOSB        GET THE IOSB.\n         DROP  R5                IOQ.\n         USING IOSB,R5\n         SLR   R1,R1             CLEAR WORK REGISTER.\n         IC    R1,IOSCKEY        GET STORAGE PROTECT KEY OF THE\n         SRL   R1,4                  CHANNEL PROGRAM.\n         STC   R1,KEY\n         TR    KEY,HEX           TRANSLATE TO HEXADECIMAL CHARACTER.\n         CLI   IOSPROC,IOSATTN   ATTENTION FOR THIS UNIT?\n         BNE   NOTATN            NO.\n         MVC   STATUS3,=C'ATN'   YES.\n         B     DASDTEST          CONTINUE.\nNOTATN   CLI   IOSPROC,IOSADDR   DYNAMIC DEVICE RECONFIGURATION?\n         BNE   NOTDDR            NO.\n         MVC   STATUS3,=C'DDR'   YES.\n         B     DASDTEST          CONTINUE.\nNOTDDR   CLI   IOSPROC,IOSAWTO   LONG WAIT (ACTION WTO) FOR THIS UNIT?\n         BNE   DASDTEST          NO, CONTINUE.\n         MVC   STATUS2(7),=C'INT-REQ'  YES, INTERVENTION REQUIRED.\n         TM    IOSFLB,IOSMSG     REALLY?\n         BZ    DASDTEST          YES.\n         MVC   STATUS2(7),=C'I/O-ERR'  NO, I/O ERROR.\nDASDTEST CLI   UCBTBYT3,X'20'    DASD DEVICE?\n         BNE   IOSBHEX           NO, FORGET MBBCCHHR DISPLAY.\n         IC    R1,IOSSKR         GET RECORD NUMBER OF DYNAMIC SEEK.\n         CVD   R1,WORK           DISPLAY THE RECORD NUMBER SEEKED\n         MVC   RECORD,ED3                FOR THIS HEAD.\n         ED    RECORD,WORK+6\n         IC    R1,IOSSKH2        GET HEAD NUMBER OF DYNAMIC SEEK.\n         CVD   R1,WORK           DISPLAY THE HEAD BEING USED\n         OI    WORK+7,15                 BY THIS DISK.\n         UNPK  HEAD,WORK+6(2)            (ONLY USE THE LOW ORDER BYTE.)\n         ICM   R1,3,IOSSKCC      GET CYLINDER NUMBER OF DYNAMIC SEEK.\n         CVD   R1,WORK           DISPLAY THE CYLINDER NUMBER\n         MVC   WORK2(6),ED5              BEING SEEKED FOR THIS DISK.\n         ED    WORK2(6),WORK+5\n         MVC   CYLINDER,WORK2+1\nIOSBHEX  CLI   IOSCOD,IOSNRMC    NORMAL COMPLETION CODE?\n         BNE   DOIOSHEX          NO, OVERWRITE PREVIOUS DETAILS.\n         CLI   HEAD,C' '         YES, ANY PREVIOUS DETAILS?\n         BNE   FINDDRVR          YES, DON'T OVERWRITE.\nDOIOSHEX MVC   CYLINDER+2(3),=C'CC='\n         UNPK  CYLINDER+5(3),IOSCOD(2)\n         TR    CYLINDER+5(2),HEX-C'0'\n         MVI   HEAD+1,C' '       DISPLAY COMPLETION CODE.\n         UNPK  HEAD+2(5),IOSTATUS(3)\n         TR    HEAD+2(4),HEX-C'0'\n         MVI   HEAD+6,C' '       DISPLAY DEVICE AND SUBCHANNEL STATUS.\nFINDDRVR MVC   IODRIVER,DRVRUNKN ASSUME UNKNOWN DRIVER.\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,IOSDVRID       LOAD I/O DRIVER ID.\n         SLL   R1,2              MULTIPLY BY FOUR.\n         CLI   IOSDVRID,24       EXAMINE I/O DRIVER ID.\n         BH    TRYERDRV\n         LA    R1,DRVRTABL(R1)   POINT TO DRIVER NAME.\n         B     SHOWDRVR          DISPLAY THE DRIVER NAME.\nTRYERDRV CLI   IOSDVRID,128      ERROR CONDITION DRIVER?\n         BL    FNDUNAME          NO.\n         CLI   IOSDVRID,135      YES, KNOWN TYPE?\n         BH    FNDUNAME          NO.\n         LA    R1,ERDRVRTB-512(R1) POINT TO DRIVER NAME.\nSHOWDRVR MVC   IODRIVER,0(R1)    DISPLAY THE DRIVER NAME.\nFNDUNAME SLR   R1,R1             CLEAR WORK REGISTER.\n         ICM   R1,3,IOSASID      GET ASID TO BE SCHEDULED AT I/O COMP.\n         BZ    IOSBEXIT          NO ASID.\n         SLL   R1,2              GET INDEX INTO ASVT (MULTIPLY BY 4).\n         A     R1,ASVTADDR\n         LA    R1,524(,R1)       GET ASVT ENTRY FOR THIS ASID.\n         MVC   UNITUSER,ENDED\n         ICM   R15,B'1111',0(R1) IS THIS ADDRESS SPACE ACTIVE?\n         BM    IOSBEXIT          NO, THE JOB HAS ENDED.\n         MVC   UNITUSER,STARTING\n         ICM   R1,15,JBNI(R15)   LOAD PTR TO JOBNAME.\n         BNZ   LOADUNAM\n         ICM   R1,15,JBNS(R15)   LOAD PTR TO JOBNAME.\n         BZ    IOSBEXIT          JOB HAS NO NAME.\nLOADUNAM MVC   UNITUSER,0(R1)    OTHERWISE, MOVE IN JOBNAME.\n         CLI   UNITUSER,X'49'    IS IT UNPRINTABLE?\n         BH    IOSBEXIT          NO, BYPASS FURTHER JOBNAME PROCESSING.\n         MVC   UNITUSER,UNKNOWN  JOB NAME NOT KNOWN.\nIOSBEXIT DS    0H                IF IN KEY ZERO THEN GET OUT OF IT.\n         CLI   WORK2,0           CURRENTLY IN KEY ZERO?\n         BNE   SKIPIOSB          NO.\n         MODESET MF=(E,MDSETN0)  YES, KEY ZERO NO LONGER REQUIRED.\n         DROP  R5                IOSB.\nSKIPIOSB DS    0H                END OF IOSB PROCESSING.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   FLAGSCHK          NO, CONTINUE.\n         LH    R9,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         LA    R7,SELJOBNM       POINT TO DESIRED PREFIX.\n         LA    R8,UNITUSER       POINT TO JOB NAME.\n         STM   R7,R9,WORK+4      SAVE PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   NEXTUCB           IF NOT EQUAL THEN GO AWAY.\nFLAGSCHK CLI   UCBTBYT3,X'20'    DASD DEVICE?\n         BNE   NOTSHARD          NO, FORGET VSAM, PAGING, SHARED TESTS.\n         TM    UCBFL5,UCBAMV     HAS VSAM MATCHED VTOC TIME-STAMP?\n         BNO   NOTVSAM           NO.\n         MVI   VSAMFLAG,C'V'     YES.\nNOTVSAM  TM    UCBSTAB,UCBPGFL   IS THIS A PAGING VOLUME?\n         BNO   PGSELTST          NO.\n         MVI   PAGEFLAG,C'P'     YES.\n         B     PAGING\nPGSELTST TM    DEVFLAGS,DPAGEV   SELECTING NON-PAGING VOLUMES?\n         BO    NEXTUCB           NO.\nPAGING   TM    UCBTBYT2,UCBRR    IS THIS A SHARED VOLUME?\n         BNO   NOTSHARD          NO.\n         MVI   SHRDFLAG,C'*'     YES.\nNOTSHARD CLI   DEVENTRY+8,X'F1'  BLUE ENTRY?  (DEVICE NOT IN USE?)\n         BE    INUSETST          YES.\n         CLI   DEVENTRY+8,X'F5'  TURQUOISE ENTRY?  (DEVICE NOT IN USE?)\n         BNE   DEVINUSE          NO.\nINUSETST TM    DEVFLAGS,DINUSE   SUPPRESS IF NOT IN-USE?\n         BO    NEXTUCB           YES.\nDEVINUSE MVC   SECWORKA+32(33),DEVGRFMK   PRESERVE GRAPH.\n         TR    VSAMFLAG(DVDL),XLATETBL    ENSURE NO UNPRINTABLES.\n         MVC   DEVGRFMK(33),SECWORKA+32   RESTORE GRAPH.\n         BAS   R14,DADDLINE      LINE NOW COMPLETE.\n         DROP  R2                DEVLINE.\n         CLI   UCBTBYT3,X'80'    TAPE DEVICE?\n         BNE   NEXTUCB           NO, CONTINUE THE SEARCH.\n         CLI   CLASMASK,X'80'    ONLY SELECTING TAPES?\n         BE    XTRATAPE          YES, DISPLAY EXTRA TAPE DETAILS.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BH    XTRATAPE          YES, DISPLAY EXTRA TAPE DETAILS.\n         CLI   SELVOLID,C' '     LOOKING FOR CERTAIN VOLUMES?\n         BH    XTRATAPE          YES, DISPLAY EXTRA TAPE DETAILS.\n         CLI   SELUCBID,C' '     LOOKING FOR CERTAIN UNITS?\n         BNH   NEXTUCB           NO, DON'T CLUTTER UP FULLISH SCREEN.\nXTRATAPE LR    R1,R2             COPY CURRENT LINE ADDRESS.\n         AHI   R1,-DVLL          POINT TO PREVIOUS LINE.\n         MVC   0(LL-79,R2),0(R1) COPY ATTRIBUTE BYTES.\n         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         SLR   R5,R5\n         SLR   R1,R1\n         ICM   R5,B'0111',45(R3) POINT TO MAGNETIC TAPE UCB EXTENSION.\n         BZ    NEXTUCB           HANDLE UCB ABOVE THE LINE.\n         MVC   WORK(16),0(R5)    COPY MAGNETIC TAPE UCB EXTENSION.\n         OC    WORK(16),WORK     ANY NON-ZERO DATA?\n         BZ    NEXTUCB           NO, DON'T CREATE THE EXTRA LINE.\n         TM    UCBTBYT4,X'80'    3480?\n         BO    XTRACART          YES, CARTRIDGE DEVICE.\n         TM    UCBTBYT1,X'01'    3400-9?  (3480 IN 3420 COMPAT MODE?)\n         BO    XTRACART          YES, CARTRIDGE DEVICE.\nXTRAMGTP IC    R1,4(,R5)         TEMPORARY READ ERROR COUNT.\n         LA    R9,TAPELINE+18\n         BAS   R14,XTRAED3\n         IC    R1,5(,R5)         TEMPORARY WRITE ERROR COUNT.\n         LA    R9,TAPELINE+25\n         BAS   R14,XTRAED3\n         IC    R1,8(,R5)         PERMANENT READ ERROR COUNT.\n         LA    R9,TAPELINE+42\n         BAS   R14,XTRAED3\n         IC    R1,9(,R5)         PERMANENT WRITE ERROR COUNT.\n         LA    R9,TAPELINE+49\n         BAS   R14,XTRAED3\n         IC    R1,10(,R5)        NUMBER OF NOISE BLOCKS ENCOUNTERED.\n         LA    R9,TAPELINE+56\n         BAS   R14,XTRAED3\n         ICM   R1,B'0011',0(R5)  TAPE DRIVE SERIAL NUMBER.\n         LA    R9,TAPELINE+9\n         BAS   R14,XTRAED5\n         ICM   R1,B'0011',6(R5)  START I/O OPERATION COUNT.\n         LA    R9,TAPELINE+33\n         BAS   R14,XTRAED5\n         ICM   R1,B'0011',12(R5) NUMBER OF ERASE GAPS ENCOUNTERED.\n         LA    R9,TAPELINE+64\n         BAS   R14,XTRAED5\n         ICM   R1,B'0011',14(R5) NUMBER OF CLEANER ACTIONS.\n         LA    R9,TAPELINE+74\n         BAS   R14,XTRAED5\n         TM    UCBTBYT4,X'80'    3480?\n         BO    CARTXTRA          YES, CARTRIDGE DEVICE.\n         TM    UCBTBYT1,X'01'    3400-9?  (3480 IN 3420 COMPAT MODE?)\n         BZ    DONEXTRA          NO, LINE NOW FORMATTED.\nCARTXTRA LA    R5,DSCNDCE        POINT TO UCB DEVICE CLASS EXTENSION.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BO    CRTEXTRA          YES, CONTINUE.\n         ICM   R5,B'0111',21(R3) POINT TO UCB COMMON EXTENSION.\n         ICM   R5,15,24(R5)      POINT TO UCB DEVICE CLASS EXTENSION.\n         BZ    DONEXTRA          NO CLASS EXTENSION EXISTS.\nCRTEXTRA CLI   7(R5),48          DFP FORMAT?\n         BL    DONEXTRA          NO, DON'T CHECK 3480 STATISTICS.\n         L     R9,48(,R5)        TAPE DRIVE SERIAL NUMBER.\n         SLL   R9,4              ALLOW FOR SIGN.\n         ST    R9,WORK+4\n         OI    WORK+7,X'0F'\n         UNPK  TAPELINE+9(5),WORK+5(3)\n         TR    TAPELINE+9(5),HEX-C'0'\n         ICM   R1,3,32(R5)       TEMPORARY READ ERROR COUNT.\n         AH    R1,34(,R5)        TEMPORARY READ BACKWARD ERROR COUNT.\n         BZ    CARTRDOK          SKIP EDIT IF ZERO.\n         LA    R9,TAPELINE+18\n         BAS   R14,XTRAED3\nCARTRDOK ICM   R1,3,36(R5)       TEMPORARY WRITE ERROR COUNT.\n         BZ    CARTWROK          SKIP EDIT IF ZERO.\n         LA    R9,TAPELINE+25\n         BAS   R14,XTRAED3\nCARTWROK ICM   R1,3,28(R5)       NUMBER OF ERASE GAPS ENCOUNTERED.\n         BZ    CARTEGOK          SKIP EDIT IF ZERO.\n         LA    R9,TAPELINE+64\n         BAS   R14,XTRAED5\nCARTEGOK ICM   R1,3,30(R5)       NUMBER OF CLEANER ACTIONS.\n         BZ    DONEXTRA          SKIP EDIT IF ZERO.\n         LA    R9,TAPELINE+74\n         BAS   R14,XTRAED5\nDONEXTRA MVC   LL-79(79,R2),TAPELINE\n         TR    LL-79(79,R2),XLATETBL      ENSURE NO UNPRINTABLES.\n         MVI   LL(R2),C' '       SUPPLY TRAILING BLANKS.\n         MVC   LL+1(DVDL-80,R2),LL(R2)\n         BAS   R14,DADDLINE      LINE NOW COMPLETE.\n         B     NEXTUCB           PROCESS NEXT DEVICE.\nXTRACART TM    4(R5),B'11100000' IS A DISMOUNT BIT ON?\n         BNM   XTRAMGTP          NO, SHOW STATISTICS.\n         B     NEXTUCB           YES, DON'T CREATE EXTRA LINE.\nXTRAED3  CVD   R1,WORK\n         OI    WORK+7,X'0F'\n         UNPK  0(3,R9),WORK+6(R2)\n         BR    R14\nXTRAED5  CVD   R1,WORK\n         OI    WORK+7,X'0F'\n         UNPK  0(5,R9),WORK+5(R3)\n         BR    R14\n         SPACE\nDUSCNOT0 CHI   R15,4             END OF UCBS?\n         BE    SHOWDEVS          YES, DISPLAY ACCUMULATED INFORMATION.\n         STM   R15,R0,WORK       NO, SAVE RETURN AND REASON CODES.\n         CHI   R15,12            I/O CONFIGURATION CHANGE?\n         BNE   DUSCFAIL          NO, ROLL OVER AND DIE.\n         L     R4,CREIOTAD       YES.\n         BASR  R4,R14            GET A NEW I/O DEVICE TABLE.\nDUSCFAIL MVC   0(LL-79,R2),HIGHX\n         MVI   0(R2),X'FF'       FIXED FLAG - NON-SCROLLABLE LINE.\n         MVI   2(R2),X'F2'       REVERSE FOR ERROR.             (I3279)\n         MVI   8(R2),X'F7'       RED FOR ERROR.                 (I3279)\n         MVC   28(23,R2),=C'UCBSCAN RETC=XX REAS=XX'\n         UNPK  43(3,R2),WORK+3(2)\n         TR    43(2,R2),HEX-C'0'\n         MVI   45(R2),C' '\n         UNPK  51(3,R2),WORK+7(2)\n         TR    51(2,R2),HEX-C'0'\n         MVI   53(R2),C' '\n         BAS   R14,DADDLINE      LINE NOW COMPLETE.\n         USING DEVLINE,R2\nSHOWDEVS MVI   VSAMFLAG,C' '     PUT TRAILING BLANKS ON SUMMARY LINE.\n         MVC   PAGEFLAG(DVDL-1),VSAMFLAG\n         DROP  R2                DEVLINE.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         USING WNDWMNGR,R15\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRND LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRND L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         DS    0H\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    NOTEXITD          NO, PROCESS SUBCOMMAND.\n         MVI   TGETFLG,TGETFLGA  RESTORE TGET TYPE FOR OTHER ROUTINES.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nNOTEXITD CHI   R15,4             ANY INPUT RECEIVED FROM TERMINAL YET?\n         BNE   GETCMDEV          YES, PROCESS IT.\n         LH    R9,SCANCNTR       GET DEVICE SCAN COUNT.\n         LA    R9,1(,R9)         ADD ONE.\n         STH   R9,SCANCNTR       SAVE INCREMENTED COUNTER.\n         L     R5,DEVTBL         POINT TO FIRST DEVICE TABLE ENTRY.\n         USING IOENTRY,R5\nNEXTDEV  LA    R5,IOENTLEN(,R5)  GET DEVICE TABLE ENTRY.\n         ICM   R3,15,IOUCBADR    POINT TO THE UCB BASE.\n         BZ    EOUCBTBL          NO MORE UCB ENTRIES.\n         CLI   UCBID,UCBSTND     STANDARD UCB?\n         BNE   DVBADUCB          NO, NEED TO RESYNC WITH REALITY.\n         CLC   UCBDEVNO,UCBCHAN  RIGHT DEVICE NUMBER?\n         BNE   NEXTDEV           NO, PROBABLY DDR SWAP.\n         TM    UCBFLA,X'0E'      IS THE DEVICE BUSY?\n         BZ    CHKRESVS          NO, SO CAN'T BE ANY QUEUING EITHER.\n         TM    UCBUSYCT,X'80'    CMB STATISTICS FOR THIS DEVICE?\n         BO    CHKQUEUE          YES, DON'T USE SAMPLING FOR BUSY CALC.\n         LH    R9,UCBUSYCT       GET BUSY COUNT SO FAR.\n         LA    R9,1(,R9)         ADD ONE.\n         STH   R9,UCBUSYCT       SAVE INCREMENTED COUNTER.\nCHKQUEUE LR    R9,R3             POINT TO UCB.\n         AHI   R9,-4             POINT TO UCBIOQ.\n         ICM   R9,15,0(R9)       ANY IOQ HERE?\n         BZ    CHKRESVS          NO, CHECK FOR DASD H/W RESERVES.\n         TM    UCBFLA,UCBDEFER   MUST NEW I/O BE DEFERRED?\n         BO    FNDQUEUE          YES, CHALK THIS ONE UP FOR QUEUING.\n         ICM   R9,15,4(R9)       ANY IOQ QUEUED?\n         BZ    CHKRESVS          NO, CHECK FOR DASD H/W RESERVES.\nFNDQUEUE LH    R9,DEVQUEUD       GET QUEUED COUNT SO FAR.\n         LA    R9,1(,R9)         ADD ONE.\n         STH   R9,DEVQUEUD       SAVE INCREMENTED COUNTER.\nCHKRESVS CLI   UCBTBYT3,X'20'    DASD DEVICE?\n         BNE   CHECK200          NO, CHECK FOR 200 RESET.\n         CLI   UCBSQC,0          ANY RESERVES CURRENTLY ISSUED?\n         BE    CHECK200          NO, CHECK FOR 200 RESET.\n         LH    R9,DEVRSRVD       GET RESERVED COUNT SO FAR.\n         LA    R9,1(,R9)         ADD ONE.\n         STH   R9,DEVRSRVD       SAVE INCREMENTED COUNTER.\nCHECK200 CLI   SCANCNTR+1,200    TWO HUNDREDTH SCAN?\n         BL    NEXTDEV           NO, CHECK NEXT DEVICE.\n         CLI   UCBUSYCT+1,199    UNIT BUSY 199 OUT OF 200?\n         BNE   RESET200          NO, PERFORM RESET.\n         MVI   UCBUSYCT+1,200    YES, MAKE 100% POSSIBLE IN THE FUTURE.\nRESET200 LH    R9,UCBUSYCT       GET BUSYCOUNT SO FAR.\n         SRL   R9,2              DIVIDE BY 4.\n         STH   R9,UCBUSYCT       SAVE SCALED-DOWN COUNTER.\n         LH    R9,DEVQUEUD       GET QUEUED COUNT SO FAR.\n         SRL   R9,2              DIVIDE BY 4.\n         STH   R9,DEVQUEUD       SAVE SCALED-DOWN COUNTER.\n         LH    R9,DEVRSRVD       GET RESERVED COUNT SO FAR.\n         SRL   R9,2              DIVIDE BY 4.\n         STH   R9,DEVRSRVD       SAVE SCALED-DOWN COUNTER.\n         B     NEXTDEV           CHECK NEXT DEVICE.\n         DROP  R5,R3             IOENTRY, UCBOB.\nEOUCBTBL CLI   SCANCNTR+1,200    END OF TWO HUNDREDTH SCAN?\n         BL    NOADJUST          NO, DON'T NORMALIZE COUNTERS YET.\n         MVI   SCANCNTR+1,50     YES, ADJUST TO FIFTY SCANS.\nNOADJUST CLI   DOWNCNTR,C' '     IS AUTOMATIC SCREEN REFRESH ACTIVE?\n         BH    REDODEVS          YES, GO LOAD ANOTHER SCREENFUL.\n         STIMER WAIT,BINTVL=DEVDELAY  NO, WAIT FOR A BIT.\n         SLR   R0,R0             DON'T WRITE ANYTHING TO THE SCREEN.\n         B     GETSCRND          CALL SCREEN HANDLER FOR ASYNC COMMAND.\nDVBADUCB L     R5,DEVTBL         POINT TO THE DEVICE TABLE.\n         SLR   R0,R0\n         LA    R5,IOENTLEN(,R5)  POINT TO THE FIRST ENTRY.\n         USING IOENTRY,R5\n         ST    R0,IOUCBADR       ZERO THE UCB ADDRESS TO STOP SCANS.\n         DROP  R5                IOENTRY.\n         B     NOADJUST          RESUME DISPLAY CHECK.\nGETCMDEV CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDODEVS          YES, CONTINUE WITH DISPLAYS.\n         CLI   INBUFF,5          PF5/17?\n         BE    UNITEXAM          YES, PREPARE FOR OPTION \"U\".\nDZOOMCHK CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n         BE    DASDCHK           YES, DO NOT PERFORM ZOOM-IN.\n         CLI   INBUFF+1,0        CURSOR ON HEADING LINE?\n         BNE   UNITEXAM          NO, CHECK FOR ZOOM-IN REQUEST.\nDASDCHK  CLI   INCHARS,C'D'      CHECK IF DASD TOGGLE REQUESTED.\n         BNE   TAPECHK           NO, TRY TAPE.\n         XI    CLASMASK,X'20'    TOGGLE DASD SELECTION.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nTAPECHK  CLI   INCHARS,C'T'      CHECK IF TAPE TOGGLE REQUESTED.\n         BNE   GRAFICHK          NO, TRY GRAPHIC DISPLAY.\n         XI    CLASMASK,X'80'    TOGGLE TAPE SELECTION.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nGRAFICHK CLI   INCHARS,C'G'      CHECK IF GRAPHIC TOGGLE REQUESTED.\n         BNE   UNITRCHK          NO, TRY UNIT RECORD.\n         XI    CLASMASK,X'10'    TOGGLE GRAPHIC DISPLAY SELECTION.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nUNITRCHK CLI   INCHARS,C'R'      CHECK IF UNIT RECORD REQUESTED.\n         BNE   COMMCHK           NO, TRY COMMUNICATION.\n         XI    CLASMASK,X'08'    TOGGLE UNIT RECORD SELECTION.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nCOMMCHK  CLI   INCHARS,C'C'      CHECK IF COMMUNICATION REQUESTED.\n         BNE   MISCHECK          NO, TRY MISCELLANEOUS SELECTION.\n         XI    CLASMASK,X'40'    TOGGLE COMMUNICATION SELECTION.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nMISCHECK CLI   INCHARS,C'M'      CHECK IF MISCELLANEOUS REQUESTED.\n         BNE   INUSECHK          NO, TRY NOT IN USE SUPPRESSION.\n         XI    CLASMASK,X'06'    TOGGLE CHAR-RDR ET AL SELECTION.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nINUSECHK CLI   INCHARS,C'I'      CHECK IF IN-USE-ONLY REQUESTED.\n         BNE   DBLNKCHK          NO, TRY CONTINUE.\n         XI    DEVFLAGS,DINUSE   TOGGLE NOT-IN-USE SUPPRESSION.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nDBLNKCHK CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BNE   DOFFLCHK          NO, CONTINUE CHECKS.\n         B     REDODEVS          RESTART SCAN.\nDOFFLCHK CLI   INCHARS,C'O'      OFFLINE SELECTION TOGGLE?\n         BNE   PGVOLCHK          NO, TRY PAGING VOLUME CHECK.\n         XI    DEVFLAGS,DOFFLN   TOGGLE OFFLINE SELECTION TEST.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nPGVOLCHK CLI   INCHARS,C'P'      PAGING VOLUME ONLY SELECTION TOGGLE?\n         BNE   JOBCHECK          NO, TRY JOB NAME PREFIX CHECK.\n         XI    DEVFLAGS,DPAGEV   TOGGLE PAGING-ONLY SELECTION TEST.\n         B     DEVINITD          CHECK FOR FURTHER SUBCOMMANDS.\nJOBCHECK CLI   INCHARS,C'J'      CHECK FOR SPECIFIC JOB NAME PREFIX.\n         BNE   VOLCHECK          NO, TRY VOLUME SERIAL PREFIX CHECK.\n         XC    SELJOBNM,SELJOBNM ERASE PREVIOUS JOBNAME.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOJOBPIO          YES, DO IT.\n         CLI   INCHARS+1,C' '    JOB PREFIX SUPPLIED?\n         BNH   DGETJNAM          NO.\n         MVC   SELJOBNM,INCHARS+1   LOAD PRE-PROMPT SUPPLIED MASK.\n         LA    R15,SELJOBNM+1    POINT TO FIRST BYTE TO CHECK.\n         LA    R0,7              MAXIMUM BYTES TO CHECK.\n         LA    R1,1              PREFIX LENGTH DETERMINED SO FAR.\nDJOBLOOP CLI   0(R15),C' '       END OF JOB NAME PREFIX FOUND?\n         BNH   NOJOBPIO          YES, SAVE THE PREFIX LENGTH.\n         LA    R15,1(,R15)       NO, POINT TO NEXT BYTE.\n         LA    R1,1(,R1)         INCREMENT PREFIX LENGTH.\n         BCT   R0,DJOBLOOP\n         B     NOJOBPIO          EIGHT CHARACTER MASK SUPPLIED.\nDGETJNAM MVI   TGETFLG,TGETFLGA  PERFORM AN ASIS WAIT TGET FOR PROMPT.\n         NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.\nDGETASNM LA    R1,JPRFXMSG\n         LA    R0,JOBSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    DGETASNM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVI   TGETFLG,TGETFLGN  RESTORE ASIS NOWAIT TGETS FOR DEVMON.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVC   SELJOBNM,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNOJOBPIO STH   R1,JPRFXLEN       STORE PREFIX LENGTH.\n         B     REDODEVS          RESTART UCB SCAN.\nVOLCHECK CLI   INCHARS,C'V'      CHECK FOR VOLUME SERIAL NUMBER PREFIX.\n         BNE   UCBCHECK          IF NOT, TRY FOR UCB ADDRESS PREFIX.\n         XC    SELVOLID,SELVOLID ERASE PREVIOUS VOLID.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOVOLPFX          YES, DO IT.\n         CLI   INCHARS+1,C' '    LEADING VOLSER CHARACTER SUPPLIED?\n         BH    DVOLSERP          YES, DETERMINE HOW MANY.\n         MVI   TGETFLG,TGETFLGA  PERFORM AN ASIS WAIT TGET FOR PROMPT.\n         NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.\nDGETVLSR LA    R1,VPRFXMSG\n         LA    R0,SELVOLEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    DGETVLSR          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVI   TGETFLG,TGETFLGN  RESTORE ASIS NOWAIT TGETS FOR DEVMON.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVC   SELVOLID,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNOVOLPFX STH   R1,VPRFXLEN       STORE PREFIX LENGTH.\n         B     REDODEVS          RESTART DEVICE SCAN.\nDVOLSERP MVC   SELVOLID,INCHARS+1   LOAD PRE-PROMPT SUPPLIED MASK.\n         LA    R15,SELVOLID+1    POINT TO FIRST BYTE TO CHECK.\n         LA    R0,5              MAXIMUM BYTES TO CHECK.\n         LA    R1,1              PREFIX LENGTH DETERMINED SO FAR.\nDVOLLOOP CLI   0(R15),C' '       END OF VOLUME SERIAL PREFIX FOUND?\n         BNH   NOVOLPFX          YES, SAVE THE PREFIX LENGTH.\n         LA    R15,1(,R15)       NO, POINT TO NEXT BYTE.\n         LA    R1,1(,R1)         INCREMENT PREFIX LENGTH.\n         BCT   R0,DVOLLOOP\n         B     NOVOLPFX          SIX CHARACTER MASK SUPPLIED.\nUCBCHECK CLI   INCHARS,C'U'      UCB ADDRESS PREFIX REQUEST?\n         BNE   GIVEHLPD          NO.\n         XC    SELUCBID,SELUCBID ERASE PREVIOUS UCB NAME.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOUCBPFX          YES, DO IT.\n         CLI   INCHARS+1,C' '    LEADING DEVNUM CHARACTER SUPPLIED?\n         BH    DUNITADP          YES, DETERMINE HOW MANY.\n         MVI   TGETFLG,TGETFLGA  PERFORM AN ASIS WAIT TGET FOR PROMPT.\n         NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.\nDGETUCBN LA    R1,UPRFXMSG\n         LA    R0,SELUCLEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    DGETUCBN          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVI   TGETFLG,TGETFLGN  RESTORE ASIS NOWAIT TGETS FOR DEVMON.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVC   SELUCBID,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNOUCBPFX STH   R1,UPRFXLEN       STORE PREFIX LENGTH.\n         B     REDODEVS          RESTART DEVICE SCAN.\nDUNITADP MVC   SELUCBID,INCHARS+1   LOAD PRE-PROMPT SUPPLIED MASK.\n         LA    R15,SELUCBID+1    POINT TO FIRST BYTE TO CHECK.\n         LA    R0,3              MAXIMUM BYTES TO CHECK.\n         LA    R1,1              PREFIX LENGTH DETERMINED SO FAR.\nDUCBLOOP CLI   0(R15),C' '       END OF DEVICE NUMBER PREFIX FOUND?\n         BNH   NOUCBPFX          YES, SAVE THE PREFIX LENGTH.\n         LA    R15,1(,R15)       NO, POINT TO NEXT BYTE.\n         LA    R1,1(,R1)         INCREMENT PREFIX LENGTH.\n         BCT   R0,DUCBLOOP\n         B     NOUCBPFX          FOUR CHARACTER MASK SUPPLIED.\nGIVEHLPD MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRND          GO DISPLAY HELP PANEL.\n         SPACE\nVPRFXLEN DC    H'0'              LENGTH FOR VOLUME SERIAL PREFIX.\nUPRFXLEN DC    H'0'              LENGTH FOR UCB NAME PREFIX.\n         SPACE\nUNITEXAM DS    0H                INVOKE OPTION \"U\" FOR SELECTED UNIT.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,INBUFF+1       GET RELATIVE LINE NUMBER OF CURSOR.\n         CH    R1,WINHDGCT       CURSOR ON A HEADING LINE?\n         BNH   DUZOOMIT          YES, DO NOT SPECIFY ANY DEVICE NUMBER.\n         BCTR  R1,0\n         BCTR  R1,0\n         A     R1,WINTOP         CONVERT TO WINDOW LINE NUMBER.\n         C     R1,WINLINES       CURSOR AFTER LAST LINE?\n         BH    DUZOOMIT          YES, DO NOT SUPPLY A DEVICE NUMBER.\n         MH    R1,WINLNLEN       NO, GET AN INDEX INTO WINDOW AREA.\n         A     R1,WINBUFF        POINT TO DETAIL LINE CONTENTS.\n         CLI   0(R1),X'FF'       CURSOR ON DEVICE LINE?\n         BE    DUZOOMIT          NO, DO NOT SUPPLY A UCB NAME.\n         DROP  R15               WNDWMNGR.\n         USING DEVLINE,R1\n         L     R15,UUCBNMAD      POINT TO OPTION \"U\" UCB NAME AREA.\n         MVI   0(R15),X'DD'      INDICATE TRANSFER FROM OPTION \"D\".\n         MVC   THEUNIT-THEUCBAD(4,15),DEVNAME  INDICATE UCB.\n         CLI   DEVNAME,C' '      THREE-DIGIT DEVICE NUMBER?\n         BNE   DINVOKEU          NO, FOUR DIGITS LOADED.\n         MVI   THEUNIT-THEUCBAD(15),C'0'  YES, LOAD LEADING ZERO.\n         DROP  R1                DEVLINE.\nDINVOKEU MVC   INBUFF(L'INBUFF+L'INCHARS),BLANKS  CLEAR INPUT BUFFER.\n         MVI   INBUFF,X'7C'      SIMULATE PFK 12.\n         MVI   INCHARS,C'U'      SIMULATE OPTION \"U\" REQUEST.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         MVI   TGETFLG,TGETFLGA  RESTORE TGET TYPE FOR OTHER ROUTINES.\n         NI    MODESW2,255-CLNF  CLEAN-UP NO LONGER REQUIRED.\n         B     GETSCRND          PERFORM INTER-OPTION JUMP.\nDUZOOMIT CLI   INBUFF,5          OPTION \"U\" REQUEST ANYWAY?\n         BE    DINVOKEU          YES, DO NOT SPECIFY ANY UCB NAME.\n         B     DASDCHK           NO, SCAN FOR LOCAL SUBCOMMAND.\n         SPACE\nDEVMEGS  CVD   R0,WORK\n         MVC   0(9,R15),=XL9'40202020206B202120'\n         ED    0(9,R15),WORK+4\n         BR    R14\n         SPACE\nDADDLINE LA    R2,DVLL(,R2)      ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRND          IF YES, THEN GO PUT THIS SCREEN.\n         BR    R14\n         DROP  R15               WNDWMNGR.\n         TITLE 'DEVICE MONITOR - VARIABLES AND CONSTANTS'\nUUCBNMAD DC    A(THEUCBAD)       ADDRESS OF OPTION \"U\"S UCB NAME.\nDEVTYPN  DC    F'0'              UCB TYPE OF THIS UCB.\nDEVTYPO  DC    F'0'              UCB TYPE OF PREVIOUS UCB.\nDEVTYPC  DC    CL8' '            UNIT NAME OF UCB IN EBCDIC.\nDEVDELAY DC    F'20'             DEVICE SAMPLE CYCLE WAIT DELAY.\nDSCNWORK DC    XL100'00'         UCBSCAN WORKAREA.\nDSCNPRFX DC    XL48'00'          UCBSCAN UCB PREFIX AREA.\nDSCNUCB  DC    XL48'00'          UCBSCAN UCB BASE AREA.\nDSCNCMXT DC    XL64'00'          UCBSCAN UCB COMMON EXTENSION AREA.\nDSCNDCE  DC    XL48'00'          UCBSCAN DEVICE CLASS EXTENSION AREA.\nDSCNDEVN DC    CL4'DEV#'         UCBSCAN UCB DEVICE NUMBER AREA.\nDSCNDCEL DC    AL2(L'DSCNDCE)    UCBSCAN AREA LENGTH PARAMETER.\nSCANCNTR DC    H'0'              BUSY UNIT SCAN COUNTER.\nKEEPCART DC    C' RK?D???'       RETAIN/KEEP/DISMOUNT.\nCLASMASK DC    X'20'             DEVICE CLASS SELECTION MASK.\nDEVFLAGS DC    X'00'\nDOFFLN   EQU   X'80'             SELECT OFFLINE DEVICES.\nDINUSE   EQU   X'40'             SELECT ONLY IN-USE DEVICES.\nDPAGEV   EQU   X'20'             RESTRICT DASD TO PAGING VOLUMES.\nDASDMODL DS    0X                0E - 3380-A/B.\n         DC    C'D  '            1E - 3380-D.  1F-20.\n         DC    C'J '             21 - 3380-J.  22.\n         DC    C'K'              23 - 3380-K.\n         DC    C'3 '             24 - 3390-3.  25.\n         DC    C'1'              26 - 3390-1.\n         DC    C'2      '        27 - 3390-2.  28-2D.\n         DC    C'E   '           2E - 3380-E.  2F-31.\n         DC    C'9'              32 - 3390-9.\nHEADINGD DC    C'   VOLUME DVNO UNIT-STATUS PTH USE OPN QUE RSV ---RESP+\n               ONSE--1+5--TIME(MS)--3+0>VTOC DEVTYPE IORATE LAST-USR  C+\n               YL HD REC K DRVR SRVTM RSPTM BUSY CU CACHE DFW DUP STOGR+\n               OUP+STATUS TOTAL-MB  FREE-MB LARGE-MB'\nTAPELINE DC    CL79'DRIVE-NO=##### TR=### TW=### SIO=##### PR=### PW=##+\n               # NB=### ERG=##### CLN=#####'\nVPRFXMSG DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER VOLUME SERIAL PREFIX OR COMPLETE VOL'\n         DC    C'UME SERIAL NUMBER'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nSELVOLID DC    CL6' '\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(USE',X'&HIGH',C'V/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL VOLUME SERIAL NUMBER PREFIX SELECTION)'\n         DC    X'11D1E3'\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\nSELVOLEN EQU   *-VPRFXMSG\nUPRFXMSG DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER UCB NAME PREFIX OR COMPLETE UCB NAME'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nSELUCBID DC    CL4' '\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(USE',X'&HIGH',C'U/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL UCB NAME PREFIX SELECTION)'\n         DC    X'11D1E3'\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\nSELUCLEN EQU   *-UPRFXMSG\n         UCBSCAN PLISTVER=MAX,MF=(L,DSCN)     UCBSCAN PARAMETER LIST.\nSMSVSTAT DC    C'NOTCON'  0   NOT CONNECTED.\n         DC    C'ENABLE'  1   ENABLED.\n         DC    C'QUIALL'  2   QUIESCED/ALL.\n         DC    C'QUINEW'  3   QUIESCED/NEW.\n         DC    C'DISALL'  4   DISABLED/ALL.\n         DC    C'DISNEW'  5   DISABLED/NEW.\n         DC    C'??????'  6\n         DC    C' ???? '  7\nDRVRTABL DC    C'IOS ' X'00'  RESERVED FOR INPUT/OUTPUT SUPERVISOR.\n         DC    C'MISC' X'01'  MISCELLANEOUS IDENTIFIER.\n         DC    C'EXCP' X'02'  EXECUTE CHANNEL PROGRAM PROCESSOR.\n         DC    C'VSAM' X'03'  VIRTUAL STORAGE ACCESS METHOD.\n         DC    C'VTAM' X'04'  VIRTUAL TELECOMMUNICATIONS ACCESS METHOD.\n         DC    C'TCAM' X'05'  TELECOMMUNICATIONS ACCESS METHOD.\n         DC    C'OLTE' X'06'  ONLINE TEST EXECUTIVE PROGRAM.\n         DC    C'PCIF' X'07'  PROGRAM CONTROLLED INTERRUPT FETCH.\n         DC    C'JES3' X'08'  JOB ENTRY SUBSYSTEM 3.\n         DC    C'MSC ' X'09'  MSC/SS1.\n         DC    C'IOPG' X'0A'  IECVIOPM PURGE.\n         DC    C'VPSS' X'0B'  VECTOR PROCESSING SUBSYSTEM.\n         DC    C'CRYP' X'0C'  CRYPTOGRAPHIC.\nDRVRUNKN DC    C'????' X'0D'\n         DC    C'ASM ' X'0E'  AUXILIARY STORAGE MANAGER.\n         DC    C'MSG ' X'0F'  MESSAGE DISPLAY SERVICE.\n         DC    C'ASGN' X'10'  ASSIGN/UNASSIGN SERVICE.\n         DC    C'DYNP' X'11'  DYNAMIC PATHING.\n         DC    C'DAVV' X'12'  DIRECT ACCESS VOLUME VERIFICATION.\n         DC    C'DCS ' X'13'  DEVICE CONTROL SERVICE.\n         DC    C'AOM ' X'14'  ASYNCHRONOUS OPERATION MANAGER.\n         DC    C'SMS ' X'15'  DFSMS.\n         DC    C'XCF ' X'16'  XCF CHANNEL-TO-CHANNEL ADAPTER.\n         DC    C'CDR ' X'17'  IOS USE.\n         DC    C'SLF ' X'18'  IOSVSLFD.\nERDRVRTB DC    C'HALT' X'80'  SVC 33 IOHALT.\n         DC    C'CLDV' X'81'  CLEAR DEVICE RECOVERY.\n         DC    C'SBCH' X'82'  SUBCHANNEL RECOVERY.\n         DC    C'PURG' X'83'  SVC 16 PURGE.\n         DC    C'URSV' X'84'  UNCONDITIONAL RESERVE (UR) RECOVERY.\n         DC    C'MIH ' X'85'  MISSING INTERRUPT HANDLER (MIH).\n         DC    C'PRVN' X'86'  I/O PREVENTION.\n         DC    C'RRSV' X'87'  RE-RESERVE.\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n         TITLE 'DEVICE MONITOR - SELECTION CRITERIA DISPLAY'\n         USING WHATDEVS,R15\nWHATDEVS DS    0H\n         MVC   0(LL-79,R2),LOWX  SUPPLY 3270 ATTRIBUTES.\n         MVI   0(R2),X'FF'       FIXED FLAG - NON-SCROLLABLE LINE.\n         LA    R2,LL-79(,R2)     POINT PAST ATTRIBUTES.\n         MVI   0(R2),C' '        BLANK A LINE.\n         MVC   1(DVDL-1,R2),0(R2)\n         MVC   0(5,R2),=C'SELN:' INDICATE SELECTION CRITERIA.\n         ICM   R14,8,CLASMASK    LOAD DEVICE CLASS SELECTION MASK.\n         LA    R0,6              LOAD NUMBER OF DEVICE CLASSES.\n         LA    R1,6(,R2)         POINT TO FIRST DISPLAY SLOT.\n         LA    R3,CLASNAME       POINT TO DEVICE CLASS NAME TABLE.\nWHATDVLP LTR   R14,R14           DEVICE CLASS BEING SELECTED?\n         BNM   WHATCLAS          NO.\n         MVC   0(4,R1),0(R3)     YES, SHOW DEVICE CLASS NAME.\nWHATCLAS SLL   R14,1             PROMOTE NEXT DEVICE CLASS MASK BIT.\n         LA    R1,5(,R1)         POINT TO NEXT DISPLAY SLOT.\n         LA    R3,4(,R3)         POINT TO NEXT DEVICE CLASS NAME.\n         BCT   R0,WHATDVLP       PROCESS NEXT DEVICE CLASS.\n         TM    DEVFLAGS,DOFFLN   OFFLINE DEVICES BEING SELECTED?\n         BZ    WHATOFFL          NO.\n         MVC   36(5,R2),=C'OFFLN'\nWHATOFFL TM    DEVFLAGS,DINUSE   SELECT ONLY IN-USE DEVICES?\n         BZ    WHATUSE           NO.\n         MVC   42(6,R2),=C'IN-USE'\nWHATUSE  TM    DEVFLAGS,DPAGEV   ONLY PAGING VOLUME DASD?\n         BZ    WHATPAGE          NO.\n         MVC   49(3,R2),=C'PAG'\nWHATPAGE MVC   53(26,R2),=CL26'J=******** V=****** U=****'\n         CLI   SELJOBNM,C' '     USING JOB NAME PREFIX SELECTION?\n         BNH   WHATJBOK          NO.\n         LH    R1,JPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,WHATJBLD       LOAD THE PREFIX INTO THE DISPLAY LINE.\nWHATJBOK CLI   SELUCBID,C' '     USING UCB NAME PREFIX SELECTION?\n         BNH   WHATUCOK          NO.\n         LH    R1,UPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,WHATUCLD       LOAD THE PREFIX INTO THE DISPLAY LINE.\nWHATUCOK CLI   SELVOLID,C' '     USING VOLUME SERIAL PREFIX SELECTION?\n         BNH   WHATVOOK          NO.\n         LH    R1,VPRFXLEN       GET PREFIX LENGTH.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         EX    R1,WHATVOLD       LOAD THE PREFIX INTO THE DISPLAY LINE.\nWHATVOOK LA    R2,DVDL(,R2)      POINT TO NEXT DISPLAY LINE.\n         MVC   HEADINGD+31(3),=C'UCS'\n         MVC   HEADINGD+79(4),=C'FCB '\n         TM    CLASMASK,X'80'    TAPES BEING SELECTED?\n         BZ    NOTAPES           NO.\n         MVC   HEADINGD+79(4),=C'DENS'\n         MVC   HEADINGD+109(10),=C'FSC LB FSN'\nNOTAPES  TM    CLASMASK,X'20'    DISKS BEING SELECTED?\n         BZ    NODISKS           NO.\n         MVC   HEADINGD+31(3),=C'USE'\n         MVC   HEADINGD+79(4),=C'VTOC'\n         MVC   HEADINGD+109(10),=C'CYL HD REC'\nNODISKS  MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVC   LL-79(DVDL,R2),HEADINGD     LOAD DISPLAYABLE\n         TR    LL-79(DVDL,R2),XLATETBL          HEADING.\n         LA    R2,DVLL(,R2)      POINT PAST HEADING.\n         B     DEVHDGOK          RETURN TO SELECT DEVICES.\n         SPACE\nWHATJBLD MVC   55(0,R2),SELJOBNM                <<< EXECUTED >>>\nWHATUCLD MVC   75(0,R2),SELUCBID                <<< EXECUTED >>>\nWHATVOLD MVC   66(0,R2),SELVOLID                <<< EXECUTED >>>\n         SPACE\n         DROP  R11,R6,R15        DEVICES, WHATDEVS.\n         SPACE 2\nCLASNAME DC    C'TAPECOMMDASDGRAFURECMISC'\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAF": {"ttr": 13063, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\t\\x00\\x00\\x00\\x94\\x17\\x1f\\x01\\x05\\x02o\\x186\\x03D\\x03#\\x00i\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "43.09", "flags": 0, "createdate": "1994-06-20T00:00:00", "modifydate": "2005-01-26T18:36:00", "lines": 836, "newlines": 803, "modlines": 105, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD\n         TITLE 'REAL MEMORY PAGE FRAME MONITOR SUBROUTINE'\n         USING FRAMES,R11,R10\nFRAMES   DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         XC    PRVFLINE(8),PRVFLINE NO DATA SAVED FROM PREVIOUS S MODE.\n         L     R3,CVTPTR(,0)     ADDRESS OF COMMUNICATION VECTOR TABLE.\n         USING CVT,R3\n         L     R3,CVTPVTP        ADDRESS OF PAGE VECTOR TABLE (PVT).\n         DROP  R3                CVT.\n         USING PVT,R3\n         L     R3,PVTRIT         ADDRESS OF RSM INTERNAL TABLE (RIT).\n         DROP  R3                PVT.\n*        ICM   R3,15,RITADDR     LOAD RIT ADDRESS.\n*        BNZ   GOTRITAD\n*        NUCLKUP BYNAME,NAME=RITEPNAM,ADDR=RITADDR LOOK-UP NUCLEUS.\n*        LR    R3,R0             COPY RSM INTERNAL TABLE ADDRESS.\n*GOTRITAD DS   0H\n         CLI   FMONMODE,C'S'     IN SUMMARY MODE?\n         BNE   PRECHEKF          NO.\n         CLI   HEADMODE,C'R'     IN RELEASE MODE?\n         BNE   PRECHEKF          NO.\n         MVI   TGETFLG,TGETFLGN  YES, USE ASIS NOWAIT TGETS.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\nPRECHEKF CLI   INCHARS+1,C' '    ANY OPTION PRE-SPECIFIED?\n         BNH   MOREFRMS          NO, CONTINUE FROM PREVIOUS ADDRESS.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' YES, ADJUST ANY COMMAND INPUT.\n         B     CMDSCANF          PROCESS IT.\n         SPACE\nREDOFRMS LA    R2,BUFFER         POINT TO FIRST DETAIL LINE.\n         LA    R4,256            GET ENTRIES PER SCREEN PAGE.\n         LM    R5,R6,208(R3)     GET FIRST AND LAST PFTE ADDRESSES.\n         LA    R7,32(,R6)        POINT PAST LAST PFTE.\n         SR    R7,R5             GET SIZE OF PAGE FRAME TABLE.\n         SRL   R7,5              GET NUMBER OF PFTES (DIVIDE BY 32).\n         XC    MEGCNTR,MEGCNTR   RESET REAL STORAGE DISPLAY ADDRESS.\nNXTFRAME DS    0H                PROCESS NEXT 4K REAL STORAGE FRAME.\n         MVC   0(2,R2),=X'2841'\nHILITE24 MVI   2(R2),X'00'       HIGHLIGHTING FOR BELOW 16M VIRTUAL.\n         CLI   20(R5),0          IS THE VIRTUAL ADDRESS BELOW 16 MEG?\n         BE    DFLTATTR          YES, LEAVE SET ATTRIBUTE DEFAULT.\nHILITE31 MVI   2(R2),X'F4'       HIGHLIGHTING FOR ABOVE 16M VIRTUAL.\nDFLTATTR LA    R2,3(,R2)         POINT PAST THIS STUFF.\n         MVC   0(3,R2),=X'2842F7' WHITE.\n         MVC   3(5,R2),=C' PSA '\n         CLI   8(R5),X'F5'       ABSOLUTE ZERO FRAME?\n         BE    ATTROK            YES, THAT WAS EASY.\n         MVC   4(3,R2),=C'HSA'\n         CLI   8(R5),X'F4'       HARDWARE SYSTEM AREA?\n         BE    ATTROK            YES, THAT WAS PRETTY EASY.\n         MVC   4(3,R2),=C'IDA'\n         CLI   8(R5),X'F3'       IDA FRAME?\n         BE    ATTROK            YES, THAT WAS ALSO PRETTY EASY.\n         MVI   2(R2),X'F2'       RED FOR ERROR.\n         MVC   4(4,R2),=C'BAD!'\n         TM    9(R5),X'01'       UNALLOCATABLE (NOT AVAILABLE) FRAME?\n         BO    ATTROK            YES, IN RED.\n         MVC   4(4,R2),=C'FLAW'\n         CLI   8(R5),X'FD'       FLAWED FRAME? (PROBABLY ALSO BAD.)\n         BE    ATTROK            YES, ALSO IN RED.\n         MVI   2(R2),X'F1'       BLUE FOR OFFLINE.\n         MVC   4(4,R2),=C'OFF '\n         TM    10(R5),X'20'      OFFLINE?\n         BO    ATTROK            YES.\n         MVI   2(R2),X'F3'       NO, MAKE IT PINK.\n         MVC   4(3,R2),=C'V=R'\n         CLI   8(R5),X'F0'       DAT-OFF NUCLEUS?\n         BE    ATTROK            YES.\n         MVC   4(3,R2),=C'R-O'\n         CLI   8(R5),X'F1'       READ-ONLY NUCLEUS?\n         BE    ATTROK            YES.\n         MVC   4(3,R2),=C'R/W'\n         CLI   8(R5),X'F2'       READ/WRITE NUCLEUS?\n         BE    ATTROK            YES.\n         MVC   4(4,R2),=C'FLPA'\n         CLI   8(R5),X'F6'       FIXED LPA OR BLDL?\n         BE    ATTROK            YES.\n         MVC   4(4,R2),=C'CMN '  ASSUME COMMON.\n         TM    10(R5),X'40'      BACKING PERMANENT STORAGE ANYWAY?\n         BO    ATTROK            YES, AT LEAST ITS THE RIGHT COLOUR.\n         MVI   2(R2),X'F2'       RED FOR LONG TERM PAGE-FIX.\n         CLI   8(R5),X'82'       PAGE-FIXED?\n         BE    INTHERED          YES.\n         ICM   R9,B'0011',14(R5) IS THE PAGE-FIX COUNT NON-ZERO?\n         BNZ   INTHERED          YES, PAGE IS FIXED.\n         MVI   2(R2),X'F6'       NO, MAKE IT YELLOW.\n*        MVC   4(3,R2),=C'VIO'   CAN FIND OWNING ASID WITH MVS/XA.\n         TM    11(R5),X'20'      VIO FRAME?\n         BO    ATTROK            YES.\n         MVI   2(R2),X'F4'       NO, MAKE IT GREEN.\n         MVC   4(3,R2),=C'...'\n         TM    10(R5),X'80'      AVAILABLE FRAME?\n         BO    PGUSEROK          YES.\n         MVI   2(R2),X'F1'       SHOW NON-SQA PAGEABLE COMMON AS BLUE.\nINTHERED MVC   4(3,R2),=C'CMN'   ASSUME COMMON.\n         TM    10(R5),X'10'      SQA OR LSQA FRAME?\n         BZ    ATTROK            NO.\n         MVI   2(R2),X'F5'       YES, MAKE IT TURQUOISE.\n         MVC   4(3,R2),=C'SQA'\nATTROK   CLC   18(2,R5),FFFF+2   NON-PRIVATE AREA FRAME?\n         BE    COMONTYP          YES, CHECK FOR LINK PACK AREA.\n         SLR   R8,R8\n         ICM   R8,B'0011',18(R5) GET ASID OR ZERO IF COMMON.\n         BNZ   FNDPGUSR          FIND THE NAME OF THAT ADDRESS SPACE.\nCOMONTYP CLI   SELJOBNM,C' '     JOB NAME PREFIX SELECTION ACTIVE?\n         BNH   GETCOMON          NO.\n         MVC   3(5,R2),=C' --- ' YES, INDICATE USED BUT NOT OUR JOB.\n         B     PGUSEROK          LEAVE IT AT THAT.\nGETCOMON L     R6,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R6\n         L     R6,CVTSMEXT       POINT TO THE CVT STORAGE MAP EXTEN.\n         DROP  R6                CVT.\n         ICM   R0,B'1111',8(R6)  ANY MODIFIED LINK PACK AREA?\n         BZ    NOTMLPA           NO, SO IT CAN'T BE MLPA.\n         CLC   20(4,R5),8(R6)    COMPARE WITH MLPA STARTING ADDRESS.\n         BL    PGUSEROK\n         CLC   20(4,R5),12(R6)   COMPARE WITH MLPA ENDING ADDRESS.\n         BH    NOTMLPA\n         MVC   4(4,R2),=C'MLPA'\n         B     PGUSEROK          COMMON PAGE TYPE DONE.\nNOTMLPA  ICM   R0,B'1111',16(R6) ANY FIXED LINK PACK AREA?\n         BZ    NOTFLPA           NO, SO IT CAN'T BE FLPA.\n         CLC   20(4,R5),16(R6)   COMPARE WITH FLPA STARTING ADDRESS.\n         BL    PGUSEROK\n         CLC   20(4,R5),20(R6)   COMPARE WITH FLPA ENDING ADDRESS.\n         BH    NOTFLPA\n         MVC   4(4,R2),=C'FLPA'\n         B     PGUSEROK          COMMON PAGE TYPE DONE.\nNOTFLPA  CLC   20(4,R5),24(R6)   COMPARE WITH PLPA STARTING ADDRESS.\n         BL    PGUSEROK\n         CLC   20(4,R5),28(R6)   COMPARE WITH PLPA ENDING ADDRESS.\n         BH    NOTPLPA\n         MVC   4(4,R2),=C'PLPA'\n         B     PGUSEROK          COMMON PAGE TYPE DONE.\nNOTPLPA  CLC   20(4,R5),56(R6)   COMPARE WITH EPLPA STARTING ADDRESS.\n         BL    PGUSEROK\n         CLC   20(4,R5),60(R6)   COMPARE WITH EPLPA ENDING ADDRESS.\n         BH    NOTEPLPA\n         MVC   4(4,R2),=C'PLPA'\n         B     PGUSEROK          COMMON PAGE TYPE DONE.\nNOTEPLPA ICM   R0,B'1111',64(R6) ANY EXTENDED FIXED LINK PACK AREA?\n         BZ    NOTEFLPA          NO, SO IT CAN'T BE EFLPA.\n         CLC   20(4,R5),64(R6)   COMPARE WITH EFLPA STARTING ADDRESS.\n         BL    PGUSEROK\n         CLC   20(4,R5),68(R6)   COMPARE WITH EFLPA ENDING ADDRESS.\n         BH    NOTEFLPA\n         MVC   4(4,R2),=C'FLPA'\n         B     PGUSEROK          COMMON PAGE TYPE DONE.\nNOTEFLPA ICM   R0,B'1111',72(R6) ANY EXTENDED MODIFIED LINK PACK AREA?\n         BZ    PGUSEROK          NO, SO IT CAN'T BE EMLPA.\n         CLC   20(4,R5),72(R6)   COMPARE WITH EMLPA STARTING ADDRESS.\n         BL    PGUSEROK\n         CLC   20(4,R5),76(R6)   COMPARE WITH EMLPA ENDING ADDRESS.\n         BH    PGUSEROK\n         MVC   4(4,R2),=C'MLPA'\n         B     PGUSEROK          COMMON PAGE TYPE DONE.\nFNDPGUSR CLI   2(R2),X'F1'       WAS THIS MARKED AS BLUE FOR COMMON?\n         BNE   NOTBLUES          NO, LEAVE THE COLOUR AS IT IS.\n         MVI   2(R2),X'F4'       YES, SHOW PAGEABLE PRIVATE AS GREEN.\nNOTBLUES MVI   3(R2),C'?'        INDICATE INVALID ASCB.\n         SLL   R8,2              ASID TIMES 4.\n         A     R8,ASVTADDR\n         LA    R8,524(,R8)       POINT TO ASVT ENTRY.\n         ICM   R8,B'1111',0(R8)  POINT TO ASCB.\n         BM    PGUSEROK          NO ASCB, SHOW ?CMN.\n         MVC   3(5,R2),STARS     INDICATE VALID ASCB BUT NO JOBNAME.\n         ICM   R9,15,JBNI(8)     GET JOBNAME POINTER.\n         BNZ   JOBORTSU          BATCH JOB.\n         ICM   R9,15,JBNS(8)     GET JOBNAME POINTER.\n         BZ    PGUSEROK          NO POINTER, SO STAR-TING. (GET IT?)\n         CLI   SELJOBNM,C' '     JOB NAME PREFIX SELECTION ACTIVE?\n         BNH   TASKNAME          NO.\n         MVC   3(5,R2),=C' --- ' YES, INDICATE USED BUT NOT OUR JOB.\n         ST    R9,WORK2          SUPPLY SECOND PARAMETER.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         ST    R1,WORK2+4        SUPPLY THIRD PARAMETER.\n         LA    R1,SELJOBNM       POINT TO DESIRED PREFIX.\n         ST    R1,WORK+4         SUPPLY FIRST PARAMETER.\n         LR    R15,R7            SAVE FRAME COUNTER.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         LR    R7,R15            RESTORE FRAME COUNTER.\n         BNE   PGUSEROK          PREFIX DIDN'T MATCH SO WE'RE DONE.\nTASKNAME CLI   0(R9),X'49'       IS IT UNPRINTABLE?\n         BH    GOODNAME          NO, CONTINUE JOBNAME PROCESSING.\n         MVC   3(5,R2),UNKNOWN   JOB NAME NOT KNOWN.\n         B     PGUSEROK\nGOODNAME ICM   R8,B'1111',60(R8) GET TSB ADDRESS.\n         BZ    GETPGUSR          NO POINTER, SO STARTED TASK.\nJOBORTSU LA    R0,3              MAXIMUM OF THREE TESTS.\n         CLI   SELJOBNM,C' '     JOB NAME PREFIX SELECTION ACTIVE?\n         BNH   PGUSLOOP          NO.\n         MVC   3(5,R2),=C' --- ' YES, INDICATE USED BUT NOT OUR JOB.\n         ST    R9,WORK2          SUPPLY SECOND PARAMETER.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         ST    R1,WORK2+4        SUPPLY THIRD PARAMETER.\n         LA    R1,SELJOBNM       POINT TO DESIRED PREFIX.\n         ST    R1,WORK+4         SUPPLY FIRST PARAMETER.\n         LR    R15,R7            SAVE FRAME COUNTER.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         LR    R7,R15            RESTORE FRAME COUNTER.\n         BNE   PGUSEROK          PREFIX DIDN'T MATCH SO WE'RE DONE.\nPGUSLOOP CLI   5(R9),C' '        FOUND A BLANK?\n         BE    GETPGUSR          YES, LOAD JOBNAME.\n         LA    R9,1(,R9)         POINT TO NEXT JOBNAME CHARACTER.\n         BCT   R0,PGUSLOOP       TRY NEXT CHARACTER OF JOB OR TSU NAME.\nGETPGUSR MVC   3(5,R2),0(R9)     LOAD FOUR CHARACTERS OF JOBNAME.\nPGUSEROK DS    0H                LABEL FOR THIS FRAME NOW COMPLETED.\n         CLI   FVIRTADR,C'V'     VIRTUAL ADDRESS TO BE DISPLAYED?\n         BNE   FRMDTLDN          NO, FRAME DETAIL SLOT COMPLETE.\n         UNPK  3(5,R2),20(3,R5)  YES, SHOW FIRST FIVE HEX DIGITS.\n         OI    7(R2),X'F0'\n         TR    3(5,R2),HEX-C'0'\nFRMDTLDN DS    0H                ENTRY FOR THIS FRAME NOW COMPLETED.\n         LA    R2,8(,R2)         UPDATE BUFFER POINTER.\n         LA    R5,32(,R5)        POINT TO NEXT PFT ENTRY.\n         BCTR  R7,0              ONE LESS TO END OF TABLE.\n         LTR   R7,R7             END OF PAGE FRAME TABLE REACHED?\n         BZ    SHOWFRMS          YES, DISPLAY THE SCREEN.\n         BCT   R4,NXTFRAME       PROCESS NEXT FRAME UNLESS SCREEN FULL.\n         B     SCRNFULL          ALL 256 ENTRIES TAKEN, SKIP DECREMENT.\nSHOWFRMS DS    0H\n         BCTR  R4,0              ALSO DECREMENT SCREEN ENTRY COUNTER.\nSCRNFULL MVC   OLDFCNTR,FRMCNTR  SAVE PREVIOUS FRAME COUNTDOWN VALUE.\n         ST    R7,FRMCNTR        SAVE THIS FRAME COUNTDOWN VALUE.\n         MVC   OLDPFTEP,PFTEPTR  SAVE PREVIOUS PFTE POINTER.\n         ST    R5,PFTEPTR        SAVE THIS PFTE POINTER.\n         LH    R8,MEGCNTR        FORMAT AND DISPLAY\n         CVD   R8,WORK                  THE DISPLAY START\n         MVC   HEADMEG,ED3                  REAL ADDRESS\n         ED    HEADMEG,WORK+6                    FOR THIS SCREEN.\n         MVC   HEADING,HEADINGF  LOAD REAL MEMORY MONITOR HEADING.\n         MVC   0(3,R2),=X'284100'\n         LA    R2,3(,R2)         POINT PAST THIS STUFF.\n         L     R5,RCEADDR        POINT TO RSM CNTRL & ENUMERATION AREA.\n         USING RCE,R5\n         L     R9,RCEBELPL       GET NUMBER OF FRAMES BELOW 16 MEG.\n         CVD   R9,WORK           SHOW NUMBER OF REAL STORAGE MANAGER\n         MVC   MEMVARS2+10(6),ED5     MANAGED FRAMES < 16MB IN\n         ED    MEMVARS2+10(6),WORK+5                 SUMMARY.\n         L     R9,RCEPOOL        GET TOTAL NUMBER OF FRAMES.\n         CVD   R9,WORK           SHOW NUMBER OF\n         MVC   MEMVARS2+34(8),ED7           FRAMES THAT ARE\n         ED    MEMVARS2+34(8),WORK+4               USEABLE BY SYSTEM.\n         L     R9,RCEAFC         GET NUMBER OF AVAILABLE FRAMES.\n         CVD   R9,WORK\n         MVC   MEMVARS4+14(8),ED7\n         ED    MEMVARS4+14(8),WORK+4\n         L     R9,RCEPBAFC       GET NUMBER OF AVAILABLE FRAMES\n         CVD   R9,WORK               ON THE PREFERRED BELOW QUEUE.\n         MVC   MEMVARS3(6),ED5\n         ED    MEMVARS3(6),WORK+5\n         L     R9,RCEBELFX       GET NUMBER OF FIXED FRAMES BELOW 16MB.\n         CVD   R9,WORK\n         MVC   MEMVARS3+35(6),ED7\n         ED    MEMVARS3+35(6),WORK+4\n         L     R9,RCETOTFX       GET TOTAL NUMBER OF FIXED FRAMES.\n         CVD   R9,WORK\n         MVC   MEMVARS3+54(8),ED7\n         ED    MEMVARS3+54(8),WORK+4\n         L     R9,RCEESPL        GET NUMBER OF USEABLE EXPANDED FRAMES.\n         CVD   R9,WORK\n         MVC   MEMVARS1+1(8),ED7\n         ED    MEMVARS1+1(8),WORK+4\n         L     R9,RCEESINU       GET NUMBER OF USED EXPANDED FRAMES.\n         CVD   R9,WORK\n         MVC   MEMVARS1+16(8),ED7\n         ED    MEMVARS1+16(8),WORK+4\n         L     R8,RCECOMBI       GET COMMON PAGES IN EXPANDED FRAMES.\n         L     R9,104(,R5)       GET TOTAL NUMBER OF COMMON FRAMES.\n         TM    OSLEVEL,X'88'     EARLIER THAN MVS/SP4?\n         BNO   FCOMONOK          YES, USE THE \"OLD\" FRAME COUNTERS.\n         L     R9,RCERAX         YES, GET COMMON RAX POINTER.\n         USING RAX,R9\n         L     R8,RAXESCT        GET COMMON EXPANDED FRAMES COUNT.\n         L     R9,RAXFMCT        GET COMMON CENTRAL FRAMES COUNT.\n         DROP  R9                RAX.\nFCOMONOK CVD   R8,WORK\n         MVC   MEMVARS1+31(8),ED7\n         ED    MEMVARS1+31(8),WORK+4\n         CVD   R9,WORK\n         MVC   MEMVARS4-1(8),ED7\n         ED    MEMVARS4-1(8),WORK+4\n         L     R9,RCETOTPI       GET NUMBER OF PAGES PAGED IN.\n         AL    R9,RCETOTPO       ADD NUMBER OF PAGES PAGED OUT.\n         AL    R9,RCEVIOPI       ADD NUMBER OF VIO PAGES PAGED IN.\n         AL    R9,RCEVIOPO       ADD NUMBER OF VIO PAGES PAGED OUT.\n         AL    R9,RCESWPPI       ADD NUMBER OF PAGES SWAPPED IN.\n         AL    R9,RCESWPPO       ADD NUMBER OF PAGES SWAPPED OUT.\n         L     R8,PAGIOCNT       GET PREVIOUS PAGING TOTAL.\n         ST    R9,PAGIOCNT       SAVE CURRENT TOTAL.\n         SLR   R9,R8             GET CHANGE IN TOTAL.\n         TIME  BIN               GET TIME-OF-DAY.\n         LR    R1,R0             CURRENT TIME.\n         S     R1,PAGETIME       GET CHANGE IN TIME.\n         ST    R0,PAGETIME       SAVE PRESENT TIME.\n         M     R8,TENGRAND       FOR CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R8,R1             GET PAGES INPUT/OUTPUT PER SECOND.\n         CVD   R9,WORK\n         MVC   MEMVARS4+62(9),=X'4020202021204B2020'\n         ED    MEMVARS4+62(9),WORK+4\n         MVI   MEMVARS4+62,C':'\n*        L     R9,52(,R5)        GET NUMBER OF PAGES RECLAIMED.\n*        L     R8,RECLMCNT       GET PREVIOUS RECLAIM TOTAL.\n*        ST    R9,RECLMCNT       SAVE CURRENT TOTAL.\n*        SLR   R9,R8             GET CHANGE IN TOTAL.\n*        M     R8,TENGRAND       FOR CENTISECONDS AND 2 DECIMAL PLACES.\n*        DR    R8,R1             GET PAGES RECLAIMED PER SECOND.\n*        CVD   R9,WORK\n*        MVC   MEMVARS4+44(7),=X'402021204B2020'\n*        ED    MEMVARS4+44(7),WORK+5\n         SLR   R8,R8\n         SLR   R9,R9\n         TM    OSLEVEL,X'80'     EARLIER THAN MVS/SP3?\n         BNO   FDREFOK           YES, NO DREF COUNTS TO SHOW.\n         L     R9,RCEDRIPS       GET TOTAL DREF FRAME COUNT.\n         L     R8,RCEDRIRS       GET REAL (CENTRAL) DREF FRAME COUNT.\nFDREFOK  CVD   R8,WORK\n         MVC   MEMVARS4+39(6),ED5\n         ED    MEMVARS4+39(6),WORK+5\n         CVD   R9,WORK\n         MVC   MEMVARS4+47(6),ED5\n         ED    MEMVARS4+47(6),WORK+5\n         L     R9,RCEESWRT       GET NUMBER OF PAGE WRITES TO E-STORE.\n         A     R9,RCEESREA       ADD NUMBER OF PAGE READ FROM E-STORE.\n         L     R8,ESTOREIO       GET PREVIOUS TOTAL.\n         ST    R9,ESTOREIO       SAVE CURRENT TOTAL.\n         SLR   R9,R8             GET CHANGE IN TOTAL.\n         M     R8,TENGRAND       FOR CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R8,R1             GET PAGE ESTORE READ/WRITE RATE.\n         CVD   R9,WORK\n         MVC   MEMVARS1+46(9),=X'4020202021204B2020'\n         ED    MEMVARS1+46(9),WORK+4\n         L     R9,RMCTADDR       RESOURCE MANAGER CONTROL TABLE ADDR.\n         USING RMCT,R9\n         L     R9,RMCTMCT        POINT TO MEMORY CONTROL TABLE.\n         DROP  R9                RMCT.\n         USING MCT,R9\n         LH    R9,MCVSTCRI       LOAD HIGHEST SYSTEM UIC.\n         DROP  R9                MCT.\n         CVD   R9,WORK           DISPLAY UNREFERENCED INTERVAL COUNT.\n         OI    WORK+7,X'0F'\n         UNPK  MEMVARS2+5(3),WORK+6(2)\n         LTR   R4,R4             DISPLAYING A FULL MEGABYTE?\n         BZ    GETFRMSM          YES, AT CORRECT POSITION FOR SUM LINE.\n         MVC   0(4,R2),RAL18C01  NO, PUT BLANKS TO CORRECT POSITION.\n         LA    R2,4(,R2)         ADJUST BUFFER POINTER.\nGETFRMSM MVC   0(256,R2),FRAMESUM\n         MVC   256(FRAMELEN-256,R2),FRAMESUM+256\n         LA    R2,FRAMELEN(,R2)  LOAD FRAME SUMMARY LINES & ADJUST PTR.\nNOFRMSUM BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.\n         MVC   4(MEGFIXLN,R2),MEGFUDGE FUDGE HDG FOR DIRECT ADDRSNG.\n         LA    R2,MEGFIXLN+4(,R2) ADJUST SCREEN SIZE.\n         B     SHOWCPUF          FINISH OF DETAIL SCREEN FOR DISPLAY.\n         SPACE\nFRAMSMRY XC    PFTECNT0(PFTELEN0),PFTECNT0     ZERO ALL FRAME COUNTERS.\n         MVC   HEADING,HEADINGF     INITIALIZE HEADING AND SUB-HEADING.\n         MVC   HEADING+31(19),=CL19' USAGE PERCENTAGES '\n         MVC   BUFFER(LL-79),MEDX          SUPPLY A LEGEND LINE.\n         MVC   BUFFER+LL-79(79),FSLEGEND\n         TM    GRAFLAGS,COLR+HLIT          WILL GRAPHIC CODES BE USED?\n         BNO   FSLGNDOK                    NO, STANDARD CHARACTERS.\n         MVI   BUFFER+LL-79,X'07'   SUPPLY HSA CODE.\n         MVI   BUFFER+LL-73,X'03'   SUPPLY PSA/NUCLEUS/FLPA CODE.\n         MVI   BUFFER+LL-58,X'05'   SUPPLY SQA CODE.\n         MVI   BUFFER+LL-52,X'02'   SUPPLY FIXED USER REGION CODE.\n         MVI   BUFFER+LL-39,X'04'   SUPPLY PAGEABLE USER REGION CODE.\n         MVI   BUFFER+LL-32,X'05'   SUPPLY LSQA CODE.\n         MVI   BUFFER+LL-25,X'06'   SUPPLY PLPA/MLPA CODE.\n         MVI   BUFFER+LL-13,X'01'   SUPPLY CSA CODE.\n         MVI   BUFFER+LL-7,X'0C'    SUPPLY FREE CODE.\nFSLGNDOK MVC   BUFFER+LL(LL-79),HIGHX\n         MVC   BUFFER+LL+LL-79(79),SUBHDGFS\n         LM    R5,R6,208(R3)     GET FIRST AND LAST PFTE ADDRESSES.\n         LA    R7,32(,R6)        POINT PAST LAST PFTE.\n         SR    R7,R5             GET SIZE OF PAGE FRAME TABLE.\n         SRL   R7,5              GET NUMBER OF PFTES (DIVIDE BY 32).\nPFTELOOP DS    0H                PROCESS NEXT 4K REAL STORAGE FRAME.\n         CLI   8(R5),X'F5'       ABSOLUTE ZERO FRAME?\n         BE    CNTPFTEN          YES, COUNT IT AS NUCLEUS.\n         CLI   8(R5),X'F4'       HARDWARE SYSTEM AREA?\n         BE    CNTPFTEH          YES, COUNT IT.\n         CLI   8(R5),X'F3'       IDA FRAME?\n         BE    PFTENEXT          YES, DON'T COUNT IT AS USEABLE.\n         TM    9(R5),X'01'       UNALLOCATABLE (NOT AVAILABLE) FRAME?\n         BO    PFTENEXT          YES, BAD FRAMES ARE NOT USEABLE.\n         CLI   8(R5),X'FD'       FLAWED PFTE? (PROBABLY ALSO BAD.)\n         BE    PFTENEXT          YES, FRAME IS PROBABLY NOT USEABLE.\n         TM    10(R5),X'20'      OFFLINE?\n         BO    PFTENEXT          YES, FRAME IS NOT USEABLE.\n         CLI   8(R5),X'F0'       DAT-OFF NUCLEUS?\n         BE    CNTPFTEN          YES, COUNT IT.\n         CLI   8(R5),X'F1'       READ-ONLY NUCLEUS?\n         BE    CNTPFTEN          YES, COUNT IT.\n         CLI   8(R5),X'F2'       READ/WRITE NUCLEUS?\n         BE    CNTPFTEN          YES, COUNT IT.\n         CLI   8(R5),X'F6'       FIXED LPA OR BLDL?\n         BE    CNTPFTEN          YES, COUNT IT AS NUCLEUS.\n         CLI   8(R5),X'21'       SQA FRAME?\n         BE    CNTPFTES          YES, COUNT IT.\n         TM    10(R5),X'10'      LSQA (OR SQA) FRAME?\n         BO    CNTPFTEL          YES, COUNT IT.\n         TM    10(R5),X'80'      AVAILABLE FRAME?\n         BO    CNTPFTEA          YES, COUNT IT.\n         CLC   18(1,5),19(R5)    BOTH ASID BYTES THE SAME?\n         BNE   CNTPFTER          NO, MUST BE A USER REGION FRAME.\n         TM    18(R5),X'FF'      ASID IS 0000 OR FFFF?\n         BM    CNTPFTER          NO, MUST BE A USER REGION FRAME.\n         ICM   R0,15,20(R5)      GET PFTE VIRTUAL ADDRESS.\n         BZ    PFTENEXT          ZERO SO IGNORE PFTE.\n         L     R6,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R6\n         L     R6,CVTSMEXT       POINT TO THE CVT STORAGE MAP EXTEN.\n         DROP  R6                CVT.\n         USING CVTVSTGX,R6\n         CLC   20(4,R5),CVTMLPAS VIRTUAL ADDRESS BELOW MLPA?\n         BL    CNTPFTEC          YES, COUNT CSA PAGE.\n         CLC   20(4,R5),CVTPLPAS VIRTUAL ADDRESS BELOW PLPA?\n         BL    CNTPFTEC          YES, COUNT CSA PAGE.\n         ICM   R0,15,CVTEMLPE    GET TOP EMLPA ADDRESS.\n         BNZ   GOTELPAT          NON-ZERO SO GOT TOP ELPA ADDRESS.\n         L     R0,CVTEPLPE       GET TOP EPLPA ADDRESS.\nGOTELPAT CL    R0,20(,R5)        ECSA FRAME?\n         BL    CNTPFTEC          YES, COUNT IT.\n         DROP  R6                CVTVSTGX.\n         LA    R0,1              INCREMENT PLPA/MLPA FRAME COUNT.\n         ICM   R15,3,14(R5)      PAGE-FIXED?\n         BNZ   CNTPFTFP          YES.\n         A     R0,PFTECNTP\n         ST    R0,PFTECNTP\n         B     CNTPFTET\nCNTPFTFP A     R0,PFTFCNTP       INCREMENT FIXED PLPA/MLPA FRAME COUNT.\n         ST    R0,PFTFCNTP\n         B     CNTPFTET\nCNTPFTEC LA    R0,1              INCREMENT CSA FRAME COUNT.\n         ICM   R15,3,14(R5)      PAGE-FIXED?\n         BNZ   CNTPFTFC          YES.\n         A     R0,PFTECNTC\n         ST    R0,PFTECNTC\n         B     CNTPFTET\nCNTPFTFC A     R0,PFTFCNTC       INCREMENT FIXED CSA FRAME COUNT.\n         ST    R0,PFTFCNTC\n         B     CNTPFTET\nCNTPFTEL LA    R0,1              INCREMENT LSQA FRAME COUNT.\n         A     R0,PFTECNTL\n         ST    R0,PFTECNTL\n         B     CNTPFTET\nCNTPFTER LA    R0,1              INCREMENT USER REGION FRAME COUNT.\n         ICM   R15,3,14(R5)      PAGE-FIXED?\n         BNZ   CNTPFTFR          YES.\n         A     R0,PFTECNTR       NO.\n         ST    R0,PFTECNTR\n         B     CNTPFTET\nCNTPFTFR A     R0,PFTFCNTR       INCREMENT FIXED REGION FRAME COUNT.\n         ST    R0,PFTFCNTR\n         B     CNTPFTET\nCNTPFTES LA    R0,1              INCREMENT SQA FRAME COUNT.\n         A     R0,PFTECNTS\n         ST    R0,PFTECNTS\n         B     CNTPFTET\nCNTPFTEN LA    R0,1              INCREMENT NUCLEUS/FLPA FRAME COUNT.\n         A     R0,PFTECNTN\n         ST    R0,PFTECNTN\n         B     CNTPFTET\nCNTPFTEH LA    R0,1              INCREMENT HSA FRAME COUNT.\n         A     R0,PFTECNTH\n         ST    R0,PFTECNTH\n         B     CNTPFTET\nCNTPFTEA LA    R0,1              INCREMENT HSA FRAME COUNT.\n         A     R0,PFTECNTA\n         ST    R0,PFTECNTA\nCNTPFTET LA    R0,1              INCREMENT TOTAL USEABLE FRAME COUNT.\n         A     R0,PFTECNTT\n         ST    R0,PFTECNTT\nPFTENEXT LA    R5,32(,R5)        POINT TO NEXT PFT ENTRY.\n         BCT   R7,PFTELOOP       PROCESS NEXT PFTE.\n         ICM   R4,15,PRVFLINE    POINT TO PREVIOUS DISPLAY LINE.\n         BZ    FNULPREV          THERE WAS NONE.\n         MVC   0(LL-79,R4),LOWX        MAKE IT LOW INTENSITY.\n         LA    R4,LL(,R4)              POINT TO THE NEXT LINE.\n         C     R4,PAGEND               PAST END OF SCREEN?\n         BL    FLOWOKAY                NO.\nFNULPREV LA    R4,BUFFER+LL+LL         YES, BACK TO FIRST DETAIL LINE.\nFLOWOKAY MVC   0(LL-79,R4),HIGHX       MAKE THIS LINE HIGH INTENSITY.\n         MVI   LL-79(R4),C' '          CLEAR THE DETAIL LINE.\n         MVC   LL-78(78,R4),LL-79(R4)\n         TIME  DEC               GET THE CURRENT TIME.\n         ST    R0,WORK           STORE IT.\n         UNPK  LL-79(5,R4),WORK(3)\n         ICM   R0,3,LL-77(R4)\n         STCM  R0,3,LL-76(R4)    MOVE MINUTES TO RIGHT SPOT.\n         MVI   LL-77(R4),C':'    DISPLAY TIME IN HH:MM FORMAT.\n         L     R7,RCTADDR        POINT TO THE RCT.\n         USING RCT,R7\n         LH    R9,RCVCPUA        CPU AVERAGE.\n         LA    R9,8(,R9)         ROUND TO NEAREST WHOLE PERCENT.\n         SRL   R9,4              THROW AWAY FRACTIONAL PART.\n         CVD   R9,WORK\n         MVC   LL-5(4,R4),ED3\n         ED    LL-5(4,R4),WORK+6\n         MVI   LL-1(R4),C'%'     INDICATE PERCENTAGE.\n         LH    R9,RCVPINSC       ASM QUEUE LENGTH AVERAGE.\n         CVD   R9,WORK\n         MVC   LL-11(6,R4),ED5\n         ED    LL-11(6,R4),WORK+5\n         SLR   R9,R9\n         ICM   R9,3,RCVAFQA      AVAILABLE FRAME COUNT AVERAGE.\n         CVD   R9,WORK\n         MVC   LL-16(6,R4),ED5\n         ED    LL-16(6,R4),WORK+5\n         ICM   R9,3,RCVPAGRT     TOTAL PAGING RATE.\n         CVD   R9,WORK\n         MVC   LL-20(6,R4),ED5\n         ED    LL-20(6,R4),WORK+5\n         LH    R9,RCVUICA        UNREFERENCED INTERVAL COUNT AVERAGE.\n         CVD   R9,WORK\n         MVC   LL-25(6,R4),ED5\n         ED    LL-25(6,R4),WORK+5\n         DROP  R7                RCT.\n         ICM   R9,15,PFTECNTT    GET TOTAL USEABLE PFTE COUNT.\n         BZ    NULPLOTF          HOW DID THAT HAPPEN? SKIP S0C9 ANYWAY.\n         LR    R8,R9             COPY IT.\n         LA    R14,X'0C'         LOAD GRAPHIC CHARACTER CODE.\n         SLL   R14,8             PROMOTE IT.\n         LA    R15,C'.'          LOAD GRAPH CHARACTER.\n         OR    R15,R14           GATE IN GRAPHIC CODE.\n         BAS   R14,FRAMPLOT      PLOT AVAILABLE FRAMES.\n         S     R8,PFTECNTA       SUBTRACT AVAILABLE FRAME COUNT.\n         LA    R15,X'100'+C'C'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT CSA FRAMES.\n         S     R8,PFTECNTC       SUBTRACT PAGEABLE CSA FRAME COUNT.\n         LA    R15,X'200'+C'F'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT FIXED CSA FRAMES.\n         S     R8,PFTFCNTC       SUBTRACT FIXED CSA FRAME COUNT.\n         LA    R15,X'600'+C'P'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT PAGEABLE PLPA/MLPA FRAMES.\n         S     R8,PFTECNTP       SUBTRACT PLPA/MLPA FRAME COUNT.\n         LA    R15,X'200'+C'F'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT FIXED PLPA/MLPA FRAMES.\n         S     R8,PFTFCNTP       SUBTRACT FIXED PLPA/MLPA FRAME COUNT.\n         LA    R15,X'500'+C'L'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT LSQA FRAMES.\n         S     R8,PFTECNTL       SUBTRACT LSQA FRAME COUNT.\n         LA    R15,X'400'+C'U'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT USER REGION FRAMES.\n         S     R8,PFTECNTR       SUBTRACT PAGEABLE USER FRAME COUNT.\n         LA    R15,X'200'+C'F'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT FIXED USER REGION FRAMES.\n         S     R8,PFTFCNTR       SUBTRACT FIXED REGION FRAME COUNT.\n         LA    R15,X'500'+C'S'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT SQA FRAMES.\n         S     R8,PFTECNTS       SUBTRACT SQA FRAME COUNT.\n         LA    R15,X'300'+C'N'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT NUCLEUS/FLPA FRAMES.\n         S     R8,PFTECNTN       SUBTRACT NUCLEUS/FLPA FRAME COUNT.\n         LA    R15,X'700'+C'H'   LOAD GRAPH CHARACTER CODES.\n         BAS   R14,FRAMPLOT      PLOT HSA FRAMES.\nNULPLOTF ST    R4,PRVFLINE       SAVE THE ADDRESS OF THIS DISPLAY LINE.\n         LA    R4,LL(,R4)        POINT TO THE NEXT LINE.\n         LA    R8,100            LOAD TGET COUNT BEFORE AUTO-UPDATE.\n         C     R4,FSMAXPTR       REUSING SCREEN SPACE?\n         BL    SHOWCPUF          YES, DISPLAY WHOLE SCREEN.\n         LR    R2,R4             NO, UPDATE BUFFER POINTER.\n         ST    R2,FSMAXPTR       SAVE THE NEW BIGGEST BUFFER ADDRESS.\n         C     R2,PAGEND         FILLED UP THE SCREEN?\n         BNL   SHOWCPUF          YES, DISPLAY WHOLE SCREEN.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         C     R2,PAGEND         FILLED UP THE SCREEN?\n         BNL   SHOWCPUF          YES, DISPLAY WHOLE SCREEN.\n         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.\n         LA    R2,4(,R2)         ADJUST BUFFER POINTER.\n         SPACE\nSHOWCPUF L     R9,CCTADDR        GET CCT ADDRESS.\n         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.\n         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.\n         LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         LR    R0,R2             POINT TO END OF SCREEN BUFFER.\n         SR    R0,R1             GET SCREEN BUFFER LENGTH.\nPUTSCRNF BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    MOREFRMS          YES, GO TO NEW SCREEN IMAGE LOGIC.\n         CHI   R15,4             ANY INPUT RECEIVED FROM TERMINAL YET?\n         BE    FRMSUMWT          NO, PERFORM AN AUTO-UPDATE.\n         SLR   R8,R8             YES, HOLD (ALMOST) FOREVER.\n         CLI   INBUFF,10         PF10/22?\n         BE    ISRELEAS          YES, RELEASE DISPLAY ADDRESS.\n         CLI   INBUFF,11         PF11/23?\n         BE    ISFREEZE          YES, FREEZE DISPLAY ADDRESS.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    CMDSCANF          NO, TGET RESULTS.\n         MVI   TGETFLG,TGETFLGA  RESTORE TGET TYPE FOR OTHER ROUTINES.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nFRMSUMWT STIMER WAIT,BINTVL=TEN  WAIT A DECISECOND.\n         SLR   R0,R0             ZERO THE TPUT LENGTH.\n         BCT   R8,PUTSCRNF       GO CHECK FOR MORE INPUT.\n         B     MOREFRMS          NOTHING YET SO SIMULATE AN ENTER.\nCMDSCANF CLI   INCHARS,C'M'      CHECK IF DISPLAY ADDRESS REQUESTED.\n         BNE   CONTINUF          NO.\n         CLI   FMONMODE,C'D'     CURRENTLY IN DETAIL DISPLAY MODE?\n         BNE   GIVEHLPF          NO, SHOW HELP PANEL.\nFGETMEG# LA    R1,MEGPROMT       POINT TO PROMPTING MESSAGE.\n         LA    R0,GETMEGLN       LOAD THE LENGTH OF THE DATA STREAM.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET MEGABYTE NUMBER.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    FGETMEG#          YES, UNEXPECTED SO REDRIVE THE PROMPT.\nDIRMADDR LA    R15,INCHARS       POINT TO START OF TEXT.\n         LA    R0,3              UP TO THREE CHARACTERS IN INPUT TEXT.\n         SLR   R1,R1             CLEAR MEGABYTE ADDRESS NUMBER.\nJUSTMEG# CLI   0(R15),C' '       INPUT CHARACTER A BLANK?\n         BNE   CHKMEG#           NO, INPUT IS LEFT JUSTIFIED.\n         LA    R15,1(,R15)       YES, POINT TO NEXT TEXT BYTE.\n         BCT   R0,JUSTMEG#\n         B     MOREFRMS          NULL INPUT SO FORGET IT.\nCHKMEG#  CLI   0(R15),C' '       BLANK CHARACTER?\n         BE    GOTMEG#           YES, END OF INPUT TEXT PARSING.\n         CLI   0(R15),C'0'       NUMERIC CHARACTER?\n         BL    MOREFRMS          NO, INVALID SO FORGET IT.\n         SLL   R1,8              GET ROOM FOR ANOTHER DIGIT.\n         IC    R1,0(,R15)        LOAD UNPACKED DIGIT.\n         LA    R15,1(,R15)       POINT TO NEXT TEXT BYTE.\n         BCT   R0,CHKMEG#        EXAMINE NEXT DIGIT, IF ANY.\nGOTMEG#  ST    R1,WORK           GET UNPACKED NUMBER.\n         PACK  WORK+6(2),WORK+1(3)\n         XC    WORK(6),WORK      LEAVE PACKED NUMBER IN DOUBLEWORD.\n         CVB   R6,WORK           GET EQUIVALENT BINARY.\n         LR    R0,R6             SAVE MEGABYTE NUMBER.\n         SLL   R6,8+5            MUTIPLY BY 256 AND THEN BY 32.\n         A     R6,208(,R3)       POINT TO REQUIRED PFTE.\n         C     R6,212(,R3)       IS IT OUT-OF-RANGE?\n         BH    MOREFRMS          YES, INVALID SO FORGET IT.\n         LR    R5,R6             LOAD NEW PFTE ADDRESS.\n         ST    R5,PFTEPTR        SAVE THIS PFTE POINTER.\n         LR    R8,R0             LOAD NEW MEGABYTE NUMBER.\n         STH   R8,MEGCNTR        SAVE IT AGAIN.\n         L     R7,212(,R3)       POINT TO LAST PFTE.\n         LA    R7,32(,R7)        POINT PAST LAST PFTE.\n         SR    R7,R5             SUBTRACT CURRENT PFTE ADDRESS.\n         SRL   R7,5              GET NUMBER OF PFT ENTRIES TO GO.\n         ST    R7,FRMCNTR        SAVE NUMBER OF PFT ENTRIES TO GO.\n         LA    R2,BUFFER         RESET SCREEN BUFFER POINTER.\n         LA    R4,256            RESET REMAINING ENTRIES THIS SCREEN.\n         B     NXTFRAME          NO, DO NEXT PAGE FRAME.\nFRMDMODE MVI   FMONMODE,C'D'     INDICATE DETAIL REAL STORAGE MONITOR.\n         MVI   TGETFLG,TGETFLGA  PERFORM ASIS WAIT TGETS THIS MODE.\n         NI    MODESW2,255-CLNF  CLEAN-UP UPON EXIT NO LONGER REQUIRED.\n         XC    PRVFLINE(8),PRVFLINE NO DATA SAVED FROM PREVIOUS S MODE.\n         B     MOREFRMS          ISSUE PROMPT AND GET PREFIX.\nFRMSMODE MVI   FMONMODE,C'S'     INDICATE SUMMARY REAL STORAGE MONITOR.\n         LA    R2,BUFFER         RESET BUFFER POINTER.\nFRMSRVFY CLI   HEADMODE,C'F'     IN MANUAL SUMMARY MODE?\n         BE    MOREFRMS          YES, CONTINUE.\n         MVI   TGETFLG,TGETFLGN  NO, USE ASIS NOWAIT TGETS.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         B     MOREFRMS          CONSTRUCT A NEW DISPLAY SCREEN IMAGE.\nCONTINUF CLC   =H'48',INBUFF+4   TEXT FROM MEGABYTE INPUT AREA?\n         BE    DIRMADDR          YES, DIRECT MEGABYTE ADDRESSING.\n         CLI   INCHARS,C'D'      FRAME DETAIL DISPLAY MODE REQUESTED?\n         BE    FRMDMODE          YES, PROCESS IT.\n         CLI   INCHARS,C'S'      FRAME SUMMARY DISPLAY MODE REQUESTED?\n         BE    FRMSMODE          YES, PROCESS IT.\n         CLI   INCHARS,C'V'      TOGGLE VIRTUAL ADDRESS DISPLAY?\n         BE    FRMSVIRT          YES, PROCESS IT.\n         CLI   INCHARS,C' '      YES, CONTINUE REQUESTED?\n         BNE   TRYFREEZ          NO, CHECK FOR VALID SUBCOMMANDS.\nMOREFRMS CLI   FMONMODE,C'S'     YES, OPTION F IN SUMMARY MODE?\n         BE    FRAMSMRY          YES, PERFORM A SUMMARY.\n         LA    R2,BUFFER         NO, POINT TO FIRST DETAIL LINE.\n         LA    R4,256            RESET REMAINING ENTRIES THIS SCREEN.\n         LH    R8,MEGCNTR        GET CURRENT DISPLAY BASE ADDRESS.\nFREEZTST B     NEXTMEG           INITIALLY PROCESS NEXT MEGABYTE.\n         LTR   R8,R8             FROZEN ON FIRST MEG OF REAL?\n         BZ    REDOFRMS          YES, START OVER.\n         L     R7,OLDFCNTR       GET OLD FRAME COUNTDOWN.\n         ST    R7,FRMCNTR        STORE IT IN CURRENT SAVE AREA.\n         L     R5,OLDPFTEP       GET OLD PFTE POINTER.\n         ST    R5,PFTEPTR        STORE IT IN CURRENT POINTER SAVE AREA.\n         B     NXTFRAME          RE-DO SAME REAL MEGABYTE.\nNEXTMEG  ICM   R7,15,FRMCNTR     GET REMAINING FRAMES TO PROCESS COUNT.\n         BZ    REDOFRMS          END OF REAL MEMORY REACHED SO RESTART.\n         LA    R8,1(,R8)         INCREMENT FOR NEXT MEGABYTE OF REAL.\n         STH   R8,MEGCNTR        SAVE IT AGAIN.\n         L     R5,PFTEPTR        GET NEXT PFTE ADDRESS.\n         B     NXTFRAME          DO NEXT PAGE FRAME.\nFRMSVIRT XI    FVIRTADR,C'V'     TOGGLE VIRTUAL ADDRESS DISPLAY FLAG.\n         B     MOREFRMS          GO UPDATE SCREEN.\nTRYFREEZ CLI   INCHARS,C'F'      DISPLAY ADDRESS FREEZE REQUESTED?\n         BNE   TRYRELSE          NO, CHECK FOR RELEASE REQUEST.\nISFREEZE NI    FREEZTST+1,X'0F'  YES, ALTER LOGIC PATH.\n         MVI   HEADMODE,C'F'     INDICATE DISPLAY MODE.\n         MVI   TGETFLG,TGETFLGA  PERFORM ASIS WAIT TGETS FROM NOW ON.\n         NI    MODESW2,255-CLNF  CLEAN-UP UPON EXIT NO LONGER REQUIRED.\n         B     MOREFRMS          GO DO NEXT DISPLAY SCREEN.\nTRYRELSE CLI   INCHARS,C'R'      DISPLAY ADDRESS RELEASE REQUESTED?\n         BNE   JOBFRAME          NO, CHECK FOR JOB NAME PREFIX.\nISRELEAS OI    FREEZTST+1,X'F0'  YES, ALTER LOGIC PATH.\n         MVI   HEADMODE,C'R'     INDICATE DISPLAY MODE.\n         CLI   FMONMODE,C'D'     YES, OPTION F IN DETAIL MODE?\n         BE    MOREFRMS          YES, GO DO NEXT DISPLAY SCREEN.\n         MVI   TGETFLG,TGETFLGN  NO, USE ASIS NOWAIT TGETS.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         B     MOREFRMS          GO DO NEXT DISPLAY SCREEN.\nJOBFRAME CLI   INCHARS,C'J'      CHECK FOR SPECIFIC JOB NAME PREFIX.\n         BNE   TRY31HLI          NO, CHECK HIGHLIGHTING REQUESTS.\n         XC    SELJOBNM,SELJOBNM ERASE PREVIOUS JOBNAME.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOJOBPPG          YES, DO IT.\nFGETJNAM LA    R1,JPRFXMSG\n         LA    R0,JOBSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   14,SCREENIO       ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    FGETJNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   SELJOBNM,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNOJOBPPG STH   R1,JPRFXLEN       STORE PREFIX LENGTH.\n         B     MOREFRMS          CONTINUE MEMORY SCAN.\nTRY31HLI CLI   INCHARS,C'A'      CHECK FOR HIGHLIGHTING ABOVE 16M.\n         BNE   TRY24HLI          NO.\n         CLI   INCHARS+1,C'4'    VALID SUBCODE?\n         BH    GIVEHLPF          NO, SHOW HELP SCREEN.\n         CLI   INCHARS+1,C'3'    VALID SUBCODE?\n         BE    GIVEHLPF          NO, SHOW HELP SCREEN.\n         CLI   INCHARS+1,C'0'    NUMERIC SUBCODE?\n         BL    GIVEHLPF          NO, SHOW HELP SCREEN.\n         MVI   HILITE31+1,0      LOAD DEFAULT (NO HIGHLIGHTING).\n         BE    MOREFRMS          DEFAULT REQUESTED SO CONTINUE.\n         MVC   HILITE31+1(1),INCHARS+1\n         B     MOREFRMS          LOAD HIGHLIGHTING CODE AND CONTINUE.\nTRY24HLI CLI   INCHARS,C'B'      CHECK FOR HIGHLIGHTING BELOW 16M.\n         BNE   GIVEHLPF          NO, SHOW HELP SCREEN.\n         CLI   INCHARS+1,C'4'    VALID SUBCODE?\n         BH    GIVEHLPF          NO, SHOW HELP SCREEN.\n         CLI   INCHARS+1,C'3'    VALID SUBCODE?\n         BE    GIVEHLPF          NO, SHOW HELP SCREEN.\n         CLI   INCHARS+1,C'0'    NUMERIC SUBCODE?\n         BL    GIVEHLPF          NO, SHOW HELP SCREEN.\n         MVI   HILITE24+1,0      LOAD DEFAULT (NO HIGHLIGHTING).\n         BE    MOREFRMS          DEFAULT REQUESTED SO CONTINUE.\n         MVC   HILITE24+1(1),INCHARS+1\n         B     MOREFRMS          LOAD HIGHLIGHTING CODE AND CONTINUE.\nGIVEHLPF MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     PUTSCRNF          GO DISPLAY HELP PANEL.\n         SPACE\nFRAMPLOT TM    GRAFLAGS,COLR+HLIT       WILL GRAPHIC CODES BE USED?\n         BNO   PFTEPLOT                 NO, USE A STANDARD CHARACTER.\n         SRL   R15,8                    YES, PROMOTE GRAPHIC CODE.\nPFTEPLOT LR    R1,R8             GET THE CURRENT NUMERATOR.\n         M     R0,AHUNDRED       PREPARE FOR PERCENTAGE.\n         DR    R0,R9             DIVIDE BY DENOMINATOR.\n         LA    R1,1(,R1)         ROUND TO NEAREST FIFTIETH.\n         SRA   R1,1              HALVE IT TO GET FIFTIETHS.\n         BZR   R14               NO ACTION FOR ZERO PERCENT.\n         STC   R15,LL-73(R4)     SUPPLY THE GRAPH CHARACTER OR CODE.\n         BCTR  R1,0              SUBTRACT ONE FOR BYTE SUPPLIED.\n         BCTR  R1,0              SUBTRACT ONE FOR EXECUTE.\n         LTR   R1,R1             STILL NON-NEGATIVE?\n         BMR   R14               NO, PLOT COMPLETE SO RETURN.\n         EX    R1,PLOTPFTE       COMPLETE THE PLOTTING.\n         BR    R14               RETURN.\n         SPACE\nPLOTPFTE MVC   LL-72(0,R4),LL-73(R4)            <<< EXECUTED >>>\n         SPACE\n         DROP  R11,R10           FRAMES.\n         TITLE 'REAL MEMORY MONITOR - VARIABLES AND CONSTANTS'\n*RITADDR DC    A(0)             POINTER TO RSM INTERNAL TABLE.\nPFTEPTR  DC    A(0)             POINTER TO CURRENT BASE PFTE.\nOLDPFTEP DC    A(0)             POINTER TO PREVIOUS BASE PFTE.\nPRVFLINE DC    A(0)             POINTER TO PREVIOUS SUMRY DISPLAY LINE.\nFSMAXPTR DC    A(0)             MAXIMUM SCREEN BUFFER POINTER VALUE.\nESTOREIO DC    F'0'             E-STORE I/O TOTAL.\n*ECLMCNT DC    F'0'             PAGING RECLAIMED TOTAL.\nPAGIOCNT DC    F'0'             PAGING I/O TOTAL.\nPAGETIME DC    F'0'             TIME OF PAGING TOTAL.\nFRMCNTR  DC    F'0'             CURRENT FRAMES STILL TO PROCESS.\nOLDFCNTR DC    F'0'             PREVIOUS FRAMES STILL TO PROCESS.\nPFTECNT0 DS    0F               PFTE COUNTERS TO BE RESET EACH SCAN.\nPFTECNTH DS    F'0'             HSA FRAME COUNTER.\nPFTECNTN DS    F'0'             NUCLEUS AND FLPA FRAME COUNTER.\nPFTECNTS DS    F'0'             SQA FRAME COUNTER.\nPFTFCNTP DS    F'0'             PAGE-FIXED PLPA AND MLPA FRAME COUNTER.\nPFTECNTP DS    F'0'             PAGEABLE PLPA AND MLPA FRAME COUNTER.\nPFTFCNTC DS    F'0'             PAGE-FIXED CSA FRAME COUNTER.\nPFTECNTC DS    F'0'             PAGEABLE CSA FRAME COUNTER.\nPFTFCNTR DS    F'0'             PAGE-FIXED USER REGION FRAME COUNTER.\nPFTECNTR DS    F'0'             PAGEABLE USER REGION FRAME COUNTER.\nPFTECNTL DS    F'0'             LSQA FRAME COUNTER.\nPFTECNTA DS    F'0'             AVAILABLE FRAME COUNTER.\nPFTECNTT DS    F'0'             TOTAL USEABLE FRAME COUNTER.\nPFTELEN0 EQU   *-PFTECNT0       LENGTH OF COUNTERS TO BE 0'D EACH SCAN.\n*RITEPNAM DC   CL8'IARMRRIT'    NAME OF RSM INTERNAL TABLE ENTRY POINT.\nMEGCNTR  DC    H'0'             MEGABYTE NUMBER OF CURR DISPL BASE ADDR\nFVIRTADR DC    XL1'00'          FLAG SHOWING OF VIRTUAL ADDRESS.\nHEADINGF DC    C'REAL PAGE FRAME ALLOCATION  -  REAL ADDRESS'\nHEADMEG  DC    C' ###'\n         DC    C' MB  -  DISPLAY MODE: '\nHEADMODE DC    C'R'             INITIALLY IN RELEASED DISPLAY MODE.\n         DC    C' '\nFMONMODE DC    C'D'             PAGE FRAME MONITOR DISPLAY OPTION FLAG.\nSUBHDGFS DC    CL79' TIME ----+---2+0---+---4+0---+---6+0---+---8+0---++\n               ----% UIC PGRT AFC ASMQ CPU%'\nFSLEGEND DC    CL79'H=HSA N=NUCLEUS/FLPA S=SQA F=PAGE-FIXED U=USER L=LS+\n               QA P=PLPA/MLPA C=CSA .=FREE '\nRAL18C01 DC    X'3CD55040'      REPEAT BLANKS TO LINE 18 COLUMN 1.\nFRAMESUM DC    X'2842F2',C' E-STORE FRAMES:',X'2842F3'\nMEMVARS1 DC    CL24'  ####### USABLE #######'\n         DC    CL40' IN-USE ####### COMMON #####.## IN+OUT/S'\n         DC    X'2842F2'\n         DC    CL20' REAL PAGE FRAMES:  ',X'2842F3'\nMEMVARS2 DC    CL20' UIC=###   ##### RSM'\n         DC    CL40' FRAMES < 16M  ####### TOTAL RSM FRAMES '\nMEMVARS3 DC    CL40' ##### PREFERRED BELOW AVAILABLE    ####'\n         DC    CL40'# FIXED < 16M  ####### TOTAL FIXED      '\nMEMVARS4 DC    CL40'####### COMMON ####### AVAILABLE  DREF: '\n         DC    CL40'#####CS #####TOT  PGRT #####.## IN+OUT/S'\nFRAMELEN EQU   *-FRAMESUM\nMEGFUDGE DCS   SBA,(1,48),SF,UNPHI,SBA,(1,52),SF,PROHIS\nMEGFIXLN EQU   *-MEGFUDGE\nMEGPROMT DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER DECIMAL MEGABYTE ADDRESS OF REAL STORAGE'\n         DC    X'&MED',C'===>'\n         DC    X'1BC94E132841F40000002841001BF8C2114BD2&LOW'\n         DC    C'(NON-NUMERIC OR OUT-OF-RANGE INPUT WILL BE IGNORED)'\nGETMEGLN EQU   *-MEGPROMT\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAG": {"ttr": 13322, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\x0f\\x00\\x00\\x00\\x89\"\\x8f\\x01\\x06\\x11\\x1f#W\\x05\\xf9\\x02j\\x01_\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "52.15", "flags": 0, "createdate": "1989-08-16T00:00:00", "modifydate": "2006-04-21T23:57:00", "lines": 1529, "newlines": 618, "modlines": 351, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1989,2006  PRYCROFT SIX PTY LTD\n         TITLE 'GRAPHIC ACTIVITY DYNAMIC AREA'\n         COPY  IMPCMGG\n         TITLE 'GRAPHIC ACTIVITY DISPLAY SUBROUTINE'\nIMPXA    CSECT\n         USING GRAFSTAT,R11,R10\nGRAFSTAT DS    0H\n         LA    R10,2048(,R11)    INITIALIZE SECOND\n         LA    R10,2048(,R10)                      BASE REGISTER.\n         MVI   GSTGSCAL+1,9\n         MVI   GSUBHDG1+24,C'1'  STORAGE GRAPH INITIALLY HAS A SCALE\n         MVI   GSUBHDG1+29,C'2'  OF TWO MEGABYTES PER SCREEN COLUMN.\n         MVI   GSUBHDG1+34,C'3'\n         MVI   GSUBHDG1+39,C'4'\n         CLI   GDSPTYPE,C'O'     BEEN HERE BEFORE?\n         BNE   GDSPTYOK          YES, DEFINITELY, SO SKIP LINE COUNTS.\n         L     R1,LINES          GET VDU LINE COUNT.\n         LA    R0,8              GET HEADINGS AND SUMMARIES LINE COUNT.\n         SR    R1,R0             GET VARIABLE DETAIL LINE COUNT.\n         LR    R0,R1             COPY IT.\n         SRL   R1,1              HALVE IT.\n         STH   R1,GRFJBCNT       SAVE MAXIMUM ADDRESS SPACES TO SHOW.\n         ST    R1,GRFJBMAX\n         SR    R0,1              GET COUNT OF REMAINING LINES.\n         SRL   R1,2              QUARTER THE HALF.\n         STH   R1,GRFCHCNT       SAVE MAXIMUM CHPIDS TO SHOW.\n         ST    R1,GRFCHMAX\n         SR    R0,R1             GET COUNT OF REMAINING LINES.\n         STH   R0,GRFDVCNT       SAVE MAXIMUM DEVICES TO SHOW.\n         ST    R0,GRFDVMAX\nGDSPTYOK L     R5,ASVTADDR       POINT TO THE ASVT.\n         USING ASVT,R5\n         L     R0,ASVTMAXU       LOAD MAXIMUM ASID NUMBER.\n         LR    R3,R0             COPY IT.\n         MH    R0,GRFHWSIZ       GET SIZE OF GRFASTBL.\n         L     R6,DEVTBL\n         L     R6,0(,R6)         GET IOENTLEN TIMES UCB COUNT.\n         LA    R7,GRFDVSIZ       GET OPTION \"G\" DEVICE ENTRY SIZE.\n         LA    R15,IOENTLEN      GET OPTION \"D\" DEVICE ENTRY SIZE.\n         MR    R6,R6\n         SLR   R6,R6             PREPARE FOR DIVIDE.\n         DR    R6,R15            GET SIZE OF GRFDVTBL.\n         LR    R6,R0             REMEMBER SIZE OF GRAPHIC ASID TABLE.\n         AR    R0,R7             ADD DEVICE STORAGE REQUIREMENTS.\n         LA    R1,256*4          GET CHANNEL STORAGE REQUIREMENT.\n         AR    R0,R1             TOTAL GETMAIN SIZE.\n         ST    R0,GRFFMR0        SAVE IT.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(31,64)\n         ST    R1,GRFFMR1        SAVE ITS ADDRESS.\n         AR    R1,R6             POINT TO DEVICE SECTION.\n         ST    R1,GRFDEVAD       SAVE ITS ADDRESS.\n         AR    R1,R7             POINT TO CHANNEL SECTION.\n         ST    R1,GRFCHNAD       SAVE ITS ADDRESS.\n         L     R15,PRNTADDR      GET ADDRESSABILITY TO TRANSLATE TABLE.\n         USING SCRNPRNT,R15\n         XC    GRFXLATE(16),PRTXLATE SUPPLY NEW CHARACTERS FOR GRAPHIC\n         XC    PRTXLATE(16),GRFXLATE           SUBSTITUTION.\n         XC    GRFXLATE(16),PRTXLATE\n         DROP  R15               SCRNPRNT.\n         MVI   TGETFLG,TGETFLGN  PERFORM ASIS NOWAIT TGETS.\n         MVC   GGEOKBIT,GRAFLAGS COPY GRAPHIC CAPABILITY FLAGS.\n         NI    GGEOKBIT,GEOK     JUST KEEP THE GEOK BIT.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         OI    GRFSTART,X'C0'    INVALIDATE SAMPLE START TIME.\n         L     R1,CRNTOPTN       POINT TO OPTION \"G\" IN LOOK-UP TABLE.\n         NI    1(R1),X'FE'       SCREEN PRINT NOW NOT SUPPORTED.\n         LA    R2,BUFFER         RESET BUFFER ADDRESS.\n         MVI   INBUFF+1,0        TREAT CURSOR AS IF NO ZOOM REQUEST.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '      ADJUST ANY COMMAND INPUT.\n         CLI   GCHAR,C' '        SHOWING GRPAH PAPER?\n         BNE   CMDSCANG          YES, PROCESS ANY INITIAL REQUEST.\n         NI    GRAFLAGS,255-GEOK NO, DISABLE GRAPHIC ESCAPE.\n         B     CMDSCANG          PROCESS ANY INITIAL REQUEST.\n         SPACE\nREDOGRAF L     R5,ASVTADDR       POINT TO THE ASVT.\n         L     R3,ASVTMAXU       LOAD MAXUSER.\n         LA    R4,ASVTENTY       POINT TO FIRST ASID ENTRY.\n         DROP  R5                ASVT.\n         L     R5,GRFFMR1        POINT TO ADDRESS SPACE TABLE.\n         XC    GRFTOTLS,GRFTOTLS ZERO SYSTEM-WIDE ACCUMULATORS.\n         L     R1,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R1\n         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?\n         BM    GWLMOKAY          NO.\n         DROP  R1                RMCT.\n         MVI   GWLMMODE,C'G'     YES, REMEMBER THIS.\n         MVC   GSUBHDG1+17(3),=C'CLS'\n         USING RCE,R1\nGWLMOKAY L     R1,RCEADDR        POINT TO THE RCE.\n         L     R7,RCEPAGMV       GET REAL TO REAL PAGE MOVEMENT COUNT.\n         A     R7,RCEESREA       ADD EXPANDED TO REAL MOVEMENT COUNT.\n         ST    R7,GTOTREAL       SAVE RSM FRAMES TO REAL COUNT.\n         MVC   GTOTXPND,RCEESWRT SAVE RSM FRAMES TO EXPANDED COUNT.\n         L     R7,RCETOTPI       GET NON-VIO PAGE-IN COUNT.\n         AL    R7,RCETOTPO       ADD NON-VIO PAGE-OUT COUNT.\n         AL    R7,RCESWPPI       ADD SWAP PAGE-IN COUNT.\n         AL    R7,RCESWPPO       ADD SWAP PAGE-OUT COUNT.\n         ST    R7,GTOTNVIO       SAVE AUX NON-VIO IN & OUT MOVE COUNT.\n         L     R7,RCEVIOPI       GET VIO PAGE-IN COUNT.\n         AL    R7,RCEVIOPO       ADD VIO PAGE-OUT COUNT.\n         ST    R7,GTOTVIO        SAVE AUX VIO IN AND OUT MOVE COUNT.\n         DROP  R1                RCE.\n         TIME  BIN               GET CURRENT TIME OF DAY.\n         ST    R0,GRFSTART       REMEMBER SAMPLE START TIME.\n         USING GRFASTBL,R5\nGRFASLP1 XC    GRFASTBL(GRFASSIZ),GRFASTBL ERASE ENTRY.\n         BAS   R14,GRFASINT      INITIALIZE ADDRESS SPACE ENTRY.\n         LA    R5,GRFASSIZ(,R5)  POINT TO NEXT GRFASTBL ENTRY.\n         LA    R4,4(,R4)         POINT TO NEXT ASVT ENTRY.\n         BCT   R3,GRFASLP1       PROCESS NEXT ADDRESS SPACE.\n         DROP  R5                GRFASTBL.\n         BAS   R14,GRFWTIME      GET CURRENT WAIT STATE TIMER VALUES.\n         ST    R7,GRFCPUWT       SAVE TOTAL.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTUCBA        POINT TO THE FIRST UNIT CONTROL BLOCK.\n         DROP  R3                CVT.\n         L     R5,GRFDEVAD       POINT TO THE DEVICE TABLE.\n         USING GRFDVTBL,R5\n         L     R9,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R9\n         L     R9,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R9                CMCT.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   GRAFUCB1          NO, FIRST TIME THROUGH THE LOOP.\n         XC    GSCNWORK,GSCNWORK CLEAR WORK AREA FOR THIS UCB SCAN.\nGNXTUCB1 TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   GNXAUCB1          NO, FOLLOW STATIC UCB CHAIN.\n         L     R15,CNFGTKAD      YES, POINT TO IOCTOKEN AREA.\n         UCBSCAN COPY,           SCAN UCBS, EVEN IF NOT APF'D.         +\n               WORKAREA=GSCNWORK,                                      +\n               UCBAREA=GSCNUCB,                                        +\n               UCBPAREA=GSCNPRFX,                                      +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=ALL,                                           +\n               IOCTOKEN=(R15),                                         +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,GSCN,COMPLETE)\n         LTR   R15,R15           WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   GRFCHAN1          NO, NO MORE UCB ENTRIES.\n         LA    R3,GSCNUCB        YES, POINT TO THE RETURNED UCB COPY.\n         B     GRAFUCB1          PROCESS IT.\n         USING UCBOB,R3\nGNXAUCB1 ICM   R3,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BZ    GRFCHAN1          CHECK FOR END OF UCB CHAIN.\nGRAFUCB1 TM    UCBTBYT3,X'70'    COMM, CTC, DASD OR DISPLAY CLASS?\n         BZ    GNXTUCB1          NO, TRY NEXT UCB.\n         XC    GRFDVTBL(GRFDVSIZ),GRFDVTBL ERASE ENTRY.\n         MVC   GRFDVNUM,UCBCHAN  STORE DEVICE NUMBER.\n         MVC   GRFDVVOL,UCBVOLI  STORE VOLUME SERIAL NUMBER.\n         DROP  R3                UCBOB.\n         LA    R15,48            GET UCB PREFIX LENGTH.\n*        LA    R1,GSCNPRFX       POINT TO THE UCB PREFIX.\n*        TM    OSLEVEL,X'88'     UCB SERVICES PRESENT?\n*        BO    GGOTPFX1          YES, REALLY DO HAVE THE PREFIX.\n         LR    R1,R3             POINT TO UCB.\n         SLR   R1,R15            POINT TO PATH MGMT CONTROL WORD - 16.\n         USING UCBPDATA,R1\nGGOTPFX1 TM    UCBPMCW1+1,UCBMCMB MEASUREMENTS BEING STORED IN CMB?\n         BZ    GDONUCB1          NO, GET NEXT UCB.\n         ICM   R15,3,UCBMBI      GET CMB BLOCK INDEX FOR THIS DEVICE.\n         SLL   R15,5             GET OFFSET OF ENTRY INTO CMB.\n         ALR   R15,R9            POINT TO ENTRY FOR THIS DEVICE.\n         TM    MODESW4,ECMB      ECMB RATHER THAN CMB FOR DEVICE?\n         BNO   GUSECMB1          NO, DIRECTLY ACCESS THE CMB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BNO   GDONUCB1          NO, CANNOT FETCH ECMB DATA.\n         L     R15,IOSECMB@      YES, POINT TO IOSCMB ROUTINE.\n         LR    R1,R3             POINT TO THE UCB.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESS?\n         BNZ   GDONUCB1          NO.\n         LA    R15,SECWORKA+48   POINT TO CMB DATA.\nGUSECMB1 MVC   GRFDVSMP+2(14),2(R15)   SAVE RELEVANT CMB CONTENTS.\nGDONUCB1 LA    R5,GRFDVSIZ(,R5)  POINT TO NEXT GRFDVTBL ENTRY.\n         B     GNXTUCB1          GET NEXT UCB.\n         DROP  R5,R1             GRFDVTBL, UCBPDATA.\nGRFCHAN1 L     R5,GRFCHNAD       POINT TO THE CHANNEL SAVE ENTRIES.\n         L     R4,CMCTADDR       POINT TO THE CMCT.\n         USING CMCT,R4\n         L     R6,CMCTCPMT       POINT TO THE CPMT.\n         MVC   WORK2+4(4),8(R6)  SAVE CURRENT SAMPLE COUNT.\nGNXTCHN1 LA    R6,12(,R6)        POINT TO THE NEXT CPMT ENTRY.\n         CL    R6,CMCTHICP       PAST HIGHEST VALID ENTRY?\n         BH    GRFSAMPL          YES.\n         MVC   0(4,R5),4(R6)     NO, SAVE CHANNEL'S BUSY SAMPLE COUNT.\n         LA    R5,4(,R5)         POINT TO NEXT CHANNEL'S SAVE ENTRY.\n         B     GNXTCHN1\n         DROP  R4                CMCT.\n         SPACE\nGRFSAMPL DS    0H                INTERNAL SAMPLING WAIT.\n         STIMER WAIT,BINTVL==F'50' WAIT HALF A SECOND.\n         L     R5,ASVTADDR       POINT TO THE ASVT.\n         USING ASVT,R5\n         L     R3,ASVTMAXU       LOAD MAXUSER.\n         LA    R4,ASVTENTY       POINT TO FIRST ASID ENTRY.\n         DROP  R5                ASVT.\n         USING GRFASTBL,R5\n         L     R5,GRFFMR1        POINT TO ADDRESS SPACE TABLE.\n         TIME  BIN               GET CURRENT TIME OF DAY.\nGRFASLP2 ICM   R1,15,0(R4)       LOAD ASVTE.\n         BM    GRFASMT2          RESET EMPTY ENTRY.\n         USING ASCB,R1\n         ICM   R6,15,ASCBJBNI    LOAD POINTER TO JOB NAME.\n         BNZ   GOTASNM2          GOT IT.\n         ICM   R6,15,ASCBJBNS    LOAD POINTR TO START/MOUNT/LOGON NAME.\n         BNZ   GOTASNM2          GOT IT.\n         LA    R6,STARTING       POINT TO DEFAULT ADDRESS SPACE NAME.\nGOTASNM2 ICM   R15,3,GRFASNUM    PREVIOUSLY EMPTY ENTRY?\n         BZ    CREATEAS          YES, THIS ASID HAS JUST BEEN CREATED.\n         CLC   GRFASNAM,0(R6)    SAME ADDRESS SPACE NAME?\n         BE    GRFASOK2          YES.\n         B     NEWJBSTP          NO, MUST BE NEW JOB STEP.\nCREATEAS MVC   GRFASNUM,ASCBASID COPY THE ASID.\n         MVC   GRFASNAM,0(R6)    LOAD THE ADDRESS SPACE NAME.\nGRFASOK2 LM    R6,R7,ASCBEJST    LOAD JOB STEP TCB CPU TIME.\n         SRDL  R6,12             CONVERT TO MICROSECONDS.\n         CL    R7,GRFASTCB       DECREASE IN TCB TIME?\n         BL    NEWJBSTP          YES, MUST BE NEW JOB STEP.\n         LR    R6,R7             NO, COPY TCB TIME.\n         SL    R6,GRFASTCB       GET THE CHANGE IN TCB TIME.\n         ST    R7,GRFASTCB       SAVE THE NEW TCB TIME.\n         LR    R7,R6\n         A     R6,GRFADTCB       ACCUMULATE THE CHANGE IN TCB TIME.\n         ST    R6,GRFADTCB       SAVE IT.\n         A     R7,GRFCPTCB       ACCUMULATE THE CHANGE IN TCB TIME.\n         ST    R7,GRFCPTCB       SAVE IT.\n         LM    R6,R7,ASCBSRBT    LOAD JOB STEP SRB CPU TIME.\n         SRDL  R6,12             CONVERT TO MICROSECONDS.\n         CL    R7,GRFASSRB       DECREASE IN SRB TIME?\n         BL    NEWJBSTP          YES, MUST BE NEW JOB STEP.\n         LR    R6,R7             NO, COPY SRB TIME.\n         SL    R6,GRFASSRB       GET THE CHANGE IN SRB TIME.\n         ST    R7,GRFASSRB       SAVE THE NEW SRB TIME.\n         LR    R7,R6\n         A     R6,GRFADSRB       ACCUMULATE THE CHANGE IN SRB TIME.\n         ST    R6,GRFADSRB       SAVE IT.\n         A     R7,GRFCPSRB       ACCUMULATE THE CHANGE IN SRB TIME.\n         ST    R7,GRFCPSRB       SAVE IT.\n         L     R7,ASCBDCTI       LOAD CHANNEL CONNECT TIME.\n         LR    R6,R7             COPY IT.\n         S     R6,GRFASIOC       GET THE CHANGE IN CONNECT TIME.\n         BM    NEWJBSTP          DECREASE MEANS NEW JOB STEP.\n         ST    R7,GRFASIOC       SAVE THE NEW CONNECT TIME.\n*        ICM   R7,15,ASCBJBNI    BATCH JOB? (ACTIVE INITIATOR?)\n*        BNZ   GIOCOKAY          YES, CONTINUE.\n*        ICM   R7,15,ASCBCSCB    NO, POINT TO TOP CSCB.\n*        BZ    GIOCOKAY          NO CSCB SO NOT AN IDLE INITIATOR.\n*        CLI   28(R7),CHINITID   INITIATOR/TERMINATOR?\n*        BNE   GIOCOKAY          NO, CONTINUE.\n*        SLL   R6,20             YES, CLEAR HIGH ORDER BITS.\n*        SRL   R6,20\nGIOCOKAY LR    R7,R6\n         A     R6,GRFADIOC       ACCUMULATE THE CHANGE IN CONNECT TIME.\n         ST    R6,GRFADIOC       SAVE IT.\n         A     R7,GRFCPIOC       ACCUMULATE THE CHANGE IN CONNECT TIME.\n         ST    R7,GRFCPIOC       SAVE IT.\n         L     R6,ASCBRSME       POINT TO THE RAX.\n         USING RAX,R6\n         MVC   GRFAESTG,RAXESCT  COPY EXPANDED STORAGE FRAME COUNT.\n         MVC   GRFAREAL,RAXFMCT  COPY ALLOCATED STORAGE FRAME COUNT.\n         DROP  R6                RAX.\n         MVI   GRFASFLG,0        CLEAR CLASSIFICATION FLAGS.\n         L     R6,ASCBASSB       POINT TO THE ASSB.\n         USING ASSB,R6\n         ICM   R7,15,ASSBOASB    UNIX USED BY THIS ASID?\n         BZ    *+8               NO.\n         OI    GRFASFLG,GRFASUSS YES, FLAG UNIX USAGE.\n         ICM   R7,15,ASSBTASB    TCP/IP USED BY THIS ASID?\n         BNP   *+8               NO.\n         OI    GRFASFLG,GRFASTCP YES, FLAG TCP/IP USAGE.\n         MVC   GRFAVSLT,ASSBVSC  COPY VIO SLOT COUNT.\n         MVC   GRFANSLT,ASSBNVSC COPY NON-VIO SLOT COUNT.\n         DROP  R6                ASSB.\n         L     R6,ASCBOUCB       POINT TO THE OUCB.\n         USING OUCB,R6\n         MVC   GRFASPGN,OUCBNPG  LOAD PERFORMANCE GROUP NUMBER.\n         MVC   GRFASCLS,OUCBCLS  LOAD TRANSACTION (JOB) CLASS.\n         MVC   GRFASNDP,OUCBNDP  LOAD NEW DISPATCHING PRIORITY.\n         DROP  R6                OUCB.\n         ICM   R7,15,ASCBTSB     TSO USER?\n         BZ    *+8               NO.\n         OI    GRFASFLG,GRFASTSU YES, FLAG THIS.\n         L     R6,ASCBOUXB       POINT TO THE OUXB.\n         USING OUXB,R6\n         L     R7,OUXBPIN        GET PRIVATE PAGE-IN COUNT.\n         A     R7,OUXBVAMI       ADD VIO PAGE-IN COUNT.\n         A     R7,OUXBCAPI       ADD COMMON PAGE-IN COUNT.\n         DROP  R6                OUXB.\n         LR    R6,R7             COPY IT.\n         S     R6,GRFASPGF       GET THE CHANGE IN \"PAGE FAULT\" COUNT.\n         BM    SKPPGFCH          DECREASE SO SKIP \"PAGE FAULT\" UPDATE.\n         ST    R7,GRFASPGF       SAVE THE CURRENT \"PAGE FAULT\" COUNT.\n         CR    R6,R7             ADDRESS SPACE ONLY JUST SWAPPED IN?\n         BE    SKPPGFCH          YES, SO SKIP \"PAGE FAULT\" UPDATE.\n         A     R6,GRFADPGF       ACCUMULATE PAGE FAULTS.\n         ST    R6,GRFADPGF       SAVE IT.\nSKPPGFCH L     R7,GRFASTOD       GET THE PREVIOUS ASID EXAMINE TIME.\n         LR    R6,R0             GET THE CURRENT TIME.\n         SR    R6,R7             GET THE CHANGE IN TIME.\n         A     R6,GRFADTOD       ACCUMULATE THE CHANGE IN TIME.\n         ST    R6,GRFADTOD       SAVE IT.\n         ST    R0,GRFASTOD       STORE THE CURRENT TIME.\n         B     GRFNXAS2          HAVE NOW UPDATED ENTRY.\nGRFASMT2 XC    GRFASTBL(GRFASSIZ),GRFASTBL ERASE ENTRY.\nNEWJBSTP BAS   R14,GRFASINT      RE-INITIALIZE THE ADDRESS SPACE ENTRY.\n*        LTR   R1,R1             EMPTY ENTRY?\n*        BM    GRFNXAS2          YES, SO ENTRY NOW UPDATED.\n*        ICM   R8,15,ASCBJBNI    BATCH JOB?\n*        BNZ   GRFASNEW          YES, SO CAN'T BE AN EMPTY INITIATOR.\n*        ICM   R8,15,ASCBCSCB    NO, POINT TO THE TOP CSCB.\n*        BZ    GRFNXAS2          NO CSCB SO LEAVE IT THERE.\n*        TM    28(R8),CHINITID   INITIATOR/TERMINATOR ADDRESS SPACE?\n*        BO    GRFNXAS2          YES, SO LEAVE IT THERE.\n*RFASNEW LR    R8,R0             GET CURRENT TIME.\n*        SR    R8,R15            GET THE CHANGE IN TIME.\n*        ST    R8,GRFADTOD       UPDATE ALL ENTRY ACCUMULATORS.\n*        L     R6,GRFASTCB\n*        ST    R6,GRFADTCB\n*        A     R6,GRFCPTCB\n*        ST    R6,GRFCPTCB\n*        L     R6,GRFASSRB\n*        ST    R6,GRFADSRB\n*        A     R6,GRFCPSRB\n*        ST    R6,GRFCPSRB\n*        L     R6,GRFASIOC\n*        ST    R6,GRFADIOC\n*        A     R6,GRFCPIOC\n*        ST    R6,GRFCPIOC\n*        MVC   GRFADPGF,GRFASPGF\nGRFNXAS2 LA    R5,GRFASSIZ(,R5)  POINT TO NEXT GRFASTBL ENTRY.\n         LA    R4,4(,R4)         POINT TO NEXT ASVT ENTRY.\n         BCT   R3,GRFASLP2       PROCESS NEXT ADDRESS SPACE.\n         DROP  R1                ASCB.\n         LR    R9,R0             COPY THE CURRENT TIME.\n         S     R9,GRFSTART       GET THE SAMPLE ELAPSED TIME SO FAR.\n         BNP   REDOGRAF          CATER FOR GONE PAST MIDNIGHT.\n         CLI   GDSPMODE,C'R'     IN DISPLAY MODE \"R\"?\n         BNE   NOGRFGRF          NO, DON'T AUTOMATICALLY UPDATE SCREEN.\n         CLI   GPNLMODE,0        FIXED PANEL BEING DISPLAYED?\n         BNE   NOGRFGRF          JA, DON'T AUTOMATICALLY UPDATE SCREEN.\n         CHI   R9,500            SAMPLED FOR FIVE SECONDS YET?\n         BNL   GRFGRAPH          YES, SHOW SOMETHING FOR IT.\nNOGRFGRF SLR   R0,R0             NO, DON'T WRITE ANYTHING TO SCREEN.\n         B     PUTSCRNG          CALL SCREEN HANDLER FOR ASYNC COMMAND.\nGRFGRAPH ST    R9,WORK2          SAVE THE TOTAL SAMPLE INTERVAL.\n         TM    MODESW2,AUTH      CAN'T GET TO LCCA?\n         BZ    SKIPGWT1          CORRECT.\n         BAS   R14,GRFWTIME      GET CURRENT WAIT STATE TIMER VALUES.\n         SL    R7,GRFCPUWT       GET THE TOTAL CHANGE.\n         L     R15,CVTPTR(,0)    POINT TO THE CVT.\n         USING CVT,R15\n         L     R15,CVTCSD        POINT TO THE CSD.\n         DROP  R15               CVT.\n         USING CSD,R15\n         LH    R15,CSDCPUOL      LOAD CENTRAL PROCESSOR COUNT.\n         DROP  R15               CSD.\n         SLR   R6,R6\n         DR    R6,R15            GET AVERAGE WAIT MICROSECONDS PER CP.\n         L     R15,WORK2         GET ELAPSED CENTISECONDS.\n         M     R14,TENGRAND      CONVERT TO MICROSECONDS.\n         SR    R15,R7            CONVERT WAIT TIME TO UTILIZATION TIME.\n         ST    R15,GRFCPUWT      SAVE AVERAGE CPU UTILIZATION TIME.\nSKIPGWT1 L     R1,RCEADDR        POINT TO THE RCE.\n         USING RCE,R1\n         L     R7,RCEPAGMV       GET REAL TO REAL PAGE MOVEMENT COUNT.\n         A     R7,RCEESREA       ADD EXPANDED TO REAL MOVEMENT COUNT.\n         SL    R7,GTOTREAL       GET CHANGE IN COUNT DURING SAMPLE.\n         ST    R7,GTOTREAL       SAVE RSM FRAMES TO REAL COUNT.\n         L     R7,RCEESWRT       GET REAL TO EXPANDED MOVEMENT COUNT.\n         SL    R7,GTOTXPND       GET CHANGE IN COUNT DURING SAMPLE.\n         A     R7,GTOTREAL       GET TOTAL RSM FRAME MOVEMENTS.\n         ST    R7,GTOTXPND       SAVE RSM FRAMES TO EXPANDED COUNT.\n         L     R7,RCETOTPI       GET NON-VIO PAGE-IN COUNT.\n         AL    R7,RCETOTPO       ADD NON-VIO PAGE-OUT COUNT.\n         AL    R7,RCESWPPI       ADD SWAP PAGE-IN COUNT.\n         AL    R7,RCESWPPO       ADD SWAP PAGE-OUT COUNT.\n         SL    R7,GTOTNVIO       GET CHANGE IN COUNT DURING SAMPLE.\n         A     R7,GTOTXPND       ADD TOTAL RSM FRAME MOVEMENTS.\n         ST    R7,GTOTNVIO       SAVE TOTAL NON-VIO MOVEMENT COUNT.\n         L     R7,RCEVIOPI       GET VIO PAGE-IN COUNT.\n         AL    R7,RCEVIOPO       ADD VIO PAGE-OUT COUNT.\n         SL    R7,GTOTVIO        GET CHANGE IN COUNT DURING SAMPLE.\n         A     R7,GTOTNVIO       ADD TOTAL NON-VIO MOVEMENT COUNT.\n         ST    R7,GTOTVIO        SAVE TOTAL PAGE MOVEMENT COUNT.\n         DROP  R1                RCE.\n         L     R3,ASVTADDR       POINT TO THE ASVT.\n         USING ASVT,R3\n         L     R3,ASVTMAXU       LOAD MAXUSER.\n         DROP  R3                ASVT.\n         L     R4,RCTADDR        POINT TO THE RCT.\n         LH    R4,70(,R4)        LOAD THE PAGE DELAY TIME.\n         MH    R4,ONEGRAND+2     CONVERT MILLISECONDS TO MICROSECONDS.\n         L     R5,GRFFMR1        POINT TO ADDRESS SPACE TABLE.\n         XC    GRFJENTS,GRFJENTS ZERO JOBS TO BE DISPLAYED LIST.\nGRFASLP3 ICM   R1,15,GRFADTOD    LOAD THIS ENTRY'S SAMPLE PERIOD.\n         BNP   GRFNXAS3          LEAVE AT 0% IF TIME CHANGE NOT +VE.\n         SLR   R6,R6\n         L     R7,GRFADTCB       GET CHANGE IN ASID TCB TIME.\n         DR    R6,R1             GET TCB/ELAPSED.\n         ST    R7,GRFASPC1       SAVE IT.\n         SLR   R6,R6\n         L     R7,GRFADSRB       GET CHANGE IN ASID SRB TIME.\n         A     R7,GRFADTCB       ADD CHANGE IN ASID TCB TIME.\n         DR    R6,R1             GET (TCB+SRB)/ELAPSED.\n         ST    R7,GRFASPC2       SAVE IT.\n         SLR   R6,R6\n         L     R7,GRFADIOC       ADD CHANGE IN ASID CHP CONNECT TIME.\n         SLDL  R6,R7             CONVERT TO MICROSECONDS.\n         A     R7,GRFADSRB       ADD CHANGE IN ASID SRB TIME.\n         A     R7,GRFADTCB       ADD CHANGE IN ASID TCB TIME.\n         DR    R6,R1             GET (TCB+SRB+IOC)/ELAPSED.\n         ST    R7,GRFASPC3       SAVE IT.\n         L     R7,GRFADPGF       GET THE \"PAGE-FAULT\" COUNT.\n         MR    R6,R4             CONVERT THIS TO RESOLUTION WAIT TIME.\n         LTR   R6,R6             VERY LARGE WAIT TIME?\n         BZ    GASPWTOK          NO, SHOULD BE ALRIGHT (NO S0C9).\n         SLR   R7,R7             YES, FORGET ABOUT IT.\n         B     GASPGWT0          PROCEED AS IF ZERO PAGE WAIT TIME.\nGASPWTOK DR    R6,R1             GET PAGE-FAULT-TIME/ELAPSED.\nGASPGWT0 A     R7,GRFASPC3       ADD (TCB+SRB+IOC)/ELAPSED.\n         ST    R7,GRFASPC4       SAVE IT.\n         L     R6,TENGRAND       GET 100 PERCENT.\n         S     R6,GRFASPC2       GET 100-(TCB+SRB).\n         A     R6,GRFASPC3       GET 100+(IOC).\n         CR    R7,R6             IS TCB+SRB+PGWT > 100%?\n         BNH   GPAGWTOK          NO, SO LEAVE IT.\n         ST    R6,GRFASPC4       YES, LIMIT IT TO 100%.\nGPAGWTOK LA    R6,GRFJENTS       NOW SEE IF THIS JOB GETS A GUERNSEY.\nGRFJTST1 CLI   0(R6),X'FF'       END OF JOB ENTRIES?\n         BE    GRFNXAS3          YES, DON'T SHOW THIS JOB.\n         CLC   GRFASPC3+2(2),2(R6)    HIGHER ACTIVE PERCENTAGE?\n         BH    GRFJBUBL          YES, PERCOLATE LIST.\n         LA    R6,4(,R6)         NO, POINT TO NEXT ENTRY.\n         B     GRFJTST1          CHECK IF NEED TO SURPLANT THIS ONE.\nGRFJBUBL L     R7,0(,R6)         REMEMBER THIS ENTRY.\n         MVC   0(2,R6),GRFASNUM  LOAD ASID INTO ENTRY.\n         MVC   2(2,R6),GRFASPC3+2  COMPLETE THE ENTRY.\nGRFJTST2 LA    R6,4(,R6)         POINT TO NEXT GRFJENTS ENTRY.\n         CLI   0(R6),X'FF'       END OF JOB ENTRIES?\n         BE    GRFNXAS3          YES, END OF PERCOLATION/BUBBLE DOWN.\n         L     R15,0(,R6)        REMEMBER THIS ENTRY.\n         ST    R7,0(,R6)         RESTORE DISPLACED ENTRY.\n         LTR   R7,R15            GET NEW DISPLACED ENTRY.\n         BZ    GRFNXAS3          UNUSED ENTRY SO END OF BUBBLE DOWN.\n         B     GRFJTST2          PROCESS NEXT ENTRY.\nGRFNXAS3 LA    R5,GRFASSIZ(,R5)  POINT TO NEXT GRFASTBL ENTRY.\n         BCT   R3,GRFASLP3       PROCESS NEXT ADDRESS SPACE.\n         DROP  R5                GRFASTBL.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTUCBA        POINT TO THE FIRST UNIT CONTROL BLOCK.\n         DROP  R3                CVT.\n         L     R5,GRFDEVAD       POINT TO THE DEVICE TABLE.\n         USING GRFDVTBL,R5\n         L     R9,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R9\n         L     R9,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R9                CMCT.\n         XC    GRFDENTS,GRFDENTS ZERO DEVICES TO BE DISPLAYED LIST.\n         XC    GRFDENT2,GRFDENT2\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   GRAFUCB2          NO, FIRST TIME THROUGH THE LOOP.\n         XC    GSCNWORK,GSCNWORK CLEAR WORK AREA FOR THIS UCB SCAN.\nGNXTUCB2 TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   GNXAUCB2          NO, FOLLOW STATIC UCB CHAIN.\n         L     R15,CNFGTKAD      YES, POINT TO IOCTOKEN AREA.\n         UCBSCAN COPY,           SCAN UCBS, EVEN IF NOT APF'D.         +\n               WORKAREA=GSCNWORK,                                      +\n               UCBAREA=GSCNUCB,                                        +\n               UCBPAREA=GSCNPRFX,                                      +\n               CMXTAREA=GSCNCMXT,                                      +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=ALL,                                           +\n               IOCTOKEN=(R15),                                         +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,GSCN,COMPLETE)\n         LTR   R15,R15           WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   GRFCHAN2          NO, NO MORE UCB ENTRIES.\n         LA    R3,GSCNUCB        YES, POINT TO THE RETURNED UCB COPY.\n         B     GRAFUCB2          PROCESS IT.\n         USING UCBOB,R3\nGNXAUCB2 ICM   R3,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BZ    GRFCHAN2          CHECK FOR END OF UCB CHAIN.\nGRAFUCB2 TM    UCBTBYT3,X'70'    COMM, CTC, DASD OR DISPLAY CLASS?\n         BZ    GNXTUCB2          NO, TRY NEXT UCB.\n*        TM    UCBSTAT,UCBONLI   IS THE DEVICE ONLINE?\n*        BO    GGETPFX2          YES, PROCEED WITH DISPLAY SELECTION.\n*        CLI   UCBTBYT3,X'20'    DASD DEVICE CLASS?\n*        BNE   GDONUCB2          NO, REJECT NON-DASD OFFLINE DEVICE.\nGGETPFX2 LA    R15,48            GET UCB PREFIX LENGTH.\n*        LA    R1,GSCNPRFX       POINT TO THE UCB PREFIX.\n*        TM    OSLEVEL,CVTUCBSV  UCB SERVICES PRESENT?\n*        BO    GGOTPFX2          YES, REALLY DO HAVE THE PREFIX.\n         LR    R1,R3             POINT TO UCB.\n         SLR   R1,R15            POINT TO PATH MGMT CONTROL WORD.\n         USING UCBPDATA,R1\nGGOTPFX2 TM    UCBPMCW1+1,UCBMCMB MEASUREMENTS BEING STORED IN CMB?\n         BZ    GDONUCB2          NO, GET NEXT UCB.\n         ICM   R15,3,UCBMBI      GET CMB BLOCK INDEX FOR THIS DEVICE.\n         DROP  R1                UCBPDATA.\n         SLL   R15,5             GET OFFSET OF ENTRY INTO CMB.\n         ALR   R15,R9            POINT TO ENTRY FOR THIS DEVICE.\n         TM    MODESW4,ECMB      ECMB RATHER THAN CMB FOR DEVICE?\n         BNO   GUSECMB2          NO, DIRECTLY ACCESS THE CMB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BNO   GDONUCB2          NO, CANNOT FETCH ECMB DATA.\n         L     R15,IOSECMB@      YES, POINT TO IOSCMB ROUTINE.\n         LR    R1,R3             POINT TO THE UCB.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESS?\n         BNZ   GDONUCB2          NO.\n         LA    R15,SECWORKA+48   POINT TO CMB DATA.\nGUSECMB2 L     R1,4(,R15)        LOAD NEW DEVICE CONNECT TIME.\n         SL    R1,GRFDVCON       GET THE CHANGE.\n         ST    R1,GRFDVCON       SAVE IT.\n         L     R1,12(,R15)       LOAD NEW SUBCHANNEL DISCONNECT TIME.\n         SL    R1,GRFDVDIS       GET THE CHANGE.\n         A     R1,GRFDVCON       ADD THE CHANGE TO CONNECT TIME.\n         ST    R1,GRFDVDIS       SAVE IT.\n         L     R1,8(,R15)        LOAD NEW DEVICE REQUEST PENDING TIME.\n         SL    R1,GRFDVPND       GET THE CHANGE.\n         A     R1,GRFDVDIS       GET THE CHANGE TO ALL DEVICE TIMES.\n         ST    R1,GRFDVPND       SAVE IT.\n         BZ    GDONUCB2          SUPPRESS DISPLAY OF 0 ACTIVITY UNIT.\n         ICM   R1,12,2(R15)      LOAD DEVICE SAMPLE COUNT.\n         SRL   R1,16             SHIFT TO LOW ORDER BITS.\n         S     R1,GRFDVSMP       GET SAMPLE COUNT CHANGE.\n         BNM   GDVSMPOK          RESULT SEEMS ALRIGHT.\n         A     R1,FFFF           NEGATIVE MEANS COUNTER WRAP-AROUND.\n         LA    R1,1(,R1)         ADD COUNTER CAPACITY FOR POSITIVE.\nGDVSMPOK ST    R1,GRFDVSMP       SAVE THE NON-NEGATIVE COUNT.\n         LA    R6,GRFDENTS       NOW SEE IF THIS UNIT GETS A GUERNSEY.\nGRFDTST1 CLI   0(R6),X'FF'       END OF DEVICE ENTRIES?\n         BE    GDONUCB2          YES, DON'T SHOW THIS DEVICE.\n         CLC   GRFDVPND,4(R6)    MORE DEVICE ACTIVITY TIME?\n         BH    GRFDDTLS          YES, GET DETAILS BEFORE PERCOLATING.\n         LA    R6,8(,R6)         NO, POINT TO NEXT ENTRY.\n         B     GRFDTST1          CHECK IF NEED TO SURPLANT THIS ONE.\nGRFDDTLS MVC   GRFDVNAM,UCBNAME  LOAD UCB NAME.\n         MVC   GRFDVJOB,BLANKS   CLEAR JOB NAME.\n         TM    UCBSTAT,UCBONLI   IS THE DEVICE ONLINE?\n         BZ    GDONOFFL          NO, NO POINT LOOKING AT ALLOCATION.\n         OI    GRFDVFLG,GRFDVONL YES, FLAG THIS.\nGDONOFFL CLI   UCBTBYT3,X'20'    DASD DEVICE CLASS?\n         BNE   GNOTDASD          NO, PERFORM NON-DASD PROCESSING.\n         TM    UCBFL5,UCBNALOC   BEING PROCESSED IN OFFLINE MODE?\n         BNO   GDXYZ             NO.\n         NOP   GDXYZ\nGDXYZ    MVC   WORK(1),UCBSTAB   COPY FLAG BYTE.\n         NI    WORK,GRFDVPAG     PRESERVE PAGING FLAG (UCBPGFL).\n         OC    GRFDVFLG,WORK     REMEMBER PAGING FLAG (UCBPGFL).\n         MVC   WORK(1),UCBTBYT2  COPY FLAG BYTE FROM UCBTYP.\n         NI    WORK,GRFDVSHR     PRESERVE SHARED FLAG (UCBRR).\n         OC    GRFDVFLG,WORK     REMEMBER SHARED FLAG (UCBRR).\n         MVC   GRFDVVOL,28(R3)   LOAD VOLUME SERIAL NUMBER.\nGDBSYCHK CLI   UCBFLA,UCBSTRT    SSCH ON FULLY FUNCTIONAL DEVICE?\n         BNE   GRFDBUBL          NO, DO NOT LOOK AT UCBIOQ.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    GIOQLOOK          NO, CAN'T GET INTO KEY ZERO.\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO FOR IOSB.\nGIOQLOOK LA    R7,48             GET THE UCB PREFIX LENGTH.\n         LR    R15,R3            POINT TO THE UCB.\n         SR    R15,R7            POINT TO THE UCB PREFIX.\n*        LA    R15,GSCNPRFX      POINT TO THE UCB PREFIX.\n         USING UCBPDATA,R15\n         L     R15,44(,R15)      POINT TO THE IOQ.\n         DROP  R15               UCBPDATA.\n         USING IOQ,R15\n         L     R15,IOQIOSB       POINT TO THE IOSB.\n         DROP  R15               IOQ.\n         USING IOSB,R15\n         SLR   R7,R7\n         ICM   R7,3,IOSSKCC      LOAD CYLINDER NUMBER OF DYNAMIC SEEK.\n         ST    R7,GRFDVCYL       SAVE THE CYLINDER NUMBER.\n         OI    GRFDVFLG,GRFDVDYN REMEMBER HAVING CYLINDER NUMBER.\n         ICM   R7,3,IOSASID      LOAD ASID TO BE POSTED AT COMPLETION.\n         DROP  R15               IOSB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    GDSKASID          NO, STAYED IN USER'S KEY.\n         MODESET MF=(E,MDSETN0)  REVERT TO USER KEY.\nGDSKASID SLL   R7,2              GET INDEX INTO ASVT (MULTIPLY BY 4).\n         A     R7,ASVTADDR\n*                                GET ASVT ENTRY FOR THIS ASID.\n         LA    R7,ASVTENTY-ASVT-4(,R7)\n         MVC   GRFDVJOB,ENDED\n         ICM   R15,15,0(R7)      IS THIS ADDRESS SPACE ACTIVE?\n         BM    GRFDBUBL          NO, THE JOB HAS ENDED.\n         USING ASCB,R15\n         MVC   GRFDVJOB,STARTING\n         ICM   R7,15,ASCBJBNI    LOAD PTR TO JOBNAME.\n         BNZ   GDSKUSER\n         ICM   R7,15,ASCBJBNS    LOAD PTR TO JOBNAME.\n         BZ    GRFDBUBL          JOB HAS NO NAME.\n         DROP  R15               ASCB.\nGDSKUSER MVC   GRFDVJOB,0(R7)    OTHERWISE, MOVE IN JOBNAME.\n         B     GRFDBUBL          READY TO PERCOLATE.\nGNOTDASD MVC   GRFDVVOL,=CL6'<CTCA>'\n         CLI   UCBTBYT3,X'41'    REALLY A CHANNEL-TO-CHANNEL ADAPTER?\n         BE    GGOTCLAS          YES.\n         MVC   GRFDVVOL,=CL6'<COMM>'\n         CLI   UCBTBYT3,X'40'    REALLY A COMMUNICATIONS CONTROLLER?\n         BE    GGOTCLAS          YES.\n         MVC   GRFDVVOL,=CL6'<DISP>'\n         CLI   UCBTBYT3,X'10'    REALLY A DISPLAY?\n         BE    GGOTCLAS          YES.\n         MVC   GRFDVVOL,BLANKS\nGGOTCLAS MVC   GRFDVJOB,=CL8'CONSOLE '\n         TM    UCBSTAT,UCBSYSR   REALLY A SYSTEM CONSOLE?\n         BO    GRFDBUBL          YES.\n         MVC   GRFDVJOB,=CL8'*OFFLINE'\n         TM    GRFDVFLG,GRFDVONL IS THE DEVICE ONLINE?\n         BZ    GRFDBUBL          NO, CAN'T GET ALLOCATING JOB.\n         MVC   LL-76(5,R2),=CL5'<OFF>'\n         MVC   GRFDVJOB,=CL8'*\u00ac-ALLOC'\n         TM    UCBSTAT,UCBALOC   REALLY UNALLOCATED?\n         BZ    GRFDBUBL          YES.\n         MVC   GRFDVJOB,UNKNOWN\n         SLR   R7,R7\n         ICM   R7,7,UCBEXTP      POINT TO COMMON UCB EXTENSION.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   GGOTCMXT          NO, PROCEED.\n         LA    R7,GSCNCMXT       YES, POINT TO UCBSCAN COPY.\n         USING UCBCMEXT,R7\nGGOTCMXT SLR   R15,R15\n         ICM   R15,3,UCBASID     GET ASID OF LAST ALLOCATING JOB.\n         BZ    GRFDBUBL          JUST IN CASE.\n         DROP  R7                UCBCMEXT.\n         SLL   R15,2             GET INDEX INTO ASVT (MULTIPLY BY 4).\n         AL    R15,ASVTADDR\n*                                GET ASVT ENTRY FOR THIS ASID.\n         LA    R7,ASVTENTY-ASVT-4(,R15)\n         MVC   GRFDVJOB,ENDED\n         ICM   R15,15,0(R7)      IS THIS ADDRESS SPACE ACTIVE?\n         BM    GRFDBUBL          NO, THE JOB HAS ENDED.\n         USING ASCB,R15\n         MVC   GRFDVJOB,STARTING\n         ICM   R7,15,ASCBJBNI\n         BNZ   GDEVUSER          ADDRESS SPACE IS A BATCH JOB.\n         ICM   R7,15,ASCBJBNS\n         BZ    GRFDBUBL          ADDRESS SPACE HAS NO NAME (YET).\n         DROP  R15               ASCB.\nGDEVUSER MVC   GRFDVJOB,0(R7)    LOAD NAME OF ALLOCATED ADDRESS SPACE.\nGRFDBUBL LM    R14,R15,0(R6)     REMEMBER THIS ENTRY.\n         ST    R5,0(,R6)         SUPPLY THE DEVICE ENTRY ADDRESS.\n         MVC   4(4,R6),GRFDVPND  LOAD TOTAL ACTIVITY TIME FOR DEVICE.\nGRFDTST2 LA    R6,8(,R6)         POINT TO NEXT GRFDENTS ENTRY.\n         CLI   0(R6),X'FF'       END OF DEVICE ENTRIES?\n         BE    GDONUCB2          YES, END OF PERCOLATION/BUBBLE DOWN.\n         LM    R7,R8,0(R6)       REMEMBER THIS ENTRY.\n         STM   R14,R15,0(R6)     RESTORE DISPLACED ENTRY.\n         LTR   R14,R7            GET NEW DISPLACED ENTRY.\n         BZ    GDONUCB2          UNUSED ENTRY SO END OF BUBBLE DOWN.\n         LR    R15,R8\n         B     GRFDTST2          PROCESS NEXT ENTRY.\nGDONUCB2 LA    R5,GRFDVSIZ(,R5)  POINT TO NEXT GRFDVTBL ENTRY.\n         B     GNXTUCB2          GET NEXT UCB.\n         DROP  R5,R3             GRFDVTBL, UCBOB.\nGRFCHAN2 XC    GRFCENTS,GRFCENTS ZERO CHANNELS TO BE DISPLAYED LIST.\n         SLR   R3,R3             RESET THE CHANNEL PATH NUMBER.\n         L     R5,GRFCHNAD       POINT TO THE CHANNEL SAVE ENTRIES.\n         L     R4,CMCTADDR       POINT TO THE CMCT.\n         USING CMCT,R4\n         L     R7,CMCTCPMT       POINT TO THE CPMT.\n         L     R1,8(,R7)         LOAD CURRENT SAMPLE COUNT.\n         SL    R1,WORK2+4        GET THE SAMPLE COUNT CHANGE.\n         ST    R1,WORK2+4        SAVE IT FOR LATER.\nGNXTCHN2 LA    R7,12(,R7)        POINT TO THE NEXT CPMT ENTRY.\n         CL    R7,CMCTHICP       PAST HIGHEST VALID ENTRY?\n         BH    GRFOUTPT          YES.\n         L     R1,4(,R7)         NO, GET CURRENT BUSY SAMPLE COUNT.\n         SL    R1,0(,R5)         GET THE CHANGE IN THIS COUNT.\n         ST    R1,0(,R5)         SAVE IT.\n         LA    R5,4(,R5)         POINT TO NEXT CHANNEL'S SAVE ENTRY.\n         STC   R3,WORK\n         LA    R3,1(,R3)         INCREMENT THE CHANNEL PATH NUMBER.\n         LTR   R1,R1             ANY ACTIVITY?\n         BZ    GNXTCHN2          NO, SUPPRESS DISPLAY OF THIS CHANNEL.\n         DROP  R4                CMCT.\n         LA    R6,GRFCENTS       NOW SEE IF THIS CHPID GETS A GUERNSEY.\n         ICM   R1,8,WORK         LOAD CHPID.\nGRFCTST1 CLI   0(R6),X'FF'       END OF CHANNEL ENTRIES?\n         BE    GNXTCHN2          YES, DON'T SHOW THIS CHANNEL PATH.\n         CLM   R1,7,1(R6)        HIGH CHANNEL UTILIZATION?\n         BH    GRFCBUBL          YES, PERCOLATE LIST.\n         LA    R6,4(,R6)         NO, POINT TO NEXT ENTRY.\n         B     GRFCTST1          CHECK IF NEED TO SURPLANT THIS ONE.\nGRFCBUBL L     R8,0(,R6)         REMEMBER THIS ENTRY.\n         ST    R1,0(,R6)         SUPPLY THE NEW CHPID DETAILS.\nGRFCTST2 LA    R6,4(,R6)         POINT TO NEXT GRFCENTS ENTRY.\n         CLI   0(R6),X'FF'       END OF CHANNEL ENTRIES?\n         BE    GNXTCHN2          YES, END OF PERCOLATION/BUBBLE DOWN.\n         L     R1,0(,R6)         REMEMBER THIS ENTRY.\n         ST    R8,0(,R6)         RESTORE DISPLACED ENTRY.\n         LTR   R8,R1             GET NEW DISPLACED ENTRY.\n         BZ    GNXTCHN2          UNUSED ENTRY SO END OF BUBBLE DOWN.\n         B     GRFCTST2          PROCESS NEXT ENTRY.\n         SPACE\n         USING GRFASTBL,R5\nGRFOUTPT OI    GRFSTART,X'80'    INVALIDATE SAMPLE START TIME.\n         LA    R2,BUFFER         RESET BUFFER ADDRESS.\n         ICM   R3,15,GRFJBMAX    GET MAX. ADDRESS SPACE DETAIL LINES.\n         BZ    GRFJBDON          OMIT WHOLE CATEGORY IF ZERO.\n         MVC   0(LL-79,R2),MEDX\n         MVC   LL-79(79,R2),GRFKEYAS\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),GSUBHDG1\n         TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\n         LA    R8,GRFJENTS       POINT TO ADDRESS SPACE DISPLAY LIST.\nGRFASLP4 SLR   R5,R5\n         ICM   R5,3,0(R8)        LOAD ASID OF JOB TO BE PLOTTED.\n         BZ    GRFCPTOT          ZERO SO PREMATURE END OF JOB LIST.\n         BCTR  R5,0              DECREMENT FOR INDEX.\n         MH    R5,GRFHWSIZ       MULTIPLY BY ENTRY SIZE.\n         A     R5,GRFFMR1        POINT TO ADDRESS SPACE TABLE ENTRY.\n         ICM   R7,15,GRFASPC4    ANY ACTIVITY IN THIS ASID?\n         BNP   GRFCPTOT          NO, SO PREMATURE END OF JOB LIST.\n         MVC   0(LL-79,R2),LOWX\n         MVC   LL-79(8,R2),GRFASNAM\n         MVI   LL-71(R2),C' '\n         UNPK  LL-70(5,R2),GRFASNUM(3)\n         TR    LL-70(5,R2),HEX-C'0'\n         MVI   LL-66(R2),C' '\n         UNPK  LL-65(3,R2),GRFASNDP(2)\n         TR    LL-65(2,R2),HEX-C'0'\n         TR    LL-79(79,R2),XLATETBL  HANDLE BAD ADDRESS SPACE NAME.\n         MVC   LL-63(4,R2),BLANKS\n         MVC   LL-61(1,R2),GRFASCLS\n         ICM   R15,12,GRFASFLG\n         BZ    GCHKMODE\n         LA    R1,GCLSLBLS       POINT TO CLASSIFICATION LABELS.\nGCLSLOOP LTR   R15,R15           SIGN BIT ON?\n         BM    GLOADCLS          YES, FOUND SET FLAG.\n         LA    R1,3(,R1)         NO, POINT TO NEXT LABEL.\n         SLL   R15,1             PROMOTE NEXT BIT.\n         B     GCLSLOOP          GO CHECK NEXT BIT.\nGLOADCLS MVC   LL-62(3,R2),0(R1) LOAD CLASSIFICATION LABEL.\nGCHKMODE CLI   GWLMMODE,C'G'     IS WLM IN GOAL MODE?\n         BE    GPGNOKAY          YES, DO NOT SHOW PGN.\n         LH    R15,GRFASPGN      LOAD PERFORMANCE GROUP NUMBER.\n         CVD   R15,WORK\n         MVC   LL-63(4,R2),ED3\n         ED    LL-63(4,R2),WORK+6\nGPGNOKAY MVI   LL-59(R2),X'3B'\n         MVC   LL-58(1,R2),GCHAR\n         MVC   LL-57(57,R2),LL-58(R2)\n         MVI   LL-33(R2),X'3B'\n         MVC   LL-8(1,R2),GCHAR100\n         LA    R15,X'0A'         LOAD GRAPH CODE FOR PAGE DELAY.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         L     R7,GRFASPC3\n         LA    R15,X'05'         LOAD GRAPH CODE FOR CHANNEL CONNECT.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         L     R7,GRFASPC2\n         LA    R15,X'06'         LOAD GRAPH CODE FOR SRB TIME.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         L     R7,GRFASPC1\n         LA    R15,X'04'         LOAD GRAPH CODE FOR TCB TIME.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         L     R6,GRFAREAL       LOAD REAL FRAME COUNT.\n         A     R6,GRFAESTG       ADD EXTENDED FRAME COUNT.\n         A     R6,GRFANSLT       ADD NON-VIO SLOT COUNT.\n         A     R6,GRFAVSLT       ADD VIO SLOT COUNT.\n         LA    R7,128(,R6)       ROUND UPWARDS.\n         SRA   R7,8              CONVERT PAGE COUNT TO MEGABYTES.\n         CLI   GSTGSCAL+1,9      ALREADY EXCEEDED \"LOW\" SCALING FACTOR?\n         BH    GSTGRFOK          YES, DON'T CHECK IT AGAIN.\n         CHI   R7,42             NO, MORE THAN 42 MEG FOR THIS ASID?\n         BNH   GSTGRFOK          NO, STAY WITH \"LOW\" SCALING FACTOR.\nGSCLREDO MVI   GSTGSCAL+1,10     YES, SET \"HIGH\" SCALING FACTOR.\n         MVI   GSUBHDG1+24,C'2'  STORAGE GRAPH NOW HAS A SCALE OF\n         MVI   GSUBHDG1+29,C'4'  FOUR MEGABYTES PER SCREEN COLUMN.\n         MVI   GSUBHDG1+34,C'6'\n         MVI   GSUBHDG1+39,C'8'\n         B     GRFOUTPT          REDRIVE GRAPH GENERATION.\nGSTGRFOK CVD   R7,WORK           GET TOTAL MEGABYTES IN DECIMAL.\n         LR    R7,R6             RESTORE UNROUNDED VALUE.\n         LA    R15,X'07'         LOAD GRAPH CODE FOR VIO SLOTS.\n         BAS   R14,GRAFSTOR      PLOT IT.\n         S     R6,GRFAVSLT\n         LR    R7,R6\n         LA    R15,X'03'         LOAD GRAPH CODE FOR NON-VIO SLOTS.\n         BAS   R14,GRAFSTOR      PLOT IT.\n         S     R6,GRFANSLT\n         LR    R7,R6\n         LA    R15,X'06'         LOAD GRAPH CODE FOR EXTENDED FRAMES.\n         BAS   R14,GRAFSTOR      PLOT IT.\n         L     R7,GRFAREAL\n         LA    R15,X'04'         LOAD GRAPH CODE FOR REAL PAGE FRAMES.\n         BAS   R14,GRAFSTOR      PLOT IT.\n         BAS   R14,GNUMSTOR      SHOW NUMERIC VALUE IF POSSIBLE.\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\n         LA    R8,4(,R8)         POINT TO NEXT GRFJENTS ENTRY.\n         BCT   R3,GRFASLP4       PROCESS NEXT ADDRESS SPACE.\n         DROP  R5                GRFASTBL.\nGRFCPTOT DS    0H\n         L     R15,CVTPTR(,0)    POINT TO THE CVT.\n         L     R15,CVTCSD-CVT(,R15) PT TO THE CSD.\n         LH    R15,10(,R15)      LOAD CENTRAL PROCESSOR COUNT.\n         L     R1,WORK2          LOAD SAMPLE ELAPSED TIME.\n         SLR   R6,R6\n         L     R7,GRFCPTCB       GET CHANGE IN TOTAL TCB TIME.\n         DR    R6,R1             GET TCB/ELAPSED.\n         SLR   R6,R6\n         DR    R6,R15            GET AVERAGE PER CPU.\n         ST    R7,GRFCPTCB       SAVE IT.\n         SLR   R6,R6\n         L     R7,GRFCPSRB       GET CHANGE IN TOTAL SRB TIME.\n         DR    R6,R1             GET SRB/ELAPSED.\n         SLR   R6,R6\n         DR    R6,R15            GET AVERAGE PER CPU.\n         ST    R7,GRFCPSRB       SAVE IT.\n         SLR   R6,R6\n         L     R7,GRFCPIOC       ADD CHANGE IN TOTAL CHP CONNECT TIME.\n         SLDL  R6,7              CONVERT TO MICROSECONDS.\n         DR    R6,R1             GET IOC/ELAPSED.\n         SLR   R6,R6\n         DR    R6,R15            GET AVERAGE PER CPU.\n         ST    R7,GRFCPIOC       SAVE IT.\n         SLR   R6,R6\n         L     R7,GRFCPUWT       GET AVERAGE CHANGE IN CPU BUSY TIME.\n         DR    R6,R1             GET BUSY/ELAPSED.\n         ST    R7,GRFCPUWT       SAVE IT.\n         MVC   0(LL-79,R2),=X'2841001BF8402842F7'\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         STC   15,LL-79(,R2)     GET CP COUNT.\n         MVC   LL-78(13,R2),=C'-CPU  SAMPLE-' <== PAD CHARACTER.\n         CVD   R1,WORK           SHOW SAMPLE ELAPSED TIME HERE.\n         MVC   LL-65(6,R2),G1PNTMSK+1\n         ED    LL-66(7,R2),WORK+5\n         MVI   LL-60(R2),C'S'-C' '  DENOTE SECONDS.\n         CLI   LL-79(R2),1       UNIPROCESSOR?\n         BE    GRAFCPOK          YES.\n         MVI   LL-75(R2),C'S'    NO, MAKE PLURAL FOR MULTIPROCESSOR.\nGRAFCPOK TR    LL-79(1,R2),HEX   SHOW CP COUNT.\n         TR    LL-79(20,R2),XLATETBL  PERHAPS FOLD TO UPPER CASE.\n         MVI   LL-59(R2),X'3B'\n         MVC   LL-58(1,R2),GCHAR\n         MVC   LL-57(57,R2),LL-58(2)\n         MVI   LL-33(R2),X'3B'\n         MVC   LL-8(1,R2),GCHAR100\n*        L     R7,GRFCPIOC\n*        A     R7,GRFCPUWT\n*        TM    MODESW2,AUTH      ACCESSED LCCA?\n*        BO    GCPUWTOK          YES.\n*        A     R7,GRFCPSRB\n*        A     R7,GRFCPTCB\n*CPUWTOK LA    R15,X'05'         LOAD GRAPH CODE FOR CHANNEL CONNECT.\n*        BAS   R14,GRAFPLOT      PLOT IT.\n         TM    MODESW2,AUTH      ACCESSED LCCA?\n         BZ    GNOCPUOH          NO, CAN'T SHOW CPU OVERHEAD.\n         L     R7,GRFCPUWT\n         CVD   R7,WORK\n         IC    R15,LL-8(,R2)     SAVE DISPLAY BYTE.\n         MVC   LL-8(8,R2),G1PNTMSK\n         ED    LL-8(7,R2),WORK+5\n         STC   R15,LL-8(,R2)     RESTORE DISPLAY BYTE.\n         LA    R15,X'02'         LOAD GRAPH CODE FOR CPU OVERHEAD.\n         BAS   R14,GRAFPLOT      PLOT IT.\nGNOCPUOH L     R7,GRFCPSRB\n         A     R7,GRFCPTCB\n         LA    R15,X'06'         LOAD GRAPH CODE FOR SRB TIME.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         L     R7,GRFCPTCB\n         LA    R15,X'04'         LOAD GRAPH CODE FOR TCB TIME.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         L     R7,GTOTVIO        GET TOTAL 4K PAGES MOVED ANYWHERE.\n         M     R6,AHUNDRED       TIMES ONE HUNDRED FOR CENTISCONDS.\n         DR    R6,R1             GET PAGES PER SECOND.\n         LR    R6,R7             SAVE THE ANSWER.\n         LA    R7,128(,R7)       ROUND UPWARDS.\n         SRA   R7,8              CONVERT PAGE COUNT TO MEGABYTES.\n         CLI   GSTGSCAL+1,9      ALREADY EXCEEDED \"LOW\" SCALING FACTOR?\n         BH    GTOTALOK          YES, DON'T CHECK IT AGAIN.\n         CHI   R7,42             NO, MORE THAN 42 MEGABYTES PER SECOND?\n         BH    GSCLREDO          YES, SET \"HIGH\" SCALING FACTOR.\nGTOTALOK CVD   R7,WORK           GET TOTAL MEGABYTES IN DECIMAL.\n         LR    R7,R6             RESTORE UNROUNDED VALUE.\n         LA    R15,X'07'         LOAD GRAPH CODE FOR VIO SLOTS.\n         BAS   R14,GRAFSTOR      PLOT IT.\n         L     R7,GTOTNVIO\n         M     R6,AHUNDRED       TIMES ONE HUNDRED FOR CENTISCONDS.\n         DR    R6,R1             GET PAGES PER SECOND.\n         LA    R15,X'03'         LOAD GRAPH CODE FOR NON-VIO SLOTS.\n         BAS   R14,GRAFSTOR      PLOT IT.\n         L     R7,GTOTXPND\n         M     R6,AHUNDRED       TIMES ONE HUNDRED FOR CENTISCONDS.\n         DR    R6,R1             GET PAGES PER SECOND.\n         LA    R15,X'06'         LOAD GRAPH CODE FOR EXTENDED FRAMES.\n         BAS   R14,GRAFSTOR      PLOT IT.\n         L     R7,GTOTREAL\n         M     R6,AHUNDRED       TIMES ONE HUNDRED FOR CENTISCONDS.\n         DR    R6,R1             GET PAGES PER SECOND.\n         LA    R15,X'04'         LOAD GRAPH CODE FOR REAL PAGE FRAMES.\n         BAS   R14,GRAFSTOR      PLOT IT.\n         BAS   R14,GNUMSTOR      SHOW NUMERIC VALUE IF POSSIBLE.\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\nGRFJBDON CLI   GDSPTYPE,C'A'     IS IT DISPLAY TYPE WITHOUT I/O H/W?\n         BE    GRFSUMRY          YES, GO STRAIGHT TO THE SUMMARY.\n         MVC   0(LL-79,R2),MEDX\n         MVC   LL-79(79,R2),GRFKEYIO\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),GSUBHDG2\n         TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\n         ICM   R3,15,GRFDVMAX    GET MAXIMUM I/O DEVICE DETAIL LINES.\n         BZ    GRFDVDON          SKIP WHOLE CATEGORY IF ZERO.\n         LA    R8,GRFDENTS       POINT TO I/O DEVICE DISPLAY LIST.\n         USING GRFDVTBL,R5\nGRFDEVLP ICM   R5,15,0(R8)       POINT TO DEVICE ENTRY TO DISPLAY.\n         BZ    GRFDVDON          ZERO ENTRY OR END OF DEVICE LIST.\n         MVC   0(LL-79,R2),LOWX\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-69(3,R2),GRFDVNAM    PUT UCB NAME INTO DISPLAY LINE.\n         CLI   GRFDVNAM,C'U'           4-DIGIT DEVICE NUMBER?\n         BNE   GDEVNAME                NO, CONTINUE.\n         UNPK  LL-70(5,R2),GRFDVNUM(3) YES, SHOW FOUR DIGITS.\n         TR    LL-70(4,R2),HEX-C'0'\n         MVI   LL-66(R2),C' '\nGDEVNAME MVC   LL-77(6,R2),GRFDVVOL    SHOW VOLUME SERIAL NUMBER.\n         MVC   LL-65(8,R2),GRFDVJOB    MOVE IN JOBNAME.\n         TM    GRFDVFLG,GRFDVONL IS THE DEVICE ONLINE?\n         BO    GDEVONLN          YES, CONTINUE.\n         MVC   LL-76(5,R2),=CL5'<OFF>'\n         B     GNOTSHRD          NO, THIS LINE HAS NOW BEEN LABELLED.\nGDEVONLN TM    GRFDVFLG,GRFDVPAG IS THIS A PAGING VOLUME?\n         BZ    GNOTPAGE          NO.\n         MVI   LL-79(2),C'P'     YES.\nGNOTPAGE TM    GRFDVFLG,GRFDVSHR IS THIS A SHARED VOLUME?\n         BZ    GNOTSHRD          NO.\n         MVI   LL-78(R2),C'*'    YES.\nGNOTSHRD TM    GRFDVFLG,GRFDVDYN DYNAMIC I/O DATA PRESENT?\n         BZ    GDEVLBLD          NO.\n         L     R7,GRFDVCYL       LOAD CYLINDER NUMBER OF DYNAMIC SEEK.\n         CVD   R7,WORK\n         MVC   90(6,R2),ED5\n         ED    90(6,R2),WORK+5\n         MVC   LL-56(4,R2),92(R2) DISPLAY CYLINDER NUMBER.\nGDEVLBLD TR    LL-79(79,R2),XLATETBL\n         MVI   LL-52(R2),X'3B'\n         MVC   LL-51(1,R2),GCHAR\n         MVC   LL-50(50,R2),LL-51(R2)\n         MVI   LL-33(R2),X'3B'\n         MVC   LL-8(1,R2),GCHAR100\n         ICM   R14,15,GRFDVSMP   LOAD THE DEVICE SAMPLE COUNT CHANGE.\n         BZ    GDONRESP          AVOID S0C9 ABEND FROM DIVIDE BY ZERO.\n         SLR   R6,R6\n         L     R7,GRFDVPND       GET TOTAL DEVICE BUSY TIME.\n         SLDL  R6,7              CONVERT TO MICROSECONDS.\n         CR    R6,R14            WILL RESULT FIT IN A FULLWORD?\n         BNL   GDONRESP          NO, AVOID S0C9 ABEND.\n         DR    R6,R14            GET BUSY TIME PER I/O.\n         SLR   R6,R6\n*        LA    R7,500(,R7)       ADD FOR ROUNDING.\n         D     R6,ONEGRAND       CONVERT TO MILLISECONDS PER I/O.\n         CVD   R7,WORK           SAVE MILLISECONDS IN DECIMAL.\n         LA    R15,X'03'         LOAD GRAPH CODE FOR RESPONSE TIME.\n         BAS   R14,GRAFRESP      PLOT IT.\n         LR    R7,R15            RESTORE UNROUNDED VALUE.\n         OC    WORK(6),WORK      RESPONSE TIME LESS THAN ONE SECOND?\n         BNZ   GDEVSLOW          NO, THIS SEEMS TO BE A SLOW DEVICE.\n         CLI   WORK+6,5          RESPONSE TIME LESS THAN 50MS?\n         BNL   GDEVSLOW          NO, THIS SEEMS TO BE A SLOW DEVICE.\n         MVC   LL-36(3,R2),ED3+1 SHOW RESPONSE TIME IN NUMERICS.\n         ED    LL-37(4,R2),WORK+6\n         LA    R15,LL-34(R2)     POINT TO LAST NUMERIC DIGIT.\n         B     GDSPRSCR          GO CONVERT NUMERICS TO SUPERSCRIPTS.\nGDEVSLOW MVI   LL-33(R2),C'|'    AVOID GRAPH OVERRUN TO NEXT GRAPH.\n         MVC   0(LL-79,R2),HIGHX HIGHLIGHT SUCH A SLOW DEVICE.\n         MVC   LL-50(7,R2),ED7+1 SHOW RESPONSE TIME IN NUMERICS.\n         ED    LL-51(8,R2),WORK+4\n         LA    R15,LL-44(,R2)    POINT TO LAST NUMERIC DIGIT.\nGDSPRSCR BAS   R14,GSPRSCRP      CONVERT NUMERICS TO SUPERSCRIPTS.\nGDONRESP SLR   R6,R6\n         L     R7,GRFDVPND\n         SLDL  R6,7              CONVERT TO MICROSECONDS.\n         D     R6,WORK2          DIVIDE ACTIVITY TIME BY ELAPSED TIME.\n         C     R7,TENGRAND       OVER 100%?\n         BH    GDEVPCOK          YES, DON'T DISPLAY ACTUAL PERCENTAGE.\n         CVD   R7,WORK\n         IC    R15,LL-8(,R2)     SAVE DISPLAY BYTE.\n         MVC   LL-8(8,R2),G1PNTMSK\n         ED    LL-8(7,R2),WORK+5\n         STC   R15,LL-8(,R2)     RESTORE DISPLAY BYTE.\n         CHI   R7,500            LESS THAN 5%?\n         BNL   GDEVPCOK          NO.\n         MVC   0(LL-79,R2),LOWX  YES, FORCE LOW INTENSITY AND TURQUOISE\n*                                SINCE LARGE RESPONSE TIME NOT A WORRY.\nGDEVPCOK LA    R15,X'02'         LOAD GRAPH CODE FOR REQUEST PENDING.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         SLR   R6,R6\n         L     R7,GRFDVDIS\n         SLDL  R6,7              CONVERT TO MICROSECONDS.\n         D     R6,WORK2          DIVIDE ACTIVITY TIME BY ELAPSED TIME.\n         LA    R15,X'06'         LOAD GRAPH CODE FOR DISCONNECT.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         SLR   R6,R6\n         L     R7,GRFDVCON\n         LR    R14,R7\n         SLL   R14,1             DOUBLE THE DEVICE CONNECT TIME.\n         C     R14,GRFDVPND      CONNECT LESS THAN HALF OF ACTIVITY?\n         BL    GDCONNOK          YES, PROCEED.\n         MVC   0(LL-79,R2),LOWX  NO, FORCE LOW INTENSITY AND TURQUOISE\n*                                SINCE LARGE RESPONSE TIME IS EXPECTED.\nGDCONNOK SLDL  R6,7              CONVERT TO MICROSECONDS.\n         D     R6,WORK2          DIVIDE ACTIVITY TIME BY ELAPSED TIME.\n         LA    R15,X'05'         LOAD GRAPH CODE FOR CONNECT.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\n         LA    R8,8(,R8)         POINT TO NEXT GRFDENTS ENTRY.\n         BCT   R3,GRFDEVLP       PROCESS NEXT ADDRESS SPACE.\n         DROP  R5                GRFDVTBL.\nGRFDVDON ICM   R1,15,WORK2+4     LOAD CHANNEL SAMPLE COUNT.\n         BZ    GRFSUMRY          AVOID S0C9 ABEND IF ZERO.\n         ICM   R3,15,GRFCHMAX    GET MAXIMUM CHANNEL PATH DETAIL LINES.\n         BZ    GRFSUMRY          SKIP WHOLE CATEGORY IF ZERO.\n         LA    R8,GRFCENTS       POINT TO CHANNEL PATH DISPLAY LIST.\nGRFCHNLP ICM   R7,15,0(R8)       POINT TO CHANNEL ENTRY TO DISPLAY.\n         BZ    GRFSUMRY          ZERO ENTRY OR END OF DEVICE LIST.\n         MVC   0(LL-79,R2),LOWX\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-77(5,R2),=CL5'CHPID'\n         SRL   R7,24             GET CHANNEL PATH NUMBER.\n         STC   R7,WORK\n         SLL   R7,2              GET INDEX INTO TABLE.\n         AL    R7,GRFCHNAD       POINT TO CHANNEL BUSY COUNT.\n         L     R7,0(,R7)         LOAD THE CHANNEL BUSY COUNT.\n         M     R6,TENGRAND       PREPARE FOR PERCENTAGE.\n         DR    R6,R1             DIVIDE BY CHANNEL SAMPLE COUNT.\n         UNPK  LL-71(3,R2),WORK(2)\n         TR    LL-71(2,R2),HEX-C'0'\n         MVI   LL-69(R2),C' '    LOAD CHPID NUMBER INTO DISPLAY LINE.\n         MVI   LL-33(R2),X'3B'\n         MVC   LL-32(1,R2),GCHAR\n         MVC   LL-31(31,R2),LL-32(R2)\n         MVC   LL-8(1,R2),GCHAR100\n         C     R7,TENGRAND       OVER 100%?\n         BH    GDEVPCOK          YES, DON'T DISPLAY ACTUAL PERCENTAGE.\n         CVD   R7,WORK\n         IC    R6,LL-8(,R2)      SAVE DISPLAY BYTE.\n         MVC   LL-8(8,R2),G1PNTMSK\n         ED    LL-8(7,R2),WORK+5\n         STC   R6,LL-8(,R2)      RESTORE DISPLAY BYTE.\n         LA    R15,X'05'         LOAD GRAPH CODE FOR CONNECT.\n         BAS   R14,GRAFPLOT      PLOT IT.\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\n         LA    R8,4(,R8)         POINT TO NEXT GRFCENTS ENTRY.\n         BCT   R3,GRFCHNLP       PROCESS NEXT CHANNEL PATH.\nGRFSUMRY MVC   0(LL-79,R2),=X'2841001BF0402842F1'\n         MVC   LL-79(79,R2),GMEMSMRY\n         L     R1,RCEADDR        POINT TO THE RCE.\n         USING RCE,R1\n         ICM   R7,15,RCEESINU    GET USED EXPANDED STORAGE FRAME COUNT.\n         BZ    GNOESTOR          NO EXPANDED STORAGE IS IN USE.\n         M     R6,AHUNDRED       PREPARE FOR PERCENTAGE.\n         D     R6,RCEESPL        DIVIDE BY EXPANDED STOR. FRAME COUNT.\n         CVD   R7,WORK\n         MVC   LL-67(4,R2),ED3   DISPLAY EXPANDED STORAGE UTILIZATION.\n         ED    LL-67(4,R2),WORK+6\n         MVI   LL-63(R2),C'%'    INDICATE PERCENTAGE.\n         DROP  R1                RCE.\nGNOESTOR L     R1,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R1\n         L     R1,RMCTMCT        POINT TO THE MCT.\n         DROP  R1                RMCT.\n         USING MCT,R1\n*                                ANY SQA SHORTAGE?\n         TM    MCTSFLGS,MCTSQA1+MCTSQA2\n         BZ    GSQADONE          NO.\n         MVC   0(LL-79,R2),=X'2841F21BF8402842F2'  RED AND REVERSE.\n         MVC   LL-35(4,R2),=C'LVL1'\n         TM    MCTSFLGS,MCTSQA2  LEVEL 2 SQA SHORTAGE?\n         BZ    GSQADONE          NO.\n         MVI   LL-32(R2),C'2'    YES.\nGSQADONE L     R15,CVTPTR(,0)    POINT TO THE CVT.\n         USING CVT,R15\n         L     R15,CVTGDA        POINT TO THE GDA.\n         DROP  R15               CVT.\n         USING GDA,R15\n*                                ANY CSA SHORTAGE?\n         TM    GDAFLGS,GDALOW1+GDALOW2\n         BZ    GCSADONE          NO.\n         MVC   0(LL-79,R2),=X'2841F21BF8402842F2'  RED AND REVERSE.\n         MVC   LL-25(4,R2),=C'LVL1'\n         TM    GDAFLGS,GDALOW2   LEVEL 2 CSA SHORTAGE?\n         BZ    GCSADONE          NO.\n         MVI   LL-22(R2),C'2'    YES.\n         DROP  R15               GDA.\n*                                ANY AUXILIARY STORAGE SHORTAGE?\nGCSADONE TM    MCTOFLGS,MCTASM1+MCTASM2\n         BZ    GAUXDONE          NO.\n         MVC   0(LL-79,R2),=X'2841F21BF8402842F2'  RED AND REVERSE.\n         MVC   LL-15(4,R2),=C'LVL1'\n         TM    MCTOFLGS,MCTASM2  LEVEL 2 AUX SHORTAGE?\n         BZ    GAUXDONE          NO.\n         MVI   LL-12(R2),C'2'    YES.\n*                                ANY REAL PAGEABLE STORAGE SHORTAGE?\nGAUXDONE TM    MCTCFLGS,MCTRLSHT+MCTB16SH\n         BZ    GMEMDONE          NO.\n         MVC   0(LL-79,R2),=X'2841F21BF8402842F2'  RED AND REVERSE.\n         MVC   LL-4(4,R2),=C'<16M'\n         TM    MCTCFLGS,MCTRLSHT REAL STORAGE SHORTAGE ABOVE 16M LINE?\n         BZ    GMEMDONE          NO, SHORTAGE IS ONLY BELOW THE LINE.\n         MVC   LL-4(4,R2),=C'YES!'\n         DROP  R1                MCT.\nGMEMDONE TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        ADJUST BUFFER ADDRESS.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         C     R2,PAGEND         IS THE SCREEN NOW FILLED?\n         BNL   GRFILLED          YES.\n         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.\n         LA    R2,4(,R2)         ADJUST BUFFER POINTER.\nGRFILLED TIME  DEC               GET TIME OF DAY FOR DISPLAY TIMESTAMP.\n         SLL   R1,8              SHIFT OUT HIGH-ORDER ZEROS.\n         SRDL  R0,8              RE-ALIGN THE CONTENTS.\n         STM   R0,R1,WORK        SUPPLY DATE TIMESTAMP IN THE HEADING.\n         L     R1,SMCAADDR       POINT TO THE SMCA.\n         MVC   HEADINGG+36(4),16(R1) SHOW THE SYSTEM IDENTIFIER.\n         MVC   HEADING,HEADINGG  LOAD GRAPHIC ACTIVITY DISPLAY HEADING.\n         TR    HEADING,XLATETBL  HANDLE BAD SYSTEM IDENTIFIER.\n         MVC   HEADING+46(22),GRAFMASK\n         ED    HEADING+46(22),WORK+1\n         MVC   HEADING+69(1),GDSPMODE\n         L     R1,CRNTOPTN       POINT TO OPTION \"G\" IN LOOK-UP TABLE.\n         OI    1(R1),X'01'       SCREEN PRINT NOW SUPPORTED.\n         L     R9,CCTADDR        GET CCT ADDRESS.\n         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.\n         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.\nGREFRESH LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         LR    R0,R2             POINT TO END OF SCREEN BUFFER.\n         SR    R0,R1             GET SCREEN BUFFER LENGTH.\n         MVC   GDWNCNT,DOWNCNTR  REMEMBER IF AUTO UPDATE OUTPUT.\nPUTSCRNG BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    GRFENTER          YES.\n         CLI   GDWNCNT,C' '      WERE WE IN AUTO REFRESH MODE?\n         BH    GRFENTER          YES.\n         TM    MODESW2,XFLG      NO, SUBROUTINE EXIT REQUIRED?\n         BZ    NOTEXITG          NO, PROCESS SUBCOMMAND.\n         MVI   TGETFLG,TGETFLGA  RESTORE TGET TYPE FOR OTHER ROUTINES.\n         OC    GRAFLAGS,GGEOKBIT RESTORE GE SETTING FOR OTHER ROUTINES.\n         L     R15,PRNTADDR      GET ADDRESSABILITY TO TRANSLATE TABLE.\n         USING SCRNPRNT,R15\n         XC    GRFXLATE(16),PRTXLATE RESTORE OLD CHARACTERS FOR GRAPHIC\n         XC    PRTXLATE(16),GRFXLATE             SUBSTITUTION.\n         XC    GRFXLATE(16),PRTXLATE\n         DROP  R15               SCRNPRNT.\n         LM    R0,R1,GRFFMRS     LOAD FREEMAIN REGISTERS.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nNOTEXITG CHI   R15,4             ANY INPUT RECEIVED FROM TERMINAL YET?\n         BNE   GRFPARSE          YES, PROCESS IT.\n         ICM   R0,3,GLOSSPG#     CURRENTLY SHOWING A GLOSSARY PANEL?\n         BZ    GRAFCONT          NO, CONTINUE AS USUAL.\n         MVI   GPNLMODE,C'1'     YES, SO REMEMBER PANEL IS ON SHOW.\nGRAFCONT TM    GRFSTART,X'80'    VALID SAMPLE START TIME?\n         BZ    GRFSAMPL          YES, CONTINUE SAMPLING.\n         B     REDOGRAF          NO, COMMENCE A NEW SAMPLE CYCLE.\nGRFPARSE CLI   INBUFF,1          PF1/13?\n         BE    GIVEHLPG          YES, HELP.\n         CLI   INBUFF,5          PF5/17?\n         BE    GRPHZOOM          YES, TOGGLE \"GRAPH PAPER\" BACKGROUND.\n         CLI   INBUFF,10         PF10/22?\n         BE    GRAFRLSE          YES, RELEASE FOR DYNAMIC UPDATE.\n         CLI   INBUFF,11         PF11/23?\n         BE    GRAFHOLD          YES, HOLD DYNAMIC UPDATING.\nCMDSCANG CLI   INCHARS,C'F'      FREEZE DISPLAY REQUESTED?\n         BE    GRAFHOLD          YES.\n         CLI   INCHARS,C'R'      RELEASE DISPLAY REQUESTED?\n         BE    GRAFRLSE          YES.\n         CLI   INCHARS,C' '      CONTINUE OR ZOOM REQUESTED?\n         BE    GRPHZOOM          YES, PROCESS IT.\n         CLI   INCHARS,C'A'      DISPLAY ADDRESS SPACES ONLY?\n         BE    GRFTYPEA          YES, PROCESS IT.\n         CLI   INCHARS,C'C'      DISPLAY CHANNEL PATHS ONLY?\n         BE    GRFTYPEC          YES, PROCESS IT.\n         CLI   INCHARS,C'D'      DISPLAY DEVICES ONLY?\n         BE    GRFTYPED          YES, PROCESS IT.\n         CLI   INCHARS,C'I'      DISPLAY I/O HARDWARE ONLY?\n         BE    GRFTYPEI          YES, PROCESS IT.\n         CLI   INCHARS,C'O'      DISPLAY \"OVERVIEW\"?\n         BE    GRFTYPEO          YES, PROCESS IT.\n         CLI   INCHARS,C'G'      \"GRAPH PAPER\" TOGGLE?\n         BNE   GIVEHLPG          NO, DISPLAY HELP PANEL.\nGRPHPAPR XI    GCHAR,C' '+X'09'  YES, ALTER BACKGROUND CHARACTERS.\n         XI    GCHAR100,X'67'    = C'\u00a6' XOR X'0D'.\n         XI    GRAFLAGS,GEOK     TOGGLE GRAPHIC ESCAPE ACTIVATION.\nGRFENTER MVI   GPNLMODE,0        TURN FIXED PANEL DISPLAY FLAG OFF.\n         TM    GRFSTART,X'C0'    INITIAL SELECTION OF OPTION \"G\"?\n         BO    GRFSUMRY          YES, UPDATE SCREEN TO SHOW ACCEPTANCE.\n*        CLI   GDSPMODE,C'F'     MANUAL TRIGGER TO UPDATE DISPLAY?\n*        BE    GRAFSYNC          YES, GO SYNCHRONIZE SCREEN WITH INPUT.\n*        LA    R0,GCONTLEN       NO, RESET SCREEN PRIMARY INPUT AREA.\n*        LA    R1,GRESETIN\n*        B     PUTSCRNG\n         B     GRAFSYNC          GO SYNCHRONIZE SCREEN WITH INPUT.\nGRPHZOOM CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n         BE    GZOOMOFF          YES, NO NOT PERFORM ANY ZOOM.\n         SLR   R7,R7             CLEAR FOR INSERT.\n         ICM   R7,1,INBUFF+1     GET RELATIVE LINE NUMBER OF CURSOR.\n         BZ    GZOOMOFF          IF HEADING LINE THEN CALL OFF ZOOM.\n         LA    R4,BUFFER-LL      POINT TO BEFORE FIRST DETAIL LINE.\nGZSCANLP LA    R4,LL(,R4)        POINT TO NEXT DETAIL LINE.\n         CLI   0(R4),X'3C'       PAST DISPLAYED DETAIL LINES?\n         BE    GZOOMOFF          YES, CALL OFF THE ZOOM.\n         BCT   R7,GZSCANLP       NO, POINT TO NEXT LINE IF APPLICABLE.\n         CLI   LL-52(R4),X'3B'   I/O DEVICE ZOOM REQUEST?\n         BE    GDEVZOOM          YES, GO CHECK FOR DEVICE NUMBER.\n         CLI   LL-59(R4),X'3B'   ADDRESS SPACE ZOOM REQUEST?\n         BNE   GZOOMOFF          NO, CALL OFF THE ZOOM.\n         L     R15,=A(STATSJOB)  POINT TO OPTION \"J\" JOB NAME AREA.\n         MVC   4(4,R15),LL-70(R4) LOAD ASID IN SECOND HALF OF JOB NAME.\n         MVC   0(4,R15),STARS    LOAD ASTERISKS IN FIRST HALF OF NAME.\n         MVC   INBUFF(L'INBUFF+L'INCHARS),BLANKS  CLEAR INPUT BUFFER.\n         MVI   INBUFF,X'7C'      SIMULATE PFK 12.\n         MVI   INCHARS,C'J'      SIMULATE OPTION \"J\" REQUEST.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     PUTSCRNG          PERFORM INTER-OPTION JUMP.\nGDEVZOOM L     R15,=A(THEUCBAD)  POINT TO OPTION \"U\" UCB NAME AREA.\n         MVI   0(R15),X'DD'      INDICATE INTER-OPTION ZOOM TRANSFER.\n         MVC   THEUNIT-THEUCBAD(4,R15),LL-70(R4)     SUPPLY UCB NAME.\n         MVC   INBUFF(L'INBUFF+L'INCHARS),BLANKS   CLEAR INPUT BUFFER.\n         MVI   INBUFF,X'7C'      SIMULATE PFK 12.\n         MVI   INCHARS,C'U'      SIMULATE OPTION \"U\" REQUEST.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         CLI   LL-70(R4),C' '    FOUR-DIGIT DEVICE NUMBER?\n         BH    PUTSCRNG          YES, PERFORM INTER-OPTION JUMP.\n         MVI   THEUNIT-THEUCBAD(R15),C'0'\n         B     PUTSCRNG          PERFORM INTER-OPTION JUMP.\nGZOOMOFF CLI   INBUFF,5          PF5/17?\n         BE    GRPHPAPR          YES, GRAPH PAPER TOGGLE REQUEST.\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    GRFENTER          YES, PROCESS IT.\n         B     CMDSCANG          NO, SCAN FOR LOCAL SUBCOMMAND.\nGRFTYPEA MVI   GDSPTYPE,C'A'     DISPLAY ONLY ADDRESS SPACES.\n         L     R1,LINES          GET THE NUMBER OF SCREEN LINES.\n         AHI   R1,-6             GET NUMBER OF DETAIL DISPLAY LINES.\n         ST    R1,GRFJBMAX       SET THE NEW MAXIMUMS.\n         MVI   GRFDVMAX+3,0\n         MVI   GRFCHMAX+3,0\n         B     GRFENTER\nGRFTYPEC MVI   GDSPTYPE,C'C'     DISPLAY ONLY CHANNEL PATHS.\n         L     R1,LINES          GET THE NUMBER OF SCREEN LINES.\n         AHI   R1,-5             GET NUMBER OF DETAIL DISPLAY LINES.\n         ST    R1,GRFCHMAX       SET THE NEW MAXIMUMS.\n         MVI   GRFJBMAX+3,0\n         MVI   GRFDVMAX+3,0\n         B     GRFENTER\nGRFTYPED MVI   GDSPTYPE,C'D'     DISPLAY ONLY DEVICES.\n         L     R1,LINES          GET THE NUMBER OF SCREEN LINES.\n         AHI   R1,-5             GET NUMBER OF DETAIL DISPLAY LINES.\n         ST    R1,GRFDVMAX       SET THE NEW MAXIMUMS.\n         MVI   GRFJBMAX+3,0\n         MVI   GRFCHMAX+3,0\n         B     GRFENTER\nGRFTYPEI MVI   GDSPTYPE,C'I'     DISPLAY ONLY DEVICES & CHANNEL PATHS.\n         L     R1,LINES          GET THE NUMBER OF SCREEN LINES.\n         AHI   R1,-11            GET NUMBER OF DETAIL DISPLAY LINES.\n         ST    R1,GRFDVMAX       SET THE NEW MAXIMUMS.\n         MVI   GRFJBMAX+3,0\n         MVI   GRFCHMAX+3,6\n         B     GRFENTER\nGRFTYPEO MVI   GDSPTYPE,C'O'     DISPLAY AN ALL TYPES \"OVERVIEW\".\n         MVC   GRFJBMAX+2(2),GRFJBCNT\n         MVC   GRFDVMAX+2(2),GRFDVCNT\n         MVC   GRFCHMAX+2(2),GRFCHCNT\n         B     GRFENTER\nGRAFSYNC TM    GRFSTART,X'80'    VALID SAMPLE START TIME?\n         BO    REDOGRAF          NO, COMMENCE A NEW SAMPLE CYCLE.\n         B     GRFGRAPH          YES, UPDATE SCREEN WITH LATEST DATA.\nGRAFHOLD MVI   GDSPMODE,C'F'     MANUAL INPUT NEEDED FOR NEW SCREEN.\n         L     R1,CRNTOPTN       POINT TO OPTION \"G\" IN LOOK-UP TABLE.\n         OI    1(R1),X'04'       NUMERIC COMMAND NOW SUPPORTED.\n         TM    GRFSTART,X'C0'    INITIAL SELECTION OF OPTION \"G\"?\n         BO    GRFSUMRY          YES, UPDATE SCREEN TO SHOW ACCEPTANCE.\n         B     GRFRESET          NO, RESET SCREEN PRIMARY INPUT AREA.\nGRAFRLSE MVI   GDSPMODE,C'R'     NEW SCREEN AUTOMATICALLY SHOWN.\n         L     R1,CRNTOPTN       POINT TO OPTION \"G\" IN LOOK-UP TABLE.\n         NI    1(R1),X'FB'       NUMERIC COMMAND NOW NOT SUPPORTED.\n         TM    GRFSTART,X'C0'    INITIAL SELECTION OF OPTION \"G\"?\n         BO    GRFSUMRY          YES, UPDATE SCREEN TO SHOW ACCEPTANCE.\nGRFRESET ICM   R0,8,GPNLMODE     REMEMBER OLD FIXED PANEL DISPLAY FLAG.\n         MVI   GPNLMODE,0        TURN FIXED PANEL DISPLAY FLAG OFF.\n         MVC   HEADING+69(1),GDSPMODE   ENSURE HEADING IS UP-TO-DATE.\n         BM    GREFRESH          AVOID PARTIAL UPDATE TO PANEL.\n         MVC   GRESETMD,GDSPMODE\n         LA    R0,GRESETLN       RESET SCREEN PRIMARY INPUT AREA\n         LA    R1,GRESETIN         AND UPDATE DISPLAY MODE FLAG.\n         B     PUTSCRNG\nGIVEHLPG MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     PUTSCRNG          GO DISPLAY HELP PANEL.\n         SPACE\n         USING GRFASTBL,R5\nGRFASINT L     R15,GRFASTOD      GET LAST ENTRY UPDATE TIME.\n         ST    R0,GRFASTOD       STORE THE TIME OF ALL THIS.\n         ICM   R1,15,0(R4)       LOAD ASVTE.\n         BMR   R14               EXIT IF ENTRY WITH NO ADDRESS SPACE.\n         USING ASCB,R1\n         MVC   GRFASNUM,ASCBASID COPY THE ASID.\n         ICM   R6,15,ASCBJBNI    LOAD POINTER TO JOB NAME.\n         BNZ   GOTASNMI          GOT IT.\n         ICM   R6,15,ASCBJBNS    LOAD POINTR TO START/MOUNT/LOGON NAME.\n         BNZ   GOTASNMI          GOT IT.\n         LA    R6,STARTING       POINT TO DEFAULT ADDRESS SPACE NAME.\nGOTASNMI MVC   GRFASNAM,0(R6)    SUPPLY AN ADDRESS SPACE NAME.\n         LM    R6,R7,ASCBEJST    LOAD JOB STEP TCB CPU TIME.\n         SRDL  R6,12             CONVERT TO MICROSECONDS.\n         ST    R7,GRFASTCB       SAVE IT.\n         LM    R6,R7,ASCBSRBT    LOAD JOB STEP SRB CPU TIME.\n         SRDL  R6,12             CONVERT TO MICROSECONDS.\n         ST    R7,GRFASSRB       SAVE IT.\n         MVC   GRFASIOC,ASCBDCTI SAVE CHANNEL CONNECT TIME.\n         L     R6,ASCBRSME       POINT TO THE RAX.\n         USING RAX,R6\n         MVC   GRFAESTG,RAXESCT  COPY EXPANDED STORAGE FRAME COUNT.\n         MVC   GRFAREAL,RAXFMCT  COPY ALLOCATED STORAGE FRAME COUNT.\n         DROP  R6                RAX.\n         MVI   GRFASFLG,0        CLEAR CLASSIFICATION FLAGS.\n         L     R6,336(,R1)       POINT TO THE ASSB.\n         USING ASSB,R6\n         ICM   R7,15,ASSBOASB    UNIX USED BY THIS ASID?\n         BZ    *+8               NO.\n         OI    GRFASFLG,GRFASUSS YES, FLAG UNIX USAGE.\n         ICM   R7,15,ASSBTASB    TCP/IP USED BY THIS ASID?\n         BNP   *+8               NO.\n         OI    GRFASFLG,GRFASTCP YES, FLAG TCP/IP USAGE.\n         MVC   GRFAVSLT,ASSBVSC  COPY VIO SLOT COUNT.\n         MVC   GRFANSLT,ASSBNVSC COPY NON-VIO SLOT COUNT.\n         DROP  R6                ASSB.\n         L     R6,ASCBOUCB       POINT TO THE OUCB.\n         USING OUCB,R6\n         MVC   GRFASPGN,OUCBNPG  LOAD PERFORMANCE GROUP NUMBER.\n         MVC   GRFASCLS,OUCBCLS  LOAD TRANSACTION (JOB) CLASS.\n         MVC   GRFASNDP,OUCBNDP  LOAD NEW DISPATCHING PRIORITY.\n         DROP  R6                OUCB.\n         ICM   R7,15,ASCBTSB     TSO USER?\n         BZ    *+8               NO.\n         OI    GRFASFLG,GRFASTSU YES, FLAG THIS.\n         L     R6,ASCBOUXB       POINT TO THE OUXB.\n         USING OUXB,R6\n         L     R7,OUXBPIN        GET PRIVATE PAGE-IN COUNT.\n         A     R7,OUXBVAMI       ADD VIO PAGE-IN COUNT.\n         A     R7,OUXBCAPI       ADD COMMON PAGE-IN COUNT.\n         ST    R7,GRFASPGF       SAVE \"PAGE FAULT\" COUNT.\n         DROP  R6                OUXB.\n         BR    R14               RETURN TO CALLER.\n         DROP  R5                GRFASTBL.\n         SPACE\nGRAFPLOT SLR   R6,R6             PREPARE FOR DIVIDE.\n         D     R6,AHUNDRED       GET INTEGRAL PERCENT VALUE.\n         LA    R7,2(,R7)         ROUND UPWARDS.\n         SRA   R7,2              QUARTER IT.\n         BZR   R14               DON'T PLOT ANYTHING FOR ZERO PERCENT.\n         STC   R15,LL-32(,R2)    SUPPLY GRAPHIC CODE.\n         BCTR  R7,0              DECREMENT FOR BYTE ALREADY SUPPLIED.\n         BCTR  R7,0              DECREMENT FOR EXECUTE.\n         LTR   R7,R7             MORE THAN ONE SCREEN BYTE REQUIRED?\n         BMR   R14               NO, THIS PLOT NOW COMPLETE.\n         EX    R7,GRFPLTMV       YES, SUPPLY THE REST.\n         BR    R14               NOW THIS PLOT IS COMPLETE.\nGRFPLTMV MVC   LL-31(0,2),LL-32(2)              <<< EXECUTED >>>\n         SPACE\nGRAFSTOR LA    R7,256(,R7)       ROUND UPWARDS.\n         CLI   GSTGSCAL,10       ROUNDED UPWARDS SUFFICIENTLY?\n         BL    GSTORRND          YES.\n         LA    R7,256(,R7)       NO, ROUND UPWARDS A BIT MORE.\nGSTORRND LH    R4,GSTGSCAL       GET SHIFTING SCALE FOR THIS GRAPH.\n         SRA   R7,0(R4)          CONVERT PAGE COUNT TO 2-/4-MEGABYTES.\n         BZR   R14               DON'T PLOT ANYTHING FOR ZERO MEG.\n         STC   R15,LL-58(,R2)    SUPPLY GRAPHIC CODE.\n         BCTR  R7,0              DECREMENT FOR BYTE ALREADY SUPPLIED.\n         BCTR  R7,0              DECREMENT FOR EXECUTE.\n         LTR   R7,R7             MORE THAN ONE SCREEN BYTE REQUIRED?\n         BMR   R14               NO, THIS PLOT NOW COMPLETE.\n         CHI   R7,23             OVER 100MB?\n         BNH   GRFSTGOK          NO, PLOT WILL BE OKAY.\n         LA    R7,23             YES, LIMIT PLOT TO 100MB.\nGRFSTGOK EX    R7,GRFSTGMV       YES, SUPPLY THE REST.\n         BR    R14               NOW THIS PLOT IS COMPLETE.\nGRFSTGMV MVC   LL-57(0,R2),LL-58(R2)            <<< EXECUTED >>>\n         SPACE\nGNUMSTOR OC    WORK(6),WORK      TOTAL LESS THAN 100 MEGABYTES?\n         BNZ   GGIGSTOR          NO, CATER FOR GIGABYTES.\n         CLC   LL-37(1,R2),LL-34(R2)\n         BNER  R14               UNSTABLE AREA SO LEAVE PLOT AS IS.\n         MVC   LL-36(3,R2),ED3+1 SHOW VIRTUAL MEGABYTES IN NUMERICS.\n         ED    LL-37(4,R2),WORK+6\n         B     GSTGSPSC          NOW GO MAKE THE DIGITS SUPERSCRIPTS.\nGGIGSTOR MVC   LL-38(5,R2),ED5+1 SO BIG THAT IT MUST BE SHOWN,\n         ED    LL-39(6,R2),WORK+5  EVEN IF IT MUCKS UP THE PLOT A BIT.\nGSTGSPSC LA    R15,LL-34(,R2)    POINT TO LAST NUMERIC DIGIT.\nGSPRSCRP TM    0(R15),X'F0'      NUMERIC CHARACTER?\n         BNOR  R14               NO, ALL DIGITS ARE SUPERSCRIPTS.\n         NI    0(R15),X'3F'      YES, MAP TO INTERNAL SUPERSCRIPT CODE.\n         BCTR  R15,0             POINT TO NEXT HIGHER-ORDER DIGIT.\n         B     GSPRSCRP          GO CONVERT IT IF NECESSARY.\n         SPACE\nGRAFRESP LA    R7,2(,R7)         ROUND UPWARDS.\n         SRA   R7,2              CONVERT TO 4MS PER I/O.\n         BZR   R14               DON'T PLOT ANYTHING FOR ZERO MS.\n         STC   R15,LL-51(,R2)    SUPPLY GRAPHIC CODE.\n         BCTR  R7,0              DECREMENT FOR BYTE ALREADY SUPPLIED.\n         BCTR  R7,0              DECREMENT FOR EXECUTE.\n         LTR   R7,R7             MORE THAN ONE SCREEN BYTE REQUIRED?\n         BMR   R14               NO, THIS PLOT NOW COMPLETE.\n         CHI   R7,16             OVER 72MS/IO?\n         BNH   GRFRSPOK          NO, PLOT WILL BE OKAY.\n         LA    R7,16             YES, LIMIT PLOT TO 72MS.\nGRFRSPOK EX    R7,GRFRSPMV       YES, SUPPLY THE REST.\n         BR    R14               NOW THIS PLOT IS COMPLETE.\nGRFRSPMV MVC   LL-50(0,R2),LL-51(R2)            <<< EXECUTED >>>\n         SPACE\nGRFWTIME SLR   R7,R7             ZERO ACCUMULATOR.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZR   R14               NO, CAN'T ACCESS THE LCCA.\n         ST    R14,WORK          YES, SAVE THE RETURN ADDRESS.\n         MODESET MF=(E,MDSTSUP0) GET INTO KEY ZERO FOR LCCA.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTLCCAT       POINT TO THE LCCA VECTOR TABLE.\n         DROP  R1                CVT.\n         LA    R0,16             GET MAXIMUM CPU COUNT.\nLCCALOOP ICM   R15,15,0(R1)      POINT TO LCCA OF THIS LCCAVT ENTRY.\n         BZ    LCCANEXT          ZERO POINTER SO CHECK OUT NEXT CPU.\n         USING LCCA,R15\n         LM    R4,R5,LCCAWTIM    LOAD ACCUMULATED CPU WAIT TIME.\n         DROP  R15               LCCA.\n         SRDL  R4,12             CONVERT TO MICROSECONDS.\n         ALR   R7,R5             ADD IT TO ACCUMULATOR.\nLCCANEXT LA    R1,4(,R1)         POINT TO NEXT LCCA POINTER.\n         BCT   R0,LCCALOOP\n         MODESET MF=(E,MDSTPROB) GET BACK INTO USER KEY FOR LCCA.\n         L     R14,WORK          RESTORE RETURN ADDRESS.\n         BR    R14               RETURN TO CALLER.\n         SPACE\n         DROP  R11,R10           GRAFSTAT.\n         TITLE 'GRAPHIC ACTIVITY DISPLAY - VARIABLES AND CONSTANTS'\nGRFSTART DC    F'0'              SAMPLE START TIME.\nGRFFMRS  EQU   *,8               GRAPHIC SAMPLE TABLE FREEMAIN VALUES.\nGRFFMR0  DC    F'0'              GRAPHIC SAMPLE TABLE SIZE.\nGRFFMR1  DC    A(0)              GRAPHIC SAMPLE TABLE ADDRESS.\nGRFDEVAD DC    A(0)              GRAPHIC DEVICE SECTION ADDRESS.\nGRFCHNAD DC    A(0)              GRAPHIC CHANNEL SECTION ADDRESS.\nGRFHWSIZ DC    AL2(GRFASSIZ)     ADDRESS SPACE TABLE ENTRY SIZE.\nGRFJBCNT DC    H'0'              ADDRESS SPACES FOR \"OVERVIEW\" DISPLAY.\nGRFTOTLS EQU   *,16              TOTALS FOR EACH DISPLAY.\nGRFCPUWT DC    F'0'              TOTAL WAIT STATE TIME.\nGRFCPTCB DC    F'0'              TOTAL TCB TIME.\nGRFCPSRB DC    F'0'              TOTAL SRB TIME.\nGRFCPIOC DC    F'0'              TOTAL CHANNEL CONNECT TIME.\nGTOTREAL DC    F'0'              RSM FRAME MOVES TO REAL STORAGE.\nGTOTXPND DC    F'0'              RSM FRAME MOVES TO EXPANDED STORAGE.\nGTOTNVIO DC    F'0'              ASM NON-VIO PAGE MOVES TO/FROM AUX.\nGTOTVIO  DC    F'0'              ASM VIO PAGE MOVES TO AND FROM AUX.\nGRFJBMAX DC    F'0'              MAXIMUM ADDRESS SPACES TO DISPLAY.\nGRFDVMAX DC    F'0'              MAXIMUM DEVICES TO DISPLAY.\nGRFCHMAX DC    F'0'              MAXIMUM CHANNEL PATHS TO DISPLAY.\nGRFJENTS DC    XL152'00'         UP TO 38 ADDRESS SPACE LINES.\n         DC    F'-1'\nGRFDENTS DC    XL152'00'         UP TO 38 I/O DEVICE LINES.\nGRFDENT2 DC    XL152'00'\n         DC    F'-1'\nGRFCENTS DC    XL152'00'         UP TO 38 CHANNEL PATH LINES.\n         DC    F'-1'\nGRFDVCNT DC    H'0'              DEVICES FOR \"OVERVIEW\" DISPLAY.\nGRFCHCNT DC    H'0'              CHANNEL PATHS FOR \"OVERVIEW\" DISPLAY.\nGSCNWORK DC    XL100'00'         UCBSCAN WORKAREA.\nGSCNPRFX DC    XL48'00'          UCBSCAN UCB PREFIX AREA.\nGSCNUCB  DC    XL48'00'          UCBSCAN UCB BASE AREA.\nGSCNCMXT DC    XL64'00'          UCBSCAN UCB COMMON EXTENSION AREA.\nGRFXLATE DC    XL16'40615F964E4A6DA54B404B4B4B6A4B4B'\nGSTGSCAL DC    H'10'             BITS TO SHIFT FOR STORAGE GRAPH.\nG1PNTMSK DC    XL8'402021204B20206C'\nGRAFMASK DC    XL22'4021207A20207A20204B202040D6D540202061202020'\nGGEOKBIT DC    X'00'             GEOK SETTING SAVE AREA.\nGCHAR    DC    C' '              \"GRAPH PAPER\" BACKGROUND.\nGCHAR100 DC    C'\u00a6'              \"GRAPH PAPER\" BACKGROUND AT 100% MARK.\nGDSPMODE DC    C'R'              OPTION \"G\" DISPLAY MODE.\nGDSPTYPE DC    C'O'              OPTION \"G\" DISPLAY TYPE.\nGWLMMODE DC    C'C'              SYSTEM WORKLOAD MANAGER MODE.\nGPNLMODE DC    X'00'             FIXED PANEL DISPLAY FLAG.\nGDWNCNT  DC    C' '              PREVIOUS DOWNCNTR VALUE ECHO.\nGCLSLBLS DC    C'UNXTCPTSU'\nHEADINGG DC    CL71'GRAPHIC ACTIVITY DISPLAY FOR SYSTEM ???? AS AT HH:M+\n               M:SS.SS ON YY/DDD<?>'\nGRFKEYAS EQU   *,79\n         DC    C'STOR:',X'04',C'=REAL ',X'06',C'=XPND ',X'03'\n         DC    C'=AUX ',X'07',C'=VIO-AUX  TIMES:',X'04'\n         DC    C'=TCB ',X'06',C'=SRB ',X'05',C'=CHAN ',X'0A'\n         DC    C'=PGWT ',X'02',C'=CPU-OVRHD'\nGRFKEYIO EQU   *,79\n         DC    C'DEV/CHPID TIMES: '\n         DC    X'03',C'=RESPONSE ',X'05',C'=CONNECT ',X'06'\n         DC    C'=SUBCHANNEL-DISCONNECT ',X'02',C'=REQUEST-PENDING'\nGSUBHDG1 DC    CL79' JOBNAME ASID DP PGN ---2+0--4+0--6+0--8+0--MB ---2+\n               +0--4+0--6+0--8+0--100--120%'\nGSUBHDG2 DS    0CL79\n         DC    C' I/O-HARDWARE DEV-USER  CYL ---2+0--4+0--6+0'\n         DC    X'94A2'\n         DC    C' ---2+0--4+0--6+0--8+0--100--120%'\nGMEMSMRY DC    CL79' ESTOR-UTIL: ZERO  STORAGE SHORTAGES->  SQA:NONE  C+\n               SA:NONE  AUX:NONE  REAL:NONE'\nGRESETIN DC    X'C11140401D40132841F40000'\nGCONTLEN EQU   *-GRESETIN\n         DC    X'1DF82842F711C1C8',C'<'\nGRESETMD DC    C'?'\n         DC    C'>'\nGRESETLN EQU   *-GRESETIN\n         SPACE\n         UCBSCAN MF=(L,GSCN)     UCBSCAN PARAMETER LIST.\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAGLS": {"ttr": 14085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'42\\x00\\x12\\x00\\x88#\\x1f\\x01  \\x7f\\x171\\x10\\xaf\\x05\\xd1\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "52.50", "flags": 0, "createdate": "1988-08-18T00:00:00", "modifydate": "2020-07-25T17:31:12", "lines": 4271, "newlines": 1489, "modlines": 0, "user": "GREG"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "IMPXAJ": {"ttr": 15876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\\\\\x004\\x00\\x94\\x15/\\x01  \\x7f\\x178\\x10?\\x0b\\x14\\x07\\x97\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "52.92", "flags": 0, "createdate": "1994-06-01T00:00:00", "modifydate": "2020-07-25T17:38:34", "lines": 4159, "newlines": 2836, "modlines": 1943, "user": "GREG"}, "text": "*        COPYRIGHT (C) 1986,1994,2012,2016  PRYCROFT SIX PTY LTD\n         TITLE 'JOB STATUS MONITOR DISPLAY LINE MAPPING'\nJOBDTLS  DSECT\nJOBCOLOR DS    CL9\nJOBNAME  DS    CL8\n         DS    CL1\nJOBASID  DS    CL4\n         DS    CL2\nPRTY     DS    CL4\n         DS    CL1\nTCBTIME  DS    CL13\n         DS    CL1\nSRBTIME  DS    CL13\n         DS    CL1\nREALMEM  DS    CL6\n         DS    CL2\nFRAMESCT DS    CL6\n         DS    CL1\nSLOTS    DS    CL6\n         DS    CL1\nIOCTIME  DS    CL9\n         SPACE\nASCDTLS  DSECT\nASCCOLOR DS    CL9\nASCSYNC  DS    CL10\nASCCPUS  DS    CL6\n         DS    CL2\nASCAFFN  DS    CL4\n         DS    CL2\nASCNDSP  DS    CL4\nASCSRBS  DS    CL6\nASCSSRB  DS    CL6\n         DS    CL2\nASCLOCK  DS    CL8\n         DS    CL2\nASCLOCI  DS    CL8\nASCCMLC  DS    CL6\n         DS    CL2\nASCSMCT  DS    CL4\n         DS    CL3\nASCIODP  DS    CL2\n         SPACE\nASSDTLS  DSECT\nASSCOLOR DS    CL9\nASSREUS  DS    CL3\nASSNSTNC DS    CL12\n         DS    CL2\nASSLASID DS    CL4\n         DS    CL1\nASSLADDR DS    CL8\nASRMEMLM DS    CL12\nASRMSCL1 DS    CL1\nASRMSCL2 DS    CL1\n         DS    CL1\nASRMLSRC DS    CL4\n         DS    CL22\nASRPGMNM DS    CL8\n         SPACE\nRAXDTLS  DSECT\nRAXCOLOR DS    CL9\nESTORMEM DS    CL6\n         DS    CL2\nESTORECT DS    CL6\n         DS    CL2\nEHIPRMEM DS    CL6\n         DS    CL1\nEHIPERCT DS    CL6\nISOQOMEM DS    CL8\nISOQOSCL DS    CL1\nISOQOTCT DS    CL6\n         DS    CL1\nDATSPMEM DS    CL6\n         DS    CL1\nDATSPCCT DS    CL6\n         DS    CL1\nEDSHWMEM DS    CL6\n         DS    CL1\nEDSHWMCT DS    CL6\n         DS    CL2\nESTORSWP DS    CL5\n         SPACE\nSRVDTLS  DSECT\nSRVCOLOR DS    CL9\nVIOXPMEM DS    CL6\nVIOXPSCL DS    CL1\nVIOXPCNT DS    CL6\n         DS    CL2\nSRVSBSYS DS    CL4\nSRVCPU   DS    CL12\nSRVIOC   DS    CL12\nSRVMSO   DS    CL12\nSRVSRB   DS    CL12\nSRVTOTAL DS    CL12\n         SPACE\nOUCBDTLS DSECT\nOUCCOLOR DS    CL9\nOUCBLINE DS    CL1\nRDYTASKS DS    CL6\nWRKGSTSZ DS    CL6\n         DS    CL2\nTRANNAME DS    CL8\n         DS    CL1\nTRANCLAS DS    CL8\nPERFPERD DS    CL1\n         DS    CL1\nSRVCCLAS EQU   *+1,8\nPERFGRPN DS    CL4\n         DS    CL1\nDMNUMBER DS    CL4\n         DS    CL4\nNEWDISPR DS    CL2\n         DS    CL4\nCPULIMIT DS    CL8\n         DS    CL2\nSWAPCODE DS    CL16\n         SPACE\nDSPCDTLS DSECT\nDSPCOLOR DS    CL9\nDSPCNAME DS    CL8\n         DS    CL2\nDSPCSTKN DS    CL16\n         DS    CL1\nDSPCSCOP DS    CL6\n         DS    CL2\nDSPCKEY  DS    CL1\n         DS    CL2\nDSPCPROT DS    CL3\n         DS    CL2\nDSPCOTCB DS    CL6\n         DS    CL2\nDSPCRANG DS    CL8\n         DS    CL2\nDSPCORIG DS    CL4\n         DS    CL4\nDSPCMXPG DS    CL8\n         DS    CL2\n         SPACE\nTCBDTLS  DSECT\nTCBCOLOR DS    CL9\nCRNTFLG  DS    CL2\nJSLBL    DS    CL2\nTCBLBL   DS    CL3\n         DS    CL1\nTCBADDR  DS    CL6\n         DS    CL2\nCMPLBL   DS    CL3\n         DS    CL1\nTCBCOMP  DS    CL8\n         DS    CL2\nKEYLBL   DS    CL3\n         DS    CL1\nTCBKEY   DS    CL1\n         DS    CL2\nPRTYLBL  DS    CL4\n         DS    CL1\nTCBPRTY  DS    CL4\n         DS    CL2\nOTCLBL   DS    CL3\n         DS    CL1\nOTCADDR  DS    CL6\n         DS    CL2\nTCBSTAT  DS    CL5\n         DS    CL1\nJTCBCPU  DS    CL13\n         SPACE\nTCBDTLS2 DSECT\nTCBCOLR2 DS    CL9\nTCBLIN2  DS    CL7\nTCBIDNT  DS    CL7\n         DS    CL2\nTCBTEST  DS    CL8\n         DS    CL1\nTCBTACT  DS    CL6\n         DS    CL3\nJTCBSVCS DS    CL13\n         DS    CL2\nTCBRUN   DS    CL14\nTCBPROC  DS    CL1\n         DS    CL2\nSMCSTAT  DS    CL3\n         DS    CL2\nJTCBTERM DS    CL5\n         DS    CL3\n         SPACE\nRBDTLS   DSECT\nRBCOLOR  DS    CL9\nRBDTL    DS    CL4\nRBLBL    DS    CL4\n         DS    CL1\nRBADDR   DS    CL6\n         DS    CL2\nRBPSWLBL DS    CL3\n         DS    CL2\nRBPSW1   DS    CL8\n         DS    CL1\nRBPSW2   DS    CL8\n         DS    CL2\nRBWTLBL  DS    CL4\n         DS    CL1\nRBWAITCT DS    CL1\n         DS    CL2\nRBFLGSLB DS    CL4\n         DS    CL1\nRBFLGS   DS    CL2\n         DS    CL2\nRBLICLBL DS    CL3\n         DS    CL1\nRBILC    DS    CL1\n         DS    CL1\nRBINTC   DS    CL4\n         DS    CL3\nMODULE   DS    CL8\n         SPACE\nSTEPDTLS DSECT\nSTPCOLOR DS    CL9\nSTEPNJOB DS    CL8\n         DS    CL2\nSTEPSTEP DS    CL8\n         DS    CL2\nSTEPPROC DS    CL8\n         DS    CL1\nSTEPNMBR DS    CL4\n         DS    CL2\nSTEPAPF  DS    CL3\n         DS    CL2\nSTEPPASS DS    CL3\nXCPTOTAL DS    CL12\n         DS    CL1\nREGNSIZE DS    CL8\nREGIONK  DS    CL1\n         DS    CL1\nSTPTPUTS DS    CL6\n         DS    CL1\nSTPTGETS DS    CL6\n         SPACE\nTIOTDTLS DSECT\nTIOCOLOR DS    CL9\nTIODDNAM DS    CL8\n*  BEFORE FINAL FORMAT\nTIOFFSET DS    CL2\nTIOUCBS4 DS    CL4\nTIOUCBS3 EQU   *-3,3\n*  AFTER FINAL FORMAT\n         ORG   TIOFFSET\nTIOFILL1 DS    CL1\nTIOUCBNM DS    CL4\nTIOFILL2 DS    CL1\n*\nTIOVOLUM DS    CL6\n         ORG   *-1\nTIOEXCPS DS    CL8\nTIOBLKSZ DS    CL6\nTIOODTLS DS    CL1\nTIODSN   DS    CL52\n         ORG   TIOODTLS\nTIOLRECL DS    CL6\n         DS    CL1\nTIOACCES DS    CL5\n         DS    CL1\nTIODSORG DS    CL3\nTIOBUFNO DS    CL4\n         DS    CL1\nTIOMBCHR DS    CL16\n         DS    CL1\nTIOTTRN  DS    CL8\n         ORG\n         SPACE\n         IEFZB505 LOCEPAX=YES    SWAREQ EXTERNAL PARAMETER AREA\n         SPACE\nDYNSWA   DSECT\nSVSWAREQ DS    18F\nSWEPAPTR DS    F\nRL4SWA   DS    F\nEPA      DS    XL28\nSWAPARMS SWAREQ MF=L\n         DS    0D\nDYNSWALN EQU   *-DYNSWA\n         TITLE 'IMDSPACE SUBROUTINE RETURNED AREAS'\n         COPY  IMDSDATA\n         TITLE 'JOB STATUS MONITOR SUBROUTINE'\nIMPXA    CSECT\n         USING JOBSTATS,R11,R10,R9\nJOBSTATS DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         LA    R9,2048(,R10)     SET UP THIRD\n         LA    R9,2048(,R9)                   BASE REGISTER.\n**       TM    OSLEVEL,CVTH4410  SP4 OR LATER?\n**       BNO   JOK1440           NO.\n**       MVI   TIME1440+3,X'DE'  YES, ADD ONE TO 1440.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   JOK1440           NO, FINAL FINISH.\n*                                YES, SET TCT I/O COUNT ENTRY LENGTH.\n         MVI   JTIOELEN+1,TCTDDLEN\nJOK1440  CLI   STATSELF,C'?'     ALREADY INITIALIZED FOR THIS OPTION?\n         BNE   JOBINITD          YES, DON'T DO IT AGAIN.\n         L     R1,PSAAOLD        NO, POINT TO THE CURRENT ASCB.\n         USING ASCB,R1\n         UNPK  STATSELF(5),ASCBASID(3)\n         TR    STATSELF,HEX-C'0' SHOW WHICH ASID '=' WILL GET.\n         MVI   STATSELF+4,X'28'  TIDY UP.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    JOBINITD          NO, CAN'T GO SPYING.\n         MODESET MF=(E,MDSET0)   CHECK THINGS OUT IN KEY ZERO.\n         L     R1,PSAAOLD        POINT TO THE CURRENT ASCB.\n         ICM   R3,15,ASCBTSB     POINT TO THE TSB.\n         BZ    JNOTSB            THERE IS NONE SO SKIP THIS.\n         USING TSB,R3\n         L     R3,TSBEXTNT       POINT TO THE TSB EXTENSION.\n         DROP  R3                TSB.\n         USING TSBX,R3\n         L     R3,TSBXTVWA       POINT TO THE TSO/VTAM WORK AREA.\n         DROP  R3                TSBX.\n         USING TVWA,R3\n         L     R3,TVWACHOP       POINT TO 3270 OUTPUT DATA\n*                                MANAGER'S OUTPUT CHARACTERS.\n         DROP  R3                TVWA.\n         BCTR  R3,0              POINT TO THE WRITE CONTROL CHARACTER.\n         BCTR  R3,0              POINT TO THE VTAM WRITE COMMAND.\n         ST    R3,TPUTADDR       ASSUME CONSTANT ACROSS TSU ASIDS.\n         L     R1,ASCBLDA        POINT TO THE VSM LOCAL DATA AREA.\n         DROP  R1                ASCB.\n         USING LDA,R1\n         L     R3,LDASTRTA       POINT TO ADDRESS SPACE REGION START.\n         A     R3,LDASIZA        POINT TO AFTER REGION END.\n         S     R3,TPTLNADR       POINT BACK INTO LSQA.\n         ST    R3,TPTLNADR       SAVE TSO/VTAM USER TPUT LENGTH ADDR.\n         DROP  R1                LDA.\nJNOTSB   MODESET MF=(E,MDSETN0)  BACK TO USER KEY.\nJOBINITD MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '  ADJUST ANY COMMAND INPUT.\n         B     CMDSCANJ          PROCESS IT.\n         SPACE\nREDOJOBS NI    JOBFLAGS,255-FOILED  RESET CROSS MEMORY FOILED FLAG.\n         CLI   STATSJOB,C' '     ALREADY HAVE COMPLETE JOB NAME?\n         BNH   LOCJOBNM          NO, GO PROMPT FOR COMPLETE JOB NAME.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         SLR   R0,R0\n         ST    R0,WINLINES       RESET LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         XC    SAVETCB(72),SAVETCB  CLEAR TCB PLACE MARKER AND STACK.\n         MVC   0(LL-79,R2),LOWX\n         MVC   LL-79(8,R2),STATSJOB  LOAD IN THE TARGET NAME.\n         MVI   LL-71(R2),C' '    BLANK THE REST OF THE DISPLAY LINE.\n         MVC   LL-70(70,R2),LL-71(R2)\n         L     R7,ASVTADDR       POINT TO ADDRESS SPACE VECTOR TABLE.\n         USING ASVT,R7\n         L     R8,ASVTMAXU       GET MAXUSER.\n         LA    R7,ASVTENTY-4     POINT TO FIRST ASVT ENTRY - 4.\n         CLC   STATSJOB(4),STARS REQUESTED NAME STARTS WITH ****?\n         BNE   LOCASVTE          NO, ASSUME JOB NAME SPECIFIED.\n         MVC   WORK,STATSJOB     YES, COPY THIS JOB \"NAME\".\n         LA    R0,4              NAMED ASID MUST HAVE 4 HEX DIGITS.\n         LA    R1,WORK+4         POINT TO FIRST HEX DIGIT.\n         SLR   R15,R15           CLEAR A WORK REGISTER.\nGETJASID CLI   0(R1),C'A'        VALID HEX DIGIT?\n         BL    LOCASVTE          NO, TRY FOR FUNNY JOB NAME.\n         CLI   0(R1),C'9'        VALID HEX DIGIT?\n         BH    LOCASVTE          NO, TRY FOR FUNNY JOB NAME.  (???)\n         CLI   0(R1),C'0'        NUMERIC HEX DIGIT?\n         BNL   NXTASIDC          YES, VALID HEX DIGIT.\n         CLI   0(R1),C'F'        ALPHABETIC HEX DIGIT?\n         BH    LOCASVTE          NO, TRY FOR FUNNY JOB NAME.\n         IC    R15,0(,R1)        YES, GET IT.\n         LA    R15,X'FA'-C'A'(,R15)   CONVERT IT.\n         STC   R15,0(,R1)        REPLACE IT.\nNXTASIDC LA    R1,1(,R1)         POINT TO NEXT ASID DIGIT.\n         BCT   R0,GETJASID       PROCESS IT.\n         MVC   LL-79(4,R2),=C'ASID' INDICATE ASID REQUEST RECOGNITION.\n         PACK  WORK(3),WORK+4(5) PACK INTO A HALFWORD.\n         ICM   R15,B'0011',WORK  GET THE ASID.\n         BZ    NOTJASID          ASID 0 IS INVALID.\n         CR    R15,R8            LARGER THAN MAXUSER?\n         BH    NOTJASID          YES, INVALID.\n         SLL   R15,2             GET INDEX INTO ASVT.\n         ALR   R7,R15            POINT TO SPECIFIED ASVT ENTRY.\n         ICM   R3,15,0(R7)       POINT TO ASCB.\n         BM    NOTJASID          ASID NOT ASSIGNED.\n         B     LOCDASCB          HAVE NOW LOCATED THE REQUIRED ASCB.\nLOCASVTE LA    R7,4(,R7)         POINT TO NEXT ENTRY.\n         ICM   R3,15,0(R7)       POINT TO ASCB.\n         BM    NXTASVTE          ASID NOT ASSIGNED.\n         USING ASCB,R3\n         ICM   R15,15,ASCBJBNI   GET JOBNAME POINTER.\n         BNZ   LOCJNAME          BATCH JOB.\n         ICM   R15,15,ASCBJBNS   GET JOBNAME POINTER.\n         BNZ   LOCJNAME          HAVE POINTER.\n         LA    R15,STARTING      NO POINTER, SO STARTING.\nLOCJNAME CLC   STATSJOB,0(R15)   RIGHT JOB?\n         BE    LOCDASCB          YES, LOCATED REQUESTED JOB.\nNXTASVTE BCT   R8,LOCASVTE       GET NEXT ASVT ENTRY.\n         DROP  R7                ASVT.\nNOTJASID MVC   LL-70(30,R2),=CL30'IS NOT A CURRENT ADDRESS SPACE'\n         TM    JOBFLAGS,SPY+WAIT SPY OR WAIT REQUEST ACTIVE?\n         BZ    NOTSPY1           NO.\n         MVC   LL-39(24,R2),=CL24'- WAIT REQUEST CANCELLED'\n         TM    JOBFLAGS,SPY      WAIT REQUEST ACTIVE?\n         BZ    NOTSPY1           NO.\nSPYTERM1 MVC   LL-39(24,R2),=CL24'- SPY REQUEST TERMINATED'\nSPYTERM2 NI    JOBFLAGS,255-SPY-WAIT   YES, DEACTIVATE IT.\nNOTSPY1  BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         B     JOBSTEND\nLOCDASCB TM    JOBFLAGS,SPY      SPY REQUEST ACTIVE?\n         BZ    NOTSPY2           NO.\n         ICM   R5,15,ASCBTSB     IS THIS A TSO USER?  (GOT A TSB?)\n         BNZ   CHECK4ME          YES, GET SPYING.\n         MVC   LL-70(17,R2),=CL17'IS NOT A TSO USER'\n         MVC   LL-52(24,R2),=CL24'- SPY REQUEST TERMINATED'\n         B     SPYTERM2          DISPLAY THIS MESSAGE.\nCHECK4ME C     R3,PSAAOLD        SPYING ON SELF?\n         BNE   DOSPYING          NO, GET SPYING.\n         MVC   LL-70(30,R2),=CL30'SELF-CONTEMPLATION NOT ALLOWED'\n         B     SPYTERM1          DISPLAY THIS MESSAGE.\nDOSPYING MODESET MF=(E,MDSET0)   PREPARE TO LOOK AT TSB.\n         L     R1,PSAAOLD        POINT TO THE CURRENT ASCB,\n         L     R1,ASCBTSB-ASCB(,R1)    TO THIS USER'S TSB,\n         L     R1,TSBEXTNT-TSB(,R1)    TO THIS USER'S TSBX,\n         L     R5,TSBEXTNT-TSB(,R5)    TO THAT USER'S TSBX.\n*                                GET THE SMALLER BUFFER SIZE.\n         CLC   TSBXTMBF-TSBX(2,R1),TSBXTMBF-TSBX(R5)\n         BNH   SPYSIZOK\n         LR    R1,R5\nSPYSIZOK LH    R1,TSBXTMBF-TSBX(,R1)\n         CH    R1,SPYSCRN        ALTERNATE SCREEN REQUIRED?\n         BNH   SPYSIZED          NO.\n         ICM   R0,15,OLDLINES    YES, DO WE KNOW THE ALTERNATE SIZE?\n         BZ    SPYSIZED          NO.\n         STH   R1,SPYSCRN        YES.\n         STSIZE SIZELOC=OLDCOLS,LINELOC=OLDLINES\n         MVI   CLR+1,X'7E'       REPLACE ERASE/WRITE WITH E/W ALT.\n         LA    R1,CLR            PREPARE FOR THE\n         LA    R0,L'CLR             FULL SCREEN\n         ICM   R1,B'1000',TPUTFLG      TPUT TO\n         TPUT  (1),(0),R                  CLEAR THE SCREEN.\nSPYSIZED MODESET MF=(E,MDSETN0)  TSB DATA NOW PROCESSED.\n         MVI   SPYDELAY+3,5      WAIT 1/20TH SEC IF PHYSICALLY OUT.\n         L     R1,ASCBRSME       GET RAX POINTER.\n         USING RAX,R1\n         L     R1,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.\n         DROP  R1                RAX.\n         LTR   R1,R1             ZERO FRAMES FOR THIS ADDRESS SPACE?\n         BZ    SPYWAIT           YES, GO WAIT A LITTLE WHILE.\n         MVI   SPYDELAY+3,1      WAIT 1/100TH SEC IF PHYSICALLY IN.\n         TM    ASCBRCTF,ASCBOUT  IS THIS ADDRESS SPACE SWAPPED OUT?\n         BO    SPYWAIT           YES, GO WAIT A LITTLE WHILE.\n*        MVI   SPYDELAY+3,1      WAIT 1/100TH OF A SEC IF SWAPPED IN.\n         B     GOSPYING          NO, TRY TO SET SECONDARY A. S.\nNOTSPY2  L     R5,=A(JASDTLS)    GET ADDRESS OF ASID HEADER ROUTINE.\n         BR    R5                FORMAT GENERAL ADDRESS SPACE DETAILS.\n         USING TCBDTLS,R2\nGOSPYING DS    0H\n         MODESET MF=(E,MDSTSUP0)\n         ESTAE MF=(E,ESTAEONJ)\n         SLR   R14,R14           USE KEY ZERO IN SASID.\n         C     R3,PSAAOLD        LOOKING AT SELF?\n         BE    SSAROKAY          YES.\n         TM    JOBFLAGS,SPY      NEED TO LOOK AT FILES?\n         BNZ   JCSAOK1           NO.\n         TM    JOBFLAG2,NODD     NEED TO LOOK AT FILES?\n         BNZ   JCSAOK1           NO.\n         GETMAIN RU,LV=DYNSWALN,SP=241,LOC=(31,64)\n         LARL  R14,SWAGLBL@      POINT TO ADDRESS SAVE AREA.\n         ST    R1,0(R14)         SAVE THE GLOBAL AREA ADDRESS.\nJCSAOK1  EQU   *\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\n         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.\n         LA    R1,1              ADDRESS ALL AX NUMBER.\n         AXSET AX=(1)            SET AX = 1.\n         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.\n         TM    ASCBRCTF,ASCBOUT  IS THIS ADDRESS SPACE SWAPPED OUT?\n         BZ    GETSASID          NO, GET THE SECONDARY ASID.\n         OI    JOBFLAGS,FOILED   INDICATE FOILED AT THE LAST.\n         B     XMFOILED          UNDO THE CROSS MEMORY STUFF.\nGETSASID LH    R4,ASCBASID       GET TARGET ASID.\n         TM    ASCBFLG3,ASCBREUS REUSABLE ADDRESS SPACE?\n         BO    JUSEINST          YES, NEED TO GET INSTANCE NUMBER.\n         SSAR  R4                MAKE TARGET JOB THE SECONDARY ASID.\n         B     JSASOKAY\nJUSEINST L     R14,ASCBASSB      POINT TO THE ASSB.\n         USING ASSB,R14\n         ICMH  R4,15,ASSBISQN    LOAD THE INSTANCE NUMBER.\n         DROP  R14               ASSB.\n         SSAIR R4                MAKE TARGET JOB THE SECONDARY ASID.\n         SGR   R4,R4             CLEAR REGISTER HIGH HALF.\nJSASOKAY SLR   R14,R14           USE KEY ZERO IN SASID.\n         TM    JOBFLAGS,SPY      ARE WE ON A SPYING MISSION?\n         BZ    SSAROKAY          NO, GO FORMAT SOME CONTROL BLOCKS.\n***      L     R5,ASCBTSB        POINT TO THE TERMINAL STATUS BLOCK.\n         USING TSB,R5\n         TM    TSBFLG5,TSBSPF    IS SPF ACTIVE FOR THIS TERMINAL?\n         BZ    DONEISPF          NO, ISPF IS NOT ACTIVE.\n         DROP  R5                TSB.\n         L     R4,ASCBASXB       GET TARGET ASXB ADDRESS.\n         LA    R5,4              FOUR BYTES TO BE FETCHED.\n*                                FETCH LAST TCB POINTER.\n         MVCP  SECPNTR(R5),ASXBLTCB-ASXB(R4),R14\n         L     R4,SECPNTR        POINT TO ISPF MAIN TASK CONTROL BLOCK.\n*                                FETCH TCB LIMIT DP AND DP.\n         MVCP  WORK(R5),TCBLMP-TCB-2(R4),R14\n         CLI   WORK+3,X'FD'      EXPECTED DISPATCHING PRIORITY?\n         BNE   DONEISPF          NO, ASSUME NOT ISPF MAIN TASK.\n*                                FETCH LAST SUB-TASK TCB POINTER.\n         MVCP  SECPNTR(R5),TCBLTC-TCB(R4),R14\n         ICM   R4,15,SECPNTR     POINT TO ISPF SUB-TASK CONTROL BLOCK.\n         BZ    DONEISPF          NO SUB-TASKS, PROBABLY NOT ISPF.\n*                                FETCH CURRENT RB POINTER.\n         MVCP  SECPNTR(R5),TCBRBP-TCB(R4),R14\n         L     R4,SECPNTR        POINT TO CURRENT REQUEST BLOCK.\n         MVCP  SECPNTR(R5),68(R4),R14 FETCH SAVED REGISTER 9 VALUE.\n         ICM   R4,15,SECPNTR     LOAD REGISTER 9 VALUE.\n         BNP   DONEISPF          EXPECT A POSITIVE ADDRESS.\n         MVCP  SECPNTR(R5),0(R4),R14\n         CLC   SECPNTR(3),=C'TLD'   TERMINAL LOGICAL DISPLAY AREA 1/2?\n         BNE   DONEISPF          NO, FORGET ISPF SCREEN IMAGE FETCH.\n         MVCP  SECPNTR(R5),32(R4),R14\n         L     R4,SECPNTR        LOAD ISPTABLS ADDRESS.\n         MVCP  SECPNTR(R5),336(R4),R14\n         L     R4,SECPNTR        ASSUME ISPF VERSION 2.\n         MVCP  SECPNTR(R5),32(R4),R14\n         L     R4,SECPNTR        POINT TO ISPF LOGICAL SCREEN IMAGE.\n         L     R5,WINMANAD       POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R5\n         L     R2,WINBUFF        POINT TO DISPLAY AREA.\n         DROP  R5                WNDWMNGR.\n         LA    R5,3840           GET A NUMBER.\n         SLL   R5,1              DOUBLE IT.\n         LA    R2,3845(R5,R2)    PUT TO ISPF SCREEN TPUT BUFFER.\n         LH    R5,SPYSCRN        GET TARGET SCREEN SIZE.\n         SRL   R5,R4             DIVIDE BY SIXTEEN.\n         LA    R0,16             LOAD NUMBER OF MOVES REQUIRED.\nSPFFETCH MVCP  0(R5,R2),0(R4),R14     FETCH 240 BYTES FROM ISPF BUFFER.\n         ALR   R2,R5             POINT TO NEXT TARGET AREA.\n         ALR   R4,R5             POINT TO NEXT SOURCE AREA.\n         BCT   R0,SPFFETCH       GO MOVE NEXT SIXTEENTH OF TLD.\n         OI    JOBFLAG2,ISPF     REMEMBER ISPF BUFFER FETCH.\nDONEISPF L     R5,WINMANAD       POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R5\n         L     R2,WINBUFF        POINT TO DISPLAY AREA.\n         DROP  R5                WNDWMNGR.\n         LA    R0,15             15 X 256 = 3840 BYTES TO BE FETCHED.\n         LA    R5,256            AMOUNT OF DATA TO BE FETCHED PER MOVE.\n         L     R4,TPUTADDR       POINT TO TSO/VTAM WRITE BUFFER ORIGIN.\n*        L     R1,0(,R2)         ENSURE TARGET IS PAGED IN.\n*        L     R1,SECWORKA       ENSURE TARGET IS PAGED IN.\n*        STNSM ENABINTS+1,X'04'  DISABLE I/O AND EXTERNAL INTERRUPTS.\nSPYFETCH MVCP  0(R5,R2),0(R4),R14  FETCH 256 BYTES FROM TPUT BUFFER.\n         ALR   R2,R5             POINT TO NEXT TARGET AREA.\n         ALR   R4,R5             POINT TO NEXT SOURCE AREA.\n         BCT   R0,SPYFETCH       GO GET NEXT 256 BYTES.\n         LA    R5,4              ONLY FETCH FOUR BYTES NOW.\n         L     R15,TPTLNADR      POINT TO TSO/VTAM SEND DATA LENGTH.\n         MVCP  TPUTSIZE(R5),0(R15),R14  FETCH IT.\n         L     R1,ASCBTSB        POINT TO THE TSB.\n         L     R1,96(,R1)        POINT TO THE TSB EXTENSION.\n         L     R1,36(,R1)        POINT TO THE TSO/VTAM WORK AREA.\n         MVCP  SECPNTR(R5),76(R1),R14   GET INPUT MANAGER FRR WA ADDR.\n         L     R1,SECPNTR        POINT TO INPUT MANAGER FRR WORK AREA.\n         MVCP  TGETSIZE(R5),40(R1),R14  GET TSO/VTAM READ DATA LENGTH.\n         MVCP  SECWORKA(R5),36(R1),R14  GET TSO/VTAM READ BUFFER ADDR.\n         L     R15,SECWORKA      POINT TO TSO/VTAM READ BUFFER ORIGIN.\n         LA    R5,256            FETCH 256 BYTES NOW.\n         MVCP  SECWORKA(R5),0(R15),R14 GET FIRST 256 BYTES OF TGET BFR.\n*NABINTS STOSM ENABINTS+1,X'07 ' ENABLE I/O AND EXTERNAL INTERRUPTS.\n         B     UNSSAR            GET OUT OF CROSS-MEMORY MODE.\nSSAROKAY TM    OSLEVEL,CVTJ4422  EARLIER THAN MVS/SP4.2.2?\n         BNO   JNTPDONE          YES, NO NAME/TOKEN PAIRS.\n         L     R6,ASCBASSB       NO, LOAD POINTER TO ASSB.\n         USING ASSB,R6\n         ICM   R6,15,ASSBNTTP    POINT TO NTT HEADER.\n         BZ    JNTPDONE          NO NAME/TOKEN PAIRS.\n         DROP  R6                ASSB.\n         SLR   R4,R4             INDICATE ADDRESS-SPACE-LEVEL.\n         BAS   R7,JNTTSHOW       SHOW NAME/TOKEN PAIRS.\n         LR    R5,R2             POINT TO CURRENT DISPLAY LINE.\n         AHI   R5,-LL            POINT TO PREVIOUS DISPLAY LINE.\n         MVI   2(R5),X'F4'       UNDERSCORE.                    (I3279)\n         MVI   5(R5),X'C4'       UNDERLINE.                     (F9526)\nJNTPDONE L     R4,ASCBASXB       POINT TO ASXB.\n         USING ASXB,R4\n         LA    R5,4\n         MVCP  TCBQUEUE(R5),ASXBFTCB,R14  COPY RCT ADDRESS.\n         MVCP  PTR2IHSA(R5),ASXBIHSA,R14  COPY IHSA ADDRESS.\n         DROP  R4                ASXB.\n         L     R4,TCBQUEUE       POINT TO TCB QUEUE HEAD (RCT TCB).\n         NI    JOBFLAG3,255-TSOJ RESET STEP TYPE FLAG.\nMSTRTASK LA    R5,256            GET FIRST 256 BYTES OF TCB.\n         MVCP  SECWORKA(R5),0(R4),R14\n         USING TCB,SECWORKA\n         ICM   R5,15,TCBOTC      IS THIS REALLY RCT TCB?\n         BZ    FIRSTTCB          YES, NOT JUST HIGHEST PRIORITY TCB.\n         LR    R4,R5             NO, POINT TO ORIGINATING TCB.\n         B     MSTRTASK          SEE IF ORIGINAL TCB HAS BEEN REACHED.\nSTCBLOOP LA    R5,256            PROCESS NEXT SUB-TASK.\n*                                GET FIRST 256 BYTES OF TCB.\n         MVCP  SECWORKA(R5),0(R4),R14\nFIRSTTCB ST    R4,SAVETCB        SAVE FOR LATER USE.\n         NI    JOBFLAG3,255-LTCB RESET LOCKED TCB FLAG.\n         TM    TCBXSCT1,TCBLLREQ LOCAL LOCK REQUESTED?\n         BZ    LLOCKOK1          NO.\n         TM    TCBXSCT2,TCBLLNEW IHSA USED?\n         BO    LLOCKOK1          NO.\n         L     R6,PTR2IHSA       MAYBE, POINT TO THE IHSA.\n         USING IHSA,R6\n         LA    R5,4\n         MVCP  SECTIOWA(R5),IHSAOTCB,R14\n         C     R4,SECTIOWA       STATUS SAVED FOR THIS TASK?\n         BNE   LLOCKOK1          NO.\n         OI    JOBFLAG3,LTCB     YES, FLAG IT.\n         LA    R5,64             FORGET ABOUT THE F.P. REGISTERS.\n         MVCP  TCBGRS(R5),IHSAGPRS,R14   COPY THE G.P. REGISTERS.\n         LA    R5,8              ALSO COPY THE PSW.\n         MVCP  SAVELPSW(R5),IHSACPSW,R14\n         DROP  R6                IHSA.\nLLOCKOK1 DC    0H\n         LA    R5,4              COPY TCBUKYSP.\n         MVCP  SECTIOWA(R5),TCBUKYSP-TCB(R4),R14\n*                                        ANYTHING INTERESTING TO DO?\n         TM    JOBFLAGS,REGS+PRBS+LLES+CDES+JVSM\n         BZ    DONERBS                   NO, SO SUPPRESS TCB DISPLAY.\n         MVC   TCBCOLOR,HIGHX            SUPPLY ATTRIBUTE BYTES.\n         MVI   TCBCOLOR+8,X'F7'          WHITE.                 (I3279)\n         MVI   CRNTFLG,C' '\n         MVC   CRNTFLG+1(78),CRNTFLG     BLANK OUT NEW DETAIL LINE.\n         C     R4,28(,R3)  WAS ASCBTNEW  IS THIS THE FIRST READY TASK?\n         BNE   DONECRNT                  NO.\n         MVC   CRNTFLG,=C'=>'            YES, DENOTE SAME.\nDONECRNT C     R4,TCBJSTCB               IS THIS A JOB STEP TCB?\n         BNE   NOTJSTCB                  NO.\n         MVC   JSLBL,=C'JS'              YES.\nNOTJSTCB MVC   TCBLBL,=C'TCB'\n         UNPK  TCBADDR(7),SAVETCB+1(4)\n         TR    TCBADDR,HEX-C'0'\n         MVI   TCBADDR+6,C' '            SHOW TCB ADDRESS.\n         MVC   CMPLBL,=C'CMP'\n         UNPK  TCBCOMP(9),TCBCMP(5)\n         TR    TCBCOMP,HEX-C'0'\n         MVI   TCBCOMP+8,C' '    SHOW TCB COMPLETION CODE.\n         SLR   R5,R5             CLEAR FOR SHIFT.\n         IC    R5,TCBPKF         GET STORAGE PROTECTION KEY.\n         SRL   R5,4              SHIFT KEY INTO LOW-ORDER NYBBLE.\n         MVC   KEYLBL,=C'KEY'\n         STC   R5,TCBKEY\n         TR    TCBKEY,HEX        MAKE EBCDIC PRINTABLE HEX CHARACTER.\n         MVC   PRTYLBL,=C'PRTY'\n         UNPK  TCBPRTY(5),TCBLMP(3)\n         TR    TCBPRTY,HEX-C'0'\n         MVI   TCBPRTY+4,C' '    SHOW LIMIT & CURRENT TASK PRIORITIES.\n         ICM   R5,3,TCBFLGS4     IS THIS TASK DISPATCHABLE?\n         BZ    DISPOKAY          YES.\n         MVC   TCBSTAT,=C'ENDED'\n         TM    TCBFLGS5,TCBFC    HAS THE TASK TERMINATED?\n         BO    DISPOKAY          YES.\n         MVC   TCBSTAT,=C'ABWT '\n         TM    TCBFLGS5,TCBABWF  IS THE TASK IN AN ABNORMAL WAIT?\n         BO    DISPOKAY          YES.\n         MVC   TCBSTAT(4),=C'PGXS'\n         TM    TCBFLGS5,TCBPAGE  IS THE TASK PAGING EXCESSIVELY?\n         BO    DISPOKAY          YES.\n         MVC   TCBSTAT(4),=C'REGN'\n         TM    TCBFLGS5,TCBFCD1  IS THE INITIATOR WAITING FOR REGION?\n         BO    DISPOKAY          YES.\n         MVC   TCBSTAT(4),=C'WAIT'\n         TM    TCBFLGS4,TCBRBWF  IS THE TOP RB IN A WAIT STATE?\n         BO    DISPOKAY          YES.\n         MVC   TCBSTAT(4),=C'NDSP'\n         CLI   TCBFLGS5,TCBPNDSP IS THERE A SECONDARY REASON?\n         BZ    DISPOKAY          NO.\n*                                REPORTABLE REASON?\n         TM    TCBNDSP2,TCBNDTS+TCBIWAIT+TCBOWAIT\n         BZ    DISPOKAY          NO.\n         MVC   TCBSTAT,=C'IWAIT'\n         TM    TCBNDSP2,TCBIWAIT INPUT WAIT?\n         BO    DISPOKAY          YES.\n         MVI   TCBSTAT,C'O'\n         TM    TCBNDSP2,TCBOWAIT OUTPUT WAIT?\n         BO    DISPOKAY          YES.\n         MVC   TCBSTAT,=C'SWPOT' NO, TASK IS BEING SWAPPED OUT.\nDISPOKAY LA    R5,8\n*                                GET TCB'S CPU TIME.\n         MVCP  WORK(R5),TCBTTIME-TCB(R4),R14\n         LM    R6,R7,WORK        GET TCB TIME.\n         LA    R4,JTCBCPU        POINT TO DISPLAY AREA.\n         ST    R14,SAVE+12       SAVE CROSS-MEMORY KEY.\n         BAS   R14,CPUTIMEX\n         L     R14,SAVE+12       RESTORE CROSS-MEMORY KEY.\n         L     R4,SAVETCB        RESTORE TCB POINTER.\n         MVC   OTCLBL,=C'OTC'\n         UNPK  OTCADDR(7),TCBOTC+1(4)\n         TR    OTCADDR,HEX-C'0'\n         MVI   OTCADDR+6,C' '    SHOW ORIGINATING TCB'S ADDRESS.\n         TR    LL-79(79,R2),XLATETBL\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELD.\n         MVI   TCBADDR-1,X'24'   MAKE TCB ADDRESS TAB SELECTABLE.\n         MVI   TCBADDR+6,X'27'\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         DROP  R2                TCBDTLS.\n         USING TCBDTLS2,R2\n         MVC   TCBCOLR2,HIGHX    SUPPLY ATTRIBUTE BYTES.\n         MVI   TCBCOLR2+8,X'F7'  WHITE.                         (I3279)\n         MVI   TCBLIN2,C' '      BLANK OUT NEW DETAIL LINE.\n         MVC   TCBLIN2+1(78),TCBLIN2\n         ICM   R5,1,TCBTID       ANY TASK ID PRESENT?\n         BZ    TCBTIDOK          NO.\n         CVD   R5,WORK\n         MVC   TCBIDNT(2),=C'ID'\n         MVC   TCBIDNT+2(4),ED3\n         ED    TCBIDNT+2(4),WORK+6\n         AHI   R5,-248           IS THE ID IN THE KNOWN RANGE?\n         BM    TCBTIDOK          NO, JUST SHOW THE NUMBER.\n         SLL   R5,3              YES, MULTIPLY BY 8 FOR INDEX.\n         LA    R1,TCBROLES(R5)   POINT TO \"MEANINGFUL\" LITERAL.\n         MVC   TCBIDNT,1(R1)     LOAD IT INTO DISPLAY LINE.\n*                                IS THE TASK TERMINATING?\nTCBTIDOK TM    TCBFLGS1,TCBFA+TCBFE\n         BZ    STATOKAY          NO.\n         MVC   JTCBTERM(4),=C'TERM'\n         TM    TCBFLGS1,TCBFA    IS THE TASK ABNORMALLY TERMINATING?\n         BZ    STATOKAY          NO, NORMAL TERMINATION IN PROGRESS.\n         MVC   JTCBTERM,=C'ABTRM'\n*                                SYSTEM OR STEP MUST COMPLETE?\nSTATOKAY TM    TCBFLGS2,TCBFSMC+TCBFJMC\n         BZ    NOTMCTCB          NO.\n         MVC   SMCSTAT,=C'SMC'   YES.\n         TM    TCBFLGS2,TCBFSMC  SYSTEM MUST COMPLETE?\n         BO    NOTMCTCB          YES, BUT SHOULD NEVER CAPTURE THIS.\n         MVI   SMCSTAT,C'J'      NO, JOB STEP MUST COMPLETE.\nNOTMCTCB ICM   R0,7,TCBTRNB      TESTRAN CORE TABLE PRESENT?\n         BZ    JTSKTSTD          NO.\n         MVC   TCBTEST,=C'TSO TEST'\n         TM    TCBABF,TCBTCP     TESTRAN ACTIVE?\n         BZ    JTSKTSTD          NO.\n         MVC   TCBTACT,=C'ACTIVE'\nJTSKTSTD TM    TCBFLGS7,TCBSVCS  SVC SCREENING ACTIVE?\n         BZ    JTSKSVCD          NO.\n         MVC   JTCBSVCS,=C'SVC SCREENING'\nJTSKSVCD TM    TCBXSCT1,TCBACTIV CURRENTLY BEING DISPATCHED?\n         BZ    JTSKCPUD          NO.\n         MVC   TCBRUN,=C'RUNNING ON CP-'\n         MVC   TCBPROC,TCBCCPVI+1\n         OI    TCBPROC,X'F0'\n         TR    TCBPROC,HEX-C'0'\nJTSKCPUD CLC   TCBLIN2(79),BLANKS ANY DATA ON THIS LINE?\n         BE    JTLIN2OK          NO, DO NOT SHOW IT.\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         DROP  R2                TCBDTLS2.\nJTLIN2OK TM    TCBFLGS5,TCBFC    HAS THE TASK TERMINATED?\n         BO    TASKNTOK          YES.\n         LA    R6,4              POINTER LENGTH.\n         MVCP  SECPNTR(R6),TCBSENV-TCB(R4),R14\n         ICM   R1,15,SECPNTR     CHECK TCBSENV FOR TASK ACEE POINTER.\n         BZ    TASKACOK          SKIP IT IF POINTER IS NULL.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LA    R15,72            LENGTH OF ACEE TO FETCH.\n*                                GET SOME ACEE DATA.\n         MVCP  SECRB(R15),0(R1),R14\n*                                GET PROGRAMMER NAME ADDRESS.\n         MVCP  SECPNTR(R6),ACEEUNAM-ACEE(R1),R14\n         LA    R6,21             LENGTH OF PROGRAMMER NAME.\n         ICM   R15,15,SECPNTR    POINT TO PROGRAMMER NAME IN SASID.\n         BZ    TASKACOK          SKIP IT IF POINTER IS NULL.\n         MVCP  LL-21(R6,R2),0(R15),R14  LOAD PROGRAMMER NAME.\n         SLR   R1,R1\n         IC    R1,LL-21(,R2)     GET THE PROGRAMMER NAME LENGTH.\n         MVI   LL-21(R2),C' '    BLANK OUT LENGTH INDICATOR.\n         LA    R1,LL-21(R1,R2)   POINT PAST PROGRAMMER NAME.\n         MVC   0(20,R1),BLANKS   BLANK OUT TRAILING GARBAGE (ACF2).\n         MVC   LL-25(5,R2),=C'NAME='\n         MVC   LL-79(10,R2),=C'RACF-USER='\n         MVC   LL-69(8,R2),SECRB+21   DISPLAY AND LABEL RACF DETAILS.\n         MVC   LL-60(6,R2),=C'GROUP='\n         MVC   LL-54(8,R2),SECRB+30\n         MVC   LL-45(9,R2),=C'TERMINAL='\n         MVC   LL-36(8,R2),SECRB+64\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\nTASKACOK TM    OSLEVEL,CVTJ4422  EARLIER THAN MVS/SP4.2.2?\n         BNO   TASKNTOK          YES, NO NAME/TOKEN PAIRS.\n         LA    R5,4              GET LENGTH TO FETCH.\n         MVCP  SECPNTR(R5),TCBSTCB-TCB(R4),R14\n         ICM   R6,15,SECPNTR     POINT TO STCB.\n         BZ    TASKNTOK\n         MVCP  SECRB(R5),STCBOTCB-STCB(R6),R14\n         ICM   R6,15,SECRB       POINT TO OTCB.\n         BZ    TASKOTOK\n         LA    R5,192            GET LENGTH TO FETCH.\n         MVCP  SECRB(R5),0(R6),R14\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F7'   WHITE.                         (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-71(12,R2),=C'THREAD-ID=X'''\n         UNPK  LL-59(9,R2),SECRB+20(5)\n         UNPK  LL-50(9,R2),SECRB+24(5)\n         TR    LL-59(17,R2),HEX-C'0'\n         MVI   LL-51(R2),C'_'\n         MVI   LL-42(R2),C''''\n         ICM   R6,15,SECRB+168   POINT TO THREAD'S USERID.\n         BZ    TASKOTDN          HANDLE NO USERID.\n         LA    R5,4              GET LENGTH TO FETCH.\n         MVCP  SECRB(R5),0(R6),R14\n         ICM   R5,15,SECRB       GET LENGTH OF USERID.\n         BNP   TASKOTDN          HANDLE NO USERID.\n         MVC   LL-71(12,R2),=C'THREAD-ID=X'''\n         MVCP  LL-27(R5,R2),4(R6),R14\n         MVC   LL-32(5,R2),=C'USER='\nTASKOTDN BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\nTASKOTOK L     R6,SECPNTR        POINT TO STCB.\n         LA    R5,4              GET LENGTH TO FETCH.\n         MVCP  SECPNTR(R5),STCBNTTP-STCB(R6),R14\n         ICM   R6,15,SECPNTR     POINT TO NTT HEADER.\n         BZ    TASKNTOK          NO TASK-LEVEL NAME/TOKEN PAIRS.\n         BAS   R7,JNTTSHOW       SHOW NAME/TOKEN PAIRS.\nTASKNTOK TM    JOBFLAGS,REGS     SHOW TASK REGISTERS?\n         BZ    DONEGPRS          NO.\n         LA    R5,32             GET LENGTH OF TCB PREFIX.\n         SLR   R4,R5             POINT TO TCB PREFIX (TCBFRS).\n         MVCP  SECRB(R5),0(R4),R14  GET FLOATING POINT REG. CONTENTS.\n         ALR   R4,R5             RESTORE TCB POINTER.\n         OC    SECRB(32),SECRB   ARE THEY ALL ZERO?\n         BZ    DONEFPRS          YES, DON'T BOTHER DISPLAYING THEM.\n         LA    R5,SECRB          POINT TO TASK FP REGISTER SAVE AREA.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F6'   YELLOW.                        (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LA    R0,4              FOUR REGISTERS PER SCREEN LINE.\n         MVC   LL-79(4,R2),=C'0-6:' SUPPLY REGISTER LABELS.\n         LA    R1,LL-73(,R2)     POINT TO FIRST REGISTER SLOT.\nNEXTFLPR UNPK  0(9,R1),0(5,R5)   UNPACK HALF THE REGISTER CONTENTS.\n         UNPK  8(9,R1),4(5,R5)   UNPACK HALF THE REGISTER CONTENTS.\n         TR    0(16,R1),HEX-C'0' CONVERT TO EBCDIC NUMERICS.\n         MVI   16(R1),C' '       ERASE GARBAGE.\n         LA    R1,18(,R1)        POINT TO NEXT REGISTER POSITION.\n         LA    R5,8(,R5)         POINT TO NEXT REGISTER CONTENTS.\n         BCT   R0,NEXTFLPR       PROCESS NEXT FLOATING POINT REGISTER.\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\nDONEFPRS ST    R14,WORK          SAVE MVCP STORAGE ACCESS KEY.\n         LA    R5,TCBGRS         POINT TO TASK REGISTER SAVE AREA.\n         BAS   R14,JFMTGPRS      GO DISPLAY REGISTERS.\n         L     R14,WORK          RESTORE MVCP STORAGE ACCESS KEY.\nDONEGPRS TM    TCBFLGS5,TCBFC    HAS THE TASK TERMINATED?\n         BO    DONERBS           YES, FORGET ABOUT REQUEST BLOCKS.\n         TM    JOBFLAG2,PPRM     SHOWING PROGRAM PARAMETER?\n         BZ    DONEPARM          NO.\n         CLI   TCBPKF,X'80'      SYSTEM KEY?\n         BL    DONEPARM          YES, SO FORGET IT.\n         C     R4,TCBJSTCB       IS THIS A JOB STEP TCB?\n         BE    DONEPARM          YES, SO NOT RELEVANT.\n         TM    JOBFLAG3,TSOJ     TSO TMP RUNNING IN JOB STEP?\n         BZ    DONEPARM          NO.\n         ICM   R7,15,TCBFSA      POINT TO FIRST PROBLEM PGM SAVE AREA.\n         BNP   DONEPARM          SKIP THIS BIT IF POINTER IS ZERO.\n         LA    R5,4              POINTER LENGTH.\n         MVCP  SECPNTR(R5),24(R7),R14   GET SAVED REGISTER 1 VALUE.\n         ICM   R1,15,SECPNTR     POINT TO PARAMETER LIST.\n         BNP   DONEPARM          SKIP THIS BIT IF POINTER IS FUNNY.\n         C     R1,TWENTYK        TOO SMALL FOR LOCATION IN REGION?\n         BL    DONEPARM          YES, THIS IS NOT A POINTER.\n         MVCP  SECPNTR(R5),0(R1),R14  GET FIRST WORD OF PARAMETER LIST.\n         TM    SECPNTR,X'78'     TOO BIG FOR A POINTER?\n         BNZ   DONEPARM          YES, NON-STANDARD PARAMETER LIST.\n         ICM   R6,15,SECPNTR     POINT TO FIRST OR ONLY PARAMETER.\n         BZ    DONEPARM          SKIP THIS BIT IF POINTER IS ZERO.\n         LA    R5,2              PARAMETER LENGTH INDICATOR LENGTH.\n         MVCP  SECRB(R5),0(R6),R14  GET PROGRAM PARAMETER LENGTH.\n         TM    SECRB,X'7F'       STUPID LENGTH?\n         BNZ   DONEPARM          YES, SO FORGET IT.\n         ICM   R5,1,SECRB+1      LOAD PARAMETER LENGTH.\n         BZ    DONEPARM          SKIP PARAMETER DISPLAY IF ZERO LENGTH.\n         MVCP  SECRB+2(5),2(6),14 GET (FIRST BIT OF) PROGRAM PARAMETER.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F4'   GREEN.                         (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         CLI   SECPNTR,X'80'     SINGLE PROGRAM PARAMETER?\n         BE    PARMSHOW          YES, GO SHOW IT.\n         MVC   LL-79(4,R2),=C'CMD:'\n         LA    R0,5              GET MAXIMUM LENGTH OF COMMAND STRING.\n         SR    R5,R0             GET LENGTH CODE OF COMMAND.\n         EX    R5,CMDMOVE        LOAD COMMAND TEXT INTO DISPLAY LINE.\n         B     FOUNDCMD          DISPLAY LINE NOW COMPLETE.\nPARMSHOW MVC   LL-79(6,R2),=C'PARM='''\n         BCTR  R5,0              DECREMENT FOR EXECUTE.\n         EX    R5,PARMMOVE       LOAD PARAMETER INTO DISPLAY LINE.\n         LA    R1,LL-72(R5,R2)   POINT PAST END OF LOADED PARAMETER.\n         MVI   0(R1),C''''       SUPPLY TRAILING QUOTE.\nFOUNDCMD BAS   R1,JADDLINE       LINE NOW COMPLETE.\nDONEPARM L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   UNSSAR            YES, TERMINATE DISPLAY GENERATION.\n         DROP  R15               WNDWMNGR.\n         TM    JOBFLAGS,LLES     DISPLAY LOAD LIST ELEMENTS?\n         BZ    NOLDLIST          NO.\n         ICM   R5,15,TCBLLS      ANY LOAD LIST ELEMENTS?\n         BZ    NOLDLIST          NO, NO LOAD LIST FOR THIS TASK.\nMORELLES MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LA    R0,8              EIGHT NAMES PER SCREEN LINE.\n         MVC   LL-79(4,R2),=C'LLE:'\n         LA    R1,LL-73(,R2)     POINT TO FIRST CDE NAME SLOT.\n         LA    R7,8              GET FIRST EIGHT BYTES OF LLE.\nNEXTLLE  MVCP  WORK2(R7),0(R5),R14\n         USING LLE,WORK2\n         L     R5,LLECDPT        POINT TO CDE.\n*                                GET LOADED MODULE NAME.\n         MVCP  0(R7,R1),CDNAME-CDENTRY(R5),R14\n         LA    R1,9(,R1)         POINT TO NEXT CDE NAME POSITION.\n         ICM   R5,15,LLECHN      REACHED END OF LLE CHAIN?\n         BZ    DONELLES          YES.\n         BCT   R0,NEXTLLE        NO, PROCESS NEXT ONE ON CHAIN.\nDONELLES BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         LTR   R5,R5             END OF LLE CHAIN REACHED?\n         BNZ   MORELLES          NO, MAKE ANOTHER LINE.\nNOLDLIST TM    JOBFLAGS,CDES     DISPLAY CONTENTS DIRECTORY ELEMENTS?\n         BZ    NOJPACDE          NO.\n         ICM   R5,15,TCBJPQ      ANY CONTENTS DIRECTORY ELEMENTS?\n         BNP   NOJPACDE          NO, PROBABLY NOT A JOB STEP TASK.\nNEXTCDE  LA    R7,32             FETCH CDE.\n         MVCP  SECCDE(R7),0(R5),R14\n         USING CDENTRY,SECCDE\n         MVC   0(LL-79,R2),MEDX\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         ST    R5,WORK2          STORE CDE ADDRESS.\n         MVC   LL-79(3,R2),=C'CDE:'  (REUSE LITERAL)\n         UNPK  LL-75(7,R2),WORK2+1(4)\n         TR    LL-75(6,R2),HEX-C'0'\n         MVI   LL-69(R2),X'23'   DISPLAY CDE ADDRESS.\n         MVC   LL-67(8,R2),CDNAME   SHOW MODULE NAME.\n         TR    LL-67(8,R2),XLATETBL\n         MVC   LL-57(2,R2),=C'EP'\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELDS.\n         MVI   LL-76(R2),X'24'   MAKE CDE ADDRESS TAB SELECTABLE.\n         MVI   LL-55(R2),X'24'   MAKE ENTRY POINT TAB SELECTABLE.\n         UNPK  LL-54(9,R2),CDENTPT(5)\n         TR    LL-54(8,R2),HEX-C'0'\n         MVI   LL-46(R2),X'23'   DISPLAY AMODE AND ENTRY POINT ADDRESS.\n         MVC   LL-44(3,R2),=C'ATR'\n         UNPK  LL-40(3,R2),CDATTR(2)\n         TR    LL-40(2,R2),HEX-C'0'\n         MVI   LL-38(R2),C'\u00ac'    FLAG NO CDX.\n         TM    CDATTRB,CDCDEX    DOES CDX EXIST?\n         BNO   *+8               NO.\n         MVI   LL-38(R2),C' '    DISPLAY CDATTR.\n         MVC   LL-36(3,R2),=C'AT2'\n         UNPK  LL-32(3,R2),CDATTR2(2)\n         TR    LL-32(2,R2),HEX-C'0'\n         MVI   LL-30(R2),C' '    DISPLAY CDATTR2.\n         TM    CDATTR,CDMIN      MINOR JOB PACK AREA CDE?\n         BZ    JPAMAJOR          NO, MAJOR JOB PACK AREA CDE.\n         MVC   LL-28(19,R2),=C'*** ALIAS OF CDE AT'\n         UNPK  LL-8(7,R2),CDXLMJP+1(4)\n         TR    LL-8(6,R2),HEX-C'0'\n         MVI   LL-2(R2),C' '     DISPLAY MAJOR CDE ADDRESS.\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         B     DONECDE\nJPAMAJOR L     R5,CDXLMJP        POINT TO EXTENT LIST.\n         LA    R7,16\n*                                FETCH EXTENT LIST.\n         MVCP  SECRB+32(R7),0(R5),R14\n         USING XTLST,SECRB+32\n         L     R6,XTLNRFAC       GET THE EXTENT COUNT.\n         L     R7,XTLLNTH        GET XTLST SIZE.\n         AHI   R7,-16            DISCOUNT SIZE ALREADY FETCHED.\n         BNP   JPAXL#OK          FETCH ALREADY COMPLETE.\n         MVCP  SECRB+48(R7),16(R5),R14\nJPAXL#OK LA    R5,XTLMSBLA       POINT TO FIRST EXTENT SIZE.\n         LR    R7,R6             COPY EXTENT COUNT.\n         SLL   R7,2              GET LENGTH OF LENGTH WORDS.\n         AR    R7,R5             POINT TO FIRST EXTENT ADDRESS.\nJPAFMTXL MVC   LL-28(4,R2),=C'XTNT'\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   *+8               NO, DISABLE TAB SELECTABLE FIELD.\n         MVI   LL-24(R2),X'24'   MAKE EXTENT ADDRESS TAB SELECTABLE.\n         UNPK  LL-23(9,R2),0(5,R7)\n         TR    LL-23(8,R2),HEX-C'0'\n         MVI   LL-15(R2),X'23'   DISPLAY EXTENT ADDRESS.\n         MVC   LL-13(4,R2),=C'SIZE'\n         UNPK  LL-9(9,R2),0(5,R5)\n         MVI   LL-9(R2),C' '     CLEAR END OF EXTENT LIST FLAG.\n         TR    LL-8(7,R2),HEX-C'0'\n         MVI   LL-1(R2),C' '     DISPLAY EXTENT LENGTH.\nJPAXT0LP CLI   LL-8(R2),C'0'     LEADING ZERO?\n         BNE   JPAXT0OK          NO.\n         MVC   LL-8(7,R2),LL-7(R2)\n         B     JPAXT0LP          SUPPRESS LEADING ZERO.\nJPAXT0OK BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         BCTR  R6,0              DECREMENT EXTENT COUNT.\n         LTR   R6,R6             END OF EXTENT LIST?\n         BNP   DONECDE           YES, THIS CDE NOW PROCESSED.\n         MVC   0(LL-79,R2),MEDX  NO, ANOTHER EXTENT TO SHOW.\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LA    R5,4(,R5)         POINT TO NEXT EXTENT LENGTH.\n         LA    R7,4(,R7)         POINT TO NEXT EXTENT ADDRESS.\n         B     JPAFMTXL          DISPLAY THE EXTENT LIST ENTRY.\nDONECDE  TM    OSLEVEL+6,CVTH77B0\n         BNO   DONECDX           PRE-Z/OS 2.3.\n         TM    CDATTRB,CDCDEX    DOES CDX EXIST?\n         BNO   DONECDX           NO.\n         TM    CDATTR3,CDPATHN   IS A PATH NAME PRESENT?\n         BNO   DONECDX           NO.\n         L     R5,WORK2          RESTORE CDE POINTER.\n         LA    R7,4              GET POINTER LENGTH.\n         MVCP  SECPNTR(R7),CDECDX-CDE64(R5),R14\n         L     R5,SECPNTR        POINT TO THE CDX.\n         MVCP  SECPNTR(R7),CDXPATHADDR-CDX(R5),R14\n         L     R5,SECPNTR        POINT TO THE CDXPATH STRUCTURE.\n         LA    R7,2              GET LENGTH INDICATOR LENGTH.\n         MVCP  SECPNTR(R7),CDXPATH_LEN-CDXPATH(R5),R14\n         LH    R6,SECPNTR        GET THE PATH NAME LENGTH.\n         LA    R5,CDXPATH_NAME-CDXPATH(,R5)\nPATHLOOP LTR   R6,R6             ANYTHING LEFT TO SHOW?\n         BNP   DONECDX           NO.\n         MVC   0(LL-79,R2),LOWX  YES, PREPARE TO SHOW PATH NAME.\n         MVI   LL-80(R2),X'F2'   RED.                           (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LA    R7,79             GET DISPLAY LINE CAPACITY.\n         CR    R7,R6             IS IT LONGER THAN THE DATA?\n         BNH   PATHLNOK          NO\n         LR    R7,R6\nPATHLNOK SR    R6,R7             DECREASE LENGTH TO GO.\n         MVCP  LL-79(R7,R2),0(R5),R14\n         ALR   R5,R7             POINT PAST COPIED DATA.\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         B     PATHLOOP          GO SHOW REST OF NAME.\nDONECDX  ICM   R5,15,CDCHAIN     REACHED END OF CDE CHAIN?\n         BNZ   NEXTCDE           NO, PROCESS NEXT ONE ON CHAIN.\n         DROP  R3                ASCB.\nNOJPACDE STM   R14,R12,SAVE+12   SAVE REGISTERS.\n         L     R8,=A(JSTGDTLS)   GET STORAGE DISPLAY ROUTINE ADDRESS.\n         L     R4,TCBMSS         GET TCBMSS.\n         BASR  R3,R8             DISPLAY STORAGE USAGE IF APPROPRIATE.\n         L     R4,SECTIOWA       GET TCBUKYSP (TCB+268).\n         TM    JVSPFLAG,X'01'    SHOW SUBPOOLS 229/230?\n         BZ    *+6               NO.\n         BASR  R3,R8             DISPLAY STORAGE USAGE IF APPROPRIATE.\n         L     R4,TCBSWA         GET TCBSWA.\n         TM    JVSPFLAG,X'02'    SHOW SWA SUBPOOLS?\n         BZ    *+6               NO.\n         BASR  R3,R8             DISPLAY STORAGE USAGE IF APPROPRIATE.\n         ST    R2,SAVE+28        SAVE LATEST BUFFER POINTER.\n         LM    R14,R12,SAVE+12   RESTORE REGISTERS.\n         USING ASCB,R3\n         TM    JOBFLAGS,PRBS     DISPLAY REQUEST BLOCKS?\n         BZ    DONERBS           NO.\n         L     R5,TCBRBP         NO, POINT TO ACTIVE REQUEST BLOCK.\n         USING RBDTLS,R2\nLOOKATRB ST    R5,SECPNTR\n         MVC   RBCOLOR,LOWX      SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-80(R2),X'F6'   YELLOW.                        (I3279)\n         MVI   RBDTL,C' '\n         MVC   RBDTL+1(78),RBDTL BLANK OUT NEW DETAIL LINE.\n         UNPK  RBADDR(7),SECPNTR+1(4)\n         TR    RBADDR,HEX-C'0'\n*        MVI   RBADDR+6,C' '     SHOW RB ADDRESS.\n         LA    R7,8+96           GET FIRST 96 BYTES OF RB.\n         AHI   R5,-8             POINT TO RB PREFIX.\n         MVCP  SECRBPFX(R7),0(R5),R14\n         AHI   R5,8              RESTOIRE RB POINTER.\n         USING RBFLAGS1,SECRBPFX\n         MVC   RBSAVER,RBLINKB   SAVE POINTER TO CALLING RB.\n         MVC   RBLBL+1(3),=C'PRB'\n         TM    RBSTAB1,RBFTP     PROGRAM REQUEST BLOCK?\n         BZ    GETRBCDE          YES.\n         MVC   RBLBL(2),=C'TI'\n         TM    RBSTAB1,RBFTTIRB  TASK INTERRUPTION REQUEST BLOCK?\n         BO    GETRBCDE          YES.\n         MVC   RBLBL(2),=C'SV'\n         TM    RBSTAB1,RBFTSVRB  SUPERVISOR REQUEST BLOCK?\n         BO    GETRBCDE          YES.\n         MVI   RBLBL+1,C'I'\n         TM    RBSTAB1,RBFTSIRB  SYSTEM INTERRUPTION REQUEST BLOCK?\n         BO    SHOWRBEP          YES.\n         MVI   RBLBL,C' '\n         TM    RBSTAB1,RBFTIRB   INTERRUPTION REQUEST BLOCK?\n         BO    SHOWRBEP          YES.\n         MVI   RBLBL+1,C' '      WHO KNOWS WHAT IT IS?  NOT ME.\n         MVC   MODULE,=C'**UNKN**'\n         B     MODULEOK\nSHOWRBEP UNPK  MODULE(9),RBEP(5)\n         TR    MODULE,HEX-C'0'\n         MVI   MODULE+8,C' '     SHOW ASYNCHRONOUS ROUTINE'S ENTRY PNT.\n         TM    RBEP,RBEPM        AMODE=31?\n         BO    MODULEOK          YES, NON-ZERO SO DON'T OVERWRITE.\n         MVC   MODULE(2),=C'EP'\n         B     MODULEOK\nGETRBCDE SLR   R6,R6             THE WORRIES OF 31 BIT ADDRESSING.\n         ICM   R6,7,RBCDE1       IS CDE/LPDE ENTRY POINTER ZERO?\n         BNZ   GETPGMNM          NO, GET ACTIVE MODULE NAME.\n         MVC   MODULE(5),=C'IGC00'\n         L     R6,RBPTR          LOAD RBLINK TO POINT TO PREVIOUS RB.\n         BCTR  R6,0              SUBTRACT ONE.\n         BCTR  R6,0              SUBTRACT ANOTHER ONE.\n         LA    R7,2              LENGTH OF RBINTCOD.\n         MVCP  WORK(R7),0(R6),R14    GET 2 BYTES FROM RB-2.\n         LH    R6,WORK           GET INTERRUPT CODE (SVC NUMBER).\n         CHI   R6,109            SVC 109?\n         BNE   JSVCNMBR          NO.\n*                                GET ESR ENTRY CODE FROM R15 SLOT.\n         MVCP  WORK(R7),RBGRS15-RBBASIC+2(R5),R14\n         LH    R6,WORK           GET TYPE-3/4 ESR ENTRY CODE.\n         CVD   R6,WORK\n         MVI   MODULE+2,C'X'     CORRECT MODULE PREFIX.\n         OI    WORK+7,X'0F'      ENSURE NUMERIC DIGITS.\n         B     JESRNMBR\nJSVCNMBR CVD   R6,WORK\nJESRNMBR UNPK  MODULE+5(3),WORK+6(2)\n         TM    RBSTAB1,RBTRSVRB  IS A TYPE 2 NUCLEUS SVC ACTIVE?\n         BO    MODULEOK          NO, LPA TYPE (3 OR 1ST MODULE OF 4).\n         MVC   MODULE+3(3),MODULE+5\n         OI    MODULE+5,X'F0'    YES.\n         MVC   MODULE+6(2),BLANKS\n         B     MODULEOK\nGETPGMNM LA    R7,32             FETCH RB'S CDE.\n         MVCP  SECCDE(R7),0(R6),R14\n         TM    CDATTR3,CDPATHN   IS ACTUAL NAME A UNIX PATH?\n         BNO   NOTAPATH          NO.\n         MVC   MODULE(4),=C'CDE:'\n         UNPK  MODULE+4(7),RBCDE1(4)\n         TR    MODULE+4(6),HEX-C'0'\n         MVI   MODULE+10,C' '\n         B     MODULEOK\nNOTAPATH MVC   MODULE,CDNAME     GET CURRENTLY ACTIVE MODULE NAME.\n         CLC   =C'IKJEFT',MODULE TSO TMP RUNNING IN JOB STEP?\n         BNE   MODULEOK          CANNOT VERIFY THAT HERE.\n         OI    JOBFLAG3,TSOJ     YES, FLAG THIS.\nMODULEOK MVC   RBPSWLBL,=C'PSW'\n         TM    JOBFLAG3,LTCB     STATUS SAVED IN IHSA?\n         BZ    LLOCKOK2          NO.\n         CLC   SECPNTR,TCBRBP    CURRENT RB?\n         BNE   LLOCKOK2          NO.\n         MVC   RBOPSW,SAVELPSW   YES, DISPLAY RELEVANT PSW.\nLLOCKOK2 DC    0H\n         UNPK  RBPSW1(9),RBOPSW(5)\n         UNPK  RBPSW2(9),RBOPSW+4(5)\n         TR    RBPSW1(17),HEX-C'0'\n         MVI   RBPSW1+8,C' '     SHOW RBOPSW.\n*        MVI   RBPSW2+8,C' '\n         SLR   R6,R6\n         IC    R6,RBWCF          GET REQUEST BLOCK WAIT COUNT.\n         CVD   R6,WORK\n         MVC   RBWTLBL,=C'WAIT'\n         MVC   RBWAITCT,RBWCF    SHOW REQUEST BLOCK WAIT COUNT.\n         NI    RBWAITCT,X'0F'\n         TR    RBWAITCT,HEX\n         MVC   RBFLGSLB,=C'FLGS'\n         UNPK  RBFLGS(3),RBFLAGS1(2)\n         TR    RBFLGS,HEX-C'0'\n         MVI   RBFLGS+2,C' '\n         MVC   RBLICLBL,=C'LIC'\n         MVC   RBILC,RBINLNTH    SHOW INSTRUCTION LENGTH COUNTER.\n         NI    RBILC,X'0F'\n         TR    RBILC,HEX\n         UNPK  RBINTC(5),RBINTCOD(3)\n         TR    RBINTC,HEX-C'0'   SHOW INTERRUPT CODE.\n         MVI   RBINTC+4,C' '\n         TR    LL-79(79,R2),XLATETBL\n         MVI   RBADDR-1,X'25'\n         MVI   RBPSW2-1,X'25'\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELDS.\n         MVI   RBADDR-1,X'24'    MAKE RB ADDRESS TAB SELECTABLE.\n         MVI   RBPSW2-1,X'24'    MAKE PSW ADDRESS TAB SELECTABLE.\n         MVI   RBADDR+6,X'26'\n         MVI   RBPSW1-1,X'25'\n         MVI   RBPSW2+8,X'26'\n         MVI   RBWAITCT-1,X'25'\n         MVI   RBWAITCT+1,X'26'\n         MVI   RBFLGS-1,X'25'\n         MVI   RBFLGS+2,X'26'\n         MVI   RBILC-1,X'25'\n         MVI   RBINTC+4,X'26'\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         TM    JOBFLAGS,REGS     SHOW RB REGISTERS?\n         BZ    DONEXTRB          NO.\n         ST    R14,WORK          SAVE MVCP STORAGE ACCESS KEY.\n         LA    R5,RBGRSAVE       POINT TO RB REGISTER SAVE AREA.\n         BAS   R14,JFMTGPRS      GO DISPLAY REGISTERS.\n         L     R14,WORK          RESTORE MVCP STORAGE ACCESS KEY.\nDONEXTRB ICM   R5,15,RBPTR       GET PREVIOUS RB.\n         BZ    DONERBS           IGNORE RUBBISH.\n         CR    R4,R5             REALLY POINTING TO TCB?\n         BNE   LOOKATRB          NO, PROCESS NEXT RB.\n         DROP  R2                RBDTLS.\nDONERBS  ST    R4,WORK           SAVE THIS TCB ADDRESS.\n         LM    R4,R6,TCBNTC      LOAD TCB POINTERS.\n         LTR   R4,R4             CHECK FOR OLDER SIBLING TASKS.\n         BZ    TRYCHILD          NONE, SO TRY FOR CHILD TASK.\n         LTR   R6,R6             HAVE SIBLING, BUT ANY CHILD TASKS?\n         BZ    STCBLOOP          NO, SO FORGET ABOUT STACKING SUBTASK.\n         LA    R7,TASKSTAK       YES, SO SAVE CHILD POINTER FOR LATER.\nPUSHSTAK ICM   R8,15,0(R7)       TASKSTAK ENTRY ZERO?\n         BZ    SAVEPNTR          YES, CAN USE THIS ENTRY.\n         BM    STCBLOOP          STACK FULL, TOO BAD.\n         LA    R7,4(,R7)         POINT TO NEXT STACK ENTRY\n         B     PUSHSTAK                   AND TRY IT.\nSAVEPNTR ST    R6,0(,R7)         STORE LAST CHILD TASK POINTER.\n         ST    R7,STACKPTR       SAVE CURRENT POINTER.\n         B     STCBLOOP          PROCESS OLDER SIBLING TCB.\nTRYCHILD LTR   R4,R6             GET TASK'S YOUNGEST CHILD TASK.\n         BNZ   STCBLOOP          PROCESS THIS SUBTASK.\n         SLR   R5,R5             NO SUBTASKS EXIST SO POP THE STACK.\n         ICM   R7,15,STACKPTR    GET THE STACK POINTER.\n         BZ    EOTCBCHN          ZERO SO END OF TCB CHAIN.\n         LA    R6,TASKSTAK       POINT TO START OF STACK.\n         L     R4,0(,R7)         LOAD TCB ADDRESS.\n         ST    R5,0(,R7)         CLEAR THIS ENTRY WHICH IS NOW FREE.\n         CR    R6,R7             IS THE STACK NOW EMPTY?\n         BNE   POPSTACK          NO.\n         ST    R5,STACKPTR       YES, ZERO POINTER.\n         B     STCBLOOP          PROCESS THIS SUBTASK.\nPOPSTACK AHI   R7,-4             POINT TO PREVIOUS STACK ENTRY.\n         ST    R7,STACKPTR       SAVE UPDATED STACK POINTER.\n         B     STCBLOOP          PROCESS THIS SUBTASK.\nEOTCBCHN L     R4,WORK        NO MORE TASKS, POINT TO LAST TASK WE DID.\n         XC    SAVETCB(72),SAVETCB    ERASE TCB PLACE MARKERS.\nTIOSECTN ICM   R5,15,TCBTIO           POINT TO TASK INPUT/OUTPUT TABLE.\n         BNZ   HAVETIOT               IT EXISTS, SO PROCESS IT.\n         L     R1,WINMANAD            POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R1\n         L     R1,WINBUFF             POINT TO DISPLAY FORMAT AREA.\n         DROP  R1                     WNDWMNGR.\n         MVC   LL-8(7,R1),=C'EXCPCNT' LOAD \"EXCPCNT\" INTO TOP HEADING.\n         L     R5,ASCBIOSC            GET ADDRESS SPACE EXCP COUNT.\n         CVD   R5,WORK                DISPLAY THIS COUNT IN THE SECOND\n         MVC   LL+LL-9(8,R1),ED7Z             LINE (HOPE FOR STC).\n         ED    LL+LL-9(8,R1),WORK+4\n         B     UNSSAR                 END OF DETAIL FORMATTING.\nHAVETIOT LR    R5,R2                  POINT TO CURRENT DISPLAY LINE.\n         AHI   R5,-LL                 POINT TO PREVIOUS DISPLAY LINE.\n         MVI   2(R5),X'F4'            UNDERSCORE.               (I3279)\n         MVI   5(R5),X'C4'            UNDERLINE.                (F9526)\n         MVC   0(LL-79,R2),HIGHX      HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'        PINK.                     (I3279)\n         MVI   LL-79(R2),C' '         CLEAR DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-79(L'STEPHDR,R2),STEPHDR\n         L     R4,TCBTIO              POINT TO TIOT.\n         ST    R4,TIOTADDR            SAVE ITS ADDRESS.\n         LA    R5,25\n         MVCP  SECTIOWA(R5),0(R4),R14 FETCH FIRST 25 BYTES OF TIOT.\n         USING TIOT1,SECTIOWA\n         ICM   R6,15,TCBJSCB          POINT TO ACTIVE JSCB.\n         ST    R6,SAVRETAD            SAVE ADDRESS FOR TIODSNFM.\n         BZ    GOTJOBID   NOSMFTBL    DOES NOT EXIST SO LOOK AT TIOT.\n         LA    R5,140\n*                                     FETCH 140 BYTES OF JSCB.\n         MVCP  SECJSCB(R5),JSCBSTEP-IEZJSCB(R6),R14\n         USING JSCBSTEP,SECJSCB\n         TM    JOBFLAG2,PPRM          SHOWING PROGRAM PARAMETER?\n         BZ    SCTXDONE               NO.\n         SR    R6,R6                  CLEAR FOR INSERT.\n         ICM   R6,7,JSCSCTP           TRYING TO, SO POINT TO SCT.\n         BZ    SCTXDONE               SKIP PARM DISPLAY IF NONE.\n         TMLL  R6,1                   ODD ADDRESS?\n         BNZ   SCTXDONE               YES, SKIP DISPLAY.\n         LA    R5,4\n         MVCP  SECPNTR(R5),84(R6),R14 FETCH SCTX ADDRESS.\n         SR    R8,R8\n         ICM   R8,7,SECPNTR           POINT TO SCTX.\n         BZ    SCTXDONE               SKIP PARM DISPLAY IF NONE.\n         TMLL  R8,1                   ODD ADDRESS?\n         BNZ   SCTXDONE               YES, SKIP DISPLAY.\n         MVCP  WORK(R5),24(R6),R14    FETCH PARM LENGTH HALFWORD.\n         ICM   R5,1,WORK+1            GET LENGTH LOW-ORDER BYTE.\n         BZ    SCTXDONE               SKIP PARM DISPLAY IF NONE.\n         MVC   0(LL-79,R2),LOWX       LOW INTENSITY.\n         MVI   LL-80(R2),X'F4'        GREEN.                    (I3279)\n         MVI   2(R2),X'F4'            UNDERSCORE.               (I3279)\n         MVI   5(R2),X'C4'            UNDERLINE.                (F9526)\n         MVI   LL-79(R2),C' '         BLANK DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-79(6,R2),=C'PARM='''\n         MVCP  LL-73(R5,R2),20(R8),R14      FETCH PARAMETER STRING.\n         LA    R1,LL-73(R5,R2)        POINT PAST END OF LOADED STRING.\n         MVI   0(R1),C''''            SUPPLY TRAILING QUOTE.\n         BAS   R1,JADDLINE            LINE NOW COMPLETE.\n         BNL   UNSSAR                 HANDLE END OF FORMATTING AREA.\n         MVC   0(LL-79,R2),HIGHX      HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'        PINK.                     (I3279)\n         MVI   LL-79(R2),C' '         CLEAR DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-79(L'STEPHDR,R2),STEPHDR\nSCTXDONE ICM   R6,15,JSCBSSIB    POINT TO SSIB.\n         BZ    GOTJOBID          CATER FOR NULL SSIB POINTER.\n         LA    R5,8\n*                                FETCH JOB IDENTIFIER INTO HEADER.\n         MVCP  LL-79(R5,R2),SSIBJBID-SSIB(R6),R14\nGOTJOBID BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         MVI   LL-79(R2),C' '    CLEAR DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         USING STEPDTLS,R2\n         MVC   STPCOLOR,LOWX\n         MVC   STEPNJOB,TIOCNJOB\n         MVC   STEPSTEP,TIOCPSTN\n         MVC   STEPPROC,TIOCJSTN\n         SLR   R8,R8\n         IC    R8,JSCBSTEP       GET CURRENT STEP NUMBER.\n         CVD   R8,WORK\n         MVC   STEPNMBR,ED3\n         ED    STEPNMBR,WORK+6\n         MVC   STEPAPF+1(2),=C'NO'\n         TM    JSCBOPTS,JSCBAUTH\n         BZ    GOTAPF            STEP IS NOT AUTHORIZED FOR MODESET.\n         MVC   STEPAPF,=C'YES'   STEP IS AUTHORIZED FOR MODESET.\nGOTAPF   MVC   STEPPASS+1(2),=C'NO'\n         TM    JSCBSWT1,JSCBPASS\n         BZ    GOTPASS           STEP CAN'T BYPASS PASSWORD PROTECTION.\n         MVC   STEPPASS,=C'YES'  STEP CAN BYPASS PASSWORD PROTECTION.\nGOTPASS  L     R8,ASCBIOSC       GET CURRENT EXCP TOTAL.\n         CVD   R8,WORK\n         MVC   XCPTOTAL,ED11\n         MVI   XCPTOTAL+10,X'20'\n         ED    XCPTOTAL,WORK+2\n         ICM   R6,15,TCBTCT      POINT TO ACTIVE TIMING CONTROL TABLE.\n         BNZ   GETTCT            BRANCH TO TCT PROCESSING.\n         SPACE 2\nNOSMFTBL MVC   REGNSIZE+1(21),=C'(** NO SMF TABLES **)'\n         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         MVI   5(R2),X'C4'       UNDERLINE.                     (F9526)\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         CLI   TIOELNGH,0        ZERO LENGTH FIRST ENTRY?\n         BE    UNSSAR            YES, NO TIOT ENTRIES TO REPORT.\n         DROP  R2                STEPDTLS.\n         TM    JOBFLAG2,NODD     SUPPRESS DATA SET DETAILS?\n         BO    UNSSAR            YES.\n         MVC   0(LL-79,R2),HIGHX    HIGH INTENSITY.\n         MVI   LL-80(R2),X'F2'      RED.                        (I3279)\n         MVC   LL-79(79,R2),TIOTHDR FILE DETAILS WITH NO TCT.\n         MVC   LL-58(12,R2),BLANKS  ERASE \"EXCPCNT BLKSZ\" FROM HEADING.\n         MVC   LL-9(9,R2),LL-10(R2) ERASE \"CNCT/IO\" FROM HEADING.\n         TM    JOBFLAG2,ODCB        DISPLAYING OPEN DCB DETAILS?\n         BZ    DDHDROK1             NO, HEADING OKAY.\n         MVC   LL-51(51,R2),ODCBHDR YES, INDICATE THIS IN HEADING.\nDDHDROK1 BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         ST    R2,DDLINE1        SAVE ADDRESS OF FIRST DD DETAIL LINE.\n         SLR   R8,R8             CLEAR FOR INSERT.\n         IC    R8,TIOELNGH       LOAD FIRST TIOT DD ENTRY LENGTH.\n*                                POINT TO FIRST TIOT ENTRY.\n         LA    R4,TIOELNGH-TIOT1(,R4)\n         USING TIOTDTLS,R2\nTIOTLOOP MVC   TIOCOLOR,LOWX     LOW INTENSITY.\n         MVI   TIODDNAM-1,X'F4'  GREEN.                         (I3279)\n         MVI   TIODDNAM,C' '     BLANK NEXT DETAIL LINE.\n         MVC   TIODDNAM+1(78),TIODDNAM\n         LR    R15,R4            COPY TIOT ENTRY ADDRESS.\n         S     R15,TIOTADDR      GET ENTRY OFFSET INTO TIOT.\n         STCM  R15,3,TIOFFSET    SAVE FOR LATER DCB MATCHING.\n         LA    R5,1(,R8)         GET ENTRY LENGTH PLUS ONE.\n         DROP  R13               GOTAREA AND DEPENDENT USINGS.\n         USING GOTAREA,R13\n         MVCP  SECTIOWA(R5),0(R4),R14 FETCH NEXT TIOT ENTRY.\n         USING TIOENTRY,SECTIOWA\n         MVC   TIODDNAM,TIOEDDNM      LOAD THE DDNAME.\n         CLI   TIODDNAM,0             FREED ENTRY? (NOT FROM TCT PATH.)\n*        BNE   NOTFREED               NO.\n*        MVC   TIOUCBSV(9),=C'(DDFREED)'\n*        B     NOTERMNL               YES.\n         BE    FREEDDD                YES, SUPPRESS FROM DISPLAY.\nNOTFREED SLR   R15,R15                CLEAR FOR INSERT.\n         MVI   TIOUCBS4,C' '\n         ICM   R15,7,TIOEFSRT         POINT TO UCB.\n         BZ    NOUCBPTR               NO UCB POINTER PRESENT.\n         LA    R5,40\n         MVCP  SAVE+16(R5),0(R15),R14 FETCH UCB BASIC SECTION.\n         LA    R15,SAVE+16\n         USING UCBOB,R15\n         MVC   TIOUCBS3,UCBNAME       COPY UCB NAME.\n         CLI   TIOUCBS3,C'V'          VIO UCB (IN PRIVATE AREA)?\n         BE    NOUCBPTR               YES, VOLUME SERIAL BLANK.\n         CLI   TIOUCBS3,C'U'          4-DIGIT DEVICE NUMBER?\n         BNE   DEV#OK1                NO.\n         UNPK  WORK(5),UCBCHAN(3)     YES.\n         TR    WORK(4),HEX-C'0'\n         MVC   TIOUCBS4,WORK\nDEV#OK1  MVC   TIOVOLUM,=C'**UR**'\n         TM    UCBTBYT3,UCB3UREC      UNIT RECORD DEVICE CLASS?\n         BO    NOTERMNL               YES.\n         MVC   TIOVOLUM+1(4),=C'GRAF'\n         TM    UCBTBYT3,UCB3DISP      GRAPHIC DEVICE CLASS?\n         BO    NOTERMNL               YES.\n         MVC   TIOVOLUM+1(4),=C'COMM'\n         TM    UCBTBYT3,UCB3COMM      COMMUNICATION DEVICE CLASS?\n         BO    NOTERMNL               YES - INCLUDES CTCA.\n         MVC   TIOVOLUM,=C'SCRTCH'\n         CLI   UCBVOLI,X'FF'          SCRATCH TAPE REQUEST?\n         BE    NOUCBPTR               YES.\n         MVC   TIOVOLUM,UCBVOLI       NO, LOAD VOLUME SERIAL NUMBER.\n         B     NOTERMNL               MUST BE TAPE OR DASD.\nNOUCBPTR TM    TIOELINK,TIOESYIN+TIOESYOT\n         BZ    NOTJESFL               NOT A SPOOL FILE.\n         MVC   TIOUCBS3,=C'JES'\nNOTJESFL TM    TIOELINK,TIOEQNAM\n         BZ    NOTQUENM               QNAME OPERAND NOT ON DD CARD.\n         MVC   TIOUCBS4,=C'TCAM'      NO AIM/DBDC IN IBM OS.\nNOTQUENM TM    TIOELINK,TIOTTERM\n         BZ    NOTERMNL               DEVICE IS NOT A TERMINAL.\n         MVC   TIOUCBS4,=C'TERM'\nNOTERMNL L     R5,=A(TIODSNFM)   FORMAT DATA SET AND/OR MEMBER NAME.\n         BASR  R1,R5\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   OPENSTUF          HANDLE END OF FORMATTING AREA.\nFREEDDD  LA    R1,TIOENTRY(R8)   POINT TO LENGTH OF NEXT TIOT ENTRY.\n         CLI   0(R1),0           REACHED END OF TIOT YET?\n         BE    OPENSTUF          YES, COMMENCE DEB-DCB SCAN.\n         LA    R4,0(R8,R4)       POINT TO NEXT TIOT ENTRY.\n         IC    R8,0(,R1)         GET LENGTH OF NEXT TIOT ENTRY.\n         B     TIOTLOOP          PROCESS NEXT TIOT ENTRY.\n         DROP  R2,R15            TIOTDTLS, UCBOB.\n         SPACE\n*  BY TREATING TCTCORE AS A DISJOINT STRUCTURE FROM THE TCT BASE,\n*  THE CODE WILL HANDLE RUN-TIME TCT STRUCTURES WHERE THE OFFSET\n*  OF TCTCORE HAS CHANGED IE. WHERE THE ENCOUNTERED TCT HAS A\n*  DIFFERENT LENGTH DATA CONTENT IN THE BASE BEFORE THE CORE TABLE\n*  WHEN COMPARED TO THE ASSEMBLE-TIME DSECT MACRO IEFTCT.\n         USING STEPDTLS,R2\nGETTCT   LA    R5,4              FILE DETAILS USING TCT.\n*                                FETCH TCTCRTBL AT TCT+8.\n         MVCP  SECPNTR(R5),TCTCRTBL-SMFTCT(R6),R14\n         L     R8,SECPNTR        GET ADDRESS OF TCT CORE TABLE.\n         SLR   R8,R6             GET OFFSET OF TCT CORE TABLE.\n         LA    R5,TCTCREZ(,R8)   GET TCT COMMON+CORE TABLE SIZE.\n         LA    R0,256\n         LA    R15,SECTCT        POINT TO TCT BUFFER.\nGETTCTLP MVCP  0(R5,R15),0(R6),R14     FETCH TCT DATA.\n         BZ    GETTCTOK\n         AR    R15,R0            ADJUST TARGET ADDRESS.\n         AR    R6,R0             ADJUST SOURCE ADDRESS.\n         SR    R5,R0             ADJUST REMAINING LENGTH.\n         BP    GETTCTLP          GET NEXT TCT CHUNK.\nGETTCTOK LA    R7,SECTCT(R8)     POINT TO COPY OF CORE TABLE.\n         USING TCTCORE,R7\n         L     R8,TCTRSZ         GET NUMBER OF 2K BLOCKS IN REGION.\n         SLL   R8,1              MULTIPLY BY 2 TO GET KILOBYTES.\n*        LA    R15,64            GET DEFAULT EXTENSION KILOBYTES.\n*        SR    R8,R15            SUBTRACT DEFAULT EXTENSION SIZE.\n         CVD   R8,WORK\n         MVC   REGNSIZE,ED7      LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    REGNSIZE,WORK+4\n         MVI   REGIONK,C'K'\n         DROP  R7                TCTCORE.\n         USING SMFTCT,SECTCT\n         L     R8,TCTLIN         GET TERMINAL INPUT COUNT.\n         CVD   R8,WORK\n         MVC   STPTGETS,ED5\n         ED    STPTGETS,WORK+5\n         L     R8,TCTLOUT        GET TERMINAL OUTPUT COUNT.\n         CVD   R8,WORK\n         MVC   STPTPUTS,ED5\n         ED    STPTPUTS,WORK+5\n         DROP  R2                STEPDTLS.\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         MVI   5(R2),X'C4'       UNDERLINE.                     (F9526)\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-79+25(4,R2),=C'VIRT'\n         TM    ASCBRSMF,ASCBVEQR VIRTUAL EQUALS REAL USER?\n         BZ    VEQUALSV          NO, VIRTUAL EQUALS VIRTUAL.\n         MVC   LL-79+25(4,R2),=C'REAL'\nVEQUALSV MVC   LL-79+39(3,R2),=C'SYS'\n         MVC   LL-79+52(3,R2),=C'EXT'\n         MVC   LL-79+67(3,R2),=C'SYS'\n         L     R1,ASCBASXB       POINT TO ASXB IN SASID.\n         LA    R6,4              POINTER LENGTH.\n         MVCP  SECPNTR(R6),ASXBSENV-ASXB(R1),R14\n         ICM   R1,15,SECPNTR     POINT TO ACEE IN SASID.\n         BZ    GTPGMRNM          SKIP IT IF POINTER IS NULL.\n         LA    R15,9             LENGTH OF LENGTH CODE AND ACCESSOR ID.\n*                                GET SECURITY USER ID.\n         MVCP  SECUSER(R15),ACEEUSER-ACEE(R1),R14\n*                                GET PROGRAMMER NAME ADDRESS.\n         MVCP  SECPNTR(R6),ACEEUNAM-ACEE(R1),R14\n         LA    R6,20             LENGTH OF PROGRAMMER NAME.\n         ICM   R15,15,SECPNTR    POINT TO PROGRAMMER NAME IN SASID.\n         BZ    TOPSECRT          SKIP IT IF POINTER IS NULL.\n         LA    R6,21             LENGTH OF INDICATOR PLUS NAME.\n*  ASSUME 200 BYTES AFTER START OF CURRENT DISPLAY LINE IS AVAILABLE\n*  FOR A TEMPORARY WORK AREA.\n*                                LOAD PROGRAMMER NAME.\n         MVCP  200(R6,R2),0(R15),R14\n         ICM   R6,1,200(R2)      GET NAME LENGTH (ALWAYS 21 FOR RACF).\n         BNP   XLATPGMR          IGNORE IF LENGTH ZERO OR BAD.\n         BCTR  R6,0              DECREMENT FOR LENGTH INDICATOR.\n         BCTR  R6,0              ACF2 TRUNCATES TRAILING BLANKS.\n         LTR   R6,R6             PERFORM ANOTHER VALIDITY TEST.\n         BM    XLATPGMR          IGNORE IF LENGTH INVALID.\n         EX    R6,ACNAMELD       MOVE 20 (RACF) OR UP TO 20 (ACF2).\n         B     XLATPGMR\nACNAMELD MVC   LL-79(0,R2),201(R2)              <<< EXECUTED >>>\nTOPSECRT MVCP  LL-79(R6,R2),224(R1),R14  LOAD PGMR NAME (TOP SECRET).\nXLATPGMR CLI   LL-79(R2),C'A'    REALLY A NAME?\n         BL    NOPGMRNM          NO, BLANK IT OUT.\n         TR    LL-79(20,R2),XLATETBL\n         B     GTPGMRNM          STILL, ENSURE NO UNPRINTABLES.\nNOPGMRNM MVC   LL-79(20,R2),BLANKS\n         DROP  R13               GOTAREA AND DEPENDENT USINGS.\n         USING GOTAREA,R13\n         USING TCTCORE,R7\nGTPGMRNM L     R1,TCTLWM\n         SRL   R1,10\n         CVD   R1,WORK\n         MVC   LL-50(7,R2),ED5\n         ED    LL-50(6,R2),WORK+5\n         L     R1,TCTHWM         GET USED SYSTEM REGION.\n         SRL   R1,10             (LSQA.)\n         CVD   R1,WORK\n         MVC   LL-37(7,R2),ED5\n         ED    LL-37(6,R2),WORK+5\n         L     R1,TCTELWM        GET USED EXTENDED USER REGION.\n         SRL   R1,10\n         CVD   R1,WORK\n         MVC   LL-24(8,R2),ED7\n         ED    LL-24(8,R2),WORK+4\n         MVI   LL-16(R2),C'K'\n         L     R1,TCTEHWM        GET USED EXTENDED SYSTEM REGION.\n         SRL   R1,10             (ELSQA.)\n         CVD   R1,WORK\n         MVC   LL-9(8,R2),ED7\n         ED    LL-9(8,R2),WORK+4\n         MVI   LL-1(R2),C'K'\n         DROP  R7                TCTCORE.\n*  TCTCORE PROCESSING COMPLETE.  RESUME ACCESS TO COPY OF TCT BASE.\n         USING SMFTCT,SECTCT\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         ICM   R1,15,ASCBTSB     IS THIS A TSO USER?  (GOT A TSB?)\n         BZ    ACIDCHKD          NO, CAN'T REALLY VERIFY ACID.\n         CLI   SECUSER,0         IS ACCESSOR ID LENGTH ZERO?\n         BE    ACIDCHKD          YES, PROBABLY NOT A RACF USER.\n         CLI   SECUSER+1,C'*'    IS THE USER A RACF USER?\n         BE    ACIDCHKD          NO, SO THAT'S ALRIGHT.\n         ICM   R1,15,ASCBJBNS    GET JOBNAME POINTER.\n         BZ    ACIDCHKD          FORGET CHECK IF NO JOB NAME POINTER.\n         CLC   0(8,R1),SECUSER+1 RACF AND TSO USERIDS EQUAL?\n         BE    ACIDCHKD          YES, JUST AS WELL TOO.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F2'   RED.                           (I3279)\n         MVI   2(R2),X'F1'       NO, USE BLINKING FOR ALARM!    (I3279)\n         MVI   5(R2),X'60'       USE BLINKING FOR ALARM!        (F9526)\n         TR    SECUSER+1(8),XLATETBL       JUST TO BE RIGOROUS.\n         MVI   LL-79(R2),C'*'    ASTERISK THIS DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2) (MUST BE DESPERATE FOR BLINKING!)\n         MVC   LL-76(L'ALRM1MSG,R2),ALRM1MSG  LOAD ALARM MESSAGE LINE.\n         MVC   LL-76+L'ALRM1MSG(8,R2),0(R1)\n         MVC   LL-76+L'ALRM1MSG+8(L'ALRM2MSG,R2),ALRM2MSG\n         MVC   LL-76+L'ALRM1MSG+8+L'ALRM2MSG(8,R2),SECUSER+1\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\nACIDCHKD TM    JOBFLAG2,NODD     SUPPRESS DATA SET DETAILS?\n         BO    UNSSAR            YES.\n*                                ZERO LENGTH FIRST TIOT ENTRY?\n         CLI   TIOELNGH-TIOT1+SECTIOWA,0\n         BE    UNSSAR            YES, NO TIOT ENTRIES TO REPORT.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F2'   RED.                           (I3279)\n         MVC   LL-79(79,R2),TIOTHDR\n         TM    JOBFLAG2,ODCB     DISPLAYING OPEN DCB DETAILS?\n         BZ    DDHDROK2          NO, HEADING OKAY.\n         MVC   LL-51(51,R2),ODCBHDR YES, INDICATE THIS IN HEADING.\nDDHDROK2 BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         ST    R2,DDLINE1        SAVE ADDRESS OF FIRST DD DETAIL LINE.\n         L     R8,TCTIOTBL       POINT TO TCT I/O TABLE.\n*  THE TCT I/O MEASUREMENT TABLE COMMON SECTION (HEADER) HAS THE SAME\n*  LENGTH (IE. 8) AS A LOOKUP TABLE ENTRY.  BECAUSE THE ENTRY POINTER\n*  IS INCREMENTED AT THE START OF THE LOOP, THE FIRST TIME THROUGH\n*  THE LOOP PROCESSES THE FIRST DD LOOKUP TABLE ENTRY.\n         USING TIOTDTLS,R2\nLOOPTIOE LA    R8,8(,R8)         POINT TO NEXT DD LOOKUP TABLE ENTRY.\n         LA    R5,8\n*                                FETCH THIS DD LOOKUP ENTRY OF 2 WORDS.\n         MVCP  WORK2(R5),0(R8),R14\n         ICM   R1,15,WORK2       END OF DD LOOKUP TABLE?\n         BZ    OPENSTUF          YES, COMMENCE DEB-DCB SCAN.\n         MVC   TIOCOLOR,LOWX     LOW INTENSITY.\n         MVI   TIODDNAM-1,X'F4'  GREEN.                         (I3279)\n         MVI   TIODDNAM,C' '     BLANK NEXT DETAIL LINE.\n         MVC   TIODDNAM+1(78),TIODDNAM\n         LA    R0,1              ASSUME ONE UNIT SECTION.\n         L     R6,TCTIOTBL       POINT TO TCT I/O TABLE.\n         AL    R6,WORK2+4        POINT TO TCT TIOT ENTRY.\n         ST    R6,SAVE           SAVE THE ADDRESS FOR LATER.\nNEXTTIOE LH    R5,JTIOELEN\n         MVCP  SECTCT+16(R5),0(R6),R14  FETCH THIS ENTRY.\n         USING TCTDDENT,SECTCT+16\n         MVC   TIOUCBS4,=C' VIO'\n         TM    TCTFLGS,TCTVAMDS\n         BO    DONEUCB           VIO DATA SET.\n         MVC   TIOUCBS3,=C'JES'\n         CLI   TCTSCTR,X'FF'\n         BE    DONEUCB           SYSIN DATA SET.\n         MVC   TIOUCBS3,=C'DMY'\n         SLR   R15,R15           CLEAR FOR INSERT.\n         ICM   R15,15,TCTUCBP    ANY UCB POINTER?\n         BZ    DONEUCB           NO.\n         LA    R5,40             YES, FETCH UCB BASIC SECTION.\n         MVCP  SAVE+16(R5),0(R15),R14\n         LA    R15,SAVE+16\n         USING UCBOB,R15\n         MVC   TIOUCBS3,UCBNAME  LOAD UCB NAME.\n         CLI   TIOUCBS3,C'U'     4-DIGIT DEVICE NUMBER?\n         BNE   DEV#OK2           NO.\n*                                FETCH DEVICE NUMBER.\n         UNPK  WORK(5),UCBCHAN(3)\n         TR    WORK(4),HEX-C'0'\n         MVC   TIOUCBS4,WORK\nDEV#OK2  MVC   TIOVOLUM,=C'**UR**'\n         TM    UCBTBYT3,UCB3UREC UNIT RECORD DEVICE CLASS?\n         BO    DONEUCB           YES.\n         MVC   TIOVOLUM+1(4),=C'GRAF'\n         TM    UCBTBYT3,UCB3DISP GRAPHIC DEVICE CLASS?\n         BO    DONEUCB           YES.\n         MVC   TIOVOLUM+1(4),=C'COMM'\n         TM    UCBTBYT3,UCB3COMM COMMUNICATION DEVICE CLASS?\n         BO    DONEUCB           YES - INCLUDES CTCA.\n         MVC   TIOVOLUM,=C'SCRTCH'\n         CLI   UCBVOLI,X'FF'     SCRATCH TAPE REQUEST?\n         BE    DONEUCB           YES.\n         MVC   TIOVOLUM,UCBVOLI  NO, LOAD VOLUME SERIAL NUMBER.\n         CLI   TCTSCTR,0         UNIT COUNT?\n         BE    DONEUCB           NO, DON'T ALTER COUNTER.\n         IC    R0,TCTSCTR        YES, LOAD CORRECT VALUE.\nDONEUCB  BAS   R1,TCTIOFMT       FORMAT EXCP AND CONNECT FIGURES.\n         DROP  R15               UCBOB.\nTCTIODON L     R6,WORK2          GET TASK TIOT DD ENTRY OFFSET (NOT 0).\n         STCM  R6,3,TIOFFSET     SAVE IT FOR DCB MATCHING.\n         ALR   R6,R4             POINT TO TIOT DD ENTRY.\n         LA    R5,18             GET TIOT ENTRY LENGTH FOR ONE DEVICE.\n*                                FETCH THIS TIOT ENTRY.\n         MVCP  SECTIOWA(R5),0(R6),R14\n         USING TIOENTRY,SECTIOWA\n         MVC   TIODDNAM,TIOEDDNM LOAD THE DDNAME.\n         TM    JOBFLAG2,XCP0     DISPLAYING ZERO I/O COUNT DATA SETS?\n         BO    HAVEDDN           YES.\n         CLI   TIODDNAM,C' '     CONCATENATED DATA SET?\n         BE    CONCATDD          YES.\n         MVC   PREVDDN,TIODDNAM  NO, SAVE IT FOR CONCATENATIONS.\n         B     HAVEDDN\nCONCATDD MVC   TIODDNAM,PREVDDN  ENSURE NON-BLANK DD NAME.\nHAVEDDN  TM    TIOELINK,TIOESYIN+TIOESYOT\n         BZ    NOTSPOOL          NOT A SPOOL FILE.\n         MVC   TIOUCBS4,=C' JES'\nNOTSPOOL TM    TIOELINK,TIOEQNAM\n         BZ    NOTQNAME          QNAME OPERAND NOT ON DD CARD.\n         MVC   TIOUCBS4,=C'TCAM' NO AIM/DBDC IN IBM OS.\nNOTQNAME TM    TIOELINK,TIOTTERM\n         BZ    NOTTRMNL          DEVICE IS NOT A TERMINAL.\n         MVC   TIOUCBS4,=C'TERM'\nNOTTRMNL L     R5,=A(TIODSNFM)   FORMAT DATA SET AND/OR MEMBER NAME.\n         BASR  R1,R5\nGOTDSN   LH    R1,TCTBLKSZ       LOAD BLOCK SIZE FROM TCT.\n         N     R1,=F'32767'      RESET BLOCK SIZE CHANGED BIT.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   *+8               NO.\n         L     R1,TCTXBLKS+4     YES, GET SIZE FROM LARGER FIELD.\n         CVD   R1,WORK           SHOW SIZE OF LAST BLOCK TRANSFERRED.\n         MVC   TIOBLKSZ,ED5Z\n         ED    TIOBLKSZ,WORK+5\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   OPENSTUF          HANDLE END OF FORMATTING AREA.\n         BCT   R0,SAMETIOE       NO, PROCESS NEXT UNIT.\n         B     LOOPTIOE          ONLY ONE UNIT SO DO NEXT DD STATEMENT.\nSAMETIOE LR    R1,R2\n         AHI   R1,-LL            POINT TO LINE JUST COMPLETED.\n         MVC   0(LL,R2),0(R1)    REPEAT IT.\n         L     R6,SAVE           RESTORE TCT TIOT ENTRY POINTER.\n         AH    R6,JTIOELEN       POINT TO NEXT UNIT SECTION.\n         ST    R6,SAVE           UPDATE STORED TCT TIOT ENTRY POINTER.\n         B     NEXTTIOE          COMPLETE A DISPLAY LINE PER UNIT.\n         SPACE\nTCTIOFMT DS    0H                SHOW EXCP COUNT AND CONNECT TIME RATE.\n         ICM   R15,15,TCTDCTR    GET EXCP COUNT FOR THIS UCB.\n         BNZ   TCTIOCNT          NON-ZERO SO DISPLAY IT.\n         TM    JOBFLAG2,XCP0     DISPLAY ZERO I/O DATA SETS?\n         BZ    LOOPTIOE          NO, PROCESS NEXT ENTRY.\n         BR    R1                YES, BUT NO NUMBERS TO SHOW.\nTCTIOCNT CVD   R15,WORK          DISPLAY EXCP COUNT.\n         IC    R7,TIOEXCPS       SAVE DATA.\n         MVC   TIOEXCPS,ED7Z\n         ED    TIOEXCPS,WORK+4\n         STC   R7,TIOEXCPS       RESTORE DATA.\n         TM    JOBFLAG2,ODCB     DISPLAYING OPEN DCB DETAILS?\n         BOR   R1                YES, SO DO NOT SHOW CONNECT PER EXCP.\n         L     R7,TCTCONN        LOAD CHANNEL CONNECT TIME.\n         C     R15,TCTDCTRS      ANY I/O SINCE SMF SAVED VALUES?\n         BE    TCTIOCON          NO, AVERAGE OVER WHOLE ALLOCATION.\n         S     R15,TCTDCTRS      YES, GET EXCP COUNT THIS SMF INTERVAL.\n         S     R7,TCTCONNS       GET CONNECT TIME THIS SMF INTERVAL.\nTCTIOCON LTR   R7,R7             ANY CONNECT TIME?\n         BZR   R1                NO, SO RETURN TO CALLER.\n         SLR   R6,R6             YES, PREPARE FOR DIVIDE.\n         SLDL  R6,7              CONVERT CONNECT TIME TO MICROSECONDS.\n         DR    R6,R15            GET CONNECT MICROSECONDS PER EXCP.\n         CVD   R7,WORK           SHOW IT.\n         MVC   TIOTTRN,ED7Z\n         MVI   TIOTTRN+3,X'21'   EDIT EDIT MASK AFTER LITERAL REUSE.\n         ED    TIOTTRN,WORK+4\n         MVC   TIOTTRN(4),TIOTTRN+1\n         MVI   TIOTTRN+4,C'.'    DISPLAY IT AS MILLISEONDS PER EXCP.\n         BR    R1                RETURN TO CALLER.\n         DROP  R2                TIOTDTLS.\n         SPACE\nOPENSTUF TM    JOBFLAG2,ODCB     DISPLAYING OPEN DCB DETAILS?\n         BZ    UNSSAR            NO, NOW HAVE ALL APPROPRIATE DATA.\n         L     R5,=A(JSETFDAT)   YES, DETERMINE IF I/O BUFFER DATA\n         BR    R5                IS TO BE FETCHED IF POSSIBLE.\nLOOK4DCB ICM   R4,15,TCBQUEUE    POINT TO TCB TO BE CHECKED.\n         BZ    UNSSAR            END OF TASK DISPATCHING QUEUE.\n         LA    R5,240\n*                                GET FIRST 240 BYTES OF TCB.\n         MVCP  SECWORKA(R5),0(R4),R14\n         USING TCB,SECWORKA\n         MVC   TCBQUEUE,TCBTCB   COPY TCBTCB POINTER.\n         CLC   TIOTADDR,TCBTIO   TASK HAS THE RIGHT TIOT?\n         BNE   LOOK4DCB          NO, TRY NEXT TCB ON QUEUE.\n         MVC   WORK2+4(4),TCBDEB COPY DEB QUEUE ADDRESS.\nLOOK4DEB ICM   R4,15,WORK2+4     POINT TO DATA EXTENT BLOCK.\n         BZ    LOOK4DCB          END OF DEB QUEUE REACHED.\n         LA    R5,32\n*                                FETCH DEB BASIC SECTION.\n         MVCP  SECWORKA(R5),0(R4),R14\n         USING DEBBASIC,SECWORKA\n*                                SAVE POINTER TO NEXT DEB.\n         MVC   WORK2+5(3),DEBDEBB\n*                                SAVE DEBACCS AND DEBFLGS1 FOR LATER.\n         MVC   WORK2+1(3),DEBOPATB\n         ICM   R4,7,DEBDCBB      POINT TO OPEN DCB.\n         LA    R5,96\n*                                FETCH DCB OR ACB.\n         MVCP  SECWORKA(R5),0(R4),R14\n         USING IHADCB,SECWORKA\n         USING IFGACB,SECWORKA\n         USING TIOTDTLS,R1\n         L     R1,DDLINE1        POINT TO FIRST DD DETAIL LINE.\nMATCHDCB CR    R1,R2             END OF DD DETAIL LINES?\n         BNL   LOOK4DEB          YES, CAN'T MATCH DCB, TRY NEXT ONE.\n         TM    TIOCOLOR+8,X'04'  GREEN ON FOR THIS LINE?\n         BZ    SKIPDDLN          NO, NOT A DD LINE.\n         CLC   TIOFFSET,DCBTIOT  DCB FOR THIS DISPLAY LINE?\n         BE    FOUNDDCB          YES, USE IT.\nSKIPDDLN LA    R1,LL(,R1)        NO, POINT TO NEXT DISPLAY LINE.\n         B     MATCHDCB\nFOUNDDCB TM    DCBDSRG2,DCBACBM  GENUINE DATA CONTROL BLOCK?\n         BZ    ACBDCBOK          YES, PROCEED.\n         CLI   ACBID,ACBIDVAL    GENUINE ACCESS METHOD CONTROL BLOCK?\n         BNE   LOOK4DEB          NO, PROCESS NEXT DEB.\nACBDCBOK MVC   TIODSN(45),BLANKS ERASE DATA SET NAME.\n         MVC   TIOCOLOR,HIGHX\n         TM    WORK2+3,DEBAPFIN  LIBRARY CONSIDERED APF AUTHORISED?\n         BZ    JDDAPFOK          NO, CAN'T LOAD AUTHORIZED PROGRAM.\n         MVI   TIOCOLOR+8,X'F7'  YES, SHOW IN WHITE.            (I3279)\nJDDAPFOK NI    WORK2+1,DEBACCS   CLEAR EOV FLAGS.\n         SLR   R5,R5\n         IC    R5,WORK2+1        LOAD ACCESS BITS.\n         SLL   R5,1              DOUBLE FOR INDEX.\n         LA    R5,OPENMODE(R5)   POINT TO ACCESS INDICATOR.\n         MVC   TIOACCES(2),0(R5) INDICATE ACCESS MODE.\n         TM    DCBDSRG2,DCBACBM  ACB OR DCB?\n         BZ    DCBFOUND          DATA CONTROL BLOCK.\n         SLR   R0,R0\n         IC    R0,ACBSTRNO       SHOW STRNO IN BUFNO COLUMN.\n         CVD   R0,WORK\n         MVC   TIOBUFNO,ED3Z\n         ED    TIOBUFNO,WORK+6\n         LH    R0,ACBBLKSZ       SHOW BLOCK SIZE.\n         CVD   R0,WORK\n         MVC   TIOBLKSZ,ED5Z\n         ED    TIOBLKSZ,WORK+5\n         ICM   R0,3,ACBLRECL     SHOW LOGICAL RECORD LENGTH.\n         CVD   R0,WORK\n         MVC   TIOLRECL,ED5Z\n         ED    TIOLRECL,WORK+5\n         MVC   DCBRECFM,ACBCCTYP     COPY ACBCCTYP TO DCBRECFM.\n         MVI   DCBOPTCD,0            ERASE GARBAGE.\n         MVC   TIODSORG(2),=C'VS'\n         CLI   SECWORKA+43,X'11'     VSAM?\n         BE    VSAMSTUF              YES.\n         MVC   TIODSORG(2),=C'VT'\n         CLI   SECWORKA+43,X'60'     VTAM?\n         BE    GETRECFM              YES.\n         MVC   TIODSORG(2),=C'SS'\n         CLI   SECWORKA+43,X'41'     SUBSYSTEM?\n         BE    GETRECFM              YES.\n         MVC   TIODSORG(2),=C'TC'\n         CLI   SECWORKA+43,X'31'     TCAM?\n         BE    GETRECFM              YES.\n         MVC   TIODSORG(2),BLANKS    SKIP RTAM, JAM ETC.\n         B     GETRECFM\n         SPACE\n*        BOTTOM JSTCB+11C(284)-->VAT (VALID AMBL TABLE)\n*                 VAT+10(16)  -->FIRST AMBL\n*                AMBL+0(0)    -->NEXT AMBL\n*                AMBL+34(52)  -->AMB OF DATA COMPONENT\n*                AMBL+38(56)  -->AMB OF INDEX COMPONENT\n*                AMBL+DCBTIOT -->DD TIOT ENTRY OFFSET\n*                 AMB+88(136) IS START OF DATA SET NAME\n         SPACE\nVSAMSTUF UNPK  TIOMBCHR+9(5),ACBMACRF(3)\n         UNPK  TIOMBCHR+13(3),ACBMACR3(2)\n         TR    TIOMBCHR+9(6),HEX-C'0'\n         MVI   TIOMBCHR+15,C''''\n         MVC   TIOMBCHR+1(8),=C'MACRF=X'''\n         ICM   R4,15,ACBAMBL     FETCH AMBL ADDRESS.\n         BZ    LOOK4DEB          HANDLE ZERO POINTER.\n         LA    R5,68             LOAD AMBL LENGTH.\n*                                FETCH ACCESS METHOD BLOCK LIST.\n         MVCP  SECWORKA(R5),0(R4),R14\n         CLI   SECWORKA+32,X'50' VALID AMBL?\n         BNE   LOOK4DEB          NO, CONTROL BLOCK CHAIN INVALID.\n         ICM   R4,15,SECWORKA+52 POINT TO DATA COMPONENT'S AMB.\n         BZ    LOOK4DEB          CATER FOR ZERO POINTER.\n         LA    R5,42\n*                                FETCH FIRST 42 BYTES OF AMB.\n         MVCP  SECRB(R5),0(R4),R14\n         CLI   SECRB,X'40'       VALID AMB?\n         BNE   LOOK4DEB          NO, CONTROL BLOCK CHAIN INVALID.\n         ICM   R4,15,SECRB+28    LOAD IOMB POINTER.\n         BZ    LOOK4DEB          ZERO POINTER SO GO AWAY.\n         LA    R5,4              LOOK AT THE VSAM I/O MANAGER BLOCK.\n*                                FETCH THE IOSB POINTER.\n         MVCP  SECPNTR(R5),36(R4),R14\n         L     R4,SECPNTR        LOAD THE IOSB POINTER.\n         USING IOSB,R4\n         UNPK  TIOMBCHR(9),IOSEEKA(5)\n         UNPK  TIOMBCHR+8(9),IOSEEKA+4(5)\n         TR    TIOMBCHR(16),HEX-C'0'\n         MVI   TIOMBCHR+16,C' '  DISPLAY VSAM DASD SEEK ADDRESS.\n         DROP  R4                IOSB.\n         MVC   TIOTTRN,=C'SHR(?,3)'\n         TM    SECRB+24,X'08'    CROSS-SYSTEM SHAREOPTION 4?\n         BZ    SYSSHROK          NO, 3 IS CORRECT.\n         MVI   TIOTTRN+6,C'4'    YES.\nSYSSHROK IC    R5,SECRB+24       LOAD AMBFLG0.\n         SLL   R5,26             KEEP LOW SIX BITS.\n         SRL   R5,30             DROP LOW FOUR BITS.\n         IC    R5,HEX+1(R5)      LOAD CROSS-REGION SHAREOPTION.\n         STC   R5,TIOTTRN+4      DISPLAY IT.\n         TM    SECRB+24,X'04'    LINEAR DATA SET?\n         BZ    LDSORNOT          NO.\n         MVC   TIODSORG,=C'LDS'\nLDSORNOT TM    SECRB+25,X'80'    VSAM OBJECT BEING LOADED?\n         BZ    VSCREATD          NO.\n         MVI   TIOACCES+4,C'L'   YES, INDICATE CREATION.\nVSCREATD L     R4,SECRB+20       POINT TO AM DATA SET STATISTICS BLOCK.\n         LA    R5,8              GET TWO FULLWORDS FROM AMDSB.\n         MVCP  SECTIOWA(R5),20(R4),R14\n         L     R0,SECTIOWA       DISPLAY CONTROLINTERVAL SIZE.\n         CVD   R0,WORK\n         MVC   TIOBLKSZ,ED5Z\n         ED    TIOBLKSZ,WORK+5\n         L     R0,SECTIOWA+4     DISPLAY MAXIMUM RECORD SIZE.\n         CVD   R0,WORK\n         MVC   TIOLRECL,ED5Z\n         ED    TIOLRECL,WORK+5\n         TM    SECWORKA+33,X'20' CAN THE CLUSTER BE WRITTEN TO?\n         BZ    LOOK4DEB          NO, INPUT ONLY.\n         MVC   TIOACCES(2),=C'OU'    INDICATE OUTPUT OR UPDATE.\n         B     LOOK4DEB          VSAM OPEN DETAILS NOW COMPLETE.\nDCBFOUND TM    DCBDSRG1,DCBDSGU  UNMOVEABLE?\n         BZ    CANMOVIT          NO.\n         MVI   TIODSORG+2,C'U'   YES.\nCANMOVIT MVC   TIODSORG(2),=C'DA'\n         TM    DCBDSRG1,DCBDSGDA DA?\n         BO    GOTDSORG          YES.\n         MVC   TIODSORG(2),=C'IS'\n         TM    DCBDSRG1,DCBDSGIS IS?\n         BO    GOTDSORG          YES.\n         MVI   TIODSORG,C'G'\n         TM    DCBDSRG2,DCBDSGGS GS?\n         BO    GOTDSORG          YES.\n         MVI   TIODSORG,C'P'\n         TM    DCBDSRG1,DCBDSGPS PS?\n         BO    GOTDSORG          YES.\n         MVI   TIODSORG+1,C'O'\n         TM    DCBDSRG1,DCBDSGPO PO?\n         BO    GOTDSORG          YES.\n         MVC   TIODSORG(2),=C'CX'\n         TM    DCBDSRG1,DCBDSGCX CX?\n         BO    GOTDSORG          YES.\n         MVI   TIODSORG,C'T'\n         TM    DCBDSRG2,DCBDSGTX TX?\n         BO    GOTDSORG          YES.\n         MVI   TIODSORG+1,C'Q'\n         TM    DCBDSRG2,DCBDSGTQ TQ?\n         BO    GOTDSORG          YES.\n         MVI   TIODSORG+1,C'R'\n         TM    DCBDSRG2,DCBDSGTR TR?\n         BO    GOTDSORG          YES.\n         MVC   TIODSORG(2),STARS\nGOTDSORG TM    DCBMACF1,DCBMRECP\n         BZ    NOTXCPAM\n         MVI   TIOACCES+4,C'X'   ACCESS METHOD IS EXCP.\n         B     MBCHRCHK          EXCP HAS NO BUFNO, LRECL, BLKSIZE.\nNOTXCPAM SLR   R6,R6\n         TM    DCBOFLG,DCBOFLWR\n         BZ    IOWASRD           LAST I/O WAS A READ OR POINT.\n         LA    R6,1              LAST I/O WAS A WRITE.\nIOWASRD  TM    DCBMACF1,DCBMRGET\n         BO    QUEUEDIO          MACRF=G.\n         TM    DCBMACF2,DCBMRPUT\n         BZ    BASICIO           NOT MACRF=P.\nQUEUEDIO LA    R6,2(,R6)\nBASICIO  LA    R6,RDWRTIND(R6)\n         MVC   TIOACCES+4(1),0(R6) SHOW NATURE OF LAST I/O.\n         TM    DCBDSRG1,DCBDSGPS+DCBDSGPO+DCBDSGIS+DCBDSGDA\n         BZ    NVSMACRF          GO STRAIGHT TO MACRF.\n         SLR   R0,R0\n         ICM   R0,1,DCBBUFNO     IS BUFNO ZERO?\n         BNZ   GOTBUFNO          NO, USE IT.\n         IC    R0,DCBNCP         YES, USE NCP INSTEAD.\nGOTBUFNO CVD   R0,WORK\n         MVC   TIOBUFNO,ED3Z\n         ED    TIOBUFNO,WORK+6\n         LH    R0,DCBBLKSI\n         CVD   R0,WORK\n         MVC   TIOBLKSZ,ED5Z\n         ED    TIOBLKSZ,WORK+5\n         LH    R0,DCBLRECL\n         CVD   R0,WORK\n         MVC   TIOLRECL,ED5Z\n         ED    TIOLRECL,WORK+5\nMBCHRCHK TM    DCBDSRG1,DCBDSGPS+DCBDSGPO\n         BZ    NVSMACRF          NO MBBCCHHR, SO SHOW MACRF.\n         TM    DCBDEVT,X'20'     DASD?\n         BZ    JDNOTEND          NO, DON'T CHECK FOR END-OF-FILE.\n         OC    DCBFDAD,DCBFDAD   IS MBBCCHHR ZERO?\n         BZ    NVSMACRF          YES, GO SHOW SOME NON-ZERO DATA.\n         UNPK  TIOMBCHR(9),DCBFDAD(5)\n         UNPK  TIOMBCHR+8(9),DCBFDAD+4(5)\n         TR    TIOMBCHR,HEX-C'0'\n         MVI   TIOMBCHR+16,C' '\n         TM    WORK2+3,DEBEOFDF  HAS EOV DETECTED EOF?\n         BNO   JDNOTEND          NO.\n         MVC   TIOMBCHR+2(4),=C'*EOF'\n         B     JDNODATA          YES, END-OF-FILE HAS BEEN REACHED.\nJDNOTEND TM    DCBMACF1,DCBMRECP EXCP ALLOWED?\n         BO    JDNODATA          YES, SO NOT BSAM OR BPAM OR QSAM.\n         TM    DCBCIND2,DCBCNQSM QSAM DCB?\n         BO    JDQSAMIO          YES.\n         TM    JOBFLAG2,FDAT     ALLOWED TO FETCH BUFFER DATA?\n         BZ    JDNODATA          NO.\n         TM    DCBCIND2,DCBCNCHS CHAINED SCHEDULING BEING SUPPORTED?\n         BO    JDNODATA          YES, FORGET ABOUT FETCHING DATA.\n         TM    DCBDEVT,X'20'     DASD?\n         BZ    JDNOTDIR          NO, DON'T CHECK FOR SEARCH DIRECT.\n         TM    DCBOPTCD,DCBSRCHD USING SEARCH DIRECT?\n         BO    JDNODATA          YES, FORGET ABOUT FETCHING DATA.\nJDNOTDIR ICM   R6,15,DCBIOBA     POINT TO THE IOB.\n         BZ    JDNODATA          NO I/O ISSUED YET.\n         LA    R5,4              LENGTH OF AN ECB.\n*                                FETCH THE ADDRESS OF ECB IN DECB.\n         MVCP  SECPNTR(R5),IOBECBPT-IOBBSAMN(R6),R14\n         SLR   R6,R6             ACCESS THE DATA EVENT CONTROL BLOCK.\n         ICM   R6,7,SECPNTR+1    POINT TO THE ECB AT DECB+0.\n         BZ    JDNODATA          NO I/O ISSUED YET.\n*                                FETCH THE AREA POINTER.\n         MVCP  SECPNTR(R5),DECAREA-DECB(R6),R14\n         ICM   R6,15,SECPNTR     POINT TO THE I/O BUFFER.\n         BZ    JDNODATA          IGNORE EMPTY POINTER.\n         LH    R5,DCBBLKSI       LOAD BLOCK SIZE.\n         LTR   R5,R5             USABLE RECORD LENGTH?\n         BNP   JDNODATA          NO, DO NOT TRY TO FETCH RECORD.\n         B     JDISDATA          GO FETCH SOME FILE DATA.\nJDQSAMIO TM    DCBMACF1,DCBMRGET QSAM GET?\n         BO    JDNODATA          NO.\n         ICM   R6,15,DCBRECAD    YES, POINT TO CURRENT OR NEXT RECORD.\n         BZ    JDGSTART          NO GET HAS BEEN ISSUED SINCE OPEN.\n         TM    JOBFLAG2,FDAT     ALLOWED TO FETCH BUFFER DATA?\n         BZ    JDNODATA          NO.\n         TM    DCBRECFM,DCBRECV  FIXED LENGTH RECORDS?\n         BO    JDNODATA          NO.\n         TM    DCBRECFM,DCBRECF\n         BNO   JDNODATA          NO, NOT FIXED LENGTH RECORDS.\n         LH    R5,DCBBLKSI       LOAD BLOCK SIZE.\n         TM    DCBRECFM,DCBRECBR BLOCKED FILE?\n         BNO   RECFMBLK          NO.\n         LH    R5,DCBLRECL       YES, LOAD RECORD LENGTH.\n         LTR   R5,R5             USABLE RECORD LENGTH?\n         BNP   JDNODATA          NO, DO NOT TRY TO FETCH RECORD.\nJDISDATA L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         C     R2,WINEND         IS THE FORMAT AREA FULL?\n         BNL   JDNODATA          YES, SO DON'T ADD ANOTHER LINE.\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   LL(2,R2),WINFULL  PREPARE FOR FULL WINDOW.\n         DROP  R15               WNDWMNGR.\n         LR    R15,R2            POINT TO NEW LAST LINE SO FAR.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\nJDGTLNLP AHI   R15,-LL           BACK UP A LINE.\n         CR    R1,R15            BACK TO OPEN DD LINE?\n         BNL   JDGTLDLN          YES, GO FETCH RECORD.\n         MVC   LL(LL,R15),0(R15) NO, BUBBLE LINE DOWN ONE.\n         B     JDGTLNLP          GO BUBBLE PREVIOUS LINE.\nJDGTLDLN MVC   LL(LL-79,R1),MEDX INITIALIZE THE LINE.\n         MVC   LL+LL-79(79,R1),BLANKS\n         LA    R0,72             GET MAXIMUM DATA LENGTH TO FETCH.\n         CR    R5,R0             LRECL BIGGER THAN THIS?\n         BNH   JDGTLLOK          NO.\n         LR    R5,R0             YES, DECREASE TO MAXIMUM.\nJDGTLLOK MVCP  LL+LL-72(R5,R1),0(R6),R14\n         MVC   LL+LL-79(7,R1),=C'RECORD:'\n         TR    LL+LL-79(79,R1),XLATETBL      HANDLE UNPRINTABLES.\n         B     JDNODATA          RECORD DATA NOW FETCHED.\nJDGSTART MVC   TIOMBCHR(6),=C'*START'\nJDNODATA TM    DCBDEVT,X'80'     TAPE?\n         BO    MAGTPDCB          YES.\n         TM    DCBDSRG1,DCBDSGPO PARTITIONED ORGANIZATION?\n         BZ    GETRECFM          NO, SO SUPPLY RECFM.\n         ICM   R0,15,DCBRELAD\n         BZ    GETRECFM          TTRN IS ZERO SO SUPPLY RECFM.\n         UNPK  WORK(9),DCBRELAD(5)\n         TR    WORK(8),HEX-C'0'  DISPLAY TTRN OF CURRENT MEMBER.\n         MVC   TIOTTRN,WORK\n         B     LOOK4DEB\nMAGTPDCB TM    DCBDEVT,X'80'     TAPE?\n         BZ    NVSMACRF          NO, SHOW (NON-VSAM) MACRF.\n         ICM   R0,15,SECWORKA+12\n         BZ    NVSMACRF          ZERO I/O COUNT FOR TAPE VOLUME.\n         CVD   R0,WORK\n         MVC   TIOMBCHR+8(8),ED7\n         ED    TIOMBCHR+8(8),WORK+4\n         MVC   TIOMBCHR(9),=C'VOLIOCNT='\n         B     GETRECFM          DON'T ERASE I/O COUNT WITH MACRF.\nNVSMACRF MVC   TIOMBCHR+1(8),=C'MACRF=X'''\n         UNPK  TIOMBCHR+9(5),DCBMACRF(3)\n         TR    TIOMBCHR+9(4),HEX-C'0'\n         MVI   TIOMBCHR+13,C''''\n         TM    DCBDSRG1,DCBDSGPS+DCBDSGPO+DCBDSGIS+DCBDSGDA\n         BZ    LOOK4DEB          END OF BTAM, QTAM, TCAM, GAM STUFF.\nGETRECFM MVC   TIOTTRN(5),=C'RFM=*'\n         TM    DCBRECFM,DCBRECU\n         BZ    TRYANSID\n         MVI   TIOTTRN+4,C'U'\n         BO    RECFMBLK          UNDEFINED RECORD FORMAT.\n         MVI   TIOTTRN+4,C'F'\n         TM    DCBRECFM,DCBRECF\n         BO    RECFMBLK          FIXED LENGTH RECORD FORMAT.\n         MVI   TIOTTRN+4,C'V'    VARIABLE LENGTH RECORD FORMAT.\nRECFMBLK LA    R6,TIOTTRN+5\n         TM    DCBRECFM,DCBRECBR\n         BZ    RECFMTRK\n         MVI   0(R6),C'B'        FILE IS BLOCKED.\n         LA    R6,1(,R6)\nRECFMTRK TM    DCBRECFM,DCBRECTO\n         BZ    FMSTDSPN\n         MVI   0(R6),C'T'        TRACKOVERFLOW IS USED.\n         LA    R6,1(,R6)\n         B     RECFMCC           CAN'T FIT RFM=VBTSA, FOR EXAMPLE.\nTRYANSID TM    DCBRECFM,DCBRECD\n         BZ    RECFMBLK          UNKNOWN OR NULL RECORD FORMAT.\n         MVI   TIOTTRN+4,C'D'    ANSI VARIABLE LENGTH RECORD FORMAT.\n         B     RECFMBLK\nFMSTDSPN TM    DCBRECFM,DCBRECSB\n         BZ    RECFMCC\n         MVI   0(R6),C'S'        STANDARD BLOCKS OR SPANNED RECORDS.\n         LA    R6,1(,R6)\nRECFMCC  TM    DCBRECFM,DCBRECCC\n         BZ    GETOPTCD          NO CARRIAGE CONTROL CHARACTERS.\n         MVI   0(R6),C'A'\n         TM    DCBRECFM,DCBRECCA\n         BO    GETOPTCD          ANSI CARRIAGE CONTROL CHARACTERS.\n         MVI   0(R6),C'M'        MACHINE CODE CARRIAGE CONTROL.\nGETOPTCD CLI   DCBOPTCD,0        ANY OPTION CODE?\n         B     LOOK4DEB    (BE)  NO, LEAVE RECORD FORMAT ON DISPLAY.\n         MVC   TIOTTRN(6),=C'OPTCD='\n         UNPK  WORK(3),DCBOPTCD(2)\n         TR    WORK(2),HEX-C'0'\n         MVC   TIOTTRN+6(2),WORK\n         B     LOOK4DEB\n         DROP  R1                TIOTDTLS.\n         DROP  R13               GOTAREA AND DEPENDENT USINGS.\n         USING GOTAREA,R13\n         SPACE 2\nUNSSAR   LTR   R14,R14           WERE WE USING KEY ZERO?\n         BNZ   DONESSAR          NO, UNAUTHORIZED FOR SSAR.\nRETRYADR C     R3,PSAAOLD        LOOKING AT SELF?\n         BE    JNOXMEM           YES, SKIP UNNEEDED STUFF.\n         L     R8,PSAAOLD        GET CURRENT ASCB.\n         LH    R8,ASID(,R8)      GET CURRENT ASID.\n         SSAR  R8                GET OUT OF CROSS MEMORY MODE.\nXMFOILED L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\n         STATUS RESET,MC,STEP    START ALL OTHER TASKS.\n         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\nJNOXMEM  ESTAE 0                 DISABLE TASK ABNORMAL EXIT.\n         LARL  R5,SWAGLBL@       POINT TO ADDRESS SAVE AREA.\n         ICM   R1,15,0(R5)       GET GLOBAL AREA ADDRESS.\n         BZ    JSWAGONE          NO GLOBAL AREA ACQUIRED.\n         FREEMAIN RU,LV=DYNSWALN,A=(1),SP=241\n         SR    R1,R1\n         ST    R1,0(,R5)         RESET GLOBAL AREA ADDRESS.\nJSWAGONE EQU   *\n         MODESET MF=(E,MDSTPROB) END OF SUPERVISOR STATE ACTIVITY.\n         TM    JOBFLAGS,FOILED+SPY   ABENDED ON A SPYING MISSION?\n         BO    SPYWAIT           YES, WAIT A BIT THEN RETRY.\n         TM    JOBFLAGS,FOILED+WAIT  ABENDED WHILE WAITING FOR SWAP-IN?\n         BO    SPYWAIT           YES, WAIT A BIT THEN RETRY.\n         TM    JOBFLAGS,SPY      ON A SPYING MISSION?\n         BO    POSTSPY           YES, DO SPY POST-PROCESSING.\n         L     R5,=A(JASDTLS)    GET ADDRESS OF ASID HEADER ROUTINE.\n         USING JASDTLS,R5\n         TM    JOBFLAGS,FOILED   CROSS MEMORY FOILED FLAG ON?\n         BO    ASIDOUT           YES, TARGET SWAPPED OUT SUDDENLY.\n         DROP  R5                JASDTLS.\nDONESSAR ICM   R1,15,DDLINE1     POINT TO FIRST DD DETAIL LINE.\n         BZ    NODDLINS          THERE ARE NO DD DETAIL LINES.\nDDLNLOOP CR    R1,R2             END OF DD DETAIL LINES?\n         BNL   ENDOFDDS          YES.\n*        CLC   14+LL-79(28,R1),=CL28'ELAPSED TIME SINCE LAST SWAP'\n*        BE    ENDOFDDS          XM ABEND STOPPED DD SCAN HERE.\n         USING TIOTDTLS,R1\n         TM    TIOCOLOR+8,X'04'  GREEN ON FOR THIS LINE?\n         BZ    DEV#OK3           NO, NO UCB STUFF TO CORRECT.\n         MVC   TIOUCBNM,TIOUCBS4 POSITION UCB NAME CORRECTLY.\n         MVI   TIOFILL1,C' '     ERASE GARBAGE.\n         MVI   TIOFILL2,C' '\n         CLI   TIOUCBNM,0        4-DIGIT NUMBER?\n         BNE   DEV#OK3           NO.\n         UNPK  WORK(5),TIOUCBNM+1(3)\n         TR    WORK(4),HEX-C'0'  YES.\n         MVC   TIOUCBNM-1(4),WORK\nDEV#OK3  TR    LL-79(79,R1),XLATETBL CATER FOR SMP PDS MEMBERS ETC.\n         DROP  R1                TIOTDTLS.\n         LA    R1,LL(,R1)        POINT TO NEXT DETAIL LINE.\n         B     DDLNLOOP          PROCESS IT.\nNODDLINS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         C     R2,WINEND         IS THE FORMAT AREA FULL?\n         BNL   PUTSCRNJ          YES, SO LOAD UP A SCREEN IMAGE.\n         DROP  R15               WNDWMNGR.\n*        C     R3,PSAAOLD        LOOKING AT SELF?\n*        BE    JOBSTEND          YES.\n         ICM   R15,15,ABNDCNTR   GET THE NUMBER OF CROSS MEMORY ABENDS.\n         BZ    JOBSTEND          IF ZERO THEN DON'T SHOW ABEND COUNTER.\n         CVD   R15,WORK\n         MVC   DIECOUNT,ED5\n         ED    DIECOUNT,WORK+5   PUT THIS NUMBER IN ABEND MESSAGE.\n         OI    ABENDCMP+2,X'0F'\n         UNPK  SYSABEND,ABENDCMP+1(2)\n         TR    SYSABEND,HEX-C'0' ALSO SHOW THE LAST ABEND CODE.\n         MVC   SYSRSN,BLANKS\n         ICM   R0,15,ABENDCRC    ANY REASON CODE?\n         BZ    JRSNCDOK          NO.\n         MVI   SYSRSN,C'-'\n         UNPK  SYSRSN+1(9),ABENDCRC(5)\n         TR    SYSRSN+1(8),HEX-C'0'\n         MVI   SYSRSN+9,C' '\nJRSNCDOK UNPK  SYSAPSW1,ABENDPSW(5)\n         UNPK  SYSAPSW2,ABENDPSW+4(5)\n         TR    SYSAPSW1(17),HEX-C'0'\n         MVI   SYSAPSW1+8,C' '   AND THE ABEND-TIME PSW.\n         MVI   SYSAPSW2+8,C' '\n         MVC   0(LL,R2),JABNDMSG LOAD THE MESSAGE.\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   PUTSCRNJ          HANDLE END OF FORMATTING AREA.\nENDOFDDS XC    DDLINE1,DDLINE1   HAVE NOW FIXED UP BUFFERED DD LINES.\nJOBSTEND BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNJ LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNJ L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDOJOBS          YES, REDO THE STATISTICS.\n         NI    JOBFLAGS,255-WAIT NO, TURN OFF WAIT MODE.\n         TCLEARQ INPUT           CLEAR UNWANTED INPUT.\n         CLI   INBUFF+4,0        INPUT FOR FIRST SCREEN LINE?\n         BE    CMDSCANJ          YES.\n         MVI   INCHARS,C' '      NO, DISCARD IT.\nCMDSCANJ L     R5,=A(JOBZMCHK)   POINT TO ZOOM REQUEST PROCESSOR.\n         CLI   INCHARS,C' '      CONTINUE OR ZOOM REQUESTED?\n         BER   R5                YES.\n         CLI   INCHARS,C'J'      REQUEST JOB FOR NEW JOB NAME?\n         BNE   RGSTRCHK          NO.\n         CLI   INCHARS+2,C' '    YES, MORE THAN TWO BYTES FOLLOW?\n         BH    GOTJJJOB          YES, ASSUME JOB NAME PROVIDED.\n         CLI   INCHARS+1,C'='    NO, FAST PATH TO SELF?\n         BNE   LOCJOBNM          NO, ISSUE JOB NAME PROMPT.\nGOTJJJOB MVC   STATSJOB,INCHARS+1 YES, LOAD SUPPLIED SPECIFICATION.\n         B     LOCJFAST\nLOCJOBNM LA    R1,JOBGTMSG       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         LA    R0,JOBGTLEN\n         BAS   R14,SCREENIO      ISSUE PROMPT FOR COMPLETE JOB NAME.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    LOCJOBNM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         CLC   STATSJOB,INCHARS  HAS THE JOB NAME CHANGED?\n         BE    REDOJOBS          NO, CONTINUE WITH REAL STORAGE SCAN.\n         MVC   STATSJOB,INCHARS  YES, EXTRACT SPECIFIED JOB NAME.\nLOCJFAST L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R1\n         L     R1,WINBUFF        POINT TO DISPLAY FORMAT AREA.\n         DROP  R1                WNDWMNGR.\n         MVI   3840(R1),X'FF'    INVALIDATE PREVIOUS SPY-FETCHED TPUT.\n         MVI   SECTIOWA+3,X'FF'  INVALIDATE PREVIOUS SPY-FETCHED TGET.\n         CLI   STATSJOB,C'='     SELF REQUESTED?\n         BNE   REDOJOBS          NO, CONTINUE WITH REAL STORAGE SCAN.\n         L     R1,PSAAOLD        YES, POINT TO THE CURRENT ASCB.\n         UNPK  STATSJOB(5),ASID(3,R1)\n         TR    STATSJOB(4),HEX-C'0'\n         MVC   STATSJOB+4(4),STATSJOB\n         MVC   STATSJOB(4),STARS COPY THE CURRENT ADDRESS SPACE NAME.\n         B     REDOJOBS          CONTINUE WITH REAL STORAGE SCAN.\nRGSTRCHK CLI   INCHARS,C'G'      TOGGLE DISPLAY OF TASK REGISTERS?\n         BNE   REQSTBLK          NO.\n         XI    JOBFLAGS,REGS     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nREQSTBLK CLI   INCHARS,C'R'      TOGGLE DISPLAY OF REQUEST BLOCKS?\n         BNE   LODLSTEL          NO.\n         XI    JOBFLAGS,PRBS     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nLODLSTEL CLI   INCHARS,C'L'      TOGGLE DISPLAY OF LOAD LIST ELEMENTS?\n         BNE   DDNAMCHK          NO.\n         XI    JOBFLAGS,LLES     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nDDNAMCHK CLI   INCHARS,C'D'      TOGGLE DISPLAY OF DATA DEFINITION?\n         BNE   EXCP0CHK          NO.\n         XI    JOBFLAG2,NODD     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nEXCP0CHK CLI   INCHARS,C'X'      TOGGLE DISPLAY OF I/O-LESS DATA SETS?\n         BNE   VSMSPCHK          NO.\n         XI    JOBFLAG2,XCP0     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nVSMSPCHK CLI   INCHARS,C'V'      TOGGLE DISPLAY OF STORAGE SUBPOOLS?\n         BNE   OPENDCBD          NO.\n         CLI   INCHARS+1,C'0'    SUBPOOL SELECTION FLAG SUPPLIED?\n         BL    VSMSPTOG          NO, JUST TOGGLE IT.\n         CLI   INCHARS+1,C'3'    SUBPOOL SELECTION FLAG SUPPLIED?\n         BH    VSMSPTOG          NO, JUST TOGGLE IT.\n         MVC   JVSPFLAG,INCHARS+1    YES, SET NEW SUBPOOL SELECTION.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '  ADJUST ANY COMMAND INPUT.\n         NI    JOBFLAGS,255-JVSM ENSURE BIT GETS SET ON.\nVSMSPTOG XI    JOBFLAGS,JVSM     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nOPENDCBD CLI   INCHARS,C'O'      TOGGLE DISPLAY OF OPEN DCB DETAILS?\n         BNE   MAJRCDEL          NO.\n         XI    JOBFLAG2,ODCB     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nMAJRCDEL CLI   INCHARS,C'C'      TOGGLE DISPLAY OF CDES?\n         BNE   JOBWTCHK          NO.\n         XI    JOBFLAGS,CDES     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nJOBWTCHK CLI   INCHARS,C'W'      WAIT-TILL-SWAPPED-IN REQUEST?\n         BNE   ALLJDATA          NO.\n         OI    JOBFLAGS,WAIT     YES, FLAG THIS.\n         B     REDOJOBS          GO SEE IF TARGET IS SWAPPED IN.\nALLJDATA CLI   INCHARS,C'A'      ALL AVAILABLE DATA REQUEST?\n         BNE   SPYCHECK          NO.\n         OI    JOBFLAGS,REGS+PRBS+LLES+CDES+JVSM\n         OI    JOBFLAG2,ODCB+PPRM+XCP0\n         NI    JOBFLAG2,255-NODD\n         MVI   JVSPFLAG,C'3'     SHOW ALL SPQE CHAINS.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nSPYCHECK TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    PGMPMCHK          NO, CAN'T DO MODESET FOR CROSS-MEMORY.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'S'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   PGMPMCHK          NO, DON'T ALLOW SPY.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BNO   PGMPMCHK          NO, DON'T ALLOW SPY.\n         CLI   INCHARS,C'S'      SESSION SPY REQUEST?\n         BNE   PGMPMCHK          NO.\n         OI    JOBFLAGS,SPY      YES, DO IT.\n         L     R1,LINES\n         M     R0,COLUMNS        GET THE NUMBER OF SCREEN POSITIONS.\n         STH   R1,SPYSCRN        SAVE IT FOR SPY DATA VALIDATION.\n         LA    R1,SPYONMSG       NOTIFY USER\n         LA    R0,SPYONLEN          OF TSO\n         ICM   R1,B'1000',TPUTFLG       SESSION SPY\n         TPUT  (1),(0),R                   INITIATION.\n         B     REDOJOBS          UPDATE THE DISPLAY.\nPGMPMCHK CLI   INCHARS,C'P'      TOGGLE DISPLAY OF PROGRAM PARAMETER?\n         BNE   GIVEHLPJ          NO, SHOW HELP PANEL.\n         XI    JOBFLAG2,PPRM     YES, DO IT.\n         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.\nGIVEHLPJ MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNJ          GO DISPLAY HELP PANEL.\n         SPACE\nCPUTIMEX SRDL  R6,12             CONVERT INTO MICROSECONDS.\nIOCTIMEX CL    R6,GRANDHRS       TOO BIG TO HANDLE?\n         BL    GETHOURS          NO.\n         MVC   2(8,R4),STARS     YES, INDICATE OVERFLOW.\n         BR    R14               RETURN.\nGETHOURS D     R6,TENGRAND       CONVERT INTO CENTISECONDS.\n         SR    R6,R6             CLEAR FOR DIVIDE.\n         D     R6,=F'360000'\n         LTR   R7,R7             ANY HOURS?\n         BZ    GETMINS           NO, DETERMINE MINUTES.\n         CVD   R7,WORK           GET HOURS.\n         MVC   0(8,R4),ED3       SUPPLY HOURS EDIT MASK AND COLONS.\n         ED    0(4,R4),WORK+6\nGETMINS  LTR   R7,R6             GET REMAINDER.\n         BZR   R14               ISN'T ANY SO ALL DONE.\n         SR    R6,R6             CLEAR FOR DIVIDE.\n         D     R6,=F'6000'\n         LTR   R7,R7             NON-ZERO MINUTES?\n         BZ    GETSECS           NO, SKIP MINIUTES.\n         CVD   R7,WORK           GET MINUTES.\n         OI    WORK+7,X'0F'\n         UNPK  5(2,R4),WORK+6(2)\n         MVI   7(R4),C':'\n         CLC   4(2,R4),=C' 0'    LEADING ZERO?\n         BNE   GETSECS           NO.\n         MVI   5(R4),C' '        YES, SUPPRESS IT.\nGETSECS  CVD   R6,WORK           GET SECONDS.\n         OI    WORK+7,X'0F'\n         UNPK  9(4,R4),WORK+5(3)\n         MVC   8(2,R4),9(R4)     MOVE WHOLE SECONDS LEFT 1 BYTE.\n         MVI   10(R4),C'.'       INSERT DECIMAL POINT.\n         CLC   7(2,R4),=C' 0'    LEADING ZERO?\n         BNER  R14               NO, RETURN.\n         MVI   8(R4),C' '        YES, SUPPRESS IT.\n         BR    R14               RETURN.\n         SPACE\nJADDLINE TR    LL-79(79,R2),XLATETBL\nJADDDDLN LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         STM   R15,R0,SAVE+16    SAVE REGISTERS.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         LM    R15,R0,SAVE+16    RESTORE REGISTERS.\n         BR    R1                RETURN - CALLER CHECKS CONDITION CODE.\n         DROP  R15               WNDWMNGR.\n         SPACE\nSPFBUFTR TR    0(0,R2),XLATESPF                 <<< EXECUTED >>>\nPOSTSPY  TM    JOBFLAG2,ISPF     WAS THE ISPF BUFFER FETCHED?\n         BZ    POSTSPF           NO, CHECK THE REGULAR TPUT BUFFER.\n         NI    JOBFLAG2,255-ISPF RESET ISPF BUFFER SWITCH.\n         L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R1\n         L     R2,WINBUFF        POINT TO DISPLAY AREA.\n         DROP  R1                WNDWMNGR.\n         LA    R1,3840           GET A NUMBER.\n         SLL   R1,1              DOUBLE IT.\n         LA    R1,3840(R1,R2)    PUT TO ISPF SCREEN TPUT BUFFER.\n         LA    R2,5(,R1)         POINT TO START OF FETCHED AREA.\n         LR    R4,R2             SOURCE ADDRESS.\n         LA    R6,4091(,R2)      POINT TO PREVIOUS ISPF SCREEN BUFFER.\n         LH    R5,SPYSCRN        GET ISPF SCREEN BUFFER SIZE.\n         LR    R7,R5             TARGET LENGTH EQUALS SOURCE LENGTH.\n         CLCL  R6,R4             ANY CHANGE IN ISPF SCREEN?\n         BE    POSTSPF           NO, SO PROCEED WITH NORMAL TPUT.\n         MVCL  R6,R4             YES, SAVE THE CHANGED BUFFER.\n         LH    R5,SPYSCRN        GET TARGET SCREEN SIZE.\n         SRL   R5,4              DIVIDE BY SIXTEEN.\n         BCTR  R5,0              DECREMENT FOR EXECUTE.\n         LA    R0,16             LOAD NUMBER OF TRANSLATES REQUIRED.\nSPFXLATE EX    R5,SPFBUFTR       GET RID OF UNPRINTABLES.\n         LA    R2,1(R5,R2)       ADJUST POINTER.\n         BCT   R0,SPFXLATE       (ASSUME ISPF SCREEN STARTS WITH ATTR.)\n         MVC   0(6,R1),=X'C11140401DF8' SUPPLY WCC, SBA AND INITIAL SF.\n         LA    R0,5              LENGTH OF EXTRA DATA STREAM PREFIX.\n         AH    R0,SPYSCRN        GET TOTAL DATA STREAM LENGTH.\n*        ICM   R1,B'1000',TPUTFLG\n*        TPUT  (1),(0),R         SHOW ISPF LOGICAL TERMINAL DISPLAY.\n         STM   R14,R12,SAVE+12   SAVE REGISTERS.\n         BAS   R2,STRM3270       DISPLAY ISPF SCREEN BUFFER.\n         LM    R14,R12,SAVE+12   RESTORE REGISTERS.\nPOSTSPF  L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R1\n         L     R2,WINBUFF        POINT TO DISPLAY AREA.\n         DROP  R1                WNDWMNGR.\n         CLI   INBUFF,X'6E'      PA2 - REFRESH REQUEST?\n         BNE   WRITECHK          NO, START CHECKING THAT WRITE COMMAND.\n         LA    R2,3840(,R2)      YES, POINT TO PREVIOUS BUFFER IF ANY.\nWRITECHK CLI   0(R2),X'F1'       WRITE COMMAND?\n         BE    VALIDWRT          YES.\n         CLI   0(R2),X'F5'       ERASE/WRITE COMMAND?\n         BE    PRIMEWRT          YES.\n         CLI   0(R2),X'7E'       ERASE/WRITE ALTERNATE COMMAND?\n         BE    VALIDWRT          YES.\n         CLI   INBUFF,X'6E'      PA2 - REFRESH REQUEST?\n         BE    WRONGWRT          YES, RESEND ERROR MESSAGE.\n         CLC   TPUTCMND,0(R2)    HAS THE WRITE COMMAND OR WCC CHANGED?\n         BE    SPYTGET           NO, SO SAVE A TPUT.\nWRONGWRT MVC   TPUTCMND,0(R2)    SAVE THE INVALID VTAM WRITE AND WCC.\n         UNPK  WRITECDE(5),0(3,R2)\n         TR    WRITECDE(4),HEX-C'0'\n         MVI   WRITECDE+4,C''''\n         LA    R1,WRITEMSG       NOTIFY USER OF\n         LA    R0,WRITELEN          INVALID VTAM WRITE\n         ICM   R1,B'1000',TPUTFLG      COMMAND AND SHOW IT\n         TPUT  (1),(0),R                  AND THE WCC.\n         B     SPYWAIT           ALSO SKIP THE INPUT SIDE OF THINGS.\nPRIMEWRT MVC   SPYSCRN,PRIMESZ   NOW IN 24 BY 80 MODE.\nVALIDWRT MVC   TPUTCMND,0(R2)    SAVE VTAM WRITE COMMAND AND WCC.\n         NI    1(R2),X'C7'       TURN OFF WCC PRINTER BITS.\n         OI    1(R2),X'C3'       TURN ON RESET KEYBD, MDT AND AID BITS.\n         LA    R4,2(,R2)         POINT AFTER WRITE CONTROL CHARACTER.\n         NI    JOBFLAG2,255-PTLN TURN OFF LENGTH-KNOWN FLAG.\n         SLR   R6,R6             RESET CURRENT SCREEN BUFFER ADDRESS.\n         LA    R0,3837           MAXIMUM NUMBER OF BYTES TO SEARCH.\n         CL    R0,TPUTSIZE       IS TPUTSIZE SENSIBLE?\n         BL    SILLYSIZ          NO, USE THE OLD INSERT-CURSOR TRICK.\n         L     R0,TPUTSIZE       YES, USE IT.\n         AHI   R0,-22            SUBTRACT THE FUDGE FACTOR.\n         BNP   SILLYSIZ          WELL, MAYBE NOT.\n         OI    JOBFLAG2,PTLN     REMEMBER NOT TO STOP AT AN IC ORDER.\n         B     LOOK4IC           COMMENCE TPUT DATA STREAM SCAN.\nSILLYSIZ LA    R0,3837           MAXIMUM NUMBER OF BYTES TO SEARCH.\n         CLI   2(R2),X'05'       REMNANTS OF A QUERY?\n         BE    EOSPYDAT          YES, FOUND THE END OF THE NEW DATA.\nLOOK4IC  CLI   0(R4),X'08'       FOUND A GRAPHIC ESCAPE?\n         BE    FOUNDGE           YES.\n         CLI   0(R4),X'11'       FOUND A SET BUFFER ADDRESS?\n         BE    SPYADCHK          YES, DON'T LOOK FOR IC IN 3270 ADDR.\n         CLI   0(R4),X'12'       FOUND AN ERASE UNPROTECTED TO ADDRESS?\n         BE    SPYADCHK          YES, DON'T LOOK FOR IC IN 3270 ADDR.\n         CLI   0(R4),X'13'       FOUND AN INSERT CURSOR?\n         BE    FOUNDIC           YES, ASSUME THE END OF THE TPUT.\n         CLI   0(R4),X'1D'       FOUND A START FIELD?\n         BE    FOUNDSF           YES.\n         CLI   0(R4),X'28'       FOUND A SET ATTRIBUTE?\n         BE    FOUNDSA           YES.\n         CLI   0(R4),X'29'       FOUND A SET FIELD EXTENDED?\n         BE    FOUNDSFE          YES.\n         CLI   0(R4),X'2C'       FOUND A MODIFY FIELD?\n         BE    FOUNDMF           YES, DON'T KNOW IF SF/E ALREADY THERE.\n         CLI   0(R4),X'3C'       FOUND A REPEAT TO ADDRESS?\n         BE    SPYADCHK          YES, DON'T LOOK FOR IC IN 3270 ADDR.\n         CLI   0(R4),X'C0'       FOUND A FIELD ATTRIBUTE?\n         BE    FOUNDFA           YES, SHOULDN'T HURT IF REALLY A '{'.\n         CLI   0(R4),X'FF'       FOUND AN INVALID CHARACTER?\n         BE    EOSPYDAT          YES, ASSUME THE END OF THE TPUT.\n         OC    0(128,R4),0(R4)   NO, BUT LOTS OF NULLS?\n         BZ    EOSPYDAT          YES, ASSUME THE END OF THE TPUT.\n         LA    R6,1(,R6)         NO, INCREMENT SCREEN BUFFER ADDRESS.\n         CLI   0(R4),X'00'       TEST FOR ONE NULL.\n         BE    SPYSKIP1          JUST ANOTHER BYTE IN THE DATA STREAM.\n         CLI   0(R4),X'40'       TEST FOR A VALID CODE POINT.\n         BNL   SPYSKIP1          JUST ANOTHER BYTE IN THE DATA STREAM.\n         MVI   0(R4),C'?'        TRANSLATE LATE OUT RUBBISH.\n         B     SPYSKIP1          JUST ANOTHER BYTE IN THE DATA STREAM.\nFOUNDGE  CLI   1(R4),X'40'       VALID APL CHARACTER?\n         BL    EOSPYDAT          NO, SO TERMINATE DATA STREAM SCAN.\n         CLI   1(R4),X'FF'\n         BE    EOSPYDAT          NO, SO TERMINATE DATA STREAM SCAN.\n         LA    R6,1(,R6)         YES, INCREMENT SCREEN BUFFER ADDRESS.\n         B     SPYSKIP2          COPY ENTIRE APL SPECIFICATION.\nFOUNDSA  CLI   1(R4),X'41'       IS ATTRIBUTE TYPE INVALID?\n         BL    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.\n         CLI   1(R4),X'43'\n         BH    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.\n         TM    2(R4),X'F0'       IS ATTRIBUTE VALUE VALID?\n         BNM   SPYSKIP3          HOPE SO, COPY WHOLE SA SPECIFICATION.\n         MVI   2(R4),X'00'       PERHAPS, BUT WE'LL USE THE DEFAULT.\n         B     SPYSKIP3          COPY WHOLE SA SPECIFICATION.\nFOUNDMF  MVI   0(R4),X'29'       REPLACE MF WITH SFE BECAUSE REFERENCED\n*                                FIELD ATTR MAY NOT HAVE BEEN CAPTURED.\nFOUNDSFE CLI   1(R4),4           VALID NUMBER OF PAIRS SPECIFIED?\n         BH    EOSPYDAT          NO, TOO MANY SO TRUNCATE DATA STREAM.\n         CLI   1(R4),0\n         BE    EOSPYDAT          NO, TOO FEW SO TRUNCATE DATA STREAM.\n         CLI   2(R4),X'C0'       IS FIRST PAIR FIELD ATTRIBUTE?\n         BE    SPYSKIP2          YES, COPY SFE AND PAIR COUNT.\n         CLI   2(R4),X'41'       IS FIRST PAIR TYPE INVALID?\n         BL    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.\n         CLI   2(R4),X'43'       IS FIRST PAIR TYPE INVALID?\n         BH    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.\n         TM    3(R4),X'F0'       IS FIRST PAIR VALUE INVALID?\n         BM    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.\n         SLR   R7,R7             NO, ASSUME ALL PAIRS ARE VALID.\n         IC    R7,1(,R4)         GET THE NUMBER OF PAIRS.\n         SLL   R7,1              GET BYTE COUNT AFTER PAIR COUNT.\n         LA    R7,1(,R7)         GET TOTAL SFE BYTE COUNT MINUS ONE.\n         AR    R4,R7             ADD TO DATA SCAN ADDRESS.\n         SR    R0,R7             TAKE FROM BYTES-TO-BE-SCANNED COUNT.\n         LA    R6,1(,R6)         INCREMENT SCREEN BUFFER ADDRESS.\n         B     SPYSKIP1          COPY ALL SFE DATA.\nFOUNDFA  CLI   1(R4),C' '        A CONTROL BYTE AFTER A REAL '{'?\n         BL    SPYSKIP1          YES, DON'T FIDDLE WITH IT YET.\nFOUNDSF  LA    R6,1(,R6)         INCREMENT SCREEN BUFFER ADDRESS.\n         TM    1(R4),B'00001100' A NON-DISPLAY FIELD?\n         BNO   SPYSKIP2          NO, DO NOT CHANGE ATTRIBUTE BYTE.\n         NI    1(R4),B'00110011' YES, CHANGE TO LOW-INTENSITY DISPLAY.\n         TR    1(1,R4),TABLE     RE-TRANSLATE TO 3270 DATA STREAM CHAR.\n         B     SPYSKIP2          SEND EDITED ATTRIBUTES.\nSPYADCHK SLR   R15,R15           VALIDATE TARGET SCREEN'S ADDRESS HERE.\n         ICM   R15,B'0011',1(R4) LOAD THE ADDRESS.\n         TM    1(R4),B'11000000' 14-BIT SCREEN BUFFER ADDRESS?\n         BZ    SPYADCMP          YES, COMPARE IT.\n         TM    1(R4),B'01000000' VALID 12-BIT ADDRESS?\n         BZ    EOSPYDAT          NO, TERMINATE DATA STREAM SCAN.\n         SLL   R15,2             SHIFT OUT HIGH-ORDER 2 \"PARITY\" BITS.\n         ICM   R15,B'0010',1(R4) GET HIGH-ORDER ADDRESS BYTE.\n         SLL   R15,18            SHIFT OUT HIGH-ORDER 2 \"PARITY\" BITS.\n         SRL   R15,20            CONVERT TO BINARY INTEGER.\nSPYADCMP CH    R15,SPYSCRN       IS TARGET SCREEN TOO BIG FOR THIS ONE?\n         BNL   EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.\n         CLI   0(R4),X'3C'       NO, REPEAT-TO-ADDRESS BEING CHECKED?\n         BNE   SETSCRN@          NO, ONLY COPY THREE BYTES.\n         CR    R15,R6            MOVING FORWARD?\n         BH    RAADDROK          YES, PROCEED.\n         LTR   R15,R15           REPEATING TO END OF SCREEN?\n         BNZ   EOSPYDAT          NO, STOP WRAP-AROUND.\nRAADDROK CLI   3(R4),X'00'       REPEATING NULLS?\n         BE    SPYSKIP4          YES, THAT'S ALRIGHT.\n         CLI   3(R4),X'FF'       INVALID CODE POINT?\n         BE    EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.\n         CLI   3(R4),X'40'       VALID CODE POINT?\n         BNL   SPYSKIP4          YES, THAT'S ALRIGHT.\n         CLI   3(R4),X'08'       APL CHARACTER?\n         BNE   EOSPYDAT          NO, INVALID CODE POINT.\n         CLI   4(R4),X'FF'       INVALID CODE POINT?\n         BE    EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.\n         CLI   4(R4),X'40'\n         BL    EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.\n         LA    R4,1(,R4)         POINT TO NEXT BYTE.\n         BCTR  R0,0              ADJUST RESIDUAL BYTE COUNTER.\nSPYSKIP4 LA    R4,1(,R4)         POINT TO NEXT BYTE.\n         BCTR  R0,0              ADJUST RESIDUAL BYTE COUNTER.\nSETSCRN@ LR    R6,R15            SET NEW SCREEN BUFFER ADDRESS.\nSPYSKIP3 LA    R4,1(,R4)         POINT TO NEXT BYTE.\n         BCTR  R0,0              ADJUST RESIDUAL BYTE COUNTER.\nSPYSKIP2 LA    R4,1(,R4)         POINT TO NEXT BYTE.\n         BCTR  R0,0              ADJUST RESIDUAL BYTE COUNTER.\nSPYSKIP1 LA    R4,1(,R4)         POINT TO NEXT BYTE.\n         LTR   R0,R0             GONE PAST THE MAXIMUM?\n         BNP   EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.\n         CLI   0(R4),X'13'       IS INSERT CURSOR NEXT?\n         BE    NEXTICOK          YES, DON'T STOP NOW.\n         CH    R6,SPYSCRN        IS THE SCREEN FILLED NOW?\n         BNL   EOSPYDAT          YES, DON'T WRAP-AROUND.\nNEXTICOK BCT   R0,LOOK4IC        GO AND EXAMINE IT.\n         B     EOSPYDAT          REACHED THE ARBITRARY LIMIT.\nFOUNDIC  TM    JOBFLAG2,PTLN     IS THE TPUT DATA LENGTH KNOWN?\n         BZ    STOPATIC          NO, END WITH THE INSERT CURSOR.\n         CHI   R0,30             LOTS OF DATA TO GO?\n         BH    SPYSKIP1          YES, TREAT THE IC AS ANY DATA BYTE.\nSTOPATIC LA    R4,1(,R4)         NO, BUT SEND THE INSERT CURSOR ITSELF.\nEOSPYDAT CLI   INBUFF,X'6E'      PA2 - REFRESH REQUEST?\n         BE    NEWWRITE          YES, RESEND THE LATEST TPUT.\n         LR    R1,R2             NO, POINT TO THE WRITE COMMAND.\n         LA    R0,15             COMPARISON LOGIC TO SAVE ON TPUTS.\nCMPRTPUT CLC   0(256,R1),3840(R1) COMPARE THIS BUFFER TO PREVIOUS ONE.\n         BNE   NEWWRITE          MISMATCH SO UPDATE THE SCREEN.\n         LA    R1,256(,R1)       POINT TO NEXT 256 BYTES FOR COMPARE.\n         BCT   R0,CMPRTPUT       GO COMPARE IT.\n         B     SPYTGET           NO CHANGE SO NO TPUT.\nNEWWRITE SR    R4,R2             GET THE DATA STREAM LENGTH.\n         L     R14,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R14\n         L     R14,WINBUFF       POINT TO DISPLAY AREA.\n         DROP  R14               WNDWMNGR.\n         LA    R14,3840(,R14)    POINT TO THE COMPARE SAVE AREA.\n         LA    R14,3840(,R14)    POINT TO A NEW SAVE AREA.\n         ST    R2,0(,R14)        SAVE THE TPUT BUFFER ADDRESS.\n         ST    R4,4(,R14)        SAVE THE TPUT BUFFER LENGTH.\n         LA    R14,8(,R14)       POINT AFTER THIS TO TRACE AREA.\n         LA    R15,3840          LOAD TRACE AREA SIZE.\n         LR    R0,R2             GET TPUT SOURCE DATA ADDRESS.\n         LR    R1,R4             GET TPUT SOURCE DATA LEN (NULL PAD).\n         MVCL  R14,R0            TRACE TPUT DATA STREAM FOR DEBUG.\n         CLI   0(R2),X'F3'       WRITE STRUCTURED FIELD?\n         BE    SKIPTPUT          YES, DO NOT ATTEMPT TO ECHO.\n*        TPUT  (R2),(R4),NOEDIT,WAIT,MF=(E,TPUTNOED)\n         STM   R14,R12,SAVE+12   SAVE REGISTERS.\n         LR    R1,R2             POINT TO THE DATA STREAM.\n         LR    R0,R4             GET THE DATA STREAM LENGTH.\n         BAS   R2,STRM3270       DISPLAY ISPF SCREEN BUFFER.\n         LM    R14,R12,SAVE+12   RESTORE REGISTERS.\nSKIPTPUT CLI   INBUFF,X'6E'      PA2 - REFRESH REQUEST?\n         BE    SPYWAIT           YES, SKIP OVER TGET PROCESSING.\n         LR    R1,R2             POINT TO THE WRITE COMMAND.\n         LA    R0,15\nSAVETPUT MVC   3840(256,R1),0(R1) SAVE THIS BUFFER FOR COMPARE TO NEXT.\n         LA    R1,256(,R1)       POINT TO NEXT 256 BYTES FOR MOVE.\n         BCT   R0,SAVETPUT       GO MOVE IT.\nSPYTGET  CLC   SECTIOWA,SECWORKA HAS ANY TGET DATA CHANGED?\n         BE    SPYWAIT           NO, SCREEN UPDATES COMPLETE.\n         MVC   SECTIOWA,SECWORKA YES, SAVE THE NEW BUFFER.\n         TM    SECWORKA,X'40'    DINKY-DI AID?  IF INBOUND STRUCTURED\n         BZ    SPYWAIT           FIELD OR GARBAGE THEN DON'T ECHO IT.\n         L     R5,TGETSIZE       GET SIZE OF TGET DATA.\n         CHI   R5,256            TGET LENGTH OVER 255?\n         BL    SPYGETOK          NO.\n         LA    R5,255            YES, GET NEW MAXIMUM LENGTH.\n         LA    R0,1              POSSIBLY ONE LESS.\n         CLI   SECWORKA+254,X'11'\n         BE    TGETLESS\n         CLI   SECWORKA+254,X'1D'\n         BE    TGETLESS\n         CLI   SECWORKA+254,X'28'\n         BE    TGETLESS\n         LA    R0,2              POSSIBLY TWO LESS.\n         CLI   SECWORKA+253,X'11'\n         BE    TGETLESS\n         CLI   SECWORKA+253,X'28'\n         BE    TGETLESS\n         SLR   R0,R0             NO 3270 ORDERS SEEM TO BE TRUNCATED.\nTGETLESS SR    R5,R0             TIDY UP END OF DATA STREAM.\n         ST    R5,TGETSIZE       UPDATE SIZE VARIABLE FOR TESTING.\nSPYGETOK CLI   TGETSIZE+3,3      WAS IT A SHORT READ?\n         BL    SPYWAIT           YES, NO USEFUL DATA HERE.\n         LR    R0,R5             COPY PROCESSABLE TGET DATA LENGTH.\n         SLR   R15,R15\n         LA    R7,SECWORKA       POINT TO THE AID BYTE.\n         B     GETADCHK          GO CHECK THE CURSOR ADDRESS FIRST.\nGETADRLP CLI   0(R7),X'00'       JUST A NULL?\n         BE    GETNOTRA          YES, LET IT THROUGH.\n         CLI   0(R7),X'11'       SET-BUFFER-ADDRESS?\n         BE    GETADCHK          YES, CHECK OUT SCREEN BUFFER ADDRESS.\n         CLI   0(R7),X'1D'       START FIELD?\n         BE    GETNOTRA          YES, LET IT THROUGH.\n         CLI   0(R7),X'28'       SET ATTRIBUTE?\n         BE    GETNOTRA          YES, LET IT THROUGH.\n         CLI   0(R7),X'40'       INVALID CHARACTER?\n         BL    SPYWAIT           YES, SUPPRESS WHOLE TGET DATA STREAM.\n         CLI   0(R7),X'FF'       INVALID CHARACTER?\n         BE    SPYWAIT           YES, SUPPRESS WHOLE TGET DATA STREAM.\n         B     GETNOTRA          NO, LET TEXT BYTE THROUGH.\nGETADCHK ICM   R15,B'0011',1(R7) LOAD THE ADDRESS.\n         TM    1(R7),B'11000000' 4-BIT SCREEN BUFFER ADDRESS?\n         BZ    SPYADGET          YES, COMPARE IT.\n         TM    1(R7),B'01000000' VALID 12-BIT ADDRESS?\n         BZ    SPYWAIT           NO, TERMINATE DATA STREAM SCAN.\n         SLL   R15,2             SHIFT OUT HIGH-ORDER 2 \"PARITY\" BITS.\n         ICM   R15,B'0010',1(R7) GET HIGH-ORDER ADDRESS BYTE.\n         SLL   R15,18            SHIFT OUT HIGH-ORDER 2 \"PARITY\" BITS.\n         SRL   R15,20            CONVERT TO BINARY INTEGER.\nSPYADGET CH    R15,SPYSCRN       IS TARGET SCREEN TOO BIG FOR HERE?\n         BNL   SPYWAIT           YES, SUPPRESS WHOLE TGET DATA STREAM.\n         LA    R7,2(,R7)\n         BCTR  R0,0\n         BCTR  R0,0\nGETNOTRA LA    R7,1(,R7)          ADJUST DATA STREAM POINTER.\n         BCT   R0,GETADRLP        TEST NEXT BYTE.\n         MVI   SECTCT,X'C3'       CONSTRUCT A TPUT - HERE'S THE WCC.\n         LA    R7,SECTCT+1        UPDATE BUFFER POINTER.\n         AHI   R5,-4              GET LENGTH CODE OF TEXT.\n         BM    SPYPTCSR           LOOKS LIKE JUST THE READ HEADER.\n         TM    MODESW2,COL4+COL2  IN SEVEN-COLOUR MODE?\n         BNZ   SNAZDGET           NO, DONE ANY TARTING UP OF TGET TEXT.\n         MVC   0(3,R7),=X'2841F4' UNDERSCORE INPUT TEXT.\n         LA    R7,3(,R7)          UPDATE BUFFER POINTER.\nSNAZDGET EX    R5,TGETMOVE        LOAD THE TEXT INTO THE DATA STREAM.\n         LA    R7,1(R5,R7)        POINT TO NEXT VACANT OUTPUT BYTE.\nSPYPTCSR MVI   0(R7),X'11'        TACK CURSOR ON TO END OF TEXT.\n         MVC   1(2,R7),SECWORKA+1\n         MVI   3(R7),X'13'\n         LA    R7,4(,R7)          POINT PAST END OF DATA STREAM.\n         CLI   SECWORKA,X'7D'     WAS IT AN ENTER?\n         BE    SPYPTGET           YES, DROP AID DISPLAY AND PUT GET.\n         TM    MODESW2,COL4+COL2  IN SEVEN-COLOUR MODE?\n         BNZ   SPYPTGET           NO, AID DATA WILL ONLY CONFUSE.\n         MVC   0(3,R7),=X'2841F2' REVERSE VIDEO AID HEX.\n         UNPK  3(3,R7),SECWORKA(2)\n         TR    3(2,R7),HEX-C'0'   DISPLAY PFK AID.\n         LA    R7,5(,R7)          UPDATE BUFFER POINTER.\nSPYPTGET LA    R1,SECTCT          POINT TO START OF DATA STREAM.\n         LR    R0,R7              POINT PAST END OF DATA STREAM.\n         SR    R0,R1              GET THE LENGTH OF THE DATA STREAM.\n         ICM   R1,B'1000',TPUTFLG LOAD FULLSCREEN TPUT FLAGS.\n         TPUT  (1),(0),R          WRITE OUT THE TGET DATA.\nSPYWAIT  STIMER WAIT,BINTVL=SPYDELAY   WAIT A BIT.\n         XC    INBUFF(INBUFLEN),INBUFF  CLEAR PREVIOUS INPUT.\n         LA    R1,INBUFF          LOAD ADDRESS OF INPUT BUFFER.\n         LA    R0,INBUFLEN        LOAD LENGTH OF BUFFER.\n         ICM   R1,B'1000',=AL1(TGETFLGN)   LOAD TGET TYPE FLAGS.\n         TGET  (1),(0),R          READ THE INPUT DATA FROM USER.\n         TM    MODESW2,ATTN       ANY ATTENTION INTERRUPTION?\n         BZ    SPYTGOT            NO, CHECK FOR OTHER INPUT.\n         STFSMODE ON,NOEDIT=YES   YES, RESTORE VTAM FULL SCREEN MODE.\nSTPSPYNG NI    JOBFLAGS,255-SPY   TERMINATE SPYING.\n         TM    JOBFLAG2,JALT      ALTERNATE SCREEN SIZE SET?\n         BZ    ARESTSPY           NO.\n         NI    JOBFLAG2,255-JALT  YES, RESET FLAG.\n         STSIZE SIZELOC=COLUMNS,LINELOC=LINES\nARESTSPY MVI   STMSG+1,X'F5'      USE ERASE/WRITE.\n         CLI   LINES+3,24         PRIMARY SIZE TO BE USED?\n         BNH   SPYTERMD           YES.\n         MVI   STMSG+1,X'7E'      REPLACE ERASE/WRITE WITH E/W ALT.\nSPYTERMD MVC   JREDTXT,JSTTEXT    LOAD MESSAGE TEXT.\n         LA    R1,STMSG           POINT TO \"SPY TERMINATED\" MESSAGE.\n         LA    R0,STMSGLEN        GET \"SPY TERMINATED\" MESSAGE LENGTH.\n         TM    JOBFLAGS,WAIT      WAIT REQUEST ACTIVE?\n         BZ    SHOWMSGJ           NO, SHOW MSG AND GET NEXT REQUEST.\nSTOPWAIT NI    JOBFLAGS,255-WAIT  YES, CANCEL WAITING.\n         MVC   JREDTXT,JWCTEXT    LOAD MESSAGE TEXT.\n         LA    R1,WCMSG           POINT TO \"WAIT CANCELLED\" MESSAGE.\n         LA    R0,WCMSGLEN        GET \"WAIT CANCELLED\" MESSAGE LENGTH.\nSHOWMSGJ BAS   R14,SCREENIO       CALL SCREEN I/O HANDLER.\n         B     CMDSCANJ           SHOW MESSAGE AND GET NEXT REQUEST.\nSPYTGOT  CHI   R15,4              ANY INPUT?\n         BE    REDOJOBS           NO, REDO FULL A. S. VALIDATION.\n         TM    JOBFLAGS,WAIT      WAITING FOR SWAP-IN?\n         BO    WTPA2CHK           YES, CHECK FOR A PA2.\n         CH    R15,EIGHTJ         PA1 - ATTENTION INTERRUPT?\n         BE    STPSPYNG           YES, TERMINATE TSO SESSION SPY.\n         CLI   INBUFF,X'6E'       PA2 - REFRESH REQUEST?\n         BE    POSTSPY            YES, RESEND THE LATEST TPUT.\n         TCLEARQ INPUT            NO, FLUSH QUEUED INPUT.\n         B     REDOJOBS           CONTINUE SPYING.\nWTPA2CHK CLI   INBUFF,X'6E'       PA2 - RECONFIRM REQUEST?\n         BNE   STOPWAIT           NO, STOP WAITING.\n         LA    R1,WTPA2MSG        YES, WRITE A LITTLE DATA STREAM.\n         LA    R0,L'WTPA2MSG\n         ICM   R1,B'1000',TPUTFLG\n         TPUT  (1),(0),R\n         B     REDOJOBS          CONTINUE WAITING.\n         DROP  R3                ASCB.\n         SPACE\nCMDMOVE  MVC   LL-74(0,R2),SECRB+4              <<< EXECUTED >>>\nPARMMOVE MVC   LL-73(0,R2),SECRB+2              <<< EXECUTED >>>\nTGETMOVE MVC   0(0,R7),SECWORKA+3               <<< EXECUTED >>>\n         TITLE 'JOB STATUS MONITOR - SHOW NAME/TOKEN PAIRS'\nJNTTSHOW ST    R7,WORK           SAVE RETURN ADDRESS.\n         LA    R5,72\n         MVCP  JNTTHOLD(R5),0(R6),R14   COPY NTT HEADER.\n         ICM   R6,15,JNTTHOLD+64 POINT TO FIRST NTTE.\n         BZ    JNTTDONE          NO NAME/TOKEN PAIRS.\n         LTR   R4,R4             TASK-LEVEL?\n         BNZ   JNTPLOOP          YES.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-79(R2),C' '\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-59(38,R2),JASNTHDR\n         BAS   R1,JADDDDLN       SHOW NAME/TOKEN HEADING.\nJNTPLOOP MVC   0(LL-79,R2),MEDX\n         MVI   LL-79(R2),C' '\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVCP  JNTTHOLD(R5),0(R6),R14   COPY NTTE.\n         MVC   LL-75(16,R2),JNTTHOLD+8  SHOW THE NAME IN PINK.\n*--      MVC   LL-57(16,R2),JNTTHOLD+24 SHOW THE TOKEN IN TURQUOISE.\n         TR    LL-79(79,R2),XLATETBL\n*--      MVI   LL-58(R2),X'25'\n         LA    R15,LL-59(,R2)    POINT TO TOKEN HEX DISPLAY AREA.\n         LA    R0,6              GET WORD COUNT.\n         LA    R7,JNTTHOLD+16    POINT TO THE TOKEN.\nJNTXLOOP MVI   0(R15),X'24'\n         UNPK  1(9,R15),0(5,R7)\n         TR    1(8,R15),HEX-C'0'\n         LA    R15,9(,R15)       POINT TO NEXT AREA.\n         LA    R7,4(,R7)         POINT TO WORD OF TOKEN.\n         BRCT  R0,JNTXLOOP\n         MVI   0(R15),X'25'\n         BAS   R1,JADDDDLN       DETAIL LINE NOW COMPLETE.\n         ICM   R6,15,JNTTHOLD+64 POINT TO NEXT NTTE.\n         BNZ   JNTPLOOP          PROCESS NEXT NAME/TOKEN.\nJNTTDONE L     R7,WORK           RESTORE RETURN ADDRESS.\n         BR    R7\n         SPACE 2\n*  FORMAT GENERAL PURPOSE REGISTERS\n*         ON INPUT: R5 -> 16 WORDS OF GPRS0->15\n*                   R14 = RETURN ADDRESS\nJFMTGPRS LA    R7,2              YES, TWO SCREEN LINES NEEDED.\n         LA    R6,=C'0-7:8-F:'   GENERAL PURPOSE REGISTER LABELS.\nGPRLINE  MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F6'   YELLOW.                        (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LA    R0,8              EIGHT REGISTERS PER SCREEN LINE.\n         MVC   LL-79(4,R2),0(R6) SUPPLY REGISTER LABELS.\n         LA    R1,LL-74(,R2)     POINT TO FIRST REGISTER SLOT.\nNEXTGPR  TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   *+8               NO, DISABLE TAB SELECTABLE FIELD.\n         MVI   0(R1),X'24'       YES, MAKE ADDRESS TAB SELECTABLE.\n         UNPK  1(9,R1),0(5,5)    UNPACK THE REGISTER CONTENTS.\n         TR    1(8,R1),HEX-C'0'  CONVERT TO EBCDIC NUMERICS.\n         MVI   9(R1),X'26'       TERMINATE SELECTION FIELD.\n         LA    R1,9(,R1)         POINT TO NEXT REGISTER POSITION.\n         LA    R5,4(,R5)         POINT TO NEXT REGISTER CONTENTS.\n         BCT   R0,NEXTGPR        PROCESS NEXT GENERAL PURPOSE REGISTER.\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         LA    R6,4(,R6)         POINT TO NEXT LINE'S REGISTER LABELS.\n         BCT   R7,GPRLINE        NO, DO TWO GPR DISPLAY LINES.\n         BR    R14               RETURN TO CALLER.\n         SPACE 2\n         DROP  R11,R10,R9        JOBSTATS.\n         TITLE 'JOB STATUS MONITOR - MACRO LIST FORMS'\nESTAEONJ ESTAE XMSABEND,PARAM=RETRYADR,SDWALOC31=YES,MF=L\n         TITLE 'JOB STATUS MONITOR - TASK ABNORMAL END EXIT'\n         USING XMSABEND,R15\nXMSABEND CHI   R0,12             ENTRY CODE 12?\n         BE    ENTRY12J          YES, ISSUE MSG AND PERCOLATE ABEND.\n         SPACE\n         STM   R14,R12,12(R13)   NO, SAVE REGISTERS IN SUPPLIED AREA.\n         DROP  R15               XMSABEND.\n         USING XMSABEND,R10\n         LR    R10,R15           LOAD EXIT BASE REGISTER.\n         USING SDWA,R3\n         LR    R3,R1             POINT TO SYSTEM DIAGNOSTIC WORK AREA.\n         OI    JOBFLAGS,FOILED   FLAG ABORT OF CROSS MEMORY PROCESSING.\n         L     R2,ABNDCNTR       INCREMENT THE ABEND COUNTER.\n         LA    R2,1(,R2)\n         ST    R2,ABNDCNTR\n         MVC   ABENDCMP,SDWAABCC SAVE THE LATEST ABEND CODE.\n         MVC   ABENDPSW,SDWAEC1  SAVE CORRESPONDING PSW.\n         XC    ABENDCRC,ABENDCRC CLEAR THE REASON CODE.\n         TM    SDWACMPF,SDWARCF  IS SDWACRC VALID?\n         BNO   XMSCRCOK          NO.\n         L     R1,SDWAXPAD       POINT TO SDWAPTRS.\n         USING SDWAPTRS,R1\n         L     R1,SDWASRVP       POINT TO SDWARC1.\n         DROP  R1                SDWAPTRS.\n         USING SDWARC1,R1\n         MVC   ABENDCRC,SDWACRC  SAVE ABEND REASON CODE.\n         DROP  R1                SDWARC1.\nXMSCRCOK L     R12,SDWAPARM      LOAD THE RETRY ADDRESS.\n         SETRP WKAREA=(3),REGS=(14,12),DUMP=NO,RC=4,                   +\n               RETADDR=(12),RETREGS=YES,FRESDWA=YES\n         DROP  R3                SDWA.\n         SPACE\nENTRY12J LR    R10,R15           LOAD EXIT BASE REGISTER.\n         LR    R5,R14            SAVE RETURN ADDRESS.\n         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTOPCTP       POINT TO THE RMCT.\n         DROP  R1                CVT.\n         USING RMCT,R1\n         L     R1,RMCTMCT        POINT TO THE MCT.\n         DROP  R1                RMCT.\n         USING MCT,R1\n*                                SQA SHORTAGE?\n         TM    MCTSFLGS,MCTSQA1+MCTSQA2\n         BNZ   JOKSWAP2          YES, STAY NON-SWAPPABLE.\n*                                AUXILIARY STORAGE SHORTAGE?\n         TM    MCTOFLGS,MCTASM1+MCTASM2\n         BNZ   JOKSWAP2          YES, STAY NON-SWAPPABLE.\n*                                REAL/PAGEABLE STORAGE SHORTAGE?\n         TM    MCTCFLGS,MCTRLSHT+MCTB16SH+MCTDRSHT+MCTB2GSH\n         BNZ   JOKSWAP2          YES, STAY NON-SWAPPABLE.\n         DROP  R1                MCT.\n         SYSEVENT OKSWAP         NO, BECOME SWAPPABLE.\nJOKSWAP2 DS    0H\n         LA    R1,ESTAJMSG       POINT TO ESTAE EXIT NOTIFY MESSAGE.\n         LA    R0,L'ESTAJMSG     GET THE LENGTH OF THIS MESSAGE.\n         TPUT  (1),(0),R         DISPLAY THE MESSAGE ON THE SCREEN.\n         LR    R14,R5            RESTORE RETURN ADDRESS.\n         SLR   R15,R15           CONTINUE WITH ABEND (PERCOLATE).\n         BR    R14               EXIT FROM EXIT.\n         DROP  R10               XMSABEND.\n         TITLE 'JOB STATUS MONITOR - VARIABLES AND CONSTANTS'\nGRANDHRS DC    FD'3600000000000'\n**ME1440 DC    F'82397'\nSECPNTR  DC    A(0)\nRBPTR    DC    AL1(0)\nRBSAVER  DC    AL3(0)\nSAVETCB  DC    A(0)\nSTACKPTR DC    A(0)              POINTER TO CURRENT TASKSTAK ELEMENT.\nTASKSTAK DC    16F'0'\n         DC    X'FFFFFFFF'       END-OF-TASKSTAK MARKER.\n*GTLNADR DC    A(X'9CB6')        POINTER TO TGET DATA LENGTH COUNTER.\n*GETADDR DC    A(0)              POINTER TO TSO/VTAM USER TGET BUFFER.\n*PTLNADR DC    A(X'5E7C')        POINTER TO TPUT DATA LENGTH COUNTER.\nTPTLNADR DC    A(X'A0F0')        POINTER TO TPUT DATA LENGTH COUNTER.\nTPUTADDR DC    A(0)              POINTER TO TSO/VTAM USER TPUT BUFFER.\nTGETSIZE DC    F'0'              SIZE OF TGET DATA READ.\nTPUTSIZE DC    F'0'              SIZE OF TPUT DATA SENT.\nTCBQUEUE DC    A(0)              TCB DISPATCHING QUEUE SCAN MARKER.\nPTR2IHSA DC    A(0)              ADDRESS OF THE IHSA.\nSAVELPSW DC    FL8'0'            LOCKED PSW SAVE AREA.\nTIOTADDR DC    A(0)              ADDRESS OF TIOT BEING EXAMINED.\nDDLINE1  DC    A(0)              ADDRESS OF THE FIRST DD DETAIL LINE.\nTWENTYK  DC    F'20480'          LOWEST USER REGION ADDRESS.\nABNDCNTR DC    F'0'              ABENDS TRAPPED BY ESTAE EXIT COUNT.\nABENDCMP DC    F'0'              LATEST COMPLETION CODE.\nABENDCRC DC    F'0'              LATEST ABEND REASON CODE.\nABENDPSW DC    FL8'0'            LATEST ABEND PSW.\nJNTTHOLD DC    XL72'00'          NAME/TOKEN HOLD AREA.\nSPYDELAY DC    F'100'            CENTISEC WAIT TIME FOR SPY SAMPLING.\nSPYSCRN  DC    H'0'              NUMBER OF POSITIONS ON THIS SCREEN.\nPRIMESZ  DC    H'1920'           NUMBER OF POSITIONS ON PRIMARY SCREEN.\nEIGHTJ   DC    H'8'\nJTIOELEN DC    H'24'             TCT I/O COUNT TABLE ENTRY LENGTH.\nPREVDDN  DC    CL8' '            HANDLE CONCAT'NS WITH 1ST DD SUPRSD.\nTPUTCMND DC    CL2'1 '           SAVE AREA FOR INVALID WTAM WRITE/WCC.\nESTAJMSG DC    C'IMP/XA ESTAE EXIT J - ENTRY CODE 12 - NO VIRTUAL STORA+\n               GE FOR RTM SDWA'\nJOBFLAGS DC    X'20'             OPTION \"J\" DISPLAY OPTIONS FLAG BYTE.\nFOILED   EQU   X'80'             CROSS MEMORY FOILED BY SWAP-OUT/ABEND.\nREGS     EQU   X'40'             DISPLAY TASK GENERAL PURPOSE REGS.\nPRBS     EQU   X'20'             DISPLAY (PROGRAM) REQUEST BLOCKS.\nLLES     EQU   X'10'             DISPLAY LOAD LIST ELEMENTS.\nCDES     EQU   X'08'             DISPLAY CONTENTS DIRECTORY ELEMENTS.\nJVSM     EQU   X'04'             DISPLAY VIRTUAL STORAGE SUBPOOLS.\nSPY      EQU   X'02'             SPY ON TSO USERS.\nWAIT     EQU   X'01'             WAIT-TILL-SWAPPED-IN PROCESSING.\nJOBFLAG2 DC    X'0A'             OPTION \"J\" DISPLAY OPTIONS FLAG BYTE.\nODCB     EQU   X'80'             DISPLAY OPEN DCB DETAILS.\nNODD     EQU   X'40'             SUPPRESS FILE/DATA SET STATUS DISPLAY.\nISPF     EQU   X'20'             ISPF TERMINAL LOGICAL DISPLAY FETCHED.\nPTLN     EQU   X'10'             TPUT DATA LENGTH SUCCESSFULLY FETCHED.\nPPRM     EQU   X'08'             DISPLAY PROGRAM PARAMETER.\nJALT     EQU   X'04'             ALTERNATE SCREEN SIZE OPERATIONAL.\nXCP0     EQU   X'02'             DISPLAY DATA SETS WITH NO I/O (YET).\nFDAT     EQU   X'01'             FETCH FILE DATA IF POSSIBLE.\nJOBFLAG3 DC    X'00'             OPTION \"J\" FLAG BYTE.\nTSOJ     EQU   X'80'             TSO TMP JOB STEP.\nLTCB     EQU   X'40'             LOCKED TCB STATUS IS IN IHSA.\nJVSPFLAG DC    C'0'              DQE CHAIN SELECTION FLAG.\nOPENMODE DC    CL32'INBK2?IOUD5?OXOI8?9?A?B?C?D?EXOT'\nRDWRTIND DC    CL4'RWGP'         READ/WRITE/GET/PUT FLAG.\nJASNTHDR DC    CL38'ADDRESS-SPACE-LEVEL NAME/TOKEN PAIR(S)'\nSTEPHDR  DC    C'JOBNAME   STEPNAME  PROCSTEP  STP  APF  PAS  EXCP-COUN+\n               T    REGION  TPUTS  TGETS'\nTIOTHDR  DC    CL79'FILENAME DEV# VOLUME EXCPCT BLKSZ DATA-SET-NAME----+\n               -------------------- CNCT/IO'\nODCBHDR  DC   CL51'BLKSZ LRECL ACCES DSO BF# MMBBBBCCCCHHHHRR MEM-TTRN'\n*GMRVIRT DC    CL79'                        VIRT ZZZZ9K   SYS ZZZZ9K\n*              EXT ZZZZZZZK   SYS ZZZZZZZK '\nALRM1MSG DC    C'ALARM: POSSIBLE SECURITY BREACH - TSO USER '\nALRM2MSG DC    C'IS USING ACID '\nSECUSER  DC    XL9'00'\nJOBGTMSG DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER COMPLETE VALID JOB NAME'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nSTATSJOB DC    X'0000000000000000'\n         DC    X'2841001BF8C2114BD2&LOW'\n         DC    C'(ENTER',X'&HIGH',C'****####',X'&LOW'\n         DC    C'TO SPECIFY ASID X''####'' - USE',X'&HIGH',C'=',X'&LOW'\n         DC    C'AS SHORTHAND FOR',X'&MED',C'****'\nSTATSELF DC    C'????'\n         DC    X'2842F5',C')'\nJOBGTLEN EQU   *-JOBGTMSG\nSPYONMSG DC    X'C31140401DF8',C'IMPXA-SPY',X'3C4040',C'?',X'13'\nSPYONLEN EQU   *-SPYONMSG\nWRITEMSG DC    X'C1115DE9',C'{WRT-CMD,WCC=X'''\nWRITECDE DC    C'0000''!?}'\nWRITELEN EQU   *-WRITEMSG\nWTPA2MSG DC    X'C11140C1E613'\nJSTTEXT  DC    C'ATTN - SPY TERMINATED'\nJWCTEXT  DC    C'ATTN - WAIT CANCELLED'\nSTMSG    DC    X'27F5'\nWCMSG    DC    X'C5115CF01DF82842F22841F2'\nJREDTXT  DC    C'                     '\n         DC    X'1140402842001D402841F41300001DF8'\nSTMSGLEN EQU   *-STMSG\nWCMSGLEN EQU   *-WCMSG\nJABNDMSG DC    X'2841F21BF8502842F1'           REVERSE,HIGH,BLUE.\nDIECOUNT DC    CL6' ZZZZ9'\n         DC    CL32' X-MEM ABENDS   -   LATEST WAS S'\nSYSABEND DC    CL3'000'\nSYSRSN   DC    CL10' '\n         DC    CL10'  -   PSW '\nSYSAPSW1 DC    CL9' '\nSYSAPSW2 DC    CL9' '\n         SPACE\n         LTORG\n         SPACE\nTCBROLES DS    0H\n         DC    CL8'  SYSLOG'       248 - SYSTEM LOG TASK.\n         DC    CL8'     DSS'       249 - DYNAMIC SUPPORT SERVICES TASK.\n         DC    CL8' JES MON'       250 - JES MONITOR TASK.\n         DC    CL8'  MASTER'       251 - MASTER SCHEDULER TASK.\n         DC    CL8' I/O RMS'       252 - I/O RMS TASK.\n         DC    CL8' COMTASK'       253 - COMMUNICATIONS TASK.\n         DC    CL8' SYS ERR'       254 - SYSTEM ERROR TASK.\n         DC    CL8'  PAGING'       255 - PAGING SUPERVISOR TASK.\n         SPACE\nXLATESPF DC    X'00404040404040404040404040404040'  ISPF BUFFER\n         DC    X'4040406D40404040404040405C405E40'       CHARACTERS.\n         DC    X'40404040404040404040404040404040'\n         DC    X'40404040404040404040404040404040'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'808182838485868788898A8B8C8D8E8F'\n         DC    X'909192939495969798999A9B9C9D9E9F'\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE40'\n         TITLE 'JOB STATUS MONITOR - FIND DATA SET NAME ROUTINE'\n         USING TIODSNFM,R11\n         USING TIOTDTLS,R2\nTIODSNFM DS    0H                     SHOW DATA SET NAME IF POSSIBLE.\n         MVC   TIODSN(36),=C'(FILE HAS NO JOB FILE CONTROL BLOCK)'\n         SLR   R15,R15\n         ICM   R15,7,SECTIOWA+12 JOB FILE CONTROL BLOCK PREFIX POINTER.\n         BZR   R1                     NO JFCB POINTER.\n         STM   R14,R12,12(R13)        SAVE REGISTERS.\n         LR    R11,R5                 LOAD BASE REGISTER.\n         MVC   TIODSN(36),=C'(JFCB LOCATED ABOVE THE 16 MEG LINE)'\n         TM    SECTIOWA+14,X'07'      SENSIBLE JFCB ADDRESS?\n         BZ    JLOWJFCB               YES, USE IT.\n         ICM   R6,15,SAVRETAD         NO, GET THE JSCB ADDRESS.\n         BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.\n         LA    R5,4\n*                                     FETCH QMPA ADDRESS.\n         MVCP  WORK(R5),JSCBQMPI-IEZJSCB(R6),R14\n         ICM   R6,15,WORK\n         BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.\n         LA    R1,SWALOCAL            POINT TO LOCAL STORAGE.\n         C     R3,PSAAOLD             LOOKING AT SELF?\n         BE    SWASPOK1               YES, LOCAL AREA IS GOOD.\n         ICM   R1,15,SWAGLBL@         NO, POINT TO GLOBAL AREA.\n         BZ    TIODSXIT               HANDLE ABSENCE OF AREA.\nSWASPOK1 EQU   *\n         XC    0(DYNSWALN,R1),0(R1)   RESET THE WORK AREA.\n         ST    R13,4(,R1)             CHAIN SAVE AREAS.\n         ST    R1,8(,R13)\n         LR    R13,R1                 POINT TO NEW SAVE AREA.\n         USING DYNSWA,R13\n         LA    R0,EPA                 GET ADDRESS OF EPA.\n         ST    R0,SWEPAPTR            INITIALIZE EPA POINTER.\n         MVC   RL4SWA(2),=CL2'RL'\n         USING ZB505,EPA\n         XC    SWAEPAX,SWAEPAX        CLEAR EXTERNAL PARAMETER AREA.\n         STCM  R15,7,SWVA             SUPPLY SVA.\n         ST    R6,SWQMPA              SUPPLY QMPA ADDRESS.\n         LTR   R14,R14                LOOKING AT SELF?\n         BNZ   SLFSWAOK               YES.\n         SAC   256                    NO.\nSLFSWAOK EQU   *\n*        SWAREQ FCODE=RL,EPA=SWEPAPTR,UNAUTH=YES,MF=(E,SWAPARMS)\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n         LA    1,SWAPARMS              PUT THE ADDRESS OF THE PARAMETER\n*                                      LIST IN REGISTER 1         @L2A\n*        LA    0,=CL2'RL'              GET ADDRESS OF FCODE       @L2A\n         LA    0,RL4SWA\n         ST    0,4(,1)                 PUT ADDRESS OF FCODE IN THE\n*                                      2ND WORD OF PARAMETER LIST @L2A\n         LA    0,SWEPAPTR              GET ADDRESS OF EPAPTR      @L2A\n         ST    0,0(,1)                 PUT ADDRESS OF EPAPTR IN THE\n*                                      1ST WORD OF PARAMETER LIST @L2A\n         LA    13,0(,13)               PREPARE R13 FOR CALL       @L2A\n         L     15,CVTPTR(0,0)          GET POINTER TO CVT         @P1C\n         USING CVTMAP,15                                          @L2A\n         L     15,CVTJESCT             GET POINTER TO JESCT       @L2A\n         USING JESCT,15                                           @L2A\n         L     15,JESCTEXT             GET POINTER TO JESCTEXT    @L2A\n         USING JESPEXT,15                                         @L2A\n         L     15,JESQBSVA             GET ADDRESS OF UNAUTHORIZED     +\n                                       SWA MANAGER                @T0A\n         DROP  15                                                 @T0A\n         BALR  14,15                   BRANCH TO SWA MANAGER      @T0A\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n         SAC   0                      REVERT TO PRIMARY ASC MODE.\n         L     R4,SWBLKPTR            GET STORAGE ADDRESS.\n         L     R13,4(,R13)            POINT TO PREVIOUS SAVE AREA.\n         DROP  R13                    DYNSWA.\n         USING GOTAREA,R13\n         L     R14,12(,R13)           RESTORE MVCP KEY VALUE.\n         LR    R1,R15                 SAVE RETURN CODE.\n         LR    R15,R4                 COPY SWA STORAGE ADDRESS.\n         LTR   R1,R1                  SUCCESS?\n         BZ    JSVAOKAY               YES, USE RESULT.\n         MVC   TIODSN+36(4),=C' RC='  NO, SHOW RETURN CODE.\n         STC   R1,TIODSN+41\n         SRL   R1,4\n         STC   R1,TIODSN+40\n         NC    TIODSN+40(2),=X'0F0F'\n         TR    TIODSN+40(2),HEX\n         B     TIODSXIT\n**       LA    R6,24(,R6)             POINT TO QMAT ADDRESS.\n**VAQMAT MVCP  WORK(R5),0(R6),R14     FETCH QMAT ADDRESS.\n**       ICM   R6,15,WORK\n**       BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.\n**       C     R15,=A(64*1024)        SVA > 64K?\n**       BL    JSVAGOOD               NO.\n**       LA    R6,12(,R6)             YES, NEED CHAINED QMAT.\n**       S     R15,=A(64*1024)        REDUCE \"OFFSET\".\n**       B     JSVAQMAT\n**VAGOOD LA    R6,1(R15,R6)           POINT TO JFCB ADDRESS.\n**       MVCP  WORK(R5),0(R6),R14     FETCH JFCB ADDRESS.\n**       ICM   R15,15,WORK\n**       BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.\n*        MVCP  WORK(R5),320(R6),R14   FETCH QDB ADDRESS.\n*        ICM   R6,15,WORK\n*        BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.\n*        MVCP  WORK(R5),12(R6),R14    FETCH FIRST DSAB ADDRESS.\n*DSABLP  ICM   R6,15,WORK\n*        BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.\n*        MVCP  WORK(R5),64(R6),R14    FETCH SIOT ADDRESS.\n*        ICM   R7,15,WORK\n*        BNP   JNXTDSAB               UNEXPECTED VALUE SO EXIT.\n*        MVCP  WORK(R5),32(R7),R14    FETCH JFCB SVA.\n*        CLM   R15,B'0111',WORK       CORRECT SIOT?\n*        BNE   JNXTDSAB               NO, CONTINUE ALONG DSAB CHAIN.\n*        MVCP  WORK(R5),156(R7),R14   YES, FETCH JFCB ADDRESS.\n*        ICM   R15,15,WORK\n*        BNZ   JSVAOKAY               USE IT.\n*        MVC   TIODSN(36),=C'(SJFCBPTR=0 - NO DYNALC IN ASID YET)'\n*        B     TIODSXIT               UNEXPECTED VALUE SO EXIT.\n*NXTDSAB MVCP  WORK(R5),4(R6),R14     FETCH NEXT DSAB ADDRESS.\n*        B     JDSABLP\nJLOWJFCB LA    R15,16(,R15)           POINT PAST JFCB SWA PREFIX.\nJSVAOKAY MVC   WORK,TIOTTRN           SAVE POSSIBLE DATA TO BE LOST.\n         LA    R5,52                  GET DATA LENGTH.\n         MVCP  TIODSN(R5),0(R15),R14  FETCH DATA SET AND MEMBER NAME.\n         CLI   TIODSN+44,C' '         ANY MEMBER PRESENT?\n         BE    GOTDSNAM               NO.\n         CLI   TIODSN+43,C' '         YES, ROOM FOR BRACKET?\n         BNE   GOTDSNAM               NO.\n         MVI   TIODSN+43,C'('         YES, SUPPLY IT.\n         LA    R1,TIODSN+42           POINT TO LAST POSSIBLE BLANK.\nTDSNBLNK CLI   0(R1),C' '             BLANK TO SUPPRESS?\n         BNE   DOMEMNAM               NO, DSNAME PROPER NOW OKAY.\n         MVC   0(9,R1),1(R1)          YES, SHUFFLE BRACKET AND MEMBER.\n         MVI   9(R1),C' '             SUPPLY TRAILING BLANK.\n         BCTR  R1,0                   POINT TO PREVIOUS BYTE.\n         B     TDSNBLNK               CHECK FOR ANOTHER BLANK.\nDOMEMNAM LA    R1,9(,R1)              POINT TO LAST BYTE OF MEMBER.\nTMEMBLNK CLI   0(R1),C' '             TRAILING BLANK IN MEMBER NAME?\n         BNE   MEMBRACK               NO, COMPLETE DATA SET NAME.\n         BCTR  R1,0                   YES, POINT TO PREVIOUS BYTE.\n         B     TMEMBLNK               CHECK FOR ANOTHER BLANK.\nMEMBRACK MVI   1(R1),C')'             SUPPLY CLOSING BRACKET.\nGOTDSNAM CLI   TIOTTRN,C' '           BLANK AREA AT END OF LINE?\n         BNE   TIODSXIT               NO, LEAVE AS IS AND RETURN.\n         MVC   TIOTTRN,WORK           YES, RESTORE PREVIOUS DATA.\nTIODSXIT LM    R14,R12,12(R13)        RESTORE REGISTERS.\n         BR    R1                     RETURN TO CALLER.\n         DROP  R2,R11            TIOTDTLS, TIODSNFM.\n         SPACE\n         LTORG\n         SPACE\nSWAGLBL@ DS    A(0)              GLOBAL STORAGE ADDRESS.\nSWALOCAL DS    XL(DYNSWALN)      LOCAL STORAGE AREA FOR SELF.\n         SPACE\n         DS    0H\n         TITLE 'JOB STATUS MONITOR - FORMAT SUBPOOL STORAGE DETAILS'\n         USING JOBSTATS,R11,R10,R9\n*\n* ON INPUT:    R14             - KEY FOR MVCP\n*              R13             - GOTAREA BASE\n*              R12             - MAINLINE BASE\n*              R11,R10,R9      - JOBSTATS BASE\n*              R8              - JSTGDTLS BASE\n*              R4              - SPQE BASE\n*              R3              - RETURN ADDRESS\n*              R2              - CURRENT DISPLAY LINE ADDRESS\n*\n         USING JSTGDTLS,R8\nJSTGDTLS TM    JOBFLAGS,JVSM     FORMATTING STORAGE DETAILS?\n         BZR   R3                NO, RETURN WITHOUT ACTION.\n         ST    R3,SECTIOWA+4     YES, SAVE THE RETURN ADDRESS.\n         ST    R4,SECTIOWA+32    SAVE THE SPQE POINTER.\nJ1       USING SPQE,SECTIOWA+32\nJVSPQELP ICM   R4,15,J1.SPQENEXT ANY SPQE POINTER?\n         BZ    JSTGEXIT          NO, SPQE CHAIN NOW PROCESSED.\n         LA    R5,20             GET LENGTH OF SPQE.\n         MVCP  J1.SPQE(R5),0(R4),R14      COPY SPQE.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F2'   RED.                           (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-74(2,R2),=C'SP'\n         LH    R0,J1.SPQESPID    SHOW SUBPOOL.\n         CVD   R0,WORK\n         MVC   LL-72(4,R2),ED3\n         ED    LL-72(4,R2),WORK+6\n         MVC   LL-66(6,R2),=C'NONSHR'\n         TM    J1.SPQEFLGS,SPQESHR    SUBPOOL SHARED?\n         BZ    *+10              NO.\n         MVC   LL-66(6,R2),=C'SHARED'\n         MVC   LL-58(3,R2),=C'KEY'\n         SLR   R0,R0\n         IC    R0,J1.SPQEKEY     GET STORAGE PROTECTION KEY.\n         SRL   R0,4              SHIFT KEY INTO LOW-ORDER NYBBLE.\n         STC   R0,LL-54(,R2)\n         TR    LL-54(1,R2),HEX   MAKE EBCDIC PRINTABLE HEX CHARACTER.\n         TM    J1.SPQEFLGS,SPQEOWN    SUBPOOL OWNED?\n         BO    JUSESPQA               YES, SHOW STORAGE DETAILS.\n         ICM   R0,7,J1.SPQETCB+1 OWNING TCB ADDRESS PRESENT?\n         BZ    JVSHRTCB          NO, DON'T SHOW ZEROS.\n         MVC   LL-50(12,R2),=C'OWNED BY TCB'\n         UNPK  LL-37(7,R2),J1.SPQETCB+1(4)\n         TR    LL-37(6,R2),HEX-C'0'\n         MVI   LL-31(R2),C' '\nJVSHRTCB BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         B     JVSPQELP          LOOK AT NEXT SPQE.\nJ2       USING SPQA,SECTIOWA+52\nJUSESPQA L     R7,J1.SPQESPQA    POINT TO THE SPQA.\n         LA    R5,24             GET LENGTH OF SPQA.\n         MVCP  J2.SPQA(R5),0(R7),R14      COPY SPQA.\n         MVI   SECTIOWA+79,X'FF' FLAG END OF DQE POINTERS.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   JVSPQOK           NO, FINAL FINISH.\n         MVI   SECTIOWA+79,X'CF' YES, CONDITIONAL FINISH.\nJVSPQOK  LA    R3,J2.SPQA        POINT TO FIRST DQE POINTERS.\n         LA    R0,8\n         SLR   R3,R0             BACK UP 8.\n         SLR   R7,R0             BACK UP 8.\nJVSPQALP LA    R3,8(,R3)         POINT TO NEXT DQE POINTER PAIR.\n         LA    R7,8(,R7)         GET ORIGINAL ADDRESS OF POINTERS.\n         CLI   3(R3),X'FF'       END OF DQE POINTER PAIRS?\n         BE    JVSPQELP          YES, PROCESS NEXT SPQE.\n         CLI   3(R3),X'CF'       NEED TO FETCH SPQX DETAILS?\n         BE    JVSPQX            YES.\nJ3       USING DQE,SECTIOWA+80\n         MVC   J3.DQENEXT,0(R3)  COPY ADDRESS OF FIRST DQE POINTER.\nJVDQELP  L     R15,J3.DQENEXT    POINT TO NEXT DQE.\n         CR    R15,R7            END OF DQE CHAIN?\n         BE    JVSPQALP          YES, LOOK AT NEXT DQE POINTER PAIR.\n         LA    R5,24             GET LENGTH OF DQE.\n         MVCP  J3.DQE(R5),0(R15),R14      COPY DQE.\n         L     R0,J3.DQEAREA     DETERMINE LAST USED ADDRESS.\n         A     R0,J3.DQESIZE\n         BCTR  R0,0\n         ST    R0,WORK\n         MVI   WORK+5,C' '       RESET FRAGMENTATION FLAG.\nJ4       USING FQE,SECTIOWA+104\n         MVC   J4.FQE(16),J3.DQE SET UP FIRST FQE POINTERS.\n         B     JVFQENXT\nJVSPQX   L     R7,J1.SPQESPQX    POINT TO THE SPQX.\n         LA    R5,16             GET LENGTH OF SPQX.\n         MVCP  J2.SPQA(R5),0(R7),R14      COPY SPQX.\n         MVI   SECTIOWA+71,X'FF' FLAG END OF DQE POINTERS.\n         B     JVSPQOK           PROCESS EXTENDED DQE ANCHORS.\nJVFQELP  LA    R5,20             GET LENGTH OF FQE.\n         MVCP  J4.FQE(R5),0(R6),R14       COPY FQE.\n         L     R0,J3.DQESIZE     GET USED AREA LENGTH.\n         S     R0,J4.FQESIZE     SUBTRACT FREE AREA LENGTH.\n         ST    R0,J3.DQESIZE     SAVE NEW USED AREA LENGTH.\n         CLC   J3.DQEAREA,J4.FQEAREA\n         BNE   JVFNOTF           THIS FREE AREA IS NOT AT THE START.\n         L     R0,J3.DQEAREA     GET USED AREA ADDRESS.\n         A     R0,J4.FQESIZE     ADD FREE AREA LENGTH.\n         ST    R0,J3.DQEAREA     SAVE NEW USED AREA ADDRESS.\n         B     JVFQENXT          LOOK FOR NEXT FQE.\nJVFNOTF  L     R0,J4.FQEAREA     DETERMINE LAST FREE ADDRESS.\n         A     R0,J4.FQESIZE\n         BCTR  R0,0\n         C     R0,WORK\n         BNE   JVFNOTL           THIS FREE AREA IS NOT AT THE END.\n         L     R0,WORK           GET USED AREA END ADDRESS.\n         S     R0,J4.FQESIZE     SUBTRACT FREE AREA LENGTH.\n         ST    R0,WORK           SAVE NEW USED END AREA ADDRESS.\n         B     JVFQENXT          LOOK FOR NEXT FQE.\nJVFNOTL  MVI   WORK+5,C'*'       SET FRAGMENTATION FLAG.\nJVFQENXT L     R6,J4.FQENEXT     POINT TO THE NEXT FQE POINTERS.\n         CR    R6,R15            END OF FQE CHAIN?\n         BNE   JVFQELP           NO, PROCESS NEXT FQE.\n         MVC   LL-50(4,R2),=C'ADDR'\n         UNPK  LL-45(9,R2),J3.DQEAREA(5)\n         TR    LL-45(8,R2),HEX-C'0'\n         MVI   LL-37(R2),C' '\n         MVC   LL-35(3,R2),=C'END'\n         UNPK  LL-31(9,R2),WORK(5)\n         TR    LL-31(8,R2),HEX-C'0'\n         MVI   LL-23(R2),C' '\n         MVC   LL-22(1,R2),WORK+5    LOAD FRAGMENTATION FLAG.\n         MVC   LL-21(4,R2),=C'SIZE'\n         UNPK  LL-16(9,R2),J3.DQESIZE(5)\n         TR    LL-16(8,R2),HEX-C'0'\n         MVI   LL-8(R2),C' '\nJDQESZLP CLI   LL-16(R2),C'0'    LEADING ZERO?\n         BNE   JDQESZOK          NO.\n         MVC   LL-16(8,R2),LL-15(R2)\n         B     JDQESZLP          SUPPRESS LEADING ZERO.\nJDQESZOK CLI   SECTIOWA+71,X'FF' PROCESSING SPQX?\n         BE    JDQESPQX          YES.\n         C     R7,J1.SPQESPQA    ON FIRST DQE CHAIN FOR SPQA?\n         BE    JDQER24           YES.\n         CLI   SECTIOWA+79,X'FF' DOES SPQX EXIST?\n         BE    JDQEROK           NO.\n         LA    R0,8\n         A     R0,J1.SPQESPQA\n         CR    R7,R0\n         BE    JDQER31           MUST BE IN FIRST 2 GIGABYTES.\n         B     JDQEROK           CAN BE BACKED ANYWHERE IN 64-BIT.\nJDQESPQX C     R7,J1.SPQESPQX    ON FIRST DQE CHAIN FOR SPQX?\n         BNE   JDQEROK           NO.\nJDQER31  MVC   LL-6(4,R2),=C'R<2G'\n         B     JDQEROK\nJDQER24  MVC   LL-6(5,R2),=C'R<16M'\nJDQEROK  TR    LL-79(79,R2),XLATETBL\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELD.\n         MVI   LL-46(R2),X'24'   MAKE AREA ADDRESS TAB SELECTABLE.\n         MVI   LL-37(R2),X'22'\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.\n         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.\n         MVI   LL-80(R2),X'F2'   RED.                           (I3279)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         B     JVDQELP           PROCESS NEXT DQE.\nJSTGEXIT L     R3,SECTIOWA+4     RESTORE THE RETURN ADDRESS.\n         BR    R3                RETURN TO CALLER.\n         DROP  J1,J2,J3,J4       SPQE, SPQA, DQE, FQE.\n         DROP  R8                JSTGDTLS.\n         TITLE 'JOB STATUS MONITOR - MORE CONSTANTS'\n         LTORG\n         SPACE\n         DS    0H\n         TITLE 'JOB STATUS MONITOR - CHECK RECORD FETCH AUTHORITY'\n         USING JSETFDAT,R5\nJSETFDAT OI    JOBFLAG2,FDAT     SET \"FETCH DATA\" FLAG.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'S'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BO    LOOK4DCB          YES, RETURN TO CALLER.\n         L     R1,PSAAOLD        POINT TO CURRENT ASCB.\n         ICM   R1,15,JBNS(R1)    GET JOBNAME POINTER.\n         BZ    JDNOFDAT          FORGET CHECK IF NO JOB NAME POINTER.\n         CLC   0(8,R1),SECUSER+1 RACF AND TSO USERIDS EQUAL?\n         BE    LOOK4DCB          YES, RETURN TO CALLER.\nJDNOFDAT NI    JOBFLAG2,255-FDAT RESET \"FETCH DATA\" FLAG.\n         B     LOOK4DCB          RETURN TO CALLER.\n         DROP  R5                JSETFDAT.\n         TITLE 'JOB STATUS MONITOR - FORMAT GENERAL A.S. DETAILS'\n*\n* ON INPUT:    R13             - GOTAREA BASE\n*              R12             - MAINLINE BASE\n*              R11,R10,R9      - JOBSTATS BASE\n*              R5              - JASDTLS BASE\n*              R3              - SUBJECT ASCB ADDRESS\n*              R2              - CURRENT DISPLAY LINE ADDRESS\n*\n         USING JASDTLS,R5\n         USING ASCB,R3\nJASDTLS  XC    SECUSER,SECUSER   CLEAR USERID OF TARGET ASID.\n         MVC   0(LL-79,R2),MEDX  MEDIUM INTENSITY.\n         MVI   8(R2),X'F7'       WHITE.                         (I3279)\n         MVC   LL-79(79,R2),BLANKS\n         MVC   LL-77(38,R2),=C'JOB STATUS MONITOR SELECTION CRITERIA:'\n         TM    JOBFLAGS,PRBS     SHOWING (PROGRAM) REQUEST BLOCKS?\n         BZ    JPRBSOK           NO\n         MVC   LL-36(14,R2),=C'REQUEST BLOCKS'\nJPRBSOK  TM    JOBFLAGS,CDES     SHOWING CONTENTS DIRECTORY ELEMENTS?\n         BZ    JCDESOK           NO\n         MVC   LL-20(18,R2),=C'CONTENTS DIRECTORY'\nJCDESOK  BAS   R1,JADDLINE       FIRST CRITERIA LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),MEDX  MEDIUM INTENSITY.\n         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         MVI   5(R2),X'C4'       UNDERLINE.                     (F9526)\n         MVI   8(R2),X'F7'       WHITE.                         (I3279)\n         MVC   LL-79(79,R2),BLANKS\n         TM    JOBFLAGS,LLES     SHOWING LOAD LIST ELEMENTS?\n         BZ    JLLESOK           NO\n         MVC   LL-77(9,R2),=C'LOAD LIST'\nJLLESOK  TM    JOBFLAGS,REGS     SHOWING GENERAL PURPOSE REGISTERS?\n         BZ    JREGSOK           NO\n         MVC   LL-66(7,R2),=C'GP-REGS'\nJREGSOK  TM    JOBFLAG2,PPRM     SHOWING PROGRAM PARAMETER?\n         BZ    JPPRMOK           NO\n         MVC   LL-57(13,R2),=C'PGM PARAMETER'\nJPPRMOK  TM    JOBFLAG2,NODD     SHOWING DATA DEFINITIONS?\n         BO    JFILEOK           NO\n         MVC   LL-42(10,R2),=C'DATA DEFNS'\n         TM    JOBFLAG2,ODCB     SHOWING OPEN DCB DATA?\n         BZ    JODCBOK           NO\n         MVC   LL-30(8,R2),=C'OPEN DCB'\nJODCBOK  TM    JOBFLAG2,XCP0     SHOWING FILES WITH NO I/O?\n         BZ    JFILEOK           NO\n         MVC   LL-20(10,R2),=C'0 EXCP DDS'\nJFILEOK  TM    JOBFLAGS,JVSM     VIRTUAL STORAGE SUBPOOLS?\n         BZ    JSTOROK           NO\n         MVC   LL-8(7,R2),=C'STORAGE'\n         MVC   LL-1(1,R2),JVSPFLAG\nJSTOROK  BAS   R1,JADDLINE       SECOND CRITERIA LINE NOW COMPLETE.\n         MVI   OPTNATR,X'FA'     ENABLE TAB SELECTABLE FIELDS.\n         C     R3,PSAAOLD        LOOKING AT SELF?\n         BE    JTABOKAY          YES, PROCEED.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'B'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         OC    OPTNATR,C'V'-C' '(R15)  GATE CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\nJTABOKAY MVC   0(LL-79,R2),HIGHX HIGH INSTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(79,R2),JOBHDR\n         BAS   R1,JADDLINE       FIRST DATA LINE NOW COMPLETE.\n         USING JOBDTLS,R2\n         MVC   JOBCOLOR,LOWX\n         MVI   JOBNAME,C' '\n         MVC   JOBNAME+1(78),JOBNAME\n         MVC   JOBNAME,STARTING\n         ICM   R4,15,ASCBJBNI    GET POINTER TO JOB NAME.\n         BNZ   HASNAME\n         ICM   R4,15,ASCBJBNS    GET POINTER TO JOB NAME.\n         BZ    NONAME\nHASNAME  MVC   JOBNAME,0(R4)     LOAD ADDRESS SPACE NAME.\nNONAME   UNPK  JOBASID(5),ASCBASID(3)\n         TR    JOBASID,HEX-C'0'  SHOW ASID IN HEX.\n         MVI   JOBASID+4,C' '\n         MVC   JBTARGAS,ASCBASID SAVE ASID FOR ZOOM PROCESSING.\n         MVC   JDSPARM2,JOBASID  SAVE ASID FOR DATASPACE LISTING.\n*                                DISPATCHING PRIORITY IN HEX.\n         UNPK  PRTY(5),ASCBDPH(3)\n         TR    PRTY,HEX-C'0'\n         MVI   PRTY+4,C' '\n         L     R4,ASCBRSME       GET RAX POINTER.\n         USING RAX,R4\n         L     R4,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.\n         DROP  R4\n         CVD   R4,WORK\n         MVC   FRAMESCT,ED5\n         ED    FRAMESCT,WORK+5\n         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.\n         CVD   R4,WORK\n         MVC   REALMEM(7),ED5    LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    REALMEM,WORK+5\n         L     R6,ASCBASSB       NO, LOAD POINTER TO ASSB.\n         USING ASSB,R6\n         SR    R4,R4             GET ZERO.\n         TM    ASCBFLG3,ASCBREUS REUSABLE ASID?\n         BNO   *+8               NO.\n         L     R4,ASSBISQN       YES, GET THE ASID INSTANCE NUMBER.\n         ST    R4,JBTARGI#       SAVE IT FOR ZOOM PROCESSING.\n         L     R4,ASSBVSC        GET NUMBER OF ASSIGNED VIO SLOTS.\n         A     R4,ASSBNVSC       ADD NON-VIO SLOT COUNT.\n         DROP  R6                ASSB.\n         CVD   R4,WORK\n         MVC   SLOTS,ED5\n         ED    SLOTS,WORK+5\n         LM    R6,R7,ASCBEJST    GET TCB TIME.\n         LA    R4,TCBTIME\n         BAS   R14,CPUTIMEX\n         LM    R6,R7,ASCBSRBT    GET SRB TIME.\n         LA    R4,SRBTIME\n         BAS   R14,CPUTIMEX\n         SLR   R6,R6\n         L     R7,ASCBDCTI       LOAD CHANNEL CONNECT TIME.\n         SLDL  R6,7              CONVERT TO MICROSECONDS.\n         LA    R4,100(,R2)       POINT TO A FORMAT WORK AREA.\n         MVC   0(13,R4),BLANKS   CLEAR IT.\n         BAS   R14,IOCTIMEX\n         MVC   IOCTIME,4(R4)     LOAD MM:SS.SS INTO DISPLAY LINE.\n         CLI   4(R4),C':'        ANY HOURS?\n         BNE   DONEJDTL          NO, TIME DONE.\n         MVC   IOCTIME,1(R4)     LOAD HH:MM:SS INTO DISPLAY LINE.\n         DROP  R2                JOBDTLS.\nDONEJDTL BAS   R1,JADDLINE       SECOND DATA LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(79,R2),ASCBHDR\n         BAS   R1,JADDLINE       THIRD DATA LINE NOW COMPLETE.\n         USING ASCDTLS,R2\n         MVC   ASCCOLOR,LOWX\n         MVI   ASCSYNC,C' '\n         MVC   ASCSYNC+1(78),ASCSYNC\n         L     R1,ASCBSYNC_PREZOS12    SHOW SVRB POOL SYNC COUNT.\n         TM    OSLEVEL+5,CVTH7770  Z/OS R12 OR LATER?\n         BNO   JGOTSYNC          NO.\n         L     R1,ASCBASSB       YES, POINT TO THE ASSB.\n         USING ASSB,R1\n         L     R1,ASSBSYNC\n         DROP  R1                ASSB.\nJGOTSYNC CVD   R1,WORK\n         MVC   ASCSYNC+1(9),ED11+3\n         ED    ASCSYNC,WORK+3\n         L     R0,32(,R3)        SHOW ACTIVE CPU COUNT FOR THIS A.S.\n         TM    OSLEVEL+1,CVTH5510 SP5 OR HIGHER?\n         BNO   JNCPUSOK          NO.\n         L     R1,ASCBOUCB       YES, POINT TO OUCB.\n         SLR   R0,R0\n         IC    R0,648(,R1)\nJNCPUSOK CVD   R0,WORK\n         MVC   ASCCPUS,ED5\n         ED    ASCCPUS,WORK+5\n         UNPK  ASCAFFN(5),ASCBAFFN(3)\n         TR    ASCAFFN,HEX-C'0'\n         MVI   ASCAFFN+4,C' '    SHOW ADDRESS SPACE CPU AFFINITY.\n         UNPK  ASCNDSP(5),ASCBDSP1(3)\n         TR    ASCNDSP,HEX-C'0'\n         MVI   ASCNDSP+4,C' '    SHOW NON-DISPATCHABILITY FLAGS.\n         L     R1,ASCBSCNT       SHOW SUSPENDED SRB COUNT.\n         CVD   R1,WORK\n         MVC   ASCSRBS,ED5\n         ED    ASCSRBS,WORK+5\n         LH    R1,ASCBSSRB       SHOW STATUS STOP SRB COUNT.\n         CVD   R1,WORK\n         MVC   ASCSSRB,ED5\n         ED    ASCSSRB,WORK+5\n         UNPK  ASCLOCK(9),ASCBLOCK(5)\n         TR    ASCLOCK,HEX-C'0'\n         MVI   ASCLOCK+8,C' '    SHOW ADDRESS SPACE LOCAL LOCK STATUS.\n         UNPK  ASCLOCI(9),ASCBLOCI(5)\n         TR    ASCLOCI,HEX-C'0'\n         MVI   ASCLOCI+8,C' '    SHOW HOLDER OF LOCAL LOCK.\n         L     R1,ASCBCMLC_PREZOS12  SHOW CROSS MEMORY LOCK HOLD COUNT.\n         TM    OSLEVEL+5,CVTH7770  Z/OS R12 OR LATER?\n         BNO   JGOTCMLC          NO.\n         L     R1,ASCBASSB       YES, POINT TO THE ASSB.\n         USING ASSB,R1\n         L     R1,ASSBCMLC\n         DROP  R1                ASSB.\nJGOTCMLC CVD   R1,WORK\n         MVC   ASCCMLC,ED5\n         ED    ASCCMLC,WORK+5\n         SLR   R1,R1\n         IC    R1,ASCBSMCT       SHOW CURRENT STEP-MUST-COMPLETE COUNT.\n         CVD   R1,WORK\n         MVC   ASCSMCT,ED3\n         ED    ASCSMCT,WORK+6\n         UNPK  ASCIODP(3),ASCBIODP(2)\n         TR    ASCIODP,HEX-C'0'\n         MVI   ASCIODP+2,C' '    SHOW I/O DISPATCHING PRIORITY.\n         DROP  R2                ASCDTLS.\n         BAS   R1,JADDLINE       FOURTH DATA LINE NOW COMPLETE.\n         TM    OSLEVEL+5,CVTH7760  Z/OS RELEASE 11 OR LATER?\n         BNO   JDONASSB          NO, SKIP NEW ASSB LINE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(79,R2),ASSBHDR\n         BAS   R1,JADDLINE       FIELD HEADING LINE NOW COMPLETE.\n         L     R8,ASCBASSB       POINT TO RSM ASCB EXTENSION.\n         USING ASSB,R8\n         USING ASSDTLS,R2\n         MVC   ASSCOLOR,LOWX\n         MVI   ASSREUS,C' '\n         MVC   ASSREUS+1(78),ASSREUS\n         MVC   ASSREUS(2),=C'NO'\n         TM    ASCBFLG3,ASCBREUS\n         BZ    JREUSEOK          NOT A REUSABLE ASID.\n         MVC   ASSREUS,=C'YES'   IS A REUSABLE ASID.\nJREUSEOK L     R1,ASSBISQN       SHOW ADDRESS SPACE INSTANCE NUMBER.\n         CVD   R1,WORK\n         MVC   ASSNSTNC,ED11\n         ED    ASSNSTNC,WORK+2\n         LM    R0,R1,ASSBHREQ    LOAD LOCAL LOCK OWNER DETAILS.\n         STM   R0,R1,WORK        PUT INTO STORAGE.\n         UNPK  ASSLASID(5),WORK+4(3)\n         UNPK  ASSLADDR(9),WORK(5)\n         TR    ASSLASID(13),HEX-C'0'\n         MVI   ASSLASID+4,C' '\n         MVI   ASSLADDR+8,C' '\n         DROP  R8                ASSB.\n         L     R8,ASCBRSME       POINT TO RSM ASCB EXTENSION.\n         USING RAX,R8\n         MVC   ASRPGMNM,RAXPPTNAME\n         SR    R15,R15\n         IC    R15,RAXLVMEMLIMS  LOAD MEMLIMIT SOURCE ID.\n         NILL  R15,15            ENSURE IN KNOWN RANGE.\n         SLA   R15,2             MULTIPLY BY 4 FOR INDEX.\n         L     R15,MEML_SRC(R15) LOAD MEMLIMIT SOURCE LABEL.\n         STCM  R15,15,ASRMLSRC   SHOW MEMLIMIT SOURCE LABEL.\n         MVC   ASRMEMLM+6(8),=C'NO LIMIT'\n         CLC   RAXLVMEMLIM,=X'00000FFFFFFFF000'\n         BE    JMEMLMOK          NO MEMORY LIMIT.\n         LM    R14,R15,RAXLVMEMLIM\n         LA    R1,=C'MGTPEZY?'\nJMEMLMLP LTR   R14,R14           NUMBER FITS IN A FULLWORD?\n         BNZ   JMEMLMBG          NO, TOO BIG SO SCALE IT.\n         LTR   R15,R15           IS IT ZERO?\n         BZ    JMEMLIM#          YES, SHOW THE NUMBER.\n         TMLL  R15,1023          ROUND ENOUGH TO SCALE AGAIN?\n         BZ    JMEMLMBG          YES, SO DO THAT.\n         LTR   R15,R15           IS SIGN BIT ON?\n         BNM   JMEMLIM#          NO, SHOW THE NUMBER.\n         BCTR  R14,0             YES, REMEMBER THIS.\n         LA    R15,0(,R15)       ZERO THE SIGN BIT.\nJMEMLIM# CVD   R15,WORK          GET NUMBER IN DECIMAL\n         LTR   R14,R14           WAS THE SIGN BIT ON?\n         BZ    JMEMLMED          NO, NUMBER IS READY.\n         AP    WORK,=P'2147483648'\nJMEMLMED MVC   ASRMEMLM,ED11\n         ED    ASRMEMLM,WORK+2\n         MVC   ASRMSCL1,0(R1)\n         MVI   ASRMSCL2,C'B'\n         B     JMEMLMOK          MEMORY LIMIT NOW FORMATTED.\nJMEMLMBG SRDL  R14,10            DIVIDE NUMBER BY 1024.\n         LA    R1,1(,R1)         POINT TO NEXT SCALE INDICATOR.\n         B     JMEMLMLP          GO TEST NUMBER AGAIN.\nJMEMLMOK EQU   *\n         DROP  R2                ASSDTLS.\n         BAS   R1,JADDLINE       DATA LINE NOW COMPLETE.\nJDONASSB EQU   *\n         L     R1,RCEADDR        POINT TO RSM CNTRL & ENUMERATION AREA.\n         USING RCE,R1\n         L     R8,ASCBRSME       POINT TO RSM ASCB EXTENSION.\n         ICM   R1,15,RCEESPL     ANY USEABLE EXPANDED FRAMES?\n         BNZ   JSHOWRAX          YES, SHOW DETAILS FROM RAX.\n         DROP  R1                RCE.\n         ICM   R1,15,RAXQUOT     ANY STORAGE ISOLATION SET?\n         BNZ   JSHOWRAX          YES, SHOW DETAILS FROM RAX.\n         LM    R0,R1,RAXUKDSS    LOAD USER KEY DATA SPACE DETAILS.\n         AR    R1,R0             ANY NON-ZERO DATA?\n         BZ    JDONERAX          NO, SO SKIP RAX DETAILS ALTOGETHER.\nJSHOWRAX MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(79,R2),RAXHDR\n         BAS   R1,JADDLINE       FIFTH DATA LINE NOW COMPLETE.\n         USING RAXDTLS,R2\n         MVC   RAXCOLOR,LOWX\n         MVI   ESTORMEM,C' '\n         MVC   ESTORMEM+1(78),ESTORMEM\n         L     R4,RAXESCT        LOAD EXPANDED FRAME COUNT.\n         CVD   R4,WORK\n         MVC   ESTORECT,ED5\n         ED    ESTORECT,WORK+5\n         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.\n         CVD   R4,WORK\n         MVC   ESTORMEM(7),ED5   LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    ESTORMEM,WORK+5\n         L     R4,RAXQUOT        LOAD STORAGE ISOLATION PAGE QUOTA.\n         CVD   R4,WORK\n         MVC   ISOQOTCT,ED5\n         ED    ISOQOTCT,WORK+5\n         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.\n         CVD   R4,WORK\n         MVC   ISOQOMEM,ED7      LOAD EDIT MASK.\n         ED    ISOQOMEM,WORK+4\n         MVI   ISOQOSCL,C'K'     INDICATE KILOBYTES.\n         MVC   ESTORSWP+1(2),=C'NO'\n         TM    RAXFLGS1,RAXESSW  SRM ALLOWING SWAP TO EXPANDED STORAGE?\n         BZ    GOTESSWP          NO, GOOD GUESS.\n         MVC   ESTORSWP,=C'ALLOW'\nGOTESSWP L     R4,RAXUKDSS       LOAD USER KEY DATA SPACE PAGE COUNT.\n         CVD   R4,WORK\n         MVC   DATSPCCT,ED5\n         ED    DATSPCCT,WORK+5\n         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.\n         CVD   R4,WORK\n         MVC   DATSPMEM(7),ED5   LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    DATSPMEM,WORK+5\n         L     R4,RAXDSHWM       LOAD USER DATA SPACE HIGH WATER MARK.\n         CVD   R4,WORK\n         MVC   EDSHWMEM,ED5      LOAD EDIT MASK.\n         ED    EDSHWMEM,WORK+5\n         MVI   EDSHWMEM+6,C'M'   DENOTE MEGABYTES.\n         SRL   R4,8              DIVIDE BY 256 TO GET 4K PAGE COUNT.\n         CVD   R4,WORK\n         MVC   EDSHWMCT,ED5\n         ED    EDSHWMCT,WORK+5\n         L     R4,RAXHSPCT       LOAD HIPERSPACE PAGE COUNT.\n         CVD   R4,WORK\n         MVC   EHIPERCT,ED5\n         ED    EHIPERCT,WORK+5\n         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.\n         CVD   R4,WORK\n         MVC   EHIPRMEM(7),ED5   LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    EHIPRMEM,WORK+5\n         DROP  R2                RAXDTLS.\n         BAS   R1,JADDLINE       SIXTH DATA LINE NOW COMPLETE.\nJDONERAX MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(79,R2),SRVHDR\n         BAS   R1,JADDLINE       SEVENTH DATA LINE NOW COMPLETE.\n         USING SRVDTLS,R2\n         MVC   SRVCOLOR,LOWX\n         MVI   VIOXPMEM,C' '\n         MVC   VIOXPMEM+1(78),VIOXPMEM\n         L     R4,RAXVIOCT       LOAD EXPANDED VIO PAGE COUNT.\n         CVD   R4,WORK\n         MVC   VIOXPCNT,ED5\n         ED    VIOXPCNT,WORK+5\n         SRL   R4,10-2           DIVIDE BY 8 TO GET MEGABYTES.\n         CVD   R4,WORK\n         MVC   VIOXPMEM,ED5      LOAD EDIT MASK.\n         ED    VIOXPMEM,WORK+5\n         MVI   VIOXPSCL,C'M'     INDICATE MEGABYTES.\n         DROP  R8                RAX.\n         L     R8,ASCBOUCB       POINT TO OUCB.\n         USING OUCB,R8\n         MVC   SRVSBSYS,OUCBSUBN LOAD SRM SUBSYSTEM NAME.\n         L     R4,OUCBCPU        LOAD CPU SERVICE.\n         CVD   R4,WORK           DISPLAY IT.\n         MVC   SRVCPU,ED11\n         ED    SRVCPU,WORK+2\n         L     R4,OUCBIOC        LOAD IOC SERVICE.\n         CVD   R4,WORK           DISPLAY IT.\n         MVC   SRVIOC,ED11\n         ED    SRVIOC,WORK+2\n         L     R4,OUCBMSO        LOAD MSO SERVICE.\n         CVD   R4,WORK           DISPLAY IT.\n         MVC   SRVMSO,ED11\n         ED    SRVMSO,WORK+2\n         L     R4,OUCBSRB        LOAD SRB SERVICE.\n         CVD   R4,WORK           DISPLAY IT.\n         MVC   SRVSRB,ED11\n         ED    SRVSRB,WORK+2\n         L     R4,OUCBWMS        LOAD TOTAL SERVICE.\n         CVD   R4,WORK           DISPLAY IT.\n         MVC   SRVTOTAL,ED11\n         ED    SRVTOTAL,WORK+2\n         TR    LL-79(79,R2),XLATETBL  ENSURE DISPLAYABILITY.\n         DROP  R2                SRVDTLS.\n         BAS   R1,JADDLINE       EIGHTH DATA LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(79,R2),OUCBHDR\n         L     R1,RMCTADDR       POINT TO THE RMCT.\n         TM    220(R1),X'7F'     IN WLM GOAL MODE?\n         BM    JWMPOLOK          NO, NO POLICY TO EXTRACT.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    JWMPOLOK          NO, CANNOT EXTRACT POLICY.\nJGETPOLA L     R0,JPQRYLEN       YES, GET AREA SIZE.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(31,64)\n         ST    R1,JPQRYPTR       SAVE AREA ADDRESS.\n         MVC   LL-79+35(8,R2),=C'SRVCLASS'\n         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.\n         L     R4,JPQRYPTR       POINT TO QUERY AREA.\n         IWMPQRY ANSAREA=(R4),ANSLEN=JPQRYLEN,QUERYLEN=JPQRETLN,       +\n               MF=(E,JPQRYLST)   GET CURRENT WORKLOAD POLICY.\n         LR    R4,R0             SAVE REASON CODE.\n         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM STATE.\n         CLM   R4,3,=X'040A'     WAS AREA LARGE ENOUGH?\n         BNE   JWMPOLOK          YES.\n         LM    R0,R1,JPQRYLEN    NO, GET LENGTH AND ADDRESS OF AREA.\n         FREEMAIN RU,A=(1),LV=(0),SP=SUBPOOL\n         ST    R15,JPQRYPTR      RESET AREA POINTER.\n         L     R1,JPQRETLN       GET REQUIRED AREA SIZE.\n         LA    R1,4095(,R1)\n         SRL   R1,12\n         SLL   R1,12             ROUND UP TO NEXT PAGE BOUNDARY.\n         ST    R1,JPQRYLEN       SAVE THE NEW SIZE.\n         B     JGETPOLA          RETRY.\nJWMPOLOK BAS   R1,JADDLINE       NINTH DATA LINE NOW COMPLETE.\n         USING OUCBDTLS,R2\n         MVC   OUCCOLOR,LOWX\n         MVI   OUCBLINE,C' '\n         MVC   OUCBLINE+1(78),OUCBLINE\n         L     R4,ASCBTCBS       GET NUMBER OF READY TASKS.\n         CVD   R4,WORK           SHOW UP TO 99999 CORRECTLY.\n         MVC   RDYTASKS,ED5\n         ED    RDYTASKS,WORK+5\n         MVC   CPULIMIT,=C'NO LIMIT'\n**       ICM   R7,15,ASCBJSTL    LOAD JOB STEP TASK CPU TIME LIMIT.\n**       BZ    NOTCBLIM          NO TCB TIME LIMIT.\n**       C     R7,TIME1440       TIME=1440?\n**       BE    NOTCBLIM          YES, NO TCB TIME LIMIT.\n         TM    ASCBRCTF,ASCBTOFF EXEMPT FROM JOB STEP TIMING CHECKS?\n         BO    NOTCBLIM          YES, NO TCB TIME LIMIT.\n         L     R7,ASCBJSTL       LOAD JOB STEP TASK CPU TIME LIMIT.\n         C     R7,TIMEMAX        HIGH POSITIVE INTEGER?\n         BE    NOTCBLIM          YES, NO TCB TIME LIMIT.\n         MVC   CPULIMIT,=C'**NONE**'\n         S     R7,ASCBEJST       LESS USED TCB TIME HIGH-ORDER WORD.\n         BNP   NOTCBLIM          BRANCH IF NO TIME LEFT.\n         MVC   CPULIMIT,BLANKS\n         LA    R4,CPULIMIT-2     POINT TO CPU TIME LIMIT OUTPUT AREA.\n         SLR   R6,R6             CLEAR FOR SHIFT.\n         SLDL  R6,20             CONVERT TO MICROSECONDS.\n         BAS   R14,IOCTIMEX      CONVERT TO HH:MM:SS.\n         MVC   CPULIMIT+8(3),BLANKS  ERASE CENTISECONDS.\nNOTCBLIM L     R4,276(,R8)       LOAD OUCBWSS.\n         SLL   R4,2              TIMES FOUR FOR K.\n         MVC   WRKGSTSZ(7),ED5   MOVE IN THE EDIT MASK AND KB FLAG.\n         CVD   R4,WORK           CONVERT TO DECIMAL.\n         ED    WRKGSTSZ,WORK+5   EDIT THE RESULT.\n         UNPK  NEWDISPR(3),OUCBNDP(2)\n         TR    NEWDISPR,HEX-C'0'\n         MVI   NEWDISPR+2,C' '   NEW DISPATCHING PRIORITY.\n         MVC   TRANNAME,OUCBTRXN LOAD TRANSACTION NAME.\n         MVC   TRANCLAS,OUCBCLS  LOAD TRANSACTION CLASS NAME.\n         SLR   R4,R4\n         IC    R4,OUCBPGP        LOAD WMPGP OFFSET.\n         L     R6,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R6\n         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?\n         BNM   JHAVEPER          YES, HAVE PERIOD NUMBER.\n         DROP  R6                RMCT.\n         SRL   R4,4              GET RELATIVE PERFORMANCE PERIOD.\n         LA    R4,1(,R4)         CONVERT TO PERFORMANCE PERIOD NUMBER.\nJHAVEPER STC   R4,PERFPERD       STORE IT.\n         TR    PERFPERD,HEX      MAKE DISPLAYABLE.\n         LH    R4,OUCBNPG        LOAD THE PERFORMANCE GROUP NUMBER.\n         CVD   R4,WORK\n         MVC   PERFGRPN,ED3\n         ED    PERFGRPN,WORK+6\n         SLR   R4,R4\n         IC    R4,OUCBDMN        LOAD THE DOMAIN NUMBER.\n         CVD   R4,WORK\n         MVC   DMNUMBER,ED3\n         ED    DMNUMBER,WORK+6\n         ICM   R1,15,JPQRYPTR    POLICY AREA FILLED?\n         BZ    JSWAPRSN          NO.\n         SLR   R7,R7             YES.\n         MVC   SRVCCLAS,BLANKS   ERASE PGN AND DOMAIN NUMBER.\n         ICM   R7,3,OUCBWSCI     GET SERVICE CLASS INDEX FOR JOB.\n         USING SVPOLHD,R1\n         BNP   JPOLQRYF          ZERO IS INVALID.\n         CH    R7,SVPOLDCC       IS SERVICE CLASS INDEX TOO HIGH?\n         BH    JPOLQRYF          YES, CAN'T SHOW SERVICE CLASS.\n         BCTR  R7,0              CONVERT TO RELATIVE ENTRY NUMBER.\n         MH    R7,SVPOLDCL       GET OFFSET INTO CLASS ENTRIES.\n         A     R7,SVPOLDCO       ADD OFFSET OF FIRST CLASS ENTRY.\n         ALR   R7,R1             POINT TO SERVICE CLASS ENTRY.\n         USING SVPOLCD,R7\n         MVC   SRVCCLAS,SVPOLCNM LOAD THE SERVICE CLASS NAME.\n         DROP  R1,R7             SVPOLHD, SVPOLCD.\nJPOLQRYF L     R0,JPQRYLEN       GET LENGTH OF POLICY QUERY AREA.\n         FREEMAIN RU,A=(1),LV=(0),SP=SUBPOOL\n         ST    R15,JPQRYPTR      RESET AREA POINTER.\nJSWAPRSN IC    R4,OUCBSRC        LOAD SWAP REASON CODE.\n         SLA   R4,R4             USE SWAP REASON CODE AS INDEX.\n         LA    R4,SWAPRSNS(R4)   POINT TO SWAP REASON TEXT.\n         MVC   SWAPCODE,0(R4)\n         BNZ   SWAPRSOK          SHOWN WHY SWAPPED OUT.\n         TM    OUCBSFL,OUCBNSW   TEST FOR NON-SWAP.\n         BZ    SWAPRSOK          SWAPPABLE AND SHOWN THAT SWAPPED IN.\n         MVC   SWAPCODE+11(5),=C'(N/S)' SUPPLY NON-SWAP INDICATION.\n         TM    ASCBRSMF,ASCBVEQR VIRTUAL EQUALS REAL USER?\n         BZ    SWAPRSOK          NO, NON-SWAPPABLE V=V.\n         MVC   SWAPCODE+12(3),=C'V=R'   YES, MOVE IN REAL INDICATION.\nSWAPRSOK DS    0H                OUCB DETAILS LINE NOW COMPLETE.\n         TR    LL-79(79,R2),XLATETBL  ENSURE DISPLAYABILITY.\n         DROP  R2,R8             OUCDTLS, OUCB.\n         BAS   R1,JADDLINE       TENTH DATA LINE NOW COMPLETE.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    JDSPACOK          NO, CANNOT EXTRACT DATASPACES.\n         LA    R1,DSLSTPRM       POINT TO DS LIST ROUTINE PARAMETER.\n         L     R15,=V(IMDSPACE)  GET DATASPACE LIST ROUTINE EP.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESSFUL CALL?\n         BNZ   JDSPACOK          NO.\n         L     R6,JDSPARM4       YES, POINT TO RETURNED AREA.\n         USING INFTDD1,R6\n         ICM   R4,15,TDD1DSP#    GET THE DATASPACE COUNT FOR THIS ASID.\n         BNP   JDSPACDN          NONE - THAT'S FUNNY.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(79,R2),DSPCHDR\n         BAS   R1,JADDLINE       LINE NOW COMPLETE.\n         LA    R7,TDD1DSPA       POINT TO THE FIRST DATASPACE RECORD.\n         USING TDD1DSP,R7\n         USING DSPCDTLS,R2\nJDSPACLP MVC   DSPCOLOR,LOWX\n         MVI   DSPCNAME,C' '\n         MVC   DSPCNAME+1(78),DSPCNAME\n         MVC   DSPCNAME,TDD1DSPN SHOW DATASPACE NAME.\n         UNPK  DSPCSTKN(9),TDD1STOK(5)\n         UNPK  DSPCSTKN+8(9),TDD1STOK+4(5)\n         TR    DSPCSTKN,HEX-C'0'\n         MVI   DSPCSTKN+16,C' '\n         MVC   DSPCSCOP+1(3),=C'ALL'\n         TM    TDD1ATTR,TDD1SALL SCOPE=ALL?\n         BO    JDSCOPED          YES.\n         MVC   DSPCSCOP,=C'SINGLE'\n         TM    TDD1ATTR,TDD1SSGL SCOPE=SINGLE?\n         BO    JDSCOPED          YES.\n         MVC   DSPCSCOP,=C'COMMON'\n         TM    TDD1ATTR,TDD1SCMN SCOPE=COMMON?\n         BO    JDSCOPED          YES.\n         MVC   DSPCSCOP,BLANKS\nJDSCOPED IC    R0,TDD1KEYS\n         SRL   R0,4              SHOW STORAGE PROTECTION KEY.\n         STC   R0,DSPCKEY\n         NI    DSPCKEY,X'0F'\n         TR    DSPCKEY,HEX\n         TM    TDD1KEYS,X'08'    FETCH PROTECTED?\n         BNO   *+10              NO.\n         MVC   DSPCPROT,=C'YES'  YES.\n         UNPK  DSPCOTCB(7),TDD1OTCB+1(4)\n         TR    DSPCOTCB,HEX-C'0'\n         MVI   DSPCOTCB+6,C' '\n         UNPK  DSPCRANG(9),TDD1RANG(5)\n         TR    DSPCRANG,HEX-C'0'\n         MVI   DSPCRANG+8,C' '\n         ICM   R0,15,TDD1ORIG    GET ORIGIN.\n         BZ    *+8\n         MVI   DSPCORIG+4,C'K'   INDICATE KILOBYTES IF NON-ZERO.\n         SRL   R0,10             CONVERT TO KILOBYTES.\n         CVD   R0,WORK\n         MVC   DSPCORIG,ED3\n         ED    DSPCORIG,WORK+6\n         L     R0,TDD1BLKS       SHOW MAXIMUM 4K PAGE COUNT.\n         CVD   R0,WORK\n         MVC   DSPCMXPG,ED7\n         ED    DSPCMXPG,WORK+4\n         TR    LL-79(79,R2),XLATETBL\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELD.\n         MVI   DSPCSTKN-1,X'24'  MAKE DATA SPACE TAB SELECTABLE.\n         MVI   DSPCSTKN+16,X'25'\n         BAS   R1,JADDDDLN       LINE NOW COMPLETE.\n         A     R7,TDD1DSPL       POINT TO THE NEXT DATASPACE RECORD.\n         BCT   R4,JDSPACLP       PROCESS THE NEXT DATASPACE RECORD.\nJDSPACDN L     R0,TDD1SIZE       GET SIZE OF RETURNED AREA.\n         DROP  R2,R6,R7          DSPCDTLS, INFTDD1, TDD1DSP.\n         FREEMAIN RU,LV=(0),A=(6),SP=130\n         ST    R15,JDSPARM4      RESET AREA POINTER.\nJDSPACOK NI    JOBFLAGS,255-FOILED  RESET CROSS MEMORY FOILED FLAG.\n         L     R1,ASCBRSME       GET RAX POINTER.\n         USING RAX,R1\n         L     R1,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.\n         DROP  R1                RAX.\n         LTR   R1,R1             ZERO FRAMES FOR THIS ADDRESS SPACE?\n         BZ    ASNOTIN           YES, IT MUST BE SWAPPED OUT.\n         TM    ASCBRCTF,ASCBOUT  IS THIS ADDRESS SPACE SWAPPED OUT?\n         BZ    ASIDIN            NO, TRY FOR SSAR.\nASNOTIN  TM    JOBFLAGS,WAIT     WAITING FOR SWAP-IN?\n         BZ    ASIDOUT           NO.\n         MVI   SPYDELAY+3,2      WAIT 1/50TH SEC IF PHYSICALLY OUT.\n         LTR   R1,R1             ZERO FRAMES FOR THIS ADDRESS SPACE?\n         BZ    SPYWAIT           YES, GO WAIT A LITTLE WHILE.\n         MVI   SPYDELAY+3,1      WAIT 1/100TH SEC IF PHYSICALLY IN.\n         B     SPYWAIT           GO WAIT A LITTLE WHILE.\nASIDOUT  XC    SAVETCB(72),SAVETCB  ERASE TCB PLACE MARKERS.\n         MVC   0(LL-79,R2),HIGHX INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVI   LL-79(R2),C' '\n         MVC   LL-78(78,R2),LL-79(R2)\n         L     R1,ASCBIOSC       GET EXCP COUNT.\n         CVD   R1,WORK           SHOW UP TO 99999999999 CORRECTLY.\n         MVC   43+LL-79(12,R2),ED11\n         ED    43+LL-79(12,R2),WORK+2\n         MVC   56+LL-79(5,R2),=C'EXCPS'\n         L     R7,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R7\n         L     R7,RMCTTOD        GET CURRENT 1024MS SINCE IPL.\n         DROP  R7                RMCT.\n         L     R6,ASCBOUCB       POINT TO TARGET OUCB.\n         USING OUCB,R6\n         ICM   R1,15,OUCBTMS     GET TIME OF LAST SWAP-OUT.\n         BNZ   GTJSWPTM          NON-ZERO SO CONTINUE.\n         L     R1,OUCBTMO        USE TRANSACTION START TIME.\n         DROP  R6                OUCB.\nGTJSWPTM SR    R7,R1             SUBTRACT TIME OF LAST SWAP-OUT.\n         BNP   NOJSWPTM          PREPOSTEROUS, I CAN'T BELIEVE IT.\n         SLR   R6,R6             CLEAR FOR SHIFT.\n         SLDL  R6,10             CONVERT TO MICROSECONDS.\n         LA    R4,LL-79(,R2)     POINT TO CPU TIME LIMIT OUTPUT AREA.\n         BAS   R14,IOCTIMEX      CONVERT TO HH:MM:SS.\n         MVC   14+LL-79(28,R2),=CL28'ELAPSED TIME SINCE LAST SWAP'\nNOJSWPTM BAS   R1,JADDLINE       ELEVENTH DATA LINE NOW COMPLETE.\n         B     DONESSAR          CAN'T SSAR TO SWAPPED OUT ASID.\nASIDIN   ICM   R8,15,ASCBOUXB    ANY OUXB?\n         BZ    NOSOUXB           NO, SECONDARY ASID HAS NO OUXB.\n         USING OUXB,R8\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(79,R2),OUXBHDR\n         BAS   R1,JADDLINE       ELEVENTH DATA LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),LOWX\n         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         MVI   5(R2),X'C4'       UNDERLINE.                     (F9526)\n         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         L     R4,OUXBPIN        REPORT PAGE-IN COUNT.\n         A     R4,OUXBCAPI       INCLUDE NON-PRIVATE PAGE-IN COUNT.\n         CVD   R4,WORK\n         MVC   LL-78(9,R2),ED11+3\n         ED    LL-79(10,R2),WORK+3\n         L     R4,OUXBPOUT       REPORT PAGE-OUT COUNT.\n         CVD   R4,WORK\n         MVC   LL-68(9,R2),ED11+3\n         ED    LL-69(10,R2),WORK+3\n         L     R4,OUXBVAMI       REPORT VIO PAGE-IN COUNT.\n         CVD   R4,WORK\n         MVC   LL-58(7,R2),ED11+5\n         ED    LL-59(8,R2),WORK+4\n         L     R4,OUXBVAMO       REPORT VIO PAGE-OUT COUNT.\n         CVD   R4,WORK\n         MVC   LL-50(7,R2),ED11+5\n         ED    LL-51(8,R2),WORK+4\n         L     R4,OUXBSPIN       REPORT SWAP PAGE-IN COUNT.\n         CVD   R4,WORK\n         MVC   LL-42(9,R2),ED11+3\n         ED    LL-43(10,R2),WORK+3\n         L     R4,OUXBSPOT       REPORT SWAP PAGE-OUT COUNT.\n         CVD   R4,WORK\n         MVC   LL-32(9,R2),ED11+3\n         ED    LL-33(10,R2),WORK+3\n         L     R4,OUXBSWCT       REPORT SWAP COUNT.\n         CVD   R4,WORK\n         MVC   LL-23(6,R2),ED5\n         ED    LL-23(6,R2),WORK+5\n         L     R4,OUXBCRMS       GET PAGE RECLAIM COUNT.\n         A     R4,OUXBVAMR       ADD VIO RECLAIM COUNT.\n         A     R4,OUXBHSPI       ADD COMMON RECLAIM COUNT.\n         CVD   R4,WORK           REPORT TOTAL RECLAIM COUNT.\n         MVC   LL-16(7,R2),ED11+5\n         ED    LL-17(8,R2),WORK+4\n         L     R4,OUXBTRC        REPORT SESSION TRANSACTION COUNT.\n         CVD   R4,WORK\n         MVC   LL-8(7,R2),ED11+5\n         ED    LL-9(8,R2),WORK+4\n         BAS   R1,JADDLINE       TWELVETH DATA LINE NOW COMPLETE.\n         SLR   R14,R14           KEY ZERO WILL GET MOST DATA.\nNOSOUXB  TM    MODESW2,AUTH      APF AUTHORIZED?\n         BO    GOSPYING          YES, INITIATE CROSS-MEMORY MODE.\n         LA    R14,X'80'         NO, USE KEY 8 ON SELF.\n         C     R3,PSAAOLD        LOOKING AT THE PRIMARY ADDRESS SPACE?\n         BE    SSAROKAY          YES, DON'T HAVE TO DO SSAR.\n         B     ASIDOUT           CAN'T DO AXSET SO END OF STORY.\n         SPACE\n         DROP  R5,R3             JASDTLS, ASCB.\n         TITLE 'JOB STATUS MONITOR - MORE VARIABLES AND CONSTANTS'\nDSLSTPRM DC    A(JDSPARM1)       PLIST FOR IMDSLIST ROUTINE.\nTIMEMAX  DC    X'7FFFFFFF'       HIGHEST POSSIBLE TIME LIMIT.\nJDSPARM1 DC    CL4'LD  '         FUNCTION REQUEST TYPE - 'LD' OR 'DS'.\nJDSPARM2 DC    XL4'00'           ASID OR STORAGE START ADDRESS.\nJDSPARM3 DC    XL8'00'           DATASPACE STOKEN.\nJDSPARM4 DC    A(0)              RETURNED DATA AREA.\nJPQRYLEN DC    F'4096' \\_______  POLICY QUERY AREA LENGTH.\nJPQRYPTR DC    A(0)    /         POLICY QUERY AREA POINTER.\nJPQRETLN DC    F'0'              RETURNED AREA SIZE REQUIREMENT.\n         IWMPQRY MF=(L,JPQRYLST) POLICY QUERY PARAMETER LIST.\nJOBHDR   DC    CL79'JOBNAME  ASID  PRTY  TCB-CPU-TIME  SRB-CPU-TIME  IN+\n               CORE-FRAMES  SLOTS  CHN-CNCT'\nASCBHDR  DC    CL79' SVRBSYNC#  CPUS  AFFN  NDSP  SRBS  SSRB  LCL-LOCK +\n                LOCK-IMG  CML#  SMC#  IODP '\nASSBHDR  DC    CL79'REUS   INSTANCE  LCL-OWNR-DTLS      MEMLIMIT FROM  +\n                                   A.S.PROG'\nRAXHDR   DC    CL79' EXPAND-FRAMES_INCL.HIPER-SPC  STG-ISOLATION  DATAS+\n               PC-SIZE  DATASPAC-HWM  E-SWP'\nSRVHDR   DC    CL79' VIO-IN-EXPND SBSYS CPU-SERVICE IOC-SERVICE MSO-SER+\n               VICE SRB-SERVICE TOTAL-ACCUM'\nOUCBHDR  DC    CL79'RDY-TCBS  WSS  TRX-NAME+CLASS  PP  PGN  DMN  NEW-DP+\n                 TCB-LEFT  LAST-SWAP-REASON'\nOUXBHDR  DC    CL79'  PAGE-INS  PAGEOUTS  VIO-IN VIO-OUT SWPPG-INS SWPP+\n               GOUTS SWAPS  RECLMS XACTNCT '\nDSPCHDR  DC    CL79'DATASPACE    SPACE-TOKEN   SCOPE  KEY/PROT OWNTCB  +\n               MAX-ADDR  ORIGIN  MAX-PAGES '\n         LTORG\n         SPACE\n         DC    0F\nMEML_SRC DC    CL4'    '         0 - NOT SET.\n         DC    CL4'SMF '         1 - SMFPRM OR DEFAULT OF 0.\n         DC    CL4'JCL '         2 - SET FROM JCL.\n         DC    CL4'REG0'         3 - NOLIMIT FROM REGION=0.\n         DC    CL4'USI '         4 - SET BY IEFUSI.\n         DC    CL4'OMVS'         5 - SET BY UNIX OMVS SEGMENT.\n         DC    CL4'SETR'         6 - SET BY UNIX SETRLIMIT.\n         DC    CL4'SPWN'         7 - SET BY UNIX SPAWN.\n         DC    CL4'SETO'         8 - SET BY UNIX SETOMVS COMMAND.\n         DC    CL4'AUTH'         9 - SET BY AUTHORIZED APPLICATION.\n         DC    CL4'URG '         10 - IEFSMFIE (IEFUSI SET REGION).\n         DC    CL4'_11_'         11\n         DC    CL4'_12_'         12\n         DC    CL4'_13_'         13\n         DC    CL4'_14_'         14\n         DC    CL4'BAD '         255 - ERROR.\nSWAPRSNS DC    CL16'SWAPPED IN      '\n         DC    CL16'TERM OUTPUT WAIT'\n         DC    CL16'TERM INPUT WAIT '\n         DC    CL16'LONG WAIT       '\n         DC    CL16'AUX STOR SHORTAG'\n         DC    CL16'REAL STOR SHORTG'\n         DC    CL16'DETECTED WAIT   '\n         DC    CL16'REQUESTED SWAP  '\n         DC    CL16'ENQUEUE SWAP    '\n         DC    CL16'EXCHANGE SWAP   '\n         DC    CL16'UNILATERAL SWAP '\n         DC    CL16'TRANSITION SWAP '\n         DC    CL16'IMPROV CSTOR USE'\n         DC    CL16'IMPROV PAGE RATE'\n         DC    CL16'MAKE SWAPIN ROOM'\n         DC    CL16'APPC WAIT       '\n         DC    CL16'OMVS INPUT WAIT '\n         DC    CL16'OMVS OUTPUT WAIT'\n         DC    CL16'FRAME RECOVERY  '\n         DC    CL16'                '\n         TITLE 'JOB STATUS MONITOR - DETECT AND PROCESS ZOOM REQUEST'\n         USING JOBZMCHK,R5\nJOBZMCHK L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,INBUFF+1       GET RELATIVE LINE NUMBER OF CURSOR.\n         CH    R1,WINHDGCT       CURSOR ON A HEADING LINE?\n         BNH   REDOJOBS          YES, UPDATE JOB STATUS DISPLAY.\n         BCTR  R1,0              DISCOUNT WINDOW HEADING.\n         BCTR  R1,0              MAKE LINE NUMBER RELATIVE TO ZERO.\n         A     R1,WINTOP         CONVERT TO WINDOW LINE NUMBER.\n         C     R1,WINLINES       CURSOR BEFORE SUMMARY LINE?\n         BNL   REDOJOBS          NO, NOT A ZOOMABLE LINE.\n         MH    R1,WINLNLEN       YES, GET AN INDEX INTO WINDOW AREA.\n         A     R1,WINBUFF        POINT TO DETAIL LINE CONTENTS.\n         DROP  R15               WNDWMNGR.\n         SLR   R15,R15\n         IC    R15,INBUFF+2      GET RELATIVE COLUMN NUMBER.\n         LA    R2,LL-80(R15,R1)  POINT TO DATA UNDER CURSOR.\n         MVC   INCHARS,BLANKS    CLEAR INPUT BUFFER.\n         LA    R0,8              GET MAXIMUM ADDRESS DIGIT LENGTH.\n         CLI   LL-80(R1),X'F5'   TURQUOISE LINE?\n         BE    JZDSPCHK          YES, SHOULD BE A DATA SPACE LINE.\nJZMSCNLP BCTR  R2,0              BACK UP A BYTE.\n         CLI   0(R2),X'24'       FOUND START OF TAB SELECTABLE FIELD?\n         BE    JZMFIELD          YES.\n         BCT   R0,JZMSCNLP       NO.\n         B     REDOJOBS          NOT A ZOOMABLE LINE SO CONTINUE.\nJZMFIELD MVC   INCHARS+4(6),1(R2)\n         CLI   1+6(R2),C' '      END OF SELECTABLE FIELD?\n         BL    JVBZOOM6          YES.\n         MVC   INCHARS+2(8),1(R2)\n         B     JVBZOOM8\n         USING DSPCDTLS,R1\nJZDSPCHK CLC   JVALDSPC,DSPCSTKN-2\n         BNE   REDOJOBS          NOT A DATASPACE LINE.\n         L     R15,=A(VWORDONE)  POINT TO OPTION \"V\" VARIABLES.\n         USING VWORDONE,R15\n         MVC   VBDSNAME,DSPCNAME SHOW DATASPACE NAME.\n         TR    DSPCSTKN,JVHEXTAB-C'A'\n         PACK  WORK(5),DSPCSTKN(9)\n         PACK  WORK+4(5),DSPCSTKN+8(9)\n         MVC   VBDSTOKN,WORK     SUPPLY SPACE TOKEN.\n         TR    DSPCKEY,JVHEXTAB-C'A'\n         IC    R0,DSPCKEY\n         SLL   R0,4\n         STC   R0,VKEYPROT       SUPPLY STORAGE PROTECTION KEY.\n         CLI   DSPCPROT,C'Y'     FETCH PROTECTED?\n         BNE   *+8               NO.\n         OI    VKEYPROT,X'08'    YES.\n         XC    VBDSADDR,VBDSADDR ZERO THE INITIAL FETCH ADDRESS.\n         CLI   DSPCORIG+3,C'0'   PAGE ZERO AVAILABLE?\n         BE    *+8               YES.\n         MVI   VBDSADDR+2,X'10'  NO, START AT THE 4K LINE.\n         DROP  R1,R15            DSPCDTLS, VWORDONE.\n         OI    JBTARGAS,X'80'    FLAG DATA SPACE FETCH TO BE DONE.\nJVBZOOM6 MVI   INCHARS+2,C'0'    SUPPLY LEADING ZEROS.\n         MVI   INCHARS+3,C'0'\nJVBZOOM8 CLI   INCHARS+2,C'0'    ADDRESS STARTS WITH DECIMAL NUMERIC?\n         BNL   JVBNUMOK          YES, NO NEED TO RESET \"SIGN BIT\".\n         TR    INCHARS+2(1),JVNOSIGN-C'A'\nJVBNUMOK MVC   INBUFF,BLANKS     CLEAR READ HEADER BUFFER.\n         MVI   INBUFF,X'7C'      SIMULATE PFK 12.\n         MVI   INCHARS,C'V'      SIMULATE OPTION \"V\" REQUEST.\n         MVI   INCHARS+1,C'B'    LOAD SUBCOMMAND FOR \"V\" TO PROCESS.\n         MVI   TGETLEN+1,16      SET INPUT LENGTH.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNJ          PERFORM INTER-OPTION JUMP.\n         DROP  R5                JOBZMCHK.\n         SPACE\n         DROP  R11,R10,R9        JOBSTATS.\n         SPACE\nJVNOSIGN DC    C'234567'         MAP A->F TO 2->7.\nJVALDSPC DC    X'4024F8'         C'  8'\nJVHEXTAB DC    X'FAFBFCFDFEFF',XL9'00'\n         DC    XL32'00'\n         DC    C'0123456789'\n         LTORG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAL": {"ttr": 17418, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\x0c\\x00\\x00\\x00\\x94\\x12?\\x01\\x05\\x02o\\x18\\x11\\x04\\xa3\\x01\\xaf\\x00t\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "52.12", "flags": 0, "createdate": "1994-05-03T00:00:00", "modifydate": "2005-01-26T18:11:00", "lines": 1187, "newlines": 431, "modlines": 116, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD\n         TITLE 'SYSTEM LIBRARY LISTER SUBROUTINE'\n         USING LISTLIBS,R11,R10\nLISTLIBS DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '  ADJUST ANY COMMAND INPUT.\n         B     CMDSCANL          CHECK FOR SUBCOMMAND.\n         SPACE\nREDOLIST MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         SLR   R0,R0\n         ST    R0,WINLINES       INITIALIZE LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX SUPPLY HEADING ATTRIBUTES.\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         CLI   LISTFLAG,C'L'     DISPLAY THE LINK LIST?\n         BE    LISTLINK          YES.\n         CLI   LISTFLAG,C'P'     DISPLAY THE LINK PACK LIST?\n         BE    LISTPACK          YES.\n         SPACE\nLISTAPFL MVI   LISTFLAG,C'A'     DISPLAY APF AUTHORIZED LIBRARY LIST.\n         TM    OSLEVEL,X'88'     MVS/ESA SP4 OR LATER?\n         BNO   OLDAPFTB          NO, CAN'T HAVE APF EXTENSIONS.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         TM    CVTOSLVL+1,CVTDYAPF SP4.3 OR LATER?\n         BZ    OLDAPFTB          NO, APF EXTENSIONS NOT AVAILABLE.\n         DROP  R1                CVT.\n         CSVAPF REQUEST=QUERYFORMAT,FORMAT=APFLTYPE\n         TM    APFLTYPE,X'FF'    NEW APF LIBRARY LIST FORMAT USEABLE?\n         BNM   OLDAPFTB          NO, USE THE TRIED AND TRUE.\nLAWAPREP L     R0,APFLSIZE       GET THE WORK AREA SIZE.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=ANY\n         ST    R1,APFLADDR       SAVE THE ADDRESS.\n         LR    R4,R1             COPY THE ADDRESS.\n         CSVAPF REQUEST=LIST,ANSAREA=(R4),ANSLEN=APFLSIZE\n         CHI   R15,4             SUCCESS?\n         BL    NEWAPFTB          YES.\n         BH    NEWLFAIL          NO.\n         LM    R0,R1,APFLSIZE    GET THE WORK AREA DETAILS.\n         USING APFHDR,R1\n         L     R3,APFHTLEN       GET THE SIZE THAT IS REQUIRED.\n         DROP  R1                APFHDR.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         ST    R3,APFLSIZE       UPDATE THE SIZE FOR RETRY.\n         B     LAWAPREP\nNEWLFAIL STM   R15,R0,WORK       SAVE RETURN AND REASON CODE.\n         UNPK  CSVBDMSG+35(9),WORK(5)\n         TR    CSVBDMSG+35(8),HEX-C'0'\n         MVI   CSVBDMSG+43,C' '\n         UNPK  CSVBDMSG+57(9),WORK+4(5)\n         TR    CSVBDMSG+57(8),HEX-C'0'\n         MVI   CSVBDMSG+65,C' '\n         MVC   LL-79(79,R2),CSVBDMSG\n         BAS   R14,LADDLINE      LINE NOW COMPLETE.\n         B     NEWLDONE\nNEWAPFTB L     R3,APFLADDR       POINT TO THE AUTHORIZED LIBRARY TABLE.\n         USING APFHDR,R3\n         L     R4,APFH#REC       GET NUMBER OF AUTHORIZED LIBRARIES.\n         CVD   R4,WORK           DISPLAY NUMBER OF ENTRIES IN HEADING.\n         LA    R1,HEADAPFL+62    HANDLE ZERO ENTRIES.\n         MVC   HEADAPFL+57(6),ED3Z\n         EDMK  HEADAPFL+57(6),WORK+5\n         BCTR  R1,0              POINT TO BEFORE FIRST DIGIT.\n         MVI   0(R1),C'('        TIDY UP BRACKETS.\n         MVC   HEADAPFL+19(3),=C'SMS'\n         MVC   LL-79(79,R2),HEADAPFL  LOAD HEADING.\n         BAS   R14,LADDLINE      LINE NOW COMPLETE.\n         L     R5,APFHOFF        GET OFFSET TO FIRST APFE.\n         LA    R5,0(R5,R3)       POINT TO FIRST ENTRY.\n         LTR   R4,R4             ANY ENTRIES?\n         BZ    NEWLDONE          NO.\n         USING APFE,R5\nNEWAPFLB MVC   0(L'LOWX,R2),LOWX SUPPLY ATTRIBUTE BYTES.\n         MVC   9(79,R2),BLANKS   BLANK THE LINE.\n         MVC   19(6,R2),APFEVOLUME LOAD VOLUME SERIAL NUMBER.\n         TM    APFEFLAGS,APFESMS SMS-MANAGED LIBRARY?\n         BZ    NEWSMSOK          NO.\n         MVC   28(3,R2),=C'YES'  YES, INDICATE THIS.\nNEWSMSOK SLR   R9,R9\n         IC    R9,APFEDSLEN      GET DATA SET NAME LENGTH.\n         EX    R9,APFNWLOD       LOAD AUTHORIZED LIBRARY NAME.\n         BAS   R14,LADDLINE      LINE NOW COMPLETE.\n         ICM   R9,3,APFELEN      GET THE ENTRY LENGTH.\n         LA    R5,0(R9,R5)       POINT TO NEXT ENTRY.\n         BCT   R4,NEWAPFLB       GET NEXT ENTRY.\nNEWLDONE LM    R0,R1,APFLSIZE    GET THE WORK AREA DETAILS.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         B     ENDOFLIB          END OF LIBRARY LIST REACHED.\nAPFNWLOD MVC   34(0,R2),APFEDSNAME              <<< EXECUTED >>>\n         DROP  R3,R5             APFHDR, APFE.\nOLDAPFTB L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTAUTHL       POINT TO THE AUTHORIZED LIBRARY TABLE.\n         DROP  R3                CVT.\n         SLR   R4,R4\n         IC    R4,1(,R3)         GET NUMBER OF AUTHORIZED LIBRARIES.\n         CVD   R4,WORK           DISPLAY NUMBER OF ENTRIES IN HEADING.\n         LA    R1,HEADAPFL+62    HANDLE ZERO ENTRIES.\n         MVC   HEADAPFL+59(4),ED3Z\n         EDMK  HEADAPFL+59(4),WORK+6\n         BCTR  R1,0              POINT TO BEFORE FIRST DIGIT.\n         MVI   0(R1),C'('        TIDY UP BRACKETS.\n         MVC   LL-79(79,R2),HEADAPFL  LOAD HEADING.\n         BAS   R14,LADDLINE      LINE NOW COMPLETE.\n         LA    R5,2(,R3)         POINT TO FIRST ENTRY.\n         LTR   R4,R4             ANY ENTRIES?\n         BZ    ENDOFLIB          NO.\nNXTAPFLB MVC   0(L'LOWX,R2),LOWX SUPPLY ATTRIBUTE BYTES.\n         MVC   9(79,R2),BLANKS   BLANK THE LINE.\n         MVC   19(6,R2),1(R5)    LOAD VOLUME SERIAL NUMBER.\n         SLR   R9,R9\n         IC    R9,0(,R5)         GET LENGTH OF ENTRY.\n         AHI   R9,-7             GET DATA SET NAME LENGTH MINUS ONE.\n         EX    R9,APFNMLOD       LOAD AUTHORIZED LIBRARY NAME.\n         BAS   R14,LADDLINE      LINE NOW COMPLETE.\n         LA    R5,8(R9,R5)       POINT TO NEXT ENTRY.\n         BCT   R4,NXTAPFLB       GET NEXT ENTRY.\n         B     ENDOFLIB          END OF LIBRARY LIST REACHED.\n         SPACE\nLISTLINK L     R3,CVTPTR(,0)     POINT TO CVT.\n         USING CVT,R3\n         L     R7,CVTLINK        POINT TO THE IPL-TIME LINK LIST DCB.\n         L     R3,CVTLLTA        POINT TO THE IPL-TIME LINK LIST TABLE.\n         DROP  R3                CVT.\n         TM    OSLEVEL+1,CVTDYNL OS/390 1.3 OR LATER?\n         BNO   LNKLSTOK          NO, NO DYNAMIC LINK LIST FACILITY.\n         L     R6,PSAAOLD        POINT TO THE CURRENT ASCB.\n         USING ASCB,R6\n         L     R6,ASCBASSB       POINT TO THE CURRENT ASSB.\n         DROP  R6                ASCB.\n         USING ASSB,R6\n         L     R6,ASSBDLCB       POINT TO DYNAMIC LNKLST CONTROL BLOCK.\n         DROP  R6                ASSB.\n         USING DLCB,R6\n         L     R7,DLCBDCB@       POINT TO THIS ASID'S LINK LIST DCB.\n         USING IHADCB,R7\n         L     R3,DLCBLLT@       POINT TO THIS ASID'S LINK LIST TABLE.\nLNKLSTOK ICM   R7,7,DCBDEBA      POINT TO THE LINK LIST DEB.\n         DROP  R7                IHADCB.\n         USING DEBBASIC,R7\n         L     R4,4(,R3)         GET NUMBER OF LINK LIST LIBRARIES.\n         CVD   R4,WORK           DISPLAY NUMBER OF ENTRIES IN HEADING.\n         MVC   HEADLNKL+59(4),ED3Z\n         EDMK  HEADLNKL+59(4),WORK+6\n         BCTR  R1,0              POINT TO BEFORE FIRST DIGIT.\n         MVI   0(R1),C'('        TIDY UP BRACKETS.\n         MVC   LL-79(79,R2),HEADLNKL  LOAD HEADING.\n         TM    OSLEVEL+1,CVTDYNL OS/390 1.3 OR LATER?\n         BNO   LNKHDGOK          NO, NO DYNAMIC LINK LIST FACILITY.\n         MVC   LL-44(4,R2),=C'SET '\n         MVC   LL-40(16,R2),DLCBLNKLSTSETNAME\n         DROP  R6                DLCB.\nLNKHDGOK BAS   R14,LADDLINE      LINE NOW COMPLETE.\n         LA    R5,8(,R3)         POINT TO FIRST ENTRY.\n         LR    R6,R4             GET THE NUMBER OF ENTRIES.\n         MHI   R6,45             MULTIPLY BY THE ENTRY LENGTH.\n         LA    R6,8(R6,R3)       POINT TO APF FLAG BYTES.\n         SLR   R8,R8\n         IC    R8,DEBNMEXT       GET THE NUMBER OF LINK LIST EXTENTS.\n         DROP  R7                DEBBASIC.\n         LA    R7,32(,R7)        POINT TO DEB DASD EXTENSION.\n         SLL   R8,4              BY 16 FOR DASD EXTENSION SIZE.\n         LA    R8,0(R8,R7)       POINT TO DEB BPAM SECTION.\n         BCTR  R8,0              POINT TO ONE BEFORE IT.\n         LR    R9,R4             COPY THE NUMBER OF ENTRIES.\nNXTLNKLB MVC   0(L'LOWX,R2),LOWX SUPPLY ATTRIBUTE BYTES.\n         MVC   9(79,R2),BLANKS   BLANK THE LINE.\n         SLR   R1,R1\n         CR    R9,R4             FIRST ENTRY?\n         BE    LNKVOLSR          YES, HAD DEB EXTENT DESCRIPTOR.\n         IC    R1,0(,R8)         NO, LOAD ENTRY'S FIRST EXTENT NUMBER.\n         SLL   R1,4              MULTIPLY BY 16 FOR INDEX.\nLNKVOLSR LA    R1,0(R1,R7)       POINT TO ENTRY'S FIRST DEB EXTENT.\n         USING DEBDASD,R1\n         ICM   R1,7,DEBUCBA      POINT TO ENTRY'S FIRST DEB EXTENT UCB.\n         DROP  R1                DEBDASD.\n         USING UCBOB,R1\n         MVC   19(6,R2),UCBVOLI  LOAD VOLUME SERIAL NUMBER.\n         DROP  R1                UCBOB.\n         MVC   34(44,R2),1(R5)   LOAD LINK LIST LIBRARY NAME.\n         TM    0(R6),X'80'       APF AUTHORIZED LIBRARY?\n         BZ    DONLNKLB          NO.\n         MVC   28(3,R2),=C'YES'  YES, INDICATE THIS.\nDONLNKLB BAS   R14,LADDLINE      LINE NOW COMPLETE.\n         LA    R5,45(,R5)        POINT TO NEXT ENTRY.\n         LA    R6,1(,R6)         POINT TO NEXT ENTRY'S APF FLAG.\n         LA    R8,1(,R8)         POINT TO NEXT ENTRY'S 1ST EXTENT NO.\n         BCT   R4,NXTLNKLB       GET NEXT ENTRY.\n         B     ENDOFLIB          END OF LIBRARY LIST REACHED.\n         SPACE\nLISTPACK L     R3,CVTPTR(,0)     POINT TO CVT.\n         USING CVT,R3\n         L     R3,CVTSMEXT       POINT TO STORAGE MAP EXTENSION.\n         DROP  R3                CVT.\n         USING CVTVSTGX,R3\n         L     R3,CVTEPLPS       POINT TO LINK PACK AREA LIST TABLE.\n         DROP  R3                CVTVSTGX.\n         L     R4,4(,R3)         GET NUMBER OF LINK PACK LIBRARIES.\n         CVD   R4,WORK           DISPLAY NUMBER OF ENTRIES IN HEADING.\n         MVC   HEADPAKL+59(4),ED3Z\n         EDMK  HEADPAKL+59(4),WORK+6\n         BCTR  R1,0              POINT TO BEFORE FIRST DIGIT.\n         MVI   0(R1),C'('        TIDY UP BRACKETS.\n         LA    R5,8(,R3)         POINT TO FIRST ENTRY.\n         LA    R1,1              ONE.\n         CR    R1,R4             ONE ENTRY?\n         BNE   LPAHDGOK          NO, PLURAL.\n         MVC   HEADPAKL+68(4),=C'Y)  '\nLPAHDGOK MVC   LL-79(79,R2),HEADPAKL  LOAD HEADING.\n         BAS   R14,LADDLINE      LINE NOW COMPLETE.\nNXTPAKLB MVC   0(L'LOWX,R2),LOWX SUPPLY ATTRIBUTE BYTES.\n         MVC   9(79,R2),BLANKS   BLANK THE LINE.\n         MVC   34(44,R2),1(R5)   LOAD LPA LIST LIBRARY NAME.\n         BAS   R14,LADDLINE      LINE NOW COMPLETE.\n         LA    R5,45(,R5)        POINT TO NEXT ENTRY.\n         BCT   R4,NXTPAKLB       GET NEXT ENTRY.\n         SPACE\nENDOFLIB ST    R4,APFDELNO       CLEAR ANY REMOVAL ENTRY NUMBER.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNL LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNL L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVI   WINSUFLN,X'FF'    NEGATE DATA STREAM SUFFIX LENGTH CODE.\n         DROP  R15               WNDWMNGR.\n         MVI   HOME,X'C1'        RESET THE BELL FLAG IN THE WCC.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDOLIST          YES, BRANCH TO NEW SCREEN LOGIC.\nCMDSCANL MVC   WORK(1),LISTFLAG  SAVE OLD LIST TYPE FLAG.\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    REDOLIST          YES.\n         MVC   LISTFLAG,INCHARS  UPDATE LIST TYPE FLAG.\n         CLI   INCHARS,C'A'      APF LIBRARY DISPLAY REQUEST?\n         BE    REDOLIST          YES.\n         CLI   INCHARS,C'L'      LINK LIST DISPLAY REQUEST?\n         BE    REDOLIST          YES.\n         CLI   INCHARS,C'P'      LINK PACK AREA LIST DISPLAY REQUEST?\n         BE    REDOLIST          YES.\n         MVC   LISTFLAG,WORK     INVALID SO RESTORE OLD LIST TYPE FLAG.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'V'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         NC    OPTNATR,C'V'(R15)       MASK CUSTOMIZABLE BYTE.\n         OC    OPTNATR,C'L'-C' '(R15)  GATE CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   GIVEHLPL          NO, CAN'T FIDDLE WITH SQA AND CVT.\n         CLI   INCHARS+1,C'A'    APF LIBRARY LIST UPDATE REQUESTED?\n         BNE   LINKCHEK          NO.\n         CSVAPF REQUEST=QUERYFORMAT,FORMAT=APFLTYPE\n         CLI   INCHARS,C'R'      RESET APF LIBRARY LIST REQUESTED?\n         BNE   LCHECKXA          NO.\n         MVI   LISTFLAG,C'A'     DISPLAY APF LIBRARIES AFTERWARDS.\n         TM    APFLTYPE,X'FF'    IS THE DYNAMIC FORMAT IN FORCE?\n         BM    LFMTFAIL          YES, NOT SUPPORTED.\n         ENQ   (LMAJORQ,LMINORQ,E,L'LMINORQ,SYSTEM),RET=USE\n         LTR   R15,R15           SOMEONE ELSE ALREADY DOING THIS?\n         BNZ   LENQFAIL          YES, FAIL THE REQUEST.\n         MVI   ENDDEPTH+1,1      ALLOW PF3/15 TO CANCEL THE REQUEST.\n         LA    R0,LCONMSGL\n         LA    R1,LCONFIRM\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    LDEQREDO          YES.\n         CLI   INBUFF,13         WAS ENTER SELECTED?\n         BNE   LDEQREDO          NO, ABORT APF LIBRARY LIST RESET.\n         LA    R1,ARMSG          PREPARE TO SAY THAT THIS IS ALREADY\n         LA    R0,ARMSGLEN-1     THE IPL-TIME APF LIBRARY LIST.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R6,CVTAUTHL       POINT TO THE AUTHORIZED LIBRARY TABLE.\n         DROP  R3                CVT.\n         LR    R5,R6\n         SRL   R5,12\n         SLL   R5,12\n         CR    R5,R6             IS TABLE ORIGIN ON PAGE BOUNDARY?\n         BE    MSGSCRNL          YES, PROBABLY ALREADY ALTERED BY TMON.\n         LA    R5,40             GET THE PREFIX LENGTH.\n         SR    R6,R5             POINT TO THE PREFIX, IF ANY.\n         CLC   =CL8'APFALT  ',0(R6)    VALID PREFIX ID?\n         BNE   MSGSCRNL          NO, SHOW MESSAGE.\n         L     R15,PSATOLD       POINT TO THE CURRENT TCB.\n         L     R15,12(,R15)      POINT TO THE TIOT.\n         MVC   LXPRY66I+12(8),0(R15)   SUPPLY THE TSO USERID.\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         WTO   MF=(E,LXPRY66I)   LOG THIS ALTERATION FOR THE RECORD.\n         L     R1,36(,R6)        LOAD ADDRESS OF IPL-TIME TABLE.\n         ST    R1,484(,R3)       RE-ACTIVATE IPL-TIME TABLE.\n         LR    R1,R6             POINT TO DE-ACTIVATED TABLE'S PREFIX.\n         LR    R0,R5             COPY THE LENGTH OF THE PREFIX.\n         B     LFREEOLD          GO FREE THE DE-ACTIVATED TABLE.\nLFMTFAIL LA    R1,CFMSG          TELL THE USER THAT THE DYNAMIC APF\n         LA    R0,CFMSGLEN-1     LIBRARY MANAGEMENT IS NOT SUPPORTED.\n         B     LPREFAIL\nLENQFAIL LA    R1,EFMSG          TELL THE USER THAT ANOTHER USER\n         LA    R0,EFMSGLEN-1     IS UPDATING THE SYSTEM STRUCTURES.\nLPREFAIL L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         ST    R1,WINSUFIX\n         ST    R0,WINSUFLN\n         DROP  R15               WNDWMNGR.\n         MVI   HOME,X'C5'        SOUND THE BELL.\n         B     REDOLIST          MAKE A NEW SCREEN IMAGE.\nLNOTLBLN LA    R1,WLMSG          TELL THE USER THAT THE CURSOR\n         LA    R0,WLMSGLEN-1     WAS NOT ON A LINE CONTAINING AN\n*        B     MSGSCRNL          APF AUTHORIZED LIBRARY TABLE ENTRY.\nMSGSCRNL L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         ST    R1,WINSUFIX\n         ST    R0,WINSUFLN\n         DROP  R15               WNDWMNGR.\n         MVI   HOME,X'C5'        SOUND THE BELL.\n         B     LDEQREDO          MAKE A NEW SCREEN IMAGE.\nLCHECKXA CLI   INCHARS,C'X'      EXTRA APF LIBRARY REQUESTED?\n         BNE   LCHECKDA          NO.\n         MVI   LISTFLAG,C'A'     DISPLAY APF LIBRARIES AFTERWARDS.\n         TM    APFLTYPE,X'FF'    IS THE DYNAMIC FORMAT IN FORCE?\n         BNM   LXADOENQ          NO, STATIC SO SERIALIZE WITH ENQ.\n         MVC   ALVOLSER,=C'***SMS'   YES, PRIME WITH SMS-MANAGED FLAG.\n         B     LXGETVOL\nLXADOENQ ENQ   (LMAJORQ,LMINORQ,E,L'LMINORQ,SYSTEM),RET=USE\n         LTR   R15,R15           SOMEONE ELSE ALREADY DOING THIS?\n         BNZ   LENQFAIL          YES, FAIL THE REQUEST.\nLXGETVOL MVI   ENDDEPTH+1,1      ALLOW PF3/15 TO CANCEL THE REQUEST.\n         MVI   APFVPRMP,X'C1'    ISSUE PROMPT FOR VOLUME SERIAL NUMBER.\n         LA    R0,ALVPRMPL\n         LA    R1,APFVPRMP\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    LDEQREDO          YES.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    LDEQREDO          YES, ABORT APF LIBRARY ADDITION.\n         CLI   INBUFF,13         WAS ENTER SELECTED?\n         BNE   LDEQREDO          NO, ABORT APF LIBRARY ADDITION.\n         LH    R1,TGETLEN        GET THE LENGTH OF INPUT DATA STREAM.\n         CHI   R1,12             TOO LONG?\n         BH    LAVINVLD          YES, INVALID INPUT.\n         CLI   INCHARS,C' '      BLANK OR NULL INPUT?\n         BNH   LDEQREDO          YES, ABORT APF LIBRARY ADDITION.\n         MVC   LXPRY65I+86(6),INCHARS SUPPLY THE VOLUME SERIAL NUMBER.\n         TM    APFLTYPE,X'FF'    IS THE DYNAMIC FORMAT IN FORCE?\n         BNM   LAXNOSMS          NO, SO NEED VALID VOLUME SERIAL.\n         CLC   STARS(6),INCHARS      SYSTEM RESIDENCE VOLUME SPECIFIED?\n         BE    LAXVOKAY          YES, SPECIAL VALUE OKAY.\n         CLC   =C'*MCAT*',INCHARS    MASTERCATALOG VOLUME SPECIFIED?\n         BE    LAXVOKAY          YES, SPECIAL VALUE OKAY.\n         CLC   =C'***SMS',INCHARS    SMS-MANAGED SPECIFIED?\n         BNE   LAXNOSMS          NO, VALIDATE VOLUME SERIAL NUMBER.\n         XC    INCHARS(6),INCHARS    USE NULLS TO FLAG SMS.\n         B     LAXVOKAY          SPECIAL VALUE OKAY.\nLAXNOSMS CLC   INCHARS(6),STARS  NO, ASTERISKS SUPPLIED?\n         BNE   LAXVLCHK          NO.\n         L     R9,CVTPTR(,0)     YES, POINT TO THE CVT.\n         USING CVT,R9\n         L     R9,CVTSYSAD       POINT TO SYSTEM RESIDENCE UCB.\n         DROP  R9                CVT.\n         MVC   INCHARS(6),28(R9) LOAD VOLUME SERIAL OF SYSRES.\nLAXVLCHK LA    R9,5              GET MAXIMUM LENGTH CODE OF VOLUME.\n         LA    R1,INCHARS+5      POINT TO LAST POSSIBLE VOLUME CHAR.\nLAXVLOOP CLI   0(R1),C' '        TRAILING BLANK?\n         BNE   GOTXVLEN          NO, FOUND THE END OF VOLUME SERIAL.\n         BCTR  R1,0              YES, BACK UP A BYTE.\n         BCT   R9,LAXVLOOP\nGOTXVLEN MVI   LAXTRTTB+C'.',X'FF'     PERIODS ARE NOT VALID.\n         EX    R9,LAXTRT         VALID VOLUME SERIAL NUMBER?\n         BZ    LAXVOKAY          YES.\nLAVINVLD MVI   APFVPRMP,X'C5'    NO, REISSUE PROMPT WITH BELL.\n         LA    R0,ALVERRLN\n         B     LXGETVOL\nLAXVOKAY MVC   WORK2,INCHARS     SAVE SUPPLIED VOLUME SERIAL NUMBER.\n         MVI   LIBDPRMP,X'C1'    ISSUE PROMPT FOR DATA SET NAME.\n         LA    R0,ALDPRMPL\nLXGETDSN LA    R1,LIBDPRMP\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    LDEQREDO          YES.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    LDEQREDO          YES, ABORT APF LIBRARY ADDITION.\n         CLI   INBUFF,13         WAS ENTER SELECTED?\n         BNE   LDEQREDO          NO, ABORT APF LIBRARY ADDITION.\n         LH    R1,TGETLEN        GET THE LENGTH OF INPUT DATA STREAM.\n         CHI   R1,50             TOO LONG?\n         BH    LADINVLD          YES, INVALID INPUT.\n         CLI   INCHARS,C' '      BLANK OR NULL INPUT?\n         BNH   LDEQREDO          YES, ABORT APF LIBRARY ADDITION.\n         CLI   INCHARS,C'.'      STARTING WITH A PERIOD?\n         BE    LADINVLD          YES, INVALID.\n         CLI   INCHARS,C'0'      STARTING WITH A NUMERIC CHARACTER?\n         BNL   LADINVLD          YES, INVALID.\n         LA    R9,43             NO, GET MAXIMUM LENGTH CODE OF DSNAME.\n         LA    R1,INCHARS+43     POINT TO LAST POSSIBLE DSNAME CHAR.\nLAXDLOOP CLI   0(R1),C' '        TRAILING BLANK?\n         BNE   GOTXDLEN          NO, FOUND THE END OF DATA SET NAME.\n         BCTR  R1,0              YES, BACK UP A BYTE.\n         BCT   R9,LAXDLOOP\nGOTXDLEN CLI   0(R1),C'.'        ENDING IN A PERIOD?\n         BE    LADINVLD          YES, INVALID.\n         MVI   LAXTRTTB+C'.',X'00'   PERIODS ARE VALID.\n         EX    R9,LAXTRT         VALID DATA SET NAME?\n         BZ    LAXDOKAY          HOPE SO - DID NOT VERIFY QUALIFIERS.\nLADINVLD MVI   LIBDPRMP,X'C5'    NO, REISSUE PROMPT WITH BELL.\n         LA    R0,ALDERRLN\n         B     LXGETDSN\nLAXDOKAY MVC   LXPRY65I+38(44),INCHARS  SUPPLY THE DATA SET NAME.\n         TM    APFLTYPE,X'FF'    IS THE DYNAMIC FORMAT IN FORCE?\n         BM    LAXDONEW          YES, DO THE NEW METHOD OF ADD.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTAUTHL       POINT TO THE AUTHORIZED LIBRARY TABLE.\n         DROP  R3                CVT.\n         SLR   R4,R4             ZERO DATA SET COUNTER.\n         ST    R4,WORK           CLEAR SOME STORAGE.\n         CLI   1(R3),255         MAXIMUM ENTRIES?\n         BL    LXANTFUL          NO, TABLE IS NOT FULL.\n         LA    R1,TFMSG          PLACE \"TABLE FULL\" MESSAGE IN\n         LA    R0,TFMSGLEN-1     DATA STREAM SUFFIX.\n         B     MSGSCRNL\nLXANTFUL DS    0H\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         LA    R5,2(,R3)         POINT TO FIRST ENTRY.\n         ICM   R4,B'0001',1(R3)  GET NUMBER OF AUTHORIZED LIBRARIES.\n         BZ    NOAPFLIB          THIS NUMBER IS NOUGHT.\n         SLR   R1,R1\nNXTAPFSZ IC    R1,0(,R5)         GET LENGTH OF ENTRY.\n         LA    R5,1(R1,R5)       POINT PASSED THIS ENTRY.\n         BCT   R4,NXTAPFSZ       GET NEXT ENTRY.\nNOAPFLIB LA    R0,7+1+7+40(,R5)  PREPARE FOR NEW VOLUME AND PREFIX.\n         AR    R0,R9             ADD DSN LENGTH CODE FOR NEW ENTRY.\n         SRL   R0,3              ENSURE DOUBLEWORD BOUNDARY.\n         SLL   R0,3\n         SR    R0,R3             GET THE NEW TABLE SIZE.\n         BAS   R14,LGETABLE      ACQUIRE STORAGE FOR THE NEW TABLE.\n         LA    R14,40(,R1)       GET THE NEW ADDRESS, PAST THE PREFIX.\n         LR    R15,R5            GET THE OLD ENDING ADDRESS.\n         SR    R15,R3            GET THE OLD LENGTH.\n         LR    R6,R3             COPY THE OLD ADDRESS.\n         LR    R7,R15            COPY THE OLD LENGTH.\n         MVCL  R14,R6            COPY THE OLD TABLE.\n         MVC   1(6,R14),WORK2    LOAD IN THE NEW VOLUME SERIAL NUMBER.\n         EX    R9,APFDSNLD       LOAD IN THE NEW DATA SET NAME.\n         LA    R9,7(,R9)         GET THE NEW ENTRY'S LENGTH INDICATOR.\n         STC   R9,0(,R14)        LOAD IT INTO THE NEW TABLE.\n         LR    R6,R1             COPY THE NEW PREFIX ADDRESS.\n         SLR   R15,R15\n         IC    R15,41(,R6)       GET THE OLD APF LIBRARY COUNT.\n         LA    R15,1(,R15)       GET THE NEW APF LIBRARY COUNT.\n         STC   R15,41(,R6)       SAVE IT.\n         WTO   MF=(E,LXPRY65I)   LOG THIS ALTERATION FOR THE RECORD.\nAPFINALE L     R15,CVTPTR(,0)    POINT TO THE CVT.\n         USING CVT,R15\n         LA    R1,40(,R6)        POINT TO THE NEW TABLE.\n         ST    R1,CVTAUTHL       ACTIVATE THE NEW TABLE.\n         DROP  R15               CVT.\n         LR    R1,R3             GET THE OLD TABLE ADDRESS.\n         SRL   R1,12\n         SLL   R1,12\n         CR    R1,R3             IS TABLE ORIGIN ON PAGE BOUNDARY?\n         BE    LXAALLDN          YES, PROBABLY ALREADY ALTERED BY TMON.\n         LR    R1,R3             GET THE OLD TABLE ADDRESS.\n         LA    R0,40             GET THE PREFIX LENGTH.\n         SR    R1,R0             GET OLD PREFIX ADDRESS.\n         CLC   =CL8'APFALT  ',0(1)   ORIGINAL IPL APF LIST?\n         BNE   LXAALLDN          YES, UPDATE NOW COMPLETE.\n         MVC   36(4,R6),36(R1)   NO, COPY IPL TABLE ADDRESS.\nLFREEOLD A     R0,32(,R1)        ADD OLD TABLE SIZE TO PREFIX SIZE.\n         FREEMAIN RU,LV=(0),A=(1),SP=245       FREE THE OLD TABLE.\nLXAALLDN DS    0H\n         MODESET MF=(E,MDSETN0)  RETURN TO PROBLEM KEY.\nLDEQREDO TM    APFLTYPE,X'FF'    IS THE DYNAMIC FORMAT IN FORCE?\n         BM    REDOLIST          YES, THERE IS NO ENQ TO DEQ.\n         DEQ   (LMAJORQ,LMINORQ,L'LMINORQ,SYSTEM),RET=NONE\n         B     REDOLIST          DISPLAY NEW APF LIBRARY STATUS.\nLAXDONEW DS    0H\n         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.\n         L     R15,PSATOLD       POINT TO THE CURRENT TCB.\n         L     R15,12(,R15)      POINT TO THE TIOT.\n         MVC   LXPRY65I+12(8),0(R15)   SUPPLY THE TSO USERID.\n         LA    R3,LXPRY65I       POINT TO WTO REQUIRED TO LOG CHANGE.\n         CSVAPF REQUEST=ADD,DSNAME=INCHARS,VOLTYPE=ANY,VOLUME=WORK2\nLCSVAPFX STM   R15,R0,WORK       SAVE RETURN AND REASON CODE.\n         LTR   R15,R15           SUCCESS?\n         BNZ   LCSVWTOX          NO, SKIP WRITE-TO-OPERATOR.\n         WTO   MF=(E,(R3))       YES, ISSUE MESSAGE TO LOG THE CHANGE.\nLCSVWTOX MODESET MF=(E,MDSTPRB)  RETURN TO PROBLEM STATE.\n         ICM   R15,15,WORK       WAS RETURN CODE ZERO?\n         BZ    REDOLIST          YES, DISPLAY NEW APF LIBRARY STATUS.\n         UNPK  CTMSGTXT+11(3),WORK+3(2)\n         UNPK  CTMSGTXT+14(9),WORK+4(5)\n         TR    CTMSGTXT+11(11),HEX-C'0'\n         MVI   CTMSGTXT+13,C'-'\n         MVI   CTMSGTXT+22,C' '  SHOW RETURN CODE AND REASON CODE.\n         LA    R1,CTMSG          PLACE \"CSV TRIED\" MESSAGE IN\n         LA    R0,CTMSGLEN-1     DATA STREAM SUFFIX.\n         MVC   CTMSGTXT+24(15),BLANKS\n         CLI   WORK+3,4          WAS THE RETURN CODE FOUR?\n         BNE   LCSVEROR          NO.\n         MVI   CTMSG+7,X'F6'     YES, YELLOW FOR WARNING.\n         CLI   WORK+7,2          REASON MORE THAN 0402?\n         BH    MSGSCRNL          YES, DON'T KNOW WHAT IT MEANS.\n         CLI   WORK+7,1          REASON LESS THAN 0401?\n         BL    MSGSCRNL          YES, DON'T KNOW WHAT IT MEANS.\n         MVC   CTMSGTXT+24(13),=C'ALREADY ADDED'\n         BE    MSGSCRNL          REASON WAS 0401.\n         MVC   CTMSGTXT+24(15),=C'ENTRY NOT FOUND'\n         B     MSGSCRNL          REASON WAS 0402.\nLCSVEROR MVI   CTMSG+7,X'F2'     RED FOR ERROR.\n         CLI   WORK+7,4          DID SECURITY REFUSED AUTHORIZATION?\n         BNE   MSGSCRNL          NO, AT LEAST THAT WASN'T THIS PROB.\n         MVC   CTMSGTXT+24(13),=C'ACCESS DENIED'\n         B     MSGSCRNL          REASON WAS 0804.\nLCHECKDA CLI   INCHARS,C'D'      DELETE APF LIBRARY REQUESTED?\n         BNE   GIVEHLPL          NO.\n         TM    APFLTYPE,X'FF'    IS THE DYNAMIC FORMAT IN FORCE?\n         BM    LDAENQOK          YES, SKIP THE ENQUEUE.\n         ENQ   (LMAJORQ,LMINORQ,E,L'LMINORQ,SYSTEM),RET=USE\n         LTR   R15,R15           SOMEONE ELSE ALREADY DOING THIS?\n         BNZ   LENQFAIL          YES, FAIL THE REQUEST.\nLDAENQOK CLI   LISTFLAG,C'A'     DISPLAYING APF LIBRARIES?\n         BNE   LNOTLBLN          NO, DISPLAY ERROR MESSAGE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,INBUFF+1       GET RELATIVE LINE NUMBER OF CURSOR.\n         CH    R1,WINHDGCT       CURSOR ON A HEADING LINE?\n         BNH   LNOTLBLN          YES, DISPLAY ERROR MESSAGE.\n         BCTR  R1,0\n         BCTR  R1,0\n         A     R1,WINTOP         CONVERT TO WINDOW LINE NUMBER.\n         C     R1,WINLINES       CURSOR AFTER LAST LINE?\n         BNL   LNOTLBLN          YES, DISPLAY ERROR MESSAGE.\n         LR    R0,R1             COPY ENTRY NUMBER.\n         MH    R1,WINLNLEN       NO, GET AN INDEX INTO WINDOW AREA.\n         A     R1,WINBUFF        POINT TO DETAIL LINE CONTENTS.\n         DROP  R15               WNDWMNGR.\n         CLI   8(R1),X'F5'       CURSOR ON SUMMARY LINE?\n         BNE   LNOTLBLN          YES, DISPLAY ERROR MESSAGE.\n         MVC   ARDSNAME,34(R1)   COPY DATA SET NAME.\n         MVC   ARVOLUME,19(R1)   COPY VOLUME SERIAL NUMBER.\n         MVC   ARSMSFLG,BLANKS   CLEAR SMS STATUS INDICATOR.\n         CLI   28(R1),C'Y'       SMS-MANAGED?\n         BNE   LADNDPTH          NO.\n         MVC   ARSMSFLG,=C'(SMS)'\nLADNDPTH MVI   ENDDEPTH+1,1      ALLOW PF3/15 TO CANCEL THE REQUEST.\n         TM    APFLTYPE,X'FF'    IS THE DYNAMIC FORMAT IN FORCE?\n         BM    LADCNFRM          YES, APF TABLE SCAN.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTAUTHL       POINT TO THE AUTHORIZED LIBRARY TABLE.\n         DROP  R3                CVT.\n         SLR   R1,R1\n         IC    R1,1(,R3)         GET NUMBER OF AUTHORIZED LIBRARIES.\n         BCTR  R0,0              GET RELATIVE ENTRY NUMBER TO DELETE.\n         SR    R1,R0             GET \"INVERSE\" (BCT) ENTRY NUMBER.\n         BNP   LDEQREDO          JUST IN CASE OF REALITY FAILURE.\n         ST    R1,APFDELNO       SAVE THE \"ENTRY NUMBER\" TO DELETE.\nLADCNFRM LA    R0,ARDPRMPL       ISSUE CONFIRMATION REQUEST.\n         LA    R1,APFRPRMP\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    LDEQREDO          YES.\n         CLI   INBUFF,13         WAS ENTER SELECTED?\n         BNE   LDEQREDO          NO, ABORT APF LIBRARY REMOVAL.\n         TM    APFLTYPE,X'FF'    IS THE DYNAMIC FORMAT IN FORCE?\n         BNM   LDOLDWAY          NO, DO THINGS THE \"OLD\" WAY.\n         L     R15,PSATOLD       POINT TO THE CURRENT TCB.\n         L     R15,12(,R15)      POINT TO THE TIOT.\n         MVC   LXPRY67I+12(8),0(R15)   SUPPLY THE TSO USERID.\n         MVC   LXPRY67I+40(44),ARDSNAME SUPPLY THE DATA SET NAME.\n         MVC   LXPRY67I+88(6),ARVOLUME SUPPLY THE VOLUME SERIAL NUMBER.\n         MVC   WORK2(6),ARVOLUME SUPPLY THE VOLUME SERIAL NUMBER.\n         CLI   ARSMSFLG+2,C'S'   SMS-MANAGED SPECIFIED?\n         BNE   LADNOSMS          NO, VALIDATE VOLUME SERIAL NUMBER.\n         XC    WORK2,WORK2       USE NULLS TO FLAG SMS.\nLADNOSMS LA    R3,LXPRY67I       POINT TO WTO REQUIRED TO LOG CHANGE.\n         CSVAPF REQUEST=DELETE,  ATTEMPT TO DELETE THE ENTRY.          +\n               DSNAME=ARDSNAME,VOLTYPE=ANY,VOLUME=WORK2\n         B     LCSVAPFX          HANDLE CONSEQUENCES OF CSVAPF MACRO.\nLDOLDWAY LA    R5,2(,R3)         POINT TO FIRST ENTRY.\n         SLR   R4,R4\n         ICM   R4,B'0001',1(R3)  GET NUMBER OF AUTHORIZED LIBRARIES.\n         BZ    LDEQREDO          THIS NUMBER IS NOUGHT - CAN'T HAPPEN.\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         SLR   R1,R1\n         LA    R6,2              INITIALIZE TABLE LENGTH ACCUMULATOR.\nAPFSIZLP IC    R1,0(,R5)         GET LENGTH OF ENTRY.\n         C     R4,APFDELNO       IS THIS THE ENTRY TO REMOVE?\n         BE    DELSIZOK          YES, DO NOT ADD THIS ENTRY'S LENGTH.\n         LA    R6,1(R1,R6)       NO, ACCUMULATE TABLE LENGTH.\nDELSIZOK LA    R5,1(R1,R5)       POINT PASSED THIS ENTRY.\n         BCT   R4,APFSIZLP       GET NEXT ENTRY.\n         LA    R0,7+1+40(,R6)    PREPARE FOR NEW TABLE GETMAIN.\n         SRL   R0,3              ENSURE DOUBLEWORD BOUNDARY.\n         SLL   R0,3\n         BAS   R14,LGETABLE      ACQUIRE STORAGE FOR THE NEW TABLE.\n         LA    R5,2(,R3)         POINT TO FIRST ENTRY.\n         LA    R6,2+40(,R1)      POINT TO FIRST NEW ENTRY.\n         SLR   R4,R4\n         ICM   R4,B'0001',1(R3)  GET NUMBER OF AUTHORIZED LIBRARIES.\n         SLR   R15,R15\nAPFCPYLP IC    R15,0(,R5)        GET LENGTH OF ENTRY.\n         C     R4,APFDELNO       IS THIS THE ENTRY TO REMOVE?\n         BNE   APFDOCPY          NO, GO COPY THIS ENTRY.\n         MVC   LXPRY67I+40(44),BLANKS   SUPPLY THE DATA SET NAME.\n         LA    R0,7\n         SR    R15,R0            GET DATA SET NAME LENGTH CODE.\n         EX    R15,APFNMCPY      LOAD DATA SET NAME INTO MESSAGE.\n         AR    R15,R0            RESTORE ENTRY LENGTH.\n         MVC   LXPRY67I+88(6),1(R5)   SUPPLY THE VOLUME SERIAL NUMBER.\n         B     APFCPYOK          YES, DO NOT ADD THIS ENTRY'S LENGTH.\nAPFNMCPY MVC   LXPRY67I+40(0),7(R5)             <<< EXECUTED >>>.\nAPFDOCPY EX    R15,APFNTCPY      COPY THE WHOLE ENTRY.\n         LA    R6,1(R15,R6)      POINT PAST THE NEW ENTRY.\nAPFCPYOK LA    R5,1(R15,R5)      POINT PAST THE OLD ENTRY.\n         BCT   R4,APFCPYLP       GET NEXT ENTRY.\n         ICM   R4,B'0011',0(R3)  GET NUMBER OF AUTHORIZED LIBRARIES.\n         BCTR  R4,0              THERE IS ONE LESS NOW.\n         LR    R6,R1             COPY NEW PREFIX ADDRESS.\n         STH   R4,40(,R6)        SAVE NEW ENTRY COUNT.\n         WTO   MF=(E,LXPRY67I)   LOG THIS ALTERATION FOR THE RECORD.\n         B     APFINALE          COMPLETE THE HOUSEKEEPING.\nAPFNTCPY MVC   0(0,R6),0(R5)                    <<< EXECUTED >>>\nLINKCHEK CLI   INCHARS+1,C'L'    LINK LIST UPDATE REQUESTED?\n         BNE   GIVEHLPL          NO.\n*                                OS/390 R2 OR LATER?\n         TM    OSLEVEL+1,CVTOS390_R2\n         BO    GIVEHLPL          YES, NOT SUPPORTED.\n         CLI   INCHARS,C'X'      EXTRA LINK LIST LIBRARY REQUESTED?\n         BNE   LCHECKRL          NO.\n         MVI   LISTFLAG,C'L'     DISPLAY LINKLIST LIBRARIES AFTERWARDS.\n         ENQ   (LMAJORQ,LMINORQ,E,L'LMINORQ,SYSTEM),RET=USE\n         LTR   R15,R15           SOMEONE ELSE ALREADY DOING THIS?\n         BNZ   LENQFAIL          YES, FAIL THE REQUEST.\n         BAS   R14,LLACHECK      CHECK TO SEE IF LLA IS ACTIVE.\n         MVI   ENDDEPTH+1,1      ALLOW PF3/15 TO CANCEL THE REQUEST.\n         MVI   LIBDPRMP,X'C1'    ISSUE PROMPT FOR DATA SET NAME.\n         LA    R0,ALDPRMPL\nLLGETDSN LA    R1,LIBDPRMP\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    LDEQREDO          YES.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    LDEQREDO          YES, ABORT LINK LIST LIBRARY ADDITION.\n         CLI   INBUFF,13         WAS ENTER SELECTED?\n         BNE   LDEQREDO          NO, ABORT LINK LIST LIBRARY ADDITION.\n         LH    R1,TGETLEN        GET THE LENGTH OF INPUT DATA STREAM.\n         CHI   R1,50             TOO LONG?\n         BH    LLDINVLD          YES, INVALID INPUT.\n         CLI   INCHARS,C' '      BLANK OR NULL INPUT?\n         BNH   LDEQREDO          YES, ABORT LINK LIST LIBRARY ADDITION.\n         CLI   INCHARS,C'.'      STARTING WITH A PERIOD?\n         BE    LLDINVLD          YES, INVALID.\n         CLI   INCHARS,C'0'      STARTING WITH A NUMERIC CHARACTER?\n         BNL   LLDINVLD          YES, INVALID.\n         LA    R9,43             NO, GET MAXIMUM LENGTH CODE OF DSNAME.\n         LA    R1,INCHARS+43     POINT TO LAST POSSIBLE DSNAME CHAR.\nLALDLOOP CLI   0(R1),C' '        TRAILING BLANK?\n         BNE   GOTLDLEN          NO, FOUND THE END OF DATA SET NAME.\n         BCTR  R1,0              YES, BACK UP A BYTE.\n         BCT   R9,LALDLOOP\nGOTLDLEN CLI   0(R1),C'.'        ENDING IN A PERIOD?\n         BE    LLDINVLD          YES, INVALID.\n         MVI   LAXTRTTB+C'.',X'00'   PERIODS ARE VALID.\n         EX    R9,LAXTRT         VALID DATA SET NAME?\n         BZ    LALDOKAY          HOPE SO.\nLLDINVLD MVI   LIBDPRMP,X'C5'    NO, REISSUE PROMPT WITH BELL.\n         LA    R0,ALDERRLN\n         B     LLGETDSN\nLALDOKAY MVC   DSNAMLA,INCHARS   SUPPLY DATA SET NAME.\n         MVC   RTDDNLA,BLANKS    CLEAR DATA DEFINTION NAME.\n         LA    R1,LINKALOC       POINT TO DYNALLOC PARAMETER LIST.\n         DYNALLOC                ALLOCATE THE DATA SET.\n         LTR   R15,R15           WAS ALLOCATION SUCCESSFUL?\n         BZ    LLUSELIB          YES, PROCESS IT.\n         STC   R15,WORK          STORE THE RETURN CODE.\n         UNPK  LAMSGTXT+13(3),WORK(2)  DISPLAY DYNALLOC RETURN AND\n         TR    LAMSGTXT+13(2),HEX-C'0' ERROR AND INFORMATION CODES.\n         MVI   LAMSGTXT+15,C' '\n         UNPK  LAMSGTXT+17(5),ERRORLA(3)\n         TR    LAMSGTXT+17(4),HEX-C'0'\n         MVI   LAMSGTXT+21,C' '\n         UNPK  LAMSGTXT+23(5),INFOLA(3)\n         TR    LAMSGTXT+23(4),HEX-C'0'\n         MVI   LAMSGTXT+27,C' '\n         LA    R1,LAMSG          TELL THE USER THAT THE LINK LIST\n         LA    R0,LAMSGLEN-1     LIBRARY CANDIDATE COULD NOT BE\n         B     MSGSCRNL          ALLOCATED.\nLLUSELIB MVC   DDNAMLF,RTDDNLA   REMEMBER FILE TO BE FREED LATER.\n         SLR   R0,R0             CLEAR FOR INSERTS.\n         L     R5,PSATOLD        GET POINTER TO CURRENT TCB.\n         L     R5,12(0,R5)       POINT TO TIOT.\n         LA    R5,24(0,R5)       POINT TO TIOELNGH.\nLLDDSCAN CLC   4(8,R5),RTDDNLA\n         BE    HAVELLDD          FILE EXISTS SO GO AND USE IT.\n         IC    R0,0(0,R5)        GET TIOT ENTRY LENGTH.\n         ALR   R5,R0             POINT TO NEXT TIOT ENTRY.\n         CLI   0(R5),0           ZERO LENGTH ENTRY?\n         BNE   LLDDSCAN          NO, CHECK OUT THIS ENTRY.\n         DC    H'193'            ABEND S0C1 SHOULD NOT HAPPEN.\nHAVELLDD MVC   LLUCBAD+1(3),17(R5) GET UCB ADDRESS OF \"NEW\" LIBRARY.\n         LA    R1,LINKFREE       POINT TO DYNALLOC PARAMETER LIST.\n         DYNALLOC                FREE THE DATA SET.\n         LA    R15,VTOCNAME      POINT TO THE DATA SET NAME OF VTOC.\n         L     R1,LLUCBAD        POINT TO THE UCB.\n         LA    R0,28(,R1)        POINT TO THE VOLUME SERIAL NUMBER.\n         LA    R1,SECWORKA       POINT TO DSCB1 RETRIEVAL AREA.\n         STM   R15,R1,LOBTSRCH+4 SAVE IN OBTAIN PARAMETER LIST.\n         OBTAIN LOBTSRCH         OBTAIN FORMAT-4 DSCB.\n         LTR   R15,R15           DID IT WORK?\n         BNZ   LBADLIB           NO, DATA SET NOT SUPPORTED.\n         MVC   LCYLTRKS,SECWORKA+20  SAVE TRACKS PER CYLINDER.\n         LA    R15,DSNAMLA       POINT TO THE DATA SET NAME.\n         MVC   LXPRY68I+44(44),0(R15)  SUPPLY THE DATA SET NAME.\n         L     R1,LLUCBAD        POINT TO THE UCB.\n         LA    R0,28(,R1)        POINT TO THE VOLUME SERIAL NUMBER.\n         LA    R1,SECWORKA       POINT TO DSCB1 RETRIEVAL AREA.\n         STM   R15,R1,LOBTSRCH+4 SAVE IN OBTAIN PARAMETER LIST.\n         OBTAIN LOBTSRCH         OBTAIN FORMAT-1 DSCB.\n         LTR   R15,R15           DID IT WORK?\n         BNZ   LBADLIB           NO, DATA SET NOT SUPPORTED.\n         TM    SECWORKA-44+82,2  DSORG=PO?\n         BNO   LBADLIB           NO, DATA SET NOT SUPPORTED.\n         CLI   SECWORKA-44+59,0  ANY EXTENTS?\n         BE    LBADLIB           NO, DATA SET NOT SUPPORTED.\n         CLI   SECWORKA-44+59,16 MORE THAN 16 EXTENTS?\n         BH    LBADLIB           YES, DATA SET NOT SUPPORTED.\n         CLI   SECWORKA-44+59,4  MORE THAN 3 EXTENTS?\n         BL    LDSCB3OK          NO, FORMAT-3 DSCB TO FETCH.\n         LA    R15,SECWORKA-44+135 POINT TO THE FORMAT-3 CCHHR.\n         L     R1,LLUCBAD        POINT TO THE UCB.\n         LA    R0,28(,R1)        POINT TO THE VOLUME SERIAL NUMBER.\n         LA    R1,SECWORKA+100   POINT TO DSCB3 RETRIEVAL AREA.\n         STM   R15,R1,LOBTSEEK+4 SAVE IN OBTAIN PARAMETER LIST.\n         OBTAIN LOBTSEEK         OBTAIN FORMAT-3 DSCB.\n         LTR   R15,R15           DID IT WORK?\n         BNZ   LBADLIB           NO, DATA SET NOT SUPPORTED.\nLDSCB3OK L     R3,CVTPTR(,0)     POINT TO CVT.\n         USING CVT,R3\n         L     R3,CVTLINK        POINT TO THE LINK LIST DCB.\n         DROP  R3                CVT.\n         USING IHADCB,R3\n         ICM   R3,7,DCBDEBA      POINT TO THE LINK LIST DEB.\n         DROP  R3                DCB.\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         USING DEBBASIC,R3\n         SLR   R1,R1\n         IC    R1,DEBNMEXT       GET THE EXTENT COUNT.\n         LR    R0,R1             COPY IT.\n         IC    R1,SECWORKA-44+59 GET THE COUNT OF EXTENTS TO BE ADDED.\n         AR    R0,R1             GET THE NEW TOTAL EXTENT COUNT.\n         CHI   R0,255            MORE THAN 255 EXTENTS?\n         BH    LBADPROB          YES, CAN'T DO IT.\n         SLL   R0,4              MULTIPLY BY SIXTEEN.\n         IC    R1,DEBAMLNG       GET OLD BPAM SECTION LENGTH.\n         AR    R1,R0             ACCUMULATE IT.\n         LA    R0,40+32+7+1(,R1) COUNT PREFIX, DEB BASE AND ROUND.\n         SRL   R0,3\n         SLL   R0,3\n         BAS   R14,LGETABLE      ACQUIRE STORAGE FOR THE NEW TABLE.\n         MVC   0(8,R1),=CL8'LKLSTALT'    CORRECT THE PREFIX ID.\n         LA    R6,40(,R1)        POINT TO NEW DEB.\n         ST    R6,WORK2          SAVE NEW DEB BASE ADDRESS.\n         MVC   0(32,R6),DEBBASIC COPY DEB BASE.\n         SLR   R0,R0\n         IC    R0,DEBNMEXT       GET OLD DEB EXTENT COUNT.\n         DROP  R3                DEBBASIC.\n         LA    R3,32(,R3)        POINT TO OLD DEB EXTENT LIST.\n         LA    R6,32(,R6)        POINT TO NEW DEB EXTENT LIST.\nLLXTNTLP MVC   0(16,R6),0(R3)    COPY ONE EXTENT.\n         LA    R3,16(,R3)        POINT TO NEXT EXTENT.\n         LA    R6,16(,R6)        POINT TO NEXT EXTENT.\n         BCT   R0,LLXTNTLP       PROCESS NEXT EXTENT.\n         IC    R0,SECWORKA-44+59 GET THE COUNT OF EXTENTS TO BE ADDED.\n         LA    R4,SECWORKA-44+105    POINT TO DS1EXT1.\n         SLR   R15,R15           CLEAR EXTENT COUNTER.\nLLNEWXLP LA    R15,1(,R15)       INCREMENT EXTENT COUNTER.\n         CHI   R15,4             UP TO EXTENT NUMBER 4?\n         BE    LUSEFMT3          YES.\n         CHI   R15,8             UP TO EXTENT NUMBER 8?\n         BNE   LEXTOKAY          NO.\n         LA    R4,SECWORKA+145   POINT TO DATA PART PAST ID OF DSCB-3.\n         B     LEXTOKAY\nLUSEFMT3 LA    R4,SECWORKA+104   POINT TO KEY PART PAST ID OF DSCB-3.\nLEXTOKAY MVC   0(4,R6),LLUCBAD   SUPPLY UCB ADDRESS.\n         TM    0(R4),X'80'       ALLOCATED IN CYLINDERS?\n         BO    LFILEMSK          YES, LEAVE FILE MASK AS ZERO.\n         MVI   0(R6),X'18'       NO, UPDATE FILE MASK.\nLFILEMSK STCM  R0,12,4(R6)       ZERO OUT BIN NUMBER.\n         MVC   6(8,R6),2(R4)     COPY START CCHH AND END CCHH.\n         LH    R14,10(,R6)       GET END CC.\n         SH    R14,6(,R6)        SUBTRACT START CC.\n         SLL   R14,16            ENSURE CYLINDER COUNT IS\n         SRL   R14,16            NON-NEGATIVE.\n         MH    R14,LCYLTRKS      CONVERT CYLINDERS TO TRACKS.\n         AH    R14,12(,R6)       ADD END HH.\n         SH    R14,8(,R6)        SUBTRACT START HH.\n         LA    R14,1(,R14)       COUNT FIRST TRACK.\n         STH   R14,14(,R6)       SAVE EXTENT TRACK COUNT.\n         LA    R4,10(,R4)        POINT TO NEXT EXTENT IN DSCB.\n         LA    R6,16(,R6)        POINT TO NEXT EXTENT IN DEB.\n         BCT   R0,LLNEWXLP       PROCESS NEXT EXTENT.\n         IC    R15,4+40(,R1)     GET BPAM SECTION LENGTH.\n         BCTR  R15,0             DECREMENT FOR EXECUTE.\n         EX    R15,LCOPYDIR      COPY DIRECTORY EXTENT NUMBERS.\n         LA    R6,1(R15,R6)      POINT PAST DATA JUST LOADED.\n         MVC   0(1,R6),16+40(R1) OLD EXTENTS IS NEW DIRECTORY EXTENT.\n         LA    R15,1+1(,R15)     GET NEW BPAM SECTION LENGTH.\n         STC   R15,4+40(,R1)     SAVE DATA SET COUNT MINUS ONE.\n         IC    R15,16+40(,R1)    GET OLD EXTENT COUNT.\n         IC    R0,SECWORKA-44+59 GET EXTENT COUNT OF NEW DATA SET.\n         AR    R15,R0            GET NEW EXTENT COUNT.\n         STC   R15,16+40(,R1)    UPDATE EXTENT COUNT IN NEW DEB.\n*\n         L     R3,CVTPTR(,0)     POINT TO CVT.\n         USING CVT,R3\n         L     R3,CVTLLTA        POINT TO THE LINK LIST TABLE.\n         DROP  R3\n         L     R4,4(,R3)         GET CURRENT LINK LIST DATA SET COUNT.\n         LA    R4,1(,R4)         INCREMENT FOR NEW DATA SET.\n         MHI   R4,46             GET TABLE SIZE.\n         LA    R0,40+8+7(,R4)    ALLOW FOR PREFIX AND ROUND.\n         SRL   R0,3\n         SLL   R0,3\n         BAS   R14,LGETABLE      ACQUIRE STORAGE FOR THE NEW TABLE.\n         MVC   0(8,R1),=CL8'LKLSTALT'    CORRECT THE PREFIX ID.\n         LA    R4,40(,R1)        POINT PAST NEW PREFIX.\n         ST    R4,WORK2+4        SAVE NEW TABLE ADDRESS.\n         MVC   0(8,R4),0(R3)     COPY LIST HEADER ('LLT ') AND COUNT.\n         L     R0,4(,R3)         GET OLD LIST ENTRY COUNT.\nLLLTCOPY MVC   8(45,R4),8(R3)    COPY ENTRY TO NEW LIST.\n         LA    R3,45(,R3)        ADJUST OLD POINTER.\n         LA    R4,45(,R4)        ADJUST NEW POINTER.\n         BCT   R0,LLLTCOPY       PROCESS NEXT ENTRY.\n         MVC   9(44,R4),DSNAMLA  APPEND NEW DATA SET NAME.\n         LA    R15,8+44(,R4)     POINT TO LAST BYTE OF DATA SET NAME.\n         LA    R0,44             GET MAXIMUM DATA SET NAME LENGTH.\nLLBLNKLP CLI   0(R15),C' '       TRAILING BLANK AFTER DATA SET NAME?\n         BNE   LLDSNLEN          NO, NOW KNOW DATA SET NAME LENGTH.\n         BCTR  R15,0             YES, BACK UP ONE CHARACTER.\n         BCT   R0,LLBLNKLP       CHECK FOR ANOTHER TRAILING BLANK.\nLLDSNLEN STC   R0,8(,R4)         SUPPLY LENGTH OF NEW DATA SET NAME.\n         LA    R4,45(,R4)        ADJUST NEW POINTER.\n         L     R15,4+40(,R1)     GET OLD LIST ENTRY COUNT.\n         BCTR  R15,0             DECREMENT FOR EXECUTE.\n         EX    R15,LLAPFLGS      COPY APF AUTHORIZATION FLAGS.\n         LA    R4,9(R15,R4)      POINT PAST LAST COPIED FLAG.\n         MVI   0(R4),X'80'       APF AUTHORIZE NEW ENTRY.\n         LA    R15,2(,R15)       GET NEW LIST ENTRY COUNT.\n         ST    R15,4+40(,R1)     SAVE IN NEW TABLE.\n         WTO   MF=(E,LXPRY68I)   LOG THIS ALTERATION FOR THE RECORD.\n         L     R3,CVTPTR(,0)     POINT TO CVT.\n         USING CVT,R3\n         L     R4,CVTLINK        POINT TO THE LINK LIST DCB.\n         LM    R5,R6,WORK2       GET THE NEW ADDRESSES.\n         USING IHADCB,R4\n         STCM  R5,7,DCBDEBA      POINT TO THE NEW LINK LIST DEB.\n         DROP  R4                IHADCB.\n         ST    R6,CVTLLTA        POINT TO THE NEW LINK LIST TABLE.\n         LA    R0,40             GET THE PREFIX LENGTH.\n         SR    R5,R0             POINT TO THE CURRENT PREFIX.\n         L     R1,36(,R5)        POINT TO DE-ACTIVATED DEB.\n         SR    R1,R0             POINT TO DE-ACTIVATED DEB'S PREFIX.\n         CLC   =CL8'LKLSTALT',0(R1)    VALID PREFIX ID?\n         BNE   LLTOLDCH          NO, GO CHECK OLD LLT.\n         MVC   36(4,R5),36(R1)   POINT OLD POINTER TO IPL-TIME DEB.\n         A     R0,32(,R1)        ADD OLD TABLE SIZE TO PREFIX SIZE.\n         FREEMAIN RU,LV=(0),A=(1),SP=245       FREE THE OLD TABLE.\n         LA    R0,40             GET THE PREFIX LENGTH.\nLLTOLDCH SR    R6,R0             POINT TO THE CURRENT PREFIX.\n         L     R1,36(,R6)        POINT TO DE-ACTIVATED LLT.\n         LR    R4,R1             COPY THIS ADDRESS.\n         SRL   R4,12\n         SLL   R4,12             POINT TO START OF PAGE.\n         CR    R4,R1             LLT ON PAGE BOUNDARY?\n         BE    LXAALLDN          YES, PROBABLY ALTERED BY TMON FOR MVS.\n         SR    R1,R0             POINT TO DE-ACTIVATED LLT'S PREFIX.\n         CLC   =CL8'LKLSTALT',0(R1)    VALID PREFIX ID?\n         BNE   LXAALLDN          NO, GO DISPLAY NEW LIST.\n         MVC   36(4,R6),36(R1)   POINT OLD POINTER TO IPL-TIME LLT.\n         B     LFREEOLD          GO FREE THE DE-ACTIVATED LLT.\nLBADPROB MODESET MF=(E,MDSETN0)  RETURN TO PROBLEM KEY.\nLBADLIB  LA    R1,LKBADMSG       SHOW A COVER-ALL MESSAGE\n         LA    R0,L'LKBADMSG     IN LINE MODE.\n         TPUT  (1),(0),R\n         B     LDEQREDO\nLCHECKRL CLI   INCHARS,C'R'      RESET APF LIBRARY LIST REQUESTED?\n         BNE   GIVEHLPL          NO.\n         MVI   LISTFLAG,C'L'     DISPLAY LINKLIST LIBRARIES AFTERWARDS.\n         ENQ   (LMAJORQ,LMINORQ,E,L'LMINORQ,SYSTEM),RET=USE\n         LTR   R15,R15           SOMEONE ELSE ALREADY DOING THIS?\n         BNZ   LENQFAIL          YES, FAIL THE REQUEST.\n         BAS   R14,LLACHECK      CHECK TO SEE IF LLA IS ACTIVE.\n         MVI   ENDDEPTH+1,1      ALLOW PF3/15 TO CANCEL THE REQUEST.\n         LA    R0,LCONMSGL\n         LA    R1,LCONFIRM\n         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   ENDDEPTH+1,0      REQUEST TO BE CANCELLED?\n         BE    LDEQREDO          YES.\n         CLI   INBUFF,13         WAS ENTER SELECTED?\n         BNE   LDEQREDO          NO, ABORT LINK LIST RESET.\n         LA    R1,ARMSG          PREPARE TO SAY THAT THIS IS ALREADY\n         LA    R0,ARMSGLEN-1     THE IPL-TIME LINK LIST.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         L     R6,CVTLINK        POINT TO THE LINK LIST DCB.\n         USING IHADCB,R6\n         SLR   R7,R7\n         ICM   R7,7,DCBDEBA      POINT TO THE LINK LIST DEB.\n         L     R4,CVTLLTA        POINT TO THE LINK LIST TABLE.\n         LR    R5,R4\n         SRL   R5,12\n         SLL   R5,12\n         CR    R5,R4             IS TABLE ORIGIN ON PAGE BOUNDARY?\n         BE    MSGSCRNL          YES, PROBABLY ALREADY ALTERED BY TMON.\n         LA    R5,40             GET THE PREFIX LENGTH.\n         SR    R7,R5             POINT TO THE PREFIX, IF ANY.\n         CLC   =CL8'LKLSTALT',0(R7)    VALID PREFIX ID?\n         BNE   MSGSCRNL          NO, SHOW MESSAGE.\n         SR    R4,R5             POINT TO THE PREFIX, IF ANY.\n         CLC   =CL8'LKLSTALT',0(R4)    VALID PREFIX ID?\n         BNE   MSGSCRNL          NO, SHOW MESSAGE.\n         L     R15,PSATOLD       POINT TO THE CURRENT TCB.\n         L     R15,12(,R15)      POINT TO THE TIOT.\n         MVC   LXPRY69I+12(8),0(R15)   SUPPLY THE TSO USERID.\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         WTO   MF=(E,LXPRY69I)   LOG THIS ALTERATION FOR THE RECORD.\n         L     R0,36(,R7)        LOAD ADDRESS OF IPL-TIME TABLE.\n         L     R1,36(,R4)        LOAD ADDRESS OF IPL-TIME TABLE.\n         STCM  R0,7,DCBDEBA      RE-ACTIVATE IPL-TIME TABLE.\n         DROP  R6                IHADCB.\n         ST    R1,CVTLLTA        RE-ACTIVATE IPL-TIME TABLE.\n         LR    R1,R7             POINT TO DE-ACTIVATED TABLE'S PREFIX.\n         LR    R0,R5             COPY THE LENGTH OF THE PREFIX.\n         A     R0,32(,R1)        ADD OLD TABLE SIZE TO PREFIX SIZE.\n         FREEMAIN RU,LV=(0),A=(1),SP=245       FREE THE OLD TABLE.\n         LR    R1,R4             POINT TO DE-ACTIVATED TABLE'S PREFIX.\n         LR    R0,R5             COPY THE LENGTH OF THE PREFIX.\n         B     LFREEOLD          GO FREE THE DE-ACTIVATED TABLE.\n         DROP  R3                CVT.\nGIVEHLPL MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNL          GO DISPLAY HELP PANEL.\n         SPACE\nLADDLINE TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNL          IF YES, THEN FORGET SUMMARY LINE.\n         BR    R14\n         DROP  R15               WNDWMNGR.\n         SPACE\nLGETABLE DS    0H                GET A TABLE IN SQA.\n         LR    R8,R0             SAVE REQUEST SIZE FOR LATER.\n         GETMAIN RC,LV=(0),SP=245,LOC=(BELOW,ANY)\n         LTR   R15,R15           GETMAIN OK?\n         BNZ   LSQAFULL          NO, SEEMS LIKE SQA IS FULL.\n         LA    R6,0(,R1)         COPY THE NEW PREFIX ADDRESS.\n         L     R15,PSATOLD       POINT TO THE CURRENT TCB.\n         L     R15,12(,R15)      POINT TO THE TIOT.\n         MVC   LXPRY65I+12(8),0(R15)   SUPPLY THE TSO USERID.\n         MVC   LXPRY67I+12(8),0(R15)   SUPPLY THE TSO USERID.\n         MVC   LXPRY68I+12(8),0(R15)   SUPPLY THE TSO USERID.\n         MVC   0(8,R6),=CL8'APFALT  '  SUPPLY THE PREFIX ID.\n         MVC   8(8,R6),0(R15)          SUPPLY THE TSO USERID.\n         TIME  DEC                     GET THE CURRENT DATE AND TIME.\n         STM   R0,R1,WORK\n         UNPK  16(3,R6),WORK(2)        SHOW THE HOURS.\n         MVI   18(R6),C':'\n         UNPK  19(3,R6),WORK+1(2)      SHOW THE MINUTES.\n         MVI   21(R6),C':'\n         UNPK  22(3,R6),WORK+2(2)      SHOW THE SECONDS.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         LR    R0,R14            SAVE RETURN ADDRESS.\n         BASR  R14,R7            GET CURRENT YY/MM/DD.\n         MVC   24(8,R6),WORK     PUT IT INTO PREFIX.\n         LR    R14,R0            RESTORE RETURN ADDRESS.\n         LA    R0,40             GET THE SIZE OF PREFIX.\n         SR    R8,R0             GET THE SIZE OF THIS NEW TABLE.\n         ST    R8,32(,R6)        STORE THIS IN THE PREFIX.\n         ST    R3,36(,R6)        STORE THE OLD TABLE'S ADDRESS.\n         LR    R1,R6             COPY THE NEW PREFIX ADDRESS.\n         BR    R14               RETURN TO CALLER.\nLSQAFULL L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,SFMSG          PLACE \"SQA FULL\" MESSAGE IN\n         LA    R0,SFMSGLEN-1     DATA STREAM SUFFIX.\n         ST    R1,WINSUFIX\n         ST    R0,WINSUFLN\n         DROP  R15               WNDWMNGR.\n         MVI   HOME,X'C5'        SOUND THE BELL.\n         B     LXAALLDN          MAKE A NEW SCREEN IMAGE.\n         SPACE\nLLACHECK DS    0H                CHECK IF LLA IS ACTIVE.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTLLCB        POINT TO THE LLCB.\n         DROP  R1                CVT.\n         TM    5(R1),X'80'       IS LLA ACTIVE?\n         BZR   R14               NO, RETURN SUCCESSFULLY.\n         LA    R1,LLMSG          PLACE \"LLA ACTIVE\" MESSAGE IN\n         LA    R0,LLMSGLEN-1     DATA STREAM SUFFIX.\n         B     MSGSCRNL          MAKE A NEW SCREEN IMAGE.\n         SPACE\nAPFNMLOD MVC   34(0,R2),7(R5)                   <<< EXECUTED >>>\nAPFDSNLD MVC   7(0,R14),INCHARS                 <<< EXECUTED >>>\nLAXTRT   TRT   INCHARS(0),LAXTRTTB              <<< EXECUTED >>>\nLLAPFLGS MVC   8(0,R4),8(R3)                    <<< EXECUTED >>>\nLCOPYDIR MVC   0(0,R6),0(R3)                    <<< EXECUTED >>>\n         SPACE\n         DROP  R11,R10           LISTLIBS.\n         TITLE 'SYSTEM LIBRARY LISTER - VARIABLES AND CONSTANTS'\nLLUCBAD  DC    A(0)              NEW LINK LIST LIBRARY UCB ADDRESS.\nLMAJORQ  DC    CL8'IMPMAJOR'\nLMINORQ  DC    C'IM UPDATING CONTROL BLOCKS'\nLCYLTRKS DC    H'15'             NUMBER OF TRACKS PER CYLINDER.\nAPFDELNO DC    F'0'              \"INVERSE\" ENTRY NUMBER TO REMOVE.\nAPFLSIZE DC    F'4096'           CSVAPF WORKAREA SIZE.\nAPFLADDR DC    A(0)              CSVAPF WORKAREA ADDRESS.\nVTOCNAME DC    44X'04'\nLINKALOC DYNALC SUFFIX=LA,DSNAME=LINK.LIST,RETDD=YES,STATUS=SHR\nLINKFREE DYNALC SUFFIX=LF,DEALLOC=YES,DDNAME=TEMPFILE\nLOBTSRCH CAMLST SEARCH,2,3,4\nLOBTSEEK CAMLST SEEK,2,3,4\nLXPRY65I WTO   'PRY605I TSOUSER ADDED APF LIBRARY 11111111.22222222.333+\n               33333.44444444.55555555 ON VOLSER',ROUTCDE=(9),MF=L\nLXPRY66I WTO   'PRY606I TSOUSER RESET APF LIBRARY LIST TO IPL-TIME SPEC+\n               IFICATION',ROUTCDE=(9),MF=L\nLXPRY67I WTO   'PRY607I TSOUSER REMOVED APF LIBRARY 11111111.22222222.3+\n               3333333.44444444.55555555 ON VOLSER',ROUTCDE=(9),MF=L\nLXPRY68I WTO   'PRY608I TSOUSER ADDED LINK LIST LIBRARY 11111111.222222+\n               22.33333333.44444444.55555555',ROUTCDE=(9),MF=L\nLXPRY69I WTO   'PRY609I TSOUSER RESET LINK LIST LIBRARIES TO IPL-TIME S+\n               PECIFICATION',ROUTCDE=(9),MF=L\nLISTFLAG DC    C'?'             LIBRARY LIST DISPLAY TYPE.\nAPFLTYPE DC    X'FF'            APF LIBRARY LIST LEVEL TYPE.\nHEADAPFL DC    CL79'          VOLUME         AUTHORIZED LIBRARY NAME   +\n                       (### ENTRIES)       '\nHEADLNKL DC    CL79'          VOLUME   APF   LINK LIST LIBRARY NAME    +\n                       (### ENTRIES)       '\nHEADPAKL DC    CL79'                         LINK PACK AREA LIBRARY NAM+\n               E       (### ENTRIES)       '\nCSVBDMSG DC    CL79'        CSVAPF FAILURE  -  RETCODE=00000000  REASON+\n               -CODE=00000000              '\nLKBADMSG DC    C'OBTAIN FAILURE OR BAD EXTENT COUNT OR NON-PDS DATA SET+\n                - REQUEST IGNORED'\n         SPACE\nAPFVPRMP DC    X'C11140403C404000'\n         DCS   SBA,(5,3)\n         DC    X'&LOW'\n         DC    C'ENTER THE VOLUME SERIAL NUMBER OF THE APF LIBRARY TO '\n         DC    C'BE ADDED'\n         DCS   SBA,(10,3)\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nALVOLSER DC    XL6'00'\n         DC    X'2841001BF0C22842F5'\n         DC    C'  (SUPPLY NULL OR BLANK INPUT OR USE',X'&HIGH'\n         DC    C'PF3/15',X'&LOW',C'TO CANCEL REQUEST.)'\nALVPRMPL EQU   *-APFVPRMP\n         DCS   SBA,(15,3)\n         DC    X'&HIGH'\n         DC    C'REENTER - INVALID VOLUME SERIAL NUMBER SPECIFIED'\nALVERRLN EQU   *-APFVPRMP\n         SPACE\nLIBDPRMP DC    X'C11140403C404000'\n         DCS   SBA,(5,3)\n         DC    X'&LOW'\n         DC    C'ENTER THE DATA SET NAME OF THE LIBRARY TO '\n         DC    C'BE ADDED'\n         DCS   SBA,(10,3)\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nALDSNAME DC    XL44'00'\n         DC    X'2841001BF0C22842F5'\n         DCS   SBA,(12,4)\n         DC    C'(USE',X'&HIGH',C'PF3/15',X'&LOW'\n         DC    C'TO CANCEL REQUEST.)'\nALDPRMPL EQU   *-LIBDPRMP\n         DCS   SBA,(15,3)\n         DC    X'&HIGH'\n         DC    C'REENTER - INVALID DATA SET NAME SPECIFIED'\nALDERRLN EQU   *-LIBDPRMP\n         SPACE\nAPFRPRMP DC    X'C51140403C40400013'\n         DCS   SBA,(3,3)\n         DC    X'&LOW',C'SELECT'\n         DC    X'&HIGH',C'ENTER',X'&LOW',C'TO CONFIRM THE REMOVAL OF'\n         DCS   SBA,(6,3)\n         DC    X'1DF82842F7'\nARDSNAME DC    CL44' '\n         DCS   SBA,(8,3)\n         DC    X'&LOW',C'ON VOLUME',X'1DF82842F7'\nARVOLUME DC    CL6' '\n         DC    CL1' '\nARSMSFLG DC    CL5' '\n         DCS   SBA,(11,3)\n         DC    X'&LOW',C'FROM THE APF AUTHORIZED LIBRARY LIST.'\n         DCS   SBA,(16,4)\n         DC    C'SELECT',X'&HIGH',C'PF3/15',X'&LOW'\n         DC    C'TO CANCEL THE REMOVAL REQUEST.'\nARDPRMPL EQU   *-APFRPRMP\n         SPACE\nLCONFIRM DC    X'C51140403C40400013'\n         DCS   SBA,(6,1)\n         DC    X'&LOW',C'SELECT'\n         DC    X'&HIGH',C'ENTER',X'&LOW'\n         DC    C'TO CONFIRM THE REINSTATEMENT OF THE'\n         DC    X'&MED',C'IPL-TIME',X'&LOW',C'VERSION OF THIS LIST.'\n         DCS   SBA,(10,2)\n         DC    C'SELECT',X'&HIGH',C'PF3/15',X'&LOW'\n         DC    C'TO CANCEL THIS REQUEST.'\nLCONMSGL EQU   *-LCONFIRM\n         SPACE\nSFMSG    DC    X'115DD81DF82842F22841F2'     \"SQA FULL\" MESSAGE.\n         DC    CL39'      NO ROOM IN SQA FOR NEW LIST      '\nSFMSGLEN EQU   *-SFMSG\n         SPACE\nTFMSG    DC    X'115DD81DF82842F22841F2'     \"TABLE FULL\" MESSAGE.\n         DC    CL39'     TABLE HAS MAXIMUM ENTRY COUNT     '\nTFMSGLEN EQU   *-TFMSG\n         SPACE\nARMSG    DC    X'115DD81DF82842F62841F2'     \"ALREADY RESET\" MESSAGE.\n         DC    CL39'  IPL-TIME LIBRARY LIST ALEADY ACTIVE  '\nARMSGLEN EQU   *-ARMSG\n         SPACE\nWLMSG    DC    X'115DD81DF82842F22841F2'     \"WRONG LINE\" MESSAGE.\n         DC    CL39'   CURSOR NOT ON LINE OF APF LIBRARY   '\nWLMSGLEN EQU   *-WLMSG\n         SPACE\nLAMSG    DC    X'115DD81DF82842F22841F2'     \"LIBRARY ALLOC\" MESSAGE.\nLAMSGTXT DC    CL39' DYNALLOC RC=##  ####  ####  (ALL HEX) '\nLAMSGLEN EQU   *-LAMSG\n         SPACE\nLLMSG    DC    X'115DD81DF82842F22841F2'     \"LLA ACTIVE\" MESSAGE.\n         DC    CL39'  LLA IS ACTIVE - STOP LLA THEN RETRY  '\nLLMSGLEN EQU   *-LLMSG\n         SPACE\nEFMSG    DC    X'115DD81DF82842F22841F2'     \"ENQUEUE FAILURE\" MESSAGE.\n         DC    CL39' UPDATE ALREADY ACTIVE BY ANOTHER USER '\nEFMSGLEN EQU   *-EFMSG\n         SPACE\nCFMSG    DC    X'115DD81DF82842F22841F2'     \"CSV FAILURE\" MESSAGE.\n         DC    CL39'    DYNAMIC APF FORMAT NOT SUPPORTED   '\nCFMSGLEN EQU   *-CFMSG\n         SPACE\nCTMSG    DC    X'115DD81DF82842F22841F2'     \"CSV TRIED\" MESSAGE.\nCTMSGTXT DC    CL39' CSVAPF RC=XX-XXXXXXXX  ALREADY ADDED  '\nCTMSGLEN EQU   *-CTMSG\n         SPACE\nLAXTRTTB DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF00FFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF0000FFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    X'FF000000000000000000FFFFFFFFFFFF'\n         DC    X'FF000000000000000000FFFFFFFFFFFF'\n         DC    X'FFFF0000000000000000FFFFFFFFFFFF'\n         DC    X'00000000000000000000FFFFFFFFFFFF'\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAM": {"ttr": 17929, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"4\\\\\\x001\\x00\\x94\\x05\\x9f\\x01\\x15\\x08\\x9f\\x172\\x0cP\\x02\\xc6\\n'\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@\"", "ispf": {"version": "52.92", "flags": 0, "createdate": "1994-02-28T00:00:00", "modifydate": "2015-03-30T17:32:31", "lines": 3152, "newlines": 710, "modlines": 2599, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1986,1994,2012  PRYCROFT SIX PTY LTD\n         TITLE 'COUPLING FACILITY MONITOR DISPLAY LINE MAPPING'\nMCLINE1  DSECT\n         DS    XL(L'LOWX)\nMCL1CFNM DS    CL8\n         DS    CL1\nMCL1CFST DS    CL9\n         DS    CL1\nMCL1PLCY DS    CL8\n         DS    CL2\nMCL1BAR1 DS    CL1\n         DS    CL1\nMCL1SYST DS    CL8\n         DS    CL1\nMCL1BAR2 DS    CL1\n         DS    CL3\nMCL1STRC DS    CL16\n         DS    CL4\nMCL1STST DS    CL12\n         DS    CL3\n         SPACE\nMCLINE2  DSECT\n         DS    XL(L'LOWX)\nMCL2CFNM DS    CL8\nMCL2SIZE DS    CL23    1234567K 1234567K 100%\n         DS    CL1\nMCL2CNTL DS    CL23    1234567K 1234567K 100%\n         DS    CL1\nMCL2DUMP DS    CL23    1234567K 1234567K 100%\n         SPACE\nMCLINE3  DSECT\n         DS    XL(L'LOWX)\nMCL3CFNM DS    CL8\n         DS    CL1\nMCL3BDIO DS    CL6\n         DS    CL1\nMCL3NTAV DS    CL6\n         DS    CL3\nMCL3SBCH DS    CL4\n         DS    CL2\nMCL3DEVN DS    CL4\n         DS    CL1\nMCL3SCST DS    CL8\nMCL3BUSY DS    CL8\nMCL3PATH DS    CL8\nMCL3UTIL DS    CL8\nMCL3RATE DS    CL9\n         SPACE\nMCLINE4  DSECT\n         DS    XL(L'LOWX)\nMCL4STNM DS    CL16\n         DS    CL2\nMCL4STTY DS    CL5\n         DS    CL3\nMCL4STAL EQU   *,9\nMCL4STNA DS    CL13\n         DS    CL3\nMCL4CFNM DS    CL8\n         DS    CL2\nMCL4SIZE DS    CL8\n         DS    CL2\nMCL4USED DS    CL8\n         DS    CL2\nMCL4FULL DS    CL4\n         DS    CL3\n         SPACE\nMCLINE5  DSECT\n         DS    XL(L'LOWX)\nMCL5CNNM DS    CL16\n         DS    CL4\nMCL5SYSN DS    CL8\n         DS    CL2\nMCL5JOBN DS    CL8\n         DS    CL4\nMCL5CNST DS    CL17\n         TITLE 'SYSPLEX MONITOR DISPLAY LINE MAPPING'\nMSLINE1  DSECT\n         DS    XL(L'LOWX)\nMSL1SYSN DS    CL8\n         DS    CL1\nMSL1STAT DS    CL8\n         DS    CL1\nMSL1DIRN DS    CL3\n         DS    CL2\nMSL1TCLS DS    CL8\n         DS    CL1\nMSL1#PTH DS    CL6\nMSL1#NOP DS    CL8\nMSL1#BSY DS    CL8\nMSL1BFMX DS    CL8\n         DS    CL2\nMSL1BFUS DS    CL8\n         DS    CL2\nMSL1BFPC DS    CL4\n         DS    CL1\n         SPACE\nMSLINE2  DSECT\n         DS    XL(L'LOWX)\nMSL2SYSN DS    CL8\n         DS    CL1\nMSL2DIRN DS    CL3\n         DS    CL2\nMSL2TCLS DS    CL8\n         DS    CL2\nMSL2#BIG DS    CL8\nMSL2#FIT DS    CL8\nMSL2#SML DS    CL8\nMSL2#OVR DS    CL8\n         DS    CL2\nMSL2#TCL DS    CL8\n         DS    CL2\nMSL2#SMX DS    CL8\n         DS    CL1\n         SPACE\nMPLINE1  DSECT\n         DS    XL(L'LOWX)\nMPL1PDEV DS    CL4\n         DS    CL1\nMPL1PSYS DS    CL8\n         DS    CL1\nMPL1STAT DS    CL10\n         DS    CL1\nMPL1DIRN DS    CL3\n         DS    CL1\nMPL1TCLS DS    CL8\n         DS    CL1\nMPL1TDEV DS    CL4\n         DS    CL1\nMPL1TSYS DS    CL8\nMPL1MXMS DS    CL8\nMPL1#USE DS    CL8\n         DS    CL4\nMPL1#IBR DS    CL8\n         SPACE\nMPLINE2  DSECT\n         DS    XL(L'LOWX)\nMPL2PDEV DS    CL4\n         DS    CL1\nMPL2DIRN DS    CL3\n         DS    CL1\nMPL2TDEV DS    CL4\n         DS    CL1\nMPL2TSYS DS    CL8\nMPL2MRET DS    CL8\nMPL2#RET DS    CL8\nMPL2#RST DS    CL8\nMPL2#SIG DS    CL8\nMPL2#ACT DS    CL8\nMPL2#SUS DS    CL8\nMPL2#APP DS    CL8\n         SPACE\nMGLINE1  DSECT\n         DS    XL(L'LOWX)\nMGL1GRPN DS    CL8\n         DS    CL1\nMGL1MEMN DS    CL16\n         DS    CL1\nMGL1STAT DS    CL1\n         DS    CL1\nMGL1SYSN DS    CL8\n         DS    CL1\nMGL1SSLT DS    CL2\n         DS    CL1\nMGL1JJOB DS    CL8\n         DS    CL1\nMGL1TOD  DS    CL13\n         DS    CL1\nMGL1SCNT DS    CL8\nMGL1RCNT DS    CL8\n         SPACE\nMDXLINE  DSECT\n         DS    XL(L'LOWX)\n         DS    CL2\nMDXNAME  DS    CL16\n         DS    CL2\nMDXMODNM DS    CL8\n         DS    CL2\nMDXFLAGS DS    CL3\n         DS    CL1\nMDXENTRY DS    CL8\n         DS    CL2\nMDXLDPNT DS    CL8\n         DS    CL2\nMDXLEN   DS    CL6\n         DS    CL2\nMDXJOB   DS    CL8\n         SPACE\nMCPFLINE DSECT\n         DS    XL(L'LOWX)\n         DS    CL2\nMCPFPREF DS    CL8\n         DS    CL2\nMCPFOWNR DS    CL8\n         DS    CL2\nMCPFSYS  DS    CL8\n         DS    CL2\nMCPFASID DS    CL4\n         DS    CL2\nMCPFSCOP DS    CL8\n         DS    CL2\nMCPFREMV DS    CL8\n         DS    CL2\nMCPFFDSP DS    CL8\n         SPACE\nCPFT     DSECT ,                       COMMAND PREFIX TABLE\nCPFTACRO DS    CL4                     EYECATCHER 'CPFT'\nCPFTVRSN DS    XL1                     VERSION\nCPFTRSV1 DS    CL3                     FREE\nCPFTNUME DS    F                       NUMBER OF ENTRIES\nCPFT1ST  DS    F                       OFFSET FIRST ENTRY\nCPFTLAST DS    F                       OFFSET LAST ENTRY\nCPFTRSV2 DS    CL8                     FREE\n*\nCPFT_ENTRY DSECT ,                     START OF AN ENTRY\nCPFTFLGS DS    X                       FLAGS\nCPFTSCOP EQU   X'80'                   SCOPE\nCPFTFDP0 EQU   X'40'                   FAILDISP\nCPFTFDP1 EQU   X'20'                   FAILDISP\nCPFTREMV EQU   X'10'                   REMOVE\nCPFTRSV3 DS    CL3                     FREE\nCPFTPRFX DS    CL8                     PREFIX\nCPFTPRLN DS    XL1                     PREFIX_LENGTH\nCPFTRSV4 DS    CL3                     FREE\nCPFTOWNR DS    CL8                     OWNER\nCPFTSYS  DS    CL8                     SYSTEM\nCPFTASID DS    H                       ASID\nCPFTRSV5 DS    CL10                    FREE\nCPFT_ENTRY_LENGTH EQU *-CPFT_ENTRY     LENGTH\n         TITLE 'IMCFLIST SUBROUTINE RETURNED AREAS'\n         COPY  IMCFDATA\n         TITLE 'IMXCF SUBROUTINE RETURNED AREAS'\n         COPY  IMXCDATA\n         TITLE 'SYSTEM/SYSPLEX MANAGEMENT STATUS MONITOR SUBROUTINE'\nIMPXA    CSECT\nMANSTATS DS    0H\n         AHI   R11,MSSCTEND-MANSTATS\n         LA    R10,2048(,R11)    INITIALIZE SECOND\n         LA    R10,2048(,R10)                      BASE REGISTER.\n         LA    R8,2048(,R10)     INITIALIZE THIRD\n         LA    R8,2048(,R8)                       BASE REGISTER.\n         USING MSSCTEND,R11,R10,R8\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '  ADJUST ANY COMMAND INPUT.\n         CLI   MORSMODE,C' '     ANY TOP LINE NUMBER TO RESTORE?\n         JE    MMTOPSET          NO.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   WINTOP,MTOPLINE   SET TOP-OF-SCREEN LINE NUMBER.\n         CLI   MORSMODE,C'M'     CORRECT ONE SET?\n         JE    MMTOPSET          YES.\n         MVC   WINTOP,MCTOPLIN   NO, SET VALUE FROM CORRECT FIELD.\n         CLI   MORSMODE,C'C'     CORRECT ONE SET?\n         JE    MMTOPSET          YES.\n         MVC   WINTOP,MSTOPLIN   NO, SET VALUE FROM CORRECT FIELD.\n         DROP  R15               WNDWMNGR.\nMMTOPSET OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R4\n         TM    CVTOSLV0,CVTCADS  COMMON DATA SPACES SUPPORTED?\n         JNO   MLPARMOK          NO, MAXCAD IS NOT PRESENT.\n         L     R5,CVTSVT         YES, POINT TO THE SVT.\n         LH    R7,SVTMCADS-SVT(,R5)   GET MAXCAD.\n         CVD   R7,WORK\n         MVC   MANMXCAD,ED3      SHOW IT.\n         ED    MANMXCAD,WORK+6\n         TM    CVTOSLV1,CVTJ5522 LOAD PARAMETER AVAILABLE?\n         JNO   MLPARMOK          NO.\n         L     R5,CVTSCPIN       POINT TO THE SCCB.\n         MVC   MANLDPRM,24(R5)   COPY THE LOAD PARAMETER.\n         L     R5,CVTIXAVL       POINT TO THE IOCOM.\n         L     R5,208(,R5)       POINT TO THE IOVT.\n         L     R5,24(,R5)        POINT TO THE CDA.\n         MVC   MANEDTID,104(R5)  LOAD THE EDT ID.\nMLPARMOK MVC   MANSNAME,CVTSNAME LOAD GRS SYSTEM NAME.\n         L     R7,CVTJESCT       POINT TO THE JESCT.\n         USING JESCT,R7\n         MVC   MANPRISS,JESPJESN COPY THE PRIMARY SUBSYSTEM NAME.\n         LA    R7,JESSSCT-4      POINT TO BEFORE FIRST SSCVT POINTER.\n         DROP  R7                JESCT.\n         USING SSCT,R7\nPRIMSSLP ICM   R7,15,SSCTSCTA    POINT TO NEXT SSCVT.\n         JZ    PRIMOKAY          END OF CHAIN SO NOT FOUND.\n         CLC   MANPRISS,SSCTSNAM FOUND THE PRIMARY SUBSYSTEM?\n         JNE   PRIMSSLP          NO, CONTINUE SEARCH.\n         CLI   SSCTSSID,2        IS PRIMARY SUBSYSTEM JES2?\n         JNE   PRIMOKAY          NO.\n         ICM   R7,15,SSCTSUSE    YES.\n         JZ    PRIMOKAY          THAT'S UNUSUAL.\n         DROP  R7                SSCT.\n         MVC   MANPRISP,0(R7)    SHOW JES2 VERSION.\nPRIMOKAY L     R7,CVTMSER        POINT TO THE MSRDA.\n         USING BASE,R7\n         MVC   MANLOGCL,MSLOGCLS DISPLAY THE SYSTEM LOG SYSOUT CLASS.\n         SLR   R0,R0\n         ICM   R0,7,MSLOGLMT     GET MAXIMUM WTLS PER LOG DATA SET.\n         JZ    LOGLMTOK          SKIP FORMATTING IF ZERO.\n         CVD   R0,WORK\n         MVC   MANLOGLM,ED9Z\n         ED    MANLOGLM,WORK+3\n         MVC   MANLOGLM,MANLOGLM+2\nLOGLMTOK L     R7,CVTEXT2        POINT TO THE CVT VS1/VS2 COMMON EXTN.\n         USING CVTXTNT2,R7\n         L     R0,CVTBCLMT       LOAD BROADCAST NOTICE MESSAGE LIMIT.\n         CVD   R0,WORK\n         MVC   MANBCLMT,ED5      DISPLAY IT.\n         ED    MANBCLMT,WORK+5\n         MVC   MANBCLMT,MANBCLMT+1\n         MVC   MANNUCID,CVTNUCLS LOAD THE NUCLEUS ID.\n         MVC   MANIOCID,CVTIOCID LOAD THE I/O CONFIGURATION ID.\n         ICM   R7,15,CVTATCVT    POINT TO VTAM'S CVT.\n         JZ    VTAMOKAY          VTAM IS INACTIVE.\n         DROP  R7                CVTEXT2.\n         ICM   R7,15,0(R7)       POINT TO VTAM'S LEVEL STRING.\n         JZ    VTAMOKAY\n         MVC   MANVTAM,0(R7)     DISPLAY VTAM VERSION/RELEASE/LEVEL.\nVTAMOKAY ICM   R7,15,CVTDFA      GET ADDRESS OF DATA FACILITIES AREA.\n         JZ    MDFPOKAY          NO DFA SO DFP IS NOT INSTALLED.\n         USING DFA,R7\n         CLI   DFARELS,X'01'     DFSMS PRESENT?\n         JL    MNODFSMS          NO.\n         MVC   MANLINH1+60(5),=C'DFSMS'\n         MVC   MANDFP+0(1),DFAVER  VERSION.\n         MVC   MANDFP+2(1),DFARLSE RELEASE.\n         MVC   MANDFP+4(1),DFAMOD  MODIFICATION.\n         J     MISDFSMS\nMNODFSMS LH    R7,DFAREL         LOAD PACKED DFP VRM0.\n         DROP  R7                DFA.\n         STCM  R7,2,MANDFP+2     DFP RELEASE.\n         SRL   R7,4\n         STCM  R7,2,MANDFP+0     DFP VERSION.\n         STCM  R7,1,MANDFP+4     DFP MODIFICATION LEVEL.\nMISDFSMS OI    MANDFP+0,C'0'     MAKE DFP VERSION A NUMERIC CHARACTER.\n         OI    MANDFP+2,C'0'     MAKE DFP RELEASE A NUMERIC CHARACTER.\n         OI    MANDFP+4,C'0'     MAKE DFP MOD LEVEL A NUMERIC CHAR.\n         TR    MANDFP,HEX-C'0'   MAKE DIGITS VALID HEXADECIMAL.\n         MVI   MANDFP+1,C'.'\n         MVI   MANDFP+3,C'.'\nMDFPOKAY ICM   R7,15,CVTTVT      POINT TO THE TSO VECTOR TABLE.\n         JZ    TSOEOKAY          NO TSVT SO TSO/E IS NOT INSTALLED.\n         MVC   MANTSOE(5),=C'VER 1'\n         CLI   100(R7),C'0'      IS THE TSO/E LEVEL AVAILABLE?\n         JNH   TSOEOKAY          NO, RELEASE 1 OR 2 OF VERSION 1.\n         MVC   MANTSOE(1),100(R7)    COPY THE TSO/E VERSION NUMBER.\n         MVI   MANTSOE+1,C'.'\n         MVC   MANTSOE+2(2),101(R7)  COPY THE TSO/E RELEASE NUMBER.\n         MVI   MANTSOE+4,C'.'\n         MVC   MANTSOE+5(1),103(R7)  COPY THE TSO/E MODIFICATION LEVEL.\nTSOEOKAY L     R7,CVTASMVT       POINT TO THE ASMVT.\n         USING ASMVT,R7\n         TM    ASMFLAG2,ASMWARM  WARM IPL?\n         JO    IPLTYPOK          YES.\n         MVC   MANIPLTP,CVIO     NO.\n         TM    ASMFLAG2,ASMQUICK QUICK IPL?\n         JO    IPLTYPOK          YES.\n         MVC   MANIPLTP,CLPA     NO.\n         DROP  R7                ASMVT.\nIPLTYPOK L     R5,CVTSYSAD       POINT TO SYSTEM RESIDENCE UCB.\n         MVC   MANSYSRS,28(R5)   LOAD VOLUME SERIAL OF SYSRES.\n         MVC   MANIPLAD,13(R5)   LOAD DEVICE NUMBER OF SYSRES.\n         CLI   MANIPLAD,C'U'     FOUR-DIGIT DEVICE NUMBER?\n         JNE   MIPLADOK          NO.\n         UNPK  MANIPLAD(5),4(3,R5)\n         TR    MANIPLAD(4),HEX-C'0'\n         MVI   MANIPLAD+4,C' '   YES, SHOW FOUR DIGITS.\nMIPLADOK LA    R5,40             GET \"CVT PREFIX\" LENGTH.\n         LCR   R5,R5\n         AR    R5,R4             POINT TO THE VERSION CHARACTER STRING.\n         MVC   MANPRDCT,0(R5)    DISPLAY PRODUCT NAME AND FMID.\n         TM    OSLEVEL+1,CVTOS390 OS/390 OR LATER?\n         JZ    MANPRDOK          NO, PRE-OS/390.\n         CLC   BLANKS(16),MANPRDCT+16\n         JNE   MANPRDOK          SITE USES CVTVERID.\n         L     R7,CVTECVT        POINT TO ECVT.\n         USING ECVT,R7\n         CLI   ECVTPNAM+6,C' '   DOES ECVTPNAM FIT IN 6 BYTES?\n         JNE   MANPRDOK          NO.\n         MVC   MANPRDCT+17(6),ECVTPNAM\n         MVC   MANPRDCT+24(2),ECVTPVER\n         MVI   MANPRDCT+26,C'.'\n         MVC   MANPRDCT+27(2),ECVTPREL\n         MVI   MANPRDCT+29,C'.'\n         MVC   MANPRDCT+30(2),ECVTPMOD\n         DROP  R7                ECVT.\nMANPRDOK MVC   MANRELNO+1(4),36(R5)    LOAD SYSTEM RELEASE NUMBER.\n         MVC   MANRELNO(2),MANRELNO+1\n         MVI   MANRELNO+2,C'.'\n         MVC   WORK(4),CVTDATE   COPY CURRENT DECIMAL JULIAN DATE.\n         AP    WORK(4),=P'1900000'\n         MVC   MANCVJUL,=X'40202020214B202020'\n         ED    MANCVJUL,WORK     EDIT CVTDATE.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         L     R1,CVTDATE        LOAD CURRENT DECIMAL JULIAN DATE.\n         DROP  R4                CVT.\n         BASR  R14,R7\n         MVC   MANCVYMD,WORK     SHOW CURRENT YY/MM/DD.\n         L     R4,SMCAADDR       GET SMCA ADDRESS.\n         USING SMCABASE,R4\n         MVC   MANSYSID,SMCASID  SMF SYSTEM ID.\n         XC    WORK,WORK\n         MVC   WORK(4),SMCAIDTE  COPY IPL DATE.\n         AP    WORK(4),=P'1900000'\n         MVC   MANIPLDT,=X'40202020214B202020'\n         ED    MANIPLDT,WORK     EDIT IPL DATE.\n         L     R1,SMCAIDTE       LOAD IPL DATE.\n         BASR  R14,R7\n         MVC   MANIPYMD,WORK     SHOW IPL YY/MM/DD.\n         L     R5,SMCAITME       GET IPL TIME.\n         DROP  R4                SMCABASE.\n         SLR   R4,R4\n         D     R4,AHUNDRED       GET IPL T-O-D IN SECONDS.\n         SLR   R4,R4\n         D     R4,=F'60'         GET IPL T-O-D IN MINUTES.\n         CVD   R4,WORK           SHOW SECONDS.\n         OI    WORK+7,15\n         UNPK  MANIPLTM+6(2),WORK+6(2)\n         SLR   R4,R4\n         D     R4,=F'60'         GET IPL T-O-D IN HOURS.\n         CVD   R4,WORK           SHOW MINUTES.\n         OI    WORK+7,15\n         UNPK  MANIPLTM+3(2),WORK+6(2)\n         CVD   R5,WORK           SHOW HOURS.\n         OI    WORK+7,15\n         UNPK  MANIPLTM(2),WORK+6(2)\n         ICM   R1,15,EDTADDR     POINT TO ELIGIBLE DEVICES TABLE.\n         JZ    CMDSCANM          NO LONGER EXISTS.\n         MVC   MANEDTID,10(R1)   LOAD THE EDT ID NUMBER.\n         J     CMDSCANM          HANDLE REQUEST, BLANKS REBOUND.\n         SPACE\nREDOMANS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         SLR   R0,R0             GET ZERO.\n         ST    R0,WINLINES       INITIALIZE LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         SPACE\n         JAS   R14,MFSTLINE      INITIALIZE THE FIRST DISPLAY LINE.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   LL-80(R2),X'F7'   WHITE.                         (I3279)\n         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         SPACE\n         CLI   MORSMODE,C'M'     SHOW SYSTEM MANAGEMENT DETAILS?\n         JNE   MPERPLEX          NO, GO SHOW SYSPLEX INFORMATION.\n         SPACE\n         MVC   LL-79(79,R2),HEADNGMM\n         JAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         L     R5,PSAPCCAV       POINT TO THE PCCA.\n         MVC   MANVER,4(R5)      LOAD CPU VERSION NUMBER.\n         MVC   MANSER,6(R5)      LOAD CPU SERIAL NUMBER.\n         MVC   MANMODEL,12(R5)   LOAD CPU MODEL NUMBER.\n         MVC   MANCPNUM,PSACPULA+1  GET CURRENT LOGICAL CP NUMBER.\n         NI    MANCPNUM,X'0F'    TURN OFF \"LOGICAL BIT\".\n         TR    MANCPNUM,HEX      CONVERT TO HEX DIGIT.\n         L     R9,RMCTADDR       GET RMCT ADDRESS.\n         USING RMCT,R9\n         SLR   R0,R0             CLEAR FOR DIVIDE.\n         L     R1,SIXTNMIL       LOAD SIXTEEN MILLION AND DIVIDE BY\n         D     R0,RMCTADJC       THE CPU RATE ADJUSTMENT FACTOR.\n         CVD   R1,WORK\n         MVC   MANCPURT,ED9Z\n         ED    MANCPURT,WORK+3\n         L     R1,RMCTWMST       GET LATEST WMST ADDRESS.\n         MVC   MANIPSID,4(R1)    LOAD IPS ID.\n         ICM   R1,15,RMCTICST    IS ICS DEFINED?\n***      JZ    NOICS             NO, SKIP IT.\n         MVI   MANICSID,C'\u00ac'     PREPARE FOR WLM GOAL MODE.\n         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?\n         JNM   NOICS             NO.\n         MVC   MANICSID,0(R1)    LOAD ICS ID.\nNOICS    ICM   R1,15,RMCTRMPT    POINT TO CONTROL ALGORITHM PARAM TBL.\n         JZ    NOOPT             NONE PRESENT, SKIP IT.\n         MVC   MANOPTID,83(R1)   LOAD OPT ID.\n         DROP  R9                RMCT.\nNOOPT    L     R9,CVTPTR(,0)     POINT TO CVT.\n         USING CVT,R9\n         MVI   TZSIGN,C'+'       ASSUME NOT BEHIND GMT.\n         ICM   R1,15,CVTTZ       LOAD CVTTZ.\n         JNM   TZSIGNOK          BRANCH IF ASSUMPTION WAS CORRECT.\n         MVI   TZSIGN,C'-'       LOCAL TIME IS BEHIND GMT.\nTZSIGNOK LPR   R1,R1             GET ABSOLUTE VALUE OF TIME DIFFERENCE.\n         SLR   R0,R0\n         SLDL  R0,20             CONVERT TO MICROSECONDS.\n         D     R0,MONEMILL       CONVERT TO SECONDS.\n         SLR   R0,R0\n         LA    R5,3600\n         DR    R0,R5\n         CVD   R1,WORK           DISPLAY HOURS.\n         OI    WORK+7,X'0F'\n         UNPK  TZSIZE(2),WORK+6(2)\n         LR    R1,R0             COPY REMAINDER IN SECONDS.\n         SLR   R0,R0\n         LA    R5,60\n         DR    R0,R5\n         CVD   R1,WORK           DISPLAY MINUTES.\n         OI    WORK+7,X'0F'\n         UNPK  TZSIZE+3(2),WORK+6(2)\n         CVD   R0,WORK           DISPLAY SECONDS.\n         OI    WORK+7,X'0F'\n         UNPK  TZSIZE+6(2),WORK+6(2)\n         MVC   MANGTFST,=C'INACTIVE'\n         TM    CVTGTFST,CVTGTFAV IS GTF GOING?\n         JZ    GTFEND            NO.\n         MVC   MANGTFST,=C'ACTIVE  '\nGTFEND   DS    0H\n         ICM   R1,15,CVTRAC      POINT TO RACF CVT.\n         JZ    RACFEND           NO RCVT SO SKIP RACF STATUS.\n         USING RCVT,R1\n         MVC   MANACFST,=C'INACTIVE'\n         TM    RCVTSTAT,RCVTRNA  IS RACF INACTIVE?\n         JO    RACFEND           YES.\n         MVC   MANACFST,=C'ACTIVE  '\n         CLC   =C'RCVT',RCVTID   RCVT WITH EXPECTED ID?\n         JE    RACFEND           YES.\n         DROP  R1                RCVT.\n         MVC   MANACFNM,0(R1)    NO, PROBABLY SECURITY PRODUCT NAME.\n         LARL  R1,PRTXLATE\n         TR    MANACFNM,0(R1)\nRACFEND  DS    0H\n         MVC   MANLOGRC,AVAILTXT+2\n         TM    CVTOPTB,CVTNLOG   IS LOGREC UNAVAILABLE?\n         JZ    LOGRECOK          NO.\n         MVC   MANLOGRC,AVAILTXT\nLOGRECOK MVC   MANTCAM,=C'INACTIVE'\n         ICM   R0,15,CVTAQAVT    POINT TO TCAM ADDRESS VECTOR TABLE.\n         JZ    TCAMOKAY              TCAM IS NOT ACTIVE.\n         MVC   MANTCAM,=C'ACTIVE  '  TCAM IS ACTIVE.\n         TM    CVTTCMFG,CVTTCRDY     IS TCAM READY TO ACCEPT USERS?\n         JZ    TCAMOKAY              NO.\n         MVC   MANTCAM,=C'READY   '  YES.\nTCAMOKAY L     R9,CVTCSD         POINT TO COMMON SYSTEM DATA AREA.\n         DROP  R9                CVT.\n         USING CSD,R9\n         LH    R0,CSDCPUOL       GET ALIVE CPU COUNT.\n         CVD   R0,WORK\n         MVC   WORK2(R4),ED3\n         ED    WORK2(R4),WORK+6\n         MVC   MANCPUCT,WORK2+1\n         ICM   R0,12,CSDCPUAL    GET ALIVE CPU BIT MASK.\n         DROP  R9                CSD.\n         LA    R1,HEX            POINT TO HEX CHARACTERS.\n         LA    R9,MANCPIDS       POINT TO DISPLAY AREA.\n         MVC   MANCPIDS,BLANKS   ERASE PREVIOUS DATA.\n         LA    R15,16            NUMBER OF BITS TO TEST.\nMPCPCHEK LTR   R0,R0             SIGN BIT ON?\n         JNM   DEADCP            NO.\n         MVC   1(1,R9),0(R1)     YES, COPY HEX DIGIT FOR CP ID.\n         LA    R9,2(,R9)         POINT TO NEW DISPLAY AREA.\nDEADCP   LA    R1,1(,R1)         POINT TO NEXT CP ID NUMBER.\n         SLL   R0,1              PROMOTE NEXT BIT.\n         JCT   R15,MPCPCHEK      CHECK IT.\n         L     R9,ASVTADDR       GET ASVT ADDRESS.\n         USING ASVT,R9\n         L     R1,ASVTAAV        GET NUMBER OF AVAILABLE ASVT ENTRIES.\n         CVD   R1,WORK\n         LA    R1,MANFUSER+5     HANDLE ZERO FREE ENTRIES.\n         MVC   MANFUSER,ED5\n         EDMK  MANFUSER,WORK+5\n         BCTR  R1,0              POINT TO BEFORE FIRST DIGIT.\n         MVI   0(R1),C'('\n         L     R1,ASVTAST        GET NUMBER OF FREE START/SASI ENTRIES.\n         CVD   R1,WORK\n         LA    R1,MANFSTRT+3     HANDLE ZERO FREE ENTRIES.\n         MVC   MANFSTRT,ED3\n         EDMK  MANFSTRT,WORK+6\n         BCTR  R1,0              POINT TO BEFORE FIRST DIGIT.\n         MVI   0(R1),C'('\n         L     R1,ASVTANR        GET NUMBER OF FREE NON-REUSEABLE\n         CVD   R1,WORK           REPLACEMENT ENTRIES.\n         LA    R1,MANFNONR+3     HANDLE ZERO FREE ENTRIES.\n         MVC   MANFNONR,ED3\n         EDMK  MANFNONR,WORK+6\n         BCTR  R1,0              POINT TO BEFORE FIRST DIGIT.\n         MVI   0(R1),C'('\n         L     R1,ASVTSTRT       GET ORIGINAL NUMBER OF START/SASI\n         CVD   R1,WORK           ENTRIES.\n         MVC   MANRSTRT,ED3\n         ED    MANRSTRT,WORK+6\n         L     R1,ASVTNONR       GET ORIGINAL NUMBER OF FREE\n         CVD   R1,WORK           NON-REUSEABLE REPLACEMENT ENTRIES.\n         MVC   MANRNONR,ED3\n         ED    MANRNONR,WORK+6\n         L     R1,ASVTMAXI       GET ORIGINAL MAXUSER COUNT.\n         CVD   R1,WORK\n         MVC   MANMUSER,ED5\n         ED    MANMUSER,WORK+5\n         L     R1,ASVTMAXU       GET ACTUAL MAXUSER COUNT.\n         CVD   R1,WORK\n         MVC   MANMAXAS,ED5\n         ED    MANMAXAS,WORK+5\n         DROP  R9                ASVT.\n         USING SMCABASE,R9\n         L     R9,SMCAADDR       GET SMCA ADDRESS.\n         MVC   MANSMFST,=C'TERMNATD'\n         TM    SMCAFLGR,SMCATERM SMF TERMINATED?\n         JO    SMFCHECK          YES.\n         MVC   MANSMFST,=C'INACTIVE'\n         TM    SMCAMISC,SMCAUSER+SMCAMAN\n         JZ    SMFCHECK          SMF IS INACTIVE.\n         MVC   MANSMFST,=C'ACTIVE  '\n*        TM    SMCAMISC,SMCAUSER+SMCAMAN\n         JO    SMFCHECK          SMF IS RECORDING.\n         MVC   MANSMFST,=C'USER REC'\n         TM    SMCAMISC,SMCAMAN  USER RECORDING?\n         JO    SMFCHECK          YES.\n         MVC   MANSMFST,=C'INVALID '\nSMFCHECK TM    SMCAFLGS,SMCADTLS DATA LOST BECAUSE ALL SMF FILES FULL?\n         JNO   SMFOK             NO.\n         MVC   MANSMFST,=C'D/S FULL'\nSMFOK    MVC   MANJWT,SMCASJWT   COPY JOB WAIT TIME (HHMM).\n         MVC   MANMXDRM,SMCASMDM COPY MAXIMUM DORMANT TIME (MMSS).\n         MVC   MANSTTUS,SMCASSTS COPY STATUS RECORD INTERVAL (HHMMSS).\n         L     R1,SMCAACTP       POINT TO THE ACT.\n         MVC   MANSMFID,38(R1)   COPY SMF PARAMETERS MEMBER SUFFIX.\n         TM    OSLEVEL,CVTH4410  SP4 OR LATER?\n         JNO   SMFSUFOK          NO, HAVE THE CORRECT SUFFIX.\n         MVC   MANSMFID,46(R1)   YES, COPY SMF PARMS MEMBER SUFFIX.\nSMFSUFOK L     R0,SMCABFWT       LOAD NUMBER OF BUFFERS WRITTEN.\n         CVD   R0,WORK\n         MVC   MANBFWRT,ED11\n         ED    MANBFWRT,WORK+2\n         L     R0,SMCARCWT       LOAD NUMBER OF RECORDS WRITTEN.\n         CVD   R0,WORK\n         MVC   MANRCWRT,ED11\n         ED    MANRCWRT,WORK+2\n         L     R0,SMCABFLS       LOAD NUMBER OF RECORDS LOST.\n         CVD   R0,WORK\n         MVC   MANRCLST,ED11\n         ED    MANRCLST,WORK+2\n         MVC   MANREC17,=CL5'PERM)'\n         TM    SMCAOPT,SMCATDS\n         JZ    MGETSMCX\n         MVC   MANREC17,=CL5'ALL) '\nMGETSMCX L     R9,SMCASMCX\n         DROP  R9                SMCABASE.\n         USING SMCX,R9\n         MVC   MANINTVL,SMCXINTP SHOW INTVAL.\n         MVC   MANSYNCV,SMCXSYNP SHOW SYNCVAL.\n         MVC   MANRECOR,=CL10'DATASET)  '\n         TM    SMCXLSBT,SMCXLSDS\n         JNO   MRECOROK\n         MVC   MANRECOR,=CL10'LOGSTREAM)'\nMRECOROK MVC   MANMEMLM,SMCXMEM  SHOW MEMLIMIT.\n         MVC   MANMEMLM+6(2),=CL2') '\n         CLC   SMCXMEML,=X'00000FFFFFFFF000'\n         JNE   MANGETRS          HAVE LIMIT.\n         MVC   MANMEMLM(8),=CL8'NOLIMIT)'\nMANGETRS SR    R0,R0\n         ICM   R0,3,SMCXSMFRESTARTS\n         CVD   R0,WORK\n         MVC   MANASRES,ED5\n         ED    MANASRES,WORK+5\n         DROP  R9                SMCX.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINH1\n         JAS   R14,MSPCLINE      HEADER LINE 1 NOW COMPLETE.\n         MVC   LL-79(79,R2),MANLINE1\n         JAS   R14,MSPCLINE      DETAIL LINE 1 NOW COMPLETE.\n         SPACE\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINH2\n         JAS   R14,MSPCLINE      HEADER LINE 2 NOW COMPLETE.\n         MVC   LL-79(79,R2),MANLINE2\n         JAS   R14,MSPCLINE      DETAIL LINE 2 NOW COMPLETE.\n         SPACE\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         TM    OSLEVEL+1,CVTH5510 SP5 OR LATER?\n         JZ    DONEIODF          NO.\n         SPACE\n         L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R4\n         L     R5,CVTIXAVL       POINT TO THE IOCOM.\n         L     R5,208(,R5)       POINT TO THE IOVT.\n         L     R5,24(,R5)        POINT TO THE CDA.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(12,R2),=C'ACTIVE IODF:'\n         MVI   LL-67(R2),X'25'\n         MVC   LL-66(44,R2),32(R5)\n         TR    LL-66(44,R2),XLATETBL\n         MVI   LL-21(R2),X'26'\n         MVC   LL-20(10,R2),=C'OS CONFIG:'\n         MVI   LL-10(R2),X'25'\n         MVC   LL-9(8,R2),92(R5)\n         TR    LL-9(8,R2),XLATETBL\n         JAS   R14,MSPCLINE      IODF DETAIL LINE NOW COMPLETE.\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\nDONEIODF EQU   *\n         SPACE\n         TM    OSLEVEL+1,CVTH6601 SP6 OR LATER?\n         JZ    MCSRSIOK          NO, NOT OS/390.\n         SPACE\n         SYSSTATE ARCHLVL=1\n         L     R0,CSRSIWKL       GET AREA LENGTH.\n         GETMAIN RU,LV=(0),LOC=(31,64),SP=SUBPOOL\n         LR    R7,R1             POINT TO RETURN AREA.\n         USING SIV1,R7\n         USING SI00,SIV1SI00\n         USING SI11V1,SIV1SI11V1\n         XC    SIV1SI00,SIV1SI00 CLEAR AREA SO FLAGS ARE TESTABLE.\n         L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         L     R15,CVTCSRT       POINT TO CALLABLE SVCS REQUEST TABLE.\n         L     R15,X'30'(,R15)   POINT TO CSRSI.\n         CALL  (15),(CSRSIRQ#,CSRSIWKL,(R7),(R13)),MF=(E,WORK)\n         TM    SI00VALIDITYFLAGS,SI00VALIDSI11V1\n         JNO   MCSRSIDN\n         CLI   SI11V1CPCMODEL1,C' '\n         JNH   MCSRSIDN\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(9,R2),=C'CPU TYPE:'\n         MVI   LL-70(R2),X'25'\n         MVC   LL-69(4,R2),SI11V1CPCTYPE\n         MVI   LL-64(R2),X'26'\n         MVC   LL-63(10,R2),=C'CPU MODEL:'\n         MVI   LL-53(R2),X'25'\n         MVC   LL-52(16,R2),SI11V1CPCMODEL1\n         MVI   LL-36(R2),X'26'\n         MVC   LL-35(18,R2),=C'MODEL CAPACITY ID:'\n         MVI   LL-17(R2),X'25'\n         MVC   LL-16(16,R2),SI11V1CPCMODELCAPIDENT\n         JAS   R14,MSPCLINE      DETAIL LINE NOW COMPLETE.\n         DROP  R7                SIV1, SI00, SI11V1.\nMCSRSIDN LR    R1,R7             POINT TO RETURN AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         SYSSTATE ARCHLVL=0\n         TM    OSLEVEL+5,CVTH7760 EARLIER THAN Z/OS 1.11?\n         JNO   MCSRSIOK          YES, SKIP RMCTZ ACCESS.\n         L     R9,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R9\n         ICM   R9,15,RMCTX3      POINT TO THE RMCTZ.\n         JZ    MCSRSIOK          NO RMCTZ.\n         DROP  R9                RMCT.\n         USING RMCTZ,R9\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(21,R2),=C'LAST CAPACITY CHANGE:'\n         MVI   LL-58(R2),X'25'\n         MVC   WORK,RMCTZ_CAPACITY_CHANGE_TIME\n         STCKCONV STCKVAL=WORK,  POINT TO INPUT STCK VALUE.            +\n               CONVVAL=SAVE+28,  POINT TO OUTPUT FOUR WORDS.           +\n               TIMETYPE=DEC,     GET TIME DECIMAL DIGITS (DEFAULT).    +\n               DATETYPE=YYYYMMDD, SPECIFY DATE FORMAT.                 +\n               MF=(E,STCKCNVL)   SPECIFY PARAMETER LIST.\n         UNPK  LL-56(5,R2),SAVE+36(3)    YYYY.\n         UNPK  LL-51(3,R2),SAVE+38(2)    MM.\n         UNPK  LL-48(3,R2),SAVE+39(2)    DD.\n         UNPK  LL-45(3,R2),SAVE+28(2)    HH.\n         UNPK  LL-42(3,R2),SAVE+29(2)    MM.\n         UNPK  LL-39(3,R2),SAVE+30(2)    SS.\n         TR    LL-56(19,R2),HEX-C'0' HANDLE BAD DECIMAL DIGITS.\n         MVI   LL-52(R2),C'-'        SUPPLY SEPARATORS AND\n         MVI   LL-49(R2),C'-'               TIDY UP AFTER TRANSLATE\n         MVI   LL-46(R2),C' '               AND THE LAST UNPACK.\n         MVI   LL-43(R2),C':'\n         MVI   LL-40(R2),C':'\n         MVC   LL-37(4,R2),=C' UTC'\n         SR    R0,R0\n         MVC   LL-29(24,R2),=C'CAPACITY REDUCTION: NONE'\n         ICM   R0,1,RMCTZ_CAPACITY_ADJUSTMENT_INDICATION\n         JZ    MCAPRDUC          NO CAPACITY REDUCTION.\n         CVD   R0,WORK\n         MVC   LL-10(4,R2),ED3\n         ED    LL-10(4,R2),WORK+6\n         MVC   LL-6(4,R2),=C'/100'\nMCAPRDUC MVI   LL-30(R2),X'26'\n         MVI   LL-10(R2),X'25'\nMCAPLNOK JAS   R14,MSPCLINE      DETAIL LINE 5 NOW COMPLETE.\n         DROP  R9                RMCTZ.\nMCSRSIOK EQU   *\n         SPACE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINE5\n         JAS   R14,MSPCLINE      DETAIL LINE 5 NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINE6\n         JAS   R14,MSPCLINE      DETAIL LINE 6 NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINE7\n         JAS   R14,MSPCLINE      DETAIL LINE 7 NOW COMPLETE.\n         SPACE\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINE4\n         CLI   MANICSID,C'\u00ac'     IN WLM GOAL MODE?\n         JNE   MANLN4OK          NO, CONTINUE.\n         MVC   LL-60(15,R2),=C'*WLM GOAL MODE*'\n         MVI   LL-61(R2),X'21'   SHOW IT IN BLUE.\nMANLN4OK JAS   R14,MSPCLINE      DETAIL LINE 4 NOW COMPLETE.\n         L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         TM    CVTOSLV5,CVTH7740 Z/OS 1.9 OR LATER?\n         JNO   MCADSOK           NO.\n         MVC   0(LL-79,R2),HIGHX\n         L     R5,CVTRCEP        YES, POINT TO THE RCE.\n         USING RCE,R5\n         MVC   LL-79(5,R2),=C'CADS:'\n         MVI   LL-74(R2),X'25'\n         SR    R0,R0\n         ICM   R0,3,RCECADSUSED  GET USED CADS COUNT.\n         CVD   R0,WORK\n         MVC   LL-70(6,R2),ED5\n         ED    LL-70(6,R2),WORK+5\n         MVC   LL-63(6,R2),=C'IN USE'\n         ICM   R0,3,RCECADSHW    GET USED CADS HIGH WATER MARK.\n         CVD   R0,WORK\n         MVC   LL-50(6,R2),ED5\n         ED    LL-50(6,R2),WORK+5\n         MVC   LL-43(13,R2),=C'MAX SINCE IPL'\n         ICM   R0,3,RCECADSLOST  GET USED CADS NOW LOST.\n         CVD   R0,WORK\n         MVC   LL-20(6,R2),ED5\n         ED    LL-20(6,R2),WORK+5\n         MVC   LL-13(4,R2),=C'LOST'\n         JAS   R14,MSPCLINE      CADS DISPLAY LINE NOW COMPLETE.\n         DROP  R5                RCE.\n         SPACE\nMCADSOK  JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINE8\n         JAS   R14,MSPCLINE      DETAIL LINE 8 NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINE9\n         JAS   R14,MSPCLINE      DETAIL LINE 9 NOW COMPLETE.\n         SPACE\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINEH\n         JAS   R14,MSPCLINE      DETAIL LINE 18 NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINEG\n         JAS   R14,MSPCLINE      DETAIL LINE 17 NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINEA\n         JAS   R14,MSPCLINE      DETAIL LINE 10 NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINEB\n         JAS   R14,MSPCLINE      DETAIL LINE 11 NOW COMPLETE.\n         L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         L     R3,CVTAUTHL       POINT TO THE AUTHORIZED LIBRARY TABLE.\n         LR    R0,R3             COPY THE ADDRESS.\n         SLL   R0,20\n         SRL   R0,20             GET LOW-ORDER 12 BITS.\n         LTR   R0,R0             IS THE TABLE ON A PAGE BOUNDARY?\n         JZ    MALTOKAY          YES, PROBABLY CHANGED BY TMON FOR MVS.\n         LA    R0,40             NO, GET THE PREFIX LENGTH.\n         SR    R3,R0             POINT TO THE PREFIX, IF ANY.\n         CLC   =CL8'APFALT  ',0(R3)    VALID PREFIX ID?\n         JNE   MALTOKAY          NO, SKIP APFALT DISPLAY LINE.\n         MVC   MALTUSER,8(R3)    YES, COPY THE USERID.\n         MVC   MALTTIME,16(R3)   COPY THE TIME.\n         MVC   MALTDATE,24(R3)   COPY THE DATE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINEC\n         JAS   R14,MSPCLINE      DETAIL LINE 12 NOW COMPLETE.\nMALTOKAY L     R3,CVTLLTA        POINT TO THE LINK LIST LIBRARY TABLE.\n         LR    R0,R3             COPY THE ADDRESS.\n         SLL   R0,20\n         SRL   R0,20             GET LOW-ORDER 12 BITS.\n         LTR   R0,R0             IS THE TABLE ON A PAGE BOUNDARY?\n         JZ    MLNKOKAY          YES, PROBABLY CHANGED BY TMON FOR MVS.\n         LA    R0,40             NO, GET THE PREFIX LENGTH.\n         SR    R3,R0             POINT TO THE PREFIX, IF ANY.\n         CLC   =CL8'LKLSTALT',0(R3)    VALID PREFIX ID?\n         JNE   MLNKOKAY          NO, SKIP LKLNKALT DISPLAY LINE.\n         MVC   MALTUSER,8(R3)    YES, COPY THE USERID.\n         MVC   MALTTIME,16(R3)   COPY THE TIME.\n         MVC   MALTDATE,24(R3)   COPY THE DATE.\n         MVC   0(LL-79,R2),MEDX\n         MVC   LL-79(79,R2),MANLINEC\n         MVC   LL-79(14,R2),=CL14'   SYSTEM LINK'\n         JAS   R14,MSPCLINE      DETAIL LINE 12 NOW COMPLETE (AGAIN).\n         DROP  R4                CVT.\nMLNKOKAY TM    MODESW2,AUTH      APF AUTHORIZED?\n         JZ    MAPFDON1          NO, CAN'T GET INTO SUPERVISOR STATE.\n         MODESET MF=(E,MDSTSUP0) YES, GET INTO SUPERVISOR STATE, KEY 0.\n         L     R15,CVTPTR(,0)    POINT TO THE CVT.\n         USING CVT,R15\n         L     R15,CVTTCASP      POINT TO THE TCAS TABLE.\n         DROP  R15               CVT.\n         USING TCAST,R15\n         LH    R0,TCASUMAX       GET USERMAX.\n         LA    R3,TSUSERMX       POINT TO OUTPUT AREA.\n         JAS   R1,TCASEDIT       FORMAT DISPLAY COUNT.\n         LH    R0,TCASUSEC       GET NUMBER OF ACTIVE USERS.\n         LA    R3,TSUSERCT       POINT TO OUTPUT AREA.\n         JAS   R1,TCASEDIT       FORMAT DISPLAY COUNT.\n         LH    R0,TCASRCON       GET RECONNECT LIMIT IN MINUTES.\n         LA    R3,TSRECNLM       POINT TO OUTPUT AREA.\n         JAS   R1,TCASEDIT       FORMAT DISPLAY COUNT.\n         LH    R0,TCASCLSZ       GET CELL SIZE.\n         LA    R3,TSBUFSIZ       POINT TO OUTPUT AREA.\n         JAS   R1,TCASEDIT       FORMAT DISPLAY COUNT.\n         L     R0,TCASHBUF       GET HIGH BUFFER THRESHOLD.\n         LA    R3,TSHIBEXT       POINT TO OUTPUT AREA.\n         JAS   R1,TCASEDIT       FORMAT DISPLAY COUNT.\n         L     R0,TCASLBUF       GET LOW BUFFER THRESHOLD.\n         LA    R3,TSLOBEXT       POINT TO OUTPUT AREA.\n         JAS   R1,TCASEDIT       FORMAT DISPLAY COUNT.\n         LH    R0,TCASCRSZ       GET 3270 SCREEN SIZE.\n         LA    R3,TSSCRSIZ       POINT TO OUTPUT AREA.\n         JAS   R1,TCASEDIT       FORMAT DISPLAY COUNT.\n         SLR   R0,R0\n         IC    R0,TCASCHNL       GET MAXIMUM CHAIN LENGTH.\n         LA    R3,TSCHNLEN       POINT TO OUTPUT AREA.\n         JAS   R1,TCASEDIT       FORMAT DISPLAY COUNT.\n         DROP  R15               TCAST.\n         STCTL R0,R15,SECWORKA   FETCH CONTROL REGISTER CONTENTS.\n         MODESET MF=(E,MDSTPROB) BACK TO PROBLEM STATE AND KEY.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINED\n         JAS   R14,MSPCLINE      DETAIL LINE 13 NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINEE\n         JAS   R14,MSPCLINE      DETAIL LINE 14 NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANLINEF\n         JAS   R14,MSPCLINE      DETAIL LINE 15 NOW COMPLETE.\nMAPFDON1 TM    OSLEVEL+1,CVTH5520 EARLIER THAN MVS/SP5.2?\n         JNO   MTKNDONE          YES, NO LOGREC NAME/TOKEN.\n         L     R15,CVTPTR(,0)    POINT TO THE CVT, AND THEN TO THE\n         L     R15,CVTCSRT-CVT(,R15) CALLABLE SERVICE REQUEST TABLE.\n         L     R15,X'14'(,R15)\n         L     R15,X'08'(,R15)\n         CALL  (15),             RETRIEVE TOKEN FROM NAME/TOKEN PAIR.  +\n               (MMTKNLV,IFBNT_DSNLOGREC,MMTOKEN,MMTKNRC),              +\n               MF=(E,WORK)\n         LA    R15,IEANT_OK      GET SUCCESSFUL RETURN CODE VALUE.\n         C     R15,MMTKNRC       WAS TOKEN RETURNED?\n         JNE   MTKNDONE          NO, SKIP IT.\n         LARL  R15,PRTXLATE\n         USING IFBNT_TOKEN,MMTOKEN\n         L     R9,IFBNT_LOGREC_NAME_PTR\n         USING IFBNT_LOGREC,R9\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(8,R2),MANLINEF\n         MVC   LL-71(44,R2),IFBNT_LOGREC_NAME\n         TR    LL-71(44,R2),0(R15)\n         CLI   IFBNT_LOGREC_CURRENT,IFBNT_USE_DATASET\n         JE    MANLOGOK\n         MVC   LL-26(23,R2),=C'** RECORDING IGNORED **'\n         CLI   IFBNT_LOGREC_CURRENT,IFBNT_USE_LOGSTREAM\n         JNE   MANLOGOK\n         MVC   LL-26(26,R2),IFBNT_LOGREC_LOGSTREAM\n         TR    LL-26(26,R2),0(R15)\nMANLOGOK JAS   R14,MSPCLINE      DETAIL LINE 15 NOW COMPLETE.\n         DROP  R9                IFBNT_LOGREC.\nMTKNDONE JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         L     R9,SMCAADDR       GET SMCA ADDRESS.\n         USING SMCABASE,R9\n         ICM   R7,15,SMCAFRDS    POINT TO FIRST RDS.\n         JNZ   RDSFIRST          PROCESS IT.\n         MVC   0(LL-79,R2),MEDX\n         MVC   LL-58(36,R2),=CL36'THERE ARE NO SMF RECORDING DATA SETS'\n         JAS   R14,MSPCLINE      DETAIL LINE NOW COMPLETE.\n         J     NOSMFRDS          END OF SMF DATA SET STATUS DISPLAY.\n         USING RDS,R7\nRDSFIRST MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MANDSHDG\n         JAS   R14,MSPCLINE      SHOW SMF DATA SET HEADING.\nRDSLOOP  CLI   RDSID+3,C'H'      BACK TO RDS HEADER?\n         JE    NOSMFRDS          YES, END OF DATA SET LIST.\n         TM    RDSFLAG2,RDSLOST  DUMMY RDS FOR LOST DATA?\n         JO    NEXTRDS           YES, SO SKIP IT AND TRY NEXT ONE.\n         MVC   LL-76(10,R2),RDSNAME    LOAD DATA SET NAME.\n         MVC   LL-64(6,R2),RDSVOLID    LOAD VOLUME SERIAL.\n         LR    R14,R7                  RDS ENTRY ADDRESS.\n         TM    OSLEVEL+1,CVTH5510      SP5 OR LATER?\n         JNO   MRDSOK1                 NO.\n         MVC   LL-64(6,R2),RDSNAME+44  LOAD VOLUME SERIAL.\n         CLI   RDSFLAG4,9              DSNAME LONGER THAN 9 BYTES?\n         JNH   MRDSADJ1                NO.\n         MVC   LL-79(14,R2),RDSNAME    YES, LOAD MORE OF DATA SET NAME.\nMRDSADJ1 AHI   R7,36                   YES, ADJUST FOR LENGTH CHANGE.\nMRDSOK1  L     R3,RDSCAPTY       LOAD BLOCK CAPACITY.\n         CVD   R3,WORK\n         MVC   LL-58(12,R2),ED11\n         ED    LL-58(12,R2),WORK+2\n         L     R1,RDSNXTBL       LOAD NEXT FREE BLOCK NUMBER.\n         BCTR  R1,0              GET NUMBER OF USED BLOCKS.\n         CVD   R1,WORK\n         MVC   LL-45(12,2),ED11\n         ED    LL-45(12,2),WORK+2\n         M     R0,ONEGRAND       PREPARE FOR % AND ONE DECIMAL PLACE.\n         DR    R0,R3             GET PERCENT USED.\n         CVD   R1,WORK\n         MVC   LL-31(7,R2),=X'202021204B206C'\n         ED    LL-32(7,R2),WORK+5\n         C     R14,SMCASVCR      RDS POINTED TO BY SMCASVCR?\n         JNE   MDSNTACT          NO, NOT THE ACTIVE DATA SET.\n*        ICM   R0,14,RDSFLAG1    ANY EVENT PENDING FOR THIS RDS?\n         ICM   R0,14,12(R14)     ANY EVENT PENDING FOR THIS RDS?\n         JNZ   MDSNTACT          YES, NOT THE ACTIVE DATA SET.\n         MVC   LL-21(6,R2),=C'ACTIVE  '\n*        L     R1,368(,R9)       LOAD SMCACISZ (ESA ONLY).\n         L     R1,RDSCINV        LOAD SMF VSAM CONTROLINTERVALSIZE.\n         CVD   R1,WORK\n         MVC   LL-6(6,R2),ED5    SHOW CISIZE AGAINST ACTIVE DATA SET.\n         ED    LL-6(6,R2),WORK+5\n         MVC   LL-12(7,R2),=CL7'CISIZE='\n         TM    OSLEVEL+1,CVTH5510 SP5 OR LATER?\n         JNO   DONERDS           NO.\n         AHI   R7,-36            YES, ADJUST FOR LENGTH CHANGE.\n         J     DONERDS\nMDSNTACT TM    OSLEVEL+1,CVTH5510 SP5 OR LATER?\n         JNO   MRDSOK2           NO.\n         AHI   R7,-36            YES, ADJUST FOR LENGTH CHANGE.\nMRDSOK2  TM    RDSFLAG1,RDSDUMP  IS THIS DATA SET AVAILABLE FOR USE?\n         JO    MDSDMPRQ          NO, A DUMP IS REQUIRED.\n         TM    RDSFLAG1,RDSCLOSE CLOSE PENDING?\n         JO    MDSCLSRQ          YES.\n         C     R7,SMCASRBR       RDS POINTED TO BY SMCASRBR?\n         JE    MDSCLSRQ          YES.\n         TM    RDSFLAG1,RDSREADY IS IT READY FOR USE?\n         JZ    MDSNTALT          NO, SO IT'S NOT AN ALTERNATE DATA SET.\n         MVC   LL-21(9,R2),=C'ALTERNATE'\n         J     MANIOCHK\nMDSDMPRQ MVC   LL-21(13,R2),=C'DUMP REQUIRED'\n         J     MANIOCHK\nMDSNTALT MVC   LL-21(13,R2),=C'*** ERROR ***'\n         J     MANIOCHK\nMDSCLSRQ MVC   LL-21(13,R2),=C'CLOSE PENDING'\nMANIOCHK TM    RDSFLAG2,RDSPHYER+RDSLOGER\n         JZ    DONERDS           NO I/O ERROR.\n         MVC   LL-7(7,R2),=C'I/O ERR'\n         MVI   2(R2),X'F1'       BLINKING FOR ERROR.            (I3279)\n         MVI   5(R2),X'50'       BLINKING FOR ERROR.            (F9526)\n         TM    RDSFLAG2,RDSPHYER PHYSICAL I/O ERROR?\n         JO    DONERDS           YES.\n         MVC   LL-7(3,R2),=C'LOG' NO, INDICATE LOGICAL.\nDONERDS  JAS   R14,MADDLINE      DETAIL LINE NOW COMPLETE.\nNEXTRDS  L     R7,4(,R7)         POINT TO NEXT RDS.\n         J     RDSLOOP           GO PROCESS IT.\n         DROP  R7,R9             RDS, SMCABASE.\n         SPACE\nNOSMFRDS JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         TM    OSLEVEL+1,CVTH5520 EARLIER THAN MVS/SP5.2?\n         JNO   MSYMDONE          YES, NO STATIC SYSTEM SYMBOL TABLE.\n         L     R4,CVTPTR(,0)     POINT TO CVT.\n         L     R4,CVTECVT-CVT(,R4) POINT TO ECVT, AND THEN\n         L     R4,ECVTSYMT-ECVT(,R4)     TO STATIC SYSTEM SYMBOL TABLE.\n         LH    R7,2(,R4)         GET SYMBOL COUNT.\n         LTR   R7,R7             ANY SYMBOLS?\n         JNP   MSYMDONE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-50(21,R2),=CL21'STATIC SYSTEM SYMBOLS'\n         JAS   R14,MSPCLINE      SHOW SYMBOL HEADING.\n         LARL  R5,PRTXLATE\n         LA    R4,4(,R4)         POINT TO SYMBOL OFFSET ORIGIN.\n         LR    R3,R4             POINT TO FIRST ENTRY.\nMSYMLOOP L     R1,0(,R3)         GET OFFSET TO SYMBOL NAME.\n         L     R14,4(,R3)        GET LENGTH OF SYMBOL NAME.\n         LA    R15,LL-55(,R2)    POINT TO NAME DISPLAY TARGET.\n         BCTR  R14,0             DECREMENT FOR EXECUTE.\n         ALR   R1,R4             POINT TO THE SYMBOL NAME.\n         EX    R14,MMOVE         LOAD SYMBOL NAME.\n         L     R1,8(,R3)         GET OFFSET TO SYMBOL SUBTEXT.\n         L     R14,12(,R3)       GET LENGTH OF SYMBOL SUBTEXT.\n         LTR   R14,R14           ZERO LENGTH?\n         JZ    MSYMSHOW          YES, NOTHING TO SHOW.\n         LA    R15,LL-35(,R2)    POINT TO SUBTEXT DISPLAY TARGET.\n         BCTR  R14,0             DECREMENT FOR EXECUTE.\n         ALR   R1,R4             POINT TO THE SYMBOL SUBTEXT.\n         EX    R14,MMOVE         LOAD SYMBOL SUBTEXT.\nMSYMSHOW TR    LL-79(79,R2),0(R5)\n         JAS   R14,MSPCLINE      DETAIL LINE NOW COMPLETE.\n         LA    R3,16(,R3)        POINT TO NEXT SYMBOL ENTRY.\n         JCT   R7,MSYMLOOP       PROCESS NEXT SYMBOL.\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\nMSYMDONE TM    OSLEVEL,CVTJ4422  EARLIER THAN MVS/SP4.2.2?\n         JNO   MNTPDONE          YES, NO NAME/TOKEN PAIRS.\n         L     R4,CVTPTR(,0)     POINT TO CVT.\n         L     R4,CVTECVT-CVT(,R4) POINT TO ECVT, AND THEN\n         ICM   R4,15,ECVTNTTP-ECVT(R4)   TO NAME/TOKEN HEADER.\n         JZ    MDOCPF            NO NAME/TOKEN PAIRS.\n         ICM   R4,15,64(R4)      POINT TO FIRST NTTE.\n         JZ    MDOCPF            NO NAME/TOKEN PAIRS.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-54(29,R2),=CL29'SYSTEM-LEVEL NAME/TOKEN PAIRS'\n         JAS   R14,MSPCLINE      SHOW NAME/TOKEN HEADING.\nMNTPLOOP MVC   0(LL-79,R2),MEDX\n         MVC   LL-79(16,R2),8(R4)     SHOW THE NAME IN PINK.\n         MVC   LL-62(16,R2),24(R4)    SHOW THE TOKEN IN TURQUOISE.\n         TR    LL-79(79,R2),XLATETBL\n         MVI   LL-63(R2),X'25'\n         LA    R15,LL-46(,R2)    POINT TO TOKEN HEX DISPLAY AREA.\n         LA    R0,4              GET WORD COUNT.\n         LA    R7,24(,R4)        POINT TO THE TOKEN.\nMNTXLOOP MVI   0(R15),X'24'\n         UNPK  1(9,R15),0(5,R7)\n         TR    1(8,R15),HEX-C'0'\n         LA    R15,9(,R15)       POINT TO NEXT AREA.\n         LA    R7,4(,R7)         POINT TO WORD OF TOKEN.\n         JCT   R0,MNTXLOOP\n         MVI   0(R15),X'25'\n         MVC   1(5,R15),=C'ASID='\n         UNPK  6(5,R15),58(3,R4)\n         TR    6(4,R15),HEX-C'0'\n         MVI   10(R15),C' '\n         JAS   R14,MSPCLINE      DETAIL LINE NOW COMPLETE.\n         ICM   R4,15,64(R4)      POINT TO NEXT NTTE.\n         JNZ   MNTPLOOP          PROCESS NEXT NAME/TOKEN.\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         USING MCPFLINE,R2\nMDOCPF   MVC   0(LL-79,R2),HIGHX\n         MVC   MCPFPREF,=C'CMND-PFX'\n         MVC   MCPFOWNR(5),=C'OWNER'\n         MVC   MCPFSYS(6),=C'SYSTEM'\n         MVC   MCPFASID,=C'ASID'\n         MVC   MCPFSCOP(5),=C'SCOPE'\n         MVC   MCPFREMV(6),=C'REMOVE'\n         MVC   MCPFFDSP,=C'FAILDISP'\n         JAS   R14,MSPCLINE      SHOW CPF TABLE HEADING.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R4,CVTCUCB        POINT TO THE UCM.\n         DROP  R3                CVT.\n         USING UCM,R4\n         L     R4,UCMBFEXT       POINT TO UCM FIXED EXTENSION.\n         DROP  R4                UCM.\n         USING UCMFEXTA,R4\n         L     R4,UCMCPFTA       POINT TO CPF TABLE.\n         DROP  R4                UCMFEXTA.\n         USING CPFT,R4\n         ICM   R3,15,CPFTNUME    GET NUMBER OF ENTRIES.\n         JZ    MDONECPF          HANDLE EMPTY TABLE.\n         A     R4,CPFT1ST        POINT TO FIRST ENTRY.\n         DROP  R4                CPFT.\n         USING CPFT_ENTRY,R4\nMCPFLOOP DS    0H\n         MVC   MCPFPREF,CPFTPRFX\n         MVC   MCPFOWNR,CPFTOWNR\n         MVC   MCPFSYS,CPFTSYS\n         UNPK  MCPFASID(5),CPFTASID(3)\n         TR    MCPFASID,HEX-C'0'\n         MVI   MCPFASID+4,C' '\n         MVC   MCPFSCOP(6),=C'SYSTEM'\n         TM    CPFTFLGS,CPFTSCOP\n         JNO   MCPFL1\n         MVC   MCPFSCOP(7),=C'SYSPLEX'\nMCPFL1   MVC   MCPFREMV(2),=C'NO'\n         TM    CPFTFLGS,CPFTREMV\n         JNO   MCPFL2\n         MVC   MCPFSCOP(3),=C'YES'\nMCPFL2   MVC   MCPFFDSP(5),=C'PURGE'\n         TM    CPFTFLGS,CPFTFDP1\n         JNO   MCPFL3\n         MVC   MCPFFDSP,=C'SYSPURGE'\nMCPFL3   TM    CPFTFLGS,CPFTFDP0+CPFTFDP1\n         JNO   MCPFL4\n         MVC   MCPFFDSP,=C'RETAIN  '\nMCPFL4   JAS   R14,MADDLINE      LINE NOW COMPLETE.\n         LA    R4,CPFT_ENTRY_LENGTH(,R4)  POINT TO NEXT ENTRY.\n         JCT   R3,MCPFLOOP\nMDONECPF JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\nMNTPDONE TM    MODESW2,AUTH      APF AUTHORIZED?\n         JZ    MAPFDON2          NO, CAN'T GET INTO SUPERVISOR STATE.\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-48(17,R2),=CL21'CONTROL REGISTERS'\n         JAS   R14,MSPCLINE      SHOW SYMBOL HEADING.\n         LA    R6,4              FOUR DETAIL LINES REQUIRED.\n         LA    R1,CRLABELS       POINT TO LABELS FOR EACH LINE.\n         LA    R3,SECWORKA       POINT TO CONTENTS.\nCREGLINE LA    R4,4              SHOW FOUR REGISTERS PER LINE.\n         LA    R5,LL-66(,R2)     POINT TO INITIAL DISPLAY POSITION.\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVC   LL-77(7,R2),0(R1) SUPPLY CONTROL REGISTER NUMBERS.\nCREGLOOP UNPK  0(9,R5),0(5,R3)   UNPACK CONTENTS OF ONE REGISTER.\n         TR    0(8,R5),HEX-C'0'  MAKE DISPLAYABLE.\n         MVI   8(R5),C' '        ERASE GARBAGE.\n         LA    R3,4(,R3)         POINT TO NEXT REGISTER'S CONTENTS\n         LA    R5,12(,R5)          AND DISPLAY AREA.\n         JCT   R4,CREGLOOP       PROCESS NEXT REGISTER ON THIS LINE.\n         JAS   R14,MSPCLINE      DETAIL LINE NOW COMPLETE.\n         LA    R1,7(,R1)         POINT TO NEXT LINE LABEL.\n         JCT   R6,CREGLINE       PROCESS NEXT REGISTER ON NEXT LINE.\n         SPACE\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         L     R4,CVTPTR(,0)     POINT TO THE CVT,\n         L     R4,CVTJESCT-CVT(,R4)    TO THE JESCT,\n         L     R4,JESPPT-JESCT(,R4)    TO THE PPT.  (IEFZB610).\n         USING PPT,R4\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-77(32,R2),=C'PROGRAM PROPERTIES TABLE ENTRIES'\n         LH    R6,PPTUSED\n         CVD   R6,WORK\n         MVC   LL-37(6,R2),ED5   SHOW USED ENTRY COUNT.\n         ED    LL-37(6,R2),WORK+5\n         MVC   LL-30(12,R2),=C'USED ENTRIES'\n         LH    R1,PPTENTS        GET TOTAL ENTRY COUNT.\n         SR    R1,R6             GET AVAILABLE ENTRIES.\n         CVD   R1,WORK\n         MVC   LL-18(6,R2),ED5   SHOW IT.\n         ED    LL-18(6,R2),WORK+5\n         MVC   LL-11(9,R2),AVAILTXT+2\n         JAS   R14,MSPCLINE      SHOW PPT HEADING.\n         LR    R5,R4             POINT TO PPT HEADER.\n         AH    R5,PPTHDRLN       POINT TO FIRST ENTRY.\n         LTR   R6,R6             ANY ENTRIES?\n         JZ    MPPTEND           NO, THAT'S FUNNY.\n         USING PPT1,R5\nMPPTLOOP MVC   LL-76(8,R2),PPTNAME  LOAD PROGRAM NAME.\n         TM    PPTBYTE1,PPTSKEY  SPECIAL KEY REQUIRED?\n         JNO   MPPKEYOK          NO.\n         MVC   LL-66(4,R2),=C'KEY='\n         ICM   R1,8,PPTKEY       GET THE KEY.\n         SRL   R1,28             POINT INTO LOW-ORDER NIBBLE.\n         STC   R1,LL-62(,R2)\n         TR    LL-62(1,R2),HEX   SHOW STORAGE PROTECT KEY.\nMPPKEYOK TM    PPTBYTE1,PPTNCNCL NON-CANCELLABLE?\n         JZ    MPPCANOK          NO.\n         MVC   LL-59(8,R2),=C'NON-CNCL'\nMPPCANOK TM    PPTBYTE1,PPTNSWP  NON-SWAPPABLE?\n         JZ    MPPSWPOK          NO.\n         MVC   LL-49(8,R2),=C'NON-SWAP'\nMPPSWPOK TM    PPTBYTE1,PPTPRIV  PRIVILEGED?\n         JZ    MPPPRVOK          NO.\n         MVC   LL-39(6,R2),=C'PRVLGD'\nMPPPRVOK TM    PPTBYTE1,PPTSYSTK SYSTEM TASK?\n         JZ    MPPTSKOK          NO.\n         MVC   LL-31(8,R2),=C'SYS-TASK'\nMPPTSKOK TM    PPTBYTE1,PPTNDSI  NO DATA SET INTEGRITY?\n         JZ    MPPDSIOK          NO.\n         MVC   LL-21(6,R2),=C'NO-DSI'\nMPPDSIOK TM    PPTBYTE1,PPTNOPAS BYPASS PASSWORD PROTECTION?\n         JZ    MPPPASOK          NO.\n         MVC   LL-13(6,R2),=C'NO-PAS'\nMPPPASOK TM    PPTORIG,PPTDEFLT  IBM DEFAULT ENTRY?\n         JZ    MPPIBMOK          NO.\n         MVC   LL-5(4,R2),=C'DFLT'\nMPPIBMOK JAS   R14,MADDLINE      SHOW PPT PROGRAM ENTRY.\n         AH    R5,PPTENTLN       POINT TO NEXT PPT ENTRY.\n         JCT   R6,MPPTLOOP       TRY FOR ANOTHER ENTRY.\n         DROP  R4,R5             PPT, PPT1.\nMPPTEND  JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MODESET MF=(E,MDSETN0)  RETURN TO PROBLEM KEY.\nMAPFDON2 L     R4,CVTPTR(,0)     POINT TO THE CVT,\n         L     R4,CVTJESCT-CVT(,R4)    TO THE JESCT.\n         MVC   0(LL-79,R2),HIGHX\n         USING JESCT,R4\n         LH    R0,JESNRSS        GET SUBSYSTEM COUNT.\n         CVD   R0,WORK\n         MVC   LL-57(6,R2),ED5\n         ED    LL-57(6,R2),WORK+5\n         MVC   LL-49(22,R2),=C'MVS SUBSYSTEMS DEFINED'\n         JAS   R14,MSPCLINE      SHOW SUBSYSTEM LIST HEADING.\n         ICM   R4,15,JESSSCT     POINT TO THE FIRST SSCVT.\n         JZ    MSSCTEND          THAT'S FUNNY.\n         DROP  R4                JESCT.\n         USING SSCT,R4\nMSSCVTLP JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   0(LL-79,R2),HIGHX\n         MVI   LL-80(R2),X'F7'   WHITE.                         (I3279)\n         MVC   LL-79(4,R2),SSCTSNAM   LOAD SUBSYSTEM NAME.\n         ST    R4,WORK\n         MVC   LL-73(5,R2),=C'SSCVT'\n         UNPK  LL-67(9,R2),WORK(5)\n         TR    LL-67(8,R2),HEX-C'0'\n*        MVI   LL-59(R2),C' '    SHOW SSCVT ADDRESS.\n         MVC   LL-57(2,R2),=C'ID'\n         UNPK  LL-54(3,R2),SSCTSSID(2)\n         TR    LL-54(2,R2),HEX-C'0'\n         MVI   LL-52(R2),C' '    SHOW SUBSYSTEM IDENTIFIER.\n         MVC   LL-50(4,R2),=C'SSVT'\n         UNPK  LL-45(9,R2),SSCTSSVT(5)\n         TR    LL-45(8,R2),HEX-C'0'\n*        MVI   LL-37(R2),C' '    SHOW SSVT ADDRESS.\n         MVC   LL-35(6,R2),=C'SS-USE'\n         UNPK  LL-28(9,R2),SSCTSUSE(5)\n         TR    LL-28(8,R2),HEX-C'0'\n*        MVI   LL-20(R2),C' '    SHOW SUBSYSTEM USAGE WORD CONTENTS.\n         MVC   LL-18(6,R2),=C'SS-US2'\n         UNPK  LL-11(9,R2),SSCTSUS2(5)\n         TR    LL-11(8,R2),HEX-C'0'\n*        MVI   LL-3(R2),C' '     SHOW SUBSYSTEM USAGE WORD CONTENTS.\n         LR    R1,R2             REMEMBER THIS LINE'S ADDRESS.\n         TR    LL-79(79,R2),XLATETBL\n         MVI   LL-74(R2),X'26'\n         MVI   LL-68(R2),X'24'   MAKE SSCVT ADDRESS TAB SELECTABLE.\n         MVI   LL-59(R2),X'26'\n         MVI   LL-46(R2),X'24'   MAKE SSVT ADDRESS TAB SELECTABLE.\n         MVI   LL-37(R2),X'26'\n         MVI   LL-29(R2),X'24'\n         MVI   LL-20(R2),X'26'\n         MVI   LL-12(R2),X'24'\n         MVI   LL-3(R2),X'26'\n         JAS   R14,MSPCLINE      SHOW THE LINE FOR THIS SSCVT.\n         CLC   LL-79(4,R1),8(R4) IS THE SUBSYSTEM NAME DISPLAYABLE?\n         JE    MSSNAMOK          YES, DON'T NEED TO SHOW HEX.\n         MVC   0(LL-79,R2),MEDX\n         MVC   LL-73(20,R2),=C'SUBSYSTEM NAME IS X'''\n         UNPK  LL-53(9,R2),8(5,R4)\n         TR    LL-53(8,R2),HEX-C'0'\n         MVI   LL-45(R2),C''''   SHOW SUBSYSTEM NAME IN HEXADECIMAL.\n         JAS   R14,MSPCLINE      LINE NOW COMPLETE.\nMSSNAMOK ICM   R5,15,SSCTSSVT    POINT TO THE SSVT.\n         JZ    MNXTSSCT          IF NONE THEN TRY FOR NEXT SSCVT.\n         LA    R7,256            GET MAXIMUM SSVT ENTRIES.\n         SLR   R3,R3\n*        CLC   =C'MSTR',SSCTSNAM IS SUBSYSTEM MSTR?\n*        JE    MJES2FLP          YES.\n*        CLI   SSCTSSID,2        IS SUBSYSTEM JES2?\n*        JNE   MNOTJES2          NO.\nMJES2FLP LA    R3,1(,R3)         INCREMENT ENTRY CODE.\n         SLR   R1,R1\n         IC    R1,3(R3,R5)       LOAD FUNCTION MATRIX ENTRY.\n         LTR   R1,R1\n         JZ    MNXTJ2FN          IF ZERO THEN IGNORE.\n         CVD   R3,WORK\n         MVC   LL-79(13,R2),=C'FUNCTION CODE'\n         MVC   LL-66(4,R2),ED3\n         ED    LL-66(4,R2),WORK+6\n         MVI   LL-60(R2),C'-'\n         SLL   R1,2              MULTIPLY BY FOUR.\n         L     R1,256(R1,R5)     LOAD FUNCTION CODE ENTRY POINT.\n         ST    R1,WORK\n         UNPK  LL-58(9,R2),WORK(5)\n         TR    LL-58(8,R2),HEX-C'0'\n*        MVI   LL-50(R2),C' '    SHOW ENTRY POINT ADDRESS.\n         CLC   5(3,R1),4(R1)     $$$$?\n         JE    MGOTJES2          YES, LOOKS LIKE JES2.\nMMSSEPLP CLC   =X'47F0',0(R1)    UNCONDITIONAL BRANCH?\n         JE    MMGOTJMP          YES.\n         CLC   =X'A7F4',0(R1)    UNCONDITIONAL BRANCH?\n         JE    MMGOTJMP          YES.\n         CLC   =X'07FE',0(R1)    UNCONDITIONAL BRANCH?\n         JE    MJES2OK           YES, GIVE UP.\n         CLI   0(R1),X'0B'       BSM?\n         JE    MJES2OK           YES, GIVE UP.\n         CLI   0(R1),X'82'       LPSW?\n         JE    MJES2OK           YES, GIVE UP.\n         CLI   0(R1),X'00'       NULL?\n         JE    MJES2OK           YES, GIVE UP.\n         TM    0(R1),X'C0'       TEST OPCODE LENGTH BITS.\n         LA    R1,2(,R1)\n         JZ    MMSSEPLP          NOW PAST 2-BYTE INSTRUCTION.\n         LA    R1,2(,R1)\n         JNO   MMSSEPLP          NOW PAST 4-BYTE INSTRUCTION.\n         LA    R1,2(,R1)\n         J     MMSSEPLP          NOW PAST 6-BYTE INSTRUCTION.\nMMGOTJMP SLR   R14,R14\n         IC    R14,3(,R1)\n         CLI   0(R1),X'A7'       RELATIVE INSTRUCTION?\n         JNE   *+8               NO.\n         SLL   R14,1             YES, CONVERT HALFWORDS TO BYTES.\n         AHI   R14,-6\n         JNP   MCHKIRLM          TOO SHORT - CHECK FOR STRING B4 CODE.\n         CLI   4(R1),C'.'        FIRST BYTE A LENGTH INDICATOR?\n         JNL   MMGOTILN          PROBABLY NOT.\n         IC    R14,4(,R1)        PROBABLY, LOAD IT.\n         LA    R1,1(,R1)         POINT PAST IT.\nMMGOTILN LA    R15,LL-49(,R2)    POINT TO EYE-CATCHER TARGET AREA.\n         LA    R0,49             GET MAXIMUM BYTE COUNT TO SHOW.\n         CR    R14,R0            LONGER THAN MAXIMUM?\n         JNH   MMICLDLP          NO.\n         LR    R14,R0            YES, REDUCE TO MAXIMUM.\nMMICLDLP LR    R0,R2             SAVE CURRENT LINE POINTER.\n         TRT   4(1,R1),MICATCTB  IS THIS BYTE DISPLAYABLE?\n         LR    R2,R0             RESTORE CURRENT LINE POINTER.\n         JNZ   MJES2OK           NO, END OF EYE-CATCHER STRING.\n         MVC   0(1,R15),4(R1)    YES, COPY THE CHARACTER.\n         LA    R15,1(,R15)       POINT TO NEXT TARGET ADDRESS.\n         LA    R1,1(,R1)         POINT TO NEXT SOURCE ADDRESS.\n         JCT   R14,MMICLDLP      CONTINUE.\n         J     MJES2OK           DONE WHOLE STRING OR AREA FILLED.\nMCHKIRLM L     R1,WORK           RESTORE ENTRY POINT ADDRESS.\n         NI    WORK+2,X'0F'\n         LA    R0,16\n         CH    R0,WORK+2         OFFSET INTO PAGE AT LEAST 16?\n         JH    MJES2OK           NO, DO NOT RISK S0C4.\n         SR    R1,R0             YES, BACK UP 16 BYTES.\n         CLI   0(R1),C'A'        EYE-CATCHER PRESENT?\n         JL    MJES2OK           NO, DOES NOT LOOK LIKE IT.\n         MVC   LL-49(16,R2),0(R1)\n         J     MJES2OK           YES, SO SHOW IT.\nMGOTJES2 MVC   LL-49(8,R2),8(R1) LOAD FUNCTION NAME AND DESCRIPTION.\n         CLI   16(R1),C'('       DESCRIPTION IN EYE-CATCHER?\n         JE    MNEWJES2          YES, \"MODERN\" JES2.\n         CLI   16(R1),C'A'       DESCRIPTION IN EYE-CATCHER?\n         JL    MJES2OK           NO, DON'T SHOW GARBAGE.\nMNEWJES2 MVC   LL-40(40,R2),16(R1)\nMJES2OK  TR    LL-79(79,R2),XLATETBL\n         MVI   LL-59(R2),X'24'   MAKE MODULE ADDRESS TAB SELECTABLE.\n         MVI   LL-50(R2),X'25'\n         JAS   R14,MSPCLINE      SHOW THE LINE FOR THIS FUNCTION.\nMNXTJ2FN JCT   R7,MJES2FLP\n         J     MNXTSSCT          PREPARE FOR NEXT SUBSYSTEM.\nMNOTJES2 MVC   LL-73(10,R2),=C'FUNCTIONS:'\n         LA    R15,LL-63(,R2)    POINT TO FIRST DISPLAY COLUMN.\n         LA    R14,LL-8(,R2)     POINT PAST LAST START DISPLAY COLUMN.\nMSSVTFLP LA    R3,1(,R3)         INCREMENT ENTRY CODE.\n         LA    R1,3(R3,R5)       POINT TO FUNCTION MATRIX ENTRY.\n         CLI   0(R1),0           ANY SUPPORT FOR THIS FUNCTION?\n         JE    MNXTSSFN          NO.\n         CLI   0(R15),C' '       FIRST OR ONLY IN A RANGE?\n         JE    MPUTSSFN          YES.\n         CLI   1(R1),0           NO, LAST IN A RANGE?\n         JNE   MNXTSSFN          NO, DO NOT SHOW THIS NUMBER.\nMPUTSSFN CVD   R3,WORK\n         MVC   1(3,R15),ED3+1    SHOW THE FUNCTION NUMBER.\n         ED    0(4,R15),WORK+6\nMSSFN#LP TM    1(R15),X'0F'      LEADING ZERO?\n         JNZ   MSSFN#OK          NO.\n         MVC   1(3,R15),2(R15)   YES, SHUFFLE UP TO SUPPRESS.\n         J     MSSFN#LP\nMSSFN#OK LA    R15,2(,R15)       POINT PAST FIRST DIGIT.\nMSSFN#CK TM    0(R15),X'F0'      POINTING TO ANOTHER DIGIT?\n         JNO   MSSRANGE          NO, POINT PAST WHOLE NUMBER.\n         LA    R15,1(,R15)       YES, POINT PAST THIS DIGIT.\n         J     MSSFN#CK          GO CHECK FOR ANOTHER DIGIT.\nMSSRANGE CLI   1(R1),0           IS THIS THE START OF A RANGE?\n         JE    MSSCHKLN          NO.\n         CLI   2(R1),0           YES, BUT MORE THAN TWO ENTRIES?\n         JNE   MSSFDASH          YES.\nMSSCHKLN CR    R15,R14           NEAR THE END OF THE DISPLAY LINE?\n         JNH   MNXTSSFN          NO.\n         JAS   R14,MADDLINE      YES, SHOW THE FUNCTIONS SO FAR.\n         LA    R15,LL-63(,R2)    POINT TO FIRST DISPLAY COLUMN.\n         LA    R14,LL-8(,R2)     POINT PAST LAST START DISPLAY COLUMN.\n         J     MNXTSSFN          NO.\nMSSFDASH MVI   0(R15),C'-'       YES, INDICATE RANGE.\nMNXTSSFN JCT   R7,MSSVTFLP\n         JAS   R14,MADDLINE      SHOW THE FUNCTIONS FOR THIS SUBSYS.\nMNXTSSCT ICM   R4,15,SSCTSCTA    IS THERE ANOTHER SSCVT?\n         JNZ   MSSCVTLP          YES, PROCESS IT.\n         DROP  R4                SSCT.\nMSSCTEND J     MDYNEXIT          GO SHOW DYNAMIC EXITS.\nMPOLQERY L     R9,RMCTADDR       POINT TO THE RMCT.\n         USING RMCT,R9\n         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?\n         BM    MWMPOLDN          NO, NO POLICY TO EXTRACT.\n         DROP  R9                RMCT.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    MWMPOLDN          NO, CANNOT EXTRACT POLICY.\n         L     R0,MPQRYLEN       YES, GET AREA SIZE.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(31,64)\n         ST    R1,MPQRYPTR       SAVE AREA ADDRESS.\n         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.\n         L     R4,MPQRYPTR       POINT TO QUERY AREA.\n         IWMPQRY ANSAREA=(R4),ANSLEN=MPQRYLEN,QUERYLEN=MPQRETLN,       +\n               MF=(E,MPQRYLST)   GET CURRENT WORKLOAD POLICY.\n         LR    R4,R0             SAVE REASON CODE.\n         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM STATE.\n         CLM   R4,3,=X'040A'     WAS AREA LARGE ENOUGH?\n         BNE   MWMPOLOK          YES.\n         LM    R0,R1,MPQRYLEN    NO, GET LENGTH AND ADDRESS OF AREA.\n         FREEMAIN RU,A=(1),LV=(0),SP=SUBPOOL\n         ST    R15,MPQRYPTR      RESET AREA POINTER.\n         L     R1,MPQRETLN       GET REQUIRED AREA SIZE.\n         LA    R1,4095(,R1)\n         SRL   R1,12\n         SLL   R1,12             ROUND UP TO NEXT PAGE BOUNDARY.\n         ST    R1,MPQRYLEN       SAVE THE NEW SIZE.\n         B     MPOLQERY          RETRY.\n         SPACE\nMMOVE    MVC   0(0,R15),0(R1)    <<< EXECUTED >>>\n         SPACE\nMWMPOLOK BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         L     R4,MPQRYPTR       POINT TO WLM POLICY AREA.\n         USING SVPOLHD,R4\n         L     R3,SVPOLDPO       GET OFFSET TO POLICY DEFINITION.\n         ALR   R3,R4             POINT TO POLICY DEFINITION SECTION.\n         USING SVPOLSP,R3\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-78(11,R2),=C'WLM POLICY:'\n         MVC   LL-66(8,R2),SVPOLNSP        POLICY NAME.\n         MVC   LL-56(32,R2),SVPOLDSP       POLICY DESCRIPTION.\n         BAS   R14,MADDLINE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-66(6,R2),=C'SET BY'\n         MVC   LL-59(8,R2),SVPOLIPU        ADMINISTRATOR USERID.\n         MVC   LL-50(2,R2),=C'ON'\n         MVC   LL-47(8,R2),SVPOLIDS        SYSTEM NAME.\n         MVC   LL-37(2,R2),=C'AT'\n         MVC   WORK,SVPOLTPA     COPY THE STCK VALUE.\n         STCKCONV STCKVAL=WORK,  POINT TO INPUT STCK VALUE.            +\n               CONVVAL=SAVE+28,  POINT TO OUTPUT FOUR WORDS.           +\n               TIMETYPE=DEC,     GET TIME DECIMAL DIGITS (DEFAULT).    +\n               DATETYPE=YYYYMMDD, SPECIFY DATE FORMAT.                 +\n               MF=(E,STCKCNVL)   SPECIFY PARAMETER LIST.\n         UNPK  LL-34(3,R2),SAVE+28(2)    HH.\n         UNPK  LL-31(3,R2),SAVE+29(2)    MM.\n         UNPK  LL-28(3,R2),SAVE+30(2)    SS.\n         UNPK  LL-25(5,R2),SAVE+36(3)    YYYY.\n         UNPK  LL-20(3,R2),SAVE+38(2)    MM.\n         UNPK  LL-17(3,R2),SAVE+39(2)    DD.\n         TR    LL-34(19,R2),HEX-C'0' HANDLE BAD DECIMAL DIGITS.\n         MVI   LL-32(R2),C':'        SUPPLY SEPARATORS AND\n         MVI   LL-29(R2),C':'               TIDY UP AFTER TRANSLATE\n         MVI   LL-26(R2),C' '               AND THE LAST UNPACK.\n         MVI   LL-21(R2),C'-'\n         MVI   LL-18(R2),C'-'\n         MVI   LL-15(R2),C' '\n         BAS   R14,MADDLINE\n         MVC   0(LL-79,R2),HIGHX\n         MVI   LL-80(R2),X'F7'   WHITE.                         (I3279)\n         MVC   LL-72(4,R2),=C'CPU='\n         MVC   LL-68(4,R2),SVPOLECP\n         MVC   LL-52(4,R2),=C'SRB='\n         MVC   LL-48(4,R2),SVPOLESR\n         MVC   LL-32(4,R2),=C'IOC='\n         MVC   LL-28(4,R2),SVPOLEIO\n         MVC   LL-12(4,R2),=C'MSO='\n         MVC   LL-8(8,R2),SVPOLEMS\n         BAS   R14,MADDLINE\n         DROP  R3                SVPOLSP.\n         LH    R5,SVPOLDWC       GET NUMBER OF WORKLOAD ENTRIES.\n         LTR   R5,R5             ANY WORKLOADS DEFINED?\n         BNP   MWRKLDOK          NO.\n         L     R3,SVPOLDWO       GET OFFSET TO WORKLOAD DEFINITION.\n         ALR   R3,R4             POINT TO WORKLOAD DEFINITION SECTION.\n         USING SVPOLWD,R3\n         BAS   R14,MSPCLINE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-52(21,R2),=C'WORKLOAD  DESCRIPTION'\n         BAS   R14,MSPCLINE\nMWRKLDLP MVC   LL-52(8,R2),SVPOLWNM        WORKLOAD NAME.\n         MVC   LL-42(32,R2),SVPOLWDE       WORKLOAD DESCRIPTION.\n         BAS   R14,MADDLINE\n         AH    R3,SVPOLDWL       POINT TO NEXT WORKLOAD DEFINITION.\n         BCT   R5,MWRKLDLP\n         DROP  R3                SVPOLWD.\nMWRKLDOK LH    R5,SVPOLDCC       GET NUMBER OF SERVICE CLASS ENTRIES.\n         LTR   R5,R5             ANY SERVICE CLASSES DEFINED?\n         BNP   MSRVCLOK          NO.\n         L     R3,SVPOLDCO       GET OFFSET TO SRVCLASS DEFINITION.\n         ALR   R3,R4             POINT TO SRVCLASS DEFINITION SECTION.\n         USING SVPOLCD,R3\n         BAS   R14,MSPCLINE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MSRVCLHD\n         BAS   R14,MSPCLINE\nMSRVCLLP MVC   LL-78(8,R2),SVPOLCNM        SRVCLASS NAME.\n         MVC   LL-68(32,R2),SVPOLCDE       SRVCLASS DESCRIPTION.\n         LH    R0,SVPOLCPN       SHOW THE NUMBER OF PERIODS.\n         CVD   R0,WORK\n         MVC   LL-34(6,R2),ED5\n         ED    LL-34(6,R2),WORK+5\n         MVC   LL-25(8,R2),SVPOLCWN        WORKLOAD NAME.\n         MVC   LL-15(8,R2),SVPOLCRN        RESOURCE GROUP NAME.\n         BAS   R14,MADDLINE\n         AH    R3,SVPOLDCL       POINT TO NEXT SRVCLASS DEFINITION.\n         BCT   R5,MSRVCLLP\n         LH    R5,SVPOLDCC       GET NUMBER OF SERVICE CLASS ENTRIES.\n         L     R3,SVPOLDCO       GET OFFSET TO SRVCLASS DEFINITION.\n         ALR   R3,R4             POINT TO SRVCLASS DEFINITION SECTION.\n         BAS   R14,MSPCLINE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MPERODHD\n         BAS   R14,MSPCLINE\nMSRVPRLP LH    R6,SVPOLCPN       GET THE NUMBER OF PERIODS FOR CLASS.\n         L     R7,SVPOLCPO\n         ALR   R7,R3             POINT TO FIRST PERIOD DEFINITION.\n         USING SVPOLPD,R7\nMPERODLP MVC   LL-78(8,R2),SVPOLCNM        SRVCLASS NAME.\n         LH    R1,SVPOLCPN       GET THE NUMBER OF PERIODS.\n         LA    R0,1\n         CR    R0,R1             SINGLE PERIOD SERVICE CLASS?\n         BE    MPERODOK          YES, DON'T SHOW PERIOD NUMBER.\n         SR    R1,R6             NO.\n         LA    R1,1(,R1)         GET THE PERIOD NUMBER.\n         LA    R1,HEX(R1)\n         MVC   LL-66(1,R2),0(R1) SHOW THE PERIOD NUMBER.\nMPERODOK L     R15,SVPOLTYP      LOAD GOAL TYPE FLAG.\n         LA    R0,5              GET KNOWN GOAL TYPE COUNT.\n         LA    R1,GOALABEL       POINT TO GOAL NAME TABLE.\nMGOLTYLP LTR   R15,R15           THIS GOAL TYPE?\n         BM    MTHISGOL          YES.\n         SLL   R15,1             NO, PROMOTE NON-SIGN BITS.\n         LA    R1,12(,R1)        POINT TO NEXT LABEL.\n         BCT   R0,MGOLTYLP\nMTHISGOL MVC   LL-60(12,R2),0(R1)\n         TM    SVPOLTYP,SVPOLPRC    PERCENTILE RESPONSE TIME GOAL?\n         BNO   MPCTILOK             NO.\n         LH    R0,SVPOLPER          YES.\n         CVD   R0,WORK\n         MVC   LL-48(4,R2),ED3\n         ED    LL-48(4,R2),WORK+6   SHOW PERCENTILE.\nMPCTILOK LH    R0,SVPOLIMP          GET THE IMPORTANCE LEVEL.\n         CVD   R0,WORK\n         MVC   LL-43(4,R2),ED3Z\n         ED    LL-43(4,R2),WORK+6   SHOW THE IMPORTANCE LEVEL.\n         TM    SVPOLTYP,SVPOLVEL    VELOCITY GOAL?\n         BNO   MVELOCOK             NO.\n         L     R0,SVPOLVAL          YES.\n         CVD   R0,WORK\n         MVC   LL-36(6,R2),ED5\n         ED    LL-36(6,R2),WORK+5   SHOW VELOCITY GOAL.\nMVELOCOK TM    SVPOLTYP,SVPOLPRC+SVPOLAVG         RESPONSE TIME GOAL?\n         BZ    MAVGRTOK             NO.\n         L     R0,SVPOLVAL          YES.\n         CVD   R0,WORK\n         MVC   LL-28(8,R2),ED7\n         ED    LL-28(8,R2),WORK+4   SHOW RESPONSE TIME GOAL.\n         SLR   R1,R1\n         IC    R1,SVPOLRTU\n         SLL   R1,2                 MULTIPLY BY FOUR FOR INDEX.\n         LA    R1,MRTUNITS(R1)\n         MVC   LL-20(4,R2),0(R1)    SHOW RESPONSE TIME UNITS.\nMAVGRTOK L     R0,SVPOLDUR\n         CVD   R0,WORK\n         MVC   LL-16(10,R2),ED9Z\n         ED    LL-16(10,R2),WORK+3  SHOW NON-LAST PERIOD DURATION.\n         BAS   R14,MADDLINE\n         AH    R7,SVPOLDZL       POINT TO NEXT PERIOD DEFINITION.\n         BCT   R6,MPERODLP\n         AH    R3,SVPOLDCL       POINT TO NEXT SRVCLASS DEFINITION.\n         BCT   R5,MSRVPRLP\n         DROP  R3,R7             SVPOLCD, SVPOLPD.\nMSRVCLOK LH    R5,SVPOLDGC       GET NUMBER OF RESOURCE GROUP ENTRIES.\n         LTR   R5,R5             ANY RESOURCE GROUPS DEFINED?\n         BNP   MRSGRPOK          NO.\n         L     R3,SVPOLDGO       GET OFFSET TO RESGROUP DEFINITION.\n         ALR   R3,R4             POINT TO RESGROUP DEFINITION SECTION.\n         USING SVPOLRG,R3\n         BAS   R14,MSPCLINE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-79(79,R2),MRSGRPHD\n         BAS   R14,MSPCLINE\nMRSGRPLP MVC   LL-78(8,R2),SVPOLGNM        RESGROUP NAME.\n         MVC   LL-68(32,R2),SVPOLGDE       RESGROUP DESCRIPTION.\n         TM    SVPOLGLT,SVPOLMNS MINIMUM CAPACITY SPECIFIED?\n         BNO   MRSMINOK          NO.\n         L     R0,SVPOLGMN       YES, SHOW MINIMUM CPU SU PER SECOND.\n         CVD   R0,WORK\n         MVC   LL-35(8,R2),ED7\n         ED    LL-35(8,R2),WORK+4\nMRSMINOK TM    SVPOLGLT,SVPOLMXS MINIMUM CAPACITY SPECIFIED?\n         BNO   MRSMAXOK          NO.\n         L     R0,SVPOLGMX       YES, SHOW MAXIMUM CPU SU PER SECOND.\n         CVD   R0,WORK\n         MVC   LL-26(8,R2),ED7\n         ED    LL-26(8,R2),WORK+4\nMRSMAXOK BAS   R14,MADDLINE\n         AH    R3,SVPOLDGL       POINT TO NEXT RESGROUP DEFINITION.\n         BCT   R5,MRSGRPLP\n         DROP  R3                SVPOLRG.\nMRSGRPOK LH    R5,SVPOLDRC       GET NUMBER OF REPORT CLASS ENTRIES.\n         LTR   R5,R5             ANY REPORT CLASSES DEFINED?\n         BNP   MRPTCLOK          NO.\n         L     R3,SVPOLDRO       GET OFFSET TO RPTCLASS DEFINITION.\n         ALR   R3,R4             POINT TO RPTCLASS DEFINITION SECTION.\n         USING SVPOLRD,R3\n         BAS   R14,MSPCLINE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-56(25,R2),=C'REPORT-CLASS  DESCRIPTION'\n         BAS   R14,MSPCLINE\nMRPTCLLP MVC   LL-52(8,R2),SVPOLRNM        RPTCLASS NAME.\n         MVC   LL-42(32,R2),SVPOLRDE       RPTCLASS DESCRIPTION.\n         BAS   R14,MADDLINE\n         AH    R3,SVPOLDRL       POINT TO NEXT RPTCLASS DEFINITION.\n         BCT   R5,MRPTCLLP\n         DROP  R3                SVPOLRD.\nMRPTCLOK LM    R0,R1,MPQRYLEN    GET LENGTH AND ADDRESS OF AREA.\n         FREEMAIN RU,A=(1),LV=(0),SP=SUBPOOL\n         ST    R15,MPQRYPTR      RESET AREA POINTER.\nMWMPOLDN TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    MMSPCXIT          NO, CAN'T REPORT SYSPLEX DATA.\n         TM    OSLEVEL+1,CVTH4430 SP4.3 OR LATER?\n         BO    MMTELLMS          YES, SYSPLEX MAY EXIST.\nMMSPCXIT BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         B     MSUMMARY          COMPLETED OUTPUT FOR \"MM\".\nMMTELLMS MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVC   LL-79(79,R2),MMSFORMS\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         TM    OSLEVEL+1,CVTH5510 EARLIER THAN MVS/SP5?\n         BNO   MMTELLMS          YES, NO CF MAY EXIST.\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVC   LL-58(36,R2),MMSFORMC\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         B     MSUMMARY          COMPLETED OUTPUT FOR \"MM\".\n         SPACE\nMCCFAREA CLC   MSTRCTNM,BLANKS   CURRENT AREA FOR SPECIFIC STRUCTURE?\n         BNER  R14               YES, RETURN WITHOUT ACTION.\n         ICM   R1,15,MCFLAREA    ANY CURRENT AREA PRESENT?\n         BZR   R14               NO, RETURN WITHOUT ACTION.\n         ICM   R1,15,MCFLPREV    ANY LINGERING PREVIOUS RETURNED AREA?\n         BZ    MSNEWPRV          NO, UPDATE POINTERS.\n         L     R0,0(,R1)         YES, GET SIZE OF PREVIOUS AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=130\nMSNEWPRV MVC   MCFLPREV,MCFLAREA COPY CURRENT POINTER.\n         MVC   MCFLTIMO,MCFLTIMN COPY CURRENT TIME STAMP.\n         XC    MCFLAREA,MCFLAREA CLEAR CURRENT POINTER.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nMPERPLEX CLI   MORSMODE,C'C'     SHOW COUPLING FACILITY DETAILS?\n         BNE   MSYSPLEX          NO, GO SHOW SYSPLEX INFORMATION.\n         MVC   LL-79(79,R2),HEADNGMC\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         BAS   R14,MCCFAREA      PERFORM IMCFLIST AREA HOUSEKEEPING.\n         LA    R1,CFLSTPRM       POINT TO CF LIST ROUTINE PARAMETER.\n         L     R15,=V(IMCFLIST)  GET CF LIST ROUTINE ENTRY POINT.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESSFUL CALL?\n         BZ    MCCFGOOD          YES.\n         SPACE\n         MVI   4(R2),X'F8'       NO, HIGH INTENSITY FOR ERROR.\n         MVI   LL-80(R2),X'F2'   RED FOR ERROR.                 (I3279)\n         CVD   R15,WORK\n         MVC   LL-10(6,R2),ED5\n         ED    LL-10(6,R2),WORK+5\n         MVC   LL-35(25,R2),MSUBRMSG\n         CHI   R15,28            MISSING COUPLING FACILITY?\n         BE    MCFLST28          YES.\n         CHI   R15,24            MISSING POLICY?\n         BE    MCFLST24          YES.\n         CHI   R15,20            MISSING STRUCTURE?\n         BE    MCFLST20          YES.\n         MVC   LL-70(14,R2),=C'INTERNAL ERROR'\n         B     MCFLSTBD\nMCFLST28 MVC   LL-70(35,R2),=C'NO COUPLING FACILITY IN CFRM POLICY'\n         B     MCFLSTBD\nMCFLST24 MVC   LL-70(25,R2),=C'CANNOT ACCESS CFRM POLICY'\n         B     MCFLSTBD\nMCFLST20 MVC   LL-70(28,R2),=C'STRUCTURE NOT IN CFRM POLICY'\nMCFLSTBD BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         B     MSUMMARY          REPORT FAILURE.\n         SPACE\nMCCFGOOD TIME  BIN               GET THE CURRENT TIME.\n         ST    R0,MCFLTIMN       SAVE IT.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         CLC   MSTRCTNM,BLANKS   LOOKING AT SPECIFIC STRUCTURE?\n         BNE   MSTRCTUR          YES.\n         MVC   LL-79(79,R2),MCCF1HDG\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         L     R1,MCFLAREA       POINT TO RETURNED AREA.\n         USING INFTCD2,R1\n         L     R0,TCD2CFR#       GET NUMBER OF CF RECORDS.\n         LA    R3,TCD2CNRA       POINT TO FIRST CF RECORD.\n         DROP  R1                INFTCD2.\n         USING TCD2CFR,R3\nMCNXTCF1 ST    R0,CFLOOPCT       SAVE CF LOOP COUNTER.\n         USING MCLINE1,R2\n*        MVI   MCL1BAR1,C'|'\n*        MVI   MCL1BAR2,C'|'\n*        MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   MCL1CFNM,TCD2CFNM SHOW CF NAME.\n         ICM   R1,8,TCD2FLG1     GET CF STATUS.\n         LA    R0,4              GET KNOWN STATUS COUNT.\n         LA    R15,CFSTATAB      POINT TO STATUS LABEL TABLE.\nCFSTATLP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MCCFSTAT          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,9(,R15)       POINT TO NEXT STATUS LABEL.\n         BCT   R0,CFSTATLP       TEST NEXT BIT.\nMCCFSTAT MVC   MCL1CFST,0(R15)   SHOW CF STATUS.\n         MVC   MCL1PLCY,TCD2POLN SHOW POLICY NAME.\n         SPACE\n         LA    R4,1              GET MINIMUM LINE COUNT PER CF.\n         C     R4,TCD2SYS#       COMPARE WITH SYSTEM COUNT.\n         BNL   *+8               TAKE THE LARGER OF THE TWO.\n         L     R4,TCD2SYS#\n         C     R4,TCD2STR#       COMPARE WITH STRUCTURE COUNT.\n         BNL   *+8               TAKE THE LARGER OF THE TWO.\n         L     R4,TCD2STR#\n         ST    R4,MCCFLNCT       SAVE LINE COUNT FOR THIS CF.\n         ST    R2,MCCFLNAD       SAVE FIRST LINE ADDRESS FOR THIS CF.\nMCCFLNLP MVI   MCL1BAR1,C'|'\n         MVI   MCL1BAR2,C'|'\n         BAS   R14,MSPCLINE      CREATE ANOTHER DISPLAY LINE.\n         BCT   R4,MCCFLNLP       GET THE REQUISITE NUMBER OF LINES.\n         SPACE\n         L     R2,MCCFLNAD       POINT BACK TO THE FIRST LINE.\n         ICM   R4,15,TCD2SYS#    GET SYSTEM COUNT.\n         BZ    MCSYSTDN          ALLOW FOR NO SYSTEMS.\n         LA    R5,TCD2SYSA       POINT TO FIRST SYSTEM NAME.\nMCSYSTLP MVC   MCL1SYST,0(R5)    SHOW SYSTEM NAME.\n         LA    R5,8(,R5)         POINT TO NEXT SYSTEM NAME.\n         LA    R2,LL(,R2)        POINT TO NEXT DISPLAY LINE.\n         BCT   R4,MCSYSTLP       PROCESS NEXT SYSTEM NAME.\n         SPACE\nMCSYSTDN L     R2,MCCFLNAD       POINT BACK TO THE FIRST LINE.\n         ICM   R4,15,TCD2STR#    GET STRUCTURE COUNT.\n         BZ    MCSTRCDN          ALLOW FOR NO STRUCTURES.\n         LA    R5,TCD2SCL        GET SUBCHANNEL RECORD LENGTH.\n         MHI   R5,255\n         LA    R5,TCD2STRA(R5)   POINT TO FIRST STRUCTURE RECORD.\n         USING TCD2STR,R5\nMCSTRCLP MVC   MCL1STRC,TCD2STRN SHOW STRUCTURE NAME.\n         ICM   R1,8,TCD2FLG2     GET STRUCTURE STATUS.\n         LA    R0,5              GET KNOWN STATUS COUNT.\n         LA    R15,STSTATAB      POINT TO STATUS LABEL TABLE.\nSTSTATLP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MCSTSTAT          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,12(,R15)      POINT TO NEXT STATUS LABEL.\n         BCT   R0,STSTATLP       TEST NEXT BIT.\nMCSTSTAT MVC   MCL1STST,0(R15)   SHOW STRUCTURE STATUS.\n         LA    R5,TCD2SCL(,R5)   POINT TO NEXT STRUCTURE RECORD.\n         LA    R2,LL(,R2)        POINT TO NEXT DISPLAY LINE.\n         BCT   R4,MCSTRCLP       PROCESS NEXT STRUCTURE RECORD.\n         DROP  R5                TCD2STR.\n         SPACE\nMCSTRCDN L     R2,MCCFLNAD       POINT BACK TO THE FIRST LINE.\n         L     R4,MCCFLNCT       GET LINE COUNT FOR THIS CF.\nMCCFXLLP TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)\n         BCT   R4,MCCFXLLP\n         SPACE\n         L     R0,CFLOOPCT       RESTORE CF LOOP COUNTER.\n         L     R1,MCFLAREA       POINT TO RETURNED AREA.\n         USING INFTCD2,R1\n         A     R3,TCD2CFRL       POINT TO NEXT CF RECORD.\n         BCT   R0,MCNXTCF1       PROCESS NEXT CF RECORD.\n         DROP  R1,R2,R3          INFTCD2, MCLINE1, TCD2CFR.\n         SPACE\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MCCF2HD1\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MCCF2HD2\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         L     R1,MCFLAREA       POINT TO RETURNED AREA.\n         USING INFTCD2,R1\n         L     R0,TCD2CFR#       GET NUMBER OF CF RECORDS.\n         LA    R3,TCD2CNRA       POINT TO FIRST CF RECORD.\n         DROP  R1                INFTCD2.\n         USING TCD2CFR,R3\nMCNXTCF2 ST    R0,CFLOOPCT       SAVE CF LOOP COUNTER.\n         USING MCLINE2,R2\n         MVC   MCL2CFNM,TCD2CFNM SHOW CF NAME.\n         LA    R6,MCL2SIZE       POINT TO DISPLAY AREA.\n         LA    R4,TCD2ASIZ       POINT TO CF SIZE DETAILS.\n         BAS   R14,MCCFUSPC      CALCULATE USAGE PERCENTAGE.\n         LA    R6,MCL2CNTL       POINT TO DISPLAY AREA.\n         LA    R4,TCD2ACSP       POINT TO CF CONTROL SPACE DETAILS.\n         BAS   R14,MCCFUSPC      CALCULATE USAGE PERCENTAGE.\n         LA    R6,MCL2DUMP       POINT TO DISPLAY AREA.\n         LA    R4,TCD2ADMP       POINT TO CF DUMPING SPACE DETAILS.\n         BAS   R14,MCCFUSPC      CALCULATE USAGE PERCENTAGE.\n         BAS   R14,MADDLINE      DETAIL LINE NOW COMPLETE.\n         L     R0,CFLOOPCT       RESTORE CF LOOP COUNTER.\n         L     R1,MCFLAREA       POINT TO RETURNED AREA.\n         USING INFTCD2,R1\n         A     R3,TCD2CFRL       POINT TO NEXT CF RECORD.\n         BCT   R0,MCNXTCF2       PROCESS NEXT CF RECORD.\n         DROP  R1,R2,R3          INFTCD2, MCLINE2, TCD2CFR.\n         SPACE\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MCCF3HDG\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         L     R1,MCFLAREA       POINT TO RETURNED AREA.\n         USING INFTCD2,R1\n         L     R0,TCD2CFR#       GET NUMBER OF CF RECORDS.\n         LA    R3,TCD2CNRA       POINT TO FIRST CF RECORD.\n         DROP  R1                INFTCD2.\n         USING TCD2CFR,R3\nMCNXTCF3 ST    R0,CFLOOPCT       SAVE CF LOOP COUNTER.\n         USING MCLINE3,R2\n*        MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   MCL3CFNM,TCD2CFNM SHOW CF NAME.\n         L     R0,TCD2SCUN       GET TOTAL UNSUCCESSFUL OPERATIONS.\n         CVD   R0,WORK\n         MVC   MCL3BDIO,ED5\n         ED    MCL3BDIO,WORK+5\n         L     R0,TCD2SCNA       GET NO SUBCHANNEL FREE COUNT.\n         CVD   R0,WORK\n         MVC   MCL3NTAV,ED5\n         ED    MCL3NTAV,WORK+5\n         ICM   R4,15,TCD2SCAV    GET SUBCHANNEL COUNT.\n         BZ    MCSBCHDN          ALLOW FOR NO SUBCHANNELS.\n         LA    R5,TCD2SCA        POINT TO FIRST SUBCHANNEL AREA.\n         USING TCD2SC,R5\nMCSBCHLP UNPK  MCL3SBCH(5),TCD2SC#(3)\n         TR    MCL3SBCH(4),HEX-C'0'\n         MVI   MCL3SBCH+4,C' '\n         UNPK  MCL3DEVN(5),TCD2SCD#(3)\n         TR    MCL3DEVN(4),HEX-C'0'\n         MVI   MCL3DEVN+4,C' '\n         ICM   R1,12,TCD2SCST    GET STRUCTURE STATUS.\n         LA    R0,3              GET KNOWN STATUS COUNT.\n         LA    R15,SCSTATAB      POINT TO STATUS LABEL TABLE.\nSCSTATLP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MCSCSTAT          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,8(,R15)       POINT TO NEXT STATUS LABEL.\n         BCT   R0,SCSTATLP       TEST NEXT BIT.\nMCSCSTAT MVC   MCL3SCST,0(R15)   SHOW STRUCTURE STATUS.\n         L     R1,TCD2SCB        GET DEVICE BUSY COUNT.\n         LA    R15,MCL3BUSY      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         L     R1,TCD2SCPB       GET ALL PATHS BUSY COUNT.\n         LA    R15,MCL3PATH      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         L     R1,TCD2SCU        GET USAGE COUNT.\n         LA    R15,MCL3UTIL      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         ICM   R15,15,MCFLPREV   POINT TO PREVIOUS AREA.\n         BZ    MCNXSBCH          NO PREVIOUS AREA SO SKIP RATE CALC.\n         S     R15,MCFLAREA\n         AR    R15,R5            POINT TO SAME OFFSET IN OLD AREA.\n         CLC   TCD2SC(4),0(R15)  SAME SUBCHAN/DEV#?  (ASSUMED OFFSETS.)\n         BNE   MCNXSBCH          NO, DO NOT USE THIS FOR RATE CALC.\n         L     R1,TCD2SCU        GET CURRENT USAGE COUNT.\n         S     R1,TCD2SCU-TCD2SC(,R15)   GET USAGE COUNT CHANGE.\n         BZ    MCNXSBCH          SHOW BLANKS FOR NO I/O.\n         L     R15,MCFLTIMN      GET THE CURRENT TIME.\n         S     R15,MCFLTIMO      GET THE CHANGE IN TIME.\n         BNP   MCNXSBCH          INSIST ON POSITIVE TIME CHANGE.\n         M     R0,TENGRAND       HANDLE PERCENTAGE AND CENTISECONDS.\n         DR    R0,R15            GET THE I/O RATE.\n         CVD   R1,WORK\n         MVC   MCL3RATE+1(8),=X'20202021204B2020'\n         ED    MCL3RATE,WORK+4   SHOW I/O RATE PER SECOND.\nMCNXSBCH BAS   R14,MADDLINE      DISPLAY LINE NOW COMPLETE.\n         LA    R5,TCD2SCL(,R5)   POINT TO NEXT SUBCHANNEL RECORD.\n         BCT   R4,MCSBCHLP       PROCESS NEXT SUBCHANNEL RECORD.\n         DROP  R5                TCD2SC.\nMCSBCHDN L     R0,CFLOOPCT       RESTORE CF LOOP COUNTER.\n         L     R1,MCFLAREA       POINT TO RETURNED AREA.\n         USING INFTCD2,R1\n         A     R3,TCD2CFRL       POINT TO NEXT CF RECORD.\n         BCT   R0,MCNXTCF3       PROCESS NEXT CF RECORD.\n         DROP  R1,R2,R3          INFTCD2, MCLINE3, TCD2CFR.\n         SPACE\n         BAS   R14,MCCFAREA      PERFORM IMCFLIST AREA HOUSEKEEPING.\n         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVC   LL-79(79,R2),MCSTRMSG\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         B     MSUMMARY\n         SPACE\nMSTRCTUR MVI   ENDDEPTH+1,1      ENSURE PF3/15 MEANING IS CORRECT.\n         L     R3,MCFLAREA       POINT TO RETURNED AREA.\n         USING INFTCD1,R3\n         MVC   LL-79(79,R2),MCST1HDG\n         TM    TCD1FLG1,LISTSTR  LIST STRUCTURE?\n         BO    *+10              YES, LEAVE EXTRA HEADING COLUMNS.\n         MVC   LL-13(13,R2),BLANKS\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         USING MCLINE4,R2\n         MVC   MCL4STNM,MSTRCTNM SHOW STRUCTURE NAME.\n         ICM   R1,8,TCD1FLG1     GET STRUCTURE TYPE.\n         LA    R0,3              GET KNOWN STATUS COUNT.\n         LA    R15,STTYPTAB      POINT TO TYPE LABEL TABLE.\nSTTYPELP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MCSTTYPE          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,5(,R15)       POINT TO NEXT TYPE LABEL.\n         BCT   R0,STTYPELP       TEST NEXT BIT.\nMCSTTYPE MVC   MCL4STTY,0(R15)   SHOW STRUCTURE TYPE.\n         MVC   MCL4STAL,MISALLOC\n         TM    TCD1FLG2,STRALOC  STRUCTURE ALLOCATED?\n         BO    MCSTSTOK          YES.\n         MVC   MCL4STNA,MNOTALOC\n         TM    TCD1FLG2,STRNALOC STRUCTURE NOT ALLOCATED?\n         BO    MCSTSTOK          YES.\n         MVC   MCL4STNA,BLANKS\nMCSTSTOK MVC   MCL4CFNM,TCD1CFNM SHOW COUPLING FACILITY NAME.\n         LA    R4,TCD1ASIZ       POINT TO ALLOCATED AND USED SIZES.\n         LA    R6,MCL4SIZE       POINT TO DISPLAY AREA.\n         BAS   R14,MCSTUSPC      CALCULATE USAGE PERCENTAGE.\n         MVI   MCL4SIZE+8,C'K'\n         MVI   MCL4USED+8,C'K'\n         TM    TCD1FLG1,LISTSTR  LIST STRUCTURE?\n         BO    *+10              YES, LEAVE USED AMOUNT FIGURES.\n         MVC   MCL4USED(17),BLANKS\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         DROP  R2                MCLINE4.\n         ICM   R4,15,TCD1CNR#    GET CONNECTOR COUNT.\n         BZ    MCCONNDN          HANDLE ZERO CONNECTOR RECORDS.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MCST2HDG\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         LA    R5,TCD1CNRA       POINT TO FIRST CONNECTOR RECORD.\n         USING TCD1CNR,R5\n         USING MCLINE5,R2\nMCCONNLP MVC   MCL5CNNM,TCD1CNNM SHOW CONNECTOR NAME.\n         MVC   MCL5SYSN,TCD1SYSN SHOW SYSTEM NAME.\n         MVC   MCL5JOBN,TCD1JOBN SHOW JOB NAME.\n         ICM   R1,8,TCD1FLG3     GET STRUCTURE CONNECTION STATUS.\n         LA    R0,4              GET KNOWN STATUS COUNT.\n         LA    R15,CNSTATAB      POINT TO STATUS LABEL TABLE.\nCNSTATLP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MSCNSTAT          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,17(,R15)      POINT TO NEXT STATUS LABEL.\n         BCT   R0,CNSTATLP       TEST NEXT BIT.\nMSCNSTAT MVC   MCL5CNST,0(R15)   SHOW CONNECTOR STATUS.\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         LA    R5,TCD1CNRL(,R5)  POINT TO NEXT CONNECTOR RECORD.\n         BCT   R4,MCCONNLP\n         DROP  R2,R5             MCLINE5, TCD1CNR.\nMCCONNDN TM    TCD1FLG1,LISTSTR+LOCKSTR+CACHESTR\n         BZ    MSTRCTDN          NOT A KNOWN STRUCTURE TYPE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         TM    TCD1FLG1,CACHESTR\n         BO    MCACHEST          IS A CACHE STRUCTURE.\n         MVC   LL-46(25,R2),=C'AVAIL-CT   USED-CT  USED%'\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         LA    R4,TCD1ELC        POINT TO ELEMENTS COUNTERS.\n         LA    R6,LL-46(,R2)     POINT TO DISPLAY AREA.\n         BAS   R14,MCSTUSPC      CALCULATE USAGE PERCENTAGE.\n         MVC   LL-56(8,R2),=C'ELEMENTS'\n         TM    TCD1FLG1,LOCKSTR  LOCK STRUCTURE?\n         BO    MCLOCKST          YES.\n         MVC   LL-61(4,R2),=C'LIST'\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         LA    R4,TCD1ENTA       POINT TO LIST ENTRIES COUNTERS.\n         LA    R6,LL-46(,R2)     POINT TO DISPLAY AREA.\n         BAS   R14,MCSTUSPC      CALCULATE USAGE PERCENTAGE.\n         MVC   LL-60(12,R2),=C'LIST ENTRIES'\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         B     MSTRCTDN\nMCLOCKST MVC   LL-61(4,R2),=C'LOCK'\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         LA    R4,TCD1LKTA       POINT TO LOCK TABLE ENTRIES COUNTERS.\n         LA    R6,LL-46(,R2)     POINT TO DISPLAY AREA.\n         BAS   R14,MCSTUSPC      CALCULATE USAGE PERCENTAGE.\n         MVC   LL-66(18,R2),=C'LOCK TABLE ENTRIES'\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   LL-66(31,R2),=C'TOTAL LOCK CONTENTION REQUESTS:'\n         L     R1,TCD1LKCT\n         LA    R15,LL-35(,R2)    POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   LL-66(31,R2),=C'TOTAL LOCK CONTENTION REQUESTS:'\n         MVC   LL-66(5,R2),=C'FALSE'\n         L     R1,TCD1LKCF\n         LA    R15,LL-35(,R2)    POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         B     MSTRCTDN\nMCACHEST MVC   LL-43(5,R2),=C'COUNT'\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   LL-55(7,R2),=C'ENTRIES'\n         MVC   LL-71(15,R2),=C'CACHE DIRECTORY'\n         L     R1,TCD1DEC\n         LA    R15,LL-46(,R2)    POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   LL-67(19,R2),=C'CACHE DATA ELEMENTS'\n         L     R1,TCD1ELC\n         LA    R15,LL-46(,R2)    POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   LL-65(35,R2),=C'MAXIMUM CACHE STORAGE CLASS VALUE ='\n         SLR   R1,R1\n         IC    R1,TCD1MXSC\n         LA    R15,LL-30(,R2)    POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   LL-65(35,R2),=C'MAXIMUM CACHE STORAGE CLASS VALUE ='\n         MVC   LL-51(7,R2),=C'CASTOUT'\n         SLR   R1,R1\n         ICM   R1,3,TCD1MXCC\n         LA    R15,LL-30(,R2)    POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7         FORMAT AND DISPLAY NUMBER.\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         DROP  R3                INFTCD1.\n         SPACE\nMSTRCTDN MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)\n         MVC   LL-64(48,R2),MSPF3MSG\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         L     R1,MCFLAREA       POINT TO CURRENT STRUCTURE DATA.\n         L     R0,0(,R1)         GET ITS SIZE AND FREE IT.\n         FREEMAIN RU,LV=(0),A=(1),SP=130\n         SLR   R15,R15           SHOULD BE A NO-OP.\n         ST    R15,MCFLAREA      RESET CURRENT AREA POINTER.\n         SPACE\nMSUMMARY BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNM LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNM L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    NOTEXITM          NO, PROCESS SUBCOMMAND.\n         ICM   R1,15,MCFLAREA    ANY LINGERING RETURNED AREA?\n         BZ    ISEXITM           NO, PROCEED WITH TIDY UP.\n         L     R0,0(,R1)         GET SIZE OF RETURNED AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=130\n         ST    R15,MCFLAREA      RESET AREA POINTER.\nISEXITM  L     R15,WINMANAD      YES, POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         CLI   MORSMODE,C'M'     LOOKING AT SYSTEM STUFF?\n         BNE   ISEXITMC          NO.\n         MVC   MTOPLINE,WINTOP   SAVE TOP-OF-SCREEN LINE NUMBER.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nISEXITMC CLI   MORSMODE,C'C'     LOOKING AT CF STUFF?\n         BNE   ISEXITMS          NO.\n         MVC   MCTOPLIN,WINTOP   SAVE TOP-OF-SCREEN LINE NUMBER.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nISEXITMS MVC   MSTOPLIN,WINTOP   SAVE TOP-OF-SCREEN LINE NUMBER.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\n         DROP  R15               WNDWMNGR.\nNOTEXITM CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         JH    REDOMANS          YES, CONTINUE WITH DISPLAYS.\n         CLI   INBUFF,3          PF3/15?\n         BNE   CMDSCANM          NO, CHECK FOR COMMAND TEXT.\n         MVC   MSTRCTNM,BLANKS   YES, BLANK OUT STRUCTURE NAME.\n         J     REDOMANS\nCMDSCANM CLI   INCHARS,C'M'      REQUEST FOR SYSTEM DISPLAY?\n         BE    MSETSUBM          YES.\n         CLI   INCHARS,C'C'      REQUEST FOR COUPLING FACILITY DISPLAY?\n         BE    MSETSUBC          YES.\n         CLI   INCHARS,C'S'      REQUEST FOR SYSPLEX DISPLAY?\n         BE    MSETSUBS          YES.\n         CLI   INCHARS,C'G'      REQUEST FOR SYSPLEX DISPLAY?\n         BE    MSETSUBS          YES.\n         CLI   INCHARS,C'P'      REQUEST FOR SYSPLEX DISPLAY?\n         BE    MSETSUBS          YES.\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BH    GIVEHLPM          NO, DISPLAY HELP.\n         SLR   R0,R0             DETERMINE IF ZOOM REQUESTED.\n         ICM   R0,1,INBUFF+1     GET THE CURSOR ROW NUMBER.\n         JZ    REDOMANS          CURSOR ON HEADING LINE.\n         BCTR  R0,0\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         A     R0,WINTOP         GET DETAIL LINE NUMBER.\n         C     R0,WINLINES       BEFORE SUMMARY LINE?\n         JNL   REDOMANS          NO, CURSOR PAST END OF DISPLAY.\n         BCTR  R0,0              GET THE RELATIVE LINE NUMBER.\n         LA    R1,LL             GET THE LINE LENGTH.\n         MR    R0,R0             GET OFFSET INTO DISPLAY.\n         A     R1,WINBUFF        POINT TO THE DISPLAY LINE.\n         DROP  R15               WNDWMNGR.\n         CLC   LL-73(5,R1),=C'SSCVT'\n         BE    SCVTEXAM          ZOOM IN ON SSCVT.\n         LA    R7,LL-58(,R1)     PERHAPS POINT TO JES2 MODULE ADDRESS.\n         CLC   LL-79(13,R1),=C'FUNCTION CODE'\n         BE    MEXAMSS\n         CLI   LL-46(R1),X'24'   TOKEN CONTENTS ZOOM?\n         BE    MNTPZOOM          YES.\n         USING MCLINE1,R1\n         CLI   MCL1BAR1,C'|'     DOES LINE HAVE EXPECTED FORMAT?\n         JNE   REDOMANS          NO, CURSOR NOT ON ZOOM ELIGIBLE LINE.\n         CLI   MCL1BAR2,C'|'     DOES LINE HAVE EXPECTED FORMAT?\n         JNE   REDOMANS          NO, CURSOR NOT ON ZOOM ELIGIBLE LINE.\n         CLI   LL-80(R1),X'F5'   TURQUOISE?  (DETAIL LINE?)\n         JNE   REDOMANS          NO, CURSOR NOT ON ZOOM ELIGIBLE LINE.\n         CLC   MCL1STRC,BLANKS   ANY STRUCTURE NAME PRESENT?\n         JE    REDOMANS          NO, CANNOT PERFORM A ZOOM.\n         MVC   MSTRCTNM,MCL1STRC YES, LOAD IT INTO IMCFLIST PARAMETER.\n         MVI   ENDDEPTH+1,1      PF3/15 SELECTS CF OVERVIEW.\n         J     REDOMANS\n         DROP  R1                MCLINE1.\nMNTPZOOM CLI   INBUFF+2,34       CURSOR BEFORE COLUMN 35?\n         JL    REDOMANS          YES, NO ZOOMABLE FIELD.\n         LA    R7,LL-45(,R1)     POINT TO FIRST TOKEN WORD.\n         CLI   INBUFF+2,43       CURSOR BEFORE COLUMN 44?\n         BL    MEXAMSS           YES, ZOOM TO THIS ADDRESS.\n         LA    R7,LL-36(,R1)     POINT TO FIRST TOKEN WORD.\n         CLI   INBUFF+2,52       CURSOR BEFORE COLUMN 53?\n         BL    MEXAMSS           YES, ZOOM TO THIS ADDRESS.\n         LA    R7,LL-27(,R1)     POINT TO FIRST TOKEN WORD.\n         CLI   INBUFF+2,61       CURSOR BEFORE COLUMN 62?\n         BL    MEXAMSS           YES, ZOOM TO THIS ADDRESS.\n         LA    R7,LL-18(,R1)     POINT TO FIRST TOKEN WORD.\n         CLI   INBUFF+2,70       CURSOR BEFORE COLUMN 71?\n         BL    MEXAMSS           YES, ZOOM TO THIS ADDRESS.\n         J     REDOMANS\nSCVTEXAM LA    R7,LL-67(,R1)     POINT TO SSCT ADDRESS.\n         CLI   INBUFF+2,30       CURSOR BEFORE COLUMN 31?\n         BL    MEXAMSS           YES, ZOOM IN TO SSCT.\n         LA    R7,LL-45(,R1)     POINT TO SSVT ADDRESS.\n         CLI   INBUFF+2,45       CURSOR BEFORE COLUMN 46?\n         BL    MEXAMSS           YES, ZOOM IN TO SSVT.\n         LA    R7,LL-28(,R1)     POINT TO SSCTSUSE CONTENTS.\n         CLI   INBUFF+2,62       CURSOR BEFORE COLUMN 63?\n         BL    MEXAMSS           YES, ZOOM IN TO SSVTSUSE.\n         LA    R7,LL-11(,R1)     POINT TO SSCTSUS2 CONTENTS.\nMEXAMSS  MVC   INBUFF(9),MZMSTR  SUPPLY THE ZOOM COMMAND STRING.\n         MVC   INBUFF+9(8),0(R7) LOAD BROWSE ADDRESS.\n         MVI   TGETLEN+1,17      SUPPLY \"INPUT\" DATA LENGTH.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         CLI   INBUFF+9,C'0'     LEADING DECIMAL DIGIT?\n         BNL   GETSCRNM          YES, PROCEED.\n         TR    INBUFF+9(1),MSIGNOFF-C'A'   RESET SIGN BIT.\n         B     GETSCRNM          ZOOM TO OPTION \"VB\".\nGIVEHLPM MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNM          GO DISPLAY HELP PANEL.\nMSETSUBM CLI   MORSMODE,C'M'     ALREADY IN SUBFUNCTION \"M\"?\n         JE    REDOMANS          YES, NO ADJUSTMENTS TO BE MADE.\n         LA    R1,MCTOPLIN       ASSUME \"MC\".\n         CLI   MORSMODE,C'C'     IS IT?\n         BE    *+8               YES.\n         LA    R1,MSTOPLIN       NO, \"MS\".\n         MVI   MORSMODE,C'M'     FLAG NEW SUBFUNCTION.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   0(4,R1),WINTOP    SAVE CURRENT SCROLL POSITION.\n         MVC   WINTOP,MTOPLINE   RESTORE \"MM\" SCROLL POSITION.\n         DROP  R15               WNDWMNGR.\n         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\n         J     REDOMANS          GENERATE NEW DISPLAY.\nMSETSUBC CLI   MORSMODE,C'C'     ALREADY IN SUBFUNCTION \"C\"?\n         JE    REDOMANS          YES, NO ADJUSTMENTS TO BE MADE.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         JZ    REDOMANS          NO, CAN'T DO SYSPLEX STUFF.\n         TM    OSLEVEL+1,CVTH5510 EARLIER THAN MVS/SP5?\n         JNO   REDOMANS          YES, CANNOT HAVE A CF.\n         LA    R1,MTOPLINE       ASSUME \"MM\".\n         CLI   MORSMODE,C'M'     IS IT?\n         BE    *+8               YES.\n         LA    R1,MSTOPLIN       NO, \"MS\".\n         MVI   MORSMODE,C'C'     YES, FLAG NEW SUBFUNCTION.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   0(4,R1),WINTOP    SAVE CURRENT SCROLL POSITION.\n         MVC   WINTOP,MCTOPLIN   RESTORE \"MC\" SCROLL POSITION.\n         DROP  R15               WNDWMNGR.\n         CLC   MSTRCTNM,BLANKS   LOOKING AT A SPECIFIC STRUCTURE?\n         JE    REDOMANS          NO, PF3/15 IS TO FUNCTION AS '='.\n         MVI   ENDDEPTH+1,1      YES, PF3/15 STAYS IN \"MC\".\n         J     REDOMANS          GENERATE NEW DISPLAY.\nMSETSUBS CLC   MORSMODE,INCHARS  ALREADY IN REQUESTED SUBFUNCTION?\n         JE    REDOMANS          YES, NO ADJUSTMENTS TO BE MADE.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         JZ    REDOMANS          NO, CAN'T DO SYSPLEX STUFF.\n         TM    OSLEVEL+1,CVTH4430 SP4.3 OR LATER?\n         JNO   REDOMANS          YES, CANNOT HAVE A SYSPLEX.\n         LA    R1,MTOPLINE       ASSUME \"MM\".\n         CLI   MORSMODE,C'M'     IS IT?\n         BE    MSGOTOPT          YES.\n         LA    R1,MCTOPLIN       ASSUME \"MC\".\n         CLI   MORSMODE,C'C'     IS IT?\n         BE    MSGOTOPT          YES.\n         LA    R1,MSTOPLIN       NO.\nMSGOTOPT MVC   MORSMODE,INCHARS  YES, FLAG NEW SUBFUNCTION.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   0(4,R1),WINTOP    SAVE CURRENT SCROLL POSITION.\n         LA    R0,1\n         ST    R0,WINTOP         START NEW DISPLAY FROM FIRST LINE.\n         ST    R0,MSTOPLIN\n         DROP  R15               WNDWMNGR.\n         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\n         J     REDOMANS          GENERATE NEW DISPLAY.\n         SPACE\nTCASEDIT CVD   R0,WORK           FORMAT COUNT DATA.\n         MVC   0(6,R3),ED5\n         ED    0(6,R3),WORK+5\n         BR    R1\n         SPACE\nMCCFUSPC L     R0,4(,R4)         SHOW FREE SPACE SIZE.\n         CVD   R0,WORK\n         MVC   0(8,R6),ED7\n         ED    0(8,R6),WORK+4\n         MVI   8(R6),C'K'\n         L     R15,0(,R4)        SHOW TOTAL ALLOCATED SPACE SIZE.\n         CVD   R15,WORK\n         MVC   9(8,R6),ED7\n         ED    9(8,R6),WORK+4\n         MVI   17(R6),C'K'\n         LTR   R15,R15           ANY SPACE PRESENT?\n         BZR   R14               NO, DO NOT DIVIDE BY ZERO.\n         LR    R1,R15            COPY ALLOCATED SPACE SIZE.\n         SR    R1,R0             SUBTRACT FREE SPACE SIZE.\n         M     R0,AHUNDRED       SHOW PERCENTAGE.\n         DR    R0,R15\n         CVD   R1,WORK\n         MVC   18(4,R6),ED3\n         ED    18(4,R6),WORK+6\n         MVI   22(R6),C'%'\n         BR    R14\n         SPACE\nMCSTUSPC L     R15,0(,R4)        SHOW AVAILABILITY.\n         CVD   R15,WORK\n         MVC   0(8,R6),ED7\n         ED    0(8,R6),WORK+4\n         L     R1,4(,R4)         SHOW CONSUMPTION.\n         CVD   R1,WORK\n         MVC   10(8,R6),ED7\n         ED    10(8,R6),WORK+4\n         LTR   R15,R15           ANY SPACE PRESENT?\n         BZR   R14               NO, DO NOT DIVIDE BY ZERO.\n         M     R0,AHUNDRED       SHOW PERCENTAGE.\n         DR    R0,R15\n         CVD   R1,WORK\n         MVC   20(4,R6),ED3\n         ED    20(4,R6),WORK+6\n         MVI   24(R6),C'%'\n         BR    R14\n         SPACE\nMCFP7    LR    R0,R1             COPY INPUT VALUE.\n         LA    R1,0(,R1)         RESET SIGN BIT.\n         CVD   R1,WORK\n         LTR   R0,R0\n         BNM   MCFP7POS\n         AP    WORK,=P'2147483648'\nMCFP7POS ICM   R0,15,WORK        ARE 7 DIGITS SUFFICIENT?\n         BNZ   MCFP7SCL          NO, MUST EMPLOY SCALING.\n         MVC   0(8,R15),ED7      YES.\n         ED    0(8,R15),WORK+4\n         BR    R14\nMCFP7SCL LA    R1,=C'KMGT'       POINT TO SCALING LABELS.\nMCFP7SLP SRP   WORK,64-3,0       DIVIDE BY ONE THOUSAND.\n         OC    WORK(5),WORK      ARE 5 DIGITS SUFFICIENT?\n         BZ    MCFP7SDN          YES.\n         LA    R1,1(,R1)         NO, POINT TO NEXT SCALING INDICATOR.\n         B     MCFP7SLP\nMCFP7SDN MVC   1(6,R15),ED5\n         ED    1(6,R15),WORK+5\n         MVC   7(1,R15),0(R1)\n         BR    R14\n         SPACE\nMADDLINE TR    LL-79(79,R2),XLATETBL\nMSPCLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNM          IF YES, THEN FORGET SUMMARY LINE.\nMFSTLINE MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         BR    R14\n         DROP  R15               WNDWMNGR.\n         SPACE 2\n         DROP  R11,R10,R8        MSSCTEND.\n         TITLE 'MANAGEMENT STATUS MONITOR - VARIABLES AND CONSTANTS'\nMTOPLINE DC    F'1'              TOP-OF-SCREEN LINE NUMBER FOR \"MM\".\nMCTOPLIN DC    F'1'              TOP-OF-SCREEN LINE NUMBER FOR \"MC\".\nMSTOPLIN DC    F'1'              TOP-OF-SCREEN LINE NUMBER FOR \"MS\".\nSIXTNMIL DC    F'16000000'       SIXTEEN MILLION.\nMONEMILL DC    F'1000000'        ONE MILLION.\nCSRSIRQ# DC    A(CSRSI_REQUEST_V1CPC_MACHINE)\nCSRSIWKL DC    A(SIV1_LEN)       CSRSI RETURN AREA LENGTH.\nCFLOOPCT DC    F'0'              LOOP COUNTER SAVE AREA.\nMCFLTIMN DC    F'0'              TIME OF LATEST CF STATUS.\nMCFLTIMO DC    F'0'              TIME OF PREVIOUS CF STATUS.\nCFLSTPRM DC    A(MSTRCTNM)       PLIST FOR IMCFLIST ROUTINE.\nMSTRCTNM DC    CL16' ' \\_______  STRUCTURE NAME PARAMETER.\nMCFLAREA DC    A(0)    /         ADDRESS OF RETURNED AREA.\nMPQRYLEN DC    F'4096' \\_______  POLICY QUERY AREA LENGTH.\nMPQRYPTR DC    A(0)    /         POLICY QUERY AREA POINTER.\nMPQRETLN DC    F'0'              RETURNED AREA SIZE REQUIREMENT.\nMCCFLNCT DC    F'0'              NUMBER OF LINES TO REPORT CF.\nMCCFLNAD DC    A(0)              ADDRESS OF FIRST DISPLAY LINE FOR CF.\n         IWMPQRY MF=(L,MPQRYLST) POLICY QUERY PARAMETER LIST.\nMMTKNRC  DC    F'0'\nMMTKNLV  DC    A(IEANT_SYSTEM_LEVEL)\nMMTOKEN  DC    CL16' '\n         IFBNTASM\nIMPXA    CSECT\nCLPA     DC    CL12'COLD (CLPA) '\nCVIO     DC    CL12'QUICK (CVIO)'\nCRLABELS DC    C'CR 0-3:CR 4-7:CR 8-B:CR C-F:'\nGOALABEL DC    CL12'PERCENTILE  '\n         DC    CL12'AV-RESP-TIME'\n         DC    CL12'VELOCITY    '\n         DC    CL12'DISCRETIONRY'\n         DC    CL12'SYSTEM      '\n         DC    CL12'**UNKNOWN** '\nMRTUNITS DC    C'    MS  SECSMINSHRS '\nMSIGNOFF DC    C'234567'         TOP HEX DIGITS FOR POSITIVE NUMBER.\nAVAILTXT DC    C'UNAVAILABLE  '\nMORSMODE DC    C'M'\nMZMSTR   DC    X'7D40C11140C1'   READ HEADER FOR ZOOM.\n         DC    C'=VB'            CHARACTER STRING FOR ZOOM.\nMANDSHDG DC    CL79'SMF DATA SET   VOLUME   SIZE(BLKS)   USED(BLKS)   %+\n               FULL   STATUS               '\nMANLINH1 DC    CL79'VER SERIAL TYPE   PRODUCT (FMID)  VERSION          +\n                RELNO    DFP   VTAM  TSO/E '\nMANLINE1 EQU   *,79\n         DC    CL1' '\nMANVER   DC    CL2' '\n         DC    CL1' '\nMANSER   DC    CL6' '\n         DC    CL1' '\nMANMODEL DC    CL4' '\n         DC    CL3' '\nMANPRDCT DC    CL32' '\n         DC    CL2' '\nMANRELNO DC    CL5' '\n         DC    CL3' '\nMANDFP   DC    CL5'\u00acINST'\n         DC    CL2' '\nMANVTAM  DC    CL4'\u00acACT'\n         DC    CL2' '\nMANTSOE  DC    CL6'\u00acINST '\nMANLINH2 DC    CL79'SMFID  SYS-NAME  LOADPARM  NUCID  SYSRES-DEV#  IPL-+\n               DATE  IPL-TIME  IPL-TYPE    '\nMANLINE2 EQU   *,79\n         DC    CL1' '\nMANSYSID DC    CL4'IPO1'\n         DC    CL2' '\nMANSNAME DC    CL8' '\n         DC    CL2' '\nMANLDPRM DC    CL8' '\n         DC    CL4' '\nMANNUCID DC    CL1' '\n         DC    CL4' '\nMANSYSRS DC    CL6' '\n         DC    CL1' '\nMANIPLAD DC    CL3' '\n         DC    CL2' '\nMANIPLDT DC    CL9'YYYY.DDD'\n         DC    CL2' '\nMANIPLTM DC    CL8'HH:MM:SS'\n         DC    CL2' '\nMANIPLTP DC    CL12'WARM'\nMANLINE4 EQU   *,79\n         DC    CL5'IOCID',X'25'\nMANIOCID DC    CL2' '\n         DC    CL1' ',X'26',C'EDT',X'25'\nMANEDTID DC    CL2' '\n         DC    CL2' ',X'26',C'ICS',X'25'\nMANICSID DC    CL2' '\n         DC    CL2' ',X'26',C'IPS',X'25'\nMANIPSID DC    CL2' '\n         DC    CL2' ',X'26',C'OPT',X'25'\nMANOPTID DC    CL2' '\n         DC    CL2' ',X'26',C'GTF',X'25'\n         DC    CL3'IS '\nMANGTFST DC    CL8' '\n         DC    CL4' ',X'26'\n         DC    CL6'MAXCAD',X'25'\nMANMXCAD DC    CL4' '\n         DC    CL2' '\nMANLINE5 EQU   *,79\n         DC    CL7'CPU(S):',X'25'\nMANCPUCT DC    CL3' '\n         DC    CL13' CP''S ACTIVE:'\nMANCPIDS DC    CL32' '\n         DC    CL13' CURRENT CP: '\nMANCPNUM DC    CL1'?'\n         DC    CL9' '\nMANLINE6 EQU   *,79\n         DC    CL9'CPU RATE:',X'25'\nMANCPURT DC    CL10' '\n         DC    CL34' SERVICE UNITS PER CPU SECOND     '\n         DC    X'26',CL7'RSVSTRT',X'25'\nMANRSTRT DC    CL4' '\nMANFSTRT DC    CL4' '\n         DC    CL8' FREE)  '\nMANLINE7 EQU   *,79\n         DC    CL14'MAX ASID VALUE',X'25'\nMANMAXAS DC    CL6' '\n         DC    X'26',CL10'   MAXUSER',X'25'\nMANMUSER DC    CL6' '\nMANFUSER DC    CL6' '\n         DC    CL9' FREE)   ',X'26',CL7'RSVNONR',X'25'\nMANRNONR DC    CL4' '\nMANFNONR DC    CL4' '\n         DC    CL8' FREE)  '\nMANLINE8 EQU   *,79\n         DC    CL12'CURRENT DATE',X'25'\nMANCVJUL DC    CL9' YYYY.DDD'\n         DC    X'26',CL9'TIME ZONE',X'25'\nTZSIGN   DC    CL1'S'\nTZSIZE   DC    CL8'HH:MM:SS'\n         DC    X'26',CL11' SMF STATUS',X'25'\nMANSMFST DC    CL8' '\n         DC    CL1' ',X'26'\nMANACFNM DC    CL4'RACF'\n         DC    X'25'\nMANACFST DC    CL8'NOT INST'\n         DC    CL1' '\nMANLINE9 EQU   *,79\n         DC    CL12'CURRENT DATE',X'25',C' '\nMANCVYMD DC    CL8'YY/MM/DD'\n         DC    X'26',CL9' IPL DATE',X'25',C' '\nMANIPYMD DC    CL8'YY/MM/DD'\n         DC    X'26',CL19' PRIMARY SUBSYSTEM ',X'25'\nMANPRISS DC    CL4'JES?'\n         DC    CL1' '\nMANPRISP DC    CL8' '\n         DC    CL3' '\nMANLINEA EQU   *,79\n         DC    CL4'SMF:',X'25',CL5' JWT('\nMANJWT   DC    CL4'HHMM'\n         DC    CL11')  MAXDORM('\nMANMXDRM DC    CL4'MMSS'\n         DC    CL10')  STATUS('\nMANSTTUS DC    CL6'HHMMSS'\n         DC    CL2') '\nMANBFWRT DC    CL12' '\n         DC    CL16' BUFFERS WRITTEN'\n         DC    CL4' '\nMANLINEG EQU   *,79\n         DC    CL4'SMF:',X'25',CL8' INTVAL('\nMANINTVL DC    CL2' '\n         DC    CL11')  SYNCVAL('\nMANSYNCV DC    CL2' '\n         DC    CL12')  MEMLIMIT('\nMANMEMLM DC    CL6' '\n         DC    CL8')   REC('\nMANREC17 DC    CL5' '\nMANASRES DC    CL6' '\n         DC    CL14' SMF RESTARTS '\nMANLINEH EQU   *,79\n         DC    CL4'SMF:',X'25',CL11' RECORDING('\nMANRECOR DC    CL10' '\n         DC    CL53' '\nMANLINEB EQU   *,79\n         DC    CL4'SMF:',X'25',CL5' SMF='\nMANSMFID DC    CL2' '\n         DC    CL5' '\nMANRCLST DC    CL12' '\n         DC    CL13' RECORDS LOST'\n         DC    CL5' '\nMANRCWRT DC    CL12' '\n         DC    CL16' RECORDS WRITTEN'\n         DC    CL6' '\nMANLINEC EQU   *,79\n         DC    CL44'APF AUTHORIZED LIBRARY LIST UPDATED LAST ON '\nMALTDATE DC    CL8'YY/MM/DD'\n         DC    CL4' AT '\nMALTTIME DC    CL8'HH:MM:SS'\n         DC    CL4' BY '\nMALTUSER DC    CL8'TSOUSER '\n         DC    CL3' '\nMANLINED EQU   *,79\n         DC    CL4'TSO:',X'25'\n         DC    CL11' LOGGED-ON='\nTSUSERCT DC    CL6' '\n         DC    CL13'    RECONLIM='\nTSRECNLM DC    CL6' '\n         DC    CL13'    BUFRSIZE='\nTSBUFSIZ DC    CL6' '\n         DC    CL13'    LOBFREXT='\nTSLOBEXT DC    CL6' '\nMANLINEE EQU   *,79\n         DC    CL4'TSO:',X'25'\n         DC    CL11'   USERMAX='\nTSUSERMX DC    CL6' '\n         DC    CL13'      CHNLEN='\nTSCHNLEN DC    CL6' '\n         DC    CL13'     SCRSIZE='\nTSSCRSIZ DC    CL6' '\n         DC    CL13'    HIBFREXT='\nTSHIBEXT DC    CL6' '\nMANLINEF EQU   *,79\n         DC    CL7'LOGREC:',X'25'\nMANLOGRC DC    CL11' '\n         DC    X'26',CL6' TCAM ',X'25'\nMANTCAM  DC    CL8' '\n         DC    X'26',CL7'  BCLMT',X'25'\nMANBCLMT DC    CL6' '\n         DC    X'26',CL8' LOGCLS ',X'25'\nMANLOGCL DC    CL1'?'\n         DC    X'26',CL8'  LOGLMT',X'25'\nMANLOGLM DC    CL10'0 '\n         DC    CL2'  '\nMSRVCLHD DC    CL79' SRVCLASS  DESCRIPTION                       PERIOD+\n               S  WORKLOAD  RESOURCE-GROUP '\nMPERODHD DC    CL79' SRVCLASS  PERIOD  GOAL-TYPE   %ILE  I-LVL  VELOCIT+\n               Y  RESP-TIME  DURATION-(SU) '\nMRSGRPHD DC    CL79' RESGROUP  DESCRIPTION                       MINIMU+\n               M  MAXIMUM  (CPU-SRV/SEC)   '\nHEADNGMM DC    CL79'                         MVS MANAGEMENT STATUS DISP+\n               LAY                         '\nHEADNGMC DC    CL79'                           COUPLING FACILITY DISPLA+\n               Y                           '\nMCCF1HDG DC    CL79'CF-NAME   STATUS   POLICY    | SYSNAMES |   STRUCTU+\n               RE-NAMES  STRUCTURE-STATUS  '\nMCCF2HD1 DC    CL79'         ----FACILITY-SPACE----  ----CONTROL--SPACE+\n               ----  ----DUMPING--SPACE----'\nMCCF2HD2 DC    CL79'CF-NAME   UNUSED  MAXIMUM  FULL   UNUSED  MAXIMUM  +\n               FULL   UNUSED  MAXIMUM  FULL'\nMCCF3HDG DC    CL79'CF-NAME  BAD-IO NOPATH SUBCHAN DEV#  STATUS  DEVBUS+\n               Y ALLPATH UTILCNT   IO/SEC  '\nMCST1HDG DC    CL79'STRUCTURE NAME    TYPE    STATUS          CF-NAME  +\n                    SIZE      USED   FULL  '\nMCST2HDG DC    CL79'CONNECTOR NAME      SYSTEM    JOB NAME    CONNECTOR+\n                STATUS                     '\nMMSFORMC DC    CL36'ENTER \"C\" FOR COUPLING FACILITY DATA'\nMMSFORMS DC    CL79'ENTER \"S\" FOR SYSPLEX SYSTEMS, \"P\" FOR SYSPLEX PATH+\n               S OR \"G\" FOR SYSPLEX GROUPS '\nMSPF3MSG DC    CL48'PRESS PF3/15 FOR COUPLING FACILITY OVERVIEW DATA'\nMCSTRMSG DC    CL79' PLACE CURSOR ON LINE CONTAINING STRUCTURE NAME AND+\n                PRESS <ENTER> FOR DETAILS  '\nMNOTALOC DC    C'NOT '\nMISALLOC DC    C'ALLOCATED'\nMSUBRMSG DC    CL25'SUBROUTINE RETURN CODE IS'\nCFSTATAB EQU   *                 COUPLING FACILITY STATUS LABEL TABLE.\n         DC    CL9' ACTIVE  '\n         DC    CL9' FAILED  '\n         DC    CL9' PENDING '\n         DC    CL9'RECONCILE'\n         DC    CL9' UNKNOWN '\nSTSTATAB EQU   *                 STRUCTURE STATUS LABEL TABLE.\n         DC    CL12'ACTIVE      '\n         DC    CL12'FAILED      '\n         DC    CL12'REBUILD/OLD '\n         DC    CL12'REBUILD/NEW '\n         DC    CL12'TRANSITIONAL'\n         DC    CL12'UNKNOWN     '\nSCSTATAB EQU   *                 SUBCHANNEL STATUS LABEL TABLE.\n         DC    CL8'NOT OPER'\n         DC    CL8'NOT USED'\n         DC    CL8' ACTIVE '\n         DC    CL8'UNKNOWN '\nSTTYPTAB EQU   *                 STRUCTURE TYPE LABEL TABLE.\n         DC    CL5'LIST '\n         DC    CL5'LOCK '\n         DC    CL5'CACHE'\n         DC    CL5'UNKN '\nCNSTATAB EQU   *                 CONNECTOR STATUS LABEL TABLE.\n         DC    CL17'ACTIVE  '\n         DC    CL17'FAILED PERSISTENT'\n         DC    CL17'FAILING '\n         DC    CL17'DISCONNECTING'\n         DC    CL17'UNKNOWN '\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\nMICATCTB DC    4XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  00->3F\n         DC    2XL16'00FFFFFFFFFFFFFFFFFF000000000000'  40->5F\n         DC    1XL16'0000FFFFFFFFFFFFFFFF000000000000'  60->6F\n         DC    1XL16'0000FFFFFFFFFFFFFF00000000000000'  70->7F\n         DC    3XL16'FF000000000000000000FFFFFFFFFFFF'  80->AF\n         DC    1XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  B0->BF\n         DC    2XL16'00000000000000000000FFFFFFFFFFFF'  C0->DF\n         DC    1XL16'00FF0000000000000000FFFFFFFFFFFF'  E0->EF\n         DC    1XL16'00000000000000000000FFFFFFFFFFFF'  F0->FF\n         TITLE 'SYSPLEX STATUS MONITOR SUBROUTINE'\n         USING MSSCTEND,R11,R10,R8,R9\nMSYSPLEX DS    0H\n         LA    R9,2048(,R8)      INITIALIZE FOURTH\n         LA    R9,2048(,R9)                        BASE REGISTER.\n         SPACE\n         CLI   MORSMODE,C'S'     SHOW SYSPLEX SYSTEM DETAILS?\n         BNE   MPTHPLEX          NO.\n         MVC   LL-79(79,R2),HEADNGMS\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVI   XCFFNCTN,C'S'     REQUEST SYSTEM ACTIVITY.\n         LA    R1,XCFPLIST       POINT TO XCF LIST ROUTINE PARAMETER.\n         L     R15,=V(IMXCF)     GET XCF LIST ROUTINE ENTRY POINT.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESSFUL CALL?\n         BNZ   MSXCFBAD          NO.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXSHDG1\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXSHDG2\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         L     R3,XCFRAREA       POINT TO RETURNED AREA.\n         USING INFTXD1,R3\n         LA    R5,TXD1SYSA       POINT TO FIRST SYSTEM RECORD.\n         L     R7,TXD1SYS#       GET NUMBER OF SYSTEM ENTRIES.\n         USING TXD1SYS,R5\n         USING MSLINE1,R2\nMXCFSLP1 MVC   MSL1SYSN,TXD1SYSN SHOW SYSTEM NAME.\n         ICM   R1,8,TXD1FLG1     GET SYSTEM STATUS.\n         LA    R0,6              GET KNOWN STATUS COUNT.\n         LA    R15,XSSTATAB      POINT TO STATUS LABEL TABLE.\nXSSTATLP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MSXSSTAT          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,8(,R15)       POINT TO NEXT STATUS LABEL.\n         BCT   R0,XSSTATLP       TEST NEXT BIT.\nMSXSSTAT MVC   MSL1STAT,0(R15)   SHOW SYSTEM STATUS.\n         ICM   R1,8,TXD1FLG2     GET DIRECTION INDICATOR.\n         LA    R0,3              GET KNOWN DIRECTION COUNT.\n         LA    R15,XSDIRTAB      POINT TO DIRECTION LABEL TABLE.\nXSDIR1LP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MSXSDIR1          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,3(,R15)       POINT TO NEXT DIRECTION LABEL.\n         BCT   R0,XSDIR1LP       TEST NEXT BIT.\nMSXSDIR1 MVC   MSL1DIRN,0(R15)   SHOW DIRECTION.\n         MVC   MSL1TCLS,TXD1TCLS SHOW TRANSPORT CLASS.\n         L     R0,TXD1#PTH       SHOW NUMBER OF PATHS.\n         CVD   R0,WORK\n         MVC   MSL1#PTH,ED5\n         ED    MSL1#PTH,WORK+5\n         L     R1,TXD1#NOP       SHOW NUMBER OF NO PATH OCCURRENCES.\n         LA    R15,MSL1#NOP      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD1#BSY       SHOW NUMBER OF NO BUFFER OCCURRENCES.\n         LA    R15,MSL1#BSY      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         LA    R4,TXD1#MXB       POINT TO BUFFER SPACE SIZES.\n         LA    R6,MSL1BFMX       POINT TO BUFFER SPACE DISPLAY AREA.\n         BAS   R14,MCSTUSPC      SHOW BUFFER SPACE SIZE AND USAGE.\n         MVI   MSL1BFMX+8,C'K'   DENOTE KILOBYTES.\n         MVI   MSL1BFUS+8,C'K'   DENOTE KILOBYTES.\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         A     R5,TXD1SYSL       POINT TO THE NEXT SYSTEM RECORD.\n         BCT   R7,MXCFSLP1       PROCESS NEXT SYSTEM ENTRY.\n         DROP  R2                MSLINE1.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXSHDG3\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXSHDG4\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         LA    R5,TXD1SYSA       POINT TO FIRST SYSTEM RECORD.\n         L     R7,TXD1SYS#       GET NUMBER OF SYSTEM ENTRIES.\n         USING MSLINE2,R2\nMXCFSLP2 MVC   MSL2SYSN,TXD1SYSN SHOW SYSTEM NAME.\n         ICM   R1,8,TXD1FLG2     GET DIRECTION INDICATOR.\n         LA    R0,3              GET KNOWN DIRECTION COUNT.\n         LA    R15,XSDIRTAB      POINT TO DIRECTION LABEL TABLE.\nXSDIR2LP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MSXSDIR2          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,3(,R15)       POINT TO NEXT DIRECTION LABEL.\n         BCT   R0,XSDIR2LP       TEST NEXT BIT.\nMSXSDIR2 MVC   MSL2DIRN,0(R15)   SHOW DIRECTION.\n         MVC   MSL2TCLS,TXD1TCLS SHOW TRANSPORT CLASS.\n         L     R1,TXD1#BIG       MSG COUNT: LEN TOO BIG FOR CLASS BUFR.\n         LA    R15,MSL2#BIG      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD1#FIT       MSG COUNT: LEN FITTED IN CLASS BUFR.\n         LA    R15,MSL2#FIT      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD1#SML       MSG COUNT: LEN LESS THAN CLASS BUFR.\n         LA    R15,MSL2#SML      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD1#OVR       MSG COUNT: LEN OVER OPTIMAL LENGTH.\n         LA    R15,MSL2#OVR      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD1#TCL       LONGEST LENGTH FITTING IN BUFFER.\n         LA    R15,MSL2#TCL      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R0,TXD1#SMX       SHOW DEFAULT MESSAGE BUFFER SIZE.\n         CVD   R0,WORK\n         MVC   MSL2#SMX,ED7\n         ED    MSL2#SMX,WORK+4\n         MVI   MSL2#SMX+8,C'K'   DENOTE KILOBYTES.\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         A     R5,TXD1SYSL       POINT TO THE NEXT SYSTEM RECORD.\n         BCT   R7,MXCFSLP2       PROCESS NEXT SYSTEM ENTRY.\n         DROP  R2,R3,R5          MSLINE2, INFTXD1, TXD1SYS.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         L     R1,XCFRAREA       POINT TO RETURNED AREA.\n         L     R0,0(,R1)         GET SIZE OF RETURNED AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=130\n         ST    R15,XCFRAREA      RESET AREA POINTER.\n         B     MSUMMARY          COMPLETED OUTPUT FOR \"MS\".\n         SPACE\nMPTHPLEX CLI   MORSMODE,C'P'     SHOW SYSPLEX PATH DETAILS?\n         BNE   MGRPPLEX          NO, IT BETTER BE SYSPLEX GROUPS.\n         MVC   LL-79(79,R2),HEADNGMP\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVI   XCFFNCTN,C'P'     REQUEST PATH ACTIVITY.\n         LA    R1,XCFPLIST       POINT TO XCF LIST ROUTINE PARAMETER.\n         L     R15,=V(IMXCF)     GET XCF LIST ROUTINE ENTRY POINT.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESSFUL CALL?\n         BNZ   MSXCFBAD          NO.\n         SPACE\n         L     R3,XCFRAREA       POINT TO RETURNED AREA.\n         USING INFTXD2,R3\n         LA    R5,TXD2PTHA       POINT TO FIRST SYSTEM RECORD.\n         L     R7,TXD2PTH#       GET NUMBER OF SYSTEM ENTRIES.\n         LTR   R7,R7             ANY PATHS?\n         BNP   MPATHSOK          NO.\n         USING TXD2PTH,R5\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXPHDG1\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXPHDG2\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         USING MPLINE1,R2\nMXCFPLP1 MVC   MPL1PDEV,TXD2PDEV SHOW CTC DEVICE NUMBER.\n         MVC   MPL1PSYS,TXD2PSYS SHOW SYSTEM NAME.\n         ICM   R1,12,TXD2FLG1    GET STATUS INDICATOR.\n         LA    R0,10             GET KNOWN STATUS COUNT.\n         LA    R15,XPSTATAB      POINT TO STATUS LABEL TABLE.\nXPSTATLP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MSXPSTAT          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,10(,R15)      POINT TO NEXT STATUS LABEL.\n         BCT   R0,XPSTATLP       TEST NEXT BIT.\nMSXPSTAT MVC   MPL1STAT,0(R15)   SHOW PATH STATUS.\n         ICM   R1,8,TXD2FLG3     GET DIRECTION INDICATOR.\n         LA    R0,2              GET KNOWN DIRECTION COUNT.\n         LA    R15,XPDIRTAB      POINT TO DIRECTION LABEL TABLE.\nXPDIR1LP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MSXPDIR1          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,3(,R15)       POINT TO NEXT DIRECTION LABEL.\n         BCT   R0,XPDIR1LP       TEST NEXT BIT.\nMSXPDIR1 MVC   MPL1DIRN,0(R15)   SHOW PATH DIRECTION.\n         MVC   MPL1TCLS,TXD2TCLS SHOW TRANSPORT CLASS.\n         MVC   MPL1TDEV,TXD2TDEV SHOW TARGET DEVICE NUMBER.\n         MVC   MPL1TSYS,TXD2TSYS SHOW TARGET SYSTEM NAME.\n         L     R1,TXD2MXMS       SHOW PATH MAXIMUM MESSAGE LIMIT.\n         LA    R15,MPL1MXMS      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD2#USE       SHOW BUFFER SPACE CURRENTLY IN USE.\n         LA    R15,MPL1#USE      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         MVI   MPL1#USE+8,C'K'   DENOTE KILOBYTES.\n         L     R1,TXD2#IBR       SHOW REFUSED MSG BUFFER RQST COUNT.\n         LA    R15,MPL1#IBR      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         A     R5,TXD2PTHL       POINT TO THE NEXT PATH RECORD.\n         BCT   R7,MXCFPLP1       PROCESS NEXT PATH ENTRY.\n         DROP  R2                MPLINE1.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXPHDG3\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXPHDG4\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         LA    R5,TXD2PTHA       POINT TO FIRST SYSTEM RECORD.\n         L     R7,TXD2PTH#       GET NUMBER OF SYSTEM ENTRIES.\n         USING MPLINE2,R2\nMXCFPLP2 MVC   MPL2PDEV,TXD2PDEV SHOW CTC DEVICE NUMBER.\n         ICM   R1,8,TXD2FLG3     GET DIRECTION INDICATOR.\n         LA    R0,2              GET KNOWN DIRECTION COUNT.\n         LA    R15,XPDIRTAB      POINT TO DIRECTION LABEL TABLE.\nXPDIR2LP LTR   R1,R1             STATUS FLAG BIT ON?\n         BM    MSXPDIR2          YES.\n         SLL   R1,1              NO, PROMOTE NEXT BIT.\n         LA    R15,3(,R15)       POINT TO NEXT DIRECTION LABEL.\n         BCT   R0,XPDIR2LP       TEST NEXT BIT.\nMSXPDIR2 MVC   MPL2DIRN,0(R15)   SHOW PATH DIRECTION.\n         MVC   MPL2TDEV,TXD2TDEV SHOW TARGET DEVICE NUMBER.\n         MVC   MPL2TSYS,TXD2TSYS SHOW TARGET SYSTEM NAME.\n         L     R1,TXD2MRET       SHOW MAXIMUM PATH RETRY LIMIT.\n         LA    R15,MPL2MRET      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD2#RET       SHOW CURRENT PATH RETRY COUNT.\n         LA    R15,MPL2#RET      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD2#RST       SHOW CUMULATIVE NUMBER OF RESTARTS.\n         LA    R15,MPL2#RST      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD2#SIG       SHOW SIGNAL TRANSFER COUNT.\n         LA    R15,MPL2#SIG      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD2#ACT       SHOW SIGNAL PENDING TRANSFER COUNT.\n         LA    R15,MPL2#ACT      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD2#SUS       SHOW SIGNAL REQUESTS WHILE NOT BUSY.\n         LA    R15,MPL2#SUS      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD2#APP       SHOW SIGNAL REQUESTS WHILE BUSY.\n         LA    R15,MPL2#APP      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         A     R5,TXD2PTHL       POINT TO THE NEXT PATH RECORD.\n         BCT   R7,MXCFPLP2       PROCESS NEXT PATH ENTRY.\n         DROP  R2,R3,R5          MPLINE1, INFTXD2, TXD2PTH.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\nMPATHSOK L     R1,XCFRAREA       POINT TO RETURNED AREA.\n         L     R0,0(,R1)         GET SIZE OF RETURNED AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=130\n         ST    R15,XCFRAREA      RESET AREA POINTER.\n         B     MSUMMARY          COMPLETED OUTPUT FOR \"MP\".\n         SPACE\nMGRPPLEX MVC   LL-79(79,R2),HEADNGMG\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVI   XCFFNCTN,C'G'     REQUEST GROUP ACTIVITY.\n         LA    R1,XCFPLIST       POINT TO XCF LIST ROUTINE PARAMETER.\n         L     R15,=V(IMXCF)     GET XCF LIST ROUTINE ENTRY POINT.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESSFUL CALL?\n         BNZ   MSXCFBAD          NO.\n         SPACE\n         L     R3,XCFRAREA       POINT TO RETURNED AREA.\n         USING INFTXD3,R3\n         LA    R5,TXD3GRPA       POINT TO FIRST SYSTEM RECORD.\n         L     R7,TXD3GRP#       GET NUMBER OF SYSTEM ENTRIES.\n         LTR   R7,R7             ANY GROUPS?\n         BNP   MGROUPOK          NO.\n         USING TXD3GRP,R5\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXGHDG1\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVC   LL-79(79,R2),MSXGHDG2\n         BAS   R14,MSPCLINE      LINE NOW COMPLETE.\n         USING MGLINE1,R2\nMXCFGLP1 MVC   MGL1GRPN,TXD3GRPN SHOW GROUP NAME.\n         MVC   MGL1MEMN,TXD3MEMN SHOW MEMBER NAME.\n         SLR   R1,R1\n         CLI   TXD3FLG1,5        KNOWN STATUS TYPE?\n         BH    *+8               NO.\n         IC    R1,TXD3FLG1       YES, LOAD IT.\n         LA    R1,XGSTATAB(R1)   POINT TO STATUS LABEL.\n         MVC   MGL1STAT,0(R1)    SHOW MEMBER STATUS.\n         MVC   MGL1SYSN,TXD3SYSN SHOW SYSTEM NAME.\n         UNPK  MGL1SSLT(3),TXD3SSLT(2)\n         TR    MGL1SSLT,HEX-C'0' SHOW SYSTEM SLOT NUMBER.\n         MVI   MGL1SSLT+2,C' '\n         CLI   MGL1SSLT,C'0'     LEADING ZERO?\n         BNE   *+8               NO.\n         MVI   MGL1SSLT,C' '     YES, SUPPRESS IT.\n         MVC   MGL1JJOB,TXD3JJOB SHOW JOB NAME CURRENT AT JOIN TIME.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTEXT2        POINT TO THE CVT VS1/VS2 COMMON EXTN.\n         DROP  R1                CVT.\n         USING CVTXTNT2,R1\n         LM    R14,R15,CVTLDTO   GET LOCAL DATE/TIME OFFSET.\n         DROP  R1                CVTXTNT2.\n         LA    R0,1              PREPARE FOR CARRY.\n         AL    R15,TXD3TOD+4     GET LOW ORDER LOCAL TIME.\n         BC    12,MSCARIED       NO CARRY.\n         AR    R14,R0            DO CARRY.\nMSCARIED AL    R14,TXD3TOD       GET HIGH ORDER LOCAL TIME.\n         STM   R14,R15,TXD3TOD   STORE LOCALIZED TIME.\n         STCKCONV STCKVAL=TXD3TOD, POINT TO INPUT STCK VALUE.          +\n               CONVVAL=WORK,       POINT TO OUTPUT FOUR WORDS.         +\n               TIMETYPE=DEC,       GET TIME DECIMAL DIGITS (DEFAULT).  +\n               DATETYPE=YYYYMMDD,  SPECIFY DATE FORMAT.                +\n               MF=(E,STCKCNVL)     SPECIFY PARAMETER LIST.\n         UNPK  MGL1TOD(7),WORK2+1(4)            SHOW YYMMDD.\n         UNPK  MGL1TOD+7(7),WORK(4)             SHOW HHMMSS.\n         TR    MGL1TOD,HEX-C'0'  SUPERFLUOUS.\n         MVI   MGL1TOD+6,C' '\n         MVI   MGL1TOD+13,C' '\n         L     R1,TXD3SCNT       SHOW SENT SIGNAL COUNT.\n         LA    R15,MGL1SCNT      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         L     R1,TXD3RCNT       SHOW RECEIVED SIGNAL COUNT.\n         LA    R15,MGL1RCNT      POINT TO OUTPUT AREA.\n         BAS   R14,MCFP7\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         A     R5,TXD3GRPL       POINT TO THE NEXT GROUP RECORD.\n         BCT   R7,MXCFGLP1       PROCESS NEXT GROUP ENTRY.\n         DROP  R2,R3,R5          MGLINE1, INFTXD3, TXD3GRP.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\nMGROUPOK L     R1,XCFRAREA       POINT TO RETURNED AREA.\n         L     R0,0(,R1)         GET SIZE OF RETURNED AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=130\n         ST    R15,XCFRAREA      RESET AREA POINTER.\n         B     MSUMMARY          COMPLETED OUTPUT FOR \"MG\".\n         SPACE\nMSXCFBAD MVI   4(R2),X'F8'       NO, HIGH INTENSITY FOR ERROR.\n         MVI   LL-80(R2),X'F2'   RED FOR ERROR.                 (I3279)\n         CVD   R15,WORK\n         MVC   LL-10(6,R2),ED5\n         ED    LL-10(6,R2),WORK+5\n         MVC   LL-35(25,R2),MSUBRMSG\n         MVC   LL-50(8,R2),=C'ERROR  -'\n         BAS   R14,MADDLINE      LINE NOW COMPLETE.\n         BAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         B     MSUMMARY          REPORT FAILURE.\n         SPACE 2\n         DROP  R11,R10,R8,R9     MSSCTEND.\n         TITLE 'SYSPLEX STATUS MONITOR - VARIABLES AND CONSTANTS'\nXCFPLIST DC    A(XCFFNCTN)       PLIST FOR IMXCF ROUTINE.\nXCFFNCTN DC    CL4'?A  '  \\____  FUNCTION NAME.\nXCFRAREA DC    A(0)       /      ADDRESS OF RETURNED AREA.\nHEADNGMS DC    CL79'                            SYSPLEX SYSTEM DISPLAY +\n                                           '\nHEADNGMP DC    CL79'                             SYSPLEX PATH DISPLAY  +\n                                           '\nHEADNGMG DC    CL79'                            SYSPLEX GROUP DISPLAY  +\n                                           '\nMSXSHDG1 DC    CL79'-------SYSTEM--------  TRANSPORT PATHS NO-PATH NO-B+\n               UFR -----BUFFER---SPACE-----'\nMSXSHDG2 DC    CL79'NAME     STATUS   DIR  CLASS    IN-USE   COUNT   CO+\n               UNT  MAXIMUM   CURRENT  USED'\nMSXSHDG3 DC    CL79'SYSTEM        TRANSPORT --------MESSAGE---COUNTS---+\n               -----   LONGEST   DFLT MSG  '\nMSXSHDG4 DC    CL79'NAME     DIR  CLASS      TOO-BIG  FITTED   SMALL >O+\n               PTIML  FIT-SIZE   BUFRSIZE  '\nMSXPHDG1 DC    CL79'PATH SYSTEM   PATH          TRANSPORT PATH-TARGET  +\n                MAXIMUM   IN-USE    MSG-LIM'\nMSXPHDG2 DC    CL79'DEV# NAME     STATUS-----DIR CLASS    DEV# SYSTEM  +\n                MSG-LIM  BUFRSPC   REFUSALS'\nMSXPHDG3 DC    CL79'PATH     PATH-TARGET   MAXIMUM CURRENT RESTART ----+\n               ----SIGNAL--REQUESTS--------'\nMSXPHDG4 DC    CL79'DEV# DIR DEV# SYSTEM  RETRYLIM RETRYCT   TOTAL XFER+\n               RED PENDING WHN\u00acBSY WHEN-BSY'\nMSXGHDG1 DC    CL79'GROUP    ------------MEMBER------------ JOINTIME ST+\n               ATUS-CHANGE  -SIGNAL-COUNTS-'\nMSXGHDG2 DC    CL79'NAME     NAME        STATUS SYSTEM+SLOT JOB-NAME YY+\n               MMDD HHMMSS     SENT RECEIVD'\nXSSTATAB EQU   *                 SYSTEM SYSPLEX STATUS LABEL TABLE.\n         DC    CL8'RESERVED'\n         DC    CL8'ACTIVE  '\n         DC    CL8'MISSING '\n         DC    CL8'PARTING '\n         DC    CL8'XCFLOCAL'\n         DC    CL8'CLEAN-UP'\n         DC    CL8'UNKNOWN '\nXSDIRTAB EQU   *                 SYSTEM SYSPLEX DIRECTION LABEL TABLE.\n         DC    CL3'IN '\n         DC    CL3'OUT'\n         DC    CL3'LCL'\n         DC    CL3' ? '\nXPSTATAB EQU   *                 SYSPLEX PATH STATUS LABEL TABLE.\n         DC    CL10'STARTING  '\n         DC    CL10'RESTARTING'\n         DC    CL10'ACTIVE    '\n         DC    CL10'STOPPING  '\n         DC    CL10'COMMS WAIT'\n         DC    CL10'NOT OPER  '\n         DC    CL10'STOP FAILD'\n         DC    CL10'REBUILDING'\n         DC    CL10'QUIESCING '\n         DC    CL10'QUIESCED  '\n         DC    CL10'UNKNOWN   '\nXPDIRTAB EQU   *                 SYSPLEX PATH DIRECTION LABEL TABLE.\n         DC    CL3'IN '\n         DC    CL3'OUT'\n         DC    CL3' ? '\nXGSTATAB EQU   *                 SYSPLEX GROUP STATUS LABEL TABLE.\n         DC    CL1'?'            UNKNOWN\n         DC    CL1'?'            UNKNOWN\n         DC    CL1'C'            CREATED\n         DC    CL1'A'            ACTIVE\n         DC    CL1'Q'            QUIESCED\n         DC    CL1'F'            FAILED\n         LTORG\n         SPACE\n         DS    0H\n         TITLE 'MVS DYNAMIC EXIT DISPLAY'\n         USING MSSCTEND,R11,R10,R8\nMDYNEXIT LARL  R9,MDXWORK        POINT TO WORKING STORAGE.\n         USING MDXWORK,R9\n         JAS   R14,MSPCLINE      INSERT A BLANK LINE.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         ICM   R1,15,DYNEXADR    ALREADY HAVE STORAGE?\n         JNZ   MDXSTGOK          YES, REUSE IT.\n         LHI   R0,15384          PICK A SIZE.\n         ST    R0,DYNEXSIZ       SAVE IT.\n         GETMAIN RC,LV=(0),LOC=(31,64)\n         LTR   R15,R15           SUCCESS?\n         JZ    MDXSTGOK          YES.\n         JAS   R14,MSPCLINE      MESSAGE LINE NOW COMPLETE.\n         LH    R15,WORK+2\n         CHI   R15,4\n         JH    MPOLQERY\nMDXSTGOK ST    R1,DYNEXADR       SAVE STORAGE ADDRESS.\n         LR    R3,R1             POINT TO RETURN AREA.\n         CSVDYNEX REQUEST=LIST,                                        +\n               EXITNAME=ALL_EXITS,                                     +\n               ANSAREA=(R3),                                           +\n               ANSLEN=DYNEXSIZ,                                        +\n               EXAAVER=1,                                              +\n               EXITTYPE=ANY,                                           +\n               MF=(E,DYNEXLST)\n         LTR   R15,R15           SUCCESS?\n         JZ    MDXGOOD           YES.\n         STM   R15,R0,WORK       NO, SAVE RETURN AND REASON CODES.\n         MVC   LL-55(12,R2),=CL12'CSVDYNEX RC='\n         UNPK  LL-43(3,R2),WORK+3(2)\n         TR    LL-43(2,R2),HEX-C'0'\n         MVC   LL-41(8,R2),=CL8' REASON='\n         UNPK  LL-33(9,R2),WORK+4(5)\n         TR    LL-33(8,R2),HEX-C'0'\n         MVI   LL-25(R2),C' '\n         JAS   R14,MSPCLINE      MESSAGE LINE NOW COMPLETE.\n         L     R15,WORK          RELOAD RETURN CODE.\n         CHI   R15,4             ANY DATA RETURNED?\n         JH    MPOLQERY          NO, RETURN.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         USING EXAAHDR,R3\n         USING MDXLINE,R2\nMDXGOOD  ICM   R6,15,EXAAH#REC   GET EXAAE COUNT.\n         JNP   MPOLQERY          RETURN IF NONE.\n         MVC   MDXNAME,=CL16'EXIT POINT NAME'\n         MVC   MDXMODNM,=CL8'MODULE'\n         MVC   MDXFLAGS,=CL3'FLG'\n         MVC   MDXENTRY,=CL8'ENTRY-PT'\n         MVC   MDXLDPNT,=CL8'LOAD-PNT'\n         MVC   MDXLEN,=CL6'LENGTH'\n         MVC   MDXJOB,=CL8'JOB-NAME'\n         JAS   R14,MSPCLINE      HEADING NOW COMPLETE.\n         L     R3,EXAAHFIRST@    POINT TO THE FIRST ONE.\n         DROP  R3                EXAAHDR.\n         USING EXAAE,R3\nMDXAAELP LH    R4,EXAAE#ENT      GET EXAAM1 COUNT.\n         LTR   R4,R4             ARE THERE ANY?\n         JNP   MDXNXAAM          NO.\n         L     R5,EXAAEFIRSTENT@ POINT TO THE FIRST ONE.\n         USING EXAAM1,R5\nMDXAAMLP MVC   MDXNAME,EXAAENAME\n         MVC   MDXMODNM,EXAAM1NAME\n         UNPK  MDXFLAGS,EXAAM1FLAGS(2)\n         TR    MDXFLAGS(2),HEX-C'0'\n         MVI   MDXFLAGS+2,C' '\n         TM    EXAAM1FLAGS,EXAAM1JOBNAMEPROVIDED\n         JNO   MDXJOBOK\n         MVC   MDXJOB,EXAAM1JOBNAME\nMDXJOBOK UNPK  MDXENTRY(9),EXAAM1EPADDR(5)\n         TR    MDXENTRY,HEX-C'0'\n         MVI   MDXENTRY+8,C' '\n         ICM   R0,15,EXAAM1LOADPT\n         JZ    MDXLDPTX          LOAD POINT NOT KNOWN.\n         UNPK  MDXLDPNT(9),EXAAM1LOADPT(5)\n         TR    MDXLDPNT,HEX-C'0'\n         MVI   MDXLDPNT+8,C' '\nMDXLDPTX ICM   R0,15,EXAAM1MODLEN\n         JZ    MDXSIZEX          LENGTH NOT KNOWN.\n         UNPK  MDXLEN(7),EXAAM1MODLEN+2(4)\n         TR    MDXLEN,HEX-C'0'\n         MVI   MDXLEN+6,C' '\nMDXSIZEX JAS   R14,MADDLINE      DETAIL LINE NOW COMPLETE.\n         L     R5,EXAAM1NEXT@    POINT TO NEXT EXAAM1.\n         JCT   R4,MDXAAMLP       PROCESS IT.\n         DROP  R5                EXAAM1.\nMDXNXAAM L     R3,EXAAENEXT@     POINT TO NEXT EXAAE.\n         JCT   R6,MDXAAELP       PROCESS IT.\n         DROP  R2                MDXLINE.\n         DROP  R3                EXAAE.\n         LM    R0,R1,DYNEXSIZ    FREE CSVDYNEX STORAGE DETAILS.\n         FREEMAIN RU,LV=(0),A=(1)\n         SR    R15,R15\n         ST    R15,DYNEXADR      ZERO STORAGE POINTER.\n         J     MPOLQERY\n         DROP  R9                MDXWORK.\n         DROP  R11,R10,R8        MSSCTEND.\n         TITLE 'MVS DYNAMIC EXIT DISPLAY - WORKING STORAGE'\nMDXWORK  DC    0D\n         CSVDYNEX MF=(L,DYNEXLST)    CSVDYNEX PARAMETER LIST.\nDYNEXSIZ DC    F'0'              SIZE OF CSVDYNEX AREA.\nDYNEXADR DC    A(0)              ADDRESS OF CSVDYNEX AREA.\nMDXAAE#  DC    F'0'              EXAAE COUNT.\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAN": {"ttr": 19210, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x06\\x00I\\x00\\x94\\x14?\\x01\\x11\\x03O\\x015\\x01\\x01\\x01\\n\\x00\\x1c\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "43.06", "flags": 0, "createdate": "1994-05-23T00:00:00", "modifydate": "2011-02-03T01:35:49", "lines": 257, "newlines": 266, "modlines": 28, "user": "GREG"}, "text": "*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD\n         TITLE 'NUCLEUS CSECT MAP DISPLAY SUBROUTINE'\n         USING NUCLKMAP,R11\nNUCLKMAP DS    0H\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   WINTOP,NTOPLINE   SET TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' ADJUST ANY COMMAND INPUT.\n         B     CMDSCANN          PROCESS IT.\n         SPACE\nREDONUCM L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   8(R2),X'F3'       SHOW HEADING IN PINK.          (I3279)\n         MVC   LL-79(79,R2),HEADINGN     LOAD DISPLAYABLE\n         TR    LL-79(79,R2),XLATETBL          HEADING.\n         LA    R2,LL(,R2)        POINT PAST HEADING.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVC   LL-79(79,R2),NUCMCOLS     LOAD DISPLAYABLE\n         TR    LL-79(39,R2),XLATETBL          HEADING.\n         LA    R2,LL(,R2)        POINT PAST HEADING.\n         LA    R1,2\n         ST    R1,WINLINES       INITIALIZE LINE COUNTER.\n         MVC   WINTOP,NTOPLINE   SET TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         BAS   R14,NUCMPDTL      GET NUCLEUS MAP ADDR AND ENTRY COUNT.\nNEXTNUCE MVC   0(LL-79,R2),LOWX\n         MVI   LL-79(R2),C' '    BLANK DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         CLC   NUCMNAME,0(R3)    WAS THIS NAME REQUESTED?\n         BNE   NUCATROK          NO.\n         MVC   0(LL-79,R2),HIGHX\nNUCATROK TM    12(R3),X'10'      JUST AN ENTRY POINT?\n         BZ    NUCENTPT          YES, PROCESS IT.\n         MVC   LL-73(8,R2),0(R3) NO, SHOW CSECT NAME.\n         UNPK  LL-62(9,R2),8(5,R3)\n         TR    LL-62(8,R2),HEX-C'0'\n*        MVI   LL-54(R2),C' '    SHOW ENTRY POINT ADDRESS.\n         UNPK  LL-51(7,R2),13(4,R3)\n         TR    LL-51(6,R2),HEX-C'0'\n         MVI   LL-45(R2),C' '    SHOW CSECT SIZE.\n         TM    12(R3),X'23'      EXPLICIT AMODE?\n         BZ    GOTNUCAM          NO, AMODE 24 BY DEFAULT.\n         MVC   LL-42(8,R2),=C'AMODE 64'\n         TM    12(R3),X'20'      AMODE 64?\n         BO    GOTNUCAM          YES.\n         MVI   LL-36(R2),C'2'    NO.\n         TM    12(R3),X'02'      CORRECT?\n         BZ    GOTNUCAM          YES.\n         MVC   LL-36(2,R2),=C'31'\n         TM    12(R3),X'01'      CORRECT?\n         BZ    GOTNUCAM          YES.\n         MVC   LL-36(3,R2),=C'ANY'\nGOTNUCAM TM    12(R3),X'08'      RSECT?\n         BZ    DONENCST          NO.\n         MVC   LL-8(3,R2),=C'R-O'\nDONENCST TR    LL-79(79,R2),XLATETBL    HANDLE BAD ENTRY POINT NAME.\n         MVI   LL-63(R2),X'24'   MAKE ENTRY ADDRESS TAB SELECTABLE.\n         MVI   LL-54(R2),X'25'\n         B     DONENUCE          CSECT PROCESSING FINISHED.\nNUCENTPT MVC   LL-30(8,R2),0(R3) SHOW ENTRY POINT NAME.\n         UNPK  LL-19(9,R2),8(5,R3)\n         TR    LL-19(8,R2),HEX-C'0'\n*        MVI   LL-11(R2),C' '    SHOW ENTRY POINT ADDRESS.\n         TR    LL-79(79,R2),XLATETBL    HANDLE BAD ENTRY POINT NAME.\n         MVI   LL-20(R2),X'24'   MAKE ENTRY ADDRESS TAB SELECTABLE.\n         MVI   LL-11(R2),X'25'\nDONENUCE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         LA    R3,16(,R3)        POINT TO NEXT NUCLEUS MAP ENTRY.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNN          IF YES, THEN FORGET SUMMARY LINE.\n         BCT   R4,NEXTNUCE       NO, CREATE NEXT ENTRY LINE.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNN LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNN L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         L     R15,WINMANAD      YES, POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   NTOPLINE,WINTOP   SAVE TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BOR   R9                YES, RETURN TO MAINLINE VIA SCREENIO.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    NUCAUTO           YES.\nCMDSCANN CLI   INCHARS,C'A'      REQUEST TO LOCATE A NUCLEUS ADDRESS?\n         BE    NUCADDR           YES.\n         CLI   INCHARS,C'N'      REQUEST TO LOCATE AN ENTRY NAME?\n         BE    NUCNAME           YES.\n         CLI   INCHARS,C' '      DISPLAY UPDATE REQUESTED?\n         BNE   GIVEHLPN          NO, SHOW HELP PANEL.\n*        CLI   INBUFF+1,3        CURSOR ON HEADING LINE?\n*        BL    REDONUCM          YES, RESHOW THE SCREEN.\n*        CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n*        BE    REDONUCM          YES, RESHOW THE SCREEN.\n         SLR   R0,R0\n         IC    R0,INBUFF+1       GET THE CURSOR ROW NUMBER.\n         AHI   R0,-3             DO NOT COUNT HEADING LINES.\n         BM    REDONUCM          CURSOR ON HEADING LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         A     R0,WINTOP         GET DETAIL LINE NUMBER.\n         AH    R0,WINHDGCT       COUNT THE HEADING LINES.\n         C     R0,WINLINES       BEFORE SUMMARY LINE?\n         BNL   REDONUCM          NO, CURSOR PAST END OF MAP.\n         SH    R0,WINHDGCT       RESTORE MAP ENTRY RELATIVE INDEX.\n         SLL   R0,4              MULTIPLY BY SIXTEEN FOR INDEX.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         L     R3,1200(,R3)      POINT TO THE NUCLEUS MAP.\n         ALR   R3,R0             POINT TO REQUESTED NUCLEUS MAP ENTRY.\n         L     R1,=A(BRWSPNTR)\n         MVC   0(4,R1),8(R3)     SUPPLY NEW BROWSE ADDRESS.\n         NI    0(R1),X'7F'       RESET THE SIGN BIT.\n         MVC   INBUFF(9),NZMSTR  SUPPLY THE ZOOM COMMAND STRING.\n         MVI   TGETLEN+1,9       SUPPLY \"INPUT\" DATA LENGTH.\n         SR    R0,R0\n         STH   R0,JBTARGAS       ENSURE PRIMARY ASID BROWSE.\n         ST    R0,JBTARGI#\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNN          ZOOM TO OPTION \"VB\".\n         DROP  R15               WNDWMNGR.\nNUCAUTO  MVI   INBUFF,X'F8'      SIMULATE A SCROLL DOWN REQUEST.\n         MVI   TGETLEN+1,3       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNN          GO DISPLAY HELP PANEL.\nNUCNAME  MVI   NUCNAMEP,X'C1'    RESET WCC.\n         LA    R0,NNAMELEN\nNUCNAMEX LA    R1,NUCNAMEP       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BOR   R9                YES, RETURN TO MAINLINE VIA SCREENIO.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    NUCNAME           YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   NUCMNAME,INCHARS  EXTRACT SPECIFIED ENTRY NAME.\n         CLC   NUCMNAME,BLANKS   NULL NAME?\n         BE    REDONUCM          YES, RESTART NUCLEUS MAP.\n         BAS   R14,NUCMPDTL      GET NUCLEUS MAP ADDR AND ENTRY COUNT.\n         LA    R1,1              GET FIRST LINE NUMBER.\nNUCNSRCH CLC   NUCMNAME,0(R3)    FOUND IT?\n         BE    NUCFOUND          YES.\n         LA    R3,16(,R3)        NO, POINT TO NEXT ENTRY.\n         LA    R1,1(,R1)         INCREMENT LINE NUMBER.\n         BCT   R4,NUCNSRCH       TRY IT.\n         LA    R0,NNAMELNX       NOT FOUND, REISSUE PROMPT.\n         MVI   NUCNAMEP,X'C5'    SET BELL BIT ON IN WCC.\n         B     NUCNAMEX\nNUCADERR MVI   NUCADDRP,X'C5'    SET BELL BIT ON IN WCC.\n         LA    R0,NADDRLNX       REISSUE PROMPT WITH ERROR MESSAGE.\n         B     NUCADDRX\nNUCADDR  MVI   NUCADDRP,X'C1'    RESET WCC.\n         LA    R0,NADDRLEN\nNUCADDRX LA    R1,NUCADDRP       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BOR   R9                YES, RETURN TO MAINLINE VIA SCREENIO.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    NUCADDR           YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   NUCMADDR,INCHARS  EXTRACT SPECIFIED ENTRY NAME.\n         LA    R0,8              MAXIMUM NUMBER OF DIGITS IN ADDRESS.\n         LA    R3,INCHARS        POINT TO FIRST ALLEGED HEX CHARACTER.\n         SLR   R1,R1             ZERO WORK REGISTER.\n         SLR   R15,R15           ZERO ACCUMULATOR.\nNHEXLOOP CLI   0(R3),C' '        BLANK?\n         BE    NEXTNNUM          YES, IGNORE IT.\n         CLI   0(R3),C'A'        INVALID?\n         BL    NUCADERR          YES.\n         CLI   0(R3),C'9'        INVALID?\n         BH    NUCADERR          YES.  (HOW WAS THAT DONE?)\n         CLI   0(R3),C'G'        VALID?\n         BL    NHEXALFA          YES, ALPHABETIC HEX CHARACTER.\n         CLI   0(R3),C'0'        INVALID?\n         BL    NUCADERR          YES.\n         NI    0(R3),X'0F'       NO, GET NUMERIC PART.\n         B     NHEXNMBR          NOW HAVE HEX DIGIT'S VALUE.\nNHEXALFA TR    0(1,R3),NALFAHEX-C'A'\nNHEXNMBR SLL   R15,4             PROMOTE ANY PREVIOUS DIGITS.\n         IC    R1,0(,R3)         LOAD THIS DIGIT.\n         OR    R15,R1            GATE INTO ACCUMULATOR.\nNEXTNNUM LA    R3,1(,R3)         POINT TO NEXT POSSIBLE DIGIT.\n         BCT   R0,NHEXLOOP       PROCESS NEXT POSSIBLE DIGIT POSSIBLY.\nGOTNADDR LA    R15,0(,R15)       TURN OFF THE AMODE BIT.\n         BAS   R14,NUCMPDTL      GET NUCLEUS MAP ADDR AND ENTRY COUNT.\n         LA    R1,1              GET FIRST LINE NUMBER.\nNUCLKUP@ C     R15,16+8(,R3)     GOT THE RIGHT SPOT?\n         BL    NUCFOUND          YES.\n         LA    R3,16(,R3)        NO, POINT TO THE NEXT ENTRY.\n         LA    R1,1(,R1)         INCREMENT LINE NUMBER.\n         BCT   R4,NUCLKUP@\nNUCFOUND TM    12(R3),X'10'      CSECT?\n         BO    NUCMPLOC          YES, SHOW THIS AS THE TOP DETAIL LINE.\n         BCTR  R1,0              NO, BACK UP ONE ENTRY/LINE.\n         AHI   R3,-16\n         B     NUCFOUND\nNUCMPLOC ST    R1,NTOPLINE       SPECIFY NEW TOP-OF-SCREEN.\n         B     REDONUCM\nGIVEHLPN MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNN          GO DISPLAY HELP PANEL.\n         SPACE\nNUCMPDTL L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         L     R3,1200(,R3)      POINT TO THE NUCLEUS MAP.\n         L     R4,12(,R3)        GET LENGTH OF NUCLEUS MAP.\n         SRL   R4,4              DIVIDE BY 16 TO GET ENTRY POINT COUNT.\n         LA    R3,16(,R3)        POINT TO THE FIRST ENTRY.\n         BCTR  R4,0              DECREMENT FOR HEADER.\n         BR    R14               RETURN TO CALLER.\n         SPACE\n         DROP  R11               NUCLKMAP.\n         TITLE 'NUCLEUS MAP DISPLAY - VARIABLES AND CONSTANTS'\nNTOPLINE DC    F'1'              TOP-OF-SCREEN LINE NUMBER.\nNUCMAPST DC    F'0'      \\___    NUCLEUS MAP ADDRESS.\nNENTRYCT DC    F'0'      /       NUCLEUS MAP ENTRY COUNT.\nNALFAHEX DC    X'0A0B0C0D0E0F'   ALPHABETIC HEX VALUES.\nNZMSTR   DC    X'7D40C11140C1'   READ HEADER FOR NUCLEUS ZOOM.\n         DC    C'=VB'            CHARACTER STRING FOR NUCLEUS ZOOM.\nHEADINGN DC    CL79'                       NUCLEUS CSECT AND ENTRY POIN+\n               T MAP                       '\nNUCMCOLS DC    CL79'      CSECT-NM   VIRTADDR   LENGTH               EN+\n               TRY-PT   VIRTADDR           '\nNUCADDRP DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER HEXADECIMAL VIRTUAL STORAGE ADDRESS IN NUCLEUS'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nNUCMADDR DC    X'0000000000000000'\n         DC    X'2841001BF0C2'\nNADDRLEN EQU   *-NUCADDRP\n         DC    X'11D1E2&HIGH'\n         DC    C'REENTER - INVALID ADDRESS SPECIFIED'\nNADDRLNX EQU   *-NUCADDRP\nNUCNAMEP DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER NUCLEUS ENTRY NAME TO BE LOCATED'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nNUCMNAME DC    X'0000000000000000'\n         DC    X'2841001BF0C2'\nNNAMELEN EQU   *-NUCNAMEP\n         DC    X'11D1E2&HIGH'\n         DC    C'REENTER - THE PREVIOUSLY SPECIFIED NAME WAS NOT FOUND'\nNNAMELNX EQU   *-NUCNAMEP\n         SPACE\n         LTORG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAO": {"ttr": 19461, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\x1c\\x00\\x08\\x00\\x94\\x17\\x1f\\x01\\x19\\x11\\x7f\\x15\\x07\\x04\\x91\\x03\\x95\\x01m\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "52.28", "flags": 0, "createdate": "1994-06-20T00:00:00", "modifydate": "2019-04-27T15:07:08", "lines": 1169, "newlines": 917, "modlines": 365, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1986,1994,2011  PRYCROFT SIX PTY LTD\n         TITLE 'OS/MVS CONSOLE MONITOR SUBROUTINE'\n         USING OSCONSOL,R11,R10\nOSCONSOL DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         MVI   INBUFF,X'7D'      SUPPLY AID FOR ENTER.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '    ADJUST ANY COMMAND INPUT.\n         SLR   R0,R0\n         ST    R0,OMTTMOVE       ENSURE LATEST MESSAGES ARE DISPLAYED.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BO    OTSOSPY           YES.\n         CLI   MSGSAUCE,C'C'     NO, GOING TO LOOK AT A CONSOLE?\n         BNE   OSPYOKAY          NO, PROCEED.\n         MVI   MSGSAUCE,C'T'     YES, WELL DON'T.\n         B     OSPYOKAY          PROCEED.\nOTSOSPY  STTMPMD ON,KEYS=ALL     TRAP PA1 AND CLEAR KEYS.\nOSPYOKAY OI    GRAFLAGS,PA2RTN   TRAP PA2 KEY.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         CLI   INCHARS,C'T'      MASTER TRACE TABLE DISPLAY REQUEST?\n         BE    TTSWITCH          YES, SHOW IT.\n         CLI   INCHARS,C'L'      SYSTEM LOG BUFFER DISPLAY REQUEST?\n         BE    LGSWITCH          YES, SHOW IT.\n         CLI   MSGSAUCE,C'C'     SPYING ON SYSTEM CONSOLE?\n         BH    CMDSCANO          NO, PROCESS ANY REQUEST.\n         SPACE\nREDOCNSL ICM   R15,15,OSPYADDR   LOAD ENTRY POINT IN CSA.\n         BNZ   CALLCSA           EXISTS SO PROCEED.\n         SLR   R1,R1             ZERO THE DCB POINTER.\n         LA    R0,OBILDLST       POINT TO BLDL PARAMETER LIST.\n*        BLDL  (1),(0)           PERFORM DIRECTORY SEARCH.\n         SVC   18                ISSUE BLDL SVC (MACRO HAS MORE CODE).\n         LTR   R15,R15           WAS THE MODULE FOUND?\n         BNZ   SPYCROOK          NO, DISPLAY AN ERROR MESSAGE.\n         CLI   XLATETBL,64\n         BNE   SPYCROOK\n         TM    OSUSRDAT+8,X'C0'  RENT, REUS?\n         BNO   SPYCROOK          NO, DISPLAY AN ERROR MESSAGE.\n         LOAD  DE=SPYDELOC,GLOBAL=(YES,P),EOM=NO\n         MVI   MSGSAUCE,C'C'     CONSOLE IS NOW THE MESSAGE SOURCE.\n         ST    R0,OSPYADDR       SAVE THE ENTRY POINT ADDRESS.\n         LR    R15,R0            COPY IT.\nCALLCSA  LA    R1,INBUFF         POINT TO COMMAND PARAMETER.\n         OI    INBUFF,X'70'      RESTORE AID.\n         TM    MODESW2,COL2+COL4 7-COLOUR MODE?\n         BNZ   SPYPRMOK          NO, LEAVE \"SNAZZY\" FLAG OFF.\n         LA    R0,1              YES, GET A BIT.\n         SLL   R0,31             PROMOTE TO SIGN BIT.\n         OR    R1,R0             TELL IMPXASPY TO USE FULL \"SNAZZIES\".\nSPYPRMOK IC    R0,HEADINGO+69    TELL IMPXASPY WHETHER FROZEN OR NOT.\n         ICM   R0,2,VIPMODE      TELL IMPXASPY OF COMMAND AUTHORITY.\n         BASR  R14,R15           CALL IMPXASPY.\n         LTR   R15,R15           WAS INITIALIZATION SUCCESSFUL?\n         BNZ   OSPYFAIL          NO, PREPARE MESSAGE FOR DISPLAY.\n         STC   R0,HEADINGO+69    SAVE LATEST DISPLAY MODE.\n         STCM  R0,2,VIPMODE      SAVE LATEST COMMAND AUTHORITY.\nOREQPARS LNR   R0,R11            YES, MAKE REGISTER 0 NEGATIVE.\n         MVC   INBUFF+4(2),ONE   SIMULATE PRIMARY INPUT AREA INPUT.\n         OI    MODESW,BTMP       FORCE SCREEN SIZE RESYNC.\n         B     PUTSCRNO          LET MAINLINE PARSE RETURNED INPUT.\n         SPACE\nOSPYFAIL MVC   OSBADTXT,=CL23'YOU DON''T HAVE TSO OPER'\n         TM    COPYATR1,PSCBCTRL TSO OPER PRIVILEGE?\n         BNO   SPYCROOK          NO, THINGS ARE CROOK IN TALLAROOK.\n         MVC   OSBADTXT,=CL23'NO CONSOLE IN MVS IMAGE'\nSPYCROOK CLI   MSGSAUCE,C'C'     CONSOLE IMAGE EXPLICITLY REQUESTED?\n         BE    SPYDEAD           YES, THE SPY IS WORSE THAN JUST CROOK.\n         B     TTSWITCH          NO, SHOW THE MASTER TRACE TABLE.\nSPYDEAD  LA    R1,OSBADMSG       DISPLAY THE \"NOT INSTALLED\"\n         LA    R0,OSBADLEN               MESSAGE.\nPUTSCRNO BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         STC   R15,OTGETRC       SAVE THE RETURN CODE FOR LATER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    OLOGINIT          YES, CONTINUE WITH DISPLAYS.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    NOTEXITO          NO, PROCESS SUBCOMMAND.\n         L     R15,INITADDR\n         USING INITIAL,R15\n         MVC   HOME,SCRNHDR      RESTORE SCREEN HEADER.\n         DROP  R15               INITIAL.\n         MVI   TPUTFLG,X'03'     RESTORE TPUT TYPE FOR OTHER ROUTINES.\n         MVI   TGETFLG,TGETFLGA  RESTORE TGET TYPE FOR OTHER ROUTINES.\n         TM    MODESW3,TSU       TIME SHARING USER?\n         BZ    OTMPMDOK          NO, SKIP TSO MACRO.\n         STTMPMD OFF             DO NOT TRAP PA1, CLEAR,\nOTMPMDOK NI    GRAFLAGS,255-PA2RTN      NOR PA2.\n         SLR   R0,R0\n         SAR   A4,R0             AR4 WILL POINT TO PRIMARY.\n         SAR   A5,R0             AR5 WILL POINT TO PRIMARY.\n         SAR   A15,R0            AR15 WILL POINT TO PRIMARY.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\n         SPACE\nNOTEXITO CHI   R15,4             ANY INPUT RECEIVED FROM TERMINAL YET?\n         BE    MTTWAIT           NO, WAIT A BIT.\n         CLI   INCHARS,C'T'      MASTER TRACE TABLE DISPLAY REQUEST?\n         BE    TTSWITCH          YES, SHOW IT.\n         CLI   INCHARS,C'L'      SYSTEM LOG BUFFER DISPLAY REQUEST?\n         BE    LGSWITCH          YES, SHOW IT.\n         CLI   MSGSAUCE,C'C'     SPYING ON A CONSOLE?\n         BNE   CMDSCANO          NO, PROCESS COMMANDS HERE.\n         CLI   INBUFF,10         PF10/22?\n         BE    REDOCNSL          YES, PASS IT ON TO SPY.\n         CLI   INBUFF,11         PF11/23?\n         BE    REDOCNSL          YES, PASS IT ON TO SPY.\n         MVI   INBUFF,X'7D'      SUPPLY AID FOR ENTER.\n         CLI   INCHARS,C'?'      HELP PANEL REQUEST?\n         BNE   REDOCNSL          NO, LET SPY DEAL WITH IT.\nGIVEHLPO MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         CLI   MSGSAUCE,C'C'     SPYING ON A CONSOLE?\n         BNE   PUTSCRNO          NO, GO DISPLAY HELP PANEL.\n         MVI   INCHARS+1,C'2'    YES, SPECIFY MORE RELEVANT PAGE NMBR.\n         B     PUTSCRNO          GO DISPLAY HELP PANEL.\n         SPACE\nCMDSCANO CLI   INBUFF,X'6C'      PA1?\n         BE    OPRECALL          YES, RECALL LAST COMMAND.\n         CLI   INBUFF,X'6E'      PA2?\n         BE    OLOGINIT          YES, REFRESH SCREEN.\n         CLI   INBUFF,X'6D'      CLEAR?\n         BE    OCLEAR            YES, UPDATE SCREEN IMAGE.\n         CLI   INBUFF+1,0        CURSOR ON FIRST LINE?\n         BE    CSROKAYO          YES, CAN'T BE JOB ID SELECTION.\n         CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMM OF SCREEN?\n         BE    CSROKAYO          YES, DON'T DO JOB ID SELECTION.\n         L     R0,LINES          GET THE NUMBER OF LINES.\n         AHI   R0,-3             GET LAST MESSAGE RELATIVE LINE NUMBER.\n         CLM   R0,1,INBUFF+1     CURSOR ON MESSAGE LINE?\n         BL    CSROKAYO          NO.\n         SLR   R1,R1\n         IC    R1,INBUFF+1       YES, GET MESSAGE LINE NUMBER.\n         SR    R0,R1             GET TABLE ENTRY TO GET JOB ID FROM.\n         ST    R0,OJOBIDID       SAVE IT FOR LATER.\n         OI    OJOBIDID,X'80'    ENSURE NON-ZERO WORD.\nCSROKAYO CLI   INBUFF,7          PF7/19?\n         BE    OMTTUP            YES, SCROLL UP.\n         CLI   INBUFF,8          PF8/20?\n         BE    OMTTDOWN          YES, SCROLL DOWN.\n         CLI   INBUFF,10         PF10/22?\n         BE    OGOLEFT           YES, SCROLL LEFT.\n         CLI   INBUFF,11         PF11/23?\n         BE    OGORIGHT          YES, SCROLL RIGHT.\nCHRSCANO CLI   INCHARS,C'C'      REQUEST FOR CONSOLE SPYING?\n         BE    OSSWITCH          YES.\n         CLI   INCHARS,C'L'      REQUEST SYSTEM LOG BUFFER DISPLAY?\n         BE    LGSWITCH          YES.\n         CLI   INCHARS,C'T'      REQUEST MASTER TRACE TABLE DISPLAY?\n         BE    TTSWITCH          YES.\n         CLI   INCHARS,C'F'      REQUEST TO FREEZE DISPLAY?\n         BE    OFREEZE           YES.\n         CLI   INCHARS,C'R'      REQUEST TO RELEASE DISPLAY?\n         BE    ORELEASE          YES.\n         CLI   INCHARS,C'-'      SCROLL UP REQUEST?\n         BE    OMTTUP            YES.\n         CLI   INCHARS,C'+'      SCROLL DOWN REQUEST?\n         BE    OMTTDOWN          YES.\n         CLI   INCHARS,C'<'      SCROLL LEFT REQUEST?\n         BE    OGOLEFT           YES.\n         CLI   INCHARS,C'>'      SCROLL RIGHT REQUEST?\n         BE    OGORIGHT          YES.\n         CLI   INCHARS,C' '      UPDATE REQUEST?\n         BE    OLOGINIT          YES.\n         CLI   INCHARS,C'Z'      GLOBAL SUBCOMMAND?\n         BE    OREQPARS          YES, REQUEST PARSING BY I/O HANDLER.\n         CLI   INCHARS,C'H'      GLOBAL SUBCOMMAND?\n         BE    OREQPARS          YES, REQUEST PARSING BY I/O HANDLER.\n         CLI   INCHARS,C'!'      GLOBAL SUBCOMMAND?\n         BE    OREQPARS          YES, REQUEST PARSING BY I/O HANDLER.\n         CLI   INCHARS,C'\\'      GLOBAL SUBCOMMAND?\n         BE    OREQPARS          YES, REQUEST PARSING BY I/O HANDLER.\n         CLI   INCHARS,C'='      GLOBAL SUBCOMMAND?\n         BE    OREQPARS          YES, REQUEST PARSING BY I/O HANDLER.\n         CLI   INCHARS,C'\u00a2'      GLOBAL SUBCOMMAND?\n         BE    OREQPARS          YES, REQUEST PARSING BY I/O HANDLER.\n         CLC   OPERPSWD,INCHARS  TOGGLE COMMAND AUTHORITY FLAG REQUEST?\n         BE    VIPTOGLE          YES.\n         CLI   INCHARS,C'J'      JOB IDENTIFIER REQUEST?\n         BNE   OCMDSAVE          NO.\n         CLI   INCHARS+1,C' '    CANCEL SELECTION REQUEST?\n         BE    OCLRJBID          YES.\n         CLI   INCHARS+1,C'/'    CANCEL SELECTION REQUEST?\n         BNE   OCMDSAVE          NO.\nOCLRJBID MVC   OMSGJBID,BLANKS   CLEAR MESSAGE JOB IDENTIFIER.\n         B     OLOGINIT          CONTINUE.\n         MVC   OMSGJBID,INCHARS+1     LOAD NEW MESSAGE JOB IDENTIFIER.\nOCMDSAVE XC    OLDOPCMD,OLDOPCMD\n         LA    R15,INCHARS       POINT TO THE COMMAND TEXT.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET THE COMMAND TEXT LENGTH.\n         LA    R0,79             GET MAXIMUM SUPPORTED LENGTH.\n         CR    R1,R0             IS TRUNCATION NECESSARY?\n         BNH   OSAVLNOK          NO.\n         LR    R1,R0             YES, DO IT.\nOSAVLNOK BCTR  R1,0              LESS ONE FOR EXECUTE.\n         EX    R1,OSAVECMD       SAVE THE COMMAND FOR A LATER RECALL.\n         CLI   INCHARS,C'J'      JOB IDENTIFIER REQUEST?\n         BE    ONEWJBID          YES.\n         CLI   INCHARS,C'B'      REQUEST TO BROADCAST A MESSAGE?\n         BE    OPERBMSG          YES.\n         CLI   INCHARS,C'\u00ac'      REQUEST TO NOTIFY CONSOLES?\n         BE    OPERNMSG          YES.\n         CLI   INCHARS,C'\"'      REQUEST TO LOG A MESSAGE?\n         BE    OPERWMSG          YES.\n         CLI   INCHARS,C'$'      REQUEST TO ISSUE JES2 COMMAND?\n         BE    OPERCMND          YES.\n         CLI   INCHARS,C'/'      REQUEST TO ISSUE OS COMMAND?\n         BE    OPERCMND          YES.\nOMTTHELP MVI   TPUTFLG,X'03'     DON'T USE HOLD TPUT FOR HELP PANEL.\n         MVI   TGETFLG,TGETFLGA  USE SYNCHRONOUS I/O FOR HELP PANEL.\n         B     GIVEHLPO          DISPLAY HELP PANEL.\nOSAVECMD MVC   OLDOPCMD(0),0(R15)               <<< EXECUTED >>>\n         SPACE\nVIPTOGLE XI    VIPMODE,C'*'-C' '\n         B     OLOGINIT          YES, NOW UPDATE THE SCREEN.\n         SPACE\nONEWJBID MVC   OMSGJBID,INCHARS+1    LOAD NEW MESSAGE JOB IDENTIFIER.\n         B     OLOGINIT          NOW UPDATE THE SCREEN.\n         SPACE\nOGOLEFT  CLI   INCHARS+1,C'<'    SCROLL LEFT MAXIMUM REQUEST?\n         BE    OMXLEFT           YES, SO DO IT.\n         CLI   OLDCOLS+3,100     NEED A CENTRE SCROLL DISPLAY?\n         BNL   OMXLEFT           NO, GO LEFT MAX FOR WIDE SCREEN.\n         CLI   OSCROLL,C'R'      CURRENTLY SCROLLED RIGHT?\n         BE    OGOCENTR          YES, SO BACK TO CENTRE.\nOMXLEFT  MVI   OSCROLL,C'L'      NO, SO NOW SCROLLED LEFT.\n         B     OLOGINIT          NOW UPDATE THE SCREEN.\nOGORIGHT CLI   INCHARS+1,C'>'    SCROLL RIGHT MAXIMUM REQUEST?\n         BE    OMXRIGHT          YES, SO DO IT.\n         CLI   OLDCOLS+3,100     NEED A CENTRE SCROLL DISPLAY?\n         BNL   OMXRIGHT          NO, GO RIGHT MAX FOR WIDE SCREEN.\n         CLI   OSCROLL,C'L'      CURRENTLY SCROLLED LEFT?\n         BE    OGOCENTR          YES, SO BACK TO CENTRE.\nOMXRIGHT MVI   OSCROLL,C'R'      NO, SO NOW SCROLLED RIGHT.\n         B     OLOGINIT          NOW UPDATE THE SCREEN.\nOGOCENTR MVI   OSCROLL,C' '      NOW SCROLLED IN THE CENTRE.\n         B     OLOGINIT          NOW UPDATE THE SCREEN.\n         SPACE\nOPERCMND CLC   ONE,INBUFF+4      TEXT FROM PRIMARY INPUT AREA?\n         BNL   GIVEHLPO          YES, INVALID FOR OPERATOR COMMAND.\n         CLI   VIPMODE,C'*'      ALLOWED TO ISSUE A COMMAND?\n         BNE   OPRNOCMD          NO.\n         LA    R15,INCHARS       POINT TO THE COMMAND TEXT.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET THE COMMAND TEXT LENGTH.\n         BCTR  R1,0              LESS ONE FOR EXECUTE.\n         CLI   INCHARS,C'$'      JES2 COMMAND?\n         BE    OPRCMDOK          YES, READY FOR THE MOVE.\n         BCTR  R1,0              NO, DON'T COUNT THE SLASH.\n         LA    R15,INCHARS+1     POINT TO THE REAL COMMAND TEXT.\nOPRCMDOK EX    R1,OCMDLOAD       MOVE THE COMMAND INTO THE BUFFER.\n         LA    R1,5(,R1)         GET THE LENGTH OF THE COMMAND BUFFER.\n         STH   R1,OPCMDBUF       SAVE IT INTO THE COMMAND BUFFER.\n         MODESET MF=(E,MDSTSUP0)\n         SLR   R0,R0             USE MASTER CONSOLE AUTHORITY.\n         LA    R1,OPCMDBUF       POINT TO THE COMMAND BUFFER.\n         SVC   34                ISSUE THE COMMAND.\n         B     OCMDTIDY          UPDATE THE SCREEN.\nOPRNOCMD LA    R0,OCMSGLEN\n         LA    R1,OCMSG          FULL SCREEN TPUT THE ERROR MESSAGE\n         B     PUTSCRNO               AND GET NEXT REQUEST.\nOCMDLOAD MVC   OPCMDBUF+4(0),0(R15)             <<< EXECUTED >>>\n         SPACE\nOPRECALL MVI   TPUTFLG,X'03'     USE NOHOLD TPUTS FOR MANUAL UPDATE.\n         MVI   TGETFLG,TGETFLGA  USE SYNCHRONOUS I/O FOR MANUAL UPDATE.\n         LA    R0,OPA1LEN\n         LA    R1,OPA1MSG        FULL SCREEN TPUT THE ERROR MESSAGE\n         B     PUTSCRNO               AND GET NEXT REQUEST.\n         SPACE\nOPERWMSG MVI   OPERWTO+2,X'02'   SET HRDCPY MCS FLAG ON.\n         MVI   OPERWTO+3,X'00'   RESET OTHER MCS FLAGS.\n         B     OPERAMSG          BRANCH TO COMMON MESSAGE CODE.\nOPERNMSG MVI   OPERWTO+2,X'04'   SET BRDCST MCS FLAG ON.\n         MVI   OPERWTO+3,X'04'   SET NOCPY MCS FLAG ON.\n         B     OPERAMSG          BRANCH TO COMMON MESSAGE CODE.\nOPERBMSG MVI   OPERWTO+2,X'04'   SET BRDCST MCS FLAG ON.\n         MVI   OPERWTO+3,X'00'   RESET OTHER MCS FLAGS.\nOPERAMSG CLC   ONE,INBUFF+4      TEXT FROM PRIMARY INPUT AREA?\n         BNL   GIVEHLPO          YES, INVALID FOR OPERATOR COMMAND.\n         LA    R15,INCHARS       POINT TO THE COMMAND TEXT.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         MVI   OPERMESG,C' '     CLEAR MESSAGE BUFFER.\n         MVC   OPERMESG+1(L'OPERMESG-1),OPERMESG\n         AHI   R1,-8             GET THE MESSAGE TEXT LENGTH CODE.\n         BM    OPRMSGOK          MESSAGE IS A BLANK LINE.\n         EX    R1,OMSGLOAD       MOVE THE MESSAGE INTO THE BUFFER.\nOPRMSGOK DS    0H                THE MESSAGE IS NOW LOADED.\n         MODESET MF=(E,MDSTSUP0)\n         WTO   MF=(E,OPERWTO)    ISSUE THE MESSAGE.\nOCMDTIDY DS    0H\n         MODESET MF=(E,MDSTPROB)\n         B     OLOGINIT          UPDATE THE SCREEN.\nOMSGLOAD MVC   OPERMESG(0),INCHARS+1            <<< EXECUTED >>>\n         SPACE\nOSSWITCH TM    MODESW3,TSU       TIME SHARING USER?\n         BZ    OMTTHELP          NO, DO NOT ALLOW CONSOLE SPY.\n         MVI   MSGSAUCE,C'C'     YES, FLAG THE NEW SOURCE OF MESSAGES.\n         MVI   TPUTFLG,X'03'     DON'T USE HOLD TPUTS HERE ANYMORE.\n         MVI   TGETFLG,TGETFLGA  USE SYNCHRONOUS I/O FROM THIS MODULE.\n         L     R1,CRNTOPTN       POINT TO OPTION \"O\" IN LOOK-UP TABLE.\n         NI    1(R1),X'FE'       SCREEN PRINT NOW NOT SUPPORTED.\n         B     REDOCNSL          PASS COMMAND TO SPY.\nOMTTDOWN ICM   R1,15,OLDLINES    GET THE NUMBER OF SCREEN LINES.\n         BP    *+8               USE VALUE IF PRESENT.\n         L     R1,LINES          GET THE NUMBER OF SCREEN LINES.\n         AHI   R1,-3             GET THE DETAIL MESSAGE LINE COUNT.\n         SH    R1,OWTORCNT       EXCLUDE COUNTING WTOR DISPLAY LINES.\n         LA    R15,INCHARS       POINT TO ANY INPUT TEXT.\n         CLI   INCHARS,C'+'      PLUS COMMAND?\n         BNE   OMTTPLUS          NO.\n         LA    R15,INCHARS+1     YES, POINT PAST IT.\nOMTTPLUS CLI   0(R15),C'M'       SCROLL DOWN MAXIMUM REQUESTED?\n         BE    OMAXDOWN          YES, SHOW THE LATEST MESSAGES.\n         CLI   0(R15),C'0'       NUMERIC OPERAND?\n         BL    OGOTDOWN          NO, SCROLL UP A PAGE.\n         SLR   R1,R1             YES, ZERO ACCUMULATOR.\n         LA    R0,3              ALLOW A MAXIMUM OF THREE DIGITS.\nODWNLOOP CLI   0(R15),C'0'       NUMERIC DIGIT?\n         BL    OGOTDOWN          NO, END OF NUMBER.\n         ICM   R14,8,0(R15)      YES, LOAD THE DIGIT.\n         SLL   R14,4             SHIFT OUT THE ZONE.\n         SRL   R14,28            CONVERT THE DIGIT TO BINARY.\n         MH    R1,TEN+2          PROMOTE PREVIOUS DIGITS.\n         AR    R1,R14            ADD NEW DIGIT.\n         LA    R15,1(,R15)       POINT TO NEXT POTENTIAL DIGIT.\n         BCT   R0,ODWNLOOP       PROCESS NEXT DIGIT IF ANY.\nOGOTDOWN LCR   R1,R1             MAKE THE NUMBER NEGATIVE.\n         B     OGOTMOVE          SCROLL DOWN EQUALS NEGATIVE SCROLL UP.\nOMTTUP   ICM   R1,15,OLDLINES    GET THE NUMBER OF SCREEN LINES.\n         BP    *+8               USE VALUE IF PRESENT.\n         L     R1,LINES          GET THE NUMBER OF SCREEN LINES.\n         AHI   R1,-3             GET THE DETAIL MESSAGE LINE COUNT.\n         SH    R1,OWTORCNT       EXCLUDE COUNTING WTOR DISPLAY LINES.\n         LA    R15,INCHARS       POINT TO ANY INPUT TEXT.\n         CLI   INCHARS,C'-'      MINUS COMMAND?\n         BNE   OMTTMNUS          NO.\n         LA    R15,INCHARS+1     YES, POINT PAST IT.\nOMTTMNUS CLI   0(R15),C'M'       SCROLL UP MAXIMUM REQUESTED?\n         BE    OMAXUP            YES, SHOW THE OLDEST MESSAGES.\n         CLI   0(R15),C'0'       NUMERIC OPERAND?\n         BL    OGOTMOVE          NO, SCROLL UP A PAGE.\n         SLR   R1,R1             YES, ZERO ACCUMULATOR.\n         LA    R0,3              ALLOW A MAXIMUM OF THREE DIGITS.\nOUPLOOP  CLI   0(R15),C'0'       NUMERIC DIGIT?\n         BL    OGOTMOVE          NO, END OF NUMBER.\n         ICM   R14,8,0(R15)      YES, LOAD THE DIGIT.\n         SLL   R14,4             SHIFT OUT THE ZONE.\n         SRL   R14,28            CONVERT THE DIGIT TO BINARY.\n         MH    R1,TEN+2          PROMOTE PREVIOUS DIGITS.\n         AR    R1,R14            ADD NEW DIGIT.\n         LA    R15,1(,R15)       POINT TO NEXT POTENTIAL DIGIT.\n         BCT   R0,OUPLOOP        PROCESS NEXT DIGIT IF ANY.\nOGOTMOVE A     R1,OMTTMOVE       ADD PREVIOUS SCROLL OFFSET.\n         ST    R1,OMTTMOVE       SAVE THE NEW VALUE.\nOFREEZE  MVI   HEADINGO+69,C'F'  FLAG MANUAL DISPLAY UPDATE.\n         L     R1,INITADDR\n         USING INITIAL,R1\n         MVC   HOME,SCRNHDR      RESTORE SCREEN HEADER.\n         DROP  R1                INITIAL.\n         MVI   TPUTFLG,X'03'     USE NOHOLD TPUTS FOR MANUAL UPDATE.\n         MVI   TGETFLG,TGETFLGA  USE SYNCHRONOUS I/O FOR MANUAL UPDATE.\n         CLI   INBUFF,11         GOT HERE VIA PF11/23?\n         BE    CHRSCANO          YES, PROCESS ANY COMMAND TEXT.\n         B     OINITRDY          NO, UPDATE THE SCREEN.\nOMAXUP   MVC   OMTTMOVE,TENGRAND\n         B     OFREEZE           SHOW THE \"TOP\" OF THE TRACE TABLE.\nLGSWITCH MVI   MSGSAUCE,C'L'     SYSLOG IS NOW THE SOURCE OF MESSAGES.\n         L     R1,CRNTOPTN       POINT TO OPTION \"O\" IN LOOK-UP TABLE.\n         OI    1(R1),X'01'       SCREEN PRINT NOW SUPPORTED.\n         CLI   INCHARS+1,C'F'    FREEZE FOR MANUAL REQUESTED?\n         BE    OFREEZE           YES, OVERLAY CURRENT SETTING.\n         CLI   INCHARS+1,C'R'    RELEASE FOR AUTO-UPDATE REQUESTED?\n         BE    ORELEASE          YES, OVERLAY CURRENT SETTING.\n         CLI   HEADINGO+69,C'F'  IN MANUAL INPUT MODE?\n         BE    OLOGINIT          YES, ALL IS READY TO GO.\n         B     ORELEASE\nTTSWITCH MVI   MSGSAUCE,C'T'     MTT IS NOW THE SOURCE OF MESSAGES.\n         L     R1,CRNTOPTN       POINT TO OPTION \"O\" IN LOOK-UP TABLE.\n         OI    1(R1),X'01'       SCREEN PRINT NOW SUPPORTED.\n         CLC   OPERPSWD,INCHARS+1 PASSWORD SUPPLIED?\n         BNE   OMAXDOWN          NO.\n         XI    VIPMODE,C'*'-C' ' YES.\nOMAXDOWN SLR   R0,R0\n         ST    R0,OMTTMOVE       ENSURE LATEST MESSAGES ARE DISPLAYED.\n         CLI   INCHARS+1,C'F'    FREEZE FOR MANUAL REQUESTED?\n         BE    OFREEZE           YES, OVERLAY CURRENT SETTING.\n         CLI   INCHARS+1,C'R'    RELEASE FOR AUTO-UPDATE REQUESTED?\n         BE    ORELEASE          YES, OVERLAY CURRENT SETTING.\n         CLI   HEADINGO+69,C'F'  IN MANUAL INPUT MODE?\n         BE    OLOGINIT          YES, ALL IS READY TO GO.\nORELEASE MVI   HEADINGO+69,C'R'  FLAG AUTOMATIC DISPLAY UPDATE.\n         MVI   TPUTFLG,X'0B'     USE HOLD TPUTS (REDUCE VDU LOCKOUT).\n         MVI   TGETFLG,TGETFLGN  USE ASIS NOWAIT TGETS.\n         SLR   R0,R0\n         ST    R0,OMTTMOVE       ENSURE LATEST MESSAGES ARE DISPLAYED.\n         B     OINITRDY          UPDATE THE SCREEN.\n         SPACE\nMTTWAIT  LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         L     R0,OPAGEND        POINT PAST END OF SCREEN BUFFER.\n         SR    R0,R1             GET THE LENGTH OF SCREEN BUFFER.\n         STM   R0,R1,SCRNPA2A    CORRECT VALUES FOR PA2 HANDLING.\n         STM   R0,R1,SCRNPA3A    CORRECT VALUES FOR PA3 HANDLING.\n         STIMER WAIT,BINTVL=TTWAITIM\n         MODESET MF=(E,MDSTSUP0)\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTMSER        POINT TO THE MSRDA.\n         DROP  R3                CVT.\n         USING BASE,R3\n         CLI   MSGSAUCE,C'L'     LOOKING AT THE SYSLOG BUFFER?\n         BE    CHKLOGBF          YES, CHECK IT OUT.\n         ICM   R4,15,BAMTTBL     NO, POINT TO THE MASTER TRACE TABLE.\n         BZ    NEWLOGBF          IT HAS VANISHED!\n         USING MTTABLE,R4\n         LA    R15,1             LOAD THE ASID OF THE MASTER SCHEDULER.\n         BAS   R14,OSETSAS       SET ASID 1 AS THE SECONDARY ASID.\n*                                HAS THE MASTER TRACE TABLE CHANGED?\n         CLC   TTSTATUS(36),MTTABLE\n         BNE   MTTUPDAT          YES, GO GENERATE NEW SCREEN DATA.\n         BAS   R14,OPRIMAS3      NO, TERMINATE CROSS MEMORY MODE.\n         B     OLDLOGBF          GO CHECK FOR TSO USER INPUT.\n         DROP  R4                MTTABLE.\nCHKLOGBF L     R4,BALOG          POINT TO THE LOG CONTROL TABLE.\n         CLC   TTSTATUS,0(R4)    HAS THE BUFFER STATUS CHANGED?\n         BNE   NEWLOGBF          YES, UPDATE THE SCREEN.\n         DROP  R3                BASE.\nOLDLOGBF DS    0H\n         MODESET MF=(E,MDSTPROB) NO.\n         SLR   R0,R0             DON'T WRITE ANYTHING TO THE SCREEN.\n         B     PUTSCRNO          CALL SCREEN HANDLER FOR ASYNC COMMAND.\n         SPACE\nMTTUPDAT BAS   R14,OPRIMAS3      TERMINATE CROSS MEMORY MODE.\n         B     OINITRDY          NEW MTT SCREEN WITHOUT TERMINAL INPUT.\n         SPACE\nOCLEAR   CLI   CLR+1,X'7E'       USING PRIMARY SCREEN SIZE?\n         BNE   OLOGINIT          YES, JUST UPDATE SCREEN DATA.\n         LA    R1,CLR            NO, RESET SCREEN TO ALTERNATE\n         LA    R0,L'CLR          SIZE BEFORE SCREEN DATA UPDATE.\n         ICM   R1,B'1000',TPUTFLG\n         TPUT  (1),(0),R\nOLOGINIT MVI   INBUFF,0          ERASE PREVIOUS ATTENTION IDENTIFIER.\n         CLI   HEADINGO+69,C'R'  TRACKING LATEST MESSAGES?\n         BE    ORELEASE          YES, ENSURE SET-UP IS CORRECT.\nOINITRDY DS    0H\n         MODESET MF=(E,MDSTSUP0)\n         SPACE\nNEWLOGBF MVC   HEADING,HEADINGO  LOAD HEADING FOR MASTER TRACE TABLE.\n         TR    HEADING,XLATETBL  HANDLE BAD SYSTEM DETAILS.\n         L     R1,SMCAADDR       POINT TO THE SMCA.\n         USING SMCABASE,R1\n         MVC   HEADING+36(4),SMCASID  COPY SYSTEM ID.\n         DROP  R1                     SMCABASE.\n         MVC   HEADING+67(1),VIPMODE  COPY COMMAND AUTHORITY FLAG.\n         LA    R2,BUFFER         RESET BUFFER POINTER.\n         LA    R1,LINES          POINT TO SCREEN DIMENSIONS.\n         CLI   OLDCOLS+3,80      USING A WIDE SCREEN?\n         BNH   OTOPOKAY          NO.\n         MVI   0(R2),C' '        YES.\n         MVC   1(220,R2),0(R2)   BLANK REST OF TOP LINE.\n         A     R2,OLDCOLS        ADD SCREEN WIDTH.\n         LA    R1,OLDSIZE        POINT TO WIDE SCREEN DIMENSIONS.\n         AHI   R2,-80            POINT TO FIRST DETAIL LINE.\n         OI    MODESW,ALTS       NEED ALTERNATE SCREEN SIZE.\n         CLI   OLDCOLS+3,100     AT LEAST 100 COLUMNS?\n         BL    OTOPOKAY          NO.\n         CLI   OSCROLL,C' '      ALREADY SCROLLED?\n         BNE   OTOPOKAY          YES.\n         MVI   OSCROLL,C'L'      NO, START OFF SCROLLED LEFT MAX.\nOTOPOKAY ST    R2,OTOPLINE       SAVE TOP LINE ADDRESS.\n         ST    R1,OSCRDIMS       SAVE SCREEN DIMENSIONS ADDRESS.\n         LA    R14,WINLINOH      GET LINE OVERHEAD.\n         L     R3,CRNTOPTN       POINT TO CURRENT OPTION DETAILS.\n         A     R14,4(,R1)        GET SCREEN LINE OUTPUT BYTE COUNT.\n         L     R0,0(,R1)         GET SCREEN LINE COUNT.\n         LA    R15,C' '          GET PAD CHARACTER.\n         STH   R14,12(,R3)       SET CURRENT LINE LENGTH.\n         AHI   R0,-3             DISCOUNT SPECIAL LINES.\n         SLL   R15,24            PROMOTE PAD AND ZERO SOURCE LENGTH.\n         C     R14,OLINLNTH      ALREADY SET CURRENT LINE LENGTH?\n         BE    MTTCLRLP          YES, SKIP A BIT OF WORK.\n         L     R3,0(,R1)         GET SCREEN LINE COUNT.\n         AHI   R3,-2             DISCOUNT 2 LINES.\n         MH    R3,6(,R1)         GET SECOND LAST LINE SCREEN OFFSET.\n         ST    R14,OLINLNTH      SET CURRENT LINE LENGTH.\n         STCM  R3,3,OPA1ADR1     SET INTO DATA STREAM.\n         AH    R3,6(,R1)         GET LAST LINE SCREEN OFFSET.\n         STCM  R3,3,OPA1ADR2     SET INTO DATA STREAM.\n         CHI   R3,4096           14-BIT ADDRESSING REQUIRED?\n         BNL   MTTCLRLP          YES, DO NOT USE 12-BIT ADDRESSING.\n         SLL   R3,2              NO, CONVERT TO 12-BIT ADDRESSING.\n         STCM  R3,2,OPA1ADR2\n         ICM   R3,3,OPA1ADR1\n         SLL   R3,2\n         STCM  R3,2,OPA1ADR1\n         NI    OPA1ADR1+1,X'3F'\n         NI    OPA1ADR2+1,X'3F'\n         LARL  R3,TABLE\n         TR    OPA1ADR1(2),0(R3)\n         TR    OPA1ADR2(2),0(R3)\nMTTCLRLP MVC   0(LL-79,R2),LOWX\n         L     R3,4(,R1)         GET SCREEN WIDTH.\n         LA    R2,LL-79(,R2)     POINT PAST DEFAULT LINE ATTRIBUTES.\n         BCTR  R3,0              DISCOUNT ATTRIBUTE BYTE.\n         MVCL  R2,R14            BLANK THE LINE.\n         BCT   R0,MTTCLRLP\n         LR    R9,R2             COPY SUMMARY LINE ADDRESS.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         MVI   0(R9),X'28'       CLEAR NON-SCROLLABLE LINE FLAG.\n         L     R1,OSCRDIMS       LOAD SCREEN DIMENSIONS ADDRESS.\n         MVC   0(LL-79,R2),LOWX  LOAD LINE ATTRIBUTES.\n         MVI   4(R2),X'40'       THE INPUT AREA IS LOW INTENSITY.\n         MVI   6(R2),X'13'       INSERT CURSOR AT INPUT LINE START.\n         MVC   7(2,R2),6(R2)     OVERLAY COLOUR BYTES.\n         L     R3,4(,R1)         GET SCREEN WIDTH.\n         LA    R2,LL-79(,R2)     POINT PAST INPUT LINE ATTRIBUTES.\n         BCTR  R3,0              DISCOUNT ATTRIBUTE BYTE.\n         SR    R15,R15           ZERO PAD AND SOURCE LENGTH.\n         MVCL  R2,R14            RESET INPUT LINE.\n         ST    R2,OPAGEND        SAVE END OF SCREEN DATA ADDRESS.\n         STH   R15,OWTORCNT      ZERO DISPLAYED WTOR COUNT.\n         LR    R2,R9             POINT TO SYSTEM SUMMARY LINE.\n         SR    R2,R14            POINT TO LAST MESSAGE DISPLAY LINE.\n         L     R15,OSCRDIMS      POINT TO SCREEN DIMENSIONS.\n         L     R15,0(,R15)       GET THE SCREEN LINE COUNT.\n         SRA   R15,2             GET A QUARTER OF IT.\n         MR    R14,R14           GET THEIR DATA STREAM SIZE.\n         SR    R9,R15            GUARD THIS MANY LINES BEFORE SUMMARY.\n         ST    R9,ORVRSLIM       SAVE AS LIMIT FOR REVERSE VIDEO LINES.\n         L     R9,OTOPLINE       REMEMBER THE START OF DETAIL LINES.\n         CLI   MSGSAUCE,C'L'     LOOKING AT THE SYSLOG BUFFER?\n         BE    OPUTWTOR          YES, ALWAYS SHOW OUTSTANDING WTORS.\n         ICM   R0,15,OMTTMOVE    TRACKING LATEST MESSAGES?\n         BNZ   OWTORSOK          NO, SKIP WTOR TEXT DISPLAY.\n         SPACE\nOPUTWTOR L     R6,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R6\n         TM    CVTOSLV0,CVTUCBSV UCB SERVICES AVAILABLE?\n         BO    @PUTWTOR          YES, DON'T USE STATIC UCB CHAIN.\n         L     R3,CVTUCBA        POINT TO FIRST UCB.\n         L     R6,CVTCUCB        POINT TO THE UNIT CONTROL MODULE.\n         DROP  R6                CVT.\n         SLR   R14,R14           ZERO LISTED MOUNT PENDING COUNT.\n         LA    R15,LL-70(,R9)    POINT TO FIRST DISPLAY SLOT IN LINE.\n         B     OFRSTUCB          FIRST TIME THROUGH THE LOOP.\n         USING UCBOB,R3\nONEXTUCB ICM   R3,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BZ    OLASTUCB          NO MORE UCB ENTRIES.\nOFRSTUCB CLI   UCBID,UCBSTND     STANDARD UCB?\n         BNE   ONEXTUCB          NO, TRY NEXT UCB.\n         TM    UCBTBYT3,X'A0'    TAPE OR DASD?\n         BZ    ONEXTUCB          NO, CAN'T HAVE A MOUNT PENDING.\n         TM    UCBDMCT,UCBMOUNT  YES, MOUNT PENDING?\n         BZ    ONEXTUCB          NO.\n         TM    UCBFLA,UCBNRY     YES, IS THE DEVICE NOT READY?\n         BZ    ONEXTUCB          NO, NOTHING FOR OPERATOR TO DO.\nOMNTLINE MVC   3(LL-82,R9),HIGHX+3 HIGH INTENSITY FOR MOUNT MESSAGES.\n         MVI   LL-80(R9),X'F3'   PINK FOR MOUNT MESSAGES.       (I3279)\n         MVI   2(R9),X'F2'       REVERSE VIDEO FOR MOUNT MESSAGES.\n         MVI   5(R9),X'50'       REVERSE VIDEO.                 (F9526)\n         MVC   LL-79(8,R9),=CL8'MNT-PND:'\n         LA    R14,1(,R14)       INCREMENT UNIT COUNT.\n         CHI   R14,6             WILL IT FIT ON THIS LINE?\n         BNH   OMNTHERE          YES, DO IT.\n         TR    LL-79(79,R9),XLATETBL\n         A     R9,OLINLNTH       NO, POINT TO THE NEXT LINE.\n         C     R9,ORVRSLIM       REACHED GUARDED LINES?\n         BNL   EOLOGBUF          YES, LEAVE ROOM FOR LATEST MESSAGES.\n         SLR   R14,R14           RESET COUNT TO BE FOR THIS LINE ONLY.\n         LA    R15,LL-70(,R9)    POINT TO FIRST DISPLAY SLOT IN LINE.\n         B     OMNTLINE          PREPARE THE NEW LINE.\nOMNTHERE MVC   0(6,R15),UCBVOLI  COPY VOLUME SERIAL NUMBER.\n         TM    UCBVOLI,X'FF'     SCRATCH TAPE REQUEST?\n         BM    OVOLOKAY          NO.\n         MVC   0(6,R15),=C'SCRTCH'\nOVOLOKAY MVI   6(R15),C'/'\n         MVC   7(3,R15),UCBNAME  COPY UCB NAME.\n         LA    R15,11(,R15)      POINT TO NEXT DISPLAY SLOT.\n         B     ONEXTUCB          CONTINUE THE UNIT SCAN.\n         USING CVT,R6\n@PUTWTOR L     R5,CVTIXAVL       POINT TO THE IOCM.\n         USING IOCOM,R5\n         L     R6,CVTCUCB        POINT TO THE UNIT CONTROL MODULE.\n         DROP  R6                CVT.\n         L     R5,IOCIOVTP       POINT TO THE IOVT.\n         DROP  R5                IOCOM.\n         TM    OSLEVEL+5,CVTH7740 Z/OS 1.9 OR LATER?\n         BO    OMOUNTDN          YES, SKIP MOUNT PENDING LIST.\n         L     R1,8(,R5)         POINT TO THE UCB LOOK-UP TABLE.\n         L     R0,16(,R1)        GET THE TOTAL UCB COUNT.\n         LA    R5,132(,R1)       POINT TO FIRST ENTRY.\n         SLR   R14,R14           ZERO LISTED MOUNT PENDING COUNT.\n         LA    R15,LL-71(,R9)    POINT TO FIRST DISPLAY SLOT IN LINE.\n         TM    OSLEVEL+5,CVTH7720 Z/OS 1.7 OR LATER?\n         BNO   @UCBLOOP          NO, PROCEED.\n         L     R0,24(,R1)        GET THE TOTAL UCB COUNT.\n         LA    R5,264(,R1)       POINT TO FIRST ENTRY.\n@UCBLOOP L     R3,8(,R5)         GET NEXT UCB ADDRESS.\n         CLI   UCBID,UCBSTND     STANDARD UCB?\n         BNE   @NEXTUCB          NO, TRY NEXT UCB.\n         TM    UCBTBYT3,X'A0'    TAPE OR DASD?\n         BZ    @NEXTUCB          NO, CAN'T HAVE A MOUNT PENDING.\n         TM    UCBDMCT,UCBMOUNT  YES, MOUNT PENDING?\n         BZ    @NEXTUCB          NO.\n         TM    UCBFLA,UCBNRY     YES, IS THE DEVICE NOT READY?\n         BZ    @NEXTUCB          NO, NOTHING FOR OPERATOR TO DO.\n@MNTLINE MVC   3(LL-82,R9),HIGHX+3 HIGH INTENSITY FOR MOUNT MESSAGES.\n         MVI   LL-80(R9),X'F3'   PINK FOR MOUNT MESSAGES.       (I3279)\n         MVI   2(R9),X'F2'       REVERSE VIDEO FOR MOUNT MESSAGES.\n         MVI   5(R9),X'50'       REVERSE VIDEO.                 (F9526)\n         MVC   LL-79(8,R9),=CL8'MNT-PND:'\n         LA    R14,1(,R14)       INCREMENT UNIT COUNT.\n         CHI   R14,6             WILL IT FIT ON THIS LINE?\n         BNH   @MNTHERE          YES, DO IT.\n         TR    LL-79(79,R9),XLATETBL\n         A     R9,OLINLNTH       NO, POINT TO THE NEXT LINE.\n         C     R9,ORVRSLIM       REACHED GUARDED LINES?\n         BNL   EOLOGBUF          YES, LEAVE ROOM FOR LATEST MESSAGES.\n         SLR   R14,R14           RESET COUNT TO BE FOR THIS LINE ONLY.\n         LA    R15,LL-70(,R9)    POINT TO FIRST DISPLAY SLOT IN LINE.\n         B     @MNTLINE          PREPARE THE NEW LINE.\n@MNTHERE MVC   0(6,R15),UCBVOLI  COPY VOLUME SERIAL NUMBER.\n         TM    28(R3),X'FF'      SCRATCH TAPE REQUEST?\n         BM    @VOLOKAY          NO.\n         MVC   0(6,R15),=C'SCRTCH'\n@VOLOKAY MVI   6(R15),C'/'\n         UNPK  WORK(5),0(3,R5)   SHOW DEVICE NUMBER.\n         TR    WORK(4),HEX-C'0'\n         MVC   7(4,R15),WORK\n         LA    R15,12(,R15)      POINT TO NEXT DISPLAY SLOT.\n@NEXTUCB LA    R5,12(,R5)        POINT TO NEXT UCB LOOK-UP ENTRY.\n         BCT   R0,@UCBLOOP       CONTINUE THE UNIT SCAN.\n         DROP  R3                UCBOB.\n         USING UCM,R6\nOLASTUCB LTR   R14,R14           ANY MOUNTS PENDING?\n         BZ    OMOUNTDN          NO, PROCESS ANY WTORS.\n*        MVI   2(R9),X'F4'       YES, UNDERSCORE LAST LINE.     (I3279)\n*        LR    R15,R9            REMEMBER THE ADDRESS OF THIS LINE.\n         TR    LL-79(79,R9),XLATETBL\n         A     R9,OLINLNTH       POINT TO FIRST LINE FOR WTORS.\nOMOUNTDN ICM   R0,15,UCMRPYQ     IS ANY WTOR OUTSTANDING?\n         BZ    OWTORSOK          NO, THE IS NO ORE ON THE CHAIN.\n*        LTR   R14,R14           YES, WERE THERE ANY MOUNTS?\n*        BZ    OMOUNTOK          NO, SCREEN IS STILL EMPTY.\n*        MVI   2(R15),X'00'      YES, SO REMOVE UNDERSCORE.     (I3279)\nOMOUNTOK LH    R15,UCMCTID       YES, LOAD THE ASID OF COMMTASK.\n         ICM   R7,15,UCMRPYQ     ANY OPERATOR REPLY ELEMENTS?\n         BZ    EOWTORSX          NO, NO WTOR MESSAGES TO SHOW.\n         BAS   R14,OSETSAS       MAKE IT THE SECONDARY ADDRESS SPACE.\n         LR    R3,R7             POINT TO FIRST OPERATOR REPLY ELEMENT.\n         USING OREF,R3\nNXTWTOR3 L     R4,ORERWQE        POINT TO THE WRITE QUEUE ELEMENT.\n         USING WQE,R4\n         LA    R15,WQEPAD        POINT TO THE START OF THE MESSAGE.\n         BAS   R14,WTORSHOW      DISPLAY IT.\n         C     R9,ORVRSLIM       REACHED GUARDED LINES?\n         BNL   EOWTORS3          YES, LEAVE ROOM FOR LATEST MESSAGES.\n         ICM   R3,15,ORELKP      POINT TO THE NEXT ORE.\n         BNZ   NXTWTOR3          PROCESS IT.\nEOWTORS3 LA    R14,EOWTORSX      SPECIFY THE RETURN ADDRESS.\n         B     OPRIMAS3          REVERT TO PRIMARY ADDRESS SPACE MODE.\nNXTWTOR2 L     R4,ORERWQE        POINT TO THE WRITE QUEUE ELEMENT.\n         SLR   R14,R14           USE KEY ZERO.\n         LA    R5,147            GET THE LENGTH OF THE TEXT TO FETCH.\n*                                COPY WTOR TEXT.\n         MVCP  SECWORKA(R5),WQEPAD-WQE(R4),R14\n         LA    R15,SECWORKA      POINT TO THE START OF THE MESSAGE.\n         BAS   R14,WTORSHOW      DISPLAY IT.\n         C     R9,ORVRSLIM       REACHED GUARDED LINES?\n         BNL   EOWTORS2          YES, LEAVE ROOM FOR LATEST MESSAGES.\n         ICM   R3,15,ORELKP      POINT TO THE NEXT ORE.\n         BNZ   NXTWTOR2          PROCESS IT.\nEOWTORS2 BAS   R14,OPRIMAS2      REVERT TO PRIMARY ADDRESS SPACE MODE.\nEOWTORSX EQU   *                 GUARDED LINES NOT YET LOADED.\n         DROP  R3,R4,R6          OREF, WQE, UCM.\n         SPACE\nOWTORSOK CLI   MSGSAUCE,C'L'     LOOKING AT THE SYSLOG BUFFER?\n         BE    SYSLOGBF          YES, GO DO IT.\n         LA    R15,1             LOAD THE ASID OF THE MASTER SCHEDULER.\n         BAS   R14,OSETSAS       SET ASID 1 AS THE SECONDARY ASID.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTMSER        POINT TO THE MSRDA.\n         DROP  R3                CVT.\n         USING BASE,R3\n         ICM   R4,15,BAMTTBL     POINT TO THE MASTER TRACE TABLE.\n         BNZ   MTTUPDTE          IT EXISTS SO USE IT.\n         MVC   LL-61(L'NOMTTMSG,R9),NOMTTMSG\n         B     EOMTTMSG          INDICATE IT DOES NOT EXIST.\n         DROP  R3                BASE.\n*                                SAVE THE CURRENT BUFFER STATUS.\n         USING MTTABLE,R4\nMTTUPDTE MVC   TTSTATUS(36),MTTABLE\n         L     R6,OMTTLOCN       REMEMBER THE PREVIOUS LOCATION.\n         L     R5,MTTCURPT       POINT TO THE LATEST MESSAGE.\n         USING MTENTRY,R5\n         ST    R5,OMTTLOCN       REMEMBER THE CURRENT LOCATION.\n         ICM   R0,15,OMTTMOVE    TRACKING THE LATEST MESSAGES?\n         BZ    CHKJOBID          YES, GO DO IT.\n         LTR   R6,R6             FIRST TIME HERE?\n         BZ    MTTCHAIN          YES, SKIP ORIENTATION PHASE.\n         SLR   R15,R15           CLEAR FOR INSERT.\n         SLR   R1,R1             CLEAR A COUNTER.\nTTMOVING CR    R5,R6             ORIENTATION NOW UP-TO-DATE?\n         BE    MTTCHAIN          YES, FOLLOW THE CHAIN.\n         ICM   R15,3,MTENTLEN    GET THE MTT MESSAGE TEXT LENGTH.\n         LA    R1,1(,R1)         INCREMENT THE COUNTER.\n         C     R1,FFFF           RIDICULOUSLY HIGH VALUE?\n         BH    TTRESYNC          YES, LOST TRACK SO RESYNCHRONIZE.\n         LA    R5,MTENTDAT(R15)  POINT TO THE NEXT MESSAGE.\n         C     R5,MTTENDPT       GONE PAST END OF TRACE TABLE?\n         BL    TTMOVING          NO, THE ADDRESS IS VALID.\n         L     R5,MTTWRPPT       YES, POINT TO LAST ENTRY BEFORE WRAP.\n         B     TTMOVING          PROCESS THIS MESSAGE.\nTTRESYNC SLR   R1,R1             WRAP-AROUND BETWEEN TERMINAL INPUT.\n         ST    R1,OMTTMOVE       HAVE TO SHOW LATEST MESSAGES NOW.\n         B     MTTUPDTE          GO GET SOME MESSAGES TO SHOW.\nMTTCHAIN LR    R15,R0            GET THE OLD MOVING VALUE.\n         AR    R15,R1            GET THE NEW INCREASE IN MESSAGES.\n         ST    R15,OMTTMOVE      SAVE THE NEW VALUE FOR NEXT TIME.\n         LTR   R15,R15           IS THE NEW VALUE NEGATIVE?\n         BNP   ONEGMOVE          YES, SO SHOW THE LATEST.\n         LTR   R0,R0             NO, BUT WAS THE OLD VALUE NEGATIVE?\n         BM    MTTUPDTE          YES, SO THE CHAINING WENT TOO FAR.\n         BZ    CHKJOBID          SHOULDN'T HAPPEN.\n         SLR   R15,R15           CLEAR FOR INSERT.\nOMTTSCAN ICM   R15,3,MTENTLEN    GET THE MTT MESSAGE TEXT LENGTH.\n         C     R5,MTTCURPT       MESSAGE FROM PREVIOUS CYCLE?\n         BNL   ONOWRAP1          NO.\n         LA    R6,MTENTDAT       YES, GET ADDRESS OF MESSAGE TEXT.\n         C     R6,MTTCURPT       HAS THE ENTRY HEADER BEEN OVERLAID?\n         BNL   MTTOOFAR          YES.\n         LA    R6,MTENTDAT(R15)  POINT PAST THIS ENTIRE ENTRY.\n         C     R6,MTTCURPT       HAS THE MESSAGE TEXT BEEN OVERLAID?\n         BNH   ONOWRAP1          NO, THE ENTRY IS COMPLETELY VALID.\nMTTOOFAR L     R6,OMTTMOVE       GET THE OLD DISCARD VALUE.\n         SR    R6,R0             SUBTRACT VANISHED MESSAGE COUNT.\n         L     R14,OSCRDIMS      POINT TO SCREEN DIMENSIONS.\n         S     R6,0(,R14)        LEAVE A SCREEN-FULL OF LINES TO SHOW.\n         LA    R6,4(,R6)         ALLOW FOR HEADING, SUMMARY, INPUT, ETC\n         ST    R6,OMTTMOVE       SAVE THE NEW DISCARD MESSAGE VALUE.\n         B     MTTUPDTE          START COUNTING ALL OVER AGAIN.\nONOWRAP1 LA    R5,MTENTDAT(R15)  POINT TO THE NEXT MESSAGE.\n         C     R5,MTTENDPT       GONE PAST END OF TRACE TABLE?\n         BL    TTSCANOK          NO, THE ADDRESS IS VALID.\n         CLI   MTTWRPTM,C'W'     YES, ANY WRAP-AROUND YET?\n         BNE   MTTOOFAR          NO, NO MORE MESSAGES TO DISPLAY.\n         L     R5,MTTWRPPT       YES, POINT TO LAST ENTRY BEFORE WRAP.\n         C     R5,MTTCURPT       MESSAGE FROM PREVIOUS CYCLE?\n         BNL   MTTOOFAR          NO, NO MORE MESSAGES TO FETCH.\nTTSCANOK BCT   R0,OMTTSCAN       SCAN DOWN TO DESIRED MESSAGE.\n         B     CHKJOBID          NOW AT CORRECT STARTING MESSAGE.\nONEGMOVE SLR   R0,R0\n         ST    R0,OMTTMOVE       TRACK THE LATEST MESSAGES.\n         L     R5,OMTTLOCN       POINT TO THE LATEST MESSAGE.\nCHKJOBID ICM   R15,15,OJOBIDID   ANY JOBID TO FIND?\n         BZ    LDMTTMSG          NO, LOAD MESSAGES.\n         LA    R0,0(,R15)        GET MESSAGES TO GO.\n         LR    R14,R5            SAVE MESSAGE ADDRESS.\n         SLR   R6,R6             PREPARE FOR INSERT.\n         LTR   R0,R0             ANY CHAINING TO BE DONE?\n         BZ    GETJOBID          NO.\nOJOBIDLP ICM   R6,3,MTENTLEN     GET THE MTT MESSAGE TEXT LENGTH.\n         C     R5,MTTCURPT       MESSAGE FROM PREVIOUS CYCLE?\n         BNL   OJNORAP2          NO.\n         C     R15,MTTCURPT      HAS THE ENTRY HEADER BEEN OVERLAID?\n         BNL   OJMLOKAY          YES, DO NOT UPDATE JOBID SELECTION.\n         LA    R14,MTENTDAT(R6)  NO, POINT PAST THIS ENTIRE ENTRY.\n         C     R14,MTTCURPT      HAS THE MESSAGE TEXT BEEN OVERLAID?\n         BNL   OJMLOKAY          YES, DO NOT UPDATE JOBID SELECTION.\nOJNORAP2 LA    R5,MTENTDAT(R6)   POINT TO THE NEXT MESSAGE.\n         LTR   R0,R0             SCANNING MLWTO?\n         BP    OJOBIDCT          NO.\n         CLI   MTENTDAT,C'D'     NON-FIRST LINE OF MULTI-LINE WTO?\n         BL    GETJOBID          NO, USE THIS JOB IDENTIFIER.\n         CLI   MTENTDAT,C'E'     NON-FIRST LINE OF MULTI-LINE WTO?\n         BH    GETJOBID          NO, USE THIS JOB IDENTIFIER.\nOJOBIDCT BCT   R0,OJOBIDLP\nGETJOBID MVC   OMSGJBID,BLANKS   CLEAR PREVIOUS JOB IDENTIFIER.\n         CLI   MTENTDAT,C'D'     NON-FIRST LINE OF MULTI-LINE WTO?\n         BE    OJOBIDLP          YES.\n         CLI   MTENTDAT,C'E'     NON-FIRST LINE OF MULTI-LINE WTO?\n         BE    OJOBIDLP          YES.\n*                                SAVE JOBID TO USE.\n         MVC   OMSGJBID,MTENTDAT+37\nOJMLOKAY LR    R5,R14            RESTORE MESSAGE ADDRESS.\n         SLR   R0,R0\n         ST    R0,OJOBIDID       FLAG JOB ID SELECTION NOW COMPLETE.\nLDMTTMSG LA    R15,MTENTDAT      POINT TO THE ACTUAL MESSAGE TEXT.\n         SLR   R6,R6\n         ICM   R6,3,MTENTLEN     GET THE MTT MESSAGE TEXT LENGTH.\n         C     R5,MTTCURPT       MESSAGE FROM PREVIOUS CYCLE?\n         BNL   ONOWRAP2          NO.\n         C     R15,MTTCURPT      HAS THE ENTRY HEADER BEEN OVERLAID?\n         BNL   MTTBLTOP          YES.\n         LA    R14,MTENTDAT(R6)  NO, POINT PAST THIS ENTIRE ENTRY.\n         C     R14,MTTCURPT      HAS THE MESSAGE TEXT BEEN OVERLAID?\n         BNL   MTTBLTOP          YES, THE \"TOP\" HAS BEEN REACHED.\nONOWRAP2 LA    R5,MTENTDAT(R6)   POINT TO THE NEXT MESSAGE.\n         BAS   R14,OSLOGMSG      EDIT AND DISPLAY THE MESSAGE.\n         CR    R2,R9             BEHIND START OF SCREEN?\n         BL    EOMTTMSG          YES, DO NOT LOAD ANY MORE MESSAGES.\n         C     R5,MTTENDPT       GONE PAST END OF TRACE TABLE?\n         BL    LDMTTMSG          NO, PROCESS THIS MESSAGE.\n         CLI   MTTWRPTM,C'W'     YES, ANY WRAP-AROUND YET?\n         BNE   MTTBLTOP          NO, NO MORE MESSAGES TO DISPLAY.\n         L     R5,MTTWRPPT       YES, POINT TO LAST ENTRY BEFORE WRAP.\n         B     LDMTTMSG          PROCESS THIS MESSAGE.\nMTTBLTOP MVC   3(LL-82,R2),HIGHX+3\n         L     R14,OSCRDIMS      POINT TO SCREEN DIMENSIONS.\n         LA    R15,X'3A'         SET PAD TO HORIZONTAL LINE.\n         SLL   R15,24            PROMOTE PAD AND ZERO SOURCE LENGTH.\n         L     R1,4(,R14)        GET SCREEN WIDTH.\n         BCTR  R1,0              DISCOUNT ATTRIBUTE BYTE.\n         LA    R0,LL-79(,R2)     POINT TO FIRST TEXT COLUMN.\n         MVCL  R0,R14            DRAW A LINE ACROSS THE SCREEN.\n         L     R1,4(,R14)        GET SCREEN WIDTH.\n         SRA   R1,1              HALVE IT.\n         LA    R0,L'MTTOPMSG/2\n         SR    R1,R0\n         LAE   R1,LL-80(R1,R2)   POINT TO MESSAGE AREA.\n         MVC   0(L'MTTOPMSG,R1),MTTOPMSG\nEOMTTMSG BAS   R14,OPRIMAS3      REVERT TO PRIMARY SPACE MODE.\n         B     EOLOGBUF          TIDY UP AND DISPLAY SCREEN.\n         DROP  R4,R5             MTTABLE, MTENTRY.\n         SPACE\nSYSLOGBF MVC   HEADING(18),=CL18' SYSTEM LOG BUFFER'\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTMSER        POINT TO THE MSRDA.\n         DROP  R3                CVT.\n         USING BASE,R3\n         L     R4,BALOG          POINT TO THE LOG CONTROL TABLE.\n         DROP  R3                BASE.\n         MVC   TTSTATUS,0(R4)    SAVE THE CURRENT BUFFER STATUS.\n         SLR   R5,R5\n         ICM   R5,7,5(R4)        POINT TO THE LATEST MESSAGE.\n         BZ    EOLOGBUF          NO MESSAGE SO LOG BUFFER IS EMPTY.\nLDLOGMSG LA    R15,12(,R5)       POINT TO THE ACTUAL MESSAGE TEXT.\n         LH    R6,8(,R5)         GET THE LOG MESSAGE TEXT LENGTH.\n         AHI   R6,-4             GET THE LOG MESSAGE TEXT LENGTH.\n         BAS   R14,OSLOGMSG      EDIT AND DISPLAY THE MESSAGE.\n         CR    R2,R9             BEHIND START OF SCREEN?\n         BL    EOLOGBUF          YES, DO NOT LOAD ANY MORE MESSAGES.\n         ICM   R5,15,0(R5)       POINT TO PREVIOUS LOG MESSAGE.\n         BNZ   LDLOGMSG          GO LOAD IT.\nEOLOGBUF MODESET MF=(E,MDSTPROB)\n         L     R9,CCTADDR        GET CCT ADDRESS.\n         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.\n         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.\n         L     R1,INITADDR\n         USING INITIAL,R1\n         MVC   HOME,SCRNHDR      RESTORE SCREEN HEADER.\n         DROP  R1                INITIAL.\n         LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         L     R0,OPAGEND        POINT TO END OF SCREEN BUFFER.\n         SR    R0,R1             GET SCREEN BUFFER LENGTH.\n         CLI   OTGETRC,4         ANY DATA FROM MOST RECENT TGET?\n         BNE   PUTSCRNO          YES, UPDATE ENTIRE SCREEN.\n         MVC   HOME+1(L'HOME-1),=X'401140401B404E'  UPDATE SCREEN HDR.\n         LA    R1,HOME+1         POINT TO NEW NULL WCC.\n         BCTR  R0,0              ADJUST LENGTH.\n         S     R0,OLINLNTH       REDUCE LENGTH TO LEAVE LAST LINE ASIS.\n         B     PUTSCRNO          DISPLAY THE SCREEN.\n         SPACE\nOSETSAS  DS    0H                SET SECONDARY ADDRESS SPACE ROUTINE.\n         LR    R3,R14            SAVE THE RETURN ADDRESS.\n         XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n         STH   R15,WORK+2        SPECIFY THE SECONDARY ASID.\n         L     R14,PSAAOLD       POINT TO THE CURRENT ASCB.\n         MVC   WORK+6(2),ASID(R14) SPECIFY HOME AS THE PRIMARY ASID.\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\n***      TM    OSBITS,X'9B'      MVS/XA?\n***      BNO   OSETSAS2          YES, CANNOT USE ACCESS REGISTERS.\n         L     R15,WORK          RELOAD THE TARGET ASID.\n         LA    R1,1              LOAD ASID OF *MASTER*.\n         LA    R5,MSTRALET       POINT TO REQUIRED ALET.\n         CR    R1,R15            CORRECT ALET?\n         BE    OTGTOKAY          YES.\n         LA    R5,COMMALET       NO, MUST BE THAT OF COMMTASK.\nOTGTOKAY ST    R5,WORK+4         SAVE ALET HOLDING AREA ADDRESS.\n         ICM   R5,15,0(R5)       LOAD PREVIOUS ALET VALUE.\n         BNZ   OSALETOK          NON-ZERO SO ALREADY HAVE IT.\n         SLL   R15,2             MULTIPLY TARGET ASID BY 4 FOR INDEX.\n         A     R15,ASVTADDR\n*                                POINT TO TARGET ASCB.\n         L     R15,ASVTENTY-ASVT-4(,R15)\n         USING ASCB,R15\n         L     R15,ASCBASSB      POINT TO TARGET ASSB.\n         DROP  R15               ASCB.\n         USING ASSB,R15\n         MVC   WORK2,ASSBSTKN    COPY TARGET SPACE TOKEN.\n         DROP  R15               ASSB.\n         ALESERV ADD,STOKEN=WORK2,ALET=(R5),CHKEAX=NO,                 +\n               MF=(E,ALESERVL)   ADD ALET TO DU-AL LIST.\n         LTR   R15,R15           WAS THE ADD SUCCESSFUL?\n         BNZ   OALERROR\n         L     R15,WORK+4        POINT TO ALET HOLDING AREA.\n         ST    R5,0(,R15)        SAVE THE RETURNED ALET VALUE.\nOSALETOK DS    0H                NOW HAVE DESIRED ALET VALUE.\n         SAR   A4,R5             AR4 WILL POINT TO THE TARGET ASID.\n         SAR   A5,R5             AR5 WILL POINT TO THE TARGET ASID.\n         SAR   A15,R5            AR15 WILL POINT TO THE TARGET ASID.\n         SAC   X'200'            GET INTO ACCESS REGISTER MODE.\nOSLASPOK DS    0H                CROSS MEMORY SETUP WAS SUCCESSFUL.\n         LR    R14,R3            RESTORE THE RETURN ADDRESS.\n         BR    R14               RETURN TO CALLER.\nOALERROR STC   R15,WORK          SAVE THE ALESERV RETURN CODE.\n         UNPK  AEMSGTXT+30(3),WORK(2)\n         TR    AEMSGTXT+30(2),HEX-C'0'\n         MVI   AEMSGTXT+32,C''''\n         LA    R1,AEMSG          DISPLAY THIS ERROR CODE ON THE SCREEN.\n         LA    R0,AEMSGLEN\n         B     PUTSCRNO\nOSETSAS2 DS    0H                XA CROSS MEMORY PROCESSING.\n         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.\n         LA    R1,1              ADDRESS ALL AX NUMBER.\n         AXSET AX=(1)            SET AX = 1.\n         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.\n         LASP  WORK,1            ACTIVATE SECONDARY ASID TRANSLATION.\n         BZ    OSLASPOK          LASP WAS SUCCESSFUL.\n         LH    R15,WORK+2        LASP FAILED - LOAD SECONDARY ASID.\n         DC    H'0'              CAUSE AN S0C1 ABEND.\n         SPACE\nOPRIMAS3 DS    0H                ESA END CROSS MEMORY MODE ROUTINE.\n         LR    R3,R14            SAVE THE RETURN ADDRESS.\n         SAC   X'000'            REVERT TO PRIMARY SPACE MODE.\n         B     OPRIMSWP          MAYBE BECOME SWAPPABLE AGAIN.\nOPRIMAS2 DS    0H                XA END CROSS MEMORY MODE ROUTINE.\n         XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n         LR    R3,R14            SAVE THE RETURN ADDRESS.\n         L     R14,PSAAOLD       POINT TO THE CURRENT ASCB.\n         MVC   WORK+2(2),ASID(R14) GET SECONDARY ASID - HOME.\n         MVC   WORK+6(2),ASID(R14) GET PRIMARY ASID - HOME.\n         LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.\n         L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\n         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.\nOPRIMSWP BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\n         LR    R14,R3            RESTORE THE RETURN ADDRESS.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nOSLOGMSG DS    0H                FORMAT MESSAGE LINE ROUTINE.\n         LAE   R1,0(,R15)        COPY MESSAGE TEXT ADDRESS.\n         CLI   54(R15),C' '      TWO-DIGIT YEAR FORMAT?\n         BE    *+8               YES.\n         LA    R15,2(,R15)       NO, FOUR-DIGIT YEAR FORMAT.\n         L     R7,OSCRDIMS       POINT TO SCREEN DIMENSIONS.\n         L     R7,4(,R7)         GET SCREEN WIDTH.\n         CLI   OMSGJBID,C' '     ANY JOB IDENTIFIER SELECTION?\n         BNH   OSJOBMSG          NO, PROCEED TO FORMAT THE MESSAGE.\n         CLC   OMSGJBID,37(R15)  CORRECT JOB IDENTIFIER IN MESSAGE?\n         BNER  R14               NO, DO NOT DISPLAY MESSAGE.\nOSJOBMSG CLI   OSCROLL,C'L'      SCROLLED LEFT?\n         BE    OLEFTMSG          YES.\n         CLI   OSCROLL,C'R'      SCROLLED RIGHT?\n         BE    ORITEMSG          YES.\n         AHI   R7,-25\n         AR    R7,R15\n         SR    R7,R1\n         CR    R7,R6             WTO WITH MESSAGE PART?\n         BNL   MSGCLROK          NO, TOO SHORT SO MUST BE A WTL MSG.\n         MVC   LL-79(8,R2),37(R15) LOAD MESSAGE SOURCE (JOB NUMBER).\n         SR    R6,R7             GET VARIABLE MESSAGE PART LENGTH.\n         LA    R7,71             GET MAXIMUM SUPPORTED LENGTH.\n         CR    R6,R7             IS TRUNCATION NECESSARY?\n         BNH   LGMSGLEN          NO.\n         LR    R6,R7             YES, DO IT.\nLGMSGLEN BCTR  R6,0              DECREMENT FOR EXECUTE.\n         EX    R6,LDVARMSG       LOAD MESSAGE TEXT.\n         B     OMSGLDED          MESSAGE NOW LOADED.\nOLEFTMSG BCTR  R7,0              GET MAXIMUM SUPPORTED LENGTH.\n         CR    R6,R7             IS TRUNCATION NECESSARY?\n         BNH   LGLFTLEN          NO.\n         LR    R6,R7             YES, DO IT.\nLGLFTLEN BCTR  R6,0              DECREMENT FOR EXECUTE.\n         EX    R6,LDLFTMSG       LOAD MESSAGE TEXT.\n         B     OMSGLDED          MESSAGE NOW LOADED.\nORITEMSG LNR   R0,R7             GET NEGATIVE SCREEN WIDTH.\n         AHI   R0,102+80         GET MESSAGE DISPLAY OFFSET.\n         BNM   *+8\n         LA    R0,0              KEEP OFFSET NON-NEGATIVE.\n         AR    R0,R15\n         SR    R0,R1\n         SR    R6,R0             GET LENGTH OF TEXT TO BE SHOWN.\n         BNP   MSGCLROK          MESSAGE IS TOO SHORT SO EXIT.\n         BCTR  R7,0              GET MAXIMUM SUPPORTED LENGTH.\n         CR    R6,R7             IS TRUNCATION NECESSARY?\n         BNH   LGRITLEN          NO.\n         LR    R6,R7             YES, DO IT.\nLGRITLEN BCTR  R6,0              DECREMENT FOR EXECUTE.\n         LR    R7,R0             COPY DISPLAY OFFSET. .\n         LAE   R7,0(R7,R15)      POINT TO START OF DISPLAY TEXT.\n         EX    R6,LDRITMSG       LOAD MESSAGE TEXT.\n         LAE   R7,0\nOMSGLDED TR    LL-79(79,R2),XLATETBL\n         CLI   0(R1),C'O'        LOG ENTRY FROM OPERATOR?\n         BE    OMSGCLR4          YES.\n         CLI   0(R1),C'X'        LOG ENTRY FROM WTL?\n         BE    OMSGCLR4          YES.\n         CLI   55(R15),C' '      WTOR OR IMMEDIATE ACTION MESSAGE?\n         BNE   OMSGCLR7          YES.\n         CLI   0(R1),C'W'        WTOR?\n         BE    OMSGCLR7          YES.\n         CLI   1(R1),C'C'        COMMAND INPUT?\n         BE    OMSGCLR3          YES.\n         CLI   1(R1),C'I'        COMMAND ISSUED INTERNALLY?\n         BE    OMSGCLR3          YES.\n         CLI   1(R1),C'R'        COMMAND RESPONSE?\n         BE    OMSGCLR6          YES.\n         CLI   0(R1),C'M'        MULTI-LINE MESSAGE?\n         BE    OMSGCLR4          YES.\n         CLI   0(R1),C'D'        MULTI-LINE MESSAGE?\n         BE    OMSGCLR4          YES.\n         CLI   0(R1),C'E'        MULTI-LINE MESSAGE?\n         BE    OMSGCLR4          YES.\n         CLI   56(R15),C'+'      PROBLEM PROGRAM MESSAGE?\n         BE    OMSGCLR1          YES.\n         CLI   4(R1),C'A'        SECURITY MESSAGE?\n         BL    OMSGCLR5          NO.\n         CLI   4(R1),C'F'\n         BNH   OMSGCLR2          YES.\n         CLI   4(R1),C'8'\n         BL    OMSGCLR5          NO.\n         B     OMSGCLR2          YES.\nOMSGCLR1 MVI   LL-80(R2),X'F1'   SHOW IT IN BLUE.               (I3279)\n         B     MSGCLROK\nOMSGCLR2 MVC   3(LL-82,R2),HIGHX+3\n         MVI   LL-80(R2),X'F2'   SHOW IT IN RED.                (I3279)\n         B     MSGCLROK\nOMSGCLR3 MVC   3(LL-82,R2),HIGHX+3\n         MVI   LL-80(R2),X'F3'   SHOW IT IN PINK.               (I3279)\n         B     MSGCLROK          YES, IT IS NOW IN \"MEDIUM\" INTENSITY.\nOMSGCLR4 MVI   LL-80(R2),X'F4'   SHOW IT IN GREEN.              (I3279)\n         B     MSGCLROK\nOMSGCLR5 MVI   LL-80(R2),X'F5'   SHOW IT IN TURQUOISE.          (I3279)\n         B     MSGCLROK\nOMSGCLR6 MVI   LL-80(R2),X'F6'   SHOW IT IN YELLOW.             (I3279)\n         B     MSGCLROK\nOMSGCLR7 MVC   3(LL-82,R2),HIGHX+3\n         MVI   LL-80(R2),X'F7'   SHOW IT IN WHITE.              (I3279)\nMSGCLROK CLI   HEADING+55,C'0'   LATEST MESSAGE TIME ALREADY IN HDG?\n         BNL   HDGOTMOK          YES, DO NOT USE THIS MESSAGE'S TIME.\n         CLI   27(R15),C':'      SYSTEM CONSOLE MESSAGE WITH TIMESTAMP?\n         BNE   HDGOTMOK          NO, NO TIMESTAMP TO COPY.\n         MVC   HEADING+55(11),25(R15)   YES, COPY ITS TIMESTAMP.\n         MVC   HEADING+43(11),=C'LAST MSG AT'\nHDGOTMOK CLI   OMSGJBID,C' '     LOOKING FOR SPECIFIC JOB IDENTIFIER?\n         BNH   HDGOTJOK          NO.\n         MVC   HEADING+42(3),=C'ID='\n         MVC   HEADING+45(8),OMSGJBID\n         MVI   HEADING+53,C' '   YES, SHOW JOB ID IN HEADING.\nHDGOTJOK S     R2,OLINLNTH       POINT TO PREVIOUS MESSAGE LINE.\n         BR    R14               RETURN TO CALLER.\nLDVARMSG MVC   LL-71(0,R2),55(R15)              <<< EXECUTED >>>\nLDLFTMSG MVC   LL-79(0,R2),0(R1)                <<< EXECUTED >>>\nLDRITMSG MVC   LL-79(0,R2),0(R7)                <<< EXECUTED >>>\n         SPACE\n         USING WQEPAD,R15\nWTORSHOW DS    0H                FORMAT WTOR MESSAGE LINE ROUTINE.\n         CLI   OMSGJBID,C' '     ANY JOB IDENTIFIER SELECTION?\n         BNH   WTORIDOK          NO, PROCEED TO FORMAT THE MESSAGE.\n         CLC   OMSGJBID,WQEJOBNM CORRECT JOB IDENTIFIER IN MESSAGE?\n         BNER  R14               NO, DO NOT DISPLAY MESSAGE.\nWTORIDOK MVC   3(LL-82,R9),HIGHX+3 HIGH INTENSITY FOR WTORS.\n         MVI   2(R9),X'F2'       REVERSE VIDEO FOR MOUNT WTORS.\n         MVI   5(R9),X'50'       REVERSE VIDEO.                 (F9526)\n         CLI   OSCROLL,C'L'      SCROLLED LEFT?\n         BE    WTORLEFT          YES.\n         CLI   OSCROLL,C'R'      SCROLLED RIGHT?\n         BE    WTORIGHT          YES.\n         MVC   LL-79(8,R9),WQEJOBNM   SUPPLY THE SUBSYSTEM JOB NUMBER.\n         MVC   LL-71(71,R9),WQETXT    SUPPLY THE MESSAGE TEXT.\n         B     WTOREXIT\nWTORLEFT MVC   LL-79(79,R9),WQEPAD    SUPPLY THE MESSAGE TEXT.\n         B     WTOREXIT\nWTORIGHT MVC   LL-79(79,R9),WQETXT+49 SUPPLY THE MESSAGE TEXT.\nWTOREXIT TR    LL-79(79,R9),XLATETBL\n*        ICM   R0,B'1111',0(R3)  LAST OPERATOR REPLY ELEMENT?\n*        BNZ   WTOROKAY          NO.\n*        MVI   2(R9),X'F4'       YES, UNDERSCORE THE LAST ONE.\nWTOROKAY A     R9,OLINLNTH       ADJUST BUFFER POINTER.\n         LA    R0,1\n         AH    R0,OWTORCNT       INCREMENT DISPLAYED WTOR COUNT.\n         STH   R0,OWTORCNT\n         BR    R14               RETURN TO CALLER.\n         DROP  R15               WQEPAD.\n         SPACE\n         DROP  R11,R10           OSCONSOL.\n         TITLE 'OS/MVS CONSOLE MONITOR - VARIABLES AND CONSTANTS'\nTTWAITIM DC    F'50'             WAIT HALF A SECOND FOR INPUT.\nOMTTLOCN DC    F'0'              ADDRESS OF LATEST MESSAGE SHOWN.\nOMTTMOVE DC    F'0'              NUMBER OF MESSAGES TO SCROLL.\nOJOBIDID DC    F'0'              MESSAGE NUMBER TO GET JOBID FROM.\nOSPYADDR DC    F'0'              ENTRY POINT OF IMPXASPY IN CSA.\nOMSGJBID DC    CL8' '            JOB IDENTIFIER IN MESSAGES TO SHOW.\nOTOPLINE DC    A(0)              TOP SCREEN DETAIL LINE ADDRESS.\nOSCRDIMS DC    A(0)              SCREEN DIMENSIONS POINTER.\nOLINLNTH DC    A(LL)             LINE DATA BYTE COUNT.\nORVRSLIM DC    A(0)              ADDRESS OF GUARDED DETAIL LINES.\nOPAGEND  DC    A(0)              FIRST ADDRESS PAST SCREEN DATA.\nOBILDLST DC    H'1'              ONE ENTRY IN BUILD LIST.\n         DC    H'76'             CATER FOR MAXIMUM USER DATA LENGTH.\nSPYDELOC DC    CL8'IMPXASPY'     OS CONSOLE SPY LOAD MODULE NAME.\n         DC    XL2'0000'         RELATIVE TRACK OF MEMBER START.\n         DC    XL1'00'           FIRST RECORD NUMBER (0 FOR NOT FOUND).\n         DC    XL1'00'           CONCATENATION CODE.\n         DC    XL1'00'           LOCATION CODE.\n         DC    XL1'00'           ALIAS FLAG AND USERDATA HW COUNT.\nOSUSRDAT DC    XL62'00'          USERDATA AREA.\n         SPACE\nOPCMDBUF DC    H'0',H'0',CL80' '\n         SPACE\nOPERWTO  WTO   '123456789.123456789.123456789.123456789.123456789.12345+\n               6789.123456789.1234567890',MF=L\nOPERMESG EQU   OPERWTO+4,80\n         SPACE\nOWTORCNT DC    H'0'              NUMBER OF WTORS ON SHOW.\nMSGSAUCE DC    C'T'              OPERATOR MESSAGE SOURCE FLAG.\nOPERPSWD DC    C'GAK'            OPERATOR COMMAND AUTHORITY PASSWORD.\nOSCROLL  DC    C' '              LEFT/RIGHT SCROLLING VALUE.\nOTGETRC  DC    X'00'             RETURN CODE FROM MOST RECENT TGET.\nHEADINGO DC    CL71'MASTER TRACE TABLE DISPLAY   SYSTEM XXXX           +\n                                <R>'\nNOMTTMSG DC    CL43'***  MASTER TRACE TABLE DOES NOT EXIST  ***'\nMTTOPMSG DC    CL34' MASTER TRACE TABLE - TOP OF DATA '\nOCMSG    DC    X'C5115DD81DF82842F22841F2'\n         DC    CL39'      ERROR - NOT IN COMMAND MODE      '\n         DC    X'1140402842001D402841F40000'\nOCMSGLEN EQU   *-OCMSG                    \"OPERATOR COMMAND\" MESSAGE.\nOPA1MSG  DCS   X'C5',SBA\nOPA1ADR1 DCS   (23,1),SF,PROHIS,SA,COLOUR,WHITE\n         DC    CL79'IEE150I CHANGE OPTIONS IF DESIRED: (ENTER TO ISSUE +\n               COMMAND; PA2 TO CANCEL IT.) '\n         DCS   SBA\nOPA1ADR2 DCS   (24,1),SA,COLOUR,GREEN,SF,X'C1',IC\nOLDOPCMD DC    CL79' '\nOPA1LEN  EQU   *-OPA1MSG\nAEMSG    DC    X'4011C1F81DF82842F22841F2'\nAEMSGTXT DC    CL39'       ALESERV FAILURE - RC=X''??''      '\nAEMSGLEN EQU   *-AEMSG                    \"ALESERV ERROR\" MESSAGE.\n         LTORG\n         TITLE 'OS/MVS CONSOLE MONITOR - ERROR SCREEN'\nOSBADMSG DC    X'C51140401D40132841F400001DF82842F7'\n         DC    C'           INTERACTIVE MONITORING PROGRAM FOR MVS/XA+E+\n               SA            &IMPDATE',X'284100'\n         SPACE\n         DC    X'3CC35C401DF42841F2',C'           ',X'284100'\n         DC    X'3CC46C401DF42841F2',C'    MVS    ',X'284100'\n         DC    X'3CC57C401DF42841F2',C'  CONSOLE  ',X'284100'\n         DC    X'3CC74C401DF42841F2',C'  MONITOR  ',X'284100'\n         DC    X'3CC85C401DF42841F2',C'           '\n         DC    X'2841003C404040'\n         SPACE\n         DCS   SBA,(9,4)\n         DC    X'&HIGH',C'IMPXA CONSOLE SPY FUNCTION MODULE'\n         SPACE\n         DCS   SBA,(11,10)\n         DC    X'2841F1'\nOSBADTXT DC    CL23'NOT INSTALLED CORRECTLY',X'284100'\n         SPACE\n         DCS   SBA,(15,6)\n         DC    X'&LOW',C'HIT',X'&MED',C'PF12/24',X'&LOW'\n         DC    C'FOR THE MAIN MENU'\n         SPACE 2\nOSBADLEN EQU   *-OSBADMSG\n         SPACE 3\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAP": {"ttr": 19972, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"+\\x07\\x00'\\x00\\x94\\x13\\x1f\\x01\\x07 O \\x08\\x01r\\x01\\xd8\\x001\\xc9\\xd5\\xe3\\xe3\\xf0\\xf3\\xf0@@@\"", "ispf": {"version": "43.07", "flags": 0, "createdate": "1994-05-11T00:00:00", "modifydate": "2007-07-23T20:08:27", "lines": 370, "newlines": 472, "modlines": 49, "user": "INTT030"}, "text": "*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD\n         TITLE 'PAGE DATA SET MONITOR DISPLAY LINE MAPPING'\nPGDSLINE DSECT\nPAGENTRY DS    XL(L'LOWX)\nPAGEDSN  DS    CL26\nPAGDSBAD DS    CL1\nPAGETYPE DS    CL3\nPGDSDPTH DS    CL4\nPGDSXFER DS    CL7\nPGDSIORT DS    CL7\n         DS    CL1\nPAGEDASD DS    CL6\nALCSLOTS DS    CL8\nBADSLOTS DS    CL4\nUSDSLOTS DS    CL7\nSLOTUSE  DS    CL4\nSLOTPCNT DS    CL1\n         TITLE 'PAGE DATA SET MONITOR SUBROUTINE'\nIMPXA    CSECT\n         USING PAGEDS,R11\nPAGEDS   DS    0H\nREDOPGDS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         SLR   R0,R0             CLEAR FOR DIVIDE.\n         ST    R0,WINLINES       INITIALIZE LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX SUPPLY HEADING ATTRIBUTES.\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVC   LL-79(79,R2),HEADINGP  LOAD HEADING.\n         BAS   R14,PADDLINE      LINE NOW COMPLETE.\n         L     R5,PARTADDR       POINT TO PAGING ACTIVITY REF. TABLE.\n         L     R7,24(,R5)        POINT TO THE PAGE DATA SET NAME LIST.\n         LA    R8,80(,R5)        POINT TO THE FIRST PARTE.\n         L     R3,IMCOMADR       POINT TO THE IMP/XA COMMON AREA.\n         USING IMPXACOM,R3\n         LA    R3,PGDSTABL       POINT TO FIRST IMPXA TABLE ENTRY.\n         DROP  R3                IMPXACOM.\n         SLR   R4,R4             ZERO DATA SET COUNTER.\n         ST    R4,TOTLUSE        ZERO TOTAL USED SLOTS.\n         ST    R4,TOTLALC        ZERO TOTAL ALLOCATED SLOTS.\n         ST    R4,TOTLBAD        ZERO TOTAL BAD SLOTS.\n         TIME  BIN               GET TIME-OF-DAY.\n         ST    R0,PGCURTIM       SAVE IT.\n         MVC   WORK2(4),4(R5)    COPY USED AND UNUSED PARTE COUNT.\n         B     FSTPARTE\n         USING PGDSLINE,R2\nNXTPARTE AH    R8,PARTELEN       POINT TO NEXT PART ENTRY.\n         LA    R7,44(,R7)        POINT TO NEXT PAGE DATA SET NAME.\n         LA    R3,12(,R3)        POINT TO NEXT COUNTER SAVE AREA ENTRY.\nFSTPARTE LA    R4,1(,R4)         INCREMENT USED PARTE COUNTER.\n         C     R4,WORK2          END OF USED PART ENTRIES?\n         BH    PUTALLPG          YES, SHOW WHAT WE HAVE GOT.\n         TM    9(R8),X'80'       IS THIS PARTE IN USE?\n         BO    NXTPARTE          NO, GET THE NEXT ONE.\n         MVI   PAGEDSN,C' '      BLANK OUT DETAIL LINE.\n         MVC   PAGEDSN+1(77),PAGEDSN\n         MVC   PAGEDSN,0(R7)     LOAD PAGE DATA SET NAME.\n         LH    R1,62(,R8)        LOAD OUTSTANDING I/O REQUEST COUNT.\n         CVD   R1,WORK\n         MVC   PGDSDPTH,ED3Z     SHOW REQUEST QUEUE DEPTH.\n         ED    PGDSDPTH,WORK+6\nNOPAGQLN L     R15,28(,R8)       POINT TO FIRST IORB.\n         USING IORB,R15\n         LM    R0,R1,0(R3)       GET PREVIOUS I/O COUNTERS.\n         LM    R9,R10,IORTREQ    GET CURRENT I/O COUNTERS.\n         STM   R9,R10,0(R3)      SAVE CURRENT FIGURES.\n         SLR   R9,R0             GET PAGE TRANSFER COUNT DIFFERENCE.\n         SLR   R10,R1            GET SSCH + RSCH COUNT DIFFERENCE.\n         BH    GETXFERT  (IE.BZ) IF ZERO GO GET PAGE TRANSFER RATE.\n         DROP  R15               IORB.\n         L     R15,PGCURTIM      GET CURRENT TIME.\n         S     R15,8(,R3)        SUBTRACT PREVIOUS T-O-D.\n         LR    R1,R10            GET I/O COUNT CHANGE.\n         M     R0,TENGRAND       2 DEC. PLACES PLUS 2 FOR CENTISECS.\n         DR    R0,R15\n         CVD   R1,WORK\n         MVC   PGDSIORT,=X'402021204B2020'\n         ED    PGDSIORT,WORK+5\nGETXFERT L     R15,PGCURTIM      GET CURRENT TIME.\n         S     R15,8(,R3)        SUBTRACT PREVIOUS T-O-D.\n         LTR   R1,R9             GET TRANSFER COUNT CHANGE.\n         BZ    SAVETIME\n         M     R0,TENGRAND       2 DEC. PLACES PLUS 2 FOR CENTISECS.\n         DR    R0,R15\n         CVD   R1,WORK\n         MVC   PGDSXFER,=X'402021204B2020'\n         ED    PGDSXFER,WORK+5\nSAVETIME MVC   8(4,R3),PGCURTIM  SAVE CURRENT TIME FOR NEXT TIME.\n         NI    MODESW2,255-LFLG  RESET GOOD LOCAL PAGE DATA SET FLAG.\n         MVC   PAGENTRY,MEDX     MEDIUM INTENSITY ATTRIBUTES.\n         MVC   PAGETYPE,=C'DEL'  TEST FOR PAGE DATA SET BEING DELETED.\n         TM    8(R8),X'02'       PAGEDEL DELETE IN PROGRESS?\n         BO    GOTPGTYP          YES.\n         MVC   PAGETYPE,=C'DRN'  TEST FOR PAGE DATA SET BEING DRAINED.\n         TM    8(R8),X'01'       PAGEDEL DRAIN IN PROGRESS?\n         BO    GOTPGTYP          YES.\n         MVC   PAGENTRY,LOWX     LOW INTENSITY ATTRIBUTES.\n         TM    8(R8),X'80'       DETERMINE PAGE DATA SET TYPE.\n         BZ    TRYCMN\n         MVC   PAGETYPE,=C'LPA'  PLPA PAGE DATA SET.\n         TM    8(R8),X'20'       DETERMINE IF DUPLEX.\n         BZ    GOTPGTYP\n         MVC   PAGETYPE,=C'DUP'  DUPLEX PLPA PAGE DATA SET.\n         B     GOTPGTYP\nTRYCMN   TM    8(R8),X'40'\n         BZ    TRYLCL\n         MVC   PAGETYPE,=C'CMN'  COMMON PAGE DATA SET.\n         TM    8(R8),X'20'       DETERMINE IF DUPLEX.\n         BZ    GOTPGTYP\n         MVC   PAGETYPE,=C'DUC'  DUPLEX COMMON PAGE DATA SET.\n         B     GOTPGTYP\nTRYLCL   TM    8(R8),X'10'\n         BZ    UNKNTYPE\n         OI    MODESW2,LFLG      TURN ON GOOD LOCAL PAGE DATA SET FLAG.\n         MVC   PAGETYPE,=C'LCL'  LOCAL PAGE DATA SET.\n         TM    8(R8),X'20'       DETERMINE IF DUPLEX.\n         BZ    TRYNVIO\n         MVC   PAGETYPE,=C'DUL'  DUPLEX LOCAL PAGE DATA SET.\nTRYNVIO  TM    9(R8),X'10'       IS VIO ALLOWED ON THIS PAGE DATA SET?\n         BZ    GOTPGTYP          YES.\n         MVC   PAGETYPE,=C'LNV'  NO, LOCAL PAGE DATA SET WITH NO VIO.\n         TM    8(R8),X'20'       DETERMINE IF DUPLEX.\n         BZ    GOTPGTYP\n         MVC   PAGETYPE,=C'DUN'  DUPLEX LOCAL NON-VIO PAGE DATA SET.\n         B     GOTPGTYP\nUNKNTYPE MVC   PAGETYPE,=C'???'  UNKNOWN PAGE DATA SET TYPE.\n         TM    8(R8),X'20'       DETERMINE IF DUPLEX.\n         BZ    GOTPGTYP\n         MVC   PAGETYPE,=C'DU?'  DUPLEX UNKNOWN PAGE DATA SET TYPE.\nGOTPGTYP TM    9(R8),X'40'       IS DATA SET FLAGGED AS BAD?\n         BZ    NOTBADDS          NO, IT IS USEABLE.\n         MVI   PAGDSBAD,C'B'     YES, ASM DETECTED ERRORS.\n         MVC   PAGENTRY,HIGHX    HIGH INTENSITY ATTRIBUTES.\n         MVI   PAGENTRY+8,X'F2'  RED ATTR BYTE.                 (I3279)\n         NI    MODESW2,255-LFLG  RESET GOOD LOCAL PAGE DATA SET FLAG.\nNOTBADDS L     R10,44(,R8)       POINT TO THE DATA SET'S UCB.\n         USING UCBOB,R10\n         MVC   PAGEDASD,UCBVOLI  GET VOLUME SERIAL NUMBER.\n         DROP  R10\n         L     R1,16(,R8)        GET NUMBER OF SLOTS IN THE DATASET.\n         CVD   R1,WORK\n         TM    MODESW2,LFLG      IS THIS A GOOD LOCAL (& NOT DUPLEX)?\n         BZ    NOTLCL1           NO, DON'T TOTAL COUNTER VALUE.\n         LR    R9,R1\n         A     R9,TOTLALC        TOTAL ALLOCATED SLOTS.\n         ST    R9,TOTLALC\nNOTLCL1  MVC   ALCSLOTS,ED7\n         ED    ALCSLOTS,WORK+4\n         S     R1,20(,R8)        SUBTRACT THE NUMBER OF UNUSED SLOTS\n         CVD   R1,WORK               TO GET THE NUMBER OF USED SLOTS.\n         TM    MODESW2,LFLG      IS THIS A GOOD LOCAL (& NOT DUPLEX)?\n         BZ    NOTLCL2           NO, DON'T TOTAL COUNTER VALUE.\n         LR    R9,R1\n         A     R9,TOTLUSE        TOTAL USED SLOTS.\n         ST    R9,TOTLUSE\nNOTLCL2  MVC   USDSLOTS-1(8),ED7\n         ED    USDSLOTS-1(8),WORK+4\n         M     R0,AHUNDRED       GET\n         LA    R1,50(,R1)            SLOT\n         D     R0,16(,R8)                 USAGE\n         CVD   R1,WORK                          PERCENTAGE.\n         MVC   SLOTUSE,ED3\n         ED    SLOTUSE,WORK+6\n         MVI   SLOTPCNT,C'%'     INDICATE PERCENTAGE.\n         L     R1,24(,R8)        GET THE NUMBER OF BAD SLOTS.\n         CVD   R1,WORK\n         TM    MODESW2,LFLG      IS THIS A GOOD LOCAL (& NOT DUPLEX)?\n         BZ    NOTLCL3           NO, DON'T TOTAL COUNTER VALUE.\n         A     R1,TOTLBAD        TOTAL BAD SLOTS.\n         ST    R1,TOTLBAD\nNOTLCL3  MVC   BADSLOTS,ED3\n         ED    BADSLOTS,WORK+6\n         BAS   R14,PADDLINE      LINE NOW COMPLETE.\n         B     NXTPARTE          PROCESS NEXT PART ELEMENT.\nPUTALLPG DS    0H\n         MVC   PAGENTRY,HIGHX    HIGH INTENSITY ATTRIBUTES.\n         MVI   PAGENTRY+2,X'F4'  UNDERSCORE.                    (I3279)\n         MVI   PAGENTRY+5,X'C4'  UNDERLINE.                     (F9526)\n         MVI   PAGEDSN,C' '      BLANK OUT DETAIL LINE.\n         MVC   PAGEDSN+1(77),PAGEDSN\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTASMVT       POINT TO THE ASMVT.\n         DROP  R1                CVT.\n         USING ASMVT,R1\n         L     R0,ASMIORQR       GET I/O REQUEST RECEIVED COUNT.\n         SL    R0,ASMIORQC       SUBTRACT I/O REQUEST COMPLETED COUNT.\n         AL    R0,ASMSWRQR       ADD SWAP REQUEST RECEIVED COUNT.\n         SL    R0,ASMSWRQC       SUBTRACT SWAP REQUEST COMPLETED COUNT.\n         DROP  R1                ASMVT.\n         CVD   R0,WORK           DISPLAY ASM UNCOMPLETED WORK COUNT.\n         MVC   PAGEDSN+5(6),ED5\n         ED    PAGEDSN+5(6),WORK+5\n         MVC   PAGEDSN(5),=C'ASMQ='\n         L     R1,TOTLALC        GET THE NUMBER OF ALLOCATED SLOTS.\n         CVD   R1,WORK\n         MVC   ALCSLOTS,ED7\n         ED    ALCSLOTS,WORK+4\n         L     R1,TOTLUSE        GET THE NUMBER OF USED SLOTS.\n         CVD   R1,WORK\n         MVC   USDSLOTS-1(8),ED7\n         ED    USDSLOTS-1(8),WORK+4\n         M     R0,AHUNDRED       GET\n         LA    R1,50(,R1)            SLOT\n         D     R0,TOTLALC                 USAGE\n         CVD   R1,WORK                          PERCENTAGE.\n         MVC   SLOTUSE,ED3\n         ED    SLOTUSE,WORK+6\n         MVI   SLOTPCNT,C'%'     INDICATE PERCENTAGE.\n         ICM   R1,15,TOTLBAD     GET THE TOTAL NUMBER OF BAD SLOTS.\n         BZ    BADSLOT0          SUPPRESS TOTAL IF ZERO.\n         CVD   R1,WORK\n         MVC   BADSLOTS,ED3\n         ED    BADSLOTS,WORK+6\nBADSLOT0 MVC   PAGEDSN+18(5),=C'TOTAL'\n         MVC   PAGETYPE-1(14),=C'(LCL+LNV ONLY)'\n         BAS   R14,PADDLINE      LINE NOW COMPLETE.\n         DROP  R2                PGDSLINE.\n         MVC   0(LL-79,R2),MEDX  MEDIUM INTENSITY.\n         MVI   9(R2),C' '        BLANK OUT THE\n         MVC   10(78,2),9(2)                   NEXT SCREEN LINE.\n         L     R3,RCEADDR        POINT TO RSM CNTRL & ENUMERATION AREA.\n         USING RCE,R3\n         L     R15,RCEAFC        GET AVAILABLE FRAME COUNT.\n         MVC   9(8,R2),ED7\n         CVD   R15,WORK\n         ED    9(8,R2),WORK+4\n         MVC   9(8,R2),10(R2)\n         L     R1,PGCURTIM       GET CURRENT TIME.\n         S     R1,PGPRVTIM       GET TIME INTERVAL.\n         L     R15,RCETOTPI      GET CURRENT NON-VIO PAGE-IN COUNT.\n         LR    R14,R15           SAVE IT.\n         SL    R15,NPIN          GET COUNT CHANGE.\n         ST    R14,NPIN          STORE NEW COUNTER VALUE.\n         M     R14,TENGRAND      CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET RATE.\n         MVC   18(7,R2),=X'402021204B2020'\n         CVD   R15,WORK\n         ED    18(7,R2),WORK+5\n         L     R15,RCETOTPO      GET CURRENT NON-VIO PAGE-OUT COUNT.\n         LR    R14,R15           SAVE IT.\n         SL    R15,NPOUT         GET COUNT CHANGE.\n         ST    R14,NPOUT         STORE NEW COUNTER VALUE.\n         M     R14,TENGRAND      CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET RATE.\n         MVC   27(7,R2),=X'402021204B2020'\n         CVD   R15,WORK\n         ED    27(7,R2),WORK+5\n         L     R15,RCEVIOPI      GET CURRENT VIO PAGE-IN COUNT.\n         LR    R14,R15           SAVE IT.\n         SL    R15,VAMI          GET COUNT CHANGE.\n         ST    R14,VAMI          STORE NEW COUNTER VALUE.\n         M     R14,TENGRAND      CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET RATE.\n         MVC   36(7,R2),=X'402021204B2020'\n         CVD   R15,WORK\n         ED    36(7,R2),WORK+5\n         L     R15,RCEVIOPO      GET CURRENT VIO PAGE-OUT COUNT.\n         LR    R14,R15           SAVE IT.\n         SL    R15,VAMO          GET COUNT CHANGE.\n         ST    R14,VAMO          STORE NEW COUNTER VALUE.\n         M     R14,TENGRAND      CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET RATE.\n         MVC   45(7,R2),=X'402021204B2020'\n         CVD   R15,WORK\n         ED    45(7,R2),WORK+5\n         L     R15,RCESWPPI      GET CURRENT SWAP-IN PAGE COUNT.\n         LR    R14,R15           SAVE IT.\n         SL    R15,SPIN          GET COUNT CHANGE.\n         ST    R14,SPIN          STORE NEW COUNTER VALUE.\n         M     R14,TENGRAND      CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET RATE.\n         MVC   54(7,R2),=X'402021204B2020'\n         CVD   R15,WORK\n         ED    54(7,R2),WORK+5\n         L     R15,RCESWPPO      GET CURRENT SWAP-OUT PAGE COUNT.\n         LR    R14,R15           SAVE IT.\n         SL    R15,SPOUT         GET COUNT CHANGE.\n         ST    R14,SPOUT         STORE NEW COUNTER VALUE.\n         M     R14,TENGRAND      CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET RATE.\n         MVC   63(7,R2),=X'402021204B2020'\n         CVD   R15,WORK\n         ED    63(7,R2),WORK+5\n         L     R15,RCEPAGMV      GET CURRENT PAGE MOVEMENT COUNT.\n         LR    R14,R15           SAVE IT. (PAGE MOVED TO OTHER FRAME.)\n         SL    R15,NPMOV         GET COUNT CHANGE.\n         ST    R14,NPMOV         STORE NEW COUNTER VALUE.\n         M     R14,TENGRAND      CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET RATE.\n         MVC   72(7,R2),=X'402021204B2020'\n         CVD   R15,WORK\n         ED    72(7,R2),WORK+5\n         L     R15,RCETOTRC      GET RECLAIMED PAGE COUNT.\n         LR    R14,R15           SAVE IT.\n         SL    R15,NPREC         GET COUNT CHANGE.\n         ST    R14,NPREC         STORE NEW COUNTER VALUE.\n         M     R14,TENGRAND      CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R14,R1            GET RATE.\n         MVC   81(7,R2),=X'402021204B2020'\n         CVD   R15,WORK\n         ED    81(7,R2),WORK+5\n         MVC   PGPRVTIM,PGCURTIM CURRENT TIME IS NOW PREVIOUS TIME.\n         BAS   R14,PADDLINE      LINE NOW COMPLETE.\n         DROP  R3                RCE.\n         MVC   0(LL-79,R2),MEDX  MEDIUM INTENSITY.\n         MVC   LL-79(79,R2),PTRAILER\n         BAS   R14,PADDLINE      LINE NOW COMPLETE.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNP LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNP L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDOPGDS          YES, BRANCH TO NEW PARTE LOGIC.\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    REDOPGDS          YES, START OVER.\nGIVEHLPP MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNP          GO DISPLAY HELP PANEL.\n         SPACE\nPADDLINE TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNP          IF YES, THEN FORGET SUMMARY LINE.\n         BR    R14\n         SPACE\n         DROP  R11,R15           PAGEDS, WNDWMNGR.\n         TITLE 'PAGE DATASET MONITOR - VARIABLES AND CONSTANTS'\nTOTLALC  DC    F'0'\nTOTLBAD  DC    F'0'\nTOTLUSE  DC    F'0'\nSAVEALC  DC    F'0'\nFREESLOT DC    F'0'\nPGCURTIM DC    F'0'\nPGPRVTIM DC    F'0'\nNPIN     DC    F'0'\nNPOUT    DC    F'0'\nVAMI     DC    F'0'\nVAMO     DC    F'0'\nVAMR     DC    F'0'\nSPIN     DC    F'0'\nSPOUT    DC    F'0'\nNPREC    DC    F'0'\nNPMOV    DC    F'0'\nPTRAILER DC    CL79'    AFC  PG-IN/S  PG-OT/S  VIOIN/S  VIOOT/S  SW-PI/+\n               S  SW-PO/S  MOVES/S  RECLM/S'\nHEADINGP DC    CL79'   PAGE DATA SET NAME      TYP QLN XFR-RT I/O-RT VO+\n               LUME   ALLOC ERROR USED FULL'\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMPXAR": {"ttr": 19979, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'+\\x11\\x00A\\x00\\x94\\x13\\x1f\\x01\\x16\\x05o\\x14\\x06\\x05\\x1c\\x02\\x10\\x03x\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "43.17", "flags": 0, "createdate": "1994-05-11T00:00:00", "modifydate": "2016-02-25T14:06:41", "lines": 1308, "newlines": 528, "modlines": 888, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1987-2016  PRYCROFT SIX PTY LTD\n         TITLE 'CPU INSTRUCTION SPEED RATING SUBROUTINE'\n         USING RATEMIPS,R11,R10\nRATEMIPS DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' ADJUST ANY COMMAND INPUT.\n         L     R1,PSAPCCAV              POINT TO THE PCCA.\n         USING PCCA,R1\n         MVC   TRAILERR+24(12),PCCACPID COPY CPU ID.\n         DROP  R1                       PCCA.\n         L     R1,SMCAADDR              POINT TO THE SMCA.\n         USING SMCABASE,R1\n         MVC   TRAILERR+43(4),SMCASID   COPY SYSTEM ID.\n         DROP  R1                       SMCABASE.\n         L     R1,CVTPTR(,0)            POINT TO THE CVT.\n         USING CVT,R1\n         MVC   TRAILERR+54(8),CVTSNAME  COPY SYSTEM NAME.\n         DROP  R1                       CVT.\n         L     R1,RMCTADDR              POINT TO THE RMCT.\n         USING RMCT,R1\n         L     R1,RMCTADJC              LOAD CPU RATE ADJUSTMENT.\n         DROP  R1                       CVT.\n         CVD   R1,WORK                  DISPLAY IT.\n         MVC   TRAILERR+66(12),ED11\n         ED    TRAILERR+66(12),WORK+2\n         MVC   TRAILERR+66(2),=C'C='\n         CLI   INCHARS,C' '      ANY OPTION PRE-SPECIFIED?\n         BNH   REDOMIPS          NO, JUST SHOW DETAIL LINES.\n         B     CMDSCANR          YES, GO PROCESS IT.\n         SPACE\nMIPSTEST MVC   RATETST#,RENTY#(R4) LOAD TEST NUMBER INTO MESSAGE.\n         TM    MODESW,ADR14      14-BIT ADDRESSING AVAILABLE?\n         BNO   MIPSWAIT          NO.\n         CLI   OLDCOLS+3,80      ANY WIDE-SCREEN-NESS?\n         BNH   MIPSWAIT          NO.\n         LA    R1,STRM3270\n         AHI   R1,STRMERAS-STRM3270\n         L     R0,COLUMNS        GET PRIMARY SCREEN WIDTH.\n         CLI   0(R1),X'7E'       IN ALTERNATE SCREEN SIZE?\n         BNE   *+8               NO.\n         L     R0,OLDCOLS        YES, GET ALTERNATE SCREEN WIDTH.\n         LR    R1,R0             YES, UPDATE ORDERS FOR THIS SCREEN.\n         MHI   R1,11\n         STCM  R1,3,RBA1\n         LR    R1,R0\n         MHI   R1,15\n         AHI   R1,19\n         STCM  R1,3,RBA2\n         LR    R1,R0\n         MHI   R1,19\n         AHI   R1,19\n         STCM  R1,3,RBA3\nMIPSWAIT L     R5,8(,R4)         LOAD TEST ADDRESS.\n         LA    R1,MIPWTMSG       POINT TO THE \"PLEASE WAIT\" MESSAGE.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'R'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   PROBMIPS          NO, USE ASID TASK CPU TIME.\n         LA    R0,MIPAUTHL       GET THE \"PLEASE WAIT\" MESSAGE LENGTH.\n         ICM   R1,B'1000',=X'0B' LOAD FULLSCR,WAIT,HOLD FLAGS.\n         TPUT  (1),(0),R         SEND THE MESSAGE.\n         MODESET MF=(E,MDSTSUPR) GET PRIVILEGE FOR INSTRUCTIONS.\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\n         L     R1,ATHTBADR\n         SRL   R1,12             GET START OF FIRST PAGE TO PAGE-FIX.\n         SLL   R1,12\n         L     R15,=A(IMCOMSIZ)\n         A     R15,IMCOMADR\n         BCTR  R15,0\n         LA    R15,4095(,15)\n         SRL   R15,12\n         SLL   R15,12            GET END OF LAST PAGE TO PAGE-FIX.\n         BCTR  R15,0\n         ST    R1,RFIXADDR       REMEMBER START ADDRESS.\n         ST    R15,RFIXEADR      REMEMBER END ADDRESS.\n         PGSER R,FIX,A=(1),EA=(15),ECB=0 PAGE-FIX RELEVANT PAGES.\n         STNSM INTSOFFR+1,X'04'  DISABLE I/O AND EXTERNAL INTERRUPTS.\n         LMH   R0,R15,=16F'0'    CLEAR REGISTER HIGH HALVES.\n         STCK  WORKR             GET THE TIME.\n         BASR  R14,R5            EXECUTE SAMPLE INSTRUCTIONS.\n         STCK  WORKR2            GET THE TIME.\nINTSOFFR STOSM INTSOFFR+1,X'07'  ENABLE I/O AND EXTERNAL INTERRUPTS.\n         L     R1,RFIXADDR       LOAD START ADDRESS.\n         L     R15,RFIXEADR      LOAD END ADDRESS.\n         PGSER R,FREE,A=(1),EA=(15) FREE PREVIOUSLY FIXED PAGES.\n         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\n         MODESET MF=(E,MDSTPRBR) GET OUT OF SUPERVISOR STATE.\n         B     CALCMIPS          GO CALCULATE CPU RATING.\nPROBMIPS LA    R0,MIPWTLEN       GET THE \"PLEASE WAIT\" MESSAGE LENGTH.\n         ICM   R1,B'1000',=X'0B' LOAD FULLSCR,WAIT,HOLD FLAGS.\n         TPUT  (1),(0),R         SEND THE MESSAGE.\n         LMH   R0,R15,=16F'0'    CLEAR REGISTER HIGH HALVES.\n***      L     R3,PSAAOLD        POINT TO THE CURRENT ASCB.\n***      STIMER WAIT,BINTVL=FW1  ENSURE ASCBEJST IS UPDATED.\n***      MVC   WORKR,EJST(R3)    GET CURRENT ADDRESS SPACE TCB TIME.\n         TIMEUSED STORADR=WORKR,LINKAGE=SYSTEM,ECT=COND\n         BASR  R14,R5            EXECUTE SAMPLE INSTRUCTIONS.\n***      STIMER WAIT,BINTVL=FW1  ENSURE ASCBEJST IS UPDATED.\n***      MVC   WORKR2,EJST(R3)   GET CURRENT ADDRESS SPACE TCB TIME.\n         TIMEUSED STORADR=WORKR2,LINKAGE=SYSTEM,ECT=COND\nCALCMIPS LG    R1,WORKR2         GET THE \"AFTER\" TIME.\n         SLG   R1,WORKR          SUBTRACT THE \"BEFORE\" TIME.\n         SRLG  R1,R1,12          CONVERT THE TIME TO MICROSECONDS.\n         LLGT  R9,RONEMILL       GET INSTRUCTION COUNT.\n         MSGF  R9,RONEMILL       SCALE TO INSTRUCTIONS PER SECOND.\n         DSGR  R8,R1             DIVIDE INSTRUCTION COUNT BY TIME.\n         STG   R9,0(,R4)         SAVE THE RESULT.\n         LMH   R0,R15,=16F'0'    CLEAR REGISTER HIGH HALVES.\n         SPACE\nREDOMIPS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         SLR   R0,R0             CLEAR FOR DIVIDE.\n         ST    R0,WINLINES       INITIALIZE LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         SPACE\n         MVC   0(LL-79,R2),HIGHX SUPPLY HEADING ATTRIBUTES.\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVC   LL-79(79,R2),HEADINGR  LOAD HEADING.\n         BAS   R14,RADDLINE      LINE NOW COMPLETE.\n         LA    R4,RTESTABL       POINT TO INSTRUCTION TEST VECTOR.\nNEXTMIPS MVC   LL-78(4,R2),=C'TEST'\n         MVC   LL-73(12,R2),RENTY#-1(R4)  SHOW TEST NUMBER AND TYPE.\n         MVC   LL-54(13,R2),=CL13'NOT PERFORMED'\n         LG    R1,0(,R4)         LOAD THE RESULT.\n         LTGR  R1,R1             HAS THIS TEST BEEN PERFORMED?\n         BM    MIPSLINE          NO.\n         CVDG  R1,WORKR\n         MVC   LL-61(20,R2),RATEMASK\n         ED    LL-61(20,R2),WORKR2\n         MVC   LL-41(24,R2),=CL24' INSTRUCTIONS PER SECOND'\nMIPSLINE BAS   R14,RADDLINE      LINE NOW COMPLETE.\n         LA    R4,RENTYLEN(,R4)  POINT TO NEXT TABLE ENTRY.\n         CLI   0(R4),X'FE'       END OF RATING TEST TABLE?\n         BNE   NEXTMIPS          NO, FORMAT NEXT DISPLAY LINE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVC   LL-79(79,R2),TRAILERR  SHOW WHICH SYSTEM WAS TESTED.\n         BAS   R14,RADDLINE      LINE NOW COMPLETE.\n         XC    SECWORKA,SECWORKA ZERO CP DATA COLLECTION AREA.\n         LA    R0,16             LOAD MAXIMUM CPU COUNT.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTPCCAT       POINT TO THE PCCAVT.\n         DROP  R3                CVT.\n         LA    R4,SECWORKA+128   POINT TO I/O COUNT SAVE AREA.\nLOOPPCCA ICM   R5,B'1111',0(R3)  POINT TO THIS PCCA.\n         BZ    NEXTPCCA          IT DOES NOT EXIST SO SKIP IT.\n         USING PCCA,R5\n         LM    R6,R7,PCCASLIH    LOAD I/O COUNTS.\n         ALR   R6,R7             GET TOTAL I/O COUNT FOR THIS CP.\n         ST    R6,0(,R4)         SAVE IT.\nNEXTPCCA LA    R3,4(,R3)         POINT TO NEXT PCCA ADDRESS.\n         LA    R4,4(,R4)         POINT TO NEXT I/O COUNT SAVE AREA.\n         BCT   R0,LOOPPCCA       PROCESS NEXT CPU.\n         DROP  R5                PCCA.\n         BAS   R14,RSPCLINE      INSERT A BLANK LINE.\n         BAS   R14,RSPCLINE      INSERT A BLANK LINE.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    RTUPTIME          NO, CAN'T LOOK AT LCCA.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVC   LL-58(36,R2),CPUAVHDG\n         BAS   R14,RADDLINE      LINE NOW COMPLETE.\n         MODESET MF=(E,MDSTZERO) GET INTO KEY ZERO FOR LCCA.\n         LA    R0,16             LOAD MAXIMUM CPU COUNT.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTLCCAT       POINT TO THE PCCAVT.\n         DROP  R3                CVT.\n         LA    R4,SECWORKA       POINT TO WAIT TIME SAVE AREA.\nLOOPLCCA ICM   R5,B'1111',0(R3)  POINT TO THIS LCCA.\n         BZ    NEXTLCCA          IT DOES NOT EXIST SO SKIP IT.\n         USING LCCA,R5\n         LM    R6,R7,LCCAWTIM    LOAD CPU WAIT TIME.\n         STM   R6,R7,0(R4)       SAVE IT.\nNEXTLCCA LA    R3,4(,R3)         POINT TO NEXT LCCA ADDRESS.\n         LA    R4,8(,R4)         POINT TO NEXT WAIT TIME SAVE AREA.\n         BCT   R0,LOOPLCCA       PROCESS NEXT CPU.\n         DROP  R5                LCCA.\n         MODESET MF=(E,MDSTNOT0) END OF KEY ZERO ACCESS REQUIREMENT.\nRTUPTIME TIME  BIN               GET CURRENT TIME AND DATE.\n         STM   R0,R1,WORK        SAVE IT.\n         L     R1,SMCAADDR       POINT TO THE SMCA.\n         USING SMCABASE,R1\n         MVC   WORK2,SMCAITME    COPY THE IPL TIME AND DATE.\n         DROP  R1                SMCABASE.\n         SP    WORK+4(4),WORK2+4(4)  GET THE DAYS SINCE IPL.\n         CP    WORK+4(4),=PL2'635'   IPL'D THIS YEAR?\n         BL    YEAROKAY              YES.\n         SP    WORK+4(4),=PL2'635'   NO, MAP 636-1000 TO 1-365.\n         TM    WORK2+5,X'01'         IS IPL YEAR ODD?\n         BO    YEAROKAY              YES, SO IT WAS NOT A LEAP YEAR.\n         TM    WORK2+5,X'12'         NO, WAS IT A LEAP YEAR?\n         BM    YEAROKAY              NO.\n         AP    WORK+4(4),=PL1'1'     YES, SO ADD 1 MORE DAY SINCE IPL.\nYEAROKAY L     R3,WORK\n         S     R3,WORK2          GET TIME DIFFERENCE SINCE IPL TIME.\n         SLR   R0,R0\n         ST    R0,WORK\n         CVB   R1,WORK           GET BINARY DAYS SINCE IPL.\n         M     R0,SECSADAY       CONVERT TO CENTISECONDS.\n         AR    R3,R1             GET CENTISECONDS SINCE IPL.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    RATEIO            NO, CAN'T SHOW CP UTILIZATION.\n         LA    R1,4              INITIALIZE OUTER LOOP COUNTER.\n         LA    R5,SECWORKA       POINT TO CPU WAIT TIME ARRAY.\n         LA    R9,HEX            POINT TO CP NUMBERS.\nRATEAVLN LA    R4,LL-80(,R2)     INITIALIZE DISPLAY LINE POINTER.\n         LA    R0,4              INITIALIZE INNER LOOP COUNTER.\nRATEAVCP LM    R6,R7,0(R5)       GET CPU WAIT TIME FOR THIS CP.\n         LTR   R6,R6             ANY DATA?\n         BNZ   RSOMECPU          YES.\n         LTR   R7,R7\n         BZ    RATEAVNX          NO, TRY NEXT ONE.\nRSOMECPU SRDL  R6,12             CONVERT TO MICROSECONDS.\n         DR    R6,R3             DIVIDE BY CENTISECONDS SINCE IPL.\n         L     R6,TENGRAND\n         SR    R6,R7             UTILIZATION = 100% - (WAIT TIME).\n         CVD   R6,WORK\n         MVC   2(12,R4),CPUAVMSG PRIME DISPLAY SLOT.\n         MVC   4(1,R4),0(R9)     SUPPLY CP NUMBER.\n         ED    6(7,R4),WORK+5    SUPPLY AVERAGE UTILIZATION PERCENTAGE.\nRATEAVNX LA    R5,8(,R5)         POINT TO NEXT CP'S WAIT TIME.\n         LA    R9,1(,R9)         POINT TO NEXT CP'S NUMBER.\n         LA    R4,20(,R4)        POINT TO NEXT DISPLAY SLOT.\n         BCT   R0,RATEAVCP       PROCESS NEXT CPU.\n         BAS   R14,RADDLINE      LINE NOW COMPLETE.\n         BCT   R1,RATEAVLN       PROCESS NEXT CPU.\n         BAS   R14,RSPCLINE      INSERT A BLANK LINE.\nRATEIO   MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.\n         MVC   LL-59(38,R2),CPUIOHDG\n         BAS   R14,RADDLINE      LINE NOW COMPLETE.\n         LA    R1,4              INITIALIZE OUTER LOOP COUNTER.\n         LA    R5,SECWORKA+128   POINT TO CP I/O COUNT ARRAY.\n         LA    R9,HEX            POINT TO CP NUMBERS.\nRATEIOLN LA    R4,LL-80(,R2)     INITIALIZE DISPLAY LINE POINTER.\n         LA    R0,4              INITIALIZE INNER LOOP COUNTER.\nRATEAVIO ICM   R7,B'1111',0(R5)  GET I/O COUNT FOR THIS CP.\n         BZ    RATEIONX          ZERO SO TRY NEXT ONE.\n         M     R6,TENGRAND       SCALE FOR CENTISECONDS & 2 DEC PLACES.\n         DR    R6,R3             DIVIDE BY CENTISECONDS SINCE IPL.\n         CVD   R7,WORK\n         MVC   2(13,R4),CPUIOMSG PRIME DISPLAY SLOT.\n         MVC   4(1,R4),0(R9)     SUPPLY CP NUMBER.\n         ED    6(9,R4),WORK+4    SUPPLY AVERAGE I/O RATE.\nRATEIONX LA    R5,4(,R5)         POINT TO NEXT CP'S I/O COUNT.\n         LA    R9,1(,R9)         POINT TO NEXT CP'S NUMBER.\n         LA    R4,20(,R4)        POINT TO NEXT DISPLAY SLOT.\n         BCT   R0,RATEAVIO       PROCESS NEXT CPU.\n         BAS   R14,RADDLINE      LINE NOW COMPLETE.\n         BCT   R1,RATEIOLN       PROCESS NEXT CPU.\n         B     RRTRIALS\nRSHOWSUM LMH   R0,R15,=16F'0'    CLEAR REGISTER HIGH HALVES.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNR LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNR L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDOMIPS          YES.\n         CLI   INCHARS,C' '      ANY SUBCOMMAND REQUESTED?\n         BNH   REDOMIPS          NO, JUST REDO IT ALL.\nCMDSCANR CLI   INCHARS,C'I'      RR-TEST ITERATION COEFFICIENT?\n         BE    RRLPCNTR          YES.\n         CLI   INCHARS,C'T'      TEST RUN REQUEST?\n         BNE   GIVEHLPR          NO.\n***      CLI   INCHARS+1,C'1'    INVALID TEST NUMBER?\n***      BL    GIVEHLPR          YES.\n         LA    R4,RTESTABL       POINT TO TEST TABLE.\nTESTSELN CLI   0(R4),X'FE'       REACHED THE END OF THE TABLE?\n         BE    GIVEHLPR          YES, INVALID TEST NUMBER.\n         CLC   INCHARS+1(1),RENTY#(R4) IS THIS THE REQUESTED TEST?\n         BE    MIPSTEST          YES, SO GO DO IT.\n         LA    R4,RENTYLEN(,R4)  NO, POINT TO NEXT TEST TABLE ENTRY.\n         B     TESTSELN          GO CHECK IT OUT.\nRRLPCNTR CLI   INCHARS+1,C'1'    VALID COEFFICIENT?\n         BL    GIVEHLPR          NO.\n         CLI   INCHARS+1,C'9'    VALID COEFFICIENT?\n         BH    GIVEHLPR          NO.  (HOW WAS THAT DONE?)\n         MVC   RRTIMEHD+36(1),INCHARS+1\n         NI    INCHARS+1,X'0F'   CLEAR THE ZONE.\n         SLR   R1,R1\n         IC    R1,INCHARS+1      GET THE NEW COEFFICIENT.\n         M     R0,FIFTYK         GET THE NEW ITERATION COUNT.\n         ST    R1,NLP            SAVE IT.\n         B     REDOMIPS          GO REFRESH THE SCREEN.\nGIVEHLPR MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNR          GO DISPLAY HELP PANEL.\n         SPACE\nMIPSTST1 L     R1,GRAND100       LOAD LOOP COUNTER.\n         LA    R15,TST1LOOP      LOAD LOOP ADDRESS.\n         CNOP  0,8\nTST1LOOP LR    R9,R12            DO ONE MILLION INSTRUCTIONS.\n         AR    R9,R12\n         XR    R9,R12\n         OR    R9,R12\n         LCR   R8,R1\n         SR    R8,R1\n         NR    R8,R1\n         ALR   R8,R9\n         SLR   R8,R1\n         BCTR  R1,R15\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTST9 L     R1,GRAND100       LOAD LOOP COUNTER.\n         LA    R15,TST9LOOP      LOAD LOOP ADDRESS.\n         LMH   R12,R12,RONEMILL  GET NON-ZERO HIGH WORD.\n         CNOP  0,8\nTST9LOOP LGR   R9,R12            DO ONE MILLION INSTRUCTIONS.\n         AGR   R9,R12\n         XGR   R9,R12\n         OGR   R9,R12\n         LCGR  R8,R1\n         SGR   R8,R1\n         NGR   R8,R1\n         ALGR  R8,R9\n         SLGR  R8,R1\n         BCTGR R1,R15\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTST2 L     R1,GRAND100       LOAD LOOP COUNTER.\n         LA    R15,TST2LOOP      LOAD LOOP ADDRESS.\n         CNOP  0,8\nTST2LOOP LR    R9,R12            DO ONE MILLION INSTRUCTIONS.\n         AR    R9,R12\n         XR    R9,R12\n         OR    R9,R12\n         MR    R8,R1\n         DR    R8,R1\n         SR    R8,R1\n         NR    R8,R1\n         ALR   R8,R9\n         BCTR  R1,R15\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTSTA L     R1,GRAND100       LOAD LOOP COUNTER.\n         LA    R15,TSTALOOP      LOAD LOOP ADDRESS.\n         LMH   R12,R12,RONEMILL  GET NON-ZERO HIGH WORD.\n         CNOP  0,8\nTSTALOOP LTGR  R9,R12            DO ONE MILLION INSTRUCTIONS.\n         AGR   R9,R12\n         XGR   R9,R12\n         OGR   R9,R12\n         MSGR  R9,R1\n         DSGR  R8,R1\n         SGR   R8,R1\n         NGR   R8,R1\n         ALGR  R8,R9\n         BCTGR R1,R15\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTST3 L     R1,GRAND100       LOAD LOOP COUNTER.\n         CNOP  0,8\nTST3LOOP L     R9,GRAND100       DO ONE MILLION INSTRUCTIONS.\n         A     R9,TENGRAND\n         X     R9,ONEGRAND\n         O     R8,AHUNDRED\n         IC    R8,=X'05'\n         N     R8,TENGRAND\n         S     R9,ONEGRAND\n         AL    R8,GRAND100\n         SL    R8,TENGRAND\n         BCT   R1,TST3LOOP\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTST4 L     R1,GRAND100       LOAD LOOP COUNTER.\n         CNOP  0,8\nTST4LOOP L     R9,TENGRAND       DO ONE MILLION INSTRUCTIONS.\n         A     R9,TENGRAND\n         X     R9,TENGRAND\n         O     R9,TENGRAND\n         M     R8,TENGRAND\n         D     R8,TENGRAND\n         S     R8,TENGRAND\n         CVD   R9,WORKR2\n         CVB   R9,WORKR2\n         BCT   R1,TST4LOOP\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTST5 L     R1,GRAND100\n         SRL   R1,2              LOAD LOOP COUNTER.\n         L     R2,IMCOMADR       GET WORK AREA BASE.\n         CNOP  0,8\nTST5LOOP MVC   WORKR2,DECNMBR1   DO ONE MILLION INSTRUCTIONS.\n         XC    WORKR2,DECNMBR1\n         OC    WORKR2,DECNMBR1\n         MVC   2048(4,R2),ED3\n         ED    2048(4,R2),WORKR2+6\n         CLC   2048(1,R2),2049(2)\n         TR    2048(1,R2),XLATETBL\n         ZAP   WORKR2,DECNMBR2\n         AP    WORKR2,DECNMBR2\n         UNPK  2148(1,R2),WORKR2+7(1)\n         MVC   WORKR2,DECNMBR1\n         XC    WORKR2,DECNMBR1\n         OC    WORKR2,DECNMBR1\n         MVC   2048(4,R2),ED3\n         ED    2048(4,R2),WORKR2+6\n         CLC   2048(1,R2),2048(R2)\n         TR    2048(1,R2),XLATETBL\n         ZAP   WORKR2,DECNMBR1\n         SP    WORKR2,DECNMBR2\n         NC    2048(1,R2),2049(R2)\n         MVC   WORKR2,DECNMBR1\n         XC    WORKR2,DECNMBR1\n         OC    WORKR2,DECNMBR1\n         MVC   2048(4,R2),ED3\n         ED    2048(4,R2),WORKR2+6\n         CLC   2048(1,R2),2049(2)\n         TR    2048(1,R2),XLATETBL\n         ZAP   WORKR2,DECNMBR2\n         AP    WORKR2,DECNMBR2\n         UNPK  2148(1,R2),WORKR2+7(1)\n         MVC   WORKR2,DECNMBR1\n         XC    WORKR2,DECNMBR1\n         OC    WORKR2,DECNMBR1\n         MVC   2048(4,R2),ED3\n         ED    2048(4,R2),WORKR2+6\n         CLC   2048(1,R2),2048(R2)\n         TR    2048(1,R2),XLATETBL\n         ZAP   WORKR2,DECNMBR1\n         SP    WORKR2,DECNMBR2\n         BCT   R1,TST5LOOP\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTST6 L     R1,GRAND100\n         SRL   R1,2              LOAD LOOP COUNTER.\n         L     R2,IMCOMADR       GET WORK AREA BASE.\n         CNOP  0,8\nTST6LOOP MVC   WORKR2,DECNMBR1   DO ONE MILLION INSTRUCTIONS.\n         XC    WORKR2,DECNMBR1\n         OC    WORKR2,DECNMBR1\n         MVC   2048(12,R2),ED11\n         ED    2048(12,R2),WORKR2+2\n         CLC   2048(256,R2),2049(R2)\n         TR    2048(256,R2),XLATETBL\n         MP    WORKR2,DECNMBR2\n         DP    WORKR2,DECNMBR2\n         UNPK  2148(15,R2),WORKR2\n         MVC   WORKR2,DECNMBR1\n         XC    WORKR2,DECNMBR1\n         OC    WORKR2,DECNMBR1\n         MVC   2048(12,R2),ED11\n         ED    2048(12,R2),WORKR2+2\n         CLC   2048(256,R2),2048(R2)\n         TR    2048(256,R2),XLATETBL\n         MP    WORKR2,DECNMBR2\n         DP    WORKR2,DECNMBR2\n         NC    2048(256,R2),2049(R2)\n         MVC   WORKR2,DECNMBR1\n         XC    WORKR2,DECNMBR1\n         OC    WORKR2,DECNMBR1\n         MVC   2048(12,R2),ED11\n         ED    2048(12,R2),WORKR2+2\n         CLC   2048(256,R2),2049(R2)\n         TR    2048(256,R2),XLATETBL\n         MP    WORKR2,DECNMBR2\n         DP    WORKR2,DECNMBR2\n         UNPK  2148(15,R2),WORKR2\n         MVC   WORKR2,DECNMBR1\n         XC    WORKR2,DECNMBR1\n         OC    WORKR2,DECNMBR1\n         MVC   2048(12,R2),ED11\n         ED    2048(12,R2),WORKR2+2\n         CLC   2048(256,R2),2048(R2)\n         TR    2048(256,R2),XLATETBL\n         MP    WORKR2,DECNMBR2\n         DP    WORKR2,DECNMBR2\n         BCT   R1,TST6LOOP\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTST7 L     R1,GRAND100\n         SRL   R1,1              LOAD LOOP COUNTER.\n         CNOP  0,8\nTST7LOOP LE    R0,FLOTPNT1       DO ONE MILLION INSTRUCTIONS.\n         AE    R0,FLOTPNT2\n         SE    R0,FLOTPNT1\n         ME    R0,FLOTPNT1\n         DE    R0,FLOTPNT2\n         CE    R0,FLOTPNT1\n         LCER  R2,R0\n         SER   R0,R2\n         MER   R0,R2\n         DER   R0,R2\n         LE    R0,FLOTPNT1\n         AE    R0,FLOTPNT2\n         SE    R0,FLOTPNT1\n         ME    R0,FLOTPNT1\n         DE    R0,FLOTPNT2\n         CE    R0,FLOTPNT1\n         LCER  R2,R0\n         AER   R0,R2\n         HER   R2,R0\n         BCT   R1,TST7LOOP\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\nMIPSTST8 L     R1,GRAND100\n         SRL   R1,1              LOAD LOOP COUNTER.\n         CNOP  0,8\nTST8LOOP LD    R0,FLOTPNT1       DO ONE MILLION INSTRUCTIONS.\n         AD    R0,FLOTPNT2\n         SD    R0,FLOTPNT1\n         MD    R0,FLOTPNT1\n         DD    R0,FLOTPNT2\n         CD    R0,FLOTPNT1\n         LCDR  R2,R0\n         SDR   R0,R2\n         MDR   R0,R2\n         DDR   R0,R2\n         LD    R0,FLOTPNT1\n         AD    R0,FLOTPNT2\n         SD    R0,FLOTPNT1\n         MD    R0,FLOTPNT1\n         DD    R0,FLOTPNT2\n         CD    R0,FLOTPNT1\n         LCDR  R2,R0\n         ADR   R0,R2\n         HDR   R2,R0\n         BCT   R1,TST8LOOP\n         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.\n         SPACE\nRADDLINE LARL  R15,PRTXLATE\n         TR    LL-79(79,R2),0(R15)\nRSPCLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNR          IF YES, THEN FORGET SUMMARY LINE.\n         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         BR    R14\n         DROP  R15               WNDWMNGR.\n         TITLE 'CPU SPEED RATER - VARIABLES AND CONSTANTS'\nMDSTSUPR MODESET MODE=SUP,MF=L\nMDSTPRBR MODESET MODE=PROB,MF=L\nMDSTZERO MODESET KEY=ZERO,MF=L\nMDSTNOT0 MODESET KEY=NZERO,MF=L\nFLOTPNT1 DC    D'147.625'\nFLOTPNT2 DC    D'29.5'\nWORKR    DC    D'0'\nWORKR2   DC    D'0'\nRFIXADDR DC    A(0)              START OF PAGE-FIXED AREA.\nRFIXEADR DC    A(0)              END OF PAGE-FIXED AREA.\nRTESTABL DC    0D                TABLE OF SAMPLE INSTRUCTIONS STREAMS.\n         DC    FD'-1'            INSTRUCTIONS PER SECOND FOR THIS TEST.\n         DC    A(MIPSTST1)       SAMPLE INSTRUCTIONS STREAM ADDRESS.\nRENTY#   EQU   *-RTESTABL+1      OFFSET TO TEST NUMBER.\n         DC    C'T1 RR(F-32):'   LINE LABEL FOR THIS TEST.\nRENTYLEN EQU   *-RTESTABL\n         DC    FD'-1'\n         DC    A(MIPSTST2)\n         DC    C'T2 RR(S-32):'\n         DC    FD'-1'\n         DC    A(MIPSTST3)\n         DC    C'T3 RX(FAST):'\n         DC    FD'-1'\n         DC    A(MIPSTST4)\n         DC    C'T4 RX(SLOW):'\n         DC    FD'-1'\n         DC    A(MIPSTST5)\n         DC    C'T5 SS(FAST):'\n         DC    FD'-1'\n         DC    A(MIPSTST6)\n         DC    C'T6 SS(SLOW):'\n         DC    FD'-1'\n         DC    A(MIPSTST7)\n         DC    C'T7 FP(E-32):'\n         DC    FD'-1'\n         DC    A(MIPSTST8)\n         DC    C'T8 FP(D-64):'\n         DC    FD'-1'\n         DC    A(MIPSTST9)\n         DC    C'T9 RR(F-64):'\n         DC    FD'-1'\n         DC    A(MIPSTSTA)\n         DC    C'TA RR(S-64):'\n         DC    X'FE'             DENOTE END OF TABLE.\nDECNMBR2 DC    PL3'12345'\nDECNMBR1 DC    PL8'123456789'\nFW1      DC    F'1'              ONE.\nFIFTYK   DC    F'5E4'            FIFTY THOUSAND.\nGRAND100 DC    F'100000'         ONE HUNDRED THOUSAND.\nRONEMILL DC    F'1000000'        ONE MILLION.\nSECSADAY DC    A(60*60*24*100)   CENTISECONDS IN A DAY.\nRATEMASK DC    X'402020206B2020206B2020206B2020206B202120'\nHEADINGR DC    CL79'             MISLEADING INDICATORS OF PERFORMANCE S+\n               AMPLING  (MIPS)             '\nTRAILERR DC    CL79' TEST RESULTS FOR CPUID=123456789ABC/SYSID=1234/SNA+\n               ME=12345678/ADJC=123456789A '\nMIPWTMSG DCS   X'40',SBA\nRBA1     DCS   (12,1),RA\nRBA2     DCS   (16,20),C' ',SF,PROHIS\n         DC    C'PLEASE WAIT - PERFORMING CPU SPEED TEST '\nRATETST# DC    C'0'\n         DCS   SF,PROLOS,RA,(1,1),C' '\nMIPWTLEN EQU   *-MIPWTMSG\n         DCS   SBA\nRBA3     DCS   (20,20),SF,PROHIS\n         DC    C'======  WARNING - CPU IS DISABLED  ======'\n         DCS   SF,PROLOS\nMIPAUTHL EQU   *-MIPWTMSG\nCPUAVHDG DC    CL36'AVERAGE CPU UTILIZATION(S) SINCE IPL'\nCPUIOHDG DC    CL38'AVERAGE I/O RATE(S) (IO/SEC) SINCE IPL'\nCPUAVMSG DC    C'CP#:',X'402021204B2020',C'%'\nCPUIOMSG DC    C'CP#:',X'4020202020204B2020'\nRRTIMEHD DC    C'RR INSTRUCTION TIMINGS (COEFFICIENT=1)'\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n         TITLE 'CPU SPEED RATER - RR INSTRUCTION TIME TRIALS'\n*        RICK HEVENER'S FAMOUS RR INSTRUCTION TIMING ROUTINE.\n*        PUBLISHED IN NASPA'S TECHNICAL SUPPORT MAGAZINE IN\n*        AUGUST 1997 IN AN ARTICLE BY RICHARD N. HEVENER.\nRRTRIALS DS    0H\n         BAS   R14,RSPCLINE\n         BAS   R14,RSPCLINE\n         MVC   0(LL-79,R2),HIGHX\n         MVC   LL-60(38,R2),RRTIMEHD\n         BAS   R14,RADDLINE\n         BAS   R14,RSPCLINE\n         XC    TMO,TMO        TMO = 0 FOR OVERHEAD LOOP\n         LA    R6,1\n         LD    F4,LONE\n         LD    F6,LONE+8\n         L     R5,NLP         NUMBER OF TIMES TO LOOP\n         SPACE\n         STIMER TASK,BINTVL=LONGTIME\n         SPACE\n* LOOP TO OBTAIN OVERHEAD TIME.\n         MVC   LL-60(5,R2),=CL5'BASE'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nB        BCT   R4,B\n         BAS   R14,PSTLOOP\n         SPACE\n         ST    R9,TMO         SAVE LOOP OVERHEAD TIME\n         BAS   R14,RSPCLINE\n         SPACE\n         MVC   LL-60(5,R2),=CL5'AR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nAR       AR    R2,R6\n         BCT   R4,AR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'ALR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nALR      ALR   R2,R6\n         BCT   R4,ALR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'AHI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nAHI      AHI   R2,-7\n         BCT   R4,AHI\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'AGHI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nAGHI     AGHI  R2,-7\n         BCT   R4,AGHI\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         LDR   F2,F6\n         MVC   LL-60(5,R2),=CL5'AXR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nAXR      AXR   F0,F4\n         BCT   R4,AXR\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         MVC   LL-60(5,R2),=CL5'ADR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nADR      ADR   F0,F4\n         BCT   R4,ADR\n         BAS   R14,PSTLOOP\n         SPACE\n         LER   F0,F4\n         MVC   LL-60(5,R2),=CL5'AER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nAER      AER   F0,F4\n         BCT   R4,AER\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         MVC   LL-60(5,R2),=CL5'AWR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nAWR      AWR   F0,F4\n         BCT   R4,AWR\n         BAS   R14,PSTLOOP\n         SPACE\n         LER   F0,F4\n         MVC   LL-60(5,R2),=CL5'AUR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nAUR      AUR   F0,F4\n         BCT   R4,AUR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'NR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nNR       NR    R2,R6\n         BCT   R4,NR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'BALR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nBALR     BALR  R2,0\n         BCT   R4,BALR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'BASR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nBASR     BASR  R2,0\n         BCT   R4,BASR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'BASSM'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nBASSM    BASSM R2,0\n         BCT   R4,BASSM\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'BSM'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nBSM      BSM   R2,0\n         BCT   R4,BSM\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'BR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nBR       BR    0\n         BCT   R4,BR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'BNOR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nBNOR     BNOR  0\n         BCT   R4,BNOR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'NOP'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nNOP      NOP   0(,0)\n         BCT   R4,NOP\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'BCTR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nBCTR     BCTR  R2,0\n         BCT   R4,BCTR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'CR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nCR       CR    R2,R6\n         BCT   R4,CR\n         BAS   R14,PSTLOOP\n         SPACE\n         SDR   F0,F0\n         MVC   LL-60(5,R2),=CL5'CDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nCDR      CDR   F0,F4\n         BCT   R4,CDR\n         BAS   R14,PSTLOOP\n         SPACE\n         SER   F0,F0\n         MVC   LL-60(5,R2),=CL5'CER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nCER      CER   F0,F4\n         BCT   R4,CER\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'CHI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nCHI      CHI   R2,-7\n         BCT   R4,CHI\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'CGHI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nCGHI     CGHI  R2,-7\n         BCT   R4,CGHI\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'CLR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nCLRR     CLR   R2,R6\n         BCT   R4,CLRR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'CLI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nCLI      CLI   WORK,X'97'\n         BCT   R4,CLI\n         BAS   R14,PSTLOOP\n         SPACE\n         LR    R3,R6\n         MVC   LL-60(5,R2),=CL5'DR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nDR       DR    R2,R6\n         BCT   R4,DR\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         LDR   F2,F6\n         MVC   LL-60(5,R2),=CL5'DXR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nDXR      DXR   F0,F4\n         BCT   R4,DXR\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         MVC   LL-60(5,R2),=CL5'DDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nDDR      DDR   F0,F4\n         BCT   R4,DDR\n         BAS   R14,PSTLOOP\n         SPACE\n         LER   F0,F4\n         MVC   LL-60(5,R2),=CL5'DER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nDER      DER   F0,F4\n         BCT   R4,DER\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'XR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nXR       XR    R2,R6\n         BCT   R4,XR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'HDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nHDR      HDR   F0,F4\n         BCT   R4,HDR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'HER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nHER      HER   F0,F4\n         BCT   R4,HER\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'IPM'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nIPM      IPM   R2\n         BCT   R4,IPM\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLR       LR    R2,R6\n         BCT   R4,LR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LHI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLHI      LHI   R2,-7\n         BCT   R4,LHI\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LGHI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLGHI     LGHI  R2,-7\n         BCT   R4,LGHI\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLDR      LDR   F0,F4\n         BCT   R4,LDR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLER      LER   F0,F4\n         BCT   R4,LER\n         BAS   R14,PSTLOOP\n         SPACE\n         LA    R1,4095\n         MVC   LL-60(5,R2),=CL5'LA'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLA       LA    R2,4095(R6,R1)\n         BCT   R4,LA\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LTR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLTR      LTR   R2,R6\n         BCT   R4,LTR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LTDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLTDR     LTDR  F0,F4\n         BCT   R4,LTDR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LTER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLTER     LTER  F0,F4\n         BCT   R4,LTER\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LCR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLCR      LCR   R2,R6\n         BCT   R4,LCR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LCDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLCDR     LCDR  F0,F4\n         BCT   R4,LCDR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LCER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLCER     LCER  F0,F4\n         BCT   R4,LCER\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LNR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLNR      LCR   R2,R6\n         BCT   R4,LNR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LNDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLNDR     LNDR  F0,F4\n         BCT   R4,LNDR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LNER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLNER     LNER  F0,F4\n         BCT   R4,LNER\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LPR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLPR      LPR   R2,R6\n         BCT   R4,LPR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LPDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLPDR     LPDR  F0,F4\n         BCT   R4,LPDR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LPER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLPER     LPER  F0,F4\n         BCT   R4,LPER\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LRDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLRDR     LRDR  F0,F4\n         BCT   R4,LRDR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'LRER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nLRER     LRER  F0,F4\n         BCT   R4,LRER\n         BAS   R14,PSTLOOP\n         SPACE\n         LR    R3,R6\n         MVC   LL-60(5,R2),=CL5'MR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nMR       MR    R2,R6\n         BCT   R4,MR\n         BAS   R14,PSTLOOP\n         SPACE\n         LA    3,3\n         MVC   LL-60(5,R2),=CL5'MHI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nMHI      MHI   R3,-7\n         BCT   R4,MHI\n         BAS   R14,PSTLOOP\n         SPACE\n         LA    3,3\n         MVC   LL-60(5,R2),=CL5'MGHI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nMGHI     MHI   R3,-7\n         BCT   R4,MGHI\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'MVI'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nMVI      MVI   WORK,X'97'\n         BCT   R4,MVI\n         BAS   R14,PSTLOOP\n         SPACE\n         SPACE\n         LDR   F0,F4\n         LDR   F2,F6\n         MVC   LL-60(5,R2),=CL5'MXR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nMXR      MXR   F0,F4\n         BCT   R4,MXR\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         MVC   LL-60(5,R2),=CL5'MXDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nMXDR     MXDR  F0,F4\n         BCT   R4,MXDR\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         MVC   LL-60(5,R2),=CL5'MDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nMDR      MDR   F0,F4\n         BCT   R4,MDR\n         BAS   R14,PSTLOOP\n         SPACE\n         LER   F0,F4\n         MVC   LL-60(5,R2),=CL5'MER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nMER      MER   F0,F4\n         BCT   R4,MER\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'OR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nOR       OR    R2,R6\n         BCT   R4,OR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SPM'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSPM      SPM   R2\n         BCT   R4,SPM\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SLDA'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSLDA     SLDA  R2,63\n         BCT   R4,SLDA\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SLDL'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSLDL     SLDL  R2,63\n         BCT   R4,SLDL\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SLA'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSLA      SLA   R2,63\n         BCT   R4,SLA\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SLL'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSLL      SLL   R2,63\n         BCT   R4,SLL\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SRDA'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSRDA     SRDA  R2,63\n         BCT   R4,SRDA\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SRDL'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSRDL     SRDL  R2,63\n         BCT   R4,SRDL\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SRA'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSRA      SRA   R2,63\n         BCT   R4,SRA\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SRL'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSRL      SRL   R2,63\n         BCT   R4,SRL\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSR       SR    R2,R6\n         BCT   R4,SR\n         BAS   R14,PSTLOOP\n         SPACE\n         MVC   LL-60(5,R2),=CL5'SLR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSLR      SLR   R2,R6\n         BCT   R4,SLR\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         LDR   F2,F6\n         MVC   LL-60(5,R2),=CL5'SXR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSXR      SXR   F0,F4\n         BCT   R4,SXR\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         MVC   LL-60(5,R2),=CL5'SDR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSDR      SDR   F0,F4\n         BCT   R4,SDR\n         BAS   R14,PSTLOOP\n         SPACE\n         LER   F0,F4\n         MVC   LL-60(5,R2),=CL5'SER'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSER      SER   F0,F4\n         BCT   R4,SER\n         BAS   R14,PSTLOOP\n         SPACE\n         LDR   F0,F4\n         MVC   LL-60(5,R2),=CL5'SWR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSWR      SWR   F0,F4\n         BCT   R4,SWR\n         BAS   R14,PSTLOOP\n         SPACE\n         LER   F0,F4\n         MVC   LL-60(5,R2),=CL5'SUR'\n         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD\n         BAS   R14,PRELOOP\nSUR      SUR   F0,F4\n         BCT   R4,SUR\n         BAS   R14,PSTLOOP\n         SPACE\n         B     RSHOWSUM       RETURN\n         SPACE 2\nPRELOOP  ST    R14,RRRESAVE   SAVE RETURN ADDRESS\n         ST    R2,RRR2SAVE    SAVE DISPLAY LINE POINTER\n         LR    R4,R5          NUMBER OF TIMES TO LOOP\n         BAS   R14,CPUTIMER   TIME BEFORE LOOP\n         SLR   R2,R2          ZERO A REGISTER FOR USE IN LOOP\n         L     R14,RRRESAVE   RESTORE RETURN ADDRESS\n         BR    R14\n         SPACE 2\nPSTLOOP  ST    R14,RRRESAVE   SAVE RETURN ADDRESS\n         LM    R8,R9,WORK2    SAVE TIME BEFORE LOOP\n         BAS   R14,CPUTIMER   TIME AFTER LOOP\n         SPACE\n         SL    R9,WORK2+4\n         BC    3,PSTLOOPA\n         SPACE\n         BCTR  R8,0           BORROW\n         SPACE\nPSTLOOPA SL    R8,WORK2\n         SPACE\n* MAKE R8-R9 < 2**31.\n         LNR   R2,R6          # OF SHIFTS = -1 (SET UP FOR LOOP)\n         SLDL  R8,2           RECOVER ONE OF THESE IN LOOP, ONE AFTER\n         SPACE\nPSTLOOPB AR    R2,R6          # = # + 1\n         SRDL  R8,1\n         LTR   R8,R8\n         BNZ   PSTLOOPB\n         SPACE\n         SRDL  R8,1           NOW R8-R9 < 2**31\n         SPACE\n         M     R8,=F'1E6'     CONVERT MICROSEC. TO PICOSEC.\n* RESTORE SHIFTS, MAKING BIT 51 = 1 PICOSEC.\n         SLDL  R8,0(R2)\n* PREVENT 0C9, MAKING BIT 54 = 1 PICOSEC.\n         SRDL  R8,3\n         LA    R14,RPICOS     POINT TO TIME UNIT LABEL.\n         LR    R15,R5         COPY LOOP COUNT.\n         SRL   R15,1          HALVE IT.\n         CR    R15,R8         WILL RESULT CAUSE S0C9?\n         LR    R15,R5         COPY LOOP COUNT AGAIN.\n         BH    RDODIV         HOPE NOT!\n         MH    R15,ONEGRAND+2 YES, MAKE DENOMINATOR BIGGER.\n         LA    R14,RNANOS     POINT TO LARGER TIME UNIT LABEL.\nRDODIV   DR    R8,R15         ELAPSED TIME / LOOP ITERATIONS\n         SRL   R9,9           PICOSEC.\n         SPACE\n         CLI   0(R14),C'N'    HAD TO SCALE TO NANOSECONDS?\n         BE    *+8            YES, IGNORE LOOP OVERHEAD\n         S     R9,TMO         SUBTRACT LOOP OVERHEAD TIME\n         SPACE\n* WRITE OUT THE NUMBER.\n         CVD   R9,WORK\n         L     R2,RRR2SAVE    RESTORE DISPLAY LINE POINTER\n         MVC   LL-50+LPTRN+1(11,R2),0(R14)\n         MVC   LL-50(LPTRN,R2),PTRN\n         LA    R1,LL-50+LPTRN-1(,R2)\n         EDMK  LL-50(LPTRN,R2),WORK+2\n         BAS   R14,RADDLINE\n         L     R14,RRRESAVE   RESTORE RETURN ADDRESS\n         LTR   R9,R9          POSITIVE RESULT?\n         BNMR  R14            I SHOULD HOPE SO\n         MVI   0(R1),C'-'\n         BR    R14\n         SPACE 2\nCPUTIMER CPUTIMER MIC,WORK2\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\n         DROP  R11,R10           RATEMIPS.\n         SPACE 3\n         LTORG\n         SPACE\nRPICOS   DC    CL11'PICOSECONDS'\nRNANOS   DC    CL11'NANOSECONDS'\nLONE     DC    L'1'\nNLP      DC    F'5E4'\nLONGTIME DC    F'2E9'\nPTRN     DC    X'40',9X'20',X'2120'\nLPTRN    EQU   *-PTRN\n         SPACE\nTMO      DC    F'0'\nRRR2SAVE DC    F'0'\nRRRESAVE DC    F'0'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAS": {"ttr": 20737, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4/\\x00\\x00\\x00\\x94\\x13\\x1f\\x01\\x06\\x06O\\x151\\x05F\\x01m\\x04\\x08\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "52.47", "flags": 0, "createdate": "1994-05-11T00:00:00", "modifydate": "2006-03-05T15:31:00", "lines": 1350, "newlines": 365, "modlines": 1032, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986,1994,2001  PRYCROFT SIX PTY LTD\n         TITLE 'SWAP DOMAIN MONITOR DISPLAY LINE MAPPING'\nDMNLINE  DSECT\nDMNENTRY DS    XL(L'LOWX)\nDMNID    DS    CL4\nMIN      DS    CL4\nMAX      DS    CL4\n         DS    CL1\nMPLI     DS    CL4\n         DS    CL1\nMPLO     DS    CL4\n         DS    CL1\nCMPL     DS    CL4\nRUA      DS    CL4\n         DS    CL1\nMXRU     DS    CL4\nINC      DS    CL4\nNSW      DS    CL4\n         DS    CL1\nOUTU     DS    CL4\nTWSR     DS    CL7\nCIDX     DS    CL10\nASRV     DS    CL10\n         DS    CL3\nDMDL     EQU   *-DMNID\nDMLL     EQU   *-DMNENTRY\n         SPACE\nSVELINE  DSECT\nSVLENTRY DS    XL(L'LOWX)\nSVLCLS   DS    CL8\n         DS    CL1\nSVLPER   DS    CL1\n         DS    CL1\nSVLGOAL  DS    CL4\nSVLVEL   DS    CL4\nSVLCPU   DS    CL4\nSVLIOU   DS    CL5\nSVLCPWT  DS    CL5\nSVLIOWT  DS    CL5\nSVLCCAP  DS    CL5\nSVLSWAP  DS    CL4\nSVLAUX   DS    CL5\nSVLUNKN  DS    CL5\nSVLIDLE  DS    CL5\n         SPACE\nSRTLINE  DSECT\nSRTENTRY DS    XL(L'LOWX)\nSRTCLS   DS    CL8\n         DS    CL1\nSRTPER   DS    CL1\nSRTXACT  DS    CL12\nSRTRATE  DS    CL7\nSRTAVRT  DS    CL12\nSRTAVEX  DS    CL12\nSRTGPCT  DS    CL4\nSRTPCT   DS    CL1\nSRTLT    DS    CL12\nSRTDUR   DS    CL8\n         DS    CL1\n         SPACE\nSSULINE  DSECT\nSSUENTRY DS    XL(L'LOWX)\nSSUCLS   DS    CL8\n         DS    CL1\nSSUPER   DS    CL1\n         DS    CL1\nSSUIMP   DS    CL1\nSSURATE  DS    CL8\nSSUTCB   DS    CL5\nSSUSRB   DS    CL5\nSSUPIR   DS    CL5\nSSUHSP   DS    CL5\nSSUBPIR  DS    CL5\nSSUPIE   DS    CL5\nSSUBPIE  DS    CL5\nSSUBKIA  DS    CL5\nSSUBKIE  DS    CL5\nSSUSWP   DS    CL7\n         SPACE\nSIOLINE  DSECT\nSIOENTRY DS    XL(L'LOWX)\nSIOCLS   DS    CL8\n         DS    CL1\nSIOPER   DS    CL1\nSIORATE  DS    CL7\nSIOCONN  DS    CL7\nSIODISC  DS    CL7\nSIOWAIT  DS    CL7\nSIOIOSQ  DS    CL7\nSIOREST  DS    CL34\n         TITLE 'SWAP DOMAIN MONITOR SUBROUTINE'\nIMPXA    CSECT\n         USING DOMAINS,R11,R10\nDOMAINS  DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         TM    OSLEVEL,CVTH4410  MVS/SP4?\n         BNO   DMDTSZOK          NO, DMDT ENTRY IS 64 BYTES.\n         MVI   DMDTSIZE+1,180    YES, DMDT ENTRY IS 180 BYTES.\n         TM    OSLEVEL+1,CVTH5510 MVS/SP5?\n         BNO   DMDTSZOK          NO.\n         MVI   DMDTSIZE+1,240    YES, DMDT ENTRY IS 240 BYTES.\nDMDTSZOK CLI   INCHARS+1,C' '    ANY OPTION PRE-SPECIFIED?\n         BH    GIVEHLPS          YES, CAN ONLY SHOW HELP PANEL.\n         SPACE\nREDODMNS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         SLR   R0,R0             CLEAR FOR DIVIDE.\n         ST    R0,WINLINES       INITIALIZE LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         SPACE\n         SPACE\nSWAPDMNS TIME  BIN               GET TIME-OF-DAY.\n         LR    R5,R0             GET CURRENT CENTISECONDS.\n         S     R5,SWAPTIME       GET CENTISECONDS SINCE LAST SCAN.\n         ST    R0,SWAPTIME       SAVE CURRENT CENTISECONDS.\n         L     R4,RMCTADDR       POINT TO RESOURCE MNGR CONTROL TABLE.\n         L     R1,20(,R4)        POINT TO RESOURCE MNGR CONTROL AREA.\n         L     R4,24(,R4)        POINT TO WORKLOAD MNGR SPEC TABLE.\n         MVC   IPSLABEL,=C'IPS=IEAIPS'\n         MVC   DMNIPSID,4(R4)    IPS ID.\n         MVC   CPUCOEFF,148(R4)  CPU SERVICE COEFFICIENT.\n         MVC   IOCCOEFF,152(R4)  I/O SERVICE COEFFICIENT.\n         MVC   MSOCOEFF,80(R4)   MSO SERVICE COEFFICIENT.\n         MVC   SRBCOEFF,160(R4)  SRB SERVICE COEFFICIENT.\n         TM    OSLEVEL+1,CVTH5510 MVS/SP5?\n         BNO   GOTMSO            NO, HAVE CORRECT MSO COEFFICIENT.\n         MVC   CPUCOEFF,156(R4)  CPU SERVICE COEFFICIENT.\n         MVC   IOCCOEFF,160(R4)  I/O SERVICE COEFFICIENT.\n         MVC   MSOCOEFF,84(R4)   MSO SERVICE COEFFICIENT.\n         MVC   SRBCOEFF,168(R4)  SRB SERVICE COEFFICIENT.\nGOTMSO   L     R4,RMCTADDR       POINT TO THE RMCT.\n         TM    220(R4),X'7F'     IN WLM GOAL MODE?\n         BM    GOTIPS            NO, NO POLICY TO EXTRACT.\n         MVC   IPSLABEL(12),=CL12'<GOAL MODE> '\nGOTIPS   MVC   0(L'LOWX,R2),LOWX SHOW IPS DETAILS.\n         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         MVC   L'LOWX(DMDL,R2),IPSPARMS\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         LA    R3,244(,R1)       POINT TO FIRST SWAP REASON COUNTER.\n         SLR   R6,R6             CLEAR FOR ACCUMULATION.\n         LA    R14,11            NUMBER OF SWAP REASONS.\nRMCALOOP A     R6,0(,R3)         ADD COUNT FOR THIS SWAP REASON.\n         LA    R3,4(,R3)         POINT TO NEXT COUNTER.\n         BCT   R14,RMCALOOP\n         L     R7,288(,R1)       GET LOGICAL SWAP COUNT.\n         LR    R9,R6             CURRENT TOTAL SWAP COUNT.\n         S     R9,TOTLSWAP       GET CHANGE IN TOTAL SWAPS.\n         LR    R14,R9            SAVE IT FOR NOW.\n         ST    R6,TOTLSWAP       SAVE TOTAL SWAP COUNT.\n         M     R8,ONEGRAND       FOR CENTISECONDS AND 1 DECIMAL PLACE.\n         DR    R8,R5             GET TOTAL SWAP RATE.\n         CVD   R9,WORK\n         MVC   TOTSWPRT,ED2PNT1\n         ED    TOTSWPRT,WORK+6\n         LR    R9,R7             CURRENT LOGICAL SWAP COUNT.\n         S     R9,LOGSWAP        GET CHANGE IN LOGICAL SWAPS COUNT.\n         SR    R14,R9            GET CHANGE IN PHYSICAL SWAPS COUNT.\n         ST    R7,LOGSWAP        SAVE TOTAL LOGICAL SWAP COUNT.\n         M     R8,ONEGRAND       FOR CENTISECONDS AND 1 DECIMAL PLACE.\n         DR    R8,R5             GET LOGICAL SWAP RATE.\n         CVD   R9,WORK\n         MVC   LOGSWPRT,ED2PNT1\n         ED    LOGSWPRT,WORK+6\n         LR    R9,R14            TOTAL SWAPS SINCE LAST SCAN.\n         M     R8,ONEGRAND       FOR CENTISECONDS AND 1 DECIMAL PLACE.\n         DR    R8,R5             GET PHYSICAL SWAP RATE.\n         CVD   R9,WORK\n         MVC   PHYSWPRT,ED2PNT1\n         ED    PHYSWPRT,WORK+6\n         L     R6,244(,R1)       TPUT SWAP COUNT.\n         LR    R9,R6             CURRENT TPUT SWAP COUNT.\n         S     R9,TPUTSWAP       GET CHANGE IN TOTAL TPUT SWAPS.\n         ST    R6,TPUTSWAP       SAVE TPUT SWAP COUNT.\n         M     R8,ONEGRAND       FOR CENTISECONDS AND 1 DECIMAL PLACE.\n         DR    R8,R5             GET TPUT SWAP RATE.\n         CVD   R9,WORK\n         MVC   TPTSWPRT,ED2PNT1\n         ED    TPTSWPRT,WORK+6\n         L     R6,248(,R1)       TGET SWAP COUNT.\n         LR    R9,R6             CURRENT TOTAL TGET SWAP COUNT.\n         S     R9,TGETSWAP       GET CHANGE IN TGET SWAPS.\n         ST    R6,TGETSWAP       SAVE TGET SWAP COUNT.\n         M     R8,ONEGRAND       FOR CENTISECONDS AND 1 DECIMAL PLACE.\n         DR    R8,R5             GET TGET SWAP RATE.\n         CVD   R9,WORK\n         MVC   TGTSWPRT,ED2PNT1\n         ED    TGTSWPRT,WORK+6\n         MVC   0(L'LOWX,R2),LOWX SUPPLY HEADING ATTRIBUTES.\n         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.\n         MVC   L'LOWX(DMDL,R2),SWPRTHDR\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         TM    220(R4),X'7F'     IN WLM GOAL MODE?\n         BM    SCOMPAT           NO, NO POLICY TO EXTRACT.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BO    SRVCLSES          YES, GO EXTRACT POLICY.\nSCOMPAT  MVC   LL-79(DMDL,R2),HEADINGS  LOAD COLUMN LABELS.\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         USING DMNLINE,R2\n         XC    DMNTOTLS,DMNTOTLS CLEAR COUNTERS.\n         LH    R3,188(,R4)       GET NUMBER OF DOMAINS.\n         L     R4,180(,R4)       GET FIRST DOMAIN TABLE ENTRY.\nDMNLOOP  MVC   DMNENTRY,LOWX     LOW INTENSITY AND TURQUOISE.\n         SLR   R5,R5             PREPARE FOR INSERT CHARACTER.\n         IC    R5,0(,R4)         GET DOMAIN NUMBER.\n         CVD   R5,WORK\n         MVC   DMNID,ED3\n         ED    DMNID,WORK+6\n         LH    R5,52(,R4)        MINIMUM MULTIPROGRAMMING LEVEL.\n         CVD   R5,WORK\n         MVC   MIN,ED3\n         ED    MIN,WORK+6\n         LH    R5,54(,R4)        MAXIMUM MULTIPROGRAMMING LEVEL.\n         CVD   R5,WORK\n         MVC   MAX,ED3\n         ED    MAX,WORK+6\n         LH    R5,2(,R4)         MPL IN TARGET.\n         CVD   R5,WORK\n         MVC   MPLI,ED3\n         ED    MPLI,WORK+6\n         LH    R5,4(,R4)         MPL OUT TARGET.\n         CVD   R5,WORK\n         MVC   MPLO,ED3\n         ED    MPLO,WORK+6\n         LH    R5,6(,R4)         AVERAGE NUMBER OF READY USERS.\n         TM    OSLEVEL+1,CVTH5510\n         BNO   SRUAINT\n         L     R5,80(,R4)        AVERAGE NUMBER OF READY USERS.\nSRUAINT  SRL   R5,4              CONVERT TO INTEGER.\n         CVD   R5,WORK\n         A     R5,RUATOTAL\n         ST    R5,RUATOTAL\n         MVC   RUA,ED3\n         ED    RUA,WORK+6\n         LH    R5,10(,R4)        CURRENT MULTIPROGRAMMING LEVEL.\n         CVD   R5,WORK\n         A     R5,CMPLTOTL\n         ST    R5,CMPLTOTL\n         MVC   CMPL,ED3\n         ED    CMPL,WORK+6\n         LH    R5,12(,R4)        CURRENT NUMBER OF USERS ON OUT QUEUE.\n         CVD   R5,WORK\n         A     R5,OUTUTOTL\n         ST    R5,OUTUTOTL\n         MVC   OUTU,ED3\n         ED    OUTU,WORK+6\n         LH    R5,14(,R4)        CURRENT NUMBER OF SWPABL INCORE USERS.\n         CVD   R5,WORK\n         A     R5,INCTOTL\n         ST    R5,INCTOTL\n         MVC   INC,ED3\n         ED    INC,WORK+6\n         LH    R5,34(,R4)        CURRENT NUMBER OF NON-SWAPPABLE USERS.\n         CVD   R5,WORK\n         A     R5,NSWTOTL\n         ST    R5,NSWTOTL\n         MVC   NSW,ED3\n         ED    NSW,WORK+6\n         LH    R5,36(,R4)        MAXIMUM NUMBER OF READY USERS\n         CVD   R5,WORK                   IN INTERVAL.\n         A     R5,MXRUTOTL\n         ST    R5,MXRUTOTL\n         MVC   MXRU,ED3\n         ED    MXRU,WORK+6\n         L     R5,24(,R4)        WEIGHTED INTERVAL DOMAIN SERVICE.\n         CVD   R5,WORK\n         OC    WORK(5),WORK      GREATER THAN 99,999?\n         BNZ   BIGTWSR           YES.\n         MVC   TWSR+1(6),ED5     NO.\n         ED    TWSR+1(6),WORK+5\n         B     DONETWSR          DONE TIME-WEIGHTED SERVICE RATE.\nBIGTWSR  SRP   WORK,64-3,0       DIVIDE BY ONE THOUSAND.\n         MVC   TWSR,ED5          EDIT MASK AND 'K' FOR THOUSAND.\n         ED    TWSR(6),WORK+5\nDONETWSR SLR   R7,R7\n         ICM   R7,3,32(R4)       GET CONTENTION INDEX FOR THIS DOMAIN.\n         TM    OSLEVEL,CVTH4410  PRE MVS/SP4?\n         BNO   DMNOLDCI          YES.\n         MVC   CIDX,=X'404020202021204B2020'\n         CVD   R7,WORK\n         ED    CIDX,WORK+4\n         B     DMNDONCI\nDMNOLDCI M     R6,ONEGRAND       THREE DECIMAL PLACES.\n         SRDL  R6,8              SHIFT OUT 8 HEX PLACES.\n         MVC   CIDX,=X'4040202021204B202020'\n         CVD   R7,WORK\n         ED    CIDX,WORK+4\nDMNDONCI ICM   R7,15,20(R4)      SHOW INTERVAL ACCUMULATED SERVICE.\n         BZ    NODMNSRV          ZERO, SO THIS DOMAIN IS INACTIVE.\n         MVI   DMNENTRY+4,X'F8'  HIGH INTENSITY.\n         MVI   DMNENTRY+8,X'F3'  USING SOME RESOURCES - PINK.   (I3279)\nNODMNSRV DS    0H\n         MVC   ASRV,=X'40202020202020202120'\n         CVD   R7,WORK\n         A     R7,ACUMTOTL\n         ST    R7,ACUMTOTL\n         ED    ASRV,WORK+3\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         TM    OSLEVEL+1,CVTH5510 SP5?\n         BNO   SADDLEN           NO.\n         L     R4,128(,R4)       YES, POINT TO NEXT DOMAIN ENTRY.\n         B     SADDEDL\nSADDLEN  AH    R4,DMDTSIZE       POINT TO NEXT DOMAIN ENTRY.\nSADDEDL  BCT   R3,DMNLOOP\n         MVC   DMNENTRY,MEDX     MEDIUM INTENSITY.\n         MVI   DMNENTRY+8,X'F2'  RED.                           (I3279)\n         MVI   DMNID,C' '        CLEAR OUTPUT LINE TO BLANKS.\n         MVC   DMNID+1(DMDL-1),DMNID\n         MVC   MAX(5),=C'TOTAL'\n         L     R5,RUATOTAL\n         CVD   R5,WORK\n         MVC   RUA,ED3\n         ED    RUA,WORK+6\n         L     R5,CMPLTOTL\n         CVD   R5,WORK\n         MVC   CMPL,ED3\n         ED    CMPL,WORK+6\n         L     R5,OUTUTOTL\n         CVD   R5,WORK\n         MVC   OUTU,ED3\n         ED    OUTU,WORK+6\n         L     R5,INCTOTL\n         CVD   R5,WORK\n         MVC   INC,ED3\n         ED    INC,WORK+6\n         L     R5,NSWTOTL\n         CVD   R5,WORK\n         MVC   NSW,ED3\n         ED    NSW,WORK+6\n         L     R5,MXRUTOTL\n         CVD   R5,WORK\n         MVC   MXRU,ED3\n         ED    MXRU,WORK+6\n         L     R5,ACUMTOTL\n         CVD   R5,WORK\n         MVC   ASRV-2(12),ED11\n         ED    ASRV-2(12),WORK+2\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         B     SSUMMARY\n         DROP  R2                DMNLINE.\n         SPACE\nSRVCLSES DS    0H\n         ICM   R1,15,SPQRYPTR    COLLECTION AREA CREATED?\n         BNZ   PQRYREDO          YES.\n         L     R0,SPQRYLEN       NO, GET AREA SIZE.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(31,64),BNDRY=PAGE\n         ST    R1,SPQRYPTR       SAVE AREA ADDRESS.\nPQRYREDO DS    0H\n         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.\n         L     R4,SPQRYPTR       POINT TO QUERY AREA.\n         IWMPQRY ANSAREA=(R4),ANSLEN=SPQRYLEN,QUERYLEN=SPQRETLN,       +\n               MF=(E,SPQRYLST)   GET CURRENT WORKLOAD POLICY.\n         LR    R4,R0             SAVE REASON CODE.\n         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM STATE.\n         CLM   R4,3,=X'040A'     WAS AREA LARGE ENOUGH?\n         BNE   COLLINIT          YES.\n         LM    R0,R1,SPQRYLEN    NO, GET LENGTH AND ADDRESS OF AREA.\n         FREEMAIN RU,A=(1),LV=(0),SP=SUBPOOL\n         ST    R15,SPQRYPTR      RESET AREA POINTER.\n         L     R1,SPQRETLN       GET REQUIRED AREA SIZE.\n         LA    R1,4095(,R1)\n         SRL   R1,12\n         SLL   R1,12             ROUND UP TO NEXT PAGE BOUNDARY.\n         ST    R1,SPQRYLEN       SAVE THE NEW SIZE.\n         B     SRVCLSES          RETRY.\nCOLLINIT DS    0H\n         ICM   R1,15,SCOLLPTR    COLLECTION AREA CREATED?\n         BNZ   COLLREDO          YES.\n         L     R0,SCOLLLEN       NO, GET AREA SIZE.\n         SLL   R0,1              DOUBLE IT FOR TWO AREAS.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(31,64),BNDRY=PAGE\n         ST    R1,SCOLLPTR       SAVE AREA ADDRESS.\n         A     R1,SCOLLLEN       POINT HALFWAY INTO AREA.\n         ST    R1,SCOLLPT2       SAVE AREA ADDRESS.\nCOLLREDO DS    0H\n         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.\n         L     R4,SCOLLPTR       POINT TO QUERY AREA.\n         MVC   SCOLLPTR,SCOLLPT2 SWITCH COLLECTION AREAS.\n         ST    R4,SCOLLPT2\n         IWMRCOLL ICS=NO,ANSAREA=(R4),ANSLEN=SCOLLLEN,                 +\n               MINLEN=SCOLLMIN,MAXLEN=SCOLLMAX,ANSTOKN=SANSTOKN,       +\n               MF=(E,SCOLLST)    GET CURRENT WORKLOAD POLICY.\n         LR    R4,R0             SAVE REASON CODE.\n         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM STATE.\n*        CLM   R4,3,=X'040F'     IS POLICY TOKEN STILL CURRENT?\n*        BE    ?                 NO.\n         CLM   R4,3,=X'0832'     WAS AREA LARGE ENOUGH?\n         BE    COLLFREE          NO, MORE NEEDED WITH NEW POLICY.\n         CLM   R4,3,=X'040A'     WAS AREA LARGE ENOUGH?\n         BNE   COLLOKAY          YES.\nCOLLFREE LM    R0,R1,SCOLLLEN    NO, GET LENGTH AND ADDRESS OF AREA.\n         C     R1,SCOLLPT2       GOT START OF AREA?\n         BNH   *+8               YES.\n         L     R1,SCOLLPT2       NO, BUT HAVE NOW.\n         SLL   R0,1              DOUBLE IT FOR TWO AREAS.\n         FREEMAIN RU,A=(1),LV=(0),SP=SUBPOOL\n         ST    R15,SCOLLPTR      RESET AREA POINTER.\n         ST    R15,SCOLLPT2      RESET AREA POINTER.\n         L     R1,SCOLLMAX       GET REQUIRED AREA SIZE.\n         LA    R1,4095(,R1)\n         SRL   R1,12\n         SLL   R1,12             ROUND UP TO NEXT PAGE BOUNDARY.\n         ST    R1,SCOLLLEN       SAVE THE NEW SIZE.\n         B     COLLINIT          RETRY.\nCOLLOKAY L     R3,SCOLLPT2       POINT TO RETURNED DATA.\n         USING RCAA,R3\n         L     R4,SCOLLPTR       POINT TO PREVIOUS AREA.\n         L     R15,RCAANTV#\n         S     R15,RCAANTV#-RCAA(,R4)\n         ST    R15,SSAMPLES      SAVE CHANGE IN SAMPLE CYCLE COUNT.\n         LM    R14,R15,RCAATMR-RCAA(R4)\n         CLI   0(R4),C'R'        PREVIOUS AREA BEEN USED YET?\n         BE    *+8               YES, USE PREVIOUS COLLECTION TIME.\n         LM    R14,R15,RCAATMI   NO, USE REPORTING INITIALIZATION TIME.\n         LM    R0,R1,RCAATMR     GET CURRENT REPORT TIME.\n         STM   R14,R15,WORK      SAVE FROM TIME.\n         SLR   R1,R15            GET TIME DIFFERENCE  - LOW ORDER.\n         BC    3,*+6\n         BCTR  R0,0              BORROW.\n         SLR   R0,R14            GET TIME DIFFERENCE  - HIGH ORDER.\n         SRDL  R0,12             CONVERT TO MICROSECONDS.\n         CL    R0,=F'499'        IS ELAPSED TOO LONG TO PROCESS?\n         BNL   SELAPSDN          YES, SKIP DIVIDE AND STORE.\n         D     R0,ONEGRAND       CONVERT TO MILLISECONDS.\n         ST    R1,SELAPSED       SAVE THE ELAPSED TIME SAMPLE BASE.\nSELAPSDN STCKCONV STCKVAL=WORK,  INPUT STCK VALUE.                     +\n               CONVVAL=SECWORKA, OUTPUT FOUR WORDS.                    +\n               TIMETYPE=DEC,     GET TIME DECIMAL DIGITS (DEFAULT).    +\n               DATETYPE=YYYYMMDD, DATE FORMAT.                         +\n               MF=(E,STCKCNVL)   SPECIFY PARAMETER LIST.\n         UNPK  HEADWSDT(5),SECWORKA+8(3)\n         MVI   HEADWSDT+4,C'-'\n         UNPK  HEADWSDT+5(3),SECWORKA+10(2)\n         MVI   HEADWSDT+7,C'-'\n         UNPK  HEADWSDT+8(3),SECWORKA+11(2)\n         MVI   HEADWSDT+10,C' '\n         UNPK  HEADWSTM(3),SECWORKA(2)\n         MVI   HEADWSTM+2,C':'\n         UNPK  HEADWSTM+3(3),SECWORKA+1(2)\n         MVI   HEADWSTM+5,C':'\n         UNPK  HEADWSTM+6(3),SECWORKA+2(2)\n         MVI   HEADWSTM+8,C'.'\n         UNPK  HEADWSTM+9(3),SECWORKA+2(2)\n         MVI   HEADWSTM+11,C' '\n         MVC   LL-79(79,R2),HEADWLMS  LOAD HEADING.\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         SPACE\n         USING SVELINE,R2\n         ICM   R0,15,SSAMPLES    ANY SAMPLING DONE?\n         BNP   SVELDONE          NO, SKIP VELOCITY/DELAY DISPLAY.\n         MVC   SVLENTRY,MEDX     SUPPLY HEADING ATTRIBUTES.\n         MVC   SVLCLS(30),=C'VELOCITY AND DELAY PERCENTAGES'\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         MVC   SVLENTRY,HIGHX    SUPPLY HEADING ATTRIBUTES.\n         MVC   SVLCLS(79),HEADSVEL\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         LH    R1,RCAASCA#       GET NUMBER OF SERVICE CLASS ENTRIES.\n         L     R4,RCAASCOF       GET OFFSET TO SERVICE CLASS ENTRIES.\n         AR    R4,R3             POINT TO SERVICE CLASS ENTRIES.\n         USING RCAE,R4\nSSCLVLLP ST    R1,SSRVCNTR       SAVE SERVICES CLASSES TO GO.\n         LH    R7,RCAEPER#       GET THE NUMBER OF PERIODS FOR CLASS.\n         L     R5,RCAEPERO       GET OFFSET TO PERIOD DATA.\n         AR    R5,R4             POINT TO PERIOD DATA.\n         USING RCAEIHDR,R5\nSVLPERLP ICM   R6,15,RCAEIGOF    GET EXECUTION DELAY DATA OFFSET.\n         BZ    SNXVLPER          NO DATA SO CHECK NEXT PERIOD.\n         AR    R6,R5             POINT TO EXECUTION DELAY DATA.\nSNDELA   USING RCAEDELA,R6\n         LR    R8,R6             COPY EXECUTION DELAY DATA ADDRESS.\n         SR    R8,R3             GET OFFSET INTO THIS AREA.\n         A     R8,SCOLLPTR       POINT TO PREVIOUS COLLECTION DATA.\nSODELA   USING RCAEDELA,R8\n         L     R9,SNDELA.RCAETOTS2\n         S     R9,SODELA.RCAETOTS2\n         LTR   R9,R9\n         BNP   SNXVLPER          NO SAMPLES SO CHECK NEXT PERIOD.\n         ST    R9,SSAMPLES       SAVE CHANGE IN TOTAL PERIOD SAMPLES.\n         L     R9,SNDELA.RCAETOTD\n         S     R9,SODELA.RCAETOTD\n         L     R15,SNDELA.RCAETOTU\n         S     R15,SODELA.RCAETOTU\n         MVI   SVLVEL+3,C'0'     PREPARE FOR EXACTLY ZERO.\n         BZ    SVELOCOK          VELOCITY IS EXACTLY ZERO.\n         AR    R9,R15            GET RCAETOTD + RCAETOTU.\n         MVI   SVLVEL+3,C' '     PREPARE FOR NO SAMPLES.\n         BNP   SNXVLPER          NO SAMPLES SO CHECK NEXT PERIOD.\n         ST    R9,SSAMPDEN       SET DENOMINATOR.\n         LA    R1,SVLVEL         POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW VELOCITY.\nSVELOCOK MVC   SSAMPDEN,SSAMPLES SET DENOMINATOR.\n         L     R15,SNDELA.RCAECUSE\n         S     R15,SODELA.RCAECUSE\n         LA    R1,SVLCPU         POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW USING CPU PERCENTAGE.\n         L     R15,SNDELA.RCAEIOU\n         S     R15,SODELA.RCAEIOU\n         LA    R1,SVLIOU         POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW USING I/O PERCENTAGE.\n         L     R15,SNDELA.RCAECDEL\n         S     R15,SODELA.RCAECDEL\n         LA    R1,SVLCPWT        POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW CPU DELAY PERCENTAGE.\n         L     R15,SNDELA.RCAEIOD\n         S     R15,SODELA.RCAEIOD\n         LA    R1,SVLCPWT        POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW I/O DELAY PERCENTAGE.\n         L     R15,SNDELA.RCAECCAP\n         S     R15,SODELA.RCAECCAP\n         LA    R1,SVLCCAP        POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW CPU CAPPING DELAY PERCENTAGE.\n         L     R15,SNDELA.RCAESWIN\n         S     R15,SODELA.RCAESWIN\n         A     R15,SNDELA.RCAEDMPL\n         S     R15,SODELA.RCAEDMPL\n         LA    R1,SVLSWAP        POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW SWAP IN DELAY PERCENTAGE.\n         L     R15,SNDELA.RCAEAPRV\n         S     R15,SODELA.RCAEAPRV\n         A     R15,SNDELA.RCAEACOM\n         S     R15,SODELA.RCAEACOM\n         A     R15,SNDELA.RCAEXM\n         S     R15,SODELA.RCAEXM\n         A     R15,SNDELA.RCAEVIO\n         S     R15,SODELA.RCAEVIO\n         A     R15,SNDELA.RCAEHSPC\n         S     R15,SODELA.RCAEHSPC\n         A     R15,SNDELA.RCAECHS\n         S     R15,SODELA.RCAECHS\n         A     R15,SNDELA.RCAEASPD\n         S     R15,SODELA.RCAEASPD\n         LA    R1,SVLAUX         POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW AUX PAGE IN DELAY PERCENTAGE.\n         L     R15,SNDELA.RCAEUNKN\n         S     R15,SODELA.RCAEUNKN\n         LA    R1,SVLUNKN        POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW UNKNOWN DELAY PERCENTAGE.\n         L     R15,SNDELA.RCAEIDLE\n         S     R15,SODELA.RCAEIDLE\n         LA    R1,SVLIDLE        POINT TO DISPLAY AREA.\n         BAS   R14,SDLAYFMT      SHOW IDLING PERCENTAGE.\n         DROP  SNDELA,SODELA     RCAEDELA.\nSVLDROK2 L     R1,SPQRYPTR       POINT TO POLICY QUERY DATA AREA.\n         SLR   R9,R9             YES.\n         ICM   R9,3,RCAECLX      GET SERVICE CLASS INDEX.\n         USING SVPOLHD,R1\n         BNP   SVLCLSOK          ZERO IS INVALID.\n         CH    R9,SVPOLDCC       IS SERVICE CLASS INDEX TOO HIGH?\n         BH    SVLCLSOK          YES, CAN'T SHOW SERVICE CLASS.\n         BCTR  R9,0              CONVERT TO RELATIVE ENTRY NUMBER.\n         MH    R9,SVPOLDCL       GET OFFSET INTO CLASS ENTRIES.\n         A     R9,SVPOLDCO       ADD OFFSET OF FIRST CLASS ENTRY.\n         ALR   R9,R1             POINT TO SERVICE CLASS ENTRY.\n         USING SVPOLCD,R9\n         MVC   SVLCLS,SVPOLCNM   LOAD THE SERVICE CLASS NAME.\nSVLCLSOK LA    R14,1\n         SLR   R6,R6\n         CH    R14,RCAEPER#      SINGLE-PERIOD CLASS?\n         BE    SVLPEROK          YES, DO NOT SHOW PERIOD NUMBER.\n         LH    R14,RCAEPER#      GET THE NUMBER OF PERIODS FOR CLASS.\n         SR    R14,R7\n         LR    R6,R14\n         IC    R14,HEX+1(R14)    GET PERIOD NUMBER.\n         STC   R14,SVLPER        SHOW IT.\n         MH    R6,SVPOLDZL\nSVLPEROK AL    R6,SVPOLCPO       GET PERIOD'S ENTRY OFFSET.\n         ALR   R6,R9             POINT TO PERIOD'S ENTRY.\n         DROP  R1                SVPOLHD.\n         USING SVPOLPD,R6\n         TM    SVPOLTYP,SVPOLVEL VELOCITY GOAL?\n         BZ    SVLGOALD          NO, DO NOT SHOW GOAL.\n         L     R0,SVPOLVAL       YES, SHOW GOAL VELOCITY.\n         CVD   R0,WORK\n         MVC   SVLGOAL,ED3\n         ED    SVLGOAL,WORK+6\n         DROP  R6,R9             SVPOLPD, SVPOLCD.\nSVLGOALD TR    LL-79(DMDL,R2),XLATETBL\n         MVI   SVLCPU,X'24'      CONSUMPTION IN GREEN.\n         MVI   SVLCPWT,X'22'     DELAYS IN RED.\n         MVI   SVLUNKN,X'25'\n         BAS   R14,SSPCLINE      LINE NOW COMPLETE.\nSNXVLPER A     R5,RCAEINXP       POINT TO NEXT PERIOD'S DATA.\n         BCT   R7,SVLPERLP       PROCESS NEXT PERIOD.\n         L     R1,SSRVCNTR       GET REMAINING CLASS COUNT.\n         AH    R4,RCAASCAL       POINT TO NEXT CLASS'S DATA.\n         BCT   R1,SSCLVLLP       PROCESS NEXT CLASS.\n         DROP  R5,R4,R2          RCAEIHDR, RCAE, SVELINE.\n         LR    R1,R2             GET BUFFER POINTER.\n         AHI   R1,-DMLL          POINT TO PREVIOUS LINE.\n         MVI   2(R1),X'F4'       UNDERSCORE FOR SEPARATION.\n         SPACE\n         USING SRTLINE,R2\nSVELDONE MVC   SRTENTRY,MEDX     SUPPLY HEADING ATTRIBUTES.\n         MVC   SRTCLS(19),=C'TRANSACTION SUMMARY'\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         MVC   SRTENTRY,HIGHX    SUPPLY HEADING ATTRIBUTES.\n         MVC   SRTCLS(79),HEADSRTS\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         LH    R1,RCAASCA#       GET NUMBER OF SERVICE CLASS ENTRIES.\n         L     R4,RCAASCOF       GET OFFSET TO SERVICE CLASS ENTRIES.\n         AR    R4,R3             POINT TO SERVICE CLASS ENTRIES.\n         USING RCAE,R4\nSSCLRTLP ST    R1,SSRVCNTR       SAVE SERVICES CLASSES TO GO.\n         LH    R7,RCAEPER#       GET THE NUMBER OF PERIODS FOR CLASS.\n         L     R5,RCAEPERO       GET OFFSET TO PERIOD DATA.\n         AR    R5,R4             POINT TO PERIOD DATA.\n         USING RCAEIHDR,R5\nSRTPERLP ICM   R6,15,RCAEIPOF    GET RESPONSE TIME DATA OFFSET.\n         BZ    SNXRTPER          NO DATA SO CHECK NEXT PERIOD.\n         AR    R6,R5             POINT TO DISTRIBUTION DATA.\nSNRST    USING RCAERST,R6\n         LR    R8,R6             COPY DISTRIBUTION DATA ADDRESS.\n         SR    R8,R3             GET OFFSET INTO THIS AREA.\n         A     R8,SCOLLPTR       POINT TO PREVIOUS COLLECTION DATA.\nSORST    USING RCAERST,R8\n         L     R9,SNRST.RCAERCP  GET TRANSACTION COMPLETION COUNT.\n         S     R9,SORST.RCAERCP  GET CHANGE IN TRANSACTION COUNT.\n         BNP   SNXRTPER          NO TRANSACTIONS SO CHECK NEXT PERIOD.\n         CVD   R9,WORK           SHOW THE TRANSACTION COUNT.\n         MVC   SRTXACT,ED11\n         ED    SRTXACT,WORK+2\n         LR    R15,R9            COPY TRANSACTION COUNT.\n         M     R14,TENGRAND\n         ICM   R0,15,SELAPSED    COPY ELAPSED TIME.\n         BNP   SRTDOK1           SKIP DIVIDE IF ELAPSED IS INVALID.\n         SRL   R0,1              HALVE IT.\n         CLR   R14,R0            DIVIDE PROBLEMS?\n         BH    SRTDOK1           YES, SKIP DIVIDE.\n         D     R14,SELAPSED      GET TRANSACTIONS PER DECISECOND.\n         CVD   R15,WORK          SHOW TRANSACTION RATE.\n         MVC   SRTRATE,=X'40202021204B20'\n         ED    SRTRATE,WORK+5\nSRTDOK1  LM    R14,R15,SNRST.RCAETET\n         SL    R15,SORST.RCAETET2\n         BC    3,SRTSLHI1\n         BCTR  R14,0             BORROW.\nSRTSLHI1 SL    R14,SORST.RCAETET1\n         LR    R0,R14\n         OR    R0,R15            ANY TIME ACRUED?\n         BZ    SRTDROK1          NO, SKIP DISPLAY.\n         LR    R0,R9             COPY TRANSACTION COUNT.\n         SRL   R0,1              HALVE IT.\n         MVI   SRTAVRT+6,C'>'\n         MVC   SRTAVRT+7(5),SRTAVRT+6\n         CLR   R14,R0            DIVIDE PROBLEMS?\n         BH    SRTDROK1          YES, SKIP DIVIDE.\n         DR    R14,R9            GET TIME PER TRANSACTION.\n         SLR   R14,R14           CLEAR REMAINDER.\n         SLDL  R14,10            CONVERT TO MICROSECONDS.\n         CL    R14,=F'499'       IS TIME TOO BIG TO PROCESS?\n         BNL   SRTDROK1          YES, SKIP DIVIDE.\n         D     R14,ONEGRAND      CONVERT TO MILLISECONDS.\n         CVD   R15,WORK          SHOW AVERAGE RESPONSE TIME.\n         MVC   SRTAVRT,ED11\n         ED    SRTAVRT,WORK+2\nSRTDROK1 LM    R14,R15,SNRST.RCAEXET\n         SL    R15,SORST.RCAEXET2\n         BC    3,SRTSLHI2\n         BCTR  R14,0             BORROW.\nSRTSLHI2 SL    R14,SORST.RCAEXET1\n         LR    R0,R14\n         OR    R0,R15            ANY TIME ACRUED?\n         BZ    SRTDROK2          NO, SKIP DISPLAY.\n         LR    R0,R9             COPY TRANSACTION COUNT.\n         SRL   R0,1              HALVE IT.\n         MVI   SRTAVEX+6,C'>'\n         MVC   SRTAVEX+7(5),SRTAVEX+6\n         CLR   R14,R0            DIVIDE PROBLEMS?\n         BH    SRTDROK2          YES, SKIP DIVIDE.\n         DR    R14,R9            GET TIME PER TRANSACTION.\n         SLR   R14,R14           CLEAR REMAINDER.\n         SLDL  R14,10            CONVERT TO MICROSECONDS.\n         CL    R14,=F'499'       IS TIME TOO BIG TO PROCESS?\n         BNL   SRTDROK2          YES, SKIP DIVIDE.\n         D     R14,ONEGRAND      CONVERT TO MILLISECONDS.\n         CVD   R15,WORK          SHOW AVERAGE EXECUTION TIME.\n         MVC   SRTAVEX,ED11\n         ED    SRTAVEX,WORK+2\n         DROP  SNRST,SORST       RCAERST.\nSRTDROK2 L     R1,SPQRYPTR       POINT TO POLICY QUERY DATA AREA.\n         SLR   R9,R9             YES.\n         ICM   R9,3,RCAECLX      GET SERVICE CLASS INDEX.\n         USING SVPOLHD,R1\n         BNP   SRTCLSOK          ZERO IS INVALID.\n         CH    R9,SVPOLDCC       IS SERVICE CLASS INDEX TOO HIGH?\n         BH    SRTCLSOK          YES, CAN'T SHOW SERVICE CLASS.\n         BCTR  R9,0              CONVERT TO RELATIVE ENTRY NUMBER.\n         MH    R9,SVPOLDCL       GET OFFSET INTO CLASS ENTRIES.\n         A     R9,SVPOLDCO       ADD OFFSET OF FIRST CLASS ENTRY.\n         ALR   R9,R1             POINT TO SERVICE CLASS ENTRY.\n         USING SVPOLCD,R9\n         MVC   SRTCLS,SVPOLCNM   LOAD THE SERVICE CLASS NAME.\nSRTCLSOK LA    R14,1\n         SLR   R6,R6\n         CH    R14,RCAEPER#      SINGLE-PERIOD CLASS?\n         BE    SRTPEROK          YES, DO NOT SHOW PERIOD NUMBER.\n         LH    R14,RCAEPER#      GET THE NUMBER OF PERIODS FOR CLASS.\n         SR    R14,R7\n         LR    R6,R14\n         IC    R14,HEX+1(R14)    GET PERIOD NUMBER.\n         STC   R14,SRTPER        SHOW IT.\n         MH    R6,SVPOLDZL\nSRTPEROK AL    R6,SVPOLCPO       GET PERIOD'S ENTRY OFFSET.\n         ALR   R6,R9             POINT TO PERIOD'S ENTRY.\n         DROP  R1                SVPOLHD.\n         USING SVPOLPD,R6\n         TM    SVPOLTYP,SVPOLPRC+SVPOLAVG\n         BZ    SRTGOALD          DO NOT SHOW GOAL.\n         MVC   SRTGPCT+2(3),=C'AVG'\n         TM    SVPOLTYP,SVPOLAVG\n         BO    SRTGLTIM\n         LH    R0,SVPOLPER       SHOW PERCENTILE.\n         CVD   R0,WORK\n         MVC   SRTGPCT,ED3\n         ED    SRTGPCT,WORK+6\n         MVI   SRTPCT,C'%'\nSRTGLTIM L     R0,SVPOLVAL\n         CVD   R0,WORK\n         MVC   SRTLT,ED11\n         ED    SRTLT,WORK+2\n         MVI   SRTLT+1,C'<'\n         SLR   R1,R1\n         IC    R1,SVPOLRTU\n         SLL   R1,1              MULTIPLY BY TWO FOR INDEX.\n         LA    R1,SRTUNITS(R1)\n         MVC   SRTLT+12(2),0(R1) SHOW RESPONSE TIME UNITS.\n         CLC   =X'F0F0F094A2',SRTLT+12-3\n         BNE   SRTUNTOK          NOT MULTIPLE OF 1000 MILLISECONDS.\n         MVC   SRTLT+12-3(5),BLANKS\n         MVI   SRTLT+12-3,X'A2'  CONVERT TO SECONDS.\nSRTUNTOK CLI   SRTLT+3,C' '      LEADING BLANK TO REMOVE?\n         BNE   SRTGLOK           NO\n         MVC   SRTLT+3(11),SRTLT+4\n         B     SRTUNTOK\nSRTGLOK  L     R0,SVPOLDUR       SHOW DURATION.\n         CVD   R0,WORK\n         MVC   SRTDUR,ED7Z\n         ED    SRTDUR,WORK+4\n         DROP  R6,R9             SVPOLPD, SVPOLCD.\nSRTGOALD BAS   R14,SADDLINE      LINE NOW COMPLETE.\nSNXRTPER A     R5,RCAEINXP       POINT TO NEXT PERIOD'S DATA.\n         BCT   R7,SRTPERLP       PROCESS NEXT PERIOD.\n         L     R1,SSRVCNTR       GET REMAINING CLASS COUNT.\n         AH    R4,RCAASCAL       POINT TO NEXT CLASS'S DATA.\n         BCT   R1,SSCLRTLP       PROCESS NEXT CLASS.\n         DROP  R5,R4,R2          RCAEIHDR, RCAE, SRTLINE.\n         LR    R1,R2             GET BUFFER POINTER.\n         AHI   R1,-DMLL          POINT TO PREVIOUS LINE.\n         MVI   2(R1),X'F4'       UNDERSCORE FOR SEPARATION.\n         SPACE\n         MVC   0(LL-79,R2),MEDX  SUPPLY HEADING ATTRIBUTES.\n         MVC   LL-79(37,R2),=C'RESPONSE TIME AS A PERCENTAGE OF GOAL'\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         MVC   0(LL-79,R2),HIGHX SUPPLY HEADING ATTRIBUTES.\n         LH    R0,RCAABMP#       GET NUMBER OF RESPONSE TIME BUCKETS.\n         L     R4,RCAABMPO       GET OFFSET TO RESPONSE TIME BUCKETS.\n         AR    R4,R3             POINT TO RESPONSE TIME BUCKETS.\n         LA    R15,5             GET COLUMNS PER BUCKET.\n         MR    R14,R0\n         LA    R1,DMLL(,R2)      POINT PAST DISPLAY LINE.\n         SR    R1,R15            POINT TO DISPLAY AREA.\nSDBHDGLP MVC   1(4,R1),=C'REST'  CATER FOR LAST ONE.\n         ICM   R15,15,0(R4)      GET PERCENTAGE.\n         BM    SDBHDGOK\n         CVD   R15,WORK          SHOW IT.\n         MVC   0(4,R1),ED3\n         ED    0(4,R1),WORK+6\n         MVI   4(R1),C'%'\nSDBHDGOK AH    R4,RCAABMPL       POINT TO NEXT SLOT.\n         LA    R1,5(,R1)         POINT TO NEXT DISPLAY AREA.\n         BCT   R0,SDBHDGLP\n         MVC   LL-79(10,R2),HEADSRTS\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         LH    R1,RCAASCA#       GET NUMBER OF SERVICE CLASS ENTRIES.\n         L     R4,RCAASCOF       GET OFFSET TO SERVICE CLASS ENTRIES.\n         AR    R4,R3             POINT TO SERVICE CLASS ENTRIES.\n         USING RCAE,R4\nSSCLDBLP ST    R1,SSRVCNTR       SAVE SERVICES CLASSES TO GO.\n         LH    R7,RCAEPER#       GET THE NUMBER OF PERIODS FOR CLASS.\n         L     R5,RCAEPERO       GET OFFSET TO PERIOD DATA.\n         AR    R5,R4             POINT TO PERIOD DATA.\n         USING RCAEIHDR,R5\nSDBPERLP ICM   R6,15,RCAEIDOF    GET DISTRIBUTION DATA OFFSET.\n         BZ    SNXDBPER          NO DATA SO CHECK NEXT PERIOD.\n         LH    R0,RCAEID#        GET NUMBER OF RESPONSE TIME BUCKETS.\n         AR    R6,R5             POINT TO DISTRIBUTION DATA.\n         LR    R8,R6             COPY DISTRIBUTION DATA ADDRESS.\n         LR    R1,R6             COPY DISTRIBUTION DATA ADDRESS.\n         SR    R8,R3             GET OFFSET INTO THIS AREA.\n         A     R8,SCOLLPTR       POINT TO PREVIOUS COLLECTION DATA.\n         SLR   R9,R9             CLEAR ACCUMULATOR.\nSDBDSLP1 L     R15,0(,R1)        GET TRANSACTION COMPLETION COUNT.\n         S     R15,0(,R8)        GET CHANGE IN TRANSACTION COUNT.\n         AR    R9,R15            ACCUMULATE PERIOD TOTAL.\n         AH    R1,RCAEIDLN       POINT TO NEXT SLOT.\n         AH    R8,RCAEIDLN       POINT TO NEXT SLOT IN PREVIOUS AREA.\n         BCT   R0,SDBDSLP1\n         LTR   R9,R9             SENSIBLE TRANSACTION COUNT?\n         BNP   SNXDBPER          NO, SKIP THIS PERIOD.\n         LH    R0,RCAEID#        GET NUMBER OF RESPONSE TIME BUCKETS.\n         LA    R15,5             GET COLUMNS PER BUCKET.\n         MR    R14,R0\n         LA    R1,DMLL(,R2)      POINT PAST DISPLAY LINE.\n         SR    R1,R15            POINT TO DISPLAY AREA.\n         LR    R8,R6             COPY DISTRIBUTION DATA ADDRESS.\n         SR    R8,R3             GET OFFSET INTO THIS AREA.\n         A     R8,SCOLLPTR       POINT TO PREVIOUS COLLECTION DATA.\nSDBDSLP2 L     R15,0(,R6)        GET TRANSACTION COMPLETION COUNT.\n         S     R15,0(,R8)        GET CHANGE IN TRANSACTION COUNT.\n         BNP   SDBBUKOK          NO CHANGE IN THIS BUCKET.\n         MVC   2(3,R1),=C'ALL'\n         CR    R15,R9            100%?\n         BE    SDBBUKOK          YES, SAVE A DISPLAY COLUMN.\n         M     R14,AHUNDRED\n         DR    R14,R9\n         CVD   R15,WORK          SHOW IT.\n         MVC   0(4,R1),ED3\n         ED    0(4,R1),WORK+6\n         MVI   4(R1),C'%'\nSDBBUKOK AH    R6,RCAEIDLN       POINT TO NEXT SLOT.\n         AH    R8,RCAEIDLN       POINT TO NEXT SLOT IN PREVIOUS AREA.\n         LA    R1,5(,R1)         POINT TO NEXT DISPLAY AREA.\n         BCT   R0,SDBDSLP2\n         L     R1,SPQRYPTR       POINT TO POLICY QUERY DATA AREA.\n         SLR   R9,R9\n         ICM   R9,3,RCAECLX      GET SERVICE CLASS INDEX.\n         USING SVPOLHD,R1\n         BNP   SDBCLSOK          ZERO IS INVALID.\n         CH    R9,SVPOLDCC       IS SERVICE CLASS INDEX TOO HIGH?\n         BH    SDBCLSOK          YES, CAN'T SHOW SERVICE CLASS.\n         BCTR  R9,0              CONVERT TO RELATIVE ENTRY NUMBER.\n         MH    R9,SVPOLDCL       GET OFFSET INTO CLASS ENTRIES.\n         A     R9,SVPOLDCO       ADD OFFSET OF FIRST CLASS ENTRY.\n         DROP  R1                SVPOLHD.\n         ALR   R1,R9             POINT TO SERVICE CLASS ENTRY.\n         USING SVPOLCD,R1\n         MVC   LL-79(8,R2),SVPOLCNM    LOAD THE SERVICE CLASS NAME.\n         DROP  R1                SVPOLCD.\nSDBCLSOK LA    R14,1\n         CH    R14,RCAEPER#      SINGLE-PERIOD CLASS?\n         BE    SDBDSTOK          YES, DO NOT SHOW PERIOD NUMBER.\n         LH    R14,RCAEPER#      GET THE NUMBER OF PERIODS FOR CLASS.\n         SR    R14,R7\n         IC    R14,HEX+1(R14)    GET PERIOD NUMBER.\n         STC   R14,LL-70(,R2)    SHOW IT.\nSDBDSTOK TR    LL-79(DMDL,R2),XLATETBL\n         MVI   LL-69(R2),X'24'   GREEN FOR NOT LONGER THAN GOAL.\n         MVI   LL-40(R2),X'22'   RED FOR LONGER THAN GOAL.\n         BAS   R14,SSPCLINE      LINE NOW COMPLETE.\nSNXDBPER A     R5,RCAEINXP       POINT TO NEXT PERIOD'S DATA.\n         BCT   R7,SDBPERLP       PROCESS NEXT PERIOD.\n         L     R1,SSRVCNTR       GET REMAINING CLASS COUNT.\n         AH    R4,RCAASCAL       POINT TO NEXT CLASS'S DATA.\n         BCT   R1,SSCLDBLP       PROCESS NEXT CLASS.\n         DROP  R5,R4             RCAEIHDR, RCAE.\n         LR    R1,R2             GET BUFFER POINTER.\n         AHI   R1,-DMLL          POINT TO PREVIOUS LINE.\n         MVI   2(R1),X'F4'       UNDERSCORE FOR SEPARATION.\n         SPACE\n         ICM   R0,15,SELAPSED    SENSIBLE ELAPSED TIME?\n         BNP   SSUDONE           NO, SKIP FURTHER DISPLAY.\n         USING SSULINE,R2\n         MVC   SSUENTRY,MEDX     SUPPLY HEADING ATTRIBUTES.\n         MVC   SSUCLS(35),=C'SERVICE ABSORPTION AND PAGING RATES'\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         MVC   SSUENTRY,HIGHX    SUPPLY HEADING ATTRIBUTES.\n         MVC   SSUCLS(79),HEADSRES\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         LH    R1,RCAASCA#       GET NUMBER OF SERVICE CLASS ENTRIES.\n         L     R4,RCAASCOF       GET OFFSET TO SERVICE CLASS ENTRIES.\n         AR    R4,R3             POINT TO SERVICE CLASS ENTRIES.\n         USING RCAE,R4\nSSCLSULP ST    R1,SSRVCNTR       SAVE SERVICES CLASSES TO GO.\n         LH    R7,RCAEPER#       GET THE NUMBER OF PERIODS FOR CLASS.\n         L     R5,RCAEPERO       GET OFFSET TO PERIOD DATA.\n         AR    R5,R4             POINT TO PERIOD DATA.\n         USING RCAEIHDR,R5\nSSUPERLP ICM   R6,15,RCAEIROF    GET RESOURCE DATA OFFSET.\n         BZ    SNXSUPER          NO RESOURCE DATA FOR PERIOD.\n         AR    R6,R5             POINT TO RESOURCE DATA.\nSNRES    USING RCAERESC,R6\n         LR    R8,R6             COPY RESOURCE DATA ADDRESS.\n         SR    R8,R3             GET OFFSET INTO THIS AREA.\n         A     R8,SCOLLPTR       POINT TO PREVIOUS COLLECTION DATA.\nSORES    USING RCAERESC,R8\n         CLC   SNRES.RCAESRV,SORES.RCAESRV\n         BE    SNXSUPER          SKIP PERIOD WITH NO ACTIVITY.\n         LM    R14,R15,SNRES.RCAESRV\n         SL    R15,SORES.RCAESRV2\n         BC    3,SSUSLHI1\n         BCTR  R14,0             BORROW.\nSSUSLHI1 SL    R14,SORES.RCAESRV1\n         L     R0,SELAPSED\n         M     R14,ONEGRAND      WANT SERVICE UNITS PER SECOND.\n         SRL   R0,1\n         CLR   R14,R0\n         BNL   SNXSUPER          SKIP PERIOD WITH TOO MUCH ACTIVITY.\n         D     R14,SELAPSED\n         CVD   R15,WORK\n         MVC   SSURATE,ED7\n         ED    SSURATE,WORK+4\n*                                TCB CPU UTILISATION PERCENTAGE.\n         L     R1,SPQRYPTR       POINT TO WLM POLICY AREA.\n         USING SVPOLHD,R1\n         L     R9,SVPOLDPO       GET OFFSET TO POLICY DEFINITION.\n         ALR   R9,R1             POINT TO POLICY DEFINITION SECTION.\n         USING SVPOLSP,R9\n         ICM   R9,15,SVPOLCPU    GET CPU COEFFICIENT TIMES 10,000.\n         DROP  R9,R1             SVPOLSP, SVPOLHD.\n         BNP   SDONETCB\n         LA    R1,RCAECPU-RCAERESC\n         LA    R15,SSUTCB        POINT TO DISPLAY AREA.\n         BAS   R14,SCPUBFMT      FORMAT CPU PERCENTAGE.\nSDONETCB DS    0H\n*                                SRB CPU UTILISATION PERCENTAGE.\n         L     R1,SPQRYPTR       POINT TO WLM POLICY AREA.\n         USING SVPOLHD,R1\n         L     R9,SVPOLDPO       GET OFFSET TO POLICY DEFINITION.\n         ALR   R9,R1             POINT TO POLICY DEFINITION SECTION.\n         USING SVPOLSP,R9\n         ICM   R9,15,SVPOLSRB    GET SRB COEFFICIENT TIMES 10,000.\n         DROP  R9,R1             SVPOLSP, SVPOLHD.\n         BNP   SDONESRB\n         LA    R1,RCAESRB-RCAERESC\n         LA    R15,SSUSRB        POINT TO DISPLAY AREA.\n         BAS   R14,SCPUBFMT      FORMAT CPU PERCENTAGE.\nSDONESRB DS    0H\n*                                TOTAL PAGE-INS RATE.\n         LA    R1,RCAEPIR-RCAERESC\n         LA    R15,SSUPIR        POINT TO DISPLAY AREA.\n         BAS   R14,SPGRTFMT      FORMAT PAGE-IN RATE.\n*                                HIPERSPACE PAGE-INS RATE.\n         LA    R1,RCAEHSP-RCAERESC\n         LA    R15,SSUHSP        POINT TO DISPLAY AREA.\n         BAS   R14,SPGRTFMT      FORMAT PAGE-IN RATE.\n*                                AUX BLOCK PAGE-INS RATE.\n         LA    R1,RCAEBPIR-RCAERESC\n         LA    R15,SSUBPIR       POINT TO DISPLAY AREA.\n         BAS   R14,SPGRTFMT      FORMAT PAGE-IN RATE.\n*                                EXPANDED PAGE-INS RATE.\n         LA    R1,RCAEPIE-RCAERESC\n         LA    R15,SSUPIE        POINT TO DISPLAY AREA.\n         BAS   R14,SPGRTFMT      FORMAT PAGE-IN RATE.\n*                                BLOCK EXPANDED PAGE-INS RATE.\n         LA    R1,RCAEBPIE-RCAERESC\n         LA    R15,SSUBPIE       POINT TO DISPLAY AREA.\n         BAS   R14,SPGRTFMT      FORMAT PAGE-IN RATE.\n*                                TOTAL AUX BLOCK PAGE-IN RATE.\n         LA    R1,RCAEBKIA-RCAERESC\n         LA    R15,SSUBKIA       POINT TO DISPLAY AREA.\n         BAS   R14,SPGRTFMT      FORMAT PAGE-IN RATE.\n*                                TOTAL EXP BLOCK PAGE-IN RATE.\n         LA    R1,RCAEBKIE-RCAERESC\n         LA    R15,SSUBKIE       POINT TO DISPLAY AREA.\n         BAS   R14,SPGRTFMT      FORMAT PAGE-IN RATE.\n*                                TOTAL SWAP RATE.\n         L     R15,SNRES.RCAESWC GET NEW SWAP COUNT.\n         L     R14,SORES.RCAESWC GET OLD SWAP COUNT.\n         SR    R15,R14           GET CHANGE IN SWAP COUNT.\n         BNP   SSUSWPOK          NO NEW SWAPS DONE.\n         M     R14,TENGRAND\n         D     R14,SELAPSED      GET SWAPS PER 10 SECONDS.\n         CVD   R15,WORK\n         MVC   SSUSWP,=X'40202021204B20'\n         ED    SSUSWP,WORK+5\nSSUSWPOK DS    0H\n         DROP  SNRES,SORES       RCAERESC.\n         L     R1,SPQRYPTR       POINT TO POLICY QUERY DATA AREA.\n         SLR   R9,R9\n         ICM   R9,3,RCAECLX      GET SERVICE CLASS INDEX.\n         USING SVPOLHD,R1\n         BNP   SSUCLSOK          ZERO IS INVALID.\n         CH    R9,SVPOLDCC       IS SERVICE CLASS INDEX TOO HIGH?\n         BH    SSUCLSOK          YES, CAN'T SHOW SERVICE CLASS.\n         BCTR  R9,0              CONVERT TO RELATIVE ENTRY NUMBER.\n         MH    R9,SVPOLDCL       GET OFFSET INTO CLASS ENTRIES.\n         A     R9,SVPOLDCO       ADD OFFSET OF FIRST CLASS ENTRY.\n         ALR   R9,R1             POINT TO SERVICE CLASS ENTRY.\n         USING SVPOLCD,R9\n         MVC   SSUCLS,SVPOLCNM   LOAD THE SERVICE CLASS NAME.\nSSUCLSOK LA    R14,1\n         SLR   R6,R6\n         CH    R14,RCAEPER#      SINGLE-PERIOD CLASS?\n         BE    SSUPEROK          YES, DO NOT SHOW PERIOD NUMBER.\n         LH    R14,RCAEPER#      GET THE NUMBER OF PERIODS FOR CLASS.\n         SR    R14,R7\n         LR    R6,R14\n         IC    R14,HEX+1(R14)    GET PERIOD NUMBER.\n         STC   R14,SSUPER        SHOW IT.\n         MH    R6,SVPOLDZL\nSSUPEROK AL    R6,SVPOLCPO       GET PERIOD'S ENTRY OFFSET.\n         ALR   R6,R9             POINT TO PERIOD'S ENTRY.\n         USING SVPOLPD,R6\n         ICM   R0,1,SVPOLIMP+1   GET PERIOD IMPORTANCE LEVEL.\n         BZ    SSUIMPOK          SUPPRESS DISPLAY OF ZERO.\n         STC   R0,SSUIMP         SHOW IT.\n         NI    SSUIMP,X'0F'\n         TR    SSUIMP,HEX\n         DROP  R6,R9,R1          SVPOLPD, SVPOLCD, SVPOLHD.\nSSUIMPOK TR    LL-79(DMDL,R2),XLATETBL\n         MVI   SSUIMP-1,X'27'    WHITE FOR IMPORTANCE AND ABSORPTION.\n         MVI   SSUTCB,X'24'      GREEN FOR TCB USAGE.\n         MVI   SSUSRB,X'26'      YELLOW FOR SRB USAGE.\n         MVI   SSUSRB+L'SSUSRB,X'25'\n         BAS   R14,SSPCLINE      LINE NOW COMPLETE.\nSNXSUPER A     R5,RCAEINXP       POINT TO NEXT PERIOD'S DATA.\n         BCT   R7,SSUPERLP       PROCESS NEXT PERIOD.\n         L     R1,SSRVCNTR       GET REMAINING CLASS COUNT.\n         AH    R4,RCAASCAL       POINT TO NEXT CLASS'S DATA.\n         BCT   R1,SSCLSULP       PROCESS NEXT CLASS.\n         DROP  R5,R4,R2          RCAEIHDR, RCAE, SSULINE.\n         LR    R1,R2             GET BUFFER POINTER.\n         AHI   R1,-DMLL          POINT TO PREVIOUS LINE.\n         MVI   2(R1),X'F4'       UNDERSCORE FOR SEPARATION.\n         SPACE\n         USING SIOLINE,R2\nSSUDONE  MVC   SIOENTRY,MEDX     SUPPLY HEADING ATTRIBUTES.\n         MVC   SIOCLS(21),=C'DASD ACTIVITY SUMMARY'\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         MVC   SIOENTRY,HIGHX    SUPPLY HEADING ATTRIBUTES.\n         MVC   SIOCLS(79),HEADSIOS\n         BAS   R14,SADDLINE      LINE NOW COMPLETE.\n         LH    R1,RCAASCA#       GET NUMBER OF SERVICE CLASS ENTRIES.\n         L     R4,RCAASCOF       GET OFFSET TO SERVICE CLASS ENTRIES.\n         AR    R4,R3             POINT TO SERVICE CLASS ENTRIES.\n         USING RCAE,R4\nSSCLIOLP ST    R1,SSRVCNTR       SAVE SERVICES CLASSES TO GO.\n         LH    R7,RCAEPER#       GET THE NUMBER OF PERIODS FOR CLASS.\n         L     R5,RCAEPERO       GET OFFSET TO PERIOD DATA.\n         AR    R5,R4             POINT TO PERIOD DATA.\n         USING RCAEIHDR,R5\nSIOPERLP ICM   R6,15,RCAEIROF    GET RESOURCE DATA OFFSET.\n         BZ    SNXIOPER          NO RESOURCE DATA FOR PERIOD.\n         AR    R6,R5             POINT TO RESOURCE DATA.\nSNRS2    USING RCAERESC,R6\n         LR    R8,R6             COPY RESOURCE DATA ADDRESS.\n         SR    R8,R3             GET OFFSET INTO THIS AREA.\n         A     R8,SCOLLPTR       POINT TO PREVIOUS COLLECTION DATA.\nSORS2    USING RCAERESC,R8\n*                                I/O RATE.\n         L     R15,SNRS2.RCAEIORC\n         S     R15,SORS2.RCAEIORC\n         LTR   R15,R15           ANY I/O?\n         BNP   SNXIOPER          NO, SKIP PERIOD.\n         ST    R15,SIODELTA      SAVE I/O COUNT CHANGE FOR PERIOD.\n         L     R0,SELAPSED\n         M     R14,TENGRAND\n         SRL   R0,1\n         CLR   R14,R0\n         BNL   SIORATED\n         D     R14,SELAPSED      GET I/O RATE.\n         CVD   R15,WORK          SHOW I/O RATE.\n         MVC   SIORATE,=X'40202021204B20'\n         ED    SIORATE,WORK+5\nSIORATED DS    0H                CONNECT TIME PER I/O.\n         LA    R1,RCAEIOCT-RCAERESC\n         LA    R15,SIOCONN       POINT TO DISPLAY AREA.\n         BAS   R14,SFMTIOTM      FORMAT TIME PER I/O.\n*                                DISCCONNECT TIME PER I/O.\n         LA    R1,RCAEIODT-RCAERESC\n         LA    R15,SIODISC       POINT TO DISPLAY AREA.\n         BAS   R14,SFMTIOTM      FORMAT TIME PER I/O.\n*                                WAIT (QUEUE+PENDING) TIME PER I/O.\n         LA    R1,RCAEIOWT-RCAERESC\n         LA    R15,SIOWAIT       POINT TO DISPLAY AREA.\n         BAS   R14,SFMTIOTM      FORMAT TIME PER I/O.\n*                                IOS QUEUE TIME PER I/O.\n         TM    OSLEVEL+2,CVTOS390_R4\n         BNO   SIOSQOK           IOSQ FIELD NOT PRESENT.\n         LA    R1,RCAEIOST-RCAERESC\n         LA    R15,SIOIOSQ       POINT TO DISPLAY AREA.\n         BAS   R14,SFMTIOTM      FORMAT TIME PER I/O.\n         DROP  SNRS2,SORS2       RCAERESC.\nSIOSQOK  DS    0H\n         SPACE\n         L     R1,SPQRYPTR       POINT TO POLICY QUERY DATA AREA.\n         SLR   R9,R9\n         ICM   R9,3,RCAECLX      GET SERVICE CLASS INDEX.\n         USING SVPOLHD,R1\n         BNP   SIOCLSOK          ZERO IS INVALID.\n         CH    R9,SVPOLDCC       IS SERVICE CLASS INDEX TOO HIGH?\n         BH    SIOCLSOK          YES, CAN'T SHOW SERVICE CLASS.\n         BCTR  R9,0              CONVERT TO RELATIVE ENTRY NUMBER.\n         MH    R9,SVPOLDCL       GET OFFSET INTO CLASS ENTRIES.\n         A     R9,SVPOLDCO       ADD OFFSET OF FIRST CLASS ENTRY.\n         ALR   R9,R1             POINT TO SERVICE CLASS ENTRY.\n         USING SVPOLCD,R9\n         MVC   SIOCLS,SVPOLCNM   LOAD THE SERVICE CLASS NAME.\n         DROP  R9,R1             SVPOLCD, SVPOLHD.\nSIOCLSOK LA    R14,1\n         SLR   R6,R6\n         CH    R14,RCAEPER#      SINGLE-PERIOD CLASS?\n         BE    SIOPEROK          YES, DO NOT SHOW PERIOD NUMBER.\n         LH    R14,RCAEPER#      GET THE NUMBER OF PERIODS FOR CLASS.\n         SR    R14,R7\n         LR    R6,R14\n         IC    R14,HEX+1(R14)    GET PERIOD NUMBER.\n         STC   R14,SIOPER        SHOW IT.\nSIOPEROK TR    LL-79(DMDL,R2),XLATETBL\n         MVI   SIORATE,X'27'     WHITE FOR I/O RATE.\n         MVI   SIOCONN,X'25'     TURQUOISE FOR CONNECT TIME.\n         MVI   SIODISC,X'26'     YELLOW FOR DISCONNECT TIME.\n         MVI   SIOWAIT,X'22'     RED FOR DELAYS.\n         MVI   SIOREST,X'25'\n         BAS   R14,SSPCLINE      LINE NOW COMPLETE.\nSNXIOPER A     R5,RCAEINXP       POINT TO NEXT PERIOD'S DATA.\n         BCT   R7,SIOPERLP       PROCESS NEXT PERIOD.\n         L     R1,SSRVCNTR       GET REMAINING CLASS COUNT.\n         AH    R4,RCAASCAL       POINT TO NEXT CLASS'S DATA.\n         BCT   R1,SSCLIOLP       PROCESS NEXT CLASS.\n         DROP  R5,R4,R3,R2       RCAEIHDR, RCAE, RCAA, SIOLINE.\n         SPACE\nSSUMMARY BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNS LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    REDODMNS          YES, BRANCH TO NEW PARTE LOGIC.\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    REDODMNS          YES, START OVER.\nGIVEHLPS MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNS          GO DISPLAY HELP PANEL.\n         SPACE\nSADDLINE TR    LL-79(DMDL,R2),XLATETBL\nSSPCLINE LA    R2,DMLL(,R2)      ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNS          IF YES, THEN FORGET SUMMARY LINE.\n         MVC   0(LL-79,R2),LOWX  SUPPLY LINE ATTRIBUTES.\n         MVI   LL-79(R2),C' '    CLEAR NEXT OUTPUT LINE TO BLANKS.\n         MVC   LL-78(DMDL-1,R2),LL-79(R2)\n         BR    R14\n         DROP  R15               WNDWMNGR.\n         SPACE\nSDLAYFMT LTR   R15,R15           NON-ZERO VALUE?\n         BNPR  R14               NO, SUPPRESS DISPLAY OF 0.0.\n         ST    R14,WORK          SAVE RETURN ADDRESS.\n         M     R14,ONEGRAND      SCALE FOR PERMILLAGE.\n         D     R14,SSAMPDEN      GET FRACTION OF TIME.\n         L     R14,WORK          RESTORE RETURN ADDRESS.\n         CVD   R15,WORK\n         C     R15,AHUNDRED      AT LEAST TEN PERCENT?\n         BL    SDLAYSML          NO, SHOW A DECIMAL POINT.\n         SRP   WORK,64-1,0       YES, DIVIDE BY TEN.\n         MVC   0(4,R1),ED3\n         ED    0(4,R1),WORK+6\n         BR    R14\nSDLAYSML MVC   0(4,R1),=X'40212020'\n         ED    0(4,R1),WORK+6\n         MVC   0(2,R1),1(R1)\n         MVI   2(R1),C'.'\n         BR    R14\n         SPACE\nSCPUBFMT STM   R14,R12,12(R13)\n         AR    R6,R1             POINT TO NEW COUNTER.\n         AR    R8,R1             POINT TO OLD COUNTER.\n         CLC   0(8,R6),0(R8)     IS NEW COUNTER BIGGER?\n         BNH   SCPUEXIT          NO, COUNTER UNCHANGED SO SKIP IT.\n         LR    R2,R15            POINT TO DISPLAY AREA.\n         LM    R14,R15,0(R6)     GET NEW COUNTER.\n         LM    R0,R1,0(R8)       GET OLD COUNTER.\n         CLR   R15,R1\n         BNL   SCPUBORO\n         BCTR  R14,0             BORROW.\nSCPUBORO SLR   R15,R1\n         SLR   R14,R0\n         MVI   1(R2),C'>'\n         MVC   2(3,R2),1(R2)     SHOW OVERFLOW.\n         LTR   R14,R14           TOO BIG TOO HANDLE?\n         BNZ   SCPUEXIT          YES.\n         L     1,RMCTADDR        POINT TO THE RMCT.\n         M     R14,64(,R1)       MULTIPLY BY RMCTADJC.\n         SRDL  R14,4             DIVIDE BY SIXTEEN.\n         LTR   R14,R14           TOO BIG TOO HANDLE?\n         BNZ   SCPUEXIT          YES.\n         M     R14,TENGRAND\n         LR    R0,R9             GET COEFFICIENT BY 10,000.\n         SRL   R0,1              HALVE IT.\n         CR    R14,R0            TOO BIG TO HANDLE?\n         BNL   SCPUEXIT          YES.\n         DR    R14,R9            GET CPU MICROSECONDS USED.\n         SLR   R14,R14\n         D     R14,SELAPSED      GET CPU PERMILLAGE.\n         L     R9,CVTPTR(,0)     POINT TO THE CVT.\n         L     R9,660(,R9)       POINT TO COMMON SYSTEM DATA AREA.\n         LH    R0,10(,R9)        GET ALIVE CPU COUNT.\n         SLR   R14,R14\n         DR    R14,R0            SCALE TO CAPACITY OF WHOLE BOX.\n         CVD   R15,WORK\n         MVC   0(5,R2),ED2PNT1\n         ED    0(5,R2),WORK+6\nSCPUEXIT LM    R14,R12,12(R13)\n         BR    R14\n         SPACE\nSPGRTFMT STM   R14,R12,12(R13)\n         AR    R6,R1             POINT TO NEW COUNTER.\n         AR    R8,R1             POINT TO OLD COUNTER.\n         CLC   0(8,R6),0(R8)     IS NEW COUNTER BIGGER?\n         BNH   SPGREXIT          NO, COUNTER UNCHANGED SO SKIP IT.\n         LR    R2,R15            POINT TO DISPLAY AREA.\n         LM    R14,R15,0(R6)     GET NEW COUNTER.\n         LM    R0,R1,0(R8)       GET OLD COUNTER.\n         CLR   R15,R1\n         BNL   SPGRBORO\n         BCTR  R14,0             BORROW.\nSPGRBORO SLR   R15,R1\n         SLR   R14,R0\n         MVI   1(R2),C'>'\n         MVC   2(2,R2),1(R2)     SHOW OVERFLOW.\n         LTR   R14,R14           TOO BIG TOO HANDLE?\n         BNZ   SPGREXIT          YES.\n         M     R14,ONEGRAND      PREPARE FOR RATE PER SECOND.\n         L     R0,SELAPSED       GET ELAPSED TIME.\n         SRL   R0,1              HALVE IT.\n         CLR   R14,R0            TO BIG TO HANDLE DIVIDE?\n         BNL   SPGREXIT          YES.\n         D     R14,SELAPSED      GET PAGE-INS PER MILLISECOND.\n         CVD   R15,WORK\n         MVC   1(4,R2),ED3\n         ED    1(4,R2),WORK+6\nSPGREXIT LM    R14,R12,12(R13)\n         BR    R14\n         SPACE\nSFMTIOTM STM   R14,R12,12(R13)\n         AR    R6,R1             POINT TO NEW COUNTER.\n         AR    R8,R1             POINT TO OLD COUNTER.\n         LR    R2,R15            POINT TO DISPLAY AREA.\n         LM    R14,R15,0(R6)     GET NEW COUNTER.\n         LM    R0,R1,0(R8)       GET OLD COUNTER.\n         CLC   0(8,R6),0(R8)     IS NEW COUNTER SMALLER?\n         BE    SFMTEXIT          NO, COUNTER UNCHANGED SO SKIP IT.\n         BH    SFMTCTOK          NO, BIGGER SO PROCEED.\n         LM    R14,R15,0(R8)     GET OLD COUNTER.\n         LM    R0,R1,0(R6)       GET NEW COUNTER.\nSFMTCTOK CLR   R15,R1\n         BNL   SFMTBORO\n         BCTR  R14,0             BORROW.\nSFMTBORO SLR   R15,R1\n         SLR   R14,R0\n         SLDL  R14,7             BY 128 TO CONVERT TO MICROSECONDS.\n         L     R0,SIODELTA       GET I/O COUNT.\n         SRL   R0,1              HALVE IT.\n         MVI   1(R2),C'>'\n         MVC   2(5,R2),1(R2)     SHOW OVERFLOW.\n         CLR   R14,R0            TO BIG TO HANDLE DIVIDE?\n         BNL   SFMTEXIT          YES.\n         D     R14,SIODELTA      GET MICROSECONDS PER I/O.\n         CVD   R15,WORK          SHOW CONNECT TIME PER I/O.\n         SRP   WORK,64-2,5       GET 10*MILLISECONDS PER I/O.\n         MVC   0(7,R2),=X'40202021204B20'\n         ED    0(7,R2),WORK+5\nSFMTEXIT LM    R14,R12,12(R13)\n         BR    R14\n         SPACE\n         DROP  R11,R10           DOMAINS.\n         TITLE 'DOMAIN MONITOR - VARIABLES AND CONSTANTS'\nSANSTOKN DC    D'0'              WLM POLICY TOKEN.\nSPQRYLEN DC    F'4096'  \\______  POLICY QUERY AREA LENGTH.\nSPQRYPTR DC    A(0)     /        POLICY QUERY AREA POINTER.\nSPQRETLN DC    F'0'              RETURNED AREA SIZE REQUIREMENT.\n         IWMPQRY MF=(L,SPQRYLST) POLICY QUERY PARAMETER LIST.\nSCOLLLEN DC    F'24576' \\______  POLICY QUERY AREA LENGTH.\nSCOLLPTR DC    A(0)     /        POLICY QUERY AREA POINTER.\nSCOLLPT2 DC    A(0)              POLICY QUERY AREA POINTER.\nSCOLLMIN DC    F'0'              RETURNED AREA SIZE REQUIREMENT.\nSCOLLMAX DC    F'0'              RETURNED AREA SIZE REQUIREMENT.\n         IWMRCOLL MF=(L,SCOLLST) COLLECTION SERVICE PARAMETER LIST.\nSSRVCNTR DC    F'0'\nSELAPSED DC    F'0'\nSSAMPLES DC    F'0'\nSSAMPDEN DC    F'0'\nSIODELTA DC    F'0'\nSWAPTIME DC    F'0'\nTOTLSWAP DC    F'0'\nLOGSWAP  DC    F'0'\nTGETSWAP DC    F'0'\nTPUTSWAP DC    F'0'\nDMNTOTLS DS    0CL28\nCMPLTOTL DC    F'0'\nRUATOTAL DC    F'0'\nMXRUTOTL DC    F'0'\nINCTOTL  DC    F'0'\nNSWTOTL  DC    F'0'\nOUTUTOTL DC    F'0'\nACUMTOTL DC    F'0'\nDMDTSIZE DC    H'64'\nSRTUNITS DC    X'404094A2A24094408840' C'  MSS M H '\nIPSPARMS DC    CL12' '\nIPSLABEL DC    C'IPS=IEAIPS'\nDMNIPSID DC    C'??'\n         DC    C'    CPU='\nCPUCOEFF DC    CL4' '\n         DC    C'   IOC='\nIOCCOEFF DC    CL4' '\n         DC    C'   MSO='\nMSOCOEFF DC    CL4' '\n         DC    C'   SRB='\nSRBCOEFF DC    CL4' '\n         DC    CL10' '\nSWPRTHDR DC    C'   SWAP RATES:   TOTAL'\nTOTSWPRT DC    C' ??.?'\n         DC    C'   PHYS'\nPHYSWPRT DC    C' ??.?'\n         DC    C'   LOG'\nLOGSWPRT DC    C' ??.?'\n         DC    C'   TGET'\nTGTSWPRT DC    C' ??.?'\n         DC    C'   TPUT'\nTPTSWPRT DC    C' ??.?'\n         DC    CL5' '\nHEADINGS DC    CL79' DMN MIN MAX MPLI MPLO CMPL RUA MXRU INC NSW OUTU  +\n                TWSR CONTN-IDX ACCUM-SRV   '\nHEADWLMS DC    C'            SERVICE CLASS PERFORMANCE SINCE '\nHEADWSDT DC    C'YYYY-MM-DD'\n         DC    C' '\nHEADWSTM DC    C'HH:MM:SS.SS'\n         DC    C'             '\nHEADSVEL DC    CL79'SRVCLASS P GOAL VEL CPU I/O CPWT IOWT CCAP SWAP AUX+\n                UNKN IDLE                  '\nHEADSRTS EQU   *,79\n         DC    C'SRVCLASS P TRANSACT-CT TRN-RT AVGRESP('\n         DC    X'94A2',C') AVGEXEC(',X'94A2'\n         DC    C')  GOAL             DUR(SU)'\nHEADSRES DC    CL79'SRVCLASS P I SU-RATE TCB% SRB%  PIR  HSP BPIR  PIE +\n               BPIE BKIA BKIE SWAPRT       '\nHEADSIOS DC    CL79'SRVCLASS P DAIO/S DACONN DADISC DAWAIT DAIOSQ (TIME+\n               S IN MILLISECONDS PER I/O)  '\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMPXASPY": {"ttr": 21252, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x1f\\x17\\x00\\x06\\x00\\x88\\x07\\x8f\\x01\\x08\\x10\\x7f\"\\x13\\x04\\xc3\\x03\\x87\\x01\\xc1\\xc9\\xd5\\xe3\\xe3\\xf0\\xf3\\xf0@@@'", "ispf": {"version": "31.23", "flags": 0, "createdate": "1988-03-18T00:00:00", "modifydate": "2008-04-16T22:13:06", "lines": 1219, "newlines": 903, "modlines": 449, "user": "INTT030"}, "text": "         TITLE 'S P Y --  MVS CONSOLE SPY PROGRAM  --  VERSION 2.5'\n***********************************************************************\n*                                                                     *\n*                                 S P Y                               *\n*                                                                     *\n*                               22/05/79                              *\n*                                                                     *\n*                       OPERATOR CONSOLE MONITOR                      *\n*                                                                     *\n*     THIS PROGRAM DISPLAYS ALL ACTIVE OPERATORS CONSOLES ON          *\n*     A 3270 TSO TERMINAL. SINCE THIS BUFFER CAN BE 35 LINES LONG,    *\n*     IT MUST BE DISPLAYED IN TWO 'PAGES'. VARIOUS CONTROL            *\n*     COMMANDS ARE AVAILABLE AND ARE DESCRIBED BELOW.                 *\n*                                                                     *\n*     COMMAND      DESCRIPTION                                        *\n*                                                                     *\n*        ?         DISPLAYS HELP FOR SPY                              *\n*        Z         END; END THE PROGRAM                               *\n*        Wnn       AUTOMATICALLY REFRESH THE SCREEN                   *\n*                  nn TIMES, THEN RETURN TO NORMAL MODE.              *\n*                  IF nn IS NOT ENTERED, 30 ITERATIONS IS ASSUMED.    *\n*                  IF NN = 0, TIMER WILL CONTINUE UNTIL INTERRUPT     *\n*                  IS PRESSED.                                        *\n*        Cnn       SWITCH DISPLAY TO SYSTEM CONSOLE nn                *\n*                  IF nn IS NOT A VALID CONSOLE, '1' IS ASSUMED       *\n*        Dnn       SET DELAY TIME BETWEEN REFRESHES TO nn TENTHS      *\n*                  OF A SECOND.                                       *\n*        Knn       ISSUE DELETE OPERATOR MESSAGE (DOM) FOR MESSAGE    *\n*                  ON LINE NO. nn OF THIS CONSOLE.  (OF COURSE, THIS  *\n*                  MESSAGE WILL REVERT TO LOW INTENSITY ON ALL        *\n*                  CONSOLES ON WHICH IT APPEARS.) (USER MUST BE A VIP)*\n*                  (NOTE THAT /K E,nn IS \"INVALID FROM SUBSYSTEM      *\n*                  CONSOLE\".)                                         *\n*        N         NOTIFY OPERATOR VIA ACTION MESSAGE (FOR VIPS)      *\n*                                                                     *\n*     PROGRAM FUNCTION KEY SUPPORT ADDED 08/10/82 WITH EXTRA HELP.    *\n*                                                                     *\n*     TERMINAL (IF APF AUTH), USERID, DATE AND TIME ADDED 26/08/83.   *\n*                                                                     *\n*     HITTING THE ATTENTION KEY WHILE IN TIMER MODE WILL CAUSE        *\n*     THE TIMER TO BE RESET TO ZERO AND WAIT MODE TERMINATED.         *\n*                                                                     *\n*     SPY GIVES A TSO USER THE CAPABILITY TO ENTER SYSTEM AND JES     *\n*     OPERATOR COMMANDS. THIS FACILITY IS PROTECTED BY A SIMPLE       *\n*     3 CHARACTER PASSWORD (IN VARIABLE VIPWORD) TO PREVENT YOU       *\n*     FROM ACCIDENTALLY ENTERING AN OPERATOR COMMAND. THE SYNTAX IS   *\n*                                                                     *\n*     JES COMMAND:  $...  ANY JES2 COMMAND ...                        *\n*     OPER COMMAND: /...  ANY OPER COMMAND ...                        *\n*                                                                     *\n*     TYPING THE 3-LETTER VIP PASSWORD 'TOGGLES' THE VIP FLAG.        *\n*     THE AUTHORIZATION LEVEL OF COMMANDS YOU CAN ISSUE DEPENDS ON    *\n*     HOW YOUR INSTALLATION HAS SYSGENED ITS INTERNAL READERS.        *\n*     ACCOUNT AUTHORIZED USERS DEFAULT TO VIP MODE UPON ENTRY.        *\n*     THIS FACILITY WORKS BY DYNAMICALLY ALLOCATING AN INTERNAL       *\n*     READER AND THROWING THE COMMAND THROUGH IT.                     *\n*                                                                     *\n*     MODIFIED ON 11/10/82 BY GP@SECV SO THAT WHEN AUTHORIZED,        *\n*     COMMANDS ARE ISSUED THROUGH SVC 34 WHICH IS FASTER THAN INTRDR. *\n*     MODIFIED ON 27/05/83 BY GP@SECV SO THAT WHEN NOT AUTHORIZED,    *\n*     COMMANDS ARE ISSUED THROUGH SVC 241 WHICH ISSUES SVC 34.        *\n*     MODIFIED ON 09/08/84 BY GP@SECV SO THAT SYSPARM CAN BE USED     *\n*     TO DETERMINE UNAUTHORIZED COMMAND ISSUING MODE.                 *\n*     MODIFIED ON 17/02/86 BY GP@SECV SO USER SVC 213 WHICH FLIPS     *\n*     JSCBAUTH BIT IS USED, ALLOWING NORMAL SVC 34 PROCESSING.        *\n*     LINK TO SWAP REMOVED.                                           *\n*                                                                     *\n*     IMPXASPY: COPIED FROM THE FAMOUS SPY PROGRAM.  NOW LOADED       *\n*     INTO CSA BY AND CALLED FROM IMP/XA.  REMOVED SUPPORT FOR 3066   *\n*     INTEGRATED CONSOLES AND TSO HARDCOPY TERMINALS.  NOW ONLY       *\n*     SUPPORT 3270 TSO SCREENS SPYING ON 3270 CONSOLES.  PFK USAGE    *\n*     NOW CHANGED TO BE CONSISTENT WITH IMP/XA.  TGET NOWAIT          *\n*     PROCESSING WITH REFRESH-ONLY-IF-UPDATED LOGIC ADDED.  NON-APF   *\n*     SUPPORT (USERSVC/INTRDR) HAS BEEN DROPPED.  XMS CODE ADDED      *\n*     FOR CONSOLE ADDRESS SPACE.  IMPXASPY IS NOT REALLY RE-ENTRANT   *\n*     BUT MUST BE LINK-EDITED AS SUCH.  LOGGING OF \"N\" COMMAND        *\n*     NOW SUPPRESSED BUT ADDED \"B\" COMMAND.  DELETED \"D\", \"W\", \"1\"    *\n*     AND \"2\" COMMANDS.  AOF (#) COMMANDS ALSO DROPPED FOR MVS.       *\n*     LATEST OS SUPPORT IS MVS/SP VERSIONS 2 (XA) AND 3 (ESA).        *\n*     NOW PERFORM 3270 DATA STREAM POST-PROCESSING BASED ON CB3270.   *\n*     SP5-OS/390-SYSPLEX SUPPORT ADDED 08 JULY 1997.      GP@P6       *\n*                                                                     *\n*     THIS PROGRAM WILL PROBABLY REQUIRE BOTH THE SYS1.AMODGEN AND    *\n*     SYS1.APVTMACS MACRO LIBRARIES TO ASSEMBLE PROPERLY.             *\n*     SPY WAS DEVELOPED ON A 370/168 MVS RELEASE 3.7; IT WILL         *\n*     PROBABLY *NOT* WORK ON ANYTHING BUT MVS...                      *\n*                                                                     *\n*                        STEVE LANGLEY                                *\n*                        SOUTHERN CALIF. EDISON                       *\n*                        ROSEMEAD, CALIF   91770                      *\n*                        213-572-3521                                 *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\nIMPXASPY CSECT\n         B     28(,R15)           BRANCH AROUND EYE-CATCHER\n         DC    AL1(23)\n         DC    CL9'IMPXASPY'      IDENTIFIER\n         DC    CL9'&SYSDATE'\n         DC    CL5'&SYSTIME'\n         STM   R14,R12,12(R13)    SAVE REGISTERS\n         LR    R12,R15            R12 = ADDR OF ENTRY POINT\n         USING IMPXASPY,R12,R11   ADDRESABILITY TO CSECT\n         LA    R11,4095(R12)      R11 WILL BE\n         LA    R11,1(R11)         SECOND BASE REGISTER\n         LR    R2,R1              SAVE PARAMETER ADDRESS\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                       PROGRAM INITIALIZATION                        *\n*                                                                     *\n***********************************************************************\n         MODESET MF=(E,MDSTSUP0)                                GP@P6\n         ST    R13,SAVE+4         SAVE AREA BACKWARD POINTER\n         LA    R1,SAVE            LOAD NEW SAVE AREA ADDRESS\n         ST    R1,8(,R13)         SAVE AREA FORWARD POINTER\n         LR    R13,R1             POINT TO NEW SAVE AREA\n         STC   R0,FREEZE          COPY FREEZE MODE FLAG               *\n         STCM  R0,2,VIPFLAG       COPY COMMAND MODE FLAG              *\n         MVI   TGETFLAG,TGETFLGN  DON'T WAIT FOR INPUT                *\n         CLI   FREEZE,C'F'        REALLY FROZEN?                      *\n         BNE   FRZINIT            NO, CORRECT TGET FLAG BYTE          *\n         MVI   TGETFLAG,TGETFLGW  YES, WAIT FOR INPUT                 *\nFRZINIT  EQU   *                                                      *\n         USING PSA,0                                            GP@SECV\n         L     R1,PSATOLD         POINT TO TCB\n         USING TCB,R1\n         ICM   R1,7,TCBJSCBB      POINT TO JSCB\n         DROP  R1                 TCB\n         USING IEZJSCB,R1\n         ICM   R1,15,JSCBPSCB     POINT TO PSCB\n         BZ    INITFAIL           NOT TIME SHARING USER SO EXIT\n         DROP  R1                 JSCB\n         B     OPEROK             ************                    JUL01\n         USING PSCB,R1                                          GP@SECV\n         TM    PSCBATR1,PSCBCTRL  OPERATOR PRIVILEGED TSO USER? GP@SECV\n         BO    ACCTCHK            YES, CONTINUE                 GP@SECV\n         B     INITFAIL                                         GP@SECV\nACCTCHK  TM    PSCBATR1,PSCBACCT  ACCOUNT PRIVILEGED TSO USER?  GP@SECV\n         BNO   OPEROK             NO                            GP@SECV\n         DROP  R1                 PSCB\n         ICM   R0,15,CONSOLE      YES, BEEN HERE BEFORE?        GP@P6\n         BNZ   OPEROK             YES, LEAVE VIPFLAG ALONE      GP@P6\n         MVI   BADJUMP1+1,0       ALLOWED TO ISSUE              GP@SECV\n         MVI   BADJUMP2+1,0            AN OS RESET COMMAND      GP@SECV\n*        MVI   VIPFLAG,C'*'       AUTOMATIC VIP MODE            GP@SECV\nOPEROK   L     R1,PSAAOLD         POINT TO ASCB                 GP@SECV\n         USING ASCB,R1                                          GP@SECV\n         MVC   HOMEASID,ASCBASID  REMEMBER CURRENT ASID\n         ICM   R4,15,ASCBTSB      POINT TO TSB                  GP@SECV\n         BZ    INITFAIL           NOT TIME SHARING USER SO EXIT GP@SECV\n         DROP  R1                 ASCB\n         SPACE\n         GTSIZE\n         LTR   R0,R0              R0 = NUMBER OF LINES PER SCREEN\n         BZ    INITFAIL           HARDCOPY NO LONGER SUPPORTED\n         STH   R0,LPSCREEN        R0 = LINES PER SCREEN\n         STH   R1,CPLINE          R1 = CHARACTERS PER LINE\n         MH    R1,LPSCREEN        GET TSO SCREEN SIZE\n         STH   R1,SCRNSIZE        SAVE IT FOR LATER\n         SPACE\n         LA    R3,STAXLIST        R3 = ADDRESS OF STAX LIST MACRO\n         STAX  ATTNEXIT,MF=(E,(3)) ATTN EXIT TRAP\n*        STTMPMD ON,KEYS=ALL      TRAP PA1 AND CLEAR            GP@P6\n         ST    R2,PARMADDR        SAVE PARAMETER ADDRESS        GP@P6\n         USING TSB,R4                                           GP@SECV\n         MVC   TERMINAL,TSBTRMID  MOVE IN VTAM TERMINAL NAME    GP@SECV\n         DROP  R4                 TSB                           GP@SECV\n         L     R1,PSATOLD         FIND CURRENT TCB              GP@SECV\n         USING TCB,R1                                           GP@SECV\n         L     R1,TCBTIO          POINT TO TIOT                 GP@SECV\n         DROP  R1                 TCB                           GP@SECV\n         MVC   USERID,0(R1)       MOVE IN USERID                GP@SECV\n         SPACE 2\n         TM    PARMADDR,X'80'     \"SNAZZY\" TERMINAL?\n         BZ    INIT12BT           NO, USE 12-BIT ADDRESSING\n         LA    R1,80\n         LR    R0,R1\n         MH    R1,LPSCREEN\n         SR    R1,R0\n         STCM  R1,3,INPUTADR      POINT TO START OF LAST LINE\n         SR    R1,R0\n         STCM  R1,3,PHEADING      POINT TO START OF SECOND LAST LINE\n         SR    R1,R0\n         STCM  R1,3,CMDCNTRL      POINT TO START OF THIRD LAST LINE\n         LH    R1,CPLINE          NOW FOR ORDERS WHICH DO NOT GO\n         LR    R0,R1                  THROUGH OPT3270 - AND THEREFORE\n         MH    R1,LPSCREEN            GET RESCALED FOR WIDE SCREENS\n         SR    R1,R0\n         STCM  R1,3,DUPLCIN       POINT TO START OF LAST LINE\n         SR    R1,R0\n         STCM  R1,3,DUPLCOUT      POINT TO START OF SECOND LAST LINE\n         B     FLSCRN14\nINIT12BT MVC   CMDCNTRL,R22C1     ROW 22, COL 1\n         MVC   PHEADING,R23C1     ROW 23, COL 1\n         MVC   INPUTADR,R24C1     ROW 24, COL 1\n         CLI   LPSCREEN+1,43      3278-4?\n         BNE   MOD3CHK            NO\n         MVC   CMDCNTRL,R41C1     ROW 41, COL 1\n         MVC   PHEADING,R42C1     ROW 42, COL 1\n         MVC   INPUTADR,R43C1     ROW 43, COL 1\nMOD3CHK  CLI   LPSCREEN+1,32      3278-3?\n         BNE   FLSCREEN           NO\n         MVC   CMDCNTRL,R30C1     ROW 30, COL 1\n         MVC   PHEADING,R31C1     ROW 31, COL 1\n         MVC   INPUTADR,R32C1     ROW 32, COL 1\nFLSCREEN MVC   DUPLCOUT,PHEADING  INITIALIZE DUPLICATE DATA STREAM\n         MVC   DUPLCIN,INPUTADR\nFLSCRN14 MVC   LASPCOUT,DUPLCOUT  INITIALIZE LASP ERROR DATA STREAM\n         MVC   LASPCIN,DUPLCIN\n         LA    R1,CLR\n         CLI   LPSCREEN+1,24      MODEL-2?\n         BE    CLROK              YES, USE PRIMARY SCREEN SIZE\n         LA    R1,CLRALT          NO, USE ALTERNATE SCREEN SIZE\nCLROK    LA    R0,CLRLEN\n         ICM   R1,8,FULLSCR\n         TPUT  (1),(0),R          CLEAR THE SCREEN FOR 4-COLOUR MODE\n         MVC   REPLY,BLANKS       ERASE RESIDUAL INPUT\n         SPACE 2\n         ICM   R0,15,CONSOLE      BEEN HERE BEFORE?\n         BNZ   PARMPASS           YES, USE SAME CONSOLE ID\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *\n*                                                                     *\n***********************************************************************\n         L     R4,16              R4 = ADDR OF CVT\n         USING CVT,R4\n         L     R5,CVTSMCA         R5 = ADDR OF SMF COMMUNICATION AREA *\n         MVC   SYSID,16(R5)       COPY THE SYSTEM IDENTIFIER          *\n         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)\n         DROP  R4                 CVT\n         USING UCM,R4\n         MVC   CNSLASID,UCMCTID   COPY THE ASID OF COMMTASK      GP@P6*\n         CLI   UCMVRSN,3          MVS/SP 2.2 OR LATER?                *\n         BL    DOMSIZOK           NO, DOM TABLE ENTRY SIZE IS EIGHT   *\n         MVI   DOMESIZE+1,18      YES, ADD TEN TO SIZE                *\nDOMSIZOK DS    0H                 ESA UPGRADE 04 MAY 1989        GP@P6*\n         L     R5,UCMVEA          R5 = ADDR OF FIRST UCM ENTRY\n         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY\n         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB\n         LA    R9,UCMTABL-4(,R8)  R9 = ADDR OF END OF UCMTAB    08JUL97\n         XR    R10,R10            R10 = 0 (NUMBER OF VALID UCMS)\nUCMLOOP  ST    R5,0(R8)           SAVE UCM ADDRESS IN UCMTAB\n         LA    R10,1(,R10)        R10 = R10 + 1  (ONE MORE UCM)\n         USING UCMLIST,R5\n         TM    UCMDISP2,UCMDISPL  DEDICATED TO COMPONENT?\n         BO    NOTHERE            YES, NOT *THE* MASTER\n*****    TM    UCMDISP1,UCMDISPA  IS THIS THE MASTER CONSOLE?\n         TM    UCMDISP1,UCME_DwnLvl_MC                          APR2008\n         BZ    NOTMSTR            NO\n         ST    10,OLDCONS         YES, SAVE IT          SYSPLEX 08JUL97\n         B     ISMSTR             USE IF ACTIVE HERE    SYSPLEX 08JUL97\nNOTMSTR  ICM   R0,15,CONSOLE      GOT AN ACTIVE YET?    SYSPLEX 08JUL97\n         BNZ   NOTHERE            YES, DO NOT OVERLAY   SYSPLEX 08JUL97\nISMSTR   TM    UCMDIDCS,UCMAHERE  ACTIVE ON THIS OS?    SYSPLEX 08JUL97\n         BNO   NOTHERE            NO, DO NOT OVERLAY    SYSPLEX 08JUL97\n         ST    10,CONSOLE         YES, DEFAULT UNIT TO DISPLAY\nNOTHERE  LA    R8,4(,R8)          R8 = ADDR OF NEXT UCMTAB ENTRY\n         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?\n         BNL   UCMDONE            YES; LEAVE LOOP\n         AR    R5,R6              R5 = ADDR OF NEXT UCM ENTRY\n         CR    R5,R7              DOES R5 POINT PAST UCM ENTRIES?\n         BNH   UCMLOOP            NOPE; KEEP GOING\nUCMDONE  STH   R10,NUMUCMS        SAVE NUMBER OF UCMS FOUND\n         DROP  R4,R5              UCM, UCMLIST\n         ICM   R0,15,CONSOLE      FOUND A CONSOLE?      SYSPLEX 08JUL97\n         BZ    INITFAIL           NO, CAN'T WORK NOW    SYSPLEX 08JUL97\nPARMPASS L     R1,PARMADDR        RESTORE PARAMETER POINTER\n         MVC   TGETCNTL(46),0(R1) LOAD COMMAND INPUT FROM PARAMETER\n         B     PARSCHAR           EXAMINE PARAMETER BEFORE DISPLAY\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                            TOP OF LOOP                              *\n*              LOCATE SCREEN BUFFER AND PREPARE TO TPUT               *\n*                                                                     *\n***********************************************************************\nNEXTPAGE CLI   ATTNFLG,X'00'      WAS ATTN HIT?\n         BE    NOATTN             NO\n*                                 ATTENTION KEY HIT; PROCESS IT\n         MVI   ATTNFLG,X'00'      YES, RESET FLAG\n         STFSMODE ON,NOEDIT=YES   RESTORE VTAM FULL SCREEN MODE\nCNSLREPT LA    R1,DUPLSTRM        POINT TO REPEAT DATA STREAM\n         LA    R0,DUPLCLEN        GET DATA LENGTH\n         SH    R0,=H'80'          ADJUST LINE LENGTH  WIDE-SCRN 18NOV99\n         AH    R0,CPLINE                              WIDE-SCRN 18NOV99\nLASPERRM ICM   R1,8,FULLSCR       LOAD TPUT FULLSCREEN FLAG BYTE\n         TPUT  (1),(0),R          DISPLAY PROMPT\n         LA    R1,TGETCNTL        GET ADDRESS OF INPUT BUFFER\n         LA    R0,165             GET MAXIMUM INPUT SIZE\n         ICM   R1,8,TGETWAIT      SUPPLY TGET FLAG BYTE\n         TGET  (1),(0),R          GET 79 CHARACTERS FROM TERMINAL\n         B     TGOTSOME           PROCESS INPUT\nNOATTN   EQU   *\n         CLI   TGETCNTL,X'6D'     CLEAR BUTTON SELECTED?         GP@P6*\n         BNE   CLEAROK            NO, PROCEED                         *\n         CLI   LPSCREEN+1,24      YES, IN PRIMARY SCREEN SIZE?        *\n         BE    CLEAROK            YES, PROCEED                        *\n         LA    R1,CLRALT          NO, USE ALTERNATE SCREEN SIZE       *\n         LA    R0,CLRLEN                                              *\n         ICM   R1,8,FULLSCR                                           *\n         TPUT  (1),(0),R                                         GP@P6*\nCLEAROK  EQU   *\n         LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\n         L     R4,CONSOLE         R4 = CONSOLE TO BE DISPLAYED\n         BAS   R14,COMMTASK       PERFORM ADDRESS SPACE SWITCH\n         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?\n         BNH   GETUCM             NO, CONTINUE\n         LA    R1,1               CONSOLE NUMBER INVALID        08JUL97\n         BAS   R14,GETERMSG       LOAD ERROR MESSAGE            08JUL97\nRESETCN  L     R4,OLDCONS         RESET TO OLD CONSOLE\n         ST    R4,CONSOLE         AND SAVE IT\nGETUCM   SLL   R4,2               MULTIPLY BY 4\n         LA    R5,0(R5,R4)        R5 = ADDR OF ADDR OF UCM\n         L     R5,0(R5)           R5 = ADDR OF UCM\n         USING UCMLIST,R5\n         L     R6,UCMXB           R6 = ADDR OF RDCM\n         LTR   R6,R6              IS THIS A GRAPHICS CONSOLE?\n         BP    GRAPHICS           YES\n         LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\n         LA    R1,4               NON-GRAPHIC CONSOLE           08JUL97\n         BAS   R14,GETERMSG       LOAD ERROR MESSAGE            08JUL97\n         B     RESETCN            RESET THE CONSOLE NUMBER\n         SPACE\nDEADCNSL LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\n         LA    R1,5               INACTIVE CONSOLE              08JUL97\n         BAS   R14,GETERMSG       LOAD ERROR MESSAGE            08JUL97\n         B     RESETCN            RESET THE CONSOLE NUMBER\n         SPACE\nGRAPHICS EQU   *\n         MVC   CTYPE,BLANKS       BLANK OUT CONSOLE TYPE FIELD\n         TM    UCMDISP2,UCMDISPM  PSEUDO MASTER CONSOLE?    SP5 08JUL97\n         BNO   AUTH0              NO                        SP5 08JUL97\n         MVC   MASTER(4),=CL4'PMST' YES                     SP5 08JUL97\n*****    TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?\nAUTH0    TM    UCMDISP1,UCME_DwnLvl_MC                          APR2008\n         BNO   AUTH               NO\n         MVC   MASTER(4),=CL4'MSTR' YES\nAUTH     TM    UCMAUTHA,UCMAUTH1  IS THIS CONSOLE SYSTEM AUTHORIZED?\n         BNO   AUTH1              NO\n         MVC   SYS(3),=CL3'SYS'   YES\nAUTH1    TM    UCMAUTHA,UCMAUTH2  IS IT I/O AUTHORIZED?\n         BNO   AUTH2              NO\n         MVC   IO(3),=CL3'I/O'    YES\nAUTH2    TM    UCMAUTHA,UCMAUTH3  IS IT CONS AUTHORIZED?\n         BNO   AUTHDONE           NO\n         MVC   CONS(4),=CL4'CONS' YES\nAUTHDONE EQU   *\n         L     R7,UCMUCB          R7 = ADDR OF UCB\n         UNPK  UNIT,4(3,R7)       SHOW 4 DIGITS OF UCBCHAN  SP5 08JUL97\n         TR    UNIT(4),HEX-C'0'                             SP5 08JUL97\n         MVI   UNIT+4,C' '                                  SP5 08JUL97\n         UNPK  DEVX(3),UCMEDEVX(2)                          SP5 08JUL97\n         TR    DEVX,HEX-C'0'      SHOW DEVICE TYPE INDEX    SP5 08JUL97\n         SLR   R7,R7                                        SP5 08JUL97\n         IC    R7,UCMID           SHOW UNIQUE ENTRY ID      SP5 08JUL97\n         CVD   R7,WORK                                      SP5 08JUL97\n         MVC   DEVID,=X'40202120'                           SP5 08JUL97\n         ED    DEVID,WORK+6                                 SP5 08JUL97\n         ICM   R0,3,DEVX                                    SP5 08JUL97\n         STCM  R0,3,DEVX+1        LEAVE BLANK AFTER SYSID   SP5 08JUL97\n         MVI   DEVX,C' '                                    SP5 08JUL97\n         ICM   R7,15,0(R6)        R7 = ADDR OF TDCM (LOAD DCMADTRN)\n         BZ    DEADCNSL           CONSOLE MUST BE INACTIVE\n*****    USING STRTDCM,R7                                       GP@SECV\n         USING DCMSTRT,R7                                       APR2008\n         SPACE\n***********************************************************************\n*                                                                     *\n*                 FILLIN TRAILER AT BOTTOM OF SCREEN                  *\n*                                                                     *\n***********************************************************************\n         L     R3,CONSOLE         LOAD THE CONSOLE NUMBER\n         CVD   R3,WORK            CONVERT TO DECIMAL IN WORK\n         OI    WORK+7,X'0F'       MAKE RESULT NUMERIC CHARACTERS\n         UNPK  CONNUM,WORK+6(2)   DISPLAY CONSOLE NUMBER\n         MVC   LASTLINE(79),DCMINPUT   MOVE IN INPUT BUFFER LINE\n         MVC   MODE,VIPFLAG       LOAD VIP INDICATOR\n         SPACE 1\nFINDSCRN ICM   R8,15,DCMASCRN     R8 = ADDR OF SCREEN BUFFER\n         BZ    DEADCNSL           CONSOLE MUST BE INACTIVE\n         LA    R4,BUF             R4 = ADDR OF OUTPUT BUFFER\n         SPACE\n*        SH    R8,=H'6'           SUBTRACT THE FUDGE FACTOR     GP@SECV\n*        CLI   0(R8),X'11'        3270 SBA ORDER?               GP@SECV\n*        BE    CNSL3270           YES, LOOKING OKAY             GP@SECV\n*        SH    R8,=H'6'           SUBTRACT THE FUDGE FACTOR     GP@SECV\n         AH    R8,DCMLGNTH        POINT PAST LINE'S DATA        18NOV99\n         SH    R8,DCMCORLN        POINT TO LINE'S ORDERS        18NOV99\n         CLI   0(R8),X'11'        3270 SBA ORDER?               GP@SECV\n         BE    CNSL3270           YES, LOOKING OKAY             GP@SECV\n         MVI   TGETCNTL,X'7C'     NO, CAN'T USE OPTION \"O\"      GP@P6**\n         B     DONE               CAN'T HANDLE NON-3270               *\nCNSL3270 L     R9,DCMAWARN        POINT TO WARNING LINE               *\n         AH    R9,DCMLGNTH        POINT PAST IT                       *\n         SR    R9,R8              GET SCREEN DATA LENGTH              *\n         LR    R5,R9              COPY THE LENGTH                     *\n         CLI   TGETCNTL,0         ANY INPUT RECEIVED?                 *\n         BNE   MOVEBUFF           YES, RE-DISPLAY UNCONDITIONALLY     *\n         LH    R1,DCMMSGAL        GET NUMBER OF LINES IN MESSAGE AREA *\n         LA    R1,5(,R1)          COUNT POSSIBLE EXTRA LINES          *\n         CH    R1,LPSCREEN        COMPARE WITH TSO SCREEN LINE COUNT  *\n         BL    TESTBUFF           TSO SCREEN IS BIGGER SO NO PROBLEM  *\n         S     R9,DCMAWARN        TSO SCREEN IS NOT BIGGER SO TRIM    *\n         A     R9,DCMAINS             OFF THREE CONSOLE IMAGE LINES   *\n         LR    R5,R9              EQUATE TARGET AND SOURCE LENGTHS    *\nTESTBUFF STM   R4,R5,WORK         SAVE TARGET REGISTERS               *\n         STM   R8,R9,SCRATCH      SAVE SOURCE REGISTERS               *\n         CLCL  R4,R8              HAS ANYTHING CHANGED?               *\n         BE    NOCHANGE           NO, DON'T RE-DISPLAY                *\n         LM    R4,R5,WORK         YES, RE-LOAD TARGET REGISTERS       *\n         LM    R8,R9,SCRATCH      RE-LOAD SOURCE REGISTERS            *\nMOVEBUFF MVCL  R4,R8              MOVE CONSOLE BUFFER TO OUTPUT BUFFER*\n         L     R0,DCMDOMPK        SAVE DOM TABLE ADDRESS        GP@SECV\n         ST    R0,DOM#ADDR             FOR THIS CONSOLE         GP@SECV\n         MVC   MAXLINES,DCMMSGAL  COPY MESSAGE AREA LINE COUNT  GP@P6**\n         BAS   R14,HOMETASK       PERFORM ADDRESS SPACE SWITCH        *\n         TIME  DEC                GET DATE AND TIME             GP@SECV\n         ST    R1,WORK+4          STORE YYDDDF                  GP@SECV\n         MVC   DECDATE,=X'4021204B202020'                       GP@SECV\n         ED    DECDATE,WORK+5     EDIT DATE TO YY.DDD           GP@SECV\n         SLR   R1,R1              ERASE CONTENTS FOR SHIFT      GP@SECV\n         SRDL  R0,28              SHIFT TO CORRECT POSITION     GP@SECV\n         STM   R0,R1,WORK         STORE 0000000HHMMSSS0         GP@SECV\n         OI    WORK+7,X'0F'       ENSURE 0HHMMSSSSF             GP@SECV\n         MVC   DECTIME,=X'402120207A20207A20204B2020'           GP@SECV\n         ED    DECTIME,WORK+3     DISPLAY HH:MM:SS.SS           GP@SECV\n         MVC   0(TRAILEN,R4),TRAILER  MOVE IN TRAILER\n         DROP  R5,R7              UCMLIST, STRTDCM=DCMSTRT\n         EJECT\n***********************************************************************\n*                                                                     *\n*               DISPLAY THE OPERATORS SCREEN ON A 3270                *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R2,HEADER          R2 = ADDR OF OUTPUT STREAM\n         CLI   WCC,X'40'          NULL WCC?                     GP@P6**\n         BNE   FULLTPUT           NO, RESET AND REFRESH EVERYTHING    *\n         LH    R1,MAXLINES        GET CONSOLE MESSAGE LINE COUNT      *\n         LA    R1,4(,R1)          GET CONSOLE SCREEN LINE COUNT       *\n         CH    R1,LPSCREEN        COMPARE WITH TSO SCREEN LINE COUNT  *\n         BH    FULLTPUT           CONSOLE LARGER THAN TSO TERMINAL    *\n         LA    R4,ASINKLEN(,R4)   DON'T OVERWRITE TSO INPUT AREA      *\n         B     SIZETPUT           GO DETERMINE TPUT DATA LENGTH GP@P6**\nFULLTPUT LA    R4,TRAILEN(,R4)    POINT PAST END OF TRAILER\nSIZETPUT SR    R4,R2              R4 = LENGTH OF TPUT\n         BAS   R14,OPT3270        OPTIMIZE 3270 DATA STREAM           *\n         TPUT  (2),(4),NOEDIT,WAIT,MF=(E,TPUTNOED)                    *\n         MVC   USERLINE,BLANKS    BLANK OUT REPLY LINE          GP@SECV\n         XC    ERROR,ERROR        LEAVE NULLS FOR INSERT MODE   GP@SECV\n         B     READTERM           READ INPUT FROM TERMINAL\n         EJECT\n***********************************************************************\n*                                                       CB3270 COPIED *\n*         OPTIMIZE 3270 DATA STREAM FOR TSO TERMINAL         17/07/89 *\n*                                                            BY GP@P6 *\n***********************************************************************\nOPT3270  STM   R14,R12,12(R13)\n         LR    R9,R2                   LOAD INPUT ADDRESS\n         LA    R5,0(R4,R9)             GET END OF INPUT ADDRESS\n         BCTR  R5,0\n         ICM   R8,15,OUTBUFAD          LOAD OUTPUT AREA ADDRESS\n         BNZ   GOTOUTBF\n         L     R0,OUTBUFSZ             BUFFER NOT YET ACQUIRED\n         GETMAIN R,LV=(0)              GET BELOW-THE-LINE TPUT BUFFER\n         ST    R1,OUTBUFAD             SAVE ADDRESS ACROSS CALLS\n         LR    R8,R1                   COPY OUTPUT AREA ADDRESS\nGOTOUTBF LR    R10,R8                  SAVE ADDRESS FOR THIS CALL\n         LH    R2,SCRNSIZE             LOAD SCREEN BUFFER SIZE\n         SLR   R6,R6                   INITIALIZE SCREEN ADDRESS\n         SLR   R15,R15\nTESTORDR CLI   0(R9),IC                TEST FOR INSERT CURSOR\n         BE    COPY1\n         CLI   0(R9),SF                TEST FOR START FIELD\n         BE    COPY2\n         CLI   0(R9),SFE               TEST FOR START FIELD EXTENDED\n         BE    SFEORNOT\n         CLI   0(R9),SBA               TEST FOR SET BUFFER ADDRESS\n         BE    COPY3\n         CLI   0(R9),EUA               TEST FOR ERASE UNPROTECTED\n         BE    COPY3\n         CLI   0(R9),RA                TEST FOR REPEAT TO ADDRESS\n         BE    COPY4\n         SPACE\n         LA    R4,1                    SET INCREMENT TO 1\n         LR    R7,R9                   SAVE ADDRESS OF FIRST CHAR\nTESTNEXT LA    R6,1(R6)                INCREMENT SCREEN ADDRESS\n         BXH   R9,R4,ENDBUF            INCREMENT TO NEXT CHAR\n         CLC   0(1,R7),0(R9)           SEE IF SAME CHARACTER\n         BE    TESTNEXT                IF SAME, LOOP\n         SPACE\nENDBUF   LR    R1,R9                   ADDRESS OF CURRENT CHAR\n         SR    R1,R7                   NUMBER OF SAME CHARACTERS\n         CH    R1,=H'4'                AT LEAST 4 FOR RA\n         BH    BUILDRA\n         BCTR  R1,0                    SUBTRACT 1 FOR EXECUTE\n         EX    R1,COPY                 COPY TO OUTPUT AREA\n         LA    R8,1(R1,R8)             INCREMENT OUTPUT ADDRESS\n         CR    R9,R5                   SEE IF ANY MORE\n         BH    OUT\n         B     TESTORDR\n         SPACE\nBUILDRA  MVC   3(1,R8),0(R7)           COPY CHARACTER\n         MVI   0(R8),RA                MOVE IN RA ORDER CODE\n         CR    R6,R2\n         BL    GETADDR\n         SR    R6,R2\nGETADDR  SR    R14,R14                 CONVERT SCREEN ADDRESS TO\n         LR    R15,R6                       3270 ADDRESS CODE\n         STCM  R15,3,1(R8)             14-BIT ADDRESS\n         CH    R2,=H'4095'             SCREEN HAS 4K OR MORE BYTES?\n         BH    GOTADDR                 YES, SO 14-BIT MUST BE SUPPORTED\n         SLDL  R14,26\n         SRL   R15,26\n         IC    R14,TBL3270(R14)\n         IC    R15,TBL3270(R15)\n         STC   R14,1(,R8)              12-BIT ADDRESS\n         STC   R15,2(,R8)\nGOTADDR  LA    R8,4(,R8)               INCREMENT OUTPUT AREA ADDRESS\n         CR    R9,R5                   SEE IF ANY MORE\n         BH    OUT\n         B     TESTORDR\n         SPACE\nSFEORNOT SLR   R4,R4                   YES, CLEAR DATA COUNT\n         IC    R4,1(,R9)               LOAD ATTRIBUTE PAIR COUNT\n         LA    R4,1(,R4)               INCREMENT FOR SFE,COUNT\n         SLL   R4,1                    GET BYTE COUNT\n         LA    R6,1(,R6)               INCREMENT SCREEN ADDR FOR ATTR\n         TM    PARMADDR,X'80'          \"SNAZZY\" TERMINAL?\n         BO    COPYDATA                YES, JUST COPY THE DATA\n         MVI   0(R8),SF                NO, JUST USE A NORMAL SF\n         MVC   1(1,R8),3(R9)           COPY FIELD ATTRIBUTE\n         LA    R8,2(,R8)               ADJUST OUTPUT COUNTER\n         B     INCRPTR\nCOPY1    LA    R4,1                    SET COUNT\n         B     COPYDATA\nCOPY2    LA    R4,2                    SET COUNT\n         LA    R6,1(,R6)               INCREMENT SCREEN ADDR FOR ATTR\n         B     COPYDATA\nCOPY3    LA    R4,3                    SET COUNT\n         B     UPDATADR\nCOPY4    LA    R4,4                    SET COUNT\nUPDATADR ICM   R15,3,1(R9)             CONVERT ADDRESS TO SCREEN POS\n         TM    1(R9),X'40'             14-BIT ADDRESS FORMAT?\n         BZ    UPDT14AD                YES\n         SLDL  R14,24\n         SLL   R15,2\n         SRDL  R14,6\n         SRL   R15,20\nUPDT14AD LR    R0,R15                  SAVE NEW SCREEN ADDRESS\n         CLI   CPLINE+1,80             80-COLUMN TSO TERMINAL?\n         BNH   KEEPADDR                YES, KEEP BUFFER ADDRESS\n         SLR   R14,R14\n         D     R14,FW80\n         LTR   R14,R14                 COLUMN 1 FOR 80-COLUMN CONSOLE?\n         BNZ   KEEPADDR                NO, KEEP BUFFER ADDRESS\n         MH    R15,CPLINE              YES, RESCALE FOR WIDE TERMINAL\n         LR    R0,R15                  UPDATE SAVED SCREEN ADDRESS\nKEEPADDR LR    R15,R0                  GET NEW SCALED SCREEN ADDRESS\n         CR    R6,R15                  SEE IF ALREADY AT THIS ADDRESS\n         BNE   RESETADR\n         CLI   0(R9),SBA               IF ORDER IS SBA, SKIP IT\n         BE    INCRPTR\nRESETADR LR    R6,R15                  UPDATE CURRENT SCREEN ADDRESS\n         BCTR  R4,0                    COPY AND EDIT OUTPUT\n         LR    R7,R9                   COPY SOURCE ADDRESS\n         EX    R4,COPY                 COPY TO OUTPUT AREA\n         CR    R6,R2                   WRAP-AROUND REQUIRED?\n         BL    WRAPOKAY                NO\n         SR    R6,R2                   YES\n         LR    R15,R6\nWRAPOKAY STCM  R15,3,1(R8)             STORE 14-BIT ADDRESS\n         CH    R2,=H'4095'             SCREEN HAS 4K OR MORE BYTES?\n         BH    COPYDONE                YES, SO 14-BIT MUST BE SUPPORTED\n         SRL   R15,6                   NO, PLAY IT SAME AND USE 12-BIT\n         STC   R15,1(,R8)              SUPPLY HIGH-ORDER 6 BITS\n         NI    2(R8),X'3F'             SUPPLY LOW-ORDER 6 BITS\n         TR    1(2,R8),TBL3270         SUPPLY \"PARITY\" BITS\n         B     COPYDONE\n         SPACE\nCOPYDATA BCTR  R4,0                    DECREMENT COUNT FOR EXECUTE\n         LR    R7,R9                   COPY SOURCE ADDRESS\n         EX    R4,COPY                 COPY TO OUTPUT AREA\nCOPYDONE LA    R4,1(,R4)               RESTORE COUNT\n         LA    R8,0(R4,R8)             UPDATE OUTPUT AREA ADDRESS\nINCRPTR  BXLE  R9,R4,TESTORDR          INCREMENT ADDRESS AND LOOP\n         SPACE\nOUT      SR    R8,R10                  CALCULATE OUTPUT LENGTH\n         ST    R8,36(0,R13)            STORE NEW LENGTH IN R4 SLOT\n         LR    R8,R10                  LOAD OUTPUT ADDRESS\n         ST    R8,28(0,R13)            STORE NEW ADDRESS IN R2 SLOT\n         SR    R15,R15                 CLEAR RETURN CODE\n         LM    R14,R12,12(R13)\n         BR    R14\n         SPACE\nCOPY     MVC   0(0,R8),0(R7)           <<< EXECUTED INSTRUCTION >>>\n         SPACE\nIC       EQU   X'13'\nSF       EQU   X'1D'\nSFE      EQU   X'29'\nSBA      EQU   X'11'\nEUA      EQU   X'12'\nRA       EQU   X'3C'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       READ COMMAND FROM USER                        *\n*                                                                     *\n***********************************************************************\nNOCHANGE BAS   R14,HOMETASK       PERFORM ADDRESS SPACE SWITCH        *\nREADTERM XC    TGETCNTL(86),TGETCNTL   ERASE PREVIOUS REPLY     GP@SECV\n         MVI   REPLY,C' '         JUST FOR BLANK TEST           GP@SECV\n         LA    R2,3               DO UP TO 3 TERMINAL READS     GP@P6**\nREADLOOP LA    R1,TGETCNTL        GET ADDRESS OF INPUT BUFFER         *\n         LA    R0,85              GET MAXIMUM INPUT SIZE              *\n         ICM   R1,8,TGETFLAG      SUPPLY TGET FLAG BYTE               *\n         TGET  (1),(0),R          GET 79 CHARACTERS FROM TERMINAL     *\n         CH    R15,=H'4'          ANY INPUT?                          *\n         BNE   TGOTSOME           YES                                 *\n         BCT   R2,READWAIT        NO, LOOP THROUGH READ AGAIN         *\n         MVI   WCC,X'40'          NULL WCC - DON'T ERASE AID          *\n         B     NEXTPAGE           TIMED OUT FOR REFRESH               *\nREADWAIT STIMER WAIT,BINTVL=DELAY WAIT HALF A SECOND                  *\n         B     READLOOP           ISSUE ANOTHER TGET                  *\nTGOTSOME CLI   TGETCNTL,X'6C'     PA1?                                *\n         BE    CNSLREPT           YES, PERFORM REPEAT FUNCTION        *\n         MVI   WCC,X'C3'          WCC TO RESET AID/MDT, UNLOCK KEYBD  *\n         CH    R1,=H'1'           ONLY AID RETURNED? (PA2/PA3/CLEAR?) *\n         BE    NEXTPAGE           YES, DO CNCL FOR VTAM SHORT READ    *\n         CH    R15,=H'12'         WAS BUFFER TOO SMALL?               *\n         BE    TGETCLRQ           YES, FLUSH REMAINING DATA           *\n         CH    R15,=H'16'         INVALID TGET PARAMETERS?            *\n         BE    DONE               YES, EXIT                           *\n         CH    R15,=H'20'         TERMINAL LOGGED OFF?                *\n         BE    DONE               YES, EXIT                           *\n         CH    R15,=H'28'         WAS BUFFER TOO SMALL?               *\n         BNE   PARSCHAR           NO, RECEIVED ALL THE INPUT          *\nTGETCLRQ EQU   *                                                      *\n         TCLEARQ INPUT            YES, FLUSH UNWANTED DATA            *\nPARSCHAR CLI   TGETCNTL,X'7A'     PF10?                               *\n         BE    PF1022             YES, RELEASE                        *\n         CLI   TGETCNTL,X'4A'     PF22?                               *\n         BE    PF1022             YES, RELEASE                        *\n         CLI   TGETCNTL,X'7B'     PF11?                               *\n         BE    PF1123             YES, FREEZE                         *\n         CLI   TGETCNTL,X'4B'     PF23?                               *\n         BE    PF1123             YES, FREEZE                         *\n         CLI   TGETCNTL,X'7D'     ENTER OR OTHER PFK?                 *\n         BNE   DONE               CALLER MUST HANDLE OTHER PFK  GP@P6**\n         CLI   REPLY,C' '         JUST A BLANK?\n         BE    NEXTPAGE           YES, JUST GO REFRESH\n         MVC   OLDREPLY,REPLY     SAVE LAST COMMAND             GP@SECV\n         OC    REPLY,BLANKS       CONVERT CHARS TO UPPER CASE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    C  --  SET CONSOLE NUMBER                        *\n*                                                                     *\n***********************************************************************\n         CLI   REPLY,C'C'         DO WE CHANGE CONSOLES?\n         BNE   KCONTROL           NO, SO CONTINUE\n         L     R2,CONSOLE         SET DEFAULT CONSOLE\n         ST    R2,OLDCONS         SAVE OLD CONSOLE #\n         LA    R15,CONVBIN        BRANCH TO\n         BASR  R14,R15            EBCDIC->BINARY CONVERTOR\n         ST    R2,CONSOLE         STORE R2 AWAY AS CONSOLE NUMBER\n         B     NEXTPAGE           CONTINUE\n***********************************************************************\n*                                                       THIS FUNCTION *\n*        K  --  DELETE A HIGH INTENSITY MESSAGE         ADDED 17/9/82 *\n*                                                          BY GP@SECV *\n***********************************************************************\nKCONTROL CLI   REPLY,C'K'         DO WE DOM A MESSAGE?\n         BNE   NTFYOPER           NO, SO CONTINUE\n         CLI   VIPFLAG,C'*'       ARE WE IN VIP MODE?\n         BNE   MAYBECMD           NO, SO SKIP IT\n         LA    R2,1               MAKE R2 NON-ZERO\n         LNR   R2,R2              MAKE R2 NEAGATIVE\n         LA    R15,CONVBIN        BRANCH TO\n         BASR  R14,R15            EBCDIC->BINARY CONVERTOR\n         LTR   R2,R2              IS R2 POSITIVE?\n         BM    NEXTPAGE           NEGATIVE ==> CONVBIN FOUND ERROR\n         BZ    BADCMD             ZERO ==> INVALID COMMAND\n         CH    R2,MAXLINES        IS THE LINE NUMBER TOO LARGE?\n         BH    BADCMD             YES, SO SKIP IT\n         BCTR  R2,0               PREPARE R2 AS INDEX\n         MH    R2,DOMESIZE        MULTIPLY BY CONSOLE LINE ENTRY SIZE\n         A     R2,DOM#ADDR        GET ADDR OF ENTRY FOR THIS LINE\n         BAS   R14,COMMTASK       PERFORM ADDRESS SPACE SWITCH\n         ICM   R2,15,4(R2)        LOAD R2 WITH MESSAGE NO. FOR DOM\n         BAS   R14,HOMETASK       PERFORM ADDRESS SPACE SWITCH\n         LTR   R1,R2              LOAD R1 WITH MESSAGE NO. FOR DOM\n         BZ    NEXTPAGE           SKIP DOM IF NO MESSAGE ON THIS LINE\n*        DOM   MSG=(1)\n         SLR   0,0                ONE ID NUMBER AND NO REPLY=YES\n         SVC   87                 THIS WILL KILL A WTOR ON MVS/SP2.2\n         B     NEXTPAGE           CONTINUE\n***********************************************************************\n*                                                       THIS FUNCTION *\n*        N  --  DISPLAY A HIGH INTENSITY MESSAGE        ADDED 17/9/82 *\n*                                                          BY GP@SECV *\n***********************************************************************\nNTFYOPER CLI   REPLY,C'N'         DO WE WRITE A MESSAGE?\n         BNE   NTFYOPRS           NO, SO CONTINUE\n         CLI   VIPFLAG,C'*'       ARE WE IN VIP MODE?\n         BNE   MAYBECMD           NO, SO SKIP IT\n         MVC   WTOMSG(64),REPLY+1 PREPARE MESSAGE TEXT          GP@P6\n         XC    WTOROUT,WTOROUT    RESET ROUTING CODES           GP@P6\n         MVI   SPYWTO+2,X'C0'     SPECIFY DESC/ROUT AND REG0    GP@P6\n         MVI   SPYWTO+3,X'04'     SPECIFY NOCPY                 GP@P6\n         L     R0,CONSOLE         LOAD CONSOLE SOURCE ID        GP@P6\n         WTO   MF=(E,SPYWTO)      DISPLAY HIGH INTENSITY MESSAGE\n         B     NEXTPAGE           CONTINUE\n***********************************************************************\n*                                                       THIS FUNCTION *\n*        B  --  BROADCAST A HIGH INTENSITY MESSAGE      ADDED 4/12/87 *\n*                                                            BY GP@P6 *\n***********************************************************************\nNTFYOPRS CLI   REPLY,C'B'         DO WE WRITE A MESSAGE?\n         BNE   HALT               NO, SO CONTINUE\n         CLI   VIPFLAG,C'*'       ARE WE IN VIP MODE?\n         BNE   MAYBECMD           NO, SO SKIP IT\n         MVC   WTOMSG(64),REPLY+1 PREPARE MESSAGE TEXT          GP@P6\n         MVI   WTOROUT,X'40'      SPECIFY ROUTCDE=(2)           GP@P6\n         MVI   SPYWTO+2,X'84'     SPECIFY DESC/ROUT AND BRDCST  GP@P6\n         MVI   SPYWTO+3,X'00'     RESET OTHER MCS FLAGS         GP@P6\n         WTO   MF=(E,SPYWTO)      DISPLAY HIGH INTENSITY MESSAGE\n         B     NEXTPAGE           CONTINUE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                        Z  --  TERMINATE IMPXA                       *\n*                                                                     *\n***********************************************************************\nHALT     CLI   REPLY,C'Z'         IS IT A 'Z'?\n         BE    DONE               YES, SO QUIT\n         CLI   REPLY,C'='         IS IT A '='?\n         BE    DONE               YES, SO QUIT\n         CLI   REPLY,C'T'         IS IT A 'T'?\n         BE    DONE               YES, SO QUIT\n         CLI   REPLY,C'L'         IS IT A 'L'?\n         BE    DONE               YES, SO QUIT\n***********************************************************************\n*                                                                     *\n*               F  --  FREEZE DISPLAY ON CURRENT PAGE                 *\n*                                                                     *\n***********************************************************************\nF        CLI   REPLY,C'F'         IS IT AN 'F'?\n         BNE   R                  NO, SO CONTINUE ON\nPF1123   MVI   FREEZE,C'F'        TURN ON FREEZE INDICATOR\n         MVI   TGETFLAG,TGETFLGW  WAIT FOR INPUT ON TERMINAL READ\n         B     NEXTPAGE           CONTINUE\n***********************************************************************\n*                                                                     *\n*           R  --  RELEASE FREEZE ON CURRENT PAGE DISPLAY             *\n*                                                                     *\n***********************************************************************\nR        CLI   REPLY,C'R'         IS IT AN 'R'?\n         BNE   HELP               NO, SO CONTINUE ON\nPF1022   MVI   FREEZE,C'R'        TURN OFF FREEZE INDICATOR\n         MVI   TGETFLAG,TGETFLGN  DON'T WAIT FOR INPUT ON TERMINAL READ\n         B     NEXTPAGE           CONTINUE\n         EJECT\n***********************************************************************\n*                                                                     *\n*           ?  --  LIST HELP FOR SPY COMMANDS ON TERMINAL             *\n*                                                                     *\n***********************************************************************\nHELP     CLI   REPLY,C'?'         IS HE ASKING FOR HELP?\n         BE    DONE               YES\n         CLI   REPLY,C'!'         IS HE ASKING FOR GLOSSARY?\n         BE    DONE               YES\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       CHECK FOR VIP PASSWORD                        *\n*                                                                     *\n***********************************************************************\n         CLC   REPLY(3),VIPWORD   WAS VIP PASSWORD ENTERED?\n         BNE   OPER               NO, CONTINUE\n         XI    VIPFLAG,C'*'-C' '  TOGGLE VIP FLAG\n         B     NEXTPAGE\n***********************************************************************\n*                                                                     *\n*                      SYSTEM OPERATOR COMMANDS                       *\n*                                                                     *\n***********************************************************************\nOPER     CLI   REPLY,C'/'         IS THIS AN OPERATOR COMMAND?\n         BE    MGCR               YES\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       JES OPERATOR COMMANDS                         *\n*                                                                     *\n***********************************************************************\n         CLI   REPLY,C'$'         IS THIS A JES COMMAND?\n         BE    MGCR               YES\n***********************************************************************\n*                                                                     *\n*                      COMMAND WAS INVALID                            *\n*                                                                     *\n***********************************************************************\nBADCMD   LA    R1,3               COMMAND WAS INVALID           08JUL97\n         BAS   R14,GETERMSG       LOAD ERROR MESSAGE            08JUL97\n         B     NEXTPAGE\nMAYBECMD LA    R1,6               COMMAND WAS INVALID FOR NON-VIP MODE\n         BAS   R14,GETERMSG       LOAD ERROR MESSAGE            08JUL97\n         B     NEXTPAGE\n         EJECT\nDONE     DS    0H                 PROGRAM TERMINATION\n         L     R1,PARMADDR        RESTORE PARAMETER POINTER\n         MVC   0(46,R1),TGETCNTL  PASS BACK COMMAND INPUT\n         L     R13,4(,R13)        POINT BACK TO OLD SAVE AREA\n         MVC   23(1,R13),FREEZE   PASS BACK DISPLAY MODE        GP@P6\n         MVC   22(1,R13),VIPFLAG  PASS BACK VIP FLAG            GP@P6\n         LM    R0,R1,OUTBUFSZ     GET OUTPUT BUFFER DETAILS\n         LTR   R1,R1              WAS BUFFER ALLOCATED?\n         BZ    NOOUTBUF           NO\n         FREEMAIN R,LV=(0),A=(1)  YES, FREE IT\n         SLR   R15,R15\n         ST    R15,OUTBUFAD       FLAG REACQUISITION REQUIRED FOR REUSE\nNOOUTBUF DS    0H\n         MODESET MF=(E,MDSTPROB)\n*        STTMPMD OFF              RESTORE PA1 AND CLEAR         GP@P6\n         STAX\n         LM    R14,R12,12(R13)    RESTORE REGISTERS\n         SLR   R15,R15            INDICATE INITIALIZATION SUCCESS\n         BR    R14                RETURN TO CALLER\n         SPACE\nINITFAIL DS    0H                 PROGRAM TERMINATION\n         L     R13,4(,R13)        POINT BACK TO OLD SAVE AREA\n         MODESET MF=(E,MDSTPROB)\n         LM    R14,R12,12(R13)    RESTORE REGISTERS\n         LA    R15,8              INDICATE INITIALIZATION FAILURE\n         BR    R14                RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                            ADDED BY *\n*                  USE SVC 34 FOR COMMANDS                   GP@SECV  *\n*                                                            11/10/82 *\n***********************************************************************\nMGCR     CLI   VIPFLAG,C'*'       ARE WE IN VIP MODE?\n         BNE   MAYBECMD           NO, SO CANNOT ISSUE COMMANDS\n         CLI   REPLY,C'/'         MVS COMMAND?\n         BE    SVC34OS            YES\n         MVC   CMDBUF,REPLY       LOAD COMMAND BUFFER WITH JES COMMAND\n         B     SVC34JES\nSVC34OS  MVC   CMDBUF,REPLY+1     LOAD COMMAND BUFFER WITH MVS COMMAND\nSVC34JES LA    R3,79              AVOID INFINITE LOOP\nBLNKLOOP CLI   CMDBUF,C' '        LEADING BLANK(S)?\n         BNE   CHECKCMD           NO, CHECK COMMAND TEXT\n         MVC   CMDBUF(L'CMDBUF-1),CMDBUF+1  SHIFT COMMAND TEXT LEFT\n         MVI   CMDEND,C' '        BLANK OUT OLD LAST CHARACTER\n         BCT   R3,BLNKLOOP        CHECK FOR ANOTHER BLANK\nCHECKCMD CLC   =C'E ',CMDBUF      RESET COMMAND?\nBADJUMP1 NOP   BADCMD             YES, NOT ALLOWED TO DO IT  **** JUL01\n         CLC   =C'RESET ',CMDBUF  RESET COMMAND?\nBADJUMP2 NOP   BADCMD             YES, NOT ALLOWED TO DO IT  **** JUL01\n         LA    R3,CMDEND\n         LA    R2,L'CMDBUF+1                          WIDE-SCRN 18NOV99\nPARSLOOP CLI   0(R3),C' '         BLANK CHARACTER?\n         BNE   STORELEN           NO, FOUND LAST CHARACTER OF COMMAND\n         BCTR  R3,0               YES, POINT TO PREVIOUS CHARACTER\n         BCT   R2,PARSLOOP        IF R2 IS 0 ONLY / WAS ENTERED\n         B     BADCMD             TRY AGAIN\nSTORELEN LA    R2,4(0,R2)         MAKE THE LAST CHARACTER A BLANK\n         STH   R2,CMDLEN\n         SPACE\n         LA    R1,CMDLEN          COMMAND BUFFER ADDRESS\n         L     R0,CONSOLE         CONSOLE ID\n         SVC   34\n         B     NEXTPAGE\nECHOLOAD MVC   WTOMSG(0),CMDBUF\n         EJECT\n***********************************************************************\n*                                                                     *\n*            CONVERT EBCDIC NUMBERS FROM USER INTO BINARY             *\n*                                                                     *\n***********************************************************************\nCONVBIN  CVD   R2,WORK            CONVERT TO DECIMAL\n         CLI   REPLY+1,C' '       DID HE ENTER A NUMBER?\n         BE    RTRN               NO, USE THE DEFAULT\n         CLI   REPLY+1,C'0'       IS THE HEX CODE < 'F0' ?\n         BL    BADCHAR            YES, ERROR\n         CLI   REPLY+1,C'9'       IS THE HEX CODE > 'F9' ?\n         BH    BADCHAR            YES, ERROR\n         PACK  WORK(8),REPLY+1(1) PACK EBCDIC (ASSUME 1 DIGIT)\n         CLI   REPLY+2,C' '       DID HE ENTER 2 DIGITS?\n         BE    CVB                NO, DONT DO THE 2 DIGIT PACK\n         CLI   REPLY+2,C'0'       IS THE HEX CODE < 'F0' ?\n         BL    BADCHAR            YES, ERROR\n         CLI   REPLY+2,C'9'       IS THE HEX CODE > 'F9' ?\n         BH    BADCHAR            YES, ERROR\n         PACK  WORK(8),REPLY+1(2) PACK AGAIN, WITH 2 DIGITS THIS TIME\nCVB      CVB   R2,WORK            GET BINARY\nRTRN     BR    R14                RETURN TO MAINLINE\nBADCHAR  LA    R1,2               CONSOLE NUMBER ERROR          08JUL97\n         B     GETERMSG           LOAD ERROR MESSAGE    18NOV99 08JUL97\n         EJECT\n***********************************************************************\n*                                                          XA UPGRADE *\n*            GET INTO COMMTASK'S ADDRESS SPACE               27/11/87 *\n*                                                            BY GP@P6 *\n***********************************************************************\nCOMMTASK L     R1,PSAAOLD         POINT TO ASCB\n         USING ASCB,R1\n         L     R1,ASCBOUCB        POINT TO OUCB\n         DROP  R1                 ASCB\n         USING OUCB,R1\n         TM    OUCBSFL,OUCBNSW    ALREADY NON-SWAPPABLE?\n         BO    DNTSWPOK           YES, FORGET ABOUT SYSEVENT\n         DROP  R1                 OUCB\n         LA    0,X'29'            LOAD DONTSWAP SYSEVENT CODE\n         SVC   95                 ISSUE SYSEVENT SVC\nDNTSWPOK DS    0H                 NOW NON-SWAPPABLE\n         STATUS SET,MC,STEP       STOP ALL OTHER TASKS\n         LA    R0,1               GET NEW AX VALUE\n         AXSET AX=(0)             SET IT\n         ST    R0,AXVALUE         SAVE PREVIOUS VALUE FOR RESTORE\n**       XC    WORK,WORK          CLEAR ADDRESS SPACE PARAMETERS\n**       MVC   WORK+2(2),CNSLASID LOAD SECONDARY ASID\n**       MVC   WORK+6(2),HOMEASID LOAD PRIMARY ASID\n**       LASP  WORK,1             SWITCH TO CONSOLE'S ADDRESS SPACE\n**       BNZ   LASPFAIL           HANDLE UNSUCCESSFUL LASP\n         LH    R1,CNSLASID        LOAD CONSOLE ASID             APR2008\n         SSAR  R1                 ACTIVATE IT AS SECONDARY      APR2008\n         SAC   X'100'             GET INTO SECONDARY SPACE MODE\n         BR    R14                RETURN TO CALLER\nLASPFAIL BAS   R14,HOMETASK       ENSURE STATUS QUO IS MAINTAINED\n         LA    R1,LASPSTRM        POINT TO REPEAT DATA STREAM\n         LA    R0,LASPCLEN        GET DATA LENGTH\n         B     LASPERRM           NOTIFY USER OF LASP FAILURE\n         EJECT\n***********************************************************************\n*                                                         SP5 UPGRADE *\n*            LOAD ERROR MESSAGE                              08/07/97 *\n*                                                            BY GP@P6 *\n***********************************************************************\nGETERMSG SLL   R1,5               GET ERROR MESSAGE INDEX\n         LA    R1,ERRMSG1-32(R1)  POINT TO ERROR MESSAGE TEXT\n         MVC   ERROR(32),0(R1)    LOAD IT\n         BR    R14                RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                          XA UPGRADE *\n*            GET INTO TSO USER'S ADDRESS SPACE               27/11/87 *\n*                                                            BY GP@P6 *\n***********************************************************************\nHOMETASK SAC   X'000'             REVERT TO PRIMARY SPACE MODE\n**       XC    WORK,WORK          CLEAR ADDRESS SPACE PARAMETERS\n**       MVC   WORK+2(2),HOMEASID LOAD SECONDARY ASID\n**       MVC   WORK+6(2),HOMEASID LOAD PRIMARY ASID\n**       LASP  WORK,1             SWITCH TO HOME ADDRESS SPACE\n         LH    R1,HOMEASID        LOAD PRIMARY ASID             APR2008\n         SSAR  R1                 MAKE IT THE SECONDARY ALSO    APR2008\n         L     R0,AXVALUE         GET OLD AX VALUE\n         AXSET AX=(0)             RESTORE IT\n         STATUS RESET,MC,STEP     RESTART ALL OTHER TASKS\n         L     R1,CVTPTR(,0)      POINT TO THE CVT\n         USING CVT,R1\n         L     R1,CVTOPCTP        POINT TO THE RMCT\n         DROP  R1                 CVT\n         L     R1,12(,R1)         POINT TO THE MCT\n         TM    168(R1),X'C0'      ANY SQA SHORTAGE PROBLEMS?\n         BNZR  R14                YES, STAY NON-SWAPPABLE\n         TM    169(R1),X'C0'      ANY AUX STORAGE SHORTAGE PROBLEMS?\n         BNZR  R14                YES, STAY NON-SWAPPABLE\n         TM    171(R1),X'60'      ANY REAL STORAGE SHORTAGE PROBLEMS?\n         BNZR  R14                YES, STAY NON-SWAPPABLE\n         LA    0,X'2A'            LOAD OKSWAP SYSEVENT CODE\n         SVC   95                 ISSUE SYSEVENT SVC\n         BR    R14                RETURN TO CALLER\n         DROP  R12,R11            IMPXASPY\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          A T T N E X I T                            *\n*                                                                     *\n*         TRAP USERS ATTENTION INTERRUPTS AND FLAG FOR RESET          *\n*                                                                     *\n***********************************************************************\nATTNEXIT LR    R7,R15             ESTABLISH\n         USING ATTNEXIT,R7        ADDRESSABILITY\n         MVI   ATTNFLG,X'FF'      SET ATTN FLAG\n         BR    R14                RETURN TO CALLER\n         DROP  R7                 ATTNEXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         C O N S T A N T S                           *\n*                                                                     *\n***********************************************************************\nWORK     DC    D'0'               WORK AREA FOR PACKS\nSCRATCH  DC    D'0'               SCRATCH AREA FOR CHAR. MANIP\nSAVE     DC    18F'0'             SAVE AREA\nOUTBUFSZ DC    F'8192'            FINAL TPUT DATA STREAM BUFFER SIZE\nOUTBUFAD DC    A(0)               FINAL TPUT DATA STREAM BUFFER ADDRESS\nTBL3270  DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\nHEX      DC    C'0123456789ABCDEF'\nDOM#ADDR DC    F'0'               ADDRESS OF DOM # TABLE FOR THIS CNSL\nOLDCONS  DC    F'1'               PREVIOUS CONSOLE NUMBER\nCONSOLE  DC    F'0'               CONSOLE TO BE LOOKED AT\nAXVALUE  DC    F'0'               AX VALUE SAVE AREA\nPARMADDR DC    A(0)               ADDRESS OF INPUT PARAMETER\nLPSCREEN DC    H'0'               LINES PER SCREEN\nCPLINE   DC    H'0'               CHARACTERS PER LINE\nHOMEASID DC    H'0'               ASID OF TSO USER\nCNSLASID DC    H'8'               ASID OF COMMTASK  2.1:6 2.2:7 3.1:8\nDELAY    DC    F'50'              DELAY FOR 50 HUNDREDTHS OF A SECOND\nFW80     DC    F'80'\nHW80     EQU   FW80+2,2\nSCRNSIZE DC    H'1920'            NUMBER OF TSO SCREEN LOCATIONS GP@P6\nCMDLEN   DC    2H'0'              HALFWORD LENGTH INDICATOR     GP@SECV\nCMDBUF   DC    CL158' '           SVC 34 COMMAND BUFFER         GP@SECV\nCMDEND   DC    CL2' '             END OF COMMAND BUFFER         GP@SECV\nMAXLINES DC    H'0'               NUMBER OF LINES IN MESSAGE AREA\nDOMESIZE DC    H'8'               SIZE OF DOM ENTRY (OS DEPT)   GP@P6\nTGETCNTL DC    CL6' '             TGET ASIS CONTROL BYTES       GP@SECV\nREPLY    DC    CL160' '           USERS COMMAND INPUT FIELD\nDUPLSTRM DC    X'C7'              WCC -- ALARM, RESET AID/MDT, UNLOCK\n         DC    X'11'              SBA\nDUPLCOUT DC    X'5B60'            SECOND LAST LINE\n         DC    X'1DE8'            ATTR BYTE - PROTECTED, HIGH INTENSITY\n         DC    CL79'IEE150I CHANGE OPTIONS IF DESIRED: (ENTER TO ISSUE +\n               COMMAND; PA2 TO CANCEL IT.) '\n         DC    X'11'              SBA\nDUPLCIN  DC    X'5CF0'            LAST/INPUT LINE\n         DC    X'1DC1'            ATTR BYTE - UNPROT, LOW INTENS, UPDTD\n         DC    X'13'              INSERT CURSOR\nOLDREPLY EQU   *,160              PREVIOUS REPLY\n         DC    CL80' '            PREVIOUS REPLY                GP@SECV\nDUPLCLEN EQU   *-DUPLSTRM-1       LENGTH OF DUPLICATE DATA STREAM\n         DC    CL80' '            PREVIOUS REPLY      WIDE-SCRN 18NOV99\nLASPSTRM DC    X'C7'              WCC -- ALARM, RESET AID/MDT, UNLOCK\n         DC    X'11'              SBA\nLASPCOUT DC    X'5B60'            SECOND LAST LINE\n         DC    X'1DE8'            ATTR BYTE - PROTECTED, HIGH INTENSITY\n         DC    CL79'IMP/XA ERROR - LASP TO CONSOLE ADDRESS SPACE FAILED+\n                - ENTER=RETRY - PF12=CANCEL'\n         DC    X'11'              SBA\nLASPCIN  DC    X'5CF0'            LAST/INPUT LINE\n         DC    X'1DC1'            ATTR BYTE - UNPROT, LOW INTENS, UPDTD\n         DC    X'133C404000'      INSERT CURSOR, NULL INPUT LINE\nLASPCLEN EQU   *-LASPSTRM         LENGTH OF DUPLICATE DATA STREAM\nTGETFLAG DC    X'91'              TGET FLAG BYTE                GP@P6\nTGETFLGW EQU   X'81'              TGET ASIS,WAIT FLAG           GP@P6\nTGETFLGN EQU   X'91'              TGET ASIS,NOWAIT FLAG         GP@P6\nATTNFLG  DC    X'00'              X'FF' INDICATES ATTN WAS TRAPPED\nVIPFLAG  DC    X'40'              X'5C' INDICATES VIP MODE\nFULLSCR  DC    X'03'              TPUT FULLSCR,WAIT FLAG\nTGETWAIT DC    X'81'              TGET ASIS,WAIT FLAG           GP@P6\nVIPWORD  DC    C'GAK'             VIP PASSWORD\nR22C1    DC    X'5A50'            3278-2  --  ROW 22, COL 1\nR23C1    DC    X'5B60'            3278-2  --  ROW 23, COL 1\nR24C1    DC    X'5CF0'            3278-2  --  ROW 24, COL 1\nR30C1    DC    X'E450'            3278-3  --  ROW 30, COL 1\nR31C1    DC    X'E560'            3278-3  --  ROW 31, COL 1\nR32C1    DC    X'E6F0'            3278-3  --  ROW 32, COL 1\nR41C1    DC    X'F240'            3278-4  --  ROW 41, COL 1\nR42C1    DC    X'F350'            3278-4  --  ROW 42, COL 1\nR43C1    DC    X'F460'            3278-4  --  ROW 43, COL 1\nPATTERN  DC    X'40202020'        EDIT PATTERN FIELD\nDPATTRN  DC    X'4021204B20'      EDIT PATTERN FIELD\nSTAXLIST STAX  ATTNEXIT,REPLACE=NO,MF=L                         GP@P6\nMDSTSUP0 MODESET KEY=ZERO,MODE=SUP,MF=L                         GP@P6\nMDSTPROB MODESET KEY=NZERO,MODE=PROB,MF=L                       GP@P6\nSPYWTO   WTO   '123456789.123456789.123456789.123456789.123456789.12345+\n               6789.1234',MF=L,DESC=(2)                         GP@P6\n         ORG   SPYWTO+4                                         GP@P6\nWTOMSG   DS    CL64                                             GP@P6\nWTODESC  DS    XL2                                              GP@P6\nWTOROUT  DS    XL2                                              GP@P6\n         ORG\nTPUTNOED TPUT  0,0,NOEDIT,WAIT,MF=L\nBLANKS   DC    CL160' '\n         SPACE 5\n***********************************************************************\n*                                                                     *\n*               327X SCREEN CLEAR CONTROL CHARACTERS                  *\n*                                                                     *\n***********************************************************************\nCLR      DC    X'27F5C113'        ESCAPE, VTAM ERASE/WRITE, WCC, IC\nCLRLEN   EQU   *-CLR\nCLRALT   DC    X'277EC113'        ESCAPE, VTAM ERASE/WRT ALT, WCC, IC\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*               DISPLAY SCREEN - TRAILER SECTION                      *\n*                                                                     *\n***********************************************************************\nTRAILER  EQU   *\n         DC    X'11'              SBA\nCMDCNTRL DC    X'5A50'                TO ROW 22, COL 1\n         DC    X'1DE8'            ATTR BYTE - PROTECTED, HIGH INTENSITY\nLASTLINE DC    CL79' '            SYSTEM OPERATOR'S COMMAND INPUT LINE\n         DC    X'11'              SBA\nPHEADING DC    X'5B60'                TO ROW 23, COL 1\n         DC    X'1DE8'            ATTR BYTE - PROTECTED, HIGH INTENSITY\n         DC    C'CN('\nCONNUM   DC    C'00'\n         DC    C')-'\nUNIT     DC    C'DEV# '\nCTYPE    EQU   *,19\nMASTER   DC    CL5' '\nSYS      DC    CL4' '\nIO       DC    CL4' '\nCONS     DC    CL4' '\nDECDATE  DC    CL7' '              YY/DDD\nDECTIME  DC    CL13' '             HH:MM:SS.SSIM O\n         DC    CL1' '\nUSERID   DC    CL8' '\nTERMINAL DC    CL8' '\n         DC    CL1' '\nFREEZE   DC    C'R'\nMODE     DC    C' '\nSYSID    DC    CL4' '\nDEVX     DC    C'  '              DEVICE TYPE INDEX NUMBER\nDEVID    DC    C' 999'            UCM ENTRY IDENTIFIER\nASINKLEN EQU   *-TRAILER          TRAILER SIZE FOR ASYNCH UPDATES\n         DC    X'11'              SBA\nINPUTADR DC    X'5CF0'                TO ROW 24, COL 1\n         DC    X'1D40'            ATTR BYTE - UNPROTECTED, LOW INTENS.\n         DC    X'13'              INSERT CURSOR\nUSERLINE DC    CL13' '            USERS COMMAND INPUT LINE\nERROR    DC    XL32'00'           ERROR MSG FIELD  (NULLS FOR INSERTS)\n         DC    X'3C404000'        NULLS TO END        WIDE-SCRN 18NOV99\nENDTRAIL EQU   *\nTRAILEN  EQU   ENDTRAIL-TRAILER LENGTH OF TRAILER\n         SPACE 2\n         LTORG\n         SPACE 2\nNUMUCMS  DS    H\n         DS    0F\nUCMTAB   DS    F\n         DS    99F                PROVIDE SPACE FOR UP TO CN(99)\nUCMTABL  EQU   *-UCMTAB                                         08JUL97\n         SPACE 2\nERRMSG1  DC    CL32'ERROR - Console ID invalid      '\nERRMSG2  DC    CL32'ERROR - Non-numeric value       '\nERRMSG3  DC    CL32'ERROR - Invalid command         '\nERRMSG4  DC    CL32'ERROR - Non-CRT console         '\nERRMSG5  DC    CL32'ERROR - Console not active      '\nERRMSG6  DC    CL32'ERROR - Not in command mode     '\n         SPACE 2\n         DS    0D\n         DC    XL6'00'\n***********************************************************************\n*                                                                     *\n*                  DISPLAY SCREEN - HEADER SECTION                    *\n*                                                                     *\n***********************************************************************\nHEADER   EQU   *\n         DC    X'F1'              WRITE\nWCC      DC    X'C3'              WCC\n***********************************************************************\n*                                                                     *\n*               DISPLAY SCREEN - IMAGE BUFFER SECTION                 *\n*                                                                     *\n***********************************************************************\nBUF      DS    0D                 END OF CSECT\nSPYBUFR  COM\n         DS    8192X\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           D S E C T S                               *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n         SPACE 2\n         CVT   DSECT=YES\n         SPACE 2\n         IKJTCB                                                 GP@SECV\n         SPACE 2\n         IEZJSCB                                                GP@SECV\n         SPACE 2\n         IHAPSA                                                 GP@SECV\n         SPACE 2\n         IKJTSB                                                 GP@SECV\n         SPACE 2\n         IHAASCB                                                GP@SECV\n         SPACE 2\n         IHAASVT                                                GP@P6\n         SPACE 2\n         IRAOUCB                                                GP@P6\n         PRINT GEN\n         EJECT\n*****    IEECDCM                                                GP@SECV\n         IEETDCM                                                APR2008\n         EJECT\n         IEECUCM FORMAT=NEW                                     GP@SECV\n         EJECT\n         IKJPSCB                                                GP@SECV\n         END   IMPXASPY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAT": {"ttr": 21764, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'I\\x00\\x00G\\x01\\x19#\\x1f\\x01\\x19#\\x1f\\x14B\\x02\\x7f\\x02t\\x00\\x00\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "73.00", "flags": 0, "createdate": "2019-08-19T00:00:00", "modifydate": "2019-08-19T14:42:47", "lines": 639, "newlines": 628, "modlines": 0, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1986,2019  PRYCROFT SIX PTY LTD\n         TITLE 'SUPERVISOR CALL TABLE DISPLAY LINE MAPPING'\nSVCLINE  DSECT\nSV_LNAT  DS    XL(L'LOWX)\nSV_NUM   DS    CL4\n         DS    CL1\nSV_HEX   DS    CL2\n         DS    CL1\nSV_AMEP  DS    CL8\n         DS    CL1\nSV_TYP   DS    CL3\n         DS    CL1\nSV_APF   DS    CL3\n         DS    CL1\nSV_ESR   DS    CL3\n         DS    CL1\nSV_AR    DS    CL2\n         DS    CL1\nSV_LOCKS DS    CL5\n         DS    CL1\nSV_MACRO DS    CL16\n         DS    CL1\nSV_PMEM  DS    CL8\n         DS    CL1\nSV_DATE  DS    CL8\nSV_COUNT DS    CL6\n         DS    CL1\nSV_NEWEP DS    CL8\n         DS    CL1\nSV_OLDE  DS    CL17\n         DS    CL1\nSV_CATCH DS    CL115\nSVDL     EQU   *-SV_NUM\nSVLL     EQU   *-SV_LNAT\n         TITLE 'SUPERVISOR CALL TABLE DISPLAY SUBROUTINE'\nIMPXA    CSECT\n         USING SVCLIST,R11,R10\nSVCLIST  DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         L     R5,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R5\n         L     R5,CVTABEND       POINT TO THE SCVT.\n         DROP  R5                CVT.\n         USING SCVTSECT,R5\n         L     R5,SCVTSVCT       POINT TO THE SVC TABLE.\n         DROP  R5                SCVTSECT.\n         ST    R5,MAINTABL       SAVE THE MAIN TABLE'S ADDRESS.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   WINTOP,TTOPLINE   SET TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.\n         ICM   R0,15,ESRSVCNO    LOOKING AT AN ESR TABLE?\n         BNZ   SVPRECMD          YES, ALREADY INITIALIZED SO PROCEED.\n         ST    R5,CRNTABLE       START OFF WITH THE MAIN TABLE.\n         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\nSVPRECMD MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' ADJUST ANY COMMAND INPUT.\n         B     CMDSCANT          PROCESS IT.\n         SPACE\nREDOSVCS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         USING SVCLINE,R2\n         MVC   SV_LNAT,HIGHX     LOAD HEADING ATTRIBUTES.\n         MVI   SV_LNAT+8,X'F3'   SHOW HEADING IN PINK.          (I3279)\n         MVI   SV_LNAT,X'FF'     INDICATE NON-SCROLLABLE LINE.\n         MVI   LL-79(R2),C' '    BLANK DISPLAY LINE.\n         MVC   LL-78(SVDL-1,R2),LL-79(R2)\n         MVC   LL-79(79,R2),HEADINGT     LOAD DISPLAYABLE\n         TR    LL-79(79,R2),XLATETBL          HEADING.\n         LA    R2,SVLL(,R2)      POINT PAST HEADING.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVC   LL-79(SVDL,R2),SVCTCOLS\n         TR    LL-79(SVDL,R2),XLATETBL\n         CLI   ENDDEPTH+1,0      SHOWING MAIN SVC TABLE?\n         BE    SVCHDGOK          YES.\n         MVC   LL-78(6,R2),=C'ES# EC'\nSVCHDGOK LA    R2,SVLL(,R2)      ADJUST BUFFER POINTER.\n         LA    R1,2\n         ST    R1,WINLINES       INITIALIZE LINE COUNTER.\n         DROP  R15               WNDWMNGR.\n         LM    R4,R5,TENTRYCT    GET ENTRY COUNT AND TABLE ADDRESS.\n         SLR   R3,R3             GET THE FIRST ENTRY NUMBER.\n         USING SVCENTRY,R5\nNEXTSVC  MVC   0(LL-79,R2),LOWX  LOW INTENSITY AND GREEN.\n         MVI   LL-80(R2),X'F4'   GREEN.                         (I3279)\n         MVI   LL-79(R2),C' '    BLANK DISPLAY LINE.\n         MVC   LL-78(SVDL-1,R2),LL-79(R2)\n         CVD   R3,WORK\n         CLC   CRNTABLE,MAINTABL IS THIS THE MAIN SVC TABLE?\n         BE    SVCNOOK           YES, GET THE RIGHT SVC NUMBER.\n         L     R0,ESRSVCNO       NO, GET THE ESR SVC NUMBER.\n         CVD   R0,WORK\nSVCNOOK  MVC   SV_NUM,ED3        SHOW SVC NUMBER IN DECIMAL.\n         ED    SV_NUM,WORK+6\n         STC   R3,WORK\n         UNPK  SV_HEX(3),WORK(2)\n         TR    SV_HEX,HEX-C'0'\n         MVI   SV_HEX+2,C' '     SHOW SVC NUMBER IN HEXADECIMAL.\n         UNPK  SV_AMEP(9),SVCEP(5)   (MIGHT BE ESR ENTRY CODE.)\n         TR    SV_AMEP,HEX-C'0'\n         MVI   SV_AMEP+8,C' '    SHOW AMODE AND ENTRY POINT ADDRESS.\n         TM    SVCATTR1,SVCTP34  CHECK THE FIRST TWO TYPE BITS.\n         BZ    TYPE1OR6          ZERO SO IT IS A TYPE 1 OR TYPE 6.\n         BNO   SVCNOT34          NOT AN LPA TYPE.\n         MVC   SV_TYP,=C'3/4'    YES, IT IS A TYPE 3 OR TYPE 4.\n         B     SVCTYPED          NOW HAVE THE SVC TYPE.\nSVCNOT34 MVI   SV_TYP+1,C'2'     ASSUME A TYPE 2.\n         TM    SVCATTR1,SVCTP2   TEST THIS ASSUMPTION.\n         BO    SVCTYPED          CORRECT.\n         MVI   SV_TYP+1,C'5'     ER, A TYPE 5 PERHAPS?\n         B     SVCTYPED          NOW HAVE THE SVC TYPE.\nTYPE1OR6 MVI   SV_TYP+1,C'1'     ASSUME A TYPE 1.\n         TM    SVCATTR1,SVCTP6   TEST THIS ASSUMPTION.\n         BZ    SVCTYPED          CORRECT.\n         MVI   SV_TYP+1,C'6'     IT IS A TYPE 6 AFTER ALL.\nSVCTYPED TM    SVCATTR1,SVCASF   CAN THE SVC BE ASSISTED?\n         BZ    SVCASIST          NO.\n         OI    LL-80(R2),X'01'   YES, ENABLE BLUE COMPONENT.    (I3279)\n         MVI   4(R2),X'F4'       MEDIUM INTENSITY FOR ASSIST ALLOWABLE.\nSVCASIST TM    SVCATTR1,SVCNP    NON-PREEMPTIVE SVC?\n         BZ    SVCPREMP          NO.\n         MVI   2(R2),X'F2'       YES, SET REVERSE VIDEO.        (I3279)\n         MVI   5(R2),X'50'       ALSO SET REVERSE VIDEO.        (F9526)\nSVCPREMP TM    SVCATTR1,SVCAPF   IS APF AUTHORIZATION REQUIRED FOR USE?\n         BZ    SVCAPFED          NO.\n         MVC   SV_APF,=C'YES'\n         MVI   4(R2),X'F8'       HIGH INTENSITY FOR APF.\n         OI    LL-80(R2),X'02'   ENABLE RED COMPONENT OF COLOR. (I3279)\nSVCAPFED TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?\n         BZ    SVCESRED          NO.\n         MVC   SV_ESR,=C'YES'\nSVCESRED LA    R6,SVCLOCKS       POINT TO SVC LOCK FLAGS.\n         TM    OSBITS,X'13'      MVS?\n         BNO   SVLOCKF4          NO, IT MUST BE MSP.\n         TM    SVCATTR3,SVCAR    CAN SVC BE ISSUED IN AR MODE?\n         BZ    SVLOCKOK          NO.\n         MVC   SV_AR,=C'OK'\n         B     SVLOCKOK\nSVLOCKF4 BCTR  R6,0              NO, ADJUST FOR MSP.\nSVLOCKOK TM    0(R6),SVCLL       LOCAL LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   SV_LOCKS,C'L'     YES.\n         TM    0(R6),SVCCMS      CMS LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   SV_LOCKS+1,C'C'   YES.  (CROSS MEMORY SERVICES.)\n         TM    0(R6),SVCOPT      OPT (SRM) LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   SV_LOCKS+2,C'O'   YES.  (SYSTEM RESOURCE MANAGEMENT.)\n         TM    0(R6),SVCALLOC    SALLOC LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   SV_LOCKS+2,C'S'   YES.  (SPACE ALLOCATION.)\n         TM    0(R6),SVCDISP     DISP LOCK REQUIRED?\n         BZ    *+8               NO.\n         MVI   SV_LOCKS+4,C'D'   YES.  (DISPATCHER.)\n***      LA    R15,SVIAESR(,R2)  POINT TO EYE-CATCHER DISPLAY AREA.\n***      LA    R6,SVILESR        LOAD MAXIMUM DETAILS LENGTH.\n         CLC   CRNTABLE,MAINTABL STILL USING THE ACTUAL SVC TABLE?\n         BNE   GOTMACRO          NO, DON'T HAVE THE MACRO DETAILS.\n         CH    R3,=Y(MAXMACRO)   IS THERE A MACRO FOR THIS SVC?\n         BH    GOTMACRO          NO.\n         LR    R7,R3             YES, GET SVC NUMBER.\n         SLL   R7,4              MULTIPLY BY SIXTEEN.\n         LA    R9,SVCMACRO(R7)   POINT TO MACRO NAME.\n         MVC   SV_MACRO,0(R9)    LOAD MACRO NAME(S).\nGOTMACRO L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTABEND       POINT TO THE SCVT.\n         DROP  R1                CVT.\n         USING SCVTSECT,R1\n         L     R1,SCVTSVCR       POINT TO THE SVC UPDATE TABLE.\n         DROP  R1                SCVTSECT.\n         CLC   CRNTABLE,MAINTABL USING THE ACTUAL SVC TABLE?\n         BE    GOTUPDTB          YES, HAVE THE UPDATE TABLE.\n         L     R0,ESRSVCNO       NO, GET THE ESR SVC NUMBER.\n         AHI   R1,256*24+8       POINT TO NEXT UPDATE ARRAY.\n         CHI   R0,109            IS IT THIS ESR?\n         BE    GOTUPDTB          YES, HAVE THE UPDATE TABLE.\n         AHI   R1,256*24+8       POINT TO NEXT UPDATE ARRAY.\n         CHI   R0,116            IS IT THIS ESR?\n         BE    GOTUPDTB          YES, HAVE THE UPDATE TABLE.\n         AHI   R1,256*24+8       POINT TO NEXT UPDATE ARRAY.\n         CHI   R0,122            IS IT THIS ESR?\n         BE    GOTUPDTB          YES, HAVE THE UPDATE TABLE.\n         AHI   R1,256*24+8       POINT TO NEXT UPDATE ARRAY.\nGOTUPDTB LR    R0,R3             COPY THE SVC/ENTRY NUMBER.\n         SLL   R0,3              MULTIPLY BY EIGHT.\n         ALR   R1,R0             ADD ONE THIRD OF THE INDEX.\n         SLL   R0,1              GET SIXTEEN TIMES SVC NUMBER.\n         ALR   R1,R0             POINT TO THE RIGHT UPDATE ENTRY.\n         USING SVCURT,R1\n         ICM   R0,3,SVCURCNT     GET THE UPDATE COUNT.\n         BZ    SVCUPDOK          ZERO ENTRY.\n         CVD   R0,WORK\n         MVC   SV_COUNT,ED5      SHOW THE UPDATE COUNT.\n         ED    SV_COUNT,WORK+5\n         CLI   22(R1),C' '       RELATED TO PARMLIB MEMBER?\n         BNH   SVCPRMOK          NO.\n         MVC   SV_PMEM(6),=C'IEASVC'\n         MVC   SV_PMEM+6(2),SVCURSX YES, SHOW MEMBER NAME.\nSVCPRMOK UNPK  SV_NEWEP(9),SVCURNEW(5) SHOW NEW ENTRY POINT\n         UNPK  SV_OLDE(9),SVCUROLD(5)   AND OLD ENTRY.\n         UNPK  SV_OLDE+9(9),SVCUROLD+4(5)\n         TR    SV_NEWEP(26),HEX-C'0'\n         MVI   SV_NEWEP+8,C' '\n         MVI   SV_OLDE+8,C'-'\n         MVI   SV_OLDE+17,C' '\n         TM    SVCURDAT+3,X'0F'  EXPECTED SIGN IN DATE SLOT?\n         BNO   SVCUPDOK          NO, PROBABLY DATE FIELD IS ZERO.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         L     R1,SVCURDAT       LOAD CVTDATE OF UPDATE EVENT.\n         DROP  R1                SVCURT.\n         BASR  R14,R7\n         MVC   SV_DATE,WORK      SHOW CHANGE YY-MM-DD.\nSVCUPDOK LA    R15,SV_CATCH      POINT TO EYE-CATCHER DISPLAY AREA.\n         LA    R6,L'SV_CATCH     LOAD MAXIMUM DETAILS LENGTH.\n         L     R7,SVCEP          GET ENTRY POINT ADDRESS.\n         LA    R7,0(,R7)         ENSURE ADDRESS FORMAT.\n         LTR   R7,R7\n         BNP   EOSVDTLS          IGNORE IF ZERO.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    TMODEOK1          NO.\n         LR    R9,R15            YES, SAVE REGISTER.\n         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.\n         LR    R15,R9            RESTORE REGISTER.\n         OI    MODESW2,KEY0      REMEMBER KEY ZERO STATUS.\nTMODEOK1 LA    R9,4              REMEMBER LENGTH OF BRANCH INSTRUCTION.\n         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?\n         BZ    SVNUCTST          NO.\n         MVC   0(4,R15),0(R7)    YES, LOAD ESR AND TYPE LABEL.\n         TR    0(4,R15),SVCXLATE JUST IN CASE THINGS CHANGE.\n         B     EOSVDTLS          THAT'S ALL THERE IS.\nSVNUCTST L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTNUCMP       POINT TO THE NUCLEUS MAP.\n         DROP  R1                CVT.\n         LR    R0,R1             COPY THIS ADDRESS.\n         A     R0,12(,R1)        ADD SIZE TO POINT PAST NUCLEUS MAP.\nSVNUCELP LA    R1,16(,R1)        POINT TO FIRST/NEXT ENTRY.\n         CR    R1,R0             GONE PAST NUCLEUS MAP?\n         BNL   SVBRANCH          YES, MUST BE ELPA TYPE SVC.\n         C     R7,8(,R1)         COMPARE ADDRESS WITH THIS ENTRY.\n         BL    SVBRANCH          PAST IT - MUST BE LPA TYPE SVC.\n         BH    SVNUCELP          NOT UP TO IT YET.\n         MVC   0(8,R15),0(R1)    LOAD IN ENTRY POINT NAME.\n         CLC   =C'ERROR',3(R15)  UNUSED SVC?\n         BE    EOSVDTLS          YES, LEAVE OBVIOUS NAME SHOWING.\n         CLC   =C'RETRN',3(R15)  DUMMY SVC?\n         BE    EOSVDTLS          YES, LEAVE OBVIOUS NAME SHOWING.\n         TM    12(R1),X'10'      JUST AN ENTRY POINT?\n         BO    SVBRANCH          NO, FULLY-FLEDGED CSECT.\n         LA    R0,16             GET LENGTH OF NUCLEUS MAP ENTRY.\nSVSECTLP SLR   R1,R0             POINT TO PREVIOUS ENTRY.\n         LR    R14,R7            COPY ENTRY POINT ADDRESS.\n         L     R7,8(,R1)         GET PRECEDING ENTRY POINT ADDRESS.\n         TM    12(R1),X'10'      BACK TO OWNING CSECT YET?\n         BZ    SVSECTLP          NO, BACK UP ANOTHER ONE.\n         CLI   0(R7),C'I'        DOES CSECT START WITH IBM EYE-CATCHER?\n         BNE   SVBRANCH          NO, FULLY-FLEDGED CSECT.\n         LR    R1,R14            YES, POINT TO FIRST NON-CSECT EP.\n         SR    R1,R7             SET UPPER LENGTH TO NON-TEXT.\n         AHI   R7,-4             POINT TO FOUR BYTES BEFORE IT.\n         B     DOSVCTXT          LOAD IT.\nSVBRANCH CLC   0(2,R7),=X'47F0'  FOUND A BRANCH?\n         BE    MVICTCHR          YES, GO LOAD EYE-CATCHER.\n         CLC   0(2,R7),=X'A7F4'  FOUND A BRANCH?\n         BE    MVICTCHR          YES, GO LOAD EYE-CATCHER.\n         CLI   0(R7),X'05'       FOUND A BALR FOR ADDRESSABLILITY?\n         BE    SVBASBAL          YES.\n         CLI   0(R7),X'06'       DECREMENTING BASE REGISTER?\n         BE    SVBCTR            YES.\n         CLI   0(R7),X'07'       FOUND AN BCR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'0D'       FOUND A BASR FOR ADDRESSABLILITY?\n         BE    SVBASBAL          YES.\n         CLI   0(R7),X'12'       FOUND AN LTR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'17'       FOUND AN XR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'18'       FOUND AN LR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'1B'       FOUND AN SR?\n         BE    SVFDLREG          YES.\n         CLI   0(R7),X'1F'       FOUND AN SLR?\n         BE    SVFDLREG          YES.\n         B     LASTGASP          FORGET THE EYE-CATCHER.\nSVBASBAL LA    R7,2(,R7)         YES, POINT PAST BASR OR BALR.\n         LA    R9,4              RESET BASE REG. OFFSET ACCUMULATOR.\n         B     SVBRANCH          TRY FOR BRANCH AGAIN.\nSVBCTR   TM    1(R7),X'0F'       IS R2 OF BCTR ZERO?\n         BNZ   LASTGASP          NO, FORGET EYE-READABLE DETAILS.\n         LA    R9,1(,R9)         INCREMENT BASE OFFSET ACCUMULATOR.\nSVFDLREG LA    R9,2(,R9)         ADJUST BASE OFFSET ACCUMULATOR.\n         LA    R7,2(,R7)         POINT PAST RR-FORMAT INSTRUCTION.\n         B     SVBRANCH          TRY FOR BRANCH AGAIN.\nMVICTCHR SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,3(,R7)         GET TARGET OFFSET OF BRANCH.\n         CLI   0(R7),X'A7'       IS IT A JUMP?\n         BNE   *+8               NO\n         SLA   R1,1              YES, CONVERT HALFWORDS TO BYTES.\n         SR    R1,R9             GET SIZE OF BRANCH JUMP.\n         CLI   4(R7),C'A'        DOES DATA BEGIN WITH A LENGTH CODE?\n         BNL   GOTILNTH          NO.\n         LA    R7,1(,R7)         DON'T SHOW LENGTH CODE.\nGOTILNTH LTR   R1,R1             IS IT ZERO LENGTH?\n         BNP   LASTGASP          YES, NOTHING TO LOAD.\nSVCLJUST CLC   4(2,R7),=X'47F0'  FOUND ANOTHER BRANCH?\n         BE    SVCJUST4          YES, SKIP FOUR BYTES OF INSTRUCTION.\n         CLC   4(2,R7),=X'A7F4'  FOUND ANOTHER JUMP?\n         BE    SVCJUST4          YES, SKIP FOUR BYTES OF INSTRUCTION.\n         MVC   WORK(3),4(R7)     NO, COPY THE FIRST CHARACTER.\n         TR    WORK(3),SVCXLATE  FILTER OUT RUBBISH.\n         CLI   WORK+1,C' '       ONE CHARACTER FOLLOWED BY A BLANK?\n         BE    SVCJUST1          YES, DISCARD THIS CHARACTER.\n         CLI   WORK,C'0'         FIRST CHARACTER OF INTEREST?\n         BL    SV1STNTN          PERHAPS, FIRST CHARACTER NOT NUMERIC.\n         CLI   WORK+1,C'0'       FIRST TWO CHARACTERS NUMERIC?\n         BL    SVCJUST1          NO, SUPPRESS A LEADING SINGLE DIGIT.\n         CLI   WORK+2,C'/'       PART OF A DATE?\n         BE    DOSVCTXT          GOSH, I HOPE SO.\n         CLI   WORK+2,C'.'       PART OF A DATE OR TIME?\n         BE    DOSVCTXT          GOSH, I HOPE SO.\n         CLI   WORK,C'5'         FIRST CHARACTER A FIVE?\n         BNE   SVCJUST1          NO, DISCARD.\n         B     DOSVCTXT          YES, COULD BE PRODUCT NUMBER.\nSV1STNTN CLI   WORK,C'A'         FIRST CHARACTER OF INTEREST?\n         BNL   DOSVCTXT          YES, DISPLAY IT ALL.\nSVCJUST1 LA    R7,1(,R7)         NO, SKIP IT.\n         BCT   R1,SVCLJUST       EXAMINE NEXT CHARACTER.\n         B     LASTGASP          FORGET IT IF ONLY ONE BYTE LONG.\nSVCJUST4 LA    R7,4(,R7)         SKIP OVER BRANCH INSTRUCTION.\n         AHI   R1,-4             ADJUST REMAINING DATA LENGTH.\n         BP    SVCLJUST          CONTINUE WITH LEFT JUSTIFICATION.\nLASTGASP L     R7,SVCEP          LAST DESPERATE EFFORT - GET EP AGAIN.\n         LR    R0,R7             COPY IT.\n         SRL   R0,12\n         SLL   R0,12\n         CR    R7,R0             IS ENTRY POINT ON PAGE BOUNDARY?\n         BE    EOSVDTLS          YES, DON'T BACK UP, JUST GIVE UP.\n         AHI   R7,-8             NO, POINT TO BEFORE ENTRY POINT.\n         TM    OSBITS,X'13'      MVS?\n         BO    TIGTEST           YES, LOOK FOR MVS NAME PREFIX.\n         CLI   1(R7),C'F'        FUJITSU LABEL BEFORE ENTRY POINT?\n         B     TVENDOR\nTIGTEST  CLC   0(2,R7),=C'IG'    IBM LABEL BEFORE ENTRY POINT?\nTVENDOR  BNE   EOSVDTLS          NO, I GIVE UP.\n         MVC   0(8,R15),0(R7)    LOOKS LIKE IT SO COPY IT.\n         TR    0(8,R15),SVCXLATE FILTER OUT ANY RUBBISH.\n         B     EOSVDTLS          HOORAY!!\nDOSVCTXT LR    R0,R2             SAVE CURRENT LINE POINTER.\n         CR    R1,R6             IS LENGTH BIGGER THAN MAXIMUM?\n         BNH   GOTBSIZE          NO, USE LENGTH DERIVED FROM MODULE.\n         LR    R1,R6             YES, USE MAXIMUM.\nGOTBSIZE TRT   4(1,R7),TICATCTB  IS THIS BYTE DISPLAYABLE?\n         LR    R2,R0             RESTORE CURRENT LINE POINTER.\n         BNZ   EOSVDTLS          NO, END OF EYE-CATCHER STRING.\n         MVC   0(1,R15),4(R7)    YES, COPY THE CHARACTER.\n         LA    R15,1(,R15)       POINT TO NEXT TARGET ADDRESS.\n         LA    R7,1(,R7)         POINT TO NEXT SOURCE ADDRESS.\n         BCT   R1,GOTBSIZE       CONTINUE.\n         DROP  R2                SVCLINE.\nEOSVDTLS TM    MODESW2,KEY0      IN KEY ZERO?\n         BZ    TMODEOK2          NO.\n         MODESET MF=(E,MDSETN0)  YES.\n         NI    MODESW2,255-KEY0  NOT ANYMORE.\nTMODEOK2 TR    LL-79(SVDL,R2),XLATETBL\n         LA    R2,SVLL(,R2)      ADJUST BUFFER POINTER.\n         LA    R3,1(,R3)         INCREMENT SVC NUMBER.\n         LA    R5,8(,R5)         POINT TO THE NEXT SVC TABLE ENTRY.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   PUTSCRNT          IF YES, THEN FORGET SUMMARY LINE.\n         BCT   R4,NEXTSVC        PROCESS NEXT SVC TABLE ENTRY.\n         DROP  R5                SVCENTRY.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\nPUTSCRNT LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNT L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    NOTEXITT          NO, PROCESS SUBCOMMAND.\nISEXITT  L     R15,WINMANAD      YES, POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVC   TTOPLINE,WINTOP   SAVE TOP-OF-SCREEN LINE NUMBER.\n         DROP  R15               WNDWMNGR.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nNOTEXITT CLI   INBUFF,3          PF3/15?\n         BE    RESETESR          YES, SHOW MAIN SVC TABLE.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    SVCAUTO           YES.\nCMDSCANT CLI   INCHARS,C'E'      ESR TABLE FORMAT REQUESTED?\n         BE    ISESRCMD          YES.\n         CLI   INCHARS,C' '      DISPLAY UPDATE REQUESTED?\n         BNE   GIVEHLPT          NO, SHOW HELP PANEL.\n*        CLI   INBUFF+1,3        CURSOR ON HEADING LINE?\n*        BL    REDOSVCS          YES, RESHOW THE SCREEN.\n*        CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?\n*        BE    REDOSVCS          YES, RESHOW THE SCREEN.\n         SLR   R0,R0\n         IC    R0,INBUFF+1       GET THE CURSOR ROW NUMBER.\n         AHI   R0,-3             DO NOT COUNT HEADING LINES.\n         BM    REDOSVCS          CURSOR ON HEADING LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         A     R0,WINTOP         GET DETAIL LINE NUMBER.\n         AH    R0,WINHDGCT       COUNT THE HEADING LINES.\n         C     R0,WINLINES       BEFORE SUMMARY LINE?\n         BNL   REDOSVCS          NO, CURSOR PAST END OF MAP.\n         SH    R0,WINHDGCT       RESTORE DETAIL LINE NUMBER.\n         BCTR  R0,0              GET TABLE ENTRY (SVC) NUMBER.\n         LR    R6,R0             COPY IT.\n         SLL   R0,3              MULTIPLY BY EIGHT FOR INDEX.\n         L     R3,CRNTABLE       POINT TO THE CURRENT SVC TABLE.\n         ALR   R3,R0             POINT TO REQUESTED SVC TABLE ENTRY.\n         USING SVCENTRY,R3\n         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?\n         BO    TESRZOOM          YES.\n         L     R1,=A(BRWSPNTR)\n         MVC   0(4,R1),SVCEP     SUPPLY NEW BROWSE ADDRESS.\n         NI    0(R1),X'7F'       RESET THE SIGN BIT.\n         MVC   INBUFF(9),TZMSTR  SUPPLY THE ZOOM COMMAND STRING.\n         MVI   TGETLEN+1,9       SUPPLY \"INPUT\" DATA LENGTH.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNT          ZOOM TO OPTION \"VB\".\n         DROP  R15,R3            WNDWMNGR, SVCENTRY.\nSVCAUTO  MVI   INBUFF,X'F8'      SIMULATE A SCROLL DOWN REQUEST.\n         MVI   TGETLEN+1,3       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNT          GO SCROLL DOWN A PAGE.\nISESRCMD CLI   INCHARS+1,C'/'    DISPLAY MAIN TABLE REQUEST?\n         BE    RESETESR          YES.\nTGETESR# MVI   ESRPRMTE,X'C1'    RESET WCC.\n         LA    R0,GTESRELN       LOAD THE LENGTH OF THE DATA STREAM.\n         LA    R1,ESRPRMTE       POINT TO PROMPTING MESSAGE.\n         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.\n         TM    255(R15),X'10'    JAPANESE DISPLAY?\n         BZ    ASKESRNO          NO, USE ENGLISH PROMPT.\n         MVI   ESRPRMTJ,X'C1'    RESET WCC.\n         LA    R0,GTESRJLN       LOAD THE LENGTH OF THE DATA STREAM.\n         LA    R1,ESRPRMTJ       POINT TO PROMPTING MESSAGE.\nASKESRNO BAS   R14,SCREENIO      ISSUE PROMPT AND GET ESR NUMBER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    ISEXITT           YES, PERFORM TERMINATION.\n         CLI   INBUFF,3          PF3/15?\n         BE    RESETESR          YES, ASSUME PROMPT CANCEL REQUESTED.\n         LA    R15,INCHARS       POINT TO START OF TEXT.\n         LH    R0,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R0,-6             GET LENGTH OF TEXT.\n         BNP   RESETESR          HANDLE NULL INPUT.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    TGETESR#          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         SLR   R1,R1             CLEAR ESR SVC NUMBER.\nJUSTESR# CLI   0(R15),C' '       INPUT CHARACTER A BLANK?\n         BNE   CHKESR#           NO, INPUT IS LEFT JUSTIFIED.\n         LA    R15,1(,R15)       YES, POINT TO NEXT TEXT BYTE.\n         BCT   R0,JUSTESR#\nRESETESR LA    R4,256            NULL INPUT SO GET NUMBER OF SVCS.\n         L     R5,MAINTABL       GET ADDRESS OF MAIN SVC TABLE.\n         STM   R4,R5,TENTRYCT    STORE THESE.\n         ICM   R3,15,ESRSVCNO    GET THE ESR SVC NUMBER.\n         BZ    TESCRLOK          NONE SO AVOID SCROLLING.\n         LA    R3,1(,R3)         GET ITS LINE NUMBER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         ST    R3,WINTOP         MAKE THIS THE NEW TOP DETAIL LINE.\n         DROP  R15               WNDWMNGR.\nTESCRLOK MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.\n         XC    ESRSVCNO,ESRSVCNO CLEAR ESR NUMBER.\n         B     REDOSVCS          GO FORMAT NEW SCREEN IMAGE.\nCHKESR#  CLI   0(R15),C'0'       NUMERIC CHARACTER?\n         BL    GOTESR#           NO, END OF INPUT TEXT PARSING.\n         SLL   R1,8              GET ROOM FOR ANOTHER DIGIT.\n         IC    R1,0(,R15)        LOAD UNPACKED DIGIT.\n         LA    R15,1(,R15)       POINT TO NEXT TEXT BYTE.\n         BCT   R0,CHKESR#        EXAMINE NEXT DIGIT, IF ANY.\nGOTESR#  ST    R1,WORK           GET UNPACKED NUMBER.\n         OI    WORK+3,X'F0'      ENSURE A VALID DECIMAL SIGN.\n         PACK  WORK+6(2),WORK+1(3)\n         XC    WORK(6),WORK      LEAVE PACKED NUMBER IN DOUBLEWORD.\n         CVB   R6,WORK           GET EQUIVALENT BINARY.\n         LA    R0,256            GET NUMBER OF SVCS.\n         CR    R6,R0             VALID SVC NUMBER?\n         BNL   ESRERROR          NO, CAN'T BE AN ESR.\nTESRZOOM LR    R1,R6             COPY THE POTENTIAL ESR SVC NUMBER.\n         SLL   R1,3              GET INDEX INTO SVC TABLE.\n         AL    R1,MAINTABL       POINT TO THE SVC TABLE ENTRY.\n         USING SVCENTRY,R1\n         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?\n         BZ    ESRERROR          NO.\n         ST    R6,ESRSVCNO       YES, SAVE THE SVC NUMBER.\n         L     R1,SVCESRAD       POINT TO THE ESR TABLE.\n         TM    OSBITS,X'13'      MVS?\n         BO    ESRTABOS          YES.\n         L     R4,0(,R1)         GET THE NUMBER OF TABLE ENTRIES.\n         LA    R5,4(,R1)         POINT TO THE LOGICAL TABLE ORIGIN.\n         B     ESRTABOK\nESRTABOS L     R4,SVCESRMX       GET THE HIGHEST ENTRY CODE.\n         LA    R4,1(,R4)         GET THE NUMBER OF TABLE ENTRIES.\n         LA    R5,8(,R1)         POINT TO THE LOGICAL TABLE ORIGIN.\n         DROP  R1                SVCENTRY.\nESRTABOK STM   R4,R5,TENTRYCT    SAVE THE ESR TABLE DETAILS.\n         LA    R1,1              GET ONE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         ST    R1,WINTOP         SHOW ESR TABLE FROM THE TOP.\n         DROP  R15               WNDWMNGR.\n         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.\n         B     REDOSVCS          GO FORMAT FROM START OF TABLE.\nESRERROR MVC   ESRERNOE,ED3      SUPPLY SVC NUMBER IN ERROR MESSAGE.\n         ED    ESRERNOE,WORK+6\n         LA    R0,GTESRELX       LOAD THE LENGTH OF THE DATA STREAM.\n         MVI   ESRPRMTE,X'C5'    SET BELL BIT ON IN WCC.\n         LA    R1,ESRPRMTE       POINT TO PROMPTING MESSAGE.\n         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.\n         TM    255(R15),X'10'    JAPANESE DISPLAY?\n         BZ    ASKESRNO          NO, USE ENGLISH PROMPT.\n         MVC   ESRERNOJ,ESRERNOE SUPPLY SVC NUMBER IN ERROR MESSAGE.\n         LA    R0,GTESRJLX       LOAD THE LENGTH OF THE DATA STREAM.\n         MVI   ESRPRMTJ,X'C5'    SET BELL BIT ON IN WCC.\n         LA    R1,ESRPRMTJ       POINT TO PROMPTING MESSAGE.\n         B     ASKESRNO          RE-PROMPT FOR ESR SVC NUMBER.\nGIVEHLPT MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNT          GO DISPLAY HELP PANEL.\n         SPACE\n         DROP  R11,R10           SVCLIST.\n         TITLE 'SVC TABLE DISPLAY - VARIABLES AND CONSTANTS'\nTTOPLINE DC    F'1'              TOP-OF-SCREEN LINE NUMBER.\nTENTRYCT DC    F'256'  \\__ LIKE  NUMBER OF ENTRIES IN CURRENT TABLE.\nCRNTABLE DC    A(0)    /   THIS  ADDRESS OF THE TABLE BEING DISPLAYED.\nMAINTABL DC    A(0)              ADDRESS OF THE MAIN SVC TABLE.\nESRSVCNO DC    F'0'              ESR SVC NUMBER OF TABLE BEING SHOWN.\nSVIAMSP  EQU   LL-24             EYE-CATCHER LINE OFFSET FOR MSP.\nSVILMSP  EQU   SVDL-52           EYE-CATCHER LINE LENGTH FOR MSP.\nSVIAESR  EQU   LL-24-17          EYE-CATCHER LINE OFFSET FOR ESR.\nSVILESR  EQU   SVDL-52+17        EYE-CATCHER LINE LENGTH FOR ESR.\nSVIAMVS  EQU   LL+27             EYE-CATCHER LINE OFFSET FOR MVS.\nSVILMVS  EQU   SVDL-LL-27        EYE-CATCHER LINE LENGTH FOR MVS.\nTZMSTR   DC    X'7D40C11140C1'   READ HEADER FOR SVC ZOOM.\n         DC    C'=VB'            CHARACTER STRING FOR SVC ZOOM.\n         COPY  ESRPRMTE          ENGLISH ESR NUMBER PROMPT.\n         COPY  ESRPRMTJ          JAPANESE ESR NUMBER PROMPT.\nHEADINGT DC    CL79'             SVC TABLE AND EXTENDED SVC ROUTER (ESR+\n               ) TABLE DISPLAY             '\nSVCTCOLS DC    C' SVC-NO AMODE/EP TYP APF ESR AR LOCKS MACRO -COMPONENT+\n                PARM-MEM CHG-DATE+COUNT NEW-ADDR PRIOR-TABLE-ENTRY '\nSVCTDTLS DC    3CL71'MODULE-NAME/EYE-CATCHER '\n         DS    0H\nTICATCTB DC    4XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  00->3F\n         DC    2XL16'00FFFFFFFFFFFFFFFFFF000000000000'  40->5F\n         DC    1XL16'0000FFFFFFFFFFFFFFFF000000000000'  60->6F\n         DC    1XL16'0000FFFFFFFFFFFFFF00000000000000'  70->7F\n         DC    3XL16'FF000000000000000000FFFFFFFFFFFF'  80->AF\n         DC    1XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  B0->BF\n         DC    2XL16'00000000000000000000FFFFFFFFFFFF'  C0->DF\n         DC    1XL16'00FF0000000000000000FFFFFFFFFFFF'  E0->EF\n         DC    1XL16'00000000000000000000FFFFFFFFFFFF'  F0->FF\n*                <--------------><-------------->\nSVCXLATE DC    C'                                '     LIKELY\n         DC    C'                                '     EYE-CATCHER\n         DC    C'           .<(+            $*); '     CHARACTERS.\n         DC    C'-/         ,%_>           :#@   '\n         DC    C'                                '\n         DC    C'                                '\n         DC    C' ABCDEFGHI       JKLMNOPQR      '\n         DC    C'  STUVWXYZ      0123456789      '\n*                <--------------><--------------><-------------->\nSVCMACRO DC    C'EXCP/XDAP       WAIT/WAITR/PRTOVPOST            '    2\n         DC    C'EXIT            GETMAIN         FREEMAIN        '    5\n         DC    C'LINK/LINKX      XCTL/XCTLX      LOAD            '    8\n         DC    C'DELETE          GETMAIN/FREEMAINTIME            '   11\n         DC    C'SYNCH/SYNCHX    ABEND           SPIE            '   14\n         DC    C'ERREXCP         PURGE           RESTORE         '   17\n         DC    C'BLDL/FIND  -BPAMOPEN    -O/C/EOVCLOSE   -O/C/EOV'   20\n         DC    C'STOW       -BPAMOPEN TYPE=J -OCECLOSE TYPE=T-OCE'   23\n         DC    C'DEVTYPE     -SAMTRKBAL      -SAMCATALOG/LOCATE  '   26\n         DC    C'OBTAIN    -DADSMCVOL    -PRE-MVSSCRATCH   -DADSM'   29\n         DC    C'RENAME    -DADSMFEOV    -O/C/EOV{RE}ALLOC -DADSM'   32\n         DC    C'IOHALT          MGCR/QEDIT  -CMDWTO/WTOR   -COMM'   35\n         DC    C'WTL             SEGLD/SEGWT              -OS/360'   38\n         DC    C'LABEL -UTILITIESEXTRACT         IDENTIFY        '   41\n         DC    C'ATTACH/ATTACHX  CIRB            CHAP            '   44\n         DC    C'OVLYBRCH        TTIMER/STIMERM  STIMER/STIMERM  '   47\n         DC    C'DEQ             TEST     -OS/360                '   50\n         DC    C'SNAP{X}/SDUMP{X}RESTART -CKPT/RSRELEX      -BDAM'   53\n         DC    C'DISABLE    -ISAMEOV     -O/C/EOVENQ/RESERVE     '   56\n         DC    C'FREEDBUF   -BDAMREL+REQBUF -BTAMOLTEP     -OLTEP'   59\n         DC    C'{E}STAE/{E}STAI IKJEGS6A   -TESTDETACH          '   62\n         DC    C'CHKPT   -CKPT/RSRDJFCB  -O/C/EOV    -OS/360 QSAM'   65\n         DC    C'BTAMTEST   -BTAMENDREADY   -QTAMSYNADAF/SYNADRLS'   68\n         DC    C'BSP        -BSAMGSERV       -GAMASGN+RLSEBFR-GAM'   71\n         DC    C'CHATR      -COMMSPAR        -GAMDAR         -GAM'   74\n         DC    C'DQUEUE      -GAMIFBSTAT  -LOGRECQTAMTEST   -QTAM'   77\n         DC    C'LSPACE    -DADSMSTATUS                          '   80\n         DC    C'SETPRT+DEV  -SAMDASDR   -PRE-DFPSMFWTM/SMFEWTM  '   83\n         DC    C'GRAPHICS    -GAMDDRSWAP         ATLAS -UTILITIES'   86\n         DC    C'DOM        -COMMMOD88   -MVS/370EMSRV    -OS/VS1'   89\n         DC    C'XQMNGR   -OS/VS1VOLSTAT         TCBEXCP         '   92\n         DC    C'TGET/TPUT/TPG   -TSO TERMNL CNTLSYSEVENT        '   95\n         DC    C'STAX            IKJEGS9G   -TESTPROTECT   -DADSM'   98\n         DC    C'DYNALLOC        IKJEFFIB -TSO CPQTIP       -TCAM'  101\n         DC    C'AQCTL      -TCAMXLATE   -O/C/EOVTOPCTL     -TCAM'  104\n         DC    C'IMGLIB      -SAMISOLATE         MODESET         '  107\n         DC    C'                ESPIE/MSGDISP         -CMD SCHED'  110\n         DC    C'JECS        -JESPGRLSE          PGFIX/PGFREE &&C.' 113\n         DC    C'EXCPVR          BLKPAGE         CALLDISP  -+BTAM'  116\n         DC    C'DEBCHK                          TESTAUTH        '  119\n         DC    C'GETMAIN/FREEMAINVSAM       -VSAMLINK/XCTL/LOAD  '  122\n         DC    C'PURGEDQ/SPOST   TPIO       -VTAMEVENTS          '  125\n         DC    C'            -MSS                                '  128\n         DC    C'                RACHECK    -RACFRACINIT    -RACF'  131\n         DC    C'RACLIST    -RACFRACDEF     -RACF                '  134\n         DC    C'                                CALLDISP        '  137\n         DC    C'PGSER           CVAFDIR+DSM+SEQ CROSSPTN -OS/VS1'  140\n         DC    C'                                CUSP+PCF MACROS '  143\n         DC    C'PTRACE  -OPENMVS     -DEBUG TOOLBPESVC -IMS OTMA'  146\n*                <--------------><--------------><-------------->\nMAXMACRO EQU   146\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAU": {"ttr": 22021, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'*\\x13\\x00\\x00\\x00\\x94\\x17\\x1f\\x01\\x06\\x11\\x1f#9\\x06\\xe6\\x06a\\x01\\x0c\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "42.19", "flags": 0, "createdate": "1994-06-20T00:00:00", "modifydate": "2006-04-21T23:39:00", "lines": 1766, "newlines": 1633, "modlines": 268, "user": "UBQ001"}, "text": "*        COPYRIGHT (C) 1986,1994,2006  PRYCROFT SIX PTY LTD\n         TITLE 'UNIT STATUS SAMPLING MONITOR'\n         USING UNITSAMP,R11,R8\nUNITSAMP DS    0H\n         LA    R8,2048(,R11)     INITIALIZE SECOND\n         LA    R8,2048(,R8)                        BASE REGISTER.\n         L     R10,IMCOMADR      POINT TO THE IMP/XA COMMON AREA.\n         USING IMPXACOM,R10\n         L     R1,SMCAADDR       GET SMCA ADDRESS.\n         MVC   ULOGSID,16(R1)    COPY SMF SYSTEM ID.\n         MVC   ULOGCOMP,=C'IMXA'\n         MVI   ULOGFLG,X'CE'     SET SUBSYS+SUBTYPE+ESA+XA+VS2 FLAGS.\n         MVI   ULOGRTY,222       LOAD A SILLY \"SMF\" RECORD TYPE.\n         MVC   ULOGSBTY,FFFF     ZERO OUT SUB-TYPE.\n         CLI   INCHARS+1,C' '    ANY OPTION PRE-SPECIFIED?\n         BNH   REDOUNIT          NO.\n         MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' ' YES, ADJUST ANY COMMAND INPUT.\n         B     CMDSCANU          PROCESS IT.\n         SPACE\nREDOUNIT DS    0H\n         ICM   R3,15,THEUCBAD    TARGET UCB AVAILABLE?\n         BZ    FINDUNIT          NO, GO GET ONE.\n         CLI   THEUCBAD,X'DD'    TRANSFERRED FROM OPTION \"D\"?\n         BE    UNITSCAN          YES, UPDATE UCB ADDRESS.\n         OI    UNITSCYL,X'80'    INVALIDATE/RESET COUNTERS.\n         XC    ULOGZERO,ULOGZERO\n         OI    UTIMEB4,X'80'     INVALIDATE \"BEFORE\" TIME-OF-DAY.\n         MVI   HDGUCODE,0        RESET HEADING.\n         MVI   ULOGSBTY+1,0      RESET RECORD-LOGGED FLAG.\n         LA    R4,UNITSCHR       POINT TO FIRST SAMPLE ENTRY.\n         LA    R2,100            GET THE NUMBER OF SAMPLES TO BE DONE.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    UB4STUFF          NO, SKIP SYSEVENT SVC.\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\nUB4STUFF LA    R15,32            GET \"UCB PREFIX\" LENGTH.\n         LR    R5,R3             POINT TO COMMON UCB SECTION.\n         SLR   R5,R15            POINT TO PATH MGMT CONTROL WORD.\n         USING UCBPMCW1,R5\n*                                ARE MEASUREMENTS BEING COLLECTED?\n         TM    UCBPMCW1+1,UCBMCMB\n         BZ    UNITINIT          NO, NOT FOR THIS DEVICE.\n         TIME  BIN               YES, GET TIME-OF-DAY.\n         ST    R0,UTIMEB4        SAVE IT.\n         SLR   R15,R15\n         ICM   R15,3,UCBMBI      GET MEASUREMENT BLOCK INDEX.\n         DROP  R5                UCBPMCW1.\n         L     R1,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R1\n         L     R5,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R1                CMCT.\n         SLL   R15,5             GET ENTRY OFFSET INTO CMB.\n         ALR   R5,R15            POINT TO THIS DEVICE'S ENTRY.\n         TM    MODESW4,ECMB      ECMB RATHER THAN CMB FOR DEVICE?\n         BNO   UUSECMB1          NO, DIRECTLY ACCESS THE CMB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BNO   UNITINIT          NO, CANNOT FETCH ECMB DATA.\n         L     R15,IOSECMB@      YES, POINT TO IOSCMB ROUTINE.\n         LR    R1,R3             POINT TO THE UCB.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESS?\n         BNZ   UNITINIT          NO.\n         LA    R5,SECWORKA+48    POINT TO CMB DATA.\nUUSECMB1 MVC   UIOCNTB4,0(R5)    SAVE THE I/O COUNTS.\n         L     R15,4(,R5)        GET DEVICE CONNECT TIME.\n         AL    R15,8(,R5)        ADD FUNCTION PENDING TIME.\n         AL    R15,12(,R5)       ADD DEVICE DISCONNECT TIME.\n         ST    R15,UIOTIMB4      SAVE THE I/O ELAPSED TIME.\n         B     UNITINIT          SKIP THE FIRST WAIT.\nUNITLOOP STIMER WAIT,BINTVL=USAMPLTM  WAIT A BIT.\n         TM    MODESW2,ATTN      ATTENTION INTERRUPT?\n         BO    UNITQUIT          YES, STOP SAMPLING AND TALK TO SCREEN.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   UNITINIT          NO, HAVE ACTUAL STATIC UCB ADDRESS.\n         L     R9,USCANADR       YES, POINT TO UCBSCAN ROUTINE.\n         BR    R9                UPDATE LOCAL COPY OF THE UCB.\n         USING UCBOB,R3\nUNITINIT XC    0(14,R4),0(R4)    RESET DATA IN SAMPLING ENTRY.\n         TM    UCBFLA,UCBDEFER   IS THE DEFER BIT ON?\n         BNO   UNNOTDFR          NO.\n         LA    R0,1              YES.\n         AH    R0,UNITDEFR       INCREMENT CONTROL-UNIT-BUSY COUNTER.\n         STH   R0,UNITDEFR\nUNNOTDFR TM    UCBFLA,UCBNRY     IS THE DEVICE NOT READY?\n         BNO   UNITREDY          NO.\n         LA    R0,1              YES.\n         AH    R0,UNITNRDY       INCREMENT DEVICE-NOT-READY COUNTER.\n         STH   R0,UNITNRDY\n         OI    12(R4),ULNOTRDY   INDICATE NOT READY STATUS.\nUNITREDY MVI   13(R4),X'FF'      USE A \"FUNNY FLAG\" IN CASE NO CHPID.\n         LA    R1,28             GET \"UCB PREFIX\" LENGTH.\n         LR    R5,R3             POINT TO UCB.\n         DROP  R3                UCBOB.\n         SLR   R5,R1             POINT INTO UCB PREFIX.\n         USING UCBLPM,R5\n         LA    R1,UCBCHPS        POINT TO UNIT CHANNEL PATH ARRAY.\n         ICM   R5,8,UCBLPUM      LOAD LAST PATH USED MASK.\n         BM    GTUNTPTH          LAST PATH WAS FIRST CHPID IN ARRAY.\n         DROP  R5                UCBLPM.\n         LA    R0,7              SEVEN OTHER BITS IN THIS BYTE.\nUNTPTHLP LA    R1,1(,R1)         INCREMENT CHANNEL PATH ARRAY POINTER.\n         SLA   R5,1              TEST NEXT BIT.\n         BO    GTUNTPTH          THIS IS IT.\n         BCT   R0,UNTPTHLP       TRY NEXT ONE.\nGTUNTPTH MVC   13(1,R4),0(R1)    SAVE LAST CHANNEL USED TO DEVICE.\n         USING UCBOB,R3\n         TM    UCBSTAT,UCBONLI   IS THE DEVICE ONLINE?\n         BO    UNITONLN          YES.\n         TM    UCBFL5,UCBNALOC   NO, BEING PROCESSED IN OFFLINE MODE?\n         BO    UNITUSED          YES.\n         OI    12(R4),ULOFFLIN   NO, INDICATE OFFLINE AND UNUSED.\n         B     USKIPFSN          NO, GO DETERMINE IF DASD OR NOT.\nUNITONLN TM    UCBSTAT,UCBALOC   IS THE DEVICE ALLOCATED?\n         BNO   USKIPFSN          NO.\nUNITUSED SLR   R0,R0             CLEAR A WORK REGISTER.\n         LR    R5,R3             POINT TO UCB.\n         DROP  R3                UCBOB.\n         LA    R1,44\n         SR    R5,R1             POINT TO UCBIOQF.\n         USING UCBIOQF,R5\n         SLR   R1,R1             RESET QUEUE LENGTH COUNTER.\n         LM    R5,6,UCBIOQF      POINT TO FIRST AND LAST IOQS.\n         DROP  R5                UCBIOQF.\n         LTR   R5,R5             IS THE FIRST POINT ZERO?\n         BZ    GOTUNQLN          YES, NO QUEUING.\n         USING IOQ,R5\nUIOQLOOP TM    IOQFLA,IOQACTV    IS THIS IOQ ACTIVE?\n         BO    NEXTUIOQ          YES, SO THIS IS NOT QUEUED.\n         LA    R1,1(,R1)         NO, WAITING SO INCREMENT POINTER.\nNEXTUIOQ CR    R5,R6             LAST IOQ ON QUEUE?\n         BE    GOTUNQLN          YES, END OF CHAIN.\n         ICM   R5,15,IOQCHAIN    POINT TO NEXT IOQ ON UCB CHAIN.\n         BNZ   UIOQLOOP          PROCESS IT.\n         DROP  R5                IOQ.\n         USING UCBOB,R3\nGOTUNQLN LTR   R1,R1             ANY QUEUING FOUND?\n         BZ    UNITNOTQ          NO.\n         A     R1,UNITQLEN       ADD COUNT TO QUEUE LENGTH TOTAL.\n         ST    R1,UNITQLEN\n         LA    R0,1              YES.\n         AH    R0,UNITQUED       INCREMENT I/O-QUEUED-TO-DEVICE COUNTR.\n         STH   R0,UNITQUED\nUNITNOTQ TM    UCBFLA,UCBBOX     IS THE DEVICE BOXED OFFLINE?\n         BZ    UNITNTBX          NO.\n         OI    12(R4),ULBOXED    YES, INDICATE THIS.\nUNITNTBX CLI   UCBTBYT3,X'80'    MAGNETIC TAPE DEVICE?\n         BNE   USKIPFSN          NO, FORGET FILE SEQUENCE NUMBER.\n         MVI   HDGUCODE,1\n         MVC   8(2,R4),UCBFSEQ   SAVE FILE (DATA SET) SEQUENCE NUMBER.\n         OI    12(R4),ULIOADDR   INDICATE VALID NUMBER OBTAINED.\n         TM    UCBWGT,UCBREW     REWIND ISSUED TO THIS TAPE?\n         BNO   UNITNTDA          NO, CHECK FOR BUSY DEVICE.\n         OI    12(R4),ULREWIND   YES, INDICATE SAME.\nUSKIPFSN CLI   UCBTBYT3,X'20'    DASD DEVICE?\n         BNE   UNITNTDA          NO, PROCESS NON-DIRECT ACCESS DEVICE.\n         SLR   R0,R0             CLEAR A WORK REGISTER.\n         ICM   R0,1,UCBSQC       LOAD RESERVE MACRO INTRUCTION COUNT.\n         BZ    UNITNOTR          NO HARDWARE RESERVES ARE ACTIVE.\n         A     R0,UNITRCNT       ADD COUNT TO RESERVE COUNT TOTAL.\n         ST    R0,UNITRCNT\n         LA    R0,1              YES.\n         AH    R0,UNITRSVD       INCREMENT DISK-RESERVED COUNTER.\n         STH   R0,UNITRSVD\nUNITNOTR CLI   UCBFLA,UCBSTRT    IS THE DISK BUSY WITH USER I/O?\n         BNE   GOTUNTJB          NO, IGNORE IOQ AND IOSB.\n         LA    R0,1              YES.\n         AH    R0,UNITBUSY       INCREMENT DEVICE BUSY COUNTER.\n         STH   R0,UNITBUSY\n         MVC   THEVOLUM,UCBVOLI  UPDATE THE VOLUME SERIAL NUMBER.\n         DROP  R3                UCBOB.\nUNITIOSB LR    R6,R3             GET UCB ADDRESS.\n         AHI   R6,-4             GET IOQ HANDLING I/O FOR THIS UNIT.\n         USING UCBIOQC,R6\n         L     R6,UCBIOQC\n         DROP  R6                UCBIOQC.\n         USING IOQ,R6\n         L     R6,IOQIOSB        GET THE IOSB.\n         DROP  R6                IOQ.\n         USING IOSB,R6\n         SLR   R1,R1\n         ICM   R1,3,IOSASID      GET ASID TO BE SCHEDULED AT I/O COMP.\n         BZ    GOTDSKJB          NO ASID.\n         USING UCBOB,R3\nGETUNTJB MVC   0(4,R4),STARS     CATER FOR STAR-TING ADDRESS SPACE.\n         STH   R1,WORK+6         STORE THE ASID.\n         UNPK  WORK(5),WORK+6(3) SHOW HEX ADDRESS SPACE IDENTIFIER.\n         TR    WORK(4),HEX-C'0'  MAKE DISPLAYABLE.\n         MVC   4(4,R4),WORK      LOAD INTO ENTRY.\n         SLL   R1,2              GET INDEX INTO ASVT (MULTIPLY BY 4).\n         A     R1,ASVTADDR\n*                                GET ASVT ENTRY FOR THIS ASID.\n         LA    R1,ASVTENTY-ASVT-4(,R1)\n         ICM   R15,15,0(R1)      IS THIS ADDRESS SPACE ACTIVE?\n         BM    GOTDSKJB          NO, THE JOB HAS ENDED.\n         USING ASCB,R15\n         ICM   R1,15,ASCBJBNI    LOAD PTR TO JOBNAME.\n         BNZ   LODDSKJB\n         ICM   R1,15,ASCBJBNS    LOAD PTR TO JOBNAME. (S/M/L)\n         BZ    GOTDSKJB          JOB HAS NO NAME.\n         DROP  R15               ASCB.\nLODDSKJB CLI   0(R1),X'49'       IS IT DISPLAYABLE?\n         BNH   GOTDSKJB          NO, SO DON'T DISPLAY IT.\n         MVC   0(8,R4),0(R1)     LOAD JOB NAME RESPONSIBLE FOR I/O.\nGOTDSKJB CLI   UCBTBYT3,X'20'    DASD DEVICE?\n         BNE   GOTUNTJB          NO, SKIP CYLINDER PROCESSING.\n         MVI   HDGUCODE,2\n         MVC   8(2,R4),IOSSKCC   SAVE CYLINDER NUMBER OF DYNAMIC SEEK.\n         MVC   10(2,R4),IOSSKH2  SAVE HEAD+REC NUMBER OF DYNAMIC SEEK.\n         OI    12(R4),ULIOADDR   INDICATE VALID NUMBER OBTAINED.\n         B     GOTUNTJB          END OF DASD UNIT SAMPLING.\n         DROP  R6                IOSB.\n*                                IS THE DEVICE BUSY?\nUNITNTDA TM    UCBFLA,UCBSTRT+UCBHALT+UCBCLEAR\n         BZ    GOTUNTJB          NO, NOTHING ELSE TO DO.\n         LA    R0,1              YES.\n         AH    R0,UNITBUSY       INCREMENT DEVICE BUSY COUNTER.\n         STH   R0,UNITBUSY\n         MVC   THEVOLUM,UCBVOLI  UPDATE THE VOLUME SERIAL NUMBER.\n         TM    UCBSTAT,UCBALOC   IS THE DEVICE ALLOCATED?\n         BZ    UNITIOSB          NO, HAVE TO LOOK AT IOSB FOR JOBNAME.\n         SLR   R1,R1             CLEAR POINTER REGISTER.\n         SLR   R6,R6             CLEAR POINTER REGISTER.\n         ICM   R6,7,UCBEXTP      POINT TO COMMON UCB EXTENSION.\n         ICM   R1,3,14(R6)       GET ASID OF LAST ALLOCATING JOB.\n         BZ    UNITIOSB          NO ASID HERE SO TRY IOSB.\n         B     GETUNTJB          TRY FOR A JOB NAME.\nGOTUNTJB DS    0H                END OF DEVICE SAMPLE INTERATION.\n         LA    R4,14(0,R4)       POINT TO NEXT SAMPLE ENTRY.\n         BCT   R2,UNITLOOP       PERFORM NEXT SAMPLE.\nUNITQUIT TM    UTIMEB4,X'80'     SYSTEM I/O MEASUREMENTS PRESENT?\n         BO    UNITNOCM          NO, SKIP CMB STUFF.\n         DROP  R3                UCBOB.\n         LA    R15,32            GET \"UCB PREFIX\" LENGTH.\n         LR    R5,R3             POINT TO COMMON UCB SECTION.\n         SLR   R5,R15            POINT TO PATH MGMT CONTROL WORD.\n         USING UCBPMCW1,R5\n         TM    UCBPMCW1+1,UCBMCMB ARE MEASUREMENTS BEING COLLECTED?\n         BZ    UNITNOCM          NO, NOT FOR THIS DEVICE.\n         ICM   R15,3,UCBMBI      GET MEASUREMENT BLOCK INDEX.\n         DROP  R5                UCBPMCW1.\n         L     R1,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R1\n         L     R5,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R1                CMCT.\n         SLL   R15,5             GET ENTRY OFFSET INTO CMB.\n         ALR   R5,R15            POINT TO THIS DEVICE'S ENTRY.\n         TM    MODESW4,ECMB      ECMB RATHER THAN CMB FOR DEVICE?\n         BNO   UUSECMB2          NO, DIRECTLY ACCESS THE CMB.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BNO   UNITNOCM          NO, CANNOT FETCH ECMB DATA.\n         L     R15,IOSECMB@      YES, POINT TO IOSCMB ROUTINE.\n         LR    R1,R3             POINT TO THE UCB.\n         BASR  R14,R15           INVOKE IT.\n         LTR   R15,R15           SUCCESS?\n         BNZ   UNITNOCM          NO.\n         LA    R5,SECWORKA+48    POINT TO CMB DATA.\nUUSECMB2 MVC   UIOCNTAF,0(R5)    SAVE THE I/O COUNTS.\n         L     R15,4(,R5)        GET DEVICE CONNECT TIME.\n         AL    R15,8(,R5)        ADD FUNCTION PENDING TIME.\n         AL    R15,12(,R5)       ADD DEVICE DISCONNECT TIME.\n         ST    R15,UIOTIMAF      SAVE THE I/O ELAPSED TIME.\n         USING UCBOB,R3\nUNITNOCM SLR   R0,R0\n         STCM  R0,15,DASDALOC    ZERO ALLOCATED AND OPEN COUNTS.\n         TM    UCBSTAT,UCBALOC   IS THE DEVICE ALLOCATED?\n         BZ    UNITNOAL          NO.\n         MVI   DASDALOC+1,1      YES, CHANGE ALLOCATION COUNT.\n         MVI   DASDOPEN+1,1      ASSUME IT IS OPEN.\nUNITNOAL TM    UCBTBYT3,X'A0'    DASD OR TAPE?\n         BZ    UNITEXIT          NO, SKIP TAPE/DISK STUFF.\n         MVC   DASDOPEN+1(1),UCBDMCT COPY FILE OPEN COUNT.\n         NI    DASDOPEN+1,X'7F'  TURN OFF MOUNT PENDING BIT.\n         CLI   UCBTBYT3,X'20'    DIRECT ACCESS STORAGE DEVICE?\n         BNE   UNITEXIT          NO, SKIP DISK STUFF.\n         MVC   DASDALOC,UCBUSER      COPY FILE ALLOCATION COUNT.\n         MVC   DASDLSPC,BLANKS   BLANK OUT FREE SPACE DETAILS.\n         TM    UCBSTAT,UCBONLI   ONLINE DASD?\n         BZ    UNITEXIT          NO.\n*                                I/O DEFERRED, NOT READY OR BOXED?\n         TM    UCBFLA,UCBDEFER+UCBNRY+UCBBOX\n         BNZ   UNITEXIT          YES.\n         TM    UCBDMCT,UCBMOUNT  MOUNT PENDING?\n         BO    UNITEXIT          YES.\n         CLI   UCBVTOC+2,1       R OF VTOC TTR0 IS 1 (AS PER OS DISK)?\n         BNE   UNITEXIT          NO.\n         MVC   GQVOLSER,UCBVOLI  COPY VOLUME SERIAL NUMBER.\n         LA    R5,SECWORKA       GET A GQSCAN WORK AREA.\n         GQSCAN AREA=((R5),512),SCOPE=ALL,                             +\n               RESNAME=(SYSVTOC,GQVOLSER,6,SPECIFIC,8),                +\n               TOKEN=GQUTOKEN\n         CHI   R15,4             IS VTOC AVAILABLE FOR SPACE DATA?\n         BL    UNITEXIT          NO.\n         BE    LSPACEOK          YES.\n         GQSCAN QUIT=YES,TOKEN=GQUTOKEN    NO, BUT QUIT GQSCAN FIRST.\n         B     UNITEXIT          SKIP LSPACE.\n*SPACEOK LR    R0,R3             YES, LOAD UCB ADDRESS.\n*        LA    R1,DASDLSPC       POINT TO MESSAGE BUFFER.\n*        SVC   78                PERFORM LSPACE.\nLSPACEOK LSPACE UCB=(R3),EXPMSG=DASDLSPC\n         DROP  R3                UCBOB.\nUNITEXIT TIME  BIN               GET TIME-OF-DAY.\n         ST    R0,UTIMEAFT       SAVE IT.\n         STM   R0,R1,ULOGTIME    TIMESTAMP THE LOGGING RECORD.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    UNITSHOW          NO, SKIP SYSEVENT SVC.\n         BAS   R14,OKAYSWAP      YES, BECOME SWAPPABLE.\nUNITSHOW TIME  DEC               GET THE TIME.\n         STCM  R0,12,UNITHHMM    SAVE HH:MM AT END OF SAMPLE.\n         L     R2,CCTADDR        GET CCT ADDRESS.\n         MVC   UNITCPU,UTILP(R2) SAVE CCVUTILP (CPU BUSY %).\n         LA    R2,BUFFER         GET A WORK AREA.\n         BAS   R1,SYSUMMRY       PRODUCE SYSTEM SUMMARY LINE.\n         MVC   UNITSUMM,SUMMVARS SAVE SYSTEM SUMMARY LINE.\n         TR    UNITSUMM,XLATETBL\n         CLI   ULOGMODE,C'L'     CURRENTLY IN LOGGING MODE?\n         BNE   NOULOG            NO, DON'T LOG THIS ACTIVITY.\n         CLI   ULOGSBTY+1,0      HAS THIS RECORD ALREADY BEEN LOGGED?\n         BNE   NOULOG            YES, DON'T LOG THIS ACTIVITY.\n         CLC   UNITBUSY,ULGTHRSH IS BUSY % UP TO THRESHOLD?\n         BL    NOULOG            NO, DON'T LOG THIS ACTIVITY.\n         MVI   ULOGSBTY+1,1      SUPPLY RECORD SUB-TYPE.\n         LA    R1,ULOGPUT\n         BASSM R5,R1             WRITE A RECORD.\n*        LA    R0,1\n*        A     R0,ULOGCNTR       INCREMENT LOG RECORD COUNT.\n*        ST    R0,ULOGCNTR\nNOULOG   CLI   UNITMODE,C'S'     DISPLAYING SAMPLES?\n         BNE   CYLNDUSE          YES, GO MAKE A GRAPH\n         SPACE\nSHOWSAMP LA    R4,UNITSCHR       POINT TO START OF FORMATTED AREA.\n         LA    R2,BUFFER         POINT TO START OF DETAIL BUFFER AREA.\n         LA    R0,20             TWENTY DETAIL LINES TO LOAD.\nUDTLLOOP MVC   0(LL-79,R2),LOWX  SUPPLY 3270 ATTRIBUTES.\n         LA    R7,5              FIVE SAMPLE ENTRIES PER LINE.\n         LA    R6,LL-79(,R2)     POINT TO FIRST DISPLAY AREA.\nUENTLOOP MVC   0(8,R6),0(R4)     LOAD JOBNAME OR ASID.\n         CLC   0(8,R6),BLANKS    ANY ACTIVITY HERE?\n         BNH   USJBNMOK          NO, LEAVE BLANK.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   USJBNMOK          NO, CONTINUE.\n         ST    R4,WORK2          SAVE CURRENT JOB NAME ADDRESS.\n         LA    R1,SELJOBNM       POINT TO JOB NAME PREFIX.\n         ST    R1,WORK+4         SAVE ITS ADDRESS.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         ST    R1,WORK2+4        SAVE IT IN PARAMETER LIST.\n         ST    R7,WORK           SAVE CURRENT LOOP COUNTER.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         L     R7,WORK           RESTORE CURRENT LOOP COUNTER.\n         BE    USJBNMOK          PERSERVE THE FULL JOB NAME.\n         MVI   0(R6),C'-'        OVERLAY THE JOB NAME WITH\n         MVC   1(7,R6),0(R6)     DASHES.\nUSJBNMOK MVC   8(7,R6),BLANKS    ERASE VARIABLE PART OF DISPLAY ENTRY.\n         TM    12(R4),ULNOTRDY   UNIT NOT READY?\n         BZ    UREADYOK          NO, READY STATUS OKAY.\n         MVI   12(R6),C'\u00ac'       YES, LOAD NOT READY FLAG.\nUREADYOK CLI   13(R4),X'FF'      ANY LAST-CHPID-USED?\n         BE    UCHPIDFF          NO, JUST LEAVE IT BLANK.\n         UNPK  13(3,R6),13(2,4)  SHOW CHANNEL USED BY LAST I/O.\n         TR    13(2,R6),HEX-C'0' MAKE DISPLAYABLE HEX.\nUCHPIDFF MVI   15(R6),X'3B'      ERASE GARBAGE.\n         TM    12(R4),ULREWIND   TAPE DRIVE REWINDING?\n         BZ    NOREWIND          NO.\n         MVC   9(3,R6),=C'REW'   YES, INDICATE THIS.\n         B     EOSMPENT          END OF SAMPLE ENTRY PROCESSING.\nNOREWIND TM    12(R4),ULIOADDR   GOT A NUMBER TO SHOW?\n         BZ    NOUNITNO          NO.\n         SLR   R1,R1             YES, SO USE IT.\n         ICM   R1,3,8(R4)        GET CYLINDER OR FILE SEQUENCE NUMBER.\n         CVD   R1,WORK\n         MVC   8(4,R6),ED3\n         ED    8(4,R6),WORK+6\n         CLI   WORK+5,0          CYLINDER NUMBER LESS THAN 1000?\n         BE    NOUNITNO          YES, CYLINDER NUMBER DONE.\n         MVC   8(1,R6),WORK+5\n         OC    8(4,R6),=C'0000'  NO, SUPPORT THOUSANDS DIGIT.\nNOUNITNO TM    12(R4),ULOFFLIN   UNIT OFFLINE?\n         BZ    UBOXCHEK          NO, CHECK FOR BOXED OFFLINE.\n         MVC   9(3,R6),=C'OFF'   YES, INDICATE THIS.\nUBOXCHEK TM    12(R4),ULBOXED    UNIT BOXED OFFLINE?\n         BZ    EOSMPENT          NO, END OF SAMPLE ENTRY PROCESSING.\n         MVC   9(3,R6),=C'BOX'   YES, INDICATE THIS.\nEOSMPENT LA    R4,14(,R4)        POINT TO NEXT SAMPLE ENTRY.\n         LA    R6,16(,R6)        POINT TO NEXT DISPLAY ENTRY.\n         BCT   R7,UENTLOOP       PROCESS NEXT ENTRY ON THIS LINE.\n         LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\n         BCT   R0,UDTLLOOP       PROCESS NEXT DETAIL LINE.\nUSAMPSUM MVC   0(LL-79,R2),UNITLNAT  LOAD ATTRIBUTES AND SAMPLE\n         MVC   LL-79(79,2),IMUNITLN STATISTICS LINE TEMPLATE.\n         LH    R0,UNITBUSY       SHOW SAMPLE COUNT OF UNIT BUSY.\n         CVD   R0,WORK\n         MVC   18(4,R2),ED3\n         ED    18(4,R2),WORK+6\n         LH    R0,UNITDEFR       GET SAMPLE COUNT OF CONTROL UNIT BUSY.\n         CVD   R0,WORK\n         MVC   26(4,R2),ED3\n         ED    26(4,R2),WORK+6\n         LH    R0,UNITNRDY       SHOW SAMPLE COUNT OF UNIT NOT READY.\n         CVD   R0,WORK\n         MVC   36(4,R2),ED3\n         ED    36(4,R2),WORK+6\n         LH    R0,UNITQUED       SHOW SAMPLE COUNT OF I/O QUEUING.\n         CVD   R0,WORK\n         MVC   45(4,R2),ED3\n         ED    45(4,R2),WORK+6\n         L     R0,UNITQLEN       SHOW SAMPLE AVERAGE QUEUE LENGTH.\n         CVD   R0,WORK\n         MVC   53(7,R2),=X'402021204B2020'\n         ED    53(7,R2),WORK+5\n         CLI   UNITTYPE+2,X'20'  DASD DEVICE?\n         BE    UDORESV           YES, SHOW H/W RESERVE DETAILS.\n         MVC   64(27,R2),BLANKS  ERASE H/W RESERVE STUFF FOR NON-DASD.\n         B     UNORESV           BRANCH AROUND IT.\nUDORESV  LH    R0,UNITRSVD       SHOW SAMPLE COUNT OF DASD RESERVES.\n         CVD   R0,WORK\n         MVC   64(4,R2),ED3\n         ED    64(4,R2),WORK+6\n         L     R0,UNITRCNT       SHOW SAMPLE AVERAGE RESERVE COUNT.\n         CVD   R0,WORK\n         MVC   73(7,R2),=X'402021204B2020'\n         ED    73(7,R2),WORK+5\nUNORESV  TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\n         ICM   R1,15,UTIMEB4     GET START OF SAMPLE TIME.\n         BM    GOTUSCRN          INVALID SO SKIP OS DATA LINE.\n         MVC   0(LL-79,R2),UNITLNAT  LOAD ATTRIBUTES AND SAMPLE\n         MVC   LL-79(79,R2),OSUNITLN STATISTICS LINE TEMPLATE.\n         L     R4,UTIMEAFT       GET END OF SAMPLE TIME.\n         SR    R4,R1             GET SAMPLE TIME DURATION.\n         BP    UTIMEOK           NICE TO KNOW THAT TIME GOES FORWARDS.\n         A     R4,=F'8640000'    SAMPLE TIME STRADDLED MIDNIGHT.\nUTIMEOK  SLR   R1,R1\n         SLR   R5,R5\n         ICM   R1,3,UIOCNTAF     GET END OF SAMPLE I/O COUNT.\n         ICM   R5,3,UIOCNTB4     GET START OF SAMPLE I/O COUNT.\n         SLR   R1,R5             GET I/O COUNT CHANGE DURING SAMPLE.\n         BNM   UIOCNTOK          CHANGE IS POSITIVE.\n         A     R1,FFFF           CATER FOR WRAP-AROUND.\n         LA    R1,1(,R1)\nUIOCNTOK M     R0,TENGRAND       CENTISECONDS AND 2 DECIMAL PLACES.\n         DR    R0,R4             GET SIO RATE FOR DASD.\n         CVD   R1,WORK\n         MVC   29(7,R2),=X'402021204B2020'\n         ED    29(7,R2),WORK+5\n         L     R1,UIOTIMAF       GET END OF SAMPLE I/O ELAPSED TIME.\n         SL    R1,UIOTIMB4       GET I/O TIME CHANGE DURING SAMPLING.\n         LR    R6,R1             SAVE IT FOR LATER.\n         SLR   R0,R0\n         SLDL  R0,7              CONVERT TO MICROSECONDS.\n         DR    R0,R4             GET BUSY FRACTION OF TIME.\n         CVD   R1,WORK\n         MVC   18(7,R2),=X'402021204B2020'\n         ED    18(7,R2),WORK+5\n         SLR   R1,R1\n         SLR   R5,R5\n         ICM   R5,3,UIOCNTAF+2   GET END OF SAMPLE SAMPLE I/O COUNT.\n         ICM   R1,3,UIOCNTB4+2   GET START OF SAMPLE SAMPLE I/O COUNT.\n         SLR   R5,R1             GET I/O SAMPLE COUNT DURING SAMPLE.\n         BNM   USAMPLOK          CHANGE IS POSITIVE.\n         A     R5,FFFF           CATER FOR WRAP-AROUND.\n         LA    R5,1(,R5)\nUSAMPLOK LTR   R5,R5             ANY I/O'S SAMPLED IN THIS INTERVAL?\n         BZ    NOUNITRT          NO, SO NO RESPONSE TIME.\n         LR    R1,R6             RE-LOAD I/O ELAPSED TIME.\n         SLR   R0,R0\n         SLDL  R0,7              CONVERT TO MICROSECONDS.\n         DR    R0,R5             GET MICROSECONDS PER I/O AS SAMPLED\n         SLR   R0,R0                 BY THE CHANNEL HARDWARE.\n         D     R0,ONEGRAND       GET MILLISECONDS PER I/O.\n         CVD   R1,WORK\n         MVC   41(7,R2),=X'4021204B202020'\n         ED    41(7,R2),WORK+5\n         B     GTUNITRT          GOT UNIT RESPONSE TIME.\nNOUNITRT MVC   42(14,R2),BLANKS  INDICATION OF PRECISELY ZERO I/O'S.\nGTUNITRT LH    R0,DASDALOC       LOAD UCB USE COUNT (ASSUME < 32K).\n         CVD   R0,WORK           DISPLAY NUMBER OF ALLOCATIONS.\n         MVC   64(4,R2),ED3\n         ED    64(4,R2),WORK+6\n         LH    R0,DASDOPEN       LOAD UCB OPEN COUNT.\n         CVD   R0,WORK           DISPLAY NUMBER OF OPEN DCBS.\n         MVC   79(4,R2),ED3\n         ED    79(4,R2),WORK+6\n         TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\nGOTUSCRN CLI   UNITMODE,C'D'     DISPLAYING DASD/DATASET DETAILS?\n         BE    SHOWUNIT          YES, GO PERFORM GENERAL TIDY-UP.\n         LA    R1,UNITCLAS\n         LA    R0,8              EIGHT DEVICE CLASS BITS.\n         SLR   R15,R15\n         ICM   R15,8,UNITTYPE+2  LOAD DEVICE CLASS BITS.\nUCLSLOOP LTR   R15,R15           TOP BIT ON?\n         BM    GOTUNCLS          YES.\n         SLL   R15,1             NO, PROMOTE BITS.\n         LA    R1,6(,R1)         POINT TO NEXT CLASS DESCRIPTION.\n         BCT   R0,UCLSLOOP       TRY NEXT BIT.\n         LA    R1,BLANKS         WHO KNOWS WHAT HAPPENED THERE?\nGOTUNCLS MVC   HEADINGU+18(6),0(R1)     SHOW DEVICE CLASS.\n*        MVC   HEADINGU+13(3),ULOGUNIT  SHOW UCB NAME IN HEADING.    4D\n         UNPK  HEADINGU+13(5),ULOGUNIT  SHOW UCB NAME IN HEADING.    4D\n         TR    HEADINGU+13(4),HEX-C'0'  MAKE DISPLAYABLE HEX.        4D\n         MVI   HEADINGU+17,C' '         ERASE GARBAGE.               4D\n         MVC   HEADINGU+1(4),ULOGSID    SHOW SYSTEM ID IN HEADING.\n         SLR   R1,R1\n         IC    R1,HDGUCODE              GET CODE FOR HEADING GUFF.\n         SLL   R1,2                     CONVERT CODE TO INDEX.\n         LA    R1,HDGUGUFF(R1)          POINT TO CORRECT TEXT.\n         MVC   HEADINGU+38(3),0(R1)     SHOW CORRECT COLUMN HEADING.\n         TM    UNITTYPE+2,X'A0'  TAPE OR DASD?\n         BZ    NOUNVLSR          NO, SO NO VOLUME SERIAL NUMBER.\n         CLI   THEVOLUM,C' '     USABLE VOLUME SERIAL NUMBER?\n         BNH   NOUNVLSR          NO, SO DON'T SHOW IT.\n         CLI   THEVOLUM,X'FF'    USABLE VOLUME SERIAL NUMBER?\n         BE    NOUNVLSR          NO, SO DON'T SHOW IT.\n         MVC   HEADINGU+18(6),THEVOLUM  YES, IT SHOULD BE OKAY.\nNOUNVLSR UNPK  HEADINGU+63(3),UNITHHMM(2)\n         MVI   HEADINGU+65,C':'  DISPLAY SAMPLE TIME HOURS.\n         UNPK  HEADINGU+66(3),UNITHHMM+1(2)\n         MVI   HEADINGU+68,C'>'  DISPLAY SAMPLE TIME MINUTES.\n         MVC   HEADING,HEADINGU  LOAD HEADING INTO DISPLAY BUFFER.\n         TR    HEADING,XLATETBL  ENSURE DISPLAYABLE CHARACTERS.\n         MVI   HEADING+28,X'3B'\n         MVI   HEADING+44,X'3B'\n         B     SHOUSAMP          END OF SHOW-SAMPLE-SPECIFICS.\n         SPACE\nDASDSAMP MVC   UNITHDGD+41(4),ULOGSID    SHOW SYSTEM ID IN HEADING.\n*        MVC   UNITHDGD+51(3),ULOGUNIT   SHOW UCB NAME IN HEADING.   4D\n         UNPK  UNITHDGD+51(5),ULOGUNIT   SHOW UCB NAME IN HEADING.   4D\n         TR    UNITHDGD+51(4),HEX-C'0'   MAKE DISPLAYABLE HEX.       4D\n         MVI   UNITHDGD+55,C' '          ERASE GARBAGE.              4D\n         MVC   UNITHDGD+56(6),THEVOLUM   LOAD VOLUME SERIAL NUMBER.\n         UNPK  UNITHDGD+63(3),UNITHHMM(2)\n         MVI   UNITHDGD+65,C':'          DISPLAY SAMPLE TIME HOURS.\n         UNPK  UNITHDGD+66(3),UNITHHMM+1(2)\n         MVI   UNITHDGD+68,C')'          DISPLAY SAMPLE TIME MINUTES.\n         MVC   HEADING,UNITHDGD  LOAD HEADING INTO DISPLAY BUFFER.\n         LA    R4,UNITSCHR-14    POINT TO BEFORE FORMATTED AREA.\n         SLR   R6,R6             RESET OBSERVATION COUNTER.\n         LH    R0,UDXSCROL       GET FIRST LINE NUMBER FOR DISPLAY.\n         B     UDPOSIN1          GO TO FIRST SCROLL LOOP DECREMENT.\nUDPOSILP LA    R4,14(,R4)        POINT TO NEXT OBSERVATION.\n         LA    R6,1(,R6)         INCREMENT OBSERVATION NUMBER.\n         CLC   0(8,R4),BLANKS    ANY ACTIVITY HERE?\n         BNH   UDPOSILP          NO, TRY NEXT OBSERVATION.\nUDPOSIN1 BCT   R0,UDPOSILP       YES, BUT SCROLLED PAST IT.\n         LA    R2,BUFFER         POINT TO START OF DETAIL BUFFER AREA.\n         L     R0,LINES          GET THE NUMBER OF LINES ON THE SCREEN.\n         AHI   R0,-4             GET THE MAXIMUM DETAIL LINE COUNT.\nUDETAILP LA    R4,14(,R4)        POINT TO NEXT OBSERVATION.\n         LA    R6,1(,R6)         INCREMENT OBSERVATION NUMBER.\n         C     R6,AHUNDRED       PAST SAMPLE OBSERVATION 100?\n         BH    USAMPSUM          YES, GO TIDY UP SCREEN.\n         CLC   0(8,R4),BLANKS    ANY ACTIVITY HERE?\n         BNH   UDETAILP          NO, TRY NEXT OBSERVATION.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   UDAOBSOK          NO, CONTINUE.\n         ST    R4,WORK2          SAVE CURRENT JOB NAME ADDRESS.\n         LA    R1,SELJOBNM       POINT TO JOB NAME PREFIX.\n         ST    R1,WORK+4         SAVE ITS ADDRESS.\n         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         ST    R1,WORK2+4        SAVE IT IN PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   UDETAILP          SKIP THIS IF MASKING MISMATCH.\nUDAOBSOK MVC   0(LL-79,R2),LOWX  SUPPLY 3270 ATTRIBUTES.\n         MVI   LL-79(R2),C' '    BLANK A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         CVD   R6,WORK           DISPLAY SAMPLE OBSERVATION NUMBER.\n         MVC   LL-79(4,R2),ED3\n         ED    LL-79(4,R2),WORK+6\n         MVC   LL-74(8,R2),0(R4) LOAD JOBNAME OR ASID.\n         SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,11(,R4)        SHOW THE TRACK'S RECORD NUMBER.\n         CVD   R1,WORK\n         MVC   LL-57(4,R2),ED3\n         ED    LL-57(4,R2),WORK+6\n         IC    R1,10(,R4)        SHOW THE READ/WRITE HEAD NUMBER.\n         CVD   R1,WORK\n         MVC   LL-61(4,R2),ED3\n         ED    LL-61(4,R2),WORK+6\n         ICM   R1,3,8(R4)        SHOW THE VOLUME CYLINDER NUMBER.\n         CVD   R1,WORK\n         MVC   LL-66(6,R2),ED5\n         ED    LL-66(6,R2),WORK+5\n         ICM   R3,15,UDXTABLE    POINT TO DATA SET EXTENT TABLE.\n         BZ    UDETDONE          NO TABLE SO LINE NOW COMPLETE.\n         USING UDXENTRY,R3\nUDDDTEST CLC   UDXLCCHH(2),8(R4)\n         BH    UDDDNEXT          I/O BEFORE STARTING CYLINDER.\n         BL    UDDDTRYH          I/O AFTER START - TEST EXTENT HIGH.\n         CLC   UDXLCCHH+3(1),10(R4)\n         BH    UDDDNEXT          I/O BEFORE STARTING TRACK.\nUDDDTRYH CLC   UDXHCCHH(2),8(R4)\n         BL    UDDDNEXT          I/O AFTER ENDING CYLINDER.\n         BH    UDDDTHIS          I/O BEFORE ENDING CYLINDER.\n         CLC   UDXHCCHH+3(1),10(R4)\n         BNL   UDDDTHIS          I/O NOT AFTER ENDING TRACK.\nUDDDNEXT LA    R3,UDXENTSZ(,R3)  TRY NEXT EXTENT DESCRIPTOR.\n         C     R3,UDNXTENT       REACHED END OF TABLE?\n         BL    UDDDTEST          NO, CONTINUE SCANNING.\n         B     UDETDONE          YES, NOT FOUND SO LINE NOW COMPLETE.\nUDDDTHIS SLR   R1,R1             CLEAR FOR INSERT.\n         IC    R1,UDXTNTNO       LOAD RELATIVE EXTENT NUMBER.\n         LA    R1,1(,R1)         CONVERT TO NATURAL EXTENT COUNT.\n         CVD   R1,WORK           SHOW IT.\n         MVC   LL-53(4,R2),ED3\n         ED    LL-53(4,R2),WORK+6\n         MVC   LL-48(44,R2),UDXDSNAM    COPY THE DATA SET NAME.\nUDETDONE TR    LL-79(79,R2),XLATETBL    HANDLE BAD DATA SET NAME.\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         BCT   0,UDETAILP        FORMAT THE NEXT LINE.\n         DROP  R3                UDXENTRY.\n         B     USAMPSUM          SCREEN FULL SO GO TIDY UP.\n         SPACE\nCYLNDUSE TM    UNITSCYL,X'80'    ANY VALID RESULTS?\n         BZ    UNITGRAF          YES, FORMAT AND DISPLAY THEM.\nCYLREGRF XC    UNITSCYL(146),UNITSCYL   NO, RESET COUNTERS.\n         XC    UNITJCYL(146),UNITJCYL\n         XC    UNITHDMV(146),UNITHDMV\n         XC    UNITHDJB(146),UNITHDJB\n         MVC   UNITJBSY,FFFF\n         MVI   UNITOCYL,X'FF'    INVALIDATE PREVIOUS CYLINDER.\n         XC    UNITSJOB(20),UNITSJOB  ZERO FIRST TWO JOB ENTRIES.\n         MVC   UCYLHI(4),FFFF    PREPARE FOR HIGH AND LOW WATER MARKS.\n         LA    R4,UNITSCHR       POINT TO FIRST SAMPLE ENTRY.\n         LA    R9,100            GET THE NUMBER OF SAMPLES DONE.\nCYLSMPLP TM    12(R4),ULIOADDR   VALID CYLINDER NUMBER PRESENT?\n         BZ    NOHDMVMT          NO, NOTHING TO DO FOR THIS SAMPLE.\n         LA    R5,UNITSJOB       POINT TO JOB SAMPLE PROFILES.\nUJOBLOOP ICM   R1,15,0(R5)       LOAD POINTER TO JOB NAME.\n         BZ    NEWUJENT          EMPTY ENTRY FOUND.\n         CLC   0(8,R4),0(R1)     ENTRY FOR THIS JOB?\n         BE    GOTUJENT          YES, UPDATE IT.\n         LA    R5,10(,R5)        NO, POINT TO NEXT ENTRY.\n         B     UJOBLOOP          GO TRY IT.\nNEWUJENT STCM  R4,B'1111',0(R5)  SAVE POINTER TO JOB NAME.\n         SLR   R1,R1\n         ICM   R1,B'0011',8(R4)  GET CYLINDER NUMBER OF DYNAMIC SEEK.\n         STCM  R1,B'0011',4(R5)  SUPPLY LOWEST CYLINDER NUMBER SO FAR.\n         STCM  R1,B'0011',6(R5)  SUPPLY HIGHEST CYLINDER NUMBER SO FAR.\n         MVI   9(R5),1           SUPPLY NUMBER OF SAMPLES SO FAR.\n         XC    10(10,R5),10(R5)  ENSURE NEXT ENTRY IS ZERO.\n         B     DONUJENT          HAVE NOW PROCESSED THIS ENTRY.\nGOTUJENT LA    R0,1\n         AH    R0,8(,R5)         INCREMENT SAMPLES-FOR-THIS-JOB COUNTR.\n         STH   R0,8(,R5)\n         SLR   R1,R1\n         ICM   R1,B'0011',8(R4)  GET CYLINDER NUMBER OF DYNAMIC SEEK.\n         LA    R5,4(,R5)         POINT TO LOWEST CYLINDER NUMBER.\n         CLM   R1,B'0011',0(R5)  IS THIS SAMPLE LOWER?\n         BL    CHGUJENT          YES, SO CAN'T BE NEW HIGHEST.\n         LA    R5,2(,R5)         POINT TO HIGHEST CYLINDER NUMBER.\n         CLM   R1,B'0011',0(R5)  IS THIS SAMPLE HIGHER?\n         BNH   DONUJENT          NO, SO DON'T CHANGE IT.\nCHGUJENT STCM  R1,B'0011',0(R5)  SUPPLY NEW CYLINDER NUMBER.\nDONUJENT CLM   R1,B'0011',UCYLOW NEW LOWEST SAMPLED CYLINDER?\n         BNL   GTNEWULO          NO.\n         STCM  R1,B'0011',UCYLOW YES, SAVE IT.\nGTNEWULO CLM   R1,B'0011',UCYLHI NEW HIGHEST SAMPLED CYLINDER?\n         BNH   GTNEWUHI          NO.\n         STCM  R1,B'0011',UCYLHI YES, SAVE IT.\nGTNEWUHI LH    R14,CYLHZSHF      GET CYLINDER SHIFTING VALUE.\n         LR    R2,R1             SAVE CYLINDER VALUE.\n         SRL   R1,0(R14)         DIVIDE BY EIGHT OR SIXTEEN.\n         CH    R1,CYLHZMAX       INDEX TOO BIG?\n         BNH   CYLPOSOK          NO, GO AHEAD AND RECORD IT.\n         LA    R0,1              YES.\n         AH    R0,CYLHZSHF       INCREMENT HORIZONTAL SHIFTING VALUE.\n         STH   R0,CYLHZSHF\n*        LH    R0,CYLHZSCL\n*        SLL   R0,1              DOUBLE HORIZONTAL SCALING FACTOR.\n*        STH   R0,CYLHZSCL\n         B     CYLREGRF          RESTART CYLINDER CALCULATIONS.\nCYLPOSOK SLL   R1,R1             DOUBLE TO GET INDEX.\n         LA    R15,UNITSCYL(R1)  POINT TO COUNTER FOR CYLINDER RANGE.\n         LA    R0,1              INCREMENT IT.\n         AH    R0,0(,R15)\n         STH   R0,0(,R15)\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   NOCYLJOB          NO, CONTINUE.\n         ST    R4,WORK2          SAVE CURRENT JOB NAME ADDRESS.\n         LA    R0,SELJOBNM       POINT TO JOB NAME PREFIX.\n         ST    R0,WORK+4         SAVE ITS ADDRESS.\n         LH    R0,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         ST    R0,WORK2+4        SAVE IT IN PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   NOCYLJOB          JOB NAME DOES NOT MATCH \"PREFIX\".\n         LA    R0,1              JOB NAME HAS SPECIFIED \"PREFIX\".\n         AH    R0,UNITJBSY       INCREMENT \"PREFIX\" MATCH BUSY COUNT.\n         STH   R0,UNITJBSY\n         B     ISCYLJOB\nNOCYLJOB LA    R0,1              INCREMENT NOT-SPECIFIED-JOB COUNTER.\n         AH    R0,146(,R15)      FOR THIS CYLINDER RANGE.\n         STH   R0,146(,R15)\nISCYLJOB LR    R1,R2             RESTORE CYLINDER NUMBER.\n         S     R1,UNITOCYL       GET CYLINDER NUMBER DIFFERENCE.\n         ST    R2,UNITOCYL       SAVE THE NEW CYLINDER NUMBER.\n         LPR   R1,R1             GET ABSOLUTE VALUE.\n         BZ    NOHDMVMT          NO DIFFERENCE SO DON'T LOG A CHANGE.\n         LH    R14,CYLHZSHF      GET CYLINDER SHIFTING VALUE.\n         SRL   R1,0(R14)         DIVIDE BY EIGHT OR SIXTEEN.\n         CH    R1,CYLHZMAX       INDEX TOO BIG?\n         BH    NOHDMVMT          YES, CAN'T SHOW IT (SHOULDN'T HAPPEN).\n         SLL   R1,R1             DOUBLE TO GET INDEX.\n         LA    R15,UNITHDMV(R1)  POINT TO COUNTER FOR CYLINDER RANGE.\n         LA    R0,1              INCREMENT IT.\n         AH    R0,0(,R15)\n         STH   R0,0(,R15)\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   NOMOVJOB          NO, CONTINUE.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BE    NOHDMVMT          JOB NAME HAS SPECIFIED \"PREFIX\".\nNOMOVJOB LA    R0,1              INCREMENT NOT-SPECIFIED-JOB COUNTER.\n         AH    R0,146(,R15)      FOR THIS CYLINDER RANGE.\n         STH   R0,146(,R15)\nNOHDMVMT LA    R4,14(0,R4)       POINT TO NEXT SAMPLE ENTRY.\n         BCT   R9,CYLSMPLP       PROCESS NEXT SAMPLE.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BH    SRTUJENT          YES, NOW COUNTED SAMPLES FOR \"PREFIX\".\n         MVC   UNITJBSY,UNITBUSY NO, SO ALL ENTRIES MATCH \"PREFIX\".\nSRTUJENT MVI   WORK,0            MAKE A SWITCH FLAG.\n         LA    R5,UNITSJOB       POINT TO FIRST ENTRY.\nSORTUJLP OC    10(10,R5),10(R5)  EMPTY ENTRY?\n         BZ    SRTUJCHK          YES, SEE IF ANOTHER PASS IS NEEDED.\n         CLC   8(2,R5),18(R5)    COMPARE SAMPLE COUNTS.\n         BNL   SORTUJOK          LEAVE IN ASCENDING ORDER.\n         XC    0(10,R5),10(R5)   OUT OF ORDER SO SWITCH ENTRIES.\n         XC    10(10,R5),0(R5)\n         XC    0(10,R5),10(R5)\n         MVI   WORK,1            REMEMBER THAT A BUBBLE SWITCH OCCURED.\nSORTUJOK LA    R5,10(,R5)        POINT TO NEXT ENTRY.\n         B     SORTUJLP          CONTINUE BUBBLE PASS.\nSRTUJCHK CLI   WORK,0            WAS A BUBBLE SWITCH PERFORMED?\n         BNE   SRTUJENT          YES, PERFORM ANOTHER BUBBLE PASS.\nUNITGRAF CLI   UNITMODE,C'D'     SHOWING DASD/DATASET EXTENT SAMPLES?\n         BE    DASDSAMP          YES, GO TO IT.\n         CLI   UNITMODE,C'A'     GRAPHING DISK USAGE BY ADDRESS SPACE?\n         BNE   SHOWCYLS          NO, MUST BE GRAPHING CYLINDERS.\n         SPACE\n         LA    R9,20             GET NUMBER OF DETAIL LINES.\n         LA    R5,UNITSJOB       POINT TO JOB ACCESS SAMPLES.\n         LA    R2,BUFFER         RESET BUFFER POINTER.\n         LH    R14,JOBHZSHF      GET JOB % SHIFTING VALUE.\n         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR HEADING.\n         MVI   LL-80(R2),X'F3'   PINK FOR HEADING.              (I3279)\n         MVC   LL-79(79,R2),JOBUNTLN LABEL COLUMNS AND X-AXIS.\n         CLI   JOBHZSHF+1,0      CORRECT SCALE FOR X-AXIS?\n         BE    UAXHDGOK          YES, LOAD HEADING AND DISPLAY PAGE.\n         MVC   LL-48(48,R2),JOBUNLN2  NO, SUPPLY CORRECT LABELS.\nUAXHDGOK LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\n         MVC   0(LL-79,R2),LOWX\n         MVI   LL-79(R2),C' '    BLANK THE LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-78(7,R2),=C'*TOTAL*'\n         LH    R1,UNITBUSY       GET SAMPLE COUNT FOR ALL JOBS.\n         CVD   R1,WORK\n         MVC   LL-57(4,R2),ED3\n         ED    LL-57(4,R2),WORK+6\n         MVI   LL-53(R2),C'%'\n         LTR   R1,R1             ANY ACTIVITY SAMPLED?\n         BZ    NOTOTCYL          NO, CAN'T SHOW SAMPLED CYLINDER RANGE.\n         ICM   R1,B'0011',UCYLOW GET LOW CYLINDER VALUE.\n         CVD   R1,WORK\n         MVC   LL-71(6,R2),ED5\n         ED    LL-71(6,R2),WORK+5\n         ICM   R1,B'0011',UCYLHI GET HIGH CYLINDER VALUE.\n         CVD   R1,WORK\n         MVC   LL-65(6,R2),ED5\n         MVI   LL-65(R2),C'-'\n         ED    LL-65(6,R2),WORK+5\nNOTOTCYL MVI   LL-51(R2),C'+'    SUPPLY THE AXIS.\n         MVI   LL-50(R2),C'-'\n         MVC   LL-49(49,R2),LL-50(R2)\n         MVI   LL-41(R2),C'+'    SUPPLY THE 10% MARKS.\n         MVI   LL-31(R2),C'+'\n         MVI   LL-21(R2),C'+'\n         MVI   LL-11(R2),C'+'\n         MVI   LL-1(R2),C'+'\n         CLI   JOBHZSHF+1,0      FULL-SCALE PLOT?\n         BZ    JOBGRFLP          YES, DONE THE FULL-SCALE 10% MARKS.\n         MVI   LL-46(R2),C'+'    SUPPLY THE ODD 10% MARKS.\n         MVI   LL-36(R2),C'+'\n         MVI   LL-26(R2),C'+'\n         MVI   LL-16(R2),C'+'\n         MVI   LL-6(R2),C'+'\nJOBGRFLP LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\n         MVC   0(LL-79,R2),LOWX\n         MVI   LL-79(R2),C' '    BLANK THE LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVI   LL-51(R2),C'|'    SUPPLY THE AXIS.\n         MVI   LL-41(R2),C'|'    SUPPLY THE 10% LINES.\n         MVI   LL-31(R2),C'|'\n         MVI   LL-21(R2),C'|'\n         MVI   LL-11(R2),C'|'\n         MVI   LL-1(R2),C'|'\n         LTR   R14,R14           FULL-SCALE GRAPH?\n         BZ    UJOBFULL          YES, DONE THE FULL-SCALE 10% LINES.\n         MVI   LL-46(R2),C'|'    SUPPLY THE ODD 10% LINES.\n         MVI   LL-36(R2),C'|'\n         MVI   LL-26(R2),C'|'\n         MVI   LL-16(R2),C'|'\n         MVI   LL-6(R2),C'|'\nUJOBFULL ICM   R1,B'1111',0(R5)  POINT TO JOB NAME FOR THIS ENTRY.\n         BZ    UJOBEND           END OF LIST SO NO DATA TO GRAPH.\n         MVC   LL-79(8,R2),0(R1) LOAD JOB NAME.\n         SLR   R1,R1\n         ICM   R1,B'0011',4(R5)  GET LOW CYLINDER VALUE.\n         CVD   R1,WORK\n         MVC   LL-71(6,R2),ED5\n         ED    LL-71(6,R2),WORK+5\n         ICM   R1,B'0011',6(R5)  GET HIGH CYLINDER VALUE.\n         CVD   R1,WORK\n         MVC   LL-65(6,R2),ED5\n         MVI   LL-65(R2),C'-'\n         ED    LL-65(6,R2),WORK+5\n         LH    R15,8(,R5)        GET SAMPLE COUNT FOR THIS JOB.\n         CVD   R15,WORK\n         MVC   LL-57(4,R2),ED3\n         ED    LL-57(4,R2),WORK+6\n         MVI   LL-53(R2),C'%'\n         TR    LL-79(79,R2),XLATETBL\n         AR    R15,R14           ADD ZERO OR ONE FOR ROUNDING.\n         SRL   R15,0(R14)        LEAVE OR HALVE FOR SCALING.\n         MVI   LL-50(R2),X'06'   SUPPLY CODE FOR A YELLOW GRAPHIC.\n         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?\n         BNH   JOBLINOK          NO, CONTINUE.\n         MVC   WORK2(4),0(R5)    SAVE CURRENT JOB NAME ADDRESS.\n         LA    R0,SELJOBNM       POINT TO JOB NAME PREFIX.\n         ST    R0,WORK+4         SAVE ITS ADDRESS.\n         LH    R0,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.\n         ST    R0,WORK2+4        SAVE IT IN PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.\n         BNE   JOBLINOK          NOT A SPECIALLY INTERESTING JOB.\n         MVI   LL-50(R2),X'03'   SUPPLY CODE FOR A PINK GRAPHIC.\nJOBLINOK BCT   R15,PLOTUJOB      DECREMENT FOR ONE ALREADY SUPPLIED.\n         B     UJOBGRFD          ONLY ONE POSITION WAS REQUIRED.\nUJOBPLOT MVC   LL-49(0,R2),LL-50(R2)            <<< EXECUTED >>>\nPLOTUJOB BCTR  R15,0             DECREMENT FOR EXECUTE.\n         EX    R15,UJOBPLOT      EXTEND PLOT TO APPROPRIATE PERCENTAGE.\nUJOBGRFD LA    R5,10(,R5)        POINT TO NEXT JOB ENTRY.\nUJOBEND  CHI   R9,2              SECOND LAST JOB PLOT LINE?\n         BNE   NOLSPACE          NO.\n         CLI   DASDLSPC,C' '     ANY LSPACE DATA?\n         BE    NOLSPACE          NO.\n         LR    R1,R2             GET CURRENT BUFFER POINTER.\n         LA    R0,LL             GET THE LINE LENGTH.\n         SR    R1,R0             POINT TO THE PREVIOUS LINE.\n         MVC   LL-40(40,R1),DASDLSPH\n         MVC   LL-40(40,R2),DASDLSPC\nNOLSPACE BCT   R9,JOBGRFLP       PROCESS NEXT JOB ENTRY.\n         TR    LL-79(79,R2),XLATETBL\n         B     UGRAFHDG          LOAD HEADING AND DISPLAY PAGE.\n         SPACE\nSHOWCYLS LA    R7,20             GET NUMBER OF DETAIL LINES.\n         MH    R7,CYLVTSCL       GET MAXIMUM VERTICAL GRAPH VALUE.\n         LA    R2,BUFFER         RESET BUFFER POINTER.\nCYLGRFLP MVC   0(LL-79,R2),LOWX\n         MVI   LL-79(R2),C' '    BLANK THE LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVI   LL-74(R2),C'|'    SUPPLY THE AXIS.\n         SLR   R0,R0\n         LR    R1,R7             GET THE VALUE OF THIS LINE.\n         D     R0,TEN            DIVIDE BY TEN.\n         LTR   R0,R0             ANY REMAINDER?\n         BNZ   CYLAXSOK          YES.\n         CVD   R7,WORK           NO, CALLIBRATION REQUIRED.\n         MVC   LL-79(4,R2),ED3\n         ED    LL-79(4,R2),WORK+6\n         MVI   LL-75(R2),C'%'    DENOTE PERCENTAGE.\n         MVI   LL-74(R2),C'+'    MARK THE AXIS.\n         MVI   LL-73(R2),C'-'    MAKE A DASHED LINE FOR EASY READING.\n         MVC   LL-72(72,R2),LL-73(R2)\nCYLAXSOK LA    R0,73             NUMBER OF CYLINDER RANGES SUPPORTED.\n         LA    R4,UNITHDMV       POINT TO HEAD MOVEMENT VECTOR.\n         LA    R5,LL-73(,R2)     POINT TO FIRST DATA COLUMN.\n         CLI   UNITMODE,C'M'     GRAPHING HEAD MOVEMENT?\n         BE    CYLINELP          YES, SO DO IT.\n         L     R15,UCYLXADR      NO, POINT TO CYLINDER MAP SUBROUTINE.\n         BASR  R14,R15           INVOKE IT.\n         LA    R4,UNITSCYL       POINT TO CYLINDER RANGE VECTOR.\nCYLINELP CH    R7,0(,R4)         GRAPH MARK REQUIRED?\n         BH    CYLINOK1          NO.\n         MVI   0(R5),X'03'       YES, SUPPLY CODE FOR A PINK GRAPHIC.\nCYLINOK1 CH    R7,146(,R4)       GRAPH MARK REQUIRED?\n         BH    CYLINOK2          NO.\n         MVI   0(R5),X'06'       YES, SUPPLY CODE FOR A YELLOW GRAPHIC.\nCYLINOK2 LA    R4,2(,R4)         POINT TO NEXT CYLINDER RANGE COUNT.\n         LA    R5,1(,R5)         POINT TO NEXT DATA COLUMN.\n         BCT   R0,CYLINELP       PROCESS NEXT COLUMN.\n         LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\n         SH    R7,CYLVTSCL       GET PERCENTAGE VALUE OF NEXT LINE.\n         BP    CYLGRFLP          FORMAT NEXT LINE OF GRAPH.\n         LA    R1,7*LL+BUFFER    POINT TO SEVENTH DETAIL LINE.\n         LA    R0,9              GET NUMBER OF LINES TO LABEL.\n         LA    R15,UNITFREQ      POINT TO LABEL TEXT.\nCYLYLOOP MVI   4(R1),X'F8'       HIGH INTENSITY.\n         MVI   LL-80(R1),X'F3'   PINK.                          (I3279)\n         MVC   LL-79(1,R1),0(R15)     LABEL Y-AXIS.\n         MVI   LL-78(R1),X'25'   MAKE REST OF LINE TURQUOISE/LOW.\n         LA    R1,LL(,R1)        POINT TO NEXT DISPLAY LINE.\n         LA    R15,1(,R15)       POINT TO NEXT TEXT LABEL BYTE.\n         BCT   R0,CYLYLOOP\n         MVC   0(LL-79,R2),LOWX\n         MVC   LL-79(79,R2),CYLXAXIS\n         TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\n         MVC   0(LL-79,R2),HIGHX\n         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)\n         LH    R1,CYLHZSHF       GET CYLINDER SHIFTING VALUE.\n         AHI   R1,-3             MAKE ZERO LOWEST POSSIBLE VALUE.\n         SLL   R1,2              MULTIPLY BY FOUR FOR INDEX.\n         L     R1,CYLXLBAD(R1)   POINT TO CORRECT CALLIBRATION VALUES.\n         MVC   LL-79(79,R2),0(R1) DISPLAY THEM.\n         TR    LL-79(79,R2),XLATETBL\n         MVI   LL-76(R2),X'25'   MAKE AXIS TURQUOISE/LOW.\nUGRAFHDG LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.\n         MVC   UNITHDGC+1(4),ULOGSID      SHOW SYSTEM ID IN HEADING.\n*        MVC   UNITHDGC+13(3),ULOGUNIT    SHOW UCB NAME IN HEADING.  4D\n         UNPK  UNITHDGC+13(5),ULOGUNIT    SHOW UCB NAME IN HEADING.  4D\n         TR    UNITHDGC+13(4),HEX-C'0'    MAKE DISPLAYABLE HEX.      4D\n         MVI   UNITHDGC+17,C' '           ERASE GARBAGE.             4D\n         MVC   UNITHDGC+18(6),THEVOLUM    LOAD VOLUME SERIAL NUMBER.\n         UNPK  UNITHDGC+63(3),UNITHHMM(2)\n         MVI   UNITHDGC+65,C':'           DISPLAY SAMPLE TIME HOURS.\n         UNPK  UNITHDGC+66(3),UNITHHMM+1(2)\n         MVI   UNITHDGC+68,C' '           DISPLAY SAMPLE TIME MINUTES.\n         MVC   HEADING,UNITHDGC  LOAD HEADING INTO DISPLAY BUFFER.\n         CLI   UNITMODE,C'C'     CYLINDER ACTIVITY GRAPH?\n         BE    SHOWUNIT          YES, SO DISPLAY IT.\n         MVC   HEADING+28(24),=CL24'  HEAD MOVEMENT DISTANCE'\n         CLI   UNITMODE,C'M'     HEAD MOVEMENT GRAPH?\n         BE    SHOWUNIT          YES, SO DISPLAY IT.\n         MVC   HEADING+28(24),=CL24' DISK ACCESS BY JOB NAME'\n         SPACE\nSHOWUNIT TR    HEADING,XLATETBL  ENSURE DISPLAYABLE CHARACTERS.\nSHOUSAMP LH    R9,UNITCPU        LOAD CCVUTILP AS AT SAMPLING TIME.\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.\n         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.\n         C     R2,PAGEND         BUFFER FULL?\n         BNL   PUTALLUN          YES, SHOW THE PAGE.\n         MVC   0(LL-79,R2),SYSLINE   LOAD SUMMARY LINE ATTRIBUTE BYTES.\n         MVC   LL-79(79,R2),UNITSUMM LOAD SUMMARY LINE.\n         CLI   ULOGMODE,C'L'     ANY LOG ACTVITY?\n         BL    USUMRYOK          NO, DON'T INDICATE ANYTHING.\n         BH    ULOLDREC          YES, RECORD READ FROM LOG.\n         MVC   LL-79(9,R2),=C'(LOGGING)'\n         CLI   ULOGSBTY+1,0      HAS THIS RECORD ALREADY BEEN LOGGED?\n         BE    USUMRYOK          NO.\n         MVC   LL-8(8,R2),=C'(LOGGED)'\n         B     USUMRYOK          YES.\nULOLDREC MVC   LL-79(10,R2),=C'(FROM LOG)'\n         L     R1,ULOGDATE       GET THE LOG RECORD DATE.\n         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.\n         BASR  R14,R7            GET LOG DATE YY/MM/DD.\n         MVI   LL-10(R2),C'('\n         MVC   LL-9(8,R2),WORK\n         MVI   LL-1(R2),C')'\nUSUMRYOK LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         C     R2,PAGEND         BUFFER FULL?\n         BNL   PUTALLUN          YES, SHOW THE PAGE.\n         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.\n         LA    R2,4(,R2)         ADJUST BUFFER POINTER.\nPUTALLUN LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         LR    R0,R2             POINT TO END OF SCREEN BUFFER.\n         SR    R0,R1             GET SCREEN BUFFER LENGTH.\nPUTSCRNU BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BH    MOREUNIT          YES, REDO THE STATISTICS.\n         TM    MODESW2,XFLG      NO, SUBROUTINE EXIT REQUIRED?\n         BZ    GETCMDUN          NO, PROCESS SUBCOMMAND.\n         CLOSE IMPULOG           YES, CLOSE THE UNIT LOGGING FILE.\n         MVI   ULOGMODE,C' '     FLAG IT.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nGETCMDUN CLI   INBUFF,7          PF7/19?\n         BE    INCRVSCL          YES, INCREMENT AXIS COMPRESSION FACTOR\n         CLI   INBUFF,8          PF8/20?\n         BE    DECRVSCL          YES, DECREMENT AXIS COMPRESSION FACTOR\n         CLI   INBUFF,10         PF10/22?\n         BE    DECRHSCL          YES, DECREMENT AXIS COMPRESSION FACTOR\n         CLI   INBUFF,11         PF11/23?\n         BE    INCRHSCL          YES, INCREMENT AXIS COMPRESSION FACTOR\n         CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    UNITDATA          YES.\nCMDSCANU L     R3,THEUCBAD       POINT TO UCB IF ANY.\n         USING UCBOB,R3\n         CLI   INCHARS,C'S'      REQUEST FOR SHOW-SAMPLES MODE?\n         BE    SETMODEU          YES.\n         CLI   INCHARS,C'M'      REQUEST FOR GRAPH-HEAD-MOVEMENT MODE?\n         BE    SETMODEU          YES.\n         CLI   INCHARS,C'A'      REQUEST FOR GRAPH-ASID-ACCESS MODE?\n         BE    SETMODEU          YES.\n         CLI   INCHARS,C'C'      REQUEST FOR GRAPH-CYLINDERS MODE?\n         BE    SETMODEU          YES.\n         CLI   INCHARS,C'D'      REQUEST FOR DASD/DATASET-DETAIL MODE?\n         BE    SETMODEU          YES.\n         CLI   INCHARS,C'V'      SET VERTICAL SCALING FACTOR?\n         BE    SETVTSCL          YES.\n         CLI   INCHARS,C'I'      SET SAMPLING WAIT INTERVAL?\n         BE    SETUWAIT          YES.\n         CLI   INCHARS,C'L'      COMMENCE UNIT LOGGING?\n         BE    UNITLOGL          YES.\n         CLI   INCHARS,C'R'      COMMENCE UNIT LOG ANALYSIS?\n         BE    UNITLOGR          YES.\n         CLI   INCHARS,C'T'      TERMINATE LOG ACTIVITY?\n         BE    UNITLOGT          YES.\n         CLI   INCHARS,C'J'      REQUEST PROMPT FOR NEW JOBNAME PREFIX?\n         BE    UNITJOBP          YES.\n         CLI   INCHARS,C'U'      REQUEST PROMPT FOR NEW UNIT?\n         BNE   GIVEHLPU          NO.\nFINDUNIT MVI   UNITPRMP,X'C1'    RESET WCC.\n         LA    R0,UNTPRMPL       FULL SCREEN TPUT THE PROMPT MESSAGE.\nREFNDUNT LA    R1,UNITPRMP\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET UNIT ADDRESS.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    FINDUNIT          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   THEUNIT,INCHARS   NO, EXTRACT SPECIFIED UCB NAME.\nUNITSCAN XC    THEUCBAD,THEUCBAD RESTART UCB SCAN.\n         L     R4,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R4\n         L     R3,CVTUCBA        POINT TO FIRST UCB.\n         DROP  R4                CVT.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   FRSTUNIT          NO, FOLLOW STATIC UCB CHAIN.\n         L     R9,USCANADR       YES, POINT TO UCBSCAN SUBROUTINE.\n         USING UUCBSCAN,R9\n         XC    USCNWORK,USCNWORK CLEAR WORK AREA FOR THIS UCB SCAN.\n         DROP  R9                UUCBSCAN.\n         XC    USCANDEV,USCANDEV RESET SPECIFIC DEVICE EXAM FLAG.\n         BR    R9                GO INVOKE UCBSCAN.\nUNITDATA MVI   UDXSCROL+1,1      SHOW NEW DATA FROM FIRST LINE IN \"UD\".\n         CLI   ULOGMODE,C'R'     READING THE UNIT LOG?\n         BE    ULOGMDR           YES, GO DO IT.\nMOREUNIT ICM   R3,15,THEUCBAD    RESTORE UCB ADDRESS.\n         BZ    FINDUNIT          NO PREVIOUS UNIT, ISSUE PROMPT FOR 1.\nNEXTUNIT ICM   R3,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BNZ   FRSTUNIT          MUST BE USING STATIC UCB CHAIN.\n         TM    OSLEVEL,CVTUCBSV  UCB SERVICES AVAILABLE?\n         BNO   LOSTUNIT          NO, END OF STATIC UCB CHAIN REACHED.\n         XC    USCANDEV,USCANDEV RESET SPECIFIC DEVICE EXAM FLAG.\n         L     R9,USCANADR       YES, POINT TO UCBSCAN SUBROUTINE.\n         BR    R9                GO INVOKE UCBSCAN.\nFRSTUNIT UNPK  WORK(5),UCBCHAN(3) UNPACK UCBCHAN.\n         TR    WORK(4),HEX-C'0'  ENSURE PRINTABLE HEX DIGITS.\n         LA    R0,4              GET LENGTH OF UCB NAME.\n         ST    R0,WORK2+4        SAVE IT IN PARAMETER LIST.\n         LA    R0,THEUNIT        GET ADDRESS OF USER SPECIFICATION.\n         ST    R0,WORK+4         SAVE IT IN PARAMETER LIST.\n         LA    R0,WORK           POINT TO UCB NAME.\n         ST    R0,WORK2          SAVE IT IN PARAMETER LIST.\n         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.\n         BASR  R1,R7             COMPARE UCB LABEL WITH PREFIX.\n         BNE   NEXTUNIT          DIDN'T MATCH, SO TRY NEXT UCB.\n         TM    UCBSTAT,UCBALOC   IS THE DEVICE ALLOCATED?\n         BO    UDOTHIS           YES, DON'T SUPPRESS SAMPLING IT.\n         CLI   THEUNIT,C'*'      GENERIC UNIT SCAN?\n         BE    NEXTUNIT          YES, DON'T SAMPLE UNUSED DEVICE.\n         CLI   THEUNIT+1,C'*'    GENERIC UNIT SCAN?\n         BE    NEXTUNIT          YES, DON'T SAMPLE UNUSED DEVICE.\n         CLI   THEUNIT+2,C'*'    GENERIC UNIT SCAN?\n         BE    NEXTUNIT          YES, DON'T SAMPLE UNUSED DEVICE.\n         CLI   THEUNIT+3,C'*'    GENERIC UNIT SCAN?\n         BE    NEXTUNIT          YES, DON'T SAMPLE UNUSED DEVICE.\nUDOTHIS  ST    R3,THEUCBAD       SAVE UCB ADDRESS.\n*        MVC   ULOGUNIT(7),UCBNAME LOAD UCB NAME AND TYPE FIELDS.    4D\n         MVC   ULOGUNIT,UCBCHAN  COPY HEX DEVICE NUMBER.             4D\n         MVC   UNITTYPE,UCBTYP   COPY UCB TYPE.                      4D\n         CLC   THEVOLUM,UCBVOLI  SAME VOLUME AS PREVIOUSLY?\n         BE    UDXFREED          YES, DO NOT FREE THE EXTENT TABLE.\n         MVC   THEVOLUM,UCBVOLI  NO, SAVE THE VOLUME SERIAL NUMBER.\n         LM    R0,R1,UDXTREGS    LOAD UDXTABLE FREEMAIN VALUES.\n         LTR   R1,R1             ANY TABLE TO FREE?\n         BZ    UDXFREED          NO, SO SKIP FREEMAIN.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         SLR   R0,R0\n         ST    R0,UDXTABLE       INDICATE TABLE HAS BEEN FREED.\n         XC    UDXLARGE(40),UDXLARGE  INDICATE NO LARGEST EXTENT KNOWN.\nUDXFREED IC    R0,UNITMODE       SAVE CURRENT MODE.\n         MVI   UNITMODE,C'S'     FORCE MODE S FOR NON-DASD.\n         CLI   UNITTYPE+2,X'20'  DASD?\n         BNE   REDOUNIT          NO, GO SAMPLE IT.\n         STC   R0,UNITMODE       YES, RESTORE DISPLAY MODE.\n         TM    UCBSTAT,UCBONLI   ONLINE DASD?\n         BZ    USCALEDA          NO.\n         TM    UCBFLA,UCBNRY     DEVICE NOT READY?\n         BNZ   USCALEDA          YES.\n         TM    UCBDMCT,UCBMOUNT  MOUNT PENDING?\n         BO    USCALEDA          YES.\n         CLI   UCBVTOC+2,1       R OF VTOC TTR0 IS 1 (AS PER OS DISK)?\n         BNE   USCALEDA          NO.\n         ICM   R0,15,UDXTABLE    DOES THE EXTENT TABLE ALREADY EXIST?\n         BNZ   REDOUNIT          YES, AVOID RE-READING THE VTOC.\n         L     R9,UDSNXADR       NO, POINT TO VTOC MAP SUBROUTINE.\n         BASR  R14,R9            INVOKE IT.\n         B     REDOUNIT          DO NOT ALTER SCALE FROM FORMAT-4 DSCB.\nUSCALEDA CLI   UNITTYPE+3,X'0B'  EIGHT CYLS PER RANGE OKAY?\n         BH    DBLDENS           NO, DOUBLE IT.\n         MVI   CYLHZSHF+1,3      YES, SUPPLY SHIFTING VALUE.\n*        MVI   CYLHZSCL+1,8      OKAY FOR ANYTHING LESS THAN A 3330-1.\n         B     REDOUNIT          GO SAMPLE THIS DISK.\nDBLDENS  MVI   CYLHZSHF+1,4      HANDLE 3330-1/F479, 3375, 3380/F6425,\n*        MVI   CYLHZSCL+1,16     3390 AND F6421 DEVICES.\n         B     REDOUNIT          GO SAMPLE THIS DISK.\nLOSTUNIT OC    THEUCBAD,THEUCBAD WAS THIS A SCAN RESUMPTION?\n         BNZ   UNITSCAN          YES, RESTART FROM BEGINNING.\n         LA    R0,UNTERRLN       NO, REQUESTED UNIT DOES NOT EXIST.\n         MVI   UNITPRMP,X'C5'    SET BELL BIT ON IN WCC.\n         B     REFNDUNT          REPROMPT FOR NEW UNIT ADDRESS.\nSETMODEU MVC   UNITMODE,INCHARS  SUPPLY NEW MODE.\n         LTR   R3,R3             LOOKING AT ANYTHING YET?\n         BZ    FINDUNIT          NO, GO FIND SOMETHING.\n         CLI   UNITTYPE+2,X'20'  LOOKING AT A DISK?\n         BE    UREGRAPH          YES.\n         MVI   UNITMODE,C'S'     NO, FORCE DISPLAY MODE FOR NON-DASD.\n         B     PUTALLUN          RESHOW SCREEN WITHOUT CHANGE.\nUREGRAPH CLI   UNITMODE,C'S'     SHOWING SAMPLES?\n         BE    SHOWSAMP          YES.\n         B     CYLNDUSE          NO, SHOW A GRAPH.\nINCRVSCL CLI   UNITMODE,C'S'     DISPLAYING A GRAPH?\n         BE    SAMEUNIT          NO, IGNORE REQUEST.\n         CLI   UNITMODE,C'D'     DISPLAYING DASD/DATASET EXTENTS?\n         BE    UDSCRLUP          YES, SCROLL UP.\n         CLI   UNITMODE,C'A'     DISPLAYING ADDRESS SPACE GRAPH?\n         BE    SAMEUNIT          YES, IGNORE REQUEST.\n         CLI   CYLVTSCL+1,5      ALREADY AT MAXIMUM COMPRESSION?\n         BNL   SAMEUNIT          YES, DON'T INCREASE IT.\n         LA    R0,1              NO.\n         AH    R0,CYLVTSCL       INCREMENT IT.\n         STH   R0,CYLVTSCL\n         B     UREGRAPH          RESHOW GRAPH.\nUDSCRLUP LH    R0,UDXSCROL       GET THE CURRENT FIRST LINE NUMBER.\n         AHI   R0,4              ALLOW FOR HEADINGS AND SUMMARIES.\n         S     R0,LINES          GET NEW FIRST LINE NUMBER.\n         BP    UDSCRLOK          RESULT IS VALID.\nUDXATTOP LA    R0,1              CAN'T GO UP BEYOND FIRST LINE.\nUDSCRLOK STH   R0,UDXSCROL       SAVE THE NEW FIRST LINE NUMBER.\n         B     DASDSAMP          REDISPLAY FROM NEW LINE NUMBER.\nDECRVSCL CLI   UNITMODE,C'S'     DISPLAYING A GRAPH?\n         BE    SAMEUNIT          NO, IGNORE REQUEST.\n         CLI   UNITMODE,C'D'     SHOWING DASD/DATASET EXTENT SAMPLES?\n         BE    UDSCRLDN          YES, SCROLL DOWN.\n         CLI   UNITMODE,C'A'     DISPLAYING ADDRESS SPACE GRAPH?\n         BE    SAMEUNIT          YES, IGNORE REQUEST.\n         LH    R0,CYLVTSCL       GET VERTICAL AXIS COMPRESSION FACTOR.\n         BCT   R0,DECRNOT0       DECREMENT IT.\n         B     UREGRAPH          RESHOW GRAPH.\nDECRNOT0 STH   R0,CYLVTSCL       SAVE NEW VALUE IF STILL POSITIVE.\n         B     UREGRAPH          RESHOW GRAPH.\nUDSCRLDN LH    R0,UDXSCROL       GET THE CURRENT FIRST LINE NUMBER.\n         A     R0,LINES          SCROLL DOWN A PAGE.\n         AHI   R0,-4             ALLOW FOR HEADINGS AND SUMMARIES.\n         STH   R0,UDXSCROL       SAVE THE NEW FIRST LINE NUMBER.\n         LA    R0,1              LIMIT SCROLLING TO KEEP LAST PAGE FULL\n         AH    R0,UNITJBSY       GET NUMBER OF LINES PLUS ONE.\n         AHI   R0,4              ALLOW FOR HEADINGS AND SUMMARIES.\n         S     R0,LINES          GET MAXIMUM FIRST LINE NUMBER.\n         CH    R0,UDXSCROL       IS SCROLLING DOWN A PAGE ALRIGHT?\n         BNL   DASDSAMP          YES, REDISPLAY FROM NEW LINE NUMBER.\n         LTR   R0,R0             NO, SO IS THERE MORE THAN ONE PAGE?\n         BNP   UDXATTOP          NO, SO KEEP STARTING FROM FIRST LINE.\n         B     UDSCRLOK          YES, SO SCROLL DOWN THE MAXIMUM.\nDECRHSCL CLI   UNITMODE,C'A'     DISPLAYING ADDRESS SPACE GRAPH?\n         BNE   SAMEUNIT          NO, IGNORE REQUEST.\n         MVI   JOBHZSHF+1,0      YES, USE FULL-SCALE GRAPH.\n         B     UREGRAPH          RESHOW GRAPH.\nINCRHSCL CLI   UNITMODE,C'A'     DISPLAYING ADDRESS SPACE GRAPH?\n         BNE   SAMEUNIT          NO, IGNORE REQUEST.\n         MVI   JOBHZSHF+1,1      YES, USE HALF-SCALE GRAPH.\n         B     UREGRAPH          RESHOW GRAPH.\nSETVTSCL CLI   INCHARS+1,C'1'    IS SCALING FACTOR TOO LOW?\n         BL    GIVEHLPU          YES, SHOW HELP PANEL.\n         CLI   INCHARS+1,C'5'    IS SCALING FACTOR TOO HIGH?\n         BH    GIVEHLPU          YES, SHOW HELP PANEL.\n         MVC   CYLVTSCL+1(1),INCHARS+1\n         NI    CYLVTSCL+1,X'0F'  CONVERT CHARACTER TO BINARY.\nSAMEUNIT LTR   R3,R3             LOOKING AT ANYTHING YET?\n         BZ    FINDUNIT          NO, GO FIND SOMETHING.\n         CLI   UNITMODE,C'S'     YES, IN A GRAPH DISPLAY MODE?\n         BE    PUTALLUN          NO, RESHOW SCREEN WITHOUT CHANGE.\n         B     CYLNDUSE          YES, GO REDRAW THE GRAPH.\nSETUWAIT CLI   INCHARS+1,C'0'    NUMERIC COEFFICIENT?\n         BL    GIVEHLPU          NO, SHOW HELP PANEL.\n         CLI   INCHARS+1,C'9'    NUMERIC COEFFICIENT?\n         BH    GIVEHLPU          NO, SHOW HELP PANEL.\n         MVC   USAMPLTM+3(1),INCHARS+1\n         NI    USAMPLTM+3,X'0F'  CONVERT CHARACTER TO BINARY.\n         LTR   R3,R3             LOOKING AT ANYTHING YET?\n         BZ    FINDUNIT          NO, GO FIND SOMETHING.\n         B     PUTALLUN          YES, RESHOW SCREEN WITHOUT CHANGE.\nUNITJOBP XC    SELJOBNM,SELJOBNM ERASE PREVIOUS JOBNAME.\n         SLR   R1,R1\n         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?\n         BE    NOJOBUNT          YES, DO IT.\nUGETJNAM LA    R1,JPRFXMSG\n         LA    R0,JOBSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    UGETJNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         MVC   SELJOBNM,INCHARS  EXTRACT SPECIFIED PREFIX.\n         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.\n         AHI   R1,-6             GET LENGTH OF TEXT.\nNOJOBUNT STH   R1,JPRFXLEN       STORE PREFIX LENGTH.\n         OI    UNITSCYL,X'80'    INVALIDATE COUNTERS.\n         B     UREGRAPH          RECONSTRUCT SCREEN IMAGE FOR DISPLAY.\nUNITLOGL BAS   R14,ULOGCHEK      VERIFY IMPULOG FILE EXISTENCE.\nUGETTHRS LA    R0,UTHRSHLN       FULL SCREEN TPUT THE PROMPT MESSAGE.\n         LA    R1,UTHRESH\n         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PERCENTAGE.\n         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?\n         BE    UGETTHRS          YES, UNEXPECTED SO REDRIVE THE PROMPT.\n         LA    R14,2             MAXIMUM NUMBER OF DIGITS SUPPORTED.\n         LA    R15,INCHARS       POINT TO INPUT AREA.\n         SLR   R0,R0\n         SLR   R1,R1\nUTHRSHLP CLI   0(R15),C'0'       NUMERIC CHARACTER?\n         BL    GOTLOGTH          NO, END OF STORY.\n         MH    R0,TEN+2          PROMOTE PREVIOUS DIGIT.\n         NI    0(R15),X'0F'      ERASE ZONE.\n         IC    R1,0(,R15)        LOAD DIGIT VALUE.\n         AR    R0,R1             ACCUMULATE.\n         LA    R15,1(,R15)       POINT TO NEXT DIGIT.\n         BCT   R14,UTHRSHLP      GET NEXT DIGIT.\nGOTLOGTH STH   R0,ULGTHRSH       SAVE % BUSY THRESHOLD FOR LOGGING.\n         CVD   R0,WORK           SHOW IT IN NEXT PROMPT.\n         OI    WORK+7,X'0F'\n         UNPK  UTHRSCHR,WORK+6(2)\n         CLI   ULOGMODE,C'L'     ALREADY LOGGING?\n         BE    ULOGTHIS          YES, BUT MAYBE LOG THIS NOW.\n         CLI   ULOGMODE,C' '     ANY LOG ACTIVITY?\n         BE    OPNOTPUT          NO, GO OPEN FOR OUTPUT.\n         CLOSE IMPULOG           YES, CLOSE IT FIRST.\nOPNOTPUT OPEN (IMPULOG,OUTPUT)   OPEN FOR OUTPUT.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n*        SLR   R0,R0\n*        ST    R0,ULOGCNTR       RESET LOG RECORD COUNT.\n         MVI   ULOGMODE,C'L'     REMEMBER LOGGING MODE.\nULOGTHIS CLI   ULOGSBTY+1,0      HAS THIS RECORD ALREADY BEEN LOGGED?\n         BNE   NOULOG            YES, DON'T LOG THIS ACTIVITY.\n         CLC   UNITBUSY,ULGTHRSH IS BUSY % UP TO THRESHOLD?\n         BL    SAMEUNIT          NO, DON'T LOG THIS ACTIVITY.\n         MVI   ULOGSBTY+1,1      SUPPLY RECORD SUB-TYPE.\n         LA    R1,ULOGPUT\n         BASSM R5,R1             WRITE A RECORD.\n*        LA    R0,1\n*        A     R0,ULOGCNTR       INCREMENT LOG RECORD COUNT.\n*        ST    R0,ULOGCNTR\n         B     NOULOG            GET NEXT REQUEST.\nUNITLOGR BAS   R14,ULOGCHEK      VERIFY IMPULOG FILE EXISTENCE.\n         CLI   ULOGMODE,C'R'     READING IMPULOG ALREADY?\n         BE    ULOGMDR           YES.\n         CLI   ULOGMODE,C' '     ANY LOG ACTIVITY?\n         BE    OPNINPUT          NO, GO OPEN FOR INPUT.\n         CLOSE IMPULOG           YES, CLOSE IT FIRST.\nOPNINPUT OPEN (IMPULOG,INPUT)    OPEN FOR INPUT.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\n         MVI   ULOGMODE,C'R'     REMEMBER LOGGING MODE.\n         LTR   R3,R3             WAS UNIT SPECIFIED PREVIOUSLY?\n         BP    ULOGMDR           YES, CONTINUE.\n         DROP  R3                UCBOB.\n         L     R3,CVTPTR(,0)     NO, ARBITRARILY CHOOSE TO POINT TO\n         USING CVT,R3\n         L     R3,CVTSYSAD       SYSRES UCB WHILE READING IMPULOG.\n         DROP  R3                CVT.\n         USING UCBOB,R3\n         UNPK  WORK(5),UCBCHAN(3) UNPACK UCBCHAN.\n         TR    WORK(4),HEX-C'0'\n         MVC   THEUNIT,WORK      COPY THE UCB NAME.\n         ST    R3,THEUCBAD       SYSRES NOW DEFAULT VOLUME AFTER E-O-F.\nULOGMDR  DS    0H\n         MVC   WORK(6),THEVOLUM  SAVE PREVIOUS VOLUME SERIAL NUMBER.\n         LA    R1,ULOGGET\n         BASSM R5,R1             READ A RECORD.\n         OI    UNITSCYL,X'80'    INVALIDATE COUNTERS.\n         CLC   THEVOLUM,WORK     SAME VOLUME AS PREVIOUSLY?\n         BE    UREGRAPH          YES, CONSTRUCT THE NEXT DISPLAY.\n         L     R9,UDSNXADR       NO, POINT TO VTOC MAP SUBROUTINE.\n         BASR  R14,R9            INVOKE IT.\n         B     UREGRAPH          CONSTRUCT NEXT DISPLAY.\nEOULOG   LA    R1,1\n         SLL   R1,31             GET NEW AMODE BIT.\n         LA    R0,ULOGCLOS       GET TARGET ADDRESS.\n         OR    R1,R0             REVERT TO 31-BIT AMODE AND\n         BSM   R0,R1             CLOSE THE LOGGING FILE.\nUNITLOGT MVI   UCMSG,X'C5'       SOUND ALARM FOR CLOSE FAILURE.\n         MVI   UCMSG+5,X'F8'     HIGH INTENSITY FOR CLOSE FAILURE.\n         MVI   UCMSG+8,X'F2'     RED MESSAGE FOR CLOSE FAILURE. (I3279)\n         CLI   ULOGMODE,C' '     ANY LOG ACTIVITY?\n         BE    PUTUCMSG          NO, SHOW MESSAGE WITHOUT A CLOSE.\nULOGCLOS CLOSE IMPULOG           YES, CLOSE THE LOGGING FILE.\n         NI    MODESW2,255-CLNF  CLEAN-UP FOR EXIT NO LONGER REQUIRED.\n         MVI   ULOGMODE,C' '     FLAG IT.\n         MVI   UCMSG,X'C1'       DON'T SOUND ALARM FOR CLOSE SUCCESS.\n         MVI   UCMSG+5,X'F0'     LOW INTENSITY FOR CLOSE SUCCESS.\n         MVI   UCMSG+8,X'F4'     GREEN MESSAGE FOR CLOSE OKAY.  (I3279)\nPUTUCMSG LA    R1,UCMSG          POINT TO \"UNIT-LOG CLOSED\" MESSAGE.\n         LA    R0,UCMSGLEN       GET \"UNIT-LOG CLOSED\" MESSAGE LENGTH.\n         B     PUTSCRNU          SHOW IT AND GET THE NEXT REQUEST.\nGIVEHLPU MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     PUTSCRNU          GO DISPLAY HELP PANEL.\nULOGCHEK L     R1,PSATOLD        GET POINTER TO CURRENT TCB.\n         L     R1,12(0,R1)       POINT TO TIOT.\n         LA    R1,24(0,R1)       POINT TO TIOELNGH.\n         SLR   R0,R0             PREPARE FOR IC.\nCHKUNITL CLC   4(8,R1),=C'IMPULOG '\n         BER   R14               FILE EXISTS SO RETURN.\n         IC    R0,0(0,R1)        GET TIOT ENTRY LENGTH.\n         AR    R1,R0             POINT TO NEXT TIOT ENTRY.\n         CLI   0(R1),0           ZERO LENGTH ENTRY?\n         BNE   CHKUNITL          NO, CHECK OUT THIS ENTRY.\n         LA    R1,NUMSG          YES, POINT TO \"NO UNIT LOG\" MESSAGE.\n         LA    R0,NUMSGLEN       GET \"NO UNIT LOG\" MESSAGE LENGTH.\n         B     PUTSCRNU          DISPLAY ERROR MESSAGE.\nULOGPUT  PUT   IMPULOG,ULOGREC   WRITE A RECORD.\n         BSM   R0,R5             RETURN TO CALLER.\nULOGGET  GET   IMPULOG,ULOGREC   READ A RECORD.\n         BSM   R0,R5             RETURN TO CALLER.\n         SPACE\n         TITLE 'UNIT SAMPLING MONITOR - VARIABLES AND CONSTANTS'\nGQUTOKEN DC    F'0'              TOKEN FOR GQSCAN.\nTHEUCBAD DC    A(0)              ADDRESS OF UCB OF UNIT BEING SAMPLED.\n*                                POSSIBLE X-AXIS LABELS VECTOR.\nCYLXLBAD DC    A(CYLXLBLS,CYLXLBL2,CYLXLBL3,CYLXLBL4,CYLXLBL5)\nUSAMPLTM DC    F'1'              SAMPLING INTERVAL OF 10 MILLISECONDS.\n*LOGCNTR DC    F'0'              COUNT OF RECORDS WRITTEN TO IMPULOG.\nUSCANADR DC    A(UUCBSCAN)       ADDRESS OF UCBSCAN SUBROUTINE.\nUDSNXADR DC    A(UNITDSNX)       ADDRESS OF VTOC MAP SUBROUTINE.\nUCYLXADR DC    A(UNITCYLX)       ADDRESS OF CYLINDER MAP SUBROUTINE.\nUDNXTENT DC    A(0)              ADDRESS OF NEXT DS EXTENT TABLE ENTRY.\nUSCANDEV DC    H'0'              DEVICE NUMBER REQUIRED FROM UCBSCAN.\nCYLVTSCL DC    H'1'              VERTICAL AXIS SCALING FACTOR.\n*YLHZSCL DC    H'8'              HORIZONTAL AXIS SCALING FACTOR.\nCYLHZSHF DC    H'3'              CYLINDER RANGE BIT SHIFTING VALUE.\nCYLHZMAX DC    H'72'             MAXIMUM GRAPH COLUMN INDEX.\nJOBHZSHF DC    H'0'              JOB ACCESS BIT SHIFTING VALUE.\nULGTHRSH DC    H'0'              BUSY PERCENT THRESHOLD FOR LOGGING.\nUDXSCROL DC    H'1'              FIRST LINE NUMBER FOR DISPLAY IN \"UD\".\nHDGUGUFF DC    CL12'DTL FSN CYL '\nUNITMODE DC    C'S'\nULOGMODE DC    C' '\nUNITCLAS DC    C'*TAPE**COMM**DASD**DISP***UR***CHRD**CCAD**MISC*'\nSYSVTOC  DC    CL8'SYSVTOC '     RESERVE MAJOR NAME.\nGQVOLSER DC    CL6' '            RESERVE MINOR NAME.\nDASDLSPH DC    CL40'FREE  CYLNDS TRACKS EXTNTS LARGEST-EXTNT'\n         SPACE\n         PRINT NOGEN\n         SPACE\nIMPULOG  DCB   DSORG=PS,MACRF=(GM,PM),DDNAME=IMPULOG,RECFM=FB,         +\n               LRECL=2048,BLKSIZE=0,BUFNO=2,EODAD=EOULOG\n         SPACE\n         PRINT GEN\n         SPACE\nHEADINGU DC    CL71' SSSS   UNIT=XXX  VOLSER    |JOB/ASID DTL CH|  <<I/+\n               O SAMPLES - HH:MM>> '\nUNITHDGC DC    CL71' SSSS   UNIT=XXX  VOLSER    CYLINDER RANGE FREQUENC+\n               Y GRAPH  -  HH:MM   '\nUNITFREQ EQU   UNITHDGC+43,9\nUNITHDGD DC    CL71'# JOB/ASID   CYL HD REC EXT-DATASETNAME (SSSS UNIT=+\n               XXX  VOLSER HH:MM)  '\nUNITLNAT DC    X'2841001BF0402842F3'\nIMUNITLN DC    CL79'IM DATA:  ###%BSY ###%DEFER ###%\u00acRDY ###%Q''D ###.#+\n               #Q-AV ###%RSVD ###.##RSV-AV  '\nOSUNITLN DC    CL79'OS DATA:  000.00%BSY 000.00SIO/S 00.000S-RSPTM  FIL+\n               ES:  ### ALLOCATED  ### OPEN'\nJOBUNTLN DC    CL79'JOB/ASID   CYL-RANGE   BUSY 0       10%       20%  +\n                    30%       40%       50%'\nJOBUNLN2 DC    CL48'10%  20%  30%  40%  50%  60%  70%  80%  90% 100%'\nCYLXAXIS DC    CL79'   0%+---------/\\--------/\\--------/\\--------/\\----+\n               ----/\\--------/\\--------/\\->'\nCYLXLBLS DC    CL79'CYL  0         80       160       240       320    +\n                  400       480       560  '\nCYLXLBL2 DC    CL79'CYL  0        160       320       480       640    +\n                  800       960       1120 '\nCYLXLBL3 DC    CL79'CYL  0        320       640       960       1280   +\n                  1600      1920      2240 '\nCYLXLBL4 DC    CL79'CYL  0        640       1280      1920      2560   +\n                  3200      3840      4480 '\nCYLXLBL5 DC    CL79'CYL  0        1280      2560      3840      5120   +\n                  6400      7680      8960 '\nUNITPRMP DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER THE 4-HEX DIGIT NAME OF THE UNIT TO BE SELECTED'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nTHEUNIT  DC    X'00000000'\n         DC    X'2841001BF0C22842F5114BD3'\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\nUNTPRMPL EQU   *-UNITPRMP\n         DC    X'11D1E2&HIGH'\n         DC    C'REENTER - THE PREVIOUSLY SPECIFIED UNIT WAS NOT FOUND'\nUNTERRLN EQU   *-UNITPRMP\nUTHRESH  DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER SAMPLED BUSY PERCENTAGE THRESHOLD FOR LOGGING'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nUTHRSCHR DC    X'0000'\n         DC    X'2841001BF0C2'\nUTHRSHLN EQU   *-UTHRESH\nNUMSG    DC    X'C5115DD81DF82842F22841F2' \"NO UNIT LOG\" MESSAGE.\n         DC    CL39'     IMPULOG IS NOT PRE-ALLOCATED      '\n         DC    X'1140402842001D402841F4130000'\nNUMSGLEN EQU   *-NUMSG\nUCMSG    DC    X'C1115DD81DF02842F42841F2' \"UNIT-LOG CLOSED\" MESSAGE.\n         DC    CL39' IMPULOG CLOSED BY USER REQUEST OR EOF '\n         DC    X'1140402842001D402841F4130000'\nUCMSGLEN EQU   *-UCMSG\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n         TITLE 'UNIT CONTROL BLOCK DATA ACQUISITION ROUTINE'\n         USING UUCBSCAN,R9\nUUCBSCAN L     R15,CNFGTKAD      POINT TO IOCTOKEN AREA.\n         ICM   R0,3,USCANDEV     SAMPLING A SPECIFIC DEVICE?\n         BNZ   UUCBSAME          YES, NEED THE SAME UCB AS BEFORE.\n         UCBSCAN COPY,           SCAN UCBS, EVEN IF NOT APF'D.         +\n               WORKAREA=USCNWORK,                                      +\n               UCBAREA=USCNUCB,                                        +\n               CMXTAREA=USCNCMXT,                                      +\n               DEVNCHAR=USCNDEVN,                                      +\n               UCBPAREA=USCNPRFX,                                      +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=ALL,                                           +\n               IOCTOKEN=(R15),                                         +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,USCN,COMPLETE)\n         LTR   R15,R15           WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   LOSTUNIT          NO, NO MORE UCB ENTRIES.\n         LA    R3,USCNUCB        YES, POINT TO THE RETURNED UCB COPY.\n         MVC   USCANDEV,UCBCHAN  SAVE UCBCHAN FOR DEVICE SAMPLING.\n         B     FRSTUNIT          JUMP OVER STATIC UCB CHAIN STUFF.\n         SPACE\nUUCBSAME XC    USAMEWRK,USAMEWRK CLEAR WORK AREA FOR THIS UCB SCAN.\n         LA    R3,USCANDEV       POINT TO REQUIRED UCBCHAN VALUE.\n         UCBSCAN COPY,           SCAN UCBS, EVEN IF NOT APF'D.         +\n               WORKAREA=USAMEWRK,                                      +\n               UCBAREA=USCNUCB,                                        +\n               CMXTAREA=USCNCMXT,                                      +\n               DEVNCHAR=USCNDEVN,                                      +\n               UCBPAREA=USCNPRFX,                                      +\n               DEVN=(R3),                                              +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               NONBASE=YES,                                            +\n               DEVCLASS=ALL,                                           +\n               IOCTOKEN=(R15),                                         +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,USCN,COMPLETE)\n         LTR   R15,R15           WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   UNITQUIT          NO, TERMINATE SAMPLING.\n         LA    R3,USCNUCB        YES, POINT TO THE RETURNED UCB COPY.\n         CLC   USCANDEV,UCBCHAN  WAS THE REQUIRED UCB RETURNED?\n         BNE   UNITQUIT          NO, TERMINATE SAMPLING.\n         B     UNITINIT          YES, NOW CHECK THE DEVICE STATUS.\n         DROP  R9,R3             UUCBSCAN, UCBOB.\n         SPACE 2\nUSCNWORK DC    XL100'00'         UCBSCAN WORKAREA.\nUSCNPRFX DC    XL48'00'          UCBSCAN UCB PREFIX AREA.\nUSCNUCB  DC    XL48'00'          UCBSCAN UCB BASE AREA.\nUSCNCMXT DC    XL64'00'          UCBSCAN UCB COMMON EXTENSION AREA.\nUSCNDEVN DC    CL4'DEV#'         UCBSCAN UCB DEVICE NUMBER AREA.\nUSAMEWRK DC    XL100'00'         UCBSCAN WORKAREA.\n         UCBSCAN MF=(L,USCN)     UCBSCAN PARAMETER LIST.\n         TITLE 'UNIT SAMPLING DATA SET NAME EXTENT ASSIGNMENT ROUTINE'\n         USING UNITDSNX,R9\nUNITDSNX STM   R14,R12,SAVE+12   SAVE GENERAL REGISTER VALUES.\n         LA    R3,SECWORKA       POINT TO THE NEW SAVE AREA.\n         ST    R3,8(,R13)        CHAIN SAVE AREAS.\n         ST    R13,4(,R3)\n         DROP  R13               GOTAREA.\n         LR    R13,R3\n         USING SECWORKA,R13\n         XC    UDXLARGE(40),UDXLARGE  INDICATE NO LARGEST EXTENT KNOWN.\n         XC    UNITSJOB(20),UNITSJOB  CLEAR A WORK AREA.\n         ICM   R1,15,UDXTABLE    DOES THE EXTENT TABLE ALREADY EXIST?\n         BNZ   UDXTBLOK          YES, SKIP GETMAIN.\n         LA    R0,UDXENTSZ       GET THE SIZE OF AN EXTENT ENTRY.\n         SLL   R0,10             ALLOW FOR 1024 EXTENT ENTRIES.\n         ST    R0,UDXTBSIZ       SAVE THE TABLE'S SIZE.\n         GETMAIN RC,LV=(0),SP=SUBPOOL LOC=(ANY,ANY)\n         LTR   R15,R15           WAS THE GETMAIN SUCCESSFUL?\n         BNZ   UDVTCXIT          NO, RETURN TO CALLER.\n         LA    R1,0(,1)          YES, ENSURE ADDRESS FORMAT.\n         ST    R1,UDXTABLE       SAVE THE TABLE'S ADDRESS.\nUDXTBLOK XC    0(UDXENTSZ,R1),0(R1)   CREATE AN ENTRY FOR VOLUME LABEL.\n         USING UDXENTRY,R1\n         MVC   UDXDSNAM,BLANKS\n         MVC   UDXDSNAM(20),=CL20'*** VOLUME LABEL ***'\n         DROP  R1                UDXENTRY.\n         LA    R1,UDXENTSZ(,R1)  POINT PAST FIRST ENTRY.\n         ST    R1,UDNXTENT       SAVE FIRST VACANT ENTRY ADDRESS.\n         MVC   VLSERVA,THEVOLUM  GET THE VOLUME TO ALLOCATE.\n         MVI   TSVA4+5,8         RESET DDNAME LENGTH.\n         MVC   RTDDNVA,BLANKS    RESET DDNAME.\n         MVI   TSVA5+5,44        RESET DSNAME LENGTH.\n         MVC   RTDSNVA,BLANKS    RESET DSNAME.\n         LA    R1,VTOCALOC       POINT TO DYNALLOC PARAMETER LIST.\n         DYNALLOC                ALLOCATE THE VOLUME.\n         LTR   R15,R15           WAS ALLOCATION SUCCESSFUL?\n         BNZ   UDVTCXIT          NO, RETURN TO CALLER.\n         LA    R1,RTDDNVA        POINT TO THE DDNAME.\n         LA    R0,1              LOAD ENTRY CODE FOR OPEN.\n         LA    R15,VTOCCOMM      GET VTOC READ ENTRY POINT.\n         BASSM R14,R15           OPEN THE VTOC.\n         LTR   R15,R15           DID THE OPEN WORK?\n         BNZ   UDVTCFRE          NO, FREE THE VTOC.\nUDVTCGET SLR   R0,R0             LOAD ENTRY CODE FOR READ.\n         LA    R15,VTOCCOMM      GET VTOC READ ENTRY POINT.\n         BASSM R14,R15           GET A DSCB.\n         CHI   R15,4             END-OF-FILE?\n         BE    UDVTCLOS          YES, GO CLOSE THE VTOC.\n         BH    UDVTCGET          IF I/O ERROR GET THE NEXT VTOC TRACK.\n         CLI   8+44(R1),C'4'     IS THIS A FORMAT-4 DSCB?\n         BE    UDISFMT1          YES, TREAT IT AS A FORMAT-1 DSCB.\n         CLI   8+44(R1),C'1'     IS THIS A FORMAT-1 DSCB?\n         BNE   UDISFMT3          NO, SO GO SEE IF IT IS A FORMAT-3.\nUDISFMT1 SLR   R0,R0\n         ICM   R0,1,8+59(R1)     LOAD THE NUMBER OF EXTENTS.\n         BZ    UDVTCGET          IGNORE DSCB IF ZERO EXTENTS.\n         LA    R3,3\n         CR    R0,R3             MORE THAN THREE EXTENTS?\n         BNH   UDF1EXOK          NO.\n         LR    R0,R3             YES, BUT NOT DESCRIBED BY THIS DSCB.\nUDF1EXOK LA    R2,8+105(,R1)     POINT TO THE FIRST EXTENT DESCRIPTOR.\nUDF1EXLP BAS   R14,UDGETENT      GET THE NEXT EXTENT ENTRY.\n         USING UDXENTRY,R3\n         MVC   UDXDSNAM,8(R1)    LOAD DATA SET NAME.\n         MVC   UDSCBADR,0(R1)    LOAD CCHHR OF THIS DSCB.\n         MVC   UDSCBPTR,8+135(R1) PUT CCHHR OF RELATED DSCB.\n         MVC   UDXTNTCT,8+59(R1) LOAD DATA SET EXTENT COUNT.\n         LA    R2,10(,R2)        POINT TO THE NEXT EXTENT DESCRIPTOR.\n         BCT   R0,UDF1EXLP       PROCESS THE NEXT EXTENT.\n         CLI   UDXDSNAM,X'04'    IS IT THE VTOC?\n         BNE   UDVTCGET          NO, PROCESS THE NEXT DSCB.\n         MVC   UDXDSNAM,BLANKS   YES, ERASE GARBAGE. (HOPE ONLY 1 EXT.)\n         MVC   UDXDSNAM(32),=CL32'*** VOLUME TABLE OF CONTENTS ***'\n         B     UDVTCGET          PROCESS THE NEXT DSCB.\n         DROP  R3                UDXENTRY.\nUDISFMT3 CLI   8+44(R1),C'3'     IS THIS A FORMAT-3 DSCB?\n         BNE   UDVTCGET          NO, SO IGNORE THIS DSCB.\n         LA    R0,4              YES, GET MAXIMUM EXTENT COUNT IN KEY.\n         LA    R2,8+4(,R1)       POINT TO THE FIRST EXTENT DESCRIPTOR.\n         BAS   R6,UDF3EXLP       PROCESS EXTENTS IN KEY.\n         LA    R0,9              GET MAXIMUM EXTENT COUNT IN DATA.\n         LA    R2,8+45(,R1)      POINT TO THE FIRST EXTENT DESCRIPTOR.\n         BAS   R6,UDF3EXLP       PROCESS EXTENTS IN DATA.\n         B     UDVTCGET          PROCESS THE NEXT DSCB.\nUDF3EXLP CLI   1(R2),0           UNUSED EXTENT SO NO MORE EXTENTS?\n         BE    UDVTCGET          YES, CAN'T HAVE 1ST EXTENT IN A FMT-3.\n         BAS   R14,UDGETENT      NO, GET THE NEXT EXTENT ENTRY.\n         USING UDXENTRY,R3\n         MVC   UDXDSNAM(5),0(R1) LOAD DATA SET NAME WITH DSCB CCHHR.\n         MVC   UDSCBADR,0(R1)    LOAD CCHHR OF THIS DSCB.\n         MVC   UDSCBPTR,8+135(R1) PUT CCHHR OF RELATED DSCB.\n         DROP  R3                UDXENTRY.\n         LA    R2,10(,R2)        POINT TO THE NEXT EXTENT DESCRIPTOR.\n         BCT   R0,UDF3EXLP       PROCESS THE NEXT EXTENT.\n         BR    R6                RETURN TO THE CALLER - DSCB-3 ROUTINE.\nUDVTCLOS LA    R0,2              LOAD ENTRY CODE FOR CLOSE.\n         LA    R15,VTOCCOMM      GET VTOC READ ENTRY POINT.\n         BASSM R14,R15           OPEN THE VTOC.\nUDVTCFRE MVC   DDNAMVF,RTDDNVA   COPY THE CORRECT DDNAME.\n         LA    R1,VTOCFREE       POINT TO DYNALLOC PARAMETER LIST.\n         DYNALLOC                DEALLOCATE THE VTOC.  (HOPE FOR 0 RC.)\nUDSNSRCH MVI   WORK,0            CLEAR A FLAG.\n         L     R1,UDXTABLE       POINT TO THE TABLE.\n         L     R15,UDNXTENT      END OF TABLE.\nUDSNLOOP CLI   2(R1),0           PROPER DSNAME LOADED IN ENTRY?\n         BNE   UDSNOKAY          YES.  (OR HH IS OVER 255!!)\n         L     R3,UDXTABLE       NO, POINT TO FIRST TABLE ENTRY.\n         USING UDXENTRY,R3\nUDMTCHLP CLC   UDSCBPTR,0(R1)    ENTRY RELATED TO THIS DSCB?\n         BNE   UDPNTRLK          NO, TRY NEXT TABLE ENTRY.\n         MVC   0(44,R1),UDXDSNAM YES, COPY THE DATA SET NAME.\n         CLI   2(R1),0           PROPER DSNAME NOW LOADED IN ENTRY?\n         BNE   UDSNOKAY          YES.  (OR HH IS OVER 255!!)\n         OI    WORK,1            NO, ANOTHER PASS NEEDED.  (ICF VSAM.)\n         B     UDSNOKAY          CONTINUE THIS PASS THROUGH TABLE.\nUDPNTRLK LA    R3,UDXENTSZ(,R3)  POINT TO THE NEXT ENTRY.\n         C     R3,UDNXTENT       REACHED END OF TABLE?\n         BL    UDMTCHLP          NO, CONTINUE.\n         MVC   0(44,R1),BLANKS   YES, CLEAR DATA SET NAME.\n         MVC   0(8,R1),UNKNOWN   INDICATE ORPHAN DSCB.\n         DROP  R3                UDXENTRY.\nUDSNOKAY LA    R1,UDXENTSZ(,R1)  POINT TO THE NEXT ENTRY.\n         C     R1,UDNXTENT       REACHED END OF TABLE?\n         BL    UDSNLOOP          NO, CONTINUE.\n         CLI   WORK,0            IS ANOTHER PASS REQUIRED?\n         BNE   UDSNSRCH          YES, GO DO IT.\n         DROP  R13               SECWORKA.\nUDVTCXIT L     R13,4(,R13)       POINT TO OLD SAVE AREA.\n         USING GOTAREA,R13\n         ST    R15,SAVE+16       SAVE THE RETURN CODE.\n         LM    R14,R12,SAVE+12   RESTORE REGISTERS.\n         BR    R14               RETURN TO CALLER.\n         SPACE\n         DROP  R13               GOTAREA.\n         USING SECWORKA,R13\nUDGETENT DS    0H                DATA SET EXTENT REGISTERING ROUTINE.\n         L     R3,UDNXTENT       POINT TO THE FIRST VACANT ENTRY.\n         L     R15,UDXTABLE      POINT TO THE START OF THE TABLE.\n         A     R15,UDXTBSIZ      POINT JUST PAST THE END OF THE TABLE.\n         CR    R15,R3            ANY VACANT ENTRY LEFT?\n         BNH   UDVTCLOS          NO, CLOSE AND DEALLOCATE THE VTOC.\n         LA    R15,UDXENTSZ(,R3) YES, POINT TO THE NEXT ENTRY.\n         ST    R15,UDNXTENT      THIS IS NOW THE FIRST VACANT ENTRY.\n         USING UDXENTRY,R3\n         MVC   UDXTNTNO(9),1(R2) COPY THE EXTENT DESCRIPTOR.\n         STM   R14,R12,12(R13)   SAVE REGISTERS WITH NEW ENTRY ADDRESS.\n         CLI   8(R1),X'04'       ENTRY FOR THE VTOC?\n         BNE   ULRGPARS          NO, CHECK FOR LARGE EXTENT.\n         MVC   UTRKSCYL,8+64(R1) YES, GET THE CYLINDER TRACK COUNT.\n         LH    R15,8+62(R1)      GET THE NUMBER OF CYLINDERS ON DISK.\n         LTR   R15,R15           SENSIBLE VALUE?\n         BNP   UDXTEXIT          NO, DON'T KNOW WHAT HAPPENED THERE.\n         LA    R5,3              LOAD MINIMUM SHIFTING VALUE.\n         SRL   R15,0(R5)         SHIFT BY THIS VALUE.\nUDXHZTST STH   R5,CYLHZSHF       SAVE NEW VALUE FOR GRAPHS.\n         CH    R15,CYLHZMAX      WILL ALL CYLINDERS FIT ON SCREEN?\n         BNH   UDXTEXIT          YES, RETURN TO CALLER.\n         LA    R5,1(,R5)         NO, ADD ONE TO SHIFT VALUE.\n         SRL   R15,1             SHIFT CYLINDER COUNT ANOTHER ONE.\n         B     UDXHZTST          GO TEST THE NEW VALUE.\nULRGPARS DS    0H                LARGE EXTENT CHECKING ROUTINE.\n         LH    R5,UDXHCCHH       GET EXTENT END CYLINDER NUMBER.\n         SH    R5,UDXLCCHH       GET NUMBER OF CYLINDERS SPANNED.\n         MH    R5,UTRKSCYL       CONVERT THIS TO A TRACK COUNT.\n         SH    R5,UDXLCCHH+2     SUBTRACT STARTING TRACK NUMBER.\n         AH    R5,UDXHCCHH+2     ADD ENDING TRACK NUMBER.\n         LA    R5,1(,R5)         GET THE TOTAL EXTENT TRACK COUNT.\n         LA    R0,10             TEN LARGE EXTENTS TO BE RETAINED.\n         LA    R6,UDXLARGE       POINT TO LARGE EXTENT ENTRY LIST.\n         LA    R7,UNITSJOB       POINT TO LARGE EXTENT SIZE LIST.\nUDSIZELP CLM   R5,3,0(R7)        IS NEW ENTRY BIGGER?\n         BH    UDINSERT          YES, INSERT THIS INTO THE LIST.\n         LA    R6,4(,R6)         POINT TO NEXT ADDRESS IN LIST.\n         LA    R7,2(,R7)         POINT TO NEXT SIZE IN LIST.\n         BCT   R0,UDSIZELP       TRY FOR NEXT POSITION IN LIST.\n         B     UDXTEXIT          NOT IN TOP TEN SO RETURN.\nUDINSERT L     R4,0(,R6)         REMEMBER OLD ADDRESS.\n         ICM   R5,12,0(R7)       REMEMBER OLD SIZE.\n         ST    R3,0(,R6)         INSERT NEW ADDRESS.\n         STH   R5,0(,R7)         INSERT NEW SIZE.\n         LR    R3,R4             PROMOTE OLD ADDRESS.\n         SRL   R5,16             PROMOTE OLD SIZE.\n         LA    R6,4(,R6)         POINT TO NEXT ADDRESS IN LIST.\n         LA    R7,2(,R7)         POINT TO NEXT SIZE IN LIST.\n         BCT   R0,UDINSERT       PERCOLATE DOWN THE LIST.\nUDXTEXIT LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         BR    R14               RETURN TO CALLER.\n         DROP  R3,R13,R9         UDXENTRY, SECWORKA, UNITDSNX.\n         USING GOTAREA,R13\n         SPACE\nUTRKSCYL DC    H'15'             NUMBER OF TRACKS PER CYLINDER.\n         LTORG\n         TITLE 'UNIT SAMPLING CYLINDER RANGE DESIGNATION SUBROUTINE'\n         USING UNITCYLX,R15\nUNITCYLX STM   R14,R12,SAVE+12   SAVE GENERAL REGISTER VALUES.\n         LA    R1,BUFFER+LL      POINT TO SECOND DETAIL LINE.\n         CR    R1,R2             ON EXTENT INDICATION LINE?\n         BNE   UCYLXKEY          NO, CHECK IF LEGEND LINE.\n         SPACE\n         LA    R0,10             SHOW UP TO TEN LARGEST EXTENTS.\n         LA    R3,UDXLARGE+36    START WITH TENTH LARGEST.\n         USING UDXENTRY,R4\nURANGELP L     R4,0(,R3)         POINT TO LARGE EXTENT ENTRY.\n         LR    R14,0\n         BCTR  R14,0\n         STC   R14,WORK2         SUPPLY INDICATION CHARACTER.\n         OI    WORK2,X'30'       USE APL NUMERIC SUPERSCRIPTS.\n         BAS   R14,USHOWALC      INDICATE ITS ALLOCATION RANGE.\n         AHI   R3,-4             POINT TO NEXT LARGER EXTENT ENTRY.\n         BCT   R0,URANGELP       PROCESS NEXT LARGER EXTENT.\n         ICM   R4,15,UDXTABLE    POINT TO DATA SET EXTENT LIST.\n         BZ    UCYLEXIT          IT DOES NOT EXIST.\n         LA    R4,UDXENTSZ(,R4)  POINT TO SECOND (IE. VTOC) ENTRY.\n         CLI   UDXDSNAM,C'*'     REALLY THE VTOC ENTRY?\n         BNE   UCYLEXIT          NO, FORGET ALL THIS.\n         MVI   WORK2,C'V'        SUPPLY INDICATION CHARACTER.\n         BAS   R14,USHOWALC      INDICATE ITS ALLOCATION RANGE.\nUCYLEXIT LM    R14,R12,SAVE+12   RESTORE REGISTERS.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nUCYLXKEY LA    R9,LL+LL(,R1)     POINT TO FOURTH DETAIL LINE.\n         LA    R4,UDXLARGE       POINT TO LARGE EXTENT ADDRESS LIST.\n         LA    R3,X'30'          GET FIRST INDICATION CHARACTER CODE.\n         CR    R9,R2             ON LEGEND INDICATION LINE?\n         BNE   UCYL2KEY          NO, TRY FOR SECOND LEGEND LINE.\n         MVC   LL-70(6,2),=CL6'V-VTOC'\nUSHOWLRG ICM   R4,15,0(R4)       POINT TO DATA SET EXTENT LIST.\n         BNP   UCYLEXIT          IT DOES NOT EXIST.\n         XC    LL(256,R2),LL(R2) CLEAR A TRANSLATE TABLE AREA.\n         LA    R6,LL(3,R2)       POINT TO INDICATION CHARACTER SLOT.\n         STC   R3,0(,R6)         FLAG THE SLOT.\n         MVC   LL-60(2,R2),BLANKS\n         TRT   LL-73(73,R1),LL(R2)\n         BZ    UINDOKAY          LARGE EXTENT RANGE NOT INDICATED.\n         LR    R2,R9             RESTORE BUFFER POINTER AFTER TRT.\n         STC   R3,LL-60(,R2)     SUPPLY INDICATION CHARACTER.\n         MVI   LL-59(R2),C'-'    INDICATE SYMBOL IS RELATED TO DSNAME.\nUINDOKAY MVC   LL-58(14,R2),=C'EXTENT ZZ9 OF '\n         SLR   R1,R1             CLEAR FOR INSERT.\n         ICM   R1,1,UDXTNTNO     LOAD RELATIVE EXTENT NUMBER.\n         BNZ   UMULTEXT          NOT FIRST EXTENT SO MULTI-EXTENT D/S.\n         CLI   UDXTNTCT,1        SINGLE-ENTENT DATA SET?\n         BNE   UMULTEXT          NO, SO SHOW EXTENT NUMBER.\n         MVC   LL-58(44,R2),UDXDSNAM  YES, JUST SHOW THE DATA SET NAME.\n         MVC   LL-14(14,R2),BLANKS    PREPARE FOR TIDY UP.\nUCYLTIDY CLI   0(R5),C'-'        IS THIS A DASHED LINE?\n         BNE   UCYLEXIT          NO, LEGEND LINE NOW COMPLETE.\n         LA    R1,LL-1(,R2)      YES, POINT TO LAST BYTE ON LINE.\nUCTIDYLP CLI   0(R1),C' '        IS IT BLANK?\n         BNE   UCYLEXIT          NO, LEGEND LINE NOW COMPLETE.\n         MVI   0(R1),C'-'        YES, SO PUT A DASH THERE.\n         BCTR  R1,0              BACK UP A BYTE.\n         B     UCTIDYLP          EXTEND DASHES BACKWARDS IF NECESSARY.\nUMULTEXT LA    R1,1(,R1)         CONVERT TO NATURAL EXTENT COUNT.\n         CVD   R1,WORK           SHOW IT.\n         MVC   LL-52(4,R2),ED3\n         ED    LL-52(4,R2),WORK+6\n         MVC   LL-44(44,R2),UDXDSNAM  SHOW THE DATA SET NAME.\nUCYLEDLP CLI   LL-51(R2),C' '    LEADING BLANK TO SUPPRESS?\n         BNE   UCYLTIDY          NO, NOW CHECK IF EXTRA DASHES NEEDED.\n         MVC   LL-51(50,R2),LL-50(R2)\n         MVI   LL-1(R2),C' '     YES, SQUEEZE IT OUT.\n         B     UCYLEDLP          NOW CHECK IT AGAIN.\n         SPACE\nUCYL2KEY LA    R9,LL(,R9)        POINT TO NEXT LEGEND LINE.\n         LA    R3,1(,R3)         INCREMENT INDICATION CHARACTER CODE.\n         CH    R3,UCMAXCHR       DONE SUPPORTED LARGE EXTENT COUNT?\n         BH    UCYLEXIT          YES, NO MORE LEGEND LINES.\n         LA    R4,4(,R4)         POINT TO NEXT LARGE EXTENT LIST ENTRY.\n         CR    R9,R2             ON LEGEND INDICATION LINE?\n         BH    UCYLEXIT          NO, NOT UP TO IT YET.\n         BE    USHOWLRG          YES, SHOW WHOSE RANGE WAS INDICATED.\n         B     UCYL2KEY          NO, SEE IF ON NEXT LEGEND LINE.\n         SPACE\nUSHOWALC LTR   R4,R4             ANY EXTENT ENTRY TO PLOT?\n         BNPR  R14               NO, SO RETURN.\n         LH    R9,CYLHZSHF       YES, GET CYLINDERS/COLUMN SHIFT SCALE.\n         ICM   R1,15,UDXLCCHH    GET EXTENT START ADDRESS.\n         BZR   R14               INVALID SO RETURN.\n         SRL   R1,16(R9)         GET X-AXIS LOCATION OF EXTENT START.\n         LA    R1,0(R1,R5)       POINT TO CORRESPONDING COLUMN.\n         MVC   0(1,R1),WORK2     INDICATE EXTENT BOUNDARY.\n         ST    R1,WORK+4         REMEMBER THIS ADDRESS.\n         ICM   R1,15,UDXHCCHH    GET EXTENT END ADDRESS.\n         BZR   R14               INVALID RETURN.\n         SRL   R1,16(R9)         GET X-AXIS LOCATION OF EXTENT START.\n         LA    R1,0(R1,R5)       POINT TO CORRESPONDING COLUMN.\n         S     R1,WORK+4         GET EXTRA COL COUNT THAT XTNT SPANS.\n         BNPR  R14               START AND END IN SAME SCREEN COLUMN.\n         BCTR  R1,0              DECREMENT FOR EXECUTE.\n         L     R9,WORK+4         POINT TO EXTENT START COLUMN.\n         EX    R1,UCYLSPAN       MARK ALL COLUMNS WITH LARGE EXTENT.\n         BR    R14               RETURN TO CALLER.\nUCYLSPAN MVC   1(0,R9),0(R9)                    <<< EXECUTED >>>\n         SPACE\n         DROP  R11,R8,R10,R15,R4 UNITSAMP, IMPXACOM, UNITCYLX, UDXENTRY\n         SPACE\nUCMAXCHR DC    AL2(X'39')        HIGHEST INDICATION CODE SUPPORTED.\n         LTORG\n         DS    0H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMPXAV": {"ttr": 22788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'48\\x002\\x00\\x94\\x16_\\x01\\x18\\x07\\x9f\\t\\x14\\rO\\x07\\xf8\\x06\\xe4\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "52.56", "flags": 0, "createdate": "1994-06-14T00:00:00", "modifydate": "2018-03-20T09:14:32", "lines": 3407, "newlines": 2040, "modlines": 1764, "user": "GPRICE"}, "text": "*        COPYRIGHT (C) 1986,1994,2006,2011  PRYCROFT SIX PTY LTD\n         TITLE 'VIRTUAL STORAGE MONITOR SUBROUTINE'\n         USING VIRTSTOR,R11,R10,R8\nVIRTSTOR DS    0H\n         LA    R10,2048(,R11)    SET UP SECOND\n         LA    R10,2048(,R10)                  BASE REGISTER.\n         LA    R8,2048(,R10)     SET UP THIRD\n         LA    R8,2048(,R8)                   BASE REGISTER.\n         ICM   R1,15,BRWSHOME    PERFORMED OPTION V INITIALIZATION?\n         BNZ   BASIDSOK          YES.\n         L     R1,PSAAOLD        NO, POINT TO THE CURRENT ASCB.\n         USING ASCB,R1\n         MVC   BRWSHOME,ASCBASID INITIALIZE THE PRIMARY ASID.\n         MVC   BRWSASID,ASCBASID INITIALIZE THE SECONDARY ASID.\n         DROP  R1                ASCB.\n         XC    VSBTRACE(256),VSBTRACE      ZERO THE TRACE TABLE.\n         LA    R0,VSBTRACE       POINT TO THE FIRST TRACE TABLE ENTRY.\n         ST    R0,VSBTRPTR       LOAD POINTER.\n         LA    R0,SECTCT         POINT TO THE SDWA SAVE AREA.\n         ST    R0,VSDWASAV       SAVE ITS ADDRESS.\n         LA    R1,LINES          POINT TO SCREEN DIMENSIONS.\n         CLI   OLDCOLS+3,80      USING A WIDE SCREEN?\n         BNH   *+8               NO.\n         LA    R1,OLDSIZE        POINT TO WIDE SCREEN DIMENSIONS.\n         LM    R0,R1,0(R1)       LOAD SCREEN DIMENSIONS.\n         STM   R0,R1,VBLINES     SAVE SCREEN DIMENSIONS.\nBASIDSOK MVC   INCHARS(L'INCHARS-1),INCHARS+1\n         MVI   INCHARS+L'INCHARS-1,C' '   ADJUST ANY COMMAND INPUT.\n         B     CMDSCANV          PROCESS IT.\n         SPACE\nVIRTOPTN XC    VWORDONE,VWORDONE CLEAR SYSTEM ABEND CODE.\n         CLI   VCANDBAR,C'B'     IN VIRTUAL STORAGE BROWSE MODE?\n         BE    VIRTBRWS          YES, BROWSE VIRTUAL STORAGE CONTENTS.\n         SPACE\nREDOVIRT L     R1,CRNTOPTN       POINT TO CURRENT OPTION ENTRY.\n         MVI   13(R1),LL         RESET LINE LENGTH.\n         L     R7,=A(VOPTSHOW)\n         CLI   VCANDBAR,C' '     ANY SUB-OPTION SELECTED?\n         BNHR  R7                NO, SHOW SUB-OPTION LIST.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         MVI   WINLNLEN+1,LL     RESET LINE LENGTH.\n         LA    R1,1\n         ST    R1,WINLINES       INITIALIZE LINE COUNTER.\n         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         DROP  R15               WNDWMNGR.\n         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.\n         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)\n         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)\n         MVI   ENDDEPTH+1,1      YES, MAKE PF3 SHOW LIST.\n         CLI   VCANDBAR,C'C'     IN COMMON SERVICE AREA DISPLAY MODE?\n         BE    CSAMON            YES, SHOW COMMON SERVICE AREA USAGE.\n         CLI   VCANDBAR,C'V'     IN VIRTUAL STORAGE STRUCTURE MODE?\n         BNE   COMNLIST          NO, PERFORM VSMLIST PROCESSING.\n         MVC   LL-79(79,R2),HEADINGV     LOAD DISPLAYABLE\n         TR    LL-79(79,R2),XLATETBL          HEADING.\n         LA    R2,LL(,R2)        POINT PAST HEADING.\n         SLR   R3,R3\n         ST    R3,VWORDCNT       RESET DISPLAYED-AREAS COUNTER.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTSMEXT       POINT TO CVT STORAGE MAP EXTENSION.\n         DROP  R3                CVT.\n         LA    R4,PARTITNS       POINT TO STORAGE PARTITION NAME TABLE.\n         LA    R5,10             REPORT UP TO TEN STORAGE AREAS.\nCALLPUTP BAS   R9,PUTPRTN1       CALL DETAIL LINE SUBROUTINE.\n         LA    R3,8(,R3)         POINT TO THE NEXT AREA'S ADDRESSES.\n         BCT   R5,CALLPUTP       PROCESS THE NEXT AREA'S DETAILS.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R6,CVTGDA         POINT TO THE GLOBAL DATA AREA.\n         DROP  R3                CVT.\n         USING GDA,R6\n         LA    R3,GDACSA         POINT TO CSA ADDRESS VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         LA    R3,GDAECSA        POINT TO ECSA ADDRESS VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         LA    R3,GDASQA         POINT TO SQA ADDRESS VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         LA    R3,GDAESQA        POINT TO ESQA ADDRESS VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         L     R7,PSAAOLD        POINT TO THE CURRENT ASCB.\n         USING ASCB,R7\n         L     R7,ASCBLDA        POINT TO THE VSM LOCAL DATA AREA.\n         DROP  R7                ASCB.\n         USING LDA,R7\n         LA    R3,LDASTRTA       POINT TO ADDRESS SPACE REGION VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         LA    R3,LDAESTRA       POINT TO EXTENDED REGION VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         LA    R3,LDASTRTS       POINT TO SYSTEM REGION VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         LA    R3,LDAESTRS       POINT TO EXTNDED SYSTEM REGION VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         L     R3,LDASTRTS       GET SIZE OF PSA.\n         XC    WORK,WORK\n         ST    R3,WORK+4\n         LA    R3,WORK           POINT TO PREFIXED SAVE AREA VALUES.\n         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.\n         DROP  R7                LDA.\nVIRTSORT MVI   VWORDONE,0        CLEAR A BYTE.\n         L     R9,VWORDCNT       GET NUMBER OF VS AREAS REPORTED.\n         BCTR  R9,0              TROUBLE IF ONLY ONE (IMPOSSIBLE).\n         L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R1\n         L     R1,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         DROP  R1                WNDWMNGR.\n         LA    R1,LL(,R1)        POINT TO FIRST DETAIL LINE.\nVIRTCMPR CLC   LL-4(4,R1),LL+LL-4(R1)  IN DESCENDING ADDRESS ORDER?\n         BH    VIRTLESS          YES, DON'T SWAP THESE TWO LINES.\n         XC    LL(LL,R1),0(R1)   NO, SWAP THESE TWO LINES.\n         XC    0(LL,R1),LL(R1)\n         XC    LL(LL,R1),0(R1)\n         MVI   VWORDONE,1        INDICATE A SWAP TOOK PLACE.\nVIRTLESS LA    R1,LL(,R1)        POINT TO NEXT DETAIL LINE.\n         BCT   R9,VIRTCMPR       COMPARE NEXT PAIR OF DETAIL LINES.\n         CLI   VWORDONE,0        ANY BUBBLING IN THIS SORT PASS?\n         BNE   VIRTSORT          YES, MAY NOT BE FINISHED YET.\n         L     R9,VWORDCNT       GET NUMBER OF VS AREAS REPORTED.\n         L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R1\n         L     R1,WINBUFF        GET WINDOW BUFFER START ADDRESS.\n         DROP  R1                WNDWMNGR.\n         LA    R1,LL(,R1)        POINT TO FIRST DETAIL LINE.\nVIRTBLNK MVC   LL-4(4,R1),BLANKS ERASE SORT FIELDS PRIOR TO DISPLAY.\n         LA    R1,LL(,R1)        POINT TO NEXT DETAIL LINE.\n         BCT   R9,VIRTBLNK       CLEAN UP NEXT DETAIL LINE.\n         MVC   0(LL-80,R2),MEDX  MEDIUM INTENSITY AND\n         MVI   LL-80(R2),X'F5'   TURQUOISE FOR SQA DETAILS.\n         MVI   LL-79(R2),C' '    CLEAR DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   18(21,R2),=CL21'SQA OVERFLOW INTO CSA'\n         L     R1,GDACSACV       GET AMOUNT OF SQA OVERFLOW INTO CSA.\n         LA    R1,1023(,R1)      ROUND TO NEXT HIGHEST KILOBYTE.\n         SRL   R1,10\n         CVD   R1,WORK\n         MVC   WORK2,ED7\n         ED    WORK2,WORK+4\n         MVC   9(7,R2),WORK2+1   DISPLAY KILOBYTES OF CSA\n         MVI   16(R2),C'K'               CONVERTED INTO SQA.\n         MVC   52(33,R2),=CL33'UNALLOCATED COMMON <16M (CSA+SQA)'\n         L     R1,GDACSARE       GET AMOUNT OF UNALLOCATED COMMON.\n         LA    R1,1023(,R1)      ROUND TO NEXT HIGHEST KILOBYTE.\n         SRL   R1,10\n         CVD   R1,WORK\n         MVC   42(8,R2),ED7      HOPE THERE IS SOME, OR BIG TROUBLE!\n         ED    42(8,R2),WORK+4   DISPLAY KILOBYTES OF UNALLOCATED\n         MVI   50(R2),C'K'               CSA AND SQA.\n         BAS   R14,VADDLINE      LINE NOW COMPLETE.\n         MVC   0(LL-80,R2),MEDX  MEDIUM INTENSITY AND\n         MVI   LL-80(R2),X'F1'   BLUE FOR CSA DETAILS.\n         MVI   LL-79(R2),C' '    CLEAR DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         SLR   R1,R1             ZERO CSA FBQE SPACE COUNTER.\n         L     R3,GDAFBQCF       POINT TO FIRST CSA FBQE.\n         USING FBQE,R3\n         C     R3,FBQENEXT       IS THE CHAIN EMPTY?\n         BE    CSACROOK          YES, NO FREE CSA PAGES LEFT.\nCSAFBQES AL    R1,FBQESIZE       ADD FREE SPACE OF CSA.\n         C     R3,GDAFBQCL       FINISHED WITH LAST CSA FBQE?\n         BE    CSACROOK          YES, TALLY UP THE RESULTS.\n         L     R3,FBQENEXT       POINT TO NEXT FBQE ON CHAIN.\n         B     CSAFBQES          PROCESS IT.\nCSACROOK SRL   R1,10             GET 4 TIMES NUMBER OF FREE CSA PAGES.\n         CVD   R1,WORK\n         MVC   10(7,R2),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    10(6,R2),WORK+5\n         MVC   18(19,R2),=CL19'OF CSA PAGES UNUSED'\n         SLR   R1,R1             ZERO ECSA FBQE SPACE COUNTER.\n         L     R3,GDAEFBCF       POINT TO FIRST ECSA FBQE.\n         C     R3,FBQENEXT       IS THE CHAIN EMPTY?\n         BE    CSECROOK          YES, NO FREE ECSA PAGES LEFT.\nECSAFBQE AL    R1,FBQESIZE       ADD FREE SPACE OF ECSA.\n         C     R3,GDAEFBCL       FINISHED WITH LAST ECSA FBQE?\n         BE    CSECROOK          YES, TALLY UP THE RESULTS.\n         L     R3,FBQENEXT       POINT TO NEXT FBQE ON CHAIN.\n         B     ECSAFBQE          PROCESS IT.\n         DROP  R3                FBQE.\nCSECROOK SRL   R1,10             GET 4 TIMES NUMBER OF FREE ECSA PAGES.\n         CVD   R1,WORK\n         MVC   42(9,R2),ED7      LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    42(8,R2),WORK+4\n         MVC   50(30,R2),=CL30'K OF EXTENDED CSA PAGES UNUSED'\n         BAS   R14,VADDLINE      LINE NOW COMPLETE.\n         B     TIDYVIRT          FINISH UP WITH SYSTEM SUMMARY ETC.\n         DROP  R6                GDA.\n         SPACE\nCOMNLIST MVC   LL-79(79,R2),HEADGDTL     LOAD DISPLAYABLE\n         TR    LL-79(79,R2),XLATETBL          HEADING.\n         LA    R2,LL(,R2)        POINT PAST HEADING.\n         ICM   R1,15,VSREG1      VSMLIST WORK AREA GETMAINED?\n         BNZ   VSMWKOK           YES.\n         L     R0,VSREG0         GET VSMLIST WORKAREA SIZE.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=ANY\n         ST    R1,VSREG1         SAVE VSAMLIST WORKAREA ADDRESS.\n         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.\nVSMWKOK  LM    R0,R1,VSREGS      LOAD VSMLIST WORK AREA PARTICULARS.\n         SLR   R3,R3\n         ST    R3,0(,R1)         ZERO THE FIRST WORD OF THE WORK AREA.\n         CLI   VCANDBAR,C'D'     CSA DETAILS REQUESTED?\n         BE    CSALIST           YES.\n         CLI   VCANDBAR,C'S'     SQA DETAILS REQUESTED?\n         BE    SQALIST           YES.\n         CLI   VCANDBAR,C'P'     PVT DETAILS REQUESTED?\n         BE    PVTLIST           YES.\n         VSMLIST SP=LSQA,WKAREA=((1),(0)),SPACE=ALLOC,LOC=31,REAL64,   +\n               LINKAGE=SYSTEM    LOAD SUBPOOL DETAILS INTO WORK AREA.\n         B     VSMLISTD\nPVTLIST  DS    0H\n         L     R5,PSAAOLD        POINT TO THE CURRENT ASCB.\n         USING ASCB,R5\n         L     R5,ASCBASXB       POINT TO THE CURRENT ASXB.\n         DROP  R5                ASCB.\n         USING ASXB,R5\n         L     R5,ASXBFTCB       POINT TO THE CURRENT RCT TCB.\n         DROP  R5                ASXB.\n         VSMLIST SP=PVT,WKAREA=((1),(0)),TCB=((5),ALL),SPACE=ALLOC,    +\n               LOC=ANY,REAL64,LINKAGE=SYSTEM\n         B     VSMLISTD\nSQALIST  DS    0H\n         VSMLIST SP=SQA,WKAREA=((1),(0)),SPACE=ALLOC,LOC=31,REAL64,    +\n               LINKAGE=SYSTEM    LOAD SUBPOOL DETAILS INTO WORK AREA.\n         B     VSMLISTD\nCSALIST  DS    0H\n         VSMLIST SP=CSA,WKAREA=((1),(0)),SPACE=ALLOC,LOC=31,REAL64,    +\n               LINKAGE=SYSTEM    LOAD SUBPOOL DETAILS INTO WORK AREA.\nVSMLISTD L     R1,VSREG1         POINT TO THE WORK AREA.\n         L     R3,4(,R1)         GET ADDRESS OF RETURNED DATA AREA.\n         LA    R7,1              PRETEND THIS ALL BELONGS TO ONE TASK.\n         CLI   VCANDBAR,C'P'     PRIVATE AREA DETAILS?\n         BNE   NOPVTTCB          NO.\n         L     R7,0(,R3)         YES, GET REAL NUMBER OF TASKS.\n         LA    R3,4(,R3)         POINT TO TCB ADDRESS.\nVPVTTASK LA    R3,4(,R3)         POINT TO TASK SUBPOOL COUNT.\nNOPVTTCB L     R4,0(,R3)         GET THE NUMBER OF SUBPOOLS DESCRIBED.\n         LA    R3,4(,R3)         POINT TO FIRST SUBPOOL DESCRIPTOR.\n         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\nVSUBPOOL SLR   R15,R15\n         IC    R15,2(,R3)        LOAD SUBPOOL ID.\n         CVD   R15,WORK\n         MVC   LL-77(4,R2),ED3\n         ED    LL-77(4,R2),WORK+6     DISPLAY SUBPOOL ID.\n         IC    R15,3(,R3)        LOAD STORAGE PROTECT KEY.\n         SRL   R15,4             SHIFT TO LOW-ORDER FOUR BITS.\n         IC    R15,HEX(R15)      GET STORAGE KEY CHARACTER.\n         STC   R15,LL-69(,R2)    DISPLAY STORAGE KEY CHARACTER.\n         CLI   VCANDBAR,C'P'     PVT VSMLIST?\n         BNE   VSKIPTCB          NO, FORGET ABOUT OWNING TCB.\n         MVC   LL-19(3,R2),=C'TCB'\n         UNPK  LL-15(7,R2),5(4,3)\n         TR    LL-15(6,R2),HEX-C'0'\n         MVI   LL-9(R2),C' '     DISPLAY OWNING TCB ADDRESS.\nVSKIPTCB AH    R3,0(,R3)         POINT PAST SUBPOOL DESCRIPTOR.\n         L     R6,0(,R3)         GET THE NUMBER OF BLOCKS ALLOCATED.\n         LA    R3,4(,R3)         POINT PAST BLOCK COUNT.\nVALOCBLK L     R15,0(,R3)        GET ALLOCATED BLOCK ADDRESS.\n         LA    R15,0(,R15)       ENSURE A ZERO SIGN BIT.\n         ST    R15,WORK\n         NI    WORK+3,X'FE'      ENSURE ADDRESS IS EVEN.\n         MVI   LL-65(R2),X'24'\n         UNPK  LL-64(9,R2),WORK(5)   DISPLAY BLOCK ADDRESS.\n         TR    LL-64(8,R2),HEX-C'0'\n         MVI   LL-56(R2),X'25'\n         L     R15,4(,R3)        GET ALLOCATED BLOCK LENGTH.\n         LA    R15,1023(,R15)\n         SRL   R15,10            ROUND UP TO KILOBYTE BOUNDARY.\n         CVD   R15,WORK\n         MVC   LL-54(7,R2),ED5   LOAD EDIT MASK AND KILOBYTES FLAG.\n         ED    LL-54(6,R2),WORK+5\n         MVI   LL-44(R2),C'('\n         UNPK  LL-43(9,R2),4(5,R3)    ALSO SHOW BYTE COUNT IN HEX.\n         TR    LL-43(8,R2),HEX-C'0'\n         MVI   LL-35(R2),C')'\n         TM    0(R3),X'80'       NEED TO BACK BELOW THE LINE?\n         BZ    GOTR31BK          YES.\n         MVC   LL-29(4,R2),=C'R=31'\nGOTR31BK TM    3(R3),X'01'       NEED TO BACK BELOW THE BAR?\n         BZ    GOTRBACK          YES.\n         MVC   LL-29(4,R2),=C'R=64'\nGOTRBACK LA    R3,8(,R3)         POINT PAST ALLOCATED BLOCK DESCRIPTOR.\n         BAS   R14,VVSMLINE      LINE NOW COMPLETE.\nVSMRESUM MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         BCT   R6,VALOCBLK       PROCESS NEXT ALLOCATED BLOCK.\n         BCT   R4,VSUBPOOL       PROCESS NEXT SUBPOOL.\n         BCT   R7,VPVTTASK       PROCESS NEXT TASK.\n         B     TIDYVIRT          FINISH UP WITH SYSTEM SUMMARY &C.\nVSMRETRN LTR   R6,R6             END OF ALLCOATED BLOCKS REACHED?\n         BNZ   VSMRESUM          NO, RESUME FROM INTERRUPTION.\n         LTR   R4,R4             END OF SUBPOOLS REACHED?\n         BNZ   VSMRESUM          NO, RESUME FROM INTERRUPTION.\n         LTR   R7,R7             END OF TASKS REACHED?\n         BNZ   VSMRESUM          NO, RESUME FROM INTERRUPTION.\n         B     VSMWKOK           YES, RESTART DISPLAY.\n         SPACE\nCSAMON   MVC   LL-79(79,R2),HEADGCSA     LOAD DISPLAYABLE HEADING.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BO    CSAHDGOK          YES.\n         MVC   LL-44(7,R2),HEADGCSA+46\n         MVC   LL-36(36,R2),LL-37(R2)\n         MVC   LL-31(5,R2),=C'TOTAL'\nCSAHDGOK TR    LL-79(79,R2),XLATETBL\n         LA    R2,LL(,R2)        POINT PAST HEADING.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTGDA         POINT TO THE GLOBAL DATA AREA.\n         DROP  R3                CVT.\n         USING GDA,R3\n         L     R3,GDASPT         POINT TO THE CSA SUBPOOL TABLE.\n         DROP  R3                GDA.\n         USING SPT,R3\n         LA    R3,SPTNTRY        POINT TO FIRST SUBPOOL ENTRY.\n         DROP  R3                SPT.\n         LA    R4,CSASPIDS       POINT TO CSA SUBPOOL IDS LIST.\n         XC    VLOWRLOW(24),VLOWRLOW  RESET CSA/ECSA ACCUMULATORS.\nNEXTSPID SLR   R5,R5             RESET KEY INDICATOR.\n         LA    R6,16             16 DIFFERENT STORAGE PROTECT KEYS.\nNEXTKEY  MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-79(3,R2),0(R4) LOAD SUBPOOL ID.\n         LA    R1,HEX(R5)        GET STORAGE KEY CHARACTER.\n         MVC   LL-72(1,R2),0(R1) DISPLAY STORAGE KEY CHARACTER.\n         LA    R1,LL-68(,R2)     ADJUST BUFFER POINTER.\n         LA    R0,3              THREE ENTRIES PER KEY PER SUBPOOL.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   *+8               NO.\n         LA    R0,5              FIVE ENTRIES PER KEY PER SUBPOOL.\n         LA    R7,VLOWRLOW       POINT TO FIRST COLUMN ACCUMULATOR.\n         SLR   R15,R15           ZERO SUBPOOL/KEY ACCUMULATOR.\nNXTENTYP LR    R14,R3            POINT TO FIRST DQE POINTER.\n         SLR   R9,R9             ZERO STORAGE AMOUNT ACCUMULATOR.\n         USING DQE,R14\nNEXTDQE  L     R14,DQENEXT       POINT TO DQE.\n         CR    R14,R3            END OF CHAIN?\n         BE    DONSPKEY          YES, DONE THIS KEY FOR THIS SUBPOOL.\n         A     R9,DQESIZE        NO, ACCUMULATE STORAGE SIZE.\n         B     NEXTDQE           LOOK AT THE NEXT DQE.\n         DROP  R14               DQE.\nDONSPKEY SRL   R9,10             CONVERT BYTES TO KILOBYTES.\n         CVD   R9,WORK\n         AR    R15,R9            ACUMMULATE LINE TOTAL.\n         A     R9,0(,R7)\n         ST    R9,0(,R7)         ACCUMULATE COLUMN TOTAL.\n         MVC   0(8,R1),ED7       LOAD EDIT MASK.\n         MVI   8(R1),C'K'        LOAD KILOBYTES FLAG.\n         ED    0(8,R1),WORK+4\n         LA    R1,11(,R1)        ADJUST BUFFER POINTER.\n         LA    R3,8(,R3)         ADJUST SUBPOOL TABLE ENTRY POINTER.\n         LA    R7,4(,R7)         POINT TO NEXT COLUMN ACCUMULATOR.\n         BCT   R0,NXTENTYP       PROCESS NEXT ENTRY TYPE.\n         CVD   R15,WORK          DISPLAY TOTAL FOR LINE.\n         MVC   0(8,R1),ED7       LOAD EDIT MASK.\n         MVI   8(R1),C'K'        LOAD KILOBYTES FLAG.\n         ED    0(8,R1),WORK+4\n         LTR   R15,R15           ANY NON-ZERO DATA IN THIS LINE?\n         BZ    CSALINOK          NO, DO NOT KEEP THIS DETAIL LINE.\n         ST    R15,WORK          YES, SAVE LINE TOTAL.\n         BAS   R14,VADDLINE      LINE NOW COMPLETE.\n         L     R15,WORK          RESTORE LINE TOTAL.\nCSALINOK A     R15,0(,R7)\n         ST    R15,0(,R7)        ACCUMULATE COLUMN TOTAL.\n         LA    R5,1(,R5)         INCREMENT STORAGE PROTECT KEY.\n         BCT   R6,NEXTKEY        PROCESS NEXT STORAGE PROTECT KEY.\n         LA    R4,3(,R4)         POINT TO NEXT SUBPOOL ID.\n         LA    R1,SPIDSEND       POINT TO END OF SUBPOOL IDS.\n         CR    R4,R1             DONE LAST CSA SUBPOOL?\n         BL    NEXTSPID          NO, PROCESS THIS SUBPOOL.\nPUTOTALS MVC   0(LL-79,R2),HIGHX SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-76(5,R2),=C'TOTAL'   LOAD LINE TITLE.\n         LA    R1,LL-68(,R2)     ADJUST BUFFER POINTER.\n         LA    R0,4              FOUR TOTALS TO REPORT.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   *+8               NO.\n         LA    R0,6              YES, FOUR TOTALS TO REPORT.\n         LA    R7,VLOWRLOW       POINT TO FIRST COLUMN ACCUMULATOR.\nCSATOTES L     R9,0(,R7)         GET TOTAL.\n         CVD   R9,WORK\n         MVC   0(8,R1),ED7       LOAD EDIT MASK.\n         MVI   8(R1),C'K'        LOAD KILOBYTES FLAG.\n         ED    0(8,R1),WORK+4\n         LA    R1,11(,R1)        ADJUST BUFFER POINTER.\n         LA    R7,4(,R7)         POINT TO NEXT TOTAL ACCUMULATOR.\n         BCT   R0,CSATOTES\n         ST    R0,VALLRALL       FLAG THAT ACCUMULATORS SHOWN.\n         BAS   R14,VADDLINE      LINE NOW COMPLETE.\n         B     TIDYVIRT          FINISH UP WITH SYSTEM SUMMARY ETC.\n         SPACE\nBFNDATTN NI    MODESW2,255-ATTN  RESET ATTENTION FLAG.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    FAESTAE0          NO, DISABLE ESTAE NOW.\n         CLC   BRWSHOME,BRWSASID IN CROSS-MEMORY MODE?\n         BE    FARESTMC          NO, DISABLE ESTAE NOW.\n         SAC   X'000'            YES, REVERT TO PRIMARY SPACE MODE.\n         LAM   A0,A15,SECWORKA+64  RESTORE ACCESS REGISTER VALUES.\n**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n**       MVC   WORK+2(2),BRWSHOME  GET SECONDARY ASID.\n**       MVC   WORK+6(2),BRWSHOME  GET PRIMARY ASID.\n**       LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.\n         LH    R1,BRWSHOME       GET PRIMARY ASID.\n         SSAR  R1                CANCEL SECONDARY ASID TRANSLATION.\n         L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\nFARESTMC STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.\n         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\nFAESTAE0 ESTAE 0                 DISABLE TASK ABNORMAL EXIT.\n         STFSMODE ON,NOEDIT=YES  RESTORE VTAM FULL SCREEN MODE.\nVBASBRWS NI    VBDSTOKN,X'7F'    INVALIDATE DATASPACE SPACE TOKEN.\nVIRTBRWS MVI   ENDDEPTH+1,1      MAKE PF3 SHOW SUB-OPTION LIST.\n         UNPK  HEADBRWS+41(9),BRWSPNTR(5)\n         TR    HEADBRWS+41(8),HEX-C'0'\n         MVI   HEADBRWS+49,C' '  SHOW CURRENT POINTER ADDRESS.\n         UNPK  HEADBRWS+58(5),BRWSASID(3)\n         TR    HEADBRWS+58(4),HEX-C'0'\n         MVI   HEADBRWS+62,C' '  SHOW SOURCE ADDRESS SPACE IDENTIFIER.\n         L     R1,CRNTOPTN       POINT TO CURRENT OPTION ENTRY.\n         LA    R4,WINLINOH       GET LINE OVERHEAD.\n         A     R4,VBCOLS         GET LINE LENGTH.\n         STH   R4,12(,R1)        SET LINE LENGTH.\n         L     R1,INITADDR       GET ADDRESSABILITY TO SCRNHDR.\n         USING INITIAL,R1        RESTORE EXPECTED HEADING FORMAT.\n         MVC   HOME(HDRLEN),SCRNHDR\n         DROP  R1                INITIAL.\n         MVC   HEADING,HEADBRWS  LOAD VIRTUAL STORAGE BROWSE HEADING.\n         L     R4,BRWSPNTR       GET BROWSE ADDRESS.\n         L     R1,VSBTRPTR       POINT TO CURRENT TRACE TABLE ENTRY.\n         C     R4,0(,R1)         SAME ADDRESS?\n         BE    TRADOKAY          YES, TRACE ADDRESS IS UP-TO-DATE.\n         LA    R1,4(,R1)         NO, POINT TO NEXT TRACE TABLE ENTRY.\n         LA    R0,VSBTREND       POINT TO END OF TRACE TABLE.\n         CR    R1,R0             REACHED THE END?\n         BL    TRENTYOK          NO, NOW POINTING TO NEW CURRENT ENTRY.\n         LA    R1,VSBTRACE       YES, WRAP AROUND TO THE START.\nTRENTYOK ST    R4,0(,R1)         STORE BROWSE ADDRESS IN TRACE TABLE.\n         ST    R1,VSBTRPTR       UPDATE TRACE TABLE POINTER.\nTRADOKAY SRL   R4,7              TRUNCATE BROWSE ADDRESS TO GET\n         SLL   R4,7                       DISPLAY ORIGIN.\n         LA    R3,BUFFER\n         AHI   R3,VBUFFER-BUFFER GET A HOLDING AREA.\n         ST    R3,VWORDTWO       SAVE ITS ADDRESS.\n         MVI   WORK2,0           FLAG NO DATA COPIED YET.\n         MVI   VALLRALL,X'FF'    INVALIDATE REAL ADDRESS.\n         XC    VWORDONE,VWORDONE CLEAR SYSTEM ABEND CODE.\n         L     R2,BRWSDSAD       GET DATASPACE ROUTINE ENTRY POINT.\n         TM    VBDSTOKN,X'80'    DATASPACE SPACE TOKEN PRESENT?\n         BOR   R2                YES, PERFORM DATASPACE PROCESSING.\n         MVI   VKEYPROT,7        INVALIDATE VIRTUAL STORAGE KEY.\n         LA    R14,X'80'         USE KEY 8 IF NOT APF AUTHORIZED.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'B'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         OC    OPTNATR,C'V'-C' '(R15)  GATE CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BO    DODOVSB0          YES, DO DO A MODESET.\n         CLC   BRWSHOME,BRWSASID TRYING TO GO CROSS-MEMORY?\n         BE    SKIPVSB0          NO, PROCEED BUT DON'T DO A MODESET.\n         B     BROWASID          YES, SUPPRESS IT.\nDODOVSB0 DS    0H\n         MODESET MF=(E,MDSTSUP0) SUPERVISOR STATE TO BYPASS AX CHECKING\n         SLR   R14,R14           KEY ZERO FOR EXTRA FETCH CAPABILITY.\nSKIPVSB0 DS    0H\n         ESTAE MF=(E,ESTAEONV)   TRAP ABENDS WHILE FETCHING DATA.\n         CLC   BRWSHOME,BRWSASID\n         BE    HOMEASID          LASP NOT REQUIRED FOR HOME ASID.\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\n         SLR   R14,R14           KEY ZERO FOR EXTRA FETCH CAPABILITY.\n         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.\n         LA    R1,1              ADDRESS ALL AX NUMBER.\n         AXSET AX=(1)            SET AX = 1.\n         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.\n**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n**       MVC   WORK+2(2),BRWSASID  GET SECONDARY ASID.\n**       MVC   WORK+6(2),BRWSHOME  GET PRIMARY ASID.\n**       LASP  WORK,1            ACTIVATE SECONDARY ASID TRANSLATION.\n**       BZ    SKIPLASP          LASP WAS SUCCESSFUL.\n**       STH   R14,BRWSASID      SASID ENDED OR SWAPPED OUT SO ZERO IT.\n**       B     LASPBACK          PERFORM STATUS RESET AND OKSWAP.\n         LH    R1,BRWSASID       GET SECONDARY ASID.\n         ICMH  R1,15,BRWSISQN    GET SECONDARY ASID INSTANCE NUMBER.\n         BZ    VDOSSAR1\n         SSAIR R1                ACTIVATE SECONDARY ASID TRANSLATION.\n         B     SKIPLASP\nVDOSSAR1 SSAR  R1                ACTIVATE SECONDARY ASID TRANSLATION.\nSKIPLASP DS    0H\n         TM    OSLEVEL,CVTESA    MVS/ESA?\n         BO    VBAXESS1          YES, USE ACCESS REGISTER MODE.\n         LA    R5,128            FETCH 128 BYTES OF DATA PER MOVE.\n         MVCP  0(R5,R3),0(R4),R14 GET CONSISTENT SNAPSHOT OF 128 BYTES.\n         MVI   WORK2,8           FLAG 128 BYTES COPIED (8 DATA LINES).\n         MVCP  128(R5,R3),128(R4),R14    GET ANOTHER 128 BYTES.\n         MVI   WORK2,16          FLAG 256 BYTES COPIED (16 DATA LINES).\n         CLI   COLUMNS+3,80      80-COLUMN SCREEN?\n         BNE   RETRYVSB          NO.\n         CLI   VBLINES+3,32      AT LEAST 32 SCREEN LINES?\n         BL    RETRYVSB          NO.\n         MVCP  256(R5,R3),256(R4),R14    GET ANOTHER 128 BYTES.\n         MVI   WORK2,24          FLAG 256 BYTES COPIED (24 DATA LINES).\n         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?\n         BL    RETRYVSB          NO.\n         MVCP  384(R5,R3),384(R4),R14    GET ANOTHER 128 BYTES.\n         MVI   WORK2,32          FLAG 256 BYTES COPIED (32 DATA LINES).\nRETRYVSB DS    0H\n         CLI   WORK2,X'FA'       WAS FIND ACTIVE AT TIME OF ABEND?\n         BE    BFNDABND          YES, CHECK FOR TRANSLATION EXCEPTION.\nVSBRSPND LTR   R14,R14           RUNNING AUTHORIZED?\n         BNZ   UNLASPED          NO, DON'T DO A LASP.\n         CLC   BRWSHOME,BRWSASID\n         BE    UNLASPED          LASP NOT REQUIRED FOR HOME ASID.\n         TM    OSLEVEL,CVTESA    MVS/ESA?\n         BNO   LASPBACK          NO, PROCEED WITH \"UNLASP\".\nESASACBK SAC   X'000'            REVERT TO PRIMARY SPACE MODE.\n         LAM   A0,A15,SECWORKA+64 RESTORE ACCESS REGISTER VALUES.\nLASPBACK EQU   *\n**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n**       MVC   WORK+2(2),BRWSHOME GET SECONDARY ASID.\n**       MVC   WORK+6(2),BRWSHOME GET PRIMARY ASID.\n**       LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.\n         LH    R1,BRWSHOME       GET NEW SECONDARY ASID.\n         SSAR  R1                TERMINATE SECONDARY ASID TRANSLATION.\n         L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\n         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.\n         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\n         B     UNLASPED          CROSS-MEMORY FETCH NOW COMPLETE.\nVBAXESS1 XC    SECWORKA(64),SECWORKA   CLEAR SOME STORAGE.\n         STAM  A0,A15,SECWORKA+64 SAVE CURRENT ACCESS REGISTER VALUE.\n         MVI   SECWORKA+19,1     ONLY AR4 WILL USE SECONDARY.\n         LAM   A0,A15,SECWORKA   LOAD NEW ACCESS REGISTER VALUES.\n         SAC   X'200'            GET INTO ACCESS REGISTER MODE.\nHOMEASID MVC   0(128,R3),0(R4)   GET CONSISTENT SNAPSHOT OF 128 BYTES.\n         LTR   R14,R14           RUNNING AUTHORIZED?\n         BNZ   VLRADONE          NO, CAN'T DO A LRA.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT,\n         L     R1,CVTECVT-CVT(,R1)     TO THE ECVT.\n         USING ECVT,R1\n         CLC   =XL8'0000000080000000',ECVTEORM\n         BL    VLRADONE          MORE THAN 2GB REAL SO SKIP LRA.\n         DROP  R1                ECVT.\n         LRA   R0,0(,R4)         GET REAL ADDRESS OF VIRTUAL STORAGE.\n         BNZ   VLRADONE          REAL ADDRESS COULD NOT BE RESOLVED.\n         ST    R0,VALLRALL       SAVE THE REAL ADDRESS FOR LATER.\nVLRADONE MVI   WORK2,8           FLAG 128 BYTES COPIED (8 DATA LINES).\n         LTR   R14,R14           RUNNING AUTHORIZED?\n         BNZ   SKIPIVSK          NO, PROBABLY CAN'T DO AN IVSK.\n         IVSK  R1,R4             GET KEY AND FETCH PROTECTION BITS.\n         STC   R1,VKEYPROT       SAVE THEM.\nSKIPIVSK MVC   128(128,R3),128(R4)    GET ANOTHER 128 BYTES.\n         MVI   WORK2,16          FLAG 256 BYTES COPIED (16 DATA LINES).\n         CLI   COLUMNS+3,80      80-COLUMN SCREEN?\n         BNE   VBASIDCK          NO.\n         CLI   VBLINES+3,32      AT LEAST 32 SCREEN LINES?\n         BL    VBASIDCK          NO.\n         MVC   256(128,R3),256(R4)    GET ANOTHER 128 BYTES.\n         MVI   WORK2,24          FLAG 256 BYTES COPIED (24 DATA LINES).\n         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?\n         BL    VBASIDCK          NO.\n         MVC   384(128,R3),384(R4)    GET ANOTHER 128 BYTES.\n         MVI   WORK2,32          FLAG 256 BYTES COPIED (32 DATA LINES).\nVBASIDCK CLC   BRWSHOME,BRWSASID\n         BNE   ESASACBK          UNDO ESA CROSS MEMORY.\nUNLASPED DS    0H\n         ESTAE 0                 DISABLE TASK ABNORMAL EXIT.\n         LTR   R14,R14           RUNNING AUTHORIZED?\n         BNZ   SKIPVSB8          NO, CAN'T DO A MODESET.\n         MODESET MF=(E,MDSTPROB) BACK TO TASK'S KEY AND PROBLEM STATE.\nSKIPVSB8 SLR   R0,R0\n         LA    R2,BUFFER         RESET BUFFER POINTER.\n         LR    R14,R2            POINT TO BUFFER.\n         LHI   R15,124*LL        GET ITS LENGTH.\n         LA    R1,C' '\n         SLL   R1,24             SET PAD TO BLANK AND ZERO LENGTH.\n         MVCL  R14,R0            BLANK DETAIL LINE BUFFER.\n         A     R2,VBCOLS         ADD SCREEN WIDTH.\n         AHI   R2,-80            POINT TO FIRST DETAIL LINE.\n         CLI   VKEYPROT,7        ANY VIRTUAL STORAGE KEY LOADED?\n         BE    NOSTGKEY          NO, CAN'T SHOW IT IN THE HEADING.\n         IC    R0,VKEYPROT       YES, GET IT.\n         SRL   R0,4\n         STC   R0,HEADING+7      SHOW IT IN THE HEADING.\n         TR    HEADING+7(1),HEX  MAKE DISPLAYABLE.\n         MVC   HEADING+3(3),=C'KEY'\n         TM    VKEYPROT,X'08'    FETCH PROTECTED STORAGE?\n         BZ    NOSTGKEY          NO.\n         MVC   HEADING+63(8),=C'(F-PROT)'\nNOSTGKEY ICM   R0,1,WORK2        GET THE NUMBER OF LINES TO FORMAT.\n         BNZ   BRWSLOOP          GOT SOME SO GET TO IT.\nBRWSABND L     R15,=A(VBPNKMSG)  LOAD PINK ERROR MESSAGE ROUTINE EP.\n         BR    R15               INVOKE IT.\nBFNDABND CLC   S0C4,VWORDONE+1   S0C4 ABEND?\n         BNE   VSBRSPND          NO, DISPLAY DATA AT ABEND ADDRESS.\n         LA    R1,12             12 BITS FOR OFFSET WITHIN PAGE.\n         CLI   VWORDCNT+1,X'10'  SEGMENT TRANSLATION EXCEPTION?\n         BNE   BFSKIPPG          NO, JUST JUMP OVER A SINGLE PAGE.\n         LA    R1,20             20 BITS FOR OFFSET WITHIN SEGMENT.\nBFSKIPPG L     R4,BRWSPNTR       NO, GET ABEND ADDRESS.\n         LA    R4,30(,R4)        ENSURE INTO PROBLEM PAGE.\n         SRL   R4,0(R1)          GET VIRTUAL PAGE OR SEGMENT NUMBER.\n         LA    R4,1(,R4)         JUMP OVER ABSENT/UNREADABLE AREA.\n         SLL   R4,0(R1)          TRANSFORM INTO VIRTUAL ADDRESS.\n         BCTR  R4,0              POINT TO BEFORE SEARCH START ADDRESS.\n         CLC   BRWSASID,BRWSHOME CROSS-MEMORY ACCESS?\n         BE    BFNDLOOP          NO, RESUME FIND SEARCH.\n         LA    R1,1\n         SAR   A4,R1             ENSURE SECONDARY A.S. ADDRESSABILITY.\n         B     BFNDLOOP          RESUME FIND SEARCH.\nBRWSLOOP MVC   0(LL-79,R2),LOWX\n         CHI   R0,1              FORMATTING LAST LINE?\n         BNE   *+8               NO.\n         MVI   2(R2),X'F4'       USE UNDERSCORE FOR LAST LINE.  (I3279)\n         LR    R14,R2            REMEMBER ADDRESS OF LINE ATTRIBUTES.\n         LA    R2,LL-80(,R2)     POINT PAST MOST 3270 ATTRIBUTES.\n         UNPK  12(5,R2),0(3,R3)  UNPACK TWO BYTES OF DATA.\n         TR    12(4,R2),HEX-C'0' MAKE IT DISPLAYABLE.\n         MVI   16(R2),C' '       ERASE GARBAGE.\n         UNPK  17(5,R2),2(3,R3)\n         TR    17(4,R2),HEX-C'0'\n         MVI   21(R2),C' '\n         UNPK  23(5,R2),4(3,R3)\n         TR    23(4,R2),HEX-C'0'\n         MVI   27(R2),C' '\n         UNPK  28(5,R2),6(3,R3)\n         TR    28(4,R2),HEX-C'0'\n         MVI   32(R2),C' '\n         UNPK  35(5,R2),8(3,R3)\n         TR    35(4,R2),HEX-C'0'\n         MVI   39(R2),C' '\n         UNPK  40(5,R2),10(3,R3)\n         TR    40(4,R2),HEX-C'0'\n         MVI   44(R2),C' '\n         UNPK  46(5,R2),12(3,R3)\n         TR    46(4,R2),HEX-C'0'\n         MVI   50(R2),C' '\n         UNPK  51(5,R2),14(3,R3)\n         TR    51(4,R2),HEX-C'0'\n         MVI   55(R2),C' '\n         ICM   R15,15,BRWSPNTR   GET CURRENT BROWSE POINTER.\n         BM    VSBFMTTT          NEGATIVE SO FORMAT TRACE TABLE.\n         MVI   61(R2),C'|'\n         MVI   78(R2),C'|'       SUPPLY CHARACTER BORDERS.\n         MVC   62(16,R2),0(R3)   LOAD SIXTEEN BYTES TO BE SHOWN.\n         TR    62(16,R2),XLATETBL  AVOID SCREEN ERRORS.\n         ST    R4,WORK           GET THE ADDRESS.\n         UNPK  1(9,R2),WORK(5)   UNPACK THE DISPLAY ADDRESS.\n         TR    1(8,R2),HEX-C'0'  MAKE IT DISPLAYABLE.\n         MVI   9(R2),C' '        ERASE GARBAGE.\n         B     VSBFLGOK\nVSBFMTTT L     R15,VSBTRPTR      GET CURRENT TRACE POINTER.\nVSBFLGOK SR    R15,R4            GET POINTER MINUS START-OF-LINE-ADDR.\n         BM    NOTBLINE          PAST IT.\n         CHI   R15,16            IS IT ON THIS LINE?\n         BNL   NOTBLINE          NO, NOT UP TO IT YET.\n         MVC   0(LL-79,R14),HIGHX    SHOW THIS LINE IN HIGH INTENSITY.\n         SLL   R15,1             GET INDEX INTO OFFSET/INDICATOR TABLE.\n         LA    R15,BRWSFLAG(R15) POINT TO OFFSET AND INDICATOR.\n         SLR   R14,R14\n         IC    R14,0(,R15)       GET DISPLAY LINE OFFSET.\n         IC    R15,1(,R15)       GET INDICATOR.\n         LA    R14,1(R14,R2)     POINT TO FLAG'S POSITION.\n         STC   R15,0(,R14)       PLACE THE FLAG THERE.\n         L     R15,=A(VBDISASM)\n         BASR  R14,R15           SHOW INSTRUCTION MNEMONIC.\nNOTBLINE A     R2,VBCOLS         POINT TO NEXT DETAIL LINE.\n         LA    R4,16(,R4)        GET NEXT LINE'S DATA ADDRESS.\n         LA    R3,16(,R3)        POINT TO NEXT LINE'S DISPLAY DATA.\n         BCT   R0,BRWSLOOP       FORMAT NEXT DETAIL LINE.\n         TM    BRWSPNTR,X'80'    IS TRACE TABLE DISPLAY FLAG IS ON?\n         BO    VSBTTOFF          YES, GO TURN IT OFF.\n         CLI   WORK2,8           TARGET DATA FETCHED OKAY?\n         BL    BRWSABND          NO, MUST HAVE ABENDED.\n         ICM   R0,15,VWORDONE    ZERO ABEND CODE?\n         BNZ   BRWSABND          NO, MUST HAVE ABENDED.\nVBPNKRTN TM    VBDSTOKN,X'80'    SHOWING DATASPACE DATA?\n         BO    TIDYBRWS          YES, END OF THINGS TO FORMAT.\n         SPACE\n         MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.\n         MVI   VPARTFLG,C' '     CLEAR STORAGE PARTITION FLAG.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R4,CVTSMEXT       POINT TO CVT STORAGE MAP EXTENSION.\n         USING CVTVSTGX,R4\n         L     R5,BRWSPNTR       LOAD TARGET VIRTUAL ADDRESS.\n         LA    R6,4095\n         TM    FLCARCH,PSAZARCH  Z/ARCHITECTURE?\n         BNO   *+8               NO.\n         LA    R6,1(R6,R6)       YES, DOUBLE PSA SIZE.\n         CR    R5,R6             PREFIXED SAVE AREA?\n         BNH   QISNUC            YES, SHOW AS NUCLEUS.\n         C     R5,CVTRWNS        BELOW THE NUCLEUS?\n         BL    QNOTNUC           YES.\n         C     R5,CVTERWNE       ABOVE THE NUCLEUS?\n         BH    QNOTENUC          YES.\n         DROP  R4                CVTVSTGX.\n         SPACE\nQISNUC   MVC   LL-78(7,2),=C'NUCLEUS'\n         SLR   R0,R0             CLEAR FOR INSERT.\n         L     R3,CVTNUCMP       POINT TO THE NUCLEUS MAP.\n         DROP  R3                CVT.\n         L     R4,12(,R3)        GET LENGTH OF NUCLEUS MAP.\n         SRL   R4,4              DIVIDE BY 16 FOR ENTRY POINT COUNT.\n         LA    R3,16(,R3)        POINT TO THE FIRST ENTRY.\n         BCTR  R4,0              DECREMENT FOR HEADER.\nQNUCLOOP TM    12(R3),X'10'      JUST AN ENTRY POINT?\n         BZ    QNXTNUCE          YES, SKIP IT.\n         L     R1,8(,R3)         NO, LOAD CSECT START ADDRESS.\n         CR    R5,R1             NO, PAST REQUIRED CSECT?\n         BL    QNUCGAP           YES, MUST BE INTER-CSECT GAP.\n         ICM   R0,7,13(R3)       NO, LOAD CSECT LENGTH.\n         ALR   R1,R0             POINT PAST END OF CSECT.\n         CR    R5,R1             IN THIS CSECT?\n         BNL   QNXTNUCE          NO, TRY NEXT CSECT.\n         MVC   LL-70(5,R2),=C'CSECT'\n         TM    12(R3),X'08'      READ-ONLY SECTION?\n         BZ    QNUCREAD          NO.\n         MVI   LL-70(R2),C'R'    YES, INDICATE THIS.\nQNUCREAD MVC   LL-64(8,R2),0(3)  SHOW CSECT NAME.\n         MVC   LL-51(8,R2),=C'OFFSET +'\n         SL    R5,8(,R3)         DETERMINE OFFSET.\n         ST    R5,WORK\n         UNPK  LL-43(7,R2),WORK+1(4)\n         TR    LL-43(6,R2),HEX-C'0'\n         MVI   LL-37(R2),C' '    SHOW HEXADECIMAL OFFSET INTO CSECT.\n         B     QXITOKAY          EXIT FROM SUBROUTINE.\nQNUCGAP  MVC   LL-70(15,R2),=C'INTER-CSECT GAP'\n         B     QXITOKAY          EXIT FROM SUBROUTINE.\nQNXTNUCE LA    R3,16(,R3)        ADJUST ENTRY POINTER.\n         BCT   R4,QNUCLOOP       PROCESS NEXT NUCLEUS MAP ENTRY.\n         B     QNUCGAP           HANDLE END OF NUCLEUS.\n         SPACE\n         USING CVT,R3\n         USING CVTVSTGX,R4\nQNOTNUC  C     R5,CVTPLPAS       BELOW PLPA?\n         BL    QNOTPLPA          YES.\n         C     R5,CVTPLPAE       IN PLPA?\n         BNH   QISPLPA           YES.\nQISSQA   MVI   VPARTFLG,C'S'     FLAG SQA.\n         B     REALVIRT          IN SQA SO FORGET MODULE SEARCH.\nQNOTENUC C     R5,CVTEPLPE       ABOVE EPLPA?\n         BH    QNOTPLPA          YES.\n         C     R5,CVTEPLPS       IN EPLPA?\n         BL    QISSQA            NO, IN SQA SO FORGET MODULE SEARCH.\n         DROP  R4                CVTVSTGX.\n         SPACE\nQISPLPA  MVC   LL-75(4,R2),=C'PLPA'\n         SR    R4,R4             GET ZERO.\n         TM    CVTOSLV6,X'10'    TEST CVTH77B0.\n         BZ    *+8               NOT AT Z/OS 2.3 LEVEL.\n         LA    R4,8              GET HBB77B0 EXTRA LPDE LENGTH.\n         L     R3,CVTLPDIA       POINT TO THE LINK PACK AREA DIRECTORY.\n         DROP  R3                CVT.\n         USING LPDE,R3\nQLPDLOOP TM    LPDEATTR,LPDEMIN  JUST A MINOR LPDE?\n         BO    QNXTLPDE          YES, SKIP IT.\n         L     R1,LPDEXTAD       NO, LOAD MODULE EXTENT START ADDRESS.\n         CR    R5,R1             NO, ABOVE REQUIRED ADDRESS?\n         BL    QNXTLPDE          YES, CAN'T BE THIS MODULE.\n         AL    R1,LPDEXTLN       NO, ADD MODULE EXTENT LENGTH.\n         CR    R5,R1             IN THIS MODULE?\n         BNL   QNXTLPDE          NO, TRY NEXT MODULE.\n         MVC   LL-70(6,R2),=C'MODULE'\n*                                SHOW MODULE NAME.\n         MVC   LL-63(8,R2),LPDENAME\n         TM    LPDEATT2,LPDEAUTH LINKED WITH AC=1?\n         BZ    PLPAACOK          NO.\n         MVC   LL-32(4,R2),=C'AC=1'\nPLPAACOK TM    LPDEATTR,LPDENLR  ONLY LOADABLE?\n         BO    PLPAOLOK          NO.\n         MVC   LL-27(2,R2),=C'OL'\nPLPAOLOK TM    LPDEATTR,LPDEREN  REENTERABLE?\n         BZ    PLPARNOK          NO.\n         MVC   LL-24(2,R2),=C'RN'\nPLPARNOK TM    LPDEATTR,LPDESER  SERIALLY REUSABLE?\n         BZ    PLPARUOK          NO.\n         MVC   LL-21(2,R2),=C'RU'\nPLPARUOK SL    R5,36(,R3)         DETERMINE OFFSET.\nPLPAOFST MVC   LL-51(8,R2),=C'OFFSET +'\n         ST    R5,WORK\n         UNPK  LL-43(7,R2),WORK+1(4)\n         TR    LL-43(6,R2),HEX-C'0'\n         MVI   LL-37(R2),C' '    SHOW HEXADECIMAL OFFSET INTO MODULE.\n         B     QXITOKAY          EXIT FROM SUBROUTINE.\nQNXTLPDE LA    R3,40(,R3)        ADJUST LPDE POINTER.\n         AR    R3,R4             MAKE OS-DEPENDENT ADJUSTMENT.\n         CLI   8(R3),X'FF'       END OF LINK PACK AREA DIRECTORY?\n         BNE   QLPDLOOP          NO, PROCESS THIS ENTRY.\n         DROP  R3                LPDE.\n         LA    R3,16(,R3)        YES, POINT PAST PLPA DIRECTORY.\n         CR    R5,R3             IN DIRECTORY?\n         BNL   QPLPAGAP          NO.\n         MVC   LL-70(9,R2),=C'DIRECTORY'\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         SL    R5,CVTLPDIA       GET PLPA DIRECTORY OFFSET.\n         B     PLPAOFST          DISPLAY OFFSET.\nQPLPAGAP MVC   LL-70(16,R2),=C'INTER-MODULE GAP'\n         B     QXITOKAY          EXIT FROM SUBROUTINE.\n         SPACE\nQNOTPLPA MVC   LL-75(4,R2),=C'LPAQ'\n         L     R3,CVTQLPAQ       POINT TO LPAQ ORIGIN.\n         B     QNEXTCDE          CHECK FOR ANY LPAQ MODULES.\n         DROP  R3                CVT.\n         USING CDENTRY,R3\nQCDELOOP TM    CDATTR,X'04'      JUST A MINOR CDE?\n         BO    QNEXTCDE          YES, SKIP IT.\n         L     R6,20(,R3)        NO, POINT TO EXTENT LIST.\n         L     R7,4(,R6)         GET EXTENT COUNT.\n         LR    R0,R7             COPY IT,\n         SLA   R7,2              GET LENGTH WORDS BYTE COUNT.\n         LAE   R7,8(R7,R6)       POINT TO EXTENT ADDRESS LIST.\nQEXTLOOP L     R1,0(,R7)         GET EXTENT ADDRESS.\n         CR    R5,R1             NO, ABOVE REQUIRED ADDRESS?\n         BL    QNEXTEXT          YES, CAN'T BE THIS EXTENT.\n         AL    R1,8(,R6)         ADD EXTENT LENGTH.\n         LA    R1,0(,R1)         CLEAR FLAG BIT.\n         CR    R5,R1             IN THIS EXTENT?\n         BL    QTHISEXT          YES.\nQNEXTEXT LA    R7,4(,R7)         POINT TO NEXT EXTENT ADDRESS.\n         LA    R6,4(,R6)         POINT TO NEXT EXTENT LENGTH.\n         BCT   R0,QEXTLOOP       TRY NEXT EXTENT.\n         B     QNEXTCDE          TRY NEXT MODULE.\nQTHISEXT MVC   LL-70(6,R2),=C'MODULE'\n         MVC   LL-63(8,R2),8(R3) SHOW MODULE NAME.\n         MVC   LL-51(8,R2),=C'OFFSET +'\n         SL    R5,0(,R7)         DETERMINE OFFSET.\n         ST    R5,WORK\n         UNPK  LL-43(7,R2),WORK+1(4)\n         TR    LL-43(6,R2),HEX-C'0'\n         MVI   LL-37(R2),C' '    SHOW HEXADECIMAL OFFSET INTO MODULE.\n         TM    CDATTR2,CDAUTH    LINKED WITH AC=1?\n         BZ    LPAQACOK          NO.\n         MVC   LL-32(4,R2),=C'AC=1'\nLPAQACOK TM    CDATTR,CDNLR      ONLY LOADABLE?\n         BO    LPAQOLOK          NO.\n         MVC   LL-27(2,R2),=C'OL'\nLPAQOLOK TM    CDATTR,CDREN      REENTERABLE?\n         BZ    LPAQRNOK          NO.\n         MVC   LL-24(2,R2),=C'RN'\nLPAQRNOK TM    CDATTR,CDSER      SERIALLY REUSABLE?\n         BZ    LPAQRUOK          NO.\n         MVC   LL-21(2,R2),=C'RU'\nLPAQRUOK TM    CDATTR2,CDOLY     OVERLAY FORMAT PROGRAM?\n         BZ    LPAQOVOK          NO.\n         MVC   LL-35(2,R2),=C'OV'\nLPAQOVOK TM    CDATTRB,CDCONTMN  CONTAMINATION BIT ON?\n         BZ    LPAQCNOK          NO.\n         MVC   LL-18(4,R2),=C'CNTM'\nLPAQCNOK LH    R0,CDUSE          LOAD USE COUNT.\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         MVC   LL-13(2,R2),=C'US'\n         UNPK  LL-11(5,R2),WORK+5(3)\n         CLI   LL-11(R2),C'0'    LEADING ZERO?\n         BNE   LPAQUSOK          NO.\n         MVI   LL-11(R2),C'E'    YES, SHOW SOMETHING A BIT MORE USEFUL.\n         CLI   LL-10(R2),C'0'    LEADING ZERO?\n         BNE   LPAQUSOK          NO.\n         MVI   LL-10(R2),C'='    YES, SHOW SOMETHING A BIT MORE USEFUL.\nLPAQUSOK SLR   R0,R0\n         IC    R0,CDSP           LOAD SUBPOOL.\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         MVC   LL-5(2,R2),=C'SP'\n         UNPK  LL-3(3,R2),WORK+6(2)\n         CLC   LL-75(4,R2),=C' JPA'   MODULE WAS IN JPA?\n         BE    ENDOFJPA          YES, MAYBE TIDY UP AFTER CROSS MEMORY.\n         B     QXITOKAY          NO, EXIT FROM SUBROUTINE.\nQNEXTCDE ICM   R3,15,CDCHAIN     POINT TO NEXT CDE.\n         BNZ   QCDELOOP          PROCESS THIS ENTRY.\n         LAE   R7,0              ZERO AR7.\n         DROP  R3                CDENTRY.\n*                                END OF JOB PACK AREA CDE CHAIN?\n         CLC   LL-75(4,R2),=C' JPA'\n         BE    QTCBLOOP          YES, TRY NEXT TCB ON CHAIN.\n         L     R15,=A(QSRCHCSA)  LOAD ROUTINE ENTRY POINT.\n         BASR  R14,R15           SEARCH CSA'S SUBPOOLS.\n         CLC   BRWSHOME,BRWSASID CROSS-MEMORY MODE REQUIRED?\n         BE    CANDOJPA          NO, CAN PROCESS OWN JOB PACK AREA.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    REALVIRT          NO, CANNOT LOOK AT JOB PACK AREA.\n         MODESET MF=(E,MDSTSUP0) SUPERVISOR STATE FOR SYSEVENT ETC.\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\n         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.\n         LA    R1,1              ADDRESS ALL AX NUMBER.\n         AXSET AX=(1)            SET AX = 1.\n         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.\n**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n**       MVC   WORK+2(2),BRWSASID GET SECONDARY ASID.\n**       MVC   WORK+6(2),BRWSHOME GET PRIMARY ASID.\n**       LASP  WORK,1            ACTIVATE SECONDARY ASID TRANSLATION.\n**       BNZ   EOESAJPA          LASP WAS NOT SUCCESSFUL.\n         LH    R1,BRWSASID       GET SECONDARY ASID.\n         ICMH  R1,15,BRWSISQN    GET SECONDARY ASID INSTANCE NUMBER.\n         BZ    VDOSSAR2\n         SSAIR R1                ACTIVATE SECONDARY ASID TRANSLATION.\n         B     VSSAROK2\nVDOSSAR2 SSAR  R1                ACTIVATE SECONDARY ASID TRANSLATION.\nVSSAROK2 XC    SECWORKA(64),SECWORKA  CLEAR SOME STORAGE.\n         STAM  R0,15,SECWORKA+64 SAVE CURRENT ACCESS REGISTER VALUE.\n         MVI   SECWORKA+15,1     AR3 WILL USE SECONDARY.\n         MVI   SECWORKA+19,1     AR4 WILL USE SECONDARY.\n         MVI   SECWORKA+23,1     AR5 WILL USE SECONDARY.\n         MVI   SECWORKA+27,1     AR6 WILL USE SECONDARY.\n         LAM   A0,A15,SECWORKA   LOAD NEW ACCESS REGISTER VALUES.\n         SAC   X'200'            GET INTO ACCESS REGISTER MODE.\nCANDOJPA MVC   LL-75(4,R2),=C' JPA'   NO, SEARCH JOB PACK AREA.\n         LH    R1,BRWSASID       GET TARGET ASID.\n         SLL   R1,2              ASID TIMES 4.\n         A     R1,ASVTADDR\n*                                POINT TO THE TARGET ASCB.\n         ICM   R1,15,ASVTENTY-ASVT-4(R1)\n         BM    ENDOFJPA          UNASSIGNED ASID - SHOULD NOT HAPPEN.\n         USING ASCB,R1\n         L     R4,ASCBASXB       POINT TO THE TARGET ASXB.\n         DROP  R1                ASCB.\n         USING ASXB,R4\n         L     R4,ASXBFTCB       POINT TO FIRST TCB IN TCB CHAIN.\n         DROP  R4                ASXB.\n         USING TCB,R4\n         LA    R3,TCBJPQ         POINT TO TASK'S CDE CHAIN POINTER.\n         B     QNEXTCDE          EXAMINE JPA MODULE ADDRESSES.\nQTCBLOOP L     R15,=A(QSRCHMSS)  LOAD ROUTINE ENTRY POINT.\n         LR    R7,R5             COPY TARGET VIRTUAL ADDRESS.\n         BASR  R14,R15           SEARCH TASK'S SUBPOOLS.\n         LR    R5,R7             RESTORE BRWSPNTR VALUE.\n         ICM   R4,15,TCBTCB      POINT TO NEXT TASK IN TCB CHAIN.\n         BZ    ENDOFJPA          NONE SO FINISHED FORMATTING SCREEN.\n         LA    R3,TCBJPQ         POINT TO TASK'S CDE CHAIN POINTER.\n         B     QNEXTCDE          EXAMINE JPA MODULE ADDRESSES.\n         DROP  R4                TCB.\nENDOFJPA CLC   BRWSHOME,BRWSASID IN CROSS-MEMORY MODE?\n         BE    QEXITIDY          NO, FINISH FORMATTING SCREEN.\n         SAC   X'000'            YES, REVERT TO PRIMARY SPACE MODE.\n         LAM   A0,A15,SECWORKA+64 RESTORE ACCESS REGISTER VALUES.\nEOESAJPA EQU   *\n**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n**       MVC   WORK+2(2),BRWSHOME  GET SECONDARY ASID.\n**       MVC   WORK+6(2),BRWSHOME  GET PRIMARY ASID.\n**       LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.\n         LH    R1,BRWSHOME       GET NEW SECONDARY ASID.\n         SSAR  R1                CANCEL SECONDARY ASID TRANSLATION.\n         L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\n         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.\n         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\n         MODESET MF=(E,MDSTPROB) BACK TO TASK'S KEY AND PROBLEM STATE.\nQEXITIDY CLC   LL-5(2,R2),=C'SP' DETAILS SUCCESSFULLY EXTRACTED?\n         BNE   REALVIRT          NO.\n         SPACE\nQXITOKAY CLC   LL-51(8,R2),=C'OFFSET +'\n         BNE   QXITLNOK\n         LA    R0,5\nQXITLNLP CLI   LL-43(R2),C'0'\n         BNE   QXITLNOK\n         MVC   LL-43(6,R2),LL-42(R2)\n         BCT   R0,QXITLNLP\nQXITLNOK TR    LL-79(79,R2),XLATETBL    AVOID SCREEN ERRORS.\n         LA    R2,LL-80(,R2)\n         A     R2,VBCOLS         ADJUST SCREEN BUFFER POINTER.\n         SPACE\nREALVIRT MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.\n         CLI   VPARTFLG,C'S'     STORAGE IN SQA?\n         BNE   VSHOWRSA          NO, SHOW REAL STORAGE ADDRESS.\n         L     R1,BRWSPNTR       YES, POINT TO ADDRESS.\n         VSMLOC SQA,AREA=((1),1) DETERMINE IF ALLOCATED.\n         LTR   R15,R15           WAS IT ALLOCATED?\n         BNZ   VFREESQA          NO.\n         LA    R1,255            YES, REPORT SUBPOOL.\n         NR    R0,R1             CLEAR MEANINGLESS BYTES.\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         MVC   LL-5(2,R2),=C'SP'\n         UNPK  LL-3(3,R2),WORK+6(2)\n         B     VGETREAL\nVFREESQA CHI   R15,4             FREE STORAGE?\n         BNE   VSMLOCER          NO, ERROR.\n         MVC   LL-43(15,R2),=C'   FREE STORAGE'\n         B     VGETREAL\nVSMLOCER STC   R15,WORK          SHOW RETURN CODE.\n         MVC   LL-18(16,R2),=C'VSMLOC ERROR RC='\n         UNPK  LL-2(3,R2),WORK(2)\n         TR    LL-2(2,R2),HEX-C'0'\nVGETREAL LA    R2,LL-80(,R2)\n         A     R2,VBCOLS         ADJUST SCREEN BUFFER POINTER.\nVSHOWRSA CLI   VALLRALL,X'FF'    WAS THE REAL ADDRESS DETERMINED?\n         BE    VGTMNDTL          NO.\n         L     R15,CRNTOPTN      POINT TO CURRENT OPTION ENTRY.\n         SH    R2,12(,R15)       POINT TO PREVIOUS LINE.\n         CLC   LL-79(30,R2),BLANKS\n         BE    VREALNOW          ROOM ON PREVIOUS LINE.\n         AH    R2,12(,R15)       POINT TO NEW LINE.\n         MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.\nVREALNOW MVC   LL-79(15,R2),=C'REAL ADDRESS IS'\n         UNPK  LL-63(5,R2),VALLRALL(3)\n         OI    LL-59(R2),X'F0'   GET FIRST FIVE DIGITS OF REAL ADDRESS.\n         TR    LL-63(5,R2),HEX-C'0'\n         MVC   LL-58(3,R2),HEADING+46   GET LAST THREE DIGITS.\n         AH    R2,12(,R15)       ADJUST SCREEN BUFFER POINTER.\n         SPACE\nVGTMNDTL MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.\n         L     R15,=A(VBGMDTLS)  GET ROUTINE ADDRESS.\n         BASR  R14,R15           GO SHOW COMMON STORAGE OBTAIN DETAILS.\n         AR    R2,R15            UPDATE SCREEN BUFFER CURSOR.\n         SPACE\nVSBTTOFF NI    BRWSPNTR,X'7F'    ENSURE SHOW TRACE TABLE FLAG IS OFF.\n         SPACE\nTIDYBRWS XC    VBECHO,VBECHO     CLEAR COMMAND ECHO.\nTIDYBMSG LR    R9,R2             COPY SUMMARY LINE ADDRESS.\n         ST    R2,HEXDEC@        SAVE FOR HEX/DEC RESUMPTION.\n         OI    MODESW,ALTS       NEED ALTERNATE SCREEN SIZE.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         MVI   0(R9),X'28'       CLEAR NON-SCROLLABLE LINE FLAG.\n         MVC   0(LL-79,R2),HIGHX LOAD HEX/DEC ATTRIBUTES.\n         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         CLI   HXDECHEX,C' '     ANY NUMBERS ON SHOW?\n         BE    HXDECDON          NO.\n         MVI   8(R2),X'F7'       SHOW NUMBERS IN WHITE.         (I3279)\n         MVC   LL-60(HXDECLEN,R2),HXDECDEC\nHXDECDON LA    R2,LL-80(,R2)\n         A     R2,VBCOLS\n         MVC   0(LL-79,R2),HIGHX LOAD MESSAGE ATTRIBUTES.\n         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         CLI   BEMSGCLR,0        ANY MESSAGE TO SHOW?\n         BE    BEMSGDON          NO.\n         MVI   2(R2),X'F2'       SHOW IN REVERSE VIDEO.         (I3279)\n         MVC   8(1,R2),BEMSGCLR  SHOW IN CORRECT COLOUR.        (I3279)\n         MVC   LL-39(39,R2),BEMSGTXT\n         MVI   BEMSGCLR,0        CLEAR PENDING MESSAGE.\nBEMSGDON LA    R2,LL-80(,R2)\n         A     R2,VBCOLS\n         MVC   0(LL-79,R2),HIGHX LOAD PROMPT ATTRIBUTES.\n         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-70(VBPRMPTL,R2),VBPROMPT\n         LA    R2,LL-70+VBPRMPTL(,R2)\n         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.\n         LA    R2,4(,R2)         ADJUST BUFFER POINTER.\nTIDYVOPT L     R9,CCTADDR        GET CCT ADDRESS.\n         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).\n         CVD   R9,WORK           CONVERT IT TO DECIMAL.\n         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.\n         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.\n         LA    R1,HOME           POINT TO START OF SCREEN BUFFER.\n         LR    R0,R2             POINT TO END OF SCREEN BUFFER.\n         SR    R0,R1             GET SCREEN BUFFER LENGTH.\nPUTSCRNV BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BZ    GETCMDVS          NO, PROCESS SUBCOMMAND.\nVIRTEXIT LM    R0,R1,VSREGS      YES, RESTORE REGISTERS FOR FREEMAIN.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL  FREE VSMLIST WORK AREA.\n         SLR   R0,R0\n         ST    R0,VSREG1         GETMAIN REQUIRED NEXT TIME.\n         BR    R9                RETURN TO MAINLINE VIA SCREENIO.\nTIDYVIRT BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R1,1\n         A     R1,WINLINES       INCREMENT LINE COUNTER.\n         ST    R1,WINLINES\n         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.\n         DROP  R15               WNDWMNGR.\n         LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.\nGETSCRNV L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         BASR  R14,R15           CALL WINDOW MANAGER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?\n         BO    VIRTEXIT          YES.\nGETCMDVS CLI   INBUFF,3          PF3/15?\n         BE    VIRTPFK3          YES.\n         CLI   INBUFF,5          PF5/17?\n         BE    BRWSPFK5          YES, FIND.\n         CLI   INBUFF,7          PF7/19?\n         BE    BROWSEUP          YES.\n         CLI   INBUFF,8          PF8/20?\n         BE    BROWSEDN          YES.\n         CLI   INBUFF,10         PF10/22?\n         BE    BROWSEUP          YES.\n         CLI   INBUFF,11         PF11/23?\n         BE    BROWSEDN          YES.\n         CLI   INBUFF+4,0        PRIMARY AREA INPUT?\n         BH    BROWSPEC          NO, MUST BE BROWSE ADDRESS SPEC.\n         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?\n         BNH   CMDSCANV          NO, LOOK FOR COMMAND.\n         MVC   INCHARS(4),BLANKS CLEAR NUMERIC INPUT.\n         CLI   VCANDBAR,C'B'     SHOWING OPTIONS OR IN BROWSE?\n         BNH   BROWSEDN          YES, DO NOT INVOKE WINDOW MANAGER.\n         MVI   INBUFF,X'F8'      SIMULATE A SCROLL DOWN REQUEST.\n         MVI   TGETLEN+1,3       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     GETSCRNV          GO SCROLL DOWN A PAGE.\nCMDSCANV CLI   INCHARS,C' '      CONTINUE REQUESTED?\n         BE    VIRTOPTN          YES, UPDATE THE DISPLAY.\n         CLI   INCHARS,C'V'      VIRTUAL STORAGE DISPLAY SELECTED?\n         BNE   TRYPVTVS          NO, CHECK FOR PVT DETAIL DISPLAY.\n         MVI   VCANDBAR,C'V'     FLAG VIRTUAL STORAGE DISPLAY MODE.\n         B     REDOVIRT          DISPLAY VIRTUAL STORAGE LAYOUT.\nTRYPVTVS CLI   INCHARS,C'P'      PRIVATE AREA DISPLAY SELECTED?\n         BNE   TRYLSQAS          NO, CHECK FOR LSQA DETAIL DISPLAY.\n         MVI   VCANDBAR,C'P'     FLAG LSQA DETAIL DISPLAY MODE.\n         MVC   HEADGDTL+47(7),=C' << PVT'\n         B     REDOVIRT          DISPLAY SYSTEM QUEUE AREA DETAILS.\nTRYLSQAS CLI   INCHARS,C'L'      LSQA DISPLAY SELECTED?\n         BNE   TRYSQAVS          NO, CHECK FOR SQA DETAIL DISPLAY.\n         MVI   VCANDBAR,C'L'     FLAG LSQA DETAIL DISPLAY MODE.\n         MVC   HEADGDTL+47(7),=C'<< LSQA'\n         B     REDOVIRT          DISPLAY SYSTEM QUEUE AREA DETAILS.\nTRYSQAVS CLI   INCHARS,C'S'      SYSTEM QUEUE AREA DISPLAY SELECTED?\n         BNE   TRYCSAVS          NO, CHECK FOR CSA DETAIL DISPLAY.\n         MVI   VCANDBAR,C'S'     FLAG SQA DETAIL DISPLAY MODE.\n         MVC   HEADGDTL+47(7),=C' << SQA'\n         B     REDOVIRT          DISPLAY SYSTEM QUEUE AREA DETAILS.\nTRYCSAVS CLI   INCHARS,C'D'      COMMON SERVICE AREA DISPLAY SELECTED?\n         BNE   TRYCSAMN          NO, CHECK FOR CSA USAGE DISPLAY.\n         MVI   VCANDBAR,C'D'     FLAG CSA DETAIL DISPLAY MODE.\n         MVC   HEADGDTL+47(7),=C' << CSA'\n         B     REDOVIRT          DISPLAY COMMON SERVICE AREA DETAILS.\nTRYCSAMN CLI   INCHARS,C'C'      COMMON SERVICE AREA DISPLAY SELECTED?\n         BNE   TRYBRWSV          NO, CHECK FOR CONTENTS DISPLAY.\n         MVI   VCANDBAR,C'C'     FLAG CSA USAGE DISPLAY MODE.\n         B     REDOVIRT          DISPLAY COMMON SERVICE AREA USAGE.\nVIRTPFK3 MVI   VCANDBAR,C' '     RESET SUB-OPTION SELECTION.\n         B     REDOVIRT          DISPLAY SUB-OPTION LIST.\nTRYBRWSV CLI   INCHARS,C'B'      VIRTUAL STORAGE BROWSE SELECTED?\n         BNE   GIVEHLPV          NO, SHOW HELP PANEL.\n         MVI   VCANDBAR,C'B'     FLAG VIRTUAL STORAGE BROWSE MODE.\n         XC    VWORDONE,VWORDONE CLEAR SYSTEM ABEND OR RETURN CODE.\n         CLI   INCHARS+1,C' '    SUBCOMMAND SPECIFIED?\n         BE    VIRTBRWS          NO, GET BROWSING.\n         MVC   INCHARS,INCHARS+1 PROMOTE VB SUBCOMMAND.\n         MVI   INCHARS+L'INCHARS-1,C' '\n         OC    JBTARGAS,JBTARGAS ASID SUPPLIED FROM OPTION \"J\"?\n         BZ    BROWSPEC          NO.\n         MVC   BRWSASID,JBTARGAS YES.\n         MVC   BRWSISQN,JBTARGI# COPY INSTANCE NUMBER.\n         XC    JBTARGAS,JBTARGAS RESET IT.\n         XC    JBTARGI#,JBTARGI# RESET IT.\n         NI    VBDSTOKN,X'7F'    INVALIDATE DATASPACE SPACE TOKEN.\n         TM    BRWSASID,X'80'    FETCHING DATA FROM DATA SPACE?\n         BNO   BROWSPEC          NO.\n         NI    BRWSASID,X'7F'    YES, CORRECT ASID.\n         OI    VBDSTOKN,X'80'    REVALIDATE DATASPACE SPACE TOKEN.\n         SPACE\nBROWSPEC CLI   INCHARS,C'0'      NUMERIC?\n         BL    BRWSNTNM          NO, NOT NUMERIC.\n         LA    R0,8              YES, ASSUME NEW EXPLICIT ADDRESS.\n         LA    R3,INCHARS        POINT TO FIRST DIGIT.\n         LA    R14,BRWSADRT      LOAD RETURN ADDRESS.\n         B     BRWSHEX2          INTERPRET HEX INPUT.\nBRWSNTNM CLI   INCHARS,C'<'      TRACE TABLE ENTRY JUMPING?\n         BE    BRWSJUMP          YES.\n         CLI   INCHARS,C'>'      TRACE TABLE ENTRY JUMPING?\n         BE    BRWSJUMP          YES.\n         CLI   INCHARS,C'+'      PLUS?\n         BE    BRWSADD           YES.\n         CLI   INCHARS,C'-'      MINUS?\n         BNE   BRWSTBLU          NO, PERFORM TABLE LOOK-UP.\n         LA    R0,8              YES.\n         LA    R3,INCHARS+1      POINT TO FIRST DIGIT.\n         LA    R14,BRWSLSRT      LOAD RETURN ADDRESS.\n         B     BRWSHEX2          INTERPRET HEX INPUT.\nBRWSADD  LA    R0,8\n         LA    R3,INCHARS+1      POINT TO FIRST DIGIT.\n         LA    R14,BRWSPLRT      LOAD RETURN ADDRESS.\n         B     BRWSHEX2          INTERPRET HEX INPUT.\nBRWSTBLU LA    R0,BRWSPEC#       GET NUMBER OF SUBCOMMANDS.\n         LA    R1,BRWSPCTB       POINT TO SPECIFICATION TABLE.\nBRWSPCLP L     R15,4(,R1)        LOAD POSSIBLE ENTRY POINT.\n         CLC   0(4,R1),INCHARS   FOUND IT?\n         BER   R15               YES.\n         LA    R1,8(,R1)         NO, POINT TO NEXT ONE.\n         BCT   R0,BRWSPCLP       TRY IT OUT.\n         CLI   INBUFF+4,0        PRIMARY AREA INPUT?\n         BE    VIRTBRWS          YES, IGNORE EXTRA CHARACTERS.\nBRWSERIS MVC   BEMSGTXT,ISMSG    LOAD \"INVALID SPECIFICATION\" MESSAGE.\nBROWSERR OI    HOME,X'04'        ENSURE BELL REQUESTED IN WCC.\n         MVI   BEMSGCLR,X'F2'    ENSURE MESSAGE IS IN RED.\n         L     R2,HEXDEC@        LOAD RESUMPTION ADDRESS.\n         B     TIDYBMSG          GO DISPLAY THE MESSAGE.\nBROWSEF  CLI   WORK2,0           COULD DATA BE FETCHED?\n         BE    BRWSERIS          NO, SO THIS IS INVALID.\n         L     R1,BRWSPNTR       GET CURRENT BROWSE POINTER.\n         LR    R0,R1             COPY IT.\n         SRL   R0,7\n         SLL   R0,7              GET DISPLAY ORIGIN.\n         SLR   R1,R0             GET OFFSET INTO DISPLAYED DATA.\n         AL    R1,VWORDTWO       POINT TO DATA IN HOLD AREA.\n         ICM   R15,15,0(R1)      GET FULLWORD CONTENTS.\n         LA    R15,0(,R15)       ENSURE 31-BIT ADDRESS FORMAT.\n         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.\n         CLI   INCHARS,C'F'      FULLWORD COMMAND?\n         BE    VIRTBRWS          YES, DISPLAY DATA FROM NEW ADDRESS.\n         MVI   BRWSPNTR,0        NO, 24-BIT ADDRESS COMMAND.\n         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSADDR LA    R0,8              MAXIMUM OF 8 HEX DIGITS IN AN ADDRESS.\n         BAS   R14,BROWSHEX      GET SPECIFIED ADDRESS.\nBRWSADRT LA    R15,0(,R15)       ENSURE 31-BIT ADDRESS FORMAT.\n         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.\n         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSASCB LA    R3,INCHARS+4      POINT TO OPERAND, IF ANY.\n         LA    R0,2              MAXIMUM NUMBER OF STARTING COLUMNS.\nBASCBOLP CLI   0(R3),C' '        CHARACTER BLANK?\n         BNE   BRASCBOP          NO, FOUND AN OPERAND.\n         LA    R3,1(,R3)         YES, TRY NEXT ONE.\n         BCT   R0,BASCBOLP       CATER FOR LEADING BLANK.\n         L     R4,PSAAOLD        NO OPERAND SO POINT TO CURRENT ASCB.\n         B     BGOTASCB          DISPLAY DATA FROM NEW ADDRESS.\nBRASCBOP CLI   0(R3),C''''       LEADING QUOTE?\n         BNE   BASCBHEX          NO, TRY FOR ASID.\n         CLC   BCSCBCHR,INCHARS  REQUESTED CSCB BY JOB/STEP NAME?\n         BE    BRWSCSCB          YES.\n         CLC   BCNCLCHR,INCHARS  REQUESTED CANABLE BY JOB/STEP NAME?\n         BE    BRWSCSCB          YES.\n         CLC   BNCANCHR,INCHARS  REQUESTED NONCANABLE BY JOB/STEP NAME?\n         BE    BRWSCSCB          YES.\n         L     R7,ASVTADDR       POINT TO ADDRESS SPACE VECTOR TABLE.\n         USING ASVT,R7\n         L     R9,ASVTMAXU       GET MAXUSER.\n         LA    R7,ASVTENTY-4     POINT TO FIRST ASVT ENTRY - 4.\n         DROP  R7                ASVT.\nBWSASVTE LA    R7,4(,R7)         POINT TO NEXT ENTRY.\n         ICM   R4,15,0(R7)       POINT TO ASCB.\n         BM    NXTASVTB          ASID NOT ASSIGNED.\n         ICM   R15,15,JBNI(R4)   GET JOBNAME POINTER.\n         BNZ   BLOCJNAM          BATCH JOB.\n         ICM   R15,15,JBNS(R4)   GET JOBNAME POINTER.\n         BNZ   BLOCJNAM          HAVE POINTER.\n         LA    R15,STARTING      NO POINTER, SO STARTING.\nBLOCJNAM CLC   1(8,R3),0(R15)    RIGHT JOB?\n         BE    BGOTASCB          YES, LOCATED REQUESTED JOB.\nNXTASVTB BCT   R9,BWSASVTE       GET NEXT ASVT ENTRY.\n         B     BRWSERIS          NO MORE ASVT ENTRIES.\nBASCBHEX LA    R0,4              MAXIMUM OF 4 HEX DIGITS IN AN ASID.\n         BAS   R14,BROWSHEX      GET SPECIFIED ASID.\n         LTR   R15,R15           POSITIVE ASID NUMBER?\n         BNP   BRWSERIS          NO, INVALID.\n         L     R7,ASVTADDR       POINT TO ADDRESS SPACE VECTOR TABLE.\n         USING ASVT,R7\n         C     R15,ASVTMAXU      ASID GREATER THAN MAXUSER?\n         BH    BRWSERIS          YES, INVALID.\n         SLL   R15,2             GET INDEX INTO ASVT.\n*                                POINT TO ASVT ENTRY.\n         LA    R7,ASVTENTY-4(R15)\n         DROP  R7                ASVT.\n         ICM   R4,15,0(R7)       POINT TO ASCB.\n         BM    BRWSERIS          ASID NOT ASSIGNED.\n         USING ASCB,R4\nBGOTASCB CLC   BCNCLCHR,INCHARS  REQUESTED CANCELLABLE BY ASID?\n         BE    BGETCSCB          YES.\n         CLC   BNCANCHR,INCHARS  REQUESTED NON-CANCELLABLE BY ASID?\n         BE    BGETCSCB          YES.\n         CLC   BSWAPCHR,INCHARS  REQUESTED SWAPPABLE?\n         BE    BRWSSWAP          YES.\n         CLC   BNSWPCHR,INCHARS  REQUESTED NON-SWAPPABLE?\n         BE    BRWSSWAP          YES.\n         L     R1,BRWSPNTR       SAVE OLD DISPLAY ADDRESS.\n         ST    R4,BRWSPNTR       UPDATE DISPLAY ADDRESS.\n         CLC   BASCBCHR,INCHARS  WAS ASCB REQUESTED?\n         BE    VBASBRWS          YES, DISPLAY DATA FROM NEW ADDRESS.\n         CLC   BASIDCHR,INCHARS  WAS ASID REQUESTED?\n         BE    BROWASID          YES, DISPLAY DATA FROM NEW ADDRESS.\n         ST    R1,BRWSPNTR       NO, RESTORE OLD DISPLAY ADDRESS.\n         LA    R1,248            LOAD THE ASTE POINTER OFFSET.\n         CLC   BASTECHR,INCHARS  WAS ASTE REQUESTED?\n         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.\n         LA    R1,ASCBOUCB-ASCB  LOAD THE OUCB POINTER OFFSET.\n         CLC   BOUCBCHR,INCHARS  WAS OUCB REQUESTED?\n         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.\n         LA    R1,ASCBOUXB-ASCB  LOAD THE OUXB POINTER OFFSET.\n         CLC   BOUXBCHR,INCHARS  WAS OUXB REQUESTED?\n         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.\n         LA    R1,ASCBRSME-ASCB  LOAD THE RAX POINTER OFFSET.\n         CLC   BRAXCHR,INCHARS   WAS RAX REQUESTED?\n         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.\n         LA    R1,ASCBCSCB-ASCB  LOAD THE CSCB POINTER OFFSET.\n         CLC   BCSCBCHR,INCHARS  WAS CSCB REQUESTED?\n         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.\n         LA    R1,ASCBASSB-ASCB  LOAD THE ASSB POINTER OFFSET.\n         CLC   BASSBCHR,INCHARS  WAS ASSB REQUESTED?\n         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.\n         ICM   R4,15,ASCBASSB    POINT TO ASSB.\n         BZ    BRWSERIS          THE CONTROL BLOCK DOES NOT EXIST.\n         DROP  R4                ASCB.\n         LA    R1,ASSBJSAB-ASSB  LOAD THE JSAB POINTER OFFSET.\nBGETJPTR LA    R1,0(R1,R4)       POINT TO THE POINTER.\n         ICM   R4,15,0(R1)       IS THE POINTER ZERO?\n         BZ    BRWSERIS          YES, THE CONTROL BLOCK DOES NOT EXIST.\n         LA    R4,0(,R4)         NO, ENSURE SIGN BIT IS OFF.\n         ST    R4,BRWSPNTR       UPDATE DISPLAY ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSASXB L     R1,PSAAOLD        POINT TO THE CURRENT ASCB.\n         USING ASCB,R1\n         MVC   BRWSPNTR,ASCBASXB COPY ASXB POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R1                ASCB.\n         USING ASCB,R4\nBROWASID MVC   BRWSASID,BRWSHOME RESET DATA SOURCE ASID.\n         MVC   BEMSGTXT,AFMSG    LOAD \"AUTHORIZATION FAILURE\" MESSAGE.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'B'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         OC    OPTNATR,C'V'-C' '(R15)  GATE CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   BROWSERR          NO, CAN'T USE XMS.\n         L     R1,ASCBRSME       YES, GET RAX POINTER.\n         USING RAX,R1\n         L     R1,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.\n         DROP  R1                RAX.\n         LTR   R1,R1             ZERO FRAMES FOR THIS ADDRESS SPACE?\n         BZ    VBASBRWS          YES, IT MUST BE SWAPPED OUT.\n         TM    ASCBRCTF,ASCBOUT  IS THIS ADDRESS SPACE SWAPPED OUT?\n         BO    VBASBRWS          YES, CAN'T DO ANYTHING ABOUT THAT.\n         MVC   BRWSASID,ASCBASID NO, LOAD TARGET ASID.\n         B     VBASBRWS          DISPLAY NEW ASID'S ASCB.\nBGETCSCB ICM   R1,15,ASCBCSCB    LOAD ADDRESS SPACE TOP CSCB ADDRESS.\n         BZ    BRWSERIS          ADDRESS SPACE HAS NO CSCB.\n         B     BGOTCSCB          NOW HAVE CSCB ADDRESS.\n         DROP  R4                ASCB.\nBRWSCSCB L     R1,CVTPTR(,0)     LOAD CVT POINTER.\n         USING CVT,R1\n         L     R1,CVTMSER        LOAD MSER POINTER.\n         DROP  R1                CVT.\n*  BACHN AND CHPTR BOTH HAVE THE SAME OFFSET WHICH IS ZERO.\n         USING CHAIN,R1\nBCHNLOOP ICM   R1,15,CHPTR       LOAD CSCB POINTER.\n         BZ    BRWSERIS          END OF CHAIN REACHED.\n         CLC   CHKEY,1(R3)       FOUND THE NAME?\n         BE    BGOTCSCB          YES.\n         CLI   CHTRKID,CHTSID    TSO USER?\n         BE    BCHNLOOP          YES, DON'T CHECK STEP NAME.\n         CLC   CHCLS,1(R3)\n         BNE   BCHNLOOP          NO, TRY NEXT ONE.\nBGOTCSCB CLC   BCSCBCHR,INCHARS  CSCB DISPLAY REQUEST?\n         BE    BUSECSCB          YES, SO DISPLAY IT.\n         MVC   BEMSGTXT,AFMSG    LOAD \"AUTHORIZATION FAILURE\" MESSAGE.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'J'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         OC    OPTNATR,C'V'-C' '(R15)  GATE CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   BROWSERR          NO, CAN'T PERFORM THIS REQUEST.\n         LR    R4,R1             COPY CSCB ADDRESS.\n         DROP  R1                CHAIN.\n         USING CHAIN,R4\n         CLC   BNCANCHR,INCHARS  NON-CANCELLABLE REQUEST?\n         BE    BRWSNCAN          YES, DO IT.\n         TM    CHACT,CHCL        CANCELLABLE JOB?\n         BO    BRWSERAH          YES, ALREADY IS.\n         MODESET MF=(E,MDSTSUP0)\n         OI    CHACT,CHCL        NO, BUT NOW IT IS.\n         MODESET MF=(E,MDSTPROB)\n         MVC   BEMSGTXT,CNMSG    LOAD \"CANCELLABLE\" MESSAGE.\n*                                LOAD THE JOB NAME.\n         MVC   BEMSGTXT+6(8),CHKEY\n         B     BRWSMWTO          GO DISPLAY THE MESSAGE.\nBRWSNCAN TM    CHACT,CHCL        NON-CANCELLABLE JOB?\n         BZ    BRWSERAH          YES, ALREADY IS.\n         MODESET MF=(E,MDSTSUP0)\n         NI    CHACT,255-CHCL    NO, BUT NOW IT IS.\n         MODESET MF=(E,MDSTPROB)\n         MVC   BEMSGTXT,NCMSG    LOAD \"NON-CANCELLABLE\" MESSAGE.\n*                                LOAD THE JOB NAME.\n         MVC   BEMSGTXT+4(8),CHKEY\nBRWSMWTO MVC   VBPRY64I+12(39),BEMSGTXT\n         L     R1,PSATOLD        POINT TO THE CURRENT TCB.\n         USING TCB,R1\n         L     R1,TCBTIO         POINT TO THE TIOT.\n         DROP  R1                TCB.\n         USING TIOT1,R1\n*                                LOAD USERID INTO MESSAGE.\n         MVC   VBPRY64I+57(8),TIOCNJOB\n         DROP  R1                TIOT1.\n         WTO   MF=(E,VBPRY64I)   LET OPERATORS KNOW AND LOG IT.\n         B     BRWSMESG          GO DISPLAY THE MESSAGE.\nBUSECSCB ST    R1,BRWSPNTR       SAVE CSCB ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R4                CHAIN.\nBRWSDEC  LA    R0,8              MAXIMUM OF 8 HEX DIGITS TO CONVERT.\n         BAS   R14,BROWSHEX      GET SPECIFIED HEXADECIMAL NUMBER.\nBRWSCNVT LA    R15,0(,R15)       TURN OFF SIGN BIT.\n         CVD   R15,WORK\n         MVC   HXDECDEC,ED11\n         ED    HXDECDEC,WORK+2   DISPLAY DECIMAL.\n         ST    R15,WORK\n         UNPK  HXDECHEX,WORK(5)\n         TR    HXDECHEX(8),HEX-C'0'\n         MVI   HXDECHEX+8,C''''  DISPLAY HEXADECIMAL.\n         L     R2,HEXDEC@        LOAD RESUMPTION ADDRESS.\n         B     TIDYBRWS          SHOW CONVERSION RESULTS.\nBRWSPFK5 CLI   VCANDBAR,C'B'     IN BROWSE MODE?\n         BNE   CMDSCANV          NO, TREAT IT AS ENTER.\n         LA    R3,INCHARS        POINT TO OPERAND, IF ANY.\n         B     BRWSPF17          PERFORM FIND FOR PF5/17 REQUEST.\nBRWSCHNG MVC   BEMSGTXT,AFMSG    LOAD \"AUTHORIZATION FAILURE\" MESSAGE.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'V'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'F8'     SUITABLY AUTHORIZED?\n         BNO   BROWSERR          NO, CAN'T PERFORM THIS REQUEST.\nBRWSFIND LA    R3,INCHARS+4      POINT TO OPERAND, IF ANY.\nBRWSPF17 MVC   BEMSGTXT,EDMSG    LOAD \"ESA DATASPACE\" MESSAGE.\n         TM    VBDSTOKN,X'80'    DATASPACE SPACE TOKEN PRESENT?\n         BO    BROWSERR          YES, CAN'T PERFORM CROSS-MEMORY FIND.\nBFASIDOK LA    R0,2              MAXIMUM NUMBER OF STARTING COLUMNS.\nBFINDOLP CLI   0(R3),C' '        CHARACTER BLANK?\n         BNE   BRFINDOP          NO, FOUND AN OPERAND.\n         LA    R3,1(,R3)         YES, TRY NEXT ONE.\n         BCT   R0,BFINDOLP       CATER FOR LEADING BLANK.\n         CLI   INBUFF,5          NO OPERAND, PF5/17?\n         BE    BREPFIND          YES, SO REPEAT FIND.\n         CLC   BFINDCHR,INCHARS  FIND COMMAND?\n         BE    BREPFIND          YES, SO REPEAT FIND.\n         B     BREPCHNG          NO OPERAND SO REPEAT ALTERATION.\nBRFINDOP CLI   0(R3),C''''       LEADING QUOTE?\n         BNE   BCHNGHEX          NO, TRY FOR HEX.\n         LA    R0,20             UP TO 20 CHARACTERS.\n         LA    R1,1(,R3)         POINT TO FIRST CHARACTER.\nBRFNDTRL CLI   1(R1),C''''       FOUND THE TRAILING QUOTE?\n         BE    BCHNGEOC          YES, END OF CHARACTER STRING.\n         LA    R1,1(,R1)         NO, INCREMENT POINTER.\n         BCT   R0,BRFNDTRL       CHECK NEXT BYTE.\n         MVC   BEMSGTXT,TQMSG    LOAD \"TRAILING QUOTE\" MESSAGE.\n         B     BROWSERR          DISPLAY THE ERROR MESSAGE.\nBCHNGEOC LA    R1,20             GET MAXIMUM LENGTH.\n         SR    R1,0              GET TEXT LENGTH CODE.\n         CLI   INBUFF,5          PF5/17?\n         BE    BFINDEOC          YES, OBVIOUSLY A FIND COMMAND.\n         CLC   BFINDCHR,INCHARS  FIND COMMAND?\n         BE    BFINDEOC          YES.\n         ST    R1,BCHNGLEN       NO, SAVE \"CHANGE\" TEXT LENGTH CODE.\n         MVC   BCHNGTXT,1(R3)    COPY THE ALTERATION TEXT.\n         B     BREPCHNG          GO ALTER THE DATA.\nBFINDEOC ST    R1,BFINDLEN       SAVE THE \"FIND\" TEXT LENGTH CODE.\n         MVC   BFINDTXT,1(R3)    COPY THE TEXT TO BE SEARCHED FOR.\n         B     BREPFIND          GO LOOK FOR THE DATA.\nBCHNGHEX LA    R0,8              MAXIMUM OF 8 HEX DIGITS TO CONVERT.\n         BAS   R14,BRWSHEX2      GET SPECIFIED HEXADECIMAL DATA.\n         MVC   BEMSGTXT,OXMSG    LOAD \"ODD HEX\" MESSAGE.\n         CLI   0(R3),C' '        MORE THAN MAXIMUM DIGITS?\n         BH    BROWSERR          YES, DISPLAY ERROR MESSAGE.\n         ST    R0,WORK           SAVE EIGHT MINUS DIGIT COUNT.\n         TM    WORK+3,X'01'      ODD NUMBER OF HEX DIGITS?\n         BO    BROWSERR          YES, DISPLAY ERROR MESSAGE.\n         LA    R1,8              NO, GET MAXIMUM DIGIT COUNT.\n         SR    R1,R0             GET ACTUAL DIGIT COUNT.\n         SRL   R1,1              GET DATA BYTE COUNT.\n         BCTR  R1,0              GET DATA LENGTH CODE.\n         XR    R1,R0\n         XR    R0,R1             EXCHANGE LENGTH CODE & 8-DIGIT COUNT.\n         XR    R1,R0\n         SLL   R1,2              GET UNUSED BIT COUNT.\n         SLL   R15,0(R1)         LEFT JUSTIFY THE HEX DATA.\n         CLI   INBUFF,5          PF5/17?\n         BE    BFINDHEX          YES, OBVIOUSLY A FIND COMMAND.\n         CLC   BFINDCHR,INCHARS  FIND COMMAND?\n         BE    BFINDHEX          YES.\n         ST    R0,BCHNGLEN       SAVE LENGTH CODE.\n         ST    R15,BCHNGTXT      SAVE THE ALTERATION DATA.\nBREPCHNG MVC   BEMSGTXT,MDMSG    LOAD \"MISSING DATA\" MESSAGE.\n         ICM   R3,15,BCHNGLEN    GET CHANGE DATA LENGTH CODE.\n         BM    BROWSERR          NO DATA SPECIFIED.\n         MVI   WORK2,0           FLAG NO DATA LINES FETCHED.\n         MVI   VKEYPROT,7        INVALIDATE VIRTUAL STORAGE KEY.\n         LA    R2,BUFFER         RESET BUFFER POINTER.\n         A     R2,VBCOLS         ADD SCREEN WIDTH.\n         AHI   R2,-80            POINT TO FIRST DETAIL LINE.\n         B     BREPOINT          GO POINT TO THE DATA.\nBFINDHEX ST    R0,BFINDLEN       SAVE LENGTH CODE.\n         ST    R15,BFINDTXT      SAVE THE DATA TO BE SEARCHED FOR.\nBREPFIND MVC   BEMSGTXT,MDMSG    LOAD \"MISSING DATA\" MESSAGE.\n         ICM   R3,15,BFINDLEN    GET FIND DATA LENGTH CODE.\n         BM    BROWSERR          NO DATA SPECIFIED.\n         MVI   WORK2,X'FA'       FLAG FIND SUBCOMMAND IS ACTIVE.\nBREPOINT L     R4,BRWSPNTR       POINT TO CURRENT ADDRESS.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    BFNDPLEB          NO, CAN'T DO A MODESET.\n         MODESET MF=(E,MDSTSUP0) KEY ZERO FOR X-RAY VISION SEARCH.\nBFNDPLEB MVI   VWORDCNT+1,0      CLEAR INTERRUPT CODE.\n         ESTAE MF=(E,ESTAEONV)   TRAP ABENDS WHILE CHECKING DATA.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    BFALLSET          NO, CAN'T BE A CROSS-MEMORY SEARCH.\n         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.\n         CLC   BRWSHOME,BRWSASID CROSS-MEMORY MODE REQUIRED?\n         BE    BFALLSET          NO, START SEARCHING.\n         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.\n         LA    R1,1              ADDRESS ALL AX NUMBER.\n         AXSET AX=(1)            SET AX = 1.\n         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.\n**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n**       MVC   WORK+2(2),BRWSASID GET SECONDARY ASID.\n**       MVC   WORK+6(2),BRWSHOME GET PRIMARY ASID.\n**       LASP  WORK,1            ACTIVATE SECONDARY ASID TRANSLATION.\n**       BNZ   EOESAJPA          LASP WAS NOT SUCCESSFUL.\n         LH    R1,BRWSASID       GET SECONDARY ASID.\n         ICMH  R1,15,BRWSISQN    GET SECONDARY ASID INSTANCE NUMBER.\n         BZ    VDOSSAR3\n         SSAIR R1                ACTIVATE SECONDARY ASID TRANSLATION.\n         B     VSSAROK3\nVDOSSAR3 SSAR  R1                ACTIVATE SECONDARY ASID TRANSLATION.\nVSSAROK3 XC    SECWORKA(64),SECWORKA  CLEAR SOME STORAGE.\n         STAM  A0,A15,SECWORKA+64 SAVE CURRENT ACCESS REGISTER VALUE.\n         MVI   SECWORKA+19,1     ONLY AR4 WILL USE SECONDARY.\n         LAM   A0,A15,SECWORKA   LOAD NEW ACCESS REGISTER VALUES.\n         SAC   X'200'            GET INTO ACCESS REGISTER MODE.\nBFALLSET CLI   WORK2,X'FA'       IS THIS A FIND SUBCOMMAND?\n         BE    BFNDLOOP          YES, GO DO IT.\n         L     R1,PSATOLD        POINT TO THE CURRENT TCB.\n         USING TCB,R1\n         L     R1,TCBTIO         POINT TO THE TIOT.\n         DROP  R1                TCB.\n         USING TIOT1,R1\n*                                LOAD USERID INTO MESSAGE.\n         MVC   VBPRY61I+12(8),TIOCNJOB\n         DROP  R1                TIOT1.\n         UNPK  VBPRY61I+40(9),BRWSPNTR(5)\n         TR    VBPRY61I+40(8),HEX-C'0'\n         MVI   VBPRY61I+48,C' '  SHOW THE VIRTUAL ADDRESS.\n         UNPK  VBPRY61I+57(5),BRWSASID(3)\n         TR    VBPRY61I+57(4),HEX-C'0'\n         MVI   VBPRY61I+61,C' '  SHOW THE TARGET ADDRESS SPACE ID.\n         EX    R3,BCHNGSAV       COPY DATA TO BE CHANGED.\n         MVC   VBPRY62I+23(41),BLANKS\n         LA    R1,VBPRY62I+23    POINT TO WTO DAT AREA.\n         LA    R15,SECWORKA+128  POINT TO ORIGINAL DATA.\n         LA    R0,1(,R3)         GET REPLACEMENT DATA LENGTH.\nWIM2LOOP UNPK  0(3,R1),0(2,R15)  UNPACK A BYTE.\n         TR    0(2,R1),HEX-C'0'  MAKE DISPLAYABLE.\n         MVI   2(R1),C''''       TRAILING QUOTE IN CASE LAST DATA BYTE.\n         LA    R1,2(,R1)         POINT TO NEXT HEX DIGIT PAIR LOCATION.\n         LA    R15,1(,R15)       POINT TO NEXT SOURCE BYTE.\n         BCT   R0,WIM2LOOP       PROCESS NEXT BYTE.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    VBPROTOK          NO.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTSMEXT       POINT TO CVT STORAGE MAP EXTENSION.\n         DROP  R1                CVT.\n         USING CVTVSTGX,R1\n         C     R4,CVTRONS        BELOW THE READ-ONLY NUCLEUS?\n         BL    ZNOTRNUC          YES, NOT IN THE READ-ONLY NUCLEUS.\n         C     R4,CVTERWNS       BELOW THE EXTENDED READ/WRITE NUCLEUS?\n         BNL   ZNOTRNUC          NO, NOT IN THE READ-ONLY NUCLEUS.\n         SLR   R7,R7             YES, CLEAR FOR FLAG PURPOSES.\n         B     ZAPBNDRY          GO CHECK PAGE BOUNDARY.\nZNOTRNUC C     R4,CVTPLPAS       BELOW PLPA?\n         BL    VBPROTOK          YES, ASSUME NO PAGE PROTECTION.\n         C     R4,CVTEPLPE       ABOVE EPLPA?\n         BH    VBPROTOK          YES, ASSUME NO PAGE PROTECTION.\n         C     R4,CVTPLPAE       IN PLPA?\n         BNH   VBISPLPA          YES.\n         C     R4,CVTEPLPS       IN EPLPA?\n         BL    VBPROTOK          NO, FORGET ABOUT PAGE PROTECTION.\n         DROP  R1                CVTVSTGX.\nVBISPLPA LA    R7,1              FLAG PAGE-FIXING NECESSITY.\nZAPBNDRY MVC   BEMSGTXT,PBMSG    LOAD \"PAGE BOUNDARY\" MESSAGE.\n         LA    R0,0(R3,R4)       GET ADDRESS OF LAST BYTE TO BE ZAPPED.\n         SRL   R0,12             GET ITS RELATIVE PAGE NUMBER.\n         LA    R1,0(,R4)         SAME FOR THE FIRST BYTE.\n         SRL   R1,12\n         CLR   R1,R0             ENTIRE UPDATE WITHIN THE ONE PAGE?\n         BNE   BROWSERR          NO, DISPLAY THE ERROR MESSAGE.\n         LTR   R7,R7             PAGE-FIX TO BE PERFORMED?\n         BZ    ZAPFIXOK          NO.\n         SLL   R1,12             YES, GET ADDRESS OF ITS FIRST BYTE.\n         LA    R2,4095(,R1)      GET ADDRESS OF ITS LAST BYTE.\n         SLR   R0,R0             SYNCHRONOUS PAGE-FIX SO NO ECB.\n         SLR   R4,R4             ZERO OWNING TCB POINTER.\n         PGSER R,FIX,A=(1),EA=(2),TCB=(4),ECB=(0),LONG=Y,BRANCH=Y\n*                                HAVE NOW PAGE-FIXED THE PLPA PAGE\n*                                FOR THE LIFE OF THE IPL.\nZAPFIXOK LA    R2,BUFFER         RESET BUFFER POINTER.\n         A     R2,VBCOLS         ADD SCREEN WIDTH.\n         AHI   R2,-80            POINT TO FIRST DETAIL LINE.\n         L     R3,BCHNGLEN       GET CHANGE DATA LENGTH CODE.\n         L     R4,BRWSPNTR       POINT TO CURRENT ADDRESS.\n         LA    R0,VBZLEN         GET DAT-OFF ROUTINE SIZE.\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=ANY,BNDRY=PAGE\n         LR    R7,R1             REMEMBER GETMAINED ADDRESS.\n         LA    R15,4095(,R1)     POINT TO END OF GETMAINED AREA.\n         PGSER R,FIX,A=(1),EA=(15),ECB=0  PAGE-FIX THE DAT-OFF PAGE.\n         LR    R15,R7            POINT BACK TO THE GETMAINED AREA.\n         L     R1,=A(VZDATOFF)\n         MVC   0(VBZLEN,R15),0(R1) LOAD IT WITH THE DAT-OFF ROUTINE.\n         USING VZDATOFF,R15\n         MVC   VZREQ,INCHARS     SUPPLY REQUEST NAME.\n         MVC   ZCHNGTXT,BCHNGTXT COPY REPLACEMENT DATA.\n         DROP  R15               VZDATOFF.\n         BASR  R14,R15           INVOKE THE DAT-OFF ROUTINE.\n         LR    R1,R7             POINT TO THE GETMAINED AREA.\n         LA    R15,4095(,R1)     POINT TO END OF GETMAINED AREA.\n         PGSER R,FREE,A=(1),EA=(15) FREE PREVIOUSLY FIXED DAT-OFF PAGE.\n         LA    R0,VBZLEN         LOAD GETMAINED AREA SIZE.\n         LR    R1,R7             POINT TO THE GETMAINED AREA.\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL  FREE THE DAT-OFF PAGE.\n         B     BCHANGED\nVBPROTOK CLI   INCHARS,C'A'      AND REQUESTED?\n         BE    BCHNGAND          YES.\n         CLI   INCHARS,C'O'      OOR REQUESTED?\n         BE    BCHNGOOR          YES.\n         CLI   INCHARS,C'R'      REP REQUESTED?\n         BE    BCHNGREP          YES.\n         CLI   INCHARS,C'X'      XOR REQUESTED?\n         BE    BCHNGXOR          YES.\n         DC    H'0'\nBCHNGAND EX    R3,BCHNGNC        AND DATA INTO TARGET ADDRESS.\n         B     BCHANGED\nBCHNGOOR EX    R3,BCHNGOC        OR DATA INTO TARGET ADDRESS.\n         B     BCHANGED\nBCHNGREP EX    R3,BCHNGMVC       MOVE DATA INTO TARGET ADDRESS.\n         B     BCHANGED\nBCHNGXOR EX    R3,BCHNGXC        XOR DATA INTO TARGET ADDRESS.\nBCHANGED EX    R3,BCHNGSAV       COPY DATA REPLACEMENT.\n         MVC   VBPRY63I+23(41),BLANKS\n         LA    R1,VBPRY63I+23    POINT TO WTO DATA AREA.\n         LA    R15,SECWORKA+128  POINT TO NEW DATA.\n         LA    R0,1(,R3)         GET REPLACEMENT DATA LENGTH.\nWIM3LOOP UNPK  0(3,R1),0(2,R15)  UNPACK A BYTE.\n         TR    0(2,R1),HEX-C'0'  MAKE DISPLAYABLE.\n         MVI   2(R1),C''''       TRAILING QUOTE IN CASE LAST DATA BYTE.\n         LA    R1,2(,R1)         POINT TO NEXT HEX DIGIT PAIR LOCATION.\n         LA    R15,1(,R15)       POINT TO NEXT SOURCE BYTE.\n         BCT   R0,WIM3LOOP       PROCESS NEXT BYTE.\n         B     BFNDSTOP\nBFINDCLC CLC   0(0,R4),BFINDTXT                 <<< EXECUTED >>>\nBCHNGNC  NC    0(0,R4),BCHNGTXT                 <<< EXECUTED >>>\nBCHNGMVC MVC   0(0,R4),BCHNGTXT                 <<< EXECUTED >>>\nBCHNGOC  OC    0(0,R4),BCHNGTXT                 <<< EXECUTED >>>\nBCHNGXC  XC    0(0,R4),BCHNGTXT                 <<< EXECUTED >>>\nBCHNGSAV MVC   SECWORKA+128(0),0(R4)            <<< EXECUTED >>>\nBFNDLOOP DS    0H\n         LA    R4,1(,R4)         INCREMENT THE CURRENT ADDRESS.\n         ST    R4,BRWSPNTR       REMEMBER IT IN CASE OF ABEND.\n         TM    MODESW2,ATTN      NO, ATTENTION HIT?\n         BO    BFNDATTN          YES, INTERRUPT LOOP.\n         LTR   R4,R4             GONE THROUGH TOP OF ADDRESS SPACE?\n         BZ    BFNDSTOP          YES, SO STOP LOOPING.\n         EX    R3,BFINDCLC       FOUND REQUESTED DATA?\n         BNE   BFNDLOOP          NO, CONTINUE IN SEARCH LOOP.\nBFNDSTOP DS    0H\n         CLC   BRWSHOME,BRWSASID IN CROSS-MEMORY MODE?\n         BE    BFESWAP0          NO, DISABLE ESTAE NOW.\n         SAC   X'000'            YES, REVERT TO PRIMARY SPACE MODE.\n         LAM   A0,A15,SECWORKA+64 RESTORE ACCESS REGISTER VALUES.\n**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.\n**       MVC   WORK+2(2),BRWSHOME  GET SECONDARY ASID.\n**       MVC   WORK+6(2),BRWSHOME  GET PRIMARY ASID.\n**       LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.\n         LH    R1,BRWSHOME       GET PRIMARY ASID.\n         SSAR  R1                CANCEL SECONDARY ASID TRANSLATION.\n         L     R1,AXVALUE        GET SAVED AX NUMBER.\n         AXSET AX=(1)            SET AX = 0.\n         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.\n         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.\nBFESWAP0 ESTAE 0                 DISABLE TASK ABNORMAL EXIT.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BZ    VBWTOCHK          NO, FORGET MODESET, SHOW CURRENT DATA.\n         MODESET MF=(E,MDSTPROB) BACK TO TASK'S KEY AND PROBLEM STATE.\nVBWTOCHK CLI   WORK2,X'FA'       WAS IT A 'FIND' SUBCOMMAND?\n         BE    VIRTBRWS          YES, SHOW FOUND DATA OR RESTART PSW.\n         WTO   MF=(E,VBPRY61I)   SHOW DETAILS OF WHO IS CHANGING WHAT.\n         WTO   MF=(E,VBPRY62I)   SHOW THE ORIGINAL DATA.\n         WTO   MF=(E,VBPRY63I)   SHOW THE ORIGINAL DATA.\n         B     VIRTBRWS          SHOW RESULT OF ALTERATION.\nBRWSHEX  LA    R0,10             MAXIMUM OF 10 DIGITS TO CONVERT.\n         LA    R3,INCHARS+4      POINT TO FIRST ALLEGED NUMERIC CHAR.\n         SLR   R1,R1             ZERO WORK REGISTER.\n         SLR   R15,R15           ZERO ACCUMULATOR.\n         CLI   0(R3),C' '        A LEADING BLANK?\n         BNE   BDECLOOP          NO.\n         LA    R3,1(,R3)         YES, ALLOW ONE.\nBDECLOOP CLI   0(R3),C'.'        BLANK (OR DECIMAL POINT)?\n         BNH   BRWSCNVT          YES, REACHED END OF NUMBER.\n         CLI   0(R3),C'0'        INVALID?\n         BL    BDCMLERR          YES.\n         CLI   0(R3),C'9'        INVALID?\n         BH    BDCMLERR          YES.  (HOW WAS THAT DONE?)\n         NI    0(R3),X'0F'       NO, GET NUMERIC PART.\n         M     R14,TEN           PROMOTE ANY PREVIOUS DIGITS.\n         IC    R1,0(,R3)         LOAD THIS DIGIT.\n         ALR   R15,R1            GATE INTO ACCUMULATOR.\n         LA    R3,1(,R3)         POINT TO NEXT POSSIBLE DIGIT.\n         BCT   R0,BDECLOOP       PROCESS NEXT POSSIBLE DIGIT POSSIBLY.\n         B     BRWSCNVT          END OF NUMBER SO SHOW IT.\nBDCMLERR MVC   BEMSGTXT,NDMSG    LOAD \"NON-DECIMAL\" MESSAGE.\n         B     BROWSERR          DISPLAY THE ERROR MESSAGE.\nBRWSJUMP LA    R3,INCHARS        POINT TO INPUT STRING.\n         L     R4,VSBTRPTR       GET CURRENT TRACE TABLE ENTRY ADDRESS.\n         LA    R5,VSBTRACE       GET TRACE TABLE START ADDRESS.\n         LA    R6,VSBTREND       GET TRACE TABLE END ADDRESS.\nBJMPLOOP CLI   0(R3),C'<'        BACKWARD JUMP?\n         BE    BJMPBACK          YES.\n         CLI   0(R3),C'>'        FORWARD JUMP?\n         BNE   BJMPRETN          NO, SO RETURN.\n         LA    R4,4(,R4)         YES, POINT TO NEXT TRACE TABLE ENTRY.\n         CR    R4,R6             NOW PAST THE END OF THE TABLE?\n         BL    BJMPOKAY          NO.\n         LR    R4,R5             YES, WRAP-AROUND TO START.\nBJMPOKAY LA    R3,1(,R3)         POINT TO NEXT INPUT CHARACTER.\n         B     BJMPLOOP          GO PROCESS IT.\nBJMPBACK AHI   R4,-4             POINT TO PREVIOUS TRACE TABLE ENTRY.\n         CR    R4,R5             GONE PAST THE TRACE TABLE START?\n         BNL   BJMPOKAY          NO.\n         LA    R4,VSBTREND-4     YES, POINT TO LAST TRACE TABLE ENTRY.\n         B     BJMPOKAY\nBJMPRETN ST    R4,VSBTRPTR       SAVE NEW TRACE TABLE ENTRY ADDRESS.\n         MVC   BRWSPNTR,0(R4)    UPDATE DISPLAY ADDRESS.\n         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSLCCA CLC   INCHARS+4(2),BLANKS\n         BNE   CPULCCA           CPU NUMBER SPECIFIED.\n         MVC   BRWSPNTR,PSALCCAV COPY THE CURRENT LCCA POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nCPULCCA  LA    R0,1              MAXIMUM OF 1 HEX DIGIT IN AN CP ID.\n         BAS   R14,BROWSHEX      GET SPECIFIED CPU.\n         SLL   R15,2             CONVERT INTO LCCAVT INDEX.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTLCCAT       POINT TO THE LCCAVT.\n         DROP  R1                CVT.\n         LA    R1,0(15,R1)       POINT TO THE LCCAVT ENTRY.\n         ICM   R15,15,0(R1)      LOAD ADDRESS OF PARTICULAR LCCA.\n         BZ    BRWSERIS          ZERO, SELECTED CPU IS NOT ACTIVE.\n         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSLESS LA    R0,8              MAXIMUM OF 8 HEX DIGITS IN AN OFFSET.\n         BAS   R14,BROWSHEX      GET SPECIFIED OFFSET.\nBRWSLSRT L     R1,BRWSPNTR       GET CURRENT ADDRESS.\n         LA    R15,0(,R15)       ENSURE POSITIVE NUMBER.\n         SLR   R0,R0\n         ST    R0,BRWSPNTR       PREPARE FOR NEGATIVE.\n         SR    R1,R15            SUBTRACT OFFSET FROM CURRENT ADDRESS.\n         BM    VIRTBRWS          USE ZERO IF RESULT NEGATIVE.\n         ST    R1,BRWSPNTR       UPDATE BROWSE POINTER.\n         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSMNT  MVC   BEMSGTXT,AFMSG    LOAD \"AUTHORIZATION FAILURE\" MESSAGE.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'V'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         OC    OPTNATR,C'M'-C' '(R15)  GATE CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   BROWSERR          NO, CAN'T PERFORM THIS REQUEST.\n         L     R1,PSATOLD        POINT TO THE CURRENT TCB.\n         USING TCB,R1\n         ICM   R1,15,TCBJSCB     POINT TO THE CURRENT JSCB.\n         BZ    BRWSERIS          WHAT HAPPENED THERE?\n         DROP  R1                TCB.\n         USING IEZJSCB,R1\n         ICM   R4,15,JSCBPSCB    POINT TO THE TSO USER'S PSCB.\n         BZ    BRWSERAH          THERE IS NO PSCB.\n         DROP  R1                IEZJSCB.\n         USING PSCB,R4\n         CLC   BNMNTCHR,INCHARS  NMNT BROWSE SUBCOMMAND?\n         BE    BRWSNMNT          YES.\n         TM    PSCBATR1,PSCBVMNT ALREADY HAVE THE MOUNT ATTRIBUTE?\n         BO    BRWSERAH          YES.\n         MODESET MF=(E,MDSTSUP0)\n         OI    PSCBATR1,PSCBVMNT TURN ON MOUNT BIT.\n         MODESET MF=(E,MDSTPROB)\n         MVC   BEMSGTXT,MNMSG    LOAD \"MOUNT\" MESSAGE.\n         MVC   BEMSGTXT+2(7),0(R4)   LOAD TSO USERID.\nBRWSMESG MVI   BEMSGCLR,X'F4'    ENSURE MESSAGE IS IN GREEN.\n         L     R2,HEXDEC@        LOAD RESUMPTION ADDRESS.\n         B     TIDYBRWS          GO DISPLAY THE MESSAGE.\nBRWSNMNT TM    PSCBATR1,PSCBVMNT ALREADY HAVE THE NOMOUNT ATTRIBUTE?\n         BZ    BRWSERAH          YES.\n         MODESET MF=(E,MDSTSUP0)\n         NI    PSCBATR1,255-PSCBVMNT TURN OFF MOUNT BIT.\n         MODESET MF=(E,MDSTPROB)\n         MVC   BEMSGTXT,NMMSG    LOAD \"NOMOUNT\" MESSAGE.\n         MVC   BEMSGTXT+1(7),0(R4)   LOAD TSO USERID.\n         B     BRWSMESG          GO DISPLAY THE MESSAGE.\n         DROP  R4                PSCB.\n         USING ASCB,R4\n         USING OUCB,R5\nBRWSNSWP TM    OUCBSFL,OUCBNSW   NON-SWAPPABLE JOB?\n         BO    BRWSERAH          YES, ALREADY IS.\n         CLM   R4,7,PSAAOLD+1    CURRENT ADDRESS SPACE?\n         BE    NSWPSELF          YES, GO ISSUE SYSEVENT.\n         MVI   SECWORKA+4,C'D'   SET CODE FOR DONTSWAP.\n         MVI   SECWORKA+5,C'A'   SPECIFYING ASID.\n         MVC   SECWORKA+6(8),BLANKS   NO JOB NAME.\n         UNPK  SECWORKA+14(5),ASCBASID(3)\n         TR    SECWORKA+14(4),HEX-C'0'\n         LA    R1,SECWORKA+4\n         ST    R1,SECWORKA\n         LA    R1,SECWORKA\n         L     R15,=V(IMSWAP)\n         BASR  R14,R15\n         LTR   R15,R15\n         BZ    BNSWPSHO\n         B     BRWSERIS\nNSWPSELF MODESET MF=(E,MDSTSUP0)\n         LH    R0,ASCBASID\n         SYSEVENT DONTSWAP,ASID=(0)\n         MODESET MF=(E,MDSTPROB)\nBNSWPSHO MVC   BEMSGTXT,DSMSG    LOAD \"DON'T SWAP\" MESSAGE.\n         LA    R1,BEMSGTXT+5     POINT TO JOBNAME SLOT.\n         B     BSWAPWTO          GO DISPLAY THE MESSAGE.\n         DROP  R4,R5             ASCB, OUCB.\nBRWSERAH MVC   BEMSGTXT,AHMSG    LOAD \"ALREADY HAS STATUS\" MESSAGE.\n         B     BROWSERR          DISPLAY THE ERROR MESSAGE.\nBRWSPLUS LA    R0,8              MAXIMUM OF 8 HEX DIGITS IN AN OFFSET.\n         BAS   R14,BROWSHEX      GET SPECIFIED OFFSET.\nBRWSPLRT A     R15,BRWSPNTR      ADD OFFSET TO CURRENT ADDRESS.\n         LA    R15,0(,R15)       CONVERT TO 31-BIT ADDRESS FORMAT.\n         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.\n         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         USING ASCB,R4\nBRWSSWAP MVC   BEMSGTXT,AFMSG    LOAD \"AUTHORIZATION FAILURE\" MESSAGE.\n         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.\n         MVC   OPTNATR,C'J'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         OC    OPTNATR,C'V'-C' '(R15)  COPY CUSTOMIZABLE BYTE.\n         NI    OPTNATR,X'F8'     RESET INVALID BITS.\n         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.\n         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?\n         BNO   BROWSERR          NO, CAN'T PERFORM THIS REQUEST.\n         TM    52(R4),X'10'      V=R ADDRESS SPACE?\n         BO    BROWSERR          YES, CAN'T MAKE IT SWAPPABLE.\n         CLC   =H'1',ASCBASID    MASTER ADDRESS SPACE?\n         BNL   BROWSERR          YES, LEAVE IT.\n         ICM   R5,15,ASCBOUCB    LOAD OUCB ADDRESS.\n         BZ    BRWSERIS          ADDRESS SPACE HAS NO OUCB.\n         USING OUCB,R5\n         CLC   BNSWPCHR,INCHARS  REQUESTED NON-SWAPPABLE?\n         BE    BRWSNSWP          YES.\n         TM    OUCBSFL,OUCBNSW   SWAPPABLE JOB?\n         BZ    BRWSERAH          YES, ALREADY IS.\n         CLM   R4,7,PSAAOLD+1    CURRENT ADDRESS SPACE?\n         BE    SWAPSELF          YES, GO ISSUE SYSEVENT.\n         MVI   SECWORKA+4,C'S'   SET CODE FOR OKSWAP.\n         MVI   SECWORKA+5,C'A'   SPECIFYING ASID.\n         MVC   SECWORKA+6(8),BLANKS   NO JOB NAME.\n         UNPK  SECWORKA+14(5),ASCBASID(3)\n         TR    SECWORKA+14(4),HEX-C'0'\n         LA    R1,SECWORKA+4\n         ST    R1,SECWORKA\n         LA    R1,SECWORKA\n         L     R15,=V(IMSWAP)\n         BASR  R14,R15\n         LTR   R15,R15\n         BZ    BSWAPSHO\n         B     BRWSERIS\nSWAPSELF MODESET MF=(E,MDSTSUP0)\n         LH    R0,ASCBASID\n         SYSEVENT OKSWAP,ASID=(0)\n         MODESET MF=(E,MDSTPROB)\nBSWAPSHO MVC   BEMSGTXT,SWMSG    LOAD \"SWAPPABLE\" MESSAGE.\n         LA    R1,BEMSGTXT+7     POINT TO JOBNAME SLOT.\nBSWAPWTO MVC   0(8,R1),OUCBTRXN  LOAD THE JOB NAME (TRXNAME).\n         CLC   OUCBSUBN,=CL4'TSO '   TSO USER?\n         BNE   BRWSMWTO          NO, GO DISPLAY THE MESSAGE.\n         MVC   0(8,R1),OUCBUSRD  LOAD THE USERID.\n         B     BRWSMWTO          GO DISPLAY THE MESSAGE.\n         DROP  R4,R5             ASCB, OUCB.\nBRWSTCAS L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         MVC   BRWSPNTR,CVTTCASP COPY TCAS TABLE POINTER.\n         DROP  R1                CVT.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSTCB  MVC   BRWSPNTR,PSATOLD  COPY CURRENT TCB POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSTRAC MVC   HEADING,HEADVSBT  INDICATE TRACE DISPLAY IN HEADING.\n         LA    R3,VSBTRACE       POINT TO TRACE TABLE.\n         LR    R4,R3             COPY DISPLAY ORIGIN.\n         OI    BRWSPNTR,X'80'    TURN ON TRACE TABLE DISPLAY FLAG.\n         LA    R2,BUFFER         RESET BUFFER POINTER.\n         A     R2,VBCOLS         ADD SCREEN WIDTH.\n         AHI   R2,-80            POINT TO FIRST DETAIL LINE.\n         LA    R0,16             SIXTEEN DETAIL DISPLAY LINES.\n         B     BRWSLOOP          GO DISPLAY TRACE TABLE.\nBRWSUCB  LA    R0,4              MAXIMUM OF 4 HEX DIGITS IN DEVICE NO.\n         BAS   R14,BROWSHEX      GET SPECIFIED DEVICE NUMBER.\n         XC    WORK,WORK         CLEAR UCB ADDRESS POINTERS.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         TM    CVTOSLVL,CVTUCBSV UCB SERVICES AVAILABLE?\n         BNO   BOLDUCBS          NO, CHECK FIRST UCB ON STATIC CHAIN.\n         TM    MODESW2,AUTH      APF AUTHORIZED?\n         BO    BRWSUCBA          YES, USED AUTHORIZED SERVICE.\n         L     R5,CVTIXAVL       NO, POINT TO THE IOCOM.\n         USING IOCOM,R5\n         L     R5,IOCIOVTP       POINT TO THE IOVT.\n         DROP  R5                IOCOM.\n         L     R5,8(,R5)         POINT TO THE UCB LOOK-UP TABLE.\n         L     R0,16(,R5)        GET THE TOTAL UCB COUNT.\nBNEWUCLP CLM   R15,3,132(R5)     CORRECT DEVICE NUMBER?\n         BE    BNEWUCOK          YES, LOAD UCB ADDRESS.\n         LA    R5,12(,R5)        NO, POINT TO NEXT UCB ENTRY.\n         BCT   R0,BNEWUCLP       GO TRY IT.\n         B     BRWSERIS          NO MORE UCB ENTRIES.\n         DROP  R1                CVT.\nBNEWUCOK L     R1,132+8(,R5)     LOAD THE UCB ADDRESS.\n         B     BUNITCMD          NOW GO CHECK ON REQUEST.\nBRWSUCBA STH   R15,WORK2+4       YES, STORE THE REQUIRED DEVICE NUMBER.\n         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.\n         UCBLOOK DEVN=WORK2+4,   NOMINATE DEVICE NUMBER LOCATION.      +\n               UCBPTR=WORK,      NOMINATE UCB ADDRESS SAVE AREA.       +\n               UCBPXPTR=WORK+4,  NOMINATE UCB PREFIX ADDRESS SAVE AREA.+\n               LOC=ANY,          SEARCH ALL UCB LOCATIONS.             +\n               NOPIN,            DO NOT PIN ANY UCB.                   +\n               DYNAMIC=YES,      INCLUDE ALL UCB TYPES.                +\n               RANGE=ALL,        INCLUDE ALL UCB NUMBERS.              +\n               RETCODE=SAVE+16,  SAVE RETURN CODE FROM REGISTER 15.    +\n               MF=(E,UCBLKLS,COMPLETE)\n         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM PROGRAM STATE.\n         ICM   R15,15,SAVE+16    WAS THE UCB FOUND?\n         BNZ   BRWSERIS          NO, SO IT DOESN'T EXIST.\n         L     R1,WORK           YES, POINT TO THE UCB.\n         CLC   INCHARS(4),BUCBCHR     WAS UCB REQUESTED?\n         BE    BUNITCMD          YES, DISPLAY DATA FROM NEW ADDRESS.\n         L     R1,WORK+4         NO, POINT TO THE UCB PREFIX.\n         B     BRWSCMB           NOW GO FIND THE CMB.\n         USING CVT,R1\nBOLDUCBS L     R1,CVTUCBA        POINT TO FIRST UCB.\n         B     BFRSTUCB          FIRST TIME THROUGH THE LOOP.\n         DROP  R1                CVT.\n         USING UCBOB,R1\nBNEXTUCB ICM   R1,15,UCBNXUCB    GET NEXT UCB ADDRESS.\n         BZ    BRWSERIS          NO MORE UCB ENTRIES.\nBFRSTUCB CLM   R15,3,UCBCHAN     CORRECT DEVICE NUMBER?\n         BNE   BNEXTUCB          NO, TRY NEXT UCB.\nBUNITCMD ST    R1,BRWSPNTR       SAVE UPDATED VALUE.\n         CLC   INCHARS(4),BUCBCHR     WAS UCB REQUESTED?\n         BE    VBASBRWS          YES, DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R1                UCBOB.\n         AHI   R1,-48            NO, POINT TO UCB PREFIX.\n         USING UCBPDATA,R1\nBRWSCMB  TM    UCBPMCW1+1,UCBMCMB ARE MEASUREMENTS BEING COLLECTED?\n         BZ    BRWSERIS          NO, NOT FOR THIS DEVICE.\n         ICM   R15,3,UCBMBI      GET MEASUREMENT BLOCK INDEX.\n         DROP  R1                UCBPDATA.\n         L     R1,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.\n         USING CMCT,R1\n         L     R1,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.\n         DROP  R1                CMCT.\n         SLL   R15,5             GET ENTRY OFFSET INTO CMB.\n         ALR   R1,R15            POINT TO THIS DEVICE'S ENTRY.\n         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         SPACE\nBROWSHEX LA    R3,INCHARS+4      POINT TO FIRST ALLEGED HEX CHARACTER.\nBRWSHEX2 SLR   R1,R1             ZERO WORK REGISTER.\n         SLR   R15,R15           ZERO ACCUMULATOR.\n         CLI   0(R3),C' '        A LEADING BLANK?\n         BNE   BHEXLOOP          NO.\n         LA    R3,1(,R3)         YES, ALLOW ONE.\nBHEXLOOP CLI   0(R3),C'A'        BLANK OR INVALID?\n         BLR   R14               YES, ASSUME END OF HEX AND RETURN.\n         CLI   0(R3),C'9'        INVALID?\n         BH    BRWSERIS          YES.  (HOW WAS THAT DONE?)\n         CLI   0(R3),C'G'        VALID?\n         BL    BHEXALFA          YES, ALPHABETIC HEX CHARACTER.\n         CLI   0(R3),C'0'        INVALID?\n         BL    BRWSERIS          YES.\n         NI    0(R3),X'0F'       NO, GET NUMERIC PART.\n         B     BHEXNMBR          NOW HAVE HEX DIGIT'S VALUE.\nBHEXALFA TR    0(1,R3),BALFAHEX-C'A'\nBHEXNMBR SLL   R15,4             PROMOTE ANY PREVIOUS DIGITS.\n         IC    R1,0(,R3)         LOAD THIS DIGIT.\n         OR    R15,R1            GATE INTO ACCUMULATOR.\n         LA    R3,1(,R3)         POINT TO NEXT POSSIBLE DIGIT.\n         BCT   R0,BHEXLOOP       PROCESS NEXT POSSIBLE DIGIT POSSIBLY.\n         BR    R14               FORCE RETURN AFTER MAXIMUM DIGITS.\n         SPACE\nBROWSEUP CLI   VCANDBAR,C'B'     IN BROWSE MODE?\n         BNE   CMDSCANV          NO, TREAT IT AS ENTER.\n         LA    R0,256\n         CLI   COLUMNS+3,80      80-COLUMN SCREEN?\n         BNE   VBUPOKAY          NO.\n         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?\n         BL    VBUPOKAY          NO.\n         LA    R0,512\nVBUPOKAY L     R1,BRWSPNTR       GET CURRENT BROWSE ADDRESS.\n         SR    R1,R0             SUBTRACT FROM IT.\n         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.\n         BNM   VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         SLR   R0,R0             ZERO IT IF NEGATIVE.\n         ST    R0,BRWSPNTR       CAN'T SCROLL UP PAST ZERO.\n         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBROWSEDN CLI   VCANDBAR,C'B'     IN BROWSE MODE?\n         BNE   CMDSCANV          NO, TREAT IT AS ENTER.\n         LA    R1,256            YES.\n         CLI   COLUMNS+3,80      80-COLUMN SCREEN?\n         BNE   VBDNOKAY          NO.\n         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?\n         BL    VBDNOKAY          NO.\n         LA    R1,512            YES.\nVBDNOKAY A     R1,BRWSPNTR       GET CURRENT BROWSE ADDRESS.\n         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.\n         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.\nGIVEHLPV MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.\n         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.\n         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.\n         B     PUTSCRNV          GO DISPLAY HELP PANEL.\n         SPACE\nPUTPRTN2 DS    0H                LOW-ADDRESS, SIZE ENTRY POINT.\n         L     R1,0(,R3)         GET LOWEST ADDRESS OF AREA\n         ST    R1,VWORDONE       AND SAVE IT.\n         A     R1,4(,R3)         ADD SIZE OF AREA.\n         BZ    NULLAREA          VIRTUAL STORAGE AREA NOT THERE.\n         BCTR  R1,0              GET HIGHEST ADDRESS OF AREA\nNULLAREA ST    R1,VWORDTWO       AND SAVE IT.\n         LA    R3,VWORDONE       POINT TO PARAMETER LIST.\nPUTPRTN1 DS    0H                LOW-ADDRESS, HIGH ADDRESS ENTRY POINT.\n         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    CLEAR DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-80(41,R2),0(R4) LOAD THIS AREA'S DESCRIPTION.\n         LA    R4,41(,R4)        POINT TO THE NEXT AREA'S NAME.\n         MVC   LL-4(4,R2),0(R3)  SAVE ADDRESS IN DISPLAY LINE FOR SORT.\n         UNPK  52(9,R2),0(5,R3)  DISPLAY LOW ADDRESS OF AREA IN HEX.\n         TR    52(8,R2),HEX-C'0'\n         MVI   60(R2),C' '\n         UNPK  63(9,R2),4(5,R3)  DISPLAY TOP ADDRESS OF AREA IN HEX.\n         TR    63(8,R2),HEX-C'0'\n         MVI   71(R2),C' '\n         L     R1,4(,R3)         OBTAIN TOP ADDRESS OF AREA.\n         S     R1,0(,R3)         SUBTRACT LOW ADDRESS OF AREA.\n         BNPR  R9                DON'T REPORT NON-EXISTENT AREA.\n         LA    R1,1024(,R1)      GET SIZE OF AREA PLUS 1023.\n         SRL   R1,10             ROUND SIZE TO NEXT HIGHEST KILOBYTE.\n         CVD   R1,WORK\n         MVC   74(8,R2),ED7Z     SHOW SIZE OF PARTITION IN DECIMAL.\n         ED    74(8,R2),WORK+4\n         MVI   82(R2),C'K'       INDICATE KILOBYTE (1024B) UNITS.\n         TR    LL-79(75,R2),XLATETBL\n         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   GETSCRNV          IF YES, THEN FORGET SUMMARY LINE.\n         DROP  R15               WNDWMNGR.\n         LA    R1,1\n         A     R1,VWORDCNT       INCREMENT LINES-TO-BE-SORTED COUNT.\n         ST    R1,VWORDCNT       SAVE IT.\n         BR    R9                DETAIL LINE NOW READY FOR DISPLAY.\n         SPACE\nVADDLINE TR    LL-79(79,R2),XLATETBL\nVVSMLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.\n         USING WNDWMNGR,R15\n         LA    R0,1\n         A     R0,WINLINES       INCREMENT LINE COUNTER.\n         ST    R0,WINLINES\n         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.\n         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.\n         BNL   GETSCRNV          IF YES, THEN FORGET SUMMARY LINE.\n         BR    R14\n         DROP  R15               WNDWMNGR.\n         SPACE\n         DROP  R10,R11,R8        VIRTSTOR.\n         SPACE\nESTAEONV ESTAE VSBABEND,PARAM=RETRYVSB,MF=L\n         TITLE 'VIRTUAL STORAGE MONITOR - TASK ABNORMAL END EXIT'\n         USING VSBABEND,R15\nVSBABEND CHI   R0,12             ENTRY CODE 12?\n         BE    ENTRY12V          YES, ISSUE MESSAGE & PERCOLATE ABEND.\n         SPACE\n         STM   R14,R12,12(R13)   NO, SAVE REGISTERS IN SUPPLIED AREA.\n         DROP  R15               VSBABEND.\n         USING VSBABEND,R10\n         LR    R10,R15           LOAD EXIT BASE REGISTER.\n         USING SDWA,R3\n         LR    R3,R1             POINT TO SYSTEM DIAGNOSTIC WORK AREA.\n         MVC   VSBADPSW,SDWAEC1  COPY THE FAILING PSW.\n         MVC   VWORDONE,SDWAABCC      SAVE THE ABEND CODE.\n         MVC   VWORDCNT(2),SDWAINC1   SAVE THE INTERRUPT CODE.\n         CLI   SDWACMPC,X'0C'    ABEND S0CX?\n         BE    GOTVCODE          YES, INTERRUPT CODE IS RELEVANT.\n         CLI   SDWACMPC,X'0D'    ABEND S0DX?\n         BE    GOTVCODE          YES, INTERRUPT CODE IS RELEVANT.\n         L     R1,VSDWASAV       POINT TO A SAVE AREA.\n         MVC   0(256,R1),0(R3)   COPY THE SDWA.\n         MVC   256(256,R1),256(R3)\n         ST    R1,BRWSPNTR       DISPLAY THE SDWA.\n         MVC   VWORDCNT(2),SDWAGR15+2    SAVE THE REASON CODE.\n         ICM   R15,15,SDWAXPAD   POINT TO POINTERS EXTENSION.\n         BZ    GOTVCODE          CATER FOR ZERO POINTER.\n         USING SDWAPTRS,R15\n         ICM   R15,15,SDWASRVP   POINT TO COMPONENT EXTENSION.\n         DROP  R15               SDWAPTRS.\n         BZ    GOTVCODE          CATER FOR ZERO POINTER.\n         USING SDWARC1,R15\n         ICM   R0,15,SDWACRC     ANY REASON CODE SUPPLIED?\n         BZ    GOTVCODE          NO.\n         MVC   VWORDCNT(2),SDWACRC+2     SAVE THE REASON CODE.\n         DROP  R15               SDWARC1.\nGOTVCODE L     R12,SDWAPARM      LOAD THE RETRY ADDRESS.\n         SETRP WKAREA=(3),REGS=(14,12),DUMP=NO,RC=4,                   +\n               RETADDR=(12),RETREGS=YES,FRESDWA=YES\n         DROP  R3                SDWA.\n         SPACE\nENTRY12V LR    R10,R15           LOAD EXIT BASE REGISTER.\n         LR    R5,R14            SAVE RETURN ADDRESS.\n         LA    R1,ESTAVMSG       POINT TO ESTAE EXIT NOTIFY MESSAGE.\n         LA    R0,L'ESTAVMSG     GET THE LENGTH OF THIS MESSAGE.\n         TPUT  (1),(0),R         DISPLAY THE MESSAGE ON THE SCREEN.\n         LR    R14,R5            RESTORE RETURN ADDRESS.\n         SLR   R15,R15           CONTINUE WITH ABEND (PERCOLATE).\n         BR    R14               EXIT FROM EXIT.\n         DROP  R10               VSBABEND.\n         TITLE 'VIRTUAL STORAGE MONITOR - VARIABLES AND CONSTANTS'\nVWORDONE DC    F'0'              PARAMETERS FOR PUTPRTN# ROUTINE.\nVWORDTWO DC    F'0'\nVWORDCNT DC    F'0'              COUNT OF VIRTUAL STORAGE AREAS LISTED.\nVLOWRLOW DC    F'0'              ACCUMULATOR FOR CSA BACKED BELOW.\n         DC    F'0'              ACCUMULATOR FOR CSA BACKED <2GB.\n         DC    F'0'              ACCUMULATOR FOR CSA BACKED ANYWHERE.\n         DC    F'0'              ACCUMULATOR FOR ECSA.\n         DC    F'0'              ACCUMULATOR FOR ECSA BACKED ANYWHERE.\nVALLRALL DC    F'0'              ACCUMULATOR FOR ALL USED CSA PAGES.\nVSDWASAV DC    F'0'              SDWA SAVE AREA ADDRESS.\nBRWSPNTR DC    F'0'              VIRTUAL STORAGE PEEK ADDRESS.\n         DC    CL8'BAD PSW:'\nVSBADPSW DC    XL8'00'\nVSBTRPTR DC    F'0'              POINTER TO CURRENT TRACE TABLE ENTRY.\nVSREGS   EQU   *,8               GETMAIN REGISTERS SAVE AREA.\nVSREG0   DC    F'16384'\nVSREG1   DC    F'0'\nBRWSFLAG DC    AL1(10),C'>',AL1(15),C'<',AL1(15),C'>',AL1(20),C'<'\n         DC    AL1(21),C'>',AL1(26),C'<',AL1(26),C'>',AL1(31),C'<'\n         DC    AL1(33),C'>',AL1(38),C'<',AL1(38),C'>',AL1(43),C'<'\n         DC    AL1(44),C'>',AL1(49),C'<',AL1(49),C'>',AL1(54),C'<'\nBRWSHOME DC    H'0'              PRIMARY ADDRESS SPACE ID.\nBRWSASID DC    H'0'              SECONDARY ADDRESS SPACE ID.\nBRWSISQN DC    F'0'              SECONDARY ASID INSTANCE NUMBER.\nBFINDLEN DC    F'-1'             LENGTH CODE OF SEARCH DATA.\nBFINDTXT DC    XL20'00'          DATA TO BE SEARCHED FOR.\nBCHNGLEN DC    F'-1'             LENGTH CODE OF REPLACEMENT DATA.\nBCHNGTXT DC    XL20'00'          REPLACEMENT DATA.\nBRWSPCTB DS    0F                ADDRESS SPECIFICATION SUBROUTINE TABLE\n         DC    CL4'    ',A(VIRTBRWS)\n         DC    CL4'?   ',A(BRWSTRAC)\n         DC    CL4'A   ',A(BROWSEF)\n         DC    CL4'ADDR',A(BRWSADDR)\n         DC    CL4'AND ',A(BRWSCHNG)\nBASCBCHR DC    CL4'ASCB',A(BRWSASCB)\nBASIDCHR DC    CL4'ASID',A(BRWSASCB)\n         DC    CL4'ASMV',A(BRWSASMV)\nBASSBCHR DC    CL4'ASSB',A(BRWSASCB)\nBASTECHR DC    CL4'ASTE',A(BRWSASCB)\n         DC    CL4'ASVT',A(BRWSASVT)\n         DC    CL4'ASXB',A(BRWSASXB)\nBCDECHR  DC    CL4'CDE ',A(BRWSLPDE)\n         DC    CL4'CMB ',A(BRWSUCB)\n         DC    CL4'CMCT',A(BRWSCMCT)\nBCNCLCHR DC    CL4'CNCL',A(BRWSASCB)\nBCSCBCHR DC    CL4'CSCB',A(BRWSASCB)\n         DC    CL4'CSD ',A(BRWSCSD)\n         DC    CL4'CVT ',A(BRWSCVT)\n         DC    CL4'DEC ',A(BRWSDEC)\n         DC    CL4'ECVT',A(BRWSECVT)\n         DC    CL4'F   ',A(BROWSEF)\nBFINDCHR DC    CL4'FIND',A(BRWSFIND)\n         DC    CL4'GDA ',A(BRWSGDA)\n         DC    CL4'HEX ',A(BRWSHEX)\n         DC    CL4'JSAB',A(BRWSASCB)\n         DC    CL4'JSCB',A(BRWSJSCB)\n         DC    CL4'LCCA',A(BRWSLCCA)\n         DC    CL4'LESS',A(BRWSLESS)\nBLPAQCHR DC    CL4'LPAQ',A(BRWSLPDE)\nBLPDECHR DC    CL4'LPDE',A(BRWSLPDE)\n         DC    CL4'MNT ',A(BRWSMNT)\nBNCANCHR DC    CL4'NCAN',A(BRWSASCB)\nBNMNTCHR DC    CL4'NMNT',A(BRWSMNT)\nBNSWPCHR DC    CL4'NSWP',A(BRWSASCB)\n         DC    CL4'OOR ',A(BRWSCHNG)\nBOUCBCHR DC    CL4'OUCB',A(BRWSASCB)\nBOUXBCHR DC    CL4'OUXB',A(BRWSASCB)\n         DC    CL4'PART',A(BRWSPART)\n         DC    CL4'PCCA',A(BRWSPCCA)\n         DC    CL4'PLPA',A(BRWSLPDE)\n         DC    CL4'PLUS',A(BRWSPLUS)\n         DC    CL4'PSA ',A(BRWSPSA)\n         DC    CL4'PSCB',A(BRWSPSCB)\n         DC    CL4'PVT ',A(BRWSPVT)\nBRAXCHR  DC    CL4'RAX ',A(BRWSASCB)\n         DC    CL4'RCE ',A(BRWSRCE)\n         DC    CL4'REP ',A(BRWSCHNG)\n         DC    CL4'RIT ',A(BRWSRIT)\n         DC    CL4'RMCT',A(BRWSRMCT)\n         DC    CL4'SART',A(BRWSSART)\n         DC    CL4'SMCA',A(BRWSSMCA)\n         DC    CL4'SVC ',A(BRWSSVC)\n         DC    CL4'SVCE',A(BRWSSVC)\nBSWAPCHR DC    CL4'SWAP',A(BRWSASCB)\n         DC    CL4'TCAS',A(BRWSTCAS)\n         DC    CL4'TCB ',A(BRWSTCB)\n         DC    CL4'TCT ',A(BRWSTCT)\n         DC    CL4'TRAC',A(BRWSTRAC)\nBUCBCHR  DC    CL4'UCB ',A(BRWSUCB)\n         DC    CL4'XOR ',A(BRWSCHNG)\nBRWSPEC# EQU   (*-BRWSPCTB)/8\nBRWSDSAD DC    A(BRWSDSPC)       DATASPACE HANDLING ROUTINE ADDRESS.\nVBDSPRMS DC    A(VBDSFUNC)       PLIST FOR IMDSLIST ROUTINE.\nVBDSFUNC DC    CL4'DS  '         FUNCTION REQUEST TYPE - 'LD' OR 'DS'.\nVBDSADDR DC    XL4'00'           ASID OR STORAGE START ADDRESS.\nVBDSTOKN DC    XL8'00'           DATASPACE STOKEN.\nVBDSPNTR DC    A(0)              RETURNED DATA AREA.\nVBDSNAME DC    CL8' '            DATASPACE NAME.\nHEXDEC@  DS    A(0)              HEX/DEC RESUME BUFFER ADDRESS.\nVBLINES  DC    F'0'              AVAILABLE SCREEN LINES.\nVBCOLS   DC    F'0'              AVAILABLE SCREEN COLUMNS.\nVBPRY61I WTO   'PRY601I TSOUSER HAS ALTERED ADDRESS 12345678 IN ASID 12+\n               34 ',ROUTCDE=(9),MF=L\nVBPRY62I WTO   'PRY602I DATA WAS X''12345678901234567890123456789012345+\n               67890''',ROUTCDE=(9),MF=L\nVBPRY63I WTO   'PRY603I DATA IS  X''12345678901234567890123456789012345+\n               67890''',ROUTCDE=(9),MF=L\nVBPRY64I WTO   'PRY604I 123456789012345678901234567890123456789 - BY TS+\n               OUSER ',ROUTCDE=(1,2),MF=L\nHEADINGV DC    CL79'     VIRTUAL STORAGE AREA NAME             LOW-ADDR+\n                  TOP-ADDR       SIZE      '\nHEADGDTL DC    CL79'   SPID  KEY    ADDRESS     SIZE                << +\n               ??? SUBPOOL DETAILS >>      '\nHEADGCSA DC    CL79'SPID  KEY    V24,R24    V24,R31    V24,R64    V31,R+\n               31    V31,R64      TOTAL    '\nHEADBRWS DC    CL71'         VIRTUAL STORAGE DATA AT ADDRESS ???????? I+\n               N ASID ????         '\nHEADVSBT DC    CL71'         VIRTUAL STORAGE BROWSE TRACE TABLE DISPLAY+\n                                   '\nESTAVMSG DC    C'IMP/XA ESTAE EXIT V - ENTRY CODE 12 - NO VIRTUAL STORA+\n               GE FOR RTM SDWA'\nVCANDBAR DC    C' '                DISPLAY MODE FOR THIS MONITOR.\nVPARTFLG DC    C' '                STORAGE PARTITION FLAG.\nCSASPIDS DC    C'227228231241'     COMMON SERVICE AREA SUBPOOLS.\nSPIDSEND EQU   *\nS0C4     DC    X'0C40'\nBALFAHEX DC    X'0A0B0C0D0E0F'     ALPHABETIC HEX VALUES.\nVKEYPROT DC    X'07'\nHXDECDEC DC    CL12' '\n         DC    C' = X'''\nHXDECHEX DC    CL9' '\nHXDECLEN EQU   *-HXDECDEC\nVBPROMPT DC    C'ENTER NEW ADDRESS SPECIFICATION ==>',X'24'\n         DCS   IC\nVBECHO   DC    XL20'00'\n         DC    X'26'\nVBPRMPTL EQU   *-VBPROMPT\nISMSG    DC    CL39'     INVALID ADDRESS SPECIFICATION     '\nNDMSG    DC    CL39'   NON-DECIMAL CHARACTER ENCOUNTERED   '\nEDMSG    DC    CL39'   FIND/ALTER INVALID FOR DATASPACES   '\nTQMSG    DC    CL39'   EXPECTED TRAILING QUOTE NOT FOUND   '\nOXMSG    DC    CL39'  HEX DIGIT COUNT IS NOT 2, 4, 6 OR 8  '\nMDMSG    DC    CL39'   DATA TO BE PROCESSED NOT SUPPLIED   '\nAHMSG    DC    CL39'  JOB OR USER ALREADY HAS THAT STATUS  '\nMNMSG    DC    CL39'  TSOUSER NOW HAS THE MOUNT ATTRIBUTE  '\nNMMSG    DC    CL39' TSOUSER NOW HAS THE NOMOUNT ATTRIBUTE '\nCNMSG    DC    CL39'      JOB-NAME IS NOW CANCELLABLE      '\nNCMSG    DC    CL39'    JOB-NAME IS NOW NON-CANCELLABLE    '\nSWMSG    DC    CL39'       JOB-NAME IS NOW SWAPPABLE       '\nDSMSG    DC    CL39'     JOB-NAME IS NOW NON-SWAPPABLE     '\nPBMSG    DC    CL39'RNUC/PLPA ZAP MUST NOT CROSS PAGE BNDRY'\nAFMSG    DC    CL39'      AUTHORIZATION CHECK FAILURE      '\nBEMSGCLR DC    X'00'               \"BROWSE ERROR\" MESSAGE COLOUR.\nBEMSGTXT DC    CL39' '             \"BROWSE ERROR\" MESSAGE TEXT.\n         SPACE\n         LTORG\n         SPACE\nPARTITNS DS    0X     VIRTUAL STORAGE AREA NAME AND COLOUR CODE TABLE.\n         DC    CL41'7BLDL LIST          (IMPOSSIBLE WITH LLA)'\n         DC    CL41'6MLPA           (MODIFIED LINK PACK AREA)'\n         DC    CL41'2FLPA              (FIXED LINK PACK AREA)'\n         DC    CL41'6PLPA           (PAGEABLE LINK PACK AREA)'\n         DC    CL41'3NUC                 (READ/WRITE NUCLEUS)'\n         DC    CL41'2RNUC                 (READ-ONLY NUCLEUS)'\n         DC    CL41'3ENUC       (EXTENDED READ/WRITE NUCLEUS)'\n         DC    CL41'6EPLPA (EXTENDED PAGEABLE LINK PACK AREA)'\n         DC    CL41'2EFLPA    (EXTENDED FIXED LINK PACK AREA)'\n         DC    CL41'6EMLPA (EXTENDED MODIFIED LINK PACK AREA)'\n         DC    CL41'1CSA                (COMMON SERVICE AREA)'\n         DC    CL41'1ECSA      (EXTENDED COMMON SERVICE AREA)'\n         DC    CL41'5SQA                  (SYSTEM QUEUE AREA)'\n         DC    CL41'5ESQA        (EXTENDED SYSTEM QUEUE AREA)'\n         DC    CL41'4ADDRESS SPACE REGION    (INCLUDING LSQA)'\n         DC    CL41'4EXTENDED ADDR SPACE REGION (INCL. ELSQA)'\n         DC    CL41'4SYSTEM REGION  (WITHIN THE PRIVATE AREA)'\n         DC    CL41'4EXTENDED SYSTEM REGION    (IN EPVT AREA)'\n         DC    CL41'7PSA                 (PREFIXED SAVE AREA)'\n         SPACE\n         DS    0H\n         TITLE 'VIRTUAL STORAGE MONITOR SUBROUTINE'\n         USING VIRTSTOR,R11,R10,R8\n         USING VOPTSHOW,R7\nVOPTSHOW L     R1,INITADDR       GET ADDRESSABILITY TO SCRNHDR.\n         USING INITIAL,R1        RESTORE EXPECTED HEADING FORMAT.\n         MVC   HOME(HDRLEN),SCRNHDR\n         DROP  R1                INITIAL.\n         MVC   HEADING,HEADOPTV\n         LA    R2,BUFFER-LL      POINT TO BEFORE FIRST DETAIL LINE.\n         BAS   R14,VOMTLINE      POINT TO FIRST DETAIL LINE.\n         BAS   R14,VOMTLINE      ADD A BLANK LINE.\n         MVC   LL-60(26,R2),=C'B - BROWSE VIRTUAL STORAGE'\n         BAS   R14,VOPTLINE\n         BAS   R14,VOMTLINE      ADD A BLANK LINE.\n         MVC   LL-60(21,R2),=C'C - CSA USAGE SUMMARY'\n         BAS   R14,VOPTLINE\n         BAS   R14,VOMTLINE      ADD A BLANK LINE.\n         MVC   LL-60(21,R2),=C'D - CSA USAGE DETAILS'\n         BAS   R14,VOPTLINE\n         BAS   R14,VOMTLINE      ADD A BLANK LINE.\n         MVC   LL-60(22,R2),=C'L - LSQA USAGE DETAILS'\n         BAS   R14,VOPTLINE\n         BAS   R14,VOMTLINE      ADD A BLANK LINE.\n         MVC   LL-60(33,R2),=C'P - PRIVATE STORAGE USAGE DETAILS'\n         BAS   R14,VOPTLINE\n         BAS   R14,VOMTLINE      ADD A BLANK LINE.\n         MVC   LL-60(21,R2),=C'S - SQA USAGE DETAILS'\n         BAS   R14,VOPTLINE\n         BAS   R14,VOMTLINE      ADD A BLANK LINE.\n         MVC   LL-60(30,R2),=C'V - VIRTUAL STORAGE PARTITIONS'\n         BAS   R14,VOPTLINE\n         BAS   R14,VOMTLINE      ADD A BLANK LINE.\n         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.\n         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.\n         LA    R2,4(,R2)         ADJUST BUFFER POINTER.\n         B     TIDYVOPT          FINISH UP AND DISPLAY.\n         SPACE\nVOPTLINE MVI   LL-61(R2),X'26'   YELLOW FOR SUB-OPTION SELECTION CODE.\n         MVI   LL-59(R2),X'25'   BACK TO TURQUOISE FOR REST OF LINE.\nVOMTLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.\n         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.\n         MVI   LL-79(R2),C' '    CLEAR DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         BR    R14\n         DROP  R7                VOPTSHOW.\nHEADOPTV DC    CL71'           VIRTUAL STORAGE MONITOR SUB-OPTION SELEC+\n               TION LIST           '\n         LTORG\n         DS    0H\n         TITLE 'EXTRA VIRTUAL STORAGE BROWSE SUBROUTINES'\n         USING QSRCHCSA,R15\nQSRCHCSA STM   R14,R12,12(R13)   SAVE REGISTERS.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R3,CVTGDA         POINT TO THE GLOBAL DATA AREA.\n         DROP  R3                CVT.\n         USING GDA,R3\n         C     R5,GDACSA         TARGET ADDRESS BELOW CSA?\n         BL    QSCSAXIT          YES, SKIP CSA SCAN.\n         L     R0,GDAECSA        POINT TO ECSA.\n         A     R0,GDAECSAS       POINT PAST ECSA.\n         CR    R5,R0             TARGET ADDRESS ABOVE ECSA?\n         BNL   QSCSAXIT          YES, SKIP CSA SCAN.\n         L     R3,GDASPT         POINT TO THE CSA SUBPOOL TABLE.\n         DROP  R3                GDA.\n         USING SPT,R3\n         LA    R3,SPTNTRY        POINT TO FIRST SUBPOOL ENTRY.\n         DROP  R3                SPT.\n         LA    R4,CSASPIDS       POINT TO CSA SUBPOOL IDS LIST.\nQNXTSPID LA    R14,16            16 DIFFERENT STORAGE PROTECT KEYS.\nQNEXTKEY LA    R7,3              THREE ENTRIES PER KEY PER SUBPOOL.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   QNXTNTYP          NO.\n         LA    R7,5              FIVE ENTRIES PER KEY PER SUBPOOL.\nQNXTNTYP LR    R6,R3             POINT TO FIRST DQE POINTER.\n         USING DQE,R6\nQNEXTDQE L     R6,DQENEXT        POINT TO DQE.\n         CR    R6,R3             END OF CHAIN?\n         BE    QDNSPKEY          YES, DONE THIS KEY FOR THIS SUBPOOL.\n         L     R0,DQEAREA        POINT TO ALLOCATED BLOCK.\n         CR    R5,R0             IN ALLOCATED AREA?\n         BL    QNEXTDQE          NO.\n         A     R0,DQESIZE\n         CR    R5,R0\n         BNL   QNEXTDQE          NO.\n         MVI   LL-79(R2),C' '    YES, BLANK THE DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         LA    R0,3              THREE ENTRIES PER KEY PER SUBPOOL.\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   *+8               NO.\n         LA    R0,5              FIVE ENTRIES PER KEY PER SUBPOOL.\n         CR    R7,R0             PAGE-FIXED BELOW THE LINE?\n         BNE   *+10              NO.\n         MVC   LL-21(7,R2),=C'(R<16M)'\n         MVC   LL-5(2,R2),=C'SP' SHOW SUBPOOL NUMBER.\n         MVC   LL-3(3,R2),0(R4)\n         MVC   LL-12(3,R2),=C'KEY'\n         LA    R0,16             SHOW STORAGE KEY.\n         SR    R0,R14\n         STC   R0,LL-8(,R2)\n         TR    LL-8(1,R2),HEX\n**       ST    R6,WORK           SHOW DQE ADDRESS.\n**       MVC   LL-74(3,R2),=C'DQE'\n**       UNPK  LL-70(9,R2),WORK(5)\n**       TR    LL-70(8,R2),HEX-C'0'\n**       MVI   LL-62(R2),C' '\n         LR    R7,R6             COPY DQE ADDRESS.\n         USING FQE,R7\nQFQELOOP L     R7,FQENEXT        POINT TO THE NEXT FQE.\n         CR    R7,R6             END OF FQE CHAIN?\n         BE    QALLOCSA          YES, DISPLAY LINE NOW COMPLETE.\n         L     R0,FQEAREA        POINT TO ALLOCATED BLOCK.\n         CR    R5,R0             IN FREE AREA?\n         BL    QFQELOOP          NO.\n         A     R0,FQESIZE\n         CR    R5,R0\n         BNL   QFQELOOP          NO.\n         MVC   LL-43(15,R2),=C'   FREE STORAGE'\nQALLOCSA LA    R2,LL-80(,R2)     LINE NOW COMPLETE.\n         A     R2,VBCOLS         ADJUST SCREEN BUFFER POINTER.\n         ST    R2,28(,R13)       SAVE NEW BUFFER POINTER.\n         MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.\n         MVI   LL-79(R2),C' '    BLANK A DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         B     QSCSAXIT          STILL PERFORM TCB SCAN.\n         DROP  R6,R7             DQE, FQE.\nQDNSPKEY LA    R3,8(,R3)         ADJUST SUBPOOL TABLE ENTRY POINTER.\n         BCT   R7,QNXTNTYP       PROCESS NEXT ENTRY TYPE.\n         BCT   R14,QNEXTKEY      PROCESS NEXT STORAGE PROTECT KEY.\n         LA    R4,3(,R4)         POINT TO NEXT SUBPOOL ID.\n         LA    R1,SPIDSEND       POINT TO END OF SUBPOOL IDS.\n         CR    R4,R1             DONE LAST CSA SUBPOOL?\n         BL    QNXTSPID          NO, PROCESS THIS SUBPOOL.\nQSCSAXIT LM    R14,R12,12(R13)   RESTORE REGISTERS.\n         BR    R14               RETURN TO CALLER.\n         DROP  R15               QSRCHCSA.\n         SPACE 2\n         USING QSRCHMSS,R15\n         USING TCB,R4\nQSRCHMSS LA    R3,TCBMSS         POINT TO FIRST SPQE ANCHOR.\n         LA    R9,TCBUKYSP       POINT TO SECOND SPQE ANCHOR.\n         USING SPQE,R3\nVQSPQELP ICM   R3,15,SPQENEXT    POINT TO NEXT SPQE.\n         BNZ   VGETSPQA          GO FIND THE SPQA.\n         LTR   R9,R9             ANY MORE SPQE ANCHORS?\n         BZR   R14               NO, NO MORE SPQES TO CHECK.\n         LA    R3,TCBSWA         YES, POINT TO LAST SPQE ANCHOR.\n         CR    R3,R9             ALREADY QUEUED LAST ANCHOR?\n         LR    R3,R9             COPY NEXT TCB SPQE POINTER.\n         BE    VSWADONE          YES.\n         LA    R9,TCBSWA         NO, QUEUE UP LAST ANCHOR.\n         B     VQSPQELP          TRY THIS SPQE CHAIN.\nVSWADONE SLR   R9,R9             DON'T DO THIS AGAIN.\n         B     VQSPQELP          TRY THIS SPQE CHAIN.\nVGETSPQA L     R5,SPQESPQA       POINT TO SPQA.\n         USING SPQA,R5\n         XC    WORK,WORK         RESET A FLAG.\n         ST    R5,WORK+4         SAVE SPQA CHECK.\n         LA    R0,2\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   *+8               NO.\n         LA    R0,3              YES.\n         TM    BRWSPNTR,X'7F'    EXTENDED ADDRESS?\n         BZ    VDQESCAN          NO.\n         LA    R5,SPQAADQE+8     YES, POINT TO EXTENDED DQE ANCHORS.\n         LA    R0,1\n         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?\n         BNO   VDQESCAN          NO.\n         L     R5,SPQESPQX       YES, POINT TO EXTENDED DQE ANCHORS.\n         LA    R0,2\nVDQESCAN STH   R0,WORK           SAVE DQE QUEUE COUNT.\n         LR    R6,R5             POINT TO FIRST DQE ANCHOR.\n         USING DQE,R6\nVDQELOOP L     R6,DQENEXT        POINT TO NEXT DQE.\n         CR    R6,R5             END OF DQE CHAIN?\n         BE    VANKCHEK          YES, CHECK FOR MORE ANCHORS.\n         L     R0,DQEAREA        POINT TO ALLOCATED BLOCK.\n         CR    R7,R0             IN ALLOCATED AREA?\n         BL    VDQELOOP          NO.\n         A     R0,DQESIZE\n         CR    R7,R0\n         BNL   VDQELOOP          NO.\n         DROP  R5                SPQA.\n         MVI   LL-79(R2),C' '    YES, BLANK THE DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         C     R5,WORK+4         PAGE-FIXED BELOW THE LINE?\n         BNE   *+10              NO.\n         MVC   LL-21(7,R2),=C'(R<16M)'\n         SLR   R0,R0\n         IC    R0,SPQEID         SHOW SUBPOOL NUMBER.\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         MVC   LL-5(2,R2),=C'SP'\n         UNPK  LL-3(3,R2),WORK+6(2)\n         MVC   LL-12(3,R2),=C'KEY'\n         IC    R0,SPQEKEY        SHOW STORAGE KEY.\n         SRL   R0,4\n         STC   R0,LL-8(,R2)\n         TR    LL-8(1,R2),HEX\n         MVC   LL-75(14,R2),=C'PAGE IS SHARED'\n         TM    SPQEFLGS,SPQEOWN  OWNED BY A TCB?\n         BZ    VQCHKFQE          NO, DON'T SHOW TCB ADDRESS.\n         MVC   LL-67(15,R2),=C'OWNED BY TCB AT'\n         UNPK  LL-51(7,R2),SPQETCB+1(4)\n         TR    LL-51(6,R2),HEX-C'0'\n         MVI   LL-45(R2),C' '\n         L     R5,SPQETCB\n         MVC   LL-43(6,R2),=C'(TERM)'\n         TM    29(R5),X'C0'      IS THE TASK TERMINATING?\n         BNZ   ENDOFJPA          YES, DISPLAY LINE NOW COMPLETE.\n         MVC   LL-43(6,R2),BLANKS\n         L     R5,0(,R5)         POINT TO TOP RB.\nVQRBLOOP ICM   R0,7,29(R5)       GET RBLINK.\n         C     R0,SPQETCB        BOTTOM RB?\n         BE    VQGOTPRB          YES.\n         LR    R5,R0             NO.\n         B     VQRBLOOP\nVQGOTPRB TM    10(R5),X'E0'      PRB?\n         BNZ   VQCHKFQE          NO, DON'T SHOW PROGRAM NAME.\n         ICM   R5,7,13(R5)       POINT TO THE CDE.\n         MVC   LL-36(8,R2),8(R5) COPY PROGRAM NAME.\n         MVC   LL-43(7,R2),=C'-  PGM='\nVQCHKFQE LR    R5,R6             COPY DQE ADDRESS.\n         USING FQE,R5\nVFQELOOP L     R5,FQENEXT        POINT TO THE NEXT FQE.\n         CR    R5,R6             END OF FQE CHAIN?\n         BE    ENDOFJPA          YES, DISPLAY LINE NOW COMPLETE.\n         L     R0,FQEAREA        POINT TO ALLOCATED BLOCK.\n         CR    R7,R0             IN FREE AREA?\n         BL    VFQELOOP          NO.\n         A     R0,FQESIZE\n         CR    R7,R0\n         BNL   VFQELOOP          NO.\n         MVC   LL-43(15,R2),=C'   FREE STORAGE'\n         B     ENDOFJPA          DISPLAY LINE NOW COMPLETE.\n         DROP  R5,R6             FQE, DQE.\nVANKCHEK LA    R5,8(,R5)         POINT TO NEXT DQE ANCHORS.\n         LH    R0,WORK\n         BCT   R0,VDQESCAN       LOOK AT NEXT DQE CHAIN.\n         B     VQSPQELP          CHECK NEXT SUBPOOL QUEUE ELEMENT.\n         DROP  R3,R4             SPQE, TCB.\n         DROP  R15               QSRCHMSS.\n         SPACE\n         LTORG\n         SPACE\n         DS    0H\n         EJECT\n         USING CVT,R1\nBRWSASMV L     R1,CVTPTR(,0)     LOAD CVT POINTER.\n         MVC   BRWSPNTR,CVTASMVT COPY ASMVT POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSASVT L     R1,CVTPTR(,0)     LOAD CVT POINTER.\n         MVC   BRWSPNTR,CVTASVT  COPY ASVT POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSCMCT MVC   BRWSPNTR,CMCTADDR COPY THE CMCT ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSCSD  L     R1,CVTPTR(,0)     LOAD CVT POINTER.\n         MVC   BRWSPNTR,CVTCSD   COPY COMMON SYSTEM DATA AREA POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSCVT  MVC   BRWSPNTR,CVTPTR(0) COPY CVT POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSECVT L     R1,CVTPTR(,0)     LOAD CVT POINTER.\n         MVC   BRWSPNTR,CVTECVT  COPY EXTENDED CVT POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSGDA  L     R1,CVTPTR(,0)     LOAD CVT POINTER.\n         MVC   BRWSPNTR,CVTGDA   COPY GLOBAL DATA AREA POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R1                CVT.\nBRWSJSCB L     R1,PSATOLD        POINT TO THE CURRENT TCB.\n         USING TCB,R1\n         MVC   BRWSPNTR,TCBJSCB  COPY THE JSCB ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R1                TCB.\n         USING BRWSLPDE,R2\nBRWSLPDE LR    R2,R15            TEMPORARY BASE REGISTER.\n         LA    R3,INCHARS+4      POINT TO MODULE NAME.\n         CLI   0(R3),C' '        A LEADING BLANK?\n         BNE   BGOTLPAM          NO.\n         LA    R3,1(,R3)         YES, ALLOW ONE.\n         CLI   0(R3),C' '        A LEADING BLANK?\n         BE    BPLPADIR          YES, POINT TO PLPA DIRECTORY/START.\nBGOTLPAM CLI   0(R3),C''''       A LEADING QUOTE?\n         BNE   BLPDENAM          NO.\n         LA    R3,1(,R3)         YES, ALLOW ONE.\nBLPDENAM MVC   WORK,0(R3)        GET ON WORD BOUNDARY.\n         CLC   INCHARS(4),BLPAQCHR   WAS LPAQ REQUESTED?\n         BE    BRWSLPAQ          YES.\n         CLC   INCHARS(4),BCDECHR    WAS CDE REQUESTED?\n         BE    BRWSLPAQ          YES.\n         LR    R4,R8             SAVE A BASE REGISTER.\n         LM    R0,R1,WORK        LOAD NAME FOR IEAVVMSR TO SEARCH FOR.\n         L     R3,CVTPTR(,0)     CVT POINTER REQUIRED BY IEAVVMSR.\n         USING CVT,R3\n         L     R15,CVTLPDSR      GET ENTRY POINT FOR IEAVVMSR.\n         DROP  R3                CVT.\n         BASR  R14,R15           CALL IEAVVMSR (7, 8 AND 9 WORK REGS).\n         B     BRWSPLPA          FOUND IN PLPA.\n         LR    R8,R4             RESTORE BASE REGISTER.\n         B     BRWSERIS          NO LPDE, NOT IN PLPA.\nBRWSPLPA LR    R8,R4             RESTORE BASE REGISTER.\n         LR    R1,R0             POINT TO THE LPDE.\n         LA    R1,0(,R1)         ENSURE SIGN BIT IS OFF.\n         USING LPDE,R1\nBCDELPDE ST    R1,BRWSPNTR       SAVE THE LPDE ADDRESS.\n         CLC   INCHARS(4),BLPDECHR   WAS LPDE REQUESTED?\n         BE    VBASBRWS          YES, ALL SET.\n         CLC   INCHARS(4),BCDECHR    WAS CDE REQUESTED?\n         BE    VBASBRWS          YES, ALL SET.\n         L     R1,LPDENTP        NO, POINT TO THE ENTRY POINT.\n         DROP  R1                LPDE.\nBRPLPAOK LA    R1,0(,R1)         ENSURE SIGN BIT IS OFF.\n         ST    R1,BRWSPNTR       SAVE THE LOAD MODULE START ADDRESS.\n         NI    BRWSPNTR,X'FE'    ENSURE AMODE64 BIT IS OFF.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBPLPADIR CLC   INCHARS(4),BLPAQCHR   WAS LPAQ REQUESTED?\n         BE    BRWSERIS          YES, MISSING OPERAND.\n         CLC   INCHARS(4),BCDECHR    WAS CDE REQUESTED?\n         BE    BRWSERIS          YES, MISSING OPERAND.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTLPDIA       POINT TO THE PLPA DIRECTORY.\n         B     BRPLPAOK          USE THIS ADDRESS.\nBRWSLPAQ L     R1,CVTPTR(,0)     POINT TO CVT.\n         L     R1,CVTQLPAQ       POINT TO LPAQ ORIGIN.\n         DROP  R1                CVT.\n         USING CDENTRY,R1\nVBLPAQLP ICM   R1,15,CDCHAIN     LAST CDE ON CHAIN?\n         BZ    BRWSERIS          YES, WASN'T ON LINK PACK CHAIN.\n         CLC   WORK,CDNAME       FOUND THE LOAD MODULE?\n         BNE   VBLPAQLP          NO, TRY NEXT ONE.\n         B     BCDELPDE          YES, GOT THE DIRECTORY ELEMENT.\n         DROP  R2,R1             BRWSLPDE, CDENTRY.\nBRWSPART MVC   BRWSPNTR,PARTADDR COPY THE PART ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         USING BRWSPCCA,R15\nBRWSPCCA CLC   INCHARS+4(2),BLANKS\n         BNE   CPUPCCA           CPU NUMBER SPECIFIED.\n         MVC   BRWSPNTR,PSAPCCAV COPY THE CURRENT PCCA POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R15               BRWSPCCA.\nCPUPCCA  LA    R0,1              MAXIMUM OF 1 HEX DIGIT IN AN CP ID.\n         BAS   R14,BROWSHEX      GET SPECIFIED CPU.\n         SLL   R15,2             CONVERT INTO PCCAVT INDEX.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,CVTPCCAT       POINT TO THE PCCAVT.\n         DROP  R1                CVT.\n         LA    R1,0(R15,R1)      POINT TO THE PCCAVT ENTRY.\n         ICM   R15,15,0(R1)      LOAD ADDRESS OF PARTICULAR PCCA.\n         BZ    BRWSERIS          ZERO, SELECTED CPU IS NOT ACTIVE.\n         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         USING BRWSPSA,R15\nBRWSPSA  CLC   INCHARS+4(2),BLANKS\n         BNE   CPUPSA            CPU NUMBER SPECIFIED.\n         SLR   R1,R1             GET CURRENT PSA ADDRESS.\n         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R15               BRWSPSA.\nCPUPSA   LA    R0,1              MAXIMUM OF 1 HEX DIGIT IN AN CP ID.\n         BAS   R14,BROWSHEX      GET SPECIFIED CPU.\n         SLL   R15,2             CONVERT INTO PCCAVT INDEX.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         L     R1,764(,R1)       POINT TO THE PCCAVT.\n         DROP  R1                CVT.\n         LA    R1,0(R15,R1)      POINT TO THE PCCAVT ENTRY.\n         ICM   R15,15,0(R1)      LOAD ADDRESS OF PARTICULAR PCCA.\n         BZ    BRWSERIS          ZERO, SELECTED CPU IS NOT ACTIVE.\n         USING PCCA,R15\n         L     R15,PCCAPSAV      POINT TO CORRESPONDING PSA.\n         DROP  R15               PCCA.\n         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSPSCB L     R1,PSATOLD        POINT TO THE CURRENT TCB.\n         USING TCB,R1\n         L     R1,TCBJSCB        POINT TO THE CURRENT JSCB.\n         DROP  R1                TCB.\n         USING IEZJSCB,R1\n         MVC   BRWSPNTR,JSCBPSCB COPY THE PSCB ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R1                IEZJSCB.\nBRWSPVT  L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R1\n         MVC   BRWSPNTR,CVTPVTP  COPY THE PVT ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSRCE  MVC   BRWSPNTR,RCEADDR  COPY THE RCE ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSRIT  L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         L     R1,CVTPVTP        POINT TO THE PVT.\n         MVC   BRWSPNTR,4(R1)    COPY THE RIT ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSRMCT MVC   BRWSPNTR,RMCTADDR COPY THE RMCT ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSSART MVC   BRWSPNTR,SARTADDR COPY THE SART ADDRESS.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSSMCA MVC   BRWSPNTR,SMCAADDR COPY THE SMCA ADDRESS.\n         NI    BRWSPNTR,X'7F'    TURN OFF VSAM SMF DATA SET FLAG.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\nBRWSSVC  LA    R0,2              MAXIMUM OF 2 HEX DIGITS IN SVC NUMBER.\n         BAS   R14,BROWSHEX      GET SPECIFIED SVC NUMBER.\n         L     R1,CVTPTR(,0)     POINT TO THE CVT.\n         L     R1,CVTABEND       POINT TO THE SCVT.\n         DROP  R1                CVT.\n         USING SCVTSECT,R1\n         L     R1,SCVTSVCT       POINT TO THE SVC TABLE.\n         DROP  R1                SCVTSECT.\n         SLL   R15,3             GET INDEX INTO TABLE.\n         USING SVCENTRY,R1\n         LA    R1,0(R15,R1)      POINT TO SVC TABLE ENTRY.\n         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.\n         CLI   INCHARS+3,C' '    SVC TABLE ENTRY REQUESTED?\n         BE    VBASBRWS          YES, DISPLAY DATA FROM NEW ADDRESS.\n         MVC   BRWSPNTR,SVCEP    NO, LOAD ENTRY POINT ADDRESS.\n         NI    BRWSPNTR,X'7F'    RESET AMODE BIT.\n         NI    BRWSPNTR+3,X'FE'  JUST IN CASE THERE IS AN AM64 BIT.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R1                SVCENTRY.\nBRWSTCT  L     R1,PSATOLD        POINT TO THE CURRENT TCB.\n         USING TCB,R1\n         MVC   BRWSPNTR,TCBTCT   COPY THE TCT ADDRESS.\n         NI    BRWSPNTR,X'7F'    RESET SMF GETMAIN/FREEMAIN BIT.\n         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.\n         DROP  R1                TCB.\n         TITLE 'VIRTUAL STORAGE MONITOR - DATASPACE ROUTINE'\n         USING BRWSDSPC,R2\nBRWSDSPC DS    0H                PROCESS DATASPACE REQUEST.\n         MVC   HEADING+53(8),VBDSNAME\n         MVI   HEADING+61,C' '   SHOW DATASPACE NAME.\n         LA    R0,256            GET DATA LENGTH TO FETCH.\n         CLI   COLUMNS+3,80      80-COLUMN SCREEN?\n         BNE   BDGOTLEN          NO.\n         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?\n         BL    BASIDSOK          NO.\n         LA    R0,512            YES, INCREASE DATA LENGTH.\nBDGOTLEN STH   R0,VBDSDLEN       SAVE DATA SIZE TARGET.\n         STH   R0,VBDSDREM       SET REMAINING DATA TO GET.\n         LR    R5,R4             COPY DATA DISPLAY START ADDRESS.\n         SRL   R4,12\n         SLL   R4,12             GET ADDRESS OF START OF PAGE.\n         SR    R5,R4             GET OFFSET INTO FETCHED PAGE.\n         MODESET MF=(E,MDSET0)   KEY 0 FOR ALLOWUSERKEYCSA(NO).\nBDPAGELP ST    R4,VBDSADDR       SAVE IT IN THE PARAMETER LIST.\n         LA    R1,VBDSPRMS       POINT TO PARAMETER LIST.\n         L     R15,=V(IMDSPACE)  GET DATASPACE LIST ROUTINE EP.\n         BASR  R14,R15           INVOKE IT.\n         ST    R15,VWORDONE      SAVE RETURN CODE.\n         ICM   R15,15,VWORDONE   SUCCESSFUL CALL?\n         BNZ   BDRETURN          NO, NO (MORE) DATA TO DISPLAY.\n         L     R1,VBDSPNTR       YES, POINT TO RETURNED PAGE.\n         AR    R5,R1             POINT TO START OF DATA TO SHOW.\n         LR    R0,R1             POINT TO RETURNED DATA.\n         AHI   R0,4096           POINT PAST RETURNED DATA.\n         LH    R15,VBDSDREM      GET LENGTH TO GO.\nBDCOPYLP MVC   0(128,R3),0(R5)   COPY 128 DATASPACE PAGE BYTES.\n         LA    R3,128(,R3)       ADJUST TARGET ADDRESS.\n         LA    R5,128(,R5)       ADJUST SOURCE ADDRESS.\n         AHI   R15,-128          ADJUST LENGTH TO GO.\n         STH   R15,VBDSDREM      UPDATE LENGTH TO GO.\n         BNP   BDCOPYDN          DATA TARGET MET.\n         CR    R5,R0             EXHAUSTED THIS PAGE?\n         BL    BDCOPYLP          NO, GO COPY MORE DATA.\n         BAS   R14,VBDSFREE      YES, FREE THE PAGE BUFFER.\n         AHI   R4,4096           POINT TO NEXT DATASPACE PAGE.\n         SR    R5,R5             ZERO PAGE OFFSET OF DATA TO COPY.\n         B     BDPAGELP          GO FETCH NEXT DATASPACE PAGE.\nBDCOPYDN BAS   R14,VBDSFREE      FREE THE PAGE BUFFER.\nBDRETURN MODESET MF=(E,MDSETN0)  REVERT TO USER KEY.\n         L     R3,VWORDTWO       RESTORE RETURNED DATA POINTER.\n         L     R4,BRWSPNTR       GET TARGET BROWSE ADDRESS.\n         SRL   R4,7\n         SLL   R4,7              GET DATA START ADDRESS.\n         LH    R15,VBDSDLEN      GET TARGET SIZE OF DATA.\n         SH    R15,VBDSDREM      GET SIZE OF DATA PROCURED.\n         SRA   R15,4             CONVERT TO SCREEN DISPLAY LINES.\n         STC   R15,WORK2         SAVE IT.\n         B     SKIPVSB8          RETURN.\n         SPACE\nVBDSFREE DS    0H                FREE DATASPACE PAGE BUFFER IN ECSA.\n         FREEMAIN RU,A=(1),LV=4096,SP=241\n         ST    R15,VBDSPNTR      RESET POINTER.\n         BR    R14               RETURN TO CALLER.\n         SPACE\n         DROP  R2                BRWSDSPC.\n         SPACE\nVBDSDLEN DC    H'256'            LENGTH OF DATA TO SHOW.\nVBDSDREM DC    H'256'            LENGTH OF DATA TO BE PROCURED.\n         LTORG\n         TITLE 'VIRTUAL STORAGE MONITOR - DATA FETCH ERROR MESSAGE'\n         USING VBPNKMSG,R15\nVBPNKMSG MVC   0(LL-79,R2),MEDX\n         MVI   LL-79(R2),C' '    CLEAR A LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         TM    VBDSTOKN,X'80'    DATASPACE SPACE TOKEN PRESENT?\n         BO    VBDSPINK          YES, DATASPACE ACCESS ERROR.\n         ICM   R0,3,BRWSASID     IS THE SASID ZERO?\n         BZ    LASPFAIL          YES, LASP SET A NON-ZERO COND CODE.\n         CLC   S0C4,VWORDONE+1   S0C4 ABEND?\n         BNE   VNOTS0C4          NO.\n         CLI   VWORDCNT+1,X'04'  PROTECTION EXCEPTION?\n         BE    VBPROTEX          YES.\n         CLI   VWORDCNT+1,X'10'  SEGMENT TRANSLATION EXCEPTION?\n         BE    VBSGMTEX          YES.\n         CLI   VWORDCNT+1,X'11'  PAGE TRANSLATION EXCEPTION?\n         BE    VBPAGEEX          YES.\nVNOTS0C4 MVC   LL-57(35,R2),=C'ABEND OCCURRED WHILE ACCESSING DATA'\n         MVI   LL-67(R2),C'S'    DENOTE SYSTEM ABEND.\n         OI    VWORDONE+2,X'0F'  DISPLAY ABEND CODE (SHOULD BE 0C4).\n         UNPK  LL-66(3,R2),VWORDONE+1(2)\n         TR    LL-66(3,R2),HEX-C'0'\n         MVI   LL-63(R2),C'-'\n         UNPK  LL-62(5,R2),VWORDCNT(3)\n         TR    LL-62(4,R2),HEX-C'0'\n         MVI   LL-58(R2),C' '    DISPLAY INTERRRUPT OR REASON CODE.\n         B     VBERRMSG\nVBPROTEX MVC   LL-59(38,R2),=C'PROTECTION EXCEPTION  -  ACCESS DENIED'\n         B     VBERRMSG\nVBSGMTEX MVC   LL-61(33,R2),=C'TRANSLATION EXCEPTION  -  MISSING PAGE'\n         MVC   LL-27(7,R2),=C'SEGMENT'\n         B     VBERRMSG\nVBPAGEEX MVC   LL-59(38,R2),=C'TRANSLATION EXCEPTION  -  MISSING PAGE'\n         B     VBERRMSG\nVBDSPINK CLI   VWORDONE+3,8      INVALID SPACE TOKEN?\n         BE    VBDSGONE          YES, THE DATASPACE HAS GONE AWAY.\n         CLI   VWORDONE+3,20     STORAGE OUT OF RANGE?\n         BE    VBDSMALL          YES, DATASPACE TOO SMALL FOR ADDRESS.\n         MVC   LL-54(24,R2),=C'SUBROUTINE RETURN CODE ='\n         UNPK  LL-29(3,R2),VWORDONE+3(2)\n         TR    LL-29(2,R2),HEX-C'0'\n         MVI   LL-27(R2),C' '\n         B     VBERRMSG\nVBDSGONE MVC   LL-53(26,R2),=C'DATASPACE NO LONGER EXISTS'\n         B     VBERRMSG\nVBDSMALL MVC   LL-59(38,R2),=C'ADDRESS OUT OF DATASPACE STORAGE RANGE'\n         B     VBERRMSG\nLASPFAIL MVC   LL-67(33,R2),=C'LASP FAILURE - ASID RESET TO HOME'\n         MVC   BRWSASID,BRWSHOME RESET SECONDARY ASID.\nVBERRMSG LA    R2,LL-80(,R2)     THIS MESSAGE LINE NOW COMPLETE.\n         A     R2,VBCOLS         ADJUST SCREEN BUFFER POINTER.\n         XC    VWORDONE,VWORDONE CLEAR SYSTEM ABEND OR RETURN CODE.\n         CLI   WORK2,8           ANY DATA FETCHED?\n         BNL   VBPNKRTN          YES, TRY TO SHOW DETAILS.\n         B     TIDYBRWS          FINISH UP WITH SYSTEM SUMMARY ETC.\n         DROP  R15               VBPNKMSG.\n         SPACE\n         LTORG\n         DS    0H\n         TITLE 'VIRTUAL STORAGE MONITOR - GET GETMAIN DETAILS'\n         USING VBGMDTLS,R7\nVBGMDTLS TM    OSLEVEL+1,CVTH4430 SP4.3 OR LATER?\n         BNO   TIDYBRWS          NO, NO COMMON STORAGE TRACKING.\n         BAKR  R14,0             YES, SAVE STATUS.\n         LR    R7,R15            SET LOCAL BASE REGISTER.\n         SLR   R15,R15           FLAG NO ADDITIONAL OUTPUT.\n         L     R3,CVTPTR(,0)     POINT TO THE CVT.\n         USING CVT,R3\n         L     R1,CVTGDA         POINT TO THE GLOBAL DATA AREA.\n         DROP  R3                CVT.\n         USING GDA,R1\n         L     R3,GDAGQAT_INDEX  POINT TO GQAT INDEX TABLE.\n         DROP  R1                GDA.\n         SLR   R4,R4             CLEAR FOR SHIFT.\n         L     R5,BRWSPNTR       GET BROWSE ADDRESS.\n         SLDL  R4,9              GET TOP 8 ADDRESS BITS.\n         SLL   R4,2              CONVERT TO WORD INDEX.\n         AR    R3,R4             GET GQAT INDEX ENTRY ADDRESS.\n         USING GQATITBL,R3\n         L     R3,GQATINDX       POINT TO THE GQAT.\n         DROP  R3                GQATITBL.\n         LTR   R3,R3             ANY ENTRY PRESENT?\n         BZ    VBGMEXIT          NO.\n         USING GQAT,R3\n         SLR   R4,R4             CLEAR FOR SHIFT.\n         SLDL  R4,7              GET NEXT 7 ADDRESS BITS.\n         SLL   R4,2              CONVERT TO WORD INDEX.\n         L     R3,GQATNTRY(R4)   POINT TO GQE CHAIN ORIGIN.\n         DROP  R3                GQAT.\nVGQELOOP LTR   R3,R3             ANY ENTRY PRESENT?\n         BZ    VBGMEXIT          NO.\n         USING GQE,R3\n         L     R0,GQE_AREA       GET THE AREA ADDRESS.\n         L     R1,GQE_SIZE       GET THE SIZE.\n         N     R0,VAREAMSK       DISCARD EXTRANEOUS BITS.\n         N     R1,VSIZEMSK       DISCARD EXTRANEOUS BITS.\n         C     R0,BRWSPNTR       AREA ABOVE CURRENT ADDRESS?\n         BH    VNEXTGQE          YES.\n         AR    R0,R1\n         TM    GQE_SIZE_BYTE3,GQE_PROTECT\n         BNO   *+8\n         AHI   R0,4096\n         TM    GQE_SIZE_BYTE3,GQE_DETECT\n         BNO   *+8\n         AHI   R0,8\n         C     R0,BRWSPNTR       AREA BELOW CURRENT ADDRESS?\n         BH    VTHISGQE          NO.\nVNEXTGQE L     R3,GQE_NEXT       YES, POINT TO THE NEXT GQE.\n         B     VGQELOOP\nVTHISGQE MVI   LL-79(R2),C' '    BLANK A DISPLAY LINE.\n         MVC   LL-78(78,R2),LL-79(R2)\n         MVC   LL-79(16,R2),=C'OBTAIN DETAILS: '\n         C     R15,GQE_GMTIME    IS TIMESTAMP ZERO?\n         BE    VGETCAUB          YES.\n         MVC   WORK(4),GQE_GMTIME\n         ST    R15,WORK+4\n         STCKCONV STCKVAL=WORK,  POINT TO INPUT STCK VALUE.            +\n               CONVVAL=SAVE+28,  POINT TO OUTPUT FOUR WORDS.           +\n               TIMETYPE=DEC,     GET TIME DECIMAL DIGITS (DEFAULT).    +\n               DATETYPE=YYYYMMDD, SPECIFY DATE FORMAT.                 +\n               MF=(E,STCKCNVL)   SPECIFY PARAMETER LIST.\n         UNPK  LL-63(5,R2),SAVE+36(3)    YYYY.\n         UNPK  LL-58(3,R2),SAVE+38(2)    MM.\n         UNPK  LL-55(3,R2),SAVE+39(2)    DD.\n         UNPK  LL-52(3,R2),SAVE+28(2)    HH.\n         UNPK  LL-49(3,R2),SAVE+29(2)    MM.\n         UNPK  LL-46(3,R2),SAVE+30(2)    SS.\n         TR    LL-63(19,R2),HEX-C'0' HANDLE BAD DECIMAL DIGITS.\n         MVI   LL-59(R2),C'-'        SUPPLY SEPARATORS AND\n         MVI   LL-56(R2),C'-'               TIDY UP AFTER TRANSLATE\n         MVI   LL-53(R2),C' '               AND THE LAST UNPACK.\n         MVI   LL-50(R2),C':'\n         MVI   LL-47(R2),C':'\n         MVI   LL-44(R2),C' '\n         L     R15,CRNTOPTN      POINT TO CURRENT OPTION ENTRY.\n         LH    R15,12(,R15)      FLAG DISPLAY LINE GENERATED.\n         SLR   R0,R0\n         BCTR  R0,0              GET HIGH VALUES.\n         C     R0,GQE_RETADDR    PRE-GETMAIN ACQUISITION?\n         BE    VGETCAUB          YES, DO NOT DISPLAY.\n         MVC   LL-79(6,R2),=C'OBTN@ '\n         MVC   WORK(4),GQE_RETADDR\n         NI    WORK+3,X'FE'      CLEAR FLAG FROM INSTRUCTION ADDRESS.\n         UNPK  LL-73(9,R2),WORK(5)\n         TR    LL-73(8,R2),HEX-C'0'\n         MVI   LL-65(R2),C' '\nVGETCAUB L     R3,GQE_CAUB       POINT TO THE CAUB.\n         DROP  R3                GQE.\n         LTR   R3,R3             ANY ENTRY PRESENT?\n         BZ    VBGMTIDY          NO.\n         USING CAUB,R3\n         CLC   =C'CAUB',CAUB_ID  VALID ENTRY?\n         BNE   VBGMTIDY          NO.\n         L     R15,CRNTOPTN      POINT TO CURRENT OPTION ENTRY.\n         LH    R15,12(,R15)      FLAG DISPLAY LINE GENERATED.\n         MVC   LL-42(4,R2),=C'ASID'\n         UNPK  LL-37(5,R2),CAUB_ASN(3)\n         TR    LL-37(4,R2),HEX-C'0'\n         MVI   LL-33(R2),C' '\n         MVC   LL-31(8,R2),CAUB_JOBNAME\n         MVC   LL-22(8,R2),CAUB_JOBID\n         DROP  R3                CAUB.\nVBGMTIDY LTR   R15,R15           ANY DATA GENERATED HERE?\n         BZ    VBGMEXIT          NO.\n         TR    LL-79(79,R2),XLATETBL\n         SR    R2,R15            POINT TO PREVIOUS LINE.\n         CLC   LL-79(67,R2),BLANKS\n         BNE   VBGMEXIT          PREVIOUS LINE LOADED ENOUGH.\n         AR    R15,R2\n         MVC   LL-79(67,R2),LL-79(R15)\n         SLR   R15,R15           CONSOLIDATE DISPLAY LINES.\nVBGMEXIT PR    ,                 RETURN TO CALLER.\n         DROP  R7                VBGMDTLS.\n         SPACE\nVAREAMSK DC    A(GQE_AREAMASK)   VALID GQE AREA ADDRESSING BITS.\nVSIZEMSK DC    A(GQE_SIZEMASK)   VALID GQE SIZE BITS.\n         SPACE\n         LTORG\n         DS    0H\n         TITLE 'VIRTUAL STORAGE MONITOR - GET OPCODE MNEMONIC'\n         USING VBDISASM,R15\nVBDISASM TM    BRWSPNTR,X'80'    SHOWING TRACE TABLE?\n         BOR   R14               YES, RETURN WITHOUT ACTION.\n         TM    BRWSPNTR+3,X'01'  IS CURRENT ADDRESS ODD?\n         BOR   R14               YES, RETURN WITHOUT ACTION.\n         L     R1,BRWSPNTR\n         SR    R1,R4\n         LA    R6,0(R1,R3)       POINT TO INSTRUCTION.\n         SLR   R5,R5\n         IC    R5,1(,R6)         GET SECOND OPCODE BYTE.\n         CLI   0(R6),X'9F'\n         BH    NOT370IO\n         CLI   0(R6),X'9C'\n         BL    NOT370IO\n         BH    VBNOT9C\n         CLI   1(R6),X'02'\n         BHR   R14\n         LA    R1,V9COPCDS\n         B     VBDASMOK\nVBNOT9C  CLI   1(R6),X'01'\n         BHR   R14\n         LA    R1,V9DOPCDS\n         CLI   0(R6),X'9E'\n         BL    VBDASMOK\n         LA    R1,V9EOPCDS\n         BE    VBDASMOK\n         LA    R1,V9FOPCDS\n         B     VBDASMOK\nNOT370IO LA    R1,VB2OPCDS\n         CLI   0(R6),X'B2'\n         BE    VBDASMOK\n         LA    R1,VB3OPCDS-VB2OPCDS(,R1)\n         CLI   0(R6),X'B3'\n         BE    VBDASMOK\n         LA    R1,VB9OPCDS-VB3OPCDS(,R1)\n         CLI   0(R6),X'B9'\n         BNE   VBNOTB9\n         CLI   1(R6),X'BF'\n         BHR   R14\n         B     VBDASMOK\nVBNOTB9  LA    R1,VE3OPCDS-VB9OPCDS(,R1)\n         CLI   0(R6),X'E3'\n         BNE   VBNOTE3\n         CLI   5(R6),X'9F'\n         BHR   R14\n         IC    R5,5(,R6)         GET SECOND OPCODE BYTE.\n         B     VBDASMOK\nVBNOTE3  LA    R1,VEBOPCDS-VE3OPCDS(,R1)\n         CLI   0(R6),X'EB'\n         BNE   VBNOTEB\n         CLI   5(R6),X'C7'\n         BHR   R14\n         IC    R5,5(,R6)         GET SECOND OPCODE BYTE.\n         B     VBDASMOK\nVBNOTEB  LA    R1,VECOPCDS-VEBOPCDS(,R1)\n         CLI   0(R6),X'EC'\n         BNE   VBNOTED\n         IC    R5,5(,R6)         GET SECOND OPCODE BYTE.\n         B     VBDASMOK\nVBNOTEC  LA    R1,VEDOPCDS-VECOPCDS(,R1)\n         CLI   0(R6),X'ED'\n         BNE   VBNOTED\n         CLI   5(R6),X'67'\n         BHR   R14\n         IC    R5,5(,R6)         GET SECOND OPCODE BYTE.\n         B     VBDASMOK\nVBNOTED  SLL   R5,28\n         SRL   R5,28\n         LA    R1,V01OPCDS\n         CLI   0(R6),X'01'\n         BNE   VBNOT01\n         CLI   1(R6),X'FF'\n         BE    VBDASMOK\n         CLI   1(R6),X'0F'\n         BL    VBDASMOK\n         BR    R14\nVBNOT01  LA    R1,VA5OPCDS\n         CLI   0(R6),X'A5'\n         BE    VBDASMOK\n         LA    R1,VA7OPCDS\n         CLI   0(R6),X'A7'\n         BE    VBDASMOK\n         LA    R1,VC0OPCDS\n         CLI   0(R6),X'C0'\n         BE    VBDASMOK\n         LA    R1,VC2OPCDS\n         CLI   0(R6),X'C2'\n         BE    VBDASMOK\n         LA    R1,VC4OPCDS\n         CLI   0(R6),X'C4'\n         BE    VBDASMOK\n         LA    R1,VC6OPCDS\n         CLI   0(R6),X'C6'\n         BE    VBDASMOK\n         LA    R1,VC8OPCDS\n         CLI   0(R6),X'C8'\n         BE    VBDASMOK\n         LA    R1,VE5OPCDS\n         CLI   0(R6),X'E5'\n         BE    VBDASMOK\n         IC    R5,0(,R6)         GET FIRST OPCODE BYTE.\n         LA    R1,V1BOPCDS\nVBDASMOK LR    R6,R5             COPY OPCODE TABLE ENTRY NUMBER.\n         SLL   R6,2\n         AR    R5,R6             MULTIPLY BY FIVE FOR INDEX.\n         AR    R5,R1             POINT TO THE MNEMONIC.\nVBDASMIT MVC   56(5,R2),0(R5)    COPY IT INTO DISPLAY LINE.\n         BR    R14               RETURN TO CALLER.\n         DROP  R15               VBDISASM.\n         SPACE\nV1BOPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   1-BYTE\n         DC    CL40'                    SPM  BALR BCTR BCR  ' 00 - 07\n         DC    CL40'SSK  ISK  SVC  BSM  BASSMBASR MVCL CLCL ' 08 - 0F\n         DC    CL40'LPR  LNR  LTR  LCR  NR   CLR  OR   XR   ' 10 - 17\n         DC    CL40'LR   CR   AR   SR   MR   DR   ALR  SLR  ' 18 - 1F\n         DC    CL40'LPDR LNDR LTDR LCDR NDR  LDXR MXR  MXDR ' 20 - 27\n         DC    CL40'LDR  CDR  ADR  SDR  MDR  DDR  AWR  SWR  ' 28 - 2F\n         DC    CL40'LPER LNER LTER LCER HER  LEDR AXR  SXR  ' 30 - 37\n         DC    CL40'LER  CER  AER  SER  MER  DER  AUR  SUR  ' 38 - 3F\n         DC    CL40'STH  LA   STC  IC   EX   BAL  BCT  BC   ' 40 - 47\n         DC    CL40'LH   CH   AH   SH   MH   BAS  CVD  CVB  ' 48 - 4F\n         DC    CL40'ST   LAE            N    CL   O    X    ' 50 - 57\n         DC    CL40'L    C    A    S    M    D    AL   SL   ' 58 - 5F\n         DC    CL40'STD                                MXD  ' 60 - 67\n         DC    CL40'LD   CD   AD   SD   MD   DD   AW   SW   ' 68 - 6F\n         DC    CL40'STE  MS                                 ' 70 - 77\n         DC    CL40'LE   CE   AE   SE   ME   DE   AU   SU   ' 78 - 7F\n         DC    CL40'SSM       LPSW DIAG BRXH BRXLEBXH  BXLE ' 80 - 87\n         DC    CL40'SRL  SLL  SRA  SLA  SRDL SLDL SRDA SLDA ' 88 - 8F\n         DC    CL40'STM  TM   MVI  TS   NI   CLI  OI   XI   ' 90 - 97\n         DC    CL40'LM   TRACELAM  STAM SIO  TIO  HIO  TCH  ' 98 - 9F\n         DC    CL40'                                        ' A0 - A7\n         DC    CL40'MVCLECLCLE          STNSMSTOSMSIGP MC   ' A8 - AF\n         DC    CL40'     LRA                      STCTLLCTL ' B0 - B7\n         DC    CL40'          CS   CDS       CLM  STCM ICM  ' B8 - BF\n         DC    CL40'                                        ' C0 - C7\n         DC    CL40'                                        ' C8 - CF\n         DC    CL40'TRTR MVN  MVC  MVZ  NC   CLC  OC   XC   ' D0 - D7\n         DC    CL40'     MVCK MVCP MVCS TR   TRT  ED   EDMK ' D8 - DF\n         DC    CL40'     PKU  UNPKU                         ' E0 - E7\n         DC    CL40'MVCINPKA  UNPKA               PLO  LMD  ' E8 - EF\n         DC    CL40'SRP  MVO  PACK UNPK                     ' F0 - F7\n         DC    CL40'ZAP  CP   AP   SP   MP   DP             ' F8 - FF\n         SPACE\nV01OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    01?\n         DC    CL40'     PR   UPT       PTFF           SCKPF'  0 - 7\n         DC    CL40'          PFPO TAM  SAM24SAM31SAM64TRAP2'  8 - F\n         SPACE\nV9COPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   9C0?\n         DC    CL15'SIO  SIOF RIO  '                          00 - 02\n         SPACE\nV9DOPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   9D0?\n         DC    CL10'TIO  CLRIO'                               00 - 01\n         SPACE\nV9EOPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   9E0?\n         DC    CL10'HIO  HDV  '                               00 - 01\n         SPACE\nV9FOPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   9F0?\n         DC    CL10'TCH  CLRCH'                               00 - 01\n         SPACE\nVA5OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    A5?\n         DC    CL40'IIHH IIHL IILH IILL NIHH NIHL NILH NILL '  0 - 7\n         DC    CL40'OIHH OIHL OILH OILL LLIHHLLIHLLLILHLLILL'  8 - F\n         SPACE\nVA7OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    A7?\n         DC    CL40'TMLH TMLL TMHH TMHL BCR  BRAS BRCT BRGCT'  0 - 7\n         DC    CL40'LHI  LGHI AHI  AGHI MHI  MGHI CHI  CGHI '  8 - F\n         SPACE\nVC0OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C0?\n         DC    CL40'LARL LGFI           BRCL BRASLXIHF XILF '  0 - 7\n         DC    CL40'IIHF IILF NIHF NILF OIHF OILF LLIHFLLILF'  8 - F\n         SPACE\nVC2OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C2?\n         DC    CL40'MSGFIMSFI           SLGFISLFI           '  0 - 7\n         DC    CL40'AGFI AFI  ALGFIALFI CGFI CFI  CLGFICLFI '  8 - F\n         SPACE\nVC4OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C4?\n         DC    CL40'          LLHRL     LGHRLLHRL 2LONGSTHRL'  0 - 7\n         DC    CL40'LGRL           STGRLLGFRLLRL  2LONGSTRL '  8 - F\n*                                C46 = LLGHRL   C4E = LLGFRL\n         SPACE\nVC6OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C6?\n         DC    CL40'EXRL      PFDRL     CGHRLCHRL 2LONGCLHRL'  0 - 7\n         DC    CL40'CGRL      CLGRL     CGFRLCRL  2LONGCLRL '  8 - F\n*                                C66 = CLGHRL   C6E = CLGFRL\n         SPACE\nVC8OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C8?\n         DC    CL40'MVCOSECTG CSST                          '  0 - 7\n         DC    CL40'                                        '  8 - F\n         SPACE\nVE5OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   E50?\n         DC    CL40'LASP TPROTSTRAG                         ' 00 - 07\n         DC    CL40'                              MVCSKMVCDK' 08 - 0F\n         SPACE\n         LTORG\n         SPACE\nVB2OPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   B2??\n         DC    CL40'CONCSDISCSSTIDPSTIDCSCK  STCK SCKC STCKC' 00 - 07\n         DC    CL40'SPT  STPT SPKA IPK       PTLB           ' 08 - 0F\n         DC    CL40'SPX  STPX STAP RRB                      ' 10 - 17\n         DC    CL40'PC   SAC  CFC                           ' 18 - 1F\n         DC    CL40'     IPTE IPM  IVSK IAC  SSAR EPAR ESAR ' 20 - 27\n         DC    CL40'PT   ISKE RRBE SSKE TB   DXR  PGIN PGOUT' 28 - 2F\n         DC    CL40'CSCH HSCH MSCH SSCH STSCHTSCH TPI  SAL  ' 30 - 37\n         DC    CL40'RSCH STCRWSTCPSRCHP SCHM                ' 38 - 3F\n         DC    CL40'BAKR CKSM           SQDR SQER STURAMSTA ' 40 - 47\n         DC    CL40'PALB EREG ESTA LURA TAR  CPYA SAR  EAR  ' 48 - 4F\n         DC    CL40'CSP       MSR       MVPG MVST      CUSE ' 50 - 57\n         DC    CL40'BSG       BSA            CLST SRST      ' 58 - 5F\n         DC    CL40'               CMPSC                    ' 60 - 67\n         DC    CL40'                                        ' 68 - 6F\n         DC    CL40'                              XSCH RP   ' 70 - 77\n         DC    CL40'STCKESACF           STCKFSTSI           ' 78 - 7F\n         DC    CL40'                                        ' 80 - 87\n         DC    CL40'                                        ' 88 - 8F\n         DC    CL40'                                        ' 90 - 97\n         DC    CL40'     SRNM           STFPCLFPC           ' 98 - 9F\n         DC    CL40'                         TRE  CU21 CU12 ' A0 - A7\n         DC    CL40'                                        ' A8 - AF\n         DC    CL40'STFLESTFL LPSWE                         ' B0 - B7\n         DC    CL40'     SRNMT               LFAS           ' B8 - BF\n         DC    CL40'                                        ' C0 - C7\n         DC    CL40'                                        ' C8 - CF\n         DC    CL40'                                        ' D0 - D7\n         DC    CL40'                                        ' D8 - DF\n         DC    CL40'                                        ' E0 - E7\n         DC    CL40'                                        ' E8 - EF\n         DC    CL40'                                        ' F0 - F7\n         DC    CL40'                                   TRAP4' F8 - FF\n         SPACE\nVB3OPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   B3??\n         DC    CL40'LPEBRLNEBRLTEBRLCEBRLDEBRLXDBRLXEBRMXDBR' 00 - 07\n         DC    CL40'KEBR CEBR AEBR SEBR MDEBRDEBR MAEBRMSEBR' 08 - 0F\n         DC    CL40'LPDBRLNDBRLTDBRLCDBRSQEBRSQDBRSQXBRMEEBR' 10 - 17\n         DC    CL40'KDBR CDBR ADBR SDBR MDBR DDBR MADBRMSDBR' 18 - 1F\n         DC    CL40'                    LDER LXDR LXER      ' 20 - 27\n         DC    CL40'                              MAER MSER ' 28 - 2F\n         DC    CL40'                              SQXR MEER ' 30 - 37\n         DC    CL40'MAYLRMYLR MAYR MYR  MAYHRMYHR MADR MSDR ' 38 - 3F\n         DC    CL40'LPXBRLNXBRLTXBRLCXBRLEDBRLDXBRLEXBRFIXBR' 40 - 47\n         DC    CL40'KXBR CXBR AXBR SXBR MXBR DXBR           ' 48 - 4F\n         DC    CL40'TBEDRTBDR      DIEBR               FIEBR' 50 - 57\n         DC    CL40'THDR           DIDBR               FIDBR' 58 - 5F\n         DC    CL40'LPXR LNXR LTXR LCXR      LXR  LEXR FIXR ' 60 - 67\n         DC    CL40'     CXR                                ' 68 - 6F\n         DC    CL40'LPDFRLNDFRCPSDRLCDFRLZER LZDR LZXR FIER ' 70 - 77\n         DC    CL40'                                   FIDR ' 78 - 7F\n         DC    CL40'                    SFPC                ' 80 - 87\n         DC    CL40'                    EFPC                ' 88 - 8F\n         DC    CL40'                    CEFBRCDFBRCXFBR     ' 90 - 97\n         DC    CL40'CFEBRCFDBRCFXBR                         ' 98 - 9F\n         DC    CL40'                    CEGBRCDGBRCXGBR     ' A0 - A7\n         DC    CL40'CGEBRCGDBRCGXBR                         ' A8 - AF\n         DC    CL40'                    CEFR CDFR CXFR      ' B0 - B7\n         DC    CL40'CFER CFDR CFXR                          ' B8 - BF\n         DC    CL40'     LDGR           CEGR CDGR CXGR      ' C0 - C7\n         DC    CL40'CGER CGDR CGXR           LGDR           ' C8 - CF\n         DC    CL40'MDTR DDTR ADTR SDTR LDETRLEDTRLTDTRFIDTR' D0 - D7\n         DC    CL40'MXTR DXTR AXTR SXTR LXDTRLDXTRLTXTRFIXTR' D8 - DF\n         DC    CL40'KDTR CGDTRCUDTRCSDTRCDTR EEDTR     ESDTR' E0 - E7\n         DC    CL40'KXTR CGXTRCUXTRCSXTRCXTR EEXTR     ESXTR' E8 - EF\n         DC    CL40'     CDGTRCDUTRCDSTRCEDTRQADTRIEDTRRRDTR' F0 - F7\n         DC    CL40'     CGXTRCXUTRCXSTRCEXTRQAXTRIEXTRRRXTR' F8 - FF\n         SPACE\nVB9OPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   B9??\n         DC    CL40'LPGR LNGR LTGR LCGR LGR  LURAGLGBR LGHR ' 00 - 07\n         DC    CL40'AGR  SGR  ALGR SLGR MSGR DSGR EREGGLRVGR' 08 - 0F\n         DC    CL40'LPGFRLNGFRLTGFRLCGFRLGFR      LLGFRLLGTR' 10 - 17\n         DC    CL40'AGFR SGFR ALGFRSLGFRMSGFRDSGFRKMAC LRVR ' 18 - 1F\n         DC    CL40'CGR  CLGR                STURGLBR  LHR  ' 20 - 27\n         DC    CL40'                              KM   KMC  ' 28 - 2F\n         DC    CL40'CGFR CLGFR                              ' 30 - 37\n         DC    CL40'                              KIMD KLMD ' 38 - 3F\n         DC    CL40'                              BCTGR     ' 40 - 47\n         DC    CL40'                                        ' 48 - 4F\n         DC    CL40'                                        ' 50 - 57\n         DC    CL40'                                        ' 58 - 5F\n         DC    CL40'CGRT CLGRT                              ' 60 - 67\n         DC    CL40'                                        ' 68 - 6F\n         DC    CL40'          CRT  CLRT                     ' 70 - 77\n         DC    CL40'                                        ' 78 - 7F\n         DC    CL40'NGR  OGR  XGR  FLOGRLLGCRLLGHRMLGR DLGR ' 80 - 87\n         DC    CL40'ALCGRSLBGRCSPG           EPSW IDTE      ' 88 - 8F\n         DC    CL40'TRTT TRTO TROT TROO LLCR LLHR MLR  DLR  ' 90 - 97\n         DC    CL40'ALCR SLBR EPAIRESAIR     ESEA PTI  SSAIR' 98 - 9F\n         DC    CL40'          PTF                           ' A0 - A7\n         DC    CL40'          LPTEA                    PFMF ' A8 - AF\n         DC    CL40'CU14 CU24 CU41 CU42                     ' B0 - B7\n         DC    CL40'                         TRTRESRSTUTRTE ' B8 - BF\n         SPACE\nVE3OPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   E3??\n         DC    CL40'          LTG  LRAG LG        CVBY      ' 00 - 07\n         DC    CL40'AG   SG   ALG  SLG  MSG  DSG  CVBG LRVG ' 08 - 0F\n         DC    CL40'          LT   LRAY LGF  LGH  LLGF LLGT ' 10 - 17\n         DC    CL40'AGF  SGF  ALGF SLGF MSGF DSGF LRV  LRVH ' 18 - 1F\n         DC    CL40'CG   CLG            STG       CVDY      ' 20 - 27\n         DC    CL40'                              CVDG STRVG' 28 - 2F\n         DC    CL40'CGF  CLGF LTGF      CGH       PFD       ' 30 - 37\n         DC    CL40'                              STRV STRVH' 38 - 3F\n         DC    CL40'                              BCTG      ' 40 - 47\n         DC    CL40'                                        ' 48 - 4F\n         DC    CL40'STY  MSY            NY   CLY  OY   XY   ' 50 - 57\n         DC    CL40'LY   CY   AY   SY   MFY       ALY  SLY  ' 58 - 5F\n         DC    CL40'                                        ' 60 - 67\n         DC    CL40'                                        ' 68 - 6F\n         DC    CL40'STHY LAY  STCY ICY            LB   LGB  ' 70 - 77\n         DC    CL40'LHY  CHY  AHY  SHY  MHY                 ' 78 - 7F\n         DC    CL40'NG   OG   XG                  MLG  DLG  ' 80 - 87\n         DC    CL40'ALCG SLBG                     STPQ LPQ  ' 88 - 8F\n         DC    CL40'LLGC LLGH           LLC  LLH  ML   DL   ' 90 - 97\n         DC    CL40'ALC  SLB                                ' 98 - 9F\n         SPACE\nVEBOPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   EB??\n         DC    CL40'                    LMG                 ' 00 - 07\n         DC    CL40'          SRAG SLAG SRLG SLLG      TRACG' 08 - 0F\n         DC    CL40'                    CSY                 ' 10 - 17\n         DC    CL40'                    RLLG RLL            ' 18 - 1F\n         DC    CL40'CLMH CLMY           STMG STCTGSTMH      ' 20 - 27\n         DC    CL40'                    STCMHSTCMY     LCTLG' 28 - 2F\n         DC    CL40'CSG  CDSY                               ' 30 - 37\n         DC    CL40'                              CDSG      ' 38 - 3F\n         DC    CL40'                    BXHG BXLEG          ' 40 - 47\n         DC    CL40'                    ECAG                ' 48 - 4F\n         DC    CL40'     TMY  MVIY      NIY  CLIY OIY  XIY  ' 50 - 57\n         DC    CL40'                                        ' 58 - 5F\n         DC    CL40'                                        ' 60 - 67\n         DC    CL40'          ASI                 ALSI      ' 68 - 6F\n         DC    CL40'                                        ' 70 - 77\n         DC    CL40'          AGSI                ALGSI     ' 78 - 7F\n         DC    CL40'ICMH ICMY                               ' 80 - 87\n         DC    CL40'                              MVCLUCLCLU' 88 - 8F\n         DC    CL40'STMY                          LMH       ' 90 - 97\n         DC    CL40'LMY       LAMY STAMY                    ' 98 - 9F\n         DC    CL40'                                        ' A0 - A7\n         DC    CL40'                                        ' A8 - AF\n         DC    CL40'                                        ' B0 - B7\n         DC    CL40'                                        ' B8 - BF\n         DC    CL40'TP                                      ' C0 - C7\n         SPACE\nVECOPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   EC??\n         DC    CL40'                                        ' 00 - 07\n         DC    CL40'                                        ' 08 - 0F\n         DC    CL40'                                        ' 10 - 17\n         DC    CL40'                                        ' 18 - 1F\n         DC    CL40'                                        ' 20 - 27\n         DC    CL40'                                        ' 28 - 2F\n         DC    CL40'                                        ' 30 - 37\n         DC    CL40'                                        ' 38 - 3F\n         DC    CL40'                    BRXHGBRXLG          ' 40 - 47\n         DC    CL40'                                        ' 48 - 4F\n         DC    CL40'                    RNSBGRISBGROSBGRXSBG' 50 - 57\n         DC    CL40'                                        ' 58 - 5F\n         DC    CL40'                    CGRJ CLGRJ          ' 60 - 67\n         DC    CL40'                                        ' 68 - 6F\n         DC    CL40'CGIT CLGITCIT  CLFIT          CRJ  CLRJ ' 70 - 77\n         DC    CL40'                    CGIJ CLGIJCIJ  CLIJ ' 78 - 7F\n         DC    CL40'                                        ' 80 - 87\n         DC    CL40'                                        ' 88 - 8F\n         DC    CL40'                                        ' 90 - 97\n         DC    CL40'                                        ' 98 - 9F\n         DC    CL40'                                        ' A0 - A7\n         DC    CL40'                                        ' A8 - AF\n         DC    CL40'                                        ' B0 - B7\n         DC    CL40'                                        ' B8 - BF\n         DC    CL40'                                        ' C0 - C7\n         DC    CL40'                                        ' C8 - CF\n         DC    CL40'                                        ' D0 - D7\n         DC    CL40'                                        ' D8 - DF\n         DC    CL40'                    CGRB CLGRB          ' E0 - E7\n         DC    CL40'                                        ' E8 - EF\n         DC    CL40'                              CRB  CLRB ' F0 - F7\n         DC    CL40'                    CGIB CLGIBCIB  CBIB ' F8 - FF\n         SPACE\nVEDOPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   ED??\n         DC    CL40'                    LDEB LXDB LXEB MXDB ' 00 - 07\n         DC    CL40'KEB  CEB  AEB  SEB  MDEB DEB  MAEB MSEB ' 08 - 0F\n         DC    CL40'TCEB TCDB TCXB      SQEB SQDB      MEEB ' 10 - 17\n         DC    CL40'KDB  CDB  ADB  SDB  MDB  DDB  MADB MSDB ' 18 - 1F\n         DC    CL40'                    LDE  LXD  LXE       ' 20 - 27\n         DC    CL40'                              MAE  MSE  ' 28 - 2F\n         DC    CL40'                    SQE  SQD       MEE  ' 30 - 37\n         DC    CL40'MAYL MYL  MAY  MY   MAYH MYH  MAD  MSD  ' 38 - 3F\n         DC    CL40'SLDT SRDT                               ' 40 - 47\n         DC    CL40'SLXT SRXT                               ' 48 - 4F\n         DC    CL40'TDCETTDGET          TDCDTTDGDT          ' 50 - 57\n         DC    CL40'TDCXTTDGXT                              ' 58 - 5F\n         DC    CL40'                    LEY  LDY  STEY STDY ' 60 - 67\n         DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>\n         SPACE\n         DROP  R11,R10,R8        VIRTSTOR.\n         TITLE 'VIRTUAL STORAGE MONITOR - DAT-OFF ROUTINE'\n         DROP  R12               EXAMINEC.\n         USING VZDATOFF,R15\nVZDATOFF DS    0D\n         STM   R14,R12,12(R13)   SAVE VIRTUAL ADDRESS REGISTERS.\n         LRA   R12,VZDATOFF\n         LRA   R4,0(,R4)         CONVERT TARGET ADDRESS TO REAL.\n         STOSM ZPSWVIRT,X'00'    REMEMBER THE CURRENT SYSTEM MASK.\n         LA    R1,ZDATISON\n         ST    R1,ZPSWVIRT+4     REMEMBER V=V \"RETURN\" ADDRESS.\n         OI    ZPSWVIRT+4,X'80'  ENSURE AMODE IS 31.\n         LRA   R1,ZDATAWAY\n         ST    R1,ZPSWREAL+4     LOAD V=R \"ENTRY\" ADDRESS.\n         OI    ZPSWREAL+4,X'80'  ENSURE AMODE IS 31.\n         LPSW  ZPSWREAL          USE DAT-OFF TO BYPASS PAGE PROTECTION.\n         DROP  R15               VZDATOFF.\n         SPACE\n         USING VZDATOFF,R12\nZDATAWAY CLI   VZREQ,C'A'        AND REQUESTED?\n         BE    ZCHNGAND          YES.\n         CLI   VZREQ,C'O'        OOR REQUESTED?\n         BE    ZCHNGOOR          YES.\n         CLI   VZREQ,C'R'        REP REQUESTED?\n         BE    ZCHNGREP          YES.\n         CLI   VZREQ,C'X'        XOR REQUESTED?\n         BE    ZCHNGXOR          YES.\n         DC    H'0'              LOST TRACK OF REALITY SO ABEND.\n         SPACE\nZCHNGAND EX    R3,ZCHNGNC        AND DATA INTO TARGET ADDRESS.\n         B     ZCHANGED\nZCHNGOOR EX    R3,ZCHNGOC        OR DATA INTO TARGET ADDRESS.\n         B     ZCHANGED\nZCHNGREP EX    R3,ZCHNGMVC       MOVE DATA INTO TARGET ADDRESS.\n         B     ZCHANGED\nZCHNGXOR EX    R3,ZCHNGXC        XOR DATA INTO TARGET ADDRESS.\nZCHANGED LPSW  ZPSWVIRT          TURN DAT ON.\n         SPACE\nZDATISON LM    R14,R12,12(R13)   RESTORE VIRTUAL ADDRESS REGISTERS.\n         BR    R14               RETURN TO CALLER.\n         SPACE\nZCHNGNC  NC    0(0,R4),ZCHNGTXT                 <<< EXECUTED >>>\nZCHNGMVC MVC   0(0,R4),ZCHNGTXT                 <<< EXECUTED >>>\nZCHNGOC  OC    0(0,R4),ZCHNGTXT                 <<< EXECUTED >>>\nZCHNGXC  XC    0(0,R4),ZCHNGTXT                 <<< EXECUTED >>>\n         DROP  R12               VZDATOFF.\n         SPACE\nVZREQ    DC    CL4' '\nZCHNGTXT DC    XL20'00'          REPLACEMENT DATA.\n         DS    0D\nZPSWREAL DC    XL8'000C000000000000'\nZPSWVIRT DC    XL8'070C000000000000'\n         DS    0D\nVBZLEN   EQU   *-VZDATOFF        LENGTH OF DAT-OFF ROUTINE.\n         SPACE 2\n         USING EXAMINEC,12       RESTORE BASE FOR OTHER OPTIONS.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMSPACEO": {"ttr": 24072, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\x05\\x00\\x00\\x00\\x89\\x05_\\x01\\x06\\x19\\x1f\\x13#\\x03>\\x01\\xe5\\x00L\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "52.05", "flags": 0, "createdate": "1989-02-24T00:00:00", "modifydate": "2006-07-10T13:23:00", "lines": 830, "newlines": 485, "modlines": 76, "user": "UBQ001"}, "text": "IMSPACER TITLE 'DASD FREE SPACE MONITOR - 07 FEB 1989'\n***********************************************************************\n*                                                                     *\n*        IMSPACER - DASD FREE SPACE MONITOR                           *\n*                                                                     *\n*        IMSPACER IS A PROGRAM FOR A CONSTANTLY RUNNING STARTED TASK  *\n*   WHICH WILL COLLECT DASD FREE SPACE INFORMATION EVERY TEN (10)     *\n*   MINUTES.  SVC 78 IS USED TO COLLECT THE INFORMATION.  THE FREE    *\n*   SPACE DATA IS ACCUMULATED IN THE EXTENDED REGION AND IS ACCESS-   *\n*   IBLE VIA OPTION \"$\" OF I-MON - THE INTERACTIVE MONITORING PROGRAM *\n*   EXECUTING IN ANY ADDRESS SPACE.  BY DEFAULT, IMSPACER USES AN SVC *\n*   78 FLAG BYTE OF X'40' WHICH MEANS GENERATE A TYPE 19 SMF RECORD   *\n*   IF THE INSTALLATION IS COLLECTING VOLUME ACCOUNTING INFORMATION.  *\n*   A PROGRAM PARAMETER OF 'SMF' SPECIFIES THE USE OF X'80' AS THE    *\n*   FLAG BYTE TO UNCONDITIONALLY REQUEST A TYPE 19 RECORD.  TYPE 19   *\n*   RECORDS MAY BE SUPPRESSED BY USING A PROGRAM PARAMETER OF 'NOSMF' *\n*   WHICH SPECIFIES THAT A FLAG BYTE OF X'00' IS TO BE USED.  THE     *\n*   GENERATION OF TYPE 19 SMF RECORDS IS A CONVENIENT WAY TO SAVE     *\n*   DASD FREE SPACE INFORMATION ACROSS IPLS FOR REGULAR REPORTING.    *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        A DSST ENTRY (DSSTE) EXISTS FOR EACH CONFIGURED (\"SYSGENNED\")*\n*   DASD (EXCLUDING 23XX AND DEMOUNTABLE DISKS) IN EVERY DSST.  THE   *\n*   DSSTE CONTAINS THE UCB ADDRESS AND VOLUME PARTICULARS CURRENT AT  *\n*   THE SNAP-SHOT SAMPLE TIME.  DSST ENTRIES FOR OFFLINE, UNMOUNTED   *\n*   AND NON-OS VOLUMES WILL BE ZERO EXCEPT FOR THE UCB ADDRESS.       *\n*                                                                     *\n*        RETURN CODES:                                                *\n*                0 - IMPSPACE WAS STOPPED BY AN OPERATOR STOP COMMAND.*\n*               12 - AN IMPSPACE TASK IS ALREADY ACTIVE SO A SECOND   *\n*                    IMPSPACE TASK SHOULD NOT BE STARTED.             *\n*                                                                     *\n*        IMSPACER IS NOT REENTRANT NOR SERIALLY REUSABLE.             *\n*                                                                     *\n*        IMSPACER REQUIRES APF AUTHORIZATION.                         *\n*                                                                     *\n*        IMSPACER USES MACROS FROM SYS1.MACLIB AND SYS1.MODGEN.       *\n*                                                                     *\n*        IMSPACER USES 31-BIT ADDRESSABILITY.                         *\n*                                                                     *\n*        IMSPACER REQUIRES 24-BIT RESIDENCY.                          *\n*                                                                     *\n*        IMSPACER WAS WRITTEN BY GREG PRICE OF PRYCROFT SIX PTY. LTD. *\n*                                                                     *\n*        (C) COPYRIGHT 1989-2006 PRYCROFT SIX PTY LTD                 *\n*                                                                     *\n***********************************************************************\n         EJECT\nIMSPACER CSECT\nIMSPACER AMODE 31\nIMSPACER RMODE 24\n         USING IMSPACER,R15\n         B     SPCSTART             BRANCH AROUND HEADER.\n         DC    AL1(47)\n         DC    CL47'IMSPACER COPYRIGHT (C) 1989 PRYCROFT SIX P/L   '\nFRSTDSST DC    A(0)                 POINTER TO FIRST DSST.\nLASTDSST DC    A(0)                 POINTER TO LAST DSST.\n         DC    CL8'&SYSDATC'\n         DROP  R15                  IMSPACER.\nSPCSTART STM   R14,R12,12(R13)\n         LR    R12,R15              SET UP BASE REGISTERS.\n         LA    R11,2048(,R12)\n         LA    R11,2048(,R11)\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         USING IMSPACER,R12,R11,R10\n         LA    R2,SAVEAREA          POINT TO NEW SAVE AREA.  WELL, IT\n         ST    R13,4(,R2)           HAS TO BE DONE.  I MEAN, YOU GET\n         ST    R2,8(,R13)           THE DUMP, AND IF THE SAVE AREAS ARE\n         LR    R13,R2               STUFFED, WHAT HOPE HAVE YOU GOT?\n         L     R2,0(,R1)            POINT TO PROGRAM PARAMETER.\n         SLR   R0,R0\n         ICM   R0,3,0(R2)           IS THERE ONE?\n         BZ    DONEPARM             NO, LENGTH IS ZERO.\n         CLI   2(R2),C'5'           FIVE MINUTE INTERVALS REQUESTED?\n         BNE   FIVEOKAY             NO.\n         OI    FLAGS,FIVEFLAG       YES.\n         LA    R2,1(,R2)            POINT PAST '5'.\n         BCT   R0,FIVEOKAY          GO TEST FOR SMF SPECIFICATION.\n         B     DONEPARM             SKIP TEST FOR PARM='5'.\nFIVEOKAY CLC   2(3,R2),=C'SMF'      PARM='SMF'?\n         BNE   TRYNOSMF             NO.\n         NI    SVC78FLG,255-X'40'   YES, RESET SMF=TEST.\n         OI    SVC78FLG,X'80'       YES, TRY TO FORCE SMF 19 RECORDS.\n         B     DONEPARM\nTRYNOSMF CLC   2(5,R2),=C'NOSMF'    PARM='NOSMF'?\n         BNE   WRONGPRM             NO, INVALID PARAMETER.\n         NI    SVC78FLG,255-X'C0'   YES, SUPPRESS SMF 19 RECORDS.\n         B     DONEPARM\nWRONGPRM WTO   MF=(E,WRONGWTO)      INDICATE INVALID PARAMETER.\n         SPACE\nDONEPARM L     R4,540               POINT TO THE CURRENT TCB.\n         L     R4,12(,R4)           POINT TO THE TIOT.\n         MVC   TWICEWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   STARTWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   SVC78WTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   FINALWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   LOGICWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   INPUTWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   WRITEWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   PURGEWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         LA    R4,24(,R4)           POINT TO TIOELNGH.\n         SLR   R5,R5\nCHKDDNAM CLI   0(R4),0              ZERO LENGTH ENTRY?\n         BE    FILEOKAY             NO, CHECK OUT THIS ENTRY.\n         CLC   SAVEHIST+40(8),4(R4) COMPARE DDNAME.\n         BE    FILEHERE             FILE EXISTS SO GO AND OPEN IT.\n         IC    R5,0(,R4)            GET TIOT ENTRY LENGTH.\n         AR    R4,R5                POINT TO NEXT TIOT ENTRY.\n         B     CHKDDNAM             CHECK OUT THIS ENTRY.\nFILEHERE OI    FLAGS,FILEFLAG       SAVEHIST IS ALLOCATED.\nFILEOKAY DS    0H\n         ENQ   (IMPMAJOR,IMPMINOR,E,IMINRLEN,SYSTEM),RET=USE\n         LTR   R15,R15              IMSPACER ALREADY ACTIVE?\n         BZ    ONE@ONCE             NO, THIS IS THE ONLY IMSPACER.\n         WTO   MF=(E,TWICEWTO)      DISPLAY IMSPACER IS ALREADY UP.\n         L     R13,4(,R13)          POINT TO PREVIOUS SAVE AREA.\n         LM    R14,R12,12(R13)      RESTORE REGISTERS.\n         LA    R15,4                COND CODE = 4.\n         BSM   0,R14                RETURN TO CALLER.\nONE@ONCE DS    0H\n         MODESET MF=(E,MDSTSUP0)    GET INTO SYSTEM STATE.\n         XC    WORK,WORK            CLEAR AN ECB.\n         LA    R1,WORK              POINT TO A MAKESHIFT ECB.\n         SYSEVENT TRANSWAP          BECOME NON-SWAPPABLE.\n         LTR   R15,R15              WAS ANYTHING TO BE DONE?\n         BNZ   TRANOKAY             NO, ALREADY NON-SWAPPABLE.\n         WAIT  ECB=WORK             YES, WAIT TILL TRANSWAP COMPLETE.\nTRANOKAY DS    0H                   CAN NOW BE ACCESSED BY TS USERS.\n         MODESET MF=(E,MDSTPROB)    REVERT TO PROBLEM STATE.\n         EXTRACT MF=(E,EXTRCOMM)    GET ADDRESS OF COMMUNICATION LIST.\n         TM    FLAGS,FILEFLAG       IS SAVEHIST ALLOCATED?\n         BZ    DASDINIT             NO, CAN'T READ IT.\n         OPEN  (SAVEHIST,INPUT)     YES, OPEN IT.\n         SLR   R3,R3                CLEAR DSST BYTES-TO-GO.\nREADLOOP GET   SAVEHIST,GETPUTBF    READ A RECORD.\n         LA    R0,1\n         A     R0,INRECNUM          INCREMENT READ RECORD COUNT.\n         ST    R0,INRECNUM\n         LA    R2,GETPUTBF          POINT TO IT.\n         LTR   R3,R3                PROCESSING DSSTE SLOTS?\n         BP    GOTDSSTE             YES.\n         CLC   =C'DSST',DSSTELEN-4(R2)\n         BNE   LOGICERR\n         USING DSST,R2\n         TM    DSSTSIZE+3,X'07'     CHECK FOR EXPECTED ALIGNMENT.\n         BNZ   LOGICERR\n         TM    DSSTADDR+3,X'07'\n         BNZ   LOGICERR\n         TM    DSSTDSST+3,X'07'\n         BNZ   LOGICERR\n         TM    DSSTBACK+3,X'07'\n         BNZ   LOGICERR\n         TM    DSSTDATE+3,X'0F'     CHECK FOR EXPECTED DATE SIGN.\n         BNO   LOGICERR\n         ICM   R0,15,DSSTSIZE       GET SIZE OF THIS DSST.\n         BNP   LOGICERR\n         GETMAIN RU,LV=(0),SP=23,LOC=(ANY,ANY)\n         MVC   0(DSSTBLEN,R1),DSST  LOAD THE DSST BASE.\n         DROP  R2                   DSST.\n         LR    R5,R1\n         USING DSST,R5\n         ST    R5,DSSTADDR          CORRECT ADDRESS FOR FREEMAIN.\n         XC    DSSTDSST,DSSTDSST    CLEAR FORWARD POINTER.\n         ICM   R0,15,FRSTDSST       FIRST ONE?\n         BNZ   LINKREAD             NO.\n         ST    R5,FRSTDSST          YES.\n         XC    DSSTBACK,DSSTBACK    CLEAR BACKWARD POINTER.\n         B     NEWLAST\nLINKREAD L     R1,LASTDSST\n         ST    R1,DSSTBACK\n         ST    R5,8(,R1)\nNEWLAST  ST    R5,LASTDSST\n         LA    R0,1\n         A     R0,IDSSTNUM          INCREMENT READ DSST COUNT.\n         ST    R0,IDSSTNUM\n         L     R3,DSSTSIZE\n         LA    R0,DSSTBLEN\n         SR    R3,R0                GET REMAINING DSSTE TOTAL BYTES.\n         LA    R6,DSSTE             POINT TO THE FIRST DSSTE.\n         B     READLOOP\n         SPACE\nGOTDSSTE MVC   0(DSSTELEN,R6),0(R2) LOAD DSSTE.\n         LA    R0,DSSTELEN\n         SR    R3,R0                ADJUST REMAINING BYTES FOR DSST.\n         AR    R6,R0                POINT TO NEXT DSSTE SLOT.\n         B     READLOOP\n         SPACE\nLOGICERR WTO   MF=(E,LOGICWTO)      BAD DATA ON INPUT.\n         SPACE\nEOINPUT  CLOSE (SAVEHIST)           CLOSE INPUT FILE.\n         L     R0,INRECNUM\n         CVD   R0,WORK\n         MVC   INRECCNT,ED7\n         ED    INRECCNT,WORK+4\n         L     R0,IDSSTNUM\n         CVD   R0,WORK\n         MVC   IDSSTCNT,ED7\n         ED    IDSSTCNT,WORK+4\n         WTO   MF=(E,INPUTWTO)      SAVEHIST NOW READ.\n         SPACE\nDASDINIT L     R4,CVTPTR(,0)        POINT TO THE CVT.\n         USING CVT,R4\n         SLR   R2,R2                ZERO DASD COUNTER.\n         MVC   OSBITS,CVTDCB        COPY OS FLAG BYTE FROM CVTDCB.\n         TM    OSBITS,X'93'         MVS/XA OR LATER?\n         BNO   MSPUCB1              NO, ASSUME MSP OS.\n         TM    OSBITS,X'9B'         MVS/ESA OR LATER?\n         BNO   XAUCB1               NO, ASSUME MVS/XA.\n         MVC   OSLEVEL,CVTOSLVL     COPY OS FLAG BYTE FROM CVTOSLVL.\n         TM    OSLEVEL,CVTUCBSV     UCB SERVICES AVAILABLE?\n         BZ    XAUCB1               NO, USE THE STATIC UCB CHAIN.\n         BAS   R8,GETDACNT          YES, GET DASD UCB COUNT.\n         L     R2,VOLCOUNT          LOAD THE MAXIMUM VOLUME COUNT.\n         SLA   R2,4                 USE FUDGE FACTOR OF 16.\n         B     GOTUCBCT\nXAUCB1   L     R3,CVTUCBA           POINT TO THE FIRST UCB.\n         B     FRSTUCB\n         USING UCBOB,R3\nNXTUCB   ICM   R3,15,UCBNXUCB       POINT TO THE NEXT UCB.\n         BZ    GOTUCBCT             END OF UCB CHAIN.\nFRSTUCB  CLI   UCBID,UCBSTND        STANDARD UCB?\n         BNE   NXTUCB               NO.\n         CLI   UCBTBYT3,UCB3DACC    DASD?\n         BNE   NXTUCB               NO.\n         LA    R2,1(,R2)            YES, INCREMENT COUNTER.\n         B     NXTUCB               CHECK NEXT UCB.\nMSPUCB1  NI    SVC78FLG,X'C0'       TURN OFF INVALID FLAGS.\n         L     R4,CVTIXAVL          POINT TO THE IOS COMM'N AREA.\n         DROP  R4                   CVT.\n         L     R4,388(,R4)          POINT TO THE UCB LOOKUP TABLE.\n         B     FRSTUCB1             FIRST TIME THROUGH THE LOOP.\nNEXTUCB1 LA    R4,4(0,R4)           POINT TO NEXT FULLWORD UCB ADDRESS.\nFRSTUCB1 ICM   R3,B'1111',0(R4)     GET UCB ADDRESS.\n         BZ    NEXTUCB1             EMPTY ENTRY.\n         BM    GOTUCBCT             NO MORE UCB ENTRIES.\n         CLI   UCBID,UCBSTND        STANDARD UCB?\n         BNE   NEXTUCB1             NO.\n         CLI   UCBTBYT3,UCB3DACC    DASD?\n         BNE   NEXTUCB1             NO.\n         LA    R2,1(,R2)            YES, INCREMENT COUNTER.\n         B     NEXTUCB1             CHECK NEXT UCB.\n         SPACE\nGOTUCBCT ST    R2,VOLCOUNT          SAVE THE MAXIMUM VOLUME COUNT.\n         MH    R2,LENDSSTE          MULTIPLY BY DSST ENTRY SIZE.\n         LA    R2,DSSTBLEN(,R2)     ADD SIZE OF BASE.\n         ST    R2,GMSZDSST          DSST GETMAIN SIZE (MULTIPLE OF 8).\n         LR    R0,R2                COPY GETMAIN SIZE.\n         GETMAIN RU,LV=(0),LOC=(BELOW,ANY)\n         ST    R1,WKDSSTAD          ADDRESS OF WORKING-STORAGE DSST.\n         LR    R5,R1                POINT TO WORKING-STORAGE DSST.\n         USING DSST,R5\n         XC    DSSTDSST(8),DSSTDSST ZERO THE CHAINING POINTERS.\n         LA    R6,DSSTE             POINT TO FIRST ENTRY.\n         USING DSSTE,R6\n         SPACE\n         TM    OSBITS,X'93'         MVS/XA OR LATER?\n         BNO   MSPUCB2              NO, ASSUME MSP OS.\n         TM    OSLEVEL,X'08'        UCB SERVICES AVAILABLE?\n         BO    IMSPINIT             YES, DO NOT GET UCB ADDRESSES.\n         L     R3,CVTUCBA-CVT(,R4)  POINT TO THE FIRST UCB.\n         B     FIRSTUCB\nNEXTUCB  ICM   R3,15,UCBNXUCB       POINT TO THE NEXT UCB.\n         BZ    IMSPINIT             END OF UCB CHAIN.\nFIRSTUCB CLI   UCBID,UCBSTND        STANDARD UCB?\n         BNE   NEXTUCB              NO.\n         CLI   UCBTBYT3,UCB3DACC    DASD?\n         BNE   NEXTUCB              NO.\n         XC    DSSTE(DSSTELEN),DSSTE CLEAR THE DSSTE OF RESIDUAL DATA.\n         ST    R3,DSSTEUCB          SUPPLY UCB ADDRESS FOR THIS ENTRY.\n         LA    R6,DSSTELEN(,R6)     POINT TO NEXT VOLUME'S SLOT.\n         B     NEXTUCB              CHECK NEXT UCB.\nMSPUCB2  L     R4,CVTPTR(,0)        POINT TO THE CVT.\n         USING CVT,R4\n         L     R4,CVTIXAVL          POINT TO THE IOS COMM'N AREA.\n         DROP  R4                   CVT.\n         L     R4,388(,R4)          POINT TO THE UCB LOOKUP TABLE.\n         B     FRSTUCB2             FIRST TIME THROUGH THE LOOP.\nNEXTUCB2 LA    R4,4(0,R4)           POINT TO NEXT FULLWORD UCB ADDRESS.\nFRSTUCB2 ICM   R3,B'1111',0(R4)     GET UCB ADDRESS.\n         BZ    NEXTUCB2             EMPTY ENTRY.\n         BM    IMSPINIT             NO MORE UCB ENTRIES.\n         CLI   UCBID,UCBSTND        STANDARD UCB?\n         BNE   NEXTUCB2             NO.\n         CLI   UCBTBYT3,UCB3DACC    DASD?\n         BNE   NEXTUCB2             NO.\n         XC    DSSTE(DSSTELEN),DSSTE CLEAR THE DSSTE OF RESIDUAL DATA.\n         ST    R3,DSSTEUCB          SUPPLY UCB ADDRESS FOR THIS ENTRY.\n         LA    R6,DSSTELEN(,R6)     POINT TO NEXT VOLUME'S SLOT.\n         B     NEXTUCB2             CHECK NEXT UCB.\n         DROP  R6,R3                DSSTE, UCBOB.\n         SPACE\nIMSPINIT WTO   MF=(E,STARTWTO)      ISSUE INITIALIZATION NOTIFICATION.\n         SPACE 2\nWAITLOOP TIME  DEC                  GET THE TIME OF DAY IN DECIMAL.\n         ST    R0,WORK              PUT THE TIME INTO STORAGE.\n         MVC   WORK+4(1),WORK+1     COPY MINUTES TO WORK AREA.\n         NI    WORK+4,X'0F'         GET MINUTES UNITS DIGIT.\n         NI    WORK+1,X'F0'         TRUNCATE TO TEN MINUTE BOUNDARY.\n         MVI   WORK+2,X'0C'         SUPPLY PACKED DECIMAL SIGN.\n         TM    FLAGS,FIVEFLAG       FIVE MINUTE INTERVALS REQUESTED?\n         BZ    NEXTTEN              NO, USE TEN MINUTE INTERVALS.\n         CLI   WORK+4,4             5 MINUTES INTO 10 MINUTES YET?\n         BH    NEXTTEN              YES, SO UP THE TENS DIGIT.\n         OI    WORK+1,X'05'         NO, GO FOR NEXT 5 MINUTE TIME.\n         B     HOURSOK              SHOULD STILL HAVE VALID TIME.\nNEXTTEN  AP    WORK(3),=P'100'      ADD TEN MINUTES TO TIME.\n         CLI   WORK+1,X'60'         SIXTY MINUTES?\n         BL    HOURSOK              NO.\n         AP    WORK(3),=P'400'      YES, SHOULD HAVE INCREMENTED HOURS.\n         CLI   WORK,X'24'           REACHED 24 O'CLOCK?\n         BL    HOURSOK              NO.\n         MVI   WORK,X'00'           YES, MAKE MIDNIGHT 0 O'CLOCK.\n         STIMER WAIT,LT=MIDNIGHT    GO TO SLEEP UNTIL THEN.\n         TM    FLAGS,FILEFLAG       SAVEHIST FILE PRESENT?\n         BO    BACKITUP             YES, BACK UP DATA TO FILE.\nHOURSOK  DS    0H                   HAVE DESIRED HHMM IN WORK H/W.\n         STIMER WAIT,BINTVL=SNOOZE  GO TO SLEEP.\n         L     R1,COMMADDR          POINT TO MODIFY/STOP ECB ADDRESS.\n         L     R1,0(,R1)            POINT TO MODIFY/STOP ECB.\n         TM    0(R1),X'40'          HAS THE ECB BEEN POSTED?\n         BO    STOPSPAC             YES, TERMINATE IMSPACER.\n         TIME  DEC                  NOW GET THE CURRENT TIME.\n         CLM   R0,B'1100',WORK      TIME FOR NEXT SAMPLE YET?\n         BL    HOURSOK              NO, HAVE ANOTHER LITTLE SNOOZE.\n         L     R5,WKDSSTAD          YES, POINT TO DSST BUFFER.\n         STM   R0,R1,DSSTTIME       SUPPLY TIME-STAMP.\n         SLR   R0,R0\n         STH   R0,GOODVOLS          ZERO \"GOOD\" VOLUME COUNT.\n         L     R2,VOLCOUNT          LOAD THE VOLUME COUNT.\n         LA    R6,DSSTE             POINT TO THE FIRST DSSTE.\n         TM    OSLEVEL,CVTUCBSV     UCB SERVICES AVAILABLE?\n         BZ    LSPACELP             NO, USE PRIMED UCB ADDRESSES.\n         L     R3,CVTPTR(,0)        POINT TO THE CVT.\n         USING CVT,R3\n         L     R7,CVTIXAVL          POINT TO THE IOCM.\n         DROP  R3                   CVT.\n         USING IOCOM,R7\n         L     R7,IOCIOVTP          POINT TO THE IOVT.\n         DROP  R7                   IOCOM.\n         L     R7,8(,R7)            POINT TO THE UCB LOOK-UP TABLE.\n         TM    OSLEVEL+5,CVTH7720   Z/OS 1.7 OR LATER?\n         BNO   *+8                  NO.\n         LA    R7,8(,R7)            YES.\n         L     R2,16(,R7)           GET THE TOTAL UCB COUNT.\n         L     R7,12(,R7)           POINT TO FIRST ENTRY.\n         USING DSSTE,R6\nLSPACELP TM    OSLEVEL,X'08'        UCB SERVICES AVAILABLE?\n         BZ    USEUCBAD             NO, USE PRIMED UCB ADDRESSES.\n         MVI   DSSTEVOL,0           YES, FLAG DSST ENTRY UNUSED AS YET.\n         L     R3,8(,R7)            GET UCB ADDRESS.\n         USING UCBOB,R3\n         CLI   UCBID,UCBSTND        STANDARD UCB?\n         BNE   NXTDSSTE             NO, TRY NEXT UCB.\n         CLI   UCBTBYT3,UCB3DACC    DASD?\n         BNE   NXTDSSTE             NO, TRY NEXT UCB.\n         UNPK  DSSTEUCB(5),UCBCHAN(3)   LOAD DEVICE NUMBER.\n         TR    DSSTEUCB,HEX-C'0'\n         XC    WORK,WORK\n         B     GOTUCBAD\nUSEUCBAD L     R3,DSSTEUCB          POINT TO THIS VOLUME'S UCB.\n         MVC   WORK(6),DSSTECPV     SAVE DEVICE CONSTANTS.\nGOTUCBAD XC    DSSTEVOL(DSSTELEN-4),DSSTEVOL ZERO PREVIOUS DATA.\n         MVC   DSSTECPV(6),WORK     RESTORE DEVICE CONSTANTS.\n         TM    UCBSTAT,UCBONLI      IS THIS UNIT ONLINE?\n         BZ    NXTDSSTE             NO, SKIP LSPACE.\n         TM    UCBSTAT,UCBCHGS      IS THIS UNIT PENDING OFFLINE?\n         BO    NXTDSSTE             YES, SKIP LSPACE.\n         TM    UCBDMCT,UCBMOUNT     MOUNT PENDING?\n         BO    NXTDSSTE             YES, SKIP LSPACE.\n         TM    UCBFLA,UCBNRY        IS THE DEVICE NOT READY?\n         BO    NXTDSSTE             YES, SKIP LSPACE.\n         TM    UCBFLA,UCBDEFER+UCBBOX DEFERRING I/O OR BOXED?\n         BNZ   NXTDSSTE             YES, SKIP LSPACE.\n         CLI   UCBVOLI,C' '         ANY VOLUME SERIAL NUMBER?\n         BNH   NXTDSSTE             NO, SKIP LSPACE.\n         CLI   UCBVOLI,C'9'         VOL=SER=SCRTCH?  (X'FF'?)\n         BH    NXTDSSTE             YES, SKIP LSPACE.\n         CLI   UCBVTOC+2,X'01'      OS VTOC ADDRESS?  (R OF TTR0 IS 1?)\n         BNE   NXTDSSTE             NO, SKIP LSPACE.  (VM DISK?)\n         ICM   R0,3,UCBVTOC         OS VTOC ADDRESS?  (TT OF TTR0 > 0?)\n         BZ    NXTDSSTE             NO, SKIP LSPACE.  (VM DISK?)\n         TM    OSBITS,X'13'         MVS?\n         BNO   ORIGLSPC             NO, IT MUST BE MSP.\n         TM    UCBFL5,UCBSMS        YES, SMS-MANAGED VOLUME?\n         BNO   EXTDLSPC             NO, DON'T ASK SMS.\n         LA    R1,SMSWORKA          POINT TO SSOB AREA.\n         USING SSOB,R1\n         LA    R0,SSOBHSIZ          LOAD SSOB LENGTH.\n         STH   R0,SSOBLEN\n         MVC   SSOBID,=C'SSOB'      LOAD SSOB IDENTIFIER.\n         LA    R0,SSOBSSMS          LOAD SSOB FUNCTION CODE TO 55.\n         STH   R0,SSOBFUNC\n         L     R14,CVTPTR(,0)       POINT TO THE CVT.\n         USING CVT,R14\n         L     R14,CVTJESCT         POINT TO THE JESCT.\n         DROP  R14                  CVT.\n         USING JESCT,R14\n         L     R14,JESCTEXT         POINT TO PAGEABLE JESCT ENTENSION.\n         DROP  R14                  JESCT.\n         USING JESPEXT,R14\n         L     R15,12               PREPARE FOR NO SMS SUBSYSTEM.\n         ICM   R14,15,JESSMSIB      POINT TO THE SMS SSIB.\n         BZ    EXTDLSPC             NO SSIB SO SKIP SMS CALL.\n         DROP  R14                  JESPEXT.\n         ST    R14,SSOBSSIB         SAVE THE SSIB ADDRESS.\n         XC    SSOBRETN,SSOBRETN    RESET SUBSYSTEM RETURN CODE.\n         LA    R8,SSOB+SSOBHSIZ     POINT PAST SSOB HEADER.\n         ST    R8,SSOBINDV          LOAD FUNCTION-DEPENDENT AREA PTR.\n         USING IEFSSSA,R8\n         LA    R0,SSSALN+SSSA1LN    LOAD SSOB SMS EXTENTION LENGTH.\n         STH   R0,SSSALEN\n         MVC   SSSAID,=C'SSSA'      SUPPLY IDENTIFIER.\n         MVI   SSSAVER+1,SSOBSSVR   SUPPLY VERSION INDICATOR.\n         MVI   SSSASFN+1,SSSAACTV   SUPPLY SUB-FUNCTION CODE.\n         MVI   SSSAIFLG,SSSANAUT    INDICATE NON-AUTHORIZED CALLER.\n         MVI   SSSA1TYP,SSSA1VOL    FLAG VOLSER IS SUPPLIED.\n         MVI   SSSA1CNT+3,1         FLAG ONE CONSTRUCT PASSED.\n         MVI   SSSA1NML+1,6         SET VOLUME SERIAL NUMBER LENGTH.\n         MVC   SSSA1NAM(6),UCBVOLI  LOAD VOLUME SERIAL NUMBER.\n         DROP  R1                   SSOB.\n         ST    R1,WORK              SAVE PARAMETER LIST ITEM.\n         OI    WORK,X'80'           INDICATE ONLY ITEM IN LIST.\n         MODESET MF=(E,MDSTSUP0)    GET INTO SUPERVISOR STATE.\n         LA    R1,WORK              POINT TO PARAMETER LIST.\n         IEFSSREQ                   PASS REQUEST TO SSI.\n         LR    R4,R15               COPY SSI RETURN CODE.\n         MODESET MF=(E,MDSTPROB)    YES, REVERT TO PROBLEM STATE.\n         LTR   R4,R4                WAS SSI CALL SUCCESSFUL?\n         BNZ   EXTDLSPC             NO, GO ISSUE AN LSPACE.\n         LA    R1,SMSWORKA          POINT TO SSOB AREA.\n         USING SSOB,R1\n         ICM   R4,15,SSOBRETN       WAS SSI RETURN CODE ZERO?\n         BNZ   EXTDLSPC             NO, GO ISSUE AN LSPACE.\n         DROP  R1                   SSOB.\n         ICM   R0,15,SSSA1PTR       AREA RETURNED?\n         BZ    EXTDLSPC             NO, SMS PROBLEM.\n         MVC   SSSA1LEN,SSSA1ALN    YES, SET SUPPLIED LENGTH VALUE.\n         DROP  R8                   SSSA.\n         LR    R8,R0                POINT TO RETURNED VLD.\n         USING VLD,R8\n         MVC   DSSTEGRP,VLDSTGRP    LOAD SMS STORAGE GROUP OF VOLUME.\n         OC    DSSTEGRP,=CL8' '     CONVERT TRAILING NULLS TO BLANKS.\n         LA    R1,VLDMVSS           POINT TO OLD MVS STATUS FLAGS.\n         CLC   =H'3',VLDPVER        \"NEW\" VLD?\n         BH    MVSCHECK             NO.\n         L     R1,VLDSYSOF          YES, GET OFFSET FOR THIS SYSTEM.\n         LA    R1,VLDEF(R1)         POINT TO SYSTEM DATA ENTRY.\n         USING VLDSYSDT,R1\n         LA    R1,VLDSTMVS          POINT TO MVS STATUS BYTE.\n         DROP  R1                   VLDSYSDT.\nMVSCHECK CLI   0(R1),VLDONLN        IS THE DEVICE ONLINE AND READY?\n         NOP   NXTDSSTE      (BNE)  NO, DO NOT ISSUE LSPACE.\n         DROP  R8                   VLD.\nEXTDLSPC LR    R0,R3                COPY UCB ADDRESS.\n         LSPACE UCB=(R3),MF=(E,LSPACEL)  ISSUE LSPACE (MAKE A TYPE 19).\n         B     TEST78RC             GO TEST THE RETURN CODE.\nORIGLSPC MVC   DS4DEVCT(6),DSSTECPV COPY DEVICE CONSTANTS IF NO OBTAIN.\n         ICM   R0,3,DSSTECPV        DEVICE CONSTANTS KNOWN?\n         BNZ   OBTAINOK             YES, SKIP FORMAT-4 OBTAIN.\n         LA    R15,VTOCNAME         POINT TO THE VTOC \"DATA SET NAME\".\n         LA    R0,UCBVOLI           POINT TO THE VOLUME SERIAL NUMBER.\n         LA    R1,IECSDSL4          POINT TO DSCB1 RETRIEVAL AREA.\n         STM   R15,R1,OBTSRCH+4     SAVE IN OBTAIN PARAMETER LIST.\n         OBTAIN OBTSRCH             OBTAIN FORMAT-4 DSCB.\n         LTR   R15,R15              WAS FORMAT 4 READ OK?\n         BNZ   NXTDSSTE             NO, SOUNDS A BIT DODGEY TO ME.\nOBTAINOK LR    R0,R3                YES, COPY UCB ADDRESS.\n         LA    R1,SVC78BUF          POINT TO THE MESSAGE BUFFER.\n         ICM   R1,8,SVC78FLG        LOAD SMF FLAG BYTE.\n         SVC   78                   ISSUE LSPACE (MAKE A TYPE 19).\nTEST78RC LTR   R15,R15              DID THE LSPACE WORK?\n         BZ    LSPACEOK             YES.\n         STC   15,WORK              NO, STORE RETURN CODE.\n         UNPK  SVC78WTO+41(3),WORK(2)\n         TR    SVC78WTO+41(2),HEX-C'0'\n         MVI   SVC78WTO+43,C' '     FORMAT LSPACE RETURN CODE.\n         MVC   SVC78WTO+48(6),UCBVOLI LOAD VOLUME SERIAL NUMBER.\n         UNPK  WORK(5),UCBCHAN(3)\n         TR    WORK(4),HEX-C'0'\n         MVC   SVC78WTO+58(4),WORK  LOAD DEVICE NUMBER.\n         WTO   MF=(E,SVC78WTO)      NOTIFY OPS OF DISK I/O TROUBLE.\n         B     NXTDSSTE             CAN'T DO ANY MORE WITH THIS DISK.\nLSPACEOK LA    R0,1\n         AH    R0,GOODVOLS          INCREMENT \"GOOD\" VOLUME COUNT.\n         STH   R0,GOODVOLS\n         C     R0,VOLCOUNT          ROOM FOR MORE VOLUMES?\n         BL    *+8                  YES.\n         LA    R2,1                 NO, SET LOOP CONTROL FOR LAST DISK.\n         MVC   DSSTEVOL,UCBVOLI     COPY DISK VOLUME SERIAL NUMBER.\n         MVC   DSSTECPV(6),DS4DEVCT COPY DEVICE CONSTANTS.\n         SLR   R0,R0                CLEAR FOR INSERT.\n         ICM   R0,3,DS4HCCHH        GET ALTERNATE CYLINDER ADDRESS.\n         BZ    CYLSOKAY             ZERO, SO KEEP PHYSICAL COUNT.\n         CH    R0,DSSTECPV          ARE ALTERNATES PAST END OF VOLUME?\n         BNL   CYLSOKAY             YES, SO KEEP PHYSICAL COUNT.\n         STH   R0,DSSTECPV          DO NOT COUNT ALTERNATES AS SPACE.\nCYLSOKAY TM    OSBITS,X'13'         MVS SYSTEM?\n         BO    MVSSTATS             YES, GET FIGURES FOR MVS.\n         MVC   DSSTEUSE,42(R3)      COPY DISK ALLOCATION COUNT.\n         MVC   DSSTEOPN,38(R3)      COPY DISK OPEN COUNT.\n         PACK  WORK,FREECYL         EXTRACT LSPACE-SUPPLIED FIGURES.\n         CVB   R0,WORK\n         ST    R0,DSSTECYL\n         PACK  WORK,FREETRK\n         CVB   R0,WORK\n         ST    R0,DSSTETRK\n         PACK  WORK,FREEEXT\n         CVB   R0,WORK\n         ST    R0,DSSTEEXT\n         PACK  WORK,MAXCYL\n         CVB   R0,WORK\n         ST    R0,DSSTEMXC\n         PACK  WORK,MAXTRK\n         CVB   R0,WORK\n         ST    R0,DSSTEMXT\n         B     NXTDSSTE\nMVSSTATS MVC   DSSTEUSE,UCBUSER     COPY DISK ALLOCATION COUNT.\n         MVC   DSSTEOPN,UCBDMCT     COPY DISK OPEN COUNT.\n         PACK  WORK,FREECYLX        EXTRACT LSPACE-SUPPLIED FIGURES.\n         CVB   R0,WORK\n         ST    R0,DSSTECYL\n         PACK  WORK,FREETRKX\n         CVB   R0,WORK\n         ST    R0,DSSTETRK\n         PACK  WORK,FREEEXTX\n         CVB   R0,WORK\n         ST    R0,DSSTEEXT\n         PACK  WORK,MAXCYLX\n         CVB   R0,WORK\n         ST    R0,DSSTEMXC\n         PACK  WORK,MAXTRKX\n         CVB   R0,WORK\n         ST    R0,DSSTEMXT\nNXTDSSTE TM    OSLEVEL,CVTUCBSV     UCB SERVICES AVAILABLE?\n         BZ    NEXTDISK             NO.\n         LA    R7,12(,R7)           POINT TO NEXT UCB ENTRY.\n         CLI   DSSTEVOL,0           WAS LSPACE ISSUED?\n         BE    *+8                  NO.\nNEXTDISK LA    R6,DSSTELEN(,R6)     POINT TO NEXT VOLUME'S SLOT.\n         BCT   R2,LSPACELP\n         DROP  R6,R3                DSSTE, UCBOB.\n         SPACE\n         LA    R1,DSSTELEN          GET DSSTE LENGTH.\n         MH    R1,GOODVOLS          GET TOTAL DSSTE SIZE.\n         LA    R0,DSSTBLEN(,R1)     GET TOTAL DSST SIZE.\n         ST    R0,DSSTSIZE          PUT GETMAIN SIZE IN TEMPLATE BASE.\nREDRIVE  DS    0H\n         GETMAIN RU,LV=(0),SP=23,LOC=(ANY,ANY)\n         ST    R1,DSSTADDR          SAVE THE NEW DSST ADDRESS.\n         CLI   DSSTADDR,0           DID EXTENDED REGION OVERFLOW?\n         BNE   USEDSST              NO, USE THIS DSST AREA.\n         LM    R2,R3,FRSTDSST       POINT TO FIRST AND LAST DSST.\n         CLC   DSSTDATE-DSST(4,R2),DSSTDATE-DSST(R3)\n         BNL   USEDSST              FIRST IS NOT FROM AN EARLIER DAY.\n         LM    R0,R1,DSSTSIZE       LOAD FREEMAIN VALUES.\n         FREEMAIN RU,LV=(0),A=(1),SP=23  FREE THE AREA JUST ACQUIRED.\n         DROP  R5                   DSST.\n         USING DSST,R2\n         ZAP   WORK,DSSTDATE        REMEMBER DATE TO PURGE.\n         XC    PURGENUM,PURGENUM    RESET PURGED DSST COUNT.\nPURGLOOP CP    DSSTDATE,WORK        PURGE THIS ENTRY?\n         BNE   PURGOVER             NO, PURGE NOW COMPLETE.\n         LM    R0,R1,DSSTSIZE       YES, GET FREEMAIN VALUES.\n         L     R2,DSSTDSST          POINT TO NEXT DSST.\n         XC    DSSTBACK,DSSTBACK    CLEAR BACKWARD POINTER.\n         ST    R2,FRSTDSST          THIS IS GOING TO BE THE FIRST DSST.\n         FREEMAIN RU,LV=(0),A=(1),SP=23  FREE THE FIRST DSST.\n         LA    R0,1\n         A     R0,PURGENUM          INCREMENT PURGED DSST COUNT.\n         ST    R0,PURGENUM\n         LTR   R2,R2                WAS THAT THE LAST DSST?\n         BNZ   PURGLOOP             NO, GO CHECK NEXT DSST.\n         ST    R2,LASTDSST          YES, CHAIN NOW HAS NO ENTRIES.\nPURGOVER AP    WORK,=P'1900000'     CONVERT PURGE DATE TO 4-DIGIT YEAR.\n         MVC   PURGEDAY,ED7\n         ED    PURGEDAY,WORK+4      SHOW DATE OF PURGED DATA.\n         L     R0,PURGENUM\n         CVD   R0,WORK\n         MVC   PURGECNT,ED7\n         ED    PURGECNT,WORK+4      SHOW QUANTITY OF PURGED DATA.\n         WTO   MF=(E,PURGEWTO)      LOG PURGE ACTIVITY.\n         DROP  R2                   DSST.\n         USING DSST,R5\n         L     R0,DSSTSIZE          RESTORE DSST GETMAIN SIZE.\n         B     REDRIVE              REDRIVE THE GETMAIN REQUEST.\n         SPACE\nUSEDSST  ICM   R2,15,LASTDSST       POINT TO PREVIOUS LAST DSST.\n         ST    R2,DSSTBACK          SUPPLY BACKWARD CHAIN POINTER.\n         MVC   0(DSSTBLEN,R1),DSST  MOVE DSST BASE INTO NEW ENTRY.\n         BZ    TOPDSST              SPECIAL CASE FOR 1ST DSST THIS IPL.\n         ST    R1,DSSTDSST-DSST(,R2)  SUPPLY FORWARD CHAIN POINTER.\n         B     CHAINOK\nTOPDSST  ST    R1,FRSTDSST          THIS IS THE FIRST DSST.\nCHAINOK  ST    R1,LASTDSST          THIS IS NOW THE LATEST DSST.\n         L     R2,VOLCOUNT          GET THE NUMBER OF DSST ENTRIES.\n         LA    R1,DSSTBLEN(,R1)     POINT TO THE FIRST NEW DSSTE SLOT.\n         LA    R6,DSSTE             LIKEWISE, BUT WORKING-STORAGE COPY.\n         TM    OSLEVEL,X'08'        UCB SERVICES AVAILABLE?\n         BZ    DATALOAD             NO.\n         LH    R2,GOODVOLS          POINT TO NEXT UCB ENTRY.\n         USING DSSTE,R6\nDATALOAD CLI   DSSTEVOL,0           IS THIS A \"GOOD\" VOLUME?\n         BE    DONDSSTE             NO, DO NOT COPY IT.\n         MVC   0(DSSTELEN,R1),DSSTE LOAD A DSSTE INTO NEW ENTRY.\n         LA    R1,DSSTELEN(,R1)     POINT TO NEXT DSSTE IN NEW ENTRY.\nDONDSSTE LA    R6,DSSTELEN(,R6)     POINT TO NEXT DSSTE IN TEMPLATE.\n         BCT   R2,DATALOAD          GO LOAD THE NEXT ENTRY.\n         SPACE\n         B     WAITLOOP             NOW WAIT FOR ANOTHER INTERVAL.\n         DROP  R6                   DSSTE.\n         SPACE 2\nSTOPSPAC OI    FLAGS,STOPPING       PERFORM TERMINATION PROCESSING.\n         WTO   MF=(E,FINALWTO)      ISSUE NOTIFICATION OF TERMINATION.\n         SPACE\n         TM    FLAGS,FILEFLAG       SAVEHIST FILE PRESENT?\n         BZ    WINDITUP             NO.\n         SPACE\nBACKITUP ICM   R5,15,FRSTDSST       POINT TO THE FIRST DSST.\n         BZ    BACKUPOK             THERE IS NO DATA TO WRITE OUT.\n         SLR   R0,R0\n         ST    R0,WRITENUM          CLEAR OUTPUT COUNTERS.\n         ST    R0,ODSSTNUM\n         OPEN  (SAVEHIST,OUTPUT)    YES, OPEN IT.\nOUTLOOP  XC    GETPUTBF,GETPUTBF    CLEAR RESIDUAL DATA.\n         MVC   GETPUTBF(DSSTBLEN),DSST\n         MVC   GETPUTBF+L'GETPUTBF-4(4),=C'DSST'\n         LA    R2,DSSTELEN          GET DSSTE SIZE.\n         L     R3,DSSTSIZE          GET SIZE OF WHOLE DSST.\n         LA    R4,DSSTBLEN          GET DSST BASE SIZE.\n         LA    R6,DSSTE             POINT TO FIRST DSSTE.\n         SR    R3,R4                GET TOTAL DSSTE SIZE.\n         LA    R0,1\n         A     R0,ODSSTNUM          INCREMENT WRITTEN DSST COUNT.\n         ST    R0,ODSSTNUM\n         B     WRITEOUT             GO WRITE THE DSST BASE.\nOUTELOOP MVC   GETPUTBF,0(R6)       COPY THE DSSTE.\n         AR    R6,R2                POINT TO THE NEXT DSSTE.\n         SR    R3,R2                ADJUST BYTES-TO-GO COUNT.\nWRITEOUT PUT   SAVEHIST,GETPUTBF    WRITE THE RECORD.\n         LA    R0,1\n         A     R0,WRITENUM          INCREMENT RECORDS WRITTEN COUNT.\n         ST    R0,WRITENUM\n         LTR   R3,R3                END OF DSSTE DATA?\n         BP    OUTELOOP             NO, WRITE NEXT ONE.\n         LM    R0,R1,DSSTSIZE       YES, GET FREEMAIN VALUES.\n         ICM   R5,15,DSSTDSST       POINT TO NEXT DSST.\n         BZ    CLOSEOUT             THIS IS THE LAST DSST CREATED.\n         TM    FLAGS,STOPPING       TERMINATION IN PROGRESS?\n         BZ    OUTLOOP              NO, DO NOT DELETE DATA.\n         XC    DSSTBACK,DSSTBACK    CLEAR BACKWARD POINTER.\n         ST    R5,FRSTDSST          MAKE SECOND DSST THE FIRST.\n         FREEMAIN RU,LV=(0),A=(1),SP=23  FREE THE FIRST DSST.\n         B     OUTLOOP              PROCESS NEXT DSST.\n         DROP  R5                   DSST.\nCLOSEOUT CLOSE (SAVEHIST)           CLOSE OUTPUT FILE.\n         L     R0,WRITENUM\n         CVD   R0,WORK\n         MVC   WRITECNT,ED7\n         ED    WRITECNT,WORK+4\n         L     R0,ODSSTNUM\n         CVD   R0,WORK\n         MVC   ODSSTCNT,ED7\n         ED    ODSSTCNT,WORK+4\n         WTO   MF=(E,WRITEWTO)      SAVEHIST NOW WRITTEN.\nBACKUPOK TM    FLAGS,STOPPING       TERMINATION IN PROGRESS?\n         BZ    HOURSOK              NO, RESUME DATA COLLECTION.\n         SPACE\nWINDITUP DS    0H                   PERFORM TERMINATION.\n         DEQ   (IMPMAJOR,IMPMINOR,IMINRLEN,SYSTEM),RET=NONE\n         MODESET MF=(E,MDSTSUP0)    GET INTO SYSTEM STATE.\n         SYSEVENT OKSWAP            BECOME SWAPPABLE.\n         MODESET MF=(E,MDSTPROB)    REVERT TO PROBLEM STATE.\n         FREEMAIN RU,SP=23          FREE ALL THE STORAGE.\n         LM    R0,R1,GMSZDSST       GET WORKING DSST SIZE AND ADDRESS.\n         FREEMAIN RU,LV=(0),A=(1)   FREE WORKING STORAGE DSST.\n         L     R13,4(,R13)          POINT TO PREVIOUS SAVE AREA.\n         LM    R14,R12,12(R13)      RESTORE REGISTERS.\n         SLR   R15,R15              COND CODE = 00.\n         BSM   0,R14                RETURN TO CALLER.\n         TITLE 'DETERMINE NUMBER OF DASD UCBS'\nGETDACNT XC    UTOKEN,UTOKEN        RESET I/O CONFIGURATION TOKEN.\n         UCBINFO DEVCOUNT,DEVCLASS=DASD,COUNT=VOLCOUNT,                +\n               IOCTOKEN=UTOKEN,MF=(E,UINFOL)\n         BR    R8                   RETURN TO CALLER.\n         SPACE\n         DROP  R10,R11,R12          IMSPACER.\n         TITLE 'VARIABLES AND CONSTANTS AND MACRO PARAMETERS'\nWORK     DC    D'0'\nSAVEAREA DC    18F'0'\nHEX      DC    CL16'0123456789ABCDEF'\nED7      DC    XL8'4020202020202120'\nMIDNIGHT DC    CL8'00000100'        ONE SECOND PAST MIDNIGHT.\nSNOOZE   DC    F'1200'              SNOOZE FOR TWELVE SECONDS.\nCOMMADDR DC    A(0)                 ADDRESS OF COMMUNICATION LIST.\nINRECNUM DC    F'0'                 NUMBER OF RECORDS READ.\nIDSSTNUM DC    F'0'                 NUMBER OF DSSTS READ.\nWRITENUM DC    F'0'                 NUMBER OF RECORDS WRITTEN.\nODSSTNUM DC    F'0'                 NUMBER OF DSSTS WRITTEN.\nPURGENUM DC    F'0'                 NUMBER OF DSSTS PURGED.\nVOLCOUNT DC    F'0'                 MAXIMUM NUMBER OF LSPACE DISKS.\nGMSZDSST DC    F'0'                 GETMAIN SIZE FOR A SPACE SNAP-SHOT.\nWKDSSTAD DC    A(0)                 ADDRESS OF WORKING-STORAGE DSST.\nLENDSSTE DC    AL2(DSSTELEN)        LENGTH OF A DSST VOLUME ENTRY.\nVTOCNAME DC    44X'04'              FORMAT-4 DSCB \"DATA SET NAME\".\nIMPMAJOR DC    CL8'IMPMAJOR'        ENQUEUE MAJOR NAME.\nIMPMINOR DC    C'IMPSPACER ACTIVE'  ENQUEUE MINOR NAME.\nIMINRLEN EQU   *-IMPMINOR           ENQUEUE MINOR NAME LENGTH.\nMDSTSUP0 MODESET KEY=ZERO,MODE=SUP,MF=L\nMDSTPROB MODESET KEY=NZERO,MODE=PROB,MF=L\nWRONGWTO WTO   'PARM NOT ''5'', ''SMF'', ''NOSMF'', ''5SMF'' OR ''5NOSM+\n               F''  -  IGNORED',ROUTCDE=(2,11),MF=L\nTWICEWTO WTO   'IMSPACER IS ALREADY UP - ONLY ONE CAN RUN AT A TIME',  +\n               ROUTCDE=(2,11),MF=L\nSTARTWTO WTO   'IMSPACER - INITIALIZATION COMPLETE',                   +\n               ROUTCDE=(2,11),MF=L\nSVC78WTO WTO   'IMSPACER - LSPACE (SVC 78) FAILED RC=XX FOR VVVVVV ON U+\n               UUU',ROUTCDE=(2,4,6,11),MF=L\nFINALWTO WTO   'IMSPACER STOPPING BECAUSE OF STOP COMMAND',            +\n               ROUTCDE=(2,11),MF=L\nLOGICWTO WTO   'IMSPACER - BAD DATA FOUND - STOPPING FILE INPUT',      +\n               ROUTCDE=(2,11),MF=L\nINPUTWTO WTO   'IMSPACER - 1234567 RECORDS 1234567 DSSTS READ FROM SAVE+\n               HIST FILE',ROUTCDE=(2,11),MF=L\nINRECCNT EQU   INPUTWTO+14,8\nIDSSTCNT EQU   INPUTWTO+30,8\nWRITEWTO WTO   'IMSPACER - 1234567 RECORDS 1234567 DSSTS WRITTEN TO SAV+\n               EHIST FILE',ROUTCDE=(2,11),MF=L\nWRITECNT EQU   WRITEWTO+14,8\nODSSTCNT EQU   WRITEWTO+30,8\nPURGEWTO WTO   'IMSPACER - 1234567 DSST ENTRIES PURGED FOR DAY YYYYDDD'+\n               ,ROUTCDE=(2,11),MF=L\nPURGECNT EQU   PURGEWTO+14,8\nPURGEDAY EQU   PURGEWTO+50,8\nEXTRCOMM EXTRACT COMMADDR,'S',FIELDS=(COMM),MF=L\nOBTSRCH  CAMLST SEARCH,2,3,4        OBTAIN SEARCH PARAMETER LIST.\nLSPACEL  LSPACE EXPMSG=SVC78BUF,SMF=TEST,F4DSCB=IECSDSL4,MF=L\nSVC78FLG EQU   LSPACEL+6,1          SMF 19 RECORDS ONLY IF VOLUME ACCT.\n         IECSDSL1 (4)               BODY OF FORMAT-4 DSCB.\n         DC    XL44'00'             MAKE WORK AREA 140 LONG FOR OBTAIN.\nSVC78BUF DS    0CL40                LSPACE EXPANDED MESSAGE AREA.\n*        DS    0CL30                LSPACE STANDARD MESSAGE AREA.\n         DC    CL6'SPACE='\nFREECYL  DS    CL4\n         DS    CL1\nFREETRK  DS    CL4\n         DS    CL1\nFREEEXT  DS    CL4\n         DS    CL1\nMAXCYL   DS    CL4\n         DS    CL1\nMAXTRK   DS    CL4\n         ORG   FREECYL\nFREECYLX DC    CL6'000000'\n         DC    CL1','\nFREETRKX DC    CL6'000000'\n         DC    CL1','\nFREEEXTX DC    CL6'000000'\n         DC    CL1'/'\nMAXCYLX  DC    CL6'000000'\n         DC    CL1','\nMAXTRKX  DC    CL6'000000'\nGOODVOLS DC    H'0'\nFLAGS    DC    X'00'                FLAG BYTE.\nFIVEFLAG EQU   X'80'                0==> 10 MIN. INTERVAL, ELSE 5 MINS.\nFILEFLAG EQU   X'40'                SAVEHIST ALLOCATED.\nSTOPPING EQU   X'20'                PROGRAM TERMINATING.\nOSBITS   DC    X'00'                OS BITS FROM CVTDCB.\nOSLEVEL  DC    XL16'00'             OS BITS FROM CVTOSLVL.\n         SPACE\n         UCBINFO PLISTVER=MAX,MF=(L,UINFOL)\nUTOKEN   DC    XL48'00'             IOCTOKEN AREA.\n         SPACE\n         PRINT NOGEN\nSAVEHIST DCB   DSORG=PS,DDNAME=SAVEHIST,MACRF=(GM,PM),EODAD=EOINPUT,   +\n               RECFM=FB,LRECL=DSSTELEN,BLKSIZE=0\n         PRINT GEN\nGETPUTBF DC    XL(DSSTELEN)'00'     I/O BUFFER.\n         SPACE\n         LTORG\n         SPACE\n         DS    0D\nSMSWORKA DS    XL256'00'            SSOB AND SSSA AREA.\n         DS    0D\n         DC    CL48'(C) COPYRIGHT 1989-1998 PRYCROFT SIX PTY LTD'\n         DS    0D                   END OF CSECT.\n         TITLE 'DSECTS AND EQUATES'\n         COPY  IMSPDSST             DISK SPACE SNAP-SHOT TABLE.\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'SYSTEM CONTROL BLOCKS'\n         PRINT NOGEN\n         SPACE\n         CVT   DSECT=YES\n         SPACE\n         IECDIOCM\n         SPACE\n         IEFJESCT\n         SPACE\n         IEFJSSIB\n         SPACE\n         IEFJSSOB\n         SPACE\n         IEFSSSA\n         SPACE\n         IEFUCBOB PREFIX=YES,DEVCLAS=DA\n         SPACE\n         IGDVLD\n         SPACE\n         PRINT GEN\n         SPACE\n         END   IMSPACER\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMSPACER": {"ttr": 24577, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\x10\\x00H\\x00\\x89\\x05_\\x01\\x18\\x07?\\x139\\x02\\xd8\\x01\\xe5\\x00\\x98\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "52.16", "flags": 0, "createdate": "1989-02-24T00:00:00", "modifydate": "2018-03-14T13:39:48", "lines": 728, "newlines": 485, "modlines": 152, "user": "GPRICE"}, "text": "IMSPACER TITLE 'DASD FREE SPACE MONITOR - 07 FEB 1989'\n***********************************************************************\n*                                                                     *\n*        IMSPACER - DASD FREE SPACE MONITOR                           *\n*                                                                     *\n*        IMSPACER IS A PROGRAM FOR A CONSTANTLY RUNNING STARTED TASK  *\n*   WHICH WILL COLLECT DASD FREE SPACE INFORMATION EVERY TEN (10)     *\n*   MINUTES.  SVC 78 IS USED TO COLLECT THE INFORMATION.  THE FREE    *\n*   SPACE DATA IS ACCUMULATED IN THE EXTENDED REGION AND IS ACCESS-   *\n*   IBLE VIA OPTION \"$\" OF I-MON - THE INTERACTIVE MONITORING PROGRAM *\n*   EXECUTING IN ANY ADDRESS SPACE.  BY DEFAULT, IMSPACER USES AN SVC *\n*   78 FLAG BYTE OF X'40' WHICH MEANS GENERATE A TYPE 19 SMF RECORD   *\n*   IF THE INSTALLATION IS COLLECTING VOLUME ACCOUNTING INFORMATION.  *\n*   A PROGRAM PARAMETER OF 'SMF' SPECIFIES THE USE OF X'80' AS THE    *\n*   FLAG BYTE TO UNCONDITIONALLY REQUEST A TYPE 19 RECORD.  TYPE 19   *\n*   RECORDS MAY BE SUPPRESSED BY USING A PROGRAM PARAMETER OF 'NOSMF' *\n*   WHICH SPECIFIES THAT A FLAG BYTE OF X'00' IS TO BE USED.  THE     *\n*   GENERATION OF TYPE 19 SMF RECORDS IS A CONVENIENT WAY TO SAVE     *\n*   DASD FREE SPACE INFORMATION ACROSS IPLS FOR REGULAR REPORTING.    *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        A DSST ENTRY (DSSTE) EXISTS FOR EACH CONFIGURED (\"SYSGENNED\")*\n*   DASD (EXCLUDING 23XX AND DEMOUNTABLE DISKS) IN EVERY DSST.  THE   *\n*   DSSTE CONTAINS THE UCB ADDRESS AND VOLUME PARTICULARS CURRENT AT  *\n*   THE SNAP-SHOT SAMPLE TIME.  DSST ENTRIES FOR OFFLINE, UNMOUNTED   *\n*   AND NON-OS VOLUMES WILL BE ZERO EXCEPT FOR THE UCB ADDRESS.       *\n*                                                                     *\n*        RETURN CODES:                                                *\n*                0 - IMPSPACE WAS STOPPED BY AN OPERATOR STOP COMMAND.*\n*               12 - AN IMPSPACE TASK IS ALREADY ACTIVE SO A SECOND   *\n*                    IMPSPACE TASK SHOULD NOT BE STARTED.             *\n*               16 - OPERATING SYSTEM DOES NOT HAVE UCB SERVICES.     *\n*                                                                     *\n*        IMSPACER IS NOT REENTRANT NOR SERIALLY REUSABLE.             *\n*                                                                     *\n*        IMSPACER REQUIRES APF AUTHORIZATION.                         *\n*                                                                     *\n*        IMSPACER USES MACROS FROM SYS1.MACLIB AND SYS1.MODGEN.       *\n*                                                                     *\n*        IMSPACER USES 31-BIT ADDRESSABILITY.                         *\n*                                                                     *\n*        IMSPACER REQUIRES 24-BIT RESIDENCY.                          *\n*                                                                     *\n*        IMSPACER WAS WRITTEN BY GREG PRICE OF PRYCROFT SIX PTY. LTD. *\n*                                                                     *\n*        (C) COPYRIGHT 1989-2018 PRYCROFT SIX PTY LTD                 *\n*                                                                     *\n***********************************************************************\n         EJECT\nIMSPACER CSECT\nIMSPACER AMODE 31\nIMSPACER RMODE 24\n         USING IMSPACER,R15\n         B     SPCSTART             BRANCH AROUND HEADER.\n         DC    AL1(47)\n         DC    CL47'IMSPACER COPYRIGHT (C) 1989 PRYCROFT SIX P/L   '\nFRSTDSST DC    A(0)                 POINTER TO FIRST DSST.\nLASTDSST DC    A(0)                 POINTER TO LAST DSST.\n         DC    CL8'&SYSDATC'\n         DROP  R15                  IMSPACER.\nSPCSTART STM   R14,R12,12(R13)\n         LR    R12,R15              SET UP BASE REGISTERS.\n         LA    R11,2048(,R12)\n         LA    R11,2048(,R11)\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         USING IMSPACER,R12,R11,R10\n         LA    R2,SAVEAREA          POINT TO NEW SAVE AREA.  WELL, IT\n         ST    R13,4(,R2)           HAS TO BE DONE.  I MEAN, YOU GET\n         ST    R2,8(,R13)           THE DUMP, AND IF THE SAVE AREAS ARE\n         LR    R13,R2               STUFFED, WHAT HOPE HAVE YOU GOT?\n         L     R2,0(,R1)            POINT TO PROGRAM PARAMETER.\n         SLR   R0,R0\n         ICM   R0,3,0(R2)           IS THERE ONE?\n         BZ    DONEPARM             NO, LENGTH IS ZERO.\n         CLI   2(R2),C'5'           FIVE MINUTE INTERVALS REQUESTED?\n         BNE   FIVEOKAY             NO.\n         OI    FLAGS,FIVEFLAG       YES.\n         LA    R2,1(,R2)            POINT PAST '5'.\n         BCT   R0,FIVEOKAY          GO TEST FOR SMF SPECIFICATION.\n         B     DONEPARM             SKIP TEST FOR PARM='5'.\nFIVEOKAY CLC   2(3,R2),=C'SMF'      PARM='SMF'?\n         BNE   TRYNOSMF             NO.\n         NI    SVC78FLG,255-X'40'   YES, RESET SMF=TEST.\n         OI    SVC78FLG,X'80'       YES, TRY TO FORCE SMF 19 RECORDS.\n         B     DONEPARM\nTRYNOSMF CLC   2(5,R2),=C'NOSMF'    PARM='NOSMF'?\n         BNE   WRONGPRM             NO, INVALID PARAMETER.\n         NI    SVC78FLG,255-X'C0'   YES, SUPPRESS SMF 19 RECORDS.\n         B     DONEPARM\nWRONGPRM WTO   MF=(E,WRONGWTO)      INDICATE INVALID PARAMETER.\n         SPACE\nDONEPARM L     R4,540(,0)           POINT TO THE CURRENT TCB.\n         L     R4,12(,R4)           POINT TO THE TIOT.\n         MVC   TWICEWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   STARTWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   SVC78WTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   FINALWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   LOGICWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   INPUTWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   WRITEWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         MVC   PURGEWTO+4(8),0(R4)  PUT ACTUAL A.S. NAME IN MESSAGE.\n         DEVTYPE SAVEHIST+40,WORK\n         LTR   R15,R15              IS SAVEHIST ALLOCATED?\n         BNZ   FILEOKAY             NO.\n         OI    FLAGS,FILEFLAG       YES, SAVEHIST IS ALLOCATED.\nFILEOKAY DC    0H\n         L     R4,CVTPTR(,0)        POINT TO THE CVT.\n         USING CVT,R4\n         CLI   CVTDCB,X'9B'         MVS/ESA OR LATER?\n         BNE   BADOS                NO, CVTOSLVL NOT PRESENT.\n         TM    CVTOSLVL,CVTUCBSV    UCB SERVICES AVAILABLE?\n         BO    GOODOS               YES, CONTINUE.\n         DROP  R4                   CVT.\nBADOS    DC    0H\n         WTO   MF=(E,BADOSWTO)      OS LEVEL NOT SUPPORTED.\n         L     R13,4(,R13)          POINT TO PREVIOUS SAVE AREA.\n         LM    R14,R12,12(R13)      RESTORE REGISTERS.\n         LA    R15,16               COND CODE = 16.\n         BSM   0,R14                RETURN TO CALLER.\nGOODOS   DC    0H\n         ENQ   (IMPMAJOR,IMPMINOR,E,IMINRLEN,SYSTEM),RET=USE\n         LTR   R15,R15              IMSPACER ALREADY ACTIVE?\n         BZ    ONE@ONCE             NO, THIS IS THE ONLY IMSPACER.\n         WTO   MF=(E,TWICEWTO)      DISPLAY IMSPACER IS ALREADY UP.\n         L     R13,4(,R13)          POINT TO PREVIOUS SAVE AREA.\n         LM    R14,R12,12(R13)      RESTORE REGISTERS.\n         LA    R15,4                COND CODE = 4.\n         BSM   0,R14                RETURN TO CALLER.\nONE@ONCE DC    0H\n         MODESET MF=(E,MDSTSUP0)    GET INTO SYSTEM STATE.\n         XC    WORK,WORK            CLEAR AN ECB.\n         LA    R1,WORK              POINT TO A MAKESHIFT ECB.\n         SYSEVENT TRANSWAP          BECOME NON-SWAPPABLE.\n         LTR   R15,R15              WAS ANYTHING TO BE DONE?\n         BNZ   TRANOKAY             NO, ALREADY NON-SWAPPABLE.\n         WAIT  ECB=WORK             YES, WAIT TILL TRANSWAP COMPLETE.\nTRANOKAY DC    0H                   CAN NOW BE ACCESSED BY TS USERS.\n         MODESET MF=(E,MDSTPROB)    REVERT TO PROBLEM STATE.\n         EXTRACT MF=(E,EXTRCOMM)    GET ADDRESS OF COMMUNICATION LIST.\n         TM    FLAGS,FILEFLAG       IS SAVEHIST ALLOCATED?\n         BZ    DASDINIT             NO, CAN'T READ IT.\n         OPEN  (SAVEHIST,INPUT)     YES, OPEN IT.\n         SLR   R3,R3                CLEAR DSST BYTES-TO-GO.\nREADLOOP GET   SAVEHIST,GETPUTBF    READ A RECORD.\n         LA    R0,1\n         A     R0,INRECNUM          INCREMENT READ RECORD COUNT.\n         ST    R0,INRECNUM\n         LA    R2,GETPUTBF          POINT TO IT.\n         LTR   R3,R3                PROCESSING DSSTE SLOTS?\n         BP    GOTDSSTE             YES.\n         CLC   =C'DSST',DSSTELEN-4(R2)\n         BNE   LOGICERR\n         USING DSST,R2\n         TM    DSSTSIZE+3,X'07'     CHECK FOR EXPECTED ALIGNMENT.\n         BNZ   LOGICERR\n         TM    DSSTADDR+3,X'07'\n         BNZ   LOGICERR\n         TM    DSSTDSST+3,X'07'\n         BNZ   LOGICERR\n         TM    DSSTBACK+3,X'07'\n         BNZ   LOGICERR\n         TM    DSSTDATE+3,X'0F'     CHECK FOR EXPECTED DATE SIGN.\n         BNO   LOGICERR\n         ICM   R0,15,DSSTSIZE       GET SIZE OF THIS DSST.\n         BNP   LOGICERR\n         GETMAIN RU,LV=(0),SP=23,LOC=(31,64)\n         MVC   0(DSSTBLEN,R1),DSST  LOAD THE DSST BASE.\n         DROP  R2                   DSST.\n         LR    R5,R1\n         USING DSST,R5\n         ST    R5,DSSTADDR          CORRECT ADDRESS FOR FREEMAIN.\n         XC    DSSTDSST,DSSTDSST    CLEAR FORWARD POINTER.\n         ICM   R0,15,FRSTDSST       FIRST ONE?\n         BNZ   LINKREAD             NO.\n         ST    R5,FRSTDSST          YES.\n         XC    DSSTBACK,DSSTBACK    CLEAR BACKWARD POINTER.\n         B     NEWLAST\nLINKREAD L     R1,LASTDSST\n         ST    R1,DSSTBACK\n         ST    R5,8(,R1)\nNEWLAST  ST    R5,LASTDSST\n         LA    R0,1\n         A     R0,IDSSTNUM          INCREMENT READ DSST COUNT.\n         ST    R0,IDSSTNUM\n         L     R3,DSSTSIZE\n         LA    R0,DSSTBLEN\n         SR    R3,R0                GET REMAINING DSSTE TOTAL BYTES.\n         LA    R6,DSSTE             POINT TO THE FIRST DSSTE.\n         B     READLOOP\n         SPACE\nGOTDSSTE MVC   0(DSSTELEN,R6),0(R2) LOAD DSSTE.\n         LA    R0,DSSTELEN\n         SR    R3,R0                ADJUST REMAINING BYTES FOR DSST.\n         AR    R6,R0                POINT TO NEXT DSSTE SLOT.\n         B     READLOOP\n         SPACE\nLOGICERR WTO   MF=(E,LOGICWTO)      BAD DATA ON INPUT.\n         SPACE\nEOINPUT  CLOSE (SAVEHIST)           CLOSE INPUT FILE.\n         L     R0,INRECNUM\n         CVD   R0,WORK\n         MVC   INRECCNT,ED7\n         ED    INRECCNT,WORK+4\n         L     R0,IDSSTNUM\n         CVD   R0,WORK\n         MVC   IDSSTCNT,ED7\n         ED    IDSSTCNT,WORK+4\n         WTO   MF=(E,INPUTWTO)      SAVEHIST NOW READ.\n         SPACE\nDASDINIT DC    0H\n         BAS   R8,GETDACNT          GET DASD UCB COUNT.\n         L     R2,VOLCOUNT          LOAD THE MAXIMUM VOLUME COUNT.\n         SLA   R2,4                 USE FUDGE FACTOR OF 16.\n         ST    R2,VOLCOUNT          SAVE THE MAXIMUM VOLUME COUNT.\n         MH    R2,LENDSSTE          MULTIPLY BY DSST ENTRY SIZE.\n         LA    R2,DSSTBLEN(,R2)     ADD SIZE OF BASE.\n         ST    R2,GMSZDSST          DSST GETMAIN SIZE (MULTIPLE OF 8).\n         LR    R0,R2                COPY GETMAIN SIZE.\n         GETMAIN RU,LV=(0),LOC=(24,64)\n         ST    R1,WKDSSTAD          ADDRESS OF WORKING-STORAGE DSST.\n         LR    R5,R1                POINT TO WORKING-STORAGE DSST.\n         USING DSST,R5\n         XC    DSSTDSST(8),DSSTDSST ZERO THE CHAINING POINTERS.\n         SPACE\n         WTO   MF=(E,STARTWTO)      ISSUE INITIALIZATION NOTIFICATION.\n         SPACE 2\nWAITLOOP TIME  DEC                  GET THE TIME OF DAY IN DECIMAL.\n         ST    R0,WORK              PUT THE TIME INTO STORAGE.\n         MVC   WORK+4(1),WORK+1     COPY MINUTES TO WORK AREA.\n         NI    WORK+4,X'0F'         GET MINUTES UNITS DIGIT.\n         NI    WORK+1,X'F0'         TRUNCATE TO TEN MINUTE BOUNDARY.\n         MVI   WORK+2,X'0C'         SUPPLY PACKED DECIMAL SIGN.\n         TM    FLAGS,FIVEFLAG       FIVE MINUTE INTERVALS REQUESTED?\n         BZ    NEXTTEN              NO, USE TEN MINUTE INTERVALS.\n         CLI   WORK+4,4             5 MINUTES INTO 10 MINUTES YET?\n         BH    NEXTTEN              YES, SO UP THE TENS DIGIT.\n         OI    WORK+1,X'05'         NO, GO FOR NEXT 5 MINUTE TIME.\n         B     HOURSOK              SHOULD STILL HAVE VALID TIME.\nNEXTTEN  AP    WORK(3),=P'100'      ADD TEN MINUTES TO TIME.\n         CLI   WORK+1,X'60'         SIXTY MINUTES?\n         BL    HOURSOK              NO.\n         AP    WORK(3),=P'400'      YES, SHOULD HAVE INCREMENTED HOURS.\n         CLI   WORK,X'24'           REACHED 24 O'CLOCK?\n         BL    HOURSOK              NO.\n         MVI   WORK,X'00'           YES, MAKE MIDNIGHT 0 O'CLOCK.\n         STIMER WAIT,LT=MIDNIGHT    GO TO SLEEP UNTIL THEN.\n         TM    FLAGS,FILEFLAG       SAVEHIST FILE PRESENT?\n         BO    BACKITUP             YES, BACK UP DATA TO FILE.\nHOURSOK  DC    0H                   HAVE DESIRED HHMM IN WORK H/W.\n         STIMER WAIT,BINTVL=SNOOZE  GO TO SLEEP.\n         L     R1,COMMADDR          POINT TO MODIFY/STOP ECB ADDRESS.\n         L     R1,0(,R1)            POINT TO MODIFY/STOP ECB.\n         TM    0(R1),X'40'          HAS THE ECB BEEN POSTED?\n         BO    STOPSPAC             YES, TERMINATE IMSPACER.\n         TIME  DEC                  NOW GET THE CURRENT TIME.\n         CLM   R0,B'1100',WORK      TIME FOR NEXT SAMPLE YET?\n         BL    HOURSOK              NO, HAVE ANOTHER LITTLE SNOOZE.\n         L     R5,WKDSSTAD          YES, POINT TO DSST BUFFER.\n         STM   R0,R1,DSSTTIME       SUPPLY TIME-STAMP.\n         SLR   R0,R0\n         ST    R0,GOODVOLS          ZERO \"GOOD\" VOLUME COUNT.\n         L     R2,VOLCOUNT          LOAD THE VOLUME COUNT.\n         LA    R6,DSSTE             POINT TO THE FIRST DSSTE.\n         XC    USDYNSTG,USDYNSTG    RESET FOR A NEW UCB SCAN.\n         USING DSSTE,R6\nLSPACELP DC    0H\n         UCBSCAN COPY,                                                 +\n               WORKAREA=USCNWORK,                                      +\n               UCBAREA=USCNUCB,                                        +\n               DEVNCHAR=USDEVNUM,                                      +\n               DYNAMIC=YES,                                            +\n               RANGE=ALL,                                              +\n               DEVCLASS=DASD,                                          +\n               IOCTOKEN=USCFGTKN,                                      +\n               LINKAGE=SYSTEM,                                         +\n               MF=(E,USCN,COMPLETE)\n         LTR   R15,R15              WAS A UCB RETURNED BY UCBSCAN?\n         BNZ   VOLSDONE             NO, NO MORE UCB ENTRIES.\n         USING UCBOB,USCNUCB\n         TM    UCBSTAT,UCBONLI      IS THIS UNIT ONLINE?\n         BZ    LSPACELP             NO, DISCARD UCB.\n         TM    UCBSTAT,UCBCHGS      IS THIS UNIT PENDING OFFLINE?\n         BO    LSPACELP             YES, DISCARD UCB.\n         TM    UCBDMCT,UCBMOUNT     MOUNT PENDING?\n         BO    LSPACELP             YES, DISCARD UCB.\n         TM    UCBFLA,UCBNRY        IS THE DEVICE NOT READY?\n         BO    LSPACELP             YES, DISCARD UCB.\n         TM    UCBFLA,UCBDEFER+UCBBOX DEFERRING I/O OR BOXED?\n         BNZ   LSPACELP             YES, DISCARD UCB.\n         CLI   UCBVOLI,C' '         ANY VOLUME SERIAL NUMBER?\n         BNH   LSPACELP             NO, DISCARD UCB.\n         CLI   UCBVOLI,C'9'         VOL=SER=SCRTCH?  (X'FF'?)\n         BH    LSPACELP             YES, DISCARD UCB.\n         CLI   UCBVTOC+2,X'01'      OS VTOC ADDRESS?  (R OF TTR0 IS 1?)\n         BNE   LSPACELP             NO, DISCARD UCB.  (VM DISK?)\n         ICM   R0,3,UCBVTOC         OS VTOC ADDRESS?  (TT OF TTR0 > 0?)\n         BZ    LSPACELP             NO, DISCARD UCB.  (VM DISK?)\n         CLC   DSSTEUCB,USDEVNUM    SAME DEVICE?\n         JE    SAMEDEV              YES\n         XC    DSSTE(DSSTELEN),DSSTE   NO, CLEAR PREVIOUS DATA.\n         LA    R15,VTOCNAME         POINT TO THE VTOC \"DATA SET NAME\".\n         LA    R0,UCBVOLI           POINT TO THE VOLUME SERIAL NUMBER.\n         LA    R1,IECSDSL4          POINT TO DSCB1 RETRIEVAL AREA.\n         STM   R15,R1,OBTSRCH+4     SAVE IN OBTAIN PARAMETER LIST.\n         OBTAIN OBTSRCH             OBTAIN FORMAT-4 DSCB.\n         LTR   R15,R15              WAS FORMAT 4 READ OK?\n         BNZ   LSPACELP             NO, SOUNDS A BIT DODGEY TO ME.\n         MVC   DSSTEUCB,USDEVNUM    SET DEVICE NUMBER.\n         MVC   DSSTECPV(6),DS4DEVCT COPY DEVICE CONSTANTS.\n         SLR   R0,R0                CLEAR FOR INSERT.\n         ICM   R0,3,DS4HCCHH        GET ALTERNATE CYLINDER ADDRESS.\n         BZ    CYLSOKAY             ZERO, SO KEEP PHYSICAL COUNT.\n         CLM   R0,3,DSSTECPV        ARE ALTERNATES PAST END OF VOLUME?\n         BNL   CYLSOKAY             YES, SO KEEP PHYSICAL COUNT.\n         STH   R0,DSSTECPV          DO NOT COUNT ALTERNATES AS SPACE.\nSAMEDEV  MVC   DSSTEVOL,UCBVOLI     COPY DISK VOLUME SERIAL NUMBER.\n         TM    UCBFL5,UCBSMS        SMS-MANAGED VOLUME?\n         BNO   DOLSPACE             NO, DON'T ASK SMS.\n         LA    R1,SMSWORKA          POINT TO SSOB AREA.\n         USING SSOB,R1\n         LA    R0,SSOBHSIZ          LOAD SSOB LENGTH.\n         STH   R0,SSOBLEN\n         MVC   SSOBID,=C'SSOB'      LOAD SSOB IDENTIFIER.\n         LA    R0,SSOBSSMS          LOAD SSOB FUNCTION CODE TO 55.\n         STH   R0,SSOBFUNC\n         L     R14,CVTPTR(,0)       POINT TO THE CVT.\n         USING CVT,R14\n         L     R14,CVTJESCT         POINT TO THE JESCT.\n         DROP  R14                  CVT.\n         USING JESCT,R14\n         L     R14,JESCTEXT         POINT TO PAGEABLE JESCT ENTENSION.\n         DROP  R14                  JESCT.\n         USING JESPEXT,R14\n         ICM   R14,15,JESSMSIB      POINT TO THE SMS SSIB.\n         BZ    DOLSPACE             NO SSIB SO SKIP SMS CALL.\n         DROP  R14                  JESPEXT.\n         ST    R14,SSOBSSIB         SAVE THE SSIB ADDRESS.\n         XC    SSOBRETN,SSOBRETN    RESET SUBSYSTEM RETURN CODE.\n         LA    R8,SSOB+SSOBHSIZ     POINT PAST SSOB HEADER.\n         ST    R8,SSOBINDV          LOAD FUNCTION-DEPENDENT AREA PTR.\n         USING IEFSSSA,R8\n         LA    R0,SSSALN+SSSA1LN    LOAD SSOB SMS EXTENTION LENGTH.\n         STH   R0,SSSALEN\n         MVC   SSSAID,=C'SSSA'      SUPPLY IDENTIFIER.\n         MVI   SSSAVER+1,SSOBSSVR   SUPPLY VERSION INDICATOR.\n         MVI   SSSASFN+1,SSSAACTV   SUPPLY SUB-FUNCTION CODE.\n         MVI   SSSAIFLG,SSSANAUT    INDICATE NON-AUTHORIZED CALLER.\n         MVI   SSSA1TYP,SSSA1VOL    FLAG VOLSER IS SUPPLIED.\n         MVI   SSSA1CNT+3,1         FLAG ONE CONSTRUCT PASSED.\n         MVI   SSSA1NML+1,6         SET VOLUME SERIAL NUMBER LENGTH.\n         MVC   SSSA1NAM(6),UCBVOLI  LOAD VOLUME SERIAL NUMBER.\n         DROP  R1                   SSOB.\n         ST    R1,WORK              SAVE PARAMETER LIST ITEM.\n         OI    WORK,X'80'           INDICATE ONLY ITEM IN LIST.\n         MODESET MF=(E,MDSTSUP0)    GET INTO SUPERVISOR STATE.\n         LA    R1,WORK              POINT TO PARAMETER LIST.\n         IEFSSREQ ,                 PASS REQUEST TO SSI.\n         LR    R4,R15               COPY SSI RETURN CODE.\n         MODESET MF=(E,MDSTPROB)    REVERT TO PROBLEM STATE.\n         LTR   R4,R4                WAS SSI CALL SUCCESSFUL?\n         BNZ   DOLSPACE             NO, GO ISSUE AN LSPACE.\n         LA    R1,SMSWORKA          POINT TO SSOB AREA.\n         USING SSOB,R1\n         ICM   R4,15,SSOBRETN       WAS SSI RETURN CODE ZERO?\n         BNZ   DOLSPACE             NO, GO ISSUE AN LSPACE.\n         DROP  R1                   SSOB.\n         ICM   R0,15,SSSA1PTR       AREA RETURNED?\n         BZ    DOLSPACE             NO, SMS PROBLEM.\n         MVC   SSSA1LEN,SSSA1ALN    YES, SET SUPPLIED LENGTH VALUE.\n         DROP  R8                   SSSA.\n         LR    R8,R0                POINT TO RETURNED VLD.\n         USING VLD,R8\n         MVC   DSSTEGRP,VLDSTGRP    LOAD SMS STORAGE GROUP OF VOLUME.\n         OC    DSSTEGRP,=CL8' '     CONVERT TRAILING NULLS TO BLANKS.\n         LA    R1,VLDMVSS           POINT TO OLD MVS STATUS FLAGS.\n         CLC   =H'3',VLDPVER        \"NEW\" VLD?\n         BH    MVSCHECK             NO.\n         L     R1,VLDSYSOF          YES, GET OFFSET FOR THIS SYSTEM.\n         LA    R1,VLDEF(R1)         POINT TO SYSTEM DATA ENTRY.\n         USING VLDSYSDT,R1\n         LA    R1,VLDSTMVS          POINT TO MVS STATUS BYTE.\n         DROP  R1                   VLDSYSDT.\nMVSCHECK CLI   0(R1),VLDONLN        IS THE DEVICE ONLINE AND READY?\n         NOP   NXTDSSTE      (BNE)  NO, DO NOT ISSUE LSPACE.\n         DROP  R8                   VLD.\nDOLSPACE DC    0H                   ISSUE LSPACE.\n         LA    R15,UCBOB            POINT TO UCB COPY.\n         LSPACE UCB=(15),MF=(E,LSPACEL)\n         LTR   R15,R15              DID THE LSPACE WORK?\n         BZ    LSPACEOK             YES.\n         STC   15,WORK              NO, STORE RETURN CODE.\n         UNPK  SVC78WTO+41(3),WORK(2)\n         TR    SVC78WTO+41(2),HEX-C'0'\n         MVI   SVC78WTO+43,C' '     FORMAT LSPACE RETURN CODE.\n         MVC   SVC78WTO+48(6),UCBVOLI LOAD VOLUME SERIAL NUMBER.\n         UNPK  WORK(5),UCBCHAN(3)\n         TR    WORK(4),HEX-C'0'\n         MVC   SVC78WTO+58(4),WORK  LOAD DEVICE NUMBER.\n         WTO   MF=(E,SVC78WTO)      NOTIFY OPS OF DISK I/O TROUBLE.\n         B     LSPACELP             CAN'T DO ANY MORE WITH THIS DISK.\nLSPACEOK LA    R0,1\n         A     R0,GOODVOLS          INCREMENT \"GOOD\" VOLUME COUNT.\n         ST    R0,GOODVOLS\n         C     R0,VOLCOUNT          ROOM FOR MORE VOLUMES?\n         BL    *+8                  YES.\n         LA    R2,1                 NO, SET LOOP CONTROL FOR LAST DISK.\nCYLSOKAY DC    0H\n         MVC   DSSTEUSE,UCBUSER     COPY DISK ALLOCATION COUNT.\n         MVC   DSSTEOPN,UCBDMCT     COPY DISK OPEN COUNT.\n         PACK  WORK,FREECYLX        EXTRACT LSPACE-SUPPLIED FIGURES.\n         CVB   R0,WORK\n         ST    R0,DSSTECYL\n         PACK  WORK,FREETRKX\n         CVB   R0,WORK\n         ST    R0,DSSTETRK\n         PACK  WORK,FREEEXTX\n         CVB   R0,WORK\n         ST    R0,DSSTEEXT\n         PACK  WORK,MAXCYLX\n         CVB   R0,WORK\n         ST    R0,DSSTEMXC\n         PACK  WORK,MAXTRKX\n         CVB   R0,WORK\n         ST    R0,DSSTEMXT\nNXTDSSTE DC    0H\n         LA    R6,DSSTELEN(,R6)     POINT TO NEXT VOLUME'S SLOT.\nNEXTDISK DC    0H\n         BCT   R2,LSPACELP\n         DROP  R6                   DSSTE.\n         SPACE\nVOLSDONE DC    0H\n         ICM   R0,15,GOODVOLS       ANY GOOD VOLUMES?\n         BZ    WAITLOOP             NO, NO NEW INFORMATION.\n         LA    R1,DSSTELEN          GET DSSTE LENGTH.\n         MR    R0,R0                GET TOTAL DSSTE SIZE.\n         LA    R0,DSSTBLEN(,R1)     GET TOTAL DSST SIZE.\n         ST    R0,DSSTSIZE          PUT GETMAIN SIZE IN TEMPLATE BASE.\nREDRIVE  DC    0H\n         GETMAIN RC,LV=(0),SP=23,LOC=(31,64)\n         LM    R2,R3,FRSTDSST       POINT TO FIRST AND LAST DSST.\n         LTR   R15,R15              SUCCESSFUL GETMAIN?\n         BNZ   PURGENOW             NO\n         ST    R1,DSSTADDR          SAVE THE NEW DSST ADDRESS.\n         CLI   DSSTADDR,0           DID EXTENDED REGION OVERFLOW?\n         BNE   USEDSST              NO, USE THIS DSST AREA.\n         CLC   DSSTDATE-DSST(4,R2),DSSTDATE-DSST(R3)\n         BNL   USEDSST              FIRST IS NOT FROM AN EARLIER DAY.\n         LM    R0,R1,DSSTSIZE       LOAD FREEMAIN VALUES.\n         FREEMAIN RU,LV=(0),A=(1),SP=23  FREE THE AREA JUST ACQUIRED.\n         DROP  R5                   DSST.\nPURGENOW DC    0H\n         USING DSST,R2\n         ZAP   WORK,DSSTDATE        REMEMBER DATE TO PURGE.\n         XC    PURGENUM,PURGENUM    RESET PURGED DSST COUNT.\nPURGLOOP CP    DSSTDATE,WORK        PURGE THIS ENTRY?\n         BNE   PURGOVER             NO, PURGE NOW COMPLETE.\n         LM    R0,R1,DSSTSIZE       YES, GET FREEMAIN VALUES.\n         L     R2,DSSTDSST          POINT TO NEXT DSST.\n         XC    DSSTBACK,DSSTBACK    CLEAR BACKWARD POINTER.\n         ST    R2,FRSTDSST          THIS IS GOING TO BE THE FIRST DSST.\n         FREEMAIN RU,LV=(0),A=(1),SP=23  FREE THE FIRST DSST.\n         LA    R0,1\n         A     R0,PURGENUM          INCREMENT PURGED DSST COUNT.\n         ST    R0,PURGENUM\n         LTR   R2,R2                WAS THAT THE LAST DSST?\n         BNZ   PURGLOOP             NO, GO CHECK NEXT DSST.\n         ST    R2,LASTDSST          YES, CHAIN NOW HAS NO ENTRIES.\nPURGOVER AP    WORK,=P'1900000'     CONVERT PURGE DATE TO 4-DIGIT YEAR.\n         MVC   PURGEDAY,ED7\n         ED    PURGEDAY,WORK+4      SHOW DATE OF PURGED DATA.\n         L     R0,PURGENUM\n         CVD   R0,WORK\n         MVC   PURGECNT,ED7\n         ED    PURGECNT,WORK+4      SHOW QUANTITY OF PURGED DATA.\n         WTO   MF=(E,PURGEWTO)      LOG PURGE ACTIVITY.\n         DROP  R2                   DSST.\n         USING DSST,R5\n         L     R0,DSSTSIZE          RESTORE DSST GETMAIN SIZE.\n         B     REDRIVE              REDRIVE THE GETMAIN REQUEST.\n         SPACE\nUSEDSST  ICM   R2,15,LASTDSST       POINT TO PREVIOUS LAST DSST.\n         ST    R2,DSSTBACK          SUPPLY BACKWARD CHAIN POINTER.\n         MVC   0(DSSTBLEN,R1),DSST  MOVE DSST BASE INTO NEW ENTRY.\n         BZ    TOPDSST              SPECIAL CASE FOR 1ST DSST THIS IPL.\n         ST    R1,DSSTDSST-DSST(,R2)  SUPPLY FORWARD CHAIN POINTER.\n         B     CHAINOK\nTOPDSST  ST    R1,FRSTDSST          THIS IS THE FIRST DSST.\nCHAINOK  ST    R1,LASTDSST          THIS IS NOW THE LATEST DSST.\n         L     R2,GOODVOLS          GET THE NUMBER OF DSST ENTRIES.\n         LA    R1,DSSTBLEN(,R1)     POINT TO THE FIRST NEW DSSTE SLOT.\n         LA    R6,DSSTE             LIKEWISE, BUT WORKING-STORAGE COPY.\n         USING DSSTE,R6\nDATALOAD DC    0H\n         MVC   0(DSSTELEN,R1),DSSTE LOAD A DSSTE INTO NEW ENTRY.\n         LA    R1,DSSTELEN(,R1)     POINT TO NEXT DSSTE IN NEW ENTRY.\n         LA    R6,DSSTELEN(,R6)     POINT TO NEXT DSSTE IN TEMPLATE.\n         BCT   R2,DATALOAD          GO LOAD THE NEXT ENTRY.\n         SPACE\n         B     WAITLOOP             NOW WAIT FOR ANOTHER INTERVAL.\n         DROP  R6                   DSSTE.\n         SPACE 2\nSTOPSPAC OI    FLAGS,STOPPING       PERFORM TERMINATION PROCESSING.\n         WTO   MF=(E,FINALWTO)      ISSUE NOTIFICATION OF TERMINATION.\n         SPACE\n         TM    FLAGS,FILEFLAG       SAVEHIST FILE PRESENT?\n         BZ    WINDITUP             NO.\n         SPACE\nBACKITUP ICM   R5,15,FRSTDSST       POINT TO THE FIRST DSST.\n         BZ    BACKUPOK             THERE IS NO DATA TO WRITE OUT.\n         SLR   R0,R0\n         ST    R0,WRITENUM          CLEAR OUTPUT COUNTERS.\n         ST    R0,ODSSTNUM\n         OPEN  (SAVEHIST,OUTPUT)    YES, OPEN IT.\nOUTLOOP  XC    GETPUTBF,GETPUTBF    CLEAR RESIDUAL DATA.\n         MVC   GETPUTBF(DSSTBLEN),DSST\n         MVC   GETPUTBF+L'GETPUTBF-4(4),=C'DSST'\n         LA    R2,DSSTELEN          GET DSSTE SIZE.\n         L     R3,DSSTSIZE          GET SIZE OF WHOLE DSST.\n         LA    R4,DSSTBLEN          GET DSST BASE SIZE.\n         LA    R6,DSSTE             POINT TO FIRST DSSTE.\n         SR    R3,R4                GET TOTAL DSSTE SIZE.\n         LA    R0,1\n         A     R0,ODSSTNUM          INCREMENT WRITTEN DSST COUNT.\n         ST    R0,ODSSTNUM\n         B     WRITEOUT             GO WRITE THE DSST BASE.\nOUTELOOP MVC   GETPUTBF,0(R6)       COPY THE DSSTE.\n         AR    R6,R2                POINT TO THE NEXT DSSTE.\n         SR    R3,R2                ADJUST BYTES-TO-GO COUNT.\nWRITEOUT PUT   SAVEHIST,GETPUTBF    WRITE THE RECORD.\n         LA    R0,1\n         A     R0,WRITENUM          INCREMENT RECORDS WRITTEN COUNT.\n         ST    R0,WRITENUM\n         LTR   R3,R3                END OF DSSTE DATA?\n         BP    OUTELOOP             NO, WRITE NEXT ONE.\n         LM    R0,R1,DSSTSIZE       YES, GET FREEMAIN VALUES.\n         ICM   R5,15,DSSTDSST       POINT TO NEXT DSST.\n         BZ    CLOSEOUT             THIS IS THE LAST DSST CREATED.\n         TM    FLAGS,STOPPING       TERMINATION IN PROGRESS?\n         BZ    OUTLOOP              NO, DO NOT DELETE DATA.\n         XC    DSSTBACK,DSSTBACK    CLEAR BACKWARD POINTER.\n         ST    R5,FRSTDSST          MAKE SECOND DSST THE FIRST.\n         FREEMAIN RU,LV=(0),A=(1),SP=23  FREE THE FIRST DSST.\n         B     OUTLOOP              PROCESS NEXT DSST.\n         DROP  R5                   DSST.\nCLOSEOUT CLOSE (SAVEHIST)           CLOSE OUTPUT FILE.\n         L     R0,WRITENUM\n         CVD   R0,WORK\n         MVC   WRITECNT,ED7\n         ED    WRITECNT,WORK+4\n         L     R0,ODSSTNUM\n         CVD   R0,WORK\n         MVC   ODSSTCNT,ED7\n         ED    ODSSTCNT,WORK+4\n         WTO   MF=(E,WRITEWTO)      SAVEHIST NOW WRITTEN.\nBACKUPOK TM    FLAGS,STOPPING       TERMINATION IN PROGRESS?\n         BZ    HOURSOK              NO, RESUME DATA COLLECTION.\n         SPACE\nWINDITUP DC    0H                   PERFORM TERMINATION.\n         DEQ   (IMPMAJOR,IMPMINOR,IMINRLEN,SYSTEM),RET=NONE\n         MODESET MF=(E,MDSTSUP0)    GET INTO SYSTEM STATE.\n         SYSEVENT OKSWAP            BECOME SWAPPABLE.\n         MODESET MF=(E,MDSTPROB)    REVERT TO PROBLEM STATE.\n         FREEMAIN RU,SP=23          FREE ALL THE STORAGE.\n         LM    R0,R1,GMSZDSST       GET WORKING DSST SIZE AND ADDRESS.\n         FREEMAIN RU,LV=(0),A=(1)   FREE WORKING STORAGE DSST.\n         L     R13,4(,R13)          POINT TO PREVIOUS SAVE AREA.\n         LM    R14,R12,12(R13)      RESTORE REGISTERS.\n         SLR   R15,R15              COND CODE = 00.\n         BSM   0,R14                RETURN TO CALLER.\n         TITLE 'DETERMINE NUMBER OF DASD UCBS'\nGETDACNT XC    UTOKEN,UTOKEN        RESET I/O CONFIGURATION TOKEN.\n         UCBINFO DEVCOUNT,DEVCLASS=DASD,COUNT=VOLCOUNT,                +\n               IOCTOKEN=UTOKEN,MF=(E,UINFOL)\n         BR    R8                   RETURN TO CALLER.\n         SPACE\n         DROP  R10,R11,R12          IMSPACER.\n         TITLE 'VARIABLES AND CONSTANTS AND MACRO PARAMETERS'\nWORK     DC    D'0'\nSAVEAREA DC    18F'0'\nHEX      DC    CL16'0123456789ABCDEF'\nED7      DC    XL8'4020202020202120'\nMIDNIGHT DC    CL8'00000100'        ONE SECOND PAST MIDNIGHT.\nSNOOZE   DC    F'1200'              SNOOZE FOR TWELVE SECONDS.\nCOMMADDR DC    A(0)                 ADDRESS OF COMMUNICATION LIST.\nINRECNUM DC    F'0'                 NUMBER OF RECORDS READ.\nIDSSTNUM DC    F'0'                 NUMBER OF DSSTS READ.\nWRITENUM DC    F'0'                 NUMBER OF RECORDS WRITTEN.\nODSSTNUM DC    F'0'                 NUMBER OF DSSTS WRITTEN.\nPURGENUM DC    F'0'                 NUMBER OF DSSTS PURGED.\nVOLCOUNT DC    F'0'                 MAXIMUM NUMBER OF LSPACE DISKS.\nGMSZDSST DC    F'0'                 GETMAIN SIZE FOR A SPACE SNAP-SHOT.\nWKDSSTAD DC    A(0)                 ADDRESS OF WORKING-STORAGE DSST.\nLENDSSTE DC    AL2(DSSTELEN)        LENGTH OF A DSST VOLUME ENTRY.\nVTOCNAME DC    44X'04'              FORMAT-4 DSCB \"DATA SET NAME\".\nIMPMAJOR DC    CL8'IMPMAJOR'        ENQUEUE MAJOR NAME.\nIMPMINOR DC    C'IMPSPACER ACTIVE'  ENQUEUE MINOR NAME.\nIMINRLEN EQU   *-IMPMINOR           ENQUEUE MINOR NAME LENGTH.\nMDSTSUP0 MODESET KEY=ZERO,MODE=SUP,MF=L\nMDSTPROB MODESET KEY=NZERO,MODE=PROB,MF=L\nBADOSWTO WTO   'IMSPACER DOES NOT SUPPORT THIS OPERATING SYSTEM LEVEL',+\n               ROUTCDE=(2,11),MF=L\nWRONGWTO WTO   'PARM NOT ''5'', ''SMF'', ''NOSMF'', ''5SMF'' OR ''5NOSM+\n               F''  -  IGNORED',ROUTCDE=(2,11),MF=L\nTWICEWTO WTO   'IMSPACER IS ALREADY UP - ONLY ONE CAN RUN AT A TIME',  +\n               ROUTCDE=(2,11),MF=L\nSTARTWTO WTO   'IMSPACER - INITIALIZATION COMPLETE',                   +\n               ROUTCDE=(2,11),MF=L\nSVC78WTO WTO   'IMSPACER - LSPACE (SVC 78) FAILED RC=XX FOR VVVVVV ON U+\n               UUU',ROUTCDE=(2,4,6,11),MF=L\nFINALWTO WTO   'IMSPACER STOPPING BECAUSE OF STOP COMMAND',            +\n               ROUTCDE=(2,11),MF=L\nLOGICWTO WTO   'IMSPACER - BAD DATA FOUND - STOPPING FILE INPUT',      +\n               ROUTCDE=(2,11),MF=L\nINPUTWTO WTO   'IMSPACER - 1234567 RECORDS 1234567 DSSTS READ FROM SAVE+\n               HIST FILE',ROUTCDE=(2,11),MF=L\nINRECCNT EQU   INPUTWTO+14,8\nIDSSTCNT EQU   INPUTWTO+30,8\nWRITEWTO WTO   'IMSPACER - 1234567 RECORDS 1234567 DSSTS WRITTEN TO SAV+\n               EHIST FILE',ROUTCDE=(2,11),MF=L\nWRITECNT EQU   WRITEWTO+14,8\nODSSTCNT EQU   WRITEWTO+30,8\nPURGEWTO WTO   'IMSPACER - 1234567 DSST ENTRIES PURGED FOR DAY YYYYDDD'+\n               ,ROUTCDE=(2,11),MF=L\nPURGECNT EQU   PURGEWTO+14,8\nPURGEDAY EQU   PURGEWTO+50,8\nEXTRCOMM EXTRACT COMMADDR,'S',FIELDS=(COMM),MF=L\nOBTSRCH  CAMLST SEARCH,2,3,4        OBTAIN SEARCH PARAMETER LIST.\nLSPACEL  LSPACE EXPMSG=SVC78BUF,SMF=TEST,F4DSCB=IECSDSL4,MF=L\nSVC78FLG EQU   LSPACEL+6,1          SMF 19 RECORDS ONLY IF VOLUME ACCT.\n         IECSDSL1 (4)               BODY OF FORMAT-4 DSCB.\n         DC    XL44'00'             MAKE WORK AREA 140 LONG FOR OBTAIN.\nSVC78BUF DS    0CL40                LSPACE EXPANDED MESSAGE AREA.\n*        DS    0CL30                LSPACE STANDARD MESSAGE AREA.\n         DC    CL6'SPACE='\nFREECYL  DS    CL4\n         DS    CL1\nFREETRK  DS    CL4\n         DS    CL1\nFREEEXT  DS    CL4\n         DS    CL1\nMAXCYL   DS    CL4\n         DS    CL1\nMAXTRK   DS    CL4\n         ORG   FREECYL\nFREECYLX DC    CL6'000000'\n         DC    CL1','\nFREETRKX DC    CL6'000000'\n         DC    CL1','\nFREEEXTX DC    CL6'000000'\n         DC    CL1'/'\nMAXCYLX  DC    CL6'000000'\n         DC    CL1','\nMAXTRKX  DC    CL6'000000'\nFLAGS    DC    X'00'                FLAG BYTE.\nFIVEFLAG EQU   X'80'                0==> 10 MIN. INTERVAL, ELSE 5 MINS.\nFILEFLAG EQU   X'40'                SAVEHIST ALLOCATED.\nSTOPPING EQU   X'20'                PROGRAM TERMINATING.\n         SPACE\n         DC    0F\n         UCBINFO PLISTVER=MAX,MF=(L,UINFOL)\nUTOKEN   DC    XL48'00'             IOCTOKEN AREA.\n         SPACE\n         PRINT NOGEN\nSAVEHIST DCB   DSORG=PS,DDNAME=SAVEHIST,MACRF=(GM,PM),EODAD=EOINPUT,   +\n               RECFM=FB,LRECL=DSSTELEN,BLKSIZE=0\n         PRINT GEN\nGETPUTBF DC    XL(DSSTELEN)'00'     I/O BUFFER.\nGOODVOLS DC    F'0'\n         SPACE\n         UCBSCAN MF=(L,USCN)        UCBSCAN PARAMETER LIST.\nUSDYNSTG DS    0XL200               UCBSCAN DYNAMIC STORAGE.\nUSCNWORK DC    XL100'00'            UCBSCAN WORKAREA.\nUSCFGTKN DC    XL48'00'             UCBSCAN I/O CONFIGURATION TOKEN.\nUSCNUCB  DC    XL48'00'             UCBSCAN UCB BASE AREA.\nUSDEVNUM DC    CL4'DEV#'            UCBSCAN UCB DEVICE NUMBER.\n         SPACE\n         LTORG\n         SPACE\n         DS    0D\nSMSWORKA DS    XL256'00'            SSOB AND SSSA AREA.\n         DS    0D\n         DC    CL48'(C) COPYRIGHT 1989-2018 PRYCROFT SIX PTY LTD'\n         DS    0D                   END OF CSECT.\n         TITLE 'DSECTS AND EQUATES'\n         COPY  IMSPDSST             DISK SPACE SNAP-SHOT TABLE.\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'SYSTEM CONTROL BLOCKS'\n         PRINT NOGEN\n         SPACE\n         CVT   DSECT=YES\n         SPACE\n         IECDIOCM\n         SPACE\n         IEFJESCT\n         SPACE\n         IEFJSSIB\n         SPACE\n         IEFJSSOB\n         SPACE\n         IEFSSSA\n         SPACE\n         IEFUCBOB PREFIX=YES,DEVCLAS=DA\n         SPACE\n         IGDVLD\n         SPACE\n         PRINT GEN\n         SPACE\n         END   IMSPACER\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMSPDSST": {"ttr": 24836, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'4\\x00\\x00\\x00\\x00\\x93$o\\x00\\x98\\x11\\x7f\\x11\\x04\\x00\\x1c\\x00\\x1a\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "52.00", "flags": 0, "createdate": "1993-09-03T00:00:00", "modifydate": "1998-04-27T11:04:00", "lines": 28, "newlines": 26, "modlines": 0, "user": "T$QGP75"}, "text": "*        (C) COPYRIGHT 1989,1993 PRYCROFT SIX PTY LTD\nDSST     DSECT                      DISK SPACE SNAP-SHOT TABLE.\nDSSTSIZE DS    F                    SIZE OF THIS DSST.\nDSSTADDR DS    A                    ADDRESS OF THIS DSST.\nDSSTDSST DS    A                    ADDRESS OF NEXT DSST.\nDSSTBACK DS    A                    ADDRESS OF PREVIOUS DSST.\nDSSTTIME DS    F                    TIME OF SNAP-SHOT.\nDSSTDATE DS    PL4                  DATE OF SNAP-SHOT.\nDSSTBEND DS    0D\nDSSTBLEN EQU   DSSTBEND-DSST        LENGTH OF DSST BASE.\n*        END OF DSST BASE WHICH IS THREE (3) DOUBLEWORDS IN SIZE.\nDSSTE    DS    0D                   DISK SPACE SNAP-SHOT TABLE ENTRY.\nDSSTEUCB DS    A                    UCB ADDRESS OR DEVICE NUMBER.\nDSSTEVOL DS    CL6                  VOLUME SERIAL NUMBER AT THE TIME.\nDSSTEUSE DS    H                    VOLUME USAGE COUNT AT THE TIME.\nDSSTEOPN DS    H                    VOLUME OPEN COUNT AT THE TIME.\nDSSTECPV DS    H                    NUMBER OF CYLINDERS ON VOLUME.\nDSSTETPC DS    H                    NUMBER OF TRACKS PER CYLINDER.\nDSSTETSZ DS    H                    TRACK SIZE IN BYTES.\nDSSTECYL DS    F                    FREE CYLINDER COUNT.\nDSSTETRK DS    F                    FREE TRACK (NOT IN CYL) COUNT.\nDSSTEEXT DS    F                    FREE EXTENT COUNT.\nDSSTEMXC DS    F                    LARGEST FREE EXTENT CYLINDER COUNT.\nDSSTEMXT DS    F                    LARGEST FREE EXTENT TRACK COUNT.\nDSSTEGRP DS    CL8                  SMS STORAGE GROUP NAME.\nDSSTEEND DS    0D\nDSSTELEN EQU   DSSTEEND-DSSTE       LENGTH OF A DSST VOLUME ENTRY.\n*        END OF DSST ENTRY WHICH IS SIX (6) DOUBLEWORDS IN SIZE.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMSWAP": {"ttr": 24838, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98)o\\x00\\x98)o\\x15D\\x02P\\x02P\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-10-23T00:00:00", "modifydate": "1998-10-23T15:44:00", "lines": 592, "newlines": 592, "modlines": 0, "user": "T$QGP75"}, "text": "IMSWAP   CSECT\nIMSWAP   AMODE 31\nIMSWAP   RMODE ANY\n\n***********************************************************************\n*                                                                     *\n*  Function - Make an address space swappable or nonswappable.        *\n*                                                                     *\n*        Entry point: IWSWAP                                          *\n*                                                                     *\n*        Input registers:                                             *\n*          R0: N/A                                                    *\n*          R1: Address of caller's parameter list pointer             *\n*          R2-12: N/A                                                 *\n*          R13: Address of register save area                         *\n*          R14: Return address                                        *\n*          R15: Entry point address                                   *\n*                                                                     *\n*          Output registers:                                          *\n*            R0-14: Same as on entry                                  *\n*            R15: Return code                                         *\n*                 0 - IMSWAP function completed successfully          *\n*                12 - IMSWAP function encountered errors              *\n*                                                                     *\n*          Register usage(internal):                                  *\n*            R0-11: Work registers                                    *\n*            R12: Base register                                       *\n*            R13: Workarea address                                    *\n*            R14-15: Work and linkage registers                       *\n*                                                                     *\n*          Upon entry to this routine, R1 must point to the address   *\n*          of the caller's parameter list pointer.  The parameter     *\n*          list must be formatted as follows:                         *\n*                                                                     *\n*  PARMLIST DS   0CL14                                                *\n*  PARM1    DS   CL1 (\"S\"=SWAP, \"D\"=DONTSWAP)                         *\n*  PARM2    DS   CL1 (\"J\"=JOBNAME, \"A\"=ASID)                          *\n*  PARM3    DS   CL8 (jobname)                                        *\n*  PARM4    DS   CL4 (asid)                                           *\n*                                                                     *\n*  PARM1 must be either \"S\" or \"D\" and specifies the request type.    *\n*  PARM2 must be either \"J\" or \"A\" and specifies whether a jobname    *\n*  or asid is being used to identify the address space that is to be  *\n*  made swappable or non-swappable.                                   *\n*  PARM3 must contain a jobname if PARM2 specified \"J\".  The jobname  *\n*  must be blank padded on the right.                                 *\n*  PARM4 must contain an asid if PARM2 specified \"A\".  The asid must  *\n*  must be right-justified and padded with zeros on the left.         *\n*                                                                     *\n*                                                                     *\n*          Environment: Amode 31, rmode any, supervisor state,        *\n*                       psw key 0.  The caller must be authorized.    *\n*                                                                     *\n*                                                                     *\n*  Author   - Bob Break                                               *\n*                                                                     *\n***********************************************************************\n\n***********************************************************************\n*                                                                     *\n*        Initialization.                                              *\n*                                                                     *\n***********************************************************************\n\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n\n         USING PSA,0\nSWAP0000 BAKR  R14,0                    Save caller's environment\n         LR    R12,R15                  Set base register\n         USING SWAP0000,R12               and addressability\n         B     SWAP0001                 Branch around module identifier\n         DC    CL8'IMSWAP'              Module name\n         DC    C'&SYSDATE'              Assembly date\n         DC    C'VERS01'                Version\nSWAP0001 DS    0H\n         MODESET MODE=SUP               Set supervisor state\n         SPKA  0(0)                     Set psw key 0\n         LA    R0,WORKSIZE              Get workarea size\n         STORAGE OBTAIN,LENGTH=(R0),LOC=ANY\n         LR    R2,R1                    Save workarea pointer\n         LR    R14,R2                   Get pointer into work register\n         LA    R15,WORKSIZE             Set move to length\n         XR    R1,R1                    Set move from length and pad\n         MVCL  R14,R0                   Clear workarea\n         ST    R2,8(,R13)               Chain save areas\n         ST    R13,4(,R2)               *\n         LR    R13,R2                   Set workarea pointer\n         USING WORKAREA,R13\n         EREG  R0,R1                    Restore entry registers 0-1\n         L     R1,0(,R1)                Point to input parm list\n\n***********************************************************************\n*                                                                     *\n*        Extract the input parameters.                                *\n*                                                                     *\n***********************************************************************\n\nSWAP0100 CLI   0(R1),C'S'                Swap request?\n         BNE   SWAP0101                  No - branch, dontswap request\n         OI    WORKFLAG,SWAPREQ          Set swap request indicator\nSWAP0101 CLI   1(R1),C'J'                Jobname specified?\n         BNE   SWAP0102                  No - branch, asid specified\n         MVC   JOBNAME,2(R1)             Save specified jobname\n         B     SWAP0110                  Branch - continue\nSWAP0102 MVC   ASIDVAL,10(R1)            Save specified asid\n         B     SWAP0120                  Branch - continue\n\n***********************************************************************\n*                                                                     *\n*        Find the ASCB for the specified jobname.                     *\n*                                                                     *\n***********************************************************************\n\nSWAP0110 L     R1,CVTPTR(,0)             Get CVT pointer\n         L     R1,CVTASVT-CVT(,R1)       Get ASVT pointer\n         L     R14,ASVTMAXU-ASVT(,R1)    Get max number of asids\n         LA    R1,ASVTENTY-ASVT(,R1)     Bump to first ASCB slot\nSWAP0111 TM    0(R1),ASVTAVAL            This slot being used?\n         BO    SWAP0113                  No - branch, check next slot\n         L     R2,0(,R1)                 Get ASCB pointer\n         USING ASCB,R2\n         ICM   R15,15,ASCBJBNI           Get batch job name pointer\n         BNZ   SWAP0112                  Branch - continue\n         L     R15,ASCBJBNS              Get STC/TSU name pointer\nSWAP0112 CLC   JOBNAME,0(R15)            Jobname match?\n         BE    SWAP0200                  Yes - branch, continue\nSWAP0113 LA    R1,4(,R1)                 Bump to next ASVT entry\n         BCT   R14,SWAP0111              Loop back to check next slot\n         MVC   RETCODE,=F'12'            Set error return code\n         B     SWAPRET                   Branch - return\n\n***********************************************************************\n*                                                                     *\n*        Determine the specified asid number.                         *\n*                                                                     *\n***********************************************************************\n\nSWAP0120 XR    R1,R1                     Clear work register\n         LA    R14,ASIDVAL               Point to input asid value\n         LA    R15,4                     Set scan limit\nSWAP0121 CLI   0(R14),C'A'               Validity check digit\n         BL    SWAP0126                  Branch if invalid\n         CLI   0(R14),C'F'               Validity check digit\n         BH    SWAP0122                  Branch of not 'A' - 'F'\n         TR    0(1,R14),ASIDTRAN         Translate character\n         B     SWAP0123                  Branch - continue\nSWAP0122 CLI   0(R14),C'0'               Validity check digit\n         BL    SWAP0126                  Branch if invalid\n         CLI   0(R14),C'9'               Validity check digit\n         BH    SWAP0126                  Branch if invalid\nSWAP0123 NI    0(R14),X'0F'              Isolate digit\n         XR    R0,R0                     Retrieve digit\n         IC    R0,0(R14)                 *\n         MH    R1,=H'16'                 Multiply asid # by 16\n         AR    R1,R0                     Add current digit to total\n         LA    R14,1(,R14)               Bump to next character\n         BCT   R15,SWAP0121              Loop back for next digit\nSWAP0124 LTR   R1,R1                     ASID zero?\n         BZ    SWAP0126                  Yes - branch, invalid\n         L     R15,CVTPTR(,0)            Get CVT pointer\n         L     R15,CVTASVT-CVT(,R15)     Get ASVT pointer\n         C     R1,ASVTMAXU-ASVT(R15)     Is asid number valid?\n         BH    SWAP0126                  Branch - invalid asid\n         STH   R1,ASIDNBR                Save specified asid number\n         SLL   R1,2                      Multiply asid number by 4\n         LA    R14,ASVTFRST-ASVT(R1,R15)  Get ASVT entry pointer\n         TM    0(R14),ASVTAVAL           Address space active?\n         BO    SWAP0126                  No - branch, error\n         L     R2,0(,R14)                GET ASCB PTR\n         ICM   R15,15,ASCBJBNI           Get batch job name pointer\n         BNZ   SWAP0125                  Branch - continue\n         L     R15,ASCBJBNS              Get STC/TSU name pointer\nSWAP0125 MVC   JOBNAME,0(R15)            Save jobname\n         B     SWAP0200                  Branch - continue\nSWAP0126 MVC   RETCODE,=F'12'            Set error return code\n         B     SWAPRET                   Branch - return\n\n***********************************************************************\n*                                                                     *\n*        Check if the address space is already in the requested       *\n*        status (swappable or non-swappable).                         *\n*                                                                     *\n***********************************************************************\n\nSWAP0200 L     R15,ASCBOUCB              Get OUCB pointer\n         USING OUCB,R15\n         TM    WORKFLAG,SWAPREQ          Swap request?\n         BZ    SWAP0201                  No - branch, continue\n         TM    OUCBSFL,OUCBNSW           OUCB marked non-swappable?\n         BO    SWAP0300                  Yes - branch, continue\n         B     SWAPFREE                  Branch - continue\nSWAP0201 TM    OUCBSFL,OUCBNSW           OUCB marked non-swappable?\n         BO    SWAPFREE                  Yes - branch, continue\n         DROP  R2,R15                    ASCB, OUCB\n\n***********************************************************************\n*                                                                     *\n*        Obtain an area of storage for the SRB/RMTR/FRR routines.     *\n*                                                                     *\n***********************************************************************\n\nSWAP0300 LA    R0,SRBMODSL               Get module lengths\n         STORAGE OBTAIN,LENGTH=(R0),SP=241,LOC=ANY\n         ST    R1,SRBMODSP               Save SRB modules pointer\n         LR    R0,R1                     Set move to address\n         LA    R1,SRBMODSL               Set move to length\n         LA    R14,SRBMODS               Set move from address\n         LR    R15,R1                    Set move from length and pad\n         MVCL  R0,R14                    Relocate SRB modules code\n         L     R1,SRBMODSP               Get SRB modules pointer\n         MVC   CALLASCB-SRBMODS(4,R1),PSAAOLD  Set ASCB for xmpost\n\n***********************************************************************\n*                                                                     *\n*        Schedule an SRB to the specified address space.              *\n*                                                                     *\n***********************************************************************\n\n         LA    R0,SRBSIZE                Get SRB length\n         STORAGE OBTAIN,LENGTH=(R0),SP=245,LOC=ANY\n         ST    R1,SRBPTR                 Save SRB pointer\n         USING SRBSECT,R1\n         XC    SRBSECT(SRBSIZE),SRBSECT  Initialize SRB\n         MVC   SRBID,=C'SRB '            Set SRB identifier\n         ST    R2,SRBASCB                Set ASCB pointer\n         L     R15,PSAAOLD               Get current ASCB pointer\n         MVC   SRBPASID,ASCBASID-ASCB(R15)  Set asid\n         MVC   SRBPTCB,PSATOLD           Set TCB pointer\n         L     R15,SRBMODSP              Set SRB modules pointer in SRB\n         ST    R15,SRBEP                 *\n         OI    SRBEP,SRBMODE             Run SRB in AMODE 31\n         LA    R15,RMTRBEG-SRBMODS(,R15)  Set RMTR pointer in SRB\n         ST    R15,SRBRMTR               *\n         OI    SRBRMTR,SRBRMODE          Run RMTR in AMODE 31\n         L     R15,SRBMODSP              Get SRB modules pointer\n         LA    R15,FRRBEG-SRBMODS(,R15)  Set FRR module pointer in SRB\n         ST    R15,SRBFRRA               *\n         OI    SRBFRRA,SRBRMODE          Run FRR in AMODE 31\n         DROP  R1                        SRBSECT\n         SCHEDULE SRB=(R1),SCOPE=LOCAL,FRR=YES\n\n***********************************************************************\n*                                                                     *\n*        Wait until the SRB routine has completed execution.          *\n*                                                                     *\n***********************************************************************\n\n         LA    R3,100                    Set maximum wait of .1 second\nSWAP0400 STIMER WAIT,BINTVL=WAITTIME     Wait .1 second\n         L     R15,SRBMODSP              Get SRB modules pointer\n         TM    CALLECB-SRBMODS(R15),X'40'  Did SRB routine finish?\n         BO    SWAPFREE                  Yes - branch, continue\n         BCT   R3,SWAP0400               Loop back to wait again\n\n***********************************************************************\n*                                                                     *\n*        The SRB did not complete execution.  Purge the SRB.          *\n*                                                                     *\n***********************************************************************\n\n         L     R15,SRBMODSP              Get SRB modules pointer\n         MVC   SYSEVTRC-SRBMODS(4,R15),=C'PURG'  Set error return code\n         L     R1,SRBPTR                 Get SRB pointer\n         USING SRBSECT,R1\n         L     R15,SRBASCB               Get target ASCB pointer\n         MVC   ASIDNBR,ASCBASID-ASCB(R15)  Set target asid\n         XC    WORKPDQ,WORKPDQ           Init PURGEDQ parm list\n         MVC   WORKPDQA,SRBPASID         Init PURGEDQ ASID\n         MVC   WORKPDQT,SRBPTCB          Init PURGEDQ TCB pointer\n         L     R3,SRBRMTR                Get RMTR pointer\n         OI    SRBFLGS,SRBFRRCL          Set SRB not complete flag\n         DROP  R1                        SRBSECT\n         MVC   WORKPURG(PURGEDQL),PURGEDQ  Set PURGEDQ parm list\n         PURGEDQ RMTR=(R3),                                            X\n               ASID=ASIDNBR,                                           X\n               ASIDTCB=WORKPDQ,                                        X\n               MF=(E,WORKPURG)\n         L     R15,SRBMODSP              Get SRB modules pointer\n         TM    CALLECB-SRBMODS(R15),X'40'  SRB purged?\n         BO    SWAPFREE                  Yes - branch, continue\n\n***********************************************************************\n*                                                                     *\n*        The SRB was not purged.  Change the entry points for the     *\n*        SRB, RMTR, and FRR routines to an IEFBR14, so that the areas *\n*        of storage that were obtained for the modules can be safely  *\n*        freed.  The SRB SQA storage will remain permanently          *\n*        allocated, since the SRB could still be scheduled after this *\n*        task terminates.                                             *\n*                                                                     *\n***********************************************************************\n\n         L     R1,SRBPTR                Get SRB pointer\n         USING SRBSECT,R1\n         L     R15,CVTPTR(,0)           Get CVT pointer\n         LA    R15,CVTBRET-CVT(,R15)    Set \"B R14\" instruction pointer\n         ST    R15,SRBEP                  in SRB\n         OI    SRBEP,SRBMODE            Run SRB in AMODE 31\n         ST    R15,SRBRMTR              Replace RMTR routine pointer\n         OI    SRBRMTR,SRBRMODE         Run RMTR in AMODE 31\n         ST    R15,SRBFRRA              Replace FRR routine pointer\n         OI    SRBFRRA,SRBRMODE         Run FRR in AMODE 31\n         DROP  R1                       SRBSECT\n\n***********************************************************************\n*                                                                     *\n*        Free the obtained E/CSA and E/SQA areas.                     *\n*                                                                     *\n***********************************************************************\n\nSWAPFREE ICM   R1,15,SRBPTR              Get SRB pointer\n         BZ    SWAPFR01                  Branch - no SRB\n         USING SRBSECT,R1\n         TM    SRBPARM,X'80'             Did SRB execute?\n         BZ    SWAPFR01                  No - branch, continue\n         DROP  R1                        SRBSECT\n         LA    R0,SRBSIZE                Get SRB size\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=245\nSWAPFR01 ICM   R1,15,SRBMODSP            Get SRB modules pointer\n         BZ    SWAPFR02                  Branch - no SRB modules\n         LA    R0,SRBMODSL               Get SRB modules length\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=241\nSWAPFR02 DS    0H\n\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n\nSWAPRET  L     R2,RETCODE                Get return code\n         LA    R0,WORKSIZE               Get workarea size\n         LR    R1,R13                    Get workarea pointer\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)\n         LR    R15,R2                    Set return code\n         PR                              Return to caller\n\n         LTORG\n\n\nPURGEDQ  PURGEDQ MF=L                   PURGEDQ parameter list\nPURGEDQL EQU   *-PURGEDQ\n\nWAITTIME DC    F'10'                    Wait interval (.1 second)\nASIDTRAN EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'          ASID translate table\n\n         DROP  R12,R13                  Base, WORKAREA\n\n\n***********************************************************************\n*                                                                     *\n*        SRB routine.                                                 *\n*                                                                     *\n***********************************************************************\n\n         USING PSA,0\nSRBMODS  DS    0F\nSRBBEG   EQU   *\n         LR    R12,R15                   Set base register\n         USING SRBBEG,R12                  and addressability\n         LR    R8,R14                    Save return address\n         LR    R10,R0                    Get SRB pointer\n         USING SRBSECT,R10\n         TM    SRBFLGS,SRBFRRCL          Main task not waiting?\n         BOR   R14                       Yes - branch, return to system\n         OI    SRBPARM,X'80'             Set SRB executed flag\n         LR    R9,R2                     Get FRR parm list pointer\n         USING FRRPARMS,R9\n         XC    FRRPARMS(FRRPARML),FRRPARMS  Init FRR parm list\n         ST    R10,FRRSRB                Set SRB ptr in FRR parm list\n         L     R2,SRBASCB                Get SRB ASCB\n         USING ASCB,R2\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE\n         OI    FRRFLAGS,FRRLOCAL         Set local lock held flag\n\n***********************************************************************\n*                                                                     *\n*        Make the address space swappable or non-swappable.           *\n*                                                                     *\n***********************************************************************\n\n         L     R15,ASCBOUCB              Get OUCB pointer\n         USING OUCB,R15\n         TM    OUCBSFL,OUCBNSW           Is asid non-swappable?\n         BO    SRBSWAP                   Yes - branch, swap request\n         DROP  R15                       OUCB\n         LH    R0,ASCBASID               Get asid\n         XR    R1,R1                     Set no parms for SYSEVENT\n         LA    R13,SYSEVTSV              Get SYSEVENT save area pointer\n         SYSEVENT DONTSWAP,ASID=(R0),ENTRY=BRANCH\n         STC   R1,SYSEVTRC+3             Save return code\n         B     SRBPOST                   Branch - post caller\nSRBSWAP  LH    R0,ASCBASID               Get asid\n         XR    R1,R1                     Set no parms for SYSEVENT\n         LA    R13,SYSEVTSV              Get SYSEVENT save area pointer\n         SYSEVENT OKSWAP,ASID=(R0),ENTRY=BRANCH\n         STC   R1,SYSEVTRC+3             Save return code\n\n***********************************************************************\n*                                                                     *\n*        Post the caller for SRB completion.                          *\n*                                                                     *\n***********************************************************************\n\nSRBPOST  XR    R0,R0                     Indicate ECB in key 0 storage\n         LA    R10,X'7F'                 Set post code\n         SLL   R10,24                    *\n         LA    R11,CALLECB               Get ECB pointer\n         CLC   PSAAOLD,CALLASCB          Cross memory post?\n         BE    SRBPOST1                  No - branch, continue\n         O     R11,SRBHBIT               Indicate cross memory post\nSRBPOST1 L     R13,CALLASCB              Get ASCB pointer\n         LA    R12,SRBRTRN               Set post error address\n         DROP  R12                       Base\n         L     R15,CVTPTR(,0)            Get CVT pointer\n         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point\n         BALR  R14,R15                   Post ECB\n         OI    FRRFLAGS,FRRPOST          Indicate post completed\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE\n         NI    FRRFLAGS,255-FRRLOCAL     Reset local lock held flag\n         LR    R14,R8                    Get return address\nSRBRTRN  BR    R14                         and return to caller\n         DROP\n\n\n***********************************************************************\n*                                                                     *\n*        RMTR routine.                                                *\n*                                                                     *\n***********************************************************************\n\n         USING PSA,0\nRMTRBEG  DS    0H\n         LR    R12,R15                   Set base register\n         USING RMTRBEG,R12                 and addressability\n         LR    R10,R1                    Get SRB pointer\n         USING SRBSECT,R10\n         OI    SRBPARM,X'80'             Set SRB executed flag\n         LR    R8,R14                    Save return address\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE\n         XR    R0,R0                     Indicate ECB in key 0 storage\n         LA    R10,X'7F'                 Set post code\n         SLL   R10,24                    *\n         LA    R11,CALLECB               Get ECB pointer\n         CLC   PSAAOLD,CALLASCB          Cross memory post?\n         BE    RMTRNXMP                  No -branch, continue\n         O     R11,SRBHBIT               Indicate cross memory post\nRMTRNXMP L     R13,CALLASCB              Get ASCB pointer\n         LA    R12,RMTRRTRN              Set post error address\n         DROP  R12                       Base\n         L     R15,CVTPTR(,0)            Get CVT pointer\n         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point\n         BALR  R14,R15                   Post ECB\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE\n         LR    R14,R8                    Get return address\nRMTRRTRN BR    R14                         and return to caller\n         DROP\n\n\n***********************************************************************\n*                                                                     *\n*        FRR ROUTINE.                                                 *\n*                                                                     *\n***********************************************************************\n\n         USING PSA,0\nFRRBEG   DS    0H\n         LR    R12,R15                   Set base register\n         USING FRRBEG,R12                  and addressability\n         LR    R2,R1                     Get SDWA pointer\n         USING SDWA,R2\n         L     R9,SDWAPARM               Get FRR parm list pointer\n         USING FRRPARMS,R9\n         TM    FRRPARMS,FRRENTER         FRR previously entered?\n         BOR   R14                       Yes - branch, return\n         OI    FRRPARMS,FRRENTER         Set FRR entered flag\n         ST    R14,FRRETURN              Save return address\n         ICM   R1,15,FRRSRB              Is there an SRB?\n         BZ    FRRNOSRB                  No - branch, continue\n         USING SRBSECT,R1\n         OI    SRBPARM,X'80'             Set SRB executed flag\n         DROP  R1                        SRBSECT\nFRRNOSRB MVC   SYSEVTRC,=C'ABND'         Set abend in return code\n         TM    FRRFLAGS,FRRPOST          ECB already posted?\n         BO    FRRNPOST                  Yes - branch, continue\n         TM    FRRFLAGS,FRRLOCAL         Local lock held?\n         BO    FRRLOCK                   Yes - branch, continue\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE\n         OI    FRRFLAGS,FRRLOCAL         Set local lock held flag\nFRRLOCK  XR    R0,R0                     Indicate ECB in key 0 storage\n         LA    R10,X'7F'                 Set post code\n         SLL   R10,24                    *\n         LA    R11,CALLECB               Get ECB pointer\n         CLC   PSAAOLD,CALLASCB          Cross memory post?\n         BE    FRRNXMP                   No - branch, continue\n         O     R11,SRBHBIT               Indicate cross memory post\nFRRNXMP  L     R13,CALLASCB              Get ASCB pointer\n         ST    R12,FRRBASE               Save base register\n         LA    R12,FRRPSTER              Set post error address\n         L     R15,CVTPTR(,0)            Get CVT pointer\n         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point\n         BALR  R14,R15                   Post ECB\n         L     R12,FRRBASE               Restore base register\nFRRNPOST TM    FRRFLAGS,FRRLOCAL         Local lock held?\n         BZ    FRRRTRN                   No - branch, continue\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE\n         B     FRRRTRN                   Branch - continue\nFRRPSTER BR    R14                       Branch - return to RTM\n\n***********************************************************************\n*                                                                     *\n*        Return to RTM.                                               *\n*                                                                     *\n***********************************************************************\n\nFRRRTRN  LR    R1,R2                     Set SDWA pointer for SETRP\n         SETRP DUMP=YES,RECORD=YES,RC=0  Set return options\n         L     R14,FRRETURN              Set FRR return address\n         BR    R14                       Branch - return to RTM\n         DS    0F\nSRBHBIT  DC    X'80000000'               High-order bit indicator\n\n         LTORG\n\nCALLASCB DC    F'0'                      Caller's ASCB pointer\nCALLECB  DC    F'0'                      ECB for xmpost\nSYSEVTRC DC    F'0'                      SYSEVENT return code\nSYSEVTSV DC    18F'0'                    SYSEVENT save area\nSRBMODSL EQU   *-SRBMODS                 SRB modules length\n         DROP\n\n\nFRRPARMS DSECT                           FRR parameter list (6 words)\nFRRFLAGS DS    X                         FRR flag byte\nFRRENTER EQU   X'80'                     FRR recursion indicator\nFRRLOCAL EQU   X'40'                     Local lock acquired\nFRRPOST  EQU   X'20'                     ECB posted\n         DS    3X                        Reserved\nFRRETURN DS    A                         FRR return address\nFRRBASE  DS    F                         FRR base register\nFRRSRB   DS    A                         SRB pointer (or zero)\n         DS    2F                        Reserved\nFRRPARML EQU   *-FRRPARMS                FRR parameter list length\n\n\nWORKAREA DSECT\n         DS    18F\nWORKFLAG DS    XL1                       Flag byte\nSWAPREQ  EQU   X'80'                     Swap request\n         DS    XL3                       Reserved\nRETCODE  DS    F                         SWAP return code\nJOBNAME  DS    CL8                       Specified jobname\nASIDVAL  DS    CL4                       Specified asid\nASIDNBR  DS    H                         ASID number\nR14SAVE  DS    F                         R14 SAVE AREA\nSRBMODSP DS    A                         SRB modules pointer\nSRBPTR   DS    A                         SRB area pointer\n         DS    0F\nWORKPURG DS    (PURGEDQL)X               PURGEDQ parameter list\nWORKPDQ  DS    0D                        PURGEDQ parameter area\nWORKPDQR DS    H                         PURGEDQ reserved area\nWORKPDQA DS    H                         PURGEDQ asid\nWORKPDQT DS    A                         PURGEDQ TCB pointer\nWORKSIZE EQU   *-WORKAREA                Workarea length\n\n\n         PRINT NOGEN\n         CVT DSECT=YES\n         IHAASCB\n         IHAASVT\n         IHAPSA\n         IHASDWA\n         IHASRB\n         IRAOUCB\n\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMSWPTXT": {"ttr": 25092, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x01 $o\\x01 $o\\x18S\\x00]\\x00]\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-09-02T00:00:00", "modifydate": "2020-09-02T18:53:15", "lines": 93, "newlines": 93, "modlines": 0, "user": "GREG"}, "text": "Greg:\n\nThe following attachment contains the swap code module.  It is in object\nmodule format, so perform the following steps and it should work fine.\n1. FTP upload the file to MVS in binary format into an FB, LRECL 80 object\nlibrary.\n2. Link edit the object module and assign the resultant load module the\n    following attributes: AC(1), RENT, REUS.\nIf you want to test before invoking from IMON, you can put the load mod in\nan authorized library and run it as a batch job.  That is how I tested it.\nAlso, IMSWAP returns control to the caller with the psw restored to the\noriginal state, meaning that things like amode, program state, psw key and\nregisters are restored to what they were when my code was entered.  I\naccomplish this by using the BAKR intsruction and the linkage stack, so I\nguess that means this code would not work on an MVS released before V3 or\nsomething like that.\n\n\nThe following text documents the input parm list format etc.\n\nUpon entry to the IMSWAP module (or whatever you call it), R1 must point to\nthe address of a parmlist formatted as follows:\nPARMLIST DS   0CL14\nPARM1      DS   CL1 (\"S\"=SWAP, \"D\"=DONTSWAP)\nPARM2      DS   CL1 (\"J\"=JOBNAME, \"A\"=ASID)\nPARM3      DS   CL8 (jobname)\nPARM4      DS   CL4 (asid)\n\nPARM1 must be either \"S\" or \"D\" and specifies the request type.\nPARM2 must be either \"J\" or \"A\" and specifies whether a jobname\nor asid is being used to identify the address space that is to be\nmade swappable or non-swappable.\nPARM3 must contain a jobname if PARM2 specified \"J\".  The jobname must be\nleft-justified and blank padded on the right.\n\nPARM4 must contain a hexadecimal asid if PARM2 specified \"A\".  The asid\nmust\nmust be right-justified and padded with zeros on the left.\n\nA typical sequence of instructions from the calling module would be:\n\n                    LA       R1,PARMADDR             Set  parm list address\npointer\n                    L         R15,=V(IMSWAP)          Set swap module entry\npoint\n                    BALR  R14,R15                        Branch to swap\nmodule\n                    LTR     R15,R15                        Test return code\n                    BNZ     ERROR                         Error if rc not\nzero\n\nPARMADDR  DC    A(PARMLIST)\n\nPARMLIST    DS    0CL14\n\nPARM1         DC    CL1'D'          Make address space non-swappable\n\nPARM2         DC    CL1'J'           Identify address space by jobname\n\nPARM3         DC    CL8'CB7485'  Jobname of CB7485 (my TSO userid)\n\nPARM4         DC    CL4'      '      PARM4 not used in this case\n\nor another example:\nPARMADDR  DC    A(PARMLIST)\n\nPARMLIST    DS    0CL14\n\nPARM1         DC    CL1'S'          Make address space swappable\n\nPARM2         DC    CL1'A'           Identify address space by asid\n\nPARM3         DC    CL8'            '  PARM3 not used in this case\n\nPARM4         DC    CL4'01CE'      Asid of 1CE\n\nRegarding the return code, the IMSWAP module returns an rc of 0 if\neverything worked ok.  If the requested fucntion could not be successfully\ncompleted, the caller gets a return code of 12.  Since you will verify the\nasid before calling my code, there should not be that many error\nsituations.  However, if it would be desirable for you to receive more\ndetailed information about an error, I could return and document different\nreturn codes for various error situations.  That way, you could issue a\nmore descriptive message to the IMON user.  Just let me know.\n\nPlease let me know how it works when you get the chance to test.  Or if you\nhave questions or problems, just holler (electronically, of course).\nEnjoy!\n\nRegards,\nBob\n\nbbreak@swbell.net\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMVTOCRD": {"ttr": 25095, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98!_\\x00\\x98!_\\x13R\\x01\\xc5\\x01\\xc5\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-08-03T00:00:00", "modifydate": "1998-08-03T13:52:00", "lines": 453, "newlines": 453, "modlines": 0, "user": "T$QGP75"}, "text": "IMVTOCRD TITLE 'XVTCREAD - VTOC READING SUBROUTINE'\n         SPACE 2\n* AUTHOR:  R. F. MORSE, MIT INSTRUMENTATION LABORATORY.\n         SPACE\n* FUNCTION: THIS SUBROUTINE READS THE VOLUME TABLE OF CONTENTS (VTOC)\n*        FROM A DIRECT-ACCESS DEVICE AND PRESENTS IT TO THE CALLER\n*        ONE RECORD (DSCB) AT A TIME.\n         SPACE\n* OPERATION: THIS ROUTINE IS A SPECIALIZED SEQUENTIAL ACCESS METHOD\n*        FOR VTOC'S.  ITS ADVANTAGE OVER ORDINARY BSAM IS THAT IT READS\n*        AN ENTIRE TRACK IN ONE REVOLUTION, THUS SAVING CONSIDERABLE\n*        TIME.  THE ROUTINE HAS THREE CALL MODES:\n*\n*        0 - READ.  RETURNS WITH THE CORE ADDRESS OF A DSCB IN REGISTER\n*              1.  THE CORE CONSISTS OF 148 CONSECUTIVE BYTES, CONTAIN-\n*              ING THE COUNT (8 BYTES), KEY (44 BYTES), AND DATA (96\n*              BYTES) FOR ONE DSCB.  RETURN CODES ARE:\n*                      0 - NORMAL;\n*                      4 - END OF FILE, NO DATA PRESENTED;\n*                      8 - PERMANENT I/O ERROR.  THE KEY AND DATA AREAS\n*                          WILL BE SET TO ZEROS; THE COUNT AREA WILL\n*                          CONTAIN THE CORRECT CCHHR.  SINCE READING\n*                          IS DONE A TRACK AT A TIME, ALL THE DSCB'S\n*                          FOR THAT TRACK WILL BE MARKED IN ERROR.\n*                          READING MAY CONTINUE ON TO THE NEXT TRACK.\n*\n*        1 - OPEN.  REGISTER 1 SHOULD POINT TO AN 8-BYTE FIELD\n*              CONTAINING THE DDNAME TO BE USED IN THE DCB.  THE\n*              CORRESPONDING DD CARD SHOULD SPECIFY A DISPOSITION OF\n*              (OLD,KEEP).  RETURN CODES:\n*                      0 - NORMAL;\n*                      4 - UNABLE TO OPEN (PROBABLY MISSING DD CARD);\n*                      8 - DD CARD DID NOT REFER TO A DIRECT-ACCESS\n*                          DEVICE, OR DEVICE TYPE UNKNOWN.\n*\n*        2 - CLOSE.  NO ARGUMENTS ARE REQUIRED OR RETURNED.  RETURN\n*              CODE IS 0.\n         SPACE\n* ENTRY POINTS:  ENTRY IS ALWAYS TO 'IMVTOCRD' VIA A BALR 14,15 WITH\n*        REGISTER 13 SET TO A SAVE AREA.  REGISTER 0 CONTAINS A\n*        BINARY INTEGER TO INDICATE THE CALL MODE AND REGISTER 1\n*        POINTS TO PARAMETERS AS REQUIRED FOR EACH MODE.\n*        AN ADDITIONAL ENTRY POINT, XVTCDCB, IS DEFINED TO ALLOW ACCESS\n*        TO THE VTOC DCB FROM CALLING PROGRAMS (E.G. XVTCLIST).\n         SPACE\n* DATA SETS:  READS VOLUME TABLE OF CONTENTS FROM ANY DIRECT-ACCESS\n*        DEVICE.  USES EXCP TO EXECUTE A CHAINED CHANNEL PROGRAM TO\n*        READ AN ENTIRE TRACK AT A TIME.\n         SPACE\n* EXTERNAL ROUTINES:  USES SUPERVISOR ROUTINE 'IECPCNVT' TO CONVERT\n*        A RELATIVE TRACK NUMBER TO AN ABSOLUTE ADDRESS.\n         SPACE\n* EXITS - NORMAL:  RETURNS VIA REGISTER 14 WITH RETURN CODE IN REGISTER\n*        15.  (SEE ABOVE FOR RETURN CODE VALUES.)\n         SPACE\n* EXITS - ERROR:  NONE.\n         SPACE\n* TABLES AND WORK AREAS:  DOES A GETMAIN TO OBTAIN A BUFFER LARGE\n*        ENOUGH TO HOLD AN ENTIRE TRACK FROM THE DEVICE BEING READ.\n         SPACE\n* ATTRIBUTES:  SERIALLY REUSABLE.\n         EJECT\n* SECTION DEFINITION AND REGISTER ASSIGNMENTS:\n         SPACE\nIMVTOCRD CSECT\n*        ENTRY XVTCDCB\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nRWA      EQU   2\nRWB      EQU   3\nRWC      EQU   4\nRPARM    EQU   9\nRRCODE   EQU   10              RETURN CODE REGISTER\nRRET     EQU   11              LOCAL SUBROUTINE EXIT REGISTER\nRBASE    EQU   12              LOCAL BASE REGISTER\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n* TAGS FOR CHANNEL COMMANDS AND FLAG BITS:\n         SPACE\nREADR0   EQU   X'16'           READ RECORD 0\nREADCKD  EQU   X'1E'           READ COUNT, KEY, AND DATA\n         SPACE\nCC       EQU   X'40'           COMMAND CHAIN FLAG\nSLI      EQU   X'20'           SUPPRESS LENGTH INDICATION FLAG\nSKIP     EQU   X'10'           SKIP DATA TRANSFER FLAG\n         SPACE 3\n* COMMUNICATION VECTOR TABLE (CVT) DEFINITIONS:\n         SPACE\nCVT      EQU   16              LOCATION OF CVT BASE ADDRESS\nCVTPCNVT EQU   28              OFFSET TO CONVERT ROUTINE ADDRESS\n         EJECT\n************\n* PROLOGUE *\n************\n         SPACE\n* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.\n         SPACE\n         SAVE  (14,12),,IMVTOCRD\n         SPACE\n         LR    RBASE,R15               SET LOCAL BASE REGISTER\n         USING IMVTOCRD,RBASE\n         LR    R14,R13                 SAVE CALLER'S R13\n         LA    R13,SAVEAREA            ADDRESS LOCAL SAVE AREA\n         ST    R13,8(,R14)             CHAIN FORWARD\n         ST    R14,SAVEAREA+4          CHAIN BACKWARD\n         SR    RRCODE,RRCODE           ZERO RETURN CODE REGISTER\n         SPACE\n* SELECT MODE FROM CONTENTS OF REGISTER 0.\n         SPACE\n         LA    RWA,3                   MASK FOR LOW 2 BITS\n         NR    RWA,R0                  GET CALL MODE\n         SLL   RWA,2                   MODE TIMES 4\n         B     *+4(RWA)                BRANCH ON MODE\n         SPACE\n         B     GET                     MODE 0, GET A DSCB\n         B     OPEN                    MODE 1, OPEN A NEW VTOC\n         B     CLOSE                   MODE 2, CLOSE\n         B     RETURN0                 MODE 3 NOT DEFINED, NO OP\n         SPACE 3\n***********\n* RETURNS *\n***********\n         SPACE\nRETURN8  LA    RRCODE,4(,RRCODE)       ENTRY FOR RETURN CODE 8\nRETURN4  LA    RRCODE,4(,RRCODE)       ENTRY FOR RETURN CODE 4\nRETURN0  LR    R15,RRCODE              ENTRY FOR RETURN CODE 0\n         SPACE\n         L     R13,SAVEAREA+4          RECOVER CALLER'S SAVE AREA\n         L     R14,12(,R13)            LOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)          RESTORE OTHER GENERAL REGISTERS\n         MVI   12(R13),X'FF'           SET RETURN FLAG ON\n         BR    R14                     RETURN TO CALLER\n         EJECT\n*********************\n* MODE 0 - GET DSCB *\n*********************\n         SPACE\n* IF END-OF-FILE WAS REACHED, RETURN AT ONCE.\n         SPACE\nGET      DS    0H\n         TM    MODESW,EOFSW            TEST END-OF-FILE BIT\n         BO    RETURN4                 RETURN CODE 4 IF ON\n         SPACE\n* IF CHANNEL PROGRAM HAS BEEN STARTED, GO TO CHECK IT.  OTHERWISE,\n* ASSUME THERE IS AT LEAST ONE FULL BUFFER.\n         SPACE\n         TM    MODESW,XCPRUN           TEST IF EXCP ISSUED\n         BO    XCPTEST                 BRANCH IF SO\n         SPACE\n* SET BUFFER ADDRESS TO NEXT DSCB AND TEST IF LAST ON TRACK.  IF NOT,\n* EXIT WITH ITS ADDRESS IN R1.\n         SPACE\n         L     RWA,DSCBADR             LOAD BUFFER POINTER\n         LA    RWA,148(,RWA)           ADVANCE TO NEXT DSCB\nNDXSTORE ST    RWA,DSCBADR             STORE UPDATED POINTER\n         C     RWA,DSCBLIM             TEST IF LAST DSCB IN BUFFER\n         BNL   LASTDSCB                BRANCH IF SO\n         LR    R1,RWA                  PASS ADDRESS TO USER\nGETOUT   TM    MODESW,RDERR            TEST IF ERROR ON THIS TRACK\n         BZ    RETURN0                 RETURN CODE 0 IF NOT\n         B     RETURN8                 RETURN CODE 8 IF ERROR\n         SPACE\n* IF THIS IS THE LAST DSCB, MOVE IT TO THE JFCB BUFFER AND START\n* READING THE NEXT TRACK.\n         SPACE\nLASTDSCB MVC   JFCB(148),0(RWA)        MOVE LAST DSCB\n         L     RWB,TTRN                LOAD RELATIVE TRACK NUMBER\n         AL    RWB,=X'00010000'        INCREMENT TO NEXT TRACK\n         ST    RWB,TTRN\n         BAL   RRET,EXCP               START CHANNEL PROGRAM\n         LA    R1,JFCB                 LOAD DSCB ADDRESS FOR CALLER\n         B     GETOUT                  TO RETURN\n         EJECT\n* WAIT FOR CHANNEL PROGRAM COMPLETION AND TEST THE OUTCOME.\n         SPACE\nXCPTEST  WAIT  ECB=VTOCECB\n         SPACE\n         NI    MODESW,X'FF'-XCPRUN     TURN EXCP STARTED BIT OFF\n         CLI   VTOCECB,X'7F'           TEST COMPLETION CODE\n         BNE   PERMERR                 BRANCH IF ERROR\nSETDSCBA L     RWA,DSCBSTRT            SET BUFFER POINTER TO 1ST DSCB\n         B     NDXSTORE\n         SPACE\n* PERMANENT ERROR FOR THIS TRACK.  ZERO THE DSCB'S AND FILL IN THE\n* CCHHR PORTIONS OF THE COUNT AREAS.\n         SPACE\nPERMERR  OI    MODESW,RDERR            SIGNAL READ ERROR\n         NI    IOBFLAG1,X'FB'          TURN OFF BIT 5 OF IOB FLAG\n         NI    DCBIFLGS,X'3F'          TURN OFF BITS 0 AND 1\n         L     RWA,DSCBSTRT            LOAD ADDRESS OF FIRST DSCB\n         LA    RWB,1                   LOAD RECORD NUMBER\n         SPACE\nDSCBELUP XC    0(148,RWA),0(RWA)       ZERO DSCB BUFFER\n         MVC   0(4,RWA),IOBSEEK+3      INSERT CCHH IN COUNT FIELD\n         STC   RWB,4(,RWA)             INSERT R IN COUNT FIELD\n         LA    RWA,148(,RWA)           POINT TO NEXT BUFFER\n         LA    RWB,1(,RWB)             INCREMENT RECORD NUMBER\n         C     RWA,DSCBLIM             TEST FOR LAST BUFFER\n         BNH   DSCBELUP\n         B     SETDSCBA                BRANCH TO RESET BUFFER POINTER\n         EJECT\n*****************\n* MODE 1 - OPEN *\n*****************\n         SPACE\n* ENTER WITH A DDNAME ADDRESSED BY REGISTER 1.  PERFORM CLOSE\n* SUBROUTINE FIRST TO BE SURE EVERYTHING IS INITIALIZED.\n         SPACE\nOPEN     DS    0H\n         LR    RPARM,R1                SAVE REGISTER 1\n         BAL   RRET,CLOSESUB           CALL CLOSE SUBROUTINE\n         SPACE\n         MVC   DCBDDNAM(8),0(RPARM)    INSERT DDNAME IN DCB\n         SPACE\n* CHECK DEVICE TYPE TO BE SURE IT IS DIRECT ACCESS.\n         SPACE\n         DEVTYPE  DCBDDNAM,DWORK       GET DEVICE TYPE\n         LTR   R15,R15                 TEST IF IT FOUND DD CARD\n         BNZ   RETURN4                 ERROR, DD CARD MISSING\n         CLI   DWORK+2,X'20'           TEST DEVICE TYPE\n         BNE   RETURN8                 ERROR IF NOT DIRECT ACCESS\n         SPACE\n         CLI   DWORK+3,MAXDVT          TEST FOR MAX DEVICE TYPE\n         BNL   RETURN8                 ERROR IF TOO LARGE\n         SR    R1,R1\n         IC    R1,DWORK+3              LOAD DEVICE NUMBER\n         IC    R1,DVICETAB(R1)         LOAD DSCB'S/TRK FROM TABLE\n         LTR   R1,R1                   ZERO IS UNDEFINED DEVICE\n         BZ    RETURN8                 EXIT IF UNKNOWN\n         ST    R1,NDSCBS               STORE NUMBER OF DSCB'S/TRACK\n         SPACE\n* READ JFCB AND INSERT DATA SET NAME OF 44 X'04'.\n         SPACE\n         RDJFCB  XVTCDCB\n         MVI   JFCBDSNM,X'04'          GENERATE DATA SET NAME\n         MVC   JFCBDSNM+1(43),JFCBDSNM\n         SPACE\n* OPEN THE DSCB.\n         SPACE\n         OPEN  (XVTCDCB,(INPUT)),TYPE=J\n         TM    DCBOFLGS,OPENBIT        TEST IF OPEN WORKED\n         BZ    RETURN4                 ERROR IF OPEN FAILED\n         SPACE\n* OBTAIN CORE FOR CHANNEL PROGRAM AND DSCB BUFFERS.\n         SPACE\n         LA    R0,156                  CORE FOR ONE DSCB AND ITS CCW\n         MH    R0,NDSCBS+2             TIMES NUMBER PER TRACK\n         AH    R0,=H'15'               PLUS 1 CCW AND ROUNDING\n         N     R0,=X'FFFFFFF8'         ROUND TO DOUBLE-WORD MULTIPLE\n         ST    R0,CBSIZE               SAVE SIZE OF GOTTEN CORE\n         GETMAIN  R,LV=(0)             GET TRACK BUFFERS\n         ST    R1,CBADDR               SAVE ADDRESS OF GOTTEN CORE\n         OI    MODESW,CBGOT            INDICATE CORE GOTTEN\n         SPACE\n* GENERATE CHANNEL PROGRAM.  IT CONSISTS OF A 'READ R0' ORDER WITH\n* THE SKIP FLAG ON, FOLLOWED BY A 'READ COUNT-KEY-AND-DATA' ORDER FOR\n* EACH DSCB.\n         SPACE\n         L     RWA,NDSCBS              NUMBER OF DSCB'S\n         SLL   RWA,3                   TIMES   8\n         LA    RWA,8(RWA,R1)           PLUS 8 AND BASE = 1ST BUFFER ADD\n         ST    RWA,DSCBSTRT            SAVE ADDRESS OF FIRST BUFFER\n         SPACE\n         ST    R1,IOBSTART             ADDRESS OF CHANNEL PROGRAM\n         MVC   0(8,R1),INITCCW         INSERT FIRST CCW\n         LA    RWB,8(,R1)              PLACE FOR NEXT CCW\n         LA    RWC,1                   BUFFER COUNTER\n         SPACE\nCCWLOOP  MVC   0(8,RWB),READCCW        INSERT READ CCW FOR ONE DSCB\n         ST    RWA,0(,RWB)             SET ITS BUFFER ADDRESS\n         MVI   0(RWB),READCKD          RESTORE COMMAND CODE\n         C     RWC,NDSCBS              TEST BUFFER COUNTER\n         BNL   LASTCCW                 BRANCH IF LAST BUFFER\n         LA    RWB,8(,RWB)             INCREMENT CCW ADDRESS\n         LA    RWA,148(,RWA)           INCREMENT BUFFER ADDRESS\n         LA    RWC,1(,RWC)             INCREMENT BUFFER COUNTER\n         B     CCWLOOP                 DO NEXT BUFFER\n         SPACE\nLASTCCW  NI    4(RWB),X'FF'-CC         TURN OFF COMMAND CHAIN BIT\n         ST    RWA,DSCBLIM             SAVE ADDRESS OF LAST DSCB BUFFER\n         SPACE\n* SET OTHER THINGS AND START PROGRAM TO FILL BUFFER.\n         SPACE\n         SR    R0,R0\n         ST    R0,TTRN                 SET RELATIVE TRACK NUMBER TO 0\n         NI    MODESW,X'FF'-XCPRUN-RDERR-EOFSW   SET FLAGS OFF\n         BAL   RRET,EXCP               START CHANNEL PROGRAM\n         B     RETURN0                 INDICATE SUCCESSFUL OPEN\n         EJECT\n******************\n* MODE 2 - CLOSE *\n******************\n         SPACE\nCLOSE    BAL   RRET,CLOSESUB           CALL CLOSED CLOSE SUBROUTINE\n         B     RETURN0\n         SPACE 2\n* IF THE CHANNEL PROGRAM IS RUNNING, WAIT FOR IT BEFORE TAKING FURTHER\n* ACTION.\n         SPACE\nCLOSESUB DS    0H\n         TM    MODESW,XCPRUN           TEST IF CHANNEL PROGRAM RUNNING\n         BZ    NOEXCP                  BRANCH IF NOT\n         WAIT  ECB=VTOCECB             WAIT UNTIL COMPLETE\n         NI    MODESW,X'FF'-XCPRUN     TURN RUNNING SWITCH OFF\nNOEXCP   DS    0H\n         SPACE\n* CLOSE THE DCB.\n         SPACE\n         TM    DCBOFLGS,OPENBIT        TEST IF DCB OPEN\n         BZ    NOCLOSE                 BRANCH IF NOT\n         CLOSE XVTCDCB\nNOCLOSE  DS    0H\n         SPACE\n* RELEASE CORE OBTAINED FOR DSCB BUFFERS.\n         SPACE\n         TM    MODESW,CBGOT            TEST IF CORE GOTTEN\n         BZ    NOFREE                  BRANCH IF NOT\n         LM    R0,R1,CBSIZE            LOAD SIZE AND LOCATION\n         FREEMAIN  R,LV=(0),A=(1)      FREE CORE\n         NI    MODESW,X'FF'-CBGOT      SET CORE GOTTEN BIT OFF\nNOFREE   DS    0H\n         SPACE\n         NI    MODESW,X'FF'-RDERR      CLEAR ERROR SWITCH\n         BR    RRET\n         EJECT\n****************\n* EXCP ROUTINE *\n****************\n         SPACE\n* CONVERT RELATIVE TRACK ADDRESS IN 'TTRN' TO ABSOLUTE SEEK ADDRESS IN\n* 'IOBSEEK', USING SUPERVISOR CONVERSION ROUTINE.\n         SPACE\nEXCP     DS    0H\n         STM   R2,R13,EXCPSAVE         SAVE IMPORTANT REGISTERS\n         L     R0,TTRN                 LOAD RELATIVE TRACK NUMBER\n         L     R1,DCBDEBAD             LOAD DEB ADDRESS\n         LA    R2,IOBSEEK              LOAD ADDR TO RECEIVE MBBCCHHR\n         L     R15,CVT                 LOAD CVT ADDRESS\n         L     R15,CVTPCNVT(,R15)      LOAD ADDR OF CONVERT ROUTINE\n         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR\n         DROP  RBASE                   THAT CLOBBERED BASE REG\n         USING *,R14                   R14 SET BY BALR ABOVE\n         LM    R2,R13,EXCPSAVE         RESTORE REGISTERS\n         DROP  R14\n         USING IMVTOCRD,RBASE          BASE REGISTER RECOVERED\n         LTR   R15,R15                 TEST IF EXTENT VIOLATED (RC=4)\n         BNZ   SETEOF                  IF SO, MEANS END-OF-FILE\n         SPACE\n* ZERO ECB AND START CHANNEL PROGRAM.\n         SPACE\n         SR    R0,R0\n         ST    R0,VTOCECB              CLEAR ECB\n         NI    MODESW,X'FF'-RDERR      RESET ERROR SWITCH\n         EXCP  VTOCIOB                 START CHANNEL PROGRAM\n         OI    MODESW,XCPRUN           SET 'RUNNING' FLAG\n         BR    RRET\n         SPACE\n* WHEN EXTENT IS VIOLATED, SET END-FILE AND EXIT VIA CLOSE ROUTINE.\n         SPACE\nSETEOF   OI    MODESW,EOFSW            SET END-OF-FILE BIT\n         B     CLOSESUB                EXIT VIA CLOSE SUBROUTINE\n         EJECT\n********************************\n* CONSTANTS, VARIABLES, ETC... *\n********************************\n         SPACE\nINITCCW  CCW   READR0,0,CC+SLI+SKIP,8\nREADCCW  CCW   READCKD,0,CC,148\n         SPACE\nDVICETAB DC    X'00'           TABLE OF NUMBER OF DSCB'S/TRACK\n         DC    X'00'              2311   (NOT SUPPORTED IN MVS/XA)\n         DC    X'00'              2301   (NOT SUPPORTED IN MVS/XA)\n         DC    X'00'              2303   (NOT SUPPORTED IN MVS/XA)\n*        DC    X'00'              2302   (NOT SUPPORTED IN MVS/XA)\n         DC    X'45'              9345\n         DC    X'00'              2321   (NOT SUPPORTED IN MVS/XA)\n         DC    X'00'              2305-1 (NOT SUPPORTED IN MVS/XA)\n         DC    AL1(34)            2305-2\n         DC    X'00'              2314   (NOT SUPPORTED IN MVS/XA)\n         DC    AL1(39)            3330\n         DC    AL1(27)            3340 MODEL 35 AND MODEL 70\n         DC    AL1(47)            3350\n         DC    AL1(51)            3375\n         DC    AL1(39)            3330 MODEL 11\n         DC    AL1(53)            3380 AND 3380-E AND 3380-K\n         DC    AL1(50)            3390\nMAXDVT   EQU   *-DVICETAB\n         SPACE\nDWORK    DS    D               WORK CELL\nSAVEAREA DS    19F             SAVE AREA\nEXCPSAVE EQU   SAVEAREA+12\nCBSIZE   DS    2F              SIZE AND LOCATION OF GOTTEN CORE\nCBADDR   EQU   CBSIZE+4\nNDSCBS   DS    F               NUMBER OF DSCB'S PER TRACK\nDSCBSTRT DS    F               ADDRESS OF 1ST DSCB BUFFER\nDSCBLIM  DS    F               ADDRESS OF LAST DSCB BUFFER\nDSCBADR  DS    F               ADDRESS OF CURRENT DSCB\nTTRN     DS    F               RELATIVE TRACK NUMBER\n         SPACE\n* MODE SWITCH AND BIT DEFINITIONS:\n         SPACE\nMODESW   DC    X'00'\nCBGOT    EQU   X'80'           CORE GOTTEN FOR BUFFER\nXCPRUN   EQU   X'40'           CHANNEL PROGRAM STARTED BUT NOT CHECKED\nRDERR    EQU   X'20'           PERMANENT I/O ERROR\nEOFSW    EQU   X'10'           END-OF-FILE SENSED\n         SPACE\n         LTORG\n         EJECT\n* DATA CONTROL BLOCK\n         SPACE\nXVTCDCB  DCB   DDNAME=VOLUME01,MACRF=(E),EXLST=JFCBADDR\n         SPACE\nDCBDDNAM EQU   XVTCDCB+40\nDCBIFLGS EQU   XVTCDCB+44\nDCBDEBAD EQU   XVTCDCB+44\nDCBOFLGS EQU   XVTCDCB+48\nOPENBIT  EQU   X'10'\n         EJECT\n* IOB FOR CHANNEL PROGRAM:\n         SPACE\nVTOCIOB  DS    0D\nIOBFLAG1 DC    X'42000000'     COMMAND CHAIN, NOT RELATED\n         DC    A(VTOCECB)\n         DC    2F'0'\nIOBSTART DC    A(0)            CHANNEL PROGRAM BEGINNING\n         DC    A(XVTCDCB)\n         DC    X'03000000'\n         DC    F'0'\nIOBSEEK  DC    D'0'            INITIAL SEEK ADDRESS\n         SPACE\n* EVENT CONTROL BLOCK FOR CHANNEL PROGRAM:\n         SPACE\nVTOCECB  DC    F'0'            EVENT CONTROL BLOCK\n         SPACE 3\n* BUFFER FOR JFCB AND DCB EXIT LIST:\n         SPACE\nJFCBADDR DS    0F\n         DC    X'87'\n         DC    AL3(JFCB)\n         SPACE\nJFCB     DS    0D\n         DS    CL176\n         SPACE\nJFCBDSNM EQU   JFCB            DATA SET NAME\nJFCBVOLS EQU   JFCB+118        VOLUME SERIAL NUMBER\n         SPACE 6\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMXACUST": {"ttr": 25347, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x91)\\x1f\\x00\\x98\\x03\\x0f\\x15G\\x00c\\x00K\\x00\\x00\\xc9`\\xd4\\xd6\\xd5@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1991-10-18T00:00:00", "modifydate": "1998-01-30T15:47:00", "lines": 99, "newlines": 75, "modlines": 0, "user": "I-MON"}, "text": "//TSOUSERU JOB (0000),TSOUSER,MSGCLASS=X,CLASS=A,NOTIFY=TSOUSER\n//*\n//*\n//*  THIS JOB CUSTOMIZES THE IM (MVS VERSION) LOAD MODULE.\n//*\n//*\n//*  AUTHORIZATION BYTE BIT SETTINGS HAVE THE FOLLOWING MEANINGS:\n//*\n//*  X'80' - WHEN ON THEN TSO OPER IS NOT REQUIRED FOR ACCESS\n//*  X'40' - WHEN ON THEN TSO ACCT IS NOT REQUIRED FOR ACCESS\n//*  X'20' - WHEN ON THEN TSO JCL IS NOT REQUIRED FOR ACCESS\n//*  X'10' - WHEN ON THEN TSO MOUNT IS NOT REQUIRED FOR ACCESS\n//*  X'08' - WHEN OFF THEN ACCESS IS DENIED TO ALL USERS\n//*  X'04' - NO MEANING AND SHOULD BE LEFT ZERO\n//*  X'02' - NO MEANING AND SHOULD BE LEFT ZERO\n//*  X'01' - NO MEANING AND SHOULD BE LEFT ZERO\n//*\n//*\n//*  EXAMPLES:\n//*\n//*  X'F8' - ALL USERS (WHO HAVE ACCESS TO IM) ARE AUTHORIZED\n//*  X'F0' - NO USERS ARE AUTHORIZED\n//*  X'00' - NO USERS ARE AUTHORIZED\n//*  X'78  - TSO OPER IS REQUIRED FOR AUTHORIZATION\n//*  X'38  - TSO OPER AND TSO ACCT ARE REQUIRED FOR AUTHORIZATION\n//*  X'58  - TSO OPER AND TSO JCL ARE REQUIRED FOR AUTHORIZATION\n//*\n//*  NOTE THAT INACCESSIBLE OPTIONS ARE NOT LISTED ON THE MAIN MENU.\n//*\n//*  ONCE IN AN OPTION, ENTERING TWO PERIODS ('..') WITH PF1 OR PF13\n//*  WILL CAUSE THE OPTION FLAG BYTE TO BE DISPLAYED ON THE TOP LINE.\n//*  THE FIRST FIVE BITS OF THE FLAG BYTE ARE COPIED FROM THE\n//*  CUSTOMIZABLE AUTHORIZATION BYTE FOR THAT OPTION.\n//*\n//STEP1   EXEC PGM=AMASPZAP\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=PRODUCT.LIBRARY,DISP=SHR     <====\n//SYSIN    DD  *\nNAME IM IMPXA\nVER 50  F0F0F0F0F0F0F0F0\n*\nREP 82  F8           OPTION \"VB\" FETCH-PROTECTED BROWSE AUTHORITY\n*   NOTE: OPTION \"V\" MUST BE ACCESSED TO USE THIS FUNCTION\n*\nREP 91  78           OPTION \"VB\" CNCL/NCAN/NSWP/SWAP AUTHORITY\n*   NOTE: THE +91 BYTE IS OR'D WITH THE BYTE AT +A5 BEFORE TESTING\n*\nREP 93  38           OPTION \"L\" APF LIBRARY LIST ALTERATION AUTHORITY\n*   NOTE: IF THE USER HAS ACCESS TO OPTION \"V\" THEN\n*         THE +93 BYTE IS OR'D WITH THE BYTE AT +A5 BEFORE TESTING\n*\nREP 94  78           OPTION \"VB\" MOUNT/NOMOUNT AUTHORITY\n*   NOTE: THE +94 BYTE IS OR'D WITH THE BYTE AT +A5 BEFORE TESTING\n*   NOTE: OPTION \"V\" MUST BE ACCESSED TO USE THIS FUNCTION\n*\nREP 99  18           OPTION \"R\" RUN-DISABLED AUTHORITY\n*\nREP A2  18           OPTION \"JS\" TSO SESSION SPY FACILITY AUTHORITY\n*                     & \"JO\" QSAM/BSAM/BPAM BUFFER BROWSE AUTHORITY\n*                       WHEN TARGET ACID IS NOT USER'S TSO ID\n*   NOTE: OPTION \"J\" MUST BE ACCESSED TO USE THIS FUNCTION\n*\nREP A5  38           OPTION \"VB\" STORAGE ALTERATION AUTHORITY\n*   NOTE: OPTION \"V\" MUST BE ACCESSED TO USE THIS FUNCTION\n*\nREP 5B  F8           OPTION \"$\" ACCESS AUTHORITY\nREP C1  F8           OPTION \"A\" ACCESS AUTHORITY\nREP C2  F8           OPTION \"B\" ACCESS AUTHORITY\nREP C3  F8           OPTION \"C\" ACCESS AUTHORITY\nREP C4  F8           OPTION \"D\" ACCESS AUTHORITY\nREP C5  F8           OPTION \"E\" ACCESS AUTHORITY\nREP C6  F8           OPTION \"F\" ACCESS AUTHORITY\nREP C7  F8           OPTION \"G\" ACCESS AUTHORITY\nREP D1  F8           OPTION \"J\" ACCESS AUTHORITY\nREP D3  F8           OPTION \"L\" ACCESS AUTHORITY\nREP D4  F8           OPTION \"M\" ACCESS AUTHORITY\nREP D5  F8           OPTION \"N\" ACCESS AUTHORITY\nREP D6  F8           OPTION \"O\" ACCESS AUTHORITY\nREP D7  F8           OPTION \"P\" ACCESS AUTHORITY\nREP D8  F8           OPTION \"Q\" ACCESS AUTHORITY (SAME AS OPTION \"E\")\nREP D9  F8           OPTION \"R\" ACCESS AUTHORITY\nREP E2  F8           OPTION \"S\" ACCESS AUTHORITY\nREP E3  F8           OPTION \"T\" ACCESS AUTHORITY\nREP E4  F8           OPTION \"U\" ACCESS AUTHORITY\nREP E5  F8           OPTION \"V\" ACCESS AUTHORITY\n*\nVER F1  F1F2F3F4F5F6F7       COLORS TO USE FOR COLORS 1 TO 7\n/*\n//*\n//*\n//*\n//*  IF AN INSTALLATION HAS AN ENQUEUE MAJOR NAME WITH MANY ENTRIES\n//*  SUCH THAT IT SHOULD BE \"SUPPRESSED-BY-DEFAULT\" UNDER OPTION \"E\",\n//*  THEN THE 8-BYTE CHARACTER STRING '***QNNAME' CAN BE ZAPPED TO\n//*  THIS ENQUEUE MAJOR NAME TO ACHIEVE THIS RESULT.  USE ASTERISK (*)\n//*  FOR GENERIC PLACEHOLDER CHARACTERS IN THE MAJOR NAME MASK.\n//*\n//*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMXCDATA": {"ttr": 25350, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x982\\x7f\\x00\\x982\\x9f\\x18I\\x00l\\x00l\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-11-23T00:00:00", "modifydate": "1998-11-25T18:49:00", "lines": 108, "newlines": 108, "modlines": 0, "user": "T$QGP75"}, "text": "*  (c) 1998 - B. Break    TXD - Transported XCF sysplex Details\nINFTXD1  DSECT                  System acivity information table\nTXD1SIZE DS    F                System information table size\nTXD1SYS# DS    F                # of system records\nTXD1SYSL DS    F                System record length\nTXD1SYSA EQU   *                System records area\n\nTXD1SYS  DSECT                  System record\nTXD1SYSN DS    CL8              System name\nTXD1FLG1 DS    XL1              System status\nSYSRESV  EQU   X'80'            Reserved\nSYSACTV  EQU   X'40'            System active\nSYSSUM   EQU   X'20'            Status update missing\nSYSSYPT  EQU   X'10'            In sysplex partitioning\nSYSLOCL  EQU   X'08'            Single system, no couple d.s./sysplex\nSYSCLUP  EQU   X'04'            System completed sysplex partitioning,\n*                               but still in cleanup process\nTXD1FLG2 DS    XL1              System direction flag\nSYIN     EQU   X'80'            Inbound direction\nSYOUT    EQU   X'40'            Outbound direction\nSYLCL    EQU   X'20'            Local\n         DS    XL2              Reserved\nTXD1TCLS DS    CL8              Transport class\nTXD1#PTH DS    F                Current # paths in service\nTXD1#NOP DS    F                Total # of no path occurrences\nTXD1#BSY DS    F                Total # of no buffer occurrences\nTXD1#MXB DS    F                Maximum # of 1k blocks of buffer space\n*                               permitted for the system\nTXD1#USE DS    F                Total # 1k blocks of buffer space\n*                               currently in use on the system\nTXD1#BIG DS    F                # of messages sent whose length\n*                               exceeded transport class buffer size\nTXD1#FIT DS    F                # of messages sent whose length\n*                               fit transport class buffer size\nTXD1#SML DS    F                # of messages sent whose length\n*                               was < transport class buffer size\nTXD1#OVR DS    F                # of messages sent whose length\n*                               was > signal service optimum buffer\nTXD1#TCL DS    F                Length of longest message that fits\n*                               transport class buffer size\nTXD1#SMX DS    F                Default # 1k blocks message buffer size\nTXD1SYSS EQU   *-TXD1SYS        System record size\n\nINFTXD2  DSECT                  Path activity information table\nTXD2SIZE DS    F                Total table length\nTXD2PTH# DS    F                # of path records\nTXD2PTHL DS    F                Path record length\nTXD2PTHA EQU   *                Path records area\n\nTXD2PTH  DSECT                  Path record\nTXD2PDEV DS    CL4              Signalling path CTC device number\nTXD2PSYS DS    CL8              Path system name\nTXD2FLG1 DS    XL1              Path status flag #1\nPTHSTRT  EQU   X'80'            Path starting\nPTHREST  EQU   X'40'            Path restarting\nPTHWORK  EQU   X'20'            Path working (active)\nPTHSTOP  EQU   X'10'            Path stopping\nPTHLINK  EQU   X'08'            Path waiting to establish comm. link\nPTHNOP   EQU   X'04'            Path not operational\nPTHFAIL  EQU   X'02'            Path stop failed\nPTHRBLD  EQU   X'01'            Path rebuilding\nTXD2FLG2 DS    XL1              Path status flag #2\nPTHQSCG  EQU   X'80'            Path quiescing\nPTHQSCD  EQU   X'40'            Path quiesced\nTXD2FLG3 DS    XL1              Path direction flag\nPTHIN    EQU   X'80'            Inbound direction\nPTHOUT   EQU   X'40'            Outbound direction\n         DS    XL1              Reserved\nTXD2TCLS DS    CL8              Transport class\nTXD2TDEV DS    CL4              Target device number on other end\nTXD2TSYS DS    CL8              Target system name on other end\nTXD2MRET DS    F                Maximum path retry limit\nTXD2#RET DS    F                Current path retry count\nTXD2#RST DS    F                Cumulative number of restarts\nTXD2#SIG DS    F                Total # signals sent/received\nTXD2#ACT DS    F                Total # signals pending transfer\nTXD2#SUS DS    F                Total # signal requests while not busy\nTXD2#APP DS    F                Total # signal requests while busy\nTXD2MXMS DS    F                Path maximum message limit\nTXD2#USE DS    F                Total # 1k blocks of buffer space\n*                               currently in use by signalling path\nTXD2#IBR DS    F                Total # refused msg. buffer requests\n*                               due to path max. message limit\nTXD2PTHS EQU   *-TXD2PTH        Path record size\n\nINFTXD3  DSECT                  Group activity information table\nTXD3SIZE DS    F                Total table length\nTXD3GRP# DS    F                # of group records\nTXD3GRPL DS    F                Group record length\nTXD3GRPA EQU   *                Group records area\n\nTXD3GRP  DSECT                  Group record\nTXD3GRPN DS    CL8              Group name\nTXD3MEMN DS    CL16             Member name\nTXD3FLG1 DS    XL1              Member status\nMEMSCRE  EQU   2                Member state = \"created\"\nMEMSACT  EQU   3                Member state = \"active\"\nMEMSQUI  EQU   4                Member state = \"quiesced\"\nMEMSFLD  EQU   5                Member state = \"failed\"\n         DS    XL1              Reserved\nTXD3SYSN DS    CL8              System name on which member resides\nTXD3SSLT DS    XL1              System slot number\n         DS    XL1              Reserved\nTXD3JJOB DS    CL8              Current jobname at IXCJOIN time\nTXD3TOD  DS    XL8              Time stamp of last member status change\nTXD3SCNT DS    F                Total # signals sent by member\nTXD3RCNT DS    F                Total # signals received by member\nTXD3GRPS EQU   *-TXD3GRP        Group record size\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMXCF": {"ttr": 25353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98)_\\x00\\x982\\x7f\\x16\\x12\\x02i\\x02\\xd3\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-10-22T00:00:00", "modifydate": "1998-11-23T16:12:00", "lines": 617, "newlines": 723, "modlines": 0, "user": "T$QGP75"}, "text": "IMXCF CSECT\nIMXCF AMODE 31\nIMXCF RMODE ANY\n\n*********************************************************************\n*                                                                   *\n*        Function: This module invokes XCF services to obtain       *\n*                  various XCF system related information.          *\n*                                                                   *\n*        Entry point : IMXCF                                        *\n*                                                                   *\n*        Input registers:                                           *\n*          R0: N/A                                                  *\n*          R1: Address of caller's parameter list pointer           *\n*          R2-12: N/A                                               *\n*          R13: Address of register save area                       *\n*          R14: Return address                                      *\n*          R15: Entry point address                                 *\n*                                                                   *\n*        Output registers:                                          *\n*          R0-14: Same as on entry                                  *\n*          R15: Return code                                         *\n*               0 - IMXCF completed successfully                    *\n*              12 - IMXCF parameter list error                      *\n*              16 - IMXCF internal error                            *\n*                                                                   *\n*        Register usage(internal):                                  *\n*          R0-11: Work registers                                    *\n*          R12: Base register                                       *\n*          R13: Address of workarea                                 *\n*          R14-15: Work and linkage registers                       *\n*                                                                   *\n*                                                                   *\n*        Upon invocation of this routine, the caller must pass      *\n*        the following parameter list:                              *\n*                                                                   *\n*        PARMLIST DS   0CL8                                         *\n*        PARM1    DS   CL4  (function request indicator)            *\n*        PARM2    DS   A    (return information table address)      *\n*                                                                   *\n*        PARM1 is an input parameter and specifies the function     *\n*        request type.  PARM1 can have any of the following values: *\n*        \"SA\" - Return XCF system activity information.             *\n*        \"PA\" - Return XCF path activity information.               *\n*        \"GA\" - Return XCF group activity information.              *\n*        The function request indicator must be left-justified and  *\n*        blank padded on the right.                                 *\n*                                                                   *\n*        PARM2 is an output parameter and contains the address of   *\n*        the return information table that this routine acquires.   *\n*        Storage for the table is acquired in E(PVT), subpool 130,  *\n*        and the caller's psw key.  It is the caller's              *\n*        responsibility to free storage for the table when finished *\n*        with its use.  The format of the information table is      *\n*        as follows:                                                *\n*                                                                   *\n*        INFTXD1  DS    0D   Format 1 - XCF system activity         *\n*        TXD1SIZE DS    F    Total table size                       *\n*        TXD1SYS# DS    F    # of system records                    *\n*        TXD1SYSL DS    F    System record length                   *\n*        TXD1SYSA EQU   *    System records area                    *\n*                                                                   *\n*        INFTXD2  DS    0D   Format 2 - XCF path activity           *\n*        TXD2SIZE DS    F    Total table length                     *\n*        TXD2PTH# DS    F    # of path records                      *\n*        TXD2PTHL DS    F    Path record length                     *\n*        TXD2PTHA EQU   *    Path records area                      *\n*                                                                   *\n*        INFTXD3  DS    0D   Format 3 - XCF group activity          *\n*        TXD3SIZE DS    F    Total table length                     *\n*        TXD3GRP# DS    F    # of group records                     *\n*        TXD3GRPL DS    F    Group record length                    *\n*        TXD3GRPA EQU   *    Group records area                     *\n*                                                                   *\n*        Note that PARM1 and PARM2 must both be provided.           *\n*                                                                   *\n*        Environment: Amode 31, rmode any, supervisor state,        *\n*                     psw key 0.                                    *\n*                                                                   *\n*                                                                   *\n*        Author: Bob Break                                          *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\n***********************************************************************\n*                                                                     *\n*        Initialization.                                              *\n*                                                                     *\n***********************************************************************\n\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n\n         USING PSA,0\nIMXCF000 BAKR  R14,0                    Save caller's environment\n         LR    R12,R15                  Set base register\n         USING IMXCF000,R12               and addressability\n         B     IMXCF001                 Branch around module identifier\n         DC    CL8'IMXCF'               Module name\n         DC    C'&SYSDATE'              Assembly date\n         DC    C'VERS01'                Version\nIMXCF001 DS    0H\n         MODESET MODE=SUP               Set supervisor state\n         IPK   0(0)                     Get caller's psw key\n         SPKA  0(0)                     Set psw key 0\n         LA    R0,WORKSIZE              Get workarea size\n         STORAGE OBTAIN,LENGTH=(R0),LOC=ANY\n         LR    R3,R1                    Save workarea pointer\n         LR    R14,R3                   Get pointer into work register\n         LA    R15,WORKSIZE             Set move to length\n         XR    R1,R1                    Set move from length and pad\n         MVCL  R14,R0                   Clear workarea\n         ST    R3,8(,R13)               Chain save areas\n         ST    R13,4(,R3)               *\n         LR    R13,R3                   Set workarea pointer\n         USING WORKAREA,R13\n         EREG  R0,R1                    Restore entry registers 0-1\n         L     R1,0(,R1)                Point to input parm list\n         ST    R1,PARMPTR               Save parm list pointer\n         STC   R2,CALLKEY               Save caller's psw key\n\n***********************************************************************\n*                                                                     *\n*        Extract the input parameters.                                *\n*                                                                     *\n***********************************************************************\n\nIMXCF010 OC    0(4,R1),=CL4' '           Assure function is upper case\n         CLC   0(2,R1),=C'SA'            System activity request?\n         BNE   IMXCF011                  No - branch, check \"PA\"\n         L     R15,=A(IMXCF100)          Get system routine pointer\n         BALR  R14,R15                   Branch - process system req.\n         B     IMXCFRET                  Branch - return\nIMXCF011 CLC   0(2,R1),=C'PA'            Path activity request?\n         BNE   IMXCF012                  No - branch, check \"GA\"\n         L     R15,=A(IMXCF200)          Get path routine pointer\n         BALR  R14,R15                   Branch - process path req.\n         B     IMXCFRET                  Branch - return\nIMXCF012 CLC   0(2,R1),=C'GA'            Group activity request?\n         BNE   IMXCF013                  No - branch, parm list error\n         L     R15,=A(IMXCF300)          Get group routine pointer\n         BALR  R14,R15                   Branch - process group req.\n         B     IMXCFRET                  Branch - return\nIMXCF013 MVC   RETCODE,=F'12'            Set error return code\n         B     IMXCFRET                  Branch - return\n\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n\nIMXCFRET L     R2,RETCODE                Get return code\n         LA    R0,WORKSIZE               Get workarea size\n         LR    R1,R13                    Get workarea pointer\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)\n         LR    R15,R2                    Set return code\n         PR                              Return to caller\n\n         LTORG\n\n\n*********************************************************************\n*********************************************************************\n*                                                                   *\n*        IMXCF100 - Invoke XCF services to obtain system activity   *\n*                   information.                                    *\n*                                                                   *\n*        Register usage:                                            *\n*                                                                   *\n*        Input           Output           Internal                  *\n*        -----           ------           --------                  *\n* R0-11  N/A             Unchanged        Work                      *\n* R12    N/A             Unchanged        Base register             *\n* R13    Workarea        Unchanged        Workarea                  *\n* R14    BALR address    Return address   Work                      *\n* R15    N/A             Unchanged        Work                      *\n*                                                                   *\n*        Environment - Internal IMXCF routine.  Invoked by BALR.    *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\nIMXCF100 DS    0H\n         BAKR  R14,0                Save caller's environment\n         LR    R12,R15              Set up base register\n         USING IMXCF100,R12           and addressability\n         L     R0,=A(QUAHLENG+(32*QUASLENG))  Get answer area length\n         ST    R0,ANSWERL1          Save answer area length\n         STORAGE OBTAIN,LENGTH=(R0),LOC=ANY\n         LR    R2,R1                Set answer area addr for IXCQUERY\n         ST    R1,ANSWERA1          Save answer area address\n         LR    R14,R1               Get area ptr into work reg\n         L     R15,=A(QUAHLENG+(32*QUASLENG))  Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear IXCQUERY answer area\n         MVC   IXCQWRK(IXCQLL1),IXCQLST1  Set IXCQUERY parm list\n         IXCQUERY REQINFO=SYSPLEX,  Request system information         X\n               ANSAREA=(R2),        Answer area address                X\n               ANSLEN=ANSWERL1,     Answer area length                 X\n               MF=(E,IXCQWRK)\n         L     R1,=F'4096'          Get data area length\nIMXCF101 ST    R1,DATAL1            Set data area length\n         STORAGE OBTAIN,LENGTH=(R1),BNDRY=PAGE,SP=253,LOC=ANY\n         ST    R1,DATAA1            Save data area address\n         LR    R2,R1                Set area pointer in work register\n         USING AMDAREA,R2\n         MVC   IXCMGWRK(IXCMGLL1),IXCMGLS1  Set IXCMG parm list\n         IXCMG DATAAREA=(R2),       Data area                          X\n               DATALEN=DATAL1,      Data area length                   X\n               TYPE=SYSTEM,         Request system activity data       X\n               MF=(E,IXCMGWRK)\n         LTR   R15,R15              IXCMG successful?\n         BZ    IMXCF110             Yes - branch, continue\n         C     R15,=F'4'            IXCMG rc=4?\n         BNE   IMXCF109             No - branch, internal error\n         CLC   AMDATLEN,DATAL1      Data area large enough?\n         BNH   IMXCF109             Yes - branch, internal error\n         L     R3,AMDATLEN          Get required data area length\n         L     R0,DATAL1            Get data area length\n         L     R1,DATAA1            Get data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         LR    R1,R3                Reset required data area length\n         B     IMXCF101             Loop back to issue IXCMG again\nIMXCF109 MVC   RETCODE,=F'16'       Set error return code\n         B     IMXCF190             Branch - return\nIMXCF110 LA    R1,TXD1SYSS          Get system record size\n         ICM   R15,15,AMDA#SYS      Get number of system records\n         XR    R14,R14              Calculate systems area length\n         MR    R14,R1               *\n         LA    R0,(TXD1SYSA-INFTXD1)  Get fixed INFTXD1 length\n         ALR   R0,R15               Calculate total INFTXD1 length\n         LR    R3,R0                Save INFTXD1 length\n         IC    R5,CALLKEY           Get caller's psw key\n         STORAGE OBTAIN,LENGTH=(R0),SP=130,KEY=(R5),LOC=ANY\n         ST    R1,INFTABP           Save table pointer\n         LR    R11,R1               Set table pointer\n         LR    R14,R1               Get pointer into work register\n         LR    R15,R3               Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear table\n         USING INFTXD1,R11\n         ST    R3,TXD1SIZE          Set INFTXD1 size in table\n         L     R1,PARMPTR           Get input parameter list pointer\n         ST    R11,4(,R1)           Set table address for caller\n         MVC   TXD1SYS#,AMDA#SYS    Set # system records\n         LA    R1,TXD1SYSS          Get system record size\n         ST    R1,TXD1SYSL          Get system record length\n         ICM   R3,15,AMDAOSYS       Get first system entry offset\n         ALR   R3,R2                Point to first system entry\n         USING AMDSYS,R3\n         ICM   R0,15,AMDA#SYS       Get # of system entries\n         BZ    IMXCF190             Branch - no system entries\n         LA    R10,TXD1SYSA         Point to system records area\n         USING TXD1SYS,R10\nIMXCF111 MVC   TXD1SYSN,AMDSYNME    Set system name\n         L     R15,ANSWERA1         Get IXCYQUAA address\n         USING QUAHDR,R15\n         ICM   R14,15,QUAH#REC      Get # system records\n         BZ    IMXCF114             Branch - no system records\n         L     R1,QUAHSGOF          Get first system record offset\n         DROP  R15                  QUAHDR\n         ALR   R15,R1               Point to first system record\n         USING QUASYS,R15\nIMXCF112 CLC   QUASNAME,AMDSYNME    System name match?\n         BNE   IMXCF113             No - branch, check next record\n         MVC   TXD1FLG1,QUASSTAT    Set system status flag byte\n         B     IMXCF114             Branch - continue\nIMXCF113 LH    R1,QUASLEN           Get system record length\n         ALR   R15,R1               Point to next system record\n         BCT   R14,IMXCF112         Loop back to check next system\n         DROP  R15                  QUASYS\nIMXCF114 MVC   TXD1FLG2,AMDSYDIR    Set direction flag byte\n         MVC   TXD1TCLS,AMDSYTCN    Set transport class name\n         MVC   TXD1#PTH,AMDSYPTH    Set number of classes in service\n         MVC   TXD1#NOP,AMDSYNOP    Set number of no path occurences\n         MVC   TXD1#BSY,AMDSYBSY    Set number of no buffer occurences\n         MVC   TXD1#MXB,AMDSYMXB    Set max. 1k blocks buffer space\n         MVC   TXD1#USE,AMDSYUSE    Set 1k blocks buffer space in use\n         MVC   TXD1#BIG,AMDSYBIG    Set # msgs length > buffer size\n         MVC   TXD1#FIT,AMDSYFIT    Set # msgs length fit buffer size\n         MVC   TXD1#SML,AMDSYSML    Set # msgs length < buffer size\n         MVC   TXD1#OVR,AMDSYOVR    Set # msgs length > buffer size for\n*                                   optimized signalling service\n         MVC   TXD1#TCL,AMDSYTCL    Set longest msg. length that fits\n*                                   transport class buffer size\n         MVC   TXD1#SMX,AMDSYSMX    Set default 1k blocks buffer size\n         LH    R1,AMDSYLEN          Get system entry length\n         ALR   R3,R1                Point to next system entry\n         LA    R10,TXD1SYSS(,R10)   Bump to next table system record\n         BCT   R0,IMXCF111          Loop back for next system entry\nIMXCF190 L     R0,ANSWERL1          Get IXCQUERY answer area length\n         L     R1,ANSWERA1          Get IXCQUERY answer area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0)\n         L     R0,DATAL1            Get IXCMG data area length\n         L     R1,DATAA1            Get IXCMG data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         DROP  R2,R3                AMDAREA, AMDSYS\n         DROP  R10,R11              TXD1SYS, INFTXD1\n\nIMXCF199 PR                         Restore environment & return\n\n         DROP  R12                  IMXCF100 base\n\n         LTORG\n\n         IXCQUERY MF=(L,IXCQLST1)   IXCQUERY parm list\nIXCQLL1  EQU   *-IXCQLST1\n\n         IXCMG MF=(L,IXCMGLS1)      IXCMG parm list\nIXCMGLL1 EQU   *-IXCMGLS1\n\n\n*********************************************************************\n*********************************************************************\n*                                                                   *\n*        IMXCF200 - Invoke XCF services to obtain path activity     *\n*                   information.                                    *\n*                                                                   *\n*        Register usage:                                            *\n*                                                                   *\n*        Input           Output           Internal                  *\n*        -----           ------           --------                  *\n* R0-11  N/A             Unchanged        Work                      *\n* R12    N/A             Unchanged        Base register             *\n* R13    Workarea        Unchanged        Workarea                  *\n* R14    BALR address    Return address   Work                      *\n* R15    N/A             Unchanged        Work                      *\n*                                                                   *\n*        Environment - Internal IMXCF routine.  Invoked by BALR.    *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\nIMXCF200 DS    0H\n         BAKR  R14,0                Save caller's environment\n         LR    R12,R15              Set up base register\n         USING IMXCF200,R12           and addressability\n         L     R1,=F'4096'          Get data area length\nIMXCF201 ST    R1,DATAL1            Set data area length\n         STORAGE OBTAIN,LENGTH=(R1),BNDRY=PAGE,SP=253,LOC=ANY\n         ST    R1,DATAA1            Save data area address\n         LR    R2,R1                Set area pointer in work register\n         USING AMDAREA,R2\n         MVC   IXCMGWRK(IXCMGLL2),IXCMGLS2  Set IXCMG parm list\n         IXCMG DATAAREA=(R2),       Data area                          X\n               DATALEN=DATAL1,      Data area length                   X\n               TYPE=PATH,           Request path activity data         X\n               MF=(E,IXCMGWRK)\n         LTR   R15,R15              IXCMG successful?\n         BZ    IMXCF210             Yes - branch, continue\n         C     R15,=F'4'            IXCMG rc=4?\n         BNE   IMXCF209             No - branch, internal error\n         CLC   AMDATLEN,DATAL1      Data area large enough?\n         BNH   IMXCF209             Yes - branch, internal error\n         L     R3,AMDATLEN          Get required data area length\n         L     R0,DATAL1            Get data area length\n         L     R1,DATAA1            Get data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         LR    R1,R3                Reset required data area length\n         B     IMXCF201             Loop back to issue IXCMG again\nIMXCF209 MVC   RETCODE,=F'16'       Set error return code\n         B     IMXCF290             Branch - return\nIMXCF210 LA    R1,TXD2PTHS          Get path record size\n         ICM   R15,15,AMDA#PTH      Get number of path records\n         XR    R14,R14              Calculate paths area length\n         MR    R14,R1               *\n         LA    R0,(TXD2PTHA-INFTXD2)  Get fixed INFTXD2 length\n         ALR   R0,R15               Calculate total INFTXD2 length\n         LR    R3,R0                Save INFTXD2 length\n         IC    R5,CALLKEY           Get caller's psw key\n         STORAGE OBTAIN,LENGTH=(R0),SP=130,KEY=(R5),LOC=ANY\n         ST    R1,INFTABP           Save table pointer\n         LR    R11,R1               Set table pointer\n         LR    R14,R1               Get pointer into work register\n         LR    R15,R3               Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear table\n         USING INFTXD2,R11\n         ST    R3,TXD2SIZE          Set INFTXD2 size in table\n         L     R1,PARMPTR           Get input parameter list pointer\n         ST    R11,4(,R1)           Set table address for caller\n         MVC   TXD2PTH#,AMDA#PTH    Set # path records\n         LA    R1,TXD2PTHS          Get path record size\n         ST    R1,TXD2PTHL          Get path record length\n         ICM   R3,15,AMDAOPTH       Get first path entry offset\n         ALR   R3,R2                Point to first path entry\n         USING AMDPATH,R3\n         ICM   R0,15,AMDA#PTH       Get # of path entries\n         BZ    IMXCF290             Branch - no path entries\n         LA    R10,TXD2PTHA         Point to path records area\n         USING TXD2PTH,R10\nIMXCF211 MVC   TXD2PDEV,AMDPDEV     Set CTC device number\n         MVC   TXD2PSYS,AMDPNAME    Set system name\n         MVC   TXD2FLG1,AMDPSTAT    Set path status flag #1\n         MVC   TXD2FLG2,AMDPSTA2    Set path status flag #2\n         MVC   TXD2FLG3,AMDPDIR     Set path direction flag\n         MVC   TXD2TCLS,AMDPTCN     Set transport class\n         MVC   TXD2TDEV,AMDPODEV    Set target device number\n         MVC   TXD2TSYS,AMDPONME    Set target system name\n         MVC   TXD2MRET,AMDPMRET    Set maximum path retry limit\n         MVC   TXD2#RET,AMDP#RET    Set path retry count\n         MVC   TXD2#RST,AMDP#RST    Set cumulative restart count\n         MVC   TXD2#SIG,AMDP#SIG    Set total # signals sent/received\n         MVC   TXD2#ACT,AMDP#ACT    Set signals pending transfer count\n         MVC   TXD2#SUS,AMDP#SUS    Set signals while not busy count\n         MVC   TXD2#APP,AMDP#APP    Set signals while busy count\n         MVC   TXD2MXMS,AMDPMXMS    Set maximum message limit\n         MVC   TXD2#USE,AMDP#USE    Set # 1k buffers in use by path\n         MVC   TXD2#IBR,AMDP#IBR    Set # refused buffer requests\n         LH    R1,AMDPLENT          Get path entry length\n         ALR   R3,R1                Point to next path entry\n         LA    R10,TXD2PTHS(,R10)   Bump to next table path record\n         BCT   R0,IMXCF211          Loop back for next path entry\nIMXCF290 L     R0,DATAL1            Get IXCMG data area length\n         L     R1,DATAA1            Get IXCMG data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         DROP  R2,R3                AMDAREA, AMDPATH\n         DROP  R10,R11              TXD2PTH, INFTXD2\n\nIMXCF299 PR                         Restore environment & return\n\n         DROP  R12                  IMXCF200 base\n\n         LTORG\n\n         IXCMG MF=(L,IXCMGLS2)      IXCMG parm list\nIXCMGLL2 EQU   *-IXCMGLS2\n\n\n*********************************************************************\n*********************************************************************\n*                                                                   *\n*        IMXCF300 - Invoke XCF services to obtain group activity    *\n*                   information.                                    *\n*                                                                   *\n*        Register usage:                                            *\n*                                                                   *\n*        Input           Output           Internal                  *\n*        -----           ------           --------                  *\n* R0-11  N/A             Unchanged        Work                      *\n* R12    N/A             Unchanged        Base register             *\n* R13    Workarea        Unchanged        Workarea                  *\n* R14    BALR address    Return address   Work                      *\n* R15    N/A             Unchanged        Work                      *\n*                                                                   *\n*        Environment - Internal IMXCF routine.  Invoked by BALR.    *\n*                                                                   *\n*********************************************************************\n*********************************************************************\n\nIMXCF300 DS    0H\n         BAKR  R14,0                Save caller's environment\n         LR    R12,R15              Set up base register\n         USING IMXCF300,R12           and addressability\n         L     R1,=F'4096'          Get data area length\nIMXCF301 ST    R1,DATAL1            Set data area length\n         STORAGE OBTAIN,LENGTH=(R1),BNDRY=PAGE,SP=253,LOC=ANY\n         ST    R1,DATAA1            Save data area address\n         LR    R2,R1                Set area pointer in work register\n         USING AMDAREA,R2\n         MVC   IXCMGWRK(IXCMGLL3),IXCMGLS3  Set IXCMG parm list\n         IXCMG DATAAREA=(R2),       Data area                          X\n               DATALEN=DATAL1,      Data area length                   X\n               TYPE=SRCDST,         Request group activity data        X\n               MF=(E,IXCMGWRK)\n         LTR   R15,R15              IXCMG successful?\n         BZ    IMXCF310             Yes - branch, continue\n         C     R15,=F'4'            IXCMG rc=4?\n         BNE   IMXCF309             No - branch, internal error\n         CLC   AMDATLEN,DATAL1      Data area large enough?\n         BNH   IMXCF309             Yes - branch, internal error\n         L     R3,AMDATLEN          Get required data area length\n         L     R0,DATAL1            Get data area length\n         L     R1,DATAA1            Get data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         LR    R1,R3                Reset required data area length\n         B     IMXCF301             Loop back to issue IXCMG again\nIMXCF309 MVC   RETCODE,=F'16'       Set error return code\n         B     IMXCF390             Branch - return\nIMXCF310 LA    R1,TXD3GRPS          Get group record size\n         ICM   R15,15,AMDA#SD       Get number of group records\n         XR    R14,R14              Calculate group area length\n         MR    R14,R1               *\n         LA    R0,(TXD3GRPA-INFTXD3)  Get fixed INFTXD3 length\n         ALR   R0,R15               Calculate total INFTXD3 length\n         LR    R3,R0                Save INFTXD3 length\n         IC    R5,CALLKEY           Get caller's psw key\n         STORAGE OBTAIN,LENGTH=(R0),SP=130,KEY=(R5),LOC=ANY\n         ST    R1,INFTABP           Save table pointer\n         LR    R11,R1               Set table pointer\n         LR    R14,R1               Get pointer into work register\n         LR    R15,R3               Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear table\n         USING INFTXD3,R11\n         ST    R3,TXD3SIZE          Set INFTXD3 size in table\n         L     R1,PARMPTR           Get input parameter list pointer\n         ST    R11,4(,R1)           Set table address for caller\n         MVC   TXD3GRP#,AMDA#SD     Set # group records\n         LA    R1,TXD3GRPS          Get group record size\n         ST    R1,TXD3GRPL          Get group record length\n         ICM   R3,15,AMDAOSD        Get first group entry offset\n         ALR   R3,R2                Point to first group entry\n         USING AMDSD,R3\n         L     R0,=A(QUAHLENG+QUAMLENG+USTATLEN) Get answer area length\n         ST    R0,ANSWERL1          Save answer area length\n         STORAGE OBTAIN,LENGTH=(R0),LOC=ANY\n         ST    R1,ANSWERA1          Save answer area address\n         ICM   R9,15,AMDA#SD        Get # of group entries\n         BZ    IMXCF390             Branch - no group entries\n         LA    R10,TXD3GRPA         Point to group records area\n         USING TXD3GRP,R10\nIMXCF311 MVC   TXD3GRPN,AMDSGRP     Set group name\n         MVC   TXD3MEMN,AMDSMEM     Set member name\n         L     R14,ANSWERA1         Get IXCQUERY answer area address\n         L     R15,=A(QUAHLENG+QUAMLENG+USTATLEN)  Set move to length\n         XR    R1,R1                Set move from length and pad\n         MVCL  R14,R0               Clear IXCQUERY answer area\n         MVC   IXCQWRK(IXCQLL3),IXCQLST3  Set IXCQUERY parm list\n         L     R4,ANSWERA1          Set IXCQUERY answer area address\n         IXCQUERY REQINFO=GROUP,    Request group information          X\n               GRPNAME=TXD3GRPN,    Group name                         X\n               MEMNAME=TXD3MEMN,    Member name                        X\n               ANSAREA=(R4),        Answer area address                X\n               ANSLEN=ANSWERL1,     Answer area length                 X\n               MF=(E,IXCQWRK)\n         USING QUAHDR,R4\n         L     R1,QUAHSGOF          Get first member record offset\n         DROP  R4                   QUAHDR\n         ALR   R4,R1                Point to first member record\n         USING QUAMEM,R4\n         MVC   TXD3FLG1,QUAMSTA1    Set member state flag\n         MVC   TXD3TOD,QUAMTOD      Set last member status change TOD\n         MVC   TXD3JJOB,QUAMJOB     Set IXCJOIN jobname\n         MVC   TXD3SSLT,QUAMSNUM    Set system slot number\n         DROP  R4                   QUAMEM\n         MVC   TXD3SYSN,AMDSSNAM    Set system name\n         MVC   TXD3SCNT,AMDSSCNT    Set total # signals sent\n         MVC   TXD3RCNT,AMDSRCNT    Set total # signals received\n         LH    R1,AMDSLENT          Get group entry length\n         ALR   R3,R1                Point to next group entry\n         LA    R10,TXD3GRPS(,R10)   Bump to next table group record\n         BCT   R9,IMXCF311          Loop back for next group entry\nIMXCF390 L     R0,ANSWERL1          Get IXCQUERY answer area length\n         L     R1,ANSWERA1          Get IXCQUERY answer area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0)\n         L     R0,DATAL1            Get IXCMG data area length\n         L     R1,DATAA1            Get IXCMG data area address\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R0),SP=253\n         DROP  R2,R3                AMDAREA, AMDSD\n         DROP  R10,R11              TXD3GRP, INFTXD3\n\nIMXCF399 PR                         Restore environment & return\n\n         DROP  R12                  IMXCF0300 base\n\n         LTORG\n\n         IXCQUERY MF=(L,IXCQLST3)   IXCQUERY parm list\nIXCQLL3  EQU   *-IXCQLST3\n\n         IXCMG MF=(L,IXCMGLS3)      IXCMG parm list\nIXCMGLL3 EQU   *-IXCMGLS3\n\n         DROP  R13                   WORKAREA\n\n\nWORKAREA DSECT\n         DS    18F\nRETCODE  DS    F                IMXCF return code\nPARMPTR  DS    A                Input parameter list pointer\nWORKFLAG DS    XL1              Flag byte\nCALLKEY  DS    XL1              Caller's psw key\n         DS    XL2              Reserved\nINFTABP  DS    A                Information table pointer\n         DS    0D\nIXCQWRK  DS    (IXCQLL1)X       IXCQUERY parm list workarea\nANSWERA1 DS    A                IXCQUERY answer area address\nANSWERL1 DS    F                IXCQUERY answer area length\nUSTATLEN EQU   32               XCF user state area length\n         DS    0D\nIXCMGWRK DS    (IXCMGLL1)X      IXCMG parm list workarea\nDATAA1   DS    A                IXCMG data area address\nDATAL1   DS    F                IXCMG data area length\nWORKSIZE EQU   *-WORKAREA\n\n         COPY  IMXCDATA         Transported XCF sysplex Details\n\n\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEFJESCT\n         IEFJSCVT\n         IHAASCB\n         IHAASVT\n         IHAASXB\n         IHAPSA\n         IXCYQUAA\n         IXCYAMDA\n\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMXCFDOC": {"ttr": 25606, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98)_\\x00\\x982\\x7f\\x16\\x14\\x00q\\x00q\\x00\\x00\\xe3[\\xd8\\xc7\\xd7\\xf7\\xf5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-10-22T00:00:00", "modifydate": "1998-11-23T16:14:00", "lines": 113, "newlines": 113, "modlines": 0, "user": "T$QGP75"}, "text": "IMXCF return field descriptions\n-------------------------------\n\n\nType 1 call (XCF system activity information)\n---------------------------------------------\nTXD1SYS DSECT (from either IXCQUERY service/IXCYQUAA area\n               or IXCMG service/IXCYAMDA area)\n----------------------------------------------------------\nTXD1SYSN - System name. (AMDSYNME)\nTXD1FLG1 - System status. (QUASSTAT)\nSYSRESV  - Reserved.\nSYSACTV  - System active. (QUASACTV)\nSYSSUM   - Status update missing. (QUASSUM)\nSYSSYPT  - In sysplex partitioning. (QUASSYPT)\nSYSLOCL  - Single system, no couple d.s./sysplex. (QUASLOCL)\nSYSCLUP  - System completed sysplex partitioning but still in cleanup.\n           (QUASCLUP)\nTXD1FLG2 - System direction. (AMDSYDIR)\nTXD1FLG2 - System direction. (AMDSYDIR)\nSYIN     - Inbound direction. (AMDYSYIN)\nSYOUT    - Outbound direction. (AMDSYOUT)\nSYLCL    - Local. (AMDSYLCL)\nTXD1TCLS - Transport class name. (AMDSYTCN)\nTXD1#PTH - Current number of paths in service. (AMDSYPTH)\nTXD1#NOP - Total number of times a no path condition occurred.\n           (AMDSYNOP)\nTXD1#BSY - Total number of times a no buffer condition occurred.\n           (AMDSYBSY)\nTXD1#MXB - Current maximum 1k blocks of message buffer space permitted\n           for the system. (AMDSYMXB)\nTXD1#USE - Current number of 1k blocks of message buffer space in use\n           on the system. (AMDSYUSE)\nTXD1#BIG - Total number of messages sent whose length exceeded the\n           buffer size that supports the defined transport\n           class length. (AMDSYBIG)\nTXD1#FIT - Total number of messages sent whose length fit the buffer\n           size that supports the defined transport class length.\n           (AMDSYFIT)\nTXD1#SML - Total number of messages sent whose length was smaller than\n           the buffer size that supports the defined transport\n           class length. (AMDSYSML)\nTXD1#OVR - Total number of messages sent whose length exceeded the\n           buffer size for which the signalling service was optimized.\n           (AMDSYOVR)\nTXD1#TCL - Length of longest message that fits the buffer size that\n           supports the defined transport class. (AMDSYTCL)\nTXD1#SMX - Customer defined maxmsg value.  Default number of 1k blocks\n           of message buffer space. (AMDSYSMX)\n\n\nType 2 call (XCF path activity information)\n-------------------------------------------\nTXD2PTH DSECT (from the IXCMG service/IXCYAMDA area)\n----------------------------------------------------\nTXD2PDEV - Device number of CTC device for signalling path. (AMDPDEV)\nTXD2PSYS - System name. (AMDPNAME)\nTXD2FLG1 - Path status. (AMDPSTAT)\nPTHSTRT  - Path starting. (AMDPSTRT)\nPTHREST  - Path restarting. (AMDPREST)\nPTHWORK  - Path working. (AMDPWORK)\nPTHSTOP  - Path stopping (AMDPSTOP)\nPTHLINK  - Path waiting for completion of initial protocol to establish\n           communication link. (AMDPLINK)\nPTHNOP   - Not operational.  Path defined to XCF but not usable until\n           hardware and or defintion problems are resolved. (AMDPNOP)\nPTHFAIL  - Path stop failed. (AMDPFAIL)\nPTHRBLD  - Path rebuilding. (AMDPRBLD)\nTXD2FLG2 - Path status flag 2. (AMDPSTA2)\nPTHQSCG  - Path quiescing. (AMDPQSCG)\nPTHQSCD  - Path quiesced. (AMDPQSCD)\nTXD2FLG3 - Path direction. (AMDPDIR)\nPTHIN    - Inbound direction. (AMDPINB)\nPTHOUT   - Outbound direction. (AMDPOUTB)\nTXD2TCLS - Transport class name. (AMDPTCN)\nTXD2TDEV - Device number on the other end. (AMDPODEV)\nTXD2TSYS - System named on other end. (AMDPONME)\nTXD2MRET - Path retry limit. (AMDPMRET)\nTXD2#RET - Current path retry count. (AMDP#RET)\nTXD2#RST - Cumulative number of restarts. (AMDP#RST)\nTXD2#SIG - Total number of path signals sent/received path. (AMDP#SIG)\nTXD2#ACT - Current number of outbound path signals pending (AMDP#ACT)\nTXD2#SUS - Total number of path signal requests satisfied by this path\n           while not busy. (AMDP#SUS)\nTXD2#APP - Total number of path signal requests satisfied by this path\n           while busy. (AMDP#APP)\nTXD2MXMS - Path maximum message limit.  Number of 1k blocks of message\n           buffer space that can be used by the path. (AMDPMXMS)\nTXD2#USE - Curent number of 1k blocks of message buffer space in use by\n           this signalling path. (AMDP#USE)\nTXD2#IBR - Total number of times a request for a new message buffer was\n           refused due to path maximum message limit. (AMDP#IBR)\n\n\nType 3 call (XCF group activity information)\n--------------------------------------------\nTXD3GRP DSECT (from either IXCQUERY service/IXCYQUAA area\n               or IXCMG service/IXCYAMDA area)\n----------------------------------------------------------\nTXD3GRPN - Group name. (AMDSGRP)\nTXD3MEMN - Member name. (AMDSMEM)\nTXD3FLG1 - Member status. (QUAMSTA1)\nMEMSCRE  - Member created. (QUAMSCRE)\nMEMSACT  - Member active. (QUAMSACT)\nMEMSQUI  - Member quiesced. (QUAMSQUI)\nMEMSFLD  - Member failed. (QUAMSFLD)\nTXD3SYSN - System name. (AMDSSNAM)\nTXD3SSLT - System slot number. (QUAMSNUM)\nTXD3JJOB - Current jobname at IXCJOIN time. (QUAMJOB)\nTXD3TOD  - Time stamp of last member status change. (QUAMTOD)\nTXD3SCNT - Total number of signals sent by the member (AMDSSCNT)\nTXD3RCNT - Total number of signals received by the member (AMDSRCNT)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JPRFXMSG": {"ttr": 25609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x94\\x18_\\x00\\x94\\x18_\\x12\\x18\\x00\\x0c\\x00\\x0c\\x00\\x01\\xc5\\xe7\\xe3\\xf1\\xf0\\xf5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1994-07-04T00:00:00", "modifydate": "1994-07-04T12:18:00", "lines": 12, "newlines": 12, "modlines": 1, "user": "EXT105"}, "text": "***       copy member created  ON 4/07/94  AS *******************\nJPRFXMSG DC    X'C11140403C40400011C5C2&LOW'\n         DC    C'ENTER JOB NAME PREFIX OR COMPLETE JOB NAME'\n         DC    X'&MED',C'===>',X'1BC94E132841F4'\nSELJOBNM DC    CL8' '\n         DC    X'2841001BF0C22842F5114BD3'\n         DC    C'(USE',X'&HIGH',C'J/',X'&LOW',C'FROM DETAIL SCREEN '\n         DC    C'TO CANCEL JOB NAME PREFIX SELECTION)'\n         DCS   SBA,(15,4)\n         DC    C'(USE',X'&HIGH',C'*',X'&LOW'\n         DC    C'FOR NON-SPECIFIC PLACE-HOLDER CHARACTERS)'\nJOBSELEN EQU   *-JPRFXMSG\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOADLIB": {"ttr": 25611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 $o\\x01 $o\\x18S\\x18U\\x18U\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-09-02T00:00:00", "modifydate": "2020-09-02T18:53:35", "lines": 6229, "newlines": 6229, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PDLFRECS": {"ttr": 28167, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93\\x03o\\x00\\x93\\x06\\x1f\\x132\\x01\\xb9\\x01\\xc5\\x00,\\xe9\\xc7\\xc9\\xd7\\xf0\\xf1@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-02-05T00:00:00", "modifydate": "1993-03-02T13:32:00", "lines": 441, "newlines": 453, "modlines": 44, "user": "ZGIP01"}, "text": "         TITLE 'PDLF RECORD LAYOUT'\n*\n**********************************************************************\n**********************************************************************\n***                                                                ***\n***   PDLF DSECTS FOR SMF AND PDLF COMMON AREAS AND ELEMENT        ***\n***   DESCRIPTOR WORDS.                                            ***\n***                                                                ***\n**********************************************************************\n**********************************************************************\n         SPACE 3\nPDLFHDR  DSECT                    PDLF RECORD FORMAT\nPDLFLEN  DS    BL2                 RECORD LENGTH\nPDLFSEG  DS    BL2                 SEGMENT DESCRIPTOR\nPDLFSMFS DS    0BL16               SMF CONTROL AREA\nPDLFFLG  DS    BL1                 RESERVED FLAGS BYTE\nPDLFRTY  DS    BL1                 SMF RECORD TYPE (X'7F')\nPDLFTME  DS    BL4                 RECORD CREATION TIME (1/100 SEC)\nPDLFDTE  DS    PL4                 RECORD CREATION DATE (00YYDDDF)\nPDLFSID  DS    CL4                 SYSTEM NAME (SID PARAMETER VALUE)\n         DS    BL2                 BYTES X'0E' & X'0F' NOT USED\nPDLFSMFE EQU   *                   END OF SMF CONTROL AREA\nPDLFCMNS DS    0XL28               PDLF COMMON AREA\nPDLFCRID DS    CL4                 PDLF RECORD IDENTIFIER\nPDLFCSPS EQU   C'S001'             SYSTEM PERFORMANCE STATISTICS REC\nPDLFCIPS EQU   C'I001'             I/O PERFORMANCE STATISTICS REC\nPDLFCPPS EQU   C'P001'             PERF.GRP.PERFORMANCE STATISTICS REC\nPDLFCFLG DS    BL1                 PDLF FLAG INFORMATION\nPDLFCMNP EQU   X'80'               MEASUREMENT NOT POSS.(IPS MODIFIED)\nPDLFCSRC EQU   X'40'               INFO ON SINGLE RECORD\nPDLFCMRL EQU   X'01'               INFO OVER 2 OR MORE RECS (LAST REC)\nPDLFCMRN EQU   X'00'               INFO OVER 2 OR MORE RECS (NOT LAST)\n         DS    BL2\nPDLFCSEQ DS    BL1                 SEQUENCE NUMBER FOR MULTI REC.INFO.\nPDLFCTME DS    BL4                 COLLECTION TIME\nPDLFCDTE DS    BL4                 COLLECTION DATE\nPDLFCITV DS    BL2                 COLLECTION INTERVAL IN MINUTES\n         DS    BL6                 RESERVED BYTES\nPDLFCOFF DS    BL2                 OFFSET TO 1ST ELEMENT FROM PDLFCMNS\nPDLFCNOE DS    BL2                 NUMBER OF ELEMENTS    -------------\nPDLFCMNE EQU   *\nPDLFCELM DSECT\nPDLFCELS DS    0BL4\nPDLFCENO DS    BL1                 ELEMENT NUMBER\nPDLFCESN DS    BL1                 ELEMENT SUBMUNBER\nPDLFCELN DS    BL2                 ELEMENT LENGTH\nPDLFCELE EQU   *\n         TITLE 'PDLF SYSTEM PERFORMANCE STATISTICS RECORD LAYOUT'\n*\n**********************************************************************\n**********************************************************************\n***                                                                ***\n***      PDLF DSECTS FOR SYSTEM RELATED PERFORMANCE STATISTICS     ***\n***      RECORDS.                                                  ***\n***                                                                ***\n**********************************************************************\n**********************************************************************\n         SPACE 3\nPDLFS1   DSECT                    PDLF SYSTEM PERFORMANCE RECORD FORMAT\nPDLFS1ST DS    0BL8                SYS.PERF.STATS ELEMENT NO. 1\nPDLFS1C0 DS    BL1                 BUSY RATE OF CPU 0\nPDLFS1C1 DS    BL1                 BUSY RATE OF CPU 1\nPDLFS1C2 DS    BL1                 BUSY RATE OF CPU 2\nPDLFS1C3 DS    BL1                 BUSY RATE OF CPU 3\nPDLFS1C4 DS    BL1                 BUSY RATE OF CPU 4\nPDLFS1C5 DS    BL1                 BUSY RATE OF CPU 5\nPDLFS1C6 DS    BL1                 BUSY RATE OF CPU 6\nPDLFS1C7 DS    BL1                 BUSY RATE OF CPU 7\nPDLFS1OF EQU   X'FF'               FLAG INDICATING CPU OFFLINE\nPDLFS1ND EQU   *\nPDLFS2   DSECT                    PDLF SYSTEM PERFORMANCE RECORD FORMAT\nPDLFS2ST DS    0BL20               SYS.PERF.STATS ELEMENT NO. 2\nPDLFS2PI DS    BL4                 NUMBER OF PAGED-IN PAGES\nPDLFS2PO DS    BL4                 NUMBER OF PAGED-OUT PAGES\nPDLFS2PS DS    BL4                 NUMBER OF PHYSICAL SWAPS\nPDLFS2SI DS    BL4                 NUMBER OF SWAPPED-IN PAGES\nPDLFS2SO DS    BL4                 NUMBER OF SWAPPED-OUT PAGES\nPDLFS2ND EQU   *\nPDLFS3   DSECT                    PDLF SYSTEM PERFORMANCE RECORD FORMAT\nPDLFS3ST DS    0BL48               SYS.PERF.STATS ELEMENT NO. 3\nPDLFSRCS DS    BL4                 REAL PAGES ALLOCATED TO CSA/ECSA\nPDLFSVCS DS    BL4                 VIRTUAL PAGES ALLOCATED TO CSA/ECSA\nPDLFSSQA DS    BL4                 REAL + VIRTUAL PAGES ALLOC. TO SQA\nPDLFSESQ DS    BL4                 REAL + VIRTUAL PAGES ALLOC. TO ESQA\n         DS    BL4                 UNDOCUMENTED VALUE 1\nPDLFSCSA DS    BL4                 VIRTUAL PAGES ALLOCATED TO CSA\n         DS    BL4                 UNDOCUMENTED VALUE 2\nPDLFSELP DS    BL4                 VIRTUAL PAGES ALLOC. TO PLPA/EPLPA\n         DS    BL4                 UNDOCUMENTED VALUE 3\nPDLFSLPA DS    BL4                 VIRTUAL PAGES ALLOCATED TO PLPA\nPDLFSENC DS    BL4                 REAL PAGES ALLOCATED TO NUC/ENUC\nPDLFSNUC DS    BL4                 REAL PAGES ALLOCATED TO NUC\nPDLFS3ND EQU   *\n         TITLE 'PDLF I/O RELATED PERFORMANCE STATISTICS RECORD LAYOUT'\n*\n**********************************************************************\n**********************************************************************\n***                                                                ***\n***   PDLF DSECTS FOR I/O RELATED PERFORMANCE STATISTICS RECORDS.  ***\n***                                                                ***\n**********************************************************************\n**********************************************************************\n         SPACE 3\nPDLFIREC DSECT                    PDLF I/O PERFORMANCE RECORD FORMAT\nPDLFI1ST DS    0XL512              I/O PERF.STATS ELEMENT NO. 1\nPDLFI100 DS    BL2                 CHANNEL 00 BUSY RATE\nPDLFI101 DS    BL2                 CHANNEL 01 BUSY RATE\nPDLFI102 DS    BL2                 CHANNEL 02 BUSY RATE\nPDLFI103 DS    BL2                 CHANNEL 03 BUSY RATE\nPDLFI104 DS    BL2                 CHANNEL 04 BUSY RATE\nPDLFI105 DS    BL2                 CHANNEL 05 BUSY RATE\nPDLFI106 DS    BL2                 CHANNEL 06 BUSY RATE\nPDLFI107 DS    BL2                 CHANNEL 07 BUSY RATE\nPDLFI108 DS    BL2                 CHANNEL 08 BUSY RATE\nPDLFI109 DS    BL2                 CHANNEL 09 BUSY RATE\nPDLFI1HA DS    BL2                 CHANNEL 0A BUSY RATE\nPDLFI10B DS    BL2                 CHANNEL 0B BUSY RATE\nPDLFI10C DS    BL2                 CHANNEL 0C BUSY RATE\nPDLFI10D DS    BL2                 CHANNEL 0D BUSY RATE\nPDLFI10E DS    BL2                 CHANNEL 0E BUSY RATE\nPDLFI10F DS    BL2                 CHANNEL 0F BUSY RATE\nPDLFI110 DS    BL2                 CHANNEL 10 BUSY RATE\nPDLFI111 DS    BL2                 CHANNEL 11 BUSY RATE\nPDLFI112 DS    BL2                 CHANNEL 12 BUSY RATE\nPDLFI113 DS    BL2                 CHANNEL 13 BUSY RATE\nPDLFI114 DS    BL2                 CHANNEL 14 BUSY RATE\nPDLFI115 DS    BL2                 CHANNEL 15 BUSY RATE\nPDLFI116 DS    BL2                 CHANNEL 16 BUSY RATE\nPDLFI117 DS    BL2                 CHANNEL 17 BUSY RATE\nPDLFI118 DS    BL2                 CHANNEL 18 BUSY RATE\nPDLFI119 DS    BL2                 CHANNEL 19 BUSY RATE\nPDLFI11A DS    BL2                 CHANNEL 1A BUSY RATE\nPDLFI11B DS    BL2                 CHANNEL 1B BUSY RATE\nPDLFI11C DS    BL2                 CHANNEL 1C BUSY RATE\nPDLFI11D DS    BL2                 CHANNEL 1D BUSY RATE\nPDLFI11E DS    BL2                 CHANNEL 1E BUSY RATE\nPDLFI11F DS    BL2                 CHANNEL 1F BUSY RATE\nPDLFI120 DS    BL2                 CHANNEL 20 BUSY RATE\nPDLFI121 DS    BL2                 CHANNEL 21 BUSY RATE\nPDLFI122 DS    BL2                 CHANNEL 22 BUSY RATE\nPDLFI123 DS    BL2                 CHANNEL 23 BUSY RATE\nPDLFI124 DS    BL2                 CHANNEL 24 BUSY RATE\nPDLFI125 DS    BL2                 CHANNEL 25 BUSY RATE\nPDLFI126 DS    BL2                 CHANNEL 26 BUSY RATE\nPDLFI127 DS    BL2                 CHANNEL 27 BUSY RATE\nPDLFI128 DS    BL2                 CHANNEL 28 BUSY RATE\nPDLFI129 DS    BL2                 CHANNEL 29 BUSY RATE\nPDLFI12A DS    BL2                 CHANNEL 2A BUSY RATE\nPDLFI12B DS    BL2                 CHANNEL 2B BUSY RATE\nPDLFI12C DS    BL2                 CHANNEL 2C BUSY RATE\nPDLFI12D DS    BL2                 CHANNEL 2D BUSY RATE\nPDLFI12E DS    BL2                 CHANNEL 2E BUSY RATE\nPDLFI12F DS    BL2                 CHANNEL 2F BUSY RATE\nPDLFI130 DS    BL2                 CHANNEL 30 BUSY RATE\nPDLFI131 DS    BL2                 CHANNEL 31 BUSY RATE\nPDLFI132 DS    BL2                 CHANNEL 32 BUSY RATE\nPDLFI133 DS    BL2                 CHANNEL 33 BUSY RATE\nPDLFI134 DS    BL2                 CHANNEL 34 BUSY RATE\nPDLFI135 DS    BL2                 CHANNEL 35 BUSY RATE\nPDLFI136 DS    BL2                 CHANNEL 36 BUSY RATE\nPDLFI137 DS    BL2                 CHANNEL 37 BUSY RATE\nPDLFI138 DS    BL2                 CHANNEL 38 BUSY RATE\nPDLFI139 DS    BL2                 CHANNEL 39 BUSY RATE\nPDLFI13A DS    BL2                 CHANNEL 3A BUSY RATE\nPDLFI13B DS    BL2                 CHANNEL 3B BUSY RATE\nPDLFI13C DS    BL2                 CHANNEL 3C BUSY RATE\nPDLFI13D DS    BL2                 CHANNEL 3D BUSY RATE\nPDLFI13E DS    BL2                 CHANNEL 3E BUSY RATE\nPDLFI13F DS    BL2                 CHANNEL 3F BUSY RATE\nPDLFI140 DS    BL2                 CHANNEL 40 BUSY RATE\nPDLFI141 DS    BL2                 CHANNEL 41 BUSY RATE\nPDLFI142 DS    BL2                 CHANNEL 42 BUSY RATE\nPDLFI143 DS    BL2                 CHANNEL 43 BUSY RATE\nPDLFI144 DS    BL2                 CHANNEL 44 BUSY RATE\nPDLFI145 DS    BL2                 CHANNEL 45 BUSY RATE\nPDLFI146 DS    BL2                 CHANNEL 46 BUSY RATE\nPDLFI147 DS    BL2                 CHANNEL 47 BUSY RATE\nPDLFI148 DS    BL2                 CHANNEL 48 BUSY RATE\nPDLFI149 DS    BL2                 CHANNEL 49 BUSY RATE\nPDLFI14A DS    BL2                 CHANNEL 4A BUSY RATE\nPDLFI14B DS    BL2                 CHANNEL 4B BUSY RATE\nPDLFI14C DS    BL2                 CHANNEL 4C BUSY RATE\nPDLFI14D DS    BL2                 CHANNEL 4D BUSY RATE\nPDLFI14E DS    BL2                 CHANNEL 4E BUSY RATE\nPDLFI14F DS    BL2                 CHANNEL 4F BUSY RATE\nPDLFI150 DS    BL2                 CHANNEL 50 BUSY RATE\nPDLFI151 DS    BL2                 CHANNEL 51 BUSY RATE\nPDLFI152 DS    BL2                 CHANNEL 52 BUSY RATE\nPDLFI153 DS    BL2                 CHANNEL 53 BUSY RATE\nPDLFI154 DS    BL2                 CHANNEL 54 BUSY RATE\nPDLFI155 DS    BL2                 CHANNEL 55 BUSY RATE\nPDLFI156 DS    BL2                 CHANNEL 56 BUSY RATE\nPDLFI157 DS    BL2                 CHANNEL 57 BUSY RATE\nPDLFI158 DS    BL2                 CHANNEL 58 BUSY RATE\nPDLFI159 DS    BL2                 CHANNEL 59 BUSY RATE\nPDLFI15A DS    BL2                 CHANNEL 5A BUSY RATE\nPDLFI15B DS    BL2                 CHANNEL 5B BUSY RATE\nPDLFI15C DS    BL2                 CHANNEL 5C BUSY RATE\nPDLFI15D DS    BL2                 CHANNEL 5D BUSY RATE\nPDLFI15E DS    BL2                 CHANNEL 5E BUSY RATE\nPDLFI15F DS    BL2                 CHANNEL 5F BUSY RATE\nPDLFI160 DS    BL2                 CHANNEL 60 BUSY RATE\nPDLFI161 DS    BL2                 CHANNEL 61 BUSY RATE\nPDLFI162 DS    BL2                 CHANNEL 62 BUSY RATE\nPDLFI163 DS    BL2                 CHANNEL 63 BUSY RATE\nPDLFI164 DS    BL2                 CHANNEL 64 BUSY RATE\nPDLFI165 DS    BL2                 CHANNEL 65 BUSY RATE\nPDLFI166 DS    BL2                 CHANNEL 66 BUSY RATE\nPDLFI167 DS    BL2                 CHANNEL 67 BUSY RATE\nPDLFI168 DS    BL2                 CHANNEL 68 BUSY RATE\nPDLFI169 DS    BL2                 CHANNEL 69 BUSY RATE\nPDLFI16A DS    BL2                 CHANNEL 6A BUSY RATE\nPDLFI16B DS    BL2                 CHANNEL 6B BUSY RATE\nPDLFI16C DS    BL2                 CHANNEL 6C BUSY RATE\nPDLFI16D DS    BL2                 CHANNEL 6D BUSY RATE\nPDLFI16E DS    BL2                 CHANNEL 6E BUSY RATE\nPDLFI16F DS    BL2                 CHANNEL 6F BUSY RATE\nPDLFI170 DS    BL2                 CHANNEL 70 BUSY RATE\nPDLFI171 DS    BL2                 CHANNEL 71 BUSY RATE\nPDLFI172 DS    BL2                 CHANNEL 72 BUSY RATE\nPDLFI173 DS    BL2                 CHANNEL 73 BUSY RATE\nPDLFI174 DS    BL2                 CHANNEL 74 BUSY RATE\nPDLFI175 DS    BL2                 CHANNEL 75 BUSY RATE\nPDLFI176 DS    BL2                 CHANNEL 76 BUSY RATE\nPDLFI177 DS    BL2                 CHANNEL 77 BUSY RATE\nPDLFI178 DS    BL2                 CHANNEL 78 BUSY RATE\nPDLFI179 DS    BL2                 CHANNEL 79 BUSY RATE\nPDLFI17A DS    BL2                 CHANNEL 7A BUSY RATE\nPDLFI17B DS    BL2                 CHANNEL 7B BUSY RATE\nPDLFI17C DS    BL2                 CHANNEL 7C BUSY RATE\nPDLFI17D DS    BL2                 CHANNEL 7D BUSY RATE\nPDLFI17E DS    BL2                 CHANNEL 7E BUSY RATE\nPDLFI17F DS    BL2                 CHANNEL 7F BUSY RATE\nPDLFI180 DS    BL2                 CHANNEL 80 BUSY RATE\nPDLFI181 DS    BL2                 CHANNEL 81 BUSY RATE\nPDLFI182 DS    BL2                 CHANNEL 82 BUSY RATE\nPDLFI183 DS    BL2                 CHANNEL 83 BUSY RATE\nPDLFI184 DS    BL2                 CHANNEL 84 BUSY RATE\nPDLFI185 DS    BL2                 CHANNEL 85 BUSY RATE\nPDLFI186 DS    BL2                 CHANNEL 86 BUSY RATE\nPDLFI187 DS    BL2                 CHANNEL 87 BUSY RATE\nPDLFI188 DS    BL2                 CHANNEL 88 BUSY RATE\nPDLFI189 DS    BL2                 CHANNEL 89 BUSY RATE\nPDLFI18A DS    BL2                 CHANNEL 8A BUSY RATE\nPDLFI18B DS    BL2                 CHANNEL 8B BUSY RATE\nPDLFI18C DS    BL2                 CHANNEL 8C BUSY RATE\nPDLFI18D DS    BL2                 CHANNEL 8D BUSY RATE\nPDLFI18E DS    BL2                 CHANNEL 8E BUSY RATE\nPDLFI18F DS    BL2                 CHANNEL 8F BUSY RATE\nPDLFI190 DS    BL2                 CHANNEL 90 BUSY RATE\nPDLFI191 DS    BL2                 CHANNEL 91 BUSY RATE\nPDLFI192 DS    BL2                 CHANNEL 92 BUSY RATE\nPDLFI193 DS    BL2                 CHANNEL 93 BUSY RATE\nPDLFI194 DS    BL2                 CHANNEL 94 BUSY RATE\nPDLFI195 DS    BL2                 CHANNEL 95 BUSY RATE\nPDLFI196 DS    BL2                 CHANNEL 96 BUSY RATE\nPDLFI197 DS    BL2                 CHANNEL 97 BUSY RATE\nPDLFI198 DS    BL2                 CHANNEL 98 BUSY RATE\nPDLFI199 DS    BL2                 CHANNEL 99 BUSY RATE\nPDLFI19A DS    BL2                 CHANNEL 9A BUSY RATE\nPDLFI19B DS    BL2                 CHANNEL 9B BUSY RATE\nPDLFI19C DS    BL2                 CHANNEL 9C BUSY RATE\nPDLFI19D DS    BL2                 CHANNEL 9D BUSY RATE\nPDLFI19E DS    BL2                 CHANNEL 9E BUSY RATE\nPDLFI19F DS    BL2                 CHANNEL 9F BUSY RATE\nPDLFI1A0 DS    BL2                 CHANNEL A0 BUSY RATE\nPDLFI1A1 DS    BL2                 CHANNEL A1 BUSY RATE\nPDLFI1A2 DS    BL2                 CHANNEL A2 BUSY RATE\nPDLFI1A3 DS    BL2                 CHANNEL A3 BUSY RATE\nPDLFI1A4 DS    BL2                 CHANNEL A4 BUSY RATE\nPDLFI1A5 DS    BL2                 CHANNEL A5 BUSY RATE\nPDLFI1A6 DS    BL2                 CHANNEL A6 BUSY RATE\nPDLFI1A7 DS    BL2                 CHANNEL A7 BUSY RATE\nPDLFI1A8 DS    BL2                 CHANNEL A8 BUSY RATE\nPDLFI1A9 DS    BL2                 CHANNEL A9 BUSY RATE\nPDLFI1AA DS    BL2                 CHANNEL AA BUSY RATE\nPDLFI1AB DS    BL2                 CHANNEL AB BUSY RATE\nPDLFI1AC DS    BL2                 CHANNEL AC BUSY RATE\nPDLFI1AD DS    BL2                 CHANNEL AD BUSY RATE\nPDLFI1AE DS    BL2                 CHANNEL AE BUSY RATE\nPDLFI1AF DS    BL2                 CHANNEL AF BUSY RATE\nPDLFI1B0 DS    BL2                 CHANNEL B0 BUSY RATE\nPDLFI1B1 DS    BL2                 CHANNEL B1 BUSY RATE\nPDLFI1B2 DS    BL2                 CHANNEL B2 BUSY RATE\nPDLFI1B3 DS    BL2                 CHANNEL B3 BUSY RATE\nPDLFI1B4 DS    BL2                 CHANNEL B4 BUSY RATE\nPDLFI1B5 DS    BL2                 CHANNEL B5 BUSY RATE\nPDLFI1B6 DS    BL2                 CHANNEL B6 BUSY RATE\nPDLFI1B7 DS    BL2                 CHANNEL B7 BUSY RATE\nPDLFI1B8 DS    BL2                 CHANNEL B8 BUSY RATE\nPDLFI1B9 DS    BL2                 CHANNEL B9 BUSY RATE\nPDLFI1BA DS    BL2                 CHANNEL BA BUSY RATE\nPDLFI1BB DS    BL2                 CHANNEL BB BUSY RATE\nPDLFI1BC DS    BL2                 CHANNEL BC BUSY RATE\nPDLFI1BD DS    BL2                 CHANNEL BD BUSY RATE\nPDLFI1BE DS    BL2                 CHANNEL BE BUSY RATE\nPDLFI1BF DS    BL2                 CHANNEL BF BUSY RATE\nPDLFI1C0 DS    BL2                 CHANNEL B0 BUSY RATE\nPDLFI1C1 DS    BL2                 CHANNEL C1 BUSY RATE\nPDLFI1C2 DS    BL2                 CHANNEL C2 BUSY RATE\nPDLFI1C3 DS    BL2                 CHANNEL C3 BUSY RATE\nPDLFI1C4 DS    BL2                 CHANNEL C4 BUSY RATE\nPDLFI1C5 DS    BL2                 CHANNEL C5 BUSY RATE\nPDLFI1C6 DS    BL2                 CHANNEL C6 BUSY RATE\nPDLFI1C7 DS    BL2                 CHANNEL C7 BUSY RATE\nPDLFI1C8 DS    BL2                 CHANNEL C8 BUSY RATE\nPDLFI1C9 DS    BL2                 CHANNEL C9 BUSY RATE\nPDLFI1CA DS    BL2                 CHANNEL CA BUSY RATE\nPDLFI1CB DS    BL2                 CHANNEL CB BUSY RATE\nPDLFI1CC DS    BL2                 CHANNEL CC BUSY RATE\nPDLFI1CD DS    BL2                 CHANNEL CD BUSY RATE\nPDLFI1CE DS    BL2                 CHANNEL CE BUSY RATE\nPDLFI1CF DS    BL2                 CHANNEL CF BUSY RATE\nPDLFI1D0 DS    BL2                 CHANNEL D0 BUSY RATE\nPDLFI1D1 DS    BL2                 CHANNEL D1 BUSY RATE\nPDLFI1D2 DS    BL2                 CHANNEL D2 BUSY RATE\nPDLFI1D3 DS    BL2                 CHANNEL D3 BUSY RATE\nPDLFI1D4 DS    BL2                 CHANNEL D4 BUSY RATE\nPDLFI1D5 DS    BL2                 CHANNEL D5 BUSY RATE\nPDLFI1D6 DS    BL2                 CHANNEL D6 BUSY RATE\nPDLFI1D7 DS    BL2                 CHANNEL D7 BUSY RATE\nPDLFI1D8 DS    BL2                 CHANNEL D8 BUSY RATE\nPDLFI1D9 DS    BL2                 CHANNEL D9 BUSY RATE\nPDLFI1DA DS    BL2                 CHANNEL DA BUSY RATE\nPDLFI1DB DS    BL2                 CHANNEL DB BUSY RATE\nPDLFI1DC DS    BL2                 CHANNEL DC BUSY RATE\nPDLFI1DD DS    BL2                 CHANNEL DD BUSY RATE\nPDLFI1DE DS    BL2                 CHANNEL DE BUSY RATE\nPDLFI1DF DS    BL2                 CHANNEL DF BUSY RATE\nPDLFI1E0 DS    BL2                 CHANNEL E0 BUSY RATE\nPDLFI1E1 DS    BL2                 CHANNEL E1 BUSY RATE\nPDLFI1E2 DS    BL2                 CHANNEL E2 BUSY RATE\nPDLFI1E3 DS    BL2                 CHANNEL E3 BUSY RATE\nPDLFI1E4 DS    BL2                 CHANNEL E4 BUSY RATE\nPDLFI1E5 DS    BL2                 CHANNEL E5 BUSY RATE\nPDLFI1E6 DS    BL2                 CHANNEL E6 BUSY RATE\nPDLFI1E7 DS    BL2                 CHANNEL E7 BUSY RATE\nPDLFI1E8 DS    BL2                 CHANNEL E8 BUSY RATE\nPDLFI1E9 DS    BL2                 CHANNEL E9 BUSY RATE\nPDLFI1EA DS    BL2                 CHANNEL EA BUSY RATE\nPDLFI1EB DS    BL2                 CHANNEL EB BUSY RATE\nPDLFI1EC DS    BL2                 CHANNEL EC BUSY RATE\nPDLFI1ED DS    BL2                 CHANNEL ED BUSY RATE\nPDLFI1EE DS    BL2                 CHANNEL EE BUSY RATE\nPDLFI1EF DS    BL2                 CHANNEL EF BUSY RATE\nPDLFI1F0 DS    BL2                 CHANNEL F0 BUSY RATE\nPDLFI1F1 DS    BL2                 CHANNEL F1 BUSY RATE\nPDLFI1F2 DS    BL2                 CHANNEL F2 BUSY RATE\nPDLFI1F3 DS    BL2                 CHANNEL F3 BUSY RATE\nPDLFI1F4 DS    BL2                 CHANNEL F4 BUSY RATE\nPDLFI1F5 DS    BL2                 CHANNEL F5 BUSY RATE\nPDLFI1F6 DS    BL2                 CHANNEL F6 BUSY RATE\nPDLFI1F7 DS    BL2                 CHANNEL F7 BUSY RATE\nPDLFI1F8 DS    BL2                 CHANNEL F8 BUSY RATE\nPDLFI1F9 DS    BL2                 CHANNEL F9 BUSY RATE\nPDLFI1FA DS    BL2                 CHANNEL FA BUSY RATE\nPDLFI1FB DS    BL2                 CHANNEL FB BUSY RATE\nPDLFI1FC DS    BL2                 CHANNEL FC BUSY RATE\nPDLFI1FD DS    BL2                 CHANNEL FD BUSY RATE\nPDLFI1FE DS    BL2                 CHANNEL FE BUSY RATE\nPDLFI1FF DS    BL2                 CHANNEL FF BUSY RATE\nPDLFI1OF EQU   X'FF'               FLAG INDICATING AN OFFLINE CHANNEL\nPDLFI1ND EQU   *\nPDLFI2HD DSECT                    PDLF I/O PERFORMANCE RECORD FORMAT\nPDLFI2LN DS    BL4                 LENGTH OF ENTIRE DEVICE INFO.AREA\n         DS    BL2                 RESERVED BYTES\nPDLFI2EL DS    BL2                 ENTRY LENGTH\nPDLFI2ST DS    0BL64               I/O PERF.STATS ELEMENT NO. 2\nPDLFI2AD DS    BL2                 DEVICE ADDRESS\nPDLFI2F1 DS    BL1                 FLAG 1\nPDLFI2PH EQU   X'00'               INDICATES PHYSICAL DEVICE\nPDLFI2LG EQU   X'80'               INDICATES LOGICAL DEVICE\nPDLFI2F2 DS    BL1                 FLAG 2\nPDLFI2NI EQU   X'80'               NO DEVICE INFORMATION LOGGED\nPDLFI2IR DS    BL4                 NUMBER OF I/O REQUESTS\nPDLFI2RT DS    BL4                 I/O RESPONSE TIME\n         DS    BL2                 RESERVED BYTES\nPDLFI2DB DS    BL2                 DEVICE BUSY RATE\nPDLFI2WO DS    BL4  RESERVED - WAS I/O WAIT TM DUE TO OTHER SYSTEM CP\nPDLFI2WT DS    BL4  RESERVED - WAS I/O WAIT TM DUE TO THIS SYSTEM CP\nPDLFI2VL DS    BL6                 VOLUME SERIAL NUMBER\n         DS    BL2                 NOT USED / RESERVED\nPDLFI2DT DS    CL8                 DEVICE TYPE IN EBCDIC\nPDLFI2CM DS    BL1                 CHANNEL MASK\n         DS    BL3                 UNDOCUMENTED VALUE 2\nPDLFI2PT DS    8BL1                UP TO 8 PATHS (CHAN IDS) TO DEVICE\nPDLFI2NU EQU   X'FF'               FLAG TO INDICATE THAT PATH NOT USED\nPDLFI2RP DS    BL4                 FUNCTION PENDING TIME\nPDLFI2CT DS    BL4                 DEVICE CONNECT TIME\nPDLFI2SD DS    BL4                 SUBCHANNEL DISCONNECT TIME\nPDLFI2ND EQU   *\n         TITLE 'PDLF PERFORMANCE GROUP STATISTICS RECORD LAYOUT'\n*\n**********************************************************************\n**********************************************************************\n***                                                                ***\n***   PDLF DSECTS FOR PERFORMANCE GROUP RELATED RECORDS.           ***\n***                                                                ***\n**********************************************************************\n**********************************************************************\n         SPACE 3\nPDLFP1HD DSECT                    PDLF SYSTEM PERFORMANCE RECORD FORMAT\nPDLFP1ST DS    0BL104              PERF.GRP.PERF.STATS ELEMENT NO. 1\nPDLFP1PG DS    BL1                 PERFORMANCE GROUP NUMBER\nPDLFP1PN DS    BL1                 PERIOD NUMBER\n         DS    BL2                 RESERVED BYTES\nPDLFP1C0 DS    BL1                 BUSY RATE OF CPU 0\nPDLFP1C1 DS    BL1                 BUSY RATE OF CPU 1\nPDLFP1C2 DS    BL1                 BUSY RATE OF CPU 2\nPDLFP1C3 DS    BL1                 BUSY RATE OF CPU 3\nPDLFP1C4 DS    BL1                 BUSY RATE OF CPU 4\nPDLFP1C5 DS    BL1                 BUSY RATE OF CPU 5\nPDLFP1C6 DS    BL1                 BUSY RATE OF CPU 6\nPDLFP1C7 DS    BL1                 BUSY RATE OF CPU 7\nPDLFP1OF EQU   X'FF'               FLAG INDICATING CPU OFFLINE\nPDLFP1RQ DS    BL4                 NUMBER OF I/O REQUESTS\nPDLFP1IR DS    BL4                 I/O RESPONSE TIME\nPDLFP1RR DS    BL4                 NO.REAL PAGES - REGION & EREGION\nPDLFP1VR DS    BL4                 NO.VIRTUAL PAGES - REGION & EREGION\nPDLFP1RP DS    BL4                 NO. REAL PAGES - PLSQA & EPLSQA\nPDLFP1VP DS    BL4                 NO. VIRTUAL PAGES - PLSQA & EPLSQA\nPDLFP1LP DS    BL4                 NO. PAGES - LSQA\nPDLFP1EP DS    BL4                 NO. PAGES - ELSQA\nPDLFP1TJ DS    BL2                 NO.OF TERMINATED JOBS (TRANSACTIONS)\n         DS    BL2                 RESERVED BYTES\nPDLFP1RT DS    BL4                 RESPONSE TIME\nPDLFP1DT DS    BL4                 DATA TRANSFER TIME\nPDLFP1NL EQU   X'FFFFFFFF'         INFORMATION NOT LOGGED\nPDLFP1CW DS    BL4                 CPU WAIT TIME\nPDLFP1PC DS    BL4                 PAGE-IN WAIT TIME (COMMON AREA)\nPDLFP1PL DS    BL4                 PAGE-IN WAIT TIME (LOCAL AREA)\n         DS    BL4                 RESERVED BYTES\nPDLFP1IW DS    BL4                 SWAP-IN WAIT TIME\nPDLFP1EW DS    BL4                 WAIT TIME FOR ACQUIRING ENQS\nPDLFP1IO DS    BL4  RESERVED - WAS I/O WAIT TIME DUE TO OTHER SYSTEM\nPDLFP1IT DS    BL4  RESERVED - WAS I/O WAIT TIME DUE TO THIS SYSTEM\n         DS    BL4                 RESERVED BYTES\nPDLFP1VU DS    BL4                 NO. VIRTUAL PAGES - REGION\n         DS    BL4                 RESERVED BYTES\nPDLFP1VL DS    BL4                 NO. VIRTUAL PAGES - PLSQA\nPDLFP1ND EQU   *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPACE$": {"ttr": 28421, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x13\\x01\\x18\\x07?\\x01\\x18\\x07?\\x11Q\\x00\\x06\\x00\\x05\\x00\\x00\\xc7\\xd7\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-03-14T00:00:00", "modifydate": "2018-03-14T11:51:13", "lines": 6, "newlines": 5, "modlines": 0, "user": "GPRICE"}, "text": "//IMPSPACE JOB (),IMSPACER,CLASS=I,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=&SYSUID,REGION=32M\n//IMPSPACE EXEC PGM=IMSPACER,TIME=1440,PARM='NOSMF'\n//SAVEHIST  DD  DSN=GPRICE.SAVEHIST,DISP=SHR\n//SYSUDUMP  DD  SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT010/FILE010.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT010", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}