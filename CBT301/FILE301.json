{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011709000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE301.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE301.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x06'", "DS1TRBAL": "b'\\xac\\xca'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02&\\x00\\x03\\x02&\\x00\\x08\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$NOTE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x972\\x0f\\x01\\x00$?\\x19\\x13\\x00\\x16\\x00\\x16\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-11-16T00:00:00", "modifydate": "2000-08-30T19:13:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "WSBG"}, "text": "Notes for Mike Cleary's version of CDSCB\n\n   This is Mike Cleary's version of the CDSCB command that is on\n   File 300 of the CBT Tape.\n\n   This version uses RACROUTE to determine if the user can change\n   the DSCB of the dataset.  ALTER authority is required.  I am\n   leaving the old version of CDSCB on File 300, because another\n   user may not want to use this type of authority checking in the\n   CDSCB command, but may prefer the USERID method, or the installer,\n   if he feels safe enough, may want to turn the authority checking\n   off altogether.  Therefore the other version, from File 300, will\n   be the preferable one to work with.  It depends upon your\n   requirements.  Anyway, Mike's work is here for you to profit\n   from.\n\n       Sam Golob    Version 416   11/97    sbgolob@aol.com\n                                           sbgolob@attglobal.net\n\n       Michael Cleary                      mcleary@pacbell.net\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$#DATE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t)\\x8f\\x01\\t)\\x8f\\x14A\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-10-25T00:00:00", "modifydate": "2009-10-25T14:41:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  301\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE301\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,935 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/25/09    14:41:15    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE301": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t)\\x8f\\x01\\t)\\x8f\\x14A\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-10-25T00:00:00", "modifydate": "2009-10-25T14:41:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 301 is from Mike Cleary of IBM Global Services in         *   FILE 301\n//*           California, and contains a version of the CDSCB       *   FILE 301\n//*           (change the DSCB) TSO command processor program       *   FILE 301\n//*           from File 300, which uses SAF for its security        *   FILE 301\n//*           checking.  In order to be able to change              *   FILE 301\n//*           attributes of a dataset, you have to have ALTER       *   FILE 301\n//*           access to it, the way this command is written.  Of    *   FILE 301\n//*           course, if your shop has different requirements,      *   FILE 301\n//*           you can change the code, but this version shows       *   FILE 301\n//*           you how to fit the RACF or SAF checking in.           *   FILE 301\n//*                                                                 *   FILE 301\n//*           I have deliberately left the other CDSCB code in      *   FILE 301\n//*           File 300, unchanged, because some people still want   *   FILE 301\n//*           to grant authorization by hard-coded userid, and      *   FILE 301\n//*           if you're so authorized, permit alteration of all     *   FILE 301\n//*           datasets.  (SG 11/97)                                 *   FILE 301\n//*                                                                 *   FILE 301\n//*           Michael J. Cleary                                     *   FILE 301\n//*           IBM Global Services                                   *   FILE 301\n//*           310-602-4105 (voice)                                  *   FILE 301\n//*           mailto:michaeljosephcleary@yahoo.com                  *   FILE 301\n//*           http://sites.google.com/site/michaeljosephcleary/     *   FILE 301\n//*                                                                 *   FILE 301\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CDSCB": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x971o\\x00\\x971\\x8f\\x021\\x07\\x05\\x076\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1997-11-12T00:00:00", "modifydate": "1997-11-14T02:31:00", "lines": 1797, "newlines": 1846, "modlines": 0, "user": "ZT15"}, "text": "//ZT15$ASM JOB (CDSCB),'CDSCB',CLASS=U,\n// MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=ZT15\n//JESDS OUTPUT PAGEDEF=LDUP,FORMDEF=LDUP,JESDS=ALL,FORMS=3H25\n//ASM     EXEC PGM=ASMA90,PARM='NODECK,OBJ,RENT'\n//STEPLIB   DD DISP=SHR,DSN=SYS1.SASMMOD1\n//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS\n//SYSLIN    DD DSN=&&OBJECT,SPACE=(CYL,(9,9)),UNIT=SYSDA,\n//             DISP=(NEW,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS)\n//SYSIN     DD *\n         TITLE '    C D S C B              '\n***********************************************************************\n*                                                                     *\n*        'CDSCB' TSO COMMAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.\n*        DATE WRITTEN. MAY 20 1975.\n*        DATE UPDATED. FEBRUARY 12 1982.\n*        ATTRIBUTES. RE-ENTRANT, REFRESHABLE, REUSABLE.\n*        COMMENTS.\n*            THIS TSO COMMAND ALTERS THE CONTENTS OF A\n*            FORMAT-1 DSCB IN A VTOC.\n*\n*            THE DATA SET IS ALLOCATED, THEN THE VTOC OF THE\n*            VOLUME CONTAINING IT IS OPENED VIA TYPE-J OPEN.\n*            THE DSCB IS READ USING THE DSNAME AS A KEY. THE\n*            TTR (BLOCK ADDRESS) OF THE RECORD IS RETURNED BY\n*            THE READ.  THE DSCB IS RE-WRITTEN USING THE DSNAME\n*            AS THE KEY, WITH THE KEY SEARCH STARTING AT THE\n*            TTR ADDRESS FROM THE READ.\n*\n*            NOTE. UNDER VS2 MVS, A VTOC MAY BE OPENED FOR\n*            UPDATE ONLY BY AUTHORIZED PROGRAMS. THEREFORE\n*            THIS WILL ABEND WITH A 913-10 UNLESS THE COMMAND\n*            CAN BE MADE TO RUN AUTHORIZED BY ONE OF THE FOLLOWING:\n*            1)  ADDING CDSCB TO SYS1.PARMLIB(IKJTSOXX) AUTHCMD\n*            2)  ADDING CDSCB TO MOD IKJEFTE2 LMOD IKJEFT02\n*            3)  WRITE AN SVC AND REPLACE THE 2 'NOPR'\n*                INSTRUCTIONS IN THIS PROGRAM WITH THE SVC\n*\n*            THE EXTERNAL SECURITY MANAGER INTERFACE STREAMLINES CDSCB\n*            SECURITY BY PROTECTING THE DATA, NOT THE PROGRAM.  AS\n*            SHIPPED, CDSCB REQUIRES THE USER TO HAVE ALTER ACCESS TO\n*            THE DATASET.  BASED ON INSTALLATION REQUIREMENTS, THE\n*            REQUIRED ACCESS LEVEL CAN BE CHANGED ON THE ATTR=\n*            PARAMETER OF THE RACROUTE MACRO.\n*\n*            04NOV77 - ADDED RECFM, DSORG, CREATE, EXPDT, UNIT\n*            09DEC77 - ADDED IMPLEXEC, EXIT12\n*            29MAR78 - JFCB+52 SET ON TO PREVENT WRITE-BACK\n*            26JUL78 - PREFIXING DONE BY PARSE (USID)\n*            22NOV78 - REMOVE LOCATE IF VOL NOT SPEC\n*            24NOV78 - ADD CLEAR, PUTLINE, PUTMSG, 2ND BASE REG\n*            12OCT79 - ADD GBLB, RESERVE, DEVTYPE FOR LIMCT.\n*            14OCT79 - ADD STACK DELETE.\n*            10APR80 - USID REMOVED FROM IKJPOSIT FOR SVS/MVT.\n*            11APR80 - SHR KEYWORD ADDED.\n*            25JUL80 - TESTAUTH ADDED. ASTERISK IN CREATE DATE.\n*            01APR81 - ERROR MESSAGE FOR BAD DATES. COMMON EXIT PATH\n*                      USING STATUS. MESSAGE IF NOTHING CHANGED.\n*                      MORE RECFMS AND DSORGS. REFDT. FORMAT1 DSECT.\n*                      ALLOW TO RUN IF UNDER STARTED TASK (TSSO).\n*                      WTO MESSAGE WHEN CHANGING EXPDT.\n*            20APR81 - RACF/NORACF KEYWORDS ADDED.\n*            08MAY81 - MORE RECFMS ADDED (UA UM UT).\n*            07JUL81 - CK FOR ASMI USERID INSTEAD OF ASFI.\n*            12FEB82 - CHECK DSORG RECFM LRECL BLKSI CREDT\n*                      FOR CHANGING TO SAME AS EXISTING VALUE.\n*            14NOV97 - EXTERNAL SECURITY MANAGER INTERFACE\n*\n*            SPECIFYING 'SYSPARM(OS)' TO THE ASSEMBLER WILL CAUSE\n*            A VERSION FOR OS/MVT TO BE ASSEMBLED.\n*            THE VS ASSEMBLER (OR H ASSEMBLER) MUST BE USED.\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  ('&SYSPARM' NE 'OS')\n         EJECT\nCDSCB    START\n         USING *,R10,R11\n         B     @PROLOG-*(,R15)\n         DC    AL1(11),CL11'CDSCB   '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)  SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15             1ST BASE REGISTER\n         LA    R11,1(,R10)\n         LA    R11,4095(,R11)      2ND BASE REGISTER\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1               SET WORKAREA POINTER\n         USING @DATA,R9\n         SPACE\n         LR    R15,R1              POINT TO AREA TO CLEAR\n         L     R1,@SIZE            GET LENGTH TO CLEAR\n         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE\n         SRDL  R0,8                DIVIDE BY 256\n         SRL   R1,24               ISOLATE REMAINDER\n         LTR   R0,R0               IS QUOTIENT ZERO\n         BZ    CLEARR              YES, GO DO REMAINDER\nCLEARQ   XC    0(256,R15),0(R15)   ZERO 256 BYTES\n         LA    R15,256(,R15)       INCREMENT ADDRESS\n         BCT   R0,CLEARQ           DECREMENT QUOTIENT AND BRANCH\nCLEARR   LTR   R1,R1               IS REMAINDER ZERO?\n         BZ    CLEARX              YES, BRANCH TO EXIT\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                GO AROUND EXECUTED INST\n         XC    0(0,R15),0(R15)     EXECUTED\n         EX    R1,*-6              DO THE ABOVE XC\nCLEARX   EQU   *\n         SPACE\n         ST    R13,4(,R9)\n         ST    R9,8(,R13)\n         LR    R13,R9\n         SPACE\n         MVC   SIZE,@SIZE\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\nPROCEED  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLOADX            BRANCH AROUND LOAD\n.SKIP2   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         LA    R0,PCLADDR\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP3\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP3   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BNZ   PARSERR\n         EJECT\n         L     R12,MYANS\n         USING IKJPARMD,R12\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS THE 'ZAP' PARAMETER'                      *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   ZAPKW+1,0           ZAP SPECIFIED?\n         BE    NOREP               NO - BRANCH\n         TM    REP+6,X'80'         ZAP SPECIFIED?\n         BZ    NOREP\n         CLI   REP+8,X'FF'         ONLY ONE REP PARAMETER?\n         BE    INVREP              YES - ERROR - BRANCH\n         MVC   OFFSET(5),=XL5'00'\n         LA    R1,OFFSET\n         CLI   REP+5,4\n         BE    MOVEOFF\n         CLI   REP+5,2\n         BNE   INVREP              OFFSET MUST BE 2 OR 4 CHARS\n         LA    R1,OFFSET+1\nMOVEOFF  L     R14,REP             REG 14 --> OFFSET\n         LH    R15,REP+4           REG 15  =  LENGTH (2 OR 4)\n         BCTR  R15,0\n         B     *+10\n         MVC   0(0,R1),0(R14)      MOVE 1ST REP TO OFFSET\n         EX    R15,*-6\n         SPACE\n         LH    R0,REP+4\n         SRL   R0,1                CUT LENGTH IN HALF\n         BAL   R14,PACK            CONVERT TO BINARY\n         CLI   OFFSET+1,44+1       OFFSETS START WITH X'2D'\n         BL    REPOERR             IF LESS ISSUE MESSAGE\n         SPACE\n         L     R6,REP+8            REG 6 --> NEXT PDE IN LIST (VER DATA\n         L     R14,0(,R6)          REG 14 --> VERDATA\n         LH    R15,4(,R6)          REG 15  =  LENGTH\n         BCTR  R15,0\n         B     *+10\n         MVC   VERDATA+1(0),0(R14) MOVE 2ND REP TO VERDATA\n         EX    R15,*-6\n         LH    R0,4(,R6)\n         SRL   R0,1                CUT LENGTH IN HALF\n         BCTR  R0,0\n         STC   R0,VERDATA\n         LH    R0,4(,R6)\n         SRL   R0,1                CUT LENGTH IN HALF\n         LA    R1,VERDATA+1\n         BAL   R14,PACK\n         SR    R14,R14\n         IC    R14,VERDATA         R14 = LEN-1 OF VERDATA\n         AH    R14,OFFSET\n         CH    R14,ENDOFREC        BEYOND END OF RECORD?\n         BH    REPVERR             YES - ISSUE MESSAGE\n         SPACE\n         CLI   8(R6),X'FF'         3RD REP (REPDATA) SPECIFIED?\n         MVI   VR,C'V'\n         BE    REPX\n         L     R6,8(,R6)           REG 6 --> NEXT PDE (REP DATA)\n         MVI   VR,C'R'\n         L     R14,0(,R6)          REG 14 --> REPDATA\n         LH    R15,4(,R6)          R15  =  LENGTH\n         BCTR  R15,0\n         B     *+10\n         MVC   REPDATA+1(0),0(R14) MOVE 3RD REP TO REPDATA\n         EX    R15,*-6\n         LH    R0,4(,R6)\n         SRL   R0,1                CUT LENGTH IN HALF\n         BCTR  R0,0\n         STC   R0,REPDATA\n         LH    R0,4(,R6)\n         SRL   R0,1                CUT LENGTH IN HALF\n         LA    R1,REPDATA+1\n         BAL   R14,PACK\n         CLC   VERDATA(1),REPDATA  COMPARE LENGTHS\n         BL    REPDERR             VER DATA MUST NOT BE SHORTER\nREPX     EQU   *\nNOREP    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS THE 'RECFM' KEYWORD                       *\n*                                                          *\n************************************************************\n         SPACE\n         LH    R1,RECFM            GET RECFM\n         LTR   R1,R1               RECFM SPECIFIED?\n         BZ    NOREC               NO - BRANCH\n         IC    R14,RECFMTAB(R1)    GET RECFM BITS\n         STC   R14,NEWRECFM        SAVE NEW RECFM\n         MVI   NEWRECSW,C'R'       SET SWITCH ON\nNOREC    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS THE 'BLKSIZE' KEYWORD                     *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   BLKKW+1,0           BLKSIZE SPECIFIED?\n         BE    NOBLK               NO - BRANCH\n         TM    BLK+6,X'80'         VALUE PRESENT?\n         BZ    NOBLK               NO - BRANCH\n         LH    R14,BLK+4           GET LENGTH\n         LTR   R14,R14             LENGTH ZERO?\n         BZ    NOBLK               YES - BRANCH\n         L     R1,BLK              POINT TO VALUE\n         BCTR  R14,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R1)\n         EX    R14,*-6\n         CVB   R1,DOUBLE           GET BINARY VALUE\n         C     R1,=F'32767'        TOO LARGE?\n         BNH   *+8                 NO - BRANCH\n         L     R1,=F'32767'        YES - REDUCE IT\n         STH   R1,NEWBLK           SAVE IT\n         MVI   NEWBLKSW,C'B'       SET SWITCH ON\nNOBLK    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS THE 'LRECL' KEYWORD                       *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   LREKW+1,0           LRECL SPECIFIED?\n         BE    NOLRE               NO - BRANCH\n         TM    LRE+6,X'80'         VALUE PRESENT?\n         BZ    NOLRE               NO - BRANCH\n         LH    R14,LRE+4           GET LENGTH\n         LTR   R14,R14             LENGTH ZERO?\n         BZ    NOLRE               YES - BRANCH\n         L     R1,LRE              POINT TO VALUE\n         BCTR  R14,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R1)\n         EX    R14,*-6\n         CVB   R1,DOUBLE           GET BINARY VALUE\n         C     R1,=F'32767'        TOO LARGE?\n         BNH   *+8                 NO - BRANCH\n         L     R1,=F'32767'        YES - REDUCE IT\n         STH   R1,NEWLRE           SAVE IT\n         MVI   NEWLRESW,C'L'       SET SWITCH ON\nNOLRE    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS THE 'DSORG' KEYWORD                       *\n*                                                          *\n************************************************************\n         SPACE\n         LH    R1,DSORG            GET DSORG\n         LTR   R1,R1               DSORG SPECIFIED?\n         BZ    NODSO               NO - BRANCH\n         IC    R14,DSORGTAB(R1)    GET DSORG BITS\n         STC   R14,NEWDSORG        SAVE NEW DSORG\n         MVI   NEWDSORG+1,0        NEW DSORG PART 2\n         MVI   NEWDSOSW,C'R'       SET SWITCH ON\nNODSO    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS THE PROTECTION KEYWORDS                   *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   PROKW+1,0           ANY PROTECTION KEYWORDS?\n         BE    NOPRO               NO - BRANCH\n         MVI   NEWPRO0,X'FF'       START WITH NO BITS TO SET OFF\n         MVI   NEWPRO1,X'00'              AND NO BITS TO SET ON.\n         CLI   PROKW+1,2           'PW' OR 'PWREAD'?\n         BH    PRO3                NO - BRANCH\n         MVI   NEWPRO0,B'11111011' SET OFF 1 BIT\n         MVI   NEWPRO1,B'00010000' SET ON 1 BIT\n         B     PROX\nPRO3     CLI   PROKW+1,3           'PWWRITE'?\n         BNE   PRO4                NO - BRANCH\n         MVI   NEWPRO1,B'00010100' SET ON 2 BITS\n         B     PROX\nPRO4     CLI   PROKW+1,4           'NOPW'?\n         BNE   PRO5                NO - BRANCH\n         MVI   NEWPRO0,B'11101011' SET OFF 2 BITS\n         B     PROX\nPRO5     CLI   PROKW+1,5           'RACF'\n         BNE   PRO6\n         MVI   NEWPRO1,X'40'       SET ON 1 BIT\n         B     PROX\nPRO6     CLI   PROKW+1,6           'NORACF'\n         BNE   NOPRO\n         MVI   NEWPRO0,255-X'40'   SET OFF 1 BIT\nPROX     MVI   NEWPROSW,C'P'       SET SWITCH ON\nNOPRO    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS THE 'ALLOC' KEYWORD                       *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   ALLKW+1,0           'ALLOC' SPECIFIED?\n         BE    NOALL               NO - BRANCH\n         CLI   ALL+1,0             ANY SUBKEYWORDS?\n         BE    NOALL               NO - BRANCH\n         MVI   NEWALL0,X'FF'       START WITH NO BITS TO SETOFF\n         MVI   NEWALL1,X'00'              AND NO BITS TO SETON\n         CLI   ALL+1,1             'NONE'?\n         BNE   ALL2                NO - BRANCH\n         MVI   NEWALL0,B'00111111' SET OFF 2 BITS\n         B     ALLX\nALL2     CLI   ALL+1,2             'BLOCKS'\n         BNE   ALL3                NO - BRANCH\n         MVI   NEWALL0,B'01111111' SET OFF 1 BIT\n         MVI   NEWALL1,B'01000000' SET ON 1 BIT\n         B     ALLX\nALL3     CLI   ALL+1,3             'TRACKS'\n         BNE   ALL4                NO - BRANCH\n         MVI   NEWALL0,B'10111111' SET OFF 1 BIT\n         MVI   NEWALL1,B'10000000' SET ON 1 BIT\n         B     ALLX\nALL4     CLI   ALL+1,4             'CYLINDERS'\n         BNE   NOALL               NO - BRANCH\n         MVI   NEWALL1,B'11000000' SET ON 2 BITS\nALLX     MVI   NEWALLSW,C'A'       SET ON SWITCH\nNOALL    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS THE 'SPACE' PARAMETER                     *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   SPAKW+1,0           SPACE SPECIFIED?\n         BE    NOSPA               NO - BRANCH\n         TM    SPA+6,X'80'         VALUE PRESENT?\n         BZ    NOSPA               NO - BRANCH\n         LH    R14,SPA+4           GET LENGTH\n         LTR   R14,R14             LENGTH ZERO?\n         BZ    NOSPA               YES - BRANCH\n         L     R1,SPA              POINT TO VALUE\n         BCTR  R14,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R1)\n         EX    R14,*-6\n         CVB   R1,DOUBLE           GET BINARY VALUE\n         C     R1,=F'32767'        TOO LARGE?\n         BNH   *+8                 NO - BRANCH\n         L     R1,=F'32767'        YES - REDUCE IT\n         ST    R1,NEWSPA           SAVE IT\n         MVI   NEWSPASW,C'S'       SET SWITCH ON\nNOSPA    EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        PROCESS THE 'CREATE' KEYWORD                      *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   CREATEKW+1,0        CREATE SPECIFIED?\n         BE    CREATEX             NO - BRANCH\n         TM    CREATE+6,X'80'      VALUE PRESENT?\n         BZ    CREATEX             NO - BRANCH\n         LH    R14,CREATE+4        GET LENGTH\n         LTR   R14,R14             LENGTH ZERO?\n         BZ    CREATEX             YES - BRANCH\n         L     R1,CREATE           POINT TO VALUE\n         CLI   0(R1),C'*'          ASTERISK\n         BE    CTODAY              YES, BRANCH\n         BCTR  R14,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R1)\n         EX    R14,*-6\n         CVB   R15,DOUBLE          GET BINARY VALUE\n         LTR   R15,R15             IS IT ZERO?\n         BZ    CREOK               YES - BRANCH\n         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?\n         BNE   ERRCDATE            NO - BRANCH TO ERROR (IGNORE)\nCREPACK  PACK  DOUBLE(8),0(2,R1)   PACK YY\n         CVB   R14,DOUBLE          GET BINARY YY\n         SLL   R14,16              00YY0000\n         PACK  DOUBLE(8),2(3,R1)   PACK DDD\n         CVB   R15,DOUBLE          GET BINARY DDD\n         OR    R15,R14             00YY0DDD\nCREOK    ST    R15,NEWCRE          SAVE NEW CREATION DATE\n         MVI   NEWCRESW,C'C'       SET SWITCH ON\n         B     CREATEX\nCTODAY   EQU   *\n         TIME  BIN\n         ST    R1,DOUBLE           STORE 00YYDDDC\n         LA    R1,DATE5            POINT TO FAKE OPERAND\n         UNPK  0(5,R1),DOUBLE+1(3) YYDDD\n         OI    4(R1),C'0'          FIX SIGN BITS\n         B     CREPACK             JUMP BACK IN WITH FAKE OPERAND\nCREATEX  EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        PROCESS THE 'EXPDT' KEYWORD                       *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   EXPDTEKW+1,0        EXPDTE SPECIFIED?\n         BE    NOEXP               NO - BRANCH\n         TM    EXPDTE+6,X'80'      VALUE PRESENT?\n         BZ    NOEXP               NO - BRANCH\n         LH    R14,EXPDTE+4        GET LENGTH\n         LTR   R14,R14             LENGTH ZERO?\n         BZ    NOEXP               YES - BRANCH\n         MVC   EXPCH,=C'00000'\n         L     R1,EXPDTE           POINT TO VALUE\n         BCTR  R14,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R1)\n         EX    R14,*-6\n         CVB   R15,DOUBLE          GET BINARY VALUE\n         LTR   R15,R15             IS IT ZERO?\n         BZ    EXPOK               YES - BRANCH\n         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?\n         BNE   ERRXDATE            NO - BRANCH TO ERROR (IGNORE)\n         MVC   EXPCH,0(R1)         SAVE EXPDT\n         PACK  DOUBLE(8),0(2,R1)   PACK YY\n         CVB   R14,DOUBLE          GET BINARY YY\n         SLL   R14,16              00YY0000\n         PACK  DOUBLE(8),2(3,R1)   PACK DDD\n         CVB   R15,DOUBLE          GET BINARY DDD\n         OR    R15,R14             00YY0DDD\nEXPOK    ST    R15,NEWEXP          SAVE NEW EXPIRATION DATE\n         MVI   NEWEXPSW,C'C'       SET SWITCH ON\nNOEXP    EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        PROCESS THE 'REFDT' KEYWORD                       *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   REFDTEKW+1,0        REFDT SPECIFIED?\n         BE    REFDTEX             NO - BRANCH\n         TM    REFDTE+6,X'80'      VALUE PRESENT?\n         BZ    REFDTEX             NO - BRANCH\n         LH    R14,REFDTE+4        GET LENGTH\n         LTR   R14,R14             LENGTH ZERO?\n         BZ    REFDTEX             YES - BRANCH\n         L     R1,REFDTE           POINT TO VALUE\n         CLI   0(R1),C'*'          ASTERISK\n         BE    RTODAY              YES, BRANCH\n         BCTR  R14,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R1)\n         EX    R14,*-6\n         CVB   R15,DOUBLE          GET BINARY VALUE\n         LTR   R15,R15             IS IT ZERO?\n         BZ    REFOK               YES - BRANCH\n         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?\n         BNE   ERRRDATE            NO - BRANCH TO ERROR (IGNORE)\nREFPACK  PACK  DOUBLE(8),0(2,R1)   PACK YY\n         CVB   R14,DOUBLE          GET BINARY YY\n         SLL   R14,16              00YY0000\n         PACK  DOUBLE(8),2(3,R1)   PACK DDD\n         CVB   R15,DOUBLE          GET BINARY DDD\n         OR    R15,R14             00YY0DDD\nREFOK    ST    R15,NEWREF          SAVE NEW REFERENCED DATE\n         MVI   NEWREFSW,C'C'       SET SWITCH ON\n         B     REFDTEX\nRTODAY   EQU   *\n         TIME  BIN\n         ST    R1,DOUBLE           STORE 00YYDDDC\n         LA    R1,DATE5            POINT TO FAKE OPERAND\n         UNPK  0(5,R1),DOUBLE+1(3) YYDDD\n         OI    4(R1),C'0'          FIX SIGN BITS\n         B     REFPACK             JUMP BACK IN WITH FAKE OPERAND\nREFDTEX  EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        PROCESS THE DSNAME PARAMETER                      *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,DSN\n         L     R8,0(,R1)           R8  -> DSNAME\n         LH    R7,4(,R1)           R7  =  LENGTH\n         LTR   R7,R7               IS LENGTH ZERO?\n         BZ    ERRDSN              YES, WAS (MEMBER) ONLY\n         LR    R6,R7\n         MVI   DSNAME,C' '\n         MVC   DSNAME+1(43),DSNAME\n         SLR   R14,R14\n         AIF   (&MVS).SKIP4        PREFIX DSNAME WITH USERID\n         TM    6(R1),X'40'         IS DSN QUOTED?\n         BO    DSNQUOTE\n         SPACE\n************************************************************\n*                                                          *\n*        GET THE USERID AND PREFIX THE DSNAME              *\n*                                                          *\n************************************************************\n         SPACE\n         L     R15,CPPLPSCB\n         USING PSCB,R15\n         IC    R14,PSCBUSRL        LENGTH OF PREFIX\n         LTR   R14,R14             NOPREFIX\n         BZ    DSNQUOTE            SAME AS QUOTED\n         LA    R6,1(R14,R6)        R6 = TOTAL LEN\n         MVC   DSNAME(7),PSCBUSER\n         DROP  R15                 UPT\n         LA    R14,DSNAME(R14)\n         MVI   0(R14),C'.'         ADD PERIOD\n         LA    R14,1(,R14)         PERIOD LENGTH\n         B     *+8\n.SKIP4   ANOP\nDSNQUOTE LA    R14,DSNAME(R14)\n         BCTR  R7,0\n         B     *+10\n         MVC   0(0,R14),0(R8)\n         EX    R7,*-6\n         STH   R6,DSNAMEL\n         EJECT\n************************************************************\n*                                                          *\n*        PROCESS THE VOLUME PARAMETER                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   WRKUNIT,=CL8' '\n         MVC   WRKVOL(6),=CL8' '\n         TM    VOL+6,X'80'         VOLUME SPECIFIED?\n         BZ    NOVOL               NO - BRANCH\n         L     R14,VOL             R14 --> VOLUME\n         LH    R15,VOL+4           R15  =  LENGTH\n         BCTR  R15,0\n         B     *+10\n         MVC   WRKVOL(0),0(R14)\n         EX    R15,*-6\n         SPACE\n************************************************************\n*                                                          *\n*        IF VOLUME SPECIFIED, CHECK FOR UNIT PARAMETER     *\n*                                                          *\n************************************************************\n         SPACE\n         TM    UNIT+6,X'80'        UNIT SPECIFIED?\n         BZ    NOUNIT              NO - BRANCH\n         L     R14,UNIT            POINT TO UNIT NAME\n         LH    R15,UNIT+4          LENGTH OF UNIT NAME\n         BCTR  R15,0\n         B     *+10\n         MVC   WRKUNIT(0),0(R14)\n         EX    R15,*-6\nNOUNIT   EQU   *\nNOVOL    EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        CALL DYNAMIC ALLOCATION                           *\n*                                                          *\n************************************************************\n         SPACE\nDYNALLOC EQU   *\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R0,MYDAPB\n         ST    R0,DAPLDAPB\n         SPACE\n         XC    MYECB,MYECB\n         L     R15,DAPLDAPB\n         USING DAPB08,R15\n         XC    0(84,R15),0(R15)\n         MVI   DA08CD+1,X'08'\n         LA    R14,DA08DDN\n         MVI   0(R14),X'40'\n         MVC   1(23,R14),0(R14)  DD,UNIT,VOL\n         MVC   DA08SER(6),WRKVOL\n         MVC   DA08UNIT(8),WRKUNIT\n         MVC   DA08MNM(16),0(14)\n         MVC   DA08ALN(8),0(R14)\n         LA    R0,DSNAMEL\n         ST    R0,DA08PDSN\n         MVI   DA08DSP1,DA08OLD\n         CLI   SHRKW+1,0           'SHR' SPECIFIED ?\n         BE    *+8                 BRANCH IF NOT\n         MVI   DA08DSP1,DA08SHR    'SHR' SPECIFIED\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         BAL   R14,CALLDAIR\n         SPACE\n         LTR   R15,R15\n         BNZ   DAIRERR\n         OI    STATUS,STATA        INDICATE ALLOCATED\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP THE DCB                                    *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   DCB(DCBLEN),DCBMODEL\n         LA    R15,MYDAPB\n         LA    R3,DCB\n         USING IHADCB,R3\n         MVC   DCBDDNAM(8),DA08DDN\n         LA    R15,JFCB\n         ST    R15,EXLSTD\n         MVI   EXLSTD,X'87'\n         LA    R15,EXLSTD\n         IC    R14,DCBEXLST\n         ST    R15,DCBEXLST        SET DCB EXLST=EXLSTD\n         STC   R14,DCBEXLST\n         SPACE\n************************************************************\n*                                                          *\n*        READ THE JFCB                                     *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   RDJFCBD,RDJFCB\n         RDJFCB ((R3)),MF=(E,RDJFCBD)\n         SPACE\n************************************************************\n*                                                          *\n*        EXTERNAL SECURITY MANAGER INTERFACE               *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R8,JFCB             ADDRESS JFCB\n         USING INFMJFCB,R8         REFERENCE JFCB\n         MVC   AUTHMAC(AUTHLEN),AUTHTEMP  RACROUTE TEMPLATE\n         RACROUTE REQUEST=AUTH,         PERFORM AUTHORIZATION CHECKING X\n               ATTR=ALTER,                   READ/UPDATE/CONTROL/ALTER X\n               ENTITY=DSNAME,                             DATASET NAME X\n               VOLSER=JFCBVOLS,                          VOLUME SERIAL X\n               WORKA=RACFWORK,                       512 BYTE WORKAREA X\n               MF=(E,AUTHMAC)\n         LTR   R15,R15             ALLOWED ?\n         BNZ   ESMERR              . NO\n         DROP  R8                  DEREFERENCE JFCB\n         SPACE\n************************************************************\n*                                                          *\n*        DEFER ATTENTION INTERRUPTS                        *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   STAXD(20),STAXDEF\n         STAX  DEFER=YES,MF=(E,STAXD)\n         SPACE\n************************************************************\n*                                                          *\n*        INSTALLATION-DEPENDENT CODE                       *\n*        TO GET AROUND ABEND 913-10                        *\n*                                                          *\n************************************************************\n         SPACE\n         L     1,16\n         L     1,0(,1)\n         L     1,4(,1)             R1 --> TCB\n         L     4,180(,1)           R4 --> JSCB\n         TM    236(4),X'01'        ARE WE AUTHORIZED\n         BO    KEY0X               YES, BYPASS AUTHSET\n         LA    0,0                 R0 = FUNCTION CODE FOR USER SVC\n         LA    15,KEY0A            R15 POINTS TO ROUTINE TO BE CALLED\n         NOPR  0                   *** REPLACE WITH USER SVC ***\n         B     KEY0B               BRANCH AROUND ROUTINE\nKEY0A    OI    236(4),X'01'        SET ON JSCBAUTH\n         BR    14                  RETURN TO SVC\nKEY0B    OI    STATUS,STATM        INDICATE AUTH HAS BEEN CHANGED\nKEY0X    EQU   *\n         SPACE\n         AIF   (NOT &MVS).SKIP5    TESTAUTH\n         TESTAUTH FCTN=1\n         LTR   R15,R15\n         BNZ   AUTHERR\n.SKIP5   ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        OPEN THE VTOC                                     *\n*                                                          *\n************************************************************\n         SPACE\n         DEVTYPE DCBDDNAM,DEVAREA,DEVTAB\n         SPACE\n         LH    R1,DEVAREA+10       TRACKS PER CYL\n         MH    R1,=H'5'            ASSUME 5 CYLINDER VTOC\n         STH   R1,TRACKS\n         SPACE\n         GETPOOL (R3),2,96\n         SPACE\n         OI    STATUS,STATG        INDICATE GETPOOL ISSUED\n         MVI   JFCB,X'04'\n         MVC   JFCB+1(43),JFCB\n         OI    JFCB+52,X'08'       DO NOT WRITE BACK      29MAR78\n         MVC   OPENJD,OPENJ\n         OPEN  ((R3),UPDAT),TYPE=J,MF=(E,OPENJD)\n         TM    DCBOFLGS,X'10'\n         BZ    OPENERR\n         OI    STATUS,STATO        INDICATE OPENED\n         EJECT\n************************************************************\n*                                                          *\n*        ENQ ON THE VTOC                                   *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,DCBDEBAD         POINT TO DEB\n         L     R1,32(,R1)          POINT TO UCB\n         ST    R1,UCBAD            STORE UCB ADDRESS\n         MVC   RNAME,28(R1)        MOVE VOLUME TO RNAME\n         MVC   QNAME,=CL8'SYSVTOC'\n         MVC   RW(RL),R            MOVE MF=L TO WORK AREA\n         SPACE\n         RESERVE (QNAME,RNAME,E,6,SYSTEMS),RET=HAVE,UCB=UCBAD,MF=(E,RW)\n         SPACE\n         OI    STATUS,STATQ        INDICATE ENQ ACTIVE\n         SPACE\n************************************************************\n*                                                          *\n*        READ THE FORMAT 1 DSCB USING DSNAME AS KEY        *\n*                                                          *\n************************************************************\n         SPACE\n         GETBUF (R3),(R4)\n         SPACE\n         LH    R1,TRACKS\n         STH   R1,DCBLIMCT+1\n         MVC   READDECB(READL),DECBMODR\n         MVC   TTR(3),=X'000001'\n         SPACE\n         READ  READDECB,DKF,(R3),(R4),'S',DSNAME,TTR,MF=E\n         SPACE\n         MVI   SYNADSWT,0\n         SPACE\n         CHECK READDECB\n         SPACE\n         CLI   SYNADSWT,0          SYNAD EXIT TAKEN?\n         BNE   READERR             YES - BRANCH\n         L     R4,READDECB+12      R4 --> AREA ADDRESS\n         LR    R5,R4\n         SH    R5,=H'44'           R5 --> IMAGINARY KEY-DATA AREA\n         USING FORMAT1,R5\n         SPACE\n************************************************************\n*                                                          *\n*        VERIFY                                            *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   VR,0                REP SPECIFIED?\n         BE    VRX                 NO - BRANCH\n         LR    R1,R5\n         AH    R1,OFFSET           R1 --> LOCATION OF VICTIM\n         SR    R14,R14\n         IC    R14,VERDATA\n         B     *+10\n         CLC   0(0,R1),VERDATA+1\n         EX    R14,*-6             COMPARE VICTIM TO VER DATA\n         BNE   VERREJ              NOT EQUAL - REJECT\n         SPACE\n         CLI   VR,C'R'             WAS REP DATA SPECIFIED?\n         BE    REPROUT             YES - BRANCH\n         LA    R1,=C'VERIFIED'\n         LA    R0,8\n         BAL   R14,PUTMSG\n         SPACE\n         B     VRX\n         SPACE\n************************************************************\n*                                                          *\n*        REPLACE                                           *\n*                                                          *\n************************************************************\n         SPACE\nREPROUT  IC    R14,REPDATA\n         B     *+10\n         MVC   0(0,R1),REPDATA+1\n         EX    R14,*-6              MOVE REP DATA TO RECORD\n         MVI   CHANGED,C'C'         SET CHANGED SWITCH\nVRX      EQU   *\n         SPACE\n         CLI   NEWRECSW,0          RECFM SPECIFIED?\n         BE    NURECX              NO - BRANCH\n         CLC   DS1RECFM,NEWRECFM   ALREADY THAT\n         BE    NURECX              YES - BRANCH\n         MVC   DS1RECFM,NEWRECFM   MOVE IN NEW RECFM\n         MVI   CHANGED,C'C'        SET SWITCH ON\nNURECX   EQU   *\n         SPACE\n         CLI   NEWDSOSW,0          DSORG SPECIFIED?\n         BE    NUDSOX              NO - BRANCH\n         CLC   DS1DSORG,NEWDSORG   ALREADY THAT\n         BE    NUDSOX              YES, BRANCH\n         MVC   DS1DSORG,NEWDSORG   MOVE IN NEW DSORG\n         MVI   CHANGED,C'C'        SET SWITCH ON\nNUDSOX   EQU   *\n         SPACE\n         CLI   NEWBLKSW,0          BLKSIZE SPECIFIED?\n         BE    NUBLKX              NO - BRANCH\n         CLC   DS1BLKL,NEWBLK      ALREADY THAT\n         BE    NUBLKX              YES - BRANCH\n         MVC   DS1BLKL,NEWBLK      MOVE IN NEW BLKSIZE\n         MVI   CHANGED,C'C'        SET SWITCH ON\nNUBLKX   EQU   *\n         SPACE\n         CLI   NEWLRESW,0          LRECL SPECIFIED?\n         BE    NULREX              NO - BRANCH\n         CLC   DS1LRECL,NEWLRE     ALREADY THAT\n         BE    NULREX              YES - BRANCH\n         MVC   DS1LRECL,NEWLRE     MOVE IN NEW LRECL\n         MVI   CHANGED,C'C'        SET SWITCH ON\nNULREX   EQU   *\n         SPACE\n         CLI   NEWPROSW,0          PROTECTION MODIFIED?\n         BE    NUPROX              NO - BRANCH\n         MVC   NEWPROSV,DS1DSIND   HOLD A COPY\n         NC    DS1DSIND,NEWPRO0    SET REQUIRED BITS OFF\n         OC    DS1DSIND,NEWPRO1    SET REQUIRED BITS ON\n         CLC   NEWPROSV,DS1DSIND   ANY CHANGE?\n         BE    *+8                 NO - LEAVE SWITCH OFF\n         MVI   CHANGED,C'C'        YES - SET SWITCH ON\nNUPROX   EQU   *\n         CLI   NEWALLSW,0          SEC. ALLOCATION ALTERED?\n         BE    NUALLX              NO - BRANCH\n         MVC   NEWPROSV,DS1SCALO   HOLD A COPY\n         NC    DS1SCALO(1),NEWALL0 SET REQUIRED BITS OFF\n         OC    DS1SCALO(1),NEWALL1 SET REQUIRED BITS ON\n         CLC   NEWPROSV,DS1SCALO   ANY CHANGE?\n         BE    *+8                 NO - LEAVE SWITCH OFF\n         MVI   CHANGED,C'C'        YES - SET SWITCH ON\nNUALLX   EQU   *\n         CLI   NEWSPASW,0          SPACE SPECIFIED?\n         BE    NUSPAX              NO - BRANCH\n         MVC   DS1SCALO+1(3),NEWSPA+1 MOVE IN NEW SPACE\n         MVI   CHANGED,C'C'        SET SWITCH ON\nNUSPAX   EQU   *\n         SPACE\n         CLI   NEWCRESW,0          CREATE SPECIFIED?\n         BE    NUCREX              NO - BRANCH\n         CLC   DS1CREDT,NEWCRE+1   IS IT ALREADY THAT VALUE\n         BE    NUCREX              YES, BRANCH\n         MVC   DS1CREDT,NEWCRE+1   MOVE IN NEW CREATION DATE\n         MVI   CHANGED,C'C'        SET SWITCH ON\nNUCREX   EQU   *\n         SPACE\n         MVI   EXPSW,X'FF'\n         CLI   NEWEXPSW,0          EXPDT SPECIFIED?\n         BE    NUEXPX              NO - BRANCH\n         CLC   DS1EXPDT,NEWEXP+1   IS IT ALREADY THAT VALUE\n         BE    NUEXPX              YES, BRANCH\n         MVC   DS1EXPDT,NEWEXP+1   MOVE IN NEW EXPIRATION DATE\n         MVI   CHANGED,C'C'        SET SWITCH ON\n         MVI   EXPSW,1             INDICATE NEW EXPDT\n         CLC   NEWEXP+1(3),=AL3(0)\n         BNE   *+8\n         MVI   EXPSW,0             INDICATE NEW EXPDT ZERO\nNUEXPX   EQU   *\n         SPACE\n         CLI   NEWREFSW,0          REFDT SPECIFIED?\n         BE    NUREFX              NO - BRANCH\n         CLC   DS1REFD,NEWREF+1    IS IT ALREADY THAT VALUE\n         BE    NUREFX              YES, BRANCH\n         MVC   DS1REFD,NEWREF+1    MOVE IN NEW REFERENCE DATE\n         MVI   CHANGED,C'C'        SET SWITCH ON\nNUREFX   EQU   *\n         SPACE\n         DROP  R5                  FORMAT1\n         CLI   CHANGED,0           ANYTHING CHANGED?\n         BNE   REWRITE             YES, GO REWRITE THE DSCB\n         LA    R1,SAMEMSG\n         LA    R0,L'SAMEMSG\n         BAL   R14,PUTMSG\n         B     EXIT0\nSAMEMSG  DC    C'NOTHING CHANGED'\n         SPACE\n************************************************************\n*                                                          *\n*        REWRITE THE FORMAT 1 DSCB                         *\n*                                                          *\n************************************************************\n         SPACE\nREWRITE  MVC   WRITDECB(WRITEL),DECBMODW\n         WRITE WRITDECB,DK,(R3),(R4),,DSNAME,TTR,MF=E\n         SPACE\n         MVI   SYNADSWT,0\n         SPACE\n         CHECK WRITDECB\n         SPACE\n         CLI   SYNADSWT,0          SYNAD EXIT TAKEN?\n         BNE   WRITERR             YES - BRANCH\nTEMPJUMP EQU   *\n         LA    R1,=C'CHANGED'\n         LA    R0,7\n         BAL   R14,PUTMSG\n         SPACE\n************************************************************\n*                                                          *\n*         WRITE A MESSAGE ON THE CONSOLE LOG               *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   LOGKW+1,2           NOLOG\n         BE    NOLOG\n         CLI   EXPSW,X'FF'         WAS EXPDT CHANGED\n         BE    NOLOG               NO, BRANCH\n         MVC   MSGW(LOGL),LOG\n         L     R1,16\n         L     R1,0(,R1)\n         L     R1,4(,R1)\n         L     R1,12(,R1)          TIOT\n         LA    R15,MSGW+21\n         MVC   0(8,R15),0(R1)      INSERT JOBNAME/USERID IN MESSAGE\n         LA    R15,7(,R15)         POINT TO LAST BYTE OF JOBNAME\n         CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,*-8\n         MVC   2(44,R15),DSNAME\n         LA    R15,45(,R15)        POINT TO LAST BYTE OF DSNAME\n         CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,*-8\n         MVC   2(2,R15),=C'ON'\n         AH    R1,40(,R3)          DCBTIOT\n         L     R1,16(,R1)          TIOEFSRT-1, PTR TO UCB\n         MVC   5(6,R15),28(R1)     UCBVOLI\n         MVC   12(5,R15),EXPCH     NEW EXPDT\n         WTO   MF=(E,MSGW)\nNOLOG    B     EXIT0\n         EJECT\n************************************************************\n*                                                          *\n*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO  *\n*        IF AN I/O ERROR OCCURS.                           *\n*                                                          *\n************************************************************\n         SPACE\nSYNAD    SYNADAF ACSMETH=BDAM\n         MVC   SYNADMSG(78),50(R1)\n         MVI   SYNADSWT,X'FF'      INDICATE EXIT TAKEN\n         SYNADRLS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CALL IKJDAIR                                      *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR EQU   *\n         AIF   (NOT &MVS).SKIP6\n         L     R15,16              CVTPTR\n         TM    X'02DC'(R15),X'80'  IF HI ORDER BIT NOT ON\n         BNO   CALLDLNK               THEN DO LINK, NOT CALL\n         L     R15,X'02DC'(,R15)   CVTDAIR\n         BR    R15                 CALL IKJDAIR (R14 IS SET)\nCALLDLNK EQU   *\n.SKIP6   ANOP\n         ST    R14,CALLDR14\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\n         L     R14,CALLDR14\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        PARSE VALIDITY CHECK ROUTINE FOR 'REP' KEYWORD    *\n*                                                          *\n************************************************************\n         SPACE\nREPVALCK EQU   *\n         USING *,R6\n         STM   R14,R12,12(R13)\n         LR    R6,R15\n         L     R7,0(,R1)           REG 7 --> PDE\n         L     R4,0(,R7)           REG 4 --> CHARACTER STRING\n         LH    R0,4(,R7)           REG 0  =  LENGTH\n         LA    R15,4               RETURN 4 IF CHECK FAILS\n         TM    5(R7),X'01'         LENGTH AN EVEN NUMBER?\n         BO    VALEXIT             NO - EXIT WITH RC=4\nVALLOOP  CLI   0(R4),C'0'          NUMERIC?\n         BNL   VALINCR             YES - THIS CHAR OK\n         CLI   0(R4),C'F'          IN RANGE A THRU F?\n         BH    VALEXIT             NO - EXIT WITH RC=4\nVALINCR  LA    R4,1(,R4)           POINT TO NEXT CHAR\n         BCT   R0,VALLOOP\n         SR    R15,R15             SET RC=0\nVALEXIT  L     R14,12(,R13)\n         LM    0,12,20(R13)\n         BR    R14\n         DROP  R6\n         EJECT\n************************************************************\n*                                                          *\n*        THIS ROUTINE CONVERTS EXTERNAL HEX TO BINARY HEX  *\n*                                                          *\n************************************************************\n         SPACE\nPACK     ST    R14,PACK14\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACK14\n         BR    R14                 EXIT\n         SPACE\n         SPACE\n************************************************************\n*                                                          *\n*  UNPACK - CONVERT A FIELD TO HEXADECIMAL.                *\n*  REG 1 --> INPUT   REG 15 --> OUTPUT                     *\n*  REG 0  =  INPUT LENGTH  (OUTPUT IS TWICE PLUS 1 BLANK)  *\n*  REG 14 --> RETURN ADDRESS ( BAL   R14,UNPACK )          *\n*                                                          *\n************************************************************\n         SPACE\nUNPACK   UNPK  0(3,R15),0(2,R1)    UNPACK\n         TR    0(2,R15),UNPACKT-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,UNPACK           DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nUNPACKT  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         EJECT\n************************************************************\n*                                                          *\n*        ERROR MESSAGES                                    *\n*                                                          *\n************************************************************\n         SPACE\nINVREP   LA    R1,INVREPM\n         LA    R0,L'INVREPM\n         B     ERRMSG\nINVREPM  DC    C'MISSING OR INVALID REP PARAMETER'\n         SPACE\nREADERR  EQU   *\nWRITERR  LA    R1,SYNADMSG\n         LA    R0,78\n         B     ERRMSG\n         SPACE\nREPDERR  LA    R1,REPDERRM\n         LA    R0,L'REPDERRM\n         B     ERRMSG\nREPDERRM DC    CL44'INVALID REP - REP LENGTH EXCEEDS VER LENGTH '\n         SPACE\nREPOERR  LA    R1,REPOERRM\n         LA    R0,40\n         B     ERRMSG\nREPOERRM DC    CL40'REP OFFSET INVALID - MUST BE AT LEAST 2D'\n         SPACE\nREPVERR  LA    R1,REPVERRM\n         LA    R0,L'REPVERRM\n         B     ERRMSG\nREPVERRM DC    CL32'REP GOES BEYOND END OF RECORD   '\n         SPACE\nVERREJ   LA    R1,VERREJM\n         LA    R0,L'VERREJM\n         B     ERRMSG\nVERREJM  DC    CL14'VERIFY REJECT '\n         SPACE\nLOCERR   LA    R1,LOCERRM\n         LA    R0,L'LOCERRM\n         B     ERRMSG\nLOCERRM  DC    CL22'DATASET NOT IN CATALOG'\n         SPACE\nDAIRERR  BAL   R14,DAIRFAIL\n         B     EXIT12\n         SPACE\nAUTHERR  LA    R1,AUTHERRM\n         LA    R0,L'AUTHERRM\n         B     ERRMSG\nAUTHERRM DC    C'ENVIRONMENT IS NOT APF AUTHORIZED'\n         SPACE\nESMERR   LA    R1,ESMERRM\n         LA    R0,L'ESMERRM\n         B     ERRMSG\nESMERRM  DC    C'ACCESS DENIED BY EXTERNAL SECURITY MANAGER (ESM)'\n         SPACE\nOPENERR  LA    R1,OPENERRM\n         LA    R0,L'OPENERRM\n         B     ERRMSG\nOPENERRM DC    CL12'OPEN FAILED '\n         SPACE\nPARSERR  LA    R1,PARSERRM\n         LA    R0,L'PARSERRM\n         B     ERRMSG\nPARSERRM DC    C'PARSE FAILED'\n         SPACE\nERRCDATE LA    R1,CDATERRM\n         LA    R0,L'CDATERRM\n         B     ERRMSG\nCDATERRM DC    C'INVALID CREATE DATE'\n         SPACE\nERRXDATE LA    R1,XDATERRM\n         LA    R0,L'XDATERRM\n         B     ERRMSG\nXDATERRM DC    C'INVALID EXPIRATION DATE'\n         SPACE\nERRRDATE LA    R1,RDATERRM\n         LA    R0,L'RDATERRM\n         B     ERRMSG\nRDATERRM DC    C'INVALID REFERENCE DATE'\n         SPACE\nERRDSN   LA    R1,MSGDSN\n         LA    R0,L'MSGDSN\nERRMSG   BAL   R14,PUTMSG\n         B     EXIT12\nMSGDSN   DC    C'DATA SET NAME MUST NOT CONTAIN MEMBER NAME'\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE\n         PRINT GEN\n         EJECT\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         LA    R1,MYDFPARM\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,4(,R1)          DFRCP\n         LA    R15,MYDAPL\n         ST    R15,0(,R1)          DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,8(,R1)          DFJEFF02\n         LA    R15,1               DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,12(,R1)         DFIDP\n         ST    R2,16(,R1)          DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n         EJECT\n************************************************************\n*                                                          *\n*        CLOSE THE VTOC                                    *\n*                                                          *\n************************************************************\n         SPACE\nEXIT12   LA    R15,12\n         B     EXIT\nEXIT0    SR    R15,R15             RETURN CODE ZERO\nEXIT     ST    R15,RC\n         TM    STATUS,STATQ        IS ENQ ACTIVE\n         BZ    EXITNODQ            NO, SKIP DEQ\n         MVC   DW(DL),D            MOVE MF=L TO WORK AREA\n         SPACE\n         DEQ   (QNAME,RNAME,6,SYSTEMS),RET=HAVE,MF=(E,DW)\n         SPACE\n         NI    STATUS,255-STATQ    DEQ\nEXITNODQ EQU   *\n         TM    STATUS,STATO        IS DCB OPEN\n         BZ    EXITNOCL            NO, SKIP CLOSE\n         FREEBUF (R3),(R4)\n         SPACE\n         MVC   CLOSED,CLOSE\n         CLOSE ((R3)),MF=(E,CLOSED)\n         NI    STATUS,255-STATO    CLOSED\nEXITNOCL EQU   *\n         SPACE\n         TM    STATUS,STATG        WAS GETPOOL ISSUED\n         BZ    EXITNOFP            NO, SKIP FREEPOOL\n         FREEPOOL (R3)\n         NI    STATUS,255-STATG    CLOSED\nEXITNOFP EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        INSTALLATION-DEPENDENT CODE                       *\n*        TO UNDO THE EARLIER INSTALLATION-DEPENDENT CODE   *\n*                                                          *\n************************************************************\n         SPACE\n         L     1,16                CVTPTR\n         L     1,0(,1)             TCB WORDS\n         L     1,4(,1)             CURRENT TCB\n         L     4,180(,1)           JSCB\n         TM    STATUS,STATM        WAS AUTH CHANGED\n         BZ    EXITNOMS            NO, BRANCH\n         LA    0,0                 R0 = FUNCTION CODE FOR USER SVC\n         LA    15,KEYUA            R15 POINTS TO ROUTINE TO BE CALLED\n         NOPR  0                   *** REPLACE WITH USER SVC ***\n         B     KEYUB               BRANCH AROUND THE ROUTINE\nKEYUA    NI    236(4),X'FE'        SET OFF JSCBAUTH\n         BR    14                  RETURN TO SVC\nKEYUB    NI    STATUS,255-STATM\nEXITNOMS EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        UNALLOCATE VIA DYNAMIC ALLOCATION                 *\n*                                                          *\n************************************************************\n         SPACE\n         TM    STATUS,STATA        WAS ALLOCATE DONE\n         BZ    EXITNOFR            NO, BYPASS FREE\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         L     14,DAPLECB\n         XC    0(4,14),0(14)\n         L     15,DAPLDAPB\n         DROP  R1\n         USING DAPB18,15\n         XC    0(40,15),0(15)\n         MVI   DA18CD+1,X'18'\n         MVC   DA18MNM,=CL8' '\n         MVI   DA18DPS2,DA18KEEP\n         MVI   DA18CTL,X'00'\n         MVC   DA18SCLS(2),=CL8' '\n         MVC   DA18JBNM(8),=CL8' '\n         MVC   DA18DDN(8),DCBDDNAM\n         SPACE\n         BAL   R14,CALLDAIR\n         NI    STATUS,255-STATA\nEXITNOFR EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        FINAL EXIT FROM PROGRAM                           *\n*                                                          *\n************************************************************\n         SPACE\n         IKJRLSA MYANS\n         CLI   RC+3,0              IS RC ZERO?\n         BE    STACKDX             YES, BRANCH\n         MVC   MYSTPB(STACKDL),STACKD\n         SPACE\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         SPACE\n         TCLEARQ\nSTACKDX  EQU   *\n         SPACE\n         L     R15,RC\n         LR    R1,R13\n         L     R0,SIZE\n         L     R13,4(,R13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         RETURN (14,12),RC=(15)\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\n*              THE BYTES IN THE FOLLOWING TABLE\n*              MUST BE IN THE SAME ORDER AS THE\n*              'IKJNAME' ENTRIES IN THE PARSE\n*              PCL PARAMETERS.\nRECFMTAB DC    X'00'              NO RECFM\n         DC    X'80'               F\n         DC    X'88'               FS\n         DC    X'84'               FA\n         DC    X'82'               FM\n         DC    X'90'               FB\n         DC    X'98'               FBS\n         DC    X'94'               FBA\n         DC    X'92'               FBM\n         DC    X'40'               V\n         DC    X'48'               VS\n         DC    X'44'               VA\n         DC    X'42'               VM\n         DC    X'50'               VB\n         DC    X'58'               VBS\n         DC    X'54'               VBA\n         DC    X'52'               VBM\n         DC    X'C0'               U\n         DC    X'C4'               UA\n         DC    X'C2'               UM\n         DC    X'E0'               UT\nDSORGTAB DC    X'00'\n         DC    X'40'               PS\n         DC    X'41'               PSU\n         DC    X'02'               PO\n         DC    X'03'               POU\n         DC    X'20'               DA\n         DC    X'21'               DAU\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nENDOFREC DC    0H'0',AL2(44+96-1) OFFSET TO LAST BYTE OF RECORD\n         PRINT GEN                 LIST DCB SO LIMCT CAN BE ZAPPED\n         SPACE\nDCBMODEL DCB   DDNAME=DYNAM,DSORG=DA,MACRF=(RKC,WKC),                  X\n               BUFL=96,OPTCD=EF,LIMCT=57,                              X\n               RECFM=F,BLKSIZE=96,KEYLEN=44,                           X\n               EXLST=0,SYNAD=SYNAD\nDCBLEN   EQU   *-DCBMODEL\n         PRINT GEN\n         SPACE\nRDJFCB   RDJFCB 0,MF=L\n         SPACE\nOPENJ    OPEN  0,TYPE=J,MF=L\n         SPACE\nCLOSE    CLOSE 0,MF=L\n         SPACE\nREAD     READ  DECBMODR,DKF,0,'S','S',0,0,MF=L\nREADL    EQU   *-DECBMODR\n         SPACE\nWRITE    WRITE  DECBMODW,DK,0,'S','S',0,0,MF=L\nWRITEL   EQU   *-DECBMODW\n         SPACE\nSTAXDEF  STAX  DEFER=YES,MF=L\n         SPACE\nSTAXDEN  STAX  DEFER=NO,MF=L\n         SPACE\nR        RESERVE (77,88,E,6,SYSTEMS),RET=HAVE,UCB=99,MF=L\nRL       EQU   *-R\n         SPACE\nD        DEQ   (77,88,6,SYSTEMS),RET=HAVE,MF=L\nDL       EQU   *-D\n         SPACE\nLOG      WTO   'CMI000I CDSCB BY                                       +\n                                                 ',ROUTCDE=(2),MF=L\nLOGL     EQU   *-LOG\n*        WTO   'CMI000I CDSCB BY UUUUUUUU TO DSNAME78901234567890123456\n*              789012345678901234 ON VVVVVV EEEEE',ROUTCDE=(2),MF=L\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\nAUTHTEMP RACROUTE REQUEST=AUTH,CLASS='DATASET',MF=L\nAUTHLEN  EQU   *-AUTHTEMP          RACROUTE MACRO TEMPLATE LENGTH\n         SPACE\nPCLADDR  DC    0D'0'               END OF CSECT, BEGIN PARSE PCL CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PCL CSECT AND PDL DSECT                     *\n*                                                          *\n************************************************************\n         PRINT NOGEN\n         SPACE\nCDSCBPCL IKJPARM\n         AIF   (NOT &MVS).SKIP7\nDSN      IKJPOSIT DSNAME,USID,PROMPT='DATASET NAME'\n.SKIP7   AIF   (&MVS).SKIP8\nDSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'\n.SKIP8   ANOP\nSHRKW    IKJKEYWD\n         IKJNAME 'SHR'\nVOLKW    IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VOLSUB\nUNIKW    IKJKEYWD\n         IKJNAME 'UNIT',SUBFLD=UNISUB\nZAPKW    IKJKEYWD\n         IKJNAME 'ZAP',SUBFLD=ZAPSUB\nRECKW    IKJKEYWD\n         IKJNAME 'RECFM',SUBFLD=RECSF\nLREKW    IKJKEYWD\n         IKJNAME 'LRECL',SUBFLD=LRESF\nBLKKW    IKJKEYWD\n         IKJNAME 'BLKSIZE',SUBFLD=BLKSF\nDSOKW    IKJKEYWD\n         IKJNAME 'DSORG',SUBFLD=DSOSF\nPROKW    IKJKEYWD\n         IKJNAME 'PW'\n         IKJNAME 'PWREAD'\n         IKJNAME 'PWWRITE'\n         IKJNAME 'NOPW'\n         IKJNAME 'RACF'\n         IKJNAME 'NORACF'\nALLKW    IKJKEYWD\n         IKJNAME 'ALLOC',SUBFLD=ALLSF\nSPAKW    IKJKEYWD\n         IKJNAME 'SPACE',SUBFLD=SPASF\nCREATEKW IKJKEYWD\n         IKJNAME 'CREATE',SUBFLD=CRESF\nEXPDTEKW IKJKEYWD\n         IKJNAME 'EXPDT',SUBFLD=EXPSF\nREFDTEKW IKJKEYWD\n         IKJNAME 'REFDT',SUBFLD=REFSF\nLOGKW    IKJKEYWD\n         IKJNAME 'LOG'\n         IKJNAME 'NOLOG'\n************************************************************\n*                                                          *\n*        SUBFIELDS                                         *\n*                                                          *\n************************************************************\nVOLSUB   IKJSUBF\nVOL      IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    X\n               PROMPT='VOLUME SERIAL'\nUNISUB   IKJSUBF\nUNIT     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +\n               PROMPT='UNIT NAME'\nZAPSUB   IKJSUBF\nREP      IKJIDENT 'ZAP PARAMETER',LIST,                                +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=12,               +\n               PROMPT='ZAP IN FORMAT OFFSET,VERDATA,REPDATA',          +\n               VALIDCK=REPVALCK\nRECSF    IKJSUBF\nRECFM    IKJKEYWD\n         IKJNAME 'F'\n         IKJNAME 'FS'\n         IKJNAME 'FA'\n         IKJNAME 'FM'\n         IKJNAME 'FB'\n         IKJNAME 'FBS'\n         IKJNAME 'FBA'\n         IKJNAME 'FBM'\n         IKJNAME 'V'\n         IKJNAME 'VS'\n         IKJNAME 'VA'\n         IKJNAME 'VM'\n         IKJNAME 'VB'\n         IKJNAME 'VBS'\n         IKJNAME 'VBA'\n         IKJNAME 'VBM'\n         IKJNAME 'U'\n         IKJNAME 'UA'\n         IKJNAME 'UM'\n         IKJNAME 'UT'\nLRESF    IKJSUBF\nLRE      IKJIDENT 'LRECL',                                             +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +\n               PROMPT='LOGICAL RECORD LENGTH'\nBLKSF    IKJSUBF\nBLK      IKJIDENT 'BLOCK SIZE',                                        +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +\n               PROMPT='BLOCK SIZE'\nDSOSF    IKJSUBF\nDSORG    IKJKEYWD\n         IKJNAME 'PS'\n         IKJNAME 'PSU'\n         IKJNAME 'PO'\n         IKJNAME 'POU'\n         IKJNAME 'DA'\n         IKJNAME 'DAU'\nALLSF    IKJSUBF\nALL      IKJKEYWD\n         IKJNAME 'NONE'\n         IKJNAME 'BLOCKS'\n         IKJNAME 'TRACKS'\n         IKJNAME 'CYLINDERS'\nSPASF    IKJSUBF\nSPA      IKJIDENT 'SECONDARY SPACE AMOUNT',                            +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=4,                  +\n               PROMPT='SECONDARY SPACE AMOUNT'\nCRESF    IKJSUBF\nCREATE   IKJIDENT 'CREATION DATE',ASTERISK,                            +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +\n               PROMPT='CREATION DATE'\nEXPSF    IKJSUBF\nEXPDTE   IKJIDENT 'EXPIRATION DATE',                                   +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +\n               PROMPT='EXPIRATION DATE'\nREFSF    IKJSUBF\nREFDTE   IKJIDENT 'REFERENCE DATE',ASTERISK,                           +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +\n               PROMPT='REFERENCE DATE'\n         IKJENDP\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         PRINT GEN\n         SPACE\n@DATA    DSECT\n         DS    18F\nSIZE     DS    F\nSTATUS   DS    F\nLINKAREA DS    2F\nSTATA    EQU   X'80'\nSTATM    EQU   X'40'\nSTATG    EQU   X'20'\nSTATO    EQU   X'10'\nSTATQ    EQU   X'08'\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nMYSTPB   DS    5F\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nCALLDR14 DS    F\nDSNAMEL  DS    H\nDSNAME   DS    CL44\nRW       DS    4F\nQNAME    DS    CL8\nRNAME    DS    CL6\nUCBAD    DS    F\nDW       DS    3F\nDEVAREA  DS    5F\nTRACKS   DS    H\nSYNADMSG DS    0CL78\nMSGW     DS    CL100\nSYNADSWT DS    C\nCHANGED  DS    C\nEXPSW    DS    C\nEXPCH    DS    CL5\nNEWPROSW DS    C\nNEWPRO0  DS    C\nNEWPRO1  DS    C\nNEWPROSV DS    C\nNEWBLKSW DS    C\nNEWLRESW DS    C\nNEWBLK   DS    H\nNEWLRE   DS    H\nNEWALLSW DS    C\nNEWALL0  DS    C\nNEWALL1  DS    C\nNEWSPASW DS    C\nNEWSPA   DS    F\nNEWCRESW DS    C\nNEWEXPSW DS    C\nNEWREFSW DS    C\nNEWCRE   DS    F\nNEWEXP   DS    F\nNEWREF   DS    F\nNEWRECSW DS    C\nNEWRECFM DS    C\nNEWDSOSW DS    CL2\nNEWDSORG DS    C\nTTR      DS    D\nOPEND    DS    F\nOPENJD   DS    F\nRDJFCBD  DS    F\nREADDECB DS    7F\nWRITDECB DS    7F\nCLOSED   DS    F\nDCB      DS    0D,XL104\nJFCB     DS    0D,XL176\nEXLSTD   DS    F\nWRKUNIT  DS    CL8\nDATE5    DS    0CL5\nWRKVOL   DS    CL6\nOFFSET   DS    H,CL3\nVERDATA  DS    CL14     LENGTH TIED TO MAXLNTH IN IKJPOSIT\nREPDATA  DS    CL14     1ST BYTE IS LENGTH, LAST BYTE USED BY 'PACK'\nVR       DS    C\nPACK14   DS    F\nEXTRACTD DS    3F\nEXTRACT  DS    2F\nSTAXD    DS    5F\nDOUBLE   DS    D\nRC       DS    F\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFREGS DS    F   USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\n         DS    0D                  DOUBLEWORD ALIGNMENT\nRACFWORK DS    CL512               RACF WORKAREA\n         DS    0D                  DOUBLEWORD ALIGNMENT\nAUTHMAC  EQU   *\n         ORG   *+AUTHLEN           RESERVE SPACE FOR RACROUTE MACRO\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nIHADCB   DSECT\n         DS    XL36\nDCBEXLST DS    F\nDCBDDNAM DS    XL8\nDCBDEBAD EQU   *-4,4\nDCBOFLGS DS    X\nDCBLIMCT EQU   IHADCB+81,3\n         SPACE\n         IKJCPPL\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJUPT\n         SPACE 2\n         IKJPSCB\n         SPACE 2\n         IKJPPL\n         SPACE 2\n         IKJDAPL\n         SPACE 2\n         IKJDAP08\n         SPACE 2\n         IKJDAP18\n         SPACE 2\n         IEFJFCBN                  JFCB\n         SPACE 2\nFORMAT1  DSECT\n         IECSDSL1 1                FORMAT 1 DSCB\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n//LINK    EXEC PGM=HEWL,PARM='MAP,LET,LIST,AC(1),RENT'\n//SYSLIN    DD DSN=&&OBJECT,DISP=(OLD,DELETE)\n//SYSLMOD   DD DISP=SHR,DSN=SYS1.BBC.LINKLIB(CDSCB) <=== DESTINATION\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDSCB$": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x972\\x0f\\x00\\x972\\x0f\\x01S\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-11-16T00:00:00", "modifydate": "1997-11-16T01:53:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(CDSCB)   JCL STRIPPED OFF\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n ENTRY   CDSCB\n NAME    CDSCB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDSCB#": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x971\\x8f\\x00\\x971\\x8f\\x024\\x006\\x006\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-11-14T00:00:00", "modifydate": "1997-11-14T02:34:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "ZT15"}, "text": ")F FUNCTION -\n  THE CDSCB (CHANGE DSCB) COMMAND MODIFIES A DATA SET'S\n  FORMAT-1 DSCB IN A VTOC.\n\n)X SYNTAX  -\n         CDSCB  'DSNAME'   EXPDT('YYDDD')  SHR  VOL(VOLUME) UNIT(UNIT)\n                           CREATE('YYDDD') REFDT('YYDDD')\n                           DSORG(XX) RECFM(XX) LRECL(XX) BLKSIZE(XX)\n                           ALLOC(TR/CYL/BL)  SPACE(SECONDARY-AMOUNT)\n                           PWR/PWW/NOP/RACF/NORACF\n                           ZAP(OFFSET VERDATA REPDATA)\n  REQUIRED - 'DSNAME'\n  DEFAULTS - NOTHING WILL HAPPEN IF NO CHANGES ARE SPECIFIED.\n  ALIAS    - NONE\n)O OPERANDS -\n  'DSNAME'  -  THE NAME OF THE DATA SET WHOSE FORMAT-1 DSCB\n             IS TO BE MODIFIED.\n))UNIT(UNIT) - FOR UNCATALOGED DATA SETS, THE UNIT TYPE OF THE\n             VOLUME WHERE THE DATA SET RESIDES.\n))VOL(VOLUME) - FOR UNCATALOGED DATA SETS, THE VOLUME SERIAL\n             OF THE DATA SET.\n))SHR      - THIS KEYWORD INDICATES THAT THE DSCB IS TO BE\n             MODIFIED EVEN IF ANOTHER JOB OR TSO SESSION\n             IS USING THE DATA SET.\n))EXPDT('YYDDD') - THE EXPIRATION DATE IS TO BE SET TO THE SPECIFIED\n             JULIAN DATE.  (FOR JULIAN DATE CONVERSION, SEE HELP FOR\n             THE 'JULIAN' COMMAND).  'YYDDD' MUST BE EITHER A FIVE\n             DIGIT JULIAN DATE OR A ZERO.\n))CREATE('YYDDD') - THE CREATION DATE IS TO BE SET TO THE SPECIFIED\n             JULIAN DATE.  (FOR JULIAN DATE CONVERSION, SEE HELP FOR\n             THE 'JULIAN' COMMAND).  'YYDDD' MUST BE EITHER A FIVE\n             DIGIT JULIAN DATE, A ZERO, OR AN ASTERISK (TODAYS DATE).\n))REFDT('YYDDD') - THE REFERENCE DATE IS TO BE SET TO THE SPECIFIED\n             JULIAN DATE.  (FOR JULIAN DATE CONVERSION, SEE HELP FOR\n             THE 'JULIAN' COMMAND).  'YYDDD' MUST BE EITHER A FIVE\n             DIGIT JULIAN DATE, A ZERO, OR AN ASTERISK (TODAYS DATE).\n))DSORG(DSORG) - THE DSORG IS TO BE CHANGED TO THE SPECIFIED TYPE.\n))RECFM(RECFM) - THE RECFM IS TO BE CHANGED TO THE SPECIFIED TYPE.\n))LRECL(LRECL) - THE LRECL IS TO BE CHANGED TO THE SPECIFIED VALUE.\n))BLKSIZE(VALUE) - THE BLKSIZE IS TO BE CHANGED TO THE SPECIFIED VALUE.\n))PWR      - THE PROTECTION FLAGS ARE TO BE SET FOR PWREAD, MEANING\n             A PASSWORD IS REQUIRED TO READ OR WRITE.\n))PWW      - THE PROTECTION FLAGS ARE TO BE SET FOR PWWRITE, MEANING\n             A PASSWORD IS REQUIRED TO WRITE BUT NOT TO READ.\n))NOP      - THE PROTECTION FLAGS ARE TO BE SET OFF, MEANING\n             A PASSWORD IS NEVER REQUIRED.\n))RACF     - THE DATA SET IS TO BE MARKED RACF PROTECTED.\n))NORACF   - THE DATA SET IS TO BE MARKED NOT RACF PROTECTED.\n))ZAP(OFFSET VERDATA REPDATA) - THIS KEYWORD MAY BE USED TO MODIFY\n             FIELDS WITHIN THE DSCB BY SPECIFYING (IN HEX) THE\n             FIELD OFFSET, THE FIELD'S CURRENT VALUE (IN HEX), AND\n             THE REPLACEMENT VALUE (IN HEX).  IF THE CURRENT VALUE\n             DOES NOT VERIFY CORRECTLY, THE DATA IS NOT REPLACED.\n             THE REPDATA MAY BE OMITTED IF YOU JUST WANT TO VERIFY.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT301/FILE301.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT301", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}