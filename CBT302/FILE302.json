{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011710000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE302.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE302.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0b\\n'", "DS1TRBAL": "b'\\x12\\xba'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b\"X\\xf4\\xfd\\xd0\\x00\\x00\\x02&\\x00\\t\\x02'\\x00\\x05\\x00\\x0c\"", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t)\\x8f\\x01\\t)\\x8f\\x15\\x04\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-10-25T00:00:00", "modifydate": "2009-10-25T15:04:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  302\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE302\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 13 MEMBERS COUNTED; CUMULATIVE SIZE IS 6,020 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/25/09    15:04:51    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\"O\\x01\\x00\"O\\x14\\x18\\x00\\t\\x00\\t\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-11T00:00:00", "modifydate": "2000-08-11T14:18:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "WSBG"}, "text": "\nLPA/LPALST/LNKLST ISPF ANALYSIS - Version 1.3.0\n\nDataset Attributes\nModules\nProducts\nDuplicate Modules\nPost CLPA Modules\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$COMMON": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01b\\x00\\x00\\x00\\x97#\\x0f\\x00\\x98\\x04\\x7f \\x11\\x08\\xfe\\x07_\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.98", "flags": 0, "createdate": "1997-08-18T00:00:00", "modifydate": "1998-02-16T20:11:00", "lines": 2302, "newlines": 1887, "modlines": 0, "user": "ZT15"}, "text": "**********************************************************************\n*                                                                    *\n* $COMMON      Common macros                                         *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n* Name         Description                                           *\n* ========     ================                                      *\n* $ADD         Add                                                   *\n* $ADDRESS     Address macro operands                                *\n* $CVD         Convert to decimal                                    *\n* $DECR        Decrement                                             *\n* $ENTRY       Standard Linkage - Entry                              *\n* $EXIT        Standard Linkage - Exit                               *\n* $FILL        Fill a Field                                          *\n* $FIND        Find character                                        *\n* $INCR        Increment                                             *\n* $VLC         Variable length compare                               *\n* $VLM         Variable length move                                  *\n* $VLT         Variable Length Translate and Test                    *\n* BRIF         Browse interface                                      *\n* BROWSE       Browse a dataset                                      *\n* CONTROL      Set processing modes                                  *\n* DISPLAY      Display panels and messages                           *\n* EDIT         Edit a dataset                                        *\n* IHALLT       LNKLST Table (LLT)                                    *\n* IHALPAT      LPALST Table (LPAT)                                   *\n* IKJEFTSR     TSO/E Service Facility Routine                        *\n* IKJZT301     TSO/E Broadcast Data Set Record 1                     *\n* IKJZT302     TSO/E Broadcast Notices Directory Record              *\n* IKJZT303     TSO/E Broadcast Notices Message Record                *\n* IKJZT304     TSO/E Broadcast Mail Directory Record                 *\n* IKJZT305     TSO/E Broadcast Mail Message Record                   *\n* ISPFINIT     Initialize ISPF Environment                           *\n* ISPFTERM     Terminate ISPF Environment                            *\n* ISPFVARS     Define ISPF Variables                                 *\n* LMCLOSE      Close a Data Set                                      *\n* LMDFREE      Free a Data Set List ID                               *\n* LMDINIT      Initialize a Data Set List                            *\n* LMDLIST      List Data Sets                                        *\n* LMFREE       Free Data Set from its Association with Data ID       *\n* LMINIT       Generate a Data ID for a Data Set                     *\n* LMMLIST      List a Library's Members                              *\n* LMOPEN       Open a Data Set                                       *\n* LOG          Write a message to the log data set                   *\n* PQUERY       Obtain panel information                              *\n* SELECT       Select a panel or function                            *\n* SETMSG       Set next message                                      *\n* TBADD        Add a row to a table                                  *\n* TBBOTTOM     Set the row pointer to the bottom                     *\n* TBCLOSE      Close and save a table                                *\n* TBCREATE     Create a new table                                    *\n* TBDELETE     Delete a row from a table                             *\n* TBDISPL      Display table information                             *\n* TBEND        Close a table without saving                          *\n* TBERASE      Erase a table                                         *\n* TBEXIST      Determine whether a row exists in a table             *\n* TBGET        Retrieve a row from a table                           *\n* TBMOD        Modify a row from table                               *\n* TBOPEN       Open a table                                          *\n* TBPUT        Update a row from table                               *\n* TBQUERY      Obtain table information                              *\n* TBSARG       Define a search argument                              *\n* TBSAVE       Save a table                                          *\n* TBSCAN       Search a table                                        *\n* TBSKIP       Move the row pointer                                  *\n* TBSORT       Sort a table                                          *\n* TBTOP        Set the row pointer to the top                        *\n* TBVCLEAR     Clear table variables                                 *\n* VCOPY        Create a copy of a variable                           *\n* VDEFINE      Define function variables                             *\n* VDELETE      Remove a definition of function variables             *\n* VGET         Retrieve variables from a pool or profile             *\n* VMASK        Mask and Edit Processing                              *\n* VPUT         Update variables in the shared or profile pool        *\n* VREPLACE     Replace a variable                                    *\n* VRESET       Reset function variables                              *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n* Name     Syntax                                                    *\n* ======== ================                                          *\n* $ADD     TO,FROM                                                   *\n* $ADDRESS Address macro operands                                    *\n* $CVD     To,From,mask                                              *\n* $DECR    Operand                                                   *\n* $ENTRY   Standard Linkage - Entry                                  *\n* $EXIT    Standard Linkage - Exit                                   *\n* $FILL    Field,Immediate_Character                                 *\n* $FIND    Find character                                            *\n* $INCR    Operand                                                   *\n* $VLC     Variable length compare                                   *\n* $VLM     Variable length move                                      *\n* $VLT     Variable Length Translate and Test                        *\n* BRIF     DATA=,RECFM=,LRECL=,READ=0,COMMAND=0,DIALOG=,PANEL=,      *\n*          FORMAT=,MIXED=NO,ERRET=                                   *\n* BROWSE   DATASET=                                                  *\n* CONTROL  CTL1,CTL2,CTL3,CTL4                                       *\n* DISPLAY  PANEL=,MESSAGE=,CURSOR=,CSRPOS=,COMMAND=,RETBUFFR=,       *\n*          RETLGTH=,MSGLOC=                                          *\n* EDIT     DSNAME,VOLSER                                             *\n* IHALLT                                                             *\n* IHALPAT                                                            *\n* IKJEFTSR                                                           *\n* IKJZT301                                                           *\n* IKJZT302                                                           *\n* IKJZT303                                                           *\n* IKJZT304                                                           *\n* IKJZT305                                                           *\n* ISPFINIT                                                           *\n* ISPFTERM                                                           *\n* ISPFVARS                                                           *\n* LMCLOSE                                                            *\n* LMDFREE                                                            *\n* LMDINIT                                                            *\n* LMDLIST                                                            *\n* LMFREE                                                             *\n* LMINIT                                                             *\n* LMMLIST                                                            *\n* LMOPEN                                                             *\n* LOG      MESSAGE=                                                  *\n* PQUERY   PLF2P2,ZDATA                                              *\n* SELECT   PANEL(PPPP),OPT(OOOO)                                     *\n* SELECT   CMD(CCCC),LANG(LLLL),MODE(MMMM)                           *\n* SELECT   PGM(PPPP),MODE(MMMM)                                      *\n* SELECT   * NEWAPPL(AAAA),PASSLIB/NEWPOOL,SUSPEND                   *\n* SETMSG   MESSAGE=,COND=,MSGLOC=                                    *\n* TBADD    TABLE=,SAVE=(),ORDER=,MULT=1                              *\n* TBBOTTOM TABLE=                                                    *\n* TBCLOSE  TABLE=                                                    *\n* TBCREATE TABLE=,KEYS=(),NAMES=(),WRITE=,REPLACE=,LIBRARY=,SHARE=   *\n* TBDELETE TABLE=                                                    *\n* TBDISPL  TABLE=,PANEL=,MESSAGE=,CURSOR=,CSRROW=,CSRPOS=,AUTOSEL=   *\n*          POSITION=,ROWID=,MSGLOC,LC=(V,VALUE,MODULE)               *\n* TBEND    TABLE=                                                    *\n* TBERASE  TABLE=,LIBRARY=ISPTABL                                    *\n* TBEXIST  TABLE=                                                    *\n* TBGET    TABLE=                                                    *\n* TBMOD    TABLE=,SAVE=(),ORDER=                                     *\n* TBOPEN   TABLE=,WRITE=WRITE,LIBRARY=ISPTABL,SHARE=                 *\n* TBPUT    TABLE=                                                    *\n* TBQUERY  TABLE=,KEYS(V),NAMES(V),ROWNUM(V),KEYNUM(V),NAMENUM(V),   *\n*          POSITION(V)                                               *\n* TBSARG   TABLE=,ARGLIST=(),MODE=NEXT,NAMECOND=()                   *\n* TBSAVE   TABLE=                                                    *\n* TBSCAN   TABLE=,ARGLIST=(),SAVENAME=,ROWID=,MODE=NEXT,NOREAD=      *\n*          POSITION=,CONDLIST=()                                     *\n* TBSKIP   TABLE=,NUMBER=1                                           *\n* TBSORT   TABLE=,FILEDS=()                                          *\n* TBTOP    TABLE=                                                    *\n* TBVCLEAR TABLE=                                                    *\n* VCOPY    NAMES=(),LENGTH=8,VARIABLE=,MODE=                         *\n* VDEFINE  NAMES=(),VARIABLE=,FORMAT=CHAR,LENGTH=8,OPTIONS=,USERDATA=*\n* VDELETE  NAMES=()                                                  *\n* VGET     NAMES=(),POOL=                                            *\n* VMASK    NAMES=(),FORMAT=,USER=,LENGTH=                            *\n* VPUT     NAMES=(),POOL=                                            *\n* VREPLACE VARIABLE-NAME,FULL-WORD-LENGTH,DATA-AREA                  *\n* VRESET                                                             *\n*                                                                    *\n**********************************************************************\n         MACRO\n**********************************************************************\n* $ADD         Add                                                   *\n**********************************************************************\n&LABEL   $ADD  &TO,&FROM\n         AIF   (T'&TO EQ 'F').FULL\n         AIF   (T'&TO EQ 'H').HALF\n         AIF   (T'&TO EQ 'P').PACKED\n         MNOTE 8,'$ADD error:  Unknown operand - &TO'\n         AGO   .MEND\n.FULL    ANOP\n&LABEL   L     R15,&TO             Get current value\n         A     R15,&FROM           Add value\n         ST    R15,&TO             Save new value\n         AGO   .MEND\n.HALF    ANOP\n&LABEL   LH    R15,&TO             Get current value\n         AH    R15,&FROM           Add value\n         STH   R15,&TO             Save new value\n         AGO   .MEND\n.PACKED  ANOP\n&LABEL   AP    &TO,&FROM           Add value\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $ADDRESS     Address macro operands                                *\n**********************************************************************\n* Usage:       $ADDRESS RN,ADDR  --->  LA  RN,ADDR                   *\n*              $ADDRESS RN,(R3)  --->  LR  RN,R3                     *\n*              $ADDRESS RN,@ADDR --->  L   RN,ADDR                   *\n*              $ADDRESS RN,C'LIT' ---> LA  RN,=C'LIT'                *\n*              $ADDRESS RN,F'1'  --->  LA  RN,=F'1'                  *\n**********************************************************************\n&LABEL   $ADDRESS\n         LCLC  &REG,&OP\n         AIF   (N'&SYSLIST EQ 2).OKPARM\n         MNOTE 8,'$ADDRESS error - 2 parameters required'\n         AGO   .MEND\n.OKPARM  ANOP\n&REG     SETC  '&SYSLIST(1)'\n&OP      SETC  '&SYSLIST(2)'\n         AIF   (T'&LABEL EQ 'O').BYNAME\n&LABEL   DS    0H\n.BYNAME  AIF   ('&OP'(1,1) EQ '(').LR\n         AIF   ('&OP'(1,1) EQ '@').L\n         AIF   ('&OP'(K'&OP,1) EQ '''').LIT\n         LA    &REG,&OP            Point by address\n         MEXIT\n.LR      ANOP\n&OP      SETC  '&OP'(2,K'&OP-2)\n         AIF   ('&OP' EQ '&REG').LRXIT\n         LR    &REG,&OP            Point by register\n.LRXIT   MEXIT\n.L       ANOP\n&OP      SETC  '&OP'(2,K'&OP-1)\n         L     &REG,&OP\n         MEXIT\n.LIT     ANOP\n         LA    &REG,=&OP\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $CVD         Convert to decimal                                    *\n**********************************************************************\n&LABEL   $CVD  &TO,&FROM,&MASK\n         AIF   (T'&FROM EQ 'F').FULL\n         AIF   (T'&FROM EQ 'H').HALF\n         MNOTE 8,'$CVD error:  Unknown operand - &FROM'\n         AGO   .MEND\n.FULL    ANOP\n&LABEL   L     R15,&FROM           Get current value\n         AGO   .CVD\n.HALF    ANOP\n&LABEL   LH    R15,&FROM           Get current value\n         AGO   .CVD\n.CVD     ANOP\n         CVD   R15,W_DOUBLE        Convert to decimal\n         MVC   &TO,&MASK           Mask\n         EDMK  &TO,W_DOUBLE+2      Edit\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $DECR        Decrement                                             *\n**********************************************************************\n&LABEL   $DECR &OP\n         LCLC  &REG\n         AIF   (T'&OP EQ 'F').F\n         AIF   (T'&OP EQ 'H').H\n         AIF   (T'&OP EQ 'P').P\n         AIF   ('&OP'(1,1) EQ '(').R\n         MNOTE 8,'$DECR error:  Unknown operand - &OP'\n         AGO   .MEND\n.F       ANOP\n&LABEL   L     R15,&OP             Get current value\n         BCTR  R15,0               Decrement\n         ST    R15,&OP             Save new value\n         AGO   .MEND\n.H       ANOP\n&LABEL   LH    R15,&OP             Get current value\n         BCTR  R15,0               Decrement\n         STH   R15,&OP             Save new value\n         AGO   .MEND\n.P       ANOP\n&LABEL   SP    &OP,=P'1'           Decrement\n         AGO   .MEND\n.R       ANOP\n&REG     SETC  '&OP'(2,K'&OP-2)\n&LABEL   LR    R15,&OP             Get current value\n         BCTR  R15,0               Decrement\n         LR    &OP,R15             Save new value\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $HEX         Hex                                                   *\n**********************************************************************\n&LABEL   $HEX  &T,&F,&LEN=8\n         LCLA  &OFF\n         LCLC  &RF\n         AIF   ('&F'(1,1) EQ '(').REG\n.STORAGE ANOP\n&LABEL   ICM   R15,B'1111',&F      Store binary data\n         ST    R15,W_DOUBLE        Store binary data\n         AGO   .COMMON\n.REG     ANOP\n&RF      SETC  '&F'(2,K'&F-2)\n&LABEL   ST    &RF,W_DOUBLE        Store binary data\n         AGO   .COMMON\n.COMMON  ANOP\n         MVI   W_DOUBLE+4,X'0C'    Sign\n         UNPK  W_CL16(9),W_DOUBLE(5) Unpack\n         L     R15,=A(TBLHEX)      Set HEX table address\n         USING TBLHEX,R15          Reference HEX table\n&OFF     SETA  8-&LEN              Offset\n         TR    W_CL16+&OFF.(&LEN),TBLHEX Convert to HEX\n         DROP  R15                 Dereference HEX table\n         MVC   &T.(&LEN),W_CL16+&OFF    Move to receiving field\n         MEND\n         MACRO\n**********************************************************************\n*                                                                    *\n* Usage:                                                             *\n* Name     $ENTRY    Keywords...                                     *\n*                                                                    *\n* Name     Module name                                               *\n*          Values:   Any valid module name                           *\n*          Default:  NULL                                            *\n*                                                                    *\n* Keywords:                                                          *\n* AMODE    Addressing mode                                           *\n*          Values:   24/31/ANY                                       *\n*          Default:  31                                              *\n*                                                                    *\n* BASE     Base registers                                            *\n*          Values:   (Rxx,Ryy,Rzz...) - Any valid registers          *\n*          Default:  (R12)                                           *\n*                                                                    *\n* DWA      Dynamic Workarea                                          *\n*          Values:   (ddd,rrr,lll)                                   *\n*                    ddd  - Dynamic workarea dummy section (DSECT)   *\n*                    rrr  - Dynamic workarea base register           *\n*                    lll  - Dynamic workarea length                  *\n*          Default:  NULL - Dynamic workarea not used                *\n*                                                                    *\n* DWALOC   Location of getmained dynamic workarea                    *\n*          Values:   BELOW/ANY/RES/EXPLICIT                          *\n*          Default:  RES                                             *\n*                                                                    *\n* MODID    Module identification                                     *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* RMODE    Residence mode                                            *\n*          Values:   24/ANY                                          *\n*          Default:  ANY                                             *\n*                                                                    *\n* SAVE     Save/restore registers at entry/exit                      *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* SAVEAREA Acquire savearea                                          *\n*          Values:   NO/STORAGE/STACK                                *\n*          Default:  STORAGE                                         *\n*                                                                    *\n* SALOC    Location of getmained savearea                            *\n*          Values:   BELOW/ANY/RES/EXPLICIT                          *\n*          Default:  RES                                             *\n*                                                                    *\n* SP       Subpool of getmained savearea/workarea                    *\n*          Values:   Any valid subpool                               *\n*          Default:  0                                               *\n*                                                                    *\n* SPLEVEL  Macro level                                               *\n*          Values:   0/1/2/3/4/5/6                                   *\n*          Default:  0 - Use default macro level                     *\n*                                                                    *\n* SWA      Static Workarea                                           *\n*          Values:   (ccc,rrr)                                       *\n*                    ccc  - Static workarea control section (CSECT)  *\n*                    rrr  - Static workarea base register            *\n*          Default:  NULL - Static workarea not used                 *\n*                                                                    *\n**********************************************************************\n* $ENTRY       Standard Linkage - Entry                              *\n**********************************************************************\n&LABEL   $ENTRY &AMODE=31,         Addressing mode                     X\n               &BASE=(R11,R12),    Base Registers                      X\n               &DWA=,              Dynamic workarea                    X\n               &DWALOC=RES,        Location of dynamic workarea        X\n               &MODID=YES,         Module identification               X\n               &RMODE=ANY,         Residence mode                      X\n               &SALOC=RES,         Location of savearea                X\n               &SAVE=STORAGE,      Save/restore regs at entry/exit     X\n               &SAVEAREA=YES,      Savearea                            X\n               &SPLEVEL=0,         Macro level                         X\n               &SUBPOOL=0,         Subpool of savearea/workarea        X\n               &SWA=               Static workarea\n         GBLA  &COMMON             Common Macros Level\n&COMMON  SETA  3                   Common Macros Level\n         MNOTE *,'$ENTRY Utilizing the following parameters:'\n         MNOTE *,'       AMODE=&AMODE'\n         MNOTE *,'       BASE=&BASE'\n         MNOTE *,'       DWA=&DWA'\n         MNOTE *,'       DWALOC=&DWALOC'\n         MNOTE *,'       MODID=&MODID'\n         MNOTE *,'       RMODE=&RMODE'\n         MNOTE *,'       SALOC=&SALOC'\n         MNOTE *,'       SAVE=&SAVE'\n         MNOTE *,'       SAVEAREA=&SAVEAREA'\n         MNOTE *,'       SPLEVEL=&SPLEVEL'\n         MNOTE *,'       SUBPOOL=&SUBPOOL'\n         MNOTE *,'       SWA=&SWA'\n         GBLC  &GAMODE             Addressing Mode\n         GBLC  &GBRU               Base register using\n         GBLC  &GCSECT             Control Section\n         GBLC  &GSAVE              Save registers\n         GBLC  &GSAVEAREA          Savearea\n         GBLC  &GDWAN              Dynamic workarea name\n         GBLC  &GDWAR              Dynamic workarea register\n         GBLC  &GDWAL              Dynamic workarea length\n         GBLC  &GSPLEVEL           Macro level\n         GBLC  &SYSSPLV            Macro level\n         GBLC  &GSUBPOOL           Subpool of savearea/workarea\n         GBLC  &GRMODE             Residence Mode\n         GBLC  &GSWAN              Static workarea name\n         GBLC  &GSWAR              Static workarea register\n         LCLA  &BRC                Base register count\n         LCLC  &BC                 Base register current\n         LCLC  &BP                 Base register Caller's\n         LCLC  &DWALBL             Dynamic workarea label\n&GAMODE  SETC  '&AMODE'            Addressing Mode\n&GCSECT  SETC  '&LABEL'            Control Section\n&GRMODE  SETC  '&RMODE'            Residence Mode\n&GSAVE   SETC  '&SAVE'             Save registers\n&GSAVEAREA SETC '&SAVEAREA'        Savearea\n&GSPLEVEL SETC '&SPLEVEL'          Macro level\n&GSUBPOOL SETC  '&SUBPOOL'         Subpool of savearea/workarea\n         AIF   ('&DWALOC' EQ 'BELOW').DWALOCOK,                        X\n               ('&DWALOC' EQ 'ANY').DWALOCOK,                          X\n               ('&DWALOC' EQ 'RES').DWALOCOK,                          X\n               ('&DWALOC' EQ 'EXPLICIT').DWALOCOK\n         MNOTE 8,'$ENTRY Invalid DWALOC=&DWALOC'\n         MNOTE 8,'BELOW/ANY/RES/EXPLICIT are valid'\n         MEXIT\n.DWALOCOK ANOP\n         AIF   ('&SALOC' EQ 'BELOW').SALOCOK,                          X\n               ('&SALOC' EQ 'ANY').SALOCOK,                            X\n               ('&SALOC' EQ 'RES').SALOCOK,                            X\n               ('&SALOC' EQ 'EXPLICIT').SALOCOK\n         MNOTE 8,'$ENTRY Invalid SALOC=&SALOC'\n         MNOTE 8,'BELOW/ANY/RES/EXPLICIT are valid'\n         MEXIT\n.SALOCOK ANOP\n&GCSECT  CSECT                     Control Section\n.**********************************************************************\n.*       AMODE                                                        *\n.**********************************************************************\n         AIF   ('&AMODE' EQ '24').AMODEOK,                             X\n               ('&AMODE' EQ '31').AMODEOK,                             X\n               ('&AMODE' EQ 'ANY').AMODEOK\n         MNOTE 8,'$ENTRY Invalid AMODE=&AMODE - 24/31/ANY'\n         MEXIT\n.AMODEOK ANOP\n&GCSECT  AMODE &GAMODE             Addressing Mode\n         AGO   .AMODEEND\n.AMODENO ANOP\n         AGO   .AMODEEND\n.AMODEEND ANOP\n.**********************************************************************\n.*       RMODE                                                        *\n.**********************************************************************\n         AIF   ('&RMODE' EQ '24').RMODEOK,                             X\n               ('&RMODE' EQ 'ANY').RMODEOK\n         MNOTE 8,'$ENTRY Invalid RMODE=&RMODE - 24/ANY'\n         MEXIT\n.RMODEOK ANOP\n&GCSECT  RMODE &GRMODE             Residence Mode\n         AGO   .RMODEEND\n.RMODENO ANOP\n         AGO   .RMODEEND\n.RMODEEND ANOP\n.**********************************************************************\n.*       SPLEVEL                                                      *\n.**********************************************************************\n         AIF   ('&SPLEVEL' EQ '0').SPLVLNO,                            X\n               ('&SPLEVEL' EQ '1').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '2').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '3').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '4').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '5').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '6').SPLVLYES\n         MNOTE 8,'$ENTRY Invalid SPLEVEL=&SPLEVEL - 0/1/2/3/4/5/6'\n         MEXIT\n.SPLVLYES ANOP\n         SPLEVEL SET=&SPLEVEL      Set macro level\n         AGO   .SPLVLEND\n.SPLVLNO ANOP\n         SPLEVEL SET               Use default macro level\n         AGO   .SPLVLEND\n.SPLVLEND ANOP\n.**********************************************************************\n.*       Module identification                                        *\n.**********************************************************************\n         AIF   ('&MODID' EQ 'NO').MODIDNO,                             X\n               ('&MODID' EQ 'YES').MODIDYES\n         MNOTE 8,'$ENTRY Invalid MODID=&MODID - YES/NO'\n         MEXIT\n.MODIDYES ANOP\n         B     4+1+24+3(0,R15)     Branch around module identification\n         DC    AL1(24)             Module identification length\n         DC    CL8'&GCSECT'        CSECT name\n         DC    CL8'&SYSDATE'       Assembly date\n         DC    CL8'&SYSTIME'       Assembly time\n         DC    AL3(0)              Filler\n         AGO   .MODIDEND\n.MODIDNO ANOP\n         AGO   .MODIDEND\n.MODIDEND ANOP\n.**********************************************************************\n.*       Register / Savearea Equates                                  *\n.**********************************************************************\n         AIF   (D'R0).REGEQUNO\nA0       EQU    0                  Access register\nA1       EQU    1                  Access register\nA2       EQU    2                  Access register\nA3       EQU    3                  Access register\nA4       EQU    4                  Access register\nA5       EQU    5                  Access register\nA6       EQU    6                  Access register\nA7       EQU    7                  Access register\nA8       EQU    8                  Access register\nA9       EQU    9                  Access register\nA10      EQU   10                  Access register\nA11      EQU   11                  Access register\nA12      EQU   12                  Access register\nA13      EQU   13                  Access register\nA14      EQU   14                  Access register\nA15      EQU   15                  Access register\nC0       EQU    0                  Control register\nC1       EQU    1                  Control register\nC2       EQU    2                  Control register\nC3       EQU    3                  Control register\nC4       EQU    4                  Control register\nC5       EQU    5                  Control register\nC6       EQU    6                  Control register\nC7       EQU    7                  Control register\nC8       EQU    8                  Control register\nC9       EQU    9                  Control register\nC10      EQU   10                  Control register\nC11      EQU   11                  Control register\nC12      EQU   12                  Control register\nC13      EQU   13                  Control register\nC14      EQU   14                  Control register\nC15      EQU   15                  Control register\nF0       EQU    0                  Floating point register\nF1       EQU    2                  Floating point register\nF2       EQU    4                  Floating point register\nF3       EQU    6                  Floating point register\nR0       EQU    0                  General register - System\nR1       EQU    1                  General register - System\nR2       EQU    2                  General register - System\nR3       EQU    3                  General register\nR4       EQU    4                  General register\nR5       EQU    5                  General register\nR6       EQU    6                  General register\nR7       EQU    7                  General register\nR8       EQU    8                  General register\nR9       EQU    9                  General register\nR10      EQU   10                  General register\nR11      EQU   11                  General register\nR12      EQU   12                  General register\nR13      EQU   13                  General register - Savearea\nR14      EQU   14                  General register - System\nR15      EQU   15                  General register - System\nSAVEPL1  EQU    0                  Savearea PL1\nSAVEPREV EQU    4                  Savearea Previous (from caller)\nSAVENEXT EQU    8                  Savearea Next (from target)\nSAVER14  EQU   12                  Savearea R14 (Return address)\nSAVER15  EQU   16                  Savearea R15 (Entry address)\nSAVER0   EQU   20                  Savearea R0\nSAVER1   EQU   24                  Savearea R1\nSAVER2   EQU   28                  Savearea R2\nSAVER3   EQU   32                  Savearea R3\nSAVER4   EQU   36                  Savearea R4\nSAVER5   EQU   40                  Savearea R5\nSAVER6   EQU   44                  Savearea R6\nSAVER7   EQU   48                  Savearea R7\nSAVER8   EQU   52                  Savearea R8\nSAVER9   EQU   56                  Savearea R9\nSAVER10  EQU   60                  Savearea R10\nSAVER11  EQU   64                  Savearea R11\nSAVER12  EQU   68                  Savearea R12\n&GREGEQU SETA  1\n.REGEQUNO ANOP\n.**********************************************************************\n.*       Save Registers                                               *\n.**********************************************************************\n         AIF   ('&GSAVE' EQ 'STORAGE').SAVESTORAGE,                    X\n               ('&GSAVE' EQ 'STACK').SAVESTACK,                        X\n               ('&GSAVE' EQ 'NO').SAVENO\n         MNOTE 8,'$ENTRY Invalid SAVE=&GSAVE'\n         MNOTE 8,'$ENTRY Syntax: SAVE=YES/NO'\n         MEXIT\n.SAVESTORAGE ANOP\n         SAVE  (14,12)             Save caller's registers\n         AGO   .SAVEEND\n.SAVESTACK ANOP\n         BAKR  R14,0               Save caller's status on stack\n         AGO   .SAVEEND\n.SAVENO  ANOP\n.SAVEEND ANOP\n.**********************************************************************\n.*       Base Register(s)                                             *\n.**********************************************************************\n         AIF   (N'&BASE EQ 0).BASENO\n         AIF   (T'&BASE NE 'O').BASEOK\n         MNOTE 8,'$ENTRY Missing Required Keyword BASE'\n         MEXIT\n.BASEOK  ANOP\n         LR    &BASE(1),R15        Load base register\n&BRC     SETA 1\n.BASENXT ANOP\n         AIF   (&BRC EQ N'&BASE).BASEEND\n&BRC     SETA  &BRC+1              Increment base register count\n&BC      SETC  '&BASE(&BRC)'       Current base register\n&BP      SETC  '&BASE(&BRC-1)'     Caller's base register\n         LA    &BC,4095(,&BP)      Load base register\n         LA    &BC,1(,&BC)         Load base register\n         AGO   .BASENXT\n.BASEEND ANOP\n&GBRU    SETC  '&BASE'\n         AIF   ('&BASE'(1,1) NE '(').USING1\n&GBRU    SETC  '&BASE'(2,K'&BASE-2)\n.USING1  ANOP\n         USING &LABEL,&GBRU        Reference control section\n.BASENO  ANOP\n.**********************************************************************\n.*       Savearea                                                     *\n.**********************************************************************\n         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X\n               ('&GSAVEAREA' EQ 'YES').SAYES\n         MNOTE 8,'$ENTRY Invalid SAVEAREA=&GSAVEAREA'\n         MNOTE 8,'$ENTRY Syntax  SAVEAREA=YES/NO'\n         MEXIT\n.SAYES   ANOP\n         LR    R3,R0               Caller's R0\n         LR    R4,R1               Caller's R1\n         MNOTE *,'STORAGE OBTAIN,LENGTH=72,LOC=&SALOC Obtain Savearea'\n         STORAGE OBTAIN,LENGTH=72,LOC=&SALOC,BNDRY=PAGE Obtain savearea\n         ST    R13,SAVEPREV(,R1)   Savearea previous\n         ST    R1,SAVENEXT(,R13)   Savearea next\n*        MVC   SAVEPL1(,R13),=C'F1SA' Indicate linkage stack usage\n         LR    R13,R1              Reference savearea\n         LR    R0,R3               Caller's R0\n         LR    R1,R4               Caller's R1\n         AGO   .SAEND\n.SANO    ANOP                      No savearea\n.SAEND   ANOP\n.**********************************************************************\n.*       Dynamic Workarea                                             *\n.**********************************************************************\n         AIF   (N'&DWA EQ 0).DWANO\n         AIF   (N'&DWA EQ 3).DWAOK\n         MNOTE 8,'$ENTRY Invalid DWA=&DWA'\n         MNOTE 8,'$ENTRY Syntax  DWA=(DSECT_NAME,REGISTER,LENGTH)'\n         MEXIT\n.DWAOK   ANOP\n&GDWAN   SETC  '&DWA(1)'           Dynamic workarea name\n&GDWAR   SETC  '&DWA(2)'           Dynamic workarea register\n&GDWAL   SETC  '&DWA(3)'           Dynamic workarea length\n&DWALBL  SETC  'DWA'.'&SYSNDX'     Dynamic workarea label\n         LR    R3,R0               Caller's R0\n         LR    R4,R1               Caller's R1\n         MNOTE *,'STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&DWALOC Obtain DWA'\n         STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&DWALOC,BNDRY=PAGE Obtain DWA\n         LR    &GDWAR,R1           Set Dynamic workarea base\n         USING &GDWAN,&GDWAR       Reference Dynamic workarea\n         LR    R0,R3               Caller's R0\n         LR    R1,R4               Caller's R1\n         AGO   .DWAEND\n.DWANO   ANOP\n&GDWAN   SETC  ''                  Dynamic workarea name\n&GDWAR   SETC  ''                  Dynamic workarea register\n&GDWAL   SETC  ''                  Dynamic workarea length\n         AGO   .DWAEND\n.DWAEND  ANOP\n.**********************************************************************\n.*       Static Workarea                                              *\n.**********************************************************************\n         AIF   (N'&SWA EQ 0).SWANO\n         AIF   (N'&SWA EQ 2).SWAOK\n         MNOTE 8,'$ENTRY Invalid SWA=&SWA'\n         MNOTE 8,'$ENTRY Syntax: SWA=(CSECT_NAME,REGISTER)'\n         MEXIT\n.SWAOK   ANOP\n&GSWAN   SETC  '&SWA(1)'           Static workarea name\n&GSWAR   SETC  '&SWA(2)'           Static workarea register\n         L     &GSWAR,=A(&GSWAN)   Set static workarea base\n         USING &GSWAN,&GSWAR       Reference static workarea\n         AGO   .SWAEND\n.SWANO   ANOP\n&GSWAN   SETC  ''                  Static workarea name\n&GSWAR   SETC  ''                  Static workarea register\n         AGO   .SWAEND\n.SWAEND  ANOP\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n*        Macro Name:                                                 *\n*        Operation:      Standard Linkage - Exit                     *\n*        Usage:                                                      *\n**********************************************************************\n*                                                                    *\n* Syntax:                                                            *\n* Name     $EXIT     Keywords...                                     *\n*                                                                    *\n* Name     Module name                                               *\n*          Values:   Any valid module name                           *\n*          Default:  NULL                                            *\n*                                                                    *\n* Keywords:                                                          *\n* LTORG    Literal pool at end of module                             *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n* $EXIT        Standard Linkage - Exit                               *\n**********************************************************************\n&LABEL   $EXIT &LTORG=YES          Literal pool\n         MNOTE *,'$EXIT  Utilizing the following parameters:'\n         MNOTE *,'       LTORG=&LTORG'\n         GBLC  &GBRU               Base register using\n         GBLC  &GDWAR              Dynamic workarea register\n         GBLC  &GDWAL              Dynamic workarea length\n         GBLC  &GSAVE              Save registers\n         GBLC  &GSAVEAREA          Savearea\n.**********************************************************************\n.*       Return Code                                                  *\n.**********************************************************************\n&LABEL.0 L     R3,=F'0'            Return code 0\n         B     &LABEL.X            Exit\n&LABEL.4 L     R3,=F'4'            Return code 4\n         B     &LABEL.X            Exit\n&LABEL.8 L     R3,=F'8'            Return code 8\n         B     &LABEL.X            Exit\n&LABEL.C L     R3,=F'12'           Return code 12\n         B     &LABEL.X            Exit\n&LABEL.R LR    R3,R15              Return code in R15\n         B     &LABEL.X            Exit\n&LABEL.X EQU   *                   Exit\n.**********************************************************************\n.*       Dynamic Workarea                                             *\n.**********************************************************************\n         AIF   ('&GDWAR' EQ '').DWANO\n*        L     R0,=F'&GDWAL'       Dynamic workarea length\n         MNOTE *,'STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL DWA'\n         STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL Release DWA\n         AGO   .DWAEND\n.DWANO   ANOP\n         AGO   .DWAEND\n.DWAEND  ANOP\n.**********************************************************************\n.*       Savearea                                                     *\n.**********************************************************************\n         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X\n               ('&GSAVEAREA' EQ 'YES').SAYES\n         MNOTE 8,'$EXIT Invalid SAVEAREA=&GSAVEAREA'\n         MNOTE 8,'$EXIT Syntax: SAVEAREA=YES/NO'\n         MEXIT\n.SAYES   ANOP\n         LR    R1,R13              Savearea address\n         L     R13,4(R13)          Restore previous savearea\n         MNOTE *,'STORAGE RELEASE,ADDR=(R1),LENGTH=72 Release Savearea'\n         STORAGE RELEASE,ADDR=(R1),LENGTH=72  Release savearea\n         AGO   .SAEND\n.SANO    ANOP\n.SAEND   ANOP\n.**********************************************************************\n.*       Save Registers                                               *\n.**********************************************************************\n         AIF   ('&GSAVE' EQ 'STORAGE').SAVESTORAGE,                    X\n               ('&GSAVE' EQ 'STACK').SAVESTACK,                        X\n               ('&GSAVE' EQ 'NO').SAVENO\n         MNOTE 8,'$EXIT Invalid SAVE=&GSAVE'\n         MNOTE 8,'$EXIT Syntax: SAVE=NO/STORAGE/STACK'\n         MEXIT\n.SAVESTORAGE ANOP\n         LR    R15,R3              Set return code\n         L     14,12(0,13)         Restore R14\n         LM    0,12,20(13)         Restore R0:R12\n         BSM   0,14                Return control\n         AGO   .SAVEEND\n.SAVESTACK ANOP\n         LR    R15,R3              Set return code\n         PR                        Restore caller's status from stack\n         AGO   .SAVEEND\n.SAVENO  ANOP\n         LR    R15,R3              Set return code\n         BSM   0,14                Return control\n         AGO   .SAVEEND\n.SAVEEND ANOP\n.**********************************************************************\n.*       LTORG                                                        *\n.**********************************************************************\n         AIF   ('&LTORG' EQ 'YES').LTORGYES,                           X\n               ('&LTORG' EQ 'NO').LTORGNO\n         MNOTE 8,'$EXIT Invalid LTORG=&LTORG - YES/NO'\n         MEXIT\n.LTORGYES ANOP\n         LTORG                     Literal pool\n.LTORGNO ANOP\n         AGO   .LTORGEND\n.LTORGEND ANOP\n.MEND    ANOP\n         DROP  &GBRU               Dereference control section\n         MEND\n         MACRO\n**********************************************************************\n* $FILL        Fill a Field                                          *\n**********************************************************************\n&LABEL   $FILL &F,&C\n&LABEL   LA    R0,&F               Receiving field address\n         LA    R1,L'&F             Receiving field length\n         XR    R14,R14             Sending field address - none\n         XR    R15,R15             Sending field length - none\n         ICM   R15,B'1000',=&C     Pad character\n         MVCL  R0,R14              Fill the field\n         MEND\n         MACRO\n**********************************************************************\n* $FIND        Find character                                        *\n**********************************************************************\n&LABEL   $FIND &OP,                Operand                             X\n               &CHAR,              Character                           X\n               &DECREMENT=YES,     Decrement - Yes/No                  X\n               &MODE=BE            Mode - BE/BNE/...\n         LCLC  &FIND1,&FIND2\n&FIND1   SETC  'FIND1'.'&SYSNDX'\n&FIND2   SETC  'FIND2'.'&SYSNDX'\n&LABEL   $ADDRESS R14,&OP(1)       Operand\n         AIF   (N'&OP EQ 2).OPL\n         LA    R1,L'&OP(1)         Operand length default\n         AGO   .OPEND\n.OPL     ANOP\n         $ADDRESS R1,&OP(2)        Operand length specified\n.OPEND   ANOP\n         XR    R15,R15             Clear length\n&FIND1   EQU   *\n         CLI   0(R14),&CHAR        Match ?\n         &MODE &FIND2              . Yes\n         LA    R14,1(R14)          Increment operand address\n         LA    R15,1(R15)          Increment current length\n         BCT   R1,&FIND1           Process next operand, if any\n&FIND2   EQU   *\n         AIF   ('&DECREMENT' EQ 'NO').DECNO\n         BCTR  R15,0               Length - 1\n.DECNO   ANOP\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $INCR        Increment                                             *\n**********************************************************************\n&LABEL   $INCR &OP,&TYPE\n         AIF   (T'&OP EQ 'F').F\n         AIF   (T'&OP EQ 'H').H\n         AIF   (T'&OP EQ 'P').P\n         AIF   ('&TYPE' EQ 'F').F\n         AIF   ('&TYPE' EQ 'H').H\n         AIF   ('&TYPE' EQ 'P').P\n         AIF   ('&OP'(1,1) EQ '(').R\n         MNOTE 8,'$INCR error:  Unknown operand - &OP - &TYPE'\n         AGO   .MEND\n.F       ANOP\n&LABEL   L     R15,&OP             Get current value\n         LA    R15,1(,R15)         Increment\n         ST    R15,&OP             Save new value\n         AGO   .MEND\n.H       ANOP\n&LABEL   LH    R15,&OP             Get current value\n         LA    R15,1(,R15)         Increment\n         STH   R15,&OP             Save new value\n         AGO   .MEND\n.P       ANOP\n&LABEL   AP    &OP,=P'1'           Increment\n         AGO   .MEND\n.R       ANOP\n&REG     SETC  '&OP'(2,K'&OP-2)\n&LABEL   LA    &OP,1(&OP)          Increment\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $VLC         Variable length compare                               *\n**********************************************************************\n&LABEL   $VLC  &OP1,               Operand 1                           X\n               &OP2,               Operand 2                           X\n               &LEN,               Length                              X\n               &DECREMENT=YES      Decrement - Yes/No\n         LCLC  &VLC1,&VLC2\n&VLC1    SETC  'VLC1'.'&SYSNDX'\n&VLC2    SETC  'VLC2'.'&SYSNDX'\n&LABEL   $ADDRESS R14,&OP1         Operand 1\n         $ADDRESS R1,&LEN          Length\n         $ADDRESS R15,&OP2         Operand 2\n         AIF   ('&DECREMENT' EQ 'NO').DECNO\n         BCTR  R1,0                Length - 1\n.DECNO   ANOP\n         B     &VLC2\n&VLC1    CLC   0(*-*,R14),0(R15)   Variable length compare (executed)\n&VLC2    EQU   *\n         EX    R1,&VLC1            Variable length compare\n         MEND\n         MACRO\n**********************************************************************\n* $VLM         Variable length move                                  *\n**********************************************************************\n&LABEL   $VLM  &OP1,               Operand 1                           X\n               &OP2,               Operand 2                           X\n               &LEN,               Length                              X\n               &DECREMENT=YES      Decrement - Yes/No\n         LCLC  &VLM1,&VLM2\n&VLM1    SETC  'VLM1'.'&SYSNDX'\n&VLM2    SETC  'VLM2'.'&SYSNDX'\n&LABEL   $ADDRESS R14,&OP1         Operand 1\n         $ADDRESS R1,&LEN          Length\n         $ADDRESS R15,&OP2         Operand 2\n         AIF   ('&DECREMENT' EQ 'NO').DECNO\n         BCTR  R1,0                Length - 1\n.DECNO   ANOP\n         B     &VLM2\n&VLM1    MVC   0(*-*,R14),0(R15)   Variable length move (executed)\n&VLM2    EQU   *\n         EX    R1,&VLM1            Variable length move\n         MEND\n         MACRO\n**********************************************************************\n* $VLTRT       Variable Length Translate and Test                    *\n**********************************************************************\n&LABEL   $VLTRT  &OP1,             Operand 1                           X\n               &OP2,               Operand 2                           X\n               &LEN,               Length                              X\n               &DECREMENT=YES      Decrement - Yes/No\n&LABEL   $ADDRESS R14,&OP1         Storage 1\n         $ADDRESS R15,&OP2         Storage 2\n         $ADDRESS R1,&LEN          Length\n         AIF   ('&DECREMENT' EQ 'NO').DECNO\n         BCTR  R1,0                Length - 1\n.DECNO   ANOP\n         EX    R1,P_VLTRT          Variable Length Translate and Test\n         MEND\n         MACRO\n**********************************************************************\n* BRIF         Browse Interface                                      *\n**********************************************************************\n&LABEL   BRIF  &DATA=,             Dataset name                        X\n               &RECFM=,            Record format                       X\n               &LRECL=,            Logical record length               X\n               &READ=0,            Read routine                        X\n               &COMMAND=0,         Command routine                     X\n               &DIALOG=,           Dialog data                         X\n               &PANEL=,            Panel name                          X\n               &FORMAT=,           Format name                         X\n               &MIXED=NO,          YES/NO                              X\n               &ERRET=             Error Routine\n         AIF   ('&MIXED' EQ 'YES').MIXEDOK,                            X\n               ('&MIXED' EQ 'NO').MIXEDOK\n         MNOTE 8,'BRIF Invalid MIXED=&MIXED - YES/NO'\n         AGO   .MEND\n.MIXEDOK ANOP\n         AIF   ('&RECFM' EQ 'F').RECFMOK,                              X\n               ('&RECFM' EQ 'FA').RECFMOK,                             X\n               ('&RECFM' EQ 'FM').RECFMOK,                             X\n               ('&RECFM' EQ 'U').RECFMOK,                              X\n               ('&RECFM' EQ 'V').RECFMOK,                              X\n               ('&RECFM' EQ 'VA').RECFMOK,                             X\n               ('&RECFM' EQ 'VM').RECFMOK\n         MNOTE 8,'BRIF Invalid RECFM=&RECFM - F/FA/FM/U/V/VA/VM'\n         AGO   .MEND\n.RECFMOK ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'BRIF ',                                             X\n               &DATA,                                                  X\n               =C'&RECFM ',                                            X\n               =F'&LRECL',                                             X\n               =A(&READ),                                              X\n               =A(&COMMAND),                                           X\n               &DIALOG,                                                X\n               =C'&PANEL ',                                            X\n               =C'&FORMAT ',                                           X\n               =C'&MIXED '),                                           X\n               VL,MF=(E,W_CL512)\n         AIF   ('&ERRET' EQ '').MEND\n         LTR   15,15               Okay ?\n         AIF   ('&ERRET'(1,1) EQ '(').ERRETR\n         BNZ   &ERRET              . No\n         AGO   .MEND\n.ERRETR  ANOP\n         BR    &ERRET(1)           . No\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* BROWSE       Browse a dataset                                      *\n**********************************************************************\n&LABEL   BROWSE &DATASET=,         DSNAME                              X\n               &ERRET=,            Error Routine                       X\n               &VOLUME=,           SERIAL                              X\n               &PASSWORD=,         PSWD-VALUE                          X\n               &PANEL=,            PANEL-NAME                          X\n               &FORMAT=,           FORMAT-NAME                         X\n               &MIXED=             YES/NO\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'BROWSE ',                                           X\n               &DATASET),                                              X\n               VL,MF=(E,W_CL512)\n         AIF   ('&ERRET' EQ '').MEND\n         LTR   15,15               Okay ?\n         AIF   ('&ERRET'(1,1) EQ '(').ERRETR\n         BNZ   &ERRET              . No\n         AGO   .MEND\n.ERRETR  ANOP\n         BR    &ERRET(1)           . No\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* CONTROL      Set processing modes                                  *\n**********************************************************************\n&LABEL   CONTROL &CTL1,&CTL2,&CTL3,&CTL4\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'CONTROL ',                                          X\n               =C'&CTL1 ',                                             X\n               =C'&CTL2 ',                                             X\n               =C'&CTL3 ',                                             X\n               =C'&CTL4 '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* DISPLAY      Display panels and messages                           *\n**********************************************************************\n&LABEL   DISPLAY &PANEL=,          PANEL-NAME                          X\n               &END=,              End label                           X\n               &MESSAGE=,          MESSAGE-ID                          X\n               &CURSOR=,           CURSOR-FIELD-NAME                   X\n               &CSRPOS=,           CURSOR-POSITION                     X\n               &COMMAND=,          STACK-BUFFER-NAME                   X\n               &RETBUFFR=,         RET-BUFFER-NAME                     X\n               &RETLGTH=,          RET-LENGTH-NAME                     X\n               &MSGLOC=,           MESSAGE-FIELD-NAME                  X\n               &PC=()              Primary-command\n         AIF   ('&PC'(1,1) EQ '(').OKPC\n         MNOTE 8,'DISPLAY PC=&PC - MUST BE IN PARENTHESIS'\n.OKPC    ANOP\n         LCLA  &CNT\n         LCLC  &NLLBL\n         LCLC  &NPLBL,&PCLBL\n         LCLC  &CMP,&LBL,&ID,&SEL\n&PCLBL   SETC  'PC'.'&SYSNDX'\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'DISPLAY ',                                          X\n               =C'&PANEL ',                                            X\n               =C'&MESSAGE ',                                          X\n               =C'&CURSOR ',                                           X\n               =C'&CSRPOS ',                                           X\n               =C'&COMMAND ',                                          X\n               =C'&RETBUFFR ',                                         X\n               =C'&RETLGTH ',                                          X\n               =C'&MSGLOC '),                                          X\n               VL,MF=(E,W_CL512)\n         C     R15,=F'8'           End ?\n         BNL   &END                . Yes\n         AIF   ('&PC'(1,2) EQ '()').MEND\n.PC      ANOP\n&PCLBL   EQU   *\n&CNT     SETA  0\n&CNT     SETA  &CNT+1\n&SEL     SETC  '&PC(&CNT)'\n.NEXTPC  ANOP\n&CNT     SETA  &CNT+1\n         AIF   (&CNT GT N'&PC).ENDPC\n&CMP     SETC  '&PC(&CNT)'\n&NLLBL   SETC  'N'.'&CMP'.'&SYSNDX'\n&CNT     SETA  &CNT+1\n&LBL     SETC  '&PC(&CNT)'\n         CLI   &SEL,C'&CMP'        Match ?\n         BNE   &NLLBL              . No\n         CONTROL DISPLAY,SAVE      Save display environment\n         CALL  &LBL                &LBL\n         CONTROL DISPLAY,RESTORE   Restore display environment\n         B     &LABEL              Redisplay\n&NLLBL   EQU *\n         AGO   .NEXTPC\n.ENDPC   ANOP\n         B     &LABEL              Redisplay\n.ENDLBL  ANOP\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* EDIT         Edit a dataset                                        *\n**********************************************************************\n&LABEL   EDIT &EDSN,&EVOL\n         AIF   ('&EVOL' EQ '').NOVOL\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'EDIT ',                                             X\n               &EDSN,                                                  X\n               &EVOL),                                                 X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.NOVOL   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'EDIT ',                                             X\n               &EDSN),                                                 X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* IHALLT       LNKLST Table (LLT)                                    *\n**********************************************************************\n         IHALLT\nLLT      DSECT                     LNKLST Table (LLT)\nLLTHEAD  DS    0CL8                Header section\nLLTID    DS    CL4                 Table id 'LLT '\nLLTCOUNT DS    F                   Number of entries in table\nLLTENTRY DS    0CL45               Table entry\nLLTDSLTH DS    AL1                 Length of data set name\nLLTDSN   DS    CL44                Data set name\n         MEND\n         MACRO\n**********************************************************************\n* IHALPAT      LPALST Table (LPAT)                                   *\n**********************************************************************\n         IHALPAT\nLPAT     DSECT                     LPALST Table (LPAT)\nLPATHDR  DS    0CL8                Header section\nLPATID   DS    CL4                 Table id 'LPAT'\nLPATCNT  DS    F                   Number of entries in table\nLPATNTRY DS    0CL45               Table entry\nLPATDSLN DS    AL1                 Length of data set name\nLPATDSN  DS    CL44                Data set name\n         MEND\n         MACRO\n**********************************************************************\n* IKJEFTSR     TSO/E Service Facility Routine                        *\n**********************************************************************\n&LABEL   IKJEFTSR\n&LABEL   L     R15,TSRADDR         IKJEFTSR address\n         CALL  (15),                                                   X\n               (TSRFLAGS,TSRBUF,TSRLEN,TSRRETRN,TSRREASN,TSRABEND),    *\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT301     TSO/E Broadcast Data Set Record 1                     *\n**********************************************************************\n         IKJZT301\nR1BC     DSECT\nR1BCPTRP DS    0AL4\nR1BCFLGS DS    AL1                 Notices flags - not used\nR1BCPTR  DS    AL3                 First notices directory RBA\nR1USPTRP DS    0AL4\nR1USFLGS DS    AL1                 User mail flags - not used\nR1USPTR  DS    AL3                 First user mail directory RBA\nR1RECNUM DS    AL4                 Total number of records\nR1BCMAX  DS    AL2                 Maximum Notices records\nR1DSN    DS    CL24                Broadcast dataset name\nR1LEVEL  DS    CL7                 Level\n         DS    CL1                 Reserved\nR1FRESRH DS    AL3                 Free search record RBA\nR1GENNUM DS    AL4                 Notice table generation number\n         DS    CL76                Reserved\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT302     TSO/E Broadcast Notices Directory Record              *\n**********************************************************************\n         IKJZT302\nBCDIR    DSECT\nBCDENTRY DS    0CL5\nBCDNOMSG DS    0AL1\nBCDMSGNO DS    XL2                 Notice message number in hex\nBCDMRBA  DS    AL3                 Notice message RBA\n         DS    24CL5               Next 24 notices\n         DS    CL8                 Reserved\nBCDREND  DS    AL1                 End of record indicator - x'7F'\nBCDNEXT  DS    AL3                 Next notice directory (zero if end)\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT303     TSO/E Broadcast Notices Message Record                *\n**********************************************************************\n         IKJZT303\nBCMSG    DSECT\nBCMLNG   DS    AL1                 Notice message length\nBCMTEXT  DS    CL125               Notice message\n         DS    CL3                 Reserved\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT304     TSO/E Broadcast Mail Directory Record                 *\n**********************************************************************\n         IKJZT304\nUSDIR    DSECT\nUSDENTRY DS    0CL13\nUSDID    DS    CL7                 Userid\nUSDRBA   DS    AL3                 First message (zero if none)\nUSDEND   DS    AL3                 Last message (zero if none)\n         DS    8CL13               Next 8 userids\n         DS    CL8                 Reserved\nUSDREND  DS    AL1                 End of record indicator - x'7F'\nUSDNEXT  DS    AL3                 Next mail directory (zero if end)\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT305     TSO/E Broadcast Mail Message Record                   *\n**********************************************************************\n         IKJZT305\nUSMSG    DSECT\nUSMLNG   DS    AL1                 Mail message length\nUSMTEXT  DS    CL125               Mail message\nUSMNEXT  DS    AL3                 Next mail message (zero if last)\n         MEND\n         MACRO\n**********************************************************************\n* ISPFINIT     Initialize ISPF Environment                           *\n**********************************************************************\n&LABEL   ISPFINIT\n*\n**       Validate ISPF Environment\n*\n&LABEL   LOAD  EP=ISPQRY,ERRET=IIEXIT Load current ISPQRY module\n         LR    R15,R0              ISPQRY address\n         BALR  R14,R15             Invoke ISPQRY\n         LTR   15,15               ISPF environment ?\n         BNZ   IIEXIT              . No\n         DELETE EP=ISPQRY          Delete current ISPQRY module\n*\n**       Load ISPF Interface Module (ISPLINK)\n*\n         LOAD  EP=ISPLINK,ERRET=IIEXIT Load current ISPLINK module\n         ST    R0,ISPLINK@         Save ISPLINK address\n*\n**       Load TSO Service Facility Routine\n*\n         LOAD  EP=IKJEFTSR,ERRET=IIEXIT Load current IKJEFTSR module\n         ST    R0,TSRADDR          Save IKJEFTSR address\n         MVC   TSRLEN,=F'100'      IKJEFTSR length\n         MVC   TSRFLAGS,=X'00000101' IKJEFTSR flags\n*\n**       Define ISPF System Variables\n*\n         VDEFINE NAMES=(DATAID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LISTID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(MEMBER),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZAPPLID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZCMD),FORMAT=CHAR,LENGTH=80\n         VDEFINE NAMES=(ZDATE),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDATEF),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDATEFD),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDAY),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(ZDLBLKSZ),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZDLCDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDLDEV),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDLDSNTP),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDLDSORG),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZDLEDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDLEXT),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZDLLRECL),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZDLMIGR),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZDLRDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDLRECFM),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZDLSIZE),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZDLUSED),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZDLVOL),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZEDLMSG),FORMAT=CHAR,LENGTH=80\n         VDEFINE NAMES=(ZEDSMSG),FORMAT=CHAR,LENGTH=24\n         VDEFINE NAMES=(ZJDATE),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZLANG),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZLOGO),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZMONTH),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(ZPLACE),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(ZPREFIX),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZSTDYEAR),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZSYSID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZTDSELS),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZTDTOP),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZTIME),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZUSER),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZYEAR),FORMAT=CHAR,LENGTH=2\nIIEXIT   EQU   *\n         MEND\n         MACRO\n**********************************************************************\n* ISPFTERM     Terminate ISPF Environment                            *\n**********************************************************************\n&LABEL   ISPFTERM\n&LABEL   VDELETE NAMES=(*)         Delete all ISPF variables\n         DELETE EP=ISPLINK         Delete current ISPLINK module\n         DELETE EP=IKJEFTSR        Delete current IKJEFTSR module\n         MEND\n         MACRO\n**********************************************************************\n* ISPFVARS     Define ISPF Variables                                 *\n**********************************************************************\n         ISPFVARS\n*\n**       Define ISPF System Variables\n*\n         CNOP  0,4                 Fullword alignment\nTSRABEND DS    F                   IKJEFTSR abend code\nTSRADDR  DS    F                   IKJEFTSR address\nTSRBUF   DS    CL133               IKJEFTSR buffer\nTSRFLAGS DS    F                   IKJEFTSR flags\nTSRLEN   DS    F                   IKJEFTSR length\nTSRREASN DS    F                   IKJEFTSR reason code\nTSRRETRN DS    F                   IKJEFTSR return code\nDATAID   DS    CL008               ISPF Data Identifier\nISPLINK@ DS    F                   ISPLINK address\nLISTID   DS    CL008               ISPF List Identifier\nMEMBER   DS    CL008               ISPF Member Name\nTABLE    DS    CL008               ISPF Table Name\nW_CL16   DS    CL016               16 byte general workarea\nW_CL512  DS    CL512               512 byte general workarea\nW_DOUBLE DS    D                   Doubleword workarea\nW_F      DS    F                   Fullword workarea\nW_H      DS    H                   Halfword workarea\nZAPPLID  DS    CL008               ISPF Application Identifier\nZCMD     DS    CL080               ISPF Command Line\nZDATE    DS    CL008               ISPF Date\nZDATEF   DS    CL008               ISPF Date\nZDATEFD  DS    CL008               ISPF Date\nZDAY     DS    CL002               ISPF Day (dd)\nZDLBLKSZ DS    CL005               ISPF Block size\nZDLCDATE DS    CL010               ISPF Creation date\nZDLDEV   DS    CL008               ISPF Device type\nZDLDSNTP DS    CL008               ISPF Dsname type 'PDS' 'LIBRARY' ' '\nZDLDSORG DS    CL004               ISPF Data set organization\nZDLEDATE DS    CL010               ISPF Expiration date\nZDLEXT   DS    CL003               ISPF Number of extents used\nZDLLRECL DS    CL005               ISPF Logical record length\nZDLMIGR  DS    CL003               ISPF Migrated 'YES' 'NO'\nZDLRDATE DS    CL010               ISPF Date last referenced\nZDLRECFM DS    CL005               ISPF Record format\nZDLSIZE  DS    CL006               ISPF Data set size in tracks\nZDLUSED  DS    CL003               ISPF Percentage of used tracks/pages\nZDLVOL   DS    CL006               ISPF Volume serial\nZEDLMSG  DS    CL080               ISPF Generic Message - Long\nZEDSMSG  DS    CL024               ISPF Generic Message - Short\nZJDATE   DS    CL006               ISPF Julian Date (yy.ddd)\nZLANG    DS    CL008               ISPF Session Language\nZLOGO    DS    CL003               ISPF Logo (YES/NO)\nZMONTH   DS    CL002               ISPF Month (mm)\nZPLACE   DS    CL007               ISPF Command Line Placement\nZPREFIX  DS    CL008               ISPF Prefix\nZSTDYEAR DS    CL004               ISPF Year (yyyy)\nZSYSID   DS    CL008               ISPF System Name\nZTDSELS  DS    CL004               ISPF Selections\nZTDTOP   DS    CL006               ISPF CRP of most recent display\nZTIME    DS    CL005               ISPF Time (hh:mm)\nZUSER    DS    CL008               ISPF User Identification\nZYEAR    DS    CL002               ISPF Year (yy)\n         MEND\n         MACRO\n**********************************************************************\n* LMCLOSE      Close a Data Set                                      *\n**********************************************************************\n&LABEL   LMCLOSE &DATAID=DATAID    Data Identifier\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMCLOSE ',                                          X\n               &DATAID),                                               X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMDFREE      Free a Data Set List ID                               *\n**********************************************************************\n&LABEL   LMDFREE &LISTID=LISTID    List Identifier\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMDFREE ',                                          X\n               &LISTID),                                               X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMDINIT      Initialize a Data Set List                            *\n**********************************************************************\n&LABEL   LMDINIT &LISTID=LISTID,   List Identifier                     X\n               &LEVEL=0,           Dataset-level                       X\n               &VOLUME=            Volume\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMDINIT ',                                          X\n               =C'&LISTID ',                                           X\n               &LEVEL),                                                X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMDLIST      List Data Sets                                        *\n**********************************************************************\n&LABEL   LMDLIST &LISTID=LISTID,   List Identifier                     X\n               &OPTION=LIST,       LIST/FREE/SAVE                      X\n               &DATASET=,          Dataset                             X\n               &STATS=NO,          YES/NO                              X\n               &GROUP=0            Group\n         AIF   ('&OPTION' EQ 'LIST').OPTIONOK,                         X\n               ('&OPTION' EQ 'FREE').OPTIONOK,                         X\n               ('&OPTION' EQ 'SAVE').OPTIONOK\n         MNOTE 8,'LMDLIST Invalid OPTION=&OPTION - LIST/FREE/SAVE'\n         AGO   .MEND\n.OPTIONOK ANOP\n         AIF   ('&STATS' EQ 'YES').STATSOK,                            X\n               ('&STATS' EQ 'NO').STATSOK\n         MNOTE 8,'LMDLIST Invalid STATS=&STATS - YES/NO'\n         AGO   .MEND\n.STATSOK ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMDLIST ',                                          X\n               &LISTID,                                                X\n               =C'&OPTION ',                                           X\n               =C'&DATASET ',                                          X\n               =C'&STATS '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMFREE       Free Data Set from its Association with Data ID       *\n**********************************************************************\n&LABEL   LMFREE &DATAID=DATAID     Data Identifier\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMFREE ',                                           X\n               &DATAID),                                               X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMINIT       Generate a Data ID for a Data Set                     *\n**********************************************************************\n&LABEL   LMINIT &DATAID=DATAID,    Data Identifier                     X\n               &DATASET=0,         Dataset-name                        X\n               &DDNAME=0,          Dd-name                             X\n               &VOLUME=0,          Volume                              X\n               &PASSWORD=0,        Password                            X\n               &ENQ=SHR            Enqueue\n         AIF   ('&ENQ' EQ 'SHR').ENQOK,                                X\n               ('&ENQ' EQ 'EXCLU').ENQOK,                              X\n               ('&ENQ' EQ 'SHRW').ENQOK,                               X\n               ('&ENQ' EQ 'MOD').ENQOK\n         MNOTE 8,'LMINIT Invalid ENQ=&ENQ - SHR/EXCLU/SHRW/MOD'\n         AGO   .MEND\n.ENQOK   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMINIT ',                                           X\n               =C'&DATAID ',                                           X\n               0,0,0,0,0,0,                                            X\n               &DATASET,                                               X\n               &DDNAME,                                                X\n               &VOLUME,                                                X\n               &PASSWORD,                                              X\n               =C'&ENQ '),                                             X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMMLIST      List a Library's Members                              *\n**********************************************************************\n&LABEL   LMMLIST &DATAID=DATAID,   Data Identifier                     X\n               &OPTION=LIST,       LIST/FREE/SAVE                      X\n               &MEMBER=,           Member-var                          X\n               &STATS=NO           YES/NO\n         AIF   ('&OPTION' EQ 'LIST').OPTIONOK,                         X\n               ('&OPTION' EQ 'FREE').OPTIONOK,                         X\n               ('&OPTION' EQ 'SAVE').OPTIONOK\n         MNOTE 8,'LMMLIST Invalid OPTION=&OPTION - LIST/FREE/SAVE'\n         AGO   .MEND\n.OPTIONOK ANOP\n         AIF   ('&STATS' EQ 'YES').STATSOK,                            X\n               ('&STATS' EQ 'NO').STATSOK\n         MNOTE 8,'LMMLIST Invalid STATS=&STATS - YES/NO'\n         AGO   .MEND\n.STATSOK ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMMLIST ',                                          X\n               &DATAID,                                                X\n               =C'&OPTION ',                                           X\n               =C'&MEMBER ',                                           X\n               =C'&STATS '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMOPEN       Open a Data Set                                       *\n**********************************************************************\n&LABEL   LMOPEN &DATAID=DATAID,    Data Identifier                     X\n               &OPTION=INPUT       Option\n         AIF   ('&OPTION' EQ 'INPUT').OPTIONOK,                        X\n               ('&OPTION' EQ 'OUTPUT').OPTIONOK\n         MNOTE 8,'LMOPEN Invalid OPTION=&OPTION - INPUT/OUTPUT'\n         AGO   .MEND\n.OPTIONOK ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMOPEN ',                                           X\n               &DATAID,                                                X\n               =C'&OPTION '),                                          X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LOG          Write a message to the log data set                   *\n**********************************************************************\n&LABEL   LOG   &MESSAGE=           MESSAGE-ID\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LOG ',                                              X\n               =C'&MESSAGE '),                                         X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* PQUERY       Obtain panel information                              *\n*                                                                    *\n*               PARAMETERS ARE :                                     *\n*               1. PANEL-NAME                                        *\n*               2. AREA-NAME                                         *\n* \"AREATYP\"  3. VARIABLE-NAME THAT WILL BE SET TO DYNAMIC OR GRAPHIC *\n* \"COLS\"     4. VARIABLE-NAME THAT WILL BE SET TO AREA-WIDTH (COLS)  *\n* \"ROWS\"     5. VARIABLE-NAME THAT WILL BE SET TO AREA-LENGTH (ROWS) *\n* \"TLROW\"    6. VARIABLE-NAME THAT WILL BE SET TO TOP LEFT ROW NUM   *\n* \"TLCOL\"    7. VARIABLE-NAME THAT WILL BE SET TO TOP LEFT COL NUM   *\n* BEFORE ISSUING \"PQUERY\", VDEFINES MUST BE DONE FOR 3 THROUGH 7.    *\n**********************************************************************\n&LABEL   PQUERY  &QPNL,&QAREA\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'PQUERY ',                                           X\n               =C'&QPNL',                                              X\n               =C'&QAREA',                                             X\n               =C'AREATYP',                                            X\n               =C'COLS',                                               X\n               =C'ROWS',                                               X\n               =C'TLROW',                                              X\n               =C'TLCOL'),                                             X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* SELECT       Select a panel or function                            *\n**********************************************************************\n&LABEL   SELECT  &SEL1,&SEL2,&SEL3,&SEL4,&SEL5\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'SELECT ',                                           X\n               =F'60.',                                                X\n               =CL60'&SEL1 &SEL2 &SEL3 &SEL4 &SEL5'),                  X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* SETMSG       Set next message                                      *\n**********************************************************************\n&LABEL   SETMSG &MESSAGE=,         MESSAGE-ID                          X\n               &COND=,             CONDITIONAL                         X\n               &MSGLOC=            MESSAGE-FIELD-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'SETMSG ',                                           X\n               =C'&MESSAGE ',                                          X\n               =C'&COND ',                                             X\n               =C'&MSGLOC '),                                          X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBADD        Add a row to a table                                  *\n**********************************************************************\n&LABEL   TBADD &TABLE=,            TABLE-NAME                          X\n               &SAVE=(),           SAVE-NAME-LIST                      X\n               &ORDER=,            ORDER                               X\n               &MULT=1             NUMBER OF ROWS\n         AIF   ('&SAVE'(1,1) EQ '(').OKSAVE\n         MNOTE 8,'TBADD SAVE=&SAVE - MUST BE IN PARENTHESIS'\n         AGO   .MEND\n.OKSAVE ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBADD ',                                            X\n               =C'&TABLE ',                                            X\n               =C'&SAVE',                                              X\n               =C'&ORDER ',                                            X\n               =F'&MULT.'),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBBOTTOM     Set the row pointer to the bottom                     *\n**********************************************************************\n&LABEL   TBBOTTOM &TABLE=          TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBBOTTOM ',                                         X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBCLOSE      Close and save a table                                *\n**********************************************************************\n&LABEL   TBCLOSE &TABLE=           TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBCLOSE ',                                          X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBCREATE     Create a new table                                    *\n**********************************************************************\n&LABEL   TBCREATE &TABLE=,         TABLE-NAME                          X\n               &KEYS=(),           KEY-NAME-LIST                       X\n               &NAMES=(),          NAME-LIST                           X\n               &WRITE=NOWRITE,     WRITE/NOWRITE                       X\n               &REPLACE=REPLACE,   REPLACE                             X\n               &LIBRARY=,          LIBRARY                             X\n               &SHARE=             SHARE\n         AIF   ('&KEYS'(1,1) EQ '(').OKKEYS\n         MNOTE 8,'TBCREATE KEYS=&KEYS - MUST BE IN PARENTHESIS'\n.OKKEYS  ANOP\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'TBCREATE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBCREATE ',                                         X\n               =C'&TABLE ',                                            X\n               =C'&KEYS',                                              X\n               =C'&NAMES',                                             X\n               =C'&WRITE ',                                            X\n               =C'&REPLACE ',                                          X\n               =C'&LIBRARY ',                                          X\n               =C'&SHARE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBDELETE     Delete a row from a table                             *\n**********************************************************************\n&LABEL   TBDELETE &TABLE=          TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBDELETE ',                                         X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBDISPL      Display table information                             *\n**********************************************************************\n&LABEL   TBDISPL &TABLE=,          TABLE-NAME                          X\n               &PANEL=,            PANEL-NAME                          X\n               &MESSAGE=,          MESSAGE-ID                          X\n               &CURSOR=,           FIELD-NAME                          X\n               &CSRROW=,           TABLE-ROW-NUMBER                    X\n               &CSRPOS=,           CURSOR-POSITION                     X\n               &AUTOSEL=NO,        AUTOSEL                             X\n               &POSITION=,         CRP-NAME                            X\n               &ROWID=,            ROWID-NAME                          X\n               &MSGLOC=,           MESSAGE-FIELD-NAME                  X\n               &PCLOC=,            Primary command locate              X\n               &PCSORT=,           Primary command sort                X\n               &LC=()              LINE-COMMAND\n         AIF   ('&LC'(1,1) EQ '(').OKLC\n         MNOTE 8,'TBDISPL LC=&LC - MUST BE IN PARENTHESIS'\n.OKLC    ANOP\n         LCLA  &CNT\n         LCLC  &NLLBL\n         LCLC  &ENDLBL,&DSP1LBL,&DSP2LBL,&NPLBL,&PRCLBL,&LCLBL,&TOPLBL\n         LCLC  &LOCLBL\n         LCLC  &CMP,&LBL,&ID,&SEL\n         AIF   ('&POSITION' NE '').POSITION\n&POSTION SETC  '&TABLE'.'CRP'\n.POSITION ANOP\n&TOPLBL  SETC  '&LABEL'\n         AIF   ('&TOPLBL' NE '').LABEL\n&TOPLBL  SETC  'TOP'.'&SYSNDX'\n.LABEL   ANOP\n&DSP1LBL SETC  'DSP1'.'&SYSNDX'\n&DSP2LBL SETC  'DSP2'.'&SYSNDX'\n&ENDLBL  SETC  'END'.'&SYSNDX'\n&LOCLBL  SETC  'LOC'.'&SYSNDX'\n&SRTLBL  SETC  'SRT'.'&SYSNDX'\n&PRCLBL  SETC  'PRC'.'&SYSNDX'\n&LCLBL   SETC  'LC'.'&SYSNDX'\n         MVC   TABLE,=CL8'&TABLE'  Table name\n&TOPLBL  MVC   ZCMD,=CL80' '       Clear primary command\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBDISPL ',                                          X\n               =C'&TABLE ',                                            X\n               =C'&PANEL ',                                            X\n               =C'&MESSAGE ',                                          X\n               =C'&CURSOR ',                                           X\n               =C'&CSRROW ',                                           X\n               =C'&CSRPOS ',                                           X\n               =C'&AUTOSEL ',                                          X\n               =C'&POSITION ',                                         X\n               =C'&ROWID ',                                            X\n               =C'&MSGLOC '),                                          X\n               VL,MF=(E,W_CL512)\n         C     R15,=F'8'           End ?\n         BNL   &ENDLBL             . Yes\n         AIF   ('&PCLOC' EQ '').PCLOC\n         CLC   ZCMD(1),=CL1'L'     Primary command - Locate ?\n         BNE   &LOCLBL             . No\n         CALL  &PCLOC              Primary command - Locate\n         B     &TOPLBL\n&LOCLBL  EQU *\n.PCLOC   ANOP\n         AIF   ('&PCSORT' EQ '').PCSORT\n         CLC   ZCMD(1),=CL1'S'     Primary command - Sort ?\n         BNE   &SRTLBL             . No\n         CALL  &PCSORT             Primary command - Sort\n         B     &TOPLBL\n&SRTLBL  EQU *\n.PCSORT  ANOP\n&PRCLBL  EQU *\n         AIF   ('&LC' NE '()').LC\n         B     &TOPLBL             Redisplay\n         AGO   .ENDLBL\n.LC      ANOP\n         MVC   &TABLE.SEL,ZTDSELS\n&LCLBL   EQU   *\n&CNT     SETA  0\n&CNT     SETA  &CNT+1\n&SEL     SETC  '&LC(&CNT)'\n.NEXTLC  ANOP\n&CNT     SETA  &CNT+1\n         AIF   (&CNT GT N'&LC).ENDLC\n&CMP     SETC  '&LC(&CNT)'\n&NLLBL   SETC  'N'.'&CMP'.'&SYSNDX'\n&CNT     SETA  &CNT+1\n&LBL     SETC  '&LC(&CNT)'\n         CLC   &SEL,=C'&CMP'       Match ?\n         BNE   &NLLBL              . No\n         CONTROL DISPLAY,SAVE      Save display environment\n         CALL  &LBL                &LBL\n         CONTROL DISPLAY,RESTORE   Restore display environment\n         B     &DSP1LBL\n&NLLBL   EQU *\n         AGO   .NEXTLC\n.ENDLC   ANOP\n         CLI   &SEL,C' '           Blank ?\n         BE    &DSP2LBL            . Yes\n&DSP1LBL MVI   &SEL,C' '           Clear line command\n         CLC   &TABLE.SEL,=CL4'0001'\n         BNH   &TOPLBL\n&DSP2LBL L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBDISPL ',                                          X\n               =C'&TABLE ',                                            X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C'&POSITION ',                                         X\n               =C' ',                                                  X\n               =C' '),                                                 X\n               VL,MF=(E,W_CL512)\n         C     R15,=F'8'           End ?\n         BNL   &ENDLBL             . Yes\n         B     &PRCLBL             Reprocess selections\n.ENDLBL  ANOP\n&ENDLBL  EQU   *                   End/Return\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBEND        Close a table without saving                          *\n**********************************************************************\n&LABEL   TBEND &TABLE=             TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBEND ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBERASE      Erase a table                                         *\n**********************************************************************\n&LABEL   TBERASE &TABLE=,          TABLE-NAME                          X\n               &LIBRARY=ISPTABL    LIBRARY-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBERASE ',                                          X\n               =C'&TABLE ',                                            X\n               =C'&LIBRARY '),                                         X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBEXIST      Determine whether a row exists in a table             *\n**********************************************************************\n&LABEL   TBEXIST &TABLE=           TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBEXIST ',                                          X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBGET        Retrieve a row from a table                           *\n**********************************************************************\n&LABEL   TBGET &TABLE=             TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBGET ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBMOD        Modify a row from table                               *\n**********************************************************************\n&LABEL   TBMOD &TABLE=,            TABLE-NAME                          X\n               &SAVE=(),           SAVE-NAME-LIST                      X\n               &ORDER=             ORDER\n         AIF   ('&SAVE'(1,1) EQ '(').OKSAVE\n         MNOTE 8,'TBMOD SAVE=&SAVE - MUST BE IN PARENTHESIS'\n.OKSAVE  ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBMOD ',                                            X\n               =C'&TABLE ',                                            X\n               =C'&SAVE',                                              X\n               =C'&ORDER '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBOPEN       Open a table                                          *\n**********************************************************************\n&LABEL   TBOPEN &TABLE=,           TABLE-NAME                          X\n               &WRITE=WRITE,       WRITE/NOWRITE                       X\n               &LIBRARY=ISPTLIB,   LIBRARY                             X\n               &SHARE=             SHARE\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBOPEN ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&WRITE ',                                            X\n               =C'&LIBRARY ',                                          X\n               =C'&SHARE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBPUT        Update a row from table                               *\n**********************************************************************\n&LABEL   TBPUT &TABLE=             TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBPUT ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBQUERY      Obtain table information                              *\n**********************************************************************\n&LABEL   TBQUERY &TABLE=,          TABLE-NAME                          X\n               &KEYS=,             KEY-NAME                            X\n               &NAMES=,            VAR-NAME                            X\n               &ROWNUM=,           ROWNUM-NAME                         X\n               &KEYNUM=,           KEYNUM-NAME                         X\n               &NAMENUM=,          NAMENUM-NAME                        X\n               &POSITION=          CRP-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBQUERY ',                                          X\n               =C'&TABLE ',                                            X\n               =C'&KEYS ,',                                            X\n               =C'&NAMES ,',                                           X\n               =C'&ROWNUM ,',                                          X\n               =C'&KEYNUM ,',                                          X\n               =C'&NAMENUM ,',                                         X\n               =C'&POSITION '),                                        X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSARG       Define a search argument                              *\n**********************************************************************\n&LABEL   TBSARG &TABLE=,           TABLE-NAME                          X\n               &ARGLIST=(),        NAME-LIST                           X\n               &MODE=NEXT,         NEXT/PREVIOUS                       X\n               &NAMECOND=()        NAME-COND-PAIRS\n         AIF   ('&ARGLIST'(1,1) EQ '(').ARGLIST\n         MNOTE 8,'TBSARG ARGLIST=&ARGLIST - MUST BE IN PARENTHESIS'\n.ARGLIST ANOP\n         AIF   ('&MODE' EQ 'NEXT').MODE\n         AIF   ('&MODE' EQ 'PREVIOUS').MODE\n         MNOTE 8,'TBSARG MODE=&MODE - MUST BE NEXT OR PREVIOUS'\n.MODE    ANOP\n         AIF   ('&NAMECOND'(1,1) EQ '(').NAMECOND\n         MNOTE 8,'TBSARG NAMECOND=&NAMECOND - MUST BE IN PARENTHESIS'\n.NAMECOND ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSARG ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&ARGLIST',                                           X\n               =C'&MODE ',                                             X\n               =C'&NAMECOND'),                                         X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSAVE       Save a table                                          *\n**********************************************************************\n&LABEL   TBSAVE &TABLE=            TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSAVE ',                                           X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSCAN       Search a table                                        *\n**********************************************************************\n&LABEL   TBSCAN &TABLE=,           TABLE-NAME                          X\n               &ARGLIST=(),        NAME-LIST                           X\n               &SAVENAME=,         VAR-NAME                            X\n               &ROWID=,            ROWID-NAME                          X\n               &MODE=NEXT,         NEXT/PREVIOUS                       X\n               &NOREAD=,           NOREAD                              X\n               &POSITION=,         CRP-NAME                            X\n               &CONDLIST=()        CONDITION-VALUE-LIST\n         AIF   ('&ARGLIST'(1,1) EQ '(').ARGLIST\n         MNOTE 8,'TBSCAN ARGLIST=&ARGLIST - MUST BE IN PARENTHESIS'\n.ARGLIST ANOP\n         AIF   ('&MODE' EQ 'NEXT').MODE\n         AIF   ('&MODE' EQ 'PREVIOUS').MODE\n         MNOTE 8,'TBSCAN MODE=&MODE - MUST BE NEXT OR PREVIOUS'\n.MODE    ANOP\n         AIF   ('&CONDLIST'(1,1) EQ '(').CONDLIST\n         MNOTE 8,'TBSCAN CONDLIST=&CONDLIST - MUST BE IN PARENTHESIS'\n.CONDLIST ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSCAN ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&ARGLIST',                                           X\n               =C'&SAVENAME ',                                         X\n               =C'&ROWID ',                                            X\n               =C'&MODE ',                                             X\n               =C'&NOREAD ',                                           X\n               =C'&POSITION ',                                         X\n               =C'&CONDLIST'),                                         X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSKIP       Move the row pointer                                  *\n**********************************************************************\n&LABEL   TBSKIP &TABLE=,           TABLE-NAME                          X\n               &NUMBER=+1,         NUMBER                              X\n               &VAR=,              VAR-NAME                            X\n               &ROWID=,            ROWID-NAME                          X\n               &ROW=,              ROWID                               X\n               &NOREAD=,           NOREAD                              X\n               &CRP=,              CRP-NAME                            X\n               &END=               END\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSKIP ',                                           X\n               =C'&TABLE ',                                            X\n               =F'&NUMBER',                                            X\n               =C'&VAR ',                                              X\n               =C'&ROWID ',                                            X\n               =C'&ROW ',                                              X\n               =C'&NOREAD ',                                           X\n               =C'&CRP '),                                             X\n               VL,MF=(E,W_CL512)\n         AIF   ('&END' EQ '').MEND\n         C     R15,=F'0'           End ?\n         BNE   &END                . Yes\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSORT       Sort a table                                          *\n**********************************************************************\n&LABEL   TBSORT &TABLE=,           TABLE-NAME                          X\n               &FIELDS=()          SORT-LIST - FIELD,B|C|N,A|D\n         LCLC  &IFIELDS,&ITABLE\n         AIF   ('&TABLE'(1,1) NE '@').TABLE\n&ITABLE  SETC  '&TABLE'(2,K'&TABLE-1)\n         AIF   ('&FIELDS'(1,1) NE '@').TIFD\n&IFIELDS SETC  '&FIELDS'(2,K'&FIELDS-1)\n.TIFI    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               &ITABLE,                                                X\n               &IFIELDS),                                              X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TIFD    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               &ITABLE,                                                X\n               =C'&FIELDS'),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TABLE   ANOP\n         AIF   ('&FIELDS'(1,1) NE '@').TDFD\n&IFIELDS SETC  '&FIELDS'(2,K'&FIELDS-1)\n.TDFI    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               =C'&TABLE ',                                            X\n               &IFIELDS),                                              X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TDFD    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&FIELDS'),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBTOP        Set the row pointer to the top                        *\n**********************************************************************\n&LABEL   TBTOP &TABLE=             TABLE-NAME\n         LCLC  &ITABLE\n         AIF   ('&TABLE'(1,1) NE '@').TABLE\n&ITABLE  SETC  '&TABLE'(2,K'&FIELDS-1)\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBTOP ',                                            X\n               &ITABLE),                                               X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TABLE   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBTOP ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBVCLEAR     Clear table variables                                 *\n**********************************************************************\n&LABEL   TBVCLEAR &TABLE=          TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBVCLEAR ',                                         X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VCOPY        Create a copy of a variable                           *\n**********************************************************************\n&LABEL   VCOPY &NAMES=(),          NAME-LIST                           X\n               &LENGTH=8,          LENGTH                              X\n               &VARIABLE=,         VARIABLE                            X\n               &MODE=              LOCATE/MOVE\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VCOPY NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n         AIF   ('&MODE' EQ 'LOCATE').MODE\n         AIF   ('&MODE' EQ 'MOVE').MODE\n         MNOTE 8,'VCOPY - MODE=&MODE INVALID - MUST BE LOCATE OR MOVE'\n         MEXIT\n.MODE    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VCOPY ',                                            X\n               =C'&NAMES ',                                            X\n               =F'&LENGTH',                                            X\n               &VARIABLE,                                              X\n               =C'&MODE '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VDEFINE      Define function variables                             *\n**********************************************************************\n&LABEL   VDEFINE &NAMES=(),        NAME-LIST                           X\n               &VARIABLE=,         VARIABLE                            X\n               &FORMAT=CHAR,       FORMAT                              X\n               &LENGTH=8,          LENGTH                              X\n               &OPTIONS=,          OPTIONS                             X\n               &USERDATA=          USER-DATA\n         LCLC  &VAR\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VDEFINE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n         AIF   ('&VARIABLE' EQ '').NOVAR\n&VAR     SETC  '&VARIABLE'\n         AGO   .ENDVAR\n.NOVAR   ANOP\n&VAR     SETC  '&NAMES'(2,K'&NAMES-2)\n.ENDVAR  ANOP\n         AIF   ('&OPTIONS' EQ '').NOOPT\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDEFINE ',                                          X\n               =C'&NAMES',                                             X\n               &VAR,                                                   X\n               =C'&FORMAT ',                                           X\n               =F'&LENGTH.',                                           X\n               =C'&OPTIONS '),                                         X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.NOOPT   ANOP\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDEFINE ',                                          X\n               =C'&NAMES',                                             X\n               &VAR,                                                   X\n               =C'&FORMAT ',                                           X\n               =F'&LENGTH.'),                                          X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VDELETE      Remove a definition of function variables             *\n**********************************************************************\n&LABEL   VDELETE &NAMES=()         NAME-LIST\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VDELETE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDELETE ',                                          X\n               =C'&NAMES'),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VGET         Retrieve variables from a pool or profile             *\n**********************************************************************\n&LABEL   VGET  &NAMES=(),          NAME-LIST                           X\n               &POOL=PROFILE       ASIS/SHARED/PROFILE\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VGET NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VGET ',                                             X\n               =C'&NAMES ',                                            X\n               =C'&POOL '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VMASK        Mask and Edit Processing                              *\n**********************************************************************\n&LABEL   VMASK &NAMES=(),          NAME-LIST                           X\n               &FORMAT=,           SYSTEM-FORMAT                       X\n               &LENGTH=,           LENGTH                              X\n               &USER=              USER-FORMAT\n         LCLC  &VAR\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VMASK NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n         AIF   ('&FORMAT' EQ '').NOFORMAT\n         AIF   ('&FORMAT' EQ 'LOCATE').FORMAT\n         AIF   ('&FORMAT' EQ 'IDATE').FORMAT\n         AIF   ('&FORMAT' EQ 'STDDATE').FORMAT\n         AIF   ('&FORMAT' EQ 'ITIME').FORMAT\n         AIF   ('&FORMAT' EQ 'STDTIME').FORMAT\n         AIF   ('&FORMAT' EQ 'JDATE').FORMAT\n         AIF   ('&FORMAT' EQ 'JSTD').FORMAT\n         MNOTE 8,'VMASK - FORMAT=&FORMAT Invalid'\n         MEXIT\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VMASK ',                                            X\n               =C'&NAMES ',                                            X\n               =C'FORMAT ',                                            X\n               =C'&FORMAT '),                                          X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.NOFORMAT ANOP\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VMASK ',                                            X\n               =C'&NAMES ',                                            X\n               =C'USER ',                                              X\n               =C'&USER ',                                             X\n               =F'&LENGTH.'),                                          X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VPUT         Update variables in the shared or profile pool        *\n**********************************************************************\n&LABEL   VPUT  &NAMES=(),          NAME-LIST                           X\n               &POOL=PROFILE       ASIS/SHARED/PROFILE\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VPUT NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VPUT ',                                             X\n               =C'&NAMES ',                                            X\n               =C'&POOL '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VREPLACE     Replace a variable                                    *\n*                                                                    *\n*              THE FIRST PARAMETER IS VARIABLE-NAME, SECOND FULLWORD *\n*              LENGTH, THIRD THE DATA.                               *\n**********************************************************************\n&LABEL   VREPLACE &FLD,&LEN,&DATA\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VREPLACE ',                                         X\n               =C'(&FLD) ',                                            X\n               &LEN,                                                   X\n               &DATA),                                                 X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VRESET       Reset function variables                              *\n**********************************************************************\n&LABEL   VRESET\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VRESET '),                                          X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$UDP": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00\\x00\\x00\\x97'\\x0f\\x00\\x98\\x03O\\x01\\x10\\x00\\x1c\\x00\\x07\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "1997-09-27T00:00:00", "modifydate": "1998-02-03T01:10:00", "lines": 28, "newlines": 7, "modlines": 0, "user": "ZT15"}, "text": "         MACRO\n**********************************************************************\n* $UDP         User Defined Products                                 *\n**********************************************************************\n* Intructions:                                                       *\n* - Uncomment the sample entry and modify it to suite your needs.    *\n* - Add as many product entries as required.                         *\n* - Change 'SYSPARM(NO$UDP)' to 'SYSPARM($UDP)' before               *\n*   submitting the assembly job.                                     *\n*                                                                    *\n*                    Module Prefix                                   *\n*                    | - Case sensetive                              *\n*                    | - Fixed length of 8 bytes                     *\n*                    | - Left justified                              *\n*                    | - Implicitly generic                          *\n*                    |                                               *\n*                    |               Product Name                    *\n*                    |               | - Case sensetive              *\n*                    |               | - Fixed length of 12 bytes    *\n*                    |               | - Left justified              *\n*                    |               |                               *\n*        DC    CL008'PREFIX  ',CL012'Product'\n**********************************************************************\n         $UDP\n         DC    CL008'COLLECT ',CL012'FTS'\n         DC    CL008'DISTRIB ',CL012'FTS'\n         DC    CL008'FTS     ',CL012'FTS'\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE302": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t)\\x8f\\x01\\t)\\x8f\\x15\\x04\\x00\\x13\\x00\\x13\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-10-25T00:00:00", "modifydate": "2009-10-25T15:04:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 302 is from Michael Cleary and contains a program to      *   FILE 302\n//*           show a lot of information about LPA-loaded programs   *   FILE 302\n//*           and Link List programs.                               *   FILE 302\n//*                                                                 *   FILE 302\n//*     Description:   LPALNK ISPF Interface                        *   FILE 302\n//*                                                                 *   FILE 302\n//*     Function:      Provides interactive analysis of the         *   FILE 302\n//*                    Link Pack Area (LPA), Link Pack Area         *   FILE 302\n//*                    Library List (LPALST), Link Library List     *   FILE 302\n//*                    (LNKLST).  Major functions include           *   FILE 302\n//*                    Dataset Attributes, Modules, Duplicate       *   FILE 302\n//*                    Modules and Products.                        *   FILE 302\n//*                                                                 *   FILE 302\n//*     Contact:  Michael J. Cleary                                 *   FILE 302\n//*               IBM Global Services                               *   FILE 302\n//*               310-602-4105 (voice)                              *   FILE 302\n//*               mailto:michaeljosephcleary@yahoo.com              *   FILE 302\n//*               http://sites.google.com/site/michaeljosephcleary/ *   FILE 302\n//*                                                                 *   FILE 302\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LL@PRIM": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01M\\x00\\x00\\x00\\x97!\\x7f\\x00\\x98\\x04\\x8f!2\\x003\\x00#\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.77", "flags": 0, "createdate": "1997-08-05T00:00:00", "modifydate": "1998-02-17T21:32:00", "lines": 51, "newlines": 35, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD(_)\n $ TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(TURQ)\n ` TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n)BODY EXPAND(\\\\)\n                              +LPALNK Primary Menu\n}Command ===>_ZCMD\n+\n}Function . ._Z+ %1 {Dataset Attributes\n                 %2 {Modules\n                 %3 {Products\n                 %4 {Duplicate Modules\n                 %5 {Post CLPA Modules\n+\n}Mode . . . ._Z       %LPA    {Link Pack Area\n                      %LPALST {Link Pack Area Library List\n                      %LNKLST {Link Library List\n                      %ALL    {LPA, LPALST and LNKLST\n+\n}Sort . . . ._Z       %LOC    {Location\n                      %NAME   {Module or product name\n                      %SIZE   {Module or product size\n+\n}Exclude  . ._Z                                           +\n}         . ._Z                                           +\n}         . ._Z                                           +\n}         . ._Z                                           +\n             %Dataset names to exclude from LPALST and LNKLST processing\n+\n+\n+Enter}END+command to terminate LPALNK\n)INIT\n .ZVARS  = '(LLFUNC,LLMODE,LLSORT,LLEXCL1,LLEXCL2,LLEXCL3,LLEXCL4)'\n .CURSOR = LLFUNC\n &ZCMD   = ' '\n)REINIT\n)PROC\n VER(&LLFUNC,LIST,1,2,3,4,5)\n VER(&LLMODE,LIST,LPA,LPALST,LNKLST,ALL)\n VER(&LLSORT,LIST,LOC,NAME,SIZE)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LLDA": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01K\\x00\\x00\\x00\\x97!\\x7f\\x00\\x98\\x04\\x8f!1\\x00+\\x00\\x1f\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.75", "flags": 0, "createdate": "1997-08-05T00:00:00", "modifydate": "1998-02-17T21:31:00", "lines": 43, "newlines": 31, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD('.')\n $ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(GREEN)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(TURQ)\n ` TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(YELLOW)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n)BODY EXPAND(\\\\)\n                      +LPALNK Dataset Attributes -$LLMODE\n}Command ===>_ZCMD                                            }Scroll ===>_ZSCML\n{  Actions:    Primary(L-Locate) Line(S-Select)\n+\n@LLDA1\n@LLDA2\n+\n{  Name                                 Location   Volser Mbrs Blksz Trks Ex Pct\n)MODEL\n!Z@LLDSN                               |LLLOC     |Z     ~Z   ~Z    ~Z   ~Z ~Z\n)INIT\n VGET (ZSCML) PROFILE\n IF (&ZSCML = ' ')\n    &ZSCML = 'CSR'\n &M1       = '********************'\n &M2       = '******* End of Dataset Attributes ******'\n &ZTDMARK  = '&M1&M2&M1'\n &ZCMD     = ' '\n &Z1       = 'LLDALC,ZDLVOL,LLMEM'\n &Z2       = 'ZDLBLKSZ,ZDLSIZE,ZDLEXT,ZDLUSED'\n .ZVARS    = '(&Z1,&Z2)'\n &LLDALC   =' '\n)REINIT\n &LLDALC   =' '\n)PROC\n VPUT (ZSCML) PROFILE\n VER(&LLDALC,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LLDM": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x98\\x04\\x0f\\x00\\x98\\x04\\x8f!F\\x002\\x00+\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1998-02-09T00:00:00", "modifydate": "1998-02-17T21:46:00", "lines": 50, "newlines": 43, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD('.')\n $ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(GREEN)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)  COLOR(GREEN)\n ` TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n)BODY EXPAND(\\\\)\n                       +LPALNK Duplicate Modules -$LLMODE\n}Command ===>_ZCMD                                            }Scroll ===>_ZSCML\n{  Actions:    Primary(L-Locate) Line(S-Select)\n+\n{     R24C       R24S   RANYC      RANYS    MODC       MODS    ALIC\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPA\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPALST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LNKLST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +Total\n+\n{  Name         Size Location   Alias-of AC  AM  RM ---Attributes-- Product\n)MODEL\n!Z@Z       ~Z       |Z         |Z       |Z ~Z  ~Z  #Z              |Z\n)INIT\n VGET (ZSCML) PROFILE\n IF (&ZSCML = ' ')\n    &ZSCML = 'CSR'\n &Z1       = 'T124C,T124S,T1ANC,T1ANS,T1MOC,T1MOS,T1ALC'\n &Z2       = 'T224C,T224S,T2ANC,T2ANS,T2MOC,T2MOS,T2ALC'\n &Z3       = 'T324C,T324S,T3ANC,T3ANS,T3MOC,T3MOS,T3ALC'\n &Z4       = 'T424C,T424S,T4ANC,T4ANS,T4MOC,T4MOS,T4ALC'\n &Z5       = 'LLDMLC,LLMNAME,LLSIZE,LLLOC,LLALIAS'\n &Z6       = 'LLAC,LLAM,LLRM,LLATTR,LLPROD'\n .ZVARS    = '(&Z1,&Z2,&Z3,&Z4,&Z5,&Z6)'\n &M1       = '********************'\n &M2       = '******* End of Duplicate Modules *******'\n &ZTDMARK  = '&M1&M2&M1'\n &ZCMD     = ' '\n &LLDMLC   =' '\n)REINIT\n &LLDMLC   =' '\n)PROC\n VPUT (ZSCML) PROFILE\n VER(&LLDMLC,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LLMO": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\\\\\x00\\x00\\x00\\x97\"\\x0f\\x00\\x98\\x04\\x8f T\\x002\\x00*\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.92", "flags": 0, "createdate": "1997-08-08T00:00:00", "modifydate": "1998-02-17T20:54:00", "lines": 50, "newlines": 42, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD('.')\n $ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(GREEN)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)  COLOR(GREEN)\n ` TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n)BODY EXPAND(\\\\)\n                            +LPALNK Modules -$LLMODE\n}Command ===>_ZCMD                                            }Scroll ===>_ZSCML\n{  Actions:    Primary(L-Locate) Line(S-Select)\n+\n{     R24C       R24S   RANYC      RANYS    MODC       MODS    ALIC\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPA\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPALST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LNKLST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +Total\n+\n{  Name         Size Location   Alias-of AC  AM  RM ---Attributes-- Product\n)MODEL\n!Z@Z       ~Z       |Z         |Z       |Z ~Z  ~Z  #Z              |Z\n)INIT\n VGET (ZSCML) PROFILE\n IF (&ZSCML = ' ')\n    &ZSCML = 'CSR'\n &Z1       = 'T124C,T124S,T1ANC,T1ANS,T1MOC,T1MOS,T1ALC'\n &Z2       = 'T224C,T224S,T2ANC,T2ANS,T2MOC,T2MOS,T2ALC'\n &Z3       = 'T324C,T324S,T3ANC,T3ANS,T3MOC,T3MOS,T3ALC'\n &Z4       = 'T424C,T424S,T4ANC,T4ANS,T4MOC,T4MOS,T4ALC'\n &Z5       = 'LLMOLC,LLMNAME,LLSIZE,LLLOC,LLALIAS'\n &Z6       = 'LLAC,LLAM,LLRM,LLATTR,LLPROD'\n .ZVARS    = '(&Z1,&Z2,&Z3,&Z4,&Z5,&Z6)'\n &M1       = '********************'\n &M2       = '************ End of Modules ************'\n &ZTDMARK  = '&M1&M2&M1'\n &ZCMD     = ' '\n &LLMOLC   =' '\n)REINIT\n &LLMOLC   =' '\n)PROC\n VPUT (ZSCML) PROFILE\n VER(&LLMOLC,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LLPCM": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x98\\x04_\\x00\\x98\\x04\\x8f!G\\x002\\x002\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-02-14T00:00:00", "modifydate": "1998-02-17T21:47:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD('.')\n $ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(GREEN)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)  COLOR(GREEN)\n ` TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n)BODY EXPAND(\\\\)\n                       +LPALNK Post CLPA Modules -$LLMODE\n}Command ===>_ZCMD                                            }Scroll ===>_ZSCML\n{  Actions:    Primary(L-Locate) Line(S-Select)\n+\n{     R24C       R24S   RANYC      RANYS    MODC       MODS    ALIC\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPA\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPALST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LNKLST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +Total\n+\n{  Name         Size Location   Alias-of AC  AM  RM ---Attributes-- Product\n)MODEL\n!Z@Z       ~Z       |Z         |Z       |Z ~Z  ~Z  #Z              |Z\n)INIT\n VGET (ZSCML) PROFILE\n IF (&ZSCML = ' ')\n    &ZSCML = 'CSR'\n &Z1       = 'T124C,T124S,T1ANC,T1ANS,T1MOC,T1MOS,T1ALC'\n &Z2       = 'T224C,T224S,T2ANC,T2ANS,T2MOC,T2MOS,T2ALC'\n &Z3       = 'T324C,T324S,T3ANC,T3ANS,T3MOC,T3MOS,T3ALC'\n &Z4       = 'T424C,T424S,T4ANC,T4ANS,T4MOC,T4MOS,T4ALC'\n &Z5       = 'LLPCMLC,LLMNAME,LLSIZE,LLLOC,LLALIAS'\n &Z6       = 'LLAC,LLAM,LLRM,LLATTR,LLPROD'\n .ZVARS    = '(&Z1,&Z2,&Z3,&Z4,&Z5,&Z6)'\n &M1       = '********************'\n &M2       = '************ End of Modules ************'\n &ZTDMARK  = '&M1&M2&M1'\n &ZCMD     = ' '\n &LLPCMLC  =' '\n)REINIT\n &LLPCMLC  =' '\n)PROC\n VPUT (ZSCML) PROFILE\n VER(&LLPCMLC,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LLPR": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01X\\x00\\x00\\x00\\x97\\x17o\\x00\\x98\\x04\\x8f!G\\x003\\x00\\x1e\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.88", "flags": 0, "createdate": "1997-06-25T00:00:00", "modifydate": "1998-02-17T21:47:00", "lines": 51, "newlines": 30, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD('.')\n $ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(GREEN)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(TURQ)\n ` TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n)BODY EXPAND(\\\\)\n                            +LPALNK Products -$LLMODE\n}Command ===>_ZCMD                                            }Scroll ===>_ZSCML\n{  Actions:    Primary(L-Locate) Line(S-Select)\n+\n{     R24C       R24S   RANYC      RANYS    MODC       MODS    ALIC\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPA\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPALST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LNKLST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +Total\n+\n{               LPA              LPA               LPALST            LNKLST\n{  Name         R24size      Size   Count       Size   Count       Size   Count\n)MODEL\n!Z@LLPROD      ~Z     +~Z        +~Z     +~Z        +~Z     +~Z        +~Z     +\n)INIT\n VGET (ZSCML) PROFILE\n IF (&ZSCML = ' ')\n    &ZSCML = 'CSR'\n &Z1       = 'T124C,T124S,T1ANC,T1ANS,T1MOC,T1MOS,T1ALC'\n &Z2       = 'T224C,T224S,T2ANC,T2ANS,T2MOC,T2MOS,T2ALC'\n &Z3       = 'T324C,T324S,T3ANC,T3ANS,T3MOC,T3MOS,T3ALC'\n &Z4       = 'T424C,T424S,T4ANC,T4ANS,T4MOC,T4MOS,T4ALC'\n &Z5       = 'LLPRLC'\n &Z6       = 'P124S,P1MOS,P1MOC,P2MOS,P2MOC,P3MOS,P3MOC'\n .ZVARS    = '(&Z1,&Z2,&Z3,&Z4,&Z5,&Z6)'\n &M1       = '********************'\n &M2       = '************ End of Products ***********'\n &ZTDMARK  = '&M1&M2&M1'\n &ZCMD     = ' '\n &LLPRLC   =' '\n)REINIT\n &LLPRLC   =' '\n)PROC\n VPUT (ZSCML) PROFILE\n VER(&LLPRLC,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LLPRS": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x98\\x04\\x0f\\x00\\x98\\x04\\x8f!G\\x002\\x00/\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1998-02-09T00:00:00", "modifydate": "1998-02-17T21:47:00", "lines": 50, "newlines": 47, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD('.')\n $ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(GREEN)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(ASIS)  COLOR(GREEN)\n ` TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n)BODY EXPAND(\\\\)\n                     +LPALNK$LLPNAME     +Modules -$LLMODE\n}Command ===>_ZCMD                                            }Scroll ===>_ZSCML\n{  Actions:    Primary(L-Locate) Line(S-Select)\n+\n{     R24C       R24S   RANYC      RANYS    MODC       MODS    ALIC\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPA\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LPALST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +LNKLST\n  *Z      *Z         *Z      *Z         *Z      *Z         *Z      +Total\n+\n{  Name         Size Location   Alias-of AC  AM  RM ---Attributes-- Product\n)MODEL\n!Z@Z       ~Z       |Z         |Z       |Z ~Z  ~Z  #Z              |Z\n)INIT\n VGET (ZSCML) PROFILE\n IF (&ZSCML = ' ')\n    &ZSCML = 'CSR'\n &Z1       = 'T124C,T124S,T1ANC,T1ANS,T1MOC,T1MOS,T1ALC'\n &Z2       = 'T224C,T224S,T2ANC,T2ANS,T2MOC,T2MOS,T2ALC'\n &Z3       = 'T324C,T324S,T3ANC,T3ANS,T3MOC,T3MOS,T3ALC'\n &Z4       = 'T424C,T424S,T4ANC,T4ANS,T4MOC,T4MOS,T4ALC'\n &Z5       = 'LLPRSLC,LLMNAME,LLSIZE,LLLOC,LLALIAS'\n &Z6       = 'LLAC,LLAM,LLRM,LLATTR,LLPROD'\n .ZVARS    = '(&Z1,&Z2,&Z3,&Z4,&Z5,&Z6)'\n &M1       = '********************'\n &M2       = '************ End of Modules ************'\n &ZTDMARK  = '&M1&M2&M1'\n &ZCMD     = ' '\n &LLPRSLC  =' '\n)REINIT\n &LLPRSLC  =' '\n)PROC\n VPUT (ZSCML) PROFILE\n VER(&LLPRSLC,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LPALNK": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x00\\x00\\x97)_\\x00\\x98\\x04\\x8f\"\\x04\\x0c\\xe9\\x08_\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1997-10-22T00:00:00", "modifydate": "1998-02-17T22:04:00", "lines": 3305, "newlines": 2143, "modlines": 0, "user": "ZT15"}, "text": "//&SYSUID.LL JOB (SZTECH),'LPALNK',\n//             CLASS=U,MSGCLASS=X,NOTIFY=&SYSUID.\n//JESDS OUTPUT PAGEDEF=LDUP,FORMDEF=LDUP,JESDS=ALL,FORMS=3H25\n//ASM     EXEC PGM=ASMA90,PARM='NODECK,OBJ'\n//STEPLIB   DD DISP=SHR,DSN=SYS1.SASMMOD1\n//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//          DD DISP=SHR,DSN=ZTGP01.MJCUTIL.MACLIB    <=== $COMMON\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS\n//SYSLIN    DD DSN=&&OBJECT,SPACE=(CYL,(9,9)),UNIT=SYSDA,\n//             DISP=(NEW,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS)\n//SYSIN     DD *\n         TITLE 'LPALNK - LPALNK ISPF Interface'\nLPALNK   START 0\n**********************************************************************\n*                                                                    *\n* Name:            LPALNK                                            *\n*                                                                    *\n* Description:     LPALNK ISPF Interface                             *\n*                                                                    *\n* Function:        Provides interactive analysis of the Link Pack    *\n*                  Area (LPA), Link Pack Area Library List (LPALST), *\n*                  Link Library List (LNKLST). Major functions       *\n*                  include Dataset Attributes, Modules, Duplicate    *\n*                  Modules and Products.                             *\n*                                                                    *\n* Installation:    1) Inventory LPALNK                               *\n*                     The LPALNK PDS contains the following.         *\n*                     Member    Type      Contents                   *\n*                     ======    ====      ========                   *\n*                     $COMMON   ASM/MACRO Common Macros              *\n*                     $UDP      ASM/MACRO User Defined Products      *\n*                     LPALNK    ASM/JCL   LPALNK ISPF Interface      *\n*                     LL@PRIM   ISPPLIB   LPALNK ISPF Panel          *\n*                     LLDA      ISPPLIB   LPALNK ISPF Panel          *\n*                     LLDM      ISPPLIB   LPALNK ISPF Panel          *\n*                     LLMO      ISPPLIB   LPALNK ISPF Panel          *\n*                     LLPCM     ISPPLIB   LPALNK ISPF Panel          *\n*                     LLPR      ISPPLIB   LPALNK ISPF Panel          *\n*                     LLPRS     ISPPLIB   LPALNK ISPF Panel          *\n*                                                                    *\n*                  2) Assemble and link-edit LPALNK                  *\n*                  The assembly and linkedit of LPALNK must both     *\n*                  get a return code zero.                           *\n*                                                                    *\n*                  3) Make LPALNK Available                          *\n*                  The load module and panels need to be available   *\n*                  on ISPLLIB and ISPPLIB allocations respectively.  *\n*                  The most straightforward way to accomplish this   *\n*                  is with LIBDEF's in a CLIST or REXX EXEC.         *\n*                                                                    *\n*                  PROC 0                                            *\n*                  CONTROL NOMSG                                     *\n*                  ISPEXEC LIBDEF ISPPLIB DATASET ID('?.ISPPLIB')    *\n*                  ISPEXEC LIBDEF ISPLLIB DATASET ID('?.ISPLLIB')    *\n*                  ISPEXEC SELECT PGM(LPALNK)                        *\n*                  ISPEXEC LIBDEF ISPPLIB                            *\n*                  ISPEXEC LIBDEF ISPLLIB                            *\n*                  EXIT                                              *\n*                                                                    *\n*                  4) Add Unknown Modules to LPALNK                  *\n*                  Modules that are not in the product table will    *\n*                  show up under a product called Unknown.  If       *\n*                  you can identify what products these modules      *\n*                  belong to, add them to either the product         *\n*                  table or to the $UDP macro as a User Defined      *\n*                  Product.  The default $UDP macro contains         *\n*                  entries for an installation written File          *\n*                  Transfer System (FTS).  Actual vendor products    *\n*                  should be added to the product table and          *\n*                  installation specific modules should be added     *\n*                  to the $UDP macro.  The $UDP macro was            *\n*                  designed to be customized and carried forward     *\n*                  when LPALNK is upgraded.  Please send me          *\n*                  information about vendor products that you have   *\n*                  added so that they can be incorporated into       *\n*                  the base LPALNK product table.                    *\n*                                                                    *\n*                  5) Remove previous levels of LPALNK               *\n*                  If a previous level of LPA, LPAISPF or LPALNK was *\n*                  installed on your system, delete all load modules *\n*                  and panels associated with that previous level.   *\n*                                                                    *\n* Contact:         Michael J. Cleary                                 *\n*                  Mainframe Technical Services                      *\n*                  Bergen Brunswig                                   *\n*                  4000 Metropolitan Drive                           *\n*                  Orange, California  92868                         *\n*                  Voice:  714.385.4052                              *\n*                  Fax     714.704.7052                              *\n*                  Email:  mike.cleary@bergenbrunswig.com            *\n*                                                                    *\n* Abend codes:     None                                              *\n*                                                                    *\n* Addressing mode: 31                                                *\n*                                                                    *\n* ASC mode:        Primary                                           *\n*                                                                    *\n* Change Log:      06/20/97 - Version 1 Release 0 Modification 0     *\n*                  07/23/97 - Version 1 Release 0 Modification 1     *\n*                  09/29/97 - Version 1 Release 0 Modification 2     *\n*                  02/17/98 - Version 1 Release 0 Modification 3     *\n*                                                                    *\n* Copyright:       None                                              *\n*                                                                    *\n* Control blocks:  Contents module information (MODI)                *\n*                  Communications Vector Table (CVT)                 *\n*                  Global Data Area (GDA)                            *\n*                  LNKLST Table (LLT)                                *\n*                  LPALST Table (LPAT)                               *\n*                  PDS Directory Entry (PDSE)                        *\n*                                                                    *\n* CSECTs:          Yes, quite a few actually!                        *\n*                                                                    *\n* Dependencies:    None                                              *\n*                                                                    *\n* Disclaimer:                                                        *\n*                                                                    *\n*   Bergen Brunswig neither expresses nor implies any warranty as    *\n*   to the fitness of these computer programs for any function.      *\n*   The use of these programs or the results therefrom is            *\n*   entirely at the risk of the user.  Consequently, the user may    *\n*   modify these programs in any way they think fit.  These          *\n*   programs are Freeware and may be freely copied.  They may be     *\n*   freely distributed to any other party on condition that no       *\n*   inducement beyond reasonable handling costs is offered or        *\n*   accepted by either side for such distribution.                   *\n*                                                                    *\n* DSECTs:          Contents module information (MODI)                *\n*                  Communications Vector Table (CVT)                 *\n*                  Global Data Area (GDA)                            *\n*                  LNKLST Table (LLT)                                *\n*                  LPALNK Dynamic Work Area (LLDWA)                  *\n*                  LPALST Table (LPAT)                               *\n*                  PDS Directory Entry (PDSE)                        *\n*                                                                    *\n* Entry points:    LPALNK                                            *\n*                                                                    *\n* Environment:     MVS/ESA, TSO, ISPF                                *\n*                                                                    *\n* Input:           None                                              *\n*                                                                    *\n* Key:             8                                                 *\n*                                                                    *\n* Language:        MVS 370 assembler                                 *\n*                                                                    *\n* Linkage:         Standard linkage for entry/exit                   *\n*                                                                    *\n* Location:        Private                                           *\n*                                                                    *\n* Macros:                                                            *\n*   Name     Usage Description                                       *\n*   ======== ===== ===========                                       *\n*   $COMMON  1 2   Common Macros                                     *\n*   $UDP       2   User Defined Products                             *\n*   CALL     1 2   Pass Control to a Control Section                 *\n*   CSVINFO    2   Obtain Information about Loaded Modules           *\n*   DELETE   1     Relinquish Control of a Load Module               *\n*   LOAD     1     Bring a Load Module into Virtual Storage          *\n*   RETURN   1     Return Control                                    *\n*   SAVE     1     Save Register Contents                            *\n*   SPLEVEL  1     Set Macro Level                                   *\n*   STORAGE  1 2   Obtain and Release Storage                        *\n*                  Usage:    1 = Common Macros, 2 = LPALNK           *\n*                                                                    *\n* Messages:        None                                              *\n*                                                                    *\n* Mode:            Task                                              *\n*                                                                    *\n* Module type:     Procedure                                         *\n*                                                                    *\n* Output:          LPALNK information                                *\n*                                                                    *\n* Parameter list:  None                                              *\n*                                                                    *\n* Patch label:     None                                              *\n*                                                                    *\n* Reason codes:    None                                              *\n*                                                                    *\n* Recovery:        None                                              *\n*                                                                    *\n* Reentrancy:      Reentrant                                         *\n*                                                                    *\n* Registers:       Saved:         0-12,14-15 via SAVE(14,12)         *\n*                  Restored:      0-12,14 via RETURN(14,12),RC=(15)  *\n*                  Base:          11/12                              *\n*                  Dynamic work:  10                                 *\n*                  Static work:   9                                  *\n*                                                                    *\n* Return codes:    Zero - Normal completion                          *\n*                                                                    *\n* Residence mode:  24                                                *\n*                                                                    *\n* Savearea:        Dynamically obtained storage                      *\n*                                                                    *\n* Serialization:   None                                              *\n*                                                                    *\n* Size:            Approximately 55KB                                *\n*                                                                    *\n* State:           Problem                                           *\n*                                                                    *\n* Status:          Version 1 Release 0 Modification 3                *\n*                                                                    *\n* Tables:          Product table - Module/Product relationship       *\n*                                                                    *\n* User Exits:      None                                              *\n*                                                                    *\n* Virtual Storage: Dynamic Work Area, 3KB, Below                     *\n*                  Product Table, 21KB, Any                          *\n*                                                                    *\n* Wait states:     None                                              *\n*                                                                    *\n* X-memory mode:   HASID=PASID=SASID                                 *\n*                                                                    *\n**********************************************************************\n         TITLE '$COMMON - Common Macros'\n**********************************************************************\n         PRINT OFF                 Stop source and object printing\n         COPY  $COMMON             Common Macros\n         PRINT ON                  Resume source and object printing\n**********************************************************************\n         TITLE 'LPALNK - Mainline'\n**********************************************************************\nLPALNK   $ENTRY DWA=(LLDWA,R10,LLDWA#),   Entry                        X\n               DWALOC=BELOW,                                           X\n               SWA=(LLSWA,R9)\n         GBLA  &COMMON             Common Macros Level\n         AIF   (&COMMON GE 3).COMMON\n         MNOTE 8,'Wrong level of $COMMON, Required=3, Found=&COMMON'\n         AGO   .COMMON\n.COMMON  ANOP\n         CALL  LLINIT              Initialization\n         CALL  LLPROC              Process\n         CALL  LLTERM              Termination\nLPALNK   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLBRIF - LPALNK Browse Interface'\n**********************************************************************\nLLBRIF   $ENTRY                    Entry\n*        R4 - Fullword pointer to record read (output)\n*        R5 - Fullword fixed binary record length (output - V,VA,VM,U)\n*        R6 - Fullword relative record number\n*             a) Record requested (input)\n*             b) Record provided (output if RC=4/8)\n*        R7 - Fullword dialog data area address\n         LM    R4,R7,0(R1)         BRIF parameters\n         L     R10,0(,R7)          LPALNK dynamic workarea\n         L     R3,0(,R6)           Requested record number\n         C     R3,BRIFCNT          Requested record status ?\n         BH    BRIFEOF             . EOF\n         BE    BRIFLAST            . Last record\n*\n**       Normal Module Record\n*\nBRIFNORM EQU   *                   . Normal record\n         BCTR  R3,0                Relative to zero\n         M     R2,=F'80'           Calculate offset\n         A     R3,BRIFADR          Determine address\n         ST    R3,0(,R4)           Pass record address to BRIF\n         B     LLBRIF0             Exit - RC=0\n*\n**       Last Module Record\n*\nBRIFLAST EQU   *\n         L     R15,BRIFREM         Remainder\n         LTR   R15,R15             Any remainder ?\n         BZ    BRIFNORM            No, process normally\n         BCTR  R3,0                Relative to zero\n         M     R2,=F'80'           Calculate offset\n         A     R3,BRIFADR          Determine address\n         $FILL LLMODLN,C' '        Clear module line\n         L     R15,BRIFREM         Remaining length\n         $VLM  LLMODLN,0(,R3),(R15) Move remaining module line\n         LA    R15,LLMODLN         LPALNK module line address\n         ST    R15,0(,R4)          Pass record address to BRIF\n         B     LLBRIF0             Exit - RC=0\n*\n**       No More Module Records\n*\nBRIFEOF  MVC   0(4,R6),BRIFCNT     Maximum record number\n         B     LLBRIF8             Exit - RC=8\nLLBRIF   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLDA - Dataset Attributes'\n**********************************************************************\nLLDA     $ENTRY                    Entry\n         CLC   LLMODE,=CL6'LPA'    LPA Mode ?\n         BNE   DAMODEOK           . No\n         MVC   ZEDSMSG,=CL24'Invalid Parameters'\n         MVC   ZEDLMSG,=CL80'Specified mode of LPA is invalid with funcX\n               tion of Dataset Attributes'\n         SETMSG MESSAGE=ISRZ001    Set next message\n         B     LLDA0               Exit\nDAMODEOK EQU   *\n         CALL  LLGDSN              Get Dataset Names\n         TBQUERY TABLE=XXXLST,ROWNUM=LLDACRP\n         CLC   LLDACRP,=CL8'00000000' Any Datasets ?\n         BNE   DADSNOK             . Yes\n         MVC   ZEDSMSG,=CL24'No Datasets'\n         MVC   ZEDLMSG,=CL80'Specified mode resulted in no datasets beiX\n               ng selected'\n         SETMSG MESSAGE=ISRZ001    Set next message\n         B     LLDA0               Exit\nDADSNOK  EQU   *\n         MVC   LLDA1,LLDA1D        Message 1 default\n         MVC   LLDA2,LLDA2D        Message 2 default\n         TBCREATE TABLE=LLDA,      Create a New Table                  X\n               NAMES=(LLDSN,ZDLVOL,LLMEM,ZDLBLKSZ,ZDLEXT,ZDLSIZE,ZDLUSEX\n               D,LLLOC)\n         TBTOP TABLE=XXXLST        Set the Row Pointer to the Top\n*\n**       Next Dataset\n*\nDANXTDSN EQU   *\n         TBSKIP TABLE=XXXLST,END=DAENDTBL Move the Row Pointer\n         MVC   LLDSN,LSTDSN        Dataset name\n         MVC   LLLOC,LSTLOC        Dataset location\n         $FILL TEMPDSN,C' '        Clear dataset name\n         MVI   TEMPDSN+00,X'7D'    Open Quote\n         MVC   TEMPDSN+01(44),LLDSN Move dataset name\n         $FIND TEMPDSN,C' '        Find first blank\n         MVI   0(R14),X'7D'        Close Quote\n         LMDINIT LEVEL=LLDSN       Initialize a Data Set List ID\n         LMDLIST OPTION=LIST,      List Data Sets                      X\n               DATASET=LLDSN,                                          X\n               STATS=YES\n*\n**       Check for Optimized Blocksize\n*\n         CLC   ZDLBLKSZ,=CL5'32760' Optimized blocksize ?\n         BE    DABLKSOK            . Yes\n         MVC   LLDA1,LLDA1W        Message 1 warning\nDABLKSOK EQU   *\n         LMDLIST OPTION=FREE       List Data Sets\n         LMDFREE                   Free a Data Set List ID\n         LMINIT DATASET=TEMPDSN,   Generate a Data ID for a Data Set   X\n               ENQ=SHR\n         LMOPEN OPTION=INPUT       Open a Data Set\n         XC    LLMEM,LLMEM         Clear member count\n         $FILL MEMBER,C' '         Clear member name\n*\n**       Next Member\n*\nDANXTMEM EQU   *\n         LMMLIST OPTION=LIST,      List a Library's Members            X\n               MEMBER=MEMBER,                                          X\n               STATS=NO\n         C     R15,=F'0'           OK ?\n         BNE   DAENDMEM            . No - End of members\n         $INCR LLMEM               Increment member count\n         B     DANXTMEM            Process next member\n*\n**       End of Members\n*\nDAENDMEM EQU   *\n*\n**       Check for Empty Dataset\n*\n         CLC   LLMEM,=F'0'         Dataset empty ?\n         BNE   DAMEMOK             . No\n         MVC   LLDA2,LLDA2W        Message 2 warning\nDAMEMOK  EQU   *\n         LMMLIST OPTION=FREE       List a Library's Members\n         LMCLOSE                   Close a Data Set\n         LMFREE                    Free Data Set from its Data ID\n         TBADD TABLE=LLDA          Update a row from table\n         B     DANXTDSN            Process next dataset, if any\nDAENDTBL EQU   *\n*\n**       Sort Dataset Attributes\n*\nDASORT   EQU   *\n         CLC   LLSORT,=CL8'LOC'    Location ?\n         BE    DALOC               . Yes\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BE    DANAME              . Yes\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BE    DASIZE              . Yes\nDALOC    EQU   *\n         TBSORT TABLE=LLDA,        Sort a Table                        X\n               FIELDS=(LLLOC,C,A)\n         B     DASORTX             Continue\nDANAME   EQU   *\n         TBSORT TABLE=LLDA,        Sort a Table                        X\n               FIELDS=(LLDSN,C,A)\n         B     DASORTX             Continue\nDASIZE   EQU   *\n         TBSORT TABLE=LLDA,        Sort a Table                        X\n               FIELDS=(ZDLSIZE,C,D)\n         B     DASORTX             Continue\nDASORTX  EQU   *\n*\n**       Display Dataset Attributes\n*\n         TBTOP TABLE=LLDA          Set the Row Pointer to the Top\n         TBDISPL TABLE=LLDA,       Display Table Information           X\n               PANEL=LLDA,                                             X\n               PCLOC=LLPCLOC,                                          X\n               LC=(LLDALC,S,LLDAS)\n*\n**       Termination\n*\n         TBEND TABLE=LLDA          Close a Table without Saving\nLLDA     $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLDAS - Dataset Attributes Select'\n**********************************************************************\nLLDAS    $ENTRY                    Entry\n*\n**       Build DSN\n*\n         CLC   LLMEM,=F'0'         Dataset empty ?\n         BNE   DASMEMOK            . No\n         MVC   ZEDSMSG,=CL24'Empty Dataset'\n         MVC   ZEDLMSG,=CL80'Specified dataset cannot be selected becauX\n               se it is empty'\n         SETMSG MESSAGE=ISRZ001    Set next message\n         B     LLDAS0              Exit\nDASMEMOK EQU   *\n         $FILL TEMPDSN,C' '        Clear dataset name\n         MVI   TEMPDSN+00,X'7D'    Open Quote\n         $FIND LLDSN,C' '          Find first blank\n         $VLM  TEMPDSN+01,LLDSN,(R15),DECREMENT=NO Move DSN\n         $FIND TEMPDSN,C' '        Find first blank\n         MVI   0(R14),X'7D'        Close Quote\n         BROWSE DATASET=TEMPDSN    Browse\nLLDAS    $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLDM - Duplicate Modules'\n**********************************************************************\nLLDM     $ENTRY                    Entry\n*\n**       Initialization\n*\n         TBCREATE TABLE=LLDM,      Create a New Table                  X\n               NAMES=(LLMNAME,LLEPA,LLAM,LLAL,LLAC,LLATTR,LLRM,LLALIAS,X\n               LLSIZE,LLLEN,LLLOC,LLPROD,LLDSN,LLEPAC)\n*\n**       Get Modules\n*\n         CALL  LLGMODS             Get modules\n*\n**       Top of Table\n*\nDMTOPTBL EQU   *\n         $FILL LLMATCH,C' '        Clear member match\n         TBTOP TABLE=LLMOD         Set the Row Pointer to the Top\n         TBSKIP TABLE=LLMOD        Move the Row Pointer\n*\n**       Next Table Entry\n*\nDMNXTTBL EQU   *\n         MVC   LLMEMO,LLMNAME      Save current member name\n         TBSKIP TABLE=LLMOD,END=DMENDTBL Move the Row Pointer\n         CLC   LLMNAME,LLMEMO       Match ?\n         BE    DMMATCH             . Yes\n         $FILL LLMATCH,C' '        Clear member match\n         B     DMNXTTBL            Next table entry\n*\n**       Identify Duplicates\n*\nDMMATCH  EQU   *\n         CLC   LLMATCH,LLMNAME     Previous match ?\n         BE    DMMATCHP            . Yes\n         TBSKIP TABLE=LLMOD,NUMBER=-1 Move the Row Pointer\n         TBADD TABLE=LLDM          Add a Row to a Table\n         TBSKIP TABLE=LLMOD        Move the Row Pointer\n         TBADD TABLE=LLDM          Add a Row to a Table\n         MVC   LLMATCH,LLMNAME     Indicate member match\n         B     DMNXTTBL            Next table entry\nDMMATCHP EQU   *\n         TBADD TABLE=LLDM          Add a Row to a Table\n         MVC   LLMATCH,LLMNAME     Indicate member match\n         B     DMNXTTBL            Next table entry\n*\n**       End of Table\n*\nDMENDTBL EQU   *\n*\n**       Display Module Duplication\n*\n         TBEND TABLE=LLMOD         Close a Table without Saving\n         TBTOP TABLE=LLDM          Set the Row Pointer to the Top\n*        TBVCLEAR TABLE=LLDM       Clear table variables\n*        MVC   LLMNAME,=CL8'*'     All members\n*       TBSARG TABLE=LLDM,        Define a Search Argument            X\n*              NAMECOND=(LLMNAME,EQ)\n         TBDISPL TABLE=LLDM,       Display Table Information           X\n               PANEL=LLDM,                                             X\n               PCLOC=LLPCLOC,                                          X\n               LC=(LLDMLC,S,LLMOS)\n*\n**       Termination\n*\n         TBEND TABLE=LLDM          Close a Table without Saving\nLLDM     $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLGDSN - Get Dataset Names'\n**********************************************************************\nLLGDSN   $ENTRY                    Entry\n*\n**       Dataset Names\n*\n         TBCREATE TABLE=XXXLST,    Create a New Table                  X\n               NAMES=(LSTDSN,LSTLOC)\n         CLC   LLMODE,=CL6'LPALST' LPALST mode ?\n         BE    GDSNLPA             . Yes\n         CLC   LLMODE,=CL6'ALL'    ALL mode ?\n         BE    GDSNLPA             . Yes\n         B     GDSNLPAX            . No\nGDSNLPA  EQU   *\n         L     R15,CVTPTR          CVT address\n         USING CVT,R15             CVT reference\n         L     R15,CVTSMEXT        VSE address\n         DROP  R15                 CVT dereference\n         USING CVTVSTGX,R15        VSE reference\n         L     R15,CVTEPLPS        LPAT address\n         DROP  R15                 VSE dereference\n         USING LPAT,R15            LPAT reference\n         LA    R4,LPATNTRY         Beginning address\n         L     R5,LPATCNT          Dataset count\n         DROP  R15                 LPAT dereference\n         XC    LLDSNUM,LLDSNUM     Clear dataset number\nINITLPAN EQU   *\n         CLC   LLEXCL1,1(R4)       Exclude ?\n         BE    GDSNLPAI            . Yes\n         CLC   LLEXCL2,1(R4)       Exclude ?\n         BE    GDSNLPAI            . Yes\n         CLC   LLEXCL3,1(R4)       Exclude ?\n         BE    GDSNLPAI            . Yes\n         CLC   LLEXCL4,1(R4)       Exclude ?\n         BE    GDSNLPAI            . Yes\n         MVC   LSTLOC,=CL10'LPALST+000'\n         L     R15,LLDSNUM         Insert dataset number\n         CVD   R15,DOUBLE          Convert dataset number\n         OI    DOUBLE+7,X'0F'      Force sign\n         UNPK  LSTLOC+7(3),DOUBLE+6(2) Unpack dataset number\n         MVC   LSTDSN,1(R4)        Move dataset name\n         TBADD TABLE=XXXLST        Add a Row to a Table\nGDSNLPAI EQU   *\n         LA    R4,45(R4)           Next entry\n         $INCR LLDSNUM             Dataset number\n         BCT   R5,INITLPAN         Process next dataset, if any\nGDSNLPAX EQU   *\n*\n**       LNKLST Datasets\n*\n         CLC   LLMODE,=CL6'LNKLST' LNKLST mode ?\n         BE    GDSNLNK             . Yes\n         CLC   LLMODE,=CL6'ALL'    ALL mode ?\n         BE    GDSNLNK             . Yes\n         B     GDSNLNKX            . No\nGDSNLNK  EQU   *\n         L     R15,CVTPTR          CVT address\n         USING CVT,R15             CVT reference\n         L     R15,CVTLLTA         LLT address\n         DROP  R15                 CVT dereference\n         USING LLT,R15             LLT reference\n         LA    R4,LLTENTRY         Beginning address\n         L     R5,LLTCOUNT         Dataset count\n         DROP  R15                 LLT dereference\n         XC    LLDSNUM,LLDSNUM     Clear dataset number\nINITLNKN EQU   *\n         CLC   LLEXCL1,1(R4)       Exclude ?\n         BE    GDSNLNKI            . Yes\n         CLC   LLEXCL2,1(R4)       Exclude ?\n         BE    GDSNLNKI            . Yes\n         CLC   LLEXCL3,1(R4)       Exclude ?\n         BE    GDSNLNKI            . Yes\n         CLC   LLEXCL4,1(R4)       Exclude ?\n         BE    GDSNLNKI            . Yes\n         MVC   LSTLOC,=CL10'LNKLST+000'\n         L     R15,LLDSNUM         Insert dataset number\n         CVD   R15,DOUBLE          Convert dataset number\n         OI    DOUBLE+7,X'0F'      Force sign\n         UNPK  LSTLOC+7(3),DOUBLE+6(2) Unpack dataset number\n         MVC   LSTDSN,1(R4)        Move dataset name\n         TBADD TABLE=XXXLST        Add a Row to a Table\nGDSNLNKI EQU   *\n         LA    R4,45(R4)           Next entry\n         $INCR LLDSNUM             Dataset number\n         BCT   R5,INITLNKN         Process next dataset, if any\nGDSNLNKX EQU   *\nLLGDSN   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLG24 - Perform QSAM IO'\n**********************************************************************\nLLG24    $ENTRY RMODE=24,AMODE=24  Entry\n         GET   XXXLST,LLDIRBLK\nLLG24    $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLGLPA - Get LPA Modules'\n**********************************************************************\nLLGLPA   $ENTRY                    Entry\n         L     R3,=A(LLMIPR)       MIPR address\n         STM   R9,R10,LLMIPRUD     LLDWA/LLSWA for MIPR\n         CSVINFO ENV=MVS,                                              X\n               FUNC=LPA,                                               X\n               MIPR=(3),                                               X\n               USERDATA=LLMIPRUD,                                      X\n               MF=(E,CSVINFO)\nLLGLPA   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLGLST - Get XXXLST Modules'\n**********************************************************************\nLLGLST   $ENTRY                    Entry\n         CALL  LLGDSN              Get Dataset Names\n         TBTOP TABLE=XXXLST        Set the Row Pointer to the Top\n*\n**       Next Dataset\n*\nGLNXTDS  EQU   *\n         TBVCLEAR TABLE=LLMOD      Clear table variables\n         TBSKIP TABLE=XXXLST,END=GLLNKX Move the Row Pointer\n         MVC   LLDSN,LSTDSN        Dataset name\n         MVC   LLLOC,LSTLOC        Dataset location\n         $FILL TEMPDSN,C' '        Clear dataset name\n         MVI   TEMPDSN+00,X'7D'    Open Quote\n         MVC   TEMPDSN+01(44),LLDSN Move dataset name\n         $FIND TEMPDSN,C' '        Find first blank\n         MVI   0(R14),X'7D'        Close Quote\n*\n**       Allocate LNKLST dataset\n*\n         MVC   TSRBUF,LLALLOC      Copy alloc command\n         MVC   TSRBUF+22(44),TEMPDSN Copy dsn command\n         IKJEFTSR                  TSO/E Service Facility Routine\n*\n**       Open LNKLST dataset\n*\n         MVC   XXXLST(L_XXXLST),T_XXXLST Copy DCB template\n         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list\n         OPEN  XXXLST,MF=(E,W_OPENI) Open LNKLST\n*\n**       Next Directory block\n*\nGLNXTDB  EQU   *\n         L     R15,=A(LLG24)\n         BASSM 14,15\n         LH    R5,LLDIRBLK         Used bytes in this db\n         LA    R6,LLDIRBLK         Current entry\n         AR    R5,R6               End\n         LA    R6,2(R6)            Current entry\n         USING PDS2,R6             PDSE Basic reference\nGLNXTDE  EQU   *\n         CLC   0(8,R6),=8XL1'FF'   Logical end of directory ?\n         BE    GLENDMEM            . Yes\n         XR    R7,R7               Clear\n         IC    R7,PDS2INDC         Load indicator byte\n         N     R7,=F'31'           Isolate 5 bit user data length\n         SLL   R7,1                Convert halfwords to bytes\n         $INCR LLMEM               Increment member count\n         MVC   LLMNAME,PDS2NAME    Member\n         $FILL LLALIAS,C' '        Alias\n         MVC   LLEPA,PDS2EPA       EPA\n         $HEX  LLEPAC,LLEPA,LEN=8  Entry point address\n         XR    R15,R15             Clear SMF record type\n         ICM   R15,B'0111',PDS2STOR Size\n         ST    R15,LLSIZE          Size\n         MVC   LLLEN,LLSIZE        Length\n         TM    PDS2INDC,PDS2ALIS   Alias ?\n         BNO   GLNOALIAS           . No\n         LA    R15,PDSBCEND        Basic end\n         TM    PDS2ATR1,PDS2SCTR   Scatter ?\n         BNO   GLNOSCTR            . No\n         LA    R15,PDSS01LN(R15) Alias\n         DROP  R6                  PDSE Basic dereference\nGLNOSCTR EQU   *\n         USING PDSS02,R15          PDSE Alias reference\n         MVC   LLALIAS,PDS2MNM     Major name\n         MVC   LLSIZE,=F'0'        Size\n         DROP  R15                 PDSE Alias dereference\n         USING PDS2,R6             PDSE Basic reference\nGLNOALIAS EQU  *\n*\n**       Authorization Code\n*\nGLSTAC   EQU   *\n         MVC   LLAC,=CL2'00'       Authorization code 00\n*        TM    MODI_ATTR3,MODI_AUTH_MOD Authorized program ?\n*        BNO   GLSTACX             . No\n*        MVC   LLAC,=CL2'01'       Authorization code 01\n         B     GLSTACX             Continue\nGLSTACX  EQU   *\n*\n**       Addressing Mode\n*\nGLSTAM   EQU   *\n         MVC   LLAM,=CL2'24'       A24\n*        TM    MODI_ENT@,MODI_AMODE A31 ?\n*        BNO   GLSTAMX             . No\n*        MVC   LLAM,=CL2'31'       A31\nGLSTAMX  EQU   *\n*\n**       Residence Mode\n*\n         TM    PDS2FTB2,PDSLRMOD   Residence mode ANY ?\n         BNO   GLSTRM24            . No\n         MVC   LLRM,=CL3'ANY'      Residence mode ANY\n         B     GLSTRMX             Continue\nGLSTRM24 EQU   *\n         MVC   LLRM,=CL3' 24'      Residence mode 24\n         B     GLSTRMX             Continue\nGLSTRMX  EQU   *\n         CALL  LLSTATT             Statistics\n         CALL  LLGPROD             Get product\n         TBADD TABLE=LLMOD         Add a Row to a Table\n         LA    R6,12(R7,R6)        Next directory entry address\n         CR    R6,R5               End of directory block ?\n         BL    GLNXTDE             . No, process next directory entry\n         B     GLNXTDB             . Yes, process next directory block\n*\n**       End of Members\n*\nGLENDMEM EQU   *\n         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list\n         CLOSE XXXLST,MF=(E,W_CLOSE) Close LNKLST\n*\n**       Free XXXLST dataset\n*\n         MVC   TSRBUF,LLFREE       Copy free command\n         IKJEFTSR                  TSO/E Service Facility Routine\n         B     GLNXTDS             Next\nGLLNKX   EQU     *\n         DROP  R6                  PDSE Basic dereference\nLLGLST   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLGMODS - Get Modules'\n**********************************************************************\nLLGMODS  $ENTRY                    Entry\n*\n**       Create Module Table\n*\n         TBCREATE TABLE=LLMOD,     Create a New Table                  X\n               NAMES=(LLMNAME,LLEPA,LLAM,LLAL,LLAC,LLATTR,LLRM,LLALIAS,X\n               LLSIZE,LLLEN,LLLOC,LLPROD,LLDSN,LLEPAC)\n         XC    T1ALC,T1ALC         Clear LPA total alias count\n         XC    T1ANC,T1ANC         Clear LPA total RANY count\n         XC    T1ANS,T1ANS         Clear LPA total RANY size\n         XC    T1MOC,T1MOC         Clear LPA total module count\n         XC    T1MOS,T1MOS         Clear LPA total module size\n         XC    T124C,T124C         Clear LPA total R24 count\n         XC    T124S,T124S         Clear LPA total R24 size\n         XC    T2ALC,T2ALC         Clear LPALST total alias count\n         XC    T2ANC,T2ANC         Clear LPALST total RANY count\n         XC    T2ANS,T2ANS         Clear LPALST total RANY size\n         XC    T2MOC,T2MOC         Clear LPALST total module count\n         XC    T2MOS,T2MOS         Clear LPALST total module size\n         XC    T224C,T224C         Clear LPALST total R24 count\n         XC    T224S,T224S         Clear LPALST total R24 size\n         XC    T3ALC,T3ALC         Clear LNKLST total alias count\n         XC    T3ANC,T3ANC         Clear LNKLST total RANY count\n         XC    T3ANS,T3ANS         Clear LNKLST total RANY size\n         XC    T3MOC,T3MOC         Clear LNKLST total module count\n         XC    T3MOS,T3MOS         Clear LNKLST total module size\n         XC    T324C,T324C         Clear LNKLST total R24 count\n         XC    T324S,T324S         Clear LNKLST total R24 size\n         XC    T4ALC,T4ALC         Total total alias count\n         XC    T4ANC,T4ANC         Total total RANY count\n         XC    T4ANS,T4ANS         Total total RANY size\n         XC    T4MOC,T4MOC         Total total module count\n         XC    T4MOS,T4MOS         Total total module size\n         XC    T424C,T424C         Total total R24 count\n         XC    T424S,T424S         Total total R24 size\n*\n**       Get LPA Modules\n*\n         CLC   LLMODE,=CL6'LPA'    LPA mode ?\n         BE    GMLPA               . Yes\n         CLC   LLMODE,=CL6'ALL'    ALL mode ?\n         BE    GMLPA               . Yes\n         B     GMLPAX              . No\nGMLPA    EQU   *\n         CALL  LLGLPA              Get LPA modules\nGMLPAX   EQU   *\n*\n**       Get XXXLST Modules\n*\n         CLC   LLMODE,=CL6'LPALST' LPALST mode ?\n         BE    GMLST               . Yes\n         CLC   LLMODE,=CL6'LNKLST' LNKLST mode ?\n         BE    GMLST               . Yes\n         CLC   LLMODE,=CL6'ALL'    ALL mode ?\n         BE    GMLST               . Yes\n         B     GMLSTX              . No\nGMLST    EQU   *\n         CALL  LLGLST              Get XXXLST modules\nGMLSTX   EQU   *\n*\n**       Sort Module Table\n*\nGMSORT   EQU   *\n         CLC   LLSORT,=CL8'LOC'    Location ?\n         BE    GMLOC               . Yes\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BE    GMNAME              . Yes\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BE    GMSIZE              . Yes\nGMLOC    EQU   *\n         TBSORT TABLE=LLMOD,       Sort a Table                        X\n               FIELDS=(LLLOC,C,A)\n         B     GMSORTX             Continue\nGMNAME   EQU   *\n         TBSORT TABLE=LLMOD,       Sort a Table                        X\n               FIELDS=(LLMNAME,C,A)\n         B     GMSORTX             Continue\nGMSIZE   EQU   *\n         TBSORT TABLE=LLMOD,       Sort a Table                        X\n               FIELDS=(LLSIZE,N,D)\n         B     GMSORTX             Continue\nGMSORTX  EQU   *\nLLGMODS  $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLGPROD - Get Product'\n**********************************************************************\nLLGPROD  $ENTRY                    Entry\n*\n**       Check Major Name\n*\n         LA    R4,TBLPRODC         Product table count\n         L     R5,LLPTA            Product table address\nGPNEXT1  EQU   *\n         $FIND (0(R5),8),C' '      Find first blank\n         $VLC  LLALIAS,0(R5),(R15),DECREMENT=NO Major match ?\n         BE    GPMATCH             . Yes\n         LA    R5,TBLPRODE(R5)     Next product table entry\n         BCT   R4,GPNEXT1          Process next product, if any\n*\n**       Check Minor Name\n*\n         LA    R4,TBLPRODC         Product table count\n         L     R5,LLPTA            Product table address\nGPNEXT2  EQU   *\n         $FIND (0(R5),8),C' '      Find first blank\n         $VLC  LLMNAME,0(R5),(R15),DECREMENT=NO Alias match ?\n         BE    GPMATCH             . Yes\n         LA    R5,TBLPRODE(R5)     Next product table entry\n         BCT   R4,GPNEXT2          Process next product, if any\n*\n**       Termination\n*\nGPMATCH  EQU   *\n         MVC   LLPROD,8(R5)        Product\n         CLC   LLMNAME,LLEPAC      Is this DFSMS ?\n         BNE   LLGPROD0            . No, exit\n         MVC   LLPROD,=CL12'DFSMS' DFSMS\nLLGPROD  $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLINIT - Initialization'\n**********************************************************************\nLLINIT   $ENTRY                    Entry\n*\n**       Initialize ISPF Environment\n*\n         ISPFINIT                  Initialize ISPF environment\n*\n**       Statistics Definition\n*\n         CALL    LLSTATD           Statistics Definition\n*\n**       Define ISPF Variables\n*\n         VDEFINE NAMES=(LLAC),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(LLAL),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(LLALIAS),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLAM),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(LLATTR),FORMAT=CHAR,LENGTH=15\n         VDEFINE NAMES=(LLDACRP),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLDALC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(LLDA1),FORMAT=CHAR,LENGTH=80\n         VDEFINE NAMES=(LLDA2),FORMAT=CHAR,LENGTH=80\n         VDEFINE NAMES=(LLDMCRP),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLDMLC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(LLDSN),FORMAT=CHAR,LENGTH=44\n         VDEFINE NAMES=(LLDSNUM),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(LLEPA),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(LLEPAC),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLEXCL1),FORMAT=CHAR,LENGTH=44\n         VDEFINE NAMES=(LLEXCL2),FORMAT=CHAR,LENGTH=44\n         VDEFINE NAMES=(LLEXCL3),FORMAT=CHAR,LENGTH=44\n         VDEFINE NAMES=(LLEXCL4),FORMAT=CHAR,LENGTH=44\n         VDEFINE NAMES=(LLFUNC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(LLLEN),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(LLLOC),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(LLMEM),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(LLMNAME),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLMODCRP),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLMODE),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(LLMOLC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(LLPCMCRP),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLPCMLC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(LLPNAME),FORMAT=CHAR,LENGTH=12\n         VDEFINE NAMES=(LLPRCRP),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLPREF),FORMAT=CHAR,LENGTH=08\n         VDEFINE NAMES=(LLPRLC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(LLPROD),FORMAT=CHAR,LENGTH=12\n         VDEFINE NAMES=(LLPRSCRP),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LLPRSLC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(LLRM),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(LLSIZE),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(LLSORT),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LSTDSN),FORMAT=CHAR,LENGTH=44\n         VDEFINE NAMES=(LSTLOC),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(TEMPDSN),FORMAT=CHAR,LENGTH=56\n*\n**       Initialize Product Table\n*\n         TBCREATE TABLE=LLTMP,     Create a New Table                  X\n               NAMES=(LLPREF,LLPROD)\n         STORAGE OBTAIN,LENGTH=TBLPRODL,LOC=ANY,BNDRY=PAGE\n         ST    R1,LLPTA            Product table address\n         LA    R4,TBLPRODC         Product table count\n         L     R5,=A(TBLPROD)      Product table address\nINITANXT EQU   *\n         MVC   LLPREF,0(R5)        Move module prefix\n         MVC   LLPROD,8(R5)        Move product name\n         TBADD TABLE=LLTMP         Add a Row to a Table\n         LA    R5,TBLPRODE(R5)     Next product table entry\n         BCT   R4,INITANXT         Process next product, if any\n         TBSORT TABLE=LLTMP,       Sort a Table                        X\n               FIELDS=(LLPREF,C,D)\n         TBTOP TABLE=LLTMP         Set the Row Pointer to the Top\n         LA    R4,TBLPRODC         Product table count\n         L     R5,LLPTA            Product table address\nINITGNXT EQU   *\n         TBSKIP TABLE=LLTMP        Move the Row Pointer\n         MVC   0(8,R5),LLPREF      Move module prefix\n         MVC   8(12,R5),LLPROD     Move product name\n         LA    R5,TBLPRODE(R5)     Next product table entry\n         BCT   R4,INITGNXT         Process next product, if any\n         MVC   0(8,R5),=CL8'????????' Unknown\n         MVC   8(12,R5),=CL12'Unknown' Unknown\n         TBEND TABLE=LLTMP         Close a Table without Saving\n*\n**       Initialize Virtual Storage Table\n*\n         L     R15,CVTPTR          CVT address\n         USING CVT,R15             CVT reference\n         L     R4,CVTSMEXT         VSE address\n         USING CVTVSTGX,R4         VSE reference\n         L     R5,CVTGDA           GDA address\n         USING GDA,R5              GDA reference\n         DROP  R15                 CVT dereference\n         MVC   LLEPVT,GDAEPVT\n         MVC   LLEPVT+4(5),=CL5'EPVT'\n         MVC   LLECSA,GDAECSA\n         MVC   LLECSA+4(5),=CL5'ECSA'\n         MVC   LLEMLPA,CVTEMLPS\n         MVC   LLEMLPA+4(5),=CL5'EMLPA'\n         MVC   LLEFLPA,CVTEFLPS\n         MVC   LLEFLPA+4(5),=CL5'EFLPA'\n         MVC   LLEPLPA,CVTEPLPS\n         MVC   LLEPLPA+4(5),=CL5'EPLPA'\n         MVC   LLESQA,GDAESQA\n         MVC   LLESQA+4(5),=CL5'ESQA'\n         MVC   LLENUC,CVTERWNS\n         MVC   LLENUC+4(5),=CL5'ENUC'\n         MVC   LLNUC,CVTRONS\n         MVC   LLNUC+4(5),=CL5'NUC'\n         MVC   LLSQA,GDASQA\n         MVC   LLSQA+4(5),=CL5'SQA'\n         MVC   LLPLPA,CVTPLPAS\n         MVC   LLPLPA+4(5),=CL5'PLPA'\n         MVC   LLFLPA,CVTFLPAS\n         MVC   LLFLPA+4(5),=CL5'FLPA'\n         MVC   LLMLPA,CVTMLPAS\n         MVC   LLMLPA+4(5),=CL5'MLPA'\n         MVC   LLCSA,GDACSA\n         MVC   LLCSA+4(5),=CL5'CSA'\n         MVC   LLPVT,GDAVR\n         MVC   LLPVT+4(5),=CL5'PVT'\n         XC    LLPSA,LLPSA\n         MVC   LLPSA+4(5),=CL5'PSA'\n         DROP  R4                  VSE dereference\n         DROP  R5                  GDA dereference\nLLINIT   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLLOC - Locate'\n**********************************************************************\nLLPCLOC  $ENTRY                    Entry\n*\n**       Determine Locate Operand\n*\n         $FILL LLLOCATE,C' '       Clear locate operand\n         LA    R1,LLLOCATE         Locate address\n         LA    R14,ZCMD            Primary command address\nLOCCMD1  EQU   *\n         CLC   0(2,R14),=C'L '     Locate ?\n         BNE   LOCCMD2             . No\n         LA    R14,ZCMD+1          Primary command address\n         LA    R15,79              Primary command length\n         B     LOCCMD4             Continue\nLOCCMD2  EQU   *\n         CLC   0(4,R14),=C'LOC '   Locate ?\n         BNE   LOCCMD3             . No\n         LA    R14,ZCMD+3          Primary command address\n         LA    R15,77              Primary command length\n         B     LOCCMD4             Continue\nLOCCMD3  EQU   *\n         CLC   0(7,R14),=C'LOCATE ' Locate ?\n         BNE   LOCCMDE             . No\n         LA    R14,ZCMD+6          Primary command address\n         LA    R15,74              Primary command length\n         B     LOCCMD4             Continue\nLOCCMD4  EQU   *\nCMDLOC1  CLC   0(1,R14),=C' '      Blank ?\n         BNE   CMDLOC2             . No\n         LA    R14,1(R14)          Increment primary command address\n         BCT   R15,CMDLOC1         Next\n         B     LOCCMDE             Error\nCMDLOC2  MVC   0(1,R1),0(R14)      Move it\n         CLC   1(1,R14),=C' '      Blank ?\n         BE    CMDLOC3             . Yes\n         LA    R1,1(R1)            Increment locate address\n         LA    R14,1(R14)          Increment command address\n         BCT   R15,CMDLOC2         Next\n         B     LOCCMDE             Error\nLOCCMDE  EQU   *\n         MVC   ZEDSMSG,=CL24'Locate Invalid'\n         MVC   ZEDLMSG,=CL80'Specified locate primary command invalid sX\n               yntax'\n         SETMSG MESSAGE=ISRZ001    Set next message\n         B     LLPCLOC0\nCMDLOC3  MVI   1(R1),C'*'          Generic\n*\n**       Determine Table\n*\n         CLC   TABLE,=CL8'LLDA'    LLDA ?\n         BE    LOCLLDA             . Yes\n         CLC   TABLE,=CL8'LLDM'    LLDM ?\n         BE    LOCLLDM             . Yes\n         CLC   TABLE,=CL8'LLMOD'   LLMOD ?\n         BE    LOCLLMOD            . Yes\n         CLC   TABLE,=CL8'LLPCM'   LLPCM ?\n         BE    LOCLLPCM            . Yes\n         CLC   TABLE,=CL8'LLPR'    LLPR ?\n         BE    LOCLLPR             . Yes\n         CLC   TABLE,=CL8'LLPRS'   LLPRS ?\n         BE    LOCLLPRS            . Yes\n         MVC   ZEDSMSG,=CL24'Unknown Table'\n         MVC   ZEDLMSG,=CL80'Specified locate primary command issued agX\n               ainst an unknown table'\n         SETMSG MESSAGE=ISRZ001    Set next message\n         B     LLPCLOC0\n*\n**       LLDA Table\n*\nLOCLLDA  EQU   *\n         TBTOP TABLE=LLDA          Top of table\n         TBVCLEAR TABLE=LLDA       Clear table variables\nLOCDAL   EQU   *\n         CLC   LLSORT,=CL8'LOC'    Name ?\n         BNE   LOCDALX             . No\n         MVC   LLLOC,LLLOCATE      Locate operand\n         TBSARG TABLE=LLDA,        Define search argument              *\n               NAMECOND=(LLLOC,EQ)\n         B     LOCDASC             Continue\nLOCDALX  EQU   *\nLOCDAN   EQU   *\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BNE   LOCDANX             . No\n         MVC   LLDSN,LLLOCATE      Locate operand\n         TBSARG TABLE=LLDA,        Define search argument              *\n               NAMECOND=(LLDSN,EQ)\n         B     LOCDASC             Continue\nLOCDANX  EQU   *\nLOCDAS   EQU   *\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BNE   LOCDASX             . No\n         MVC   ZDLSIZE,LLLOCATE    Locate operand\n         TBSARG TABLE=LLDA,        Define search argument              *\n               NAMECOND=(ZDLSIZE,EQ)\n         B     LOCDASC             Continue\nLOCDASX  EQU   *\nLOCDASC  EQU   *\n         TBSCAN TABLE=LLDA,        Scan table                          *\n               NOREAD=NOREAD\nLOCDAX   EQU   *\n         B     LLPCLOC0            Exit\n*\n**       LLDM Table\n*\nLOCLLDM  EQU   *\n         TBTOP TABLE=LLDM          Top of table\n         TBVCLEAR TABLE=LLDM       Clear table variables\nLOCDML   EQU   *\n         CLC   LLSORT,=CL8'LOC'    Name ?\n         BNE   LOCDMLX             . No\n         MVC   LLLOC,LLLOCATE      Locate operand\n         TBSARG TABLE=LLDM,        Define search argument              *\n               NAMECOND=(LLLOC,EQ)\n         B     LOCDMSC             Continue\nLOCDMLX  EQU   *\nLOCDMN   EQU   *\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BNE   LOCDMNX             . No\n         MVC   LLMNAME,LLLOCATE    Locate operand\n         TBSARG TABLE=LLDM,        Define search argument              *\n               NAMECOND=(LLMNAME,EQ)\n         B     LOCDMSC             Continue\nLOCDMNX  EQU   *\nLOCDMS   EQU   *\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BNE   LOCDMSX             . No\n         MVC   LLSIZE,LLLOCATE     Locate operand\n         TBSARG TABLE=LLDM,        Define search argument              *\n               NAMECOND=(LLSIZE,EQ)\n         B     LOCDMSC             Continue\nLOCDMSX  EQU   *\nLOCDMSC  EQU   *\n         TBSCAN TABLE=LLDM,        Scan table                          *\n               NOREAD=NOREAD\nLOCDMX   EQU   *\n         B     LLPCLOC0            Exit\n*\n**       LLMOD Table\n*\nLOCLLMOD EQU   *\n         TBTOP TABLE=LLMOD         Top of table\n         TBVCLEAR TABLE=LLMOD      Clear table variables\nLOCMODL  EQU   *\n         CLC   LLSORT,=CL8'LOC'    Name ?\n         BNE   LOCMODLX            . No\n         MVC   LLLOC,LLLOCATE      Locate operand\n         TBSARG TABLE=LLMOD,       Define search argument              *\n               NAMECOND=(LLLOC,EQ)\n         B     LOCMODSC            Continue\nLOCMODLX EQU   *\nLOCMODN  EQU   *\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BNE   LOCMODNX            . No\n         MVC   LLMNAME,LLLOCATE    Locate operand\n         TBSARG TABLE=LLMOD,       Define search argument              *\n               NAMECOND=(LLMNAME,EQ)\n         B     LOCMODSC            Continue\nLOCMODNX EQU   *\nLOCMODS  EQU   *\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BNE   LOCMODSX            . No\n         MVC   LLSIZE,LLLOCATE     Locate operand\n         TBSARG TABLE=LLMOD,       Define search argument              *\n               NAMECOND=(LLSIZE,EQ)\n         B     LOCMODSC            Continue\nLOCMODSX EQU   *\nLOCMODSC EQU   *\n         TBSCAN TABLE=LLMOD,       Scan table                          *\n               NOREAD=NOREAD\nLOCMODX  EQU   *\n         B     LLPCLOC0            Exit\n*\n**       LLPCM Table\n*\nLOCLLPCM EQU   *\n         TBTOP TABLE=LLPCM         Top of table\n         TBVCLEAR TABLE=LLPCM      Clear table variables\nLOCPCML  EQU   *\n         CLC   LLSORT,=CL8'LOC'    Name ?\n         BNE   LOCPCMLX            . No\n         MVC   LLLOC,LLLOCATE      Locate operand\n         TBSARG TABLE=LLPCM,       Define search argument              *\n               NAMECOND=(LLLOC,EQ)\n         B     LOCPCMSC            Continue\nLOCPCMLX EQU   *\nLOCPCMN  EQU   *\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BNE   LOCPCMNX            . No\n         MVC   LLMNAME,LLLOCATE    Locate operand\n         TBSARG TABLE=LLPCM,       Define search argument              *\n               NAMECOND=(LLMNAME,EQ)\n         B     LOCPCMSC            Continue\nLOCPCMNX EQU   *\nLOCPCMS  EQU   *\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BNE   LOCPCMSX            . No\n         MVC   LLSIZE,LLLOCATE     Locate operand\n         TBSARG TABLE=LLPCM,       Define search argument              *\n               NAMECOND=(LLSIZE,EQ)\n         B     LOCPCMSC            Continue\nLOCPCMSX EQU   *\nLOCPCMSC EQU   *\n         TBSCAN TABLE=LLPCM,       Scan table                          *\n               NOREAD=NOREAD\nLOCPCMX  EQU   *\n         B     LLPCLOC0            Exit\n*\n**       LLPR Table\n*\nLOCLLPR  EQU   *\n         TBTOP TABLE=LLPR          Top of table\n         TBVCLEAR TABLE=LLPR       Clear table variables\nLOCPRL   EQU   *\n         CLC   LLSORT,=CL8'LOC'    Name ?\n         BNE   LOCPRLX             . No\n         MVC   LLLOC,LLLOCATE      Locate operand\n         TBSARG TABLE=LLPR,        Define search argument              *\n               NAMECOND=(LLLOC,EQ)\n         B     LOCPRSC             Continue\nLOCPRLX  EQU   *\nLOCPRN   EQU   *\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BNE   LOCPRNX             . No\n         MVC   LLPROD,LLLOCATE     Locate operand\n         TBSARG TABLE=LLPR,        Define search argument              *\n               NAMECOND=(LLPROD,EQ)\n         B     LOCPRSC             Continue\nLOCPRNX  EQU   *\nLOCPRS   EQU   *\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BNE   LOCPRS9             . No\n         MVC   LLSIZE,LLLOCATE     Locate operand\n         TBSARG TABLE=LLPR,        Define search argument              *\n               NAMECOND=(LLSIZE,EQ)\n         B     LOCPRSC             Continue\nLOCPRS9  EQU   *\nLOCPRSC  EQU   *\n         TBSCAN TABLE=LLPR,        Scan table                          *\n               NOREAD=NOREAD\nLOCPRX   EQU   *\n         B     LLPCLOC0            Exit\n*\n**       LLPRS Table\n*\nLOCLLPRS EQU   *\n         TBTOP TABLE=LLPRS         Top of table\n         TBVCLEAR TABLE=LLPRS      Clear table variables\nLOCPRSL  EQU   *\n         CLC   LLSORT,=CL8'LOC'    Name ?\n         BNE   LOCPRSLX            . No\n         MVC   LLLOC,LLLOCATE      Locate operand\n         TBSARG TABLE=LLPRS,       Define search argument              *\n               NAMECOND=(LLLOC,EQ)\n         B     LOCPRSSC            Continue\nLOCPRSLX EQU   *\nLOCPRSN  EQU   *\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BNE   LOCPRSNX            . No\n         MVC   LLMNAME,LLLOCATE    Locate operand\n         TBSARG TABLE=LLPRS,       Define search argument              *\n               NAMECOND=(LLMNAME,EQ)\n         B     LOCPRSSC            Continue\nLOCPRSNX EQU   *\nLOCPRSS  EQU   *\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BNE   LOCPRSSX            . No\n         MVC   LLSIZE,LLLOCATE     Locate operand\n         TBSARG TABLE=LLPRS,       Define search argument              *\n               NAMECOND=(LLSIZE,EQ)\n         B     LOCPRSSC            Continue\nLOCPRSSX EQU   *\nLOCPRSSC EQU   *\n         TBSCAN TABLE=LLPRS,       Scan table                          *\n               NOREAD=NOREAD\nLOCPRSX  EQU   *\n         B     LLPCLOC0            Exit\nLLPCLOC  $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLMIPR - Module Information Processing Routine (MIPR)'\n**********************************************************************\nLLMIPR   $ENTRY                    Entry\n*\n**       Build DSN\n*\n         LR    R4,R1               MODI_HEADER address\n         USING MODI_HEADER,R4      MODI_HEADER reference\n         LA    R15,MODI_USERDATA   Get address of My user data\n         LM    R9,R10,0(R15)       Re-establish data register\n         TBVCLEAR TABLE=LLMOD      Clear table variables\n         L     R5,MODI_1_PTR       MODI_1 address\n         USING MODI_1,R5           MODI_1 reference\n         MVC   LLMNAME,MODI_8_BYTE_NAME\n         MVC   LLEPA,MODI_ENT@     Entry point\n         NI    LLEPA,X'7F'         Turn off high order bit of EPA\n         $HEX  LLEPAC,LLEPA,LEN=8  Entry point address\n*\n**       Addressing Mode\n*\nMIPRAM   EQU   *\n         MVC   LLAM,=CL2'24'       A24\n         TM    MODI_ENT@,MODI_AMODE A31 ?\n         BNO   MIPRAMX             . No\n         MVC   LLAM,=CL2'31'       A31\nMIPRAMX  EQU   *\n*\n**       Reenterant\n*\nMIPRRN   EQU   *\n         MVC   LLATTR+3(2),=CL2'  ' Non reenterant\n         TM    MODI_ATTR2,MODI_REENT Reenterant ?\n         BNO   MIPRRNX             . No\n         MVC   LLATTR+3(2),=CL2'RN' Reenterant\nMIPRRNX  EQU   *\n*\n**       Reusable\n*\nMIPRRU   EQU   *\n         MVC   LLATTR+6(2),=CL2'  ' Non reusable\n         TM    MODI_ATTR2,MODI_SER_REUS Reusable ?\n         BNO   MIPRRUX             . No\n         MVC   LLATTR+6(2),=CL2'RU' Reusable\nMIPRRUX  EQU   *\n         $FILL LLAL,C' '           Non authorized library\n         TM    MODI_ATTR3,MODI_AUTH_LIB Authorized library ?\n         BNO   MIPRALX             . No\n         MVC   LLAL,=CL2'Y'        Authorized library\n         B     MIPRALX             Continue\nMIPRALX  EQU   *\n*\n**       Authorization Code\n*\nMIPRAC   EQU   *\n         MVC   LLAC,=CL2'00'       Authorization code 00\n         TM    MODI_ATTR3,MODI_AUTH_MOD Authorized program ?\n         BNO   MIPRACX             . No\n         MVC   LLAC,=CL2'01'       Authorization code 01\n         B     MIPRACX             Continue\nMIPRACX  EQU   *\n         L     R15,MODI_2_PTR      MODI_2 address\n         USING MODI_2,R15          MODI_2 reference\n         MVC   LLSIZE,MODI_MOD_LEN Size\n         MVC   LLLEN,LLSIZE        Length\n         DROP  R15                 MODI_2 dereference\n*\n**       Alias\n*\n         TM    MODI_ATTR2,MODI_MINOR Alias ?\n         BNO   MIPRALI             . No\n         L     R15,MODI_5_PTR      MODI_5 address\n         USING MODI_5,R15          MODI_5 reference\n         MVC   LLALIAS,MODI_8_BYTE_MAJOR_NAME Major name\n         MVC   LLSIZE,=F'0'        Size\n         DROP  R15                 MODI_5 dereference\n         B     MIPRALIX\nMIPRALI  EQU   *\n         B     MIPRALIX\nMIPRALIX EQU   *\n*\n**       Residence Mode\n*\n         CLC   LLEPA,=XL4'00FFFFFF' Residence mode ?\n         BNH   MIPRRM24\n         MVC   LLRM,=CL3'ANY'      Residence mode ANY\n         B     MIPRRMX             Continue\nMIPRRM24 EQU   *\n         MVC   LLRM,=CL3' 24'      Residence mode 24\n         B     MIPRRMX             Continue\nMIPRRMX  EQU   *\n*\n**       Location\n*\n         LA    R6,VSNUM            Virtual storage table size\n         LA    R7,VSTBL            Virtual storage table address\nMIPVSCHK EQU   *\n         CLC   0(4,R7),=F'0'       Zeroes ?\n         BE    MIPVSINC            . Yes\n         CLC   LLEPA,0(R7)         Found ?\n         BNL   MIPVSMTC            . Yes\nMIPVSINC EQU   *\n         LA    R7,VSLEN(R7)        Next virtual storage table entry\n         BCT   R6,MIPVSCHK         Process next virtual stor, if any\nMIPVSMTC EQU   *\n         $FILL LLLOC,C' '          Clear dataset type\n         MVC   LLLOC(4),=CL4'LPA:' LPA\n         MVC   LLLOC+4(5),4(R7)    Virtual storage location\n         $FILL LLDSN,C' '          Clear dataset name\n         CALL  LLSTATT             Statistics\n         CALL  LLGPROD             Get product\n         TBADD TABLE=LLMOD         Add a Row to a Table\n         DROP  R4                  MODI_HEADER dereference\n         DROP  R5                  MODI_1 dereference\nLLMIPR   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLMO - Modules'\n**********************************************************************\nLLMO     $ENTRY                    Entry\n*\n**       Get Modules\n*\n         CALL  LLGMODS             Get modules\n*\n**       Display Module Table\n*\n         TBTOP TABLE=LLMOD         Set the Row Pointer to the Top\n         TBDISPL TABLE=LLMOD,      Display Table Information           X\n               PANEL=LLMO,                                             X\n               PCLOC=LLPCLOC,                                          X\n               LC=(LLMOLC,S,LLMOS)\n*\n**       Termination\n*\n         TBEND TABLE=LLMOD         Close a Table without Saving\nLLMO     $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLMOS - Module Select'\n**********************************************************************\nLLMOS    $ENTRY                    Entry\n*\n**       Build DSN\n*\n         CLI   LLDSN,C' '          Dataset name ?\n         BNE   LLMOSDSN            . Yes\n         CALL  LLVIEW              . No\n         B     LLMOS0              Exit\nLLMOSDSN EQU   *\n*\n**       Build DSN\n*\n         $FILL TEMPDSN,C' '        Clear dataset name\n         MVI   TEMPDSN+00,X'7D'    Open Quote\n         $FIND LLDSN,C' '          Find first blank\n         $VLM  TEMPDSN+01,LLDSN,(R15),DECREMENT=NO Move DSN\n         $FIND TEMPDSN,C' '        Find first blank\n         MVI   0(R14),C'('         Move opening paran\n         $FIND TEMPDSN,C' '        Find first blank\n         MVC   0(8,R14),LLMNAME    Move member name\n         $FIND TEMPDSN,C' '        Find first blank\n         MVI   0(R14),C')'         Move closing paran\n         $FIND TEMPDSN,C' '        Find first blank\n         MVI   0(R14),X'7D'        Close Quote\n         BROWSE DATASET=TEMPDSN    Browse\nLLMOS    $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLPCM - Post CLPA Modules'\n**********************************************************************\nLLPCM    $ENTRY                    Entry\n*\n**       Initialization\n*\n         TBCREATE TABLE=LLPCM,     Create a New Table                  X\n               NAMES=(LLMNAME,LLEPA,LLAM,LLAL,LLAC,LLATTR,LLRM,LLALIAS,X\n               LLSIZE,LLLEN,LLLOC,LLPROD,LLDSN,LLEPAC)\n*\n**       Get Modules\n*\n         MVC   LLMODE,=CL6'LPA'    LPA mode\n         CALL  LLGMODS             Get modules\n*\n**       Top of Table\n*\nPCMTOP   EQU   *\n         TBTOP TABLE=LLMOD         Set the Row Pointer to the Top\n*\n**       Next Table Entry\n*\nPCMNEXT  EQU   *\n         TBSKIP TABLE=LLMOD,END=PCMEND Move the Row Pointer\n         CLC   LLLOC,=CL10'LPA:EFLPA' EFLPA ?\n         BE    PCMNEXT             . Yes, skip\n         CLC   LLLOC,=CL10'LPA:EMLPA' EMLPA ?\n         BE    PCMNEXT             . Yes, skip\n         CLC   LLLOC,=CL10'LPA:EPLPA' EPLPA ?\n         BE    PCMNEXT             . Yes, skip\n         CLC   LLLOC,=CL10'LPA:FLPA' FLPA ?\n         BE    PCMNEXT             . Yes, skip\n         CLC   LLLOC,=CL10'LPA:MLPA' MLPA ?\n         BE    PCMNEXT             . Yes, skip\n         CLC   LLLOC,=CL10'LPA:PLPA' PLPA ?\n         BE    PCMNEXT             . Yes, skip\n*\n**       Identify Post CLPA Modules\n*\n         TBADD TABLE=LLPCM         Add a Row to a Table\n         B     PCMNEXT             Next table entry\n*\n**       End of Table\n*\nPCMEND   EQU   *\n*\n**       Display Post CLPA Modules\n*\n         TBEND TABLE=LLMOD         Close a Table without Saving\n         TBTOP TABLE=LLPCM         Set the Row Pointer to the Top\n         TBDISPL TABLE=LLPCM,      Display Table Information           X\n               PANEL=LLPCM,                                            X\n               PCLOC=LLPCLOC,                                          X\n               LC=(LLPCMLC,S,LLMOS)\n*\n**       Termination\n*\n         TBEND TABLE=LLPCM         Close a Table without Saving\nLLPCM    $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLPR - Products'\n**********************************************************************\nLLPR     $ENTRY                    Entry\n*\n**       Initialization\n*\n         TBCREATE TABLE=LLPR,      Create a New Table                  X\n               NAMES=(LLPROD,P1ALC,P1ANC,P1ANS,P1MOC,P1MOS,P124C,P124S,X\n               P2ALC,P2ANC,P2ANS,P2MOC,P2MOS,P224C,P224S,P3ALC,P3ANC,P3X\n               ANS,P3MOC,P3MOS,P324C,P324S,P4ALC,P4ANC,P4ANS,P4MOC,P4MOX\n               S,P424C,P424S)\n*\n**       Get Modules\n*\n         CALL  LLGMODS             Get modules\n*\n**       Top of Table\n*\nPRTOPTBL EQU   *\n         TBTOP TABLE=LLMOD         Set the Row Pointer to the Top\n*\n**       Next Table Entry\n*\nPRNXTTBL EQU   *\n         TBVCLEAR TABLE=LLPR       Clear table variables\n         TBSKIP TABLE=LLMOD,END=PRENDTBL Move the Row Pointer\n         TBTOP TABLE=LLPR          Set the Row Pointer to the Top\n         TBSARG TABLE=LLPR,        Define a Search Argument            X\n               NAMECOND=(LLPROD,EQ)\n         TBSCAN TABLE=LLPR         Search a Table\n         LTR   R15,R15             Scan OK ?\n         BZ    PRFOUN              . Yes\n*\n**       Clear Product Statistics\n*\n         XC    P1ALC,P1ALC         Clear LPA product alias count\n         XC    P1ANC,P1ANC         Clear LPA product RANY count\n         XC    P1ANS,P1ANS         Clear LPA product RANY size\n         XC    P1MOC,P1MOC         Clear LPA product module count\n         XC    P1MOS,P1MOS         Clear LPA product module size\n         XC    P124C,P124C         Clear LPA product R24 count\n         XC    P124S,P124S         Clear LPA product R24 size\n         XC    P2ALC,P2ALC         Clear LPALST product alias count\n         XC    P2ANC,P2ANC         Clear LPALST product RANY count\n         XC    P2ANS,P2ANS         Clear LPALST product RANY size\n         XC    P2MOC,P2MOC         Clear LPALST product module count\n         XC    P2MOS,P2MOS         Clear LPALST product module size\n         XC    P224C,P224C         Clear LPALST product R24 count\n         XC    P224S,P224S         Clear LPALST product R24 size\n         XC    P3ALC,P3ALC         Clear LNKLST product alias count\n         XC    P3ANC,P3ANC         Clear LNKLST product RANY count\n         XC    P3ANS,P3ANS         Clear LNKLST product RANY size\n         XC    P3MOC,P3MOC         Clear LNKLST product module count\n         XC    P3MOS,P3MOS         Clear LNKLST product module size\n         XC    P324C,P324C         Clear LNKLST product R24 count\n         XC    P324S,P324S         Clear LNKLST product R24 size\n         XC    P4ALC,P4ALC         Total product alias count\n         XC    P4ANC,P4ANC         Total product RANY count\n         XC    P4ANS,P4ANS         Total product RANY size\n         XC    P4MOC,P4MOC         Total product module count\n         XC    P4MOS,P4MOS         Total product module size\n         XC    P424C,P424C         Total product R24 count\n         XC    P424S,P424S         Total product R24 size\n         CALL  LLSTATP             Product statistics\n         TBADD TABLE=LLPR          Add a Row to a Table\n         B     PRNXTTBL            Next table entry\nPRFOUN   EQU   *\n         CALL  LLSTATP             Product statistics\n         TBPUT TABLE=LLPR          Update a Row in a Table\n         B     PRNXTTBL            Next table entry\n*\n**       End of Table\n*\nPRENDTBL EQU   *\n*\n**       Sort Product Table\n*\nPRSORT   EQU   *\n         CLC   LLSORT,=CL8'SIZE'   Size ?\n         BE    PRSIZE              . Yes\n         CLC   LLSORT,=CL8'NAME'   Name ?\n         BE    PRNAME              . Yes\nPRNAME   EQU   *\n         TBSORT TABLE=LLPR,        Sort a Table                        X\n               FIELDS=(LLPROD,C,A)\n         B     PRSORTX             Continue\nPRSIZE   EQU   *\n         TBSORT TABLE=LLPR,        Sort a Table                        X\n               FIELDS=(P124S,N,D)\n         B     PRSORTX             Continue\nPRSORTX  EQU   *\n*\n**       Display Module Table\n*\n         TBTOP TABLE=LLPR          Set the Row Pointer to the Top\n         TBDISPL TABLE=LLPR,       Display Table Information           X\n               PANEL=LLPR,                                             X\n               PCLOC=LLPCLOC,                                          X\n               LC=(LLPRLC,S,LLPRS)\n*\n**       Termination\n*\n         TBEND TABLE=LLMOD         Close a Table without Saving\n         TBEND TABLE=LLPR          Close a Table without Saving\nLLPR     $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLPROC - Process'\n**********************************************************************\nLLPROC   $ENTRY                    Entry\n         MVC   LLFUNC,=CL1'2'      Default Function\n         MVC   LLMODE,=CL6'LPA'    Default Mode\n         MVC   LLSORT,=CL8'NAME'   Default Sort\n*\n**       Display Primary Menu\n*\nLL@PRIM  DISPLAY PANEL=LL@PRIM,     Display Panels and Messages        X\n               END=LLPROC0,                                            X\n               PC=(LLFUNC,1,LLDA,2,LLMO,3,LLPR,4,LLDM,5,LLPCM)\nLLPROC   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLPRS - Product Select'\n**********************************************************************\nLLPRS    $ENTRY                    Entry\n*\n**       Build Module Table\n*\n         MVC   LLPNAME,LLPROD      Save product\n         TBCREATE TABLE=LLPRS,     Create a New Table                  X\n               NAMES=(LLMNAME,LLEPA,LLAM,LLAL,LLAC,LLATTR,LLRM,LLALIAS,X\n               LLSIZE,LLLEN,LLLOC,LLPROD,LLDSN,LLEPAC)\n         TBTOP TABLE=LLMOD         Set the Row Pointer to the Top\n*\n**       Next Table Entry\n*\nPRSNEXT  EQU   *\n         TBSKIP TABLE=LLMOD,END=PRSEND Move the Row Pointer\n         CLC   LLPNAME,LLPROD      Match ?\n         BE    PRSMATCH            . Yes\n         B     PRSNEXT             Next table entry\n*\n**       Identify Duplicates\n*\nPRSMATCH EQU   *\n         TBADD TABLE=LLPRS         Add a Row to a Table\n         B     PRSNEXT             Next table entry\nPRSEND   EQU   *\n         TBTOP TABLE=LLPRS         Set the Row Pointer to the Top\n         TBDISPL TABLE=LLPRS,      Display Table Information           X\n               PANEL=LLPRS,                                            X\n               PCLOC=LLPCLOC,                                          X\n               LC=(LLPRSLC,S,LLMOS)\n         TBEND TABLE=LLPRS         Close a Table without Saving\nLLPRS    $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLSTATD - Statistics Definition'\n**********************************************************************\nLLSTATD  $ENTRY                    Entry\n         VDEFINE NAMES=(P1ALC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P1ANC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P1ANS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P1MOC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P1MOS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P124C),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P124S),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P2ALC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P2ANC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P2ANS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P2MOC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P2MOS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P224C),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P224S),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P3ALC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P3ANC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P3ANS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P3MOC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P3MOS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P324C),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P324S),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P4ALC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P4ANC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P4ANS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P4MOC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P4MOS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P424C),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(P424S),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T1ALC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T1ANC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T1ANS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T1MOC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T1MOS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T124C),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T124S),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T2ALC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T2ANC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T2ANS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T2MOC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T2MOS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T224C),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T224S),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T3ALC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T3ANC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T3ANS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T3MOC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T3MOS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T324C),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T324S),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T4ALC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T4ANC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T4ANS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T4MOC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T4MOS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T424C),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(T424S),FORMAT=FIXED,LENGTH=4\nLLSTATD  $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLSTATP - Product Statistics'\n**********************************************************************\nLLSTATP  $ENTRY                    Entry\n*\n**       Determine Location\n*\n         CLC   LLLOC(4),=CL4'LPA:' LPA ?\n         BE    STATP1              . Yes\n         CLC   LLLOC(4),=CL4'LPAL' LPALST ?\n         BE    STATP2              . Yes\n         CLC   LLLOC(4),=CL4'LNKL' LNKLST ?\n         BE    STATP3              . Yes\n         B     LLSTATP0            Exit\n*\n**       LPA Statistics\n*\nSTATP1   EQU   *\n         $INCR P1MOC               LPA product module count\n         $ADD  P1MOS,LLSIZE        LPA product module size\n         $INCR P4MOC               Total product module count\n         $ADD  P4MOS,LLSIZE        Total product module size\n         CLC   LLRM,=CL3' 24'      RMODE=24 ?\n         BNE   STATP1RA            . No\n         $INCR P124C               LPA product R24 count\n         $ADD  P124S,LLSIZE        LPA product R24 size\n         $INCR P424C               Total product R24 count\n         $ADD  P424S,LLSIZE        Total product R24 size\n         B     STATP1RX\nSTATP1RA EQU   *                   RMODE=ANY\n         $INCR P1ANC               LPA product RANY count\n         $ADD  P1ANS,LLSIZE        LPA product RANY size\n         $INCR P4ANC               Total product RANY count\n         $ADD  P4ANS,LLSIZE        Total product RANY size\n         B     STATP1RX\nSTATP1RX EQU   *\n         CLC   LLALIAS,=CL8' '     Alias ?\n         BE    STATP1NA            . No\n         $INCR P1ALC               LPA product alias count\n         $INCR P4ALC               Total product alias count\nSTATP1NA EQU   *\n         B     LLSTATP0            Exit\n*\n**       LPALST Statistics\n*\nSTATP2   EQU   *\n         $INCR P2MOC               LPALST product module count\n         $ADD  P2MOS,LLSIZE        LPALST product module size\n         $INCR P4MOC               Total product module count\n         $ADD  P4MOS,LLSIZE        Total product module size\n         CLC   LLRM,=CL3' 24'      RMODE=24 ?\n         BNE   STATP2RA            . No\n         $INCR P224C               LPALST product R24 count\n         $ADD  P224S,LLSIZE        LPALST product R24 size\n         $INCR P424C               Total product R24 count\n         $ADD  P424S,LLSIZE        Total product R24 size\n         B     STATP2RX\nSTATP2RA EQU   *                   RMODE=ANY\n         $INCR P2ANC               LPALST product RANY count\n         $ADD  P2ANS,LLSIZE        LPALST product RANY size\n         $INCR P4ANC               Total product RANY count\n         $ADD  P4ANS,LLSIZE        Total product RANY size\n         B     STATP2RX\nSTATP2RX EQU   *\n         CLC   LLALIAS,=CL8' '     Alias ?\n         BE    STATP2NA            . No\n         $INCR P2ALC               LPALST product alias count\n         $INCR P4ALC               Total product alias count\nSTATP2NA EQU   *\n         B     LLSTATP0            Exit\n*\n**       LNKLST Statistics\n*\nSTATP3   EQU   *\n         $INCR P3MOC               LNKLST product module count\n         $ADD  P3MOS,LLSIZE        LNKLST product module size\n         $INCR P4MOC               Total product module count\n         $ADD  P4MOS,LLSIZE        Total product module size\n         CLC   LLRM,=CL3' 24'      RMODE=24 ?\n         BNE   STATP3RA            . No\n         $INCR P324C               LNKLST product R24 count\n         $ADD  P324S,LLSIZE        LNKLST product R24 size\n         $INCR P424C               Total product R24 count\n         $ADD  P424S,LLSIZE        Total product R24 size\n         B     STATP3RX\nSTATP3RA EQU   *                   RMODE=ANY\n         $INCR P3ANC               LNKLST product RANY count\n         $ADD  P3ANS,LLSIZE        LNKLST product RANY size\n         $INCR P4ANC               Total product RANY count\n         $ADD  P4ANS,LLSIZE        Total product RANY size\n         B     STATP3RX\nSTATP3RX EQU   *\n         CLC   LLALIAS,=CL8' '     Alias ?\n         BE    STATP3NA            . No\n         $INCR P3ALC               LNKLST product alias count\n         $INCR P4ALC               Total product alias count\nSTATP3NA EQU   *\n         B     LLSTATP0            Exit\nLLSTATP  $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLSTATT - Statistics Total'\n**********************************************************************\nLLSTATT  $ENTRY                    Entry\n*\n**       Determine Location\n*\n         CLC   LLLOC(4),=CL4'LPA:' LPA ?\n         BE    STATT1              . Yes\n         CLC   LLLOC(4),=CL4'LPAL' LPALST ?\n         BE    STATT2              . Yes\n         CLC   LLLOC(4),=CL4'LNKL' LNKLST ?\n         BE    STATT3              . Yes\n         B     LLSTATT0            Exit\n*\n**       LPA Statistics\n*\nSTATT1   EQU   *\n         $INCR T1MOC               LPA total module count\n         $ADD  T1MOS,LLSIZE        LPA total module size\n         $INCR T4MOC               Total total module count\n         $ADD  T4MOS,LLSIZE        Total total module size\n         CLC   LLRM,=CL3' 24'      RMODE=24 ?\n         BNE   STATT1RA            . No\n         $INCR T124C               LPA total R24 count\n         $ADD  T124S,LLSIZE        LPA total R24 size\n         $INCR T424C               Total total R24 count\n         $ADD  T424S,LLSIZE        Total total R24 size\n         B     STATT1RX\nSTATT1RA EQU   *                   RMODE=ANY\n         $INCR T1ANC               LPA total RANY count\n         $ADD  T1ANS,LLSIZE        LPA total RANY size\n         $INCR T4ANC               Total total RANY count\n         $ADD  T4ANS,LLSIZE        Total total RANY size\n         B     STATT1RX\nSTATT1RX EQU   *\n         CLC   LLALIAS,=CL8' '     Alias ?\n         BE    STATT1NA            . No\n         $INCR T1ALC               LPA total alias count\n         $INCR T4ALC               Total total alias count\nSTATT1NA EQU   *\n         B     LLSTATT0            Exit\n*\n**       LPALST Statistics\n*\nSTATT2   EQU   *\n         $INCR T2MOC               LPALST total module count\n         $ADD  T2MOS,LLSIZE        LPALST total module size\n         $INCR T4MOC               Total total module count\n         $ADD  T4MOS,LLSIZE        Total total module size\n         CLC   LLRM,=CL3' 24'      RMODE=24 ?\n         BNE   STATT2RA            . No\n         $INCR T224C               LPALST total R24 count\n         $ADD  T224S,LLSIZE        LPALST total R24 size\n         $INCR T424C               Total total R24 count\n         $ADD  T424S,LLSIZE        Total total R24 size\n         B     STATT2RX\nSTATT2RA EQU   *                   RMODE=ANY\n         $INCR T2ANC               LPALST total RANY count\n         $ADD  T2ANS,LLSIZE        LPALST total RANY size\n         $INCR T4ANC               Total total RANY count\n         $ADD  T4ANS,LLSIZE        Total total RANY size\n         B     STATT2RX\nSTATT2RX EQU   *\n         CLC   LLALIAS,=CL8' '     Alias ?\n         BE    STATT2NA            . No\n         $INCR T2ALC               LPALST total alias count\n         $INCR T4ALC               Total total alias count\nSTATT2NA EQU   *\n         B     LLSTATT0            Exit\n*\n**       LNKLST Statistics\n*\nSTATT3   EQU   *\n         $INCR T3MOC               LNKLST total module count\n         $ADD  T3MOS,LLSIZE        LNKLST total module size\n         $INCR T4MOC               Total total module count\n         $ADD  T4MOS,LLSIZE        Total total module size\n         CLC   LLRM,=CL3' 24'      RMODE=24 ?\n         BNE   STATT3RA            . No\n         $INCR T324C               LNKLST total R24 count\n         $ADD  T324S,LLSIZE        LNKLST total R24 size\n         $INCR T424C               Total total R24 count\n         $ADD  T424S,LLSIZE        Total total R24 size\n         B     STATT3RX\nSTATT3RA EQU   *                   RMODE=ANY\n         $INCR T3ANC               LNKLST total RANY count\n         $ADD  T3ANS,LLSIZE        LNKLST total RANY size\n         $INCR T4ANC               Total total RANY count\n         $ADD  T4ANS,LLSIZE        Total total RANY size\n         B     STATT3RX\nSTATT3RX EQU   *\n         CLC   LLALIAS,=CL8' '     Alias ?\n         BE    STATT3NA            . No\n         $INCR T3ALC               LNKLST total alias count\n         $INCR T4ALC               Total total alias count\nSTATT3NA EQU   *\n         B     LLSTATT0            Exit\nLLSTATT  $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLTERM - Termination'\n**********************************************************************\nLLTERM   $ENTRY                    Entry\n*\n**       Terminate ISPF environment\n*\n         ISPFTERM                  Terminate ISPF environment\n*\n**       Free Product Table\n*\n         STORAGE RELEASE,ADDR=LLPTA,LENGTH=TBLPRODL\nLLTERM   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLVIEW - View'\n**********************************************************************\nLLVIEW   $ENTRY                    Entry\n*\n**       Build BRIF DSN\n*\n         $FILL LLBDSN,X'00'        Clear dataset name\n         $FIND LLLOC,C' '          Find first blank\n         $VLM  LLBDSN+00,LLLOC,(R15),DECREMENT=NO Module location\n         $FIND LLMNAME,C' '        Find first blank\n         $VLM  LLBDSN+11,LLMNAME,(R15),DECREMENT=NO Module name\n         CLC   LLALIAS,=CL8' '     Alias ?\n         BE    VIEWNOAL            . No - continue\n         MVC   LLBDSN+20(06),=C'(Alias'\n         MVC   LLBDSN+27(02),=C'of'\n         $FIND LLALIAS,C' '        Find first blank\n         $VLM  LLBDSN+30,LLALIAS,(R15),DECREMENT=NO Major module name\n         MVC   LLBDSN+38(01),=C')'\n*\n**       Determine Number of Records\n*\nVIEWNOAL EQU   *\n         XR    R0,R0               Clear LPALNK module length\n         L     R1,LLLEN            Module length\n         LTR   R1,R1               Module length zero ?\n         BNZ   VIEWLNOK            . No\n         L     R1,=F'51200'        . Yes (50k default for browse)\nVIEWLNOK EQU   *\n         D     R0,=F'80'           Determine number of records\n         ST    R0,BRIFREM          LPALNK records remainder\n         LTR   R0,R0               Remainder ?\n         BZ    VIEWNREM            . No - continue\n         LA    R1,1(,R1)           . Yes - round up number of records\nVIEWNREM EQU   *\n*\n**       Invoke Browse Interface\n*\n         ST    R1,BRIFCNT          LPALNK maximum number of records\n         ST    R10,LLBDWA          LPALNK dynamic workarea address\n         MVC   BRIFADR,LLEPA       LPALNK entry point\n         BRIF  DATA=LLBDSN,        Browse Interface                    X\n               RECFM=F,                                                X\n               LRECL=80,                                               X\n               READ=LLBRIF,                                            X\n               DIALOG=LLBDWA\nLLVIEW   $EXIT                     Exit\n**********************************************************************\n         TITLE 'LLDWA - Dynamic Workarea'\n**********************************************************************\nLLDWA    DSECT                     Dynamic Workarea\n         DS    0F                  Fullword alignment\n         CSVINFO MF=(L,CSVINFO)    CSVINFO parameter list\nBRIFADR  DS    F                   LPALNK BRIF address\nBRIFCNT  DS    F                   LPALNK BRIF count\nBRIFREM  DS    F                   LPALNK BRIF remainder\nDOUBLE   DS    D                   Double work area\nLLAC     DS    CL002               Authorization code\nLLAL     DS    CL002               Authorized library\nLLALIAS  DS    CL008               LPALNK module major name of alias\nLLAM     DS    CL002               Addressing mode\nLLATTR   DS    CL015               Attributes\nLLATTR3  DS    CL001               ISPF Attribute\nLLBDSN   DS    CL044               LPALNK BRIF dataset name\nLLBDWA   DS    F                   LPALNK BRIF dynamic workarea address\nLLDACNT  DS    F                   Dataset count\nLLDACRP  DS    CL008               ISPF Current Row Pointer\nLLDALC   DS    CL001               ISPF Line Command\nLLDASEL  DS    CL004               ISPF Selections\nLLDA1    DS    CL080               LPALNK message 1\nLLDA2    DS    CL080               LPALNK message 2\nLLDIRBLK DS    0F,CL256            User area\nLLDMCRP  DS    CL008               ISPF Current Row Pointer\nLLDMLC   DS    CL001               ISPF Line Command\nLLDMSEL  DS    CL004               ISPF Selections\nLLDSN    DS    CL044               Dataset Name\nLLDSNUM  DS    F                   Dataset number\nLLEPA    DS    CL004               Entry point address\nLLEPAC   DS    CL008               Entry point address character\nLLEXCL1  DS    CL044               Exclude\nLLEXCL2  DS    CL044               Exclude\nLLEXCL3  DS    CL044               Exclude\nLLEXCL4  DS    CL044               Exclude\nLLFUNC   DS    CL001               Function\nLLLEN    DS    F                   LPALNK module length\nLLLOC    DS    CL010               Dataset Number\nLLLOCATE DS    CL080               Locate operand\nLLMATCH  DS    CL008               LPALNK module match\nLLMEM    DS    F                   LPALNK Library List Member count\nLLMEMO   DS    CL008               LPALNK module old name\nLLMIPRUD DS    CL16                User area\nLLMNAME  DS    CL008               LPALNK module name\nLLMODCRP DS    CL008               ISPF Current Row Pointer\nLLMODE   DS    CL006               Mode (LPA/LNK/LPALNK)\nLLMODLN  DS    CL080               LPALNK module line\nLLMODSEL DS    CL004               ISPF Selections\nLLMOLC   DS    CL001               ISPF Line Command\nLLNPLL   DS    F                   LPALNK address\nLLPCMCRP DS    CL008               ISPF Current Row Pointer\nLLPCMLC  DS    CL001               ISPF Line Command\nLLPCMSEL DS    CL004               ISPF Selections\nLLPNAME  DS    CL012               Product name\nLLPRCRP  DS    CL008               ISPF Current Row Pointer\nLLPREF   DS    CL008               LPALNK prefix\nLLPRLC   DS    CL001               ISPF Line Command\nLLPROD   DS    CL012               LPALNK product\nLLPRSCRP DS    CL008               ISPF Current Row Pointer\nLLPRSEL  DS    CL004               ISPF Selections\nLLPRSLC  DS    CL001               ISPF Line Command\nLLPRSSEL DS    CL004               ISPF Selections\nLLRM     DS    CL003               Residence mode (24/ANY)\nLLSAVET  DS    CL140               LPALNK total save\nLLSIZE   DS    F                   LPALNK module size\nLLSORT   DS    CL008               Sort field name\nLSTDSN   DS    CL044               Dataset Name\nLSTLOC   DS    CL010               Dataset Location\nP1ALC    DS    F                   LPA product alias count\nP1ANC    DS    F                   LPA product RMODE=ANY count\nP1ANS    DS    F                   LPA product RMODE=ANY size\nP1MOC    DS    F                   LPA product module count\nP1MOS    DS    F                   LPA product module size\nP124C    DS    F                   LPA product RMODE=24 count\nP124S    DS    F                   LPA product RMODE=24 size\nP2ALC    DS    F                   LPALST product alias count\nP2ANC    DS    F                   LPALST product RMODE=ANY count\nP2ANS    DS    F                   LPALST product RMODE=ANY size\nP2MOC    DS    F                   LPALST product module count\nP2MOS    DS    F                   LPALST product module size\nP224C    DS    F                   LPALST product RMODE=24 count\nP224S    DS    F                   LPALST product RMODE=24 size\nP3ALC    DS    F                   LNKLST product alias count\nP3ANC    DS    F                   LNKLST product RMODE=ANY count\nP3ANS    DS    F                   LNKLST product RMODE=ANY size\nP3MOC    DS    F                   LNKLST product module count\nP3MOS    DS    F                   LNKLST product module size\nP324C    DS    F                   LNKLST product RMODE=24 count\nP324S    DS    F                   LNKLST product RMODE=24 size\nP4ALC    DS    F                   Total product alias count\nP4ANC    DS    F                   Total product RMODE=ANY count\nP4ANS    DS    F                   Total product RMODE=ANY size\nP4MOC    DS    F                   Total product module count\nP4MOS    DS    F                   Total product module size\nP424C    DS    F                   Total product RMODE=24 count\nP424S    DS    F                   Total product RMODE=24 size\nTEMPDSN  DS    CL056               ISPF Dataset name\nT1ALC    DS    F                   LPA total alias count\nT1ANC    DS    F                   LPA total RMODE=ANY count\nT1ANS    DS    F                   LPA total RMODE=ANY size\nT1MOC    DS    F                   LPA total module count\nT1MOS    DS    F                   LPA total module size\nT124C    DS    F                   LPA total RMODE=24 count\nT124S    DS    F                   LPA total RMODE=24 size\nT2ALC    DS    F                   LPALST total alias count\nT2ANC    DS    F                   LPALST total RMODE=ANY count\nT2ANS    DS    F                   LPALST total RMODE=ANY size\nT2MOC    DS    F                   LPALST total module count\nT2MOS    DS    F                   LPALST total module size\nT224C    DS    F                   LPALST total RMODE=24 count\nT224S    DS    F                   LPALST total RMODE=24 size\nT3ALC    DS    F                   LNKLST total alias count\nT3ANC    DS    F                   LNKLST total RMODE=ANY count\nT3ANS    DS    F                   LNKLST total RMODE=ANY size\nT3MOC    DS    F                   LNKLST total module count\nT3MOS    DS    F                   LNKLST total module size\nT324C    DS    F                   LNKLST total RMODE=24 count\nT324S    DS    F                   LNKLST total RMODE=24 size\nT4ALC    DS    F                   Total total alias count\nT4ANC    DS    F                   Total total RMODE=ANY count\nT4ANS    DS    F                   Total total RMODE=ANY size\nT4MOC    DS    F                   Total total module count\nT4MOS    DS    F                   Total total module size\nT424C    DS    F                   Total total RMODE=24 count\nT424S    DS    F                   Total total RMODE=24 size\n         CNOP  0,4                 Fullword alignment\nVSTBL    EQU   *                   VS table entry length\nLLEPVT   DS    F                   EPVT\n         DS    CL008\nVSLEN    EQU   *-VSTBL             VS table entry length\nLLECSA   DS    F                   ECSA\n         DS    CL008\nLLEMLPA  DS    F                   EMLPA\n         DS    CL008\nLLEFLPA  DS    F                   EFLPA\n         DS    CL008\nLLEPLPA  DS    F                   EPLPA\n         DS    CL008\nLLESQA   DS    F                   ESQA\n         DS    CL008\nLLENUC   DS    F                   ENUC\n         DS    CL008\nLLNUC    DS    F                   NUC\n         DS    CL008\nLLSQA    DS    F                   SQA\n         DS    CL008\nLLPLPA   DS    F                   PLPA\n         DS    CL008\nLLFLPA   DS    F                   FLPA\n         DS    CL008\nLLMLPA   DS    F                   MLPA\n         DS    CL008\nLLCSA    DS    F                   CSA\n         DS    CL008\nLLPVT    DS    F                   PVT\n         DS    CL008\nVSNUM    EQU   (*-VSTBL)/VSLEN     VS table entry count\nLLPSA    DS    F                   PSA\n         DS    CL008\n         DS    0F                  Fullword alignment\nXXXLST   EQU   *                   LNKLST DCB\n         ORG   *+L_XXXLST          LNKLST DCB length\n         DS    0F                  Fullword alignment\nW_OPENI  EQU   *                   OPEN parameter list (Input)\n         ORG   *+L_OPENI           OPEN parameter list length (Input)\n         DS    0F                  Fullword alignment\nW_CLOSE  EQU   *                   CLOSE parameter list\n         ORG   *+L_CLOSE           CLOSE parameter list length\n         ISPFVARS                  Define ISPF variables\nLLDWA#   EQU   *-LLDWA             Dynamic workarea length\n**********************************************************************\n         TITLE 'LLSWA - Static Work Area'\n**********************************************************************\nLLSWA    $ENTRY BASE=,DWA=,MODID=NO,SAVE=NO,SAVEAREA=NO,SWA=\nT_OPENI  OPEN  (,INPUT),MF=L OPEN parameter list (Input)\nL_OPENI  EQU   *-T_OPENI           OPEN parameter list length (Input)\nT_CLOSE  CLOSE (),MF=L CLOSE parameter list\nL_CLOSE  EQU   *-T_CLOSE           CLOSE parameter list length\nT_XXXLST DCB   DDNAME=XXXLST,      LNKLST DCB                          X\n               BLKSIZE=256,                                            X\n               BUFNO=100,                                              X\n               DSORG=PS,                                               X\n               EODAD=GLENDMEM,                                         X\n               LRECL=256,                                              X\n               MACRF=GM,                                               X\n               RECFM=F\nL_XXXLST EQU   *-T_XXXLST          LNKLST DCB Length\nLLPTA    DS    F                   Product table address\nLLDA1D   DC    CL80'  ** All datasets are blocked efficiently **'\nLLDA1W   DC    CL80'  ** To improve performance, all datasets should beX\n                blocked at 32760 **'\nLLDA2D   DC    CL80'  ** All datasets contain members **'\nLLDA2W   DC    CL80'  ** To reduce system complexity, all datasets shouX\n               ld contain members **'\nLLALLOC  DC    CL133' '            Allocate command\n         ORG   LLALLOC\n         DC    C'ALLOC '\n         DC    C'FILE(XXXLST) '\n         DC    C'DA(12345678901234567890123456789012345678901234) '\n         DC    C'SHR '\n         DC    C'REUSE '\n         ORG   LLALLOC+133\nLLFREE   DC    CL133' '            Free command\n         ORG   LLFREE\n         DC    C'FREE '\n         DC    C'FILE(XXXLST) '\n         ORG   LLFREE+133\nLLSWAL   EQU   *-LLSWA             Static workarea length\n**********************************************************************\n         TITLE 'TBLHEX - HEX Table'\n**********************************************************************\nTBLHEX   $ENTRY BASE=,DWA=,MODID=NO,SAVE=NO,SAVEAREA=NO,SWA=\n         DC    256X'00'            Assume all characters are invalid\n         ORG   TBLHEX+X'F0'        0 is valid\n         DC    1X'F0'              0 is valid\n         ORG   TBLHEX+X'F1'        1 is valid\n         DC    1X'F1'              1 is valid\n         ORG   TBLHEX+X'F2'        2 is valid\n         DC    1X'F2'              2 is valid\n         ORG   TBLHEX+X'F3'        3 is valid\n         DC    1X'F3'              3 is valid\n         ORG   TBLHEX+X'F4'        4 is valid\n         DC    1X'F4'              4 is valid\n         ORG   TBLHEX+X'F5'        5 is valid\n         DC    1X'F5'              5 is valid\n         ORG   TBLHEX+X'F6'        6 is valid\n         DC    1X'F6'              6 is valid\n         ORG   TBLHEX+X'F7'        7 is valid\n         DC    1X'F7'              7 is valid\n         ORG   TBLHEX+X'F8'        8 is valid\n         DC    1X'F8'              8 is valid\n         ORG   TBLHEX+X'F9'        9 is valid\n         DC    1X'F9'              9 is valid\n         ORG   TBLHEX+X'FA'        A is valid\n         DC    1X'C1'              A is valid\n         ORG   TBLHEX+X'FB'        B is valid\n         DC    1X'C2'              B is valid\n         ORG   TBLHEX+X'FC'        C is valid\n         DC    1X'C3'              C is valid\n         ORG   TBLHEX+X'FD'        D is valid\n         DC    1X'C4'              D is valid\n         ORG   TBLHEX+X'FE'        E is valid\n         DC    1X'C5'              E is valid\n         ORG   TBLHEX+X'FF'        F is valid\n         DC    1X'C6'              F is valid\n**********************************************************************\n         TITLE 'TBLPROD - Product Table'\n**********************************************************************\nTBLPROD  $ENTRY BASE=,DWA=,MODID=NO,SAVE=NO,SAVEAREA=NO,SWA=\n         DC    CL008'#AU     ',CL012'VSAMANAL'\nTBLPRODE EQU   *-TBLPROD           Product table entry length\n         DC    CL008'$$$COIBM',CL012'MVS/IPO'\n         DC    CL008'$$$COPYR',CL012'SAS-C'\n         DC    CL008'$#S     ',CL012'Nomad'\n         DC    CL008'$AD     ',CL012'Nomad'\n         DC    CL008'$CC     ',CL012'CA-Librarian'\n         DC    CL008'$CH     ',CL012'CA-Librarian'\n         DC    CL008'$DB     ',CL012'Nomad'\n         DC    CL008'$FA     ',CL012'FastVSAM'\n         DC    CL008'$FG     ',CL012'SEA-FastGenr'\n         DC    CL008'$LS     ',CL012'Nomad'\n         DC    CL008'$NI     ',CL012'Nomad'\n         DC    CL008'$NO     ',CL012'Nomad'\n         DC    CL008'$NU     ',CL012'Nomad'\n         DC    CL008'$N2     ',CL012'Nomad'\n         DC    CL008'$PD     ',CL012'SEA-PDSFast'\n         DC    CL008'$SS     ',CL012'TMON'\n         DC    CL008'$TR     ',CL012'Nomad'\n         DC    CL008'$VD     ',CL012'Nomad'\n         DC    CL008'##Z     ',CL012'SAS-C'\n         DC    CL008'#TM     ',CL012'CW-AbendAid'\n         DC    CL008'#XA     ',CL012'CW-AbendAid'\n         DC    CL008'AAM     ',CL012'CW-AbendAid'\n         DC    CL008'AAU     ',CL012'Netview'\n         DC    CL008'ABENDAID',CL012'CW-AbendAid'\n         DC    CL008'ABENDPGM',CL012'Freeware'\n         DC    CL008'ACCOUNT ',CL012'TSOE'\n         DC    CL008'ACF     ',CL012'ACF2'\n         DC    CL008'ACR     ',CL012'UACR'\n         DC    CL008'ACY     ',CL012'VTAM'\n         DC    CL008'ADDSUB  ',CL012'MVS/IPO'\n         DC    CL008'ADF     ',CL012'TSOE'\n         DC    CL008'ADM     ',CL012'GDDM'\n         DC    CL008'ADR     ',CL012'DFDSS'\n         DC    CL008'ADY     ',CL012'MVS/DAE'\n         DC    CL008'AED     ',CL012'Nomad'\n         DC    CL008'AEM     ',CL012'GDDM'\n         DC    CL008'AFH     ',CL012'LE'\n         DC    CL008'AHL     ',CL012'MVS/GTF'\n         DC    CL008'AIO     ',CL012'PSF'\n         DC    CL008'AKJ     ',CL012'DFSMS'\n         DC    CL008'AKQ     ',CL012'PPFA'\n         DC    CL008'ALLOCATE',CL012'TSOE'\n         DC    CL008'AMA     ',CL012'MVS/Superzap'\n         DC    CL008'AMB     ',CL012'DFSMS'\n         DC    CL008'AMD     ',CL012'MVS/SADMP'\n         DC    CL008'AMS     ',CL012'RMF'\n         DC    CL008'ANA     ',CL012'CW-AbendAid'\n         DC    CL008'ANF     ',CL012'PSF/IPPW'\n         DC    CL008'ANR     ',CL012'ADSM'\n         DC    CL008'ANS     ',CL012'ADSM'\n         DC    CL008'ANT     ',CL012'DFSMS'\n         DC    CL008'AOM     ',CL012'DFSMS/AOM'\n         DC    CL008'APA     ',CL012'SW-APA'\n         DC    CL008'APILOAD ',CL012'ISPF'\n         DC    CL008'APL     ',CL012'VSAPL'\n         DC    CL008'APP     ',CL012'C/C++'\n         DC    CL008'APQ     ',CL012'AFP'\n         DC    CL008'APR     ',CL012'PSF'\n         DC    CL008'APS     ',CL012'PSF'\n         DC    CL008'ARB     ',CL012'Arbiter'\n         DC    CL008'ARC     ',CL012'DFHSM'\n         DC    CL008'ASA     ',CL012'MVS/Reuse'\n         DC    CL008'ASB     ',CL012'MVS/APPC'\n         DC    CL008'ASC     ',CL012'C/C++'\n         DC    CL008'ASE     ',CL012'MVS/ASE'\n         DC    CL008'ASM     ',CL012'ASM/HighLvl'\n         DC    CL008'ASR     ',CL012'MVS/SYMREC'\n         DC    CL008'ATA     ',CL012'Nomad'\n         DC    CL008'ATB     ',CL012'MVS/APPC'\n         DC    CL008'ATC     ',CL012'Nomad'\n         DC    CL008'ATM     ',CL012'CW-AbendAid'\n         DC    CL008'ATP     ',CL012'Nomad'\n         DC    CL008'ATR     ',CL012'MVS/RRS'\n         DC    CL008'ATS     ',CL012'Nomad'\n         DC    CL008'ATTRIB  ',CL012'TSOE'\n         DC    CL008'ATV     ',CL012'Nomad'\n         DC    CL008'AVF     ',CL012'MVS'\n         DC    CL008'AVR     ',CL012'MVS'\n         DC    CL008'AWB     ',CL012'CW-AbendAid'\n         DC    CL008'AWC     ',CL012'CW-AbendAid'\n         DC    CL008'AWM     ',CL012'CW-AbendAid'\n         DC    CL008'AWN     ',CL012'CW-AbendAid'\n         DC    CL008'AWT     ',CL012'CW-AbendAid'\n         DC    CL008'AXA     ',CL012'CW-AbendAid'\n         DC    CL008'BCO     ',CL012'Nomad'\n         DC    CL008'BDF     ',CL012'Freeware'\n         DC    CL008'BDT     ',CL012'BDT'\n         DC    CL008'BEX     ',CL012'Nomad'\n         DC    CL008'BFL     ',CL012'SLM'\n         DC    CL008'BFS     ',CL012'MVS/LFS'\n         DC    CL008'BLG     ',CL012'Info'\n         DC    CL008'BLH     ',CL012'Info'\n         DC    CL008'BLM     ',CL012'Info'\n         DC    CL008'BLR     ',CL012'MVS/IPCS'\n         DC    CL008'BLS     ',CL012'MVS/IPCS'\n         DC    CL008'BLW     ',CL012'MVS'\n         DC    CL008'BLX     ',CL012'Info'\n         DC    CL008'BMA     ',CL012'Nomad'\n         DC    CL008'BNI     ',CL012'Netview'\n         DC    CL008'BNJ     ',CL012'Netview'\n         DC    CL008'BOP     ',CL012'MVS/OE'\n         DC    CL008'BOY     ',CL012'MVS'\n         DC    CL008'BPX     ',CL012'MVS/OE'\n         DC    CL008'BTE     ',CL012'Nomad'\n         DC    CL008'BTN     ',CL012'Info'\n         DC    CL008'CA$     ',CL012'CA-PLNK'\n         DC    CL008'CAC     ',CL012'CA-Optimizer'\n         DC    CL008'CAD     ',CL012'CA-Docview'\n         DC    CL008'CAE     ',CL012'CA-Universe'\n         DC    CL008'CAI     ',CL012'CA-90s'\n         DC    CL008'CAL0    ',CL012'CA-1'\n         DC    CL008'CAL2    ',CL012'CA-7'\n         DC    CL008'CAL7    ',CL012'CA-11'\n         DC    CL008'CANCEL  ',CL012'TSOE'\n         DC    CL008'CAO     ',CL012'CA-Optimizer'\n         DC    CL008'CAS     ',CL012'CA-90s'\n         DC    CL008'CA11    ',CL012'CA-11'\n         DC    CL008'CA4     ',CL012'CA-PLNK'\n         DC    CL008'CA5FLUX0',CL012'CA-PMA/Look'\n         DC    CL008'CA7     ',CL012'CA-7'\n         DC    CL008'CBA     ',CL012'CA-PLNK'\n         DC    CL008'CBC     ',CL012'C/C++'\n         DC    CL008'CBD     ',CL012'MVS/HCD'\n         DC    CL008'CBD     ',CL012'PSF'\n         DC    CL008'CBE     ',CL012'Phoenix'\n         DC    CL008'CBP     ',CL012'MVS/MVSCP'\n         DC    CL008'CBPUS   ',CL012'MVS/IOS'\n         DC    CL008'CBR     ',CL012'DFSMS/OAM'\n         DC    CL008'CBT973  ',CL012'Freeware'\n         DC    CL008'CCF     ',CL012'CA-Librarian'\n         DC    CL008'CCI     ',CL012'CA-PLNK'\n         DC    CL008'CDF     ',CL012'CA-Librarian'\n         DC    CL008'CDR     ',CL012'DFSMS/CDRA'\n         DC    CL008'CDSCB   ',CL012'Freeware'\n         DC    CL008'CEE     ',CL012'LE'\n         DC    CL008'CHF     ',CL012'HCF'\n         DC    CL008'CHR     ',CL012'Nomad'\n         DC    CL008'CHS     ',CL012'TSOE'\n         DC    CL008'CID     ',CL012'SMPE'\n         DC    CL008'CIP     ',CL012'DFSMS/3800'\n         DC    CL008'CLB     ',CL012'C/C++'\n         DC    CL008'CMP     ',CL012'DFSMS'\n         DC    CL008'CND     ',CL012'Omegamon'\n         DC    CL008'CNF     ',CL012'SAS'\n         DC    CL008'CNG     ',CL012'Consul-RACF'\n         DC    CL008'CNL     ',CL012'MVS/MMS'\n         DC    CL008'CNM     ',CL012'Netview'\n         DC    CL008'COD     ',CL012'TMON'\n         DC    CL008'COF     ',CL012'MVS/VLF'\n         DC    CL008'COL     ',CL012'C/C++'\n         DC    CL008'COM     ',CL012'C/C++'\n         DC    CL008'COMMAND ',CL012'Freeware'\n         DC    CL008'CONSOLE ',CL012'TSOE'\n         DC    CL008'CONSPROF',CL012'TSOE'\n         DC    CL008'CONVERT ',CL012'LRS-VPS'\n         DC    CL008'CONVXLAT',CL012'TCP/IP'\n         DC    CL008'COPY    ',CL012'Nomad'\n         DC    CL008'COS     ',CL012'CA-TLMS'\n         DC    CL008'COUNT   ',CL012'Freeware'\n         DC    CL008'CPP     ',CL012'TCP/IP'\n         DC    CL008'CPYBLDL ',CL012'MVS/CSV'\n         DC    CL008'CPYRITE ',CL012'SAS'\n         DC    CL008'CRG     ',CL012'MVS'\n         DC    CL008'CR8     ',CL012'CA-PLNK'\n         DC    CL008'CSA     ',CL012'Omegamon'\n         DC    CL008'CSAMPLE ',CL012'TCP/IP'\n         DC    CL008'CSL     ',CL012'ISPF'\n         DC    CL008'CSM     ',CL012'CW-AbendAid'\n         DC    CL008'CSQ     ',CL012'MQSeries'\n         DC    CL008'CSR     ',CL012'MVS/CSR'\n         DC    CL008'CSV     ',CL012'MVS/CSV'\n         DC    CL008'CT      ',CL012'Freeware'\n         DC    CL008'CTS     ',CL012'CA-CmnTape'\n         DC    CL008'CTX     ',CL012'MVS'\n         DC    CL008'CUS     ',CL012'CW-FileAid'\n         DC    CL008'CVA     ',CL012'DFSMS/CVAF'\n         DC    CL008'CVR     ',CL012'Vision'\n         DC    CL008'CVS     ',CL012'Vision'\n         DC    CL008'CVW     ',CL012'Vision'\n         DC    CL008'CWA     ',CL012'CW-AbendAid'\n         DC    CL008'CWB     ',CL012'CW-AbendAid'\n         DC    CL008'CWC     ',CL012'CW-AbendAid'\n         DC    CL008'CWD     ',CL012'Compuware'\n         DC    CL008'CWG     ',CL012'CW-AbendAid'\n         DC    CL008'CWI     ',CL012'CW-AbendAid'\n         DC    CL008'CWJ     ',CL012'CW-AbendAid'\n         DC    CL008'CWM     ',CL012'CW-AbendAid'\n         DC    CL008'CWN     ',CL012'CW-AbendAid'\n         DC    CL008'CWP     ',CL012'Compuware'\n         DC    CL008'CWT     ',CL012'CW-AbendAid'\n         DC    CL008'CWU     ',CL012'CW-AbendAid'\n         DC    CL008'CWV     ',CL012'CW-AbendAid'\n         DC    CL008'CWY     ',CL012'CW-AbendAid'\n         DC    CL008'CXX     ',CL012'C/C++'\n         DC    CL008'CYR     ',CL012'Nomad'\n         DC    CL008'C11     ',CL012'CA-11'\n         DC    CL008'D$L     ',CL012'Vision'\n         DC    CL008'DAD     ',CL012'CA-DADS'\n         DC    CL008'DAF     ',CL012'Freeware'\n         DC    CL008'DBC     ',CL012'Nomad'\n         DC    CL008'DBN     ',CL012'RMDS'\n         DC    CL008'DBO     ',CL012'LRS-VPS'\n         DC    CL008'DB2     ',CL012'Nomad'\n         DC    CL008'DCK     ',CL012'PSF'\n         DC    CL008'DEU     ',CL012'Nomad'\n         DC    CL008'DFH     ',CL012'CICS'\n         DC    CL008'DFS     ',CL012'IMS'\n         DC    CL008'DGN     ',CL012'Jobscan'\n         DC    CL008'DGT     ',CL012'DFSMS/ISMF'\n         DC    CL008'DIG     ',CL012'TCP/IP'\n         DC    CL008'DIO     ',CL012'Nomad'\n         DC    CL008'DLE     ',CL012'LRS-VPS'\n         DC    CL008'DL7     ',CL012'CA-11'\n         DC    CL008'DMS     ',CL012'DFSMS'\n         DC    CL008'DPS     ',CL012'LRS-VPS'\n         DC    CL008'DRE     ',CL012'SLR'\n         DC    CL008'DRIVER  ',CL012'SEA-PDSFast'\n         DC    CL008'DSI     ',CL012'Netview'\n         DC    CL008'DSM     ',CL012'DCF'\n         DC    CL008'DSN     ',CL012'DB2'\n         DC    CL008'DST     ',CL012'LRS-VPS'\n         DC    CL008'DSX     ',CL012'NDM'\n         DC    CL008'DUI     ',CL012'Netview'\n         DC    CL008'DUT     ',CL012'Nomad'\n         DC    CL008'DXR     ',CL012'ILRM'\n         DC    CL008'DYA     ',CL012'Vision'\n         DC    CL008'DYD     ',CL012'Vision'\n         DC    CL008'DYF     ',CL012'Vision'\n         DC    CL008'DYI     ',CL012'Vision'\n         DC    CL008'DYL     ',CL012'Vision'\n         DC    CL008'DYN     ',CL012'CA-1'\n         DC    CL008'DY2     ',CL012'Vision'\n         DC    CL008'DZI     ',CL012'OGL'\n         DC    CL008'D00     ',CL012'Jobscan'\n         DC    CL008'D08     ',CL012'Jobscan'\n         DC    CL008'D13     ',CL012'LRS-VPS'\n         DC    CL008'EAG     ',CL012'REXX'\n         DC    CL008'EAR     ',CL012'CA-EARL'\n         DC    CL008'EBC     ',CL012'CA-View'\n         DC    CL008'EDC     ',CL012'LE'\n         DC    CL008'EDG     ',CL012'DFRMM'\n         DC    CL008'EDIT    ',CL012'TSOE'\n         DC    CL008'EGI     ',CL012'DSM'\n         DC    CL008'EGS     ',CL012'DSM'\n         DC    CL008'EHO     ',CL012'ISPF'\n         DC    CL008'EIRMF   ',CL012'Omegamon/IMS'\n         DC    CL008'ELI     ',CL012'CA-Librarian'\n         DC    CL008'ELM     ',CL012'VTAM'\n         DC    CL008'EMODVOL1',CL012'DFSMS'\n         DC    CL008'EMRMF   ',CL012'Omegamon/MVS'\n         DC    CL008'END     ',CL012'TSOE'\n         DC    CL008'ENQ     ',CL012'Freeware'\n         DC    CL008'EOX     ',CL012'BookMgr'\n         DC    CL008'EOY     ',CL012'BookMgr'\n         DC    CL008'EPP     ',CL012'Omegamon'\n         DC    CL008'EPW     ',CL012'FFST'\n         DC    CL008'ERA     ',CL012'CA-SRAM'\n         DC    CL008'ERB     ',CL012'RMF'\n         DC    CL008'ERX     ',CL012'GDDM'\n         DC    CL008'ESP     ',CL012'Nomad'\n         DC    CL008'EUV     ',CL012'MVS/OE'\n         DC    CL008'EWX     ',CL012'MVS/LANRES'\n         DC    CL008'EXEC    ',CL012'TSOE'\n         DC    CL008'EXITSM  ',CL012'Jobscan'\n         DC    CL008'EXR     ',CL012'DSM'\n         DC    CL008'EXS     ',CL012'DSM'\n         DC    CL008'EXT     ',CL012'TCP/IP'\n         DC    CL008'EZA     ',CL012'TCP/IP'\n         DC    CL008'E12     ',CL012'CA-View'\n         DC    CL008'E14     ',CL012'CA-View'\n         DC    CL008'E20     ',CL012'CA-View'\n         DC    CL008'F$      ',CL012'FDR'\n         DC    CL008'FAA     ',CL012'CW-FileAid'\n         DC    CL008'FAC     ',CL012'CW-FileAid'\n         DC    CL008'FAI     ',CL012'CW-FileAid'\n         DC    CL008'FAM     ',CL012'FastVSAM'\n         DC    CL008'FAS     ',CL012'CW-FileAid'\n         DC    CL008'FASTGENR',CL012'SEA-FastGenr'\n         DC    CL008'FASTISPF',CL012'SEA-PDSFast'\n         DC    CL008'FASTUTIL',CL012'FastUTIL'\n         DC    CL008'FASTVSAM',CL012'FastVSAM'\n         DC    CL008'FAU     ',CL012'CW-FileAid'\n         DC    CL008'FAX     ',CL012'CW-FileAid'\n         DC    CL008'FBC     ',CL012'CW-FileAid'\n         DC    CL008'FCBLIST ',CL012'Freeware'\n         DC    CL008'FD$     ',CL012'FDR'\n         DC    CL008'FDBX    ',CL012'MVS/OE'\n         DC    CL008'FDR     ',CL012'FDR'\n         DC    CL008'FDS     ',CL012'SEA-FastGenr'\n         DC    CL008'FILEAID ',CL012'CW-FileAid'\n         DC    CL008'FIN     ',CL012'Nomad'\n         DC    CL008'FLM     ',CL012'ISPF/SCLM'\n         DC    CL008'FL7     ',CL012'CA-11'\n         DC    CL008'FMH     ',CL012'DSM'\n         DC    CL008'FNM     ',CL012'NPM'\n         DC    CL008'FOM     ',CL012'MVS/OE'\n         DC    CL008'FPS     ',CL012'LRS-VPS'\n         DC    CL008'FRA     ',CL012'Nomad'\n         DC    CL008'FREE    ',CL012'TSOE'\n         DC    CL008'FRENCH  ',CL012'Nomad'\n         DC    CL008'FRO     ',CL012'Vision'\n         DC    CL008'FSI     ',CL012'GDDM'\n         DC    CL008'FSO     ',CL012'Flasher'\n         DC    CL008'FSP     ',CL012'CW-FileAid'\n         DC    CL008'FSU     ',CL012'MVS/OE'\n         DC    CL008'FTI     ',CL012'Nomad'\n         DC    CL008'FTP     ',CL012'TCP/IP'\n         DC    CL008'FVS     ',CL012'Vision'\n         DC    CL008'FZD     ',CL012'NDM'\n         DC    CL008'F33     ',CL012'CA-PLNK'\n         DC    CL008'GDE     ',CL012'DFSMS/DFM'\n         DC    CL008'GDM     ',CL012'GDDM'\n         DC    CL008'GDXADML1',CL012'GDDM'\n         DC    CL008'GDXLIOX0',CL012'TCP/IP'\n         DC    CL008'GENRMT  ',CL012'MVS'\n         DC    CL008'GER     ',CL012'Nomad'\n         DC    CL008'GETCPUID',CL012'SuperTracs'\n         DC    CL008'GFSA    ',CL012'DFSMS/NFSS'\n         DC    CL008'GFU     ',CL012'MVS/OE'\n         DC    CL008'GIM     ',CL012'SMPE'\n         DC    CL008'GOALSYS ',CL012'Phoenix'\n         DC    CL008'GOS     ',CL012'SOM'\n         DC    CL008'GOT     ',CL012'SOM'\n         DC    CL008'GQF     ',CL012'GDDM'\n         DC    CL008'GRAF    ',CL012'DFSMS/3800'\n         DC    CL008'GREEK   ',CL012'Nomad'\n         DC    CL008'GRF     ',CL012'DFSMS/3800'\n         DC    CL008'GRS     ',CL012'Freeware'\n         DC    CL008'GSV     ',CL012'CA-Sysview'\n         DC    CL008'G8L     ',CL012'CA-OSI'\n         DC    CL008'G8M     ',CL012'CA-OSI'\n         DC    CL008'G8P     ',CL012'CA-OSI'\n         DC    CL008'G8S     ',CL012'CA-OSI'\n         DC    CL008'G8U     ',CL012'CA-OSI'\n         DC    CL008'G8X     ',CL012'CA-OSI'\n         DC    CL008'G8Z     ',CL012'CA-OSI'\n         DC    CL008'HAS     ',CL012'JES2'\n         DC    CL008'HELP    ',CL012'TSOE'\n         DC    CL008'HELVETIC',CL012'Nomad'\n         DC    CL008'HEW     ',CL012'DFSMS'\n         DC    CL008'HIR     ',CL012'Nomad'\n         DC    CL008'HLP     ',CL012'SW-VIOPlus'\n         DC    CL008'HMA     ',CL012'SMPE'\n         DC    CL008'HMD     ',CL012'DFSMS'\n         DC    CL008'HOMETEST',CL012'TCP/IP'\n         DC    CL008'HP7     ',CL012'Nomad'\n         DC    CL008'IAD     ',CL012'Nomad'\n         DC    CL008'IAR     ',CL012'MVS/RSM'\n         DC    CL008'IAS     ',CL012'JES2'\n         DC    CL008'IASX    ',CL012'JES2/XWTR'\n         DC    CL008'IAT     ',CL012'JES3'\n         DC    CL008'IAZ     ',CL012'JES2/FSI'\n         DC    CL008'IBM     ',CL012'LE'\n         DC    CL008'ICB     ',CL012'C/C++'\n         DC    CL008'ICE     ',CL012'DFSORT'\n         DC    CL008'ICH     ',CL012'RACF'\n         DC    CL008'ICK     ',CL012'DSF'\n         DC    CL008'ICL     ',CL012'SADSF'\n         DC    CL008'ICMDSECT',CL012'CA-7'\n         DC    CL008'ICP     ',CL012'MVS/IOCP'\n         DC    CL008'ICQ     ',CL012'TSOE/ICF'\n         DC    CL008'ICV     ',CL012'DFSMS/CVAF'\n         DC    CL008'ICY     ',CL012'DFSMS'\n         DC    CL008'IDA     ',CL012'DFSMS'\n         DC    CL008'IDC     ',CL012'DFSMS/AMS'\n         DC    CL008'IDD     ',CL012'DFSMS'\n         DC    CL008'IDMS    ',CL012'CA-IDMS'\n         DC    CL008'IDY     ',CL012'TSOE'\n         DC    CL008'IEA     ',CL012'MVS'\n         DC    CL008'IEAAL   ',CL012'MVS/PCAuth'\n         DC    CL008'IEAAS   ',CL012'MVS/SupCtl'\n         DC    CL008'IEABS   ',CL012'MVS/SupCtl'\n         DC    CL008'IEACS   ',CL012'MVS/SupCtl'\n         DC    CL008'IEAE    ',CL012'MVS/PCAuth'\n         DC    CL008'IEAFI   ',CL012'MVS/SupCtl'\n         DC    CL008'IEAFT   ',CL012'MVS/RTM'\n         DC    CL008'IEAIH   ',CL012'MVS/SupCtl'\n         DC    CL008'IEAIP   ',CL012'MVS/IPL'\n         DC    CL008'IEAIPCSP',CL012'MVS/CommTask'\n         DC    CL008'IEAIPL  ',CL012'MVS'\n         DC    CL008'IEALC   ',CL012'MVS/SupCtl'\n         DC    CL008'IEALI   ',CL012'MVS/VSM'\n         DC    CL008'IEALS   ',CL012'MVS/SupCtl'\n         DC    CL008'IEAML   ',CL012'MVS/IOS'\n         DC    CL008'IEAMSD  ',CL012'MVS/RTM'\n         DC    CL008'IEAMSW  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAMTL  ',CL012'MVS/IOS'\n         DC    CL008'IEAPS   ',CL012'MVS/SupCtl'\n         DC    CL008'IEAR    ',CL012'MVS/Task'\n         DC    CL008'IEASCF  ',CL012'MVS/SupCtl'\n         DC    CL008'IEASM   ',CL012'MVS/SMF'\n         DC    CL008'IEASR   ',CL012'MVS/SupCtl'\n         DC    CL008'IEASSA  ',CL012'MVS/Task'\n         DC    CL008'IEASSR  ',CL012'MVS/SupCtl'\n         DC    CL008'IEASTC  ',CL012'MVS/Task'\n         DC    CL008'IEASTK  ',CL012'MVS/PCAuth'\n         DC    CL008'IEASV   ',CL012'MVS/SupCtl'\n         DC    CL008'IEASY   ',CL012'MVS/NIP'\n         DC    CL008'IEATC   ',CL012'MVS/Task'\n         DC    CL008'IEATD   ',CL012'MVS/Timer'\n         DC    CL008'IEATE   ',CL012'MVS/Timer'\n         DC    CL008'IEATL   ',CL012'MVS/SMF'\n         DC    CL008'IEATP   ',CL012'MVS/Timer'\n         DC    CL008'IEATS   ',CL012'MVS/Timer'\n         DC    CL008'IEATT   ',CL012'MVS/Timer'\n         DC    CL008'IEAVAD  ',CL012'MVS/Dump'\n         DC    CL008'IEAVAL  ',CL012'MVS/PCAuth'\n         DC    CL008'IEAVAP  ',CL012'MVS/IPL'\n         DC    CL008'IEAVAR  ',CL012'MVS/RCT'\n         DC    CL008'IEAVAS  ',CL012'MVS/RCT'\n         DC    CL008'IEAVAT  ',CL012'MVS/RCT'\n         DC    CL008'IEAVAU  ',CL012'MVS/RCT'\n         DC    CL008'IEAVAV  ',CL012'MVS/RCT'\n         DC    CL008'IEAVAW  ',CL012'MVS/RCT'\n         DC    CL008'IEAVAX  ',CL012'MVS/RCT'\n         DC    CL008'IEAVBL  ',CL012'MVS/VSM'\n         DC    CL008'IEAVBT  ',CL012'MVS/Task'\n         DC    CL008'IEAVBW  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVC   ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVC7  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVDE  ',CL012'MVS/VSM'\n         DC    CL008'IEAVD2  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVD3  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEAC ',CL012'MVS/Task'\n         DC    CL008'IEAVEAD ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEB  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVECB ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVECM ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVECM ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVED  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVED  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEED ',CL012'MVS/Task'\n         DC    CL008'IEAVEEE ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEF  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEMI ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEMP ',CL012'MVS/Task'\n         DC    CL008'IEAVEMR ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEMS ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEN  ',CL012'MVS/NIP'\n         DC    CL008'IEAVEO  ',CL012'MVS/Task'\n         DC    CL008'IEAVEPC ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEPD ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEQ  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEST ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVESU ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVESV ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVETA ',CL012'MVS/Trace'\n         DC    CL008'IEAVETV ',CL012'MVS/Trace'\n         DC    CL008'IEAVEVA ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEVS ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVEW  ',CL012'MVS/Task'\n         DC    CL008'IEAVEX  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVFRC ',CL012'MVS/VSM'\n         DC    CL008'IEAVFRL ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVG   ',CL012'MVS/CommTask'\n         DC    CL008'IEAVGS  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVGT  ',CL012'MVS/VSM'\n         DC    CL008'IEAVH   ',CL012'MVS/CommTask'\n         DC    CL008'IEAVID  ',CL012'MVS/CSV'\n         DC    CL008'IEAVIN  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVL   ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVMA  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVMB  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVMC  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVMD  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVME  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVMN  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVMO  ',CL012'MVS/Task'\n         DC    CL008'IEAVMQ  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVMQ  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVMSF ',CL012'MVS/SPI'\n         DC    CL008'IEAVMSG ',CL012'MVS/VSM'\n         DC    CL008'IEAVMV  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVMW  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVNI  ',CL012'MVS/NIP'\n         DC    CL008'IEAVNPA6',CL012'MVS/RTM'\n         DC    CL008'IEAVNPD1',CL012'MVS/Dump'\n         DC    CL008'IEAVNPD2',CL012'MVS/Dump'\n         DC    CL008'IEAVNPD6',CL012'MVS/RTM'\n         DC    CL008'IEAVNPE ',CL012'MVS/NIP'\n         DC    CL008'IEAVNPF ',CL012'MVS/NIP'\n         DC    CL008'IEAVNPM ',CL012'MVS/NIP'\n         DC    CL008'IEAVNPX ',CL012'MVS/NIP'\n         DC    CL008'IEAVNP57',CL012'MVS/Dump'\n         DC    CL008'IEAVNS  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVN1  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVN6  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVN7  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVQ   ',CL012'MVS/CommTask'\n         DC    CL008'IEAVR   ',CL012'MVS/Timer'\n         DC    CL008'IEAVSE  ',CL012'MVS/Task'\n         DC    CL008'IEAVSS  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVST  ',CL012'MVS/RTM'\n         DC    CL008'IEAVSV  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVSW  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVT   ',CL012'MVS/RTM'\n         DC    CL008'IEAVTAB ',CL012'MVS/Dump'\n         DC    CL008'IEAVTACR',CL012'MVS/ACR'\n         DC    CL008'IEAVTB  ',CL012'MVS/Task'\n         DC    CL008'IEAVTC  ',CL012'MVS/RTM'\n         DC    CL008'IEAVTEST',CL012'MVS/Task'\n         DC    CL008'IEAVTEX ',CL012'MVS/RTM'\n         DC    CL008'IEAVTFMT',CL012'MVS/RTM'\n         DC    CL008'IEAVTJBN',CL012'MVS'\n         DC    CL008'IEAVTPE ',CL012'MVS/RTM'\n         DC    CL008'IEAVTPM ',CL012'MVS/VSM'\n         DC    CL008'IEAVTR  ',CL012'MVS/RTM'\n         DC    CL008'IEAVTS  ',CL012'MVS/RTM'\n         DC    CL008'IEAVTT  ',CL012'MVS/Task'\n         DC    CL008'IEAVTV  ',CL012'MVS/Dump'\n         DC    CL008'IEAVVC  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVVJ  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVVK  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVVL  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVVM  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVVR  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVVS  ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVVT  ',CL012'MVS/Timer'\n         DC    CL008'IEAVVW  ',CL012'MVS/CommTask'\n         DC    CL008'IEAVW   ',CL012'MVS/SupCtl'\n         DC    CL008'IEAVXA  ',CL012'MVS/PCAuth'\n         DC    CL008'IEAVXT  ',CL012'MVS/PCAuth'\n         DC    CL008'IEAVX6  ',CL012'MVS/CommTask'\n         DC    CL008'IEAV2   ',CL012'MVS/CommTask'\n         DC    CL008'IEAXP   ',CL012'MVS/EFP'\n         DC    CL008'IEAXS   ',CL012'MVS/SupCtl'\n         DC    CL008'IEB     ',CL012'DFSMS/Utils'\n         DC    CL008'IEC     ',CL012'DFSMS'\n         DC    CL008'IECDA   ',CL012'MVS/Dump'\n         DC    CL008'IECI    ',CL012'MVS/IOS'\n         DC    CL008'IECL    ',CL012'MVS/IOS'\n         DC    CL008'IECT    ',CL012'MVS/IOS'\n         DC    CL008'IECVAFP1',CL012'PSF'\n         DC    CL008'IECVDA  ',CL012'MVS/EXCP'\n         DC    CL008'IECVDD  ',CL012'MVS/IOS'\n         DC    CL008'IECVER  ',CL012'MVS/IOS'\n         DC    CL008'IECVEX  ',CL012'MVS/EXCP'\n         DC    CL008'IECVF   ',CL012'MVS/IOS'\n         DC    CL008'IECVIOPM',CL012'MVS/IOS'\n         DC    CL008'IECVOI  ',CL012'MVS/IOS'\n         DC    CL008'IECVOP  ',CL012'MVS/EXCP'\n         DC    CL008'IECVP   ',CL012'MVS/IOS'\n         DC    CL008'IECVQ   ',CL012'MVS/IOS'\n         DC    CL008'IECVR   ',CL012'MVS/IOS'\n         DC    CL008'IECVS   ',CL012'MVS/IOS'\n         DC    CL008'IECVT   ',CL012'MVS/EXCP'\n         DC    CL008'IECVX   ',CL012'MVS/IOS'\n         DC    CL008'IED     ',CL012'TSOE'\n         DC    CL008'IEE     ',CL012'MVS'\n         DC    CL008'IEECB867',CL012'MVS/Dump'\n         DC    CL008'IEECB913',CL012'MVS/SMF'\n         DC    CL008'IEECB916',CL012'MVS/SMF'\n         DC    CL008'IEECB933',CL012'DFSMS'\n         DC    CL008'IEECB934',CL012'DFSMS'\n         DC    CL008'IEECB935',CL012'DFSMS'\n         DC    CL008'IEECB936',CL012'DFSMS'\n         DC    CL008'IEECB938',CL012'MVS/IOS'\n         DC    CL008'IEECB939',CL012'MVS/IOS'\n         DC    CL008'IEECB950',CL012'MVS/IOS'\n         DC    CL008'IEECB951',CL012'MVS/IOS'\n         DC    CL008'IEECB953',CL012'MVS/IOS'\n         DC    CL008'IEECVET ',CL012'MVS/CommTask'\n         DC    CL008'IEECVFT ',CL012'MVS/CommTask'\n         DC    CL008'IEEC2   ',CL012'MVS/CommTask'\n         DC    CL008'IEEDI   ',CL012'MVS/SRM'\n         DC    CL008'IEED3   ',CL012'MVS/DIDOCS'\n         DC    CL008'IEEMB82 ',CL012'MVS/SMF'\n         DC    CL008'IEEMB83 ',CL012'MVS/SMF'\n         DC    CL008'IEEMB84 ',CL012'MVS/SMF'\n         DC    CL008'IEEVDC  ',CL012'MVS/CommTask'\n         DC    CL008'IEE70110',CL012'MVS/SMF'\n         DC    CL008'IEF     ',CL012'MVS'\n         DC    CL008'IEFA    ',CL012'MVS/Alloc'\n         DC    CL008'IEFB    ',CL012'MVS/Alloc'\n         DC    CL008'IEFDB   ',CL012'MVS/Alloc'\n         DC    CL008'IEFEB   ',CL012'MVS/Alloc'\n         DC    CL008'IEFEN   ',CL012'MVS/ENF'\n         DC    CL008'IEFGB400',CL012'MVS/Alloc'\n         DC    CL008'IEFN    ',CL012'MVS/CI'\n         DC    CL008'IEFQ    ',CL012'MVS/SWA'\n         DC    CL008'IEFQB551',CL012'MVS/SJF'\n         DC    CL008'IEFSJ   ',CL012'MVS/SJF'\n         DC    CL008'IEFSM   ',CL012'MVS/SMF'\n         DC    CL008'IEFTA   ',CL012'MVS/SJF'\n         DC    CL008'IEFTB72 ',CL012'MVS/SMF'\n         DC    CL008'IEFTB73 ',CL012'MVS/SJF'\n         DC    CL008'IEFTZ   ',CL012'MVS/SJF'\n         DC    CL008'IEFU    ',CL012'MVS/SMF'\n         DC    CL008'IEFV    ',CL012'MVS/CI'\n         DC    CL008'IEFW21SD',CL012'MVS/Alloc'\n         DC    CL008'IEFX    ',CL012'MVS/SJF'\n         DC    CL008'IEH     ',CL012'DFSMS/Utils'\n         DC    CL008'IES     ',CL012'MVS/VisulLft'\n         DC    CL008'IEV     ',CL012'ASM/H'\n         DC    CL008'IEW     ',CL012'DFSMS'\n         DC    CL008'IEZ     ',CL012'MVS'\n         DC    CL008'IFA     ',CL012'MVS/SMF'\n         DC    CL008'IFAUMQM#',CL012'MQSeries'\n         DC    CL008'IFB     ',CL012'EREP'\n         DC    CL008'IFC     ',CL012'EREP'\n         DC    CL008'IFD     ',CL012'MVS/OLTEP'\n         DC    CL008'IFF     ',CL012'DFSMS/GSP'\n         DC    CL008'IFG     ',CL012'DFSMS'\n         DC    CL008'IFG0192F',CL012'VTAM'\n         DC    CL008'IFH     ',CL012'DFSMS'\n         DC    CL008'IFO     ',CL012'ASM/F'\n         DC    CL008'IGB     ',CL012'DFSMS'\n         DC    CL008'IGC     ',CL012'DFSMS'\n         DC    CL008'IGCS    ',CL012'CA-7'\n         DC    CL008'IGC0001C',CL012'MVS/RTM'\n         DC    CL008'IGC0001G',CL012'MVS/IOS'\n         DC    CL008'IGC0003C',CL012'MVS/IOS'\n         DC    CL008'IGC0003D',CL012'MVS'\n         DC    CL008'IGC0004A',CL012'MVS/CSV'\n         DC    CL008'IGC0005A',CL012'MVS/RTM'\n         DC    CL008'IGC0005I',CL012'MVS/OLTEP'\n         DC    CL008'IGC0006A',CL012'TSOE'\n         DC    CL008'IGC0008C',CL012'MVS/SMF'\n         DC    CL008'IGC0009G',CL012'TSOE'\n         DC    CL008'IGC0013{',CL012'RACF'\n         DC    CL008'IGC0013I',CL012'DFSMS/CVAF'\n         DC    CL008'IGC0203E',CL012'MVS'\n         DC    CL008'IGC0403D',CL012'MVS'\n         DC    CL008'IGC047  ',CL012'MVS'\n         DC    CL008'IGC0805A',CL012'MVS/RTM'\n         DC    CL008'IGC116  ',CL012'MVS'\n         DC    CL008'IGD     ',CL012'DFSMS'\n         DC    CL008'IGE     ',CL012'DFSMS'\n         DC    CL008'IGE00   ',CL012'MVS/IOS'\n         DC    CL008'IGE0000E',CL012'PSF'\n         DC    CL008'IGE0010F',CL012'VTAM'\n         DC    CL008'IGF     ',CL012'MVS'\n         DC    CL008'IGFD    ',CL012'MVS/DDR'\n         DC    CL008'IGFPB   ',CL012'MVS/IPL'\n         DC    CL008'IGFPM   ',CL012'MVS/MCH'\n         DC    CL008'IGFPT   ',CL012'MVS/MCH'\n         DC    CL008'IGFPX   ',CL012'MVS/MCH'\n         DC    CL008'IGG     ',CL012'DFSMS'\n         DC    CL008'IGGUCC00',CL012'CA'\n         DC    CL008'IGGU0100',CL012'CA-1'\n         DC    CL008'IGR     ',CL012'Nomad'\n         DC    CL008'IGU     ',CL012'DFSMS'\n         DC    CL008'IGV     ',CL012'MVS'\n         DC    CL008'IGVA    ',CL012'MVS/VSM'\n         DC    CL008'IGVB    ',CL012'MVS/VSM'\n         DC    CL008'IGVC    ',CL012'MVS/VSM'\n         DC    CL008'IGVD    ',CL012'MVS/VSM'\n         DC    CL008'IGVE    ',CL012'MVS/IPL'\n         DC    CL008'IGVF    ',CL012'MVS/VSM'\n         DC    CL008'IGVG    ',CL012'MVS/VSM'\n         DC    CL008'IGVH    ',CL012'MVS/VSM'\n         DC    CL008'IGVI    ',CL012'MVS/VSM'\n         DC    CL008'IGVJ    ',CL012'MVS/VSM'\n         DC    CL008'IGVK    ',CL012'MVS/VSM'\n         DC    CL008'IGVL    ',CL012'MVS/VSM'\n         DC    CL008'IGVN    ',CL012'MVS/IPL'\n         DC    CL008'IGVR    ',CL012'MVS/VSM'\n         DC    CL008'IGVS    ',CL012'MVS/VSM'\n         DC    CL008'IGVT    ',CL012'MVS/VSM'\n         DC    CL008'IGVU    ',CL012'MVS/VSM'\n         DC    CL008'IGVV    ',CL012'MVS/VSM'\n         DC    CL008'IGW     ',CL012'DFSMS'\n         DC    CL008'IGX     ',CL012'MVS'\n         DC    CL008'IGX0    ',CL012'TSOE'\n         DC    CL008'IGX00011',CL012'SDSF'\n         DC    CL008'IGX00017',CL012'DFSORT'\n         DC    CL008'IGX00036',CL012'ISPF'\n         DC    CL008'IGX00039',CL012'DFSMS/AOM'\n         DC    CL008'IGY     ',CL012'COBOL/II'\n         DC    CL008'IGZ     ',CL012'COBOL/II'\n         DC    CL008'IHA     ',CL012'TSOE'\n         DC    CL008'IHC     ',CL012'DFSMS/GSP'\n         DC    CL008'IHD     ',CL012'DFSMS/GSP'\n         DC    CL008'IHE     ',CL012'DFSMS/GSP'\n         DC    CL008'IHJ     ',CL012'DFSMS'\n         DC    CL008'IHV     ',CL012'EsconMgr'\n         DC    CL008'IKF     ',CL012'COBOL/VS'\n         DC    CL008'IKJ     ',CL012'TSOE'\n         DC    CL008'IKT     ',CL012'VTAM'\n         DC    CL008'ILB     ',CL012'COBOL/VS'\n         DC    CL008'ILN     ',CL012'RPG'\n         DC    CL008'ILR     ',CL012'MVS/ASM'\n         DC    CL008'IL7     ',CL012'CA-11'\n         DC    CL008'IMD     ',CL012'DFSMS'\n         DC    CL008'IND$FILE',CL012'TSOE'\n         DC    CL008'INM     ',CL012'TSOE/IDTF'\n         DC    CL008'IOA     ',CL012'TCP/IP'\n         DC    CL008'IOF     ',CL012'IOF'\n         DC    CL008'IOP     ',CL012'IOCP'\n         DC    CL008'IOS     ',CL012'MVS/IOS'\n         DC    CL008'IOU     ',CL012'CA-Librarian'\n         DC    CL008'IPC     ',CL012'VTAM'\n         DC    CL008'IPO     ',CL012'MVS/IPO'\n         DC    CL008'IPV     ',CL012'FFST'\n         DC    CL008'IPX     ',CL012'MVS/IPL'\n         DC    CL008'IRA     ',CL012'MVS/SRM'\n         DC    CL008'IRD     ',CL012'MVS/HCD'\n         DC    CL008'IRR     ',CL012'RACF'\n         DC    CL008'IRX     ',CL012'TSOE/REXX'\n         DC    CL008'ISC800  ',CL012'Nomad'\n         DC    CL008'ISF     ',CL012'SDSF'\n         DC    CL008'ISG     ',CL012'MVS/GRS'\n         DC    CL008'ISN     ',CL012'MVS/SPI'\n         DC    CL008'ISP     ',CL012'ISPF'\n         DC    CL008'ISR     ',CL012'ISPF'\n         DC    CL008'IST     ',CL012'VTAM'\n         DC    CL008'ITA     ',CL012'Nomad'\n         DC    CL008'ITR     ',CL012'MVS/Trace'\n         DC    CL008'ITT     ',CL012'MVS/Trace'\n         DC    CL008'ITV     ',CL012'MVS/DIV'\n         DC    CL008'IUT     ',CL012'VTAM'\n         DC    CL008'IVPCHK  ',CL012'MVS/IPO'\n         DC    CL008'IVT     ',CL012'VTAM'\n         DC    CL008'IWM     ',CL012'MVS/WLM'\n         DC    CL008'IXC     ',CL012'MVS/XCF'\n         DC    CL008'IXG     ',CL012'MVS/Logger'\n         DC    CL008'IXL     ',CL012'MVS/XES'\n         DC    CL008'IXP     ',CL012'MVS/IOCP'\n         DC    CL008'IXZ     ',CL012'MVS/JESXCF'\n         DC    CL008'IZP     ',CL012'IOCP'\n         DC    CL008'JAP     ',CL012'Nomad'\n         DC    CL008'JAR     ',CL012'CA-JARS'\n         DC    CL008'JLY     ',CL012'Jobscan'\n         DC    CL008'JSI     ',CL012'CA-JARS'\n         DC    CL008'JSM     ',CL012'CA-JARS'\n         DC    CL008'JSQ     ',CL012'CA-JARS'\n         DC    CL008'JSS     ',CL012'CA-JARS'\n         DC    CL008'JSV     ',CL012'CA-JARS'\n         DC    CL008'JSY     ',CL012'CA-JARS'\n         DC    CL008'J00     ',CL012'Jobscan'\n         DC    CL008'KAD     ',CL012'TCP/IP'\n         DC    CL008'KAN     ',CL012'Nomad'\n         DC    CL008'KAT     ',CL012'Nomad'\n         DC    CL008'KCA     ',CL012'Omegamon'\n         DC    CL008'KDB     ',CL012'TCP/IP'\n         DC    CL008'KDE     ',CL012'TCP/IP'\n         DC    CL008'KERMIT  ',CL012'Kermit'\n         DC    CL008'KEYCODE ',CL012'TCP/IP'\n         DC    CL008'KIN     ',CL012'TCP/IP'\n         DC    CL008'KLI     ',CL012'TCP/IP'\n         DC    CL008'KPA     ',CL012'TCP/IP'\n         DC    CL008'KST     ',CL012'TCP/IP'\n         DC    CL008'L$C     ',CL012'SAS-C'\n         DC    CL008'L$D     ',CL012'SAS-C'\n         DC    CL008'L$F     ',CL012'SAS-C'\n         DC    CL008'L$U     ',CL012'SAS-C'\n         DC    CL008'LASTIPL ',CL012'Freeware'\n         DC    CL008'LB@     ',CL012'TCP/IP'\n         DC    CL008'LCA     ',CL012'Nomad'\n         DC    CL008'LCM     ',CL012'STK-LCM'\n         DC    CL008'LEA     ',CL012'CW-AbendAid'\n         DC    CL008'LEQ     ',CL012'Nomad'\n         DC    CL008'LES     ',CL012'CA-PMA/Look'\n         DC    CL008'LGD     ',CL012'Nomad'\n         DC    CL008'LIB     ',CL012'CA-Librarian'\n         DC    CL008'LINK    ',CL012'TSOE'\n         DC    CL008'LISTBC  ',CL012'TSOE'\n         DC    CL008'LISTPDS ',CL012'Freeware'\n         DC    CL008'LISTSPC ',CL012'Freeware'\n         DC    CL008'LISTVOL ',CL012'Freeware'\n         DC    CL008'LJ3     ',CL012'CA-Librarian'\n         DC    CL008'LMRK    ',CL012'TMON'\n         DC    CL008'LOADGO  ',CL012'TSOE'\n         DC    CL008'LOGOFF  ',CL012'TSOE'\n         DC    CL008'LOGON   ',CL012'TSOE'\n         DC    CL008'LOW     ',CL012'Nomad'\n         DC    CL008'LPALNK  ',CL012'Freeware'\n         DC    CL008'LPQ     ',CL012'TCP/IP'\n         DC    CL008'LPR     ',CL012'TCP/IP'\n         DC    CL008'LPRM    ',CL012'TCP/IP'\n         DC    CL008'LPRSET  ',CL012'TCP/IP'\n         DC    CL008'LPSCB   ',CL012'Freeware'\n         DC    CL008'LRS     ',CL012'LRS-VPS'\n         DC    CL008'LR1     ',CL012'LRS-VPS'\n         DC    CL008'LSC     ',CL012'SAS-C'\n         DC    CL008'LSPACE  ',CL012'Freeware'\n         DC    CL008'LUK     ',CL012'CA-PMA/Look'\n         DC    CL008'LVS     ',CL012'CA-Librarian'\n         DC    CL008'L05     ',CL012'CA-1'\n         DC    CL008'L1B     ',CL012'LRS-VPS'\n         DC    CL008'L1G     ',CL012'LRS-VPS'\n         DC    CL008'L1S     ',CL012'LRS-VPS'\n         DC    CL008'L13     ',CL012'LRS-VPS'\n         DC    CL008'L2A     ',CL012'CA-7'\n         DC    CL008'L2D     ',CL012'CA-7'\n         DC    CL008'L2I     ',CL012'CA-7'\n         DC    CL008'L2L     ',CL012'CA-7'\n         DC    CL008'L2S     ',CL012'CA-7'\n         DC    CL008'L2V     ',CL012'CA-7'\n         DC    CL008'L22     ',CL012'CA-7'\n         DC    CL008'L23     ',CL012'CA-7'\n         DC    CL008'L72     ',CL012'CA-11'\n         DC    CL008'MAKESITE',CL012'TCP/IP'\n         DC    CL008'MCNVTCAT',CL012'MVS/IPO'\n         DC    CL008'MET     ',CL012'Metaphor'\n         DC    CL008'MLTAFP1 ',CL012'PSF'\n         DC    CL008'MSGBUILD',CL012'TCP/IP'\n         DC    CL008'MSGTABLE',CL012'TSOE'\n         DC    CL008'MSTJCLEX',CL012'MVS/IPO'\n         DC    CL008'MVP     ',CL012'TCP/IP'\n         DC    CL008'MVSDSN  ',CL012'Nomad'\n         DC    CL008'MVSSERV ',CL012'TSOE'\n         DC    CL008'MVSSTATE',CL012'Nomad'\n         DC    CL008'MVSUSER ',CL012'Nomad'\n         DC    CL008'M4V     ',CL012'VSAM-Tune'\n         DC    CL008'NAM     ',CL012'Nomad'\n         DC    CL008'NCF     ',CL012'CA-7'\n         DC    CL008'NDBCLNT ',CL012'TCP/IP'\n         DC    CL008'NDM     ',CL012'NDM'\n         DC    CL008'NED     ',CL012'Nomad'\n         DC    CL008'NETSOL  ',CL012'Freeware'\n         DC    CL008'NETSTAT ',CL012'TCP/IP'\n         DC    CL008'NEWS    ',CL012'Freeware'\n         DC    CL008'NIDL    ',CL012'TCP/IP'\n         DC    CL008'NIH     ',CL012'Nomad'\n         DC    CL008'NOM     ',CL012'Nomad'\n         DC    CL008'NPI     ',CL012'Nomad'\n         DC    CL008'NSDBLOAD',CL012'TCP/IP'\n         DC    CL008'NSLOOKUP',CL012'TCP/IP'\n         DC    CL008'NXI     ',CL012'CW-AbendAid'\n         DC    CL008'N2N     ',CL012'Nomad'\n         DC    CL008'OBA     ',CL012'Omegamon'\n         DC    CL008'OBD     ',CL012'Omegamon'\n         DC    CL008'OBEYFILE',CL012'TCP/IP'\n         DC    CL008'OBR     ',CL012'Omegamon'\n         DC    CL008'OBS     ',CL012'Omegamon'\n         DC    CL008'OBV     ',CL012'Omegamon'\n         DC    CL008'OM      ',CL012'Omegamon'\n         DC    CL008'OMODVOL1',CL012'DFSMS'\n         DC    CL008'OP      ',CL012'CA-OPSMVS'\n         DC    CL008'OPERATOR',CL012'TSOE'\n         DC    CL008'OSI     ',CL012'CA-DADS'\n         DC    CL008'OUTDES  ',CL012'TSOE'\n         DC    CL008'OUTPUT  ',CL012'TSOE'\n         DC    CL008'PASTE   ',CL012'QuickRef'\n         DC    CL008'PCM     ',CL012'Nomad'\n         DC    CL008'PDFCOPY ',CL012'SEA-PDSFast'\n         DC    CL008'PDSFAST ',CL012'SEA-PDSFast'\n         DC    CL008'PDSFST  ',CL012'SEA-PDSFast'\n         DC    CL008'PERFCLNT',CL012'TCP/IP'\n         DC    CL008'PERFSERV',CL012'TCP/IP'\n         DC    CL008'PGR     ',CL012'LRS-VPS'\n         DC    CL008'PHOENIX ',CL012'Phoenix'\n         DC    CL008'PING    ',CL012'TCP/IP'\n         DC    CL008'PLO     ',CL012'Nomad'\n         DC    CL008'POST    ',CL012'STK-POST'\n         DC    CL008'PRINTO  ',CL012'MVS/IPO'\n         DC    CL008'PRINTOFF',CL012'MVS/IPO'\n         DC    CL008'PROFILE ',CL012'TSOE'\n         DC    CL008'PRT     ',CL012'Vision'\n         DC    CL008'PSAMPLE ',CL012'TCP/IP'\n         DC    CL008'PSB     ',CL012'LRS-VPS'\n         DC    CL008'PSI     ',CL012'SW-VIOPlus'\n         DC    CL008'PSP     ',CL012'SW-VIOPlus'\n         DC    CL008'PSS     ',CL012'LRS-VPS'\n         DC    CL008'PST     ',CL012'STK-POST'\n         DC    CL008'P25     ',CL012'STK-POST'\n         DC    CL008'P32     ',CL012'LRS-VPS'\n         DC    CL008'P33     ',CL012'STK-POST'\n         DC    CL008'P34     ',CL012'STK-POST'\n         DC    CL008'P38     ',CL012'STK-POST'\n         DC    CL008'P40     ',CL012'STK-POST'\n         DC    CL008'P42     ',CL012'STK-POST'\n         DC    CL008'QIN     ',CL012'SW-QI'\n         DC    CL008'QIO     ',CL012'SW-QI'\n         DC    CL008'QUE     ',CL012'Nomad'\n         DC    CL008'QWC     ',CL012'QuickRef'\n         DC    CL008'QWI     ',CL012'QuickRef'\n         DC    CL008'QWP     ',CL012'QuickRef'\n         DC    CL008'RACFRW  ',CL012'RACF'\n         DC    CL008'RACONVRT',CL012'TSOE'\n         DC    CL008'RDB     ',CL012'Nomad'\n         DC    CL008'READPSWD',CL012'DFSMS'\n         DC    CL008'RECEIVE ',CL012'TSOE/IDTF'\n         DC    CL008'RELAYTSO',CL012'RelayTSO'\n         DC    CL008'RELEASE ',CL012'Freeware'\n         DC    CL008'REMOTGEN',CL012'MVS'\n         DC    CL008'REXEC   ',CL012'TCP/IP'\n         DC    CL008'RFC1006 ',CL012'TCP/IP'\n         DC    CL008'RHDC    ',CL012'CA-IDMS'\n         DC    CL008'RMF     ',CL012'RMF'\n         DC    CL008'RMO     ',CL012'CA-Deliver'\n         DC    CL008'ROM     ',CL012'Nomad'\n         DC    CL008'RPCGEN  ',CL012'TCP/IP'\n         DC    CL008'RPCINFO ',CL012'TCP/IP'\n         DC    CL008'RPG     ',CL012'RPG'\n         DC    CL008'RPS     ',CL012'Omegamon'\n         DC    CL008'RSH     ',CL012'TCP/IP'\n         DC    CL008'RSP     ',CL012'Omegamon'\n         DC    CL008'RTC     ',CL012'Omegamon'\n         DC    CL008'RTH     ',CL012'Omegamon'\n         DC    CL008'RTZ     ',CL012'Omegamon'\n         DC    CL008'RUN     ',CL012'TSOE'\n         DC    CL008'RXSOCKET',CL012'TCP/IP'\n         DC    CL008'RXT     ',CL012'RexxTools'\n         DC    CL008'RX1     ',CL012'CA-Optimizer'\n         DC    CL008'SAB     ',CL012'SAS'\n         DC    CL008'SAF     ',CL012'ACF2'\n         DC    CL008'SAF1    ',CL012'Jobscan'\n         DC    CL008'SAF2    ',CL012'Jobscan'\n         DC    CL008'SAM     ',CL012'CA-View'\n         DC    CL008'SAR     ',CL012'CA-View'\n         DC    CL008'SAS     ',CL012'SAS'\n         DC    CL008'SASS    ',CL012'CA-7'\n         DC    CL008'SAX     ',CL012'SAS'\n         DC    CL008'SBO     ',CL012'LRS-VPS'\n         DC    CL008'SCA     ',CL012'CA-7'\n         DC    CL008'SCRIPT  ',CL012'DCF'\n         DC    CL008'SEA     ',CL012'SEA-PDSFast'\n         DC    CL008'SECLOADA',CL012'DFSMS'\n         DC    CL008'SEND    ',CL012'TSOE'\n         DC    CL008'SFM     ',CL012'CA-7'\n         DC    CL008'SGI     ',CL012'TSOE'\n         DC    CL008'SGS     ',CL012'MVS/SADMP'\n         DC    CL008'SGW     ',CL012'SAS'\n         DC    CL008'SH      ',CL012'MVS/OE'\n         DC    CL008'SIB     ',CL012'STK-IXFP'\n         DC    CL008'SJE     ',CL012'CA-JARS'\n         DC    CL008'SJU     ',CL012'CA-JARS'\n         DC    CL008'SKP     ',CL012'STK-IXFP'\n         DC    CL008'SLE     ',CL012'LRS-VPS'\n         DC    CL008'SLI     ',CL012'STK-HSC'\n         DC    CL008'SLO     ',CL012'STK-HSC'\n         DC    CL008'SLS     ',CL012'STK-HSC'\n         DC    CL008'SLU     ',CL012'STK-HSC'\n         DC    CL008'SL7     ',CL012'CA-11'\n         DC    CL008'SMC     ',CL012'TSOE'\n         DC    CL008'SMF     ',CL012'MVS/SMF'\n         DC    CL008'SMP     ',CL012'SMPE'\n         DC    CL008'SMTPNJE ',CL012'TCP/IP'\n         DC    CL008'SNA     ',CL012'CW-AbendAid'\n         DC    CL008'SNP     ',CL012'CW-AbendAid'\n         DC    CL008'SOM     ',CL012'SOM'\n         DC    CL008'SOS     ',CL012'SAS'\n         DC    CL008'SOU     ',CL012'Nomad'\n         DC    CL008'SPA     ',CL012'Nomad'\n         DC    CL008'SQU     ',CL012'CW-FileAid'\n         DC    CL008'SRV     ',CL012'STK-LCM'\n         DC    CL008'SR7     ',CL012'CA-Sort'\n         DC    CL008'SSA     ',CL012'CA-7'\n         DC    CL008'SSD     ',CL012'CA-7'\n         DC    CL008'SSH     ',CL012'CA-7'\n         DC    CL008'SSM     ',CL012'CA-7'\n         DC    CL008'SSP     ',CL012'CA-7'\n         DC    CL008'SSQ     ',CL012'CA-7'\n         DC    CL008'SSR     ',CL012'CA-7'\n         DC    CL008'SST     ',CL012'LRS-VPS'\n         DC    CL008'SSU     ',CL012'CA-7'\n         DC    CL008'SS3     ',CL012'Syncsort'\n         DC    CL008'STA     ',CL012'SuperTracs'\n         DC    CL008'STEPLIB ',CL012'Freeware'\n         DC    CL008'STI     ',CL012'SuperTracs'\n         DC    CL008'STM     ',CL012'SuperTracs'\n         DC    CL008'STO     ',CL012'SuperTracs'\n         DC    CL008'STP     ',CL012'SuperTracs'\n         DC    CL008'STR     ',CL012'Strobe'\n         DC    CL008'STS     ',CL012'SuperTracs'\n         DC    CL008'SUBMIT  ',CL012'TSOE'\n         DC    CL008'SVCSECT ',CL012'Nomad'\n         DC    CL008'SVC0MVS ',CL012'SAS'\n         DC    CL008'SVM     ',CL012'DFSMS'\n         DC    CL008'SW$     ',CL012'SW-VIOPlus'\n         DC    CL008'SWS     ',CL012'SW-VIOPlus'\n         DC    CL008'SYNC    ',CL012'TSOE'\n         DC    CL008'SYNX    ',CL012'Nomad'\n         DC    CL008'SYSTEM  ',CL012'Freeware'\n         DC    CL008'S13     ',CL012'LRS-VPS'\n         DC    CL008'S91     ',CL012'CA-90s'\n         DC    CL008'T$$     ',CL012'Arbiter'\n         DC    CL008'TAM     ',CL012'Arbiter'\n         DC    CL008'TAPEMAP ',CL012'Freeware'\n         DC    CL008'TASID   ',CL012'Freeware'\n         DC    CL008'TCN     ',CL012'Arbiter'\n         DC    CL008'TELNET  ',CL012'TCP/IP'\n         DC    CL008'TERMINAL',CL012'TSOE'\n         DC    CL008'TEST    ',CL012'TSOE'\n         DC    CL008'TESTSITE',CL012'TCP/IP'\n         DC    CL008'TIM     ',CL012'Vision'\n         DC    CL008'TLB     ',CL012'Vision'\n         DC    CL008'TLMS    ',CL012'CA-TLMS'\n         DC    CL008'TL0     ',CL012'CA-1'\n         DC    CL008'TL2     ',CL012'CA-7'\n         DC    CL008'TL7     ',CL012'CA-11'\n         DC    CL008'TMS     ',CL012'CA-1'\n         DC    CL008'TN      ',CL012'Nomad'\n         DC    CL008'TNDBCSTM',CL012'TCP/IP'\n         DC    CL008'TPS     ',CL012'Arbiter'\n         DC    CL008'TRACERTE',CL012'TCP/IP'\n         DC    CL008'TRANSMIT',CL012'TSOE/IDTF'\n         DC    CL008'TRB     ',CL012'Arbiter'\n         DC    CL008'TRC     ',CL012'Arbiter'\n         DC    CL008'TRE     ',CL012'Arbiter'\n         DC    CL008'TRF     ',CL012'Arbiter'\n         DC    CL008'TRI     ',CL012'Arbiter'\n         DC    CL008'TRJ     ',CL012'Arbiter'\n         DC    CL008'TRN     ',CL012'Arbiter'\n         DC    CL008'TRP     ',CL012'Arbiter'\n         DC    CL008'TRQ     ',CL012'Arbiter'\n         DC    CL008'TRR     ',CL012'Arbiter'\n         DC    CL008'TRS     ',CL012'Arbiter'\n         DC    CL008'TRT     ',CL012'Arbiter'\n         DC    CL008'TRU     ',CL012'Arbiter'\n         DC    CL008'TRV     ',CL012'Arbiter'\n         DC    CL008'TRY     ',CL012'Arbiter'\n         DC    CL008'TSOEXEC ',CL012'TSOE'\n         DC    CL008'TSOFAIR ',CL012'CA-Librarian'\n         DC    CL008'TSOLIB  ',CL012'TSOE'\n         DC    CL008'TSS     ',CL012'CA-TopSecret'\n         DC    CL008'TSX     ',CL012'Arbiter'\n         DC    CL008'TVI     ',CL012'Nomad'\n         DC    CL008'TXA     ',CL012'Arbiter'\n         DC    CL008'TX4     ',CL012'Nomad'\n         DC    CL008'T34     ',CL012'STK-POST'\n         DC    CL008'T40     ',CL012'STK-POST'\n         DC    CL008'T50     ',CL012'CA-1'\n         DC    CL008'U#1     ',CL012'UACR'\n         DC    CL008'UAB     ',CL012'UACR'\n         DC    CL008'UAC     ',CL012'UACR'\n         DC    CL008'UAN     ',CL012'UACR'\n         DC    CL008'UAR     ',CL012'UACR'\n         DC    CL008'UCBMAP  ',CL012'Freeware'\n         DC    CL008'UCBSCAN ',CL012'Freeware'\n         DC    CL008'UCC     ',CL012'CA'\n         DC    CL008'UDC     ',CL012'UACR'\n         DC    CL008'UDR     ',CL012'UACR'\n         DC    CL008'UDS     ',CL012'UACR'\n         DC    CL008'UDX     ',CL012'UACR'\n         DC    CL008'UER     ',CL012'UACR'\n         DC    CL008'UL7     ',CL012'CA-11'\n         DC    CL008'UMR     ',CL012'UACR'\n         DC    CL008'UNI     ',CL012'UACR'\n         DC    CL008'UNP     ',CL012'Nomad'\n         DC    CL008'UPF     ',CL012'Omegamon'\n         DC    CL008'UTI     ',CL012'CA-Librarian'\n         DC    CL008'UTL     ',CL012'UACR'\n         DC    CL008'UUID@GEN',CL012'TCP/IP'\n         DC    CL008'UWF     ',CL012'SAS'\n         DC    CL008'UWI     ',CL012'SAS'\n         DC    CL008'UWU     ',CL012'SAS'\n         DC    CL008'UXA     ',CL012'Nomad'\n         DC    CL008'UXD     ',CL012'Nomad'\n         DC    CL008'UXP     ',CL012'Nomad'\n         DC    CL008'U01     ',CL012'CA-1'\n         DC    CL008'U1#     ',CL012'UACR'\n         DC    CL008'U11     ',CL012'CA-11'\n         DC    CL008'U7      ',CL012'CA-7'\n         DC    CL008'V$      ',CL012'SW-VIOPlus'\n         DC    CL008'VA      ',CL012'SW-VA'\n         DC    CL008'VA7     ',CL012'LRS-VPS'\n         DC    CL008'VDC     ',CL012'SW-VA'\n         DC    CL008'VDS     ',CL012'Nomad'\n         DC    CL008'VHL     ',CL012'SW-VIOPlus'\n         DC    CL008'VIA     ',CL012'VIACenter'\n         DC    CL008'VIO     ',CL012'SW-VIOPlus'\n         DC    CL008'VLE     ',CL012'CA-View'\n         DC    CL008'VL7     ',CL012'LRS-VPS'\n         DC    CL008'VMC     ',CL012'LRS-VPS'\n         DC    CL008'VM7     ',CL012'LRS-VPS'\n         DC    CL008'VPS     ',CL012'LRS-VPS'\n         DC    CL008'VP7     ',CL012'LRS-VPS'\n         DC    CL008'VSAMMOD ',CL012'SW-QI'\n         DC    CL008'VSAPL   ',CL012'VSAPL'\n         DC    CL008'VSP     ',CL012'CA-JARS'\n         DC    CL008'VS7     ',CL012'LRS-VPS'\n         DC    CL008'VTOC    ',CL012'Freeware'\n         DC    CL008'VTP     ',CL012'LRS-VPS'\n         DC    CL008'WAITABIT',CL012'Freeware'\n         DC    CL008'XIO     ',CL012'SW-VIOPlus'\n         DC    CL008'XMS     ',CL012'CA-View'\n         DC    CL008'XSAMP   ',CL012'TCP/IP'\n         DC    CL008'XSP     ',CL012'Nomad'\n         DC    CL008'XTB     ',CL012'DFSMS/3800'\n         DC    CL008'XXX     ',CL012'CA-1'\n         DC    CL008'X11     ',CL012'CA-View'\n         DC    CL008'X20     ',CL012'CA-View'\n         DC    CL008'ZAP     ',CL012'Freeware'\n         DC    CL008'ZZZ     ',CL012'LRS-VPS'\n         $UDP                      User defined products\nTBLPRODC EQU   (*-TBLPROD)/TBLPRODE Product table entry count\n         DC    CL008'????????',CL012'Unknown'\nTBLPRODL EQU   (*-TBLPROD)         Product table length\n**********************************************************************\n         TITLE 'Dummy Control Section (DSECT)'\n**********************************************************************\n         PRINT OFF                 Stop source and object printing\n         CSVMODI                   Contents module information (MODI)\n         CVT   DSECT=YES,LIST=YES  Communications Vector Table (CVT)\n         IHAGDA                    Global Data Area (GDA)\n         IHALLT                    LNKLST Table (LLT)\n         IHALPAT                   LPALST Table (LPAT)\n         IHAPDS PDSBLDL=NO         PDS Directory Entry (PDSE)\n         PRINT ON                  Resume source and object printing\n         END\n//LINK    EXEC PGM=HEWL,PARM='MAP,LET,LIST',COND=(0,NE)\n//SYSLIN    DD DSN=&&OBJECT,DISP=(OLD,DELETE)\n//SYSLMOD   DD DISP=SHR,DSN=ZTGP01.MJCUTIL.LINKLIB(LPALNK) <=== DEST\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT302/FILE302.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT302", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}