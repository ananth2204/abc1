{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012419000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1646008, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE588.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1646008, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1646008, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE588.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1a\\t'", "DS1TRBAL": "b'7\\x1e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04R\\x00\\x06\\x04T\\x00\\x02\\x00\\x1b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04>\\x00\\x00\\x01\\x03$\\x0f\\x01\\x03$\\x0f\\x18D\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf2@@@'", "ispf": {"version": "04.62", "flags": 0, "createdate": "2003-08-28T00:00:00", "modifydate": "2003-08-28T18:44:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-462"}, "text": "REGULAR CBT TAPE - VERSION 462    FILE:  588\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT462.FILE588\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    3120    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 15,319 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/28/03    18:44:15    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$CHANGES": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x00\\x00\\x01\\x03\\x05\\x1f\\x01\\x03!\\x8f\\x11)\\x00D\\x00\\x04\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "2003-02-20T00:00:00", "modifydate": "2003-08-06T11:29:00", "lines": 68, "newlines": 4, "modlines": 0, "user": "SVM"}, "text": "File Change History\n\n08/06/2003 Removed site-specific data. Changed SHUTTEST and SHUTPROD\n         to shut JES2 with flexible wait for VTAM stop.\n\n07/22/2003 Modified REXX functions L_ALC/FRE, L_DDN, L_DSN,\n         L_PDS and L_PGM (that use IRXSAY for error messages)\n         to check if address of IRXSAY is 0 and use WTP in this case.\n         (e.g. when executing under CA OPS).\n         Minor changes in some REXX execs.\n\n06/17/2003 Modified SVM0033 to avoid opening dataset if\n         RACF access is 'No'. SVM0033 is called by L_DDN, L_DSN.\n         Updated PWD exec to strip records for printing.\n         Updated proc CHKTASK - now it can be executed\n         in MSTR subsystem and shut JES2 down.\n         Modified SYSACTV and SYSGETL execs to make them more reliable.\n\n06/06/2003 Added check for TCPIP to CHKTEST, CHKPROD and SYSCNTL execs.\n         Added execs that use ISPF environment under IKJEFT1B:\n         - # - sets ISPF batch envir and calls user's exec (ISPSTART).\n         - DSNSTAT - returns dsn statistics for vol or dsn prefix.\n         - PDSSTAT - returns members statistics (uses MATCH function\n           from REXXTOOL to process member name wildcard).\n         Sample use:\n         //STEP1   EXEC PGM=IKJEFT1B,DYNAMNBR=99,\n         //  PARM='%# %PW'\n         //.....\n\n05/23/2003 Removed L_CND because CONVDATE has errors,\n         rexx function DATE() can do better almost everything.\n         L_DSN now returns SYSDSNAME of GDG(+1) (with dataset not\n         found), so you can allocate the new dataset with TSO ALLOC.\n\n05/21/2003 Added support for VIO and GDG to L_DDN, L_DSN.\n         Added support for existing GDG datasets to L_ALC, L_FRE.\n\n05/04/2003 fixed non-REENT bugs in IRXF@FWT, IRXF@WTO.\n         Added 4-digit UCB address to IRXF#DDN and IRXF@DSN.\n         Replaced FWAIT by reentrant IRXF@FWT. It has two function\n         names: FWAIT and L_FWT for compatibility.\n\n04/28/2003 added L_CND (REXX function invokes CONVDATE\n         from CBT file 216). CONVDATE RC changed to indicate\n         invalid parameter.\n         Added L_PGM - program mapper function.\n         Updated IRXFLOC and $IRXFLOC (doc).\n         Fixed minor bug in functions that Say error messages:\n         L_ALC, L_CND, L_DDN, L_DSN, L_PDS, L_PGM.\n\n03/14/2003 added $SYSCNTL, $IRXFLOC docs.\n         Updated comments in hlq.EXEC(SHUTPROD) and *(SHUTTEST)\n\n03/13/2003 fixed SVMALC6 - reenterability error\n\n03/11/2003 fixed L_ALC, L_FRE and SVMALC programs,\n         Fixed L_PDS for bigger PDS,\n         updated IRXFLOC.\n         Minor improvements in PWI, DCPY and PWR.\n\n03/07/2003 added IRXF@SRT (L_SORT) REXX function\n         from CBT file 386, rewritten as reentrant\n         Fixed corruption in IRXF#ALC\n         Updated CHKTASK LCL proc\n         Updated $DOC and $INSTALL\n\n02/20/2003 created to automate system shutdown\n         and control system tasks for OS/390 v2r10\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x01\\x03\\x05\\x1f\\x01\\x03\\x15_\\x13\\x13\\x00,\\x00\\x1a\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2003-02-20T00:00:00", "modifydate": "2003-06-04T13:13:00", "lines": 44, "newlines": 26, "modlines": 0, "user": "SVM"}, "text": "This dataset contains a simple REXX application SYSCNTL\nthat helps automate routine operations like system SHUTDOWN\nor check if critical tasks are running and responding.\nThis application can be run as a batch job or started task.\nSee $SYSCNTL for atomated shutdown program documentation.\n\nA set of useful REXX functions is included to work with data sets\noutside (and inside) TSO environment (e.g. under IRXJCL),\nthat saves 10-20% resourses like CPU and virt memory:\nSee $IRXFLOC for REXX functions included to IRXFLOC.\n\nThe IRX@MGCR authorised program is included that could be called\neither from REXX or JCL to reply an outstanding console request.\n\nAlso included is a set of rexx execs (PW, etc) I use to run\nrexx from batch job stream (//TEMPL DD *).\nYou can see examples in step GO for Assemler source members\nof some rexx functions. That step executes PW to run some\ninline rexx that tests the function immediately after\nit was assembled and linked.\n\nThe contents of this PDS are:\n\n$CHANGES update history log\n$DOC     what you are reading\n$INSTALL Installation guide\n$RXFLOC  User Guide for rexx functions\n$SYSCNTL User Guide for SYSCNTL application\nASM      The asm source lib in TSO Transmit (IDTF) format\nEXEC     The rexx exec lib  in TSO Transmit (IDTF) format\nJCL      The jcl proclib    in TSO Transmit (IDTF) format\nLOAD     The load lib       in TSO Transmit (IDTF) format\nMACLIB   The ASM maclib     in TSO Transmit (IDTF) format\nRECEIVE  A simple exec to receive the members\n         into partitioned datasets\n\nTo execute the RECEIVE member issue\n   \"TSO EXEC 'hlq.pds-dsname(RECEIVE)' EXEC\"\nSee $INSTALL member for details.\n\nEach program has self-documenting comments included to source.\n\nComments, suggestions, and complaints should be directed\nto the author: see @FILE588 for address.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INSTALL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x03\\x05\\x1f\\x01\\x03\"\\x0f\\tR\\x00\\x93\\x00-\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2003-02-20T00:00:00", "modifydate": "2003-08-08T09:52:00", "lines": 147, "newlines": 45, "modlines": 0, "user": "SVM"}, "text": "Receiving, Uploading and Installing the package\n\nThe package is distributed in TSO Transmit format (xmitip.xmit),\ncontaining the installation partitioned data set.\nThe distribution file is compressed to a ZIP archive.\n\nHaving upload a copy of the distribution file on yor PC\nperform the following  steps:\n\n1. Unzip the file.\n\n2. Read the late version of this document included with the\n   distribution.\n\n3. Connect to your OS/390 or z/OS system and upload the syscntl.xmit\n   into a data set with RECFM=FB and LRECL=80 characteristics.\n   Use BINARY file transfer mode.\n\n4. Logon to your OS/390 or z/OS system and get into ISPF.\n\n5. From ISPF option 6 enter RECEIVE INDS(upload.dsname) to expand\n   the distribution file back into a partitioned data set.\n   For the prompt enter the data set name you want the file restored to.\n   This dataset is referred to as the Installation PDS\n   (or just install.pds).\n\n6. Then execute, again from ISPF option 6, the command:\n   EX install.pds(RECEIVE)\n   Follow the prompt to restore the various distribution libraries.\n\n7. You will automatically be placed in browse on some of the members\n   of the installation pds, including the $CHANGES member which\n   contains the change history for this package.\n\n8. Customize JCL proc and copy it to production PROCLIB.\n   CHKTASK proc is used to execute SYSCNTL rexx exec.\n   If you do not use CA DATACOM, remove that 6 steps and\n   remove ddnames referring back to these steps from the last step\n\n9. Copy members of LOAD library to production libraries.\n\n - Member IRX@MGCR from LOAD library must be MOVED\n   to a library included into LINKLIST concatenation.\n   Refresh LLA (F LLA,REFRESH) when done.\n   It should not remain in a regular LOAD library.\n   Include IRX@MGCR into the AUTHPGM list of authorised TSO programs\n   in PARMLIB member IKJTSO00 and refresh TSO\n   (enter at option 6 'PARMLIB UPDATE(00)').\n\n - IRXFLOC member of LOAD library must be copied to LINKLIB or a\n   library used as STEPLIB. IRXFLOC package contains REXX functions.\n   If you have IRXFLOC in your system, you might include\n   the functions to your existing package. Use IRXFLOCJ\n   member of ASM library as an example.\n   IRXFLOC contains all function code. You do not need to copy\n   separate functions (IRXF@xxx). They might be used for\n   testing changes, if any.\n\n   The following members must be copied to the same library as IRXFLOC:\n   $OPEN  ALIAS($CLOSE,$OPENI,$OPENU,$OPENW,$READ,$WRITE)\n   SVMALC6  ALIAS(SVMDEL6) SVM00000\n\n   Other members in LOAD library are load modules you might need\n   when link-editing the programs. Not required for execution.\n\n10.Copy members from EXEC library to production SYSEXEC library.\n   Members SHUTPROD, SHUTTEST, CHKPROD and CHKTEST are examples.\n   You must customize these members for your environment.\n   These members are being read and interpreted by the SYSCNTL exec\n   and can/must use any subroutines and variables defined in SYSCNTL.\n   They also can use the functions included into IRXFLOC or available\n   in STEPLIB.\n\n   Further customization of system shutdown and/or system check\n   procedures might require changes in internal subroutines\n   STOP and CHECK in SYSCNTL. See comments in SYSCNTL.\n   For example, you need to update the names of CICS and database\n   regions.\n\n11. Security settings.\n   CHKTASK proc (or whatever name you will choose) must be\n   authorised started task in your system. A user ID must be assigned\n   to this proc and it must be granted authority to issue\n   any console commands and CICS modify commands.\n   It must be authorized to execute SDSF batch commands to access\n   SYSLOG (see SYSGETL exec comments for more details).\n<<==========>>\nHOW TO SETUP STARTED TASK TO HAVE CONSOLE AUTHORITY:\n(names below are just an example, you may assign other names)\n   1.  ASSIGN A USERID TO THE STARTED TASK, SETUP TSO SEGMENT TO USE\n       IKJREADY PROC\n   2.  CREATE A STARTED CLASS PROFILE FOR THE STARTED TASK, ASSIGN PROC\n       NAME AS USERID AND STC AS GROUP.\n   3.  GIVE READ ACCESS TO TSOAUTH CLASS, CONSOLE PROFILE\n   4.  GIVE READ ACCESS TO THE TSOPROC CLASS IKJREADY PROFILE\n   5.  IF THE STARTED TASK WILL BEING ISSUING STARTING STARTED TASK,\n       GIVE UPDATE ACCESS TO STARTED TASK USERID.  IF THE STARTED TASK\n       WILL BE ISSUING MODIFY COMMANDS, GIVE UPDATE ACCESS TO THE\n       STARTED TASK USERID.  IF ISSUING ANY OTHER COMMANDS, OTHER\n       PROFILES FOR MVS COMMANDS WILL NEED TO BE ADDED. (OPERCMDS CLASS)\n       *NOTE - IF YOU ASSIGNED THE STARTED CLASS PROFILE TO STC FOR\n               GROUP, THEN STC HAS ALREADY BEEN GIVEN UPDATE ACCESS FOR\n               MODIFY AND START COMMANDS.\n<<==========>>\nTO SETUP A CONSOLE IN CICS FOR CHKTASK,\n   THE FOLLOWING HAS BEEN DONE.\n   1.  SETUP CN04 TERMINAL IN GROUP CONSUSER IN THE USERLIST LIST.\n       THE CONSOLE NAME IS CHKTASK ASSIGNED TO USERID CHKTASK.\n   2.  ADD CHKTASK USERID TO RACF AND PUT OWNER & DEFAULT GROUP TO STC.\n       DO NOT ASSIGN A PASSWORD (UNDER ATTRIBUTES PUT YES IN THE\n       NO-PASSWORD FIELD).  DOES NOT NEED A CICS SEGMENT.\n   3.  ADD A STARTED RESOURCE CLASS PROFILE FOR CHKTASK.* ASSIGN STC AS\n       OWNER AND USERID AS PROCNAME AND GROUP AS STC.\n   4.  ADD CHKTASK USER TO THE APPL CLASS FOR PROFILES CICST390,\n       CICSD390, CICSP390, AND CICSQ390 WITH AN ACCESS OF READ.\n   5.  ADDED CHKTASK TO GCICSTRN CLASS, PROFILE SYSADM (WHICH CONTAINS\n       OPERATIONS, SYSTEMS AND CICS RELATED USERS) WITH READ ACCESS.\n       CHOSE THIS PROFILE SINCE IT CONTAINS THE *.CEMT RESOURCE WHICH\n       IS THE TRANSACTION TO CHECK TASK RUNNING.\n   6.  DO A REFRESH ON TCICSTRN CLASS FOR RACLIST (NOT A MISTAKE - THIS\n       CLASS AND GCICSTRN WORK TOGETHER.)\n   7.  THIS STARTED TASK WILL BE ABLE TO ISSUE MODIFY AND START COMMANDS\n       SINCE ALL STARTED TASKS HAVE THIS AUTHORITY.\n<<==========>>\nSDSF security setting example:\n               To set a proper authorisation you might need a\n               ISFPRM00 member in system PARMLIB.\n               It must define a user group that has authority\n               to use SDSF in batch, for example:\n                  GROUP NAME(ISFBATC2),    /* define group       */\n                  ILPROC(BATCH),           /* NTBL name          */\n                  IUID(SYSPRGS),           /* NTBL name          */\n                  AUTH(I,O,H,DA,ST,SE,PREF,LOG), /* funct allowed*/\n                  CMDLEV(2),               /* command level      */\n                  OWNER(USERID)            /* deafult owner      */\n\n               and definition for included logon procedures:\n                  NTBL NAME(SYSPRGS)\n                    NTBLENT STRING(CHKTASK),OFFSET(1)\n                    ... other sysprogs ...\n                  NTBL NAME(BATCH)         /* referred by GROUP  */\n                    NTBLENT STRING(AFD)    /* for PGM=ISFAFD     */\n                    NTBLENT STRING(BATCH)  /* for PGM=SDSF       */\n       Having modified ISFPRM00 issue F SDSF,REFRESH\n\n       References:\n               OS/390 V2R10.0 SDSF Customization and Security\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$IRXFLOC": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x00\\x01\\x03\\x07/\\x01\\x03!\\x8f\\x08\\x07\\x01\\x99\\x01\\x1f\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2003-03-13T00:00:00", "modifydate": "2003-08-06T08:07:00", "lines": 409, "newlines": 287, "modlines": 0, "user": "SVM"}, "text": "=======================  REXX functions ==============================\n\nThis programmer reference decribes REXX functions that are\nincluded into a user added functions package IRXFLOC.\nAll the functions are available for any job and do not\nrequire any STEPLIB or JOBLIB.\n\n----------------------------------------------------------------------\nDSN4DDN\n\nFUNCTION:     Check if DD is allocated to a dataset.\n              Search TIOT DD entries for DDNAME specified as a\n              parm. If DD entry is not found, return null.\n              If DD entry is found, get JFCB and return JFCBDSN\n              (See also L_DDN function for more return)\n\nSample use:   dsn = DSN4DDN('SYSUT1')\n              If dsn <> '' Then /* DD found - process */\n              Else Say 'SYSUT1 - ddname missing'\n\nPARAMETERS:   ddname\n\nOUTPUT:       R15 = 0\n              dsname, if ddname is allocated\n              null,   if ddname is not allocated to a dataset\n\nATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY\n\n----------------------------------------------------------------------\nL_FWT (alias FWAIT kept for compatibility)\n\nFUNCTION:     1) Enable modify operator commands\n              2) Set interval and wait until either interval expires\n                 or stop/modify command issued\n              3) If modify/stop was requested, return 'STOP'\n                 or command, if interval has expired, return null.\n\nSample use:\n              /* Set program to wait for modify: */\n                 reply = FWAIT()\n              /* Set program to wait for either modify or timer: */\n                 reply = FWAIT(interval)\n\n              If no parameter, just wait for modify.\n              Parameter format: xxxxm or xxxxs\n                 xxxx - decimal number, 1-4 digits,\n                 m - interval in minutes (upper/lower case)\n                 s - interval in seconds (upper/lower case)\n\nPARAMETERS:   interval\n\nOUTPUT:       R15 = non-zero, if parm is invalid\n              returns string to REXX program:\n                 if interval has expired, reply = ''\n                 if stop/modify, reply = 'STOP' or command text\n\nATTRIBUTES:   Reentrant, Amode=31, Rmode=Any\n\n----------------------------------------------------------------------\nL_ALC\n\nFUNCTION:     Same as\n              \"TSO ALLOC DA('\"dsn\"') FI('\"ddn\"') VOLUME('\"vol\"') SHR\"\n              Can be used outside TSO environment.\n\nSAMPLE USE:   dsn = 'MY.DATA.SET(MEMBER)'\n              or    'SOME.GDGBASE(+0)' - existing GDG dataset\n              If L_ALC(ddname,dsname)\n              Then Do\n                 /* process ddname */\n                 Call L_FRE(ddanme)\n              End\n              Else Say 'Error opening data set'\n\nParameters:   ddn,dsn,vol\n              ddn - required, specifies to what ddname allocate\n                    the dataset.\n              dsn - required, full dataset name to be allocated.\n                    Can include PDS member name.\n                    No apostrophes allowed.\n                    No HLQ will be added to the dsn.\n              vol - optional. If omitted, will locate by a catalog.\n              Dataset will be allocated with DISP=SHR.\n\nReturn:       If error: R15=0,\n                   Say error/warning message,\n                   result = '0' datatset was not allocated\n              If allocated,\n                   result = '1' normal execution response\n\nAttributes:   Reus, reentrant, AMODE=31,RMODE=ANY\n\nExternals:    SVMALC6 (used by LOAD and CALL)\n\n----------------------------------------------------------------------\nL_FRE\n\nFUNCTION:     Same as\n              \"TSO FREE FI('\"ddn\"')\n              Can be used outside TSO environment.\n\nSAMPLE USE:   dsn = 'MY.DATA.SET(MEMBER)'\n              If L_ALC(ddname,dsname)\n              Then Do\n                 /* process ddname */\n                 Call L_FRE(ddanme)\n              End\n              Else Say 'Error opening data set'\n\nParameters:   ddn\n              ddn - required, specifies what ddname to FREE\n\nReturn:       If error:\n                   Say error/warning message,\n                   R15>0 - \"Incorrect call to procedure\"\n                   result = '0' datatset was not freed\n              If freed,\n                   result = '1' normal execution response\n\nAttributes:   Reus, reentrant, AMODE=31,RMODE=ANY\n\nExternals:    SVMALC6 (used by LOAD and CALL)\n\n----------------------------------------------------------------------\nL_DDN\n\nFUNCTION:     Create a limited number of LISTDSI variables and two\n              additional: SYSUTYPE and SYSMEMBER:\n              - SYSUTYPE='DISL'/'TAPE'/'COMM'/DISPL'/'OTHER'\n              - SYSMEMBER=member name if DD is allocated to PDS member.\n              - SYSRACFA is assigned RACF access available for the\n                owner of the job/task executing this function.\n              LISTDSI variables supported are (alphabetical):\n                SYSADIRBLK\n                SYSBLKSIZE\n                SYSCREATE\n                SYSDDNAME\n                SYSDSNAME\n                SYSDSORG\n                SYSEXDATE\n                SYSEXTENTS\n                SYSKEYLEN\n                SYSLRECL\n                SYSMEMBERS\n                SYSPASSWORD\n                SYSPRIMARY\n                SYSRACFA - see comment above\n                SYSRECFM\n                SYSREFDATE\n                SYSSECONDS\n                SYSUDIRBLK\n                SYSUNIT\n                SYSUNITS\n                SYSUPDATED\n                SYSVOLUME\n              Dataset can be allocated on disk, tape, vio, gdg.\n              Currently does not calculate SYSUSED.\n              Variables that have no data will be cleared to null,\n              except SYSDDNAME that will be dropped\n              (See TSO/E REXX Reference. TSO/E External functions\n              for other variables names assigned by LISTDSI only).\n              Works outside TSO environment (i.e. under IRXJCL).\n     Warning: Gives correct SYSPRIMARY for dasd with 15 TRK per CYL\n              only. See SVM0033 source for details.\n              When SYSUNITS is 'BLOCK', gives numbers in TRKs.\n\nSample use:   If L_DDN('SYSUT1') Then\n                 /* use returned variables */\n\nPARAMETERS:   ddname\n          or  DDNAME+n    n - number in DD concatenation\n\nOUTPUT:       R15 = 0\n              Result = 1 - normal end\n              Result = 0 (all vars cleared), Say message:\n                 - no parm\n                 - ddname not found\n\nATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY\n\nEXTERNALS:    SVM0033 - shared with IRXF@DSN common module\n                        that sets up REXX variables\n\n----------------------------------------------------------------------\nL_DOM\n\nFUNCTION:     Delete message from operator console\n                 identified by parm=msgid\n\nSample use:   msgid = L_WTO(message,'b')\n              ...\n              call L_DOM(msgid) /* remove message */\n\nPARAMETERS:   msgid - returned by L_WTO function\n\nOUTPUT:       R15 = 0\n              '1' - normal execution response\n              '0' - no parm or rc<>0 from DOM\n\nATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY\n\n----------------------------------------------------------------------\nL_DSN\n\nFUNCTION:     Create a limited number of LISTDSI variables and two more.\n              See L_DDN for a full list and description.\n              Dsname is located by catalog.\n              Dataset can be allocated on disk, tape, vio, gdg.\n              Variables that have no data will be cleared to null.\n              except SYSDDNAME that will be dropped.\n              Works outside TSO environment (i.e. under IRXJCL).\n\nSample use:   If L_DSN(dsname) Then\n                 /* use returned variables */\n\nPARAMETERS:   dsname\n\nOUTPUT:       R15 = 0\n              Result = 1 - normal end\n              Result = 0 (all vars cleared), say message\n                 - no parm\n                 - dsname not located, but assigned to SYSDSNAME\n        Note: For GDG(+1) result will be 0 (new gdg not yet created)\n              but in this case SYSDSNAME will reflect the name of\n              GDG dataset that would be created for this relative #.\n              You can use \"TSO ALLOC DA('\"SYSDSNAME\"')...\" to\n              allocate a new GDG, that you could not with\n              \"TSO ALLOC DA('\"dsname(+1)\"')...\n\nATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY\n\nEXTERNALS:    SVM0033 - shared with IRXF@DDN common module\n                        that sets up REXX variables\n              SVM0030 - return UNIT for Volume\n\n----------------------------------------------------------------------\nL_PDS\n\nFUNCTION:     Open PO dataset,\n              Allocate member list table\n              Read PO dataset and fill member list\n              Adjust EVSIZE and copy members to EVDATA.\n              If member has aliases, put them in 'ALIAS()'\n              after the primary member name.\n              Use blanks to separate primary members,\n              Use comma to separate aliases.\n\nSample use:   dsn='...'; memlist=L_PDS(dsn)\n\nPARAMETERS:   dsn,vol\n              dsn  - required\n              vol  - optional or blanks\n\nOUTPUT:       Result - string of members and aliases\n              If Error - R15>0 (\"Incorrect call to procedure\")\n              - no parm,\n              - no $OPEN program\n              - no dataset\n              - too many members\n              If warning - R15=0, result=null\n              - not a PDS\n              - no members\n              Say error/warning message.\n\nATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY\n\n----------------------------------------------------------------------\nL_SRT\n\nFUNCTION:     Sort data records in STACK,\n              Returns sorted records to the STACK\n\nSample use:   If L_SORT(\"SORT FIELDS=(5,4,CH,A)\",\"M\")\n                   ...\n                   Notes:\n                   1) start of the field to sort must be\n                      set to n+4, i.e. col #1 is FIELDS=(5,...\n                   2) 'M' means put SORT messages to SYSOUT,\n                      other value or omitted - no SYSOUT produced.\n\nOUTPUT:       If Error - \"Incorrect call to procedure\" (R15>0)\n                   - no or empty parm\n                   - RC>0 from SORT (bad parm)\n              If OK,\n                   result = '1' normal execution response\n\nATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY\n\n----------------------------------------------------------------------\nL_WTO\n\nFUNCTION:     Issue message to operator console\n              Wait and return reply\n                 or return msgid for DOM or return '1'\n\nSample use:   msgid = L_WTO(msg,type,sup)\n              msg - message text, if omitted or empty,\n                    nothing will be done\n              type - optional message type:\n                 default - regular (green) scrollable message\n                 'B' or 'b' - white message held on the console\n                              until this job ends.\n                 'A' or 'a' - red message held on the console\n                              until removed.\n                 'R' or 'r' - get a response from operator\n              sup - optional authorised execution flag\n                 default - run not authorised\n                 'S' or 's' - attempt MODESET to supervisor state\n                 (sup option is not used/tested in this package)\n\nOUTPUT:       R15 = 0\n              '0' - if no/null msg parm passed (no action)\n               or if WTO/WTOR failed\n              '1' - normal execution response for no type\n              msgid - normal execution for type = 'B' or 'A'\n              reply - normal execution for type = 'R'\n\nATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY\n---------------------------------------------------------------------\nL_PGM\n\nFUNCTION:     Open Load library member and read ESD,RLD,SYM data\n              (if any) to the arrays that will be available to\n              the caller exec.\n              Creates (if not already exist) a hidden variable\n              value(dsname) that contains library data used for\n              faster re-open. This variable will exist until\n              the exec ends and is re-usable. Contains DSN,\n              MEMBER, VOLUME, DCB addr, BUFFER addr and size.\n              See $PARM map for field description.\n              Overlay and SCTR programs not supported.\nSample use:\n  //SVMRFC  JOB ...                                                            0\n  //* Map IRXF@PGM which was intentionally asmlinkked with TEST option:\n  //STEP1   EXEC PGM=IRXJCL,\n  //        PARM='MAPPGM hlq.TEST.L,IRXF@PGM,N'\n  //* To get program data put library and program name to parm above\n  //* Append option ,N to include details (from SYM and RLD records)\n  //SYSEXEC  DD DSN=hlq.TEST.EXEC,DISP=SHR          <== hlq.EXEC\n  //STEPLIB  DD DSN=hlq.TEST.L,DISP=SHR             <== IRXFLOC lib\n  //SYSTSPRT DD  SYSOUT=*\n  //SYSTSIN  DD  DUMMY\n  //SYSUDUMP DD SYSOUT=*\n  //ABNLIGNR DD DUMMY\n  //\n    see MAPPGM exec for details\n\nPARAMETERS:   dsn,program,volume\n              dsn     - required, must be a load library name\n              program - required, member name\n              volume  - optional, can be omitted, blanks or null\n\nOUTPUT:       Result ='1' - normal, '0' - abnormal\n              R15 = 0\n              Say message:\n              - no dsname specified\n              - no member specified\n              - $OPEN program cannot be LOADed\n              - no dataset, member, not a PDS, or open error\n              - RAM shortage\n\n              Created REXX variables:\n              PTAB - string mapped by the following structure:\n              - p#name   CL8 main program name\n              - p#entry  F   entry point offset\n              - p#size   F   program size, bytes\n              -          X   reserved\n              - p#ssi    XL3 ssi (date of linkage: dddddF)\n              - p#ac     BL1 program authorization code\n              - p#at1    BL1 copy of PDS2ATR1 (ref IHAPDS)\n              - p#at2    BL1 copy of PDS2ATR2 (ref IHAPDS)\n              - p#ft2    BL1 copy of PDS2FTB2 (ref IHAPDS),\n                             bit0 = PDS2ALIS (alias flag)\n              - p#aname  CL8 alias name (if member is an alias)\n              - p#aentry F   alias entry point offset\n              CTAB.i (i=1,2,...) - section data\n              - c#name   CL8 CSECT/EP name\n              - c#addr   F   section offset in the program\n              - c#size   F   section size, bytes\n              - c#type   X   type 00-SD,03-LR,04-PC,05-Common\n              - c#ssi    XL3 section compilation date\n\n              These variables will be created, if program has SYM\n              records (Assembled and linked with option TEST):\n              DTAB.i (j=1,2,...) - DSECT data\n              - d#name   CL8 section name\n              - d#addr   F   zeroes\n              - d#size   F   section size, bytes\n              - d#type   X   type\n              - d#num    AL3 number of parent CTAB (i)\n              CTAB.i.n (i=1,2,..., n=1,2,...) - csect field data\n              - n#name   CL8 field name\n              - n#addr   F   field offset in section\n              - n#size   F   field length, bytes\n              - n#type   X   field type\n              - n#mult   AL3 filed multiplier (20CL8 20=mult,8=size)\n              DTAB.j.n (j=1,2,..., n=1,2,...) - dsect field data\n              - n#name   CL8 field name\n              - n#addr   F   field offset in section\n              - n#size   F   field length, bytes\n              - n#type   X   field type\n              - n#mult   AL3 filed multiplier (20CL8 20=mult,8=size)\n\nAttributes:\n              reentrant, AMODE=31,RMODE=ANY\nExternals:\n              $OPEN - dynalloc/read interface module (A=24)\n                           LOADed and CALLed\n---------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$OPEN": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x03\\x14/\\x01\\x03\\x14/\\x14C\\x00s\\x00Q\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-05-22T00:00:00", "modifydate": "2003-05-22T14:43:00", "lines": 115, "newlines": 81, "modlines": 0, "user": "SVM"}, "text": "*=====================================================================*\n*    $OPEN: Dynamic OPEN-READ-UPDATE-WRITE-CLOSE interface\n*             (low level DYNALLOC/BSAM/BPAM)\n*---------------------------------------------------------------------*\n* FUNCTION:\n*       1) Allocates & processes Dataset using DYNALLOC.\n*       2) Read/write DASD datasets with DSORG=PO or PS.\n*       3) PO and no MEMBER - reads PDS directory blocks.\n*       4) Supports RECFM=F/FB/FBA/V/VB/VBA/U.\n*\n* PARM ($PARM DSECT):\n*       R1=Addr of word containing Addr of the following\n*       structure:                   > is input, < is output field:\n*                 RC       DS F      <Return Code\n*                 DSNAME   DS CL44   >Dataset Name\n*                 MEMBER   DS CL8    >PDS Member Name/blanks\n*                 VOLUME   DS CL6    >Volume Name/blanks\n*                 RECLEN   DS H     ><Current Record Length\n*                 DCBADDR  DS F      <DCB Address\n*                 BUFADDR  DS F      <Buffer Address\n*                 LENGTH   DS F     ><Data Length in Buffer (bytes)\n*                 RECADDR  DS A      <Current Record Addr\n*       This data block must be persistent in between calls.\n*       Do not modify DCBADDR and BUFADDR.\n*\n* ENTRY POINTS:\n*\n* $OPENx Allocates and Opens the Data Set:\n*       - If PDS and Member is blank - Open PDS Directory\n*       - If DCBADDR=0, allocate DCB, BUFFER and SVMPAR6.\n*       - If re-open other Member in same PDS BLDL+POINT used.\n*       - If re-open same PS dataset, POINT used.\n*       - If Other Dsn/Vol, $CLOSE is forced before $OPEN.\n*       - If was WRITE, $CLOSE is forced before re-opening.\n*       - If I/O error, then buffer contains SYNAD message.\n*\n*       $OPENx requires only DSNAME. VOLUME and MEMBERS are optional.\n*       DSORG can be PS, PO, DA, RECFM - F(B), V(B), U.\n*       Unset fields must be /blanks/zeros.\n*       If DCBADDR<>0 then dataset considered open and should be closed\n*       before you can re-use the parm block for another dataset.\n*       You can change MEMBER without closing the dataset when reading\n*       or updating.\n*       If the member exists, after $OPEN buffer will contain\n*       its directory entry (TTRZ in col 12-15)\n*       You can re-open opened dataset, it will just reset pointer.\n*       You can have as many PARM blocks as you need. Each\n*       dataset will be allocated to a system-generated DDNAME\n*       that can be accessed using DCBADDR.\n*       Entry points:\n*          $OPEN, - Allocate & Open the DataSet for Input.\n*          $OPENI - Allocate & Open the DataSet for Input.\n*          $OPENU - Allocate & Open the DataSet for Update.\n*          $OPENW - Allocate & Open the DataSet for Output.\n*                   When used for PDS, creates/replaces the MEMBER\n*\n* $CLOSE will close and unallocate dataset, remove DCB and BUFFER.\n*       When a member was opened by $OPENW, it will be created\n*       (STOW will be issued by $CLOSE). No other write operations will\n*       be done by $CLOSE.\n*       Addresses in the parm will be reset to zeros.\n*\n* $READ Read Block of Data to Buffer (dataset must be opened).\n*       Set LENGTH to the the size of block read.\n*       If RECFM is blocked, then set/reset RECLEN and RECADDR\n*       to the next record within the block in buffer.\n*       If PO and no MEMBER, read Dir Block (BLDL).\n*       RECFM=U - block length put to RECLEN.\n*\n* $WRITE  UPDATE: Rewrite current block from Buffer.\n*       - OUTPUT: Write block to dataset from Buffer.\n*       - RECFM=FB: Caller program must maintain record\n*         blocking. If Block length is different than\n*         BLKSIZE, the block length must be placed to LENGTH.\n*       - RECFM=U: the current block length must\n*         be placed to RECLEN.\n*\n* RETURN CODES:\n*       0 - OK\n*       4 - Dynalloc failed\n*      16 - OPEN error or no RAM available for buffer\n*      24 - Invalid DSNAME\n*      28 - MEMBER not found\n****   32 - Read End Of File encountered\n*      36 - DSORG that is not supported\n*      40 - Read/Write I/O error (buffer has SYNAD error message)\n*      44 - MEMBER specified for PS dataset\n*      52 - READ called with DCBADDR=0\n*      56 - READ called, but DCB is not opened\n*      60 - No RAM available for workareas\n*      64 - WRITE called with DCBADDR=0 or BUFADDR=0\n*      68 - WRITE called, but DCB is not opened\n*      72 - Re-OPEN PS dataset, but TTRZ is zero\n*      76 - STOW failed for adding a new member\n*\n* ATTRIBUTES:\n*               REENTRANT, AMODE=24.\n* !             Caller might have AMODE=31, but must\n* !             allocate SAVAREA and $PARM below 16M.\n*---------------------------------------------------------------------\n* Use in PL/I:\n*               DECLARE $OPEN ENTRY RETURNS(BIT(1))\n*               /* (RETURNed value '1'B is equivalent to RC=0) */\n*   example:    DO WHILE($READ(RAPMPTR));\n*                  Process record just read;\n*                  END; /*EOF or error encountered */\n*--------------------------------------------------------------------\n* Use in Assembler:\n*               1. LINK.\n*               2. LOAD then CALL. (BASSM from above 16M)\n*               3. Call as a EP Link Edited into the same module.\n*               4. Examples of Use: A31ESD, IRXF@LPD, SVM0028\n*\n* Extenals:     SVMALC6 - DYNALLOC inteface\n*--------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$SYSCNTL": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x03\\x07?\\x01\\x03\\x15O\\tU\\x00V\\x00X\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-03-14T00:00:00", "modifydate": "2003-06-03T09:55:00", "lines": 86, "newlines": 88, "modlines": 0, "user": "SVM"}, "text": "================  Automated system SHUTDOWN and other ================\n\n This programmer reference describes SYSCNTL REXX exec that\n is included to this file and made for it's title.\n This exec helps automate the system shutdown routine by\n executing your instructions written in form of simplified\n REXX program. Your code can interact with the system\n using console commands and interpreting the responses.\n\n Your code must be written in REXX and can use\n some convenient functions built in SYSCNTL. This means\n you can customize the shutdown routine as you like - from\n step-by-step confirmation process to a complete\n \"seat back and relax\".\n\n Another use of this exec is to run it to check the status\n of some critical tasks (CICS regions, databases, etc),\n and alarm operator if something is wrong, for example,\n if some task is not active, or does not respond, or\n response indicates the wrong options are active.\n Your rexx code gets the responses to any console commands\n and can interpret the response content as you like.\n\n SYSCNTL exec is executed by CHKTASK started task (SYS1.COMMON.PROCLIB)\n        Components involved:\n        1) CHKTASK - JCL proc for authorised started task\n        2) SYSCNTL - REXX program base code\n        3) User Routine REXX code that is defined as REXXPARM DD\n           and is executed as a part of SYSCNTL.\n        4) External modules and functions (see the list below).\n\n Directions:\n        1) This program must be called by an authorised\n           JCL proc. The proc must be authorized in RACF to issue\n           all console commands (Modify, Stop, Cancel, Reply)\n           and CICS console conmmands.\n        2) Usually you do not modify this program unless you want to\n           add/change task processing in the STOP/CHECK subroutines.\n           System specific shutdown sequence code is kept in a\n           separate PDS member defined as a REXXPARM DD statement.\n           Currently see members in SYS1.UTILITY.EXEC.\n           Member name is &OPTION.&SYSNAME\n           &OPTION = function name, &SYSNAME = partition name.\n           Example: SHUTPROD, CHKPROD, SHUTTEST.\n           This code will be included and executed as a part of\n           SYSCNTL. Must be written in REXX,\n           some restrictions apply.\n        3) The function code can use subroutines included below\n           and/or available REXX builtin functions.\n           This program uses functions included to IRXFLOC pack\n           originally coming from CBT file 386.\n           Some functions were modified and others added to the pack.\n           IRXFLOC load module must be placed in a load library and\n           that must be defined as a STEPLIB or JOBLIB.\n           See existing code as an examples for PROD and TEST.\n        4) Stop sequences for known tasks are defined in STOP\n           subroutine inside SYSCNTL.\n           To add a new stop task code, if it is not just\n           \"P taskname\", that is a default,\n           someone must add a \"WHEN task=\" segment to STOP subroutine\n           that defines console command(s) to stop the task.\n        5) Check sequence for known tasks are defined in CHECK\n           subroutine below.\n           To add a check for a new task, if it is not just search\n           the task in the active task list (that is default),\n           one must add a \"WHEN task =\" segment to CHECK subroutine.\n        6) To reply outstanding console requests use REPLYIT.\n           REPLYIT uses the value of \"#request\" variable\n           that must be set by the following REXX command:\n              Parse #CONS('D R,L,CN=MASTER') With #rc #request\n           before calling REPLYIT.\n           REPLYIT can work in two alternative ways:\n           1) Use IRX@MGCR external program that must run authorised.\n           This means it must be placed to\n           a LINKLIST library and included to the AUTHPGM list\n           in IKJTSO00 member in SYS1.**.PARMLIB.\n           2) If first method is not available, uncomment job\n           submit statements in REPLYIT to start a batch job\n           that would execute REPLY commands.\n\n PARM = 'system,parm' will be parsed and available for your code\n        as variables \"#system\" and \"#parm\". Parm is optional.\n\n Externals:\n        Load: L_WTO, L_DOM, L_FWT, IRX@MGCR\n        Exec: INSD, PWX, SYSGETL, SYSACTV\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE588": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04>\\x00\\x00\\x01\\x03$\\x0f\\x01\\x03$\\x0f\\x18C\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf2@@@'", "ispf": {"version": "04.62", "flags": 0, "createdate": "2003-08-28T00:00:00", "modifydate": "2003-08-28T18:43:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "CBT-462"}, "text": "//***FILE 588 is a system for Automated System Shutdown and         *   FILE 588\n//*           system control, from Sergey Makogonov.                *   FILE 588\n//*                                                                 *   FILE 588\n//*       Sergey Makogonov                                          *   FILE 588\n//*                                                                 *   FILE 588\n//*       501-569-2489                                              *   FILE 588\n//*       Sergey.Makogonov@ahtd.state.ar.us                         *   FILE 588\n//*                                                                 *   FILE 588\n//*      RECEIVE exec in this pds should be able to create the      *   FILE 588\n//*        source and execution libraries automatically.            *   FILE 588\n//*                                                                 *   FILE 588\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASM": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03!\\x8f\\x01\\x03!\\x8f\\x11\\x02$x$x\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-08-06T00:00:00", "modifydate": "2003-08-06T11:02:00", "lines": 9336, "newlines": 9336, "modlines": 0, "user": "SVM"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "EXEC": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x03!\\x8f\\x01\\x03\"\\x0f\\x10@\\r\\x0e\\r\\x04\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-08-06T00:00:00", "modifydate": "2003-08-08T10:40:00", "lines": 3342, "newlines": 3332, "modlines": 0, "user": "SVM"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "JCL": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03!\\x8f\\x01\\x03!\\x8f\\x10S\\x00\\xc3\\x00\\xc3\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-08-06T00:00:00", "modifydate": "2003-08-06T10:53:00", "lines": 195, "newlines": 195, "modlines": 0, "user": "SVM"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LOAD": {"ttr": 6148, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03!\\x8f\\x01\\x03!\\x8f\\x10V\\x04<\\x04<\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-08-06T00:00:00", "modifydate": "2003-08-06T10:56:00", "lines": 1084, "newlines": 1084, "modlines": 0, "user": "SVM"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "MACLIB": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03!\\x8f\\x01\\x03!\\x8f\\x10Y\\x01\\x99\\x01\\x99\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-08-06T00:00:00", "modifydate": "2003-08-06T10:59:00", "lines": 409, "newlines": 409, "modlines": 0, "user": "SVM"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RECEIVE": {"ttr": 6664, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\\x05\\x1f\\x01\\x03\\x05_\\tF\\x00=\\x00=\\x00\\x00\\xe2\\xe5\\xd4@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-02-20T00:00:00", "modifydate": "2003-02-24T09:46:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "SVM"}, "text": "        /* this rexx exec is expected to be invoked by the EXEC command\n        |  thus:\n        |\n        |  EXec 'dsname(RECEIVE)'\n        |\n        |  Prompting will occur for hlq and optional volser.\n        |\n        |  and it will then issue the TSO RECEIVE command for the\n        |  the following members to create these new data sets:\n        |\n        |  Member       Dataset\n        |  EXEC         hlq.EXEC\n        |  JCL          hlq.JCL\n        |  MACLIB       hlq.MACLIB\n        |  LOAD         hlq.LOAD\n        |  ASM          hlq.ASM\n        |\n        |  You will then need to copy these datasets/members into\n        |  datasets for production use.\n        |\n        |  After these data sets are created several of the members\n        |  of this install data set will be browsed.\n        */\n\n        parse source x1 x2 x3 x4 dsn .\n         x = PROMPT(\"ON\") /* enable prompting */\n\n        say \"Enter desired hlq for target data sets\",\n            \"(default is\" sysvar(\"syspref\")\".SYSCNTL.NEW):\"\n        pull hlq\n        hlq = strip(hlq)\n\n        if hlq = \"\" then hlq = sysvar(\"syspref\")\".SYSCNTL.NEW\"\n\n        say \"Enter optional volser for target data sets\",\n            \"default is to allow standard allocation to\",\n            \"find a volume.\"\n        pull volser\n        volser = strip(volser)\n\n        if volser <> \"\" then vol = \"vol(\"volser\")\"\n                        else vol = \"\"\n\n        Say \"Using HLQ:\" hlq\n        if vol <> \"\" then\n           Say \"Using Volser:\" volser\n\n        queue \"dsn('\"hlq\".exec')\" vol\n        \"Receive inds('\"dsn\"(exec)')\"\n        queue \"dsn('\"hlq\".jcl')\" vol\n        \"Receive inds('\"dsn\"(jcl)')\"\n        queue \"dsn('\"hlq\".maclib')\" vol\n        \"Receive inds('\"dsn\"(maclib)')\"\n        queue \"dsn('\"hlq\".asm')\" vol\n        \"Receive inds('\"dsn\"(asm)')\"\n        queue \"dsn('\"hlq\".load')\" vol\n        \"Receive inds('\"dsn\"(load)')\"\n\n        if sysvar('sysispf') <> \"ACTIVE\" then exit\n        Address ISPEXEC\n           \"Browse dataset('\"dsn\"($doc)')\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT588/FILE588.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT588", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}