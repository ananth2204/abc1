/*  REXX - INSTALL (Tailor and Install the MODLISTR facility)         */
/**********************************************************************/
/*                                                                    */
/*              III  N   N  SSSS TTTTT   A   L     L                  */
/*               I   NN  N S       T    A A  L     L                  */
/*  MODULE  =    I   N N N  SSS    T   A   A L     L                  */
/*               I   N  NN     S   T   AAAAA L     L                  */
/*              III  N   N SSSS    T   A   A LLLLL LLLLL              */
/*                                                                    */
/*  #¢# AUTHOR             TKMILLE                                    */
/*  #¢# CREATED            TKMILLE 05/31/2006                         */
/*  #¢# LAST UPDATE        TKMILLE 04/26/2010                         */
/*                                                                    */
/*  PURPOSE = This exec will input the MODLISTR library and will      */
/*            tailor the members according to the information         */
/*            input by the user.  The exec will prompt the user       */
/*            for the following 4 pieces of information and will      */
/*            then copy the members into your runtime libraries.      */
/*                                                                    */
/*            1) Output Dataset name containing the PDS members       */
/*               created by the RECEIVE INDS command (and is also     */
/*               the dataset which contains this Rexx Exec).          */
/*            2) The HLQ (High-Level Qualifier) to be used to install */
/*               the MODLISTR runtime libraries.                      */
/*            3) The Volser to be used to allocate the runtime        */
/*               libraries and Logfile.                               */
/*            4) The Dataset name of the exec library concatenated    */
/*               to ddname SYSPROC to copy the MODLISTR exec into     */
/*               for foreground invocation of exec MODLISTR.          */
/*                                                                    */
/*            After prompting for these four  pieces of information   */
/*            it will tailor the install file members and the         */
/*            user will then be ready to continue the install of      */
/*            this product.                                           */
/*                                                                    */
/*  PARMS:                                                            */
/*  (Required Parms):                                                 */
/*                                                                    */
/*          None                                                      */
/*                                                                    */
/*  (Optional Parms):                                                 */
/*                                                                    */
/*          DEBUG  =      The parameter which displays the statements */
/*                        as they are executed.                       */
/*  User Prompt Inputs:                                               */
/*                                                                    */
/*    Receive Dsn  -      The user will be prompted for the PDS       */
/*                        dataset created (output) by the             */
/*                        RECEIVE INDS command.                       */
/*                                                                    */
/*          HLQ    -      The user will be prompted for the HLQ for   */
/*                        the runtime libraries.                      */
/*                                                                    */
/*   Sysproc Lib   -      The user will be prompted for the SYSPROC   */
/*                        library dataset name to copy the MODLISTR   */
/*                        Rexx exec into for foreground invocation.   */
/*                                                                    */
/*  Return Codes:                                                     */
/*                                                                    */
/*    0   - Successful execution of the exec                          */
/*   12   - Unsuccessful execution of the exec                        */
/*                                                                    */
/**********************************************************************/
version_level = "V01.01.14"
Arg parms
Trace "O"
msg_stat        = Msg("OFF")

debug    = ""
Do i = 1 to words(parms)
         If ABBREV("DEBUG",word(parms,i),3) = 1  then Do
            debug = "DEBUG"
            parms = DELWORD(parms,i,1)
            i = i - 1
            iterate
         End
End
If debug = "DEBUG"  then Do
   Trace "I"
End

sysid   = Left(MVSVAR(sysname),3," ")
rtcd               = 0
input_file_count   = 0
middle_quals       = "MODLISTR"

Clear
Get_receive_dataset_Name:

dateg   = Substr(date(u),1,6)||Substr(date(s),1,4)

Say "***************************************************************"||,
"****************"
Say "*                                                                ",
    "            *"
Say "*  "dateg"                 M  O  D  L  I  S  T  R              ",
    " "time()"  *"
Say "*  "sysid"                 I  N  S  T  A  L  L  A  T  I  O  N    ",
    "                *"
Say "***************************************************************"||,
"****************"

Prompt_for_RECEIVE_Dataset_Name:

Say ;
Say "Enter the dataset name created by the RECEIVE INDS command",
    "or enter a"
Say "NULL ENTRY to QUIT"
Say ;
Pull receive_dataset
If receive_dataset = ""         | ,
   receive_dataset = "END"      | ,
   receive_dataset = "QUIT"                      Then Do
     Say ;
     Say "User Terminated the INSTALL exec ..."
     Say ;
     Signal End_Up
End

receive_dataset = STRIP(receive_dataset,both,"'") /* remove tics   */
receive_dataset = STRIP(receive_dataset,both,'"') /* remove quotes */

Edit_RECEIVE_Dataset_Name:

catlged  = Sysdsn("'"receive_dataset"'")

If catlged =  "UNAVAILABLE DATASET"                   Then Do
   Say ;
   Say "RECEIVE dataset entered is allocated to another task ..."
   Say "RECEIVE dataset Dataset Name => '"receive_dataset"'"
   Say "Free the RECEIVE dataset and Try again later ..."
   Signal End_Up
End

If catlged <> "OK"                                    Then Do
   Say ;
   Say "RECEIVE dataset entered is not cataloged or is invalid ..."
   Say "RECEIVE dataset Dataset Name => '"receive_dataset"'"
   Say "Re-enter the RECEIVE Dataset Name"
   Say ;
   Signal Prompt_for_RECEIVE_Dataset_Name
End

"ALLOC FI(INSTALL) DA('"receive_dataset"') SHR REUSE"
alloc_sysproc_rc = rc
"FREE  FI(INSTALL)"

If alloc_sysproc_rc <> 0 Then Do
   Say "RECEIVE dataset Dataset Name => '"receive_dataset"'"
   Say " File INSTALL could not be allocated.  Re-enter the INSTALL",
       "Dataset Name"
   Signal Prompt_for_receive_dataset_Name
End

Check_for_INSTALL_member:

listdsi   = LISTDSI("'"receive_dataset"(INSTALL)'" DIRECTORY NORECALL)
listdsi_rc = rc

If listdsi_rc <> 0  Then Do
   Say "RECEIVE dataset Dataset Name => '"receive_dataset"'"
   Say " Member INSTALL could not be found in RECEIVE",
       "Dataset"
   Say "Re-enter the RECEIVE Dataset Name"
   Signal Prompt_for_receive_dataset_Name
End

Prompt_for_Runtime_HLQ:

Say ;
Say "Enter the High-Level Qualifer to use to install MODLISTR",
    "or enter a"
Say "NULL ENTRY to QUIT"
Say ;
Pull HLQ_name
If HLQ_name = ""                | ,
   HLQ_name = "END"             | ,
   HLQ_name = "QUIT"                             Then Do
     Say ;
     Say "User Terminated the INSTALL exec ..."
     Say ;
     Signal End_Up
End

If LENGTH(HLQ_name) >  8  Then Do
   Say " HLQ length must not exceed 8 characters in length"
   Signal Prompt_for_Runtime_HLQ
   Say ;
End

Prompt_for_Runtime_Volser:

Say ;
Say "Enter the Volser to allocate the install runtime libraries",
    "or enter a"
Say "NULL ENTRY to QUIT"
Say ;
Pull Volser_runtime
If Volser_runtime = ""          | ,
   Volser_runtime = "END"       | ,
   Volser_runtime = "QUIT"                       Then Do
     Say ;
     Say "User Terminated the INSTALL exec ..."
     Say ;
     Signal End_Up
End

If LENGTH(Volser_runtime) > 6 Then Do
   Say " Volser length must not exceed 6 characters in length"
   Signal Prompt_for_Runtime_Volser
   Say ;
End

Prompt_for_SYSPROC_dataset_Name:

Say ;
Say "Enter the SYSPROC dataset name to use to copy the MODLISTR exec",
    "into or"
Say "enter a NULL ENTRY to QUIT"
Say ;
Pull sysproc_dataset
If sysproc_dataset = ""         | ,
   sysproc_dataset = "END"      | ,
   sysproc_dataset = "QUIT"                      Then Do
     Say ;
     Say "User Terminated the INSTALL exec ..."
     Say ;
     Signal End_Up
End

sysproc_dataset = STRIP(sysproc_dataset,both,"'") /* remove ticks  */
sysproc_dataset = STRIP(sysproc_dataset,both,'"') /* remove quotes */

Edit_sysproc_dataset_Name:

catlged  = Sysdsn("'"sysproc_dataset"'")

If catlged <> "OK"                                    Then Do
   Say ;
   Say "SYSPROC dataset entered is not cataloged or is invalid ..."
   Say "SYSPROC dataset Dataset Name => '"sysproc_dataset"'"
   Say "Re-enter the SYSPROC Dataset Name"
   Say ;
   Signal Prompt_for_sysproc_dataset_Name
End

"ALLOC FI($$ABC$$$)  DA('"sysproc_dataset"') SHR REUSE"
alloc_sysproc_rc = rc

"FREE  FI($$ABC$$$)"

If alloc_sysproc_rc <> 0 Then Do
   Say " File SYSPROC could not be allocated.  Re-enter the SYSPROC",
       "Dataset Name"
   Signal Prompt_for_SYSPROC_dataset_Name
End

Allocate_Runtime_Libraries:

high_quals    = HLQ_name||"."||middle_quals

exec_lib      = high_quals||".EXEC"
cntl_lib      = high_quals||".CNTL"
maclib        = high_quals||".MACLIB"
source        = high_quals||".SOURCE"
loadlib       = high_quals||".LOADLIB"

"DELETE '"||exec_lib||"'       PURGE"
"DELETE '"||cntl_lib||"'       PURGE"
"DELETE '"||maclib||"'         PURGE"
"DELETE '"||source||"'         PURGE"
"DELETE '"||loadlib||"'        PURGE"

"ALLOC DA('"||exec_lib||"')     NEW REUSE  UNIT(SYSDA)",
      "DSORG(PO) TRACKS SPACE(02,02) DIR(05)",
      "RECFM(F B) LRECL(080) BLKSIZE(0)",
      "VOLUME("||Volser_runtime||")"
alloc_exec     = rc
If alloc_exec     <> 0 Then Do
   Say " Error allocating space for the Rexx EXEC library"
   Say " Rexx EXEC library Dataset Name => " exec_lib
   Signal End_Up
   Say ;
End

"ALLOC DA('"||cntl_lib||"')     NEW REUSE  UNIT(SYSDA)",
      "DSORG(PO) TRACKS SPACE(02,02) DIR(03)",
      "RECFM(F B) LRECL(080) BLKSIZE(0)",
      "VOLUME("||Volser_runtime||")"
alloc_cntl     = rc
If alloc_cntl     <> 0 Then Do
   Say " Error allocating space for the CNTL library"
   Say " CNTL library Dataset Name => " cntl_lib
   Signal End_Up
   Say ;
End

"ALLOC DA('"||maclib||"')       NEW REUSE  UNIT(SYSDA)",
      "DSORG(PO) TRACKS SPACE(02,02) DIR(03)",
      "RECFM(F B) LRECL(080) BLKSIZE(0)",
      "VOLUME("||Volser_runtime||")"
alloc_maclib   = rc
If alloc_maclib   <> 0 Then Do
   Say " Error allocating space for the MACLIB library"
   Say " MACLIB library Dataset Name => " maclib
   Signal End_Up
   Say ;
End

"ALLOC DA('"||source||"')       NEW REUSE  UNIT(SYSDA)",
      "DSORG(PO) TRACKS SPACE(03,02) DIR(03)",
      "RECFM(F B) LRECL(080) BLKSIZE(0)",
      "VOLUME("||Volser_runtime||")"
alloc_source   = rc
If alloc_source   <> 0 Then Do
   Say " Error allocating space for the SOURCE library"
   Say " MACLIB library Dataset Name => " source
   Signal End_Up
   Say ;
End

"ALLOC DA('"||loadlib||"')     NEW REUSE  UNIT(SYSDA)",
      "DSORG(PO) TRACKS SPACE(02,02) DIR(03)",
      "RECFM(U) LRECL(0) BLKSIZE(32760)",
      "VOLUME("||Volser_runtime||")"
alloc_loadlib  = rc
If alloc_loadlib  <> 0 Then Do
   Say " Error allocating space for the LOAD library"
   Say " LOAD library Dataset Name => " loadlib
   Signal End_Up
   Say ;
End

Assign_Input_Output_Files:

input_file_count = input_file_count + 1

"EXECIO 0 DISKR INPUT    (FINIS"
"EXECIO 0 DISKW OUTPUT   (FINIS"
"FREE FI(INPUT,OUTPUT)"

Select
   When input_file_count  =   1                    Then Do
        input_dataset = receive_dataset||"(MODLIST)"
        output_dataset = HLQ_name||".MODLISTR.EXEC(MODLIST)"
        If input_dataset = output_dataset          Then Do
           Say ;
           Say "RECEIVE dataset name is the same as the EXEC runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
        Signal Allocate_Input_Output_Files
   End
   When input_file_count  =   2                    Then Do
        input_dataset = receive_dataset||"(ML)"
        output_dataset = HLQ_name||".MODLISTR.EXEC(ML)"
        If input_dataset = output_dataset          Then Do
           Say ;
           Say "RECEIVE dataset name is the same as the EXEC runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
        Signal Allocate_Input_Output_Files
   End
   When input_file_count  =   3                    Then Do
        input_dataset = receive_dataset||"(BIGLGET)"
        output_dataset = HLQ_name||".MODLISTR.EXEC(BIGLGET)"
        If input_dataset = output_dataset          Then Do
           Say ;
           Say "RECEIVE dataset name is the same as the EXEC runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
        Signal Allocate_Input_Output_Files
   End
   When input_file_count  =   4                    Then Do
        input_dataset = receive_dataset||"(CALLMODL)"
        output_dataset = HLQ_name||".MODLISTR.EXEC(CALLMODL)"
        If input_dataset = output_dataset          Then Do
           Say ;
           Say "RECEIVE dataset name is the same as the EXEC runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
        Signal Allocate_Input_Output_Files
   End
   When input_file_count  =   5                    Then Do
        input_dataset = receive_dataset||"(INSTALL1)"
        output_dataset = HLQ_name||".MODLISTR.CNTL(INSTALL1)"
        If input_dataset = output_dataset          Then Do
           Say ;
           Say "RECEIVE dataset name is the same as the CNTL runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
   End
   When input_file_count  =   6                    Then Do
        input_dataset = receive_dataset||"(INSTALL2)"
        output_dataset = HLQ_name||".MODLISTR.CNTL(INSTALL2)"
        If input_dataset = output_dataset          Then Do
           Say ;
           Say "RECEIVE dataset name is the same as the CNTL runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
   End
   When input_file_count  =   7                    Then Do
        input_dataset = receive_dataset||"(INSTALL3)"
        output_dataset = HLQ_name||".MODLISTR.CNTL(INSTALL3)"
        If input_dataset = output_dataset          Then Do
           Say ;
           Say "RECEIVE dataset name is the same as the CNTL runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
   End
   When input_file_count  =   8                    Then Do
        input_dataset = receive_dataset||"(HOWCALLD)"
        output_dataset = HLQ_name||".MODLISTR.MACLIB(HOWCALLD)"
        If input_dataset = output_dataset          Then Do
           Say ;
          Say "RECEIVE dataset name is the same as the MACLIB runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
   End
   When input_file_count  =   9                    Then Do
        input_dataset = receive_dataset||"(JUL2GREG)"
        output_dataset = HLQ_name||".MODLISTR.SOURCE(JUL2GREG)"
        If input_dataset = output_dataset          Then Do
           Say ;
          Say "RECEIVE dataset name is the same as the SOURCE runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
   End
   When input_file_count  =   10                   Then Do
        input_dataset = receive_dataset||"(MODLISTR)"
        output_dataset = HLQ_name||".MODLISTR.SOURCE(MODLISTR)"
        If input_dataset = output_dataset          Then Do
           Say ;
          Say "RECEIVE dataset name is the same as the SOURCE runtime",
               "library"
           Say "Rename the RECEIVE INDS dataset name to make it",
           Say "unique and then try this exec again."
           Say ;
           Signal End_Up
        End
   End
   Otherwise Do
        input_file_count  = input_file_count - 1
        Signal End_Up
   End
End

Allocate_Input_Output_Files:

"ALLOC FI(INPUT)   DA('"input_dataset"') SHR REUSE"
alloc_input_rc = rc

If alloc_input_rc <> 0 Then Do
   Say " RECEIVE INDS File could not be allocated   ..."
   Say " RECEIVE INDS File => '"input_dataset"'"
   Signal End_Up
End

"ALLOC FI(OUTPUT)  DA('"output_dataset"') SHR REUSE"
alloc_output_rc = rc

If alloc_output_rc <> 0 Then Do
   Say " RUNTIME File could not be allocated   ..."
   Say " RUNTIME File => '"output_dataset"'"
   Say " Make sure that job INSTALL1 has ben run before issuing",
       "this exec!"
   Signal End_Up
End

Say ;
Say "Reading Input Receive Dataset   => '"||input_dataset||"'"
Say "Creating Output Runtime Dataset => '"||output_dataset||"'"
Say ;

input_count = 0

Read_Input_dataset_Loop:

input_count = input_count + 1

"EXECIO 1 DISKR INPUT    (STEM input. "
execio_rc    = rc
If execio_rc = 2   Then ,        /* On end of file - Swap Files    */
   Signal Assign_Input_Output_Files
If execio_rc <> 0  Then Do
   Say ;
   Say "Error executing the EXECIO DISKR Rexx command for file"
       "INPUT !!!"
   Say "File INPUT was not properly allocated or is invalid"
   Say "Input File =>" input_dataset
   Say "Input File Input count is " input_count
   Say "EXECIO Return Code is "execio_rc" !!!"
   Say "Exec INSTALL is Terminated Prematurely      ..."
   rtcd = 12
   Signal End_up
End

len_input = LENGTH(input.1)

p1  = POS("$XXXXXXXX.$",input.1)
If p1  > 0                                         Then Do
   part_1   = ""
   If p1 > 1 Then Do
      part_1  = SUBSTR(input.1,1,p1 - 1)
   End
   part_2   = HLQ_name||"."
   part_3   = SUBSTR(input.1,p1 + 11,len_input - p1 + 11)
   output.1 = LEFT(part_1||part_2||part_3,80," ")
   Signal Write_Output_Record
End

p2  = POS("XXXXXXXX.",input.1)
If p2  > 0                                         Then Do
   part_1   = ""
   If p2 > 1 Then Do
      part_1  = SUBSTR(input.1,1,p2 - 1)
   End
   part_2   = HLQ_name||"."
   part_3   = SUBSTR(input.1,p2 + 9,len_input - p2 + 9)
   output.1 = LEFT(part_1||part_2||part_3,80," ")
   Signal Write_Output_Record
End

p3  = POS("$MY.SYSPROC.LIB$",input.1)
If p3  > 0                                         Then Do
   part_1   = ""
   If p3 > 1 Then Do
      part_1  = SUBSTR(input.1,1,p3 - 1)
   End
   part_2   = sysproc_dataset
   part_3   = SUBSTR(input.1,p3 + 16,len_input - p3 + 16)
   output.1 = LEFT(part_1||part_2||part_3,80," ")
   Signal Write_Output_Record
End

p4  = POS("$MY.RECEIVE.LIB$",input.1)
If p4  > 0                                         Then Do
   part_1   = ""
   If p4 > 1 Then Do
      part_1  = SUBSTR(input.1,1,p4 - 1)
   End
   part_2   = receive_dataset
   part_3   = SUBSTR(input.1,p4 + 16,len_input - p4 + 16)
   output.1 = LEFT(part_1||part_2||part_3,80," ")
   Signal Write_Output_Record
End

output.1 = input.1

Write_Output_Record:

"EXECIO 1 DISKW OUTPUT   (STEM output. "
execio_rc    = rc
If execio_rc <> 0  Then Do
   Say ;
   Say "Error executing the EXECIO DISKW Rexx command for file"
       "OUTPUT  !!!"
   Say "File OUTPUT was not properly allocated or is invalid"
   Say "or an I/O error was encountered"
   Say "Input I/O count is " input_count
   Say "EXECIO Return Code is "execio_rc" !!!"
   Say "Exec INSTALL is Terminated Prematurely      ..."
   rtcd = 12
   Signal End_up
End

Signal Read_Input_dataset_Loop

End_Up:

"EXECIO 0 DISKR INPUT    (FINIS"
"EXECIO 0 DISKW OUTPUT   (FINIS"
"FREE FI(INPUT,OUTPUT)"
"FREE DA('"||exec_lib||"')"
"FREE DA('"||cntl_lib||"')"
"FREE DA('"||maclib||"')"
"FREE DA('"||source||"')"
"FREE DA('"||loadlib||"')"

Say ;
Say "Number of Runtime Files Output =>" input_file_count
Say ;
Say "INSTALL exec return code is    =>" rtcd

Return rtcd
