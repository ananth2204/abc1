/*************************************************************** REXX */
/*                                                                    */
/* MODULE NAME = BIGLET                                               */
/*                                                                    */
/* DESCRIPTIVE NAME = DISPLAY SYSTEM ID IN LARGE LETTERS              */
/**********************************************************************/
/*  MODULE  =  BIGLET                                                 */
/*                                                                    */
/*  #¢# AUTHOR             TKMILLE                                    */
/*  #¢# CREATED            TKMILLE 12/06/2006                         */
/*  #¢# LAST UPDATE        TKMILLE 12/06/2006                         */
/*                                                                    */
/*  PURPOSE = This exec will call Rexx function BIGLGET to return     */
/*            a string in large block letters (6 lines per block -    */
/*            the 6th line is blank).   This Rexx exec will parse     */
/*            the results and display the lines returned.             */
/*            The maximum size of the string passed which will be     */
/*            displayed in block letters is 11 characters.            */
/*                                                                    */
/*  Example Function Call to Rexx Function exec BIGLGET:              */
/*                                                                    */
/*      result  = BIGLGET(string)                                     */
/*                                                                    */
/*      result will have the returned value of:                       */
/*                                                                    */
/*      LINE001===>abcdefg..........<===LINE002===>abcdefg......<===  */
/*      LINE003===>abcdefg..........<===LINE004===>abcdefg......<===  */
/*      LINE005===>abcdefg..........<===LINE006===>             <===  */
/*                                                                    */
/*      Line 6 will contains spaces.  Each line will be from 1 to 80  */
/*      characters in length and delimited as described above.        */
/*                                                                    */
/*  PARMS:  DEBUG  = The parameter which displays the statements as   */
/*                   they are executed.                               */
/**********************************************************************/
Arg parms

Trace "O"

userid   = Userid()
rtcd     = 0

debug     = ""
nbr_words = words(parms)

Do i = 1 to nbr_words
   If ABBREV('DEBUG',word(parms,i),3) = 1  then Do
      debug = "DEBUG"
      parms = DELWORD(parms,i,1)
      i = i - 1
      iterate
   End
End
If debug = "DEBUG"  then Do
   Trace "I"
End

PARSE source . How_Called .

envirnmt = SYSVAR("sysenv")
nesting  = SYSVAR("sysnest")
sysicmd  = SYSVAR("sysicmd")
syspcmd  = SYSVAR("syspcmd")
sysscmd  = SYSVAR("sysscmd")

If envirnmt = "BACK" Then Signal Go_Display  /* Background Call ?     */

tsotrap_flag = "$$$TSOTRAP$$$"  /* Tsotrap flag to be stored in parms */
my_exec      = sysicmd          /* Name of my Rexx Exec               */
If my_exec   = "" Then my_exec = "WHOAMI"   /* Insert name of my exec */

If SYSVAR("sysispf") <> "ACTIVE"  Then Do
 /* Make a recursive call to this exec to invoke the ISPF environment */
   parms = parms" "tsotrap_flag             /* Add tsotrap flag       */
   "ISPF CMD(%TSOTRAP" my_exec parms ")"
   Return 0
End
Else Do
  parm_word = WORDPOS(tsotrap_flag,parms)   /* Look for tsotrap flag  */
  If parm_word = 0    Then Do
    parms = parms" "tsotrap_flag            /* Add tsotrap flag       */
    "%TSOTRAP" my_exec parms                /* Invoke TSOTRAP         */
    Return 0
  End
  Else parms = DELWORD(parms,parm_word,1)   /* Remove tsotrap flag    */
End

nn      = 0
string  = Userid
string  = ARG(1)

Get_Big_Block_Letters:

result      = BIGLGET(string)
Call Display_Big_Block_Lines

Signal  End_Up

Display_Big_Block_Lines:

parse_it    = result

Do i = 1 to 999999
  lit_start        = "LINE"||Right(i,3,"0")||"===>"
  lit_end          = "<==="
  pos_lit_st       = POS(lit_start,parse_it)
  If pos_lit_st    = 0  Then LEAVE
  pos_lit_end      = POS(lit_end,parse_it)
  If pos_lit_end   = 0  Then LEAVE
  line    = SUBSTR(parse_it,pos_lit_st + LENGTH(lit_start), ,
                  pos_lit_end - pos_lit_st - LENGTH(lit_start))
  Say line ;
  parse_it   = SUBSTR(parse_it,pos_lit_end + LENGTH(lit_end), ,
                  LENGTH(parse_it) - pos_lit_end - LENGTH(lit_end) +1)
End

Return

End_Up:

Return rtcd
