/*  REXX                                                              */
/**********************************************************************/
/*                                                                    */
/*              CCCC   A   L     L     M   M OOOOO DDDD  L            */
/*             C      A A  L     L     MM MM O   O D   D L            */
/*  MODULE  =  C     A   A L     L     M M M O   O D   D L            */
/*             C     AAAAA L     L     M   M O   O D   D L            */
/*              CCCC A   A LLLLL LLLLL M   M OOOOO DDDD  LLLLL        */
/*                                                                    */
/*  #¢# AUTHOR             TKMILLE                                    */
/*  #¢# LAST UPDATE        TKMILLE 05/31/2007                         */
/*                                                                    */
/*  PURPOSE = This exec calls the MODLISTR program and returns        */
/*            the argument string of link edit information            */
/*            (100 bytes).                                            */
/*                                                                    */
/*            This is an alternative exec to the MODLIST exec.  It    */
/*            can be used to test the MODLISTR program.  Returns      */
/*            the link-edit information for a load module in a        */
/*            linkage parameter (100 bytes) as if called by a program.*/
/*            This exec requires the user to pass the load library    */
/*            dataset name in addition to the load module name.       */
/*                                                                    */
/*  PARAMETERS:                                                       */
/*                                                                    */
/*            Member - The membername to query.  Must be the first    */
/*                     parameter passed and must be a valid PDS or    */
/*                     PDS/E member name in an executable Load Module.*/
/*                                                                    */
/*            LIB()  - The load library dataset name where the member */
/*                     resides.  Must be a valid load library dataset */
/*                     name.  You do not need to use tics or quotes   */
/*                     around the dataset name.  If this parameter is */
/*                     omitted, it will default to SYS1.LINKLIB.      */
/*                                                                    */
/*  Note: This exec assumes that CA-TSOPLUS is active on the system   */
/*        in which the exec is executed.  This uses the extended      */
/*        dynamic steplib allocation feature of CA-TSOPLUS.           */
/*                                                                    */
/*        It also calls exec BIGLGET as a REXX Function call to       */
/*        return a string of data (less than 11 characters in length) */
/*        in large block letters as a heading.                        */
/*                                                                    */
/**********************************************************************/
arg    parms
Address "TSO"

envirnmt = SYSVAR("sysenv")
nesting  = SYSVAR("sysnest")
sysicmd  = SYSVAR("sysicmd")
syspcmd  = SYSVAR("syspcmd")
sysscmd  = SYSVAR("sysscmd")

msg_stat = Msg("OFF")

member   = ""
lib      = "SYS1.LINKLIB"
libdflt  = "Y"
rtcd     = 0

debug     = ""
nbr_words = WORDS(parms)

Do i = 1 to nbr_words
     Select
         When i = 1                                  Then Do
              member = WORD(parms,1)
         End
         When ABBREV("DEBUG",WORD(parms,i),3) = 1    Then Do
              debug = "DEBUG"
              parms = DELWORD(parms,i,1)
              i = i - 1
              Iterate
         End
         Otherwise   Nop
     End
End

If member = "" Then Do
   Say "Member name was not passed ..."
   Say "Member name must be the first parameter passed to CALLMODL"
   Say "CALLMODL exec bypassed ..."
   rtcd = 12
   Signal End_Up
End

If Length(member) < 1 | Length(member) > 8   Then Do
   Say "Member Length is invalid ...  Should be 1-8 characters in",
       "length"
   Say "Member Name passed =>" member "is invalid"
   Say "CALLMODL exec bypassed ..."
   rtcd = 12
   Signal End_Up
End

member = LEFT(member,8," ")

parse var parms  "LIB(" parse_value ")"
If libdflt = "Y" & parse_value <> ""    Then Do
   lib   = parse_value
   lib   = Strip(lib,b,"'")       /* remove enclosed ticks    */
   lib   = Strip(lib,b,'"')       /* remove quotes            */
   libdflt  = "N"
End

parse var parms  "DSN(" parse_value ")"
If libdflt = "Y" & parse_value <> ""    Then Do
   lib   = parse_value
   lib   = Strip(lib,b,"'")       /* remove enclosed ticks    */
   lib   = Strip(lib,b,'"')       /* remove quotes            */
   libdflt  = "N"
End

If Length(lib) < 1 | Length(lib) > 44  Then Do
   Say "Library Length is invalid ...  Should be 1-44 characters in",
       "length"
   Say "Library Name passed =>" lib "is invalid"
   Say "CALLMODL exec bypassed ..."
   rtcd = 12
   Signal End_Up
End

Call_MODLISTR:

steplibx_lib  = "$XXXXXXXX.$MODLISTR.LOADLIB"
"ALLOC FI(STEPLIBX) DA('"steplibx_lib"' ***) SHR REUSE"
steplibx_allocation = tsopext

/* If my new lib is already in the concatenation, back it out      */
If POS("'"steplibx_lib"'",steplibx_allocation) > 0 Then
    "ALLOC FI(STEPLIBX) DA("steplibx_allocation") SHR REUSE"

"ALLOC FI(SYSPRINT) DUMMY REUSE"
"ALLOC FI(IEWLIB)   DA('"lib"') SHR REUSE"

return_arg = Copies(" ",100)

ADDRESS "LINKPGM" 'MODLISTR member return_arg'
modlistr_rc  = rc

Clear

Say ;

dflt_lit   = "default"
If libdflt = "N"  Then  dflt_lit = "specified"

result_b = BIGLGET(member)
Call Display_Big_Block_Lines

Say "MODLISTR Return Code         =>" modlistr_rc
Say "Member Name Passed           =>" member
Say "Library Dataset Name Passed  =>" lib
If  SUBSTR(return_arg,37,6) = "      "  Then Do
    Say "Module not found in "dflt_lit" Library '"lib"'"
    Say ;
    Signal End_Up
End
If  SUBSTR(return_arg,74,8) <> "        "  Then ,
    Say "Member Name Returned         =>" SUBSTR(return_arg,3,8),
            "   (Alias Name for Member" SUBSTR(return_arg,74,8)
Else ,
    Say "Member Name Returned         =>" SUBSTR(return_arg,3,8)
Say "Link Edit Date (GREGORIAN)   =>" SUBSTR(return_arg,11,10)
Say "Link Edit Date (JULIAN)      =>" SUBSTR(return_arg,21,8)
Say "Link Edit Time (hh:mm:ss)    =>" SUBSTR(return_arg,29,8)
Say "Module Length  (in Hex)      =>" SUBSTR(return_arg,37,8)
Say "AMODE                        =>" SUBSTR(return_arg,45,3)
Say "RMODE                        =>" SUBSTR(return_arg,48,3)
Say "APF Code                     =>" SUBSTR(return_arg,51,2)
If  SUBSTR(return_arg,53,2) = "  " Then ,
    Say "RENT                         => N"
Else ,
    Say "RENT                         => Y"
If  SUBSTR(return_arg,55,2) = "  " Then ,
    Say "REUS                         => N"
Else ,
    Say "REUS                         => Y"
If  SUBSTR(return_arg,57,2) = "  " Then ,
    Say "REFR                         => N"
Else ,
    Say "REFR                         => Y"
Say "TTR Address (in Hex)         =>" SUBSTR(return_arg,59,6)
Say "Entry Point Address (in Hex) =>" SUBSTR(return_arg,65,8)
If  SUBSTR(return_arg,73,1) = " " Then ,
    Say "Dataset Organization         => PO"
Else ,
    Say "Dataset Organization         => POE"
Say "SSI Information              =>" SUBSTR(return_arg,82,8)
Say ;

Bypass_Print:

Address "TSO"
If steplibx_allocation  = "" Then
     "FREE  FI(STEPLIBX)"
Else "ALLOC FI(STEPLIBX) DA("steplibx_allocation") SHR REUSE"

Signal End_Up

Display_Big_Block_Lines:

parse_it    = result_b

Do i = 1 to 999999
  lit_start        = "LINE"||Right(i,3,"0")||"===>"
  lit_end          = "<==="
  pos_lit_st       = POS(lit_start,parse_it)
  If pos_lit_st    = 0  Then LEAVE
  pos_lit_end      = POS(lit_end,parse_it)
  If pos_lit_end   = 0  Then LEAVE
  line    = SUBSTR(parse_it,pos_lit_st + LENGTH(lit_start), ,
                  pos_lit_end - pos_lit_st - LENGTH(lit_start))
  If i = 3  Then Do
     dateg   = Substr(date(u),1,6)||Substr(date(s),1,4)
     sysid   = Left(MVSVAR(sysname),3," ")
     line    = Overlay(sysid,line,01,03)
     line    = Overlay(dateg,line,68,10)
  End
  If i = 4  Then Do
     time    = TIME()
     line    = Overlay(time,line,69,08)
  End
  Say line ;
  parse_it   = SUBSTR(parse_it,pos_lit_end + LENGTH(lit_end), ,
                  LENGTH(parse_it) - pos_lit_end - LENGTH(lit_end) +1)
End

Return

End_Up:

Return
