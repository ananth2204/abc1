/* REXX   - MODLIST (Module List)                                    */
/*                                                                   */
/*           M   M OOOOO DDDD  L      III   SSSS TTTTT               */
/*           MM MM O   O D   D L       I   S       T                 */
/*           M M M O   O D   D L       I    SSS    T                 */
/*           M   M O   O D   D L       I       S   T                 */
/*           M   M OOOOO DDDD  LLLLL  III  SSSS    T                 */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/* AUTHOR:          - 05/31/2006                                     */
/* LAST UPDATE:     - 04/26/2010                                     */
/*                                                                   */
/* Purpose:                                                          */
/*         This exec will input a modulename from the terminal and   */
/*         search the LPA List and Link List to search for the       */
/*         module.  If a hit is found, a two-line module information */
/*         BLDL display is echoed back to the terminal and the       */
/*         search is terminated.                                     */
/*                                                                   */
/*         If the keywork "DUP" is added as a parm, the entire       */
/*         list of LPA and LINKLIST datasets are searched and every  */
/*         hit on the module is echoed back to the terminal.         */
/*                                                                   */
/*         If the parameter LIB(dsname) is passed as an optional     */
/*         parm, only that library (dsname) is searched for the      */
/*         module in question. Also, the user can pass the optional  */
/*         paramters VOL(vvvvv) and/or UNIT(xxxxx) to specify the    */
/*         library location instead of locating it thru the catalog. */
/*                                                                   */
/*         Display the module information via ISPF Browse.           */
/*                                                                   */
/* Syntax:                                                           */
/*                                                                   */
/*   MODLIST  modulename { DUP   (or ALL) }                          */
/*                       { LPA      }                                */
/*                       { LINK     }                                */
/*                       { LIST     }                                */
/*                       { LIB(dsname) }                             */
/*                              {VOL(vvvvv)   }                      */
/*                              {UNIT(xxxxx)  }                      */
/*                                                                   */
/*                                                                   */
/* Valid OPTIONAL parameters:                                        */
/*                    'DUP' or 'ALL' (list all duplicate entries),   */
/*                    'LIST' (List all LPA & LINKLIST libraries),    */
/*                    'LIB(mylib)' (Check only this libarary),       */
/*                    'VOL(xxxxxx)' (Use this volser for mylib       */
/*                    allocation), 'UNIT(xxxxx)' (Use this unit for  */
/*                    mylib allocation.  Note, if the library name   */
/*                    is passed as a non-keyword parameter, it must  */
/*                    be at least eight characters in length.        */
/*                                                                   */
/* Example TSO Foreground Exec Calls:                                */
/*                                                                   */
/*  MODLIST m LPA (search only the LPALIST for member 'm' - display. */
/*                the first hit against an LPA library).             */
/*  ML m LPA     (same as the previous example above).               */
/*  ML m LNK     (search only the LINKLIST libs for member 'm' -     */
/*                display the first hit against an LINKLIST library).*/
/*  ML m LINK    (same as LNK)                                       */
/*  ML m         (search both LPALIST and LINKLIST libs for 'm' -    */
/*                display the first hit against an LPA or a          */
/*                LINKLIST library).                                 */
/*  ML m DUP     (search both LPALIST and LINKLIST libs for all      */
/*                 occurances of member 'm' - display all hits).     */
/*  ML m ALL     (same as DUP)                                       */
/*  ML m LIST    (List all of the LPA and LINKLIST libraries)        */
/*  ML m LIB(SYS1.LINKLIB) - (List member 'm' - look at library      */
/*                 'SYS1.LINKLIB' only)                              */
/*  ML m LIB(SYS1.LINKLIB VOL(SYHRS1) - (List member 'm' - look at   */
/*                 library 'SYS1.LINKLIB' on volume 'SYHRS1' only)   */
/*  ML m SYS1.LOADLIB - (List member 'm' - look at library           */
/*                 'SYS1.LOADLIB' only.  Note, the load library      */
/*                 must be at least eight characters in length if    */
/*                 specified this way without a keyword.             */
/*                                                                   */
/* Notes:                                                            */
/*         This exec is modified from Mark Zelden's "LPROG" freeware */
/*         Rexx exec.                                                */
/*                                                                   */
/* Change Log:                                                       */
/*    Added program MODLISTR to display the LinkEdit Date, Time, and */
/*       module length - TKMILLE 04/10/2006                          */
/*    Changed the exec to always use BROWSE mode (ISPF Browse).      */
/*                       TKMILLE 05/01/2006                          */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/* Notes from Mark Zelden's "LPROG" exec.                            */
/* NOTE: The dynamic APF and dynamic LNKLST code in this exec        */
/*       use undocumented IBM control blocks and may break at        */
/*       any time!                                                   */
/*    ... tested on z/OS 1.4 up to z/OS 1.11                         */
/*                                                                   */
/* NOTE: The LNKLST SET displayed is the LNKLST SET of the address   */
/*       space running this program, not necessarily the most        */
/*       current one. For the current LNKLST SET either:             */
/*                                                                   */
/*       1) Run this exec in batch.                                  */
/*       2) Log off and on TSO before executing this exec.           */
/*       3) Issue SETPROG LNKLST,UPDATE,JOB=userid (Before execution)*/
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*********************************************************************/
/*  CVTLLTA LAYOUT (OFFSET 1244 IN CVT): (STATIC LNKLST)             */
/*         DESC                       LEN                            */
/*         ------------------------   ---                            */
/*         CONSTANT 'LLT '             4                             */
/*         NUMBER OF ENTRIES           4                             */
/*         LENGTH OF DSN               1                             */
/*         DSN (PADDED WITH BLANKS)    44                            */
/*********************************************************************/
/*  LPAT LAYOUT  (OFFSET 0 IN CVTEPLPS / START OF EXT. LPA):         */
/*         DESC                       LEN                            */
/*         ------------------------   ---                            */
/*         CONSTANT 'LPAT'             4                             */
/*         NUMBER OF ENTRIES           4                             */
/*         LENGTH OF DSN               1                             */
/*         DSN (PADDED WITH BLANKS)    44                            */
/*********************************************************************/
version_level = "V01.01.14"
Arg parms
Upper parms
Trace "O"
msg_stat = Msg("ON")
envirnmt = Sysvar("sysenv")
nesting  = Sysvar("sysnest")
sysicmd  = Sysvar("sysicmd")
syspcmd  = Sysvar("syspcmd")
sysscmd  = Sysvar("sysscmd")
rtcd     = 0
Userid   = Userid()
Parse source . How_Called . . . . . Env . .

/*******************************************************************/
/* Invoke the ISPF environment and try again.                      */
/*******************************************************************/
If SYSVAR('sysispf') <> "ACTIVE" & envirnmt <> "BACK"  Then Do
   "ISPF CMD(%MODLIST" parms ")"
   rtcd = 0
   Return
End

member = WORD(parms,1)         /* Get the Load Module Member       */
parms  = DELWORD(parms,1,1)    /* Remove the member from the parms */

If member = "" Then Do
   Say "Module name was not passed ..."
   Say "MODLIST exec bypassed ..."
   rtcd = 12
   Signal End_Up_2
End

If Length(member) < 1 | Length(member) > 8   Then Do
   Say "Module Length is invalid ...  Should be 1-8 characters in",
       "length"
   Say "Module Name passed =>" member "is invalid"
   Say "MODLIST exec bypassed ..."
   rtcd = 12
   Signal End_Up_2
End

randomq       = "R"||random(1000,9999)||random(100,999)
sysprint_file = Userid".$$ML$$."randomq".SYSPRINT"

dup          = ""
lpa          = ""
link         = ""
list         = ""
lib          = ""
might_be_lib = ""
vol          = ""
unit         = "SYSDA"
find         = "N"

nbr_words    = WORDS(parms)
curr_parm    = ""
residue      = ""
debug        = ""

Do i = 1 to nbr_words    /* Parse through the execution parameters */
  curr_parm = WORD(parms,i)
  PARSE var curr_parm  "LIB("   parse_value1 ")"
  PARSE var curr_parm  "DA("    parse_value2 ")"
  PARSE var curr_parm  "DSN("   parse_value3 ")"
  PARSE var curr_parm  "VOL("   parse_value4 ")"
  PARSE var curr_parm  "UNIT("  parse_value5 ")"
  SELECT
     WHEN ABBREV("DEBUG",curr_parm,3) = 1                     Then Do
          debug = "DEBUG"
          Iterate
        End
     WHEN parse_value1 <> "" &  lib = ""                      Then Do
          lib   = parse_value1
          Iterate
        End
     WHEN parse_value2 <> "" &  lib = ""                      Then Do
          lib   = parse_value2
          Iterate
        End
     WHEN parse_value3 <> "" &  lib = ""                      Then Do
          lib   = parse_value3
          Iterate
        End
     WHEN ABBREV('DUPLICATE',WORD(parms,i),3) = 1             Then Do
          dup     = "DUP"
          iterate
        End
     WHEN ABBREV('DUPS',WORD(parms,i),4) = 1                  Then Do
          dup     = "DUP"
          iterate
        End
     WHEN ABBREV('ALL',WORD(parms,i),3) = 1                   Then Do
          dup     = "DUP"
          iterate
        End
     WHEN WORD(parms,i) = "LPA"                               Then Do
          lpa     = "LPA"
          iterate
        End
     WHEN WORD(parms,i) = "LINK"                              Then Do
          link    = "LINK"
          iterate
        End
     WHEN WORD(parms,i) = "LNK"                               Then Do
          link    = "LINK"
          iterate
        End
     WHEN WORD(parms,i) = "LIST"                              Then Do
          list    = "LIST"
          iterate
        End
     WHEN LENGTH(WORD(parms,i)) > 8 & ,
          POS("(",WORD(parms,i)) = 0                          Then Do
             might_be_lib = WORD(parms,i)
             iterate
        End
     WHEN parse_value4 <> "" &  vol = ""                      Then Do
          vol = parse_value4
        End
     WHEN parse_value5 <> "" &  unit = ""                     Then Do
          unit = parse_value5
        End
     OTHERWISE Do
          residue = curr_parm
        End
  End
End

If debug = "DEBUG"  Then Do
   Trace "I"
End

If lib = "" & might_be_lib <> "" & POS("(",might_be_lib) = 0  Then Do
   lib   = might_be_lib
End

lib     = STRIP(lib,B,"'")          /* remove enclosed tics          */
lib     = STRIP(lib,B,'"')          /* remove quotes                 */

CVT     = C2D(STORAGE(10,4))        /* MEMORY @ 16 POINTS TO CVT     */
FMIDNUM = Storage(D2X(CVT - 32),7)           /* point to fmid        */
SYSID   = LEFT(MVSVAR("sysname"),8," ")
SMCA    = CVT + 196                 /* ADD JESCT OFFSET (C4)         */
SMCA    = D2X(SMCA)                 /* CONVERT TO HEX                */
SMCA    = STORAGE(SMCA,4)           /* GET SMCA ADDRESS FROM CVT     */
SMCA    = C2X(SMCA)                 /* CHARACTERIZE SMCA ADDRESS     */
If LEFT(SMCA,1) > 7 THEN DO         /* CHECK FOR 31 BIT ADDRESS      */
   CHAR = LEFT(SMCA,1) - 8          /* REMOVE HIGH BIT FROM NIBBLE   */
   SMCA = CHAR || RIGHT(SMCA,7)     /* REMAKE ADDRESS MINUS HIGH BIT */
End
SMCA    = X2D(SMCA)                 /* DECIMALIZE ADDRESS            */
SMFID   = SMCA + 16                 /* POINT TO SMFID ( OFFSET 16 )  */
SMFID   = D2X(SMFID)                /* HEXIFY ADDRESS OF SMFID       */
SMFID   = STORAGE(SMFID,4)          /* GET SMFID FROM MEMORY         */
DATETM = DATE('W')", "DATE('M')" "SUBSTR(DATE('S'),7,2)", "||,
     SUBSTR(DATE('S'),1,4)"."SUBSTR(DATE('J'),3,3)" AT "TIME()
UPPER DATETM

option      = "ALL"
If lpa      = "LPA"      Then option = "LPA"
If link     = "LINK"     Then option = "LINK"
If link     = "LNK"      Then option = "LINK"

If option   = "ALL"      Then option_lit = "LPA OR IN THE LINKLIST"
If option   = "LPA"      Then option_lit = "LPA"
If option   = "LINK"     Then option_lit = "THE LINKLIST"

Allocate_The_Files:

msg_stat = Msg("OFF")

"DELETE '"sysprint_file"' PURGE"   /* HDELETE IF MIGRATED  */

"ALLOC FI(SYSPRINT) DA('"sysprint_file"') MOD REUSE LRECL(121)",
       "RECFM(F B) BLKSIZE(121) SPACE(20) TRACKS DSORG(PS)"

alloc_sysprint_rc = rc

If alloc_sysprint_rc <> 0  Then Do
   Say "Error encountered allocating the SYSPRINT output file ..."
   Say "Return Code =" alloc_sysprint_rc
   Say "MODLIST exec bypassed ..."
   rtcd = 12
   Signal End_Up_2
End

msg_stat = Msg(msg_stat)

If lib <> ""     Then Signal Have_A_Specific_Library

"ALLOC FI(SRCHLIST) NEW REUSE LRECL(80)",
       "BLKSIZE(6160) RECFM(F B) SPACE(05,05) TRACKS DSORG(PS)"
alloc_srchlist_rc = rc

If alloc_srchlist_rc <> 0  Then Do
   Say "Error encountered allocating the SRCHLIST output file ..."
   Say "Return Code =" alloc_srchlist_rc
   Say "MODLIST exec bypassed ..."
   rtcd = 12
   Signal End_Up_2
End

Search_LPA_Libraries:

If OPTION = 'LPA' | OPTION = 'ALL'  Then Do
  CVTSMEXT = C2d(Storage(D2x(CVT + 1196),4))  /* point to stg map ext*/
  CVTEPLPS = C2d(Storage(D2x(CVTSMEXT+56),4)) /* point to stg map ext*/
  NUMLPA   = C2d(Storage(D2x(CVTEPLPS+4),4)) /* # LPA libs in table  */
  LPAOFF   = 8                               /* first ent in LPA tbl */
  Do I = 1 to NUMLPA
     LEN   = C2d(Storage(D2x(CVTEPLPS+LPAOFF),1)) /* length of entry */
     LPDSN = Storage(D2x(CVTEPLPS+LPAOFF+1),LEN) /*DSN of LPA library*/
     LPAOFF = LPAOFF + 44 + 1                  /* next entry in table*/
     LPAPOS = Right(I,3)                       /*position in LPA list*/
     RELLPPOS = Right('(+'I-1')',6)      /* relative position in list*/

     If list = "LIST"    Then Do
        sysprint.1 = lpdsn
        "EXECIO 1 DISKW SYSPRINT (STEM sysprint. "
        execiorc = rc
     End
     Else Do
         srchlist.1 = lpdsn
         "EXECIO 1 DISKW SRCHLIST (STEM srchlist. "
         execiorc = rc
     End
  End
End


Search_LINKLIST_Libraries:

If OPTION = 'LINK' |  OPTION = 'ALL' Then Do
  If Substr(FMIDNUM,4,4) < 6602 then do
    CVTLLTA  = C2d(Storage(D2x(CVT + 1244),4)) /* point to lnklst tbl*/
    NUMLNK   = C2d(Storage(D2x(CVTLLTA+4),4))  /* # LNK libs in table*/
    LLTAPFTB = CVTLLTA + 8 + (NUMLNK*45)       /* start of LLTAPFTB  */
    LNKOFF   = 8                               /*first ent in LBK tbl*/
    LKAPFOFF = 0                              /*first ent in LLTAPFTB*/
    Do I = 1 to NUMLNK
       LEN = C2d(Storage(D2x(CVTLLTA+LNKOFF),1))  /* length of entry */
       LKDSN = Storage(D2x(CVTLLTA+LNKOFF+1),LEN) /* DSN of LNK lib  */
       CHKAPF = Storage(D2x(LLTAPFTB+LKAPFOFF),1) /* APF flag        */
       If  bitand(CHKAPF,'80'x) = '80'x then LKAPF = 'Y' /* flag on  */
         else LKAPF = ' '                         /* APF flag off    */
       LNKOFF = LNKOFF + 44 + 1                   /*next entry in tbl*/
       LKAPFOFF = LKAPFOFF + 1            /* next entry in LLTAPFTB  */
       LNKPOS = Right(I,3)                        /*position in list */
       RELLKPOS = Right('(+'I-1')',6)   /* relative position in list */
       If list = "LIST"    Then Do
          sysprint.1 = lkdsn
          "EXECIO 1 DISKW SYSPRINT (STEM sysprint. "
          execiorc = rc
       End
       Else Do
           srchlist.1 = lkdsn
           "EXECIO 1 DISKW SRCHLIST (STEM srchlist. "
           execiorc = rc
       End
    End
  End
  Else do  /* OS/390 1.2 and above - PROGxx capable LNKLST           */
    ASCB     = C2d(Storage(224,4))               /* point to ASCB    */
    ASSB     = C2d(Storage(D2x(ASCB+336),4))     /* point to ASSB    */
    DLCB     = C2d(Storage(D2x(ASSB+236),4))     /* point to CSVDLCB */
    SETNAME  = Storage(D2x(DLCB + 36),16)      /* LNKLST set name    */
    SETNAME  = Strip(SETNAME,T)                /* del trailing blanks*/
    CVTLLTA  = C2d(Storage(D2x(DLCB + 16),4))  /* point to lnklst tbl*/
    LLTX     = C2d(Storage(D2x(DLCB + 20),4))  /* point to LLTX      */
    NUMLNK   = C2d(Storage(D2x(CVTLLTA+4),4))  /* # LNK libs in table*/
    LLTAPFTB = CVTLLTA + 8 + (NUMLNK*45)       /* start of LLTAPFTB  */
    LNKOFF   = 8                               /*first ent in LLT tbl*/
    VOLOFF   = 8                               /*first ent in LLTX   */
    LKAPFOFF = 0                              /*first ent in LLTAPFTB*/
    Do I = 1 to NUMLNK
       LEN = C2d(Storage(D2x(CVTLLTA+LNKOFF),1))  /* length of entry */
       LKDSN = Storage(D2x(CVTLLTA+LNKOFF+1),LEN) /* DSN of LNK lib  */
       LNKVOL = Storage(D2x(LLTX+VOLOFF),6)       /* VOL of LNK lib  */
       CHKAPF = Storage(D2x(LLTAPFTB+LKAPFOFF),1) /* APF flag        */
       If  bitand(CHKAPF,'80'x) = '80'x then LKAPF = 'Y' /* flag on  */
         else LKAPF = ' '                         /* APF flag off    */
       LNKOFF   = LNKOFF + 44 + 1                 /*next entry in LLT*/
       VOLOFF   = VOLOFF + 8                      /*next vol in LLTX */
       LKAPFOFF = LKAPFOFF + 1            /* next entry in LLTAPFTB  */
       LNKPOS   = Right(I,3)                      /*position in list */
       RELLKPOS = Right('(+'I-1')',6)   /* relative position in list */
       If list = "LIST"    Then Do
          sysprint.1 = lkdsn
          "EXECIO 1 DISKW SYSPRINT (STEM sysprint. "
          execiorc = rc
       End
       Else Do
          srchlist.1 = Copies(" ",60)
          srchlist.1 = Overlay(lkdsn,srchlist.1,1,44)
          srchlist.1 = Overlay(lnkvol,srchlist.1,46,6)
          "EXECIO 1 DISKW SRCHLIST (STEM srchlist. "
          execiorc = rc
       End
    End
  End
End

"EXECIO 0 DISKW SRCHLIST (FINIS "
execiorc = rc

If list = "LIST"      Then Do
   "FREE FI(SRCHLIST)"
   Signal End_Up
End

Set_Up_Search:

"EXECIO 0 DISKR SRCHLIST (OPEN "
execiorc = rc

If execiorc <> 0 Then Do
   "EXECIO 0 DISKR SRCHLIST (FINIS "
   sysprint.1 = "Error Obtaining LPA and LINKLIST datasets ..."
   sysprint.2 = "The Search List File could not be opened  ..."
   sysprint.3 = "MODLIST exec is bypassed ..."
   "EXECIO 3 DISKW SYSPRINT (STEM sysprint. "
   execiorc = rc
   rtcd = 12
   Signal End_Up
End

lib_count = 0


Loop_Search_Libraries:

"EXECIO 1 DISKR SRCHLIST (STEM srchlist. "
execiorc = rc

If execiorc <> 0 & execiorc <> 2  Then Do    /* Error ? */
   If lib_count = 0   Then Do
      sysprint.1 = "Error Obtaining LPA and LINKLIST datasets ..."
      sysprint.2 = "MODLIST exec is bypassed ..."
      "EXECIO 2 DISKW SYSPRINT (STEM sysprint. "
      execiorc = rc
      rtcd = 12
      Signal End_Up
   End
End

If execiorc = 2 Then Do    /* EOF ? */
   "EXECIO 0 DISKR SRCHLIST (FINIS "
   If find = "N"  Then Do
      result_b = BIGLGET(member)
      Call Display_Big_Block_Lines
      sysprint.1  = "MODULE" '"'member'"' "NOT FOUND IN" option_lit ,
           "ON" sysid
      "EXECIO 1 DISKW SYSPRINT (STEM sysprint. "
      execiorc = rc
      rtcd = 12
   End
   Signal End_Up
End

lib_count = lib_count + 1        /* Increment # of dsns searched  */

dsn     = Strip(SUBSTR(srchlist.1,1,44),T)
vol     = Strip(SUBSTR(srchlist.1,46,6),B)

If SYSDSN("'"dsn"("member")'") = "OK" Then Do

   msg_stat = MSG("OFF")
   listdsi_rc  = LISTDSI("'"dsn"'" DIRECTORY NORECALL SMSINFO)
   msg_stat = Msg(msg_stat)
   If vol = ""  Then vol = Sysvolume

   result_b = BIGLGET(member)
   Call Display_Big_Block_Lines

   pdse = "N"
   If listdsi_rc < 5 & sysused = "N/A" then pdse = "Y"

   "ALLOC FI(IEWINFO) DA(*) REUSE"
   "ALLOC FI(IEWLIB) DA('"dsn"') SHR REUSE"

   "CALL *(MODLISTR)  '"member"'"

   MODLISTR_rc = rc

   /* Say "MODLISTR_rc From Call #1 =" MODLISTR_rc  */

   msg_stat = Msg("OFF")
   "FREE FI(IEWLIB,IEWINFO)"
   msg_stat = Msg(msg_stat)

   find = "Y"

   If dup = "DUP" Then ,
      Signal Loop_Search_Libraries
   Else ,
      Signal End_Up

End

Signal Loop_Search_Libraries


Have_A_Specific_Library:

msg_stat = MSG("OFF")

If vol <>  "" Then Do
     "ALLOC FI(IEWLIB) DA('"lib"') SHR REUSE", /* For pgm MODLISTR */
         "VOL("vol") UNIT("unit")"
     alloc_rc = rc
End
Else Do
     "ALLOC FI(IEWLIB) DA('"lib"') SHR REUSE"  /* For pgm MODLISTR */
     alloc_rc = rc
End

msg_stat = Msg(msg_stat)

If alloc_rc <> 0     Then Do
   sysprint.1  = "Dataset '"lib"' Not Cataloged or Catalog Can",
                 "Not be accessed on" sysid
   "EXECIO 1 DISKW SYSPRINT (STEM sysprint. "
   execiorc = rc
   Signal End_Up
End

pdse = "N"

result_b = BIGLGET(member)
Call Display_Big_Block_Lines

msg_stat = MSG("OFF")
listdsi_rc  = LISTDSI("'"lib"'" DIRECTORY NORECALL SMSINFO)
msg_stat = Msg(msg_stat)
vol = Sysvolume
If listdsi_rc < 5 & sysused = "N/A" then pdse = "Y"

"ALLOC FI(IEWINFO) DA(*) REUSE"
"CALL *(MODLISTR)  '"member"'"
MODLISTR_rc = rc

msg_stat = Msg("OFF")

"FREE FI(IEWLIB,IEWINFO)"

msg_stat = Msg(msg_stat)

/* Say "MODLISTR_rc From Call #2 =" MODLISTR_rc  */

find = "Y"                     /* Increment # of dsns displayed */

Signal End_Up


Display_Big_Block_Lines:

sysprint.1 = "    "
"EXECIO 1 DISKW SYSPRINT (STEM sysprint.      "
execiorc = rc

parse_it    = result_b

Do i = 1 to 999999
  lit_start        = "LINE"||Right(i,3,"0")||"===>"
  lit_end          = "<==="
  pos_lit_st       = POS(lit_start,parse_it)
  If pos_lit_st    = 0  Then LEAVE
  pos_lit_end      = POS(lit_end,parse_it)
  If pos_lit_end   = 0  Then LEAVE
  line    = SUBSTR(parse_it,pos_lit_st + LENGTH(lit_start), ,
                  pos_lit_end - pos_lit_st - LENGTH(lit_start))
  If i = 3  Then Do
     dateg   = Substr(date(u),1,6)||Substr(date(s),1,4)
     line    = Overlay(sysid,line,02,08)
     line    = Overlay(dateg,line,68,10)
  End
  If i = 4  Then Do
     time    = TIME()
     line    = Overlay(time,line,69,08)
  End
  sysprint.1 = line
  "EXECIO 1 DISKW SYSPRINT (STEM sysprint.      "
  execiorc = rc

  parse_it   = SUBSTR(parse_it,pos_lit_end + LENGTH(lit_end), ,
                  LENGTH(parse_it) - pos_lit_end - LENGTH(lit_end) +1)

End

"EXECIO 0 DISKW SYSPRINT (STEM sysprint. FINIS"
execiorc = rc

Return

End_Up:

"EXECIO 0 DISKW SRCHLIST (FINIS "  /* Close File if it is still open */
"EXECIO 0 DISKW SYSPRINT (FINIS "  /* Close File if it is still open */

msg_stat = Msg("OFF")

"FREE FI(SRCHLIST IEWLIB IEWINFO)"

msg_stat = Msg(msg_stat)

"DELSTACK"

If envirnmt = "BACK" Then Do                 /* Background Call ?  */
   "NEWSTACK"
   "EXECIO * DISKR SYSPRINT (STEM sysprint. FINIS"
   Do i = 1 to sysprint.0
      Say SUBSTR(sysprint.i,2,79)
   End
   "DELSTACK"
   Say ;
   Signal End_Up_2
End

/***************************************************************/
/* Use the time value (hhmmss) as a suffix for a unique ddname */
/*   for the browser file (in case it gets invoked multiple    */
/*   times within a single ISPF session).  01/21/2010          */
/***************************************************************/

timx      = TIME("N")
dd_suffix = SUBSTR(timx,1,2)||SUBSTR(timx,4,2)||SUBSTR(timx,7,2)
browse_dd = "DD"||dd_suffix
browse_dd = LEFT(browse_dd,8," ")

"ALLOC FI("browse_dd")  NEW REUSE LRECL(121)",
        "RECFM(F B) BLKSIZE(121) SPACE(02,02) TRACKS DSORG(PS)"
alloc_browser_rc = rc

If alloc_browser_rc <> 0  Then Do
   browse_dd = "SYSPRINT"
   Signal ISPF_Browse_the_Results
End

"NEWSTACK"
"EXECIO * DISKR SYSPRINT (FINIS "    /* Read SYSPRINT and queue lines */
Queue ""
"EXECIO * DISKW "browse_dd" (FINIS"    /* Write lines to BROWSER File */
"DELSTACK"

ISPF_Browse_the_Results:

/*********************************************************************/
/*  Browse all of the message lines in ISPF Browse mode.             */
/*********************************************************************/
Address ISPEXEC "LMINIT DATAID(DID) DDNAME("browse_dd")"
Address ISPEXEC "ISPEXEC BROWSE DATAID("did")"         /* ISPF Browse */
Address ISPEXEC "LMFREE DATAID("did")"

msg_stat = Msg("OFF")

"FREE FI("browse_dd")"

End_Up_2:

msg_stat = Msg("OFF")

"FREE FI(SYSRPINT SRCHLIST IEWLIB IEWINFO)"
"DELETE '"sysprint_file"' PURGE"

Return
