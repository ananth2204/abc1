{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011202000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1881152, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE079.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1881152, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1881152, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE079.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1e\\x05'", "DS1TRBAL": "b'\\x8b\\x0e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\x82\\x00\\r\\x00\\x84\\x00\\r\\x00\\x1f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93$?\\x00\\x93$O\\x18(\\x00Y\\x00M\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-09-01T18:28:00", "lines": 89, "newlines": 77, "modlines": 0, "user": "SBGCSC"}, "text": " Please direct inquiries about this file to:\n\n       William J. Smith\n       Charles Schwab\n       The Schwab Building\n       101 Montgomery Street\n       San Francisco, CA 94104\n       (415) 627-7607    phone\n       (415) 627-8099    fax\n\n    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n                 INDEX TO MEMBERS OF THIS COLLECTION\n\n       This collection of tools comprises:\n\n       DCF Script/VS ISPF Interface, as follows:\n\n       1)  A complete production ISPF dialog interface to\n           IBM's DCF Script/VS facility.\n\n           To install this interface, you need members:\n           PLIB1, MSGS, CLIST1 to be IEBUPDTE-loaded to\n           a panel library, a message library, and a\n           CLIST library, respectively.  Also, you will\n           need assembled, member IKJCT44B from the SOURCE\n           member in this pds.  This source must be assembled,\n           linkedited, and placed in a (linklist) library\n           that is accessible to your TSO session.\n\n           This production interface is not CUA compliant\n           as it is.\n\n       2)  A prototype modification to the above DCF Script/VS\n           interface, to make it CUA compliant.  This consists\n           of panels and CLISTS to substitute for like-named\n           members in the panel and CLIST libraries created\n           by the above installation.\n\n           Part of this prototype addition consists of an\n           ISPF primary option menu containing a calendar\n           and action bar pull-downs.\n\n           To install this interface, you need members:\n           PLIB2, CLIST2 to be IEBUPDTE-loaded into panel\n           and CLIST libraries that will be concatenated ahead\n           of the respective libraries created by the install\n           process in item 1) above.\n\n       In addition to the DCF Script/VS ISPF interface, this\n       file contains the following other members:\n\n        SOURCE    -  A collection of various exits to JES2\n                     relating to TSO.  There is also a TSO\n                     session manager exit, and a GDDM plotter\n                     exit.  This member is in IEBUPDTE unloaded\n                     format and must be IEBUPDTE-loaded into a\n                     partitioned dataset.\n\n                     Included in this member is a CLIST variable\n                     extension exit (IKJCT44B) that is required\n                     by member PLIB1.  This member adds some\n                     built-in functions to the CLIST language\n                     and is required for the DCF Script/VS\n                     interface.\n\n        USERMODS  -  A collection of assorted MVS and JES2\n                     local mods packaged in SMP format.  The\n                     usefulness of this collection lies in\n                     the fact that they are sample mods to\n                     IBM products, which IBM never provided\n                     samples for.\n\n        DOCLIB    -  This is a 30-page document describing\n                     the DCF Script/VS Dialog frontend, and\n                     its history.  This was a presentation\n                     given at SHARE 80 in San Francisco.\n\n        DEFMACRO  -  A collection of SCRIPT macros for virtually\n                     every font family marketed by IBM.  This\n                     collection allows easy use of many fonts\n                     by a SCRIPT user.\n\n        PUBTOOLS  -  The complete Charles Schwab in-house\n                     standards guide for mainframe-based desktop\n                     publishing, in SCRIPT format.  (This takes\n                     time to format and print on an IBM printer--\n                     about 40 minutes on a 3820.)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CLIST1": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x08\\x01\\x08\\x01\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 2049, "newlines": 2049, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=SCH0P000                               13AUG93 18.34.21\nPROC 0 DEBUG\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* History...  Changes...  Modifications...                          */\n/* ----------------------------------------                          */\n/*                                                                   */\n/* . Written 11Jan93, William J. Smith, OSVS Technical Services      */\n/*   - This CLIST is provided to establish the parallel testing      */\n/*     environment which will allow two concurrent versions of the   */\n/*     ISPF Script dialog (S.14.1) to execute.                       */\n/*   - This will activate option \"0\" on panel SCH0P000.              */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nIF &DEBUG = DEBUG THEN +\n  CONTROL MAIN MSG LIST CONLIST SYMLIST\nELSE +\n  CONTROL MAIN NOMSG NOLIST NOCONLIST NOSYMLIST\n\nISPEXEC CONTROL ERRORS RETURN\n\nISPEXEC LIBDEF ISPMLIB DATASET ID('SYS0.SCRIPT.MLIB')\nISPEXEC LIBDEF ISPPLIB DATASET ID('SYS0.SCRIPT.PLIB')\nALTLIB  ACT APPLICATION(CLIST) DATASET('SYS0.SCRIPT.CLIST')\n\nISPEXEC SELECT PGM(ISRFPR) PARM((SCH0P100) 0) NEWPOOL\n\nISPEXEC LIBDEF ISPMLIB DATASET\nISPEXEC LIBDEF ISPPLIB DATASET\nALTLIB  DEACT APPLICATION(CLIST)\nEXIT\n./ ADD NAME=SCH0P110                               13AUG93 18.34.21\nPROC 0 DEBUG\n\n/*-------------------------------------------------------------------*/\n/*                                                                   */\n/* Application Design Considerations                                 */\n/* ---------------------------------                                 */\n/*                                                                   */\n/* The summer-fall, 1992, rewrite of the Schwab S.14.1 Script/VS     */\n/* foreground ISPF front-end was primarily undertaken to incorporate */\n/* new CLIST function into a modularly structured and supportable    */\n/* application.  Consistency of panel design, variable usage, and    */\n/* top-down processing were primary considerations.  The SCRIPTIT    */\n/* EDIT macro was also updated to function correctly with the up-    */\n/* dated CLISTs, panels, and messages.                               */\n/*                                                                   */\n/* The systems programmer who supports and updates this application  */\n/* should have a thorough understanding of Script/VS syntax, keyword */\n/* operand usage, and the current PSF in-house configuration.        */\n/* Changes to this application can have dramatic impact on the       */\n/* manner in which the application operates (or fails to operate).   */\n/*                                                                   */\n/* History...  Changes...  Modifications...                          */\n/* ----------------------------------------                          */\n/*                                                                   */\n/*   . Updated 20Jan93, William Smith, OSVS Technical Services       */\n/*     - Panel SCH0P100 changed:  Beginner's mode is now \"Basic\"     */\n/*       mode.  Changed message SCHP010 to reflect the new usage.    */\n/*                                                                   */\n/*   . Updated 20Jan93, William Smith, OSVS Technical Services       */\n/*     - Reviewed handling of all VGET and VPUT service calls to     */\n/*       guarantee that variable handling is correct.  I was picking */\n/*       up certain options that had been VPUT into the profile      */\n/*       pool from older copies of the application because I was     */\n/*       allowing the VGETs to default to ASIS rather than SHARED.   */\n/*       I only want to VPUT variables from the Print Distribution   */\n/*       and Separator Page Defaults panel into the profile pool.    */\n/*       Everything else should go into the shared pool.             */\n/*                                                                   */\n/*   . Updated 11Jan93, William Smith, OSVS Technical Services       */\n/*     - Another duplex logic improvement:  instead of setting a     */\n/*       &DUPLEX to a null value and then issuing a VPUT into the    */\n/*       SHARED pool, I used the VERASE service to simply remove     */\n/*       the FORMDEF variable from the SHARED pool.  Consequently,   */\n/*       the value of FORMDEF will always be null for a continuous   */\n/*       forms device or if changed back to \"NO\".                    */\n/*                                                                   */\n/*   . Updated 08Jan93, William Smith, OSVS Technical Services       */\n/*     - Improved the logic for duplex processing across all real    */\n/*       device families.  I was inadvertently propagating the local */\n/*       FORMDEF name, DSCRPT, into the Print Distribution and       */\n/*       Separator Page Defaults panel for continuous forms devices. */\n/*       DUP&SVAR doesn't appear on any of the continuous forms      */\n/*       panels.  Consequently, if DUP&SVAR is null or \"NO\", I       */\n/*       should set the FORMDEF name to null, too.  This change      */\n/*       causes the FORMDEF name to be set correctly when a          */\n/*       document is reformatted using a different intended target   */\n/*       device.                                                     */\n/*                                                                   */\n/*   . Updated 06Jan93, William Smith, OSVS Technical Services       */\n/*     - Updated all advanced device panels and SCHPNOVC to add      */\n/*       .HELP fields in the )INIT section.  Also added a )HELP      */\n/*       section after the )PROC section even though field level     */\n/*       help panels have not been written.                          */\n/*                                                                   */\n/*   . Updated 05Jan93, William Smith, OSVS Technical Services       */\n/*     - An IF statement was added just before the section of code   */\n/*       that maps an intended real device (&RDEV) to a specific     */\n/*       logical device for a new generic printer class \"ISI\".       */\n/*       The ISI 7028 and 7817 can be configured from the front      */\n/*       panel to emulate a variety of IBM printers (e.g. 3812,      */\n/*       3816, 4028 (among others).  This field should be changed as */\n/*       appropriate if the front panel setting is changed.  The     */\n/*       intent of this change:  eliminate possible confusion with   */\n/*       users who are unfamiliar with the IBM product model no.s.   */\n/*       and the current settings on the printer front panel.        */\n/*     - Updated SCH0P100 to add support for &RDEV = ISI.            */\n/*                                                                   */\n/*   . Updated 04Jan93, William Smith, OSVS Technical Services       */\n/*     - Updated all advanced device panels, SCHPNOVC, and message   */\n/*       members to add support for ALL logical device types for     */\n/*       each intended output device.  The \"ROTx\" panel variable     */\n/*       now verifies all possible logical device types for each     */\n/*       intended output device.  This change adds significant new   */\n/*       function when formatting; every possible dimension and      */\n/*       orientation of output media for all supported and intended  */\n/*       output devices are now supported.  The panel field name     */\n/*       text was changed accordingly for the intended output (real) */\n/*       device.                                                     */\n/*                                                                   */\n/*       This change was suggested by Lauretta Ongaro Zerga in the   */\n/*       Printing Technology Group.  It is unlikely that the feature */\n/*       will have widespread use; it is intended for the more       */\n/*       sophisticated Script \"power\" user.                          */\n/*                                                                   */\n/*     - The SCRIPTIT PDF EDIT macro was converted to use only the   */\n/*       AFP Core Interchange Fonts logical device (AFPA) rather     */\n/*       than use PG2A (IBM 3820).                                   */\n/*                                                                   */\n/*   . Updated 15Dec92, William Smith, OSVS Technical Services       */\n/*     - Ref: WSC 9231 and APAR PN21493 - New device support for     */\n/*       Core Interchange Fonts;  PTF UN24230 is superceded by       */\n/*       UN29299                                                     */\n/*     - I added support for logical device \"AFPxxxx\" in CLIST       */\n/*       SCH0P110, updated SCH0P100, and created panel SCHPAFP       */\n/*     - New SVAR = 9 for AFP using either 240 or 300 pel output     */\n/*                                                                   */\n/*   . Completely re-written during the fall of 1992 by William J.   */\n/*     Smith, Staff Systems Programmer.  Largely completed by early  */\n/*     November, 1992.  All panels & nested CLISTs were re-written   */\n/*     or re-designed to exploit MVS/ESA 4.2.2, JES/2 4.2, PSF/2.1,  */\n/*     TSO/E 2.3.1, and DCF Script/VS 1.4.0.  Made use of the new    */\n/*     Script/VS TSO Enhancements SPE allowing use of a DDNAME       */\n/*     rather than use of the Script/VS keyword operands.            */\n/*                                                                   */\n/*   . Modified by William J. Smith, Staff Systems Programmer, in    */\n/*     the fall of 1990.  Added support for GDDM CDPU, eliminated    */\n/*     support for the IBM 6670 and 4250, updated to use TSO/E 2.1   */\n/*     CLIST and ISPF 3.1 dialog management services enhancements.   */\n/*     Corrected numerous logic errors and reduced complexity for    */\n/*     use with DCF Script/VS 1.3.2 and 1.4.0.                       */\n/*                                                                   */\n/*   . Updated by Roger Murphy, a summer intern, 1986, to add        */\n/*     support for IBM 3800 and 3820 page printers.                  */\n/*                                                                   */\n/*   . Original idea:  Jim Dickson, Systems Programmer, circa 1985.  */\n/*                                                                   */\n/*-------------------------------------------------------------------*/\n\n/*-------------------------------------------------------------------*/\n/*                                                                   */\n/* Debug Code                                                        */\n/*                                                                   */\n/*-------------------------------------------------------------------*/\n\nISPEXEC VGET (DEBUG) SHARED\nIF &DEBUG = DEBUG THEN +\n  CONTROL MAIN MSG LIST CONLIST SYMLIST\nELSE +\n  CONTROL MAIN NOMSG NOLIST NOCONLIST NOSYMLIST\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Following variables initialized from PGM(ISRFPR) and SCH0P100:    */\n/* PRJ1, LIB1, TYP1, MEM, DSN, ZDSQMEM, ZDSQ, ZDS, ZMEM, ZORG.       */\n/*                                                                   */\n/* Ref:  \"ISPF and ISPF/PDF Planning and Customization\", Version 3.4 */\n/*       Chapter 3, 'ISPF/PDF Foreground and Batch Customizing',     */\n/*       p. 103-114, SC34-4257-02.                                   */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nISPEXEC VGET (PRJ1,LIB1,TYP1,DSN,ZDSQMEM,ZDSQ,ZDS,ZMEM,ZORG,+\n              ZUSER,ZPREFIX,SVAR,SKILL,RDEV,DEBUG,CDPU) ASIS\n\n/* ----------------------------------------------------------------- */\n\nSET &ZFPRFC = 0                          /* Set ISRFPA TSO CP RC     */\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* The following NGLOBAL statement names variables that all inline   */\n/* subprocedures can use.  Note:  When defining an NGLOBAL variable  */\n/* any subprocedure in the same CLIST can refer to it by name and    */\n/* modify its value.                                                 */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nNGLOBAL PRJ1,LIB1,TYP1,DSN,ZDSQMEM,ZDSQ,ZDS,ZMEM,ZORG,ZUSER,ZPREFIX,+\n        SVAR,SKILL,RDEV,LISTID\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* The following code establishes a unique set of device-dependent   */\n/* variables for each logical device family.                         */\n/*                                                                   */\n/* VGET only those variables that are required on a panel-by-panel   */\n/* basis.  The variable names are ordered in the VGET calling        */\n/* sequence as the .ZVARS are ordered in each processing section     */\n/* of each device-dependent processing panel.                        */\n/*                                                                   */\n/* The following \"IF\" statement checking for use of real device type */\n/* ISI, was added to allow specification of \"ISI\" as a generic       */\n/* printer class for Interface Systems Printers (ISI 7028 and ISI    */\n/* 7817).  Both of these printers can be configured from the front   */\n/* panel to emulate a 3812, 3816, 4028 (among others).  This field   */\n/* should be changed as appropriate if the front panel setting is    */\n/* changed.  This feature should eliminate possible confusion with   */\n/* users who are unfamiliar with the IBM product model no.s and the  */\n/* current settings on the printer front panel.                      */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nIF &RDEV = &STR(ISI) THEN +\n  SET &RDEV = 3816\n\nSELECT (&RDEV)\n  WHEN (TERM | 3270) +\n    DO\n      SET &SVAR = 1                  /* Logical Device = TERMINAL    */\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\n  WHEN (1403) +\n    DO                               /* Logical Device = 1403XXX     */\n      SET &SVAR = 2\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\n  WHEN (PS) +\n    DO\n      SET &SVAR = 3                  /* Logical Device = POSTSCRIPT  */\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\n  WHEN (3800) +\n    DO\n      SET &SVAR = 4                  /* Logical Device = 38PPXXXX    */\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\n  WHEN (3820) +\n    DO\n      SET &SVAR = 5                  /* Logical Device = PG1XXXX     */\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\n  WHEN (3812 | 3816) +\n    DO\n      SET &SVAR = 6                  /* Logical Device = PG2XXXX     */\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\n  WHEN (4224) +\n    DO\n      SET &SVAR = 7                  /* Logical Device = PG3XXXX     */\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\n  WHEN (4028) +\n    DO\n      SET &SVAR = 8                  /* Logical Device = PG4XXXX     */\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\n  WHEN (AFP) +\n    DO\n      SET &SVAR = 9                  /* Logical Device = AFPXXXX     */\n      SYSCALL VGET_DIALOG_VARIABLES\n    END\nEND\n\nVGET_DIALOG_VARIABLES: PROC 0\n  SELECT (&RDEV)\n    WHEN (TERM | 3270) ISPEXEC VGET +\n         (BDO&SVAR,BDE&SVAR,CH1&SVAR,CH2&SVAR,+\n          CH3&SVAR,CH4&SVAR,MS1&SVAR,MS2&SVAR,ROT&SVAR,+\n          SPL&SVAR,UPC&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR,DEVT) SHARED\n\n    WHEN (1403) ISPEXEC VGET +\n         (BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,+\n          CH3&SVAR,CH4&SVAR,MS1&SVAR,MS2&SVAR,ROT&SVAR,+\n          SPL&SVAR,UPC&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR,DEVT) SHARED\n\n    WHEN (PS) ISPEXEC VGET +\n         (PSO,BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,+\n          CH3&SVAR,CH4&SVAR,DUP&SVAR,MS1&SVAR,MS2&SVAR,+\n          ROT&SVAR,SPL&SVAR,UPC&SVAR,GDDM&SVAR,PSG&SVAR,+\n          SPM&SVAR,PIL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR,DEVT) SHARED\n\n    WHEN (3800 | 4224) ISPEXEC VGET +\n         (BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,+\n          CH3&SVAR,CH4&SVAR,MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,+\n          UPC&SVAR,GDDM&SVAR,PSG&SVAR,SPM&SVAR,SGL&SVAR,PRO&SVAR,+\n          SLB&SVAR,OSO&SVAR,DEVT) SHARED\n\n    WHEN (3812 | 3816 | 3820 | 4028 | AFP) ISPEXEC VGET +\n         (BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,+\n          CH3&SVAR,CH4&SVAR,DUP&SVAR,MS1&SVAR,MS2&SVAR,+\n          ROT&SVAR,SPL&SVAR,UPC&SVAR,GDDM&SVAR,PSG&SVAR,+\n          SPM&SVAR,SGL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR,DEVT) SHARED\n\n  END\nEND\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Display the device-specific options panel for each of the device  */\n/* types supported in the Script environment.                        */\n/*                                                                   */\n/* SUPPORTED DEVICES:                                                */\n/*                                                                   */\n/* DEVICE = TERM OR 3270 - output displayed at the terminal          */\n/*          1403         - high-speed, line-printer output           */\n/*          3800-3       - Siemens 2300, 2140 and IBM 3900           */\n/*          PSA          - Adobe PostScript or compatible printers   */\n/*          PG1A         - IBM 3820 page printer or compatible       */\n/*          PG2A         - IBM 3812 or 3816 printers or compatibles  */\n/*          PG3A         - IBM 4224                                  */\n/*          PG4A         - IBM 4028 page printer                     */\n/*          AFPA         - Core Interchange Fonts (scalable) with    */\n/*                         APAR PN21493 @ 240 or 300 pel resolution  */\n/*                                                                   */\n/* 3800-USAGE NOTES:                                                 */\n/* -----------------                                                 */\n/* -*-      The default orientation for output printed on the 2300   */\n/*          will be portrait using DEVICE(38PPNS90).  The standard   */\n/*          stock form mounted in the printer is 12x8.5\".  Output    */\n/*          must be rotated 90 degrees (cost savings) to obtain a    */\n/*          portrait orientation.                                    */\n/*                                                                   */\n/* -*-      In order to print in landscape mode using the standard   */\n/*          12x8.5\" stock use DEVICE(38PPNS) when printing on the    */\n/*          2300, 2140, or 3900.                                     */\n/*                                                                   */\n/* -*-      In order to print on the 2140 use DEVICE(38PPN) to       */\n/*          print in portrait mode with a non-rotated appearance on  */\n/*          9.5x11\" stock.                                           */\n/*                                                                   */\n/* 4224-USAGE NOTES:                                                 */\n/* -----------------                                                 */\n/* -*-      The IBM 4224 (PG3) doesn't follow the same convention    */\n/*          for specifying logical device types as its PGx counter-  */\n/*          parts.  A 4224 doesn't really \"rotate\" since it is a     */\n/*          continuous forms rather than cut-sheet printer.          */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nDISPLAY_DEVICE_OPTIONS_PANELS: +\n  IF &SKILL = B THEN +\n    DO\n      ISPEXEC CONTROL NONDISPL ENTER\n      ISPEXEC DISPLAY PANEL(SCHPNOVC)\n      SET &RC = &LASTCC\n    END\n  ELSE +\n    DO\n      SELECT (&RDEV)\n        WHEN (TERM | 3270) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHP3270)\n            SET &RC = &LASTCC\n          END\n        WHEN (1403) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHP1403)\n            SET &RC = &LASTCC\n          END\n        WHEN (PS) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHPPS)\n            SET &RC = &LASTCC\n          END\n        WHEN (3800) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHP3800)\n            SET &RC = &LASTCC\n          END\n        WHEN (3820) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHP3820)\n            SET &RC = &LASTCC\n          END\n        WHEN (3812 | 3816) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHP3816)\n            SET &RC = &LASTCC\n          END\n        WHEN (4224) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHP4224)\n            SET &RC = &LASTCC\n          END\n        WHEN (4028) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHP4028)\n            SET &RC = &LASTCC\n          END\n        WHEN (AFP) +\n          DO\n            ISPEXEC DISPLAY PANEL(SCHPAFP)\n            SET &RC = &LASTCC\n          END\n      END\n    END\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Determine the return code after displaying the device-specific    */\n/* DCF options panel for each of the above-supported printers.       */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n  SELECT (&RC)\n    WHEN (0) +\n      GOTO BIND_SPELL_UPCASE_PROCESSING\n    WHEN (8) +\n      DO\n        SET &MSG = SCHP000\n        GOTO CLEANUP_AND_EXIT_CLIST\n      END\n    WHEN (12:20) +\n      DO\n        SET &MSG = SCHP001\n        GOTO CLEANUP_AND_EXIT_CLIST\n      END\n  END\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* BIND, SPELLCHK, and UPCASE are processed in the )PROC section of   */\n/* each device panel.                                                 */\n/*                                                                    */\n/* Duplex processing (printing) is not a function that is native to   */\n/* Script/VS.  Duplex printing is a function of an AFP FORMDEF.  The  */\n/* \"Duplex hardcopy output\" option only appears on those panels where */\n/* the printer supports duplexed printing (Note: The IBM 1403, 3800,  */\n/* 3900, 4224, and 4028 do NOT support duplexed printing).            */\n/*                                                                    */\n/* However, the Interface Systems ISI 7028 and 7817 emulate an IBM    */\n/* 4028 and offer the additional feature of duplexed printing.        */\n/* Consequently, the 4028 data entry panel has been modified to add   */\n/* support for duplexed printing.                                     */\n/*                                                                    */\n/* Duplexed hardcopy output support was added here for lack of a      */\n/* better place in the CLIST to support it.  The F1DSCRPT FORMDEF is  */\n/* a locally developed FORMDEF.  Any comparable FORMDEF can be        */\n/* substituted in its place and must be a maximum of 6 characters in  */\n/* length.  The FORMDEF name, DSCRPT, will be referenced in the       */\n/* dynamic output descriptor DCFOUDES later in this CLIST and will    */\n/* appear on the \"Print Distribution & Separator Page Defaults\"       */\n/* panel.                                                             */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* DUP&SVAR is null for continuous forms printers... consequently,    */\n/* when DUP&SVAR is null, you should always set the FORMDEF value to  */\n/* a null value, too.  This code is necessary when changing between   */\n/* different intended real device types.  It guarantees that the      */\n/* SHARED pool is clear of any FORMDEF value if you change from a     */\n/* duplexed cut-sheet printer to a continuous forms printer (which    */\n/* doesn't have DUP&SVAR on its panel).                               */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nBIND_SPELL_UPCASE_PROCESSING: +\n  SET &DUPLEX = &&DUP&SVAR\n  SELECT (&DUPLEX)\n    WHEN (&STR() | N) +\n      ISPEXEC VERASE (FORMDEF) ASIS\n    WHEN (Y) +\n      DO\n        SET &FORMDEF = &STR(DSCRPT)\n        ISPEXEC VPUT (FORMDEF) SHARED\n      END\n  END\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* CHARS:  Specify Fonts                                              */\n/* ------  -------------                                              */\n/*                                                                    */\n/* The CHARS option identifies the fonts to be used.                  */\n/*                                                                    */\n/* For page devices, you specify an 8-character font identifier for   */\n/* the coded font.  For PostScript devices, you specify a 1- to       */\n/* 8-character AFM (Adobe Font Metrics) filename.                     */\n/*                                                                    */\n/* If you specify the CHARS option, you must specify at least one     */\n/* font.  You can specify a maximum of 31 fonts.                      */\n/*                                                                    */\n/* Ref:   \"DCF: SCRIPT/VS Language Reference\", Release 4.0,           */\n/*        SH35-0070-06, P. 24-25.                                     */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nCHARS_PROCESSING: +\n  SET &CHAR1 = &&CH1&SVAR\n  SET &CHAR2 = &&CH2&SVAR\n  SET &CHAR3 = &&CH3&SVAR\n  SET &CHAR4 = &&CH4&SVAR\n  IF (&CHAR1 \u00ac= &STR() | &CHAR2 \u00ac= &STR() | &CHAR3 \u00ac= &STR() | +\n      &CHAR4 \u00ac= &STR()) THEN +\n    SET &CHAR = +\n        &STR(CHARS(&&CH1&SVAR &&CH2&SVAR &&CH3&SVAR &&CH4&SVAR))\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* DEVICE:  Specify a Logical Output Device                           */\n/* -------  -------------------------------                           */\n/*                                                                    */\n/* SCRIPT/VS logical device support allows a single physical device   */\n/* to be defined as many different logical device types, each having  */\n/* different characteristics.                                         */\n/*                                                                    */\n/* Ref:   \"DCF: SCRIPT/VS Language Reference\", Release 4.0,           */\n/*        SH35-0070-06, P. 26-29.                                     */\n/*                                                                    */\n/* The logical device type (&DEVT) will be set within the )PROC       */\n/* portion of each real device type processing panel.  It is largely  */\n/* dependent upon the choice of whether to rotate and the physical    */\n/* characteristics (size) of the output medium.                       */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nDEVICE_PROCESSING: +\n  GOTO FILE_PROCESSING_ORGANIZATION\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* FILE:  Name a Disk File for Output                                 */\n/* -----  ---------------------------                                 */\n/*                                                                    */\n/* Pre-allocate formatted output file with a DDNAME of SCRPTFIL       */\n/* ------------------------------------------------------------       */\n/*                                                                    */\n/* Note:  An alternative method for specifying the direct-access      */\n/*        file for the formatted output in TSO is to pre-allocate     */\n/*        the desired direct-access file with a DDNAME of SCRPTFIL.   */\n/*                                                                    */\n/* Ref:   \"DCF: SCRIPT/VS Language Reference\", Release 4.0,           */\n/*        SH35-0070-06, P. 32.                                        */\n/*                                                                    */\n/* PDS/E's are allocated as output files in both of the inline sub-   */\n/* procedures.  No directory blocks are specified and a DSNTYPE of    */\n/* LIBRARY is used in each ALLOCATE statement.                        */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* Only partitioned(PO) or physical sequential(PS) input is allowed.  */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nFILE_PROCESSING_ORGANIZATION: +\n  IF (&ZORG = PO) | (&ZORG = PS) THEN +\n    IF (&ZORG = PS) THEN +\n      DO\n        SET &TIME = &SYSTIME\n        SET &LISTID = +\n        &STR($&SUBSTR(1:2,&TIME)&SUBSTR(4:5,&TIME)&SUBSTR(7:8,&TIME))\n        SET &ZMEM = &LISTID\n        ISPEXEC VPUT (LISTID,ZMEM) SHARED\n      END\n    ELSE +\n      IF (&ZORG = PO && &ZMEM = ) THEN +\n        SET &MSG = SCHP002\n      ELSE +\n        DO\n          SET &LISTID = &ZMEM\n          SET &MSG =\n        END\n  ELSE +\n    DO\n      SET &MSG = SCHP003\n      IF &MSG \u00ac= THEN +\n        GOTO CLEANUP_AND_EXIT_CLIST\n    END\n\nFILE_PROCESSING_ALLOCATION: +\n  SELECT (&RDEV)\n    WHEN (1403) +\n      DO\n        SET &RECFM_1403 = &STR(V B M)\n        SYSCALL ALLOCATE_MISC_FILE_FORMATS LIST &STR(RECFM_1403) 255 3156\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            SET MSG = SCHP004\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    WHEN (PS) +\n      DO\n        SET &RECFM_PS = &STR(V B)\n        SYSCALL ALLOCATE_MISC_FILE_FORMATS LISTPS &STR(RECFM_PS) 260 264\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            SET MSG = SCHP004\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    WHEN (3800) +\n      DO\n        SYSCALL ALLOCATE_FILE_VBM_8205_8209 LIST38PP\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            SET MSG = SCHP004\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    WHEN (3820 | 3812 | 3816) +\n      DO\n        SYSCALL ALLOCATE_FILE_VBM_8205_8209 LIST3820\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            SET MSG = SCHP004\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    WHEN (4224) +\n      DO\n        SYSCALL ALLOCATE_FILE_VBM_8205_8209 LIST4224\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            SET MSG = SCHP004\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    WHEN (4028) +\n      DO\n        SYSCALL ALLOCATE_FILE_VBM_8205_8209 LIST4028\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            SET MSG = SCHP004\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    WHEN (AFP) +\n      DO\n        SYSCALL ALLOCATE_FILE_VBM_8205_8209 LISTAFP\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            SET MSG = SCHP004\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n  END\n\nALLOCATE_MISC_FILE_FORMATS: PROC 4 SUFFIX RECFM LRECL BLKSIZE\n  NGLOBAL SCRIPT_OUTPUT_FILE\n  SYSREF &RECFM\n  SET &SCRIPT_OUTPUT_FILE = &ZPREFIX..&LISTID..&SUFFIX\n  IF &SYSDSN('&SCRIPT_OUTPUT_FILE') = &STR(OK) THEN +\n    DEL '&SCRIPT_OUTPUT_FILE'\n  ALLOCATE F(SCRPTFIL) DA('&SCRIPT_OUTPUT_FILE(&LISTID)') +\n    UNIT(TSODA) SP(5,2) TRACKS DSORG(PO) NEW REUSE RELEASE +\n    RECFM(&RECFM) LRECL(&LRECL) BLKSIZE(&BLKSIZE) DSNTYPE(LIBRARY)\n  SET &RC = &LASTCC\n  IF &RC > 0 THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(SCH0P160)\n      RETURN CODE(&RC)\n    END\nEND\n\nALLOCATE_FILE_VBM_8205_8209: PROC 1 SUFFIX\n  NGLOBAL SCRIPT_OUTPUT_FILE\n  SET &SCRIPT_OUTPUT_FILE = &ZPREFIX..&LISTID..&SUFFIX\n  IF &SYSDSN('&SCRIPT_OUTPUT_FILE') = &STR(OK) THEN +\n    DEL '&SCRIPT_OUTPUT_FILE'\n  ALLOCATE F(SCRPTFIL) DA('&SCRIPT_OUTPUT_FILE(&LISTID)') +\n    UNIT(TSODA) SP(5,2) TRACKS DSORG(PO) NEW REUSE RELEASE +\n    RECFM(V B M) LRECL(8205) BLKSIZE(8209) DSNTYPE(LIBRARY)\n  SET &RC = &LASTCC\n  IF &RC > 0 THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(SCH0P160)\n      RETURN CODE(&RC)\n    END\nEND\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* FONTLIB:  Specify a Font Library                                   */\n/* --------  ----------------------                                   */\n/*                                                                    */\n/* Pre-allocate required font libraries with a DDNAME of SCRPTFNT     */\n/* --------------------------------------------------------------     */\n/*                                                                    */\n/* Note:  When you have a DDNAME of SCRPTFNT allocated and you don't  */\n/*        specify the FONTLIB command option, SCRIPT/VS searches all  */\n/*        of the font libraries concatenated in SCRPTFNT.             */\n/*                                                                    */\n/* ===>   The first DCFINDEX found in the concatenation must          */\n/*        accurately represent all of the font members in the         */\n/*        SCRPTFNT concatenation.                                     */\n/*                                                                    */\n/* Ref:   \"DCF: SCRIPT/VS Language Reference\", Release 4.0,           */\n/*        SH35-0070-06, P. 33.                                        */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nFONTLIB_PROCESSING: +\n  SELECT (&RDEV)\n    WHEN (PS) +\n      DO\n        ALLOC F(SCRPTFNT) DA('SYS0.SCRIPT.FONTPS') SHR REUSE\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            ISPEXEC DISPLAY PANEL(SCH0P161)\n            SET MSG = SCHP005\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n\n    WHEN (3800) +\n      DO\n        ALLOC F(SCRPTFNT) DA('SYS0.FONTLIB' 'SYS1.FONTLIB') SHR REUSE\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            ISPEXEC DISPLAY PANEL(SCH0P161)\n            SET MSG = SCHP005\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n\n    WHEN (3820 | 3812 | 3816 | 4224) +\n      DO\n        ALLOC F(SCRPTFNT) DA('SYS0.FONTLIBB' 'SYS1.FONTLIBB') SHR REUSE\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            ISPEXEC DISPLAY PANEL(SCH0P161)\n            SET MSG = SCHP005\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n\n    WHEN (4028 | AFP) +\n      DO\n        ALLOC F(SCRPTFNT) DA('SYS0.FONT300' 'SYS1.FONT300' +\n                             'SYS0.FONTLIBB' 'SYS1.FONTLIBB') SHR REUSE\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            ISPEXEC DISPLAY PANEL(SCH0P161)\n            SET MSG = SCHP005\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n  END\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* LIB:  Specify Symbol and Macro Libraries                           */\n/* ----  ----------------------------------                           */\n/*                                                                    */\n/* Pre-allocate symbol/macro libraries with a DDNAME of SCRPTLIB      */\n/* -------------------------------------------------------------      */\n/*                                                                    */\n/* Note:  An alternative method for specifying symbol and macro       */\n/*        libraries in TSO is to pre-allocate the desired libraries   */\n/*        with a DDNAME of SCRPTLIB.  If this ddname is found,        */\n/*        SCRIPT/VS searches all of the libraries linked to this      */\n/*        DDNAME.                                                     */\n/*                                                                    */\n/* 1. If user specifies a \"user macro library\", concatenate the       */\n/*    symbol and macro libraries as follows:                          */\n/*       \"USER MACRO LIBRARY\"                                         */\n/*       SYS0.SCRIPT.SCHWAB.MACLIB                                    */\n/*       SYS0.SCRIPT.MACLIB                                           */\n/*                                                                    */\n/* 2. If user does not specify a \"user macro library\", concatenate    */\n/*    symbol and macro libraries as follows:                          */\n/*       SYS0.SCRIPT.SCHWAB.MACLIB                                    */\n/*       SYS0.SCRIPT.MACLIB                                           */\n/*                                                                    */\n/* Ref:  \"DCF: SCRIPT/VS Language Reference\", Release 4.0,            */\n/*       SH35-0070-06, P. 33.                                         */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nLIB_PROCESSING: +\n  SET &USER_SCRIPT_MACLIB = &&SLB&SVAR\n  SELECT\n    WHEN (&USER_SCRIPT_MACLIB = &STR()) +\n      DO\n        ALLOC F(SCRPTLIB) DA('SYS0.SCRIPT.SCHWAB.MACLIB' +\n                             'SYS0.SCRIPT.MACLIB') SHR REUSE\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            ISPEXEC DISPLAY PANEL(SCH0P162)\n            SET MSG = SCHP006\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    OTHERWISE +\n      DO\n        DO WHILE &SYSDSN(&USER_SCRIPT_MACLIB) \u00ac= &STR(OK)\n          ISPEXEC DISPLAY MSG(SCHP000A) CURSOR(SLB&SVAR)\n          SET &RC = &LASTCC\n          SELECT\n            WHEN (&USER_SCRIPT_MACLIB = &STR()) +\n              DO\n                ALLOC F(SCRPTLIB) DA('SYS0.SCRIPT.SCHWAB.MACLIB' +\n                                     'SYS0.SCRIPT.MACLIB') SHR REUSE\n                SET &RC = &LASTCC\n                IF &RC = 0 THEN +\n                  GOTO MESSAGE_PROCESSING\n                ELSE +\n                  DO\n                    ISPEXEC DISPLAY PANEL(SCH0P162)\n                    SET MSG = SCHP006\n                    GOTO CLEANUP_AND_EXIT_CLIST\n                  END\n              END\n            WHEN (&RC > 0) +\n              DO\n                SET MSG = SCHP000\n                GOTO CLEANUP_AND_EXIT_CLIST\n              END\n          END\n        END\n        ALLOC F(SCRPTLIB) DA(&USER_SCRIPT_MACLIB +\n                             'SYS0.SCRIPT.SCHWAB.MACLIB' +\n                              'SYS0.SCRIPT.MACLIB') SHR REUSE\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            ISPEXEC DISPLAY PANEL(SCH0P162)\n            SET MSG = SCHP006\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n  END\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* MESSAGE:  Control Message Printing                                 */\n/* --------  ------------------------                                 */\n/*                                                                    */\n/* ID causes SCRIPT/VS to include the error message identifier along  */\n/* with the error message.                                            */\n/*                                                                    */\n/* TRACE causes SCRIPT/VS to list, whenever appropriate, the          */\n/* sequence of imbedded files, from the file that includes the next   */\n/* line afte the error input line, backward to the primary input      */\n/* file.                                                              */\n/*                                                                    */\n/* Message should always be specified before any other command        */\n/* option.                                                            */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nMESSAGE_PROCESSING: +\n  SET &MS1 = &&MS1&SVAR\n  IF &MS1 = T THEN +\n    SET &MESS1 =\n  ELSE +\n    SET &MESS1 = DELAY\n  SET &MS2 = &&MS2&SVAR\n  IF &MS2 = N THEN +\n    SET &MESS2 =\n  ELSE +\n    SET &MESS2 = TRACE\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* PROFILE:  Specify a Profile                                        */\n/* --------  -----------------                                        */\n/*                                                                    */\n/* Pre-allocate files containing macros with a DDNAME of SCRPTPRO     */\n/* --------------------------------------------------------------     */\n/*                                                                    */\n/* Note:  An alternative method for specifying the profile that you   */\n/*        want SCRIPT/VS to use for processing in TSO is to pre-      */\n/*        allocate the desired profile with the DDNAME of SCRPTPRO.   */\n/*                                                                    */\n/* If the user specifies a profile, then allocate their data set as   */\n/* the \"user profile\", otherwise allocate IBM's DSMPROF4 GML Starter  */\n/* Set Profile as the default profile.                                */\n/*                                                                    */\n/* Ref:   \"DCF: SCRIPT/VS Language Reference\", Release 4.0,           */\n/*        SH35-0070-06, P. 40.                                        */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nPROFILE_PROCESSING: +\n  SET &USER_PROFILE_LIBRARY = &&PRO&SVAR\n  SELECT\n    WHEN (&USER_PROFILE_LIBRARY = &STR()) +\n      DO\n        ALLOC F(SCRPTPRO) DA('SYS0.SCRIPT.MACLIB(DSMPROF4)') SHR REUSE\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            ISPEXEC DISPLAY PANEL(SCH0P163)\n            SET MSG = SCHP007\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    OTHERWISE +\n      DO\n        DO WHILE &SYSDSN(&USER_PROFILE_LIBRARY) \u00ac= &STR(OK)\n          ISPEXEC DISPLAY MSG(SCHP000A) CURSOR(PRO&SVAR)\n          SET &RC = &LASTCC\n          SELECT\n            WHEN (&USER_PROFILE_LIBRARY = &STR()) +\n              DO\n                ALLOC F(SCRPTPRO) DA('SYS0.SCRIPT.MACLIB(DSMPROF4)') +\n                      SHR REUSE\n                SET &RC = &LASTCC\n                IF &RC = 0 THEN +\n                  GOTO SEARCH_PROCESSING\n                ELSE +\n                  DO\n                    ISPEXEC DISPLAY PANEL(SCH0P163)\n                    SET MSG = SCHP007\n                    GOTO CLEANUP_AND_EXIT_CLIST\n                  END\n              END\n            WHEN (&RC > 0) +\n              DO\n                SET MSG = SCHP000\n                GOTO CLEANUP_AND_EXIT_CLIST\n              END\n          END\n        END\n        ALLOC F(SCRPTPRO) DA(&USER_PROFILE_LIBRARY) SHR REUSE\n        SET &RC = &LASTCC\n        IF &RC > 0 THEN +\n          DO\n            ISPEXEC DISPLAY PANEL(SCH0P163)\n            SET MSG = SCHP007\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n  END\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* SEARCH: Specify a Library for Imbedded or Appended Files           */\n/* ------- ------------------------------------------------           */\n/*                                                                    */\n/* If the TEXTLIB DDNAME has been allocated for the TSO session, the  */\n/* allocated libraries are searched for a member of the given name.   */\n/* The same restrictions that apply to SEARCH libraries also apply to */\n/* macro libraries.                                                   */\n/*                                                                    */\n/* This option is being included to allow a user to include an ASCII  */\n/* file that contains PostScript commands in a SCRIPT/VS file.        */\n/*                                                                    */\n/* Ref:  \"DCF: SCRIPT/VS Language Reference\", Release 4.0,            */\n/*       SH35-0070-06, P. 42, AND P. 260 (.PO/PostScript control      */\n/*       word)                                                        */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nSEARCH_PROCESSING: +\n  SET &USER_SEARCH_LIBRARY = &&PIL&SVAR\n  IF (&RDEV = PS) THEN +\n    DO\n      IF &USER_SEARCH_LIBRARY \u00ac= &STR() THEN +\n        DO\n          DO WHILE &SYSDSN(&USER_SEARCH_LIBRARY) \u00ac= &STR(OK)\n            ISPEXEC DISPLAY MSG(SCHP000A) CURSOR(PIL&SVAR)\n            SET &RC = &LASTCC\n            SELECT\n              WHEN (&USER_SEARCH_LIBRARY = &STR()) +\n                GOTO SEGLIB_PROCESSING\n              WHEN (&RC > 0) +\n                DO\n                  SET MSG = SCHP000\n                  GOTO CLEANUP_AND_EXIT_CLIST\n                END\n            END\n          END\n          ALLOC F(TEXTLIB) DA(&USER_SEARCH_LIBRARY) SHR REUSE\n          IF &LASTCC > 0 THEN +\n            DO\n              ISPEXEC DISPLAY PANEL(SCH0P164)\n              SET &MSG = SCHP008\n              GOTO CLEANUP_AND_EXIT_CLIST\n            END\n        END\n    END\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* SEGLIB: Specify a Segment Library                                  */\n/* ------- -------------------------                                  */\n/*                                                                    */\n/* Pre-allocate segment libraries with a DDNAME of SCRPTSEG           */\n/* --------------------------------------------------------           */\n/*                                                                    */\n/* Note:  An alternative method for specifying segment libraries in   */\n/*        TSO is to pre-allocate the desired libraries with a DDNAME  */\n/*        of SCRPTSEG.  When you have a DDNAME of SCRPTSEG allocated  */\n/*        the default segment library is not added to the list of     */\n/*        concatenated libaries.  The SEGLIB option is ignored for    */\n/*        line printers and PostScript printers.                      */\n/*                                                                    */\n/* 1. If user specifies a \"user page segment library\", concatenate    */\n/*    the page segment libraries as follows:                          */\n/*       \"USER_PAGE SEGMENT_LIBRARY\"                                  */\n/*       SYS0.PSEGLIB                                                 */\n/*       SYS1.PSEGLIB                                                 */\n/*                                                                    */\n/* 2. If user does not specify a \"user page segment library\",         */\n/*    concatenate the in-house and IBM-supplied page segment          */\n/*    libraries as follows:                                           */\n/*       SYS0.PSEGLIB                                                 */\n/*       SYS1.PSEGLIB                                                 */\n/*                                                                    */\n/* Ref:  \"DCF: SCRIPT/VS Language Reference\", Release 4.0,            */\n/*       SH35-0070-06, P. 42.                                         */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nSEGLIB_PROCESSING: +\n  IF (&RDEV \u00ac= TERM | &RDEV \u00ac= 3270 | &RDEV \u00ac= 1403) THEN +\n    DO\n      SET &USER_SEGMENT_LIBRARY = &&SGL&SVAR\n      SELECT\n        WHEN (&USER_SEGMENT_LIBRARY = &STR()) +\n          DO\n            ALLOC F(SCRPTSEG) DA('SYS0.PSEGLIB' 'SYS1.PSEGLIB') +\n                              SHR REUSE\n            SET &RC = &LASTCC\n            IF &RC > 0 THEN +\n              DO\n                ISPEXEC DISPLAY PANEL(SCH0P165)\n                SET MSG = SCHP009\n                GOTO CLEANUP_AND_EXIT_CLIST\n              END\n          END\n        OTHERWISE +\n          DO\n            DO WHILE &SYSDSN(&USER_SEGMENT_LIBRARY) \u00ac= &STR(OK)\n              ISPEXEC DISPLAY MSG(SCHP000A) CURSOR(SGL&SVAR)\n              SET &RC = &LASTCC\n              SELECT\n                WHEN (&USER_SEGMENT_LIBRARY = &STR()) +\n                  DO\n                    ALLOC F(SCRPTSEG) DA('SYS0.PSEGLIB' 'SYS1.PSEGLIB') +\n                                      SHR REUSE\n                    SET &RC = &LASTCC\n                    IF &RC = 0 THEN +\n                      GOTO SEPMASTR_PROCESSING\n                    ELSE +\n                      DO\n                        ISPEXEC DISPLAY PANEL(SCH0P165)\n                        SET MSG = SCHP009\n                        GOTO CLEANUP_AND_EXIT_CLIST\n                      END\n                  END\n                WHEN (&RC > 0) +\n                  DO\n                    SET MSG = SCHP000\n                    GOTO CLEANUP_AND_EXIT_CLIST\n                  END\n              END\n            END\n            ALLOC F(SCRPTSEG) DA(&USER_SEGMENT_LIBRARY +\n                                 'SYS0.PSEGLIB' 'SYS1.PSEGLIB') +\n                              SHR REUSE\n            SET &RC = &LASTCC\n            IF &RC > 0 THEN +\n              DO\n                ISPEXEC DISPLAY PANEL(SCH0P165)\n                SET MSG = SCHP009\n                GOTO CLEANUP_AND_EXIT_CLIST\n              END\n          END\n      END\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* SEPMASTR:  Specify Output Separation Masters                       */\n/* ---------  ---------------------------------                       */\n/*                                                                    */\n/* Separation masters are used in the printing process to produce     */\n/* multi-part forms or multiple-color documents.                      */\n/*                                                                    */\n/* The SEPMASTR option allows you to separate a page into multiple    */\n/* masters that can then be used in an offset printing process to     */\n/* produce color documents or as multi-part forms.  Each output       */\n/* master is produced 'n' times where 'n' is the number of masters    */\n/* selected for that page.  The 'n' masters specified with the        */\n/* SEPMASTR command option correspond to the numbers given on the     */\n/* .SM (Separation Master) control word.  The SEPMASTR command option */\n/* is specified as follows:                                           */\n/*                                                                    */\n/* SEPMASTR(n0 ... n16)     where n0 through n16 represent the        */\n/*                          specified suboptions                      */\n/*                                                                    */\n/* Ref:  \"DCF: SCRIPT/VS Language Reference\", Release 4.0,            */\n/*       SH35-0070-06, P. 43.                                         */\n/*                                                                    */\n/* SEPMASTR is processed in the )PROC section of all composed-page    */\n/* device panels.                                                     */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nSEPMASTR_PROCESSING: +\n  GOTO GDDM_PGF_PROCESSING\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* GDDM:  Graphical Data Display Manager                             */\n/* -----  ------------------------------                             */\n/*                                                                   */\n/* The first panel displayed, SCH0P110, informs the user that a      */\n/* graphics capable display device must be in use before GDDM host   */\n/* graphics can be used.                                             */\n/*                                                                   */\n/* GDDM may be used on a personal computer that is using a 3270      */\n/* emulator (e.g. Attachmate EXTRA! for Windows, OS/2 2.0 with       */\n/* Extended Services and GDDM OS/2 LINK, or Rumba with the Host      */\n/* Graphics Option).                                                 */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nGDDM_PGF_PROCESSING: +\n  SET &GDDM = &&GDDM&SVAR\n  IF &GDDM = Y THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(SCH0P110)\n      SET &RC = &LASTCC\n      SELECT (&RC)\n        WHEN (0) +\n          DO\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* The second panel displayed, SCH0P300, provides a selection panel  */\n/* to allow choices of various PGF components (ICU, ISE, VSE),       */\n/* additional IBM/OEM products, or in-house developed GDDM-based     */\n/* applications.  This option is provided only as a \"bridge\" between */\n/* DCF and GDDM.                                                     */\n/*                                                                   */\n/* Note:  The return codes from the SELECT service are -not- the     */\n/*        same as the DISPLAY service !  Check carefully before you  */\n/*        make any changes.                                          */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n            ISPEXEC SELECT PANEL(SCH0P300)\n            SET &RC = &LASTCC\n            SELECT (&RC)\n              WHEN (0:4) +\n                DO\n                  SET &PAGESEG = &&PSG&SVAR\n                  IF &PAGESEG = Y THEN +\n                    DO\n                      ISPEXEC SETMSG MSG(SCHP000B)\n                      GOTO PAGE_SEGMENT_PROCESSING\n                    END\n                END\n              WHEN (12:20) +\n                DO\n                  SET &MSG = SCHP001\n                  GOTO CLEANUP_AND_EXIT_CLIST\n                END\n            END\n          END\n        WHEN (4:8) +\n          DO\n            SET &PAGESEG = &&PSG&SVAR\n            IF &PAGESEG = Y THEN +\n              DO\n                ISPEXEC SETMSG MSG(SCHP000C)\n                GOTO PAGE_SEGMENT_PROCESSING\n              END\n          END\n        WHEN (12:20) +\n          DO\n            SET &MSG = SCHP001\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n\n\n    END\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* AFP Page Segment Creation and Conversion                          */\n/* ----------------------------------------                          */\n/*                                                                   */\n/* The third panel displayed, SCH0P120, is a locally-written panel   */\n/* which front-ends a modified version of the IBM-supplied CLIST,    */\n/* ADMUCIMT.                                                         */\n/*                                                                   */\n/* ADMUCIMT drives module ADMUCDSO allowing a user to output charts  */\n/* or GDF on a composed-page, family-4, printer.  It provides the    */\n/* SCRIPT user with a means by which to convert ICU chart and data   */\n/* components to page segments.                                      */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nPAGE_SEGMENT_PROCESSING: +\n  SET &PAGESEG = &&PSG&SVAR\n  IF &PAGESEG = Y THEN +\n    ISPEXEC SELECT CMD(%SCH0P120 &DEBUG)\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* Process \"other\" user-specified command options.                    */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nOTHER_OPTIONS_PROCESSING: +\n  SET &OSO = &STR(&&OSO&SVAR)\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* Initiate Script/VS Processing                                      */\n/* -----------------------------                                      */\n/*                                                                    */\n/* The following SCRIPT/VS messages and return codes are documented   */\n/* in the DCF \"Messages\" manual, Release 4.0 (SH35-0048-07), p. 5-6.  */\n/*                                                                    */\n/* Severity Code    Description                     Return Code       */\n/*   R              Reply required                      0             */\n/*   I              Informational                       0             */\n/*   W              Warning                             4             */\n/*   E              Error                               8             */\n/*   S              Severe Error                        12            */\n/*   T              Terminal Error                      16            */\n/*                  Incorrect parameters on             24            */\n/*                  Script command line                               */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* The variable ZFPRFC is documented in the ISPF \"Planning and        */\n/* Customizing\" manual, SC34-4257-04, topic \"Foreground and Batch     */\n/* Customizing\".  Do not set &ZFPRFC = &RC just before the CLIST      */\n/* WRITE statement below.  Otherwise, you will display messages       */\n/* generated by ISRFPA rather than use your own messages.             */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* Due to limitations within the CLIST language, a REXX EXEC will be  */\n/* called to calculate the CPU and SRM time necessary to proccess the */\n/* SCRIPT command.  The CLIST language cannot perform arithmetic op-  */\n/* erations upon the &SYSCPU and &SYSSRV built-in functions.  The     */\n/* calculated value is slightly skewed due to the execution of the    */\n/* intermediate SET statement which stores the &LASTCC value from     */\n/* the SCRIPT command execution.                                      */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* Test invocation (i.e. pseudo \"STEPLIB\") within ISPF/PDF can be     */\n/* accomplished by using the following format of the XEQ command to   */\n/* point to another version of the SCRIPT/VS interpreter:             */\n/*                                                                    */\n/* XEQ SCRIPT TASKLIB('SYS0.SCRIPT.LINKLIB') CP                       */\n/*                                                                    */\n/* XEQ is a public domain command that can be found on the Share MVS  */\n/* or CBT modifications tape.  It uses the ATTACH macro to establish  */\n/* a \"task\" library environment.                                      */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nSCRIPT_PROCESSING: +\n  SET &SCRIPT_INPUT_FILE = &ZDSQMEM\n  ISPEXEC VGET (ZSM) PROFILE\n  IF &ZSM = YES THEN +\n    ISPEXEC CONTROL DISPLAY SM START(1)\n  ELSE +\n    ISPEXEC CONTROL DISPLAY LINE START (1)\n\n  SET &CPU_BEFORE= &SYSCPU\n  SET &SRV_BEFORE = &SYSSRV\n  SCRIPT '&SCRIPT_INPUT_FILE' +\n                    M(&MESS1 ID &MESS2) &BIND &CHAR +\n                    DEVICE(&DEVT) &SPL &UPC &SEPM &PSOUT &OSO\n  SET &RC = &LASTCC\n  SET &CPU_AFTER = &SYSCPU\n  SET &SRV_AFTER = &SYSSRV\n  %SCH0P140 &CPU_AFTER &CPU_BEFORE &SRV_AFTER &SRV_BEFORE\n/*SET &ZFPRFC = &RC (Only used for debugging messages from ISRFPA...) */\n  WRITE  The SCRIPT/VS text formatter has ended with return code &RC..\n  IF &RC >= 12 THEN +\n    DO\n      SET &MSG = SCHP001\n      GOTO CLEANUP_AND_EXIT_CLIST\n    END\n\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/* ISPF BROWSE SERVICE VS. THE COMPOSITE DOCUMENT PRINTING UTILITY    */\n/* ---------------------------------------------------------------    */\n/*                                                                    */\n/* Depending upon the logical device and the options, the following   */\n/* code will allow the user to view a formatted document upon a       */\n/* supported display device.                                          */\n/*                                                                    */\n/* If a document is formatted for a line printer (e.g. 1403),         */\n/* use the ISPF BROWSE service to view the formatted document.        */\n/*                                                                    */\n/* If a document is formatted for a PostScript and the PSOUT option   */\n/* specifies \"EBCDIC\" (Note:  the default is ASCII), use the ISPF     */\n/* BROWSE service to view the generated PostScript document code.     */\n/* ASCII PostScript output will not be displayed using the BROWSE     */\n/* service.                                                           */\n/*                                                                    */\n/* If a document is formatted for a page printer, invoke the GDDM     */\n/* Composite Document Printing Utility to view the formatted          */\n/* document.                                                          */\n/*                                                                    */\n/* The BROWSE service sets a return code of 0 when PF3 (END) is       */\n/* depressed indicating a normal completion of the viewing process.   */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n\nGDDM_CDPU_PROCESSING: +\n  SELECT\n    WHEN (&RDEV = TERM | &RDEV = 3270) +\n      GOTO CLEANUP_AND_EXIT_CLIST\n    WHEN (&RDEV = 1403) +\n      DO\n        ISPEXEC BROWSE DATASET('&SCRIPT_OUTPUT_FILE(&LISTID)')\n        IF &LASTCC >0 THEN +\n          DO\n            SET MSG = SCHP000G\n            GOTO CLEANUP_AND_EXIT_CLIST\n          END\n      END\n    WHEN (&RDEV = PS) +\n      DO\n        IF &PSOUT = &STR(PSOUT(EBCDIC)) THEN +\n          DO\n            ISPEXEC BROWSE DATASET('&SCRIPT_OUTPUT_FILE(&LISTID)')\n            IF &LASTCC >0 THEN +\n              DO\n                SET MSG = SCHP000G\n                GOTO CLEANUP_AND_EXIT_CLIST\n              END\n          END\n        ELSE +\n          GOTO OUTPUT_PROCESSING\n      END\n    OTHERWISE +\n      DO\n        ISPEXEC VGET (CDPU) SHARED\n        IF &CDPU \u00ac= NO THEN +\n          DO\n            ISPEXEC CONTROL ERRORS RETURN\n            ISPEXEC SELECT CMD(%SCH0P130 +\n              '&SCRIPT_OUTPUT_FILE(&LISTID)' &DEBUG)\n            SET &RC = &LASTCC\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* NORMAL TERMINATION FROM THE COMPOSITE DOCUMENT PRINTING UTILITY ? */\n/*                                                                   */\n/* Be aware that ADM4CDUT will generate a non-zero return code if    */\n/* the document cannot be displayed.  Refer to the GDDM manual and   */\n/* the documentation supplied by IBM in CLIST \"SCH0P130\".  This      */\n/* CLIST is a GDDM-supplied CLIST that has been slightly modified    */\n/* to support allocation by data set name rather than by DDNAME.     */\n/*                                                                   */\n/* Note:  The return codes from the SELECT service are -not- the     */\n/*        same as the DISPLAY service !  Check carefully before you  */\n/*        make any changes.                                          */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n            IF &RC >4 THEN +\n              ISPEXEC SETMSG MSG(SCHP000H)\n          END\n      END\n  END\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* SCRIPT Output File Foreground Print Processing                    */\n/* ----------------------------------------------                    */\n/*                                                                   */\n/* If the END command is entered, the SCRIPT/VS output file is kept  */\n/* without printing (END command RC=8).                              */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* LISTDSI is used to obtain data set characteristics of the SCRIPT  */\n/* output data set (FILE) after SCRIPT processing has completed.     */\n/* The data set attributes will be displayed along with the SRM and  */\n/* CPU processing times.                                             */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nOUTPUT_PROCESSING: +\n  SET &SCRPTIN = &SCRIPT_INPUT_FILE\n  SET &SCRPTOUT = &SCRIPT_OUTPUT_FILE(&LISTID)\n\n  LISTDSI '&SCRPTOUT'\n  SET &UNIT = &SYSUNIT\n  SET &VOL = &SYSVOLUME\n  SET &DSORG = &SYSDSORG\n  SET &RECFM = &SYSRECFM\n  SET &LRECL = &SYSLRECL\n  SET &BLKSIZE = &SYSBLKSIZE\n  SET &SPACE = &SYSUNITS\n  SET &ALLOC = &SYSALLOC\n  SET &USED = &SYSUSED\n\n  ISPEXEC DISPLAY PANEL(SCH0P140)\n  SET &RC = &LASTCC\n  SELECT (&RC)\n    WHEN (0) +\n      DO\n        SET &PAGE_SEPARATOR = &&SEP&SVAR\n        SELECT (&PRINTOPT)\n          WHEN (PK) +\n            DO\n              SYSCALL OUTDES_PRINTDS_SUBROUTINE &PAGE_SEPARATOR\n              SET &RC= &LASTCC\n              IF &RC = 0 THEN +\n                SET &MSG = SCHP000I\n              ELSE +\n                SET &MSG = SCHP000M\n              GOTO CLEANUP_AND_EXIT_CLIST\n            END\n          WHEN (PD) +\n            DO\n              SYSCALL OUTDES_PRINTDS_SUBROUTINE &PAGE_SEPARATOR\n              SET &RC= &LASTCC\n              IF &RC = 0 THEN +\n                DO\n                  DELETE '&SCRIPT_OUTPUT_FILE'\n                  SET &MSG = SCHP000J\n                END\n              ELSE +\n                SET &MSG = SCHP000M\n              GOTO CLEANUP_AND_EXIT_CLIST\n            END\n          WHEN (K) +\n            DO\n              SET &MSG = SCHP000K\n              GOTO CLEANUP_AND_EXIT_CLIST\n            END\n          WHEN (D) +\n            DO\n              DELETE '&SCRIPT_OUTPUT_FILE'\n              SET &MSG = SCHP000L\n              GOTO CLEANUP_AND_EXIT_CLIST\n            END\n        END\n      END\n    WHEN (4:8) +\n      DO\n        SET &MSG = SCHP000M\n        GOTO CLEANUP_AND_EXIT_CLIST\n      END\n    WHEN (12:20) +\n      DO\n        SET &MSG = SCHP000N\n        GOTO CLEANUP_AND_EXIT_CLIST\n      END\n  END\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* CONSTRUCT OUTPUT DESCRIPTORS FOR USE IN SEPARATOR PAGE FORMATTING */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* The output descriptor \"DCFOUDES\" has each of its keywords in the  */\n/* the same order as the keywords appear in the body of panel        */\n/* SCH0P150.  &NRSTR is used with OUTDES to prevent errors that can  */\n/* arise if any of the text entered on SCH0P150 contains an amper-   */\n/* sand.                                                             */\n/*                                                                   */\n/* Return Codes for the OUTDES Command                               */\n/* -----------------------------------                               */\n/*                                                                   */\n/* The return codes are:                                             */\n/*                                                                   */\n/* RC = 0  - Processing successful.                                  */\n/* RC = 12 - The installation exit requested termination.            */\n/* RC = 16 - Processing unsuccessful.                                */\n/*                                                                   */\n/* Return Codes for the PRINTDS Command                              */\n/* ------------------------------------                              */\n/*                                                                   */\n/* The return codes are:                                             */\n/*                                                                   */\n/* RC = 0  - Processing successful.                                  */\n/* RC = 4  - Processing completed, but a warning message has been    */\n/*           issued.                                                 */\n/* RC = 8  - The input, output, or sysout data set could not be      */\n/*           used.                                                   */\n/* RC = 12 - An error occurred during the processing of the PRINTDS  */\n/*           command.                                                */\n/* RC = 16 - The installation exit requested termination of the      */\n/*           PRINTDS command.                                        */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nOUTDES_PRINTDS_SUBROUTINE: PROC 1 PAGE_SEPARATOR\n  ISPEXEC VGET (CPYCOUNT,FORMDEF,FORMNAME,PAGEDEF,CLASS,XWTR,+\n                TITLE,DESTID,NAME,ROOM,BLDG,DEPT,+\n                ADDR1,ADDR2,ADDR3,ADDR4,PRTMSG) ASIS\n\n  ISPEXEC CONTROL ERRORS RETURN\n  SET &ERRORSW = OFF\n\n  IF &PRTMSG = &STR() THEN +\n    SET &PRTMSG = &STR(&SYSXSMF..&SYSUID)\n\n  SELECT (&PAGE_SEPARATOR)\n    WHEN (N) +\n      DO\n        ISPEXEC CONTROL NONDISPL ENTER\n        ISPEXEC DISPLAY PANEL(SCH0P150)\n        SET &RC = &LASTCC\n      END\n    OTHERWISE +\n      DO\n        ISPEXEC DISPLAY PANEL(SCH0P150)\n        SET &RC = &LASTCC\n      END\n  END\n\n  IF &RC = 0 THEN +\n    DO WHILE (&OUTDES_PRINTDS_RC \u00ac= 0)\n      CONTROL ASIS MSG\n\n      ERROR +\n        DO\n          SET &OUTDES_PRINTDS_RC = &LASTCC\n          IF &OUTDES_PRINTDS_RC > 0 THEN +\n            SET &ERRORSW = ON\n          RETURN\n        END\n      &NRSTR(OUTDES DCFOUDES REUSE NODEFAULT +\n             &SCHCOPY +\n             &SCHFORMD +\n             &SCHFORMS +\n             &SCHPAGED +\n             &SCHCLASS +\n             &SCHXWTR +\n             &SCHTITLE +\n             &SCHDEST +\n             &SCHNAME +\n             &SCHROOM +\n             &SCHBLDG +\n             &SCHDEPT +\n             &SCHADDR +\n             &SCHNOTFY)\n\n      PRINTDS DSN('&SCRIPT_OUTPUT_FILE(&LISTID)') OUTDES(DCFOUDES)\n      ERROR OFF\n\n      IF &ERRORSW = ON THEN +\n        DO\n          ISPEXEC DISPLAY CURSOR(CPYCOUNT) MSG(SCHP000O)\n          SET &RC = &LASTCC\n          IF &RC >= 8 THEN +\n            DO\n              CONTROL CAPS\n              RETURN CODE(&RC)\n            END\n          ELSE +\n            SET &ERRORSW = OFF\n        END\n      ELSE +\n        DO\n          CONTROL CAPS NOMSG\n          RETURN CODE(&RC)\n        END\n    END\n  RETURN CODE(&RC)\nEND\n\n/* ----------------------------------------------------------------- */\n/* EXIT CLIST with appropriate message...                            */\n/* ----------------------------------------------------------------- */\n\nCLEANUP_AND_EXIT_CLIST: +\n  CONTROL NOMSG\n  FREE FI(SCRPTFIL,SCRPTFNT,SCRPTLIB,SCRPTPRO,SCRPTSEG,TEXTLIB)\n  IF &MSG = &STR() THEN +\n    SET &MSG = SCHP000\n  ISPEXEC VPUT (ZFPRFC) SHARED\n  ISPEXEC SETMSG MSG(&MSG)\n  END\n\n./ ADD NAME=SCH0P120                               13AUG93 18.34.21\nPROC 0 DEBUG\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Rewritten 14Oct92, William J. Smith, OSVS Technical Services      */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* The following CLIST is a modified version of ADMUCIMT as shipped  */\n/* by IBM with GDDM.                                                 */\n/*                                                                   */\n/* Ref:  \"GDDM Installation and System Management\", GC33-0321-04,    */\n/*       Appendix O, \"Listings of user CLISTs and JCL\", pages 383-   */\n/*       386.                                                        */\n/*                                                                   */\n/* Rev:  GDDM Version 2.3                                            */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Debug Code                                                        */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nISPEXEC VGET (DEBUG) ASIS\nIF &DEBUG = DEBUG THEN +\n  CONTROL MAIN MSG LIST CONLIST SYMLIST\nELSE +\n  CONTROL MAIN NOMSG NOLIST NOCONLIST NOSYMLIST\n\n/*-------------------------------------------------------------------*/\n\nISPEXEC VGET (CHDNAME,CHFNAME,ICUDATA,ICUFORM,CHWIDTH,CHDEPTH) SHARED\n\nISPEXEC CONTROL ERRORS RETURN\nSET &ERRORSW = OFF\n\nISPEXEC DISPLAY PANEL(SCH0P120)\nSET &RC= &LASTCC\n\n/*-------------------------------------------------------------------*/\n/*                                                                   */\n/* Verify that the FORMAT and DATA ICU component data set names      */\n/* specified by the user on the conversion panel exist.              */\n/*                                                                   */\n/* If either of the data set names do not exist, redisplay the       */\n/* panel with an appropriate error message.                          */\n/*                                                                   */\n/*-------------------------------------------------------------------*/\n\nDO WHILE (&RC = 0)\n\n  DO WHILE &SYSDSN(&CHDNAME) \u00ac= &STR(OK)\n    ISPEXEC DISPLAY MSG(SCHP000A) CURSOR(CHDNAME)\n    SET &RC = &LASTCC\n    IF &RC > 0 THEN +\n      EXIT\n  END\n\n  DO WHILE &SYSDSN(&CHFNAME) \u00ac= &STR(OK)\n    ISPEXEC DISPLAY MSG(SCHP000A) CURSOR(CHFNAME)\n    SET &RC = &LASTCC\n    IF &RC > 0 THEN +\n      EXIT\n  END\n\n  DO WHILE &SYSDSN(&CHDNAME(&ICUDATA)) \u00ac= &STR(OK)\n    ISPEXEC DISPLAY MSG(SCHP000A) CURSOR(ICUDATA)\n    SET &RC = &LASTCC\n    IF &RC > 0 THEN +\n      EXIT\n  END\n\n  DO WHILE &SYSDSN(&CHFNAME(&ICUFORM)) \u00ac= &STR(OK)\n    ISPEXEC DISPLAY MSG(SCHP000A) CURSOR(ICUFORM)\n    SET &RC = &LASTCC\n    IF &RC > 0 THEN +\n      EXIT\n  END\n\n/*-------------------------------------------------------------------*/\n/*                                                                   */\n/* Allocate both of the user's libraries only if their existence is  */\n/* assured.  Don't waste processing time allocating one data set     */\n/* only to find that the other doesn't exist.                        */\n/*                                                                   */\n/*-------------------------------------------------------------------*/\n\n  ALLOC F(ADMCDATA) DA(&CHDNAME) SHR REUSE\n  SET &RC = &LASTCC\n  IF &RC > 0 THEN +\n    DO\n      ISPEXEC SETMSG MSG(SCHP000D)\n      ISPEXEC DISPLAY PANEL(SCH0P166)\n    END\n\n  ALLOC F(ADMCFORM) DA(&CHFNAME) SHR REUSE\n  SET &RC = &LASTCC\n  IF &RC > 0 THEN +\n    DO\n      ISPEXEC SETMSG MSG(SCHP000D)\n      ISPEXEC DISPLAY PANEL(SCH0P166)\n    END\n\n/*-------------------------------------------------------------------*/\n/*                                                                   */\n/* Allocate the IBM-supplied GDDM symbol sets if the allocation of   */\n/* requested user's GDDM data sets was successful.                   */\n/*                                                                   */\n/*-------------------------------------------------------------------*/\n\n  ALLOC F(ADMSYMBL) DA('SYS0.GDDM.GDDMSYM') SHR REUSE\n\n/*-------------------------------------------------------------------*/\n/*                                                                   */\n/* The following parameters are in order of appearance as passed to  */\n/* ADMUCDSO.  Options DT and DS have been changed from the values    */\n/* specified within the IBM-supplied version of ADMUCIMT.            */\n/*                                                                   */\n/* The use of an asterisk in parameter F will cause a file of the    */\n/* following format to be generated:  userid.&CHARTDATA.ADMIMAGE     */\n/*                                                                   */\n/*-------------------------------------------------------------------*/\n\n                                        /* ------------------------- */\n  SET &CHARTDATA = &ICUDATA             /* Chart & Format Name as    */\n  SET &FORMAT = &ICUFORM                /*   passed by the user for  */\n                                        /*   GDDM conversion.        */\n                                        /* ------------------------- */\n  SET &CD = &STR(&CHARTDATA)            /* ICU Chart Data Name       */\n  SET &CF = &STR(&FORMAT)               /* ICU Chart Format Name     */\n  SET &DP = 6                           /* Chart Display Option      */\n  SET &DT = IMG240X                     /* 3800-3/3820 device token  */\n  SET &DS = 1                           /* Data stream type = PSEG   */\n  SET &SP = 0                           /* Internal data in spill    */\n  SET &N  = 8                           /* No. of swathes for image  */\n  SET &W  = &CHWIDTH                    /* Image Width (0) Tenths/In */\n  SET &D  = &CHDEPTH                    /* Image Depth  \"  \"     /\"  */\n  SET &U  = 0                           /* Units tenths of an inch   */\n  SET &FO = 1                           /* Image Format 1 is for PSF */\n  SET &F  = &STR(&CHARTDATA..*)         /* Output File Identifier    */\n                                        /* ------------------------- */\n\n  CONTROL MSG\n  ERROR +\n    DO\n      SET &ADMUCDSO_RC = &LASTCC\n      IF &ADMUCDSO_RC > 0 THEN +\n        SET &ERRORSW = ON\n      RETURN\n    END\n\n  CALL 'SYS2.GDDM.LINKLIB(ADMUCDSO)' +\n       '&CD &CF &DP 4 &DT (5 &DS 6 &SP 7 &N 8 &W &D &U 9 &FO ) ( &F )'\n\n  ERROR OFF\n\n  IF &ERRORSW = ON THEN +\n    DO\n      ISPEXEC DISPLAY CURSOR(CHDNAME) MSG(SCHP000E)\n      SET &RC = &LASTCC\n      IF &RC >0 THEN +\n        EXIT\n      ELSE +\n        SET &ERRORSW = OFF\n    END\n  ELSE +\n    DO\n      CONTROL NOMSG\n      ISPEXEC DISPLAY CURSOR(CHDNAME) MSG(SCHP000F)\n      SET &RC = &LASTCC\n      IF &RC >0 THEN +\n        EXIT\n    END\n\nEND\n./ ADD NAME=SCH0P130                               13AUG93 18.34.21\n PROC 1 CDPUDATA DEBUG\n\n/**********************************************************************/\n/*                                                                    */\n/*  GDDM/MVS (2.2)                                                    */\n/*  5665-356   (C) COPYRIGHT IBM CORP.  1979, 1988                    */\n/*  ALL RIGHTS RESERVED                                               */\n/*  LICENSED MATERIAL - PROGRAM PROPERTY OF IBM                       */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/*  Updated 12Sep89, William Smith, Charles Schwab Technical Services */\n/*    . Ref:  \"GDDM 2.2 Base Programming Reference Volume 2\",         */\n/*      SC33-0332-1, p. 57-58.                                        */\n/*    . The original source for this CLIST was the IBM-supplied       */\n/*      version in the GDDMSAM library (ADMUBCDT).                    */\n/*    . Eliminated the requirement for external allocation of an OS   */\n/*      DDNAME to a data set to be browsed.                           */\n/*    . This change allows a data set name to be specified rather     */\n/*      than a DDNAME as the documentation indicates below.           */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* PROGRAM NAME - ADMUBCDT CLIST                                      */\n/*                                                                    */\n/* DESCRIPTIVE NAME - Browse Composite Document files on a terminal.  */\n/*                                                                    */\n/* FUNCTION - To browse LIST38xx, PSEG38xx, OVLY38xx, LIST4250,       */\n/*            PSEG4250, OVLY4250, LISTAPA, LISTCDP and ADMIMAGE       */\n/*            files on a terminal.                                    */\n/*                                                                    */\n/* ENTRY CONDITIONS - This CLIST is invoked with CDFILE assumed to    */\n/*                    be the DDNAME of the Composed Document file     */\n/*                                                                    */\n/* EXIT-NORMAL RETURN CODES -                                         */\n/*                                                                    */\n/*     0   When the file has been displayed correctly                 */\n/*                                                                    */\n/* EXIT-ERROR RETURN CODES -                                          */\n/*                                                                    */\n/*     Any return code other than 0 would indicate an error           */\n/*     which will be explained in an accompanying message.            */\n/*                                                                    */\n/* NOTES - None                                                       */\n/*                                                                    */\n/**********************************************************************/\n\n/*-------------------------------------------------------------------*/\n/* Debug Code                                                        */\n/*-------------------------------------------------------------------*/\n\n ISPEXEC VGET (DEBUG) ASIS\n IF &DEBUG = DEBUG THEN +\n   CONTROL MAIN MSG LIST CONLIST SYMLIST\n ELSE +\n   CONTROL MAIN NOMSG NOLIST NOCONLIST NOSYMLIST\n\n/* ----------------------------------------------------------------- */\n/* Set default parameters for ADM4CDUT                               */\n/* ----------------------------------------------------------------- */\n\n SET &COPIES = 1                   /* Number of copies               */\n SET &DUPLEX = 1                   /* 1 = Simplex                    */\n                                   /* 2 = Normal Duplex              */\n                                   /* 3 = Tumble Duplex              */\n SET &PROCOPTS =                   /* Null Procopts                  */\n SET &DEVTOK = &STR(*)             /* Device Token                   */\n SET &FAMILY = 1                   /* Family                         */\n SET &NAMELIST =                   /* Null Namelist                  */\n\n SET &CDFILE = CDFILE              /* DDNAME of allocated CDPU file  */\n\n ALLOC F(&CDFILE) DA(&CDPUDATA) SHR REUSE\n\n/* ----------------------------------------------------------------- */\n/* Start the GDDM Composite Document Print Utility                   */\n/* ----------------------------------------------------------------- */\n\n CALL 'SYS2.GDDM.LINKLIB(ADM4CDUT)' +\n     '(&CDFILE)(&COPIES &DUPLEX)(&NAMELIST)(&PROCOPTS) +\n      (&DEVTOK)(&FAMILY)'\n FREE F(CDFILE)\n EXIT\n./ ADD NAME=SCH0P140                               13AUG93 18.34.21\n/* ----------------------------- REXX ------------------------------ */\n/*                                                                   */\n/* Written 29Oct92, Willliam J. Smith, OSVS Technical Services       */\n/*                                                                   */\n/* The following REXX EXEC was written to overcome an architectural  */\n/* shortcoming in the CLIST language which doesn't allow arithmetic  */\n/* operations on the &SYSCPU and &SYSSRV builtin functions.          */\n/*                                                                   */\n/* This EXEC will calculate the CPU and Service Units time consumed  */\n/* during the execution of the SCRIPT TSO command processor while    */\n/* formatting a document.                                            */\n/*                                                                   */\n/* The results of the operations are VPUT in the SHARED pool and are */\n/* displayed on SCH0P140 in fields &C and &S on the panel.           */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\narg cpu_after cpu_before srv_after srv_before\ndcfcpu = cpu_after - cpu_before\ndcfsrv = srv_after - srv_before\naddress ispexec 'VPUT (DCFCPU DCFSRV) SHARED'\n./ ADD NAME=SCRIPTIT                               13AUG93 18.34.21\nISREDIT MACRO (SKILL CDPU DEBUG) PROCESS\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* \"SCRIPTIT\" ISPF EDIT MACRO                                        */\n/*                                                                   */\n/*  - Updated 18Dec92, William Smith, Charles Schwab & Co., Inc.     */\n/*    . With the installation of APAR PN21493 and its superceding    */\n/*      PTF UN29299, IBM formally supports use of the Core Inter-    */\n/*      change Fonts by Script/VS with the AFPxxxx logical device    */\n/*      family.                                                      */\n/*    . This application has been changed to use device AFP rather   */\n/*      than device 3820;  SCRIPTIT will have a \"virtual\" device     */\n/*      independence across multiple printer resolutions using the   */\n/*      scalable Core Interchange Font technology.                   */\n/*    . Corrected the logic by which SKILL and CDPU (both are posi-  */\n/*      tional NOT keyword parameters !) to properly handle the case */\n/*      where SKILL was specified as something other than A or B and */\n/*      CDPU was specified as something other than YES or NO.        */\n/*                                                                   */\n/*  - Updated 19Sep92, William Smith, Charles Schwab & Co., Inc.     */\n/*    . Updated to support a complete re-write of the DCF Script/VS  */\n/*      dialog.  Virtually every panel was changed for uniformity,   */\n/*      consistency, and correct mode of operation.                  */\n/*    . Major new function was added in CLIST SCH0P110 to exploit    */\n/*      MVS/ESA 4.2.2, JES2/4.2, PSF/2.1, DCF Script/VS 1.4.0,       */\n/*      and TSO/E 2.3.1.                                             */\n/*                                                                   */\n/*  - Updated 12Sep90, William Smith, Charles Schwab & Co., Inc.     */\n/*    . Rewritten - corrected use of all set statements to use       */\n/*      variables that match the .ZVARS parameters in the 3820       */\n/*      panel SCHP3820.                                              */\n/*    . Added a macro parameter which allows the user to chose       */\n/*      skill level (beginner or advanced).                          */\n/*    . Added a macro parameter which allows the user to invoke      */\n/*      GDDM's \"CDPU\" to browse DCF output on a graphics terminal.   */\n/*                                                                   */\n/*  - Updated 11Sep90, William Smith, Charles Schwab & Co., Inc.     */\n/*    . Original author unknown; written around 1987 (?).            */\n/*    . Substantially updated and organized for ease of maintenance. */\n/*    . This EDIT macro provides the DCF Script/VS user a means      */\n/*      by which to format the data set currently being edited for   */\n/*      output processing on a 3820.                                 */\n/*    . The macro drive the in-house developed DCF Script/VS         */\n/*      foreground ISPF dialog.                                      */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nIF &DEBUG = DEBUG THEN +\n  CONTROL MSG FLUSH CONLIST SYMLIST LIST\nELSE +\n  CONTROL PROMPT MSG NOFLUSH NOCONLIST NOSYMLIST\n\nISREDIT (STATUS) = USER_STATE          /* Save state of EDIT VARS    */\nISREDIT SAVE                           /* Save data set being edited */\nISREDIT (ZDS) = DATASET                /* Get name of in-use dsname  */\nISREDIT (ZMEM) = MEMBER                /* Get in-use member name     */\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Provide a means to specify the level of expertise for fast-path   */\n/* (beginner) or experienced (advanced) user of Script/VS.           */\n/*                                                                   */\n/* Any positional parameter other than B or a NULL value will force  */\n/* use of ADVANCED mode of the S.14 device-specific processing       */\n/* panel (SCHPAFP/SVAR=9/logical device=AFPA).                       */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nSELECT (&SKILL)\n  WHEN (&STR() OR B) +\n    SET &SKILL = B\n  OTHERWISE +\n    SET &SKILL = A\nEND\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* For the AFP user who has a graphics capable display device,       */\n/* provide a parameter that allows the user to format a document     */\n/* that is being edited and view it \"WYSIWYG\" on the terminal.       */\n/*                                                                   */\n/* Any positional parameter other than NO or a NULL value will force */\n/* a WYSWIG display of the document upon the terminal.               */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nSELECT (&CDPU)\n  WHEN (&STR() OR NO) +\n    SET &CDPU = NO\n  OTHERWISE +\n    SET &CDPU = YES\nEND\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Refer to the ISPF and ISPF/PDF Planning and Customization Guide   */\n/* under topic \"Foreground and Batch Customizing\" for details on     */\n/* the variables associated with the use of ISRFPR.                  */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nSET &PRJ1    =                         /* Explicitly req'd by ISRFPR */\nSET &LIB1    =                         /* \"          \"     \"  \"      */\nSET &TYP1    =                         /* \"          \"     \"  \"      */\nSET &ZORG    = PO                      /* Input data set organizat'n */\nSET &ZDSQ    = &ZDS                    /* Used by ISRFPR             */\nSET &ZDSQMEM = &ZDSQ(&ZMEM)            /* Explicitly req'd by ISRFPR */\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Refer to the \".ZVARS\" parameter in the )INIT section of SCHP3820  */\n/* and CLIST SCH0P110 to obtain details on the following variables   */\n/* and their usage.                                                  */\n/*                                                                   */\n/* With additional logic changes, it would be very easy to allow the */\n/* user to specify the output device type.  The CLIST would then set */\n/* default values for each of the variables and invoke DCF Script/VS */\n/* processing accordingly.  For example:  SCRIPTIT 3816 A            */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nSET &SVAR    = 9                       /* Output device type setting */\nSET &RDEV    = AFP                     /* \"      \"      \"    is AFP  */\n\n\nSET &BDO9    =                         /* BIND odd-page offset       */\nSET &BDE9    =                         /* BIND even-page offset      */\nSET &SEP9    = Y                       /* Change output separators   */\nSET &CH19    =                         /* CHARS parameter # 1        */\nSET &CH29    =                         /* \"     \"         # 2        */\nSET &CH39    =                         /* \"     \"         # 3        */\nSET &CH49    =                         /* \"     \"         # 4        */\nSET &DUP9    = N                       /* Duplex output = NO         */\nSET &MS19    = T                       /* Messages 1 = Terminal      */\nSET &MS29    = N                       /* Messages 2 = No trace      */\nSET &ROT9    =                         /* Page size alternatives     */\nSET &SPL9    = N                       /* Spelling check = NO        */\nSET &UPC9    = N                       /* Upper case only = NO       */\nSET &GDDM9   = N                       /* Invoke GDDM graphics = NO  */\nSET &PSG9    = N                       /* Create page segments = NO  */\nSET &SPM9    =                         /* Separation master numbers  */\nSET &SGL9    =                         /* Page segment lib dsname    */\nSET &PRO9    =                         /* Profile data set name      */\nSET &SLB9    =                         /* Script MACLIB dsname       */\nSET &OSO9    =                         /* Other SCRIPT options       */\n\nISPEXEC VPUT (PRJ1,LIB1,TYP1,ZORG,ZDS,ZDSQ,ZDSQMEM,ZMEM,+\n              SVAR,RDEV,SKILL,+\n              BDO9,BDE9,SEP9,CH19,CH29,CH39,CH49,+\n              DUP9,MS19,MS29,ROT9,SPL9,UPC9,GDDM9,+\n              PSG9,SPM9,SGL9,PRO9,SLB9,OSO9,+\n              CDPU,DEBUG) SHARED\n\nISPEXEC LIBDEF ISPMLIB DATASET ID('SYS0.SCRIPT.MLIB')\nISPEXEC LIBDEF ISPPLIB DATASET ID('SYS0.SCRIPT.PLIB')\nALTLIB  ACT APPLICATION(CLIST) DATASET('SYS0.SCRIPT.CLIST')\n\n%SCH0P110\n\nISPEXEC LIBDEF ISPMLIB DATASET\nISPEXEC LIBDEF ISPPLIB DATASET\nALTLIB  DEACT APPLICATION(CLIST)\n\nISREDIT USER_STATE = (STATUS)\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLIST2": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x00\\xc4\\x00\\xc4\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 196, "newlines": 196, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=CALENDAR                               13AUG93 18.34.22\n/* Calendar: REXX EXEC to display a calendar in an ISPF Dynamic Area */\n\n/* trace results */\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Ref:  \"Enterprise Systems Journal\", November, 1992, article       */\n/*       \"Dynamic Areas in ISPF Panels\", by Rao N. Arimilli, p. 78.  */\n/*                                                                   */\n/* 07Jul93, William Smith, Charles Schwab & Co., Inc.                */\n/*                                                                   */\n/* With corrections by William J. Smith, Charles Schwab & Co., Inc.  */\n/* 101 Montgomery Street, 5th Floor, San Francisco, CA  94104-4122,  */\n/* (415) 627-7607.                                                   */\n/*                                                                   */\n/* - Original listing of working source code obtained from Howard M. */\n/*   Dean, American President Systems, Corporate Data Center,        */\n/*   Alameda, CA (510) 748-8031.                                     */\n/*                                                                   */\n/* The REXX EXEC builds a variable OUTMONTH, which consists of a     */\n/* concatenation of variables WEEKHDR1, WEEKHDR2, WEEk.1, WEEK.2 ... */\n/* WEEK.6.  It stores the 168-byte character string and the date for */\n/* which the calendar was built in the user profile pool.  The main  */\n/* logic of the EXEC is to compute the day of the week for the first */\n/* day of the month and build a character string for the calendar.   */\n/*                                                                   */\n/* The REXX built-in function for day-of-week was deliberately not   */\n/* used in order that the EXEC may be easily modified to build the   */\n/* calendar for any date, not only the system date.  A reference     */\n/* date of January 1, 1989 is used for computing the day-of-week.    */\n/* The calendar string consists of two header lines and up to six    */\n/* week lines.                                                       */\n/*                                                                   */\n/* The EXEC first determines the number of elapsed days from January */\n/* 1, 1989 to the current date.  Adjustments are made for any leap   */\n/* years between the two dates.  The day-of-week for the current     */\n/* date is then computed because the reference day, January 1, 1989, */\n/* is a Sunday.  The numerical code for the day-of-week used is 1    */\n/* for Sunday, 2 for Monday, ... 7 for Saturday.  After all of the   */\n/* necessary computations, the DAYOFWK variable will have the        */\n/* numeric code for the day-of-week of the first day of the current  */\n/* month.                                                            */\n/*                                                                   */\n/* The EXEC builds one week frame at a time starting with the first  */\n/* of the month.  It builds a string of attribute characters and     */\n/* dates.  The attribute character used is of low intensity for all  */\n/* days in the except the current date, which would be in reverse    */\n/* video for highlighting purposes.  Depending on the number of days */\n/* in the month, there can be up to six week frames in the month.    */\n/*                                                                   */\n/* The \"flag\" variable in the EXEC is used to suppress the high-     */\n/* lighting of the current date.  If this variable is set to any     */\n/* value other than \"Y\", the EXEC will not highlight the current     */\n/* date.  This would be useful if this EXEC is modified to display   */\n/* any other month's calendar.                                       */\n/*                                                                   */\n/* All week frames along with month headers are concatenated into    */\n/* one single variable:  OUTMONTH.  This variable, along with the    */\n/* current date called OUTDATE, is stored in the user profile.  The  */\n/* OUTDATE is stored in the YY/MM/DD format to be able to compare    */\n/* directly with the ISPF dialog variable &ZDATE.                    */\n/*                                                                   */\n/* The dynamic are is defined as one continuous variable of 168      */\n/* bytes.  Since the calendar variables are stored in the user       */\n/* profile, the values are automatically retrieved when the panel is */\n/* displayed.  The first 21 bytes of OUTMONTH are placed in the      */\n/* first line of the dynamic are, the next 21 bytes are placed in    */\n/* the second line and so on until the last 21 bytes are placed in   */\n/* the eighth line.                                                  */\n/*                                                                   */\n/* There is no need to run the EXEC every time the main menu is      */\n/* displayed.  The panel may be displayed several times a day        */\n/* whereas the calendar needs to be built only once a day.  So, the  */\n/* CALENDAR variable is built only when the systm date is different  */\n/* from the date for which the calendar was previously built.        */\n/*                                                                   */\n/* An invisible option is added to the main menu, which is CALENDAR. */\n/* This option executes the REXX EXEC CALENDAR.  When the system     */\n/* date changes, the panel will simulate the CALENDAR option forcing */\n/* the execution of the EXEC.  This is done by setting the &ZCMD     */\n/* field to CALENDAR.  Then the .RESP field is set to ENTER.  This   */\n/* will have the effect of the user entering CALENDAR in the option  */\n/* field and hitting the ENTER key.  Any actual command entered in   */\n/* the command line should be reentered during this process.         */\n/*                                                                   */\n/* Warning:  Proper care should be taken while implementing this     */\n/* particular change to the )INIT section because of the potential   */\n/* for the panel to go into an infinite loop.  The user must make    */\n/* sure the TSO session save the profile variables as they are       */\n/* updated.  If, for some reason, the CALENDAR variable are not      */\n/* saved in the user profile, the ISPF main menu will hang, issuing  */\n/* the CALENDAR command repeatedly expecting the OUTDATE to be the   */\n/* same as &ZDATE.                                                   */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\ncurdate = date(standard)                /* Current date              */\ncurccyy = substr(curdate,1,4)           /* Current yyyy              */\ncurmm   = substr(curdate,5,2)           /* Current mm                */\ncurdd   = '01'                          /* Start with day 1          */\nflag    = 'Y'                           /* Highlight current day     */\n\nweekhdr1 = date(Month)                  /* Month name                */\nyear     = date(standard)               /* Standard Date             */\nyear     = substr(year,1,4)             /* Extract YYYY from STD     */\nweekhdr1 = weekhdr1 year                /* String month and year     */\nweekhdr1 = center(weekhdr1,20)          /* Center month and year     */\nweekhdr1 = '`' || weekhdr1              /* Add attribute char        */\nweekhdr2 = '\u00ddSu Mo Tu We Th Fr Sa'      /* Week names                */\n\n                           /* Total number of days before each month */\ndays     = '000031059090120151181212243273304334'\nbaseccyy = 1989                         /* Reference year            */\n\nnoofyrs  = curccyy - baseccyy           /* No. of years since 1989   */\ndays1    = noofyrs * 365                /* No. of days since 1989    */\nleapdays = noofyrs % 4                  /* Leap years in between     */\n\npos      = curmm * 3 - 2\na        = substr(days,pos,3)           /* Days in yr until last mon */\nddd      = a + curdd                    /* Days in yr until today    */\nleapflag = curccyy - (curccyy%4)*4      /* If this year is leap      */\n\nIf (leapflag = 0) & (curmm > 2) then    /*  add one more day if      */\n  ddd = ddd + 1                         /*  leap year and past Feb   */\nddd      = leapdays + days1 + ddd       /* Days from 1989/01/01      */\ndayofwk  = ddd // 7\nIf dayofwk = 0 then\n  dayofwk = 7                           /* Adjust Sat. day of week   */\ncurdd    =  substr(curdate,7,2)         /* Todays DD                 */\n\n/* Compute the number of days in the month */\nSelect\n  When ((curmm = 1) | (curmm = 3) | (curmm = 5) | (curmm = 7) |,\n        (curmm = 8) | (curmm = 10) | (curmm = 12)) then\n    lastdd = 31\n  When ((curmm = 4) | (curmm = 6) | (curmm = 9) | (curmm = 11)) | then\n    lastdd = 30\nOtherwise\n  If (leapflag = 0) then\n    lastdd = 29\n  Else\n    lastdd = 28\nEnd\n\n                                        /*                           */\nweek.6 = ''                             /* Set last week to nulls    */\ndd     = 1                              /* Beginning of the month    */\nweek   = ''\nline   = 1                              /* Week # 1                  */\npos    = 1                              /* Day  # 1                  */\nattr   = '~'                            /* Attribute character       */\n\nDo while (line < 7)                     /* Do for all 6 possible wks */\n  Do while (pos < 8)                    /* Do for all 7 days in a wk */\n    If (line = 1) & (pos < dayofwk) then\n      Do\n        week = week || attr || '  '     /* Build character string    */\n        pos  = pos + 1\n      End\n    Else\n      Do\n        If ((curdd = dd) & (flag = 'Y')) then\n          Attr = '$'\n        Else\n          Attr = '~'\n        If (length(dd) = 1) then\n          dd = ' ' || dd\n        week = week || attr || dd\n        dd = dd + 1\n        If (dd > lastdd) then\n          pos = 99                      /* Quit columns loop         */\n        Else\n          pos = pos + 1\n      End\n  End\n                                        /* 30 bytes w/o an ATTR char */\n  week = week || '~                              '\n  week = substr(week,1,21)              /* Extract 21 bytes          */\n  week.line = week                      /* A week line is ready      */\n  line = line + 1\n  pos  = 1\n  week = ''\n  If (dd > lastdd) then                 /* Quit rows loop            */\n    line = 99\nEnd\n\noutmonth = weekhdr1 || weekhdr2 || week.1 || week.2\noutmonth = outmonth || week.3   || week.4 || week.5 || week.6\noutdate  = date(ordered)                /* Today in YY/MM/DD format  */\n\nAddress\n\"ISPEXEC VPUT (OUTMONTH OUTDATE) PROFILE\"\n\nExit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DCFMACRO": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x03*\\x03*\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 810, "newlines": 810, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=F38SANS                                13AUG93 18.34.27\n.*  *******************************************************************\n.*  Sonoran Sans Serif Typographic Fonts\n.*\n.*  June 1992 - L. Zerga  Printing Technology Group\n.*     Modified Macro for general use of new fonts within Schwab.\n.*     The '.df' is valid for any AFP printer type\n.*\n.*  Reference:   About Type:  IBM's Technical Reference for 240-pel\n.*               Digitized Type #s544-3516\n.*\n.*  Invocation:  Use '.bf' with the appropriate name\n.*               text6, bold14, italic20, etc. in document.\n.*  *******************************************************************\n.*  Text fonts\n.*  *******************************************************************\n.*  text6  font x0 or x1a0556c\n.df text6  type('SONORAN SANS SERIF' 6) codepage T1DCDCFS\n.*  text7  font x0 or x1a0557c\n.df text7  type('SONORAN SANS SERIF' 7) codepage T1DCDCFS\n.*  text8  font x0 or x1a0558c\n.df text8  type('SONORAN SANS SERIF' 8) codepage T1DCDCFS\n.*  text9  font x0 or x1a0559c\n.df text9  type('SONORAN SANS SERIF' 9) codepage T1DCDCFS\n.*  text10 font x0 or x1a0550c\n.df text10 type('SONORAN SANS SERIF' 10) codepage T1DCDCFS\n.*  text11 font x0 or x1a055ac\n.df text11 type('SONORAN SANS SERIF' 11) codepage T1DCDCFS\n.*  text12 font x0 or x1a055bc\n.df text12 type('SONORAN SANS SERIF' 12) codepage T1DCDCFS\n.*  text14 font x0 or x1a055dc\n.df text14 type('SONORAN SANS SERIF' 14) codepage T1DCDCFS\n.*  text16 font x0 or x1a055fc\n.df text16 type('SONORAN SANS SERIF' 16) codepage T1DCDCFS\n.*  text18 font x0 or x1a055hc\n.df text18 type('SONORAN SANS SERIF' 18) codepage T1DCDCFS\n.*  text20 font x0 or x1a055jc\n.df text20 type('SONORAN SANS SERIF' 20) codepage T1DCDCFS\n.*  text24 font x0 or x1a055nc\n.df text24 type('SONORAN SANS SERIF' 24) codepage T1DCDCFS\n.*  text30 font x0 or x1a055tc\n.df text30 type('SONORAN SANS SERIF' 30) codepage T1DCDCFS\n.*  text36 font x0 or x1a055zc\n.df text36 type('SONORAN SANS SERIF' 36) codepage T1DCDCFS\n.*  *******************************************************************\n.*  Bold Fonts\n.*  *******************************************************************\n.*  bold6  font x0 or x1a0756c\n.df bold6  type('SONORAN SANS SERIF' 6 BOLD) codepage T1DCDCFS\n.*  bold7  font x0 or x1a0757c\n.df bold7  type('SONORAN SANS SERIF' 7 BOLD) codepage T1DCDCFS\n.*  bold8  font x0 or x1a0758c\n.df bold8  type('SONORAN SANS SERIF' 8 BOLD) codepage T1DCDCFS\n.*  bold9  font x0 or x1a0759c\n.df bold9  type('SONORAN SANS SERIF' 9 BOLD) codepage T1DCDCFS\n.*  bold10 font x0 or x1a0750c\n.df bold10 type('SONORAN SANS SERIF' 10 BOLD) codepage T1DCDCFS\n.*  bold11 font x0 or x1a075ac\n.df bold11 type('SONORAN SANS SERIF' 11 BOLD) codepage T1DCDCFS\n.*  bold12 font x0 or x1a075bc\n.df bold12 type('SONORAN SANS SERIF' 12 BOLD) codepage T1DCDCFS\n.*  bold14 font x0 or x1a075dc\n.df bold14 type('SONORAN SANS SERIF' 14 BOLD) codepage T1DCDCFS\n.*  bold16 font x0 or x1a075fc\n.df bold16 type('SONORAN SANS SERIF' 16 BOLD) codepage T1DCDCFS\n.*  bold18 font x0 or x1a075hc\n.df bold18 type('SONORAN SANS SERIF' 18 BOLD) codepage T1DCDCFS\n.*  bold20 font x0 or x1a075jc\n.df bold20 type('SONORAN SANS SERIF' 20 BOLD) codepage T1DCDCFS\n.*  bold24 font x0 or x1a075nc\n.df bold24 type('SONORAN SANS SERIF' 24 BOLD) codepage T1DCDCFS\n.*  bold30 font x0 or x1a075tc\n.df bold30 type('SONORAN SANS SERIF' 30 BOLD) codepage T1DCDCFS\n.*  bold36 font x0 or x1a075zc\n.df bold36 type('SONORAN SANS SERIF' 36 BOLD) codepage T1DCDCFS\n.*  *******************************************************************\n.*  Italic Fonts\n.*  *******************************************************************\n.*  italic6  font x0 or x1a1556c\n.df italic6  type('SONORAN SANS SERIF' 6 ITALIC) codepage T1DCDCFS\n.*  italic7  font x0 or x1a1557c\n.df italic7  type('SONORAN SANS SERIF' 7 ITALIC) codepage T1DCDCFS\n.*  italic8  font x0 or x1a1558c\n.df italic8  type('SONORAN SANS SERIF' 8 ITALIC) codepage T1DCDCFS\n.*  italic9  font x0 or x1a1559c\n.df italic9  type('SONORAN SANS SERIF' 9 ITALIC) codepage T1DCDCFS\n.*  italic10 font x0 or x1a1550c\n.df italic10 type('SONORAN SANS SERIF' 10 ITALIC) codepage T1DCDCFS\n.*  italic11 font x0 or x1a155ac\n.df italic11 type('SONORAN SANS SERIF' 11 ITALIC) codepage T1DCDCFS\n.*  italic12 font x0 or x1a155bc\n.df italic12 type('SONORAN SANS SERIF' 12 ITALIC) codepage T1DCDCFS\n.*  italic14 font x0 or x1a155dc\n.df italic14 type('SONORAN SANS SERIF' 14 ITALIC) codepage T1DCDCFS\n.*  italic16 font x0 or x1a155fc\n.df italic16 type('SONORAN SANS SERIF' 16 ITALIC) codepage T1DCDCFS\n.*  italic18 font x0 or x1a155hc\n.df italic18 type('SONORAN SANS SERIF' 18 ITALIC) codepage T1DCDCFS\n.*  italic20 font x0 or x1a155jc\n.df italic20 type('SONORAN SANS SERIF' 20 ITALIC) codepage T1DCDCFS\n.*  italic24 font x0 or x1a155nc\n.df italic24 type('SONORAN SANS SERIF' 24 ITALIC) codepage T1DCDCFS\n.*  italic30 font x0 or x1a155tc\n.df italic30 type('SONORAN SANS SERIF' 30 ITALIC) codepage T1DCDCFS\n.*  italic36 font x0 or x1a155zc\n.df italic36 type('SONORAN SANS SERIF' 36 ITALIC) codepage T1DCDCFS\n.*  *******************************************************************\n.*  Bold Italic Fonts\n.*  *******************************************************************\n.*  bital6  font x0 or x1a1756c\n.df bital6  type('SONORAN SANS SERIF' 6 BOLD ITALIC) codepage T1DCDCFS\n.*  bital7  font x0 or x1a1757c\n.df bital7  type('SONORAN SANS SERIF' 7 BOLD ITALIC) codepage T1DCDCFS\n.*  bital8  font x0 or x1a1758c\n.df bital8  type('SONORAN SANS SERIF' 8 BOLD ITALIC) codepage T1DCDCFS\n.*  bital9  font x0 or x1a1759c\n.df bital9  type('SONORAN SANS SERIF' 9 BOLD ITALIC) codepage T1DCDCFS\n.*  bital10 font x0 or x1a1750c\n.df bital10 type('SONORAN SANS SERIF' 10 BOLD ITALIC) codepage T1DCDCFS\n.*  bital11 font x0 or x1a175ac\n.df bital11 type('SONORAN SANS SERIF' 11 BOLD ITALIC) codepage T1DCDCFS\n.*  bital12 font x0 or x1a175bc\n.df bital12 type('SONORAN SANS SERIF' 12 BOLD ITALIC) codepage T1DCDCFS\n.*  bital14 font x0 or x1a175dc\n.df bital14 type('SONORAN SANS SERIF' 14 BOLD ITALIC) codepage T1DCDCFS\n.*  bital16 font x0 or x1a175fc\n.df bital16 type('SONORAN SANS SERIF' 16 BOLD ITALIC) codepage T1DCDCFS\n.*  bital18 font x0 or x1a175hc\n.df bital18 type('SONORAN SANS SERIF' 18 BOLD ITALIC) codepage T1DCDCFS\n.*  bital20 font x0 or x1a175jc\n.df bital20 type('SONORAN SANS SERIF' 20 BOLD ITALIC) codepage T1DCDCFS\n.*  bital24 font x0 or x1a175nc\n.df bital24 type('SONORAN SANS SERIF' 24 BOLD ITALIC) codepage T1DCDCFS\n.*  bital30 font x0 or x1a175tc\n.df bital30 type('SONORAN SANS SERIF' 30 BOLD ITALIC) codepage T1DCDCFS\n.*  bital36 font x0 or x1a175zc\n.df bital36 type('SONORAN SANS SERIF' 36 BOLD ITALIC) codepage T1DCDCFS\n.*  *******************************************************************\n.*  Fonts invoked in compatible documents (pr12 is fixed pitch)\n.*  *******************************************************************\n.*  BOLD   font x0 or x1a075ac\n.df bold   type('SONORAN SANS SERIF' 11 BOLD) codepage T1DCDCFS\n.*  italic font x0 or x1a155ac\n.df italic type('SONORAN SANS SERIF' 11 ITALIC) codepage T1DCDCFS\n.*  bital  font x0 or x1a175ac\n.df bital  type('SONORAN SANS SERIF' 11 BOLD ITALIC) codepage T1DCDCFS\n.*  elite  font x0 or x1pr12\n.df elite  type('PRESTIGE' 9) codepage T1D0BASE\n./ ADD NAME=F38SERIF                               13AUG93 18.34.27\n.*  *******************************************************************\n.*  Sonoran Serif Typographic Fonts\n.*\n.*  June 1992 - L. Zerga  Printing Technology Group\n.*     Modified Macro for general use of new fonts within Schwab.\n.*     The '.df' is valid for any AFP printer type\n.*\n.*  Reference:   About Type:  IBM's Technical Reference for 240-pel\n.*               Digitized Type #s544-3516\n.*\n.*  Invocation:  Use '.bf' with the appropriate name\n.*               text6, bold14, italic20, etc. in document.\n.*  *******************************************************************\n.*  Text Fonts\n.*  *******************************************************************\n.*  text6  font x0 or x1t0556c\n.df text6  type('SONORAN SERIF' 6) codepage T1DCDCFS\n.*  text7  font x0 or x1t0557c\n.df text7  type('SONORAN SERIF' 7) codepage T1DCDCFS\n.*  text8  font x0 or x1t0558c\n.df text8  type('SONORAN SERIF' 8) codepage T1DCDCFS\n.*  text9  font x0 or x1t0559c\n.df text9  type('SONORAN SERIF' 9) codepage T1DCDCFS\n.*  text10 font x0 or x1t0550c\n.df text10 type('SONORAN SERIF' 10) codepage T1DCDCFS\n.*  text11 font x0 or x1t055ac\n.df text11 type('SONORAN SERIF' 11) codepage T1DCDCFS\n.*  text12 font x0 or x1t055bc\n.df text12 type('SONORAN SERIF' 12) codepage T1DCDCFS\n.*  text14 font x0 or x1t055dc\n.df text14 type('SONORAN SERIF' 14) codepage T1DCDCFS\n.*  text16 font x0 or x1t055fc\n.df text16 type('SONORAN SERIF' 16) codepage T1DCDCFS\n.*  text18 font x0 or x1t055hc\n.df text18 type('SONORAN SERIF' 18) codepage T1DCDCFS\n.*  text20 font x0 or x1t055jc\n.df text20 type('SONORAN SERIF' 20) codepage T1DCDCFS\n.*  text24 font x0 or x1t055nc\n.df text24 type('SONORAN SERIF' 24) codepage T1DCDCFS\n.*  text30 font x0 or x1t055tc\n.df text30 type('SONORAN SERIF' 30) codepage T1DCDCFS\n.*  text36 font x0 or x1t055zc\n.df text36 type('SONORAN SERIF' 36) codepage T1DCDCFS\n.*  *******************************************************************\n.*  Bold Fonts\n.*  *******************************************************************\n.*  bold6  font x0 or x1t0756c\n.df bold6  type('SONORAN SERIF' 6 BOLD) codepage T1DCDCFS\n.*  bold7  font x0 or x1t0757c\n.df bold7  type('SONORAN SERIF' 7 BOLD) codepage T1DCDCFS\n.*  bold8  font x0 or x1t0758c\n.df bold8  type('SONORAN SERIF' 8 BOLD) codepage T1DCDCFS\n.*  bold9  font x0 or x1t0759c\n.df bold9  type('SONORAN SERIF' 9 BOLD) codepage T1DCDCFS\n.*  bold10 font x0 or x1t0750c\n.df bold10 type('SONORAN SERIF' 10 BOLD) codepage T1DCDCFS\n.*  bold11 font x0 or x1t075ac\n.df bold11 type('SONORAN SERIF' 11 BOLD) codepage T1DCDCFS\n.*  bold12 font x0 or x1t075bc\n.df bold12 type('SONORAN SERIF' 12 BOLD) codepage T1DCDCFS\n.*  bold14 font x0 or x1t075dc\n.df bold14 type('SONORAN SERIF' 14 BOLD) codepage T1DCDCFS\n.*  bold16 font x0 or x1t075fc\n.df bold16 type('SONORAN SERIF' 16 BOLD) codepage T1DCDCFS\n.*  bold18 font x0 or x1t075hc\n.df bold18 type('SONORAN SERIF' 18 BOLD) codepage T1DCDCFS\n.*  bold20 font x0 or x1t075jc\n.df bold20 type('SONORAN SERIF' 20 BOLD) codepage T1DCDCFS\n.*  bold24 font x0 or x1t075nc\n.df bold24 type('SONORAN SERIF' 24 BOLD) codepage T1DCDCFS\n.*  bold30 font x0 or x1t075tc\n.df bold30 type('SONORAN SERIF' 30 BOLD) codepage T1DCDCFS\n.*  bold36 font x0 or x1t075zc\n.df bold36 type('SONORAN SERIF' 36 BOLD) codepage T1DCDCFS\n.*  *******************************************************************\n.*  Italic Fonts\n.*  *******************************************************************\n.*  italic6  font x0 or x1t1556c\n.df italic6  type('SONORAN SERIF' 6 ITALIC) codepage T1DCDCFS\n.*  italic7  font x0 or x1t1557c\n.df italic7  type('SONORAN SERIF' 7 ITALIC) codepage T1DCDCFS\n.*  italic8  font x0 or x1t1558c\n.df italic8  type('SONORAN SERIF' 9 ITALIC) codepage T1DCDCFS\n.*  italic9  font x0 or x1t1559c\n.df italic9  type('SONORAN SERIF' 9 ITALIC) codepage T1DCDCFS\n.*  italic10 font x0 or x1t1550c\n.df italic10 type('SONORAN SERIF' 10 ITALIC) codepage T1DCDCFS\n.*  italic11 font x0 or x1t155ac\n.df italic11 type('SONORAN SERIF' 11 ITALIC) codepage T1DCDCFS\n.*  italic12 font x0 or x1t155bc\n.df italic12 type('SONORAN SERIF' 12 ITALIC) codepage T1DCDCFS\n.*  italic14 font x0 or x1t155dc\n.df italic14 type('SONORAN SERIF' 14 ITALIC) codepage T1DCDCFS\n.*  italic16 font x0 or x1t155fc\n.df italic16 type('SONORAN SERIF' 16 ITALIC) codepage T1DCDCFS\n.*  italic18 font x0 or x1t155hc\n.df italic18 type('SONORAN SERIF' 18 ITALIC) codepage T1DCDCFS\n.*  italic20 font x0 or x1t155jc\n.df italic20 type('SONORAN SERIF' 20 ITALIC) codepage T1DCDCFS\n.*  italic24 font x0 or x1t155nc\n.df italic24 type('SONORAN SERIF' 24 ITALIC) codepage T1DCDCFS\n.*  italic30 font x0 or x1t155tc\n.df italic30 type('SONORAN SERIF' 30 ITALIC) codepage T1DCDCFS\n.*  italic36 font x0 or x1t155zc\n.df italic36 type('SONORAN SERIF' 36 ITALIC) codepage T1DCDCFS\n.*  *******************************************************************\n.*  Bold Italic Fonts\n.*  *******************************************************************\n.*  bital6  font x0 or x1t1756c\n.df bital6  type('SONORAN SERIF' 6 BOLD ITALIC) codepage T1DCDCFS\n.*  bital7  font x0 or x1t1757c\n.df bital7  type('SONORAN SERIF' 7 BOLD ITALIC) codepage T1DCDCFS\n.*  bital8  font x0 or x1t1758c\n.df bital8  type('SONORAN SERIF' 8 BOLD ITALIC) codepage T1DCDCFS\n.*  bital9  font x0 or x1t1759c\n.df bital9  type('SONORAN SERIF' 9 BOLD ITALIC) codepage T1DCDCFS\n.*  bital10 font x0 or x1t1750c\n.df bital10 type('SONORAN SERIF' 10 BOLD ITALIC) codepage T1DCDCFS\n.*  bital11 font x0 or x1t175ac\n.df bital11 type('SONORAN SERIF' 11 BOLD ITALIC) codepage T1DCDCFS\n.*  bital12 font x0 or x1t175bc\n.df bital12 type('SONORAN SERIF' 12 BOLD ITALIC) codepage T1DCDCFS\n.*  bital14 font x0 or x1t175dc\n.df bital14 type('SONORAN SERIF' 14 BOLD ITALIC) codepage T1DCDCFS\n.*  bital16 font x0 or x1t175fc\n.df bital16 type('SONORAN SERIF' 16 BOLD ITALIC) codepage T1DCDCFS\n.*  bital18 font x0 or x1t175hc\n.df bital18 type('SONORAN SERIF' 18 BOLD ITALIC) codepage T1DCDCFS\n.*  bital20 font x0 or x1t175jc\n.df bital20 type('SONORAN SERIF' 20 BOLD ITALIC) codepage T1DCDCFS\n.*  bital24 font x0 or x1t175nc\n.df bital24 type('SONORAN SERIF' 24 BOLD ITALIC) codepage T1DCDCFS\n.*  bital30 font x0 or x1t175tc\n.df bital30 type('SONORAN SERIF' 30 BOLD ITALIC) codepage T1DCDCFS\n.*  bital36 font x0 or x1t175zc\n.df bital36 type('SONORAN SERIF' 36 BOLD ITALIC) codepage T1DCDCFS\n.*  *******************************************************************\n.*  Fonts invoked in compatible documents (PR12 is fixed-pitch)\n.*  *******************************************************************\n.*  bold   font x0 or x1t075ac\n.df bold   type('SONORAN SERIF' 11 BOLD) codepage T1DCDCFS\n.*  italic font x0 or x1t155ac\n.df italic type('SONORAN SERIF' 11 ITALIC) codepage T1DCDCFS\n.*  bital  font x0 or x1t175ac\n.df bital  type('SONORAN SERIF' 11 BOLD ITALIC) codepage T1DCDCFS\n.*  elite  font x0 or x1pr12\n.df elite  type('PRESTIGE' 9) codepage T1D0BASE\n./ ADD NAME=MONOGARA                               13AUG93 18.34.27\n.*  *******************************************************************\n.*  Monotype Garamond Typographic Fonts\n.*\n.*  June 1992 - L. Zerga  Printing Technology Group\n.*     Created Macro for general use of new fonts within Schwab.\n.*     The '.df' is valid for any AFP printer type\n.*\n.*  Reference:   About Type:  IBM's Technical Reference for 240-pel\n.*               Digitized Type #s544-3516\n.*\n.*  Invocation:  Use '.bf' with the appropriate name\n.*               text6, bold14, italic20, etc. in document.\n.*  *******************************************************************\n.*  Text Fonts\n.*  *******************************************************************\n.*  text6  font x0 or x1a0556c\n.df text6  type('MONOTYPE GARAMOND' 6) codepage T1GI0361\n.*  text7  font x0 or x1a0557c\n.df text7  type('MONOTYPE GARAMOND' 7) codepage T1GI0361\n.*  text8  font x0 or x1a0558c\n.df text8  type('MONOTYPE GARAMOND' 8) codepage T1GI0361\n.*  text9  font x0 or x1a0559c\n.df text9  type('MONOTYPE GARAMOND' 9) codepage T1GI0361\n.*  text10 font x0 or x1a0550c\n.df text10 type('MONOTYPE GARAMOND' 10) codepage T1GI0361\n.*  text11 font x0 or x1a055ac\n.df text11 type('MONOTYPE GARAMOND' 11) codepage T1GI0361\n.*  text12 font x0 or x1a055bc\n.df text12 type('MONOTYPE GARAMOND' 12) codepage T1GI0361\n.*  text14 font x0 or x1a055dc\n.df text14 type('MONOTYPE GARAMOND' 14) codepage T1GI0361\n.*  text16 font x0 or x1a055fc\n.df text16 type('MONOTYPE GARAMOND' 16) codepage T1GI0361\n.*  text18 font x0 or x1a055hc\n.df text18 type('MONOTYPE GARAMOND' 18) codepage T1GI0361\n.*  text20 font x0 or x1a055jc\n.df text20 type('MONOTYPE GARAMOND' 20) codepage T1GI0361\n.*  text24 font x0 or x1a055nc\n.df text24 type('MONOTYPE GARAMOND' 24) codepage T1GI0361\n.*  text30 font x0 or x1a055tc\n.df text30 type('MONOTYPE GARAMOND' 30) codepage T1GI0361\n.*  text36 font x0 or x1a055zc\n.df text36 type('MONOTYPE GARAMOND' 36) codepage T1GI0361\n.*  *******************************************************************\n.*  Bold Fonts\n.*  *******************************************************************\n.*  bold6  font x0 or x1a0756c\n.df bold6  type('MONOTYPE GARAMOND' 6 BOLD) codepage T1GI0361\n.*  bold7  font x0 or x1a0757c\n.df bold7  type('MONOTYPE GARAMOND' 7 BOLD) codepage T1GI0361\n.*  bold8  font x0 or x1a0758c\n.df bold8  type('MONOTYPE GARAMOND' 8 BOLD) codepage T1GI0361\n.*  bold9  font x0 or x1a0759c\n.df bold9  type('MONOTYPE GARAMOND' 9 BOLD) codepage T1GI0361\n.*  bold10 font x0 or x1a0750c\n.df bold10 type('MONOTYPE GARAMOND' 10 BOLD) codepage T1GI0361\n.*  bold11 font x0 or x1a075ac\n.df bold11 type('MONOTYPE GARAMOND' 11 BOLD) codepage T1GI0361\n.*  bold12 font x0 or x1a075bc\n.df bold12 type('MONOTYPE GARAMOND' 12 BOLD) codepage T1GI0361\n.*  bold14 font x0 or x1a075dc\n.df bold14 type('MONOTYPE GARAMOND' 14 BOLD) codepage T1GI0361\n.*  bold16 font x0 or x1a075fc\n.df bold16 type('MONOTYPE GARAMOND' 16 BOLD) codepage T1GI0361\n.*  bold18 font x0 or x1a075hc\n.df bold18 type('MONOTYPE GARAMOND' 18 BOLD) codepage T1GI0361\n.*  bold20 font x0 or x1a075jc\n.df bold20 type('MONOTYPE GARAMOND' 20 BOLD) codepage T1GI0361\n.*  bold24 font x0 or x1a075nc\n.df bold24 type('MONOTYPE GARAMOND' 24 BOLD) codepage T1GI0361\n.*  bold30 font x0 or x1a075tc\n.df bold30 type('MONOTYPE GARAMOND' 30 BOLD) codepage T1GI0361\n.*  bold36 font x0 or x1a075zc\n.df bold36 type('MONOTYPE GARAMOND' 36 BOLD) codepage T1GI0361\n.*  *******************************************************************\n.*  Italic Fonts\n.*  *******************************************************************\n.*  italic6  font x0 or x1a1556c\n.df italic6  type('MONOTYPE GARAMOND' 6 ITALIC) codepage T1GI0361\n.*  italic7  font x0 or x1a1557c\n.df italic7  type('MONOTYPE GARAMOND' 7 ITALIC) codepage T1GI0361\n.*  italic8  font x0 or x1a1558c\n.df italic8  type('MONOTYPE GARAMOND' 8 ITALIC) codepage T1GI0361\n.*  italic9  font x0 or x1a1559c\n.df italic9  type('MONOTYPE GARAMOND' 9 ITALIC) codepage T1GI0361\n.*  italic10 font x0 or x1a1550c\n.df italic10 type('MONOTYPE GARAMOND' 10 ITALIC) codepage T1GI0361\n.*  italic11 font x0 or x1a155ac\n.df italic11 type('MONOTYPE GARAMOND' 11 ITALIC) codepage T1GI0361\n.*  italic12 font x0 or x1a155bc\n.df italic12 type('MONOTYPE GARAMOND' 12 ITALIC) codepage T1GI0361\n.*  italic14 font x0 or x1a155dc\n.df italic14 type('MONOTYPE GARAMOND' 14 ITALIC) codepage T1GI0361\n.*  italic16 font x0 or x1a155fc\n.df italic16 type('MONOTYPE GARAMOND' 16 ITALIC) codepage T1GI0361\n.*  italic18 font x0 or x1a155hc\n.df italic18 type('MONOTYPE GARAMOND' 18 ITALIC) codepage T1GI0361\n.*  italic20 font x0 or x1a155jc\n.df italic20 type('MONOTYPE GARAMOND' 20 ITALIC) codepage T1GI0361\n.*  italic24 font x0 or x1a155nc\n.df italic24 type('MONOTYPE GARAMOND' 24 ITALIC) codepage T1GI0361\n.*  italic30 font x0 or x1a155tc\n.df italic30 type('MONOTYPE GARAMOND' 30 ITALIC) codepage T1GI0361\n.*  italic36 font x0 or x1a155zc\n.df italic36 type('MONOTYPE GARAMOND' 36 ITALIC) codepage T1GI0361\n.*  *******************************************************************\n.*  Bold Italic Fonts\n.*  *******************************************************************\n.*  bital6  font x0 or x1a1756c\n.df bital6  type('MONOTYPE GARAMOND' 6 BOLD ITALIC) codepage T1GI0361\n.*  bital7  font x0 or x1a1757c\n.df bital7  type('MONOTYPE GARAMOND' 7 BOLD ITALIC) codepage T1GI0361\n.*  bital8  font x0 or x1a1758c\n.df bital8  type('MONOTYPE GARAMOND' 8 BOLD ITALIC) codepage T1GI0361\n.*  bital9  font x0 or x1a1759c\n.df bital9  type('MONOTYPE GARAMOND' 9 BOLD ITALIC) codepage T1GI0361\n.*  bital10 font x0 or x1a1750c\n.df bital10 type('MONOTYPE GARAMOND' 10 BOLD ITALIC) codepage T1GI0361\n.*  bital11 font x0 or x1a175ac\n.df bital11 type('MONOTYPE GARAMOND' 11 BOLD ITALIC) codepage T1GI0361\n.*  bital12 font x0 or x1a175bc\n.df bital12 type('MONOTYPE GARAMOND' 12 BOLD ITALIC) codepage T1GI0361\n.*  bital14 font x0 or x1a175dc\n.df bital14 type('MONOTYPE GARAMOND' 14 BOLD ITALIC) codepage T1GI0361\n.*  bital16 font x0 or x1a175fc\n.df bital16 type('MONOTYPE GARAMOND' 16 BOLD ITALIC) codepage T1GI0361\n.*  bital18 font x0 or x1a175hc\n.df bital18 type('MONOTYPE GARAMOND' 18 BOLD ITALIC) codepage T1GI0361\n.*  bital20 font x0 or x1a175jc\n.df bital20 type('MONOTYPE GARAMOND' 20 BOLD ITALIC) codepage T1GI0361\n.*  bital24 font x0 or x1a175nc\n.df bital24 type('MONOTYPE GARAMOND' 24 BOLD ITALIC) codepage T1GI0361\n.*  bital30 font x0 or x1a175tc\n.df bital30 type('MONOTYPE GARAMOND' 30 BOLD ITALIC) codepage T1GI0361\n.*  bital36 font x0 or x1a175zc\n.df bital36 type('MONOTYPE GARAMOND' 36 BOLD ITALIC) codepage T1GI0361\n.*  *******************************************************************\n.*  Fonts invoked in compatible documents (PR12 is fixed pitch)\n.*  *******************************************************************\n.*  bold   font x0 or x1a075ac\n.df bold   type('MONOTYPE GARAMOND' 11 BOLD) codepage T1GI0361\n.*  italic font x0 or x1a155ac\n.df italic type('MONOTYPE GARAMOND' 11 ITALIC) codepage T1GI0361\n.*  bital  font x0 or x1a175ac\n.df bital  type('MONOTYPE GARAMOND' 11 BOLD ITALIC) codepage T1GI0361\n.*  elite  font x0 or x1pr12\n.df elite  type('PRESTIGE' 9) codepage T1D0BASE\n./ ADD NAME=PISANS                                 13AUG93 18.34.27\n.*  *******************************************************************\n.*  PI and Specials Family of SANS SERIF Typographic Fonts\n.*\n.*  June 1992 - L. Zerga  Printing Technology Group\n.*     Modified Macro for general use of new fonts within Schwab.\n.*     The '.df' is valid for any AFP printer type\n.*\n.*  Reference:   About Type:  IBM's Technical Reference for 240-pel\n.*               Digitized Type #s544-3516\n.*\n.*  Invocation:  Use '.bf' with the appropriate name\n.*               pi6, bpi14, etc. in document.\n.*  *******************************************************************\n.*  PI Fonts\n.*  *******************************************************************\n.*  pi6   font x0 or x1p0556p\n.df pi6   type('PI SANS SERIF' 6) codepage T1GPI363\n.*  pi8   font x0 or x1p0558p\n.df pi8   type('PI SANS SERIF' 8) codepage T1GPI363\n.*  pi10  font x0 or x1p0550p\n.df pi10  type('PI SANS SERIF' 10) codepage T1GPI363\n.*  pi12  font x0 or x1p055bp\n.df pi12  type('PI SANS SERIF' 12) codepage T1GPI363\n.*  *******************************************************************\n.*  Bold PI Fonts\n.*  *******************************************************************\n.*  bpi6  font x0 or x1p0756p\n.df bpi6  type('PI SANS SERIF' 6 bold) codepage T1GPI363\n.*  bpi8  font x0 or x1p0758p\n.df bpi8  type('PI SANS SERIF' 8 bold) codepage T1GPI363\n.*  bpi10 font x0 or x1p0750p\n.df bpi10 type('PI SANS SERIF' 10 bold) codepage T1GPI363\n.*  bpi12 font x0 or x1p075bp\n.df bpi12 type('PI SANS SERIF' 12 bold) codepage T1GPI363\n./ ADD NAME=PISERIF                                13AUG93 18.34.27\n.*  *******************************************************************\n.*  PI and Specials Family of Serif Typographic Fonts\n.*\n.*  June 1992 - L. Zerga  Printing Technology Group\n.*     Modified Macro for general use of new fonts within Schwab.\n.*     The '.df' is valid for any AFP printer type\n.*\n.*  Reference:   About Type:  IBM's Technical Reference for 240-pel\n.*               Digitized Type #s544-3516\n.*\n.*  Invocation:  Use '.bf' with the appropriate name\n.*               pi6, bpi14, italic20, etc. in document.\n.*  *******************************************************************\n.*  PI Fonts\n.*  *******************************************************************\n.*  pi6   font x0 or x1q0556p\n.df pi6   type('PI SERIF' 6) codepage T1GPI363\n.*  pi8   font x0 or x1q0558p\n.df pi8   type('PI SERIF' 8) codepage T1GPI363\n.*  pi10  font x0 or x1q0550p\n.df pi10  type('PI SERIF' 10) codepage T1GPI363\n.*  pi12  font x0 or x1q055bp\n.df pi12  type('PI SERIF' 12) codepage T1GPI363\n.*  *******************************************************************\n.*  Bold PI Fonts\n.*  *******************************************************************\n.*  bpi6  font x0 or x1q0756p\n.df bpi6  type('PI SERIF' 6 bold) codepage T1GPI363\n.*  bpi8  font x0 or x1q0758p\n.df bpi8  type('PI SERIF' 8 bold) codepage T1GPI363\n.*  bpi10 font x0 or x1q0750p\n.df bpi10 type('PI SERIF' 10 bold) codepage T1GPI363\n.*  bpi12 font x0 or x1q075bp\n.df bpi12 type('PI SERIF' 12 bold) codepage T1GPI363\n./ ADD NAME=SCHOOL                                 13AUG93 18.34.27\n.*  *******************************************************************\n.*  Century Schoolbook Typographic Fonts\n.*\n.*  June 1992 - L. Zerga  Printing Technology Group\n.*     Created Macro for general use of new fonts within Schwab.\n.*     The '.df' is valid for any AFP printer type\n.*\n.*  Reference:   About Type:  IBM's Technical Reference for 240-pel\n.*               Digitized Type #s544-3516\n.*\n.*  Invocation:  Use '.bf' with the appropriate name\n.*               text6, bold14, italic20, etc. in document.\n.*  *******************************************************************\n.*  Text Fonts\n.*  *******************************************************************\n.*  text6  font x0 or x1a0556c\n.df text6  type('CENTURY SCHOOLBOOK' 6) codepage T1GI0361\n.*  text7  font x0 or x1a0557c\n.df text7  type('CENTURY SCHOOLBOOK' 7) codepage T1GI0361\n.*  text8  font x0 or x1a0558c\n.df text8  type('CENTURY SCHOOLBOOK' 8) codepage T1GI0361\n.*  text9  font x0 or x1a0559c\n.df text9  type('CENTURY SCHOOLBOOK' 9) codepage T1GI0361\n.*  text10 font x0 or x1a0550c\n.df text10 type('CENTURY SCHOOLBOOK' 10) codepage T1GI0361\n.*  text11 font x0 or x1a055ac\n.df text11 type('CENTURY SCHOOLBOOK' 11) codepage T1GI0361\n.*  text12 font x0 or x1a055bc\n.df text12 type('CENTURY SCHOOLBOOK' 12) codepage T1GI0361\n.*  text14 font x0 or x1a055dc\n.df text14 type('CENTURY SCHOOLBOOK' 14) codepage T1GI0361\n.*  text16 font x0 or x1a055fc\n.df text16 type('CENTURY SCHOOLBOOK' 16) codepage T1GI0361\n.*  text18 font x0 or x1a055hc\n.df text18 type('CENTURY SCHOOLBOOK' 18) codepage T1GI0361\n.*  text20 font x0 or x1a055jc\n.df text20 type('CENTURY SCHOOLBOOK' 20) codepage T1GI0361\n.*  text24 font x0 or x1a055nc\n.df text24 type('CENTURY SCHOOLBOOK' 24) codepage T1GI0361\n.*  text30 font x0 or x1a055tc\n.df text30 type('CENTURY SCHOOLBOOK' 30) codepage T1GI0361\n.*  text36 font x0 or x1a055zc\n.df text36 type('CENTURY SCHOOLBOOK' 36) codepage T1GI0361\n.*  *******************************************************************\n.*  Bold Fonts\n.*  *******************************************************************\n.*  bold6  font x0 or x1a0756c\n.df bold6  type('CENTURY SCHOOLBOOK' 6 BOLD) codepage T1GI0361\n.*  bold7  font x0 or x1a0757c\n.df bold7  type('CENTURY SCHOOLBOOK' 7 BOLD) codepage T1GI0361\n.*  bold8  font x0 or x1a0758c\n.df bold8  type('CENTURY SCHOOLBOOK' 8 BOLD) codepage T1GI0361\n.*  bold9  font x0 or x1a0759c\n.df bold9  type('CENTURY SCHOOLBOOK' 9 BOLD) codepage T1GI0361\n.*  bold10 font x0 or x1a0750c\n.df bold10 type('CENTURY SCHOOLBOOK' 10 BOLD) codepage T1GI0361\n.*  bold11 font x0 or x1a075ac\n.df bold11 type('CENTURY SCHOOLBOOK' 11 BOLD) codepage T1GI0361\n.*  bold12 font x0 or x1a075bc\n.df bold12 type('CENTURY SCHOOLBOOK' 12 BOLD) codepage T1GI0361\n.*  bold14 font x0 or x1a075dc\n.df bold14 type('CENTURY SCHOOLBOOK' 14 BOLD) codepage T1GI0361\n.*  bold16 font x0 or x1a075fc\n.df bold16 type('CENTURY SCHOOLBOOK' 16 BOLD) codepage T1GI0361\n.*  bold18 font x0 or x1a075hc\n.df bold18 type('CENTURY SCHOOLBOOK' 18 BOLD) codepage T1GI0361\n.*  bold20 font x0 or x1a075jc\n.df bold20 type('CENTURY SCHOOLBOOK' 20 BOLD) codepage T1GI0361\n.*  bold24 font x0 or x1a075nc\n.df bold24 type('CENTURY SCHOOLBOOK' 24 BOLD) codepage T1GI0361\n.*  bold30 font x0 or x1a075tc\n.df bold30 type('CENTURY SCHOOLBOOK' 30 BOLD) codepage T1GI0361\n.*  bold36 font x0 or x1a075zc\n.df bold36 type('CENTURY SCHOOLBOOK' 36 BOLD) codepage T1GI0361\n.*  *******************************************************************\n.*  Italic Fonts\n.*  *******************************************************************\n.*  italic6  font x0 or x1a1556c\n.df italic6  type('CENTURY SCHOOLBOOK' 6 ITALIC) codepage T1GI0361\n.*  italic7  font x0 or x1a1557c\n.df italic7  type('CENTURY SCHOOLBOOK' 7 ITALIC) codepage T1GI0361\n.*  italic8  font x0 or x1a1558c\n.df italic8  type('CENTURY SCHOOLBOOK' 8 ITALIC) codepage T1GI0361\n.*  italic9  font x0 or x1a1559c\n.df italic9  type('CENTURY SCHOOLBOOK' 9 ITALIC) codepage T1GI0361\n.*  italic10 font x0 or x1a1550c\n.df italic10 type('CENTURY SCHOOLBOOK' 10 ITALIC) codepage T1GI0361\n.*  italic11 font x0 or x1a155ac\n.df italic11 type('CENTURY SCHOOLBOOK' 11 ITALIC) codepage T1GI0361\n.*  italic12 font x0 or x1a155bc\n.df italic12 type('CENTURY SCHOOLBOOK' 12 ITALIC) codepage T1GI0361\n.*  italic14 font x0 or x1a155dc\n.df italic14 type('CENTURY SCHOOLBOOK' 14 ITALIC) codepage T1GI0361\n.*  italic16 font x0 or x1a155fc\n.df italic16 type('CENTURY SCHOOLBOOK' 16 ITALIC) codepage T1GI0361\n.*  italic18 font x0 or x1a155hc\n.df italic18 type('CENTURY SCHOOLBOOK' 18 ITALIC) codepage T1GI0361\n.*  italic20 font x0 or x1a155jc\n.df italic20 type('CENTURY SCHOOLBOOK' 20 ITALIC) codepage T1GI0361\n.*  italic24 font x0 or x1a155nc\n.df italic24 type('CENTURY SCHOOLBOOK' 24 ITALIC) codepage T1GI0361\n.*  italic30 font x0 or x1a155tc\n.df italic30 type('CENTURY SCHOOLBOOK' 30 ITALIC) codepage T1GI0361\n.*  italic36 font x0 or x1a155zc\n.df italic36 type('CENTURY SCHOOLBOOK' 36 ITALIC) codepage T1GI0361\n.*  *******************************************************************\n.*  Bold Italic Fonts\n.*  *******************************************************************\n.*  bital6  font x0 or x1a1756c\n.df bital6  type('CENTURY SCHOOLBOOK' 6 BOLD ITALIC) codepage T1GI0361\n.*  bital7  font x0 or x1a1757c\n.df bital7  type('CENTURY SCHOOLBOOK' 7 BOLD ITALIC) codepage T1GI0361\n.*  bital8  font x0 or x1a1758c\n.df bital8  type('CENTURY SCHOOLBOOK' 8 BOLD ITALIC) codepage T1GI0361\n.*  bital9  font x0 or x1a1759c\n.df bital9  type('CENTURY SCHOOLBOOK' 9 BOLD ITALIC) codepage T1GI0361\n.*  bital10 font x0 or x1a1750c\n.df bital10 type('CENTURY SCHOOLBOOK' 10 BOLD ITALIC) codepage T1GI0361\n.*  bital11 font x0 or x1a175ac\n.df bital11 type('CENTURY SCHOOLBOOK' 11 BOLD ITALIC) codepage T1GI0361\n.*  bital12 font x0 or x1a175bc\n.df bital12 type('CENTURY SCHOOLBOOK' 12 BOLD ITALIC) codepage T1GI0361\n.*  bital14 font x0 or x1a175dc\n.df bital14 type('CENTURY SCHOOLBOOK' 14 BOLD ITALIC) codepage T1GI0361\n.*  bital16 font x0 or x1a175fc\n.df bital16 type('CENTURY SCHOOLBOOK' 16 BOLD ITALIC) codepage T1GI0361\n.*  bital18 font x0 or x1a175hc\n.df bital18 type('CENTURY SCHOOLBOOK' 18 BOLD ITALIC) codepage T1GI0361\n.*  bital20 font x0 or x1a175jc\n.df bital20 type('CENTURY SCHOOLBOOK' 20 BOLD ITALIC) codepage T1GI0361\n.*  bital24 font x0 or x1a175nc\n.df bital24 type('CENTURY SCHOOLBOOK' 24 BOLD ITALIC) codepage T1GI0361\n.*  bital30 font x0 or x1a175tc\n.df bital30 type('CENTURY SCHOOLBOOK' 30 BOLD ITALIC) codepage T1GI0361\n.*  bital36 font x0 or x1a175zc\n.df bital36 type('CENTURY SCHOOLBOOK' 36 BOLD ITALIC) codepage T1GI0361\n.*  *******************************************************************\n.*  Fonts invoked in compatible documents (PR12 is fixed pitch)\n.*  *******************************************************************\n.*  Bold   font x0 or x1a075ac\n.df bold   type('CENTURY SCHOOLBOOK' 11 BOLD) codepage T1GI0361\n.*  italic font x0 or x1a155ac\n.df italic type('CENTURY SCHOOLBOOK' 11 ITALIC) codepage T1GI0361\n.*  bital  font x0 or x1a175ac\n.df bital  type('CENTURY SCHOOLBOOK' 11 BOLD ITALIC) codepage T1GI0361\n.*  elite  font x0 or x1pr12\n.df elite  type('PRESTIGE' 9) codepage T1D0BASE\n./ ADD NAME=SOUVENIR                               13AUG93 18.34.27\n.*  *******************************************************************\n.*  ITC Souvenir Typographic Fonts\n.*\n.*  June 1992 - L. Zerga  Printing Technology Group\n.*     Created Macro for general use of new fonts within Schwab.\n.*     The '.df' is valid for any AFP printer type\n.*\n.*  Reference:   About Type:  IBM's Technical Reference for 240-pel\n.*               Digitized Type #s544-3516\n.*\n.*  Invocation:  Use '.bf' with the appropriate name\n.*               text6, bold14, italic20, etc. in document.\n.*  *******************************************************************\n.*  Text Fonts\n.*  *******************************************************************\n.*  text6  font x0 or x1a0556c\n.df text6  type('ITC SOUVENIR' 6) codepage T1GI0361\n.*  text7  font x0 or x1a0557c\n.df text7  type('ITC SOUVENIR' 7) codepage T1GI0361\n.*  text8  font x0 or x1a0558c\n.df text8  type('ITC SOUVENIR' 8) codepage T1GI0361\n.*  text9  font x0 or x1a0559c\n.df text9  type('ITC SOUVENIR' 9) codepage T1GI0361\n.*  text10 font x0 or x1a0550c\n.df text10 type('ITC SOUVENIR' 10) codepage T1GI0361\n.*  text11 font x0 or x1a055ac\n.df text11 type('ITC SOUVENIR' 11) codepage T1GI0361\n.*  text12 font x0 or x1a055bc\n.df text12 type('ITC SOUVENIR' 12) codepage T1GI0361\n.*  text14 font x0 or x1a055dc\n.df text14 type('ITC SOUVENIR' 14) codepage T1GI0361\n.*  text16 font x0 or x1a055fc\n.df text16 type('ITC SOUVENIR' 16) codepage T1GI0361\n.*  text18 font x0 or x1a055hc\n.df text18 type('ITC SOUVENIR' 18) codepage T1GI0361\n.*  text20 font x0 or x1a055jc\n.df text20 type('ITC SOUVENIR' 20) codepage T1GI0361\n.*  text24 font x0 or x1a055nc\n.df text24 type('ITC SOUVENIR' 24) codepage T1GI0361\n.*  text30 font x0 or x1a055tc\n.df text30 type('ITC SOUVENIR' 30) codepage T1GI0361\n.*  text36 font x0 or x1a055zc\n.df text36 type('ITC SOUVENIR' 36) codepage T1GI0361\n.*  *******************************************************************\n.*  Bold Fonts\n.*  *******************************************************************\n.*  bold6  font x0 or x1a0756c\n.df bold6  type('ITC SOUVENIR' 6 BOLD) codepage T1GI0361\n.*  bold7  font x0 or x1a0757c\n.df bold7  type('ITC SOUVENIR' 7 BOLD) codepage T1GI0361\n.*  bold8  font x0 or x1a0758c\n.df bold8  type('ITC SOUVENIR' 8 BOLD) codepage T1GI0361\n.*  bold9  font x0 or x1a0759c\n.df bold9  type('ITC SOUVENIR' 9 BOLD) codepage T1GI0361\n.*  bold10 font x0 or x1a0750c\n.df bold10 type('ITC SOUVENIR' 10 BOLD) codepage T1GI0361\n.*  bold11 font x0 or x1a075ac\n.df bold11 type('ITC SOUVENIR' 11 BOLD) codepage T1GI0361\n.*  bold12 font x0 or x1a075bc\n.df bold12 type('ITC SOUVENIR' 12 BOLD) codepage T1GI0361\n.*  bold14 font x0 or x1a075dc\n.df bold14 type('ITC SOUVENIR' 14 BOLD) codepage T1GI0361\n.*  bold16 font x0 or x1a075fc\n.df bold16 type('ITC SOUVENIR' 16 BOLD) codepage T1GI0361\n.*  bold18 font x0 or x1a075hc\n.df bold18 type('ITC SOUVENIR' 18 BOLD) codepage T1GI0361\n.*  bold20 font x0 or x1a075jc\n.df bold20 type('ITC SOUVENIR' 20 BOLD) codepage T1GI0361\n.*  bold24 font x0 or x1a075nc\n.df bold24 type('ITC SOUVENIR' 24 BOLD) codepage T1GI0361\n.*  bold30 font x0 or x1a075tc\n.df bold30 type('ITC SOUVENIR' 30 BOLD) codepage T1GI0361\n.*  bold36 font x0 or x1a075zc\n.df bold36 type('ITC SOUVENIR' 36 BOLD) codepage T1GI0361\n.*  *******************************************************************\n.*  Italic Fonts\n.*  *******************************************************************\n.*  italic6  font x0 or x1a1556c\n.df italic6  type('ITC SOUVENIR' 6 ITALIC) codepage T1GI0361\n.*  italic7  font x0 or x1a1557c\n.df italic7  type('ITC SOUVENIR' 7 ITALIC) codepage T1GI0361\n.*  italic8  font x0 or x1a1558c\n.df italic8  type('ITC SOUVENIR' 8 ITALIC) codepage T1GI0361\n.*  italic9  font x0 or x1a1559c\n.df italic9  type('ITC SOUVENIR' 9 ITALIC) codepage T1GI0361\n.*  italic10 font x0 or x1a1550c\n.df italic10 type('ITC SOUVENIR' 10 ITALIC) codepage T1GI0361\n.*  italic11 font x0 or x1a155ac\n.df italic11 type('ITC SOUVENIR' 11 ITALIC) codepage T1GI0361\n.*  italic12 font x0 or x1a155bc\n.df italic12 type('ITC SOUVENIR' 12 ITALIC) codepage T1GI0361\n.*  italic14 font x0 or x1a155dc\n.df italic14 type('ITC SOUVENIR' 14 ITALIC) codepage T1GI0361\n.*  italic16 font x0 or x1a155fc\n.df italic16 type('ITC SOUVENIR' 16 ITALIC) codepage T1GI0361\n.*  italic18 font x0 or x1a155hc\n.df italic18 type('ITC SOUVENIR' 18 ITALIC) codepage T1GI0361\n.*  italic20 font x0 or x1a155jc\n.df italic20 type('ITC SOUVENIR' 20 ITALIC) codepage T1GI0361\n.*  italic24 font x0 or x1a155nc\n.df italic24 type('ITC SOUVENIR' 24 ITALIC) codepage T1GI0361\n.*  italic30 font x0 or x1a155tc\n.df italic30 type('ITC SOUVENIR' 30 ITALIC) codepage T1GI0361\n.*  italic36 font x0 or x1a155zc\n.df italic36 type('ITC SOUVENIR' 36 ITALIC) codepage T1GI0361\n.*  *******************************************************************\n.*  Bold Italic Fonts\n.*  *******************************************************************\n.*  bital6  font x0 or x1a1756c\n.df bital6  type('ITC SOUVENIR' 6 BOLD ITALIC) codepage T1GI0361\n.*  bital7  font x0 or x1a1757c\n.df bital7  type('ITC SOUVENIR' 7 BOLD ITALIC) codepage T1GI0361\n.*  bital8  font x0 or x1a1758c\n.df bital8  type('ITC SOUVENIR' 8 BOLD ITALIC) codepage T1GI0361\n.*  bital9  font x0 or x1a1759c\n.df bital9  type('ITC SOUVENIR' 9 BOLD ITALIC) codepage T1GI0361\n.*  bital10 font x0 or x1a1750c\n.df bital10 type('ITC SOUVENIR' 10 BOLD ITALIC) codepage T1GI0361\n.*  bital11 font x0 or x1a175ac\n.df bital11 type('ITC SOUVENIR' 11 BOLD ITALIC) codepage T1GI0361\n.*  bital12 font x0 or x1a175bc\n.df bital12 type('ITC SOUVENIR' 12 BOLD ITALIC) codepage T1GI0361\n.*  bital14 font x0 or x1a175dc\n.df bital14 type('ITC SOUVENIR' 14 BOLD ITALIC) codepage T1GI0361\n.*  bital16 font x0 or x1a175fc\n.df bital16 type('ITC SOUVENIR' 16 BOLD ITALIC) codepage T1GI0361\n.*  bital18 font x0 or x1a175hc\n.df bital18 type('ITC SOUVENIR' 18 BOLD ITALIC) codepage T1GI0361\n.*  bital20 font x0 or x1a175jc\n.df bital20 type('ITC SOUVENIR' 20 BOLD ITALIC) codepage T1GI0361\n.*  bital24 font x0 or x1a175nc\n.df bital24 type('ITC SOUVENIR' 24 BOLD ITALIC) codepage T1GI0361\n.*  bital30 font x0 or x1a175tc\n.df bital30 type('ITC SOUVENIR' 30 BOLD ITALIC) codepage T1GI0361\n.*  bital36 font x0 or x1a175zc\n.df bital36 type('ITC SOUVENIR' 36 BOLD ITALIC) codepage T1GI0361\n.*  *******************************************************************\n.*  Fonts invoked in compatible documents (PR12 is fixed pitch)\n.*  *******************************************************************\n.*  bold   font x0 or x1a075ac\n.df bold   type('ITC SOUVENIR' 11 BOLD) codepage T1GI0361\n.*  italic font x0 or x1a155ac\n.df italic type('ITC SOUVENIR' 11 ITALIC) codepage T1GI0361\n.*  bital  font x0 or x1a175ac\n.df bital  type('ITC SOUVENIR' 11 BOLD ITALIC) codepage T1GI0361\n.*  elite  font x0 or x1pr12\n.df elite  type('PRESTIGE' 9) codepage T1D0BASE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCLIB": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x02[\\x02[\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 603, "newlines": 603, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=S14TOUR                                13AUG93 18.34.26\n.dd DSMTPROF dsn 'SYS0.SCRIPT.MACLIB(DSMTPROF)'\n.im dsmtprof\n.if &$pdev \u00ac= PS .if &$pdev \u00ac= 1403 .if &$pdev \u00ac= 3270\n.th .se schwablogo = 'logoname=''s1csl2'''\n.el .se schwablogo =\n:gdoc sec='Charles Schwab & Co., Inc.'.\n:titlep.\n:title stitle='Brown Bag Presentation'.\nA Guided Tour of PDF Option S.14.1 Foreground Script/VS\n:date.\n:author.William J. Smith\n:address.\n:aline.OSVS Technical Services\n:aline.101 Montgomery Street\n:aline.San Francisco, CA  94104-4122\n:eaddress.\n:etitlep.\n:body.\n:trhead left='Foreground Script/VS'\n        subject='Today''s Agenda'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Let''s Get Started !'.\n:h2.Welcome !\n:ul.\n:li.Introduction and a Brief History of S.14\n:li.Logical vs. Real Devices\n:li.SCRIPT:  TSO Command Syntax\n:li.The S.14 Advanced Panels:  Panel Flow\n:li.Print Disposition & Separator Page Defaults\n:li.The SCRIPTIT Edit Macro\n:li.Closing Remarks... Questions ?\n:eul.\n:p.Questions are\n:hp1.\nalways\n:ehp1.\nwelcome and encouraged throughout the presentation.\n:note.\n:hp1.\nPlease\n:ehp1.\ncomplete a class evaluation form before departing - even if you must\nleave early.\n.cp\n:trhead left='Foreground Script/VS'\n        subject='A Brief History of S.14'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Genesis of an Application'.\n:h2.Circa 1985 - Initial Implementation\n:p.The Schwab Script/VS dialog was developed collectively over a very\nshort period of time by a systems programmer and a summer intern.  It\nwas designed to address inadequacies and bugs in the IBM ISPF/PDF 4.9\nScript/VS option.\n:ul.\n:li.The Schwab ISPF dialog replacement consisted of 1,400 lines of\ntotally\n:hp3.\nundocumented,\n:ehp3.\n\"spaghetti\" CLIST code and about a dozen ISPF panels written for an\nearly level of TSO/E and ISPF/PDF.\n:li.ISPF/PDF option 4.9 was\n:hp3.removed:ehp3.\naltogether from the option 4 foreground panel until early 1989.\n:li.Despite poor support, \"S.14\", as it became known throughout Schwab,\nwas the\n:hp3.de facto,:ehp3.\npanel-driven interface to Script/VS 1.3.0.2 for the next 7.5 years.\n:li.Script/VS remained at the 1.3.0.2 level for\n:hp1.7 years\n:ehp1.\nwithout :hp3.any:ehp3.\nIBM corrective service until January, 1992, when Script/VS 1.4.0 was\nplaced into production.\n:li.The old S.14 generated\n:hp3.\nnumerous\n:ehp3.\nsupport problems and frustration for end users, help desk personnel, and\nsystems programmers alike.  The interface alienated many existing and\npotential Script/VS users.\n:eul.\n.cp\n:trhead left='Foreground Script/VS'\n        subject='Mid ''80''s Printer Platform'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Early Days of Page Printing'.\n:h2.Sophisticated Hardware... But...\n:p.In 1985, printing hardware at the corporate offices consisted of\nthe following printers:\n:ul.\n:li.IBM 3800-1 (1 printer)\n:li.IBM 3820   (9 printers)\n:li.IBM 3287   (many !)\n:li.IBM 4250   (1 printer)\n:li.IBM 6670   (several)\n:li.IBM 3205   (1 printer)\n:eul.\n:p.The printing hardware put in place at that time was advanced and\ntechnically \"leading edge\".\n:p.Unfortunately, application enabling tools, OEM products, and\nindustry-wide technical expertise in the use of this hardware were\nunavailable.\n.cp\n:trhead left='Foreground Script/VS'\n        subject='Early ''90''s Printer Platform'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='An ERA of Change'.\n:h2.New Printer Technology Debuts\n:p.The early '90's marked a renewed interest in printing at Schwab.  New\nprinting hardware was embraced that provided more sophistication,\nreliability, and less operating expense to the corporation:\n:ul.\n:li.Siemens 2300 and 2140\n:li.IBM 3820\n:li.ISI 7028 and 7817\n:li.IBM 3287\n:li.IBM 4224 and 4234\n:li.IBM 3205\n:li.HP LaserJets and Apple LaserWriters\n:li.EPSON 9 and 24-pin printers\n:eul.\n.cp\n:trhead left='Foreground Script/VS'\n        subject='The Main Panel'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Main Panel Setup'.\n:h2.Setting a Skill Level, Printer, and DSNAME\n:p.\nThe Document Composition Facility entry panel consists of 3 basic\nsections:\n:ul.\n:li.Skill-level and Output Device\n:li.Choice of Dataset Name\n:li.Graphics Preview Using GDDM CDPU\n:eul.\n:p.\nTo effectively use S.14.1 and Script/VS the user must understand two\nkey concepts:\n:ol.\n:li.Logical vs. real (intended) output devices\n:li.Keyword vs. positional parameters on a TSO command\n:eol.\n.cp\n:h2.Basic vs. Advanced Modes\n:h3.Basic Mode:  For the Novice, Casual User\n:p.\nBasic mode is the simplest means by which a user can format a document.\n:p.\nSimply specify an output device, a DSNAME, depress the Enter key and\ndocument formatting will begin !\n:h3.Advanced Mode:  Formatting for the Power User\n:p.\nThe Advanced mode is the most sophisticated means by which you can\ncontrol the execution of the Script/VS formatter.  Virtually any keyword\noperand can be specified or changed.\n:p.\nThe panel defaults are usually satisfactory for even most power users.\nAnd like Basic mode, when using an Advanced mode panel, just\ndepress the Enter key and document formatting will begin !\n.cp\n:h2.12 Logical Device Types\n:p.\nThe Output Device field on the main panel allows the user to select any\none of the following 12 logical devices:\n:ul.\n:li.\n:hp2.TERM :ehp2.or\n:hp2.3270::ehp2.\nDisplay output on your presentation device (hardcopy terminal or\nCRT).\n:li.:hp2.1403::ehp2.\nIBM 1403 high-speed, impact line printer or compatible.\n:li.:hp2.3800::ehp2.\nThe IBM 3800-3, Siemens 2300, or Siemens 2140 AFP high-speed, page\nprinter.\n:li.:hp2.PS::ehp2.\nAny PostScript or compatible low-speed, desktop page printer.\nAn Apple LaserWriter or HP LaserJet equipped with Adobe PostScript or\na Pacific Data Products PostScript Emulation Cartridge may be used.\n:li.:hp2.3820::ehp2.\nAny IBM 3820 or compatible AFP page printer.\n:li.:hp2.3812::ehp2.\nAny IBM 3812 or compatible mid-range, AFP page printer including the ISI\n7028 or 7817 page printer when configured as an IBM 3812.\n:li.:hp2.3816::ehp2.\nAny IBM 3816 or compatible mid-range, AFP page printer including the ISI\n7028 or 7817 page printer when configured as an IBM 3816.\n:li.:hp2.4224::ehp2.\nAny IBM 4224 or 4234, black or 4-color ribbon printer.\n:li.:hp2.4028::ehp2.\nAny IBM 4028 or compatible mid-range, AFP page printer including the ISI\n7028 or 7817 page printer when configured as an IBM 4028.\n:li.:hp2.AFP::ehp2.\nAny IBM page printer that supports either 240 or 300 pels SAA Core\nInterchange Scalable Font Technology (virtually all IBM page\nprinters).\n:li.:hp2.ISI::ehp2.\nThis is a \"generic\" logical device type that matches the default\nconfiguration set on the front panel of any ISI page printer.  It is\ncurrently \"hardwired\" in the S.14 dialog as an IBM 3816.  All ISI\nprinters are currently configured to emulate IBM 3816 Page Printers.\nHowever, the Printing Technology Group plans to change the printers to\nemulate IBM 4028 Page Printers in the future.  Users will be able to\ntake advantage of printing at a higher density (and quality) of\n300 pels per square inch rather than 240 with the IBM 3816.\n:eul.\n:note.PostScript is a registered trademark of Adobe Systems, Inc.,\nMountain View, California.\n.cp\n:h2.The GDDM CDPU:  Composite Document Printing Utility\n:p.\nThe GDDM CDPU is a utility that is provided as part of IBM's Graphical\nData Display Manager program product.\n:p.\nThe CDPU is a standalone utility that can be used to browse output files\ngenerated by Script/VS for printing upon a 3800, 3820, 3812, 3816, 4224,\n4028, and AFP logical devices.\n:p.\nTo browse a document after successful formatting set the 'Preview the\nScript output file' option on the main entry panel to\n:hp1.\nY.\n:ehp1.\nYou\n:hp2.\nmust\n:ehp2.\nhave the following hardware and/or software to use the CDPU:\n:ul.\n:li.An IBM display terminal configured to support host graphics.\n:li.You must be logged on TSO with graphics active (e.g. TS01M2G,\nTS01M3G, TS03M2G, TS03M3G, etc.).\n:li.A personal computer configured to support host graphics.\n:ul.\n:li.OS/2 1.3, 2.0, or 2.1 with GDDM OS/2 LINK (available to all OS/2\nusers - contact OSVS Technical Services)\n:li.EXTRA! for DOS with Host Graphics Option (HGO)\n:li.EXTRA! Extended for DOS with Host Graphics Option\n:li.EXTRA! Extended for Windows with Host Graphics Option (many bugs !)\n:eul.\n:eul.\n:h3.GDDM User Control and the PA3 key\n:p.\nOnce the CDPU is active, the PA3 key (SHIFT + PageDown when using EXTRA!\nwith HGO) will activate the GDDM User Control Function, the ZOOM IN/OUT\nfunctions, and mouse support with the graphics cursor (\"cross hair\").\n:h3.Executing the CDPU Outside of S.14\n:p.\nIf a document is kept after Script formatting is complete, the CDPU may\nalso be invoked from TSO READY, ISPF option 6, or an ISPF command line\nby using the CDPU CLIST.\n:p.\nFor example:  %CDPU S14TOUR.LIST3820\n.cp\n:trhead left='Foreground Script/VS'\n        subject='Advanced Mode Panels'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Panels for Power Users'.\n:h2.9 Advanced Mode Panels\n:p.\nMaking a choice of any one of the 12 logical device types will display\n1 of the 9 Advanced mode device panels.\n:p.\nThe Advanced mode panels were redesigned while following the following\nhuman factors guidelines:\n:ul.\n:li.Consistent presentation of panel input fields across all Advanced\nmode panels.\n:li.Logical grouping of panel input fields.\n:li.Consistent use of color and highlighting with corresponding text\ndescriptive of the input field and its use.\n:li.Reasonable input field defaults acceptable to a wide audience of\nusers at varying skill levels.\n:li.Meaningful, short and long, pop-up message text.\n:li.Boiler-plate tutorial panels accompanying each advanced logical\ndevice panel.\n:li.Maintain the \"look and feel\" of the original application.\n:li.KIS:\n.us on\nKeep\nIt\nSimple.\n.us off\n:eul.\n.cp\n:trhead left='Foreground Script/VS'\n        subject='Advanced Mode Panels'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Core Panel Options'.\n:h2.Understanding Advanced Mode Panel Options\n:p.All Advanced Mode panels contain the following core set of\noptions with identical defaults:\n:ul.\n:li.Binding:  corresponds to the Script/VS\n:hp3.BIND:ehp3. keyword parameter.\n:li.Change separator pages:  displays the job output separator pages.\n:li.Character set 1/2/3/4:  corresponds to the Script/VS\n:hp3.CHARS:ehp3. keyword parameter.\n:li.Error message controls:  corresponds to the Script/VS\n:hp3.MESSAGE:ehp3. keyword parameter.\n:li.Spelling verification:  corresponds to the Script/VS\n:hp3.SPELLCHK:ehp3. keyword parameter.\n:li.Uppercase text output:  corresponds to the Script/VS\n:hp3.UPCASE:ehp3. keyword parameter.\n:li.Profile data set:  corresponds to the Script/VS\n:hp3.PROFILE:ehp3. keyword parameter.\n:li.SCRIPT maclib dsname:  corresponds to the Script/VS\n:hp3.LIB:ehp3. keyword parameter.\n:li.Other SCRIPT options:  allows specification of other Script/VS\nkeyword parameters not available as a panel option (e.g.\n:hp3.PAGE:ehp3.).\n:eul.\n:p.\nRefer to the\n:hp1.\nIBM Document Composition Facility SCRIPT/VS Language Reference\nRelease 4.0,\n:ehp1.\nSH35-0070-06, for detailed information on SCRIPT/VS TSO command language\nsyntax.\n:pa\n:trhead left='Foreground Script/VS'\n        subject='Advanced Mode Panels'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Unique Panel Options'.\n:h2.Exploring Unique Panel Options\n:p.Some of the Advanced Mode panels contain options that are unique\nto their logical device family.\n:p.A feature unique to\n:hp3.\nall\n:ehp3.\nlogical device families is the ability to specify the name of any member\nof the logical device family.  This feature will be explained below in\ngreater detail.\n:ul.\n:li.\n:hp2.TERM :ehp2.or\n:hp2.3270::ehp2.\n:ul.\n:li.Actual terminal type:  this options allows you to select between a\na hardcopy presentation device (i.e. IBM 2741) or an IBM 3270 display\nor functional equivalent.\n:eul.\n:li.:hp2.1403::ehp2.\n:ul.\n:li.1403 or STAIRS device:  this options allows you to select any of\nthe 1403 logical device types or specify STAIRS/VS output.  Note that\nSTAIRS/VS is not installed at Charles Schwab & Co.\n:eul.\n:li.:hp2.3800::ehp2.\n:ul.\n:li.The 3800 is a continuous forms device and does not support duplex\nprinting.  Rotation of output is necessary in order to obtain a document\nthat can be read in \"portrait\" orientation.\n:eul.\n:li.:hp2.PS::ehp2.\n:ul.\n:li.ASCII or EBCDIC output:  this option allows you to chose either\nASCII or EBCDIC as the format of your PostScript file.  If EBCDIC is\nchosen, the output file will be automatically browsed upon successful\nformatting of the document.\n:li.Orientation or device:  this option allows you to chose any of 4\npossible output orientations or specify any PostScript logical device.\n:li.Separation master no.s:  this option allows the user to separate a\npage into multiple masters for use in offset printing to produce color\ndocuments or multi-part forms.\n:li.PostScript imbed lib:  this option allows you to specify the name\nof an imbed library containing host-resident PostScript source code\nsuch as PC clipart.\n:eul.\n:li.:hp2.3820::ehp2.\n:ul.\n:li.Duplex hardcopy output:  this option allows you to duplex your\noutput.  Duplexing is a hardware dependent feature that allows printing\non both sides of a single page.\n:li.Page seglib dsname:  this option allows you to specify the name of a\npartitioned data set containing a page segment for inclusion in a\ndocument.\n:eul.\n:li.:hp2.4224::ehp2.\n:ul.\n:li.Page size or device:  this option allows you to choose a specific\ncontinuous forms page size (typically width dependent) that corresponds\nto a given logical device.  Rotation of output is application dependent\nand is not a function of the hardware.\n:eul.\n:li.:hp2.4028:ehp2. and :hp2.AFP::ehp2.\n:ul.\n:li.The 4028 is a 300 pels device and supports use of the IBM Core\nInterchange Fonts.  You are encouraged to use the AFP logical device\ntype for all of your documents.  The IBM Core Interchange Fonts are\nIBM's strategic set of fonts for the future.  They are being provided on\nall SAA operating systems and presentation devices to maximize\ninteroperability.  They are a key component of IBM's strategy of 'Print\nand View Anywhere'.\n:eul.\n:eul.\n.cp\n:trhead left='Foreground Script/VS'\n        subject='Print File Processing'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Print, Keep, or Delete'.\n:h2.PK, PD, K, or D\n:p.\nThe Print File Processing panel provides the user with 4 options for\nhandling the file generated by the Script/VS formatter.\n:ol.\n:li.PK - Print data set and keep\n:li.PD - Print data set and delete (the default)\n:li.K  - Keep data set (without printing) - also known as the old\n\"DISK\" option\n:li.D  - Delete the data set (without printing)\n:eol.\n:p.\nAll Script/VS output files are allocated on SMS-managed TSO storage\nvolumes as PDS/Es (partitioned data sets extended).  The print file\nattributes are displayed using the TSO/E LISTDSI builtin function.\n:p.\nThe CPU (central processing unit) time and SRM (system resource manager)\nservice units are displayed on the panel.  These values can be used to\ndetermine a correct job class when formatting the same document in batch\nusing the TSO batch TMP, IKJEFT01.\n:note.If the\n:hp1.\nEND\n:ehp1.\ncommand is entered, the Script print file is\n:hp1.\nkept\n:ehp1.\nwithout printing.\n.cp\n:trhead left='Foreground Script/VS'\n        subject='Print Distribution Separator Page'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Output Job Separators'.\n:h2.Output Distribution & Job Separators\n:p.\nThe Print Distribution and Separator Page Defaults panel is entirely\nnew with this release of S.14.  It was written to assist with the\nincreasing complexity of separating and distributing computer output.\n:p.\nMany of the fields on the panel are initialized with values that will be\nof use to a large number of users.  All of the fields on the panel can\nbe\n:hp1.\novertyped\n:ehp1.\nand changed at will.\n:p.\nIf a document is created using output device 1403, it is possible to\nroute the document to\n:hp1.\nany\n:ehp1.\nSchwab branch office using a valid VPS printer destination.\n:p.\nIn addition the EXT WTR field can be used to download escape sequences\nfrom the mainframe to print a 1403 formatted document on a\ncoax-attached, VPS-driven, HP LaserJet using printer resident or\ncartridge resident fonts.\n:h3.Fields Found on the Job Separator Pages\n:p.\nThe following fields are 60 characters in length and are documented in\nthe MVS/ESA \"JCL Reference\", GC28-1654, Chapter 21, topic 'OUTPUT JCL\nStatement', page 21-1:\n:ul.\n:li.TITLE\n:li.DEST\n:li.NAME\n:li.ROOM\n:li.BUILDING\n:li.DEPARTMENT\n:li.ADDRESS\n:eul.\n:p.The print NOTIFY field allows specification of the node and userid to\nreceive a print complete message when the documents has finished\nprinting (i.e. can be found in the output tray).\n:p.\nAn example of multiple recipients:  CS02.SPGWJS CS01.SPGLOZ CS04.PHOENIX\n.cp\n:trhead left='Foreground Script/VS'\n        subject='SCRIPTIT Edit Macro'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Executing Script/VS from EDIT'.\n:h2.SCRIPTIT:  Rewritten and Enhanced\n:p.\nThe SCRIPTIT edit macro has been rewritten and enhanced to work with the\nnew version of S.14.  SCRIPTIT has 2 new operating modes:\n:ul.\n:li.SKILL\n:li.CDPU\n:eul.\n:h3.Operating Modes\n:h4.SCRIPTIT\n:p.\nIf SCRIPTIT is typed from the PDF EDIT command line with no operands,\nthe document will be formatted using output device AFP in Basic mode.\n:h4.SCRIPTIT A\n:p.\nIf SCRIPTIT is typed from the PDF EDIT command line followed by an A,\nthe AFP Advanced mode panel will display.\n:h4.SCRIPTIT B\n:p.\nIf SCRIPTIT is typed from the PDF EDIT command line followed by a B, the\ndocument will be formatted using output device AFP in Basic mode.\n:h4.SCRIPTIT A YES\n:p.\nIf SCRIPTIT is typed from the PDF EDIT command line followed by an\nA and YES (for CDPU), the document will be formatted in Advanced mode\nand subsequently displayed with the GDDM CDPU.\n:h4.SCRIPTIT B YES\n:p.\nIf SCRIPTIT is typed from the PDF EDIT command line followed by a B and\nYES (for CDPU), the document will be formatted in Basic mode and\nsubsequently displayed with the GDDM CDPU.\n.cp\n:trhead left='Foreground Script/VS'\n        subject='Closing Remarks'\n        &schwablogo\n        logopos=right.\n:trfoot left='Publisher''s Workbench'\n        center='Script/VS is Host Publishing'.\n:h2.Thanks for Attending !\n:p.\n.bx left right\n.fo off\n.sp .25i\n.ce on\nWilliam J. Smith\nOSVS Technical Services\n101 Montgomery Street, 5th Floor\nSan Francisco, CA  94104-4122\n(415) 627-7607  TOSS ID: Bill Smith\n.ce off\n.sp .25i\n.fo on\n.bx off\n:p.\n:hp1.\nPlease\n:ehp1.\ncomplete a class evaluation form before departing - even if you must\nleave early.\n:h3.For More Information on Script/VS ...\n:p.\nType\n:hp1.FSHELP SCRIPT\n:ehp1.\nto obtain a complete list of Document Composition Facility manuals and\npublications.\n:p.\nTo obtain a list of the SCRIPT/VS keyword operands, type\n:hp1.SCRIPT ?.\n:ehp1.\n.pa\n.sp 1i\n:fig frame=box.\n.ce on\nThis presentation was prepared using the Script/VS Overhead Transparency\nGML tags.  The Script source for this document can be found in\nSYS0.SCRIPT.SAMPLIB(S14TOUR).\n:p.\nThe document was formatted using the 3820 logical device family using\nthe IBM Core Interchange Fonts and printed on an ISI 7028 configured as\nan IBM 3816.\n.ce on\n:efig.\n.pa\n.sp 1i\n:p.\n:fig frame=box.\n.ce on\nI gratefully wish to thank Lauretta Zerga in the Printing Technology\nGroup for her help in testing and debugging the application.\n.ce off\n:efig.\n:egdoc.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MLIB": {"ttr": 2052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x01\\xc4\\x01\\xc4\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 452, "newlines": 452, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=SCHP00                                 13AUG93 18.34.20\nSCHP000  'Script/VS ended RC=&RC'      .TYPE=NOTIFY   .WINDOW=NORESP\n'Script/VS formatting has ended with a return code of &RC. due ' +\n'to a user requested termination using the END or RETURN command. ' +\n'The ISPF DISPLAY service was in control when the application was ' +\n'terminated at the user''s request.'\n\nSCHP001  'Script/VS ended RC=&RC'      .TYPE=CRITICAL .WINDOW=RESP\n'Script/VS formatting has ended with a return code of &RC.  If ' +\n'the return code is 12, the specified panel, message, message ' +\n'location field, or cursor field could not be found.  If the return ' +\n'code is 16, a truncation or translation error occurred during ' +\n'storing defined variables.  If the return code is 20, a severe ' +\n'error occurred.'\n\nSCHP002  'Enter a member name'         .TYPE=WARNING  .WINDOW=NORESP\n'Script/VS formatting has ended with a return code of &RC.  If ' +\n'the return code is 12, the specified panel, message, message ' +\n'location field, or cursor field could not be found.  If the return ' +\n'code is 16, a truncation or translation error occurred during ' +\n'storing defined variables.  If the return code is 20, a severe ' +\n'error occurred.'\n\nSCHP003  'Data set not PO or PS'       .TYPE=WARNING  .WINDOW=NORESP\n'The organization of the dataset that you have specified is neither ' +\n'partitioned (PO) nor physical sequential (PS).  Script/VS only ' +\n'formats documents in datasets with an organization of PO or PS. ' +\n'VSAM and BDAM organizations are not supported.  Specify a data set ' +\n'that is either partitioned or physical sequential.'\n\nSCHP004  'SCRPTFIL ALLOCATE RC=&RC'    .TYPE=CRITICAL .WINDOW=RESP\n'The allocation of the Script/VS output file has failed with a ' +\n'return code of &RC..  This is a severe error.  This error may ' +\n'indicate that the SMS-managed TSO storage pool has inadequate free ' +\n'storage to accomodate your request.  The error occurred during ' +\n'allocation of DDNAME SCRPTFIL at label FILE_PROCESSING_ALLOCATION. ' +\n'Should the problem re-occur, contact Technical Services.'\n\nSCHP005  'SCRPTFNT ALLOCATE RC=&RC'    .TYPE=CRITICAL .WINDOW=RESP\n'The allocation of one or more printer-dependent font libraries has ' +\n'failed with a return code of &RC..  This is a severe error.  The ' +\n'error occurred during allocation of DDNAME SCRPTFNT at label ' +\n'FONTLIB_PROCESSING.  Should the problem re-occur, contact Technical ' +\n'Services.'\n\nSCHP006  'SCRPTLIB ALLOCATE RC=&RC'    .TYPE=CRITICAL .WINDOW=RESP\n'The allocation and concatenation of symbol and macro libraries has ' +\n'failed with a return code of &RC..  This is a severe error.  The ' +\n'error occurred during allocation of DDNAME SCRPTLIB at label ' +\n'LIB_PROCESSING.  Should the problem re-occur, contact Technical ' +\n'Services.'\n\nSCHP007  'SCRPTPRO ALLOCATE RC=&RC'    .TYPE=CRITICAL .WINDOW=RESP\n'The allocation of an alternative Script profile library has failed ' +\n'with a return code of &RC..  This is a severe error.  The error ' +\n'occurred during allocation of DDNAME SCRPTFNT at label ' +\n'FONTLIB_PROCESSING.  Should the problem re-occur, contact Technical ' +\n'Services.'\n\nSCHP008  'TEXTLIB ALLOCATE RC=&RC'     .TYPE=CRITICAL .WINDOW=RESP\n'The allocation of an alternative partitioned data set that contains ' +\n'imbedded or appended files has failed with a return code of &RC.. ' +\n'This is a severe error.  The error occurred during allocation of ' +\n'DDNAME TEXTLIB at label SEARCH_PROCESSING.  Should the problem ' +\n're-occur, contact Technical Services.' +\n\nSCHP009  'SCRPTSEG ALLOCATE RC=&RC'    .TYPE=CRITICAL .WINDOW=RESP\n'The allocation and concatenation of multiple page segment libraries ' +\n'has failed with a return code of &RC..  This is a severe error. ' +\n'The error occurred during allocation of DDNAME SCRPTSEG at label ' +\n'SEGLIB_PROCESSING.  Should the problem re-occur, contact Technical ' +\n'Services.'\n\nSCHP000A 'Data set does not exist'     .TYPE=CRITICAL .WINDOW=NORESP\n'The &&SYSDSN built-in function has determined that the specified ' +\n'data set or data set and member do not exist.  Check to see that ' +\n'the data set name being specified exists.  Should the problem ' +\n're-occur, contact Technical Services.'\n\nSCHP000B 'Graphics has ended RC=&RC'   .TYPE=NOTIFY   .WINDOW=NORESP\n'GDDM graphics initialization has ended with a return code of &RC.. ' +\n'The ISPF SELECT service was in control when the application was ' +\n'terminated.'\n\nSCHP000C 'Graphics has ended RC=&RC'   .TYPE=WARNING  .WINDOW=NORESP\n'GDDM graphics initialization has ended with a return code of &RC. ' +\n'because termination was requested using the END or RETURN command. ' +\n'The ISPF DISPLAY service was in control when the application was ' +\n'terminated.'\n\nSCHP000D 'Allocation failure RC=&RC'   .TYPE=CRITICAL .WINDOW=RESP\n'A severe error occurred allocating either your GDDM DATA or FORMAT ' +\n'library.  A return code of &RC was returned from the TSO ALLOCATE ' +\n'command at label PAGE_SEGMENT_PROCESSING.  Check to see that your ' +\n'ADMCFORM (&CHFNAME) and ADMCDATA (&CHFDNAME) libraries exist.  ' +\n'Should the problem re-occur, contact Technical Services.'\n\nSCHP000E 'ADMUCDSO failure RC=&RC'     .TYPE=CRITICAL .WINDOW=RESP\n'A severe error occurred executing the IBM-supplied utility ' +\n'ADMUCDSO while converting an ICU data and format component into a ' +\n'page segment.  The return code from the TSO CALL command was &RC.. ' +\n'Refer to the GDDM \"Interactive Chart Utility\" and/or \"PGF ' +\n'Programming Reference\" for information on the return codes from ' +\n'ADMUCDSO.  Should the problem re-occur, contact Technical Services.'\n\nSCHP000F 'Page segment created'        .TYPE=NOTIFY   .WINDOW=NORESP\n'ADMUCDSO has successfully converted your ICU DATA and FORMAT ' +\n'components into a newly created page segment.  The newly created ' +\n'page segment will have a name of the form ' +\n'\"USERID.CHART_DATA_NAME.ADMIMAGE\" where CHART_DATA_NAME is the ' +\n'ICU chart data name specified on the ICU to Page Segment Conversion ' +\n'panel.  If a dataset by that name already exists, ADMUCDSO will ' +\n'over-write (i.e. replace) it during the creation of the new page ' +\n'segment.'\n\nSCHP000G 'BROWSE service RC=&RC'       .TYPE=CRITICAL .WINDOW=RESP\n'The ISPF/PDF BROWSE has terminated with a return code of &RC.  If\n'the return code is 12, the BROWSE service has determined that ' +\n'there is zero-length data; i.e. an empty sequential data set or ' +\n'zero-length member of a partitioned data set.  If RC=14, then the ' +\n'specified member was not found.  If RC=16, then no members matched ' +\n'the specified pattern, or no members in the partitioned data set. ' +\n'If RC=20, severe error; unable to continue.'\n\nSCHP000H 'CDPU SELECT RC=&RC'          .TYPE=CRITICAL .WINDOW=RESP\n'The ISPF/PDF SELECT service has terminated with a return code of ' +\n'&RC. while attempting to CALL ADM4CDUT to display a composite ' +\n'document.  The error occurred at label GDDM_CDPU_PROCESSING.  A ' +\n'return code greater than 4 does NOT indicate that the formatted ' +\n'document will not print.  It may indicate that the document cannot ' +\n'be viewed on the requested output display, missing graphics ' +\n'emulation software, etc.  Should the problem re-occur, contact ' +\n'Technical Services.'\n\nSCHP000I 'Output Printed and Kept'     .TYPE=NOTIFY   .WINDOW=NORESP\n'Your Script/VS output file has been queued for printing using ' +\n'the TSO/E PRINTDS command processor.  The output file will be kept ' +\n'online and may be used to re-print additional copies of your ' +\n'document in the future.'\n\nSCHP000J 'Output Printed && Deleted'   .TYPE=NOTIFY   .WINDOW=NORESP\n'Your Script/VS output file has been queued for printing using the ' +\n'TSO/E PRINTDS command processor.  The output file was deleted after ' +\n'PRINTDS processing successfully completed.'\n\nSCHP000K 'Output file Kept (saved)'    .TYPE=NOTIFY   .WINDOW=NORESP\n'Your Script/VS output file has been kept online and may be used ' +\n'to re-print additional copies of your document in the future.'\n\nSCHP000L 'Output file Deleted'         .TYPE=NOTIFY   .WINDOW=NORESP\n'Your Script/VS output file has been deleted.'\n\nSCHP000M 'PRINT processing ended'      .TYPE=NOTIFY   .WINDOW=NORESP\n'The ISPF DISPLAY service has terminated with a return code of ' +\n'&RC. after displaying the Print File Processing or Print ' +\n'Distribution && Separator Page Defaults panel.  Your Script/VS ' +\n'output file will be kept and not printed.  A return code of 8 ' +\n'indicates a user requested termination using the END or RETURN ' +\n'command.'\n\nSCHP000N 'PRINT processing error'      .TYPE=CRITICAL .WINDOW=RESP\n'The ISPF DISPLAY service has terminated with a return code of ' +\n'&RC. after displaying the Print File Processing or Print ' +\n'Distribution && Separator Page Defaults panel.  Your Script/VS ' +\n'output file will be kept and not printed.  A return code greater ' +\n'than 8 indicates a severe error.  Should the error re-occur, ' +\n'contact Technical Services.'\n\nSCHP000O 'OUTDES/PRINTDS ERROR'        .TYPE=CRITICAL .WINDOW=RESP\n'A non-zero return code was returned while processing either the ' +\n'TSO/E OUTDES or PRINTDS command prcessors in subroutine ' +\n'OUTDES_PRINTDS_SUBROUTINE.  This message indicates a severe ' +\n'processing error and should be referred to Technical Services for ' +\n'analysis.'\n./ ADD NAME=SCHP01                                 13AUG93 18.34.20\nSCHP010 'Select a DCF skill level'    .TYPE=ACTION   .WINDOW=NORESP\n'Select a skill level to initiate formatting of your Script/VS ' +\n'document.  Advanced mode provides the greatest control over ' +\n'Script/VS formatting.  Basic mode is a fast path and assumes, ' +\n'where appropriate, all advanced mode panel defaults.'\n\nSCHP011 'Select an output device '    .TYPE=ACTION   .WINDOW=NORESP\n'Select an output device on which you wish to have your document ' +\n'printed.  The physical device you have entered is not supported or ' +\n'is missing.'\n\nSCHP012 'Preview not available '      .TYPE=ACTION   .WINDOW=NORESP\n'A value of Y (i.e. YES) may not be specified when formatting a ' +\n'document upon a terminal (TERM or 3270), an IBM 1403 high-speed ' +\n'impact printer, or a PostScript-capable printer.'\n\nSCHP013 'Select Y or N to preview'    .TYPE=ACTION   .WINDOW=NORESP\n'Select a value of Y for YES or N for NO to preview your document ' +\n'upon a graphics-capable workstation monitor using IBM''s Graphical ' +\n'Data Display Manager (GDDM).  You must have the appropriate 3270 ' +\n'graphics emulator software installed to display host graphics upon '\n'a coax- or token-ring attached workstation.'\n\nSCHP014 'Enter ODD margin offset'     .TYPE=ACTION   .WINDOW=NORESP\n'The BIND option causes Script/VS to shift the formatted output of ' +\n'each page to the right side of the paper.  You can specify a ' +\n'binding for odd-numbered pages and a different binding for ' +\n'even-numbered pages.  Binding values can be given in any valid ' +\n'space unit.  If you specify an EVEN page margin offset, then enter ' +\n'an ODD page margin offset, too.'\n\nSCHP015 'Chose a separator option'    .TYPE=ACTION   .WINDOW=NORESP\n'The default value of Y (i.e. YES) causes the Print Distribution & ' +\n'Separator Page Defaults panel to display if printing of a Script/VS ' +\n'output file is requested.  A value of N (i.e. NO) suppresses ' +\n'display of this panel.  You may want to suppress display of the ' +\n'Print Distribution & Separator Page Defaults panel after you have ' +\n'configured this panel to meet your needs.'\n\nSCHP016 'CHARS not alphanumeric'      .TYPE=ACTION   .WINDOW=NORESP\n'The CHARS option identifies the fonts to be used.  For page ' +\n'devices, you specify an 8-character font identifier for the coded ' +\n'font.  For PostScript devices, you specify a 1- to 8-character ' +\n'AFM (Adove Font Metrics) filename.  If you specify the CHARS ' +\n'option, you must specify at least one font.  You can specify a ' +\n'maximum of 31 fonts.'\n\nSCHP017 'Select Y or N to duplex'     .TYPE=ACTION   .WINDOW=NORESP\n'The duplex option allows the user to print on both sides of a ' +\n'single sheet of paper.  Duplexed output is a hardware-dependent ' +\n'feature of cut-sheet printers.  It is not a feature of the IBM ' +\n'4028.  However, it is an option of the Interface Systems 7028 and ' +\n'7817 when emulating an IBM 4028.  A value of Y (i.e. YES) causes a ' +\n'FORMDEF name of DSCRPT to appear in the FORMDEF field of the Print ' +\n'Distribution & Separator Page Defaults panel.'\n\nSCHP018 'Select T or O for msgs'      .TYPE=ACTION   .WINDOW=NORESP\n'The MESSAGE option controls the amount and timing of the ' +\n'information Script/VS provides with error messages.  If the O ' +\n'option (i.e. Output file) is selected, Script/VS issues a DELAY ' +\n'request causing Script/VS to suppress displaying messages while a ' +\n'document is being displayed or printed.  Script/VS accumulates ' +\n'messages in a utility file (DSMUTMSG) and appends them to the end ' +\n'of the formatted output.'\n\nSCHP019 'Select Y or N for trace'     .TYPE=ACTION   .WINDOW=NORESP\n'If the TRACE option is set to Y (i.e. YES), then Script/VS lists, ' +\n'whenever appropriate, the sequence of imbedded files, from the file ' +\n'that includes the next line after the error input line, backward ' +\n'to the primary input file.  This is useful when a file is imbedded ' +\n'in many other files.'\n\nSCHP010A 'Enter angle/device type'    .TYPE=ACTION   .WINDOW=NORESP\n'Specify 90, 180, or 270-degree rotation for your output.  An ' +\n'alternative option is to enter any one of the following AFP core ' +\n'font logical device type names for rotation or use of non-standard ' +\n'output media:  AFPA, AFPA90, AFPA180, AFPA270, AFPL, AFPA4, AFPB4, ' +\n'AFPB5, AFPE.  In each case, the logical device name is substituted ' +\n'in the DEVICE keyword operand of the SCRIPT TSO command.  Consult ' +\n'the \"Script/VS Language Reference\" for specific default page ' +\n'dimensions for each logical device.'\n\nSCHP010B 'Enable spell checking'      .TYPE=ACTION   .WINDOW=NORESP\n'Select a value of Y (i.e. YES) or N (i.e. NO) to verify correct ' +\n'spelling.  Each word is verified using the spelling and ' +\n'hyphenation dictionaries specified with the .DL (Dictionary List) ' +\n'control word.  Spelling errors are listed, using the .UW ' +\n'(Unverified Word) control word, with other errors found during ' +\n'formatting.'\n\nSCHP010C 'Select uppercase option'    .TYPE=ACTION   .WINDOW=NORESP\n'Select a value of Y (i.e. YES) or N (i.e. NO) to convert all ' +\n'lowercase letters to uppercase, but only for the formatted ' +\n'output.  This option should be specified when the output is ' +\n'directed to a printer that cannot print lowercase letters.'\n\nSCHP010D 'Select graphics option'     .TYPE=ACTION   .WINDOW=NORESP\n'Select a value of Y (i.e. YES) or N (i.e. NO) to pass control ' +\n'to the Graphical Data Display Manager and Presentation Graphics ' +\n'Facility selection menu.  This option is a \"bridge\" allowing ' +\n'use of the Interactive Chart Utility, Vector Symbol Editor, and ' +\n'the Image Symbol Editor.'\n\nSCHP010E 'Create page segment(s)'     .TYPE=ACTION   .WINDOW=NORESP\n'Select a value of Y (i.e. YES) or N (i.e. NO) to execute the ' +\n'GDDM-supplied utility ADMUCDSO to convert format and data ' +\n'components generated using the Interactive Chart Utility into ' +\n'one or more page segments.'\n\nSCHP010F 'Enter a valid DSNAME'       .TYPE=ACTION   .WINDOW=NORESP\n'The dataset name that you have entered is not a valid dataset ' +\n'name.  A dataset name must begin with an alphabetic character ' +\n'(A-Z, $, @, or #).  The remaining characters must be either ' +\n'uppercase alphanumeric or a hyphen (-).  A period is used to ' +\n'connect each qualifier in the dataset name.  ISPF first determines ' +\n'if the NOPREFIX PROFILE option is in use.  If it is, ISPF does ' +\n'not append a prefix to a dataset name without surrounding quotes. ' +\n'A maximum of 44 characters can be entered for an unquoted dataset ' +\n'name.'\n\nSCHP010G 'Select ASCII or EBCDIC'     .TYPE=ACTION   .WINDOW=NORESP\n'Select a value of A (i.e. ASCII) or E (i.e EBCDIC) to specify ' +\n'whether Script/VS generates PostScript output in ASCII or EBCDIC ' +\n'when a PostScript device is selected for output.  If ASCII is ' +\n'specified, Script/VS produces an ASCII file that can be downloaded ' +\n'to a workstation (personal computer or Apple) and printed on a ' +\n'locally attached PostScript device.  If EBCDIC is specified, ' +\n'Script/VS produces an EBCDIC file that can be viewed on the host ' +\n'system but cannot be downloaded.'\n\nSCHP010H 'Select processing option'   .TYPE=WARNING  .WINDOW=NORESP\n'Select one of the four output file processing options to process ' +\n'the output file generated during Script/VS formatting.   The KEEP ' +\n'option will allow you to retain your Script/VS output file(s) ' +\n'from one TSO session to another.  Any batch (e.g. IEBGENER) or ' +\n'TSO foreground print command (e.g. PRINTDS, VPSPRINT) may be used ' +\n'to reprint your Script/VS output files.  If the END command is ' +\n'entered, the Script print file is kept without printing.'\n\nSCHP010I 'Enter Y or N to use GDDM'   .TYPE=WARNING  .WINDOW=NORESP\n'Select a value of Y (i.e. YES) or N (i.e. NO) to continue using ' +\n'IBM''s Graphical Data Display Manager (GDDM).  You must have the ' +\n'appropriate 3270 graphics emulator software installed on your ' +\n'host-attached workstation and be logged on TSO using the correct ' +\n'VTAM LOGMODE definitions.'\n\nSCHP010J 'Enter valid member name'    .TYPE=ACTION   .WINDOW=NORESP\n'The member name that you have entered is invalid and fails to ' +\n'follow the rules of member names, up to eight alphanumeric ' +\n'characters (A-Z, #, $, @, 0-9).  The first character must be ' +\n'alphabetic (A-Z, $, @, or #).'\n\nSCHP010K 'Enter numeric characters'   .TYPE=ACTION   .WINDOW=NORESP\n'The variable data that you have entered must contain all numeric ' +\n'characters (0-9).  However, leading blanks are acceptable.'\n\nSCHP010L 'Enter a valid copy count'   .TYPE=ACTION   .WINDOW=NORESP\n'Enter a count of the number of copies that you wish to print of ' +\n'your document in the range of 1 to 255 copies.'\n\nSCHP010M 'Enter a valid job class'    .TYPE=ACTION   .WINDOW=NORESP\n'Enter an output class for processing of your document.  Valid ' +\n'output classes are:  A-Z (all alphabetic characters), 0-9 (all ' +\n'numeric characters), and * (the asterisk character).'\n\nSCHP010N 'Enter alphanumeric data'    .TYPE=ACTION   .WINDOW=NORESP\n'You have entered a FORMDEF, PAGEDEF, FORMNAME, or XWTR (external ' +\n'writer) name that does not contain only alphabetic characters ' +\n'(A-Z, #, $, or @) and/or numeric characters (0-9).  Imbedded blanks ' +\n'may not be used.'\n\nSCHP010O 'Enter printer location'     .TYPE=ACTION   .WINDOW=NORESP\n'Enter a local or remote location where your output file is to be ' +\n'printed.  The DEST parameter can send a sysout data set to a remote ' +\n'or local terminal, a node and remote work station, a local device ' +\n'or group of devices, or a node and userid.'\n\nSCHP010P 'Enter your full name'       .TYPE=ACTION   .WINDOW=NORESP\n'Enter the NAME field to print your preferred name on the separator ' +\n'pages of the output for a sysout data set.  The preferred name ' +\n'is the user's name associated with the output.  An installation can ' +\n'use a user''s name to assist in output distribution.  Your name may ' +\n'be 1-60 EBCDIC text characters.'\n\nSCHP010Q 'Enter a building name'      .TYPE=ACTION   .WINDOW=NORESP\n'Enter the BUILDING name to identify the building identification ' +\n'name or code that you wish to print upon the separator pages of ' +\n'an output data set.  An installation can use the building location ' +\n'to assist in output distribution.  The building name is 1-60 EBCDIC ' +\n'text characters.'\n\nSCHP010R 'Enter a department name'    .TYPE=ACTION   .WINDOW=NORESP\n'Enter the DEPARTMENT name to identify the name of the department ' +\n'identification that you wish to print upon the separator pages of ' +\n'an output data set.  An installation can use the department name ' +\n'to assist in output distribution.  The department name is 1-60 ' +\n'EBCDIC text characters.'\n\nSCHP010S 'Enter angle/device type'    .TYPE=ACTION   .WINDOW=NORESP\n'Specify 90, 180, or 270-degree rotation for your output.  An ' +\n'alternative option is to enter any one of the following PostScript ' +\n'logical device type names for rotation or use of non-standard ' +\n'output media:  PSA, PSA90, PSA180, PSA270, PSB, PSL, PSA3, PSA4, ' +\n'PSB5.  In each case, the logical device name is substituted ' +\n'in the DEVICE keyword operand of the SCRIPT TSO command.  Consult ' +\n'the \"Script/VS Language Reference\" for specific default page ' +\n'dimensions for each logical device.'\n\nSCHP010T 'Enter 1403/STAIRS device'   .TYPE=ACTION   .WINDOW=NORESP\n'Specify 1403N6, 1403N8, 1403W6, 1403W8, 1403W6S, 1403W8S, 1403SW, ' +\n'or STAIRS.  Note that 1403SW is a 12-pitch device; all other 1403 ' +\n'devices are 10-pitch. ' +\n'In each case, the logical device name is substituted in the DEVICE ' +\n'keyword operand of the SCRIPT TSO command.  Consult the \"Script/VS ' +\n'Language Reference\" for specific default page dimensions for each ' +\n'logical device.'\n\nSCHP010U 'Enter angle/device type'    .TYPE=ACTION   .WINDOW=NORESP\n'Specify TERM, 2741, or 3270.  The physical device type ' +\n'corresponding to the TERM logical device can be either 2741 or ' +\n'3270, depending upon the actual terminal type.  The default is ' +\n'TERM.  The formatted document will be displayed upon your terminal. ' +\n'In each case, the logical device name is substituted in the DEVICE ' +\n'keyword operand of the SCRIPT TSO command.  Consult the \"Script/VS ' +\n'Language Reference\" for specific default page dimensions for each ' +\n'logical device.'\n\nSCHP010V 'Enter angle/device type'    .TYPE=ACTION   .WINDOW=NORESP\n'Specify 90 for 90-degree rotation using logical device 38PPNS90. ' +\n'An alternative option is to enter any one of the following 3800-3 ' +\n'logical device type names for rotation or use of non-standard ' +\n'output media:  38PPN, 38PPW, 38PPNS, 38PPWS, 38PPW90, 38PPNS90, or ' +\n'38PPW270.  In each case, the logical device name is substituted ' +\n'in the DEVICE keyword operand of the SCRIPT TSO command.  Consult ' +\n'the \"Script/VS Language Reference\" for specific default page ' +\n'dimensions for each logical device.'\n\nSCHP010W 'Enter angle/device type'    .TYPE=ACTION   .WINDOW=NORESP\n'Specify 90, 180, or 270-degree rotation for your output.  An ' +\n'alternative option is to enter any one of the following 3812/3826 ' +\n'logical device type names for rotation or use of non-standard ' +\n'output media:  PG2A, PG2A90, PG2A180, PG2A270, PG2L, PG2A4, PG2B4, ' +\n'PG2B5.  In each case, the logical device name is substituted ' +\n'in the DEVICE keyword operand of the SCRIPT TSO command.  Consult ' +\n'the \"Script/VS Language Reference\" for specific default page ' +\n'dimensions for each logical device.'\n\nSCHP010X 'Enter angle/device type'    .TYPE=ACTION   .WINDOW=NORESP\n'Specify 90, 180, or 270-degree rotation for your output.  An ' +\n'alternative option is to enter any one of the following 3820 ' +\n'logical device type names for rotation or use of non-standard ' +\n'output media:  PG1A, PG1A90, PG1A180, PG1A270, PG1L, PG1A4, PG1B4, ' +\n'PG1B5.  In each case, the logical device name is substituted ' +\n'in the DEVICE keyword operand of the SCRIPT TSO command.  Consult ' +\n'the \"Script/VS Language Reference\" for specific default page ' +\n'dimensions for each logical device.'\n\nSCHP010Y 'Enter angle/device type'    .TYPE=ACTION   .WINDOW=NORESP\n'Specify 90, 180, or 270-degree rotation for your output.  An ' +\n'alternative option is to enter any one of the following 4028 ' +\n'logical device type names for rotation or use of non-standard ' +\n'output media:  PG4A, PG4A90, PG4A180, PG4A270, PG4L, PG4A4, PG4B5, ' +\n'PG4E.  In each case, the logical device name is substituted ' +\n'in the DEVICE keyword operand of the SCRIPT TSO command.  Consult ' +\n'the \"Script/VS Language Reference\" for specific default page ' +\n'dimensions for each logical device.'\n\nSCHP010Z 'Enter W,NS,L or device'     .TYPE=ACTION   .WINDOW=NORESP\n'Specify W (13.5iX11i), NS (11ix8.5i), or L (8.5ix14i) when using ' +\n'non-standard paper sizes.  An alternative option is to enter one ' +\n'of the following logical device types when using non-standard 4224 ' +\n'output media:  PG3A, PG3W, PG3NS, PG3L, PG3A4, PG3B4, PG3B5. '  +\n'In each case, the logical device name is substituted in the DEVICE ' +\n'keyword operand of the SCRIPT TSO command.  Consult the \"Script/VS ' +\n'Language Reference\" for specific default page dimensions for each ' +\n'logical device.'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PLIB1": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x0f\\x0e\\x0f\\x0e\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 3854, "newlines": 3854, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=SCHPAFP                                13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - AFP Core Interchange Scalable Fonts\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~Change separator pages%===>_Z+          Y=Yes, N=No, default=Yes\n~Character set 1       %===>_Z       ~   Character set 2       %===>_Z       +\n~Character set 3       %===>_Z       ~   Character set 4       %===>_Z       +\n~Duplex hardcopy output%===>_Z+          Y=Yes, N=No, default=No\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~Orientation or device %===>_Z      +    90,180,270 or core font logical device\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~Use GDDM/PGF graphics %===>_Z+          Y=Yes, N=No, default=No\n~Create page segments  %===>_Z+          Y=Yes, N=No, default=No\n~\n~Separation master no.s%===>_Z                                                 +\n~Page seglib dsname    %===>_Z                                                 +\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n)INIT\n  &SVAR = 9\n  .ZVARS = '(BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,+\n             DUP&SVAR,MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,GDDM&SVAR,+\n             PSG&SVAR,SPM&SVAR,SGL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR)'\n  .CURSOR = BDO&SVAR\n  .HELP   = SCHTP190\n  &LDEVTYP = '90,180,270,AFPA,AFPA90,AFPA180,AFPA270,AFPL,+\n              AFPA4,AFPB4,AFPB5,AFPE'\n\n  IF (&SEP9 = &Z)\n    &SEP9 = 'Y'\n  IF (&DUP9 = &Z)\n    &DUP9 = 'N'\n  IF (&MS19 = &Z)\n    &MS19 = 'T'\n  IF (&MS29 = &Z)\n    &MS29 = 'N'\n  IF (&SPL9 = &Z)\n    &SPL9 = 'N'\n  IF (&UPC9 = &Z)\n    &UPC9 = 'N'\n  IF (&GDDM9 = &Z)\n    &GDDM9 = 'N'\n  IF (&PSG9 = &Z)\n    &PSG9 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  IF (&BDE9 \u00ac= ' ')\n    VER (&BDO9,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO9,&BDE9)'\n  ELSE\n    IF (&BDO9 \u00ac= ' ')\n      &BIND = 'BIND(&BDO9)'\n  VER (&SEP9,NB,LIST,Y,N,MSG=SCHP015)\n  VER (&CH19,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH29,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH39,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH49,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&DUP9,NB,LIST,Y,N,MSG=SCHP017)\n  VER (&MS19,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS29,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT9,LISTV,&LDEVTYP,MSG=SCHP010A)\n  IF (&ROT9 = ' ' OR &ROT9 = 'AFPA')\n    &DEVT = AFPA\n  IF (&ROT9 = '90' OR &ROT9 = 'AFPA90')\n    &DEVT = AFPA90\n  IF (&ROT9 = '180' OR &ROT9 = 'AFPA180')\n    &DEVT = AFPA180\n  IF (&ROT9 = '270' OR &ROT9 = 'AFPA270')\n    &DEVT = AFPA270\n  IF (&ROT9 = 'AFPL')\n    &DEVT = AFPL\n  IF (&ROT9 = 'AFPA4')\n    &DEVT = AFPA4\n  IF (&ROT9 = 'AFPB4')\n    &DEVT = AFPB4\n  IF (&ROT9 = 'AFPB5')\n    &DEVT = AFPB5\n  IF (&ROT9 = 'AFPE')\n    &DEVT = AFPE\n  IF (&SPL9 \u00ac= ' ')\n    VER (&SPL9,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL9,1) Y,SP *,'')\n  ELSE\n    &SPL9 = N\n    &SPL = &Z\n  IF (&UPC9 \u00ac= ' ')\n    VER (&UPC9,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC9,1) Y,UP *,'')\n  ELSE\n    &UPC9 = N\n    &UPC = &Z\n  VER (&GDDM9,NB,LIST,Y,N,MSG=SCHP010D)\n  VER (&PSG9,NB,LIST,Y,N,MSG=SCHP010E)\n  IF (&SPM9 \u00ac= ' ')\n    &SEPM = 'SEP(&SPM9)'\n  VER (&SGL9,DSNAME,MSG=SCHP010F)\n  VER (&PRO9,DSNAME,MSG=SCHP010F)\n  VER (&SLB9,DSNAME,MSG=SCHP010F)\n\n  VPUT (BDO9,BDE9,SEP9,CH19,CH29,CH39,CH49,\n        DUP9,MS19,MS29,ROT9,SPL9,UPC9,GDDM9,\n        PSG9,SPM9,SGL9,PRO9,SLB9,OSO9) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHPNOVC                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - Novice (Beginner) Default Options\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~\n)INIT\n  .CURSOR = ZCMD\n  &V = &SVAR\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  TERMINAL      */\n                                   /* Real Device:     TERM/3270     */\n                                   /* ------------------------------ */\n  IF (&V = 1)\n    &LDEVTYP = 'TERM,2741,3270'\n    IF (&MS11 = &Z)\n      &MS11 = 'T'\n    IF (&MS21 = &Z)\n      &MS21 = 'N'\n    IF (&SPL1 = &Z)\n      &SPL1 = 'N'\n    IF (&UPC1 = &Z)\n      &UPC1 = 'N'\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  1403XXX       */\n                                   /* Real Device:     1403/STAIRS   */\n                                   /* ------------------------------ */\n  IF (&V = 2)\n    &LDEVTYP = '1403N6,1403N8,1403W6,1403W8,+\n                1403W6S,1403W8S,1403SW,STAIRS'\n    IF (&SEP2 = &Z)\n      &SEP2 = 'Y'\n    IF (&MS12 = &Z)\n      &MS12 = 'T'\n    IF (&MS22 = &Z)\n      &MS22 = 'N'\n    IF (&SPL2 = &Z)\n      &SPL2 = 'N'\n    IF (&UPC2 = &Z)\n      &UPC2 = 'N'\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  POSTSCRIPT    */\n                                   /* Real Device:     PS            */\n                                   /* ------------------------------ */\n  IF (&V = 3)\n    &LDEVTYP = '90,180,270,PSA,PSA90,PSA180,PSA270,PSB,PSL,+\n                PSA3,PSA4,PSB5'\n    IF (&PSO = &Z)\n      &PSO = 'A'\n    IF (&SEP3 = &Z)\n      &SEP3 = 'Y'\n    IF (&DUP3 = &Z)\n      &DUP3 = 'N'\n    IF (&MS13 = &Z)\n      &MS13 = 'T'\n    IF (&MS23 = &Z)\n      &MS23 = 'N'\n    IF (&SPL3 = &Z)\n      &SPL3 = 'N'\n    IF (&UPC3 = &Z)\n      &UPC3 = 'N'\n    IF (&GDDM3 = &Z)\n      &GDDM3 = 'N'\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  38PPXXXX      */\n                                   /* Real Device:     3800/2300     */\n                                   /* ------------------------------ */\n  IF (&V = 4)\n    &LDEVTYP = '90,38PPN,38PPW,38PPNS,38PPWS,38PPW90,38PPNS90,38PPW270'\n    IF (&SEP4 = &Z)\n      &SEP4 = 'Y'\n    IF (&MS14 = &Z)\n      &MS14 = 'T'\n    IF (&MS24 = &Z)\n      &MS24 = 'N'\n    IF (&SPL4 = &Z)\n      &SPL4 = 'N'\n    IF (&UPC4 = &Z)\n      &UPC4 = 'N'\n    IF (&GDDM4 = &Z)\n      &GDDM4 = 'N'\n    IF (&PSG4 = &Z)\n      &PSG4 = 'N'\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  PG1XXXX       */\n                                   /* Real Device:     3820          */\n                                   /* ------------------------------ */\n  IF (&V = 5)\n    &LDEVTYP = '90,180,270,PG1A,PG1A90,PG1A180,PG1A270,PG1L,+\n                PG1A4,PG1B4,PG1B5'\n    IF (&SEP5 = &Z)\n      &SEP5 = 'Y'\n    IF (&DUP5 = &Z)\n      &DUP5 = 'N'\n    IF (&MS15 = &Z)\n      &MS15 = 'T'\n    IF (&MS25 = &Z)\n      &MS25 = 'N'\n    IF (&SPL5 = &Z)\n      &SPL5 = 'N'\n    IF (&UPC5 = &Z)\n      &UPC5 = 'N'\n    IF (&GDDM5 = &Z)\n      &GDDM5 = 'N'\n    IF (&PSG5 = &Z)\n      &PSG5 = 'N'\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  PG2XXXX       */\n                                   /* Real Device:     3812/3816     */\n                                   /* ------------------------------ */\n  IF (&V = 6)\n    &LDEVTYP = '90,180,270,PG2A,PG2A90,PG2A180,PG2A270,PG2L,+\n                PG2A4,PG2B4,PG2B5'\n    IF (&SEP6 = &Z)\n      &SEP6 = 'Y'\n    IF (&DUP6 = &Z)\n      &DUP6 = 'N'\n    IF (&MS16 = &Z)\n      &MS16 = 'T'\n    IF (&MS26 = &Z)\n      &MS26 = 'N'\n    IF (&SPL6 = &Z)\n      &SPL6 = 'N'\n    IF (&UPC6 = &Z)\n      &UPC6 = 'N'\n    IF (&GDDM6 = &Z)\n      &GDDM6 = 'N'\n    IF (&PSG6 = &Z)\n      &PSG6 = 'N'\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  PG3XXXX       */\n                                   /* Real Device:     4224          */\n                                   /* ------------------------------ */\n  IF (&V = 7)\n    &LDEVTYP = 'W,NS,L,PG3A,PG3W,PG3NS,PG3L,PG3A4,PG3B4,PG3B5'\n    IF (&SEP7 = &Z)\n      &SEP7 = 'Y'\n    IF (&MS17 = &Z)\n      &MS17 = 'T'\n    IF (&MS27 = &Z)\n      &MS27 = 'N'\n    IF (&SPL7 = &Z)\n      &SPL7 = 'N'\n    IF (&UPC7 = &Z)\n      &UPC7 = 'N'\n    IF (&GDDM7 = &Z)\n      &GDDM7 = 'N'\n    IF (&PSG7 = &Z)\n      &PSG7 = 'N'\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  PG4XXXX       */\n                                   /* Real Device:     4028          */\n                                   /* ------------------------------ */\n  IF (&V = 8)\n    &LDEVTYP = '90,180,270,PG4A,PG4A90,PG4A180,PG4A270,PG4L,+\n                PG4A4,PG4B5,PG4E'\n    IF (&SEP8 = &Z)\n      &SEP8 = 'Y'\n    IF (&DUP8 = &Z)\n      &DUP8 = 'N'\n    IF (&MS18 = &Z)\n      &MS18 = 'T'\n    IF (&MS28 = &Z)\n      &MS28 = 'N'\n    IF (&SPL8 = &Z)\n      &SPL8 = 'N'\n    IF (&UPC8 = &Z)\n      &UPC8 = 'N'\n    IF (&GDDM8 = &Z)\n      &GDDM8 = 'N'\n    IF (&PSG8 = &Z)\n      &PSG8 = 'N'\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  AFPXXXX       */\n                                   /* Real Device:     AFP Core Font */\n                                   /* ------------------------------ */\n  IF (&V = 9)\n    &LDEVTYP = '90,180,270,AFPA,AFPA90,AFPA180,AFPA270,AFPL,+\n                AFPA4,AFPB4,AFPB5,AFPE'\n    IF (&SEP9 = &Z)\n      &SEP9 = 'Y'\n    IF (&DUP9 = &Z)\n      &DUP9 = 'N'\n    IF (&MS19 = &Z)\n      &MS19 = 'T'\n    IF (&MS29 = &Z)\n      &MS29 = 'N'\n    IF (&SPL9 = &Z)\n      &SPL9 = 'N'\n    IF (&UPC9 = &Z)\n      &UPC9 = 'N'\n    IF (&GDDM9 = &Z)\n      &GDDM9 = 'N'\n    IF (&PSG9 = &Z)\n      &PSG9 = 'N'\n\n)PROC\n                                   /* ------------------------------ */\n                                   /* Logical Device:  TERMINAL      */\n                                   /* Real Device:     TERM/3270     */\n                                   /* ------------------------------ */\n  IF (&V = 1)\n    IF (&BDE1 \u00ac= ' ')\n      VER (&BDO1,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO1 &BDE1)'\n    ELSE\n      IF (&BDO1 \u00ac= ' ')\n        &BIND = 'BIND(&BDO1)'\n    VER (&CH11,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH21,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH31,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH41,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&MS11,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS21,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT1,LISTV,&LDEVTYP,MSG=SCHP010U)\n    IF (&ROT1 \u00ac= ' ')\n      &DEVT = &ROT1\n    ELSE\n      &DEVT = TERM\n    IF (&SPL1 \u00ac= ' ')\n      VER (&SPL1,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL1,1) Y,SP *,'')\n    ELSE\n      &SPL1 = N\n      &SPL = &Z\n    IF (&UPC1 \u00ac= ' ')\n      VER (&UPC1,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC1,1) Y,UP *,'')\n    ELSE\n      &UPC1 = N\n      &UPC = &Z\n    VER (&PRO1,DSNAME,MSG=SCHP010F)\n    VER (&SLB1,DSNAME,MSG=SCHP010F)\n                                   /* ------------------------------ */\n                                   /* Logical Device:  1403XXX       */\n                                   /* Real Device:     1403/STAIRS   */\n                                   /* ------------------------------ */\n  IF (&V = 2)\n    IF (&BDE2 \u00ac= ' ')\n      VER (&BDO2,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO2 &BDE2)'\n    ELSE\n      IF (&BDO2 \u00ac= ' ')\n        &BIND = 'BIND(&BDO2)'\n    VER (&SEP2,NB,LIST,Y,N,MSG=SCHP015)\n    VER (&CH12,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH22,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH32,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH42,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&MS12,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS22,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT2,LISTV,&LDEVTYP,MSG=SCHP010T)\n    IF (&ROT2 = ' ' OR &ROT2 = '1403N6')\n      &DEVT = 1403N6\n    ELSE\n      &DEVT = &ROT2\n    IF (&SPL2 \u00ac= ' ')\n      VER (&SPL2,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL2,1) Y,SP *,'')\n    ELSE\n      &SPL2 = N\n      &SPL = &Z\n    IF (&UPC2 \u00ac= ' ')\n      VER (&UPC2,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC2,1) Y,UP *,'')\n    ELSE\n      &UPC2 = N\n      &UPC = &Z\n    VER (&PRO2,DSNAME,MSG=SCHP010F)\n    VER (&SLB2,DSNAME,MSG=SCHP010F)\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  POSTSCRIPT    */\n                                   /* Real Device:     PS            */\n                                   /* ------------------------------ */\n  IF (&V = 3)\n    IF (&PSO \u00ac= ' ')\n      VER (&PSO,LIST,A,E,MSG=SCHP010G)\n        IF (&PSO = A)\n          &PSOUT = 'PSOUT(ASCII)'\n        ELSE\n          &PSOUT = 'PSOUT(EBCDIC)'\n    ELSE\n      &PSOUT = 'PSOUT(ASCII)'\n    IF (&BDE3 \u00ac= ' ')\n      VER (&BDO3,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO3,&BDE3)'\n    ELSE\n      IF (&BDO3 \u00ac= ' ')\n        &BIND = 'BIND(&BDO3)'\n    VER (&SEP3,NB,LIST,Y,N,MSG=SCHP015)\n    VER (&CH13,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH23,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH33,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH43,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&DUP3,NB,LIST,Y,N,MSG=SCHP017)\n    VER (&MS13,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS23,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT3,LISTV,&LDEVTYP,MSG=SCHP010S)\n    IF (&ROT3 = ' ' OR &ROT3 = 'PSA')\n      &DEVT = PSA\n    IF (&ROT3 = '90' OR &ROT3 = 'PSA90')\n      &DEVT = PSA90\n    IF (&ROT3 = '180' OR &ROT3 = 'PSA180')\n      &DEVT = PSA180\n    IF (&ROT3 = '270' OR &ROT3 = 'PSA270')\n      &DEVT = PSA270\n    IF (&ROT3 = 'PSB')\n      &DEVT = PSB\n    IF (&ROT3 = 'PSL')\n      &DEVT = PSL\n    IF (&ROT3 = 'PSA3')\n      &DEVT = PSA3\n    IF (&ROT3 = 'PSA4')\n      &DEVT = PSA4\n    IF (&ROT3 = 'PSB5')\n      &DEVT = PSB5\n    IF (&SPL3 \u00ac= ' ')\n      VER (&SPL3,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL3,1) Y,SP *,'')\n    ELSE\n      &SPL3 = N\n      &SPL = &Z\n    IF (&UPC3 \u00ac= ' ')\n      VER (&UPC3,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC3,1) Y,UP *,'')\n    ELSE\n      &UPC3 = N\n      &UPC = &Z\n    VER (&GDDM3,NB,LIST,Y,N,MSG=SCHP010D)\n    VER (&PIL3,DSNAME,MSG=SCHP010F)\n    VER (&PRO3,DSNAME,MSG=SCHP010F)\n    VER (&SLB3,DSNAME,MSG=SCHP010F)\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  38PPXXXX      */\n                                   /* Real Device:     3800/2300     */\n                                   /* ------------------------------ */\n  IF (&V = 4)\n    IF (&BDE4 \u00ac= ' ')\n      VER (&BDO4,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO4,&BDE4)'\n    ELSE\n      IF (&BDO4 \u00ac= ' ')\n        &BIND = 'BIND(&BDO4)'\n    VER (&SEP4,NB,LIST,Y,N,MSG=SCHP015)\n    VER (&CH14,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH24,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH34,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH44,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&MS14,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS24,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT4,LISTV,&LDEVTYP,MSG=SCHP010V)\n    IF (&ROT4 = ' ' OR &ROT4 = '38PPN')\n      &DEVT = 38PPN\n    IF (&ROT4 = '90' OR &ROT4 = '38PPNS90')\n      &DEVT = 38PPNS90\n    IF (&ROT4 = '38PPW')\n      &DEVT = 38PPW\n    IF (&ROT4 = '38PPNS')\n      &DEVT = 38PPNS\n    IF (&ROT4 = '38PPWS')\n      &DEVT = 38PPWS\n    IF (&ROT4 = '38PPW90')\n      &DEVT = 38PPW90\n    IF (&ROT4 = '38PPW270')\n      &DEVT = 38PPW270\n    IF (&SPL4 \u00ac= ' ')\n      VER (&SPL4,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL4,1) Y,SP *,'')\n    ELSE\n      &SPL4 = N\n      &SPL = &Z\n    IF (&UPC4 \u00ac= ' ')\n      VER (&UPC4,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC4,1) Y,UP *,'')\n    ELSE\n      &UPC4 = N\n      &UPC = &Z\n    VER (&GDDM4,NB,LIST,Y,N,MSG=SCHP010D)\n    VER (&PSG4,NB,LIST,Y,N,MSG=SCHP010E)\n    VER (&SGL4,DSNAME,MSG=SCHP010F)\n    VER (&PRO4,DSNAME,MSG=SCHP010F)\n    VER (&SLB4,DSNAME,MSG=SCHP010F)\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  PG1XXXX       */\n                                   /* Real Device:     3820          */\n                                   /* ------------------------------ */\n  IF (&V = 5)\n    IF (&BDE5 \u00ac= ' ')\n      VER (&BDO5,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO5,&BDE5)'\n    ELSE\n      IF (&BDO5 \u00ac= ' ')\n        &BIND = 'BIND(&BDO5)'\n    VER (&SEP5,NB,LIST,Y,N,MSG=SCHP015)\n    VER (&CH15,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH25,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH35,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH45,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&DUP5,NB,LIST,Y,N,MSG=SCHP017)\n    VER (&MS15,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS25,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT5,LISTV,&LDEVTYP,MSG=SCHP010X)\n    IF (&ROT5 = ' ' OR &ROT5 = 'PG1A')\n      &DEVT = PG1A\n    IF (&ROT5 = '90' OR &ROT5 = 'PG1A90')\n      &DEVT = PG1A90\n    IF (&ROT5 = '180' OR &ROT5 = 'PG1A180')\n      &DEVT = PG1A180\n    IF (&ROT5 = '270' OR &ROT5 = 'PG1A270')\n      &DEVT = PG1A270\n    IF (&ROT5 = 'PG1L')\n      &DEVT = PG1L\n    IF (&ROT5 = 'PG1A4')\n      &DEVT = PG1A4\n    IF (&ROT5 = 'PG1B4')\n      &DEVT = PG1B4\n    IF (&ROT5 = 'PG1B5')\n      &DEVT = PG1B5\n    IF (&SPL5 \u00ac= ' ')\n      VER (&SPL5,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL5,1) Y,SP *,'')\n    ELSE\n      &SPL5 = N\n      &SPL = &Z\n    IF (&UPC5 \u00ac= ' ')\n      VER (&UPC5,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC5,1) Y,UP *,'')\n    ELSE\n      &UPC5 = N\n      &UPC = &Z\n    VER (&GDDM5,NB,LIST,Y,N,MSG=SCHP010D)\n    VER (&PSG5,NB,LIST,Y,N,MSG=SCHP010E)\n    VER (&SGL5,DSNAME,MSG=SCHP010F)\n    VER (&PRO5,DSNAME,MSG=SCHP010F)\n    VER (&SLB5,DSNAME,MSG=SCHP010F)\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  PG2XXXX       */\n                                   /* Real Device:     3812/3816     */\n                                   /* ------------------------------ */\n  IF (&V = 6)\n    IF (&BDE6 \u00ac= ' ')\n      VER (&BDO6,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO6,&BDE6)'\n    ELSE\n      IF (&BDO6 \u00ac= ' ')\n        &BIND = 'BIND(&BDO6)'\n    VER (&SEP6,NB,LIST,Y,N,MSG=SCHP015)\n    VER (&CH16,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH26,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH36,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH46,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&DUP6,NB,LIST,Y,N,MSG=SCHP017)\n    VER (&MS16,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS26,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT6,LISTV,&LDEVTYP,MSG=SCHP010W)\n    IF (&ROT6 = ' ' OR &ROT6 = 'PG2A')\n      &DEVT = PG2A\n    IF (&ROT6 = '90' OR &ROT6 = 'PG2A90')\n      &DEVT = PG2A90\n    IF (&ROT6 = '180' OR &ROT6 = 'PG2A180')\n      &DEVT = PG2A180\n    IF (&ROT6 = '270' OR &ROT6 = 'PG2A270')\n      &DEVT = PG2A270\n    IF (&ROT6 = 'PG2L')\n      &DEVT = PG2L\n    IF (&ROT6 = 'PG2A4')\n      &DEVT = PG2A4\n    IF (&ROT6 = 'PG2B4')\n      &DEVT = PG2B4\n    IF (&ROT6 = 'PG2B5')\n      &DEVT = PG2B5\n    IF (&SPL6 \u00ac= ' ')\n      VER (&SPL6,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL6,1) Y,SP *,'')\n    ELSE\n      &SPL6 = N\n      &SPL = &Z\n    IF (&UPC6 \u00ac= ' ')\n      VER (&UPC6,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC6,1) Y,UP *,'')\n    ELSE\n      &UPC6 = N\n      &UPC = &Z\n    VER (&GDDM6,NB,LIST,Y,N,MSG=SCHP010D)\n    VER (&PSG6,NB,LIST,Y,N,MSG=SCHP010E)\n    VER (&SGL6,DSNAME,MSG=SCHP010F)\n    VER (&PRO6,DSNAME,MSG=SCHP010F)\n    VER (&SLB6,DSNAME,MSG=SCHP010F)\n                                   /* ------------------------------ */\n                                   /* Logical Device:  PG3XXXX       */\n                                   /* Real Device:     4224          */\n                                   /* ------------------------------ */\n  IF (&V = 7)\n    IF (&BDE7 \u00ac= ' ')\n      VER (&BDO7,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO7,&BDE7)'\n    ELSE\n      IF (&BDO7 \u00ac= ' ')\n        &BIND = 'BIND(&BDO7)'\n    VER (&SEP7,NB,LIST,Y,N,MSG=SCHP015)\n    VER (&CH17,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH27,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH37,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH47,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&MS17,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS27,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT7,LISTV,&LDEVTYP,MSG=SCHP010Z)\n    IF (&ROT7 = ' ' OR &ROT7 = 'PG3A')\n      &DEVT = PG3A\n    IF (&ROT7 = 'W' OR &ROT7 = 'PG3W')\n      &DEVT = PG3W\n    IF (&ROT7 = 'NS' OR &ROT7 = 'PG3NS')\n      &DEVT = PG3NS\n    IF (&ROT7 = 'L' OR &ROT7 = 'PG3L')\n      &DEVT = PG3L\n    IF (&ROT7 = 'PG3A4')\n      &DEVT = PG3A4\n    IF (&ROT7 = 'PG3B4')\n      &DEVT = PG3B4\n    IF (&ROT7 = 'PG3B5')\n      &DEVT = PG3B5\n    IF (&SPL7 \u00ac= ' ')\n      VER (&SPL7,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL7,1) Y,SP *,'')\n    ELSE\n      &SPL7 = N\n      &SPL = &Z\n    IF (&UPC7 \u00ac= ' ')\n      VER (&UPC7,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC7,1) Y,UP *,'')\n    ELSE\n      &UPC7 = N\n      &UPC = &Z\n    VER (&GDDM7,NB,LIST,Y,N,MSG=SCHP010D)\n    VER (&PSG7,NB,LIST,Y,N,MSG=SCHP010E)\n    VER (&SGL7,DSNAME,MSG=SCHP010F)\n    VER (&PRO7,DSNAME,MSG=SCHP010F)\n    VER (&SLB7,DSNAME,MSG=SCHP010F)\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  PG4XXXX       */\n                                   /* Real Device:     4028          */\n                                   /* ------------------------------ */\n  IF (&V = 8)\n    IF (&BDE8 \u00ac= ' ')\n      VER (&BDO8,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO8,&BDE8)'\n    ELSE\n      IF (&BDO8 \u00ac= ' ')\n        &BIND = 'BIND(&BDO8)'\n    VER (&SEP8,NB,LIST,Y,N,MSG=SCHP015)\n    VER (&CH18,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH28,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH38,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH48,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&DUP8,NB,LIST,Y,N,MSG=SCHP017)\n    VER (&MS18,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS28,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT8,LISTV,&LDEVTYP,MSG=SCHP010Y)\n    IF (&ROT8 = ' ' OR &ROT8 = 'PG4A')\n      &DEVT = PG4A\n    IF (&ROT8 = '90' OR &ROT8 = 'PG4A90')\n      &DEVT = PG4A90\n    IF (&ROT8 = '180' OR &ROT8 = 'PG4A180')\n      &DEVT = PG4A180\n    IF (&ROT8 = '270' OR &ROT8 = 'PG4A270')\n      &DEVT = PG4A270\n    IF (&ROT8 = 'PG4L')\n      &DEVT = PG4L\n    IF (&ROT8 = 'PG4A4')\n      &DEVT = PG4A4\n    IF (&ROT8 = 'PG4B5')\n      &DEVT = PG4B5\n    IF (&ROT8 = 'PG4E')\n      &DEVT = PG4E\n    IF (&SPL8 \u00ac= ' ')\n      VER (&SPL8,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL8,1) Y,SP *,'')\n    ELSE\n      &SPL8 = N\n      &SPL = &Z\n    IF (&UPC8 \u00ac= ' ')\n      VER (&UPC8,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC8,1) Y,UP *,'')\n    ELSE\n      &UPC8 = N\n      &UPC = &Z\n    VER (&GDDM8,NB,LIST,Y,N,MSG=SCHP010D)\n    VER (&PSG8,NB,LIST,Y,N,MSG=SCHP010E)\n    VER (&SGL8,DSNAME,MSG=SCHP010F)\n    VER (&PRO8,DSNAME,MSG=SCHP010F)\n    VER (&SLB8,DSNAME,MSG=SCHP010F)\n\n                                   /* ------------------------------ */\n                                   /* Logical Device:  AFPXXXX       */\n                                   /* Real Device:     AFP Core Font */\n                                   /* ------------------------------ */\n  IF (&V = 9)\n    IF (&BDE9 \u00ac= ' ')\n      VER (&BDO9,NB,MSG=SCHP014)\n      &BIND = 'BIND(&BDO9,&BDE9)'\n    ELSE\n      IF (&BDO9 \u00ac= ' ')\n        &BIND = 'BIND(&BDO9)'\n    VER (&SEP9,NB,LIST,Y,N,MSG=SCHP015)\n    VER (&CH19,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH29,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH39,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&CH49,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n    VER (&DUP9,NB,LIST,Y,N,MSG=SCHP017)\n    VER (&MS19,NB,LIST,T,O,MSG=SCHP018)\n    VER (&MS29,NB,LIST,Y,N,MSG=SCHP019)\n    VER (&ROT9,LISTV,&LDEVTYP,MSG=SCHP010A)\n    IF (&ROT9 = ' ' OR &ROT9 = 'AFPA')\n      &DEVT = AFPA\n    IF (&ROT9 = '90' OR &ROT9 = 'AFPA90')\n      &DEVT = AFPA90\n    IF (&ROT9 = '180' OR &ROT9 = 'AFPA180')\n      &DEVT = AFPA180\n    IF (&ROT9 = '270' OR &ROT9 = 'AFPA270')\n      &DEVT = AFPA270\n    IF (&ROT9 = 'AFPL')\n      &DEVT = AFPL\n    IF (&ROT9 = 'AFPA4')\n      &DEVT = AFPA4\n    IF (&ROT9 = 'AFPB4')\n      &DEVT = AFPB4\n    IF (&ROT9 = 'AFPB5')\n      &DEVT = AFPB5\n    IF (&ROT9 = 'AFPE')\n      &DEVT = AFPE\n    IF (&SPL9 \u00ac= ' ')\n      VER (&SPL9,LIST,Y,N,MSG=SCHP010B)\n      &SPL = TRANS(TRUNC(&SPL9,1) Y,SP *,'')\n    ELSE\n      &SPL9 = N\n      &SPL = &Z\n    IF (&UPC9 \u00ac= ' ')\n      VER (&UPC9,LIST,Y,N,MSG=SCHP010C)\n      &UPC = TRANS(TRUNC(&UPC9,1) Y,UP *,'')\n    ELSE\n      &UPC9 = N\n      &UPC = &Z\n    VER (&GDDM9,NB,LIST,Y,N,MSG=SCHP010D)\n    VER (&PSG9,NB,LIST,Y,N,MSG=SCHP010E)\n    VER (&SGL9,DSNAME,MSG=SCHP010F)\n    VER (&PRO9,DSNAME,MSG=SCHP010F)\n    VER (&SLB9,DSNAME,MSG=SCHP010F)\n\n)HELP\n\n)END\n./ ADD NAME=SCHPPS                                 13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - Adobe PostScript (PS) Level 1 Output\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~ASCII or EBCDIC output%===>_Z+          A=ASCII, E=EBCDIC, default=ASCII\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~Change separator pages%===>_Z+          Y=Yes, N=No, default=Yes\n~Character set 1       %===>_Z       ~   Character set 2       %===>_Z       +\n~Character set 3       %===>_Z       ~   Character set 4       %===>_Z       +\n~Duplex hardcopy output%===>_Z+          Y=Yes, N=No, default=No\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~Orientation or device %===>_Z     +     90,180,270 or any PS logical device\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~Use GDDM/PGF graphics %===>_Z+          Y=Yes, N=No, default=No\n~\n~Separation master no.s%===>_Z                                                 +\n~PostScript imbed lib  %===>_Z                                                 +\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n)INIT\n  &SVAR = 3\n  .ZVARS = '(PSO,BDO&SVAR,BDE&SVAR,SEP&SVAR,+\n             CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,+\n             DUP&SVAR,MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,+\n             GDDM&SVAR,SPM&SVAR,PIL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR)'\n  .CURSOR = PSO\n  .HELP   = SCHTP130\n  &LDEVTYP = '90,180,270,PSA,PSA90,PSA180,PSA270,PSB,PSL,+\n              PSA3,PSA4,PSB5'\n\n  IF (&PSO = &Z)\n    &PSO = 'A'\n  IF (&SEP3 = &Z)\n    &SEP3 = 'Y'\n  IF (&DUP3 = &Z)\n    &DUP3 = 'N'\n  IF (&MS13 = &Z)\n    &MS13 = 'T'\n  IF (&MS23 = &Z)\n    &MS23 = 'N'\n  IF (&SPL3 = &Z)\n    &SPL3 = 'N'\n  IF (&UPC3 = &Z)\n    &UPC3 = 'N'\n  IF (&GDDM3 = &Z)\n    &GDDM3 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(YELLOW) HILITE(BLINK)'\n\n)PROC\n  IF (&PSO \u00ac= ' ')\n    VER (&PSO,LIST,A,E,MSG=SCHP010G)\n      IF (&PSO = A)\n        &PSOUT = 'PSOUT(ASCII)'\n      ELSE\n        &PSOUT = 'PSOUT(EBCDIC)'\n  ELSE\n    &PSOUT = 'PSOUT(ASCII)'\n  IF (&BDE3 \u00ac= ' ')\n    VER (&BDO3,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO3,&BDE3)'\n  ELSE\n    IF (&BDO3 \u00ac= ' ')\n      &BIND = 'BIND(&BDO3)'\n  VER (&SEP3,NB,LIST,Y,N,MSG=SCHP015)\n  VER (&CH13,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH23,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH33,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH43,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&DUP3,NB,LIST,Y,N,MSG=SCHP017)\n  VER (&MS13,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS23,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT3,LISTV,&LDEVTYP,MSG=SCHP010S)\n  IF (&ROT3 = ' ' OR &ROT3 = 'PSA')\n    &DEVT = PSA\n  IF (&ROT3 = '90' OR &ROT3 = 'PSA90')\n    &DEVT = PSA90\n  IF (&ROT3 = '180' OR &ROT3 = 'PSA180')\n    &DEVT = PSA180\n  IF (&ROT3 = '270' OR &ROT3 = 'PSA270')\n    &DEVT = PSA270\n  IF (&ROT3 = 'PSB')\n    &DEVT = PSB\n  IF (&ROT3 = 'PSL')\n    &DEVT = PSL\n  IF (&ROT3 = 'PSA3')\n    &DEVT = PSA3\n  IF (&ROT3 = 'PSA4')\n    &DEVT = PSA4\n  IF (&ROT3 = 'PSB5')\n    &DEVT = PSB5\n  IF (&SPL3 \u00ac= ' ')\n    VER (&SPL3,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL3,1) Y,SP *,'')\n  ELSE\n    &SPL3 = N\n    &SPL = &Z\n  IF (&UPC3 \u00ac= ' ')\n    VER (&UPC3,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC3,1) Y,UP *,'')\n  ELSE\n    &UPC3 = N\n    &UPC = &Z\n  VER (&GDDM3,NB,LIST,Y,N,MSG=SCHP010D)\n  IF (&SPM3 \u00ac= ' ')\n    &SEPM = 'SEP(&SPM3)'\n  VER (&PIL3,DSNAME,MSG=SCHP010F)\n  VER (&PRO3,DSNAME,MSG=SCHP010F)\n  VER (&SLB3,DSNAME,MSG=SCHP010F)\n\n  VPUT (PSO,BDO3,BDE3,SEP3,\n        CH13,CH23,CH33,CH43,\n        DUP3,MS13,MS23,ROT3,SPL3,UPC3,\n        GDDM3,SPM3,PIL3,PRO3,SLB3,OSO3) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHP1403                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - 1403 Impact Printer/Stairs-VS Options\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~\n~Change separator page %===>_Z+          Y=Yes, N=No, default=Yes\n~Character set 1       %===>_Z   ~       Character set 2       %===>_Z   +\n~Character set 3       %===>_Z   ~       Character set 4       %===>_Z   +\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~\n~1403 or STAIRS device %===>_Z      +    Default=1403N6 or a 1403/STAIRS device\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n~\n~\n~\n)INIT\n  &SVAR = 2\n  .ZVARS = '(BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,+\n             MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,PRO&SVAR,SLB&SVAR,+\n             OSO&SVAR)'\n  .CURSOR = BDO&SVAR\n  .HELP   = SCHTP120\n  &LDEVTYP = '1403N6,1403N8,1403W6,1403W8,1403W6S,1403W8S,1403SW,STAIRS'\n\n  IF (&SEP2 = &Z)\n    &SEP2 = 'Y'\n  IF (&MS12 = &Z)\n    &MS12 = 'T'\n  IF (&MS22 = &Z)\n    &MS22 = 'N'\n  IF (&SPL2 = &Z)\n    &SPL2 = 'N'\n  IF (&UPC2 = &Z)\n    &UPC2 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  IF (&BDE2 \u00ac= ' ')\n    VER (&BDO2,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO2 &BDE2)'\n  ELSE\n    IF (&BDO2 \u00ac= ' ')\n      &BIND = 'BIND(&BDO2)'\n  VER (&SEP2,NB,LIST,Y,N,MSG=SCHP015)\n  VER (&CH12,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH22,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH32,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH42,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&MS12,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS22,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT2,LISTV,&LDEVTYP,MSG=SCHP010T)\n  IF (&ROT2 = ' ' OR &ROT2 = '1403N6')\n    &DEVT = 1403N6\n  ELSE\n    &DEVT = &ROT2\n  IF (&SPL2 \u00ac= ' ')\n    VER (&SPL2,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL2,1) Y,SP *,'')\n  ELSE\n    &SPL2 = N\n    &SPL = &Z\n  IF (&UPC2 \u00ac= ' ')\n    VER (&UPC2,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC2,1) Y,UP *,'')\n  ELSE\n    &UPC2 = N\n    &UPC = &Z\n  VER (&PRO2,DSNAME,MSG=SCHP010F)\n  VER (&SLB2,DSNAME,MSG=SCHP010F)\n\n  VPUT (BDO2,BDE2,SEP2,CH12,CH22,CH32,CH42,\n        MS12,MS22,ROT2,SPL2,UPC2,PRO2,SLB2,OSO2) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHP3270                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - TERMinal, 2741 or 3270 Display\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~\n~Character set 1       %===>_Z   ~       Character set 2       %===>_Z   +\n~Character set 3       %===>_Z   ~       Character set 4       %===>_Z   +\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~\n~Actual terminal type  %===>_Z   +       TERM, 2741,or 3270, default = TERM\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n~\n~\n~\n)INIT\n  &SVAR = 1\n  .ZVARS = '(BDO&SVAR,BDE&SVAR,CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,MS1&SVAR,+\n             MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR)'\n  .CURSOR = BDO&SVAR\n  .HELP   = SCHTP110\n  &LDEVTYP = 'TERM,2741,3270'\n\n  IF (&MS11 = &Z)\n    &MS11 = 'T'\n  IF (&MS21 = &Z)\n    &MS21 = 'N'\n  IF (&SPL1 = &Z)\n    &SPL1 = 'N'\n  IF (&UPC1 = &Z)\n    &UPC1 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  IF (&BDE1 \u00ac= ' ')\n    VER (&BDO1,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO1 &BDE1)'\n  ELSE\n    IF (&BDO1 \u00ac= ' ')\n      &BIND = 'BIND(&BDO1)'\n  VER (&CH11,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH21,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH31,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH41,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&MS11,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS21,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT1,LISTV,&LDEVTYP,MSG=SCHP010U)\n  IF (&ROT1 \u00ac= ' ')\n    &DEVT = &ROT1\n  ELSE\n    &DEVT = TERM\n  IF (&SPL1 \u00ac= ' ')\n    VER (&SPL1,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL1,1) Y,SP *,'')\n  ELSE\n    &SPL1 = N\n    &SPL = &Z\n  IF (&UPC1 \u00ac= ' ')\n    VER (&UPC1,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC1,1) Y,UP *,'')\n  ELSE\n    &UPC1 = N\n    &UPC = &Z\n  VER (&PRO1,DSNAME,MSG=SCHP010F)\n  VER (&SLB1,DSNAME,MSG=SCHP010F)\n\n  VPUT (BDO1,BDE1,CH11,CH21,CH31,CH41,MS11,\n        MS21,ROT1,SPL1,UPC1,PRO1,SLB1,OSO1) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHP3800                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - 3800 (38PPN) & 2300 Formatting Options\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~Change separator pages%===>_Z+          Y=Yes, N=No, default=Yes\n~Character set 1       %===>_Z       ~   Character set 2       %===>_Z       +\n~Character set 3       %===>_Z       ~   Character set 4       %===>_Z       +\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~Orientation or device %===>_Z       +   90=rotate (38PPNS90) or a 3800-3 device\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~Use GDDM/PGF graphics %===>_Z+          Y=Yes, N=No, default=No\n~Create page segments  %===>_Z+          Y=Yes, N=No, default=No\n~\n~Separation master no.s%===>_Z                                                 +\n~Page seglib dsname    %===>_Z                                                 +\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n~\n)INIT\n  &SVAR = 4\n  .ZVARS = '(BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,+\n             MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,GDDM&SVAR,+\n             PSG&SVAR,SPM&SVAR,SGL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR)'\n  .CURSOR = BDO&SVAR\n  .HELP   = SCHTP140\n  &LDEVTYP = '90,38PPN,38PPW,38PPNS,38PPWS,38PPW90,38PPNS90,38PPW270'\n\n  IF (&SEP4 = &Z)\n    &SEP4 = 'Y'\n  IF (&MS14 = &Z)\n    &MS14 = 'T'\n  IF (&MS24 = &Z)\n    &MS24 = 'N'\n  IF (&SPL4 = &Z)\n    &SPL4 = 'N'\n  IF (&UPC4 = &Z)\n    &UPC4 = 'N'\n  IF (&GDDM4 = &Z)\n    &GDDM4 = 'N'\n  IF (&PSG4 = &Z)\n    &PSG4 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  IF (&BDE4 \u00ac= ' ')\n    VER (&BDO4,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO4,&BDE4)'\n  ELSE\n    IF (&BDO4 \u00ac= ' ')\n      &BIND = 'BIND(&BDO4)'\n  VER (&SEP4,NB,LIST,Y,N,MSG=SCHP015)\n  VER (&CH14,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH24,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH34,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH44,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&MS14,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS24,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT4,LISTV,&LDEVTYP,MSG=SCHP010V)\n  IF (&ROT4 = ' ' OR &ROT4 = '38PPN')\n    &DEVT = 38PPN\n  IF (&ROT4 = '90' OR &ROT4 = '38PPNS90')\n    &DEVT = 38PPNS90\n  IF (&ROT4 = '38PPW')\n    &DEVT = 38PPW\n  IF (&ROT4 = '38PPNS')\n    &DEVT = 38PPNS\n  IF (&ROT4 = '38PPWS')\n    &DEVT = 38PPWS\n  IF (&ROT4 = '38PPW90')\n    &DEVT = 38PPW90\n  IF (&ROT4 = '38PPW270')\n    &DEVT = 38PPW270\n  IF (&SPL4 \u00ac= ' ')\n    VER (&SPL4,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL4,1) Y,SP *,'')\n  ELSE\n    &SPL4 = N\n    &SPL = &Z\n  IF (&UPC4 \u00ac= ' ')\n    VER (&UPC4,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC4,1) Y,UP *,'')\n  ELSE\n    &UPC4 = N\n    &UPC = &Z\n  VER (&GDDM4,NB,LIST,Y,N,MSG=SCHP010D)\n  VER (&PSG4,NB,LIST,Y,N,MSG=SCHP010E)\n  IF (&SPM4 \u00ac= ' ')\n    &SEPM = 'SEP(&SPM4)'\n  VER (&SGL4,DSNAME,MSG=SCHP010F)\n  VER (&PRO4,DSNAME,MSG=SCHP010F)\n  VER (&SLB4,DSNAME,MSG=SCHP010F)\n\n  VPUT (BDO4,BDE4,SEP4,CH14,CH24,CH34,CH44,\n        MS14,MS24,ROT4,SPL4,UPC4,GDDM4,\n        PSG4,SPM4,SGL4,PRO4,SLB4,OSO4) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHP3816                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - 3812/3816 (PG2) Formatting Options\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~Change separator page %===>_Z+          Y=Yes, N=No, default=Yes\n~Character set 1       %===>_Z       ~   Character set 2       %===>_Z       +\n~Character set 3       %===>_Z       ~   Character set 4       %===>_Z       +\n~Duplex hardcopy output%===>_Z+          Y=Yes, N=No, default=No\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~Orientation or device %===>_Z      +    90,180,270 or a 3812/16 logical device\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~Use GDDM/PGF graphics %===>_Z+          Y=Yes, N=No, default=No\n~Create page segments  %===>_Z+          Y=Yes, N=No, default=No\n~\n~Separation master no.s%===>_Z                                                 +\n~Page seglib dsname    %===>_Z                                                 +\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n)INIT\n  &SVAR = 6\n  .ZVARS = '(BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,+\n             DUP&SVAR,MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,GDDM&SVAR,+\n             PSG&SVAR,SPM&SVAR,SGL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR)'\n  .CURSOR = BDO&SVAR\n  .HELP   = SCHTP160\n  &LDEVTYP = '90,180,270,PG2A,PG2A90,PG2A180,PG2A270,PG2L,+\n              PG2A4,PG2B4,PG2B5'\n\n  IF (&SEP6 = &Z)\n    &SEP6 = 'Y'\n  IF (&DUP6 = &Z)\n    &DUP6 = 'N'\n  IF (&MS16 = &Z)\n    &MS16 = 'T'\n  IF (&MS26 = &Z)\n    &MS26 = 'N'\n  IF (&SPL6 = &Z)\n    &SPL6 = 'N'\n  IF (&UPC6 = &Z)\n    &UPC6 = 'N'\n  IF (&GDDM6 = &Z)\n    &GDDM6 = 'N'\n  IF (&PSG6 = &Z)\n    &PSG6 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  IF (&BDE6 \u00ac= ' ')\n    VER (&BDO6,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO6,&BDE6)'\n  ELSE\n    IF (&BDO6 \u00ac= ' ')\n      &BIND = 'BIND(&BDO6)'\n  VER (&SEP6,NB,LIST,Y,N,MSG=SCHP015)\n  VER (&CH16,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH26,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH36,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH46,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&DUP6,NB,LIST,Y,N,MSG=SCHP017)\n  VER (&MS16,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS26,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT6,LISTV,&LDEVTYP,MSG=SCHP010W)\n  IF (&ROT6 = ' ' OR &ROT6 = 'PG2A')\n    &DEVT = PG2A\n  IF (&ROT6 = '90' OR &ROT6 = 'PG2A90')\n    &DEVT = PG2A90\n  IF (&ROT6 = '180' OR &ROT6 = 'PG2A180')\n    &DEVT = PG2A180\n  IF (&ROT6 = '270' OR &ROT6 = 'PG2A270')\n    &DEVT = PG2A270\n  IF (&ROT6 = 'PG2L')\n    &DEVT = PG2L\n  IF (&ROT6 = 'PG2A4')\n    &DEVT = PG2A4\n  IF (&ROT6 = 'PG2B4')\n    &DEVT = PG2B4\n  IF (&ROT6 = 'PG2B5')\n    &DEVT = PG2B5\n  IF (&SPL6 \u00ac= ' ')\n    VER (&SPL6,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL6,1) Y,SP *,'')\n  ELSE\n    &SPL6 = N\n    &SPL = &Z\n  IF (&UPC6 \u00ac= ' ')\n    VER (&UPC6,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC6,1) Y,UP *,'')\n  ELSE\n    &UPC6 = N\n    &UPC = &Z\n  VER (&GDDM6,NB,LIST,Y,N,MSG=SCHP010D)\n  VER (&PSG6,NB,LIST,Y,N,MSG=SCHP010E)\n  IF (&SPM6 \u00ac= ' ')\n    &SEPM = 'SEP(&SPM6)'\n  VER (&SGL6,DSNAME,MSG=SCHP010F)\n  VER (&PRO6,DSNAME,MSG=SCHP010F)\n  VER (&SLB6,DSNAME,MSG=SCHP010F)\n\n  VPUT (BDO6,BDE6,SEP6,CH16,CH26,CH36,CH46,\n        DUP6,MS16,MS26,ROT6,SPL6,UPC6,GDDM6,\n        PSG6,SPM6,SGL6,PRO6,SLB6,OSO6) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHP3820                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - 3820 (PG1) Formatting Options\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~Change separator pages%===>_Z+          Y=Yes, N=No, default=Yes\n~Character set 1       %===>_Z       ~   Character set 2       %===>_Z       +\n~Character set 3       %===>_Z       ~   Character set 4       %===>_Z       +\n~Duplex hardcopy output%===>_Z+          Y=Yes, N=No, default=No\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~Orientation or device %===>_Z      +    90,180,270 or any 3820 logical device\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~Use GDDM/PGF graphics %===>_Z+          Y=Yes, N=No, default=No\n~Create page segments  %===>_Z+          Y=Yes, N=No, default=No\n~\n~Separation master no.s%===>_Z                                                 +\n~Page seglib dsname    %===>_Z                                                 +\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n)INIT\n  &SVAR = 5\n  .ZVARS = '(BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,+\n             DUP&SVAR,MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,GDDM&SVAR,+\n             PSG&SVAR,SPM&SVAR,SGL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR)'\n  .CURSOR = BDO&SVAR\n  .HELP   = SCHTP150\n  &LDEVTYP = '90,180,270,PG1A,PG1A90,PG1A180,PG1A270,PG1L,+\n              PG1A4,PG1B4,PG1B5'\n\n  IF (&SEP5 = &Z)\n    &SEP5 = 'Y'\n  IF (&DUP5 = &Z)\n    &DUP5 = 'N'\n  IF (&MS15 = &Z)\n    &MS15 = 'T'\n  IF (&MS25 = &Z)\n    &MS25 = 'N'\n  IF (&SPL5 = &Z)\n    &SPL5 = 'N'\n  IF (&UPC5 = &Z)\n    &UPC5 = 'N'\n  IF (&GDDM5 = &Z)\n    &GDDM5 = 'N'\n  IF (&PSG5 = &Z)\n    &PSG5 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  IF (&BDE5 \u00ac= ' ')\n    VER (&BDO5,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO5,&BDE5)'\n  ELSE\n    IF (&BDO5 \u00ac= ' ')\n      &BIND = 'BIND(&BDO5)'\n  VER (&SEP5,NB,LIST,Y,N,MSG=SCHP015)\n  VER (&CH15,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH25,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH35,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH45,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&DUP5,NB,LIST,Y,N,MSG=SCHP017)\n  VER (&MS15,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS25,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT5,LISTV,&LDEVTYP,MSG=SCHP010X)\n  IF (&ROT5 = ' ' OR &ROT5 = 'PG1A')\n    &DEVT = PG1A\n  IF (&ROT5 = '90' OR &ROT5 = 'PG1A90')\n    &DEVT = PG1A90\n  IF (&ROT5 = '180' OR &ROT5 = 'PG1A180')\n    &DEVT = PG1A180\n  IF (&ROT5 = '270' OR &ROT5 = 'PG1A270')\n    &DEVT = PG1A270\n  IF (&ROT5 = 'PG1L')\n    &DEVT = PG1L\n  IF (&ROT5 = 'PG1A4')\n    &DEVT = PG1A4\n  IF (&ROT5 = 'PG1B4')\n    &DEVT = PG1B4\n  IF (&ROT5 = 'PG1B5')\n    &DEVT = PG1B5\n  IF (&SPL5 \u00ac= ' ')\n    VER (&SPL5,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL5,1) Y,SP *,'')\n  ELSE\n    &SPL5 = N\n    &SPL = &Z\n  IF (&UPC5 \u00ac= ' ')\n    VER (&UPC5,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC5,1) Y,UP *,'')\n  ELSE\n    &UPC5 = N\n    &UPC = &Z\n  VER (&GDDM5,NB,LIST,Y,N,MSG=SCHP010D)\n  VER (&PSG5,NB,LIST,Y,N,MSG=SCHP010E)\n  IF (&SPM5 \u00ac= ' ')\n    &SEPM = 'SEP(&SPM5)'\n  VER (&SGL5,DSNAME,MSG=SCHP010F)\n  VER (&PRO5,DSNAME,MSG=SCHP010F)\n  VER (&SLB5,DSNAME,MSG=SCHP010F)\n\n  VPUT (BDO5,BDE5,SEP5,CH15,CH25,CH35,CH45,\n        DUP5,MS15,MS25,ROT5,SPL5,UPC5,GDDM5,\n        PSG5,SPM5,SGL5,PRO5,SLB5,OSO5) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHP4028                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - 4028 (PG4) Formatting Options\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~Change separator pages%===>_Z+          Y=Yes, N=No, default=Yes\n~Character set 1       %===>_Z       ~   Character set 2       %===>_Z       +\n~Character set 3       %===>_Z       ~   Character set 4       %===>_Z       +\n~Duplex hardcopy output%===>_Z+          Y=Yes, N=No, default=No\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~Orientation or device %===>_Z      +    90,180,270 or any 4028 logical device\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~Use GDDM/PGF graphics %===>_Z+          Y=Yes, N=No, default=No\n~Create page segments  %===>_Z+          Y=Yes, N=No, default=No\n~\n~Separation master no.s%===>_Z                                                 +\n~Page seglib dsname    %===>_Z                                                 +\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n)INIT\n  &SVAR = 8\n  .ZVARS = '(BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,+\n             DUP&SVAR,MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,GDDM&SVAR,+\n             PSG&SVAR,SPM&SVAR,SGL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR)'\n  .CURSOR = BDO&SVAR\n  .HELP   = SCHTP180\n  &LDEVTYP = '90,180,270,PG4A,PG4A90,PG4A180,PG4A270,PG4L,+\n              PG4A4,PG4B5,PG4E'\n\n  IF (&SEP8 = &Z)\n    &SEP8 = 'Y'\n  IF (&DUP8 = &Z)\n    &DUP8 = 'N'\n  IF (&MS18 = &Z)\n    &MS18 = 'T'\n  IF (&MS28 = &Z)\n    &MS28 = 'N'\n  IF (&SPL8 = &Z)\n    &SPL8 = 'N'\n  IF (&UPC8 = &Z)\n    &UPC8 = 'N'\n  IF (&GDDM8 = &Z)\n    &GDDM8 = 'N'\n  IF (&PSG8 = &Z)\n    &PSG8 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  IF (&BDE8 \u00ac= ' ')\n    VER (&BDO8,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO8,&BDE8)'\n  ELSE\n    IF (&BDO8 \u00ac= ' ')\n      &BIND = 'BIND(&BDO8)'\n  VER (&SEP8,NB,LIST,Y,N,MSG=SCHP015)\n  VER (&CH18,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH28,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH38,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH48,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&DUP8,LIST,Y,N,MSG=SCHP017)\n  VER (&MS18,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS28,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT8,LISTV,&LDEVTYP,MSG=SCHP010Y)\n  IF (&ROT8 = ' ' OR &ROT8 = 'PG4A')\n    &DEVT = PG4A\n  IF (&ROT8 = '90' OR &ROT8 = 'PG4A90')\n    &DEVT = PG4A90\n  IF (&ROT8 = '180' OR &ROT8 = 'PG4A180')\n    &DEVT = PG4A180\n  IF (&ROT8 = '270' OR &ROT8 = 'PG4A270')\n    &DEVT = PG4A270\n  IF (&ROT8 = 'PG4L')\n    &DEVT = PG4L\n  IF (&ROT8 = 'PG4A4')\n    &DEVT = PG4A4\n  IF (&ROT8 = 'PG4B5')\n    &DEVT = PG4B5\n  IF (&ROT8 = 'PG4E')\n    &DEVT = PG4E\n  IF (&SPL8 \u00ac= ' ')\n    VER (&SPL8,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL8,1) Y,SP *,'')\n  ELSE\n    &SPL8 = N\n    &SPL = &Z\n  IF (&UPC8 \u00ac= ' ')\n    VER (&UPC8,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC8,1) Y,UP *,'')\n  ELSE\n    &UPC8 = N\n    &UPC = &Z\n  VER (&GDDM8,NB,LIST,Y,N,MSG=SCHP010D)\n  VER (&PSG8,NB,LIST,Y,N,MSG=SCHP010E)\n  IF (&SPM8 \u00ac= ' ')\n    &SEPM = 'SEP(&SPM8)'\n  VER (&SGL8,DSNAME,MSG=SCHP010F)\n  VER (&PRO8,DSNAME,MSG=SCHP010F)\n  VER (&SLB8,DSNAME,MSG=SCHP010F)\n\n  VPUT (BDO8,BDE8,SEP8,CH18,CH28,CH38,CH48,\n        DUP8,MS18,MS28,ROT8,SPL8,UPC8,GDDM8,\n        PSG8,SPM8,SGL8,PRO8,SLB8,OSO8) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHP4224                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(LOW)  COLOR(YELLOW)\n ~ TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - 4224 (PG3) Formatting Options\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n~\n~Binding:  ODD page    %===>_Z          +Specify an ODD page margin offset\n~         EVEN page    %===>_Z          +Specify an EVEN page margin offset\n~Change separator pages%===>_Z+          Y=Yes, N=No, default=Yes\n~Character set 1       %===>_Z       ~   Character set 2       %===>_Z       +\n~Character set 3       %===>_Z       ~   Character set 4       %===>_Z       +\n~Error message controls%===>_Z+          T=Terminal, O=Output file DSMUTMSG\n~                      %===>_Z+          Y=Imbed trace, N=No trace\n~Page size or device   %===>_Z    +      W,NS,L or any 4224 logical device type\n~Spelling verification %===>_Z+          Y=Yes, N=No, default=No\n~Uppercase text output %===>_Z+          Y=Yes, N=No, default=No\n~Use GDDM/PGF graphics %===>_Z+          Y=Yes, N=No, default=No\n~Create page segments  %===>_Z+          Y=Yes, N=No, default=No\n~\n~Separation master no.s%===>_Z                                                 +\n~Page seglib dsname    %===>_Z                                                 +\n~Profile data set      %===>_Z                                                 +\n~SCRIPT maclib dsname  %===>_Z                                                 +\n~Other SCRIPT options  %===>_Z                                                 +\n~\n~\n~\n)INIT\n  &SVAR = 7\n  .ZVARS = '(BDO&SVAR,BDE&SVAR,SEP&SVAR,CH1&SVAR,CH2&SVAR,CH3&SVAR,CH4&SVAR,+\n             MS1&SVAR,MS2&SVAR,ROT&SVAR,SPL&SVAR,UPC&SVAR,GDDM&SVAR,+\n             PSG&SVAR,SPM&SVAR,SGL&SVAR,PRO&SVAR,SLB&SVAR,OSO&SVAR)'\n  .CURSOR = BDO&SVAR\n  .HELP   = SCHTP170\n  &LDEVTYP = 'W,NS,L,PG3A,PG3W,PG3NS,PG3L,PG3A4,PG3B4,PG3B5'\n\n  IF (&SEP7 = &Z)\n    &SEP7 = 'Y'\n  IF (&MS17 = &Z)\n    &MS17 = 'T'\n  IF (&MS27 = &Z)\n    &MS27 = 'N'\n  IF (&SPL7 = &Z)\n    &SPL7 = 'N'\n  IF (&UPC7 = &Z)\n    &UPC7 = 'N'\n  IF (&GDDM7 = &Z)\n    &GDDM7 = 'N'\n  IF (&PSG7 = &Z)\n    &PSG7 = 'N'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  IF (&BDE7 \u00ac= ' ')\n    VER (&BDO7,NB,MSG=SCHP014)\n    &BIND = 'BIND(&BDO7,&BDE7)'\n  ELSE\n    IF (&BDO7 \u00ac= ' ')\n      &BIND = 'BIND(&BDO7)'\n  VER (&SEP7,NB,LIST,Y,N,MSG=SCHP015)\n  VER (&CH17,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH27,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH37,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&CH47,INCLUDE,ALPHA,NUM,MSG=SCHP016)\n  VER (&MS17,NB,LIST,T,O,MSG=SCHP018)\n  VER (&MS27,NB,LIST,Y,N,MSG=SCHP019)\n  VER (&ROT7,LISTV,&LDEVTYP,MSG=SCHP010Z)\n  IF (&ROT7 = ' ' OR &ROT7 = 'PG3A')\n    &DEVT = PG3A\n  IF (&ROT7 = 'W' OR &ROT7 = 'PG3W')\n    &DEVT = PG3W\n  IF (&ROT7 = 'NS' OR &ROT7 = 'PG3NS')\n    &DEVT = PG3NS\n  IF (&ROT7 = 'L' OR &ROT7 = 'PG3L')\n    &DEVT = PG3L\n  IF (&ROT7 = 'PG3A4')\n    &DEVT = PG3A4\n  IF (&ROT7 = 'PG3B4')\n    &DEVT = PG3B4\n  IF (&ROT7 = 'PG3B5')\n    &DEVT = PG3B5\n  IF (&SPL7 \u00ac= ' ')\n    VER (&SPL7,LIST,Y,N,MSG=SCHP010B)\n    &SPL = TRANS(TRUNC(&SPL7,1) Y,SP *,'')\n  ELSE\n    &SPL7 = N\n    &SPL = &Z\n  IF (&UPC7 \u00ac= ' ')\n    VER (&UPC7,LIST,Y,N,MSG=SCHP010C)\n    &UPC = TRANS(TRUNC(&UPC7,1) Y,UP *,'')\n  ELSE\n    &UPC7 = N\n    &UPC = &Z\n  VER (&GDDM7,NB,LIST,Y,N,MSG=SCHP010D)\n  VER (&PSG7,NB,LIST,Y,N,MSG=SCHP010E)\n  IF (&SPM7 \u00ac= ' ')\n    &SEPM = 'SEP(&SPM7)'\n  VER (&SGL7,DSNAME,MSG=SCHP010F)\n  VER (&PRO7,DSNAME,MSG=SCHP010F)\n  VER (&SLB7,DSNAME,MSG=SCHP010F)\n\n  VPUT (BDO7,BDE7,SEP7,CH17,CH27,CH37,CH47,\n        MS17,MS27,ROT7,SPL7,UPC7,GDDM7,\n        PSG7,SPM7,SGL7,PRO7,SLB7,OSO7) SHARED\n\n)HELP\n\n)END\n./ ADD NAME=SCHTPOU1                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              ---------------------------------------------------\n@              \u00a6  |Print Disposition & Separator Page Defaults@  \u00a6\n@              ---------------------------------------------------\n\n+  The Print Distribution and Separator Page Defaults panel provides the\n   user with a means to specify copies, forms, class, formdef, pagedef, and\n   external writer name for a formatted Script/VS document.\n\n   In addition the user is prompted to complete a series of fields that will\n   be printed upon the job header and trailer separator pages to aid with\n   the distribution and separation of Script documents.  The Title, Room,\n   Building, and 4 Address fields will be filled with information that can\n   be overtyped and changed if necessary.  The Print Notify field will be\n   filled with the system identification and userid to which a notification\n   of print completion can be sent.\n\n   The display of this panel can be suppressed from any of the advanced\n   logical device panels by changing the field \"Change separator page\" from\n   Y (Yes) to N (No).\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTPOU2\n\n)END\n./ ADD NAME=SCHTPOU2                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              ---------------------------------------------------\n@              \u00a6  |Print Disposition & Separator Page Defaults@  \u00a6\n@              ---------------------------------------------------\n\n+  The Title, Destination, Name, Room/Phone, Building, Department, Address,\n   and Print Notify Fields are described in the MVS/ESA \"JCL Reference\",\n   GC28-1654, JES2 Version 4.  All of these fields are documented in Chapter\n   21, 'OUTPUT JCL Statement' and  are displayed on the screen in the exact\n   same order as they appear on the job header and separator pages.\n\n   The Title, Name, Room/Phone, Building, Department, and Address are 1-60\n   characters in length.  There are no restrictions on which characters may\n   be typed in the fields.  Overtyped fields will have their contents stored\n   for later display during subsequent Script/VS sessions.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTPOU3\n\n)END\n./ ADD NAME=SCHTPOU3                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              ---------------------------------------------------\n@              \u00a6  |Print Disposition & Separator Page Defaults@  \u00a6\n@              ---------------------------------------------------\n\n+  The Destination name has a total length of 17 bytes.  The Print Notify\n   field specifies up to four users to whom a print completion can be sent.\n   Each recipient of a print complete message must coded as follows:\n\n     Node.Userid1, Node.Userid2, Node.Userid3, Node.Userid4\n\n   The Node is optional.  If omitted, the print message defaults to the\n   node from which the Script document was printed.\n\n   If the End command is entered, the Script print file is kept without\n   printed.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTPOU3\n\n)END\n./ ADD NAME=SCHTPPRT                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              ----------------------------------------------------\n@              \u00a6  |DCF SCRIPT Print File Disposition Processing@  \u00a6\n@              ----------------------------------------------------\n\n+  Upon successful formatting of the Script/VS text file, a panel is\n   displayed which provides 4 choices for processing and handling of the\n   newly created Script print file.  The default option is PD:  print the\n   data set and delete it thereafter.\n\n   The print file attributes are displayed using the TSO/E \"LISTDSI\"\n   function.  The print file is allocated on SMS-managed storage as a PDS/E.\n\n   The amount of CPU time and SRM (System Resource Manager) service units\n   consumed by Script/VS during text formatting is also displayed.  The CPU\n   time is displayed in seconds and hundredths of a second.  This number may\n   be useful for determining a correct batch job class when running\n   Script/VS under control of the TSO batch TMP (IKJEFT01).\n\n)PROC\n   &ZUP = SCH0P100\n\n)END\n./ ADD NAME=SCHTPSEG                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@                    --------------------------------------\n@                    \u00a6  |ICU to Page Segment Conversion@  \u00a6\n@                    --------------------------------------\n\n+  The ICU to Page Segment Conversion panel provides a panel-driven means to\n   convert ICU-generated data and format graphic components into page\n   segments.\n\n   The ICU Data and Format data set names must be supplied.  In addition a\n   Chart Data name must be supplied.  The Chart Format name is optional.\n   The Segment width and depth may be overtyped and default to 60 and 40\n   tenths of an inch, respectively.\n\n   The GDDM-supplied utility, ADMUCDSO, is used to convert the data and\n   format components to page segments.  The format of the data set name for\n   the dynamically generated page segment is USERID.CHARTDATA.ADMIMAGE.\n\n)PROC\n   &ZUP = SCH0P100\n\n)END\n./ ADD NAME=SCHTP100                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n+  The Document Composition Facility SCRIPT/VS text formatter formats an\n   input text file for printing (i.e. presentation) upon various output\n   devices such as printers and display devices.  Help information is\n   available for the SCRIPT command in an online TSO environment.\n\n   To obtain the online help information at the TSO READY prompt, type:\n\n    @HELP SCRIPT+\n\n   To obtain the online help information while using the ISPF or ISPF/PDF\n   products, type at the command line:\n\n    @TSO HELP SCRIPT+\n\n   Refer to IBM publication:  \"SCRIPT/VS Language Reference\", no. SH35-0070.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP101\n\n)END\n./ ADD NAME=SCHTP101                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n@  \"DCF Skill Level\": +this field is required and defaults to \"A\" for the\n   advanced mode of operation.\n\n   The@advanced mode+of operation provides the user with the greatest degree\n   of control when formatting a document for a given output device.  A core\n   set of defaults is provided for the advanced mode user;  all options may\n   be changed at the user's discretion.\n\n   The@beginner's mode+of operation provides the least degree of control\n   defaulting all of the formatting options for a a given document to a\n   pre-determined set of choices.  The defaults for beginner's mode are\n   identical to advanced mode assuming no user-specified changes are made\n   within the body of the advanced panel.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP102\n\n)END\n./ ADD NAME=SCHTP102                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n@  \"Output Device:\" +This field is required, defaults to \"3820\", and\n   represents the intended, real output device upon which a given text\n   document is to be printed or presented (i.e. made available for viewing).\n\n   Possible real device choices for this field include the following:\n   *@TERM+or@3270:+ Both choices are functionally equivalent to each other\n     including a workstation monitor or dumb terminal.\n\n   *@1403:+ The 1403 is a high-speed, impact line printer or equivalent\n     (e.g. 3287).\n\n   *@3800:+ The 3800 (model 3) maximum print rating is 214 impressions per\n     minute.  Printhead resolution is 240 pels per inch.  The IBM 3900,\n     Siemens 2300, and Siemens 2140 are functionally equivalent at the data\n     stream level.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP103\n\n)END\n./ ADD NAME=SCHTP103                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n+  *@PS:+ any Adobe PostScript or compatible printer including the Apple\n     LaserWriter, the HP LaserJet with Adobe PostScript cartridge (or\n     equivalent cartridge such as the Pacific Data Products PE cartridge)\n\n   *@3820:+ The 3820 maximum print rating is 20 impressions per minute.\n     Printhead resolution is 240 pels per inch.\n\n   *@3812:+ The 3812 (model 2) maximum print rating is 12 impressions per\n     minute.  Printhead resolution is 240 pels per inch.\n\n   *@3816:+ The 3816 (models 01S and 01D) maximum print rating is 24\n     impressions per minute.  Printhead resolution is 240 pels per inch.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP104\n\n)END\n./ ADD NAME=SCHTP104                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n+  *@4224:+ The 4224 prints between 200 and 600 cps in Data Processing (DP)\n     mode, between 100 and 300 cps in Data Processing Text (DPT) mode, and\n     between 50 and 150 cps in Near Letter Quality (NLQ) mode, depending on\n     the model.  Printhead resolution is 144 pels per inch.\n\n   *@4028:+ The 4224 (model NS1) maximum print rating is 10 impressions per\n     minute.  Printhead resolution is 300 pels per inch.\n\n   *@AFP:+ This \"class\" of logical devices adds support for the IBM Core\n     Interchange Fonts.  The IBM Core Interchange Fonts allow consistent\n     page layout between 240-pel printers (e.g. IBM 3820 and 3835) and 300-\n     pels printers (e.g. IBM 4028).  This class of logical devices produces\n     output similar in appearance to the existing DCF 3820 device types but\n     use the Core Interchange type family Times New Romand instean of\n     Sonoran Serif.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP105\n\n)END\n./ ADD NAME=SCHTP105                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n+  *@ISI:+ Specifying ISI allows selection of an Interface Systems, Inc.,\n     7028 or 7817 AFP page printer which has been configured to emulate an\n     IBM 3812, 3816, or 4028.  The Script/VS dialog has been configured to\n     map ISI to one of the 3 logical device families depending upon the\n     hardware configuration of the front panel setting.  Consult with your\n     technical support group if you need to know what logical device family\n     is in use.  The default setting is IBM 3816 (PG2A).\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP106\n\n)END\n./ ADD NAME=SCHTP106                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n@  \"Preview the Script output file using the GDDM CDPU\":+ This field is\n   optional, defaults to N (i.e. NO), and allows the user to view a page\n   mode, composite document upon a display device in full-screen, graphics\n   mode after Script/VS formatting has successfully completed.\n\n   Software and hardware requirements:\n   * The preview option is only valid when the output device is 3800, 3820,\n     3812, 3816, 4224, 4028, AFP, and ISI.\n\n   * The user must have logged on with the correct VTAM logmode table\n     specification; the user's terminal must support or emulate the enhanced\n     3270 data stream.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP107\n\n)END\n./ ADD NAME=SCHTP107                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n+  Software and hardware requirements (continued):\n   * If the user is using a 3270 emulator such as Attachmate, Rumba, or\n     OS/2, the correct graphics option must be installed and properly\n     configured.  Graphics options include:  Attachmate Host Graphics\n     Option, Rumba Host Graphics, OS/2 with GDDM OS/2 Link, and PC/DOS with\n     GDDM PCLK.\n\n   * A mouse or compatible pointing device may be used upon initialization\n     of the GDDM Composite Document Printing Utility.\n\n   * Mouse support is activated using GDDM's \"User Control\".  User Control\n     is activated using the PA3 key.  PA3 is the \"SHIFT + PAGE DOWN\" keys on\n     an IBM Enhanced Keyboard or equivalent using Attachmate's Extra.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP108\n\n)END\n./ ADD NAME=SCHTP108                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |The Document Composition Facility Text Formatter@  \u00a6\n@           --------------------------------------------------------\n\n+  Software and hardware requirements (continued):\n   * The User Control options appearing at the bottom of the display may be\n     clicked upon to activate the respective function.\n\n   * Click on 2 diagonally adjacent corners to activate the \"ZOOM IN\"\n     feature.  A small cross-hatch ('x') will appear at each corner.\n\n   * An ADMGDF file must be pre-allocated prior to using the DCF Script/VS\n     ISPF dialog if the OUTPUT feature within User Control is used.\n\n)PROC\n   &ZUP = SCH0P100\n   &ZCONT = SCHTP108\n\n)END\n./ ADD NAME=SCHTP110                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Line Devices:  TERM, 2741, 3270\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           --------------------------------------------------------\n@           \u00a6  |Advanced Text Formatting for TERM, 2741, or 3270@  \u00a6\n@           --------------------------------------------------------\n\n+  The advanced text formatting panel for device TERM or 3270 allows the\n   Script/VS user to format documents for an IBM 2741 or 3270.  The physical\n   device type corresponding to the TERM logical device can be either 2741\n   or 3270, depending upon the actual terminal type.\n\n   This panel allows the user to view a formatted document upon a hardcopy\n   or display terminal.  It is undesirable to make use of these logical\n   devices when formatting long documents since it may take considerable\n   time to scroll through the formatted output.  \"Proofing\" small documents\n   with these logical devices is a more efficient use of this option prior\n   to printing upon a line or page printer.\n\n   An optional profile data set, Script macro library dataset name, and any\n   miscellaneous keyword operands may also be specified.\n\n)PROC\n   &ZUP = SCHP3270\n\n)END\n./ ADD NAME=SCHTP120                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Line Devices:  1403 and STAIRS/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@           -------------------------------------------------------\n@           \u00a6  |Advanced Text Formatting for 1403 and STAIRS/VS@  \u00a6\n@           -------------------------------------------------------\n\n+  The advanced text formatting panel for intended output device 1403 allows\n   the Script/VS user to format documents for an IBM 1403 impact printer or\n   equivalent, or STAIRS.  The output generated by Script/VS using these\n   logical devices is character-mode data which can be printed upon virtually\n   any type of printer.\n\n   The \"Change separator page\" field allows the user to make required changes\n   to the job separator header and trailer pages if printing of the document\n   is needed.\n\n   The \"1403 or STAIRS device\" field allows the user to specify any of the\n   following possible logical device types:  1403N6 (the default), 1403N8,\n   1403W6, 1403W8, 1403W6S, 1403W8S, 1403SW, and STAIRS.  The 1403SW logical\n   device is a 12-pitch device; all other 1403 devices are 10-pitch.\n\n   An optional profile data set, Script macro library data set name, and any\n   miscellaneous keyword operands may also be specified.\n\n)PROC\n   &ZUP = SCHP3270\n\n)END\n./ ADD NAME=SCHTP130                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Adobe PostScript Devices\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@        -------------------------------------------------------------\n@        \u00a6  |Advanced Text Formatting for Adobe PostScript Devices@  \u00a6\n@        -------------------------------------------------------------\n\n+  The advanced text formatting panel for Adobe PostScript devices allows\n   the user to format documents for printing upon Adobe PostScript or\n   compatible printers.  The output generated by Script/VS using a\n   PostScript logical device is an ASCII page-mode data stream.  An EBCDIC\n   data stream may be generated for viewing and/or editing on a host-based\n   system.\n\n   The \"Change separator page\" field allows the user to make required changes\n   to the job separator header and trailer pages if printing of the document\n   is needed.\n\n   The \"Rotate or device type\" field allows the user to specify any of the\n   following possible logical device types:  PSA (the default), PSA90,\n   PSA180, PSA270, PSB, PSL, PSA3, PSA4, and PSB5.  The line spacing control\n   word and the fonts used in the document.\n\n   The \"Use GDDM/PGF graphics\" provides a \"bridge\" to the Interactive Chart\n   Utility, the Vector Symbol Editor, and the Image Symbol Editor.\n\n)PROC\n   &ZUP   = SCHPPS\n   &ZCONT = SCHTP131\n\n)END\n./ ADD NAME=SCHTP131                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Adobe PostScript Devices\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@        -------------------------------------------------------------\n@        \u00a6  |Advanced Text Formatting for Adobe PostScript Devices@  \u00a6\n@        -------------------------------------------------------------\n\n+  The \"Separation master no.s\" option allows you to separate a page into\n   multiple masters that can be used in an offset printing process to\n   produce color documents or as multi-part forms.  Each output page is\n   produced \"n\" times where \"n\" is the number of masters selected for that\n   page.  The \"n\" masters specified correspond to the numbers given on the\n   .SM (Separation Master) control word.  The SEPMASTR command option is\n   specified as follows:  n0 ... n16  (where n0 through n16 represent the\n   specified suboptions) .\n\n   The \"PostScript imbed lib\" option allows you to specify the name of a\n   partitioned data set that contains ASCII PostScript commands that are to\n   be included in a document using the .PO (PostScript) control word.  The\n   SEARCH option of the Script command is used to search the specified\n   library or partitioned data set for imbedded or appended files.\n\n   An optional profile data set, Script macro library data set name, and any\n   miscellaneous keyword operands may also be specified.\n\n)PROC\n   &ZUP = SCHPPS\n\n)END\n./ ADD NAME=SCHTP140                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3800/3900/2300/2140\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@             ---------------------------------------------------\n@             \u00a6  |Advanced Text Formatting for 3800-3 Devices@  \u00a6\n@             ---------------------------------------------------\n\n+  The advanced text formatting panel for 3800-3 and compatible devices\n   allows the user to format documents for printing upon full-function\n   AFP IBM 3800-3, Siemens 2300, or printers compatible at the data stream\n   level.\n\n   The \"Change separator page\" field allows the user to make required changes\n   to the job separator header and trailer pages if printing of the document\n   is needed.\n\n   The \"Rotate or device type\" field allows the user to specify any of the\n   following possible logical device types:  38PPN (the default), 38PPW,\n   38PPNS, 38PPWS, 38PPW90, 38PPNS90, and 38PPW270.  Note that it may be\n   necessary to rotate output 90 (i.e. or use 38PPNS90) to format text in\n   portrait mode when printing with FORMS=STD.\n\n)PROC\n   &ZUP   = SCHP3800\n   &ZCONT = SCHTP141\n\n)END\n./ ADD NAME=SCHTP141                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3800/3900/2300/2140\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@             ---------------------------------------------------\n@             \u00a6  |Advanced Text Formatting for 3800-3 Devices@  \u00a6\n@             ---------------------------------------------------\n\n+  The \"Use GDDM/PGF graphics\" provides a \"bridge\" to the Interactive Chart\n   Utility, the Vector Symbol Editor, and the Image Symbol Editor.\n\n   The \"Create page segments\" option allows you to generate (i.e. build\n   or convert) page segments using the GDDM-supplied utility ADMUCDSO.\n   Page segments can be built just prior to formatting a document with\n   Script/VS.  This option facilitates changing static documents that\n   may need occasional updating of one or more page segments.\n\n   The \"Separation master no.s\" option allows you to separate a page into\n   multiple masters that can be used in an offset printing process to\n   produce color documents or as multi-part forms.  Each output page is\n   produced \"n\" times where \"n\" is the number of masters selected for that\n   page.  The \"n\" masters specified correspond to the numbers given on the\n   .SM (Separation Master) control word.  The SEPMASTR command option is\n   specified as follows:  n0 ... n16  (where n0 through n16 represent the\n   specified suboptions) .\n\n)PROC\n   &ZUP   = SCHP3800\n   &ZCONT = SCHTP142\n\n)END\n./ ADD NAME=SCHTP142                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3800/3900/2300/2140\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@             ---------------------------------------------------\n@             \u00a6  |Advanced Text Formatting for 3800-3 Devices@  \u00a6\n@             ---------------------------------------------------\n\n+  The \"Page seglib dsname\" option allows you to specify the name of a\n   partitioned data set that contains one or more segments to be included in\n   a document using the .SI (Segment Include) control word.  The optional\n   data set name will be concatenated to the system-supplied page segment\n   libraries using the SCRPTSEG DDNAME option.\n\n   An optional profile data set, Script macro library data set name, and any\n   miscellaneous keyword operands may also be specified.\n\n)PROC\n   &ZUP = SCHP3800\n\n)END\n./ ADD NAME=SCHTP150                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3820 (PG1xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              --------------------------------------------------\n@              \u00a6  |Advanced Text Formatting for 3820 Printers@  \u00a6\n@              --------------------------------------------------\n\n+  The advanced text formatting panel for 3820 printers allows the user to\n   format documents for printing upon IBM 3820 page printers.\n\n   The \"Change separator page\" field allows the user to make required changes\n   to the job separator header and trailer pages if printing of the document\n   is needed.\n\n   The \"Rotate or device type\" field allows the user to specify any of the\n   following possible logical device types:  PG1A (the default), PG1A90,\n   PG1A180, PG1A270, PG1L, PG1A4, PG1B4, and PG1B5.\n\n)PROC\n   &ZUP   = SCHP3820\n   &ZCONT = SCHTP151\n\n)END\n./ ADD NAME=SCHTP151                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3820 (PG1xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              --------------------------------------------------\n@              \u00a6  |Advanced Text Formatting for 3820 Printers@  \u00a6\n@              --------------------------------------------------\n\n+  The \"Use GDDM/PGF graphics\" provides a \"bridge\" to the Interactive Chart\n   Utility, the Vector Symbol Editor, and the Image Symbol Editor.\n\n   The \"Create page segments\" option allows you to generate (i.e. build\n   or convert) page segments using the GDDM-supplied utility ADMUCDSO.\n   Page segments can be built just prior to formatting a document with\n   Script/VS.  This option facilitates changing static documents that\n   may need occasional updating of one or more page segments.\n\n   The \"Separation master no.s\" option allows you to separate a page into\n   multiple masters that can be used in an offset printing process to\n   produce color documents or as multi-part forms.  Each output page is\n   produced \"n\" times where \"n\" is the number of masters selected for that\n   page.  The \"n\" masters specified correspond to the numbers given on the\n   .SM (Separation Master) control word.  The SEPMASTR command option is\n   specified as follows:  n0 ... n16  (where n0 through n16 represent the\n   specified suboptions) .\n\n)PROC\n   &ZUP   = SCHP3820\n   &ZCONT = SCHTP152\n\n)END\n./ ADD NAME=SCHTP152                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3820 (PG1xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              --------------------------------------------------\n@              \u00a6  |Advanced Text Formatting for 3820 Printers@  \u00a6\n@              --------------------------------------------------\n\n+  The \"Page seglib dsname\" option allows you to specify the name of a\n   partitioned data set that contains one or more segments to be included in\n   a document using the .SI (Segment Include) control word.  The optional\n   data set name will be concatenated to the system-supplied page segment\n   libraries using the SCRPTSEG DDNAME option.\n\n   An optional profile data set, Script macro library data set name, and any\n   miscellaneous keyword operands may also be specified.\n\n)PROC\n   &ZUP = SCHP3820\n\n)END\n./ ADD NAME=SCHTP160                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3812/3816 (PG2xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@          -------------------------------------------------------\n@          \u00a6  |Advanced Text Formatting for 3812/3816 Printers@  \u00a6\n@          -------------------------------------------------------\n\n+  The advanced text formatting panel for 3812 and 3816 printers allows the\n   user to format documents for printing upon IBM 3812, 3816, or printers\n   compatible at the data stream level.\n\n   The \"Change separator page\" field allows the user to make required changes\n   to the job separator header and trailer pages if printing of the document\n   is needed.\n\n   The \"Rotate or device type\" field allows the user to specify any of the\n   following possible logical device types:  PG2A (the default), PG2A90,\n   PG2A180, PG2A270, PG2L, PG2A4, PG2B4, and PG2B5.\n\n)PROC\n   &ZUP   = SCHP3816\n   &ZCONT = SCHTP160\n\n)END\n./ ADD NAME=SCHTP161                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3812/3816 (PG2xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@          -------------------------------------------------------\n@          \u00a6  |Advanced Text Formatting for 3812/3816 Printers@  \u00a6\n@          -------------------------------------------------------\n\n+  The \"Use GDDM/PGF graphics\" provides a \"bridge\" to the Interactive Chart\n   Utility, the Vector Symbol Editor, and the Image Symbol Editor.\n\n   The \"Create page segments\" option allows you to generate (i.e. build\n   or convert) page segments using the GDDM-supplied utility ADMUCDSO.\n   Page segments can be built just prior to formatting a document with\n   Script/VS.  This option facilitates changing static documents that\n   may need occasional updating of one or more page segments.\n\n   The \"Separation master no.s\" option allows you to separate a page into\n   multiple masters that can be used in an offset printing process to\n   produce color documents or as multi-part forms.  Each output page is\n   produced \"n\" times where \"n\" is the number of masters selected for that\n   page.  The \"n\" masters specified correspond to the numbers given on the\n   .SM (Separation Master) control word.  The SEPMASTR command option is\n   specified as follows:  n0 ... n16  (where n0 through n16 represent the\n   specified suboptions) .\n\n)PROC\n   &ZUP   = SCHP3816\n   &ZCONT = SCHTP162\n\n)END\n./ ADD NAME=SCHTP162                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  3812/3816 (PG2xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@          -------------------------------------------------------\n@          \u00a6  |Advanced Text Formatting for 3812/3816 Printers@  \u00a6\n@          -------------------------------------------------------\n\n+  The \"Page seglib dsname\" option allows you to specify the name of a\n   partitioned data set that contains one or more segments to be included in\n   a document using the .SI (Segment Include) control word.  The optional\n   data set name will be concatenated to the system-supplied page segment\n   libraries using the SCRPTSEG DDNAME option.\n\n   An optional profile data set, Script macro library data set name, and any\n   miscellaneous keyword operands may also be specified.\n\n)PROC\n   &ZUP = SCHP3816\n\n)END\n./ ADD NAME=SCHTP170                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  4224 (PG3xx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              --------------------------------------------------\n@              \u00a6  |Advanced Text Formatting for 4224 Printers@  \u00a6\n@              --------------------------------------------------\n\n+  The advanced text formatting panel for 4224 continuous-forms printers\n   allows users to format documents for printing upon IBM 4224 printers\n   or printers compatible at the data stream level.\n\n   The \"Change separator page\" field allows the user to make required changes\n   to the job separator header and trailer pages if printing of the document\n   is needed.\n\n   The \"Rotate or device type\" field allows the user to specify any of the\n   following possible logical device types:  PG3A (the default), PG3W,\n   PG3NS, PG3L, PG3A4, PG3B4, and PG3B5.\n\n)PROC\n   &ZUP   = SCHP4224\n   &ZCONT = SCHTP171\n\n)END\n./ ADD NAME=SCHTP171                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  4224 (PG3xx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              --------------------------------------------------\n@              \u00a6  |Advanced Text Formatting for 4224 Printers@  \u00a6\n@              --------------------------------------------------\n\n+  The \"Use GDDM/PGF graphics\" provides a \"bridge\" to the Interactive Chart\n   Utility, the Vector Symbol Editor, and the Image Symbol Editor.\n\n   The \"Create page segments\" option allows you to generate (i.e. build\n   or convert) page segments using the GDDM-supplied utility ADMUCDSO.\n   Page segments can be built just prior to formatting a document with\n   Script/VS.  This option facilitates changing static documents that\n   may need occasional updating of one or more page segments.\n\n   The \"Separation master no.s\" option allows you to separate a page into\n   multiple masters that can be used in an offset printing process to\n   produce color documents or as multi-part forms.  Each output page is\n   produced \"n\" times where \"n\" is the number of masters selected for that\n   page.  The \"n\" masters specified correspond to the numbers given on the\n   .SM (Separation Master) control word.  The SEPMASTR command option is\n   specified as follows:  n0 ... n16  (where n0 through n16 represent the\n   specified suboptions) .\n\n)PROC\n   &ZUP   = SCHP4224\n   &ZCONT = SCHTP172\n\n)END\n./ ADD NAME=SCHTP172                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  Core Fonts (AFPxxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@         -----------------------------------------------------------\n@         \u00a6  |Advanced Text Formatting Using Core Interchange Fonts@ \u00a6\n@         -----------------------------------------------------------\n\n+  The \"Page seglib dsname\" option allows you to specify the name of a\n   partitioned data set that contains one or more segments to be included in\n   a document using the .SI (Segment Include) control word.  The optional\n   data set name will be concatenated to the system-supplied page segment\n   libraries using the SCRPTSEG DDNAME option.\n\n   An optional profile data set, Script macro library data set name, and any\n   miscellaneous keyword operands may also be specified.\n\n)PROC\n   &ZUP = SCHPAFP\n\n)END\n./ ADD NAME=SCHTP180                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  4028 (PG4xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              --------------------------------------------------\n@              \u00a6  |Advanced Text Formatting for 4028 Printers@  \u00a6\n@              --------------------------------------------------\n\n+  The advanced text formatting panel for 4028 continuous-forms printers\n   allows users to format documents for printing upon IBM 4028 printers\n   or printers compatible at the data stream level.\n\n   The \"Change separator page\" field allows the user to make required changes\n   to the job separator header and trailer pages if printing of the document\n   is needed.\n\n   The \"Rotate or device type\" field allows the user to specify any of the\n   following possible logical device types:  PG4A (the default), PG4A90,\n   PG4A180, PG4A270, PG4L, PG4A4, PG4B5, and PG4E.\n\n)PROC\n   &ZUP   = SCHP4028\n   &ZCONT = SCHTP181\n\n)END\n./ ADD NAME=SCHTP181                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  4028 (PG4xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              --------------------------------------------------\n@              \u00a6  |Advanced Text Formatting for 4028 Printers@  \u00a6\n@              --------------------------------------------------\n\n+  The \"Use GDDM/PGF graphics\" provides a \"bridge\" to the Interactive Chart\n   Utility, the Vector Symbol Editor, and the Image Symbol Editor.\n\n   The \"Create page segments\" option allows you to generate (i.e. build\n   or convert) page segments using the GDDM-supplied utility ADMUCDSO.\n   Page segments can be built just prior to formatting a document with\n   Script/VS.  This option facilitates changing static documents that\n   may need occasional updating of one or more page segments.\n\n   The \"Separation master no.s\" option allows you to separate a page into\n   multiple masters that can be used in an offset printing process to\n   produce color documents or as multi-part forms.  Each output page is\n   produced \"n\" times where \"n\" is the number of masters selected for that\n   page.  The \"n\" masters specified correspond to the numbers given on the\n   .SM (Separation Master) control word.  The SEPMASTR command option is\n   specified as follows:  n0 ... n16  (where n0 through n16 represent the\n   specified suboptions) .\n\n)PROC\n   &ZUP   = SCHP4224\n   &ZCONT = SCHTP182\n\n)END\n./ ADD NAME=SCHTP182                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  4028 (PG4xxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@              --------------------------------------------------\n@              \u00a6  |Advanced Text Formatting for 4028 Printers@  \u00a6\n@              --------------------------------------------------\n\n+  The \"Page seglib dsname\" option allows you to specify the name of a\n   partitioned data set that contains one or more segments to be included in\n   a document using the .SI (Segment Include) control word.  The optional\n   data set name will be concatenated to the system-supplied page segment\n   libraries using the SCRPTSEG DDNAME option.\n\n   An optional profile data set, Script macro library data set name, and any\n   miscellaneous keyword operands may also be specified.\n\n)PROC\n   &ZUP = SCHP4028\n\n)END\n./ ADD NAME=SCHTP190                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  Core Fonts (AFPxxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@         -----------------------------------------------------------\n@         \u00a6  |Advanced Text Formatting Using Core Interchange Fonts@ \u00a6\n@         -----------------------------------------------------------\n\n+  The advanced text formatting panel for Core Interchange Fonts allows\n   users to format documents using IBM's Core Interchange Fonts.  The Core\n   Interchange Fonts are@IBM's strategic set of fonts+for use in all SAA\n   operating systems and presentation devices to@maximize interoperability.+\n\n   Some of the benefits of using the IBM Core Interchange Fonts include:\n\n   * @Consistent font metrics:+ Character positioning metrics for the IBM\n      Core Interchange Fonts were derived from Adobe Systems, Inc. outline\n      metric values and are consistent for all point sizes across a\n      particular typeface.  They also provide consistency between the IBM\n      240-pel and 300-pel raster printers as well as IBM outline font based\n      products such as OS/2.\n\n)PROC\n   &ZUP   = SCHPAFP\n   &ZCONT = SCHTP191\n)END\n./ ADD NAME=SCHTP191                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  Core Fonts (AFPxxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@         -----------------------------------------------------------\n@         \u00a6  |Advanced Text Formatting Using Core Interchange Fonts@ \u00a6\n@         -----------------------------------------------------------\n\n+  * @Consistent page layout+between 240-pel (e.g. IBM 3820) and the 300-pel\n      printers (e.g. IBM 4028 or ISI 7028).\n\n   * @Larger character sets and code page support:+ The IBM Core Interchange\n      Fonts are a superset of the Sonoran fonts containing significantly\n      larger character sets and supporting many more code pages than the\n      Sonoran fonts.  The larger character sets include a variety of symbols\n      not included in the Sonoran fonts.\n\n   Users are@strongly+encouraged to use the IBM Core Interchange Fonts.\n\n)PROC\n   &ZUP   = SCHPAFP\n   &ZCONT = SCHTP192\n)END\n./ ADD NAME=SCHTP192                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  Core Fonts (AFPxxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@         -----------------------------------------------------------\n@         \u00a6  |Advanced Text Formatting Using Core Interchange Fonts@ \u00a6\n@         -----------------------------------------------------------\n\n+  The \"Change separator page\" field allows the user to make required changes\n   to the job separator header and trailer pages if printing of the document\n   is needed.\n\n   The \"Rotate or device type\" field allows the user to specify any of the\n   following possible logical device types:  AFPA (the default), AFPA90,\n   AFPA180, AFPA270, AFPL, AFPA4, AFPB4, AFPB5, and AFPE.\n\n)PROC\n   &ZUP   = SCHPAFP\n   &ZCONT = SCHTP193\n)END\n./ ADD NAME=SCHTP193                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)  SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) CAPS(ON) JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n@TUTORIAL\u00ac\\-\\@SCRIPT/VS Logical Page Devices:  Core Fonts (AFPxxxx)\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n@         -----------------------------------------------------------\n@         \u00a6  |Advanced Text Formatting Using Core Interchange Fonts@ \u00a6\n@         -----------------------------------------------------------\n\n+  The \"Use GDDM/PGF graphics\" provides a \"bridge\" to the Interactive Chart\n   Utility, the Vector Symbol Editor, and the Image Symbol Editor.\n\n   The \"Create page segments\" option allows you to generate (i.e. build\n   or convert) page segments using the GDDM-supplied utility ADMUCDSO.\n   Page segments can be built just prior to formatting a document with\n   Script/VS.  This option facilitates changing static documents that\n   may need occasional updating of one or more page segments.\n\n   The \"Separation master no.s\" option allows you to separate a page into\n   multiple masters that can be used in an offset printing process to\n   produce color documents or as multi-part forms.  Each output page is\n   produced \"n\" times where \"n\" is the number of masters selected for that\n   page.  The \"n\" masters specified correspond to the numbers given on the\n   .SM (Separation Master) control word.  The SEPMASTR command option is\n   specified as follows:  n0 ... n16  (where n0 through n16 represent the\n   specified suboptions) .\n\n)PROC\n   &ZUP   = SCHPAFP\n   &ZCONT = SCHTP194\n\n)END\n./ ADD NAME=SCHTP300                               13AUG93 18.34.18\n%TUTORIAL -------------------  GDDM/PGF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                              %\n+\n%                     -----------------------------------\n%                     |      GDDM/PDF Tutorial Index    |\n                      -----------------------------------\n+  The%GDDM/PDF+option allows you to select one of 4 functions as listed\n   below.  To select a function, enter a one-character digit as listed on the\n   GDDM/ISPF Selection Menu, which is displayed when option%G+is entered\n   on the Primary Option Menu.\n+\n   The following topics are presented in sequence, or may be selected by number:\n    %1+- ICU      ...... Invoke the Interactive Chart Facility\n    %2+- ISE      ...... Invoke the Image Symbol Editor\n    %3+- VSE      ...... Invoke the Vector Symbol Editor\n\n     \"Graphical Data Display Manager - General Information\" - GC33-0319\n\n     \"Graphical Data Display Manager - Messages\"            - SC33-0325\n\n     \"GDDM Library Guide and Master Index\"                  - GC33-0595\n\n\n\n)PROC\n  &ZSEL = TRANS( &ZCMD\n               1,SCHTP310\n               2,SCHTP320\n               3,SCHTP330\n               )\n  &ZUP  = ISR00003\n\n)END\n./ ADD NAME=SCHTP310                               13AUG93 18.34.18\n%TUTORIAL -------------------  GDDM/PGF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |    Interactive Chart Utility    |\n                      -----------------------------------\n+\n+  The%Interactive Chart Utility+(ICU) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Interactive Chart Utility is a program\n   which allows a user to quickly and easily produce business charts in a\n   readily understood fashion.  The ICU can also be used to generate surface\n   charts, histograms, bar charts, pie charts, and Venn diagrams.  A detailed\n   discussion of the ICU can be found in the following IBM publication:\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Interactive Chart Utility User's Guide\" - SC33-0328+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the ICU.  You will find that the best way to learn about the ICU\n   is to use it.  In addition tutorial panels are incorporated within the ICU\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = SCHTP300\n)END\n./ ADD NAME=SCHTP320                               13AUG93 18.34.18\n%TUTORIAL -------------------  GDDM/PGF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |       Image Symbol Editor       |\n                      -----------------------------------\n+\n+  The%Image Symbol Editor+(ISE) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Image Symbol Editor is a program that\n   you can use at a display station to create new symbols, and change existing\n   ones.  Image symbols are used by GDDM as typefaces, special symbols (such\n   as company logos), shading patterns, or chart marker symbols.  A detailed\n   discussion of the ISE can be found in the following IBM publication:\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Image Symbol Editor User's Guide\" - SC33-0329+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the ISE.  You will find that the best way to learn about the ISE\n   is to use it.  In addition tutorial panels are incorporated within the ISE\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = SCHTP300\n)END\n./ ADD NAME=SCHTP330                               13AUG93 18.34.18\n%TUTORIAL -------------------  GDDM/PGF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |       Vector Symbol Editor      |\n                      -----------------------------------\n+\n+  The%Vector Symbol Editor+(VSE) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Vector Symbol Editor is a program\n   which allows a user at a display station to create new vector symbols and\n   change existing ones.  Vector symbols are used as typefaces and special\n   symbols (e.g. arrows). A vector symbol is a character or shape made up of\n   lines and curves between specified points.\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Vector Symbol Editor User's Guide\" - SC33-0330+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the VSE.  You will find that the best way to learn about the VSE\n   is to use it.  In addition tutorial panels are incorporated within the VSE\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = SCHTP300\n)END\n./ ADD NAME=SCH0P000                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n  $ TYPE(TEXT)  INTENS(HIGH) COLOR(PINK)\n  \u00a2 TYPE(TEXT)  INTENS(HIGH) COLOR(GREEN)\n  _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)\n  % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n  \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n  + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)\n  ~ TYPE(TEXT)  INTENS(LOW)  COLOR(PINK)\n  | TYPE(TEXT)  INTENS(HIGH) COLOR(BLUE)\n  @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@The Publisher's Workbench\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n%\n@   1 |SCRIPT/VS 4.0 -+DCF Script/VS Text Formatting & Printing Services\n@   2 |PRINTDS       -+TSO/E PRINTDS Hardcopy Output Generation\n@   3 |GDDM/PGF      -+Graphical Data Display Manager/Presentation Graphics\n@   4 |LINGO         -+Text analysis, proofreader, and dictionary system\n@   5 |VPS Utilities -+VTAM Printer Support Monitor and Control Facility\n%\n@   6 |FLSF          -+Font Library Service Facility (SC33-6166)\n@   7 |OGL           -+Overlay Generation Language\u00ac(*)\n@   8 |PMF           -+Print Management Facility using APL2 (SH35-0059)\n@   9 |PPFA          -+Page Printer Formatting Aid\u00ac(*)\n@  10 |PSAF          -+Print Services Access Facility (S544-3100)\n%\n|Enter Session Manager Mode%===>_ZSMG+  (YES or NO)\n%\n\u00ac  (*)+- product implementation scheduled for future date\n%\n%\n|Press the@END|key to terminate the Publisher's Workbench.+\n%\n)INIT\n  .CURSOR  = ZCMD\n  &ZHTOP   = ISR00003                   /* TUTORIAL TABLE OF CONTENTS */\n  &ZHINDEX = ISR91000                   /* TUTORIAL INDEX - 1ST PAGE  */\n  VGET (ZSESS) PROFILE\n  IF (&ZSESS = 'Y')\n    &ZSMG = TRANS(TRUNC(&ZSMMODE,1),Y,YES,*,NO)\n  IF (&ZSESS = 'N')\n    &ZSMG = NO\n\n)PROC\n  &ZPRIM = NO\n  &ZSMG = TRUNC(&ZSMG,1)\n  VER (&ZSMG,NB,LIST,Y,N)\n  &ZSM = TRANS(TRUNC(&ZSMG,1),Y,YES,N,NO)\n  &ZSMMODE = TRANS(TRUNC(&ZSM,1),Y,Y,N,N)\n  VPUT (ZSM,ZSMG,ZSMMODE) PROFILE\n  IF (.RESP = END) &ZSMG = NO\n\n  &ZSEL = TRANS(TRUNC(&ZCMD,'.')\n                1,'CMD(EXEC ''SYS0.SCRIPT.CLIST(SCH0P000)'')'\n/*              1,'PGM(ISRFPR) PARM((SCH0P100) 1) NEWPOOL' */\n                2,'CMD(%SCH0P200)'\n                3,'PANEL(SCH0P300)'\n                4,'PANEL(LGOE01)'\n                5,'PANEL(VPS@PRIM)'\n                6,'PANEL(AFLPTASK)'\n/*              7,' '          */\n                8,'CMD(%PMF)'\n/*              9,'CMD(%SCH0P900)' */\n               10,'CMD(%AFPRINT)'\n              ' ',' '\n                *,'?' )\n)END\n./ ADD NAME=SCH0P100                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n|DCF Skill Level%===>_Z+               A=Advanced, B=Basic\n|Output  Device %===>_Z   +            TERM, 3270, 1403, 3800, PS=PostScript,\n+                                      3820, 3812, 3816, 4224, 4028, AFP, ISI\n|\n|ISPF Library:\n|   Project%===>_PRJ1    +       _DEBUG+\n|   Group  %===>_LIB1    +\n|   Type   %===>_TYP1    +\n|   Member %===>_MEM     +             Blank for a member selection list\n|\n|Other Partitioned or Sequential Data Set:\n|   Data Set Name%===>_DSN                                                     +\n|\n|Preview the Script output file using the GDDM CDPU%===>_Z  + (Y=Yes/N=No)\n+(Only valid for 3800, 3820, 3812, 3816, 4224, 4028, AFP, ISI)\n|\n|\n+   Enter@\"HELP SCRIPT\"+from any TSO COMMAND line to obtain the function,\n+   syntax, and operands of the SCRIPT command.  A complete list of all DCF\n+   publications is also provided.  The SCRIPT DSNAME LEVEL is SYS0.SCRIPT.\n|\n)INIT\n  .ZVARS = '(SKILL,RDEV,CDPU)'\n  .HELP  = SCHTP100\n  &PRINTERS = 'TERM,3270,1403,3800,PS,3820,3812,3816,4224,4028,AFP,ISI'\n\n  &LIB2 = &Z\n  &LIB3 = &Z\n  &LIB4 = &Z\n  &PSWD = &Z\n  &TYP1 = &SCRP\n  &ZMLCSR = '        '           /* Added for member name pattern    */\n                                 /* support (wildcard of \"*\").       */\n\n  IF (&SKILL = &Z)\n    &SKILL = 'A'\n  IF (&RDEV = &Z)\n    &RDEV = '3820'\n    IF (&CDPU = &Z)\n      &CDPU = 'N'\n  IF (&RDEV \u00ac= &Z)\n    &CDPU = 'N'\n  IF (&DSN \u00ac= ' ')\n    &MEM = ' '\n    IF (.CURSOR = ' ')  .CURSOR = DSN\n  IF (.CURSOR = ' ')    .CURSOR = MEM\n\n)REINIT\n  IF (&ZMLCSR \u00ac= ' ')\n    .CURSOR = &ZMLCSR\n\n)PROC\n  VER (&SKILL,NB,LIST,B,A,MSG=SCHP010)\n  VER (&RDEV,NB,LISTV,&PRINTERS,MSG=SCHP011)\n\n                                 /* -------------------------------- */\n                                 /*                                  */\n  IF (&DSN \u00ac= ' ')               /* If the first character of the    */\n    &ZFC = TRUNC(&DSN,1)         /* data set name is \"'\", then       */\n    IF (&ZFC = '''')             /* check to see if the last \"'\"     */\n      &ZREM = .TRAIL             /* missing.                         */\n      &ZREM2 = TRUNC(&ZREM,'''') /* If the last \"'\" is missing,      */\n      IF (&ZREM2 = &ZREM)        /* then add it to the end of the    */\n        &DSN = '&DSN&ZFC'        /* data set name.                   */\n    &ZMLCSR = '********'         /*                                  */\n    PANEXIT((DSN,ZMLCSR),PGM,&ZMLVEXIT,&ZMLVDATA,MSG=ISRM040)\n                                 /*                                  */\n                                 /* Ref: 'SYS1.ISPPLIB(ISRFP09)'     */\n                                 /* \"ISPF Planning & Customization\"  */\n                                 /*                                  */\n                                 /* -------------------------------- */\n  VER (&DEBUG,NAME)\n  &SCRP = &TYP1\n  &CDPU = TRANS(TRUNC(&CDPU,1) Y,YES N,NO *,?)\n  IF (&RDEV = TERM,3270,1403,PS)\n    VER (&CDPU,LIST,NO,MSG=SCHP012)\n  ELSE\n    VER (&CDPU,LIST,YES,NO,MSG=SCHP013)\n\n  &ZSEL = 'CMD(%SCH0P110)'\n  VPUT (PRJ1,LIB1,SCRP,SKILL,RDEV,CDPU) PROFILE\n  VPUT (PRJ1,LIB1,SCRP,MEM,SKILL,RDEV,DEBUG,CDPU) SHARED\n\n  &ZFBROWS = ' '       /* Browse listing. If blank, no auto browse.  */\n  &ZFPRINT = ' '       /* Print panel name. If blank, no auto print. */\n  VPUT (ZFBROWS,ZFPRINT) SHARED\n\n)HELP\n  FIELD(SKILL) PANEL(SCHTP101)\n  FIELD(RDEV)  PANEL(SCHTP102)\n  FIELD(CDPU)  PANEL(SCHTP106)\n\n)END\n./ ADD NAME=SCH0P110                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)\n \u00a6 TYPE(INPUT) INTENS(HIGH) COLOR(RED) CAPS(ON)  JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - GDDM Initialization\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n+\\ \\  In order to use@GDDM+you must be logged on with: \\ \\\n+\n|\\ \\  327x/329x terminals -@TS03M3G \\ \\\n|\\ \\  Host-attached personal workstations -@TS03M2G+or@TS03M3G  \\ \\\n+\n+     Your workstation must be capable of displaying host-based graphics or\n+     configured with graphics emulation software (e.g. IBM's GDDM/OS2 LINK,\n+     or Attachmate Corporation's Host Graphics Option).\n+\n+\n+     If your workstation is appropriately configured as described above,\n+     and you wish to continue with GDDM initialization, then press the\n+    @ENTER+key.\n+\n+\n+\\ \\ If you wish to stop at this point, press the@END+command. \\ \\\n+\n)INIT\n  .CURSOR = ZCMD\n\n)PROC\n\n)END\n./ ADD NAME=SCH0P120                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)   INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)   INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT)  INTENS(HIGH) COLOR(RED)\n | TYPE(TEXT)   INTENS(HIGH) COLOR(BLUE)\n @ TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility - ICU to Page Segment Conversion\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n|\n+ Enter the data set names of the ICU ADMCDATA and ADMCFORM libraries:\n|\n| ICU Data   dsname  %===>_Z                                                  +\n| ICU Format dsname  %===>_Z                                                  +\n|\n+ Enter the ICU format and data names to be converted to a page segment:\n|\n| Chart Data   name  %===>_Z       +\n| Chart Format name  %===>_Z       +\n|\n+ Enter the width and depth of the image in tenths of an inch:\n|\n| Segment image width%===>_Z       +             (Default = 60 = 6 inches)\n|\n| Segment image depth%===>_Z       +             (Default = 40 = 4 inches)\n|\n|\n+ If the@END+command is entered, Script/VS document formatting will begin.\n+ Otherwise, press the@ENTER+key to continue ICU to page segment conversion.\n|\n)INIT\n  .ZVARS  = '(CHDNAME,CHFNAME,ICUDATA,ICUFORM,CHWIDTH,CHDEPTH)'\n  .CURSOR = CHDNAME\n  .HELP   = SCHTPSEG\n\n  IF (&CHWIDTH = &Z)\n    &CHWIDTH = 60\n  IF (&CHDEPTH = &Z)\n    &CHDEPTH = 40\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n\n)PROC\n  VER (&CHDNAME,NB,DSNAME,MSG=SCHP010F)\n  VER (&CHFNAME,NB,DSNAME,MSG=SCHP010F)\n  VER (&ICUDATA,NB,NAME,MSG=SCHP010J)\n  IF (&ICUFORM = ' ')\n    &ICUFORM = &ICUDATA\n  ELSE\n    VER (&ICUFORM,NAME,MSG=SCHP010J)\n  VER (&CHWIDTH,NB,NUM,MSG=SCHP010K)\n  VER (&CHDEPTH,NB,NUM,MSG=SCHP010K)\n\n  VPUT (CHDNAME,CHFNAME,ICUDATA,ICUFORM,CHWIDTH,CHDEPTH) SHARED\n\n)END\n./ ADD NAME=SCH0P140                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Document Composition Facility Print File Processing\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n|\n% PK+-|Print data set and keep      %K+-|Keep data set (without printing)\n% PD+-|Print data set and delete    %D+-|Delete data set (without printing)\n|\n| DCF SCRIPT input file...@&SCRPTIN\n|\n| DCF SCRIPT print file...@&SCRPTOUT\n|\n| Print file attributes...+     Unit = &UNIT\n+                             Volume = &VOL\n+                              Space = &SPACE\n+                              Dsorg = &DSORG\n+                              Recfm = &RECFM\n+                              Lrecl = &LRECL\n+                            Blksize = &BLKSIZE\n+                          Allocated = &ALLOC\n+                               Used = &USED\n|\n| DCF Script/VS CPU time (secs.hundredths) =+&C.. |SRM service units =+&S..\n|\n+ If@END+command is entered, the Script print file is@kept+without printing.\n|\n)INIT\n  .HELP = SCHTPPRT\n  IF (&ZCMD = ' ')\n   &ZCMD = 'PD'\n  &C = &DCFCPU\n  &S = &DCFSRV\n\n)PROC\n  VER (&ZCMD,NB,LIST,PK,PD,K,D,MSG=SCHP010H)\n  &PRINTOPT = &ZCMD\n  VPUT (PRINTOPT) SHARED\n\n)END\n./ ADD NAME=SCH0P150                               13AUG93 18.34.18\n)ATTR\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)   SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(YELLOW) CAPS(OFF) JUST(LEFT)\n \u00a6 TYPE(INPUT) INTENS(HIGH) COLOR(RED)    CAPS(ON)  JUST(LEFT)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\@Print Distribution & Separator Page Defaults\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n|\n| Copies     %===>\u00a6Z  +      (1-255 copies)    |Formdef%===>\u00a6Z     +  (6 chars)\n| Forms      %===>\u00a6Z       + (8 chars)         |Pagedef%===>\u00a6Z     +  (6 chars)\n| Class      %===>\u00a6Z+        (A-Z,0-9,*)       |Ext Wtr%===>\u00a6Z      + (8 chars)\n|\n| Title      %===>_Z                                                           +\n| Destination%===>_Z                +\n| Name       %===>_Z                                                           +\n| Room/Phone %===>_Z                                                           +\n| Building   %===>_Z                                                           +\n| Department %===>_Z                                                           +\n| Address    %===>_Z                                                           +\n|            %===>_Z                                                           +\n|            %===>_Z                                                           +\n|            %===>_Z                                                           +\n|\n| Print Notify+ (4 locations maximum, separated by a blank space)\n% ===>\u00a6Z                                                                      +\n|\n+ If@END+command is entered, the Script print file is@kept+without printing.\n|\n)INIT\n  .HELP = SCHTPOU1\n  .ZVARS = '(CPYCOUNT,FORMDEF,FORMNAME,PAGEDEF,CLASS,XWTR,+\n             TITLE,DESTID,NAME,ROOM,BLDG,DEPT,+\n             ADDR1,ADDR2,ADDR3,ADDR4,PRTMSG)'\n  .CURSOR = CPYCOUNT\n  &JOBCLASS = 'A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,+\n               0,1,2,3,4,5,6,7,8,9,*'\n  IF (&CPYCOUNT = &Z)    /* Default COPY Count for all jobs is 1.    */\n    &CPYCOUNT = 1\n  IF (&CLASS = &Z)       /* Default SYSOUT Class (3800) is set to 1. */\n    &CLASS = 1\n\n  IF (&TITLE = &Z)\n    &TITLE = 'Document Composition Facility SCRIPT/VS Spin Dataset Output'\n  IF (&DESTID = &Z)      /* Defauot output routing dest = CS01 (SFO) */\n    &DESTID = CS01       /* Don't initialize unless field is null.   */\n\n  IF (&ROOM = &Z)\n    &ROOM = '(415) XXX-XXXX, Output Bin XX, Cost Center XXX'\n  IF (&ADDR1 = &Z)\n    &ADDR1 = 'Charles Schwab & Co., Inc.'\n  IF (&ADDR2 = &Z)\n    &ADDR2 = 'Corporate Data Center'\n  IF (&ADDR3 = &Z)\n    &ADDR3 = 'San Francisco, CA'\n  IF (&ADDR4 = &Z)\n    &ADDR4 = '94104-4122'\n\n)REINIT\n  IF (.MSG \u00ac= ' ')\n    .ATTR(.CURSOR) = 'COLOR(RED) HILITE(BLINK)'\n    IF (&TITLE = &Z)\n    &TITLE = 'Document Composition Facility SCRIPT/VS Spin Dataset Output'\n\n)PROC\n  IF (&CPYCOUNT \u00ac= ' ')\n    VER (&CPYCOUNT,RANGE,1,255,MSG=SCHP010L)\n    &SCHCOPY = 'COPIES(&CPYCOUNT)'\n  ELSE\n    &SCHCOPY = 'COPIES(1)'\n  IF (&CLASS \u00ac= ' ')\n    VER (&CLASS,LISTV,&JOBCLASS,MSG=SCHP010M)\n    &SCHCLASS = 'CLASS(&CLASS)'\n  ELSE\n    &SCHCLASS = 'CLASS(1)'\n  IF (&FORMDEF \u00ac= ' ')\n    VER (&FORMDEF,INCLUDE,ALPHA,NUM,MSG=SCHP010N)\n    &SCHFORMD = 'FORMDEF(&FORMDEF)'\n  IF (&PAGEDEF \u00ac= ' ')\n    VER (&PAGEDEF,INCLUDE,ALPHA,NUM,MSG=SCHP010N)\n    &SCHPAGED = 'PAGEDEF(&PAGEDEF)'\n  IF (&FORMNAME \u00ac= ' ')\n    VER (&FORMNAME,INCLUDE,ALPHA,NUM,MSG=SCHP010N)\n    &SCHFORMS = 'FORMS(&FORMNAME)'\n  IF (&XWTR \u00ac= ' ')\n    VER (&XWTR,INCLUDE,ALPHA,NUM,MSG=SCHP010N)\n    &SCHXWTR = 'WRITER(&XWTR)'\n\n  IF (&TITLE \u00ac= ' ')\n    &SCHTITLE = 'TITLE(''&TITLE'')'\n  ELSE\n    &SCHTITLE = 'TITLE(''Document Composition Facility +\n    SCRIPT/VS Spin Dataset Output'')'\n\n  VER (&DESTID,NB,MSG=SCHP010O)\n  &SCHDEST = 'DEST(&DESTID)'\n  VER (&NAME,NB,MSG=SCHP010P)\n  &SCHNAME = 'NAME(''&NAME'')'\n\n  IF (&ROOM \u00ac= ' ')\n    &SCHROOM = 'ROOM(''&ROOM'')'\n  ELSE\n    &SCHROOM = 'ROOM(''(415) XXX-XXXX, +\n    Output Bin XX, Cost Center XXX'')'\n\n  VER (&BLDG,NB,MSG=SCHP010Q)\n  &SCHBLDG = 'BUILDING(''&BLDG'')'\n  VER (&DEPT,NB,MSG=SCHP010R)\n  &SCHDEPT = 'DEPT(''&DEPT'')'\n\n  IF (&ADDR1 \u00ac= ' ')\n    &SCHADDR1 = &ADDR1\n  ELSE\n    &SCHADDR1 = 'Charles Schwab & Co., Inc.'\n  IF (&ADDR2 \u00ac= ' ')\n    &SCHADDR2 = &ADDR2\n  ELSE\n    &SCHADDR2 = 'Corporate Data Center'\n  IF (&ADDR3 \u00ac= ' ')\n    &SCHADDR3 = &ADDR3\n  ELSE\n    &SCHADDR3 = 'San Francisco, CA'\n  IF (&ADDR4 \u00ac= ' ')\n    &SCHADDR4 = &ADDR4\n  ELSE\n    &SCHADDR4 = '94104-4122'\n  &SCHADDR =\n  'ADDRESS(''&SCHADDR1'',''&SCHADDR2'',''&SCHADDR3'',''&SCHADDR4'')'\n  IF (&PRTMSG \u00ac= ' ')\n    &SCHNOTFY = 'NOTIFY(&PRTMSG)'\n\n  VPUT (CPYCOUNT,FORMDEF,FORMNAME,PAGEDEF,CLASS,XWTR,\n        TITLE,DESTID,NAME,ROOM,BLDG,DEPT,\n        ADDR1,ADDR2,ADDR3,ADDR4,PRTMSG) PROFILE\n)END\n./ ADD NAME=SCH0P160                               13AUG93 18.34.18\n)ATTR\n)BODY EXPAND(\\\\)\n%\\-\\ Document Composition Facility - SCRPTFIL Allocation Failure \\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n+  During allocation of the DCF Script/VS output file (SCRPTFIL), an error\n+  occurred which caused the TSO ALLOCATE command to set a return code of 12.\n+  If the requested printer is a 3800, 3820, 3812, 3816, 4224, or 4028, the\n+  error occurred in subroutine ALLOCATE-FILE-VBM-8205-8209.  If the requested\n+  printer is a 1403 or PostScript printer, the error occurred in subroutine\n+  ALLOCATE-NONUNIQUE-FILE.\n+\n%  The most probable cause of this problem is:\n+\n%    *  Insufficient space+within the SMS-managed pool of online TSO volumes\n+       to accomodate allocation of the output PDS/E to be used by Script/VS.\n+\n%  Suggested corrective/recovery actions:\n+\n%    *  Attempt to re-execute this application.\n%    * +Using any appropriate ISPF, TSO, or batch utility, determine if there\n+       is adequate, on-line space within the TSODA SMS-managed storage pool.\n%    * +If the problem persists, contact OSVS Technical Services or Storage\n+       Systems and Administration.\n+\n+\n)INIT\n  .CURSOR = ZCMD\n\n)PROC\n\n)END\n./ ADD NAME=SCH0P161                               13AUG93 18.34.18\n)ATTR\n)BODY EXPAND(\\\\)\n%\\-\\ Document Composition Facility - SCRPTFNT Allocation Failure \\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n+  During allocation of the AFP font libraries or the Adobe PostScript font\n+  metrics library, an error occurred which caused the TSO ALLOCATE command\n+  to set a return code of 12.  The error occurred at label FONTLIB-PROCESSING.\n+\n%  The most probable cause of this problem is:\n+\n%    * +One or more of the requested font libraries is%unavailable for\n%       allocation or concatenation. +The font libraries may not be catalogued,\n+       may be incorrectly catalogued, or may be unavailable (a volume may be\n+       offline).\n+\n%  Suggested corrective/recovery actions:\n+\n%    *  Attempt to re-execute this application.\n%    * +Using any appropriate ISPF, TSO, or batch utility, determine if the\n+       AFP font libraries are properly catalogued and exist on the correct\n+       online volume.\n%    * +If the problem persists, contact OSVS Technical Services or Storage\n+       Systems and Administration.\n+\n+\n)INIT\n  .CURSOR = ZCMD\n\n)PROC\n\n)END\n./ ADD NAME=SCH0P162                               13AUG93 18.34.18\n)ATTR\n)BODY EXPAND(\\\\)\n%\\-\\ Document Composition Facility - SCRPTLIB Allocation Failure \\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n+  During allocation of a series of 2 or more symbol and macro libraries using\n+  a DDNAME of SCRPTLIB, an error occurred which caused the TSO ALLOCATE\n+  command to set a return code of 12.  The error occurred at label\n+  LIB-PROCESSING.\n+\n%  The most probable cause of this problem is:\n+\n%    * +One or more of the requested symbol and macro libraries is%unavailable\n%       for allocation and concatenation. +The requested libraries may not be\n+       catalogued, may be incorrectly catalogued, or may be unavailable (a\n+       volume may be offline).\n+\n%  Suggested corrective/recovery actions:\n+\n%    *  Attempt to re-execute this application.\n%    * +Using any appropriate ISPF, TSO, or batch utility, determine if the\n+       symbol or macro libraries are properly catalogued and exist on the\n+       correct online volume.\n%    * +If the problem persists, contact OSVS Technical Services or Storage\n+       Systems and Administration.\n+\n)INIT\n  .CURSOR = ZCMD\n\n)PROC\n\n)END\n./ ADD NAME=SCH0P163                               13AUG93 18.34.18\n)ATTR\n)BODY EXPAND(\\\\)\n%\\-\\ Document Composition Facility - SCRPTPRO Allocation Failure \\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n+  During allocation of the IBM-supplied profile (usually DSMPROF4 in the\n+  GML starter-set library) or a user-specified profile library, an error\n+  occurred which caused the TSO ALLOCATE command to set a return code of 12.\n+  The error occurred at label PROFILE-PROCESSING.\n+\n%  The most probable cause of this problem is:\n+\n%    * +The IBM-supplied GML starter set macro and symbol library is\n%       unavailable. +The requested library may not be catalogued, may be\n+       incorrectly catalogued, or may be unavailable (a volume may be\n+       offline).\n+\n%  Suggested corrective/recovery actions:\n+\n%    *  Attempt to re-execute this application.\n%    * +Using any appropriate ISPF, TSO, or batch utility, determine if the\n+       profile data set is properly catalogued and exists on the correct\n+       online volume.\n%    * +If the problem persists, contact OSVS Technical Services or Storage\n+       Systems and Administration.\n+\n)INIT\n  .CURSOR = ZCMD\n\n)PROC\n\n)END\n./ ADD NAME=SCH0P164                               13AUG93 18.34.18\n)ATTR\n)BODY EXPAND(\\\\)\n%\\-\\ Document Composition Facility - TEXTLIB (SEARCH) Allocation Failure \\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n+  During allocation of a user-specified library for imbedded or appended\n+  file, an error occurred which caused the TSO ALLOCATE command to set a\n+  return code of 12.  The SEARCH option may be used to include PostScript\n+  commands in a Script/VS file.  The error occurred at label SEARCH-PROCESSING.\n+\n%  The most probable cause of this problem is:\n+\n%    *  The user-requested TEXTLIB is unavailable. +The requested library may\n+       not be catalogued, may be incorrectly catalogued, or may be unavailable\n+       (a volume may be offline) .\n+\n%  Suggested corrective/recovery actions:\n+\n%    *  Attempt to re-execute this application.\n%    * +Using any appropriate ISPF, TSO, or batch utility, determine if the\n+       file to be imbedded is properly catalogued and exists on the correct\n+       online volume.\n%    * +If the problem persists, contact OSVS Technical Services or Storage\n+       Systems and Administration.\n+\n+\n)INIT\n  .CURSOR = ZCMD\n\n)PROC\n\n)END\n./ ADD NAME=SCH0P165                               13AUG93 18.34.18\n)ATTR\n)BODY EXPAND(\\\\)\n%\\-\\ Document Composition Facility - SCRPTSEG Allocation Failure \\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n+  During allocation of 2 or more page segment libraries using a DDNAME of\n+  SCRPTSEG, an error occurred which caused the TSO ALLOCATE command to set a\n+  a return code of 12.  The error occurred at label SEGLIB-PROCESSING.\n+\n%  The most probable cause of this problem is:\n+\n%    *  The user-requested SEGLIB is unavailable. +The requested libraries may\n+       not be catalogued, may be incorrectly catalogued, or may be unavailable\n+       (a volume may be offline) .\n+\n%  Suggested corrective/recovery actions:\n+\n%    *  Attempt to re-execute this application.\n%    * +Using any appropriate ISPF, TSO, or batch utility, determine if the\n+       in-house and/or user-specified page segment libraries are properly\n+       catalogued and exist on an online volume.\n%    * +If the problem persists, contact OSVS Technical Services or Storage\n+       Systems and Administration.\n+\n+\n)INIT\n  .CURSOR = ZCMD\n\n)PROC\n\n)END\n./ ADD NAME=SCH0P166                               13AUG93 18.34.18\n)ATTR\n)BODY EXPAND(\\\\)\n%\\-\\ Document Composition Facility - GDDM Userlib Allocation Failure \\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n+  During allocation of either a user-specified GDDM ADMCFORM or GDDM ADMCDATA\n+  library, an error occurred which caused the TSO ALLOCATE command to set a\n+  a return code of 12.\n+\n%  The most probable cause of this problem is:\n+\n%    *  The user-requested GDDM library is unavailable. +The requested library\n+       may not be catalogued, may be incorrectly catalogued, or may be\n+       unavailable (a volume may be offline) .\n+\n%  Suggested corrective/recovery actions:\n+\n%    *  Attempt to re-execute this application.\n%    * +Using any appropriate ISPF, TSO, or batch utility, determine if the\n+       user-specified GDDM ADMCFORM and GDDM ADMCDATA libraries are properly\n+       catalogued and exist on an online volume.\n%    * +If the problem persists, contact OSVS Technical Services or Storage\n+       Systems and Administration.\n+\n+\n+\n)INIT\n  .CURSOR = ZCMD\n\n)PROC\n\n)END\n./ ADD NAME=SCH0P300                               13AUG93 18.34.18\n)ATTR DEFAULT(%+_)\n  $ TYPE(TEXT)  INTENS(HIGH) COLOR(PINK)\n  \u00a2 TYPE(TEXT)  INTENS(HIGH) COLOR(GREEN)\n  _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE)\n  % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n  \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n  + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)\n  ~ TYPE(TEXT)  INTENS(LOW)  COLOR(PINK)\n  | TYPE(TEXT)  INTENS(HIGH) COLOR(BLUE)\n  @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n\u00ac\\-\\ @Graphical Data Display Manager - Presentation Graphics Facility\u00ac \\-\\\n%COMMAND ===>_ZCMD                                                             +\n%\n\u00ac   1 @ICU      -+PGF's Interactive Chart Utility (presentation graphics)\n\u00ac   2 @ISE      -+PGF's Image Symbol Editor\n\u00ac   3 @VSE      -+PGF's Vector Symbol Editor\n\u00ac\n\u00ac   4 @ADMUCIMT -+GDDM's Family-4 Output Device Conversion Utility\n\u00ac   5 @CDPU     -+GDDM's Composite Document Printing Utility~(*)\n\u00ac   6 @ICUVIEW  -+Interactive Chart Utility Preview and Print Facility~(*)\n\u00ac\n\u00ac   7 @APGEDIT  -+Applications Programming Guide Graphics Editor~(*)\n\u00ac   8 @ADMUSP4  -+GDDM Sample Graphics Editor~(*)\n\u00ac\n\u00ac\n%Note:\n+   All required file allocations to initiate any of the above facilities will\n+   be made when the facility is invoked - this includes allocation of all\n+   libraries for the new GDDM user.\n%\n~   (*)+- product implementation scheduled for future date\n%\n|Press the\u00acEND KEY|to terminate GDDM/PGF+\n%\n)INIT\n  &ZPRIM = NO\n  .HELP = SCHTP300\n  &ZHTOP = ISR00003                    /* TUTORIAL TABLE OF CONTENTS */\n  &ZHINDEX = ISR91000                  /* TUTORIAL INDEX - 1ST PAGE  */\n\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                 1,'CMD(%XICU)'\n/*               1,'CMD(%SCH0P031)' */\n                 2,'CMD(%XISE)'\n/*               2,'CMD(%SCH0P032)' */\n                 3,'CMD(%XVSE)'\n/*               3,'CMD(%SCH0P033)' */\n                 4,'CMD(%SCH0P120)'\n/*               5,'CMD(%SCH0P035)' */\n/*               6,'CMD(%SCH0P036)' */\n/*               7,'CMD(%SCH0P037)' */\n/*               8,'CMD(%SCH0P038)' */\n/*               9,'CMD(%SCH0P039)' */\n/*              10,'CMD(%SCH0P03A)' */\n               ' ',' '\n                 *,'?' )\n\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PLIB2": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x02J\\x02J\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 586, "newlines": 586, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=ISR@PRIM                               13AUG93 18.34.19\n)ATTR                                                       /* SCHWAB */\n # TYPE(AB)\n ! TYPE(TEXT)  INTENS(NON)                                  /* SCHWAB */\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n \u00a6 AREA(DYNAMIC)\n   ~ TYPE(DATAOUT) INTENS(LOW)\n   \u00dd TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n   ` TYPE(DATAOUT) INTENS(HIGH)\n   $ TYPE(DATAOUT) INTENS(HIGH) HILITE(REVERSE)\n\n)ABC Desc('Schwab 1-13')\n  PDC DESC('Jobcard  - Specify JOBCARD defaults..........')\n  PDC DESC('IDMS     - Utilities.........................')\n  PDC DESC('Filexfer - File transfer utilities...........')\n  PDC DESC('Compile  - Compile and assemble source.......')\n  PDC DESC('Panvalet - Panvalet member restore...........')\n  PDC DESC('Panvalet - Panvalet batch scan...............')\n  PDC DESC('Transmit - Transmission log..................')\n  PDC DESC('Comparex - Comparex of Panvalet members......')\n  PDC DESC('FileAid  - Compuware''s FileAid Utility......')\n  PDC DESC('FDR/ABR  - Fast Dump Restore/Archive Product.')\n  PDC DESC('Series/1 - IBM Series/1 Implement Functions..')\n  PDC DESC('Stage    - Stage/Implement Functions.........')\n  PDC DESC('         - ..................................')\n)ABCINIT\n  .ZVARS = ZPDC\n  &ZPDC  = &Z\n  &LOCALCMD = &Z\n)ABCPROC\n  VER (&ZPDC,NB,RANGE,1,12)\n  &LOCALCMD = TRANS(&ZPDC\n                    1,'CMD(%SCHOPT4)'\n                    2,'PANEL(SCQP01@@)'\n                    3,'CMD(%FTRC@OPT)'\n                    4,'CMD(%MVSCOMP)'\n                    5,'CMD(%PANRES)'\n                    6,'CMD(%PANSCAN)'\n                    7,'CMD(%OPSC04)'\n                    8,'CMD(%PANCMPRX)'\n                    9,'CMD(%IFA)'\n                    10,'CMD(%FDR)'\n                    11,'CMD(%SCQC02@@) NEWPOOL'\n                    12,'CMD(%STGC01@@)'\n                   '*','?')\n\n)ABC Desc('Schwab 14-19')\n  PDC DESC('Publish  - Publisher''s Workbench............')\n  PDC DESC('ICF      - IBM''s Information Center Facility')\n  PDC DESC('Develop  - Development Utilities.............')\n  PDC DESC('IRM      - Information Resource Management...')\n  PDC DESC('PDX      - PDX Batch Scan....................')\n)ABCINIT\n  .ZVARS = ZPDC\n  &ZPDC  = &Z\n  &LOCALCMD = &Z\n)ABCPROC\n  VER (&ZPDC,NB,RANGE,1,5)\n  &LOCALCMD = TRANS(&ZPDC\n                    1,'PANEL(SCH0P000)'\n                    2,'PANEL(ICQGCM00)'\n                    3,'PANEL(BFPRIME)'\n                    4,'CMD(%DDFIRST)'\n                    5,'CMD(%PSCAN)'\n                  '*','?')\n\n)ABC Desc('Schwab A-M')\n  PDC DESC('AbendAid - AbendAid CICS dump viewing........')\n  PDC DESC('Appl Chg - Application Change Request........')\n  PDC DESC('Docutext - DocuText and JobScan..............')\n  PDC DESC('Online   - Online Documentation..............')\n  PDC DESC('PDSFast  - PDSFast Online Utility............')\n  PDC DESC('INFOMgmt - Information Mismanagement.........')\n  PDC DESC('PDX Dev  - PDX Development Environment.......')\n  PDC DESC('SAR      - Sysout Archive & Retrieval (P & N)')\n  PDC DESC('TOSS TSO - TOSS TSO Bridge...................')\n  PDC DESC('JobSched - User job scheduling...............')\n  PDC DESC('SMR      - SYSLOG Management & Retrieval.....')\n)ABCINIT\n  .ZVARS = ZPDC\n  &ZPDC  = &Z\n  &LOCALCMD = &Z\n)ABCPROC\n  VER (&ZPDC,NB,RANGE,1,11)\n  &LOCALCMD = TRANS(&ZPDC\n                    1,'CMD(%ABNDCICS)'\n                    2,'CMD(%BFCHG) NOCHECK'\n                    3,'PANEL(DTPMENU)'\n                    4,'PANEL(DOCUMENT)'\n                    5,'CMD(%PDSF)'\n                    6,'CMD(%PRDCINFO)'\n                    7,'CMD(%PDXSTART)'\n                    8,'CMD(%SARPN)'\n                    9,'CMD(%TOSS)'\n                   10,'CMD(%SCHEDJOB)'\n                   11,'CMD(%SMR)'\n                  '*','?')\n\n)ABC Desc('Schwab N-Z')\n  PDC DESC('PDX Dev  - PDX Development Environment.......')\n  PDC DESC('RMDS     - Report Management & Distribution..')\n  PDC DESC('SAR      - Sysout Archive & Retrieval (P & N)')\n  PDC DESC('TOSS TSO - TOSS TSO Bridge...................')\n  PDC DESC('JobSched - User job scheduling...............')\n  PDC DESC('SMR      - SYSLOG Management & Retrieval.....')\n)ABCINIT\n  .ZVARS = ZPDC\n  &ZPDC  = &Z\n  &LOCALCMD = &Z\n)ABCPROC\n  VER (&ZPDC,NB,RANGE,1,6)\n  &LOCALCMD = TRANS(&ZPDC\n                    1,'CMD(%PDXSTART)'\n                    2,'CMD(%TMDSVIEW) NOCHECK'\n                    3,'CMD(%SARPN)'\n                    4,'CMD(%TOSS)'\n                    5,'CMD(%SCHEDJOB)'\n                    6,'CMD(%SMR)'\n                  '*','?')\n\n)ABC Desc('Systems Pgming')\n  PDC DESC('SMP/E    - System Modification Program ......')\n  PDC DESC('IPCS     - Interactive Program Cntl System...')\n  PDC DESC('SAM      - System Availability Mgmt Reporter.')\n  PDC DESC('ISMF     - Interactive System Mgmt Facility..')\n  PDC DESC('IBMLink  - Download PTFs from IIN............')\n  PDC DESC('Activator- CA-Activator/Uniservice...........')\n  PDC DESC('BEST/1 B - Best/1 1.2.5 Beta.................')\n  PDC DESC('BEST/1 M - Best/1 MVS Product Family.........')\n  PDC DESC('Crystal  - Crystal Full-screen Perform Tool..')\n  PDC DESC('XDC      - Extended Debugging Controller.....')\n  PDC DESC('ExitMan  - ExitMan Exit Routine Activator....')\n  PDC DESC('FaxGate  - Facsimile Gateway for IBM Systems.')\n  PDC DESC('Innovaton- FDR/ABR and FATS/FATAR............')\n  PDC DESC('Monitors - System Software Monitors..........')\n  PDC DESC('PDSTOOLS - PDS/E: The Sysprog Utilities......')\n  PDC DESC('NET/SYS  - Network Systems Programming Funcs.')\n  PDC DESC('SAR RMO  - SAR Express Delivery for Systems..')\n  PDC DESC('SAR      - SAR Database for Systems Programrs')\n  PDC DESC('TSO Super- TSO Superset Utilities LISTJES....')\n  PDC DESC('Softworks- VSAM Assist and VSAM Mechanic.....')\n)ABCINIT\n  .ZVARS = ZPDC\n  &ZPDC  = &Z\n  &LOCALCMD = &Z\n)ABCPROC\n  VER (&ZPDC,NB,RANGE,1,20)\n  &LOCALCMD = TRANS(&ZPDC\n                    1,'CMD(%SMPE) NEWAPPL(SMPE) NOCHECK'\n                    2,'CMD(%$IPCSLIB)'\n                    3,'PANEL(AMSP0000)'\n                    4,'PGM(DGTFMD01) NEWAPPL(DGT)'\n                    5,'CMD(%IBMLRCV1)'\n                    6,'CMD(%CACTISPF)'\n                    7,'CMD(%B1BETA)'\n                    8,'CMD(%BEST1MVS)'\n                    9,'CMD(%CRYSTAL)'\n                   10,'PANEL(XDCPANEL)'\n                   11,'CMD(%EXITMAN)'\n                   12,'CMD(%FG)'\n                   13,'PANEL(INNOVATE)'\n                   14,'PANEL(SPG@MON)'\n                   15,'PANEL(PDS@PRIM)'\n                   16,'PANEL(NSPPNOPT)'\n                   17,'PGM(RMOSPF) NEWAPPL(RMO) PARM(SYS0.SARED.CS02)'\n                   18,'CMD(%SAR2)'\n                   19,'PGM(AS1581MA) NEWAPPL(ASLJ) PARM(APPLIED SOFTWARE-LJ)'\n                   20,'PANEL(SOFTWK)'\n                  '*','?')\n\n)BODY EXPAND(\\\\) WIDTH(&ZSCREENW)                           /* SCHWAB */\n  # Schwab 1-13 # Schwab 14-19 # Schwab A-M # Schwab N-Z # Systems Pgming+\n@\n\u00ac\\-\\@ISPF/PDF 3.3 Primary Option Menu\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n@   0 |ISPF PARMS  -+Specify terminal and user parameters   |USERID   - &ZUSER\n@   1 |BROWSE      -+Display source data or output listings |DATE     - &ZDATE\n@   2 |EDIT        -+Create or change source data           |JULIAN   - &ZJDATE\n@   3 |UTILITIES   -+Perform utility functions              |TIME     - &ZTIME\n@   4 |FOREGROUND  -+Invoke language processors (foreground)|TERMINAL - &ZTERM\n@   5 |BATCH       -+Submit job for language processing     |PF KEYS  - &ZKEYS\n@   6 |COMMAND     -+Enter TSO Command, CLIST, or REXX exec |SYSID    - &ZSYSID\n@   7 |DIALOG TEST -+Perform dialog testing                 |ACCT NO. - &ACCTNO\n@   8 |SDSF        -+System Display and Search Facility\n@   9 |OPSPRC      -+Operations Prod Release Control     |\u00a6OUTMONTH           \u00a6+\n@  10 |IBM PRODUCTS-+Additional IBM pgm products         |\u00a6                   \u00a6+\n@   A |COMPAREX    -+Comparex ISPF/PDF                   |\u00a6                   \u00a6+\n@   C |CHANGES     -+Summary of changes for this release |\u00a6                   \u00a6+\n@   H |HELP        -+Schwab Help Interactive Tutorial    |\u00a6                   \u00a6+\n@   S |SCHWAB      -+Schwab In-house Utilities           |\u00a6                   \u00a6+\n@   T |TUTORIAL    -+Display information about ISPF/PDF  |\u00a6                   \u00a6+\n@   X |EXIT        -+Terminate ISPF using defaults       |\u00a6                   \u00a6+\n%\n|Enter@END|command to terminate ISPF.\n%\n)INIT\n  .HELP = ISR00003\n  &ACCTNO = &ZACCTNUM                                         /*SCHWAB*/\n  &ZPRIM = YES                 /* ALWAYS A PRIMARY OPTION MENU        */\n  &ZHTOP = ISR00003            /* TUTORIAL TABLE OF CONTENTS          */\n  &ZHINDEX = ISR91000          /* TUTORIAL INDEX - 1ST PAGE           */\n  &ZSCLMPRJ = &Z               /* TUTORIAL INDEX - 1ST PAGE       @L1A*/\n  &ZLOGOPAN = 'DONE'           /* SCHWAB - suppress LOGO          @L5A*/\n  IF (&ZLOGO = 'YES')        /*                                @L5A*/\n    IF (&ZSPLIT = 'NO')      /* Not in split screen            @L5A*/\n      IF (&ZCMD = &Z)        /* No command pending             @L5A*/\n        IF (&ZLOGOPAN \u00ac= 'DONE') /* No logo displayed yet      @L5A*/\n          .MSG = ISRLO999    /* Set logo information           @L5A*/\n          .RESP = ENTER      /* Simulate enter                 @L5A*/\n          &ZLOGOPAN = 'DONE' /*                                @L5A*/\n          &ZCLEAN = 'NO'     /*                                @L5A*/\n      IF (&ZCMD \u00ac= &Z)       /* Command pending                @L5A*/\n        &ZLOGOPAN = 'DONE'   /*                                @L5A*/\n      VPUT (ZLOGOPAN) SHARED /*                                @L5A*/\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ) PROFILE /*             @L1C*/\n  IF (&OUTDATE \u00ac= &ZDATE & &ZCMD = &Z)\n    &ZCMD = 'CALENDAR'\n    .RESP = ENTER\n)REINIT\n  REFRESH OUTMONTH\n)PROC\n&KOTRAIL = TRUNC (&ZCMD,'.')     /* Required for Top Secret          */\n&KOTRAIL = .TRAIL                /* V4L2 ISPF Administration         */\n  IF (&KOTRAIL \u00ac= ' ')           /* processing                       */\n   &KOTRAIL = 'K(&KOTRAIL)'      /*                                  */\nIF (&LOCALCMD \u00ac= &Z)             /* Logic to use pull-down action    */\n  &ZSEL = &LOCALCMD              /* bars.  Note that the EXIT verb   */\n  &LOCALCMD = &Z                 /* prevents processing of any of    */\n  .RESP = ENTER                  /* the subsequent panel logic.      */\n  EXIT                           /*                      WJS-30Mar93 */\n&ZQ = &Z\n  IF (&ZCMD \u00ac= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                0,'PANEL(ISPOPTA)'\n                1,'PGM(ISRBRO) PARM(ISRBRO01)'\n                2,'PGM(ISREDIT) PARM(P,ISREDM01)'\n                3,'PANEL(ISRUTIL)'\n                4,'PANEL(ISRFPA)'\n                5,'PGM(ISRJB1) PARM(ISRJPA) NOCHECK'\n                6,'PGM(ISRPTC)'\n                7,'PGM(ISPYXDR) NOCHECK'\n                8,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'\n                9,'CMD(%OPSPRC) NOCHECK'\n               10,'PANEL(ISRDIIS)'                            /*SCHWAB*/\n                A,'CMD(%CPX)'                                 /*SCHWAB*/\n                C,'PGM(ISPTUTOR) PARM(ISR00005)'\n                D,'PANEL(DTPMENU)'                            /*SCHWAB*/\n                H,'PGM(ISPTUTOR) PARM(HSCHPRI)'               /*SCHWAB*/\n                P,'CMD(%PANVISPF &KOTRAIL) NOCHECK'           /*SCHWAB*/\n                R,'CMD(%TMDSVIEW) NOCHECK'                    /*SCHWAB*/\n                S,'PANEL(SCHWAB1)'                            /*SCHWAB*/\n                T,'PGM(ISPTUTOR) PARM(ISR00000)'\n                X,'EXIT'\n               99,'PANEL(PRCP01@@) NEWPOOL NEWAPPL(PRC)'      /*SCHWAB*/\n               AO,'CMD(%AO)'                                  /*SCHWAB*/\n             BETA,'PANEL(BET@PRIM)'                           /*SCHWAB*/\n              CCA,'CMD(%ABJ@INIT)'                            /*SCHWAB*/\n              DB2,'CMD(%DB2) NEWAPPL(DSNE)'                   /*SCHWAB*/\n             DB2I,'CMD(%DB2) NEWAPPL(DSNE)'                   /*SCHWAB*/\n             DTSN,'CMD(%DATASPAN)'                            /*SCHWAB*/\n               EZ,'PANEL(PRCEDIT)'                            /*SCHWAB*/\n              EZY,'PANEL(PRCEDITY)'                           /*SCHWAB*/\n              EZ1,'PANEL(PRCEDITX)'                           /*SCHWAB*/\n              FPS,'CMD(%IFPS)'                                /*SCHWAB*/\n             FPFS,'CMD(%IFPSFS)'                              /*SCHWAB*/\n             GDDM,'PANEL(ADM@PRIM)'                           /*SCHWAB*/\n              HPS,'PANEL(HPS@PRIM)'                           /*SCHWAB*/\n       ISMF,'PGM(DGTFMD01) PARM(&ZCMD) NEWAPPL(DGT) NOCHECK'  /*SCHWAB*/\n                J,'CMD(%DOCUJSCN)'                            /*SCHWAB*/\n              LMF,'PANEL(ISRLPRIM)'   /* Lib Mgt Facility */  /*SCHWAB*/\n          MIMTAPE,'CMD(%MIMTAPE)'                             /*SCHWAB*/\n           OMDB2,'CMD(%OMDB2)'                                /*SCHWAB*/\n             SMR,'CMD(%SMR)'                                  /*SCHWAB*/\n             SNTY,'CMD(%SENTRY)'                              /*SCHWAB*/\n             TAPE,'CMD(%MIMTAPE)'                             /*SCHWAB*/\n              TSS,'CMD(%TSS42 &KOTRAIL) NOCHECK'              /*SCHWAB*/\n              VPS,'PANEL(VPS@PRIM)'                           /*SCHWAB*/\n         CALENDAR,'CMD(%CALENDAR)'                            /*SCHWAB*/\n              ' ',' '\n                *,'?' )\n  IF (&ZCMD = '8')                                            /*SCHWAB*/\n     &ZSEL = 'PGM(ISFISP) NEWAPPL(ISF)'                       /*SCHWAB*/\n  &ZTRAIL = .TRAIL\n)END\n /*                                                                   */\n /* $SEG(ISR@PRIM) COMP(ALL) PROD(MVS)                                */\n /*                                                                   */\n /* CHANGE ACTIVITY                                                   */\n /*  $L0= UNFLAGED  PRE310                   :                        */\n /*  $L1= SCLM      M310     881123   020136 : SCLM/LMF Co-awareness  */\n /*  $L2= QUALITY   M310     881216   764700 : PTM #211              */\n /*  $L3= QUALITY   M310     890130   641747 : ST PTM 47             */\n /*  $L3= QUALITY   M310     890208   432273 : ST PTM 27             */\n /*  $L5= LOGO      M330     901016   023824 : Move logo to panel    */\n/* 5665-402 (C) COPYRIGHT IBM CORP 1980, 1991 */\n./ ADD NAME=SCH0P100                               13AUG93 18.34.19\n)ATTR\n # TYPE(AB)\n % TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)\n | TYPE(TEXT)  INTENS(LOW)  COLOR(BLUE)\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n\n)ABC Desc('Skill Level')\n  PDC DESC('Basic mode for the casual user.')\n    ACTION RUN(PDBAS)\n  PDC DESC('Advanced mode for the power user.')\n    ACTION RUN(PDADV)\n)ABCINIT\n  .ZVARS = SKILLPDC\n  IF (&SKILLPDC = &Z)\n    &SKILLPDC = '2'\n    &SKILL = 'A'\n)ABCPROC\n  VER (&SKILLPDC,NB,RANGE,1,2,MSG=SCHP010)\n  &SKILL = TRANS(&SKILLPDC\n                 1,'B'\n                 2,'A'\n               '*','?')\n\n)ABC Desc('Output Printer Device')\n  PDC DESC('Term - Terminal display monitor/CRT..........')\n    ACTION RUN(PDTERM)\n  PDC DESC('3270 - IBM 3270 display monitor/CRT..........')\n    ACTION RUN(PD3270)\n  PDC DESC('1403 - IBM 1403 impact line printer..........')\n    ACTION RUN(PD1403)\n  PDC DESC('3800 - IBM 3800 or Siemens 2300/2140 (38PPN).')\n    ACTION RUN(PD3800)\n  PDC DESC('PS   - Adobe PostScript Level 1 Printer......')\n    ACTION RUN(PDPS)\n  PDC DESC('3820 - IBM 3820 Page Printer (PG1A)..........')\n    ACTION RUN(PD3820)\n  PDC DESC('3812 - IBM 3812 Page Printer (PG2A)..........')\n    ACTION RUN(PD3812)\n  PDC DESC('3816 - IBM 3816 Page Printer (PG2A)..........')\n    ACTION RUN(PD3816)\n  PDC DESC('4224 - IBM 4224 Page Printer (PG3A)..........')\n    ACTION RUN(PD4224)\n  PDC DESC('4028 - IBM 4028 Page Printer (PG4A)..........')\n    ACTION RUN(PD4028)\n  PDC DESC('AFP  - IBM Core Interchange Fonts............')\n    ACTION RUN(PDAFP)\n  PDC DESC('ISI  - Interface Systems 7028 or 7817........')\n    ACTION RUN(PDISI)\n)ABCINIT\n  .ZVARS = RDEVPDC\n  IF (&RDEVPDC = &Z)\n    &RDEVPDC = '6'\n    &RDEV = '3816'\n)ABCPROC\n  VER (&RDEVPDC,NB,RANGE,1,12,MSG=SCHP011)\n  &RDEV = TRANS(&RDEVPDC\n                1,'TERM'\n                2,'3270'\n                3,'1403'\n                4,'3800'\n                5,'PS'\n                6,'3820'\n                7,'3812'\n                8,'3816'\n                9,'4224'\n               10,'4028'\n               11,'AFP'\n               12,'ISI'\n              '*','?')\n\n)ABC Desc('Graphics Preview')\n  PDC DESC('Bypass viewing of page mode output.')\n    ACTION RUN(PDNOVIEW)\n  PDC DESC('Preview document on graphics display.')\n    ACTION RUN(PDVIEW)\n)ABCINIT\n  .ZVARS = CDPUPDC\n  &CDPUPDC = '1'\n  &CDPU = 'NO'\n)ABCPROC\n  VER (&CDPUPDC,NB,RANGE,1,2)\n  &CDPU = TRANS(&CDPUPDC\n                1,'NO'\n                2,'YES'\n              '*','?')\n  IF (&RDEV = TERM,3270,1403,PS)\n    VER (&CDPU,LIST,NO,MSG=SCHP012)\n  ELSE\n    VER (&CDPU,LIST,YES,NO,MSG=SCHP013)\n\n)ABC Desc('Help')\n  PDC DESC('DCF Script/VS formatter tutorial.....')\n    ACTION RUN(HELP) PARM(SCHTP100)\n)ABCINIT\n  .ZVARS = HELPPDC\n  &HELPPDC = '1'\n\n)BODY WIDTH(&ZSCREENW) EXPAND(\\\\)\n  # Skill Level # Output Printer Device # Graphics Preview # Help+\n|\n\u00ac\\-\\@Document Composition Facility - SCRIPT/VS\u00ac\\-\\\n%COMMAND ===>_ZCMD                                                             +\n+\n|ISPF Library:\n|   Project%===>_PRJ1    +       _DEBUG+\n|   Group  %===>_LIB1    +\n|   Type   %===>_TYP1    +\n|   Member %===>_MEM     +             Blank for a member selection list\n|\n|Other Partitioned or Sequential Data Set:\n|   Data Set Name%===>_DSN                                                     +\n|\n|\n+   Enter@\"HELP SCRIPT\"+from any TSO COMMAND line to obtain the function,\n+   syntax, and operands of the SCRIPT command.  A complete list of all DCF\n+   publications is also provided.  The SCRIPT DSNAME LEVEL is SYS0.SCRIPT.\n|\n)INIT\n  .HELP   = SCHTP100\n  .CURSOR = MEM\n  &LIB2   = &Z\n  &LIB3   = &Z\n  &LIB4   = &Z\n  &PSWD   = &Z\n  &TYP1   = &SCRP\n  &ZMLCSR = '        '           /* Added for member name pattern    */\n                                 /* support (wildcard of \"*\").       */\n\n  IF (&SKILL = &Z)\n    &SKILL = 'A'\n  IF (&RDEV = &Z)\n    &RDEV = '3816'\n    IF (&CDPU = &Z)\n      &CDPU = 'N'\n  IF (&RDEV \u00ac= &Z)\n    &CDPU = 'N'\n  IF (&DSN \u00ac= ' ')\n    &MEM = ' '\n    IF (.CURSOR = ' ') .CURSOR = DSN\n  IF (.CURSOR = ' ')   .CURSOR = MEM\n\n)REINIT\n  &SCHPLMSG = &Z\n  IF (&SKILL \u00ac= ' ')\n    .CURSOR = MEM\n    REFRESH (ZCMD)\n  IF (&RDEV \u00ac= ' ')\n    .CURSOR = MEM\n    REFRESH (ZCMD)\n  IF (&CDPU \u00ac= ' ')\n    .CURSOR = MEM\n    REFRESH (ZCMD)\n\n  IF (&ZMLCSR \u00ac= ' ')\n    .CURSOR = MEM\n\n)PROC\n  &PCMD = TRUNC(&ZCMD,' ')\n  IF (&PCMD = 'PDBAS')\n    &SKILL = 'B'\n    &ZCMD = ' '\n    &SCHPSMSG = 'Basic mode chosen'\n    .MSG = SCHP000Z\n  ELSE\n    IF (&PCMD = 'PDADV')\n      &SKILL = 'A'\n      &ZCMD = ' '\n      &SCHPSMSG = 'Advanced mode chosen'\n      .MSG = SCHP000Z\n\n  IF (&PCMD = 'PDTERM')\n    &RDEV = 'TERM'\n    &SCHPSMSG = 'Device TERM selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PD3270')\n    &RDEV = '3270'\n    &SCHPSMSG = 'Device 3270 selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PD1403')\n    &RDEV = '1403'\n    &SCHPSMSG = 'Device 1403 selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PD3800')\n    &RDEV = '3800'\n    &SCHPSMSG = 'Device 3800 selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PDPS')\n    &RDEV = 'PS'\n    &SCHPSMSG = 'PostScript selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PD3820')\n    &RDEV = '3820'\n    &SCHPSMSG = 'Device 3820 selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PD3812')\n    &RDEV = '3812'\n    &SCHPSMSG = 'Device 3812 selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PD3816')\n    &RDEV = '3816'\n    &SCHPSMSG = 'Device 3816 selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PD4224')\n    &RDEV = '4224'\n    &SCHPSMSG = 'Device 4224 selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PD4028')\n    &RDEV = '4028'\n    &SCHPSMSG = 'Device 4028 selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PDAFP')\n    &RDEV = 'AFP'\n    &SCHPSMSG = 'Core Device AFP selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  IF (&PCMD = 'PDISI')\n    &RDEV = 'ISI'\n    &SCHPSMSG = 'ISI printer selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n\n  IF (&PCMD = 'PDNOVIEW')\n    &CDPU =  'NO'\n    &SCHPSMSG = 'Preview not selected'\n    &ZCMD = ' '\n    .MSG = SCHP000Z\n  ELSE\n    IF (&PCMD = 'PDVIEW')\n      &CDPU = 'YES'\n      &SCHPSMSG = 'Preview mode chosen'\n      &ZCMD = ' '\n     .MSG = SCHP000Z\n\n\n                                 /* -------------------------------- */\n                                 /*                                  */\n  IF (&DSN = ' ')                /* If not \"other data set\", then    */\n    VER (&PRJ1,NB)               /* verify that the library fields   */\n    VER (&LIB1,NB)               /* are filled in by the user.       */\n    VER (&TYP1,NB)               /*                                  */\n                                 /* -------------------------------- */\n\n                                 /* -------------------------------- */\n                                 /*                                  */\n  IF (&DSN \u00ac= ' ')               /* If the first character of the    */\n    &ZFC = TRUNC(&DSN,1)         /* data set name is \"'\", then       */\n    IF (&ZFC = '''')             /* check to see if the last \"'\"     */\n      &ZREM = .TRAIL             /* missing.                         */\n      &ZREM2 = TRUNC(&ZREM,'''') /* If the last \"'\" is missing,      */\n      IF (&ZREM2 = &ZREM)        /* then add it to the end of the    */\n        &DSN = '&DSN&ZFC'        /* data set name.                   */\n    &ZMLCSR = '********'         /*                                  */\n    PANEXIT((DSN,ZMLCSR),PGM,&ZMLVEXIT,&ZMLVDATA,MSG=ISRM040)\n                                 /*                                  */\n                                 /* Ref: 'SYS1.ISPPLIB(ISRFP09)'     */\n                                 /* \"ISPF Planning & Customization\"  */\n                                 /*                                  */\n                                 /* -------------------------------- */\n  VER (&DEBUG,NAME)\n  &SCRP = &TYP1\n  &ZSEL = 'CMD(%SCH0P110)'\n  VPUT (PRJ1,LIB1,SCRP,SKILL,RDEV,CDPU) PROFILE\n  VPUT (PRJ1,LIB1,SCRP,MEM,SKILL,RDEV,DEBUG,CDPU) SHARED\n\n  &ZFBROWS = ' '       /* Browse listing. If blank, no auto browse.  */\n  &ZFPRINT = ' '       /* Print panel name. If blank, no auto print. */\n  VPUT (ZFBROWS,ZFPRINT) SHARED\n\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PUBTOOLS": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x17D\\x17D\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 5956, "newlines": 5956, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=AF38SANS                               13AUG93 18.34.28\n:f38sans.\n.pa\n:h2.Sample Sonoran Sans Serif using F38SANS\n:p.\nThis loads 14 sizes of four associated fonts. The fonts are Sonoran Sans\nSerif, text, bold, italic and bold italic.  Each font is available in\nthe following point sizes: 6, 7, 8, 9, 10, 11, 12, 14, 16, 18, 20, 24,\n30 & 36.\n:p.\nTo use these fonts enter the \".bf\" command followed by the name of the\nfont. The font names are defined by the GML tag to be, text, bold,\nitalic and bital, followed by the point size.\n.*  ******************************************************************\n.*  Text fonts\n.*  ******************************************************************\n.fo off\n.bf text6\n\nThis is text6\n.pf\n.bf text7\n\nThis is text7\n.pf\n.bf text8\n\nThis is text8\n.pf\n.bf text9\n\nThis is text9\n.pf\n.bf text10\n\nThis is text10\n.pf\n.bf text11\n\nThis is text11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text12\n\nThis is text12\n.pf\n.bf text14\n\nThis is text14\n.pf\n.bf text16\n\nThis is text16\n.pf\n.bf text18\n\nThis is text18\n.pf\n.bf text20\n\nThis is text20\n.pf\n.bf text24\n\nThis is text24\n.pf\n.bf text30\n\nThis is text30\n.pf\n.bf text36\n\nThis is text36\n.pf\n.*  ******************************************************************\n.*  bold fonts\n.*  ******************************************************************\n.pa\n.bf bold6\n\n\nThis is bold6\n.pf\n.bf bold7\n\nThis is bold7\n.pf\n.bf bold8\n\nThis is bold8\n.pf\n.bf bold9\n\nThis is bold9\n.pf\n.bf bold10\n\nThis is bold10\n.pf\n.bf bold11\n\nThis is bold11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold12\n\nThis is bold12\n.pf\n.bf bold14\n\nThis is bold14\n.pf\n.bf bold16\n\nThis is bold16\n.pf\n.bf bold18\n\nThis is bold18\n.pf\n.bf bold20\n\nThis is bold20\n.pf\n.bf bold24\n\nThis is bold24\n.pf\n.bf bold30\n\nThis is bold30\n.pf\n.bf bold36\n\nThis is bold36\n.pf\n.*  ******************************************************************\n.*  italic fonts\n.*  ******************************************************************\n.pa\n.bf italic6\n\n\nThis is italic6\n.pf\n.bf italic7\n\nThis is italic7\n.pf\n.bf italic8\n\nThis is italic8\n.pf\n.bf italic9\n\nThis is italic9\n.pf\n.bf italic10\n\nThis is italic10\n.pf\n.bf italic11\n\nThis is italic11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic12\n\nThis is italic12\n.pf\n.bf italic14\n\nThis is italic14\n.pf\n.bf italic16\n\nThis is italic16\n.pf\n.bf italic18\n\nThis is italic18\n.pf\n.bf italic20\n\nThis is italic20\n.pf\n.bf italic24\n\nThis is italic24\n.pf\n.bf italic30\n\nThis is italic30\n.pf\n.bf italic36\n\nThis is italic36\n.pf\n.*  ******************************************************************\n.*  bold italic fonts\n.*  ******************************************************************\n.pa\n.bf bital6\n\nThis is bital6\n.pf\n.bf bital7\n\nThis is bital7\n.pf\n.bf bital8\n\nThis is bital8\n.pf\n.bf bital9\n\nThis is bital9\n.pf\n.bf bital10\n\nThis is bital10\n.pf\n.bf bital11\n\nThis is bital11\n.pf\n.bf bital12\n\nThis is bital12\n.pf\n.bf bital14\n\nThis is bital14\n.pf\n.bf bital16\n\nThis is bital16\n.pf\n.bf bital18\n\nThis is bital18\n.pf\n.bf bital20\n\nThis is bital20\n.pf\n.bf bital24\n\nThis is bital24\n.pf\n.bf bital30\n\nThis is bital30\n.pf\n.bf bital36\n\nThis is bital36\n.pf\n.*  ******************************************************************\n.*  Fonts invoked in compatible documents (pr12 is fixed pitch)\n.*  ******************************************************************\n.pa\n.bf bold\n\n\nThis is bold (note: should be same as bold11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic\n\nThis is italic (note: should be same as italic11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital\n\nThis is bital (note: should be same as bital11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf elite\n\nThis is elite (note: should be same as pr12)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n./ ADD NAME=AF38SERI                               13AUG93 18.34.28\n:f38serif.\n.pa\n:h2.Sample Sonoran Serif using F38SERIF\n:p.\nThis loads 14 sizes of four associated fonts. The fonts are\nSonoran Serif, text, bold, italic and bold italic.\nEach font is available in the following point sizes: 6, 7,\n8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 30 & 36.\n:p.\nTo use these fonts enter the \".bf\" command followed by the\nname of the font. The font names are defined by the GML tag\nto be, text, bold, italic and bital, followed by the\npoint size.\n.*  ******************************************************************\n.*  Text fonts\n.*  ******************************************************************\n.fo off\n.bf text6\n\nThis is text6\n.pf\n.bf text7\n\nThis is text7\n.pf\n.bf text8\n\nThis is text8\n.pf\n.bf text9\n\nThis is text9\n.pf\n.bf text10\n\nThis is text10\n.pf\n.bf text11\n\nThis is text11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text12\n\nThis is text12\n.pf\n.bf text14\n\nThis is text14\n.pf\n.bf text16\n\nThis is text16\n.pf\n.bf text18\n\nThis is text18\n.pf\n.bf text20\n\nThis is text20\n.pf\n.bf text24\n\nThis is text24\n.pf\n.bf text30\n\nThis is text30\n.pf\n.bf text36\n\nThis is text36\n.pf\n.*  ******************************************************************\n.*  bold fonts\n.*  ******************************************************************\n.pa\n.bf bold6\n\nThis is bold6\n.pf\n.bf bold7\n\nThis is bold7\n.pf\n.bf bold8\n\nThis is bold8\n.pf\n.bf bold9\n\nThis is bold9\n.pf\n.bf bold10\n\nThis is bold10\n.pf\n.bf bold11\n\nThis is bold11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold12\n\nThis is bold12\n.pf\n.bf bold14\n\nThis is bold14\n.pf\n.bf bold16\n\nThis is bold16\n.pf\n.bf bold18\n\nThis is bold18\n.pf\n.bf bold20\n\nThis is bold20\n.pf\n.bf bold24\n\nThis is bold24\n.pf\n.bf bold30\n\nThis is bold30\n.pf\n.bf bold36\n\nThis is bold36\n.pf\n.*  ******************************************************************\n.*  italic fonts\n.*  ******************************************************************\n.pa\n.bf italic6\n\n\nThis is italic6\n.pf\n.bf italic7\n\nThis is italic7\n.pf\n.bf italic8\n\nThis is italic8\n.pf\n.bf italic9\n\nThis is italic9\n.pf\n.bf italic10\n\nThis is italic10\n.pf\n.bf italic11\n\nThis is italic11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic12\n\nThis is italic12\n.pf\n.bf italic14\n\nThis is italic14\n.pf\n.bf italic16\n\nThis is italic16\n.pf\n.bf italic18\n\nThis is italic18\n.pf\n.bf italic20\n\nThis is italic20\n.pf\n.bf italic24\n\nThis is italic24\n.pf\n.bf italic30\n\nThis is italic30\n.pf\n.bf italic36\n\nThis is italic36\n.pf\n.*  ******************************************************************\n.*  bold italic fonts\n.*  ******************************************************************\n.pa\n.bf bital6\n\nThis is bital6\n.pf\n.bf bital7\n\nThis is bital7\n.pf\n.bf bital8\n\nThis is bital8\n.pf\n.bf bital9\n\nThis is bital9\n.pf\n.bf bital10\n\nThis is bital10\n.pf\n.bf bital11\n\nThis is bital11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital12\n\nThis is bital12\n.pf\n.bf bital14\n\nThis is bital14\n.pf\n.bf bital16\n\nThis is bital16\n.pf\n.bf bital18\n\nThis is bital18\n.pf\n.bf bital20\n\nThis is bital20\n.pf\n.bf bital24\n\nThis is bital24\n.pf\n.bf bital30\n\nThis is bital30\n.pf\n.bf bital36\n\nThis is bital36\n.pf\n.*  ******************************************************************\n.*  Fonts invoked in compatible documents (pr12 is fixed pitch)\n.*  ******************************************************************\n.pa\n.bf bold\n\n\nThis is bold (note: should be same as bold11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic\n\nThis is italic (note: should be same as italic11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital\n\nThis is bital (note: should be same as bital11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf elite\n\nThis is elite (note: should be same as pr12)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n./ ADD NAME=AMONOGAR                               13AUG93 18.34.28\n:mongara.\n.pa\n:h2.Sample Monotype Garamond using MONOGARA\n:p.\nThis loads 14 sizes of four associated fonts. The fonts are\nMonotype Garamond, text, bold, italic and bold italic.\nEach font is available in the following point sizes: 6, 7,\n8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 30 & 36.\n:p.\nTo use these fonts enter the \".bf\" command followed by the\nname of the font. The font names are defined by the GML tag\nto be, text, bold, italic and bital, followed by the\npoint size.\n.*  ******************************************************************\n.*  Text fonts\n.*  ******************************************************************\n.fo off\n.bf text6\n\nThis is text6\n.pf\n.bf text7\n\nThis is text7\n.pf\n.bf text8\n\nThis is text8\n.pf\n.bf text9\n\nThis is text9\n.pf\n.bf text10\n\nThis is text10\n.pf\n.bf text11\n\nThis is text11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text12\n\nThis is text12\n.pf\n.bf text14\n\nThis is text14\n.pf\n.bf text16\n\nThis is text16\n.pf\n.bf text18\n\nThis is text18\n.pf\n.bf text20\n\nThis is text20\n.pf\n.bf text24\n\nText24\n.pf\n.bf text30\n\nText30\n.pf\n.bf text36\n\nText36\n.pf\n.*  ******************************************************************\n.*  bold fonts\n.*  ******************************************************************\n.pa\n.bf bold6\n\n\nThis is bold6\n.pf\n.bf bold7\n\nThis is bold7\n.pf\n.bf bold8\n\nThis is bold8\n.pf\n.bf bold9\n\nThis is bold9\n.pf\n.bf bold10\n\nThis is bold10\n.pf\n.bf bold11\n\nThis is bold11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold12\n\nThis is bold12\n.pf\n.bf bold14\n\nThis is bold14\n.pf\n.bf bold16\n\nThis is bold16\n.pf\n.bf bold18\n\nThis is bold18\n.pf\n.bf bold20\n\nThis is bold20\n.pf\n.bf bold24\n\nBold24\n.pf\n.bf bold30\n\nBold30\n.pf\n.bf bold36\n\nBold36\n.pf\n.*  ******************************************************************\n.*  italic fonts\n.*  ******************************************************************\n.pa\n.bf italic6\n\n\nThis is italic6\n.pf\n.bf italic7\n\nThis is italic7\n.pf\n.bf italic8\n\nThis is italic8\n.pf\n.bf italic9\n\nThis is italic9\n.pf\n.bf italic10\n\nThis is italic10\n.pf\n.bf italic11\n\nThis is italic11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic12\n\nThis is italic12\n.pf\n.bf italic14\n\nThis is italic14\n.pf\n.bf italic16\n\nThis is italic16\n.pf\n.bf italic18\n\nThis is italic18\n.pf\n.bf italic20\n\nThis is italic20\n.pf\n.bf italic24\n\nItalic24\n.pf\n.bf italic30\n\nItalic30\n.pf\n.bf italic36\n\nItalic36\n.pf\n.*  ******************************************************************\n.*  bold italic fonts\n.*  ******************************************************************\n.pa\n.bf bital6\n\nThis is bital6\n.pf\n.bf bital7\n\nThis is bital7\n.pf\n.bf bital8\n\nThis is bital8\n.pf\n.bf bital9\n\nThis is bital9\n.pf\n.bf bital10\n\nThis is bital10\n.pf\n.bf bital11\n\nThis is bital11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital12\n\nThis is bital12\n.pf\n.bf bital14\n\nThis is bital14\n.pf\n.bf bital16\n\nThis is bital16\n.pf\n.bf bital18\n\nThis is bital18\n.pf\n.bf bital20\n\nThis is bital20\n.pf\n.bf bital24\n\nBital24\n.pf\n.bf bital30\n\nBital30\n.pf\n.bf bital36\n\nBital36\n.pf\n.*  ******************************************************************\n.*  Fonts invoked in compatible documents (pr12 is fixed pitch)\n.*  ******************************************************************\n.pa\n.bf bold\n\n\nThis is bold (note: should be same as bold11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic\n\nThis is italic (note: should be same as italic11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital\n\nThis is bital (note: should be same as bital11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf elite\n\nThis is elite (note: should be same as pr12)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n./ ADD NAME=APISANS                                13AUG93 18.34.28\n:pisans.\n.pa\n:h2.Sample Pi & Specials Sans Serif using PISANS\n:p.\nThis loads 14 sizes of four associated fonts. The fonts are\nPi Sans Serif, text, bold.\nEach font is available in the following point sizes: 6,\n8, 10, 12.\n:p.\nTo use these fonts enter the \".bf\" command followed by the\nname of the font. The font names are defined by the GML tag\nto be, text, bold followed by the\npoint size.\n.*  ******************************************************************\n.*  Pi   fonts\n.*  ******************************************************************\n.fo off\n\nThis is pi6\n.bf pi6\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is pi8\n.bf pi8\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is pi10\n.bf pi10\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is pi12\n.bf pi12\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.*  ******************************************************************\n.*  bold pi fonts\n.*  ******************************************************************\n.pf\n\n\nThis is bpi6\n.bf bpi6\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is bpi8\n.bf bpi8\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is bpi10\n.bf bpi10\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is bpi12\n.bf bpi12\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n./ ADD NAME=APISERIF                               13AUG93 18.34.28\n:piserif.\n.pa\n:h2.Sample PI & Specials Serif using PISERIF\n:p.\nThis loads 14 sizes of four associated fonts. The fonts are\nPi Serif, text, bold.\nEach font is available in the following point sizes: 6,\n8, 10, 12.\n:p.\nTo use these fonts enter the \".bf\" command followed by the\nname of the font. The font names are defined by the GML tag\nto be, text, bold. followed by the\npoint size.\n.*  ******************************************************************\n.*  Text fonts\n.*  ******************************************************************\n.fo off\nThis is pi6\n.bf pi6\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is pi8\n.bf pi8\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is pi10\n.bf pi10\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is pi12\n.bf pi12\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.*  ******************************************************************\n.*  bold pi fonts\n.*  ******************************************************************\n.pf\n\n\nThis is bpi6\n.bf bpi6\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is bpi8\n.bf bpi8\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is bpi10\n.bf bpi10\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n\nThis is bpi12\n.bf bpi12\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n./ ADD NAME=APPENDIX                               13AUG93 18.34.28\n:h1.Appendixes\n:appendix\n.*\n.*  This is the SCRIPT source for the appendix for\n.*  Publishing Tools and Accessories document\n.*\n.*f38sans\n.im af38sans\n.*f38serif\n.im af38seri\n.*tstgara\n.im amonogar\n.*tstpisan\n.im apisans\n.*piserif\n.im apiserif\n.*tstschl\n.im aschool\n.*tstsvnr\n.im asouveni\n./ ADD NAME=ASCHOOL                                13AUG93 18.34.28\n:school.\n.pa\n:h2.Sample Century Schoolbook using school\n:p.\nThis loads 14 sizes of four associated fonts. The fonts are\nCentury Schoolbook, text, bold, italic and bold italic.\nEach font is available in the following point sizes: 6, 7,\n8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 30 & 36.\n:p.\nTo use these fonts enter the \".bf\" command followed by the\nname of the font. The font names are defined by the GML tag\nto be, text, bold, italic and bital, followed by the\npoint size.\n.*  ******************************************************************\n.*  Text fonts\n.*  ******************************************************************\n.fo off\n.bf text6\n\nThis is text6\n.pf\n.bf text7\n\nThis is text7\n.pf\n.bf text8\n\nThis is text8\n.pf\n.bf text9\n\nThis is text9\n.pf\n.bf text10\n\nThis is text10\n.pf\n.bf text11\n\nThis is text11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text12\n\nThis is text12\n.pf\n.bf text14\n\nThis is text14\n.pf\n.bf text16\n\nThis is text16\n.pf\n.bf text18\n\nThis is text18\n.pf\n.bf text20\n\nThis is text20\n.pf\n.bf text24\n\nText24\n.pf\n.bf text30\n\nText30\n.pf\n.bf text36\n\nText36\n.pf\n.*  ******************************************************************\n.*  bold fonts\n.*  ******************************************************************\n.pa\n.bf bold6\n\nThis is bold6\n.pf\n.bf bold7\n\nThis is bold7\n.pf\n.bf bold8\n\nThis is bold8\n.pf\n.bf bold9\n\nThis is bold9\n.pf\n.bf bold10\n\nThis is bold10\n.pf\n.bf bold11\n\nThis is bold11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold12\n\nThis is bold12\n.pf\n.bf bold14\n\nThis is bold14\n.pf\n.bf bold16\n\nThis is bold16\n.pf\n.bf bold18\n\nThis is bold18\n.pf\n.bf bold20\n\nThis is bold20\n.pf\n.bf bold24\n\nBold24\n.pf\n.bf bold30\n\nBold30\n.pf\n.bf bold36\n\nBold36\n.pf\n.*  ******************************************************************\n.*  italic fonts\n.*  ******************************************************************\n.pa\n.bf italic6\n\nThis is italic6\n.pf\n.bf italic7\n\nThis is italic7\n.pf\n.bf italic8\n\nThis is italic8\n.pf\n.bf italic9\n\nThis is italic9\n.pf\n.bf italic10\n\nThis is italic10\n.pf\n.bf italic11\n\nThis is italic11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic12\n\nThis is italic12\n.pf\n.bf italic14\n\nThis is italic14\n.pf\n.bf italic16\n\nThis is italic16\n.pf\n.bf italic18\n\nThis is italic18\n.pf\n.bf italic20\n\nThis is italic20\n.pf\n.bf italic24\n\nItalic24\n.pf\n.bf italic30\n\nItalic30\n.pf\n.bf italic36\n\nItalic36\n.pf\n.*  ******************************************************************\n.*  bold italic fonts\n.*  ******************************************************************\n.pa\n.bf bital6\n\nThis is bital6\n.pf\n.bf bital7\n\nThis is bital7\n.pf\n.bf bital8\n\nThis is bital8\n.pf\n.bf bital9\n\nThis is bital9\n.pf\n.bf bital10\n\nThis is bital10\n.pf\n.bf bital11\n\nThis is bital11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital12\n\nThis is bital12\n.pf\n.bf bital14\n\nThis is bital14\n.pf\n.bf bital16\n\nThis is bital16\n.pf\n.bf bital18\n\nThis is bital18\n.pf\n.bf bital20\n\nThis is bital20\n.pf\n.bf bital24\n\nBital24\n.pf\n.bf bital30\n\nBital30\n.pf\n.bf bital36\n\nBital36\n.pf\n.*  ******************************************************************\n.*  Fonts invoked in compatible documents (pr12 is fixed pitch)\n.*  ******************************************************************\n.pa\n.bf bold\n\n\nThis is bold (note: should be same as bold11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic\n\nThis is italic (note: should be same as italic11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital\n\nThis is bital (note: should be same as bital11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf elite\n\nThis is elite (note: should be same as pr12)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n./ ADD NAME=ASOUVENI                               13AUG93 18.34.28\n:souvenir.\n.pa\n:h2.Sample ITC Souvenir using souvenir\n:p.\nThis loads 14 sizes of four associated fonts. The fonts are\nITC Souvenir, text, bold, italic and bold italic.\nEach font is available in the following point sizes: 6, 7,\n8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 30 & 36.\n:p.\nTo use these fonts enter the \".bf\" command followed by the\nname of the font. The font names are defined by the GML tag\nto be, text, bold, italic and bital, followed by the\npoint size.\n.*  ******************************************************************\n.*  Text fonts\n.*  ******************************************************************\n.fo off\n.bf text6\n\nThis is text6\n.pf\n.bf text7\n\nThis is text7\n.pf\n.bf text8\n\nThis is text8\n.pf\n.bf text9\n\nThis is text9\n.pf\n.bf text10\n\nThis is text10\n.pf\n.bf text11\n\nThis is text11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text12\n\nThis is text12\n.pf\n.bf text14\n\nThis is text14\n.pf\n.bf text16\n\nThis is text16\n.pf\n.bf text18\n\nThis is text18\n.pf\n.bf text20\n\nThis is text20\n.pf\n.bf text24\n\nText24\n.pf\n.bf text30\n\nText30\n.pf\n.bf text36\n\nText36\n.pf\n.*  ******************************************************************\n.*  bold fonts\n.*  ******************************************************************\n.pa\n.bf bold6\n\nThis is bold6\n.pf\n.bf bold7\n\nThis is bold7\n.pf\n.bf bold8\n\nThis is bold8\n.pf\n.bf bold9\n\nThis is bold9\n.pf\n.bf bold10\n\nThis is bold10\n.pf\n.bf bold11\n\nThis is bold11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold12\n\nThis is bold12\n.pf\n.bf bold14\n\nThis is bold14\n.pf\n.bf bold16\n\nThis is bold16\n.pf\n.bf bold18\n\nThis is bold18\n.pf\n.bf bold20\n\nThis is bold20\n.pf\n.bf bold24\n\nBold24\n.pf\n.bf bold30\n\nBold30\n.pf\n.bf bold36\n\nBold36\n.pf\n.*  ******************************************************************\n.*  italic fonts\n.*  ******************************************************************\n.pa\n.bf italic6\n\nThis is italic6\n.pf\n.bf italic7\n\nThis is italic7\n.pf\n.bf italic8\n\nThis is italic8\n.pf\n.bf italic9\n\nThis is italic9\n.pf\n.bf italic10\n\nThis is italic10\n.pf\n.bf italic11\n\nThis is italic11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic12\n\nThis is italic12\n.pf\n.bf italic14\n\nThis is italic14\n.pf\n.bf italic16\n\nThis is italic16\n.pf\n.bf italic18\n\nThis is italic18\n.pf\n.bf italic20\n\nThis is italic20\n.pf\n.bf italic24\n\nItalic24\n.pf\n.bf italic30\n\nItalic30\n.pf\n.bf italic36\n\nItalic36\n.pf\n.*  ******************************************************************\n.*  bold italic fonts\n.*  ******************************************************************\n.pa\n.bf bital6\n\nThis is bital6\n.pf\n.bf bital7\n\nThis is bital7\n.pf\n.bf bital8\n\nThis is bital8\n.pf\n.bf bital9\n\nThis is bital9\n.pf\n.bf bital10\n\nThis is bital10\n.pf\n.bf bital11\n\nThis is bital11\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital12\n\nThis is bital12\n.pf\n.bf bital14\n\nThis is bital14\n.pf\n.bf bital16\n\nThis is bital16\n.pf\n.bf bital18\n\nThis is bital18\n.pf\n.bf bital20\n\nThis is bital20\n.pf\n.bf bital24\n\nBital24\n.pf\n.bf bital30\n\nBital30\n.pf\n.bf bital36\n\nBital36\n.pf\n.*  ******************************************************************\n.*  Fonts invoked in compatible documents (pr12 is fixed pitch)\n.*  ******************************************************************\n.pa\n.bf bold\n\n\nThis is bold (note: should be same as bold11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic\n\nThis is italic (note: should be same as italic11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital\n\nThis is bital (note: should be same as bital11)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf elite\n\nThis is elite (note: should be same as pr12)\nAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n./ ADD NAME=CLASS                                  13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the section on SYSOUT Class\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Last modified 9/14/92  LOZerga - PRTG\n.*\n.dc GML : : e\n:h2.SYSOUT Classes.\n:p.The following list describes the allowable SYSOUT CLASSES.\nNon-production users may use class 1, 2, 3, 4, F, T, U, or Z.\n\n:rdef id=class\n      cwidths='* *'.\n:table refid=class.\n:row.\n:c.CLASS :c.DESCRIPTION\n:row.\n:c.1 :c.2-up Mailroom Siemens laser printers\n:row.\n:c.2 :c.1-up Mailroom Siemens laser printers\n:row.\n:c.3 :c.Test Class/operator intervention Mailroom Siemens laser printersrinter\n:row.\n:c.4 :c.Operator intervention - Brisbane Siemens laser printers\n:row.\n:c.A :c.Impact printers (VPS) or output for viewing only\n:row.\n:c.B :c.Virtual Punch - RJE Output/Transmit Receive TSO\n:row.\n:c.D :c.Production SYSUDUMP/SYSABEND\n:row.\n:c.F :c.Impact printers operator intervention Mailroom/Brisbane\n:row.\n:c.L :c.Production SYSLOG\n:row.\n:c.M :c.Test SYSLOG\n:row.\n:c.N :c.Production SYSOUT - SAR\n:row.\n:c.O :c.Optical Disk\n:row.\n:c.P :c.Production JCL    - SAR\n:row.\n:c.R :c.Virtual RMDS\n:row.\n:c.S :c.Started Tasks (held)\n:row.\n:c.T :c.Time Share Users (held) - release to Mailroom printer 2-u       p\n:row.\n:c.U :c.Distributed laser printers IBM 3820 or ISI 7028 or 7817\n:row.\n:c.V :c.Virtual RMDS VSAM\n:row.\n:c.X :c.Production Systems\n:row.\n:c.Z :c.Purge at job end\n:etable.\n\nNOTE:  All output will be purged if not printed after 5 days, unless\ncoordinated with the OSVS group.\n./ ADD NAME=DESTIDS                                13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the section on Destination id\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Last modified 10/13/92  LOZerga - PRTG\n.*      Added new Dest to table, and made note of ISI printers.\n.*                MONT4A  MONT11A  MONT19A MONT24A\n.*\n.*\n.*\n.*  Last modified 6/24/92  LOZerga - PRTG\n.*\n:h2.DESTINATION IDs\n:h3.Summary\n:p.The list describes the destination ids which should be used to route\noutput to various printer locations within headquarters.  It is valid\nfor all printers controlled by either JES or PSF.  When no DEST JCL\nparameter is specified for SYSOUT, it will be routed to the Mailroom on\nthe 10th floor of 101 Montgomery.  The Mailroom will be LOCAL or the\ndefault, so no additional DEST has been assigned for these printers.\n:rdef id=dest cwidths='1i * *'.\n:table refid=dest.\n:row.\n:c.DEST:c.Location:c.Printer Type\n:row.\n:c.BRISBANE:c.Brisbane:c.Production Printers Siemens 2140s\n:row.\n:c.BUSH10A:c.333 Bush 10th Floor:c.Cut Sheet Printers\n:row.\n:c.BUSH12A:c.333 Bush 12th Floor:c.Cut Sheet Printers\n:row.\n:c.FAXGATE:c.special:c.Any valid fax device\n:row.\n:c.KEAR18A:c.120 Kearney / 1 Montgomery 18th floor:c.Cut Sheet Printers\n:row.\n:c.KEAR27A:c.120 Kearney / 1 Montgomery 27th floor:c.Cut Sheet Printers\n:row.\n:c.KEAR28A:c.120 Kearney / 1 Montgomery 28th floor:c.Cut Sheet Printers\n:row.\n:c.MARK8C:c.101 Market 8th flr Finance department:c.Cut Sheet Printers\n:row.\n:c.MONT4A:c.101 Montgomery 4th floor:c.Cut Sheet Printers\n:row.\n:c.MONT5A:c.101 Montgomery 5th floor:c.Cut Sheet Printers\n:row.\n:c.MONT8A:c.101 Montgomery 8th floor:c.Cut Sheet Printers\n:row.\n:c.MONT11A:c.101 Montgomery 11th floor:c.Cut Sheet Printers\n:row.\n:c.MONT12A:c.101 Montgomery 12th floor:c.Cut Sheet Printers\n:row.\n:c.MONT14A:c.101 Montgomery 14th floor:c.Cut Sheet Printers\n:row.\n:c.MONT19A:c.101 Montgomery 19th floor:c.Cut Sheet Printers\n:row.\n:c.MONT20A:c.101 Montgomery 20th floor:c.Cut Sheet Printers\n:row.\n:c.MONT24A:c.101 Montgomery 24th floor:c.Cut Sheet Printers\n:row.\n:c.MONT25A:c.101 Montgomery 25th floor:c.Cut Sheet Printers\n:etable.\n:p.NOTE:  The naming conventions for cut sheet low speed printers\n(under 20 page per minute) is as follows:\n:sl.\n:li.NNNNFFX\n:li.where\n:li.NNNN is the 1st four alpha characters of the street name or\ncity name if not in San Francisco.\n:li.FF is the building floor location\n:li.X is an alphabetic designation from A to Z determined by the\nnumber of printers on the floor.  The first printer on the floor will\nalways be A.\n:esl.\n:p.The list above represents the floors which have IBM model 3820 or\n3816 or ISI model 7028 or 7817 printers.  Additional printers may be\nadded using the naming convention as described here.  If a new printer\nappears on your floor, try specifying \"DEST=nnnnffx\" to route sysout to\nit.  Each printer should have a note with the destination id.\n./ ADD NAME=FONTST                                 13AUG93 18.34.28\n:f38serif\n:h3.Sample Sonoran Serif using f38serif\n:p.\nThis loads 14 sizes of four associated fonts. The fonts are\nSonoran Serif, text, bold, italic and bold italic.\nEach font is available in the following point sizes: 6, 7,\n8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 30 & 36.\n:p.\nTo use these fonts enter the \".bf\" command followed by the\nname of the font. The font names are defined by the GML tag\nto be, text, bold, italic and bital, followed by the\npoint size.\n.*  ******************************************************************\n.*  Text fonts\n.*  ******************************************************************\n.fo off\n.bf text6\n\nThis is text6\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text7\n\nThis is text7\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text8\n\nThis is text8\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text9\n\nThis is text9\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text10\n\nThis is text10\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text11\n\nThis is text11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf text12\n\nThis is text12\n.pf\n.bf text14\n\nThis is text14\n.pf\n.bf text16\n\nThis is text16\n.pf\n.bf text18\n\nThis is text18\n.pf\n.bf text20\n\nThis is text20\n.pf\n.bf text24\n\nThis is text24\n.pf\n.bf text30\n\nThis is text30\n.pf\n.bf text36\n\nThis is text36\n.pf\n.*  ******************************************************************\n.*  bold fonts\n.*  ******************************************************************\n.pa\n.bf bold6\n\n\nThis is bold6\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold7\n\nThis is bold7\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold8\n\nThis is bold8\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold9\nThis is bold9\n\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold10\n\nThis is bold10\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold11\n\nThis is bold11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bold12\n\nThis is bold12\n.pf\n.bf bold14\n\nThis is bold14\n.pf\n.bf bold16\n\nThis is bold16\n.pf\n.bf bold18\n\nThis is bold18\n.pf\n.bf bold20\n\nThis is bold20\n.pf\n.bf bold24\n\nThis is bold24\n.pf\n.bf bold30\n\nThis is bold30\n.pf\n.bf bold36\n\nThis is bold36\n.pf\n.*  ******************************************************************\n.*  italic fonts\n.*  ******************************************************************\n.pa\n.bf italic6\n\n\nThis is italic6\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic7\n\nThis is italic7\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic8\n\nThis is italic8\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic9\n\nThis is italic9\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic10\n\nThis is italic10\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic11\n\nThis is italic11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic12\n\nThis is italic12\n.pf\n.bf italic14\n\nThis is italic14\n.pf\n.bf italic16\n\nThis is italic16\n.pf\n.bf italic18\n\nThis is italic18\n.pf\n.bf italic20\n\nThis is italic20\n.pf\n.bf italic24\n\nThis is italic24\n.pf\n.bf italic30\n\nThis is italic30\n.pf\n.bf italic36\n\nThis is italic36\n.pf\n.*  ******************************************************************\n.*  bold italic fonts\n.*  ******************************************************************\n.pa\n.bf bital6\n\nThis is bital6\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital7\n\nThis is bital7\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital8\n\nThis is bital8\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital9\n\nThis is bital9\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital10\n\nThis is bital10\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital11\n\nThis is bital11\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital12\n\nThis is bital12\n.pf\n.bf bital14\n\nThis is bital14\n.pf\n.bf bital16\n\nThis is bital16\n.pf\n.bf bital18\n\nThis is bital18\n.pf\n.bf bital20\n\nThis is bital20\n.pf\n.bf bital24\n\nThis is bital24\n.pf\n.bf bital30\n\nThis is bital30\n.pf\n.bf bital36\n\nThis is bital36\n.pf\n.*  ******************************************************************\n.*  Fonts invoked in compatible documents (pr12 is fixed pitch)\n.*  ******************************************************************\n.pa\n.bf bold\n\n\nThis is bold (note: should be same as bold11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf italic\n\nThis is italic (note: should be same as italic11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf bital\n\nThis is bital (note: should be same as bital11)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n.bf elite\n\nThis is elite (note: should be same as pr12)\nAaBaCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\n1234567890-=\u00a2|\\;',./\n!@#$%\u00ac&*()_+{}\u00a6:\"<>?\n.pf\n./ ADD NAME=FORMDEFS                               13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the section on Forms Definitions\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Last modified 6/24/92  LOZerga - PRTG\n.*\n:h2.Forms Definitions\n:p.The AFP resource which describes the physical\ncharacteristics of printed output is called a forms definition.  It is\ninvoked for a specific output dataset through JCL\nor the default forms definition for a specific printer will be used.\nIt includes:\n:ol.\n:li.Horizontal and vertical offset for the page\n:li.Presentation of the page landscape or portrait\n:li.Cut-sheet printer specifics\n:sl.\n:li.Bin selection\n:li.Simplex/duplex/tumble duplex selection\n:esl.\n:li.Optical Overlay or forms flash\n:li.Electronic Overlays\n:li.Field which will be suppressed from printing\n:eol.\n:p.This section lists the form definitions available at Charles Schwab\n& Co., Inc. for various printer types.  They are broken into three\ncategories.  The first category is the IBM-supplied forms definitions.\nThe second category is the Schwab in-house generic forms definitions.\nThe naming conventions and a list of generic forms definitions are\ndescribed in this section.  The third category is the special form\ndefinitions.  The name will be tied closely with the application and\nform identification, unless a generic form definition can be used.\n:h3.IBM-Supplied FORMDEFs\n:p.Complete details and a current list can be found in either IBM's\nPrint Management Facility User's Guide and Reference #SH35-0059 or Print\nServices Facility/MVS Application Programming Guide #S544-3084.\n:h3.In-house Generic FORMDEFs\n:p.The following is the generic naming conventions\nfor AFP printers at Schwab:\n:sl.\n.kp on\n:li.F1hhvvod\n:li.where\n:sl.\n:li.F1 is the prefix provided by PPFA or PMF\n:li.hh is horizontal offset\n:sl compact.\n:li.00 = 0\"\n:li.17 = .17\" or 1/6\"\n:li.25 = .25\" or 1/4\"\n:li.33 = .33\" or 1/3\"\n:li.50 = .50\" or 1/2\"\n:li.A0 = 1\"\n:li.F0 = 1.5\"\n:li.Note:  The alpha characters would represent standard hex values.\nThis will allow hh to have 3 logical positions, the 1st two are decimal\nand the highest level inches.  For example hex 'A' =10, in our case\n1.00 would represent 1 inch.  Therefore 1.1 inches would be hex 'B0',\nand 1.17 inches would be hex 'B7'.  We can then represent up to 3.59\ninches with hex 'Z9'.\n:esl.\n:li.vv is vertical offset\n:sl compact.\n:li.00 = 0\"\n:li.17 = .17\" or 1/6\"\n:li.25 = .25\" or 1/4\"\n:li.33 = .33\" or 1/3\"\n:li.50 = .50\" or 1/2\"\n:li.A0 = 1\"\n:li.F0 = 1.5\"\n:li.etc\n:esl.\n:li.o is overlay\n:sl compact.\n:li.Y = yes (usually graybar in generic Formdefs)\n:li.N = no\n:esl.\n:li.d is the plex mode selected\n:sl compact.\n:li.S = simplex\n:li.D = duplex  (not available on continuous-form printers)\n:li.T = tumble  (not available on continuous-form printers)\n.kp off\n:esl.\n:esl.\n:esl.\n:p.This table lists the Form definitions for all printer types.\nThe Siemens' 2300s on the 10th floor of 101 Montgomery\nand the Siemens' 2140s in Brisbane are continuous printers and cannot\nhandle duplex printing.  The 3820/3816 printers are cut-sheet which\nhandle duplex printing.\n:rdef id=formdf cwidths='1i .55i .55i 1i 1i 1i 1i'.\n:table refid=formdf.\n:row.\n:c.Name\n:c.Across\n:c.Down\n:c.Direction\n:c.Overlay\n:c.Duplex\n:c.Printer Type\n:row.\n:c.F10000NS*\n:c.0\n:c.0\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10005NS\n:c.0\n:c..05\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10017NS\n:c.0\n:c..17\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10050ND*\n:c.0\n:c..5\"\n:c.Across\n:c.None\n:c.Duplex\n:c.Cutsheet\n:row.\n:c.F10050NS*\n:c.0\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10050NT*\n:c.0\n:c..5\"\n:c.Across\n:c.None\n:c.Tumble\n:c.Cutsheet\n:row.\n:c.F10050YS*\n:c.0\n:c..5\"\n:c.Across\n:c.GrayBar\n:c.Simplex\n:c.All\n:row.\n:c.F10067NS\n:c.0\n:c..67\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:c.F100A0NS*\n:c.0\n:c.1\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F100E0NS\n:c.0\n:c.1.4\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F100F0NS\n:c.0\n:c.1.5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F102B0NS\n:c..02\"\n:c.1.1\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10300NS\n:c..03\"\n:c. 0\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F109G7NS\n:c..09\"\n:c.1.67\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F11010NS\n:c..10\"\n:c..10\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F11050ND*\n:c..10\"\n:c..5\"\n:c.Across\n:c.None\n:c.duplex\n:c.Cutsheet\n:row.\n:c.F11075ND*\n:c..10\"\n:c..75\"\n:c.Across\n:c.None\n:c.duplex\n:c.Cutsheet\n:row.\n:c.F11082ND*\n:c..10\"\n:c..82\"\n:c.Across\n:c.None\n:c.Duplex\n:c.Cutsheet\n:row.\n:c.F11082NS\n:c..10\"\n:c..82\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F11090NS\n:c..10\"\n:c..90\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F11095NS\n:c..10\"\n:c..95\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F110A0NS\n:c..10\"\n:c.1.0\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F110C2NS\n:c..10\"\n:c.1.22\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12017NS\n:c..2\"\n:c..17\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12050NS\n:c..2\"\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12082NS\n:c..2\"\n:c..82\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12090NS\n:c..2\"\n:c..9\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12533NS\n:c..25\"\n:c..33\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12550ND*\n:c..25\"\n:c..5\"\n:c.Across\n:c.None\n:c.Duplex\n:c.Cutsheet\n:row.\n:c.F12550NS*\n:c..25\"\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12550YS*\n:c..25\"\n:c..5\"\n:c.Across\n:c.Gray Bar\n:c.Simplex\n:c.Cutsheet\n:row.\n:c.F125A5NS\n:c..25\"\n:c.1.05\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F14050NS\n:c..4\"\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F14056NS\n:c..4\"\n:c..56\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F140A0NS\n:c..4\"\n:c.1\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F140E0NS\n:c..4\"\n:c.1.4\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F140F0NS\n:c..4\"\n:c.1.5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F15050ND*\n:c..5\"\n:c..5\"\n:c.Across\n:c.Graybar\n:c.Duplex\n:c.Cutsheet\n:row.\n:c.F15050NS*\n:c..5\"\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F167E0NS\n:c..67\"\n:c.1.4\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F167F0NS\n:c..67\"\n:c.1.5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F167K0NS\n:c..67\"\n:c.2\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F17550ND\n:c..75\"\n:c..50\"\n:c.Across\n:c.None\n:c.Duplex\n:c.Cutsheet\n:row.\n:c.F17550NS\n:c..75\"\n:c..50\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F180D3NS\n:c..80\"\n:c.1.33\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F180F3NS\n:c..80\"\n:c.1.53\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:tcap.Schwab Local FORMDEFs for all printer types.\n:etable.\n:p.*  The majority of PAGEDEFs expect to use these FORMDEFs.  The others\nare generally available for older applications to compensate for\noperator adjustments and should be avoided if possible.\n:h3.Special FORMDEFs\n:p.When the generic form definitions cannot be used, an application will\nhave a special form definition. The most common reason for a special\nform definition will be because an optical overlay or an electronic\noverlay is required.  In this case the\nname will be tied closely with the application and form identification.\nSee \"ISDPUB.SYSTEM.ID' for a list of application identifiers.\nFor example, production\njob \"PRDPANSP\" uses a SYSOUT=(1,,120)...with an electronic overlay\nnamed O1DP120 will use a form definition named F1DP120.\n:p.The following is the special application naming conventions\nfor AFP printers at Schwab:\n.kp on\n:sl.\n:li.F1aaffff\n:li.where\n:sl.\n:li.F1 is the prefix provided by PPFA or PMF\n:li.aa is application identifier - see 'ISDPUB.SYSTEM.ID'\n:li.ffff is the electronic or flash form identifications\n:esl.\n:esl.\n.kp off\n./ ADD NAME=FORMS                                  13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the section on Electronic Forms\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Last modified 10/13/92  LOZerga - PRTG\n.*\n:h2.Electronic Forms\n:p.The AFP resource which predefines a set of constant data to be\nmerged with variable data at print time is called an electronic form\nor electronic overlay.  The electronic overlay is typically called\nfrom a FORMDEF.\n:p.An electronic form could replace either an optical overlay or\na pre-printed form.  All optical overlays at Schwab have been converted\nto electronic overlays.  The benefit is no operator intervention\nis required to mount an optical overlay or load a new form.  This\nmeans users recevie output sooner than the previous method.\n./ ADD NAME=INDEX                                  13AUG93 18.34.28\nAF38SANS      Contains the appendix for sample of Sonoran Sans Serif\n              Script Proc =  F38SANS - 6/24/92 LOZerga PRTG\nAF38SERI      Contains the appendix for sample of Sonoran Serif\n              Script Proc =  F38SERIF - 6/24/92 LOZerga PRTG\nAMONOGAR      Contains the appendix for sample of Monotype Garamond\n              Script Proc =  MONOGARA - 6/24/92 LOZerga PRTG\nAPISANS       Contains the appendix for sample of Pi & Specials Sans\n              Serif Script Proc =  PISANS - 6/24/92 LOZerga PRTG\nAPISERIF      Contains the appendix for sample of Pi & Specials Serif\n              Script Proc =  PISERIF - 6/24/92 LOZerga PRTG\nASCHOOL       Contains the appendix for sample of Century Schoolbook\n              Script Proc =  SCHOOL - 6/24/92 LOZerga PRTG\nASOUVEN       Contains the appendix for sample of ITC Souvenir\n              Script Proc =  SOUVENIR - 6/24/92 LOZerga PRTG\nDESTIDS       Contains section on Destination Routing in \"Publishing\n              Tools and Accessories\" - 6/24/92 LOZerga PRTG\nFORMDEFS      Contains section on Form Definitions in \"Publishing\n              Tools and Accessories\" - 6/24/92 LOZerga PRTG\nPAGEDEFS      Contains section on Page Definitions in \"Publishing\n              Tools and Accessories\" - 6/24/92 LOZerga PRTG\nPRINDOC       Contains the complete \"Publishing Tools and Accessories\"\n              document as of 6/1/92\nPRINTDES      Contains the document passed to Standards committee\n              documenting the new DESTID standards last mod 4/6/92\nPRINTDOC      Contains body of \"Publishing Tools and Accessories\"\n              6/24/92 LOZerga PRTG\nPRINTSTD      Contains the doucment passed to Standards committee\n              documenting the new pagedef/formdef, etc  2/14/92\nPRINTVPS      Contains a working section on VPS to be added to\n              \"Publishing Tools and Accessories\"  4/29/92\nSCRFONTS      Contains \"Publishing Tools and Accessories Section on\n              using fonts in Script - 6/24/92 LOZerga PRTG\nSCRPSEGS      Contains \"Publishing Tools and Accessories Section on\n              using Page Segments in Script - 1/14/92 LOZerga PRTG\n./ ADD NAME=PAGEDEFS                               13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the section on Page Definitions\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Last modified 10/13/92  LOZerga - PRTG\n.*\n.*  Last modified 6/24/92  LOZerga - PRTG\n.*\n:h2.Page Definitions\n:p.The AFP resource which formats line data and prepares pages\nfor printed output is called a page definition.  It replaces the\nold FCB plus added features.  It is\ninvoked for a specific output dataset through JCL\nor the default page definition for a specific printer will be used.\nIt includes:\n:ol.\n:li.Logical page size\n:li.Direction for printing\n:li.Carriage control positioning\n:li.Lines per inch\n:li.Print position for specific input data fields\n:li.Constant data position and definition\n:li.Font list - (Schwab keeps fonts outside of generic pagedefs)\n:li.Page segments list\n:li.Conditional processing\n:li.Fields which will be suppressed from printing\n:eol.\n:p.This section lists the page definitions available at Charles Schwab\n& Co., Inc. for various printer types.  They are broken into three\ncategories.  The first category is the IBM-supplied page definitions.\nThe naming conventions and a list of generic page definitions are\ndescribed in this section.  The third category is the Special page\ndefinitions.  The name will be tied closely with the application and\nform identification, unless a generic form definition can be used.\n:h3.IBM-Supplied PAGEDEFs\n:p.Complete details and a current list can be found in either IBM's\nPrint Management Facility User's Guide and Reference #SH35-0059 or Print\nServices Facility/MVS Application Programming Guide #S544-3084.\n.kp on\n:h3.In-house Generic Page Definitions\n:p.The following is the naming conventions for AFP printers at Schwab:\n:sl.\n:li.P1solupm\n:li.where\n:sl.\n:li.P1 is the prefix provided by PPFA or PMF\n:li.s is finished size of physical page\n:sl compact.\n:li.I = 14.87\" X 11\" (standard impact page)\n:li.L = 8.50\" X 11\"  (standard letter page)\n:li.G = 8.5\" X 14\"   (standard legal page)\n:li.R = 17\" X 11\"   (also know as register) This will be used\n                      for 2-across 2140.\n:esl.\n:li.o is orientation\n:sl compact.\n:li.L = landscape\n:li.M = landscape rotated 90\n:li.P = portrait\n:li.Q = portrait rotated 90\n:esl.\n:li.l is lines per inch\n:sl compact.\n:li.6 = 6 lpi\n:li.8 = 8 lpi\n:li.A = 10 lpi\n:li.C = 12 lpi\n:li.S = special\n:esl.\n:li.u is the number of logical page images per page\n:sl compact.\n:li.1 = 1-up\n:li.2 = 2-up\n:li.4 = 4-up\n:esl.\n:li.p is the logical page indicator\n:sl compact.\n:li.F = assumes full page use formdef F10000NS\n:li.M = assumes 1/2\" top and bottom margin use formdef F10050NS\n:li.P = assumes a partial margin used in the formdef\n:esl.\n:li.m is the margin set within pagedef\n:sl compact.\n:li.B = bind or 3-hole punch allowance\n:li.C = center page\n:li.N = No margin set\n:li.T = top margin set\n:li.1 = 1 line down\n:li.2 = between 1 and 2 lines down\n:esl.\n:esl.\n:esl.\n.kp off\n:p.Note that the page definitions are somewhat printer specific.  This\nis due to printer specific attributes.  The continuous form printers,\nsuch as the Siemens' 2300 and 2140 (which look like an IBM 3800)\ntype printers have an origin in the top\nleft corner.  The other AFP printers in house are cut-sheet and the\ndefault forms are different orientations from the continuous printers.\nTherefore the page definitions are listed\nby printer type and valid formids.\n:p.This table lists the Page definitions for all printer types,\nwhich include the Siemens' 2300s on the 10th floor of 101 Montgomery\nand the Siemens' 2140s in Brisbane.  The form size and page size are\nin inches.\n.ll 8i\n.bf billy\n:rdef id=pagedf\n      cwidths='.8i .5i .5i .55i .4i .55i .55i .5i .6i .5i .8i .5i .55i'.\n:table refid=pagedf.\n:row.\n:c.Name\n:c.Form Size\n:c.Page Size\n:c.Direction\n:c.LPI\n:c.Count\n:c.Across\n:c.Down\n:c.Channel #\n:c.Font size\n:c.FormDef\n:c.Form ids\n:c.Printer Type\n:row.\n:c.P1GP61PN\n:c.8.5\" X 14\"\n:c.8.5\" X 13.83\"\n:c.Across\n:c. 6\n:c. 82   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 10cpi\n:c.F10000NS\n:c.110 140\n:c.2140 2300\n:row.\n:c.P1LL61FN\n:c.10\" X 8.5\"\n:c.10\" X 8.5\"\n:c.Across\n:c. 6\n:c. 50   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 10cpi\n:c.F10000NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LL61MN\n:c.10\" X 8.5\"\n:c.10\" X 7.5\"\n:c.Across\n:c. 6\n:c. 45\n:c. margin\n:c. top\n:c. 1\n:c. 10cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LL81MN\n:c.10\" X 8.5\"\n:c.10\" X 7.5\"\n:c.Across\n:c. 8\n:c. 59   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 12cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LLC1MN\n:c.10\" X 8.5\"\n:c.10\" X 7.6\"\n:c.Across\n:c. 12\n:c. 89   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 15cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LP61MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 6\n:c. 59   1\n:c. margin\n:c. top\n:c. 1     12\n:c. 10cpi\n:c.F10050NS\n:c.264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 79   1\n:c. margin\n:c. top\n:c. 1     12\n:c. 12cpi\n:c.F10050NS\n:c.264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81M1\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 78   1\n:c. margin\n:c. .13\"\n:c. 1     12\n:c. 12cpi\n:c.F10050NS\n:c.CONS 264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81M2\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 79   1\n:c. margin\n:c. .09\"\n:c. 1    12\n:c. 12cpi\n:c.F10050NS\n:c.STD 179 264 280 281\n:c.2140 2300 3816 3820\n:row.\n:c.P1LPC1MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 12\n:c. 119  1\n:c. margin\n:c. top\n:c. 1    12\n:c. 15cpi\n:c.F10050NS\n:c.STD 179 263 280 281\n:c.2140 2300 3816 3820\n:row.\n:c.P1LQ61FN\n:c.11\" X 8.5\"\n:c.10\" X 8.4\"\n:c.Down\n:c. 6\n:c. 49   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 12cpi\n:c.F10050NS\n:c.STD\n:c.3820 3816 4028\n:row.\n:c.P1LQ61MN\n:c.11\" X 8.5\"\n:c.10\" X 7.5\"\n:c.Down\n:c. 6\n:c. 45\n:c. margin\n:c. top\n:c. 1\n:c. 10cpi\n:c.F10050NS\n:c.STD\n:c.3820 3816 4028\n:row.\n:c.P1LQ81MN\n:c.11\" X 8.5\"\n:c.10\" X 7.5\"\n:c.Down\n:c. 8\n:c. 59   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 12cpi\n:c.F10050NS F10050ND\n:c.STD\n:c.3820 3816 4028\n:row.\n:c.P1LQC1MN\n:c.11\" X 8.5\"\n:c.10\" X 7.6\"\n:c.Down\n:c. 12\n:c. 89   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 15cpi\n:c.F10050NS F10050ND\n:c.STD\n:c.3820 3816 4028\n:row.\n:c.P1LQC2PB\n:c.8.5\" X 11\"\n:c.7.85\" X 11\"\n:c.Down\n:c. 12\n:c. 60    60\n:c. 0\"    0\"\n:c. .25\" 5.75\"\n:c. 1     1\n:c. 17cpi\n:c.F10065NS\n:c.STD\n:c.2140 2300\n:tcap.Schwab Local PAGEDEFs for all printer types.\n:etable.\n.ll 7i\n.pf\n:h3.Special PAGEDEFs\n:p.When the generic page definitions cannot be used, an application will\nhave a special page definition.  The name will be tied closely with the\napplication.  See \"ISDPUB.SYSTEM.ID' for a list of application\nidentifiers.  The name will refer to the job name and OUTPUT statement\nnumber in the job.  For example, production job \"PRCCDSP3\" has a\nSYSOUT=(4,,CUSF) using OUTPUT card OUT2 in the PROC.  It will use a page\ndefinition named P1CCDSP2.  When a duplicate RMDS sysout statement\nexists, it would use the original page definition in this case P1CCDSP2.\n:p.The following is the naming convention for AFP printers at Schwab:\n.kp on\n:sl.\n:li.P1aajjjn\n:li.where\n:sl.\n:li.P1 is the prefix provided by PPFA or PMF\n:li.aa is the application identifier - see 'ISDPUB.SYSTEM.ID'\n:li.jjj is the job identifier\n:li.n is the sysout number within the job.\n:esl.\n:esl.\n.kp off\n./ ADD NAME=PRINTDES                               13AUG93 18.34.28\n.pm .5i\n.ll 7i\n:gdoc.\n:frontm.\n:titlep.\n:title.Print Destination Ids\n:date.\n:Author.Lauretta Ongaro Zerga\n:address.\n:aline.Printer Technology Group\n:aline.Technical Services\n:aline.Charles Schwab & Co., Inc.\n:aline.101 Montgomery Street\n:aline.San Francisco, CA  94105\n:eaddress.\n:etitlep.\n:body.\n.fo on\n:h1.DESTINATION IDs\n:h2.Note\n:p.This should be placed following section 3.H.7 \"SYSOUT CLASS\" .\n:h2.Summary\n:p.The list describes the destination ids which should be used to route\noutput to various printer locations within headquarters.  It is valid\nfor all printers controlled by either JES or PSF.  When no DEST JCL\nparameter is specified for SYSOUT, it will be routed to the Mailroom on\nthe 10th floor of 101 Montgomery.  The Mailroom will be LOCAL or the\ndefault, so no additional DEST has been assigned for these printers.\n:rdef id=dest cwidths='1i * *'.\n:table refid=dest.\n:row.\n:c.DEST:c.Location:c.Printer Type\n:row.\n:c.BRISBANE:c.Brisbane:c.Production Printers Siemens 2140s\n:row.\n:c.BUSH10A:c.333 Bush 10th Floor:c.Cut Sheet Printers\n:row.\n:c.BUSH12A:c.333 Bush 12th Floor:c.Cut Sheet Printers\n:row.\n:c.FAXGATE:c.special:c.Any valid fax device\n:row.\n:c.KEAR18A:c.120 Kearney / 1 Montgomery 18th floor:c.Cut Sheet Printers\n:row.\n:c.MONT5A:c.101 Montgomery 5th floor:c.Cut Sheet Printers\n:row.\n:c.MONT8A:c.101 Montgomery 8th floor:c.Cut Sheet Printers\n:row.\n:c.MONT12A:c.101 Montgomery 12th floor:c.Cut Sheet Printers\n:row.\n:c.MONT14A:c.101 Montgomery 14th floor:c.Cut Sheet Printers\n:row.\n:c.MONT20A:c.101 Montgomery 20th floor:c.Cut Sheet Printers\n:row.\n:c.MONT25A:c.101 Montgomery 25th floor:c.Cut Sheet Printers\n:etable.\n:p.NOTE:  The naming conventions for cut sheet low speed printers\n(under 20 page per minute) is as follows:\n:sl.\n:li.NNNNFFX\n:li.where\n:li.NNNN is the 1st four alpha characters of the street name or\ncity name if not in San Francisco.\n:li.FF is the building floor location\n:li.X is an alphabetic designation from A to Z determined by the\nnumber of printers on the floor.  The first printer on the floor will\nalways be A.\n:esl.\n:p.The list above represents the floors which have 3820 printers.\nAdditional printers may be added using the naming convention as\ndescribed here.  If a new printer appears on your floor, try specifying\n\"DEST=nnnnffx\" to route sysout to it.  Each printer should have a note\nwith the destination id.\n:egdoc.\n./ ADD NAME=PRINTDOC                               13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the main document outline\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Last modified 10/13/92  LOZerga - PRTG\n.*       Add im forms\n.*       Modify New Printer Resource section to document TOSS forms.\n.*\n.dh 1 spbf .25i\n.df billy type('GOTHIC' 6) codepage T1D0BASE\n.pm .5i\n.ll 7i\n:gdoc.\n:frontm.\n:titlep.\n:title.Publishing Tools and Accessories\n:date.\n:Author.Lauretta Ongaro Zerga\n:address.\n:aline.Printer Technology Group\n:aline.Technical Services\n:aline.Charles Schwab & Co., Inc.\n:aline.101 Montgomery Street\n:aline.San Francisco, CA  94105\n:eaddress.\n:etitlep.\n:toc.\n:body.\n.fo on\n:h1.Summary of Mainframe Printing Methods at Schwab\n:h2.Overview\n:p.\nThere are three primary printing methods from the host system at\nCharles Schwab & Co., INC.  Printers are\neither defined as Advanced Function Printers or CICS transaction\nprinters or VTAM print services printers.  A description of each follows\nthis section.\n:h3.Advanced Function Printing\n:p.\nAdvanced Function Printing is IBM's suggested printing platform\nsupporting from the desktop to high-speed production\nprinters, fan-fold and cut-sheet form capabilities.\nIt is an architecture which is SAA compliant. The software product line\nhandles grahics, images, signatures, logos, proportional fonts,\nelectronic forms, and text.\n:p.\nSchwab has selected this as a standard for mainframe printing.\nHigh volume print\nrequirements for in-house reports printed on the 10th floor of 101\nMontgomery and customer statements/correspondence printed in Brisbane\nwill use AFP functionality.  Currently many in-house documents printed\non the 3820/3816 type printers use DCF/SCRIPT which is part of the\nAFP product line.\n:p.\nA part of AFP printing allows for the off-loading of some documents to\nother printers in PostScript format on PC-attached or LAN attached\nprinters.  This is not formally supported within Schwab at this date.\n:h3.CICS Attached Printers\nThis is the historical method of printing transactions, wires, etc at\nthe branches within Schwab.  The original driver is an in-house grown\nCICS transaction called \"MESS\".\n:h3.VTAM Print Services\n:p.VPS is a product of Levi, Ray and Shoup, INC.  It allows definition\nof any printer which can connect to a 3270 controller cluster to the\nmainframe.  It interfaces with JES to package and pass printed output\nthrough VTAM.  This is a method to connect pc-attached printers,\nbranch printers, etc.\n:h1.Advanced Function Printing\n:h2.JCL\n.kp on\n:p.Previous to AFP many jobs called FCBs, Character sets, and/or\noptical forms,\nto define how a particular job would print.  The format might be:\n:sl.\n:li.//PRINT DD SYSOUT=(A,,0179),\n:li.//        FCB=8STD,\n:li.//        CHARS=(GT10,GT12,GT15,GB10),\n:li.//        FLASH=FORM,\n:li.//        DCB=(LRECL=133,RECFM=FBA,BLKSIZE=3120,OPTCD=J)\n:esl.\n.kp off\n.kp on\n:p.Many  resources are incorporated into two AFP resources.\nThe first is the FORMDEF and the second is the PAGEDEF (see the next\nsection for further description). The JCL should look like:\n:sl compact.\n:li.//OUT1 OUTPUT  CLASS=c,\n:li.//             CHARS=(chr1,chr2,chr3,chr4),\n:li.//             DEST=dest,\n:li.//             FORM=form,\n:li.//             FORMDEF=fdef,\n:li.//             PAGEDEF=pdef,\n:li.//             PIMSG=YES,\n:li.//             TRC=YES,\n:li.//             USERLIB=(user.lib)\n:li.//PRINT DD SYSOUT=(c,,form),\n:li.//             OUTPUT=*.OUT1\n:li.\n.kp off\n.kp on\n:li.For example:\n:li.//OUT1 OUTPUT  CLASS=4,\n:li.//             CHARS=(GT10,GT12,GT15,GB10),\n:li.//             DEST=BRISBANE,\n:li.//             FORM=179,\n:li.//             FORMDEF=0050NS,\n:li.//             PAGEDEF=LP81MN,\n:li.//             PIMSG=YES,\n:li.//             TRC=YES\n:li.//PRINT DD SYSOUT=(4,,179),\n:li.//             OUTPUT=*.OUT1\n.kp off\n:esl.\n:h3.Optional JCL Parms\n:sl.\n:li.CHARS=\n:sl.\n:li.Specify up to 4 font names of 1 to 4 alphmeric characters. The\nfonts must reside in a library assigned to the printer or defined by\nthe User library.  This is not necessary if fonts are specified in\nthe PAGEDEF.\n:esl.\n:li.TRC=\n:sl.\n:li.Used only when more than 1 font is to be used and column 2 of the\nline data includes a table reference character.\n:esl.\n:li.USERLIB=\n:sl.\n:li.Used to specify a private library which contains resources for\nprinting.\n:esl.\n:esl.\n:h3. Hints and Helps\n:h4. CHARS\n:P. Schwab has determined to leave CHARS external to the generic\nPAGEDEFs for two reasons.  First, there was not a one for one\ncorrelation of chars to FCB used.  So to reduce the number of pagedefs\nrequired the chars parameter was left as it currently is specified in\nthe appropriate JCL.  Second, it allows for changing CHARS without\nmodifying the existing pagedef.\n:p.The limitation with this method is that only the old style line mode\nor compatibility mode fonts can be used for these pagedefs.  The\ncompatibility mode font names were four (4) characters (excluding the\nprefix). The JCL CHARS parameter allows a maximum of 4 characters.\nHowever the AFP font names are six (6) characters (excluding the\nprefix).  So as we migrate to new fonts and formatting capabilities of\nAFP, internal definition of fonts will be used. See \"Script Information\"\nin this document for additional information on fonts.\n\n.im class\n\n.im destids\n\n.im formdefs\n\n.im pagedefs\n\n.im forms\n\n:h2.New Printer Resources\n:p.IBM-supplied and generic resources will be maintained by the\nPrinting Technology Group.  Special resources, such as forms definitions\nand page definitions, are the responsibility of the user.  They can\nbe generated and tested in a user's private library through use of the\nUSERLIB statement in their JCL.  During testing the user must have the\nprint operator specify any job setup parameters required at the printer.\nOnce testing is complete the user must pass job setup information and\nresource information to the Printing Technology Group.  The resource\nwill be placed in the appropriate library by the Printing Technology\nGroup.\n:p.The Printer Technology Group is available on a consulting basis to\nassist users with special resources.  A minimum of two weeks is required\nto process requests.  A fee may be charged for services if a request\nrequires a resource to be acquired from an outside source.  A users\nshould complete TOSS form \"PRTG:  Application Support Request\" for\nPAGEDEF or FORMDEF resources.  TOSS form \"PRTG:  Resource Request\"\nshould be completed for FONTS, signatures, logos, or electronic\noverlays.  Completed forms should be sent via TOSS to Printer\nAdministrator.\n:h4. A Note About Orientation\n:p.New users to AFP are often confused about the terminology used to\ndescribe page orientation.  The following diagram should assist.\n:rdef id=orient\n      cwidths='3i 3i'.\n:table refid=orient.\n:row.\n:c.Landscape 0 degree (Direction across)\n.si s1pagel0 inline\n:c.Landscape 90 degree (Direction down)\n.si s1pagel9 inline\n:row.\n:c.Portrait 0 degree (Direction across)\n.si s1pagep0 inline\n:c.Portrait 90 degree (Direction down)\n.si s1pagep9 inline\n:tcap.Page orientation samples for continuous form printers.\n:etable.\n:p.It is sometimes easier to set a printer for one generic form and\nreorient various documents in different ways for different results.\nThis reduces operator intervention thus improving printout turnaround.\n:h3.In-house Forms\n:p.The FORM= and/or SYSOUT parameters should specify the physical form\nid for the operator should mount at print time.  It should NOT include\nthe version number as part of the form or one of two things will happen.\nEither all JCL will need to be changed each time the version number\nchanges or the JCL will all have different form numbers actually calling\nthe same physical form.  In the second case, operator intervention will\nbe required for each different form even though it is really the same\nphysical form.  For example previously JCL included:\n:sl compact.\n:li.SYSOUT=(4,,0179)\n:li.SYSOUT=(4,,1792)\n:li.SYSOUT=(4,,1793)\n:li.SYSOUT=(4,,1794)\n:li.\n:li.These should change to:\n:li.\n:li.SYSOUT=(4,,179)\n:esl.\n.kp off\n:p.Physically the operator mounted the same form, but intervention was\nrequired since the system treated them as the different forms.  The\nresult to the user is turnaround time for printout is longer.\n:p.Some examples of valid forms:\n:sl.\n:li.179     264     280     281     284\n:li.CONS    DIVS\n:esl.\n:p.For information on valid Form numbers coordinate with Brisbane\nPrint operator supervisor.\n.im scrfonts\n:h3.FONTLIB Script Command / SCRPTFNT DD\n:p.The FONTLIB script command defines the font library to be used when\nformatting documents for AFP or Postscript printers.  The format is\nas follows:\n:sl.\n:li.FONTLIB('SYS1.FONTLIB') ~This will define the IBM  fonts for 3800\n:li.FONTLIB('SYS0.FONTLIB') ~This will define the custom fonts for 3800\n:li.FONTLIB('SYS1.FONTLIBB') ~This will define the IBM fonts for 3820\n:li.FONTLIB('SYS0.FONTLIBB')~This will define the custom fonts for 3820\n:p.Note:  The 3800 type fonts are unbounded box fonts.  The 3820 and\nother cut-sheet printers use bounded box fonts.  The actual characters\nwhich are loaded into the printer are different, so they are stored\nin different libraries.  Both sets of libraries should contain the same\nfont styles, so you can print on either printer type without changing\nyour application.  The section in this document, \"Other Fonts\",\nhas examples\nof methods to define fonts generically for printing on either printer\ntype.\n:esl.\n:p.An alternative to using the FONTLIB Script command is to define a\nSCRPTFNT DD statement.  This is useful when you need to access fonts\nfrom multiple libraries.  The statement would look like:\n.sp 1\n.fo off\n.bf gt12\n~From Batch:  //SCRPTFNT DD DSN=SYS0.FONTLIB,DISP=SHR\n~             //         DD DSN=SYS1.FONTLIB,DISP=SHR\n.sp 1\n~From TSO:   ALLOC F(SCRPTFNT) DA('SYS0.FONTLIBB' +\n~                                 'SYS1.FONTLIBB') SHR REUS\n.pf\n.fo on\n.im scrpseg\n.im sigstds\n.im printvps\n:h1.Appendixes\n:appendix.\n.im af38sans\n.im af38seri\n.*im amonogar monotype garamond not in sys0.fontlib temp commented out\n.im apisans\n.im apiserif\n.im aschool\n.im asouveni\n::gdoc\n./ ADD NAME=PRINTST                                13AUG93 18.34.28\n.dh 1 spbf .25i\n.df billy  font X0gt18\n.pm .5i\n.ll 7i\n.dc GML ! ! e\n!gdoc.\n!frontm.\n!titlep.\n!title.Publishing Tools and Accessories\n!date.\n!Author.Lauretta Ongaro Zerga\n!address.\n!aline.Printer Technology Group\n!aline.Technical Services\n!aline.Charles Schwab & Co., Inc.\n!aline.101 Montgomery Street\n!aline.San Francisco, CA  94105\n!eaddress.\n!etitlep.\n!toc.\n!body.\n.fo on\n!h1.Summary of Mainframe Printing Methods at Schwab\n!h2.Overview\n!h1.Advanced Function Printing\n!h2.JCL\n!h3.Optional JCL Parms\n!h3. Hints and Helps\n!h4. CHARS\n!h2.Page Definitions\n!h3.In-house Generic Page Definitions\n!h3.Special PAGEDEFs\n!h2.New Printer Resources\n!h4. A Note About Orientation\n!h3.In-house Forms\n!h2.Page Segments\n!h3.Some Basic information about PAGE SEGMENTS\n!h3.SEGLIB Script Command / SCRPTSEG DD\n.dc GML\n.*c GML off\n:appendix\n.*f38sans\n.im af38sans\n.*f38serif\n.im af38seri\n.*tstgara\n.im amonogar\n.*tstpisan\n.im apisans\n.*piserif\n.im apiserif\n.*tstschl\n.im aschool\n.*tstsvnr\n.im asouveni\n::gdoc\n./ ADD NAME=PRINTSTD                               13AUG93 18.34.28\n.df billy  font X0gt18\n.pm .5i\n.ll 7i\n:gdoc.\n:frontm.\n:titlep.\n:title.Print Standards\n:date.\n:Author.Lauretta Ongaro Zerga\n:address.\n:aline.Printer Technology Group\n:aline.Technical Services\n:aline.Charles Schwab & Co., Inc.\n:aline.101 Montgomery Street\n:aline.San Francisco, CA  94105\n:eaddress.\n:etitlep.\n:toc.\n:body.\n.fo on\n:h1.Advanced Function Printing\n:h2.JCL\n:p.Many  resources are incorporated into two AFP resources.\nThe first is the FORMDEF and the second is the PAGEDEF (see the next\nsection for further description). The JCL should look like:\n:sl.\n:li.//OUT1 OUTPUT  CLASS=c,\n:li.//             CHARS=(chr1,chr2,chr3,chr4),\n:li.//             DEST=dest,\n:li.//             FORM=form,\n:li.//             FORMDEF=fdef,\n:li.//             PAGEDEF=pdef,\n:li.//             PIMSG=YES,\n:li.//             TRC=YES,\n:li.//             USERLIB=(user.lib)\n:li.//PRINT DD SYSOUT=(c,,form),\n:li.//             OUTPUT=*.OUT1\n:li.\n:li.For example:\n:li.\n:li.//OUT1 OUTPUT  CLASS=4,\n:li.//             CHARS=(GT10,GT12,GT15,GB10),\n:li.//             DEST=CS01,\n:li.//             FORM=179,\n:li.//             FORMDEF=0050NS,\n:li.//             PAGEDEF=LP81MN,\n:li.//             PIMSG=YES,\n:li.//             TRC=YES\n:li.//PRINT DD SYSOUT=(4,,179),\n:li.//             OUTPUT=*.OUT1\n:esl.\n:h3.Optional JCL Parms\n:sl.\n:li.CHARS=\n:sl.\n:li.Specify up to 4 font names of 1 to 4 alphmeric characters. The\nfonts must reside in a library assigned to the printer or defined by\nthe User library.  This is not necessary if fonts are specified in\nthe PAGEDEF.\n:esl.\n:li.TRC=\n:sl.\n:li.Used only when more than 1 font is to be used and column 2 of the\nline data includes a table reference character.\n:esl.\n:li.USERLIB=\n:sl.\n:li.Used to specify a private library which contains resources for\nprinting.\n:esl.\n:esl.\n:h2.Forms Definitions\n:p.The AFP resource which describes the physical\ncharacteristics of printed output is called a forms definition.  It is\ninvoked for a specific output dataset through JCL\nor the default forms definition for a specific printer will be used.\nIt includes:\n:ol.\n:li.Horizontal and vertical offset for the page\n:li.Presentation of the page landscape or portrait\n:li.Cut-sheet printer specifics\n:sl.\n:li.Bin selection\n:li.Simplex/duplex/tumble duplex selection\n:esl.\n:li.Optical Overlay or forms flash\n:li.Electronic Overlays\n:li.Field which will be suppressed from printing\n:eol.\n:p.This section lists the form definitions available at Charles Schwab\n& Co., Inc. for various printer types.  They are broken into three\ncategories.  The first category is the IBM-supplied forms definitions.\nThe second category is the Schwab in-house generic forms definitions.\nThe naming conventions and a list of generic forms definitions are\ndescribed in this section.  The third category is the special form\ndefinitions.  The name will be tied closely with the application and\nform identification, unless a generic form definition can be used.\n:h3.IBM-Supplied FORMDEFs\n:p.Complete details and a current list can be found in either IBM's\nPrint Management Facility User's Guide and Reference #SH35-0059 or Print\nServices Facility/MVS Application Programming Guide #S544-3084.\n:h3.In-house Generic FORMDEFs\n:p.The following is the generic naming conventions\nfor AFP printers at Schwab:\n:sl.\n.kp on\n:li.F1hhvvod\n:li.where\n:sl.\n:li.F1 is the prefix provided by PPFA or PMF\n:li.hh is horizontal offset\n:sl compact.\n:li.00 = 0\"\n:li.17 = .17\" or 1/6\"\n:li.25 = .25\" or 1/4\"\n:li.33 = .33\" or 1/3\"\n:li.50 = .50\" or 1/2\"\n:li.A0 = 1\"\n:li.F0 = 1.5\"\n:li.Note:  The alpha characters would represent standard hex values.\nThis will allow hh to have 3 logical positions, the 1st two are decimal\nand the highest level inches.  For example hex 'A' =10, in our case\n1.00 would represent 1 inch.  Therefore 1.1 inches would be hex 'B0',\nand 1.17 inches would be hex 'B7'.  We can then represent up to 3.59\ninches with hex 'Z9'.\n:esl.\n:li.vv is vertical offset\n:sl compact.\n:li.00 = 0\"\n:li.17 = .17\" or 1/6\"\n:li.25 = .25\" or 1/4\"\n:li.33 = .33\" or 1/3\"\n:li.50 = .50\" or 1/2\"\n:li.A0 = 1\"\n:li.F0 = 1.5\"\n:li.etc\n:esl.\n:li.o is overlay\n:sl compact.\n:li.Y = yes (usually graybar in generic Formdefs)\n:li.N = no\n:esl.\n:li.d is the plex mode selected\n:sl compact.\n:li.S = simplex\n:li.D = duplex  (not available on continuous-form printers)\n:li.T = tumble  (not available on continuous-form printers)\n.kp off\n:esl.\n:esl.\n:esl.\n:p.This table lists the Form definitions for all printer types.\nThe Siemens' 2300s on the 10th floor of 101 Montgomery\nand the Siemens' 2140s in Brisbane are continuous printers and cannot\nhandle duplex printing.  The 3820/3816 printers are cut-sheet which\nhandle duplex printing.\n:rdef id=formdf cwidths='1i .55i .55i 1i 1i 1i 1i'.\n:table refid=formdf.\n:row.\n:c.Name\n:c.Across\n:c.Down\n:c.Direction\n:c.Overlay\n:c.Duplex\n:c.Printer Type\n:row.\n:c.F10000NS*\n:c.0\n:c.0\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10005NS\n:c.0\n:c..05\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10017NS\n:c.0\n:c..17\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10050NS*\n:c.0\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10067NS\n:c.0\n:c..67\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:c.F100A0NS*\n:c.0\n:c.1\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F100E0NS\n:c.0\n:c.1.4\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F100F0NS\n:c.0\n:c.1.5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F102B0NS\n:c..02\"\n:c.1.1\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F10300NS\n:c..03\"\n:c. 0\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F109G7NS\n:c..09\"\n:c.1.67\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F11010NS\n:c..10\"\n:c..10\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F11082NS\n:c..10\"\n:c..82\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F11090NS\n:c..10\"\n:c..90\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F11095NS\n:c..10\"\n:c..95\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F110A0NS\n:c..10\"\n:c.1.0\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F110C2NS\n:c..10\"\n:c.1.22\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12017NS\n:c..2\"\n:c..17\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12050NS\n:c..2\"\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12082NS\n:c..2\"\n:c..82\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12090NS\n:c..2\"\n:c..9\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12533NS\n:c..25\"\n:c..33\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F12550NS*\n:c..25\"\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F125A5NS\n:c..25\"\n:c.1.05\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F14050NS\n:c..4\"\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F14056NS\n:c..4\"\n:c..56\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F140E0NS\n:c..4\"\n:c.1.4\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F140F0NS\n:c..4\"\n:c.1.5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F15050NS*\n:c..5\"\n:c..5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F167E0NS\n:c..67\"\n:c.1.4\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F167F0NS\n:c..67\"\n:c.1.5\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F167K0NS\n:c..67\"\n:c.2\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F17550NS\n:c..75\"\n:c..50\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F180D3NS\n:c..80\"\n:c.1.33\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:row.\n:c.F180F3NS\n:c..80\"\n:c.1.53\"\n:c.Across\n:c.None\n:c.Simplex\n:c.All\n:tcap.Schwab Local FORMDEFs for all printer types.\n:etable.\n:p.*  The majority of PAGEDEFs expect to use these FORMDEFs.  The others\n are generally available for older applications to compensate for\n operator adjustments and should be avoided if possible.\n:h3.Special FORMDEFs\n:p.When the generic form definitions cannot be used, an application will\nhave a special form definition. The most common reason for a special\nform definition will be because an optical overlay or an electronic\noverlay is required.  In this case the\nname will be tied closely with the application and form identification.\nSee \"ISDPUB.SYSTEM.ID' for a list of application identifiers.\nFor example, production\njob \"PRDPANSP\" uses a SYSOUT=(1,,120)...with an electronic overlay\nnamed O1DP120 will use a form definition named F1DP120.\n:p.The following is the special application naming conventions\nfor AFP printers at Schwab:\n.kp on\n:sl.\n:li.F1aaffff\n:li.where\n:sl.\n:li.F1 is the prefix provided by PPFA or PMF\n:li.aa is application identifier - see 'ISDPUB.SYSTEM.ID'\n:li.ffff is the electronic or flash form identifications\n:esl.\n:esl.\n.kp off\n:h2.Page Definitions\n:p.The AFP resource which formats line data and prepares pages\nfor printed output is called a page definition.  It replaces the\nold FCB plus added features.  It is\ninvoked for a specific output dataset through JCL\nor the default page definition for a specific printer will be used.\nIt includes:\n:ol.\n:li.Logical page size\n:li.Direction for printing\n:li.Carriage control positioning\n:li.Lines per inch\n:li.Print position for specific input data fields\n:li.Constant data position and definition\n:li.Font list - (Schwab keeps fonts outside of generic pagedefs)\n:li.Page segments list\n:li.Conditional processing\n:li.Fields which will be suppressed from printing\n:eol.\n:p.This section lists the page definitions available at Charles Schwab\n& Co., Inc. for various printer types.  They are broken into three\ncategories.  The first category is the IBM-supplied page definitions.\nThe naming conventions and a list of generic page definitions are\ndescribed in this section.  The third category is the Special page\ndefinitions.  The name will be tied closely with the application and\nform identification, unless a generic form definition can be used.\n:h3.IBM-Supplied PAGEDEFs\n:p.Complete details and a current list can be found in either IBM's\nPrint Management Facility User's Guide and Reference #SH35-0059 or Print\nServices Facility/MVS Application Programming Guide #S544-3084.  The\n.kp on\n:h3.In-house Generic Page Definitions\n:p.The following is the naming conventions for AFP printers at Schwab:\n:sl.\n:li.P1solupm\n:li.where\n:sl.\n:li.P1 is the prefix provided by PPFA or PMF\n:li.s is finished size of physical page\n:sl compact.\n:li.I = 14.87\" X 11\" (standard impact page)\n:li.L = 8.50\" X 11\"  (standard letter page)\n:li.G = 8.5\" X 14\"   (standard legal page)\n:li.R = 17\" X 11\"   (also know as register) This will be used\n                      for 2-across 2140.\n:esl.\n:li.o is orientation\n:sl compact.\n:li.L = landscape\n:li.M = landscape rotated 90\n:li.P = portrait\n:li.Q = portrait rotated 90\n:esl.\n:li.l is lines per inch\n:sl compact.\n:li.6 = 6 lpi\n:li.8 = 8 lpi\n:li.A = 10 lpi\n:li.C = 12 lpi\n:li.S = special\n:esl.\n:li.u is the number of logical page images per page\n:sl compact.\n:li.1 = 1-up\n:li.2 = 2-up\n:li.4 = 4-up\n:esl.\n:li.p is the logical page indicator\n:sl compact.\n:li.F = assumes full page use formdef F10000NS\n:li.M = assumes 1/2\" top and bottom margin use formdef F10050NS\n:li.P = assumes a partial margin used in the formdef\n:esl.\n:li.m is the margin set within pagedef\n:sl compact.\n:li.B = bind or 3-hole punch allowance\n:li.C = center page\n:li.N = No margin set\n:li.T = top margin set\n:li.1 = 1 line down\n:li.2 = between 1 and 2 lines down\n:esl.\n:esl.\n:esl.\n.kp off\n:p.Note that the page definitions are somewhat printer specific.  This\nis due to printer specific attributes.  The continuous form printers,\nsuch as the Siemens' 2300 and 2140 (which look like an IBM 3800)\ntype printers have an origin in the top\nleft corner.  The other AFP printers in house are cut-sheet and the\ndefault forms are different orientations from the continuous printers.\nTherefore the page definitions are listed\nby printer type and valid formids.\n:p.This table lists the Page definitions for all printer types,\nwhich include the Siemens' 2300s on the 10th floor of 101 Montgomery\nand the Siemens' 2140s in Brisbane.  The form size and page size are\nin inches.\n.ll 8i\n.bf billy\n:rdef id=pagedf\n      cwidths='.8i .5i .5i .55i .4i .55i .55i .5i .6i .5i .8i .5i .55i'.\n:table refid=pagedf.\n:row.\n:c.Name\n:c.Form Size\n:c.Page Size\n:c.Direction\n:c.LPI\n:c.Count\n:c.Across\n:c.Down\n:c.Channel #\n:c.Font size\n:c.FormDef\n:c.Form ids\n:c.Printer Type\n:row.\n:c.P1GP61PN\n:c.8.5\" X 14\"\n:c.8.5\" X 13.83\"\n:c.Across\n:c. 6\n:c. 82   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 10cpi\n:c.F10000NS\n:c.110 140\n:c.2140 2300\n:row.\n:c.P1LL61FN\n:c.10\" X 8.5\"\n:c.10\" X 8.5\"\n:c.Across\n:c. 6\n:c. 50   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 10cpi\n:c.F10000NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LL61MN\n:c.10\" X 8.5\"\n:c.10\" X 7.5\"\n:c.Across\n:c. 6\n:c. 45\n:c. margin\n:c. top\n:c. 1\n:c. 10cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LL81MN\n:c.10\" X 8.5\"\n:c.10\" X 7.5\"\n:c.Across\n:c. 8\n:c. 59   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 12cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LLC1MN\n:c.10\" X 8.5\"\n:c.10\" X 7.6\"\n:c.Across\n:c. 12\n:c. 89   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 15cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LP61MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 6\n:c. 59   1\n:c. margin\n:c. top\n:c. 1     12\n:c. 10cpi\n:c.F10050NS\n:c.264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 79   1\n:c. margin\n:c. top\n:c. 1     12\n:c. 12cpi\n:c.F10050NS\n:c.264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81M1\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 78   1\n:c. margin\n:c. .13\"\n:c. 1     12\n:c. 12cpi\n:c.F10050NS\n:c.CONS 264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81M2\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 79   1\n:c. margin\n:c. .09\"\n:c. 1    12\n:c. 12cpi\n:c.F10050NS\n:c.STD 179 264 280 281\n:c.2140 2300 3816 3820\n:row.\n:c.P1LPC1MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 12\n:c. 119  1\n:c. margin\n:c. top\n:c. 1    12\n:c. 15cpi\n:c.F10050NS\n:c.STD 179 263 280 281\n:c.2140 2300 3816 3820\n:row.\n:c.P1LQC2PB\n:c.8.5\" X 11\"\n:c.7.85\" X 11\"\n:c.Down\n:c. 12\n:c. 60    60\n:c. 0\"    0\"\n:c. .25\" 5.75\"\n:c. 1     1\n:c. 17cpi\n:c.F10065NS\n:c.STD\n:c.2140 2300\n:tcap.Schwab Local PAGEDEFs for all printer types.\n:etable.\n.ll 7i\n.pf\n:h3.Special PAGEDEFs\n:p.When the generic page definitions cannot be used, an application will\nhave a special page definition. There are many reasons for a special\npage definition. See the handbook \"Publishing Tools and Accessories\",\navailable in the Technical Services Library, for a discussion of reasons\nfor special page definitions.  In any  case the name will be tied\nclosely with the application.  See \"ISDPUB.SYSTEM.ID' for a list of\napplication identifiers.  The name will refer to the job name and OUTPUT\nstatement number in the job.  For example, production job \"PRCCDSP3\" has\na SYSOUT=(4,,CUSF) using OUTPUT card OUT2 in the PROC.  It will use a\npage definition named P1CCDSP2.  When a duplicate RMDS sysout statement\nexists, it would use the original page definition in this case P1CCDSP2.\n:p.The following is the naming convention for AFP printers at Schwab:\n.kp on\n:sl.\n:li.P1aajjjn\n:li.where\n:sl.\n:li.P1 is the prefix provided by PPFA or PMF\n:li.aa is the application identifier - see 'ISDPUB.SYSTEM.ID'\n:li.jjj is the job identifier\n:li.n is the sysout number within the job.\n:esl.\n:esl.\n.kp off\n:h2.New Printer Resources\n:p.IBM-supplied and generic resources will be maintained by the\nPrinting Technology Group.  Special resources, such as forms definitions\nand page definitions, are the responsibility of the user.  They can\nbe generated and tested in a user's private library through use of the\nUSERLIB statement in their JCL.  During testing the user must have the\nprint operator specify any job setup parameters required at the printer.\nOnce testing is complete the user must pass job setup information and\nresource information to the Printing Technology Group.  The resource\nwill be placed in the appropriate library by the Printing Technology\nGroup.\n:egdoc.\n./ ADD NAME=PRINTST2                               13AUG93 18.34.28\n.dh 1 spbf .25i\n.df billy  font X0gt18\n.pm .5i\n.*l 8i\n.*l 7i\n:gdoc.\n:frontm.\n:titlep.\n:title.Publishing Tools and Accessories\n:date.\n:Author.Lauretta Ongaro Zerga\n:address.\n:aline.Printer Technology Group\n:aline.Technical Services\n:aline.Charles Schwab & Co., Inc.\n:aline.101 Montgomery Street\n:aline.San Francisco, CA  94105\n:eaddress.\n:etitlep.\n:toc.\n:body.\n.fo on\n:h1.Summary of Mainframe Printing Methods at Schwab\n:h2.Overview\n:p.\nThere are three primary printing methods from the host system at\nCharles Schwab & Co., INC.  Printers are\neither defined as Advanced Function Printers or CICS transaction\nprinters or VTAM print services printers.  A description of each follows\nthis section.\n:h3.Advanced Function Printing\n:p.\nAdvanced Function Printing is IBM's suggested printing platform\nsupporting from the desktop to high-speed production\nprinters, fan-fold and cut-sheet form capabilities.\nIt is an architecture which is SAA compliant. The software product line\nhandles grahics, images, signatures, logos, proportional fonts,\nelectronic forms, and text.\n:p.\nSchwab has selected this as a standard for mainframe printing.\nHigh volume print\nrequirements for in-house reports printed on the 10th floor of 101\nMontgomery and customer statements/correspondence printed in Brisbane\nwill use AFP functionality.  Currently many in-house documents printed\non the 3820/3816 type printers use DCF/SCRIPT which is part of the\nAFP product line.\n:p.\nA part of AFP printing allows for the off-loading of some documents to\nother printers in PostScript format on PC-attached or LAN attached\nprinters.  This is not formally supported within Schwab at this date.\n:h3.CICS Attached Printers\nThis is the historical method of printing transactions, wires, etc at\nthe branches within Schwab.  The original driver is an in-house grown\nCICS transaction called \"MESS\".\n:h3.VTAM Print Services\n:p.VPS is a product of Levi, Ray and Shoup, INC.  It allows definition\nof any printer which can connect to a 3270 controller cluster to the\nmainframe.  It interfaces with JES to package and pass printed output\nthrough VTAM.  This is a method to connect pc-attached printers,\nbranch printers, etc.\n:h1.Advanced Function Printing\n:h2.JCL\n.kp on\n:p.Previous to AFP many jobs called FCBs, Character sets, and/or\noptical forms,\nto define how a particular job would print.  The format might be:\n:sl.\n:li.//PRINT DD SYSOUT=(A,,0179),\n:li.//        FCB=8STD,\n:li.//        CHARS=(GT10,GT12,GT15,GB10),\n:li.//        FLASH=FORM,\n:li.//        DCB=(LRECL=133,RECFM=FBA,BLKSIZE=3120,OPTCD=J)\n:esl.\n.kp off\n.kp on\n:p.Many  resources are incorporated into two AFP resources.\nThe first is the FORMDEF and the second is the PAGEDEF (see the next\nsection for further description). The JCL should look like:\n:sl compact.\n:li.//OUT1 OUTPUT  CLASS=c,\n:li.//             CHARS=(chr1,chr2,chr3,chr4),\n:li.//             DEST=dest,\n:li.//             FORM=form,\n:li.//             FORMDEF=fdef,\n:li.//             PAGEDEF=pdef,\n:li.//             PIMSG=YES,\n:li.//             TRC=YES,\n:li.//             USERLIB=(user.lib)\n:li.//PRINT DD SYSOUT=(c,,form),\n:li.//             OUTPUT=*.OUT1\n:li.\n.kp off\n.kp on\n:li.For example:\n:li.//OUT1 OUTPUT  CLASS=4,\n:li.//             CHARS=(GT10,GT12,GT15,GB10),\n:li.//             DEST=CS01,\n:li.//             FORM=179,\n:li.//             FORMDEF=0050NS,\n:li.//             PAGEDEF=LP81MN,\n:li.//             PIMSG=YES,\n:li.//             TRC=YES\n:li.//PRINT DD SYSOUT=(4,,179),\n:li.//             OUTPUT=*.OUT1\n.kp off\n:esl.\n:h3.Optional JCL Parms\n:sl.\n:li.CHARS=\n:sl.\n:li.Specify up to 4 font names of 1 to 4 alphmeric characters. The\nfonts must reside in a library assigned to the printer or defined by\nthe User library.  This is not necessary if fonts are specified in\nthe PAGEDEF.\n:esl.\n:li.TRC=\n:sl.\n:li.Used only when more than 1 font is to be used and column 2 of the\nline data includes a table reference character.\n:esl.\n:li.USERLIB=\n:sl.\n:li.Used to specify a private library which contains resources for\nprinting.\n:esl.\n:esl.\n:h3. Hints and Helps\n:h4. CHARS\n:P. Schwab has determined to leave CHARS external to the generic\nPAGEDEFs for two reasons.  First, there was not a one for one\ncorrelation of chars to FCB used.  So to reduce the number of pagedefs\nrequired the chars parameter was left as it currently is specified in\nthe appropriate JCL.  Second, it allows for changing CHARS without\nmodifying the existing pagedef.\n:p.The limitation with this method is that only the old style line mode\nor compatibility mode fonts can be used for these pagedefs.  The\ncompatibility mode font names were four (4) characters (excluding the\nprefix). The JCL CHARS parameter allows a maximum of 4 characters.\nHowever the AFP font names are six (6) characters (excluding the\nprefix).  So as we migrate to new fonts and formatting capabilities of\nAFP, internal definition of fonts will be used. See \"Script Information\"\nin this document for additional information on fonts.\n\n.im destids\n\n.im formdefs\n\n:h2.Page Definitions\n:p.The AFP resource which formats line data and prepares pages\nfor printed output is called a page definition.  It replaces the\nold FCB plus added features.  It is\ninvoked for a specific output dataset through JCL\nor the default page definition for a specific printer will be used.\nIt includes:\n:ol.\n:li.Logical page size\n:li.Direction for printing\n:li.Carriage control positioning\n:li.Lines per inch\n:li.Print position for specific input data fields\n:li.Constant data position and definition\n:li.Font list - (Schwab keeps fonts outside of generic pagedefs)\n:li.Page segments list\n:li.Conditional processing\n:li.Fields which will be suppressed from printing\n:eol.\n:p.This section lists the page definitions available at Charles Schwab\n& Co., Inc. for various printer types.  They are broken into three\ncategories.  The first category is the IBM-supplied page definitions.\nThe naming conventions and a list of generic page definitions are\ndescribed in this section.  The third category is the Special page\ndefinitions.  The name will be tied closely with the application and\nform identification, unless a generic form definition can be used.\n:h3.IBM-Supplied PAGEDEFs\n:p.Complete details and a current list can be found in either IBM's\nPrint Management Facility User's Guide and Reference #SH35-0059 or Print\nServices Facility/MVS Application Programming Guide #S544-3084.  The\n.kp on\n:h3.In-house Generic Page Definitions\n:p.The following is the naming conventions for AFP printers at Schwab:\n:sl.\n:li.P1solupm\n:li.where\n:sl.\n:li.P1 is the prefix provided by PPFA or PMF\n:li.s is finished size of physical page\n:sl compact.\n:li.I = 14.87\" X 11\" (standard impact page)\n:li.L = 8.50\" X 11\"  (standard letter page)\n:li.G = 8.5\" X 14\"   (standard legal page)\n:li.R = 17\" X 11\"   (also know as register) This will be used\n                      for 2-across 2140.\n:esl.\n:li.o is orientation\n:sl compact.\n:li.L = landscape\n:li.M = landscape rotated 90\n:li.P = portrait\n:li.Q = portrait rotated 90\n:esl.\n:li.l is lines per inch\n:sl compact.\n:li.6 = 6 lpi\n:li.8 = 8 lpi\n:li.A = 10 lpi\n:li.C = 12 lpi\n:li.S = special\n:esl.\n:li.u is the number of logical page images per page\n:sl compact.\n:li.1 = 1-up\n:li.2 = 2-up\n:li.4 = 4-up\n:esl.\n:li.p is the logical page indicator\n:sl compact.\n:li.F = assumes full page use formdef F10000NS\n:li.M = assumes 1/2\" top and bottom margin use formdef F10050NS\n:li.P = assumes a partial margin used in the formdef\n:esl.\n:li.m is the margin set within pagedef\n:sl compact.\n:li.B = bind or 3-hole punch allowance\n:li.C = center page\n:li.N = No margin set\n:li.T = top margin set\n:li.1 = 1 line down\n:li.2 = between 1 and 2 lines down\n:esl.\n:esl.\n:esl.\n.kp off\n:p.Note that the page definitions are somewhat printer specific.  This\nis due to printer specific attributes.  The continuous form printers,\nsuch as the Siemens' 2300 and 2140 (which look like an IBM 3800)\ntype printers have an origin in the top\nleft corner.  The other AFP printers in house are cut-sheet and the\ndefault forms are different orientations from the continuous printers.\nTherefore the page definitions are listed\nby printer type and valid formids.\n:p.This table lists the Page definitions for all printer types,\nwhich include the Siemens' 2300s on the 10th floor of 101 Montgomery\nand the Siemens' 2140s in Brisbane.  The form size and page size are\nin inches.\n.bf billy\n:rdef id=pagedf\n      cwidths='.8i .5i .5i .55i .4i .55i .55i .5i .6i .5i .8i .5i .55i'.\n:table refid=pagedf.\n:row.\n:c.Name\n:c.Form Size\n:c.Page Size\n:c.Direction\n:c.LPI\n:c.Count\n:c.Across\n:c.Down\n:c.Channel #\n:c.Font size\n:c.FormDef\n:c.Form ids\n:c.Printer Type\n:row.\n:c.P1GP61PN\n:c.8.5\" X 14\"\n:c.8.5\" X 13.83\"\n:c.Across\n:c. 6\n:c. 82   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 10cpi\n:c.F10000NS\n:c.110 140\n:c.2140 2300\n:row.\n:c.P1LL61FN\n:c.10\" X 8.5\"\n:c.10\" X 8.5\"\n:c.Across\n:c. 6\n:c. 50   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 10cpi\n:c.F10000NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LL61MN\n:c.10\" X 8.5\"\n:c.10\" X 7.5\"\n:c.Across\n:c. 6\n:c. 45\n:c. margin\n:c. top\n:c. 1\n:c. 10cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LL81MN\n:c.10\" X 8.5\"\n:c.10\" X 7.5\"\n:c.Across\n:c. 8\n:c. 59   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 12cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LLC1MN\n:c.10\" X 8.5\"\n:c.10\" X 7.6\"\n:c.Across\n:c. 12\n:c. 89   1\n:c. margin\n:c. top\n:c. 1    12\n:c. 15cpi\n:c.F10050NS\n:c.STD\n:c.2140 2300\n:row.\n:c.P1LP61MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 6\n:c. 59   1\n:c. margin\n:c. top\n:c. 1     12\n:c. 10cpi\n:c.F10050NS\n:c.264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 79   1\n:c. margin\n:c. top\n:c. 1     12\n:c. 12cpi\n:c.F10050NS\n:c.264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81M1\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 78   1\n:c. margin\n:c. .13\"\n:c. 1     12\n:c. 12cpi\n:c.F10050NS\n:c.CONS 264 280 281 284 179\n:c.2140 2300 3816 3820\n:row.\n:c.P1LP81M2\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 8\n:c. 79   1\n:c. margin\n:c. .09\"\n:c. 1    12\n:c. 12cpi\n:c.F10050NS\n:c.STD 179 264 280 281\n:c.2140 2300 3816 3820\n:row.\n:c.P1LPC1MN\n:c.8.5\" X 11\"\n:c.8.5\" X 10\"\n:c.Across\n:c. 12\n:c. 119  1\n:c. margin\n:c. top\n:c. 1    12\n:c. 15cpi\n:c.F10050NS\n:c.STD 179 263 280 281\n:c.2140 2300 3816 3820\n:row.\n:c.P1LQC2PB\n:c.8.5\" X 11\"\n:c.7.85\" X 11\"\n:c.Down\n:c. 12\n:c. 60    60\n:c. 0\"    0\"\n:c. .25\" 5.75\"\n:c. 1     1\n:c. 17cpi\n:c.F10065NS\n:c.STD\n:c.2140 2300\n:tcap.Schwab Local PAGEDEFs for all printer types.\n:etable.\n.pf\n:h3.Special PAGEDEFs\n:p.When the generic page definitions cannot be used, an application will\nhave a special page definition. There are many reasons for a special\npage definition. See the handbook \"Publishing Tools and Accessories\",\navailable in the Technical Services Library, for a discussion of reasons\nfor special page definitions.  In any  case the name will be tied\nclosely with the application.  See \"ISDPUB.SYSTEM.ID' for a list of\napplication identifiers.  The name will refer to the job name and OUTPUT\nstatement number in the job.  For example, production job \"PRCCDSP3\" has\na SYSOUT=(4,,CUSF) using OUTPUT card OUT2 in the PROC.  It will use a\npage definition named P1CCDSP2.  When a duplicate RMDS sysout statement\nexists, it would use the original page definition in this case P1CCDSP2.\n:p.The following is the naming convention for AFP printers at Schwab:\n.kp on\n:sl.\n:li.P1aajjjn\n:li.where\n:sl.\n:li.P1 is the prefix provided by PPFA or PMF\n:li.aa is the application identifier - see 'ISDPUB.SYSTEM.ID'\n:li.jjj is the job identifier\n:li.n is the sysout number within the job.\n:esl.\n:esl.\n.kp off\n:h2.New Printer Resources\n:p.IBM-supplied and generic resources will be maintained by the\nPrinting Technology Group.  Special resources, such as forms definitions\nand page definitions, are the responsibility of the user.  They can\nbe generated and tested in a user's private library through use of the\nUSERLIB statement in their JCL.  During testing the user must have the\nprint operator specify any job setup parameters required at the printer.\nOnce testing is complete the user must pass job setup information and\nresource information to the Printing Technology Group.  The resource\nwill be placed in the appropriate library by the Printing Technology\nGroup.\n:h4. A Note About Orientation\n:p.New users to AFP are often confused about the terminology used to\ndescribe page orientation.  The following diagram should assist.\n:rdef id=orient\n      cwidths='3i 3i'.\n:table refid=orient.\n:row.\n:c.Landscape 0 degree (Direction across)\n.si s1pagel0 inline\n:c.Landscape 90 degree (Direction down)\n.si s1pagel9 inline\n:row.\n:c.Portrait 0 degree (Direction across)\n.si s1pagep0 inline\n:c.Portrait 90 degree (Direction down)\n.si s1pagep9 inline\n:tcap.Page orientation samples for continuous form printers.\n:etable.\n:p.It is sometimes easier to set a printer for one generic form and\nreorient various documents in different ways for different results.\nThis reduces operator intervention thus improving printout turnaround.\n:h3.In-house Forms\n:p.The FORM= and/or SYSOUT parameters should specify the physical form\nid for the operator should mount at print time.  It should NOT include\nthe version number as part of the form or one of two things will happen.\nEither all JCL will need to be changed each time the version number\nchanges or the JCL will all have different form numbers actually calling\nthe same physical form.  In the second case, operator intervention will\nbe required for each different form even though it is really the same\nphysical form.  For example previously JCL included:\n:sl compact.\n:li.SYSOUT=(4,,0179)\n:li.SYSOUT=(4,,1792)\n:li.SYSOUT=(4,,1793)\n:li.SYSOUT=(4,,1794)\n:li.\n:li.These should change to:\n:li.\n:li.SYSOUT=(4,,179)\n:esl.\n.kp off\nPhysically the operator mounted the same form, but intervention was\nrequired since the system treated them as the different forms.  The\nresult to the user is turnaround time for printout is longer.\n:p.Some examples of valid forms:\n:sl.\n:li.179     264     280     281     284\n:li.CONS    DIVS\n:esl.\n.im scrfonts\n:h3.FONTLIB Script Command / SCRPTFNT DD\n:p.The FONTLIB script command defines the font library to be used when\nformatting documents for AFP or Postscript printers.  The format is\nas follows:\n:sl.\n:li.FONTLIB('SYS1.FONTLIB') ~This will define the IBM  fonts for 3800\n:li.FONTLIB('SYS0.FONTLIB') ~This will define the custom fonts for 3800\n:li.FONTLIB('SYS1.FONTLIBB') ~This will define the IBM fonts for 3820\n:li.FONTLIB('SYS0.FONTLIBB')~This will define the custom fonts for 3820\n:p.Note:  The 3800 type fonts are unbounded box fonts.  The 3820 and\nother cut-sheet printers use bounded box fonts.  The actual characters\nwhich are loaded into the printer are different, so they are stored\nin different libraries.  Both sets of libraries should contain the same\nfont styles, so you can print on either printer type without changing\nyour application.  The section in this document, \"Other Fonts\",\nhas examples\nof methods to define fonts generically for printing on either printer\ntype.\n:esl.\n:p.An alternative to using the FONTLIB Script command is to define a\nSCRPTFNT DD statement.  This is useful when you need to access fonts\nfrom multiple libraries.  The statement would look like:\n.sp 1\n.fo off\n.bf gt12\n~From Batch:  //SCRPTFNT DD DSN=SYS0.FONTLIB,DISP=SHR\n~             //         DD DSN=SYS1.FONTLIB,DISP=SHR\n.sp 1\n~From TSO:   ALLOC F(SCRPTFNT) DA('SYS0.FONTLIBB' +\n~                                 'SYS1.FONTLIBB') SHR REUS\n.pf\n.*  This is the SCRIPT source for the document on pagesegments\n.*\n.*  There are some user defined GML tags in this document.\n.*  In order to get this document to format correctly you need\n.*  fill in on the SCRIPT FINAL OPTIONS screen as follows:\n.*\n.*\n:h2.Page Segments\n:h3.Some Basic information about PAGE SEGMENTS\n.fo on\n:p.\nIn order to use the different Page Segments in Script, there are\nsome Script control words you will need to know.\nPage Segments can be logos, signatures or any predefined data for a\npage.\nThe \".si\" control words can be used in other ways than\ndescribed in this document, however if used as shown, the\nresults will be correct.\n:dl tsize=7\n:dt..si\n:dd.This is the Segment Include control word. This control word\nis used to define the page segment.\n:edl.\n:p.\nPut the command where you want the page segment to be placed.\nexample:\n.ti ~ 05\n:p.If you are scripting a letter and wish to sign off as follows:\n.fo off\n:p.\nSincerely,\n.si s1mroe6\n:p.\nMark A. Roe, Senior Vice President\n.fo on\n:p.Then use the following commands:\n.sp 1\n~.fo off\n~&gml.p.Sincerely,\n~.si s1mroe6\n~&gml.p.Mark Roe, Senior Vice President\n~.fo on\n.fo on\n:p.If you want to include the\n.si s1csl1 nobreak\nlogo right on the line use the following commands:\n.br\n~&gml.p....include the\n~.si s1csl1 nobreak\n~logo right...\n:h3.SEGLIB Script Command / SCRPTSEG DD\n:p.The SEGLIB script command defines the Page segment library to be\nused when formatting documents for AFP printers.  The\nformat is as follows:\n:sl.\n:li.SEGLIB('SYS0.PSEGLIB') ~This will define the Schwab Page segments\nfor either the 3800 or 3820\n:esl.\n:p.An alternative to using the\nSEGLIB Script command is to define a SCRPTSEG DD statement.  This is\nuseful when you need to access fonts from multiple libraries.  The\nstatement would look like:\n.sp 1\n.fo off\n.bf gt12\n~From Batch:  //SCRPTSEG DD DSN=SYS0.PSEGLIB,DISP=SHR\n.sp 1\n~From TSO:   ALLOC F(SCRPTSEG) DA('SYS0.PSEGLIB') SHR REUS\n.pf\n.** printvps\n.*l 8i\n.*appendix\n.im af38sans\n.im af38seri\n.im amonogar\n.im apisans\n.im apiserif\n.im aschool\n.im asouveni\n:egdoc\n./ ADD NAME=PRINTVPS                               13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the section on VPS\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Created 10/13/92  LOZerga - PRTG\n.*      Documentation of writer for format setup\n.*\n.df billy type('GOTHIC' 6) codepage T1D0BASE\n:h1.VTAM Print Services (VPS)\n:p.VPS is a method to print to VTAM attached printers.  Part of VPS\nfunctionality, allows for users to obtain multiple printing formats.\nThis is done by VPS with \"exits\" which include various printer controls\nwith the user print job.  Some examples include the capability to change\nfonts, change from portrait to landscape, change from simplex printing\nto duplex printing, and more.  The flexibility a user has to format\noutput is determined by the type of printer being accessed.\n:p.Schwab has installed several \"canned\" formats for users to access.\nThis section attempts to document the various options available by\nprinter type.\n.ll 7.5i\n.bf billy\n:rdef id=pagedf\n      cwidths='* * * * * * * * * * * * '.\n:table refid=pagedf.\n:row.\n:c.Name\n:c.Form Size\n:c.Orientation\n:c.LPI\n:c.Characters / line\n:c.Lines / page\n:c.Across (Left Margin)\n:c.Down (Top Margin)\n:c.Channel #\n:c.Font size\n:c.Duplex\n:c.Printer Type\n:row.\n:c.DBOK\n:c.8.5\" X 11\"\n:c.portrait\n:c.6\n:c.85\n:c.60\n:c. .5\"\n:c. .75\"\n:c.\n:c. 12cpi\n:c.duplex\n:c.HP\n:row.\n:c.DLET\n:c.8.5\" X 11\"\n:c.portrait\n:c.6\n:c.72\n:c.54\n:c. 1\"\n:c.1.25\"\n:c.\n:c. 12cpi\n:c.duplex\n:c.HP\n:row.\n:c.D132X100\n:c.8.5\" X 11\"\n:c.portrait\n:c.10\n:c.132\n:c.100\n:c. .6\"\n:c.\n:c.\n:c. 16.66\"\n:c.duplex\n:c.HP\n:row.\n:c.DSTD\n:c.11\" X 8 1/2\"\n:c.landscape\n:c.10\n:c.132\n:c.66\n:c. .93\"\n:c. .5\"\n:c.\n:c. 15cpi\n:c.duplex\n:c.HP\n:row.\n:c.LCBR\n:c.11\" X 8 1/2\"\n:c.landscape\n:c.\n:c.106\n:c.45\n:c.\n:c.\n:c.\n:c. 10cpi*\n:c.simplex\n:c.HP LJ 500\n:row.\n:c.LCDR\n:c.11\" X 8 1/2\"\n:c.landscape\n:c.\n:c.106\n:c.45\n:c.\n:c.\n:c.\n:c. 10cpi\n:c.simplex\n:c.HP LJ 500\n:row.\n:c.LCLR\n:c.11\" X 8 1/2\"\n:c.landscape\n:c.\n:c.132\n:c.51\n:c.\n:c.\n:c.\n:c. 16.66cpi\n:c.simplex\n:c.HP LJ 500\n:row.\n:c.LLOF\n:c.11\" X 8 1/2\"\n:c.landscape\n:c.\n:c.132\n:c.66\n:c.\n:c.\n:c.\n:c. 16.66cpi\n:c.simplex\n:c.HP LJ 500\n:tcap.Schwab Local formats for all VPS printers\n:etable.\n.pf\n:p. * Requires HP-92286L Font Cartridge\n:p.To access the appropriate format the user should specify the\nname in the \"WRITER\" parameter of JCL or TSO commands.\n.fo off\nExample of JCL:\n        //SYSPRT  DD SYSOUT=(A,LCLR),DEST=U9999\n\nExample from TSO:\n       VP 'yourfile' U9999 WTR(LCLR)\n.fo on\n:p.Note:  The DEST is referencing a valid VPS printer.  It can be a\ncontroller-attached impact printer or a PC-attached laser printer.\nThe list of formats is for PC-attached printers only.\n./ ADD NAME=PSEGBKP                                13AUG93 18.34.28\n.*  This is the SCRIPT source for the document on pagesegments\n.*\n.*  There are some user defined GML tags in this document.\n.*  In order to get this document to format correctly you need\n.*  fill in on the SCRIPT FINAL OPTIONS screen as follows:\n.*\n.*\n:h2.Page Segments\n:h3.Some Basic information about PAGE SEGMENTS\n.fo on\n:p.\nIn order to use the different Page Segments in Script, there are\nsome Script control words you will need to know.\nPage Segments can be logos, signatures or any predefined data for a\npage.\nThe \".si\" control words can be used in other ways than\ndescribed in this document, however if used as shown, the\nresults will be correct.\n:dl tsize=7\n:dt..si\n:dd.This is the Segment Include control word. This control word\nis used to define the page segment.\n:edl.\n:p.\nPut the command where you want the page segment to be placed.\nexample:\n.ti ~ 05\n:p.If you are scripting a letter and wish to sign off as follows:\n.fo off\n:p.\nSincerely,\n.si s1mroe6\n:p.\nMark A. Roe, Senior Vice President\n.fo on\n:p.Then use the following commands:\n.sp 1\n~.fo off\n~&gml.p.Sincerely,\n~.si s1mroe6\n~&gml.p.Mark Roe, Senior Vice President\n~.fo on\n.fo on\n:p.NOTE:  For information on available signatures see section \"Directory\nof Signatures\".\n:p.If you want to include the\n.si s1csl1 nobreak\nlogo right on the line use the following commands:\n.br\n~&gml.p....include the\n~.si s1csl1 nobreak\n~logo right...\n:h3.SEGLIB Script Command / SCRPTSEG DD\n:p.The SEGLIB script command defines the Page segment library to be\nused when formatting documents for AFP printers.  The\nformat is as follows:\n:sl.\n:li.SEGLIB('SYS0.PSEGLIB') ~This will define the Schwab Page segments\nfor either the 3800, 3820 or 3816 type printers.\n:esl.\n:p.An alternative to using the\nSEGLIB Script command is to define a SCRPTSEG DD statement.  This is\nuseful when you need to access fonts from multiple libraries.  The\nstatement would look like:\n.sp 1\n.fo off\n.bf gt12\n~From Batch:  //SCRPTSEG DD DSN=SYS0.PSEGLIB,DISP=SHR\n.sp 1\n~From TSO:   ALLOC F(SCRPTSEG) DA('SYS0.PSEGLIB') SHR REUS\n.pf\n./ ADD NAME=SCRFOBKP                               13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the section on SCRIPT Fonts\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Originally a stand-alone document called\n.*      \"Fonts Available in Script\" by Scott R. Davis  3/19/91\n.*\n.*  Last modified 6/24/92  LOZerga - PRTG\n.*\n:gdoc.\n:h2.Script Information\n:h3.Some Basic information about FONTS\n:p.\nIn order to use the different fonts in Script, there are\nsome Script control words you will need to be familiar with.\nThese control words can be used in other ways than\ndescribed in this document, however if used as shown, the\nresults will be correct.\n:dl tsize=7\n:dt..df\n:dd.This is the Define Font control word. This control word\nis used to give Script details about the font.\n:hp3.You only need to define the font once per document. :ehp3.\nAfter it is\ndefined, use the \".bf\" command to start the font.\nSee Page 3 for some examples.\n:dt..bf\n:dd.This is the Begin Font control word.\n:dt..pf\n:dd.This is the Previous Font control word. It is used\nto switch back to the font used before the current one.\nIt can be used to go back further, but can be hard to keep\ntrack of becuase they are \"nested.\"\n:edl.\n:p.\n:h3.Important Information about Spacing\nOne thing to remember is that there are two types\nof fonts:  proportionally spaced fonts and uniformly spaced fonts.\n:ul.\n:li.When you use a\nproportional font the \"i\" takes up less width than an \"m\".\n:li.When you use a\nuniform font the \"i\" and the \"m\" both take the same amount\nof width.\n:eul.\n:p.  Uniformly spaced fonts are quite useful when making columns and\ncharts, because your terminal displays uniformly spaced characters. So,\nwhen you use a uniform font what you see on your screen is what you get\nas far as spacing is concered.  In SCRIPT you'll need to turn formatting\noff and back on to use this \"what you see is what you get font.\"  (Use\n\".fo off\" & \".fo on\")\n:p.  The use of \"tabs\" is another way to assist\nwith alignment when using either proportional or uniformly spaced fonts.\n(Use .tp command)\n:h3.GML tags to define typographical fonts\n:p.There are seven Schwab developed commands available to define\ndifferent sets of fonts in all the\navailable sizes for any AFP printer.  They are:\n:dl tsize=20\n:dt.SOUVENIR\n:dd.ITC Souvenir\n:dt.MONOGARA\n:dd.Monotype Garamond\n:dt.SCHOOL\n:dd.Century Schoolbook\n:dt.F38SANS\n:dd.Sonoran Sans Serif\n:dt.F38SERIF\n:dd.Sonoran Serif\n:dt.PISANS\n:dd.PI and Specials Sans Serif\n:dt.PISERIF\n:dd.PI and Specials Serif\n:edl.\nFor most of your needs,\nthese seven tags will suffice. They load different families of fonts.\nAll seven tags use typographical fonts which are proportionally\nspaced.\nAs a general rule of thumb,\ntry to use one font tag at a time,\nor you will slow the printer down while\nloading the fonts. One exception to the rule is the use of PISANS or\nPISERIF.\nYou may want to use either PISANS or PISERIF along with one of the other\nGML tags to enable use of special characters along with standard\nalphanumeric characters.  (See appendix for further information.)\n:p.Invoke the command at the beginning of the document.  For\nexample:\n.sk\n.fo off\n.bx left 2i\n.in2\n&gml.f38sans\n&gml.gdoc\n......the rest of the document\n.in\n.bx off\n.fo on\n:p.All of the GML tag works exactly\nthe same way.  They include Century Schoolbook, ITC Souvenir, Monotype\nGaramond, Sonoran Sans Serif, Sonoran Serif,\nPI Serif, and PI San Serif\nrespectively.  The \"PI\" fonts are also known as \"PI & Specials\" and are\navailable in 6, 8, 10 and 12 points, they include special characters\nsuch as\n.df pi12 type('PI SERIF' 12) codepage T1GPI363\n.bf pi12\n.ti @ fc # 51 $ cb\nT @ # $ W\n.sp\n.df srf18 type('SONORAN SERIF' 18) codepage T1DCDCFS\n.bf srf18\n.ti\n.fo off\nThis is \"text18\" Sonoran Serif, followed by \"pi12\" PI Serif:\n.bf pi12\n.ti @ fc # 51 $ cb\nThis is text12 PI Serif using @ # $\n.ti\n.df ssrf18 type('SONORAN SANS SERIF' 18) codepage T1DCDCFS\n.bf ssrf18\n.sp\nThis is \"text18\" Sonoran Sans Serif, followed by \"pi12\" PI San Serif.\nSee the difference?\n.df pisans12 type('PI SANS SERIF' 12) codepage T1GPI363\n.bf pisans12\n.ti @ fc # 51 $ cb\nThis is text12 PI San Serif using @ # $\n.ti\n.pf\n.pf\n.pf\n.pf\n.pf\n.fo on\n:h3.Other fonts\nThere are many other fonts available, however you will need to define\nthem in your script document to use them. The \".df\" command can be\na little intimidating. So, just use the examples below exactly\nas shown to achieve the desired effect.\nPut all of your \".df\" commands at the begining of your document and\nthen use the \".bf\" control word to start the font.  Always use the\n\".pf\" control word to return to the previous font or the default,\nwhen you have finished with the use of the current font.\n:hp3.Define each font only once per document\nwith the \".df\" control word. :ehp3.\n:p.You can explicitly define a font or \"describe\" the characteristics\nof the font you wish to use.  If you want to name the precise font\nyou wish to use then use the \"FONT\" subparameter of the \".df\" command.\nIf you want to be able to print on any printer and have the closest\nmatch available use the \"TYPE\" subparameter of the \".df\" command.\n:hp3.Further information on Fonts can be found in IBM manual\n\"About Type:  IBM's Technical Reference for 240-pel Digitized Type\"\nnumber #S544-3516. :ehp3.\n:p.IBM has supplied fonts for the 3800-type (Siemens 2300/2140)\nprinters and 3820-type printers in different libraries.  All fonts are\nthe same however the prefix is different for the two printer types.\nWhen using the \".df\" for the 3800-type printers use \"X1\" that is\n\".df sr12 font x1sr12\".  The 3820-type printers use \"X0\" prefix, that\nis \".df sr12 font x0sr12\"\n:p.The following examples are all using the\ntype parameter so it doesn't matter whether you print on 3820 type\nprinters or on the 10th floor of 101 Montgomery or in Brisbane.\n.kp on\n:h4.Some Uniformly spaced fonts\n.sp\n.bx 1 48 90\n.ti ~ 05\n.tp 2 49\n~Script Commands~Result\n.bx\n.df text8 type('SONORAN SERIF' 8) codepage T1DCDCFS\n.bf text8\n~.df sr12 type('SCRIPT' 9) codepage T1D0BASE\n.df sr12 type('SCRIPT' 9) codepage T1D0BASE\n.bf sr12\n.ct ~This is Script 12 pitch.\n.br\n.pf\n~.bf sr12\n.bx\n~.df gt12 type('GOTHIC' 9) codepage T1D0BASE\n.df gt12 type('GOTHIC' 9) codepage T1D0BASE\n.bf gt12\n.ct ~This is Gothic Text 12 pitch.\n.br\n.pf\n~.bf gt12\n.bx\n~.df gt15 type('GOTHIC' 8) codepage T1D0BASE\n.df gt15 type('GOTHIC' 8) codepage T1D0BASE\n.bf gt15\n.ct ~This is Gothic Text 15 pitch.\n.br\n.pf\n~.bf gt15\n.bx\n~.df gt18 type('GOTHIC' 6) codepage T1D0BASE\n.df gt18 type('GOTHIC' 6) codepage T1D0BASE\n.bf gt18\n.ct ~This is Gothic Text 18 pitch.\n.br\n.pf\n~.bf gt18\n.bx\n~.df gt24 type('GOTHIC' 4) codepage T1D0BASE\n.df gt24 type('GOTHIC' 4) codepage T1D0BASE\n.bf gt24\n.ct ~This is Gothic Text 24 pitch. Tiny, huh?\n.br\n.pf\n~.bf gt24\n.bx\n~.df gb10 type('GOTHIC' 10 bold) codepage T1D0BASE\n.df gb10 type('GOTHIC' 10 bold) codepage T1D0BASE\n.bf gb10\n.ct ~This is Gothic\n.br\n~~Bold 10 pitch\n.pf\n~.bf gb10\n.bx\n~.df gi12 type('GOTHIC' 9 italic) codepage T1D0BASE\n.df gi12 type('GOTHIC' 9 italic) codepage T1D0BASE\n.bf gi12\n.ct ~This is Gothic Italic 12 pitch\n.br\n.pf\n~.bf gi12\n.bx\n~.df gr10 type('GOTHIC' 10 reverse) codepage T1D0BASE\n.df gr10 type('GOTHIC' 10 reverse) codepage T1D0BASE\n.bf gr10\n.ct ~This is Gothic\n.br\n~~Reverse 10 pitch\n.pf\n~.bf gr10\n.bx off\n.sk\n.kp off\n.kp on\n:h4.Some proportionally spaced fonts:\n.sk\n.bx 1 48 90\n.ti ~ 05\n.tp 2 49\n~Script Commands~Result\n.bf text8\n.bx\n~.df sd20 type('SONORAN DISPLAY' 20) codepage T1GE0200\n.df sd20 type('SONORAN DISPLAY' 20) codepage T1GE0200\n.bf sd20\n.ct ~~This is Sonoran\n.br\n~~~Display 20 point\n.pf\n~.bf sd20\n.bx\n~.df sd36 type('SONORAN DISPLAY' 36) codepage T1GE0200\n.df sd36 type('SONORAN DISPLAY' 36) codepage T1GE0200\n.bf sd36\n.ct ~This is\n.br\n ~~~Sonoran\n.br\n ~~~Display\n.br\n ~~~36 point\n.pf\n~.bf sd36\n.bx off\n.sk\n.kp off\n./ ADD NAME=SCRFONTS                               13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the section on SCRIPT Fonts\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Originally a stand-alone document called\n.*      \"Fonts Available in Script\" by Scott R. Davis  3/19/91\n.*\n.*  Last modified 10/13/92  LOZerga - PRTG\n.*  Documented use of copymark, trademark and register mark\n.*\n.*\n.*  Last modified 6/24/92  LOZerga - PRTG\n.*\n:gdoc.\n:h2.Script Information\n:h3.Some Basic information about FONTS\n:p.There are some Script control words you will need to be familiar with\nin order to use the different fonts in Script. The control words can be\nused in other ways than described in this document, however if used as\nshown, the results will be correct.\n:dl tsize=7.\n:dt..df\n:dd.This is the Define Font control word. This control word\nis used to give Script details about the font.\n:hp3.You only need to define the font once per document. :ehp3.\nAfter it is\ndefined, use the \".bf\" command to start the font.\nSee the section \"Special Characters\" for some examples.\n:dt..bf\n:dd.This is the Begin Font control word.\n:dt..pf\n:dd.This is the Previous Font control word. It is used\nto switch back to the font used before the current one.\nIt can be used to go back further, but can be hard to keep\ntrack of becuase they are \"nested.\"\n:edl.\n:h3.Important Information about Spacing\nOne thing to remember is that there are two types\nof fonts: proportionally spaced fonts and uniformly spaced fonts.\n:ul.\n:li.When you use a\nproportional font the \"i\" takes up less width than an \"m\".\n:li.When you use a\nuniform font the \"i\" and the \"m\" both take the same amount\nof width.\n:eul.\n:p.Uniformly spaced fonts are quite useful when making columns and\ncharts, because your terminal displays uniformly spaced characters. So,\nwhen you use a uniform font what you see on your screen is what you get\nas far as spacing is concerned. In SCRIPT you'll need to turn formatting\noff and back on to use this \"what you see is what you get font.\"  (Use\n\".fo off\" and \".fo on\")\n:p.The use of \"tabs\" is another way to assist with alignment when using\neither proportional or uniformly spaced fonts.  (Use .tp command)\n:h3.GML tags to define typographical fonts\n:p.There are seven Schwab developed commands available to define\ndifferent sets of fonts in all the\navailable sizes for any AFP printer.  They are:\n:dl tsize=20\n:dt.SOUVENIR\n:dd.ITC Souvenir\n:dt.MONOGARA\n:dd.Monotype Garamond\n:dt.SCHOOL\n:dd.Century Schoolbook\n:dt.F38SANS\n:dd.Sonoran Sans Serif\n:dt.F38SERIF\n:dd.Sonoran Serif\n:dt.PISANS\n:dd.PI and Specials Sans Serif\n:dt.PISERIF\n:dd.PI and Specials Serif\n:edl.\n:p.For most of your needs, these seven tags will suffice. They load\ndifferent families of fonts.  All seven tags use typographical fonts\nwhich are proportionally spaced.  As a general rule of thumb, try to use\none font tag at a time, or you will slow the printer down while loading\nthe fonts. One exception to the rule is the use of PISANS or PISERIF.\nYou may want to use either PISANS or PISERIF along with one of the other\nGML tags to enable use of special characters along with standard\nalphanumeric characters.  (See appendix for further information.)\n:p.Invoke the command at the beginning of the document.  For\nexample:\n.sk\n.fo off\n.kp on\n.bx left 2i\n.in2\n&gml.f38sans\n&gml.gdoc\n......the rest of the document\n.in\n.bx off\n.kp off\n.fo on\n:p.All of the GML tag works exactly the same way.  They include Century\nSchoolbook, ITC Souvenir, Monotype Garamond, Sonoran Sans Serif, Sonoran\nSerif, PI Serif, and PI San Serif respectively.  Samples of each font\nstyle can be found in the Appendix.\n:h3.Special Characters\n:p.The \"PI\" fonts are also known as \"PI & Specials\" and are available\nin 6, 8, 10 and 12 points, they include special characters such as\n.df pi12 type('PI SERIF' 12) codepage T1GPI363\n.bf pi12\n.ti @ fc # 51 $ cb\nT @ # $ W\n.ti\n.pf\n.******************************\n.df pi12 type('PI SERIF' 12) codepage T1GPI363\n:p.Some commonly requested characters are the\n.bf pi12\n+;\u00b8\n.pf\nThe commands to achieve the special characters are:\n.sp\n.fo off\n      .df pi12 type('PI SERIF' 12) codepage T1GPI363\n      .bf pi12\n      +;\u00b8   i.e. x'4E5E9D'\n      .pf\n.fo on\n.sp\n.df srf18 type('SONORAN SERIF' 18) codepage T1DCDCFS\n.bf srf18\n.fo off\nThis is \"text18\" Sonoran Serif, followed by \"pi12\" PI Serif:\n.bf pi12\n.ti @ fc # 51 $ cb\nThis is text12 PI Serif using @ # $\n.ti\n.df ssrf18 type('SONORAN SANS SERIF' 18) codepage T1DCDCFS\n.bf ssrf18\n.sp\nThis is \"text18\" Sonoran Sans Serif, followed by \"pi12\" PI San Serif.\nSee the difference?\n.df pisans12 type('PI SANS SERIF' 12) codepage T1GPI363\n.bf pisans12\n.ti @ fc # 51 $ cb\nThis is text12 PI San Serif using @ # $\n.ti\n.pf\n.pf\n.pf\n.pf\n.fo on\n:h3.Other fonts\nThere are many other fonts available, however you will need to define\nthem in your script document to use them. The \".df\" command can be\na little intimidating. So, just use the examples below exactly\nas shown to achieve the desired effect.\nPut all of your \".df\" commands at the begining of your document and\nthen use the \".bf\" control word to start the font.  Always use the\n\".pf\" control word to return to the previous font or the default,\nwhen you have finished with the use of the current font.\n:hp3.Define each font only once per document\nwith the \".df\" control word. :ehp3.\n:p.You can explicitly define a font or \"describe\" the characteristics\nof the font you wish to use.  If you want to name the precise font\nyou wish to use then use the \"FONT\" subparameter of the \".df\" command.\nIf you want to be able to print on any printer and have the closest\nmatch available use the \"TYPE\" subparameter of the \".df\" command.\n:hp3.Further information on Fonts can be found in IBM manual\n\"About Type:  IBM's Technical Reference for 240-pel Digitized Type\"\nnumber #S544-3516. :ehp3.\n:p.IBM has supplied fonts for the 3800-type (Siemens 2300/2140)\nprinters and 3820-type printers in different libraries.  All fonts are\nthe same however the prefix is different for the two printer types.\nWhen using the \".df\" for the 3800-type printers use \"X1\" that is\n\".df sr12 font x1sr12\".  The 3820-type printers use \"X0\" prefix, that\nis \".df sr12 font x0sr12\"\n:p.The following examples are all using the \"TYPE\" parameter so it\ndoesn't matter whether you print on 3820 type printers or on the 10th\nfloor of 101 Montgomery or in Brisbane.\n.kp on\n:h4.Some Uniformly spaced fonts\n.sp\n.bx 1 48 90\n.ti ~ 05\n.tp 2 49\n~Script Commands~Result\n.bx\n.df text8 type('SONORAN SERIF' 8) codepage T1DCDCFS\n.bf text8\n~.df sr12 type('SCRIPT' 9) codepage T1D0BASE\n.df sr12 type('SCRIPT' 9) codepage T1D0BASE\n.bf sr12\n.ct ~This is Script 12 pitch.\n.br\n.pf\n~.bf sr12\n.bx\n~.df gt12 type('GOTHIC' 9) codepage T1D0BASE\n.df gt12 type('GOTHIC' 9) codepage T1D0BASE\n.bf gt12\n.ct ~This is Gothic Text 12 pitch.\n.br\n.pf\n~.bf gt12\n.bx\n~.df gt15 type('GOTHIC' 8) codepage T1D0BASE\n.df gt15 type('GOTHIC' 8) codepage T1D0BASE\n.bf gt15\n.ct ~This is Gothic Text 15 pitch.\n.br\n.pf\n~.bf gt15\n.bx\n~.df gt18 type('GOTHIC' 6) codepage T1D0BASE\n.df gt18 type('GOTHIC' 6) codepage T1D0BASE\n.bf gt18\n.ct ~This is Gothic Text 18 pitch.\n.br\n.pf\n~.bf gt18\n.bx\n~.df gt24 type('GOTHIC' 4) codepage T1D0BASE\n.df gt24 type('GOTHIC' 4) codepage T1D0BASE\n.bf gt24\n.ct ~This is Gothic Text 24 pitch. Tiny, huh?\n.br\n.pf\n~.bf gt24\n.bx\n~.df gb10 type('GOTHIC' 10 bold) codepage T1D0BASE\n.df gb10 type('GOTHIC' 10 bold) codepage T1D0BASE\n.bf gb10\n.ct ~This is Gothic\n.br\n~~Bold 10 pitch\n.pf\n~.bf gb10\n.bx\n~.df gi12 type('GOTHIC' 9 italic) codepage T1D0BASE\n.df gi12 type('GOTHIC' 9 italic) codepage T1D0BASE\n.bf gi12\n.ct ~This is Gothic Italic 12 pitch\n.br\n.pf\n~.bf gi12\n.bx\n~.df gr10 type('GOTHIC' 10 reverse) codepage T1D0BASE\n.df gr10 type('GOTHIC' 10 reverse) codepage T1D0BASE\n.bf gr10\n.ct ~This is Gothic\n.br\n~~Reverse 10 pitch\n.pf\n~.bf gr10\n.bx off\n.sk\n.kp off\n.kp on\n:h4.Some proportionally spaced fonts:\n.sk\n.bx 1 48 90\n.ti ~ 05\n.tp 2 49\n~Script Commands~Result\n.bf text8\n.bx\n~.df sd20 type('SONORAN DISPLAY' 20) codepage T1GE0200\n.df sd20 type('SONORAN DISPLAY' 20) codepage T1GE0200\n.bf sd20\n.ct ~~This is Sonoran\n.br\n~~~Display 20 point\n.pf\n~.bf sd20\n.bx\n~.df sd36 type('SONORAN DISPLAY' 36) codepage T1GE0200\n.df sd36 type('SONORAN DISPLAY' 36) codepage T1GE0200\n.bf sd36\n.ct ~This is\n.br\n ~~~Sonoran\n.br\n ~~~Display\n.br\n ~~~36 point\n.pf\n~.bf sd36\n.bx off\n.sk\n.kp off\n./ ADD NAME=SCRPSEG                                13AUG93 18.34.28\n.*  This is the SCRIPT source for the document on pagesegments\n.*\n.*  There are some user defined GML tags in this document.\n.*  In order to get this document to format correctly you need\n.*  fill in on the SCRIPT FINAL OPTIONS screen as follows:\n.*\n.*\n:h2.Page Segments\n:h3.Some Basic information about PAGE SEGMENTS\n.fo on\n:p.\nIn order to use the different Page Segments in Script, there are\nsome Script control words you will need to know.\nPage Segments can be logos, signatures or any predefined data for a\npage.\nThe \".si\" control words can be used in other ways than\ndescribed in this document, however if used as shown, the\nresults will be correct.\n:dl tsize=7\n:dt..si\n:dd.This is the Segment Include control word. This control word\nis used to define the page segment.\n:edl.\n:p.\nPut the command where you want the page segment to be placed.\nexample:\n.ti ~ 05\n:p.If you are scripting a letter and wish to sign off as follows:\n.fo off\n:p.\nSincerely,\n.si s1mroe6\n:p.\nMark A. Roe, Senior Vice President\n.fo on\n:p.Then use the following commands:\n.sp 1\n~.fo off\n~&gml.p.Sincerely,\n~.si s1mroe6\n~&gml.p.Mark Roe, Senior Vice President\n~.fo on\n.fo on\n:p.NOTE:  For information on available signatures see section \"Directory\nof Signatures\".\n:p.If you want to include the\n.si s1csl1 nobreak\nlogo right on the line use the following commands:\n.br\n~&gml.p....include the\n~.si s1csl1 nobreak\n~logo right...\n:h3.SEGLIB Script Command / SCRPTSEG DD\n:p.The SEGLIB script command defines the Page segment library to be\nused when formatting documents for AFP printers.  The\nformat is as follows:\n:sl.\n:li.SEGLIB('SYS0.PSEGLIB') ~This will define the Schwab Page segments\nfor either the 3800, 3820 or 3816 type printers.\n:esl.\n:p.An alternative to using the\nSEGLIB Script command is to define a SCRPTSEG DD statement.  This is\nuseful when you need to access fonts from multiple libraries.  The\nstatement would look like:\n.sp 1\n.fo off\n.bf gt12\n~From Batch:  //SCRPTSEG DD DSN=SYS0.PSEGLIB,DISP=SHR\n.sp 1\n~From TSO:   ALLOC F(SCRPTSEG) DA('SYS0.PSEGLIB') SHR REUS\n.pf\n./ ADD NAME=SIGSTDS                                13AUG93 18.34.28\n:h2.Page Segment Naming Guidelines for Signatures\n:h3.Overview\n:p.Naming standards for Page segment signatures as follows:\n:p.S1aaaxxx where\n:sl.\n:li.S1  Reserved for AFP page segment identification\n:li.aaa would be title designater:\n:sl.\n:li. DM = direct market\n:li.EVP = Executive Vice President\n:li.ISS = Investment Service Specialist\n:li.MGR = Branch manager or other manager\n:li.SVP = Senior Vice President\n:li. VP = Vice President\n:esl.\n:li.xxx use initials of person except in the case of branch\nmanagers, use wire code.\n:p.Wire codes are used for branch managers to reduce application\nchange requirements.\n:esl.\n:p.**NOTE**  Any signatures for executives above EVP should be listed as\nS1bxxxxx, where b = 1st initial followed by, xxxxx = 1st five characters\nof the last name.\n:h3.Directory of Signatures\n:h4.Direct Market (DM)\n:rdef id=sigtbl cwidths='* *'.\n:table column refid=sigtbl.\n:row.\n:c.Page Segment\n:c.Name\n:row.\n:c.s1dmkt\n:c.Kenneth Tai\n:etable.\n:h4.Executives\n:p.The following executives are above EVP and use their name exlusively\nfor page segment names.\n:table column refid=sigtbl.\n:row.\n:c.Page Segment\n:c.Name\n:row.\n:c.s1dpottr\n:c.David Pottruck, President, The Charles Schwab Corporation\nCEO & Pres, Charles Schwab & Co., Inc.\n:row.\n:c.s1cschwa\n:c.Charles Schwab, Chairman of the board & CEO, The Charles Schwab\nCorporation.\n:etable.\n:h4.Executive Vice Presidents\n:p.Currently none of the executive vice presidents' signatures are\navailable for printing.\n:h4.Investment Service Specialists\n:table column refid=sigtbl.\n:row.\n:c.Page Segment\n:c.Name\n:row.\n:c.s1isslb\n:c.Laura S. Brown\n:row.\n:c.s1issjc\n:c.John Cavanaugh\n:row.\n:c.s1isstf\n:c.Thomas Flynn\n:row.\n:c.s1issrg\n:c.Rod Grantham\n:row.\n:c.s1issmm\n:c.Michael R. McNamara\n:row.\n:c.s1issbs\n:c.Bill Simmons\n:row.\n:c.s1issjs\n:c.John N. Sturtevant\n:etable.\n:h4.Branch and other Managers\n:p.Branch managers use the wire code instead of initials for\nidentification.  This reduces application changes when a branch manager\nchanges, only the page segment needs to be replaced with the new\nsignature.  The application will call the same page segment name, but\nget the new signature.\n:rdef id=sigtbl2 cwidths='* * *'.\n:table column refid=sigtbl2.\n:row.\n:c.Page Segment\n:c.Name\n:c.Branch Name\n:row.\n:c.s1mgrbp\n:c.Tammy L. Brettell\n:c.Biltmore/Phoenix\n:row.\n:c.s1mgrmn\n:c.Walter Bowman\n:c.Minneapolis, MN\n:row.\n:c.s1mgrgo\n:c.K. C. Cannon\n:c.Greensboro, NC\n:row.\n:c.s1mgrqa\n:c.Betty J. Emerick\n:c.Anchorage, AK\n:row.\n:c.s1mgrnc\n:c.Melanie Hardin\n:c.New City, NY\n:row.\n:c.s1mgras\n:c.Kathleen A. Heibein\n:c.Sarasota\n:row.\n:c.s1mgrrk\n:c.Michael Higgins\n:c.Rockefeller Center, NY\n:row.\n:c.s1mgrdy\n:c.Dennis M. Konkel\n:c.Dayton, Ohio\n:row.\n:c.s1mgrls\n:c.George E. McLean\n:c.St Paul, MN\n:row.\n:c.s1mgrar\n:c.Michael Paterchak\n:c.Arlington, VA\n:row.\n:c.s1mgrpt\n:c.Sharon Peyus\n:c.Portland, Maine\n:row.\n:c.s1mgrcs\n:c.Laura Smith\n:c.Chestnut Hill\n:etable.\n:h4.Senior Vice Presidents\n:table column refid=sigtbl.\n:row.\n:c.Page Segment\n:c.Name\n:row.\n:c.s1svped\n:c.Ethel Daly\n:row.\n:c.s1svptl\n:c.Thomas Lawrie\n:row.\n:c.s1svpmr\n:c.Mark Roe\n:etable.\n:h4.Vice Presidents\n:table column refid=sigtbl.\n:row.\n:c.Page Segment\n:c.Name\n:row.\n:c.s1vpms\n:c.Michelle Swenson\n:etable.\n./ ADD NAME=TSTMBR                                 13AUG93 18.34.28\n.*\n.*  This is the SCRIPT source for the main document outline\n.* in \"Publishing Tools and Accessories\".\n.*\n.*  Last modified 10/13/92  LOZerga - PRTG\n.*       Add im forms\n.*       Modify New Printer Resource section to document TOSS forms.\n.*\n.dh 1 spbf .25i\n.df billy type('GOTHIC' 6) codepage T1D0BASE\n.pm .5i\n.ll 7i\n:gdoc.\n:frontm.\n:titlep.\n:title.Publishing Tools and Accessories\n:date.\n:Author.Lauretta Ongaro Zerga\n:address.\n:aline.Printer Technology Group\n:aline.Technical Services\n:aline.Charles Schwab & Co., Inc.\n:aline.101 Montgomery Street\n:aline.San Francisco, CA  94105\n:eaddress.\n:etitlep.\n:toc.\n:body.\n.fo on\n.im pagedefs\n.im formdefs\n::gdoc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOURCE": {"ttr": 6409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93$?\\x00\\x93$?\\x18#\\x0bU\\x0bU\\x00\\x00\\xe6`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-31T00:00:00", "modifydate": "1993-08-31T18:23:00", "lines": 2901, "newlines": 2901, "modlines": 0, "user": "W-SMITH"}, "text": "./ ADD NAME=ADFEXIT1                               13AUG93 18.34.23\n***********************************************************************\n*                                                                     *\n*  INSTALLATION MANAGEMENT INITIALIZATION EXIT FOR TSO/E SESSION MGR. *\n*                                                                     *\n*  FUNCTION:  INITIALIZATION EXIT TO LOG LINE-MODE OUTPUT WHILE IN    *\n*             FULL-SCREEN PROGRAMS                                    *\n*                                                                     *\n*  MODULE NAME = ADFEXIT1                                             *\n*                                                                     *\n*  INPUT:                                                             *\n*                                                                     *\n*     REG 1 -  POINTER TO A LIST OF ADDRESSES OF THE FOLLOWING        *\n*              PARAMETERS:                                            *\n*                1.) USERID                                           *\n*                2.) INSTALLATION DATA                                *\n*                3.) STREAM AND OUTPUT AND LOGGING INDICATOR BIT:     *\n*                      BIT 0 - MONITOR TSO/E INPUT STREAM             *\n*                      BIT 1 - MONITOR TSO/E OUTPUT STREAM            *\n*                      BIT 2 - MONITOR SESSION MANAGER INPUT STREAM   *\n*                      BIT 3 - MONITOR SESSION MANAGER OUTPUT STREAM  *\n*                      BIT 4 - MONITOR MSG OUTPUT STREAM              *\n*                      BIT 5 - TURN ON LOGGING OF LINE MODE OUTPUT    *\n*                              WHILE IN FULL-SCREEN PROGRAMS          *\n*     REG 14 - RETURN ADDRESS TO SESSION MANAGER MAINLINE             *\n*     REG 15 - ENTRY POINT ADDRESS                                    *\n*                                                                     *\n*  PROCESSING:                                                        *\n*                                                                     *\n*     1.) RETRIEVE ADDRESS OF THIRD PARAMETER                         *\n*     2.) TURN ON BIT 5 TO INDICATE TO TURN ON LOGGING OF OUTPUT      *\n*     3.) RETURN TO SESSION MANAGER MAINLINE                          *\n*                                                                     *\n*  REF:  \"TSO/E VERSION 2 CUSTOMIZATION\", PART 6, SESSION MANAGER     *\n*         SC28-1872-4, CHAPTER 37, 'CUSTOMIZING SESSION MANAGER',     *\n*         PAGE 551                                                    *\n*                                                                     *\n***********************************************************************\nADFEXIT1 CSECT\n         USING *,15\n         STM   14,12,12(13)       STANDARD REGISTER SAVE AREA LINKAGE\n         L     1,8(1)             3RD PARM IS POINTER TO INDICATOR BITS\n         OI    0(1),B'00000100'   BIT 5 INDICATES TO LOG ISPF OUTPUT\n         LM    14,12,12(13)       RESTORE REGISTERS\n         BR    14                 RETURN TO SESSION MANAGER MAINLINE\n         END   ADFEXIT1\n./ ADD NAME=EAKDEFSB                               13AUG93 18.34.23\nCSPF     TITLE 'SCHWAB GDDM-CSPF HP/7475-7550 PLOTTER CONFIGURATION'\n         SPACE\n***********************************************************************\n*                                                                     *\n*                GDDM-CSPF  -  PLOTTER CONFIGURATION                  *\n*                                                                     *\n*  WARNING:  THIS JOBSTREAM MAY BE USED FOR TESTING THE PLOTTER       *\n*            CONFIGURATION AS CHANGES (NEW PLOTTERS, E.G.) ARE        *\n*            ADDED/DELETED TO/FROM THE HARDWARE ENVIRONMENT.          *\n*                                                                     *\n*  ===>      REF:  SYS4.USERMODS.CNTL(LM00043)                        *\n*  ===>      REF:  SYS1.SCHWBSRC(EAKDEFSB)                            *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*                CONFIGURATION CHANGE AND UPDATE LOG                  *\n*                -----------------------------------                  *\n*                                                                     *\n*  UPDATED 28JUN91, WILLIAM SMITH, OSVS TECHNICAL SUPPORT             *\n*  - UPDATED JCL TO CONFORM WITH DATA SET NAMING CONVENTIONS THAT     *\n*    WERE INTRODUCED WITH GDDM VERSION 2.3.0.  GDDM 2.3.0 ELIMINATES  *\n*    THE REQUIREMENT FOR GDDMTSAM; THIS RELEASE INTRODUCED SEPARATE   *\n*    TARGET AND DLIB DATA SETS FOR GDDM AND PGF.  GDDM-CSPF WILL      *\n*    NOW RESIDE IN THE GDDM AND PGF DATA SETS.                        *\n*    REF:  \"GDDM INSTALLATION AND SYSTEM MANAGEMENT FOR MVS\",         *\n*    GC33-0321-4, CHAPTER 4, PAGE 31, \"ALLOCATE DATA SETS FOR GDDM\".  *\n*                                                                     *\n*  UPDATED 17JUN91, WILLIAM SMITH, OSVS TECHNICAL SUPPORT             *\n*  - ADDED U1 AND U8 AS VALID DESTINATIONS WITH ALL DEVICE GROUPS     *\n*    ENABLED FOR TESTING PURPOSES                                     *\n*                                                                     *\n*  GENERATED 11JUN91, WILLIAM SMITH, OSVS TECHNICAL SUPPORT           *\n*  - GDDM-CSPF VERSION 1.1.0                                          *\n*  - TESTED WITH VPS/5.1.125 AND MVS/ESA 3.1.3 USING GDDM VERSION 2.2 *\n*    AND SAS VERSION 6.06                                             *\n*  - THIS PRODUCT WAS ORIGINALLY SOLD BY MAERSK DATA, A.S., DENMARK   *\n*    AS \"MD/PLOT\" (MAERSK DATA USA, INC., WILLIAM C. BEDOIT, NORTH    *\n*    AMERICA SALES MANAGER, GIRALDA FARMS, MADISON AVENUE, P.O. BOX   *\n*    883, MADISON, NJ 07940-0883, (201) 514-5151)                     *\n*                                                                     *\n*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\n*                                                                     *\n*  REF:  \"GDDM CENTRAL SLIDE AND PLOT FACILITY INSTALLATION GUIDE\",   *\n*         SC33-0553-00                                                *\n*  REF:  \"GDDM CENTRAL SLIDE AND PLOT FACILITY USER'S GUIDE\",         *\n*         SC33-0552-00                                                *\n*                                                                     *\n*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\n*                                                                     *\n*  NAMING CONVENTIONS (I.E. HOW TO READ THE MACRO OPERANDS...)        *\n*                                                                     *\n*  EAKDEV ... FIRST 2-4 BYTES ARE THE JES2 LOCAL ROUTING DESTINATION  *\n*             ID (E.G. U121, U4, U56, ETC.) -- THE USER CAN EASILY    *\n*             RELATE TO THE LOCATION WHERE THE GRAPHICS ARE PRINTED   *\n*          .. TYPICALLY THE 5TH AND 6TH BYTES DESCRIBE THE PAPER      *\n*             AND OUTPUT ORIENTATION                                  *\n*             A = A-SIZE PAPER                                        *\n*             B = B-SIZE PAPER                                        *\n*             M = MANUAL OPERATION                                    *\n*             T = TRANSPARENCY                                        *\n*             R = ROTATED 90 DEGREES (PORTRAIT MODE GRAPHICS)         *\n*          .. TYPICALLY THE 7TH BYTE IS THE OUTPUT LOCATION IF THE    *\n*             GRAPHIC IS ROTATED AND IS PLACED ON THE TOP OR BOTTOM   *\n*             (\"T\" = TOP) OR (\"B\" = BOTTOM) OF THE PAGE               *\n*                                                                     *\n*          .. THE ACTUAL DISPLACEMENT WILL VARY DEPENDING UPON THE    *\n*             LENGTH OF THE JES2 LOCAL ROUTING DESTINATION ID NAME    *\n*                                                                     *\n*  EAKGROUP . EAKGROUP MACROS DESCRIBE THE DEVICE AND THE OUTPUT      *\n*             MEDIUM (E.G. H50AN = HP7550, A-SIZE PAPER, NO-HEADER    *\n*             ON THE GENERATED GRAPHIC OUTPUT); SOME OF THE MACRO     *\n*             NAMES HAVE BEEN SHORTENED TO ACCOMODATE THE 8-BYTE,     *\n*             LENGTH RESTRICTION ON MACRO LABELS -- WHERE POSSIBLE    *\n*             THE FULL DEVICE NAME IS USED (E.G. H7550A = HP7550,     *\n*             A-SIZE PAPER)                                           *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,GEN,DATA\n         SPACE\n         EAKDEVS ,\n         EJECT\n***********************************************************************\n*                                                                     *\n*  X18D0A08:  DESTID = U1                                             *\n*  LOCATION - 101 MONTGOMERY, 5TH FLOOR, OSVS TECHNICAL SERVICES      *\n*  HP 7550 8-PEN AUTOMATIC SHEET-FEED PLOTTER                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         EAKDEV DEVLNAM=U1A,DEVPNAM=U1,DEVGRP=H7550A\n*        EAKDEV DEVLNAM=U1AR,DEVPNAM=U1,DEVGRP=H7550AR\n         EAKDEV DEVLNAM=U1B,DEVPNAM=U1,DEVGRP=H7550B\n*        EAKDEV DEVLNAM=U1BR,DEVPNAM=U1,DEVGRP=H7550BR\n*        EAKDEV DEVLNAM=U1M,DEVPNAM=U1,DEVGRP=H7550M\n         EAKDEV DEVLNAM=U1T,DEVPNAM=U1,DEVGRP=H7550T\n*        EAKDEV DEVLNAM=U1TR,DEVPNAM=U1,DEVGRP=H7550TR\n*        EAKDEV DEVLNAM=U1TRT,DEVPNAM=U1,DEVGRP=H7550TRT\n*        EAKDEV DEVLNAM=U1TRB,DEVPNAM=U1,DEVGRP=H7550TRB\n         EJECT\n***********************************************************************\n*                                                                     *\n*  X1BDAA16:  DESTID = U8                                             *\n*  LOCATION - 101 MONTGOMERY, 5TH FLOOR, OSVS TECHNICAL SERVICES      *\n*  HP 7550 8-PEN AUTOMATIC SHEET-FEED PLOTTER                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         EAKDEV DEVLNAM=U8A,DEVPNAM=U8,DEVGRP=H7550A\n*        EAKDEV DEVLNAM=U8AR,DEVPNAM=U8,DEVGRP=H7550AR\n         EAKDEV DEVLNAM=U8B,DEVPNAM=U8,DEVGRP=H7550B\n*        EAKDEV DEVLNAM=U8BR,DEVPNAM=U8,DEVGRP=H7550BR\n*        EAKDEV DEVLNAM=U8M,DEVPNAM=U8,DEVGRP=H7550M\n         EAKDEV DEVLNAM=U8T,DEVPNAM=U8,DEVGRP=H7550T\n*        EAKDEV DEVLNAM=U8TR,DEVPNAM=U8,DEVGRP=H7550TR\n*        EAKDEV DEVLNAM=U8TRT,DEVPNAM=U8,DEVGRP=H7550TRT\n*        EAKDEV DEVLNAM=U8TRB,DEVPNAM=U8,DEVGRP=H7550TRB\n         EJECT\n***********************************************************************\n*                                                                     *\n*  TERMINATE PRINTER DEFINITIONS:  PLACE AFTER LAST EAKDEV MACRO      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         EAKDEVE ,\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550A                                                    *\n*  A/A4 PAPER FOR HP 7550                                             *\n*                                                                     *\n***********************************************************************\n         SPACE\nH7550A   EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;',                                          X\n               LASTL=';PG;',                                           X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=YES,                                             X\n               PSIZE=A,                                                X\n               ROW=80,                                                 X\n               TOPMAR=0,                                               X\n               USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50AN                                                     *\n*  A/A4 PAPER FOR HP 7550                                             *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nH50AN    EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;',                                          X\n               LASTL=';PG;',                                           X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               NSPEED=                                                 X\n               PRTHDR=NO,                                              X\n               PSIZE=A,                                                X\n               ROW=80,                                                 X\n               TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550AR                                                   *\n*  A/A4 PAPER FOR HP 7550 WITH 90 DEGREE ROTATION                     *\n*                                                                     *\n***********************************************************************\n         SPACE\nH7550AR  EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;RO90;IW0,0,7600,10626;',                    X\n               LASTL=';PG;',                                           X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               NSPEED=                                                 X\n               PRTHDR=YES,                                             X\n               PSIZE=(A,300,100,7205,10100),                           X\n               ROW=80,                                                 X\n               TOPMAR=0,                                               X\n               USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50ARN                                                    *\n*  A/A4 PAPER FOR HP 7550 WITH 90 DEGREE ROTATION                     *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nH50ARN   EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;RO90;IP80,80,7500,10080;SC80,13333,80,7500;'X\n               ,                                                       X\n               LASTL=';PG;',                                           X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=NO,                                              X\n               PSIZE=(A,100,7205,300,10100),                           X\n               ROW=80,                                                 X\n               TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550ART                                                  *\n*  A/A4 PAPER FOR HP 7550 WITH 90 DEGREE ROTATION (TOP-HALF OF PAPER) *\n*                                                                     *\n***********************************************************************\n         SPACE\nH7550ART EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;RO90;IW0,0,7600,10626;',                    X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=YES,                                             X\n               PSIZE=(A,300,5100,7205,10100),                          X\n               ROW=80,                                                 X\n               TOPMAR=0,                                               X\n               USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50ARTN                                                   *\n*  A/A4 PAPER FOR HP 7550 WITH 90 DEGREE ROTATION (TOP-HALF OF PAPER) *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nH50ARTN  EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;RO90;IW0,0,7600,10626;',                    X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=NO,                                              X\n               PSIZE=(A,300,5100,7205,10100),                          X\n               ROW=80,                                                 X\n               TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550ARB                                                  *\n*  A/A4 PAPER FOR HP 7550 WITH 90 DEGREE ROTATION (BOTTOM OF PAPER)   *\n*                                                                     *\n***********************************************************************\n         SPACE\nH7550ARB EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';RO90;',                                        X\n               LASTL=';PG;',                                           X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=YES,                                             X\n               PSIZE=(A,300,100,7205,5100),                            X\n               ROW=80,                                                 X\n               TOPMAR=0,                                               X\n               USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50ARBN                                                   *\n*  A/A4 PAPER FOR HP 7550 WITH 90 DEGREE ROTATION (BOTTOM OF PAPER)   *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nH50ARBN  EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';RO90;',                                        X\n               LASTL=';PG;',                                           X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=NO,                                              X\n               PSIZE=(A,300,100,7205,5100),                            X\n               ROW=80,                                                 X\n               TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550B                                                    *\n*  B/A3 PAPER FOR HP 7550                                             *\n*                                                                     *\n***********************************************************************\n         SPACE\nH7550B   EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;',                                          X\n               LASTL=';PG;',                                           X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=YES,                                             X\n               PSIZE=B,                                                X\n               ROW=80,                                                 X\n               TOPMAR=0,                                               X\n               USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50BN                                                     *\n*  B/A3 PAPER FOR HP 7550                                             *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nH50BN    EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;',                                          X\n               LASTL=';PG;',                                           X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=NO,                                              X\n               PSIZE=B,                                                X\n               ROW=80,                                                 X\n               TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550BR                                                   *\n*  B/A3 PAPER FOR HP 7550 WITH 90 DEGREE ROTATION                     *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H7550BR EAKGROUP CHARSET=00.\n*              CLASS=A,\n*              COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=8,\n*              DEVLANG=IBMGL,\n*              DEVTYPE=PLOT,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL=';PG;',\n*              LASTL=';PG;',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              PRTHDR=YES,\n*              PSIZE=B,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550M                                                    *\n*  MANUAL OPERATION OF THE HP7550 (OPERATOR ATTENDED)                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        EAKGROUP DEVGRP=H7550M,\n*              CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=8,\n*              DEVLANG=IBMGL,\n*              DEVTYPE=PLOT,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL=';WD LOAD OVERHEAD   FILM`03;NR;',\n*              LASTL=';WD PLOT FINISH         `03;PG;',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              PRTHDR=YES,\n*              PSIZE=A,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550T                                                    *\n*  A/A4 TRANSPARENCY FILM FOR HP 7550                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nH7550T   EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               FIRSTL=';WD LOAD OVERHEAD   FILM`03;NR;',               X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               LASTL=';WD PLOT FINISH         `03;PG;',                X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               PRTHDR=YES,                                             X\n               PSIZE=A,                                                X\n               ROW=80,                                                 X\n               TOPMAR=0,                                               X\n               USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50TN                                                     *\n*  A/A4 TRANSPARENCY FILM FOR HP 7550                                 *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nH50TN    EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';WD LOAD OVERHEAD   FILM`03;NR;',               X\n               LASTL=';WD PLOT FINISH         `03;PG;',                X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               NSPEED=10,                                              X\n               PRTHDR=NO,                                              X\n               PSIZE=A,                                                X\n               ROW=80,                                                 X\n               TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550TR                                                   *\n*  A/A4 TRANSPARENCY FILM FOR HP 7550 WITH 90 DEGREE ROTATION         *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H7550TR EAKGROUP CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=8,\n*              DEVLANG=IBMGL,\n*              DEVTYPE=PLOT,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL=';WD LOAD OVERHEAD   FILM`03;NR;',\n*              LASTL=';WD PLOT FINISH         `03;PG;',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              NSPEED=10,\n*              PRTHDR=YES,\n*              PSIZE=A,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50TRN                                                    *\n*  A/A4 TRANSPARENCY FILM FOR HP 7550 WITH 90 DEGREE ROTATION         *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H50TRN  EAKGROUP CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=8,\n*              DEVLANG=IBMGL,\n*              DEVTYPE=PLOT,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL=';WD LOAD OVERHEAD   FILM`03;NR;',\n*              LASTL=';WD PLOT FINISH         `03;PG;',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              NSPEED=10,\n*              PRTHDR=NO,\n*              PSIZE=A,\n*              ROW=80,\n*              TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550TRT                                                  *\n*  A/A4 TRANSPARENCIES WITH 90 DEGREE ROTATION (TOP-HALF OF FILM)     *\n*                                                                     *\n***********************************************************************\n         SPACE\nH7550TRT EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;RO90;IW0,0,7600,10626;',                    X\n               LASTL=';WD PLOT FINISH         `03;',                   X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               NSPEED=10,                                              X\n               PRTHDR=YES,                                             X\n               PSIZE=(A,300,5100,7205,10100),                          X\n               ROW=80,                                                 X\n               TOPMAR=0,                                               X\n               USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50TRTN                                                   *\n*  A/A4 TRANSPARENCIES WITH 90 DEGREE ROTATION (TOP-HALF OF FILM)     *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nH50TRTN  EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';PG;RO90;IW0,0,7600,10626;',                    X\n               LASTL=';WD PLOT FINISH         `03;',                   X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               NSPEED=10,                                              X\n               PRTHDR=NO,                                              X\n               PSIZE=(A,300,5100,7205,10100),                          X\n               ROW=80,                                                 X\n               TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7550TRB                                                  *\n*  A/A4 TRANSPARENCIES WITH 90 DEGREE ROTATION (BOTTOM-HALF OF FILM)  *\n*                                                                     *\n***********************************************************************\n         SPACE\nH7550TRB EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';RO90;',                                        X\n               LASTL=';WD PLOT FINISH         `03;PG;',                X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               NSPEED=10,                                              X\n               PRTHDR=YES,                                             X\n               PSIZE=(A,300,100,7205,5100),                            X\n               ROW=80,                                                 X\n               TOPMAR=0,                                               X\n               USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H50TRBN                                                   *\n*  A/A4 TRANSPARENCIES WITH 90 DEGREE ROTATION (BOTTOM-HALF OF FILM)  *\n*  NO PRINT HEADER                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nH50TRBN  EAKGROUP CHARSET=00,                                          X\n               CLASS=A,                                                X\n               COLOR=(4,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,4),              X\n               COLUMN=132,                                             X\n               DEFISS=ADMDVSS,                                         X\n               DEFVSS=ADMDVSS,                                         X\n               DEVCOL=8,                                               X\n               DEVLANG=IBMGL,                                          X\n               DEVTYPE=PLOT,                                           X\n               ESC=\u00a6`1B$,                                              X\n               ETX=\u00a6`03$,                                              X\n               FIRSTL=';RO90;',                                        X\n               LASTL=';WD PLOT FINISH         `03;PG;',                X\n               LEFTMAR=0,                                              X\n               LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9X\n               ,1.0),                                                  X\n               NSPEED=10,                                              X\n               PRTHDR=NO,                                              X\n               PSIZE=(A,300,100,7205,5100),                            X\n               ROW=80,                                                 X\n               TOPMAR=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7475A                                                    *\n*  A/A4 PAPER FOR HP 7475                                             *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H7475A  EAKGROUP CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,2,4,5,3,0,0,1,2,2,4,5,3,0,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=6,\n*              DEVLANG=IBMGL,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL='`C0`C1A`C14`B0',\n*              LASTL='`C0`C10`C10',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              PRTHDR=YES,\n*              PSIZE=A,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7475AR                                                   *\n*  A/A4 PAPER FOR HP 7475 WITH 90 DEGREE ROTATION                     *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H7475AR EAKGROUP CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,2,4,5,3,0,0,1,2,2,4,5,3,0,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=6,\n*              DEVLANG=IBMGL,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL='`C0`C1A`C14`B0',\n*              LASTL='`C0`C10`C10',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              PRTHDR=YES,\n*              PSIZE=A,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7475B                                                    *\n*  B/A3 PAPER FOR HP 7475                                             *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H7475B  EAKGROUP CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,2,4,5,3,0,0,1,2,2,4,5,3,0,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=6,\n*              DEVLANG=IBMGL,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL='`C0`C1A`C13`B0',\n*              LASTL='`C0`C10`C10',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              PRTHDR=YES,\n*              PSIZE=B,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7475BR                                                   *\n*  B/A3 PAPER FOR HP 7475 WITH 90 DEGREE ROTATION                     *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H7475BR EAKGROUP CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,2,4,5,3,0,0,1,2,2,4,5,3,0,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=6,\n*              DEVLANG=IBMGL,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL='`C0`C1A`C13`B0',\n*              LASTL='`C0`C10`C10',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              PRTHDR=YES,\n*              PSIZE=B,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7475T                                                    *\n*  A/A4 TRANSPARENCY FILM FOR HP 7475                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H7475T  EAKGROUP CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,2,4,5,3,0,0,1,2,2,4,5,3,0,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=6,\n*              DEVLANG=IBMGL,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL='`C0`C1F`C14`B0',\n*              LASTL='`C0`C10`C10',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              NSPEED=10\n*              PRTHDR=YES,\n*              PSIZE=A,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVGRP = H7475TR                                                   *\n*  A/A4 TRANSPARENCY FILM FOR HP 7475 WITH 90 DEGREE ROTATION         *\n*                                                                     *\n***********************************************************************\n         SPACE\n*H7475TR EAKGROUP CHARSET=00,\n*              CLASS=A,\n*              COLOR=(4,1,2,2,4,5,3,0,0,1,2,2,4,5,3,0,4),\n*              COLUMN=132,\n*              DEFISS=ADMDVSS,\n*              DEFVSS=ADMDVSS,\n*              DEVCOL=6,\n*              DEVLANG=IBMGL,\n*              ESC=\u00a6`1B$,\n*              ETX=\u00a6`03$,\n*              FIRSTL='`C0`C1F`C14`B0',\n*              LASTL='`C0`C10`C10',\n*              LEFTMAR=0,\n*              LTYPE=(9,1.0,1,0.5,2,1.0,4,3.0,1,1.5,3,2.0,6,3.0,9,1.0,9\n*              ,1.0),\n*              NSPEED=10\n*              PRTHDR=YES,\n*              PSIZE=A,\n*              ROW=80,\n*              TOPMAR=0,\n*              USERHDR='CHARLES SCHWAB CO., SAN FRANCISCO, CALIF'\n         SPACE\n         END\n/*\n//\n./ ADD NAME=IKJCT44B                               13AUG93 18.34.23\n//SPGBIS08 JOB (0001,SPG1),'MVS/XA LOCAL MOD',CLASS=M,MSGCLASS=U,\n//     TIME=60\n/*JOBPARM ROOM=7607,SYSAFF=*\n/*NOTIFY SPGBIS\n/*XEQ CS02\n//LANDSCAP OUTPUT DEFAULT=YES,FORMDEF=SYS02,PAGEDEF=SYS01,TRC=N,\n//     FORMS=05A,CHARS=(GT15),DEST=CS02,JESDS=ALL\n//ASM1     EXEC PGM=IEV90,PARM='OBJECT,NODECK,RENT',REGION=2M\n//SYSPRINT  DD  SYSOUT=*\n//SYSLIB    DD  DISP=SHR,DSN=SYS1.MACLIB\n//          DD  DISP=SHR,DSN=SYS1.AMODGEN\n//SYSLIN    DD  UNIT=SYSDA,SPACE=(CYL,(2,1,1)),DSN=&&OBJMOD,\n//     DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200),DISP=(NEW,PASS)\n//SYSUT1    DD  UNIT=VIO,SPACE=(CYL,(1,1)),DISP=(NEW,DELETE)\n//SYSIN     DD  *\nCEXT     TITLE 'IKJCT44B - CLIST BUILT-IN FUNCTION EXIT ROUTINE'\n* ---------------------------------------------------------------------\n*\n* IKJCT44B:  CLIST EXIT FOR USER-WRITTEN BUILT-IN FUNCTIONS\n*\n* RELEASE 4 OF TSO/E PROVIDES A CLIST BUILT-IN FUNCTION THAT CAN BE\n* PERFORMED ON VARIABLES, EXPRESSIONS, AND CHARACTER STRINGS.  WHEN\n* A CLIST PROCESS ENCOUNTERS A VARIABLE STARTING WITH &SYSX, THE\n* BUILT-IN FUNCTION EXIT GETS CONTROL.  IF THE EXIT SUCCESSFULLY\n* EVALUATES THE BUILT-IN FUNCTION,  CLIST PROCESSING ASSIGNS THE\n* RESULT OF THIS EVALUATION TO THE REQUESTED FUNCTION.  YOU CAN USE\n* THE EXIT FOR SEVERAL PURPOSES, E.G. STRING MANIPULATION, NUMERICAL\n* CALCULATIONS, ETC.\n*\n* AT OUR SITE WE USED SEVERAL PROGRAMS (MOSTLY BADLY DOCUMENTED)\n* WRITTEN BY DIFFERENT PEOPLE, WHICH WERE ABLE TO EVALUATE VARIABLES\n* NECESSARY IN CLISTS, E.G. SYSTEM-ID, DEFAULT RACF GROUP, ETC.\n*\n* BY INSTALLING THIS EXIT, YOU WILL BE ABLE TO RETRIEVE ALL THESE\n* VARIABLE EVALUATIONS, THUS AVOIDING COMPLEX COMMAND DEFINITIONS,\n* REDUCING THE POSSIBILITY OF LOSING THE SOURCE CODE, AND KEEPING YOUR\n* ENVIRONMENT SIMPLE.\n*\n* THE GIVEN EXAMPLE OF IKJCT44B ENABLES YOU TO DETERMINE SOME VARIABLES\n* RELATING TO SYSTEM-ID, TERMINAL-ID, CPU-ID, USER-ID, AND RACF DEFAULT\n* GROUP.\n*\n* THE APPEARANCE OF &SYSXSMF, FOR EXAMPLE, IN A CLIST STATEMENT\n* TRIGGERS IKJCT44B AND THE SMF SYSTEM-ID IS EVALUATED AND ASSIGNED\n* TO THE VARIABLE &SYSXSMF.\n*\n* THE FOLLOWING IS AN EXAMPLE OF BUILT-IN FUNCTION VARIABLE\n* EVALUATION:\n*\n* 1. CREATE AN ISPF APPLICATION COMMAND TABLE (ISPF UTILITY).\n*\n* 2. ADD THE COMMAND SID WITH ACTION SELECT:\n*      ISPEXEC SELECT CMD(%SMFID)\n*\n* 3. CREATE A CLIST SMFID WHICH CONTAINS:\n*\n*      PROC 0\n*      SET &ZEDSMSG = &STR(** &SYSXSMF **)\n*      ISPEXEC SETMSG MSG(ISRZ001)\n*\n* AFTER REFRESHING YOUR COMMAND TABLE, KEYING SID AT THE ISPF\n* COMMAND LINE WILL RESULT IN A DISPLAY OF YOUR SYSTEM-ID AT THE\n* UPPER-RIGHT CORNER OF THAT PANEL.  EXTENSION OF FUNCTIONS IS DONE\n* BY ADDING THE BUILT-IN FUNCTION VARIABLE BETWEEN THE LABELS\n* FNCLNGTH AND FNCENTRY WITH ITS ADDRESS LABEL POINTING TO\n* YOUR INSERTED ASSEMBLER CODING.\n*\n* THIS ASSEMBLER CODING MUST RESULT IN REGISTER 1 POINTING TO THE\n* RESULT DATA AND REGISTER 15 HAS TO CONTAIN THE LENGTH OF THIS DATA.\n* CONCLUDE YOUR EXTENSION BY A BRANCH TO LABEL RESULT.  TESTING\n* NEW FUNCTIONS CAN BE DONE BY CALLING ISPF IN A BATCH JOB WITH A\n* STEPLIB (APF) CONTAINING YOUR TEST VERSION OF IKJCT44B AND\n* PROCESSING A CLIST WHICH CALLS YOUR NEW FUNCTION.\n*\n* ---------------------------------------------------------------------\n*                                                                     *\n*    NAME : IKJCT44B                                                  *\n*    AUTHOR :                                                         *\n*        RUUD DE WIT                                                  *\n*        SYSTEMS PROGRAMMER                                           *\n*        FOKKER AIRCRAFT BV (THE NETHERLANDS)                         *\n*                                                                     *\n*    REFERENCE :                                                      *\n*        \"MVS UPDATE\", ISSUE 34, JULY, 1989                           *\n*        XEPHON TECHNOLOGY TRANSFER LIMITED, 1989                     *\n*        P.O. BOX 4480, WINTER PARK, FL  32793                        *\n*        (407) 366-8751                                               *\n*                                                                     *\n*    FUNCTION :                                                       *\n*        REPLACE CLIST BUILT-IN FUNCTIONS STARTING WITH &SYSX         *\n*        WITH THE REQUESTED DATA.                                     *\n*                                                                     *\n*    ENTRY POINT : IKJCT44B                                           *\n*    REGS ON ENTRY :                                                  *\n*        R0  - UNPREDICTABLE                                          *\n*        R1  - ADDRESS OF STANDARD EXIT PARAMETER LIST. EXIT-DEPENDENT*\n*              DATA STARTS AT OFFSET +36 (DEC) IN PARAMETER LIST.     *\n*        R2-12 - UNPREDICTABLE                                        *\n*        R13 - ADDRESS OF STANDARD SAVE AREA                          *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - LOAD MODULE START ADDRESS                              *\n*    REGS USED :  (DESCRIBED BY REGEQU MACRO)                         *\n*        R1  - ON RETURN FROM ROUTINE ADDRESS OF RESULT DATA.         *\n*        R2  - WORK REGISTER                                          *\n*        R3  - WORK REGISTER                                          *\n*        R4  - POINTER TO ENTERED COMMAND (WITHOUT PREFIX SYSX)       *\n*        R5/9 - WORK REGISTERS                                        *\n*        R10 - WORKAREA BASE                                          *\n*        R11 - SECOND BASE REGISTER (NO LONGER USED - SEE BELOW)      *\n*        R12 - MODULE BASE                                            *\n*        R13 - POINTER TO A STANDARD SAVE AREA                        *\n*        R14 - RETURN ADDRESS                                         *\n*    REGS ON RETURN :                                                 *\n*        R0-14 - SAME AS ON ENTRY                                     *\n*        R15   - RETURN CODE :                                        *\n*                0  - FUNCTION EVALUATED AND ANSWER RETURNED IN       *\n*                     256-BYTE ANSWER AREA.                           *\n*                4  - FUNCTION EVALUATED AND ANSWER RETURNED IN       *\n*                     OBTAINED ALTERNATE BUFFER.                      *\n*                8  - VARIABLE COULD NOT BE EVALUATED. NULL VARIABLE  *\n*                12 - ERROR EXIT PROCESSING. DISPLAY MESSAGE, SET     *\n*                     CLIST RC=604 AND SET PROGRAM RC IN &SYSREASON.  *\n*                16 - ERROR EXIT PROCESSING. NO MESSAGE DISPLAY AND   *\n*                     CONTROL IS PASSED TO THE ERROR EXIT.            *\n*                                                                     *\n*    ATTRIBUTES :                                                     *\n*        REUSABLE,REFRESHABLE,REENTRANT                               *\n*        AMODE(31),RMODE(ANY)                                         *\n*        APF-AUTHORIZED (NOT REQUIRED PER IBM DOCUMENTATION)          *\n*                                                                     *\n*    REMARKS :                                                        *\n*        MODULE MUST BE LINKED INTO AN LPA LIBRARY                    *\n*                                                                     *\n*    DOCUMENTATION :                                                  *\n*        SC28-1380 TSO/E CUSTOMIZATION                                *\n*        SC28-1872 TSO/E VERSION 2 CUSTOMIZATION, PAGE 397            *\n*                                                                     *\n***                                                                 ***\n*                                                                     *\n*    ADD FUNCTIONS TO THE EXIT :                                      *\n*        IN ORDER TO ADD A NEW FUNCTION TO THE EXIT YOU MUST DO THE   *\n*        FOLLOWING STEPS :                                            *\n*        - ADD THE FUNCTION ENTRY TO THE FUNCTION VALIDATION TABLE.   *\n*        - WRITE THE CONVERSION ROUTINE AND AT THE END BRANCH TO THE  *\n*          POST PROCESSING ROUTINE WITH LABEL RESULT.                 *\n*                                                                     *\n***                                                                 ***\n*                                                                     *\n*    UPDATED 04APR90, WILLIAM SMITH, THOM SHULER, CHARLES SCHWAB,     *\n*    ISD TECHNICAL SERVICES, SAN FRANCISCO, CA 94104                  *\n*    .  THANKS TO JIM NICHOLAS AT MEAD CORPORATION, DAYTON, OHIO,     *\n*       FOR &SYSXRACFNAME                                             *\n*    .  ALPHABETIZED ALL VARIABLES IN THE FUNCTION VALIDATION TABLE   *\n*       AND BY RETRIEVAL ROUTINES (EASIER LOOKUP)                     *\n*    .  ADDED ALIASES OF &SYSXRNAME AND &SYSXRGROUP (CONSISTENCY)     *\n*    .  ADDED AN ENTRY STATEMENT IN THE LINKAGE EDITOR STEP AND RE-   *\n*       MOVED THE COMMENTS FOR A SECOND BASE REGISTER                 *\n*    .  ALPHABETIZED ALL DSECT NAMES                                  *\n*                                                                     *\n*    UPDATED 02APR90, WILLIAM SMITH, THOM SHULER, CHARLES SCHWAB,     *\n*    ISD TECHNICAL SERVICES, SAN FRANCISCO, CA 94104                  *\n*    .  THANKS TO JIM NICHOLAS AT MEAD CORPORATION, DAYTON, OHIO,     *\n*       FOR THE ADDITION OF SUPPORT FOR THE \"WISH LIST\" VARIABLES     *\n*       (&SYSXACCT, &SYSXIPLVOL, &SYSXIPLDATE, &SYSXIPLTIME)          *\n*    .  CORRECTED AN ERROR IN THE CALCULATION OF THE MINUTES PORTION  *\n*       OF THE IPLTIME AND ADDED SUPPORT FOR SECONDS (THE -ENV MINOR  *\n*       COMMAND OF OMEGAMON DISPLAYS THE IPLTIME AS HH.MM.SS)         *\n*    .  ADDED SUPPORT TO DISPLAY THE IPL \"SYSRES\" UCB ADDRESS AS      *\n*       &SYSXIPLADDRESS (ALIAS: &SYSXIPLADDR)                         *\n*    .  ADDED ALIAS SUPPORT TO &SYSXIPLVOLUME (&SYSXIPLVOL)           *\n*                                                                     *\n*    UPDATED 25JAN90, WILLIAM SMITH, PAT PATTERSON, CHARLES SCHWAB,   *\n*    ISD TECHNICAL SERVICES, SAN FRANCISCO, CA 94104                  *\n*    .  INSTALLED AT THE MVS/XA TSO/E VERSION 2.1, PUT 9001 LEVEL.    *\n*    .  NOTICE IN THE FUNCTION TABLE THAT AN \"ALIAS\" CAN BE ASSIGNED  *\n*       TO A BUILTIN FUNCTION BY SIMPLY ADDING ANOTHER NAME FOR THE   *\n*       SAME FUNCTION AND USING THE SAME LABEL (ADDRESS) IN THE       *\n*       DC INSTRUCTION.  THIS ALLOWS FOR SHORTER BUILTIN FUNCTION     *\n*       NAMES (LESS TYPING WHEN CODING A CLIST).                      *\n*    .  THE CODE IN THE ENTIRE FIRST CSECT WAS COMMENTED OUT TO       *\n*       ELIMINATE EXIT EXECUTION FAILURE (WHY THE TABLE WAS DESIGNED  *\n*       TO EXPLICITLY RUN ABOVE THE LINE IS UNCLEAR -- THE MODULE     *\n*       MUST BE LINKED AMODE(31) ANYWAY).                             *\n*    .  COMMENTED OUT THE USING AND 2 LOAD ADDRESS INSTRUCTIONS TO    *\n*       ESTABLISH ADDRESSABILITY TO A SECOND BASE REGISTER; THE EXIT  *\n*       ISN'T BIG ENOUGH TO REQUIRE A SECOND BASE REGISTER AS         *\n*       PRESENTLY WRITTEN.                                            *\n*    .  TO DO LIST:  &SYSXIPLVOL, &SYSXIPLTIME. &SYSXIPLDATE          *\n*                    &SYSXACCT (TSO JOB CARD ACCT. NO.)               *\n*                                                                     *\n***                                                                 ***\n         SPLEVEL SET=2                 SET SYSSPLV\nFNCPNTR  CSECT\nFNCPNTR  AMODE 31\nFNCPNTR  RMODE ANY\n         DC    A(FNCTABLE)             POINTER TO FUNCTION TABLE\n         DC    A(FNCLNGTH)             LENGTH TABLE ENTRY\n         DC    A(FNCENTRY)             # ENTRIES IN TABLE\nIKJCT44B CSECT\nIKJCT44B AMODE 31\nIKJCT44B RMODE ANY\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12),,IKJCT44B.&SYSDATE SAVE REGISTERS\n         LR    R12,R15                 SAVE ENTRY POINT ADDRESS\n         USING IKJCT44B,R12            SETUP ADDRESSABILITY\n         USING IKJCT44B,R12,R11        SETUP ADDRESSABILITY\n         LA    R11,2048(,R12)          SET DISPLACEMENT ...\n         LA    R11,2048(,R11)          ... SECOND BASE REGISTER\n         LR    R2,R1                   SAVE PARAMETER ADDRESS\n         GETMAIN RU,LV=WORKLEN         GET WORKING STORAGE\n         LR    R10,R1                  SAVE WORKAREA START ADDRESS\n         USING WORKAREA,R10            MAKE IT ADDRESSABLE\n         ST    R13,SAVEAREA+4          SAVE SAVEAREA ADDRESS\n         LA    R15,SAVEAREA            GET ADDRESS SAVEAREA\n         ST    R15,8(R13)              SAVE NEW-SA IN OLD-SA\n         LR    R13,R15                 ADDRESS NEW SAVEAREA\n         XC    RETCODE,RETCODE         ZERO RETURN CODE AREA\n         ST    R2,PARMADRS             SAVE PARAMETER POINTER\n         MVI   RETCODE,8               INVALID BUILT-IN FUNCTION CODE\n         L     R3,36(,R2)              LOAD ADDRESS BUILTIN FUNCTION\n         L     R15,4(R3)               LOAD LENGTH BUILTIN FUNCTION\n         SH    R15,=H'4'               SUBTRACT PREFIX SYSX LENGTH\n         LTR   R15,R15                 ANY DATA LEFT FOR COMPARE\n         BZ    RETURN                  NO, EXIT\n***  ROUTINE FUNCTION :                                             ***\n*        COMPARE THE BUILT-IN COMMAND TABLE WITH THE ENTERED COMMAND  *\n*        AND BRANCH TO SUPPLIED CONVERSION ROUTINE.                   *\n*        IF NO MATCH FOUND IN COMMAND TABLE RETURN TO CLIST PROCESSING*\n*        WITH RETURN CODE = 8.                                        *\n*    ON START TABLE SEARCH :                                          *\n*      - R15 CONTAINS THE LENGTH-1 OF THE ENTERED BUILT-IN FUNCTION   *\n*        WITHOUT THE PREFIX SYSX. IF ENTERED FUNCTION IS &SYSXDATA    *\n*        THE LENGTH IN R15 IS DATA-1 = 3.                             *\n*      - R3 POINTS TO THE FUNCTION DATA OF THE BUILT-IN FUNCTION. FOR *\n*        &SYSXDATA THAT WOULD BE DATA.                                *\n*    WHEN MATCH FOUND :                                               *\n*      - R4 POINTS TO FOUND COMMAND.                                  *\n*      - R6 CONTAINS THE LENGTH-1 OF THE FOUND COMMAND WITHOUT THE    *\n*        PREFIX.                                                      *\n***    - R15 CONTAINS THE ADDRESS OF THE CONVERSION ROUTINE.        ***\n         BCTR  R15,R0                  SUBTRACT ONE FOR COMPARE\n         L     R3,8(R3)                POINT TO BUILTIN COMMAND STRING\n         LA    R3,4(,R3)               POINT PAST SYSX FUNCTION PREFIX\n         LA    R4,FNCTABLE             POINT TO START OF TABLE\n         LA    R5,FNCENTRY             GET # ENTRIES IN TABLE\nFNCCHECK LH    R6,0(R4)                LOAD COMPARE LENGTH-1 FUNCTION\n         CR    R6,R15                  COMPARE LENGTH AND IF ...\n         BNE   FNCNEXT                 ... UNEQUAL CHECK NEXT ENTRY\n         EX    R6,FNCCOMP              COMPARE ENTRY WITH BUILTIN DATA\n         BNE   FNCNEXT                 IF NOT EQUAL TRY NEXT ONE\n         L     R15,12(R4)              LOAD ROUTINE ADDRESS\n         LA    R4,2(,R4)               POINT TO ENTERED FUNCTION CMD\n         XC    RETCODE,RETCODE         RESET RETURN CODE FUNCTION OK\n         BR    R15                     BRANCH TO ROUTINE\nFNCNEXT  LA    R4,FNCLNGTH(,R4)        POINT TO NEXT TABLE ENTRY\n         BCT   R5,FNCCHECK             TRY NEXT ENTRY\n         B     RETURN                  IF NO MATCH FOUND EXIT\nFNCCOMP  CLC   2(0,R4),0(R3)           COMPARE TABLE WITH BUILTIN DATA\n***  POST PROCESSING ROUTINE :                                      ***\n*        PLACE THE FOUND DATA INTO THE SUPPLIED RETURN AREA (TOTAL    *\n*        SHOULD NOT EXCEED 256-BYTES FOR THE MOMENT) UPDATE THE       *\n*        LENGTH ARGUMENT AND RETURN TO CLIST PROCESSING.              *\n*    ON ENTRY :                                                       *\n*        R1 POINTS TO THE RESULT DATA.                                *\n***      R15 CONTAINS THE ACTUAL LENGTH OF THE OUTPUT DATA.         ***\nRESULT   L     R2,PARMADRS             LOAD PARAMETER POINTER\n         L     R2,44(R2)               POINT TO RESULT PARMLIST\n         ST    R15,4(R2)               SET LENGTH RESULT IN PARMLIST\n         L     R2,8(R2)                POINT TO PARAMETER DATA AREA\n         BCTR  R15,R0                  SUBTRACT ONE FOR EXECUTE\n         EX    R15,RSLTCOPY            COPY DATA INTO AREA\n         B     RETURN                  EXIT TO CLIST PROCESSING\nRSLTCOPY MVC   0(0,R2),0(R1)           MOVE DATA INTO RESULT AREA\n***  RETURN ROUTINE :                                               ***\n*      - SAVE FUNCTION RETURN CODE.                                   *\n*      - FREE OBTAINED WORKING STORAGE                                *\n***    - RESTORE REGISTERS AND SET RETURN CODE FOR FUNCTION DRIVER. ***\nRETURN   L     R13,4(R13)              RESTORE OLD-SA ADDRESS\n         XR    R2,R2                   CLEAR REG2 FOR INSERTION\n         IC    R2,RETCODE              SAVE RETCODE\n         FREEMAIN RU,LV=WORKLEN,A=(R10) FREE GOTTEN STORAGE\n         LR    R15,R2                  SET OS RETURN CODE\n         L     R14,12(R13)             RESTORE REG14\n         LM    R0,R12,20(R13)          RESTORE ALL REGISTERS\n         BSM   0,R14                   RETURN TO OS\n*** RETRIEVAL ROUTINES :                                            ***\n*        EVERY FUNCTION HAS IT'S OWN RETRIEVAL ROUTINE. THE ONLY      *\n*        FUNCTION IS TO RETRIEVE THE REQUIRED DATA FOR THE POST       *\n*        PROCESSOR.                                                   *\n*   ON ENTRY :                                                        *\n*        R4  - POINTER TO ENTERED BUILT-IN FUNCTION WORD.             *\n*        R6  - BUILT-IN FUNCTION LENGTH-1 MINUS FUNCTION PREFIX.      *\n*   ON RETURN TO RESULT :                                             *\n*        R1  - POINTS TO RESULT DATA                                  *\n***      R15 - ACTUAL LENGTH RESULT DATA.                           ***\n*        RETRIEVE TSO ACCOUNT NUMBER FROM LOGON\nACCT     L     R1,PSATOLD-PSA                ---> TCB\n         L     R1,TCBJSCB-TCB(R1)            ---> JSCB\n         L     R1,JSCBJCT-IEZJSCB(R1)        ---> JCT-16\n         ICM   R1,7,16+JCTACTAD-INJMJCT(R1)  ---> ACT-16\n         LA    R15,0                         ---> ZERO REG15\n         IC    R15,16+ACTACCNT-IEFAACTB(R1)  ---> LENGTH OF ACCOUNT #\n         LA    R1,16+1+ACTACCNT-IEFAACTB(R1) ---> ACTUAL ACCOUNT NUMBER\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE CURRENT CPU ID\nCPUID    L     R1,PSAPCCAV-PSA         LOAD PCCA ADDRESS\n         LA    R1,PCCACPID-PCCA(R1)    POINT TO PCCA CPUID IDENTIFIER\n         LA    R15,12                  SET CPUID LENGTH\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE UCB ADDRESS OF THE SYSTEM RESIDENCE VOLUME\nIPLADDR  L     R1,CVTPTR               LOAD ADDRESS OF CVT\n         L     R1,CVTSYSAD-CVT(R1)     POINT TO IPL UNIT UCB\n         LA    R1,UCBNAME-UCB(R1)      SET DATA POINTER TO UCB ADDRESS\n         LA    R15,3                   SET DATE LENGTH\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE THE DATE AT WHICH THE RUNNING SYSTEM WAS IPLED\nIPLDATE  L     R1,CVTPTR               LOAD ADDRESS OF CVT\n         L     R1,CVTSMCA-CVT(R1)      POINT TO SMF BLOCKS\n         LA    R1,SMCAIDTE-SMCABASE(R1) SET DATA POINTER TO IPL DATE\n         MVC   JULDATE,JULPATT         MAKE THIS READABLE\n         ED    JULDATE,1(R1)           MAKE THIS READABLE\n         LA    R1,JULDATE+1            ---> EDITED IPL DATE\n         LA    R15,6                   SET DATE LENGTH\n         B     RESULT\n*        RETRIEVE THE TIME AT WHICH THE RUNNING SYSTEM WAS IPLED\nIPLTIME  L     R1,CVTPTR               LOAD ADDRESS OF CVT\n         L     R1,CVTSMCA-CVT(R1)      POINT TO SMF BLOCKS\n         LA    R1,SMCAITME-SMCABASE(R1) SET DATA POINTER TO IPL TIME\n         L     R1,0(R1)                LOAD THE BINARY TIME OF DAY\n         SLR   R0,R0                   SETUP FOR DIVIDE\n         D     R0,=F'360000'           SETUP FOR DIVIDE\n         CVD   R1,DOUBLE               CONVERT TO DECIMAL\n         OI    DOUBLE+7,X'0F'          PURIFY VALUE\n         UNPK  HH,DOUBLE+6(2)          SAVE HOUR PORTION OF TIME\n         MVI   PD1,C'.'                MOVE IN PERIOD NUMBER 1\n         LR    R1,R0\n         SLR   R0,R0\n         D     R0,=F'6000'\n         CVD   R1,DOUBLE               CONVERT TO DECIMAL\n         OI    DOUBLE+7,X'0F'          PURIFY VALUE\n         UNPK  MM,DOUBLE+6(2)          SAVE MINUTE PORTION OF TIME\n         MVI   PD2,C'.'                MOVE IN PERIOD NUMBER 2\n         LR    R1,R0\n         SLR   R0,R0\n         D     R0,=F'100'\n         CVD   R1,DOUBLE               CONVERT TO DECIMAL\n         OI    DOUBLE+7,X'0F'          PURIFY VALUE\n         UNPK  SS,DOUBLE+6(2)          SAVE SECONDS PORTION OF TIME\n         LA    R1,TIME                 ---> EDITED TIME VALUE\n         LA    R15,8                   SET LENGTH\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE VOLUME SERIAL NUMBER OF THE SYSTEM RESIDENCE VOLUME\nIPLVOL   L     R1,CVTPTR               LOAD ADDRESS OF CVT\n         L     R1,CVTSYSAD-CVT(R1)     POINT TO IPL UNIT UCB\n         LA    R1,UCBVOLI-UCB(R1)      SET DATA POINTER TO VOLUME NAME\n         LA    R15,6                   SET DATE LENGTH\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE RACF DEFAULT GROUP NAME FROM ACEE\nRACFGRP  L     R1,PSAAOLD-PSA          LOAD LAST DISPATCHED ASCB\n         L     R1,ASCBASXB-ASCB(R1)    GET ASCB EXTENSION BLOCK\n         L     R1,ASXBSENV-ASXB(R1)    GET RACF CONTROL BLOCK\n         XR    R15,R15                 CLEAR REG FOR INSERT\n         ICM   R15,B'0001',ACEEGRPL-ACEE(R1)  GET ACTUAL LENGTH DATA\n         LA    R1,ACEEGRPN-ACEE(R1)    POINT TO GROUP DATA AREA\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE RACF USER NAME FROM ACEE\nRACFNAME L     R1,PSAAOLD-PSA          LOAD LAST DISPATCHED ASCB\n         L     R1,ASCBASXB-ASCB(R1)    THEN THE EXTENSION BLOCK\n         L     R1,ASXBSENV-ASXB(R1)    GET THE RACF CONTROL BLOCK\n         ICM   R1,15,ACEEUNAM-ACEE(R1) IS THE RACF USER NAME PRESENT ?\n         BZ    RETURN                  NO, EXIT\n         XR    R15,R15                 CLEAR REG FOR INSERT\n         IC    R15,0(R1)               GET LENGTH OF USER NAME\n         BCTR  R15,R0                  ACCOUNT FOR LENGTH BYTE\n         LA    R1,1(R1)                POINT TO USER NAME FIELD\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE RACF USER ID FROM ACEE\nRACFUSER L     R1,PSAAOLD-PSA          LOAD LAST DISPATCHED ASCB\n         L     R1,ASCBASXB-ASCB(R1)    THEN THE EXTENSION BLOCK\n         L     R1,ASXBSENV-ASXB(R1)    GET RACF CONTROL BLOCK\n         XR    R15,R15                 CLEAR REG FOR INSERT\n         ICM   R15,B'0001',ACEEUSRL-ACEE(R1)  GET ACTUAL LENGTH DATA\n         LA    R1,ACEEUSRI-ACEE(R1)    POINT TO USERID AREA\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE SMF SYSTEM ID\nSMFID    L     R1,CVTPTR               LOAD ADDRESS CVT\n         L     R1,CVTSMCA-CVT(R1)      POINT TO SMF BLOCKS\n         LA    R1,SMCASID-SMCABASE(R1) SET DATA POINTER TO SMFID\n         LA    R15,4                   SET LENGTH DATA\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n*        RETRIEVE TERMINAL ID FROM RACF ACEE\nTERMID   L     R1,PSAAOLD-PSA          LOAD LAST DISPATCHED ASCB\n         L     R1,ASCBASXB-ASCB(R1)    GET ASCB EXTENSION BLOCK\n         L     R1,ASXBSENV-ASXB(R1)    GET RACF CONTROL BLOCK\n         LA    R1,ACEETRID-ACEE(R1)    POINT TO GROUP DATA AREA\n         LA    R15,8                   SET LENGTH TERMINAL ID\n         B     RESULT                  DO FUNCTION UPDATE PROCESSING\n***  BUILT-IN FUNCTION VALIDATION TABLE :                           ***\n*        THIS TABLE DEFINES ALL SUPPORTED FUNCTION. THE FORMAT OF     *\n*        THE ENTRIES IS AS FOLLOWS :                                  *\n*            OFFSET  LENGTH  DESCRIPTION                              *\n*             +0       2     LENGTH ARGUMENT-1 (FOR COMPARE STEP).    *\n*             +2       10    ARGUMENT. IN THE CLIST THIS FUNCTION     *\n*                            WILL BE PREFIXED WITH &SYSX.             *\n*             +12      4     ADDRESS CONVERSION ROUTINE.              *\n*             +16      40    FUNCTION EXPLAINING TEXT. THIS TEXT WILL *\n*                            BE DISPLAY BY THE FOKBLTIN COMMAND.      *\n*        ALL ENTRY LENGTH ARE FIXED VALUES. DO NOT CHANGE THE LENGTH  *\n*        OF THE ENTRIES.                                              *\n***      >>>>> ONLY ADD ENTRIES BETWEEN THE COMMENT STATEMENTS <<<<<***\n         DS    0D\nFNCTABLE DC    AL2(3),CL10'ACCT      ',A(ACCT)\n         DC    CL40'TSO ACCOUNT NUMBER FROM LOGON           '\nFNCLNGTH EQU   *-FNCTABLE\n* ------ ADD ENTRIES AFTER THIS COMMENT ------                        *\n         DC    AL2(4),CL10'CPUID     ',A(CPUID)\n         DC    CL40'HARDWARE CPU ID OF EXECUTING PROCESSOR  '\n         DC    AL2(9),CL10'IPLADDRESS',A(IPLADDR)\n         DC    CL40'IPL SYSTEM RESIDENCE VOLUME UCB ADDRESS '\n         DC    AL2(6),CL10'IPLADDR   ',A(IPLADDR)\n         DC    CL40'IPL SYSTEM RESIDENCE VOLUME UCB ADDRESS ' ALIAS\n         DC    AL2(6),CL10'IPLDATE   ',A(IPLDATE)\n         DC    CL40'IPL DATE (JULIAN FORMAT)                '\n         DC    AL2(6),CL10'IPLTIME   ',A(IPLTIME)\n         DC    CL40'IPL TIME IN HH.MM.SS                    '\n         DC    AL2(8),CL10'IPLVOLUME ',A(IPLVOL)\n         DC    CL40'IPL RESIDENCE VOLUME SERIAL NUMBER      '\n         DC    AL2(5),CL10'IPLVOL    ',A(IPLVOL)\n         DC    CL40'IPL RESIDENCE VOLUME SERIAL NUMBER      ' ALIAS\n         DC    AL2(8),CL10'RACFGROUP ',A(RACFGRP)\n         DC    CL40'USER DEFAULT RACF CONNECT GROUP         '\n         DC    AL2(5),CL10'RGROUP    ',A(RACFGRP)\n         DC    CL40'USER DEFAULT RACF CONNECT GROUP         ' ALIAS\n         DC    AL2(3),CL10'RGRP      ',A(RACFGRP)\n         DC    CL40'USER DEFAULT RACF CONNECT GROUP         ' ALIAS\n         DC    AL2(7),CL10'RACFNAME  ',A(RACFNAME)\n         DC    CL40'CURRENT RACF USER NAME FROM ACEE        '\n         DC    AL2(4),CL10'RNAME     ',A(RACFNAME)\n         DC    CL40'CURRENT RACF USER NAME FROM ACEE        ' ALIAS\n         DC    AL2(7),CL10'RACFUSER  ',A(RACFUSER)\n         DC    CL40'CURRENT RACF USERID FROM ACEE           '\n         DC    AL2(4),CL10'RUSER     ',A(RACFUSER)\n         DC    CL40'CURRENT RACF USERID FROM ACEE           ' ALIAS\n         DC    AL2(2),CL10'SMF       ',A(SMFID)\n         DC    CL40'SMF SYSTEM ID AS SPECIFIED IN SMFPRMXX  '\n         DC    AL2(5),CL10'TERMID    ',A(TERMID)\n         DC    CL40'SESSION TERMINAL NODE NAME              '\n* ------ ADD ENTRIES BEFORE THIS COMMENT ------                       *\nFNCENTRY EQU   (*-FNCTABLE)/FNCLNGTH\n*        CONSTANT DEFINITIONS.                                        *\nJULPATT  DC    X'4020204B202020'\n         LTORG\nWORKAREA DSECT\n         DS    0F                      ALIGNMENT\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nRETCODE  DS    F                       RETURN CODE SAVE AREA\nPARMADRS DS    A                       PARAMETER ADDRESS SAVE AREA\nJULDATE  DS    CL7\nDOUBLE   DS    D\nTIME     DS    0CL8                    IPLTIME IN HH.MM.SS FORMAT\nHH       DS    CL2                     HOURS\nPD1      DS    CL1                     \"PERIOD\"\nMM       DS    CL2                     MINUTES\nPD2      DS    CL1                     \"PERIOD\"\nSS       DS    CL2                     SECONDS\nWORKLEN  EQU   *-WORKAREA\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEESMCA\n         IEFAJCTB\n         IEZJSCB\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         IHAPCCA\n         IHAPSA\n         IKJTCB\nUCB      DSECT\n         IEFUCBOB\n         END\n/*\n//LKED     EXEC PGM=IEWL,PARM='LIST,LET,XREF,RENT,REUS,REFR',\n//         REGION=1536K\n//SYSPRINT  DD  SYSOUT=*\n//SYSLMOD   DD  UNIT=3380,VOL=SER=SPAUX3,DSN=SYS2.CMDLIB,DISP=SHR\n//SYSUT1    DD  UNIT=VIO,SPACE=(CYL,(3,2)),DISP=(NEW,DELETE)\n//SYSLIN    DD  DSN=&&OBJMOD,DISP=(OLD,DELETE)\n//          DD  *\n ENTRY    IKJCT44B\n SETSSI   90094021\n IDENTIFY IKJCT44B('IN-HOUSE BUILTIN CLIST FUNCTION EXIT')\n NAME     IKJCT44B(R)\n/*\n//\n./ ADD NAME=IKJEFF10                               13AUG93 18.34.23\nIKJEFF10 TITLE 'IKJEFF10 - TSO SUBMIT EXIT'\n* 9-22-89 DGJ CHG CLASS H,I VALID ALL USERS   - 0600-1000 EASTERN\n* 8-11-88 DGJ ADD CLASS V VALID FOR ALL USERS   - FDR RESTORES\n* 6-27-88 DGJ CHANGE CLASS Y VALID FOR ALL USERS   - 2000-1000 EASTERN\n* 6-27-88 DGJ ADD CLASS X VALID FOR ALL USERS   - 1700-1000 EASTERN\n* 3-06-88 JVS ADD CLASS 9 VALID FOR ALL USERES  - QUICK JOBS\n* 1-15-88 JVS ADD CLASS I VALID FOR FOCUS USERS - XX#XXX IDS\nR0       EQU   0                       WORK REG\nR1       EQU   1                       ENTRY PTR TO PARM LIST\nR2       EQU   2                       WORK REG\nR3       EQU   3                       WORK REG\nR4       EQU   4                       WORK REG\nR5       EQU   5                       WORK REG\nR6       EQU   6                       WORK REG\nR7       EQU   7                       WORK REG\nR8       EQU   8                       WORK REG\nR9       EQU   9                       ADDR TO IESUBCTD\nR10      EQU   10                      UNUSED\nR11      EQU   11                      ADDR TO IEDSECTD\nR12      EQU   12                      BASE REG\nR13      EQU   13                      SAVE AREA PTR\nR14      EQU   14                      RETURN ADDR\nR15      EQU   15                      RETURN CODE\n         EJECT\nIKJEFF10 CSECT\n         SAVE (14,12),,IKJEFF10_SCHWAB\n         LR    R12,R15\n         USING IKJEFF10,R12\n         L     R11,0(,R1)\n         USING IEDSECTD,R11\n         L     R9,IESUBCTP\n         USING IESUBCTD,R9\n         SPACE 2\n*-------------------------------------------------------------------*\n*        CHECK 1ST TO SEE IF WE HAVE GONE THROUGH THE EXIT BEFORE.  *\n*-------------------------------------------------------------------*\n         SPACE 2\n         CLC   IEMSGP+1(3),=X'000000'  CHECK FOR RECURSIVE CALL ?\n         BE    FIRST                   CONTINUE TO PROCESS\n         SPACE 2\n*-------------------------------------------------------------------*\n*        WE ARE BACK FOR THE LAST TIME AND MUST DO SOME             *\n*        HOUSECLEANING BEFORE WE GO AWAY FOR GOOD.                  *\n*-------------------------------------------------------------------*\n         SPACE 2\n         L     R1,IEMSGP               GET MSG ADDR FOR FREEMAIN\n         LH    R0,0(,R1)               GET LENGTH TO FREE\n         FREEMAIN R,LV=(0),A=(1)       FREE AREA WE GOT BEFORE\n         B     RET16                   GO RETURN WITH RC=0\n         SPACE 2\n*--------------------------------------------------------------------*\n*        WE ARE GOING TO DO SOME CHECKING SO GO GET WORKAREA         *\n*--------------------------------------------------------------------*\n         SPACE 2\nFIRST    EQU   *\n         GETMAIN R,LV=ENDDUMMY-DUMMY   GET WORKAREA TO PLAY WITH\n         LR    R10,R1                  SAVE THE ADDRESS\n         USING DUMMY,R10               SETUP ADDRESSABILITY\n         LA    R8,SAVEREG              SETUP\n         ST    R8,8(R13)                SAVEAREA\n         ST    R13,SAVEREG+4             CHANINING\n         LR    R13,R8                     LINKAGE\n         SPACE 2\n*------------------------------------------------------------------*\n*        GET THE PSCB ADDRESS AND CHECK FOR OPERATOR AUTHORITY.    *\n*------------------------------------------------------------------*\n         SPACE 2\n         EXTRACT PSCBADDR,'S',FIELDS=PSB,MF=(E,EXTLIST)\n         L     R1,PSCBADDR             POINT TO PSCB\n         USING PSCB,R1\n         XR    R5,R5                   CLEAR REG 5\n         XR    R6,R6                   CLEAR REG 6\n         TM    PSCBATR1,PSCBCTRL       SEE IF USER HAS OPERATOR\n         BZ    CONT                    NO, THEN CONTINUE NORMALLY\n         LA    R5,1(,R5)               SAVE OPERATOR INDICATOR\nCONT     DS    0H\n*------------------------------------------------------------------*\n*        REGULAR USER, THEREFORE CHECK FOR JOB CLASS.              *\n*------------------------------------------------------------------*\n         L     R4,IECARDP              GET POINTER TO JCL IMAGE\n         LA    R4,1(,R4)               BUMP PAST FIRST COLUMN\n         LH    R10,=H'69'              SETUP MAX SCAN VALUE\nREGUSER  DS    0H\n         LA    R4,1(,R4)               BUMP PAST SECOND COLUMN\n         CLI   0(R4),C' '              IS FIRST CHAR A BLANK?\n         BE    TEST2                   YES, CONTINUE WITH NEXT TEST\n         CLI   0(R4),C','              IS FIRST CHAR A COMMA?\n         BE    TEST2                   YES, CONTINUE WITH NEXT TEST\n         BCT   R10,REGUSER             IF SCAN NOT COMPLETE, LOOP\n         B     RETFR0                  ELSE, EXIT\nTEST2    DS    0H\n         CLC   0(7,R4),=C' CLASS='     IS IT  CLASS= ?\n         BE    TEST3                   YES, CONTINUE WITH NEXT TEST\n         CLC   0(7,R4),=C',CLASS='     IS IT ,CLASS= ?\n         BE    TEST4                   YES, SKIP NEXT TEST\n         BCT   R10,REGUSER             IF SCAN NOT COMPLETE, LOOP\n         B     RETFR0                  ELSE, EXIT\nTEST3    DS    0H\n         CH    R10,=H'69'              IS IT '// CLASS=' ?\n         BE    TEST4                   YES, CONTINUE WITH NEXT TEST\n         BCT   R10,REGUSER             IF SCAN NOT COMPLETE, LOOP\n         B     RETFR0                  ELSE, EXIT\nTEST4    DS    0H\n         IC    R6,7(R4)                SAVE CLASS\n         TR    7(1,R4),TRCLASS         MAKE SURE IT IS VALID CLASS\n         CLI   7(R4),C'$'              DOLLAR SIGN MEANS INVALID CLASS\n         BE    INVCLASS                IF EQUAL TO $, THEN ITS INVALID\n         STC   R6,7(R4)                RESTORE CLASS\n         CLI   7(R4),C'M'              IS IT CLASS=M ?\n         BE    CLASSM                  YES...\n         LTR   R5,R5                   CHECK IF OPERATOR AUTH\n         BNZ   RETFR0                  YES, NOW EXIT\n         CLI   7(R4),C'9'              IS IT CLASS=9 - QUICK  ?\n         BE    TESTEXIT                YES, EXIT TES\n         CLI   7(R4),C'G'              IS IT CLASS=G OR LOWER ?\n         BNH   TEST5                   YES, EXIT TEST5\n         CLI   7(R4),C'V'              IS IT CLASS=V FDR RESTORE ?\n         BE    TESTEXIT                YES, EXIT TEST\n         CLI   7(R4),C'H'              IS IT CLASS=H 0600-1000 ?\n         BE    TESTEXIT                YES, EXIT TEST\n         CLI   7(R4),C'I'              IS IT CLASS=I 0600-1000 ?\n         BE    TESTEXIT                YES, EXIT TEST\n         CLI   7(R4),C'X'              IS IT CLASS=X 1700-1000 ?\n         BE    TESTEXIT                YES, EXIT TEST\n         CLI   7(R4),C'Y'              IS IT CLASS=Y 2000-1000 ?\n         BE    TESTEXIT                YES, EXIT TEST\n         CLI   7(R4),C'Z'              IS IT CLASS=Z (SCAN) ?\n         BE    TESTEXIT                YES, EXIT TEST\nCLASSM   EQU   *\n         CLC   PSCBUSER(3),=C'SPG'     IS IT AN SPG USER?\n         BE    RETFR0                  YES, NOW EXIT\n         B     GIVEMSG1                GO GIVE ERROR MESSAGE\nINVCLASS EQU   *\n         STC   R6,7(R4)                RESTORE CLASS\nGIVEMSG1 EQU   *\n         LA    R8,MSG1\n         B     RETFR8\nTEST5    DS    0H\n         CLI   PSCBUSER+2,C'#'         IS IT A NON-ISD USER?\n         BNE   TEST6                   NO, THEN EXIT5\n         CLI   7(R4),C'F'              IS IT CLASS=F OR HIGHER ?\n         BNL   TESTEXIT                YES, EXIT TEST5\n         B     GIVEMSG1                GO GIVE ERROR MESSAGE\nTEST6    DS    0H\n*              FOCUS JOB CLASS IS INVALID\n*              FOR NON-FOCUS USER\n         CLI   7(R4),C'F'              IS IT CLASS=F OR HIGHER ?\n         BNL   GIVEMSG1                YES, GO GIVE ERROR MESSAGE\n         B     RETFR0                  EXIT\nTESTEXIT DS    0H\n         B     RETFR0                  EXIT\n         EJECT\n*--------------------------------------------------------------------*\n*        RETURN WITH RET CODE = 0  AND REMEMBER TO DO FREEMAIN       *\n*--------------------------------------------------------------------*\n         SPACE 2\nRETFR0   EQU   *\n         BAL   R8,FREESAVE             GO FREE MY WORKAREA\n         LM    R14,R12,12(R13)         RESTORE REGS\n         LA    R15,IECONTIN            GET RETURN CODE = 0\n         BR    R14                     GODDBYE\n         SPACE 2\n*--------------------------------------------------------------------*\n*        RETURN WITH RET CODE = 8  AND WE RETURN SIGNALING A         *\n*                                  MSG TO BE GIVEN, WE WILL          *\n*                                  BE RETURNING THOUGH.              *\n*--------------------------------------------------------------------*\n         SPACE 2\nRETFR8   EQU   *\n         XR    R3,R3                   CLEAR R3\n         LH    R3,0(,R8)               R3 = LENGTH OF MSG\n         GETMAIN R,LV=(R3)             GO GET THE STORAGE\n         BCTR  R3,0                    SETUP FOR EXECUTE INSTR\n         EX    R3,MOVEMSG              MOVE MSG TO GOTTEN AREA\n         ST    R1,IEMSGP               PUT ADDR IN PARMLIST AREA\n         BAL   R8,FREESAVE             GO FREE MY WORKAREA\n         LM    R14,R12,12(R13)         RESTORE REGS\n         LA    R15,IEMSG               GET RETURN CODE = 8\n         BR    R14                     GO BACK TO SYSTEM(FOR NOW)\n         SPACE 2\n*--------------------------------------------------------------------*\n*        RETURN WITH RET CODE = 16  BUT DO NOT DO FREEMAIN           *\n*        WE NEVER GOT AN AREA, SO DO NOT RESTORE R13                 *\n*--------------------------------------------------------------------*\n         SPACE 2\nRET16    EQU   *\n         LM    R14,R12,12(R13)\n         LA    R15,IEABORT             GET RETURN CODE = 16\n         BR    R14\n         SPACE 2\n*--------------------------------------------------------------------*\n*         DO FREEMAIN FOR SAVE AREAS WE GOT FOR IKJEFF10             *\n*--------------------------------------------------------------------*\n         SPACE 2\nFREESAVE EQU   *\n         LR    R1,R13                  POINT TO GOTTEN AREA\n         L     R13,4(R13)              GET BACK HIGH SAVE\n         FREEMAIN R,LV=ENDDUMMY-DUMMY,A=(1)\n         BR    R8                      GO BACK\n         SPACE 2\n         EJECT\n*--------------------------------------------------------------------*\n*        CONSTANTS                                                   *\n*--------------------------------------------------------------------*\n         DS    0H\nMOVEMSG  MVC   0(0,1),0(R8)\n         DS    0F\nMSG1     DC    AL2(MSG1END-MSG1)\n         DC    C'JOB CLASS INVALID, OR INVALID FOR YOUR USER ID '\nMSG1END  EQU   *\n*\nTRCLASS  DS    0D\n         PRINT OFF\n         LCLA  &T\n.LOOP    ANOP\n         DC    AL1(&T)\n&T       SETA  &T+1\n         AIF   (&T LE 191).LOOP\n         PRINT ON\n         DC    X'C0',C'ABCDEFGHI',X'CACBCCCDCECF'\n         DC    X'D0',C'J$$MNOPQ$',X'DADBDCDDDEDF'\n         DC    X'E0E1',C'ST$V$XYZ',X'EAEBECEDEEEF'\n         DC    C'$$$$$$$$$9',X'FAFBFDFEFF'\n*\n         LTORG\nDUMMY    DSECT\nSAVEREG  DS    18F\nPSCBADDR DS    F\nEXTLIST  EXTRACT MF=L\nENDDUMMY DS    0D\n         EJECT\n         IKJEFFIE IETYPE=SUBMIT\n         EJECT\n         IKJPSCB\n         SPACE 2\n         END   IKJEFF10\n./ ADD NAME=IKJEFF53                               13AUG93 18.34.23\n*  **PROPRIETARY_STATEMENT********************************************\n* *01* PROPRIETARY STATEMENT=                                        *\n*                                                                    *\n*                                                                    *\n*   LICENSED MATERIALS - PROPERTY OF IBM                             *\n*   THIS MACRO IS \"RESTRICTED MATERIALS OF IBM\"                      *\n*   5685-025 (C) COPYRIGHT IBM CORP. 1989                            *\n*   SEE COPYRIGHT INSTRUCTIONS                                       *\n*                                                                    *\n*   STATUS= JTE21X2                                                  *\n*                                                                    *\n*  **END_OF_PROPRIETARY_STATEMENT*************************************\n         TITLE 'IKJEFF53 - IBM-SUPPLIED FIB INSTALLATION EXIT'\n***********************************************************************\n*\n*   MODULE NAME = IKJEFF53\n*      LOAD MODULE NAME = IKJEFF53\n*\n*   DESCRIPTIVE NAME = IBM-supplied version of FIB installation exit\n*                      for systems using JESJOBS and JESSPOOL\n*\n*\n*\n*   FUNCTION =\n*      Validity checks JOBNAME entered on a CANCEL, OUTPUT, or\n*      STATUS FIB (Foreground Initiated Background) command.\n*      The TSO user is restricted from canceling or accessing\n*      output from a job that does not belong to the user.  An\n*      installation-supplied version of IKJEFF53 could do other\n*      types of validity checks.  See IKJEFFIE macro for details.\n*\n*      Note - For the CANCEL command, if the RACF JESJOBS class\n*      is active, then no checking will be done.  For the OUTPUT\n*      command, if the RACF JESSPOOL class is active, then no\n*      checking will be done.\n*\n*   OPERATION =\n*\n*         If the command is STATUS, return control to the caller\n*         of this routine.  Any JOBNAME is allowed.\n*\n*         If the command is CANCEL or OUTPUT, compare the USERID\n*         with the JOBNAME passed.  If the JOBNAME is not the\n*         USERID plus at least one character for CANCEL, or does\n*         not start with the USERID for OUTPUT, the JOBNAME is\n*         rejected.  Error message text and return code (indicating\n*         to issue PUTLINE MESSAGE) are passed back to the caller.\n*         Then this exit is called again so that it may free the\n*         message buffer and return the code that rejects the JOBNAME.\n*\n*         Note:\n*         The OUTPUT command allows the JOBNAME to be the USERID (the\n*         JOBNAME for the user's LOGON session) so the TSO user\n*         may access sysout data sets generated during foreground\n*         processing.\n*\n*   NOTES =\n*\n*      DEPENDENCIES =\n*         CHARACTER CODE DEPENDENCIES = EBCDIC.\n*\n*      RESTRICTIONS = N/A\n*\n*      REGISTER CONVENTIONS = STANDARD\n*\n*   PATCH LABEL = PATCH (UNUSED AND INITIALIZED TO 'ZAP'S)\n*\n*   MODULE TYPE = PROCEDURE\n*\n*      PROCESSOR = Assembler H\n*\n*      MODULE SIZE = See assembler listing.\n*\n*   ATTRIBUTES = RES:PROB.PGM.REGION, REFRESHABLE,\n*                KEY 8, SUPERVISOR STATE\n*\n*   ENTRY POINT = IKJEFF53 (only entry point)\n*\n*      PURPOSE = SEE FUNCTION\n*\n*      LINKAGE =\n*         From IKJEFF51 (CANCEL or STATUS COMMAND) via CALL.\n*         From IKJCT469 (OUTPUT command) via CALL.\n*\n*      INPUT = REGISTER 1 points to the parameter list\n*              For a description of the parm list, see IKJEFFIE macro\n*\n*      REGISTERS SAVED = 0 - 12 and 14 - 15\n*      REGISTERS USED =  All\n*      REGISTERS RESTORED = 0 - 14\n*\n*   EXIT - NORMAL = at end of program, to caller via BR 14\n*      CONDITIONS = See OPERATION\n*      OUTPUT = NONE\n*      RETURN CODE = ZERO\n*\n*   EXIT - ERROR =  at end of program, to caller via BR 14\n*      CONDITIONS = See OPERATION\n*      OUTPUT = MESSAGEP set in the input parameter list\n*      RETURN CODE = (possible return codes)\n*          4 - Issue PROMPT message and return reply\n*          8 - Issue PUTLINE message and return\n*         12 - Reject this job and continue processing\n*         16 - Terminate the command\n*         (This version of IKJEFF53 uses codes 8 and 12)\n*\n*   EXTERNAL REFERENCES =\n*\n*      ROUTINES = NONE\n*\n*      DATA AREAS = NONE\n*\n*      CONTROL BLOCKS = NONE\n*\n*      TABLES = NONE\n*\n*   MACROS = MODID, GETMAIN, FREEMAIN\n*      SERIALIZATION = NONE\n*\n*   MESSAGES =\n*      No messages are issued by this module.\n*\n*      However the following message texts are passed to the caller,\n*      which issues PUTLINE message IKJ56208I (if CANCEL) or message\n*      IKJ56328I (if OUTPUT) -\n*\n*         JOB <JOBNAME> REJECTED - JOBNAME MUST BE YOUR USERID\n*         PLUS AT LEAST ONE CHARACTER                    (for CANCEL)\n*\n*         JOB <JOBNAME> REJECTED - JOBNAME MUST BE YOUR USERID OR\n*         MUST START WITH YOUR USERID                    (for OUTPUT)\n*\n*      This module could also pass the caller text to be inserted\n*      into PUTGET message IKJ56208A or IKJ56328A.\n*\n*   ABEND CODES = NONE\n*\n*   CHANGE ACTIVITY =\n*     @E21X2B1 - TSO/E Version 2 Release 1.1                  @E21X2B1\n*\n***********************************************************************\n         EJECT\nIKJEFF53 CSECT ,\n         USING *,R15\n         MODID\n         DROP  R15\n         STM   R14,R12,12(R13)      Save the registers\n         LR    R12,R15              Set the base register\n         USING IKJEFF53,R12\n         L     R00,DYNSIZE          Size for GETMAIN\n         GETMAIN  R,LV=(0)          Get dynamic area\n         LR    R11,R01              Set the data register\n         USING DYNAREA,R11\n         ST    R13,SAVEAREA+4       Save backward pointer\n         LM    R00,R01,20(R13)      Restore regs used by GETMAIN\n         ST    R11,8(,R13)          Save forward pointer\n         LR    R13,R11              Set savearea pointer\n*\nINITIALIZE EQU *\n         LR    IEPTR,R01            Input parameter pointer\n         SLR   RETCODE,RETCODE      Initialize return code to \"OK\"\n*\n* Only do processing if caller is CANCEL or OUTPUT command\n*\n         L     R10,CODEP(,IEPTR)\n         CLI   CMNDCODE(R10),CANCEL Command is CANCEL\n         BE    CANCEL_OR_OUTPUT     Yes\n         CLI   CMNDCODE(R10),OUTPUT Command is OUTPUT\n         BNE   RETURN_TO_CALLER     No\nCANCEL_OR_OUTPUT EQU *\n         CLI   CMNDCODE(R10),CANCEL Command is CANCEL\n         BE    ISCANCEL             Yes\n*\n* For the OUTPUT command, check to see if the JESSPOOL class is active.\n* If it is, no JOBNAME checking will be done.  This will be to ensure\n* that the feature of JESSPOOL output \"ownership\" is not restricted by\n* this exit to JOBNAMEs that begin with USERID.\n*\n         RACSTAT CLASS='JESSPOOL'   Check JESSPOOL class\n         LTR   R15,R15              Check class for active\n         BZ    RETURN_TO_CALLER     Class is active, nothing to do\n         B     CHECK_JOBNAME        Class is not active, do checking\nISCANCEL EQU   *                    Command is CANCEL\n*\n* For the CANCEL command, check to see if the JESJOBS class is active.\n* If it is, no JOBNAME checking will be done.  This will be to ensure\n* that the feature of JESJOBS job \"ownership\" is not restricted by\n* this exit to JOBNAMEs that begin with USERID.\n*\n         RACSTAT CLASS='JESJOBS'    Check JESJOBS class\n         LTR   R15,R15              Check class for active\n         BZ    RETURN_TO_CALLER     Class is active, nothing to do\nCHECK_JOBNAME EQU *\n*\n* If no message issued for last entry\n*\n         L     R10,MESSAGEP(,IEPTR)\n         LTR   R10,R10              Is message buffer empty\n         BNZ   REJECT_COMMAND       Message was issued\n*\n* Check whether JOBNAME is valid\n*\n         L     R10,IDLENPTR(,IEPTR)\n         CLI   IDLENGTH(R10),0      Check USERID length\n         BE    JOBNAME_INVALID      If zero, command is invalid\n         L     R01,CODEP(,IEPTR)\n         CLI   CMNDCODE(R01),CANCEL Command is CANCEL\n         BNE   CHECK_OUTPUT_JOBNAME\n         L     R01,NAMELENP(,IEPTR)\n         SLR   R02,R02\n         IC    R02,IDLENGTH(,R10)   Get USERID length\n         CH    R02,JOBNAMEL(,R01)   Compare with JOBNAME length\n         BNL   JOBNAME_INVALID      Invalid if USERID \u00ac< JOBNAME length\n         L     R10,USERIDP(,IEPTR)\n         L     R01,JOBNAMEP(,IEPTR) Get JOBNAME length\n         BCTR  R02,0                Subtract for \"execute\"\n         EX    R02,COMPARE_USERID_AND_JOBNAME Compare\n         BNE   JOBNAME_INVALID      Invalid if not equal\n         B     RETURN_TO_CALLER     Else return\nCHECK_OUTPUT_JOBNAME EQU *\n         L     R10,NAMELENP(,IEPTR)\n         L     R01,IDLENPTR(,IEPTR)\n         SLR   R02,R02\n         IC    R02,IDLENGTH(,R01)   Get USERID length\n         CH    R02,JOBNAMEL(,R10)   Compare with JOBNAME length\n         BH    JOBNAME_INVALID      Invalid if USERID > JOBNAME length\n         L     R10,USERIDP(,IEPTR)\n         L     R01,JOBNAMEP(,IEPTR) Get JOBNAME length\n         BCTR  R02,0                Subtract for \"execute\"\n         EX    R02,COMPARE_USERID_AND_JOBNAME Compare\n         BE    RETURN_TO_CALLER     Valid if equal\nJOBNAME_INVALID EQU *\n*\n* Jobname is invalid.  Build message saying JOBNAME is rejected\n*\n         L     R00,GETMINFO         Subpool and length of message area\n         GETMAIN R,LV=(0)               GET MESSAGE BUFFER\n         ST    R01,MESSAGEP(,IEPTR) Move msg buff ptr to parm list\n         L     R10,MESSAGEP(,IEPTR)\n         MVI   REJMSG(R10),C' '     Move in one blank\n         MVC   REJMSG+1(83,R10),REJMSG(R10) Init buffer with blanks\n         MVC   REJMLEN(2,R10),MSGLENTH Maximum length\n         MVI   REJJOB+3(R10),C' '   Move in one blank\n         MVC   REJJOB(3,R10),JOBCONST Put in \"JOB\"\n         L     R01,NAMELENP(,IEPTR)\n         LH    R02,JOBNAMEL(,R01)   Get JOBNAME length\n         LR    R03,R02              Make a copy\n         BCTR  R03,0                Subtract for \"execute\"\n         L     R01,JOBNAMEP(,IEPTR)\n         EX    R03,MOVE_JOBNAME     Insert the bad JOBNAME\n         AL    R02,TWO              Get offset of blank after JOBNAME\n         LR    TEMPOFST,R02         Index past blank after JOBNAME\n         L     R01,CODEP(,IEPTR)\n         CLI   CMNDCODE(R01),CANCEL Command is CANCEL\n         BNE   DO_OUTPT             Must be OUTPUT\n         ALR   R10,TEMPOFST\n         MVC   REJSLOT-1(66,R10),REJTEXT1 Move in reason for rejection\n         B     SET_RC\nDO_OUTPT L     R10,MESSAGEP(,IEPTR)\n         ALR   R10,TEMPOFST\n         MVC   REJSLOT-1(69,R10),REJTEXT2 Move in reason for rejection\nSET_RC   LA    RETCODE,8            Set return code\n         B     RETURN_TO_CALLER\nREJECT_COMMAND EQU *\n*\n* Second time entry (free message buffer and reject JOBNAME)\n*\n         LA    RETCODE,12           Set return code\n         L     R01,MESSAGEP(,IEPTR) Get message buffer\n         L     R00,GETMINFO         Subpool and length of message area\n         FREEMAIN  R,LV=(0),A=(1)   Free message buffer\n         SLR   R10,R10\n         ST    R10,MESSAGEP(,IEPTR) Reset message buffer\nRETURN_TO_CALLER EQU *\n*\n* Return to caller (STATUS, CANCEL, or OUTPUT command)\n*\n         L     R13,4(,R13)          Get previous savearea\n         L     R00,DYNSIZE          Size for FREEMAIN\n         LR    R01,R11              Address for FREEMAIN\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,RETCODE          Set Return Code\n         L     R14,12(,R13)         Restore Retreg\n         LM    R00,R12,20(R13)      Restore rest of regs\n         BR    R14                  Return\n*\n* Dynamic area of module data\n*\nDYNAREA  DSECT\nSAVEAREA DS    18F\nINPPARMS DS    1F\n         DS    0D\n         ORG   *+1-(*-DYNAREA)/(*-DYNAREA) INSURE DSECT DATA\nENDDYN   EQU   *\n*\n* Static area of module constants\n*\nIKJEFF53 CSECT\nSTATAREA DS    0H\nMSGLENTH DC    H'84'\nCOMPARE_USERID_AND_JOBNAME CLC USERID(0,R10),IEJOBNM(R01)\nMOVE_JOBNAME MVC REJSLOT(0,R10),IEJOBNM(R01)\nTWO      DC    F'2'\n         DS    0F\nDYNSIZE  DC    AL1(0)\n         DC    AL3(((ENDDYN-DYNAREA+7)/8)*8)\n         DS    0D\nJOBCONST DC    C'JOB'\nREJTEXT1 DC    CL66'REJECTED - JOBNAME MUST BE YOUR USERID PLUS AT LEASC\n               T ONE CHARACTER'\nREJTEXT2 DC    CL69'REJECTED - JOBNAME MUST BE YOUR USERID OR MUST STARC\n               T WITH YOUR USERID'\n         DS    CL2\nGETMINFO DS    CL4\n         ORG   GETMINFO\nGETMSP   DC    AL1(0)\nGETMLEN  DC    AL3(84)\n         ORG   GETMINFO+4\nPATCH    DS    CL21\n         ORG   PATCH\nPTCHINIT DC    7CL3'ZAP'\n         ORG   PATCH+21\nR00      EQU   00                      EQUATES FOR REGISTERS 0-15\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nTEMPOFST EQU   R05\nRETCODE  EQU   R05\nIEPTR    EQU   R04\nCANCEL   EQU   4\nOUTPUT   EQU   8\nREJMSG   EQU   0\nREJMLEN  EQU   REJMSG\nREJJOB   EQU   REJMSG+2\nREJSLOT  EQU   REJMSG+6\nPARMLIST EQU   0\nJOBNAMEP EQU   PARMLIST\nNAMELENP EQU   PARMLIST+4\nUSERIDP  EQU   PARMLIST+8\nIDLENPTR EQU   PARMLIST+12\nMESSAGEP EQU   PARMLIST+16\nREPLYP   EQU   PARMLIST+20\nCODEP    EQU   PARMLIST+24\nJOBIDP   EQU   PARMLIST+28\nJIDLENP  EQU   PARMLIST+32\nIEOUTPLP EQU   PARMLIST+36\nIEJOBNM  EQU   0\nJOBNAMEL EQU   0\nUSERID   EQU   0\nIDLENGTH EQU   0\nCMNDCODE EQU   0\nMESSAGE  EQU   0\nIEREPLY  EQU   0\nIEOUTPL  EQU   0\nIESYNTAX EQU   IEOUTPL+16\nIEJOBID  EQU   0\nJIDLEN   EQU   0\nPARM     EQU   0\n         DS    0D\nENDSTAT  EQU   *\n         END   IKJEFF53\n./ ADD NAME=JESUX008                               13AUG93 18.34.23\nJESUX008 TITLE 'JES2 USER EXIT 8: MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: JESUX008                                               *\n*                                                                     *\n* DESCRIPTIVE NAME: JES2 EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT  *\n*                                                                     *\n* AUTHOR: VIC COZZOLI                                                 *\n*         WELLS FARGO BANK, N.A. (WFB)                                *\n*         525 MARKET STREET, A.U. 8513                                *\n*         SAN FRANCISCO, CALIFORNIA  94163                            *\n*         PHONE: (510) 686-7578 - 11/12/91 (CONCORD DATA CENTER)      *\n*                                                                     *\n* DATE WRITTEN: NOVEMBER 1983                                         *\n*                                                                     *\n* FMID: HJE3313 (MVS/ESA JES2 3.1.3)                                  *\n*                                                                     *\n* PURPOSE: THIS EXIT PLACES OBTAINS AND STORES IN THE JCT EITHER      *\n*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *\n*          THE ABEND CODE OF THE JOB.                                 *\n*                                                                     *\n* INVOCATION POINT: EXIT008                                           *\n*                                                                     *\n* ENTRY POINT: UEXIT008                                               *\n*                                                                     *\n* REGISTERS ON INPUT:                                                 *\n*     R0: CODE PASSED BY JES2                                         *\n*         =0, INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL         *\n*         =4, INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL         *\n*     R1: ADDRESS OF THE JCT                                          *\n*     R2-R10: N/A                                                     *\n*     R11: ADDRESS OF THE SSVT                                        *\n*     R12: N/A                                                        *\n*     R13: ADDRESS OF AN OS-STYLE SAVE AREA                           *\n*     R14: RETURN ADDRESS                                             *\n*     R15: ENTRY ADDRESS                                              *\n*                                                                     *\n* REGISTERS ON RETURN:                                                *\n*     R0-R1: N/A                                                      *\n*     R15: A RETURN CODE:                                             *\n*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *\n*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *\n*              PROCESSING                                             *\n*                                                                     *\n* JES2 MACROS USED:                                                   *\n*     $ENTRY, $MODEND                                                 *\n*                                                                     *\n* LAST CHANGE: BY TOM LITNEY FOR JES2 2.1.5, CHANGES IDENTIFIED BY    *\n*              'TL' ON LINE.                                          *\n*                                                                     *\n*              BY CHRIS NIELSEN FOR JES2 3.1.1 CHANGED JCTXBACH TO    *\n*              JCTXBMII.  CHANGES IDENTIFIED BY CN ON LINE.           *\n*                                                                     *\n* UPDATED 12NOV91, WILLIAM SMITH, CHARLES SCHWAB & CO.,               *\n*                  101 MONTGOMERY STREET, DEPT. OSVS, 5TH FLOOR,      *\n*                  SAN FRANCISCO, CA 94104-4122 (415) 627-7607        *\n*                                                                     *\n* . MANUALLY UPDATED THE SOURCE WITH HARDCOPY SUPPLIED TO ME BY       *\n*   CHRIS NIELSEN AT WELLS FARGO BANK IN CONCORD, CA (510) 686-7576   *\n*   FOR USE WITH MVS/ESA JES2/3.1.3.                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nJESUX008 $MODULE ENVIRON=USER,NOTICE=NONE,                             C\n               TITLE='JES2 EXIT008 MAX CONDITION CODE/ABEND SUPPORT',  C\n               $BUFFER,                REQ'D BY JCT                    C\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C\n               $HCCT,                  REQ'D TO DETERMINE INVOKER      C\n               $JCT,                   REQ'D TO SAVE ABEND/COND CODE   C\n               $MIT,                   REQ'D BY $MODEND, HCT           C\n               $SCAT,                  REQ'D BY $SVT                   C\n               $SJB,                   REQ'D TO DETERMINE INVOKER      C\n               $XECB,                  REQ'D BY $SVT                   C\n               SSOB                    REQ'D TO DETERMINE INVOKER\n         TITLE 'JES2 USER EXIT 8: MAX COND CODE/ABEND CODE SUPPORT'\n*  $SVT,  'REQ'D TO DETERMINE INVOKER, CHANGE TO $HCCT JES2 3.1      LB\n***********************************************************************\n*                                                                     *\n*  INITIALIZATION                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUEXIT008 $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE 3\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         LR    R10,R1                  GET ADDRESS OF JCT\n         USING JCT,R10                 ESTABLISH ADDRESSABILITY      TL\n         SLR   R15,R15                 SET DEFAULT RETURN CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THERE IS A JCT , IF IT IS FOR A BATCH JOB AND      *\n*  IF NOTIFY WAS REQUESTED.  IF NOT, RETURN.                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTR   R0,R0                   IS JCT BEING READ?\n         BZ    RETURN                  YES, RETURN\n         SPACE 1\n         CLI   JCTJOBID,C'J'           IS THIS A BATCH JOB?\n         BNE   RETURN                  NO, RETURN\n         SPACE 1\n         CLI   JCTTSUID,C' '           WAS NOTIFY REQUESTED?\n         BE    RETURN                  NO, RETURN\n         SPACE 1\n*        TM    JCTJBOPT,JCTXBACH       IS THIS AN EXECUTION BATCH\n         TM    JCTJBOPT,JCTXBMII       IS THIS AN EXECUTION BATCH      C\n                                         MONITOR?                    CN\n         BO    RETURN                  YES, RETURN\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  FIND THE SJB ON THE JOBS EXECUTING BY CLASS QUEUE THAT BELONGS TO  *\n*  THIS JOB'S JCT.  IF THE SJB INDICATES THE JOB IS NOT IN            *\n*  TERMINATION, THEN RETURN.                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        USING SVT,R11                 PROVIDE SSVT ADDRESSABILITY   TL\n         USING HCCT,R11                PROVIDE SSVT ADDRESSABILITY   LB\n         SPACE 1\n*        L     R2,SVTJXCLS             GET EXECUTING SJB'S QUEUE     TL\n         L     R2,CCTJXCLS             GET EXECUTING SJB'S QUEUE     LB\n         USING SJB,R2                  PROVIDE SJB ADDRESSABILITY    TL\nGETSJB   DS    0H\n         LTR   R2,R2                   TEST FOR END OF QUEUE\n         BZ    RETURN                  RETURN IF NO MATCH\n         CLC   JCTJOBID(8),SJBJOBID    IS THIS THE SJB FOR THIS JCT?\n         BE    FOUNDSJB                YES, PROCESS IT\n         L     R2,SJBXQCHN             GET POINTER TO NEXT SJB\n         B     GETSJB                  LOOP BACK THRU\n         SPACE 1\nFOUNDSJB DS    0H\n         CLI   SJBXQFN1+1,SSOBTERM     WAS EXIT INVOKED BY JOB         C\n                                         TERMINATION (HOSTERM)?\n         BNE   RETURN                  NO, RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*  FIND THE OS JCT FOR THIS JOB AND CHECK TO SEE IF THE JOB ABENDED.  *\n*  IF IT DID ABEND, GET THE ABEND CODE.                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETCVT   EQU   *\n         L     R2,CVTPTR               LOAD ADDR OF CVT POINTER\n         L     R2,0(R2)                LOAD ADDR OF NEXT/CURR TCB'S\n         L     R2,OURTCB(R2)           LOAD ADDR OF OUR TCB\n         L     R2,TCBJSCB(R2)          LOAD ADDR OF JSCB\n         L     R2,JSCBACT(R2)          LOAD ADDR OF ACTIVE JSCB\n         L     R2,JSCBJCT(R2)          LOAD ADDR OF OS JCT\n         USING INJMJCT-16,R2           ESTABLISH OS JCT ADDRESSABILITY\n         SPACE 1\n         TM    JCTJSTAT,JCTABEND       DID JOB ABEND?\n         BNO   GETMAXCC                NO, GET MAXIMUM CONDITION CODE\n         L     R3,JCTACODE             YES, GET ABEND CODE\n         B     SAVECODE                GO TO SAVE IT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  IF THE JOB DID NOT ABEND, THEN SCAN THE SCT'S FOR THE JOB AND      *\n*  FIND THE MAXIMUM CONDITION CODE OUT OF ALL THE JOB'S STEPS.        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETMAXCC DS    0H\n         L     R2,JCTSDKAD             GET FIRST SCT ADDRESS\n         USING INSMSCT-16,R2           ESTABLISH SCT ADDRESSABILITY\n         SPACE 1\n         SLR   R3,R3                   ZERO OUT WORK REGISTER\n         SPACE 1\nSCTLOOP  DS    0H\n         SRL   R2,8                    GET ADDRESS IN PROPER FORM\n         LTR   R2,R2                   ARE THERE ANY MORE SCT'S?\n         BZ    SAVECODE                NO, GO TO FINISH\n         TM    SCTSTEND,SCTSTRUN       DID STEP RUN?\n         BNO   NEXTSCT                 NO, GET NEXT SCT\n         CH    R3,SCTSEXEC             IS THIS STEP'S CONDITION CODE   C\n                                         GREATER THAN THE MAXIMUM?\n         BNL   NEXTSCT                 NO, GET NEXT SCT\n         LH    R3,SCTSEXEC             YES, SAVE NEW MAX COND CODE\nNEXTSCT  DS    0H\n         L     R2,SCTANSCT             GET NEXT SCT\n         B     SCTLOOP                 LOOP TO CHECK NEXT SCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SAVE EITHER THE ABEND CODE OR THE MAXIMUM CONDITION CODE FOR       *\n*  ANY STEP OF THE JOB IN A JCT USER FIELD.  THIS INFORMATION WILL    *\n*  BE USED LATER IN EXIT016 - TSO NOTIFY.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSAVECODE DS    0H\n         ST    R3,JCTUSER1             SAVE ABEND/MAX COND CODE\n         MVI   JCTUSER1,X'80'          MARK IT AS PROCESSED\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  GO BYE-BYE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRETURN   DS    0H\n         L     R14,12(R13)             LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)          RESTORE REGISTERS\n         BR    R14                     RETURN\n         EJECT\nPATCH    DS    CL200\n         DC    CL8'ENDPATCH'\nCVTPTR   EQU   X'10'         ADDRESS OF CVT POINTER\nOURTCB   EQU   X'04'         OFFSET INTO TCB LIST OF OUR TCB ADDRESS\nTCBJSCB  EQU   X'B4'         OFFSET INTO TCB OF JSCB ADDRESS\nJSCBACT  EQU   X'15C'        OFFSET INTO JSCB OF ACTIVE JSCB ADDRESS\nJSCBJCT  EQU   X'104'        OFFSET INTO ACTIVE JSCB OF OS JCT ADDRESS\n         SPACE 3\nJCTDSCT  DSECT\n*        THIS CONTROL BLOCK IS A COPY OF OS JCT DEFINING\n*        ONLY THOSE FIELDS USED BY THIS MOD.  THE OS JCT,\n*        IEFAJCTB, CONTAINS DUPLICATE FIELD NAMES OF THOSE\n*        USED BY THE JES2 JCT (JCTID, JCTJNAM, AND JCTJMR)\n*        AND CAUSES ASSEMBLY ERRORS IF IT USED.\nINJMJCT  EQU    *\n         DS     CL5                    FILLER\nJCTJSTAT DS     1C                     JOB STATUS INDICATORS\nJCTABEND EQU    8                      BIT 4 - JCT ABEND BIT\n         DS     CL26                   FILLER\nJCTSDKAD DS     CL4                    DISK ADDRESS OF FIRST SCT\n         DS     CL132                  FILLER\nJCTACODE DS     CL4                    ABEND CODE FIELD\n         EJECT\n         PUSH   PRINT\n         PRINT  NOGEN\nSCTDSCT  DSECT\n         IEFASCTB\nSCTSTRUN EQU    X'C0'                  STEP STARTED/ENDED BIT\n         POP    PRINT\nJESUX008 CSECT\n         SPACE  3\n         LTORG\n        $MODEND\n         END\n./ ADD NAME=JESUX013                               13AUG93 18.34.23\nJESUX013 TITLE 'JES2 EXIT13 TSO/E NOTIFY EXIT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME = JESUX013 CSECT                                        *\n*                                                                     *\n* DESCRIPTIVE NAME = TSO/E INTERACTIVE DATA TRANSMISSION FACILITY     *\n*                    SCREENING AND NOTIFICATION                       *\n*                                                                     *\n* STATUS = OS/VS2 - SEE $MODULE EXPANSION BELOW FOR FMID, VERSION     *\n*                                                                     *\n* FUNCTION = THIS IS A SAMPLE JES2 EXIT THAT EXISTS FOR THE SOLE      *\n*            PURPOSE OF SETTING THE RETURN CODE TO 8 SO THAT JES2     *\n*            WILL NOTIFY USERS OF INCOMING FILES FROM THE TSO/E       *\n*            INTERACTIVE DATA TRANSMISSION FACILITY.                  *\n*                                                                     *\n* NOTES = SEE BELOW                                                   *\n*                                                                     *\n*    DEPENDENCIES = 1) JES2 EXIT EFFECTOR                             *\n*                                                                     *\n*    RESTRICTIONS = THIS CODE IS PROVIDED AS AN EXAMPLE OF INSTALL-   *\n*                   ATION EXTENSIONS TO JES2.  THIS CODE IS NOT TO    *\n*                   CONSIDERED TYPE 1 SUPPORTED CODE OF IBM.  ANY     *\n*                   PROBLEMS ENCOUNTERED IN THE USE OF THIS SAMPLE    *\n*                   CODE IS A USER RESPONSIBILITY.  THE IBM SUPPORT   *\n*                   CENTER DOES NOT SUPPORT USER EXTENSIONS OR        *\n*                   SAMPLE USER EXITS.                                *\n*                                                                     *\n*    REGISTER CONVENTIONS = SEE ENTRY POINT DOCUMENTATION             *\n*                                                                     *\n*    PATCH LABEL = NONE                                               *\n*                                                                     *\n* MODULE TYPE = CSECT                                                 *\n*                                                                     *\n*    PROCESSOR = OS/VS ASSEMBLER H                                    *\n*                                                                     *\n*    MODULE SIZE = SEE $MODEND MACRO EXPANSION AT END OF ASSEMBLY     *\n*                                                                     *\n*    ATTRIBUTES = REENTRANT, SUPERVISOR STATE, PROTECT KEY OF         *\n*                 HASP'S (1), RMODE 24, AMODE 24/31                   *\n*                                                                     *\n* ENTRY POINT = EXIT13                                                *\n*                                                                     *\n*    PURPOSE = SEE FUNCTION                                           *\n*                                                                     *\n*    LINKAGE = STANDARD MVS LINKAGE                                   *\n*                                                                     *\n* EXIT-NORMAL = RETURN TO CALLER                                      *\n*                                                                     *\n* EXIT-ERROR = NONE                                                   *\n*                                                                     *\n* EXTERNAL REFERENCES = SEE BELOW                                     *\n*                                                                     *\n*    ROUTINES = MISCELLANEOUS JES2 SERVICE ROUTINES                   *\n*                                                                     *\n*    DATA AREAS = SEE $MODULE MACRO EXPANSION                         *\n*                                                                     *\n*    CONTROL BLOCKS = SEE $MODULE MACRO EXPANSION                     *\n*                                                                     *\n* TABLES = SEE $MODULE MACRO DEFINITION (BELOW)                       *\n*                                                                     *\n* MACROS = JES2 - $ENTRY, $MODEND, $MODULE, $RETURN, $SAVE            *\n*                                                                     *\n* MACROS = MVS  - NONE                                                *\n*                                                                     *\n* CHANGE ACTIVITY:                                                    *\n*                                                                     *\n*        @311    MVS/SP-JES2 VERSION 3 RELEASE 1 LEVEL 1              *\n*                (SP3.1.1, HJE3311)                                   *\n*                                                                     *\n***********************************************************************\n         TITLE 'JES2 EXIT13 TSO/E NOTIFY EXIT -- PROLOG ($HASPGBL)'\n         COPY  $HASPGBL            COPY HASPGBL PARAMETERS\nJESUX013 $MODULE ENVIRON=JES2,NOTICE=NONE,                             C\n               TITLE='JES2 EXIT13 TSO/E NOTIFY EXIT',                  C\n               $CADDR,             GENERATE HASP CADDR DSECT           C\n               $DTE,               GENERATE HASP DTE DSECT             C\n               $ERA,               GENERATE HASP ERA DSECT             C\n               $HASPEQU,           GENERATE HASP EQUATES               C\n               $HCT,               GENERATE HASP HCT DSECT             C\n               $MIT,               GENERATE HASP MIT DSECT             C\n               $PADDR,             GENERATE HASP PADDR DSECT           C\n               $PARMLST,           GENERATE HASP PARMLST DSECT         C\n               $PCE,               GENERATE HASP PCE DSECT             C\n               $PSV,               GENERATE HASP PSV DSECT             C\n               $TQE,               GENERATE HASP TQE DSECT             C\n               $USERCBS,           GENERATE HASP USERCBS DSECT         C\n               $XECB               GENERATE HASP XECB DSECT\nUEXIT013 $ENTRY BASE=R12\n        $SAVE\n         LR    R12,R15             LOAD BASE REGISTER\n        $RETURN RC=8               RETURN TO CALLER\n        $MODEND\n         END   ,                   END OF HASX13A\n./ ADD NAME=JESUX016                               13AUG93 18.34.23\nJESUX016 TITLE 'JES2 USER EXIT 16: MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: JESUX016                                               *\n*                                                                     *\n* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT  *\n*                                                                     *\n* AUTHOR: VIC COZZOLI                                                 *\n*         WELLS FARGO BANK, N.A. (WFB)                                *\n*         525 MARKET STREET, A.U. 8513                                *\n*         SAN FRANCISCO, CALIFORNIA  94163                            *\n*         PHONE: (510) 686-7578 - 11/12/91 (CONCORD DATA CENTER)      *\n*                                                                     *\n* DATE WRITTEN: NOVEMBER 1983                                         *\n*                                                                     *\n* FMID: HJE3313 (MVS/ESA JES2 3.1.3)                                  *\n*                                                                     *\n* PURPOSE: THIS EXIT MODIFIES THE $HASP165 MESSAGE BY ADDING EITHER   *\n*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *\n*          THE ABEND CODE OF THE JOB.                                 *\n*                                                                     *\n* ENTRY POINT: UEXIT016                                               *\n*                                                                     *\n* REGISTERS ON INPUT:                                                 *\n*     R0: 0                                                           *\n*     R1: ADDRESS OF 3-WORD PARMETER LIST WITH THE FOLLOWING LAYOUT:  *\n*         WORD 1 (+0) ADDRESS OF THE MESSAGE TO BE SEND               *\n*         WORD 2 (+4) ADDRESS OF THE $WTO PARAMETER LIST              *\n*         WORD 3 (+8) ADDRESS OF THE JCT                              *\n*     R2-R10: N/A                                                     *\n*     R11: ADDRESS OF THE HCT                                         *\n*     R12: N/A                                                        *\n*     R13: ADDRESS OF THE OUTPUT PROCESSOR PCE                        *\n*     R14: RETURN ADDRESS                                             *\n*     R15: ENTRY ADDRESS                                              *\n*                                                                     *\n* REGISTERS ON RETURN:                                                *\n*     R0: N/A                                                         *\n*     R1: ADDRESS OF THE 3-WORD PARAMETER LIST                        *\n*     R15: A RETURN CODE:                                             *\n*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *\n*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *\n*              PROCESSING                                             *\n*          =8, TELLS JES2 NOT TO ISSUE THE NOTIFY $WTO                *\n*                                                                     *\n* JES2 MACROS USED:                                                   *\n*     $ENTRY, $SAVE, $RETURN, $MODEND                                 *\n*                                                                     *\n* LAST UPDATE: BY TOM LITNEY FOR JES2 2.1.5, CHANGES ARE IDENTIFIED   *\n*              BY 'TL' ON LINE                                        *\n*                                                                     *\n*              HARD CODED EQUATES REMOVED FOR JES2 2.2.0, ADDED CHECK *\n*              FOR FIRST TIME CALL.                                   *\n*                                                                     *\n*              BY CHRIS NIELSEN FOR JES2 2.2.0, REMOVED HARD CODED    *\n*              EQUATES AND ADDED CHECK FOR FIRST TIME CALL.           *\n*                                                                     *\n* UPDATED 12NOV91, WILLIAM SMITH, CHARLES SCHWAB & CO.,               *\n*                  101 MONTGOMERY STREET, DEPT. OSVS, 5TH FLOOR,      *\n*                  SAN FRANCISCO, CA 94104-4122 (415) 627-7607        *\n*                                                                     *\n* . MANUALLY UPDATED THE SOURCE WITH HARDCOPY SUPPLIED TO ME BY       *\n*   CHRIS NIELSEN AT WELLS FARGO BANK IN CONCORD, CA (510) 686-7576   *\n*   FOR USE WITH MVS/ESA JES2/3.1.3.                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nJESUX016 $MODULE ENVIRON=JES2,                                         C\n               TITLE='JES2 EXIT016 MAX CONDITION CODE/ABEND SUPPORT',  C\n               $BUFFER,                REQ'D BY JCT                    C\n               $CAT,                   REQ'D BY HCT                    C\n               $CMB,                   REQ'D TO MAP $WTO PARM LIST     C\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C\n               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   C\n               $JCT,                   REQ'D TO GET JOBNAME, ETC.      C\n               $JQE,                   REQ'D BY HCT                    C\n               $MIT,                   REQ'D BY $MODEND, HCT           C\n               $PCE,                   REQ'D TO GET PROCESSOR INFO     C\n               SSOB                    REQ'S FOR IEJSSJT\n*              IEFSSJT ,               REQ'D TO GET JCTJFLG EQUATES  TL\n*              IEFJSSOB CS ,           REQ'D FOR IEFSSJT             TL\n         TITLE 'JES2 USER EXIT 16: MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n*  INITIALIZATION                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE  1\nUEXIT016 $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE  2\n        $SAVE                          SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         L     R10,8(R1)               LOAD JCT ADDRESS\n         USING JCT,R10                 ESTABLISH ADDRESSABILITY\n         SLR   R15,R15                 SET DEFAULT RETURN CODE\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THIS IS FIRST MESSAGE INDICATING END OF JOB        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTR   R0,R0                   IS THIS FIRST MESSAGE ?       CN\n         BNZ   RETURN                  NO, RETURN                    CN\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE HAS     *\n*  BEEN SAVED.  IF NOT, RETURN.                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CLI   JCTUSER1,X'80'          IS JOB'S ABEND/MAX CC SAVED ?\n         BNE   RETURN                  NO, RETURN\n         CLI   JCTJTFLG,SSJTJFAL       IS MESSAGE TO BE ALTERED ?    CN\n         BE    RETURN                  NO, SKIP\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PREPARE TO ALTER THE NOTIFY MESSAGE.                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         L     R4,4(R1)                GET ADDRESS OF $WTO PARM LIST\n         USING CMBWTOPL,R4             ESTABLISH $CMD ADDRESSABILITY\n         SLR   R5,R5                   ZERO WORK REGISTER\n         IC    R5,CMBML                GET MESSAGE LENGTH\n         CH    R5,=H'68'               MSG TOO LONG TO UPDATE IN PLACE?\n         BH    RETURN                  YES, RETURN (SHOULDN'T HAPPEN)\n         L     R6,0(R1)                GET ADDRESS IF MESSAGE TEXT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THE JOB ABENDED.  IF IT DID, GET THE ABEND CODE.   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         TM    JCTJTFLG,SSJTABND       DID JOB ABEND?                TL\n         BZ    MAXCONDC                NO, GO GET MAXIMUM COND CODE\n         SPACE 1\n         BCTR  R5,0                    DECREMENT PTR BY 1            CN\n         BCTR  R5,0                    DECREMENT PTR BY 1            CN\n         AR    R6,R5                   POINT PAST EXISTING MESSAGE TEXT\n         CLI   0(R6),C' '              BLANK CHAR ?                  CN\n         BE    NOINCR                  YES, DON'T REINCREMENT        CN\n         LA    R6,2(R6)                NO, RESET PTR TO ORIG POINT   CN\n         LA    R5,2(R5)                RESET ORIGINAL LENGTH         CN\nNOINCR   EQU   *                                                     CN\n         L     R2,JCTUSER1             GET ABEND CODE\n         LA    R2,0(R2)                CLEAR HIGH ORDER BYTE\n         SRL   R2,12                   OBTAIN SYSTEM CODE\n         LTR   R2,R2                   WAS IT A SYSTEM CODE ABEND?\n         BZ    USRABEND                NO, GO PROCESS USER CODE ABEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ABENDED WITH A SYSTEM ABEND CODE, COME HERE TO ALTER    *\n*  THE NOTIFY MESSAGE TO INCLUDE THE SYSTEM ABEND CODE.               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSYSABEND DS    0H\n         LA    R5,10(R5)               INCR. MSG LENGTH\n         MVC   0(10,R6),=C'SYSTEM XXX' ADD SYSTEM ABEND CODE TO MSG\n         SRDL  R2,12                   CONVERT IT TO HEX\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,7(R6)                       \"\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,8(R6)                       \"\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,9(R6)                       \"\n         B     STORELEN                GO CHECK NEW MESSAGE LENGTH\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ABENDED WITH A USER ABEND CODE, COME HERE TO ALTER THE  *\n*  NOTIFY MESSAGE TO INCLUDE THE USER ABEND CODE.                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUSRABEND DS    0H\n         LA    R5,9(R5)                INCR. MSG LENGTH\n         MVC   0(9,R6),=C'USER XXXX'   ADD USER ABEND CODE TO MSG\n         LH    R2,JCTUSER1+2           GET USER ABEND CODE\n         CVD   R2,5(R6)                CONVERT TO DECIMAL\n         UNPK  5(4,R6),5(8,R6)         UNPK FOUR LOW DIGITS\n         OI    8(R6),X'F0'             SET ZONE\n         MVC   9(2,R6),=C'  '          CLEAR TWO  BYTES\n         B     STORELEN                GO CONVERT TO DEC/PRINTABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ENDED NORMALLY, COME HERE TO ALTER THE NOTIFY MESSAGE   *\n*  TO INCLUDE THE MAXIMUM CONDITION CODE FOR ANY STEP IN THE JOB.     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMAXCONDC DS    0H\n         AR    R6,R5                   POINT PAST EXISTING MESSAGE TEXT\n         MVC   0(20,R6),=C'- MAX COND CODE XXXX'  ADD MAXCC TO MSG\n         LA    R5,20(R5)               INCR. MESSAGE LENGTH\n         LH    R2,JCTUSER1+2           GET MAX CONDITION CODE\n         CVD   R2,16(R6)               CONVERT TO DECIMAL\n         UNPK  16(4,R6),16(8,R6)       UNPK FOUR LOW DIGITS\n         OI    19(R6),X'F0'            SET ZONE\n         MVC   20(2,R6),=C'  '         CLEAR TWO  BYTES\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  STORE NEW MESSAGE LENGTH IN CMB PARM LIST.                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSTORELEN DS    0H\n         STC   R5,CMBML                STORE MSG LEN IN CMB PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  GO BYE-BYE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRETURN   DS    0H\n        $RETURN RC=(R15)               RETURN TO CALLER\n         EJECT\nCONVTABL DC    CL16'0123456789ABCDEF'  CONVERSION TABLE\n         LTORG\n        $MODEND\n         END\n./ ADD NAME=INMXZ02                                13AUG93 18.34.23\n***********************************************************************\n*                                                                     *\n*  MODULE NAME:  INMXZ02                                              *\n*                                                                     *\n*  DESCRIPTION:  SCHWAB (SFO) TSO/E TRANSMIT TERMINATION EXIT         *\n*                                                                     *\n*       STATUS:  TSO/E RELEASE 1.3, 1.4, 2.1, 2.3.1 (ESA/4.2.2)       *\n*                                                                     *\n*     FUNCTION:  ISSUE EQUIVALENT OF \"$HASP549 MAIL FROM\" MESSAGE     *\n*                TO NOTIFY RECEIVING USERS OF LOCAL NODE TRANSMIT.    *\n*                (LOCAL TRANSMIT DOES NOT PASS THROUGH JES EXIT 13).  *\n*                                                                     *\n*    OPERATION:  -  SEARCH ADDRESS LIST FOR LOCAL NODE.               *\n*                -  IF FOUND, VERIFY OUTPUT TARGET IS JES SYSOUT      *\n*                   AND TRANSMISSION SUCCESSFULLY COMPLETED.          *\n*                -  ISSUE \"SE '$HASP549...',USER(),LOGON\" VIA SVC34   *\n*                -  ALWAYS RETURN CONDITION ZERO (CONTINUE TRANSMIT). *\n*                                                                     *\n*    REGISTERS:  R0  -  PARM/WORK REGISTER                            *\n*                R1  -  PARM/WORK REGISTER                            *\n*                R2  -  WORK REGISTER (ALSO USED TO PASS RC TO R15)   *\n*                R3  -  POINTER TO FROM-NODE NAME                     *\n*                R4  -  MACHINE LENGTH OF FROM-NODE NAME              *\n*                R5  -  POINTER TO CURRENT TO-USER DATA               *\n*                R6  -  POINTER TO FROM-USER ID                       *\n*                R7  -  MACHINE LENGTH OF FROM-USER ID                *\n*                R8  -  MACHINE LENGTH OF NUMBER OF RECORDS XMITTED   *\n*                R11 -  POINTER TO INPUT PARAMETER LIST               *\n*                R12 -  BASE REGISTER                                 *\n*                R13 -  BASE REGISTER FOR WORKAREA                    *\n*                R14 -  RETURN REGISTER                               *\n*                R15 -  RETURN CODE REGISTER                          *\n*                                                                     *\n*   ATTRIBUTES:  KEY 8, PROBLEM STATE, APF ON, REENTRANT              *\n*                                                                     *\n*        INPUT:  R1, POINTER TO PARAMETER LIST, SEE PL@LIST           *\n*                                                                     *\n*       OUTPUT:  TSO MAIL MESSAGE ISSUED VIA OPERATOR SEND COMMAND    *\n*                                                                     *\n*         EXIT:  ALWAYS CONDITION CODE ZERO - CONTINUE TRANSMIT       *\n*                                                                     *\n* CONTROL BLKS:  NONE (SVC 34 PARAMETER LIST BUILT DYNAMICALLY)       *\n*                                                                     *\n*  MACROS/SVCS:  FREEMAIN, GETMAIN, RETURN, SAVE, SVC 34              *\n*                                                                     *\n*  ABEND CODES:  NONE                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n*\n***********************************************************************\n*        INITIALIZATION                                               *\n***********************************************************************\n*\nINMXZ02  CSECT\n         SAVE  (14,12),,INMXZ02\n         LR    R12,R15                 SAVE ENTRY POINT\n         USING INMXZ02,R12             SET UP BASE REGISTER\n         LR    R11,R1                  COPY PARM LIST ADDRESS\n         USING PL@LIST,R11             ESTABLISH ADDRESSABILITY\n         GETMAIN RU,LV=WORKLEN         OBTAIN STORAGE\n         ST    R13,4(,R1)              CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1                  NEW SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n*\n***********************************************************************\n*        VERIFY DATA WAS SENT TO SYSOUT (NOT TO DATASET OR DDNAME)    *\n***********************************************************************\n*\n         L     R2,PLSTAFLG             ADDRESS 1 BYTE STATUS FLAGS\n         TM    0(R2),PLNOTJES          DID OUTPUT GO NON-JES ?\n         BO    RETURN0                 YES, DONE (NOTHING REALLY XMITD)\n*\n***********************************************************************\n*        ONE OF THE ENTRY PARAMETERS POINTS TO A TWO TEXT UINT LIST   *\n*        THAT DESCRIBES THE TRANSMITTING USER:                        *\n*        PARM  ==> +0 POINTER ==> USERID TEXT UNIT                    *\n*                  +4 POINTER ==> NODE TEXT UNIT                      *\n*        NOTE: EVERY TEXT UNIT (T/U) IS OF THE FOLLOWING FORMAT       *\n*      +0  KEY   DS  XL2    TYPE OF T/U              (E.G. X'1011'  ) *\n*      +2  KEY   DS  XL2    NUMBER OF LEN+PARM PAIRS (     X'0001'  ) *\n*      +4  LEN   DS  XL2    LENGTH OF PARM VALUE     (     X'0006'  ) *\n*      +6  PARM  DS  ....   ACTUAL PARAMETER         (     C'SFTEST') *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n         L     R2,PLFUTXTU             ADDRESS \"FROM\" T/U POINTER LIST\n         L     R3,4(,R2)               ADDRESS SECOND T/U\n         LH    R4,4(,R3)               GET LENGTH OF FROM-NODE\n         BCTR  R4,0                    DECREMENT FOR EXECUTE\n         LA    R3,6(,R3)               POINT TO FROM-NODE NAME\n*\n         L     R6,0(,R2)               ADDRESS FIRST T/U\n         LH    R7,4(,R6)               GET LENGTH OF FROM-USER\n         BCTR  R7,0                    DECREMENT FOR EXECUTE\n         LA    R6,6(,R6)               POINT TO FROM-USER ID\n*\n         L     R2,PLNUMREC             ADDRESS NUMBER RECORDS XMITED\n         L     R2,0(,R2)               GET NUMBER\n         CVD   R2,DBLWORD              CONVERT TO PACKED DECIMAL FORMAT\n         MVC   RECSXMIT,RECXMASK       MOVE IN PATTERN MASK\n         LA    R1,RECSXMIT+7           DEFAULT TO LAST DIGIT AS SIGNIF\n         LR    R8,R1                   SAVE FOR LENGTH COMPUTATION\n         EDMK  RECSXMIT,DBLWORD+4      CONVERT TO PRINTABLE\n         MVC   RECSXMIT(7),0(R1)       SLIDE RESULT LEFT (MAX 7 CHARS)\n         SR    R8,R1                   GET MACHINE LENGTH OF RESULT\n*\n***********************************************************************\n*        SEARCH ADDRESS LIST FOR LOCAL NODE                           *\n***********************************************************************\n*\n         LA    R5,PLTULIST             POINT TO ADDRESS OF DATA CHAIN\n         USING AL@LIST,R5\nNEXTUSER EQU   *\n         ICM   R5,B'1111',ALNEXT       ADDRESS NEX TO-USER DATA\n         BZ    RETURN0                 END OF CHAIN\n         EX    R4,CLCNODE              COMPARE FROM/TO NODE NAMES\n         BNE   NEXTUSER                NOT EQUAL, RECV JES2 WILL VERIFY\n*\n***********************************************************************\n*        VERIFY TRANSMISSION WAS SUCCESSFULLY COMPLETED               *\n***********************************************************************\n*\n         TM    ALFLAG,ALXMITOK         TRANSMIT SUCCESSFUL ?\n         BNO   NEXTUSER                NO, IGNORE\n*\n***********************************************************************\n*        ISSUE: $HASP549 MAIL FROM(NODENAME/USERID ) RECORDS(NNNNNNN) *\n*           BY: SE '$HASP549 ...',LOGON,USER=(USERID)                 *\n*        USING: SVC 34 TO GENERATE AN \"INTERNAL CONSOLE COMMAND\"      *\n***********************************************************************\n*                                                                     *\n         MVC   MSGAREA(SE549LEN),SE549HDR  MOVE \"SE '$HASP549 \" HEADER\n         LA    R1,MSGAREA+SE549LEN     POINT TO NEXT BYTE FOR NODENAME\n         EX    R4,MVCNODE              MOVE IN FROM-NODE\n         LA    R1,1(R4,R1)             POINT TO BYTE AFTER NODENAME\n         MVI   0(R1),C'/'              MOVE IN SEPARATOR SLASH\n         EX    R7,MVCFUID              MOVE IN FROM-USER ID\n         LA    R1,2(R7,R1)             POINT TO BYTE AFTER FROM-USER ID\n         MVC   0(L'SE549REC,R1),SE549REC  MOVE IN ') RECORDS(' LITERAL\n         EX    R8,MVCRECX              MOVE IN NUMBER RECOREDS XMITED\n         LA    R1,L'SE549REC+1(R8,R1)  POINT TO BYTE AFTER NUM REC XMIT\n         MVC   0(L'SE549LGN,R1),SE549LGN  MOVE IN 'LOGON,USER=' LITERAL\n         LH    R2,ALUSERL              GET LENGTH OF TO-USER ID\n         BCTR  R2,0                    DECREMENT FOR MACHINE LENGTH\n         EX    R2,MVCTUID              MOVE IN TO-USER ID\n         LA    R1,L'SE549LGN+1(R2,R1)  POINT TO BYTE AFTER TO-USER ID\n         MVI   0(R1),C')'              MOVE IN FINAL RIGHT PARENTHESIS\n         LA    R2,MSGAREA-1            POINT TO BEGINNING (MINUS 1)\n         SR    R1,R2                   GET REAL LENGTH OF COMPLETE MSG\n         STH   R1,MSGAREA              STORE IN FIRST HALFWORD FOR SVC\n         MODESET KEY=ZERO\n         SR    R0,R0                   NO CONSOLE NUMBER\n         LA    R1,MSGAREA              POINT TO PARAMETER\n         SVC   34                      ISSUE COMMAND\n         MODESET KEY=NZERO\n         B     NEXTUSER                GO CHECK THE NEXT TO-USER\n*\n***********************************************************************\n*        SET ZERO RETURN CODE                                         *\n***********************************************************************\n*\nRETURN0  EQU   *\n         SR    R2,R2                   ZERO RETURN CODE\n*\n***********************************************************************\n*        RETURN ROUTINE                                               *\n***********************************************************************\n*\nRETURN   EQU   *\n         LR    R1,R13                  SAVE POINTER OF STORAGE\n         L     R13,4(,R13)             GET OLD SAVEAREA ADDRESS\n         FREEMAIN RU,LV=WORKLEN,A=(1)  FREE STORAGE\n         LR    R15,R2                  PASS RETURN CODE TO R15\n         RETURN (14,12),RC=(15)        AND RETURN\n         SPACE 3\n*\n***********************************************************************\n*        LITERALS AND CONSTANTS                                       *\n***********************************************************************\n*\nCLCNODE  CLC   0(0,R3),ALNODE          (EXECUTED) COMPARE FROM/TO NODE\nMVCNODE  MVC   0(0,R1),0(R3)           (EXECUTED) MOVE FROM-NODE TO MSG\nMVCFUID  MVC   1(0,R1),0(R6)           (EXECUTED) MOVE FROM-USER TO MSG\nMVCRECX  MVC   L'SE549REC(0,R1),RECSXMIT (EXECUTED) MOVE NUM RECS XMITD\nMVCTUID  MVC   L'SE549LGN(0,R1),ALUSER   (EXECUTED) MOVE TO-USER TO MSG\nRECXMASK DC    X'4020202020202120'     PATTERN MASK TO EDITMARK REC NUM\n*\nSE549HDR DS    0F                      SVC34 PARMS MUST BE WORD BOUNDRY\n         DC    H'0'                    LENGTH INCLUDING PREFIX\n         DC    H'0'                    FILLER REQUIRED VY SVC34\n         DC    C'SE ''$HASP549 MAIL FROM('\nSE549LEN EQU   *-SE549HDR              LENGTH OF HEADER\nSE549REC DC    C') RECORDS('\nSE549LGN DC    C')'',LOGON,USER=('\n*\n         LTORG\n*\n***********************************************************************\n*        DSECTS AND MAPPING MACROS                                    *\n***********************************************************************\n*\nWORKAREA DSECT\nSAVEAREA DS    9D                      STANDARD REGISTER SAVEAREA\nDBLWORD  DS    D                       DOUBLE WORD FOR CONVERT-PRINT\nRECSXMIT DS    XL8                     RECORDS TRANSMITTED (PRINTABLE)\nMSGAREA  DS    0F,CL128                MSG CREATION AREA (ON FULLWORD!)\nWORKLEN  EQU   *-WORKAREA\n*\n***********************************************************************\n*        LOCAL MAPPING FOR INMZX02 ENTRY PARAMETER LIST               *\n***********************************************************************\n*\nPL@LIST  DSECT                         ENTRY PARAMETER LIST\nPLUSERWD DS    A                       ADDR OF A USER WORD\nPLXMKWDP DS    A                       ADDR OF KEYWORD PARM('STRING')\nPLACTFLG DS    A                       ADDR OF 1 BYTE ACTION FLAGS\nPLTSCPPL DS    A                       ADDR OF TSO CMD PROCSR PARM LIST\nPLXMEMSG DS    A                       ADDR OF ERR MSG XMIT TO ISSUE\nPLSTAFLG DS    A                       ADDR OF 1 BYTE STATUS FLAGS\nPLNOTJES EQU   X'80'                     OUTPUT NOT JES (IS DSN OR DD)\nPLFUTXTU DS    A                       ADDR OF FROM-USER TEXT UNITS\nPLFDTXTU DS    A                       ADDR OF FROM-DATASET TEXT UNITS\nPLTULIST DS    A                       ADDR OF TO-USER DATA CHAIN\nPLNUMREC DS    A                       ADDR OF WORD, NUM RECORDS XMITED\nPLXMITRC DS    A                       ADDR OF WORD, TRANSMIT CMD RETCD\n*\n***********************************************************************\n*        LOCAL MAPPING FOR ADDRESS LIST DATA CHAIN OF TO-USERS        *\n***********************************************************************\n*\nAL@LIST  DSECT                         ADDR LIST CHAIN OF TO-USERS\nALNEXT   DS    A                       ADDR OF NEXT ENTRY, OR ZERO\nALNODEL  DS    H                       LENGTH OF TARGET NODE NAME\nALNODE   DS    CL8                     TARGET NODE NAME\nALUSERL  DS    H                       LENGTH OF TARGET USERID\nALUSER   DS    CL8                     TARGET USERID\nALNICKL  DS    H                       LENGTH OF NICKNAME, OR ZERO\nALNICK   DS    CL8                     NICKNAME OF USERID\nALNAMEL  DS    H                       LENGTH OF NAME TAG, OR ZERO\nALNAME   DS    CL30                    NAME TAG OF USERID\nALFLAG   DS    X                       FLAG BYTE\nALNOTIFY EQU   X'80'                     REQUEST NOTIFY FOR THIS USERID\nALXMITOK EQU   X'20'                     XMIT SUCCESSFULLY COMPLETED\n         DS    X                       (RESERVED)\nALPARML  DS    H                       LENGTH OF PARM TAG, OR ZERO\nALPARM   DS    CL30                    PARM TAG OF USERID\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT079/FILE079.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT079", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}