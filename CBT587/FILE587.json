{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012418000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "CBT.V500.FILE587.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE587.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\x04'", "DS1TRBAL": "b'\\x99\\x00'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04Q\\x00\\x01\\x04R\\x00\\x05\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02%_\\x01\\x02%_\\t\\x18\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-09-12T00:00:00", "modifydate": "2002-09-12T09:18:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 452    FILE:  587\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT452.FILE587\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 32 MEMBERS COUNTED; CUMULATIVE SIZE IS 10,284 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/12/02    09:18:47    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00)\\x01\\x02$/\\x01\\x02$_ 6\\x00;\\x008\\x00\\x07\\xd7\\xf5\\xd1\\xd4\\xc7\\xf1@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-08-30T00:00:00", "modifydate": "2002-09-02T20:36:29", "lines": 59, "newlines": 56, "modlines": 7, "user": "P5JMG1"}, "text": " This is an older version of the VTOC command looking for some\n talented and worthy person who is willing to merge it with the\n current VTOC command.  I'm sorry I did not feed this back to the\n world when I did the work, but now I would like to make amends.\n\n Well here's the idea I had. Even though my version left off around\n 1990 there are still many improvements that could be incorporated\n into the existing VTOC command. I warn you it won't be easy; I had\n to scare up additional base registers in my time.\n\n Why would you want this stuff?\n\n 1) I coded a VTOCMAP module which generates a mapping of the VTOC\n that can optionally be outputted to the VTOCOUT DD if you use the\n MAP operand, but the beauty was I always did a VTOC integrity check\n to show gaps or overlapping extents in the VTOCs I was reading and\n put out a message if there were errors even if you did not have the\n MAP operand.\n\n 2) I coded the \"NOT\" of many operands like NLEV (things of NOT this\n high level qualifier would show in the output), NCON (NOT\n containing), NEND (NOT ending).\n\n 3) Added  BEG and NBEG (beginning with and not beginning with like\n BEG(SYS) which shows SYSxxxxx as opposed to coding LE(SYS1 SYS2\n SYS3 etc).\n\n 4) Minor allowed > < = ^= etc instead of GT, LT, EQ, and NE on LIM\n and ANDx operands.\n\n 5) Increased ANDx and ORx to allow many more conditionals than the\n original VTOC command had.\n\n 6) Allowed * on checking for dates, where * means current date.\n I.E. LIM(CDATE LT *) meaning I want things created prior to today.\n\n 7) Did something to allow KEYLE (key length) for ISAM I think.\n\n 8) Added LOWLEVEL and NLOWLEVEL to allow check of entire low level\n qualifier as opposed to END which only checks that the last few\n characters match.\n\n 9) Put volume ID in error messages for better knowledge of which\n pack had a problem.\n\n 10) Turn off catalog search when extents are zero.\n\n 11) Provide ability to show whether last open of a dataset was for\n update or not.\n\n 12) Allow OPTCD as a LIM value, was originally done to spot use of\n OPTCD EQ W which I didn't want people using.\n\n  All modifications are well documented within the code, line by\n line and in a modifications list up front in the modules.\n\n  Definitely as this code currently stands it only knew about UCB\n addresses that were 000-FFF; it knew not of 0000-FFFF UCB\n addresses.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE587": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00U\\x01\\x01\\x02_\\x01\\x02%_\\t\\x17\\x00f\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-09-12T09:17:55", "lines": 102, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 587 is from Matt Gates and contains his modified copy     *   FILE 587\n//*           of an old version of the VTOC command, which is now   *   FILE 587\n//*           on File 112 of this tape.  This version of the VTOC   *   FILE 587\n//*           command is circa 1990, and contains desirable         *   FILE 587\n//*           improvements (as described below).  However the MVS   *   FILE 587\n//*           operating system has passed this version by, and the  *   FILE 587\n//*           source code is being presented here, awaiting the     *   FILE 587\n//*           work of somebody to modernize it to the current       *   FILE 587\n//*           version of the operating system, or to merge its      *   FILE 587\n//*           very nice features into the File 112 version of the   *   FILE 587\n//*           VTOC command.                                         *   FILE 587\n//*                                                                 *   FILE 587\n//*           Dave Cartwright has made this version of VTOC usable  *   FILE 587\n//*           for MVS 3.8 (OS/VS2) running under Hercules.  See     *   FILE 587\n//*           the Improvements Log below.                           *   FILE 587\n//*                                                                 *   FILE 587\n//*           email:  Please contact Sam Golob at                   *   FILE 587\n//*                   sbgolob@attglobal.net                         *   FILE 587\n//*                                                                 *   FILE 587\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 587\n//*                                                                 *   FILE 587\n//*  Improvements Log:                                              *   FILE 587\n//*                                                                 *   FILE 587\n//*   09/02 - Dave Cartwright has gotten this version of VTOC       *   FILE 587\n//*           to work for MVS 3.8 (OS/VS2) under Hercules.          *   FILE 587\n//*           See member ASM370, which assembles member VTOC370.    *   FILE 587\n//*                                                                 *   FILE 587\n//*   09/02 - HELP member for this version was added by Matt Gates. *   FILE 587\n//*                                                                 *   FILE 587\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 587\n//*                                                                 *   FILE 587\n//*   A description of the current state of this program, and of    *   FILE 587\n//*   the improvements contained therein, follows (in the words     *   FILE 587\n//*   of the author):   (Please see the Improvements Log above.)    *   FILE 587\n//*                                                                 *   FILE 587\n//*      This is an older version of the VTOC command looking       *   FILE 587\n//*      for some talented and worthy person who is willing to      *   FILE 587\n//*      merge it with the current VTOC command.  I'm sorry I       *   FILE 587\n//*      did not feed this back to the world when I did the         *   FILE 587\n//*      work, but now I would like to make amends.                 *   FILE 587\n//*                                                                 *   FILE 587\n//*      Well here's the idea I had. Even though my version         *   FILE 587\n//*      left off around 1990 there are still many improvements     *   FILE 587\n//*      that could be incorporated into the existing VTOC          *   FILE 587\n//*      command. I warn you it won't be easy; I had to scare       *   FILE 587\n//*      up additional base registers in my time.                   *   FILE 587\n//*                                                                 *   FILE 587\n//*      Why would you want this stuff?                             *   FILE 587\n//*                                                                 *   FILE 587\n//*      1) I coded a VTOCMAP module which generates a mapping      *   FILE 587\n//*      of the VTOC that can optionally be outputted to the        *   FILE 587\n//*      VTOCOUT DD if you use the MAP operand, but the beauty      *   FILE 587\n//*      was I always did a VTOC integrity check to show gaps       *   FILE 587\n//*      or overlapping extents in the VTOCs I was reading and      *   FILE 587\n//*      put out a message if there were errors even if you did     *   FILE 587\n//*      not have the MAP operand.                                  *   FILE 587\n//*                                                                 *   FILE 587\n//*      2) I coded the \"NOT\" of many operands like NLEV            *   FILE 587\n//*      (things of NOT this high level qualifier would show in     *   FILE 587\n//*      the output), NCON (NOT containing), NEND (NOT ending).     *   FILE 587\n//*                                                                 *   FILE 587\n//*      3) Added  BEG and NBEG (beginning with and not             *   FILE 587\n//*      beginning with like BEG(SYS) which shows SYSxxxxx as       *   FILE 587\n//*      opposed to coding LE(SYS1 SYS2 SYS3 etc).                  *   FILE 587\n//*                                                                 *   FILE 587\n//*      4) Minor allowed > < = ^= etc instead of GT, LT, EQ,       *   FILE 587\n//*      and NE on LIM and ANDx operands.                           *   FILE 587\n//*                                                                 *   FILE 587\n//*      5) Increased ANDx and ORx to allow many more               *   FILE 587\n//*      conditionals than the original VTOC command had.           *   FILE 587\n//*                                                                 *   FILE 587\n//*      6) Allowed * on checking for dates, where * means          *   FILE 587\n//*      current date.  I.E. LIM(CDATE LT *) meaning I want         *   FILE 587\n//*      things created prior to today.                             *   FILE 587\n//*                                                                 *   FILE 587\n//*      7) Did something to allow KEYLE (key length) for ISAM      *   FILE 587\n//*      I think.                                                   *   FILE 587\n//*                                                                 *   FILE 587\n//*      8) Added LOWLEVEL and NLOWLEVEL to allow check of          *   FILE 587\n//*      entire low level qualifier as opposed to END which         *   FILE 587\n//*      only checks that the last few characters match.            *   FILE 587\n//*                                                                 *   FILE 587\n//*      9) Put volume ID in error messages for better              *   FILE 587\n//*      knowledge of which pack had a problem.                     *   FILE 587\n//*                                                                 *   FILE 587\n//*      10) Turn off catalog search when extents are zero.         *   FILE 587\n//*                                                                 *   FILE 587\n//*      11) Provide ability to show whether last open of a         *   FILE 587\n//*      dataset was for update or not.                             *   FILE 587\n//*                                                                 *   FILE 587\n//*      12) Allow OPTCD as a LIM value, was originally done to     *   FILE 587\n//*      spot use of OPTCD EQ W which I didn't want people          *   FILE 587\n//*      using.                                                     *   FILE 587\n//*                                                                 *   FILE 587\n//*      All modifications are well documented within the code,     *   FILE 587\n//*      line by line and in a modifications list up front in       *   FILE 587\n//*      the modules.                                               *   FILE 587\n//*                                                                 *   FILE 587\n//*      Definitely as this code currently stands it only knew      *   FILE 587\n//*      about UCB addresses that were 000-FFF; it knew not of      *   FILE 587\n//*      0000-FFFF UCB addresses.                                   *   FILE 587\n//*                                                                 *   FILE 587\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASM": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01#\\x00\\x10\\x00\\x88\\x00O\\x01\\x02$/\\x145\\x00\\x1a\\x00\\x1c\\x00\\x1a\\xd7\\xf5\\xd1\\xd4\\xc7\\xf1@@@@'", "ispf": {"version": "01.35", "flags": 0, "createdate": "1988-01-04T00:00:00", "modifydate": "2002-08-30T14:35:10", "lines": 26, "newlines": 28, "modlines": 26, "user": "P5JMG1"}, "text": "//*\n//*    JCL TO ASSEMBLE VTOC IN BATCH\n//*\n//*\n//ASM      PROC MEM=$$$$$$$$$\n//DOIT     EXEC  PGM=ASMA90,REGION=1000K,PARM='TEST,RENT,OBJECT,NODECK'\n//SYSLIB   DD  DSN=SYS2.VTOC.ASM,DISP=SHR,DCB=BLKSIZE=32720\n//         DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32720\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSLIN   DD  DSN=SYS2.OBJ(&MEM),DISP=SHR\n//*            DCB=(BLKSIZE=400,LRECL=80,RECFM=FB),\n//*            SPACE=(CYL,(1,1,8),RLSE),UNIT=SYSDA\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD DSN=SYS2.VTOC.ASM(&MEM),DISP=SHR\n//         PEND\n//ASM0     EXEC ASM,MEM=VTOC\n//ASM1     EXEC ASM,MEM=VTOCCHEK\n//ASM2     EXEC ASM,MEM=VTOCEXCP\n//ASM3     EXEC ASM,MEM=VTOCFORM\n//ASM4     EXEC ASM,MEM=VTOCMAP\n//ASM5     EXEC ASM,MEM=VTOCMSGS\n//ASM6     EXEC ASM,MEM=VTOCPRNT\n//ASM7     EXEC ASM,MEM=VTOCSORT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASM370": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x19\\x01\\x02%?\\x01\\x02%O\\x15\\x08\\x007\\x007\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2002-09-10T00:00:00", "modifydate": "2002-09-11T15:08:19", "lines": 55, "newlines": 55, "modlines": 0, "user": "MMSMAK"}, "text": "//HERC01VA JOB (HERC01),VTOC,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             TIME=30,REGION=0K,NOTIFY=HERC01\n//*\n//*    JCL TO ASSEMBLE VTOC IN BATCH\n//*\n//*\n//ASM      PROC MEM=$$$$$$$$$\n//DOIT     EXEC  PGM=IFOX00,REGION=1000K,PARM='TEST,RENT,NOOBJ,DECK'\n//SYSLIB   DD  DSN=HERC01.VTOC370,DISP=SHR,DCB=BLKSIZE=32720\n//         DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32720\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJECT(&MEM)\n//*            SPACE=(CYL,(1,1,8),RLSE),UNIT=SYSDA\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD DSN=HERC01.VTOC370(&MEM),DISP=SHR\n//         PEND\n//*\n//ALLOC   EXEC PGM=IEFBR14\n//SYSLIN   DD  DISP=(,PASS),DSN=&&OBJECT,\n//             DCB=(BLKSIZE=400,LRECL=80,RECFM=FB),\n//             SPACE=(CYL,(1,1,8),RLSE),UNIT=SYSDA\n//*\n//ASM0     EXEC ASM,MEM=VTOC370\n//ASM1     EXEC ASM,MEM=VTOCCHEK\n//ASM2     EXEC ASM,MEM=VTOCEXCP\n//ASM3     EXEC ASM,MEM=VTOCFORM\n//ASM4     EXEC ASM,MEM=VTOCMAP\n//ASM5     EXEC ASM,MEM=VTOCMSGS\n//ASM6     EXEC ASM,MEM=VTOCPRNT\n//ASM7     EXEC ASM,MEM=VTOCSORT\n//*\n//*     JCL TO LINKEDIT VTOC COMMAND\n//*\n//VTOCLINK EXEC PGM=IEWL,REGION=1000K,\n//            PARM='RENT,REUS,REFR,LIST,XREF,SIZE=(512K,96K)'\n//OBJ      DD DISP=(OLD,PASS),DSN=&&OBJECT\n//SYSLMOD  DD DISP=SHR,DSN=SYS2.CMDLIB\n//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(10,10))\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD  *\n INCLUDE OBJ(VTOC370)\n INCLUDE OBJ(VTOCCHEK)\n INCLUDE OBJ(VTOCEXCP)\n INCLUDE OBJ(VTOCFORM)\n INCLUDE OBJ(VTOCMAP)\n INCLUDE OBJ(VTOCMSGS)\n INCLUDE OBJ(VTOCPRNT)\n INCLUDE OBJ(VTOCSORT)\n ENTRY VTOCCMD\n SETSSI 05139907\n NAME TSTVTOC(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HELP": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x02%_\\x01\\x02%_\\tS\\x01\\x0b\\x01\\x0b\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-09-12T00:00:00", "modifydate": "2002-09-12T09:53:31", "lines": 267, "newlines": 267, "modlines": 0, "user": "MMSMAK"}, "text": ")F FUNCTION -\n  THE VTOC COMMAND DISPLAYS SELECTED DATA SETS ON A DISK OR SET OF\n  DISKS.  EACH DISK HAS A VOLUME TABLE OF CONTENTS ( VTOC ).  THIS\n  TABLE IS SEARCHED FOR DATA SETS THAT MEET THE SPECIFICATIONS.\n)X SYNTAX -\n         VTOC     'VOLUME-LIST'\n                  LEVEL('DSNAME-START')\u00a6NLEVEL('DSN-START')\n                  BEGINNING('DSNAME-STRING')\u00a6NBEGINNING('DSN-STRING')\n                  CONTAINING('DSNAME-STRING')\u00a6NCONTAINING('DSN-STRING')\n                  ENDING('DSNAME-END')\u00a6NENDING(DSN-END')\n                  KBYTES/MBYTES/TRKS/CYLS\n                  MAP(opt)\n                  NOSORT/SORT(opt)        BREAK('BREAK-CHARS')\n                  NOPRINT/PRINT('PRINT-OP' ('PRINT-ITEM-LIST')\n                  LIMIT('KEYWORD' 'OPER' 'VALUE')\n                  AND1/OR1('KEYWORD' 'OPER' 'VALUE')\n                  AND2/OR2('KEYWORD' 'OPER' 'VALUE')\n                  AND3/OR3('KEYWORD' 'OPER' 'VALUE')\n                  AND4/OR4('KEYWORD' 'OPER' 'VALUE')\n                  AND5/OR5('KEYWORD' 'OPER' 'VALUE')\n                  CHARS('CHARS-PER-LINE')\n                  LINES('LINES-PER-PAGE')\n                  NOHEADING/HEADING('TEXT')\n                  DSNLEN('LENGTH')\n  NOTE     - THE CCHH OPERAND DOES NOT WORK ON THE PRINT LINE, USE\n             MAP OPERAND INSTEAD. IT WILL WORK IN THE LIM, AND, OR\n             OPERANDS. If you want a hardcopy of a vtoc list just\n             \"ALLOC FILE(VTOCOUT) SYSOUT\" prior to issuing the VTOC\n             command. you can also use a dataset for VTOCOUT.\n  REQUIRED - 'VOLUME-LIST'\n  DEFAULTS - LIST ALL DATA SETS ON THE VOLUME(S) SELECTED.\n             KBYTES, SORT, PRINT\n  ALIAS    - NONE\n)O OPERANDS -\n))'VOLUME-LIST'     - A VOLUME SERIAL NUMBER OR A LIST OF VOLUMES.\n              IF THE FIRST ONE TO FIVE CHARACTERS OF A VOLUME\n              SERIAL NUMBER ARE ENTERED, ALL VOLUMES THAT ARE\n              MOUNTED ON THE MACHINE WHICH START WITH THOSE\n              CHARACTERS WILL BE LISTED.\n))LEVEL('DSNAME-START')  - SPECIFIES THE HIGH LEVEL QUALIFIERS TO BE\n         SEARCHED.  THIS WILL NOT BE PREFIXED BY YOUR USERID OR\n         PREFIX.  ONLY DATA SETS STARTING WITH THESE PREFIXES WILL\n         BE LISTED.\n))NLEVEL('DSNAME-START')  - SPECIFIES THE HIGH LEVEL QUALIFIERS TO BE\n         SEARCHED.  THIS WILL NOT BE PREFIXED BY YOUR USERID OR\n         PREFIX.  DATA SETS *NOT* STARTING WITH THESE PREFIXES WILL\n         BE LISTED.\n))BEGINNING('DSNAME-START')  - SPECIFIES THAT DATASETS STARTING WITH\n         THIS CHARACTER STRING WILL BE REPORTED. THIS WILL NOT BE\n         PREFIXED BY YOUR USERID OR PREFIX.\n))NBEGINNING('DSNAME-START') - SPECIFIES THAT DATASETS *NOT* STARTING\n         WITH THIS CHARACTER STRING WILL BE REPORTED. THIS WILL NOT BE\n         PREFIXED BY YOUR USERID OR PREFIX.\n))CONTAINING('DSNAME-STRING') - SPECIFIES A CHARACTER STRING CONTAINED\n         IN THE DATA SET NAME.  AT LEAST ONE OF THE STRINGS MUST\n         BE IN THE DSNAME FOR THE DATA SET TO BE LISTED.\n         THESE STRINGS MUST CONFORM TO DSNAME STANDARDS.\n         THEY CANNOT BEGIN WITH A PERIOD OR A NUMBER.\n))NCONTAINING('DSNAME-STRING') - SPECIFIES A CHARACTER STRING CONTAINED\n         IN THE DATA SET NAME.  AT LEAST ONE OF THE STRINGS MUST\n         BE IN THE DSNAME FOR THE DATA SET *NOT* TO BE LISTED.\n         THESE STRINGS MUST CONFORM TO DSNAME STANDARDS.\n         THEY CANNOT BEGIN WITH A PERIOD OR A NUMBER.\n))ENDING('DSNAME-END')  - SPECIFIES THE ENDING CHARACTERS OF THE\n         DSNAME.  THE FINAL NONBLANK CHARACTERS OF THE DSNAME MUST\n         BE ONE OF THESE STRINGS TO ALLOW THE DATA SET TO BE LISTED.\n         THESE STRINGS MUST CONFORM TO DSNAME STANDARDS.\n))NENDING('DSNAME-END')  - SPECIFIES THE ENDING CHARACTERS OF THE\n         DSNAME.  THE FINAL NONBLANK CHARACTERS OF THE DSNAME MUST\n         BE ONE OF THESE STRINGS TO KEEP THE DATA SET FROM BEING\n         LISTED. THESE STRINGS MUST CONFORM TO DSNAME STANDARDS.\n))KBYTES   -  SPACE ITEMS ARE LISTED IN KILOBYTES ( 1000 BYTES ).\n))MBYTES   -  SPACE ITEMS ARE LISTED IN MEGABYTES ( 1,000,000 BYTES ).\n))TRKS     -  SPACE ITEMS ARE LISTED IN TRACKS FOR THE DEVICE(S).\n))CYLS     -  SPACE ITEMS ARE LISTED IN CYLINDERS FOR THE DEVICE(S).\n))MAP(opt) -  SHOW THE LOCATION OF DATASETS ON THE PACK. opt IS HEX\n              (DEFAULT) OR DEC. MAP AUTOMATICALLY GIVES YOU A\n              SORT(VOLUME).\n))NOSORT   -  THE DATA SETS ARE NOT SORTED.  THEY ARE OUTPUT AS THEY\n              ARE FOUND.\n))SORT(opt)-  THE DATA SETS ARE SORTED INTO ALPHABETICAL ORDER, BASED\n              UPON THE opt. opt IS DSNAME (DEFAULT) OR VOLUME.\n))BREAK('BREAK-CHARS') - THE LISTING WILL CONTAIN A NEW HEADER,\n              ( ON A NEW PAGE IF THE VTOCOUT DD CARD OPTION IS USED ),\n              WHENEVER THE SPECIFIED NUMBER OF CHARACTERS DIFFERS\n              FROM THE PRECEDING DATA SET.  THIS OPTION FUNCTIONS\n              ONLY WITH THE SORT OPTION.\n))CHARS('CHARS-PER-LINE') - SPECIFIES THE NUMBER OF CHARACTERS ON EACH\n              LINE OF OUTPUT.  THE DEFAULT IS 150 FOR PRINT AND THE\n              LINESIZE OF THE TERMINAL FOR TSO SESSIONS.\n              YOU CAN GET MORE INFORMATION BY SPECIFYING A LARGER\n              NUMBER OF CHARACTERS PER LINE OR YOU CAN LIMIT THE\n              PRINTING BY SETTING A SMALLER NUMBER OF CHARACTERS\n              PER LINE OF OUTPUT.\n))LINES('LINES-PER-PAGE') - SPECIFIES THE NUMBER OF LINES BEFORE A NEW\n              TITLE LINE IS PRODUCED.  IT DEFAULTS TO 60 FOR PRINT\n              AND TO THE SCREEN SIZE FOR TSO SESSIONS.\n))NOHEADING   - DO NOT PRODUCE A HEADING.  THE HEADING WILL ONLY BE\n              OUTPUT IF THE VTOCOUT DD STATEMENT IS PRESENT.\n))HEADING('TEXT') - IF A DD STATEMENT WITH A DDNAME OF VTOCOUT IS\n              PRESENT, THIS TEXT WILL BE USED TO BEGIN EVERY PAGE.\n              CARRIAGE CONTROL SHOULD BE INCLUDED ( ASA ).  THE\n              DEFAULT HEADER CONSISTS OF VTOC COMMAND VERSION 02\n              AND THE COMMAND THAT WAS ENTERED.\n))DSNLEN('LENGTH') - SPECIFIES THE LENGTH OF THE DSNAME TO PRINT.\n              THE REST OF THE DSNAME IS TRUNCATED.  THE CHARS PARAMETER\n              WILL ALSO CAUSE THE DSNAME TO BE TRUNCATED, IF THE NAME\n              AND THE PRECEDING INFORMATION EXCEEDS THE PRINT LINE.\n))NOPRINT     - SPECIFIES THAT INDIVIDUAL ITEMS ARE NOT TO BE LISTED.\n              THE COMMAND CAN BE USED TO CALCULATE TOTALS.\n))PRINT('PRINT-OP' ('PRINT-ITEM-LIST')) -\n              SPECIFIES THE ITEMS TO PRINT.  THE 'PRINT-OP' IS THE\n              OPERATION TO BE DONE.  THEY INCLUDE THE FOLLOWING.\n                NEW - THE 'PRINT-ITEM-LIST' IS A COMPLETE LIST OF WHAT\n                      TO PRINT.\n                REP - THE FIRST 'PRINT-ITEM' WILL BE REPLACED WITH THE\n                      REST OF THE ITEMS ON THE LIST.\n                ADD - THE REST OF THE 'PRINT-ITEM-LIST' WILL BE ADDED\n                      AFTER THE FIRST ITEM ON THE LIST.\n                DEL - THE ITEMS ON THE 'PRINT-ITEM-LIST' WILL NOT BE\n                      PRINTED.\n              THE 'PRINT-ITEM-LIST' NAMES ARE THE SAME KEYWORDS USED\n              IN LIM, AND, AND OR FUNCTIONS AND ARE ALSO THE TITLES\n              AS PRINTED.\n              THE ADD, DEL, AND REP PRINT OPERATIONS REFER TO THE\n              DEFAULT PRINT LIST.  THE DEFAULT LIST IS ALLOC, UNUSED,\n              PCT, EXT, DSORG, RECFM, BLKSZ, LRECL, CDATE, LSTUS,\n              DSNAME, VOLUME, SECQ, SECT, ROUND, PASS, ACTION,\n              AND TYPE.  AS NOTED UNDER CHARS ABOVE, ONLY THE ITEMS\n              THAT WILL FIT ON THE PRINT LINE WILL BE LISTED.\n))LIMIT('VALUE' 'OPER' 'KEYWORD') - SPECIFIES WHICH DATA SETS ARE TO\n              BE LISTED.  ONLY DATA SETS THAT SATISFY THE RELATION\n              ARE LISTED.\n))'KEYWORD'   - IS THE NAME OF A DATA SET FIELD.  THE LIST OF CURRENTLY\n                PROVIDED FIELDS FOLLOWS.  THE KEYWORDS AND THEIR VALUES\n                ARE THE SAME AS IN THE VTOC OUTPUT.\n\n                      ALLOC      DATA SET ALLOCATION\n                                    NUMBER OF KILOBYTES, TRACKS,\n                                    CYLINDERS, OR MEGABYTES ALLOCATED.\n                                    DEFAULT IS KILOBYTES.\n                      UNUSED     AMOUNT OF UNUSED SPACE IN THE DATA\n                                    SET.  SAME UNITS AS IN ALLOC.\n                      USED       AMOUNT OF SPACE USED IN THE DATA SET.\n                                    SAME UNITS AS IN ALLOC.\n                      PCT        PERCENTAGE OF SPACE USED IN THE DATA\n                                    USED.\n                      EXT        NUMBER OF EXTENTS IN THE DATA SET.\n                      DSORG      DATA SET ORGANIZATION\n                                    PS = SEQUENTIAL   PO = PARTITIONED\n                                    VS = VSAM         IS = ISAM\n                                    DA = DIRECT ACCESS  U = UNMOVEABLE\n                      RECFM      RECORD FORMAT\n                                    F  = FIXED        V  = VARIABLE\n                                    U  = UNDEFINED    B  = BLOCKED\n                                    T  = TRACK OVERFLOW\n                                    S  = SPANNED OR STANDARD\n                                    A  = ASA CARRIAGE CONTROL\n                                    M  = MACHINE CARRIAGE CONTROL\n                      BLKSZ      BLOCKSIZE FOR PHYSICAL BLOCKS OF\n                                    DATA.\n                      LRECL      LOGICAL RECORD LENGTH IN BYTES.\n                      CDATE      CREATION DATE IN THE FORM YYDDD,\n                                    SOMETIMES CALLED JULIAN.\n                      EXPDT      EXPIRATION DATE IN THE SAME FORM.\n                                    THIS FIELD IS RARELY USED HERE.\n                      LSTUS      LAST USE DATE IN THE SAME FORM.\n                                    THIS DATE IS WHEN THE DATA SET WAS\n                                    LAST OPENED.\n                      UPD        SHOWS HOW A DATASET WAS LAST OPENED\n                                    N  = OPENED AS INPUT\n                                    y  = OPENED AS OUTPUT/UPDATE\n                      SECT       TYPE OF ALLOCATION\n                                    A  = ABSOLUTE TRACK\n                                    B  = BLOCKS\n                                    T  = TRACKS\n                                    C  = CYLINDERS\n                      PASS       PROTECTION INDICATORS\n                                    N  = NONE\n                                    R  = READ AND WRITE PROTECTION\n                                    W  = WRITE PROTECTION\n                      ROUND      SPACE ROUNDED UP TO CYLINDERS\n                                    R  = ROUND\n                                    N  = NO ROUND\n                      CCHH       CYLINDER AND HEAD ADDRESS, IN 4 OR 8\n                                    HEXADECIMAL DIGITS.  IF 4 DIGITS\n                                    ARE USED, ONLY THE CYLINDER IS USED\n                                    FOR COMPARISON, OTHERWISE, THE CYL\n                                    AND TRACK ARE COMPARED. WILL NOT\n                                    WORK PROPERLY FOR THE PRINT OPERAND.\n                      VOLUME     VOLUME SERIAL NUMBER OR DISK NAME\n                      UNIT       UNIT TYPE WHERE THE VOLUME IS MOUNTED.\n                      DSNAME     NAME OF THE DATA SET\n                      ACTION     SOME ERROR INDICATIONS\n                      TYPE       RESERVED FOR EXIT USAGE.\n))'OPER'      - IS AN OPERATOR.  THE LIST OF OPERATORS FOLLOWS.\n                      EQ =       IS EQUAL TO\n                      NE [=      IS NOT EQUAL TO\n                      LE <=      IS LESS THAN OR EQUAL TO\n                      LT <       IS LESS THAN\n                      GE >=      IS GREATER THAN OR EQUAL TO\n                      GT >       IS GREATER THAN\n))'VALUE'     - GIVES THE VALUE OF THE ITEM FOR COMPARISON, SUCH AS\n              FB, PS, R, OR A NUMBER.\n))AND1('VALUE' 'OPER' 'KEYWORD') -  SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  BOTH THE LIMIT AND THIS CONDITION MUST\n                 BE TRUE TO ALLOW THE LISTING.\n))OR1('VALUE' 'OPER' 'KEYWORD') -   SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  EITHER THE LIMIT OR THIS CONDITION MUST\n                 BE TRUE TO ALLOW THE LISTING.\n))AND2('VALUE' 'OPER' 'KEYWORD') -  SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  BOTH THE PREVIOUS RESULT AND THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n))OR2('VALUE' 'OPER' 'KEYWORD') -   SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  EITHER THE PREVIOUS RESULT OR THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n))AND3('VALUE' 'OPER' 'KEYWORD') -  SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  BOTH THE PREVIOUS RESULT AND THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n))OR3('VALUE' 'OPER' 'KEYWORD') -   SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  EITHER THE PREVIOUS RESULT OR THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n))AND4('VALUE' 'OPER' 'KEYWORD') -  SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  BOTH THE PREVIOUS RESULT AND THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n))OR4('VALUE' 'OPER' 'KEYWORD') -   SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  EITHER THE PREVIOUS RESULT OR THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n))AND5('VALUE' 'OPER' 'KEYWORD') -  SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  BOTH THE PREVIOUS RESULT AND THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n))OR5('VALUE' 'OPER' 'KEYWORD') -   SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  EITHER THE PREVIOUS RESULT OR THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n))EXAMPLES -\n  LIST ALL DATA SETS ON WORK01.       VTOC WORK01\n  LIST ALL DATA SETS THAT START\n     WITH  xxx  ON ANY WORK VOLUME.   VTOC WORK LEV(xxx)\n  LIST RECENTLY CREATED DATA SETS     VTOC SORT01 LIM(CDATE GT 87050)\n     ON SORT01.\n  LIST DATA SETS WITH UNUSED SPACE.   VTOC VOL LIM(PCT LT 50) -\n                                                OR1(UNUSED GT 30)\n  LIST DATA SETS WITH MULTIPLE        VTOC VOL LIM(EXT GT 1)\n     EXTENTS.\n  LIST ALL OF TSTEST'S DATA ON        VTOC (SORT WORK) LE(TSTEST)\n     SORT AND WORK VOLUMES. THIS\n     LIST CAN BE USED TO COMPARE TO\n     THE CATALOG (LISTC COMMAND).\n  LIST ALL DATA SETS OVER 100 TRKS.     VTOC VOL LIM(ALLOC GT 100)   TRK\n  LIST DATA SETS UNDER THE FIXED        VTOC VOL LIM(CC EQ 0001) -\n     HEADS.                                      OR1(CC EQ 0002)\n  LIST USED SPACE INSTEAD OF UNUSED     VTOC VOL CYL-\n       IN CYLINDERS.                            PRINT(REP (UNUSED USED))\n  LIST CLIST AND ASM DATA SETS.         VTOC VOL END(CLIST ASM))\n  LIST ALL OF THE INFORMATION ABOUT     VTOC VOL CHAR(150)\n       USER'S DATA SETS AT A 3270.\n  SHORTEN THE DSNAME LENGTH ON A        VTOC VOL DSNLEN(20)\n       LISTING.\n  MAP THE DATASETS NOT BEGINNING        VTOC VOL MAP NBEG(SYS)\n       WITH SYS.\n  MAP THE DATASETS WITHOUT A HILEVEL    VTOC VOL MAP NLEV(SYS1)\n       INDEX OF SYS1.\n  SHOW WHAT UNIT A VOLUME IS MOUNTED    VTOC VOL-\n       ON.                                      PRINT(REP (ALLOC UNIT))\n  SHOW WHEN AND HOW A DATASET WAS       VTOC VOL-\n       LAST OPENED.                             PRINT(REP (ALLOC LSTUS-\n                                                 UPD))\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LINKEDIT": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00X\\x00\\x90\\x10\\x1f\\x01\\x02$/\\x13@\\x00\\x18\\x00\\x1a\\x00\\x07\\xd7\\xf5\\xd1\\xd4\\xc7\\xf1@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1990-04-11T00:00:00", "modifydate": "2002-08-30T13:40:58", "lines": 24, "newlines": 26, "modlines": 7, "user": "P5JMG1"}, "text": "//*\n//*     JCL TO LINKEDIT VTOC COMMAND\n//*\n//VTOCLINK EXEC PGM=IEWL,REGION=1000K,\n//            PARM='RENT,REUS,REFR,LIST,XREF,SIZE=(512K,96K)'\n//OBJ      DD DISP=SHR,DSN=SYS2.OBJ\n//SYSLMOD  DD DISP=SHR,DSN=SYS2.LOAD\n//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(10,10))\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD  *\n INCLUDE OBJ(VTOC)\n INCLUDE OBJ(VTOCCHEK)\n INCLUDE OBJ(VTOCEXCP)\n INCLUDE OBJ(VTOCFORM)\n INCLUDE OBJ(VTOCMAP)\n INCLUDE OBJ(VTOCMSGS)\n INCLUDE OBJ(VTOCPRNT)\n INCLUDE OBJ(VTOCSORT)\n ENTRY VTOCCMD\n SETSSI 05139907\n NAME TSVTOC(R)\n//\n//\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGS": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11o\\x00\\x90\\x11o\\x15I\\x00\\n\\x00\\n\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-26T00:00:00", "modifydate": "1990-04-26T15:49:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n         REGS  &FST=0,&LST=15,&LET=R\n         LCLA  &NUM,&END\n&END     SETA  &LST+1\n&NUM     SETA  &FST\n.CYCL    ANOP\n&LET&NUM EQU   &NUM\n&NUM     SETA  &NUM+1\n         AIF   (&NUM LT &END).CYCL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCALL": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x831\\x1f\\x00\\x831\\x1f\\x14A\\x00\\n\\x00\\n\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-11-07T00:00:00", "modifydate": "1983-11-07T14:41:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n&LAB     VTCALL &RTN,&TEST\n&LAB     LA    R1,VTOCOM      POINT TO THE COMMON AREA\n         L     R15,VAD&RTN    POINT TO THE ROUTINE\n         AIF ('&TEST' NE 'TEST').NOTEST\n         LTR   R15,R15       SEE IF THE ROUTINE IS PRESENT\n         BZ    *+6           DON'T CALL IT IF IT'S NOT THERE\n.NOTEST  ANOP\n         BALR  R14,R15        THEN CALL IT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCALLOC": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x84\\x12O\\x00\\x84\\x12O\\x11F\\x010\\x01/\\x00\\x08\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1984-05-03T00:00:00", "modifydate": "1984-05-03T11:46:00", "lines": 304, "newlines": 303, "modlines": 8, "user": "ZTSOMG"}, "text": "         MACRO\n&NAME    VTCALLOC &DUMMY,&PERM,&DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,   X\n               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X\n               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X\n               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X\n               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X\n               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,           X\n               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=\n.*     MODIFICATIONS\n.*   IDENTIFIER   DATE   PERSON   REASON\n.*      001G     050284  GATES    RENAME ALLOC TO VTCALLOC,\n.*                                 RENAME DYNSPACE TO VTCDYNSP TO MAKE\n.*                                 VTOC MORE TRANSPORTABLE.\n.*       CHANGED 12/15/80 JEFF SAVIT TO SUPPORT LONG RBS         801215\n.**********************************************************************\n.*                                                                    *\n.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *\n.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *\n.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *\n.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *\n.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *\n.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *\n.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *\n.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *\n.*    IN THE FIRST FORM, AN INNER MACRO VTCDYNSP IS CALLED TO NAME 001G\n.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *\n.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *\n.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *\n.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *\n.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *\n.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *\n.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE VTCDYNSP MACRO IS001G\n.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. VTCDYNSP SETS A  001G\n.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *\n.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *\n.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *\n.*    THAT QUANTITY. (SEE VTCDYNSP)                                001G\n.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *\n.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *\n.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *\n.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *\n.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *\n.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *\n.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *\n.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *\n.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *\n.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *\n.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *\n.*                                                                    *\n.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *\n.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *\n.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *\n.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *\n.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *\n.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *\n.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *\n.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *\n.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *\n.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *\n.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *\n.*    CONTAIN THE LENGTH.                                            *\n.*    EG          ALLOC DSN=LOCATOR                                  *\n.*       LOCATOR  DC    A(DSN),Y(12)                                 *\n.*       DSN      DC    C'SYS1.LINKLIB'                              *\n.*                                                                   *\n.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *\n.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *\n.*       A VALUE IN A REGISTER, COPIES=(R3),                         *\n.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *\n.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *\n.*       FULLWORD FIELD.                                             *\n.*                                                                   *\n.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *\n.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *\n.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *\n.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *\n.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *\n.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *\n.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *\n.*       SUPERVISOR AND TSO).                                        *\n.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *\n.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *\n.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *\n.*       ARE TO RECEIVE THE DDNAME.                                  *\n.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *\n.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *\n.*                                                                   *\n.**********************************************************************\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS\n         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS\n         LCLA  &I                 COUNTER\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n.*\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     VTCDYNSP             GET NAME FOR SPACE                   001G\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n.* FOLLOWING LINE REPLACED, SINCE FAILS FOR LONG ALLOC REQUESTS  801215\n.*       XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST       801215\n         XC    &DYNP.RB(20),&DYNP.RB   ZERO REQUEST BLOCK        801215\n         XC    &DYNP.TUP,&DYNP.TUP     ZERO TEXT UNIT POINTERS   801215\n         XC    &DYNP.TU,&DYNP.TU       ZERO TEXT UNITS           801215\n.*                                                               801215\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&SSREQ' EQ 'YES').SSREQ\n.TDSN    AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&DSNPDE' NE '').DSNPDE\n         AIF   ('&DSNRET' NE '').DSNRT\n         AIF   ('&SYSOUT' NE '').SYSOUT\n         AIF   ('&DUMMY' NE '').DUMMY\n         AIF   ('&QNAME' NE '').QNAME\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n         AIF   ('&DDNRET&DDNTO' NE '').DDNRT\n.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT\n.TVOLRET AIF   ('&VOLRET' NE '').VOLRET\n.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT\n.TLABEL  AIF   ('&LABEL' NE '').LABEL\n.TPSWD   AIF   ('&PASWORD' NE '').PASWORD\n.TFORUSE AIF   ('&FORUSER' NE '').FORUSER\n.TTU     AIF   ('&TU' NE '').TU\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TSPACE  AIF   ('&SPACE' NE '').SPACE\n.TLRECL  AIF   ('&LRECL' NE '').DCB\n         AIF   ('&DEN' NE '').DCB\n         AIF   ('&RECFM' NE '').DCB\n         AIF   ('&BLKSIZE' NE '').DCB\n         AIF   ('&DSORG' NE '').DCB\n         AIF   ('&KEYLEN' NE '').DCB\n.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN\n.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN\n.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343\n.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM\n         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM\n.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL\n         AGO   .SVC99\n.SSREQ   RCPSSREQ\n         AGO   .TDSN\n.DSN     RCPDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.DSNPDE  RCPDSNPD &DSNPDE\n         AGO   .TDDN\n.DSNRT   RCPDSNRT &DSNRET\n&DSNRTO  SETA  &DTUO-46\n         AGO   .TDDN\n.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X\n               FORMS=&FORMS\n         AGO   .TDDN\n.DUMMY   RCPDUMMY &DUMMY\n         AGO   .TDDN\n.QNAME   RCPQNAME &QNAME\n         AGO   .TDDN\n.DDN     RCPDDN &DDN&F&FILE\n         AGO   .TUNIT\n.DDNRT   RCPDDNRT &DDNRET\n&DDNRTO  SETA  &DTUO-10\n         AGO   .TUNIT\n.UNIT   RCPUNIT &UNIT,&VOL\n         AGO   .TVOLRET\n.VOLRET  RCPVOLRT &VOLRET\n&VOLRTO  SETA  &DTUO-8\n         AGO   .TDSRGO\n.DSORGRT RCPDSRGR\n&DSRGRTO SETA  &DTUO-2\n         AGO   .TLABEL\n.LABEL   RCPLABEL &LABEL\n         AGO   .TPSWD\n.PASWORD RCPPSWD &PASWORD\n         AGO   .TFORUSE\n.FORUSER RCPFORUS &FORUSER\n         AGO   .TTU\n.TU      RCPTU &TU\n         AGO   .TDISP\n.DISP    RCPDISP &DISP\n         AGO   .TSPACE\n.SPACE   RCPSPACE &SPACE\n         AGO   .TLRECL\n.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X\n               DSORG=&DSORG,KEYLEN=&KEYLEN\n         AGO .TDCBDSN\n.DCBDSN  RCPDCBDS &DCBDSN\n         AGO .TDCBDDN\n.DCBDDN  RCPDCBDD &DCBDDN\n         AGO .TFREE                                              TE7343\n.FREE    RCPFREE  &FREE                                          TE7343\n         AGO   .TPERM\n.PERM    RCPPERM\n         AGO   .TSPECI\n.SPECIAL RCPSPEC &SPECIAL\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n         LA    R14,4(R1)               POINT TO REQUEST BLOCK\n.DYNA    DYNALLOC\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **\n.LTR     AIF   ('&ERROR' EQ '').TDDTO\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE\n&I       SETA  0\n.DDNTOL  ANOP\n&I       SETA  &I+1\n         AIF   ('&DDNTO(&I)' EQ '').RESERVE\n         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR\n         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.DDNTOR  ANOP\n&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)\n         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE 1\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU21\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AIF   (&DSNRTO EQ 0).TDDNRTO\n&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN\n.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11\n&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME\n.DTU11   AIF   (&VOLRTO EQ 0).DTU12\n&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER\n.DTU12   AIF   (&DSRGRTO EQ 0).DTU10\n&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG\n         AGO   .DTU10\n.DTU21   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         VTCDYNSP ADD                                              001G\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCCOM": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x00\\x00\\x00\\x831\\x1f\\x00\\x88\\x10\\x9f\\x15@\\x00\\xb0\\x00}\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "1983-11-07T00:00:00", "modifydate": "1988-04-18T15:40:00", "lines": 176, "newlines": 125, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n         VTCCOM  &TYPE\n.*  MODIFICATIONS\n.* IDENTIFIER   DATE   PERSON       REMARKS\n.*    001G     030379  GATES        ADD LOGIC FOR PURGE KEYWORD.\n.*    002G     110883  GATES        ADD LOGIC FOR MAP ROUTINE.\n.*    003G     112383  GATES        REDEFINE VALUES FOR VTCPFUNC.\n.*    004G     050284  GATES        RENAME VTOCOM TO VTCOM TO MAKE\n.*                                   VTOC MORE TRANSPORTABLE.\n.*    005G     051084  GATES        ADD UNIT NAME FIELD.\n.*    006G     052284  GATES        CORRECT LENGTH OF FMT3 TO 140.\n.*                                  SPECIFY ENOUGH AREA FOR MAXIMUM\n.*                                   FORMAT 3 DSCBS TO HANDLE 127\n.*                                   EXTENTS.\n.*                                  COMMENT OUT IECSDSL1 3 MACRO IT\n.*                                   WILL NOW BE USED AS A DSECT WHERE\n.*                                   NECESSARY.\n.*    007G     111485  GATES        BUMP NUMBER OF DATASETS FROM 1024\n.*                                   TO 4096 FOR MAP FUNCTION.\n.*    008G     121985  GATES        BUMP NUMBER OF DATASETS FROM 1024\n.*                                   TO 8192 FOR MAP FUNCTION.\n.*    009G     122085  GATES        BUMP NUMBER OF BLOCKS OF STORAGE\n.*                                   THAT CAN BE GETMAINED FROM 50\n.*                                   TO 100.\n.*    010G     041388  GATES        TAKE OUT PURGE KEYWORD LOGIC.\n.*\n.*\n.*\n*\n*        THIS IS THE VTOC COMMAND COMMON AREA\n*\n         AIF   ('&TYPE' EQ 'NODSECT').NODSECT\nVTOCOM   DSECT\n         AGO   .NODS\n.NODSECT ANOP\nVTOCOM   DS    0D\n.NODS    ANOP\n*\n*        WORKING STORAGE AREAS FOR THE VARIOUS ROUTINES\n*\nVTCWMSG  DS    A              WORKING STORAGE FOR THE MSG  ROUTINE\nVTCWEXIT DS    A              WORKING STORAGE FOR THE EXIT ROUTINE\nVTCWEXCP DS    A              WORKING STORAGE FOR THE EXCP ROUTINE\nVTCWCHEK DS    A              WORKING STORAGE FOR THE CHEK ROUTINE\nVTCWFORM DS    A              WORKING STORAGE FOR THE FORM ROUTINE\nVTCWPRNT DS    A              WORKING STORAGE FOR THE PRNT ROUTINE\nVTCWSORT DS    A              WORKING STORAGE FOR THE SORT ROUTINE\nVTCWMAP  DS    A              WORKING STORAGE FOR THE MAP  ROUTINE 002G\n*\n*        ADDRESSES OF THE ROUTINES\n*\nVADMSG   DC    V(VTOCMSG)     ADDRESS OF THE MESSAGE ROUTINE\nVADEXIT  DC    V(VTOCEXIT)    ADDRESS OF THE EXIT ROUTINE\nVADEXCP  DC    V(VTOCEXIT)    ADDRESS OF THE EXCP ROUTINE\nVADCHEK  DC    V(VTOCEXIT)    ADDRESS OF THE CHECK ROUTINE\nVADFORM  DC    V(VTOCEXIT)    ADDRESS OF THE FORMAT ROUTINE\nVADPRNT  DC    V(VTOCEXIT)    ADDRESS OF THE PRINT ROUTINE\nVADSORT  DC    V(VTOCEXIT)    ADDRESS OF THE SORT ROUTINE\nVADMAP   DC    V(VTOCEXIT)    ADDRESS OF THE MAP  ROUTINE          002G\n*\n*        TSO COMMAND PROCESSOR AND PARSE DATA\n*\nADDRUPT  DS    A              USER PROFILE TABLE\nADDRECT  DS    A              ENVIRONMENT CONTROL TABLE\nADDRPSCB DS    A              PROTECTED STEP CONTROL BLOCK\nADDRCBUF DS    A              COMMAND BUFFER\n         SPACE\nADDRANSR DS    A              PARSE ANSWER OR PDL ADDRESS\n         SPACE\nPARMLIST DS    8A             INTERNAL PARM AREA ( MSG )\nATTNECB  DS    F              ECB FOR ATTENTIONS\nDOUBLE   DS    D\n         SPACE\nMSGADDRS DS    2A             ADDRESSES OF MESSAGES FOR VTOCMSG\nMSGTEXT1 DS    XL124\nMSGTEXT2 DS    XL124\n         SPACE 3\nPUTOLD1  DS    3F\nPUTOLD2  DS    3F\n*\n*        PARAMETER LIST FOR THE EXIT ROUTINE\n*\nEXITLIST DS    0F\nEXITAREA DS    A       WORKAREA LOCATION\nDSCBADDR DS    A       ADDRESS OF THE DSCB\nFORMATAD DS    A       ADDRESS OF THE FORMATTED DSCB\nCPPLADDR DS    A       ADDRESS OF THE CPPL\nACTIONAD DS    A       ADDRESS OF THE RECOMMENDED OR REQUESTED ACTION\n*\n*        INTER ROUTINE FLAGS\n*\nVTCEFUNC DS    X              VTOCEXCP FUNCTION FLAG\nVTCFMTCK DS    X              FORMAT IS CALLED BY CHECK RTN\nVTCFMTCD EQU   X'80'          FORMAT WAS CALLED BY CHECK\nVTCFMTCC EQU   X'08'          FORMAT WAS CALLED BY CHECK THIS CALL\nVTCMFUNC DS    X              VTOCMAP FUNCTION FLAG                002G\nVTCCFUNC DS    X              VTOCCHEK FUNCTION FLAG               002G\n*\nTABFULL  DS    X              FLAG TABLES FULL, STOP INPUT\nLOCAT    DS    X              FLAG TO PERFORM CATALOG LOCATE\n*VOLPORS  DS    X         FLAG TO INDICATE VOLUME PUBL OR STOR 001G010G\nVTCPFUNC DS    X              PRINT END/CLEANUP AND MAP FLAG.      002G\n*                              X'00' INDICATES DSN HEADINGS REQ'D. 003G\n*                              X'01' INDICATES MAP HEADINGS REQ'D. 003G\n*                              X'02' INDICATES NO  HEADINGS REQ'D. 003G\n*                              X'04' AVAILABLE.                    003G\n*                              X'08' INDICATES CLEANUP REQ'D.      003G\nDSNLEN   DS    H              LENGTH OF THE DSNAME (NON-BLANKS)\nATABTITL DS    A              ADDRESS OF TABLE OF TITLES, LENGTHS\n*\n*\n*\n*        WORKING STORAGE FOR VOLUME UCB SEARCH\n*\nADDR     DS    CL3     UCB ADDRESS IN CHARACTERS\nVOLSER   DS    CL6     VOLUME SERIAL NUMBER FROM PARSE\nVOLID    DS    CL6     CURRENT VOLUME SERIAL NUMBER TO PROCESS\nUNITYP   DS    CL6     UNIT TYPE                                  005G\nFLAG     DS    X       UCB SEARCH FLAG\nLASTADR  DS    F       LAST UCB ADDRESS FOUND ( NO DUP'S )\n*\n*\n*\n*        ADDRESSES OF GETMAIN FOR FORMATTED DATA\n*\nVTCCURAD DS    A             CURRENT AVAILABLE ADDRESS\nVTCCURLN DS    A             CURRENT AVAILABLE LENGTH\n*VTCGETMN DS    50A           ADDRESSES OF BLOCKS                  009G\nVTCGETMN DS    100A          ADDRESSES OF BLOCKS                   009G\nVTCGETMX EQU  (*-VTCGETMN)/4  NUMBER OF BLOCKS  MAXIMUM\nVTCGETMS EQU   32768          GETMAIN SIZE\n*\n*\n*\n*        ADDRESSES OF GETMAIN FOR MAPPING VOLUMES\n*\nVTCMPMEM DS    A             BEGINNING OF VOLUME MAP AREA.         002G\nVTCMPEXT DS    A             CURRENT AVAILABLE EXTENT SAVE ADDRESS.002G\nVTCMPDSN DS    A             CURRENT AVAILABLE DSNAME SAVE ADDRESS.002G\nVTCMPGET EQU   128*8192      GETMAIN SIZE FOR 4096     002G  007G 008G\n*                             DATASETS OF 128 EXTENTS.       007G 008G\n*\n*        HASH SORT TABLE, POINTERS TO FIRST ENTRIES\n*\nVTCSORTH DS    256A           POINT TO FORMATED ENTRIES\nVTCSORTE EQU   *              END OF LIST\n*\n*        PRINT ENTRIES - PAGE AND LINE COUNTERS\n*\nLINECT   DS    H              LINE COUNT\nLINEMAX  DS    H              MAXIMUM LINES PER PAGE\nPAGECT   DS    H              PAGE COUNT\nLINELEN  DS    H              LENGTH OF THE PRINT LINE\n*\n*\n*          VARIOUS ITEMS\n*\nFMT4     DS    XL44           SPACE FOR DSCB NAME\n         IECSDSL1 4          SAVE EACH FORMAT 4 DSCB\n         DS    0D\n*MT3     DS    0XL148         SPACE FOR FORMAT3 DSCB               006G\n*        IECSDSL1 3                                                006G\nFMT3     DS    1XL130         SPACE FOR FORMAT3 DSCB EXT   4-16    006G\n         DS    1XL130         SPACE FOR FORMAT3 DSCB EXT  17-29    006G\n         DS    1XL130         SPACE FOR FORMAT3 DSCB EXT  30-42    006G\n         DS    1XL130         SPACE FOR FORMAT3 DSCB EXT  43-55    006G\n         DS    1XL130         SPACE FOR FORMAT3 DSCB EXT  56-68    006G\n         DS    1XL130         SPACE FOR FORMAT3 DSCB EXT  69-81    006G\n         DS    1XL130         SPACE FOR FORMAT3 DSCB EXT  82-94    006G\n         DS    1XL130         SPACE FOR FORMAT3 DSCB EXT  95-107   006G\n         DS    1XL130         SPACE FOR FORMAT3 DSCB EXT 108-120   006G\n         DS    1XL140         SPACE FOR FORMAT3 DSCB EXT 121-127   006G\n*                              LAST ENTRY MUST BE 140 BYTES.       006G\nFMT3LEN  EQU   *-FMT3         LENGTH FOR CLEARING.                 006G\n         DS    0D\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCDYNSP": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x12O\\x00\\x84\\x12O\\x118\\x008\\x008\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-05-03T00:00:00", "modifydate": "1984-05-03T11:38:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n&NAME    VTCDYNSP &TYPE\n.*     MODIFICATIONS\n.*   IDENTIFIER   DATE   PERSON   REASON\n.*      001G     050284  GATES    RENAME DYNSPACE TO VTCDYNSP TO MAKE\n.*                                 VTOC MORE TRANSPORTABLE.\n.*\n.*    THIS IS AN INNER MACRO TO ALLOC/FREE.\n.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST\n.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY\n.*                         EACH, REMEMBERING THE LARGEST.\n.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.\n.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,\n.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,\n.*    OR BY BEGINWKA, IF THE LATTER IS USED.\n.*\n.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE\n.*     NAME DYNSPACE\n.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE\n.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL\n.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.\n.*\n.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL\n.*          DYNSPACE ADD\n.*     (NO NAME FIELD AND ONE OPERAND)\n.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE\n.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE\n.*     CURRENT REQUEST IS FOR A GREATER AMOUNT\n.*\n.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO\n.*     NAME OR OPERAND FIELD.\n.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME\n.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.\n.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.\n.*\n         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN\n         GBLC  &DYNP,&DYNSP\n         LCLA  &I\n         AIF   ('&NAME' NE '').NAME\n         AIF   ('&TYPE' EQ '').ALLOC\n.*   THE ACCUMULATE FUNCTION IS REQUIRED\n&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST\n         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT\n&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM\n         MEXIT\n.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT\n&DYNSP   SETC  'DYNSP&RCPDYN'           ELSE GENERATE A NAME\n.EXIT    MEXIT\n.ALLOC   AIF   ('&DYNSP' EQ '').EXIT\n*\n**     RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA\n*\n&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE\n&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0\n&DYNSPQ  SETA 0\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCENTER": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x12?\\x00\\x84\\x12?\\x19V\\x00\\x94\\x00\\x94\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-05-02T00:00:00", "modifydate": "1984-05-02T19:56:00", "lines": 148, "newlines": 148, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n&SUBR    VTCENTER &BASES,&SAVE,&CSECT\n.*     MODIFICATIONS\n.*   IDENTIFIER   DATE   PERSON   REASON\n.*      001G     050284  GATES    RENAME ENTER TO VTCENTER TO MAKE\n.*                                 VTOC MORE TRANSPORTABLE.\n.*   THIS MACRO, USED WITH THE LEAVE MACRO, WILL PERFORM\n.*   STANDARD HOUSEKEEPING FOR A CSECT, INCLUDING SAVEAREA\n.*   CONSTRUCTION AND CHAINING, AND GETTING SOME STORAGE,\n.*   IF THAT IS DESIRED.\n.*   THE LEAVE MACRO WILL FREE THE GOTTEN STORAGE\n.*   THE OPERANDS ARE\n.*       &SUBR    ENTER  &BASES,&SAVE,&CSECT\n.*    WHERE\n.*       &SUBR    IS THE NAME OF THE CSECT\n.*       &BASES   ARE THE BASE REGISTERS FOR THE ROUTINE\n.*       &SAVE    IS THE LABEL FOR A SAVEAREA, OR A SUBPOOL\n.*                AND LENGTH FOR THE GETMAIN\n.*       &CSECT   TO CONTINUE AN EXISTING CSECT WITH ENTRY\n.*                POINT &SUBR\n.*\n.*    EXAMPLES -\n.*               ENTER 13,*\n.*\n.*       THIS WILL GENERATE NON-REENTRANT CODE, USING SAVEAREA\n.*       AS THE SAVE AREA LABEL, AND REGISTER 13 FOR THE BASE\n.*       REGISTER.\n.*\n.*       RENTMOD  ENTER (12,11),(,LDSECT)\n.*\n.*       THIS WILL GENERATE REENTRANT CODE WITH REGISTERS 12 AND\n.*       11 FOR BASE REGISTERS.  A GETMAIN WILL BE DONE FOR THE\n.*       DEFAULT SUBPOOL (0) WITH A LENGTH 'LDSECT'.\n.*\n         GBLC  &LV,&SP\n         LCLA  &K,&N\n         LCLC  &AREA,&B(16),&SUBNAME,&S\n&SUBNAME SETC  '&SUBR'\n         AIF   ('&SUBNAME' NE '').SUBSPEC\n&SUBNAME SETC  'MAIN'         DEFAULT CSECT NAME\n.SUBSPEC AIF   ('&CSECT' EQ '').NOTENT  IS IT AN ENTRY POINT?\n&CSECT   CSECT\n&SUBNAME DS    0F\n         AGO   .CSSPEC\n.NOTENT  ANOP\n&SUBNAME CSECT\n.CSSPEC  ANOP\n         SAVE  (14,12),T,&SUBNAME   SAVE THE REGISTERS\n         AIF   ('&BASES(1)' EQ '15' OR '&BASES' EQ '').R15SET\n         AIF   ('&BASES(1)' EQ '13' AND '&SAVE' NE '').R15SET\n         LR    &BASES(1),15  SET FIRST BASE REG\n.R15SET  CNOP  0,4\n&S       SETC  '&SUBNAME'\n         AIF   (N'&SAVE EQ 2).P4   SUBPOOL, SIZE SPEC?\n         AIF   ('&SAVE' EQ '').P3  NO SAVEAREA - DEFAULT\n&AREA    SETC  '&SAVE'\n         AIF   ('&SAVE' NE '*').P2\n&AREA    SETC  'SAVEAREA'\n.P2      AIF   ('&BASES(1)' NE '13').P4\n&S       SETC  '*'\n         USING &SUBNAME,15\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n         BAL   13,*+76        SKIP AROUND THE SAVEAREA\n         DROP  15\n         AGO   .P4\n.P3      AIF   ('&BASES(1)' NE '13').P4\n         MNOTE 8,'*** CONTENTS OF REG 13 ARE LOST.  NO SAVE AREA WAS ESX\n               TABLISHED.'\n.P4      AIF   ('&BASES(1)' NE '14' OR '&SAVE' EQ '').P5\n         MNOTE 8,'*** MACRO RESTRICTION - REG 14 MUST NOT BE USED AS THX\n               E FIRST BASE REGISTER IF A SAVE AREA IS USED.'\n.P5      AIF   ('&BASES' EQ '').P9\n&N       SETA  N'&BASES\n.P6      ANOP\n&K       SETA  &K+1\n&B(&K)   SETC  ','.'&BASES(&K)'\n         AIF   (N'&SAVE EQ 1).PE\n         AIF   ('&BASES(&K)' NE '13').P7\n         MNOTE 8,'*** REG 13 MAY NOT BE USED AS A BASE REGISTER FOR REEX\n               NTRANT CODE.'\n         AGO   .P7\n.PE      AIF   ('&BASES(&K+1)' NE '13' OR '&SAVE' EQ '').P7\n         MNOTE 8,'*** WHEN USING A SAVE AREA, REG 13 MAY NOT BE USED ASX\n                A SECONDARY BASE REGISTER.'\n.P7      AIF   ('&BASES(&K+1)' NE '').P6\n         USING &S&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X\n               11)&B(12)&B(13)&B(14)&B(15)&B(16)\n&K       SETA  1\n         AIF   ('&BASES(1)' NE '13' OR '&SAVE' EQ '').P8\n&AREA    DC    18F'0'\n.P8      AIF   (&K GE &N).P10\n         LA    &BASES(&K+1),X'FFF'(&BASES(&K))\n         LA    &BASES(&K+1),1(&BASES(&K+1))\n&K       SETA  &K+1\n         AGO   .P8\n.P9      USING &SUBNAME,15\n.P10     AIF   (N'&SAVE GE 2).P13\n         AIF   ('&SAVE' EQ '' OR '&BASES(1)' EQ '13').P12\n.****    AIF   ('&SAVE(1,1)' GE '0').P16  NUMERIC MEANS A PASSED AREA\n         AIF   ('&SAVE(1)' GE '0').P16  NUMERIC MEANS A PASSED AREA\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n.P11     BAL   13,*+76       SKIP AROUND THE SAVEAREA\n&AREA    DC    18F'0'\n.P12     MEXIT\n.P13     ANOP\n&LV      SETC  '&SAVE(2)'\n&SP      SETC  '0'\n         AIF   ('&SAVE(1)' EQ '').P14\n&SP      SETC  '&SAVE(1)'\n.P14     CNOP  0,4          DO A GETMAIN FOR THE AREA\n         BAL   1,*+8          POINT THE SP AND LV\nENT&SYSNDX DC  AL1(&SP)       SUBPOOL FOR THE GETMAIN\n         DC    AL3(&LV)       LENGTH OF THE GETMAIN\n         L     0,0(1)         GET THE DATA IN REG 1\n         SVC   10             ISSUE THE GETMAIN\n.*                            CHAIN THE SAVEAREAS\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n*        AIF   ('&SAVE(3,1)' NE 'C').P15   CLEAR THE SAVEAREA?\n         AIF   ('&SAVE(3)' NE 'C').P15   CLEAR THE SAVEAREA?\n         LA    4,12(13)       YES, POINT PAST THE CHAIN\n         L     5,ENT&SYSNDX   GET THE SIZE\n         LA    6,12           MINUS THE CHAIN AREA (12 BYTES )\n         SR    5,6            GIVES THE AMOUNT TO CLEAR\n         SR    7,7            CLEAR THE FROM COUNT AND CLEAR BYTE\n         MVCL  4,6            WHEE, CLEAR IT OUT\n         LM    0,7,20(2)      RESTORE THE ORIGINAL REGISTERS\n         MEXIT\n.P15     ANOP\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEXIT\n.P16     L     1,&AREA+0(1)   NUMERIC &SAVE IMPLIES A PASSED SAVEAREA\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCFMT": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x84\\x12?\\x00\\x90 \\x8f\\x11\\t\\x00<\\x000\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1984-05-02T00:00:00", "modifydate": "1990-07-27T11:09:00", "lines": 60, "newlines": 48, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n         VTCFMT\n.*     MODIFICATIONS\n.*   IDENTIFIER   DATE   PERSON   REASON\n.*      001G     050284  GATES    RENAME VTFMT TO VTCFMT TO MAKE\n.*                                 VTOC MORE TRANSPORTABLE.\n.*      002G     051084  GATES    ADD UNIT NAME FIELD.\n.*      003G     051084  GATES    ADD LAST OPEN IN/OUT FIELD.\n.*      004G     010488  GATES    ADD KEYLEN FIELD.\n.*      005G     072790  GATES    ADD OPTCD FIELD.\n.*\n.*\n.*\n.*\n*\n*        THIS DSECT DESCRIBES THE FORMATTED DSCB\n*\nVTFMT    DSECT\nVTFNEXT  DS    A              POINTER TO NEXT DSCB\nVTFALLOC DS    F              ALLOCATION IN UNITS AS DEFINED BY THE\n*                               COMMAND.  KBYTES, MBYTES, TRACKS, OR\n*                               CYLS MAY BE THE UNIT.\nVTFUSED  DS    F                AMOUNT USED, SAME UNIT\nVTFVOLUM DS    CL6            VOLUME SERIAL NUMBER\nVTFCREDT DS    XL3            CREATION DATE YYDDD\nVTFEXPDT DS    XL3            EXPIRATION DATE YYDDD\nVTFLSTAC DS    XL3            LAST ACCESS DATE YYDDD\nVTFNOEPV DS    AL1            NUMBER OF EXTENTS PER VOLUME\nVTFDSORG DS    CL3            DATA SET ORGANIZATION\n*                               PS, PO, DA, VS, IS, PERHAPS U\nVTFRECFM DS    CL5            RECORD FORMAT\n*                               F,V, OR U, B, T, S, A, M\nVTFLRECL DS    H              LOGICAL RECORD LENTGH\nVTFBLKSZ DS    H              BLOCK SIZE\nVTFROUND DS    C             R IF ROUND WAS SPECIFIED\nVTFPROT  DS    C              PASSWORD PROTECTION FLAG\nVTFCATLG DS    C              CATALOG INDICATION\n*                             C = CATALOGED\n*                             N = NOT CATALOGED\n*                             E = ERROR ACCESSING CATALOG\n*                             W = CATALOGED WRONGLY (ON OTHER VOL)\nVTFSECAM DS    XL2           SECONDARY AMOUNT\nVTFSECAL DS    C              SECONDARY ALLOCATION TYPE\n*                               C FOR CYL, T FOR TRKS, B FOR BLOCKS\n*                               R FOR BLOCKS WITH ROUND\nVTFDSTYP DS    C              DATA SET TYPE, USER MAY DEFINE\n*                               S = SYSTEM TEMPORARY DATA SET\n*                               T = TEST DATA SET\n*                               P = PRODUCTION DATA SET\nVTFACTON DS    CL8            REQUESTED ACTION OR COMMENT\nVTFUNIT  DS    CL6            UNIT TYPE FOR THIS VOLUME.           002G\nVTFUPDAT DS    CL1            LAST OPENED INPUT/OUTPUT STATUS.     003G\n*                              Y = OPENED OUTPUT.                  003G\n*                              N = OPENED INPUT.                   003G\nVTFKEYLE DS    CL1            KEY LENGTH.                          004G\nVTFOPTCD DS    CL1            OPTCD.                               005G\nVTFDSNL  DS    H              LENGTH OF DSNAME\nVTFMTL   EQU   *-VTFMT        FIXED LENGTH OF THIS DSECT\nVTFDSN   DS    44C            VARIABLE LENGTH FIELD\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCFREE": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84\\x12O\\x00\\x84\\x12O\\x11E\\x00\\x8a\\x00\\x89\\x00\\x04\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-05-03T00:00:00", "modifydate": "1984-05-03T11:45:00", "lines": 138, "newlines": 137, "modlines": 4, "user": "ZTSOMG"}, "text": "         MACRO\n&NAME    VTCFREE  &UNALC,&DSN=,&DDN=,&MEMBER=,&DISP=,&SYSOUT=,         X\n               &ERROR=,&MF=AUTO,&PREFIX=,&FILE=,&F=,&DA=,&HOLD=\n.*     MODIFICATIONS\n.*   IDENTIFIER   DATE   PERSON   REASON\n.*      001G     050284  GATES    RENAME FREE TO VTCFREE,\n.*                                 RENAME DYNSPACE TO VTCDYNSP TO MAKE\n.*                                 VTOC MORE TRANSPORTABLE.\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     VTCDYNSP             GET NAME FOR SPACE                   001G\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n&T       SETC  'A'\n&PAR     SETC  '&MF(2)+4'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n&PAR     SETC  '&MF(2)'(2,K'&MF(2)-2)\n&T       SETC  'R'\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n&PAR     SETC  '4&MF(2)'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n&T       SETC  'A'\n&PAR     SETC  '&DYNP.RB'\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBUN        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&SYSOUT' NE '').SYSOUT\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TUNALC  AIF   ('&UNALC' NE '').PERM\n.THOLD   AIF   ('&HOLD' NE '').HOLD\n         AGO   .SVC99\n.DSN     RCPFDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.SYSOUT  RCPFSYS &SYSOUT\n         AGO   .TDDN\n.DDN     RCPFDDN &DDN&F&FILE\n         AGO   .TDISP\n.DISP RCPFDISP &DISP\n         AGO   .TUNALC\n.PERM    RCPUNALC\n         AGO   .THOLD\n.HOLD    RCPFHOLD &HOLD\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n.DYNA    DYNALLOC\n         AIF   ('&ERROR' EQ '').RESERVE\n         AIF   ('&PAR' EQ '').LTR\n         L&T   R14,&PAR                 LOAD REG 14 WITH ADDRESS OF RB\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n.LTR     LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n**       NOTE.  R14 POINTS TO REQUEST BLOCK, R15 HAS RETURN CODE     **\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC DATA                             **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU11\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AGO   .DTU10\n.DTU11   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         VTCDYNSP ADD                                              001G\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCLEAVE": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x82\\t\\x7f\\x00\\x84\\x12?\\x194\\x00$\\x00\\x0e\\x00\\x18\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1982-04-07T00:00:00", "modifydate": "1984-05-02T19:34:00", "lines": 36, "newlines": 14, "modlines": 24, "user": "ZTSOMG"}, "text": "         MACRO\n&NAME    VTCLEAVE &EQ,&RC=\n.*     MODIFICATIONS\n.*  IDENTIFIER   DATE   PERSON   REASON\n.*     001G     050284  GATES    CHANGE REGS MACRO TO EQUATES TO\n.*                                ELIMINATE THE NEED FOR THE MACRO.\n.*     002G     050284  GATES    RENAME VTLEAVE TO VTCLEAVE TO MAKE\n.*                                VTOC MORE TRANSPORTABLE.\n.*\n         GBLC  &LV,&SP\n&NAME    LR    2,13\n         L     13,4(13)\n         AIF   ('&RC' EQ '').L0\n         LA    15,&RC         LOAD THE RETURN CODE\n.L0      STM   15,1,16(13)  STORE RETURN REGS\n         AIF   ('&LV' EQ '').L1  ANYTHING TO FREE?\n         FREEMAIN R,LV=&LV,SP=&SP,A=(2)  FREE THE AREA\n.L1      RETURN (14,12),T     RETURN FROM WHENCE WE CAME\n         AIF   ('&EQ' NE 'EQ').L4  REGISTERS TOO?\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.L4      MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCMSG": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x831\\x1f\\x00\\x831\\x1f\\x14B\\x00\\x06\\x00\\x06\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-11-07T00:00:00", "modifydate": "1983-11-07T14:42:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n&NAME    VTCMSG &TEXT\n         LCLA  &A\n&A       SETA  K'&TEXT-2+4  SUBTRACT QUOTES, ADD PREFIX FOUR BYTES\n&NAME    DC    H'&A',H'0',C&TEXT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCPARS": {"ttr": 1040, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x00\\x00\\x800\\x8f\\x00\\x90 \\x8f\\x11C\\x01m\\x00\\xe5\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1980-11-03T00:00:00", "modifydate": "1990-07-27T11:43:00", "lines": 365, "newlines": 229, "modlines": 0, "user": "ZTSOMG"}, "text": "*      MODIFICATIONS\n*  IDENTIFIER   DATE   PGMR    REASON\n*     001G     111278  GATES   MAKE TRKS DEFAULT INSTEAD OF KBYTES.\n*     002G     030379  GATES   ADD PURGE KEYWORD SO A JCL FILE OF\n*                              DD STATEMENTS CAN BE GENERATED TO\n*                              DELETE DATA FROM PRIV AND PUB MOUNTED\n*                              PACKS. GOT RID OF OUTPUT KEYWORD.\n*     003G     051079  GATES   ADD PRIVATE KEYWORD SO 002G MOD CAN\n*                              WORK AGAINST PRIVATELY MOUNTED VOLUMES.\n*     004G     110380  GATES   FIX DEFAULT KEYWORD NOPRIVATE IT WAS\n*                              MISSPELLED.\n*     005G     110283  GATES   MAKE VOLSER KEYWORD ON SORT VOLUME.\n*     006G     110883  GATES   ADD MAP KEYWORD TO MAP PACKS.\n*     007G     112183  GATES   ADD NLEV NEND NCONT KEYWORDS.\n*     008G     050284  GATES   RENAME VTOCPARS TO VTCPARS TO MAKE\n*                               VTOC MORE TRANSPORTABLE.\n*     009G     051084  GATES   ADD UPDATE KEYWORD TO TELL IF LAST OPEN\n*                               OF A DSN WAS INPUT/OUTPUT.\n*     010G     051584  GATES   ADD AND4/OR4 AND AND5/OR5 KEYWORDS.\n*     011G     051584  GATES   ALLOW = \u00ac= < > \u00ac< \u00ac> <= >= FOR OPERATOR\n*                               ON LIMIT AND AND/OR KEYWORDS.\n*     012G     051584  GATES   CHANGE VALUE PART TO ANY ON\n*                               LIMIT AND AND/OR KEYWORDS FROM\n*                               ALPHANUM SO WE CAN USE PERIODS.\n*     013G     111685  GATES   ADD BEGINNING AND  NBEGINNING KEYWORDS\n*                               THIS IS BECAUSE LEVEL KEYWORD LOGIC\n*                               WAS CHANGED TO BE TRUELY THE HIGH\n*                               LEVEL INDEX (ENDING IN A PERIOD).\n*                               SO BEGINNING WAS ADDED TO BE A MATCH\n*                               ON THE FIRST FEW CHARACTERS.\n*     014G     111685  GATES   ADD LOWLEVEL AND  NLOWLEVEL KEYWORDS\n*                               THIS IS BECAUSE END KEYWORD LOGIC\n*                               DOESN'T HANDLE LOW LEVEL INDEX\n*                               BUT DOES LOW LEVEL CHARACTERS.\n*     015G     111685  GATES   ALLOW VALUE IN LIMIT/AND/OR TO BE ANY\n*                               CHARACTER.\n*     016G     122085  GATES   PUT IN INTEGRITY OPTION TO ALLOW USER\n*                               TO CHECK FOR GAPS AND OVERLAPS ON\n*                               VTOC. PREVIOUSLY INTEGRITY WAS ALWAYS\n*                               CHECKED AT THE COST OF PROCESSING\n*                               SPEED. WITH THIS OPTION YOU CAN NOW\n*                               RUN FASTER (NEW DEFAULT NOINTEGRITY).\n*     017G     010688  GATES   TAKE OUT PURGE OPTION. THE OUTPUT CAN\n*                               BE DIRECTED TO VTOCOUT AND MANIPULATED\n*                               TO PRODUCE THE SAME RESULT. THIS\n*                               AFFECTS 002G, 003G, AND 004G MODS.\n*     018G     072790  GATES   ADD OPTCD KEYWORD TO CHECK WHETHER\n*                               WRITE VALIDITY IS ON.\n*                              ALSO ADD ENTRY FOR KEYLE WHICH WAS\n*                               PREVIOUSLY FORGOTTEN.\n*\n*\n*\n*\n         PUSH  PRINT\n         PRINT NOGEN\nPCLMAIN  IKJPARM DSECT=PDL\n         SPACE 2\nVOLS     IKJPOSIT DSNAME,VOLSER,LIST,                                  $\n               PROMPT='VOLUMES TO SEARCH AND OTHER PARAMETERS',        $\n               HELP=('VOLUME SERIAL NUMBERS WHICH ARE TO BE SEARCHED FO$\n               DATA SETS TO LIST')\n         SPACE 2\nLEVKEY   IKJKEYWD\n         IKJNAME 'LEVEL',SUBFLD=SUBLEV\n         SPACE 2\nNLEVKEY  IKJKEYWD\n         IKJNAME 'NLEVEL',SUBFLD=SUBNLEV\n         SPACE 2\nBEGKEY   IKJKEYWD\n         IKJNAME 'BEGINNING',SUBFLD=SUBBEG\n         SPACE 2\nNBEGKEY  IKJKEYWD\n         IKJNAME 'NBEGINNING',SUBFLD=SUBNBEG\n         SPACE 2\nLOWKEY   IKJKEYWD\n         IKJNAME 'LOWLEVEL',SUBFLD=SUBLOW\n         SPACE 2\nNLOWKEY  IKJKEYWD\n         IKJNAME 'NLOWLEVEL',SUBFLD=SUBNLOW\n         SPACE 2\nENDKEY   IKJKEYWD\n         IKJNAME 'ENDING',SUBFLD=SUBEND\n         SPACE 2\nNENDKEY  IKJKEYWD\n         IKJNAME 'NENDING',SUBFLD=SUBNEND\n         SPACE 2\nCONTAINK IKJKEYWD\n         IKJNAME 'CONTAINING',SUBFLD=SUBCONT\n         SPACE 2\nNCONKEY  IKJKEYWD\n         IKJNAME 'NCONTAINING',SUBFLD=SUBNCONT\n         SPACE 2\nINTEGK   IKJKEYWD DEFAULT='NOINTEGRITY'                            016G\n         IKJNAME 'INTEGRITY'                                       016G\n         IKJNAME 'NOINTEGRITY'                                     016G\n         SPACE 2\nSPACEK   IKJKEYWD DEFAULT='TRKS'                                   001G\n         IKJNAME 'KBYTES'\n         IKJNAME 'MBYTES'\n         IKJNAME 'TRKS'\n         IKJNAME 'CYLS'\n         IKJNAME 'BLOCKS'\n         SPACE 2\nSORTK    IKJKEYWD\n         IKJNAME 'SORT',SUBFLD=SUBSORTS\n         IKJNAME 'NOSORT'\n         SPACE 2\nMAPK     IKJKEYWD DEFAULT='NOMAP'\n         IKJNAME 'MAP',SUBFLD=SUBMAPS                              006G\n         IKJNAME 'NOMAP'                                           006G\n         SPACE 2\nBREAKK   IKJKEYWD\n         IKJNAME 'BREAK',SUBFLD=SUBBREAK\n         SPACE 2\nLIMITK   IKJKEYWD\n         IKJNAME 'LIMIT',SUBFLD=SUBLIMIT\n         SPACE 2\nANDOR1K  IKJKEYWD\n         IKJNAME 'AND1',SUBFLD=SUBAO1,ALIAS='AND'\n         IKJNAME 'OR1',SUBFLD=SUBAO1,ALIAS='OR'\n         SPACE 2\nANDOR2K  IKJKEYWD\n         IKJNAME 'AND2',SUBFLD=SUBAO2\n         IKJNAME 'OR2',SUBFLD=SUBAO2\n         SPACE 2\nANDOR3K  IKJKEYWD\n         IKJNAME 'AND3',SUBFLD=SUBAO3\n         IKJNAME 'OR3',SUBFLD=SUBAO3\n         SPACE 2\nANDOR4K  IKJKEYWD\n         IKJNAME 'AND4',SUBFLD=SUBAO4\n         IKJNAME 'OR4',SUBFLD=SUBAO4\n         SPACE 2\nANDOR5K  IKJKEYWD\n         IKJNAME 'AND5',SUBFLD=SUBAO5\n         IKJNAME 'OR5',SUBFLD=SUBAO5\n         SPACE 2\nPRINTK   IKJKEYWD\n         IKJNAME 'PRINT',SUBFLD=SUBPRINT\n         IKJNAME 'NOPRINT'\n         SPACE 2\nCHARSK   IKJKEYWD\n         IKJNAME 'CHARS',SUBFLD=SUBCHARS\n         SPACE 2\nLINESK   IKJKEYWD\n         IKJNAME 'LINES',SUBFLD=SUBLINES\n         SPACE 2\nSORTTYPK IKJKEYWD\n         IKJNAME 'INTSORT'\n         IKJNAME 'EXTSORT'\n         SPACE 2\nHEADK    IKJKEYWD\n         IKJNAME 'HEADING',SUBFLD=SUBHEAD\n         IKJNAME 'NOHEADING'\n         SPACE 2\nTOTALK   IKJKEYWD\n         IKJNAME 'TOTALS',SUBFLD=SUBTOTAL\n         SPACE 2\n*PURGEK   IKJKEYWD DEFAULT='NOPURGE'                           002G017G\n*        IKJNAME 'NOPURGE'                                     002G017G\n*        IKJNAME 'PURGE'                                       002G017G\n*        SPACE 2\n*PRIVATEK IKJKEYWD DEFAULT='NOPRIVATE'                         004G017G\n*        IKJNAME 'NOPRIVATE'                                   003G017G\n*        IKJNAME 'PRIVATE'                                     003G017G\n*        SPACE 2\nFORMATK  IKJKEYWD\n         IKJNAME 'FORMAT',SUBFLD=SUBFORMT\n         SPACE 2\nDSNPLNK  IKJKEYWD\n         IKJNAME 'DSNLEN',SUBFLD=SUBDSNLN\n         SPACE 2\nSUBLEV   IKJSUBF\nLEVEL    IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='HIGH LEVEL INDEX OF DSNAMES TO PROCESS'\n         SPACE 2\nSUBNLEV  IKJSUBF\nNLEVEL   IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='HIGH LEVEL INDEX OF DSNAMES TO SKIP'\n         SPACE 2\nSUBBEG   IKJSUBF\nBEGIN    IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='BEGINNING CHARACTERS OF DSNAMES TO PROCESS'\n         SPACE 2\nSUBNBEG  IKJSUBF\nNBEGIN   IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='BEGINNING CHARACTERS OF DSNAMES TO SKIP'\n         SPACE 2\nSUBLOW   IKJSUBF\nLOWLEV   IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='LOWEST INDEX LEVEL OF DSNAMES TO PROCESS'\n         SPACE 2\nSUBNLOW  IKJSUBF\nNLOWLEV  IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='LOWEST INDEX LEVEL OF DSNAMES TO SKIP'\n         SPACE 2\nSUBEND   IKJSUBF\nENDING   IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='ENDING CHARACTERS OF DSNAMES TO PROCESS'\n         SPACE 2\nSUBNEND  IKJSUBF\nNENDING  IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='ENDING CHARACTERS OF DSNAMES TO SKIP'\n         SPACE 2\nSUBCONT  IKJSUBF\nCONTAIN  IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='CHARACTER STRING CONTAINED IN DSNAMES TO PROCESSX\n               '\n         SPACE 2\nSUBNCONT IKJSUBF\nNCONTAIN IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='CHARACTER STRING CONTAINED IN DSNAMES TO SKIP'\n         SPACE 2\nSUBMAPS  IKJSUBF\nSUBMAP   IKJKEYWD DEFAULT='HEX'\n         IKJNAME 'HEX'                                             006G\n         IKJNAME 'DEC'                                             006G\n         SPACE 2\nSUBSORTS IKJSUBF\nSUBSORT  IKJKEYWD\n         IKJNAME 'DSNAME'\n         IKJNAME 'VOLUME'                                          005G\n         SPACE 2\nSUBBREAK IKJSUBF\nBREAK    IKJIDENT 'NUMBER OF CHARACTERS FOR A BREAK',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='3'\n         SPACE 2\nSUBCHARS IKJSUBF\nCHARSPL  IKJIDENT 'NUMBER OF CHARACTERS PER LINE   ',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=3\nBLKSZSET IKJIDENT 'PHYSICAL BLOCK SIZE',FIRST=NUMERIC,OTHER=NUMERIC,   X\n               MAXLNTH=5\n         SPACE 2\nSUBLINES IKJSUBF\nLINESPP  IKJIDENT 'NUMBER OF LINES PER PAGE        ',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=3\n         SPACE 2\nSUBPRINT IKJSUBF\nSUBPRTKY IKJIDENT 'ADD, REP, NEW, OR DEL',                             X\n               FIRST=ALPHA,OTHER=ALPHA,MAXLNTH=3\nSUBPRTIT IKJIDENT 'ITEMS TO PRINT',LIST,FIRST=ALPHA,MAXLNTH=6\n         SPACE 2\nSUBHEAD  IKJSUBF\nHEADING  IKJPOSIT QSTRING\n         SPACE 2\nSUBTOTAL IKJSUBF\nTOTALN   IKJIDENT 'NUMBER OF CHARACTERS FOR TOTALS',FIRST=NUMERIC,     X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='0'\n         SPACE 3\nSUBLIMIT IKJSUBF\nSUBLKEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUBLOPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ANY,OTHER=ANY,       X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\n* SUBLVALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM, 015G\nSUBLVALU IKJIDENT 'COMPARISON VALUE',FIRST=ANY,                   015G X\n               OTHER=ANY,                                              X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 3\nSUBAO1   IKJSUBF\nSUB1KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB1OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ANY,OTHER=ANY,       X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB1VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ANY,                                              X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBAO2   IKJSUBF\nSUB2KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB2OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ANY,OTHER=ANY,       X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB2VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ANY,                                              X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBAO3   IKJSUBF\nSUB3KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB3OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ANY,OTHER=ANY,       X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB3VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ANY,                                              X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBAO4   IKJSUBF\nSUB4KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB4OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ANY,OTHER=ANY,       X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB4VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ANY,                                              X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBAO5   IKJSUBF\nSUB5KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB5OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ANY,OTHER=ANY,       X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB5VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ANY,                                              X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBFORMT IKJSUBF\nFORMATSP IKJIDENT 'FORMAT TYPES TO OUTPUT',LIST,FIRST=NUMERIC,         X\n               MAXLNTH=1,DEFAULT='1'\n         SPACE 2\nSUBDSNLN IKJSUBF\nDSNPLN   IKJIDENT 'LENGTH OF DSNAME TO PRINT',FIRST=NUMERIC,           X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='44'\nDSNLNTYP IKJKEYWD DEFAULT='TRUNCATE'\n         IKJNAME 'TRUNCATE'\n         IKJNAME 'MULTILINE'\n         IKJENDP\n         SPACE 2\n         POP   PRINT\nACTION   EQU   1\nVOLUME   EQU   2\nCDATE    EQU   3\nLSTUS    EQU   4\nEXPDT    EQU   5\nALLOC    EQU   6\nUNUSED   EQU   7\nPCT      EQU   8\nEXT      EQU   9\nDSORG    EQU   10\nRECFM    EQU   11\nBLKSZ    EQU   12\nLRECL    EQU   13\nPASS     EQU   14\nCAT      EQU   15\nSECT     EQU   16\nSECQ     EQU   17\nUNIT     EQU   18\nROUND    EQU   19\nTYPE     EQU   20\nUSED     EQU   21\nCCHH     EQU   22\nDUMMY3   EQU   23\nDUMMY4   EQU   24\nDUMMY5   EQU   25\nDSNAME   EQU   26\nUPDATE   EQU   27                                                  009G\nKEYLE    EQU   28                                                  018G\nOPTCD    EQU   29                                                  018G\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCPDEDS": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x82\\t\\x7f\\x00\\x84\\x12?\\x197\\x00\\x1b\\x00\\x17\\x00\\x05\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1982-04-07T00:00:00", "modifydate": "1984-05-02T19:37:00", "lines": 27, "newlines": 23, "modlines": 5, "user": "ZTSOMG"}, "text": "         MACRO\n         VTCPDEDS\n.*     MODIFICATIONS\n.*   IDENTIFIER   DATE   PERSON   REASON\n.*      001G     050284  GATES    RENAME PDEDSNAM TO VTCPDEDS TO MAKE\n.*                                 VTOC MORE TRANSPORTABLE.\n*\n*        DEFINE A DSECT FOR THE DSNAME PARSE DESCRIPTION\n*\nPDEDSNAM DSECT\nPDEDSN   DS    A              POINTER TO DSNAME\nPDEDSNL  DS    H              LENGTH OF DSNAME\nPDEDFLG1 DS    X              DATA SET NAME FLAGS\nPDEDFLD1 EQU   X'80'          ONE IF THE DSNAME IS PRESENT\nPDEDFLQ1 EQU   X'40'          ONE IF THE DSNAME IS WITHIN QUOTES\nPDEDMEM  DS    A              POINTER TO MEMBER NAME\nPDEDMEML DS    H              LENGTH OF MEMBER NAME\nPDEDFLG2 DS    X              MEMBER   NAME FLAGS\nPDEDFLD2 EQU   X'80'          ONE IF THE MEMBER IS PRESENT\nPDEDPASS DS    A              POINTER TO PASSWORD\nPDEDPASL DS    H              LENGTH OF PASSWORD\nPDEDFLG3 DS    X              PASSWORD      FLAGS\nPDEDFLD3 EQU   X'80'          ONE IF THE PASSWORD IS PRESENT\nPDEDCHAN DS    0F             CHAIN ADDRESS\nPDEDCHNF DS    X              CHAIN FLAGS ( X'FF' FOR END )\nPDEDCHN  DS    AL3            TRUE CHAIN POINTER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCS99NG": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x12O\\x00\\x84\\x12O\\x11A\\x00F\\x00F\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-05-03T00:00:00", "modifydate": "1984-05-03T11:41:00", "lines": 70, "newlines": 70, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n&NAME    VTCS99NG &RB=(R14),&RC=(R15),&CPPL=,&MF=G,&CP=\n.*     MODIFICATIONS\n.*   IDENTIFIER   DATE   PERSON   REASON\n.*      001G     050284  GATES    RENAME S99FAIL TO VTCS99NG TO MAKE\n.*                                 VTOC MORE TRANSPORTABLE.\n         GBLB  &RCPCPPL(2)             CP INDICATOR\n         GBLC  &RCPPRE\n         LCLB  &GEN\n         LCLC  &C\n&NAME    DS    0H\n         AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF(1)' EQ 'E').EXEC\n         MNOTE 4,'&MF(1) IS AN INVALID MF, MF=G USED'\n.GEN     LA    R1,FAIL&SYSNDX     LOAD PLIST ADDRESS\n&GEN     SETB  1\n         AGO   .L\n.EXEC    AIF   ('&MF(2)' NE '').LISTOK\n         MNOTE 8,'LIST ADDRESS NOT SPECIFIED'\n         MEXIT\n.LISTOK  AIF   ('&MF(3)' EQ '').TMF2\n&MF(3)   EQU   24                      LENGTH OF PARAMETER LIST\n.TMF2    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').L\n         AIF   ('&MF(2)'(1,1) EQ '(').REG\n         LA    R1,&MF(2)          LOAD DAIRFAIL PARAM LIST ADDRESS\n         AGO   .L\n.REG     ANOP\n&C       SETC  '&MF(2)'(2,K'&MF(2)-2)\n         LR    R1,&C              LOAD DAIRFAIL PARAM LIST ADDR\n.L       AIF   ('&RB'(1,1) EQ '(').RBR\n         AIF   ('&RB' NE '').RBA\n         MNOTE 8,'REQ BLOCK ADDRESS NOT SPECIFIED'\n         MEXIT\n.RBR     ST    &RB(1),0(R1)       STORE S99 RB ADDRESS\n         AGO   .RC\n.RBA     LA    R14,&RB            LOAD ADDRESS OF REQ BLOCK\n         ST    R14,0(R1)          AND STORE IN PLIST\n.RC      AIF   ('&RC'(1,1) EQ '(').RCR\n         LA    R14,&RC            LOAD ADDRESS OF RET CODE\n         ST    R14,4(R1)          AND STORE IN PLIST\n         AGO   .EFF02\n.RCR     ANOP\n.GRC     LA    R14,20(R1)         LOAD ADDR RET CODE FLD\n         ST    &RC(1),0(R14)      STORE RET CODE\n         ST    R14,4(R1)          AND STORE ITS ADDRESS\n.EFF02   LA    R14,=A(0)          LOAD ADDR OF FULLWORD OF 0\n         ST    R14,8(R1)          STORE IT.\n         AIF   ('&CP' EQ 'YES' OR &RCPCPPL(1)).CPID\n         LA    R14,=X'8032'       LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)          AND STORE IT\n         XC    16(4,R1),16(R1)    CLEAR CPPL POINTER\n         AGO   .GO\n.CPID    LA    R14,=Y(50)         LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)         AND STORE IT\n         AIF   ('&CPPL' EQ '').DCPPL\n         AIF   ('&CPPL'(1,1) EQ '(').RCPPL\n         LA    R14,&CPPL          LOAD CPPL ADDRESS\n         ST    R14,16(R1)          AND STORE IT\n         AGO   .GO\n.DCPPL   MVC   16(4,R1),&RCPPRE.CPPL MOVE IN CPPL ADDRESS\n         AGO   .GO\n.RCPPL   ST    &CPPL(1),16(R1)    STORE ADDRESS OF CPPL\n.GO      LINK  EP=IKJEFF18\n         AIF   (NOT &GEN).EXIT\n         SPACE 1\n         RCPDS\n&C SETC 'FAIL&SYSNDX'\n&C       DS    6F             RESERVE SPACE FOR PARAM LIST\n         RCPDS\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00D\\x00\\x90 \\x8f\\x00\\x99\\x13?\\x14V\\x03%\\x03\\x06\\x03%\\xd7\\xf5\\xd1\\xd4\\xc7\\xf1@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1990-07-27T00:00:00", "modifydate": "1999-05-13T14:56:44", "lines": 805, "newlines": 774, "modlines": 805, "user": "P5JMG1"}, "text": "*\n         TITLE 'VTOC - MAIN MODULE'                                017G\n***********************************************************************\n*      MODIFICATIONS\n* NUMBER    DATE    PERSON     REASON\n*  001G    062378   GATES      FIX MACRO ERROR (NAME TOO LONG)\n*  002G    071978   GATES      CORRECT UCB LOOKUP CODE SO UCB ADDR OF\n*                               8XXX WILL NOT CAUSE NEG ADDR.\n*  003G    072278   GATES      CHANGE MSG MACROS TO VTCMSG TO AVOID\n*                               CONFLICT WITH AN EXISTING MSG MACRO.\n*  004S    101678   SAVIT      CHANGE TO ALLOW DISPLAY FOR UNMOUNTED\n*                               VOLUMES=>FULLY SPECIFIED VOLS ARE\n*                               MOUNTED BY DYNAMIC ALLOCATION.  CORRECT\n*                               INCORRECT TEST FOR END OF UCB.\n*  005G    030379   GATES      ADD TEST FOR PUBLIC AND STORAGE MOUNTED\n*                               VOLUMES SO A JCL FILE TO DELETE DATA\n*                               FROM THEM CAN BE GENERATED.\n*  006G    120580   GATES      ADD KEYWORDS FOR 3350, 3330, AND 3330V\n*                               VOLUMES SO A DEVICE TYPE SEARCH CAN\n*                               BE DONE.\n*  007G    042882   GATES      BYPASS ERRORS CAUSED BY VM DISKS.\n*  008G    100783   GATES      ADD KEYWORDS FOR 3380 VOLUMES SO A\n*                               DEVICE TYPE SEARCH CAN BE DONE.\n*  009G    100783   GATES      UPGRADE CODE TO WORK UNDER MVS/XA.\n*  010G    110883   GATES      UPGRADE CODE TO CALL MAP ROUTINE.\n*  011G    111783   GATES      UPGRADE CODE ALWAYS CALL MAP RTN\n*                               SO WE CAN REPORT GAPS AND OVERLAPS.\n*                               THE MAP WILL ONLY BE DISPLAYED IF\n*                               THE USER SAID MAP ON VTOC COMMAND.\n*  012G    112383   GATES      REDEFINE VTCPFUNC VALUES.\n*  013G    112883   GATES      FIX ERRORS WHEN SCANNING GENERIC WHICH\n*                               IS FOLLOWED BY SPECIFIC MSV DIDN'T\n*                               DYNAMICALLY MOUNT THE MSV.\n*  014G    050284   GATES      RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                              RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTOCPARS MACRO TO VTCPARS,\n*                               RENAME ENTER TO VTCENTER,\n*                              RENAME PDEDSNAM MACRO TO VTCPDEDS,\n*                              VTOC MORE TRANSPORTABLE.\n*  015G    051084   GATES      ADD UNIT TYPE FIELD.\n*  016G    051684   GATES      EXPAND WORK AREA FOR VTOCCHEK.\n*  017G    051784   GATES      FIX TITLE TO BE DESCRIPTIVE.\n*  018G    051784   GATES      CHANGE ABSOLUTE CODING TO USE TAGS TO\n*                               MAKE VTOC MORE TRANSPORTABLE.\n*  019G    010688   GATES      TAKE OUT PURGE OPTION. THIS OPTION CAN\n*                               BE DONE BY DIRECTING OUTPUT TO VTOCOUT\n*                               AND MODIFYING IT. THIS AFFECTS 005G\n*                               MOD.\n*  020G    041690   GATES      MAKE UNIT TYPE SEARCH ONLY WORK IF\n*                               THE COMPLETE VOLSER = UNITNAME, LIKE\n*                               3380 NOT 3380XA.\n*  021G    050890   GATES      MAKE COMMAND ONLY WORK FOR PEOPLE WITH\n*                               OPER AUTHORITY.\n*  022G    071494   GATES      UNDO 021G.\n*  023G    042098   GATES      REPLACE 3330 REFERENCE WITH 3390, WE\n*                               AREN'T GOING TO SUPPORT 3330 ANYMORE.\n*  024G    051399   GATES      ADD MISSING 3350 CONSTANT.\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES           *\n*                                                                     *\n* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER OR A BATCH JOB      *\n*              TO LIST THE CONTENTS OF VARIOUS VOLUMES, WITH A        *\n*              FAIR AMOUNT OF SELECTION.                              *\n*                                                                     *\n*                                                                     *\n* OPERATION -  ACCEPT FROM THE TSO USER OR BATCH JOB A COMMAND        *\n*              WITH THE FOLLOWING SYNTAX.  THEN CHECK THE COMMAND     *\n*              AND LOOP THROUGH, GETTING A DSCB, FORMATTING IT,       *\n*              PERFORMING THE DATA SET NAME AND LIMIT CHECKS, AND     *\n*              CALLING AN EXIT ROUTINE IF DESIRED, THEN PUT THE       *\n*              ENTRY IN THE CORRECT SORT SEQUENCE.                    *\n*              FINALLY CALL THE PRINT ROUTINE TO PRINT THE            *\n*              SPECIFIED ITEMS, HEADERS, AND BREAKS, OR JUST          *\n*              THE TOTALS.                                            *\n*                                                                     *\n*                                                                     *\n* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *\n*              POINTED TO BY REGISTER 1                               *\n*                                                                     *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES.                                      *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*              FIREMAN'S FUND INSURANCE  CPSD 2N                      *\n*              ONE LUCAS GREEN                                        *\n*              SAN RAFAEL, CA  94911                                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         MACRO\n&LABEL   VTOCEXCP  &FUNC\n         AIF   ('&FUNC' NE 'EQ').ECALL\nVTCEOPEN EQU   1             DEFINE FUNCTION CODES FOR VTOCEXCP\nVTCECLOS EQU   2\nVTCEREAD EQU   0\n         MEXIT\n.ECALL   ANOP                 CALL VTOCEXCP\n&LABEL   MVI   VTCEFUNC,VTCE&FUNC   SET THE FUNCTION CODE\n         VTCALL EXCP          GO GET A DSCB\n         MEND\n         MACRO\n&LABEL   VTOCMAP   &FUNC                                         010G\n         AIF   ('&FUNC' NE 'EQ').MCALL                           010G\nVTCMOPEN EQU   0              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMADD  EQU   1              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMCLOS EQU   2              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMSORT EQU   3              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\n         MEXIT\n.MCALL   ANOP                 CALL VTOCMAP                       010G\n&LABEL   MVI   VTCMFUNC,VTCM&FUNC   SET THE FUNCTION CODE        010G\n         VTCALL MAP           GO TO MAP ROUTINE.                 010G\n         MEND\n*\n*        MACRO FOR INITIALIZING SUBROUTINE WORK AREA ADDRESSES\n*\n         MACRO\n&LABEL   WORKADDR &RTN,&PARMADD                                    001G\n&LABEL   L     R1,=A(WORK&RTN-WORKAREA)  GET THE OFFSET ( OVER 4K )\n         LA    R1,0(R1,R13)   RELOCATE IT\n         ST    R1,&PARMADD    THEN STORE IT FOR THE ROUTINES       001G\n         MEND\n*\n         EJECT\nVTOCCMD  VTCENTER 12,(1,LENWORK,C)  DO THE HOUSEKEEPING            014G\n         LR    R2,R1          SAVE ADDR OF CPPL\n         SPACE\n         USING WORKAREA,WORKREG\n         EJECT\n         BAL   R14,PARSINIT   PERFORM THE PARSING\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   RETURN         BAD NEWS, GET OUT\n         VTCALL PRNT         INITIALIZE FOR PRINTING\n         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST\n         USING PDL,R9         RETURNED BY PARSE\n*\n*        CHECK THROUGH THE UCB'S TO SELECT THE VOLUMES TO PROCESS\n*\n*\n**  FIND A VOLUME SERIAL NUMBER\n*\n         LA    R3,VOLS        POINT TO THE PDL\nLOOP1    L     R5,0(R3)       GET THE ADDRESS OF THE TEXT\n         LH    R4,4(R3)       ALSO GET ITS LENGTH\n         LTR   R4,R4          FOR EXECUTES, GET THE LENGTH\n         BZ    PHASE2         NO MORE VOLUMES, CONTINUE TO NEXT PHASE\n         BCTR  R4,0           MAKE IT READY FOR THE EX INSTR\n         MVC   VOLSER,BLANKS   INITIALIZE FIELD\n         EX    R4,MOVVOL\n         MVI   FLAG,X'00'     CLEAR TYPE REQUEST FLAG.             013G\n*\n**  VOLUME FOUND - VERIFY AND CHECK FOR GLOBAL OR SPECIAL REQUESTS\n*\n         CH    R4,H5          IS THE ENTIRE NAME THERE?\n         BE    VOLSET         YES, IT'S A SPECIFIC VOLUME\n         MVI   FLAG,X'01'     IT'S A GENERIC REQUEST\n         CH    R4,H2          CHECK FOR THE ALL KEYWORD, FIRST LENGTH\n         BNE   DEVCHEK1       NOT A GLOBAL REQUEST                 006G\n         CLC   0(3,R5),CHARALL  IS THIS THE KEYWORD 'ALL'?\n         BNE   DEVCHEK1       NO, NOT A GLOBAL REQUEST             013G\n         MVI   FLAG,X'02'   GLOBAL REQUEST\n         B     VOLSET\n* CHANGE 023G BELOW\n*EVCHEK1 CH    R4,H3          CHECK FOR THE 3350 OR 3330, FIRST LEN006G\n*        BNE   DEVCHEK3       NOT A 3350 OR 3330 REQUEST           006G\nDEVCHEK1 CH    R4,H3          CHECK FOR THE 3350 OR 3390, FIRST LEN006G\n         BNE   DEVCHEK3       NOT A 3350 OR 3390 REQUEST           006G\n* CHANGE 023G BELOW\n*        CLC   0(4,R5),CHAR3350 IS THIS THE KEYWORD '3350'?    006G020G\n         CLC   0(6,R5),CHAR3350 IS THIS THE KEYWORD '3350'?    006G020G\n         BNE   DEVCHEK2       NO, NOT A 3350                       006G\n         MVI   FLAG,X'18'     INDICATE 3350 REQUEST                006G\n         B     VOLSET                                              006G\n*EVCHEK2 CLC   0(4,R5),CHAR3330 IS THIS THE KEYWORD '3330'?    006G020G\n* CHANGE 023G BELOW\n*EVCHEK2 CLC   0(6,R5),CHAR3330 IS THIS THE KEYWORD '3330'?    006G020G\n*        BNE   DEVCHEK3       NO, NOT A 3330                       006G\n*        MVI   FLAG,X'28'     INDICATE 3330 REQUEST                006G\nDEVCHEK2 CLC   0(6,R5),CHAR3390 IS THIS THE KEYWORD '3390'?        023G\n         BNE   DEVCHEK3       NO, NOT A 3390                       006G\n         MVI   FLAG,X'28'     INDICATE 3390 REQUEST                006G\n* CHANGE 023G ABOVE\n         B     VOLSET                                              006G\n*EVCHEK3 CLC   0(4,R5),CHAR3380 IS THIS THE KEYWORD '3380'?    008G020G\nDEVCHEK3 CLC   0(6,R5),CHAR3380 IS THIS THE KEYWORD '3380'?    008G020G\n         BNE   DEVCHEK4       NO, NOT A 3380                       008G\n         MVI   FLAG,X'48'     INDICATE 3380 REQUEST                008G\n         B     VOLSET                                              008G\nDEVCHEK4 CH    R4,H4          CHECK FOR THE 3350 OR 3330, FIRST LEN008G\n         BNE   VOLSET         NOT A 3330V                          006G\n*        CLC   0(5,R5),CHAR333V IS THIS THE KEYWORD '3330V'?   006G020G\n         CLC   0(6,R5),CHAR333V IS THIS THE KEYWORD '3330V'?   006G020G\n         BNE   VOLSET         NO, NOT A 3330V                      006G\n         MVI   FLAG,X'88'     INDICATE 3330V REQUEST               008G\n         B     VOLSET                                              006G\n*\n**  FIND THE A(UCB)\n*\n*VOLSET   XC    LASTADR,LASTADR CLEAR THE UCB COMPARE ADDRESS      009G\nVOLSET   L     R5,CVTPTR                GET A(CVT).           009G 018G\n         USING CVTMAP,R5                                           018G\n*        INITIALIZE FOR UCB SCAN WITH IOSVSUCB RTN\n         L     R6,=A(WORKUCB-WORKAREA)  GET OFFSET OVER 4K.        009G\n         LA    R6,0(R6,R13)             RELOCATE IT.               009G\n         USING WORKUCBD,R6              TELL ASSEMBLER.            009G\n         XC    WORKUCBA(100),WORKUCBA   CLEAR WORK AREA.           009G\n         MVI   WORKUCBT,UCB3DACC        SET DASD CLASS.            018G\n         LA    R1,WORKUCBA              GET A(UCB WORK AREA).      009G\n         ST    R1,WORKUCBP              SAVE A(UCB WORK AREA).     009G\n         LA    R1,WORKUCBT              GET A(CLASS OF DEVICES).   009G\n         ST    R1,WORKUCBP+4            SAVE A(CLASS OF DEVICES).  009G\n         LA    R1,LASTADR               GET A(CURRENT UCB).        009G\n         ST    R1,WORKUCBP+8            SAVE A(CURRENT UCB).       009G\n         OI    WORKUCBP+8,X'80'         SET LAST PARM INDICATION.  009G\n*      REINITIALIZE FOR UCB SCAN WITH IOSVSUCB RTN WHEN DOING NEXT UCB\nNEXTUCB  L     R6,=A(WORKUCB-WORKAREA)  GET OFFSET OVER 4K.        009G\n         LA    R6,0(R6,R13)             RELOCATE IT.               009G\n         LA    R1,WORKUCBP              GET A(UCB SCAN PARM LIST). 009G\n*        L     R5,40(R5)   A(UCB ADDRESSES)                        009G\n         DROP  R6                                                  009G\n         SR    R6,R6                                               002G\n*NEXTUCB  ICM   R6,3,0(R5)  A(A UCB)                          002G 009G\n*         LTR   R6,R6                   CHECK FOR VALID ENTRIES.   009G\n*         BZ    INCR1                   UCB HOLE                   009G\n*         C     R6,UCBEND  CK FOR END:CHANGED TO REFLECT 002G 004S 009G\n*         BE    NOTMNT   END OF UCB LIST - VOLUME NOT FOUND        009G\n*         SLL   R6,16   REMOVE HI-ORDER BITS                       009G\n*         SRL   R6,16                                              009G\n         L     R15,CVTUCBSC    GET A(IOSVSUCB).                009G018G\n         DROP  R5                                                  018G\n         BALR  R14,R15         GO TO SCAN SERVICE.                 009G\n         LTR   R15,R15         CHECK FOR END.                      009G\n         BNZ   NOTMNT          END OF UCB LIST VOL NOT FOUND.      009G\n         L     R6,LASTADR      GET A(CURRENT UCB) FROM SCAN.       009G\n         USING UCB,R6          TELL ASSEMBLER BASE OF UCB.         018G\n*        C     R6,LASTADR      UCB ADDRESSES MUST INCREASE.        009G\n*        BNH   NEXTUCB         OTHERWISE THEY REPEAT.              009G\n*        ST    R6,LASTADR      NEW ADDRESS.                        009G\n*        CLI   18(R6),X'20'    MUST BE DIRECT ACCESS               009G\n*        BNE   INCR1                                               009G\n         TM    FLAG,X'02'   CHECK FOR GLOBAL\n         BO    FNDGBL   IT IS\n         TM    FLAG,X'01'   CHECK FOR SPECIAL REQUESTS\n         BO    SPECUCB   IT IS\n         TM    FLAG,X'10'   CHECK FOR 3350 TYPE DASD               006G\n         BO    UCB3350   IT IS                                     006G\n* CHANGE 023G BELOW\n*        TM    FLAG,X'20'   CHECK FOR 3330 TYPE DASD               006G\n*        BO    UCB3330   IT IS                                     006G\n         TM    FLAG,X'20'   CHECK FOR 3390 TYPE DASD               006G\n         BO    UCB3390   IT IS                                     006G\n* CHANGE 023G ABOVE\n         TM    FLAG,X'40'   CHECK FOR 3380 TYPE DASD               008G\n         BO    UCB3380   IT IS                                     008G\n         TM    FLAG,X'80'   CHECK FOR 3330V TYPE DASD              008G\n         BO    UCB333V   IT IS                                     006G\n         CLC   VOLSER,UCBVOLI  COMPARE FULL VOLSER.                018G\n         BE    FNDUCB   FOUND IT\n         B     NEXTUCB                                             009G\nSPECUCB  EX    R4,CLCVOL   COMPARE FIRST X CHARACTERS ONLY\n         BE    CHKRDY\n         B     NEXTUCB        TRY NEXT UCB.                        009G\n*INCR1    LA    R5,2(R5)                                           009G\n*         B     NEXTUCB   TRY NEXT UCB                             009G\n*\n*        VARIOUS ERRORS, LET THE PERSON KNOW\n*\n*                             MODIFIED FOR DYNAMIC MOUNT.          004S\nNOTMNT   DS    0H                                                  004S\n         TM    FLAG,X'0B'     NEITHER GENERIC NOR GLOBAL:SPECIFIC  004S\n         BZ    VOLNOTUP       ALLOW ALLOC. EVEN IF VOL UNMOUNTED.  004S\n         TM    FLAG,X'04'     WAS A VOLUME  FOUND?\n         BO    NEXTVOL        YES, LOOK FOR THE NEXT SPEC\n         MVC   MSGTEXT2,MSGNOTMT  NO, GET THE ERROR MESSAGE\nSETVOL   MVC   MSGTEXT2+5(6),VOLSER ADD THE VOLUME SERIAL NUMBER\n         VTOCMSG MSGTEXT2     AND ISSUE THE MESSAGE\n         B     NEXTVOL       GO GET THE NEXT VOLUME FROM PARSE\nPENDING  MVC   MSGTEXT2,MSGPEND   SET UP THE MESSAGE\n*\n*        SEE IF THIS IS A GENERIC OR GLOBAL REQUEST\n*\n         TM    FLAG,X'03'    WAS IT ALL OR A PARTIAL VOLUME SERIAL?\n         BNZ   NEXTUCB       IN EITHER CASE, SKIP THE MESSAGE      009G\n*                            THEN FIND MORE VOLUMES\n*\n*        OUTPUT THE OFFLINE PENDING MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\nOFFLINE  MVC   MSGTEXT2,MSGOFFLN SET UP THE MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\n*                                                                  004S\n***** SPECIFIC VOLUME REQUEST AND VOLUME NOT MOUNTED.              004S\n*                                                                  004S\nVOLNOTUP DS    0H                                                  004S\n         MVC   VOLID,VOLSER   COPY VOLSER THAT UCB SEARCH USED.    004S\n         MVC   UNITYP,=C'3330V ' ASSUME IT IS A 3330V TYPE VOL.    015G\n         XC    ADDR,ADDR      UNIT ADDRESS=0: NOT MOUNTED.         004S\n         OI    FLAG,X'04'     INDICATE VOLUME FOUND.               004S\n         B     OPENMAP        ALLOCATE AND READ VTOC.         004S 010G\nUCB3350  CLI   UCBUNTYP,X'0B' 3350 TYPE?                      006G 018G\n         BNE   NEXTUCB        NOPE                            006G 009G\n         B     TESTONRD       GO TEST ONLINE AND READY             006G\nUCB3380  CLI   UCBUNTYP,X'0E' 3380 TYPE?                      008G 018G\n         BNE   NEXTUCB        NOPE                            008G 009G\n         B     TESTONRD       GO TEST ONLINE AND READY             008G\n* CHANGE 023G BELOW\n*CB3330  CLI   UCBUNTYP,X'0D' 3330-11 TYPE?                   006G 018G\n*        BE    TESTONRD       YES, GO SEE NOT 3330V                006G\n*        CLI   UCBUNTYP,X'09' 3330-1 OR 3330V TYPE?                006G\n*        BNE   NEXTUCB        NOPE                            006G 009G\n*ESTNOTV TM    UCBTBYT2,UCBRVDEV DONT WANT VIRT DASD(3330V).  006G 018G\n*        BO    NEXTUCB        IF FOUND SKIP IT                006G 009G\n*        B     TESTONRD       ELSE SEE IF ONLINE READY             006G\nUCB3390  CLI   UCBUNTYP,X'0F' 3390 TYPE?                      006G 018G\n         BNE   NEXTUCB        NOPE                            008G 009G\n         B     TESTONRD       GO TEST ONLINE AND READY             008G\n* CHANGE 023G ABOVE\nUCB333V  CLI   UCBUNTYP,X'09' 3330 TYPE?                      006G 018G\n         BNE   NEXTUCB        NOPE                            006G 009G\n         TM    UCBTBYT2,UCBRVDEV TEST IF VIRTUAL DASD(3330V)  006G 018G\n         BNO   NEXTUCB        NO, SKIP IT FOR 3330V           006G 009G\nTESTONRD EQU   *                                                   006G\n*\n**  FOR GLOBAL REQUESTS JUST LIST ONLINE PACKS\n*\nFNDGBL   TM    UCBSTAT,UCBONLI  CHECK IS IT ONLINE?                018G\n         BZ    NEXTUCB           NOPE.                             009G\n*\n**  FOR GLOBAL AND SPECIAL REQUESTS, CHECK FOR DEVICE READY\n*\nCHKRDY   TM    UCBFLA,UCBNRY     IS IT READY?                      018G\n         BO    NEXTUCB           NO.                               009G\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,UCBVOLI     MOVE VOLID.                       018G\n         MVC   ADDR,UCBNAME      MOVE UNIT ADDRESS.                018G\n         OI    FLAG,X'04'      NOTE THE VOLUME AS FOUND\n* CHANGE 023G BELOW\n         CLI   UCBUNTYP,X'0F' IS IT 3390 DEVICE?\n         BNE   NOT3390          NO.\n         MVC   UNITYP,=C'3390  ' YES.\n         B     CKOFF            CONTINUE.\n*        CLI   UCBUNTYP,X'01' IS IT 2311 DEVICE?              015G 018G\nNOT3390  CLI   UCBUNTYP,X'01' IS IT 2311 DEVICE?              015G 018G\n* CHANGE 023G ABOVE\n         BNE   NOT2311          NO.                                015G\n         MVC   UNITYP,=C'2311  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2311  CLI   UCBUNTYP,X'02' IS IT 2301 DEVICE?              015G 018G\n         BNE   NOT2301          NO.                                015G\n         MVC   UNITYP,=C'2301  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2301  CLI   UCBUNTYP,X'03' IS IT 2303 DEVICE?              015G 018G\n         BNE   NOT2303          NO.                                015G\n         MVC   UNITYP,=C'2303  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2303  CLI   UCBUNTYP,X'04' IS IT 2302 DEVICE?              015G 018G\n         BNE   NOT2302          NO.                                015G\n         MVC   UNITYP,=C'2302  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2302  CLI   UCBUNTYP,X'05' IS IT 2321 DEVICE?              015G 018G\n         BNE   NOT2321          NO.                                015G\n         MVC   UNITYP,=C'2321  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2321  CLI   UCBUNTYP,X'06' IS IT 2305-1 DEVICE?            015G 018G\n         BNE   NOT23051          NO.                               015G\n         MVC   UNITYP,=C'2305-1' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT23051 CLI   UCBUNTYP,X'07' IS IT 2305-2 DEVICE?            015G 018G\n         BNE   NOT23052         NO.                                015G\n         MVC   UNITYP,=C'2305-2' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT23052 CLI   UCBUNTYP,X'08' IS IT 2314 DEVICE?              015G 018G\n         BNE   NOT2314          NO.                                015G\n         MVC   UNITYP,=C'2314  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2314  CLI   UCBUNTYP,X'09' IS IT 3330 DEVICE?              015G 018G\n         BNE   NOT3330          NO.                                015G\n         MVC   UNITYP,=C'3330  ' YES.                              015G\n         TM    UCBTBYT2,UCBRVDEV IS IT 3330V DEVICE?               015G\n         BNO   CKOFF            NO, ONLY 3330, CONTINUE.           015G\n         MVI   UNITYP+4,C'V'    YES, INDICATE 3330V.               015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3330  CLI   UCBUNTYP,X'0A' IS IT 3340 DEVICE?              015G 018G\n         BNE   NOT3340          NO.                                015G\n         MVC   UNITYP,=C'3340  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3340  CLI   UCBUNTYP,X'0B' IS IT 3350 DEVICE?              015G 018G\n         BNE   NOT3350          NO.                                015G\n         MVC   UNITYP,=C'3350  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3350  CLI   UCBUNTYP,X'0C' IS IT 3375 DEVICE?              015G 018G\n         BNE   NOT3375          NO.                                015G\n         MVC   UNITYP,=C'3375  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3375  CLI   UCBUNTYP,X'0D' IS IT 3330-11 DEVICE?           015G 018G\n         BNE   NOT3331          NO.                                015G\n         MVC   UNITYP,=C'3330-1' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3331  CLI   UCBUNTYP,X'0E' IS IT 3380 DEVICE?              015G 018G\n         BNE   NOT3380          NO.                                015G\n         MVC   UNITYP,=C'3380  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3380  MVC   UNITYP,=C'UNKNWN' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\nCKOFF    TM    UCBSTAT,UCBCHGS   IS IT PENDING STATUS?        015G 018G\n         BO    PENDING           YES.\n         TM    UCBSTAT,UCBONLI   IS IT ONLINE?                     018G\n         BZ    OFFLINE           NO.\n*        MVI   VOLPORS,0     PRESET NOT PUB OR STOR FOR PURGE. 005G019G\n*        TM    UCBSTAB,UCBBPUB+UCBBSTR  PUB AND STOR BITS  005G018G019G\n*        BNO   OPENMAP       INDICATE JCL FOR PURGE NOT REQ005G010G019G\n*        MVI   VOLPORS,1     JCL FOR PURGE CAN BE GENERATED.   005G019G\n*\n*\n*        WE WILL NOW READ VTOC AND PROCESS VOLUME\n*\n*\n*\n*        GO GET MEMORY TO MAP VOLUME\n*\nOPENMAP  DS    0H             SPECIFIC VOLUME REQUESTS.        004S010G\n         VTOCMAP  OPEN        OPEN THE VTOC MAP.                   010G\n*\n*        NOW GET DSCB'S FROM THE VOLUME\n*\n*\n*        SET UP THE PARM LIST FOR VTOCEXCP\n*\n*                         ARRIVE HERE BY BRANCH FOR UNMOUNTED  004S010G\nOPENVTOC VTOCEXCP OPEN        OPEN THE VTOC.                       010G\n         LTR   R15,R15        DID IT OPEN OK?\n         BNE   ENDVTOC        NO, JUST EXIT                        007G\n         LA    R15,FMT4-8     GET A(VTOC DSCB)-8 TO FOOL MAP.      011G\n         ST    R15,DSCBADDR   SAVE ADDR SO WE CAN MAP.             011G\n         VTOCMAP ADD         ADD VTOC EXTENT TO MAP.               011G\n         LTR   R15,R15        DID IT ADD OK?                       011G\n         BNE   ENDVTOC        NO, JUST EXIT                        011G\nREADDSCB CLI   TABFULL,0     CHECK FOR FULL TABLES\n         BNE   ENDVTOC       IF FULL, TRY END OF VTOC TO CLEAR\n         VTOCEXCP READ        GET A DSCB\n         CH    R15,H4         CHECK THE RETURN CODE\n         BE    ENDVTOC        END OF VTOC\n         BH    RETURN         BAD ERROR, VTOCEXCP GAVE THE MESSAGE\n*\n*        CHECK THE DATA SET QUALIFICATIONS, LIMIT, AND, OR\n*\n         VTCALL CHEK          CALL THE CHECK ROUTINE\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER\n*                             YES, CONTINUE PROCESSING\n*\n*        GATHER THE DATA TO MAP THE VOLUME AND SHOW IF REQUESTED\n*\n         CLI   MAPK+1,2       HAS USER REQUESTED TO SEE MAP?       011G\n         BE    MAPADD         NO, CONTINUE                         011G\n         MVI   SORTK+1,1      YES, INDICATE SORT(VOLUME)           010G\n         MVI   SUBSORT+1,2         INDICATE SORT(VOLUME)           010G\nMAPADD   VTOCMAP ADD          CALL THE MAP ROUTINE TO ADD ENTRY.   011G\n*                             FORMAT 4, 5, AND 6 DSCB HAVE THEIR   010G\n*                              EXTENT INFO ADDED, NO OTHER PROCESS.010G\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?    010G\n         BNZ   READDSCB       NO, GET ANOTHER.                     010G\n*\n*        FORMAT THE DSCB INFORMATION\n*\nFMTDSCB  L     R15,DSCBADDR   GET A(CURRENT DSCB).                 010G\n         LA    R15,8(R15)     BUMP PAST HEADER.                    010G\n         USING FMT1DSEC,R15   TELL ASSEMBLER                       010G\n         CLI   DS1FMTID,C'1'  IS IT A FMT 1 DSCB?                  010G\n         BNE   READDSCB       NO, SKIP IT.                         010G\n         DROP  R15                                                 010G\n         TM    VTCFMTCK,VTCFMTCD WAS FORMAT CALLED BY CHECK?\n         BO    CALLEXIT       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          CALL THE FORMATTING ROUTINE\n         LTR   R15,R15        DID IT FUNCTION?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        CALL THE EXIT ROUTINE IF ONE WAS SPECIFIED\n*\nCALLEXIT VTCALL EXIT,TEST     CALL THE EXIT ROUTINE\n         LTR   R15,R15        SHOULD THE DATA SET BE PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        SORT THE ENTRIES INTO THE NEW LIST\n*\n         VTCALL SORT          CALL THE SORT ROUTINE\n         B     READDSCB       GET ANOTHER DSCB\n*\n*        END OF THE VOLUME, CHECK FOR MORE\n*\nENDVTOC  VTOCEXCP CLOS       FIRST CLOSE THE VTOC\n*\n*        IF THE SORT IS BY VOLUME, CALL PRINT NOW\n*\n         CLI   SUBSORT+1,2    IS THIS A VOLUME SORT\n         BNE   ENDVOL         NO, CONTINUE\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n*\n*        THIS VOLUME DONE, FREEMAIN THE MAP MEMORY\n*\nENDVOL   VTOCMAP SORT         CALL THE MAP ROUTINE TO SORT MAP.    011G\n         OI    VTCPFUNC,X'01' TELL PRINT RTN TO PRINT MAP INFO.011G012G\n         VTCALL PRNT          CALL THE PRINT RTN.                  011G\n         NI    VTCPFUNC,X'FE' TELL PRINT RTN TO PRINT DSN INFO.011G012G\n         VTOCMAP CLOS         CALL THE MAP ROUTINE TO CLOSE.  010G 011G\n         TM    FLAG,X'0B'         IS THIS A GENERIC VOLUME SEARCH  011G\n         BNZ   NEXTUCB            YES, SEARCH FOR MORE             009G\nNEXTVOL  ICM   R3,B'0111',25(R3)  GET THE NEXT VOLUME FROM THE PDL\n         BP    LOOP1              THERE IS ANOTHER, GET IT\n*\n*        PRINT THE SELECTED ITEMS FOR THE SELECTED DATA SETS\n*\nPHASE2   DS    0H\n         CLI   SUBSORT+1,2    IS THIS A VOLUME SORT\n         BE    EXIT0          YES, PRINT HAS BEEN CALLED\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         EJECT\n*\n*        PROCESSING IS COMPLETE, EXIT\n*\nEXIT0    SR    R15,R15\n         SPACE 3\nRETURN   LTR   R2,R15         NORMAL EXIT?\n         BZ    RETURN1        YES, LEAVE EVERY THING ALONE\n         SPACE 2\n         LA    R1,PARMLIST    AREA FOR STACK PARM LIST\n         USING IOPL,R1        AN ERROR WAS FOUND, FLUSH THE STACK\n         SPACE\n         MVC   IOPLUPT,ADDRUPT\n         MVC   IOPLECT,ADDRECT\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,IOPLECB\n         SPACE 2\n         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))\n         SPACE 3\n         TCLEARQ INPUT        CLEAR INPUT BUFFERS\n         SPACE 3\nRETURN1  DS    0H\n         BAL   R14,FREEPDL    FREE THE PARSE STROAGE\n         OI    VTCPFUNC,X'08' TELL PRINT TO CLEAN UP HIS ACT CLOSE\n*                               DATA SETS AND FREE MAIN STORAGE.   012G\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         SPACE\n         LR    R15,R2          GET THE RETURN CODE AGAIN\n         VTCLEAVE EQ                                               014G\nWORKREG  EQU   13\n*\n*        PARSE INITIALIZATION\n*\n         SPACE 3\nPARSINIT DS    0H\n         ST    R2,CPPLADDR    AND THE CPPL ADDRESS\n         USING CPPL,R2        BASE FOR COMMAND PARM LIST\n         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE\n         MVC   ADDRPSCB,CPPLPSCB ADDR OF PROTECTED STEP CONTROL BLK\n         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE\n         MVC   ADDRCBUF,CPPLCBUF\n         DROP  R2\n         SPACE 3\n*\n*        PUT THE WORK AREA ADDRESSES INTO THE PARM LISTS\n*\n         WORKADDR MSG,VTCWMSG     WORK AREA FOR VTOCMSG\n         WORKADDR EXCP,VTCWEXCP   WORK AREA FOR VTOCEXCP\n         WORKADDR CHEK,VTCWCHEK   WORK AREA FOR VTOCCHEK\n         WORKADDR FORM,VTCWFORM   WORK AREA FOR VTOCFORM\n         WORKADDR EXIT,VTCWEXIT   WORK AREA FOR VTOCEXIT\n         WORKADDR SORT,VTCWSORT   WORK AREA FOR VTOCSORT\n         WORKADDR PRNT,VTCWPRNT   WORK AREA FOR VTOCPRNT\n         WORKADDR MAP,VTCWMAP     WORK AREA FOR VTOCMAP           010G\n         SPACE 3\n*        SET UP THE ADDRESSES FOR CALLING\n*\n         MVC   VADMSG(RTNADLEN),RTNADDRS  MOVE IN THE ADDRESSES\n*\n*\n*\n*        BUILD PARSE PARAMETER LIST AND INVOKE\n*        IKJPARS TO ANALYZE COMMAND OPERANDS\n*\n         SPACE 3\nGOPARSE  DS    0H\n         ST    R14,R14PARSE   SAVE THE RETURN ADDRESS\n         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS\n         USING PPL,R1         BASE FOR PARSE PARAMETER LIST\n         SPACE 2\n         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS\n         MVC   PPLECT,ADDRECT AND ECT ADDRESS\n         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR\n         SPACE\n         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS\n         SPACE\n         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS\n         MVI   ATTNECB,0      CLEAR ECB\n         ST    R0,PPLECB      PASS TO PARSE\n         SPACE\n         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE\n         ST    R0,PPLANS      RETURNS PDL ADDRESS\n         SPACE\n         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS\n         SPACE 3\n         CALLTSSR EP=IKJPARS  INVOKE PARSE\n         DROP  R1\n         SPACE 2\n         LA    R14,MAXPARSE   RETURN CODE LIMIT\n         SPACE\n         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS\n         BH    PARSEBAD       NO, ERROR\n         SPACE\n         B     *+4(R15)       PROCESS RETURN CODE\n         SPACE\nPARSERET B     PARSEOK         0- SUCESSFUL\n         B     PARSEERR        4- PARSE UNABLE TO PROMPT\n         B     PARSEERR        8- USER ENTERED ATTENTION\n         B     PARSEBAD       12- INVALID PARAMETERS\n         B     PARSEBAD       16- PARSE INTERNAL FAILURE\n         B     PARSEERR       20 - VALIDITY CHECK ERROR\nMAXPARSE EQU   *-PARSERET\n         SPACE 5\nPARSEBAD DS    0H\n         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE\n         LA    R1,MSGTEXT2+4+L'MSGPARSE\n         SPACE\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R1),DOUBLE\n         SPACE\n         LA    R0,MSGTEXT2-2\n         SR    R1,R0\n         SLL   R1,16\n         ST    R1,MSGTEXT2\n         SPACE 2\n         VTOCMSG MSGCMDER,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG\n         SPACE 3\nPARSEERR LA    R15,12         ERROR CODE 12 - COMMAND FAILED\n         B     PARSERTN       RETURN FROM PARSE\n         SPACE\nPARSEOK  SR    R15,R15        CLEAR THE RETURN CODE\n*  CHANGE 022G BELOW\n*                                                                  021G\n*        CHECK TO SEE IF USER AUTHORIZED (OPER AUTHORITY)          021G\n*                                                                  021G\n*        L     R14,ADDRPSCB       GET A(PSCB).                     021G\n*        USING PSCB,R14           ESTABLISH ADDRESSABILITY.        021G\n*        TM    PSCBATR1,PSCBCTRL  SEE IF OPER AUTHORITY.           021G\n*        DROP  R14                DROP ADDRESSABILITY.             021G\n*        BO    PARSERTN           YES, CONTINUE.                   021G\n*        SPACE 1                                                   021G\n*        LA    R15,12             NO, ERROR CODE 12 COMMAND FAILED 021G\n*  CHANGE 022G ABOVE\nPARSERTN L     R14,R14PARSE   GET THE RETURN LOCATION\n         BR    R14            AND GET OUT OF HERE\n         SPACE\n         EJECT\n*\n*        PARSE CLEANUP ROUTINE\n*\n         SPACE 3\nFREEPDL  DS    0H\n         SPACE\n         ST    R14,R14SAVE\n         SPACE\n         IKJRLSA ADDRANSR     RELEASE THE STORAGE\n         SPACE 2\n         XC    ADDRANSR,ADDRANSR\n         SPACE\n         L     R14,R14SAVE\n         BR    R14\n         EJECT\n*\n*\n*        CONSTANTS\n*\n*\nRTNADDRS DC    V(VTOCMSG)\n         DC    A(0)           DUMMY ENTRY FOR THE EXIT ROUTINE\n         DC    V(VTOCEXCP)\n         DC    V(VTOCCHEK)\n         DC    V(VTOCFORM)\n         DC    V(VTOCPRNT)\n         DC    V(VTOCSORT)\n         DC    V(VTOCMAP)                                          010G\nRTNADLEN EQU   *-RTNADDRS\nADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST\n*UCBEND   DC    X'0000FFFF'    END OF UCB LIST (HALFWORD -1)  004S 009G\nBLANKS   DC    CL8' '         BALNKS\nH2       DC    H'2'\nH3       DC    H'3'\nH4       DC    H'4'\nH5       DC    H'5'\n*\n*\n*\n*\n*\nCHARALL  DC    CL3'ALL'\n*HAR3380 DC    CL4'3380'                                       008G020G\n*HAR3350 DC    CL4'3350'                                       006G020G\n*HAR3330 DC    CL4'3330'                                       006G020G\n*HAR333V DC    CL5'3330V'                                      006G020G\nCHAR3350 DC    CL6'3350'                                   008G020G024G\nCHAR3380 DC    CL6'3380'                                       008G020G\nCHAR3390 DC    CL6'3390'                                           023G\nCHAR3330 DC    CL6'3330'                                       006G020G\nCHAR333V DC    CL6'3330V'                                      006G020G\nMOVVOL   MVC   VOLSER(0),0(R5)\nCLCVOL   CLC   VOLSER(0),UCBVOLI                                   018G\n         DROP  R6                                                  018G\n         EJECT\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         SPACE\nMSGPARSE VTCMSG 'PARSE ERROR CODE '                                003G\nMSGCMDER VTCMSG ' COMMAND SYSTEM ERROR'                            003G\nMSGNOTMT VTCMSG ' VVVVVV VOLUME IS NOT MOUNTED'                    003G\nMSGOFFLN VTCMSG ' VVVVVV VOLUME IS OFFLINE'                        003G\nMSGPEND  VTCMSG ' VVVVVV VOLUME IS PENDING OFFLINE'                003G\n*\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         SPACE 3\n         COPY  VTCPARS                                             014G\n         EJECT\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nWORKAREA DSECT\nMAINSAVE DS    18A\n         SPACE\n         VTOCEXCP EQ          DEFINE VTOCEXCP CODES\n         VTOCMAP  EQ          DEFINE VTOCMAP  CODES\n         SPACE\nPARSELST DS    8A             AREA FOR PARSE PARAMETER LIST\n         SPACE\nR14SAVE  DS    A\nR14PARSE DS    A\n*\n*        VTOC COMMAND COMMON AREA\n*\n         VTCCOM  NODSECT                                           014G\n         SPACE 3\n*\n*        WORK AREAS FOR SUBROUTINES\n*\nWORKMSG  DS    XL256\nWORKEXCP DS    4XL256\nWORKCHEK DS    2XL256                                              016G\nWORKFORM DS    2XL256\nWORKEXIT DS    8XL256\nWORKSORT DS    XL256\nWORKPRNT DS    10XL256\nWORKMAP  DS    XL256                                              010G\n         DS    0D                                                 009G\nWORKUCB  DS    30F        WORK AREA FOR UCB SCAN RTN IOSVSUCB     009G\n         DS    0D\nLENWORK  EQU   *-WORKAREA\n         SPACE 3\n         VTCPDEDS                                                  014G\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         IKJECT\n         SPACE 3\n         IKJCPPL\n         SPACE 3\n         IKJUPT\n         SPACE 3\n*        PRINT NOGEN\n         CVT   DSECT=YES\nUCB      DSECT                                                    018G\n         IEFUCBOB                                                 018G\nWORKUCBD DSECT                                                    009G\n         DS    0D                                                 009G\nWORKUCBA DS    XL100      WORK AREA FOR UCB SCAN RTN IOSVSUCB     009G\nWORKUCBC DS    F          A(CURRENT UCB) FROM SCAN RTN IOSVSUCB   009G\nWORKUCBP DS    3F         PARM LIST FOR UCB SCAN RTN IOSVSUCB     009G\nWORKUCBT DS    X          DEVICE CLASS X20 FOR SCAN RTN IOSVSUCB  009G\nFMT1DSEC DSECT                                                    010G\n         IECSDSL1 (1)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCCHEK": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x88\\x10O\\x00\\x88\\x10O\\x13\\x17\\x04\\xe7\\x04\\xaf\\x00:\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-04-13T00:00:00", "modifydate": "1988-04-13T13:17:00", "lines": 1255, "newlines": 1199, "modlines": 58, "user": "ZTSOMG"}, "text": "         TITLE 'VTOC COMMAND CHECK  ROUTINE'\n***********************************************************************\n*         MODIFICATIONS\n* NUMBER    DATE    PERSON    REASON\n*  001G    072278   GATES     CHANGE MSG MACROS TO VTCMSG TO AVOID\n*                              CONFLICT WITH AN EXISTING MSG MACRO.\n*  002S    110978   SAVIT     CHANGE COMPARISON ROUTINE FOR DATE OF\n*                              LAST USE (MVS RELEASE 3.7 SU60).\n*  003G    110182   GATES     CLEAR REG 5 SO HI ORDER IS ZEROED TO\n*                              CORRECT LEV PARAMETER CHECK ALSO\n*                              END AND CONTAINING CHECK.\n*  004G    110383   GATES     FIX BUG WHERE THE PROGRAM USED TO\n*                              ASSUME THAT THE FORMAT 1 DSCB POINTED\n*                              TO A FORMAT 3 DSCB. ISAM MULTI EXTENT\n*                              DATASETS HAVE A FORMAT 1 DSCB POINTING\n*                              TO A FORMAT 2 DSCB WHICH IN TURN POINTS\n*                              TO A FORMAT 3 DSCB. WE NOW HANDLE ISAM\n*                              SPACE STATS ACCURATELY.\n*  005G    111683   GATES     ADD LOGIC TO GET EXTENT INFO ON DSCB\n*                              TYPES 4, 5, AND 6.\n*  006G    111883   GATES     ADD LOGIC KEEP FMT 4 DSCB FROM BEING\n*                              PROCESED BY REST OF VTOC COMMAND. IT\n*                              WAS ALREADY PROCESSED AT VTOC OPEN BY\n*                              THE VTOC CSECT.\n*  007G    111883   GATES     PUT VOLSER IN ERROR MESSAGES.\n*  008G    112183   GATES     ADD LOGIC TO HANDLE NOTLEV, NOTCON, AND\n*                              NOTEND KEYWORDS.\n*  009G    050284   GATES     RENAME VTFMT MACRO TO VTCFMT,\n*                              RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                              RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTOCPARS MACRO TO VTCPARS,\n*                              RENAME PDEDSNAM MACRO TO VTCPDEDS,\n*                               RENAME ENTER TO VTCENTER,\n*                              VTOC MORE TRANSPORTABLE.\n*  010G    051084   GATES     EMBED VTOCMAP MACRO TO MAKE\n*                              VTOC MORE TRANSPORTABLE.\n*  011G    051084   GATES     GET RID OF UNNEEDED LOGIC.\n*  012G    051084   GATES     CHANGE CONSTANT FOR END OF TITLE TABLE.\n*  013G    051584   GATES     ADD LOGIC FOR AND4/OR4 AND AND5/OR5.\n*  014G    051584   GATES     ALLOW OPER OF = > < \u00ac= \u00ac< \u00ac> >= <=.\n*  015G    051684   GATES     COMBINE LSTUS AND CDATE/EXPDT LOGIC.\n*  016G    051684   GATES     ADD LOGIC FOR DSNAME LIMIT CHECKING.\n*  017G    051684   GATES     UPGRADE LOGIC TO WORK WITH DATASETS WHICH\n*                              CONTAIN MORE THAN 16 EXTENTS. WHAT I DO\n*                              IS SAVE ALL THE FMT3 DSCBS FOR A DATASET\n*                              IN VTOCOM.\n*  018G    052184   GATES     MOVE CODE TO SPEED PROCESSING UP.\n*  019G    111685   GATES     CHANGE LEVEL AND NLEVEL KEYWORDS TO BE\n*                              THE HIGH LEVEL INDEX INSTEAD OF THE\n*                              BEGINNING CHARACTERS ONLY.\n*  020G    111685   GATES     ADD BEGINNING AND NBEGINNING KEYWORDS\n*                              TO BE THE START CHARACTERS OF THE HIGH\n*                              LEVEL INDEX INSTEAD OF THE WHOLE HIGH\n*                              LEVEL INDEX.  THIS USED TO BE THE\n*                              LEVEL AND NLEVEL KEYWORDS.\n*  021G    122387   GATES     ADD LOGIC TO ALLOW * IN LIMIT/AND/OR\n*                              TO MEAN CURRENT DATE WHEN CHECKING DATE\n*                              FIELDS.\n*  022G    122387   GATES     ADD ANOTHER BASE REG (R10).\n*  023G    010488   GATES     ADD LOGIC FOR KEY LENGTH.\n*  024G    010488   GATES     CHANGE CONSTANT FOR END OF TITLE TABLE.\n*  025G    041388   GATES     ADD LOGIC FOR LOWLEVEL/NOTLOWLEVEL\n*                             KEYWORD.\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND CHECK  ROUTINE                            *\n*                                                                     *\n* FUNCTION -   CHECK THE CONDITIONS SPECIFIED ON THE VTOC COMMAND.    *\n*              SEE IF THE DATA SET PASSED SHOULD BE PROCESSED.        *\n*              THE LIMIT, ENDING, CONTAINING, CCHH, LIMIT, AND,       *\n*              AND OR KEYWORDS ARE PROCESSED BY THIS ROUTINE.         *\n*                                                                     *\n* OPERATION -  FIRST GET THE LENGTH OF THE DSNAME AND SAVE IT.        *\n*              THEN GET THE FORMAT 3 DSCB, IF ONE EXISTS.  TRY        *\n*              EACH KEYWORD TO SEE IF IT WILL EXCLUDE THE DATA        *\n*              SET FROM FURTHER PROCESSING.                           *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, FORMAT 1, 3, AND 4 DSCB'S              *\n*              FOR DSORG, RECFM, ALLOC, USED, PROT, CATLG, OR SECAL   *\n*              CALL VTOCFORM TO FORMAT THE PARMS.  USE FORMATTED DSCB *\n*                                                                     *\n* OUTPUT -     A RETURN CODE OF 0 TO CONTINUE PROCESSING OR 8 TO      *\n*              EXCLUDE THIS DATA SET.                                 *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n*        MACROS FOR CHECK ROUTINE\n*\n         MACRO\n&LABEL   VTCHL &KEY              CALL THE KEYWORD CHECK ROUTINE\n&LABEL   L     R1,SUB&KEY.OPER   GET THE OPERATOR VALUE\n         BAL   R8,GETOPER        TRANSLATE TO A NUMBER\n         ST    R15,REFOPER       SAVE IT TOO\n         LA    R1,SUB&KEY.VALU   GET THE VALUE PDL\n         ST    R1,REFVAL         SAVE THAT ADDRESS THREE\n         CLI   FLAGNM&KEY,0      HAS IT BEEN CONVERTED?\n         BNE   VTP&SYSNDX        YES, SKIP ALONG\n         MVI   FLAGNM&KEY,1      NOTE IT AS CONVERTED\n         BAL   R8,PDLNUM         GO CONVERT IT\n         ST    R15,NUMBER&KEY    SAVE THE VALUE\n.*                                IT WILL BE ZERO FOR NONNUMERIC.\n         LA    R4,SUB&KEY.KEY    POINT TO THE IKJIDENT FOR THE KEYWORD\n         BAL   R8,GETKEY         CONVERT TEXT TO A NUMERIC KEY\n         STC   R15,NUMKEY&KEY    SAVE THAT NUMERIC KEY\n         LTR   R15,R15           WAS IT SUCCESSFUL?\n         BNZ   VTP&SYSNDX        YES, SKIP ALONG\n*        ISSUE A MESSAGE - A BAD LIM, AND, OR KEYWORD\n         MVC   MSGTEXT2,KEYERR   START THE ERROR MESSAGE\n         L     R1,0(R4)          POINT TO THE TEXT\n         MVC   MSGTEXT2+49(6),0(R1)  THEN ADD IT TO THE MESSAGE\n         VTOCMSG MSGTEXT2        ISSUE THE ERROR MESSAGE\nVTP&SYSNDX DS  0H\n         SR    R1,R1             CLEAR A REGISTER\n         ICM   R1,1,NUMKEY&KEY   GET THE KEYWORD VALUE\n         BZ    VTE&SYSNDX        IF NOT SET, SKIP THE EVALUATION\n         ST    R1,REFKEY         SAVE THE ADDRESS\n         LA    R1,NUMBER&KEY     GET THE ADDRESS OF CONVERTED NUMBER\n         ST    R1,REFNUM         SAVE IT'S ADDRESS\n         BAL   R8,LIMEVAL        GO EVALUATE THE EXPRESSION\nVTE&SYSNDX DS  0H\n         MEND\n         SPACE 3\n         MACRO\n&LABEL   VTANDOR &NUM         EVALUATE, THEN DO AND OR OR FUNCTION\n&LABEL   CLI   ANDOR&NUM.K+1,0  WAS THIS KEYWORD SET?\n         BE    LIMCOMP        NO, JUST CHECK THE FINAL RESULT\n         VTCHL &NUM           YES, EVALUATE\n         CLI   ANDOR&NUM.K+1,1  WAS IT AN AND ?\n         BE    VTA&SYSNDX     YES, DO THE AND\n         O     R15,LIMVAL     NO, OR IT\n         B     VTE&SYSNDX     FINISHED WITH THIS EXPRESSION\nVTA&SYSNDX N   R15,LIMVAL     AND THE EXPRESSION VALUE\nVTE&SYSNDX ST  R15,LIMVAL     SAVE THE VALUE\n         MEND\n         MACRO\n&LABEL   VTOCMAP   &FUNC                                         010G\n         AIF   ('&FUNC' NE 'EQ').MCALL                           010G\nVTCMOPEN EQU   0              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMADD  EQU   1              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMCLOS EQU   2              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMSORT EQU   3              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\n         MEXIT\n.MCALL   ANOP                 CALL VTOCMAP                       010G\n&LABEL   MVI   VTCMFUNC,VTCM&FUNC   SET THE FUNCTION CODE        010G\n         VTCALL MAP           GO TO MAP ROUTINE.                 010G\n         MEND\n*\n         EJECT\nVTOCCHEK VTCENTER (R12,R10),12   DO THE HOUSEKEEPING         009G022G\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING CHEKWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n*\n*        SEE WHAT THE FORMAT ID IS\n*\nCHEKFMT  L     R7,DSCBADDR    POINT TO THE DSCB\n         LA    R7,8(R7)       GET PAST THE HEADER\n         USING FMT1DSEC,R7    SET ADDRESSABILITY                   005G\n*        CLI   FORMATK+1,0    DID HE SPECIFY VARIOUS DSCB'S        011G\n*        BNE   CHEKFMTI       YES, GO DO HIS CHECKS                011G\n*HEKFMTI DS    0H             NOT YET PROGRAMMED                   011G\n*\n*        STANDARD IS ONLY TO ALLOW FORMAT ONES TO GO\n*\n         CLI   DS1FMTID,C'1'  IS THIS A FORMAT 1?\n         BE    GOTFMT1        YES, SEE IF SHOULD INCLUDE IT.       005G\n         CLI   DS1FMTID,C'4'  IS THIS A FORMAT 4?                  005G\n         BE    GOTFMT4        YES, KEEP TO GATHER EXTENT INFO ONLY.005G\n         CLI   DS1FMTID,C'5'  IS THIS A FORMAT 5?                  005G\n         BE    GOTFMT5        YES, KEEP TO GATHER EXTENT INFO ONLY.005G\n         CLI   DS1FMTID,C'6'  IS THIS A FORMAT 6?                  005G\n         BE    CHECKOUT       EXCLUDE IT;ALREADY DONE ON FMT4.     005G\n         B     CHECKOUT       EXCLUDE IT FROM MORE PROCESSING.     005G\n*\n*              FIRST SEE HOW BIG THE DSNAME IS\n*\nGOTFMT1  LA    R1,DS1FMTID    POINT PAST THE DSNAME                005G\n         TRT   DS1DSNAM,BLKTRTAB  FIND THE FIRST BLANK\n         SR    R1,R7          SUBTRACT TO GET THE LENGTH\n         STH   R1,DSNLEN      SAVE THE DSNAME LENGTH\n         LR    R3,R1          KEEP THE LENGTH FOR LATER\n*\n*        GET THE FORMAT 3 DSCB, IF IT EXISTS\n*\n*MT3GET  XC    FMT3,FMT3      CLEAR IT FIRST.                  004G018G\nFMT3GET  CLC   DS1PTRDS,=XL5'0000000000'  IS THERE A FORMAT 3?     018G\n         BE    FMT3LAST       NO, SKIP ALONG.                      018G\n*        XC    FMT3,FMT3      CLEAR FORMAT 3 WORK AREA.            018G\n         LA    R0,FMT3        GET A(FORMAT 3 WORK AREA).           017G\n         XR    R1,R1          CLEAR FORMAT 3 WORK AREA.            017G\n         LR    R4,R0          GET A(FORMAT 3 WORK AREA).           017G\n         LA    R5,FMT3LEN     GET L(FORMAT 3 WORK AREA).           017G\n         MVCL  R4,R0          CLEAR FORMAT 3 WORK AREA.            017G\n         LA    R4,FMT3        GET A(WORK AREA BEGINNING).          017G\nFMT3NEXT CLC   DS1PTRDS,=XL5'0000000000'  IS THERE ANOTHER FMT3?   017G\n         BE    FMT3LAST       NO, I'VE HIT LAST ONE.               017G\n         LA    R1,DS1PTRDS    GET THE CCHHR ADDRESS OF NEXT FMT3.  017G\n*        LA    R15,FMT3       POINT TO TEMP AREA FOR THE DSCB3.005G017G\n         LR    R15,R4         GET A(NEXT AVAIL FMT3 SLOT).         017G\n         BAL   R2,OBTAINIT             GET THE RECORD.             005G\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   OBT3ERR        BAD NEWS, ISSUE THE MESSAGE\n*        CLI   DS3FMTID,C'2'  IS IT A FORMAT 2 DSCB?               004G\n*        BNE   FMT3NO         NO, GO PROCESS FORMAT 3 DSCB.        004G\n         CLI   44(R4),C'2'    IS IT A FORMAT 2 DSCB?          004G 017G\n         BNE   FMT3YES        NO, GO PROCESS FORMAT 3 DSCB.        017G\n         MVC   DS1PTRDS,135(R4)   MOVE REAL FORMAT 3 POINTER       004G\n*                                   FROM THE FORMAT 2 DSCB.        004G\n         B     FMT3GET        GET THE FORMAT 3.                    004G\nFMT3YES  MVC   DS1PTRDS,135(R4)  GET NEXT FORMAT 3 POINTER.        017G\n*        MAKE 13 CONTIGUOUS EXTENTS.                               017G\n         MVC   0(40,R4),4(R4)    SHOVE FIRST 4 EXT LEFT.           017G\n         MVC   40(90,R4),45(R4)  SHOVE NEXT 9 EXT LEFT.            017G\n         LA    R4,130(R4)     GET A(NEXT AVAIL FMT3 SLOT).         017G\n         B     FMT3NEXT       GET THE NEXT FORMAT 3.               017G\nFMT3LAST DS    0H                                                  017G\n*\n*        PROCESS THE LEVEL KEYWORD\n*\nFMT3NO   CLI   LEVKEY+1,0     WAS LEVEL SPECIFIED?\n         BE    LEVEND         NO, SKIP ON.\n         LA    R4,LEVEL       ASSUME LEVEL SPECIFIED.\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\nLEVNEXT  SR    R5,R5          CLEAR REG 5.                         003G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH           003G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE LEVEL\n         CR    R3,R5          COMPARE LENGTHS\n         BL    LEVINC         THIS LEVEL IS LONGER THAN DSN, NO MATCH\n         AR    R7,R5          BUMP TO WHERE PERIOD SHOULD BE.      019G\n         CLC   0(1,R7),PERIOD THERE BETTER BE A PERIOD HERE.       019G\n         BE    LEVCHK         IF PERIOD COMPARE LEVEL CHARACTERS.  019G\n         SR    R7,R5          RESET TO START OF DSNAME.            019G\n         B     LEVINC         THIS LEVEL WON'T MATCH.              019G\nLEVCHK   SR    R7,R5          RESET TO START OF DSNAME.            019G\n         BCTR  R5,0           MINUS ONE FOR THE EX\n         EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    LEVEND         IT MATCHES, ALLOW IT.\nLEVINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT LEVEL PDE POINTER\n         BNZ   LEVNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nLEVEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*                                                                  020G\n*        PROCESS THE BEGINNING KEYWORD                             020G\n*                                                                  020G\n         CLI   BEGKEY+1,0     WAS BEGINNING SPECIFIED?             020G\n         BE    BEGEND         NO, SKIP ON.                         020G\n         LA    R4,BEGIN       ASSUME BEGINNING SPECIFIED.          020G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                   020G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME     020G\nBEGNEXT  SR    R5,R5          CLEAR REG 5.                         020G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH           020G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT          020G\n         L     R6,PDEDSN      POINT TO THE BEGIN                   020G\n         CR    R3,R5          COMPARE LENGTHS                      020G\n         BL    BEGINC         BEGIN IS LONGER THAN DSN, NO MATCH   020G\n         BCTR  R5,0           MINUS ONE FOR THE EX                 020G\n         EX    R5,COMPARE     CHECK THE LENGTHS                    020G\n         BE    BEGEND         IT MATCHES, ALLOW IT.                020G\nBEGINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT BEGIN PDE POINTER   020G\n         BNZ   BEGNEXT        IF IT'S THERE, KEEP LOOKING          020G\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME      020G\nBEGEND   DS    0H                                                  020G\n         DROP  R4             FINISHED WITH THE PDE                020G\n*\n*        PROCESS THE NOTLEVEL KEYWORD\n*\n         CLI   NLEVKEY+1,0    WAS NOTLEVEL SPECIFIED?            008G\n         BE    NLEVEND        NO, SKIP ON.                       008G\n         LA    R4,NLEVEL      YES, POINT TO PDE.                 008G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                 008G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME   008G\nNLEVNEXT SR    R5,R5          CLEAR REG 5.                       008G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH         008G\n         BZ    NLEVEND        END OF THE LINE, INCLUDE IT        008G\n         L     R6,PDEDSN      POINT TO THE LEVEL                 008G\n         CR    R3,R5          COMPARE LENGTHS                    008G\n         BL    NLEVINC        LEVEL IS LONGER THAN DSN, NO MATCH 008G\n         AR    R7,R5          BUMP TO WHERE PERIOD SHOULD BE.      019G\n         CLC   0(1,R7),PERIOD THERE BETTER BE A PERIOD HERE.       019G\n         BE    NLEVCHK        IF PERIOD COMPARE LEVEL CHARACTERS.  019G\n         SR    R7,R5          RESET TO START OF DSNAME.            019G\n         B     NLEVINC        NO PERIOD, WON'T MATCH.              019G\nNLEVCHK  SR    R7,R5          RESET TO START OF DSNAME.            019G\n         BCTR  R5,0           MINUS ONE FOR THE EX               008G\n         EX    R5,COMPARE     CHECK THE LENGTHS                  008G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.            008G\nNLEVINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT LEVEL PDE POINTER 008G\n         BNZ   NLEVNEXT       IF IT'S THERE, KEEP LOOKING        008G\n         B     NLEVEND        NO MATCHES, INCLUDE THIS DSNAME    008G\nNLEVEND  DS    0H                                                008G\n         DROP  R4             FINISHED WITH THE PDE              008G\n*                                                                  020G\n*        PROCESS THE NOTBEGINNING KEYWORD                          020G\n*                                                                  020G\n         CLI   NBEGKEY+1,0    WAS NBEGIN SPECIFIED?                020G\n         BE    NBEGEND        NO, SKIP ON.                         020G\n         LA    R4,NBEGIN      YES, POINT TO PDE.                   020G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                   020G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME     020G\nNBEGNEXT SR    R5,R5          CLEAR REG 5.                         020G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH           020G\n         BZ    NBEGEND        END OF THE LINE, INCLUDE IT          020G\n         L     R6,PDEDSN      POINT TO THE NBEGIN VALUE.           020G\n         CR    R3,R5          COMPARE LENGTHS                      020G\n         BL    NBEGINC        NBEGIN IS LONGER THAN DSN, NO MATCH  020G\n         BCTR  R5,0           MINUS ONE FOR THE EX                 020G\n         EX    R5,COMPARE     CHECK THE LENGTHS                    020G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.              020G\nNBEGINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT NBEGIN PDE POINTER  020G\n         BNZ   NBEGNEXT       IF IT'S THERE, KEEP LOOKING          020G\n         B     NBEGEND        NO MATCHES, INCLUDE THIS DSNAME      020G\nNBEGEND  DS    0H                                                  020G\n         DROP  R4             FINISHED WITH THE PDE                020G\n*\n*        PROCESS THE ENDING KEYWORD\n*\n         CLI   ENDKEY+1,0     WAS ENDING SPECIFIED?\n         BE    ENDEND         NO, SKIP ON\n         LA    R4,ENDING      YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\nENDNEXT  SR    R5,R5          CLEAR HI ORDER OF REG 5.            003G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH          003G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE ENDING\n         CR    R3,R5          COMPARE LENGTHS\n         BL    ENDINC         THIS ENDING IS LONGER THAN DSN, NO MATCH\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\n         AR    R2,R3          POINT TO THE END\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH\n         BCTR  R5,0           MINUS ONE FOR THE EX\n         EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    ENDEND         IT MATCHES, ALLOW IT\nENDINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT ENDING PDE POINTER\n         BNZ   ENDNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nENDEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*\n*        PROCESS THE NOTENDING KEYWORD\n*\n         CLI   NENDKEY+1,0    WAS NOTENDING SPECIFIED?            008G\n         BE    NENDEND        NO, SKIP ON                         008G\n         LA    R4,NENDING     YES, POINT TO THE PDE               008G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                  008G\nNENDNEXT SR    R5,R5          CLEAR HI ORDER OF REG 5.            008G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH          008G\n         BZ    NENDEND        END OF THE LINE, INCLUDE IT         008G\n         L     R6,PDEDSN      POINT TO THE ENDING                 008G\n         CR    R3,R5          COMPARE LENGTHS                     008G\n         BL    NENDINC        NOTENDING IS LONGER THAN DSN, NO MATCH\n         LR    R2,R7          POINT TO THE START OF THE DSNAME    008G\n         AR    R2,R3          POINT TO THE END                    008G\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH       008G\n         BCTR  R5,0           MINUS ONE FOR THE EX                008G\n         EX    R5,COMPARE     CHECK THE LENGTHS                   008G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.             008G\nNENDINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT ENDING PDE POINTER 008G\n         BNZ   NENDNEXT       IF IT'S THERE, KEEP LOOKING         008G\n         B     NENDEND        NO MATCHES, INCLUDE THIS DSNAME     008G\nNENDEND  DS    0H                                                 008G\n         DROP  R4             FINISHED WITH THE PDE               008G\n*                                                                  025G\n*        PROCESS THE LOWLEVEL KEYWORD                              025G\n*                                                                  025G\n         CLI   LOWKEY+1,0     WAS LOWLEVEL SPECIFIED?              025G\n         BE    LOWEND         NO, SKIP ON.                         025G\n         LA    R4,LOWLEV      ASSUME LOWLEVEL SPECIFIED.           025G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY.                  025G\nLOWNEXT  SR    R5,R5          CLEAR REG 5.                         025G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH.          025G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT.         025G\n         L     R6,PDEDSN      POINT TO THE LOWLEVEL.               025G\n         CR    R3,R5          COMPARE LENGTHS.                     025G\n         BL    LOWINC         LOWLEVEL IS LONGER THAN DSN, NO MATCH025G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME.    025G\n         AR    R2,R3          POINT TO THE END.                    025G\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH.       025G\n         BCTR  R2,0           SUBTRACT ONE TO CHECK FOR PERIOD.    025G\n         CLC   0(1,R2),PERIOD THERE BETTER BE A PERIOD HERE.       025G\n         LA    R2,1(R2)       RESET TO STRING TO COMPARE.          025G\n         BNE   LOWINC         THIS LOWLEVEL WON'T MATCH.           025G\n         BCTR  R5,0           MINUS ONE FOR THE EX.                025G\n         EX    R5,COMPARE     CHECK THE LENGTHS.                   025G\n         BE    LOWEND         IT MATCHES, ALLOW IT.                025G\nLOWINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT LOWLEVEL PDE POINTER025G\n         BNZ   LOWNEXT        IF IT'S THERE, KEEP LOOKING          025G\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME      025G\nLOWEND   DS    0H                                                  025G\n         DROP  R4             FINISHED WITH THE PDE                025G\n*                                                                  025G\n*        PROCESS THE NOTLOWLEVEL KEYWORD                           025G\n*                                                                  025G\n         CLI   NLOWKEY+1,0    WAS NLOWLEV SPECIFIED?               025G\n         BE    NLOWEND        NO, SKIP ON.                         025G\n         LA    R4,NLOWLEV     ASSUME NLOWLEV SPECIFIED.            025G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY.                  025G\nNLOWNEXT SR    R5,R5          CLEAR REG 5.                         025G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH.          025G\n         BZ    NLOWEND        END OF THE LINE, INCLUDE IT.         025G\n         L     R6,PDEDSN      POINT TO THE NLOWLEV.                025G\n         CR    R3,R5          COMPARE LENGTHS.                     025G\n         BL    NLOWINC        NLOWLEV IS LONGER THAN DSN, NO MATCH.025G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME.    025G\n         AR    R2,R3          POINT TO THE END.                    025G\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH.       025G\n         BCTR  R2,0           SUBTRACT ONE TO CHECK FOR PERIOD.    025G\n         CLC   0(1,R2),PERIOD THERE BETTER BE A PERIOD HERE.       025G\n         LA    R2,1(R2)       RESET TO STRING TO COMPARE.          025G\n         BNE   NLOWINC        THIS NLOWLEV WON'T MATCH.            025G\n         BCTR  R5,0           MINUS ONE FOR THE EX.                025G\n         EX    R5,COMPARE     CHECK THE LENGTHS.                   025G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.              025G\nNLOWINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT NLOWLEV PDE POINTER.025G\n         BNZ   NLOWNEXT       IF IT'S THERE, KEEP LOOKING          025G\n         B     NLOWEND        NO MATCHES, INCLUDE THIS DSNAME      025G\nNLOWEND  DS    0H                                                  025G\n         DROP  R4             FINISHED WITH THE PDE                025G\n*\n*        PROCESS THE CONTAINING KEYWORD\n*\n         CLI   CONTAINK+1,0   WAS CONTAINING SPECIFIED?\n         BE    CONEND         NO, SKIP ON\n         LA    R4,CONTAIN     YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\nCONNEXT  SR    R5,R5          CLEAR HIORDER OF REG 5.             003G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH          003G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE CONTAINING\n         CR    R3,R5          COMPARE LENGTHS\n         BL    CONINC         THIS CONTAIN IS LONGER THAN DSN, NO MATCH\n         LR    R1,R7          POINT TO THE START OF THE DSNAME\n         AR    R1,R3          POINT TO THE END\n         SR    R1,R5          BACKUP TO COMPARE THIS LENGTH - LAST ONE\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\n         BCTR  R5,0           MINUS ONE FOR THE EX\nCONCOMP  EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    CONEND         IT MATCHES, ALLOW IT\n         LA    R2,1(R2)       CHECK THE WHOLE DSNAME\n         CR    R2,R1          CHECK FOR THE END OF THE REAL DSN\n         BNH   CONCOMP        NOT THERE YET\nCONINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT CONTAINING PDE POINTER\n         BNZ   CONNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nCONEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*\n*        PROCESS THE NOTCONTAINING KEYWORD\n*\n         CLI   NCONKEY+1,0    WAS NOTCONTAINING SPECIFIED?        008G\n         BE    NCONEND        NO, SKIP ON                         008G\n         LA    R4,NCONTAIN    YES, POINT TO THE PDE               008G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                  008G\nNCONNEXT  SR    R5,R5         CLEAR HIORDER OF REG 5.             008G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH          008G\n         BZ    NCONEND        END OF THE LINE, INCLUDE IT         008G\n         L     R6,PDEDSN      POINT TO THE NOTCONTAINING          008G\n         CR    R3,R5          COMPARE LENGTHS                     008G\n         BL    NCONINC        NOTCONTAIN IS LONGER THAN DSN, NO MATCH\n         LR    R1,R7          POINT TO THE START OF THE DSNAME    008G\n         AR    R1,R3          POINT TO THE END                    008G\n         SR    R1,R5          BACKUP TO COMPARE THIS LENGTH - LAST ONE\n         LR    R2,R7          POINT TO THE START OF THE DSNAME    008G\n         BCTR  R5,0           MINUS ONE FOR THE EX                008G\nNCONCOMP EX    R5,COMPARE     CHECK THE LENGTHS                   008G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.             008G\n         LA    R2,1(R2)       CHECK THE WHOLE DSNAME              008G\n         CR    R2,R1          CHECK FOR THE END OF THE REAL DSN   008G\n         BNH   NCONCOMP       NOT THERE YET                       008G\nNCONINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT CONTAINING PDE POINTER\n         BNZ   NCONNEXT       IF IT'S THERE, KEEP LOOKING         008G\n         B     NCONEND        NO MATCHES, INCLUDE THIS DSNAME     008G\nNCONEND  DS    0H                                                 008G\n         DROP  R4             FINISHED WITH THE PDE               008G\n*\n*        NOW THE BIG MESS, CHECK FOR LIMIT, AND'S, AND OR'S\n*\n         CLI   LIMITK+1,0     WAS LIMIT SPECIFIED\n         BE    LIMEND         NO, THEN THERE CAN BE NO AND'S OR OR'S\n         NI    VTCFMTCK,255-VTCFMTCC  TURN OFF THE ROUTINE CALL FLAG\n         VTCHL L              EVALUATE THE LIMIT 1=TRUE 0=FALSE\n         ST    R15,LIMVAL     SAVE THE ANSWER\n         VTANDOR 1            CHECK AND1 OR OR1\n         VTANDOR 2            CHECK AND2 OR OR2\n         VTANDOR 3            CHECK AND3 OR OR3\n         VTANDOR 4            CHECK AND4 OR OR4                    013G\n         VTANDOR 5            CHECK AND5 OR OR5                    013G\nLIMCOMP  L     R15,LIMVAL     GET THE RESULT OF ALL THIS\n         LTR   R15,R15        TEST IT\n         BZ    CHECKOUT       IT GETS EXCLUDED\nLIMEND   DS    0H\n         B     CHECKIN        ALL TESTS PASSED, INCLUDE THIS ONE\n         SPACE 5\n*\n*        EVALUATION ROUTINE FOR   KEYWORD  OPER  VALUE\n*\nLIMEVAL  L     R5,REFKEY      GET THE KEYWORD VALUE\n         MH    R5,H12         MULTIPLY IT BY 12\n         A     R5,ATABTITL    THEN RELOCATE IT\n*        SR    R10,R10        CLEAR THE ROUTINE POINTER            022G\n         SR    R2,R2          CLEAR THE ROUTINE POINTER            022G\n         TM    1(R5),X'80'    IS IT A FORMATTED ITEM?\n         BO    LIMFORM        YES, GO DO IT\n         SR    R6,R6          CLEAR A REGISTER\n         IC    R6,2(R5)       GET THE OFFSET INTO VTFMT\n*        IC    R10,1(R5)      GET THE ROUTINE NUMBER               022G\n         IC    R2,1(R5)       GET THE ROUTINE NUMBER               022G\n*        LTR   R10,R10        SEE IF IT'S A GOOD NUMBER            022G\n         LTR   R2,R2          SEE IF IT'S A GOOD NUMBER            022G\n         BP    LIMEVAL1       IT'S ALL RIGHT\nLIMABEND ABEND 702,DUMP       CRASH AND BURN\n*IMEVAL1 B     *(R10)         AND GO TO IT                         022G\nLIMEVAL1 B     *(R2)          AND GO TO IT                         022G\n         B     LIMDATE      4 CDATE, EXPDT, LAST USE DATES.        015G\n         B     LIMCCHH      8 CCHH CHECKING.                       016G\n         B     LIMFORM     12 FORM , USED SPACE\n         B     LIMFORM     16 UNUSED SPACE\n         B     LIMFORM     20 PCT USED\n         B     LIMEXT      24 EXTENTS\n         B     LIMBLREC    28 LRECL, BLKSZ, SEC Q\n*        B     LIMCCHH     32 CCHH CHECKING                        016G\n         B     LIMFORM     32 DSN CHECKING.                        016G\n         B     LIMKEYLE    36 KEY LENGTH CHECKING.                 023G\n         SPACE 5\n*\n*        PERFORM THE FORMATTED ITEM CHECKING\n*\nLIMFORM  DS    0H\n         TM    VTCFMTCK,VTCFMTCC  WAS FORMAT CALLED BEFORE FOR THIS DS\n         BO    LIMFCALD       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          NO, CALL IT TO GET THE ITEMS\n         OI    VTCFMTCK,VTCFMTCC+VTCFMTCD  THEN SET THE SWITCHES\n*IMFCALD SR    R2,R2          CLEAR A WORK REG                     022G\nLIMFCALD DS    0H                                                  022G\n         A     R6,FORMATAD   RELOCATE THE BLOCK\n*        B     *+4(R10)         AND GO TO IT                       022G\n         B     *+4(R2)          AND GO TO IT                       022G\n         B     LIMFORMA     0 FORMATTED ITEM\n         B     LIMABEND     4 CDATE, EXPDT, LAST USE DATE.         015G\n         B     LIMABEND     8 CCHH.                                016G\n         B     LIMALLOC    12 ALLOC, USED SPACE\n         B     LIMUNUSD    16 UNUSED SPACE\n         B     LIMPCT      20 PCT USED\n         B     LIMABEND    24 EXTENTS                              016G\n         B     LIMABEND    28 LRECL, BLKSZ, SECQ                   016G\n         B     LIMDSN      32 DSNAME                               016G\nLIMFORMA DS    0H\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         IC    R2,2(R5)       GET THE OFFSET IN VTFMT\n         A     R2,FORMATAD    THEN RELOCATE IT\n         L     R4,REFVAL      GET THE VALUE PDE\n         LH    R3,4(R4)       GET THE LENGTH OF THE STRING\n         L     R1,0(R4)       AND ITS ADDRESS\n*\n*        DO THE ACTUAL COMPARE\n*\n         BCTR  R3,0           DOWN ONE FOR AN EX\n         EX    R3,COMPLIM     COMPARE AS SPECIFIED\nCOMPDONE DS    0H             GET THE OPERATOR ADDRESS\n         BL    COMPLOW        CHECK THE OPERATOR, VALUE LESS THAN ITEM\n         BE    COMPEQ         CHECK THE OPERATOR, KEYWORD EQUALS VALUE\n*                             KEYWORD IS GREATER THAN THE VALUE\nCOMPHI   CLI   REFOPER+3,NE       WAS OPERATOR NE\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GT       ALSO FOR GT\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GE       AND FOR GE\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*                             KEYWORD IS EQUAL TO THE VALUE\nCOMPEQ   CLI   REFOPER+3,EQ       WAS OPERATOR EQ\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LE       ALSO FOR LE\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GE       AND FOR GE\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*                             KEYWORD IS LESS THAN THE VALUE\nCOMPLOW  CLI   REFOPER+3,NE       WAS OPERATOR NE\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LT       ALSO FOR LT\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LE       AND FOR LE\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*\n*        IT FITS OR IT DOESN'T\n*\nCOMPYES  LA    R15,1          SET A TRUE VALUE\n         BR    R8             THEN RETURN\nCOMPNO   SR    R15,R15        SET A FALSE VALUE\n         BR    R8             THEN RETURN\n*\n*        SPECIAL ROUTINES TO CHECK NON-FORMATTED ITEMS\n*\nLIMDATE  DS    0H\n*\n*        COMPARE DATES\n*\n         LA    R14,DS1CREDT        POINT TO CREATION DATE.         015G\n         CLI   REFKEY+3,CDATE      IS THAT WHAT I'M COMPARING?     015G\n         BE    LIMDGET             YES, USE IT.                    015G\n         LA    R14,DS1EXPDT        NO, POINT TO EXPIRATION DATE.   015G\n         CLI   REFKEY+3,EXPDT      IS THAT WHAT I'M COMPARING?     015G\n         BE    LIMDGET             YES, USE IT.                    015G\n         LA    R14,DS1REFD         NO, USE LAST REFERENCED DATE.   015G\nLIMDGET  SR    R15,R15       CLEAR A WORK REG\n         IC    R15,0(R14)    GET THE YEAR\n         MH    R15,H1000     TIMES 1000\n         SR    R1,R1         CLEAR ANOTHER WORK REG\n         ICM   R1,3,1(R14)    GET THE DAYS\n         AR    R15,R1        PUT THE DATE TOGETHER\n         L     R1,REFNUM     GET THE ADDRESS OF THE VALUE\n         L     R1,0(R1)      GET THE VALUE ITSELF\n         LTR   R1,R1         SEE IF NON-NUMERIC.                   021G\n         BNZ   COMPDATE      NON-ZERO MEANS NUMERIC DATE PRESENT.  021G\n*                            ZERO MEANS NON-NUMERIC DATE PRESENT.  021G\n         L     R2,REFVAL     GET THE VALUE PDE.                    021G\n         L     R3,0(R2)      GET A(STRING).                        021G\n         CLI   0(R3),C'*'    SEE IF CURRENT DATE SHOULD BE USED.   021G\n         BE    LIMDGET1      YES, GET SYSTEM CURRENT DATE.         021G\n         VTOCMSG BADDATE     ONLY NUMERIC OR * ALLOWED ISSUE MSG   021G\nLIMDGET1 L     R4,CVTPTR     GET A(CVT).                           021G\n         USING CVTMAP,R4     TELL ASSEMBLER.                       021G\n         XC    CHEKDBLW,CHEKDBLW CLEAR WORK AREA.                  021G\n         MVC   CHEKDBLW+4(4),CVTDATE   MOVE CURRENT DATE.          021G\n         DROP  R4            UNTELL ASSEMBLER.                     021G\n         CVB   R1,CHEKDBLW   CONVERT CURRENT DATE TO BINARY.       021G\n         LH    R4,4(R2)      GET L(STRING).                        021G\n         CH    R4,H3         SEE IF ADD'L INFO.                    021G\n         BL    COMPDATE      NO, GO COMPARE DATES.                 021G\n         LA    R3,1(R3)      POINT A(STRING) PAST *.               021G\n         ST    R3,0(R2)      RESET A(STRING) IN PDL.               021G\n         BCT   R4,0          DECREMENT L(STRING) BY ONE.           021G\n         ST    R4,4(R2)      RESET L(STRING) IN PDL.               021G\n         LR    R1,R2         POINT TO VALUE PDL.                   021G\n         LR    R2,R15        SAVE KEYWORD DATE VALUE.              021G\n         LR    R3,R1         SAVE CURRENT DATE VALUE.              021G\n         BAL   R8,PDLNUM     GO CONVERT IT.                        021G\n         AR    R15,R3        CURRENT DATE + OFFSET NUMBER OF DAYS. 021G\n         LR    R1,R15        SET UP REFVALUE DATE FOR COMPARE.     021G\n         LR    R15,R2        SET UP KEYWORD DATE VALUE FOR COMPARE.021G\nCOMPDATE CR    R15,R1        COMPARE DATES.                        021G\n         B     COMPDONE      GO CHECK OPERANDS.\n*IMLUSE  DS    0H                                                  015G\n*\n*        LAST USE DATE   --- MODIFIED FOR MVS SU60.                002S\n*\n*        LA    R14,75(,R7)   POINT TO THE DATE-LAST-USE FIELD  002S015G\n*        B     LIMDGET       USE THE STANDARD DATE TEST LOGIC  002S015G\n*                                                                  002S\n**       THE ORIGINAL CODE BELOW INVALID WITH MVS SU60 (GIVES 0C7) 002S\n*                                                                  002S\n*        SR    R14,R14       CLEAR THE DATE\n*        CLC   ZERO,75(R7)   CHECK FOR NO DATA\n*        BE    LIMLUCMP      RIGHT, SKIP ON\n*        MVC   CHEKDBLW+5(3),75(R7)  MOVE IN THE LAST USE DATE\n*        CVB   R14,CHEKDBLW  CONVERT IT TO BINARY\n*LIMLUCMP L    R1,REFNUM     GET THE ADDRESS OF THE VALUE\n*        L     R1,0(R1)      GET THE VALUE\n*        CR    R14,R1        DO THE COMPARE\n*        B     COMPDONE      THEN CHASE DOWN THE OPERANDS\nLIMEXT   DS    0H\n*\n*        EXTENTS\n*\n         L     R1,REFNUM     GET THE COMPARE VALUE ADDRESS\n         CLC   DS1NOEPV,3(R1)        COMPARE THEM\n         B     COMPDONE      GO CHECK OPERANDS\nLIMBLREC DS    0H\n*\n*        LRECL, BLKSZ, SECQ\n*\n         L     R1,REFNUM     GET THE ADDRESS OF THE COMPARE VALUE\n         L     R15,0(R1)      THEN GET THE VALUE ITSELF\n         CLI   REFKEY+3,BLKSZ      BLOCK SIZE?\n         BNE   LIMB1         NO, KEEP CHECKING\n         LH    R1,DS1BLKL    COMPARE TO THE BLOCK SIZE\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      GO SIFT THROUGH THE OPERANDS\nLIMB1    CLI   REFKEY+3,LRECL  LOGICAL RECORD LENGTH\n         BNE   LIMB2         NO, KEEP GOING\n         LH    R1,DS1LRECL   COMPARE TO THE LRECL\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      GO CHECK THE OPERANDS\nLIMB2    MVC   HWORK,DS1SCALO+2 GET THE SECONDARY QUANTITY\n         LH    R1,HWORK      DO THE COMPARE\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      THEN CHECK THE OPERANDS\n*                                                                  023G\n*        KEY LENGTH                                                023G\n*                                                                  023G\nLIMKEYLE DS    0H                                                  023G\n         L     R1,REFNUM     GET THE COMPARE VALUE ADDRESS         023G\n         CLC   DS1KEYL,3(R1) COMPARE THEM                          023G\n         B     COMPDONE      GO CHECK OPERANDS                     023G\n*\n*        SPACE CHECKING ROUTINES\n*\nLIMALLOC DS    0H\n*\n*        ALLOC AND USED\n*\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         L     R1,REFNUM     GET THE ADDRESS OF THE CONVERTED NUMBER\n         L     R1,0(R1)      GET THE VALUE\n         L     R15,0(R6)     GET THE AMOUNT\n         CR    R15,R1        COMPARE THEM\n         B     COMPDONE      THEN CHECK THE OPERANDS\nLIMUNUSD DS    0H\n*\n*        UNUSED\n*\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         L     R6,FORMATAD   POINT TO THE FORMATTED VTOC\n         USING VTFMT,R6      SET ADDRESSABILITY\n         ICM   R14,15,VTFUSED      GET THE AMOUNT USED\n         BM    LIMUNUAL      IF MINUS, WE DON'T KNOW\n         L     R14,VTFALLOC  GET ALLOC\n         S     R14,VTFUSED   MINUS THE AMOUNT USED\nLIMUNUAL L     R1,REFNUM     GET THE ENTERED VALUE\n         L     R1,0(R1)      NOW ITS VALUE FOR REAL\n         CR    R14,R1        COMPARE THE VALUES\n         B     COMPDONE      THEN GO CHECK THE OPERANDS\nLIMPCT   DS    0H\n*\n*        PER CENT\n*\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         L     R6,FORMATAD   POINT TO THE FORMATTED VTOC\n         USING VTFMT,R6      SET ADDRESSABILITY\n         SR    R14,R14       CLEAR A REGISTER\n         ICM   R15,15,VTFUSED      GET THE AMOUNT USED\n         BM    LIMP100       IF UNKNOWN USED, SET 100 PER CENT\n         CLC   VTFALLOC,ZERO ZERO ALLOCATED SPACE?\n         BNE   LIMPCTOK      NO, CONTINUE\n         CLC   VTFUSED,ZERO  ZERO USED SPACE?\n         BE    LIMPCOMP      YES, PCT IS ZERO\n*              ZERO ALLOCATED, NONZERO USED, INCLUDE THIS ONE\n         B     COMPYES\nLIMP100  LA    R15,100       SET UP 100 PER CENT\n         B     LIMPCOMP      GO COMPARE\nLIMPCTOK M     R14,F100      MULTIPLY BY 100 PERCENT\n         D     R14,VTFALLOC  DIVIDE BY THE ALLOCATION\nLIMPCOMP L     R1,REFNUM     GET THE VALUE ADDRESS\n         L     R1,0(R1)      THEN THE VALUE\n         CR    R15,R1        THEN COMPARE THEM\n         B     COMPDONE      THEN GO SIFT THROUGH THE OPERANDS\nLIMDSN   DS    0H                                                  016G\n*                                                                  016G\n*        DSNAME CHECKING                                           016G\n*                                                                  016G\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         MVI   HOLDSDSN,C' '             CLEAR HOLD AREA.          016G\n         MVC   HOLDSDSN+1(43),HOLDSDSN   CLEAR HOLD AREA.          016G\n         MVI   HOLDVDSN,C' '             CLEAR HOLD AREA.          016G\n         MVC   HOLDVDSN+1(43),HOLDVDSN   CLEAR HOLD AREA.          016G\n         L     R6,FORMATAD    POINT TO THE FORMATTED VTOC.         016G\n         USING VTFMT,R6       SET ADDRESSABILITY.                  016G\n         SR    R2,R2          CLEAR WORK REG.                      016G\n         LH    R2,VTFDSNL     GET THE LENGTH OF DSNAME.            016G\n         BCTR  R2,0           DOWN ONE FOR AN EX.                  016G\n         LA    R1,VTFDSN      GET A(VTFDSN).                       016G\n         EX    R2,MOVEVDSN    MOVE VTFDSN TO WORK AREA.            016G\n         L     R4,REFVAL      GET THE VALUE PDE.                   016G\n         LH    R2,4(R4)       GET THE LENGTH OF THE STRING.        016G\n         BCTR  R2,0           DOWN ONE FOR AN EX.                  016G\n         L     R1,0(R4)       GET A(STRING).                       016G\n         EX    R2,MOVESDSN    MOVE STRING TO WORK AREA.            016G\n         LA    R1,HOLDSDSN    GET A(STRING DSN).                   016G\n         LA    R2,HOLDVDSN    GET A(STRING DSN).                   016G\n         LA    R3,43          SET L(STRING VS VTFDSN COMPARE).     016G\n         EX    R3,COMPLIM     COMPARE AS SPECIFIED.                016G\n         B     COMPDONE       YES, DO STANDARD COMPARISON.         016G\n*\n*        CCHH CHECKING IS NOT QUITE STANDARD BECAUSE THERE MAY\n*        MAY BE UP TO 127 EXTENTS TO COMPARE.  THE DATA MAY BE     017G\n*        CC OR CCHH FORMATS.  THE DATA SET MAY BE EQUAL TO,\n*        LESS THAN, AND GREATER THAN ANY PARTICULAR VALUE.\n*\nLIMCCHH  DS    0H\n*\n*        FIRST SEE IF THE CCHH WAS CONVERTED\n*              CONVERT IT IF NOT, SKIP IF IT'S DONE\n*\n         L     R5,REFNUM     GET THE ADDRESS OF THE COMPARISON VALUE\n         L     R4,0(R5)      GET THE VALUE\n         ICM   R6,3,4(R5)    GET THE COMPARE LENGTH\n         BP    LIMCSET       IF IT'S SET, THE CONVERSION IS DONE\n*                      IT WASN'T SET, CONVERT FROM CHARS TO BINARY\n         L     R1,REFVAL     GET THE ADDRESS OF THE IKJIDENT\n         L     R2,0(R1)      POINT TO THE TEXT\n         LH    R3,4(R1)      GET THE LENGTH OF THE TEXT\n*        IT SHOULD BE 4 OR 8 CHARACTERS\n         XC    DOUBLE,DOUBLE CLEAR OUT A PLACE TO WORK\n         CH    R3,H4         IS IT A CYLINDER ONLY?\n         BH    LIMCCON2      NO, TRY FOR A CCHH\n         BE    LIMCCON1      YES, JUST CONVERT IT\n         VTOCMSG CCHHLEN     LESS THAN FOUR CHARS, ISSUE A MSG\nLIMCCON1 LA    R6,1          SET THE COMPARE LENGTH\n         B     LIMCMOVE      GO MOVE IT IN\nLIMCCON2 LA    R6,3          SET THE COMPARE LENGTH\n         CH    R3,H8         WAS IT A CCHH?\n         BE    LIMCMOVE      YES, JUST THE RIGHT LENGTH\n         VTOCMSG CCHHLEN     WARN THE PERSON\n         CH    R3,H8         CHECK AGAIN\n         BL    LIMCMOVE      IS IT OVER 8 CHARS?\n         LH    R3,H8         YES, SET IT FOR THE MAX - IGNORE RR\nLIMCMOVE BCTR  R3,0          MINUS ONE FOR THE EX\n         EX    R3,MOVECCHH   MOVE IN THE CHARS\n         TR    DOUBLE,DECTABLE TRANSLATE HEX EBCDIC TO HEX BINARY\n         PACK  CYLH(5),DOUBLE(9)  SQUISH OUT THE ZONES\n         L     R4,CYLH       GET THE CCHH\n         ST    R4,0(R5)      SAVE IT FOR LATER\n         STH   R6,4(R5)      SAVE THE LENGTH TOO\nLIMCSET  DS    0H            THE NUMBER IS CONVERTED\n*\n*        COMPARE THE EXTENTS TO THE CCHH VALUE.\n*        ANY EXTENT MAY BE LT, EQ, AND GT A PARTICULAR\n*        VALUE, AND ALL THE EXTENTS MUST BE CHECKED.\n*\n         MVI   CCHHCOMP,0    CLEAR THE FLAGS\n         SR    R2,R2         CLEAR A REG FOR AN EXTENT COUNTER\n         ICM   R2,1,DS1NOEPV GET THE NUMBER OF EXTENTS\n         BZ    COMPNO        NO EXTENTS, JUST GO SEE\n*\n*        GET EACH EXTENT AND PROCESS IT\n*\n*        SR    R1,R1         FIRST EXTENT                          017G\n*XTNEXT  LR    R3,R1         GET THE CURRENT EXTENT                017G\n*        SLL   R3,2          TIMES 4                               017G\n*        EX    R0,GETEXT(R3) GET THE EXTENT ADDRESS INTO R3        017G\n         SR    R1,R1         FIRST EXTENT                          017G\nEXTNEXT  LR    R3,R1         GET THE CURRENT EXTENT                017G\n         CH    R3,H2         IS IT IN FMT1 DSCB?                   017G\n         BH    EXTFMT3       NO, IT'S IN FMT3 DSCB.                017G\n         SLL   R3,2          TIMES 4                               017G\n         EX    R0,GETEXT(R3) GET THE EXTENT ADDRESS INTO R3        017G\n         B     EXTGOT                                              017G\nEXTFMT3  DS    0H            MUST PROCESS FMT3 DIFFERENTLY.        017G\n         SH    R3,H3         MAKE IT RELATIVE TO BEGIN FMT3.       017G\n         MH    R3,H10        CALCULATE OFFSET FROM BEGIN FMT3.     017G\n         LA    R3,FMT3(R3)   GET A(CURRENT EXT).                   017G\nEXTGOT   DS    0H            GOT A(EXTENT).                        017G\n*\n*        CHECK THE BOTTOM OF THE EXTENT\n*\n         NI    CCHHCOMP,255-CCHHX TURN OFF THE STRADDLE FLAG\n         EX    R6,CLCEXTLO    DO THE COMPARE\n         BH    SETH1         THE FIELD IS HIGHER THAN THE VALUE\n         BE    SETEQ1        THE FIELD IS EQUAL TO THE VALUE\n         OI    CCHHCOMP,CCHHLOW+CCHHX  LOWER -  POSSIBLE STRADDLE\n         B     CHECKHI       GO CHECK THE TOP OF THIS EXTENT\nSETH1    OI    CCHHCOMP,CCHHHIGH  SET THE FLAG\n         B     CHECKHI       GO CHECK THE TOP OF THIS EXTENT\nSETEQ1   OI    CCHHCOMP,CCHHEQ   SET THE FLAG\n*\n*        CHECK THE TOP OF THE EXTENT\n*\nCHECKHI  EX    R6,CLCEXTHI   DO THE COMPARE\n         BE    SETEQ2        EQUAL, GO SET IT\n         BL    EXTSET        LOW, GO SET IT\n*\n*        THIS IS THE ONLY SLIGHTLY TRICKY PART, A STRADDLE\n*        IF THE BOTTOM OF THE EXTENT IS LOWER THAN THE VALUE AND THE\n*        TOP OF THE EXTENT IS HIGHER THAN THE VALUE, THEN THE\n*        EQ FLAG SHOULD BE SET TOO.\n*\n         OI    CCHHCOMP,CCHHHIGH  SET THE HIGH FLAG\n         TM    CCHHCOMP,CCHHX     WAS THE BOTTOM LOWER THAN THE VALUE?\n         BZ    EXTSET        NO, SKIP ON\nSETEQ2   OI    CCHHCOMP,CCHHEQ    SET THE EQ FLAG\n*\n*        FINISHED WITH THAT EXTENT, CHECK FOR MORE\n*\nEXTSET   DS    0H\n         LA    R1,1(R1)      INCREMENT THE EXTENT COUNTER\n         CR    R1,R2         CHECK THE EXTENT COUNTER\n         BNL   LIMCOPER      THAT'S ALL FOLKS\n         TM    CCHHCOMP,CCHHHIGH+CCHHEQ+CCHHLOW  ARE THEY ALL SET?\n         BNO   EXTNEXT       NO, CONTINUE LOOKING\n*                            YES, STOP NOW - ALL THE FLAGS ARE SET\nLIMCOPER L     R4,REFOPER    GET THE NUMERIC VALUE OF THE KEY\n         IC    R4,CCHHTAB(R4)  GET A FLAG MASK\n         EX    R4,CCHHOPER   CHECK TO SEE IF THE CONDITION IS SET\n         BZ    COMPNO        NOT THERE\n         B     COMPYES       YES\n*\n*        EXECUTED INSTRUCTIONS TO GET THE ADDRESS OF THIS EXTENT\n*\nGETEXT   LA    R3,DS1EXT1     1ST EXTENT\n         LA    R3,DS1EXT2     2ND EXTENT\n         LA    R3,DS1EXT3     3RD EXTENT\n*        LA    R3,DS3EXTNT    4TH EXTENT                           017G\n*        LA    R3,DS3EXTNT+10 5TH EXTENT                           017G\n*        LA    R3,DS3EXTNT+20 6TH EXTENT                           017G\n*        LA    R3,DS3EXTNT+30 7TH EXTENT                           017G\n*        LA    R3,DS3ADEXT    8TH EXTENT                           017G\n*        LA    R3,DS3ADEXT+10 9TH EXTENT                           017G\n*        LA    R3,DS3ADEXT+20 10TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+30 11TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+40 12TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+50 13TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+60 14TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+70 15TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+80 16TH EXTENT                          017G\n*\n*        SAVE FMT4 (VTOC) AND FMT6 EXTENT INFO\n*\n*                                      FMT4 ALREADY ADDED TO MAP.  005G\nGOTFMT4  MVI   VTCCFUNC,0              INDICATE NO FMT5 PROCESSED. 005G\n         CLC   DS4F6PTR,=XL5'0000000000'  IS THERE A FMT6?         005G\n         BE    CHECKOUT                 NO, SKIP ALONG.            005G\n         LA    R1,DS4F6PTR             YES, GET A(CCHHR ADDRESS).  005G\nFMT6GET  L     R7,DSCBADDR             GET A(AREA TO READ INTO).   005G\n         LA    R7,8(R7)                BUMP PAST HEADER AREA.      005G\n         DROP  R7\n         USING FMT6DSEC,R7             TELL ASSEMBLER.             005G\n         LR    R15,R7                  GET A(AREA TO READ INTO).   005G\n         BAL   R2,OBTAINIT             GET THE RECORD.             005G\n         LTR   R15,R15                 TEST THE RETURN CODE.       005G\n         BNZ   OBT6ERR                 BAD NEWS, ISSUE MESSAGE.    005G\n         VTOCMAP ADD                   ADD SPLIT EXTENT TO MAP.    005G\n         CLC   DS6PTRDS,=XL5'0000000000' IS THERE ANOTHER FMT6?    005G\n         BE    CHECKOUT                NO, SKIP ALONG.             005G\n         LA    R1,DS6PTRDS             YES, GET THE CCHHR ADDRESS. 005G\n         B     FMT6GET                 GET THE NEXT FMT6.          005G\n*\n*        SAVE FMT5 EXTENT INFO\n*\nGOTFMT5  CLI   VTCCFUNC,0              HAVE ALL FMT5 BEEN PROCESSD.005G\n         BNE   CHECKOUT                YES.                        005G\n         MVI   VTCCFUNC,1              INDICATE FMT5 ALL PROCESSED.005G\nNEXTFMT5 VTOCMAP ADD                   ADD FREE EXTENT TO MAP.     005G\n         DROP  R7\n         USING FMT5DSEC,R7             TELL ASSEMBLER.             005G\n         L     R7,DSCBADDR             GET A(FMT5 JUST GOTTEN).    005G\n         LA    R7,8(R7)                BUMP PAST HEADER.           005G\n         CLC   DS5PTRDS,=XL5'0000000000'  IS THERE ANOTHER FMT5?   005G\n         BE    CHECKOUT                 NO, SKIP ALONG.            005G\n         LA    R1,DS5PTRDS             YES, GET THE CCHHR ADDRESS. 005G\n         LR    R15,R7                  GET A(AREA TO READ INTO).   005G\n         BAL   R2,OBTAINIT             GET THE RECORD.             005G\n         LTR   R15,R15                 TEST THE RETURN CODE        005G\n         BNZ   OBT5ERR                 ERROR ON OBTAIN.            005G\n         B     NEXTFMT5                SAVE EXTENT INFO.           005G\n*\n*        ISSUE ERROR MESSAGES AND RETURN\n*\nOBT3ERR  MVC   MSGTEXT2,OBT3ERRM            MOVE MESSAGE.          007G\n         MVC   MSGTEXT2+15(6),VOLID         MOVE VOLSER.           007G\n         VTOCMSG MSGTEXT2                   ISSUE ERROR MESSAGE.   007G\n         B     CHECKOUT                                            005G\nOBT5ERR  MVC   MSGTEXT2,OBT5ERRM            MOVE MESSAGE.          007G\n         MVC   MSGTEXT2+15(6),VOLID         MOVE VOLSER.           007G\n         VTOCMSG MSGTEXT2                   ISSUE ERROR MESSAGE.   007G\n         B     CHECKOUT                                            005G\nOBT6ERR  MVC   MSGTEXT2,OBT6ERRM            MOVE MESSAGE.          007G\n         MVC   MSGTEXT2+15(6),VOLID         MOVE VOLSER.           007G\n         VTOCMSG MSGTEXT2                   ISSUE ERROR MESSAGE.   007G\n         B     CHECKOUT                                            005G\nCHECKOUT LA    R15,8          EXCLUDE THIS DATA SET\n         B     CHEKRET        RETURN\n*\nCHECKIN  SR    R15,R15        CLEAR THE REGISTER, PROCESS THIS DATA SET\nCHEKRET  VTCLEAVE EQ                                               009G\n*\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*\n**************************************************************\n*  ROUTINE TO OBTAIN A RECORD\n* INPUT: R1=CCHHR OF RECORD TO OBTAIN\n* CALLED VIA R2\n**************************************************************\nOBTAINIT ST    R15,CAMSEEK+12  SAVE A(AREA FOR THE DSCB).          005G\n         ST    R1,CAMSEEK+4    SAVE A(CCHHR TO SEEK).              005G\n         MVC   CAMSEEK(4),CAMSCON      MOVE FIRST WORD OF CAMLST.  005G\n         LA    R1,VOLID       POINT TO THE VOLUME SERIAL\n         ST    R1,CAMSEEK+8   SAVE IT\n         OBTAIN CAMSEEK       GET THE DSCB\n         BR    R2             RETURN TO CALLER.                    005G\n         EJECT\n*\n*        PDLNUM - CONVERT FROM CHARACTERS ( EBCDIC ) TO AN INTEGER\n*              BINARY FORM, PASSED BACK VIA REGISTER 15\n*              A PARSE PDE IS THE INPUT AS SHOWN IN THE SAMPLE BELOW\n*                       LA    R1,PDL     POINT TO THE PARSE DECRIPTION\n*                       BAL   R8,PDLNUM  GO CONVERT TO NUMERICS\n*              THE ROUTINE WILL TERMINATE IF IT FINDS NON-NUMERICS\n*                 ANY CHARACTERS OTHER THEN 0-9, +, -\n*              REGISTERS 1, 2, 5, 6, AND 7 ARE USED\n*\nPDLNUM   STM   R1,R8,PDLNSAVE SAVE THE REGISTERS\n         LH    R2,4(R1)       GET THE STRING LENGTH\n         L     R1,0(R1)       GET THE STRING ADDRESS\n         MVI   PDLMINUS,0     CLEAR THE NEGATIVE NUMBER FLAG\n         SR    R5,R5          CLEAR THE CHARACTER COUNTER\n         SR    R15,R15        CLEAR THE ANSWER\nPDLLOOP  LA    R6,0(R5,R1)    POINT TO THIS DIGIT\n         LA    R5,1(R5)       GET TO THE NEXT DIGIT\n         CR    R5,R2          IS THIS THE END OF THE STRING?\n         BH    PDLFINI        YES, EXIT\n         SR    R7,R7          CLEAR A WORK REGISTER\n         IC    R7,0(R6)       GET THE CHARACTER\n         SH    R7,PDLH240     SUBTRACT THE CHARACTER C'0'\n         BM    PDLSP          IF NEGATIVE, CHECK SPECIAL CHARACTERS\n         MH    R15,PDLH10     IT'S A DIGIT, MULTIPLY PRIOR NUM BY TEN\n         AR    R15,R7         ADD ON THE NEW DIGIT\n         B     PDLLOOP        AND LOOP FOR MORE\n*\n*        CHECK FOR SPECIAL CHARACTERS\n*\nPDLSP    CLI   0(R6),C' '     IS IT A BLANK?\n         BE    PDLLOOP        THEN IT'S OK\n         CLI   0(R6),C'+'     IS IT A PLUS?\n         BE    PDLLOOP        THAT'S ALSO OK\n         CLI   0(R6),C'-'     IS IT A MINUS?\n         BNE   PDLFINI        NO, JUST QUIT\n         MVI   PDLMINUS,1     YES, NOTE IT\n         B     PDLLOOP        AND LOOK FOR MORE\n*\n*        QUIT, AFTER SETTING R15 TO NEGATIVE IF NEEDED\n*\nPDLFINI  CLI   PDLMINUS,1     WAS A MINUS SIGN FOUND?\n         BNE   PDLLEAVE       NO, EXIT\n         LNR   R15,R15        YES, MAKE IT NEGATIVE\nPDLLEAVE LM    R1,R8,PDLNSAVE RESTORE THE REGISTERS\n         BR    R8             RETURN\nPDLH10   DC    H'10'\nPDLH240  DC    H'240'\n         EJECT\n*\n*        ROUTINE TO CONVERT A TEXT DSCB ITEM\n*        INTO ITS KEY NUMBER\n*        INPUT IS REG 4 - IKJIDENT PTR\n*        OUTPUT IS REG 15 - KEY NUMBER\n*        ENTRY VIA BAL   R8,GETKEY\n*\nGETKEY   L     R1,ATABTITL     POINT TO THE TABLE\n         LA    R1,12(R1)     POINT TO THE FIRST ENTRY\n         LA    R15,1           SET UP THE KEY NUMBER COUNTER\n         L     R6,0(R4)      POINT TO THE ENTERED TEXT\n         ICM   R3,3,4(R4)    GET THE LENGTH OF THE ENTERED TEXT\n         BNP   GETKNOTF      NOT FOUND IF ZERO\n         BCTR  R3,0          MINUS ONE FOR THE EX\nGETKLOOP LA    R2,4(R1)      POINT TO THE COMPARISON TEXT\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\nGETKSTD  EX    R3,GETKCOMP   COMPARE THE KEY TEXT\n         BE    GETKFND       I FOUND IT\n         LA    R1,12(R1)     GET TO THE NEXT KEY\n         LA    R15,1(R15)    INCREMENT THE KEY COUNTER\n*        CH    R15,H27       CHECK FOR THE END OF THE TABLE    012G024G\n         CH    R15,H29       CHECK FOR THE END OF THE TABLE        024G\n         BNH   GETKLOOP      NOT YET, KEEP LOOKING\n*\n*        KEY WAS NOT FOUND, SEND BACK A ZERO\n*\nGETKNOTF SR    R15,R15       SET UP THE ZERO AND RETURN\nGETKFND  BR    R8            JUST RETURN\nGETKCOMP CLC   0(0,R6),0(R2) EXECUTED TEXT COMPARE\n*H27      DC    H'27'         PREVIOUSLY 26.                   012G024G\nH29      DC    H'29'         PREVIOUSLY 27.                        024G\n         EJECT\n*\n*        ROUTINE TO CONVERT THE OPERATOR TEXT\n*        INTO A NUMERIC VALUE\n*\nGETOPER  LA    R15,1         NUMERIC VALUE COUNTER\nGETOLOP1 LR    R14,R15       GET THE NUMBER                        014G\n         SLA   R14,1         MULTIPLY BY 2\n         LA    R14,OPERS1(R14)     RELOCATE IT                     014G\n         CLC   0(2,R14),0(R1)      IS THIS THE TEXT?\n         BE    GETOFND       YES, RETURN THE NUMBER\n         LA    R15,1(R15)    NO, TRY THE NEXT ONE\n         CH    R15,H7        CHECK FOR THE END\n         BL    GETOLOP1      NOT THERE YET, KEEP TRYING            014G\n*        GIVE A SECOND TRY FOR OTHER WAYS OF SAYING OPER.          014G\n         LA    R15,1         NUMERIC VALUE COUNTER                 014G\nGETOLOP2 LR    R14,R15       GET THE NUMBER                        014G\n         SLA   R14,1         MULTIPLY BY 2                         014G\n         LA    R14,OPERS2(R14)     RELOCATE IT                     014G\n         CLC   0(2,R14),0(R1)      IS THIS THE TEXT?               014G\n         BE    GETOFND       YES, RETURN THE NUMBER                014G\n         LA    R15,1(R15)    NO, TRY THE NEXT ONE                  014G\n         CH    R15,H7        CHECK FOR THE END                     014G\n         BL    GETOLOP2      NOT THERE YET, KEEP TRYING            014G\n         VTOCMSG OPERERR,OPERERR2  ISSUE THE MESSAGE\n         LA    R15,1         SET THE DEFAULT OPERATOR, EQ\nGETOFND  BR    R8            THEN RETURN\n         EJECT\n*\n*        PROGRAM CONSTANTS\n*\nCOMPLIM  CLC   0(0,R2),0(R1)      COMPARE KEYWORD TO VALUE\nMOVEVDSN MVC   HOLDVDSN(0),0(R1)  MOVE VTFDSN TO WORK AREA.        016G\nMOVESDSN MVC   HOLDSDSN(0),0(R1)  MOVE STRING TO WORK AREA.        016G\nMOVECCHH MVC   DOUBLE(0),0(R2)\nCLCEXTLO CLC   2(0,R3),0(R5)\nCLCEXTHI CLC   6(0,R3),0(R5)\nCCHHOPER TM    CCHHCOMP,0\nCCHHTAB  DC    X'0040A0206080C0'  CCHHCOMP FLAGS\nOPERS1   DC    C'  EQNELTLEGTGE'                                   014G\nOPERS2   DC    C'  = \u00ac=< <=> >='                                   014G\n*    FOR  EQ, NE, LT, LE, GT, GE\nPERIOD   DC    C'.'                                                019G\nEDMASK   DC    XL16'40202020202020202020202020202120'\nBLANKS   DC    CL16'                '\nSTARS    DC    CL16'****************'\nBLKTRTAB DC    XL64'00',X'04',XL192'00'\nCAMSCON  CAMLST SEEK,*,*,*\nCOMPARE  CLC   0(0,R6),0(R2)  EXECUTED COMPARE\nDECTABLE EQU   *-C'A'   CONVERT EBCDIC HEX TO BINARY\n         DC    X'0A0B0C0D0E0F'\n         DC    (C'0'-C'F'-1)X'FF'  FILLER\n         DC    X'00010203040506070809'\n*\n*\n*\nH2       DC    H'2'                                                017G\nH3       DC    H'3'\nH4       DC    H'4'\nH7       DC    H'7'\nH8       DC    H'8'\nH10      DC    H'10'\nH12      DC    H'12'\nZERO     DC    F'0'\nF100     DC    F'100'\nH1000    DC    H'1000'\nF127     DC    F'127'\n*\n*\n*\n*        PROGRAM MESSAGES\n*\n* 001G 005G 006G 001G 005G 006G 021G BELOW 7 LINES CHANGED\nOBT3ERRM VTCMSG ' VTOCCHEK -VVVVVV- ERROR IN OBTAIN ON FMT 3 DSCB '\nOBT5ERRM VTCMSG ' VTOCCHEK -VVVVVV- ERROR IN OBTAIN ON FMT 5 DSCB '\nOBT6ERRM VTCMSG ' VTOCCHEK -VVVVVV- ERROR IN OBTAIN ON FMT 6 DSCB '\nKEYERR   VTCMSG ' VTOCCHEK - LIM, AND, OR OR SUBPARM ERROR - XXXXXX '\nCCHHLEN  VTCMSG ' VTOCCHEK - CCHH SHOULD BE 4 OR 8 HEX CHARS '\nOPERERR VTCMSG ' VTOCCHEK - OPERATOR WAS NOT EQ, NE, LT, LE, GT, OR GE'\nOPERERR2 VTCMSG '          - ASSUMING EQ'\nBADDATE  VTCMSG ' VTOCCHEK - USE JULIAN DATE (YYDDD) OR *'\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         COPY  VTCPARS                                             009G\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nCHEKWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nCAMSEEK  CAMLST SEEK,*,*,*\nCAMLEN   EQU   *-CAMSEEK\n         DS    0D\nCYLH     DS    F\n         DS    X              PAD FOR CCHH\nEQ       EQU   1              EQUATES FOR OPERATOR VALUES\nNE       EQU   2\nLT       EQU   3\nLE       EQU   4\nGT       EQU   5\nGE       EQU   6\nHWORK    DS    H\nLIMVAL   DS    F\nNUMBERL  DS    F\nNUMLENL  DS    H\nFLAGNML  DS    X\nNUMKEYL  DS    X\nNUMBER1  DS    F\nNUMLEN1  DS    H\nFLAGNM1  DS    X\nNUMKEY1  DS    X\nNUMBER2  DS    F\nNUMLEN2  DS    H\nFLAGNM2  DS    X\nNUMKEY2  DS    X\nNUMBER3  DS    F\nNUMLEN3  DS    H\nFLAGNM3  DS    X\nNUMKEY3  DS    X\nNUMBER4  DS    F                                                   013G\nNUMLEN4  DS    H                                                   013G\nFLAGNM4  DS    X                                                   013G\nNUMKEY4  DS    X                                                   013G\nNUMBER5  DS    F                                                   013G\nNUMLEN5  DS    H                                                   013G\nFLAGNM5  DS    X                                                   013G\nNUMKEY5  DS    X                                                   013G\nREFKEY   DS    F\nREFOPER  DS    F\nREFVAL   DS    A\nREFNUM   DS    A\nPDLNSAVE DS    8A             REGISTER SAVE AREA FOR PDLNUM RTN\nPDLMINUS DC    X'00'\nCHEKDBLW DS    D\nCCHHCOMP DS    X\nCCHHHIGH EQU   X'80'\nCCHHEQ   EQU   X'40'\nCCHHLOW  EQU   X'20'\nCCHHX    EQU   X'08'\nHOLDVDSN DS    CL44                 TO EXPAND VTFDSN TO 44 BYTES.  016G\nHOLDSDSN DS    CL44                 TO EXPAND STRING TO 44 BYTES.  016G\n         DS    0D\nLENWORK  EQU   *-CHEKWORK\n         VTOCMAP EQ                                                005G\n*\n*        VTOC COMMAND COMMON AREA\n*\n         VTCCOM                                                    009G\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTCFMT                                                    009G\n         SPACE 3\n         VTCPDEDS                                                  009G\n         SPACE 3\n         SPACE 3\nFMT1DSEC DSECT                                                     005G\n         IECSDSL1 (1)\nFMT3DSEC DSECT                                                     017G\n         IECSDSL1 (3)\nFMT5DSEC DSECT                                                     005G\n         IECSDSL1 (5)\nFMT6DSEC DSECT                                                     005G\n         IECSDSL1 (6)\n         CVT   DSECT=YES                                           021G\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCEXCP": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x00\\x00\\x81\"/\\x00\\x84\\x12O\\x127\\x03\\xbf\\x027\\x01\\xb3\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "1981-08-10T00:00:00", "modifydate": "1984-05-03T12:37:00", "lines": 959, "newlines": 567, "modlines": 435, "user": "ZTSOMG"}, "text": "         TITLE 'VTOCEXCP- VTOC READING SUBROUTINE'\n***********************************************************************\n*        SPACE\n* AUTHOR;  R. F. MORSE, MIT INSTRUMENTATION LABORATORY  AUG 5,1968.\n* MODIFIED;   E.BANK, FIREMAN'S FUND  MAY 15,1975.\n* MODIFIED;   R.MILLER  FIREMAN'S FUND  MAR 20,1977.\n* MODIFICATIONS\n* NUMBER    DATE    PERSON    REASON\n*  001K    072178   KOUBA     LINE 5117000 CHANGED TO UNIT=SYSALLDA\n*                              TO ALLOW ACCESS TO OUR PRODUCTION PACKS.\n*  002G    072278   GATES     CHANGE MSG MACROS TO VTCMSG TO AVOID\n*                              CONFLICT WITH EXISTING MSG MACRO.\n*  003G    012082   GATES     FIX DYNAMIC ALLOCATION RETURN CODE SAVE,\n*                              WAS GIVING ERRONEOUS DYNAMIC ALLOC RET\n*                              CODE.\n*  004G    111883   GATES     PUT VOLID IN ERROR MESSAGES.\n*  005G    112983   GATES     IF ADDR IS ZEROS ASSUME 3330V UNIT TYPE.\n*  006G    120283   GATES     IF ADDR IS NON ZEROS USE ADDRESS INSTEAD\n*                              OF SYSALLDA UNIT NAME.\n*  007G    120283   GATES     PUT VOLID IN TRACKERR MESSAGE.\n*  008G    050284   GATES     RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                              RENAME ENTER TO VTCENTER,\n*                              RENAME ALLOC TO VTCALLOC,\n*                              RENAME FREE TO VTCFREE,\n*                              RENAME DYNSPACE TO VTCDYNSP,\n*                              RENAME S99FAIL TO VTCS99NG,\n*                              VTOC MORE TRANSPORTABLE.\n*  009G    050384   GATES     EMBED THE FOLLOWING MACROS TO MAKE\n*                              VTOC MORE TRANSPORTABLE:\n*                              RCPDSN,RCPDDNRT,RCPUNIT,RCPDISP,\n*                              RCPSR2,RCPDDN,RCPUNALC,RCPDINC,\n*                              RCPVCHAR, RCPFDDN,\n*                              RCPTUBFR, AND RCPBTU.\n*\n*\n* FUNCTION; THIS SUBROUTINE READS THE VOLUME TABLE OF CONTENTS (VTOC)\n*        FROM A DIRECT-ACCESS DEVICE AND PRESENTS IT TO THE CALLER\n*        ONE RECORD (DSCB) AT A TIME.\n*\n* OPERATION; THIS ROUTINE IS A SPECIALIZED SEQUENTIAL ACCESS METHOD\n*        FOR VTOC'S.  ITS ADVANTAGE OVER ORDINARY BSAM IS THAT IT READS\n*        AN ENTIRE TRACK IN ONE REVOLUTION, THUS SAVING CONSIDERABLE\n*        TIME.  THE ROUTINE HAS THREE CALL MODES;\n*\n*        0 - READ.  RETURNS WITH THE CORE ADDRESS OF A DSCB IN THE 3RD\n*              PARAMETER.  THE CORE CONSISTS OF 148 CONSECUTIVE BYTES,\n*              CONTAINING THE COUNT (8 BYTES), KEY (44 BYTES), AND DATA\n*              (96 BYTES) FOR ONE DSCB.  RETURN CODES (REGISTER 15)\n*              ARE;\n*                      0 - NORMAL;\n*                      4 - END OF FILE, NO DATA PRESENTED;\n*                      8 - PERMANENT I/O ERROR.  THE KEY AND DATA AREAS\n*                          WILL BE SET TO ZEROS; THE COUNT AREA WILL\n*                          CONTAIN THE CORRECT CCHHR.  SINCE READING\n*                          IS DONE A TRACK AT A TIME, ALL THE DSCB'S\n*                          FOR THAT TRACK WILL BE MARKED IN ERROR.\n*                          READING MAY CONTINUE ON TO THE NEXT TRACK.\n*\n*        1 - OPEN.  THE SECOND PARAMETER SHOULD POINT TO\n*              A  6-BYTE FIELD CONTAINING THE VOLSER TO BE USED FOR THE\n*              ALLOCATION.\n*              RETURN CODES ( REG 15 )  ARE DIRECT FROM DYNAMIC ALLOC.\n*                      0 - NORMAL;\n*                      4 - UNABLE TO OPEN (PROBABLY MISSING DD CARD);\n*                      8 - DD CARD DID NOT REFER TO A DIRECT-ACCESS\n*                          DEVICE, OR DEVICE TYPE UNKNOWN.\n*\n*        2 - CLOSE.  NO ARGUMENTS ARE REQUIRED OR RETURNED.  RETURN\n*              CODE ( REG 15 ) IS FROM DYNAMIC UNALLOCATION.\n         SPACE\n* ENTRY POINTS:  ENTRY IS ALWAYS TO 'VTOCEXCP'.\n*        ARGUMENTS ARE:\n*                      1 - A(FULL-WORD BINARY ENTRY TYPE);\n*                      2 - A(PTR FOR DSCB);\n*                      3 - A(VOLSER).\n* DATA SETS:  READS VOLUME TABLE OF CONTENTS FROM ANY DIRECT-ACCESS\n*        DEVICE.  USES EXCP TO EXECUTE A CHAINED CHANNEL PROGRAM TO\n*        READ AN ENTIRE TRACK AT A TIME.\n*\n* EXTERNAL ROUTINES:  USES SUPERVISOR ROUTINE 'IECPCNVT' TO CONVERT\n*        A RELATIVE TRACK NUMBER TO AN ABSOLUTE ADDRESS.\n         SPACE\n* EXITS - NORMAL;  RETURNS TO CALLER VIA R14 WITH RETURN\n*        CODE IN REGISTER 15.       (SEE ABOVE FOR RETURN CODE VALUES.)\n*\n* TABLES AND WORK AREAS;  USES AN AREA PROVIDED BY THE CALLER FOR\n*        ITS SAVEAREA AND FOR WORKING STORAGE IMMEDIATELY FOLLOWING\n*        THE PRIOR SAVEAREA.  IT USES GETMAIN TO OBTAIN AN AREA FOR\n*        THE DSCB'S TO BE READ INTO.  THIS COULD BE AS LARGE AS\n*        8K FOR 3350'S.  IT IS FREED BY THE FINAL CALL.\n*\n* ATTRIBUTES;  REENTRANT, REFRESHABLE.\n         EJECT\n         MACRO\n         RCPDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE DSNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         AIF   ('&DSN'  EQ '*').TERM\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 50\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.TERM    MVI   S99TUKEY+1,DALTERM\n         RCPDINC 4\n         MEXIT\n.BD      RCPTUBFR DALDSNAM,50,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DALDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   BUILD THE MEMBER NAME TEXT UNIT                                 **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DALMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DALMEMBR,1,&MEMBER\n.EXIT    MEND\n         MACRO\n         RCPDDNRT\n         SPACE 1\n***********************************************************************\n**    DDNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,8            SET LENGTH FIELD\n         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n         MACRO\n         RCPUNIT &U,&V\n         GBLC  &DYNP\n         AIF   ('&U' EQ '').TVOL\n         SPACE 1\n***********************************************************************\n**       UNIT NAME TEXT UNIT                                         **\n***********************************************************************\n         RCPVCHAR DALUNIT,14,&U\n.TVOL    AIF   ('&V' EQ '').EXIT\n         SPACE 1\n***********************************************************************\n**       VOLUME SERIAL TEXT UNIT                                     **\n***********************************************************************\n         RCPVCHAR DALVLSER,14,&V\n.EXIT    MEND\n         MACRO\n         RCPDISP &DISP\n         LCLA  &I\n         LCLB  &B(4)\n         AIF   ('&DISP(1)' EQ '').TD2\n         SPACE\n***********************************************************************\n**     DATA SET INITIAL STATUS                                       **\n***********************************************************************\n&B(1)    SETB  ('&DISP(1)' EQ 'SHR')\n&B(2)    SETB  ('&DISP(1)' EQ 'NEW')\n&B(3)    SETB  ('&DISP(1)' EQ 'MOD')\n&B(4)    SETB  ('&DISP(1)' EQ 'OLD')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1\n         MNOTE 8,'&DISP(1) IS INVALID, DISP=SHR USED'\n&B(1)    SETB  1\n.OK1     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')\n         RCPDINC 8\n.TD2     AIF   ('&DISP(2)' EQ '').TD3\n         SPACE\n***********************************************************************\n**    DATA SET NORMAL DISPOSITION                                    **\n***********************************************************************\n&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2\n         MNOTE 8,'&DISP(2) IS INVALID, DISP=(,KEEP) USED'\n&B(1)    SETB  1\n.OK2     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.TD3     AIF   ('&DISP(3)' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   DATASET CONDITIONAL DISPOSITION                                 **\n***********************************************************************\n&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP(3) IS INVALID, DISP=(,,KEEP) USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVI   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n         MACRO\n         RCPSR2 &A\n         GBLB  &RCPSR2\n         GBLC  &DYNP\n         LCLC  &C\n.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY\n.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND\n.*    GENERATES MOVE INSTRUCTION FOR EXECUTE\n         AIF   ('&A' NE '').UNSAVE\n         AIF   (&RCPSR2).EXIT\n&RCPSR2  SETB  1\n         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2\n         MEXIT\n.UNSAVE  AIF   (NOT &RCPSR2).EXIT\n         B     *+10                    SKIP NEXT INSTRUCTION\n&C       SETC  '&DYNP.MVC'\n&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE\n         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2\n&RCPSR2  SETB  0\n.EXIT    MEND\n         MACRO\n         RCPDDN &DDN\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').BTU\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DALDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DALDDNAM,1,&DDN\n         MEXIT\n.BTU     RCPTUBFR DALDDNAM,14,&DDN\n         MEND\n         MACRO\n         RCPUNALC\n         SPACE 1\n***********************************************************************\n**     FREE EVEN IF PERMANENTLY ALLOCATED                            **\n***********************************************************************\n         MVI   S99TUKEY+1,DUNUNALC     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n         MACRO\n         RCPDINC &L1\n         GBLA  &DTUO,&DTUPO\n         GBLC  &DYNP\n         AIF   ('&L1' EQ '').T2\n         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT\n&DTUPO   SETA  &DTUPO+4\n&DTUO    SETA  &DTUO+&L1\n         MEXIT\n.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n         MACRO  - BUILD TEXT UNIT FROM BUFFER\n         RCPTUBFR &KEY,                TEXT UNIT KEY                   X\n               &L,                     MAXIMUM LENGTH VALUE            X\n               &C,                     TEXT UNIT                       X\n               &N=1                    TEXT UNIT NUMBER\n         GBLC  &EXECNAM\n         LCLC  &C1,&C2\n         LCLA  &I,&K\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         AIF   ('&N' EQ '' OR '&N' EQ '1').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER\n.ENDN    ANOP\n&K       SETA  K'&C\n&I       SETA  &K-1\n.LOOP1   ANOP\n&K       SETA  &K-1\n         AIF   (&K LE 0).STD\n         AIF   ('&C'(&K,1) NE '/').LOOP1\n&C2      SETC  '&C'(&K+1,&I-&K)\n&C1      SETC  '&C'(1,&K-1)\n         AIF   ('&C1'(1,1) NE '(').TC2\n&C1      SETC  '0&C1'\n.TC2     AIF   ('&C2' EQ '0000').V2B\n         AIF   ('&C2' EQ '00').V1B\n         AIF   ('&C2' EQ '0').V0B\n         AIF   ('&C2'(1,1) EQ '(').RL\n         MVI   S99TULNG+1,&C2          SET LENGTH FIELD\n         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.STD     ANOP\n&K       SETA  &L-6\n         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH\n&C1      SETC  '&C'(1,&I)              REMOVE TRAILING SLASH\n         MVC   S99TUPAR(&K),&C1        MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER\n&C1      SETC  '4+&C1'\n         AGO   .MOVE\n.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n&C1      SETC  '2+&C1'\n         AGO   .MOVE\n.V0B     SLR   R14,R14                 CLEAR FOR IC\n         IC    R14,&C1                 INSERT TEXT UNIT LENGTH\n&C1      SETC  '1+&C1'\n         AGO   .MOVE\n.RL      ANOP\n&C2      SETC  '&C2'(2,K'&C2-2)\n         LR    R14,&C2                 LOAD TEXT UNIT LENGTH\n.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD\n         BCTR  R14,0                   GET MACHINE LENGTH\n         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1\n         EX    R14,&EXECNAM            MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEND\n         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO GENERATE TEXT UNITS ENTERED\n.*  IN QUOTES\n.*\n&L       SETA  K'&PAR-2                GET LENGTH OF TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,&NUM         SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           MOVE IN LENGTH\n         MVC   S99TUPAR(&L.),=C&PAR    MOVE IN TEXT UNIT\n&L       SETA  &L+6\n         AIF   (&L/2 EQ (&L+1)/2).LOK\n&L       SETA  &L+1\n.LOK     RCPDINC &L\n         MEND\n         MACRO\n         RCPVCHAR &KEY,&LEN,&C,&N=1\n         GBLC  &DYNP\n         AIF   ('&C'(K'&C,1) EQ '/').BM\n         AIF   ('&C'(1,1) EQ '''').QM\n         RCPSR2\n         AIF   ('&C'(1,1) EQ '(').RM\n         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT\n         AGO   .STHM\n.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         MOVE IN TEXT UNIT KEY\n         AIF   ('&N' EQ '1' OR '&N' EQ '').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD\n.ENDN    RCPDINC &LEN\n         MEXIT\n.BM      RCPTUBFR &KEY,&LEN,&C\n         MEXIT\n.QM      RCPBTU &KEY,&N,&C\n         MEND\n         MACRO\n         RCPFDDN &DDN\n         GBLC &DYNP\n         SPACE\n***********************************************************************\n**        FREE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').B\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DUNDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DUNDDNAM,1,&DDN\n         MEXIT\n.B       RCPTUBFR DUNDDNAM,14,&DDN\n         MEND\n*\n*\n* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.\n         SPACE\nVTOCEXCP VTCENTER 12,8                 USE THE PROVIDED SAVEAREA   008G\n         USING VTOCWORK,R13   SET ADDRESSABILITY FOR WORK AREA\n         LR    R11,R1                  SAVE PARAMETER REGISTER\n         USING VTOCOM,R11              SET ADDRESSABILITY\n*\n*        POINT TO THE DCB FOR LATER REFERENCES\n*\n         LA    RDCB,VTOCDCB   POINT TO IT\n         USING IHADCB,RDCB    SET ADDRESSABILITY\n         SPACE\n* SELECT MODE FROM CONTENTS AT ADDRESS IN REGISTER 1.\n         SPACE\n         SR    RWA,RWA                 CLEAR THE REGISTER\n         IC    RWA,VTCEFUNC            GET CALL MODE\n         SLL   RWA,2                   MODE TIMES 4\n         B     *+4(RWA)                BRANCH ON MODE\n         SPACE\n         B     GETDSB                  MODE 0, GET A DSCB\n         B     OPEN                    MODE 1, OPEN A NEW VTOC\n         B     CLOSE                   MODE 2, CLOSE\n         B     RETURN0                 MODE 3 NOT DEFINED, NO OP\n         SPACE 3\n***********\n* RETURNS *\n***********\n         SPACE\nRETURN0  SR    R15,R15                 CLEAR THE RETURN CODE\nRETURN   VTCLEAVE EQ                   EXIT W/THE CURRENT RET CODE.008G\n         EJECT\n*********************\n* MODE 0 - GET DSCB *\n*********************\n         SPACE\n* IF END-OF-FILE WAS REACHED, RETURN AT ONCE.\n         SPACE\nGETDSB   LA    R15,4                   SET THE RETURN CODE, IN CASE\n         TM    MODESW,EOFSW            TEST END-OF-FILE BIT\n         BO    RETURN                  RETURN CODE 4 IF ON\n         SPACE\n* IF CHANNEL PROGRAM HAS BEEN STARTED, GO TO CHECK IT.  OTHERWISE,\n* ASSUME THERE IS AT LEAST ONE FULL BUFFER.\n         SPACE\n         TM    MODESW,XCPRUN           TEST IF EXCP ISSUED\n         BO    XCPTEST                 BRANCH IF SO\n         SPACE\n* SET BUFFER ADDRESS TO NEXT DSCB AND TEST IF LAST ON TRACK.  IF NOT,\n* EXIT WITH ITS ADDRESS IN R1.\n         SPACE\n         L     RWA,DSCBADR             LOAD BUFFER POINTER\n         LA    RWA,148(RWA)            ADVANCE TO NEXT DSCB\nNDXSTORE ST    RWA,DSCBADR             STORE UPDATED POINTER\n         C     RWA,DSCBLIM             TEST IF LAST DSCB IN BUFFER\n         BNL   LASTDSCB                BRANCH IF SO\n         LR    R1,RWA                  PASS ADDRESS TO USER\nGETOUT   ST    R1,DSCBADDR             STORE IT FOR THE CALLER\n         TM    MODESW,RDERR            TEST IF ERROR ON THIS TRACK\n         BZ    RETURN0                 RETURN CODE 0 IF NOT\n         LA    R15,8                   SET THE RETURN CODE\n         B     RETURN                  RETURN CODE 8 IF ERROR\n         SPACE\n* IF THIS IS THE LAST DSCB, MOVE IT TO THE INTERNAL BUFFER AND START\n* READING THE NEXT TRACK.\n         SPACE\nLASTDSCB MVC   BUFF(148),0(RWA)        MOVE LAST DSCB\n         L     RWB,TTRN                LOAD RELATIVE TRACK NUMBER\n         AL    RWB,=X'00010000'        INCREMENT TO NEXT TRACK\n         ST    RWB,TTRN\n         BAL   RRET,EXCP               START CHANNEL PROGRAM\n         LA    R1,BUFF                 LOAD DSCB ADDRESS FOR CALLER\n         B     GETOUT                  TO RETURN\n         EJECT\n* WAIT FOR CHANNEL PROGRAM COMPLETION AND TEST THE OUTCOME.\n         SPACE\nXCPTEST  WAIT  ECB=VTOCECB\n         SPACE\n         NI    MODESW,X'FF'-XCPRUN     TURN EXCP STARTED BIT OFF\n         CLI   VTOCECB,X'7F'           TEST COMPLETION CODE\n         BNE   PERMERR                 BRANCH IF ERROR\nSETDSCBA L     RWA,DSCBSTRT            SET BUFFER POINTER TO 1ST DSCB\n         B     NDXSTORE\n         SPACE\n* PERMANENT ERROR FOR THIS TRACK.  ZERO THE DSCB'S AND FILL IN THE\n* CCHHR PORTIONS OF THE COUNT AREAS.\n         SPACE\nPERMERR  OI    MODESW,RDERR            SIGNAL READ ERROR\n         NI    IOBFLAG1,X'FB'          TURN OFF BIT 5 OF IOB FLAG\n         NI    DCBIFLGS,X'3F'          TURN OFF BITS 0 AND 1\n         L     RWA,DSCBSTRT            LOAD ADDRESS OF FIRST DSCB\n         LA    RWB,1                   LOAD RECORD NUMBER\n         SPACE\nDSCBELUP XC    0(148,RWA),0(RWA)       ZERO DSCB BUFFER\n         MVC   0(4,RWA),IOBSEEK+3      INSERT CCHH IN COUNT FIELD\n         STC   RWB,4(RWA)              INSERT R IN COUNT FIELD\n         LA    RWA,148(RWA)            POINT TO NEXT BUFFER\n         LA    RWB,1(RWB)              INCREMENT RECORD NUMBER\n         C     RWA,DSCBLIM             TEST FOR LAST BUFFER\n         BNH   DSCBELUP\n         MVC   MSGTEXT1,TRACKERR                                   007G\n         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               007G\n         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          007G\n         B     SETDSCBA                BRANCH TO RESET BUFFER POINTER\n         EJECT\n*****************\n* MODE 1 - OPEN *\n*****************\n         SPACE\n* ENTER WITH A DDNAME IN SECOND PARAMETER POSITION.  PERFORM CLOSE\n* SUBROUTINE FIRST TO BE SURE EVERYTHING IS INITIALIZED.\n         SPACE\nOPEN     DS    0H\n         BAL   RRET,CLOSESUB           CALL CLOSE SUBROUTINE\n         SPACE\n*\n*        INITIALIZE THE DATA AREAS\n*\n*        FIRST THE DCB\n         MVC   VTOCDCB(DCBLEN),VTOCDCBM  SET UP THE DCB\n*\n*        SET UP THE JFCB LISTS\n*\n         LA    R1,JEXLST      POINT TO THE EXIT LIST\n         STCM  R1,B'0111',DCBEXLSA  PUT IT INTO THE DCB\n         LA    R1,JFCBAREA    POINT TO THE JFCB AREA\n         ST    R1,JEXLST      AND PUT THAT INTO THE EXIT LIST\n         MVI   JEXLST,X'87'   END OF LIST, JFCB EXIT\n         MVI   OPENLIST,X'80' END OF THE OPEN LIST TOO\n*        INITIALIZE THE IOB\n         MVC   VTOCIOB(IOBCONL),IOBCONST START IT OUT\n         LA    R1,VTOCECB     GET THE ECB ADDRESS\n         ST    R1,IOBECB      AND STORE IT INTO THE IOB\n         ST    RDCB,IOBDCB    STORE THE DCB ADDRESS INTO THE IOB\n*        INITIALIZE THE CAMLST\n         MVC   DSCBFMT4(4),DSCBCON SET UP THE FIRST WORD\n         LA    R1,IOBSEEK+3   SEEK ADDRESS\n         ST    R1,DSCBFMT4+4  INTO THE CAMLST\n         LA    R1,VOLID       VOLUME SERIAL NUMBER\n         ST    R1,DSCBFMT4+8  INTO THE CAMLST\n         LA    R1,FMT4        DSCB AREA\n         ST    R1,DSCBFMT4+12 INTO THE CAMLST\n*\n*        ALLOCATE THE VTOC OF THE CHOSEN PACK\n*\n         LA    R1,VOLID       POINT TO THE VOLUME SERIAL\n         ST    R1,VOLADDR     SAVE THE ADDRESS\n         LA    R1,6           ALSO GET THE LENGTH\n         STH   R1,VOLLEN      AND SAVE IT FOR DYNAMIC ALLOCATION MACRO\n         LA    R1,3           GET L(UNIT TYPE).                    006G\n         MVC   MSGTEXT2+8(3),ADDR  MOVE IN THE UNIT ADDRESS.       006G\nMOVEDDA  CLC   ADDR(3),=XL3'00'  WAS VOLUME MOUNTED?               005G\n         BNE   ALLOVTOC          YES, USE IT'S ADDRESS.            006G\n         LA    R1,5           GET L(UNIT TYPE).                    005G\n         MVC   MSGTEXT2+8(5),=CL5'3330V'   NO, ASSUME VUA UNIT.    005G\nALLOVTOC STH   R1,MSGTEXT2+4     SAVE L(UNIT TYPE).                005G\n         LA    R1,MSGTEXT2+8     GET A(UNIT TYPE).                 005G\n         ST    R1,MSGTEXT2       SAVE A(UNIT TYPE).                005G\n         VTCALLOC DSN=VTOCNM,VOL=VOLADDR,UNIT=MSGTEXT2,DISP=SHR,       X\n               DDNTO=DCBDDNAM,ERROR=S99FAIL                    005G008G\n         OI    MODESW,ALLOCSW          SET ALLOCATE FLAG ON\n         SPACE\n* OPEN THE VTOC.\n         SPACE\n*\n*        FIRST READ THE JFCB TO SWITCH THE DSNAME TO HEX 04'S\n*\n         RDJFCB ((RDCB)),MF=(E,OPENLIST)  READ THE JFCB\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   ERRJFCB        BAD NEWS\n         LA    R1,JFCBAREA    POINT TO THE JFCB\n         USING JFCB,R1        SET UP ADDRESSABILITY\n         MVI   JFCBDSNM,X'04' PUT IN THE FIRST ONE\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM  PROPAGATE IT\n         OI    JFCBTSDM,JFCNWRIT  DON'T REWRITE IT\n         DROP  R1\n         OPEN  ((RDCB),(INPUT)),MF=(E,OPENLIST),TYPE=J  OPEN THE VTOC\n         TM    DCBOFLGS,OPENBIT        TEST IF OPEN WORKED\n         BZ    OPENERR                 ERROR IF OPEN FAILED\n         SPACE\n* ISSUE AN OBTAIN FOR THE FIRST DSCB ON THE VTOC ( FORMAT 4 )\nD3       STM   R2,R13,EXCPSAVE         SAVE OUR REGS\n         LA    R3,EXCPSAVE    POINT TO THE REGISTER SAVE AREA\n         ICM   R0,B'1111',=X'00000100' FIRST DSCB\n         L     R1,DCBDEBAD             DEB ADDRESS\n         LA    R2,IOBSEEK              SAVE ADDRESS OF CCHHR\n         L     R15,CVT                 GET ADDRESS OF CVT\n         L     R15,CVTPCNVT(R15)       GET ADDRESS OF CONVERT ROUTINE\n         BALR  R14,R15                 GO TO CONVERT ROUTINE\n         LM    R2,R13,0(R3)            GET MY REGS BACK\n         OBTAIN DSCBFMT4               GET FORMAT 4 DSCB\n         LTR   R15,R15                 DID WE GET IT\n         BNZ   OBTERR                  NO - THEN ERROR, KEEP R15\n         CLI   DS4IDFMT,X'F4'          MAKE SURE WE HAVE FORMAT 4\n         BNE   NOTFMT4                 NO - THEN ERROR\n         IC    R15,DS4DEVDT            GET NUMBER OF DSCBS PER TRACK\n         ST    R15,NDSCBS              SAVE THE NUMBER OF DSCBS\n         OC    NDSCBS,NDSCBS           MAKE SURE NOT ZERO\n         BZ    DSCBNUM0                YES - GO TELL CALLER\n*\n* OBTAIN CORE FOR CHANNEL PROGRAM AND DSCB BUFFERS.\n         SPACE\n         LA    R0,156                  CORE FOR ONE DSCB AND ITS CCW\n         MH    R0,NDSCBS+2             TIMES NUMBER PER TRACK\n         AH    R0,=H'15'               PLUS 1 CCW AND ROUNDING\n         N     R0,=X'FFFFFFF8'         ROUND TO DOUBLE-WORD MULTIPLE\n         ST    R0,CBSIZE               SAVE SIZE OF GOTTEN CORE\n         GETMAIN  R,LV=(0)             GET TRACK BUFFERS\n         ST    R1,CBADDR               SAVE ADDRESS OF GOTTEN CORE\n         OI    MODESW,CBGOT            INDICATE CORE GOTTEN\n         SPACE\n* GENERATE CHANNEL PROGRAM.  IT CONSISTS OF A 'READ R0' ORDER WITH\n* THE SKIP FLAG ON, FOLLOWED BY A 'READ COUNT-KEY-AND-DATA' ORDER FOR\n* EACH DSCB.\n         SPACE\n         L     RWA,NDSCBS              NUMBER OF DSCB'S\n         SLL   RWA,3                   TIMES   8\n         LA    RWA,8(RWA,R1)           PLUS 8 AND BASE = 1ST BUFFER ADD\n         ST    RWA,DSCBSTRT            SAVE ADDRESS OF FIRST BUFFER\n         SPACE\n         ST    R1,IOBSTART             ADDRESS OF CHANNEL PROGRAM\n         MVC   0(8,R1),INITCCW         INSERT FIRST CCW\n         LA    RWB,8(R1)               PLACE FOR NEXT CCW\n         LA    RWC,1                   BUFFER COUNTER\n         SPACE\nCCWLOOP  MVC   0(8,RWB),READCCW        INSERT READ CCW FOR ONE DSCB\n         ST    RWA,0(RWB)              SET ITS BUFFER ADDRESS\n         MVI   0(RWB),READCKD          RESTORE COMMAND CODE\n         C     RWC,NDSCBS              TEST BUFFER COUNTER\n         BNL   LASTCCW                 BRANCH IF LAST BUFFER\n         LA    RWB,8(RWB)              INCREMENT CCW ADDRESS\n         LA    RWA,148(RWA)            INCREMENT BUFFER ADDRESS\n         LA    RWC,1(RWC)              INCREMENT BUFFER COUNTER\n         B     CCWLOOP                 DO NEXT BUFFER\n         SPACE\nLASTCCW  NI    4(RWB),X'FF'-CC         TURN OFF COMMAND CHAIN BIT\n         ST    RWA,DSCBLIM             SAVE ADDRESS OF LAST DSCB BUFFER\n         SPACE\n* SET OTHER THINGS AND START PROGRAM TO FILL BUFFER.\n         SPACE\n         SR    R0,R0\n         ST    R0,TTRN                 SET RELATIVE TRACK NUMBER TO 0\n         NI    MODESW,X'FF'-XCPRUN-RDERR-EOFSW   SET FLAGS OFF\n         BAL   RRET,EXCP               START CHANNEL PROGRAM\n         B     RETURN0                 INDICATE SUCCESSFUL OPEN\n         EJECT\n******************\n* MODE 2 - CLOSE *\n******************\n         SPACE\nCLOSE    BAL   RRET,CLOSESUB           CALL CLOSED CLOSE SUBROUTINE\n         B     RETURN0\n         SPACE 2\n* IF THE CHANNEL PROGRAM IS RUNNING, WAIT FOR IT BEFORE TAKING FURTHER\n* ACTION.\n         SPACE\nCLOSESUB DS    0H\n         TM    MODESW,XCPRUN           TEST IF CHANNEL PROGRAM RUNNING\n         BZ    NOEXCP                  BRANCH IF NOT\n         WAIT  ECB=VTOCECB             WAIT UNTIL COMPLETE\n         NI    MODESW,X'FF'-XCPRUN     TURN RUNNING SWITCH OFF\nNOEXCP   DS    0H\n         SPACE\n* CLOSE THE DCB.\n         SPACE\n         TM    DCBOFLGS,OPENBIT        TEST IF DCB OPEN\n         BZ    NOCLOSE                 BRANCH IF NOT\n         CLOSE ((RDCB)),MF=(E,OPENLIST)   CLOSE THE VTOC\nNOCLOSE  DS    0H\n         SPACE\n* FREE UP THE DDNAME AND VOLUME\n         SPACE\n         TM    MODESW,ALLOCSW          DID WE ALLOCATE A DEVICE\n         BNO   NOALLOC                 NO  - THEN NOTHING TO FREEUP\n         LA    R1,DCBDDNAM   POINT TO THE DDNAME\n         ST    R1,DDNPDL     SAVE IT FOR FREE\n         LA    R1,8          GET THE DDNAME LENGTH\n         STH   R1,DDNPDL+4   SAVE IT FOR FREE\n         VTCFREE  UNALC,DDN=DDNPDL,ERROR=S99FAIL  FREE THE DDNAME 008G\n         NI    MODESW,X'FF'-ALLOCSW    TURN OFF ALLOCATE SW\n         SPACE\nNOALLOC  DS    0H\n         SPACE\n* RELEASE CORE OBTAINED FOR DSCB BUFFERS.\n         SPACE\n         TM    MODESW,CBGOT            TEST IF CORE GOTTEN\n         BZ    NOFREE                  BRANCH IF NOT\n         LM    R0,R1,CBSIZE            LOAD SIZE AND LOCATION\n         FREEMAIN  R,LV=(0),A=(1)      FREE CORE\n         NI    MODESW,X'FF'-CBGOT      SET CORE GOTTEN BIT OFF\nNOFREE   DS    0H\n         SPACE\n         NI    MODESW,X'FF'-RDERR      CLEAR ERROR SWITCH\n         BR    RRET\n         EJECT\n****************\n* EXCP ROUTINE *\n****************\n         SPACE\n* CONVERT RELATIVE TRACK ADDRESS IN 'TTRN' TO ABSOLUTE SEEK ADDRESS IN\n* 'IOBSEEK', USING SUPERVISOR CONVERSION ROUTINE.\n         SPACE\nEXCP     DS    0H\n         STM   R2,R13,EXCPSAVE         SAVE IMPORTANT REGISTERS\n         LA    R3,EXCPSAVE             SAVE REGS FOR RESTORING AFTER CL\n         L     R0,TTRN                 LOAD RELATIVE TRACK NUMBER\n         L     R1,DCBDEBAD             LOAD DEB ADDRESS\n         LA    R2,IOBSEEK              LOAD ADDR TO RECEIVE MBBCCHHR\n         L     R15,CVT                 LOAD CVT ADDRESS\n         L     R15,CVTPCNVT(R15)       LOAD ADDR OF CONVERT ROUTINE\n         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR\n*                                      THAT CLOBBERED BASE REG\n         LM    R2,R13,0(R3)            RESTORE REGISTERS\n         LTR   R15,R15                 TEST IF EXTENT VIOLATED (RC=4)\n         BNZ   SETEOF                  IF SO, MEANS END-OF-FILE\n         CLC   DS4HPCHR,IOBSEEK+3      CHECK FOR THE LAST FMT1\n         BL    SETEOF                  IF SO, PRETEND END-OF-FILE\n         SPACE\n* ZERO ECB AND START CHANNEL PROGRAM.\n         SPACE\n         SR    R0,R0\n         ST    R0,VTOCECB              CLEAR ECB\n         NI    MODESW,X'FF'-RDERR      RESET ERROR SWITCH\n         EXCP  VTOCIOB                 START CHANNEL PROGRAM\n         OI    MODESW,XCPRUN           SET 'RUNNING' FLAG\n         BR    RRET\n         SPACE\n* WHEN EXTENT IS VIOLATED, SET END-FILE AND EXIT VIA CLOSE ROUTINE.\n         SPACE\nSETEOF   OI    MODESW,EOFSW            SET END-OF-FILE BIT\n         B     CLOSESUB                EXIT VIA CLOSE SUBROUTINE\n         EJECT\n********************************\n* DAIRFAIL ROUTINE             *\n********************************\nS99FAIL  LR    RRCODE,R15     SAVE THE RETURN CODE                 003G\n         VTCS99NG MF=(E,S99FLIST,S99FLEN)  ISSUE THE APPROP. MSG   008G\n         LR    R15,RRCODE     RELOAD THE RETURN CODE\n         B     RETURN         AND THEN EXIT\n         SPACE 3\n*\n*        VARIOUS OTHER ERROR ROUTINES\n*\nOPENERR  MVC   MSGTEXT1,OPENERRM                                   004G\n         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G\n         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G\n         B     ERRET                     THEN RETURN\nOBTERR   MVC   MSGTEXT1,OBTERRM                                    004G\n         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G\n         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G\n         B     ERRET                     THEN RETURN\nNOTFMT4  MVC   MSGTEXT1,NOTFMT4M                                   004G\n         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G\n         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G\n         B     ERRET                     THEN RETURN\nDSCBNUM0 MVC   MSGTEXT1,DSCBNUM0                                   004G\n         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G\n         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G\n         B     ERRET                     THEN RETURN\nERRJFCB  MVC   MSGTEXT1,ERRJFCBM                                   004G\n         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G\n         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G\n         B     ERRET                     THEN RETURN               004G\n*\nERRET    LA    R15,8          SET AN ERROR RETURN CODE\n         B     RETURN         THEN EXIT\n*\n         EJECT\n********************************\n* CONSTANTS, VARIABLES, ETC... *\n********************************\n         SPACE\n*        ERROR MESSAGES\n*\nOPENERRM VTCMSG ' VTOCEXCP -VVVVVV- ERROR IN OPENING VTOC '   002G 004G\nOBTERRM  VTCMSG ' VTOCEXCP -VVVVVV- ERROR IN OBTAIN '         002G 004G\nNOTFMT4M VTCMSG ' VTOCEXCP -VVVVVV- FORMAT 4 DSCB WAS NOT FIRST'   004G\nDSCBNUMM VTCMSG ' VTOCEXCP -VVVVVV- FORMAT 4 DSCB HAS DSCB S/TRK =0'\nTRACKERR VTCMSG ' VTOCEXCP -VVVVVV- A READ ERROR OCCURRED ON VTOC' 004G\nERRJFCBM VTCMSG ' VTOCEXCP -VVVVVV- A RDJFCB ERROR OCCURRED ' 002G 004G\n         SPACE\nINITCCW  CCW   READR0,0,CC+SLI+SKIP,8\nREADCCW  CCW   READCKD,0,CC,148\n         SPACE\nDSCBCON  CAMLST SEEK,0,0,0   FILLED IN WITH IOBSEEK+3, VOLID, FMT4\n         EJECT\n* DATA CONTROL BLOCK\nVTOCDCBM DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=1\nDCBLEN   EQU   *-VTOCDCBM\n         SPACE\n* IOB FOR CHANNEL PROGRAM\n         SPACE\nIOBCONST DS    0D\n         DC    X'42000000'     COMMAND CHAIN, NOT RELATED\n         DC    A(0)            ECB ADDRESS\n         DC    2F'0'\n         DC    A(0)            CHANNEL PROGRAM BEGINNING\n         DC    A(0)            DCB ADDRESS\n         DC    X'03000000'\n         DC    F'0'\n         DC    D'0'            INITIAL SEEK ADDRESS\nIOBCONL  EQU   *-IOBCONST\n* VTOC NAME FOR ALLOCATION\nVTOCNM   DC    A(VTOCNAME)\n         DC    Y(12)\nVTOCNAME DC    CL12'FORMAT4.DSCB'   DATA SET NAME FOR VTOC\n*\n*\n         LTORG\n         EJECT\n* SECTION DEFINITION AND REGISTER ASSIGNMENTS;\n         SPACE 2\nRWA      EQU   2\nRWB      EQU   3\nRWC      EQU   4\nRDCB     EQU   8              DCB POINTER\nRRCODE   EQU   10              RETURN CODE REGISTER\nRRET     EQU   9               LOCAL SUBROUTINE EXIT REGISTER\n         SPACE 3\n* TAGS FOR CHANNEL COMMANDS AND FLAG BITS:\n         SPACE\nREADR0   EQU   X'16'           READ RECORD 0\nREADCKD  EQU   X'1E'           READ COUNT, KEY, AND DATA\n         SPACE\nCC       EQU   X'40'           COMMAND CHAIN FLAG\nSLI      EQU   X'20'           SUPPRESS LENGTH INDICATION FLAG\nSKIP     EQU   X'10'           SKIP DATA TRANSFER FLAG\n         SPACE 3\n* COMMUNICATION VECTOR TABLE (CVT) DEFINITIONS:\n         SPACE\nCVT      EQU   16              LOCATION OF CVT BASE ADDRESS\nCVTPCNVT EQU   28              OFFSET TO CONVERT ROUTINE ADDRESS\n         EJECT\n*\n*        AREA USED BY VTOCREAD, PASSED VIA R13\n*\nVTOCWORK DSECT\n         DS    18F             SAVE AREA\n         SPACE\nEXCPSAVE DS    18F             INTERNAL SAVE AREA\nCBSIZE   DS    2F              SIZE AND LOCATION OF GOTTEN CORE\nCBADDR   EQU   CBSIZE+4\nNDSCBS   DS    F               NUMBER OF DSCB'S PER TRACK\nDSCBSTRT DS    F               ADDRESS OF 1ST DSCB BUFFER\nDSCBLIM  DS    F               ADDRESS OF LAST DSCB BUFFER\nDSCBADR  DS    F               ADDRESS OF CURRENT DSCB\nTTRN     DS    F               RELATIVE TRACK NUMBER\nVOLADDR  DS    A               FAKE PDL FOR ALLOC MACRO - ADDRESS\nVOLLEN   DS    H                       AND LENGTH OF VOLID\nDDNPDL   DS    2F            SPACE FOR DDNAME PDL\n         SPACE\n* MODE SWITCH AND BIT DEFINITIONS\n         SPACE\nMODESW   DC    X'00'\nCBGOT    EQU   X'80'           CORE GOTTEN FOR BUFFER\nXCPRUN   EQU   X'40'           CHANNEL PROGRAM STARTED BUT NOT CHECKED\nRDERR    EQU   X'20'           PERMANENT I/O ERROR\nEOFSW    EQU   X'10'           END-OF-FILE SENSED\nALLOCSW  EQU   X'08'           ALLOCATE VOLUME FLAG\n         SPACE\nVTOCDCB  DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=1\n         SPACE\nOPENBIT  EQU   X'10'\nOPENLIST DS    2F\n         SPACE\n* IOB FOR CHANNEL PROGRAM\n         SPACE\nVTOCIOB  DS    0D\nIOBFLAG1 DC    X'42000000'     COMMAND CHAIN, NOT RELATED\nIOBECB   DC    A(VTOCECB)\n         DC    2F'0'\nIOBSTART DC    A(0)            CHANNEL PROGRAM BEGINNING\nIOBDCB   DC    A(VTOCDCB)\n         DC    X'03000000'\n         DC    F'0'\nIOBSEEK  DC    D'0'            INITIAL SEEK ADDRESS\n         SPACE\n* EVENT CONTROL BLOCK FOR CHANNEL PROGRAM:\n         SPACE\nVTOCECB  DC    F'0'            EVENT CONTROL BLOCK\n         SPACE 3\n* INTERNAL BUFFER FOR LAST DSCB\nBUFF     DS    XL148\n         SPACE 2\nDSCBFMT4 CAMLST SEEK,IOBSEEK+3,VOLID,FMT4\n         SPACE\n*   WORK AREA FOR DYNAMIC ALLOCATION\n*                 COMMENT COUDN'T BE PUT ON FOLLOWING VTCDYNSP     008G\n         VTCDYNSP\n*                 COMMENT COUDN'T BE PUT ON PRECEEDING VTCDYNSP    008G\nS99FLIST DS    XL(S99FLEN)\n         SPACE\n*\n*        JFCB EXIT LIST AND AREA\n*\nJEXLST   DS    F\nJFCBAREA DS    XL176\n         DS    0D\nVTOCWLEN EQU   *-VTOCWORK\n         SPACE 2\n         VTCCOM                                                    008G\n         SPACE 2\n         IEFZB4D0\n         SPACE 2\n         IEFZB4D2\n         SPACE 2\n         DCBD  DEVD=DA,DSORG=PS\n         SPACE 2\nJFCB     DSECT\n         IEFJFCBN\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCFORM": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x90\\x13_\\x00\\x90 \\x8f\\x139\\x02A\\x02\\x1e\\x00)\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1990-05-15T00:00:00", "modifydate": "1990-07-27T13:39:00", "lines": 577, "newlines": 542, "modlines": 41, "user": "ZTSOMG"}, "text": "         TITLE 'VTOC COMMAND FORMAT ROUTINE'\n***********************************************************************\n*       MODIFICATIONS\n* NUMBER    DATE    PERSON    REASON\n*  001G    072278   GATES     CHANGE MSG MACROS TO VTCMSG TO AVOID\n*                              CONFLICT WITH EXISTING MSG MACRO.\n*  002G    030779   GATES     DON'T DO CATALOG SEARCH WHEN EXTENTS ARE\n*                              EQUAL TO ZERO.\n*  003G    050284   GATES     RENAME VTFMT MACRO TO VTCFMT,\n*                              RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                              RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTOCPARS MACRO TO VTCPARS,\n*                              RENAME PDEDSNAM MACRO TO VTCPDEDS,\n*                               RENAME ENTER TO VTCENTER,\n*                              VTOC MORE TRANSPORTABLE.\n*  004G    051084   GATES     SAVE UNIT TYPE.\n*  005G    051084   GATES     SAVE WHETHER LAST OPEN WAS UPDATE OR NOT.\n*  006G    052384   GATES     UPGRADE LOGIC TO WORK WITH DATASETS THAT\n*                              CONTAIN MORE THAN 16 EXTENTS.\n*  007G    110584   GATES     FIX BUG WHERE 3380 TRACK LENGTH WAS USED\n*                              AS NEGATIVE VALUE.\n*  008G    010488   GATES     PUT LOGIC IN FOR KEY LENGTH.\n*  009G    051590   GATES     UPGRADE LOGIC TO ALLOW FOR 3380 DEVICES\n*                             THAT HAVE TRACK COUNT THAT COULD LOOK\n*                             NEGATIVE.\n*  010G    072790   GATES     UPGRADE LOGIC TO ADD OPTCD CHECKING\n*                             LOGIC.\n*\n*\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND FORMAT ROUTINE                            *\n*                                                                     *\n* FUNCTION -   FORMAT THE DATA INTO THE VTFMT  DSECT FROM THE         *\n*              FORMAT 1 ( AND 3 IF NEEDED ) DSCB.  THIS ROUTINE       *\n*              ALSO GETS THE AREA TO CONTAIN THE FORMATTED            *\n*              DSCB INFORMATION.                                      *\n*                                                                     *\n* OPERATION -  FIRST GET AN AREA FROM THE CURRENT BLOCK, OR GET       *\n*              A BLOCK ( 32K ) OF STORAGE TO USE FOR THE FORMATTED    *\n*              DSCB'S.  MOVE THE DATA OVER FROM THE FORMAT 1 DSCB.    *\n*              THE SPACE CALCULATIONS MAY NEED THE FORMAT 3 DSCB.     *\n*              CATALOG INFORMATION IS OBTIANED VIA LOCATE.  SOME      *\n*              OF THE DSCB INFORMATION IS CONVERTED HERE.             *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, LOCATE         *\n*                                                                     *\n* OUTPUT -     THE FORMATTED DSCB INFORMATION WITH ITS ADDRESS IN     *\n*              FORMATAD.                                              *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         EJECT\n         MACRO\n&LAB     DS1TST  &FIELD,&VALUE,&CODE\n&LAB     TM    DS1&FIELD,X'&VALUE'  TEST IT\n         BNO   D&SYSNDX       IF NOT THERE, SKIP ALONG\n         MVC   VTF&FIELD,=CL3'&CODE'\nD&SYSNDX DS    0H\n         MEND\n*\n*\n         EJECT\nVTOCFORM VTCENTER 12,16       DO THE HOUSEKEEPING                  003G\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING FORMWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        CHECK FOR THE FIRST TIME THROUGH\n*        IF SO, PERFORM SOME INITIALIZATION\n*\n         CLI   FIRSTFRM,0     IS THIS THE FIRST TIME?\n         BNE   GETAREA        NO, KEEP ON TRUCKIN'\n*\n*        ROUTINE INITIALIZATION\n*\n         MVI   FIRSTFRM,255   NOTE THE INITIALIZATION AS DONE\n         MVC   CAMLOC(CAMLEN),CAMCONST  SET UP THE CAMLST\n*\n*        FIND OR GET AN AREA FOR THE FORMATTED DSCB\n*              FIRST SEE HOW BIG IT IS\n*\nGETAREA  L     R7,DSCBADDR    POINT TO THE DSCB\n         LA    R7,8(R7)       GET PAST THE HEADER\n         USING DSCB1,R7       SET ADDRESSABILITY\n         LH    R1,DSNLEN     GET THE DSNAME LENGTH\n         LA    R4,VTFMTL(R1)  GET THE FORMATTED DSCB LENGTH\n*\n*        SEE IF THE CURRENT BLOCK CAN HANDLE IT\n*\nFORMFIT  L     R3,VTCCURLN    GET THE CURRENT AVAILABLE\n         SR    R3,R4          SEE IF IT WILL FIT\n         BM    GOGETMN        NO, GET ANOTHER BLOCK\n*\n*        NO SWEAT, GET THE SPACE FROM THIS BLOCK\n*\n         ST    R3,VTCCURLN    STORE THE NEW ( REDUCED ) CURRENT LENGTH\n         L     R3,VTCCURAD    POINT TO THE CURRENT ADDRESS\n         LA    R5,0(R3,R4)    POINT TO THE END OF THE BLOCK\n         ST    R5,VTCCURAD    AND PLACE THE NEW AVAILABLE ADDRESS\n*\n*        NOW FILL IN THE DATA IN THE FORMATTED DSCB\n*\n         USING VTFMT,R3       SET FORMATTED DSCB ADDRESSABILITY\n         ST    R3,FORMATAD    SAVE THIS BLOCK'S ADDRESS\n         XC    VTFNEXT,VTFNEXT  CLEAR THE SORT POINTER\n         MVC   VTFVOLUM,VOLID SAVE THE VOLUME SERIAL NUMBER\n         MVC   VTFUNIT,UNITYP SAVE THE UNIT TYPE.                  004G\n         LH    R1,DSNLEN     GET THE LENGTH OF THE DSNAME\n         STH   R1,VTFDSNL     SAVE THE DSNAME LENGTH\n         BCTR  R1,0           SUBTRACT ONE FOR THE EX\n         EX    R1,MOVEDSN     MOVE IN THE DSNAME\n         MVC   VTFNOEPV,DS1NOEPV  NUMBER OF EXTENTS\n         MVC   VTFLRECL,DS1LRECL  LOGICAL RECORD LENGTH\n         MVC   VTFBLKSZ,DS1BLKL   BLOCK SIZE\n         MVC   VTFKEYLE,DS1KEYL   KEY LENGTH                       008G\n*\n*     MOVE IN THE CREATION DATE, EXPIRATION DATE, AND LAST ACCESS DATE\n*\n         MVC   VTFCREDT,DS1CREDT  MOVE OVER CREATION DATE\n         MVC   VTFEXPDT,DS1EXPDT  MOVE OVER EXPIRATION DATE\n         MVC   VTFLSTAC,DSCB1+75  MOVE OVER LAST ACCESS DATE\n*\n*        FORMAT THE RECORD FORMAT INTO CHARACTERS\n*\n*\n         MVC   VTFRECFM,BLANKS  BLANK THE FIELD TO START\n         MVC   VTFACTON,BLANKS  ANOTHER BLANK FIELD\n         MVI   VTFDSTYP,C' ' AND STILL ANOTHER\n         LA    R2,VTFRECFM    POINT TO THE FIELD\n         TM    DS1RECFM,X'C0' UNKNOWN RECFM?\n         BZ    RECFM2         YES, TROUBLE\n         TM    DS1RECFM,X'40' IS IT FIXED?\n         BNZ   RECFM3         NO, KEEP TRYING\n         MVI   0(R2),C'F'     YES, SET UP THE FIRST CHAR\n         LA    R2,1(R2)       AND BUMP THE POINTER\n         B     RECFM2         CHECK OTHER ATTRIBUTES\nRECFM3   TM    DS1RECFM,X'80' SEE IF IT'S V OR U\n         BZ    RECFM4         VARIABLE RECFM\n         MVI   0(R2),C'U'     RECFM = U\n         B     RECFM4A        ADD TO THE POINTER AND KEEP LOOKING\nRECFM4   MVI   0(R2),C'V'     VARIABLE\nRECFM4A  LA    R2,1(R2)       GET PAST THIS CHAR\nRECFM2   DS    0H\nRECFM5   TM    DS1RECFM,X'10' IS IT BLOCKED?\n         BZ    RECFM6         NO, SKIP ON\n         MVI   0(R2),C'B'     YES, SET THE SYMBOL\n         LA    R2,1(R2)       GET PAST THE CHAR\nRECFM6   TM    DS1RECFM,X'08' IS IT SPANNED OR STANDARD?\n         BZ    RECFM6A        NO\n         MVI   0(R2),C'S'     YES, SET IT\n         LA    R2,1(R2)       GET PAST THIS CHARACTER\nRECFM6A  TM    DS1RECFM,X'20' CHECK TRACK OVERFLOW\n         BZ    RECFM7         NO DICE\n         MVI   0(R2),C'T'     YES, SET IT\n         LA    R2,1(R2)       PUSH THE POINTER ON\nRECFM7   TM    DS1RECFM,X'04' IS IT ASA CONTROL\n         BZ    RECFM8         NO, SKIP ON\n         MVI   0(R2),C'A'     YES, SET IT\n         LA    R2,1(R2)       GET PAST THIS CHAR\nRECFM8   TM    DS1RECFM,X'02' HOW ABOUT MACHINE CARRIAGE CONTROL\n         BZ    RECFM9         NO, SKIP ON\n         MVI   0(R2),C'M'     YES, SET IT\nRECFM9   DS    0H\n*                                                                  010G\n*        FORMAT THE OPTCD VALUE INTO CHARACTERS                    010G\n*                                                                  010G\n*                                                                  010G\n         MVC   VTFOPTCD,BLANKS  BLANK THE FIELD TO START.          010G\n*        WRITE VALIDITY IS ONLY VALID FOR CERTAIN DSORGS           010G\n         LA    R2,VTFOPTCD    POINT TO THE FIELD.                  010G\n         TM    DS1DSORG,DS1DSGPS CHECK FOR DSORG=PS                010G\n         BO    OPTCD1         YES, CHECK FURTHER.                  010G\n         TM    DS1DSORG,DS1DSGPO CHECK FOR DSORG=PO                010G\n         BO    OPTCD1         YES, CHECK FURTHER.                  010G\n         TM    DS1DSORG,DS1DSGDA CHECK FOR DSORG=DA                010G\n         BO    OPTCD1         YES, CHECK FURTHER.                  010G\n         TM    DS1DSORG,DS1DSGIS CHECK FOR DSORG=IS                010G\n         BNO   OPTCD2         NO, DON'T CHECK FURTHER.             010G\nOPTCD1   TM    DS1OPTCD,X'80' IS IT WRITE VALIDITY?                010G\n         BZ    OPTCD2         NO, DON'T CHECK FURTHER.             010G\n         MVI   0(R2),C'W'     YES, SET UP THE FIRST CHAR.          010G\n         LA    R2,1(R2)       AND BUMP THE POINTER.                010G\n         B     OPTCD2         CHECK OTHER ATTRIBUTES.              010G\nOPTCD2   DS    0H                                                  010G\n*\n*        FORMAT THE DSORG\n*\n         MVC   VTFDSORG,=CL3'   '  CLEAR THE FIELD\n         DS1TST DSORG,80,IS   TRY ISAM\n         DS1TST DSORG,40,PS   TRY SEQUENTIAL\n         DS1TST DSORG,20,DA   TRY DIRECT ACCESS\n         DS1TST DSORG,02,PO   TRY PARTITIONED\n         CLC   DS1DSORG(2),=X'0008'  IS IT VSAM?\n         BNE   DSORG05       NO, KEEP LOOKING\n         MVC   VTFDSORG,=CL3'VS ' YES, FLAG IT\nDSORG05  TM    DS1DSORG,X'01'      IS IT UNMOVEABLE?\n         BNO   DSORG06       NO, KEEP ON TRUCKIN'\n         MVI   VTFDSORG+2,C'U'     YES, NOTE IT\nDSORG06  DS    0H\n*\n*        FORMAT THE SECONDARY ALLOCATION\n*\n         SR    R1,R1          CLEAR A WORK REGISTER\n         IC    R1,DS1SCALO    GET THE ALLOCATION FLAG\n         SRL   R1,6           REMOVE THE BOTTOM 6 BITS ( 75 CENTS )\n         IC    R2,SECAL(R1)   GET THE CHARACTER CODE\n         STC   R2,VTFSECAL    AND SAVE IT FOR LATER\n         MVC   VTFSECAM,DS1SCALO+2  SAVE THE SECONDARY AMOUNT TOO\n         MVI   VTFROUND,C'N'  SET CODE FOR NO ROUND\n         TM    DS1SCALO,X'01' SEE IF ROUND WAS SET\n         BNO   PROTFORM       NO, THE CODE IS SET RIGHT\n         MVI   VTFROUND,C'R'  YES, RESET THE CODE\n*\n*        FORMAT THE PASSWORD PROTECTION\n*\nPROTFORM TM    DS1DSIND,X'14' CHECK THE PASSWORD BITS\n         BO    PROTWRIT       WRITE PROTECT IS X'14'\n         BM    PROTREAD       READ PROTECT IS X'10'\n         MVI   VTFPROT,C'N'   NO PASSWORD PROTECTION\n         B     PROTEND        END OF PROTECTION FORMATTING\nPROTWRIT MVI   VTFPROT,C'W'   SET CODE FOR WRITE PROTECT\n         B     PROTEND        THEN CHECK OTHER ITEMS\nPROTREAD MVI   VTFPROT,C'R'   SET CODE FOR READ/WRITE PROTECT\nPROTEND  DS    0H             END OF PROTECTION FORMATTING\n*\n*        FORMAT THE OPENED FOR UPDATE FIELD\n*\nOPENFORM MVI   VTFUPDAT,C'N'     ASSUME LAST OPEN WAS INPUT.       005G\n         TM    DS1DSIND,DS1IND02 CHECK THE OPENED FOR OUTPUT INDIC.005G\n         BNO   OPENEND           LAST OPEN WAS INPUT.              005G\n         MVI   VTFUPDAT,C'Y'     INDICATE LAST OPEN WAS OUTPUT.    005G\nOPENEND  DS    0H                END OF OPEN FORMATTING.           005G\n*\n*        FORMAT THE CATLG\n*\n         MVI   VTFCATLG,C' ' INITIALIZE IT TO BLANKS\n         CLI   LOCAT,0        SHOULD WE DO THE LOCATE?\n         BE    CATEND         NO, SKIP PAST IT\n         CLI   DS1NOEPV,0     FOR ZERO EXTENTS SKIP LOCATE.        002G\n         BE    CATEND                                              002G\n*\n*        SET UP THE CAMLST\n*\n         LA    R1,DS1DSNAM    POINT TO THE DSNAME\n         ST    R1,CAMLOC+4    SAVE IT IN THE CAMLST\n         LA    R1,LOCWORK     LOCATE WORKAREA\n         ST    R1,CAMLOC+12   SAVE IT IN THE CAMLST\n         LOCATE CAMLOC        CHECK THE CATALOG\n         LTR   R15,R15        TEST THE CATALOG RETURN CODE\n         BZ    CATOK          ZERO, THERE IS AN ENTRY\n         MVI   VTFCATLG,C'N'  SET CODE FOR NOT CATALOGED\n         CH    R15,H8         SEE IF THAT'S THE CASE\n         BE    CATEND         YES, LET IT STAND\n         MVI   VTFCATLG,C'E'  CATALOG ERROR, PROBLEMS\n*\n*        CATALOG ENTRY IS THERE, SEE THAT THE VOLUME IS THIS ONE\n*\nCATOK    MVI   VTFCATLG,C'C'  SET UP AS A GOOD ENTRY\n         CLC   VOLID,LOCWORK+6  COMPARE THE VOLUME SERIAL NUMBERS\n         BE    CATEND         GOOD, WE'RE DONE\n         MVI   VTFCATLG,C'W'  WRONG VOLUME, NOT CATALOGED\nCATEND   DS    0H\n*\n*        FORMAT THE ALLOCATION AND USED QUANTITIES\n*\n         SPACE\n*        CHECK THROUGH THE EXTENTS\n         SPACE\n         SR    R2,R2          CLEAR A WORK REGISTER\n         ICM   R2,B'0001',DS1NOEPV  GET THE NUMBER OF EXTENTS\n         BZ    SPACEND        NO EXTENTS MEANS NO SPACE\n         SR    R4,R4          ZERO THE SPACE COUNTER FOR THE DATA SET\n*\n*        GET EACH EXTENT AND PROCESS IT                            006G\n*                                                                  006G\n*        SR    R6,R6          FIRST EXTENT                         006G\n*XTNEXT  LR    R5,R6          GET THE CURRENT EXTENT NUMBER        006G\n*        SLL   R5,2           MULTIPLY IT BY FOUR                  006G\n*        EX    R0,GETEXT(R5)  GET THE CORRECT ADDRESS              006G\n         SR    R6,R6         FIRST EXTENT                          006G\nEXTNEXT  LR    R5,R6         GET THE CURRENT EXTENT                006G\n         CH    R5,=H'2'      IS IT IN FMT1 DSCB?                   006G\n         BH    EXTFMT3       NO, IT'S IN FMT3 DSCB.                006G\n         SLL   R5,2          TIMES 4                               006G\n         EX    R0,GETEXT(R5) GET THE EXTENT ADDRESS INTO R5        006G\n         B     EXTGOT                                              006G\nEXTFMT3  DS    0H            MUST PROCESS FMT3 DIFFERENTLY.        006G\n         SH    R5,=H'3'      MAKE IT RELATIVE TO BEGIN FMT3.       006G\n         MH    R5,=H'10'     CALCULATE OFFSET FROM BEGIN FMT3.     006G\n         LA    R5,FMT3(R5)   GET A(CURRENT EXT).                   006G\nEXTGOT   DS    0H            GOT A(EXTENT).                        006G\n*\n*\n*        PROCESS THIS EXTENT\n*\n         USING XTDSECT,R5     SET ADDRESSABILITY\n         CLI   XTFLAGS,XTNOEXT  IS THERE AN EXTENT\n         BE    NOEXT          NO, THE EXTENT ISN'T THERE\n         CLI   XTFLAGS,XTCYLBD  IS IT ON CYLINDER BOUNDARIES\n         BNE   FORMALOC       NO, DO IT FOR CYLS AND TRACKS\n*\n*        CYLINDER BOUNDS - BE SURE THE ALLOCATION IS CORRECT\n*\n         ICM   R1,B'0011',XTLOWHH GET THE LOWER TRACK\n         BZ    LOWOK          IT'S ZERO\n         MVC   VTFACTON(6),=C'CYLERR'  NOTE THE ERROR\n         MVI   VTFACTON+6,C'L'  ON THE LOW CCHH\nLOWOK    DS    0H                                                  009G\n*OWOK    LH    R1,XTHIHH      GET THE HIGH TRACK\n         SR    R1,R1                                               009G\n         ICM   R1,3,XTHIHH    GET THE HIGH TRACK.                  009G\n         LA    R1,1(R1)       ADD ONE FOR ZERO ADDRESSING\n         CH    R1,DS4DEVSZ+2  IS THIS THE NUMBER OF TRACKS/CYL\n         BE    FORMALOC       YES, GO CALCULATE\n         MVC   VTFACTON(6),=C'CYLERR'  NOTE THE ERROR\n         MVI   VTFACTON+7,C'H'  ON THE HIGH CCHH\n*\n*        GET THE SPACE FOR NON-CYLINDER ALLOCATIONS\n*\nFORMALOC DS    0H                                                  009G\n*ORMALOC LH    R1,XTHICC      GET THE HIGH CYLINDER                009G\n         SR    R1,R1                                               009G\n         ICM   R1,3,XTHICC    GET THE HIGH CYLINDER.               009G\n*        SH    R1,XTLOWCC     MINUS THE LOW CYLINDER               009G\n         SR    R8,R8                                               009G\n         ICM   R8,3,XTLOWCC   GET THE LOW CYLINDER.                009G\n         SR    R1,R8          MINUS THE LOW CYLINDER               009G\n         MH    R1,DS4DEVSZ+2  TIMES THE NUMBER OF TRACKS PER CYLINDER\n         LH    R8,XTHIHH      GET THE HIGH TRACK\n         SH    R8,XTLOWHH     MINUS THE LOW TRACK\n         AR    R8,R1          TRACKS IN THIS EXTENT ( MINUS 1 )\n         LA    R4,1(R4,R8)    ADD THE TRACKS TOGETHER FOR THIS DATA SET\n*\n*        GET THE NEXT EXTENT\n*\nNOEXT    LA    R6,1(R6)       INCREMENT THE EXTENT COUNTER\n         CR    R6,R2          CHECK FOR THE END\n         BL    EXTNEXT        NOT YET, KEEP GOING\n*\n*        ALL THE EXTENTS ARE SUMMED REGISTER 4 HAS THE SUM\n*\n         BAL   R8,SPACUNIT    CHANGE IT TO THE APPROPRIATE UNITS\n         ST    R4,VTFALLOC    STORE IT FOR LATER\nSPACEND  DS    0H\n*\n*        GET THE TRACKS USED\n*\n         SR    R4,R4          CLEAR THE TRACK ( WOO WOO )\n         CLC   DS1LSTAR,ZEROES IS THE TRACK USED COUNTER SET?\n         BNE   USEDOK         YES, ACCEPT IT\n*        NO, SEE IF THE ZERO IS VALID\n         TM    DS1DSORG,X'40' IS IT SEQUENTIAL?\n         BO    USEDOK0        YES,THE ZERO IS VALID\n         CLC   DSORG(4),ZEROES  MAYBE IT WASN'T EVER OPENED\n         BE    USEDOK0        THEN NO SPACE USED IS OK\n         TM    DS1DSORG,X'0C' CHECK FOR AN INVALID DSORG\n         BO    USEDOK0        NO SPACE USED IS STILL OK\n         MVC   VTFUSED,FMIN1  SET A FLAG UNUSED SPACE UNKNOWN\n         B     USEDEND        USED SPACE IS SET\n*\n*        THE TRACKS USED COUNTER SEEMS OK\n*\nUSEDOK   DS    0H                                                  009G\n*SEDOK   LH    R4,DS1LSTAR    GET THE LAST TRACK USED              009G\n         SR    R4,R4                                               009G\n         ICM   R4,3,DS1LSTAR  GET THE LAST TRACK USED.             009G\n         LA    R4,1(R4)       ADD ONE ( ZERO ADDRESSING )\n         BAL   R8,SPACUNIT    CONVERT TO APPROPRIATE UNITS\nUSEDOK0  ST    R4,VTFUSED     SAVE THE AMOUNT OF SPACE USED\nUSEDEND  DS    0H\n*\n*        RETURN\n*\nFORMRET  VTCLEAVE EQ,RC=0                                          003G\n*\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*\n*\n*        CONVERT FROM TRACKS TO THE APPROPRIATE UNITS\n*              KBYTES, MBYTES, TRKS, OR CYLS\n*\nSPACUNIT LH    R1,SPACEK      GET THE UNIT TYPE\n         SLL   R1,2           MULTIPLY BY 4\n         B     *+4(R1)        THEN BRANCH TO THE CORRECT ROUTINE\n         B     SPACKB         R1=0  KILOBYTES\n         B     SPACKB         R1=1  KILOBYTES\n         B     SPACMB         R1=2  MEGABYTES\n         B     SPACTRK        R1=3  TRACKS\n         B     SPACCYL        R1=4  CYLINDERS\n*        TRACKS\nSPACTRK  BR    R8             WAS SET WHEN WE STARTED\n*        CYLINDERS\nSPACCYL  SR    R0,R0          CLEAR A REGISTER\n         LR    R1,R4          GET THE NUMBER OF TRACKS\n         LH    R4,DS4DEVSZ+2  GET THE NUMBER OF TRACKS PER CYLINDER\n         SRL   R4,2           DIVIDE BY 2 FOR ROUNDING\n         AR    R1,R4          ADD IT IN\n         LH    R4,DS4DEVSZ+2  GET THE NUMBER OF TRACKS PER CYLINDER\n         DR    R0,R4          DIVIDE TO GET ROUNDED CYLINDERS\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*        KILOBYTES\n*SPACKB   MH    R4,DS4DEVTK    MULTIPLY BY BYTES PER TRACK         007G\nSPACKB   SR    R0,R0          CLEAR WORK REG.                      007G\n         ICM   R0,3,DS4DEVTK  GET TRACK LENGTH.                    007G\n         ST    R0,WORKWORD    SAVE IT.                             007G\n         LR    R1,R4          GET VALUE TO BE MULTIPLIED.          007G\n         M     R0,WORKWORD    MULTIPLY BY BYTES PER TRACK.         007G\n         SR    R0,R0          CLEAR THE TOP\n*        LR    R1,R4          GET THE NUMBER TO DIVIDE             007G\n         A     R1,F500        ADD UP TO ROUND\n         D     R0,F1000       DIVIDE TO GET KILOBYTES\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*        MEGABYTES\n*SPACMB   MH    R4,DS4DEVTK    MULTIPLY BY BYTES PER TRACK         007G\nSPACMB   SR    R0,R0          CLEAR WORK REG.                      007G\n         ICM   R0,3,DS4DEVTK  GET TRACK LENGTH.                    007G\n         ST    R0,WORKWORD    SAVE IT.                             007G\n         LR    R1,R4          GET VALUE TO BE MULTIPLIED.          007G\n         M     R0,WORKWORD    MULTIPLY BY BYTES PER TRACK.         007G\n         SR    R0,R0          CLEAR THE TOP\n*        LR    R1,R4          GET THE NUMBER TO DIVIDE             007G\n         A     R1,F500000     ADD UP TO ROUND\n         D     R0,F1000000    DIVIDE TO GET MEGABYTES\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*\n*        GET A NEW BLOCK OF MAIN STORAGE\n*\nGOGETMN  GETMAIN R,LV=VTCGETMS  GET SOME\n         ST    R1,VTCCURAD    SET UP THE AVAILABLE ADDRESS\n         LA    R2,VTCGETMS/1024   GET THE SIZE OF THE BLOCK IN K\n         SLL   R2,10          GET IT INTO BYTES ( TIMES 1024 )\n         ST    R2,VTCCURLN    SO THE FORMATTED DSCB'S CAN USE IT\n*\n*        SAVE THE BLOCK ADDRESS IN THE VTCGETMN TABLE\n*\n         LA    R2,VTCGETMN    POINT TO THE TABLE\n         LA    R5,VTCGETMX    GET THE NUMBER OF ENTRIES IN THE TABLE\nGOGETTAB ICM   R3,B'1111',0(R2) GET THIS ENTRY\n         BNZ   GOGETINC       IF NOT ZERO, KEEP LOOKING\n         ST    R1,0(R2)       SAVE THE NEW ENTRY\n         B     FORMFIT        THEN GO ALLOCATE A FORMATTED DSCB\n*\n*        THIS ENTRY WAS TAKEN, GET THE NEXT ONE\n*\nGOGETINC LA    R2,4(R2)       POINT TO THE NEXT ENTRY\n         BCT   R5,GOGETTAB    COUNT AND LOOP\n*\n*        TABLE OVERFLOW  - ISSUE ERROR MSG\n*              SET A FLAG TO STOP INPUT\n*\n         VTOCMSG TABOVFLW,TABOVSEC  ISSUE A MESSAGE\n         MVI   TABFULL,255    SET A STOP FLAG\n         B     FORMRET        RETURN FROM FORMATTING\n         EJECT\n*\n*\n*\n*        PROGRAM CONSTANTS\n*\n         SPACE\n*        INSTRUCTIONS EXECUTED TO GET THE NEXT EXTENT\nGETEXT   LA    R5,DS1EXT1        1ST EXTENT\n         LA    R5,DS1EXT2        2ND EXTENT\n         LA    R5,DS1EXT3        3RD EXTENT\n*        LA    R5,DS3EXTNT+00    4TH EXTENT                        006G\n*        LA    R5,DS3EXTNT+10    5TH EXTENT                        006G\n*        LA    R5,DS3EXTNT+20    6TH EXTENT                        006G\n*        LA    R5,DS3EXTNT+30    7TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+00    8TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+10    9TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+20   10TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+30   11TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+40   12TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+50   13TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+60   14TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+70   15TH EXTENT                        006G\n*        LA    R5,DS3ADEXT+80   16TH EXTENT                        006G\nMOVEDSN  MVC   VTFDSN(0),DS1DSNAM   EXECUTED COMPARE\nZEROES   DC    2F'0'\nFMIN1    DC    F'-1'\nF500     DC    F'500'\nF1000    DC    F'1000'\nF500000  DC    F'500000'\nF1000000 DC    F'1000000'\nBLANKS   DC    CL8'                '\nCAMCONST CAMLST NAME,*,,*\nH8       DC    H'8'\nSECAL    DC    C'ABTC'        SECONDARY ALLOCATION CODES\n*              ABSOLUTE TRK, BLOCKS, TRACKS, CYLINDERS\n*\n*\n*\n*\n*        PROGRAM MESSAGES\n*\nTABOVFLW VTCMSG ' THE VTOC TABLES (1.6 MEG) ARE NOT LARGE ENOUGH TO HANX\n               DLE THIS REQUEST'                                   001G\nTABOVSEC VTCMSG ' PARTIAL PROCESSING WILL CONTINUE '               001G\n*\n*\n*\n*\n*\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         COPY  VTCPARS                                             003G\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nFORMWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nFIRSTFRM DS    X              INITIALIZATION FOR THIS ROUTINE\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nCAMLOC   CAMLST NAME,*,,*\nCAMLEN   EQU   *-CAMLOC\n         DS    0D\nLOCWORK  DS    265C\n         SPACE\n         DS    0D\nWORKWORD DS    F                                                   007G\nLENWORK  EQU   *-FORMWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         VTCCOM                                                    003G\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTCFMT                                                    003G\n         SPACE 3\n         VTCPDEDS                                                  003G\n         SPACE 3\n         SPACE 3\nDSCB1    DSECT\n         IECSDSL1 1\n         SPACE 3\n*        FORMAT 1 AND 3 EXTENT DESCRIPTION\nXTDSECT  DSECT\nXTFLAGS  DS    X\nXTNOEXT  EQU   X'00'          NO EXTENT\nXTDATAB  EQU   X'01'          DAT BLOCKS\nXTOVFLW  EQU   X'02'          OVERFLOW AREA\nXTINDEX  EQU   X'04'          INDEX AREA\nXTUSRLAB EQU   X'40'          USER LABEL EXTENT\nXTSHRCYL EQU   X'80'          SHARING CYLINDERS\nXTCYLBD  EQU   X'81'          CYLINDER BOUNDARIES\nXTSEQ    DS    X              EXTENT SEQUENCE NUMBER\nXTLOWCC  DS    H              LOWER CYLINDER\nXTLOWHH  DS    H              LOWER TRACK\nXTHICC   DS    H              UPPER CYLINDER\nXTHIHH   DS    H              UPPER TRACK\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCMAP": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x855O\\x00\\x875\\x7f\\x10S\\x01\\x82\\x01\\x80\\x00\\x02\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-12-20T00:00:00", "modifydate": "1987-12-23T10:53:00", "lines": 386, "newlines": 384, "modlines": 2, "user": "ZTSOMG"}, "text": "         TITLE 'VTOCMAP - VTOC MAPPING SUBROUTINE'\n***********************************************************************\n*        SPACE\n* AUTHOR;  MATT GATES\n* NUMBER    DATE    PERSON    REASON\n*  000G    110883   GATES     FIRST WRITING OF CODE.\n*  001G    050284   GATES     RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                               RENAME ENTER TO VTCENTER,\n*                              VTOC MORE TRANSPORTABLE.\n*  002G    052384   GATES     UPGRADE LOGIC TO HANDLE DATASETS WITH\n*                              MORE THAN 16 EXTENTS.\n*  003G    111485   GATES     FIX BUG THAT CAUSED LOOP WHEN MESSAGE\n*                              \"VTOCMAP NO MORE STORAGE ....\" ISSUED.\n*  004G    122085   GATES     PUT CURRENT VOLID IN \"VTOCMAP NO MORE\n*                              STORAGE ....\" MESSAGE.\n*  ???G    ??????   GATES     MIGHT NEED TO CHECK REUSE OF STORAGE\n*                              THAT WAS GETMAINED.\n*\n*\n*\n*\n* OPERATION; THIS ROUTINE IS USED TO MAP THE DATASET LOCATIONS ON A\n*        VOLUME. THE ROUTINE HAS TWO CALL MODES;\n*\n*        0 - OPEN WILL GET THE MEMORY NECESSARY FOR THE INTERNAL MAP\n*              TABLE.\n*        1 - ADD. WILL ADD THE CURRENT EXTENTS AND DSNAME TO AN\n*              INTERNAL MAP TABLE. THE DSNAMES START FROM THE TOP\n*              AND THE EXTENTS START FROM THE BOTTOM.\n*                     RETURN CODE = 0    ALL OK\n*                     RETURN CODE = 8    NOT ENOUGH STORAGE IN TABLE\n*        2 - CLOSE. WILL CAUSE ALL THE ENTRIES CURRENTLY IN THE TABLE\n*              TO BE PRINTED OUT. THIS SHOULD BE CALLED AT THE END\n*              OF THE CURRENT VTOC.\n*        3 - SORT. WILL CAUSE ALL THE ENTRIES CURRENTLY IN THE TABLE\n*              TO BE SORTED ASCENDING ON START CCHH.\n         SPACE\n* ENTRY POINTS:  ENTRY IS ALWAYS TO 'VTOCMAP'.\n*        ARGUMENTS ARE:\n*                      1 - THE FORMAT1 DSCB\n*                      2 - THE FORMAT3 DSCB\n* EXTERNAL ROUTINES:\n*\n         SPACE\n* EXITS - NORMAL;  RETURNS TO CALLER VIA R14 WITH RETURN\n*        CODE IN REGISTER 15.       (SEE ABOVE FOR RETURN CODE VALUES.)\n*\n* TABLES AND WORK AREAS;  USES AN AREA PROVIDED BY THE CALLER FOR\n*        ITS SAVEAREA AND FOR WORKING STORAGE IMMEDIATELY FOLLOWING\n*        THE PRIOR SAVEAREA.  IT USES GETMAIN TO OBTAIN AN AREA FOR\n*        THE MAP TABLE TO BE BUILT.  THIS COULD BE AS LARGE AS\n*        8K FOR 3350'S.  IT IS FREED BY THE FINAL CALL.\n*\n* ATTRIBUTES;  REENTRANT, REFRESHABLE.\n         EJECT\n         MACRO\n&NAME    VTCEXT1 &OPT,&NUMB\n&NAME    LA    R5,&OPT\n         AIF   ('&NUMB'(1,1) EQ '(').CONTA                         002G\n         LA    R6,&NUMB\n         AGO   .CONTB                                              002G\n.CONTA   ANOP                                                      002G\n         LR    R6,&NUMB                                            002G\n         AGO   .CONTB                                              002G\n.CONTB   ANOP                                                      002G\n         BAL   R14,CNVTEXT1\n         MEND\n         MACRO\n&NAME    VTCEXT2 &OPT,&NUMB\n&NAME    LA    R5,&OPT\n         AIF   ('&NUMB'(1,1) EQ '(').CONTA                         002G\n         LA    R6,&NUMB\n         AGO   .CONTB                                              002G\n.CONTA   ANOP                                                      002G\n         LR    R6,&NUMB                                            002G\n         AGO   .CONTB                                              002G\n.CONTB   ANOP                                                      002G\n         BAL   R14,CNVTEXT2\n         MEND\n* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.\n         SPACE\nVTOCMAP  VTCENTER 12,8                 USE THE PROVIDED SAVEAREA   001G\n         USING VTOCWORK,R13   SET ADDRESSABILITY FOR WORK AREA\n         LR    R11,R1                  SAVE PARAMETER REGISTER\n         USING VTOCOM,R11              SET ADDRESSABILITY\n         SPACE\n* SELECT MODE FROM CONTENTS AT ADDRESS IN REGISTER 1.\n         SPACE\n         SR    RWA,RWA                 CLEAR THE REGISTER\n         IC    RWA,VTCMFUNC            GET CALL MODE\n         SLL   RWA,2                   MODE TIMES 4\n         B     *+4(RWA)                BRANCH ON MODE\n         SPACE\n         B     OPENRTN                 MODE 0, GET MEMORY\n*                                              OPEN MAP TABLE.\n         B     ADDRTN                  MODE 1, ADD MAP ENTRY.\n         B     CLOSRTN                 MODE 2, CLOSE MAP TABLE\n*                                              FREE MEMORY.\n         B     SORTRTN                 MODE 3, SORT TABLE ENTRIES.\n         SPACE 3\n***********\n* RETURNS *\n***********\n         SPACE\nRETURN0  SR    R15,R15                 CLEAR THE RETURN CODE\nRETURN   VTCLEAVE EQ                   EXIT W/CURRENT RET CODE.    001G\n         EJECT\n*************************************************\n* MODE 0 - OPEN, GETMAIN THE INTERNAL MAP TABLE *\n*************************************************\n         SPACE\n*   SAVE AREA HAS DSN'S SAVED AT THE TOP GOING DOWN AND THE\n*    EXTENT INFO SAVED AT THE BOTTOM GOING UP.\n*\nOPENRTN  EQU   *\n         GETMAIN R,LV=VTCMPGET\n         ST    R1,VTCMPEXT    SAVE A(AREA FOR EXTENT SAVE).\n         ST    R1,VTCMPMEM    SAVE A(BEGINNING OF MAP AREA).\n         MVI   0(R1),X'FF'    INDICATE END OF EXTENTS INFO.\n         CNOP  0,4            ALIGN FOR BAL IF NECESSARY.\n         BAL   R2,GOTMAIN     GET L(GETMAINED AREA).\n         DC    A(VTCMPGET)    GET L(GETMAINED AREA).\nGOTMAIN  L     R2,0(R2)       GET L(GETMAINED AREA).\n         AR    R1,R2          CALC END OF GETMAINED AREA.\n         ST    R1,VTCMPDSN    SAVE A(AREA FOR DSNAME SAVE).\n         B     RETURN0        THEN RETURN\n         EJECT\n**************************\n* MODE 1 - ADD MAP ENTRY *\n**************************\n         SPACE\nADDRTN   EQU   *\n         L     R2,DSCBADDR             GET A(FMT1 DSCB).\n         LA    R2,8(R2)                BUMP PAST HEADER.\n         USING FMT1DSEC,R2             TELL ASSEMBLER\n         L     R3,VTCMPDSN             GET A(PREV DSN SAVED).\n         SH    R3,=H'44'               CALC THIS DSN SAVE AREA.\n         MVC   0(44,R3),DS1DSNAM       MOVE DSN TO SAVE AREA\n         ST    R3,VTCMPDSN              AND SAVE ADDR.\n         CLI   DS1FMTID,C'4'           IS IT THE VTOC AREA?\n         BNE   NOTVTOC                 NO, TRY NEXT.\n         VTCEXT1 DS1EXT1,1             CONVERT THE VTOC EXTENT.\n         LTR   R15,R15                 WAS CONVERSION OK?\n         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.\n         B     ENDEXT                  ONLY 1, QUIT.\nNOTVTOC  CLI   DS1FMTID,C'5'           IS IT THE FREE SPACE?\n         BNE   NOTFREE                 NO, TRY NEXT.\n         DROP  R2\n         USING FMT5DSEC,R2             TELL ASSEMBLER\n         SR    R7,R7                   CLEAR EXTENT COUNT.\n         VTCEXT2 DS5AVEXT,8            CONVERT FIRST 8 EXTENTS.\n         LTR   R15,R15                 WAS CONVERSION OK?\n         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.\n         VTCEXT2 DS5MAVET,18           CONVERT LAST 18 EXTENTS.\n         LTR   R15,R15                 WAS CONVERSION OK?\n         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.\n         B     ENDEXT                  GOT ALL GOOD EXTENTS.\nNOTFREE  EQU   *\n         DROP  R2\n         USING FMT1DSEC,R2             TELL ASSEMBLER\n         CLI   DS1FMTID,C'6'           IS IT THE SPLIT AREA?\n         BNE   ITSAFMT1                NO, TRY NEXT.\n         DROP  R2\n         USING FMT6DSEC,R2             TELL ASSEMBLER\n         VTCEXT2 DS6EXTAV,7            CONVERT FIRST 7 EXTENTS.\n         LTR   R15,R15                 WAS CONVERSION OK?\n         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.\n         VTCEXT2 DS6MAVET,18           CONVERT LAST 18 EXTENTS.\n         LTR   R15,R15                 WAS CONVERSION OK?\n         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.\n         B     ENDEXT                  ONLY 1, QUIT.\nITSAFMT1 EQU   *\n         DROP  R2\n         USING FMT1DSEC,R2             TELL ASSEMBLER\n         VTCEXT1 DS1EXT1,3             CONVERT FIRST 3 EXTENTS.\n         LTR   R15,R15                 WAS CONVERSION OK?\n         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.\n*        CLC   DS1PTRDS,=5X'00'        IS THERE A FORMAT 3?        002G\n*        BE    ENDEXT                  NO, SKIP CONVERTING OTHERS. 002G\n*        VTCEXT1 DS3EXTNT,4            CONVERT NEXT 4 EXTENTS.     002G\n*        LTR   R15,R15                 WAS CONVERSION OK?          002G\n*        BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR002G\n*        VTCEXT1 DS3ADEXT,9            CONVERT NEXT 9 EXTENTS.     002G\n         XR    R6,R6                   CLEAR WORK REG.             002G\n         ICM   R6,X'0001',DS1NOEPV     GET NUMBER OF EXTENTS.      002G\n         CH    R6,=H'3'                IS THERE MORE THAN 3 EXTENTS002G\n         BNH   RETURN0                 NO, FMT 1 WAS ENOUGH.       002G\n         SH    R6,=H'3'                YES, SUBT ONES IN FMT1.     002G\n         LA    R15,8                   SET ERROR RET CODE IN CASE. 002G\n         BM    RETURN                  THIS SHOULDN'T HAPPEN.      002G\n         VTCEXT1 FMT3,(R6)             CONVERT REST OF EXTENTS.    002G\n         LTR   R15,R15                 WAS CONVERSION OK?\n         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.\nENDEXT   B     RETURN0\n         EJECT\n******************\n* MODE 2 - CLOSE *\n******************\n         SPACE\nCLOSRTN  EQU   *\n         L     R1,VTCMPMEM    GET A(GOTMAINED AREA).\nFREEMAIN FREEMAIN R,LV=VTCMPGET,A=(1)\n         B     RETURN0        THEN RETURN\n*\nERRET    LA    R15,8          SET AN ERROR RETURN CODE\n         B     RETURN         THEN EXIT\n*\n         EJECT\n********************\n* SERVICE ROUTINES *\n********************\n         SPACE\n***************************************************************\n* ROUTINES TO CONVERT EXTENTS TO TRACKS AND SAVE IN TRACK MAP *\n*    CNVTEXT1 IS FOR FMT1, FMT3, AND FMT4 DSCBS               *\n*    CNVTEXT2 IS FOR FMT5 AND FMT6 DSCBS                      *\n*    INPUTS:  R5=A(EXT INFO TO BE CONVERTED)                  *\n*             R6=NUMBER OF EXTENTS THIS TIME THRU             *\n***************************************************************\n         SPACE\nCNVTEXT1 L     R4,VTCMPEXT             WHERE TO SAVE EXTENT INFO.\n         MVI   0(R4),X'FF'             INDICATE END OF EXT INFO.\n         USING OEXTDSEC,R4             TELL ASSEMBLER.\n         USING IEXTDS1,R5              TELL ASSEMBLER.\nCNVTNXT1 CLI   0(R5),X'00'             DOES EXTENT DESCRIBE ANYTHING?\n         BE    NEXTEXT1                NO, CHECK NEXT EXTENT.\n         ST    R3,OEXTADSN             SAVE A(ASSOCIATED DSN ENTRY).\n         MVC   OEXTNUMB(1),IEXTNUMB    MOVE EXTENT NUMBER.\n         MVC   DOUBLE(2),IEXTSTRT      LOW LIM. OF EXT., CC OF CCHH\n         LH    R9,DOUBLE\n         MH    R9,DS4DEVSZ+2           CONVERT CC TO ACTUAL TRACK NO.\n         MVC   DOUBLE(2),IEXTSTRT+2    LOW LIM. OF EXT., HH OF CCHH\n         AH    R9,DOUBLE               ACTUAL TRK OF START OF EXTENT\n         STH   R9,OEXTSTRT             SAVE IT.\n         MVC   DOUBLE(2),IEXTEND       UPR LIM. OF EXT., CC OF CCHH\n         LH    R8,DOUBLE\n         MH    R8,DS4DEVSZ+2           CONVERT CC TO ACTUAL TRACK NO.\n         MVC   DOUBLE(2),IEXTEND+2     UPR LIM. OF EXT., HH OF CCHH\n         AH    R8,DOUBLE               ACTUAL TRK OF END OF EXTENT\n         STH   R8,OEXTEND              SAVE IT.\n         SR    R8,R9                   CALC L(EXTENT) IN TRKS.\n         LA    R8,1(R8)                ALWAYS ONE LESS THAN ACTUAL.\n         STH   R8,OEXTLEN              SAVE IT.\n         MVI   OEXTL(R4),X'FF'         INDICATE END OF EXTENT INFO.\n         LA    R4,OEXTL(R4)            UPDATE POINTER TO NEXT OUT EXT.\nNEXTEXT1 LA    R5,IEXTL1(R5)           UPDATE POINTER TO NEXT IN EXT.\n         LR    R8,R3                   DONT KILL R3.\n         SR    R8,R4                   DID TOP AND BOTTOM MEET YET?\n         BM    ERRSTOR                 YES, ERROR NO STORAGE LEFT.\n         BCT   R6,CNVTNXT1             CONVERT NUMB EXTENTS REQUESTED\n         ST    R4,VTCMPEXT             SAVE A(NEXT EXT SAVE AREA).\n         SR    R15,R15                 ZERO RETURN CODE.\n         BR    R14\n         SPACE\nCNVTEXT2 L     R4,VTCMPEXT             WHERE TO SAVE EXTENT INFO.\n         MVI   0(R4),X'FF'             INDICATE END OF EXT INFO.\n         USING OEXTDSEC,R4             TELL ASSEMBLER.\n         USING IEXTDS2,R5              TELL ASSEMBLER.\nCNVTNXT2 CLC   IEXTRTRK(2),=H'0'       DOES EXTENT DESCRIBE ANYTHING?\n         BE    CNVTRET2                NO, SKIP THIS DSCB.\n         ST    R3,OEXTADSN             SAVE A(ASSOCIATED DSN ENTRY).\n         STC   R7,OEXTNUMB             SAVE EXTENT NUMBER.\n         MVC   DOUBLE(2),IEXTRTRK      GET ACTUAL TRK START OF EXT.\n         LH    R9,DOUBLE\n         STH   R9,OEXTSTRT             SAVE ACTUAL TRK START OF EXT.\n         MVC   DOUBLE(2),IEXTCYL       GET NUMBER OF CYLS.\n         LH    R8,DOUBLE\n         MH    R8,DS4DEVSZ+2           CONVERT CC TO NUMBER TRKS.\n         CLI   DS1FMTID,C'6'           IS IT A FORMAT6?\n         BE    CNVTF62                 YES, NO TRKS INFO.\n         MVI   DOUBLE,0                CLEAR FIRST BYTE FOR ADD.\n         MVC   DOUBLE+1(1),IEXTTRK     GET REST OF TRKS.\n         AH    R8,DOUBLE               ADD IN REST OF TRKS.\nCNVTF62  STH   R8,OEXTLEN              SAVE L(EXTENT IN TRKS).\n         AR    R8,R9                   CALC ACTUAL TRK END OF EXTENT.\n         BCTR  R8,0                    SUBT ONE.\n         STH   R8,OEXTEND              SAVE IT.\n         MVI   OEXTL(R4),X'FF'         INDICATE END OF EXTENT INFO.\n         LA    R4,OEXTL(R4)            UPDATE POINTER TO NEXT OUT EXT.\nNEXTEXT2 LA    R5,IEXTL2(R5)           UPDATE POINTER TO NEXT IN EXT.\n         LR    R8,R3                   DONT KILL R3.\n         SR    R8,R4                   DID TOP AND BOTTOM MEET YET?\n         BM    ERRSTOR                 YES, ERROR NO STORAGE LEFT.\n         LA    R7,1(R7)                BUMP EXTENT NUMBER.\n         BCT   R6,CNVTNXT2             CONVERT NUMB EXTENTS REQUESTED\nCNVTRET2 ST    R4,VTCMPEXT             SAVE A(NEXT EXT SAVE AREA).\n         SR    R15,R15                 ZERO RETURN CODE.\n         BR    R14\n*ERRSTOR  VTOCMSG NOSTORM               PUT MESSAGE OUT.           004G\nERRSTOR  MVC   MSGTEXT2,NOSTORM        SET UP THE MESSAGE.         004G\n         MVC   MSGTEXT2+65(6),VOLSER   AND ADD THE VOLSER.         004G\n         VTOCMSG MSGTEXT2              PUT MESSAGE OUT.            004G\n         LA    R15,8                   SET AN ERROR RETURN CODE.\n*        BR    R14                                                 003G\n         B     RETURN                                              003G\n         SPACE\n**************************************************\n* MODE 3 - SORT THE EXTENTS INTO ASCENDING ORDER *\n**************************************************\n         SPACE\nSORTRTN  EQU   *\n*\n*        ALL SORTING IS ON STARTING CCHH OF EXTENTS\n*\n         L     R4,VTCMPMEM         GET A(FIRST ENTRY).\n         CLI   00(R4),X'FF'        IS THIS THE LAST ENTRY?\n         BE    SORTEND             YES, QUIT.\n         NI    VTCMFUNC,X'7F'      INDICATE LIST NOT REARRANGED.\nSORTIT   CLI   12(R4),X'FF'        IS THIS THE LAST ENTRY?\n         BE    SORTLAST            YES, SEE IF MORE SORT NEEDED.\n         CLC   6(2,R4),18(R4)      COMPARE CURRENT VS NEXT ENTRY.\n         BE    SORTNEXT              START CCHH SAME COMPARE NEXT.\n         BL    SORTNEXT              CURR START CCHH LOW COMPARE NEXT.\n*                                    CURR START CCHH HIGH EXCHANGE THEM\n         XC    0(12,R4),12(R4)           EXCHANGE\n         XC    12(12,R4),0(R4)           EXCHANGE\n         XC    0(12,R4),12(R4)           EXCHANGE\n         OI    VTCMFUNC,X'80'      INDICATE LIST REARRANGED THIS PASS.\nSORTNEXT LA    R4,12(R4)           MAKE NEXT ENTRY CURRENT ENTRY.\n         B     SORTIT              THEN CONTINUE SORTING LIST.\nSORTLAST TM    VTCMFUNC,X'80'      WAS THE LIST REARRANGED THIS PASS?\n         BNO   SORTEND             NO, WE ARE FINISHED SORTING.\n         B     SORTRTN             GO TO START SORT FROM BEGINNING.\nSORTEND  B     RETURN0             RETURN TO CALLER.\n         EJECT\n********************************\n* CONSTANTS, VARIABLES, ETC... *\n********************************\n         SPACE\n*        ERROR MESSAGES\n*\n*NOSTORM  VTCMSG ' VTOCMAP - NO MORE STORAGE TO SORT EXTENTS QUITTING'\nNOSTORM  VTCMSG ' VTOCMAP - NO MORE STORAGE TO SORT EXTENTS QUITTING DUX\n               RING VOLUME VVVVVV  '                              004G\n         LTORG\n         EJECT\n* SECTION DEFINITION AND REGISTER ASSIGNMENTS;\n         SPACE 2\nRWA      EQU   2\nRWB      EQU   3\nRWC      EQU   4\nRDCB     EQU   8              DCB POINTER\nRRCODE   EQU   10              RETURN CODE REGISTER\nRRET     EQU   9               LOCAL SUBROUTINE EXIT REGISTER\n         SPACE 3\n         EJECT\n         SPACE 2\n         VTCCOM                                                    001G\n         SPACE 2\n*\n*        AREA USED BY VTOCREAD, PASSED VIA R13\n*\nVTOCWORK DSECT\n         DS    18F             SAVE AREA\n         SPACE\nMAPSAVE  DS    18F             INTERNAL SAVE AREA\nVTOCWLEN EQU   *-VTOCWORK\nIEXTDS1  DSECT\n         DS    X               EXTENT TYPE\nIEXTNUMB DS    X               EXTENT NUMBER\nIEXTSTRT DS    4X              CCHH START\nIEXTEND  DS    4X              CCHH END\nIEXTL1   EQU   *-IEXTDS1\nIEXTDS2  DSECT\nIEXTRTRK DS    2X              RELATIVE TRK OF START\nIEXTCYL  DS    2X              NUMBER OF CYLS\nIEXTTRK  DS    0X              NUMBER OF TRKS\nIEXTDSS  DS    1X              NUMBER OF DSN SHARING SPACE\nIEXTL2   EQU   *-IEXTDS2\nOEXTDSEC DSECT\n         DS    0F\nOEXTADSN DS    AL4             A(ASSOCIATED DSN ENTRY IN MAP TABLE)\n         DS    X               FILLER\nOEXTNUMB DS    X               EXTENT NUMBER\nOEXTSTRT DS    2X              CCHH START\nOEXTEND  DS    2X              CCHH END\nOEXTLEN  DS    2X              EXTENT LENGTH\nOEXTL    EQU   *-OEXTDSEC\nFMT1DSEC DSECT\n         IECSDSL1 (1)\nFMT5DSEC DSECT\n         IECSDSL1 (5)\nFMT6DSEC DSECT\n         IECSDSL1 (6)\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VTOCMSG": {"ttr": 3076, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x831\\x1f\\x00\\x84\\x12O\\x11(\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1983-11-07T00:00:00", "modifydate": "1984-05-03T11:28:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "ZTSOMG"}, "text": "         MACRO\n&LAB     VTOCMSG &MSG1,&MSG2    FIRST LEVEL MESSAGE, OPTIONAL SECOND\n&LAB     LA    R1,&MSG1       POINT TO THE FIRST MESSAGE\n         AIF   ('&MSG2' EQ '').NOSEC  IF NO SECOND LEVEL MSG\n         LA    R0,&MSG2       POINT TO THE SECOND MESSAGE\n         AGO   .SETMSG        SET UP THE MESSAGES\n.NOSEC   SR    R0,R0          NO SECOND LEVEL MESSAGE\n.SETMSG  STM   R0,R1,MSGADDRS SAVE THE MESSAGE ADDRESSES\n*        THEN JUST CALL THE MESSAGE ISSUING ROUTINE\n         VTCALL MSG           AWAY WE GO\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCMSGS": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x82\\t\\x7f\\x00\\x84\\x12O\\x11(\\x00:\\x003\\x00\\n\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1982-04-07T00:00:00", "modifydate": "1984-05-03T11:28:00", "lines": 58, "newlines": 51, "modlines": 10, "user": "ZTSOMG"}, "text": "*\n*   VTOC ERROR MESSAGE ROUTINE, R1 POINTS TO VTOC COMMON AT ENTRY\n*\n*         MODIFICATIONS\n* NUMBER    DATE    PERSON    REASON\n*  001G    050284   GATES     RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                               RENAME ENTER TO VTCENTER,\n*                              VTOC MORE TRANSPORTABLE.\n*\nVTOCMSG  VTCENTER 12,0        DO THE STANDARD HOUSEKEEPING         001G\n         LR    R11,R1         GET THE PARM REGISTER\n         USING VTOCOM,R11     SET ADDRESSABILITY\n         SPACE\n         LM    R0,R1,MSGADDRS GET THE MESSAGE(S) TO SEND\n         LTR   R0,R0          SECOND LEVEL MSG?\n         BZ    ERRORM1        NO\n         SPACE\n         MVC   MSGTEXT1,0(R1) INSURE MSG IN WORK AREA\n         LA    R1,MSGTEXT1\n         SPACE\n         LH    R14,0(R1)      LENGTH OF FIRST LEVEL MSG\n         LA    R15,0(R14,R1)  ADDR OF END OF MSG\n         LA    R14,1(R14)     JUMP MSG LENGTH\n         STH   R14,0(R1)\n         MVI   0(R15),C'+'    INDICATE SECOND LEVEL MSG EXISTS\n         SPACE 2\n         SR    R14,R14        CLEAR CHAIN FIELD\n         LA    R15,1          ONE SEGMENT IN 2ND MSG\n         STM   R14,R0,PUTOLD2 CREATE SECOND-LEVEL\n*                             OUTPUT LINE DESCRIPTOR ('OLD')\n         LA    R0,PUTOLD2\n         SPACE 3\nERRORM1  LR    R14,R0         NEXT 'OLD' ADDR OR ZERO\n         LA    R15,1          ONE SEGMENT\n         LR    R0,R1          MSG ADDR\n         STM   R14,R0,PUTOLD1 FIRST LEVEL 'OLD'\n         SPACE\n         LA    R1,PARMLIST\n         USING IOPL,R1\n         SPACE\n         MVC   IOPLECT,ADDRECT\n         MVC   IOPLUPT,ADDRUPT\n         SPACE\n         LA    R0,ATTNECB\n         ST    R0,IOPLECB\n         MVI   ATTNECB,0\n         SPACE 3\n         XC    PARMLIST+16(4),PARMLIST+16\n         PUTLINE PARM=PARMLIST+16,MF=(E,(1)),                          X\n               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)\n         SPACE 3\n         VTCLEAVE EQ                                               001G\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         VTCCOM                                                    001G\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCPANL": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x10o\\x00\\x90\\x10o\\x082\\x01\\x1f\\x01\\x1f\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-16T00:00:00", "modifydate": "1990-04-16T08:32:00", "lines": 287, "newlines": 287, "modlines": 0, "user": "ZTSOMG"}, "text": "./ ADD NAME=SMVTMAIN\n+---------------------%SYVTOC UTILITY MAIN SELECTION MENU+--------------\n%SELECT OPTION ===>_OPT\n%                  _BUG    +\n+\n%                1-+VOLUME MAINTENANCE  (EDIT, BROWSE OR DELETE)\n+\n%                2-+VOLUME LIST         (ALL SYVTOC HEADINGS ARE LISTED)\n+\n%                3-+VOLUME MAP          (CCHHR MAP OF VOLUME)\n)PROC\n  &SEL = TRANS( TRUNC (&OPT,'.')\n                1,'CMD(%SMVTOC &BUG)'\n                2,'CMD(%SMVTOC2 &BUG)'\n                3,'CMD(%SMVTOC3 &BUG)'\n              ' ',' '\n                *,'?' )\n)END\n./ ADD NAME=SMVTOCM\n)ATTR\n% TYPE(TEXT) INTENS(HIGH)\n+ TYPE(TEXT) INTENS(LOW)\n_ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)\n\u00ac TYPE(INPUT) INTENS(NON)  CAPS(ON) JUST(LEFT)\n$ TYPE(OUTPUT) INTENS(HIGH)\n? TYPE(INPUT) INTENS(HIGH)\n)BODY\n+------------------------------%VTOC MAINTENANCE+-----------------------\n%COMMAND ===>_ZCMD                                            %SCROLL ==\n            $MSG\n+\n%  Enter volume of VTOC to be searched:\n+\n+     Volser%===>_VOLUME+\n+\n%  Enter data set search criteria: +(optional)\n+\n+     Hi-level  %===>_LEVEL\n+\n+     Middle    %===>_CONTAIN\n+\n+     Low-level %===>_ENDING\n+\n+\n+  %ROLL ===>_ROLL   %NO +-Display VTOC from first entry.\n+                    %YES+-Display VTOC from last entry.\n)PROC\nVER (&SROL,NONBLANK)\n&HSROL = TRUNC (&SROL,1)\n&SROL = TRANS (&HSROL P,PAGE H,HALF C,CSR *,*)\nVER (&SROL,LIST,PAGE,HALF,CSR,MSG=VTOCM002)\nVER (&ROLL,NONBLANK)\n&HROLL = TRUNC (&ROLL,1)\n&ROLL = TRANS (&HROLL Y,YES N,NO *,*)\nVER (&ROLL,LIST,YES,NO,MSG=VTOCM001)\nVER (&VOLUME,NONBLANK)\nVER (&LEVEL,DSNAME)\nVER (&CONTAIN,DSNAME)\nVER (&ENDING,DSNAME)\n)END\n)END\nVER (&VOLUME,PICT,'CCCCCC')\n./ ADD NAME=SMVTOCT\n)ATTR\n  @ TYPE(OUTPUT) INTENS(LOW)\n)BODY\n+------------------------------%VTOC MAINTENANCE+-------------------------------\n%COMMAND ===>_CMDI                                            %SCROLL ===>_SROL+\n+\n+   SELECT  OPTIONS ARE%B+= BROWSE,%E+OR%S+= EDIT, OR%DEL+= DELETE\n+                    %REM+= TO REMOVE A LINE FROM TABLE WITHOUT DELETING\n+\n%  OPTION    >>>>>  D A T A S E T   N A M E  <<<<<     CDATE  LSTUS ALLOC UNUSED\n+\n)MODEL\n@Z   _Z  @Z                                           @Z     @Z    @Z     @Z\n)INIT\n  &VARS = '(RESULT OPC DSNAME CDATE LSTUS ALLOC UNUSED)'\n)END\n)END\n./ ADD NAME=SMVTOC2\n+---------------------------%SYVTOC UTILITY+------------------------------------\n% OPTION ===>_P                                                               +\n%\n%    P -+PRINT VTOC ENTRIES\n%    K -+DISPLAY VTOC ENTRIES AND SAVE DATASET\n%    BLANK -+ DISPLAY VTOC ENTRIES\n%\n+   VOLUME SERIAL(S) %===>_VOLLIST\n\n+   OPTIONS:\n+     LEVEL       %===>_LEVEL                              +\n+     CONTAINING  %===>_CONTAIN                            +\n+     ENDING      %===>_ENDING  +\n+     SORT/NOSORT %===>_SRTFLDS                                     +\n+\n+                       KEYWORD   OPERATOR     VALUE\n+     LIMIT1      %===>_KEYWD1+%===>_OP1+%===>_VALUE1            +\n+     LIMIT2      %===>_KEYWD2+%===>_OP2+%===>_VALUE2            +\n+     LIMIT3      %===>_KEYWD3+%===>_OP3+%===>_VALUE3            +\n+     LIMIT4      %===>_KEYWD4+%===>_OP4+%===>_VALUE4            +\n+\n%NO OF COPIES IF P ===>_N1        %SYSOUT CLASS ===>_C1+\n)INIT\n  .HELP = TVTOC1\n  &P = ' '\n  &N1 = 1\n  &C1 = A\n  &LEVEL = ' '\n  &CONTAIN = ' '\n  &ENDING = ' '\n  &SRTFLDS = ' '\n  &VOLLIST = ' '\n  &KEYWD1 = ' '\n  &OP1 = ' '\n  &VALUE1 = ' '\n  &KEYWD2 = ' '\n  &OP2 = ' '\n  &VALUE2 = ' '\n  &KEYWD3 = ' '\n  &OP3 = ' '\n  &VALUE3 = ' '\n  &KEYWD4 = ' '\n  &OP4 = ' '\n  &VALUE4 = ' '\n)PROC\n  &P = TRUNC(&P,1)\n  VER(&P,LIST,' ',P,K,MSG=VTOC000)\n  IF (&P = P)\n    &N1 = TRUNC(&N1,1)\n    VER(&N1,NUM,MSG=VTOC001)\n  IF (&KEYWD1 \u00ac= ' ')\n    VER(&KEYWD1,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                LSTUS,MSG=VTOC004)\n    &OP1 = TRUNC(&OP1,2)\n    IF (&OP1 = '  ')\n      VER(&OP1,NONBLANK,MSG=VTOC005)\n    IF (&OP1 \u00ac= '  ')\n      VER(&OP1,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC006)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD2,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                LSTUS,MSG=VTOC004)\n    &OP2 = TRUNC(&OP2,2)\n    IF (&OP2 = '  ')\n      VER(&OP2,NONBLANK,MSG=VTOC005)\n    IF (&OP2 \u00ac= '  ')\n      VER(&OP2,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD2,NONBLANK,MSG=VTOC007)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC007)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD3,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                LSTUS,MSG=VTOC004)\n    &OP3 = TRUNC(&OP3,2)\n    IF (&OP3 = '  ')\n      VER(&OP3,NONBLANK,MSG=VTOC005)\n    IF (&OP3 \u00ac= '  ')\n      VER(&OP3,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD3,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD2,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD4,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                MSG=VTOC004)\n    &OP4 = TRUNC(&OP4,2)\n    IF (&OP4 = '  ')\n      VER(&OP4,NONBLANK,MSG=VTOC005)\n    IF (&OP4 \u00ac= '  ')\n      VER(&OP4,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n)END\n./ ADD NAME=SMVTOC3\n+---------------------------%SYVTOC UTILITY+------------------------------------\n% OPTION ===>_P\n%\n%    P -+PRINT VTOC ENTRIES\n%    K -+DISPLAY VTOC ENTRIES AND SAVE DATASET\n%    BLANK -+ DISPLAY VTOC ENTRIES\n%\n+   VOLUME SERIAL(S) %===>_VOLLIST\n\n+   OPTIONS:\n+     LEVEL       %===>_LEVEL                              +\n+     CONTAINING  %===>_CONTAIN                            +\n+     ENDING      %===>_ENDING  +\n+     MAPTYPE     %===>_MAP     +   (DEC OR HEX)\n+                       KEYWORD   OPERATOR     VALUE\n+     LIMIT1      %===>_KEYWD1+%===>_OP1+%===>_VALUE1            +\n+     LIMIT2      %===>_KEYWD2+%===>_OP2+%===>_VALUE2            +\n+     LIMIT3      %===>_KEYWD3+%===>_OP3+%===>_VALUE3            +\n+     LIMIT4      %===>_KEYWD4+%===>_OP4+%===>_VALUE4            +\n+\n%NO OF COPIES IF P ===>_N1        %SYSOUT CLASS ===>_C1+\n)INIT\n  .HELP = TVTOC1\n  &P = ' '\n  &N1 = 1\n  &C1 = A\n  &LEVEL = ' '\n  &CONTAIN = ' '\n  &ENDING = ' '\n  &MAP = HEX\n  &SRTFLDS = ' '\n  &VOLLIST = ' '\n  &CAT = ' '\n  &KEYWD1 = ' '\n  &OP1 = ' '\n  &VALUE1 = ' '\n  &KEYWD2 = ' '\n  &OP2 = ' '\n  &VALUE2 = ' '\n  &KEYWD3 = ' '\n  &OP3 = ' '\n  &VALUE3 = ' '\n  &KEYWD4 = ' '\n  &OP4 = ' '\n  &VALUE4 = ' '\n)PROC\n  &P = TRUNC(&P,1)\n  VER(&P,LIST,' ',P,K,MSG=VTOC000)\n  VER(&MAP,LIST,H,HE,HEX,D,DE,DEC,MSG=VTOC000)\n  IF (&P = P)\n    &N1 = TRUNC(&N1,1)\n    VER(&N1,NUM,MSG=VTOC001)\n  &CAT = TRUNC(&CAT,1)\n  VER(&CAT,LIST,' ',Y,MSG=VTOC003)\n  IF (&KEYWD1 \u00ac= ' ')\n    VER(&KEYWD1,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                LSTUS,\n                CAT,MSG=VTOC004)\n    &OP1 = TRUNC(&OP1,2)\n    IF (&OP1 = '  ')\n      VER(&OP1,NONBLANK,MSG=VTOC005)\n    IF (&OP1 \u00ac= '  ')\n      VER(&OP1,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC006)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD2,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                LSTUS,\n                CAT,MSG=VTOC004)\n    &OP2 = TRUNC(&OP2,2)\n    IF (&OP2 = '  ')\n      VER(&OP2,NONBLANK,MSG=VTOC005)\n    IF (&OP2 \u00ac= '  ')\n      VER(&OP2,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD2,NONBLANK,MSG=VTOC007)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC007)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD3,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                LSTUS,\n                CAT,MSG=VTOC004)\n    &OP3 = TRUNC(&OP3,2)\n    IF (&OP3 = '  ')\n      VER(&OP3,NONBLANK,MSG=VTOC005)\n    IF (&OP3 \u00ac= '  ')\n      VER(&OP3,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD3,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD2,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD4,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,MSG=VTOC004)\n    &OP4 = TRUNC(&OP4,2)\n    IF (&OP4 = '  ')\n      VER(&OP4,NONBLANK,MSG=VTOC005)\n    IF (&OP4 \u00ac= '  ')\n      VER(&OP4,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTOCPRNT": {"ttr": 3086, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x003\\x00\\x90\\x13_\\x01\\x02%O\\x13\\x06\\x06\\xf7\\x06\\xec\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1990-05-15T00:00:00", "modifydate": "2002-09-11T13:06:33", "lines": 1783, "newlines": 1772, "modlines": 0, "user": "MMSMAK"}, "text": "         TITLE 'VTOC COMMAND PRINT ROUTINE'\n***********************************************************************\n*         MODIFICATIONS\n* NUMBER    DATE    PERSON    REASON\n*  001G    072278   GATES     CHANGE MSG AND CLEAR MACROS TO VTCMSG AND\n*                              VTCLEAR RESPECTIVELY TO AVOID CONFLICT\n*                              WITH EXISTING MSG AND CLEAR MACROS.\n*  002S    101878   SAVIT     CORRECTLY FORMAT LAST USE DATE AS SET\n*                              BY MVS RELEASE 3.7/IPO 3.0/SU60.\n*  003G    030179   GATES     ADD CHECK FOR CAT PARAMETER SO WE CAN\n*                              SEE IF DATASETS ARE CATALOGED.\n*  004G    030379   GATES     ADD LOGIC TO PRODUCE A JCL FILE TO CAUSE\n*                              DELETION (AND UNCATALOGING, IF CAT\n*                              SPECIFIED ON COMMAND) OF DATASETS ON\n*                              PUBLIC AND STORAGE MOUNTED VOLUMES.\n*                              IF DATASET IS CATALOGED AS BEING ON VOL\n*                              WHERE IT WAS FOUND THE UNIT AND VOLSER\n*                              WILL BE LEFT OFF THE JCL SO THAT IT WILL\n*                              BE UNCATALOGED. OTHERWISE JCL WILL REFER\n*                              TO SPECIFIC VOLUME SERIAL.\n*  005G    030379   GATES     ADD REG 10 AS AN ADDITIONAL BASE.\n*  006G    030478   GATES     ADD COMMENTS IN GENERATED JCL TO SHOW\n*                              CATALOG BEING USED WHEN POSSIBLE. ALSO\n*                              ALLOW ONLY JCL FOR NOT-CATALOGED DATA ON\n*                              DISK PACKS BEGINNING WITH 'HSP0' TO\n*                              AVOID MASSIVE DELETIONS OF PRODUCTION\n*                              DATA. ALSO DON'T DELETE DATASET WITH\n*                              SAME NAME AS PACK ON WHICH IT WAS FOUND.\n*                              ALSO PUT SEQ # IN DD NAME.\n*  007G    030679   GATES     CORRECT BUG IN VTOCOUT LISTING CREATED BY\n*                              004G MOD CHANGING EXECUTED INSTRUCTION.\n*  008G    031679   GATES     ALLOW WRONGLY CATALOGED DATASETS ON PACKS\n*                              BEGINNING \"HSP0\" TO GENERATE JCL.\n*  009G    NEEDED   GATES     ALLOW VOLSER AS ALIAS FOR VOLUME.\n*  010G    120880   GATES     MAKE VSAM AND ISAM SHOW WHOLE DS USED.\n*  011G    120880   GATES     PUT IN PRIVATE KEYWORD CHECK TO ALLOW\n*                              GENERATION OF PURGE JCL FOR HSP0 PACKS\n*  012G    110183   GATES     USE SAME RTN TO PRINT CDATE EXPDT LSTUS.\n*  013G    110283   GATES     CLEAR OUT TOTALS IN PRNTOT RTN.\n*  014G    111183   GATES     PUT IN LOGIC TO MAP VOLUMES.\n*  015G    111783   GATES     CHANGE LOGIC TO ALWAYS GO THRU MAP\n*                              RTNS AND CHECK FOR GAPS/OVERLAPS.\n*                              THE MAP IS SHOWN ONLY WHEN USER SAYS\n*                              MAP ON THE VTOC COMMAND.\n*  016G    112283   GATES     FIX MESSAGES TO HARDCOPY.\n*  017G    112383   GATES     UPDATE JCLOUT MESSAGES FOR PURGE.\n*  018G    112383   GATES     DISPLAY VTOC SPACE INFO. ALSO CHECK DIRF\n*                              BIT AND REPORT.\n*  019G    043084   GATES     DONT SHOW ANY HEADINGS WHEN NOHEAD.\n*  020G    043084   GATES     OPEN VTOCOUT EVEN WHEN NOPRINT SO WE\n*                              GET TOTALS AND MAP TO VTOCOUT.\n*  021G    043084   GATES     FIX BUG WHERE CAT KEYWORD ONLY WORKED\n*                              UNDER TEST COMMAND.\n*  022G    050284   GATES     EMBED VTCLEAR MACRO TO MAKE VTOC MORE\n*                              TRANSPORTABLE.\n*  023G    050284   GATES     RENAME VTFMT MACRO TO VTCFMT,\n*                              RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                              RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTOCPARS MACRO TO VTCPARS,\n*                              RENAME PDEDSNAM MACRO TO VTCPDEDS,\n*                               RENAME ENTER TO VTCENTER,\n*                              VTOC MORE TRANSPORTABLE.\n*  024G    051084   GATES     FIX LOGIC TO PRINT UNIT NAME.\n*  025G    051084   GATES     ADD LOGIC TO PRINT WHETHER A DSN HAS\n*                              LAST BEEN OPENED FOR UPDATE.\n*  026G    051684   GATES     FIX LOGIC TO USE SEPARATE RTNS TO PRINT\n*                              DSN AND CCHH. CCHH IS NEVER PRINTED WE\n*                              ISSUE A WARNING MESSAGE TO SAY USE THE\n*                              MAP KEYWORD.\n*  027G    110584   GATES     CHANGE INDEX VTOC MESSAGE TO INDICATE\n*                              FREE SPACE NOT SHOWN.\n*  028G    110584   GATES     FIX BUG WHERE TRACK LENGTH FOR 3380\n*                              WAS INCORRECT, WENT NEGATIVE.\n*  029G    110584   GATES     PUT VOLSER IN DIRF MESSAGE.\n*  030G    111485   GATES     MAKE EXT FIELD 3 BYTES.\n*  031G    111585   GATES     PUT RUN DATE IN HEADING LINE.\n*  032G    103087   GATES     CHANGE MESSAGE PHONE NUMBER.\n*  033G    123187   GATES     UPDATE JCLOUT JOB CARD FOR PURGE.\n*  034G    010488   GATES     REMOVE LOGIC FOR HSP0 PACKS, AFFECTS\n*                              006G 008G, AND 011G MODIFICATIONS.\n*  035G    010488   GATES     ADD LOGIC FOR KEY LENGTH.\n*  036G    041388   GATES     REMOVE LOGIC FOR PURGE JCL OPTION. THIS\n*                              CAN BE ACCOMPLISHED BY DIRECTING THE\n*                              OUTPUT TO VTOCOUT AND MANIPULATING IT\n*                              TO PRODUCE THE RESULT YOU WANT. AFFECTS\n*                              004G, 006G 008G, 011G AND 017G MODS.\n*  037G    041888   GATES     CORRECT RUN DATE LOGIC.\n*  038G    041690   GATES     CHANGE CONTACT PHONE NUMBER.\n*  039G    051590   GATES     FIX BUG WHERE NUMBER TRACKS FOR 3380\n*                              WAS INCORRECT, WENT NEGATIVE.\n*  040G    072790   GATES     ADD LOGIC FOR OPTCD VALUE.\n*  DHC2    091102   CARTWRIGHT ALLOW Y2K YEARS\n*\n*\n* TITLE -      VTOC COMMAND PRINT ROUTINE                             *\n*                                                                     *\n* FUNCTION -   PRINT THE DATA PASSED TO IT.  IT WILL USE THE DDNAME   *\n*              VTOCOUT IF IT IS ALLOCATED, AND WILL USE VTOCMSG       *\n*                                                                     *\n* OPERATION -  FOR UNSORTED DATA, GET THE CURRENT ENTRY, ADD TO THE   *\n*              TOTALS, AND OUTPUT IT.  IF THE DATA IS SORTED, THE     *\n*              ACTION IS MORE COMPLEX, BECAUSE ALL THE DATA SETS      *\n*              ARE TO BE OUTPUT.  THE TOTALS AND BREAKS MAY BE        *\n*              NEEDED AT ANY POINT.                                   *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, SORTED LIST    *\n*                                                                     *\n* OUTPUT -     TO VTOCOUT, A LIST OF THE REQUESTED DATA SETS AND      *\n*              THEIR ATTRIBUTES, WITH TOTALS AND BREAKS AS NEEDED.    *\n*              IF VTOCOUT IS NOT ALLOCATED, VTOCMSG IS USED FOR       *\n*              OUTPUT.                                                *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         MACRO\n&NAME    VTCEDIT &NAME1,&REG,&EDIT\n&NAME    CVD   &REG,DOUBLE                  MOVE VALUE TO PRINT    014G\n         MVC   &NAME1.(L'&EDIT.),&EDIT       AND                   014G\n         ED    &NAME1.(L'&EDIT.),DOUBLE+5    ZERO SUPPRESS.        014G\n         MEND\n         MACRO\n&NAME  VTCLEAR &FIELD,&CHAR,&LENGTH                               001S\n.*     MODIFICATIONS\n.*   IDENTIFIER   DATE   PERSON   REASON\n.*      001S     101678  SAVIT    MAKE MACRO NAME UNIQUE BY ADDING VT.\n.*      002G     050284  GATES    EMBEDDED MACRO WITHIN VTOCPRNT WHICH\n.*                                 IS THE ONLY PLACE IT'S USED.\n.*\n         LCLC  &FILL,&L\n&L       SETC  'L'''\n&FILL    SETC  '&CHAR'\n         AIF   ('&CHAR' NE '').CHSPEC\n&FILL    SETC  '40'\n.CHSPEC  ANOP\n&NAME    MVI   &FIELD,X'&FILL'   SET THE FIRST POSITION\n         AIF   ('&LENGTH' EQ '').NOLSPEC\n         MVC   &FIELD+1(&LENGTH),&FIELD  FILL THE ENTIRE FIELD\n         MEXIT\n.NOLSPEC ANOP\n         MVC   &FIELD+1(&L&FIELD-1),&FIELD  FILL THE ENTIRE FIELD\n         MEND\n         MACRO\n&LABEL   CONV  &TO,&FROM,&LEN,&EDMASK,&SCOMP\n         LCLC  &L,&FIRSTFR,&EDM,&COMP\n         LCLA  &COUNT\n&L       SETC  'L'''\n         AIF   ('&LABEL' EQ '').NOLABEL  SKIP LABEL IF NOT PRESENT\n&LABEL   DS    0H             SET THE LABEL\n.NOLABEL ANOP\n&EDM     SETC  'EDMASK'      DEFAULT EDIT MASK\n         AIF   ('&EDMASK' EQ '').DEFMASK  IF NOT ENTERED USE DEFAULT\n&EDM     SETC  '&EDMASK'     USE THE ENTERED VALUE\n.DEFMASK ANOP\n&COMP    SETC  'BLANKS'      DEFAULT COMPARISON CHARS\n         AIF   ('&SCOMP' EQ '').DEFCOMP  NOT ENTERED, USE THE DEFAULT\n&COMP    SETC  '&SCOMP'      GET WHAT THE GUY WANTS\n.DEFCOMP ANOP\n&FIRSTFR SETC  '&FROM'(1,1)   GET FIRST CHAR OF &FROM\n         AIF   ('&FIRSTFR' EQ '(').REGISTR\n         L     R1,&FROM       GET THE DATA TO CONVERT\n         CVD   R1,DOUBLE      CONVERT TO PACKED DECIMAL\n         AGO   .INDEC\n.REGISTR ANOP\n&COUNT   SETA  K'&FROM-2\n&FIRSTFR SETC  '&FROM'(2,&COUNT)  STRIP THE PERRONS\n         CVD   &FIRSTFR,DOUBLE   CONVERT TO PACKED DECIMAL\n.INDEC   ANOP\n         MVC   CHARS,&EDM     PUT IN THE EDIT MASK\n         ED    CHARS,DOUBLE   CONVERT TO CHARACTERS\n         AIF   ('&LEN' NE '').LENSET\n         MVC   &TO,CHARS+16-&L&TO  MOVE IN THE NUMBER\n         CLC   CHARS(16-&L&TO),&COMP   WAS THERE AN OVERFLOW?\n         BE    *+10           NO, EVERYTHING WAS OK\n         MVC   &TO,STARS      BAD NEWS, NOTE IT\n         MEXIT\n.LENSET  ANOP\n         MVC   &TO.(&LEN),CHARS+16-&LEN MOVE IN THE NUMBER\n         CLC   CHARS(16-&LEN),&COMP   WAS THERE AN OVERFLOW?\n         BE    *+10           NO, EVERYTHING WAS OK\n         MVC   &TO.(&LEN),STARS   BAD NEWS, NOTE IT\n         MEND\n*        MACRO FOR DEFINING FAKE PDE FOR A DEFAULT LIST\n*\n         EJECT\nVTOCPRNT VTCENTER (12,10),20       DO THE HOUSEKEEPING         005G023G\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING PRNTWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        CHECK FOR THE MAP PRINT REQUEST\n*\n         TM    VTCPFUNC,X'01' IS IT TIME                       015G018G\n         BO    MAPVTOC        YES, GO DO IT                        015G\n*\n*        CHECK FOR THE PRINT CLEAN - CLOSE AND FREEMAIN\n*\n         TM    VTCPFUNC,X'08' IS IT TIME                       014G018G\n         BO    PRNTCLEN       YES, GO DO IT                        014G\n*\n*        CHECK FOR THE FIRST TIME THROUGH\n*        IF SO, SET UP THE DCB'S AND OPEN THEM\n*\n         CLI   FIRSTIM,0      IS THIS THE FIRST TIME?\n         BNE   CHKSORT        NO, KEEP ON TRUCKIN'\n         B     PRTINIT    INITIALIZE FOR PRINTING\n*\n*        CHECK TO SEE IF THE DATA IS SORTED\n*\nCHKSORT  CLI   SORTK+1,2      IS THIS NOSORT?\n         BNE   SORTED         NO, THE ENTRIES ARE SORTED\n*\n*        NOSORT WAS SPECIFIED.  ONLY THE CURRENT ENTRY IS AVAILABLE\n*\n         L     R3,FORMATAD    POINT TO THE ENTRY\n         USING VTFMT,R3       FORMATTED DSCB ADDRESSABILITY\n         LTR   R3,R3          IS IT THERE?\n         BZ    CHEKTOT        NO, SEE IF A TOTAL HAS BEEN OUTPUT\n         XC    FORMATAD,FORMATAD  CLEAR THE ADDRESS FOR LATER\n*\n*        ADD TO THE TOTALS\n*\n         BAL   R8,ADDTOT      GO DO IT\n*                                                                  036G\n*        SEE IF THE JCL OUTPUT DATA SET IS WANTED              004G036G\n*                                                                  036G\n*        TM    JCLDCB+48,X'10'  IS THE DCB OPEN?               004G036G\n*        BNO   NOOUTPT        NO, SKIP ALONG                       036G\n*        BAL   R8,OUTPUT      YES, GO DO IT                        036G\n*\n*        SEE IF THERE'S PRINTING TO DO\n*\nNOOUTPT  CLI   PRINTK+1,2     WAS NOPRINT SPECIFIED?\n         BE    VTRET          YES, WE'RE DONE FOR NOW\n         BAL   R8,PRINT       NO, PRINT OUT THE ENTRY\n*\n*        RETURN FROM WHENCE WE CAME\n*\nVTRET    VTCLEAVE EQ,RC=0      EXEUNT                              023G\n*\n*        NOSORT, CHECK FOR OUTPUTTING THE TOTALS\n*\nCHEKTOT  TM    ENDTOTAL,ENTOTOUT  WAS THE TOTAL OUTPUT BEFORE?\n         BO    VTRET          YES, JUST RETURN\n         BAL   R8,PRNTOT      NO, OUTPUT THE TOTAL\n         OI    ENDTOTAL,ENTOTOUT  REMEMBER THE TOTAL IS OUT\n         B     VTRET          THEN RETURN\n         EJECT\n*\n*        THE DATA IS SORTED, SO THE LISTS MUST BE EMPTIED.\n*        CHECK EACH ITEM FOR A TOTAL AND FOR A BREAK\n*        OUTPUT TO PRINT AND/OR THE OUTPUT DATA SET\n*\n*\n*        FIRST GET THE TOTAL AND BREAK COUNTS FOR COMPARES\n*\nSORTED   LA    R1,TOTALN      POINT TO THE TOTAL PDL\n         BAL   R8,PDLNUM      CONVERT IT TO A NUMBER\n         LTR   R15,R15        IS IT ZERO?\n         BNZ   SETTNUM        NO, IT'S GOOD\n         OI    ENDTOTAL,ENDTONLY  YES, TOTALS AT THE END ONLY\nSETTNUM  BCTR  R15,0          CUT IT DOWN ONE\n         STH   R15,NUMTOTAL   SET THE TOTAL COUNT\n         LA    R1,BREAK       POINT TO THE BREAK PDL\n         BAL   R8,PDLNUM      CONVERT IT TO A NUMBER\n         LTR   R15,R15        IS IT ZERO?\n         BNZ   SETBNUM        NO, IT'S GOOD\n         OI    ENDTOTAL,NOBREAK   YES, BREAK  AT THE END ONLY\nSETBNUM  BCTR  R15,0          CUT IT DOWN ONE\n         STH   R15,NUMBREAK   SET THE BREAK COUNT\n*\n*        START GOING THROUGH THE LISTS, PROCESS THE ENTRIES\n*\n         LA    R4,VTCSORTH    POINT TO THE LISTS\n         LA    R5,VTCSORTE    POINT TO THE END OF THE LISTS\n         ST    R5,ADDREND     SAVE THE ADDRESS\nNEWLIST  L     R3,0(R4)       GET THE FIRST ENTRY FROM THIS LIST\n         LTR   R3,R3          ANYTHING ON THIS LIST?\n         BZ    NEXTLIST       NO, GET ANOTHER LIST\n*\n*        THIS IS AN ENTRY, DO THE TOTALS, PRINT, AND OUTPUT\n*        CHECK FOR TOTALS AND BREAKS FIRST\n*\nGOTENTRY DS    0H\n         CLI   PRINTK+1,2     WAS NOPRINT SET?\n*        BE    CHKOUTPT       YES, SKIP INTERIM TOTALS             036G\n         BE    GOTOT          YES, SKIP INTERIM TOTALS             036G\n         MVI   TOTLAST,0      SET UP FLAG FOR TOTAL AS LAST ACTION\n*        NOTE - EXTENSION - OUTPUT INTERIM TOTALS WITH THE KEY\n         TM    ENDTOTAL,ENDTONLY  END TOTAL ONLY?\n         BO    CHKBREAK       YES, SEE ABOUT BREAKS\n         LH    R2,NUMTOTAL    GET THE LENGTH TO COMPARE\n         L     R1,LASTKEY     GET THE LAST ENTRY\n         EX    R2,COMPKEY     SEE IF THIS IS THE SAME\n         BE    CHKBREAK       YES, KEEP COUNTING\n*\n*        THIS ONE IS DIFFERENT, PRINT THE TOTALS FIRST\n*\n         BAL   R8,PRNTOT      PRINT THE TOTALS\n*\n*        CHECK FOR A BREAK\n*\nCHKBREAK TM    ENDTOTAL,NOBREAK   NO BREAKS THIS TIME?\n         BO    SKPBREAK       YES, SKIP PAST BREAKS\n         LH    R2,NUMBREAK    GET THE LENGTH TO COMPARE\n         L     R1,LASTKEY     GET THE LAST ENTRY\n         EX    R2,COMPKEY     SEE IF THIS IS THE SAME\n         BE    SKPBREAK       YES, KEEP COUNTING\n*\n*        THIS ONE IS DIFFERENT, GET A NEW PAGE\n*\n         MVC   LINECT,LINEMAX BE SURE THE NEXT ITEM GETS A NEW PAGE\n         MVI   TOTLAST,0      DON'T SKIP A LINE AFTER TOTAL\n         LA    R1,VTFDSN     POINT TO THE DSNAME\n         ST    R1,LASTKEY    SAVE THE ADDRESS FOR BREAK COMPARES\n*\n*        PRINT THE ITEM\n*\nSKPBREAK CLI   TOTLAST,0      WAS A TOTAL NOT FOLLOWED BY A BREAK?\n         BE    SKPBREA2       NO, CONTINUE NORMALLY\n         MVC   MSGBL,MSGBLC   YES, SET UP A BLANK MESSAGE\n         LA    R1,MSGBL       POINT TO IT\n         BAL   R8,PRNTLINE    THEN PUTPUT IT\nSKPBREA2 BAL   R8,PRINT       FINAL FORMAT AND PRINT\n*                                                                  036G\n*        CHECK FOR JCL DATA SET OUTPUT                         004G036G\n*                                                                  036G\n*CHKOUTPT TM    JCLDCB+48,X'10'     IS IT OPEN AND READY       004G036G\n*         BNO   GOTOT          NO, GO DO THE TOTALS                036G\n*         BAL   R8,OUTPUT      YES, PUT OUT THE DATA SET ENTRY     036G\n*\n*        ADD UP THE TOTALS\n*\nGOTOT    BAL   R8,ADDTOT      SUM THEM\n*\n*        GET THE NEXT ENTRY\n*\n         ICM   R3,B'1111',VTFNEXT  FOLLOW THE CHAIN\n         BNZ   GOTENTRY       SOMETHING'S THERE, USE IT\n*\n*        END OF THIS LIST, TRY THE NEXT LIST\n*\nNEXTLIST LA    R4,4(R4)       MOVE OVER ONE\n         C     R4,ADDREND     WAS THAT THE LAST LIST?\n         BL    NEWLIST        NO, KEEP TRYING\n*\n*        END OF THE LISTS, OUTPUT THE FINAL TOTAL AND RETURN\n*\n         BAL   R8,PRNTOT      LIST THE TOTAL\n*\n*        CLEAR OUT THE PRINT LISTS\n*\n         XC    VTCSORTH+000(256),VTCSORTH  CLEAR 64 ENTRIES\n         XC    VTCSORTH+256(256),VTCSORTH+256 CLEAR 64 ENTRIES\n         XC    VTCSORTH+512(256),VTCSORTH+512 CLEAR 64 ENTRIES\n         XC    VTCSORTH+768(256),VTCSORTH+768 CLEAR 64 ENTRIES\n         B     VTRET             THEN GET OUT OF HERE.\n         EJECT\n*\n*        PRINT CLEANUP ROUTINE - CLOSE DCB'S FIRST\n*\nPRNTCLEN TM    SYSOUT+48,X'10'  IS SYSOUT OPEN?\n*        BNO   PRNTCLO        NO, CHECK THE JCLDCB             004G036G\n         BNO   PRNTFREE       NO, SKIP DOWN TO THE FREEMAINS.  004G036G\n         CLOSE (SYSOUT),MF=(E,OPENLIST)  DO THE CLOSE\n*PRNTCLO  TM    JCLDCB+48,X'10'  IS JCLDCB OPEN?               004G036G\n*        BNO   PRNTFREE       NO, SKIP DOWN TO THE FREEMAINS       036G\n*        CLOSE (JCLDCB),MF=(E,OPENLIST)  DO THE CLOSE          004G036G\n*\n*        FREE UP THE STORAGE\n*\nPRNTFREE LA    R2,VTCGETMN    POINT TO THE TABLE\n         LA    R5,VTCGETMX    GET THE NUMBER OF ENTRIES IN THE TABLE\nPRNTFRL  ICM   R3,B'1111',0(R2)  GET THE STORAGE ADDRESS\n         BZ    VTRET          IF ZERO, WE'RE DONE\n         FREEMAIN R,LV=VTCGETMS,A=(R3)  FREE IT\n         XC    0(4,R2),0(R2)  CLEAR THE ADDRESS\n         LA    R2,4(R2)       GET THE NEXT BLOCK ADDRESS\n         BCT   R5,PRNTFRL     AND LOOP UNTIL DONE\n         B     VTRET          THEN RETURN\n*\n         EJECT\n**********************\n* PRINT THE VTOC MAP *\n**********************\n         SPACE\nMAPVTOC  EQU   *\n         MVC   LINECT,LINEMAX          MAKE SURE TO DO HEADINGS.   014G\n         CLI   MAPK+1,2            WAS A MAP REQUESTED?       014G 015G\n         BE    NOMAPPRT            NO, SKIP PRINT MESSAGES.   014G 015G\n         MVI   MAPHEADH+4,C' '              CLEAR LINE.            016G\n         MVC   MAPHEADH+5(250),MAPHEADH+4                          016G\n         MVC   MAPHEADH(MAPHEADL),MAPHEADC  INIT THE HEAD MESSAGE. 016G\n         MVC   MAPHEADH+22(6),VOLID   MOVE VOLSER.                 014G\n         MVC   MAPHEADH+38(3),ADDR    MOVE DRIVE ADDR.             014G\n         MVI   MAPTITLH+4,C' '              CLEAR LINE.            016G\n         MVC   MAPTITLH+5(250),MAPTITLH+4                          016G\n         MVC   MAPTITLH(MAPTITLL),MAPTITLC  INIT THE TITL MESSAGE. 016G\n         OI    VTCPFUNC,X'02'               INDICATE NO TITLES.    018G\n         LA    R1,MAPHEADH                  GET A(PRINT LINE).     018G\n         BAL   R8,PRNTLINE                  PRINT IT.              018G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            018G\n         MVC   MSGWORK+5(250),MSGWORK+4                            018G\n         MVC   MSGWORK(MAPVTC1L),MAPVTC1C   MOVE MESSAGE.          018G\n         LA    R1,MSGWORK                   GET A(PRINT LINE).     018G\n         BAL   R8,PRNTLINE                  PRINT IT.              018G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            018G\n         MVC   MSGWORK+5(250),MSGWORK+4                            018G\n         MVC   MSGWORK(MAPVTC2L),MAPVTC2C   MOVE MESSAGE.          018G\n         SR    R8,R8                                               018G\n*        LH    R8,DS4DEVSZ             DEVICE SIZE IN CYLINDERS018G039G\n         SR    R8,R8                   CLEAR REG.                  039G\n         ICM   R8,3,DS4DEVSZ           DEVICE SIZE IN CYLINDERS.   039G\n         VTCEDIT MSGWORK+23,R8,EDIT6                               018G\n         LH    R8,DS4DSREC             NMBR AVAIL FMT 0 DSCBS LEFT 018G\n         VTCEDIT MSGWORK+51,R8,EDIT6                               018G\n         LA    R1,MSGWORK                   GET A(PRINT LINE).     018G\n         BAL   R8,PRNTLINE                  PRINT IT.              018G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            018G\n         MVC   MSGWORK+5(250),MSGWORK+4                            018G\n         MVC   MSGWORK(MAPVTC3L),MAPVTC3C   MOVE MESSAGE.          018G\n*        LH    R8,DS4DEVSZ+2           NUMBER TRACKS PER CYLIN 018G039G\n         SR    R8,R8                   CLEAR REG.                  039G\n         ICM   R8,3,DS4DEVSZ+2         NUMBER TRACKS PER CYLINDER  039G\n         VTCEDIT MSGWORK+23,R8,EDIT6                               018G\n*        LH    R8,DS4DEVTK             DEVICE TRACK LENGTH     018G028G\n         SR    R8,R8                   CLEAR REG.                  028G\n         ICM   R8,3,DS4DEVTK           DEVICE TRACK LENGTH.        028G\n         VTCEDIT MSGWORK+51,R8,EDIT6                               018G\n         LA    R1,MSGWORK                   GET A(PRINT LINE).     018G\n         BAL   R8,PRNTLINE                  PRINT IT.              018G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            018G\n         MVC   MSGWORK+5(250),MSGWORK+4                            018G\n         MVC   MSGWORK(MAPVTC4L),MAPVTC4C   MOVE MESSAGE.          018G\n         SR    R8,R8                                               018G\n         IC    R8,DS4DEVDT             NUMBER FULL DSCBS ON A TRACK018G\n         VTCEDIT MSGWORK+23,R8,EDIT6                               018G\n         IC    R8,DS4DEVDB             NMBR PDS DIR. BLKS PER TRACK018G\n         VTCEDIT MSGWORK+51,R8,EDIT6                               018G\n         LA    R1,MSGWORK                   GET A(PRINT LINE).     018G\n         BAL   R8,PRNTLINE                  PRINT IT.              018G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            018G\n         MVC   MSGWORK+5(250),MSGWORK+4                            018G\n         MVC   MSGWORK(MAPVTC5L),MAPVTC5C   MOVE MESSAGE.          018G\n         LH    R8,DS4NOATK             NMBR ALTERNATE TRACKS REMAIN018G\n         VTCEDIT MSGWORK+23,R8,EDIT6                               018G\n*        LH    R8,DS4HCCHH+2           HH OF NEXT ALT TRK AVAIL018G039G\n         SR    R8,R8                   CLEAR REG.                  039G\n         ICM   R8,3,DS4HCCHH+2         HH OF NEXT ALT TRK AVAIL    039G\nGOTALT2  CVD   R8,DOUBLE                                           018G\n         MVC   MSGWORK+53(L'EDIT4),EDIT4                           018G\n         ED    MSGWORK+53(L'EDIT4),DOUBLE+6                        018G\n*        LH    R8,DS4HCCHH             CC OF NEXT ALT TRK AVAIL018G039G\n         SR    R8,R8                   CLEAR REG.                  039G\n         ICM   R8,3,DS4HCCHH           CC OF NEXT ALT TRK AVAIL    039G\nGOTALT1  CVD   R8,DOUBLE                                           018G\n         MVC   MSGWORK+47(L'EDIT4),EDIT4                           018G\n         ED    MSGWORK+47(L'EDIT4),DOUBLE+6                        018G\n         LA    R1,MSGWORK                   GET A(PRINT LINE).     018G\n         BAL   R8,PRNTLINE                  PRINT IT.              018G\n         TM    DS4VTOCI,DS4IVTOC      IS THERE AN INDEXED VTOC?    014G\n         BNO   NOIXVTOC               NO, SKIP MESSAGE.            014G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            016G\n         MVC   MSGWORK+5(250),MSGWORK+4                            016G\n         MVC   MSGWORK(MIXVTOCL),MIXVTOC MOVE MESSAGE.             016G\n         LA    R1,MSGWORK                   GET A(PRINT LINE).     016G\n         BAL   R8,PRNTLINE                  PRINT IT.              014G\nNOIXVTOC NI    VTCPFUNC,X'FD'               INDICATE TITLES NOW.   018G\n         MVC   LINECT,LINEMAX          MAKE SURE TO DO HEADINGS.   018G\nNOMAPPRT CLI   LIMITK+1,0          WAS LIMIT SPECIFIED?            018G\n         BNE   NOGAPCK             YES, THEN I CANT CHECK GAPS.    015G\n         CLI   LEVKEY+1,0          WAS LEVEL SPECIFIED?            015G\n         BNE   NOGAPCK             YES, THEN I CANT CHECK GAPS.    015G\n         CLI   NLEVKEY+1,0         WAS NOTLEVEL SPECIFIED?         015G\n         BNE   NOGAPCK             YES, THEN I CANT CHECK GAPS.    015G\n         CLI   CONTAINK+1,0        WAS CONTAINING SPECIFIED?       015G\n         BNE   NOGAPCK             YES, THEN I CANT CHECK GAPS.    015G\n         CLI   NCONKEY+1,0         WAS NOTCONTAINING SPECIFIED?    015G\n         BNE   NOGAPCK             YES, THEN I CANT CHECK GAPS.    015G\n         CLI   ENDKEY+1,0          WAS END SPECIFIED?              015G\n         BNE   NOGAPCK             YES, THEN I CANT CHECK GAPS.    015G\n         CLI   NENDKEY+1,0         WAS NOTEND SPECIFIED?           015G\n         BNE   NOGAPCK             YES, THEN I CANT CHECK GAPS.    015G\n         B     VTOCCK\nNOGAPCK  MVI   MSGWORK+4,C' '      YES, THEN I CANT CHECK GAPS.    016G\n         MVC   MSGWORK+5(250),MSGWORK+4     CLEAR LINE.            016G\n         MVC   MSGWORK(MRESTRL),MRESTRC     MOVE MESSAGE.          016G\n         CLI   HEADK+1,2           NOHEADING REQUEST?              019G\n         BE    VTOCCK              YES, SKIP TELLING THEM.         019G\n         LA    R1,MSGWORK                   GET A(PRINT LINE).     016G\n         BAL   R8,PRNTLINE                  PRINT IT.              014G\nVTOCCK   TM    DS4VTOCI,DS4DIRF    IS DIRF BIT ON?                 018G\n         BNO   GAPCK                                               018G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            018G\n         MVC   MSGWORK+5(250),MSGWORK+4                            018G\n         MVC   MSGWORK(MDIRFL),MDIRFC   VTOC DAMAGE POSSIBLE.      018G\n         MVC   MSGWORK+MDIRFL-6(6),VOLID  MOVE VOLSER.             029G\n         LA    R1,MSGWORK              GO PRINT LINE.              018G\n         BAL   R8,PRNTLINE             GO PRINT LINE.              018G\n         MVC   MSGWORK+5(250),MSGWORK+4 C                          018G\n         MVC   MSGWORK(MAPSTML),MAPSTMC   MOVE CALL STOR. MGMT.    018G\n         LA    R1,MSGWORK              GO PRINT LINE.              018G\n         BAL   R8,PRNTLINE             GO PRINT LINE.              018G\nGAPCK    L     R4,VTCMPMEM         GET A(BEGINNING OF MAP MEM).    014G\n         USING EXTDSEC,R4          TELL ASSEMBLER.                 014G\nMAPNEXT  CLI   0(R4),X'FF'         ALL ENTRIES BEEN PROCESSED?     014G\n         BE    ENDMAP              YES, QUIT.                      014G\n         L     R5,EXTADSN              GET A(ASSOCIATED DSN).      014G\n         CLI   MAPK+1,2            WAS A MAP REQUESTED?            015G\n         BE    MAPEXTCK            NO, DONT PRINT MESSAGES.        015G\n         MVI   WORKLINE+4,C' '              CLEAR LINE.            014G\n         MVC   WORKLINE+5(250),WORKLINE+4                          014G\n         MVC   WORKLINE+38(16),MVTOC   PREMOVE MESSAGE.            014G\n         CLI   0(R5),X'04'             CHECK IF VTOC AREA.         014G\n         BE    MAPEXT#                 YES, GOT TYPE AREA.         014G\n         MVC   WORKLINE+38(16),MFREE   PREMOVE MESSAGE.            014G\n         CLI   0(R5),X'05'             CHECK IF FREE AREA.         014G\n         BE    MAPEXT#                 YES, GOT TYPE AREA.         014G\n         MVC   WORKLINE+38(16),MSPLIT  PREMOVE MESSAGE.            014G\n         CLI   0(R5),X'06'             CHECK IF SPLIT AREA.        014G\n         BE    MAPEXT#                 YES, GOT TYPE AREA.         014G\n         MVC   WORKLINE+38(16),MADDL   PREMOVE MESSAGE.            014G\n         MVC   WORKLINE+54(44),0(R5)   YES, MOVE DSNAME.           014G\n         CLI   EXTNUM,0                IS IT 1ST EXTENT?           014G\n         BNE   MAPEXT#                 NO, IT IS ADDL EXTENT.      014G\n         MVI   WORKLINE+38,C' '        CLEAR WORKLINE.             014G\n         MVC   WORKLINE+39(59),WORKLINE+36                         014G\n         MVC   WORKLINE+38(44),0(R5)   YES, MOVE DSNAME.           014G\nMAPEXT#  SR    R7,R7                   CLEAR REG.                  014G\n         IC    R7,EXTNUM               NUMBER OF EXTENT            014G\n         CVD   R7,DOUBLE               CONVERT TO DECIMAL          014G\n         MVC   WORKLINE+6(4),=X'40202120'      AND                 014G\n         ED    WORKLINE+6(4),DOUBLE+6    PUT ON PRINT LINE.        014G\n         CLI   SUBMAP+1,2              WAS REQUEST FOR ABS TRACK?  014G\n         BNE   MAPHEX                  NO, SHOW IT IN HEX.         014G\n*        LH    R7,EXTSTRT              STARTING TRACK OF EXTENT014G039G\n         SR    R7,R7                   CLEAR REG.                  039G\n         ICM   R7,3,EXTSTRT            STARTING TRACK OF EXTENT.   039G\n         VTCEDIT WORKLINE+13,R7,EDIT6                              014G\n*        LH    R7,EXTEND               ENDING TRACK OF EXTENT. 014G039G\n         SR    R7,R7                   CLEAR REG.                  039G\n         ICM   R7,3,EXTEND             ENDING TRACK OF EXTENT.     039G\n         VTCEDIT WORKLINE+22,R7,EDIT6                              014G\n         B     MAPHEXND                CONTINUE, REST OF INFO.     014G\nMAPHEX   DS    0H                                                  039G\n*APHEX   LH    R7,EXTSTRT              STARTING TRACK OF EXTENT014G039G\n         SR    R7,R7                   CLEAR REG.                  039G\n         ICM   R7,3,EXTSTRT            STARTING TRACK OF EXTENT.   039G\n         LA    R1,WORKLINE+13                                      014G\n         BAL   R8,HEXCNVT                                          014G\n*        LH    R7,EXTEND               ENDING TRACK OF EXTENT  014G039G\n         SR    R7,R7                   CLEAR REG.                  039G\n         ICM   R7,3,EXTEND             ENDING TRACK OF EXTENT.     039G\n         LA    R1,WORKLINE+22                                      014G\n         BAL   R8,HEXCNVT                                          014G\nMAPHEXND DS    0H                                                  039G\n*APHEXND LH    R7,EXTLEN               LENGTH IN TRACKS OF EXT.014G039G\n         SR    R7,R7                   CLEAR REG.                  039G\n         ICM   R7,3,EXTLEN             LENGTH IN TRACKS OF EXT.    039G\n         VTCEDIT WORKLINE+31,R7,EDIT6                              014G\n         LA    R1,WORKLINE             GO PRINT LINE.              014G\n         BAL   R8,PRNTLINE             GO PRINT LINE.              014G\nMAPEXTCK CLI   EXTL(R4),X'FF'      AM I ON LAST ENTRY?             014G\n         BE    MAPOKEXT            YES, SKIP OVERLAP GAP CHECK.    014G\n         MVI   WORKLINE+4,C' '              CLEAR LINE.            014G\n         MVC   WORKLINE+5(250),WORKLINE+4                          014G\n*        LH    R0,EXTSTRT+EXTL     GET START TR OF NEXT EXT.   014G039G\n         SR    R0,R0                   CLEAR REG.                  039G\n         ICM   R0,3,EXTSTRT+EXTL   GET START TR OF NEXT EXT.       039G\n*        LH    R5,EXTEND           GET END TR OF CURRENT EXT.  014G039G\n         SR    R5,R5                   CLEAR REG.                  039G\n         ICM   R5,3,EXTEND         GET END TR OF CURRENT EXT.      039G\n         LA    R5,1(R5)            SHOULD ONLY BE ONE TRACK        014G\n*                                   DIFFERENCE IN EXTENTS IF OK.   014G\n         CR    R0,R5               COMPARE EXTENT ADDRESSES.       014G\n         BE    MAPOKEXT             EQUAL- NO GAPS OR OVERLAP.     014G\n         BP    MAPGPEXT             HIGH- WE HAVE AN GAP.          014G\n*                                   LOW- WE HAVE OVERLAP.          014G\n         SR    R5,R0               FIND LENGTH OF OVERLAP.         014G\n         LR    R7,R0               SET START TRACK NUMB.           014G\n         MVC   WORKLINE+29(17),=C' TRKS,START CCHH='               015G\n         LA    R1,WORKLINE+46       WHERE TO PUT HEX VALUE.        015G\n         BAL   R8,HEXCNVT           GO CONVERT VALUES TO HEX.      014G\n         MVC   WORKLINE+5(10),=C'---OVERLAP'                       014G\n         B     MAPNGEXT                                            014G\nMAPGPEXT EQU   *                    R5=START NEXT EXTENT+1         014G\n         TM    DS4VTOCI,DS4IVTOC    IS THERE AN INDEXED VTOC?      014G\n         BO    MAPOKEXT             YES, SKIP MESSAGE.             014G\n         CLI   LIMITK+1,0          WAS LIMIT SPECIFIED?            015G\n         BNE   MAPOKEXT            YES, CANT CHECK GAPS.           015G\n         CLI   LEVKEY+1,0          WAS LEVEL SPECIFIED?            015G\n         BNE   MAPOKEXT            YES, THEN I CANT CHECK GAPS.    015G\n         CLI   NLEVKEY+1,0         WAS NOTLEVEL SPECIFIED?         015G\n         BNE   MAPOKEXT            YES, THEN I CANT CHECK GAPS.    015G\n         CLI   CONTAINK+1,0        WAS CONTAINING SPECIFIED?       015G\n         BNE   MAPOKEXT            YES, THEN I CANT CHECK GAPS.    015G\n         CLI   NCONKEY+1,0         WAS NOTCONTAINING SPECIFIED?    015G\n         BNE   MAPOKEXT            YES, THEN I CANT CHECK GAPS.    015G\n         CLI   ENDKEY+1,0          WAS END SPECIFIED?              015G\n         BNE   MAPOKEXT            YES, THEN I CANT CHECK GAPS.    015G\n         CLI   NENDKEY+1,0         WAS NOTEND SPECIFIED?           015G\n         BNE   MAPOKEXT            YES, THEN I CANT CHECK GAPS.    015G\n         MVC   WORKLINE+5(10),=C'---GAP    '  NO, CHECK GAPS.      015G\n         LR    R7,R0                UPPER GAP TRACK NUMB.          014G\n         BCTR  R7,0                 GET ENDING TRACK OF GAP.       014G\n         MVC   WORKLINE+56(9),=C'END CCHH='                        015G\n         LA    R1,WORKLINE+65       WHERE TO PUT HEX VALUE.        015G\n         BAL   R8,HEXCNVT           GO CONVERT VALUES TO HEX.      014G\n         LR    R7,R5                LOWER GAP TRACK NUMB.          014G\n         MVC   WORKLINE+29(17),=C' TRKS,START CCHH='               015G\n         LA    R1,WORKLINE+46       WHERE TO PUT HEX VALUE.        015G\n         BAL   R8,HEXCNVT           GO CONVERT VALUES TO HEX.      014G\n         SR    R0,R5                FIND LENGTH OF GAP.            014G\n         LPR   R5,R0                FIND LENGTH OF GAP.            014G\nMAPNGEXT VTCEDIT WORKLINE+23,R5,EDIT6  LENGTH OF GAP/OVERLAP.      015G\n         MVC   WORKLINE+16(6),VOLID   MOVE VOLSER.                 015G\n         LA    R1,WORKLINE             GO PRINT LINE.              014G\n         BAL   R8,PRNTLINE             GO PRINT LINE.              014G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            016G\n         MVC   MSGWORK+5(250),MSGWORK+4 C                          016G\n         MVC   MSGWORK(MAPSTML),MAPSTMC   MOVE CALL STOR. MGMT.    016G\n         LA    R1,MSGWORK              GO PRINT LINE.              016G\n         BAL   R8,PRNTLINE             GO PRINT LINE.              015G\n         MVI   WORKLINE+4,C' '              CLEAR LINE.            015G\n         MVC   WORKLINE+5(250),WORKLINE+4                          015G\nMAPOKEXT LA    R4,EXTL(R4)             BUMP TO NEXT EXTENT ENTRY.  014G\n         B     MAPNEXT                 GO GET NEXT EXTENT TO MAP.  014G\nENDMAP   MVC   LINECT,LINEMAX          MAKE SURE TO DO HEADINGS.   014G\n         B     VTRET                   THEN GET OUT OF HERE.       014G\n***************************************\n* ROUTINE TO CONVERT TO PRINTABLE HEX *\n***************************************\n*   INPUT IS IN R7,RETURN TO R8 ADDR  *\n*   WORK REG IS R6                    *\n***************************************\nHEXCNVT  SR    R6,R6                    GET READY FOR DIVISION     014G\n         STH   R6,DOUBLE                ZERO FIRST 2 BYTES         014G\n         MVC   DOUBLE+2(2),DS4DEVSZ+2   MOVE TRACKS/CYL            014G\n         D     R6,DOUBLE                TRK#=R6 CYL#=R7            014G\n         SLL   R7,16                    GET READY FOR CCHH         014G\n         OR    R7,R6                    CCHH NOW IN R7             014G\n         ST    R7,DOUBLE                GET READY FOR CONVERSION   014G\n         UNPK  0(9,R1),DOUBLE(5)        MAKE EBCDIC                014G\n         TR    0(8,R1),HEXTABEL-240     CONVERT FA-->FF TO CHAR    014G\n         MVI   9(R1),C' '               FIX BAD CHAR               014G\n         BR    R8                       RETURN                     014G\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*              ADDTOT - ADD TO THE CURRENT TOTALS\n*              PRNTOT - PRINT OUT THE TOTALS AND CLEAR THEM\n*              PRINT  - PRINT OUT AN ENTRY\n*              OUTPUT - OUTPUT THE DATA SET ENTRY\n*              PDLNUM - GET A NUMBER FROM A PDL ENTRY\n*              PRNTLINE - INTERNAL ROUTINE TO COUNT LINES, OUTPUT HEAD\n*\nADDTOT   L     R1,TOTDS       NUMBER OF DATA SETS\n         LA    R1,1(R1)       ADD ONE\n         ST    R1,TOTDS       STORE IT BACK\n         L     R1,TOTALLOC    TOTAL ALLOCATION\n         A     R1,VTFALLOC    ADD IN THIS DATA SET\n         ST    R1,TOTALLOC    STORE IT BACK\n         L     R1,TOTUSED     TOTAL USED SPACE\n         A     R1,VTFUSED     ADD IN THIS DATA SET\n         ST    R1,TOTUSED     STORE IT BACK\n         BR    R8             RETURN\n*\n         EJECT\n*\n*        PRINT THE TOTALS\n*              FIRST FORMAT THEM, THEN PUT THE LINE OUT TO SYSOUT\n*              OR USE VTOCMSG TO LIST IT\n*\nPRNTOT   ST    R8,PRNTTOT8   SAVE THE RETURN ADDRESS\n         MVC   MSGWORK(MSGTOTL),MSGTOTC  INIT THE MSG\n         CONV  MSGWORK+4+11,TOTDS,5  CONVERT NO OF DATA SETS\n         CONV  MSGWORK+4+28,TOTALLOC,8  CONVERT ALLOCATION\n         CONV  MSGWORK+4+51,TOTUSED,8   CONVERT USED SPACE\n         MVC   MSGWORK+4+37(6),SPACTYPE MOVE IN THE UNITS\n         MVC   MSGWORK+4+60(6),SPACTYPE MOVE IN THE UNITS\n*\n*        NOW OUTPUT THE MESSAGE\n*\n         CLI   MAPK+1,2       WAS A MAP REQUESTED?                 018G\n         BE    PRNTOTOK       NO, PRINT TOTALS.                    018G\n         CLI   PRINTK+1,2     IS THIS NOPRINT IN ADDITION?         018G\n         BE    PRNTOTSK       YES, SKIP THE TOTALS.                018G\nPRNTOTOK MVI   MSGWORK+4,C'0' ADD A CARRIAGE CONTROL\n         LA    R1,MSGWORK     POINT TO THE TOTAL LINE\n         BAL   R8,PRNTLINE    PUT OUT THE TOTAL LINE\nPRNTOTSK MVI   TOTLAST,1      NOTE THAT A TOTAL WAS THE LAST ITEM\n         SR    R1,R1          ZERO FOR CLEARING TOTALS.            013G\n         ST    R1,TOTDS       STORE IT BACK.                       013G\n         ST    R1,TOTALLOC    STORE IT BACK.                       013G\n         ST    R1,TOTUSED     STORE IT BACK.                       013G\n         L     R8,PRNTTOT8    GET THE RETURN ADDRESS\n         BR    R8             THEN RETURN\n         EJECT\n*\n*        PRINT OUT THE FORMATTED DSCB\n*              FIRST FORMAT IT\n*\nPRINT    ST    R8,PRINTR8     SAVE REGISTER 8 FOR RETURNING\n         MVI   WORKLINE+4,C' ' BLANK OUT THE LINE\n         MVC   WORKLINE+5(250),WORKLINE+4 SO INDIVIUAL FIELDS DON'T\n         L     R2,VTPRNTLS   GET THE PRINT ITEM LIST\n         LA    R1,WORKLINE+4  POINT TO THE WORK  LINE\nPRTLOOP  SR    R6,R6          GET THE RESERVED WORD NUMBER\n         IC    R6,0(R2)       FROM THE TOP BYTE\n         MH    R6,H12         MULTIPLY BY 12 FOR THE TABLE ENTRIES\n         LA    R6,TABTITL(R6) THEN RELOCATE THE MESS\n         SR    R7,R7          CLEAR A REGISTER\n         IC    R7,0(R6)       GET THE EXECUTE LENGTH\n         LA    R5,1(R1)       SAVE A PLACE TO MOVE FIELD INTO\n         LA    R1,1(R1,R7)    MOVE THE POINTER OVER\n         LA    R0,WORKLINE+4  POINT TO THE BEGINNING AGAIN\n         SR    R1,R0          AND FIND THE CURRENT LENGTH\n         CH    R1,LINELEN     IS IT TOO LONG?\n         BNL   PRTEND         YES, WE'RE DONE\n         AR    R1,R0          NO, KEEP GOING\n*\n*        MOVE IN OR CONVERT THIS ITEM\n*\n         SR    R14,R14       CLEAR A REG FOR LENGTH OF RTN NO\n         IC    R14,1(R6)     GET THE LENGTH OR ROUTINE\n         N     R14,F127      CLEAR THE TOP BIT\n         SR    R15,R15       CLEAR A REG FOR VTFMT\n         IC    R15,2(R6)       DISPLACEMENT\n         AR    R15,R3        RELOCATE IT\n*\n*        DECIDE WHERE TO PUT IT\n*\n         TM    1(R6),X'80'   IS IT IN CHARS\n         BNO   PRTRTN        NO, USE THE SPECIAL ROUTINE\n         SR    R7,R14        GET THE DIFFERENCE IN LENGTHS\n         SRL   R7,1          GET HALF THE DIFFERENCE\n         AR    R5,R7         PUT THE DATA HERE\n         EX    R14,PRTMOVE   MOVE IN THE CHARACTERS\nPRTINC   LA    R2,1(R2)            GET THE NEXT CHAIN POINTER\n         CLI   0(R2),0       ARE WE DONE?\n         BNE   PRTLOOP        GO GET MORE ITEMS\nPRTEND   LA    R1,WORKLINE   POINT TO THIS LINE\n         BAL   R8,PRNTLINE   THEN GO PRINT IT\n         L     R8,PRINTR8     GET THE RETURN ADDRESS\n         BR    R8             RETURN\nPRTMOVE  MVC   0(0,R5),0(R15)  EXECUTED MOVE\n*\n*        VARIOUS ROUTINES TO FORMAT BEFORE MOVING IN THE DATA\n*\nPRTRTN   LTR   R14,R14       BE SURE THE OFFSET IS OK\n         BP    PRTRTN1        IT SEEMS ALL RIGHT\n         ABEND 701,DUMP       CRASH AND BURN\nPRTRTN1  B     *(R14)        GO DO YOUR THING\n         B     PRDATES        4  CDATE, EXPDT, LSTUS         002S 012G\n         B     PRCCHH         8  CCHH                        012G 026G\n         B     PRALLOC       12  ALLOC, USED\n         B     PRUNUSED      16  ALLOC - USED\n         B     PRPCT         20  100 * USED / ALLOC\n         B     PREXT         24  EXT\n         B     PRBLREC       28  BLKSZ LRECL\n         B     PRDSN         32  DSNAME\n         B     PRKEY         36  KEY LENGTH.                       035G\n*\n*\n*        CDATE AND EXPDT *** AND LAST USE DATE: MVS SU60***       002S\n*\nPRDATES  SR    R14,R14       CLEAR REG FOR YEAR\n         IC    R14,0(R15)    GET THE YEAR\n         USING DUMMD,R5      ALLOW CONV TO USE SYMBOL\n         CONV  DUMMA,(R14),2 CONVERT YEAR\n         CLC   DUMMA(2),STARS DID WE OVERFLOW?                     DHC2\n         BNE   *+4+6         NO, CONTINUE                          DHC2\n         MVC   DUMMA(2),CHARS+16-2 YES, BUT REPLACE YEAR VALUE     DHC2\n         ICM   R14,B'0011',1(R15)  GET THE DAY\n         CONV  DUMMA+2,(R14),3,EDMASK0,COMP0  CONVERT THE DAY\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*\n*        CCHH NOT ALLOWED ON PRINT LINE ISSUE ERROR MESSAGE        026G\n*\nPRCCHH   DS    0H                                                  026G\n         MVI   MSGWORK+4,C' '               CLEAR LINE.            026G\n         MVC   MSGWORK+5(250),MSGWORK+4                            026G\n         MVC   MSGWORK(MNCCHHCL),MNCCHHC MOVE MESSAGE.             026G\n         LA    R1,MSGWORK                   GET A(PRINT LINE).     026G\n         BAL   R8,PRNTLINE                  PRINT IT.              026G\n         B     PRTINC        GO GET MORE PRINT ITEMS               026G\n*\n*        LAST USE DATE *** FORMERLY USED THIS CODE: SEE MOD 002S   002S\n*                                                                  002S\n*PRLSTUS MVC   CHARS,EDMASK   SET UP THE EDIT MASK                 002S\n*        ED    CHARS(6),0(R15)  CONVERT TO CHARACTERS              002S\n*        MVC   0(5,R5),CHARS+1  THEN MOVE THEM IN                  002S\n*        B     PRTINC        GO GET MORE PRINT ITEMS               002S\n*                                                                  002S\n*        ALLOCATION AND USED\n*\nPRALLOC  ICM   R14,B'1111',0(R15)  GET THE AMOUNT\n         BM    PRUNKN6       IF NEGATIVE, IT'S NOT KNOWN\n         CONV  DUMMA,(R14),6 CONVERT THE NUMBER\n         B     PRTINC        GO GET MORE PRINT ITEMS\nPRUNKN6  MVC   0(6,R5),BLANKS  UNKNOWN AMOUNT, LEAVE IT BLANK\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        UNUSED SPACE\n*\nPRUNUSED ICM   R14,B'1111',VTFUSED  GET THE   USED SPACE\n         BM    PRUNKN6       IF NOT KNOWN, SKIP ALONG\n         CLC   VTFDSORG(2),=C'VS'   IF VSAM SHOW UNKNOWN           010G\n         BE    PRUNKN6                                             010G\n         CLC   VTFDSORG(2),=C'IS'   IF ISAM SHOW UNKNOWN           010G\n         BE    PRUNKN6                                             010G\n         L     R14,VTFALLOC  GET THE ALLOCATED SPACE\n         S     R14,VTFUSED   MINUS THE USED SPACE GIVES UNUSED\n         BZ    PRTINC        IF NO UNUSED SPACE, LEAVE BLANK\n         CONV  DUMMA,(R14),6 CONVERT FOR PRINTING\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        PCT - PERCENTAGE USED\n*\nPRPCT    SR    R6,R6         CLEAR THE TOP PART OF THE NUMBER\n         ICM   R7,B'1111',VTFUSED   GET THE AMOUNT OF USED SPACE\n         BM    PRUNKN3       IF NOT KNOWN, LEAVE BLANK\n         CLC   VTFALLOC,ZERO IS THE ALLOCATION ZERO?\n         BNE   PRPCTM        NO, DO THE STANDARD STUFF\n         CLC   VTFUSED,ZERO  IS THE USED SPACE ZERO?\n         BE    PRUNKN3       YES, JUST USE BLANKS\nPRPCTERR MVC   0(3,R5),=C'ERR'  NO, IT'S AN ERROR\n         B     PRTINC        THEN GO TRY FOR MORE\nPRPCTM   M     R6,F100       MULTIPLY BY 100 FOR PERCENT\n         D     R6,VTFALLOC   DIVIDE BY ALLOC TO GET THE PERCENT\n         LTR   R7,R7         IS IT LESS THAN ZERO?\n         BM    PRPCTERR      YES, FLAG THE ERROR\n         C     R7,F100       ALSO CHECK FOR OVER 100 PERCENT\n         BH    PRPCTERR      THAT'S ALSO AN ERROR\n         CONV  DUMMA,(R7),3  CONVERT FOR PRINTING\n         B     PRTINC        GO GET MORE PRINT ITEMS\nPRUNKN3  MVC   0(3,R5),BLANKS BLANK THE UNKNOWN\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        EXTENTS\n*\nPREXT    SR    R14,R14       CLEAR REG FOR EXTENTS\n         IC    R14,0(R15)    GET THE EXTENTS\n*        CONV  DUMMA,(R14),2 CONVERT THE EXTENTS\n         CONV  DUMMA,(R14),3 CONVERT THE EXTENTS                  030G\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        LRECL AND BLKSZ\n*\nPRBLREC  LH    R14,0(R15)    GET THE DATA ( HALFWORD )\n         CONV  DUMMA,(R14),5  CONVERT THE DATA\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*                                                                  035G\n*        KEY LENGTH                                                035G\n*                                                                  035G\nPRKEY    SR    R14,R14       CLEAR REG FOR KEY LENGTH.             035G\n         IC    R14,0(R15)    GET THE KEY LENGTH.                   035G\n         CONV  DUMMA,(R14),3 CONVERT THE KEY LENGTH.               035G\n         B     PRTINC        GO GET MORE PRINT ITEMS.              035G\n*\n*        DATA SET NAME\n*\nPRDSN    LH    R14,VTFDSNL   GET THE DSNAME LENGTH\n         CH    R14,DSNLENGT  CHACK FOR MAX LENGTH\n         BL    PRDMOVE       THIS DSN IS SHORT ENOUGH\n         LH    R14,DSNLENGT  CUT IT DOWN\nPRDMOVE  BCTR  R14,0         COUNT DOWN ONE FOR THE EX\n         EX    R14,PRTMOVE   MOVE IN THE DSNAME\n         AH    R1,DSNLENOF   CORRECT THE LINE POINTER\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*                                                                  033G\n*        EFF - EFFICIENCY OF SPACE USAGE                           033G\n*                                                                  033G\n*        MAJOR FORMULAS USED ARE ADJUSTED FOR EACH VOLUME TYPE     033G\n*                                                                  033G\n*                     (TOTAL TRACKS USED) * (TRACK EFF)            033G\n*        TOTAL EFF =  ----------------------------------------     033G\n*                               (TRACKS ALLOCATED)                 033G\n*                                                                  033G\n*                     (BLOCK LENGTH) * (# OF BLOCKS PER TRACK)     033G\n*        TRACK EFF =  ----------------------------------------     033G\n*                               (TRACK LENGTH)                     033G\n*                                                                  033G\n*        3380 FORMULA                                              033G\n*        ------------                                              033G\n*                                                                  033G\n*                   1499      G=7         KEYLEN+E     DATALEN+E   033G\n*        BLK/TRK=  -------    E=12   K= G+--------  D= ---------   033G\n*                   C+K+D     C=15           32            32      033G\n*                                                                  033G\n*        3375 FORMULA                                              033G\n*        ------------                                              033G\n*                                                                  033G\n*                   1125                KEYLEN     DATALEN         033G\n*        BLK/TRK=  -------  C=12     K= ------  D= -------         033G\n*                   C+K+D                 32         32            033G\n*                                                                  033G\n*        3350 FORMULA                                              033G\n*        ------------                                              033G\n*                                                                  033G\n*                   19254    C=185 IF KEYLEN=0                     033G\n*        BLK/TRK=  -------   C=267 IF KEYLEN\u00ac= 0                   033G\n*                   C+K+D    K=KEYLEN                              033G\n*                            D=DATALEN                             033G\n*                                                                  033G\n*        3330 FORMULA                                              033G\n*        ------------                                              033G\n*                                                                  033G\n*                   13165    C=135 IF KEYLEN=0                     033G\n*        BLK/TRK=  -------   C=191 IF KEYLEN\u00ac=0                    033G\n*                   C+K+D    K=KEYLEN                              033G\n*                            D=DATALEN                             033G\n*                                                                  033G\n         EJECT\n*\n*        OUTPUT THE JCL TO DELETE THE DATASET                  004G036G\n*                                                                  036G\n*OUTPUT   ST    R8,OUTPUTR8     SAVE RETURN ADDRESS.           006G036G\n*         VTCLEAR OUTWORK       CLEAR THE OUTPUT REC           006G036G\n*        CLC   VTFVOLUM(4),=C'HSP0' IS IT A PRODUCTION PACK?   006G034G\n*        BNE   NOTHSP0              NO.                        006G034G\n*        CLI   PRIVATEK+1,2         SHOULD I ALLOW SCRATCH OF  011G034G\n*        BE    NOTHSP0               PRODUCTION PACKS.         011G034G\n*        CLI   VTFCATLG,C'N'        FOR PROD PACKS DATA TO BE  006G034G\n*        BE    NOTHSP0              SCRTCH MUST NOT BE CATLGD. 006G034G\n*        CLI   PRIVATEK+1,2         SHOULD I ALLOW SCRATCH OF  011G034G\n*        BE    NOTHSP0               PRODUCTION PACKS.         011G034G\n*        CLI   VTFCATLG,C'W'        OR WRONGLY CATALOGED       008G034G\n*        BNE   OUTRET                                          008G034G\n*NOTHSP0  LH    R2,VTFDSNL          GET DSNAME LENGTH.         004G036G\n*        CH    R2,H6               CAN I COMPARE SPECIAL DSNS? 006G036G\n*        BL    NOTSPDSN            NO, DON'T CHECK SPECIAL DSN 006G036G\n*        CLC   VTFDSN(5),CSYS1     DON'T SCRATCH \"SYS1.\" PREFIX006G036G\n*        BE    OUTRET                                          004G036G\n*        CLC   VTFDSN(6),CSYSCTL   DON'T SCRATCH \"SYSCTLG\".    006G036G\n*        BE    OUTRET                                          006G036G\n*        CLC   VTFDSN(6),VTFVOLUM  DON'T SCRATCH DSN = VOLSER. 006G036G\n*        BE    OUTRET                                          006G036G\nNOTSPDSN CLC   VTFDSORG(2),=C'VS'  DON'T SCRATCH VSAM.         006G036G\n*        BE    OUTRET                                          006G036G\n*        LH    R2,VTFDSNL     GET THE LENGTH OF THE DSNAME     004G036G\n*        LA    R2,VTFMTL-1(R2)  GET THE FULL LENGTH MINUS ONE  004G036G\n*        EX    R2,OUTMOVE    MOVE IN THE ACTUAL RECORD         004G036G\n*        MVC   OUTWORK(72),JCLDD     MOVE IN BEGIN OF JCL STMT.004G036G\n*        LH    R2,VTFDSNL            GET L(DSNAME).            004G036G\n*        BCTR  R2,0                  DECREMENT FOR EX.         004G036G\n*        EX    R2,OUTMOVE1           MOVE DSNAME.              007G036G\n*        LA    R2,OUTWORK+20(R2)     GET A(BYTE JUST PAST DSN).004G036G\n*        MVI   0(R2),C','            INDICATE JCL CONTINUATION.004G036G\n*        L     R2,JCLSEQ#            GET CURRENT JCL SEQ#.     006G036G\n*        AH    R2,H10                ADD 10.                   006G036G\n*        ST    R2,JCLSEQ#              SAVE IT.                006G036G\n*        CONV  OUTWORK+4,(R2),6,EDMASK0,COMP0  DO DD #         006G036G\n*        CONV  OUTWORK+72,(R2),8,EDMASK0,COMP0 DO SEQ #        006G036G\n*        PUT   JCLDCB,OUTWORK        OUTPUT THE RECORD.        006G036G\n*        MVC   OUTWORK(72),JCLDISP   MOVE DISP JCL.            004G036G\n*        CLI   VTFCATLG,C'C'         IS DSN PROPERLY CATALOGED?004G036G\n*        BE    OUTJCLCT              YES, PUT OUT WITHOUT VOLSE004G036G\n*        MVC   OUTWORK+32(23),JCLVOL    MOVE VOLSER JCL.       004G036G\n*        MVC   OUTWORK+55(6),VTFVOLUM   MOVE VOLUME SERIAL NUMB004G036G\n*OUTJCLCT L     R2,JCLSEQ#            GET CURRENT JCL SEQ#.    006G036G\n*        AH    R2,H10                ADD 10.                   006G036G\n*        ST    R2,JCLSEQ#              SAVE IT.                006G036G\n*        CONV  OUTWORK+72,(R2),8,EDMASK0,COMP0 DO SEQ #        006G036G\n*        PUT   JCLDCB,OUTWORK        OUTPUT THE RECORD.        006G036G\n*        CLI   VTFCATLG,C'E'         WAS THERE A CATALOG ERROR?004G036G\n*        BNE   OUTRET                NO RETURN.                004G036G\n*        MVC   OUTWORK(72),JCLERROR  MOVE JCL ERROR INDICATION.004G036G\n*        L     R2,JCLSEQ#            GET CURRENT JCL SEQ#.     006G036G\n*        AH    R2,H10                ADD 10.                   006G036G\n*        ST    R2,JCLSEQ#              SAVE IT.                006G036G\n*        CONV  OUTWORK+72,(R2),8,EDMASK0,COMP0 DO SEQ #        006G036G\n*        PUT   JCLDCB,OUTWORK        OUTPUT THE RECORD.        006G036G\n*OUTRET   L     R8,OUTPUTR8       RESTORE RETURN ADDR.         006G036G\n*        BR    R8                RETURN.                       006G036G\n*OUTMOVE1 MVC   OUTWORK+19(0),VTFDSN  EXECUTED MOVE OF DSNAME. 007G036G\n         EJECT\n*\n*        PDLNUM - CONVERT FROM CHARACTERS ( EBCDIC ) TO AN INTEGER\n*              BINARY FORM, PASSED BACK VIA REGISTER 15\n*              A PARSE PDE IS THE INPUT AS SHOWN IN THE SAMPLE BELOW\n*                       LA    R1,PDL     POINT TO THE PARSE DECRIPTION\n*                       BAL   R8,PDLNUM  GO CONVERT TO NUMERICS\n*              THE ROUTINE WILL TERMINATE IF IT FINDS NON-NUMERICS\n*                 ANY CHARACTERS OTHER THEN 0-9, +, -\n*              REGISTERS 1, 2, 5, 6, AND 7 ARE USED\n*\nPDLNUM   STM   R1,R8,PDLNSAVE SAVE THE REGISTERS\n         LH    R2,4(R1)       GET THE STRING ADDRESS\n         L     R1,0(R1)       GET THE STRING ADDRESS\n         MVI   PDLMINUS,0     CLEAR THE NEGATIVE NUMBER FLAG\n         SR    R5,R5          CLEAR THE CHARACTER COUNTER\n         SR    R15,R15        CLEAR THE ANSWER\nPDLLOOP  LA    R6,0(R5,R1)    POINT TO THIS DIGIT\n         LA    R5,1(R5)       GET TO THE NEXT DIGIT\n         CR    R5,R2          IS THIS THE END OF THE STRING?\n         BH    PDLFINI        YES, EXIT\n         SR    R7,R7          CLEAR A WORK REGISTER\n         IC    R7,0(R6)       GET THE CHARACTER\n         SH    R7,PDLH240     SUBTRACT THE CHARACTER C'0'\n         BM    PDLSP          IF NEGATIVE, CHECK SPECIAL CHARACTERS\n         MH    R15,PDLH10     IT'S A DIGIT, MULTIPLY PRIOR NUM BY TEN\n         AR    R15,R7         ADD ON THE NEW DIGIT\n         B     PDLLOOP        AND LOOP FOR MORE\n*\n*        CHECK FOR SPECIAL CHARACTERS\n*\nPDLSP    CLI   0(R6),C' '     IS IT A BLANK?\n         BE    PDLLOOP        THEN IT'S OK\n         CLI   0(R6),C'+'     IS IT A PLUS?\n         BE    PDLLOOP        THAT'S ALSO OK\n         CLI   0(R6),C'-'     IS IT A MINUS?\n         BNE   PDLFINI        NO, JUST QUIT\n         MVI   PDLMINUS,1     YES, NOTE IT\n         B     PDLLOOP        AND LOOK FOR MORE\n*\n*        QUIT, AFTER SETTING R15 TO NEGATIVE IF NEEDED\n*\nPDLFINI  CLI   PDLMINUS,1     WAS A MINUS SIGN FOUND?\n         BNE   PDLLEAVE       NO, EXIT\n         LNR   R15,R15        YES, MAKE IT NEGATIVE\nPDLLEAVE LM    R1,R8,PDLNSAVE RESTORE THE REGISTERS\n         BR    R8             RETURN\nPDLH10   DC    H'10'\nPDLH240  DC    H'240'\n         EJECT\n*\n*        PRNTLINE - GET EACH LINE FOR SYSOUT, THEN COUNT THE LINES\n*              OUTPUT HEADERS AND TITLE LINES AS NECESSARY\n*\nPRNTLINE STM   R1,R8,PRTLSAVE SAVE THE REGISTERS\n         TM    SYSOUT+48,X'10' IS SYSOUT OPEN FOR BUSINESS?\n         BNO   PRNTTERM       NO, IT'S NOT OPEN, USE VTOCMSG\n         CLI   HEADK+1,2     NOHEADING REQUEST?\n         BE    PRNTLIN       YES, JUST OUTPUT THE DATA LINE\n*\n*        DO THE LINE COUNTING\n*\n         LH    R2,LINECT      GET THE LINE COUNT\n         CLI   4(R1),C'1'     IS IT REQUESTING A NEW PAGE?\n         BE    PRNTPAGE       YES, DO IT\n         CLI   0(R1),C'-'     SKIP 3 LINES\n         BE    PRNTSKP3       YES, TRY IT\n         CLI   0(R1),C'0'     SKIP 2 LINES?\n         BE    PRNTSKP2       YES, DO IT\n         B     PRNTSKP1       JUST SKIP ONE\nPRNTSKP3 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\nPRNTSKP2 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\nPRNTSKP1 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\n         STH   R2,LINECT      SAVE THE LINE COUNT\n         CH    R2,LINEMAX     DOES THIS OVERFLOW  HE PAGE?\n         BL    PRNTLIN        NO, JUST PUT OUT THIS LINE\n*\n*        PRINT OUT THE PAGE HEADER AND ITEM TITLES\n*\nPRNTPAGE LH    R6,PAGECT      GET THE PAGE COUNT\n         LA    R6,1(R6)       ADD ONE TO IT\n         STH   R6,PAGECT      THEN STORE IT BACK\n         L     R7,PAGEADDR    GET THE PLACE TO PUT THE PAGE\n         USING DUMMD,R7       DUMMY DSECT\n         CONV  DUMMA,(R6),5   GET THE CHARACTERS\n         DROP  R7\n         ST    R1,PRNTLSAV    SAVE THE INPUT REG1\n         MVI   PRNTHD1H+4,C' '              CLEAR LINE.            016G\n         MVC   PRNTHD1H+5(250),PRNTHD1H+4                          016G\n         MVC   PRNTHD1H(PRNTHD1L),PRNTHD1C  INIT THE HEAD MESSAGE. 016G\n         MVC   PRNTHD1H+24(6),VOLID   MOVE VOLSER.                 016G\n         MVC   PRNTHD1H+40(3),ADDR    MOVE DRIVE ADDR.             016G\n         TM    VTCPFUNC,X'02'       SUPPOSED TO BE A NO HEADING?   018G\n         BO    DIDPHEAD             YES, SKIP HEADINGS.            018G\n         TM    VTCPFUNC,X'01'       SUPPOSED TO BE A MAP HEAD? 014G018G\n         BNO   PRNTPVOL         NO, PRINT VOL+ADDR+ITEM HEADINGS.  016G\n         PUT   SYSOUT,MAPHEADD      NO,PRINT MAP VOL INFO.         014G\n         PUT   SYSOUT,MAPTITLD      NO,PRINT MAP TITLE INFO.       014G\n         B     DIDPHEAD                                            014G\nPRNTPVOL PUT   SYSOUT,PRNTHD2D  OUTPUT THE COMMAND HEADER.         016G\n         CLI   SUBSORT+1,2      ARE WE SORTING BY VOLUME?          016G\n         BNE   PRNTPITM         NO, SKIP VOL+ADDR HEADER.          016G\n         PUT   SYSOUT,PRNTHD1D  OUTPUT THE VOL INFO.               014G\nPRNTPITM PUT   SYSOUT,PRNTTITL  OUTPUT THE ITEM TITLES.            016G\nDIDPHEAD L     R1,PRNTLSAV    GET THE ORIGINAL LINE                014G\n         MVI   4(R1),C'0'     ALWAYS SKIP THE FIRST LINE AFTER NEW PAGE\n         LA    R7,5           SET THE LINE COUNT\n         STH   R7,LINECT      SAVE IT FOR LATER\nPRNTLIN  VTCLEAR OUTWORK       CLEAR A PRINT RECORD                001G\n         LH    R6,0(R1)      GET THE RECORD LENGTH\n         SH    R6,H5         MINUS 4 FOR PREFIX, 1 FOR EX\n         LA    R3,4(R1)      POINT TO THE TEXT\n         EX    R6,OUTMOVE2   THEN MOVE IN THE LINE                 007G\n         PUT   SYSOUT,OUTWORK      AND FINALLY PRINT IT\n         B     PRNTLRET       THEN RETURN\nOUTMOVE2 MVC   OUTWORK(0),0(R3)  MOVE LINE TO PRINT.               007G\n*\n*        SIMPLER CHECKING FOR VTOCMSG OUTPUT\n*\nPRNTTERM LH    R2,LINECT      GET THE LINE COUNT\n         LA    R2,1(R2)       IGNORE CARRIAGE CONTROL\n         STH   R2,LINECT      SAVE IT BACK\n         LR    R6,R1          SAVE THE ORIGINAL REG 1\n         MVI   4(R1),C' '    BLANK THE CARRIAGE CONTROL\n         CLI   HEADK+1,2     NOHEADING REQUEST?\n         BE    PRNTTLIN       YES, JUST OUTPUT THE DATA LINE\n         CH    R2,LINEMAX     NEED A NEW TITLE?\n         BL    PRNTTLIN       NO, KEEP GOING\n         TM    VTCPFUNC,X'02'   SUPPOSED TO SKIP HEADINGS?         018G\n         BO    DIDTHEAD         YES, SKIP TITLES.                  018G\n         TM    VTCPFUNC,X'01'   SUPPOSED TO BE A MAP HEAD?     014G018G\n         BNO   PRNTTVOL         NO, OUTPUT VTOC HEADING.           014G\n         VTOCMSG MAPHEADH       NO,  OUTPUT MAP TITLES.            014G\n         VTOCMSG MAPTITLH       NO,  OUTPUT MAP TITLES.            014G\n         B     DIDTHEAD                                            014G\nPRNTTVOL CLI   SUBSORT+1,2      IS THIS A VOLUME SORT?             014G\n         BNE   PRNTTITM         NO, SKIP VOL+ADDR MESSAGE.         014G\n         VTOCMSG PRNTHD1H     PUT OUT THE VOL INFO.                016G\nPRNTTITM VTOCMSG PRNTTITH     PUT OUT ITEM TITLES.                 016G\nDIDTHEAD MVC   LINECT,H2      RESET THE LINE COUNT\nPRNTTLIN VTOCMSG 0(R6)        OUTPUT THE PASSED LINE\nPRNTLRET LM    R1,R8,PRTLSAVE RESTORE THE REGISTERS\n         BR    R8             THEN RETURN\n         EJECT\nPRTINIT  MVI   FIRSTIM,10    FLAG THE INITIALIZATION AS DONE\n         LA    R1,TABTITL    POINT TO THE BUG TABLE\n         ST    R1,ATABTITL   LET CHECK KNOW WHERE IT IS\n*\n*        SET UP THE CHARACTERS FOR TYPE OF SPACE ALLOC.\n*\n         LH    R2,SPACEK      GET THE SPACE TYPE KEYWORD\n         SLA   R2,3           MULTIPLY BY 8\n         LA    R2,TABSPACE(R2)  RELOCATE IT\n         MVC   SPACTYPE,0(R2) SAVE THE CHARACTERS\n*        CLI   PRINTK+1,2     IS THIS NOPRINT?                     020G\n*        BE    NOOPEN         YES, SKIP THE OPEN.                  020G\n         MVC   SYSOUT(SYSOUTL),SYSOUTC  INITIALIZE THE DCB\n         MVI   OPENLIST,X'80' TERMINATE THE LIST\n         LA    R1,JFCB       POINT TO THE JFCB\n         ST    R1,DCBEXIT    AND PUT THE ADDR IN THE DCB EXIT\n         MVI   DCBEXIT,X'87' NOTE IT AS A JFCB EXIT\n         LA    R1,DCBEXIT    POINT TO THE EXIT LIST\n         LA    R2,SYSOUT     AND TO THE DCB FOR ADDRESSABILITY\n         USING IHADCB,R2     TELL THE ASSEMBLER ABOUT IT\n         STCM  R1,B'0111',DCBEXLSA  STUFF IT INTO THE DCB\n         TM    CHARSPL+6,X'80'  CHARS PER LINE ENTERED?\n         BZ    RDJFCB        NO, CONTINUE ALONG\n         LA    R1,CHARSPL    YES, POINT TO THE PDL\n         BAL   R8,PDLNUM     CONVERT TO A NUMBER\n         STH   R15,DCBLRECL  SAVE THE NEW LRECL\n         STH   R15,LINELEN   ALSO THE LINE LENGTH\n         TM    BLKSZSET+6,X'80'  BLOCKSIZE ENTERED?\n         BZ    BLKEQREC      NO, BLOCKSIZE EQUALS LRECL\n         LA    R1,BLKSZSET      POINT TO THE PDL\n         BAL   R8,PDLNUM     GET THE NUMBER\nBLKEQREC STH   R15,DCBPRECL  STUFF IT AWAY\n         DROP  R2            FINISHED WITH THE DCB\nRDJFCB   RDJFCB ((R2)),MF=(E,OPENLIST)  SEE IF IT'S THERE\n         LTR   R15,R15       WAS IT THERE?\n         BNZ   NOOPEN        NO, SKIP ALONG\n         OPEN  ((R2),OUTPUT),MF=(E,OPENLIST)  OPEN THE PRINT DCB\n*\n*        INITIALIZE PRINT VARIABLES\n*\n*        SET LINES/PAGE AND LINESIZE\n*\nNOOPEN   MVC   LINEMAX,DEFLMAX  SET THE DEFAULT NUMBER OF LINES/PAGE\n         TM    LINESPP+6,X'80'     LINES PER PAGE ENTERED?\n         BZ    DEFLINPP     NO, SKIP ON\n         LA    R1,LINESPP    YES, POINT TO THE PDL\n         BAL   R8,PDLNUM     CONVERT TO A NUMBER\n         STH   R15,LINEMAX   AND SAVE IT\nDEFLINPP MVC   LINECT,LINEMAX SET UP TO PAGE ON THE FIRST WRITE\n         TM    CHARSPL+6,X'80'     CHARS PER LINE ENTERED?\n         BO    LENSET        YES, USE IT\n         MVC   LINELEN,DEFLEN SET UP A DEFAULT LENGTH\n         TM    SYSOUT+48,X'10' DO WE USE SYSOUT?\n         BO    LENSET         YES, USE WHAT WE'VE GOT\n*        GET THE TERMINAL LINE SIZE TO SEE IF IT MAKES SENSE\n         GTSIZE\n         LTR   R1,R1          SEE IF IT'S GOOD\n         BZ    LENSET         NO, JUST A ZERO, KEEP THE DEFAULTS\n         BCTR  R1,0           CUT IT DOWN ONE TO AVOID A MESS\n         STH   R1,LINELEN     SAVE THIS LENGTH\n         LTR   R0,R0          FOR DISPLAYS, IT'S SCREEN SIZE\n         BZ    LENSET         KEEP WHAT WE'VE GOT\n         TM    LINESPP+6,X'80'  WAS LINES PER PAGE ENTERED?\n         BO    LENSET           YES, DON'T OVERRIDE IT\n         STH   R0,LINEMAX     AND SAVE THE NEW PAGE LOCATION\nLENSET   DS    0H\n*\n*        SET UP THE PAGE COUNTER\n*\nPAGEAD   LH    R1,LINELEN     GET THE LENGTH OF THE LINE\n*        SH    R1,H10         MINUS TEN CHARACTERS                 031G\n*        SH    R1,H22         MINUS 22 CHARACTERS                  037G\n         SH    R1,H40         MINUS 40 CHARACTERS                  037G\n         LA    R1,PRNTHD2D(R1) THEN RELOCATE IT                    016G\n         VTCLEAR PRNTHD2D       CLEAR THE LINE FIRST           001G016G\n         VTCLEAR PRNTHD1D       CLEAR THE LINE FIRST               016G\n*        MVC   0(4,R1),CPAGE  MOVE IN THE CHARACTERS PAGE          031G\n         MVC   0(16,R1),CDATPAG  MOVE IN THE CHARACTERS DATE+PAGE  031G\n         L     R14,CVTPTR      GET A(CVT).                         031G\n         USING CVTMAP,R14      TELL ASSEMBLER.                     031G\n         MVC   5(6,R1),EDMASK1    MOVE EDIT PATTERN.               031G\n         ED    5(6,R1),CVTDATE+1  MOVE CURRENT DATE.               031G\n         DROP  R14             UNTELL ASSEMBLER.                   031G\n*        LA    R1,5(R1)       MOVE OVER 5 MORE                     031G\n         LA    R1,17(R1)       MOVE OVER 17 MORE TO ACTUAL PAGE #. 031G\n         ST    R1,PAGEADDR    THIS IS THE PLACE\n*\n*        BUILD THE PRINT HEADER LINE\n*\n         TM    HEADING+6,X'80' IS A USER HEADING PRESENT\n         BO    USERHEAD       YES, USE IT\n         MVC   PRNTHD2D(L'DEFHEAD),DEFHEAD  NO, GET A DEFAULT      016G\n*\n*        ADD THE COMMAND BUFFER TO THE HEADING\n*\n         LH    R1,LINELEN    GET THE LINE LENGTHE\n         SH    R1,H32        MINUS SPACES FOR PAGE, START OF HDR\n         BNP   OUTOPEN       IF IT'S SHORT, SKIP ON\n         L     R14,ADDRCBUF  POINT TO THE COMMAND BUFFER\n         CH    R1,0(R14)     COMPARE LENGTHS\n         BL    CBUFBIG       THE COMMAND BUFFER TOO BIG\n         LH    R1,0(R14)     GET THE COMMAND BUFFER SIZE\nCBUFBIG  SH    R1,H5         MINUS 1 FOR EX, 4 FOR CBUF PREFIX\n         EX    R1,MOVEHED    MOVE THE CBUF TO THE DEFAULT HEADER\n         B     OUTOPEN        GO SET UP THE PAGE COUNTER\nUSERHEAD LH    R1,HEADING+4   GET THE LENGTH\n         BCTR  R1,0           MINUS ONE FOR THE EX\n         L     R2,HEADING     POINT TO THE USER HEAD\n         EX    R1,MOVEHEAD    THEN MOVE IT IN\nOUTOPEN  DS    0H\n*\n*        SET UP THE WORK LINE\n*\n         LH    R1,LINELEN    GET THE LINE LENGTH\n         LA    R1,4(R1)      ADD FOUR FOR THE PREFIX\n         STH   R1,WORKLINE   OUTPUT TEXT\n         STH   R1,PRNTTITH    ITEM TITLES\n*\n*        SET UP THE MAH HEADING LINE\n*\n*\n*        GET THE PRINT SPECIFICATION\n*\n         LA    R1,DEFPRNT\n         ST    R1,VTPRNTLS   SAVE THE PRINT ITEM LIST ADDRESS\n         TM    SUBPRTKY+6,X'80'  WERE ANY ITEMS SET UP\n         BE    PRTITSET      NO, THE DEFAULT LIST IS OK\n*\n*        GET THE ADD, REPLACE, DELETE, AND NEW ITEMS\n*        AND BUILD THE NEW LIST\n*\n*        FIRST CONVERT THE ENTERED TEXT INTO NUMERIC KEYS\n*\n         LA    R4,SUBPRTIT   POINT TO THE ITEMS\n         LA    R5,VTPRNTEN   POINT TO THE OUTPUT KEYS\n         LA    R0,VTPRNTEX   POINT TO THE END OF THE LIST\nENTKEY   BAL   R8,GETKEY     GET A KEY\n         STC   R15,0(R5)     SAVE IT\n         CLI   0(R5),X'0F'   WAS THE CAT KEYWORD SPECIFIED?        021G\n         BNE   ENTNCAT       NO.                                   021G\n         MVI   LOCAT,1       INDICATE CAT KEYWORD FOUND.           021G\nENTNCAT  DS    0H                                                  021G\n         LA    R5,1(R5)      GET TO THE NEXT ONE\n         CR    R0,R5         CHECK FOR THE END\n         BNH   ENTKEND       IF THAT'S ALL\n         ICM   R4,7,9(R4)    GET THE CHAIN POINTER\n         BNZ   ENTKEY        AND KEEP GOING IF THERE'S MORE\nENTKEND  DS    0H            THE KEYS ARE ENTERED INTO THE LIST\n*\n*        MERGE THE ENTERED ITEMS AND THE DEFAULT LIST INTO A NEW LIST\n*\n         LA    R6,VTPRNTL    POINT TO THE NEW LIST\n         ST    R6,VTPRNTLS   SAVE IT'S ADDRESS\n         LA    R4,VTPRNTEN   POINT TO THE ENTERED ITEMS\n         LA    R2,DEFPRNT    POINT TO THE DEFAULT LIST\n         LR    R3,R2         POINT TO THE BEGINNING - NO DEFAULT IF NEW\n         L     R1,SUBPRTKY   POINT TO THE KEYWORD\n         CLI   0(R1),C'N'    IS THIS A NEW LIST?\n         BE    PRTINEW       YES, SKIP PAST DEFAULT COPY\n         LA    R3,DEFPRNTE   POINT TO THE END OF THE DEFAULT LIST\n*\n*        ADD, REPLACE, DELETE - COPY THE DEFAULT LIST\n*\nPRTICOPY CR    R2,R3         IS THIS THE END OF THE DEFAULT LIST?\n         BNL   PRTITSET      YES, END OF PROCESSING FOR PRINT ITEMS\n*\n*        CHECK FOR ENTERED ITEMS THAT ARE ALSO\n*              IN THE DEFAULT LIST.\n*\nPRTICDLP CLC   0(1,R2),0(R4) IS THIS THE SAME ITEM\n         BE    PRTIFND       YES, SEE WHAT TO DO\n         LA    R4,1(R4)      NO, GET TO THE NEXT ITEM\n         CLI   0(R4),0       WAS THIS THE LAST ENTERED ITEM?\n         BNE   PRTICDLP      NO, KEEP LOOKING\n         LA    R4,VTPRNTEN   POINT BACK TO THE TOP OF THE LIST\n*\n*        ADD THIS ITEM TO THE NEW LIST\n*\nPRTICSKP MVC   0(1,R6),0(R2) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\nPRTICDEL LA    R2,1(R2)      GO DOWN THE DEFAULT LIST\n         B     PRTICOPY      THEN KEEP ON CHECKING\n*\n*        AN ITEM WAS ENTERED AND WAS IN THE DEFAULT LIST\n*        FOR DELETE, JUST DELETE ITEMS\n*        FOR ADD AND REPLACE, DELETE ALL BUT THE FIRST ITEM\n*              TO AVOID DUPLICATES\n*              IF IT IS THE FIRST ITEM, INSERT THE ENTERED LIST\n*\nPRTIFND  LA    R0,VTPRNTEN   POINT TO THE FIRST ITEM\n         CR    R0,R4         COMPARE WITH THE ITEM FOUND\n         BH    PRTICDEL      NOT THE FIRST ITEM, DELETE IT\n         CLI   0(R1),C'D'    IS THIS DELETE TIME?\n         BE    PRTICDEL      THEN JUST DELETE IT\n         CLI   0(R1),C'R'    IS THIS A REPLACE?\n         BE    PRTIREPA      YES, IGNORE THIS DEFAULT ITEM\n*\n*        ADD THE DEFAULT ITEM FIRST\n*\nPRTIASKP MVC   0(1,R6),0(R2) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\n*\n*        MOVE THE ITEMS IN FROM THE ADD OR REPLACE LIST\n*\nPRTIREPA LA    R2,1(R2)      GET PAST THE DEFAULT LIST ITEM\nPRTIREP  LA    R4,1(R4)      GET PAST THE FIRST ENTRY\nPRTINEXT CLI   0(R4),0       IS THIS THE LAST ITEM?\n         BE    PRTICOPY      YES, SEE ABOUT MORE DEFAULTS\n*\n*        ADD AN ENTERED ITEM TO THE LIST\n*\nPRTINSKP MVC   0(1,R6),0(R4) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\n         B     PRTIREP       GO GET MORE ENTERED ITEMS\n*\n*        NEW LIST, JUST USE IT AS ENTERED\n*\nPRTINEW  LA    R1,VTPRNTEN   POINT TO THE ENTERED LIST\n         ST    R1,VTPRNTLS   THEN SAVE ITS ADDRESS FOR LATER\nPRTITSET DS    0H\n*\n*        BUILD THE TITLE LINE FOR THE DSNAME FIELDS\n*\n         VTCLEAR PRNTTITL        BLANK OUT THE TITLE LINE          001G\n         MVC   PRNTTITL+1(139),PRNTTITL  SO THE WHOLE THING IS GOOD\n         L     R2,VTPRNTLS   GET THE PRINT ITEM LIST\n         LA    R1,PRNTTITL    POINT TO THE TITLE LINE\nTITLOOP  SR    R6,R6          GET THE RESERVED WORD NUMBER\n         IC    R6,0(R2)       FROM THE TOP BYTE\n         MH    R6,H12         MULTIPLY BY 12 FOR THE TABLE ENTRIES\n         LA    R6,TABTITL(R6) THEN RELOCATE THE MESS\n         SR    R7,R7          CLEAR A REGISTER\n         IC    R7,0(R6)       GET THE EXECUTE LENGTH\n         EX    R7,MOVETIT     MOVE IN THE TITLE\n         LA    R1,1(R1,R7)    MOVE THE POINTER OVER\n         CLI   0(R2),DSNAME  IS THIS THE DSNAME KEY\n         BE    TITDSN        YES, SPECIAL PROCESSING\n         LA    R0,PRNTTITL    POINT TO THE BEGINNING AGAIN\n         SR    R1,R0          AND FIND THE CURRENT LENGTH\n         CH    R1,LINELEN     IS IT TOO LONG?\n         BNL   TITOVER        YES, PULL BACK\n         AR    R1,R0          NO, KEEP GOING\nTITINC   LA    R2,1(R2)            GET THE NEXT CHAIN POINTER\n         CLI   0(R2),0       ARE WE DONE?\n         BNE   TITLOOP        GO GET MORE TITLES\n         B     TITEND         ALL DONE\nTITDSN   LR    R6,R1         SAVE THE ADDRESS POINTER\n         LA    R1,DSNPLN     POINT TO THE PDL FOR DSN LENGTH\n         BAL   R8,PDLNUM     GO TRANSLATE IT\n         LTR   R15,R15       WAS IT THERE?\n         BP    TITDSN2       YES, USE IT\n         LA    R15,44        NO, SET THE DEFAULT\nTITDSN2  STH   R15,DSNLENGT  SAVE THE LENGTH\n         SH    R15,H9        SUBTRACT THE 9 CHARS MOVED ALREADY\n*              MINUS ONE FOR EX, PLUS ONE FOR SPACE\n         MVI   0(R6),C' '    GET AN INITIAL BLANK\n         EX    R15,DSNBLMOV  MOVE IN THE BLANKS\n         LA    R1,1(R15,R6)  RESET THE POINTER ( INCLUDE A SPACE )\n         LA    R15,1(R15)    ADD ON THE SPACE CHARACTER\n         STH   R15,DSNLENOF  SAVE THE OFFSET\n         B     TITINC        ALLOW DSNAME TO OVERFLOW THE LINE\n*\n*        TITLE RAN OFF THE END, CUT IT OFF\n*\nTITOVER  SR    R1,R7          SUBTRACT PAST THIS FIELD\n         AR    R1,R0          RELOCATE IT\n         BCTR  R1,0           THEN GET THE LAST CHARACTER\n         MVC   0(9,R1),BLANKS THEN BLANK IT OUT\nTITEND   TM    SYSOUT+48,X'10' IS THE DCB OPEN\n*        BNO   CKOUTPT       NO, TERMINAL OUTPUT, NO CC            036G\n         BNO   VTRET         NO, TERMINAL OUTPUT, NO CC            036G\n         MVI   PRNTTITL,C'0'  ALWAYS SKIP A LINE FOR IT\n         B     VTRET          RETURN.                              036G\n*CKOUTPT  CLI   PURGEK+1,2    JCL OUTPUT THIS RUN?             004G036G\n*        BNE   VTRET          YES, SKIP THE OPEN, JUST RETURN      036G\n*        MVC   JCLDCB(JCLDCBL),JCLDCBC  INITIALIZE THE DCB     004G036G\n*        MVI   OPENLIST,X'80' TERMINATE THE LIST                   036G\n*        OPEN  (JCLDCB,OUTPUT),MF=(E,OPENLIST)  OPEN THE DCB   004G036G\n*        SR    R2,R2          CLEAR JCLSEQ#.                   006G036G\n*        ST    R2,JCLSEQ#                                      006G036G\n*        LA    R6,JCLEXECL    INDICATE NUMBER OF JCL STATEMENTS006G036G\n*        LA    R7,JCLEXEC     GET A JCL TO DO IEFBR14.         006G036G\n*        BAL   R8,PUTEXEC     OUTPUT EXEC AND COMMENT STATEMENT006G036G\n*        B     VTRET          RETURN, INITIALIZATION IS DONE       036G\n*PUTEXEC  L     R2,JCLSEQ#            GET CURRENT JCL SEQ#.    006G036G\n*        AH    R2,H10                ADD 10.                   006G036G\n*        ST    R2,JCLSEQ#            SAVE IT.                  006G036G\n*        CONV  OUTWORK+72,(R2),8,EDMASK0,COMP0 DO SEQ #        006G036G\n*        MVC   OUTWORK(72),0(R7)     MOVE IN STATEMENT.        006G036G\n*        PUT   JCLDCB,OUTWORK        OUTPUT STATEMENT.         006G036G\n*        LA    R7,72(R7)             GO TO NEXT JCL STATEMENT. 006G036G\n*        BCT   R6,PUTEXEC            DO ALL JCL.               006G036G\n*        BR    R8                                              006G036G\n         EJECT\n*\n*        ROUTINE TO CONVERT A TEXT DSCB ITEM\n*        INTO ITS KEY NUMBER\n*        INPUT IS REG 4 - IKJIDENT PTR\n*        OUTPUT IS REG 15 - KEY NUMBER\n*        ENTRY VIA BAL   R8,GETKEY\n*\nGETKEY   L     R1,ATABTITL     POINT TO THE TABLE\n         LA    R1,12(R1)     POINT TO THE FIRST ENTRY\n         LA    R15,1           SET UP THE KEY NUMBER COUNTER\n         L     R6,0(R4)      POINT TO THE ENTERED TEXT\n         ICM   R3,3,4(R4)    GET THE LENGTH OF THE ENTERED TEXT\n         BNP   GETKNOTF      NOT FOUND IF ZERO\n         BCTR  R3,0          MINUS ONE FOR THE EX\nGETKLOOP LA    R2,4(R1)      POINT TO THE COMPARISON TEXT\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\nGETKSTD  EX    R3,GETKCOMP   COMPARE THE KEY TEXT\n*        BE    GETKCAT       I FOUND IT                        003G021G\n         BE    GETKFND       I FOUND IT                            021G\n         LA    R1,12(R1)     GET TO THE NEXT KEY\n         LA    R15,1(R15)    INCREMENT THE KEY COUNTER\n*        CH    R15,H27       CHECK FOR THE END OF THE TABLE    025G035G\n*        CH    R15,H28       CHECK FOR THE END OF THE TABLE    035G040G\n         CH    R15,H29       CHECK FOR THE END OF THE TABLE        040G\n         BNH   GETKLOOP      NOT YET, KEEP LOOKING\n*\n*        KEY WAS NOT FOUND, SEND BACK A ZERO\n*\nGETKNOTF SR    R15,R15       SET UP THE ZERO AND RETURN\n         B     GETKFND                                             003G\n*GETKCAT C     R3,=F'2'      IS KEYWORD LENGTH OF CAT KEYWORD? 003G021G\n*        BNE   GETKFND                                         003G021G\n*        CLC   0(3,R6),=C'CAT'  IS THE CAT KEYWORD SPECIFIED?  003G021G\n*        BNE   GETKFND                                         003G021G\n*        MVI   LOCAT,1       INDICATE CAT KEYWORD FOUND.       003G021G\nGETKFND  BR    R8            JUST RETURN\nGETKCOMP CLC   0(0,R6),0(R2) EXECUTED TEXT COMPARE\n*H27      DC    H'27'                                          025G035G\n*H28      DC    H'28'                                          035G040G\nH29      DC    H'29'                                               040G\n         EJECT\n*\n*        PROGRAM CONSTANTS\n*\nZERO     DC    F'0'\nF100     DC    F'100'\nF127     DC    F'127'\nDEFLMAX  DC    H'60'          DEFAULT LINES PER PAGE\nDEFLEN   DC    H'150'         DEFAULT CHARS PER LINE\nH2       DC    H'2'\nH5       DC    H'5'\n*H6       DC    H'6'                                           006G036G\nH9       DC    H'9'\n*H10      DC    H'10'                                              036G\nH12      DC    H'12'\nH18      DC    H'18'\n*H22      DC    H'22'                                              037G\nH40      DC    H'40'                                               037G\nH32      DC    H'32'\n*F20      DC    F'20'                                          004G036G\nCSYS1    DC    C'SYS1.'\nCSYSCTL  DC    C'SYSCTL'\nMOVETIT  MVC   0(0,R1),3(R6)  MOVE IN THE TITLE\nCOMPKEY  CLC   0(0,R1),VTFDSN  EXECUTED COMPARE\nMOVEHEAD MVC   PRNTHD2D(0),0(R2)                                   016G\nMOVEHED  MVC   PRNTHD2D+21(0),4(R14)  MOVE CMD BUF TO DEFAULT HEADER\nDSNBLMOV MVC   1(0,R6),0(R6)  BLANK OUT THE DSN SPACE IN THE TITLE\n*CPAGE    DC    C'PAGE'                                            031G\nCDATPAG  DC    C'DATE YY.DDD PAGE'                                 031G\nEDMASK   DC    XL16'40202020202020202020202020202120'\nEDMASK0  DC    XL16'F0202020202020202020202020202120'\nEDMASK1  DC    XL6'21204B202020'                                   031G\nSKIP     DC    C'0'\nCOMP0    DC    CL16'0000000000000000'\nBLANKS   DC    CL16'                '\nSTARS    DC    CL16'****************'\nTABSPACE DC    CL8'KBYTES  '\n         DC    CL8'KBYTES'\n         DC    CL8'MBYTES'\n         DC    CL8'TRKS'\n         DC    CL8'CYLS'\n*   ALL THE JCL BELOW WAS COMMENTED OUT FOR 036G.                  036G\n*JCLEXEC  DC    CL72'//XXXMG   JOB (''XXXX,XXXXXXX,XXXX0000''),'   033G\n*        DC    CL72'//     ''TSVTOC - CIS1'','                     033G\n*        DC    CL72'//     CLASS=G,MSGCLASS=X,MSGLEVEL=(1,1)'  017G033G\n*        DC    CL72'/*MAIN SYSTEM=SYS#'                        033G017G\n*        DC    CL72'//VTOCPURG EXEC PGM=IEFBR14'                   004G\n*        DC    CL72'//* DELETION JCL WILL BE GENERATED AS FOLLOWS:'\n*        DC    CL72'//*   1. SYS1. DATASETS CANNOT BE DELETED.'    006G\n*        DC    CL72'//*   2. SYSCTLG DATASETS CANNOT BE DELETED.'  006G\n*        DC    CL72'//*   3. DSN = VOLSER CANNOT BE DELETED.'      006G\n*        DC    CL72'//*   4. VSAM DATASETS CANNOT BE DELETED.'     006G\n*        DC    CL72'//*   5. THE DATASETS MUST MEET CRITERIA ON THE VTOX\n               C STATEMENT.'                                       006G\n*        DC    CL72'//*      (VTOC LE(TESTX) END(DATA) WOULD ALLOW ONLYX\n                DATASETS'                                          006G\n*        DC    CL72'//*      PREFIXED \"TESTX\" AND SUFFIXED \"DATA\" TO APX\n               PEAR ON THE'                                        006G\n*        DC    CL72'//*      DELETE JCL.'                          006G\n*        DC    CL72'//* IF THE CAT PARAMETER WAS SPECIFIED ON THE VTOC X\n               COMMAND THE JCL'                                    006G\n*        DC    CL72'//* WILL BE GENERATED AS FOLLOWS:'             006G\n*        DC    CL72'//*   1. CAT = C (CATALOGED PROPERLY) DSN AND DISP X\n               ONLY.'                                              006G\n*        DC    CL72'//*   2. CAT = N (NOT CATALOGED) DSN, DISP, UNIT ANX\n               D VOLSER.'                                          006G\n*        DC    CL72'//*   3. CAT = W (WRONG - CATALOG POINTS TO ANOTHERX\n                VOLSER)'                                           006G\n*        DC    CL72'//*              SAME AS CAT = N.'             006G\n*        DC    CL72'//*   4. CAT = E (ERROR READING CATALOG ENTRY) SAMEX\n                AS CAT = N.'                                       006G\n*        DC    CL72'//* IF THE CAT PARAMETER WAS **NOT** SPECIFIED ON TX\n               HE VTOC COMMAND'                                    006G\n*        DC    CL72'//* THE JCL WILL BE GENERATED AS FOLLOWS:'     006G\n*        DC    CL72'//*   1. DSN, DISP, UNIT, AND VOLSER IN ALL JCL'\n*        DC    CL72'//*'                                           006G\n*JCLEXECL EQU   (*-JCLEXEC)/72                                     006G\n*JCLERROR DC    C'//****ERROR** ACCESSING CATALOG PREVIOUS '       004G\n*        DC    C' DATASET, VOLSER USED INSTEAD.  '                 004G\n*JCLDD    DC    CL72'//DD000000 DD  DSN='                          004G\n*JCLDISP  DC    CL72'//             DISP=(OLD,DELETE)'             004G\n*JCLVOL   DC    CL23',UNIT=SYSALLDA,VOL=SER='                      004G\n*                                                                  004G\n*                                                                  004G\n*                                                                  004G\n*\n         PRINT NOGEN\nSYSOUTC  DCB   DSORG=PS,DDNAME=VTOCOUT,MACRF=PM,                       X\n               RECFM=FBA,LRECL=150,BLKSIZE=1500\n*JCLDCBC  DCB   DSORG=PS,DDNAME=JCLOUT,MACRF=PM,                       X\n               RECFM=FB,LRECL=80,BLKSIZE=800                       004G\n         PRINT GEN\n         DS    0H\nMADDL    DC    C' ----ADD''L EXT.-'                                014G\nMVTOC    DC    C' $$$-VTOC SPACE-'                                 014G\nMFREE    DC    C' ----FREE SPACE-'                                 014G\nMSPLIT   DC    C' ----SPLIT CYL--'                                 014G\nHEXTABEL DC    C'0123456789ABCDEF'      HEX TRANSLATE TABLE.       014G\nEDIT6    DC    X'402020202120'          TO EDIT MAP DATA.          014G\nEDIT4    DC    X'40202120'              TO EDIT MAP DATA.          018G\n         LTORG\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\nMSGTOTC VTCMSG '  TOTALS -  NNNN DATA SETS, MMMMMMMM UUUUUU ALLOC, LLLLX\n               LLLL UUUUUU USED '                                  001G\nMSGTOTL  EQU   *-MSGTOTC\n*DIRFC   VTCMSG ' ----POSSIBLE VTOC DAMAGE DIRF BIT ON'            018G\nMDIRFC   VTCMSG ' ----POSSIBLE VTOC DAMAGE DIRF BIT ON VOL XXXXXX' 029G\nMDIRFL   EQU   *-MDIRFC                                            018G\n*MIXVTOC  VTCMSG '  ---INDEXED VTOC GAPS NOT CHECKED'         016G 027G\nMIXVTOC  VTCMSG '  ---INDEXED VTOC GAPS NOT CHECKED, FREE SPACE NOT SHOX\n               WN'                                                 027G\nMIXVTOCL EQU   *-MIXVTOC                                           016G\nMRESTRC  VTCMSG '  ---LIMIT, LEVEL, ETC. SPECIFIED GAPS NOT CHECKED'\nMRESTRL  EQU   *-MRESTRC                                           016G\nPRNTHD1C VTCMSG '     VTOC OF VOLUME VVVVVV ON DRIVE XXX'          016G\nPRNTHD1L EQU   *-PRNTHD1C                                          016G\nMAPSTMC  VTCMSG '---CALL TECH. SERVICES AT 609-695-8283 '  018G031G038G\nMAPSTML  EQU   *-MAPSTMC                                           015G\nMAPHEADC VTCMSG '    MAP OF VOLUME XXXXXX ON DRIVE XXX'            016G\nMAPHEADL EQU   *-MAPHEADC                                          016G\nMAPTITLC VTCMSG '    EXT    FIRST    LAST   LENGTH     DSNAME '    016G\nMAPTITLL EQU   *-MAPTITLC                                          016G\nMNCCHHC  VTCMSG '  ---CCHH NOT ALLOWED IN PRT KEYWORD USE MAP KEYWORD'\nMNCCHHCL EQU   *-MNCCHHC                                           026G\n*        ALL MAPVTC MESSAGES BELOW COURTESY OF 018G                018G\nMAPVTC1C VTCMSG '    $$$-VTOC SPACE DESCRIPTION'\nMAPVTC1L EQU   *-MAPVTC1C\nMAPVTC2C VTCMSG '     NUMBR OF CYL -         AVAIL FMT 0 DSCBS -XXXXXX'\nMAPVTC2L EQU   *-MAPVTC2C\nMAPVTC3C VTCMSG '     TRKS PER CYL -         TRACK LENGTH -     XXXXXX'\nMAPVTC3L EQU   *-MAPVTC3C\nMAPVTC4C VTCMSG '     DSCB PER TRK -         PDS DIR BLKS/TRK-  XXXXXX'\nMAPVTC4L EQU   *-MAPVTC4C\nMAPVTC5C VTCMSG '     AVL ALT TRKS -         NEXT ALT CC HH-          '\nMAPVTC5L EQU   *-MAPVTC5C\nMSGBLC   VTCMSG   '                '                               001G\n*\nDEFHEAD  DC    CL20'1 VTOC COMMAND V 02 '\n*\n*        DEFAULT PRINT LIST\n*\nDEFPRNT  DC    AL1(ALLOC)\n         DC    AL1(UNUSED)\n         DC    AL1(PCT)\n         DC    AL1(EXT)\n         DC    AL1(DSORG)\n         DC    AL1(RECFM)\n         DC    AL1(BLKSZ)\n         DC    AL1(LRECL)\n         DC    AL1(CDATE)\n         DC    AL1(LSTUS)\n         DC    AL1(DSNAME)\n         DC    AL1(VOLUME)\n         DC    AL1(SECQ)\n         DC    AL1(SECT)\n         DC    AL1(ROUND)\n         DC    AL1(PASS)\n         DC    AL1(ACTION)\n         DC    AL1(TYPE)\n         DC    AL1(0)        END OF THE LIST\nDEFPRNTE EQU   *\nDEFPRNTL EQU   *-DEFPRNT\n*\n*        TABLE OF PRINT ITEM LENGTHS AND TITLES\n*\n*        ENTRIES IN THE TABLE FOR EACH FORMATTED ITEM -\n*        FIRST BYTE IS FIELD LENGTH FOR OUTPUT ( MINUS ONE FOR EX )\n*        SECOND BYTE - X'80' BIT INDICATES A CHARACTER FIELD\n*                            THEN BITS 0-7 GIVE VTFMT LENGTH\n*                      OTHERWISE IT'S A KEY TO WHICH ROUTINE TO USE\n*        THIRD BYTE - OFFSET IN FORMATTED DSCB, VTFMT\n*        4-12 TH BYTES, THE TITLE FOR THE FIELD\n*\n*\nTABTITL  DC    XL12'00'  DUMMY ENTRY FOR 0 ADDRESSING\n         DC    AL1(8),AL1(128+7),AL1(VTFACTON-VTFMT),CL9' ACTION  '  1\n         DC    AL1(6),AL1(128+5),AL1(VTFVOLUM-VTFMT),CL9' VOLUME  '  2\n         DC    AL1(5),AL1(000+4),AL1(VTFCREDT-VTFMT),CL9' CDATE   '  3\n         DC    AL1(5),AL1(000+4),AL1(VTFLSTAC-VTFMT),CL9' LSTUS   '  4\n*   DC    AL1(5),AL1(000+8),AL1(VTFLSTAC-VTFMT),CL9' LSTUS   '  4  012G\n         DC    AL1(5),AL1(000+4),AL1(VTFEXPDT-VTFMT),CL9' EXPDT   '  5\n         DC    AL1(6),AL1(00+12),AL1(VTFALLOC-VTFMT),CL9'  ALLOC  '  6\n         DC    AL1(6),AL1(00+16),AL1(VTFALLOC-VTFMT),CL9' UNUSED  '  7\n         DC    AL1(3),AL1(00+20),AL1(VTFALLOC-VTFMT),CL9' PCT     '  8\n         DC    AL1(3),AL1(00+24),AL1(VTFNOEPV-VTFMT),CL9' EXT     '  9\n         DC    AL1(5),AL1(128+2),AL1(VTFDSORG-VTFMT),CL9' DSORG   ' 10\n         DC    AL1(5),AL1(128+4),AL1(VTFRECFM-VTFMT),CL9' RECFM   ' 11\n         DC    AL1(5),AL1(00+28),AL1(VTFBLKSZ-VTFMT),CL9' BLKSZ   ' 12\n         DC    AL1(5),AL1(00+28),AL1(VTFLRECL-VTFMT),CL9' LRECL   ' 13\n         DC    AL1(4),AL1(128+0),AL01(VTFPROT-VTFMT),CL9' PASS    ' 14\n         DC    AL1(3),AL1(128+0),AL1(VTFCATLG-VTFMT),CL9' CAT     ' 15\n         DC    AL1(4),AL1(128+0),AL1(VTFSECAL-VTFMT),CL9' SECT    ' 16\n         DC    AL1(5),AL1(00+28),AL1(VTFSECAM-VTFMT),CL9'  SECQ   ' 17\n         DC    AL1(6),AL1(128+5),AL01(VTFUNIT-VTFMT),CL9' UNIT    ' 18\n*   DC    AL1(4),AL1(00+36),AL1(VTFVOLUM-VTFMT),CL9' UNIT    ' 18  024G\n         DC    AL1(5),AL1(128+0),AL1(VTFROUND-VTFMT),CL9' ROUND   ' 19\n         DC    AL1(4),AL1(128+0),AL1(VTFDSTYP-VTFMT),CL9' TYPE    ' 20\n         DC    AL1(6),AL1(00+12),AL01(VTFUSED-VTFMT),CL9'   USED  ' 21\n*   DC    AL1(8),AL1(00+32),AL1(VTFVOLUM-VTFMT),CL9'   CCHH  ' 22  026G\n         DC    AL1(8),AL1(00+08),AL1(VTFVOLUM-VTFMT),CL9'   CCHH  ' 22\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY3  ' 23\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY4  ' 24\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY5  ' 25\n         DC    AL1(8),AL1(00+32),AL001(VTFDSN-VTFMT),CL9' DSNAME  ' 26\n         DC    AL1(3),AL1(128+0),AL1(VTFUPDAT-VTFMT),CL9' UPDT    ' 27\n* THE NEXT LINE WAS ADDED FOR KEY LENGTH.                          035G\n         DC    AL1(3),AL1(00+36),AL1(VTFKEYLE-VTFMT),CL9' KEYLE   ' 28\n* THE NEXT LINE WAS ADDED FOR OPTCD VALUE.                         040G\n         DC    AL1(7),AL1(128+0),AL1(VTFOPTCD-VTFMT),CL9' OPTCD   ' 29\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         COPY  VTCPARS                                             023G\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nPRNTWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nTOTDS    DS    F              TOTAL COUNTER\nTOTALLOC DS    F              TOTAL ALLOCATION\nTOTUSED  DS    F              TOTAL USED\nFTOTDS   DS    F              FINAL TOTAL DATA SETS\nFTOTALLC DS    F              FINAL TOTAL ALLOC\nFTOTUSED DS    F              FINAL TOTAL USED\nPRNTLSAV DS    A\nPRINTR8  DS    A\nPRNTTOT8 DS    A\n*OUTPUTR8 DS    A              SAVE RETURN ADDR WHILE IN OUTPUT006G036G\nADDREND  DS    A\nPAGEADDR DS    A\nOPENLIST DS    2A             PARM LIST FOR OPEN\nPDLNSAVE DS    8A             REGISTER SAVE AREA FOR PDLNUM RTN\nPRTLSAVE DS    8A             REGISTER SAVE AREA FOR PRNTLINE RTN\nLASTKEY  DS    A              ADDRESS OF LAST KEY FOR SUBTOTALS, BREAKS\nNUMBREAK DS    H              CHARACTERS TO COMPARE FOR BREAK\nNUMTOTAL DS    H              CHARACTERS TO COMPARE FOR SUBTOTALS\n         PRINT NOGEN\nSYSOUT   DCB   DSORG=PS,DDNAME=VTOCOUT,MACRF=PM,                       X\n               RECFM=FBA,LRECL=150,BLKSIZE=1500\nSYSOUTL  EQU   *-SYSOUT\n*JCLDCB   DCB   DSORG=PS,DDNAME=JCLOUT,MACRF=PM,                       X\n               RECFM=FB,LRECL=100,BLKSIZE=6000                 004G036G\n*JCLDCBL  EQU   *-JCLDCB                                       004G036G\nENDTOTAL DS    X              PROGRAM SWITCHES\nENTOTOUT EQU   X'80'          THE FINAL TOTALS HAVE BEEN OUTPUT\nENDTONLY EQU   X'10'          NO SUBTOTALS, END TOTALS ONLY\nNOBREAK  EQU   X'08'          NO BREAKS\nFIRSTIM  DS    X              INITIALIZATION FOR THIS ROUTINE\nPDLMINUS DC    X'00'\nTOTLAST  DS    X\nSPACTYPE DS    CL6          CHARACTERS FOR SPACE UNITS\nDSNLENGT DS    H\nDSNLENOF DS    H\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nMSGWORK  DS    CL256          AREA FOR BUILDING MESSAGES\nWORKLINE DS    CL256          AREA FOR DATA SET\nPRNTHD2H DS    F\nPRNTHD2D DS    CL256          AREA FOR COMMAND VERSION+COMMAND INPUT\nPRNTHD1H DS    F\nPRNTHD1D DS    CL256          AREA FOR HEADER\nPRNTTITH DS    F\nPRNTTITL DS    CL256          AREA FOR ITEM TITLES\nMAPHEADH DS    F\nMAPHEADD DS    CL256          AREA FOR HEADER                      016G\nMAPTITLH DS    F                                                   016G\nMAPTITLD DS    CL256          AREA FOR HEADER                      016G\nMSGBL    DS    CL20           AREA FOR BLANK LINE\nOUTWORK  DS    CL256          WORKING AREA FOR OUTPUT\nDCBEXIT  DS    F\nJFCB     DS    XL176\n         SPACE\nVTPRNTLS DS    A             PRINT ITEM LIST ADDRESS\nVTPRNTL  DS    40C           PRINT ITEM LIST ( IF MODIFIED )\nVTPRNTEN DS    40C\nVTPRNTEX DS    C\n*JCLSEQ#  DS    F                                              004G036G\n         SPACE\n         DS    0D\nLENWORK  EQU   *-PRNTWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         VTCCOM                                                   023G\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTCFMT                                                   023G\n         SPACE 3\n         VTCPDEDS                                                 023G\n         SPACE 3\n         DS    0F                                                 014G\nEXTDSEC  DSECT                DSECT FOR MAP EXTENTS ENTRY.        014G\nEXTADSN  DS    AL4            A(ASSOCIATED DSNAME).               014G\n         DS    X                                                  014G\nEXTNUM   DS    X              NUMBER OF EXTENT.                   014G\nEXTSTRT  DS    H              BEGINNING OF EXTENT.                014G\nEXTEND   DS    H              END OF EXTENT.                      014G\nEXTLEN   DS    H              L(THIS EXTENT IN TRKS).             014G\nEXTL     EQU   *-EXTDSEC      L(EXT ENTRY).                       014G\nDUMMD    DSECT\nDUMMA    DS    C              DUMMY ENTRY TO USE FOR CONV\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n         CVT   DSECT=YES                                           031G\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VTOCSORT": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x82\\t\\x7f\\x00\\x84\\x12O\\x11(\\x00\\x94\\x00\\x8f\\x00\\x0f\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1982-04-07T00:00:00", "modifydate": "1984-05-03T11:28:00", "lines": 148, "newlines": 143, "modlines": 15, "user": "ZTSOMG"}, "text": "         TITLE 'VTOC COMMAND  SORT  ROUTINE'\n***********************************************************************\n*         MODIFICATIONS\n* NUMBER    DATE    PERSON    REASON\n*  001G    050284   GATES     RENAME VTFMT MACRO TO VTCFMT,\n*                              RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                              RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTOCPARS MACRO TO VTCPARS,\n*                              RENAME PDEDSNAM MACRO TO VTCPDEDS,\n*                               RENAME ENTER TO VTCENTER,\n*                              VTOC MORE TRANSPORTABLE.\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND  SORT  ROUTINE                            *\n*                                                                     *\n* FUNCTION -   PUT THIS FORMATTED DSCB INTO THE SORTED LIST.          *\n*                                                                     *\n* OPERATION -  IF THIS IS A NOSORT RUN, JUST CALL THE PRINT ROUTINE.  *\n*              TO BUILD THE SORTED LIST, FIRST DO A SIMPLE HASH       *\n*              ON THE FIRST CHARACTER.  BUILD UP TO 256 SEPARATE      *\n*              LISTS TO SAVE SORT TIME.  THEN SEARCH THROUGH THESE    *\n*              LISTS SEQUENTIALLY.                                    *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, SORTED LIST    *\n*                                                                     *\n* OUTPUT -     THE FORMATTED DSCB IS PLACED INTO THE SORTED LIST.     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*   NOTE - EXTENSION -\n*   THIS VERSION SORTS BY DSNAME ONLY.\n*   HOPEFULLY IT CAN BE MADE TO SORT FOR MULTIPLE KEYS AND MOST OF THE\n*   ITEMS IN VTFMT.\n*\n         EJECT\nVTOCSORT VTCENTER 12,24       DO THE HOUSEKEEPING                  001G\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING SORTWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        IS THIS A NOSORT RUN ?\n*        IF SO, JUST CALL PRINT\n*\n         CLI   SORTK+1,2      IS THIS NOSORT?\n         BNE   GOSORT         NO, KEEP ON TRUCKIN'\n         VTCALL PRNT          YES, CALL PRINT AND GET OUT\n         B     SORTRET        GET OUT OF HERE\n*\n*        PUT THIS ENTRY WHERE IT BELONGS\n*\nGOSORT   L     R3,FORMATAD    POINT TO THE FORMATTED DSCB\n         USING VTFMT,R3       SET ADDRESSABILITY\n         LA    R4,VTFDSN      POINT TO THE FIRST CHARACTER\n         SR    R2,R2          CLEAR A REGISTER\n         IC    R2,0(R4)       GET THE FIRST CHARACTER\n         SLA   R2,2           MULTIPLY BY FOUR\n         LA    R2,VTCSORTH(R2)  POINT TO THE CORRECT LIST\n         ICM   R5,B'1111',0(R2) GET THE HEAD OF THE LIST\n         BNZ   NOTFIRST       IF NON-ZERO, SEARCH THE LIST\n*\n*        FIRST ENTRY ON THE LIST, IT'S EASY\n*\n         ST    R3,0(R2)       START UP THE LIST\n         B     SORTRET        THEN RETURN\n*\n*        FIND A SLOT FOR THIS ENTRY\n*              FIRST GET THE SHORTER DSN LENGTH\n*\nNOTFIRST LH    R1,VTFDSNL     LENGTH OF NEW ENTRY\n         CH    R1,VTFDSNL-VTFMT(R5)  IS IT SMALLER THAN THIS LIST ENTRY\n         BNH   GOTLEN         YES, NEW ONE IS OK\n         LH    R1,VTFDSNL-VTFMT(R5)  NO, GET THE LIST ENTRY LENGTH\nGOTLEN   BCTR  R1,0           SUBTRACT ONE FOR EX\n         EX    R1,COMPDSN     COMPARE THE DSN'S\n         BL    NEXTENT        LIST ENTRY IS LOWER, UP THE CHAIN\n         BE    CHECKLEN       IDENTICAL, SHORTER ONE WINS\n*\n*        THE NEW ENTRY GOES HERE\n*\nINSERT   ST    R3,0(R2)       SAVE THE NEW POINTER\n         ST    R5,VTFNEXT     JUST BEFORE THIS LIST ENTRY\n         B     SORTRET        THEN EXIT\n*\n*        THE DSNAMES ARE IDENTICAL AS FAR AS THEY COMPARE\n*              THE ONE WITH THE SHORTER DSNAME IS FIRST\n*\nCHECKLEN LA    R1,1(R1)       GET BACK TO THE ORIGINAL LENGTH\n         CH    R1,VTFDSNL     IS THIS THE NEW ENTRY LENGTH\n         BE    INSERT         YES, USE IT (TIE GOES TO NEW ENTRY)\n*\n*        GET THE NEXT ENTRY ON THIS LIST\n*\nNEXTENT  LA    R2,VTFNEXT-VTFMT(R5)  POINT BACK TO THIS ENTRY\n         ICM   R5,B'1111',VTFNEXT-VTFMT(R5)  GET THE NEXT ENTRY\n         BNZ   NOTFIRST       THERE IS ONE, CHECK IT\n         ST    R3,0(R2)       LAST ENTRY ON THE LIST, PUT IT THERE\n*\n*        RETURN\n*\nSORTRET  VTCLEAVE EQ,RC=0                                          001G\n*\n*\n*\n*        PROGRAM CONSTANTS\n*\nCOMPDSN  CLC   VTFDSN-VTFMT(0,R5),VTFDSN    EXECUTED COMPARE\n*\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         COPY  VTCPARS                                             001G\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nSORTWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\n         SPACE\n         DS    0D\nLENWORK  EQU   *-SORTWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         VTCCOM                                                    001G\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTCFMT                                                    001G\n         SPACE 3\n         VTCPDEDS                                                  001G\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC370": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x00\\x00\\x00\\x90 \\x8f\\x01\\x02%O\\x10X\\x03(\\x03\\x06\\x03'\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "1990-07-27T00:00:00", "modifydate": "2002-09-11T10:58:00", "lines": 808, "newlines": 774, "modlines": 807, "user": "HERC01"}, "text": "*\n         TITLE 'VTOC - MAIN MODULE'                                017G\n***********************************************************************\n*      MODIFICATIONS\n* NUMBER    DATE    PERSON     REASON\n*  001G    062378   GATES      FIX MACRO ERROR (NAME TOO LONG)\n*  002G    071978   GATES      CORRECT UCB LOOKUP CODE SO UCB ADDR OF\n*                               8XXX WILL NOT CAUSE NEG ADDR.\n*  003G    072278   GATES      CHANGE MSG MACROS TO VTCMSG TO AVOID\n*                               CONFLICT WITH AN EXISTING MSG MACRO.\n*  004S    101678   SAVIT      CHANGE TO ALLOW DISPLAY FOR UNMOUNTED\n*                               VOLUMES=>FULLY SPECIFIED VOLS ARE\n*                               MOUNTED BY DYNAMIC ALLOCATION.  CORRECT\n*                               INCORRECT TEST FOR END OF UCB.\n*  005G    030379   GATES      ADD TEST FOR PUBLIC AND STORAGE MOUNTED\n*                               VOLUMES SO A JCL FILE TO DELETE DATA\n*                               FROM THEM CAN BE GENERATED.\n*  006G    120580   GATES      ADD KEYWORDS FOR 3350, 3330, AND 3330V\n*                               VOLUMES SO A DEVICE TYPE SEARCH CAN\n*                               BE DONE.\n*  007G    042882   GATES      BYPASS ERRORS CAUSED BY VM DISKS.\n*  008G    100783   GATES      ADD KEYWORDS FOR 3380 VOLUMES SO A\n*                               DEVICE TYPE SEARCH CAN BE DONE.\n*  009G    100783   GATES      UPGRADE CODE TO WORK UNDER MVS/XA.\n*  010G    110883   GATES      UPGRADE CODE TO CALL MAP ROUTINE.\n*  011G    111783   GATES      UPGRADE CODE ALWAYS CALL MAP RTN\n*                               SO WE CAN REPORT GAPS AND OVERLAPS.\n*                               THE MAP WILL ONLY BE DISPLAYED IF\n*                               THE USER SAID MAP ON VTOC COMMAND.\n*  012G    112383   GATES      REDEFINE VTCPFUNC VALUES.\n*  013G    112883   GATES      FIX ERRORS WHEN SCANNING GENERIC WHICH\n*                               IS FOLLOWED BY SPECIFIC MSV DIDN'T\n*                               DYNAMICALLY MOUNT THE MSV.\n*  014G    050284   GATES      RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                              RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTOCPARS MACRO TO VTCPARS,\n*                               RENAME ENTER TO VTCENTER,\n*                              RENAME PDEDSNAM MACRO TO VTCPDEDS,\n*                              VTOC MORE TRANSPORTABLE.\n*  015G    051084   GATES      ADD UNIT TYPE FIELD.\n*  016G    051684   GATES      EXPAND WORK AREA FOR VTOCCHEK.\n*  017G    051784   GATES      FIX TITLE TO BE DESCRIPTIVE.\n*  018G    051784   GATES      CHANGE ABSOLUTE CODING TO USE TAGS TO\n*                               MAKE VTOC MORE TRANSPORTABLE.\n*  019G    010688   GATES      TAKE OUT PURGE OPTION. THIS OPTION CAN\n*                               BE DONE BY DIRECTING OUTPUT TO VTOCOUT\n*                               AND MODIFYING IT. THIS AFFECTS 005G\n*                               MOD.\n*  020G    041690   GATES      MAKE UNIT TYPE SEARCH ONLY WORK IF\n*                               THE COMPLETE VOLSER = UNITNAME, LIKE\n*                               3380 NOT 3380XA.\n*  021G    050890   GATES      MAKE COMMAND ONLY WORK FOR PEOPLE WITH\n*                               OPER AUTHORITY.\n*  022G    071494   GATES      UNDO 021G.\n*  023G    042098   GATES      REPLACE 3330 REFERENCE WITH 3390, WE\n*                               AREN'T GOING TO SUPPORT 3330 ANYMORE.\n*  024G    051399   GATES      ADD MISSING 3350 CONSTANT.\n*                                                                     *\n*  DHC1    091902   CARTWRIGHT RE-INSTATE OS370 UCB LOOKUP\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES           *\n*                                                                     *\n* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER OR A BATCH JOB      *\n*              TO LIST THE CONTENTS OF VARIOUS VOLUMES, WITH A        *\n*              FAIR AMOUNT OF SELECTION.                              *\n*                                                                     *\n*                                                                     *\n* OPERATION -  ACCEPT FROM THE TSO USER OR BATCH JOB A COMMAND        *\n*              WITH THE FOLLOWING SYNTAX.  THEN CHECK THE COMMAND     *\n*              AND LOOP THROUGH, GETTING A DSCB, FORMATTING IT,       *\n*              PERFORMING THE DATA SET NAME AND LIMIT CHECKS, AND     *\n*              CALLING AN EXIT ROUTINE IF DESIRED, THEN PUT THE       *\n*              ENTRY IN THE CORRECT SORT SEQUENCE.                    *\n*              FINALLY CALL THE PRINT ROUTINE TO PRINT THE            *\n*              SPECIFIED ITEMS, HEADERS, AND BREAKS, OR JUST          *\n*              THE TOTALS.                                            *\n*                                                                     *\n*                                                                     *\n* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *\n*              POINTED TO BY REGISTER 1                               *\n*                                                                     *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES.                                      *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*              FIREMAN'S FUND INSURANCE  CPSD 2N                      *\n*              ONE LUCAS GREEN                                        *\n*              SAN RAFAEL, CA  94911                                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         MACRO\n&LABEL   VTOCEXCP  &FUNC\n         AIF   ('&FUNC' NE 'EQ').ECALL\nVTCEOPEN EQU   1             DEFINE FUNCTION CODES FOR VTOCEXCP\nVTCECLOS EQU   2\nVTCEREAD EQU   0\n         MEXIT\n.ECALL   ANOP                 CALL VTOCEXCP\n&LABEL   MVI   VTCEFUNC,VTCE&FUNC   SET THE FUNCTION CODE\n         VTCALL EXCP          GO GET A DSCB\n         MEND\n         MACRO\n&LABEL   VTOCMAP   &FUNC                                         010G\n         AIF   ('&FUNC' NE 'EQ').MCALL                           010G\nVTCMOPEN EQU   0              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMADD  EQU   1              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMCLOS EQU   2              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMSORT EQU   3              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\n         MEXIT\n.MCALL   ANOP                 CALL VTOCMAP                       010G\n&LABEL   MVI   VTCMFUNC,VTCM&FUNC   SET THE FUNCTION CODE        010G\n         VTCALL MAP           GO TO MAP ROUTINE.                 010G\n         MEND\n*\n*        MACRO FOR INITIALIZING SUBROUTINE WORK AREA ADDRESSES\n*\n         MACRO\n&LABEL   WORKADDR &RTN,&PARMADD                                    001G\n&LABEL   L     R1,=A(WORK&RTN-WORKAREA)  GET THE OFFSET ( OVER 4K )\n         LA    R1,0(R1,R13)   RELOCATE IT\n         ST    R1,&PARMADD    THEN STORE IT FOR THE ROUTINES       001G\n         MEND\n*\n         EJECT\nVTOCCMD  VTCENTER 12,(1,LENWORK,C)  DO THE HOUSEKEEPING            014G\n         LR    R2,R1          SAVE ADDR OF CPPL\n         SPACE\n         USING WORKAREA,WORKREG\n         EJECT\n         BAL   R14,PARSINIT   PERFORM THE PARSING\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   RETURN         BAD NEWS, GET OUT\n         VTCALL PRNT         INITIALIZE FOR PRINTING\n         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST\n         USING PDL,R9         RETURNED BY PARSE\n*\n*        CHECK THROUGH THE UCB'S TO SELECT THE VOLUMES TO PROCESS\n*\n*\n**  FIND A VOLUME SERIAL NUMBER\n*\n         LA    R3,VOLS        POINT TO THE PDL\nLOOP1    L     R5,0(R3)       GET THE ADDRESS OF THE TEXT\n         LH    R4,4(R3)       ALSO GET ITS LENGTH\n         LTR   R4,R4          FOR EXECUTES, GET THE LENGTH\n         BZ    PHASE2         NO MORE VOLUMES, CONTINUE TO NEXT PHASE\n         BCTR  R4,0           MAKE IT READY FOR THE EX INSTR\n         MVC   VOLSER,BLANKS   INITIALIZE FIELD\n         EX    R4,MOVVOL\n         MVI   FLAG,X'00'     CLEAR TYPE REQUEST FLAG.             013G\n*\n**  VOLUME FOUND - VERIFY AND CHECK FOR GLOBAL OR SPECIAL REQUESTS\n*\n         CH    R4,H5          IS THE ENTIRE NAME THERE?\n         BE    VOLSET         YES, IT'S A SPECIFIC VOLUME\n         MVI   FLAG,X'01'     IT'S A GENERIC REQUEST\n         CH    R4,H2          CHECK FOR THE ALL KEYWORD, FIRST LENGTH\n         BNE   DEVCHEK1       NOT A GLOBAL REQUEST                 006G\n         CLC   0(3,R5),CHARALL  IS THIS THE KEYWORD 'ALL'?\n         BNE   DEVCHEK1       NO, NOT A GLOBAL REQUEST             013G\n         MVI   FLAG,X'02'   GLOBAL REQUEST\n         B     VOLSET\n* CHANGE 023G BELOW\n*EVCHEK1 CH    R4,H3          CHECK FOR THE 3350 OR 3330, FIRST LEN006G\n*        BNE   DEVCHEK3       NOT A 3350 OR 3330 REQUEST           006G\nDEVCHEK1 CH    R4,H3          CHECK FOR THE 3350 OR 3390, FIRST LEN006G\n         BNE   DEVCHEK3       NOT A 3350 OR 3390 REQUEST           006G\n* CHANGE 023G BELOW\n*        CLC   0(4,R5),CHAR3350 IS THIS THE KEYWORD '3350'?    006G020G\n         CLC   0(6,R5),CHAR3350 IS THIS THE KEYWORD '3350'?    006G020G\n         BNE   DEVCHEK2       NO, NOT A 3350                       006G\n         MVI   FLAG,X'18'     INDICATE 3350 REQUEST                006G\n         B     VOLSET                                              006G\n*EVCHEK2 CLC   0(4,R5),CHAR3330 IS THIS THE KEYWORD '3330'?    006G020G\n* CHANGE 023G BELOW\n*EVCHEK2 CLC   0(6,R5),CHAR3330 IS THIS THE KEYWORD '3330'?    006G020G\n*        BNE   DEVCHEK3       NO, NOT A 3330                       006G\n*        MVI   FLAG,X'28'     INDICATE 3330 REQUEST                006G\nDEVCHEK2 CLC   0(6,R5),CHAR3390 IS THIS THE KEYWORD '3390'?        023G\n         BNE   DEVCHEK3       NO, NOT A 3390                       006G\n         MVI   FLAG,X'28'     INDICATE 3390 REQUEST                006G\n* CHANGE 023G ABOVE\n         B     VOLSET                                              006G\n*EVCHEK3 CLC   0(4,R5),CHAR3380 IS THIS THE KEYWORD '3380'?    008G020G\nDEVCHEK3 CLC   0(6,R5),CHAR3380 IS THIS THE KEYWORD '3380'?    008G020G\n         BNE   DEVCHEK4       NO, NOT A 3380                       008G\n         MVI   FLAG,X'48'     INDICATE 3380 REQUEST                008G\n         B     VOLSET                                              008G\nDEVCHEK4 CH    R4,H4          CHECK FOR THE 3350 OR 3330, FIRST LEN008G\n         BNE   VOLSET         NOT A 3330V                          006G\n*        CLC   0(5,R5),CHAR333V IS THIS THE KEYWORD '3330V'?   006G020G\n         CLC   0(6,R5),CHAR333V IS THIS THE KEYWORD '3330V'?   006G020G\n         BNE   VOLSET         NO, NOT A 3330V                      006G\n         MVI   FLAG,X'88'     INDICATE 3330V REQUEST               008G\n         B     VOLSET                                              006G\n*\n**  FIND THE A(UCB)\n*\nVOLSET   XC    LASTADR,LASTADR CLEAR THE UCB COMPARE ADDRESS     009G\n*VOLSET   L     R5,CVTPTR                GET A(CVT).          009G018G\n         L     R5,CVTPTR                GET A(CVT).          009G018G\n         USING CVTMAP,R5                                         018G\n**HC1     INITIALIZE FOR UCB SCAN WITH IOSVSUCB RTN\n*DHC1     L     R6,=A(WORKUCB-WORKAREA)  GET OFFSET OVER 4K.      009G\n*DHC1     LA    R6,0(R6,R13)             RELOCATE IT.             009G\n*DHC1     USING WORKUCBD,R6              TELL ASSEMBLER.          009G\n*DHC1     XC    WORKUCBA(100),WORKUCBA   CLEAR WORK AREA.         009G\n*DHC1     MVI   WORKUCBT,UCB3DACC        SET DASD CLASS.          018G\n*DHC1     LA    R1,WORKUCBA              GET A(UCB WORK AREA).    009G\n*DHC1     ST    R1,WORKUCBP              SAVE A(UCB WORK AREA).   009G\n*DHC1     LA    R1,WORKUCBT              GET A(CLASS OF DEVICES). 009G\n*DHC1     ST    R1,WORKUCBP+4            SAVE A(CLASS OF DEVICES).009G\n*DHC1     LA    R1,LASTADR               GET A(CURRENT UCB).      009G\n*DHC1     ST    R1,WORKUCBP+8            SAVE A(CURRENT UCB).     009G\n*DHC1     OI    WORKUCBP+8,X'80'         SET LAST PARM INDICATION.009G\n**HC1   REINITIALIZE FOR UCB SCAN WITH IOSVSUCB RTN WHEN DOING NEXTUCB\n*NEXTUCB  L     R6,=A(WORKUCB-WORKAREA)  GET OFFSET OVER 4K.      009G\n*DHC1     LA    R6,0(R6,R13)             RELOCATE IT.             009G\n*DHC1     LA    R1,WORKUCBP              GET A(UCB SCAN PARM LIST).009G\n          L     R5,40(R5)   A(UCB ADDRESSES)                      009G\n*DHC1     DROP  R6                                                009G\n         SR    R6,R6                                             002G\nNEXTUCB  ICM   R6,3,0(R5)  A(A UCB)                         002G009G\n         LTR   R6,R6                   CHECK FOR VALID ENTRIES. 009G\n         BZ    INCR1                   UCB HOLE                 009G\n         C     R6,UCBEND  CK FOR END:CHANGED TO REFLECT 002G 004S009G\n         BE    NOTMNT   END OF UCB LIST - VOLUME NOT FOUND      009G\n*DHC1     SLL   R6,16   REMOVE HI-ORDER BITS                     009G\n*DHC1     SRL   R6,16                                            009G\n*DHC1     L     R15,CVTUCBSC    GET A(IOSVSUCB).               009G018G\n         DROP  R5                                                018G\n*DHC1     BALR  R14,R15         GO TO SCAN SERVICE.               009G\n*DHC1     LTR   R15,R15         CHECK FOR END.                    009G\n*DHC1     BNZ   NOTMNT          END OF UCB LIST VOL NOT FOUND.    009G\n*DHC1     L     R6,LASTADR      GET A(CURRENT UCB) FROM SCAN.     009G\n         USING UCB,R6          TELL ASSEMBLER BASE OF UCB.       018G\n         C     R6,LASTADR      UCB ADDRESSES MUST INCREASE.      009G\n         BNH   INCR1           OTHERWISE THEY REPEAT.            009G\n         ST    R6,LASTADR      NEW ADDRESS.                      009G\n         CLI   18(R6),X'20'    MUST BE DIRECT ACCESS             009G\n         BNE   INCR1                                             009G\n         TM    FLAG,X'02'   CHECK FOR GLOBAL\n         BO    FNDGBL   IT IS\n         TM    FLAG,X'01'   CHECK FOR SPECIAL REQUESTS\n         BO    SPECUCB   IT IS\n         TM    FLAG,X'10'   CHECK FOR 3350 TYPE DASD               006G\n         BO    UCB3350   IT IS                                     006G\n* CHANGE 023G BELOW\n*        TM    FLAG,X'20'   CHECK FOR 3330 TYPE DASD               006G\n*        BO    UCB3330   IT IS                                     006G\n         TM    FLAG,X'20'   CHECK FOR 3390 TYPE DASD               006G\n         BO    UCB3390   IT IS                                     006G\n* CHANGE 023G ABOVE\n         TM    FLAG,X'40'   CHECK FOR 3380 TYPE DASD               008G\n         BO    UCB3380   IT IS                                     008G\n         TM    FLAG,X'80'   CHECK FOR 3330V TYPE DASD              008G\n         BO    UCB333V   IT IS                                     006G\n         CLC   VOLSER,UCBVOLI  COMPARE FULL VOLSER.                018G\n         BE    FNDUCB   FOUND IT\n         B     INCR1                                               DHC1\nSPECUCB  EX    R4,CLCVOL   COMPARE FIRST X CHARACTERS ONLY\n         BE    CHKRDY\n*DHC1    B     NEXTUCB        TRY NEXT UCB.                        009G\nINCR1    LA    R5,2(R5)                                           009G\n         B     NEXTUCB   TRY NEXT UCB                             009G\n*\n*        VARIOUS ERRORS, LET THE PERSON KNOW\n*\n*                             MODIFIED FOR DYNAMIC MOUNT.          004S\nNOTMNT   DS    0H                                                  004S\n         TM    FLAG,X'0B'     NEITHER GENERIC NOR GLOBAL:SPECIFIC  004S\n         BZ    VOLNOTUP       ALLOW ALLOC. EVEN IF VOL UNMOUNTED.  004S\n         TM    FLAG,X'04'     WAS A VOLUME  FOUND?\n         BO    NEXTVOL        YES, LOOK FOR THE NEXT SPEC\n         MVC   MSGTEXT2,MSGNOTMT  NO, GET THE ERROR MESSAGE\nSETVOL   MVC   MSGTEXT2+5(6),VOLSER ADD THE VOLUME SERIAL NUMBER\n         VTOCMSG MSGTEXT2     AND ISSUE THE MESSAGE\n         B     NEXTVOL       GO GET THE NEXT VOLUME FROM PARSE\nPENDING  MVC   MSGTEXT2,MSGPEND   SET UP THE MESSAGE\n*\n*        SEE IF THIS IS A GENERIC OR GLOBAL REQUEST\n*\n         TM    FLAG,X'03'    WAS IT ALL OR A PARTIAL VOLUME SERIAL?\n         BNZ   NEXTUCB       IN EITHER CASE, SKIP THE MESSAGE      009G\n*                            THEN FIND MORE VOLUMES\n*\n*        OUTPUT THE OFFLINE PENDING MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\nOFFLINE  MVC   MSGTEXT2,MSGOFFLN SET UP THE MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\n*                                                                  004S\n***** SPECIFIC VOLUME REQUEST AND VOLUME NOT MOUNTED.              004S\n*                                                                  004S\nVOLNOTUP DS    0H                                                  004S\n         MVC   VOLID,VOLSER   COPY VOLSER THAT UCB SEARCH USED.    004S\n         MVC   UNITYP,=C'3330V ' ASSUME IT IS A 3330V TYPE VOL.    015G\n         XC    ADDR,ADDR      UNIT ADDRESS=0: NOT MOUNTED.         004S\n         OI    FLAG,X'04'     INDICATE VOLUME FOUND.               004S\n         B     OPENMAP        ALLOCATE AND READ VTOC.         004S 010G\nUCB3350  CLI   UCBUNTYP,X'0B' 3350 TYPE?                      006G 018G\n         BNE   NEXTUCB        NOPE                            006G 009G\n         B     TESTONRD       GO TEST ONLINE AND READY             006G\nUCB3380  CLI   UCBUNTYP,X'0E' 3380 TYPE?                      008G 018G\n         BNE   NEXTUCB        NOPE                            008G 009G\n         B     TESTONRD       GO TEST ONLINE AND READY             008G\n* CHANGE 023G BELOW\n*CB3330  CLI   UCBUNTYP,X'0D' 3330-11 TYPE?                   006G 018G\n*        BE    TESTONRD       YES, GO SEE NOT 3330V                006G\n*        CLI   UCBUNTYP,X'09' 3330-1 OR 3330V TYPE?                006G\n*        BNE   NEXTUCB        NOPE                            006G 009G\n*ESTNOTV TM    UCBTBYT2,UCBRVDEV DONT WANT VIRT DASD(3330V).  006G 018G\n*        BO    NEXTUCB        IF FOUND SKIP IT                006G 009G\n*        B     TESTONRD       ELSE SEE IF ONLINE READY             006G\nUCB3390  CLI   UCBUNTYP,X'0F' 3390 TYPE?                      006G 018G\n         BNE   NEXTUCB        NOPE                            008G 009G\n         B     TESTONRD       GO TEST ONLINE AND READY             008G\n* CHANGE 023G ABOVE\nUCB333V  CLI   UCBUNTYP,X'09' 3330 TYPE?                      006G 018G\n         BNE   NEXTUCB        NOPE                            006G 009G\n         TM    UCBTBYT2,UCBRVDEV TEST IF VIRTUAL DASD(3330V)  006G 018G\n         BNO   NEXTUCB        NO, SKIP IT FOR 3330V           006G 009G\nTESTONRD EQU   *                                                   006G\n*\n**  FOR GLOBAL REQUESTS JUST LIST ONLINE PACKS\n*\nFNDGBL   TM    UCBSTAT,UCBONLI  CHECK IS IT ONLINE?                018G\n         BZ    NEXTUCB           NOPE.                             009G\n*\n**  FOR GLOBAL AND SPECIAL REQUESTS, CHECK FOR DEVICE READY\n*\nCHKRDY   TM    UCBFLA,UCBNRY     IS IT READY?                      018G\n         BO    NEXTUCB           NO.                               009G\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,UCBVOLI     MOVE VOLID.                       018G\n         MVC   ADDR,UCBNAME      MOVE UNIT ADDRESS.                018G\n         OI    FLAG,X'04'      NOTE THE VOLUME AS FOUND\n* CHANGE 023G BELOW\n         CLI   UCBUNTYP,X'0F' IS IT 3390 DEVICE?\n         BNE   NOT3390          NO.\n         MVC   UNITYP,=C'3390  ' YES.\n         B     CKOFF            CONTINUE.\n*        CLI   UCBUNTYP,X'01' IS IT 2311 DEVICE?              015G 018G\nNOT3390  CLI   UCBUNTYP,X'01' IS IT 2311 DEVICE?              015G 018G\n* CHANGE 023G ABOVE\n         BNE   NOT2311          NO.                                015G\n         MVC   UNITYP,=C'2311  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2311  CLI   UCBUNTYP,X'02' IS IT 2301 DEVICE?              015G 018G\n         BNE   NOT2301          NO.                                015G\n         MVC   UNITYP,=C'2301  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2301  CLI   UCBUNTYP,X'03' IS IT 2303 DEVICE?              015G 018G\n         BNE   NOT2303          NO.                                015G\n         MVC   UNITYP,=C'2303  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2303  CLI   UCBUNTYP,X'04' IS IT 2302 DEVICE?              015G 018G\n         BNE   NOT2302          NO.                                015G\n         MVC   UNITYP,=C'2302  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2302  CLI   UCBUNTYP,X'05' IS IT 2321 DEVICE?              015G 018G\n         BNE   NOT2321          NO.                                015G\n         MVC   UNITYP,=C'2321  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2321  CLI   UCBUNTYP,X'06' IS IT 2305-1 DEVICE?            015G 018G\n         BNE   NOT23051          NO.                               015G\n         MVC   UNITYP,=C'2305-1' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT23051 CLI   UCBUNTYP,X'07' IS IT 2305-2 DEVICE?            015G 018G\n         BNE   NOT23052         NO.                                015G\n         MVC   UNITYP,=C'2305-2' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT23052 CLI   UCBUNTYP,X'08' IS IT 2314 DEVICE?              015G 018G\n         BNE   NOT2314          NO.                                015G\n         MVC   UNITYP,=C'2314  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT2314  CLI   UCBUNTYP,X'09' IS IT 3330 DEVICE?              015G 018G\n         BNE   NOT3330          NO.                                015G\n         MVC   UNITYP,=C'3330  ' YES.                              015G\n         TM    UCBTBYT2,UCBRVDEV IS IT 3330V DEVICE?               015G\n         BNO   CKOFF            NO, ONLY 3330, CONTINUE.           015G\n         MVI   UNITYP+4,C'V'    YES, INDICATE 3330V.               015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3330  CLI   UCBUNTYP,X'0A' IS IT 3340 DEVICE?              015G 018G\n         BNE   NOT3340          NO.                                015G\n         MVC   UNITYP,=C'3340  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3340  CLI   UCBUNTYP,X'0B' IS IT 3350 DEVICE?              015G 018G\n         BNE   NOT3350          NO.                                015G\n         MVC   UNITYP,=C'3350  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3350  CLI   UCBUNTYP,X'0C' IS IT 3375 DEVICE?              015G 018G\n         BNE   NOT3375          NO.                                015G\n         MVC   UNITYP,=C'3375  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3375  CLI   UCBUNTYP,X'0D' IS IT 3330-11 DEVICE?           015G 018G\n         BNE   NOT3331          NO.                                015G\n         MVC   UNITYP,=C'3330-1' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3331  CLI   UCBUNTYP,X'0E' IS IT 3380 DEVICE?              015G 018G\n         BNE   NOT3380          NO.                                015G\n         MVC   UNITYP,=C'3380  ' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\nNOT3380  MVC   UNITYP,=C'UNKNWN' YES.                              015G\n         B     CKOFF            CONTINUE.                          015G\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\nCKOFF    TM    UCBSTAT,UCBCHGS   IS IT PENDING STATUS?        015G 018G\n         BO    PENDING           YES.\n         TM    UCBSTAT,UCBONLI   IS IT ONLINE?                     018G\n         BZ    OFFLINE           NO.\n*        MVI   VOLPORS,0     PRESET NOT PUB OR STOR FOR PURGE. 005G019G\n*        TM    UCBSTAB,UCBBPUB+UCBBSTR  PUB AND STOR BITS  005G018G019G\n*        BNO   OPENMAP       INDICATE JCL FOR PURGE NOT REQ005G010G019G\n*        MVI   VOLPORS,1     JCL FOR PURGE CAN BE GENERATED.   005G019G\n*\n*\n*        WE WILL NOW READ VTOC AND PROCESS VOLUME\n*\n*\n*\n*        GO GET MEMORY TO MAP VOLUME\n*\nOPENMAP  DS    0H             SPECIFIC VOLUME REQUESTS.        004S010G\n         VTOCMAP  OPEN        OPEN THE VTOC MAP.                   010G\n*\n*        NOW GET DSCB'S FROM THE VOLUME\n*\n*\n*        SET UP THE PARM LIST FOR VTOCEXCP\n*\n*                         ARRIVE HERE BY BRANCH FOR UNMOUNTED  004S010G\nOPENVTOC VTOCEXCP OPEN        OPEN THE VTOC.                       010G\n         LTR   R15,R15        DID IT OPEN OK?\n         BNE   ENDVTOC        NO, JUST EXIT                        007G\n         LA    R15,FMT4-8     GET A(VTOC DSCB)-8 TO FOOL MAP.      011G\n         ST    R15,DSCBADDR   SAVE ADDR SO WE CAN MAP.             011G\n         VTOCMAP ADD         ADD VTOC EXTENT TO MAP.               011G\n         LTR   R15,R15        DID IT ADD OK?                       011G\n         BNE   ENDVTOC        NO, JUST EXIT                        011G\nREADDSCB CLI   TABFULL,0     CHECK FOR FULL TABLES\n         BNE   ENDVTOC       IF FULL, TRY END OF VTOC TO CLEAR\n         VTOCEXCP READ        GET A DSCB\n         CH    R15,H4         CHECK THE RETURN CODE\n         BE    ENDVTOC        END OF VTOC\n         BH    RETURN         BAD ERROR, VTOCEXCP GAVE THE MESSAGE\n*\n*        CHECK THE DATA SET QUALIFICATIONS, LIMIT, AND, OR\n*\n         VTCALL CHEK          CALL THE CHECK ROUTINE\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER\n*                             YES, CONTINUE PROCESSING\n*\n*        GATHER THE DATA TO MAP THE VOLUME AND SHOW IF REQUESTED\n*\n         CLI   MAPK+1,2       HAS USER REQUESTED TO SEE MAP?       011G\n         BE    MAPADD         NO, CONTINUE                         011G\n         MVI   SORTK+1,1      YES, INDICATE SORT(VOLUME)           010G\n         MVI   SUBSORT+1,2         INDICATE SORT(VOLUME)           010G\nMAPADD   VTOCMAP ADD          CALL THE MAP ROUTINE TO ADD ENTRY.   011G\n*                             FORMAT 4, 5, AND 6 DSCB HAVE THEIR   010G\n*                              EXTENT INFO ADDED, NO OTHER PROCESS.010G\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?    010G\n         BNZ   READDSCB       NO, GET ANOTHER.                     010G\n*\n*        FORMAT THE DSCB INFORMATION\n*\nFMTDSCB  L     R15,DSCBADDR   GET A(CURRENT DSCB).                 010G\n         LA    R15,8(R15)     BUMP PAST HEADER.                    010G\n         USING FMT1DSEC,R15   TELL ASSEMBLER                       010G\n         CLI   DS1FMTID,C'1'  IS IT A FMT 1 DSCB?                  010G\n         BNE   READDSCB       NO, SKIP IT.                         010G\n         DROP  R15                                                 010G\n         TM    VTCFMTCK,VTCFMTCD WAS FORMAT CALLED BY CHECK?\n         BO    CALLEXIT       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          CALL THE FORMATTING ROUTINE\n         LTR   R15,R15        DID IT FUNCTION?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        CALL THE EXIT ROUTINE IF ONE WAS SPECIFIED\n*\nCALLEXIT VTCALL EXIT,TEST     CALL THE EXIT ROUTINE\n         LTR   R15,R15        SHOULD THE DATA SET BE PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        SORT THE ENTRIES INTO THE NEW LIST\n*\n         VTCALL SORT          CALL THE SORT ROUTINE\n         B     READDSCB       GET ANOTHER DSCB\n*\n*        END OF THE VOLUME, CHECK FOR MORE\n*\nENDVTOC  VTOCEXCP CLOS       FIRST CLOSE THE VTOC\n*\n*        IF THE SORT IS BY VOLUME, CALL PRINT NOW\n*\n         CLI   SUBSORT+1,2    IS THIS A VOLUME SORT\n         BNE   ENDVOL         NO, CONTINUE\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n*\n*        THIS VOLUME DONE, FREEMAIN THE MAP MEMORY\n*\nENDVOL   VTOCMAP SORT         CALL THE MAP ROUTINE TO SORT MAP.    011G\n         OI    VTCPFUNC,X'01' TELL PRINT RTN TO PRINT MAP INFO.011G012G\n         VTCALL PRNT          CALL THE PRINT RTN.                  011G\n         NI    VTCPFUNC,X'FE' TELL PRINT RTN TO PRINT DSN INFO.011G012G\n         VTOCMAP CLOS         CALL THE MAP ROUTINE TO CLOSE.  010G 011G\n         TM    FLAG,X'0B'         IS THIS A GENERIC VOLUME SEARCH  011G\n         BNZ   NEXTUCB            YES, SEARCH FOR MORE             009G\nNEXTVOL  ICM   R3,B'0111',25(R3)  GET THE NEXT VOLUME FROM THE PDL\n         BP    LOOP1              THERE IS ANOTHER, GET IT\n*\n*        PRINT THE SELECTED ITEMS FOR THE SELECTED DATA SETS\n*\nPHASE2   DS    0H\n         CLI   SUBSORT+1,2    IS THIS A VOLUME SORT\n         BE    EXIT0          YES, PRINT HAS BEEN CALLED\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         EJECT\n*\n*        PROCESSING IS COMPLETE, EXIT\n*\nEXIT0    SR    R15,R15\n         SPACE 3\nRETURN   LTR   R2,R15         NORMAL EXIT?\n         BZ    RETURN1        YES, LEAVE EVERY THING ALONE\n         SPACE 2\n         LA    R1,PARMLIST    AREA FOR STACK PARM LIST\n         USING IOPL,R1        AN ERROR WAS FOUND, FLUSH THE STACK\n         SPACE\n         MVC   IOPLUPT,ADDRUPT\n         MVC   IOPLECT,ADDRECT\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,IOPLECB\n         SPACE 2\n         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))\n         SPACE 3\n         TCLEARQ INPUT        CLEAR INPUT BUFFERS\n         SPACE 3\nRETURN1  DS    0H\n         BAL   R14,FREEPDL    FREE THE PARSE STROAGE\n         OI    VTCPFUNC,X'08' TELL PRINT TO CLEAN UP HIS ACT CLOSE\n*                               DATA SETS AND FREE MAIN STORAGE.   012G\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         SPACE\n         LR    R15,R2          GET THE RETURN CODE AGAIN\n         VTCLEAVE EQ                                               014G\nWORKREG  EQU   13\n*\n*        PARSE INITIALIZATION\n*\n         SPACE 3\nPARSINIT DS    0H\n         ST    R2,CPPLADDR    AND THE CPPL ADDRESS\n         USING CPPL,R2        BASE FOR COMMAND PARM LIST\n         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE\n         MVC   ADDRPSCB,CPPLPSCB ADDR OF PROTECTED STEP CONTROL BLK\n         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE\n         MVC   ADDRCBUF,CPPLCBUF\n         DROP  R2\n         SPACE 3\n*\n*        PUT THE WORK AREA ADDRESSES INTO THE PARM LISTS\n*\n         WORKADDR MSG,VTCWMSG     WORK AREA FOR VTOCMSG\n         WORKADDR EXCP,VTCWEXCP   WORK AREA FOR VTOCEXCP\n         WORKADDR CHEK,VTCWCHEK   WORK AREA FOR VTOCCHEK\n         WORKADDR FORM,VTCWFORM   WORK AREA FOR VTOCFORM\n         WORKADDR EXIT,VTCWEXIT   WORK AREA FOR VTOCEXIT\n         WORKADDR SORT,VTCWSORT   WORK AREA FOR VTOCSORT\n         WORKADDR PRNT,VTCWPRNT   WORK AREA FOR VTOCPRNT\n         WORKADDR MAP,VTCWMAP     WORK AREA FOR VTOCMAP           010G\n         SPACE 3\n*        SET UP THE ADDRESSES FOR CALLING\n*\n         MVC   VADMSG(RTNADLEN),RTNADDRS  MOVE IN THE ADDRESSES\n*\n*\n*\n*        BUILD PARSE PARAMETER LIST AND INVOKE\n*        IKJPARS TO ANALYZE COMMAND OPERANDS\n*\n         SPACE 3\nGOPARSE  DS    0H\n         ST    R14,R14PARSE   SAVE THE RETURN ADDRESS\n         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS\n         USING PPL,R1         BASE FOR PARSE PARAMETER LIST\n         SPACE 2\n         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS\n         MVC   PPLECT,ADDRECT AND ECT ADDRESS\n         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR\n         SPACE\n         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS\n         SPACE\n         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS\n         MVI   ATTNECB,0      CLEAR ECB\n         ST    R0,PPLECB      PASS TO PARSE\n         SPACE\n         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE\n         ST    R0,PPLANS      RETURNS PDL ADDRESS\n         SPACE\n         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS\n         SPACE 3\n         CALLTSSR EP=IKJPARS  INVOKE PARSE\n         DROP  R1\n         SPACE 2\n         LA    R14,MAXPARSE   RETURN CODE LIMIT\n         SPACE\n         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS\n         BH    PARSEBAD       NO, ERROR\n         SPACE\n         B     *+4(R15)       PROCESS RETURN CODE\n         SPACE\nPARSERET B     PARSEOK         0- SUCESSFUL\n         B     PARSEERR        4- PARSE UNABLE TO PROMPT\n         B     PARSEERR        8- USER ENTERED ATTENTION\n         B     PARSEBAD       12- INVALID PARAMETERS\n         B     PARSEBAD       16- PARSE INTERNAL FAILURE\n         B     PARSEERR       20 - VALIDITY CHECK ERROR\nMAXPARSE EQU   *-PARSERET\n         SPACE 5\nPARSEBAD DS    0H\n         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE\n         LA    R1,MSGTEXT2+4+L'MSGPARSE\n         SPACE\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R1),DOUBLE\n         SPACE\n         LA    R0,MSGTEXT2-2\n         SR    R1,R0\n         SLL   R1,16\n         ST    R1,MSGTEXT2\n         SPACE 2\n         VTOCMSG MSGCMDER,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG\n         SPACE 3\nPARSEERR LA    R15,12         ERROR CODE 12 - COMMAND FAILED\n         B     PARSERTN       RETURN FROM PARSE\n         SPACE\nPARSEOK  SR    R15,R15        CLEAR THE RETURN CODE\n*  CHANGE 022G BELOW\n*                                                                  021G\n*        CHECK TO SEE IF USER AUTHORIZED (OPER AUTHORITY)          021G\n*                                                                  021G\n*        L     R14,ADDRPSCB       GET A(PSCB).                     021G\n*        USING PSCB,R14           ESTABLISH ADDRESSABILITY.        021G\n*        TM    PSCBATR1,PSCBCTRL  SEE IF OPER AUTHORITY.           021G\n*        DROP  R14                DROP ADDRESSABILITY.             021G\n*        BO    PARSERTN           YES, CONTINUE.                   021G\n*        SPACE 1                                                   021G\n*        LA    R15,12             NO, ERROR CODE 12 COMMAND FAILED 021G\n*  CHANGE 022G ABOVE\nPARSERTN L     R14,R14PARSE   GET THE RETURN LOCATION\n         BR    R14            AND GET OUT OF HERE\n         SPACE\n         EJECT\n*\n*        PARSE CLEANUP ROUTINE\n*\n         SPACE 3\nFREEPDL  DS    0H\n         SPACE\n         ST    R14,R14SAVE\n         SPACE\n         IKJRLSA ADDRANSR     RELEASE THE STORAGE\n         SPACE 2\n         XC    ADDRANSR,ADDRANSR\n         SPACE\n         L     R14,R14SAVE\n         BR    R14\n         EJECT\n*\n*\n*        CONSTANTS\n*\n*\nRTNADDRS DC    V(VTOCMSG)\n         DC    A(0)           DUMMY ENTRY FOR THE EXIT ROUTINE\n         DC    V(VTOCEXCP)\n         DC    V(VTOCCHEK)\n         DC    V(VTOCFORM)\n         DC    V(VTOCPRNT)\n         DC    V(VTOCSORT)\n         DC    V(VTOCMAP)                                          010G\nRTNADLEN EQU   *-RTNADDRS\nADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST\nUCBEND   DC    X'0000FFFF'    END OF UCB LIST (HALFWORD -1)  004S 009G\nBLANKS   DC    CL8' '         BALNKS\nH2       DC    H'2'\nH3       DC    H'3'\nH4       DC    H'4'\nH5       DC    H'5'\n*\n*\n*\n*\n*\nCHARALL  DC    CL3'ALL'\n*HAR3380 DC    CL4'3380'                                       008G020G\n*HAR3350 DC    CL4'3350'                                       006G020G\n*HAR3330 DC    CL4'3330'                                       006G020G\n*HAR333V DC    CL5'3330V'                                      006G020G\nCHAR3350 DC    CL6'3350'                                   008G020G024G\nCHAR3380 DC    CL6'3380'                                       008G020G\nCHAR3390 DC    CL6'3390'                                           023G\nCHAR3330 DC    CL6'3330'                                       006G020G\nCHAR333V DC    CL6'3330V'                                      006G020G\nMOVVOL   MVC   VOLSER(0),0(R5)\nCLCVOL   CLC   VOLSER(0),UCBVOLI                                   018G\n         DROP  R6                                                  018G\n         EJECT\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         SPACE\nMSGPARSE VTCMSG 'PARSE ERROR CODE '                                003G\nMSGCMDER VTCMSG ' COMMAND SYSTEM ERROR'                            003G\nMSGNOTMT VTCMSG ' VVVVVV VOLUME IS NOT MOUNTED'                    003G\nMSGOFFLN VTCMSG ' VVVVVV VOLUME IS OFFLINE'                        003G\nMSGPEND  VTCMSG ' VVVVVV VOLUME IS PENDING OFFLINE'                003G\n*\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         SPACE 3\n         COPY  VTCPARS                                             014G\n         EJECT\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nWORKAREA DSECT\nMAINSAVE DS    18A\n         SPACE\n         VTOCEXCP EQ          DEFINE VTOCEXCP CODES\n         VTOCMAP  EQ          DEFINE VTOCMAP  CODES\n         SPACE\nPARSELST DS    8A             AREA FOR PARSE PARAMETER LIST\n         SPACE\nR14SAVE  DS    A\nR14PARSE DS    A\n*\n*        VTOC COMMAND COMMON AREA\n*\n         VTCCOM  NODSECT                                           014G\n         SPACE 3\n*\n*        WORK AREAS FOR SUBROUTINES\n*\nWORKMSG  DS    XL256\nWORKEXCP DS    4XL256\nWORKCHEK DS    2XL256                                              016G\nWORKFORM DS    2XL256\nWORKEXIT DS    8XL256\nWORKSORT DS    XL256\nWORKPRNT DS    10XL256\nWORKMAP  DS    XL256                                              010G\n         DS    0D                                                 009G\nWORKUCB  DS    30F        WORK AREA FOR UCB SCAN RTN IOSVSUCB     009G\n         DS    0D\nLENWORK  EQU   *-WORKAREA\n         SPACE 3\n         VTCPDEDS                                                  014G\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         IKJECT\n         SPACE 3\n         IKJCPPL\n         SPACE 3\n         IKJUPT\n         SPACE 3\n*        PRINT NOGEN\n         CVT   DSECT=YES\nUCB      DSECT                                                    018G\n         IEFUCBOB                                                 018G\nWORKUCBD DSECT                                                    009G\n         DS    0D                                                 009G\nWORKUCBA DS    XL100      WORK AREA FOR UCB SCAN RTN IOSVSUCB     009G\nWORKUCBC DS    F          A(CURRENT UCB) FROM SCAN RTN IOSVSUCB   009G\nWORKUCBP DS    3F         PARM LIST FOR UCB SCAN RTN IOSVSUCB     009G\nWORKUCBT DS    X          DEVICE CLASS X20 FOR SCAN RTN IOSVSUCB  009G\nFMT1DSEC DSECT                                                    010G\n         IECSDSL1 (1)\n         END\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YTOCCHEK": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90 \\x8f\\x00\\x90 \\x8f\\x106\\x04\\xe8\\x04\\xe8\\x00\\x00\\xe9\\xe3\\xe2\\xd6\\xd4\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-07-27T00:00:00", "modifydate": "1990-07-27T10:36:00", "lines": 1256, "newlines": 1256, "modlines": 0, "user": "ZTSOMG"}, "text": "         TITLE 'VTOC COMMAND CHECK  ROUTINE'\n***********************************************************************\n*         MODIFICATIONS\n* NUMBER    DATE    PERSON    REASON\n*  001G    072278   GATES     CHANGE MSG MACROS TO VTCMSG TO AVOID\n*                              CONFLICT WITH AN EXISTING MSG MACRO.\n*  002S    110978   SAVIT     CHANGE COMPARISON ROUTINE FOR DATE OF\n*                              LAST USE (MVS RELEASE 3.7 SU60).\n*  003G    110182   GATES     CLEAR REG 5 SO HI ORDER IS ZEROED TO\n*                              CORRECT LEV PARAMETER CHECK ALSO\n*                              END AND CONTAINING CHECK.\n*  004G    110383   GATES     FIX BUG WHERE THE PROGRAM USED TO\n*                              ASSUME THAT THE FORMAT 1 DSCB POINTED\n*                              TO A FORMAT 3 DSCB. ISAM MULTI EXTENT\n*                              DATASETS HAVE A FORMAT 1 DSCB POINTING\n*                              TO A FORMAT 2 DSCB WHICH IN TURN POINTS\n*                              TO A FORMAT 3 DSCB. WE NOW HANDLE ISAM\n*                              SPACE STATS ACCURATELY.\n*  005G    111683   GATES     ADD LOGIC TO GET EXTENT INFO ON DSCB\n*                              TYPES 4, 5, AND 6.\n*  006G    111883   GATES     ADD LOGIC KEEP FMT 4 DSCB FROM BEING\n*                              PROCESED BY REST OF VTOC COMMAND. IT\n*                              WAS ALREADY PROCESSED AT VTOC OPEN BY\n*                              THE VTOC CSECT.\n*  007G    111883   GATES     PUT VOLSER IN ERROR MESSAGES.\n*  008G    112183   GATES     ADD LOGIC TO HANDLE NOTLEV, NOTCON, AND\n*                              NOTEND KEYWORDS.\n*  009G    050284   GATES     RENAME VTFMT MACRO TO VTCFMT,\n*                              RENAME VTLEAVE MACRO TO VTCLEAVE,\n*                              RENAME VTOCOM MACRO TO VTCCOM,\n*                              RENAME VTOCPARS MACRO TO VTCPARS,\n*                              RENAME PDEDSNAM MACRO TO VTCPDEDS,\n*                               RENAME ENTER TO VTCENTER,\n*                              VTOC MORE TRANSPORTABLE.\n*  010G    051084   GATES     EMBED VTOCMAP MACRO TO MAKE\n*                              VTOC MORE TRANSPORTABLE.\n*  011G    051084   GATES     GET RID OF UNNEEDED LOGIC.\n*  012G    051084   GATES     CHANGE CONSTANT FOR END OF TITLE TABLE.\n*  013G    051584   GATES     ADD LOGIC FOR AND4/OR4 AND AND5/OR5.\n*  014G    051584   GATES     ALLOW OPER OF = > < \u00ac= \u00ac< \u00ac> >= <=.\n*  015G    051684   GATES     COMBINE LSTUS AND CDATE/EXPDT LOGIC.\n*  016G    051684   GATES     ADD LOGIC FOR DSNAME LIMIT CHECKING.\n*  017G    051684   GATES     UPGRADE LOGIC TO WORK WITH DATASETS WHICH\n*                              CONTAIN MORE THAN 16 EXTENTS. WHAT I DO\n*                              IS SAVE ALL THE FMT3 DSCBS FOR A DATASET\n*                              IN VTOCOM.\n*  018G    052184   GATES     MOVE CODE TO SPEED PROCESSING UP.\n*  019G    111685   GATES     CHANGE LEVEL AND NLEVEL KEYWORDS TO BE\n*                              THE HIGH LEVEL INDEX INSTEAD OF THE\n*                              BEGINNING CHARACTERS ONLY.\n*  020G    111685   GATES     ADD BEGINNING AND NBEGINNING KEYWORDS\n*                              TO BE THE START CHARACTERS OF THE HIGH\n*                              LEVEL INDEX INSTEAD OF THE WHOLE HIGH\n*                              LEVEL INDEX.  THIS USED TO BE THE\n*                              LEVEL AND NLEVEL KEYWORDS.\n*  021G    122387   GATES     ADD LOGIC TO ALLOW * IN LIMIT/AND/OR\n*                              TO MEAN CURRENT DATE WHEN CHECKING DATE\n*                              FIELDS.\n*  022G    122387   GATES     ADD ANOTHER BASE REG (R10).\n*  023G    010488   GATES     ADD LOGIC FOR KEY LENGTH.\n*  024G    010488   GATES     CHANGE CONSTANT FOR END OF TITLE TABLE.\n*  025G    041388   GATES     ADD LOGIC FOR LOWLEVEL/NOTLOWLEVEL\n*                             KEYWORD.\n*  026G    072790   GATES     ADD LOGIC FOR OPTCD KEYWORD.\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND CHECK  ROUTINE                            *\n*                                                                     *\n* FUNCTION -   CHECK THE CONDITIONS SPECIFIED ON THE VTOC COMMAND.    *\n*              SEE IF THE DATA SET PASSED SHOULD BE PROCESSED.        *\n*              THE LIMIT, ENDING, CONTAINING, CCHH, LIMIT, AND,       *\n*              AND OR KEYWORDS ARE PROCESSED BY THIS ROUTINE.         *\n*                                                                     *\n* OPERATION -  FIRST GET THE LENGTH OF THE DSNAME AND SAVE IT.        *\n*              THEN GET THE FORMAT 3 DSCB, IF ONE EXISTS.  TRY        *\n*              EACH KEYWORD TO SEE IF IT WILL EXCLUDE THE DATA        *\n*              SET FROM FURTHER PROCESSING.                           *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, FORMAT 1, 3, AND 4 DSCB'S              *\n*              FOR DSORG, RECFM, ALLOC, USED, PROT, CATLG, OR SECAL   *\n*              CALL VTOCFORM TO FORMAT THE PARMS.  USE FORMATTED DSCB *\n*                                                                     *\n* OUTPUT -     A RETURN CODE OF 0 TO CONTINUE PROCESSING OR 8 TO      *\n*              EXCLUDE THIS DATA SET.                                 *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n*        MACROS FOR CHECK ROUTINE\n*\n         MACRO\n&LABEL   VTCHL &KEY              CALL THE KEYWORD CHECK ROUTINE\n&LABEL   L     R1,SUB&KEY.OPER   GET THE OPERATOR VALUE\n         BAL   R8,GETOPER        TRANSLATE TO A NUMBER\n         ST    R15,REFOPER       SAVE IT TOO\n         LA    R1,SUB&KEY.VALU   GET THE VALUE PDL\n         ST    R1,REFVAL         SAVE THAT ADDRESS THREE\n         CLI   FLAGNM&KEY,0      HAS IT BEEN CONVERTED?\n         BNE   VTP&SYSNDX        YES, SKIP ALONG\n         MVI   FLAGNM&KEY,1      NOTE IT AS CONVERTED\n         BAL   R8,PDLNUM         GO CONVERT IT\n         ST    R15,NUMBER&KEY    SAVE THE VALUE\n.*                                IT WILL BE ZERO FOR NONNUMERIC.\n         LA    R4,SUB&KEY.KEY    POINT TO THE IKJIDENT FOR THE KEYWORD\n         BAL   R8,GETKEY         CONVERT TEXT TO A NUMERIC KEY\n         STC   R15,NUMKEY&KEY    SAVE THAT NUMERIC KEY\n         LTR   R15,R15           WAS IT SUCCESSFUL?\n         BNZ   VTP&SYSNDX        YES, SKIP ALONG\n*        ISSUE A MESSAGE - A BAD LIM, AND, OR KEYWORD\n         MVC   MSGTEXT2,KEYERR   START THE ERROR MESSAGE\n         L     R1,0(R4)          POINT TO THE TEXT\n         MVC   MSGTEXT2+49(6),0(R1)  THEN ADD IT TO THE MESSAGE\n         VTOCMSG MSGTEXT2        ISSUE THE ERROR MESSAGE\nVTP&SYSNDX DS  0H\n         SR    R1,R1             CLEAR A REGISTER\n         ICM   R1,1,NUMKEY&KEY   GET THE KEYWORD VALUE\n         BZ    VTE&SYSNDX        IF NOT SET, SKIP THE EVALUATION\n         ST    R1,REFKEY         SAVE THE ADDRESS\n         LA    R1,NUMBER&KEY     GET THE ADDRESS OF CONVERTED NUMBER\n         ST    R1,REFNUM         SAVE IT'S ADDRESS\n         BAL   R8,LIMEVAL        GO EVALUATE THE EXPRESSION\nVTE&SYSNDX DS  0H\n         MEND\n         SPACE 3\n         MACRO\n&LABEL   VTANDOR &NUM         EVALUATE, THEN DO AND OR OR FUNCTION\n&LABEL   CLI   ANDOR&NUM.K+1,0  WAS THIS KEYWORD SET?\n         BE    LIMCOMP        NO, JUST CHECK THE FINAL RESULT\n         VTCHL &NUM           YES, EVALUATE\n         CLI   ANDOR&NUM.K+1,1  WAS IT AN AND ?\n         BE    VTA&SYSNDX     YES, DO THE AND\n         O     R15,LIMVAL     NO, OR IT\n         B     VTE&SYSNDX     FINISHED WITH THIS EXPRESSION\nVTA&SYSNDX N   R15,LIMVAL     AND THE EXPRESSION VALUE\nVTE&SYSNDX ST  R15,LIMVAL     SAVE THE VALUE\n         MEND\n         MACRO\n&LABEL   VTOCMAP   &FUNC                                         010G\n         AIF   ('&FUNC' NE 'EQ').MCALL                           010G\nVTCMOPEN EQU   0              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMADD  EQU   1              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMCLOS EQU   2              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\nVTCMSORT EQU   3              DEFINE FUNCTION CODES FOR VTOCMAP. 010G\n         MEXIT\n.MCALL   ANOP                 CALL VTOCMAP                       010G\n&LABEL   MVI   VTCMFUNC,VTCM&FUNC   SET THE FUNCTION CODE        010G\n         VTCALL MAP           GO TO MAP ROUTINE.                 010G\n         MEND\n*\n         EJECT\nVTOCCHEK VTCENTER (R12,R10),12   DO THE HOUSEKEEPING         009G022G\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING CHEKWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n*\n*        SEE WHAT THE FORMAT ID IS\n*\nCHEKFMT  L     R7,DSCBADDR    POINT TO THE DSCB\n         LA    R7,8(R7)       GET PAST THE HEADER\n         USING FMT1DSEC,R7    SET ADDRESSABILITY                   005G\n*        CLI   FORMATK+1,0    DID HE SPECIFY VARIOUS DSCB'S        011G\n*        BNE   CHEKFMTI       YES, GO DO HIS CHECKS                011G\n*HEKFMTI DS    0H             NOT YET PROGRAMMED                   011G\n*\n*        STANDARD IS ONLY TO ALLOW FORMAT ONES TO GO\n*\n         CLI   DS1FMTID,C'1'  IS THIS A FORMAT 1?\n         BE    GOTFMT1        YES, SEE IF SHOULD INCLUDE IT.       005G\n         CLI   DS1FMTID,C'4'  IS THIS A FORMAT 4?                  005G\n         BE    GOTFMT4        YES, KEEP TO GATHER EXTENT INFO ONLY.005G\n         CLI   DS1FMTID,C'5'  IS THIS A FORMAT 5?                  005G\n         BE    GOTFMT5        YES, KEEP TO GATHER EXTENT INFO ONLY.005G\n         CLI   DS1FMTID,C'6'  IS THIS A FORMAT 6?                  005G\n         BE    CHECKOUT       EXCLUDE IT;ALREADY DONE ON FMT4.     005G\n         B     CHECKOUT       EXCLUDE IT FROM MORE PROCESSING.     005G\n*\n*              FIRST SEE HOW BIG THE DSNAME IS\n*\nGOTFMT1  LA    R1,DS1FMTID    POINT PAST THE DSNAME                005G\n         TRT   DS1DSNAM,BLKTRTAB  FIND THE FIRST BLANK\n         SR    R1,R7          SUBTRACT TO GET THE LENGTH\n         STH   R1,DSNLEN      SAVE THE DSNAME LENGTH\n         LR    R3,R1          KEEP THE LENGTH FOR LATER\n*\n*        GET THE FORMAT 3 DSCB, IF IT EXISTS\n*\n*MT3GET  XC    FMT3,FMT3      CLEAR IT FIRST.                  004G018G\nFMT3GET  CLC   DS1PTRDS,=XL5'0000000000'  IS THERE A FORMAT 3?     018G\n         BE    FMT3LAST       NO, SKIP ALONG.                      018G\n*        XC    FMT3,FMT3      CLEAR FORMAT 3 WORK AREA.            018G\n         LA    R0,FMT3        GET A(FORMAT 3 WORK AREA).           017G\n         XR    R1,R1          CLEAR FORMAT 3 WORK AREA.            017G\n         LR    R4,R0          GET A(FORMAT 3 WORK AREA).           017G\n         LA    R5,FMT3LEN     GET L(FORMAT 3 WORK AREA).           017G\n         MVCL  R4,R0          CLEAR FORMAT 3 WORK AREA.            017G\n         LA    R4,FMT3        GET A(WORK AREA BEGINNING).          017G\nFMT3NEXT CLC   DS1PTRDS,=XL5'0000000000'  IS THERE ANOTHER FMT3?   017G\n         BE    FMT3LAST       NO, I'VE HIT LAST ONE.               017G\n         LA    R1,DS1PTRDS    GET THE CCHHR ADDRESS OF NEXT FMT3.  017G\n*        LA    R15,FMT3       POINT TO TEMP AREA FOR THE DSCB3.005G017G\n         LR    R15,R4         GET A(NEXT AVAIL FMT3 SLOT).         017G\n         BAL   R2,OBTAINIT             GET THE RECORD.             005G\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   OBT3ERR        BAD NEWS, ISSUE THE MESSAGE\n*        CLI   DS3FMTID,C'2'  IS IT A FORMAT 2 DSCB?               004G\n*        BNE   FMT3NO         NO, GO PROCESS FORMAT 3 DSCB.        004G\n         CLI   44(R4),C'2'    IS IT A FORMAT 2 DSCB?          004G 017G\n         BNE   FMT3YES        NO, GO PROCESS FORMAT 3 DSCB.        017G\n         MVC   DS1PTRDS,135(R4)   MOVE REAL FORMAT 3 POINTER       004G\n*                                   FROM THE FORMAT 2 DSCB.        004G\n         B     FMT3GET        GET THE FORMAT 3.                    004G\nFMT3YES  MVC   DS1PTRDS,135(R4)  GET NEXT FORMAT 3 POINTER.        017G\n*        MAKE 13 CONTIGUOUS EXTENTS.                               017G\n         MVC   0(40,R4),4(R4)    SHOVE FIRST 4 EXT LEFT.           017G\n         MVC   40(90,R4),45(R4)  SHOVE NEXT 9 EXT LEFT.            017G\n         LA    R4,130(R4)     GET A(NEXT AVAIL FMT3 SLOT).         017G\n         B     FMT3NEXT       GET THE NEXT FORMAT 3.               017G\nFMT3LAST DS    0H                                                  017G\n*\n*        PROCESS THE LEVEL KEYWORD\n*\nFMT3NO   CLI   LEVKEY+1,0     WAS LEVEL SPECIFIED?\n         BE    LEVEND         NO, SKIP ON.\n         LA    R4,LEVEL       ASSUME LEVEL SPECIFIED.\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\nLEVNEXT  SR    R5,R5          CLEAR REG 5.                         003G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH           003G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE LEVEL\n         CR    R3,R5          COMPARE LENGTHS\n         BL    LEVINC         THIS LEVEL IS LONGER THAN DSN, NO MATCH\n         AR    R7,R5          BUMP TO WHERE PERIOD SHOULD BE.      019G\n         CLC   0(1,R7),PERIOD THERE BETTER BE A PERIOD HERE.       019G\n         BE    LEVCHK         IF PERIOD COMPARE LEVEL CHARACTERS.  019G\n         SR    R7,R5          RESET TO START OF DSNAME.            019G\n         B     LEVINC         THIS LEVEL WON'T MATCH.              019G\nLEVCHK   SR    R7,R5          RESET TO START OF DSNAME.            019G\n         BCTR  R5,0           MINUS ONE FOR THE EX\n         EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    LEVEND         IT MATCHES, ALLOW IT.\nLEVINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT LEVEL PDE POINTER\n         BNZ   LEVNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nLEVEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*                                                                  020G\n*        PROCESS THE BEGINNING KEYWORD                             020G\n*                                                                  020G\n         CLI   BEGKEY+1,0     WAS BEGINNING SPECIFIED?             020G\n         BE    BEGEND         NO, SKIP ON.                         020G\n         LA    R4,BEGIN       ASSUME BEGINNING SPECIFIED.          020G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                   020G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME     020G\nBEGNEXT  SR    R5,R5          CLEAR REG 5.                         020G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH           020G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT          020G\n         L     R6,PDEDSN      POINT TO THE BEGIN                   020G\n         CR    R3,R5          COMPARE LENGTHS                      020G\n         BL    BEGINC         BEGIN IS LONGER THAN DSN, NO MATCH   020G\n         BCTR  R5,0           MINUS ONE FOR THE EX                 020G\n         EX    R5,COMPARE     CHECK THE LENGTHS                    020G\n         BE    BEGEND         IT MATCHES, ALLOW IT.                020G\nBEGINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT BEGIN PDE POINTER   020G\n         BNZ   BEGNEXT        IF IT'S THERE, KEEP LOOKING          020G\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME      020G\nBEGEND   DS    0H                                                  020G\n         DROP  R4             FINISHED WITH THE PDE                020G\n*\n*        PROCESS THE NOTLEVEL KEYWORD\n*\n         CLI   NLEVKEY+1,0    WAS NOTLEVEL SPECIFIED?            008G\n         BE    NLEVEND        NO, SKIP ON.                       008G\n         LA    R4,NLEVEL      YES, POINT TO PDE.                 008G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                 008G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME   008G\nNLEVNEXT SR    R5,R5          CLEAR REG 5.                       008G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH         008G\n         BZ    NLEVEND        END OF THE LINE, INCLUDE IT        008G\n         L     R6,PDEDSN      POINT TO THE LEVEL                 008G\n         CR    R3,R5          COMPARE LENGTHS                    008G\n         BL    NLEVINC        LEVEL IS LONGER THAN DSN, NO MATCH 008G\n         AR    R7,R5          BUMP TO WHERE PERIOD SHOULD BE.      019G\n         CLC   0(1,R7),PERIOD THERE BETTER BE A PERIOD HERE.       019G\n         BE    NLEVCHK        IF PERIOD COMPARE LEVEL CHARACTERS.  019G\n         SR    R7,R5          RESET TO START OF DSNAME.            019G\n         B     NLEVINC        NO PERIOD, WON'T MATCH.              019G\nNLEVCHK  SR    R7,R5          RESET TO START OF DSNAME.            019G\n         BCTR  R5,0           MINUS ONE FOR THE EX               008G\n         EX    R5,COMPARE     CHECK THE LENGTHS                  008G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.            008G\nNLEVINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT LEVEL PDE POINTER 008G\n         BNZ   NLEVNEXT       IF IT'S THERE, KEEP LOOKING        008G\n         B     NLEVEND        NO MATCHES, INCLUDE THIS DSNAME    008G\nNLEVEND  DS    0H                                                008G\n         DROP  R4             FINISHED WITH THE PDE              008G\n*                                                                  020G\n*        PROCESS THE NOTBEGINNING KEYWORD                          020G\n*                                                                  020G\n         CLI   NBEGKEY+1,0    WAS NBEGIN SPECIFIED?                020G\n         BE    NBEGEND        NO, SKIP ON.                         020G\n         LA    R4,NBEGIN      YES, POINT TO PDE.                   020G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                   020G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME     020G\nNBEGNEXT SR    R5,R5          CLEAR REG 5.                         020G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH           020G\n         BZ    NBEGEND        END OF THE LINE, INCLUDE IT          020G\n         L     R6,PDEDSN      POINT TO THE NBEGIN VALUE.           020G\n         CR    R3,R5          COMPARE LENGTHS                      020G\n         BL    NBEGINC        NBEGIN IS LONGER THAN DSN, NO MATCH  020G\n         BCTR  R5,0           MINUS ONE FOR THE EX                 020G\n         EX    R5,COMPARE     CHECK THE LENGTHS                    020G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.              020G\nNBEGINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT NBEGIN PDE POINTER  020G\n         BNZ   NBEGNEXT       IF IT'S THERE, KEEP LOOKING          020G\n         B     NBEGEND        NO MATCHES, INCLUDE THIS DSNAME      020G\nNBEGEND  DS    0H                                                  020G\n         DROP  R4             FINISHED WITH THE PDE                020G\n*\n*        PROCESS THE ENDING KEYWORD\n*\n         CLI   ENDKEY+1,0     WAS ENDING SPECIFIED?\n         BE    ENDEND         NO, SKIP ON\n         LA    R4,ENDING      YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\nENDNEXT  SR    R5,R5          CLEAR HI ORDER OF REG 5.            003G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH          003G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE ENDING\n         CR    R3,R5          COMPARE LENGTHS\n         BL    ENDINC         THIS ENDING IS LONGER THAN DSN, NO MATCH\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\n         AR    R2,R3          POINT TO THE END\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH\n         BCTR  R5,0           MINUS ONE FOR THE EX\n         EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    ENDEND         IT MATCHES, ALLOW IT\nENDINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT ENDING PDE POINTER\n         BNZ   ENDNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nENDEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*\n*        PROCESS THE NOTENDING KEYWORD\n*\n         CLI   NENDKEY+1,0    WAS NOTENDING SPECIFIED?            008G\n         BE    NENDEND        NO, SKIP ON                         008G\n         LA    R4,NENDING     YES, POINT TO THE PDE               008G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                  008G\nNENDNEXT SR    R5,R5          CLEAR HI ORDER OF REG 5.            008G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH          008G\n         BZ    NENDEND        END OF THE LINE, INCLUDE IT         008G\n         L     R6,PDEDSN      POINT TO THE ENDING                 008G\n         CR    R3,R5          COMPARE LENGTHS                     008G\n         BL    NENDINC        NOTENDING IS LONGER THAN DSN, NO MATCH\n         LR    R2,R7          POINT TO THE START OF THE DSNAME    008G\n         AR    R2,R3          POINT TO THE END                    008G\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH       008G\n         BCTR  R5,0           MINUS ONE FOR THE EX                008G\n         EX    R5,COMPARE     CHECK THE LENGTHS                   008G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.             008G\nNENDINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT ENDING PDE POINTER 008G\n         BNZ   NENDNEXT       IF IT'S THERE, KEEP LOOKING         008G\n         B     NENDEND        NO MATCHES, INCLUDE THIS DSNAME     008G\nNENDEND  DS    0H                                                 008G\n         DROP  R4             FINISHED WITH THE PDE               008G\n*                                                                  025G\n*        PROCESS THE LOWLEVEL KEYWORD                              025G\n*                                                                  025G\n         CLI   LOWKEY+1,0     WAS LOWLEVEL SPECIFIED?              025G\n         BE    LOWEND         NO, SKIP ON.                         025G\n         LA    R4,LOWLEV      ASSUME LOWLEVEL SPECIFIED.           025G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY.                  025G\nLOWNEXT  SR    R5,R5          CLEAR REG 5.                         025G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH.          025G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT.         025G\n         L     R6,PDEDSN      POINT TO THE LOWLEVEL.               025G\n         CR    R3,R5          COMPARE LENGTHS.                     025G\n         BL    LOWINC         LOWLEVEL IS LONGER THAN DSN, NO MATCH025G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME.    025G\n         AR    R2,R3          POINT TO THE END.                    025G\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH.       025G\n         BCTR  R2,0           SUBTRACT ONE TO CHECK FOR PERIOD.    025G\n         CLC   0(1,R2),PERIOD THERE BETTER BE A PERIOD HERE.       025G\n         LA    R2,1(R2)       RESET TO STRING TO COMPARE.          025G\n         BNE   LOWINC         THIS LOWLEVEL WON'T MATCH.           025G\n         BCTR  R5,0           MINUS ONE FOR THE EX.                025G\n         EX    R5,COMPARE     CHECK THE LENGTHS.                   025G\n         BE    LOWEND         IT MATCHES, ALLOW IT.                025G\nLOWINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT LOWLEVEL PDE POINTER025G\n         BNZ   LOWNEXT        IF IT'S THERE, KEEP LOOKING          025G\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME      025G\nLOWEND   DS    0H                                                  025G\n         DROP  R4             FINISHED WITH THE PDE                025G\n*                                                                  025G\n*        PROCESS THE NOTLOWLEVEL KEYWORD                           025G\n*                                                                  025G\n         CLI   NLOWKEY+1,0    WAS NLOWLEV SPECIFIED?               025G\n         BE    NLOWEND        NO, SKIP ON.                         025G\n         LA    R4,NLOWLEV     ASSUME NLOWLEV SPECIFIED.            025G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY.                  025G\nNLOWNEXT SR    R5,R5          CLEAR REG 5.                         025G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH.          025G\n         BZ    NLOWEND        END OF THE LINE, INCLUDE IT.         025G\n         L     R6,PDEDSN      POINT TO THE NLOWLEV.                025G\n         CR    R3,R5          COMPARE LENGTHS.                     025G\n         BL    NLOWINC        NLOWLEV IS LONGER THAN DSN, NO MATCH.025G\n         LR    R2,R7          POINT TO THE START OF THE DSNAME.    025G\n         AR    R2,R3          POINT TO THE END.                    025G\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH.       025G\n         BCTR  R2,0           SUBTRACT ONE TO CHECK FOR PERIOD.    025G\n         CLC   0(1,R2),PERIOD THERE BETTER BE A PERIOD HERE.       025G\n         LA    R2,1(R2)       RESET TO STRING TO COMPARE.          025G\n         BNE   NLOWINC        THIS NLOWLEV WON'T MATCH.            025G\n         BCTR  R5,0           MINUS ONE FOR THE EX.                025G\n         EX    R5,COMPARE     CHECK THE LENGTHS.                   025G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.              025G\nNLOWINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT NLOWLEV PDE POINTER.025G\n         BNZ   NLOWNEXT       IF IT'S THERE, KEEP LOOKING          025G\n         B     NLOWEND        NO MATCHES, INCLUDE THIS DSNAME      025G\nNLOWEND  DS    0H                                                  025G\n         DROP  R4             FINISHED WITH THE PDE                025G\n*\n*        PROCESS THE CONTAINING KEYWORD\n*\n         CLI   CONTAINK+1,0   WAS CONTAINING SPECIFIED?\n         BE    CONEND         NO, SKIP ON\n         LA    R4,CONTAIN     YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\nCONNEXT  SR    R5,R5          CLEAR HIORDER OF REG 5.             003G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH          003G\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE CONTAINING\n         CR    R3,R5          COMPARE LENGTHS\n         BL    CONINC         THIS CONTAIN IS LONGER THAN DSN, NO MATCH\n         LR    R1,R7          POINT TO THE START OF THE DSNAME\n         AR    R1,R3          POINT TO THE END\n         SR    R1,R5          BACKUP TO COMPARE THIS LENGTH - LAST ONE\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\n         BCTR  R5,0           MINUS ONE FOR THE EX\nCONCOMP  EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    CONEND         IT MATCHES, ALLOW IT\n         LA    R2,1(R2)       CHECK THE WHOLE DSNAME\n         CR    R2,R1          CHECK FOR THE END OF THE REAL DSN\n         BNH   CONCOMP        NOT THERE YET\nCONINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT CONTAINING PDE POINTER\n         BNZ   CONNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nCONEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*\n*        PROCESS THE NOTCONTAINING KEYWORD\n*\n         CLI   NCONKEY+1,0    WAS NOTCONTAINING SPECIFIED?        008G\n         BE    NCONEND        NO, SKIP ON                         008G\n         LA    R4,NCONTAIN    YES, POINT TO THE PDE               008G\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                  008G\nNCONNEXT  SR    R5,R5         CLEAR HIORDER OF REG 5.             008G\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH          008G\n         BZ    NCONEND        END OF THE LINE, INCLUDE IT         008G\n         L     R6,PDEDSN      POINT TO THE NOTCONTAINING          008G\n         CR    R3,R5          COMPARE LENGTHS                     008G\n         BL    NCONINC        NOTCONTAIN IS LONGER THAN DSN, NO MATCH\n         LR    R1,R7          POINT TO THE START OF THE DSNAME    008G\n         AR    R1,R3          POINT TO THE END                    008G\n         SR    R1,R5          BACKUP TO COMPARE THIS LENGTH - LAST ONE\n         LR    R2,R7          POINT TO THE START OF THE DSNAME    008G\n         BCTR  R5,0           MINUS ONE FOR THE EX                008G\nNCONCOMP EX    R5,COMPARE     CHECK THE LENGTHS                   008G\n         BE    CHECKOUT       IT MATCHES, EXCLUDE IT.             008G\n         LA    R2,1(R2)       CHECK THE WHOLE DSNAME              008G\n         CR    R2,R1          CHECK FOR THE END OF THE REAL DSN   008G\n         BNH   NCONCOMP       NOT THERE YET                       008G\nNCONINC  ICM   R4,B'0111',PDEDCHN GET THE NEXT CONTAINING PDE POINTER\n         BNZ   NCONNEXT       IF IT'S THERE, KEEP LOOKING         008G\n         B     NCONEND        NO MATCHES, INCLUDE THIS DSNAME     008G\nNCONEND  DS    0H                                                 008G\n         DROP  R4             FINISHED WITH THE PDE               008G\n*\n*        NOW THE BIG MESS, CHECK FOR LIMIT, AND'S, AND OR'S\n*\n         CLI   LIMITK+1,0     WAS LIMIT SPECIFIED\n         BE    LIMEND         NO, THEN THERE CAN BE NO AND'S OR OR'S\n         NI    VTCFMTCK,255-VTCFMTCC  TURN OFF THE ROUTINE CALL FLAG\n         VTCHL L              EVALUATE THE LIMIT 1=TRUE 0=FALSE\n         ST    R15,LIMVAL     SAVE THE ANSWER\n         VTANDOR 1            CHECK AND1 OR OR1\n         VTANDOR 2            CHECK AND2 OR OR2\n         VTANDOR 3            CHECK AND3 OR OR3\n         VTANDOR 4            CHECK AND4 OR OR4                    013G\n         VTANDOR 5            CHECK AND5 OR OR5                    013G\nLIMCOMP  L     R15,LIMVAL     GET THE RESULT OF ALL THIS\n         LTR   R15,R15        TEST IT\n         BZ    CHECKOUT       IT GETS EXCLUDED\nLIMEND   DS    0H\n         B     CHECKIN        ALL TESTS PASSED, INCLUDE THIS ONE\n         SPACE 5\n*\n*        EVALUATION ROUTINE FOR   KEYWORD  OPER  VALUE\n*\nLIMEVAL  L     R5,REFKEY      GET THE KEYWORD VALUE\n         MH    R5,H12         MULTIPLY IT BY 12\n         A     R5,ATABTITL    THEN RELOCATE IT\n*        SR    R10,R10        CLEAR THE ROUTINE POINTER            022G\n         SR    R2,R2          CLEAR THE ROUTINE POINTER            022G\n         TM    1(R5),X'80'    IS IT A FORMATTED ITEM?\n         BO    LIMFORM        YES, GO DO IT\n         SR    R6,R6          CLEAR A REGISTER\n         IC    R6,2(R5)       GET THE OFFSET INTO VTFMT\n*        IC    R10,1(R5)      GET THE ROUTINE NUMBER               022G\n         IC    R2,1(R5)       GET THE ROUTINE NUMBER               022G\n*        LTR   R10,R10        SEE IF IT'S A GOOD NUMBER            022G\n         LTR   R2,R2          SEE IF IT'S A GOOD NUMBER            022G\n         BP    LIMEVAL1       IT'S ALL RIGHT\nLIMABEND ABEND 702,DUMP       CRASH AND BURN\n*IMEVAL1 B     *(R10)         AND GO TO IT                         022G\nLIMEVAL1 B     *(R2)          AND GO TO IT                         022G\n         B     LIMDATE      4 CDATE, EXPDT, LAST USE DATES.        015G\n         B     LIMCCHH      8 CCHH CHECKING.                       016G\n         B     LIMFORM     12 FORM , USED SPACE\n         B     LIMFORM     16 UNUSED SPACE\n         B     LIMFORM     20 PCT USED\n         B     LIMEXT      24 EXTENTS\n         B     LIMBLREC    28 LRECL, BLKSZ, SEC Q\n*        B     LIMCCHH     32 CCHH CHECKING                        016G\n         B     LIMFORM     32 DSN CHECKING.                        016G\n         B     LIMKEYLE    36 KEY LENGTH CHECKING.                 023G\n         SPACE 5\n*\n*        PERFORM THE FORMATTED ITEM CHECKING\n*\nLIMFORM  DS    0H\n         TM    VTCFMTCK,VTCFMTCC  WAS FORMAT CALLED BEFORE FOR THIS DS\n         BO    LIMFCALD       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          NO, CALL IT TO GET THE ITEMS\n         OI    VTCFMTCK,VTCFMTCC+VTCFMTCD  THEN SET THE SWITCHES\n*IMFCALD SR    R2,R2          CLEAR A WORK REG                     022G\nLIMFCALD DS    0H                                                  022G\n         A     R6,FORMATAD   RELOCATE THE BLOCK\n*        B     *+4(R10)         AND GO TO IT                       022G\n         B     *+4(R2)          AND GO TO IT                       022G\n         B     LIMFORMA     0 FORMATTED ITEM\n         B     LIMABEND     4 CDATE, EXPDT, LAST USE DATE.         015G\n         B     LIMABEND     8 CCHH.                                016G\n         B     LIMALLOC    12 ALLOC, USED SPACE\n         B     LIMUNUSD    16 UNUSED SPACE\n         B     LIMPCT      20 PCT USED\n         B     LIMABEND    24 EXTENTS                              016G\n         B     LIMABEND    28 LRECL, BLKSZ, SECQ                   016G\n         B     LIMDSN      32 DSNAME                               016G\nLIMFORMA DS    0H\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         IC    R2,2(R5)       GET THE OFFSET IN VTFMT\n         A     R2,FORMATAD    THEN RELOCATE IT\n         L     R4,REFVAL      GET THE VALUE PDE\n         LH    R3,4(R4)       GET THE LENGTH OF THE STRING\n         L     R1,0(R4)       AND ITS ADDRESS\n*\n*        DO THE ACTUAL COMPARE\n*\n         BCTR  R3,0           DOWN ONE FOR AN EX\n         EX    R3,COMPLIM     COMPARE AS SPECIFIED\nCOMPDONE DS    0H             GET THE OPERATOR ADDRESS\n         BL    COMPLOW        CHECK THE OPERATOR, VALUE LESS THAN ITEM\n         BE    COMPEQ         CHECK THE OPERATOR, KEYWORD EQUALS VALUE\n*                             KEYWORD IS GREATER THAN THE VALUE\nCOMPHI   CLI   REFOPER+3,NE       WAS OPERATOR NE\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GT       ALSO FOR GT\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GE       AND FOR GE\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*                             KEYWORD IS EQUAL TO THE VALUE\nCOMPEQ   CLI   REFOPER+3,EQ       WAS OPERATOR EQ\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LE       ALSO FOR LE\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GE       AND FOR GE\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*                             KEYWORD IS LESS THAN THE VALUE\nCOMPLOW  CLI   REFOPER+3,NE       WAS OPERATOR NE\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LT       ALSO FOR LT\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LE       AND FOR LE\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*\n*        IT FITS OR IT DOESN'T\n*\nCOMPYES  LA    R15,1          SET A TRUE VALUE\n         BR    R8             THEN RETURN\nCOMPNO   SR    R15,R15        SET A FALSE VALUE\n         BR    R8             THEN RETURN\n*\n*        SPECIAL ROUTINES TO CHECK NON-FORMATTED ITEMS\n*\nLIMDATE  DS    0H\n*\n*        COMPARE DATES\n*\n         LA    R14,DS1CREDT        POINT TO CREATION DATE.         015G\n         CLI   REFKEY+3,CDATE      IS THAT WHAT I'M COMPARING?     015G\n         BE    LIMDGET             YES, USE IT.                    015G\n         LA    R14,DS1EXPDT        NO, POINT TO EXPIRATION DATE.   015G\n         CLI   REFKEY+3,EXPDT      IS THAT WHAT I'M COMPARING?     015G\n         BE    LIMDGET             YES, USE IT.                    015G\n         LA    R14,DS1REFD         NO, USE LAST REFERENCED DATE.   015G\nLIMDGET  SR    R15,R15       CLEAR A WORK REG\n         IC    R15,0(R14)    GET THE YEAR\n         MH    R15,H1000     TIMES 1000\n         SR    R1,R1         CLEAR ANOTHER WORK REG\n         ICM   R1,3,1(R14)    GET THE DAYS\n         AR    R15,R1        PUT THE DATE TOGETHER\n         L     R1,REFNUM     GET THE ADDRESS OF THE VALUE\n         L     R1,0(R1)      GET THE VALUE ITSELF\n         LTR   R1,R1         SEE IF NON-NUMERIC.                   021G\n         BNZ   COMPDATE      NON-ZERO MEANS NUMERIC DATE PRESENT.  021G\n*                            ZERO MEANS NON-NUMERIC DATE PRESENT.  021G\n         L     R2,REFVAL     GET THE VALUE PDE.                    021G\n         L     R3,0(R2)      GET A(STRING).                        021G\n         CLI   0(R3),C'*'    SEE IF CURRENT DATE SHOULD BE USED.   021G\n         BE    LIMDGET1      YES, GET SYSTEM CURRENT DATE.         021G\n         VTOCMSG BADDATE     ONLY NUMERIC OR * ALLOWED ISSUE MSG   021G\nLIMDGET1 L     R4,CVTPTR     GET A(CVT).                           021G\n         USING CVTMAP,R4     TELL ASSEMBLER.                       021G\n         XC    CHEKDBLW,CHEKDBLW CLEAR WORK AREA.                  021G\n         MVC   CHEKDBLW+4(4),CVTDATE   MOVE CURRENT DATE.          021G\n         DROP  R4            UNTELL ASSEMBLER.                     021G\n         CVB   R1,CHEKDBLW   CONVERT CURRENT DATE TO BINARY.       021G\n         LH    R4,4(R2)      GET L(STRING).                        021G\n         CH    R4,H3         SEE IF ADD'L INFO.                    021G\n         BL    COMPDATE      NO, GO COMPARE DATES.                 021G\n         LA    R3,1(R3)      POINT A(STRING) PAST *.               021G\n         ST    R3,0(R2)      RESET A(STRING) IN PDL.               021G\n         BCT   R4,0          DECREMENT L(STRING) BY ONE.           021G\n         ST    R4,4(R2)      RESET L(STRING) IN PDL.               021G\n         LR    R1,R2         POINT TO VALUE PDL.                   021G\n         LR    R2,R15        SAVE KEYWORD DATE VALUE.              021G\n         LR    R3,R1         SAVE CURRENT DATE VALUE.              021G\n         BAL   R8,PDLNUM     GO CONVERT IT.                        021G\n         AR    R15,R3        CURRENT DATE + OFFSET NUMBER OF DAYS. 021G\n         LR    R1,R15        SET UP REFVALUE DATE FOR COMPARE.     021G\n         LR    R15,R2        SET UP KEYWORD DATE VALUE FOR COMPARE.021G\nCOMPDATE CR    R15,R1        COMPARE DATES.                        021G\n         B     COMPDONE      GO CHECK OPERANDS.\n*IMLUSE  DS    0H                                                  015G\n*\n*        LAST USE DATE   --- MODIFIED FOR MVS SU60.                002S\n*\n*        LA    R14,75(,R7)   POINT TO THE DATE-LAST-USE FIELD  002S015G\n*        B     LIMDGET       USE THE STANDARD DATE TEST LOGIC  002S015G\n*                                                                  002S\n**       THE ORIGINAL CODE BELOW INVALID WITH MVS SU60 (GIVES 0C7) 002S\n*                                                                  002S\n*        SR    R14,R14       CLEAR THE DATE\n*        CLC   ZERO,75(R7)   CHECK FOR NO DATA\n*        BE    LIMLUCMP      RIGHT, SKIP ON\n*        MVC   CHEKDBLW+5(3),75(R7)  MOVE IN THE LAST USE DATE\n*        CVB   R14,CHEKDBLW  CONVERT IT TO BINARY\n*LIMLUCMP L    R1,REFNUM     GET THE ADDRESS OF THE VALUE\n*        L     R1,0(R1)      GET THE VALUE\n*        CR    R14,R1        DO THE COMPARE\n*        B     COMPDONE      THEN CHASE DOWN THE OPERANDS\nLIMEXT   DS    0H\n*\n*        EXTENTS\n*\n         L     R1,REFNUM     GET THE COMPARE VALUE ADDRESS\n         CLC   DS1NOEPV,3(R1)        COMPARE THEM\n         B     COMPDONE      GO CHECK OPERANDS\nLIMBLREC DS    0H\n*\n*        LRECL, BLKSZ, SECQ\n*\n         L     R1,REFNUM     GET THE ADDRESS OF THE COMPARE VALUE\n         L     R15,0(R1)      THEN GET THE VALUE ITSELF\n         CLI   REFKEY+3,BLKSZ      BLOCK SIZE?\n         BNE   LIMB1         NO, KEEP CHECKING\n         LH    R1,DS1BLKL    COMPARE TO THE BLOCK SIZE\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      GO SIFT THROUGH THE OPERANDS\nLIMB1    CLI   REFKEY+3,LRECL  LOGICAL RECORD LENGTH\n         BNE   LIMB2         NO, KEEP GOING\n         LH    R1,DS1LRECL   COMPARE TO THE LRECL\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      GO CHECK THE OPERANDS\nLIMB2    MVC   HWORK,DS1SCALO+2 GET THE SECONDARY QUANTITY\n         LH    R1,HWORK      DO THE COMPARE\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      THEN CHECK THE OPERANDS\n*                                                                  023G\n*        KEY LENGTH                                                023G\n*                                                                  023G\nLIMKEYLE DS    0H                                                  023G\n         L     R1,REFNUM     GET THE COMPARE VALUE ADDRESS         023G\n         CLC   DS1KEYL,3(R1) COMPARE THEM                          023G\n         B     COMPDONE      GO CHECK OPERANDS                     023G\n*\n*        SPACE CHECKING ROUTINES\n*\nLIMALLOC DS    0H\n*\n*        ALLOC AND USED\n*\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         L     R1,REFNUM     GET THE ADDRESS OF THE CONVERTED NUMBER\n         L     R1,0(R1)      GET THE VALUE\n         L     R15,0(R6)     GET THE AMOUNT\n         CR    R15,R1        COMPARE THEM\n         B     COMPDONE      THEN CHECK THE OPERANDS\nLIMUNUSD DS    0H\n*\n*        UNUSED\n*\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         L     R6,FORMATAD   POINT TO THE FORMATTED VTOC\n         USING VTFMT,R6      SET ADDRESSABILITY\n         ICM   R14,15,VTFUSED      GET THE AMOUNT USED\n         BM    LIMUNUAL      IF MINUS, WE DON'T KNOW\n         L     R14,VTFALLOC  GET ALLOC\n         S     R14,VTFUSED   MINUS THE AMOUNT USED\nLIMUNUAL L     R1,REFNUM     GET THE ENTERED VALUE\n         L     R1,0(R1)      NOW ITS VALUE FOR REAL\n         CR    R14,R1        COMPARE THE VALUES\n         B     COMPDONE      THEN GO CHECK THE OPERANDS\nLIMPCT   DS    0H\n*\n*        PER CENT\n*\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         L     R6,FORMATAD   POINT TO THE FORMATTED VTOC\n         USING VTFMT,R6      SET ADDRESSABILITY\n         SR    R14,R14       CLEAR A REGISTER\n         ICM   R15,15,VTFUSED      GET THE AMOUNT USED\n         BM    LIMP100       IF UNKNOWN USED, SET 100 PER CENT\n         CLC   VTFALLOC,ZERO ZERO ALLOCATED SPACE?\n         BNE   LIMPCTOK      NO, CONTINUE\n         CLC   VTFUSED,ZERO  ZERO USED SPACE?\n         BE    LIMPCOMP      YES, PCT IS ZERO\n*              ZERO ALLOCATED, NONZERO USED, INCLUDE THIS ONE\n         B     COMPYES\nLIMP100  LA    R15,100       SET UP 100 PER CENT\n         B     LIMPCOMP      GO COMPARE\nLIMPCTOK M     R14,F100      MULTIPLY BY 100 PERCENT\n         D     R14,VTFALLOC  DIVIDE BY THE ALLOCATION\nLIMPCOMP L     R1,REFNUM     GET THE VALUE ADDRESS\n         L     R1,0(R1)      THEN THE VALUE\n         CR    R15,R1        THEN COMPARE THEM\n         B     COMPDONE      THEN GO SIFT THROUGH THE OPERANDS\nLIMDSN   DS    0H                                                  016G\n*                                                                  016G\n*        DSNAME CHECKING                                           016G\n*                                                                  016G\n         SR    R2,R2          CLEAR A WORK REG                     022G\n         MVI   HOLDSDSN,C' '             CLEAR HOLD AREA.          016G\n         MVC   HOLDSDSN+1(43),HOLDSDSN   CLEAR HOLD AREA.          016G\n         MVI   HOLDVDSN,C' '             CLEAR HOLD AREA.          016G\n         MVC   HOLDVDSN+1(43),HOLDVDSN   CLEAR HOLD AREA.          016G\n         L     R6,FORMATAD    POINT TO THE FORMATTED VTOC.         016G\n         USING VTFMT,R6       SET ADDRESSABILITY.                  016G\n         SR    R2,R2          CLEAR WORK REG.                      016G\n         LH    R2,VTFDSNL     GET THE LENGTH OF DSNAME.            016G\n         BCTR  R2,0           DOWN ONE FOR AN EX.                  016G\n         LA    R1,VTFDSN      GET A(VTFDSN).                       016G\n         EX    R2,MOVEVDSN    MOVE VTFDSN TO WORK AREA.            016G\n         L     R4,REFVAL      GET THE VALUE PDE.                   016G\n         LH    R2,4(R4)       GET THE LENGTH OF THE STRING.        016G\n         BCTR  R2,0           DOWN ONE FOR AN EX.                  016G\n         L     R1,0(R4)       GET A(STRING).                       016G\n         EX    R2,MOVESDSN    MOVE STRING TO WORK AREA.            016G\n         LA    R1,HOLDSDSN    GET A(STRING DSN).                   016G\n         LA    R2,HOLDVDSN    GET A(STRING DSN).                   016G\n         LA    R3,43          SET L(STRING VS VTFDSN COMPARE).     016G\n         EX    R3,COMPLIM     COMPARE AS SPECIFIED.                016G\n         B     COMPDONE       YES, DO STANDARD COMPARISON.         016G\n*\n*        CCHH CHECKING IS NOT QUITE STANDARD BECAUSE THERE MAY\n*        MAY BE UP TO 127 EXTENTS TO COMPARE.  THE DATA MAY BE     017G\n*        CC OR CCHH FORMATS.  THE DATA SET MAY BE EQUAL TO,\n*        LESS THAN, AND GREATER THAN ANY PARTICULAR VALUE.\n*\nLIMCCHH  DS    0H\n*\n*        FIRST SEE IF THE CCHH WAS CONVERTED\n*              CONVERT IT IF NOT, SKIP IF IT'S DONE\n*\n         L     R5,REFNUM     GET THE ADDRESS OF THE COMPARISON VALUE\n         L     R4,0(R5)      GET THE VALUE\n         ICM   R6,3,4(R5)    GET THE COMPARE LENGTH\n         BP    LIMCSET       IF IT'S SET, THE CONVERSION IS DONE\n*                      IT WASN'T SET, CONVERT FROM CHARS TO BINARY\n         L     R1,REFVAL     GET THE ADDRESS OF THE IKJIDENT\n         L     R2,0(R1)      POINT TO THE TEXT\n         LH    R3,4(R1)      GET THE LENGTH OF THE TEXT\n*        IT SHOULD BE 4 OR 8 CHARACTERS\n         XC    DOUBLE,DOUBLE CLEAR OUT A PLACE TO WORK\n         CH    R3,H4         IS IT A CYLINDER ONLY?\n         BH    LIMCCON2      NO, TRY FOR A CCHH\n         BE    LIMCCON1      YES, JUST CONVERT IT\n         VTOCMSG CCHHLEN     LESS THAN FOUR CHARS, ISSUE A MSG\nLIMCCON1 LA    R6,1          SET THE COMPARE LENGTH\n         B     LIMCMOVE      GO MOVE IT IN\nLIMCCON2 LA    R6,3          SET THE COMPARE LENGTH\n         CH    R3,H8         WAS IT A CCHH?\n         BE    LIMCMOVE      YES, JUST THE RIGHT LENGTH\n         VTOCMSG CCHHLEN     WARN THE PERSON\n         CH    R3,H8         CHECK AGAIN\n         BL    LIMCMOVE      IS IT OVER 8 CHARS?\n         LH    R3,H8         YES, SET IT FOR THE MAX - IGNORE RR\nLIMCMOVE BCTR  R3,0          MINUS ONE FOR THE EX\n         EX    R3,MOVECCHH   MOVE IN THE CHARS\n         TR    DOUBLE,DECTABLE TRANSLATE HEX EBCDIC TO HEX BINARY\n         PACK  CYLH(5),DOUBLE(9)  SQUISH OUT THE ZONES\n         L     R4,CYLH       GET THE CCHH\n         ST    R4,0(R5)      SAVE IT FOR LATER\n         STH   R6,4(R5)      SAVE THE LENGTH TOO\nLIMCSET  DS    0H            THE NUMBER IS CONVERTED\n*\n*        COMPARE THE EXTENTS TO THE CCHH VALUE.\n*        ANY EXTENT MAY BE LT, EQ, AND GT A PARTICULAR\n*        VALUE, AND ALL THE EXTENTS MUST BE CHECKED.\n*\n         MVI   CCHHCOMP,0    CLEAR THE FLAGS\n         SR    R2,R2         CLEAR A REG FOR AN EXTENT COUNTER\n         ICM   R2,1,DS1NOEPV GET THE NUMBER OF EXTENTS\n         BZ    COMPNO        NO EXTENTS, JUST GO SEE\n*\n*        GET EACH EXTENT AND PROCESS IT\n*\n*        SR    R1,R1         FIRST EXTENT                          017G\n*XTNEXT  LR    R3,R1         GET THE CURRENT EXTENT                017G\n*        SLL   R3,2          TIMES 4                               017G\n*        EX    R0,GETEXT(R3) GET THE EXTENT ADDRESS INTO R3        017G\n         SR    R1,R1         FIRST EXTENT                          017G\nEXTNEXT  LR    R3,R1         GET THE CURRENT EXTENT                017G\n         CH    R3,H2         IS IT IN FMT1 DSCB?                   017G\n         BH    EXTFMT3       NO, IT'S IN FMT3 DSCB.                017G\n         SLL   R3,2          TIMES 4                               017G\n         EX    R0,GETEXT(R3) GET THE EXTENT ADDRESS INTO R3        017G\n         B     EXTGOT                                              017G\nEXTFMT3  DS    0H            MUST PROCESS FMT3 DIFFERENTLY.        017G\n         SH    R3,H3         MAKE IT RELATIVE TO BEGIN FMT3.       017G\n         MH    R3,H10        CALCULATE OFFSET FROM BEGIN FMT3.     017G\n         LA    R3,FMT3(R3)   GET A(CURRENT EXT).                   017G\nEXTGOT   DS    0H            GOT A(EXTENT).                        017G\n*\n*        CHECK THE BOTTOM OF THE EXTENT\n*\n         NI    CCHHCOMP,255-CCHHX TURN OFF THE STRADDLE FLAG\n         EX    R6,CLCEXTLO    DO THE COMPARE\n         BH    SETH1         THE FIELD IS HIGHER THAN THE VALUE\n         BE    SETEQ1        THE FIELD IS EQUAL TO THE VALUE\n         OI    CCHHCOMP,CCHHLOW+CCHHX  LOWER -  POSSIBLE STRADDLE\n         B     CHECKHI       GO CHECK THE TOP OF THIS EXTENT\nSETH1    OI    CCHHCOMP,CCHHHIGH  SET THE FLAG\n         B     CHECKHI       GO CHECK THE TOP OF THIS EXTENT\nSETEQ1   OI    CCHHCOMP,CCHHEQ   SET THE FLAG\n*\n*        CHECK THE TOP OF THE EXTENT\n*\nCHECKHI  EX    R6,CLCEXTHI   DO THE COMPARE\n         BE    SETEQ2        EQUAL, GO SET IT\n         BL    EXTSET        LOW, GO SET IT\n*\n*        THIS IS THE ONLY SLIGHTLY TRICKY PART, A STRADDLE\n*        IF THE BOTTOM OF THE EXTENT IS LOWER THAN THE VALUE AND THE\n*        TOP OF THE EXTENT IS HIGHER THAN THE VALUE, THEN THE\n*        EQ FLAG SHOULD BE SET TOO.\n*\n         OI    CCHHCOMP,CCHHHIGH  SET THE HIGH FLAG\n         TM    CCHHCOMP,CCHHX     WAS THE BOTTOM LOWER THAN THE VALUE?\n         BZ    EXTSET        NO, SKIP ON\nSETEQ2   OI    CCHHCOMP,CCHHEQ    SET THE EQ FLAG\n*\n*        FINISHED WITH THAT EXTENT, CHECK FOR MORE\n*\nEXTSET   DS    0H\n         LA    R1,1(R1)      INCREMENT THE EXTENT COUNTER\n         CR    R1,R2         CHECK THE EXTENT COUNTER\n         BNL   LIMCOPER      THAT'S ALL FOLKS\n         TM    CCHHCOMP,CCHHHIGH+CCHHEQ+CCHHLOW  ARE THEY ALL SET?\n         BNO   EXTNEXT       NO, CONTINUE LOOKING\n*                            YES, STOP NOW - ALL THE FLAGS ARE SET\nLIMCOPER L     R4,REFOPER    GET THE NUMERIC VALUE OF THE KEY\n         IC    R4,CCHHTAB(R4)  GET A FLAG MASK\n         EX    R4,CCHHOPER   CHECK TO SEE IF THE CONDITION IS SET\n         BZ    COMPNO        NOT THERE\n         B     COMPYES       YES\n*\n*        EXECUTED INSTRUCTIONS TO GET THE ADDRESS OF THIS EXTENT\n*\nGETEXT   LA    R3,DS1EXT1     1ST EXTENT\n         LA    R3,DS1EXT2     2ND EXTENT\n         LA    R3,DS1EXT3     3RD EXTENT\n*        LA    R3,DS3EXTNT    4TH EXTENT                           017G\n*        LA    R3,DS3EXTNT+10 5TH EXTENT                           017G\n*        LA    R3,DS3EXTNT+20 6TH EXTENT                           017G\n*        LA    R3,DS3EXTNT+30 7TH EXTENT                           017G\n*        LA    R3,DS3ADEXT    8TH EXTENT                           017G\n*        LA    R3,DS3ADEXT+10 9TH EXTENT                           017G\n*        LA    R3,DS3ADEXT+20 10TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+30 11TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+40 12TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+50 13TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+60 14TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+70 15TH EXTENT                          017G\n*        LA    R3,DS3ADEXT+80 16TH EXTENT                          017G\n*\n*        SAVE FMT4 (VTOC) AND FMT6 EXTENT INFO\n*\n*                                      FMT4 ALREADY ADDED TO MAP.  005G\nGOTFMT4  MVI   VTCCFUNC,0              INDICATE NO FMT5 PROCESSED. 005G\n         CLC   DS4F6PTR,=XL5'0000000000'  IS THERE A FMT6?         005G\n         BE    CHECKOUT                 NO, SKIP ALONG.            005G\n         LA    R1,DS4F6PTR             YES, GET A(CCHHR ADDRESS).  005G\nFMT6GET  L     R7,DSCBADDR             GET A(AREA TO READ INTO).   005G\n         LA    R7,8(R7)                BUMP PAST HEADER AREA.      005G\n         DROP  R7\n         USING FMT6DSEC,R7             TELL ASSEMBLER.             005G\n         LR    R15,R7                  GET A(AREA TO READ INTO).   005G\n         BAL   R2,OBTAINIT             GET THE RECORD.             005G\n         LTR   R15,R15                 TEST THE RETURN CODE.       005G\n         BNZ   OBT6ERR                 BAD NEWS, ISSUE MESSAGE.    005G\n         VTOCMAP ADD                   ADD SPLIT EXTENT TO MAP.    005G\n         CLC   DS6PTRDS,=XL5'0000000000' IS THERE ANOTHER FMT6?    005G\n         BE    CHECKOUT                NO, SKIP ALONG.             005G\n         LA    R1,DS6PTRDS             YES, GET THE CCHHR ADDRESS. 005G\n         B     FMT6GET                 GET THE NEXT FMT6.          005G\n*\n*        SAVE FMT5 EXTENT INFO\n*\nGOTFMT5  CLI   VTCCFUNC,0              HAVE ALL FMT5 BEEN PROCESSD.005G\n         BNE   CHECKOUT                YES.                        005G\n         MVI   VTCCFUNC,1              INDICATE FMT5 ALL PROCESSED.005G\nNEXTFMT5 VTOCMAP ADD                   ADD FREE EXTENT TO MAP.     005G\n         DROP  R7\n         USING FMT5DSEC,R7             TELL ASSEMBLER.             005G\n         L     R7,DSCBADDR             GET A(FMT5 JUST GOTTEN).    005G\n         LA    R7,8(R7)                BUMP PAST HEADER.           005G\n         CLC   DS5PTRDS,=XL5'0000000000'  IS THERE ANOTHER FMT5?   005G\n         BE    CHECKOUT                 NO, SKIP ALONG.            005G\n         LA    R1,DS5PTRDS             YES, GET THE CCHHR ADDRESS. 005G\n         LR    R15,R7                  GET A(AREA TO READ INTO).   005G\n         BAL   R2,OBTAINIT             GET THE RECORD.             005G\n         LTR   R15,R15                 TEST THE RETURN CODE        005G\n         BNZ   OBT5ERR                 ERROR ON OBTAIN.            005G\n         B     NEXTFMT5                SAVE EXTENT INFO.           005G\n*\n*        ISSUE ERROR MESSAGES AND RETURN\n*\nOBT3ERR  MVC   MSGTEXT2,OBT3ERRM            MOVE MESSAGE.          007G\n         MVC   MSGTEXT2+15(6),VOLID         MOVE VOLSER.           007G\n         VTOCMSG MSGTEXT2                   ISSUE ERROR MESSAGE.   007G\n         B     CHECKOUT                                            005G\nOBT5ERR  MVC   MSGTEXT2,OBT5ERRM            MOVE MESSAGE.          007G\n         MVC   MSGTEXT2+15(6),VOLID         MOVE VOLSER.           007G\n         VTOCMSG MSGTEXT2                   ISSUE ERROR MESSAGE.   007G\n         B     CHECKOUT                                            005G\nOBT6ERR  MVC   MSGTEXT2,OBT6ERRM            MOVE MESSAGE.          007G\n         MVC   MSGTEXT2+15(6),VOLID         MOVE VOLSER.           007G\n         VTOCMSG MSGTEXT2                   ISSUE ERROR MESSAGE.   007G\n         B     CHECKOUT                                            005G\nCHECKOUT LA    R15,8          EXCLUDE THIS DATA SET\n         B     CHEKRET        RETURN\n*\nCHECKIN  SR    R15,R15        CLEAR THE REGISTER, PROCESS THIS DATA SET\nCHEKRET  VTCLEAVE EQ                                               009G\n*\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*\n**************************************************************\n*  ROUTINE TO OBTAIN A RECORD\n* INPUT: R1=CCHHR OF RECORD TO OBTAIN\n* CALLED VIA R2\n**************************************************************\nOBTAINIT ST    R15,CAMSEEK+12  SAVE A(AREA FOR THE DSCB).          005G\n         ST    R1,CAMSEEK+4    SAVE A(CCHHR TO SEEK).              005G\n         MVC   CAMSEEK(4),CAMSCON      MOVE FIRST WORD OF CAMLST.  005G\n         LA    R1,VOLID       POINT TO THE VOLUME SERIAL\n         ST    R1,CAMSEEK+8   SAVE IT\n         OBTAIN CAMSEEK       GET THE DSCB\n         BR    R2             RETURN TO CALLER.                    005G\n         EJECT\n*\n*        PDLNUM - CONVERT FROM CHARACTERS ( EBCDIC ) TO AN INTEGER\n*              BINARY FORM, PASSED BACK VIA REGISTER 15\n*              A PARSE PDE IS THE INPUT AS SHOWN IN THE SAMPLE BELOW\n*                       LA    R1,PDL     POINT TO THE PARSE DECRIPTION\n*                       BAL   R8,PDLNUM  GO CONVERT TO NUMERICS\n*              THE ROUTINE WILL TERMINATE IF IT FINDS NON-NUMERICS\n*                 ANY CHARACTERS OTHER THEN 0-9, +, -\n*              REGISTERS 1, 2, 5, 6, AND 7 ARE USED\n*\nPDLNUM   STM   R1,R8,PDLNSAVE SAVE THE REGISTERS\n         LH    R2,4(R1)       GET THE STRING LENGTH\n         L     R1,0(R1)       GET THE STRING ADDRESS\n         MVI   PDLMINUS,0     CLEAR THE NEGATIVE NUMBER FLAG\n         SR    R5,R5          CLEAR THE CHARACTER COUNTER\n         SR    R15,R15        CLEAR THE ANSWER\nPDLLOOP  LA    R6,0(R5,R1)    POINT TO THIS DIGIT\n         LA    R5,1(R5)       GET TO THE NEXT DIGIT\n         CR    R5,R2          IS THIS THE END OF THE STRING?\n         BH    PDLFINI        YES, EXIT\n         SR    R7,R7          CLEAR A WORK REGISTER\n         IC    R7,0(R6)       GET THE CHARACTER\n         SH    R7,PDLH240     SUBTRACT THE CHARACTER C'0'\n         BM    PDLSP          IF NEGATIVE, CHECK SPECIAL CHARACTERS\n         MH    R15,PDLH10     IT'S A DIGIT, MULTIPLY PRIOR NUM BY TEN\n         AR    R15,R7         ADD ON THE NEW DIGIT\n         B     PDLLOOP        AND LOOP FOR MORE\n*\n*        CHECK FOR SPECIAL CHARACTERS\n*\nPDLSP    CLI   0(R6),C' '     IS IT A BLANK?\n         BE    PDLLOOP        THEN IT'S OK\n         CLI   0(R6),C'+'     IS IT A PLUS?\n         BE    PDLLOOP        THAT'S ALSO OK\n         CLI   0(R6),C'-'     IS IT A MINUS?\n         BNE   PDLFINI        NO, JUST QUIT\n         MVI   PDLMINUS,1     YES, NOTE IT\n         B     PDLLOOP        AND LOOK FOR MORE\n*\n*        QUIT, AFTER SETTING R15 TO NEGATIVE IF NEEDED\n*\nPDLFINI  CLI   PDLMINUS,1     WAS A MINUS SIGN FOUND?\n         BNE   PDLLEAVE       NO, EXIT\n         LNR   R15,R15        YES, MAKE IT NEGATIVE\nPDLLEAVE LM    R1,R8,PDLNSAVE RESTORE THE REGISTERS\n         BR    R8             RETURN\nPDLH10   DC    H'10'\nPDLH240  DC    H'240'\n         EJECT\n*\n*        ROUTINE TO CONVERT A TEXT DSCB ITEM\n*        INTO ITS KEY NUMBER\n*        INPUT IS REG 4 - IKJIDENT PTR\n*        OUTPUT IS REG 15 - KEY NUMBER\n*        ENTRY VIA BAL   R8,GETKEY\n*\nGETKEY   L     R1,ATABTITL     POINT TO THE TABLE\n         LA    R1,12(R1)     POINT TO THE FIRST ENTRY\n         LA    R15,1           SET UP THE KEY NUMBER COUNTER\n         L     R6,0(R4)      POINT TO THE ENTERED TEXT\n         ICM   R3,3,4(R4)    GET THE LENGTH OF THE ENTERED TEXT\n         BNP   GETKNOTF      NOT FOUND IF ZERO\n         BCTR  R3,0          MINUS ONE FOR THE EX\nGETKLOOP LA    R2,4(R1)      POINT TO THE COMPARISON TEXT\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\nGETKSTD  EX    R3,GETKCOMP   COMPARE THE KEY TEXT\n         BE    GETKFND       I FOUND IT\n         LA    R1,12(R1)     GET TO THE NEXT KEY\n         LA    R15,1(R15)    INCREMENT THE KEY COUNTER\n*        CH    R15,H27       CHECK FOR THE END OF THE TABLE    012G024G\n         CH    R15,H29       CHECK FOR THE END OF THE TABLE        024G\n         BNH   GETKLOOP      NOT YET, KEEP LOOKING\n*\n*        KEY WAS NOT FOUND, SEND BACK A ZERO\n*\nGETKNOTF SR    R15,R15       SET UP THE ZERO AND RETURN\nGETKFND  BR    R8            JUST RETURN\nGETKCOMP CLC   0(0,R6),0(R2) EXECUTED TEXT COMPARE\n*H27      DC    H'27'         PREVIOUSLY 26.                   012G024G\nH29      DC    H'29'         PREVIOUSLY 27.                        024G\n         EJECT\n*\n*        ROUTINE TO CONVERT THE OPERATOR TEXT\n*        INTO A NUMERIC VALUE\n*\nGETOPER  LA    R15,1         NUMERIC VALUE COUNTER\nGETOLOP1 LR    R14,R15       GET THE NUMBER                        014G\n         SLA   R14,1         MULTIPLY BY 2\n         LA    R14,OPERS1(R14)     RELOCATE IT                     014G\n         CLC   0(2,R14),0(R1)      IS THIS THE TEXT?\n         BE    GETOFND       YES, RETURN THE NUMBER\n         LA    R15,1(R15)    NO, TRY THE NEXT ONE\n         CH    R15,H7        CHECK FOR THE END\n         BL    GETOLOP1      NOT THERE YET, KEEP TRYING            014G\n*        GIVE A SECOND TRY FOR OTHER WAYS OF SAYING OPER.          014G\n         LA    R15,1         NUMERIC VALUE COUNTER                 014G\nGETOLOP2 LR    R14,R15       GET THE NUMBER                        014G\n         SLA   R14,1         MULTIPLY BY 2                         014G\n         LA    R14,OPERS2(R14)     RELOCATE IT                     014G\n         CLC   0(2,R14),0(R1)      IS THIS THE TEXT?               014G\n         BE    GETOFND       YES, RETURN THE NUMBER                014G\n         LA    R15,1(R15)    NO, TRY THE NEXT ONE                  014G\n         CH    R15,H7        CHECK FOR THE END                     014G\n         BL    GETOLOP2      NOT THERE YET, KEEP TRYING            014G\n         VTOCMSG OPERERR,OPERERR2  ISSUE THE MESSAGE\n         LA    R15,1         SET THE DEFAULT OPERATOR, EQ\nGETOFND  BR    R8            THEN RETURN\n         EJECT\n*\n*        PROGRAM CONSTANTS\n*\nCOMPLIM  CLC   0(0,R2),0(R1)      COMPARE KEYWORD TO VALUE\nMOVEVDSN MVC   HOLDVDSN(0),0(R1)  MOVE VTFDSN TO WORK AREA.        016G\nMOVESDSN MVC   HOLDSDSN(0),0(R1)  MOVE STRING TO WORK AREA.        016G\nMOVECCHH MVC   DOUBLE(0),0(R2)\nCLCEXTLO CLC   2(0,R3),0(R5)\nCLCEXTHI CLC   6(0,R3),0(R5)\nCCHHOPER TM    CCHHCOMP,0\nCCHHTAB  DC    X'0040A0206080C0'  CCHHCOMP FLAGS\nOPERS1   DC    C'  EQNELTLEGTGE'                                   014G\nOPERS2   DC    C'  = \u00ac=< <=> >='                                   014G\n*    FOR  EQ, NE, LT, LE, GT, GE\nPERIOD   DC    C'.'                                                019G\nEDMASK   DC    XL16'40202020202020202020202020202120'\nBLANKS   DC    CL16'                '\nSTARS    DC    CL16'****************'\nBLKTRTAB DC    XL64'00',X'04',XL192'00'\nCAMSCON  CAMLST SEEK,*,*,*\nCOMPARE  CLC   0(0,R6),0(R2)  EXECUTED COMPARE\nDECTABLE EQU   *-C'A'   CONVERT EBCDIC HEX TO BINARY\n         DC    X'0A0B0C0D0E0F'\n         DC    (C'0'-C'F'-1)X'FF'  FILLER\n         DC    X'00010203040506070809'\n*\n*\n*\nH2       DC    H'2'                                                017G\nH3       DC    H'3'\nH4       DC    H'4'\nH7       DC    H'7'\nH8       DC    H'8'\nH10      DC    H'10'\nH12      DC    H'12'\nZERO     DC    F'0'\nF100     DC    F'100'\nH1000    DC    H'1000'\nF127     DC    F'127'\n*\n*\n*\n*        PROGRAM MESSAGES\n*\n* 001G 005G 006G 001G 005G 006G 021G BELOW 7 LINES CHANGED\nOBT3ERRM VTCMSG ' VTOCCHEK -VVVVVV- ERROR IN OBTAIN ON FMT 3 DSCB '\nOBT5ERRM VTCMSG ' VTOCCHEK -VVVVVV- ERROR IN OBTAIN ON FMT 5 DSCB '\nOBT6ERRM VTCMSG ' VTOCCHEK -VVVVVV- ERROR IN OBTAIN ON FMT 6 DSCB '\nKEYERR   VTCMSG ' VTOCCHEK - LIM, AND, OR OR SUBPARM ERROR - XXXXXX '\nCCHHLEN  VTCMSG ' VTOCCHEK - CCHH SHOULD BE 4 OR 8 HEX CHARS '\nOPERERR VTCMSG ' VTOCCHEK - OPERATOR WAS NOT EQ, NE, LT, LE, GT, OR GE'\nOPERERR2 VTCMSG '          - ASSUMING EQ'\nBADDATE  VTCMSG ' VTOCCHEK - USE JULIAN DATE (YYDDD) OR *'\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         COPY  VTCPARS                                             009G\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nCHEKWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nCAMSEEK  CAMLST SEEK,*,*,*\nCAMLEN   EQU   *-CAMSEEK\n         DS    0D\nCYLH     DS    F\n         DS    X              PAD FOR CCHH\nEQ       EQU   1              EQUATES FOR OPERATOR VALUES\nNE       EQU   2\nLT       EQU   3\nLE       EQU   4\nGT       EQU   5\nGE       EQU   6\nHWORK    DS    H\nLIMVAL   DS    F\nNUMBERL  DS    F\nNUMLENL  DS    H\nFLAGNML  DS    X\nNUMKEYL  DS    X\nNUMBER1  DS    F\nNUMLEN1  DS    H\nFLAGNM1  DS    X\nNUMKEY1  DS    X\nNUMBER2  DS    F\nNUMLEN2  DS    H\nFLAGNM2  DS    X\nNUMKEY2  DS    X\nNUMBER3  DS    F\nNUMLEN3  DS    H\nFLAGNM3  DS    X\nNUMKEY3  DS    X\nNUMBER4  DS    F                                                   013G\nNUMLEN4  DS    H                                                   013G\nFLAGNM4  DS    X                                                   013G\nNUMKEY4  DS    X                                                   013G\nNUMBER5  DS    F                                                   013G\nNUMLEN5  DS    H                                                   013G\nFLAGNM5  DS    X                                                   013G\nNUMKEY5  DS    X                                                   013G\nREFKEY   DS    F\nREFOPER  DS    F\nREFVAL   DS    A\nREFNUM   DS    A\nPDLNSAVE DS    8A             REGISTER SAVE AREA FOR PDLNUM RTN\nPDLMINUS DC    X'00'\nCHEKDBLW DS    D\nCCHHCOMP DS    X\nCCHHHIGH EQU   X'80'\nCCHHEQ   EQU   X'40'\nCCHHLOW  EQU   X'20'\nCCHHX    EQU   X'08'\nHOLDVDSN DS    CL44                 TO EXPAND VTFDSN TO 44 BYTES.  016G\nHOLDSDSN DS    CL44                 TO EXPAND STRING TO 44 BYTES.  016G\n         DS    0D\nLENWORK  EQU   *-CHEKWORK\n         VTOCMAP EQ                                                005G\n*\n*        VTOC COMMAND COMMON AREA\n*\n         VTCCOM                                                    009G\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTCFMT                                                    009G\n         SPACE 3\n         VTCPDEDS                                                  009G\n         SPACE 3\n         SPACE 3\nFMT1DSEC DSECT                                                     005G\n         IECSDSL1 (1)\nFMT3DSEC DSECT                                                     017G\n         IECSDSL1 (3)\nFMT5DSEC DSECT                                                     005G\n         IECSDSL1 (5)\nFMT6DSEC DSECT                                                     005G\n         IECSDSL1 (6)\n         CVT   DSECT=YES                                           021G\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT587/FILE587.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT587", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}