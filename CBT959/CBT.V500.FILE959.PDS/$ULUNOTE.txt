Notes on the ULUT accessing method to scan UCB's.

Introduction.

Gilbert Saint-flour discovered this IBM internal technique for doing
non-authorized scans of REAL UCB's.  IBM keeps a real UCB Lookup Table
(called the ULUT), in above-the-line storage.  The format of this
table is not guaranteed.  IBM can change the format at will, but they
have established "types" (or formats) of ULUT table.  Currently, as
of this writing, there are two ULUT types, type X'01' and type X'02'.
Plus, there is now an added type X'03', with the ULUT table being
moved to 64-bit storage.

If you want to check the format of the ULUT, you first look for which
"type" it is, and then you know what to do.  You do not have to check
the system level.  Knowing the ULUT TYPE is enough.

However, you must also check if the ULUT is in 64-bit storage
(addressable via doubleword address) or in 31-bit storage (addressable
by fullword address).  The way to do that is to look in the IOVT
(I/O Vector Table).

The IOVT is addressable from the CVT.

    CVT + X'7C'    points to the IXAVL.
    IXAVL + X'D0'  points to the IOVT.

The IOVT is an OCO control block.  But we know enough about it, to
do what we need.  The IOVT contains two possible addresses to the ULUT.

    IOVT + X'8'    is a fullword address.  If it is non-zero, then
                   it points to a 31-bit ULUT and you don't have to
                   do any more work to find the ULUT.  31-bit ULUT's
                   are either Type X'01' or Type X'02'.

    IOVT + X'1B8'  contains a doubleword pointer.  If the fullword
                   pointer at IOVT + X'8' is zeroes, then this
                   doubleword pointer will be populated, and it will
                   point to the ULUT in 64-bit storage.  Such a ULUT
                   will be Type X'03' or higher.

The ULUT Type 1 has extended at least as far back as ESA 5.2.2 which
is pre-Y2K.  The ULUT Type 2 has extended at least as far forward as
z/OS 2.1, without PTF UA90741 installed.  The 64-bit ULUT coding was
originally intended to be deployed in z/OS 2.2, but it was retrofitted
to z/OS 2.1 and z/OS 1.13 with PTFs, as follows.

    z/OS 2.1   -  PTF UA90741
    z/OS 1.13  -  PTF UA90740, for HBB7780
    z/OS 1.13  -  PTF UA90742, for JBB778H, on top of UA90740

STRUCTURE OF THE ULUT:

The ULUT consists of two parts.  First is a bunch of fields containing
general quantities, such as the total number of entries in the table,
and the number of entries in each device category, such as DASD, TAPE,
and so forth.  After that, there is the device table itself, describing
all the devices.  We will refer to the device table itself as the table
of entries, or the ULUT table entries.

For both ULUT types, the format of the 12-byte ULUT table entries
appears to be the same.

   ULUT table entries are 12 bytes in length. No change in format.

     The first halfword is the unit number in hex.
     The second halfword consists of flags.
     The third halfword is a sequence counter number in the table.
     The fourth halfword is probably unused for now.
     The next fullword contains the real UCB address of the unit.

     Example:

          0A80 4000 010D 0000 00F511D0

          unit flag coun-     real UCB
          addr      ter       address

In order to read the ULUT table entries, you look at the first
halfword of the table entry which is the hex device address, and the
last fullword of the ULUT table entry, which points to the real UCB.

The UCB itself, contains, or points to, related areas that tell you
just about anything you need to know about that particular device.
So the main guts of each ULUT table entry is the hex device number,
and the address of the real UCB which defines that device.

The general ULUT control block itself, is accessed by the following
instructions, which have to execute in 31-bit mode (AMODE 31).
We have condensed this sequence of instructions into a relatively
easy-to-use macro, called ULUINIT.  We will explain more about
our ULUINIT macro later.  For now, here are the instructions that
are used to get the address of the entire ULUT table, and to
afterwards point to the address of the first 12-byte ULUT table entry.

The following coding applies to 31-bit ULUT's only.  To see the
proper coding for 64-bit ULUT's see the code in the ULUINIT macro.
It is as follows:

You first check if IOVT+8 (fullword) is zero, and then you look at
IOVT+X'1B8' which is a doubleword, to point to the 64-bit ULUT.
Remember that 64-bit addresses have to be referred to with 64-bit
instructions, in 64-bit addressing mode (say, after a SAM64).
And the high-order bit in a 31-bit address has to be zeroed first,
before entering 64-bit addressing mode.

GETULUT  DS    0H                     Get the ULUT (UCB lookup table)
         L     R3,16                  CVT
         L     R3,X'7C'(,R3)          CVTIXAVL - IOCOM
         L     R3,X'D0'(,R3)          IOVT
         L     R4,8(,R3)              UCB Lookup Table (ULUT)
         LR    R3,R4                  Point both regs to ULUT
         CLC   =C'ULUT',0(R3)         Eyecatcher there?
         BNE   EXIT                   Nope. It ain't it. Out.
* ------------------------------------------------------------------ *
         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)
         BE    ULUTTYP1               Go to beginning of table entries.
         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)
         BE    ULUTTYP2               Go to beginning of table entries.
* ----------------------------------- Insert test for future types here
         B     EXIT                   Neither?  Get out.
* ------------------------------------------------------------------ *
*     Get actual table entries - location varies by ULUT type....    *
*                                                                    *
*     (This seems to be why IBM doesn't document this interface.     *
*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *
*      wants to keep the user's interface standard.  But we don't    *
*      want to lose the convenience of getting a UCB scan of REAL    *
*      UCBs, in REAL TIME, without having to be APF-authorized.)     *
*                                                                    *
*     Actually, this program has been tested to work from ESA 5.2.2  *
*      through z/OS 1.13.  So it is really quite stable, so far.     *
* ------------------------------------------------------------------ *
ULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.
         L     R4,X'10'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         B     LOOPSET
ULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.
         L     R4,X'18'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
*        B     LOOPSET
LOOPSET  DS    0H              Set up loop thru all UCB's.


I invented the ULUDSECT control block for the purpose of simplifying
the process of reading through all the devices defined in the UCB
Lookup Table.  Instead of looking at the UCB itself and extracting
any fields we want to look at, our ULUSCAN macro pre-extracts commonly
used fields from the UCB and related control blocks, in one process,
putting all this information into the ULUDSECT control block.  Then,
most subsequent inquiries from the UCB actually go to ULUDSECT fields,
which were obtained from the UCB by the ULUSCAN macro's action.  To
put it another way, we might say that the ULUSCAN macro "pre-digests"
the UCB information, before we make our inquiries.

The ULUINIT macro requires a 88-byte workarea, which contains the
control block described by the ULUDSECT macro.  The fields of the
ULUDSECT control block are actually filled by two macros:  ULUINIT
initially, and then ULUSCAN later.  The ULUINIT macro is executed
once, to establish the ULUDSECT control block and to fill in its fields
relating to the whole ULUT control block itself.  The ULUSCAN macro
then reads each individual 12-byte ULUT table entry corresponding to
each individual device, "pre-digesting" its UCB fields and placing
them into the ULUDSECT control block.

The ULUSCAN macro is therefore executed repeatedly, one time for each
device defined in that system.

The contents of the ULUDSECT control block follows below (old format).
For the new format, see the new macro in this pds.

To be clearer, the ULUINIT macro establishes the ULUDSECT control block
and fills in those fields NOT having to do with each UCB, but with the
ULUT control block in general.  The ULUSCAN macro then fills in all
ULUDSECT fields which have to do with each ULUT table entry (that is,
each particular UCB).

You can see that everything necessary to describe a device (i.e. a
UCB) can be obtained from the contents of ONE ULUDSECT entry.  To
scan all the UCB's on a system, you run the ULUSCAN macro to step
through the ULUT table entries, one at a time, pre-digesting each
one's UCB information and putting it into the ULUDSECT control block.

APF-authorization is not necessary to do this, but the scan must be
done in 31-bit mode.  Here is what the ULUDSECT control block looks
like.

ULUDSECT DSECT
         DS    0D            Align to doubleword for GETMAIN
ULUDULUT DS    F             Address of ULUT in this system
ULUDCURR DS    F             Current ULUT table entry address
ULUDNEXT DS    F             Next ULUT table entry address
ULUDTOTC DS    F             Total count of ULUT entries
ULUDRUNC DS    F             Running descending count of ULUT entries
*                             (initialized to ULUDTOTC at beginning)
ULUDDEVA DS    H             Device address of current table entry
ULUDCNTR DS    H             Counter in ULUT of current table entry
*                             This is one higher than the table entry
*                             count, and is incremented by one with
*                             each successive table entry.  The count
*                             field for the very last table entry,
*                             is X'0000', marking the end of the table.
ULUDUCBA DS    F             UCB address of current table entry
ULUDCEXT DS    F             Address of this UCB's common extension
ULUDDEVT DS    F             UCB device type (4 bytes)
ULUDONLF DS    X             UCB + 3 (device online has X'80' set)
ULUDTYPE DS    X             ULUT TYPE for this table
ULUDRSV1 DS    2X            RESERVED
ULUDSVR0 DS    F             Save area for R0 in macro invocation
ULUDSVR1 DS    F             Save area for R1 in macro invocation
ULUDSVUR DS    F             Save USING register for workarea
ULUDSVW1 DS    F             Save first work register
ULUDSVW2 DS    F             Save second work register
ULUDSVBR DS    F             Save BCT register
         DS    0D
ULUDLENG EQU   *-ULUDSECT


Now I have to show you how to use our ULUT access macros, ULUINIT
and ULUSCAN.  A complete coding example is included in this pds.
This is the TSO command called ULUDIAG.  The TSO command ULUDIAG
will display all relevant ULUDSECT fields for each defined UCB (ULUT
table entry).  Here is an example of ULUDIAG output:  The output was
produced by the coding example below it, with the print lines being
done by means of the PUTENTRY subroutine.

             ULUDIAG - V1.0 - PRINT ULUDSECT FIELDS
             -------   ----   ----- -------- ------
             ***       DEV ADDRESS: 000C        ***
ULUDULUT 02281F90  ULUDCURR 02282114  ULUDNEXT 02282120  ULUDDEVA 000C
ULUDUCBA 00F46140  ULUDCEXT 00F46118  ULUDDEVT 10000801  ULUDCNTR 0002
ULUDTOTC 00000183  ULUDRUNC 00000183  ULUDONLF 80        ULUDTYPE 02
             ***       DEV ADDRESS: 000E        ***
ULUDULUT 02281F90  ULUDCURR 02282120  ULUDNEXT 0228212C  ULUDDEVA 000E
ULUDUCBA 00F46180  ULUDCEXT 00F46158  ULUDDEVT 10000808  ULUDCNTR 0003
ULUDTOTC 00000183  ULUDRUNC 00000182  ULUDONLF 80        ULUDTYPE 02
             ***       DEV ADDRESS: 000F        ***
ULUDULUT 02281F90  ULUDCURR 0228212C  ULUDNEXT 02282138  ULUDDEVA 000F
ULUDUCBA 00F461C0  ULUDCEXT 00F46198  ULUDDEVT 10000808  ULUDCNTR 0000
ULUDTOTC 00000183  ULUDRUNC 00000181  ULUDONLF 00        ULUDTYPE 02
             ***       DEV ADDRESS: 0120        ***
ULUDULUT 02281F90  ULUDCURR 02282138  ULUDNEXT 02282144  ULUDDEVA 0120
ULUDUCBA 00F46248  ULUDCEXT 00F46220  ULUDDEVT 3030200E  ULUDCNTR 0005
ULUDTOTC 00000183  ULUDRUNC 00000180  ULUDONLF 04        ULUDTYPE 02
             ***       DEV ADDRESS: 0121        ***
ULUDULUT 02281F90  ULUDCURR 02282144  ULUDNEXT 02282150  ULUDDEVA 0121
ULUDUCBA 00F462E0  ULUDCEXT 00F462B8  ULUDDEVT 3030200E  ULUDCNTR 0006
ULUDTOTC 00000183  ULUDRUNC 0000017F  ULUDONLF 04        ULUDTYPE 02
                  *** *** *** *** *** *** ***
                  *** *** *** *** *** *** ***
             ***       DEV ADDRESS: 0A80        ***
ULUDULUT 02281F90  ULUDCURR 02282D98  ULUDNEXT 02282DA4  ULUDDEVA 0A80
ULUDUCBA 00F501D0  ULUDCEXT 00F501A8  ULUDDEVT 3030200F  ULUDCNTR 010D
ULUDTOTC 00000183  ULUDRUNC 00000078  ULUDONLF 8E        ULUDTYPE 02
             ***       DEV ADDRESS: 0A81        ***
ULUDULUT 02281F90  ULUDCURR 02282DA4  ULUDNEXT 02282DB0  ULUDDEVA 0A81
ULUDUCBA 00F50268  ULUDCEXT 00F50240  ULUDDEVT 3030200F  ULUDCNTR 010E
ULUDTOTC 00000183  ULUDRUNC 00000077  ULUDONLF 8C        ULUDTYPE 02
             ***       DEV ADDRESS: 0A82        ***
ULUDULUT 02281F90  ULUDCURR 02282DB0  ULUDNEXT 02282DBC  ULUDDEVA 0A82
ULUDUCBA 00F50300  ULUDCEXT 00F502D8  ULUDDEVT 3030200F  ULUDCNTR 010F
ULUDTOTC 00000183  ULUDRUNC 00000076  ULUDONLF 8C        ULUDTYPE 02
             ***       DEV ADDRESS: 0A83        ***
ULUDULUT 02281F90  ULUDCURR 02282DBC  ULUDNEXT 02282DC8  ULUDDEVA 0A83
ULUDUCBA 00F50398  ULUDCEXT 00F50370  ULUDDEVT 3030200F  ULUDCNTR 0110
ULUDTOTC 00000183  ULUDRUNC 00000075  ULUDONLF 84        ULUDTYPE 02
             ***       DEV ADDRESS: 0A84        ***
ULUDULUT 02281F90  ULUDCURR 02282DC8  ULUDNEXT 02282DD4  ULUDDEVA 0A84
ULUDUCBA 00F50430  ULUDCEXT 00F50408  ULUDDEVT 3030200F  ULUDCNTR 0111
ULUDTOTC 00000183  ULUDRUNC 00000074  ULUDONLF 8C        ULUDTYPE 02
                  *** *** *** *** *** *** ***


New format for ULUDIAG:  -------  (for 64-bit ULUT and earlier too)


             ULUDIAG - V1.3 - PRINT ULUDSECT FIELDS
             -------   ----   ----- -------- ------
             ***       DEV ADDRESS: 000C        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00210   ULUDDEVA 000C
ULUDNEXT 000001FF_FFF0021C            ULUDSLV6 E0        ULUDONLF 80
ULUDUCBA 00F47140  ULUDCEXT 00F47118  ULUDDEVT 10000801  ULUDCNTR 0002
ULUDTOTC 00000183  ULUDRUNC 00000183  ULUDONLF 80        ULUDTYPE 03
             ***       DEV ADDRESS: 000E        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF0021C   ULUDDEVA 000E
ULUDNEXT 000001FF_FFF00228            ULUDSLV6 E0        ULUDONLF 80
ULUDUCBA 00F47180  ULUDCEXT 00F47158  ULUDDEVT 10000808  ULUDCNTR 0003
ULUDTOTC 00000183  ULUDRUNC 00000182  ULUDONLF 80        ULUDTYPE 03
             ***       DEV ADDRESS: 000F        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00228   ULUDDEVA 000F
ULUDNEXT 000001FF_FFF00234            ULUDSLV6 E0        ULUDONLF 00
ULUDUCBA 00F471C0  ULUDCEXT 00F47198  ULUDDEVT 10000808  ULUDCNTR 0000
ULUDTOTC 00000183  ULUDRUNC 00000181  ULUDONLF 00        ULUDTYPE 03
             ***       DEV ADDRESS: 0120        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00234   ULUDDEVA 0120
ULUDNEXT 000001FF_FFF00240            ULUDSLV6 E0        ULUDONLF 04
ULUDUCBA 00F47248  ULUDCEXT 00F47220  ULUDDEVT 3030200E  ULUDCNTR 0005
ULUDTOTC 00000183  ULUDRUNC 00000180  ULUDONLF 04        ULUDTYPE 03
             ***       DEV ADDRESS: 0121        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00240   ULUDDEVA 0121
ULUDNEXT 000001FF_FFF0024C            ULUDSLV6 E0        ULUDONLF 04
ULUDUCBA 00F472E0  ULUDCEXT 00F472B8  ULUDDEVT 3030200E  ULUDCNTR 0006
ULUDTOTC 00000183  ULUDRUNC 0000017F  ULUDONLF 04        ULUDTYPE 03
             ***    ***    ***    ***    ***    ***
             ***    ***    ***    ***    ***    ***
             ***       DEV ADDRESS: 0A80        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00E94   ULUDDEVA 0A80
ULUDNEXT 000001FF_FFF00EA0            ULUDSLV6 E0        ULUDONLF 8E
ULUDUCBA 00F511D0  ULUDCEXT 00F511A8  ULUDDEVT 3030200F  ULUDCNTR 010D
ULUDTOTC 00000183  ULUDRUNC 00000078  ULUDONLF 8E        ULUDTYPE 03
             ***       DEV ADDRESS: 0A81        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00EA0   ULUDDEVA 0A81
ULUDNEXT 000001FF_FFF00EAC            ULUDSLV6 E0        ULUDONLF 8C
ULUDUCBA 00F51268  ULUDCEXT 00F51240  ULUDDEVT 3030200F  ULUDCNTR 010E
ULUDTOTC 00000183  ULUDRUNC 00000077  ULUDONLF 8C        ULUDTYPE 03
             ***       DEV ADDRESS: 0A82        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00EAC   ULUDDEVA 0A82
ULUDNEXT 000001FF_FFF00EB8            ULUDSLV6 E0        ULUDONLF 8C
ULUDUCBA 00F51300  ULUDCEXT 00F512D8  ULUDDEVT 3030200F  ULUDCNTR 010F
ULUDTOTC 00000183  ULUDRUNC 00000076  ULUDONLF 8C        ULUDTYPE 03
             ***       DEV ADDRESS: 0A83        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00EB8   ULUDDEVA 0A83
ULUDNEXT 000001FF_FFF00EC4            ULUDSLV6 E0        ULUDONLF 8C
ULUDUCBA 00F51398  ULUDCEXT 00F51370  ULUDDEVT 3030200F  ULUDCNTR 0110
ULUDTOTC 00000183  ULUDRUNC 00000075  ULUDONLF 8C        ULUDTYPE 03
             ***       DEV ADDRESS: 0A84        ***
ULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00EC4   ULUDDEVA 0A84
ULUDNEXT 000001FF_FFF00ED0            ULUDSLV6 E0        ULUDONLF 8C
ULUDUCBA 00F51430  ULUDCEXT 00F51408  ULUDDEVT 3030200F  ULUDCNTR 0111
ULUDTOTC 00000183  ULUDRUNC 00000074  ULUDONLF 8C        ULUDTYPE 03
             ***    ***    ***    ***    ***    ***


Next is the piece of code which produced the above report.  This
shows how useful the ULUINIT and ULUSCAN macros are, and how they
simplify the coding in this program.  (Almost exactly the same as
with the old version of the ULUDIAG program.  The difference is in
the LLGTR instruction and the specific coding of the PUTENTRY routine.

Please notice how simple this coding is.

* ------------------------------------------------------------------- *
* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *
* ------------------------------------------------------------------- *
         LLGTR R10,R10                Clear bit 32 from base register
         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6
*
LOOPUCB  DS    0H
* ------------------------------------------------------------------- *
* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *
* ------------------------------------------------------------------- *
         ULUSCAN WR1=R3,UCBR=R5,BREG=R6
         BAL   R7,PUTENTRY            Print contents of control block
         MVC   ULUDCURR,ULUDNEXT      Make next entry current
         BCT   R6,LOOPUCB             Get stuff for next table entry.
         B     EXIT0                  End of table. Fall thru.

MECHANISM OF OPERATION:

The ULUDSECT control block contains (or has access to) all the
information that you'll need about one particular device.  The
fields of the ULUDSECT control block are filled by:

1.  The ULUINIT macro, which creates the ULUDSECT control block
    and fills those of its fields common to the entire ULUT
    control block.

2.  The ULUSCAN macro, which fills in all fields in the ULUDSECT
    having to do with ONE UCB, pointed to by ONE ULUT table entry.

After you invoke the ULUINIT macro once, you then invoke the ULUSCAN
macro repeatedly.  Each invocation of the ULUSCAN macro gives you
information about ONE device, represented by ONE UCB, pointed to
by ONE 12-byte ULUT table entry.

The above code works by doing a complete search of ALL defined
devices.  It "marches" completely through the entire ULUT table,
from beginning to end.  Each invocation of the ULUSCAN macro gives
information from ONE ULUT table entry, which points to ONE UCB,
that represents ONE device.

Each time the ULUSCAN macro is invoked, it fills the fields of the
ULUDSECT control block with a lot of information extracted from, or
derived from, that UCB.  You can picture this situation by saying that
the ULUSCAN macro "pre-digests" information from each UCB, putting
the "digested" information into the ULUDSECT control block.

To step through the ULUT (UCB Lookup Table), from one entry to the
next, just move the ULUDNEXT field (pointing to the NEXT ULUT table
entry) into the ULUDCURR field (meaning the current ULUT table entry)
and reinvoke the ULUSCAN macro, to refill all the ULUDSECT fields for
the next UCB.  Then your program will go process the new UCB's
information.  Do this until you've reached the end of the ULUT table.

Where is the end of the table?  It is found by COUNTING.

The total number of entries in the ULUT table, extracted from a field
in the ULUT control block, is loaded into the BREG register by the
ULUINIT macro.  This register can be used later as a BCT register to
count through all the table entries, that exact number of times.  The
ULUSCAN macro does not automatically do a partial search, as yet,
like IBM's UCBSCAN macro can do.  (UCBSCAN does all the selections
under the covers, but in reality, it also does a complete search of
all UCB's, much of the time).

Selection of devices, for example, only those which are online, is
done while that device's ULUT table entry is being processed by the
ULUSCAN macro.  The ULUSCAN macro loads that device's UCB information
into the fields of the ULUDSECT control block, and the selection is
usually done by looking somewhere in the ULUDSECT control block, and
by making a selection decision from one of its fields.

For example, to see if a device is online, the ULUDONLF field, which
the ULUSCAN macro extracts from that device's UCB+3, is examined for
the X'80' bit.  If that bit is on, then the device is online.  If
not, then the device is offline.  All other selection criteria are
done, using fields created from that unit's UCB, and which have
already been loaded into the ULUDSECT control block by the ULUSCAN
macro.  Then, when you've finished with that particular UCB, you loop
back to the next ULUT table entry and invoke the ULUSCAN macro again,
to get information from the next UCB.  ULUSCAN refills the ULUDSECT
control block with new information from the next device's UCB (the
next ULUT table entry).  Then you look at that one.  And so on, until
you've searched through the entire ULUT table, and you've seen all
the defined devices.

The advantage of doing all of this, is that you can do a complete
scan of all the real UCB's, without having to be APF-authorized.

