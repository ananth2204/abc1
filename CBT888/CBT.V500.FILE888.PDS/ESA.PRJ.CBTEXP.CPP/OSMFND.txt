/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/osmfnd.cpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/

#include "isisdef.h"
#if defined(OWN_STDIO) == 1
#include "stdio.hpp"
#endif

#ifndef PCS_MAX_PATH
#define PCS_MAX_PATH 1024
#endif


//#ifndef OWN_STDIO  common code for OWN_STDIO and non OWN_STDIO szm
#include "os.hpp"
#include "mchain.hpp"
#include "osmfind.hpp"
#include "mvsbase.hpp"
#include "misc.hpp"
#include "casmif.hpp"
#include "ibmdebug.hpp"
#include <stdio.h>
#include <strings.h>
#include <map>
#include <string>
#include "xxstdio.hpp"
//szm20050825 ddname reallocation and free code moved here from XFILE
#include <dynit.h>

class  ddAlloc:public chainE
ä
private:
	char * req;
public:
	ddAlloc(const char * ddReq,const char * ddUsed):chainE(ddUsed)
	ä
		if(ddReq)
			req = strdup(ddReq);
		else
			req = NULL;
	ü
	ddAlloc():chainE()
	ä req = NULL;ü
	ßddAlloc()
	ä
		if (req)
			free(req);
		req = NULL;
	ü
	char * getDdUsed()äreturn chainEid;ü
	char * getDdReq()äreturn req;ü
ü;

class  ddAllocList:public SORTEDmCHAIN
ä
private:
	__dyn_t ip;
	char    ddn_Ä9Ü;
	CHAINITER * iter;
public:
	ddAllocList():SORTEDmCHAIN()
	ä
		memset(ddn_,0,sizeof(ddn_));
		iter = NULL;
	ü
	virtual ßddAllocList()
	ä
		ddAlloc * a = NULL;
		if (iter==NULL)
			iter = new CHAINITER(this);

		iter->reset();
		while(a=(ddAlloc*)iter->next())
		ä
			dyninit(&ip);
			ip.__ddname=a->getDdUsed();
			HOST_IBM_TRACE_ss(" Dynamic free",ip.__ddname);
			if (dynfree(&ip))
				printf(" Dynamic free error for %sÖn",ip.__ddname);
		ü
		if (iter)
			delete iter;
	ü
	char *  alloc(const char * dsn,const char * dd)
	ä
		ddAlloc * a = NULL;
		if (iter==NULL)
			iter = new CHAINITER(this);

		iter->reset();
		int rc = 0;
		while(a=(ddAlloc*)iter->next())
		ä
			//if (strcmp(dd,a->getDdUsed()) == NULL) //ZA070731
			if (strcmp(dd,a->getDdReq()) == NULL) //ZA070731
				return a->getDdUsed();
		ü
		dyninit(&ip);
		strcpy(ddn_,"????????");
		ip.__ddname = ddn_;
		ip.__dsname = (char *)dsn;
		ip.__status = __DISP_SHR;
		if (rc=dynalloc(&ip))
		ä
			printf(" Dynalloc error for:%s rc:%d info:%d errcode:%dÖn",dsn,rc,ip.__infocode,ip.__errcode);
			return NULL;
		ü
		else
		ä
			HOST_IBM_TRACE_ss(" Dynamic alloc",ip.__ddname);
			add(new ddAlloc(dd,ip.__ddname));
			return ddn_;
		ü
	ü
ü;

ddAllocList  * dal = NULL;
class ddAllocListHelper
ä
public:
	ddAllocListHelper()äü;
	ßddAllocListHelper()ä if (dal) delete dal;dal = NULL;ü
ü;
ddAllocListHelper dalHelper;

int ddDynAlloc(char * dsn,char * member,char * ddn,char * togen)
ä
	int rc = 0;
	if (dsn==NULL ]] member == NULL ]] ddn == NULL ]] togen == NULL )
		return 0;
	if (dal==NULL)
		dal = new ddAllocList();
	char * d = dal->alloc(dsn,ddn);
	if (d)
	ä
		sprintf(togen,"%s%s(%s)",DDNAME_PREFIX,d,member);
		rc = 1;
	ü
	return rc;
ü

//szm20050825 ddname reallocation and free code moved here from XFILE

int osmfindo(struct DSNINFO * dsninfo,const char * pattern);
ISIS_EXT_ASM int DDNAMES(char * dd,char * dsns,int max,char * );

static _DDNAMES(char *dd,char *dsns,int max,char * member=NULL)
ä
	int rc = DDNAMES(dd,dsns,max,member);
	return rc;
ü

//contains the chain of datasets
DataSNames * datasnames = new DataSNames();

#if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
#include <regex.h>
#include <locale.h>
#include <ctest.h>
#endif

// temp file allocation for IBM
/*

*/

class tmpName : public chainE
ä
private:
	FILE * f;
public:
	ßtmpName()äü
	tmpName(char * n,FILE *fp):chainE(n),f(fp)äü
	FILE * getFile()äreturn f;ü
ü;
class tmpNames : public SORTEDmCHAIN
ä
private:
	CHAINITER * iter;
public:
	tmpNames():SORTEDmCHAIN()
	ä iter = new CHAINITER( *this);ü
	ßtmpNames()
	ä
		iter->reset();
		tmpName * n = (tmpName *)iter->next();
		while(n)
		ä
			if (remove(n->chainEid))
			ä
				fclose(n->getFile());
				remove(n->chainEid);
			ü
			n = (tmpName *)iter->next();
		ü
	ü
ü;


tmpNames _tmpNames;

static const char * systmp			= "SYSTMP";
static        char  systmpDefÄ256Ü = "wb+,space=(trk,(150,150))";
static        char  systmpPrefÄ64Ü= "SYSTMP";
static       int    systmpIndex = 1; //szm20040202 from SYSTMP01
static       int    systmpFlag  = 0;
static       int    systmpUss   = 0;
FILE   * tmpFile(char * usedname)//szm20060908 tmpFile in mu
ä

	//char workÄ1024Ü; problem with more than 16 concat's szm
	char workÄMAXDSNSÜ;
	char prefixÄ128Ü;

	static FILE * f = NULL;
	if (systmpFlag==0)
	ä
		systmpUss = getenv("TEMP_HFS")?1:0;
		f = fopen("dd:SYSTMPZZ","r");
		if (f && fgets(work,sizeof(work)-1,f))
		ä
			int i;
			for(i = 0;i<sizeof(work)-1&&i<sizeof(systmpDef)-1&&workÄiÜ-' '&&workÄiÜ-'Ön';i++)
				systmpDefÄi+4Ü = workÄiÜ;
			systmpDefÄi+4Ü = 0;
			if (fgets(work,sizeof(work)-1,f))
			ä
				int i;
				for(i= 0;i<sizeof(work)-1&&i<sizeof(systmpDef)-1&&workÄiÜ-' '&&workÄiÜ-'Ön';i++)
					systmpPrefÄiÜ = workÄiÜ;
				systmpPrefÄiÜ = 0;
			ü
			else
				if (strchr(systmpPref,' '))
					*strchr(systmpPref,' ')=0;
			fclose(f);
		ü
	ü
	sprintf(work,"%s%0.2d",systmp,systmpIndex);
	HOST_IBM_TRACE_ss(work,systmpDef);
	if (_DDNAMES(work,work,MAXDSNS))
	ä
		systmpIndex++;
		if (f==NULL&&systmpUss)
			return (tmpfile());
		systmpFlag++;
		char  * dsn = tmpnam(NULL);
		char  * p   = dsn;
		while(p=strchr(dsn,'/'))
			dsn=p+1;
		dsnÄ35Ü = 0;
		if (systmpUss) //szm
			//sprintf(work,"//'%s.T%s'",systmpPref,dsn+1);
			sprintf(work,"//%s.T%s",systmpPref,dsn+1); //szm
		else					//szm
			sprintf(work,"//'%s.T%s'",systmpPref,dsn+1); //szm

		FILE * f = fopen(work,systmpDef);
		if (f && usedname)						//szm20060908 tmpFile in mu
			strcpy(usedname,systmpDef); //szm20060908 tmpFile in mu
		_tmpNames.add(new tmpName(work,f));
		HOST_IBM_TRACE_ss(work,systmpDef);
		return(f);
	ü
	else
	ä
		sprintf(work,"//dd:%s%0.2d",systmp,systmpIndex++); //szm
		if (usedname)                      //szm20060908 tmpFile in mu
			strcpy(usedname,work);           //szm20060908 tmpFile in mu
		return(fopen(work,"wb+"));
	ü
ü

#if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
/* Some typedefs */
typedef unsigned char  byte;
typedef unsigned short ushort;
typedef unsigned long  ulong;


ISIS_EXT_ASM
ä
	typedef int (IGGCSI00_f)(void *, void *, void *);
ü;

typedef struct
ä
	byte csiretm_abÄ2Ü,
		csiretr_b,
		csiretc_b;
ü CSIRetInfo;

typedef struct
ä
	char   csifiltk_acÄ44Ü,
		csicatnm_acÄ44Ü,
		csiresnm_acÄ44Ü,
		csidtyps_acÄ16Ü,
		csicldi_c,
		csiresum_c,
		csis1cat_c,
		csioptns_c;
	ushort csinumen_us;
	char   csifldnmÄ8Ü;
ü CSISelFields;

typedef struct
ä
	ulong  csiusrln_ul,
		csireqln_ul,
		csiusdln_ul;
	ushort csinumfd_us;
ü CSIWorkData;

/* Some coding */

#define CWORK_SIZE 65015
#define CSINUMFD   12
#define CSIETYPE    1
#define CSIENAME    2
#define CSIELENGTH 50

void lsmvs_osdquit(DSNINFO * info)
ä
	if (info&&info->lsmvs_flag)
	ä
		info->lsmvs_flag  =  NULL;
	ü
ü


int lsmvs_osdnext(DSNINFO * info)
ä
	if (info==NULL)
		return -1;

	char * p = (char *)info->lsmvs_pointer;
	if (*p==0)
	ä
		return -1;
	ü
	info->cattype = *(char *)(p+CSIETYPE);
	memcpy(info->dsname,p+CSIENAME,sizeof(info->dsname)-1);
	info->dsnameÄ44Ü = 0;
	memset(info->mem,' ',sizeof(info->mem));
	info->lsmvs_pointer = (void *)((char *)(info->lsmvs_pointer)+CSIELENGTH);
	info->lsmvs_counter ++;
	return 0;
ü

int  lsmvs_osdfind(DSNINFO * info ,const char * pat,char catType= 'A')
ä
	char patternÄ255Ü;
	if (info==NULL ]] pat==NULL)
		return -1;
	int i,j;                                  //ToDo27057
	for( i=0,j=0;patÄiÜ&&j<255;i++)			    	//ToDo27057
		if(patÄiÜ-'Ö''&&patÄiÜ-'/'&&patÄiÜ-'"') //ToDo27057
			patternÄj++Ü=patÄiÜ;			          //ToDo27057
	patternÄjÜ =0;                            //ToDo27057
	//strcpy(pattern,pat);                    //ToDo27057
	if (catType=='A')
	ä
		if (patÄstrlen(pat)-1Ü == '.' )
			strcat(pattern,"**");
		else	if(strchr(pat,'*') == NULL)
			strcat(pattern,".**");
	ü
	//static char * info->lsmvs_cwork = NULL; szm
	// cwork into dsninfo struct cwork -->> lsmvs_cwork
	if (info->lsmvs_cwork==NULL)
		info->lsmvs_cwork = (char *)malloc(CWORK_SIZE);
	if (info->lsmvs_cwork==NULL)
	ä
		printf(" Unable to allocate %s in %dÖn",__FILE__,__LINE__);
		abort();
	ü
	int csiret_i;
	static IGGCSI00_f*  IGGCSI00_gpf = 0; //ZA070731
	CSIRetInfo   retinfo_st;
	CSISelFields selfields_st;
	CSIWorkData* csirwork_pst;

	/* fetching CSI */
	if (IGGCSI00_gpf == 0) //ZA070731
		IGGCSI00_gpf = (IGGCSI00_f *) fetch("IGGCSI00");

	/* Clear return values */
	memset((void *) &(retinfo_st), 0, sizeof(CSIRetInfo));

	/* Blank input structure */
	memset((void *) &(selfields_st), ' ', sizeof(CSISelFields));

	/* Fill in Pattern */
	memcpy(selfields_st.csifiltk_ac, pattern, strlen(pattern));

	/* Set entry type to 'A', thus only non-VSAM datasets will be returned
	*/
	selfields_st.csidtyps_acÄ0Ü = catType;
	selfields_st.csidtyps_acÄ1Ü = ' ';
	selfields_st.csicldi_c = ' ';
	selfields_st.csiresum_c = ' ';
	selfields_st.csis1cat_c = 'Y';
	selfields_st.csioptns_c = ' ';
	selfields_st.csinumen_us    = 0;  /* only return name */
	/* Clear work area */
	memset((void *) info->lsmvs_cwork, 0,CWORK_SIZE);
	/* Overlay workarea to fill length */
	csirwork_pst = (CSIWorkData *) info->lsmvs_cwork;
	/* Set length */
	csirwork_pst->csiusrln_ul = CWORK_SIZE;
	csiret_i = IGGCSI00_gpf((void *) &retinfo_st,
		(void *) &selfields_st,
		(void *) info->lsmvs_cwork);
	HOST_IBM_TRACE_sss(catType,pat,pattern); //ZA040924
	if (csiret_i==0)
	ä
		if (short(*(short *)(info->lsmvs_cwork+CSINUMFD))==0)
		ä
			free (info->lsmvs_cwork);
			info->lsmvs_cwork = NULL;
			return -1;
		ü

		char *p = (char *)(info->lsmvs_cwork+CSINUMFD+2+CSIELENGTH);
		info->cattype = *(p+CSIETYPE);
		memcpy(info->dsname,p+CSIENAME,sizeof(info->dsname)-1);
		info->dsnameÄ44Ü = 0;
		memset(info->mem,' ',sizeof(info->mem));
		int entries= *(short *)(info->lsmvs_cwork+CSINUMFD);
		info->lsmvs_flag = entries;
		info->lsmvs_pointer = (void *)(p+CSIELENGTH);
		info->lsmvs_counter = 1;
		if(info->dsnameÄ0Ü=='Ö0' ]] info->dsnameÄ0Ü==' ')
		ä
			HOST_IBM_TRACE_s(info->dsname);//|||||
			return -1;
		ü
		return 0;
	ü
	else
	ä
		if (catType == 'A' ]] patternÄstrlen(pattern) - 1Ü NEQ '.') //ZA041008
		ä
			char workÄ256Ü;
			sprintf(work,"IGGICS00 catalog search error, for %s pattern ,rc: %d reason code %8xÖn",pattern,csiret_i,retinfo_st);
			perror(work);
		ü
		free(info->lsmvs_cwork);
		info->lsmvs_cwork = NULL;
		return -1;
	ü
ü

/*
RECORD: each record of a pds will be read into one of these structures.
The first 2 bytes is the record length, which is put into
'count', the remaining 254 bytes are put into rest.  Each record
is 256 bytes long.
*
* Each record has the form:
*
* +------------+------+------+------+------+----------------+
* + # of bytes ]Member]Member]......]Member]  Unused        +
* + in record  ]  1   ]  2   ]      ]  n   ]                +
* +------------+------+------+------+------+----------------+
*  ]--count---]]-----------------rest-----------------------]
*  (Note that the number stored in count includes its own
*   two bytes)
*
* And, each member has the form:
*
* +--------+-------+----+-----------------------------------+
* + Member ]TTR    ]info]                                   +
* + Name   ]       ]byte]  User Data TTRN's (halfwords)     +
* + 8 bytes]3 bytes]    ]                                   +
* +--------+-------+----+-----------------------------------+
*/

#define TTRLEN 3      /* The TTR's are 3 bytes long */
/*
* bit 0 of the info-byte is '1' if the member is an alias,
* 0 otherwise. ALIAS_MASK is used to extract this information
*/
#define ALIAS_MASK ((unsigned int) 0x80)
/*
* The number of user data half-words is in bits 3-7 of the info byte.
* SKIP_MASK is used to extraction this information.  Since this number
* is in half-words, it needs to be double to obtain the number of bytes.
*/
#define SKIP_MASK ((unsigned int) 0x1F)

/*
* 8 hex FF's mark the end of the directory
*/
char *endmark = "ÖxFFÖxFFÖxFFÖxFFÖxFFÖxFFÖxFFÖxFF";


#define NAMELEN   8
#define RECLEN  254


typedef struct _RECORD ä
	unsigned short count;
	char restÄRECLENÜ;
ü RECORD;

typedef  struct _readDir ä
	FILE * file;
	int   offset;
	RECORD record;
	_readDir()ä file= NULL;offset = 0;ü //constructor  szm
ü     readDir;

int osdnextSet(DSNINFO * info,readDir * rd)
ä
	memcpy(info->mem,rd->record.rest+rd->offset,NAMELEN);
	info->memÄ8Ü = 0;
	memcpy(&(info->TTR),rd->record.rest+rd->offset+NAMELEN,TTRLEN);
	info->alias = ALIAS_MASK & *(rd->record.rest+rd->offset+NAMELEN+TTRLEN);
	info->user_TTR_count = (((unsigned int)0x30) & *(rd->record.rest+rd->offset+NAMELEN+TTRLEN))>>5;
	info->user_data_halfwords = SKIP_MASK & *(rd->record.rest+rd->offset+NAMELEN+TTRLEN);
	memcpy(info->user_data,rd->record.rest+rd->offset+NAMELEN+TTRLEN+1,info->user_data_halfwords*2);
	rd->offset +=(NAMELEN+TTRLEN+info->user_data_halfwords*2+1);
	return 0;
ü


ISIS_EXT_C int osdfind(struct DSNINFO * info, const char * name)
ä
	if (info==NULL)
		return -1;
	if(strstr(name,"(*)")==NULL)
	ä
		info->lsmvs_counter = 1;
		return (lsmvs_osdfind(info,name));
	ü
	info->lsmvs_counter = 0;
	if (info->filepointer) delete (readDir*)info->filepointer;
	readDir * rd = new readDir;
	info->filepointer   = rd;
	rd->offset = 0;
	info->cattype = 'A';
	memset(info->dsname,0,sizeof(info->dsname));
	memcpy(info->dsname,name,strlen(name));
	char _nameÄ256Ü;
	strcpy(_name,name);
	char * c = strstr(_name,"(*)");
	char buf_nameÄPCS_MAX_PATHÜ;
	if (c ) strcpy(c,c+3); //szm
	rd->file = fopen(genOpenName(_name,buf_name),"rb,noseek");
	if (rd->file
		&& fread(&(rd->record), 1, sizeof(rd->record), rd->file) == sizeof(rd->record)
		&& memcmp(rd->record.rest+rd->offset,endmark,NAMELEN) )
		return (osdnextSet(info,rd));
	else
		return -1;
ü

ISIS_EXT_C int osdnext(struct DSNINFO * info)
ä
	if(info&&info->lsmvs_counter)
		return(lsmvs_osdnext(info));
	if (info && info->filepointer)
	ä
		readDir * rd = (readDir*)info->filepointer;
		if (memcmp(rd->record.rest+rd->offset,endmark,NAMELEN) == 0 )
			return -1;
		else if (rd->offset < rd->record.count -2)
			return (osdnextSet(info,rd));
		else
		ä
			rd->offset = 0;
			if ( fread(&(rd->record), 1, sizeof(rd->record), rd->file) == sizeof(rd->record)
				&& memcmp(rd->record.rest+rd->offset,endmark,NAMELEN) )
				return (osdnextSet(info,rd));
			else return -1;
		ü
	ü
	else
		return -1;
ü

ISIS_EXT_C void osdquit(struct DSNINFO * info)
ä
	if (info&&info->lsmvs_counter)
		lsmvs_osdquit(info);
	else if (info && info->filepointer)
	ä
		readDir * rd = (readDir*)info->filepointer;
		if (rd->file)
			fclose(rd->file);
		rd->file = NULL;
		delete rd;
		info->filepointer = NULL;
	ü
ü
#endif

ISIS_EXT_C int osmfind(struct DSNINFO * dsninfo, const char * pattern)
ä
#ifndef VSAM_NO
	if(isVsam(pattern))
	ä
		int ret = NAMESPACE_MVSSTDIO osmfind(dsninfo,pattern);
		dsninfo->isVsam = true;
		return ret;
	ü
#endif
	int rc;
	long rc1;                  //the number of inserted members
	int rc2;
	char patÄ55Ü, *c2;
	// if  prefix like e.g. HFS: exists get part after prefix otherwise entire pattern
	const char *without_prefix = strchr(pattern,':');
	if ( without_prefix )  without_prefix++; else without_prefix = pattern;

	strncpy(pat,without_prefix,54);
	patÄ54Ü = 0;
	memset(dsninfo->dsnsl,0,MAXDSNS);
	dsninfo->dsns =dsninfo->dsnsl;
	dsninfo->isVsam = false;

	//printf("%sÖn",pattern);
	//printf("%sÖn",pat);
	c2 = dsninfo->mmask;

	// get member if pattern contains partitioned data set memeber name
	// and put it into dsninfo->nmask
	char * c1;
	if ( (c1 = strchr(pat,'(')) NEQ  0)
	ä
		*c1++ = 0;
		while (*c1 && *c1 NEQ  ')') *c2++ = *c1++;
	ü
	*c2 = 0 ;
	if (NOT *dsninfo->mmask)
	ä
		return osmfindo(dsninfo,pattern);  //osmfind old version
	ü

	int ddn = ((strlen(pat) <= 8 && strchr(pat,'.') == 0))?1:0;
	if (NOT ddn)
		strcpy(dsninfo->dsns,pat);              //ds-name specified
	DataSName* dsnameg = datasnames->get(pat);
	if ((rc = dsnameg->getRC()) NEQ NEWRC)    //if previous call there
	ä
		dsnameg->FetchDSNINFO(dsninfo);         //back dsnameg, rc
	ü
	if (rc < 0)                               //if previous call error
		return rc;

	if (rc == NEWRC)                          //if new ddn or dsn
	ä
		if (ddn)                                //if dd-name specified
		ä
			if ( ( rc = _DDNAMES(pat,dsninfo->dsns,MAXDSNS)) NEQ  0 )
			ä
				rc = -1 ;
				dsnameg->UpdateDSNINFO(dsninfo,rc); //dsnameg, rc put
				return rc;
			ü
		ü

		while ((rc >= 0) && *dsninfo->dsns)
		ä
			strcpy(pat,dsninfo->dsns);
			//printf("Search %s",pat);
			dsninfo->dsns+=strlen(dsninfo->dsns)+1;
			strcat(pat,"(*)");
			if (strchr(pat,'Ö'')) strcat(pat,"'"); //szm
			rc = osdfind(dsninfo,pat);
			if (rc >= 0)
			ä
				do
				ä
					rc1 = dsnameg->smc->add(new DataSMember(dsninfo,dsnameg));
				ü
				while (( rc2 = osdnext(dsninfo) ) >= 0) ;
			ü
			osdquit(dsninfo);//szm
		ü
		dsnameg->UpdateDSNINFO(dsninfo,rc);     //dsnameg, rc put
		dsnameg->FetchDSNINFO(dsninfo);         //back dsnameg, rc
	ü
	return osmnext(dsninfo);
ü

ISIS_EXT_C int osmnext(struct DSNINFO * dsninfo)
ä
#ifndef VSAM_NO
	if(dsninfo->isVsam)
		return NAMESPACE_MVSSTDIO osmnext(dsninfo);
#endif
	if (NOT *dsninfo->mmask)
	ä
		return osmnexto(dsninfo);     //osmnext old version
	ü
	int rc = 1;
	//DataSName* dsnameg   = (DataSName*)((DSNINF*)dsninfo)->ptdatasname;
	DataSName* dsnameg   = (DataSName*)dsninfo->ptdatasname; //ZA030926
	//DataSMember* dsnamem = (DataSMember*)((DSNINF*)dsninfo)->ptdatasmember;
	DataSMember* dsnamem = (DataSMember*)dsninfo->ptdatasmember;
	if (dsnamem)
	ä
		DataSMember* dsnamem1 = (DataSMember*)dsnameg->smc->goFirst();
		while(dsnamem1 && (dsnamem NEQ dsnamem1))
		ä
			dsnamem1 = (DataSMember*)dsnameg->smc->goNext();
		ü
		dsnamem = (DataSMember*)dsnameg->smc->goNext();
	ü
	else
		dsnamem = (DataSMember*)dsnameg->smc->goFirst();
	while(dsnamem  && rc)
	ä
		if (stcpma(dsnamem->chainEid,dsninfo->mmask))
			rc = 0;
		else
			dsnamem = (DataSMember*)dsnameg->smc->goNext();
	ü
	if (dsnamem)
		dsnamem->FetchDSNINFO(dsninfo);         //back dsnamem, rc
	else
		rc = -1;                                //not found
	return rc;
ü
ISIS_EXT_C  void osmquit(struct DSNINFO * dsninfo)
ä
#ifndef VSAM_NO
	if(dsninfo->isVsam)
		return NAMESPACE_MVSSTDIO osmquit(dsninfo);
#endif
	osdquit(dsninfo);
ü

//this is the old version: called if no mmask there
int osmfindo(struct DSNINFO * dsninfo,const char * pattern)
ä
	int rc ;
	char patÄ55Ü;
	const char * without_prefix = strchr(pattern,':');
	if ( without_prefix ) without_prefix++; else without_prefix = pattern;

	strncpy(pat,without_prefix,54);
	patÄ54Ü = 0;
	memset(dsninfo->dsnsl,0,MAXDSNS);
	dsninfo->dsns =dsninfo->dsnsl;
	//printf("%sÖn",pattern);
	//printf("%sÖn",pat);
	char *c2 = dsninfo->mmask;
	char * c1;
	if ( (c1 = strchr(pat,'(')) NEQ  0)
	ä
		*c1++ = 0;
		while (*c1 && *c1 NEQ  ')') *c2++ = *c1++;
	ü
	*c2 = 0 ;

	if (strlen(pat) <= 8 && strchr(pat,'.') == 0)
	ä
		if ( ( rc = _DDNAMES(pat,dsninfo->dsns,MAXDSNS)) NEQ  0 )
			return rc ;
	ü
	else
		strcpy(dsninfo->dsns,pat);

	while (strlen(dsninfo->dsns))
	ä
		strcpy(pat,dsninfo->dsns);
		//printf("Search %s",pat);
		dsninfo->dsns+=strlen(dsninfo->dsns)+1;
		if (strlen(dsninfo->mmask))
		ä
			strcat(pat,"(*)");
			if (strchr(pat,'Ö'')) strcat(pat,"'"); //szm
		ü
		rc = osdfind(dsninfo,pat);
		if ( rc  <  0 )
			return rc ;

		do
		ä
			if( stcpma(dsninfo->mem,dsninfo->mmask) ]] * dsninfo->mmask == 0)
				return rc;
		ü
		while (( rc = osdnext(dsninfo) ) >= 0) ;
	ü

	return rc ;
ü

int osmnexto(struct DSNINFO * dsninfo)
ä
	int rc ;
	char patÄ55Ü;
	for(;;)
	ä
		while(  ( rc =osdnext(dsninfo) )  >= 0 )
		ä
			if (stcpma(dsninfo->mem,dsninfo->mmask) ]] * dsninfo->mmask == 0)
				return rc;
		ü

		if ( strlen(dsninfo->dsns) == 0) return rc;
		strcpy(pat,dsninfo->dsns);
		if (strlen(dsninfo->mmask))
		ä
			strcat(pat,"(*)");
			if (strchr(pat,'Ö'')) strcat(pat,"'"); //szm
		ü
		dsninfo->dsns+=strlen(dsninfo->dsns)+1;
		if ( ( rc = osdfind(dsninfo,pat)) <  0 )
			return rc ;
		else
			if (stcpma(dsninfo->mem,dsninfo->mmask) ]] * dsninfo->mmask == 0)
				return rc;
	ü
ü

class FileTypeCache
ä
protected:
	std::map<std::string,FILE_TYPE > cache_;
	typedef std::pair<std::string,FILE_TYPE> cache_pair;
#if defined(ISIS_PF_MU) == 1 && defined(MU_STANDALONE) == 0
	PcsMutex m_mutex;
#endif

public:
	FileTypeCache()
#if defined(ISIS_PF_MU) == 1 && defined(MU_STANDALONE) == 0
		//:m_mutex(PCS_MUTEX_NORMAL,-1,PcsString("FileTypeCache"))
		:m_mutex(PCS_MUTEX_NORMAL,-1,"FileTypeCache")
#endif
	ä
	ü

	void insert(const char* name,FILE_TYPE type)
	ä
#if defined(ISIS_PF_MU) == 1 && defined(MU_STANDALONE) == 0
		PcsScopeLock lock(&m_mutex);
#endif
		cache_ÄnameÜ = type;
	ü
	bool get(const char* name, FILE_TYPE * type)
	ä
#if defined(ISIS_PF_MU) == 1 && defined(MU_STANDALONE) == 0
		PcsScopeLock lock(&m_mutex);
#endif
		std::map<std::string,FILE_TYPE>::const_iterator i = cache_.find(name);
		if(i == cache_.end())
		ä
			return false;
		ü
		else
		ä
			*type = i->second;
			return true;
		ü
	ü
ü;


FILE_TYPE getFileTypeLocal(const char * n)
ä
	char FileNameÄ300Ü;
	char * fn, *s;
	char dsnÄ300Ü;
	memset(dsn,0,sizeof(dsn));
	unsigned short  dsOrg =0;
	strcpy(FileName,n);

	fn = FileName;
	s  = strchr(fn,'(');
	if (s)
	ä
		*s = 0;
		if (nÄstrlen(n)-1Ü=='Ö'')
			strcat(fn,"'");
	ü
	/************** special
	*********************************************************/
	if ( strncasecmp   (fn,"VSAM",4) == 0)
		return  FILE_VSAM ;

	// if filename is contained in filetype cache return it, else evaluate filetype and insert into cache
	static FileTypeCache cache;
	FILE_TYPE filetype;
	if(cache.get(fn,&filetype))
	ä
		return filetype;
	ü
	/************** special for DDN:OMS
	*********************************************************/
	if (genOpenType(fn) == ibm_hfs)
	ä
		cache.insert(fn,FILE_QSAM);
		return FILE_QSAM; //ZA040906 so that pipe will not be opened
	ü
	char nsÄPCS_MAX_PATHÜ;
	genOpenName(fn,ns);
	if (strncasecmp   ("dd:",ns,3) == 0 ]] strncasecmp   ("//dd:",ns,5) == 0) //szm
	ä
		char dsnsÄ44*16Ü;
		char memÄ9Ü;
		memset(dsns,0,sizeof(dsns));
		if (_DDNAMES(strchr(ns,':')+1,dsns,sizeof(dsns),mem))
		ä
			cache.insert(fn,FILE_QSAM);
			return FILE_QSAM;
		ü
		char * c = NULL;
		if ((c = strchr(dsns,' '))) *c = 0;
		strcpy(ns,dsns);
	ü
	else
		if (strncasecmp   ("//'",ns,3) == 0)
		ä
			strcpy(ns,ns+3);
			if (nsÄstrlen(ns)-1Ü=='Ö'')
				nsÄstrlen(ns)-1Ü = 0;

		ü
		DSNINFO dsninfo;
		int rc =  lsmvs_osdfind(&dsninfo,ns,'C');
		//#if  0
		//szm20060324 currently I have no idea why it was necesarry
		// to open  a dataset and reissue a VSAM cluster search
		//szm20060613 now we see, if it is a migrated VSAM cluster, we have to recall via fopen and reissue the catalog search
		if (rc&&getenv("ISIS_DISABLE_VSAM")==NULL)
		ä
			char buf_nameÄPCS_MAX_PATHÜ;
			FILE * f = fopen(genOpenName(fn,buf_name),"rb, type=record");
			if (f)
			ä
				rc =  lsmvs_osdfind(&dsninfo,ns,'C');
				fclose(f);
			ü
#if 0 //ZA040820 comes message even if ok
			else perror(genOpenName(fn,buf_name));
#endif
		ü
		//#endif
		HOST_IBM_TRACE_d(rc);
		HOST_IBM_TRACE_s(ns);
		HOST_IBM_TRACE_s(n);
		lsmvs_osdquit(&dsninfo);
		filetype =  (rc?FILE_QSAM:FILE_VSAM);
		cache.insert(fn,filetype);
		return filetype;
ü

DataSName::DataSName(char * name,FILE_TYPE type)
:chainE(name)
ä
	memset(&dsninfo,0,sizeof(DSNINFO));
	//((DSNINF*)dsninf)->ptdatasname = (void*)this;
	//((DSNINF*)dsninf)->ptdatasmember = NULL;
	//dsninfo._Ä2Ü = (void*)NEWRC; //shows rc after new
	dsninfo.rc = (void*)NEWRC;     //shows rc after new ZA030926
	file_type = type;
	smc = new SORTEDmCHAIN();
ü

DataSName::ßDataSName()
ä
	if (smc)delete smc;
ü

DataSName *  DataSNames::get(char * na)
ä
	char * s;
	char  nameÄ300Ü;
	strcpy(name,na);

	s  = strtok(name,"(");
	if ( s  ) strcpy(name,s);

	DataSName * dsn = 0;
	iter->reset();
	while ( ( dsn = (DataSName*)iter->next() ) NEQ 0 )
		if ( strcmp(name,dsn->chainEid ) == 0 )  break ;
	if ( dsn ) return dsn;

	dsn = new DataSName(name,getFileTypeLocal(name));
	datasnames->add(dsn);
	return dsn;
ü

DataSNames::DataSNames():SORTEDmCHAIN()
ä
	iter = new CHAINITER(*this);
ü

DataSNames::ßDataSNames()
ä
	iter->reset();
	DataSName * n = (DataSName*)iter->next();
	while(n)
	ä
		del(n);
		n = (DataSName*)iter->next();
	ü
ü


//DataSMember(DSNINFO* dsninfo)
//DataSMember(DSNINFO* dsninfo,DataSName* dsnameg)
//ä
//ü
//DataSMember::DataSMember(DSNINFO* dsninfo,DataSName* dsnameg)
DataSMember::DataSMember(DSNINFO* dsni,DataSName* dsnameg) //ZA030926
:chainE(dsni->mem)
ä
	//memcpy(&dsninf,(DSNINF*)dsninfo,sizeof(DSNINF));
	memcpy(&dsninfo,dsni,sizeof(DSNINFO));
	dsninfo.ptdatasname = dsnameg;
	dsninfo.ptdatasmember = this;
ü
//#endif OWN_STDIO  common code for OWN_STDIO and non OWN_STDIO szm
