/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/jobenv.cpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/

#include "isisdef.h"
#include <string.h>
#include <strings.h>
#if defined(MU_STANDALONE) == 0
#include "isismisc.hpp" //szm
#endif
#include "jobenv.hpp"
#include "msgmgr.hpp"
#include "misc.hpp"
#include "tiot1.hpp"
#include "ikjrb.hpp"
#include "ihacde.hpp"
#include "psa.hpp"
#include "tcbfix.hpp"
#include "iezjscb.hpp"
#include "ssib.hpp"
#include "tiot1ds.hpp"

int JOBENV::debug = 0;
char * KEYWORD_DEBUG = "DEBUG";
JOBENV * jobEnv = NULL;


JOBENV::JOBENV(char * argv0)
ä
  program        = argv0;

  psa    *  psaP    = (psa *)NULL;
  tcbfix *  tcbfixP = (tcbfix*)psaP->psatold;
            tcbfixP = (tcbfix*)((char *)tcbfixP-sizeof(tcbfixP->tcbfrs));
  tiot1ds *  tiot1P  = (tiot1ds*)tcbfixP->tcbtio;
  iezjscb*  iezjscbP= (iezjscb*)((tcbfixP->tcbjscb._tcbjscbb)&0x00ffffff);
  iezjscbP       = (iezjscb*)iezjscbP->jscbact;
  ssib  *  ssibP = (ssib *)iezjscbP->jscbssib;

	rbprfx * rbprfxP = (rbprfx *)tcbfixP->tcbrbp;
	rbprfxP        = (rbprfx *)((char *)rbprfxP -64); //RB prefix 64 bytes
	int ok = 1;
	while (ok&&(rbprfxP->xstab1&rbftp))
		ä
		  if (rbprfxP->xstab2&rbtcbnxt)
				ok = 0;
			rbprfxP = (rbprfx *)(rbprfxP->xrblnka);
			rbprfxP = (rbprfx *)((char *)rbprfxP -64); //RB prefix 64 bytes
		ü
	if (ok)
		ä
		 cdentry * cdentryP = (cdentry *)(rbprfxP->rbcde1);
		 programRb = mvsSTRING((char *)cdentryP->cdname,8);
		ü
	else
		programRb = "";

  jobName        = mvsSTRING((char *)tiot1P->tiocnjob,8);
  stepName       = mvsSTRING((char *)tiot1P->tiocpstn,8);
  procStepName   = mvsSTRING((char *)tiot1P->tiocpstn,8);
  jobId          = mvsSTRING((char *)ssibP->ssibjbid,8);

  jobName.strip();
  jobId.strip();
  stepName.strip();
  procStepName.strip();
  program.strip();

  if (getenv(KEYWORD_DEBUG))
    debug = atoi(getenv(KEYWORD_DEBUG));
  else
    debug = 0;
ü

void JOBENV::print()
ä
  Msg(400)<<jobName<<jobId<<program<<eol;
ü

void JOBENV::Error(char *,JOBENV_ACTION a)
ä
 if (a == Abort)
 ä
    Msg(500)<<eol;
    abort();
 ü

ü
int  JOBENV::DEBUG(int l,char* p0)
ä
  if (l>debug) return 0;
    Msg(101)<<p0<<eol;
  return 1;
ü

int  JOBENV::DEBUG(int l,size_t p0)
ä
  if (l>debug) return 0;
    Msg(101)<<int(p0)<<eol;
  return 1;
ü

int  JOBENV::DEBUG(int l,char* p0,char* p1)
ä
  if (l>debug) return 0;
    Msg(102)<<p0<<p1<<eol;
  return 1;
ü


int  JOBENV::DEBUG(int l,char* p0,int p1)
ä
  if (l>debug) return 0;
    Msg(102)<<p0<<p1<<eol;
  return 1;
ü

int  JOBENV::DEBUG(int l,char* p0,char* p1,char* p2)
ä
  if (l>debug) return 0;
    Msg(103)<<p0<<p1<<p2<<eol;
  return 1;
ü


int  JOBENV::DEBUG(int l,char* p0,char* p1,char* p2,char *p3)
ä
  if (l>debug) return 0;
    Msg(103)<<p0<<p1<<p2<<p3<<eol;
  return 1;
ü

int  JOBENV::DEBUG(int l,char* t,char* d,int dl)
ä
 if (l>debug) return 0;
 dump(messagetext->getFILE()?messagetext->getFILE():stdout,t,d,dl);
  return 1;
ü
