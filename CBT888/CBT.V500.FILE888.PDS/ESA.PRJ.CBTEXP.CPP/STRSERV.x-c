#pragma runopts(POSIX(ON),XPLINK(ON))

#define ISIS_ALLOW_OS_FUNCTIONS 1
#define _XOPEN_SOURCE_EXTENDED 1
#define  _OPEN_SYS             1
#define  _OPEN_THREADS         1
#define _XOPEN_SOURCE 500
#define _LARGE_FILES 1
#ifndef _SHR_ENVIRON
#define _SHR_ENVIRON 1
#endif
#define _SHARE_EXT_VARS 1
#define  environ  (*(__Envn()))

#include "isisdef.h"
#include "versinfo.h"
#include "osmfind.hpp"

#include <signal.h>
#include <dll.h>
#include <limits.h>
#include <unistd.h>
#include <stdlib.h>
#include <pwd.h>
#include <assert.h>
#include <ctype.h>
#include <string.h>
#include <strings.h>
#include <dirent.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <errno.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <fcntl.h>
#include <errno.h>
#include <netinet/in.h>
#include <errno.h>

int _edc_add_errno2   = setenv("_EDC_ADD_ERRNO2","1",1);  //szm20040129 byteseek set

#include "misc.hpp"
#include "osmfind.hpp"
#include "jesi.hpp"
#include "caljesi.hpp"
#include "mchain.hpp"
#include "casmif.hpp"
#include "msgmgr.hpp"
#include "jobenv.hpp"
#include "rexxvar.hpp"
#include "strserv.hpp"
#include "misc.hpp"
#include "caljesi.hpp"
#include "jesi.hpp"
#include "mchain.hpp"
#include "casmif.hpp"
#include "msgmgr.hpp"
#include "jobenv.hpp"
#include "mvsbase.hpp"
#include "msgmgr.hpp"
#include "strnode.hpp"
#include "mvsstr.hpp"

int _dump(char * ,char * ,int );

timeval    tcpipClient::timeout		= ä300,0ü;
int        tcpipClient::connwait	= 5;
char       tcpipClient::URLÄ255Ü  = "";
bool       CmdService::debug = false;

#ifndef ERROR_CODE
#define ERROR_CODE -1
#endif

static const char * REXXCMD     =  "STRREXX" ;
static const char * CALLBACK_PROGRAM    =  "MVSSERVB";
static const char * SERVER      =  "MVSSERVS";
static const char * AUTHSERVER  =  "MVSSERVA";
static const char * SPOOL       =  "SPOOL";
static const int    PRINTBUFF_MAX = 1024*256;
static const char * ISFIN       =  "//DD:ISFIN   ";
static const char * ISFOUT      =  "//DD:ISFOUT  ";
static const char * MX_COMMAND  =  "COMMAND";
static const char * MX_USERID   =  "USER";
static const char * MX_GROUPID  =  "GROUP";
static const char * MX_MQS      =  "MQS";
static const char * MX_DB2      =  "DB2";
static const char * RESULT_STEM = "STRRESULTSTEM";
static const short  MX_PORT					=  8001;
static const short  REXXSERVER_PORT =  8002;
static const char * REXXSERVER_TYPE =		"TYPE";
static const char * REXXSERVER_COMMAND= "COMMAND";
static const char * REXXSERVER_REPLYID= "REPLYID";
static const char * WD4Z              = "WD4Z";
typedef struct
ä
	char typeÄ10Ü;
	char replyidÄ86Ü;
	char commandÄ4000Ü;
ü REXXSERVER_REQUEST;

BPXWDYN  * CmdService::dyn  = (BPXWDYN *)fetch("BPXWDYN ");

FILE * _cgitrace = fopen("//dd:cgitrace","w");
FILE * cgitrace = CmdService::debug?(_cgitrace?_cgitrace:stderr):NULL;

class keyvalue
ä
public:
	mvsSTRING * key;
	mvsSTRING * value;
	keyvalue(mvsSTRING *k,mvsSTRING *v)
	ä
		key		= k;
		value = v;
	ü
ü;

keyvalue ** parse(const char * com,const char *sep=",")
ä
	if (com&&strlen(com))
	ä
		static keyvalue * kvÄ256Ü;
		mvsSTRING s(com);
		s.strip();
		size_t ind = 0;
		while (strlen(s)>0)
		ä
			mvsSTRING key , value , rest;
			s.strip().parse(key,"=",value,(char *)sep,rest);
			key.strip();
			value.strip();
			if (valueÄ0Ü == 'Ö'' ]] valueÄ0Ü == '"')
				value = value(1,strlen(value)-2);
			if (CmdService::debug)
				printf("string:%s key:%s value:%s rest:%sÖn",(char *)s,(char *)key,(char *)value,(char *)rest);
			kvÄind++Ü = new keyvalue(new mvsSTRING(key),new mvsSTRING(value));
			s = rest;
			kvÄindÜ = NULL;
		ü
		return kv;
	ü
	else
		return NULL;
ü

tcpipClient::tcpipClient(short p):port(p)
ä
	socket = ERROR_CODE;
	connected = false;
	memset(&sockaddr,0,sizeof(sockaddr));
	memset(&sockaddrUnix,0,sizeof(sockaddrUnix));
	FD_ZERO(&readSockets);
	FD_ZERO(&writeSockets);
	FD_ZERO(&exceptionSockets);
	sockaddr.sin_family = AF_INET;
	sockaddrUnix.sun_family = AF_UNIX;
	unsigned long addr  = 0;
	if (port)
	ä
		if (strlen(URL)==0)
			gethostname(URL,sizeof(URL));
		if (isdigit(URLÄ0Ü))
			addr = inet_addr(URL);
		else
		ä
			hostent * he = gethostbyname(URL);
			if ( he == 0 )
			ä
				diag("gethostbyname");
				return;
			ü
			else
				addr =*((unsigned*)(he->h_addr));
		ü
		sockaddr.sin_addr.s_addr = addr;
		sockaddr.sin_port   =(unsigned short)htons(port);
		socket = ::socket(AF_INET,SOCK_STREAM,0);
	ü
	else
	ä
		sockaddrUnix.sun_len = strlen(URL);
		strcpy(sockaddrUnix.sun_path,URL);
		socket = ::socket(AF_UNIX,SOCK_STREAM,0);
		if (JOBENV::debug)
			_dump(" sockAddrUnix",(char *)&sockaddrUnix,sizeof(sockaddrUnix));
	ü
	if (socket == ERROR_CODE )
	ä
		diag("socket");
		return;
	ü

	void * addrPointer = NULL;
	size_t addrLength = 0;
	if (port)
	ä
		addrPointer = &sockaddr;
		addrLength = sizeof(sockaddr);
	ü
	else
	ä
		addrPointer = &sockaddrUnix;
		addrLength = sizeof(sockaddrUnix);
	ü


	while(connect(socket,(struct sockaddr*)addrPointer,addrLength)== ERROR_CODE)
	ä
		if ( errno == EWOULDBLOCK )
		ä
			FD_SET(socket,&writeSockets);
			if (select(socket+1,NULL,&writeSockets,NULL,&timeout) |=   1)
			ä
				diag("connect");
				return;
			ü
		ü
		else if ( errno == ECONNREFUSED)
		ä
			static startToSleep = 0;
			if ( | startToSleep)
			ä
				startToSleep = 1;
				printf(" Waiting for connection URL:%s port:%d for %d seconds Ön",URL,port,connwait);
			ü
			sleep(connwait);
		ü
		else
		ä
			diag("connect");
			return;
		ü
	ü
	connected = true;

ü

tcpipClient::ßtcpipClient()
ä
	if (socket|=ERROR_CODE)
		if (close(socket) == ERROR_CODE)
			diag("close");
	socket = ERROR_CODE;

ü

int tcpipClient::send(char * from,size_t len)
ä
	char * off = from;
	size_t snd = 0;
	size_t l   = 0;
	if (|connected)
		return 0;
	FD_SET(socket,&writeSockets);
	while(select(socket+1,NULL,&writeSockets,NULL,&timeout) == 1 && len >0)
	ä
		if ( (l = ::send(socket,off,len,0)) > 0)
		ä
			snd += l;
			off += l;
			len -= l;
		ü
		else return(diag("send"));
	ü
	if (len > 0)
		return(diag("select send"));
	if (CmdService::debug)
		printf(" tcpipClint send:%s",from);

	return snd;
ü

int tcpipClient::receive(char * buf,size_t max)
ä
	if (|connected)
		return 0;
	char * borig = buf;
	size_t l			= max;
	size_t rcv   = 0;
	while(l&&max)
	ä
		FD_SET(socket,&readSockets);
		if (select(socket+1,&readSockets,NULL,NULL,&timeout) == 1)
		ä
			if ( (l = ::recv(socket,buf,max,0)) >= 0)
			ä
				buf += l;
				max -= l;
				rcv += l;
			ü
			else
				return(diag("recv"));
		ü
		else
			return(diag("select receive"));
	ü
	if (CmdService::debug)
	ä
		printf(" tcpipClint receive:%s",borig);
		dump(cgitrace,"Received tcpip client",borig,rcv);
	ü
	if (l==0)
		rcv = -rcv;
	return rcv;
ü

int tcpipClient::diag(char * t)
ä
	printf(" %s %d %sÖn",t,errno,strerror(errno));
	return 0;
ü

/*
int CmdService::printf(const char * format,...)
ä
char wÄPRINTBUFF_MAXÜ;
va_list arg_ptr;
va_start(arg_ptr,format);

int l = vsprintf(w,format, arg_ptr);
if (print)
print->addBuff(w,l);
else
puts(w);
va_end(arg_ptr);
return l;
ü
*/

int CmdService::backFromRexx()
ä
	char wÄ1024Ü;
	sprintf(w,"%s.0",RESULT_STEM);
	if (imax=atoi(rexx->fetch(w)))
		for(int i=1;i<=imax;i++)
		ä
			sprintf(w,"%s.%d",RESULT_STEM,i);
			char * c = rexx->fetch(w);
			if (c)
			ä
				printf("%sÖn",c);
			ü
		ü
		return imax;
ü

TsoCmdService::TsoCmdService(reply p):CmdService("TsoCmdService",p)
ä
	tsi = (IKJEFTSI *)fetch("IKJEFTSI");
	tsr = (IKJEFTSR *)fetch("IKJEFTSR");
	tst = (IKJEFTST *)fetch("IKJEFTST");
	tso = (IKJTSOEV *)fetch("IKJTSOEV");

	memset(token,0,sizeof(token));
	memset(cppl,0,sizeof(cppl));
	flag=etc=resv=length=program_parm=cpplTso=0;
	etc = -1;
	if (rc = tso(&resv,&rc,&abend,&reason,&cpplTso))
	ä
		diag("IKJTSOEV");
	ü
	else
	ä
		if (rc = tsi(&etc,&resv,token,&rc,&abend,&reason))
		ä
			diag("IKJEFTSI");
		ü
		else
			ok = 1;
	ü
ü

TsoCmdService::ßTsoCmdService()
ä
	if (ok)
		if (rc = tst(&etc,&resv,token,&rc,&abend,&reason))
		ä
			diag("IKJEFTSV");
		ü
		else
			ok = 0;
ü

int TsoCmdService::cmd(char *input)
ä
	if (ok&&input)
	ä
		char wÄ32000Ü;
		sprintf(w,"%s %d %s",REXXCMD,this,input);
		flag = 1*256*256+debug*256+1;
		length = strlen(w);
		abend=reason = 0;
		rc =  tsr(&flag,w,&length,&rc,&abend,&reason,&program_parm,cppl,token);
		if (rc>0&&(abend]]reason))
			diag(input);
		printf(" %s cmd ended with %d, generated %d linesÖn",input,rc,imax);
		return rc;
	ü
	else
		return -1;
ü

SdsfCmdService::SdsfCmdService(reply p):CmdService("SdsfCmdService",p)
ä
	sdsf = (SDSF *)fetch("SDSF");
	if (sdsf)
		ok = 1;
ü

SdsfCmdService::ßSdsfCmdService()
ä
ü

int SdsfCmdService::cmd(char *)
ä
	rc = -1;
	if (ok)
	ä
		strcpy(arg.arg_v,"++250,180");
		arg.arg_l = strlen(arg.arg_v);
		void * argp		= (void *)&arg;
		void * argpp  = (void *)(unsigned(argp)+unsigned(0x80000000));
		rc = sdsf(argp);
	ü
	return rc;
ü

UssCmdService::UssCmdService(reply p):CmdService("UssCmdService",p)
äü

UssCmdService::ßUssCmdService()
ä
	if (replyFile)
		fclose(replyFile);
ü

int UssCmdService::cmd(char *input)
ä
	replyFile = popen(input,"r");
	if (replyFile)
	ä
		imax = 0;
		rc = 0;
		while(fgets(buff,sizeof(buff),replyFile))
		ä
			imax++;
			printf(" %sÖn",buff);
		ü
		fclose (replyFile);
		printf(" %s cmd ended with %d, generated %d linesÖn",input,rc,imax);
	ü
	else
	ä
		rc = -1;
		printf(" popen error %sÖn",strerror(errno));
	ü
	return rc;
ü


char * UssCmdService::next(char *input)
ä
	if (input)
		replyFile = popen(input,"rt");
	if(replyFile)
	ä
		if (fgets(buff,sizeof(buff)-1,replyFile))
			return buff;
		else
		ä
			if (replyFile)
				fclose(replyFile);
			replyFile = NULL;
			return NULL;
		ü
	ü
	else
		return NULL;
ü

JesCmdService::JesCmdService(reply p):CmdService("JesCmdSErvice",p)
äü
JesCmdService::ßJesCmdService()
äü

int JesCmdService::cmd(char * input)
ä
#ifndef SAPI_NO
	mvsSTRING from(input);
	from.strip();
	char wÄ1024Ü;
	FILE * iFile = fopen(genOpenName(from,w),"r");
	/*
	FILE * jesSpool = fopen(genOpenName(SPOOL,w),"w");
	if (|jesSpool)
	ä
	printf(" open error for %s, %sÖn",SPOOL,strerror(errno));
	return -1;
	ü
	*/
	if (|iFile)
	ä
		printf(" open error for %s, %sÖn",input,strerror(errno));
		return -1;
	ü


	JES * jes = _X_initJESI();
	rc = _X_initINTR(jes);
	pIOQE ioqe = pIOQE((char *)jes->jes_ioqe-8);

	if (rc)
	ä
		printf(" initINTR error, rc:%d SAPI message:'%s'Ön",rc,ioqe->ioqe_qsambuf+6);
		return 8;
	ü

	char   jobidÄ9Ü;
	char * jobcard =	NULL;
	char * jobname  = NULL;
	while(fgets(buff,sizeof(buff),iFile))
	ä
		if (strchr(buff,'Ön'))
			*strchr(buff,'Ön') = 0;
		char * jcl = buff;
		if (|jobcard)
		ä
			jobcard = strdup(jcl);
			if (strchr(jobcard,' '))
				*strchr(jobcard,' ') = 0;
			jobname = jobcard +2;
		ü
		if (strlen(jcl)<80)
			memset(jcl+strlen(jcl),' ',80-strlen(jcl));
		jclÄ80Ü = 0;
		rc = _X_nextINTR(jes,jcl);
		if (rc)
		ä
			printf(" nextINTR error, rc:%dÖn",rc);
			return 8;
		ü
	ü
	fclose(iFile);
	strcpy(jobid,_X_termINTR(jes));
	jobidÄ8Ü  = 0;
	//if (debug)
	printf(" SUBMITTED %s(%s)Ön",jobname,jobid);

	char selectÄ1024Ü;
	sprintf(select," SAPI JOBID(%s) ",jobid);
	SAPI sapi;
	//if (debug)
	printf(" SAPI output selection:%sÖn",select);
	void  * ECB = NULL;

	rc = _X_initSAPI(jes,select,strlen(select),&sapi,(void *)&ECB,"JES2",NULL);
	rc = _X_nextSAPI(jes);

	while (rc==4)
	ä
		rc = _X_waitSAPI(jes);
		rc = _X_nextSAPI(jes);
	ü

	if (rc)
	ä
		ioqe = pIOQE((char *)jes->jes_ioqe-8);
		printf(" SAPI rc : %d message:'%s'Ön",rc,ioqe->ioqe_qsambuf+6);
		return 8;
	ü

	while (rc==0)
	ä
		printf(" Job:%8.8s JobId:%8.8s Step:%8.8s DDname:%8.8s in SYSOUT class:%cÖn",
			sapi.sss2->sss2jobr,sapi.sss2->sss2jbir,sapi.sss2->sss2stpd,sapi.sss2->sss2ddnd,sapi.sss2->sss2clar);
		printf(" Step:%8.8s DDname=%8.8sÖn",sapi.sss2->sss2stpd,sapi.sss2->sss2ddnd);
		FILE * spool = fopen(sapi.ddname,"rb,type=record");

		if (spool)
		ä

			size_t len=fread(buff,1,32768,spool);
			while(len>0)
			ä
				printf(" %*.*sÖn",len,len,buff);
				memset(buff,0,sizeof(buff));
				len=fread(buff,1,sizeof(buff),spool);
			ü
			fclose(spool);
		ü
		else
		ä
			printf(" Unable to open %s spool fileÖn",sapi.ddname);
			return 8;
		ü
		rc = _X_nextSAPI(jes);
		if (rc>4)
		ä
			//if (*(int *)ioqe->ioqe_qsambuf)
			printf(" SAPI error rc:%d message:'%s'Ön",rc,ioqe->ioqe_qsambuf+6);
			return 8;
		ü
		else
			if (rc==4)
				break;
	ü
	/*
	if (jesSpool)
	fclose(jesSpool);
	*/
	_X_termSAPI(jes);
	_X_cleanupJESI(jes);
	//_exit(0);
#endif
	return 0;
ü

DsnCmdService::DsnCmdService(reply rep):CmdService("DsnCmdService",rep)
ä
	csi = (IGGCSI00*)fetch("IGGCSI00");
	if (csi==NULL)
	ä
		printf(" unable to load IGGCSI00Ön");
		abort();
	ü
	asasymbm = (ASASYMBM*)fetch("ASASYMBM");
	if (asasymbm==NULL)
	ä
		printf(" unable to load ASASYMBMÖn");
		abort();
	ü
	memset(&symbp,0,sizeof(symbp));
	cwork = (char *)malloc(CWORK_SIZE);
	if (cwork==NULL)
	ä
		printf(" unable to allocate in %dÖn",CWORK_SIZE);
		abort();
	ü
	memset((void *) &(retinfo_st), 0, sizeof(CSIRetInfo));
	memset((void *) &(selfields_st), ' ', sizeof(CSISelFields));

	selfields_st.csicldi_c = 'Y';
	selfields_st.csiresum_c = ' ';
	selfields_st.csis1cat_c = 'Y';
	selfields_st.csioptns_c = ' ';
	memset(selfields_st.csicatnm_ac,' ',sizeof(selfields_st.csicatnm_ac));
	selfields_st.csinumen_us	  = 3;
	memcpy( selfields_st.csifldnm,"VOLSER  NAME    TYPE    ",24);
	memset((void *) cwork, 0,CWORK_SIZE);
	csirwork_pst = (CSIWorkData *) cwork;
	csirwork_pst->csiusrln_ul = CWORK_SIZE;
	p = NULL;
ü

DsnCmdService::ßDsnCmdService()
ä
	if (cwork)
		free(cwork);
	cwork = NULL;
ü

int DsnCmdService::cmd(char * pattern,char * reply)
ä
	int csiret_i = 0;
	int i,j;

	if (pattern)
		memcpy( selfields_st.csifiltk_ac,pattern, strlen(pattern));

	//printf(" CSIEntryData %46.46s Ön",p);
	char keyÄ51Ü;
	unsigned char  assoctype;
	char assocnameÄ44Ü;
	char volserÄ6Ü;
	if (CmdService::debug)
		_dump(" Dsn pattern",pattern,strlen(pattern));
	do
	ä
		if (p==NULL]]
			(((unsigned long)((char *)p-cwork)>=csirwork_pst->csiusdln_ul)&&selfields_st.csiresum_c == 'Y'))
		ä
			csiret_i = csi((void *)&retinfo_st,(void *)&selfields_st,(void *)cwork);
			if (csiret_i==0)
			ä
				if (short(*(short *)(cwork+CSINUMFD))==0)
				ä
					return 0;
				ü
				p = (CSIEntryData *)(cwork+sizeof(CSIWorkData));
			ü
			else
			ä
				printf(" Catalog search error, for %s Ön    rc: %d reason code %8xÖn"
					,pattern,csiret_i,retinfo_st);
				return 0;
			ü
		ü
		if	((unsigned long)((char *)p-cwork)>=csirwork_pst->csiusdln_ul)
			return 0;
		char  *f = (char *)p+sizeof(CSIEntryData);
		memset(key,' ',50);
		keyÄ50Ü = 0;
		assoctype = ' ';
		memset(assocname,' ',44);
		memset(volser,' ',6);
		if (p->csietype-'0')
		ä
			if (p->_union._csiel.csielvol)
			ä
				memcpy(volser,f,6);
				f +=p->_union._csiel.csielvol;
			ü
			if (p->_union._csiel.csielnam)
			ä
				memcpy(assocname,f,44);
				f +=p->_union._csiel.csielnam;
			ü
			if (p->_union._csiel.csieltyp)
			ä
				assoctype = *f;
				f +=p->_union._csiel.csieltyp;
			ü
		ü
		else
			f -=6; //if it is a catalog record

		if (volserÄ0Ü == '&')
		ä
			void * pointer = &symbp;
			char rvolserÄ6Ü;
			int rvolser_length = 6;
			int symbp_return = 0;
			char timestampÄ32Ü;
			symbp.symbppatternaddr = (void *)volser;
			symbp.symbppatternlength = 6;
			symbp.symbptargetaddr        = (void *)rvolser;
			symbp.symbptargetlengthaddr  = &rvolser_length;
			symbp.symbpreturncodeaddr    = &symbp_return;
			symbp.symbptimestampaddr = timestamp;
			symbp.symbpsymboltableaddr = NULL;
			symbp_return = asasymbm(volser,6,rvolser,&rvolser_length,NULL,timestamp,&symbp_return);
			if (symbp_return == 0)
				memcpy(&volser,&rvolser,6);
			else
				printf(" ASASYMBP return code:%dÖn",symbp_return);
		ü
		switch(p->csietype)
		ä
		case '0':
			break;
		case 'A':
		case 'C':
		case 'G':
		case 'I':
		case 'R':
		case 'D':

			memcpy(key,p->csiename,44);
			if (keyÄ0Ü==0)
				memset(key,'0',44);
			memcpy(key+44,volser,6);
			keyÄ50Ü = 0;
			if (reply==NULL)
				printf(" %s %s %cÖn",key,volser,p->csietype);
			else
			ä
				replyÄ0Ü=p->csietype;
				memcpy(reply+1,key,50);
				p = (CSIEntryData *)f;
				return 1;
			ü
			break;
		default:
			break;
		ü
		p = (CSIEntryData *)f;
	ü  while ((char *)p<(cwork+csirwork_pst->csiusdln_ul));
	return 1;
ü

void CmdService::diag(const char * cmd)
ä
	printf(" Error in %s, command:%s rc:%d abend:%d reason:%dÖn",
		service,cmd,rc,abend,reason);
ü
static const char * MXI_TABLE_HEAD	= "<table border='1' ='blue' bordercolor='black' class=sortable>";
static const char * MXI_TABLE_TRAIL = "</table>";
static char * refMxiÄ64Ü;
static int    initRefMxi()
ä
#define mxiattr(v,name,link) static const int name = v;Ö
	refMxiÄvÜ = link;
	mxiattr(0x01,input_pas_dataset,NULL)
		mxiattr(0x02,output_attr_text,NULL)
		mxiattr(0x03,output_attr_exception,NULL)
		mxiattr(0x04,output_attr_warning,NULL)
		mxiattr(0x05,field_labels,NULL)
		mxiattr(0x06,outputattr_field_normal,NULL)
		mxiattr(0x07,outputattr_field_inactive,NULL)
		mxiattr(0x08,field_column_headings,NULL)
		mxiattr(0x09,outputattr_field_high,NULL)
		/*
		mxiattr(0x0a,reserved)
		mxiattr(0x0b,reserved)
		mxiattr(0x0c,reserved)
		*/
		mxiattr(0x0d,refdslist,"REFDSLIST %s")
		mxiattr(0x0e,refdslist_volser,"<a href='vol.sh?%s'>%s</a>")
		mxiattr(0x10,refdasd_volser,"<a href='vol.sh?%s'>%s</a>")
		mxiattr(0x11,refdataset_name,"<a href='dataset.sh?DATASET=%s'>%s</a>")
		mxiattr(0x12,refsvc,"<a href='mxicmd.sh?SVC %s'>%s</a>")
		mxiattr(0x13,refaddress_mem,"<a href='mxicmd.sh?MEM %s'>%s</a>")
		mxiattr(0x14,refsubsystem_name,"")
		mxiattr(0x15,reftape_unit,"")
		mxiattr(0x16,refdasd_unit,"")
		mxiattr(0x17,refunit_name,"")
		mxiattr(0x18,refxcf_structure,"<a href='mxicmd.sh?XCF %s'>%s</a>")
		mxiattr(0x19,refsp,"<a href='mxicmd.sh?SP %s'>%s</a>")
		mxiattr(0x1a,refagrp,"<a href='mxicmd.sh?AGRP %s'>%s</a>")
		mxiattr(0x1b,refsrvc,"<a href='mxicmd.sh?SRVC %s'>%s</a>")
		mxiattr(0x1c,refrcls,"<a href='mxicmd.sh?RCLS %s'>%s</a>")
		mxiattr(0x1d,refrl,"<a href='mxicmd.sh?RL %s'>%s</a>")
		mxiattr(0x1e,refemcs,"<a href='mxicmd.sh?EMCS %s'>%s</a>")
		mxiattr(0x1f,refmcs,"<a href='mxicmd.sh?MCS %s'>%s</a>")
		mxiattr(0x21,refsgrp,"<a href='mxicmd.sh?SGRP %s'>%s</a>")
		mxiattr(0x22,refdae,"<a href='mxicmd.sh?DAE %s'>%s</a>")
		mxiattr(0x23,refcf,"<a href='mxicmd.sh?RL %s'>%s</a>")
		mxiattr(0x24,refscls,"<a href='mxicmd.sh?SCLS %s'>%s</a>")
		mxiattr(0x25,refmcls,"<a href='mxicmd.sh?CF %s'>%s</a>")
		mxiattr(0x26,refmxi_command,"")
		mxiattr(0x27,refdcls,"<a href='mxicmd.sh?DCLS %s'>%s</a>")
		mxiattr(0x28,reflls,"<a href='mxicmd.sh?LLS %s'>%s</a>")
		mxiattr(0x29,refjobname_da,"<a href='mxicmd.sh?DA %s'>%s</a>")
		mxiattr(0x2a,reflx,"<a href='mxicmd.sh?LX %s'>%s</a>")
		mxiattr(0x2b,refwlmg,"<a href='mxicmd.sh?WLMG %s'>%s</a>")
		mxiattr(0x2c,refuserid_rl,"<a href='mxicmd.sh?RL %s'>%s</a>")
		mxiattr(0x2d,refhfs,"<a href='mxicmd.sh?HFS %s'>%s</a>")
		mxiattr(0x2e,refpid,"<a href='mxicmd.sh?PID %s'>%s</a>")
		mxiattr(0x2f,refwlma,"<a href='mxicmd.sh?WLMA %s'>%s</a>")
		mxiattr(0x30,refasid,"<a href='mxicmd.sh?DA A=%s'>%s</a>")
		mxiattr(0x31,refwlms,"<a href='mxicmd.sh?WLMS %s'>%s</a>")
		mxiattr(0x32,reflla,"<a href='mxicmd.sh?LLA %s'>%s</a>")
		mxiattr(0x33,refrsys,"<a href='mxicmd.sh?RSYS %s'>%s</a>")
		mxiattr(0x34,refenc,"<a href='mxicmd.sh?ENC %s'>%s</a>")
		mxiattr(0x35,reflogr,"<a href='mxicmd.sh?LOGR %s'>%s</a>")
		mxiattr(0x36,refcon,"")
		mxiattr(0x37,refmqq,"")
		mxiattr(0x38,refmq,"")
		mxiattr(0x39,refmqc,"")
		mxiattr(0x3a,refmqcs,"")
		mxiattr(0x3b,refdb,"")
		mxiattr(0x3c,refdbda,"")
		mxiattr(0x3d,refdbbp,"")
		mxiattr(0x3e,refcommand_group,"")
		mxiattr(0x20,found_string,"")
		return 0;
ü
static int    _initRefMxi = initRefMxi();

/*
MXPS3PT4  EQU  X'0D'             Point-and-shoot DSLIST
MXPSVTOC  EQU  X'0E'             Point-and-shoot DSLIST Volser
MXPSVOL   EQU  X'10'             point-and-shoot DASD Volser
MXPSDSN   EQU  X'11'             point-and-shoot Dataset name
MXPSSVC   EQU  X'12'             point-and-shoot SVC
MXPSADDR  EQU  X'13'             point-and-shoot Address (MEM)
MXPSSSI   EQU  X'14'             point-and-shoot Subsystem name
MXPSTUNT  EQU  X'15'             point-and-shoot TAPE Unit
MXPSDUNT  EQU  X'16'             point-and-shoot DASD unit
MXPSUNTN  EQU  X'17'             point-and-shoot UNIT name
MXPSXCFS  EQU  X'18'             point-and-shoot XCF structure
MXPSSP    EQU  X'19'             point-and-shoot SP
MXPSAGRP  EQU  X'1A'             Point-and-shoot AGRP
MXPSSRVC  EQU  X'1B'             Point-and-shoot SRVC
MXPSRCLS  EQU  X'1C'             Point-and-shoot RCLS
MXPSRL    EQU  X'1D'             Point-and-shoot RL
MXPSEMCS  EQU  X'1E'             Point-and-shoot EMCS
MXPSMCS   EQU  X'1F'             Point-and-shoot MCS
MXPSSGRP  EQU  X'21'             point-and-shoot SGRP
MXPSDAE   EQU  X'22'             point-and-shoot DAE
MXPSCF    EQU  X'23'             point-and-shoot CF
MXPSSCLS  EQU  X'24'             point-and-shoot SCLS
MXPSMCLS  EQU  X'25'             point-and-shoot MCLS
MXPSCMD   EQU  X'26'             point-and-shoot MXI Command
MXPSDCLS  EQU  X'27'             point-and-shoot DCLS
MXPSLLS   EQU  X'28'             point-and-shoot LLS
MXPSJOBN  EQU  X'29'             point-and-shoot Jobname (DA)
MXPSLX    EQU  X'2A'             point-and-shoot LX
MXPSWLMG  EQU  X'2B'             point-and-shoot WLMG
MXPSUSER  EQU  X'2C'             point-and-shoot USERID (RL)
MXPSHFS   EQU  X'2D'             point-and-shoot HFS
MXPSPID   EQU  X'2E'             point-and-shoot PID
MXPSWLMA  EQU  X'2F'             point-and-shoot WLMA
MXPSASID  EQU  X'30'             point-and-shoot ASID
MXPSWLMS  EQU  X'31'             point-and-shoot WLMS
MXPSLLA   EQU  X'32'             point-and-shoot LLA
MXPSRSYS  EQU  X'33'             point-and-shoot RSYS
MXPSENC   EQU  X'34'             point-and-shoot ENC
MXPSLOGR  EQU  X'35'             point-and-shoot LOGR
MXPSCON   EQU  X'36'             point-and-shoot CON
MXPSMQQ   EQU  X'37'             point-and-shoot MQQ
MXPSMQ    EQU  X'38'             point-and-shoot MQ
MXPSMQC   EQU  X'39'             point-and-shoot MQC
MXPSMQCS  EQU  X'3A'             point-and-shoot MQCS
MXPSDB    EQU  X'3B'             point-and-shoot DB
MXPSDBDA  EQU  X'3C'             point-and-shoot DBDA
MXPSDBBP  EQU  X'3D'             point-and-shoot DBBP
MXPSCGRP  EQU  X'3E'             point-and-shoot Command Group
*/


MxServerCmdService::MxServerCmdService(reply p):CmdService("MxServerCmdService",p),tcpipClient(MX_PORT)
ä
	if (socket>=0)
		ok = 1;
ü

MxServerCmdService::ßMxServerCmdService()
äü

char * nextResult(char * &p)
ä
	static char wÄ512Ü;
	if (*p >= ' ' ]]*p==0)
		return NULL;
	char * text = refMxiÄint(*p)Ü;
	int i =1;
	for(;i<80&&pÄiÜ>=' ';i++);
	char control = pÄiÜ;
	pÄiÜ = 0;
	if (text&&strlen(text))
		sprintf(w,text,p+1,p+1);
	else
		strcpy(w,p+1);
	pÄiÜ = control;
	p+=i;
	bool empty = true;
	for (i=0;i<strlen(w)&&empty;i++)
		empty&=(wÄiÜ==' ');
	if (empty)
		strcpy(w,"&nbsp;");
	return w;
ü

int MxServerCmdService::cmd(char * command)
ä
	keyvalue ** kv = NULL;
	char * title   = NULL;
	if (ok&&command&&(kv=parse(command)))
	ä
		mxireq r;
		memset(&r,' ',sizeof(r));
		memcpy(r.mxireq_operating_sys,"MVS",3);
		for(int i =0;kvÄiÜ;i++)
		ä
			char * from = *(kvÄiÜ->value);
			if (strcasecmp(*(kvÄiÜ->key),MX_COMMAND)==0)
			ä
				title = from;
				size_t l = strlen(from)<sizeof(r.mxireq_command)?strlen(from):sizeof(r.mxireq_command);
				r.mxireq_command_length = (unsigned char)l;
				memcpy(r.mxireq_command,from,l);
			ü
			if (strcasecmp(*(kvÄiÜ->key),MX_USERID)==0)
			ä
				size_t l = strlen(from)<sizeof(r.mxireq_userid)?strlen(from):sizeof(r.mxireq_userid);
				r.mxireq_userid_length = (unsigned char)l;
				memcpy(r.mxireq_userid,from,l);
			ü
			if (strcasecmp(*(kvÄiÜ->key),MX_GROUPID)==0)
			ä
				size_t l = strlen(from)<sizeof(r.mxireq_group_name)?strlen(from):sizeof(r.mxireq_group_name);
				r.mxireq_group_length = (unsigned char)l;
				memcpy(r.mxireq_group_name,from,l);
			ü
			if (strcasecmp(*(kvÄiÜ->key),MX_MQS)==0)
			ä
				size_t l = strlen(from)<sizeof(r.mxireq_mqs_ssid)?strlen(from):sizeof(r.mxireq_mqs_ssid);
				memcpy(r.mxireq_mqs_ssid,from,l);
			ü
			if (strcasecmp(*(kvÄiÜ->key),MX_DB2)==0)
			ä
				size_t l = strlen(from)<sizeof(r.mxireq_db2_ssid)?strlen(from):sizeof(r.mxireq_db2_ssid);
				memcpy(r.mxireq_db2_ssid,from,l);
			ü
		ü
		if (send((char *)&r,sizeof(r)))
		ä
			mxis m;
			char * msg = (char *)&m;
			if (receive((char *)&m,sizeof(m))|=sizeof(m))
			ä
				printf(" MX message %24.24s (%70.70s)ÖnÖnÖn",(char *)msg+4,msg+28);
				return 0;
			ü
			else
			ä
				bool table = (m.mxissnum&&(memcmp(m.mxispanm,"MXIPANEL",8)==0));
				mxdt t;
				if (receive((char *)&t,sizeof(t)-1)==0)
				ä
					printf(" MX message errorÖn");
					return 0;
				ü
				else
				ä
					if (CmdService::debug)
						dump(cgitrace,"Received mxis:",&m,sizeof(m));
					/*
					printf("<title>%s</title><meta http-equiv=Ö"pragmaÖ" content=Ö"no-cacheÖ"><body BGCOLOR=Ö"#000000Ö" TEXT=Ö"#00FFFFÖ"><pre>Ön",title);
					printf("%80.80sÖn%80.80sÖn%80.80sÖn",t.mxdtttl,t.mxdtlb2,t.mxdtlb3);
					*/
					size_t resultLen = t.mxdtsiz+1-sizeof(t);
					char * result = new charÄresultLen+1Ü;
					memset(result,0,resultLen+1);
					if ((receive(result,resultLen))==0)
					ä
						printf(" MX result errorÖn");
						return 0;
					ü
					else
					ä
						int colspan = 0;
						if (CmdService::debug)
							dump(cgitrace,"Received result:",result,resultLen);
						if (table)
						ä
							printf("%sÖn",MXI_TABLE_HEAD);
							printf("<tr>Ön");
							for(int i =1;i<=m.mxissnum;i++)
								printf("<th align=left>%8.8s</th>Ön",m.mxissf1+(i-1)*16+1);
							printf("</tr>Ön");
						ü
						else
						ä
							printf("%sÖn",MXI_TABLE_HEAD);
							for(int i=0,j=1;i<resultLen&&j<=t.mxdtnum;i+=80,j++)
							ä
								char wÄ81Ü;
								memcpy(w,result+i,80);
								wÄ80Ü =0;
								int cs = 0;
								for(int k =0;k<80;k++)
									if (wÄkÜ<' '&&wÄkÜ)
										cs++;
								if (cs>colspan)
									colspan = cs;
							ü
						ü
						for(int i=0,j=1;i<resultLen&&j<=t.mxdtnum;i+=80,j++)
						ä
							if (table]]1)
								if (j%2 == 1)
									printf("<tr class='odd'>Ön");
								else
									printf("<tr>Ön");
							else
								printf("<p>");
							char wÄ81Ü;
							memcpy(w,result+i,80);
							wÄ80Ü =0;
							char * next = w;
							char * print = NULL ;
							//if (*next==0)
							//	break;
							bool first = true;
							int col = 0;
							while(print = nextResult(next))
							ä
								col++;
								bool lastcol = true;
								for(int k=0;nextÄkÜ;k++)
									if (nextÄkÜ<' ')
										lastcol = false;
								if (table]]1)
								ä
									if (colspan&&lastcol)
										printf("<td colspan='%d'>",colspan-col+1);
									else
										printf("<td>");
									first = false;
								ü
								printf("%s",print);
								if (table]]1)
									printf("</td>");
							ü;
							if (table]]1)
								printf("</tr>Ön");
						ü
						if (table]]1)
							printf("%sÖn",MXI_TABLE_TRAIL);
					ü
					if (result)
						delete result;
				ü
			ü
		ü
	ü
	return 0;
ü



RexxServerCmdService::RexxServerCmdService(reply p):CmdService("RexxServerCmdService",p),tcpipClient(REXXSERVER_PORT)
ä
	if (socket>=0)
		ok = 1;
ü

RexxServerCmdService::ßRexxServerCmdService()
äü

int RexxServerCmdService::cmd(char * command)
ä
	keyvalue ** kv = NULL;
	if (ok&&command&&(kv=parse(command)))
	ä
		REXXSERVER_REQUEST r;
		memset(&r,' ',sizeof(r));
		for(int i =0;kvÄiÜ;i++)
		ä
			char * from = *(kvÄiÜ->value);
			int    l    = strlen(from);
			if (strcasecmp(*(kvÄiÜ->key),REXXSERVER_COMMAND)==0)
			ä
				l = l<sizeof(r.command)?l:sizeof(r.command);
				memcpy(r.command,from,l);
			ü
			else	if (strcasecmp(*(kvÄiÜ->key),REXXSERVER_TYPE)==0)
			ä
				l = l<sizeof(r.type)?l:sizeof(r.type);
				memcpy(r.type,from,l);
			ü
			else if (strcasecmp(*(kvÄiÜ->key),REXXSERVER_REPLYID)==0)
			ä
				l = l<sizeof(r.replyid)?l:sizeof(r.replyid);
				memcpy(r.replyid,from,l);
			ü
		ü
		if (send((char *)&r,sizeof(r)))
		ä
			char bÄ32000Ü;
			int rc = 0;
			if ((rc=receive((char *)b,sizeof(b))-1)==0)
			ä
				printf(" REXXSERVER error, nothing receivedÖn");
				return 0;
			ü
			else
				while(rc)
				ä
					if (rc<0)
						rc=-rc;
					int bc=0;
					for(int i =0;i<rc;i++)
						if (bÄiÜ < ' ' && bÄiÜ-'Ön')
						ä
							bÄiÜ = ' ';
							bc++;
						ü
						if (CmdService::debug)
						ä
							printf(" REXXSERVER:%s",b);
							dump(cgitrace,"Received",b,rc);
						ü


						bÄrcÜ=0;
						//if (bc<rc)
						printf(" %s",b);
						rc=receive((char *)b,sizeof(b)-1);
				ü
		ü
	ü
	return 0;
ü

/*
OperCmdService::OperCmdService(reply p):CmdService("OperCmdService",p)
äü
OperCmdService::ßOperCmdService()
äü
int OperCmdService::cmd(char *c)
ä
printf(" Oper command %sÖn",c);
return 0;
ü
*/


OperCmdService::OperCmdService(reply p):CmdService("OperCmdService",p),tcpipClient(REXXSERVER_PORT)
ä
	if (socket>=0)
		ok = 1;
ü

OperCmdService::ßOperCmdService()
äü

int OperCmdService::cmd(char * command)
ä
	keyvalue ** kv = NULL;
	if (ok&&command&&(kv=parse(command)))
	ä
		REXXSERVER_REQUEST r;
		memset(&r,' ',sizeof(r));
		memcpy(r.command,command,strlen(command));
		memcpy(r.type,WD4Z,strlen(WD4Z));
		if (send((char *)&r,sizeof(r)))
		ä
			char bÄ32000Ü;
			int rc = 0;
			if ((rc=receive((char *)b,sizeof(b))-1)==0)
			ä
				printf(" REXXSERVER error, nothing receivedÖn");
				return 0;
			ü
			else
				while(rc)
				ä
					if (rc<0)
						rc=-rc;
					int bc=0;
					/*
					for(int i =0;i<rc;i++)
					if (bÄiÜ==0x25)
					bÄiÜ = 'Ön';
					*/
					if (CmdService::debug)
					ä
						printf(" REXXSERVER:%s",b);
						dump(cgitrace,"Received",b,rc);
					ü


					bÄrcÜ=0;
					//if (bc<rc)
					printf(" %s",b);
					rc=receive((char *)b,sizeof(b)-1);
				ü
		ü
	ü
	return 0;
ü

//int main(int argc,char * argvÄÜ)??????????????????
int mainX(int argc,char * argvÄÜ)

ä
	mvsSTRING::parseSepCh='Ö''; //szm20061218 mvsSTRING parse escape ch set here to apostrophe , all other cases null|||||||
	//FILE * reopen_stdout = freopen("//dd:sysprint","w,recfm=VB,lrecl=32756,blksize=32760",stdout);

	TsoCmdService *				tso =  NULL;
	UssCmdService	*				unix = NULL;
	JesCmdService *   		jes  = NULL;
	DsnCmdService *  			dsn  = NULL;
	OperCmdService *			oper = NULL;
	SdsfCmdService *			sdsf = NULL;
	MxServerCmdService *  mx  = NULL;
	RexxServerCmdService *rs  = NULL;

	const static char *version=ISIS_VERSION;
	const static char *compileDate=ISIS_VERSION_DATE;
#if 0
	void * * R1 = __osplist;
	char * argvÄ2Ü = ä "MVSSERVS",NULLü;
	int    argc    = 2;
	char _bÄ32700Ü;
	int l			= *(int *)*(R1+1);
	char * c  = *(char **)*R1;
	memcpy(_b,c,l);
	_bÄlÜ = 0;
	argvÄ1Ü = _b;
#endif
	if (CmdService::debug)
		printf(" %s tester %s %s Version:%s Compiled:%sÖn",argvÄ0Ü,ISIS_PF_SID,ISIS_PF_NAME,version,compileDate);
	if (strcasecmp(argvÄ0Ü,CALLBACK_PROGRAM)==0)
	ä
		CmdService * cmd = (CmdService *)(atoi(argvÄ1Ü));
		if (cmd)
		ä
			cmd->backFromRexx();
		ü
		else
			printf(" Callbak address zeroÖn");
	ü
	else
	ä
		mvsSTRING b;
		char buffÄ32700Ü;
		buffÄ0Ü = 0;
		if (argc>1)
		ä
			if (CmdService::debug)
				printf(" argc:%dÖn",argc);
			for (int i =1;i<=argc;i++)
			ä
				if (CmdService::debug)
					printf("argvÄ%dÜ:%sÖn",i,argvÄiÜ);
				strcpy(buff+strlen(buff),argvÄiÜ);
				strcat(buff," ");

			ü

			if (strchr(buff,'Ön'))
				*strchr(buff,'Ön') = 0;
			for(int i=0;i<strlen(buff);i++)
			ä
				if (buffÄiÜ=='+')
					buffÄiÜ = ' ';
				else
					if (buffÄiÜ=='-')
						buffÄiÜ = '+';
					else
						if (buffÄiÜ=='_')
							buffÄiÜ = '%';

			ü
			b =buff+1;
			if (CmdService::debug)
				printf(">>%sÖn",buff);
			b.strip();
		ü
		else
			buffÄ0Ü = 'S';

		switch (buffÄ0Ü)
		ä
		case 'r':
		case 'R':
		case 't':
		case 'T':
			if (strcasecmp(argvÄ0Ü,AUTHSERVER))
			ä
				if (|tso)
					tso = new TsoCmdService();
				tso->cmd(b);
			ü
			else
				printf(" We can't start TSO in auth environmentÖn");
			break;
		case 'u':
		case 'U':
			if (|unix)
				unix = new UssCmdService();
			unix->cmd(b);
			break;
		case 'j':
		case 'J':
			if (strcasecmp(argvÄ0Ü,SERVER))
			ä
				if (|jes)
					jes = new JesCmdService();
				jes->cmd(b);
			ü
			else
				printf(" We can't start JES in Unauth environmentÖn");
			break;
		case 'd':
		case 'D':
			if (|dsn)
				dsn = new DsnCmdService();
			dsn->cmd(b,NULL);
			break;
		case 'o':
		case 'O':
			if (|oper)
				oper = new OperCmdService();
			oper->cmd(b);
			break;
		case 's':
		case 'S':
			if (|sdsf)
				sdsf = new SdsfCmdService();
			sdsf->cmd(b);
			break;
		case 'm':
		case 'M':
			if (|mx)
				mx = new MxServerCmdService();
			mx->cmd(b);
			break;

		case 'x':
		case 'X':
			if (|rs)
				rs = new RexxServerCmdService();
			rs->cmd(b);
			break;

		default:
			printf("?? %sÖn",buff);
		ü
		if (tso)
			delete tso;
		if (unix)
			delete unix;
		if (jes)
			delete jes;
		if (dsn)
			delete dsn;
		if (sdsf)
			delete sdsf;
		if (mx)
			delete mx;
		if (rs)
			delete rs;

	ü

	return 0;
ü
