
/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/casmif.cpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/

#include "isisdef.h"
#include <stdlib.h>
#include <string.h>
#include <strings.h>

#if  defined(OWN_STDIO) == 1
#include "stdio.hpp"
//#include "crctable.hpp"
#include "filesys.hpp"
#endif

#include "casmif.hpp"
#include "mchain.hpp"
#include "merror.hpp"
#include "mvsbase.hpp"
#include "mvstime.hpp"
#if defined(CICSAPPL) == 0 && defined(MU_STANDALONE) == 0  //szm
#include "isismisc.hpp"
#endif
#include "misc.hpp"
#include "msgmgr.hpp"
#ifndef OWN_STDIO
#include <assert.h>
#endif

ISIS_EXT_ASM unsigned int ASMIF(void *);
static pMvsInterface  _mvsInterfaceÄÜ = ä0,0,0,0,0,0,0,0ü;
static pcsul          _tcbÄÜ         = ä0,0,0,0,0,0,0,0ü;
//szm20081215 zIIP
bool MvsInterface::zIIP = getenv("ISIS_ZIIP_SUPPORT")?true:false;
pcsul  MvsInterface::wlmEnclave = 0;
//szm20081215 zIIP

//ZA030610 always 8
static int            MAX_TCB        = 8;
static char CRITICAL_MAJORÄÜ = "ASM__MVS";
static char CRITICAL_MINORÄÜ = "ASM__MVS__CRITICAL";
static char MSG_MAJORÄÜ      = "ASM__MSG";
static char MSG_MINORÄÜ      = "OMSMSGMN";
static char ASM_MAJORÄÜ      = "OMS     ";
static char ASM_MSGÄÜ        = "ASM_MSG";
static char WAIT_MAJORÄÜ     = "ASM_WAIT";
static char POST_MAJORÄÜ     = "ASM_POST";
#ifndef sym_init
#define sym_init -1
#endif

//20060418MessageTEXT * messagetext = NULL; //szm2041120

static int _init_messagetext = initMessageText();

int  GlobalTraceFlag = getenv("TRACE") ? atoi(getenv("TRACE")):0;
int  GlobalCicsFlag  = 0;
static char* MSGQ    = getenv("MSGQ") ? getenv("MSGQ"):"SASO";
static int   MvsTimer_status = 0;

static void btracef(const char * text)
 ä
 printf(" %s Ön",text);
 ü


static int CompareAndSwap(pcsul &p1,pcsul p2,void *p3)
 ä
 // if ( p1 == *p3 ) *p3 = p2
 // else p1 = *p3
 return 1;
 ü

#if (MEM_SUPPORT)
//
//------------------------------------------------------------------------------
//

void * OwnRealloc(void *a, size_t size)
 ä
 if ( size == 0 )
  return NULL;
 else if ( a == NULL )
  return (OwnMalloc(size));
 void * n = OwnMalloc(size);
 if ( NOT n ) return NULL;
 size_t oldsize =*((int *)a-2)-16;
 assert(oldsize > 0);
 if ( oldsize < size )
  memcpy(n,a,oldsize);
 else
  memcpy(n,a,size);
 OwnFree(a);
 return n;
 ü
#endif
/*-----------------------------------------------------------------
MvsInterface
------------------------------------------------------------------*/

void MvsInterface::trace(char * t)
 ä
 if ( GlobalTraceFlag && file )
  fprintf(file,"%sÖn",t);
 ü

void MvsInterface::tracedump(char * t,void * bv,int  bl)
 ä
 if ( GlobalTraceFlag )
  ä
  if ( file )
   fprintf(file,"%s === %pÖn",t,bv);
  char pÄ512Ü;
  char * b = (char *)bv;
  for(int o = 0;o<=bl;o+=16)
   ä
   dump(p,o,b,bl);
   fprintf(file,"%s %s Ön",DatetoString(),p);
   ü
  ü
 ü

void MvsInterface::extractOper(char * text)
 ä
 mvsSTRING s(text), p1, p2, st;
 s.parse(p1,"=",st," ",p2);
 while ( st.lengthOf() )
  ä
  char* c = strchr((char *)st,'=');
  if ( c )
   *c = 0;
  else
   c = " 1";
  if ( strcmp(st,"TRACE") == 0)
   GlobalTraceFlag = atoi(getenv("TRACE"));
  s = p1+p2;
  s.parse(p1," =",st," ",p2);
  ü
 strcpy(text,s);
 ü

/*-----------------------------------------------------------------
MvsStcInterface
------------------------------------------------------------------*/

char * function_name_tableÄÜ  = ä
 "CLEANUP",
 "GETTOKEN",
 "CREATETOKEN",
 "DELETETOKEN",
 "ALLOCATEPAGES",
 "FREEPAGES",
 "ENQ",
 "DEQ",
 "SLEEP",
 "GETECB",
 "WAIT",
 "POST",
 "RESET",
 "SELECT",
 "CONNECTSHMEM",
 "DISCONNECTSHMEM",
 "OPER",
 "WTO",
 "MALLOC",
 "FREE",
 "SVC",
 "ATTCHMVS",
 "CLOCK",
 "TIMEUSED",    //szm0050301
 "TDUMP",       //szm
 "LOGGER",
 "VTOC",
 "SRB",
 "WLM",
 "OBTAIN",
 "TESTAUTH",
 "DIAGNOSE",
 "VSMLIST",
 NULL
 ü;


MvsInterface::MvsInterface()
 ä
 srb = false;
 jobnameÄ8Ü = programnameÄ8Ü = 0x00;
 if ( GlobalTraceFlag && NOT GlobalCicsFlag )
  ä
  file  = fopen("SYSPRINT","w");
  ü
 else file = 0;
 CASMIF(sym_init);
 memcpy(jobname,pASM->asm_jobname,8);
 memcpy(programname,pASM->asm_programname,8);
 // TRACE(4,Msg(9503)<<">MvsInterface"<<jobname<<programname<<eol);
 ü

MvsInterface::ßMvsInterface()
 ä
 if ( file ) fclose(file);
 CASMIF(sym_cleanup);
 pASM = 0;
 TRACE(4,SMsg(9501)<<"<MvsInterface"<<eol);
 ü

int MvsInterface::TCPCALL(int      function,
             void *   p0,void *   p1,void *   p2,void * p3,
             void *   p4,void *   p5,void *   p6,void * p7)
 ä
 CASMIF(function,p0,p1,p2,p3,
  p4,p5,p6,p7);
#if 0
 if ( rc == -1 )
  ä
  CASMIF(sym_lasterror);
  TRACE(1,Msg(9502)<<">Socket errror"<<int(rc)<<eol);
  MsgEnq();
  Msg(9511)<<function_name_tableÄfunctionÜ
  <<" code:"<<rc<<eol;
  MsgDeq();
  return -1;
  ü
#endif
 return rc;
 ü

int MvsInterface::CASMIF(int      function,
             void * p0,void * p1,void * p2,void *p3,
             void * p4,void * p5,void * p6,void *p7)
 ä
 if (function == sym_init)
  ä
  pASM = (pasm)ASMIF(0);
  assert(pASM);
  pASM->asm_mvs = this;
  ü
 else
  ä
  pASM->asm_function_code = char(function);
  pASM->asm_parmsÄ0Ü= p0;
  pASM->asm_parmsÄ1Ü= p1;
  pASM->asm_parmsÄ2Ü= p2;
  pASM->asm_parmsÄ3Ü= p3;
  pASM->asm_parmsÄ4Ü= p4;
  pASM->asm_parmsÄ5Ü= p5;
  pASM->asm_parmsÄ6Ü= p6;
  pASM->asm_parmsÄ7Ü= p7;
  ASMIF(pASM);
  rc = int(pASM->asm_rc);
  reason = int(pASM->asm_reason);
  //szm20030616 no check for ENQ/DEQ
  if ( function NEQ sym_sleep &&  function NEQ sym_wait && function NEQ sym_attachmvs
   && function NEQ sym_svc &&  function NEQ sym_clock && function NEQ sym_logger && function NEQ sym_wlm
   && function NEQ sym_srb   // no check for SRB
   &&function NEQ sym_obtain)
   check(rc,function," CASMIF ");
  else
   return (rc);
  ü
 return (rc==0);
 ü
int MvsInterface::check(int r,char *function,char * action)
 ä
 char hexÄ9Ü;
 sprintf(hex,"%8.8x",reason);
 if ( GlobalTraceFlag == 4 )
  TRACE(4,SMsg(9505)<<" Checking "<<rc<<hex<<function<<action<<eol);
 if ( r )
  ä
  MsgEnq();
  Msg(9510)<<function<<action<<r<<eol;
  MsgDeq();
  ü
 return r;
 ü


int MvsInterface::check(int r,int function,char * action)
 ä

 char hexÄ9Ü;
 sprintf(hex,"%8.8x",reason);
 char hexrsnÄ9Ü;
 sprintf(hexrsn,"%8.8x",pASM->asm_bpx1_rsncode);
 if ( GlobalTraceFlag == 4 )
  TRACE(4,SMsg(9505)<<" Checking "<<int(rc)<<hex<<
  function_name_tableÄfunctionÜ<<action<<eol);
 if ( r )
  ä
  switch(function)
   ä
   case sym_select:      if ( r < 0 )
    ä
    MsgEnq();
    Msg(9510)<<function_name_tableÄfunctionÜ<<
     hex<<hexrsn<<eol;
    MsgDeq();
    ü
              break;
   case sym_enq:         if ( r == -1 ) break;
   case sym_wait:        if ( r == -1 ) break;
   case sym_gettoken:    if ( r == 4 ) break;
   case sym_deletetoken: if ( r == 4 ) break;
   case sym_disconnectshmem: if ( r == 4 ) break;
   case sym_vtoc:        if ( r ==4 ) break;
   default:
    MsgEnq();
    Msg(9510)<<function_name_tableÄfunctionÜ<<
     r<<hex<<eol;
    MsgDeq();
   ü
  ü
 return r;
 ü


pcsul MvsInterface::GetTCB()
 ä
 return (*(pcsul *)PSATOLD);
 ü

pcsul MvsInterface::GetASCB()
 ä
 return(*(pcsul *)PSAAOLD);
 ü

int MvsInterface::CheckASCB(pcsul ascb)
 ä
 return(NOT (memcmp("ASCB",(char *)ascb,4)));
 ü

pcsul MvsInterface::GetToken(char * n)
 ä
 TRACE(4,SMsg(9502)<<">GetToken"<<n<<eol);
 if ( n  &&  CASMIF(sym_gettoken,n,wt))
  ä
  TRACEDUMP(4,SMsg(9501)<<"<GetToken"<<eol,(void *)wt,sizeof(*wt));
  return ((pcsul)wt);
  ü
 return ((pcsul)NULL);
 ü

pcsul MvsInterface::CreateToken(char *n,pcsul * v)
 ä
 TRACE(4,SMsg(9502)<<">CreateToken"<<n<<eol);
 wtÄ0Ü = vÄ0Ü;
 wtÄ1Ü = vÄ1Ü;
 wtÄ2Ü = vÄ2Ü;
 wtÄ3Ü = vÄ3Ü;
 rc = 16;
 if ( n )
  ä
  CASMIF(sym_createtoken,n,wt);
  if ( rc == 4 )
   ä
   CASMIF(sym_deletetoken,n);
   CASMIF(sym_createtoken,n,wt);
   ü
  ü
 TRACEDUMP(4,SMsg(9501)<<">CreateToken"<<eol,(void *)wt,sizeof(*wt));
 return (rc==0);
 ü

void MvsInterface::DeleteToken(char *n)
 ä
 TRACEDUMP(4,SMsg(9501)<<">DeleteToken"<<eol,(void *)n,strlen(n));
 CASMIF(sym_deletetoken,n);
 TRACE(4,SMsg(9501)<<"<DeleteToken"<<eol);
 ü


int MvsInterface::WaitEcb(pcsul  ms,
             void * pecb0,void * pecb1,void * pecb2,void * pecb3)
 ä
 TRACEDUMP(4,SMsg(9503)<<">WaitEcb"<<rc<<ms<<eol,pecb0,20);
 CASMIF(sym_wait,(void *)ms,pecb0,pecb1,pecb2,pecb3);
 TRACE(4,SMsg(9502)<<"<WaitEcb"<<rc<<eol);
 return rc;
 ü

int MvsInterface::PostEcb(void * pecb,pcsul code)
 ä
 TRACE(3,SMsg(9502)<<">PostEcb"<<code<<eol);
 CASMIF(sym_post,pecb,(void *)code);
 TRACEDUMP(3,SMsg(9502)<<"<PostEcb"<<rc<<eol,pecb,20);
 return rc;
 ü

int MvsInterface::Enq(char * n,int ms)
 ä
 TRACE(4,SMsg(9503)<<">Enq"<<n<<ms<<eol);
 CASMIF(sym_enq,ASM_MAJOR,n,(void *)strlen(n),(void *)ms);
 TRACE(4,SMsg(9502)<<"<Enq"<<rc<<eol);
 if ( rc == 0 ) return 1;
 else if ( rc < 0 ) return 0;
 else return -1;
 ü

int MvsInterface::Deq(char * n)
 ä
 TRACE(4,SMsg(9502)<<">Deq"<<n<<eol);
 CASMIF(sym_deq,ASM_MAJOR,n,(void *)strlen(n));
 TRACE(4,SMsg(9503)<<"<Deq"<<rc<<n<<eol);
 return (rc==0);
 ü


int MvsInterface::Svc(int n, void *p)
 ä
 TRACE(4,SMsg(9502)<<">Svc"<<n<<eol);
 CASMIF(sym_svc,(void *)n,(void *)p);
 TRACE(4,SMsg(9503)<<"<Svc"<<rc<<n<<eol);
 return (rc);
 ü

int MvsInterface::AttachMvs(const char * module,const char * parms)
 ä
 size_t l_module= strlen(module);
 size_t l_parms = strlen(parms);
 TRACE(4,SMsg(9503)<<">AttachMvs"<<module<<parms<<eol);
 CASMIF(sym_attachmvs,(void *)&l_module,(void *)module,(void *)&l_parms,(void *)parms);
 TRACE(4,SMsg(9503)<<"<AttachMvs"<<rc<<module<<eol);
 return (rc);
 ü

void MvsInterface::Clock(void * stck)
 ä
 CASMIF(sym_clock,stck);
 ü

//szm
void MvsInterface::Timeused(void * time) //szm
 ä
 CASMIF(sym_timeused,time);
 ü

long long clock_mvs()
 ä
 long long here;
 mvs()->Timeused(&here);
 return here;
 ü
//szm
//szm
int MvsInterface::Tdump(const char * n,const char *d,int dd = 0)
 ä
 return (CASMIF(sym_tdump,(void *)n,(void *)d,(void *)dd));
 ü

int tdump(const char *n, const char *d,int dd)
 ä
 return mvs()->Tdump(n,d,dd);
 ü

//szm20071005 get back reason code
int mvsReasonCode()
 ä
 return mvs()->getReasonCode();
 ü
//szm20071005 get back reason code


//szm

//szm20051118 LOGGER
//szm
int MvsInterface::LoggerOpen(const char * stream)
 ä
 char zerosÄ17Ü = "Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0";
 char tokenÄ17Ü = "                ";
 memcpy(token,stream,(strlen(stream)<16?strlen(stream):16));
 pcsul  p =NULL;

 if (strcmp(stream,(const char *)(pASM->asm_streamname))==0)
  ä
  if (memcmp(pASM->asm_streamtoken,zeros,16)==0)
   ä
   if (p=GetToken(token))
    memcpy(pASM->asm_streamtoken,(char *)p,16);
   else
    if (CASMIF(sym_logger,(void *)0,(void *)stream,(void *)strlen(stream))==0)
     CreateToken(token,(pcsul *)(pASM->asm_streamtoken));
    else
     return 0;
   ü
  return 1;
  ü

 if (CASMIF(sym_logger,(void *)0,(void *)stream,(void *)strlen(stream))|=0);
 return 0;

 CreateToken(token,(pcsul *)(pASM->asm_streamtoken));
 return 1;
 ü
int MvsInterface::Logger(const char * stream,size_t l)
 ä
 return (CASMIF(sym_logger,(void *)1,(void *)stream,(void *)(l?l:strlen(stream)))==0);
 ü
//szm
int MvsInterface::BrowseLogger(const char * & addr,size_t *  & length,int direction,int all,char * date_time)
 ä
  if (direction ==0) //szm
   direction = 2;
 return (CASMIF(sym_logger,(void *)(direction),(void *)&addr,(void *)&length,(void *)all,(void *)date_time));
 ü

//szm
int MvsInterface::LoggerClose()
 ä
 //return (CASMIF(sym_logger,(void *)-1)); szm
 // never close the logger
 return 1;
 ü
//szm20051118 LOGGER
//szm20051121 VTOC
int MvsInterface::VtocOpen(const char * ddname,const char * mask,char *dscb)
 ä
 char _maskÄ46Ü;
 char _ddnameÄ9Ü;
 memcpy(_mask+1,mask,44);
 _maskÄ45Ü = 0;
 if (strchr(_mask+1,' '))
  *strchr(_mask+1,' ')= 0;
 _maskÄ0Ü = strlen(_mask+1);
 memset(_ddname,' ',8);
 _ddnameÄ8Ü = 0;
 memcpy(_ddname,ddname,(strlen(ddname)<=8)?strlen(ddname):8);
 CASMIF(sym_vtoc,(void *)0,(void *)_ddname,(void *)_mask,(void *)dscb);
 return rc;
 ü
int MvsInterface::Vtoc(char * dscb)
 ä
 CASMIF(sym_vtoc,(void *)1,(void *)0,(void *)0,(void *)dscb);
 return rc;
 ü
int MvsInterface::VtocClose()
 ä
 return (CASMIF(sym_vtoc,(void *)-1));
 ü
//szm20051121 VTOC

//szm
int MvsInterface::initEnclave()
  ä
 	return wlmEnclave;
  ü

int MvsInterface::Srb()
 ä
 if (srb)
  ä
 CASMIF(sym_srb);
 srb = false;
 //printf(" exit from SRB:%p %p srbFlag:%dÖn",pASM,this,pASM->asm_srb_mode);
  ü
 else
  ä
  //printf(" entry to SRB:%p %p srbFlag:%dÖn",pASM,this,pASM->asm_srb_mode);
  srb = true;
  CASMIF(sym_srb);
  ü
 return rc;
 ü


int MvsInterface::Wlm(const char * subsys,const char * subsysnm)
 ä
 /*
 if (CASMIF(sym_wlm,(void *)subsys,(void *)subsysnm)|=0)
  ä
  printf(" WLM function:%8.8s rc:%d(%8.8x) rsn:%d(%8.8x)Ön",
   pASM->asm_wlm_macro,pASM->asm_wlm_retcode,pASM->asm_wlm_retcode,
   pASM->asm_wlm_rsncode,pASM->asm_wlm_rsncode);
  return 8;
  ü
 */

 return 0;
 ü

int MvsInterface::Obtain(const char * dsn, const char * volser,char * dscb)
ä
 return (CASMIF(sym_obtain,(void *)dsn,(void *)volser,(void *)dscb));
ü

int MvsInterface::Testauth()
ä
 return (CASMIF(sym_testauth));
ü

int MvsInterface::Diagnose(int function,void * reply)
ä
 return(CASMIF(sym_diagnose,(void *)function,reply));
ü


int MvsInterface::Vsmlist(void * ascb,void * address, int length )
ä
 return(CASMIF(sym_vsmlist,ascb,address,(void *)length));
ü

void MvsInterface::Chap(pcsul t,int p)
 ä
 TRACE(4,SMsg(9503)<<">Chap"<<t<<long(p)<<eol);
#ifdef __SASC_
 CHAP(p,&t);
#endif
 TRACE(4,SMsg(9501)<<"<Chap"<<eol);
 ü

pcsul MvsInterface::Attach(char * pgm,char ** param,pcsul ecb)
 ä
 TRACE(4,SMsg(9502)<<">Attach"<<pgm<<eol);
 pcsul tcb = 0;
 *(pcsul *)ecb = 0;
 pcsul lparamÄ16Ü;
 int i;
 for(i =0;i<16 && paramÄiÜ;i++)lparamÄiÜ = (pcsul)(paramÄiÜ);
 lparamÄiÜ = lparamÄiÜ ] 0x80000000;
 check(rc,"Attach","ATTACH");
 TRACE(4,SMsg(9501)<<"<Attach"<<eol);
 return tcb;
 ü

void MvsInterface::Detach(pcsul tcb)
 ä
 TRACE(4,SMsg(9502)<<">Detach"<<tcb<<eol);
 check(rc,"Deatch","DETACH");
 TRACE(4,SMsg(9501)<<"<Detach"<<eol);
 ü

void MvsInterface::Sleep(int ms)
 ä
 TRACE(4,SMsg(9502)<<">Sleep"<<ms<<eol);
 if (ms) CASMIF(sym_sleep,(void *)ms);
 TRACE(4,SMsg(9501)<<"<Sleep"<<eol);
 ü

int MvsInterface::Oper(char *to,const size_t length)
 ä
 TRACE(4,SMsg(9501)<<">Oper"<<eol);
 memset(to,0,length);
 CASMIF(sym_oper,(void *)to,(void *)length);
 if ( rc == 0 ) extractOper(to);
 TRACE(4,SMsg(9503)<<"<Oper"<<to<<rc<<eol);
 return rc;
 ü

void MvsInterface::Wto(const char *text,const int desc)
 ä
 if ( text == 0 ) return;
 TRACE(4,SMsg(9502)<<">Wto"<<text<<eol);
 char  tÄ128Ü;
 memset(t,0,sizeof(t));
 strncpy(t,text,sizeof(t)-1);
 for(char * ct = t;*ct;ct++) if( *ct == 'Ön') *ct = ' ';
 CASMIF(sym_wto,(void *)t,(void *)strlen(t),(void *)desc);
 TRACE(4,SMsg(9501)<<"<Wto"<<eol);
 ü

void * MvsInterface::Malloc(size_t size)
 ä
 void * a = 0;
 CASMIF(sym_malloc,(void *)size,(void *)&a);
 check(rc,"Malloc","MALLOC");
 return a;
 ü

void  MvsInterface::Free(void * a)
 ä
 CASMIF(sym_free,(void *)a);
 check(rc,"Free","FREE");
 return ;
 ü


int MvsInterface::Select(pcsul numfds,
             void *rfds,void *wfds,void *efds,void *time)
 ä
 CASMIF(sym_select,(void *)numfds,rfds,wfds,efds,time);
 TRACE(4,SMsg(9502)<<"<Select"<<rc<<eol);
 return rc;
 ü

/*-----------------------------------------------------------------
COMMON functions
------------------------------------------------------------------*/

int isCics()ä return GlobalCicsFlag;ü


MvsInterface * getTcbUser()
 ä
 pcsul  p = * (pcsul  * )PSATOLD;
 pasm pASM = ((pasm)*(pasm *)(p+TCBUSER));
 if (pASM)
  return((MvsInterface *)(pASM->asm_mvs));
 else
  return((MvsInterface * )NULL);
 ü


MvsInterface * mvs()
 ä
 int i = 0;
 for(;i<MAX_TCB && _mvsInterfaceÄiÜ;i++)
  if (_tcbÄiÜ == *(pcsul *)PSATOLD) break;
 assert(i<MAX_TCB);
 if (_mvsInterfaceÄiÜ && _tcbÄiÜ == *(pcsul *)PSATOLD)
  return(_mvsInterfaceÄiÜ);
 _tcbÄiÜ = *(pcsul *)PSATOLD;
 return (_mvsInterfaceÄiÜ = (MvsInterface*)new MvsInterface());
 ü

int MsgEnq()
 ä
 int rc = 0;
 rc = ( ENQ(MSG_MAJOR,MSG_MINOR,E,8,STEP,NONE) == 0);
 return rc;
 ü

int MsgDeq()
 ä
 int rc = 0;
 rc = ( DEQ(MSG_MAJOR,MSG_MINOR,8,STEP,NONE) == 0);
 return rc;
 ü

//KV
SyncVar::SyncVar(pcsul w)
 ä
 var  = 0;
 wait = w;
 ecb  = 0;
 ü

SyncVar::SyncVar(const SyncVar & v)
 ä
 var  = v.var;
 wait = v.wait;
 ecb = 0;
 ü
SyncVar::ßSyncVar()
 ä
 if (ecb&WAITcode)
  mvs()->PostEcb(&ecb,0);
 ü
SyncVar& SyncVar::operator=(pcsul t)
 ä
 // printf(" %p TCB %s %dÖn",*(pcsul *)PSATOLD,">operator",t);
 // btrace(&btracef);
 for(;;)
  ä
  // if ( p1 == *p3 ) *p3 = p2
  // else p1 = *p3
  pcsul x = var;
  if (CompareAndSwap(x,t,&var)==0)
   break;
  ü
 mvs()->PostEcb(&ecb,t);
 //printf(" %p TCB %s %pÖn",*(pcsul *)PSATOLD,"<operator",var);
 return(*this);
 ü

SyncVar::operator int()
 ä
 //printf(" %p TCB %s %pÖn",*(pcsul *)PSATOLD,"init()",var);
 return int(var);
 ü

pcsul waitSyncVar(SyncVar &s)
 ä
 //printf(" %p TCB  %s %pÖn",*(pcsul *)PSATOLD,">wait",s.var);
 //szm20040624 avoid dumplicate wait on ECB's (S301)
 if (int(s.ecb)&0x80000000)
  mvs()->Sleep(100);
 else
  if (mvs()->WaitEcb(s.wait,&s.ecb) <0)
   return (-1);
 // printf(" %p TCB  %s %pÖn",*(pcsul *)PSATOLD,"<wait",s.var);
 return(s.var);
 ü
pcsul waitSyncVars(SyncVar &s1,SyncVar &s2)
 ä
 //printf(" %p TCB %s %p %pÖn",*(pcsul *)PSATOLD,">waits",s1.var, s2.var);
 //szm20040624 avoid dumplicate wait on ECB's (S301)
 if (int(s1.ecb)&0x80000000 ]] int(s2.ecb)&0x80000000)
  mvs()->Sleep(100);
 else
  if
   (mvs()->WaitEcb((s1.wait<s2.wait?s1.wait:s2.wait),&s1.ecb,&s2.ecb) < 0)
   return (-1);
 //printf(" %p TCB %s %p %pÖn",*(pcsul *)PSATOLD,"<waits",s1.var, s2.var);
 return(1);
 ü

