#include "isisdef.h"
#include "versinfo.h"
#include "osmfind.hpp"
#define _XOPEN_SOURCE 500
#define _LARGE_FILES 1
#ifndef _SHR_ENVIRON
#define _SHR_ENVIRON 1
#endif
#define _SHARE_EXT_VARS 1
#define  environ  (*(__Envn()))
#include <signal.h>
#include <dll.h>
#include <limits.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <string.h>
#include <strings.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include "ibmdebug.hpp"

#include "misc.hpp"
#include "osmfind.hpp"
#include "jesi.hpp"
#include "caljesi.hpp"
#include "mchain.hpp"
#include "casmif.hpp"
#include "msgmgr.hpp"
#include "jobenv.hpp"
#include "rexxvar.hpp"

//#include "mvssamp.hpp"

int _dump(char * id,char * p,int l)
ä
	unsigned char ETOAÄ256Ü =
	ä
		0, 0x1, 0x2, 0x3, 0xff, 0x9, 0xff, 0x7f,
		0xff, 0xff, 0xff, 0xb, 0xc, 0xd, 0xe, 0xf,
		0x10, 0x11, 0x12, 0x13, 0xff, 0xff, 0x8, 0xff,
		0x18, 0x19, 0xff, 0xff, 0x1c, 0x1d, 0x1e, 0x1f,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xa, 0x17, 0x1b,
		0xff, 0xff, 0xff, 0xff, 0xff, 0x5, 0x6, 0x7,
		0xff, 0xff, 0x16, 0xff, 0xff, 0xff, 0xff, 0x4,
		0xff, 0xff, 0xff, 0xff, 0x14, 0x15, 0xff, 0x1a,
		0x20, 0xff, 0x83, 0x7b, 0x85, 0xa0, 0xc6, 0x86,
		0x87, 0xa4, 0x8e, 0x2e, 0x3c, 0x28, 0x2b, 0x21,
		0x26, 0x82, 0x88, 0x89, 0x8a, 0xa1, 0x8c, 0x8b,
		0x8d, 0x7e, 0x9a, 0x24, 0x2a, 0x29, 0x3b, 0x5e,
		0x2d, 0x2f, 0xb6, 0x5b, 0xb7, 0xb5, 0xc7, 0x8f,
		0x80, 0xa5, 0x94, 0x2c, 0x25, 0x5f, 0x3e, 0x3f,
		0x9b, 0x90, 0xd2, 0xd3, 0xd4, 0xd6, 0xd7, 0xd8,
		0xde, 0x60, 0x3a, 0x23, 0xf5, 0x27, 0x3d, 0x22,
		0x9d, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
		0x68, 0x69, 0xae, 0xaf, 0xd0, 0xec, 0xe7, 0xf1,
		0xf8, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
		0x71, 0x72, 0xa6, 0xa7, 0x91, 0xf7, 0x92, 0xcf,
		0xe6, 0xe1, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
		0x79, 0x7a, 0xad, 0xa8, 0xd1, 0xed, 0xe8, 0xa9,
		0xbd, 0x9c, 0xbe, 0xfa, 0xb8, 0x40, 0xf4, 0xac,
		0xab, 0xf3, 0xaa, 0x7c, 0xee, 0xf9, 0xef, 0x9e,
		0x84, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
		0x48, 0x49, 0xf0, 0x93, 0xdd, 0x95, 0xa2, 0xe4,
		0x81, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
		0x51, 0x52, 0xfb, 0x96, 0x7d, 0x97, 0xa3, 0x98,
		0x99, 0xf6, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
		0x59, 0x5a, 0xfd, 0xe2, 0x5c, 0xe3, 0xe0, 0xe5,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
		0x38, 0x39, 0xfc, 0xea, 0x5d, 0xeb, 0xe9, 0xff
	ü;
	int i , o;
	printf("%s at:%x(%d)ÖnÖn",id,p,l);
	if (p)
		for(o = 0;o <((l/16)+1)*16;o+=16)
		ä
			printf("%4.4lx:",o);
			for(i = o;i<o+16;i++)
			ä
				if ( i < l )
				ä
					printf("%2.2x",pÄiÜ& 0xFF );
					if (i%4 == 3) printf(" ");

				ü

				else
				ä
					if ( i%4 == 3) printf(" ");
					printf(" ");
				ü
			ü
			printf(" ");
			for(i = o;i<o+16;i++)
				if ( i < l )
					printf("%c",isprint(pÄiÜ)? pÄiÜ:'.');
				else printf(" ");
				printf(" ");
				for(i = o;i<o+16;i++)
					if ( i < l )
					printf("%c",isprint(ETOAÄpÄiÜÜ)?ETOAÄpÄiÜÜ:'.');  printf("Ön");
//				printf("%c",isprint(ATOEÄpÄiÜÜ)?ATOEÄpÄiÜÜ:'.');  printf("Ön");


		ü
		return l;
ü


bool debug = false;
static const int  TSVEUPDT = 2;
static const int  TSVERETR = 1;

char * REXXVAR::fetch(const char * name)
ä
	shv.shvnext = NULL;
	shv.shvuser = 0;
	shv.shvcode = shvfetch;
	shv.shvbufl = bufflength;
	shv.shvnama = (void *)name;
	shv.shvnaml = strlen(name);
	shv.shvvala = to;
	shv.shvvall = 0;
	memset(to,' ',bufflength);
	rc = 0;
	irxexcom("IRXEXCOM",&rc,&rc,&shv,&envaddr,&rc);
	/*
	etc = -1;
	next = 0;
	rc = ikjct441(&TSVERETR,(char * *)&name,&shv.shvnaml,&to,&shv.shvvall,&token,&etc,&next,&rc);
	*/
	if (rc==0&&shv.shvvall)
	ä
		toÄshv.shvvallÜ = 0;
		if (debug)
			_dump((char *)name,to,strlen(to));

		return to;
	ü
	else
		fprintf(stderr," REXX var fetch error for %s code:%dÖn",name,rc);
	return NULL;
ü

size_t REXXVAR::set(const char * name,const char * from,size_t length)
ä
	shv.shvnext = NULL;
	shv.shvuser = 0;
	shv.shvcode = shvstore;
	shv.shvbufl = bufflength;
	shv.shvnama = (void *)name;
	shv.shvnaml = strlen(name);
	shv.shvvala = (void *)from;
	shv.shvvall = length?length:strlen(from);
	rc = 0;
	if (debug)
		_dump((char *)name,(char *)from,shv.shvvall);

	irxexcom("IRXEXCOM",&rc,&rc,&shv,&envaddr,&rc);
	/*
	etc = -1;
	next = 0;
	rc = ikjct441(&TSVEUPDT,(char * *)&name,&shv.shvnaml,(char * *)&from,&shv.shvvall,&token,&etc,&next,&rc);
	*/
	if (rc==0)
	ä
		if (debug)
			fprintf(stderr," Set %s %*.*sÖn",name,shv.shvvall,shv.shvvall,from);
		return shv.shvvall;
	ü
	else
		fprintf(stderr," REXX var set error for %s code:%dÖn",name,rc);
	return 0;

ü

size_t REXXVAR::setStem(const char * name,int &index ,const char * from,size_t length)
ä
	char varNameÄ1024Ü;
	sprintf(varName,"%s.%d",name,++index);
	return (set(varName,from,length));
ü
