/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/misc.cpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/

#include "isisdef.h"
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#ifdef    OWN_STDIO
#include "stdio.hpp"
#else
#include <stdio.h>
#endif

#include <stdlib.h>
#include <time.h>
#include <math.h>
#include "mvsbase.hpp"
#if defined(MU_STANDALONE) == 0
#include "pcsdll.hpp"
#include "ebcdicut.hpp"
#else
#include "mvsebcdic.hpp"
#endif
#include "misc.hpp"
#include "mvsbase.hpp"
#ifdef CALL_PROJECT
#include "project.hpp"
#endif

//#if defined(ISIS_PF_MI) == 1 && defined(ISIS_DEBUG) == 1 //szm20050316 debug flag, off from stdio
#if (defined(ISIS_PF_MI) == 1 ]] defined(ISIS_PF_MU) == 1) && defined(ISIS_DEBUG) == 1 //szm20050316 debug flag, off from stdio
int _isis_pf_mi_debug = 1;
#endif
#if defined(ISIS_PF_HOST) ]] defined (ISIS_PF_MU)
  #if defined(OWN_STDIO) == 0
      #include <assert.h>
  #endif
  #include <ctype.h>
  #include <regex.h>
  #include <locale.h>
  #include <sys/time.h> //ZA040225
  #include "casmif.hpp" //ENQ DEQ
  #include <unistd.h>
#endif

#ifndef MU_STANDALONE
#include "systems.hpp" //KV20040915 for stricmp
#else
#include <strings.h>
#ifndef stricmp
    #define stricmp strcmpi
#endif
#ifndef strcmpi
#define strcmpi strcasecmp
#endif
#define MVSBatch() 1
#endif

#define UKEY_MAJOR "STRTUKEY"
#define UKEY_MINOR "ISIS_UKEY"
static unsigned char tUKÄÜ =
     "ABCDEFGHIJKLMNOPQRSTUVWXYZ"Ö
         "0123456789#$"Ö
         "abcdefghijklmnopqrstuvwxyz";


void formatTime(char * to,int l,char * format)
ä
   time_t t;
   struct tm * tmp;
   time(&t);
   tmp = localtime(&t);
   strftime(to,l-1,format,tmp);
ü

char *strrev(char *s)  //szm
ä
    if (s==NULL]]strlen(s)==0) return s;
    char c;
    int i , j;
    for(i =0, j =strlen(s)-1; i<j;i++,j--)
    ä
      c    =  sÄiÜ;
      sÄiÜ =  sÄjÜ;
      sÄjÜ = c;
    ü
    return(s);
ü


unsigned long cvb(unsigned long f , unsigned long length)
 ä
  unsigned long r = 0;
    unsigned long m = 1;
    for(int i = 0;f && i<length;i++)
    ä
     r += (f&0x0000000fL)*m;
       m *= 10;
       f = f>>4;
    ü
    return r;
ü


unsigned long cvd(unsigned long f)
ä
 unsigned long r = 0;
   for ( int i = 0;f && i<8;i++)
   ä
    r ]= ((f%10)<<(i*4));
      f = f/10;
   ü
   return r;
ü


//KV20050725 dump functions moved to isislib/isismisc.cpp
//SZM20050810 If it is CICSAPPL , there is no isismisc
//SZM20090629 If standalone  , there is no isismisc
//#if defined(ISIS_PF_MU) == 0 ]] defined(MU_STANDALONE) == 0
#if defined(CICSAPPL)   ]] defined(MU_STANDALONE)
int dump(FILE * dumpf,char * id,void * from,int l)
ä
    return (dump(dumpf,id,(char *)from,l));
ü
int dump(FILE *f,char * id,char * p,int l)
ä
    int i , o;
    fprintf(f,"%sÖnÖn",id);

    for(o = 0;o <((l/16)+1)*16;o+=16)
    ä
        fprintf(f,"%4.4lx:",o);
        for(i = o;i<o+16;i++)
        ä
            if ( i < l )
            ä
                fprintf(f,"%2.2x",pÄiÜ& 0xFF );
                if (i%4 == 3) fprintf(f," ");

            ü

            else
            ä
                if ( i%4 == 3) fprintf(f," ");
                fprintf(f," ");
            ü
        ü
        fprintf(f," ");

        for(i = o;i<o+16;i++)
        ä
            if ( i < l )
                fprintf(f,"%c",i_isprint(pÄiÜ)? pÄiÜ:'.');
            else fprintf(f," ");
        ü
        fprintf(f," ");

        // print ebcdic -> ascii  converted chars on ascii platforms,
        //        ascii -> ebcdic converted chars on ebcdic platforms
        for(i = o;i<o+16;i++)
        ä
            if ( i < l )
            ä
#if ' ' == 0x20
                char c=etoa(pÄiÜ);
#else
                char c=atoe(pÄiÜ);
#endif
                fprintf(f,"%c",i_isprint(c) ? c : '.');
            ü
        ü
        fprintf(f,"Ön");
    ü
    return l;
ü

int dump(char *f,int o,char * p,int l)
ä
    int i;

    sprintf(f,"%4.4lx:",o);
    f+=strlen(f);
    for(i = o;i<o+16;i++)
    ä
        if ( i < l )
        ä
            sprintf(f,"%2.2x",pÄiÜ& 0xFF );
            f+=strlen(f);
            if (i%4 == 3)
            ä
                sprintf(f," ");f+=strlen(f);
            ü

        ü

        else
        ä
            if ( i%4 == 3)
            ä
                sprintf(f," "); f+=strlen(f);
            ü
            sprintf(f," ");f+=strlen(f);
        ü
    ü
    sprintf(f," ");
    f+=strlen(f);
    for(i = o;i<o+16;i++)
    ä
        if ( i < l )
            sprintf(f,"%c",i_isprint(pÄiÜ)? pÄiÜ:'.');
        else sprintf(f," ");
        f+=strlen(f);
    ü
    sprintf(f," ");
    f+=strlen(f);

    // print ebcdic -> ascii  converted chars on ascii platforms,
    //        ascii -> ebcdic converted chars on ebcdic platforms
    for(i = o;i<o+16;i++)
    ä
        if ( i < l ) ä
#if ' ' == 0x20
            char c=etoa(pÄiÜ);
#else
            char c=atoe(pÄiÜ);
#endif
            sprintf(f,"%c",i_isprint(c) ? c : '.');
            f+=strlen(f);
        ü
    ü
    sprintf(f,"Ön");

    return l;
ü


long toInt(unsigned char  * p, int l)
ä
    char  tÄ4Ü;
    memset(t,'Ö00',4);
    if ( l > 4) l =l%4;
    int i;
#if defined(ISIS_PF_HOST) ]] defined(ISIS_PF_MU)
    for(i=3;l;l--,i--) tÄiÜ = pÄl-1Ü;
    return int(*(int *)t);
#else
    int ll = l;
    for(i=0;l;i++,l--) tÄiÜ = pÄl-1Ü;
    if( ll == 1) return int(*(UCHAR*)t) ;
    else if ( ll == 2) return short(*(short*)t);
    else  return long(*(long *)t);
#endif
ü

long toInt(char  * p, int l)
  ä
  return(toInt((unsigned char *)p,l));
  ü


int fromInt(char  * to,long v,unsigned int  l)
  ä
  return fromInt(to,v,int(l));
  ü

int fromInt(char  * to,long v,int l )
ä

 //assert(l<=sizeof( long)); ?????
#if defined(ISIS_PF_HOST) ]] defined(ISIS_PF_MU)
    memcpy(to,((char * )&v)+(sizeof( int)-l),l);
#else
    char * t = (char *)&v;
    for(int i = l;i;i--)toÄi-1Ü = *(t++);
#endif
    return (l>=sizeof(long));
ü

int Char2Hex(char * c)
ä
   int v = 0;
   for(int i = 2;i; i--)
   ä    v<<=4;
      if ( *c >= '0' && *c <= '9' ) v += *c-'0';
      else if ( *c >= 'A' && *c <= 'F' ) v += *c-'A'+10;
      else if ( *c >= 'a' && *c <= 'f' ) v += *c-'a'+10;
      c++;
   ü
   return v;
ü

char * Hex2Char(char c)
ä
   static char rÄ3Ü;
   memset(r,null,sizeof(r));
   int v = (c&0xf0)>>4;
   if ( v >= 0 && v <= 9 ) rÄ0Ü = char('0'+v);
   else rÄ0Ü = char('A'+v-10);
   v = (c&0x0f);
   if ( v >= 0 && v <= 9 ) rÄ1Ü = char('0'+v);
   else rÄ1Ü = char('A'+v-10);   return r;
ü

int isnull(char * s,int l)
ä
 if ( l == 0 ) l = int(strlen(s));
 for(l;l>0;l--)if ( sÄl-1Ü  ) return 0;
 return 1;
ü

int roundToInt(double f)
ä
   double w;
   if ( modf(f,&w) >= 0.5 ) return (int(f)+1);
   else return int(f);
ü


static char tsÄ30Ü;
char  * getTimeStemp()
ä

  formatTime(ts,sizeof(ts),"%Y:%m:%d %H:%M:%S");
  return ts;
ü

static char *daysÄ7Ü  =ä "Mon", "Tue", "Wen", "Thu", "Fri", "Sat", "Sun"ü;
static char *ldaysÄ7Ü =ä "Monday",
             "Tuesday",
             "Wednesday",
             "Thursday",
             "Friday",
             "Saturday",
             "Sunday" ü;
static char *monthÄ12Ü = ä "Jan", "Feb", "Mar",
             "Apr", "May", "Jun",
             "Jul", "Aug", "Sep",
             "Oct", "Nov", "Dec"ü;

int DatetoTm(tm & t, char * st)
ä
  char * term = ",:- ";
  char * c;
  char * day = strtok(st,term);

  int i = 0;
  for(i = 7;i;i--)if ( stricmp(daysÄi-1Ü,day) == 0 ) break;
  if ( i == 0 )
   for(i = 7;i;i--)if (strcmp(ldaysÄi-1Ü,day) == 0 ) break;

  t.tm_wday = i-1;

  c = strtok(0,term);
  if ( isdigit(*c) )
  ä
    t.tm_mday = atoi(c);
    c = strtok(0,term);
    for( i = 12;i;i--) if ( stricmp(monthÄi-1Ü,c) == 0 ) break ;
    t.tm_mon = i;
    i = atoi(strtok(0,term));
    t.tm_year = i>1900? i-1900 : i;
    t.tm_hour = atoi(strtok(0,term));
    t.tm_min = atoi(strtok(0,term));
    t.tm_sec = atoi(strtok(0,term));
    t.tm_yday = 0;
   ü
   else
   ä
    for( i = 12;i;i--) if ( stricmp(monthÄi-1Ü,c) == 0 ) break ;
    t.tm_mon = i;
    t.tm_mday = atoi(strtok(0,term));
    t.tm_hour = atoi(strtok(0,term));
    t.tm_min = atoi(strtok(0,term));
    t.tm_sec = atoi(strtok(0,term));
    t.tm_year = atoi(strtok(0,term));    t.tm_yday = 0;
  ü
  return 0;
ü

char * DatetoString()
ä
  static char dmvsSTRINGÄ64Ü;
  time_t now;
  time(&now);
  strcpy(dmvsSTRING,asctime(gmtime(&now)));
  strcpy(dmvsSTRING+strlen(dmvsSTRING)-1," GMT");
  return dmvsSTRING;
ü

char * DatetoString(tm t,char * st)
ä
  strcpy(st,asctime(&t));
  strcpy(st+strlen(st)-1," GMT");
  return st;ü
#endif
//#endif //ifndef ISIS_PF_MU

 static char dateInIBMÄ13Ü;

 void formatIBMTime(char * to,int l,char * format)
ä
   time_t t;
   struct tm * tmp;
   time(&t);
   tmp = localtime(&t);
   strftime(to,l-1,format,tmp);
ü

 char * DatetoIBM(char * from)
 ä
   memset(dateInIBM,0,sizeof(dateInIBM));
   char todayÄ12Ü;
   if ( from == NULL)
   ä
      from = today;
      formatIBMTime(today,sizeof(today),"%d.%m.%Y");
   ü
   int mvÄ12Ü = ä 31,28,31,30,31,30,31,31,30,31,30,31ü;
   mvsSTRING d, m, y;
   mvsSTRING date(from);
   date.parse(d,".",m,".",y);
   int id = atoi(d);
   int im = atoi(m);
   int iy = atoi(y);
   if ( id > 31 ]] im < 1 ]] im > 12 )
     return (char *)NULL;

   int leapyear ;
   if ((iy%4) ]] ((iy%100) == 0  && (iy%400))) leapyear = 0 ;
     else leapyear = 1;
   int dd = 0;
   for(int i = 0;i < (im-1);i++)dd += mvÄiÜ;
   if ( leapyear && im > 2) dd++;
   dd +=id;
   if (iy < 100) iy += 2000;
   sprintf(dateInIBM,"%d     ",iy*1000+dd);
   return (dateInIBM);
 ü

void getUniqueKEY(char * t)
ä


  char _dummy=0, stckÄ9Ü;

  mvs()->Clock(stck); //szm
  int  i, w1 , w2;
  _dummy = 0;

  w1 = *(int *)(stck-1);
  w2 = *(int *)(stck+3);
  for (i = 0;i<5;i++)
  ä
  tÄiÜ = tUKÄw1&0x1fÜ; w1 = w1>>5;
  ü
  for (i = 5;i<10;i++)
  ä
  tÄiÜ = tUKÄw2&0x1fÜ; w2 = w2>>5;
  ü
  tÄ10Ü = _dummy;

ü

void getUniqueLongKEY(char * t)
ä
  char _dummy, stckÄ9Ü;

  mvs()->Clock(stck); //szm
  int w1 = *(int *)(stck);
  int w2 = *(int *)(stck+4);
  sprintf(t,"%8.8x%8.8x",w1,w2);
  tÄ16Ü = 0;
ü


//KV20040824 still needed?
//char * StrTok(char * mvsSTRING,char * termtokens)
//ä
//  char * c = strtok(mvsSTRING,termtokens);
//  return ( c ? c :"");
//ü

int strcmpiList(const char * comp,const char *listÄÜ)
ä
   for (int i = 0;listÄiÜ;i++)
   if ( stricmp(comp,listÄiÜ) == 0)
   return 0;
   return 1;
ü

int strcmpiList(const char * comp,const char *listÄÜ,int & i)
ä
   for ( i = 0;listÄiÜ;i++)
   if ( stricmp(comp,listÄiÜ) == 0)
    return 0;
   return 1;
ü

//KV20040825 strnicmp replaced by strnicmp
#if 0
int strnicmp(const char * s1,const char * s2,int l)
ä
   for(int i = 0; i<l; i++)
   if ( tolower(s1ÄiÜ) - tolower(s2ÄiÜ) )
   return (tolower(s1ÄiÜ) - tolower(s2ÄiÜ));
   return 0;
ü
#endif

int stcpma(char * mvsSTRING ,const char * pattern)
ä
   regex_t    preg;
   size_t     nmatch = 1;
   regmatch_t pmatchÄ1Ü;
   int rc = 0;
   if ( strlen(pattern) == 0 ]] strcmp(pattern,"*") == 0)
    return 1;
   //char pattÄ16Ü;
   char pattÄ512Ü; //ZA060607 for VSAM
   char * p = patt;
   int j = strlen(pattern);
   int k = j - 1; //index of last nonzero char
	bool usepattern = false;//ToDo36320
   for(int i = 0;i<=j;i++)
   ä
   	  char c = patternÄiÜ;
      if (c == '*' ]] c == '?')
		ä
          *p++= '.';
			usepattern = true; //ToDo36320
		ü
      else if (c == '.' ]] c == '$')
      ä
      	if (i < k) //not last char
      	ä
      		*p++= 'Öxe0'; // backslash
      		*p++= c; //no special character
      	ü
      	else
      	    *p++= c; //last char, remains special
      ü
        else
        *p++ = c;
   ü
	if (usepattern)//ToDo36320
	ä
   if (regcomp(&preg,patt,REG_EXTENDED))
    return 0;
   else
   ä
    rc = NOT regexec(&preg,mvsSTRING, nmatch, pmatch, 0);
      regfree(&preg);
      return rc;
   ü
ü
	else //ToDo36320
	ä
		char * copy = strdup(mvsSTRING);
		if (strchr(copy,' '))
			* strchr(copy,' ') = 0;
		int rc = | strcmp(copy,pattern);
		free(copy);
		return (rc);//ToDo36320
	ü
ü

mvsSTRING makemvsSTRING(char * s,int l)
ä
 for(l--;l;l--)
 if ( sÄl-1Ü NEQ ' ')  break;
 sÄlÜ = null;
 return mvsSTRING(s);
ü
char * StrDup(char * o)
ä
  char * rs =(char *)0;
  if ( o == (char *)0 ) return rs;
  rs = new charÄstrlen(o)+1Ü;
  strcpy(rs,o);
  return rs;
ü

#ifndef ISIS_PF_MU
#if defined(CICSAPPL)
char bit_rotate(unsigned char from)
 ä
 static unsigned char rtabÄ256Ü =
 ä
    0x00, 0x80, 0x40, 0xc0, 0x20, 0xA0, 0x60, 0xe0,
    0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,  // 0x00 bis 0x0f
    0x08, 0x88, 0x48, 0xc8, 0x28, 0xA8, 0x68, 0xe8,
    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,  // 0x10 bis 0x1f
    0x04, 0x84, 0x44, 0xc4, 0x24, 0xA4, 0x64, 0xe4,
    0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,  // 0x20 bis 0x2f
    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xAc, 0x6c, 0xec,
    0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,  // 0x30 bis 0x3f
    0x02, 0x82, 0x42, 0xc2, 0x22, 0xA2, 0x62, 0xe2,
    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,  // 0x40 bis 0x4f
    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xAa, 0x6a, 0xea,
    0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,  // 0x50 bis 0x5f
    0x06, 0x86, 0x46, 0xc6, 0x26, 0xA6, 0x66, 0xe6,
    0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,  // 0x60 bis 0x6f
    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xAe, 0x6e, 0xee,
    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,  // 0x70 bis 0x7f
    0x01, 0x81, 0x41, 0xc1, 0x21, 0xA1, 0x61, 0xe1,
    0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,  // 0x80 bis 0x8f
    0x09, 0x89, 0x49, 0xc9, 0x29, 0xA9, 0x69, 0xe9,
    0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,  // 0x90 bis 0x9f
    0x05, 0x85, 0x45, 0xc5, 0x25, 0xA5, 0x65, 0xe5,
    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,  // 0xa0 bis 0xaf
    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xAd, 0x6d, 0xed,
    0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,  // 0xb0 bis 0xbf
    0x03, 0x83, 0x43, 0xc3, 0x23, 0xA3, 0x63, 0xe3,
    0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,  // 0xc0 bis 0xcf
    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xAb, 0x6b, 0xeb,
    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,  // 0xd0 bis 0xdf
    0x07, 0x87, 0x47, 0xc7, 0x27, 0xA7, 0x67, 0xe7,
    0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,  // 0xe0 bis 0xef
    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xAf, 0x6f, 0xef,
    0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,  // 0xf0 bis 0xff
 ü;
   return rtabÄfromÜ;
ü
#endif
#endif //ifndef ISIS_PF_MU

/*
void swab(char *source, char *target,int len) //ZA030918 Metacode needs it
ä
   int ii;
   for (ii=0; ii<len; ii=ii+2)
   ä
      targetÄiiÜ = sourceÄii+1Ü;
      targetÄii+1Ü = sourceÄiiÜ;
   ü
   if(ungerade(len))
   ä targetÄlenÜ=sourceÄlenÜ;
     targetÄlen+1Ü='Ö0'; ü
   else targetÄlenÜ = 'Ö0';
   return;
ü
*/


void swab(char *source, char *target,int len) //ZA030924 Metacode needs it
ä
   int ii;
   for (ii=0; ii<len-1; ii=ii+2)
   ä
      targetÄiiÜ = sourceÄii+1Ü;
      targetÄii+1Ü = sourceÄiiÜ;
   ü
   return;
ü

/*
unsigned int ungerade(int len)
ä
   if (len%2) return TRUE;
      else return FALSE;
ü
*/

#ifndef __TEST__
#define __TEST__ 1
#endif

char __test__ = __TEST__ ;
