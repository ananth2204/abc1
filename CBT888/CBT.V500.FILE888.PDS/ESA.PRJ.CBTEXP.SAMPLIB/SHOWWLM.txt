/* REXX */
/*----------------------------------------------------*/
/* SHOWWLM - Report WLM Infos from Policy             */
/* V22  11/2009                                       */
/*----------------------------------------------------*/
/*                                                    */
/*                                                    */
/* Create a report of WLM Definitions from            */
/* the saved PO data set                              */
/*                                                    */
/* Copyright YCOS Yves Colliard Software GmbH 2000-09 */
/* eMail: ycos§ycos.de                                */
/*                                                    */
/* WSCON Installation and Usage                       */
/* see www.ycos.de/ispfgui.htm                        */
/*                                                    */
/*                                                    */
/*----------------------------------------------------*/
/*                                                    */
/* Freeware - use at your own risk                    */
/*          - distribute but do not remove copyright  */
/*                                                    */
/*----------------------------------------------------*/
/*                                                    */
/* V22  11/2009                                       */
/*      Check Input Data exist - PO - 80              */
/*                                                    */
/* V21  07/2009                                       */
/*      New LRECL Size 32756 - not compatible|        */
/*      Correct Sysother multiple policies            */
/*      Show Sched Env. and Resources                 */
/*      Enhanced Resource Group Display               */
/*      Beispiel WLM Batch - siehe unten              */
/*                                                    */
/* V20  11/2008                                       */
/*      Support 2 parameters input                    */
/*         WLM Input and Output                       */
/*      Create member statistics                      */
/*      Put Information about Resource Group Type     */
/*        S = Service Units                           */
/*        C = number of CPUs                          */
/*        % = percent of LPAR                         */
/*                                                    */
/* V19  05/2006                                       */
/*      Create a new Member WLMCOMP for Compare       */
/*         Policies                                   */
/*      Display Changes of Policy                     */
/*      Correct Hyperlink with no text                */
/*                                                    */
/* V18  08/2005                                       */
/*      Accept one Parm - INPUT Dataset               */
/*      Show Application Environment                  */
/*      Check LRECL 4096 at least for Output          */
/*      Change Seq of Data in HTML - Class Rules      */
/*      Change showing HTML on PC                     */
/*        new Parm show_pc - Default Yes|             */
/*                                                    */
/* V17  01/2005                                       */
/*      Show Classification Group Description         */
/*      Show Workloads                                */
/*      Show Note Pad                                 */
/*      Show Options                                  */
/*      Show Release info                             */
/*      Change title                                  */
/*      Create an hyperlink to WLM Main               */
/*      Permit Override for member                    */
/*        Parm over_mem - Default YES|                */
/*      Permit Split of member                        */
/*        Parm splt_mem - Default YES|                */
/*      Support of automatic download to PC           */
/*        Attention: it uses WSCON|                   */
/*           SEE COMMENT AT THE END FOR INSTALLATION| */
/*        Attention: give directory name see OUTPC    */
/*      Support of automatic show on PC               */
/*        Attention: it uses WSCON|                   */
/*        Attention: give directory where to find     */
/*                   IEXPLORE see explore_pgm         */
/*      Comments                                      */
/* V16  01/2005                                       */
/*      Show Resource Groups                          */
/*      Split Policy Display if many in use (override)*/
/*      Delete HTML files in USS before write         */
/* V15  07/2004                                       */
/*      Create HTML files in USS Path                 */
/*                                                    */
/*----------------------------------------------------*/
address ispexec
ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"
/* V20 up to 2 parms */
inwlm=""
outtyp=""
if ARG()>0 then do
  parse upper arg inwlm outtyp .
end
/* */
/*------------------------------------------*/
/* V17 */
/* WLM Output Data Set - Override condition */
/* over_mem                                 */
over_mem="N"  /* if OUTTYP member exist, do not override - say policy */
over_mem="Y"  /* if OUTTYP member exist, override it                  */
/* */
/*------------------------------------------*/
/* V17 */
/* WLM Output Data Set - Split condition    */
/* splt_mem                                 */
splt_mem="N"  /* DO NOT split the member                              */
splt_mem="Y"  /* Automatically split the member                       */
              /* Also used for automatic download of the data         */
              /*      see OUTPC|                                      */
/* */
/*------------------------------------------*/
/* V18 */
/* WLM Output Data Set - Show HTML on PC    */
/* show_pc                                  */
show_pc ="Y"  /* Automatically Show HTML on PC                        */
              /* Also need OUTPC|                                     */
show_pc ="N"  /* DO NOT Show HTML on PC                               */
/* */
/*------------------------------------------*/
/* WLM Input Data Set                       */
/*    WLM Saves As PDS                      */
/* inwlm                                    */
/* V18 - can be given as parm               */
if inwlm="" then do
  INWLM="WLM.INPUT"
end
/* */
/*------------------------------------------*/
/* WLM Output Data Set                      */
/* outtyp                                   */
/* define with at least lrecl 32756 / 32760 */
/*                      recfm VB            */
/*               PO for best usage          */
/* outtyp=""                 -> SAY                            */
/* outtyp="aaaa.bbbb"        -> Output in Data Set with prefix */
/* outtyp="aaaa.bbbb(mmm)"   -> Output in Member with prefix   */
/* outtyp="'aaaa.bbbb(mmm)'" -> Output in Member wo prefix     */
/* outtyp                                   */
/* V20 - can be given as parm               */
if outtyp="" then do
  OUTTYP="A.B"
  OUTTYP="'USER.YCOS.DATA(WLMOUT)'"
  OUTTYP="YCOS.WLMOUT(BEISPIEL)"
end
/* */
/* */
/*------------------------------------------*/
/* WLM USS - OMVS - Output Directory        */
/* outuss                                   */
/* if blank no USS Data Set                 */
OUTUSS="/u/mvsexp/server_root/pub/"
/* */
/*---------------------------------------------*/
/* WLM PC - Output Directory                   */
/* outpc                                       */
/* if blank no Output on PC                    */
/* if given then WSCON MUST BE ACTIVE|         */
/*    PLEASE CHECK IT|                         */
/* if given then splt_mem MUST ALSO BE ACTIVE| */
/*    PLEASE CHECK IT| splt="YES"              */
OUTPC="C:ÖWLMÖ"
OUTPC=""
/* */
/* */
/* V17 */
parse source . . wlmycos .
/* V18 */
SL = 2
vers="V??"
vdat="??/????"
do forever
   SL = SL + 1
   if Left(SourceLine(SL),2) <> "/*" then leave
   if Substr(SourceLine(SL),4,1)="V" then do
      parse value SourceLine(SL) with "/*" vers vdat "*/"
      vers=strip(vers)
      vdat=strip(vdat)
      leave
   end
end
wlmycos=wlmycos vers vdat
/* */
/* v22 */
inwlm=strip(inwlm)
if listdsi(inwlm) <> 0 then do
   say "Error with dataset:" inwlm
   say sysmsglvl1
   say sysmsglvl2
   exit
end
/* */
if syslrecl<>80 then do
  say "Error dataset:" inwlm "LRECL not 80 :"syslrecl
  exit
end
/* */
if sysdsorg<>"PO" then do
   say "Error dataset:" inwlm "not a PO| DSORG="sysdsorg
  exit
end
/* */
call wlm_pol
/* */
/* Number of Sevice Class per Importance */
anz_sc.0=2
anz_sc.1=0
anz_sc.2=0
anz_sc.3=0
anz_sc.4=0
anz_sc.5=0
anz_sc.6=0
anz_sc.7=1
nam_sc.0.1=left("SYSTEM",8)
/* v13 */
pol_sc.0.1=left(" ",8)
cpu_sc.0.1="   "
imp_sc.0.1="   "
per_sc.0.1="   "
goa_sc.0.1=left(" ",17)
dur_sc.0.1=right(" ",6)
cls_sc.0.1=0
/* v16 */
rg_sc.0.1=right(" ",8)
rgmin_sc.0.1=right(" ",7) /* V20 */
rgmax_sc.0.1=right(" ",7) /* V20 */
nam_sc.0.2=left("SYSSTC",8)
/* v13 */
pol_sc.0.2=left(" ",8)
cpu_sc.0.2="   "
imp_sc.0.2="   "
per_sc.0.2="   "
goa_sc.0.2=left(" ",17)
dur_sc.0.2=right(" ",6)
cls_sc.0.2=0
/* v16 */
rg_sc.0.2=right(" ",8)
rgmin_sc.0.2=right(" ",7) /* V20 */
rgmax_sc.0.2=right(" ",7) /* V20 */
nam_sc.7.1=left("SYSOTHER",8)
/* v13 */
pol_sc.7.1=left(" ",8)
cpu_sc.7.1="   "
imp_sc.7.1="   "
per_sc.7.1="   "
goa_sc.7.1=left(" ",17)
dur_sc.7.1=right(" ",6)
cls_sc.7.1=0
/* v16 */
rg_sc.7.1=right(" ",8)
rgmin_sc.7.1=right(" ",7) /* V20 */
rgmax_sc.7.1=right(" ",7) /* V20 */
/* */
anz_out=1
anz_htm=0
cls_ht.0.1=0
/* v19 */
anz_cmp=1
/* */
/* Saved WLM Data Set */
  "LIBDEF ISPTLIB DATASET ID("inwlm")"
/* */
/* */
/* SDCTAB: Service Definition Table + coefficients */
  "TBOPEN SDCTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem SDCTAB" rc
       say "Please do not run WLM Application at the same"
       say "       time as SHOWWLM|"
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP SDCTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem SDCTAB" rc
       "TBCLOSE SDCTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP SDCTAB"                 /* first & only entry              */

  sd_desc=sddesc                  /* SD Description                  */
  sd_cpu =sdccpu                  /* SD SU CPU                       */
  sd_srb =sdcsrb                  /* SD SU SRB                       */
  sd_ioc =sdcioc                  /* SD SU IOC                       */
  sd_mso =sdcmso                  /* SD SU MSO                       */

 "TBCLOSE SDCTAB"

/* */
  out.anz_out="$$$$$$$$ WLMPOL.txt $$$$$$$$"
  anz_out=anz_out+1
/* */
  cmp.anz_cmp="$$$$$$$$ WLMCOMP.txt $$$$$$$$"
  anz_cmp=anz_cmp+1
/* */
/* SPTAB: Service Policy Table */
  "TBOPEN SPTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem SPTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP SPTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem SPTAB" rc
       "TBCLOSE SPTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP SPTAB"

  anzpol=0
  do while rc=0
     /* search & find a Service Policy */
     /* v13 */
     anzpol=anzpol+1
     /* v16 */
     spn=strip(SPNAME)
     policy.anzpol=spn     /* name of policy */
     polnum.spn=anzpol     /* number of policy */
     pol_sc.spn=0          /* number of service classes in policy */
     wlmpol.anzpol="Service Policy="SPNAME,
       "Desc="SPDESC "Updated by:"SPWHOU "at:"SPDATU SPTIMU
/*     "SPSEL="SPSEL "SPMISC="SPMISC */
     "TBSKIP SPTAB"
  end

 "TBCLOSE SPTAB"
/* */
/* */
/* */
/* v16 */
/* ATTRTAB: Resource Group Attribute Table */
  "TBOPEN ATTRTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem ATTRTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP ATTRTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem ATTRTAB" rc
       "TBCLOSE ATTRTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP ATTRTAB"                /* first                           */

  do while rc=0
     if ATSPNAM="" then do
        ATSPNAM="YYVESDEFY"       /* set an incredible default name  */
     end
     atspnam=strip(atspnam)
     atrgnam=strip(atrgnam)
     attype=strip(attype)    /* V20 */
     select
     when attype="SVC" then attype="S"
     when attype="PSP" then attype="C"
     when attype="PER" then attype="%"
     otherwise              attype="?"
     end
     if strip(atmin)="" then do
       rgmin.atrgnam.atspnam=right(strip(atmin),7)
     end
     else do
       rgmin.atrgnam.atspnam=right(strip(atmin),6)""attype
     end
     if strip(atmax)="" then do
       rgmax.atrgnam.atspnam=right(strip(atmax),7)
     end
     else do
       rgmax.atrgnam.atspnam=right(strip(atmax),6)""attype
     end
     "TBSKIP ATTRTAB"
  end

 "TBCLOSE ATTRTAB"
/* */
/* */
/* SGTAB: Service Class Goal Table */
  "TBOPEN SGTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem SGTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP SGTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem SGTAB" rc
       "TBCLOSE SGTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP SGTAB"

  do while rc=0
     per=0
     do loop=1 to 8
        if value("T"loop)="" then do   /* not disc */
           if value("V"loop)="" then do   /* not velo */
              if value("C"loop)="" then do   /* not res% */
                 if value("S"loop)="" then do   /* not a period */
                    leave
                 end
                 else do
                    per=per+1
                    goal.per="Avg",
                      value("H"loop)":"value("M"loop)":"value("S"loop)
                    imp.per=value("I"loop)
                    dur.per=value("L"loop)
                 end
              end
              else do
                 per=per+1
                 goal.per=value("C"loop)"%",
                      value("H"loop)":"value("M"loop)":"value("S"loop)
                 imp.per=value("I"loop)
                 dur.per=value("L"loop)
              end
           end
           else do
              per=per+1
              goal.per="Velocity "value("V"loop)
              imp.per=value("I"loop)
              dur.per=value("L"loop)
           end
        end
        else do
           per=per+1
           goal.per="Discretionary"
           imp.per=" "
           dur.per=" "
        end
     end
     do loop=1 to per
        if imp.loop=" " then
           importance=6
        else
           importance=imp.loop
        anz_sc.importance=anz_sc.importance+1 /* # of sc in Imp */
        cnt=anz_sc.importance
        nam_sc.importance.cnt=left(sgscnam,8)
        imp_sc.importance.cnt=right(imp.loop,2)" "
        if per>1 then
           per_sc.importance.cnt=format(loop,2,0)" "
        else
           per_sc.importance.cnt="   "
        goa_sc.importance.cnt=left(goal.loop,16)
        dur_sc.importance.cnt=right(dur.loop,7)
        /* v13 */
        if sgcpucrt = "YES" then do
          cpu_sc.importance.cnt=left(sgcpucrt,3)
        end
        else do
          cpu_sc.importance.cnt="   "
        end
        pol_sc.importance.cnt=left(sgspnam,8)
        /* v16 */
        sgsp=strip(sgspnam)
        if sgsp<>"" then do
           pol_num=polnum.sgsp
           pol_nam=policy.pol_num
           pol_sc.pol_nam=pol_sc.pol_nam+1
           polx=pol_sc.pol_nam
           pol_over_sc.pol_nam.polx=strip(sgscnam)
           /* Comment Start
           say "Pol" sgsp pol_num pol_nam sgscnam pol_sc.pol_nam
              Comment End */
        end
        cls_sc.importance.cnt=0  /* # of class Rules for this SC */
        /* v16 */
        if sgrgnam = "" then do
          rg_sc.importance.cnt="        "
          rgmin_sc.importance.cnt="       " /* V20 */
          rgmax_sc.importance.cnt="       " /* V20 */
        end
        else do
          rg_sc.importance.cnt=left(sgrgnam,8)
          pol=strip(sgspnam)
          if pol="" then do
             pol="YYVESDEFY"       /* set an incredible default name */
          end
          rg=strip(sgrgnam)
          if rgmin.rg.pol=rgmin.rg"."pol then do
             pol="YYVESDEFY"       /* set an incredible default name */
          end
          rgmin_sc.importance.cnt=rgmin.rg.pol
          rgmax_sc.importance.cnt=rgmax.rg.pol
        end
     end
     "TBSKIP SGTAB"
  end

 "TBCLOSE SGTAB"
/* */
/* SSTAB: Subsystem, Default Service Class Table */
  "TBOPEN SSTTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem SSTTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP SSTTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem SSTTAB" rc
       "TBCLOSE SSTTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP SSTTAB"

  do while rc=0
     fnd="N"
     /* search & find a Default Service Class */
     do importance=1 to 6
        do cnt=1 to anz_sc.importance
          if nam_sc.importance.cnt=SSTSC then do
             cls_sc.importance.cnt=cls_sc.importance.cnt+1
             num=cls_sc.importance.cnt  /* # class rules / SC */
             cls_sc.importance.cnt.num="Def "SSTNAME
             cls_ht.importance.cnt.num="Def "SSTNAME
             /* V14 Default Report Class */
             cls_rc.importance.cnt.num=SSTRC
             cls_rc.SSTNAME=SSTRC /* default RC for this Subsys */
             /* V13 stor crit and trans/reg */
             cls_cr.importance.cnt.num="   "
             cls_tr.importance.cnt.num="   "
             fnd="Y"
          end
        end
     end
     /* Default for STC->SYSSTC, all others->SYSOTHER */
     if fnd="N" then do
        if SSTNAME="STC" then do
           importance=0
           cnt=2
        end
        else do
           importance=7
           cnt=1
        end
        cls_sc.importance.cnt=cls_sc.importance.cnt+1
        num=cls_sc.importance.cnt
        cls_sc.importance.cnt.num="Def "SSTNAME
        cls_ht.importance.cnt.num="Def "SSTNAME
        /* V14 Default Report Class */
        cls_rc.SSTNAME=SSTRC /* default RC for this Subsys */
        /* V13 stor crit and trans/reg */
        cls_cr.importance.cnt.num="   "
        cls_tr.importance.cnt.num="   "
     end
     "TBSKIP SSTTAB"
  end

 "TBCLOSE SSTTAB"
/* */
/* */
/* V17 */
/* GRTAB: Classification Groups Description Table */
  "TBOPEN GRTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem GRTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP GRTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem GRTAB" rc
       "TBCLOSE GRTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP GRTAB"


  do while rc=0
     grn=strip(grname)
     grt=strip(grtype)
     gr.grn.grt="<BR>"strip(grdesc)"<BR>"
     gr.grn.grt=gr.grn.grt'<FONT FACE="Courier" SIZE=3 COLOR="#000000">'
     gr.grn.grt=gr.grn.grt""strip(grwhou)" - "strip(grdatu)'</FONT>'
     "TBSKIP GRTAB"
  end

 "TBCLOSE GRTAB"
/* */
/* */
/* GMTAB: Class Groups Table */
  "TBOPEN GMTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem GMTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP GMTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem GMTAB" rc
       "TBCLOSE GMTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP GMTAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Classification Groups","WLMGROUP")
  anz_htm=anz_htm+1
  htm.anz_htm=htab(500)

  do while rc=0
     /* search & find a Service Class */
     if symbol("gm."gmgroup)="VAR" then do
        gm.gmgroup=gm.gmgroup";"strip(gmname)
        gmdesc.gmgroup=gmdesc.gmgroup";"strip(gmdesc)
     end
     else do
        gm.gmgroup=strip(gmname)
        gmdesc.gmgroup=strip(gmdesc)
        anz_htm=anz_htm+1
        htm.anz_htm=hsp1(gmgroup "-" gmg.gmgroup,"N")
     end
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(20,strip(gmname),"A"),
                 hsp(80,strip(gmdesc),"E")
     "TBSKIP GMTAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE GMTAB"
/* */

/* */
/* */
/* CRTAB: Class Rules Table */
  "TBOPEN CRTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem CRTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP CRTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem CRTAB" rc
       "TBCLOSE CRTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP CRTAB"

  do while rc=0
     /* search & find a Service Class */
     do importance=0 to 6
        do cnt=1 to anz_sc.importance
          if CRSC="" then do
             if cls_sc.importance.cnt.1="Def "CRSST then do
                call work_sc
             end
          end
          else do
             if nam_sc.importance.cnt=CRSC then do
                call work_sc
             end
          end
        end
     end
     "TBSKIP CRTAB"
  end

 "TBCLOSE CRTAB"
/* */
/* V17 */
/* Correct the Classification Groups */
 do j=1 to anz_htm
    if pos(" - GMG.",htm.j)>0 then do
       parse var htm.j left_part " - GMG." gr_name "<" right_part
       grt=GMG.gr_name
       htm.j = left_part "-" GMG.gr_name""gr.gr_name.grt"<"right_part
    end
 end

/* */
/* */
/* SCTAB: Service Class Table */
  "TBOPEN SCTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem SCTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP SCTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem SCTAB" rc
       "TBCLOSE SCTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP SCTAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Service Classes","WLMCLASS")
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=htab(750)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp4("Service Classes")
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=hsp(10,"SYSTEM","A","N"),
              hsp(65,"WLM intern Service Class"),
              hsp(10,"none"),
              hsp(15,"none","E")
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=hsp(10,"SYSSTC","A","N"),
              hsp(65,"WLM intern Service Class"),
              hsp(10,"none"),
              hsp(15,"none","E")
  do while rc=0
     /* save Service Class Workload Infos */
     scwkl.SCNAME=SCWL
     scdes.SCNAME=SCDESC
     anz_htm=anz_htm+1
     /* v13 */
     htm.anz_htm=hsp(10,strip(SCNAME),"A","N"),
                 hsp(65,strip(SCDESC)),
                 hsp(10,strip(SCWHOU)),
                 hsp(15,strip(SCDATU),"E")
     "TBSKIP SCTAB"
  end
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=hsp(10,"SYSOTHER","A","N"),
              hsp(65,"WLM intern Service Class"),
              hsp(10,"none"),
              hsp(15,"none","E")
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE SCTAB"
/* */

/* */
/* */
/* RCTAB: Report Class Table */
  "TBOPEN RCTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem RCTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP RCTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem RCTAB" rc
       "TBCLOSE RCTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP RCTAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Report Classes","WLMREPCL")
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=htab(750)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp4("Report Classes")
  do while rc=0
     /* save Report Class Workload Infos */
     anz_htm=anz_htm+1
     /* v13 */
     htm.anz_htm=hsp(10,strip(RCNAME),"A","N"),
                 hsp(65,strip(RCDESC)),
                 hsp(10,strip(SCWHOU)),
                 hsp(15,strip(SCDATU),"E")
     "TBSKIP RCTAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE RCTAB"
/* */

/* */
/* */
/* v16 */
/* RGTAB: Resource Group Table */
  "TBOPEN RGTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem RGTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP RGTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem RGTAB" rc
       "TBCLOSE RGTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP RGTAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Resource Groups","WLMRESGR")
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=htab(750)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp6("Resource Groups - with Min/Max")
  do while rc=0
     /* save Resource Group Infos */
     pol="YYVESDEFY"       /* set an incredible default name */
     rgn=strip(RGNAME)
     min=rgmin.rgn.pol
     if rgmin.rgn.pol="RGMIN."rng"."pol then do
       min="?"
     end
     max=rgmax.rgn.pol
     if rgmax.rgn.pol="RGMAX."rng"."pol then do
       max="?"
     end
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(10,strip(RGNAME),"A","N"),
                 hsp(45,strip(RGDESC)),
                 hsp(10,min),
                 hsp(10,max),
                 hsp(10,strip(RGWHOU)),
                 hsp(15,strip(RGDATU),"E")
     "TBSKIP RGTAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE RGTAB"
/* */
/* */
/* */
/* v17 */
/* WLTAB: Workload Table */
  "TBOPEN WLTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem WLTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP WLTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem WLTAB" rc
       "TBCLOSE WLTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP WLTAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Workloads","WLMWORKL")
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=htab(750)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp4("Workloads")
  do while rc=0
     /* save Workloads Infos */
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(10,strip(WLNAME),"A","N"),
                 hsp(65,strip(WLDESC)),
                 hsp(10,strip(WLWHOU)),
                 hsp(15,strip(WLDATU),"E")
     "TBSKIP WLTAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm=hsp(10,"SYSTEM","A","N"),
              hsp(65,"WLM intern Workload"),
              hsp(10,""),
              hsp(15,"","E")
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE WLTAB"
/* */
/* */
/* v17 */
/* PADTAB: Notepad Table */
  "TBOPEN PADTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem PADTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP PADTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem PADTAB" rc
       "TBCLOSE PADTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP PADTAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Note Pad","WLMNOTEP")
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=htab(800)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp2("Note Pad")
  do while rc=0
     /* save Note Pad Infos */
     anz_htm=anz_htm+1
     PADTXT=saveblank(PADTXT)
     htm.anz_htm=hsp(5,right("000"strip(PADNUM),3),"A","N"),
                 hsp(95,PADTXT,"E")
     "TBSKIP PADTAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE PADTAB"
/* */
/* v18 */
/* AETAB: Application Environmen Table */
  "TBOPEN AETAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem AETAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP AETAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem AETAB" rc
       "TBCLOSE AETAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP AETAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Application Environment","WLMAE")
  anz_htm=anz_htm+1
  /* v13 */
  htm.anz_htm=htab(800)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp6("Application Environment")
  anz_htm=anz_htm+1
  htm.anz_htm=hsp(25,"Name","A","N"),
              hsp(25,"Description"),
              hsp(5,"Subs"),
              hsp(10,"Procedure"),
              hsp(25,"Start Parameter"),
              hsp(10,"Limit","E")
  do while rc=0
     /* save AE Infos */
     anz_htm=anz_htm+1
     aeso=left(c2x(aeso),1)
     select
     when aeso=0 then do
       aeso="No"
     end
     when aeso=4 then do
       aeso="1/Plex"
     end
     when aeso=8 then do
       aeso="1/Syst"
     end
     otherwise
       aeso="Unkn"
     end
     htm.anz_htm=hsp(25,strip(AEENV),"A","N"),
                 hsp(25,strip(AEDES)),
                 hsp(5,strip(AESBT)),
                 hsp(10,strip(AEPROC)),
                 hsp(25,strip(AESP)),
                 hsp(10,AESO,"E")
     "TBSKIP AETAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE AETAB"
/* */

/* */
/* v21 */
/* RTAB: Resource Table */
  "TBOPEN RTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem RTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP RTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem RTAB" rc
       "TBCLOSE RTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP RTAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Resource","WLMRES")
  anz_htm=anz_htm+1
  /* */
  htm.anz_htm=htab(800)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp2("Resource")
  anz_htm=anz_htm+1
  htm.anz_htm=hsp(25,"Name","A","N"),
              hsp(75,"Description","E")
  anz_res=0
  do while rc=0
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(25,strip(RNAME),"A","N"),
                 hsp(75,strip(RDES),"E")
     anz_res=anz_res+1
     rname.anz_res=rdes
     rname.rname=anz_res
     "TBSKIP RTAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE RTAB"
/* */
/* v21 */
/* SETAB: Scheduling Environment Table */
  "TBOPEN SETAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem SETAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP SETAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem SETAB" rc
       "TBCLOSE SETAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP SETAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Scheduling Environment","WLMSE")
  anz_htm=anz_htm+1
  /* */
  htm.anz_htm=htab(800)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp2("Scheduling Environment")
  anz_htm=anz_htm+1
  htm.anz_htm=hsp(25,"Name","A","N"),
              hsp(75,"Description","E")
  anz_se=0
  do while rc=0
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(25,strip(SENAME),"A","N"),
                 hsp(75,strip(SEDES),"E")
     anz_se=anz_se+1
     sename.anz_se=sedes
     sename.sename=anz_se
     "TBSKIP SETAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE SETAB"
/* */
/* */
/* v21 */
/* SRTAB: Scheduling Environment - Resource Table */
  "TBOPEN SRTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem SRTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP SRTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem SRTAB" rc
       "TBCLOSE SRTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP SRTAB"

  anz_htm=anz_htm+1
  htm.anz_htm=htit("Resource - Sched. Env.","WLMRSE")
  anz_htm=anz_htm+1
  /* */
  htm.anz_htm=htab(800)
  anz_htm=anz_htm+1
  htm.anz_htm=hsp4("Resource - Sched. Env.")
  anz_htm=anz_htm+1
  htm.anz_htm=hsp(25,"Name","A","N"),
              hsp(10,"State"),
              hsp(25,"Sched Env."),
              hsp(40,"Description","E")
  do while rc=0
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(25,href(strip(SRNAME),"WLMRES"),"A"),
                 hsp(10,strip(SRSTATE)),
                 hsp(25,href(strip(SRSENAM),"WLMSE")),
                 hsp(40,strip(SRDES),"E")
     "TBSKIP SRTAB"
  end
  anz_htm=anz_htm+1
  htm.anz_htm="</TABLE>"

 "TBCLOSE SRTAB"
/* */
/* ------------------------------------------------- */
/* */
/* Output the data */
/* */
anz_htm=anz_htm+1
htm.anz_htm=htit("WLM Policy","WLMMAIN")
/* v13 */
anz_htm=anz_htm+1
htm.anz_htm='<FONT FACE="Courier" SIZE=3 COLOR="#000000"><P>'
/* v19 */
if userid()<>"YVES" then do
  poln=fillhtm(poln,8)
  sdfn=fillhtm(sdfn,8)
  polu=fillhtm(polu,7)
  sdfu=fillhtm(sdfu,7)
  anz_htm=anz_htm+1
  htm.anz_htm="<BR>"fillhtm("Service Policy",18)"="poln,
         "activated:"polt "By:"polu" From:"pols,
              "<BR>Service Definition="sdfn" installed:"sdft,
         "By:"sdfu" From:"sdfs"<BR>"
end
/* v13 */
/* v16 */
/* Loop over all Policies */
do l1=1 to anzpol
  anz_htm=anz_htm+1
  htm.anz_htm="<P>"wlmpol.l1"</P>"
  if out.anz_out<>"OUT."anz_out then do /* v21 */
    anz_out=anz_out+1  /* v21 */
  end
  out.anz_out=wlmpol.l1
  anz_out=anz_out+1
/* */
anz_htm=anz_htm+1
/* v16 */
htm.anz_htm=htab(1250)
/* */
/* */
anz_htm=anz_htm+1
/* v16 */
/* v18 */
htm.anz_htm=hspb(4,"Workload","A"),
      hspb(4,"Policy"),
      hspb(4,"SerClass"),
      hspb(2,"CPU"),
      hspb(4,"RepClass"),
      hspb(2,"Imp"),
      hspb(2,"Per"),
      hspb(16,"Goal"),
      hspb(6,"Durat."),
      hspb(42,"Classification Rules/Groups"),
      hspb(2,"STO"),
      hspb(2,"Reg"),
      hspb(4,"ResGroup"),
      hspb(3,"Min"),
      hspb(3,"Max","E")
/* */
out.anz_out="Workload",
      "Policy  ",
      "SerClass",
      "CPU",
      "RepClass",
      "Imp",
      "Per",
      left("Goal",16),
  " Durat. STO Reg ResGroup     Min     Max Classification Rules/Groups"
    /* v16 */
/* v21 */
if cmp.anz_cmp<>"CMP."anz_cmp then do
  anz_cmp=anz_cmp+1
end
/* v21 */
cmp.anz_cmp=":: Policy  "wlmpol.l1
anz_cmp=anz_cmp+1
/* v19 */
cmp.anz_cmp="## Workload",
      "Policy  ",
      "SerClass",
      "CPU",
      "RepClass",
      "Imp",
      "Per",
      left("Goal",16),
  " Durat. STO Reg ResGroup     Min     Max Classification Rules/Groups"
    /* v19 */

scwkl.system="SYSTEM"
do importance=0 to 7
   do cnt=1 to anz_sc.importance
     sc=strip(nam_sc.importance.cnt)
     if sc="SYSTEM" then
        sc="SYSTEM"
     if sc="SYSSTC" then
        sc="SYSTEM"
     if sc="SYSOTHER" then
        sc="SYSTEM"
     /* v16 */
     pol_rpt=strip(pol_sc.importance.cnt)
     keep_sc="Y"
     if pol_rpt=policy.l1 then do  /* same policy */
        nop
     end
     else do
        if pol_rpt="" then do /* no policy - no override */
           pol_cu=policy.l1
           do l2=1 to pol_sc.pol_cu
              if pol_over_sc.pol_cu.l2=nam_sc.importance.cnt then do
                 keep_sc="N"
                 leave l2
              end
           end
        end
        else do
           keep_sc="N"
        end
     end
     if keep_sc="Y" then do  /* only if info has to be kept */
     /* V13 */
     out1=left(scwkl.sc,8),
         pol_sc.importance.cnt,
         nam_sc.importance.cnt,
         cpu_sc.importance.cnt
     /* v19 */
     kout1 = out1
     out2=imp_sc.importance.cnt,
         per_sc.importance.cnt,
         goa_sc.importance.cnt,
         dur_sc.importance.cnt
     /* v19 */
     kout2 = out2
     /* v16 */
     out3=rg_sc.importance.cnt,
         rgmin_sc.importance.cnt,
         rgmax_sc.importance.cnt
     /* v19 */
     kout3 = out3
     /* v16 */
     if rg_sc.importance.cnt="" then do
        rgh=""
        rgmin=""
        rgmax=""
     end
     else do
        rgh=href(rg_sc.importance.cnt,"WLMRESGR")
        rgmin=rgmin_sc.importance.cnt
        rgmax=rgmax_sc.importance.cnt
     end
     hcl_sc=""
     hcl_rc=""
     hcl_cr=""
     hcl_tr=""
     if cls_sc.importance.cnt=0 then do
        anz_out=anz_out+1
        /* v16 */
        out.anz_out=out1 left("",8) out2 left("",7),
              out3 "No Class Rules"
        /* v19 */
        anz_cmp=anz_cmp+1
        cmp.anz_cmp="01" out.anz_out
        hcl_sc="No Class Rules"
     end
     else do num=1 to cls_sc.importance.cnt
        anz_out=anz_out+1
        if cls_rc.importance.cnt.num="CLS_RC."importance"."cnt"."num,
          then do
           cls_rc.importance.cnt.num=""
           cls_rht=""
        end
        else do
           cls_rht=href(cls_rc.importance.cnt.num,"WLMREPCL")
        end
        out.anz_out=out1 left(cls_rc.importance.cnt.num,8) out2,
                    cls_cr.importance.cnt.num,
                    cls_tr.importance.cnt.num,
                    out3,
                    cls_sc.importance.cnt.num
        /* v19 */
        anz_cmp=anz_cmp+1
        cmp.anz_cmp=right("0"strip(num),2),
                   kout1 left(cls_rc.importance.cnt.num,8) kout2,
                    cls_cr.importance.cnt.num,
                    cls_tr.importance.cnt.num,
                   kout3,
                    cls_sc.importance.cnt.num
        /* last entry */
        if num=cls_sc.importance.cnt then do
           hcl_sc=hcl_sc""cls_ht.importance.cnt.num
           hcl_rc=hcl_rc""cls_rht
           hcl_cr=hcl_cr""cls_cr.importance.cnt.num
           hcl_tr=hcl_tr""cls_tr.importance.cnt.num
        end
        else do
           hcl_sc=hcl_sc""cls_ht.importance.cnt.num"<BR>"
           hcl_rc=hcl_rc""cls_rht"<BR>"
           hcl_cr=hcl_cr""cls_cr.importance.cnt.num"<BR>"
           hcl_tr=hcl_tr""cls_tr.importance.cnt.num"<BR>"
        end
        out1=left(" ",30)
        out2=left(" ",32)
        /* v16 */
        out3=left(" ",24)
     end
     /* v16 */
     anz_htm=anz_htm+1
     /* V17 */
     htm.anz_htm=hsp(4,href(scwkl.sc,"WLMWORKL"),"A")
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(4,pol_sc.importance.cnt)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(4,href(nam_sc.importance.cnt,"WLMCLASS"))
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(2,cpu_sc.importance.cnt)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(4,hcl_rc)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(2,imp_sc.importance.cnt)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(2,per_sc.importance.cnt)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(16,goa_sc.importance.cnt)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(6,dur_sc.importance.cnt)
/* V18 */
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(42,hcl_sc)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(2,hcl_cr)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(2,hcl_tr)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(4,rgh)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(3,rgmin)
     anz_htm=anz_htm+1
     htm.anz_htm=hsp(3,rgmax,"E")
   end /* only if info has to be kept - if keep_sc="Y" */
   end /* do cnt=1 to anz_sc.importance */
end
anz_htm=anz_htm+1
htm.anz_htm="</TABLE>"
/* */
end  /* end of DO L1 Policy */
/* END of Loop over all Policies */
/* */
anz_htm=anz_htm+1
htm.anz_htm='<BR><FONT FACE="Courier" SIZE=3 COLOR="#000000">'
anz_htm=anz_htm+1
htm.anz_htm="<P>Service Coefficients - CPU="strip(sd_cpu),
"SRB="strip(sd_srb) "IOC="strip(sd_ioc),
"MSO="strip(sd_mso)"</P><BR>"
/* */
/* */
/* v17 */
/* OPTTAB: Option Table */
  /* */
  opt1="I/O priority management"
  opt2="Dynamic alias management"
  opt3="Unknown"
  opt4="Unknown"
  opt5="Unknown"
  /* */
  "TBOPEN OPTTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem OPTTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBTOP OPTTAB"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBTOP Problem OPTTAB" rc
       "TBCLOSE OPTTAB"
       exit
    End                           /* 20 - Severe error               */

  "TBSKIP OPTTAB"

  if rc=0 then do
     /* save Option Infos */
     if left(option1,1)="Y" then do
        anz_htm=anz_htm+1
        htm.anz_htm="<P>"opt1" = YES</P>"
     end
     else do
        if left(option1,1)="N" then do
           anz_htm=anz_htm+1
           htm.anz_htm="<P>"opt1" = NO</P>"
        end
     end
     if left(option2,1)="Y" then do
        anz_htm=anz_htm+1
        htm.anz_htm="<P>"opt2" = YES</P>"
     end
     else do
        if left(option2,1)="N" then do
           anz_htm=anz_htm+1
           htm.anz_htm="<P>"opt2" = NO</P>"
        end
     end
     if left(option3,1)="Y" then do
        anz_htm=anz_htm+1
        htm.anz_htm="<P>"opt3" = YES</P>"
     end
     else do
        if left(option3,1)="N" then do
           anz_htm=anz_htm+1
           htm.anz_htm="<P>"opt3" = NO</P>"
        end
     end
     if left(option4,1)="Y" then do
        anz_htm=anz_htm+1
        htm.anz_htm="<P>"opt4" = YES</P>"
     end
     else do
        if left(option4,1)="N" then do
           anz_htm=anz_htm+1
           htm.anz_htm="<P>"opt4" = NO</P>"
        end
     end
     if left(option5,1)="Y" then do
        anz_htm=anz_htm+1
        htm.anz_htm="<P>"opt5" = YES</P>"
     end
     else do
        if left(option5,1)="N" then do
           anz_htm=anz_htm+1
           htm.anz_htm="<P>"opt5" = NO</P>"
        end
     end
  end

 "TBCLOSE OPTTAB"
/* */
/* */
/* v17 */
/* RELTAB: Release Table */
  /* */
  "TBOPEN RELTAB NOWRITE SHARE"
  If rc <> 0 Then               /* Return codes                     */
    Do                          /*  8 - Table does not exist        */
       say "TBOPEN Problem RELTAB" rc
       exit
    End                         /* 12 - Table in use; enq failed    */
                                /* 16 - Input library not allocated */
                                /* 20 - Severe error                */


  "TBQUERY RELTAB NAMES(nnam)"
  If rc <> 0 Then                 /* Return codes                    */
    Do                            /* 12 - Table is not open          */
       say "TBQUERY Problem RELTAB" rc
       "TBCLOSE RELTAB"
       exit
    End                           /* 20 - Severe error               */

  parse var nnam "(" nnam ")"
  anz_htm=anz_htm+1
  htm.anz_htm="<P>"
  sep=""
  do until nnam=""
    parse var nnam n1 nnam
    htm.anz_htm=htm.anz_htm""sep""strip(n1)
    sep=" -&nbsp;"
  end
  htm.anz_htm=htm.anz_htm"</P></FONT>"

 "TBCLOSE RELTAB"
/* */

if outtyp<>"" then
   call check_ds
if outtyp="" then do i=1 to anz_out
   say out.i
end

  say "End of YCOS Procedure -" wlmycos

  "LIBDEF ISPTLIB"

exit

/* */
/* */
/* */
/* */
work_sc:
 cls_sc.importance.cnt=cls_sc.importance.cnt+1
 num=cls_sc.importance.cnt
 addit=""
 if CRQTPOS<>"" then do
    addit="("strip(CRQTPOS)")"
 end
 if CRGEN=1 then do
    cls_sc.importance.cnt.num=CRSST CRQT"="CRQTNAM""addit
    if right(strip(CRQT),1)="G" then do
       cls_ht.importance.cnt.num=CRSST,
          CRQT"="href(CRQTNAM""addit,"WLMGROUP")
    end
    else do
       cls_ht.importance.cnt.num=CRSST CRQT"="CRQTNAM""addit
    end
    levi1=importance
    levc1=cnt
    levn1=num
 end
 else do
    cls_sc.importance.cnt.num= ,
    cls_sc.levi1.levc1.levn1 "and" ,
    CRQT"="CRQTNAM""addit
    if right(strip(CRQT),1)="G" then do
       cls_ht.importance.cnt.num= ,
       cls_ht.levi1.levc1.levn1 "and" ,
       CRQT"="href(CRQTNAM""addit,"WLMGROUP")
    end
    else do
       cls_ht.importance.cnt.num= ,
       cls_ht.levi1.levc1.levn1 "and" ,
       CRSST CRQT"="CRQTNAM""addit
    end
 end
 if right(strip(CRQT),1)="G" then do
    gmg.CRQTNAM=CRQT
    cls_sc.importance.cnt.num= ,
    cls_sc.importance.cnt.num "G=("gm.CRQTNAM")"
/*   for future use: desc "GD=("gmdesc.CRQTNAM")" */
 end
 /* V12 report Class */
 /* V14 Default Report Class */
 if crrc="" then do
    thesc=nam_sc.importance.cnt
    thesc=crsst
    cls_rc.importance.cnt.num=cls_rc.thesc
 end
 else do
    cls_rc.importance.cnt.num=crrc
 end
 /* V13 stor crit and trans/reg */
 if crstcrt = "YES" then do
   cls_cr.importance.cnt.num=left(crstcrt,3)
 end
 else do
   cls_cr.importance.cnt.num="   "
 end
 if crmrttg = "REGION" then do
   cls_tr.importance.cnt.num=left(crmrttg,3)
 end
 else do
   cls_tr.importance.cnt.num="   "
 end
 return
/* */
/* */
/* */
/* */
check_ds:
 outtyp=strip(outtyp)
 if listdsi(outtyp) <> 0 then do
    say "Error with dataset:" outtyp
    say sysmsglvl1
    say sysmsglvl2
    outtyp=""
    return
 end
 /* V18 */ /* v21 */
 if syslrecl<32756 then do
   say "Error dataset:" outtyp "LRECL too small="syslrecl,
     "- 32756 needed"
   outtyp=""
   return
 end
  /* */
 if pos("(",outtyp)>0 then do
    if sysdsorg<>"PO" then do
       say "Error dataset:" outtyp "not a PO| DSORG="sysdsorg
       outtyp=""
       return
    end
    /* V17 */
    if over_mem="N" then do
      err1 = SYSDSN(outtyp)
      if err1 <> "MEMBER NOT FOUND" then do
         if err1="OK" then
            say "Member already exists|"
         else
            say "Error:" err1
         outtyp=""
         return
      end
    end
 end
 else
    if sysdsorg<>"PS" then do
       say "Error dataset:" outtyp "not a PS| DSORG="sysdsorg
       outtyp=""
       return
    end
 xx=MSG("OFF")
 address tso "free fi(YWLM)"
 xx=MSG(xx)
 address tso "alloc fi(YWLM) da("outtyp") SHR"
 if rc>0 then do
    say "Error Alloc FI(YWLM) DA("outtyp") SHR"
    outtyp=""
    return
 end
 address mvs "execio "anz_out" diskw ywlm (stem out."
 address mvs "execio "anz_cmp" diskw ywlm (stem cmp."
 address mvs "execio "anz_htm" diskw ywlm (stem htm. finis"
/* v20 create stats for member */
 if sysdsorg="PO" then do
   mcds=left(outtyp,pos("(",outtyp)-1)
   if left(mcds,1)="'" then do
     mcds=mcds"'"
   end
   parse var outtyp "(" mcmem ")"
   mcrec=anz_out+anz_cmp+anz_htm
   call cre_stats
/* */
/* v17 if split member wanted */
 if sysdsorg="PO" & splt_mem="Y" then do
    call mem_split
 end
/* */
 address tso "free fi(YWLM)"
/* */
/* v15 if outuss not blank - create uss html */
 if outuss<>"" then do
    call create_uss
 end
return
/* */
/* v20 create stats    */
cre_stats:
  "LMINIT"   "DATAID(MCLMID)",
             "DATASET(&MCDS)"
  "LMMSTATS" "DATAID(&MCLMID)",
             "MEMBER(&MCMEM)",
             "USER("userid()")",
             "INITSIZE(&mcrec)",
             "CURSIZE(&mcrec)",
             "CREATED("date("O")")",
             "MODDATE("date("O")")",
             "MODTIME("left(time(),5)")"
  "LMFREE"   "DATAID(&MCLMID)"
return
/* */
/* v17 split member    */
mem_split:
xx=MSG("OFF")
address tso "free fi(YWLMS)"
xx=MSG(xx)
dsn=left(outtyp,pos("(",outtyp))
if left(outtyp,1)="'" then do
  nopref="'"
end
else do
  nopref=""
end
/* V20 */
mcrec=0
address mvs "execio 1 diskr ywlm (stem inp."
op_out="N"
do while rc=0
  if left(inp.1,8)="$$$$$$$$" then do
    if op_out="Y" then do
      address mvs "execio 0 diskw ywlms (finis"
      xx=MSG("OFF")
      address tso "free fi(YWLMS)"
      xx=MSG(xx)
      /* V20 */
      parse var memb "(" mcmem ")"
      call cre_stats
      if OUTPC<>"" then do
        call xfer_file
      end
    end
    /* V20 */
    mcrec=0
    parse var inp.1 "$$$$$$$$" memb "." suff "$"
    memb=dsn""strip(memb)")"nopref
    op_out="Y"
    address tso "alloc fi(YWLMS) da("memb") SHR"
    if rc>0 then do
       say "Error Alloc FI(YWLMS) DA("memb") SHR"
       return
    end
  end
  else do
    /* V20 */
    mcrec=mcrec+1
    address mvs "execio 1 diskw ywlms (stem inp."
  end
  address mvs "execio 1 diskr ywlm (stem inp."
end
if op_out="Y" then do
  address mvs "execio 0 diskw ywlms (finis"
  xx=MSG("OFF")
  address tso "free fi(YWLMS)"
  xx=MSG(xx)
  /* V20 */
  parse var memb "(" mcmem ")"
  call cre_stats
  if OUTPC<>"" then do
    call xfer_file
  end
end
address mvs "execio 0 diskw ywlm (finis"
/* show automaticaly output on PC */
if OUTPC<>"" & show_pc="Y" then do
  call show_file
end
return
/* */
/* v17 show file using WSCON| */
show_file:
/* REXX */
/* v18 change show tech */
www='CMD /C "'strip(Outpc)'WLMMAIN.HTM"'
"SELECT WSCMDV(WWW) INVIS"
return
/* */
/* v17 transfer files using WSCON| */
xfer_file:
parse var memb "(" cm ")"
wsname=strip(OUTPC)""strip(cm)"."strip(suff)
"VPUT (memb wsname)"
"FILEXFER HOST(memb) WS(wsname) TO(WS) TEXT"
if rc<>0 then do
  say "Error during file transfer" memb "to" wsname". Error" rc
end
return
/* */
/* v15 create uss html */
create_uss:
anz_uss=0
do i=1 to anz_htm
  if left(htm.i,8)="$$$$$$$$" then do
    if anz_uss>0 then do
      call write_uss
    end
    parse var htm.i "$$$$$$$$" usfile "$$$$$$$$"
    usfile=outuss""strip(usfile)
    anz_uss=0
  end
  else do
    anz_uss=anz_uss+1
    uss.anz_uss=htm.i
 end
end
if anz_uss>0 then do
  call write_uss
end
return
/* */
/* v15 write uss html */
write_uss:
xx=MSG("OFF")
address tso "free fi(YUSSWLM)"
xx=MSG("ON")
/* v16 delete first */
address tso "ALLOC FI(YUSSWLM) PATH('"usfile"')",
   "PATHOPTS(OWRONLY,OCREAT)",
   "PATHDISP(DELETE,DELETE)",
   "PATHMODE(SIRWXU)",
   "FILEDATA(TEXT) LRECL(4096)"
 if rc>0 then do
    say "Error Delete FI(YUSSWLM) PATH('"usfile"')"
    return
 end
xx=MSG("OFF")
address tso "free fi(YUSSWLM)"
xx=MSG("ON")
address tso "ALLOC FI(YUSSWLM) PATH('"usfile"')",
   "PATHOPTS(OWRONLY,OCREAT)",
   "PATHDISP(KEEP,KEEP)",
   "PATHMODE(SIRWXU)",
   "FILEDATA(TEXT) LRECL(4096)"
 if rc>0 then do
    say "Error Alloc FI(YUSSWLM) PATH('"usfile"')"
    return
 end
address mvs "execio "anz_uss" diskw yusswlm (stem uss. finis"
xx=MSG("OFF")
address tso "free fi(YUSSWLM)"
xx=MSG("ON")
return
/* */
/*--------------------------------------------------------------*/
/* */
href: procedure
/* Create a reference to...               */
/* Parm1: label                           */
/*        if empty do not create a ref    */
/* Parm2: name of file                    */
/* example:                               */
/* href(rg_sc.importance.cnt,"WLMRESGR")  */
/* V19 */
if arg(1)="" then do
  return "&nbsp;"
end
return '<A HREF="'arg(2)'.htm#'strip(arg(1))'">'strip(arg(1))'</A>'
/* */
/*--------------------------------------------------------------*/
/* */
hsp: procedure
/* Create a table entry                   */
/* Parm1: table size in percent to total  */
/* Parm2: Text                            */
/* Parm3: A - <TR> in front     1. Line   */
/*        E - </TR> at the end  last line */
/*        all other default     between   */
/* Parm4: N - hname for Parm2             */
/* example:                               */
/* htm.anz_htm=hsp(10,"SYSTEM","A","N"),            */
/*             hsp(65,"WLM intern Service Class"),  */
/*             hsp(10,"none"),                      */
/*             hsp(15,"none","E")                   */
plua=""
plue=""
if arg()>2 then do
   if arg(3)="A" then
      plua="<TR>"
   else
   if arg(3)="E" then
      plue="</TR>"
   else do
      plua="<TR>"
      plue="</TR>"
   end
end
data=strip(arg(2))
if data="" then
   data="&nbsp;"
htmsp1=plua'<TD WIDTH="'strip(arg(1))'%" VALIGN="TOP" HEIGHT=18>'
htmsp1=htmsp1'<FONT FACE="Courier" SIZE=3 COLOR="#000000"><P>'
if arg()=4 then do
   if arg(4)="N" then do
      htmsp1=htmsp1""hname(arg(2))
   end
end
return htmsp1""data'</FONT></TD>'plue
/* */
/*--------------------------------------------------------------*/
/* */
hspb: procedure  /* same HSP + BackGround + Bold */
/* Create a table see HSP                 */
plua=""
plue=""
if arg()>2 then do
   if arg(3)="A" then
      plua="<TR>"
   else
   if arg(3)="E" then
      plue="</TR>"
   else do
      plua="<TR>"
      plue="</TR>"
   end
end
data=strip(arg(2))
if data="" then
   data="&nbsp;"
htmsp1=plua'<TD WIDTH="'strip(arg(1))'%" VALIGN="TOP"'
htmsp1=htmsp1' BGCOLOR="#c0c0c0" HEIGHT=18>'
htmsp1=htmsp1'<FONT FACE="Courier" SIZE=3 COLOR="#000000"><P>'
if arg()=4 then do
   if arg(4)="N" then do
      htmsp1=htmsp1""hname(arg(2))
   end
end
return htmsp1'<B>'data'</B></FONT></TD>'plue
/* */
/*--------------------------------------------------------------*/
/* */
htab: procedure
/* Create a table                         */
/* Parm1: table size                      */
/* example:                               */
/* htm.anz_htm=htab(500)                  */
t1= '<TABLE BORDER=1 CELLSPACING=1 CELLPADDING=2 WIDTH='strip(arg(1))'>'
return t1
/* */
/*--------------------------------------------------------------*/
/* */
hsp1: procedure
/* Create a 2 column span table entry     */
/* Parm1: data                            */
/* Parm2: N - create a named entry        */
/* example:                               */
/* htm.anz_htm=hsp1(gmgroup "-" gmg.gmgroup,"N")  */
name=""
if arg()=2 then do
   if arg(2)="N" then do
      parse value arg(1) with thedata " -" .
      name='<A NAME="'thedata'"></A>'
   end
end
t1= '<TR><TD VALIGN="TOP" COLSPAN=2 BGCOLOR="#c0c0c0" HEIGHT=18>'
t1= t1'<FONT FACE="Courier" SIZE=5 COLOR="#000000"><P>'
t1= t1""name'<B>'arg(1)'</B></P></TR>'
return t1
/* */
/*--------------------------------------------------------------*/
/* */
hsp2: procedure
/* Create a 2 column span table entry     */
/* Parm1: data                            */
/* Parm2: N - create a named entry        */
/* example:                               */
/* htm.anz_htm=hsp4("Service Classes")    */
name=""
if arg()=2 then do
   if arg(2)="N" then do
      parse value arg(1) with thedata " -" .
      name='<A NAME="'thedata'"></A>'
   end
end
t1= '<TR><TD VALIGN="TOP" COLSPAN=2 BGCOLOR="#c0c0c0" HEIGHT=18>'
t1= t1'<FONT FACE="Courier" SIZE=5 COLOR="#000000"><P>'
t1= t1""name'<B>'arg(1)'</B></P></TR>'
return t1
/* */
/*--------------------------------------------------------------*/
/* */
hsp4: procedure
/* Create a 4 column span table entry     */
/* Parm1: data                            */
/* Parm2: N - create a named entry        */
/* example:                               */
/* htm.anz_htm=hsp4("Service Classes")    */
name=""
if arg()=2 then do
   if arg(2)="N" then do
      parse value arg(1) with thedata " -" .
      name='<A NAME="'thedata'"></A>'
   end
end
t1= '<TR><TD VALIGN="TOP" COLSPAN=4 BGCOLOR="#c0c0c0" HEIGHT=18>'
t1= t1'<FONT FACE="Courier" SIZE=5 COLOR="#000000"><P>'
t1= t1""name'<B>'arg(1)'</B></P></TR>'
return t1
/* */
/*--------------------------------------------------------------*/
/* */
/* V18 */
hsp6: procedure
/* Create a 6 column span table entry     */
/* Parm1: data                            */
/* Parm2: N - create a named entry        */
/* example:                               */
/* htm.anz_htm=hsp6("Application Environment") */
name=""
if arg()=2 then do
   if arg(2)="N" then do
      parse value arg(1) with thedata " -" .
      name='<A NAME="'thedata'"></A>'
   end
end
t1= '<TR><TD VALIGN="TOP" COLSPAN=6 BGCOLOR="#c0c0c0" HEIGHT=18>'
t1= t1'<FONT FACE="Courier" SIZE=5 COLOR="#000000"><P>'
t1= t1""name'<B>'arg(1)'</B></P></TR>'
return t1
/* */
/*--------------------------------------------------------------*/
/* */
/* V17 */
htit:
/* Create the title lines of any member   */
/* Parm1: data                            */
/* Parm2: name of the file                */
/* example:                               */
/* htm.anz_htm=htit("Classification Groups","WLMGROUP") */
htm.anz_htm="$$$$$$$$" strip(arg(2))".htm $$$$$$$$"
anz_htm=anz_htm+1
htm.anz_htm="<HTML>"
anz_htm=anz_htm+1
htm.anz_htm='<META name="author" content="YCOS Yves Colliard Software">'
anz_htm=anz_htm+1
htm.anz_htm='<META name="copyright" content="'vdat' YCOS GmbH">'
anz_htm=anz_htm+1
htm.anz_htm='<META name="info" content="'sd_desc '-' arg(1),
      '- File' strip(arg(2))'.htm">'
anz_htm=anz_htm+1
t1= '<TITLE>'arg(1) '-' sd_desc'</TITLE>'
t1= t1'<P><FONT FACE="Courier" SIZE=5 COLOR="#000000">'
t1= t1'<B>'arg(1) '-' sd_desc'<BR>'copies('=',length(arg(1))+2)
t1= t1' analysed 'date('N')' by YCOS Procedure' wlmycos'</B></P>'
t1= t1'</FONT><FONT FACE="Courier" SIZE=3 COLOR="#000000"><P>'
t1= t1'<A HREF=WLMAE.htm>Appl. Env.</A> - '
t1= t1'<A HREF=WLMSE.htm>Sched. Env.</A> - '
t1= t1'<A HREF=WLMRES.htm>Resource</A> - '
t1= t1'<A HREF=WLMRSE.htm>Res-SE</A> - '
t1= t1'<A HREF=WLMNOTEP.htm>Note Pad</A> - '
t1= t1'<A HREF=WLMMAIN.htm>WLM Main</A></FONT></P>'
return t1
/* */
/*--------------------------------------------------------------*/
/* */
hname: procedure
/* Create a named entry                   */
/* Parm1: name in table                   */
/* example:                               */
/* htmsp1=htmsp1""hname(arg(2))           */
return '<A NAME="'strip(arg(1))'"></A>'
/* */
/*--------------------------------------------------------------*/
/* */
/* V17 */
saveblank: procedure
p1=arg(1)
start=1
do while pos("  ",p1,start)>0
  wo=pos("  ",p1,start)
  if wo=1 then
    t1=""
  else
    t1=left(p1,wo-1)
  p1=t1'&nbsp; 'substr(p1,wo+2)
  start=wo+6
end
return p1
/* */
/* v19 */
wlm_pol:
cvt = c2d(storage(d2x(16       ),4))
rmct= c2d(storage(d2x(cvt + 604),4)) /* 25C   */
wmct= c2d(storage(d2x(rmct+  32),4)) /*  20   */
poln=     storage(d2x(wmct+ 448),8)  /* 1C0   */
polt= c2x(storage(d2x(wmct+ 456),8)) /*       */
polt= left(StckCony(polt),17)
polu=     storage(d2x(wmct+ 464),8)  /*       */
pols=     storage(d2x(wmct+ 472),8)  /*       */
/* say poln polt polu pols */
sdfn=     storage(d2x(wmct+ 480),8)  /*       */
sdft= c2x(storage(d2x(wmct+ 488),8)) /*       */
sdft= left(StckCony(sdft),17)
sdfu=     storage(d2x(wmct+ 496),8)  /*       */
sdfs=     storage(d2x(wmct+ 504),8)  /*       */
/* say sdfn sdft sdfu sdfs */
return
/* v19 */
STCKCONY: Procedure
odig=digits()
Numeric  Digits 20              /* increase significant digits to 20 */
Secs     = X2D(SubStr(arg(1),1,13))     /* Ignore last 1.5 bytes     */
msec     = right("0000000"secs//1000000,6) /* micro secs   */
times    = secs%1000000
sec      = times//60                       /* seconds      */
timem    = times%60
min      = timem//60                       /* minutes      */
timeh    = timem%60
hours    = timeh//24                       /* hours        */
timed    = (timeh%24)+date("B","19000101","S") /* days since 1900 */
Numeric  Digits odig           /* restore default significant digits */
Return   date("E",timed,"B")" "y(Hours)":"y(Min)":"y(sec)"."msec
y:
return right("0"arg(1),2)
return
/* v19 */
fillhtm: procedure
t1=strip(arg(1))
l2=arg(2)
l1=length(t1)
if l1=l2 then return arg(1)
do i=l1 to l2-1
  t1=t1"&nbsp;"
end
return t1
/* */
/* Used Tables:                                       */
/* SDCTAB   - Service Definition + Coefficients       */
/* SPTAB    - Service Policy                          */
/* ATTRTAB  - Resource Group Attribute                */
/* SGTAB    - Service Class Goal Table                */
/* SSTAB    - Subsystem, Default Service Class        */
/* GMTAB    - Classification Groups                   */
/* CRTAB    - Classification Rules                    */
/* SCTAB    - Service Class                           */
/* RCTAB    - Report Class                            */
/* RGTAB    - Resource Group                          */
/* V17                                                */
/* GRTAB    - Classification Groups Description       */
/* WLTAB    - Workload                                */
/* PADTAB   - Notepad                                 */
/* OPTTAB   - Options                                 */
/* RELTAB   - Release                                 */
/* V18                                                */
/* AETAB    - Application Environment                 */
/* V21                                                */
/* RTAB     - Resource                                */
/* SETAB    - Scheduling Environment                  */
/* SRTAB    - Resource-Scheduling Environment         */
/*                                                    */
/* NOT YET Used Tables:                               */
/* ADATAB   - ?                                       */
/* AXTTAB   - ?                                       */
/* EDATAB   - ?                                       */
/* EXTTAB   - ?                                       */
/* RDATAB   - ?                                       */
/* RXTTAB   - ?                                       */
/* RDXTAB   - ?                                       */
/* SEXTAB   - ?                                       */
/*                                                    */
/*----------------------------------------------------*/
/*                                                    */
/* WSCON Installation and Usage                       */
/* see www.ycos.de/ispfgui.htm                        */
/* - WORKSTATION Installation                         */
/* Download ISP.SISPGUI(ISPGUINX) to PC Binary        */
/* Call the downloaded file and follow instructions   */
/* Check your IP address of your PC - ipconfig        */
/* - ISPF Configuration                               */
/* Call the WSCON Command under ISPF                  */
/*   Set without GUI display |                        */
/*   set IP Protocol                                  */
/*   insert your PC IP Address                        */
/*   save using PF3                                   */
/* - to work with WSCON                               */
/*   1. Call WSA on your Workstation (Option IP Ena)  */
/*   2. Call WSCON under ISPF + ENTER                 */
/*   3. Accept the communication on your workstation  */
/*                                                    */
/*-------------------------------------------------------------*/
/* Sample for Batch Job running SHOWWLM                        */
/* ------------------------------------                        */
/*//WLM      EXEC PGM=IKJEFT01                                 */
/*-->               customize                                  */
/*//SYSPROC  DD DSN=your.YCOS.CLIST,DISP=SHR                   */
/*//SYSTSPRT DD SYSOUT=*                                       */
/*//ISPTABL  DD DSN=&TLIB,SPACE=(TRK,(1,1,5)),LRECL=80,        */
/*//         RECFM=FB,DISP=(NEW,PASS)                          */
/*//ISPSLIB  DD DSN=&SLIB,SPACE=(TRK,(1,1,5)),LRECL=80,        */
/*//         RECFM=FB,DISP=(NEW,PASS)                          */
/*//ISPPROF  DD DSN=&PLIB,SPACE=(TRK,(1,1,5)),LRECL=80,        */
/*//         RECFM=FB,DISP=(NEW,PASS)                          */
/*-->               customize                                  */
/*//ISPMLIB  DD DSN=ISP.SISPMENU,DISP=SHR  LOOK AT YOUR SITE|  */
/*//ISPMLIB  DD DSN=ISP.SISPMENU,DISP=SHR  LOOK AT YOUR SITE|  */
/*//ISPTLIB  DD DSN=ISP.SISPTENU,DISP=SHR  LOOK AT YOUR SITE|  */
/*//ISPPLIB  DD DSN=ISP.SISPPENU,DISP=SHR  LOOK AT YOUR SITE|  */
/*//ISPLIST  DD DUMMY                                          */
/*//ISPLOG   DD DUMMY                                          */
/*-->               customize                                  */
/*                  yourpref - set a prefix for ds             */
/*                  MY.INPUT.POLICY - name of input WLM PO     */
/*                  YCOS.WLMOUT - your output dataset          */
/*                  put dsname in quote in case of no prefix   */
/*//SYSTSIN  DD  *                                             */
/* PROFILE PREFIX(yourpref)                                    */
/* ISPSTART CMD(%SHOWWLM MY.INPUT.POLICY YCOS.WLMOUT(WLMPOL))  */
/*-------------------------------------------------------------*/
