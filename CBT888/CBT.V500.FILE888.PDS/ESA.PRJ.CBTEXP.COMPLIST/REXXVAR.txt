
15694A01 V1.12 z/OS XL C++              //'ESA.PRJ.CBTEXP.CPP(REXXVAR)'                      07.01.13 11:00:33
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH
                                  :DLL(NOCALLBACKANY)              ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH
                                  :NOEXPMAC        NOEXPORTALL     NOFASTTEMPINC   FLAG(I)         GOFF            GONUMBER
                                  :HALT(16)        NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32
                                  :NOINITAUTO      NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP
                                  :NOMARGINS       MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)
                                  :OBJECT          OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)
                                  :PLIST(HOST)     NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT
                                  :ROSTRING        ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS
                                  :SOURCE          SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              NOTEMPLATEREGISTRY
                                  :TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)      TMPLPARSE(NO)   TUNE(7)
                                  :UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64        NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :CSECT()
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1,
                                   MU_STANDALONE=1,SAPI_NO=1,VSAM_NO=1)
                                  :FLOAT(HEX,FOLD,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__)
                                  :NOKEYWORD(char16_t,char32_t,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NODBCS,NODECLTYPE,NODELEGATINGCTORS,DEPENDENTBASELOOKUP,
                                   NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,EXTERNTEMPLATE,ILLPTOM,
                                   IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,NOOLDDIGRAPH,OLDFRIEND,
                                   NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,TRAILENUM,TYPEDEFCLASS,
                                   NOUCS,VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :XPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(NOSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410C0000
                                  : __LIBREL__=0x410C0000
                                  : __TARGET_LIB__=0x410C0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.12 z/OS XL C++              //'ESA.PRJ.CBTEXP.CPP(REXXVAR)'                      07.01.13 11:00:33
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | #include "isisdef.h"
             2 | #include "versinfo.h"
             3 | #include "osmfind.hpp"
             4 | #define _XOPEN_SOURCE 500
             5 | #define _LARGE_FILES 1
             6 | #ifndef _SHR_ENVIRON
             7 | #define _SHR_ENVIRON 1
             8 | #endif
             9 | #define _SHARE_EXT_VARS 1
            10 | #define  environ  (*(__Envn()))
            11 | #include <signal.h>
            12 | #include <dll.h>
            13 | #include <limits.h>
            14 | #include <unistd.h>
            15 | #include <stdlib.h>
            16 | #include <stdlib.h>
            17 | #include <stdio.h>
            18 | #include <assert.h>
            19 | #include <ctype.h>
            20 | #include <string.h>
            21 | #include <strings.h>
            22 | #include <fcntl.h>
            23 | #include <sys/types.h>
            24 | #include <sys/stat.h>
            25 | #include "ibmdebug.hpp"
            26 |
            27 | #include "misc.hpp"
            28 | #include "osmfind.hpp"
            29 | #include "jesi.hpp"
            30 | #include "caljesi.hpp"
            31 | #include "mchain.hpp"
            32 | #include "casmif.hpp"
            33 | #include "msgmgr.hpp"
            34 | #include "jobenv.hpp"
            35 | #include "rexxvar.hpp"
            36 |
            37 | //#include "mvssamp.hpp"
            38 |
            39 | int _dump(char * id,char * p,int l)
            40 | ä
            41 | 	unsigned char ETOAÄ256Ü =
            42 | 	ä
            43 | 		0, 0x1, 0x2, 0x3, 0xff, 0x9, 0xff, 0x7f,
            44 | 		0xff, 0xff, 0xff, 0xb, 0xc, 0xd, 0xe, 0xf,
            45 | 		0x10, 0x11, 0x12, 0x13, 0xff, 0xff, 0x8, 0xff,
            46 | 		0x18, 0x19, 0xff, 0xff, 0x1c, 0x1d, 0x1e, 0x1f,
            47 | 		0xff, 0xff, 0xff, 0xff, 0xff, 0xa, 0x17, 0x1b,
            48 | 		0xff, 0xff, 0xff, 0xff, 0xff, 0x5, 0x6, 0x7,
            49 | 		0xff, 0xff, 0x16, 0xff, 0xff, 0xff, 0xff, 0x4,
            50 | 		0xff, 0xff, 0xff, 0xff, 0x14, 0x15, 0xff, 0x1a,
            51 | 		0x20, 0xff, 0x83, 0x7b, 0x85, 0xa0, 0xc6, 0x86,
            52 | 		0x87, 0xa4, 0x8e, 0x2e, 0x3c, 0x28, 0x2b, 0x21,
            53 | 		0x26, 0x82, 0x88, 0x89, 0x8a, 0xa1, 0x8c, 0x8b,
            54 | 		0x8d, 0x7e, 0x9a, 0x24, 0x2a, 0x29, 0x3b, 0x5e,
            55 | 		0x2d, 0x2f, 0xb6, 0x5b, 0xb7, 0xb5, 0xc7, 0x8f,
            56 | 		0x80, 0xa5, 0x94, 0x2c, 0x25, 0x5f, 0x3e, 0x3f,
            57 | 		0x9b, 0x90, 0xd2, 0xd3, 0xd4, 0xd6, 0xd7, 0xd8,
            58 | 		0xde, 0x60, 0x3a, 0x23, 0xf5, 0x27, 0x3d, 0x22,
            59 | 		0x9d, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
            60 | 		0x68, 0x69, 0xae, 0xaf, 0xd0, 0xec, 0xe7, 0xf1,
            61 | 		0xf8, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
            62 | 		0x71, 0x72, 0xa6, 0xa7, 0x91, 0xf7, 0x92, 0xcf,
            63 | 		0xe6, 0xe1, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
            64 | 		0x79, 0x7a, 0xad, 0xa8, 0xd1, 0xed, 0xe8, 0xa9,
            65 | 		0xbd, 0x9c, 0xbe, 0xfa, 0xb8, 0x40, 0xf4, 0xac,
            66 | 		0xab, 0xf3, 0xaa, 0x7c, 0xee, 0xf9, 0xef, 0x9e,
            67 | 		0x84, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
            68 | 		0x48, 0x49, 0xf0, 0x93, 0xdd, 0x95, 0xa2, 0xe4,
            69 | 		0x81, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
            70 | 		0x51, 0x52, 0xfb, 0x96, 0x7d, 0x97, 0xa3, 0x98,
            71 | 		0x99, 0xf6, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
            72 | 		0x59, 0x5a, 0xfd, 0xe2, 0x5c, 0xe3, 0xe0, 0xe5,
            73 | 		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            74 | 		0x38, 0x39, 0xfc, 0xea, 0x5d, 0xeb, 0xe9, 0xff
            75 | 	ü;
            76 | 	int i , o;
            77 | 	printf("%s at:%x(%d)ÖnÖn",id,p,l);
            78 | 	if (p)
            79 | 		for(o = 0;o <((l/16)+1)*16;o+=16)
            80 | 		ä
            81 | 			printf("%4.4lx:",o);
            82 | 			for(i = o;i<o+16;i++)
            83 | 			ä
            84 | 				if ( i < l )
            85 | 				ä
            86 | 					printf("%2.2x",pÄiÜ& 0xFF );
            87 | 					if (i%4 == 3) printf(" ");
            88 |
            89 | 				ü
            90 |
            91 | 				else
            92 | 				ä
            93 | 					if ( i%4 == 3) printf(" ");
            94 | 					printf(" ");
            95 | 				ü
            96 | 			ü
            97 | 			printf(" ");
            98 | 			for(i = o;i<o+16;i++)
            99 | 				if ( i < l )
           100 | 					printf("%c",isprint(pÄiÜ)? pÄiÜ:'.');
           101 | 				else printf(" ");
           102 | 				printf(" ");
           103 | 				for(i = o;i<o+16;i++)
           104 | 					if ( i < l )
           105 | 					printf("%c",isprint(ETOAÄpÄiÜÜ)?ETOAÄpÄiÜÜ:'.');  printf("Ön");
           106 | //				printf("%c",isprint(ATOEÄpÄiÜÜ)?ATOEÄpÄiÜÜ:'.');  printf("Ön");
           107 |
           108 |
           109 | 		ü
           110 | 		return l;
           111 | ü
           112 |
           113 |
           114 | bool debug = false;
           115 | static const int  TSVEUPDT = 2;
           116 | static const int  TSVERETR = 1;
           117 |
           118 | char * REXXVAR::fetch(const char * name)
           119 | ä
           120 | 	shv.shvnext = NULL;
           121 | 	shv.shvuser = 0;
           122 | 	shv.shvcode = shvfetch;
           123 | 	shv.shvbufl = bufflength;
           124 | 	shv.shvnama = (void *)name;
           125 | 	shv.shvnaml = strlen(name);
           126 | 	shv.shvvala = to;
           127 | 	shv.shvvall = 0;
           128 | 	memset(to,' ',bufflength);
           129 | 	rc = 0;
           130 | 	irxexcom("IRXEXCOM",&rc,&rc,&shv,&envaddr,&rc);
           131 | 	/*
           132 | 	etc = -1;
           133 | 	next = 0;
           134 | 	rc = ikjct441(&TSVERETR,(char * *)&name,&shv.shvnaml,&to,&shv.shvvall,&token,&etc,&next,&rc);
           135 | 	*/
           136 | 	if (rc==0&&shv.shvvall)
           137 | 	ä
           138 | 		toÄshv.shvvallÜ = 0;
           139 | 		if (debug)
           140 | 			_dump((char *)name,to,strlen(to));
           141 |
           142 | 		return to;
           143 | 	ü
           144 | 	else
           145 | 		fprintf(stderr," REXX var fetch error for %s code:%dÖn",name,rc);
           146 | 	return NULL;
           147 | ü
           148 |
           149 | size_t REXXVAR::set(const char * name,const char * from,size_t length)
           150 | ä
           151 | 	shv.shvnext = NULL;
           152 | 	shv.shvuser = 0;
           153 | 	shv.shvcode = shvstore;
           154 | 	shv.shvbufl = bufflength;
           155 | 	shv.shvnama = (void *)name;
           156 | 	shv.shvnaml = strlen(name);
           157 | 	shv.shvvala = (void *)from;
           158 | 	shv.shvvall = length?length:strlen(from);
           159 | 	rc = 0;
           160 | 	if (debug)
           161 | 		_dump((char *)name,(char *)from,shv.shvvall);
           162 |
           163 | 	irxexcom("IRXEXCOM",&rc,&rc,&shv,&envaddr,&rc);
           164 | 	/*
           165 | 	etc = -1;
           166 | 	next = 0;
           167 | 	rc = ikjct441(&TSVEUPDT,(char * *)&name,&shv.shvnaml,(char * *)&from,&shv.shvvall,&token,&etc,&next
           167 | ,&rc);
           168 | 	*/
           169 | 	if (rc==0)
           170 | 	ä
           171 | 		if (debug)
           172 | 			fprintf(stderr," Set %s %*.*sÖn",name,shv.shvvall,shv.shvvall,from);
           173 | 		return shv.shvvall;
           174 | 	ü
           175 | 	else
           176 | 		fprintf(stderr," REXX var set error for %s code:%dÖn",name,rc);
           177 | 	return 0;
           178 |
           179 | ü
           180 |
           181 | size_t REXXVAR::setStem(const char * name,int &index ,const char * from,size_t length)
           182 | ä
           183 | 	char varNameÄ1024Ü;
           184 | 	sprintf(varName,"%s.%d",name,++index);
           185 | 	return (set(varName,from,length));
           186 | ü
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.12 z/OS XL C++              //'ESA.PRJ.CBTEXP.CPP(REXXVAR)'                      07.01.13 11:00:33
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTEXP.HPP(ISISDEF)'
     2  =  //'ESA.PRJ.CBTEXP.HPP(VERSINFO)'
     3  =  //'ESA.PRJ.CBTEXP.HPP(OSMFIND)'
     4  =  //'ESA.PRJ.CBTEXP.HPP(OS)'
     5  =  //'CEE.SCEEH.H(STDLIB)'
     6  =  //'CEE.SCEEH.H(FEATURES)'
     7  =  //'CEE.SCEEH.H(BUILTINS)'
     8  =  //'CEE.SCEEH.H(STDDEF)'
     9  =  //'CEE.SCEEH.H(STRING)'
    10  =  //'ESA.PRJ.CBTEXP.HPP(MCHAIN)'
    11  =  //'ESA.PRJ.CBTEXP.HPP(MVSBASE)'
    12  =  //'ESA.PRJ.CBTEXP.HPP(MERROR)'
    13  =  //'ESA.PRJ.CBTEXP.HPP(DSNAMEUT)'
    14  =  //'CEE.SCEEH.H(ASSERT)'
    15  =  //'CEE.SCEEH.H(STDIO)'
    16  =  //'CEE.SCEEH.SYS.H(TYPES)'
    17  =  //'ESA.PRJ.CBTEXP.HPP(FILETYPE)'
    18  =  //'CEE.SCEEH.H(SIGNAL)'
    19  =  //'CEE.SCEEH.H(TIME)'
    20  =  //'CEE.SCEEH.H(DLL)'
    21  =  //'CEE.SCEEH.H(LIMITS)'
    22  =  //'CEE.SCEEH.H(UNISTD)'
    23  =  //'CEE.SCEEH.H(INTTYPES)'
    24  =  //'CEE.SCEEH.H(STDINT)'
    25  =  //'CEE.SCEEH.H(ASSERT)'
    26  =  //'CEE.SCEEH.H(CTYPE)'
    27  =  //'CEE.SCEEH.H(STRINGS)'
    28  =  //'CEE.SCEEH.H(FCNTL)'
    29  =  //'CEE.SCEEH.SYS.H(MODES)'
    30  =  //'CEE.SCEEH.SYS.H(STAT)'
    31  =  //'CEE.SCEEH.SYS.H(MNTENT)'
    32  =  //'CEE.SCEEH.SYS.H(STAT)'
    33  =  //'ESA.PRJ.CBTEXP.HPP(IBMDEBUG)'
    34  =  //'CEE.SCEEH.H(CTEST)'
    35  =  //'ESA.PRJ.CBTEXP.HPP(MISC)'
    36  =  //'ESA.PRJ.CBTEXP.HPP(JESI)'
    37  =  //'ESA.PRJ.CBTEXP.HPP(PPDECVT)'
    38  =  //'ESA.PRJ.CBTEXP.HPP(JES)'
    39  =  //'ESA.PRJ.CBTEXP.HPP(SSS2)'
    40  =  //'ESA.PRJ.CBTEXP.HPP(SAPISEL)'
    41  =  //'ESA.PRJ.CBTEXP.HPP(SAPIINFO)'
    42  =  //'ESA.PRJ.CBTEXP.HPP(IOQE)'
    43  =  //'ESA.PRJ.CBTEXP.HPP(CALJESI)'
    44  =  //'ESA.PRJ.CBTEXP.HPP(DEFJESI)'
    45  =  //'ESA.PRJ.CBTEXP.HPP(DLLDEF)'
    46  =  //'ESA.PRJ.CBTEXP.HPP(CASMIF)'
    47  =  //'ESA.PRJ.CBTEXP.HPP(ASMIF)'
    48  =  //'ESA.PRJ.CBTEXP.HPP(MSGMGR)'
    49  =  //'ESA.PRJ.CBTEXP.HPP(JOBENV)'
    50  =  //'ESA.PRJ.CBTEXP.HPP(REXXVAR)'
    51  =  //'ESA.PRJ.CBTEXP.HPP(SHVBLOCK)'
0"//'ESA.PRJ.CBTEXP.HPP(SSS2)'", line 142.58: CCN5804 (W) The characters "/*" are detected in a comment.
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.12 z/OS XL C++              //'ESA.PRJ.CBTEXP.CPP(REXXVAR)'                      07.01.13 11:00:33
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     1           0         0           0          1            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
