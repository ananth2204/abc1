#ifndef INCLUDE_MVSTOOL
#define INCLUDE_MVSTOOL

#define _ISOC99_SOURCE
#define __C99
#ifdef	signal
#undef	signal
#define signal signal
#endif
#include <stdarg.h>
#include "versinfo.h"
#include "osmfind.hpp"
//#include "systems.hpp"
#define _XOPEN_SOURCE_EXTENDED 1
#define _XOPEN_SOURCE 500
#define _OPEN_SYS_IPC_EXTENSION 1
#define _LARGE_FILES 1
#ifndef _SHR_ENVIRON
#define _SHR_ENVIRON 1
#endif
#define _SHARE_EXT_VARS 1
#define  environ  (*(__Envn()))
#include <signal.h>
#include <locale.h>
#include <dll.h>
#include <limits.h>
#include <unistd.h>
#include <stdlib.h>
#include <iconv.h>
#include <pwd.h>
#include <assert.h>
#include <ctype.h>
#include <string.h>
#include <strings.h>
#include <dirent.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/msg.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <fcntl.h>
#include <errno.h>
#include <spawn.h>
#include <errno.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <string.h>
#include <strings.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include "ibmdebug.hpp"
extern "C" ä
	typedef int (DLL_FN)(void);
ü
typedef unsigned long long ULL;
typedef ULL * pULL;
typedef  unsigned long long DBLWRD;  // unsigned doubleword (8 bytes)
#include "misc.hpp"
//#include "error.hpp"
#include "mchain.hpp"
#include "casmif.hpp"
#include "msgmgr.hpp"
#include "jobenv.hpp"
#include "strserv.hpp"
#include "smf.hpp"
#include <stdio.h>
#include "mvsstr.hpp"
#include "db2str.hpp"
#include "enfserv.hpp"
#include "gimhc370.hpp"
#include <math.h>
#include "rexxvar.hpp"



int _edc_add_errno2   = setenv("_EDC_ADD_ERRNO2","1",1);  //szm20040129 byteseek set

ISIS_EXT_ASM int  DSNTIAR(...);
const int data_dim = 10;
const int data_len = 72;

typedef struct
ä
	short error_len;
	char error_textÄdata_dimÜÄdata_lenÜ;
ü ERROR_MESSAGE;

int is_file_open(const char*);

ISIS_EXT_ASM typedef int EXTF(const char *);

#pragma map(w_pioctl,"BPX1PIO")
ISIS_EXT_ASM int  w_pioctl(const int *, const unsigned char * *, int *,const int * , void ** , int *, int *, int * );


#pragma map(__getthent,"BPX1GTH")
ISIS_EXT_ASM int  __getthent(const int *, void ** , const int * , void ** , int *, int *, int * );

#pragma map(__getpsent,"BPX1GPS")
ISIS_EXT_ASM int __getpsent(const int *,  const int * , void ** , int *, int *, int * );


#pragma map(__getmntent,"BPX1GMN")
ISIS_EXT_ASM int __getmntent(const int *, void * , int *, int *, int * );

#pragma map(__querydub,"BPX1QDB")
ISIS_EXT_ASM int __querydub(int *, int *, int * );
//*   Define equates for querydub output status
const int      QDB_DUBBED_FIRST  =   1;
/*
Task has already been dubbed.
*                               This task and this RB caused the
*                               dub.

§DCA
*/
const int     QDB_DUBBED           =   2;
/*
Task has already been dubbed.
*                               Other task or other RB caused
*                               the dub                          §DCA
*/
const int     QDB_DUB_MAY_FAIL     =   4;
/*
Task has not been dubbed, but may
*                               fail if attempted.  Most likely
*                               reason for failure will be a missing
*                               or incomplete user security profile,
*                               or OMVS segment not defined      §DCA
*/
const int    QDB_DUB_OKAY         =   8;
/*
Task has not been dubbed, and should
*                               succeed if attempted             §DCA
*/
const int  QDB_DUB_AS_PROCESS   =    16;
/*
Task has not been dubbed, but its
*                               address space has. New task will dub
*                               as another process within the address
*                               space                            §DCA
*/
const int   QDB_DUB_AS_THREAD    =   32;
/*
Task has not been dubbed, but its
*                               address space has. New task will dub as
*                               a thread within the process      §DCA
*/

char* translate(char* input, char* tbl);
char    e_to_aÄ256Ü;
char    a_to_eÄ256Ü;


int memcmpi(const char * s1,const char * s2,int l);
char * makeString(char * s,int l);
int _dump(char * ,char * ,int );
char * argvÄ128Ü;
int argc = 0;

typedef int (*testRoutine)();
struct testCase
ä
	char * name;
	testRoutine addr;
ü;

testCase testCasesÄ512Ü;
int      testCasesIndex = 0;

int initTestCases(char * n,testRoutine f);

#define testCase(n) Ö
	int _##n();				Ö
	int _int##n    = initTestCases(#n,_##n);

testCase(rexxlist);
testCase(rexx4tab);
testCase(rexxjcl);
testCase(rexxsmf);
testCase(rexxdsmf);
testCase(dumpfile);
testCase(rexxenfs);
testCase(rexxgim);
testCase(rexxvsm);
#endif
