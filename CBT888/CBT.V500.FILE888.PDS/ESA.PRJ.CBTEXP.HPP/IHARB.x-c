#pragma pack(packed)

struct rbprfx ä
  void          *rbrsv012; /* -            RESERVED                                  */
  void          *rbrsv013; /* -            RESERVED                                  */
  short int      rbrsv014; /* -            RESERVED                                  */
  unsigned char  rbrsv015; /* -            RESERVED                                  */
  unsigned char  rbrsv016; /* -            RESERVED                                  */
  unsigned char  rbrsv017; /* -            RESERVED                                  */
  unsigned char  rbrsv018; /* -            RESERVED                                  */
  unsigned char  rbrsv019; /* -            RESERVED                                  */
  unsigned char  rbrsv028; /* -            RESERVED                                  */
  void          *rbrsv037; /* -            RESERVED                                  */
  void          *rbrsv038; /* -            RESERVED                                  */
  short int      rbrsv039; /* -            RESERVED                                  */
  unsigned char  rbrsv040; /* -            RESERVED                                  */
  unsigned char  rbrsv041; /* -            RESERVED                                  */
  void          *rbrsv050; /* -            RESERVED                                  */
  struct ä
    void          *_rbxsb;    /* -            ADDRESS OF EXTENDED STATUS BLOCK @G381P9A */
    short int      _rbrsv052; /* -            RESERVED                                  */
    unsigned char  _rbkeysta; /* -            THE KEY AND STATE OF THE IRB ROUTINE      */
    unsigned char  _rbflags2; /* -            SECOND FLAG BYTE                 @G860PXB */
    ü rbprfxst;
  struct ä
    unsigned char  _rbrtpsw1Ä8Ü; /* -          FIRST DOUBLE WORD OF PSW - SYSTEM AND */
    struct ä
      struct ä
        unsigned char  _rbrsv160; /* -          RESERVED - SET TO ZERO IN LOW CORE BY       */
        char           _rbrtilc;  /* -          INSTRUCTION LENGTH COUNTER - NUMBER OF      */
        short int      _rbrtincd; /* -            INTERRUPT CODE                     MDC019 */
        ü rbrticil;
      void          *_rbrtran; /* -            VIRTUAL ADDRESS CAUSING TRANSLATION */
      ü rbrtpsw2;
    ü rbrtopsw;
  unsigned char  rbflags1; /* -            FLAG BYTE                                 */
  unsigned char  rbflags3; /* -        FLAG BYTE. SERIALIZATION:LOCAL LOCK  @D2C     */
  short int      rbxwaiti; /* -            EXPLICIT WAIT INDEX  (MDC342)    @G50CP9A */
  struct ä
    char           _rbwcsa; /* -          NUMBER OF REQUESTS WAITING AT TIME OF */
    struct ä
      unsigned char  _rbinlnth;    /* -          INSTRUCTION LENGTH CODE - 4 HIGH-ORDER */
      unsigned char  _rbintcodÄ2Ü; /* -          INTERRUPT CODE.  THIS OFFSET FIXED BY  */
      ü rbintcda;
    ü rbwlic;
  union ä
    struct ä
      unsigned char  _rbtmfld;     /* -            INDICATORS FOR TIMER ROUTINES.  WHEN */
      unsigned char  _filler1Ä7Ü;  /* -          LAST 7 BYTES OF RBEXRTNM               */
      ü rbexrtnm;
    struct ä
      unsigned char  _rbprfxnd;    /* -           END OF RB PREFIX */
      unsigned char  _filler2Ä7Ü;
      ü _rbprfx_struct1;
    struct ä
      struct ä
        unsigned char  _filler3;       /* -            RBTMFLD                                */
        int            _rbppsav1 : 24; /* -          ADDRESS OF PROBLEM PROGRAM REGISTER SAVE */
        ü rbppsav;
      unsigned char  _rbabopswÄ4Ü; /* -          AFTER EXECUTION OF TRANSIENT AREA HANDLER */
      ü _rbprfx_struct2;
    ü _rbprfx_union1;
  short int      rbsize;   /* -            SIZE OF THIS RB IN DOUBLEWORDS (ALL RB'S) */
  union ä
    struct ä
      struct ä
        struct ä
          unsigned char  _xstab1; /* -            SAME AS RBSTAB1 */
          ü rbstab1;
        struct ä
          unsigned char  _xstab2; /* -            SAME AS RBSTAB2 */
          ü rbstab2;
        ü xstab;
      ü rbstab;
    struct ä
      unsigned char  _filler4;  /* -            RBSTAB1 */
      unsigned char  _filler5;  /* -            RBSTAB2 */
      ü _rbprfx_struct3;
    ü _rbprfx_union2;
  union ä
    struct ä
      struct ä
        unsigned char  _filler6Ä3Ü;  /* -          FIRST 3 BYTES OF EP ADDRESS      @G860PXB */
        unsigned char  _rbeplbyt;    /* BITS 0-6 = BITS 24-30 OF EP ADDR                     */
        ü rbepa;
      ü rbep;
    struct ä
      unsigned char  _rbcdflgs;    /* -            CONTROL FLAGS                         */
      int            _rbcde1 : 24; /* -          ADDRESS OF CDE, ADDRESS OF LPDE OR ZERO */
      ü rbcde;
    void          *_filler7;  /* -            SYSTEM-DEPENDENT FIELD */
    ü _rbprfx_union3;
  union ä
    struct ä
      struct ä
        unsigned char  _rbopswb1; /* -            OLD PSW BYTE 1  (MDC309)         @G65RP9A */
        unsigned char  _rbopswb2; /* -            OLD PSW BYTE 2  (MDC304)         @X50AD9A */
        unsigned char  _filler8;  /* -          OLD PSW BYTE 3                   @G860PVB   */
        unsigned char  _rbopswb4; /* -            OLD PSW BYTE 4                       @L2A */
        void          *_rbopswa;  /* -            OLD PSW BYTES 5-8 (ADDRESS)      @G860PVB */
        ü xrbpsw;
      ü rbopsw;
    unsigned char  _filler9Ä8Ü;  /* -          RBOPSW */
    ü _rbprfx_union4;
  union ä
    struct ä
      unsigned char  _filler10;     /* -            ZERO                                    */
      int            _rbpgmq1 : 24; /* -          ADDRESS OF RB INDICATING A REQUEST TO USE */
      ü rbpgmq;
    struct ä
      char           _filler11;    /* -          RBUSE - CONTAINS ZEROS             */
      int            _rbsqea : 24; /* -          CHAIN OF SUPERVISOR QUEUE ELEMENTS */
      ü rbsqe;
    struct ä
      char           _rbuse;       /* -          USE COUNT USED BY ATTACH (IRB) */
      int            _rbiqe1 : 24; /* -          LIST ORIGIN FOR IQE (IRB)      */
      ü rbiqe;
    struct ä
      int            _rbiqea; /* -            LIST ORIGIN FOR RQE (IRB WITH 4-BYTE LINK */
      ü rbiqe2;
    void          *_filler12;  /* -            SYSTEM-DEPENDENT FIELD */
    ü _rbprfx_union5;
  union ä
    struct ä
      struct ä
        struct ä
          char           _xrbwt; /* -          SAME AS RBWCF (ALL RB'S EXCEPT LPRB AND */
          ü rbwcf;
        int            _xrblnka : 24; /* -          SAME AS RBLINKB (ALL RB'S EXCEPT LPRB AND */
        ü xrblnk;
      ü rblink;
    struct ä
      char           _rbscf;          /* -          RB SUSPENDED COUNT  (MDC339)     @Z40FP9A */
      int            _filler13 : 24;  /* -          RBLINKB                                   */
      ü _rbprfx_struct4;
    ü _rbprfx_union6;
  union ä
    struct ä
      struct ä
        struct ä
          int            _xrbreg0; /* -            SAME AS RBGRS0 */
          ü rbgrs0;
        struct ä
          int            _xrbreg1; /* -            SAME AS RBGRS1 */
          ü rbgrs1;
        struct ä
          int            _xrbreg2; /* -            SAME AS RBGRS2 */
          ü rbgrs2;
        struct ä
          int            _xrbreg3; /* -            SAME AS RBGRS3 */
          ü rbgrs3;
        struct ä
          int            _xrbreg4; /* -            SAME AS RBGRS4 */
          ü rbgrs4;
        struct ä
          int            _xrbreg5; /* -            SAME AS RBGRS5 */
          ü rbgrs5;
        struct ä
          int            _xrbreg6; /* -            SAME AS RBGRS6 */
          ü rbgrs6;
        struct ä
          int            _xrbreg7; /* -            SAME AS RBGRS7 */
          ü rbgrs7;
        struct ä
          int            _xrbreg8; /* -            SAME AS RBGRS8 */
          ü rbgrs8;
        struct ä
          int            _xrbreg9; /* -            SAME AS RBGRS9 */
          ü rbgrs9;
        struct ä
          int            _xrbreg10; /* -            SAME AS RBGRS10 */
          ü rbgrs10;
        struct ä
          int            _xrbreg11; /* -            SAME AS RBGRS11 */
          ü rbgrs11;
        struct ä
          int            _xrbreg12; /* -            SAME AS RBGRS12 */
          ü rbgrs12;
        struct ä
          int            _xrbreg13; /* -            SAME AS RBGRS13 */
          ü rbgrs13;
        struct ä
          int            _xrbreg14; /* -            SAME AS RBGRS14 */
          ü rbgrs14;
        struct ä
          int            _xrbreg15; /* -            SAME AS RBGRS15 */
          ü rbgrs15;
        ü xrbreg;
      ü rbgrsave;
    unsigned char  _filler14Ä64Ü;  /* -         RBGRSAVE */
    ü _rbprfx_union7;
  union ä
    struct ä
      unsigned char  _rbexsaveÄ48Ü;  /* -        EXTENDED SAVE AREA FOR SVC ROUTINES */
      unsigned char  _filler15Ä48Ü;
      ü _rbprfx_struct5;
    struct ä
      struct ä
        void          *_rbrsv135; /* -            RESERVED */
        ü irbend;
      short int      _rbrsv136;      /* -            RESERVED */
      unsigned char  _rbrsv137;      /* -            RESERVED */
      unsigned char  _rbrsv138;      /* -            RESERVED */
      struct ä
        int            _tirbend; /* -           END OF TIRB */
        ü prbend;
      unsigned char  _filler16Ä84Ü;
      ü _rbprfx_struct6;
    struct ä
      double         _xrbesaÄ10Ü;    /* -          SVRB - EXTENDED SAVE AREA OF UP TO TEN */
      unsigned char  _filler17Ä16Ü;
      ü _rbprfx_struct7;
    struct ä
      void          *_rbnexav;       /* -            ADDRESS OF NEXT AVAILABLE IQE (IRB) */
      int            _rbiqewrk;      /* -            IQE WORK SPACE, VARIABLE LENGTH,    */
      unsigned char  _filler18Ä88Ü;
      ü _rbprfx_struct8;
    struct ä
      unsigned char  _rbsirbwaÄ64Ü;  /* -         SIRB WORK AREA                     MDC022 */
      void          *_rbrsv161;      /* -            RESERVED - RBRSV148 FOLLOWS THIS FIELD */
      unsigned char  _filler19Ä28Ü;
      ü _rbprfx_struct9;
    struct ä
      unsigned char  _filler20Ä8Ü;
      unsigned char  _filler21Ä40Ü;  /* -         LAST 40 BYTES OF RBEXSAVE                   */
      struct ä
        void          *_rbschain; /* -            POINTER TO NEXT SCB ON CHAIN              */
        void          *_rbsexit;  /* -            POINTER TO USER WRITTEN EXIT ROUTINE      */
        struct ä
          unsigned char  _rbsflgs1;      /* -            FIRST FLAG BYTE  (MDC309)        @Z40FP9A */
          int            _rbsparma : 24; /* -          ADDRESS OF PARAMETER LIST FOR STA EXIT      */
          ü rbsparm;
        struct ä
          unsigned char  _rbsflgs2;      /* -            SECOND FLAG BYTE  (MDC320)       @Z40FP9A */
          int            _rbsownra : 24; /* -          RB ADDRESS IF STAE/STAR, TCB ADDRESS IF     */
          ü rbsownr;
        struct ä
          unsigned char  _rbsflg3;  /* -            OPTION FLAGS  (MDC327)           @Z40FP9A */
          unsigned char  _rbspkey;  /* -            PROGRAM KEY  (MDC334)            @Z40FP9A */
          unsigned char  _rbsid;    /* -            SCB IDENTIFIER  (MDC335)         @Z40FP9A */
          unsigned char  _rbrsv169; /* -            RESERVED  (MDC336)               @Z40FP9A */
          ü rbsdata;
        void          *_rbsxptr;  /* -            POINTER TO SCB EXTENSION (SCBX)  @G381P9A */
        ü rbscbb;
      int            _sirbend;       /* -           END OF SIRB                 MDC021-MDC022 */
      unsigned char  _filler22Ä20Ü;
      ü _rbprfx_struct10;
    struct ä
      unsigned char  _filler23Ä72Ü;
      int            _rbfeparmÄ6Ü;   /* -           PARAMETER AREA FOR ROUTINES THAT USE */
      ü _rbprfx_struct11;
    ü _rbprfx_union8;
  struct ä
    unsigned char  _filler24Ä12Ü;  /* -         FIRST 12 BYTES OF RBSCBX         @G860PXB    */
    void          *_rbsxparm;      /* -            31-BIT PARAMETER LIST ADDRESS    @G860PXB */
    ü rbscbx;
  int            svrbend;  /* -           END OF SVRB (BOTH)  (MDC338)     @Z40FP9A  */
  ü;

#define rbxsb     rbprfxst._rbxsb
#define rbrsv052  rbprfxst._rbrsv052
#define rbkeysta  rbprfxst._rbkeysta
#define rbflags2  rbprfxst._rbflags2
#define rbrtpsw1  rbrtopsw._rbrtpsw1
#define rbrsv160  rbrtopsw.rbrtpsw2.rbrticil._rbrsv160
#define rbrtilc   rbrtopsw.rbrtpsw2.rbrticil._rbrtilc
#define rbrtincd  rbrtopsw.rbrtpsw2.rbrticil._rbrtincd
#define rbrtran   rbrtopsw.rbrtpsw2._rbrtran
#define rbwcsa    rbwlic._rbwcsa
#define rbinlnth  rbwlic.rbintcda._rbinlnth
#define rbintcod  rbwlic.rbintcda._rbintcod
#define rbtmfld   _rbprfx_union1.rbexrtnm._rbtmfld
#define rbprfxnd  _rbprfx_union1._rbprfx_struct1._rbprfxnd
#define rbppsav1  _rbprfx_union1._rbprfx_struct2.rbppsav._rbppsav1
#define rbabopsw  _rbprfx_union1._rbprfx_struct2._rbabopsw
#define xstab1    _rbprfx_union2.rbstab.xstab.rbstab1._xstab1
#define xstab2    _rbprfx_union2.rbstab.xstab.rbstab2._xstab2
#define rbeplbyt  _rbprfx_union3.rbep.rbepa._rbeplbyt
#define rbcdflgs  _rbprfx_union3.rbcde._rbcdflgs
#define rbcde1    _rbprfx_union3.rbcde._rbcde1
#define rbopswb1  _rbprfx_union4.rbopsw.xrbpsw._rbopswb1
#define rbopswb2  _rbprfx_union4.rbopsw.xrbpsw._rbopswb2
#define rbopswb4  _rbprfx_union4.rbopsw.xrbpsw._rbopswb4
#define rbopswa   _rbprfx_union4.rbopsw.xrbpsw._rbopswa
#define rbpgmq1   _rbprfx_union5.rbpgmq._rbpgmq1
#define rbsqea    _rbprfx_union5.rbsqe._rbsqea
#define rbuse     _rbprfx_union5.rbiqe._rbuse
#define rbiqe1    _rbprfx_union5.rbiqe._rbiqe1
#define rbiqea    _rbprfx_union5.rbiqe2._rbiqea
#define xrbwt     _rbprfx_union6.rblink.xrblnk.rbwcf._xrbwt
#define xrblnka   _rbprfx_union6.rblink.xrblnk._xrblnka
#define rbscf     _rbprfx_union6._rbprfx_struct4._rbscf
#define xrbreg0   _rbprfx_union7.rbgrsave.xrbreg.rbgrs0._xrbreg0
#define xrbreg1   _rbprfx_union7.rbgrsave.xrbreg.rbgrs1._xrbreg1
#define xrbreg2   _rbprfx_union7.rbgrsave.xrbreg.rbgrs2._xrbreg2
#define xrbreg3   _rbprfx_union7.rbgrsave.xrbreg.rbgrs3._xrbreg3
#define xrbreg4   _rbprfx_union7.rbgrsave.xrbreg.rbgrs4._xrbreg4
#define xrbreg5   _rbprfx_union7.rbgrsave.xrbreg.rbgrs5._xrbreg5
#define xrbreg6   _rbprfx_union7.rbgrsave.xrbreg.rbgrs6._xrbreg6
#define xrbreg7   _rbprfx_union7.rbgrsave.xrbreg.rbgrs7._xrbreg7
#define xrbreg8   _rbprfx_union7.rbgrsave.xrbreg.rbgrs8._xrbreg8
#define xrbreg9   _rbprfx_union7.rbgrsave.xrbreg.rbgrs9._xrbreg9
#define xrbreg10  _rbprfx_union7.rbgrsave.xrbreg.rbgrs10._xrbreg10
#define xrbreg11  _rbprfx_union7.rbgrsave.xrbreg.rbgrs11._xrbreg11
#define xrbreg12  _rbprfx_union7.rbgrsave.xrbreg.rbgrs12._xrbreg12
#define xrbreg13  _rbprfx_union7.rbgrsave.xrbreg.rbgrs13._xrbreg13
#define xrbreg14  _rbprfx_union7.rbgrsave.xrbreg.rbgrs14._xrbreg14
#define xrbreg15  _rbprfx_union7.rbgrsave.xrbreg.rbgrs15._xrbreg15
#define rbexsave  _rbprfx_union8._rbprfx_struct5._rbexsave
#define rbrsv135  _rbprfx_union8._rbprfx_struct6.irbend._rbrsv135
#define rbrsv136  _rbprfx_union8._rbprfx_struct6._rbrsv136
#define rbrsv137  _rbprfx_union8._rbprfx_struct6._rbrsv137
#define rbrsv138  _rbprfx_union8._rbprfx_struct6._rbrsv138
#define tirbend   _rbprfx_union8._rbprfx_struct6.prbend._tirbend
#define xrbesa    _rbprfx_union8._rbprfx_struct7._xrbesa
#define rbnexav   _rbprfx_union8._rbprfx_struct8._rbnexav
#define rbiqewrk  _rbprfx_union8._rbprfx_struct8._rbiqewrk
#define rbsirbwa  _rbprfx_union8._rbprfx_struct9._rbsirbwa
#define rbrsv161  _rbprfx_union8._rbprfx_struct9._rbrsv161
#define rbschain  _rbprfx_union8._rbprfx_struct10.rbscbb._rbschain
#define rbsexit   _rbprfx_union8._rbprfx_struct10.rbscbb._rbsexit
#define rbsflgs1  _rbprfx_union8._rbprfx_struct10.rbscbb.rbsparm._rbsflgs1
#define rbsparma  _rbprfx_union8._rbprfx_struct10.rbscbb.rbsparm._rbsparma
#define rbsflgs2  _rbprfx_union8._rbprfx_struct10.rbscbb.rbsownr._rbsflgs2
#define rbsownra  _rbprfx_union8._rbprfx_struct10.rbscbb.rbsownr._rbsownra
#define rbsflg3   _rbprfx_union8._rbprfx_struct10.rbscbb.rbsdata._rbsflg3
#define rbspkey   _rbprfx_union8._rbprfx_struct10.rbscbb.rbsdata._rbspkey
#define rbsid     _rbprfx_union8._rbprfx_struct10.rbscbb.rbsdata._rbsid
#define rbrsv169  _rbprfx_union8._rbprfx_struct10.rbscbb.rbsdata._rbrsv169
#define rbsxptr   _rbprfx_union8._rbprfx_struct10.rbscbb._rbsxptr
#define sirbend   _rbprfx_union8._rbprfx_struct10._sirbend
#define rbfeparm  _rbprfx_union8._rbprfx_struct11._rbfeparm
#define rbsxparm  rbscbx._rbsxparm

/* Values for field "rbrsv019" */
#define rbrsv020 0x80 /* -  RESERVED                                           */
#define rbrsv021 0x40 /* -  RESERVED                                           */
#define rbrsv022 0x20 /* -  RESERVED                                           */
#define rbrsv023 0x10 /* -  RESERVED                                           */
#define rbrsv024 0x08 /* -  RESERVED                                           */
#define rbrsv025 0x04 /* -  RESERVED                                           */
#define rbrsv026 0x02 /* -  RESERVED                                           */
#define rbrsv027 0x01 /* -  RESERVED                                           */

/* Values for field "rbrsv028" */
#define rbrsv029 0x80 /* -  RESERVED                                           */
#define rbrsv030 0x40 /* -  RESERVED                                           */
#define rbrsv031 0x20 /* -  RESERVED                                           */
#define rbrsv032 0x10 /* -  RESERVED                                           */
#define rbrsv033 0x08 /* -  RESERVED                                           */
#define rbrsv034 0x04 /* -  RESERVED                                           */
#define rbrsv035 0x02 /* -  RESERVED                                           */
#define rbrsv036 0x01 /* -  RESERVED                                           */

/* Values for field "rbrsv041" */
#define rbrsv042 0x80 /* -  RESERVED                                           */
#define rbrsv043 0x40 /* -  RESERVED                                           */
#define rbrsv044 0x20 /* -  RESERVED                                           */
#define rbrsv045 0x10 /* -  RESERVED                                           */
#define rbrsv046 0x08 /* -  RESERVED                                           */
#define rbrsv047 0x04 /* -  RESERVED                                           */
#define rbrsv048 0x02 /* -  RESERVED                                           */
#define rbrsv049 0x01 /* -  RESERVED                                           */

/* Values for field "rbkeysta" */
#define rbkey    0xF0 /* THE KEY OF THE IRB ROUTINE           @01A             */
#define rbcirb   0x0C /* THIS IRB WAS CREATED BY CIRB         @01A             */
#define rbstate  0x01 /* PROBLEM STATE IRB ROUTINE INDICATOR  @01A             */

/* Values for field "rbflags2" */
#define rbxwaita 0x80 /* -         AMODE OF WAITER WHO HAS ENTERED EXPLICIT    */
#define rbrsv056 0x40 /* -  RESERVED                                           */
#define rbrsv057 0x20 /* -  RESERVED                                           */
#define rbrsv058 0x10 /* -  RESERVED                                           */
#define rbrsv059 0x08 /* -  RESERVED                                           */
#define rbrsv060 0x04 /* -  RESERVED                                           */
#define rbrsv061 0x02 /* -  RESERVED                                           */
#define rbrsv062 0x01 /* -  RESERVED                                           */

/* Values for field "rbflags1" */
#define rbslock  0x80 /* -         INDICATES THAT THIS RB IS                   */
#define rbxwait  0x40 /* -         INDICATES THAT THE PROGRAM OPERATING        */
#define rbabend  0x20 /* -         ABEND SVRB  (SVRB-BOTH)                     */
#define rbxwprm  0x10 /* -         WAIT POST RESOURCE MANAGER REQUEST          */
#define rbasir   0x08 /* -         ASIR IS RUNNING UNDER THIS RB      ICB444   */
#define rblongwt 0x04 /* -         LONG WAIT ISSUED UNDER THIS RB     MDC009   */
#define rbscb    0x02 /* -         SET BY SVC 60 TO INDICATE RB HAS AN         */
#define rbsssyn  0x01 /* -         SYNCHRONIZED STATUS STOP PENDING FOR        */

/* Values for field "rbflags3" */
#define rbwtecb  0x80 /* -        WAIT WAS ISSUED WITH AN ECB PROVIDED @D2A    */

/* Values for field "rbtmfld" */
#define rbtmque  0x80 /* -         TIMER ELEMENT NOT ON QUEUE                  */
#define rbtmtod  0x40 /* -         LOCAL TIME-OF-DAY OPTION IS USED            */
#define rbrsv005 0x20 /* -   RESERVED                                          */
#define rbwlim   0x10 /* -         WAIT LIMIT EXCEEDED                MDC001   */
#define rbtmcmp  0x08 /* -         INTERVAL HAS EXPIRED                        */
#define rbtmind2 0x04 /* -         EXIT SPECIFIED WITH TASK OR REAL REQUEST    */
#define rbtmind3 0x03 /* -    TYPE OF REQUEST                                  */
#define rbtreq   0x00 /* -        TASK REQUEST                                 */
#define rbwreq   0x01 /* -         WAIT REQUEST                                */
#define rbrreq   0x03 /* -    REAL REQUEST                                     */

/* Values for field "xstab1" */
#define rbftckpt 0x04 /* -         A CHECKPOINT MAY BE TAKEN IN A USER EXIT    */
#define xrbckpt  0x04 /* -         SAME AS RBFTCKPT                            */

/* Values for field "xstab2" */
#define rbtcbnxt 0x80 /* -         RBLINK FIELD POINTS TO TCB (ALL RB'S)       */
#define xrbtcbp  0x80 /* -         SAME AS RBTCBNXT                            */
#define rbfactv  0x40 /* -         IRB OR SIRB IS QUEUED TO TCB - PROGRAM IS   */
#define xrbactv  0x40 /* -         ACTIVE PROGRAM (ALL RB'S EXCEPT LPRB AND    */
#define rbfdyn   0x02 /* -         RB STORAGE CAN BE FREED AT EXIT             */
#define xrbfrrb  0x02 /* -         SAME AS RBFDYN                              */
#define rbecbwt  0x01 /* -         IF ZERO, WAIT FOR A SINGLE EVENT OR ALL     */
#define xrbwait  0x01 /* -         SAME AS RBECBWT                             */

/* Values for field "_filler4" */
#define rbftp    0xE0 /* TYPE OF RB                                            */
#define rbftprb  0x00 /* -        PRB                                          */
#define rbfttirb 0x60 /* -    TIRB                               ICB417        */
#define rbftirb  0x40 /* -         IRB                                         */
#define rbftsirb 0x80 /* -         SIRB                                        */
#define rbftsvrb 0xC0 /* -    SVRB                                             */
#define rbtrsvrb 0x10 /* -         IF RBTRSVRB=0 AND RBCDE=0, THEN TYPE 2      */
#define rbfnsvrb 0x10 /* -         ALIAS FOR RBTRSVRB                          */
#define rbwaitp  0x08 /* -         INDICATES THAT AN ECB IS POINTING AT THE    */
#define rbatnxit 0x02 /* -         THIS IRB IS AN ATTENTION IRB       ICB444   */
#define rbpmsvrb 0x01 /* -         THIS IS A PROGRAM MANAGER SVRB - VALID      */

/* Values for field "_filler5" */
#define rbattn   0x20 /* -         EXITING PROGRAM IS AN ATTENTION EXIT        */
#define rbetxr   0x10 /* -         IRB IS FOR AN ETXR EXIT ROUTINE             */
#define rbusiqe  0x10 /* -         SAME AS RBETXR                     ICB444   */
#define rbiqetp  0x0C /* -                                                     */
#define rbrqenr  0x00 /* -        REQUEST QUEUE ELEMENT IS NOT TO BE           */
#define rbirbaer 0x04 /* -         IRB HAS QUEUE ELEMENTS FOR ASYNCHRONOUSLY   */
#define rbiqenr  0x08 /* -         IQE IS NOT TO BE RETURNED AT EXIT           */
#define rbirbaiq 0x0C /* -    IRB HAS QUEUE ELEMENTS FOR ASYNCHRONOUSLY        */

/* Values for field "rbeplbyt" */
#define rbeppd   0x01 /* -        BIT 31 INDICATES RBEP IS POINTER-DEFINED     */

/* Values for field "rbep" */
#define rbepm    0x80 /* -        ADDRESSING MODE OF ROUTINE, IF               */

/* Values for field "rbcdflgs" */
#define rbnocell 0x80 /* -         EXIT SHOULD FREEMAIN THIS SVRB RATHER       */
#define rbrsv009 0x40 /* -   RESERVED                                          */
#define rbcdatch 0x20 /* -         CONTENTS SUPERVISION HAS BEEN ENTERED       */
#define rbcdsave 0x10 /* -         EXIT WILL LOAD REGISTERS FROM PRB ON        */
#define rbcdnode 0x08 /* -         NO DE SAVE AREA REQUIRED           ICB444   */
#define rbcdsync 0x04 /* -         SYNCH MACRO INSTRUCTION REQUESTED           */
#define rbcdxctl 0x02 /* -         XCTL MACRO INSTRUCTION REQUESTED            */
#define rbcdload 0x01 /* -         LOAD MACRO INSTRUCTION REQUESTED            */

/* Values for field "rbopswb1" */
#define rboper   0x40 /* -        PER BIT IN RBOPSWB1  (MDC310)    @G65RP9A    */

/* Values for field "rbopswb2" */
#define rbopswps 0x01 /* -        PROBLEM STATE BIT IN OLD PSW                 */

/* Values for field "rbopswb4" */
#define rbopsw64 0x01 /* AMODE 64                             @L2A             */

/* Values for field "rbopswa" */
#define rbopswm  0x80 /* -        ADDRESSING MODE OF OLD PSW       @G860PVB    */
#define rbopsw31 0x80 /* -        ADDRESSING MODE OF OLD PSW           @L2A    */

/* Values for field "rbrsv138" */
#define rbrsv139 0x80 /* -  RESERVED                                           */
#define rbrsv140 0x40 /* -  RESERVED                                           */
#define rbrsv141 0x20 /* -  RESERVED                                           */
#define rbrsv142 0x10 /* -  RESERVED                                           */
#define rbrsv143 0x08 /* -  RESERVED                                           */
#define rbrsv144 0x04 /* -  RESERVED                                           */
#define rbrsv145 0x02 /* -  RESERVED                                           */
#define rbrsv146 0x01 /* -  RESERVED                                           */

/* Values for field "rbrsv161" */
#define sirbwaln 64   /* -           LENGTH OF RBSIRBWA                 MDC023 */
#define rbprfxln 0x40 /* - TOTAL PREFIX LENGTH INCLUDING                       */
#define rbprflna 0x20 /* - ASSIGNED PREFIX LENGTH                              */
#define prblen   0x88 /* -   REAL PRB LENGTH FOR GETMAIN                       */
#define sirblen  0xC8 /* -  REAL SIRB LENGTH FOR GETMAIN                       */
#define tirblen  0x88 /* -  REAL TIRB LENGTH FOR GETMAIN                       */
#define irblen   0x80 /* -   REAL IRB LENGTH FOR GETMAIN UNLESS                */
#define svrblen  0xF0 /* -  REAL SVRB LENGTH FOR GETMAIN                       */

/* Values for field "rbsflgs1" */
#define rbsstai  0x80 /* -         STAI SCB  (MDC310)               @Z40FP9A   */
#define rbsstar  0x40 /* -         STAR SCB.  SCB IF FOR STAE IF NEITHER       */
#define rbsdummy 0x20 /* -         DUMMY SCB (WILL NOT BE SCHEDULED)           */
#define rbsestae 0x10 /* -         ESTAE INDICATOR  (MDC313)        @Z40FP9A   */
#define rbrsv162 0x08 /* -         RESERVED                         @Z40FP9A   */
#define rbsasync 0x04 /* -         ALLOW ASYNCHRONOUS INTERRUPTS               */
#define rbsioprc 0x03 /* -    I/O PROCESSING OPTION.  BOTH BITS OFF            */
#define rbsnoiop 0x02 /* -         BYPASS I/O INTERVENTION (MDC316) @Z40FP9A   */
#define rbshalt  0x01 /* -         HALT I/O  (MDC317)               @Z40FP9A   */

/* Values for field "rbsflgs2" */
#define rbsamode 0x80 /* -         USER IS IN 31 BIT                           */
#define rbsxctl2 0x40 /* -         RETAIN THIS SCB ACROSS XCTL                 */
#define rbrsv164 0x20 /* -         RESERVED                         @Z40FP9A   */
#define rbsinuse 0x10 /* -         THIS SCB IN USE  (MDC322)        @Z40FP9A   */
#define rbrsv165 0x08 /* -         RESERVED                         @Z40FP9A   */
#define rbrsv166 0x04 /* -         RESERVED                         @Z40FP9A   */
#define rbskey0  0x02 /* -         USER IN KEY 0  (MDC323)          @Z40FP9A   */
#define rbssuper 0x01 /* -         USER IN SUPERVISOR MODE (MDC324) @Z40FP9A   */

/* Values for field "rbsflg3" */
#define rbrsv167 0x80 /* -         RESERVED                         @Z40FP9A   */
#define rbstermi 0x40 /* -         AUTHORIZED FOR TERM PROCESSING              */
#define rbsrecrd 0x20 /* -         ERROR RECORD TO BE WRITTEN TO THE LOGREC    */
#define rbscncel 0x10 /* -         SCB IS LOGICALLY CANCELED                   */
#define rbsprntr 0x08 /* -         SCB IS PREVIOUSLY ENTERED                   */
#define rbsbrntr 0x04 /* -         BRANCH ENTERED SVC 60  (MDC332)  @Z40FP9A   */
#define rbstermo 0x02 /* -         TERM PROCESSING ONLY  (MDC333)   @Z40FP9A   */
#define rbrsv168 0x01 /* -         RESERVED                         @Z40FP9A   */

#pragma pack(reset)
