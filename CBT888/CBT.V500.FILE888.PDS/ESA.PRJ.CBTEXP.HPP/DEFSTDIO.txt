/**
*
* This header file defines the information used by the standard I/O
* package.
*
**/
#ifndef DLLDEF_HPP_ENUM
#ifndef DLLDEF_CPP_CALLED
#include "filesys.hpp"
#include  "stdio.hpp"
#include  "os.hpp"
#endif
#endif

#if ISIS_PF_HOST_IBM
#include <stdarg.h>
#endif

#include "dlldef.hpp"

#if ISIS_PF_HOST_IBM
#if defined(DLLDEF_CPP_CALLER) == 1 ]] defined(DLLDEF_HPP_PROTO) == 1
extern "C" ä
#endif
#endif

v1(clearerr,FILE *)
//extern void clearerr(FILE *);
t2(FILE *,fopen,const char *,const char *)
//extern FILE * fopen(const char *,const char *);
t3(FILE *,freopen,const char *,const char *,FILE *)
//extern FILE *freopen(const char *, const char *, FILE *);
t1(int,fclose,FILE *)
//extern int fclose(FILE *);
t1(int,fflush,FILE*)
//extern int fflush(FILE *);
t1(int,fgetc,FILE *)
//extern int fgetc(FILE *);
t2(int,fputc,int,FILE *)
//extern int fputc(int, FILE *);
t4(size_t,fread,void *,size_t,size_t,FILE *)
//extern size_t fread(void *, size_t, size_t, FILE *);
t4(size_t,fwrite,const void *,size_t,size_t,FILE *)
//extern size_t fwrite(const void *, size_t, size_t, FILE *);
t3(char *,fgets,char *,int,FILE *)
//extern char *fgets(char *, int, FILE *);
t2(int,fputs,const char *,FILE *)
//extern int fputs(const char *, FILE *);
t1(long,ftell,FILE *)
//extern long ftell(FILE *);
t3(int,fseek,FILE *,long,int)
//extern int fseek(FILE *, long, int);
t2(int,fgetpos,FILE *,fpos_t *)
//extern int fgetpos(FILE *, fpos_t *);
t2(int,fsetpos,FILE *,const fpos_t *)
//extern int fsetpos(FILE *, const fpos_t *);
t1(int,getc,FILE *)
//extern int getc(FILE *);
t0(int,getchar)
//extern int getchar(void);
t1(char *,gets,char *)
//extern char *gets(char *);
t2(int,putc,int,FILE *)
//extern int putc(int, FILE *);
t1(int,putchar,int)
//extern int putchar(int);
t1(int,puts,const char *)
//extern int puts(const char *);
t2(int,ungetc,int,FILE *)
//extern int ungetc(int, FILE *);
// ???? //extern int printf(const char *, ...);
// ???? //extern int fprintf(FILE *, const char *, ...);
// ???? //extern int sprintf(char *, const char *, ...);
//t2(int,vprintf,char *,unsigned *)
t2(int,vprintf,char *,va_list)
//extern int vprintf(const char *, unsigned *);
//t3(int,vfprintf,FILE *,const char *,unsigned *)
t3(int,vfprintf,FILE *,const char *,va_list)
//extern int vfprintf(FILE *, const char *, unsigned *);
//t3(int,vsprintf,char *,const char *,unsigned *)
t3(int,vsprintf,char *,const char *,va_list)
//extern int vsprintf(char *, const char *, unsigned *);
// ???? //extern int scanf(const char *, ...);
// ???? //extern int fscanf(FILE*, const char *, ...);
// ???? //extern int sscanf(const char *, const char *, ...);
t0(FILE *,tmpfile)
//extern FILE *tmpfile(void);
t1(char *, tmpnam, char *)
//extern char *tmpnam(char *);
v1(perror,const char *)
//extern void perror(const char *);
t1(int,remove,const char *)
//extern int remove(const char *);
t2(int,rename,const char *,const char *)
//extern int rename(const char *, const char *);
v2(setbuf,FILE *,char *)
//extern void setbuf(FILE *, char *);
v4(setvbuf,FILE *,char *,int,size_t)
//extern void setvbuf(FILE *, char *, int, size_t);
t1(int,ferror,FILE *)
//extern int ferror(FILE *);
t1(int,feof,FILE *)
//extern int feof(FILE *);
v1(rewind,FILE *)
//extern void rewind(FILE *);

 /*------------------------------------------------------*/
 /*                                                      */
 /* from the lcio                                        */
 /*                                                      */
 /*                                                      */
 /*                                                      */
 /*                                                      */
 /*------------------------------------------------------*/
t1(int,fileno,FILE *)
//extern int fileno(FILE*);
t1(char *,ctermid,char *)
//extern char * ctermid(char *);

#if ISIS_PF_HOST_SASC
t1(int,isatty,int)
//extern int isatty(int );
t1(int,ffixed,FILE *)
//extern int ffixed(FILE *);
t1(int,fterm,FILE *)
//extern int fterm(FILE *);
t1(char *,fnm,FILE *)
//extern  char * fnm(FILE *);
t1(fattrib *,fattr,FILE *)
//extern fattrib * fattr(FILE *);
t2(int,afflush,FILE *,int)
//extern int afflush(FILE *, int);
t4(FILE *,afopen,const char *, const char *, const char *,
     const char *)
//extern FILE *afopen(const char *, const char *, const char *,
//     const char *);
t5(FILE *,afreopen,const char *, const char *, FILE *,
       const char *, const char *)
//extern FILE *afreopen(const char *, const char *, FILE *,
//       const char *, const char *);
t4(size_t,afread,void *,size_t,size_t,FILE *)
//extern size_t afread(void *, size_t, size_t, FILE *);
t4(size_t,afreadh,void *,size_t,size_t,FILE *)
//extern size_t afreadh(void *, size_t, size_t, FILE *);
t4(size_t,afwrite,const void *,size_t,size_t,FILE *)
//extern size_t afwrite(const void *, size_t, size_t, FILE *);
t4(size_t,afwriteh,const void *,size_t,size_t,FILE *)
//extern size_t afwriteh(const void *, size_t, size_t, FILE *);
t1(int,clrerr,FILE *)
//extern int clrerr(FILE *);
t1(char *,cuserid,char *)
//extern char *cuserid(char *);
#endif

t2(int,osdfind,struct DSNINFO *,const char *)
//extern int osdfind(struct DSNINFO *, const char *);
t1(int,osdnext,struct DSNINFO *)
//extern int osdnext(struct DSNINFO *);
v1(osdquit,struct DSNINFO *)
//extern void osdquit(struct DSNINFO *);
t2(int,access,const char *,int)
//extern in access(const char *,int);
t3(long,lseek,int,long,int)
//long lseek(int,long,int)
t2(int,open,const char *,int)
//int open(const char *,int)
t1(int,close,int)
//int close(int)
t3(int,read,int,char *,unsigned)
//int read(int,char *,unsigned)
t3(int,write,int,const char *,unsigned)
//int write(int,const char *,unsigned)

#if ISIS_PF_HOST_IBM
#if defined(DLLDEF_CPP_CALLER) == 1 ]] defined(DLLDEF_HPP_PROTO) == 1
ü;
#endif
#endif


#undef t0
#undef t1
#undef t2
#undef t3
#undef t4
#undef t5
#undef v0
#undef v1
#undef v2
#undef v3
#undef v4
#undef v5
