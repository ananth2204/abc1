#ifndef INCLUDE_WQFSS
#define INCLUDE_WQFSS

//
// QFSSWWA interface


#include <stdlib.h>
#include <time.h>
#include "qfssglbl.hpp"

#ifdef ISIS_PF_HOST_SASC
   #include <string.h>
   #include <mem.h>
  #else
#endif


// - trace level parm
// - trace dsn
// - global DSP pointer



typedef struct sDSP_LST
  ä
  char    nameÄ64Ü;
  int      _i0 , _i1, _i2, _i3;
  int     size;
  time_t  create;
  time_t   lastmodif;
  char    originÄ128Ü;
  ü DSP_LST;
typedef DSP_LST * pDSP_LST;
typedef void *  pDSP;


#ifndef ISIS_PF_HOST
	 #define __asm
  #undef CALLBACK
  #define CALLBACK MvsCallBack
#else
  #if ISIS_PF_HOST_SASC
    extern __asm CALLBACK(wwa *);
  #else
    extern "OS" CALLBACK(wwa *);
  #endif
#endif



#ifndef   MaxBuffSize
#define   MaxBuffSize  32760
#endif
#ifndef   MinBufferSize
#define   MinBufferSize 4096
#endif


#define QfssReceiveN      "RECEIVEN"
#define QfssSendN         "SENDN   "
#define QfssMsg           "MSG     "
#define QfssClose         "CLOSE   "
#define QfssDspInput      "DSPINP  "
#define QfssDspOutput     "DSPOUT  "
#define QfssDspPut        "DSPPUT  "
#define QfssDspGet        "DSPGET  "
#define QfssDspInquire    "DSPINQ  "
#define QfssDspSet        "DSPSET  "
#define QfssDspCreate     "DSPCREA "
#define QfssDspDest       "DSPDEST "
#define QfssCallCgi       "CALLCGI "


class CallBacks
ä
public:
   pWWA   wwa;
   pDSP   cache;
   pDSP   global;
   pWWI   wwi;
   pFTS   fts;
   pCVT   qcvt;
   pIOQE ioqe;
protected:
   CallBacks(pWWA, void *, void *);
   CallBacks()äü
   virtual ßCallBacks();

   virtual int receiveN(char * , int, int );
   virtual int sendN(char *, int );
   virtual int cleanup();

   int  DspInput(pDSP, const char *);
   int  DspOutput(pDSP,const char *);
   int  DspPut(pDSP, const char *, char *, int );
   int  DspGet(pDSP, const char *, char *);
   pDSP_LST DspInq(pDSP, const char *);
   int  DspSet(pDSP,const char *, pDSP_LST);
   pDSP DspCreate();
   int  DspDest(pDSP);
   int  CallCgi(char *,char *,char *,char *);

   int    traceLevel();
   char * traceDsn();
public:
   virtual int msg(char * , int, char *);
   virtual int msg(char * id, char * t );

 ü;

#endif
