#ifndef _FILEVSM
#define _FILEVSM
#include "mvsbase.hpp"
#include "stdio.hpp"

#if ISIS_PF_HOST_IBM
  #ifndef K_exact
    #define K_exact     1
    #define K_noupdate  2
  #endif
#endif

struct DCB_t;
struct Afpds;


#if ISIS_PF_HOST_IBM
#ifndef  FILE_CONST_STRUC_DEFINED
#define  FILE_CONST_STRUC_DEFINED  1

struct fattrib ä     /* file attributes structure */
   unsigned long props;         /* file properties       */

#define _Ftext      0x00000080    /* file is a text stream */
#define _Fcommit    0x00000040    /* file committed upon close */
#define _Ftrunc     0x00000020    /* file truncates on output */
#define _Frelative  0x00000010    /* file positions are RBA's */
#define _Fappend    0x00000008    /* file open in append mode */
#define _Fterm      0x00000002    /* file is the user's terminal */
#define _Fprocess   0x00008000    /* file is POSIX process related */
#define _Fshared    0x00004000    /* file may be shared w/ another
                                     process */
#define _Funbuf     0x00002000    /* POSIX unbuffered file */
#define _Flinebuf   0x00001000    /* POSIX line buffered file */
#define _Fstream    0x00800000    /* file not divided into records */
#define _Fspanbuf   0x00400000    /* records may span buffers */
#define _Ffixed     0x00200000    /* records have fixed size */
#define _Fprint     0x00100000    /* file opened print=yes */
#define _Fprintform 0x00080000    /* file has print format */
#define _Fspanrec   0x00040000    /* physical spanned format */
#define _Fzerolen   0x00020000    /* zero-length records possible */
#define _Fkeyed     0x00010000    /* file accessed via keys */
#define _Fphyskey   0x80000000    /* keys are physically recorded */
#define _Fdupkey    0x40000000    /* duplicate keys allowed */
#define _Finexact   0x20000000    /* inexact searches allowed */
#define _Fgeneric   0x10000000    /* generic searches allowed */

   unsigned short abilities;    /* how file can be used  */

#define _Fcan_read    0x0080      /* file can be read */
#define _Fcan_write   0x0040      /* file can be written */
#define _Fcan_seek    0x0020      /* file can be positioned */
#define _Fcan_rewind  0x0010      /* file can be rewound */
#define _Fcan_skend   0x0008      /* file supports seek to eof */
#define _Fcan_grow    0x0004      /* records can be added to file */
#define _Fcan_tell    0x0002      /* file supports position inquiry */
#define _Fcan_search  0x8000      /* file supports search-by-key */
#define _Fcan_delete  0x4000      /* file supports record deletion */
#define _Fcan_setbuf  0x0100      /* file supports setvbuf */

   unsigned short reclen;       /* maximum record length */
                                /* (0 if no limit)       */
   unsigned short blksize;      /* block size (0 if not  */
                                /* meaningful)           */
   unsigned short keylen;       /* key length or 0       */
   unsigned short keyoff;       /* record offset of key or 0 */
   char am Ä5Ü ;                /* name of access method */
ü;
#endif //FILE_CONST_STRUC_DEFINED
fattrib * fattr(FILE *);
void print_amrc(char * = 0);
#endif
typedef struct FILEBLOCK
ä
  DCB_t    * dcb;                     /* DCB pointer  */
  FILE     * file;                    /* File block ptr*/
  fattrib  * fileattrib ;             /* file attribs  */
  char       FileNameÄ256Ü;           /* File    name */
  char       DatasetnameÄ256Ü;        /* Dataset Name */
  char       MemberÄ256Ü;             /* member       */
  int        Status;                  /* File Status  */
  char *     RecordAreaAddress;
  int        RecordAreaLength;
  int        RecordTotalLength;

  char       keyÄ256Ü;                /* max 256      */
  int        keylength;               /* keylength    */
  int        recordlength;            /* recodlength  */

  int        flag;                    /* VSAM access flag byte */
  int        browseflag;              /* browse flag           */
  int        olbflag;                 /* object list browse flag*/
  int        errno;                   /* error number */

  char       resourcenameÄ8Ü;         /* resource name  */
  char       resourcequalifierÄ8Ü;    /* qualifier      */
  char       resourcenumÄ3Ü;          /* seq number     */
  char       resourcetypeÄ3Ü;         /* type           */

  int        recordnumber ;           /* requested rec num */
  char       * recordlist;            /* record list    */
  char       * recordlast;            /* last in the list */
  char       * recordactual;          /* actual in the list*/
  char       recordtypeÄ3Ü;           /* actual type    */
  Afpds   *  recordafp;               /* afp section pointer */
  fattrib    FileAttrib ;             /* file attribs  */
  char       ENQnameÄ256Ü;            /* outstanding enq */
  short      ENQlength ;              /* enq length or 0 */

ü

  FileBlock;

enum BROWSEFLAG ä
BROWSERESET , BROWSENEXTIN , BROWSENOMORE ü  ;

enum  FILESTATUS ä
 FILERESET , FILEOPEN , FILECLOSED , FILEERROR     ü ;


enum RequestType ä
  NEXT = 0 ,
  FIRST = 1
                 ü  ;


//
// KSDS class
//

const int KSDS_MAX_RECORDSIZE = 32760 ;
class KSDS:public mERROR
ä
  public:
  static int readwrite ;
  FileBlock fb ;
  public:
  KSDS()äü
  KSDS(const char * filename);
  ßKSDS();
  void  clearbuff();
  void  setkey(const char * , int = 0 );
  void  setdata(const char * ,int );
  char * get(const char * , int = 0 );
  char * getupdate(const char * , int = 0);
  char * startbrowse(const char * , int = 0 );
  char * getnext(void);
  int   put(const char * , int = 0 , char * = 0 , int = 0 );
  int   del(const char * , int = 0);
  int   unlock(void);
  int   lengthOfkey()ä return fb.fileattrib->keylen;ü
  int   inbuffer(const char * );
  char * recordaddress()äreturn fb.RecordAreaAddress;ü
  int&  recordlength() äreturn fb.recordlength; ü
ü ;

#endif
