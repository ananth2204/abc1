#ifndef _MCALDLL
  #define _MCALDLL

  #include <stdlib.h>
  #include <string.h>
  #include <setjmp.h>

  #if ISIS_PF_HOST_SASC
  typedef void (*PFN_DLL)();            //Pointer to function in DLL
  #else
  extern "C" ä
    typedef void (*PFN_DLL)();            //Pointer to function in DLL
  ü
  #endif
  #ifndef NEQ
    #ifdef ISIS_PF_HOST_IBM
    #define NEQ |=
    #else
    #define NEQ !=
    #endif
  #endif

  #define MAXFUNCTIONS 128
  typedef enum STATUS ä INIT, JUMPBACK, TERMINATEü status ;
  typedef unsigned long HANDLE;

  class FunctionVector
  ä
     PFN_DLL FunctionÄMAXFUNCTIONSÜ;
   char *          NameÄMAXFUNCTIONSÜ;
   int  index ;
  public:
   FunctionVector()äindex = 0;ü
   int getIndex()äreturn index;ü
   ßFunctionVector()äü
   void Add(PFN_DLL function, char * name)
   ä
        FunctionÄindexÜ = function;
        NameÄindexÜ   = name ;
        index ++;
        if ( index > MAXFUNCTIONS ) abort();
        else return ;
   ü

   PFN_DLL Search(char * name)
   ä
    for (int i = 0;i<index;i++)
    if (strcmp(name,NameÄiÜ) == 0)
     return FunctionÄiÜ ;
    return 0;
   ü
   PFN_DLL Call(int i )
   ä
    return FunctionÄiÜ;
   ü
   PFN_DLL Search(int id)
   ä
    if (id<index)
     return FunctionÄidÜ ;
    else
     return 0;
   ü

  ü ;


  class MVSDLL
  ä
  protected:
   FunctionVector * FVP ;
   jmp_buf          env;
   int (*dynaload)(status, jmp_buf *);
  unsigned long handle;          //DLL Handle (if loaded)
  unsigned long hinsta;          //CallerModuleHandle/Instance handl    e
  char         nameÄ260Ü;        //DLL Name / Error Name of load
  public:
  MVSDLL(char *name,
    unsigned long hinstance);
  ßMVSDLL();
  PFN_DLL GetProcAddress(unsigned long hndl,char * n)
  ä
    handle = hndl ;
    return FVP->Search(n);
  ü
  PFN_DLL call(char *);
  PFN_DLL call(int i)
  ä
    return FVP->Call(i);
  ü
  PFN_DLL QueryProcedure(char *, int = 0);
  char *Name()äreturn(name);ü
  unsigned long Handle()äreturn(handle);ü //Loaded Module Handle
  unsigned long CallHandle()äreturn(hinsta);ü //Caller Module Handle (directory)
  int Ok()äreturn(handle NEQ 0);ü
  static void ModuleName(unsigned long handle,int bl,char *buff);
  ü;


#endif
