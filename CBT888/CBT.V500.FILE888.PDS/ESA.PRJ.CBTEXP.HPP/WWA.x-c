#pragma pack(packed)

struct wwa ä
  void          *wwa_saveÄ18Ü;            /* save in WWA                  */
  void          *wwa_qcvt;                /* QFSS CVT                     */
  void          *wwa_ioqe;                /* IOQE address                 */
  void          *wwa_wwa;                 /* own address                  */
  void          *wwa_callback;            /* callback address             */
  void          *wwa_baseregsÄ4Ü;         /* base regs                    */
  void          *wwa_crab;                /* CRAB pointer                 */
  void          *wwa_parmlistÄ8Ü;         /* parmlist                     */
  short int      wwa_cparml;              /* list length                  */
  unsigned char  wwa_cparmÄ132Ü;          /* parms for C                  */
  unsigned char  wwa_functionÄ8Ü;         /* function name                */
  unsigned char  _filler1;                /* terminator                   */
  unsigned char  _filler2;
  void          *wwa_parmsÄ8Ü;            /* parameters                   */
  unsigned char  wwa_html_pathÄ64Ü;       /* html path                    */
  unsigned char  wwa_html_fileÄ64Ü;       /* html file                    */
  unsigned char  wwa_server_nameÄ64Ü;     /* server name                  */
  void          *wwa_server_port;         /* server port                  */
  unsigned char  wwa_server_protocolÄ64Ü; /* server protocol              */
  unsigned char  wwa_server_softwareÄ64Ü; /* server software              */
  unsigned char  wwa_remote_addrÄ16Ü;     /* remote addr                  */
  unsigned char  wwa_remote_hostÄ32Ü;     /* remote host                  */
  unsigned char  wwa_rootÄ64Ü;            /* path root                    */
  unsigned char  wwa_tracedsnÄ64Ü;        /* trace dsn                    */
  void          *wwa_tracelevel;          /* trace level                  */
  void          *wwa_atoe_a;              /* atoe address                 */
  void          *wwa_etoa_a;              /* etoa address                 */
  unsigned char  wwa_put_allowedÄ4Ü;      /* put indicator                */
  unsigned char  wwa_dir_allowedÄ4Ü;      /* put indicator                */
  void          *wwa_callsaveÄ128Ü;       /* save foe QFSSWWC             */
  unsigned char  wwa_workÄ128Ü;           /* work area                    */
  void          *wwa_dsp_cache;           /* cache                        */
  void          *wwa_dsp_local;           /* local dsp                    */
  void          *wwa_dsp_global;          /* global DSP                   */
  void          *__prof_sysaÄ2Ü;          /* system profile start addr    */
  void          *__prof_rcvaÄ2Ü;          /* receiver profile start addr  */
  void          *__prof_libaÄ2Ü;          /* library profile start addr   */
  void          *__prof_browse;           /* browse pointer               */
  unsigned char  __prof_dsnÄ44Ü;          /* profile dataset name         */
  unsigned char  __prof_memÄ8Ü;           /* profile member name          */
  unsigned char  __prof_ddnameÄ8Ü;        /* profile dd name              */
  unsigned char  __prof_typÄ4Ü;           /* profile type - option        */
  void          *__prof_count;            /* lu count                     */
  unsigned char  __prof_sysÄ8Ü;           /* system profile               */
  unsigned char  __prof_libÄ8Ü;           /* library profile              */
  unsigned char  __prof_rcvÄ8Ü;           /* application profile          */
  void          *__prof_msga;             /* message pointer              */
  void          *wwa_sdlr;                /* sdlr pointer                 */
  void          *wwa_ftr;                 /* FTR pointer                  */
  void          *wwa_fts;                 /* FTS pointer                  */
  void          *wwa_socket;              /* IOQE socket number           */
  void          *wwa_uparm;               /* perm UPARM pointer           */
  void          *wwa_uparm_temp;          /* temp UPARMpointer            */
  void          *wwa_replyf;              /* reply pointer                */
  unsigned char  wwa_dsp_inputÄ64Ü;       /* input list                   */
  unsigned char  wwa_dsp_outputÄ64Ü;      /* output list                  */
  void          *wwa_xml;                 /* xml address                  */
  void          *wwa_xml_maybe;           /* xml address                  */
  unsigned char  wwa_rcv_status;          /* recv routine status          */
  unsigned char  wwa_rcv_format;          /* input message format         */
  unsigned char  _filler3Ä2Ü;
  void          *wwa_rcv_length_dataÄ2Ü;  /* address pair for receive     */
  void          *wwa_snd_length_dataÄ2Ü;  /* address pair for $$SDLR send */
  void          *wwa_counter;             /* input counter                */
  unsigned char  wwa_requestjobnameÄ8Ü;   /* request jobname              */
  unsigned char  wwa_requestjobidÄ8Ü;     /* request jobid                */
  unsigned char  wwa_msgidÄ32Ü;           /* request messageid            */
  void          *wwa_pipiÄ8Ü;             /* call parm area               */
  void          *wwa_pipi_addrÄ2Ü;        /* routine addr                 */
  void          *wwa_pipi_parmp;          /* parm addr                    */
  void          *wwa_pipi_retcode;        /* retcode                      */
  void          *wwa_pipi_rsncode;        /* rsncode                      */
  void          *wwa_pipi_fdbkcode;       /* fdbkcode                     */
  void          *wwa_replyexitÄ7Ü;        /* reply exit parm list         */
  unsigned char  wwa_replyarea;           /* reply exit arae              */
  unsigned char  _filler4;
  ü;

/* Values for field "__prof_msga" */
#define __prof_length            0x7C    /* length of the local area          */

/* Values for field "wwa_rcv_status" */
#define wwa_rcv_status_first     0x00    /* first call                        */
#define wwa_rcv_status_next_desc 0x01    /* next DESC record expected         */
#define wwa_rcv_status_next_data 0x02    /* next DATA record expected         */
#define wwa_rcv_status_eof       0x03    /* EOF file                          */
#define wwa_rcv_status_invalid   0x04    /* invalid record                    */
#define wwa_rcv_status_error     0x05    /* error status                      */
#define wwa_rcv_status_fatal     0x06    /* fatal error                       */

/* Values for field "wwa_rcv_format" */
#define wwa_rcv_format_undefined 0x00    /* undefined                         */
#define wwa_rcv_format_rdw       0x01    /* start with LENGTH and TYPE        */
#define wwa_rcv_format_rdw_xml   0x02    /* start with LENGTH and TYPE, XML   */
#define wwa_rcv_format_rdw_text  0x03    /* start with LENGTH and TYPE, TEXT  */
#define wwa_rcv_format_rdw_ascii 0x04    /* start with LENGTH and TYPE, ASCII */
#define wwa_rcv_format_xml       0x05    /* XML text                          */

/* Values for field "wwa_replyarea" */
#define wwa_length               0x1078C /* dsect length                      */
#define _0                       0x00    /* INVALID                           */
#define _1                       0x01    /* VALID                             */
#define __reset                  0x00    /* RESET                             */
#define __initapi                0x01    /* INITAPI                           */
#define __socket                 0x02    /* SOCKET                            */
#define __bind                   0x03    /* BIND                              */
#define __listen                 0x04    /* LISTEN                            */
#define __accept                 0x05    /* ACCEPT                            */
#define __send                   0x06    /* SEND                              */
#define __receive                0x07    /* RECEIVE                           */
#define __shutdown               0x08    /* SHUTDOWN                          */
#define __close                  0x09    /* CLOSE                             */
#define __termapi                0x0A    /* TERMAPI                           */
#define __select                 0x0B    /* SELECT                            */
#define __sendconf               0x0D    /* SEND CONFIRM                      */
#define __allocate               0x0E    /* ALLOCATE                          */
#define __dealloc                0x0F    /* DEALLOCATE                        */
#define r0                       0x00
#define r1                       0x01
#define r2                       0x02
#define r3                       0x03
#define r4                       0x04
#define r5                       0x05
#define r6                       0x06
#define r7                       0x07
#define r8                       0x08
#define r9                       0x09
#define r10                      0x0A
#define r11                      0x0B
#define r12                      0x0C
#define r13                      0x0D
#define r14                      0x0E
#define r15                      0x0F

#pragma pack(reset)
