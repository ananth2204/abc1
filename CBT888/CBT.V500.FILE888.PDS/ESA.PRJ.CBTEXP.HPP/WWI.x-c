#pragma pack(packed)

struct wwi ä
  int            wwisaveÄ18Ü;              /* SAVE AREA FOR WWI MACROS     */
  unsigned char  wwiprefÄ8Ü;               /* TYPE OF REQUEST              */
  void          *wwi_dsp;                  /* cache DSP pointer            */
  void          *wwi_lista;                /* cache DSP pointer            */
  struct ä
    unsigned char  _wwimsg__msg_msgidÄ4Ü; /* message id */
    ü wwimsg;
  void          *wwimsg__msg_insertÄ16Ü;   /* message insert list          */
  void          *wwimsg__msg_global;       /* global addr                  */
  unsigned char  wwimsg__msg_hexsw;        /* hexa switch                  */
  unsigned char  wwimsg__msg_wto;          /* wto switch                   */
  unsigned char  wwimsg__msg_log;          /* log switch                   */
  unsigned char  wwimsg__msg_asacc;        /* asa contol char              */
  unsigned char  wwimsg__msg_trc;          /* set TRC                      */
  short int      wwimsg__msg_desc;         /* descriptor code              */
  short int      wwimsg__msg_routcdeÄ3Ü;   /* route code                   */
  unsigned char  wwimsg__msg_pref;         /* control char prefix          */
  unsigned char  wwimsg__msg_dateÄ9Ü;      /* date filed                   */
  unsigned char  wwimsg__msg_timeÄ14Ü;     /* time stemp                   */
  unsigned char  wwimsg__msg_extrÄ140Ü;    /* extract buffer               */
  unsigned char  _filler1Ä3Ü;
  void          *wwi_prof__prof_sysaÄ2Ü;   /* system profile start addr    */
  void          *wwi_prof__prof_rcvaÄ2Ü;   /* receiver profile start addr  */
  void          *wwi_prof__prof_libaÄ2Ü;   /* library profile start addr   */
  void          *wwi_prof__prof_browse;    /* browse pointer               */
  unsigned char  wwi_prof__prof_dsnÄ44Ü;   /* profile dataset name         */
  unsigned char  wwi_prof__prof_memÄ8Ü;    /* profile member name          */
  unsigned char  wwi_prof__prof_ddnameÄ8Ü; /* profile dd name              */
  unsigned char  wwi_prof__prof_typÄ4Ü;    /* profile type - option        */
  void          *wwi_prof__prof_count;     /* lu count                     */
  unsigned char  wwi_prof__prof_sysÄ8Ü;    /* system profile               */
  unsigned char  wwi_prof__prof_libÄ8Ü;    /* library profile              */
  unsigned char  wwi_prof__prof_rcvÄ8Ü;    /* application profile          */
  void          *wwi_prof__prof_msga;      /* message pointer              */
  void          *wwi_uparm;                /* unit parameters              */
  void          *wwi_ftr;                  /* FTR pointer                  */
  void          *wwi_fts;                  /* FTs pointer                  */
  void          *wwi_qcvt;                 /* QCVT address                 */
  void          *wwi_ssl;                  /* SSL status                   */
  void          *wwi_atoe_a;               /* ascii to ebcdic address or 0 */
  void          *wwi_etoa_a;               /* ebcdic to ascii address or 0 */
  unsigned char  wwi_atoeÄ256Ü;            /* ascii to ebcdic              */
  unsigned char  wwi_etoaÄ256Ü;            /* ebcdic to ascii              */
  unsigned char  wwi_put_allowedÄ4Ü;       /* put flag                     */
  unsigned char  wwi_dir_allowedÄ4Ü;       /* put flag                     */
  void          *wwi_dsp_global;           /* global DSP                   */
  unsigned char  wwi_buffÄ256Ü;            /* buffer                       */
  unsigned char  wwi_gsk_init_dataÄ64Ü;    /* gsk INIT data                */
  void          *wwi_parmlistÄ8Ü;          /* parm list                    */
  void          *wwi_cbparmsÄ8Ü;           /* callback parms               */
  void          *wwi_callsaveÄ18Ü;         /* save area                    */
  unsigned char  wwi_functionÄ16Ü;         /* save area                    */
  void          *wwi_callback;             /* callback function pointer    */
  void          *wwi_pipiÄ8Ü;
  void          *wwi_pipi_addrÄ2Ü;
  void          *wwi_pipi_parmp;
  void          *wwi_pipi_retcode;
  void          *wwi_pipi_rsncode;
  void          *wwi_pipi_fdbkcode;
  void          *wwi_pipi_sub;
  void          *wwi_pipi_rc;
  void          *wwi_pipi_token;
  void          *wwi_pipi_index;
  unsigned char  wwi_workÄ64Ü;             /* work area                    */
  ü;

#define wwimsg__msg_msgid wwimsg._wwimsg__msg_msgid

/* Values for field "wwi_prof__prof_msga" */
#define wwi_prof__prof_length 0x7C

/* Values for field "wwi_work" */
#define wwilgth               0x65C /* LENGTH OF WWI CONTROL BLOCK */

#pragma pack(reset)
