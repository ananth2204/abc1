#pragma pack(packed)

struct asmauth ä
  void          *asm_saveÄ18Ü;            /* save in asm                          */
  void          *asm_mvs;                 /* mvs object pointer                   */
  void          *asm_baseregsÄ4Ü;         /* base regs                            */
  unsigned char  asm_function_code;       /* function code                        */
  unsigned char  _filler1Ä3Ü;
  void          *asm_crab;                /* crab pointer                         */
  void          *asm_rc;                  /* function return                      */
  void          *asm_reason;              /* function reason code                 */
  void          *asm_parmsÄ8Ü;            /* parameters                           */
  void          *asm_calllistÄ8Ü;         /* call parameters                      */
  unsigned char  asm_workÄ128Ü;           /* work area                            */
  unsigned char  _filler2Ä8Ü;             /* PARAMETER LIST ID                    */
  int            _filler3;                /* PARAMETER LIST LENGTH                */
  unsigned char  _filler4;                /* PARAMETER LIST LEVEL                 */
  unsigned char  _filler5Ä3Ü;             /* RESERVED BYTES                       */
  void          *_filler6;                /* INPUT PTR TO DCB OR DEB              */
  unsigned char  _filler7;                /* CONCATENATION NUMBER                 */
  unsigned char  _filler8;                /* ISIFLG1 BYTE                         */
  unsigned char  _filler9Ä6Ü;             /* OUTPUT AND RESERVED BYTES            */
  void          *asm_load;                /* EPLOC OR DE PARAMETER       @G381P2A */
  void          *_filler10;               /* DCB ADDRESS PARAMETER       @G381P2A */
  unsigned char  _filler11;               /* PARAMETER LIST FORMAT NUMBER         */
  unsigned char  _filler12;               /* RESERVED                    @G381P2A */
  unsigned char  _filler13;               /* OPTIONS                              */
  unsigned char  _filler14;               /* OPTIONS                    @LXC      */
  void          *_filler15;               /* LOADPT PARAMETER  @G860P35           */
  void          *asm_loadpt;              /* load point                           */
  void          *asm_offset;              /* entry offset                         */
  void          *asm_dcb;                 /* DCB address                          */
  short int      asm_entry;               /* entry length                         */
  unsigned char  asm_entry_nameÄ8Ü;       /* entry value                          */
  unsigned char  _filler16Ä2Ü;
  void          *asm_countd;              /* Number of ESD records returned       */
  void          *asm_countn;              /* Number of csect names                */
  void          *asm_counte;              /* Number of csect names                */
  void          *asm_cursord;             /* Cursor value for GETD call           */
  void          *asm_cursorn;             /* Cursor value for GETN call           */
  void          *asm_cursore;             /* Cursor value for GETN call           */
  unsigned char  asm_dtokenÄ8Ü;           /* Dialog Token                         */
  void          *asm_retcode;             /* General return code                  */
  void          *asm_rsncode;             /* General reason code                  */
  short int      asm_module_l;            /* MODULE NAME LENGTH                   */
  unsigned char  asm_moduleÄ128Ü;         /* module name                          */
  short int      asm_csect_l;             /* csect Name length  for GETD/PUTD     */
  unsigned char  asm_csectÄ8Ü;            /* csect name for GETD/PUTD             */
  void          *asm_tcount;              /* Total number of csects               */
  unsigned char  asm_wktokenÄ8Ü;          /* Workmod Token                        */
  unsigned char  asm_iewflag;             /* Indicator for ENDDing the Dialog     */
  unsigned char  asm_esd_iewflag;         /* Indicator for ESD free               */
  unsigned char  _filler17Ä2Ü;
  void          *asm_iewbind_lÄ32Ü;       /* IEWBIND list form                    */
  unsigned char  asm_deservÄ8Ü;           /* PARAMETER LIST ID                    */
  void          *_filler18;               /* PARAMETER LIST LENGTH                */
  unsigned char  _filler19;               /* PARAMETER LIST LEVEL                 */
  unsigned char  _filler20Ä3Ü;            /* RESERVED                             */
  unsigned char  _filler21;               /* FUNCTION CODE                        */
  unsigned char  _filler22Ä7Ü;            /* RESERVED                             */
  unsigned char  _filler23;               /* DESP FLAG1                           */
  unsigned char  _filler24;
  unsigned char  _filler25;               /* EXIT_SCOPE                           */
  unsigned char  _filler26;               /* CONCAT                               */
  unsigned char  _filler27;               /* LIBTYPE                              */
  unsigned char  _filler28;               /* GETTYPE                              */
  unsigned char  _filler29;               /* RELTYPE                              */
  unsigned char  _filler30;               /* EXIT_OPTION                          */
  unsigned char  _filler31;               /* PUT OPTION                           */
  unsigned char  _filler32;               /* SUBPOOL                              */
  unsigned char  _filler33;               /* CONNIN                               */
  unsigned char  _filler34;               /* RESERVED                             */
  unsigned char  _filler35Ä4Ü;            /* DCB                                  */
  unsigned char  _filler36Ä4Ü;            /* RESERVED                             */
  unsigned char  _filler37Ä4Ü;            /* CONNID                               */
  unsigned char  _filler38Ä4Ü;            /* AREAPT                               */
  unsigned char  _filler39Ä4Ü;            /* AREA                                 */
  unsigned char  _filler40Ä4Ü;            /* AREA2                                */
  unsigned char  _filler41Ä4Ü;            /* DELIST                               */
  unsigned char  _filler42Ä4Ü;            /* DELIS2                               */
  unsigned char  _filler43Ä4Ü;            /* ENTRYG                               */
  unsigned char  _filler44Ä4Ü;            /* RESERVED                             */
  unsigned char  _filler45Ä4Ü;            /* RESERVED                             */
  unsigned char  _filler46Ä4Ü;            /* NAMELI                               */
  unsigned char  _filler47Ä4Ü;            /* NAMEL2                               */
  unsigned char  _filler48Ä4Ü;            /* NAME                                 */
  unsigned char  _filler49Ä4Ü;            /* PDSDE                                */
  unsigned char  _filler50Ä4Ü;            /* EXIT_DST                             */
  unsigned char  _filler51Ä4Ü;            /* EXIT_PREV_DSTPTR                     */
  struct ä
    short int      _asm_deserv_name_length;   /* name length */
    unsigned char  _asm_deserv_name_nameÄ64Ü; /* name        */
    ü asm_deserv_name;
  unsigned char  _filler52Ä2Ü;
  void          *asm_deserv_area;         /* area pointer                         */
  void          *asm_deserv_main;         /* main entry address                   */
  void          *asm_save_r3_r6Ä4Ü;       /* save buff regs                       */
  struct ä
    unsigned char  _asm_getall_ddnameÄ8Ü; /* dd name */
    ü asm_getall;
  unsigned char  asm_getall_dcbflag;      /* if on, leave the DCB open            */
  unsigned char  asm_getall_moduleÄ8Ü;    /* load module name                     */
  unsigned char  _filler53Ä3Ü;
  void          *asm_getall_entry;        /* entry point                          */
  void          *asm_getall_length;       /* module length                        */
  void          *asm_getall_end;          /* end of module +1                     */
  void          *asm_getall_start;        /* actual start                         */
  unsigned char  asm_getall_stringÄ4Ü;    /* string search for                    */
  struct ä
    void          *_asm_bsam_storage; /* allocated storage */
    void          *_asm_bsam_length;  /* length            */
    ü asm_bsam;
  struct ä
    unsigned char  _filler54;       /* OPTION BYTE                 */
    int            _filler55 : 24;  /* RESERVED               @L1A */
    ü asm_bsam_openl;
  void          *_filler56;               /* DCB ADDRESS            @L1A          */
  unsigned char  asm_bsam_dcbeÄ100Ü;      /* DCBE                                 */
  void          *asm_bsam_r15;            /* FIND rc 15                           */
  void          *asm_bsam_r0;             /* FIND rc 0                            */
  unsigned char  asm_bsam_errÄ8Ü;         /* error in function                    */
  unsigned char  _filler57;
  unsigned char  asm_bsam_memberÄ8Ü;      /* member name                          */
  unsigned char  _filler58;
  unsigned char  asm_bsam_eof;            /* EOF flag                             */
  unsigned char  _filler59;
  unsigned char  asm_bsam_buffer;         /* buffer                               */
  unsigned char  _filler60;
  ü;

#define asm_deserv_name_length asm_deserv_name._asm_deserv_name_length
#define asm_deserv_name_name   asm_deserv_name._asm_deserv_name_name
#define asm_getall_ddname      asm_getall._asm_getall_ddname
#define asm_bsam_storage       asm_bsam._asm_bsam_storage
#define asm_bsam_length        asm_bsam._asm_bsam_length

/* Values for field "asm_bsam_buffer" */
#define asm_length                  0x8430 /* dsect length */
#define asm_function_code_bsamopen  4      /* open update  */
#define asm_function_code_bsamopeni 5      /* open input   */

#pragma pack(reset)
