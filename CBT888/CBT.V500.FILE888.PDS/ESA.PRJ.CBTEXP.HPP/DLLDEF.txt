
#ifdef    DLLDEF_HPP_ENUM

#define t0(ret , fn ) Ö
	  _X__X_##fn ,
#define t1(ret , fn , pt1 )    Ö
	 _X__X_##fn ,
#define t2(ret , fn , pt1,  pt2  )    Ö
	 _X__X_##fn ,
#define t3(ret , fn , pt1 , pt2 , pt3   )    Ö
	 _X__X_##fn ,
#define t4(ret , fn , pt1 , pt2 , pt3 , pt4  )    Ö
	 _X__X_##fn ,
#define t5(ret , fn , pt1 , pt2 , pt3 , pt4 , pt5 )    Ö
	 _X__X_##fn ,
#define v0( fn ) Ö
	 _X__X_##fn ,
#define v1(fn , pv1 )    Ö
	_X__X_##fn ,
#define v2( fn , pv1 , pv2)    Ö
	 _X__X_##fn ,
#define v3( fn , pv1, pv2 , pv3)    Ö
	 _X__X_##fn ,
#define v4( fn , pv1 , pv2 , pv3 , pv4)    Ö
	_X__X_##fn ,
#define v5(fn , pv1, pv2, pv3, pv4 , pv5 )    Ö
	_X__X_##fn ,

#elif defined( DLLDEF_HPP_PROTO )

#define t0(ret , fn )  Ö
ret _X_##fn(void);
#define t1(ret , fn , pt1 )    Ö
ret _X_##fn( pt1);
#define t2(ret , fn , pt1 , pt2 )    Ö
ret _X_##fn( pt1 , pt2 );
#define t3(ret , fn , pt1 , pt2 , pt3   )    Ö
ret _X_##fn( pt1 , pt2 , pt3 );
#define t4(ret , fn , pt1, pt2 , pt3 , pt4 )    Ö
ret _X_##fn(pt1 , pt2 , pt3 , pt4 );
#define t5(ret , fn , pt1 , pt2 , pt3 , pt4 , pt5 )    Ö
ret _X_##fn(pt1 , pt2 , pt3 , pt4 , pt5 );
#define v0( fn ) Ö
void fn ( void );
#define v1( fn , pv1 )    Ö
void _X_##fn( pv1);
#define v2( fn , pv1 , pv2 )    Ö
void _X_##fn( pv1 , pv2 );
#define v3( fn , pv1 , pv2 , pv3 )    Ö
void _X_##fn( pv1 , pv2 , pv3 );
#define v4(fn , pv1 , pv2 , pv3 , pv4 )    Ö
void _X_##fn(pv1 , pv2 , pv3 , pv4 );
#define v5( fn , pv1, pv2, pv3, pv4, pv5)    Ö
void _X_##fn(pv1 , pv2 , pv3 , pv4 , pv5 );

#elif defined( DLLDEF_CPP_CALLER )
#if ISIS_PF_HOST_SASC
#define t0(ret , fn  )    Ö
typedef  ret( * typedef##fn )( void ); Ö
ret _X_##fn(void )                  Ö
ä                                   Ö
 return((typedef##fn)(dll->call(_X__X_##fn)))() ; Ö
ü

#define t1(ret , fn , pt1 )    Ö
typedef  ret ( * typedef##fn)( pt1 ); Ö
ret _X_##fn(pt1 pn1 )                  Ö
ä                                  Ö
 return((typedef##fn)(dll->call(_X__X_##fn)))(pn1 ) ; Ö
ü

#define t2(ret , fn , pt1 , pt2 )    Ö
typedef  ret ( * typedef##fn )( pt1, pt2 ); Ö
ret _X_##fn(pt1 pn1 , pt2 pn2 )                  Ö
ä                                             Ö
 return((typedef##fn)(dll->call(_X__X_##fn)))(pn1, pn2 ) ; Ö
ü

#define t3(ret , fn , pt1 , pt2 , pt3 )    Ö
typedef  ret ( * typedef##fn )( pt1, pt2 , pt3 ); Ö
ret _X_##fn(pt1 pn1 , pt2 pn2, pt3 pn3 )                  Ö
ä                                   Ö
 return((typedef##fn)(dll->call(_X__X_##fn)))(pn1, pn2, pn3 ) ; Ö
ü

#define t4(ret , fn , pt1 , pt2 , pt3 , pt4)    Ö
typedef  ret ( * typedef##fn )( pt1, pt2, pt3 , pt4 ); Ö
ret _X_##fn(pt1 pn1 , pt2 pn2 , pt3 pn3 , pt4 pn4 )                  Ö
ä                                   Ö
 return((typedef##fn)(dll->call(_X__X_##fn)))(pn1, pn2, pn3 , pn4 ) ; Ö
ü

#define t5(ret , fn , pt1 , pt2 , pt3 ,  pt4 ,   Ö
 pt5 )    Ö
typedef  ret ( * typedef##fn )( pt1, pt2, pt3 , pt4, pt5 ); Ö
ret _X_##fn(pt1 pn1 , pt2 pn2 , pt3 pn3 , pt4 pn4, pt5 pn5 )                 Ö
ä                                   Ö
 return((typedef##fn)(dll->call(_X__X_##fn)))(pn1, pn2, pn3 , pn4, pn5 ) ; Ö
ü

#define v0(fn  )    Ö
typedef  void ( * typedef##fn )(void ); Ö
void _X_##fn(void )                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(_X__X_##fn)))() ; Ö
ü

#define v1(fn , pv1 )    Ö
typedef  void ( * typedef##fn )( pv1 ); Ö
void _X_##fn(pv1 pn1 )                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(_X__X_##fn)))(pn1 ) ; Ö
ü

#define v2( fn , pv1 , pv2 )    Ö
typedef  void ( * typedef##fn )( pv1, pv2 ); Ö
void _X_##fn(pv1 pn1 , pv2 pn2)                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(_X__X_##fn)))(pn1, pn2 ) ; Ö
ü

#define v3( fn , pv1 , pv2, pv3)    Ö
typedef  void( * typedef##fn )( pv1, pv2 , pv3 ); Ö
void _X_##fn(pv1 pn1 , pv2 pn2, pv3 pn3 )                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(_X__X_##fn)))(pn1, pn2, pn3 ) ; Ö
ü

#define v4( fn , pv1, pv2 , pv3 , pv4  )    Ö
typedef  void( * typedef##fn )( pv1, pv2, pv3 , pv4 ); Ö
void _X_##fn(pv1 pn1 , pv2 pn2 , pv3 pn3 , pv4 pn4 )                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(_X__X_##fn)))(pn1, pn2, pn3 , pn4 ) ; Ö
ü

#define v5( fn , pv1 , pv2 , pv3 , pv4 , pv5)   Ö
typedef  void( * typedef##fn )( pv1, pv2, pv3 , pv4, pv5 ); Ö
void _X_##fn(pv1 pn1 , pv2 pn2 , pv3 pn3 , pv4 pn4, pv5 pn5 )    Ö
ä                                                             Ö
 ((typedef##fn)(dll->call(_X__X_##fn)))(pn1, pn2, pn3 , pn4, pn5 ) ;  Ö
ü
#else

#define t0(ret , fn  )    Ö
typedef  ret( * typedef##fn )( void ); Ö
ret _X_##fn(void )                  Ö
ä                                   Ö
 return((typedef##fn)(dll->call(STR(_##fn))))() ; Ö
ü

#define t1(ret , fn , pt1 )    Ö
typedef  ret ( * typedef##fn)( pt1 ); Ö
ret _X_##fn(pt1 pn1 )                  Ö
ä                                  Ö
 return((typedef##fn)(dll->call(STR(_##fn))))(pn1 ) ; Ö
ü

#define t2(ret , fn , pt1 , pt2 )    Ö
typedef  ret ( * typedef##fn )( pt1, pt2 ); Ö
ret _X_##fn(pt1 pn1 , pt2 pn2 )                  Ö
ä                                             Ö
 return((typedef##fn)(dll->call(STR(_##fn))))(pn1, pn2 ) ; Ö
ü

#define t3(ret , fn , pt1 , pt2 , pt3 )    Ö
typedef  ret ( * typedef##fn )( pt1, pt2 , pt3 ); Ö
ret _X_##fn(pt1 pn1 , pt2 pn2, pt3 pn3 )                  Ö
ä                                   Ö
 return((typedef##fn)(dll->call(STR(_##fn))))(pn1, pn2, pn3 ) ; Ö
ü

#define t4(ret , fn , pt1 , pt2 , pt3 , pt4)    Ö
typedef  ret ( * typedef##fn )( pt1, pt2, pt3 , pt4 ); Ö
ret _X_##fn(pt1 pn1 , pt2 pn2 , pt3 pn3 , pt4 pn4 )                  Ö
ä                                   Ö
 return((typedef##fn)(dll->call(STR(_##fn))))(pn1, pn2, pn3 , pn4 ) ; Ö
ü

#define t5(ret , fn , pt1 , pt2 , pt3 ,  pt4 ,   Ö
 pt5 )    Ö
typedef  ret ( * typedef##fn )( pt1, pt2, pt3 , pt4, pt5 ); Ö
ret _X_##fn(pt1 pn1 , pt2 pn2 , pt3 pn3 , pt4 pn4, pt5 pn5 )                 Ö
ä                                   Ö
 return((typedef##fn)(dll->call(STR(_##fn))))(pn1, pn2, pn3 , pn4, pn5 ) ; Ö
ü

#define v0(fn  )    Ö
typedef  void ( * typedef##fn )(void ); Ö
void _X_##fn(void )                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(STR(_##fn))))() ; Ö
ü

#define v1(fn , pv1 )    Ö
typedef  void ( * typedef##fn )( pv1 ); Ö
void _X_##fn(pv1 pn1 )                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(STR(_##fn))))(pn1 ) ; Ö
ü

#define v2( fn , pv1 , pv2 )    Ö
typedef  void ( * typedef##fn )( pv1, pv2 ); Ö
void _X_##fn(pv1 pn1 , pv2 pn2)                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(STR(_##fn))))(pn1, pn2 ) ; Ö
ü

#define v3( fn , pv1 , pv2, pv3)    Ö
typedef  void( * typedef##fn )( pv1, pv2 , pv3 ); Ö
void _X_##fn(pv1 pn1 , pv2 pn2, pv3 pn3 )                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(STR(_##fn))))(pn1, pn2, pn3 ) ; Ö
ü

#define v4( fn , pv1, pv2 , pv3 , pv4  )    Ö
typedef  void( * typedef##fn )( pv1, pv2, pv3 , pv4 ); Ö
void _X_##fn(pv1 pn1 , pv2 pn2 , pv3 pn3 , pv4 pn4 )                  Ö
ä                                   Ö
 ((typedef##fn)(dll->call(STR(_##fn))))(pn1, pn2, pn3 , pn4 ) ; Ö
ü

#define v5( fn , pv1 , pv2 , pv3 , pv4 , pv5)   Ö
typedef  void( * typedef##fn )( pv1, pv2, pv3 , pv4, pv5 ); Ö
void _X_##fn(pv1 pn1 , pv2 pn2 , pv3 pn3 , pv4 pn4, pv5 pn5 )    Ö
ä                                                             Ö
 ((typedef##fn)(dll->call(STR(_##fn))))(pn1, pn2, pn3 , pn4, pn5 ) ;  Ö
ü
#endif
#elif defined( DLLDEF_CPP_CALLED  )
#ifdef ISIS_PF_HOST_SASC
#define t0(ret , fn ) Ö
	DLL_FUNC( fn )
#define t1(ret , fn , pt1 )    Ö
	DLL_FUNC( fn )
#define t2(ret , fn , pt1, pt2  )    Ö
	DLL_FUNC(fn )
#define t3(ret , fn , pt1, pt2 , pt3 )    Ö
	DLL_FUNC(fn )
#define t4(ret , fn , pt1 , pt2 , pt3, pt4 )    Ö
	DLL_FUNC(fn )
#define t5(ret , fn , pt1 , pt2 , pt3 , pt4 , pt5  )    Ö
	DLL_FUNC(fn )
#define v0( fn ) Ö
	DLL_FUNC( fn )
#define v1( fn , pv1 )    Ö
	DLL_FUNC( fn )
#define v2( fn , pv1 , pv2 )    Ö
	DLL_FUNC(fn )
#define v3( fn , pv1, pv2, pv3)    Ö
	DLL_FUNC(fn )
#define v4( fn , pv1, pv2, pv3, pv4)    Ö
	DLL_FUNC(fn )
#define v5(fn , pv1, pv2, pv3, pv4 ,pv5)    Ö
	DLL_FUNC(fn )
#else
#define t0(ret , fn ) Ö
extern "C" ret _Export _##fn()ä return(fn());ü
#define t1(ret , fn , pt1 ) Ö
extern "C" ret _Export _##fn(pt1 p1)ä return(fn(p1));ü
#define t2(ret , fn , pt1, pt2 ) Ö
extern "C" ret _Export _##fn(pt1 p1,pt2 p2)ä return(fn(p1,p2));ü
#define t3(ret , fn , pt1, pt2 , pt3 ) Ö
extern "C" ret _Export _##fn(pt1 p1,pt2 p2,pt3 p3)ä return(fn(p1,p2,p3));ü
#define t4(ret , fn , pt1 , pt2 , pt3, pt4 ) Ö
extern "C" ret _Export _##fn(pt1 p1,pt2 p2,pt3 p3,pt4 p4)ä return(fn(p1,p2,p3,p4));ü
#define t5(ret , fn , pt1 , pt2 , pt3 , pt4 , pt5 ) Ö
extern "C" ret _Export _##fn(pt1 p1,pt2 p2,pt3 p3,pt4 p4,pt5 p5)äreturn(fn(p1,p2,p3,p4,p5));ü
#define v0( fn ) Ö
extern "C" void _Export _##fn()ä (fn());ü
#define v1( fn , pv1 )    Ö
extern "C" void _Export _##fn(pv1 p1)ä (fn(p1));ü
#define v2( fn , pv1 , pv2 )    Ö
extern "C" void _Export _##fn(pv1 p1,pv2 p2)ä (fn(p1,p2));ü
#define v3( fn , pv1, pv2, pv3)    Ö
extern "C" void _Export _##fn(pv1 p1,pv2 p2,pv3 p3)ä (fn(p1,p2,p3));ü
#define v4( fn , pv1, pv2, pv3, pv4)    Ö
extern "C" void _Export _##fn(pv1 p1,pv2 p2,pv3 p3,pv4 p4)ä (fn(p1,p2,p3,p4));ü
#define v5(fn , pv1, pv2, pv3, pv4 ,pv5)    Ö
extern "C" void _Export _##fn(pv1 p1,pv2 p2,pv3 p3,pv4 p4,pv5 p5)ä(fn(p1,p2,p3,p4,p5));ü
#endif
#endif



