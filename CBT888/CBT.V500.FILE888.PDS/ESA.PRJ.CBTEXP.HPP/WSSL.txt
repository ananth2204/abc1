#ifndef   INCLUDE_WSSL
#define   INCLUDE_WSSL
#include  "gskssl.hpp"
#include  "wcgi.hpp"
#include  "qfssglbl.hpp"
#include  "mchain.hpp"

#define mStr( n ,a ) _mStr(n, (unsigned char *)a ,sizeof(a) )

#define MAX_USERID 8

#define WWA_ERROR           "WW10"
#define WWA_INFO            "WW11"
#define WWA_CLIENT_CERT     "WW12"
#define WWA_CLIENT_AUTH     "WW13"
#define WWA_CLIENT_ERROR    "WW14"

#define WSSL_INFO            9701
#define WSSL_INFO_CERT       9702
#define WSSL_ERROR_SOC_INIT  9703
#define WSSL_ERROR_GSK       9704
#define WSSL_ERROR_CERT_USER 9705
#define WSSL_ERROR_CERTLIST  9706
#define WSSL_CLIENT_AUTH_RACF 9707
#define WSSL_CLIENT_AUTH_CERTIFICATE      9708
#define WSSL_CLIENT_CERTIFICATE_UNDEFINED 9709
#define WSSL_SOCKET_SELECT_TIMEOUT        9720
#define WSSL_SOCKET_SELECT_ERROR          9721
const char * iCN = "CN(";
const char * iT  = "T(";
const char * iOU = "OU(";
const char * iO  = "O(";
const char * iLOC= "L(";
const char * iSP = "SP(";
const char * iC  = "C";
const char * GLOBAL_CERTLIST = "<GlobalCertificateList>";

enum CLIENT_AUTH_TYPE ä
  CLIENT_AUTH_PASSTHRU     = 0,
  CLIENT_AUTH_RACF_USERID     = 1,
  CLIENT_AUTH_RACF_CERTIFICATE = 2,
  CLIENT_AUTH_CERTLIST     = 3 ü;

typedef struct _mE äconst char *t;int n;ü mE;

const  mE hsDefsÄÜ = ä
     ä"GSK_AS_SERVER_WITH_CLIENT_AUTH",int(GSK_AS_SERVER_WITH_CLIENT_AUTH)ü,
     ä"GSK_AS_SERVER",int(GSK_AS_SERVER)ü,
     äNULL,-1ü
   ü;
const  mE clientAuthListÄÜ = ä
  ä"PASSTHRU",int(CLIENT_AUTH_PASSTHRU)ü,
  ä"RACF_USERID",int(CLIENT_AUTH_RACF_USERID)ü,
  ä"RACF_CERTIFICATE",int(CLIENT_AUTH_RACF_CERTIFICATE)ü,
  ä"CERTLIST",int(CLIENT_AUTH_CERTLIST)ü,
  äNULL,-1üü;

class certList :public chainE
ä
private:
  CGI    * cgi;
  STRING sCN;
  STRING sOU;
  STRING sO;
  STRING sLOC;
  STRING sSP;
  STRING sC;
  STRING  user;
public:
  certList();
  certList(CGI *,char *,char *);
  virtual ßcertList();
  char * check(gsk_cert_info *);
public:
  static mCHAIN list;
private:
  void init();
ü;

class SslCGI:public CGI
ä
private:
  gsk_soc_init_data socInit;
  gsk_soc_data *  pSocData;
  CLIENT_AUTH_TYPE   clientAuth;
  int     _rc;
  int     msgSupressFlag;
  char *   userid;
  char *   password;
  int      clientOk;
public:
   SslCGI();
   SslCGI(pWWA,void *,void *);
   virtual ßSslCGI();
   sendN(char *,int);
   int receiveN(char *,int,int);
   int cleanup();
   int userAuthenticate();
private:
   void init();
   int initSsl();
   int initSocket();
   int gskCode(const char *,unsigned char *,size_t ,mE*);
   char * gskDef(int);
   char * _mStr(const char *,unsigned char *,size_t);
   long  mLong(const char *t,void *v);
ü;

#endif
