#pragma pack(packed)

struct stcb ä
  struct ä
    unsigned char  _stcbstcbÄ4Ü; /* ACRONYM IN EBCDIC -STCB-             */
    void          *_stcbracp;    /* POINTER TO RACF DATA FOR THIS   @D6A */
    ü stcbegin;
  void          *stcbdivf;             /* POINTER TO 1ST DOA (DIV OBJECT  @L1A                */
  void          *stcbdivl;             /* POINTER TO LAST DOA FOR TCB.    @L1A                */
  unsigned char  stcbafnsÄ2Ü;          /* ORIGINAL CPU AFFINITY SAVE AREA                     */
  short int      stcbctsc;             /* Number of consecutive dispatches@LIC                */
  void          *stcbvssa;             /* ADDRESS OF VECTOR STATUS SAVE AREA                  */
  unsigned char  stcbvafn;             /* VECTOR AFFINITY AND STATUS SAVED                    */
  unsigned char  stcbflg1;             /* FLAG BYTE                                           */
  unsigned char  _filler1Ä2Ü;          /* Reserved                        @LRC                */
  void          *stcbvfrb;             /* ADDRESS OF THE RB STOPPED BY THE                    */
  void          *stcbalov;             /* WORK UNIT ACCESS LIST VIRTUAL   @L2C                */
  void          *stcbald;              /* WORK UNIT ACCESS LIST           @L2C                */
  void          *stcbducv;             /* VIRTUAL ADDRESS OF THE DUCT.    @L2C                */
  void          *stcbducr;             /* REAL ADDRESS OF THE DUCT.       @L2C                */
  struct ä
    int            _stcbar0;  /* ACCESS REGISTER 0 SAVE AREA.    @L2A */
    int            _stcbar1;  /* ACCESS REGISTER 1 SAVE AREA.    @L2A */
    int            _stcbar2;  /* ACCESS REGISTER 2 SAVE AREA.    @L2A */
    int            _stcbar3;  /* ACCESS REGISTER 3 SAVE AREA.    @L2A */
    int            _stcbar4;  /* ACCESS REGISTER 4 SAVE AREA.    @L2A */
    int            _stcbar5;  /* ACCESS REGISTER 5 SAVE AREA.    @L2A */
    int            _stcbar6;  /* ACCESS REGISTER 6 SAVE AREA.    @L2A */
    int            _stcbar7;  /* ACCESS REGISTER 7 SAVE AREA.    @L2A */
    int            _stcbar8;  /* ACCESS REGISTER 8 SAVE AREA.    @L2A */
    int            _stcbar9;  /* ACCESS REGISTER 9 SAVE AREA.    @L2A */
    int            _stcbar10; /* ACCESS REGISTER 10 SAVE AREA.   @L2A */
    int            _stcbar11; /* ACCESS REGISTER 11 SAVE AREA.   @L2A */
    int            _stcbar12; /* ACCESS REGISTER 12 SAVE AREA.   @L2A */
    int            _stcbar13; /* ACCESS REGISTER 13 SAVE AREA.   @L2A */
    int            _stcbar14; /* ACCESS REGISTER 14 SAVE AREA.   @L2A */
    int            _stcbar15; /* ACCESS REGISTER 15 SAVE AREA.   @L2A */
    ü stcbars;
  void          *stcblssd;             /* VIRTUAL ADDRESS OF THE LSSD     @L2A                */
  void          *stcblsdp;             /* LINKAGE STACK ENTRY DESCRIPTOR  @L2A                */
  struct ä
    void          *_stcbrmef; /* POINTER TO HEAD OF TASK RELATED @L2A */
    void          *_stcbrmel; /* POINTER TO TAIL OF TASK RELATED @L2A */
    ü stcbrme;
  void          *stcbestk;             /* VIRTUAL ADDRESS OF THE LINKAGE  @L2A                */
  unsigned char  stcbflg2;             /* FLAG BYTE                       @L2A                */
  unsigned char  stcbflg3;             /* FLAG BYTE                       @D2A                */
  short int      stcbnstp;             /* COUNT OF REQUESTS TO IGNORE SRB @P2C                */
  void          *stcbtlsd;             /* ADDRESS OF TASK RELATED LSSD    @D1A                */
  void          *stcbtlsp;             /* ADDRESS OF TASK RELATED INITIAL @D1A                */
  unsigned char  stcbttknÄ16Ü;         /* TTOKEN FOR THIS TASK            @L3A                */
  void          *stcbaloc;             /* POINTER TO DYNAMIC STORAGE      @D3A                */
  unsigned char  stcbr0a4;             /* RESERVED.                       @LZC                */
  unsigned char  stcbcryp;             /* Crypto flags.                   @LZA                */
  unsigned char  stcbtafaÄ2Ü;          /* Transient feature affinity.     @LGA                */
  double         stcbvtme;             /* VECTOR TIME.                    @P1C                */
  int            stcbmemc;             /* Count of XCF members under this @D8C                */
  unsigned char  stcbxcff;             /* XCF FLAG.                       @L4A                */
  unsigned char  stcbflg4;             /* Flag byte 4.                    @LFA                */
  unsigned char  stcbflg5;             /* Flag byte 5.                    @LFA                */
  unsigned char  stcbflg6;             /* Flag byte 6.                    @LFA                */
  void          *stcbdfts;             /* ADDRESS OF THE DFP-SMSX         @L5A                */
  void          *stcbjsab;             /* ADDRESS OF JOB SCHEDULER        @D5A                */
  void          *stcbttcb;             /* TCPIP STCB Extension            @06A                */
  struct ä
    unsigned char  _stcbrgs1;    /* First Byte of Indicators        @LPA */
    unsigned char  _stcbrgs2Ä3Ü; /* Unused but reserved by CRG      @LPA */
    ü stcbrgsv;
  void          *stcbnttp;             /* Address of task level           @L8A                */
  int            stcbcon_;             /* NUMBER OF IXLCONNS IN EFFECT    @L9A                */
  struct ä
    short int      _stcbarct; /* NUMBER OF REFERENCE PATTERNS    @L6A */
    short int      _stcbdrct; /* NUMBER OF REFERENCE PATTERNS    @L6A */
    ü stcbrcts;
  unsigned char  stcbdfpÄ4Ü;           /* RESERVED FOR USE BY DFP.        @03A                */
  void          *stcbotcb;             /* Address of OpenMVS Task         @LDA                */
  void          *stcbcdxh;             /* ADDRESS OF THE JOB PACK QUEUE   @LCA                */
  void          *stcbsjst;             /* ADDRESS OF THE LOCAL STORAGE    @D7A                */
  void          *stcbatad;             /* Address of the ATTACH SVC in    @P4A                */
  void          *stcbweb;              /* Address of task's WEB.          @LHC                */
  int            stcbseqn;             /* RB Sequence Number Counter.     @LEA                */
  short int      stcbxcnt;             /* Count of currently outstanding  @P5A                */
  unsigned char  stcbcons;             /* Console Flag.                   @LTC                */
  unsigned char  stcbflg7;             /* Flag byte 7.                    @P9C                */
  int            stcbpecb;             /* ECB used internally by RTM      @LJA                */
  void          *stcbixgl;             /* Pointer to SLC task related     @LKA                */
  void          *stcbdeta;             /* Address of Task being Detached by                   */
  void          *stcbpque;             /* Address of the next Task that                       */
  unsigned char  stcbcnzlÄ4Ü;          /* Count of Console resources held @PKA                */
  void          *stcbstsb;             /* Address of the STSB (IWMSTSB).  @LNA                */
  unsigned char  stcbeutkÄ8Ü;          /* Execution unit token for this task                  */
  void          *stcbencr;             /* Address of the root task in the                     */
  int            stcbencc;             /* Count of subtasks that have joined                  */
  void          *stcbdb2;              /* Token used by DB/2.             @P7A                */
  unsigned char  stcbr120Ä4Ü;          /* Reserved.                       @PCC                */
  unsigned char  stcbpmomÄ4Ü;          /* Address of purge-only Mother Task                   */
  unsigned char  stcboflgÄ4Ü;          /* Openedition flags               @P8A                */
  void          *stcbbcba;             /* Address of SOMObjects data structure                */
  union ä
    unsigned char  _stcbflcsÄ4Ü; /* CS-serialized flags             @LYA */
    struct ä
      unsigned char  _stcbflc0; /* Byte 0 of CS-serialized flags   @LYA */
      unsigned char  _stcbflc1; /* Byte 1 of CS-serialized flags   @LYA */
      unsigned char  _stcbflc2; /* Byte 2 of CS-serialized flags   @LYA */
      unsigned char  _stcbflc3; /* Byte 3 of CS-serialized flags   @LYA */
      ü _stcb_struct1;
    ü _stcb_union1;
  unsigned char  stcbvreqÄ4Ü;          /* State of outstanding VTAM       @PBA                */
  unsigned char  stcbafprÄ100Ü;        /* FP save area: 1,3,5,7-15,FPCR   @LSA                */
  unsigned char  stcbfpfl;             /* FP Flags                        @PIC                */
  unsigned char  stcbipkf;             /* Initial PKF. This is used to deal                   */
  unsigned char  stcbipkmÄ2Ü;          /* Initial PKM. This is used to deal                   */
  unsigned char  stcbg64hÄ64Ü;         /* High halves of 64-bit GPRs      @LWA                */
  double         stcb_ttime;           /* Aligned copy of TCBTTIME        @M4A                */
  double         stcb_ttime_on_ifa;    /* IFA TCB time                    @M4A                */
  double         stcb_ttime_on_cp;     /* Standard CP TCB time            @0CA                */
  void          *stcbalc;              /* Allocation field                @0AA                */
  void          *stcbuser;             /* User field.                     @M3A                */
  void          *stcbotca;             /* Address of OTCB Alternate       @M1A                */
  void          *stcblaa;              /* Address of LE Library Anchor Area                   */
  struct ä
    void          *_stcbpie;           /* Address of PIE control block    @LXA */
    unsigned char  _stcbpmsk;          /* Program Mask at time of SPIE         */
    unsigned char  _stcbflg8;          /* ESPIE flags                     @LXA */
    unsigned char  _stcbr20eÄ2Ü;       /* Reserved                        @LXA */
    struct ä
      unsigned char  _stcbrbpÄ4Ü;  /* Address of RB which had the          */
      struct ä
        unsigned char  _stcbdxc;     /* @LXA                                 */
        unsigned char  _stcbilc;     /* Instruction length code         @LXA */
        unsigned char  _stcbintcÄ2Ü; /* Program Interrupt Code          @LXA */
        ü stcbilcp;
      unsigned char  _stcbppswÄ8Ü; /* PSW at program interrupt        @LXA */
      ü stcbprms;
    void          *_stcbrpp;           /* Recovery PIE PICA address       @LXA */
    void          *_stcbfrpq;          /* Free RPP queue header           @LXA */
    void          *_stcblscr;          /* Linkage Stack control register       */
    unsigned char  _stcbsarsÄ64Ü;      /* Access Registers at time of error    */
    unsigned char  _stcbworkÄ4Ü;       /* Work area used during ESPIE     @LXA */
    void          *_stcbppie;          /* Address of public storage EPIE       */
    void          *_stcbcpie;          /* PIE being used by the current        */
    unsigned char  _stcbs64hÄ64Ü;      /* 64-bit GPR high halves for ESPIE     */
    unsigned char  _stcbs64Ä128Ü;      /* Entire 64-bit GPRs for ESPIE    @LXA */
    unsigned char  _stcbr338Ä52Ü;      /* Reserved                        @0EC */
    int            _stcbxrct;          /* XES request count                    */
    unsigned char  _stcbsbeaÄ8Ü;       /* Breaking Event Address for ESPIE     */
    unsigned char  _stcbsc64Ä128Ü;     /* Entire 64-bit Control Regs for ESPIE */
    unsigned char  _stcbptr2;          /* TEA AR number for ESPIE         @LXA */
    unsigned char  _stcbr3fdÄ3Ü;       /* Reserved                        @LXA */
    void          *_stcbpvad;          /* TEA (32-bit) for ESPIE          @LXA */
    unsigned char  _stcbpv64Ä8Ü;       /* TEA (64-bit) for ESPIE          @LXA */
    struct ä
      unsigned char  _stcbodxc;    /* Original DXC                    @PGA */
      unsigned char  _stcboilc;    /* Original ILC                    @PGA */
      unsigned char  _stcbopicÄ2Ü; /* Original PIC                    @PGA */
      ü stcbolcp;
    unsigned char  _stcbr40cÄ4Ü;       /* Reserved for SCA expansion      @H1C */
    double         _stcb_ttime_on_sup; /* SUP TCB time                    @H1A */
    ü stcbsca;
  double         stcb_ttime_ifa_on_cp; /* IFA ON CP TCB TIME              @M5A                */
  double         stcb_ttime_sup_on_cp; /* SUP ON CP TCB TIME              @M5A                */
  double         stcbgtcb;             /* Address of GTCB (mapped by ISGYGTCB)                */
  double         stcbhp1;              /* Pointer to Heap Pool 1 structure                    */
  double         stcbcpha;             /* Pointer to authorized cell pool                     */
  struct ä
    void          *_stcb_his_tcb_;     /* Address of this TCB.  Note TCBs   */
    short int      _stcb_his_homeasid; /* Home ASID where the TCB is        */
    short int      _stcb_his_token;    /* A token used to identify when the */
    ü stcb_his_area;
  unsigned char  stcbr448Ä16Ü;         /* Reserved for expansion          @M8C                */
  struct ä
    unsigned char  _tiocnjobÄ8Ü; /* -         JOB NAME */
    ü stcbend;
  struct ä
    struct ä
      unsigned char  _tiocpstnÄ8Ü; /* -         8-BYTE PROC STEP NAME FOR PROCS     @P1A */
      ü tiocstpn;
    unsigned char  _tiocjstnÄ8Ü; /* -         8-BYTE JOBSTEP NAME FOR PROCS       @P1A */
    ü tiocstep;
  char           tioelngh;             /* -          LENGTH, IN BYTES, OF THIS ENTRY          */
  unsigned char  tioestta;             /* -            STATUS BYTE A                          */
  struct ä
    unsigned char  _tioewtct; /* -          DURING ALLOCATION, NUMBER OF DEVICES */
    unsigned char  _tioelink; /* -          DURING ALLOCATION, LINK TO THE       */
    ü tioerloc;
  unsigned char  tioeddnmÄ8Ü;          /* -          DD NAME                                  */
  unsigned char  tioejfcbÄ3Ü;          /* -          SWA virtual address token, mapped        */
  unsigned char  tioesttc;             /* -            STATUS BYTE C.  USED DURING ALLOCATION */
  unsigned char  tioesttb;             /* -            STATUS BYTE B - DURING ALLOCATION AND  */
  int            tioefsrt : 24;        /* -          DURING PROBLEM PROGRAM, ADDRESS OF UCB.  */
  unsigned char  _filler2;             /* -          RESERVED                                 */
  char           tiopnslt;             /* -          NUMBER OF SLOTS FOR POOL                 */
  unsigned char  _filler3;             /* -          RESERVED                                 */
  char           tiopnsrt;             /* -          NUMBER OF DEVICES (FILLED SLOTS)         */
  unsigned char  tioppoolÄ8Ü;          /* -          POOL NAME                                */
  unsigned char  tiopsttb;             /* -          STATUS OF SLOT                           */
  int            tiopslot : 24;        /* -          UCB ADDRESS OR EMPTY SLOT                */
  unsigned char  tiotfendÄ4Ü;          /* -          FINAL END OF THE TIOT - BINARY ZEROS     */
  ü;

#define stcbstcb          stcbegin._stcbstcb
#define stcbracp          stcbegin._stcbracp
#define stcbar0           stcbars._stcbar0
#define stcbar1           stcbars._stcbar1
#define stcbar2           stcbars._stcbar2
#define stcbar3           stcbars._stcbar3
#define stcbar4           stcbars._stcbar4
#define stcbar5           stcbars._stcbar5
#define stcbar6           stcbars._stcbar6
#define stcbar7           stcbars._stcbar7
#define stcbar8           stcbars._stcbar8
#define stcbar9           stcbars._stcbar9
#define stcbar10          stcbars._stcbar10
#define stcbar11          stcbars._stcbar11
#define stcbar12          stcbars._stcbar12
#define stcbar13          stcbars._stcbar13
#define stcbar14          stcbars._stcbar14
#define stcbar15          stcbars._stcbar15
#define stcbrmef          stcbrme._stcbrmef
#define stcbrmel          stcbrme._stcbrmel
#define stcbrgs1          stcbrgsv._stcbrgs1
#define stcbrgs2          stcbrgsv._stcbrgs2
#define stcbarct          stcbrcts._stcbarct
#define stcbdrct          stcbrcts._stcbdrct
#define stcbflcs          _stcb_union1._stcbflcs
#define stcbflc0          _stcb_union1._stcb_struct1._stcbflc0
#define stcbflc1          _stcb_union1._stcb_struct1._stcbflc1
#define stcbflc2          _stcb_union1._stcb_struct1._stcbflc2
#define stcbflc3          _stcb_union1._stcb_struct1._stcbflc3
#define stcbpie           stcbsca._stcbpie
#define stcbpmsk          stcbsca._stcbpmsk
#define stcbflg8          stcbsca._stcbflg8
#define stcbr20e          stcbsca._stcbr20e
#define stcbrbp           stcbsca.stcbprms._stcbrbp
#define stcbdxc           stcbsca.stcbprms.stcbilcp._stcbdxc
#define stcbilc           stcbsca.stcbprms.stcbilcp._stcbilc
#define stcbintc          stcbsca.stcbprms.stcbilcp._stcbintc
#define stcbppsw          stcbsca.stcbprms._stcbppsw
#define stcbrpp           stcbsca._stcbrpp
#define stcbfrpq          stcbsca._stcbfrpq
#define stcblscr          stcbsca._stcblscr
#define stcbsars          stcbsca._stcbsars
#define stcbwork          stcbsca._stcbwork
#define stcbppie          stcbsca._stcbppie
#define stcbcpie          stcbsca._stcbcpie
#define stcbs64h          stcbsca._stcbs64h
#define stcbs64           stcbsca._stcbs64
#define stcbr338          stcbsca._stcbr338
#define stcbxrct          stcbsca._stcbxrct
#define stcbsbea          stcbsca._stcbsbea
#define stcbsc64          stcbsca._stcbsc64
#define stcbptr2          stcbsca._stcbptr2
#define stcbr3fd          stcbsca._stcbr3fd
#define stcbpvad          stcbsca._stcbpvad
#define stcbpv64          stcbsca._stcbpv64
#define stcbodxc          stcbsca.stcbolcp._stcbodxc
#define stcboilc          stcbsca.stcbolcp._stcboilc
#define stcbopic          stcbsca.stcbolcp._stcbopic
#define stcbr40c          stcbsca._stcbr40c
#define stcb_ttime_on_sup stcbsca._stcb_ttime_on_sup
#define stcb_his_tcb_     stcb_his_area._stcb_his_tcb_
#define stcb_his_homeasid stcb_his_area._stcb_his_homeasid
#define stcb_his_token    stcb_his_area._stcb_his_token
#define tiocnjob          stcbend._tiocnjob
#define tiocpstn          tiocstep.tiocstpn._tiocpstn
#define tiocjstn          tiocstep._tiocjstn
#define tioewtct          tioerloc._tioewtct
#define tioelink          tioerloc._tioelink

/* Values for field "stcbvafn" */
#define stcbvmck         0x80 /* VECTOR STATUS LOST DUE TO MACHINE                  */
#define stcbslid         0x40 /* LOGICAL CPU ID MASK                                */
#define stcbvisa         0x20 /* VECTOR STATUS SAVED IN VSSA                        */
#define stcbslci         0x0F /* IF STCBSLID IS ON THEN THIS NIBBLE                 */

/* Values for field "stcbflg1" */
#define stcbpiq          0x80 /* INDICATES TO STAGE 3 EXIT EFFECTOR                 */
#define stcbvfrv         0x40 /* INDICATES THE USER IS NOT RACF  @01A               */
#define stcbvfrd         0x20 /* INDICATES THE VECTOR SLIH HAS   @01A               */
#define stcbsst          0x10 /* Indicates that the task is a    @LUA               */
#define stcbclup         0x08 /* Cleanup only                  991006               */

/* Values for field "stcbflg2" */
#define stcbrmet         0x80 /* IF ON, INDICATES TASK IS IN     @L2A               */
#define stcbinrt         0x40 /* The task is processing within RTLS.                */
#define stcbprop         0x20 /* ATTACH is propagating the PKM.  @09A               */

/* Values for field "stcbflg3" */
#define stcbncnl         0x80 /* TASK IS NOT SUBJECT TO CANCEL   @D2A               */
#define stcbnoab         0x40 /* NCNL EXTENSION                  @PDA               */
#define stcbrtnc         0x20 /* ABTERMS OF THIS TASK            @PDC               */

/* Values for field "stcbcryp" */
#define stcbuics         0x80 /* This task is using ICSF Crypto  @LZA               */

/* Values for field "stcbxcff" */
#define stcbsusm         0x80 /* Bit flag for use by XCF.        @LAC               */

/* Values for field "stcbflg4" */
#define stcbenfl         0x80 /* If on, indicates task issued    @LFA               */
#define stcbvsmm         0x40 /* If on, indicates task has a     @PFA               */

/* Values for field "stcbflg5" */
#define stcbunck         0x80 /* If on, user requests no         @LLA               */
#define stcbenck         0x40 /* If on, checkpoint not honored   @LLA               */
#define stcboptc         0x20 /* If on, indicates task is        @LMA               */

/* Values for field "stcbflg6" */
#define stcbsatf         0x80 /* If on, indicates that RACF      @08A               */

/* Values for field "stcbrgs1" */
#define stcbrgrm         0x80 /* Task has registered as one or   @LPA               */
#define stcbrgem         0x40 /* Task has registered as one or   @LPA               */

/* Values for field "stcbdfp" */
#define stcboam          0x80 /* TASK IS A USER OF OAM RESOURCES.@03A               */

/* Values for field "stcbcons" */
#define stcbwto          0x80 /* Jobstep TCB issued a WTO        @LTA               */

/* Values for field "stcbflg7" */
#define stcbrtls         0x80 /* Internal use only               @P9M               */
#define stcbrtla         0x40 /* Internal use only               @P9M               */

/* Values for field "stcbflc0" */
#define stcbtrst         0x80 /* RACF program control trust      @LYA               */
#define stcbntrs         0x40 /* RACF program control non-trust  @LYA               */
#define stcbpsen         0x20 /* Copy of RCVTPSEN at the time    @LYA               */
#define stcbpsba         0x10 /* RACF basic program security     @LYA               */

/* Values for field "stcbfpfl" */
#define stcbbfp          0x80 /* Extended FP saving rqd          @LSA               */
#define stcbns64         0x20 /* Used by ESPIE processing to tell                   */
#define stcbvss          0x10 /* Vector status saving. This bit                     */

/* Values for field "stcbflg8" */
#define stcbtype         0x80 /* If 1 then an ESPIE exit is in                      */
#define stcblesr         0x40 /* If 1 then the ESPIE SRB should                     */

/* Values for field "stcb_his_tcb_" */
#define stcb_his_is_wait 0x80 /* This bit is on when a wait has                     */

/* Values for field "stcb_his_homeasid" */
#define stcb_his_is_srb  0x80 /* This bit is on when the HIS data                   */

/* Values for field "tioestta" */
#define tiosltyp         0x80 /* -        NONSTANDARD LABEL (TAPE) (OS/VS1)         */
#define tiospltp         0x40 /* -        DURING ALLOCATION, SPLIT CYLINDER         */
#define tiosplts         0x20 /* -        DURING ALLOCATION, SPLIT CYLINDER         */
#define tiosjblb         0x10 /* -        JOBLIB INDICATOR                          */
#define tiosdads         0x08 /* -        DADSM ALLOCATION NECESSRY                 */
#define tioslabl         0x04 /* -        LABELED TAPE.  IF BIT 0 IS OFF, SL OR     */
#define tiosdsp1         0x02 /* -        REWIND/UNLOAD THE TAPE VOLUME (TAPE)      */
#define tiosdsp2         0x01 /* -        REWIND THE TAPE VOLUME (TAPE)             */

/* Values for field "tioelink" */
#define tiosyout         0x80 /* -        THIS IS A SYSOUT DATA SET THAT CONTAINS   */
#define tiotrv01         0x40 /* -        RESERVED                           MDC006 */
#define tiotterm         0x20 /* -        DEVICE IS A TERMINAL                      */
#define tioedynm         0x10 /* -        DYNAM CODED ON DD STATEMENT               */
#define tioeqnam         0x08 /* -        QNAME CODED ON DD STATEMENT               */
#define tioesyin         0x04 /* -        ENTRY FOR SPOOLED SYSIN DATA SET          */
#define tioesyot         0x02 /* -        ENTRY FOR SPOOLED SYSOUT DATA SET         */
#define tioessds         0x02 /* -        ENTRY FOR A SUBSYSTEM DATA SET            */
#define tiotrem          0x01 /* -        ENTRY FOR A REMOTE DEVICE          ICB340 */

/* Values for field "tioesttc" */
#define tiosdkcr         0x80 /* -        MAIN STORAGE OR DASD ADDRESS              */
#define tiosdefr         0x40 /* -        DEFERRED MOUNT                            */
#define tiosaffp         0x20 /* -        PRIMARY UNIT AFFINITY                     */
#define tiosaffs         0x10 /* -        SECONDARY UNIT AFFINITY                   */
#define tiosvolp         0x08 /* -        PRIMARY VOLUME AFFINITY                   */
#define tiosvols         0x04 /* -        SECONDARY VOLUME AFFINITY                 */
#define tiosbalp         0x02 /* -        PRIMARY SUBALLOCATE                       */
#define tiosbals         0x01 /* -        SECONDARY SUBALLOCATE                     */

/* Values for field "tioesttb" */
#define tiosused         0x80 /* -        DATA SET IS ON DEVICE                     */
#define tiosreqd         0x40 /* -        DATA SET WILL USE DEVICE                  */
#define tiospvio         0x20 /* -        DEVICE VIOLATES SEPARATION                */
#define tiosvlsr         0x10 /* -        VOLUME SERIAL PRESENT                     */
#define tiossetu         0x08 /* -        SETUP MESSAGE REQUIRED                    */
#define tiosmntd         0x04 /* -        IF 0, DELETE UNLOADED VOLUME IF UNLOAD    */
#define tiosunld         0x02 /* -        UNLOAD REQUIRED                           */
#define tiosverf         0x01 /* -        VERIFICATION REQUIRED                     */

#pragma pack(reset)
