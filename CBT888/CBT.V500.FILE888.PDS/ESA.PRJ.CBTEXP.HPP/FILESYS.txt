#ifndef INCLUDE_FILESYS
#define INCLUDE_FILESYS
#include "stdio.hpp"
#include "filevsm.hpp"
#include "mvsbase.hpp"
#include "buffsys.hpp"
#include "mchain.hpp"

#define STDIN    "SYSIN"
#define STDOUT   "SYSPRINT"
#define STDERR   "SYSTERM"

extern char * _stdin ;
extern char * _stdout;
extern char * _stderr;

extern FILE*  stdin;
extern FILE*  stdout;
extern FILE*  stderr;
//---------------------------------------------------------------------
//---------------------------------------------------------------------
//---------------------------------------------------------------------


class rFILE: public chainE,
             public KSDS
ä
private:
public:
  rFILE(const char * = "CFSSTD");
  ßrFILE();
ü;

//---------------------------------------------------------------------
//---------------------------------------------------------------------
//---------------------------------------------------------------------

class rFILESYSTEM: public mCHAIN
ä
private:
  CHAINITER * iter;
  int counter;
public:
  rFILESYSTEM(int);
  ßrFILESYSTEM();
  rFILE * get(const char *);
ü;

extern rFILESYSTEM *_rFILESYSTEM;
class  FILESYSTEM;
extern FILESYSTEM *_FILESYSTEM;

//---------------------------------------------------------------------
//---------------------------------------------------------------------
//---------------------------------------------------------------------

const int MAXddname   = 256;
const int MAXmember   = 256;
const int MAXfilewait = 30;
enum FILE_TYPE ä FILE_QSAM , FILE_VSAM ü;

class FILE: public chainE,
      public mERROR
ä
private:
   rFILE * rfile;
   RBUFF * rb;
   LBUFF * lb;

   STRING *filename;              // filename
   STRING *ddname;                // rFILE name
   STRING *member;                // key
   STRING *mode;                  // file mode ( r w a b )
   STRING *am;                    // access ( seq , rel , term )
   STRING *amparms;               // amparms - DCB

   char cflag;                   // capablilty flags
   char props;                   // properity flags
   char state;                   // file state
   char layout;                  // file layout;
   char enq;                     // enq flag
   char recordtype;              // record type flag
   fattrib attrib;               // fattrib

   static int filecount;
   int filenumber;

   char UngetcFlag;              // if ungetc set
   char UngetcChar;              // ungetc char

   int conuter;
   int errorcode;
   int actualoffset;            // actual offset for unix io

  FILE_TYPE    file_type;       // type flag
  void *  qsam_file;            // if qsam FILE *
  void setNames(const char *);
  void setUnix(int );
  void setOption(const char *, const char *, const char *);
  void setBasics();
  void initFILESYS();
  int  Enq();
  int  Deq();
public:
  virtual ßFILE();
  FILE(const char * FileName, int UnixFlags);
  FILE(const char * FileName, const char * Mode,
               const char * Am = "seq",
               const char * Amparms = "");

// return values

  char * getFileName()äreturn (char *)(* filename); ü
  char * getMember()äreturn (char*)(* member); ü
  void   setMember(const STRING & m)ä *member = m; ü

  int    getFileNumber()äreturn filenumber; ü
  rFILE* getrFile()äreturn rfile;ü
  RBUFF* getRbuff()äreturn rb;ü
  LBUFF* getLbuff()äreturn lb;ü
  STRING getKey()äreturn *member;ü

  char& State()ä return state;ü
  char& Cflag()ä return cflag;ü
  char& Props()ä return props;ü
  char& Layout()ä return layout;ü
  fattrib * Attrib()ä return &attrib;ü
  int iserror();
  void markerror(int =0);
  int isOk(char,char=__EOF);
  int isVSAM()ä return (file_type == FILE_VSAM ) ; ü
  int isQSAM()ä return (file_type == FILE_QSAM) ; ü
  int isRecordType()äreturn(recordtype);ü
  void   setFile(FILE * f)ä qsam_file = f;ü
  FILE * getFile()ä return (FILE *)qsam_file ; ü

// called methods to realize i/O

   int getc();                    // get the next character
   int ungetc(int );              // storec back the next character
   int putc(char);                // put out the next char
   int gets(char *,size_t);       // get string
   int puts(char *,size_t);       // put string
   int getss(char * ,size_t);     //
   int putss(char * , char);      // second falg to indicate nl
   long getPos();                 //
   long setPos(long,int);         // set pos according req type
   int getPos(fpos_t *);          //
   int setPos(fpos_t *);          //
   int Out();
   int In();

   int findNext();

   int flush();
   int close();
   int del();
   int copy(FILE *f)äreturn  0;ü        // ||| not yet|||
ü;

//---------------------------------------------------------------------
//---------------------------------------------------------------------
//---------------------------------------------------------------------

class FILESYSTEM: public mCHAIN
ä
private:
   CHAINITER  * iter;
      int    counter;
      FILE * stdin;
      FILE * stdout;
      FILE * stderr;
      char * termid;
      char * userid;
public:
      FILESYSTEM(const char * , const char * , const char * );
      ßFILESYSTEM();
      FILE *get(int FileNumber);
      FILE *get(const char * FileName);
      char *getTerminalId()ä return termid;ü
      char *getUserId()ä return userid;ü

      FILE * getTmpFile()ä return new FILE(getTmpNam((char*)0),"w"); ü
      char * getTmpNam(char * c)ä return "tempname";ü
ü;

class DataSetName : public chainE
ä
private:
  FILE_TYPE    file_type;       // type flag
public:
  DataSetName(char *,FILE_TYPE);
  int isQsam()ä return ( file_type == FILE_QSAM ) ; ü
  ßDataSetName()äü
ü;

class DataSetNames:public SORTEDmCHAIN
ä
private:
 CHAINITER * iter;
public:
 DataSetNames();
 ßDataSetNames();
 DataSetName * get(char *);
ü;

extern DataSetNames datasetnames;
FILE_TYPE getFileType(char *);

#endif
