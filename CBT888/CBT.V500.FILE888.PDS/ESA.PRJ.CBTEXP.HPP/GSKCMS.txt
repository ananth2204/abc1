??=if defined(__COMPILER_VER__)
   ??=pragma filetag("IBM-1047")
   ??=pragma nomargins nosequence
??=endif

/*********************************************************************/
/*                                                                   */
/*        Licensed Materials - Property of IBM                       */
/*        5694-A01                                                   */
/*        (C) Copyright IBM Corp. 2001                               */
/*                                                                   */
/*********************************************************************/

/*********************************************************************/
/*                                                                   */
/*    gskcms.h - Certificate Management Services                     */
/*                                                                   */
/*********************************************************************/

#ifndef _GSKCMS_H_
#define _GSKCMS_H_

#include <time.h>
#include <gsktypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/*********************************************************************/
/*  X.509 data types                                                 */
/*********************************************************************/

typedef enum {
    x509_alg_unknown                    = 0,

            /*  Digest algorithms  */
    x509_alg_md2Digest                  = 1,   /* 1.2.840.113549.2.2        */
    x509_alg_md5Digest                  = 2,   /* 1.2.840.113549.2.5        */
    x509_alg_sha1Digest                 = 3,   /* 1.3.14.3.2.26             */

            /*  Asymmetric encryption algorithms  */
    x509_alg_rsaEncryption              = 10,  /* 1.2.840.113549.1.1.1      */
    x509_alg_idDsa                      = 11,  /* 1.2.840.10040.4.1         */
    x509_alg_dhPublicNumber             = 12,  /* 1.2.840.10046.2.1         */

            /*  Signature algorithms  */
    x509_alg_md2WithRsaEncryption       = 20,  /* 1.2.840.113549.1.1.2      */
    x509_alg_md5WithRsaEncryption       = 21,  /* 1.2.840.113549.1.1.4      */
    x509_alg_sha1WithRsaEncryption      = 22,  /* 1.2.840.113549.1.1.5      */
    x509_alg_dsaWithSha1                = 23,  /* 1.2.840.10040.4.3         */

            /*  Password-based encryption algorithms  */
    x509_alg_pbeWithMd2AndDesCbc        = 30,  /* 1.2.840.113549.1.5.1      */
    x509_alg_pbeWithMd5AndDesCbc        = 31,  /* 1.2.840.113549.1.5.3      */
    x509_alg_pbeWithSha1AndDesCbc       = 32,  /* 1.2.840.113549.1.5.10     */
    x509_alg_pbeWithMd2AndRc2Cbc        = 33,  /* 1.2.840.113549.1.5.4      */
    x509_alg_pbeWithMd5AndRc2Cbc        = 34,  /* 1.2.840.113549.1.5.6      */
    x509_alg_pbeWithSha1AndRc2Cbc       = 35,  /* 1.2.840.113549.1.5.11     */
    x509_alg_pbeWithSha1And40BitRc2Cbc  = 36,  /* 1.2.840.113549.1.12.1.6   */
    x509_alg_pbeWithSha1And128BitRc2Cbc = 37,  /* 1.2.840.113549.1.12.1.5   */
    x509_alg_pbeWithSha1And40BitRc4     = 38,  /* 1.2.840.113549.1.12.1.2   */
    x509_alg_pbeWithSha1And128BitRc4    = 39,  /* 1.2.840.113549.1.12.1.1   */
    x509_alg_pbeWithSha1And3DesCbc      = 40,  /* 1.2.840.113549.1.12.1.3   */

            /*  Deprecated password-based encryption algorithms  */
    x509_alg_pb1WithSha1And128BitRc4    = 50,  /* 1.2.840.113549.1.12.5.1.1 */
    x509_alg_pb1WithSha1And40BitRc4     = 51,  /* 1.2.840.113549.1.12.5.1.2 */
    x509_alg_pb1WithSha1And3DesCbc      = 52,  /* 1.2.840.113549.1.12.5.1.3 */
    x509_alg_pb1WithSha1And128BitRc2Cbc = 53,  /* 1.2.840.113549.1.12.5.1.4 */
    x509_alg_pb1WithSha1And40BitRc2Cbc  = 54,  /* 1.2.840.113549.1.12.5.1.5 */

            /*  Symmetric encryption algorithms  */
    x509_alg_desCbcPad                  = 60,  /* 1.3.14.3.2.7              */
    x509_alg_desEde3CbcPad              = 61,  /* 1.2.840.113549.3.7        */
    x509_alg_rc2CbcPad                  = 62,  /* 1.2.840.113549.3.2        */
    x509_alg_rc4                        = 63,  /* 1.2.840.113549.3.4        */
    x509_alg_aesCbcPad                  = 64,  /*                           */

    x509_alg_maximum                    = 32767
} x509_algorithm_type;

typedef enum {
    x509_attr_unknown                   = 0,
    x509_attr_name                      = 1,   /* 2.5.4.41                   */
    x509_attr_surname                   = 2,   /* 2.5.4.4                    */
    x509_attr_givenName                 = 3,   /* 2.5.4.42                   */
    x509_attr_initials                  = 4,   /* 2.5.4.43                   */
    x509_attr_generationQualifier       = 5,   /* 2.5.4.44                   */
    x509_attr_commonName                = 6,   /* 2.5.4.3                    */
    x509_attr_localityName              = 7,   /* 2.5.4.7                    */
    x509_attr_stateOrProvinceName       = 8,   /* 2.5.4.8                    */
    x509_attr_organizationName          = 9,   /* 2.5.4.10                   */
    x509_attr_organizationalUnitName    = 10,  /* 2.5.4.11                   */
    x509_attr_title                     = 11,  /* 2.5.4.12                   */
    x509_attr_dnQualifier               = 12,  /* 2.5.4.46                   */
    x509_attr_countryName               = 13,  /* 2.5.4.6                    */
    x509_attr_emailAddress              = 14,  /* 1.2.840.113549.1.9.1       */
    x509_attr_domainComponent           = 15,  /* 0.9.2342.19200300.100.1.25 */
    x509_attr_streetAddress             = 16,  /* 2.5.4.9                    */
    x509_attr_postalCode                = 17,  /* 2.5.4.17                   */
    x509_attr_maximum                   = 32767
} x509_attribute_type;

typedef enum {
    x509_general_unknown                = 0,
    x509_general_rfc822Name             = 1,    /* RFC 822 name */
    x509_general_dnsName                = 2,    /* DNS name */
    x509_general_directoryName          = 3,    /* X.500 directory name */
    x509_general_uRI                    = 4,    /* Uniform resource name */
    x509_general_ipAddress              = 5,    /* IP address */
    x509_general_registeredId           = 6,    /* Registered identifier */
    x509_general_maximum                = 32767
} x509_general_type;

typedef enum {
    x509_name_unknown                   = 0,
    x509_name_dn                        = 1,    /* Distinguished name */
    x509_name_maximum                   = 32767
} x509_name_type;

typedef enum {
    x509_string_unknown                 = 0,
    x509_string_printable               = 1,    /* ASN.1 Printable string */
    x509_string_visible                 = 2,    /* ASN.1 Visible string */
    x509_string_teletex                 = 3,    /* ASN.1 Teletex string */
    x509_string_ia5                     = 4,    /* ASN.1 IA5 string */
    x509_string_utf8                    = 5,    /* ASN.1 UTF-8 string */
    x509_string_bmp                     = 6,    /* ASN.1 BMP string */
    x509_string_universal               = 7,    /* ASN.1 Universal string */
    x509_string_maximum                 = 32767
} x509_string_type;

typedef struct _x509_algorithm_identifier {
    x509_algorithm_type         type;
    gsk_oid                     identifier;
    gsk_buffer                  parameter;
} x509_algorithm_identifier;

typedef struct _x509_attribute_value {
    x509_string_type            stringType;
    gsk_buffer                  value;
} x509_attribute_value;

typedef struct _x509_attribute {
    x509_attribute_type         attributeType;
    gsk_oid                     identifier;
    int                         count;
    x509_attribute_value *      values;
} x509_attribute;

typedef struct _x509_rdn_attribute {
    x509_attribute_type         attributeType;
    x509_string_type            stringType;
    gsk_oid                     identifier;
    gsk_buffer                  name;
    gsk_octet                   rsvdÝ8¨;
} x509_rdn_attribute;

typedef struct _x509_rdn {
    int                         count;
    x509_rdn_attribute *        attributes;
} x509_rdn;

typedef struct _x509_rdn_sequence {
    int                         count;
    x509_rdn *                  rdns;
} x509_rdn_sequence;

typedef struct _x509_name {
    x509_name_type              type;
    union {
        x509_rdn_sequence       dn;
    } u;
} x509_name;

typedef struct _x509_general_name {
    x509_general_type           type;
    union {
        x509_name               directoryName;
        gsk_buffer              dnsName;
        gsk_buffer              ipAddress;
        gsk_oid                 registeredId;
        gsk_buffer              rfc822Name;
        gsk_buffer              uRI;
    } u;
    gsk_octet                   rsvdÝ8¨;
} x509_general_name;

typedef struct _x509_general_names {
    int                         count;
    x509_general_name *         names;
} x509_general_names;

typedef struct _x509_general_subtree {
    x509_general_name           base;
    gsk_int32                   minimum;
    gsk_boolean                 maximum_present;
    gsk_int32                   maximum;
} x509_general_subtree;

typedef struct _x509_general_subtrees {
    int                         count;
    x509_general_subtree *      subtrees;
} x509_general_subtrees;

typedef struct _x509_public_key_info {
    x509_algorithm_identifier   algorithm;
    gsk_bitstring               subjectPublicKey;
} x509_public_key_info;

/*********************************************************************/
/*  X.509 certificate extensions                                     */
/*********************************************************************/

typedef enum {
    x509_ext_unknown                    = 0,
    x509_ext_authorityInfoAccess        = 1,   /* 1.3.6.1.5.5.7.1.1 */
    x509_ext_authorityKeyIdentifier     = 2,   /* 2.5.29.35         */
    x509_ext_basicConstraints           = 3,   /* 2.5.29.19         */
    x509_ext_certificateIssuer          = 4,   /* 2.5.29.29         */
    x509_ext_certificatePolicies        = 5,   /* 2.5.29.32         */
    x509_ext_crlDistributionPoints      = 6,   /* 2.5.29.31         */
    x509_ext_crlNumber                  = 7,   /* 2.5.29.20         */
    x509_ext_crlReasonCode              = 8,   /* 2.5.29.21         */
    x509_ext_deltaCrlIndicator          = 9,   /* 2.5.29.27         */
    x509_ext_extKeyUsage                = 10,  /* 2.5.29.37         */
    x509_ext_holdInstructionCode        = 11,  /* 2.5.29.23         */
    x509_ext_invalidityDate             = 12,  /* 2.5.29.24         */
    x509_ext_issuerAltName              = 13,  /* 2.5.29.18         */
    x509_ext_issuingDistributionPoint   = 14,  /* 2.5.29.28         */
    x509_ext_keyUsage                   = 15,  /* 2.5.29.15         */
    x509_ext_nameConstraints            = 16,  /* 2.5.29.30         */
    x509_ext_policyConstraints          = 17,  /* 2.5.29.36         */
    x509_ext_policyMappings             = 18,  /* 2.5.29.33         */
    x509_ext_privateKeyUsagePeriod      = 19,  /* 2.5.29.16         */
    x509_ext_subjectAltName             = 20,  /* 2.5.29.17         */
    x509_ext_subjectDirectoryAttributes = 21,  /* 2.5.29.9          */
    x509_ext_subjectKeyIdentifier       = 22,  /* 2.5.29.14         */
    x509_ext_maximum                    = 32767
} x509_extension_type;

typedef enum {
    x509_distname_unknown               = 0,
    x509_distname_fullName              = 1,    /* Full name */
    x509_distname_relativeName          = 2,    /* Relative name */
    x509_distname_maximum               = 32767
} x509_distname_type;

typedef enum {
    x509_purpose_unknown                = 0,
    x509_purpose_serverAuth             = 1,   /* 1.3.6.1.5.5.7.3.1 */
    x509_purpose_clientAuth             = 2,   /* 1.3.6.1.5.5.7.3.2 */
    x509_purpose_codeSigning            = 3,   /* 1.3.6.1.5.5.7.3.3 */
    x509_purpose_emailProtection        = 4,   /* 1.3.6.1.5.5.7.3.4 */
    x509_purpose_timeStamping           = 5,   /* 1.3.6.1.5.5.7.3.8 */
    x509_purpose_maximum                = 32767
} x509_purpose_type;

typedef enum {
    x509_reason_unspecified             = 0,
    x509_reason_keyCompromise           = 1,    /* Key compromised */
    x509_reason_caCompromise            = 2,    /* CA compromised */
    x509_reason_affiliationChanged      = 3,    /* Affiliation changed */
    x509_reason_superseded              = 4,    /* Superseded */
    x509_reason_cessationOfOperation    = 5,    /* Cessation of operation */
    x509_reason_certificateHold         = 6,    /* Certificate hold */
    x509_reason_removeFromCrl           = 8,    /* Remove from CRL */
    x509_reason_maximum                 = 32767
} x509_reason_type;

#define x509_reason_unspecified_byte            0
#define x509_reason_unspecified_mask            0x80
#define x509_reason_keyCompromise_byte          0
#define x509_reason_keyCompromise_mask          0x40
#define x509_reason_caCompromise_byte           0
#define x509_reason_caCompromise_mask           0x20
#define x509_reason_affiliationChanged_byte     0
#define x509_reason_affiliationChanged_mask     0x10
#define x509_reason_superseded_byte             0
#define x509_reason_superseded_mask             0x08
#define x509_reason_cessationOfOperation_byte   0
#define x509_reason_cessationOfOperation_mask   0x04
#define x509_reason_certificateHold_byte        0
#define x509_reason_certificateHold_mask        0x02
#define x509_reason_removeFromCrl_byte          1
#define x509_reason_removeFromCrl_mask          0x80

#define x509_usage_digitalSignature_byte        0
#define x509_usage_digitalSignature_mask        0x80
#define x509_usage_nonRepudiation_byte          0
#define x509_usage_nonRepudiation_mask          0x40
#define x509_usage_keyEncipherment_byte         0
#define x509_usage_keyEncipherment_mask         0x20
#define x509_usage_dataEncipherment_byte        0
#define x509_usage_dataEncipherment_mask        0x10
#define x509_usage_keyAgreement_byte            0
#define x509_usage_keyAgreement_mask            0x08
#define x509_usage_keyCertSign_byte             0
#define x509_usage_keyCertSign_mask             0x04
#define x509_usage_crlSign_byte                 0
#define x509_usage_crlSign_mask                 0x02
#define x509_usage_encipherOnly_byte            0
#define x509_usage_encipherOnly_mask            0x01
#define x509_usage_decipherOnly_byte            1
#define x509_usage_decipherOnly_mask            0x80

typedef struct _x509_authority_identifier {
    gsk_buffer                  keyIdentifier;
    x509_general_names          authorityCertIssuer;
    gsk_buffer                  authorityCertSerialNumber;
} x509_authority_identifier;

typedef struct _x509_basic_constraints {
    gsk_boolean                 cA;
    gsk_boolean                 pathLenConstraint_present;
    gsk_int32                   pathLenConstraint;
} x509_basic_constraints;

typedef struct _x509_key_usage_period {
    gsk_boolean                 notBefore_present;
    gsk_timeval                 notBefore;
    gsk_boolean                 notAfter_present;
    gsk_timeval                 notAfter;
} x509_key_usage_period;

typedef struct _x509_policy_qualifier_info {
    gsk_oid                     policyQualifierId;
    gsk_buffer                  qualifier;
} x509_policy_qualifier_info;

typedef struct _x509_policy_information {
    gsk_oid                     policyIdentifier;
    int                         count;
    x509_policy_qualifier_info *policyQualifiers;
} x509_policy_information;

typedef struct _x509_certificate_policies {
    int                         count;
    x509_policy_information *   policyInformation;
} x509_certificate_policies;

typedef struct _x509_policy_mapping {
    gsk_oid                     issuerDomainPolicy;
    gsk_oid                     subjectDomainPolicy;
} x509_policy_mapping;

typedef struct _x509_policy_mappings {
    int                         count;
    x509_policy_mapping *       mappings;
} x509_policy_mappings;

typedef struct _x509_directory_attributes {
    int                         count;
    x509_attribute *            attributes;
} x509_directory_attributes;

typedef struct _x509_name_constraints {
    x509_general_subtrees       permittedSubtrees;
    x509_general_subtrees       excludedSubtrees;
} x509_name_constraints;

typedef struct _x509_policy_constraints {
    gsk_boolean                 requireExplicitPolicy_present;
    gsk_int32                   requireExplicitPolicy;
    gsk_boolean                 inhibitPolicyMapping_present;
    gsk_int32                   inhibitPolicyMapping;
} x509_policy_constraints;

typedef struct _x509_key_purpose {
    x509_purpose_type           type;
    gsk_oid                     keyPurposeId;
} x509_key_purpose;

typedef struct _x509_key_usages {
    int                         count;
    x509_key_purpose *          usages;
} x509_key_usages;

typedef struct _x509_dist_point {
    x509_distname_type          type;
    union {
        x509_general_names      fullName;
        x509_rdn                relativeName;
    } u;
} x509_dist_point;

typedef struct _x509_crl_dist_point {
    x509_dist_point             distributionPoint;
    gsk_bitstring               reasons;
    x509_general_names          crlIssuer;
} x509_crl_dist_point;

typedef struct _x509_crl_dist_points {
    int                         count;
    x509_crl_dist_point *       points;
} x509_crl_dist_points;

typedef struct _x509_issuing_dist_point {
    x509_dist_point             distributionPoint;
    gsk_boolean                 onlyContainsUserCerts;
    gsk_boolean                 onlyContainsCaCerts;
    gsk_bitstring               onlySomeReasons;
    gsk_boolean                 indirectCrl;
} x509_issuing_dist_point;

typedef struct _x509_info_access {
    gsk_oid                     accessMethod;
    x509_general_name           accessLocation;
} x509_info_access;

typedef struct _x509_info_access_list {
    int                         count;
    x509_info_access *          info;
} x509_info_access_list;

typedef struct _x509_decoded_extension {
    x509_extension_type         type;
    union {
        x509_info_access_list       authorityInfoAccess;
        x509_authority_identifier   authorityKeyIdentifier;
        x509_basic_constraints      basicConstraints;
        x509_general_names          certificateIssuer;
        x509_certificate_policies   certificatePolicies;
        x509_crl_dist_points        crlDistributionPoints;
        gsk_int32                   crlNumber;
        x509_reason_type            crlReasonCode;
        gsk_int32                   deltaCrlIndicator;
        x509_key_usages             extKeyUsage;
        gsk_oid                     holdInstructionCode;
        gsk_timeval                 invalidityDate;
        x509_general_names          issuerAltName;
        x509_issuing_dist_point     issuingDistributionPoint;
        gsk_bitstring               keyUsage;
        x509_name_constraints       nameConstraints;
        x509_policy_constraints     policyConstraints;
        x509_policy_mappings        policyMappings;
        x509_key_usage_period       privateKeyUsagePeriod;
        x509_general_names          subjectAltName;
        x509_directory_attributes   subjectDirectoryAttributes;
        gsk_buffer                  subjectKeyIdentifier;
    } u;
    gsk_octet                   rsvdÝ32¨;
} x509_decoded_extension;

typedef struct _x509_extension {
    x509_extension_type         type;
    gsk_oid                     identifier;
    gsk_boolean                 critical;
    gsk_buffer                  value;
} x509_extension;

typedef struct _x509_extensions {
    int                         count;
    x509_extension *            extensions;
} x509_extensions;

/*********************************************************************/
/*  X.509 certificate                                                */
/*********************************************************************/

typedef enum {
    x509_v1                     = 0,
    x509_v2                     = 1,
    x509_v3                     = 2,
    x509_version_maximum        = 32767
} x509_version;

typedef struct _x509_validity {
    gsk_timeval                 notBefore;
    gsk_timeval                 notAfter;
} x509_validity;

typedef struct _x509_tbs_certificate {
    x509_version                version;
    gsk_buffer                  serialNumber;
    x509_algorithm_identifier   signature;
    x509_name                   issuer;
    x509_validity               validity;
    x509_name                   subject;
    x509_public_key_info        subjectPublicKeyInfo;
    gsk_bitstring               issuerUniqueId;
    gsk_bitstring               subjectUniqueId;
    x509_extensions             extensions;
    gsk_octet                   rsvdÝ16¨;
} x509_tbs_certificate;

typedef struct _x509_certificate {
    x509_tbs_certificate        tbsCertificate;
    x509_algorithm_identifier   signatureAlgorithm;
    gsk_bitstring               signatureValue;
    gsk_buffer                  derCertificate;
    gsk_octet                   rsvdÝ16¨;
} x509_certificate;

/*********************************************************************/
/*  X.509 certificate revocation list                                */
/*********************************************************************/

typedef struct _x509_revoked_certificate {
    gsk_buffer                  userCertificate;
    gsk_timeval                 revocationDate;
    x509_extensions             crlEntryExtensions;
} x509_revoked_certificate;

typedef struct _x509_revoked_certificates {
    int                         count;
    x509_revoked_certificate *  certificates;
} x509_revoked_certificates;

typedef struct _x509_tbs_crl {
    x509_version                version;
    x509_algorithm_identifier   signature;
    x509_name                   issuer;
    gsk_timeval                 thisUpdate;
    gsk_boolean                 nextUpdate_present;
    gsk_timeval                 nextUpdate;
    x509_revoked_certificates   revokedCertificates;
    x509_extensions             crlExtensions;
    gsk_octet                   rsvdÝ16¨;
} x509_tbs_crl;

typedef struct _x509_crl {
    x509_tbs_crl                tbsCertList;
    x509_algorithm_identifier   signatureAlgorithm;
    gsk_bitstring               signatureValue;
    gsk_buffer                  derCertList;
    gsk_octet                   rsvdÝ16¨;
} x509_crl;

typedef struct _x509_crls {
    int                         count;
    x509_crl *                  crls;
} x509_crls;

/*********************************************************************/
/*  PKCS definitions                                                 */
/*********************************************************************/

typedef enum {
    pkcs_certtype_unknown               = 0,
    pkcs_certtype_certificate           = 1,    /* X.509 certificate */
    pkcs_certtype_extendedCertificate   = 2,    /* PKCS extended certificate */
    pkcs_certtype_maximum               = 32767
} pkcs_certificate_type;

typedef enum {
    pkcs_content_unknown                = 0,
    pkcs_content_data                   = 1,    /* 1.2.840.113549.1.7.1 */
    pkcs_content_signedData             = 2,    /* 1.2.840.113549.1.7.2 */
    pkcs_content_envelopedData          = 3,    /* 1.2.840.113549.1.7.3 */
    pkcs_content_signedAndEnvelopedData = 4,    /* 1.2.840.113549.1.7.4 */
    pkcs_content_digestedData           = 5,    /* 1.2.840.113549.1.7.5 */
    pkcs_content_encryptedData          = 6,    /* 1.2.840.113549.1.7.6 */
    pkcs_content_maximum                = 32767
} pkcs_content_type;

typedef struct _pkcs_attribute {
    gsk_oid                     attributeType;
    gsk_buffer                  attributeValue;
} pkcs_attribute;

typedef struct _pkcs_attributes {
    int                         count;
    pkcs_attribute *            attributes;
} pkcs_attributes;

typedef struct _pkcs_cert_request_info {
    gsk_int32                   version;
    x509_name                   subject;
    x509_public_key_info        subjectPublicKeyInfo;
    pkcs_attributes             attributes;
    gsk_octet                   rsvdÝ16¨;
} pkcs_cert_request_info;

typedef struct _pkcs_cert_request {
    pkcs_cert_request_info      certificationRequestInfo;
    x509_algorithm_identifier   signatureAlgorithm;
    gsk_bitstring               signatureValue;
    gsk_buffer                  derRequestInfo;
    gsk_octet                   rsvdÝ16¨;
} pkcs_cert_request;

typedef struct _pkcs_content_info {
    pkcs_content_type           type;
    gsk_oid                     contentType;
    gsk_buffer                  content;
} pkcs_content_info;

typedef struct _pkcs_ext_certificate_info {
    gsk_int32                   version;
    x509_certificate            certificate;
    pkcs_attributes             attributes;
} pkcs_ext_certificate_info;

typedef struct _pkcs_ext_certificate {
    pkcs_ext_certificate_info   extendedCertificateInfo;
    x509_algorithm_identifier   signatureAlgorithm;
    gsk_bitstring               signatureValue;
    gsk_buffer                  derCertificate;
    gsk_octet                   rsvdÝ16¨;
} pkcs_ext_certificate;

typedef struct _pkcs_certificate {
    pkcs_certificate_type       type;
    union {
        x509_certificate        certificate;
        pkcs_ext_certificate    extendedCertificate;
    } u;
    gsk_octet                   rsvdÝ16¨;
} pkcs_certificate;

typedef struct _pkcs_certificates {
    int                         count;
    pkcs_certificate *          certificates;
} pkcs_certificates;

typedef struct _pkcs_private_key_info {
    gsk_int32                   version;
    x509_algorithm_identifier   privateKeyAlgorithm;
    gsk_buffer                  privateKey;
    pkcs_attributes             attributes;
    gsk_buffer                  keyToken;
    gsk_octet                   rsvdÝ16¨;
} pkcs_private_key_info;

typedef struct _pkcs_cert_key {
    pkcs_certificate            certificate;
    pkcs_private_key_info       privateKey;
    gsk_octet                   rsvdÝ16¨;
} pkcs_cert_key;

typedef struct _pkcs_cert_keys {
    int                         count;
    pkcs_cert_key *             certKeys;
} pkcs_cert_keys;

typedef struct _pkcs_session_key {
    x509_algorithm_type         encryptionType;
    gsk_buffer                  encryptionKey;
} pkcs_session_key;

/*********************************************************************/
/*  Database definitions                                             */
/*********************************************************************/

typedef enum {
    gskdb_dbtype_unknown    = 0,
    gskdb_dbtype_key        = 1,                /* Key database */
    gskdb_dbtype_request    = 2,                /* Request database */
    gskdb_dbtype_maximum    = 32767
} gskdb_database_type;

typedef enum {
    gskdb_rectype_unknown       = 0,
    gskdb_rectype_keyPair       = 1,            /* Request key pair */
    gskdb_rectype_certificate   = 2,            /* Certificate */
    gskdb_rectype_certKey       = 3,            /* Certificate with key */
    gskdb_rectype_maximum       = 32767
} gskdb_record_type;

typedef enum {
    gskdb_export_unknown            = 0,
    gskdb_export_der_binary         = 1,        /* Binary ASN.1 DER */
    gskdb_export_der_base64         = 2,        /* Base64 ASN.1 DER */
    gskdb_export_pkcs7_binary       = 3,        /* Binary PKCS7 */
    gskdb_export_pkcs7_base64       = 4,        /* Base64 PKCS7 */
    gskdb_export_pkcs12v1_binary    = 5,        /* Binary PKCS12 V1 */
    gskdb_export_pkcs12v1_base64    = 6,        /* Base64 PKCS12 V1 */
    gskdb_export_pkcs12v3_binary    = 7,        /* Binary PKCS12 V3 */
    gskdb_export_pkcs12v3_base64    = 8,        /* Base64 PKCS12 V3 */
    gskdb_export_maximum            = 32767
} gskdb_export_format;

typedef enum {
    gskdb_source_unknown            = 0,
    gskdb_source_key_database       = 1,        /* Key database or key ring */
    gskdb_source_directory          = 2,        /* LDAP directory */
    gskdb_source_trusted_certs      = 3,        /* Trusted certificates */
    gskdb_source_untrusted_certs    = 4,        /* Untrusted certificates */
    gskdb_source_trusted_crls       = 5,        /* Trusted CRLs */
    gskdb_source_untrusted_crls     = 6,        /* Untrusted CRLs */
    gskdb_source_cert_callback      = 7,        /* Certificate callback */
    gskdb_source_crl_callback       = 8,        /* CRL checking callback */
    gskdb_source_maximum            = 32767
} gskdb_source_type;

#define GSKDB_RECFLAG_TRUSTED   0x80            /* Trusted record */
#define GSKDB_RECFLAG_DEFAULT   0x40            /* Default key */
#define GSKDB_RECFLAG_MASK      0xc0

typedef struct _gskdb_record {
    gskdb_record_type           recordType;
    gsk_octet                   recordFlags;
    gsk_octet                   rsvd_1Ý1¨;
    gsk_int32                   recordId;
    gsk_int32                   issuerRecordId;
    char *                      recordLabel;
    union {
        x509_certificate        certificate;
        pkcs_cert_request       request;
    } u;
    pkcs_private_key_info       privateKey;
    gsk_octet                   rsvd_2Ý16¨;
} gskdb_record;

typedef struct _gskdb_cert_callback {
    gsk_status          (*certCallback) (
                                x509_name *         subject,
                                pkcs_certificates * certs);
    void                (*freeCallback) (
                                pkcs_certificates * certs);
} gskdb_cert_callback;

typedef struct _gskdb_crl_callback {
    gsk_status          (*crlCallback)(
                                x509_certificate *  cert);
} gskdb_crl_callback;

typedef struct _gskdb_data_source {
    gskdb_source_type           type;
    gsk_octet                   flags;
    gsk_octet                   rsvd_1Ý1¨;
    union {
        gsk_handle              handle;
        pkcs_certificates       certs;
        x509_crls               crls;
        gskdb_cert_callback     certCallback;
        gskdb_crl_callback      crlCallback;
        gsk_octet               rsvdÝ16¨;
    } u;
} gskdb_data_source;

typedef struct _gskdb_data_sources {
    int                         count;
    gskdb_data_source *         sources;
} gskdb_data_sources;

/*********************************************************************/
/*  Function prototypes                                              */
/*********************************************************************/

gsk_status gsk_add_record (
    gsk_handle                  db_handle,
    gskdb_record *              record);

gsk_status gsk_change_database_password (
    const char *                filename,
    const char *                old_password,
    const char *                new_password,
    gsk_time                    pwd_expiration);

gsk_status gsk_change_database_record_length (
    gsk_handle                  db_handle,
    gsk_size                    record_length);

gsk_status gsk_close_database (
    gsk_handle *                db_handle);

gsk_status gsk_close_directory (
    gsk_handle *                directory_handle);

gsk_status gsk_copy_buffer (
    gsk_buffer *                in_buffer,
    gsk_buffer *                out_buffer);

gsk_status gsk_copy_certificate (
    x509_certificate *          in_certificate,
    x509_certificate *          out_certificate);

gsk_status gsk_copy_certificate_extension (
    x509_extension *            in_extension,
    x509_extension *            out_extension);

gsk_status gsk_copy_certification_request (
    pkcs_cert_request *         in_request,
    pkcs_cert_request *         out_request);

gsk_status gsk_copy_content_info (
    pkcs_content_info *         in_info,
    pkcs_content_info *         out_info);

gsk_status gsk_copy_crl (
    x509_crl *                  in_crl,
    x509_crl *                  out_crl);

gsk_status gsk_copy_name (
    x509_name *                 in_name,
    x509_name *                 out_name);

gsk_status gsk_copy_private_key_info (
    pkcs_private_key_info *     in_info,
    pkcs_private_key_info *     out_info);

gsk_status gsk_copy_public_key_info (
    x509_public_key_info *      in_info,
    x509_public_key_info *      out_info);

gsk_status gsk_copy_record (
    gskdb_record *              in_rec,
    gskdb_record **             out_rec);

gsk_status gsk_create_certification_request (
    gsk_handle                  db_handle,
    const char *                label,
    x509_algorithm_type         signature_algorithm,
    int                         key_size,
    const char *                subject_name,
    x509_extensions *           extensions);

gsk_status gsk_create_database (
    const char *                filename,
    const char *                password,
    gskdb_database_type         db_type,
    gsk_size                    record_length,
    gsk_time                    pwd_expiration,
    gsk_handle *                db_handle);

gsk_status gsk_create_self_signed_certificate (
    gsk_handle                  db_handle,
    const char *                label,
    x509_algorithm_type         signature_algorithm,
    int                         key_size,
    const char *                subject_name,
    int                         num_days,
    gsk_boolean                 ca_certificate,
    x509_extensions *           extensions);

gsk_status gsk_create_signed_certificate (
    gsk_handle                  db_handle,
    const char *                label,
    int                         num_days,
    gsk_boolean                 ca_certificate,
    x509_extensions *           extensions,
    gsk_buffer *                cert_request,
    gsk_buffer *                signed_certificate);

gsk_status gsk_create_signed_crl (
    gsk_handle                  db_handle,
    const char *                label,
    gsk_int32                   crl_number,
    int                         num_days,
    x509_revoked_certificates * revoked_certificates,
    x509_extensions *           extensions,
    gsk_buffer *                signed_crl);

gsk_status gsk_decode_base64 (
    gsk_buffer *                encoded_data,
    gsk_buffer *                decoded_data);

gsk_status gsk_decode_certificate (
    gsk_buffer *                stream,
    x509_certificate *          certificate);

gsk_status gsk_decode_certificate_extension (
    x509_extension *            encoded_extension,
    x509_decoded_extension *    decoded_extension);

gsk_status gsk_decode_certification_request (
    gsk_buffer *                stream,
    pkcs_cert_request *         request);

gsk_status gsk_decode_crl (
    gsk_buffer *                stream,
    x509_crl *                  crl);

gsk_status gsk_decode_name (
    gsk_buffer *                stream,
    x509_name *                 name);

gsk_status gsk_delete_record (
    gsk_handle                  db_handle,
    gsk_int32                   record_id);

gsk_status gsk_dn_to_name (
    const char *                dn,
    x509_name *                 name);

gsk_status gsk_encode_base64 (
    gsk_buffer *                input_data,
    gsk_buffer *                encoded_data);

gsk_status gsk_encode_certificate_extension (
    x509_decoded_extension *    decoded_extension,
    gsk_boolean                 critical,
    x509_extension *            encoded_extension);

gsk_status gsk_encode_name (
    x509_name *                 name,
    gsk_buffer *                stream);

gsk_status gsk_encode_signature (
    gsk_buffer *                unsigned_stream,
    x509_algorithm_identifier * algorithm,
    gsk_bitstring *             signature,
    gsk_buffer *                signed_stream);

gsk_status gsk_export_certificate (
    gsk_handle                  db_handle,
    const char *                label,
    gskdb_export_format         format,
    gsk_buffer *                stream);

gsk_status gsk_export_certification_request (
    gsk_handle                  db_handle,
    const char *                label,
    gskdb_export_format         format,
    gsk_buffer *                stream);

gsk_status gsk_export_key (
    gsk_handle                  db_handle,
    const char *                label,
    gskdb_export_format         format,
    x509_algorithm_type         algorithm,
    const char *                password,
    gsk_buffer *                stream);

void gsk_free_buffer (
    gsk_buffer *                buffer);

void gsk_free_certificate (
    x509_certificate *          certificate);

void gsk_free_certificates (
    pkcs_certificates *         certificates);

void gsk_free_certificate_extension (
    x509_extension *            extension);

void gsk_free_certification_request (
    pkcs_cert_request *         request);

void gsk_free_content_info (
    pkcs_content_info *         content_info);

void gsk_free_crl (
    x509_crl *                  crl);

void gsk_free_crls (
    x509_crls *                 crls);

void gsk_free_decoded_extension (
    x509_decoded_extension *    extension);

void gsk_free_name (
    x509_name *                 name);

void gsk_free_private_key_info (
    pkcs_private_key_info *     info);

void gsk_free_public_key_info (
    x509_public_key_info *      info);

void gsk_free_record (
    gskdb_record *              record);

void gsk_free_records (
    int                         num_records,
    gskdb_record **             records);

void gsk_free_string (
    char *                      string);

void gsk_free_strings (
    int                         num_strings,
    char **                     strings);

void gsk_generate_random_bytes (
    gsk_buffer *                random_bytes);

gsk_status gsk_get_default_key (
    gsk_handle                  db_handle,
    gskdb_record **             record);

gsk_status gsk_get_default_label (
    gsk_handle                  db_handle,
    char **                     label);

gsk_status gsk_get_directory_certificates (
    gsk_handle                  directory_handle,
    x509_name *                 subject_name,
    gsk_boolean                 ca_certificates,
    pkcs_certificates *         certificates);

gsk_status gsk_get_directory_crls (
    gsk_handle                  directory_handle,
    x509_name *                 dist_point_name,
    x509_name *                 issuer_name,
    gsk_boolean                 ca_lists,
    x509_crls *                 crls);

gsk_status gsk_get_record_by_id (
    gsk_handle                  db_handle,
    gsk_int32                   id,
    gskdb_record **             record);

gsk_status gsk_get_record_by_index (
    gsk_handle                  db_handle,
    int                         index,
    gskdb_record **             record);

gsk_status gsk_get_record_by_label (
    gsk_handle                  db_handle,
    const char *                label,
    gskdb_record **             record);

gsk_status gsk_get_record_by_subject (
    gsk_handle                  db_handle,
    x509_name *                 name,
    int *                       num_records,
    gskdb_record ***            records);

gsk_status gsk_get_record_labels (
    gsk_handle                  db_handle,
    gsk_boolean                 private_key,
    int *                       num_labels,
    char ***                    labels);

gsk_status gsk_get_update_code (
    gsk_handle                  db_handle,
    gsk_uint32 *                update_code);

gsk_status gsk_import_certificate (
    gsk_handle                  db_handle,
    const char *                label,
    gsk_buffer *                stream);

gsk_status gsk_import_key (
    gsk_handle                  db_handle,
    const char *                label,
    const char *                password,
    gsk_buffer *                stream);

gsk_status gsk_make_content_msg (
    pkcs_content_info *         content_info,
    gsk_buffer *                stream);

gsk_status gsk_make_data_content (
    gsk_buffer *                data,
    pkcs_content_info *         content_info);

gsk_status gsk_make_data_msg (
    gsk_buffer *                data,
    gsk_buffer *                stream);

gsk_status gsk_make_encrypted_data_content (
    int                         version,
    x509_algorithm_type         pbe_algorithm,
    const char *                password,
    int                         iterations,
    pkcs_content_info *         content_data,
    pkcs_content_info *         content_info);

gsk_status gsk_make_encrypted_data_msg (
    int                         version,
    x509_algorithm_type         pbe_algorithm,
    const char *                password,
    int                         iterations,
    gsk_buffer *                data,
    gsk_buffer *                stream);

gsk_status gsk_make_enveloped_data_content (
    int                         version,
    pkcs_session_key *          session_key,
    pkcs_certificates *         recipient_certificates,
    pkcs_content_info *         content_data,
    pkcs_content_info *         content_info);

gsk_status gsk_make_enveloped_data_msg (
    int                         version,
    pkcs_session_key *          session_key,
    pkcs_certificates *         recipient_certificates,
    gsk_buffer *                data,
    gsk_buffer *                stream);

gsk_status gsk_make_signed_data_content (
    int                         version,
    x509_algorithm_type         digest_algorithm,
    gsk_boolean                 include_certificates,
    pkcs_cert_keys *            signer_certificates,
    pkcs_certificates *         ca_certificates,
    pkcs_content_info *         content_data,
    pkcs_content_info *         content_info);

gsk_status gsk_make_signed_data_msg (
    int                         version,
    x509_algorithm_type         digest_algorithm,
    gsk_boolean                 include_certificates,
    pkcs_cert_keys *            signer_certificates,
    pkcs_certificates *         ca_certificates,
    gsk_buffer *                data,
    gsk_buffer *                stream);

gsk_status gsk_make_wrapped_content (
    pkcs_content_info *         content_info,
    pkcs_content_info *         wrapped_content);

gsk_time gsk_mktime (
    gsk_timeval *               ts);

gsk_boolean gsk_name_compare (
    x509_name *                 name1,
    x509_name *                 name2);

gsk_status gsk_name_to_dn (
    x509_name *                 name,
    char **                     dn);

gsk_status gsk_open_database (
    const char *                filename,
    const char *                password,
    gsk_boolean                 update_mode,
    gsk_handle *                db_handle,
    gskdb_database_type *       db_type,
    int *                       num_records);

gsk_status gsk_open_directory (
    const char *                server_name,
    int                         server_port,
    const char *                user_name,
    const char *                user_password,
    int                         crl_cache_timeout,
    gsk_handle *                directory_handle);

gsk_status gsk_open_keyring (
    const char *                keyring,
    gsk_handle *                db_handle,
    int *                       num_records);

void gsk_query_crypto_level (
    int *                       version,
    int *                       release,
    gsk_uint32 *                crypto_level);

#define GSK_CRYPTO_64       0x00000001u
#define GSK_CRYPTO_128      0x00000002u
#define GSK_CRYPTO_168      0x00000004u

gsk_timeval * gsk_rdtime (
    gsk_time                    secs,
    gsk_timeval *               ts);

gsk_status gsk_read_content_msg (
    gsk_buffer *                stream,
    pkcs_content_info *         content_info);

gsk_status gsk_read_data_content (
    pkcs_content_info *         content_info,
    gsk_buffer *                data);

gsk_status gsk_read_data_msg (
    gsk_buffer *                stream,
    gsk_buffer *                data);

gsk_status gsk_read_encrypted_data_content (
    const char *                password,
    pkcs_content_info *         content_info,
    pkcs_content_info *         content_data);

gsk_status gsk_read_encrypted_data_msg (
    const char *                password,
    gsk_buffer *                stream,
    gsk_buffer *                data);

gsk_status gsk_read_enveloped_data_content (
    pkcs_cert_keys *            recipient_keys,
    pkcs_content_info *         content_info,
    x509_algorithm_type *       encryption_algorithm,
    gsk_size *                  key_size,
    pkcs_content_info *         content_data);

gsk_status gsk_read_enveloped_data_msg (
    pkcs_cert_keys *            recipient_keys,
    gsk_buffer *                stream,
    x509_algorithm_type *       encryption_algorithm,
    gsk_size *                  key_size,
    gsk_buffer *                data);

gsk_status gsk_read_signed_data_content (
    pkcs_certificates *         local_certificates,
    pkcs_content_info *         content_info,
    gsk_boolean *               used_local,
    pkcs_certificates *         msg_certificates,
    pkcs_certificates *         signer_certificates,
    pkcs_content_info *         content_data);

gsk_status gsk_read_signed_data_msg (
    pkcs_certificates *         local_certificates,
    gsk_buffer *                stream,
    gsk_boolean *               used_local,
    pkcs_certificates *         msg_certificates,
    pkcs_certificates *         signer_certificates,
    gsk_buffer *                data);

gsk_status gsk_read_wrapped_content (
    pkcs_content_info *         wrapped_content,
    pkcs_content_info *         content_info);

gsk_status gsk_receive_certificate (
    gsk_buffer *                stream,
    x509_certificate *          certificate);

gsk_status gsk_replace_record (
    gsk_handle                  db_handle,
    gskdb_record *              record);

gsk_status gsk_set_default_key (
    gsk_handle                  db_handle,
    gsk_int32                   record_id);

gsk_status gsk_sign_certificate (
    x509_certificate *          certificate,
    pkcs_private_key_info *     private_key);

gsk_status gsk_sign_crl (
    x509_crl *                  crl,
    pkcs_private_key_info *     private_key);

gsk_status gsk_sign_data (
    x509_algorithm_type         sign_algorithm,
    pkcs_private_key_info *     private_key,
    gsk_boolean                 is_digest,
    gsk_buffer *                data,
    gsk_buffer *                signature);

gsk_status gsk_validate_certificate (
    gskdb_data_sources *        data_sources,
    x509_certificate *          certificate,
    gsk_boolean                 accept_root,
    gsk_int32 *                 issuer_record_id);

gsk_status gsk_verify_certificate_signature (
    x509_certificate *          certificate,
    x509_public_key_info *      key);

gsk_status gsk_verify_crl_signature (
    x509_crl *                  crl,
    x509_public_key_info *      key);

gsk_status gsk_verify_data_signature (
    x509_algorithm_type         sign_algorithm,
    x509_public_key_info *      public_key,
    gsk_boolean                 is_digest,
    gsk_buffer *                data,
    gsk_buffer *                signature);

/*********************************************************************/
/*  ASN.1 status codes                                               */
/*********************************************************************/

#define ASN_NO_MORE_DATA                    0x014ce001
#define ASN_VALUE_OVERFLOW                  0x014ce002
#define ASN_INVALID_LENGTH                  0x014ce003
#define ASN_INVALID_ENCODING                0x014ce004
#define ASN_INVALID_PARAMETER               0x014ce005
#define ASN_NO_MEMORY                       0x014ce006
#define ASN_INDEFINITE_NOT_ALLOWED          0x014ce007
#define ASN_MUST_BE_PRIMITIVE               0x014ce008
#define ASN_MUST_BE_CONSTRUCTED             0x014ce009
#define ASN_VALUE_NOT_SET                   0x014ce00a
#define ASN_INDEFINITE_UNSUPPORTED          0x014ce00b
#define ASN_BAD_UNUSED_BITCOUNT             0x014ce00c
#define ASN_SEGMENTED_BITCOUNT_ERROR        0x014ce00d
#define ASN_WRONG_TYPE                      0x014ce00e
#define ASN_UNCONSUMED_DATA                 0x014ce00f
#define ASN_ELEMENTS_MISSING                0x014ce010
#define ASN_SELECTION_OUT_OF_RANGE          0x014ce011
#define ASN_NO_SELECTION                    0x014ce012
#define ASN_SPECIFIC_SYNTAX_ESTABLISHED     0x014ce013
#define ASN_CANT_CONVERT                    0x014ce014
#define ASN_CODESET_NOT_PERMITTED           0x014ce015
#define ASN_INVALID_VALUE                   0x014ce016
#define ASN_X500_NO_AVA_SEP                 0x014ce017
#define ASN_X500_NO_VALUE                   0x014ce018
#define ASN_X500_OID_SYNTAX_ERROR           0x014ce019
#define ASN_PKCS12_BAD_VERSION              0x014ce01a
#define ASN_BAD_INTERVAL                    0x014ce01b
#define ASN_OID_BAD_VALUE_0                 0x014ce01c
#define ASN_OID_BAD_VALUE_1                 0x014ce01d
#define ASN_OID_BAD_VALUE_2                 0x014ce01e
#define ASN_ATTR_NOT_FOUND                  0x014ce01f
#define ASN_UNKNOWN_CRITICAL_EXTENSION      0x014ce020
#define ASN_X500_SYNTAX_ERROR               0x014ce021

/*********************************************************************/
/*  CMS status codes                                                 */
/*********************************************************************/

#define CMSERR_NO_MEMORY                    0x
#define CMSERR_EXT_NOT_SUPPORTED            0x
#define CMSERR_ALG_NOT_SUPPORTED            0x
#define CMSERR_BAD_SIGNATURE                0x
#define CMSERR_CRYPTO_FAILED                0x
#define CMSERR_IO_CANCELED                  0x
#define CMSERR_IO_ERROR                     0x
#define CMSERR_PWD_MISMATCH                 0x
#define CMSERR_FILE_NOT_FOUND               0x
#define CMSERR_DB_CORRUPTED                 0x0335300a
#define CMSERR_MSG_NOT_FOUND                0x0335300b
#define CMSERR_BAD_HANDLE                   0x0335300c
#define CMSERR_RECORD_DELETED               0x0335300d
#define CMSERR_RECORD_NOT_FOUND             0x0335300e
#define CMSERR_INCORRECT_DBTYPE             0x0335300f
#define CMSERR_UPDATE_NOT_ALLOWED           0x
#define CMSERR_MUTEX_ERROR                  0x
#define CMSERR_BACKUP_EXISTS                0x
#define CMSERR_DB_EXISTS                    0x
#define CMSERR_RECORD_TOO_BIG               0x
#define CMSERR_PW_EXPIRED                   0x
#define CMSERR_PW_INCORRECT                 0x
#define CMSERR_ACCESS_DENIED                0x
#define CMSERR_DB_LOCKED                    0x
#define CMSERR_LENGTH_TOO_SMALL             0x
#define CMSERR_NO_PRIVATE_KEY               0x0335301a
#define CMSERR_BAD_LABEL                    0x0335301b
#define CMSERR_LABEL_NOT_UNIQUE             0x0335301c
#define CMSERR_RECTYPE_NOT_VALID            0x0335301d
#define CMSERR_DUPLICATE_CERTIFICATE        0x0335301e
#define CMSERR_BAD_BASE64_ENCODING          0x0335301f
#define CMSERR_BAD_ENCODING                 0x
#define CMSERR_NOT_YET_VALID                0x
#define CMSERR_EXPIRED                      0x
#define CMSERR_NAME_NOT_SUPPORTED           0x
#define CMSERR_ISSUER_NOT_FOUND             0x
#define CMSERR_PATH_TOO_LONG                0x
#define CMSERR_INCORRECT_KEY_USAGE          0x
#define CMSERR_ISSUER_NOT_CA                0x
#define CMSERR_FMT_NOT_SUPPORTED            0x
#define CMSERR_ALG_NOT_AVAILABLE            0x
#define CMSERR_RECTYPE_CHANGED              0x0335302a
#define CMSERR_SUBJECT_CHANGED              0x0335302b
#define CMSERR_PUBLIC_KEY_CHANGED           0x0335302c
#define CMSERR_DEFAULT_KEY_CHANGED          0x0335302d
#define CMSERR_SIGNED_CERTS                 0x0335302e
#define CMSERR_CERT_CHAIN_NOT_TRUSTED       0x0335302f
#define CMSERR_KEY_MISMATCH                 0x
#define CMSERR_SIGNER_NOT_FOUND             0x
#define CMSERR_CONTENT_NOT_SUPPORTED        0x
#define CMSERR_RECIPIENT_NOT_FOUND          0x
#define CMSERR_BAD_KEY_SIZE                 0x
#define CMSERR_BAD_KEY_PARITY               0x
#define CMSERR_WEAK_KEY                     0x
#define CMSERR_BAD_IV_SIZE                  0x
#define CMSERR_BAD_BLOCK_SIZE               0x
#define CMSERR_BAD_BLOCK_FORMAT             0x
#define CMSERR_NO_INVERSE                   0x0335303a
#define CMSERR_LDAP                         0x0335303b
#define CMSERR_LDAP_NOT_AVAILABLE           0x0335303c
#define CMSERR_BAD_DIGEST_SIZE              0x0335303d
#define CMSERR_BAD_FILENAME                 0x0335303e
#define CMSERR_OPEN_FAILED                  0x0335303f
#define CMSERR_SELF_SIGNED_NOT_FOUND        0x
#define CMSERR_CERTIFICATE_REVOKED          0x
#define CMSERR_BAD_ISSUER_NAME              0x
#define CMSERR_BAD_SUBJECT_NAME             0x
#define CMSERR_NAME_CONSTRAINTS_VIOLATED    0x
#define CMSERR_NO_CONTENT_DATA              0x
#define CMSERR_VERSION_NOT_SUPPORTED        0x

#ifdef __cplusplus
}
#endif

#endif

