??=if defined(__COMPILER_VER__)
   ??=pragma filetag ("IBM-1047")
??=endif

 /*
  *
  * Licensed Materials - Property of IBM
  * 5647-A01
  * (C) Copyright IBM Corp. 1999
  *
  */

 /*
  * gskssl.h - header file for common SSL toolkit definitions.
  * This file represents the typedef necessary for
  * gsk SSL callable functions.
  */

#ifndef _gskssl_h
#define _gskssl_h

#if defined(__cplusplus)
extern "C" {
#endif

   /* General definitions */

#define GSK_VERSION2         2
#define GSK_VERSION3         3

#define GSK_VERSION          GSK_VERSION3

#define GSK_SEC_LEVEL_US          1
#define GSK_SEC_LEVEL_EXPORT      2
#define GSK_SEC_LEVEL_EXPORT_FR   3
#define GSK_LOW_SECURITY          1
#define GSK_HIGH_SECURITY         2

  /* Return codes. These are the return values */
  /* for gsk_initialize                       */
#define GSK_INITIALIZE_OK             0   /* Successful completion           */
#define GSK_KEYFILE_IO_ERROR          1 /* Error: keyring io error         */
#define GSK_KEYFILE_OPEN_FAILED       2 /* Error: keyring open error       */
#define GSK_KEYFILE_BAD_FORMAT        3 /* Error: keyring format problem   */
#define GSK_KEYFILE_BAD_PASSWORD      4 /* Error: Keyring password bad     */
#define GSK_KEYFILE_BAD_MALLOC        5 /* Error: Malloc failed            */
#define GSK_KEYFILE_NOTHING_TO_WRITE  6
#define GSK_KEYFILE_WRITE_FAILED      7
#define GSK_KEYFILE_NOT_FOUND         8
#define GSK_KEYFILE_BAD_DNAME         9 /* Error: Invalid distinquish name */
#define GSK_KEYFILE_BAD_KEY          10 /* Error: Certificate has expired  */
#define GSK_KEYFILE_KEY_EXISTS       11
#define GSK_KEYFILE_BAD_LABEL        12
#define GSK_KEYFILE_DUPLICATE_NAME   13
#define GSK_KEYFILE_DUPLICATE_KEY    14
#define GSK_KEYFILE_DUPLICATE_LABEL  15
#define GSK_BAD_FORMAT_OR_INVALID_PW 16
#define GSK_PKDS_READ_ERROR          75 /* Error: hw private key read error */


#define GSK_WARNING_INVALID_SERVER_CERT   98
#define GSK_WARNING_INVALID_SERVER_PRIV_KEY 99
#define GSK_ERR_INIT_PARM_NOT_VALID   100 /* Error: invalid cipher spec      */
/* #define GSK_INIT_HARD_RT           101 */ /* Error: no keyring file or pw    */
#define GSK_INIT_SEC_TYPE_NOT_VALID   102 /* Error: invalid security type    */
#define GSK_INIT_V2_TIMEOUT_NOT_VALID 103 /* Error: invalid V2 timeout value */
#define GSK_INIT_V3_TIMEOUT_NOT_VALID 104 /* Error: invalid V3 timeout value */
#define GSK_KEYFILE_CERT_EXPIRED      105

  /* Return codes. These are the return values */
  /* for gsk_secure_soc_init                  */
#define GSK_SOC_BAD_V2_CIPHER                   -40
#define GSK_SOC_BAD_V3_CIPHER                   -41
#define GSK_SOC_BAD_SEC_TYPE                    -42
#define GSK_SOC_BAD_SEC_TYPE_COMBINATION        -102
#define GSK_SOC_NO_READ_FUNCTION                -43
#define GSK_SOC_NO_WRITE_FUNCTION               -44

#define GSK_ERROR_NO_CIPHERS                    -1
#define GSK_ERROR_NO_CERTIFICATE                -2
#define GSK_ERROR_BAD_CERTIFICATE               -4
#define GSK_ERROR_UNSUPPORTED_CERTIFICATE_TYPE  -6
#define GSK_ERROR_IO                            -10
#define GSK_ERROR_BAD_MESSAGE                   -11
#define GSK_ERROR_BAD_MAC                       -12
#define GSK_ERROR_UNSUPPORTED                   -13
#define GSK_ERROR_BAD_CERT_SIG                  -14
#define GSK_ERROR_BAD_CERT                      -15
#define GSK_ERROR_BAD_PEER                      -16
#define GSK_ERROR_PERMISSION_DENIED             -17
#define GSK_ERROR_SELF_SIGNED                   -18
#define GSK_ERROR_BAD_MALLOC                    -20
#define GSK_ERROR_BAD_STATE                     -21 /* V3 */
#define GSK_ERROR_SOCKET_CLOSED                 -22
#define GSK_ERROR_GSK_INITIALIZATION_FAILED     -23
#define GSK_ERROR_HANDLE_CREATION_FAILED        -24
#define GSK_ERROR_BAD_DATE                      -25
#define GSK_ERROR_BAD_KEY_LEN_FOR_EXPORT        -26
#define GSK_ERROR_NO_PRIVATE_KEY                -27
#define GSK_BAD_PARAMETER                       -28
#define GSK_ERROR_INTERNAL                      -29
#define GSK_ERROR_WOULD_BLOCK                   -30
#define GSK_ERROR_LOAD_GSKLIB                   -31
#define GSK_ERROR_NO_INITIALIZE                 -32
#define GSK_ERROR_SRB                           -33
#define GSK_ERROR_UNKNOWN_ERROR                 -99

/* Misc functions  */
#define GSK_FUNCTION_RESET_SID                  1

/* return codes. These are the return values          */
/* for gsk_secure_soc_write and gsk_secure_soc_read */
#define GSK_ERROR_BAD_BUFFER_SIZE               -100
#define GSK_ERROR_BAD_BUFFER                    -103

/* return codes. These are the return values          */
/* for gsk_secure_soc_write and gsk_secure_soc_read */
#define GSK_ERROR_BAD_SSL_HANDLE                -101
#define GSK_ERROR_TIMEOUT                       -102

/* Return codes.  */
#define GSK_ERROR_NOT_SERVER                    -50
#define GSK_ERROR_NOT_SSLV3                     -51
#define GSK_ERROR_NOT_SSLV3_CLIENT              -52


/*Return codes for gsk_secure_soc_reset*/
#define GSK_SECURE_SOC_RESET_OK                  0 /*Successful socket reset*/


  /* Data type definitions */

typedef enum { GSK_AS_CLIENT,
               GSK_AS_SERVER,
               GSK_AS_SERVER_WITH_CLIENT_AUTH,
               GSK_AS_CLIENT_NO_AUTH
             } gsk_handshake;

typedef enum { GSK_CA_ROOTS_LOCAL_ONLY,
               GSK_CA_ROOTS_LOCAL_AND_X500
             } gsk_ca_roots;

typedef enum { GSK_CLIENT_AUTH_LOCAL,
               GSK_CLIENT_AUTH_STRONG_OVER_SSL,
               GSK_CLIENT_AUTH_STRONG,
               GSK_CLIENT_AUTH_PASSTHRU
             } gsk_auth_type;

typedef enum { GSK_SSLVERSION_V2 = 20,
               GSK_SSLVERSION_V3 = 30
             } gsk_sslversion;

typedef enum { GSK_RESET_SIDCACHE_CALLBACK = 100,
               GSK_SET_SIDCACHE_CALLBACK   = 101,
               GSK_SET_GETPEER_CALLBACK    = 102,
               GSK_RESET_GETPEER_CALLBACK  = 103
             } gsk_user_set_fid;

typedef unsigned long (*GSKGETPEERPTR)(int);

typedef struct _gsk_init_data {   /* Basic gsk SSL Toolkit
                                   * initialization data
                                   */

   char * sec_types;               /* Security protocol choice        */
                                   /* (SSLV2|SSLV3|...|ALL            */
   char * keyring;                 /* Keyring file name               */
                                   /* Default roots used when NULL    */
   char * keyring_pw;              /* Keyring password                */
                                   /* Ignored when keyring=NULL       */
   char * keyring_stash;
#define GSK_SSLV2_CLIENT_TIMEOUT   100
#define GSK_SSLV2_SERVER_TIMEOUT   100
   long V2_session_timeout;        /* Number of seconds for SSLV2     */
                                   /* session data to time out. 0-100 */
#define GSK_SSLV3_CLIENT_TIMEOUT 43200
#define GSK_SSLV3_SERVER_TIMEOUT   100
   long V3_session_timeout;        /* Number of seconds for SSLV3     */
                                   /* session data to time out.       */
                                   /* 0-86400 (1 day)                 */
   char * LDAP_server;             /* Name or IP address of X500 host */
   int    LDAP_port;               /* Port number of X500 host        */
   char * LDAP_user;               /* User name for X500 host         */
   char * LDAP_password;           /* Password of X500 host           */
   gsk_ca_roots LDAP_CA_roots;     /* Which CA roots to use           */
   gsk_auth_type auth_type;        /* Client authentication type      */
 } gsk_init_data;


typedef struct _gsk_cert_info {
                                   /* Client certificate information  */
   char * cert_body;               /* Certificate body                */
   int    cert_body_len;           /* Lenth of certificate body       */
   char * sessionID;               /* Current session ID              */
   int    newSessionID;            /* TRUE if sid is new              */
   char * serial_num;              /* Serial number                   */
   char * common_name;             /* Common name of client           */
   char * locality;                /* Locality                        */
   char * state_or_province;       /* State or Province               */
   char * country;                 /* Country                         */
   char * org;                     /* Organization                    */
   char * org_unit;                /* Organizational Unit             */
   char * issuer_common_name;      /* Issuer's common name            */
   char * issuer_locality;         /* Issuer's locality               */
   char * issuer_state_or_province;/* Issuer's state or province      */
   char * issuer_country;          /* Issuer's country                */
   char * issuer_org;              /* Issuer's organization           */
   char * issuer_org_unit;         /* Issuer's organizational unit    */
   } gsk_cert_info;


typedef struct _gsk_soc_init_data {

   int    fd;                      /* file descriptor                 */
   gsk_handshake hs_type;          /* client or server handshake      */
   char * DName;                   /* keyring entry Distinguished     */
                                   /* name. When NULL the default     */
                                   /* keyring entry is used           */
   char * sec_type;                /* Type of security protocol used  */
                                   /* to protect this socket          */
   char * cipher_specs;            /* SSLV2 cipher specs preference   */
   char * v3cipher_specs;          /* SSLV3 cipher specs preference   */
                                   /* and order                       */
   int  (* skread)                 /* User supplied READ function ptr */
        (int fd, void * buffer, int num_bytes);
   int  (* skwrite)                /* User supplied WRITE function ptr*/
        (int fd, void * buffer, int num_bytes);
   unsigned char cipherSelectedÝ3¨;/* Cipher Spec used                */
   unsigned char v3cipherSelectedÝ2¨;/* Cipher Spec used              */
   int    failureReasonCode;       /* failure reason code             */

   gsk_cert_info * cert_info;      /* This information is read from   */
                                   /* from the client certificate     */
                                   /* when client authentication is   */
                                   /* enabled                         */
   gsk_init_data * gsk_data;

} gsk_soc_init_data;


typedef struct _gsk_soc_data {
   void * sk_SSLHandle;            /* gslssl connector to SSLHandlestr*/
} gsk_soc_data;

typedef struct _gsk_sec_level {
   int  version;                   /* Output - SSL toolkit version            */
   char v3cipher_specs Ý64¨;       /* Output - The sslv3 cipher specs allowed */
   char v2cipher_specs Ý32¨;       /* Output - The sslv2 cipher specs allowed */
   int  security_level;            /* Output - initially one of               */
                                   /*      GSK_SEC_LEVEL_US,                  */
                                   /*      GSK_SEC_LEVEL_EXPORT,              */
                                   /*      GSK_SEC_LEVEL_EXPORT_FR            */
} gsk_sec_level;

typedef struct _gsk_data_buffer {
   unsigned length;
   void    *data;
} gsk_data_buffer;

typedef struct _gsk_sidcache_callback {
   gsk_data_buffer *(* Get)(const unsigned char *sessionID,
                            unsigned             sessionIDLen,
                            int                  SSLVersion);
   gsk_data_buffer *(* Put)(gsk_data_buffer *sslSessionData,
                            const unsigned char *sessionID,
                            unsigned             sessionIDLen,
                            int                  SSLVersion);
   void (* Delete)(const unsigned char *sessionID,
                   unsigned             sessionIDLen,
                   int                  SSLVersion);
   void (* FreeDataBuffer)(gsk_data_buffer *data);
} gsk_sidcache_callback;

  /* Function prototypes */

int            gsk_initialize(gsk_init_data *);
char *         gsk_get_dn_by_label(char *label);
gsk_soc_data * gsk_secure_soc_init(gsk_soc_init_data *);
int            gsk_secure_soc_read(gsk_soc_data *, void *, int);
int            gsk_secure_soc_write(gsk_soc_data *, void *, int);
void           gsk_secure_soc_close(gsk_soc_data *);
int            gsk_get_cipher_info(int level,
				   gsk_sec_level * sec_level,
                                   void * Reserved_for_future_use);
void           gsk_free_memory(void *pointer, void *future_use );
int            gsk_user_set(int user_data_fid,
                            void *user_input_data,
                            void *future_user_data );
int            gsk_uninitialize(void);
int            gsk_secure_soc_reset(gsk_soc_data *);


#if defined(__cplusplus)
}
#endif

#endif /* _gskssl_h */

/* end of file, No text beyond this point  */
