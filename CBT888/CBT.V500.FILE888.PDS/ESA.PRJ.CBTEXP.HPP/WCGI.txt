#ifndef INCLUDE_WCGI
#define INCLUDE_WCGI

#include "mvsbase.hpp"
#include "wqfss.hpp"
#include "wqvar.hpp"
#include "wsupl.hpp"
#include "wuri.hpp"
#include "wdigaut.hpp"
#include "waccess.hpp"
#include "qfssglbl.hpp"

#define sWWA( n ) makeSTRING( (char *)wwa-> n , sizeof( wwa -> n ) )
#define ASCII_CRLF     "Öx0dÖx0a"
#define EBCDIC_CRLF     "ÖrÖn"

const char * W_YES      = "YES";
const char * W_NO       = "NO";
#define MAX_ENVVARS       4096

//       SPACE 1
//TCPIP task status
//       SPACE 1
                               //
#define tp_status_RESET 0      //    reset
#define tp_status_INITAPI 1    //    initapi
#define tp_status_SOCKET 2     //    socket
#define tp_status_BIND 3       //    bind
#define tp_status_LISTEN 4     //    listen
#define tp_status_ACCEPT 5     //    accept
#define tp_status_SEND 6       //    send
#define tp_status_RECEIVE 7    //    receive
#define tp_status_SHUTDOWN 8   //    shutdown
#define tp_status_CLOSE 9      //    close
#define tp_status_TERMAPI 10   //    termapi
#define tp_status_SELECT 11    //    select
#define tp_status_SENDCONF 13  //    send confirm
#define tp_status_ALLOCATE 14  //    allocate
#define tp_status_DEALLOC 15   //    deallocate
#define tp_status_ERROR 128    //    error
enum CGI_status
ä
  CGI_reset     = 0,
  CGI_gethead   = 1,
  CGI_getbody    = 2,
  CGI_genhead    = 3,
  CGI_genbody    = 4,
  CGI_puthead    = 5,
  CGI_putbody    = 6,
  CGI_incomplete_head = 7,
  CGI_close      = 10,
  CGI_error      = 255
ü;

static char * stc_tableÄ5ÜÄ20Ü;
static int set_stc_table( char * n , int c)
ä
  stc_tableÄ(c /100) -1ÜÄ c %100 Ü = n ;
  return c;
ü
#define STC( n , c )   Ö
const int n = set_stc_table( #n, c );
  STC(OK, 200 )
  STC(Created, 201)
  STC(Accepted, 202)
  STC(No_Content, 203)
  STC(Moved_Permanently, 301)
  STC(Moved_Temporarly, 302)
  STC(Not_Modified, 304)
  STC(Bad_Request, 400)
  STC(Unauthorized, 401)
  STC(Forbidden, 403)
  STC(Not_Found, 404)
  STC(Internal_Server_Error, 500)
  STC(Not_Implemented, 501)
  STC(Bad_Gateway, 502)
  STC(Service_Unavailable, 503)
#undef STC

class Access;

class CGI : public CallBacks , public mERROR
ä

protected:

   CGI_status status;       // process status
   int    trace_level;      // trace level
   FILE * trace_file;       // trace file
   char * c, * cw, *cww;    // work buffer pointers

   char * buff;         // buffer
   char * buffz;        // end of data
   int    buffl;        // actual buffer length
   char   eof;          // eof input flag
   int    length;       // general length
   int    rc;           // return code

   char   nph_flag;     // no parse header falg
   char   conv_flag;    // conv flag
   char   isindex_flag; // query with ISINDEX
   char   accept_flag;  // if set check accept type else accept everything
   char   dsp_flag;     // dsp flag
   pDSP   dsp;          // dataspace
   pDSP   dspSave;      // save here DSP also
   STRING dsp_list;     // list name in the dsp
   STRING dsp_list_input; // input DSP list
   STRING dummy;        // dummy var
   QVARs * qvars;       // query variables
   URI   * uri;         // Universal Resource Identifier
   AUTH  * auth;        // Digest authorization
   tm     http_date;    // date
   tm     http_expires; // expires
   tm     http_if_modified_since; // if modif
   tm     http_last_modified;     // last modified
   int    content_length;  // content length
   int    header_length;   // header length
   int    read_length;     // read length
   int    remainder_length;// remainder
   int    total_length;    // total length
   char * qfss_var_pointer;
   char * qfss_var_pointer_orig;
   STRING eSTRING;        // environ STRING
   Access * access;       // access object
public:
   CGI(pWWA, void *, void *);
   CGI()äü
   virtual ßCGI();

// CGI interface calls

   char *gets(char *);
   int   get(char *,int );
   int   getC();
   int   peekC();
   int   printf(char *, ... );
   int   put(char *, int);
   STRING& envvar(STRING);
   STRING& envvar(int);
   STRING   argv(int );
   int     ErrorHTML(char *, int = OK);
   int process();
   int cacheFile(char *, char *, char *, char =1 );
   int cacheObject(char *);
   URI * getURI()ä return uri;ü
   int trace(int, char *);
   int trace(int, char *, int, char *);
   virtual int userAuthenticate()äreturn 1;ü // if not SSL
private:   int rcv();
   char * ReasonPhrase(int );
   int isOk()ä return (NOT iserror());ü
   int parse(char *);
   int call(char *);
   int genHeaders(int = 200);
   int genOnlyHeaders(int );
   int genData();
   int genFromString(int, STRING,int = 1);
   char * genHTMLprefix();
   int sendHTML(char *);
   int setOutputConvFlag();
   char * convert(char *,int=0);//szm
   int hex(unsigned char);
   int process_POST();
   int process_PUT();
   int process_part();
   int readFile(EXTENSION_ENTRY *);
   int readLine(char *);
   int readNBytes(char*,int);
   int isBoundary(char *);
   int copyDsp2File();
   void setVar(int,char *,char *);
   STRING genEnvars(URI_type = cgi_call);

   friend class URI;
   friend class SKELETON_HTML;
   friend class Access;
ü;

#define HTML_ERROR "html_error"


#endif

