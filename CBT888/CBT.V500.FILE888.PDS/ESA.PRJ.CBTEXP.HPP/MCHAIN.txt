/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/mchain.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/


#ifndef INCLUDE_MCHAIN
#define INCLUDE_MCHAIN

#include "mvsbase.hpp"

struct chainE ä

	chainE * prev ;
	chainE * next ;
	char * chainEid   ;
	int    chainEidl  ;

	chainE()ächainEid = 0; chainEidl = 0; prev = next = 0;ü

	chainE(char * i,int l =0)
	ä
		if (i)
		ä
			if ( l ) chainEidl = l; else chainEidl =int(strlen(i));
			chainEid = new charÄchainEidl+1Ü; memcpy(chainEid,i,chainEidl+1);
		ü
		else chainEid =0;
		prev=next=0;
	ü

	chainE(const char * i,int l =0)
	ä
		if (i)
		ä
			if ( l ) chainEidl = l; else chainEidl =int(strlen(i));
			chainEid = new charÄchainEidl+1Ü; memcpy(chainEid,i,chainEidl+1);
		ü
		else chainEid =0;
		prev=next=0;
	ü

	chainE(const mvsSTRING * s)
	ä
		if (s)
		ä
			chainEidl = int((mvsSTRING *)s->lengthOf());
			chainEid = new charÄchainEidl+1Ü;
			memcpy(chainEid,(char *)mvsSTRING(*s),chainEidl+1);
		ü
		else chainEid =0;
		prev=next=0;
	ü
	virtual ßchainE()
	ä
		delete chainEid ;
	ü
	virtual void print()äü
ü;


class mCHAIN ä

protected:
	chainE * first;
	chainE * last ;

	chainE * pgo;
	long int    counter;
public:
	friend class CHAINITER ;

	mCHAIN()
	ä

		first = last = pgo = 0; counter = 0;
	ü

	mCHAIN(chainE * nc)
	ä
		pgo = 0;
		first = nc ; last = nc ;
		counter = 1;
	ü

	virtual ßmCHAIN();
	virtual   long int    add(chainE * nc,chainE * c,long int code = 1);
	virtual long int addfirst(chainE * nc )
	ä return add(nc,first,-1) ; ü
	virtual long int addlast(chainE * nc )
	ä return add(nc,last,+1) ; ü
	virtual long int before(chainE * nc , chainE * c)
	äreturn add(nc,c,-1);ü
	virtual long int after(chainE * nc , chainE * c)
	äreturn add(nc,c,+1);ü
	virtual long int del(chainE * c);
	virtual void swap(chainE * a , chainE * b);



	virtual chainE* goNext();
	virtual chainE* goPrev();
	virtual chainE* goFirst();
	virtual chainE* goLast();
	virtual chainE* go(int);
	virtual chainE * searchEQ(const char * id,size_t =0);
	virtual chainE * search(const char * id,size_t =0);
	virtual chainE * search(const mvsSTRING &);
	virtual chainE * search(char *id,size_t length =0)ä return search((const char *)id,length);ü
	virtual chainE * search(mvsSTRING &s)ä return search((const mvsSTRING&)s);ü

	virtual void sort(long int direction);
	virtual void print_all_ids();
	virtual void print();
	friend int idcmp(chainE* , chainE*);
ü;

enum SORTEDTYPEäUNIQUE =0 ,NOUNIQUE =1 ü;

class SORTEDmCHAIN:public mCHAIN
ä
private:
	SORTEDTYPE unique;
public:
	SORTEDmCHAIN(SORTEDTYPE st = UNIQUE):
			mCHAIN(), unique(st)äü;
			SORTEDmCHAIN(chainE *nc, SORTEDTYPE st = UNIQUE)
				:mCHAIN(nc), unique(st)äü;
			long int add(chainE * nc,chainE * = 0,long int = 0);
			virtual ßSORTEDmCHAIN()äü
ü;

class mSTACK:public mCHAIN
ä
private:
public:
	mSTACK():mCHAIN()äü
	mSTACK(chainE * nc):mCHAIN(nc)äü

	virtual long int push(chainE * nc)äreturn addlast(nc);ü
	virtual chainE * examine(int i = 0 )
	ä
		if ( i >= 0 ) return last;
		i = -i;
		if ( counter-i < 0 ) return NULL;
		return go(counter-i);

	ü
	virtual chainE * pop()ächainE * r = last; if (last) del(last);return r;ü
ü;

class mHASH:public mCHAIN
ä
private:
	chainE * * table;
	int    hash;
	int		pi;
public:
	mHASH(int h = 1023);
	ßmHASH();
	long int add(chainE *);
	long int del(chainE *);
	chainE * next();
	chainE * search(chainE *);
private:
	size_t  hashCode(chainE *c)
	ä
		int r = 0;
		if (c->chainEid)
			for (int i = c->chainEidl;i;i--)
				r = (r<<1) ¬ (c->chainEidÄi-1Ü) ;
		return size_t(r<0 ? -r:r);
	ü
ü;

class CHAINITERä
private:
	mCHAIN * c;
	chainE * a;
public:
	CHAINITER(mCHAIN &ch) äc = &ch ; a = (c->first ? c->first:0) ; ü
	CHAINITER(mCHAIN *ch) äc =  ch ; a = (c->first ? c->first:0) ; ü
	ßCHAINITER()äü
	chainE * next() ä

		chainE * r = a ;
		if ( a == 0 ) a =c->first ;
		else a = a->next ;
		return r;
	ü
	chainE * operator()()ä return next(); ü
	void reset() ä a = (c ? c->first:0);ü
ü;

int idcmp(chainE* , chainE*);


#endif
