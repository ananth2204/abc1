#ifndef INCLUDE_WCGIDB2
#define INCLUDE_WCGIDB2

#include "cvprc.hpp"
#include "callbck.hpp"

#define PAR_AFPFILE      "ISISDB_AFPFILE"        // Content of AFP-Document
#define PAR_PAGECOUNT    "ISISDB_PAGECOUNT"      // Number of pages
#define PAR_IMM          "ISISDB_IMM"            // imm?
#define PAR_IDXNAMES     "ISISDB_IDXNAME"        // Name of AFP-Indices
#define PAR_IDXVALUES    "ISISDB_IDXVALUE"       // Value of AFP-Indices
#define PAR_IDXCOUNT     "ISISDB_IDXCOUNT"       // Number of AFP-Indices
#define PAR_DOCID        "ISISDB_DOCID"          // Document ID
#define PAR_DOCIDCOUNT   "ISISDB_DOCIDCOUNT"     // Number of document

#define PAR_GETDOC       "GET_DOC"               // Get content of AFP-Document
#define PAR_GETPOSTDOC   "GET_POSTDOC"           // Get content of AFP-Document
#define PAR_GETIDX       "GET_IDX"               // Get AFP-Indices
#define PAR_GETIDXNAME   "GET_IDXNAME"           // Get AFP-Indices
#define PAR_GETIDXVALUE  "GET_IDXVALUE"          // Get AFP-Indices
#define PAR_GETDOCID     "GET_DOCID"             // Get ID of AFP-Document

#define PAR_PUTDOC       "PUT_DOC"               // Put Documents+Indices into database including first and last
#define PAR_PUTPOSTDOC   "PUT_POSTDOC"           // Put Documents+Indices into database excluding first and last

 #define DB_MAXNAME      255
 #define DB_TYP_LONG       0             // Field typ long
 #define DB_TYP_DOUBLE     1             // Field typ double
 #define DB_TYP_STRING     2             // Field typ ASCII string
 #define DB_TYP_MEM        3             // Field typ memory
 #define DB_MAXVARIABLES 256             // Max table vaiables

 typedef struct Field_rec ä
  struct Field_rec *next;           // next Field
  char             nameÄDB_MAXNAME+1Ü; // field name
  char             fldtyp;          // field typ
  size_t           length;          // field length
  void             *data;           // field data
 ü DBField;

 typedef struct Table_rec ä
  struct Table_rec *next;              // next table row
  DBField          *firstfield;          // first field
 ü DBTable;

#ifndef __SASC__
	#undef DLLENTRY
	#define DLLENTRY
#endif

typedef int (DLLENTRY *tdbget)(char *proc,int parc, char **pars, DBTable **table);
typedef int (DLLENTRY *tdbput)(char *proc,int parc, char **pars, DBTable *table);
typedef int (DLLENTRY *tdbfreetable)(DBTable *);
typedef int (DLLENTRY *tdbopen)(char *namesÄÜ,char *valsÄÜ,CallBack cb,unsigned long sect);
typedef int (DLLENTRY *tdbclose)();

class DBDLL : public DLL
ä
public:
	 tdbget        dbget;
	 tdbput        dbput;
	 tdbfreetable  dbfreetable;
	 tdbopen       dbopen;
	 tdbclose      dbclose;

	int Ok()äreturn(DLL::Ok()/*&&ar_put*/);ü
	DBDLL(char *name,unsigned long modhandle);
	ßDBDLL();
ü;

DBDLL::DBDLL(char *name,unsigned long modhandle)
						 :DLL(name,modhandle)
ä
	dbget=(tdbget)QueryProcedure("DBGET",0);
	dbput=(tdbput)QueryProcedure("DBPUT",0);
	dbfreetable=(tdbfreetable)QueryProcedure("DBFREETABLE",0);
	dbopen=(tdbopen)QueryProcedure("DBOPEN",0);
	dbclose=(tdbclose)QueryProcedure("DBCLOSE",0);
ü
DBDLL::ßDBDLL()
ä
ü
#endif
