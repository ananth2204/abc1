#ifndef INCLUDE_STRNODE
#define INCLUDE_STRNODE
#include "mchain.hpp"

#define SLASH			'/'
#define POINT			'.'
#define BLANK			' '
#define NEWLINE		'Ön'
#define UNDERSCORE '_'

static const char * EXT_Tso = "Tso";
static const char * EXT_Jes = "Jes";
static const char * EXT_Cmd = "Cmd";
static const char * EXT_Uss = "Uss";
static const char * EXT_Dsn = "Dsn";
static const char * EXT_Edi = "Edi";
static const int		INIT_BUFF_SIZE  = 1024*256;

typedef enum
	ä
	StrNodeEntry,
	StrNode,
	StrFolderEntry,
	StrFolder,
	StrUnknown = -1
	ü StrType;

typedef enum
	ä
	StrKindTso  = 0,
	StrKindJes	= 1,
	StrKindCmd  = 2,
	StrKindUss  = 3,
	StrKindDsn  = 4,
	StrKindEdi  = 5,
	StrKindUnknown = -1
	ü StrKind;

class Str:public chainE
	ä
	static int index;
	private:
		char * path;		//path name
		char * member;  //member name
		char * ext;     //extension
		char * name;    //reference name
		char * link;    //link desc
		char * icon;    //icon
		char * varname; //
		StrType type;   //type
		StrKind kind;   //kind of entry
		SORTEDmCHAIN * sub; //subdirs
		char * create;
	protected:
		bool   ok;
		struct stat info;
	public:
		Str();
		Str(const char *);
		Str(const Str&);
		virtual ßStr();

		char * getPath()
			äreturn path;ü
		char * getMember()
			äreturn member;ü
		char * getExt()
			äreturn ext;ü
		char * getName()
			äreturn name;ü
		char * getIcon()
			äreturn icon;ü
		StrType getType()
			äreturn type;ü
		StrKind getKind()
			ä return kind;ü
		char * getCreate()
			äreturn create;ü
		char * getVarName()
			ä return varname;ü
		void  printTree(const char * =NULL);
	protected:
		void init(const char * =NULL);
		char * path2Name(const char *);
		char * name2Path(const char *);
		void   setCreate();
		void   setVarName();
		int    readDir(const char *);
	ü;

typedef struct ä
	int         reserved_first;
	int         kind;
	char        chainEidÄ1024Ü;
	char        createÄ32Ü;
	int         reserved_last;
	ü StrDataHead;

class StrData:public Str
	ä
	private:
		FILE *        file;
		char				* buff;
		int           buffOffset;
		StrDataHead   head;
		int           offset;
		int           length;
		int           buffSize;
	public:
		StrData(const char *);
		virtual 	ßStrData();
		virtual  StrDataHead * getHead()
			ä return &head;ü
		virtual int getFirst();
		virtual	int getLast();
		virtual	int getNext();
		virtual	int getPrev();
		virtual int add(int,const char *p =NULL);
		void  addBuff(char *,int=0);
		void resetBuff();
		char * getBuff()ä return buff;ü
	int    getLength()ä return length;ü
	int    print(int = -1);
	protected:
		void	init();
		void  reallocBuff(int);
	ü;

/*
class StrNodeEntry:public Str
ä
private:
size_t      iOffset;
size_t      oOffset;
size_t      length;
char * created;
InputType		iType;
OutputType  oType;
public:
StrNodeEntry();
StrNodeEntry(const char *);
StrNodeEntry(const StrNodeEntry&);
ßStrNodeEntry();
int display();
int read();
int write();
int open();
int close();
ü;


class StrNode:public Str
ä
private:
public:
StrNode();
ßStrNode();
ü;

class StrFolderEntry:public Str
ä
private:
public:
StrFolderEntry();
ßStrFolderEntry();
ü;

class StrFolder:public:Str
ä
private:
public:
StrFolder();
ßStrFolder();
ü;

*/

#endif
