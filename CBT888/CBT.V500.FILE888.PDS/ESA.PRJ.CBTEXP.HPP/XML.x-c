#pragma pack(packed)

struct xml ä
  int            xmlsaveÄ18Ü;             /* SAVE AREA                           */
  unsigned char  xml_optionÄ8Ü;           /* TYPE OF REQUEST                     */
  void          *xml_uparm;               /* uparm pointer                       */
  void          *xml_length;              /* length                              */
  void          *xml_data;                /* address                             */
  void          *xml_send_length;         /* length received from XML            */
  void          *xml_send_data;           /* data received from XML              */
  void          *xml_crab;                /* CRAB pointer                        */
  unsigned char  xml_systemidÄ8Ü;         /* system ID                           */
  void          *xml_parmlistÄ8Ü;         /* parmlist                            */
  short int      xml_cparml;              /* list length                         */
  unsigned char  xml_cparmÄ60Ü;           /* parms for C                         */
  unsigned char  _filler1Ä2Ü;
  unsigned char  xml_call_option;         /* option i.e. callback point          */
  unsigned char  xml_callback_option;     /* option i.e. callback point          */
  unsigned char  xml_caller_status;       /* caller status                       */
  unsigned char  _filler2Ä5Ü;
  void          *xml_callback_parmsÄ8Ü;   /* parameters                          */
  void          *xml_callback_return;     /* parameters                          */
  void          *xml_callback_saveÄ16Ü;   /* callback save registers             */
  void          *xml_tracelevel;          /* trace level                         */
  struct ä
    unsigned char  _xml_msg__msg_msgidÄ4Ü; /* message id */
    ü xml_msg;
  void          *xml_msg__msg_insertÄ16Ü; /* message insert list                 */
  void          *xml_msg__msg_global;     /* global addr                         */
  unsigned char  xml_msg__msg_hexsw;      /* hexa switch                         */
  unsigned char  xml_msg__msg_wto;        /* wto switch                          */
  unsigned char  xml_msg__msg_log;        /* log switch                          */
  unsigned char  xml_msg__msg_asacc;      /* asa contol char                     */
  unsigned char  xml_msg__msg_trc;        /* set TRC                             */
  short int      xml_msg__msg_desc;       /* descriptor code                     */
  short int      xml_msg__msg_routcdeÄ3Ü; /* route code                          */
  unsigned char  xml_msg__msg_pref;       /* control char prefix                 */
  unsigned char  xml_msg__msg_dateÄ9Ü;    /* date filed                          */
  unsigned char  xml_msg__msg_timeÄ14Ü;   /* time stemp                          */
  unsigned char  xml_msg__msg_extrÄ140Ü;  /* extract buffer                      */
  unsigned char  xml_workÄ128Ü;           /* work area                           */
  unsigned char  xml_xmldefÄ128Ü;         /* default dataset name                */
  unsigned char  _filler3Ä3Ü;
  void          *xml_cppsaveÄ18Ü;         /* CPP save area                       */
  unsigned char  _filler4Ä128Ü;           /* work arae                           */
  void          *xml_bufferÄ2Ü;           /* buffer addres length for reply data */
  ü;

#define xml_msg__msg_msgid xml_msg._xml_msg__msg_msgid

/* Values for field "xml_call_option" */
#define xml_call_option_init            0      /* init XML            */
#define xml_call_option_reset           1      /* reset , restart XML */
#define xml_call_option_call            2      /* call XML            */
#define xml_call_option_error           3      /* error in $$PRXX     */

/* Values for field "xml_callback_option" */
#define xml_callback_option_readbytes   0      /* readBbytes          */
#define xml_callback_option_s_proc      1      /* start proc          */
#define xml_callback_option_e_proc      2      /* end proc            */
#define xml_callback_option_se_proc     3      /* start proc element  */
#define xml_callback_option_ee_proc     4      /* end proc element    */
#define xml_callback_option_s_desc      5      /* start desc          */
#define xml_callback_option_e_desc      6      /* end desc            */
#define xml_callback_option_se_desc     7      /* start desc element  */
#define xml_callback_option_ee_desc     8      /* end desc element    */
#define xml_callback_option_s_data      9      /* start data          */
#define xml_callback_option_e_data      10     /* end data            */
#define xml_callback_option_se_data     11     /* start data element  */
#define xml_callback_option_ee_data     12     /* end data element    */
#define xml_callback_option_enddocument 13     /* endDocument         */
#define xml_callback_option_fatal       14     /* Fatal               */
#define xml_callback_option_message     15     /* Message             */

/* Values for field "xml_caller_status" */
#define xml_caller_status_init          0      /* caller init         */
#define xml_caller_status_error         1      /* error in caller     */

/* Values for field "xml_buffer" */
#define xml_default_buffer              131072 /* 128Kbyte            */

#pragma pack(reset)
