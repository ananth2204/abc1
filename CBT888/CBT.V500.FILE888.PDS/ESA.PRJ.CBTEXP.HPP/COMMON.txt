/*
 * THIS FILE CONTAINS SAMPLE CODE.  IBM PROVIDES THIS CODE ON AN
 * 'AS IS' BASIS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 */

#ifndef _COMMON_H
#define _COMMON_H

#include <utils.hpp>
#include <gskssl.h>

#define MAX_QUEUED_REQUESTS 20
#define MAX_BUFFER_SIZE     1024*32

#define PORTNUM           4321
#define LOCALHOST         0x7F000001     /* 127.0.0.1 */

#define COOKIE            "\x21\x12\x21\x12"

#define QUITCOMMAND         22
#define CQUITCOMMAND        23
#define USERDATA             0

struct MsgHeader {
   char cookieÝ4¨;
   int  length;
   int  command;
   int  returnlength;
};

struct CacheEntry {
   struct CacheEntry *pNext;
   struct CacheEntry *pPrev;
   unsigned          sessionIDLen;
   int               SSLVersion;
   gsk_data_buffer   *pData;
   unsigned char     sessionIDÝ1¨;
};

struct Connection {
#define CONNECTION_EYECATCHER_LEN 8
#define CONNECTION_EYECATCHER "CONN    "
   char eyecatcherÝCONNECTION_EYECATCHER_LEN¨;
   char *host;
   int hostAddr;
   int port;
   int sock;
   int handle;
   boolean isSecure;
   gsk_soc_data *socData;
};

extern "C" {

/* CLIENT OPEN */
Connection *OpenConnection( char *host, int port );

/* SERVER SETUP */
Connection *SetupConnection( char *host, int port, int maxQueued );

/* SERVER ACCEPT */
Connection *AcceptConnection( Connection *handle );

int SendMsg( Connection *handle, int command, void *data, int dataLength, int returnDataLength );

int RecvMsg( Connection *handle, int *command, void *data, int *dataLength, int *returnDataLength );

void CloseConnection( Connection **handle );

int CacheInit(void);

unsigned long GetPeer(int fd);
}

#endif /* _COMMON_H */

