/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/os.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/


/**
*
* This header file contains declarations of various OS only routines.
*
**/

#ifndef __IncOS
#define __IncOS

#include <stdlib.h>
//szm
#include <string.h>
//ZA091008 comes from isislib/systems.cpp ßFFBLK()

//#define MAXDSNS 16*45 problem with more than 16 concat's szm
#define MAXDSNS 256*45

struct DSNINFO ä    /* argument structure for osdfind/osdnext */
//   void * _ Ä4Ü ;        /* reserved for library use */ /* stl20090508 */
   void * xxx Ä4Ü ;        /* reserved for library use */
// stl
   char cattype;         /* catalog entry type */
   char dsname Ä45Ü ;    /* null-terminated full dsname */
   char mem Ä9Ü ;        /* null-terminated member name */
   char __;    /* padding */
   int  TTR;
   unsigned alias: 1;    /* alias member bit */
   unsigned user_TTR_count: 2; /* number of user TTRs */
   unsigned user_data_halfwords: 5; /* halfwords of user data */
   char user_data Ä62Ü ; /* user data from PDS directory */
   /*char mmaskÄ9Ü    ; */ /* member name mask             */
   char mmaskÄ256Ü    ;  /* member name mask also for VSAM  //ZA050617 */
   char * dsns        ;  /* list pointer                 */
   char dsnslÄMAXDSNSÜ;  /* dsn list                     */
   void * filepointer;   /* ve file pointer here         */
                         /* ZA030926 taken from DSNINF   */
	 void * FILEpointer;   //szm20070330 FILESYS FILE pointer
   void* ptdatasname;    /* DataSName   pointer for osmnext */
   void* ptdatasmember;  /* DataSMember pointer for osmnext */
   void* rc;             /* return code from 1 call */
	 int		lsmvs_flag;     /* lsmvs active flag */ //szm
	 void * lsmvs_pointer;  /* next entry pointer */
	 int    lsmvs_counter;  /* counter            */
	 char * lsmvs_cwork ;   //szm
   bool isVsam;           /* true if vsam-enabled osmfind,osmnext,osmquit should be used  */
 //szm20060324
 DSNINFO()
 ä
 	memset(this,0,sizeof(DSNINFO)); //szm20040913 //ZA091008 comes from isislib/systems.cpp ßFFBLK()
 	//lsmvs_cwork = (char *)0;
 ü
 ßDSNINFO()
	 ä
			if (lsmvs_cwork)
								free(lsmvs_cwork);
			lsmvs_cwork = (char *)0;
	 ü
 //szm20060324

ü;

ISIS_EXT_C_START

#pragma map(osdynalloc, "#OSDYALC")

#ifndef _NOLIBCK
ISIS_EXT_ASM int oslink(const char *, ...);
#if defined(CICSAPPL) == 0
extern int osddinfo(const char *, char *, char *, char *, int *,
                    int *);
extern int osdsinfo(const char *, int, unsigned short *, char *,
                    int *, int *);
#endif
extern int osdfind(struct DSNINFO *, const char *);
extern int osdnext(struct DSNINFO *);
extern void osdquit(struct DSNINFO *);
extern int osmfind(struct DSNINFO *, const char *);
extern int osmnext(struct DSNINFO *);
extern void osmquit(struct DSNINFO *);
extern int osdynalloc(int, const char *, char *, ...);
#else
ISIS_EXT_ASM int oslink();
#if defined(CICSAPPL) == 0
extern int osddinfo();
extern int osdsinfo();
#endif
extern int osdfind(), osdnext();
extern void osdquit();
#endif
ISIS_EXT_C_END

#define RECFM_F 0x80 /* fixedlength records */
#define RECFM_V 0x40 /* variable length records */
#define RECFM_U 0xc0 /* undefined length records */
#define RECFM_D 0x20 /* variable length ASCII records */
#define RECFM_T 0x20 /* track overflow */
#define RECFM_B 0x10 /* blocked records */
#define RECFM_S 0x08 /* spanned/standard records */
#define RECFM_A 0x04 /* ANS control characters */
#define RECFM_M 0x02 /* machine control characters */

#define LRECL_X -0x8000 /* no maximum record length */

#define DSORG_IS 0x8000 /* indexed sequential */
#define DSORG_PS 0x4000 /* physical sequential */
#define DSORG_DA 0x2000 /* direct organization */
#define DSORG_PO 0x0200 /* partitioned organization */
#define DSORG_U  0x0100 /* unmovable */
#define DSORG_AM 0x0008 /* VSAM */

#define DYN_ALLOC 1
#define DYN_FREE 2
#define DYN_CONCAT 3
#define DYN_DECONCAT 4
#define DYN_NOTINUSE 5
#define DYN_DDALLOC 6
#define DYN_INQUIRE 7

#endif
