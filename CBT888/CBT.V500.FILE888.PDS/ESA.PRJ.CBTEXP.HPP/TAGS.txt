#ifndef INCLUDE_TAGS
#define INCLUDE_TAGS

#include "mvsbase.hpp"

//
// field types : fALPHANUMERIC - cH - character
//               fBINARY       - bI - binary
//               fsLLTag       - sL

// groups : 0    system defaults
//          1    partner system defaults
//          2    docexec profile defaults
//          3    request parameters

const int MaxTagCatalogEntry = 999;


	#ifndef cH
		#define cH fALPHANUMERIC
	#endif

	#ifndef bI
		#define bI fBINARY
	#endif

	#ifndef sL
		#define sL fSLLTAG
	#endif

	#ifndef aL
		#define aL aLEFT
		#define aR aRIGHT
	#endif

	#ifndef cU
		#define cU cUPPER
		#define cL cLOWER
	#define cA cASIS
	#endif

#if defined(input_high) == 0 && defined(input_low) == 0
  #define input_high  'Öx09'
  #define input_low   'Öx01'
  #define input_error 'Öx10'
#endif

extern int TagCatalogMaxUsed ;

class TagCatalogEntry
ä
public:
  int         code;
  STRING      name;
  STRING      deflt;
  int         maxlength;
  FIELDTYPE   fieldtype;
  ALIGNTYPE   aligntype;
  CAPSTYPE    capstype;
  char        attrib;
  int         vectors;
  int         vectora;
  char   *  * vector;
  TagCatalogEntry(
		  int c,
		  int ml,
		  char * df = 0,
		  FIELDTYPE ft = fALPHANUMERIC,
		  ALIGNTYPE at = aLEFT,
		  CAPSTYPE ct = cUPPER,
		  char attr = input_high,
		  int  vs = 0);
  TagCatalogEntry(TagCatalogEntry&);
  ßTagCatalogEntry();
  char * operatorÄÜ(int );
  char * get(int i = 0)ä return vectorÄiÜ; ü
ü;

#define  TagCatalogEntryP TagCatalogEntry *
extern  		  TagCatalogEntryP   * TagCatalog;
int     	 	 initTags();
int     		  readTags(char * = 0);
int     	 	 printTags();
TagCatalogEntry * searchTags(char *);

#ifndef Nodef
#define Nodef Öx00
#endif

#define   tag( n , c , l , d , ft , al , cap , attr , vs )  Ö
const int n = c;
#define   tagS( n , c , l , d ,  vs )  Ö
const int n = c;
#define TAG( n , c , d) Ö
const int n = c ;

#define TC( n ) (TagCatalogÄ n Ü->get(0))

#include "tagctlg.hpp"

#undef tag
#undef tagS
#undef TAG

#endif
