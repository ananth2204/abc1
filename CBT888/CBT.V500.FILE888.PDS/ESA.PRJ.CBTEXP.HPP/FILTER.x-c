#pragma pack(packed)

struct filter ä
  void          *filter_output;             /* output type                               */
  unsigned char  filter_type;               /* filter type                               */
  unsigned char  filter_skip;               /* skip flag                                 */
  unsigned char  filter_frozen;             /* frozen all                                */
  unsigned char  _filler1;
  void          *filter_strta;              /* lower start address                       */
  void          *filter_enda;               /* lower end address                         */
  void          *filter_estrta;             /* extended  start address                   */
  void          *filter_eenda;              /* extended  end address                     */
  void          *filter_caller_length;      /* caller length                             */
  unsigned char  filter_callerÄ32Ü;         /* caller mask                               */
  void          *filter_called_length;      /* caller length                             */
  unsigned char  filter_calledÄ32Ü;         /* called mask                               */
  unsigned char  filter_actionÄ32Ü;         /* action name                               */
  unsigned char  _filler2Ä16Ü;              /* FDAD, DVTBL                               */
  void          *_filler3;                  /* KEYLEN, DEVT, TRBAL                       */
  unsigned char  _filler4;                  /* BUFNO, NUMBER OF BUFFERS                  */
  int            _filler5 : 24;             /* BUFCB, BUFFER POOL CONTROL BLOCK          */
  short int      _filler6;                  /* BUFL, BUFFER LENGTH                       */
  unsigned char  _filler7Ä2Ü;               /* DSORG, DATA SET ORGANIZATION              */
  void          *_filler8;                  /* IOBAD FOR EXCP OR RESERVED                */
  unsigned char  _filler9;                  /* BFTEK, BFALN, DCBE INDICATORS             */
  int            _filler10 : 24;            /* EODAD (END OF DATA ROUTINE ADDRESS)       */
  unsigned char  _filler11;                 /* RECFM (RECORD FORMAT)                     */
  int            _filler12 : 24;            /* EXLST (EXIT LIST ADDRESS)                 */
  unsigned char  _filler13Ä8Ü;              /* DDNAME                                    */
  unsigned char  _filler14;                 /* OFLGS (OPEN FLAGS)                        */
  unsigned char  _filler15;                 /* IFLGS (IOS FLAGS)                         */
  unsigned char  _filler16Ä2Ü;              /* MACR (MACRO FORMAT)                       */
  unsigned char  _filler17;                 /* OPTCD, OPTION CODES                       */
  int            _filler18 : 24;            /* CHECK OR INTERNAL QSAM SYNCHRONIZING RTN. */
  void          *_filler19;                 /* SYNAD, SYNCHRONOUS ERROR RTN. (3 BYTES)   */
  short int      _filler20;                 /* INTERNAL ACCESS METHOD FLAGS              */
  short int      _filler21;                 /* BLKSIZE, BLOCK SIZE                       */
  int            _filler22;                 /* INTERNAL ACCESS METHOD FLAGS              */
  void          *_filler23;                 /* INTERNAL ACCESS METHOD USE                */
  void          *_filler24;                 /* EOBAD                                     */
  void          *_filler25;                 /* RECAD                                     */
  short int      _filler26;                 /* QSWS (FLAGS) AND EITHER DIRCT OR BUFOFF   */
  short int      _filler27;                 /* LRECL                                     */
  unsigned char  _filler28;                 /* EROPT, ERROR OPTION                       */
  int            _filler29 : 24;            /* CNTRL                                     */
  short int      _filler30Ä2Ü;              /* RESERVED AND PRECL                        */
  void          *_filler31;                 /* EOB, INTERNAL ACCESS METHOD FIELD         */
  void          *filter_filedesc;           /* HFS file descriptor                       */
  void          *filter_openl;              /* OPEN list form                            */
  void          *filter_pathlength;         /* path  length                              */
  unsigned char  filter_pathnameÄ256Ü;      /* pathname                                  */
  void          *filter_envarlength;        /* envar length                              */
  void          *filter_envar;              /* envar addr                                */
  void          *filter_modelength;         /* mode length                               */
  void          *filter_mode;               /* mode addr                                 */
  void          *filter_ppid;               /* orig PPID                                 */
  int            filter_var_epname_i;
  unsigned char  filter_var_epnameÄ8ÜÄ128Ü;
  int            filter_var_called_i;
  unsigned char  filter_var_calledÄ8ÜÄ32Ü;
  int            filter_var_caller_i;
  unsigned char  filter_var_callerÄ8ÜÄ32Ü;
  int            filter_var_errno_i;
  void          *filter_var_errnoÄ8Ü;
  int            filter_var_errno2_i;
  void          *filter_var_errno2Ä8Ü;
  int            filter_var_offset_i;
  void          *filter_var_offsetÄ8ÜÄ2Ü;
  int            filter_var_tcb_i;
  void          *filter_var_tcbÄ8Ü;
  int            filter_var_thdid_i;
  void          *filter_var_thdidÄ8ÜÄ2Ü;
  void          *filter_ll_index;           /* free entry index                          */
  unsigned char  filter_llÄ24576Ü;          /* ll area                                   */
  unsigned char  _filler32;
  ü;

/* Values for field "filter_output" */
#define filter_output_none     0        /* no output       */
#define filter_output_gtf      1        /* GTF output      */
#define filter_output_dd       2        /* DD name         */
#define filter_output_hfs      3        /* HFS path        */
#define filter_output_binary   4        /* output binary   */
#define filter_output_gtf_full 5        /* GTF full output */

/* Values for field "filter_type" */
#define filter_type_entry      1        /* entry filter    */
#define filter_type_exit       2        /* exit            */
#define filter_type_errno      4        /* errno           */

/* Values for field "filter_ll" */
#define filter_length          0x106904 /* filter length   */

#pragma pack(reset)
