#pragma pack(packed)

struct cct ä
  unsigned char  cctcctÄ4Ü;  /* -          ACRONYM IN EBCDIC -CCT-                  */
  int            cccapmet;   /* -     MINIMUM USER EXECUTION INTERVAL FOR           */
  int            cccapsct;   /* -              Count of samples taken in IRARMAP1   */
  int            cccmnsin;   /* -           MINIMUM INTERVAL FOR COMPUTING          */
  int            cctssrbf;   /* -              SSRB-related failure count      @P3C */
  short int      cccapldp;   /* -              DP FOR UNDISPATCHED APG USERS        */
  short int      ccvenqen;   /* -              Count of enclaves with an            */
  short int      cccaplen;   /* -              LENGTH OF MTW GROUPS - 1    @G50IPSS */
  short int      cccentct;   /* -              Count of entries to IRARMAP1 used    */
  int            cccmxmtw;   /* CCCTTSH in service units * 16K @L4C                 */
  short int      _filler1;   /* Reserved                   @WLMPIFA                 */
  short int      ccvdasct;   /* @PN72473                                            */
  short int      cccttup;    /* Task time slice per UP     @WLMPIFA                 */
  short int      cccwtup;    /* Wait time slice per UP     @WLMPIFA                 */
  short int      ccvcrmen;   /* -              Number of enclaves promoted for      */
  short int      ccvcrmct;   /* -              Number of users non-swappable for    */
  int            cccrsv5;    /* @L3C                                                */
  int            cccrsv6;    /* @L3C                                                */
  short int      cccttshc;   /* Task time slice high ceiling for                    */
  short int      cccttsm;    /* Task time slice max             @L5C                */
  int            cccittsh;   /* Initial Task Time Slice High value                  */
  int            ccvsigpb;   /* SIGP base count             @LVCMDAC                */
  short int      cccmaxql;   /* Maximum queue length            @P1C                */
  short int      cccsigpr;   /* SIGP threshold to adjust queue  @P1A                */
  short int      cccmttwl;   /* Low MTTW in microsecs to adjust                     */
  short int      cccmttwh;   /* High MTTW in microsecs to adjust                    */
  int            ccvrbswt;   /* -              RECENT BASE SYSTEM WAIT TIME         */
  int            cccawmt;    /* ALTERNATE WAIT MANAGEMENT TIME @01C                 */
  int            ccvrbstd;   /* -              RECENT BASE TIME OF DAY              */
  int            ccvinsct;   /* XES support                    @P2C                 */
  int            ccvmtwb;    /* -              AWM time base for MTTW calc    @P1C  */
  struct ä
    int            _ccvwtdb; /* -              AWM wait dispatch ct base  @LVCMDAC */
    ü ccvejst;
  int            cccawmts;   /* -              AWM time for SUPs          @WLMPSUP  */
  short int      _filler2;   /* -             reserved                   @WLMPIFA   */
  short int      ccvutilp;   /* -             SYSTEM CPU UTILIZATION                */
  short int      cccrsv16;   /* @L3C                                                */
  short int      ccvlgfmc;   /* -             AVERAGE AVAILABLE FRAME COUNT         */
  short int      ccvenqct;   /* -              NO. OF USERS NON SWAPPABLE FOR       */
  short int      ccvcpuct;   /* -              NUMBER OF ONLINE CPUS                */
  short int      ccvrcpct;   /* -              Number online regular CPS   @WLMPSUP */
  short int      _filler3;   /* -              reserved                    @WLMPSUP */
  void          *cccmpatp;   /* Address of array of instruction                     */
  short int      ccvifact;   /* -              Number of online IFAs       @WLMPIFA */
  short int      ccvutila;   /* -             processor utilization       @WLMPSUP  */
  int            ccvrbawt;   /* -              Recent base CP+IFA wait time@PJK1692 */
  short int      ccvsupct;   /* -              Number of online SUPs       @WLMPSUP */
  short int      ccvceccp;   /* Total CPU count of the basic                        */
  int            cccawmti;   /* -              AWM time for IFAs           @WLMPSUP */
  int            ccvrbuwt;   /* -              Recent base SUP wait time   @WLMPSUP */
  int            ccvrbiwt;   /* -              Recent base IFA wait time   @PJK1692 */
  short int      ccvutili;   /* -              IFA utilization             @PJK1692 */
  short int      ccvutils;   /* -              SUP utilization             @WLMPSUP */
  unsigned char  cctflg1;    /* -                                                   */
  unsigned char  cctflg2;    /* -              PROCESSOR TYPE FLAGS          @H2C   */
  unsigned char  cctflg3Ä2Ü; /* -             RESERVED                      @H2A    */
  int            cccttsh;    /* Task time slice max to rotate @L5A                  */
  int            cccttsl;    /* Task time slice low           @D4A                  */
  int            cccwtsh;    /* Wait task time slice high     @D4A                  */
  int            cccwtsl;    /* Wait task time slice low      @D4A                  */
  int            cccbrt;     /* Base real time for reduced                          */
  int            ccvawmwt;   /* CCVAWMWT                  @LVCMDAC                  */
  char           cctcdfcn;   /* -            CHAP DOWN FUNCTION CODE   @G50IPSS     */
  char           cctcdtsg;   /* -            TIME SLICE GROUP NUMBER   @G50IPSS     */
  short int      cctcdtsc;   /* -              COUNT OF USERS IN TIME SLICE GROUP   */
  void          *cctcdptr;   /* -              NEXT LIST ADDRESS OR ZERO @G50IPSS   */
  char           cctcufcn;   /* -            CHAP UP FUNCTION CODE     @G50IPSS     */
  char           cctcutsg;   /* -            TIME SLICE GROUP NUMBER   @G50IPSS     */
  short int      cctcutsc;   /* -              COUNT OF USERS IN TIME SLICE GROUP   */
  void          *cctcuptr;   /* -              NEXT LIST ADDRESS OR ZERO @G50IPSS   */
  int            cccapdiv;   /* -              DP COMPUTATION DIVISOR      @ZMD0131 */
  int            cccsigur;   /* -  (OPT PARM)  SIGNIFICANT MTW IN MICROS   @ZMD0131 */
  int            cccaplte;   /* -              Time of last entry to IRARMAP1 in    */
  int            cccrscpa;   /* -              CPU ADJUSTMENT FACTOR FOR THE        */
  int            cccpropf;   /* -              CPU TIMING PROPORTION FACTOR THAT    */
  int            cccsxslf;   /* -              THE EXCESSIVE SPIN LENGTH FACTOR     */
  int            cccfxslf;   /* -              THE EXCESSIVE SPIN LENGTH FACTOR     */
  int            cccrsv18;   /* -              RESERVED                       @01C  */
  int            cccrsv20;   /* -              RESERVED                       @01C  */
  short int      ccvwscl1;   /* -              THE NUMBER OF TIMES THE CL1 ROUTINE  */
  short int      cccwscnt;   /* -              WORKLOAD SKEWING THRESHOLD           */
  int            ccvwsbtd;   /* -              BASE TIME OF DAY FOR WORKLOAD        */
  int            ccvwsrrm;   /* -              RATE OF RECURSIVE MODE DISPATCHES    */
  int            ccvwsbrm;   /* -              BASE COUNT OF RECURSIVE MODE         */
  int            cccwsrlo;   /* -             LOW THRESHOLD FOR THE RATE OF         */
  int            cccwsrhi;   /* -             HIGH THRESHOLD FOR THE RATE OF        */
  int            cccwstch;   /* -              CONSTANT AMOUNT TO RAISE OR          */
  struct ä
    int            _cccottsh; /* Task time high bound        @LVCMDAC */
    int            _cccottsl; /* Task time low bound         @LVCMDAC */
    ü cccend;
  int            cccowtsh;   /* Wait time high bound        @LVCMDAC                */
  int            cccowtsl;   /* Wait time low bound         @LVCMDAC                */
  int            cccoitth;   /* Initial task time slice high@LVCMDAC                */
  short int      cccottsc;   /* IFA task time slice high    @LVCMDAC                */
  short int      cccottsm;   /* IFA Task time slice max     @LVCMDAC                */
  int            ccvwsb;     /* Base short wait time slices @LVCMDAC                */
  int            ccvwsub;    /* Base unproductive short wait@LVCMDAC                */
  int            ccttrate;   /* Promote event rate. This is  @LBLOCK                */
  short int      cctinthd;   /* Swapped-in address space starvation                 */
  short int      cccrsv09;   /* -              reserved                     @LBLOCK */
  short int      ccttrpct;   /* 1/1000s of a CP for promote slices.                 */
  short int      ccteffcp;   /* -              LPAR's effective CP.         @LBLOCK */
  int            cctrc100;   /* -              Counts CP Utilization = 100% @LBLOCK */
  int            cctrcdsp;   /* -              Counts calls to dispatcher   @LBLOCK */
  int            cctrcuse;   /* -              Counts used promotes         @LBLOCK */
  int            cctrcwtr;   /* -              Counts waiters for promote   @LBLOCK */
  int            ccttrtod;   /* -              Last promote event timestamp in      */
  int            ccttruse;   /* -              Number of dispatchable units that    */
  int            ccttrdpc;   /* -              same as CCTRCUSE but is not reset,   */
  int            ccttrblc;   /* -              same as CCTRCWTR but is not reset,   */
  int            ccttrcpm;   /* counts how often blocked workload                   */
  int            cccttsmh;   /* Max Task time slice in HD mode @OA26272A            */
  int            cccrsv22;   /* -              reserved                             */
  int            cccrsv23;   /* -              reserved                             */
  int            cccrsv24;   /* -              reserved                             */
  int            cccrsv25;   /* -              reserved                             */
  int            cccrsv26;   /* -              reserved                             */
  int            cccrsv27;   /* -              reserved                             */
  int            cccrsv28;   /* -              reserved                             */
  int            cccrsv29;   /* -              reserved                             */
  int            cccrsv30;   /* -              reserved                             */
  int            cccrsv31;   /* -              reserved                             */
  int            cccrsv32;   /* -              reserved                             */
  int            cccrsv33;   /* -              reserved                             */
  int            cccrsv34;   /* -              reserved                             */
  int            cccrsv35;   /* -              reserved                             */
  int            cccrsv36;   /* -              reserved                             */
  double         ccvend;     /* -                END OF CCT                         */
  ü;

#define ccvwtdb  ccvejst._ccvwtdb
#define cccottsh cccend._cccottsh
#define cccottsl cccend._cccottsl

/* Values for field "cctflg1" */
#define cctawma  0x40  /* -              ALTERNATE WAIT MGMT TIMING ALLOWED */
#define ccttsup  0x20  /* -              TS GROUP CHAPPED UP       @G50IPSS */

/* Values for field "cctflg2" */
#define cctrelcp 0x80  /* -              THIS PROCESSOR MODEL HAS RELATED   */
#define cctnofcp 0x40  /* -              THIS RELATED TYPE OF PROCESSOR     */
#define cctfpmt  0x20  /* -              Full preemption if bit is on @D4A  */
#define cctsmpok 0x10  /* -              When on indicates that a sample    */
#define cctnejst 0x08  /* -              When on indicates that the         */
#define cctcaltr 0x04  /* -              When on indicates promote event    */
#define cctuchck 0x02  /* -              Utilization check was run the last */

/* Values for field "ccvend" */
#define cctlen   0x190 /* -        LENGTH OF CCT                            */

#pragma pack(reset)
