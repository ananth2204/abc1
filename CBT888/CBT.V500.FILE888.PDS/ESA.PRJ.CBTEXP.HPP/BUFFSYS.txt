#ifndef _BUFFSYS
#define _BUFFSYS

#include "mvsbase.hpp"


class rFILE;
class FILE;
class STRING;
class mERROR;
class RBUFF;
class LBUFF;

#define MAXLBUFF 32760
#define MAXBLOCKSIZE 32760
#define MAXRECLEN   32756

#ifndef longEOF
#define longEOF "ÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxff"
#endif

//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

class BUFF
ä
protected:
char * buff ;         // buff pointer
int    initlength;    // init length
int    length;        // length
int    offset;        // actual offset
int    remainder;     // remainder
long   fileposition;  // file position
public:
enum BUFF_STATUS ä empty , full, underflow , overflow ,  ok ü;
BUFF();
BUFF(int);
BUFF(const BUFF&);
ß BUFF();

BUFF& operator=(const BUFF &);
operator char *()äreturn buff;ü

int writeIn(const char *,int );
int readOut(char * , int l);
int getLength()äreturn length;ü
int getOffset()äreturn offset;ü
int getRemainder()äreturn remainder;ü
int getRestSize()äreturn initlength-offset;ü
int getFilePosition()äreturn fileposition+offset;ü
BUFF_STATUS  getStatus()äreturn status;ü

int  isEmpty()äreturn status == empty;ü
int  isFull()äreturn status == full;ü
int  isUnderflow()äreturn status == underflow;ü
int  isOverflow()äreturn status == overflow;ü
int  isOk()äreturn status == ok;ü
void setOverflow() ä status = overflow; ü

int store(char);
int store(short);
int store(const char *,int);
int store(short,char,char);

char * retrieve(int);
short  retrieveShort();
char   retrieveChar();

void reset();
void clear();

virtual int In(char = 0)=0;
virtual int Out(char = 0)=0;
protected:
BUFF_STATUS  status;       //
ü;

//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

class LBUFF: public BUFF,
    public mERROR
ä

private:
FILE * file;
RBUFF * rb;
int  status;
char spanflag;
public:
LBUFF(FILE *,int );
ßLBUFF();

void setRBUFF();

int In(char = 0);
int Out(char = 0);
int BOut(int);
ü;

//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

class RBUFF: public BUFF,
    public mERROR

ä
private:
FILE  *   file;
rFILE *   rfile;
LBUFF *  lb;
STRING   recordkey;
int      recordnumber;
int      keylength;
public:
RBUFF(FILE *,int);
ßRBUFF();
void setLBUFF();
int In(char = 0);
int Out(char = 0);
int delMember();

int findNext();

private:
void setkey(const STRING & , int );
void setkey(int );
int  isTheNext();
ü;

#endif
