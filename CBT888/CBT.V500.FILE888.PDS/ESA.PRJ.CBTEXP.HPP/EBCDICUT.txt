/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/isislib/ebcdicut.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   utility functions to convert from and to ebcdic charset
*******************************************************************************/

#ifndef __EBCDICUT_HPP__
#define __EBCDICUT_HPP__

extern const unsigned char isis_etoaÄ256Ü;
extern const unsigned char isis_atoeÄ256Ü;
extern const unsigned char isis_etoa_ISO8859_1Ä256Ü;
extern const unsigned char isis_atoe_ISO8859_1Ä256Ü;


/**
 * functions for ebcdic/ascii conversion
 * codesetConversion: helper function which does the conversion
 * local2ascii, ascii2local: generally called functions
 *   on ebcdic platforms they convert characters between ebcdic and ascii
 *   on ascii platforms they don't change the characters
 * local2latin1, latin12local: generally called functions
 *   on ebcdic platforms they convert characters between ebcdic (IBM-273) and ascii (ISO8859-1)
 *   on ascii platforms they don't change the characters
 * local2ebcdic, ebcdic2local: generally called functions
 *   on ascii platforms they convert characters between ebcdic and ascii
 *   on ebcdic platforms they don't change the characters
 * latin12ebcdic, ebcdic2latin1: generally called functions
 *   on ascii platforms they convert characters between ebcdic (IBM-273) and ascii (ISO8859-1)
 *   on ebcdic platforms they don't change the characters
 * ascii2ebcdic, ebcdic2ascii: converts on ascii as well as on ebcdic platforms
 */


inline char* codesetConversion(char* dest, const char* src,const unsigned char * convtab)
ä
    char *d = dest;
    for(;*src;++src,++d)
    ä
        *d=convtabÄ(unsigned char)*srcÜ;
    ü
    *d=0;
    return dest;
ü

inline char* codesetConversion(char* dest, const char* src,const unsigned char * convtab,int len)
ä

    for(int i=0;i<len;++i)
    ä
        destÄiÜ=convtabÄ(unsigned char) srcÄiÜÜ;
    ü
    return dest;
ü

inline char* local2ascii(char* dest, const char* src)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_etoa);
#else
    return strcpy(dest,src);
#endif
ü

inline char* local2ascii(char* dest, const char* src,int len)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_etoa,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* local2ascii(char* str)
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_etoa);
#else
    return str;
#endif
ü

#if ' ' == 0x40
inline char* local2ascii(char* str,int len)
#else
inline char* local2ascii(char* str,int)
#endif
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_etoa,len);
#else
    return str;
#endif
ü

inline unsigned char local2ascii(unsigned char c)
ä
#if ' ' == 0x40
    return isis_etoaÄcÜ;
#else
    return c;
#endif
ü
inline char local2ascii(char c)
ä
    return local2ascii((unsigned char)c);
ü


// 16-bit wide character conversion
// converts  the last byte of c from local(native) to ascii codepage
// (returns c unchanged on ascii platforms)
inline u_int16 local2ascii(u_int16 c)
ä
#if ' ' == 0x40
    u_int16 ret=c;
    char* char_ret=(char*)&ret;
    // convert last byte of return to local(native) codepage
    char_retÄsizeof(ret)-1Ü=local2ascii(char_retÄsizeof(ret)-1Ü);
    return ret;
#else
    return c;
#endif
ü



inline char* ascii2local(char* dest, const char* src)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_atoe);
#else
    return strcpy(dest,src);
#endif
ü

inline char* ascii2local(char* dest, const char* src,int len)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_atoe,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* ascii2local(char* str)
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_atoe);
#else
    return str;
#endif
ü



#if ' ' == 0x40
inline char* ascii2local(char* str,int len)
#else
inline char* ascii2local(char* str,int)
#endif
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_atoe,len);
#else
    return str;
#endif
ü

inline unsigned char ascii2local(unsigned char c)
ä
#if ' ' == 0x40
    return isis_atoeÄcÜ;
#else
    return c;
#endif
ü
inline char ascii2local(char c)
ä
    return ascii2local((unsigned char)c);
ü

// 16-bit wide character conversion
// converts  the last byte of c from ascii to local(native) codepage
// (returns c unchanged on ascii platforms)
inline u_int16 ascii2local(u_int16 c)
ä
#if ' ' == 0x40
    u_int16 ret=c;
    char* char_ret=(char*)&ret;
    // convert last byte of return to local(native) codepage
    char_retÄsizeof(ret)-1Ü=ascii2local(char_retÄsizeof(ret)-1Ü);
    return ret;
#else
    return c;
#endif
ü

inline char* local2ebcdic(char* dest, const char* src)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_atoe);
#else
    return strcpy(dest,src);
#endif
ü

inline char* local2ebcdic(char* dest, const char* src,int len)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_atoe,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* local2ebcdic(char* str)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_atoe);
#else
    return str;
#endif
ü

inline char* local2ebcdic(char* str,int len)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_atoe,len);
#else
    return str;
#endif
ü

inline char local2ebcdic(char c)
ä
#if ' ' == 0x20
    return isis_atoeÄ(unsigned char)cÜ;
#else
    return c;
#endif
ü


inline char* ebcdic2local(char* dest, const char* src)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_etoa);
#else
    return strcpy(dest,src);
#endif
ü

inline char* ebcdic2local(char* dest, const char* src,int len)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_etoa,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* ebcdic2local(char* str)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_etoa);
#else
    return str;
#endif
ü

inline char* ebcdic2local(char* str,int len)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_etoa,len);
#else
    return str;
#endif
ü

inline char ebcdic2local(char c)
ä
#if ' ' == 0x20
    return isis_etoaÄ(unsigned char) cÜ;
#else
    return c;
#endif
ü



inline char* ebcdic2ascii(char* str)
ä
    return codesetConversion(str,str,isis_etoa);
ü

inline char* ascii2ebcdic(char* str)
ä
    return codesetConversion(str,str,isis_atoe);
ü

inline char ebcdic2ascii(char c)
ä
    return (char) isis_etoaÄ(unsigned char) cÜ;
ü

inline unsigned char ebcdic2ascii(unsigned char c)
ä
    return isis_etoaÄcÜ;
ü

inline char ascii2ebcdic(char c)
ä
    return (char)isis_atoeÄ(unsigned char) cÜ;
ü

inline unsigned char ascii2ebcdic(unsigned char c)
ä
    return isis_atoeÄcÜ;
ü

/* new functions */

inline char* local2latin1(char* dest, const char* src)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_etoa_ISO8859_1);
#else
    return strcpy(dest,src);
#endif
ü

inline char* local2latin1(char* dest, const char* src,int len)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_etoa_ISO8859_1,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* local2latin1(char* str)
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_etoa_ISO8859_1);
#else
    return str;
#endif
ü

#if ' ' == 0x40
inline char* local2latin1(char* str,int len)
#else
inline char* local2latin1(char* str,int)
#endif
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_etoa_ISO8859_1,len);
#else
    return str;
#endif
ü

inline unsigned char local2latin1(unsigned char c)
ä
#if ' ' == 0x40
    return isis_etoa_ISO8859_1ÄcÜ;
#else
    return c;
#endif
ü
inline char local2latin1(char c)
ä
    return local2latin1((unsigned char)c);
ü


// 16-bit wide character conversion
// converts  the last byte of c from local(native) to ascii codepage
// (returns c unchanged on ascii platforms)
inline u_int16 local2latin1(u_int16 c)
ä
#if ' ' == 0x40
    u_int16 ret=c;
    char* char_ret=(char*)&ret;
    // convert last byte of return to local(native) codepage
    char_retÄsizeof(ret)-1Ü=local2latin1(char_retÄsizeof(ret)-1Ü);
    return ret;
#else
    return c;
#endif
ü



inline char* latin12local(char* dest, const char* src)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_atoe_ISO8859_1);
#else
    return strcpy(dest,src);
#endif
ü

inline char* latin12local(char* dest, const char* src,int len)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_atoe_ISO8859_1,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* latin12local(char* str)
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_atoe_ISO8859_1);
#else
    return str;
#endif
ü



#if ' ' == 0x40
inline char* latin12local(char* str,int len)
#else
inline char* latin12local(char* str,int)
#endif
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_atoe_ISO8859_1,len);
#else
    return str;
#endif
ü

inline unsigned char latin12local(unsigned char c)
ä
#if ' ' == 0x40
    return isis_atoe_ISO8859_1ÄcÜ;
#else
    return c;
#endif
ü
inline char latin12local(char c)
ä
    return latin12local((unsigned char)c);
ü

// 16-bit wide character conversion
// converts  the last byte of c from ascii to local(native) codepage
// (returns c unchanged on ascii platforms)
inline u_int16 latin12local(u_int16 c)
ä
#if ' ' == 0x40
    u_int16 ret=c;
    char* char_ret=(char*)&ret;
    // convert last byte of return to local(native) codepage
    char_retÄsizeof(ret)-1Ü=latin12local(char_retÄsizeof(ret)-1Ü);
    return ret;
#else
    return c;
#endif
ü

inline char* latin12ebcdic(char* dest, const char* src)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_atoe_ISO8859_1);
#else
    return strcpy(dest,src);
#endif
ü

inline char* latin12ebcdic(char* dest, const char* src,int len)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_atoe_ISO8859_1,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* latin12ebcdic(char* str)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_atoe_ISO8859_1);
#else
    return str;
#endif
ü

inline char* latin12ebcdic(char* str,int len)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_atoe_ISO8859_1,len);
#else
    return str;
#endif
ü

inline char latin12ebcdic(char c)
ä
#if ' ' == 0x20
    return isis_atoe_ISO8859_1Ä(unsigned char)cÜ;
#else
    return c;
#endif
ü


inline char* ebcdic2latin1(char* dest, const char* src)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_etoa_ISO8859_1);
#else
    return strcpy(dest,src);
#endif
ü

inline char* ebcdic2latin1(char* dest, const char* src,int len)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_etoa_ISO8859_1,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* ebcdic2latin1(char* str)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_etoa_ISO8859_1);
#else
    return str;
#endif
ü

inline char* ebcdic2latin1(char* str,int len)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_etoa_ISO8859_1,len);
#else
    return str;
#endif
ü

inline char ebcdic2latin1(char c)
ä
#if ' ' == 0x20
    return isis_etoa_ISO8859_1Ä(unsigned char) cÜ;
#else
    return c;
#endif
ü

/* new functions end */

// for backwards compatibility
inline unsigned char etoa(unsigned char c)
ä
    return isis_etoaÄ cÜ;
ü

inline unsigned char atoe(unsigned char c)
ä
    return isis_atoeÄ cÜ;
ü

// Ascii representation of a string
// useful if you need the ascii representation of a text independently from the platform's codeset
// there is an overhead also on ascii platforms -> avoid frequent constructor calls, use macro ASCIITEMP instead if possible
// usage samples:
// strcmp(fontName,AsciiString("Arial"));
// const AsciiString fontlistÄÜ=ä"X1",X2,"X3"ü;
class AsciiString
ä
protected:
    char * str;
public:
    AsciiString(const char* s)
    ä
        if(s)
        ä
            str=new charÄstrlen(s)+1Ü;
            local2ascii(str,s);
        ü
        else
        ä
            str=NULL;
        ü
    ü

    ßAsciiString()
    ä
        deleteÄÜ str;
    ü

    operator const char* () const
    ä
        return str;
    ü
ü;

// representation of a string in local(native) codepage
// useful if you need the native-codepage-representation of an ascii-text
// analoguous to AsciiString
class LocalString
ä
protected:
    char * str;
public:
    LocalString(const char* s)
    ä
        if(s)
        ä
            str=new charÄstrlen(s)+1Ü;
            ascii2local(str,s);
        ü
        else
        ä
            str=NULL;
        ü
    ü

    ßLocalString()
    ä
        deleteÄÜ str;
    ü

    operator const char* () const
    ä
        return str;
    ü
ü;

// macro ASCIITEMP to get a temporary object with ascii representation of x
// macro LOCALTEMP to get a temporary object with representation of x in local (native) codepage
// on ascii platforms these macros do nothing (expand to expression x)
#if ' ' == 0x20
#define ASCIITEMP(x) (x)
#define LOCALTEMP(x) (x)
#else
#define ASCIITEMP(x) (const char*)AsciiString(x)
#define LOCALTEMP(x) (const char*)LocalString(x)
#endif

#endif
