/*
 * THIS FILE CONTAINS SAMPLE CODE.  IBM PROVIDES THIS CODE ON AN
 * 'AS IS' BASIS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 */

#ifndef _SECURES_H
#define _SECURES_H

#include <sys/socket.h>
#include <netinet/in.h>

#if defined(__cplusplus)
extern "C" {
#endif

/*
 * The following defines are extended command codes for secure_ioctl().
 * there is a potential problem here if ioctl() ever starts using
 * these values, but for now these seem pretty safe.
 *
 * As input to the S_INIT command, secure_ioctl() expects a
 * pointer to a gsk_init_data structure.
 *
 * As input to the S_SOCINIT command, secure_ioctl() expects a
 * pointer to a gsk_soc_init_data structure.
 */
#define S_INIT -200
#define S_SOCINIT -201

int secure_socket( Connection *handle, int family, int type, int data );

int secure_bind( Connection *handle, struct sockaddr *sin, int len );

int secure_listen( Connection *handle, int maxQueued );

Connection *secure_accept( Connection *handle, struct sockaddr *sin, int *len );

int secure_connect( Connection *handle, struct sockaddr *sin, int len );

int secure_ioctl( Connection *handle, int command, void *data );

int secure_send( Connection *handle, void *data, int len, int flag );

int secure_recv( Connection *handle, void *data, int len, int flag );

int secure_close( Connection *handle );

#if defined(__cplusplus)
}
#endif

#endif /* _SECURES_H */

