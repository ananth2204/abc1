#pragma pack(packed)

struct enf70 ä
  unsigned char  enf70_idÄ6Ü;         /* Eye catcher 'ENF70 '              */
  unsigned char  enf70_version;       /* Version of mapping                */
  unsigned char  _filler1;            /* Reserved                          */
  int            enf70_length;        /* Total length of ENF70 data        */
  short int      enf70_fixed_length;  /* Length of fixed section           */
  unsigned char  enf70_qualifier;     /* Qualifier code - defined below    */
  unsigned char  _filler2Ä3Ü;         /* Reserved                          */
  unsigned char  enf70_jes_nameÄ8Ü;   /* JES2 Member Name / JES3 MAIN name */
  unsigned char  enf70_jesplex_idÄ8Ü; /* Unique JESPLEX identifier         */
  unsigned char  enf70_jobnameÄ8Ü;    /* Job name                          */
  unsigned char  enf70_jobidÄ8Ü;      /* Job ID                            */
  unsigned char  enf70_org_jobidÄ8Ü;  /* Original Job ID                   */
  unsigned char  enf70_org_nodeÄ8Ü;   /* Original Node                     */
  unsigned char  enf70_jobclassÄ8Ü;   /* Job Class                         */
  unsigned char  enf70_srvclassÄ8Ü;   /* Service class                     */
  unsigned char  _filler3Ä2Ü;
  int            enf70_rdr_date;      /* Reader on date                    */
  int            enf70_rdr_time;      /* Reader on time                    */
  struct ä
    unsigned char  _enf70_comp;    /* Job completion indicator */
    unsigned char  _enf70_codeÄ3Ü; /* Completion code (if      */
    ü enf70_maxcc;
  unsigned char  enf70_queue;         /* Current phase job is queued for   */
  unsigned char  _filler4Ä5Ü;         /* Reserved                          */
  unsigned char  enf70_jesdataÄ16Ü;   /* JES-specific data for job         */
  unsigned char  _filler5Ä2Ü;
  ü;

#define enf70_comp enf70_maxcc._enf70_comp
#define enf70_code enf70_maxcc._enf70_code

/* Values for field "enf70_version" */
#define enf70_vone       1    /* Version 1                        */
#define enf70_cver       0x01 /* Current version                  */

/* Values for field "enf70_qualifier" */
#define enf70_select     1    /* Job was selected                 */
#define enf70_deselect   2    /* Job was processed                */
#define enf70_change     3    /* Job queued to new phase          */
#define enf70_purge      4    /* Job was purged                   */

/* Values for field "enf70_comp" */
#define enf70_cab        0x80 /* ABEND CODE                       */
#define enf70_ccc        0x40 /* Completion code                  */
#define enf70_cunk       0    /* No completion info               */
#define enf70_cnrm       1    /* Job ended normally               */
#define enf70_cecc       2    /* Job ended by cc                  */
#define enf70_cjcl       3    /* Job had a JCL error              */
#define enf70_ccan       4    /* Job was canceled                 */
#define enf70_cabn       5    /* Job ABENDed                      */
#define enf70_ccab       6    /* Converter ABENDed                */
#define enf70_csec       7    /* Security error                   */
#define enf70_ceom       8    /* Job ABENDed in end of            */

/* Values for field "enf70_queue" */
#define enf70_q_none     0    /* No previous queue (job create)   */
#define enf70_q_convert  2    /* Conversion                       */
#define enf70_q_pscbat   3    /* Postscan (batch)                 */
#define enf70_q_pscdsl   4    /* Postscan (demand select)         */
#define enf70_q_fetch    5    /* Volume fetch                     */
#define enf70_q_volwt    6    /* Start Setup                      */
#define enf70_q_syssel   7    /* MDS system select processing     */
#define enf70_q_alloc    8    /* resource allocation              */
#define enf70_q_voluav   9    /* unavailable VOL(s)               */
#define enf70_q_verify   10   /* volume mounts                    */
#define enf70_q_sysver   11   /* MDS system verify processing     */
#define enf70_q_error    12   /* Demand Select                    */
#define enf70_q_select   13   /* Execution                        */
#define enf70_q_onmain   14   /* Execution                        */
#define enf70_q_brkdwn   17   /* Breakdown                        */
#define enf70_q_restrt   18   /* MDS restart proc                 */
#define enf70_q_done     19   /* Main and MDS proc. complete      */
#define enf70_q_output   20   /* Output service                   */
#define enf70_q_outque   21   /* Output service WTR               */
#define enf70_q_oswait   22   /* Awaiting rsvd services           */
#define enf70_q_cmplt    23   /* Output service complete          */
#define enf70_q_demsel   24   /* Demand Select                    */
#define enf70_q_efwait   25   /* Ending function rq waiting       */
#define enf70_q_efbad    26   /* Ending function rq not Processed */
#define enf70_q_input    128  /* Input queue (pre-execution)      */
#define enf70_q_receiver 136  /* Input queue (post-execution)     */
#define enf70_q_spin     132  /* Spin queue                       */
#define enf70_q_purge    134  /* Purge queue                      */
#define enf70_q_xmit     137  /* NJE transmission queue           */

#pragma pack(reset)
