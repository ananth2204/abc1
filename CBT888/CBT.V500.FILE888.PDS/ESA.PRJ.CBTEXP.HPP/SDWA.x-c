#pragma pack(packed)

struct sdwa ä
  void          *sdwaparm;    /* -     PARAMETER LIST ADDRESS IF (E)STAE MACRO    */
  struct ä
    struct ä
      unsigned char  _sdwacmpf;    /* -     FLAG BITS IN COMPLETION CODE.            */
      unsigned char  _sdwacmpcÄ3Ü; /* -   SYSTEM COMPLETION CODE (FIRST 12 BITS) AND */
      ü sdwaabcc;
    ü sdwafiob;
  struct ä
    unsigned char  _sdwacmka;      /* -     CHANNEL INTERRUPT MASKS.                  */
    unsigned char  _sdwamwpa;      /* -     PSW KEY AND 'M-W-P'.                      */
    unsigned char  _sdwaintaÄ2Ü;   /* -   INTERRUPT CODE (LAST 2 BYTES OF INTERRUPT   */
    unsigned char  _sdwapmka;      /* -     INSTRUCTION LENGTH CODE, CONDITION CODE,  */
    int            _sdwanxta : 24; /* -   ADDRESS OF NEXT INSTRUCTION TO BE EXECUTED. */
    ü sdwactl1;
  struct ä
    unsigned char  _sdwacmkp;      /* -     CHANNEL INTERRUPT MASKS.                  */
    unsigned char  _sdwamwpp;      /* -     PSW KEY AND 'M-W-P'.                      */
    unsigned char  _sdwaintpÄ2Ü;   /* -   INTERRUPT CODE (LAST 2 BYTES OF INTERRUPT   */
    unsigned char  _sdwapmkp;      /* -     INSTRUCTION LENGTH CODE, CONDITION CODE,  */
    int            _sdwanxtp : 24; /* -   ADDRESS OF NEXT INSTRUCTION TO BE EXECUTED. */
    ü sdwactl2;
  struct ä
    int            _sdwagr00; /* -     GPR 0.  */
    int            _sdwagr01; /* -     GPR 1.  */
    int            _sdwagr02; /* -     GPR 2.  */
    int            _sdwagr03; /* -     GPR 3.  */
    int            _sdwagr04; /* -     GPR 4.  */
    int            _sdwagr05; /* -     GPR 5.  */
    int            _sdwagr06; /* -     GPR 6.  */
    int            _sdwagr07; /* -     GPR 7.  */
    int            _sdwagr08; /* -     GPR 8.  */
    int            _sdwagr09; /* -     GPR 9.  */
    int            _sdwagr10; /* -     GPR 10. */
    int            _sdwagr11; /* -     GPR 11. */
    int            _sdwagr12; /* -     GPR 12. */
    int            _sdwagr13; /* -     GPR 13. */
    int            _sdwagr14; /* -     GPR 14. */
    int            _sdwagr15; /* -     GPR 15. */
    ü sdwagrsv;
  struct ä
    void          *_sdwarbad;    /* -     RB ADDRESS OF ABENDING PROGRAM (IF SUPERVISOR */
    unsigned char  _filler1Ä4Ü;  /* -   CONTAINS ZEROS IF SUPERVISOR MODE PROGRAM       */
    ü sdwaname;
  void          *sdwaepa;     /* -     ENTRY POINT ADDRESS OF ABENDING PROGRAM.   */
  void          *sdwaiobr;    /* -     POINTER TO SDWAFIOB FIELD,                 */
  struct ä
    unsigned char  _sdwaemk1; /* INTERRUPT INFORMATION MASKS     */
    unsigned char  _sdwamwp1; /* PSW KEY AND 'M-W-P'             */
    unsigned char  _sdwaint1; /* CONDITION CODE AND PROGRAM MASK */
    unsigned char  _filler2;  /* RESERVED                        */
    struct ä
      unsigned char  _sdwaamf1;    /* ADDRESSING MODE FLAG                    @G860P1S */
      unsigned char  _sdwaadd1Ä3Ü; /* INSTRUCTION ADDRESS                              */
      ü sdwanxt1;
    ü sdwaec1;
  union ä
    struct ä
      unsigned char  _filler3;  /* RESERVED                                */
      unsigned char  _sdwailc1; /* INSTRUCTION LENGTH CODE FOR PSW DEFINED */
      struct ä
        unsigned char  _filler4;  /* RESERVED FOR IMPRECISE INTERRUPTS */
        unsigned char  _sdwaicd1; /* 8 BIT INTERRUPT CODE              */
        ü sdwainc1;
      void          *_sdwatran; /* VIRTUAL ADDRESS CAUSING TRANSLATION     */
      ü sdwaaec1;
    struct ä
      unsigned char  _filler5Ä7Ü;
      unsigned char  _sdwadxc;     /* Data exception code when program interrupt */
      ü _sdwa_struct1;
    ü _sdwa_union1;
  struct ä
    unsigned char  _sdwaemk2; /* INTERRUPT INFORMATION MASKS     */
    unsigned char  _sdwamwp2; /* PSW KEY AND 'M-W-P'             */
    unsigned char  _sdwaint2; /* CONDITION CODE AND PROGRAM MASK */
    unsigned char  _filler6;  /* RESERVED                        */
    struct ä
      unsigned char  _sdwaamf2;    /* ADDRESSING MODE FLAG                    @G860P1S */
      unsigned char  _sdwaadd2Ä3Ü; /* INSTRUCTION ADDRESS                              */
      ü sdwanxt2;
    ü sdwaec2;
  struct ä
    unsigned char  _filler7;  /* RESERVED                                */
    unsigned char  _sdwailc2; /* INSTRUCTION LENGTH CODE FOR PSW DEFINED */
    struct ä
      unsigned char  _filler8;  /* RESERVED FOR IMPRECISE INTERRUPTS */
      unsigned char  _sdwaicd2; /* 8 BIT INTERRUPT CODE              */
      ü sdwainc2;
    void          *_sdwatrn2; /* VIRTUAL ADDRESS CAUSING TRANSLATION     */
    ü sdwaaec2;
  struct ä
    int            _sdwasr00; /* GPR 0.  */
    int            _sdwasr01; /* GPR 1.  */
    int            _sdwasr02; /* GPR 2.  */
    int            _sdwasr03; /* GPR 3.  */
    int            _sdwasr04; /* GPR 4.  */
    int            _sdwasr05; /* GPR 5.  */
    int            _sdwasr06; /* GPR 6.  */
    int            _sdwasr07; /* GPR 7.  */
    int            _sdwasr08; /* GPR 8.  */
    int            _sdwasr09; /* GPR 9.  */
    int            _sdwasr10; /* GPR 10. */
    int            _sdwasr11; /* GPR 11. */
    int            _sdwasr12; /* GPR 12. */
    int            _sdwasr13; /* GPR 13. */
    int            _sdwasr14; /* GPR 14. */
    int            _sdwasr15; /* GPR 15. */
    ü sdwasrsv;
  struct ä
    unsigned char  _sdwaspid;    /* SUBPOOL ID OF STORAGE CONTAINING THIS SDWA */
    unsigned char  _sdwalnthÄ3Ü; /* LENGTH OF THIS SDWA IN BYTES               */
    ü sdwaidnt;
  struct ä
    struct ä
      void          *_sdwasckb; /* BEGINNING VIRTUAL ADDRESS OF STORAGE CHECK */
      void          *_sdwascke; /* ENDING VIRTUAL ADDRESS OF STORAGE CHECK    */
      ü sdwastck;
    struct ä
      unsigned char  _sdwamchs; /* MCH FLAG BYTE                                    */
      unsigned char  _sdwamchd; /* INPUT INFORMATION TO RECOVERY ROUTINE CONCERNING */
      ü sdwamchi;
    unsigned char  _sdwacpidÄ2Ü; /* ID OF OF FAILING CPU CAUSING ACR                 */
    unsigned char  _sdwarsr1;    /* ADDITIONAL STORAGE FRAME ERROR INDICATORS        */
    unsigned char  _sdwarsr2;    /* ADDITIONAL STORAGE ERROR INDICATORS.             */
    unsigned char  _sdwamcho;    /* OTHER MACHINE CHECK FLAGS                   @04A */
    unsigned char  _filler9;     /* RESERVED                                    @04C */
    void          *_sdwarfsa;    /* REAL STORAGE FAILING ADDRESS  ( VALID ONLY IF    */
    unsigned char  _sdwatimeÄ8Ü; /* TIME STAMP OF ASSOCIATED MACHINE CHECK RECORD    */
    ü sdwamch;
  struct ä
    unsigned char  _sdwaerra; /* ERROR TYPE CAUSING ENTRY TO RECOVERY EXIT */
    unsigned char  _sdwaerrb; /* ADDITIONAL ERROR ENTRY INFORMATION        */
    unsigned char  _sdwaerrc; /* ADDITIONAL ERROR ENTRY INFORMATION        */
    unsigned char  _sdwaerrd; /* ADDITIONAL ERROR ENTRY INFORMATION        */
    ü sdwaflgs;
  unsigned char  sdwafmidÄ2Ü; /* ASID OF MEMORY IN WHICH ERROR OCCURRED.          */
  unsigned char  sdwaiofs;    /* THIS IS THE CURRENT I/O STATUS (THE I/O          */
  unsigned char  sdwacpui;    /* ERRORID LOGICAL CPUID                  @G17EP5W  */
  struct ä
    unsigned char  _sdwartyf;       /* ADDRESSING MODE INDICATOR BYTE          @G860P1S */
    int            _filler10 : 24;  /* LOW THREE ORDER BYTES OF RETRY ADDRESS  @G860P1S */
    ü sdwartya;
  void          *sdwareca;    /* ADDRESS OF VARIABLE RECORDING AREA WITHIN SDWA   */
  struct ä
    unsigned char  _filler11Ä2Ü;  /* RESERVED                                */
    short int      _sdwalcpu;     /* LOGICAL ADDRESS OF CPU HOLDING RESOURCE */
    ü sdwacpua;
  struct ä
    unsigned char  _sdwarcde; /* RETURN CODE FROM RECOVERY ROUTINE TO INDICATE   */
    unsigned char  _sdwaacf2; /* FLAGS TO INDICATE ADDITIONAL PROCESSING         */
    unsigned char  _sdwaacf3; /* FLAGS INDICATING SOME GLOBAL LOCKS TO BE FREED. */
    unsigned char  _sdwaacf4; /* ADDITIONAL LOCKS TO BE FREED, OR ADDITIONAL     */
    ü sdwaparq;
  struct ä
    struct ä
      void          *_sdwalrsd;  /* LOCKWORD FOR THE RSM DATA SPACE LOCK        @L6C */
      void          *_sdwaiulw;  /* LOCKWORD FOR THE IOSUCB LOCK                     */
      void          *_filler12;  /* LOCKWORD - RESERVED                         @P3C */
      void          *_sdwaiplw;  /* LOCKWORD FOR THE IOSYNCH LOCK                    */
      void          *_sdwaaplw;  /* LOCKWORD FOR THE ASM CLASS LOCK         Z40WPXH  */
      void          *_filler13;  /* RESERVED                                   @L9C  */
      void          *_filler14;  /* RESERVED                                   @L9C  */
      void          *_sdwatalw;  /* LOCKWORD - RESERVED                     Z40WPXH  */
      ü sdwalkws;
    ü sdwalkwa;
  unsigned char  sdwaasidÄ2Ü; /* ASID FOR LOGREC DEBUGGING (HOME ASID)   @ZA05516 */
  unsigned char  sdwaseq_Ä2Ü; /* ERRORID SEQUENCE NUMBER                 @G17EP5W */
  struct ä
    unsigned char  _sdwamodnÄ8Ü; /* THE LOAD MODULE NAME INVOLVED IN THE ERROR  */
    unsigned char  _sdwacsctÄ8Ü; /* THE CSECT (MICROFICHE) NAME INVOLVED IN THE */
    unsigned char  _sdwarexnÄ8Ü; /* THE RECOVERY ROUTINE (MICROFICHE) NAME      */
    ü sdwarecp;
  void          *sdwadpla;    /* POINTER TO DUMP PARAMETER LIST                   */
  struct ä
    struct ä
      unsigned char  _sdwadpid;  /* ID OF DUMP REQUESTED                           */
      unsigned char  _sdwadpfs;  /* DUMP FLAGS                                     */
      unsigned char  _sdwadpf2;  /* DUMP FLAGS 2                          @G382P2F */
      unsigned char  _filler15;  /* RESERVED                                       */
      ü sdwadump;
    struct ä
      struct ä
        unsigned char  _sdwasda0; /* SDATA OPTIONS FLAG ONE                 @G33SPHW */
        unsigned char  _sdwasda1; /* SDATA OPTIONS                         @G33SPHW  */
        ü sdwasdat;
      unsigned char  _sdwapdat;  /* PDATA OPTIONS */
      unsigned char  _filler16;  /* RESERVED      */
      ü sdwaddat;
    ü sdwasnpa;
  struct ä
    struct ä
      void          *_sdwafrm1; /* BEGINNING ADDRESS FOR STORAGE RANGE 1 */
      void          *_sdwato1;  /* ENDING ADDRESS FOR STORAGE RANGE 1    */
      void          *_sdwafrm2; /* BEGINNING ADDRESS FOR STORAGE RANGE2  */
      void          *_sdwato2;  /* ENDING ADDRESS FOR STORAGE RANGE 2    */
      void          *_sdwafrm3; /* BEGINNING ADDRESS FOR STORAGE RANGE 3 */
      void          *_sdwato3;  /* ENDING ADDRESS FOR STORAGE RANGE 3    */
      void          *_sdwafrm4; /* BEGINNING ADDRESS FOR STORAGE RANGE 4 */
      void          *_sdwato4;  /* ENDING ADDRESS FOR STORAGE RANGE 4    */
      ü sdwadpsl;
    void          *_filler17;  /* RESERVED */
    ü sdwadpsa;
  struct ä
    unsigned char  _sdwaverfÄ2Ü; /* FFFF INDICATES VID FIELD IS VALID       @G38FP2F */
    unsigned char  _sdwavidÄ2Ü;  /* VERSION INDICATOR, EXPLAINED AS FOLLOWS:    @L1A */
    ü sdwaveri;
  void          *sdwaxpad;    /* ADDR OF THE EXTENSION POINTERS (SDWAPTRS)   @L1C */
  struct ä
    struct ä
      struct ä
        unsigned char  _sdwakmÄ2Ü;   /* KEY MASK                                @G381P2F */
        unsigned char  _sdwascndÄ2Ü; /* ASID OF THE SECONDARY ADDR SPACE -SASID @G381P2F */
        ü sdwacr3;
      struct ä
        unsigned char  _sdwaaxÄ2Ü;   /* AUTHORIZATION INDEX                     @G381P2F */
        unsigned char  _sdwaprimÄ2Ü; /* ASID OF THE PRIMARY ADDR SPACE -PASID   @G381P2F */
        ü sdwacr4;
      ü sdwacrgs;
    void          *_sdwacmla; /* ADDRESS OF ASCB OF CML TO BE FREED      @G381P2F */
    ü sdwaxm;
  unsigned char  sdwacomuÄ8Ü; /* FRR TO ESTAE COMMUNICATION BUFFER       @G382P2F */
  void          *sdwacomp;    /* THIS WORD IS PROVIDED FOR COMMUNICATION OF       */
  unsigned char  sdwaertmÄ4Ü; /* ERRORID TIME STAMP                     @G17EP5W  */
  struct ä
    unsigned char  _sdwavralÄ2Ü;  /* LENGTH OF VARIABLE RECORDING AREA                */
    unsigned char  _sdwadpva;     /* BITS THAT DEFINE DATA IN VARIABLE AREA           */
    unsigned char  _sdwaural;     /* LENGTH OF USER SUPPLIED INFORMATION IN           */
    unsigned char  _sdwavraÄ255Ü; /* VARIABLE RECORDING AREA                 @G388P2F */
    unsigned char  _sdwaidÄ5Ü;    /* CONTAINS 'SDWA ' AS ID                  @G860P1F */
    ü sdwara;
  double         sdwaend;     /* END OF NON-EXTENDED SDWA                @G381P2F */
  ü;

#define sdwacmpf  sdwafiob.sdwaabcc._sdwacmpf
#define sdwacmpc  sdwafiob.sdwaabcc._sdwacmpc
#define sdwacmka  sdwactl1._sdwacmka
#define sdwamwpa  sdwactl1._sdwamwpa
#define sdwainta  sdwactl1._sdwainta
#define sdwapmka  sdwactl1._sdwapmka
#define sdwanxta  sdwactl1._sdwanxta
#define sdwacmkp  sdwactl2._sdwacmkp
#define sdwamwpp  sdwactl2._sdwamwpp
#define sdwaintp  sdwactl2._sdwaintp
#define sdwapmkp  sdwactl2._sdwapmkp
#define sdwanxtp  sdwactl2._sdwanxtp
#define sdwagr00  sdwagrsv._sdwagr00
#define sdwagr01  sdwagrsv._sdwagr01
#define sdwagr02  sdwagrsv._sdwagr02
#define sdwagr03  sdwagrsv._sdwagr03
#define sdwagr04  sdwagrsv._sdwagr04
#define sdwagr05  sdwagrsv._sdwagr05
#define sdwagr06  sdwagrsv._sdwagr06
#define sdwagr07  sdwagrsv._sdwagr07
#define sdwagr08  sdwagrsv._sdwagr08
#define sdwagr09  sdwagrsv._sdwagr09
#define sdwagr10  sdwagrsv._sdwagr10
#define sdwagr11  sdwagrsv._sdwagr11
#define sdwagr12  sdwagrsv._sdwagr12
#define sdwagr13  sdwagrsv._sdwagr13
#define sdwagr14  sdwagrsv._sdwagr14
#define sdwagr15  sdwagrsv._sdwagr15
#define sdwarbad  sdwaname._sdwarbad
#define sdwaemk1  sdwaec1._sdwaemk1
#define sdwamwp1  sdwaec1._sdwamwp1
#define sdwaint1  sdwaec1._sdwaint1
#define sdwaamf1  sdwaec1.sdwanxt1._sdwaamf1
#define sdwaadd1  sdwaec1.sdwanxt1._sdwaadd1
#define sdwailc1  _sdwa_union1.sdwaaec1._sdwailc1
#define sdwaicd1  _sdwa_union1.sdwaaec1.sdwainc1._sdwaicd1
#define sdwatran  _sdwa_union1.sdwaaec1._sdwatran
#define sdwadxc   _sdwa_union1._sdwa_struct1._sdwadxc
#define sdwaemk2  sdwaec2._sdwaemk2
#define sdwamwp2  sdwaec2._sdwamwp2
#define sdwaint2  sdwaec2._sdwaint2
#define sdwaamf2  sdwaec2.sdwanxt2._sdwaamf2
#define sdwaadd2  sdwaec2.sdwanxt2._sdwaadd2
#define sdwailc2  sdwaaec2._sdwailc2
#define sdwaicd2  sdwaaec2.sdwainc2._sdwaicd2
#define sdwatrn2  sdwaaec2._sdwatrn2
#define sdwasr00  sdwasrsv._sdwasr00
#define sdwasr01  sdwasrsv._sdwasr01
#define sdwasr02  sdwasrsv._sdwasr02
#define sdwasr03  sdwasrsv._sdwasr03
#define sdwasr04  sdwasrsv._sdwasr04
#define sdwasr05  sdwasrsv._sdwasr05
#define sdwasr06  sdwasrsv._sdwasr06
#define sdwasr07  sdwasrsv._sdwasr07
#define sdwasr08  sdwasrsv._sdwasr08
#define sdwasr09  sdwasrsv._sdwasr09
#define sdwasr10  sdwasrsv._sdwasr10
#define sdwasr11  sdwasrsv._sdwasr11
#define sdwasr12  sdwasrsv._sdwasr12
#define sdwasr13  sdwasrsv._sdwasr13
#define sdwasr14  sdwasrsv._sdwasr14
#define sdwasr15  sdwasrsv._sdwasr15
#define sdwaspid  sdwaidnt._sdwaspid
#define sdwalnth  sdwaidnt._sdwalnth
#define sdwasckb  sdwamch.sdwastck._sdwasckb
#define sdwascke  sdwamch.sdwastck._sdwascke
#define sdwamchs  sdwamch.sdwamchi._sdwamchs
#define sdwamchd  sdwamch.sdwamchi._sdwamchd
#define sdwacpid  sdwamch._sdwacpid
#define sdwarsr1  sdwamch._sdwarsr1
#define sdwarsr2  sdwamch._sdwarsr2
#define sdwamcho  sdwamch._sdwamcho
#define sdwarfsa  sdwamch._sdwarfsa
#define sdwatime  sdwamch._sdwatime
#define sdwaerra  sdwaflgs._sdwaerra
#define sdwaerrb  sdwaflgs._sdwaerrb
#define sdwaerrc  sdwaflgs._sdwaerrc
#define sdwaerrd  sdwaflgs._sdwaerrd
#define sdwartyf  sdwartya._sdwartyf
#define sdwalcpu  sdwacpua._sdwalcpu
#define sdwarcde  sdwaparq._sdwarcde
#define sdwaacf2  sdwaparq._sdwaacf2
#define sdwaacf3  sdwaparq._sdwaacf3
#define sdwaacf4  sdwaparq._sdwaacf4
#define sdwalrsd  sdwalkwa.sdwalkws._sdwalrsd
#define sdwaiulw  sdwalkwa.sdwalkws._sdwaiulw
#define sdwaiplw  sdwalkwa.sdwalkws._sdwaiplw
#define sdwaaplw  sdwalkwa.sdwalkws._sdwaaplw
#define sdwatalw  sdwalkwa.sdwalkws._sdwatalw
#define sdwamodn  sdwarecp._sdwamodn
#define sdwacsct  sdwarecp._sdwacsct
#define sdwarexn  sdwarecp._sdwarexn
#define sdwadpid  sdwasnpa.sdwadump._sdwadpid
#define sdwadpfs  sdwasnpa.sdwadump._sdwadpfs
#define sdwadpf2  sdwasnpa.sdwadump._sdwadpf2
#define sdwasda0  sdwasnpa.sdwaddat.sdwasdat._sdwasda0
#define sdwasda1  sdwasnpa.sdwaddat.sdwasdat._sdwasda1
#define sdwapdat  sdwasnpa.sdwaddat._sdwapdat
#define sdwafrm1  sdwadpsa.sdwadpsl._sdwafrm1
#define sdwato1   sdwadpsa.sdwadpsl._sdwato1
#define sdwafrm2  sdwadpsa.sdwadpsl._sdwafrm2
#define sdwato2   sdwadpsa.sdwadpsl._sdwato2
#define sdwafrm3  sdwadpsa.sdwadpsl._sdwafrm3
#define sdwato3   sdwadpsa.sdwadpsl._sdwato3
#define sdwafrm4  sdwadpsa.sdwadpsl._sdwafrm4
#define sdwato4   sdwadpsa.sdwadpsl._sdwato4
#define sdwaverf  sdwaveri._sdwaverf
#define sdwavid   sdwaveri._sdwavid
#define sdwakm    sdwaxm.sdwacrgs.sdwacr3._sdwakm
#define sdwascnd  sdwaxm.sdwacrgs.sdwacr3._sdwascnd
#define sdwaax    sdwaxm.sdwacrgs.sdwacr4._sdwaax
#define sdwaprim  sdwaxm.sdwacrgs.sdwacr4._sdwaprim
#define sdwacmla  sdwaxm._sdwacmla
#define sdwavral  sdwara._sdwavral
#define sdwadpva  sdwara._sdwadpva
#define sdwaural  sdwara._sdwaural
#define sdwavra   sdwara._sdwavra
#define sdwaid    sdwara._sdwaid

/* Values for field "sdwacmpf" */
#define sdwareq  0x80 /* - ON, SYSABEND/SYSMDUMP/SYSUDUMP DUMP TO BE        */
#define sdwastep 0x40 /* - ON, JOBSTEP TO BE TERMINATED.                    */
#define sdwastcc 0x10 /* - ON, DON'T STORE COMPLETION CODE.                 */
#define sdwarcf  0x04 /* - ON, REASON CODE IN SDWACRC IS VALID         @PBC */

/* Values for field "sdwacmka" */
#define sdwaioa  0xFE /* - I/O INTERRUPTS (ALL ZEROS OR ALL ONES).          */
#define sdwaexta 0x01 /* - EXTERNAL INTERRUPT.                              */

/* Values for field "sdwamwpa" */
#define sdwakeya 0xF0 /* - PSW KEY.                                         */
#define sdwamcka 0x04 /* - MACHINE CHECK INTERRUPT.                         */
#define sdwawata 0x02 /* - WAIT STATE.                                      */
#define sdwaspva 0x01 /* - SUPERVISOR/PROBLEM-PROGRAM MODE.                 */

/* Values for field "sdwapmka" */
#define sdwaila  0xC0 /* - INSTRUCTION LENGTH CODE.                         */
#define sdwacca  0x30 /* - LAST CONDITION CODE.                             */
#define sdwafpa  0x08 /* - FIXED-POINT OVERFLOW.                            */
#define sdwadoa  0x04 /* - DECIMAL OVERFLOW.                                */
#define sdwaeua  0x02 /* - EXPONENT UNDERFLOW.                              */
#define sdwasga  0x01 /* - SIGNIFICANCE.                                    */

/* Values for field "sdwacmkp" */
#define sdwaiop  0xFE /* - I/O INTERRUPTS (ALL ZEROS OR ALL ONES).          */
#define sdwaextp 0x01 /* - EXTERNAL INTERRUPT.                              */

/* Values for field "sdwamwpp" */
#define sdwakeyp 0xF0 /* - PSW KEY.                                         */
#define sdwamckp 0x04 /* - MACHINE CHECK INTERRUPT.                         */
#define sdwawatp 0x02 /* - WAIT STATE.                                      */
#define sdwaspvp 0x01 /* - SUPERVISOR/PROBLEM-PROGRAM MODE.                 */

/* Values for field "sdwapmkp" */
#define sdwailp  0xC0 /* - INSTRUCTION LENGTH CODE.                         */
#define sdwaccp  0x30 /* - LAST CONDITION CODE.                             */
#define sdwafpp  0x08 /* - FIXED-POINT OVERFLOW.                            */
#define sdwadop  0x04 /* - DECIMAL OVERFLOW.                                */
#define sdwaeup  0x02 /* - EXPONENT UNDERFLOW.                              */
#define sdwasgp  0x01 /* - SIGNIFICANCE.                                    */

/* Values for field "sdwaemk1" */
#define sdwaper1 0x40 /* ON,PROGRAM EVENT RECORDING                         */
#define sdwatrm1 0x04 /* ON,ADDRESS TRANSLATION ACTIVE                      */
#define sdwaio1  0x02 /* OFF,I/0 INTERRUPTION CAN NOT OCCUR                 */
#define sdwaext1 0x01 /* OFF,EXTERNAL INTERRUPTION CANNOT OCCUR             */

/* Values for field "sdwamwp1" */
#define sdwakey1 0xF0 /* PSW KEY                                            */
#define sdwaect1 0x08 /* EXTENDED CONTROL MODE BIT                          */
#define sdwamck1 0x04 /* OFF,MACHINE CHECK CANNOT OCCUR                     */
#define sdwawat1 0x02 /* ON,CPU IN WAIT STATE                               */
#define sdwapgm1 0x01 /* ON,PROBLEM STATE                                   */

/* Values for field "sdwaint1" */
#define sdwaascm 0xC0 /* ADDRESS SPACE CONTROL MODE BITS                    */
#define sdwas1   0x80 /* ADDRESS SPACE SELECTION BIT             @G381P2F   */
#define sdwacc1  0x30 /* CONDITION CODE                                     */
#define sdwafpo1 0x08 /* FIXED POINT OVERFLOW                               */
#define sdwadec1 0x04 /* DECIMAL OVERFLOW                                   */
#define sdwaexp1 0x02 /* EXPONENT UNDERFLOW                                 */
#define sdwasgn1 0x01 /* SIGNIFICANCE                                       */

/* Values for field "sdwaamf1" */
#define sdwamod1 0x80 /* ADDRESSING MODE OF THE NEXT INSTRUCTION @G860P1S   */

/* Values for field "sdwailc1" */
#define sdwail1  0x06 /* ILC                                                */

/* Values for field "sdwaicd1" */
#define sdwaipr1 0x80 /* PER INTERRUPT OCCURRED                             */
#define sdwaimc1 0x40 /* MONITOR CALL INTERRUPT OCCURRED                    */
#define sdwaipc1 0x3F /* AN UNSOLICITED PROGRAM CHECK                       */

/* Values for field "sdwaemk2" */
#define sdwaper2 0x40 /* ON,PROGRAM EVENT RECORDING                         */
#define sdwatrm2 0x04 /* ON,ADDRESS TRANSLATION ACTIVE                      */
#define sdwaio2  0x02 /* OFF,I/0 INTERRUPTION CANNOT OCCUR                  */
#define sdwaext2 0x01 /* OFF,EXTERNAL INTERRUPTION CANNOT OCCUR             */

/* Values for field "sdwamwp2" */
#define sdwakey2 0xF0 /* PSW KEY                                            */
#define sdwaect2 0x08 /* EXTENDED CONTROL MODE BIT                          */
#define sdwamck2 0x04 /* OFF,MACHINE CHECK CANNOT OCCUR                     */
#define sdwawat2 0x02 /* ON,CPU IN WAIT STATE                               */
#define sdwapgm2 0x01 /* ON,PROBLEM STATE                                   */

/* Values for field "sdwaint2" */
#define sdwas2   0x80 /* ADDRESS SPACE SELECTION BIT             @G381P2F   */
#define sdwacc2  0x30 /* CONDITION CODE                                     */
#define sdwafpo2 0x08 /* FIXED POINT OVERFLOW                               */
#define sdwadec2 0x04 /* DECIMAL OVERFLOW                                   */
#define sdwaexp2 0x02 /* EXPONENT UNDERFLOW                                 */
#define sdwasgn2 0x01 /* SIGNIFICANCE                                       */

/* Values for field "sdwaamf2" */
#define sdwamod2 0x80 /* ADDRESSING MODE OF THE NEXT INSTRUCTION @G860P1S   */

/* Values for field "sdwailc2" */
#define sdwail2  0x06 /* ILC                                                */

/* Values for field "sdwaicd2" */
#define sdwaipr2 0x80 /* PER INTERRUPT OCCURRED                             */
#define sdwaimc2 0x40 /* MONITOR CALL INTERRRUPT OCCURRED                   */
#define sdwaipc2 0x3F /* AN UNSOLICITED PROGRAM CHECK                       */

/* Values for field "sdwamchs" */
#define sdwasrvl 0x80 /* ON,STORAGE ADDRESSES SUPPLIED                      */
#define sdwarcdf 0x40 /* ON,MACHINE CHECK RECORD NOT RECORDED               */
#define sdwatsvl 0x20 /* ON,TIME STAMP IS VALID                             */
#define sdwainvp 0x10 /* ON,STORAGE IS RECONFIGURED, PAGE IS INVALIDATED    */
#define sdwarsrc 0x08 /* ON,STORAGE RECONFIGURATION (SDWARSR1,SDWARSR2)     */
#define sdwarsrf 0x04 /* ON,STORAGE RECONFIGURATION NOT ATTEMPTED.          */
#define sdwavriv 0x02 /* ON, INDICATES VECTOR REGISTERS ARE UNPREDICTABLE   */
#define sdwaargu 0x01 /* ON, INDICATES ACCESS REGISTERS ARE UNPREDICTABLE   */

/* Values for field "sdwamchd" */
#define sdwaskyf 0x80 /* ON,STORAGE KEY FAILURE                             */
#define sdwaregu 0x40 /* ON,GENERAL PURPOSE REGISTER CONTENTS AT TIME OF    */
#define sdwapswu 0x20 /* ON,PSW AND/OR CONTROL REGISTERS AT TIME OF         */
#define sdwasck  0x10 /* ON,INDICATES STORAGE DATA CHECK                    */
#define sdwaacr  0x08 /* ON,INDICATES ACR REQUEST                           */
#define sdwainsf 0x04 /* ON,INSTRUCTION FAILURE                             */
#define sdwafprx 0x02 /* ON,CONTENTS OF FLOATING POINT REGISTERS AT TIME    */
#define sdwaterr 0x01 /* ON,TIMER ERROR - CAUSES ENTRY TO                   */

/* Values for field "sdwarsr1" */
#define sdwapref 0x20 /* PREFERRED FRAME                         @G860P1F   */
#define sdwavrcn 0x10 /* V = R CANDIDATE - CAN GO OFFLINE        @G860P1F   */
#define sdwanswp 0x08 /* LONG-TERM NON-SWAPPABLE ADDRESS SPACE   @G860P1F   */
#define sdwanswa 0x04 /* NON-SWAPPABLE ADDRESS SPACE             @G860P1F   */
#define sdwamser 0x02 /* STORAGE ERROR ALREADY SET IN FRAME.                */
#define sdwachng 0x01 /* CHANGE INDICATOR WAS ON IN FRAME.                  */

/* Values for field "sdwarsr2" */
#define sdwaofln 0x80 /* FRAME OFFLINE OR SCHEDULED TO GO OFFLINE           */
#define sdwaintc 0x40 /* INTERCEPT                                          */
#define sdwasper 0x20 /* STORAGE ERROR PERMANENT ON FRAME.                  */
#define sdwanucl 0x10 /* FRAME CONTAINS PERMANENT RESIDENT STORAGE,         */
#define sdwafsqa 0x08 /* FRAME IN SQA                                       */
#define sdwaflsq 0x04 /* FRAME IN LSQA                                      */
#define sdwapgfx 0x02 /* FRAME IS PAGE FIXED                                */
#define sdwaveqr 0x01 /* FRAME IS VIRTUAL = REAL                 @G860P1F   */

/* Values for field "sdwamcho" */
#define sdwaskpr 0x80 /* SKIP RECORDING REQUESTED BY MACHINE CHECK   @04A   */

/* Values for field "sdwaerra" */
#define sdwamchk 0x80 /* ON INDICATES MACHINE CHECK                         */
#define sdwapchk 0x40 /* ON INDICATES PROGRAM CHECK                         */
#define sdwarkey 0x20 /* ON INDICATES CONSOLE RESTART KEY WAS DEPRESSED     */
#define sdwasvcd 0x10 /* ON INDICATES TASK ISSUED SVC 13                    */
#define sdwaabtm 0x08 /* ON INDICATES SYSTEM FORCED SVC 13(I.E.ABTERM)      */
#define sdwasvce 0x04 /* ON,INDICATES AN SVC WAS ISSUED BY                  */
#define sdwatexc 0x02 /* ON,INDICATES AN UNRECOVERABLE TRANSLATION          */
#define sdwapgio 0x01 /* ON,INDICATES A PAGE I/O ERROR                      */
#define sdwastrm 0x01 /* ON,INDICATES AN RTM1 SERVICE ROUTINE    @G38AP1F   */

/* Values for field "sdwaerrb" */
#define sdwapdip 0x80 /* ON INDICATES THAT THIS TASK WAS PARALLEL           */
#define sdwanmfs 0x40 /* Not My Fault Summary -- indicates that this        */
#define sdwasrbs 0x10 /* On - this SDWA was allocated for an SRB            */
#define sdwatyp1 0x08 /* ON TYPE 1 SVC IN CONTROL AT TIME OF ERROR          */
#define sdwaenrb 0x04 /* ON ENABLED RB IN CONTROL AT TIME OF ERROR          */
#define sdwaldis 0x02 /* ON A LOGICALLY OR PHYSICALLY DISABLED ROUTINE      */
#define sdwasrbm 0x01 /* ON SYSTEM IN SRB MODE AT TIME OF ERROR             */

/* Values for field "sdwaerrc" */
#define sdwastaf 0x80 /* ON INDICATES A PREVIOUS (E)STA  OR FRR             */
#define sdwastai 0x40 /* ON A (E)STAI EXIT PREVIOUSLY RECEIVED CONTROL      */
#define sdwairb  0x20 /* ON AN IRB PRECEDED THE RB THAT IS                  */
#define sdwaperc 0x10 /* ON THIS RECOVERY ROUTINE IS BEING PERCOLATED TO    */
#define sdwaeas  0x08 /* ON INDICATES A LOWER LEVEL EXIT HAS RECOGNIZED     */
#define sdwaskip 0x04 /* ON INDICATES FRRS WERE SKIPPED          @G381P2F   */
#define sdwalcl  0x02 /* ON IND ENTRY AS A LOCAL RESOURCE MGR    @G382P2F   */
#define sdwaglbl 0x01 /* ON IND ENTRY AS A GLOBAL RESOURCE MGR   @G382P2F   */

/* Values for field "sdwaerrd" */
#define sdwaclup 0x80 /* ON INDICATES RECOVERY EXIT ONLY TO CLEANUP AND     */
#define sdwanrbe 0x40 /* ON RB ASSOCIATED WITH THIS ESTA EXIT WAS NOT       */
#define sdwastae 0x20 /* ON THIS ESTA EXIT HAS BEEN ENTERED FOR A           */
#define sdwacts  0x10 /* ON,THIS TASK WAS NOT IN CONTROL AT TIME OF         */
#define sdwamabd 0x08 /* ON,THIS TASK WAS NOT IN CONTROL AT TIME OF         */
#define sdwarpiv 0x04 /* ON, THE REGISTERS, PSW AND CONTROL REGISTERS       */
#define sdwamciv 0x02 /* ON,MACHINE CHECK ERROR INFORMATION                 */
#define sdwaerfl 0x01 /* ON,ERRORID INFORMATION AVAILABLE       @G17EP5W    */

/* Values for field "sdwaiofs" */
#define sdwaioqr 0x80 /* ON,I/O FOR FAILING PROGRAM HAS BEEN QUIESCED AND   */
#define sdwaioht 0x40 /* ON,I/O FOR FAILING PROGRAM HAS BEEN HALTED AND     */
#define sdwanoio 0x20 /* ON,FAILING PROGRAM HAS NO I/O OUTSTANDING          */
#define sdwaniop 0x10 /* ON,USER REQUESTED NO I/O PROCESSING                */

/* Values for field "sdwartyf" */
#define sdwaamod 0x80 /* ADDRESSING MODE OF THE RETRY ROUTINE    @G860P1F   */

/* Values for field "sdwarcde" */
#define sdwacwt  0    /* 0 ,CONTINUE WITH TERMINATION. THIS INDICATION      */
#define sdwarety 4    /* 4 ,RETRY USING RETRY ADDRESS IN SDWARTYA FIELD     */
#define sdwapsti 16   /* 16,PREVENT FURTHER (E)STAI PROCESSING              */

/* Values for field "sdwaacf2" */
#define sdwarcrd 0x80 /* ON,RECORDING REQUESTED                             */
#define sdwarfxm 0x40 /* ON,RETRY TO FULLXM AT TIME OF FRR SET.             */
#define sdwaspin 0x20 /* ON,PROGRAM INTERRUPTED VIA  THE RESTART KEY WAS    */
#define sdwarerr 0x10 /* ON,RETRY USING THE CROSS MEMORY ADDRESSING         */
#define sdwauprg 0x08 /* ON,UPDATED REGISTERS STARTING WITH SDWASR00 ARE    */
#define sdwafree 0x04 /* ON, SDWA (RTCA) TO BE FREED PRIOR TO RETRY.        */
#define sdwaserp 0x02 /* ON,SERIALIZE PERCOLATION (USED WHEN AN SRB MODE    */
#define sdwacml  0x01 /* ON,FREE THE CROSS MEMORY LOCAL LOCK     @G381P2F   */

/* Values for field "sdwaacf3" */
#define sdwafrsx 0x80 /* ON, THE RSM CROSS MEMORY CLASS LOCK     @G860P1S   */
#define sdwafrsa 0x40 /* ON, THE RSM ADDRESS SPACE CLASS LOCK    @G860P1S   */
#define sdwafvsp 0x20 /* ON, THE VSM PAGE LOCK                   @G860P1S   */
#define sdwadisp 0x10 /* ON,THE DISPATCHER LOCK                             */
#define sdwaasmp 0x08 /* ON,THE ASM CLASS LOCK                   Z40WPXH    */
#define sdwasall 0x04 /* ON, THE SALLOC LOCK                                */
#define sdwaiprg 0x02 /* ON, THE IOSYNCH LOCK                               */
#define sdwafrsd 0x01 /* ON, THE RSM DATA SPACE LOCK                 @L6C   */

/* Values for field "sdwaacf4" */
#define sdwaiucb 0x80 /* ON, FREE IOSUCB LOCK                               */
#define sdwatadb 0x08 /* RESERVED LOCK                           Z40WPXH    */
#define sdwaoptm 0x04 /* ON, FREE SYSTEM RESOURCES MGR(SRM) LOCK            */
#define sdwacms  0x02 /* ON, FREE CMS LOCK                                  */
#define sdwafllk 0x01 /* ON, FREE LOCAL LOCK                                */

/* Values for field "sdwadpfs" */
#define sdwadpt  0x80 /* ALWAYS OFF, INDICATES SNAP DUMP REQUEST            */
#define sdwadlst 0x40 /* ALWAYS ON, INDICATES  OS/VS2 REL. 2 DUMP           */
#define sdwaensn 0x20 /* ON,ENHANCED DUMP OPTIONS              @G33SPHW     */
#define sdwaslst 0x02 /* ON,STORAGE LISTS SUPPLIED FOR DUMP                 */

/* Values for field "sdwadpf2" */
#define sdwadvs3 0x80 /* ON, STORAGE RANGES IN SDWADSR, OFF, STORAGE        */
#define sdwaxlst 0x08 /* ON,DATA SPACE STORAGE LISTS SUPPLIED FOR DUMP      */
#define sdwalvl2 0x04 /* ON, MVS/SP2.1 VERSION OF SNAP PARMLIST  @G860P1F   */
#define sdwasubl 0x02 /* ON, SUBPOOL LIST SUPPLIED               @G860P1C   */

/* Values for field "sdwasda0" */
#define sdwanuc  0x80 /* DISPLAY NUCLEUS                                    */
#define sdwasqa  0x40 /* DISPLAY SQA                                        */
#define sdwalsqa 0x20 /* DISPLAY LSQA                                       */
#define sdwaswa  0x10 /* DISPLAY SWA                                        */
#define sdwagtf  0x08 /* DISPLAY GTF INCORE TRACE TABLE                     */
#define sdwacbs  0x04 /* FORMAT AND DISPLAY CONTROL BLOCKS                  */
#define sdwaqqs  0x02 /* FORMAT AND DISPLAY QCBS/QELS                       */
#define sdwadm   0x01 /* FORMAT DATA MGT CONTROL BLOCKS        @G33SPHW     */

/* Values for field "sdwasda1" */
#define sdwaio   0x80 /* FORMAT I/O SUPERVISOR CONTROL BLOCKS  @G33SPHW     */
#define sdwaerr  0x40 /* FORMAT ERROR CONTROL BLOCKS           @G33SPHW     */
#define sdwasum  0x10 /* PROVIDE SUMMARY DUMP                    @G860P1S   */
#define sdwaalln 0x08 /* DISPLAY ENTIRE VIRTUAL NUCLEUS          @G860P1S   */

/* Values for field "sdwapdat" */
#define sdwadsas 0x80 /* DISPLAY SAVE AREAS                                 */
#define sdwadsah 0x40 /* DISPLAY SAVE AREA HEADER                           */
#define sdwadreg 0x20 /* DISPLAY REGISTERS                                  */
#define sdwatlpa 0x10 /* DISPLAY LPA MODULES OF TASK                        */
#define sdwatjpa 0x08 /* DISPLAY JPA MODULES OF TASK                        */
#define sdwadpsw 0x04 /* DISPLAY PSW                                        */
#define sdwauspl 0x02 /* DISPLAY USER SUBPOOLS                              */

/* Values for field "sdwavid" */
#define sdwavs3  1    /* 1, INDICATES THE SDWA IS AT AN MVS/SYSTEM          */
#define sdwavs4  2    /* 2, INDICATES THE SDWA IS AT AN MVS/SYSTEM          */
#define sdwavs5  3    /* 3, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L1A   */
#define sdwavs6  4    /* 4, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L4A   */
#define sdwavs7  5    /* 5, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L9A   */
#define sdwavs8  6    /* 6, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L9A   */
#define sdwavs9  7    /* 7, indicates the SDWA is at an OS/390 R10   @L9A   */
#define sdwavs10 8    /* 8, indicates the SDWA is at a z/OS R7       @LNA   */
#define sdwavsn  8    /* 8, indicates the SDWA is at a z/OS R7       @LNC   */

/* Values for field "sdwadpva" */
#define sdwahex  0x80 /* SDWAVRA DATA TO BE PRINTED BY EREP IN HEX          */
#define sdwaebc  0x40 /* SDWAVRA DATA TO BE PRINTED BY EREP IN EBCDIC       */
#define sdwavram 0x20 /* SDWAVRA DATA IS IN THE FORMAT MAPPED BY THE        */

#pragma pack(reset)
