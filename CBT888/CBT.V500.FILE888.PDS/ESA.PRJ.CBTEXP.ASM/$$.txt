* 05/09/06 baseless code
         MACRO
&LABEL   $$    &FUNCTION,&START=,&END=,&STRIPCH=' ',                   *
               &CALL=,&R0=,&R1=,&R2=,&R3=,&R4=,&R5=,&R6=,&R7=,         *
               &R8=,&R9=,&R10=,&R11=,&R12=,&R13=,&R14=,&R15=,          *
               &REG=R14,&INCR=,&DECR=,                                 *
               &SWITCH=,&CASE=,                                        *
               &FROMCH=,&TOCH=,                                        *
               &CH=,&CHA=,                                             *
               &TO=,&POINTER=,&LENGTH=,                                *
               &PARM=,                                                 *
               &TYPE=MACRO,                                            *
               &SWTYPE=,                                               *
               &DSECT=NO,                                              *
               &MF=
         COPY  $$SYSVAR
         SPACE 1
         AIF   ('&TYPE' EQ 'MACRO').MACRO
         AIF   ('&TYPE' EQ 'LOCAL' OR '&MF' EQ 'L').LOCAL
         AIF   ('&TYPE' EQ 'PROGRAM').PROGRAM
         AIF   ('&TYPE' EQ 'MSG').MSG
         AIF   ('&MF(1)' EQ 'E').MFE
.LOCAL   ANOP
&LABEL   $$DSECT DSECT=&DSECT
&LABEL._8A DC    8A(0)              eight words
&LABEL._FUNCTION DC CL16' '         function name
         MEXIT
.MFE     ANOP
         LCLA  &N,&I
         LCLC  &TOSTR
&N       SETA  N'&PARM
&I       SETA  0
.MFELOOP ANOP
&I       SETA  &I+1
         AIF   (&I GT &N).MFECALL
&TOSTR   SETC '&MF(2)'
         AIF   ('&PARM(&I)'(1,1) EQ '(').MFEREG
         LA    R0,&PARM(&I)        + get addr
         ST    R0,&TOSTR+(&I-1)*4  + store into parm list
         AGO  .MFELOOP
.MFEREG  ST    &PARM(&I),&TOSTR+(&I-1)*4 + store into parm list
         AGO  .MFELOOP
.MFECALL ANOP
         MVC   &MF(2).+32(16),=CL16'&FUNCTION' copy code
         LA    R1,&MF(2)           get addr
         $$LINK &PROJECT.$$        call it
         LM    R15,R1,&MF(2)       back it
         LTR   R15,R15             test code
         MEXIT
.MACRO   ANOP
.*
.* GLOBAL SERVICES macro
.*
         AIF   ('&LABEL' EQ '').NOLABEL
&LABEL   DS    0H
.NOLABEL ANOP
         AIF   ('&SWITCH' NE '').SWITCH
         AIF   ('&CALL' NE '').CALL
         AIF   ('&INCR' NE '').INCR
         AIF   ('&DECR' NE '').DECR
         AIF   ('&FUNCTION' EQ 'STRIP').STRIP
         AIF   ('&FUNCTION' EQ 'COPYPTR').COPYPTR
         AIF   ('&FUNCTION' EQ 'CHANGECH').CHANGECH
         AIF   ('&FUNCTION' EQ 'ISPRINT').ISPRINT
         AIF   ('&FUNCTION' EQ 'SEARCH').SEARCH
         AIF   ('&MF' NE '').MFE
         MNOTE 8,'INVALID FUNCTION CALL FOR $$'
         MEXIT
.STRIP   LA    R0,&START           + get start
         LA    R1,&END             + get end addr
         SR    R1,R0               + get length
         SR    R15,R15             + null length
         ICM   R15,15,=C&STRIPCH   + get strip char
         CLCL  R0,R14              + search for first
         JE    STRIPN&SYSNDX       + branch if all zero
         LA    R14,&END            + last byte
         BCTR  R14,0               + decr it
STRIP&SYSNDX CLI   0(R14),C&STRIPCH + check from the back
         JNE   *+10                + branch if not
         BCTR  R14,0               + decr it
         BRCT  R1,STRIP&SYSNDX     + try the next one
         LA    R1,1(,R14)          + get last byte addr +1
         J     STRIPR&SYSNDX       + branch out
STRIPN&SYSNDX LR R0,R1             + same in r0
STRIPR&SYSNDX LR R15,R1            + get end addr
         SR    R15,R0              + get length
         MEXIT
.COPYPTR ICM   R14,15,&POINTER     + get pointer
         JZ    $$R&SYSNDX          + branch if zero
         CLC   0(&LENGTH,R14),BLANKS + blank all
         JE    $$R&SYSNDX          + branch if zero
         OC    0(&LENGTH,R14),0(R14) + zero all
         JZ    $$R&SYSNDX          + branch if zero
         LA    R0,&TO              + get to addr
         LA    R1,L'&TO            + GET LENGTH
         LA    15,&LENGTH          + get from
         ICM   R15,8,BLANKS        get pad
         MVCL  R0,R14              + copy it
$$R&SYSNDX DS 0H
         MEXIT
.CHANGECH SR    R0,R0              + clear flag
         LA    R14,&START          + get start
         LA    R15,&LENGTH         + length
$$L&SYSNDX CLI 0(R14),&FROMCH      + get from character
         JNE   *+8                 + branch if not
         MVI   0(R14),&TOCH        + set new
         CLI   0(R14),&TOCH        + check for char
         JNE   $$N&SYSNDX          + branch if not
         LA    R0,1                + set flag
$$N&SYSNDX LA  R14,1(,R14)         + incr pointer
         BRCT  R15,$$L&SYSNDX      + go to the next one
         MEXIT
.SEARCH   SR    R0,R0              + clear flag
         LA    R14,&START          + get start
         LA    R15,&LENGTH         + length
$$L&SYSNDX DS  0H
         AIF   ('&CHA' NE '').SRCHL1 + if address
         CLI   0(R14),&CH          + is it the requested
         AGO   .SRCHLS             + branch over
.SRCHL1  CLC   0(1,R14),&CHA       + compare it
.SRCHLS  ANOP
         JNE   $$N&SYSNDX          + branch if not
         LA    R0,1                + set flag
         J     $$Z&SYSNDX          + branch out
$$N&SYSNDX LA  R14,1(,R14)         + incr pointer
         BRCT  R15,$$L&SYSNDX      + go to the next one
$$Z&SYSNDX LTR R15,R0              + get result
         MEXIT
.SWITCH  ANOP
         AIF   ('&SWTYPE' EQ 'BINARY').SWBIN
&I       SETA  1
&N       SETA  N'&CASE
.SWITCHL AIF   (&I GE &N).SWITCHE
         AIF   ('&CASE(&I)'(1,1) EQ '''').CASEC
         AIF   ('&CASE(&I)'(1,1) EQ '"').CASEX
         AIF   ('&CASE(&I)'(1,1) EQ '=').CASEL
         AGO   .CASEL
         CLC   =AL(L'&CASE(&I))(&CASE(&I)),&SWITCH + CHECK COND NUMBER
         AGO   .CASEBR
.CASEX   ANOP
&HEX     SETC  '&CASE(&I)'(2,K'&CASE(&I)-2)
         CLC   =X'&HEX',&SWITCH    + check cond HEX
         AGO   .CASEBR
.CASEL   CLC   &CASE(&I),&SWITCH   + check cond
         AGO   .CASEBR
.CASEC   CLC   =C&CASE(&I),&SWITCH + check cond
.CASEBR  JE    &CASE(&I+1)         + branch if equal
&I       SETA  &I+2
         AGO   .SWITCHL
.SWITCHE MEXIT
.SWBIN   ANOP
&I       SETA  1
&N       SETA  N'&CASE
         AIF   ('&DSECT' EQ 'YES').SWBINL
         LLGC  R15,&SWITCH       + get code
         SLL   R15,2             + by four
         A     R15,=A(BR&SYSNDX) + table addrerss
         BR    R15               + jump into table
BR&SYSNDX DS 0F
.SWBINL  AIF   (&I GT &N).SWBINE
         AIF   ('&DSECT' EQ 'YES').SWBD
         J     &CASE(&I)         +if &I*4 branch to &CASE(&I)
         AGO   .SWBN
.SWBD    ANOP
SYM_&CASE(&I) EQU &I-1        + symb equ
.SWBN    ANOP
&I       SETA  &I+1
         AGO   .SWBINL
.SWBINE  MEXIT
.CALL    ANOP
         AIF   ('&R0' EQ '').NOR0
         LA    R0,&R0              + get r0
.NOR0    ANOP
         AIF   ('&R1' EQ '').NOR1
         LA    R1,&R1              + get r1
.NOR1    ANOP
         AIF   ('&R2' EQ '').NOR2
         LA    R2,&R2              + get r2
.NOR2    ANOP
         AIF   ('&R3' EQ '').NOR3
         LA    R3,&R3              + get r3
.NOR3    ANOP
         AIF   ('&R4' EQ '').NOR4
         LA    R4,&R4              + get r4
.NOR4    ANOP
         AIF   ('&R5' EQ '').NOR5
         LA    R5,&R5              + get r5
.NOR5    ANOP
         AIF   ('&R6' EQ '').NOR6
         LA    R6,&R6              + get r6
.NOR6    ANOP
         AIF   ('&R7' EQ '').NOR7
         LA    R7,&R7              + get r7
.NOR7    ANOP
         AIF   ('&R8' EQ '').NOR8
         LA    R8,&R8              + get r8
.NOR8    ANOP
         AIF   ('&R9' EQ '').NOR9
         LA    R9,&R9              + get r9
.NOR9    ANOP
         AIF   ('&R10' EQ '').NOR10
         LA    R10,&R10            + get r10
.NOR10   ANOP
         AIF   ('&R11' EQ '').NOR11
         LA    R11,&R11            + get r11
.NOR11   ANOP
         AIF   ('&R12' EQ '').NOR12
         LA    R12,&R12            + get r12
.NOR12   ANOP
         AIF   ('&R13' EQ '').NOR13
         LA    R13,&R13            + get r13
.NOR13   ANOP
         AIF   ('&R14' EQ '').NOR14
         LA    R14,&R14            + get r14
.NOR14   ANOP
         AIF   ('&R15' EQ '').NOR15
         LA    R15,&R15            + get r15
.NOR15   ANOP
*        L     R14,=A(&CALL)       + get call address
         BRASL R14,&CALL           + call the module
         LTR   R15,R15             + test code
         MEXIT
.INCR    L     &REG,&INCR          + get value
         AHI   &REG,1              + incr it
         ST    &REG,&INCR          + save it
         MEXIT
.DECR    L     &REG,&DECR          + get value
         AHI   &REG,-1             + decr it
         ST    &REG,&DECR          + save it
         MEXIT
.ISPRINT ANOP
         GBLB &ISPRINT
         L    R15,=A(ISPRINT)       +get addr
         TRT  &START,0(R15)          +tarnslate it
         AIF  (&ISPRINT).ISTBOK
&ISPRINT SETB 1
&SECT    SETC '&SYSECT'
ISPRINT  CSECT
ISPRINT_TBL DC 256X'01'
         ORG ISPRINT_TBL+X'40'
         DC   X'00'
         ORG ISPRINT_TBL+C'#'
         DC   X'00'
         ORG ISPRINT_TBL+C'$'
         DC   X'00'
         ORG ISPRINT_TBL+C'@'
         DC   X'00'
         ORG ISPRINT_TBL+C'ยง'
         DC   X'00'
         ORG ISPRINT_TBL+C'A'
         DC   X'000000000000000000'
         ORG ISPRINT_TBL+C'J'
         DC   X'000000000000000000'
         ORG ISPRINT_TBL+C'S'
         DC   X'0000000000000000'
         ORG ISPRINT_TBL+C'0'
         DC   X'00000000000000000000'
         ORG
&SECT    CSECT
.ISTBOK  ANOP
         MEXIT
.PROGRAM ANOP
         TITLE ' $$ MODULE'
***********************************************************************
*                                                                     *
* $$                                                                  *
*                                                                     *
* Function:                                                           *
*  ...                                                                *
*                                                                     *
*  Register assignment :                                              *
*                                                                     *
* Amode(31) , Rmode(ANY)                                              *
*                                                                     *
***********************************************************************
$$DSECT  $$ TYPE=LOCAL,DSECT=YES
*PROJECT.$$  $$ENTRY TYPE=STACK,                                       *
               BASE=BASELESS,                                          *
               AMODE=31,                                               *
               RMODE=ANY,                                              *
               USING=(&PROJECT.CVT,R10,$$DSECT,R9,PSA,R0,              *
               $$_WORK,R13),                                           *
               TITLE='$$ ROUTINE '
&PROJECT.$$  $$ENTRY TYPE=STACK,                                       *
               BASE=BASELESS,                                          *
               AMODE=31,                                               *
               RMODE=ANY,                                              *
               USING=(&PROJECT.CVT,R10,$$DSECT,R9,PSA,R0,              *
               $$_WORK,R13),                                           *
               TITLE='$$ ROUTINE '
*        $$GETCVT CVTREG=R10       get CVT addr
         $$GETCVT CVTREG=R10       get CVT addr
*        $$DEBUG ID=$$_entry_parms,ADDR=($$DSECT_FUNCTION,32)
         $$DEBUG ID=$$_ENTRY_PARMS,ADDR=($$DSECT_FUNCTION,32)
         LM    R0,R7,$$DSECT_8A    get PARM
         L     R14,=A(RETURN+X'80000000') return addr
         $$    SWITCH=$$DSECT_FUNCTION,                                *
               CASE=('COPYTILL',COPYTILL,                              *
               'STRINSTR',STRINSTR,                                    *
               'NEXTTU',NEXTTU)
*        $$MSG S$10,INSERT=(16,$$DSECT_FUNCTION) msg
         $$MSG S$10,INSERT=(16,$$DSECT_FUNCTION) msg
         J     RETURN04            branch back
         TITLE ' copytill'
*---------------------------------------------------------------------*
* r0 - from address                                                   *
* r1 - from length pointer                                            *
* r2 - to addr                                                        *
* r3 - to total length  pointer                                       *
* r4 - term char addr pointer                                         *
*---------------------------------------------------------------------*
COPYTILL BAKR  R14,0               all in stack
         L     R15,0(,R1)          get length
         LTR   R15,R15             test it
         JNP   COPYTILL_TERM       if in error
         LR    R1,R0               from address
         LA    R5,0(R1,R15)        after the last
         LR    R0,R15              from length
         ICM   R3,15,0(R3)         to total length
         JZ    ERR_PARM_4          if in error
         LR    R15,R4              char addr
         SR    R4,R4               clear it
         IC    R4,0(R15)           get it
         SR    R15,R15             clear from addr
         ICM   R15,8,BLANKS        get pad
         MVCL  R2,R14              blank all
         EREG  R2,R3               back regs
         L     R3,0(,R3)           to total length
         LA    R14,1               set apost flag
         LA    R15,1               get one
COPYTILL_LOOP DS 0H                test apost flag
         CLI   0(R1),C''''         apost
         JNE   *+6                 branch if not
         LCR   R14,R14             change sign
         LTR   R14,R14             test sign
         JM    COPYTILL_MVC        branch if in
         EX    R4,COPYTILL_EX      exec compare
         JE    COPYTILL_TERM       term found
COPYTILL_MVC DS 0H
         MVC   0(1,R2),0(R1)       copy a byte
         AR    R2,R15              incr to
         AR    R1,R15              incr from
         SR    R0,R15              decr it
         JNP   COPYTILL_TERM       if no more
         SR    R3,R15              decr it
         JNP   COPYTILL_TERM       if no more
         J     COPYTILL_LOOP       try next
COPYTILL_TERM DS 0H
         LA    R1,1(,R1)           past term
         SR    R5,R1               get length
         LTR   R5,R5               test remainder
         BP    *+6                 if ok
         SR    R5,R5               clear it
         LR    R0,R1               in r0 back end address
         LR    R1,R5               rest length in r1
         PR    ,                   return back
         TITLE ' nexttu'
*---------------------------------------------------------------------*
* r0 - actual start address                                           *
* r1 - end address                                                    *
* return                                                              *
* r1 - next tu start address or zero                                  *
* r0 - tu length                                                      *
* r15- tu key length                                                  *
*---------------------------------------------------------------------*
NEXTTU   BAKR  R14,0               all in stack
         LR    R5,R0               save actual start addr
         LR    R6,R0               start here also
         LR    R0,R1               get end addr
         LR    R1,R5               pointer
         LA    R14,1               clear apost flag
NEXTTU_LOOP DS 0H
         CLI   0(R1),C''''         is it apost
         JNE   *+6                 branch if not
         LCR   R14,R14             change sign
         LTR   R14,R14             testflag
         JNP   NEXTTU_NEXT         branch if in
         CLI   0(R1),C'='          is it the key
         JNE   NEXTTU_NOKEY        if no key
         SR    R5,R1               get negative length
         J     NEXTTU_NEXT         next char
NEXTTU_NOKEY DS 0H
         CLI   0(R1),C','          is it term comma
         JNE   NEXTTU_NOTERM       branch if not
         SR    R6,R1               length of key
         LA    R1,1(,R1)           step over term
         J     NEXTTU_END_00       branch back
NEXTTU_NOTERM DS 0H
         CLI   0(R1),C' '          end of stream
         JNE   NEXTTU_NEXT         branch if not
NEXTTU_TERM DS 0H
         SR    R6,R1               length of key
         SR    R1,R1               nomore
         J     NEXTTU_END_00       branch back
NEXTTU_NEXT  CR R1,R0              check end
         BNL   NEXTTU_TERM         branch if no more
         LA    R1,1(,R1)           incr addr
         J     NEXTTU_LOOP         try it
NEXTTU_END_00 DS 0H
         LPR   R0,R6               tu length
         LTR   R0,R0               test it
         BP    *+6                 if ok
         SR    R0,R0               clear it
         LPR   R15,R5              key length
         LTR   R15,R15             test it
         BP    *+6                 if ok
         SR    R15,R15             clear it
         PR    ,                   return bcak
         TITLE 'string in string '
*---------------------------------------------------------------------*
* r0 - start address                                                  *
* r1 - end address +1                                                 *
* r2 - target start                                                   *
* r3 - target length pointer                                          *
*---------------------------------------------------------------------*
STRINSTR BAKR  R14,0               all in stack
         LA    R14,1               apost flag
         LTR   R0,R0               test parm 1
         JNP   ERR_PARM_1          parm error
         LTR   R1,R1               test parm 2
         JNP   ERR_PARM_2          parm error
         LTR   R2,R2               test parm 3
         JNP   ERR_PARM_3          parm error
         ICM   R3,15,0(R3)         get length
         JNP   ERR_PARM_4          if no length
         CH    R3,=Y(255)          max length
         JH    STRINSTR_END_04     invalid parm
         BCTR  R3,0                in machine form
         LR    R4,R1               after the last byte
         BCTR  R4,0                to the last byte
         LR    R1,R0               pointer
STRINSTR_LOOP DS 0H
         CLI   0(R1),C''''         is it apost
         JNE   *+6                 if not
         LCR   R14,R14             change sign
         LTR   R14,R14             check sign
         JNP   STRINSTR_NEXT       if not
STRINSTR_COMP DS 0H
         LR    R15,R4              get end addr
         SR    R15,R1              get diff
         CR    R15,R3              check with target
         JL    STRINSTR_END_04     no place
         EX    R3,STRINSTR_CLC     check it
         JE    STRINSTR_END_00     check ok
STRINSTR_NEXT DS 0H
         LA    R1,1(,R1)           incr addr
         CR    R1,R4               check addr
         JH    STRINSTR_END_04     branch back
         J     STRINSTR_LOOP       next byte
STRINSTR_END_04 LA  R15,4          get code
         SR    R1,R1               clear pointer
         J     STRINSTR_END        branch out
STRINSTR_END_00 SR R15,R15         clear return
STRINSTR_END    PR ,               return back
         SPACE 1
* error messages and return points
         SPACE 1
*RR_PARM_1 $$MSG S$01,INSERT=(16,$$DSECT_FUNCTION)
ERR_PARM_1 $$MSG S$01,INSERT=(16,$$DSECT_FUNCTION)
         J     RETURN04            branch back
*RR_PARM_2 $$MSG S$02,INSERT=(16,$$DSECT_FUNCTION)
ERR_PARM_2 $$MSG S$02,INSERT=(16,$$DSECT_FUNCTION)
         J     RETURN04            branch back
*RR_PARM_3 $$MSG S$03,INSERT=(16,$$DSECT_FUNCTION)
ERR_PARM_3 $$MSG S$03,INSERT=(16,$$DSECT_FUNCTION)
         J     RETURN04            branch back
*RR_PARM_4 $$MSG S$04,INSERT=(16,$$DSECT_FUNCTION)
ERR_PARM_4 $$MSG S$04,INSERT=(16,$$DSECT_FUNCTION)
         J     RETURN04            branch back
RETURN04 LA     R15,4              get code
RETURN   DS     0H
         STM   R15,R1,$$DSECT_8A   back result
*        $$DEBUG ID=$$_EXIT_parms,addr=($$DSECT_FUNCTION%,12)
         $$DEBUG ID=$$_EXIT_PARMS,ADDR=($$DSECT_FUNCTION%,12)
*        $$RETURN TYPE=STACK
         $$RETURN TYPE=STACK
*        $$dbase
         $$DBASE
$$BASE   LOCTR
COPYTILL_EX CLI 0(R1),0            ** exec only **
STRINSTR_CLC CLC 0(*-*,R1),0(R2)   ** exec only **
         LTORG
BLANKS   DC    CL80' '             blank
         TITLE 'MODULE $$_WORK AREA '
$$_WORK  DSECT
$$_WORKSAVE DS 18A                 save area
$$_WORKR0R1 DC 2A(0)               SAVE FOR r0 r1
         $$MSG TYPE=LOCAL,DSECT=NO
$$_WORKLGTH EQU *-$$_WORK           length of the dsect
*        GBLB &PRINT
*&PRINT   SETB 1
         $$GLOBAL
         PRINT NOGEN
         MEXIT
.MSG     ANOP
         MNOTE 0,'S$ for $$ '
         IKJTSMSG ('QFSS$01E internal error - 1 ',),S$01
         IKJTSMSG ('QFSS$02E internal error - 2 ',),S$02
         IKJTSMSG ('QFSS$03E internal error - 3 ',),S$03
         IKJTSMSG ('QFSS$04E internal error - 4 ',),S$04
         IKJTSMSG ('QFSS$10E invalid request',),S$10
         MEND
