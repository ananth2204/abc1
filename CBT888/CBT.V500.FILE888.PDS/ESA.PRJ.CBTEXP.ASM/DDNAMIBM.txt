DDNAMIBM CSECT
DDNAMIBM RMODE ANY
DDNAMIBM AMODE 31
*
* 2002 09 30 new parm , give back member name
**********************************************************************
*                                                                    *
* DDNAMIBM assembler routine to give back the datasetnames           *
* for a given DDNAME                                                 *
* The routines is called from IBM C++                                *
* DDNAMIBM(char * ddname,char * dsnames,int length,char *=0)         *
*                                                                    *
* In the dsnames area the routine will build a list of the           *
* datasetname strings for the ddname                                 *
*                                                                    *
* AMODE(31),RMODE(ANY),RENT,REUSE                                    *
*                                                                    *
* R11 program base                                                   *
* R12 CRAB                                                           *
* R13 DSA                                                            *
*                                                                    *
**********************************************************************
         PRINT GEN
*        CREGS USING              c type regs
         CREGS USING              c type regs
*        edcprlg usrDSAl=DSALEN,BASEreg=R11 type entry
         EDCPRLG USRDSAL=DSALEN,BASEREG=R11 type entry
         USING PSA,R0             base on PSA
         USING DSA,R13            base on R13
         LM    R8,R10,0(R1)       get parms
         L     R7,12(R1)          get mem pointer
         L     R10,0(R10)         get length 17/11/06
         LA    R10,0(R9,R10)      after the last byte
         SPACE 1
* prepare ddname in work area
         SPACE 1
         MVC   DSADDNM,=CL8' '    init ddname
         LA    R1,DSADDNM         get ddname addr
         LA    R2,8               max counter
DDNAMEL  CLI   0(R8),0            is it null
         BE    DDNAMEOK           branch if over
         OC    0(1,R1),0(R8)      move char
         LA    R1,1(,R1)          incr r1
         LA    R8,1(R8)           incr r8
         BCT   R2,DDNAMEL         try the next
DDNAMEOK DS    0H
         XC    0(2,R9),0(R9)      clear a halfword
         L     R1,PSATOLD         get tcb addr
         L     R1,TCBTIO-TCB(R1)  get tiot addr
         USING TIOT1,R1           base on tiot prefix
         LA    R3,TIOENTRY        get first entry addr
         ST    R3,DSATIOTP
         DROP  R1
         USING TIOENTRY,R3        base on tiot entry
         SPACE 1
* go through the tiot list
         SPACE 1
         LA    R2,0               initial status
         USING SWAEPA,R5          base on swa
         LA    R5,DSASWAEPA       get EPA addr
         ST    R5,DSASWAEPAP      set into the list
TIOTL    CLI   TIOELNGH,0         no more
         BE    RET04              branch if not found
         B     TIOTBR(R2)         branch on r2
TIOTBR   B     TIOT00             initial search
         B     TIOT04             concat search
TIOT00   CLI   TIOELNGH,0         no more
         BE    RET04              branch if not found
         CLC   TIOEDDNM,DSADDNM   check nmae
         BNE   TIOTNEXT           branch if not our
         LA    R2,4               set code to indicate in
         B     DSNCOPY            branch to copy
TIOT04   CLI   TIOELNGH,0         no more
         BE    RET00              branch if not found
         CLC   TIOEDDNM,=CL8' '   is it concat
         BE    DSNCOPY            branch to copy if it is
         B     RET00              branch out
TIOTNEXT SR    R15,R15             clear reg
         L     R3,DSATIOTP
         IC    R15,TIOELNGH        get length
         LA    R3,0(R3,R15)        incr addr
         ST    R3,DSATIOTP
         B     TIOTL               try the next one
         SPACE 1
* copy a dsnmae into the list
         SPACE 1
DSNCOPY  XC    SWAEPAX,SWAEPAX    clear area
         MVC   SWVA,TIOEJFCB      set jfcb ttr addr
*        SWAREQ FCODE=RL,EPA=DSASWAEPAP,MF=(E,DSASWAREQL),UNAUTH=YES
         SWAREQ FCODE=RL,EPA=DSASWAEPAP,MF=(E,DSASWAREQL),UNAUTH=YES
         LTR   R15,R15            test code
         BNZ   RET08              branch if in error
         L     R4,SWBLKPTR        get pointer
         USING IEFJFCBN,R4        base on jfcb
         SLL   R7,1
         SRL   R7,1               ZA030717 clear bit 0
         LTR   R7,R7               test mem pointer
         BZ    DSNL_NM            branch if no
         CLC   TIOEDDNM,BLANKS    concat DD
         BE    DSNL_NM            branch if it is
         CLI   TIOELINK,0         special device
         BNE   DSNL_NM            branch if it is
         MVC   0(8,R7),JFCBELNM   copy member
DSNL_NM DS 0H
         LA    R14,JFCBDSNM       get datasetname addr
         LA    R15,44(,R14)       get amx length
DSNL     CR    R9,R10             check addr
         BNL   RET12              branch if no more space
         CR    R14,R15            test dsname
         BNL   DSNLE              branch if not lower
         MVC   0(1,R9),0(R14)     move a byte
         CLI   0(R9),C' '         blank
         BNE   DSNLMORE           branch if not
DSNLE    XC    0(2,R9),0(R9)      set to null
         LA    R9,1(,R9)          next ch
         B     TIOTNEXT           branch for the next tiot entryto
DSNLMORE LA    R9,1(,R9)          incr to pointer
         LA    R14,1(,R14)        incr from
         B     DSNL               try the next byte
         SPACE 1
* return points
         SPACE 1
RET00    SR    R15,R15            set null return code
         B     RET                branch out
RET04    LA    R15,4              set code
         CLC   =C'STEPLIB',DSADDNM
         BNE   RET
         DC    a(0)
         B     RET                branch out
RET08    LA    R15,8              set code
         B     RET                branch out
RET12    LA    R15,12             set code
         B     RET                branch out
*ET      edcepil ,                epilog
RET      EDCEPIL ,                epilog
BLANKS   DC   CL8' '              blank
         LTORG
         SPACE 5
* dsa area
DSA      EDCDSAD ,
DSADDNM    DC  CL8' '             ddname field
DSASWAEPAP DC  A(0)               pointer to SWA parms
DSASWAEPA  DC  XL28'00'           parm for swa
*SASWAREQL SWAREQ MF=L            list form
DSASWAREQL SWAREQ MF=L            list form
DSATIOTP   DC   A(0)
DSALEN     EQU  *-DSA             length of the dsa
         PRINT NOGEN
         PUSH  PRINT
         PRINT OFF
         CVT   DSECT=YES          map CVT
         IHAPSA    ,              map PSA
         IEFTIOT1  ,              map TIOT
         IKJTCB    ,              map TCB
         IEFJESCT  ,              map JESCT
         IEFJSSWA  ,              map SWA
IEFJFCBN DSECT
         IEFJFCBN  ,              map JFCB
         IEFZB505  LOCEPAX=YES
         POP   PRINT
         END
