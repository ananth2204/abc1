*30/03/06 addr in r5
*30/03/06 load RRS or CAF module
         PRINT    GEN
         TITLE 'SQLASM SQL IBM interface module '
*        CREGS USING
         CREGS USING
*        IEANTASM
         IEANTASM
         MACRO
&LABEL   STUB &INDEX=0,&LOAD=
         LCLC &LNAME,&LRRS
         AIF  ('&LOAD' EQ '').SETDEF
&LNAME   SETC '&LOAD'
         AGO  .SETOK
.SETDEF  ANOP
&LNAME   SETC '&LABEL'
.SETOK   AIF   ('&LNAME' NE 'DSNALI').NALI
&LRRS    SETC  'DSNRLI'
         AGO   .RRSOK
.NALI    AIF   ('&LNAME' NE 'DSNHLI2').NHLI
&LRRS    SETC  'DSNHLIR'
         AGO   .RRSOK
.NHLI    ANOP
&LRRS    SETC  'DSNTIAR'
.RRSOK   ANOP
&LABEL   CSECT
&LABEL   AMODE 31
&LABEL   RMODE ANY
*label.E edcprlg basereg=r9,dsalen=dsalen
&LABEL.E EDCPRLG BASEREG=R9,DSALEN=DSALEN
.LOK     ANOP
         L     R7,=A(LEVEL)       get const darr
         USING LEVEL,R7           base on const
         LR    R2,R1              save pointer
         L     R15,X'10'           CVT
         L     R15,X'220'(,R15)     CSR table address
         L     R15,X'14'(,R15)      offset
         L     R15,X'08'(,R15)      IEANTRNT
*        CALL  (15),(LEVEL,tokenname,TOKENDATA,RETCODE),               *
               MF=(E,CALLLIST)
         CALL  (15),(LEVEL,TOKENNAME,TOKENDATA,RETCODE),               *
               MF=(E,CALLLIST)
         CHI   R15,4               check code
         JL    OK&SYSNDX           if retrieve ok
         XC    LOADLIST(LOADLISTL),LOADLIST clear list
*        load  ep=userrs,erret=norrs&sysndx,sf=(e,loadlist)
         LOAD  EP=USERRS,ERRET=NORRS&SYSNDX,SF=(E,LOADLIST)
*        load  ep=&LRRS
         LOAD  EP=&LRRS
         LR    R5,R0               get addr
         J     DOC&SYSNDX
NORRS&SYSNDX DS 0H
*30/03/06 addr in r5
*        load  ep=&LNAME
         LOAD  EP=&LNAME
         LR    R5,R0               into r5
         J     DOC&SYSNDX          jump to call
OK&SYSNDX DS   0H
          L   R15,TOKENDATA+&INDEX get proper addr
          LR  R5,R15               save here
DOC&SYSNDX DS  0H
         AIF   ('&LABEL' NE 'DSNALI').NODSNALI
         ICM   R3,15,0(R2)         get fists parm
         JZ    NOPARM&SYSNDX       jump if no parm
         MVC   CALLCODE,0(R3)      save call code
         CLC   =C'IDENTIFY',0(R3)  RRS IDENTIFY (i.e connect)
         JE    CONN&SYSNDX         connect request
         CLC   =C'CONNECT',0(R3)   CAF connect request
         JNE   GOON&SYSNDX         if not CAF connect
CONN&SYSNDX  DS 0H
         BAS   R14,RETR&SYSNDX     call to retrieve token
         LTR   R15,R15             test code
         JZ    ALREADY&SYSNDX      jump if already
* start to connect
         LR    R1,R2               back pointer
         LR    R15,R5              back module addr
         BASR  R14,R15             call it to connect
         LTR   R15,R15             test rc
         JNZ   RET&SYSNDX          jump if not o.k.
* connection was o.k, so create token
         BAS   R14,CREA&SYSNDX     create token
         LTR   R15,R15             check code
         JNZ   ERRTKN&SYSNDX       name token error
         J     RET&SYSNDX
NOPARM&SYSNDX DS 0H
         L     R15,=F'-2'         parm error
         J     RET&SYSNDX         jump out
ERRTKN&SYSNDX DS 0H
         L     R15,=F'-3'         token error
         J     RET&SYSNDX         jump out
ALREADY&SYSNDX L R15,=F'-1'       already connectedo
         J     RET&SYSNDX         jump out
.NODSNALI  ANOP
GOON&SYSNDX DS 0H
         LR    R1,R2               back pointer
         LR    R15,R5              back module addr
         BASR  R14,R15             call it
         AIF   ('&LABEL' NE 'DSNALI').NODSNAL1
         LR    R5,R15              save rc
         CLC   =C'TERMINATE',CALLCODE terminate RRS
         JE    DELDO&SYSNDX        jump if it is
         CLC   =C'DISCONN',CALLCODE terminate CAF
         JNE   RET&SYSNDX
DELDO&SYSNDX DS 0H
         BAS   R14,DELTK&SYSNDX    call to delete
         CHI   R15,4               check code
         JH    ERRT&SYSNDX         name/token error
         LR    R15,R5              back
.NODSNAL1 ANOP
RET&SYSNDX DS  0H
*        edcepil
         EDCEPIL
         AIF   ('&LABEL' NE 'DSNALI').NODSNAL2
RETR&SYSNDX BAKR R14,0
         L     R15,X'10'           CVT
         L     R15,X'220'(,R15)    CSR table address
         L     R15,X'14'(,R15)     offset
         L     R15,X'08'(,R15)     IEANTRNT
*        CALL  (15),(CONN_LEVEL,CONN_TOKENNAME,TOKENDATA,RETCODE),     *
               MF=(E,CALLLIST)
         CALL  (15),(CONN_LEVEL,CONN_TOKENNAME,TOKENDATA,RETCODE),     *
               MF=(E,CALLLIST)
         PR    ,
DELTK&SYSNDX BAKR R14,0
         L     R15,X'10'           CVT
         L     R15,X'220'(,R15)     CSR table address
         L     R15,X'14'(,R15)       offset
         L     R15,X'0C'(,R15)       IEANTDL delete token
*        CALL  (15),(conn_LEVEL,conn_tokenname,RETCODE),MF=(E,CALLLIST)
         CALL  (15),(CONN_LEVEL,CONN_TOKENNAME,RETCODE),MF=(E,CALLLIST)
         PR    ,
CREA&SYSNDX BAKR R14,0             in stack
         L     R15,X'10'           CVT
         L     R15,X'220'(,R15)    CSR table address
         L     R15,X'14'(,R15)     offset
         L     R15,X'04'(,R15)     IEANTCR
*        CALL  (15),(conn_level,conn_tokenname,tokendata,              *
               NOPERSIST,RETCODE),MF=(E,CALLLIST)
         CALL  (15),(CONN_LEVEL,CONN_TOKENNAME,TOKENDATA,              *
               NOPERSIST,RETCODE),MF=(E,CALLLIST)
         PR    ,
ERRT&SYSNDX LR R5,R15              get code
*        ABEND (R5),DUMP,,SYSTEM,REASON=(R3)
         ABEND (R5),DUMP,,SYSTEM,REASON=(R3)
.NODSNAL2 ANOP
         LTORG
         MEND
         MACRO
&LABEL   RSQL
*        EDCPRLG BASEREG=R9,DSALEN=DSALEN
         EDCPRLG BASEREG=R9,DSALEN=DSALEN
.RLOK    ANOP
         L     R7,=A(LEVEL)       get const darr
         L     R15,X'10'           CVT
         L     R15,X'220'(,R15)    CSR table address
         L     R15,X'14'(,R15)     offset
         L     R15,X'08'(,R15)     IEANTRNT
*        CALL  (15),(LEVEL,tokenname,TOKENDATA,RETCODE),MF=(E,CALLLIST)
         CALL  (15),(LEVEL,TOKENNAME,TOKENDATA,RETCODE),MF=(E,CALLLIST)
         CHI   R15,4               check code
         JE    LOAD                if new token
*        JL    DELETE              if already exits, delete
         JH    ERRTKN              name/token err
* already exists, check if rrs was
         SR    R15,R15             no rrs
         OC    TOKENDATA+12(4),TOKENDATA+12 test for RRS
         JZ    RETRN               no rrs
         LA    R15,4               indicate rrs
         J     RETRN               if already exits, o.k.
DELETE   OC    TOKENDATA+12(4),TOKENDATA+12 test for RRS
         BZ    DNORRS              DELETE NORRS
*        delete ep=userrs          delete userrs
         DELETE EP=USERRS          delete userrs
*        delete ep=dsnhlir         delete dsnhlir
         DELETE EP=DSNHLIR         delete dsnhlir
*        delete ep=dsnrli          delete dsnrli
         DELETE EP=DSNRLI          delete dsnrli
         B     DCLEAR
DNORRS   DS    0H
*        delete ep=dsnhli2
         DELETE EP=DSNHLI2
*        delete ep=dsnali
         DELETE EP=DSNALI
DCLEAR   DS    0H                  clear addresses
         L     R15,X'10'           CVT
         L     R15,X'220'(,R15)     CSR table address
         L     R15,X'14'(,R15)       offset
         L     R15,X'0C'(,R15)       IEANTDL delete token
*        CALL  (15),(LEVEL,tokenname,RETCODE),MF=(E,CALLLIST)
         CALL  (15),(LEVEL,TOKENNAME,RETCODE),MF=(E,CALLLIST)
         CHI   R15,4               check code
         BH    ERRTKN              name/token error
         B     RETRN
LOAD     DS    0H
*        LOAD  EP=DSNTIAR          get addr
         LOAD  EP=DSNTIAR          get addr
         ST    R0,TOKENDATA+8      save addr
         MVI   TOKENDATA+12,1      assume RRS
         XC    LOADLIST(LOADLISTL),LOADLIST clear list
*        load  ep=userrs,erret=norrs,sf=(e,loadlist)
         LOAD  EP=USERRS,ERRET=NORRS,SF=(E,LOADLIST)
*        load  ep=dsnrli
         LOAD  EP=DSNRLI
         ST    R0,TOKENDATA        save addr
         LOAD  EP=DSNHLIR          get addr
         ST    R0,TOKENDATA+4      save addr
         LA    R15,4               indicate rrs
         B     CTOKEN              branch to create token
NORRS    XC    TOKENDATA+12(4),TOKENDATA+12 use CAF
         LOAD  EP=DSNALI           get addr
         ST    R0,TOKENDATA        save addr
*        LOAD  EP=DSNHLI2          get addr
         LOAD  EP=DSNHLI2          get addr
         ST    R0,TOKENDATA+4      save addr
         SR    R15,R15             no RRS
CTOKEN   LR    R5,R15              save rc
         L     R15,X'10'           CVT
         L     R15,X'220'(,R15)    CSR table address
         L     R15,X'14'(,R15)     offset
         L     R15,X'04'(,R15)     IEANTCR
*        CALL  (15),(LEVEL,tokenname,tokendata,nopersist,RETCODE),     *
               MF=(E,CALLLIST)
         CALL  (15),(LEVEL,TOKENNAME,TOKENDATA,NOPERSIST,RETCODE),     *
               MF=(E,CALLLIST)
         LTR   R15,R15             check code
         JNZ   ERRTKN              name token error
         LR    R15,R5              back rc
         J     RETRN               jump out
         LTORG
LEVEL    DC    A(IEANT_TASK_LEVEL)      Task level
*LEVEL    DC    A(IEANT_HOME_LEVEL)     Home level
NOPERSIST DC   A(IEANT_NOPERSIST)      nopersist option
TOKENNAME DC   CL16'ISIS_DB2CAF_TOKEN' Token name
CONN_LEVEL DC  A(IEANT_TASK_LEVEL)      task level
CONN_TOKENNAME DC   CL16'ISIS_DBCONN_TOKEN' Token name
ERRTKN   LR    R5,R15              get code
*        ABEND (R5),DUMP,,SYSTEM,REASON=(R3)
         ABEND (R5),DUMP,,SYSTEM,REASON=(R3)
         SPACE 1
*--------------------------------------------------------------------*
* RETURN point                                                       *
*--------------------------------------------------------------------*
RETRN    DS    0H
*exit    edcepil
EXIT     EDCEPIL
.RRLOK   ANOP
         MEND

*--------------------------------------------------------------------*
*RSQLASM : ASM stub routine to provide access to the SQL functions   *
*          from the SASC/C modules with CAF and RRS                  *
*                                                                    *
* Entry points :                                                     *
*         SQLASM standard init entry point                           *
*         if the address =0 then                                     *
*         load the DSN.. modules and store the address list          *
*         in the C address list                                      *
*         if the address <>0 then                                    *
*         delete the DSN.. modules and set the address list to zero  *
*         in the C address list                                      *
* The program tries to load the DSNRL interface, andif it can        *
*     set a flag to indicate the use of the RRS                      *
* RRS entry points:                                                  *
*         DSNRLI  standard SQL entry point to call the DSNRLI module *
*         DSNHLIR SQL call entry point                               *
* CAF entry points:                                                  *
*         DSNHLI2 standard SQL entry point to call the DSNHLI module *
*         DSNALI standard SQL entry to call the DSNALI module        *
* Common :                                                           *
*         DSNTIAR to call the standard SQL message edit nodule       *
*                                                                    *
*                                                                    *
* Calling: The module is called via the standard MVS convention :    *
*          R1 points to the parameters list :                        *
*          +0  address list pointer                                  *
*            +0 DSNALI or DSNRLI address                             *
*            +4 DSNHLI2 or DSNHLIR address                           *
*            +8 DSNTIAR address                                      *
*            +c RRS or CAF flag                                      *
* Processing:                                                        *
* Return : The module returns the primary return code in R15         *
*                                                                    *
* AMODE  : 31                                                        *
* RMODE  : ANY                                                       *
* rent/reus                                                          *
*--------------------------------------------------------------------*
DSNALI   STUB  INDEX=0            stub DSNALI
DSNHLI   STUB  INDEX=4,LOAD=DSNHLI2 stub DSNHLI2
DSNTIAR  STUB  INDEX=8            stub dsntiar
SQLASM   CSECT
SQLASM   AMODE 31
SQLASM   RMODE ANY
         RSQL
         LTORG
DSA      CEEDSA SECTYPE=OS         DSA
*oadlist load sf=l                 load list form
LOADLIST LOAD SF=L                 load list form
LOADLISTL EQU *-LOADLIST           list length
CALLLIST  DC   8A(0)               call list form
CALLLISTL EQU  *-CALLLIST          cal list length
TOKENDATA DC   4A(0)               token data
RETCODE  DC    A(0)                    Return code
CALLCODE DC    CL16' '             save callcode here
DSALEN   EQU   *-DSA               DSECT length
         END
