{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012237000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1410864, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE513.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1410864, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1410864, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE513.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x17\\x03'", "DS1TRBAL": "b'\\xbc\\x10'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xd9\\x00\\x05\\x03\\xda\\x00\\r\\x00\\x18'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04I\\x00\\x00\\x01\\x066\\x0f\\x01\\x066\\x0f\\tC\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf3@@@'", "ispf": {"version": "04.73", "flags": 0, "createdate": "2006-12-26T00:00:00", "modifydate": "2006-12-26T09:43:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-473"}, "text": "REGULAR CBT TAPE - VERSION 473    FILE:  513\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT473.FILE513\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 21 MEMBERS COUNTED; CUMULATIVE SIZE IS 12,763 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/26/06    09:43:31    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$ASM": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00E\\x01\\x01\\x08\\x7f\\x01\\x061\\x7f\\x15X\\x007\\x007\\x00\\n\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-03-28T00:00:00", "modifydate": "2006-11-13T15:58:45", "lines": 55, "newlines": 55, "modlines": 10, "user": "U0Z72B6"}, "text": "//*********************************************************************\n//*     ENSAMBLAJE Y LINKEDICION DE PROGRAMAS                         *\n//*     ----------------------------------------------------------    *\n//*      - COMPILAR    :  ASMA 90                                     *\n//*      - LMOD LIBRARY: 'INS.VERLOG.V100.LOADLIB'                    *\n//************************ PARAMETERS *********************************\n//VLGAHCL PROC PL='NCAL',                                          *\n//             SDSN='INS.VERLOG.V100.DOCLIB',     <== SOURCE ORIGIN\n//             LDSN='INS.VERLOG.V100.LOADLIB',    <== LMOD LIBRARY\n//             MBIN=TEMPNAME                      <== SOURCE MEMBER\n//************************ COMPILING   ********************************\n//COMP     EXEC PGM=ASMA90,REGION=4M,\n// PARM=('NOESD,NODECK,OBJECT,LANGUAGE(ES),LINECOUNT(80)')\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&SDSN.,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,(10,5)),\n//             DSN=&SYSUT1\n//SYSLIN   DD DSN=&LOADSET,\n//            UNIT=SYSDA,\n//            SPACE=(400,(40,10)),\n//            DISP=(MOD,PASS),\n//            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB)\n//SYSIN    DD  DSN=&SDSN.(&MBIN),DISP=SHR\n//************************ LINKEDITING ********************************\n//LNK     EXEC PGM=IEWL,\n//             PARM='&PL',\n//             COND=(4,LT,COMP)\n//SYSLIB   DD  DSN=&LDSN,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE,DELETE)\n//SYSUT1   DD  SPACE=(CYL,(3,2)),UNIT=SYSALLDA\n//SYSLMOD  DD  DSN=&LDSN.(&MBIN),DISP=SHR\n//************************ BORRAR OBJETO ******************************\n//DEL     EXEC PGM=IEFBR14,\n//             COND=(4,GE,COMP)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n// PEND\n//*--------------------------------------------------------------------\n//*--  MODULOS   EXISTENTES  ------------------------------------------\n//*--------------------------------------------------------------------\n//VLGTPUT  EXEC VLGAHCL,MBIN=MDTPUT,\n//         PL='MAP,LIST,XREF'\n//VLGFECHA EXEC VLGAHCL,MBIN=MDFECHS,\n//         PL='MAP,LIST,XREF,RENT,REUS'\n//VLGCATSI EXEC VLGAHCL,MBIN=MDCATSI,\n//         PL='MAP,LIST,XREF'\n//VLGALDIN EXEC VLGAHCL,MBIN=MDALDIN,\n//         PL='XREF,LET,LIST,RENT,REUS,REFR'\n//VLGVLOG  EXEC VLGAHCL,MBIN=MDCVLOG,\n//         PL='MAP,LIST,XREF'\n//*\n//VLG      EXEC VLGAHCL,MBIN=SYVERLOG,\n//         PL='MAP,LIST,XREF'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x007\\x01\\x01\\x08\\x7f\\x01\\x063\\x9f\\x11\\x14\\x00\\x86\\x00=\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2001-03-28T00:00:00", "modifydate": "2006-12-05T11:14:37", "lines": 134, "newlines": 61, "modlines": 0, "user": "U0Z72B6"}, "text": "\n  March, 2001 (updated November 2006)\n\n    This library contains several modules, clist, proc, and panels to\n    set up our way to take advantage on OPERLOG.\n\n    We appreciate comments or suggestions bout this tool.\n    Some modules were taken from old share tapes. You'll fing their\n    author's credits on top of them.\n    Please, do not remove this data.\n\n    If you want anybody to blame, here we are:\n\n                   Angel Luis DOMINGUEZ MARTIN\n                   BBVA Banco Bilbao Vizcaya Argentaria - Spain\n                   email: u0z72b6@gmail.com\n\n                   Jose Maria MARTINEZ BESTEIRO\n                   Capgemini - Spain\n                   email: josemmar@capgemini.es\n\n  Antecedents: SYSLOG vs OPERLOG\n  -----------------------------------\n\n    We use in the past IBM's \"powerfull program VPW, Virtual Paper\n    Writter, to archive data from SYSLOG, so we could be able to\n    search and exploit data from SYSLOG, using clist, rexx or\n    any other program, as well as doing searchs directly from\n    ISPF.\n\n    Once we left being the Y2K transition, we scheduled the move to\n    the new OPERLOG format, known as MDB records, in order to achieve\n    as much knowledge as we could, over the whole sysplex, and every\n    system within it.\n\n    VPW was \"killed\" and a new set of programs and utilities took\n    place instead.\n\n    Nostalgics can download in Binary without CR/LF the member VPWDOC\n    to PC and print it. It is a WORD document but unfortunatley in\n    Spanish.\n\n    With all our systems using OPERLOG, we start using IBM's sample\n    program, named IEAMDBLG, that you can find in SYS1.SAMPLIB. This\n    facility lets you write to SYSOUT, using SYSLOG format, the\n    contents of the OPERLOG log stream, as well as mark MDBs for\n    deletion.\n\n    We found this program missed some options, that could be very\n    ussefull, but decided, for compatibility reasons, not to write\n    a new program, but to upgrade IEAMDBLG. Our version of the module,\n    is fully compatible, with no JCL change, with the original one.\n\n    We introduced four new options: COPY(ALL), COPY(MDB), DELETE(ALL)\n    and ENQ. You can find a description of each in the program\n    itself.\n\n    This new version of the program is SMPE installable. You can find\n    a SYSMOD sample in member @MVSX08. This usermod does mark the\n    sample member IEAMDBLG, to get a warning message when another PTF\n    updates it.\n\n    We scheduled the program to run every 60 minutes at xx:05 time.\n    We put MDBs on DASD dataset, under SMS control, with a management\n    class criteria of keeping then on DASD for 10 days, making one\n    backup copy, for recovery reasons, and deleting them.\n\n    You will find a JCL sample for the STC in member OPERLOG.\n\n    We manage a set of dataset with the following data set name\n    pattern:\n                       OPERLOG.PLEX$A.B0010328.T020500\n                       OPERLOG.PLEX$A.B0010328.T030500\n                       OPERLOG.PLEX$A.B0010328.T040500\n\n    Where PLEX$A is the SYSPLEX name, B0010328 is the same as 20010328\n    (AAAAMMDD form) and T020500 means the GMT time for first register\n    inside this file. Depending on your GMT time zone, you can have a\n    difference from local times inside and the dataset name outside.\n    This is in order to make this application DST compliant, avoiding\n    problems when local time changes back and forward daylight saving.\n\n    If you start IEAMDBLG at IPL time and, after that, at an hourly\n    basis, you will get about 24 files per day in normal operations.\n    Instruct your SMS routines to migrate, delete or BKUP this files.\n\n    We maintain 10 days on disk to access data interactively from ISPF,\n    but this number can be easily changed, and this notation is useful\n    to dyanamically allocate the data we need.\n\n    As referred to in APAR PQ07414, SDSF gets slow response time using\n    the OPERLOG component. So it is much better to search MDBs within\n    the unloaded data on DASD, using the accompanying VERLOG facility\n    from ISPF.\n\n\n  USING VERLOG\n  --------------------\n\n    New MDB records can be accessed by browsing directly the data\n    set, but MDB format is not really a friendly one. So we designed\n    an ISPF application to get then as usual, with the aid of search\n    arguments: sysids, start-date-time to end-date-time, and so on,\n    making it ieasier accessing to LOG data. Search results can be\n    put into a file, if you want, and you can save this selected log\n    data for later use: i.e. reporting software and hardware problems\n    to IBM or other ISVs.\n\n    For compatibility purposes, data obtained are in SYSLOG format,\n    so you can look at it as you did in the past.\n\n    You can use clist VERLOG to start the search. Two panels,\n    (members VLOGP00 and VLOGH00) and a program (member SYVERLOG) to\n    do the search. You must tailor the clist to match your data set\n    naming conventions, but we think it will not be a complex task\n    for experienced system programmers that have started\n    operlog and so on .... Of course this ISPF aplication will take\n    into account differences between LOCAL and GMT time, so all your\n    searchs will be performed using your local time.\n\n    To obtain the real and executable SYVERLOG program you MUST run\n    the JCL in $$ASM member. Tailor it to suit your standards and\n    provide an intermediate LOAD to do the assembly. It will produce\n    several routines and the facility load module itself.\n\n    Of course, put CLIST and ISPPLIB in your SYSPROC and\n    ISPPLIB concatenation. We suggest to put SYVERLOG in a\n    linklisted library, but this is optional.\n\n    Now, you are ready to enjoy this tool.\n\n\n                              - - - o o o O o o o - - -\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE513": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04I\\x00\\x00\\x01\\x066\\x0f\\x01\\x066\\x0f\\tC\\x00\\x9d\\x00\\x9d\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf3@@@'", "ispf": {"version": "04.73", "flags": 0, "createdate": "2006-12-26T00:00:00", "modifydate": "2006-12-26T09:43:00", "lines": 157, "newlines": 157, "modlines": 0, "user": "CBT-473"}, "text": "//***FILE 513 is from Jose Maria Martinez Besteiro (Cap Gemini      *   FILE 513\n//*           Spain and Angel Luis Dominguez Martin (BBVA Spain)    *   FILE 513\n//*           It is about using OPERLOG in a Sysplex, for archiving *   FILE 513\n//*           data. This package includes a useful tool for system  *   FILE 513\n//*           programmers and others, to search and select OPERLOG  *   FILE 513\n//*           data, as though it were SYSLOG data, interactively    *   FILE 513\n//*           from ISPF.                                            *   FILE 513\n//*                                                                 *   FILE 513\n//*      - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 513\n//*      March, 2001 (updated November 2006)                        *   FILE 513\n//*                                                                 *   FILE 513\n//*        This library contains several modules, clist, proc,      *   FILE 513\n//*        and panels to set up our way to take advantage on        *   FILE 513\n//*        OPERLOG.                                                 *   FILE 513\n//*                                                                 *   FILE 513\n//*        We appreciate comments or suggestions bout this tool.    *   FILE 513\n//*        Some modules were taken from old share tapes. You'll     *   FILE 513\n//*        fing their author's credits on top of them.  Please,     *   FILE 513\n//*        do not remove this data.                                 *   FILE 513\n//*                                                                 *   FILE 513\n//*        If you want anybody to blame, here we are:               *   FILE 513\n//*                                                                 *   FILE 513\n//*         Angel Luis DOMINGUEZ MARTIN                             *   FILE 513\n//*         BBVA Banco Bilbao Vizcaya Argentaria - Spain            *   FILE 513\n//*         email: u0z72b6@gmail.com                                *   FILE 513\n//*                                                                 *   FILE 513\n//*         Jose Maria MARTINEZ BESTEIRO                            *   FILE 513\n//*         Capgemini - Spain                                       *   FILE 513\n//*         email: josemmar@capgemini.es                            *   FILE 513\n//*                                                                 *   FILE 513\n//*      Antecedents: SYSLOG vs OPERLOG                             *   FILE 513\n//*      -----------------------------------                        *   FILE 513\n//*                                                                 *   FILE 513\n//*        We use in the past IBM's \"powerfull program VPW,         *   FILE 513\n//*        Virtual Paper Writter, to archive data from SYSLOG,      *   FILE 513\n//*        so we could be able to search and exploit data from      *   FILE 513\n//*        SYSLOG, using clist, rexx or any other program, as       *   FILE 513\n//*        well as doing searchs directly from ISPF.                *   FILE 513\n//*                                                                 *   FILE 513\n//*        Once we left being the Y2K transition, we scheduled      *   FILE 513\n//*        the move to the new OPERLOG format, known as MDB         *   FILE 513\n//*        records, in order to achieve as much knowledge as we     *   FILE 513\n//*        could, over the whole sysplex, and every system          *   FILE 513\n//*        within it.                                               *   FILE 513\n//*                                                                 *   FILE 513\n//*        VPW was \"killed\" and a new set of programs and           *   FILE 513\n//*        utilities took place instead.                            *   FILE 513\n//*                                                                 *   FILE 513\n//*        Nostalgics can download in Binary without CR/LF the      *   FILE 513\n//*        member VPWDOC to PC and print it. It is a WORD           *   FILE 513\n//*        document but unfortunatley in Spanish.                   *   FILE 513\n//*                                                                 *   FILE 513\n//*        With all our systems using OPERLOG, we start using       *   FILE 513\n//*        IBM's sample program, named IEAMDBLG, that you can       *   FILE 513\n//*        find in SYS1.SAMPLIB. This facility lets you write to    *   FILE 513\n//*        SYSOUT, using SYSLOG format, the contents of the         *   FILE 513\n//*        OPERLOG log stream, as well as mark MDBs for             *   FILE 513\n//*        deletion.                                                *   FILE 513\n//*                                                                 *   FILE 513\n//*        We found this program missed some options, that could    *   FILE 513\n//*        be very ussefull, but decided, for compatibility         *   FILE 513\n//*        reasons, not to write a new program, but to upgrade      *   FILE 513\n//*        IEAMDBLG. Our version of the module, is fully            *   FILE 513\n//*        compatible, with no JCL change, with the original        *   FILE 513\n//*        one.                                                     *   FILE 513\n//*                                                                 *   FILE 513\n//*        We introduced four new options: COPY(ALL), COPY(MDB),    *   FILE 513\n//*        DELETE(ALL) and ENQ. You can find a description of       *   FILE 513\n//*        each in the program itself.                              *   FILE 513\n//*                                                                 *   FILE 513\n//*        This new version of the program is SMPE installable.     *   FILE 513\n//*        You can find a SYSMOD sample in member @MVSX08. This     *   FILE 513\n//*        usermod does mark the sample member IEAMDBLG, to get     *   FILE 513\n//*        a warning message when another PTF updates it.           *   FILE 513\n//*                                                                 *   FILE 513\n//*        We scheduled the program to run every 60 minutes at      *   FILE 513\n//*        xx:05 time.  We put MDBs on DASD dataset, under SMS      *   FILE 513\n//*        control, with a management class criteria of keeping     *   FILE 513\n//*        then on DASD for 10 days, making one backup copy, for    *   FILE 513\n//*        recovery reasons, and deleting them.                     *   FILE 513\n//*                                                                 *   FILE 513\n//*        You will find a JCL sample for the STC in member         *   FILE 513\n//*        OPERLOG.                                                 *   FILE 513\n//*                                                                 *   FILE 513\n//*        We manage a set of dataset with the following data       *   FILE 513\n//*        set name pattern:                                        *   FILE 513\n//*                  OPERLOG.PLEX$A.B0010328.T020500                *   FILE 513\n//*                  OPERLOG.PLEX$A.B0010328.T030500                *   FILE 513\n//*                  OPERLOG.PLEX$A.B0010328.T040500                *   FILE 513\n//*                                                                 *   FILE 513\n//*        Where PLEX$A is the SYSPLEX name, B0010328 is the        *   FILE 513\n//*        same as 20010328 (AAAAMMDD form) and T020500 means       *   FILE 513\n//*        the GMT time for first register inside this file.        *   FILE 513\n//*        Depending on your GMT time zone, you can have a          *   FILE 513\n//*        difference from local times inside and the dataset       *   FILE 513\n//*        name outside.  This is in order to make this             *   FILE 513\n//*        application DST compliant, avoiding problems when        *   FILE 513\n//*        local time changes back and forward daylight saving.     *   FILE 513\n//*                                                                 *   FILE 513\n//*        If you start IEAMDBLG at IPL time and, after that, at    *   FILE 513\n//*        an hourly basis, you will get about 24 files per day     *   FILE 513\n//*        in normal operations.  Instruct your SMS routines to     *   FILE 513\n//*        migrate, delete or BKUP this files.                      *   FILE 513\n//*                                                                 *   FILE 513\n//*        We maintain 10 days on disk to access data               *   FILE 513\n//*        interactively from ISPF, but this number can be          *   FILE 513\n//*        easily changed, and this notation is useful to           *   FILE 513\n//*        dyanamically allocate the data we need.                  *   FILE 513\n//*                                                                 *   FILE 513\n//*        As referred to in APAR PQ07414, SDSF gets slow           *   FILE 513\n//*        response time using the OPERLOG component. So it is      *   FILE 513\n//*        much better to search MDBs within the unloaded data      *   FILE 513\n//*        on DASD, using the accompanying VERLOG facility from     *   FILE 513\n//*        ISPF.                                                    *   FILE 513\n//*                                                                 *   FILE 513\n//*      USING VERLOG                                               *   FILE 513\n//*      --------------------                                       *   FILE 513\n//*                                                                 *   FILE 513\n//*        New MDB records can be accessed by browsing directly     *   FILE 513\n//*        the data set, but MDB format is not really a friendly    *   FILE 513\n//*        one. So we designed an ISPF application to get then      *   FILE 513\n//*        as usual, with the aid of search arguments: sysids,      *   FILE 513\n//*        start-date-time to end-date-time, and so on, making      *   FILE 513\n//*        it ieasier accessing to LOG data. Search results can     *   FILE 513\n//*        be put into a file, if you want, and you can save        *   FILE 513\n//*        this selected log data for later use: i.e. reporting     *   FILE 513\n//*        software and hardware problems to IBM or other ISVs.     *   FILE 513\n//*                                                                 *   FILE 513\n//*        For compatibility purposes, data obtained are in         *   FILE 513\n//*        SYSLOG format, so you can look at it as you did in       *   FILE 513\n//*        the past.                                                *   FILE 513\n//*                                                                 *   FILE 513\n//*        You can use clist VERLOG to start the search. Two        *   FILE 513\n//*        panels, (members VLOGP00 and VLOGH00) and a program      *   FILE 513\n//*        (member SYVERLOG) to do the search. You must tailor      *   FILE 513\n//*        the clist to match your data set naming conventions,     *   FILE 513\n//*        but we think it will not be a complex task for           *   FILE 513\n//*        experienced system programmers that have started         *   FILE 513\n//*        operlog and so on .... Of course this ISPF aplication    *   FILE 513\n//*        will take into account differences between LOCAL and     *   FILE 513\n//*        GMT time, so all your searchs will be performed using    *   FILE 513\n//*        your local time.                                         *   FILE 513\n//*                                                                 *   FILE 513\n//*        To obtain the real and executable SYVERLOG program       *   FILE 513\n//*        you MUST run the JCL in $$ASM member. Tailor it to       *   FILE 513\n//*        suit your standards and provide an intermediate LOAD     *   FILE 513\n//*        to do the assembly. It will produce several routines     *   FILE 513\n//*        and the facility load module itself.                     *   FILE 513\n//*                                                                 *   FILE 513\n//*        Of course, put CLIST and ISPPLIB in your SYSPROC and     *   FILE 513\n//*        ISPPLIB concatenation. We suggest to put SYVERLOG in     *   FILE 513\n//*        a linklisted library, but this is optional.              *   FILE 513\n//*                                                                 *   FILE 513\n//*        Now, you are ready to enjoy this tool.                   *   FILE 513\n//*                                                                 *   FILE 513\n//*                                  - - - o o o O o o o - - -      *   FILE 513\n//*                                                                 *   FILE 513\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@MVSX08": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01/\\x00\\x12\\x00\\x990\\x1f\\x01\\x063\\x9f\\x11 \\t\\xdb\\x08K\\t\\xdb\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.47", "flags": 0, "createdate": "1999-10-28T00:00:00", "modifydate": "2006-12-05T11:20:12", "lines": 2523, "newlines": 2123, "modlines": 2523, "user": "U0Z72B6"}, "text": "//* - INS.MVSIPO.A06X.POST ------------------ MIEMBRO: MVSX08   ------\n//* -                                                                 -\n//* - OBJETIVO: INCLUSION DE PROGRAMA DE USUARIO PARA DESCARGAR EL    -\n//* -           OPERATIONS LOG (OPERLOG) DEL SYSPLEX.                 -\n//* -           MARCAR EL FUENTE, SYS1.SAMPLIB(IEAMDBLG), POR SI SE   -\n//* -           PRODUJERAN CAMBIOS.                                   -\n//* - PRODUCTO: z/OS V1.7                                             -\n//* - FMID:     HBB7720                                               -\n//* - USERMOD:  @MVSX08                                               -\n//* -                                                                 -\n//* - COMENTARIOS: Se marcan con <USR> los cambios introducidos.      -\n//* -           Es necesario definir DDDEF(TLINKLIB) asignada al      -\n//* -           DSN(SYST.LINKLIB), a fin de emplear CALLLIBS.         -\n//* -           El JCLIN emplea un DSN ficticio (SYST.TLINKLIB).      -\n//* -------------------------------------------------------------------\n//P10COPY  EXEC PGM=IEBCOPY,REGION=2M\n//SYSPRINT DD   SYSOUT=*\n//SYSUT1   DD   DISP=SHR,DSN=SYS1.SAMPLIB,\n//         UNIT=SYSALLDA,VOL=SER=SYA0R5\n//SYSUT2   DD   DISP=(,PASS),DSN=&&SAMPMOD,\n//         LIKE=SYS1.SAMPLIB\n//SYSIN    DD   *\n COPY I=((SYSUT1,R)),O=SYSUT2\n S M=IEAMDBLG\n//*\n//IEAMDBLG EXEC PGM=ASMA90,REGION=4M,\n// PARM=('NOESD,NODECK,OBJECT,LANGUAGE(ES),LINECOUNT(80)')\n//STEPLIB  DD DSN=ASM.SASMMOD1,DISP=SHR,UNIT=3390,VOL=SER=SYA0R2\n//SYSUT1   DD DSN=&&WRKFIL,SPACE=(1700,(400,50)),UNIT=3390\n//SYSLIB   DD DISP=SHR,DSN=SMPE.MVSTZNA.SMPMTS\n//         DD DSN=SYS1.MACLIB,DISP=SHR,UNIT=SYSALLDA,VOL=SER=SYA0R5\n//         DD DSN=SYS1.MODGEN,DISP=SHR,UNIT=SYSALLDA,VOL=SER=SYA0R5\n//         DD DSN=SYST.FUENTES,DISP=SHR,UNIT=SYSALLDA,VOL=SER=SYA0P1\n//SYSLIN   DD DISP=SHR,DSN=INS.MVSIPO.A06X.EXITOBJ(IEAMDBLG)\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n* +--- ZOS170A --------- IEAMDBLG ------------------------------------+\n* |                                                                   |\n* | NOMBRE ....... IEAMDBLG                                           |\n* |                                                                   |\n* | UBICACION .... SYS1.LINKLIB        AMODE(31) RMODE(24)            |\n* |                                                                   |\n* | AUTOR ........ JOSE MARIA MARTINEZ BESTEIRO (C) 1999              |\n* |                ANGEL LUIS DOMINGUEZ MARTIN. (C) 1999              |\n* |                SYS1.SAMPLIB(IEAMDBLG)       (C) IBM               |\n* |                                                                   |\n* | DESCRIPTIVE-NAME: Sample program to read records from an          |\n* |                   Operations Log stream and convert them to       |\n* |                   SYSLOG format, and to delete records from       |\n* |                   the stream.                                     |\n* |                                                                   |\n* | STATUS= HBB7707                                                   |\n* |                                                                   |\n* | FUNCIONES .... PROGRAMA PARA VACIADO DE OPERLOG CON CREACION POR  |\n* |                ALLOC DINAMICA DEL FICHERO DE SALIDA, INCLUYENDO   |\n* |                EN EL NOMBRE DEL MISMO LOS DATOS DE FECHA Y HORA   |\n* |                DEL PRIMER REGISTRO.                               |\n* |                                                                   |\n* |                2005/11/22: SE PASA A UTILIZAR GMT TIME PARA LA    |\n* |                CONSTRUCCION DEL DSNAME DEL FICHERO DE SALIDA.     |\n* |                                                                   |\n* | OBJETIVOS .... TRATAMIENTO DE OPERLOG DEL SISTEMA                 |\n* |                                                                   |\n* | LENGUAJE ..... ASSEMBLER H.                                       |\n* |                                                                   |\n* | TIPO ......... PROGRAMA                                           |\n* |                                                                   |\n* | PARAMETROS ... COPY(.start_date..,end_date.), DELETE(date)        |\n* |                    (>nnn)                           (>nnn)        |\n* |                Ver detalles en SAMPLIB                            |\n* |                                                                   |\n* |                Par\u00e1metros incorporados por la instalaci\u00f3n:        |\n* |                COPY(ALL)                                          |\n* |                   Copia los registros recogidos en el log-stream  |\n* |                   desde el m\u00e1s antiguo hasta el momento de        |\n* |                   inicio del programa.                            |\n* |                COPY(MDB)                                          |\n* |                   Copia los registros, con el mismo criterio que  |\n* |                   la opci\u00f3n ALL, sobre un fichero de salida que   |\n* |                   se asigna din\u00e1micamente, seg\u00fan el patr\u00f3n de DSN |\n* |                   determinado en la variable $DATOSA.             |\n* |                   Se emplea la rutina de usuario MDALDIN.         |\n* |                DELETE(ALL)                                        |\n* |                   Marca para eliminaci\u00f3n los registros procesados |\n* |                   en las opciones COPY(ALL|MDB).                  |\n* |                ENQ                                                |\n* |                   Parametro opcional, dirigido a impedir la       |\n* |                   ejecucion concurrente del programa dentro del   |\n* |                   sysplex. Su codificacion supone el intento de   |\n* |                   obtener un encolamiento sobre el recurso        |\n* |                   OPERLOG.IEAMDBLG; si se consigue, el proceso    |\n* |                   continua, si no, finaliza con un RC=04.         |\n* |                                                                   |\n* | Utilizaci\u00f3n .. JCL para su utilizaci\u00f3n:                           |\n* |                                                                   |\n* |                //DESCARG EXEC PGM=IEAMDBLG,                       |\n* |                //        PARM='par\u00e1metros_de_ejecuci\u00f3n'           |\n* |                //SYSLOG  DD   SYSOUT=*                            |\n* |                                                                   |\n* +---------------------MARTINEZ-BESTEIRO / DOMINGUEZ (C) 1999 -------+\nIEAMDBLG CSECT ,\n*                                                                     *\n* We need amode 31 for logger services and rmode 24 for the DCB.  @P8C*\n*                                                                     *\n* We need rmode 24 for MDALDIN services                           <USR>\n*                                                                     *\nIEAMDBLG AMODE 31\nIEAMDBLG RMODE 24\n***********************************************************************\n* begin linkage                                                       *\n***********************************************************************\n         BAKR  R14,0              save regs\n         USING IEAMDBLG,R15\n         MODID ,                  eye catcher and date\n         L     R9,0(R1,0)          save parm addr\n         LM    R11,R12,BASES      get bases\n         L     R5,BASE3           get third base                   @04A\n         DROP  R15\n         USING IEAMDBLG,R11,R12,R5  address them                   @04C\n         B     BASESOK            skip over adcons\n         DC    CL8'ZOS170A'                                       <USR>\nBASES    DC    A(IEAMDBLG,IEAMDBLG+4096)\nBASE3    DC    A(IEAMDBLG+8192)                                    @04A\nBASESOK  LA    R13,SV             point R13 to save area\n         MVC   4(4,R13),=C'F1SA'  set acro in save area\n***********************************************************************\n* end linkage                                                         *\n***********************************************************************\n*\n***********************************************************************\n* Begin initialization                                                *\n***********************************************************************\n*\n***********************************************************************\n*  If COPY was specified, get end and start dates or calculate    @D2A*\n*  defaults, yesterday and \"oldest\" respectively.                 @D2A*\n*                                                                 @D2A*\n*  If DELETE was specified, get delete date.                      @D2A*\n*  If HCFORMAT was specified, set the appropriate flag.           @04A*\n***********************************************************************\n*\n*  R9 -> parm                                                      @D2A\n*\n*  Results:\n*    PFLAGS -- DELETE flag set if DELETE was specified,            @D2A\n*              COPY flag set if COPY was specified,                @D2A\n*              HCFORMAT flag set if HCFORMAT was specified,        @04A\n*              YEAR flag set if the HCFORMAT keyword was not       @04A\n*                   specified (YEAR is the default), or if         @04A\n*                   HCFORMAT(YEAR) was specified,                  @04A\n*              CENTURY flag set if HCFORMAT(CENTURY) was specified @04A\n*    MFLAGS - All flags initialized as off                         @01A\n*    SDATE - If COPY is specified, the specified starting date or  @D2C\n*            default to 1900001; otherwise zero                    @D2C\n*            COPY(ALL) copies all data in syslog format           <USR>\n*            COPY(MDB) copies all data in MDB format              <USR>\n*    EDATE - If COPY is specified, the day after the specified     @D2C\n*            ending date or default to today;otherwise zero        @D2C\n*    DDATE - If DELETE is specified, the day after the deletion    @D2C\n*            date; otherwise zero                                  @D2C\n*            DELETE(ALL) marks all MDBs for deletion              <USR>\n*    SSTCK, ESTCK, and DSTCK are the same dates in STCK format.\n*    COPYDAYS - If COPY(>nnn) is specified, the number of days     @D2A\n*            nnn; otherwise binary zero                            @D2A\n*    DELDAYS  - If DELETE(>nnn) is specified, the number of days   @D2A\n*            nnn; otherwise binary zero                            @D2A\n*    ALL   - Option for parameters COPY and DELETE. It stands for <USR>\n*            all MBDs in logstream since the oldest one to that   <USR>\n*            with same TOD of IEAMDBLG start time.                <USR>\n*    ENQ   - Requests IEAMDBLG to prevent other IEAMDBLG process  <USR>\n*            to run concurrently within the same Sysplex          <USR>\n*\n         MVI   ENQFLG,0            clear out serialization flag   <USR>\n         MVI   PFLAGS,0            clear out parm flags            @D2A\n         OI    PFLAGS,YEAR         Set the default flag if the         *\n                                   the HCFORMAT keyword is not         *\n                                   specified (YEAR is the default).    *\n                                                                   @04A\n         MVI   MFLAGS,0            clear out miscellaneous flags   @01A\n         XC    SDATE,SDATE         clear out start date\n         XC    EDATE,EDATE         clear out end date\n         XC    DDATE,DDATE         clear out del date\n         XC    COPYDAYS,COPYDAYS   clear out number of days        @D2A\n         XC    DELDAYS,DELDAYS     clear out number of days        @D2A\n         LH    R3,0(R9)            length of parm                  @D2A\n         LA    R9,2(R9)            get past length\n         CH    R3,=H'0'            is there a parm?                @D2A\n         BE    BADPARM             no, error (parm is required)    @D2A\n         CH    R3,=H'256'          is it too long (for TRT)?       @D2A\n         BNH   PLENOK              no, ok                          @D2A\nBADPARM  LA    R2,BADPMSG          point to parm error msg\n         BAS   R14,MESSR           display it\n         ABEND 1,DUMP              abend\nPLENOK   DS    0H                                                  @D2A\nPLOOP    DS    0H                                                  @D2A\n*        loop through parameter processing each entry              @D2A\n*        r9 = address of remaining parm                            @D2A\n*        r3 = length of remaining parm                             @D2A\n         LR    R14,R9              initial starting point          @D2A\nPLOOPR   DS    0H                                                  @D2A\n*        resume the scan                                           @D2A\n*        r14 = address of resume point                             @D2A\n         LA    R1,0(R3,R9)         point past parm (in case there  @D2AX\n                                   is no comma)                    @D2A\n         LR    R15,R1              end of parm + 1                 @D2A\n         SR    R15,R14             subtract start addr to get len  @D2A\n         BCTR  R15,0               subtract 1 to get machine len   @D2A\n         SR    R2,R2               clear reg. for character found  @D2A\n         EX    R15,TRT1            scan the parm; r1 will point to     X\n                                   comma or lt paren or end+1 of parm  X\n                                                                   @D2A\n         C     R2,ZLPAREN          did it stop on left paren?      @D2A\n         BNE   PSCANOK             no, ok                          @D2A\n*        scan to right paren                                       @D2A\n         LA    R15,0(R3,R9)        end of parm + 1                 @D2A\n         SR    R15,R1              subtract start addr to get len  @D2A\n         EX    R15,TRT2            scan to right paren             @D2A\n         BZ    BADPARM             error if not found              @D2A\n         LR    R14,R1              set resume address              @D2A\n         B     PLOOPR              resume the scan                 @D2A\nPSCANOK  DS    0H                                                  @D2A\n         LR    R4,R1               save pointer to comma or end    @D2A\n         SR    R4,R9               length of this parm entry       @D2A\n*                                                                  @D2A\n*        interpret and process a parm entry                        @D2A\n*        r9 = address of parm entry                                @D2A\n*        r4 = length of parm entry                                 @D2A\n         CH    R4,=H'3'            is length at least 3 (\"ENQ\")?  <USR>\n         BL    BADPARM             no, error                       @D2A\n         CLC   =C'COPY',0(R9)      is it COPY?                     @D2A\n         BNE   PNOTCOPY            no                              @D2A\n         TM    PFLAGS,COPY         was COPY already processed?     @D2A\n         BO    BADPARM             yes,error                       @D2A\n         OI    PFLAGS,COPY         set COPY flag                   @D2A\n         CH    R4,=H'5'            is length 5?                    @D2A\n         BL    PNEXT               length less than 5, must be 4,      X\n                                   'COPY', use defaults            @D2A\n         BE    BADPARM             length 5, error                 @D2A\n         CLI   4(R9),C'('          does it start with left paren?  @D2A\n         BNE   BADPARM             no, error                       @D2A\n         LA    R15,0(R4,R9)        end of parm + 1                 @D2A\n         BCTR  R15,0               end of parm                     @D2A\n         CLI   0(R15),C')'         does it end with right paren?   @D2A\n         BNE   BADPARM             no, error                       @D2A\n         CH    R4,=H'6'            is it 'COPY()'                  @D2A\n         BE    PNEXT               yes, use defaults               @D2A\n         CH    R4,=H'21'           are both dates given?           @D2A\n         BNE   PNOTBOTH            no, keep checking               @D2A\n         CLI   12(R9),C','         is there a comma?               @D2A\n         BNE   BADPARM             no, error                       @D2A\n         MVC   SDATE,5(R9)         save start date                 @D2A\n         MVC   EDATE,13(R9)        save end date                   @D2A\n         B     PNEXT               look for next entry             @D2A\nPNOTBOTH CH    R4,=H'9'            is it user defined             <USR>\n         BNE   PNOTALL             new format                     <USR>\n         CLC   =C'ALL',5(R9)       COPY(ALL)?                     <USR>\n         BNE   PCOPYMDB            no, seguir comprobando         <USR>\n         OI    PFLAGS,COPYALL      set COPY(ALL) flag             <USR>\n         B     PNEXT               look for next entry            <USR>\nPCOPYMDB CH    R4,=H'9'            is it user defined             <USR>\n         BNE   PNOTALL             new format                     <USR>\n         CLC   =C'MDB',5(R9)       COPY(MDB)?                     <USR>\n         BNE   BADPARM             no, error                      <USR>\n         OI    PFLAGS,COPYMDB      set COPY(MDB) flag             <USR>\n         B     PNEXT               look for next entry            <USR>\nPNOTALL  DS    0H                                                 <USR>\n         CH    R4,=H'13'           is it start all alone?          @D2A\n         BE    PSTART              yes, so save it\n         CH    R4,=H'14'           could it be one date w/comma?   @D2A\n         BNE   PCOPYND             no, must be \">nnn\"              @D2A\n         CLI   12(R9),C','         does it end with comma?         @D2A\n         BE    PSTART              yes, so it's \"start_date,\"\n         CLI   5(R9),C','          does it start with comma?       @D2A\n         BNE   BADPARM             no, error\n         MVC   EDATE,6(R9)         save end date                   @D2A\n         B     PNEXT               look for next entry             @D2A\nPSTART   MVC   SDATE,5(R9)         save start date                 @D2A\n         B     PNEXT               look for next entry             @D2A\nPCOPYND  DS    0H            must be COPY(>nnn)                    @D2A\n         CH    R4,=H'8'            is it too short?                @D2A\n         BL    BADPARM             yes, error                      @D2A\n         CH    R4,=H'10'           is it too long?                 @D2A\n         BH    BADPARM             yes, error                      @D2A\n         CLI   5(R9),C'>'          does it start with >?           @D2A\n         BNE   BADPARM             no, error                       @D2A\n*        save number of days, n thru nnn                           @D2A\n         MVC   COPYDAYS,=C'000'    initialize receiving field      @D2A\n         LR    R14,R4              get length of entry             @D2A\n         SH    R14,=H'8'           get length of number - 1        @D2A\n         LA    R15,COPYDAYS+2      end of receiving field          @D2A\n         SR    R15,R14             back up to correct position     @D2A\n         EX    R14,MVCCOPY         move in number of days          @D2A\n         B     PNEXT               look for next entry             @D2A\nPNOTCOPY DS    0H                                                  @D2A\n         CLC   =C'DELETE',0(R9)    is it DELETE?                   @D2A\n         BNE   PSERIAL             Check if serialization req'd    @04C\n         TM    PFLAGS,DELETE       was DELETE already processed?   @D2A\n         BO    BADPARM             yes,error                       @D2A\n         OI    PFLAGS,DELETE       set DELETE flag                 @D2A\n         CH    R4,=H'10'           is length 10 (the minimum)?     @P5C\n         BL    BADPARM             error if less than min          @D2A\n         CLI   6(R9),C'('          does it start with left paren?  @D2A\n         BNE   BADPARM             no, error                       @D2A\n         LA    R15,0(R4,R9)        end of parm + 1                 @D2A\n         BCTR  R15,0               end of parm                     @D2A\n         CLI   0(R15),C')'         does it end with right paren?   @D2A\n         BNE   BADPARM             no, error                       @D2A\n         CLC   =C'ALL',7(R9)       is it \"DELETE(ALL)\"            <USR>\n         BNE   PDELD               no, test another opcion        <USR>\n         OI    PFLAGS,DELEALL      set DELETE(ALL) flag           <USR>\n         B     PNEXT               look for next entry            <USR>\nPDELD    DS    0H                                                 <USR>\n         CH    R4,=H'15'           is it \"DELETE(yyyyddd)\"         @D2A\n         BNE   PDELND              no, must be \">nnn\"              @D2A\n         MVC   DDATE,7(R9)         save delete date                @D2A\n         B     PNEXT               look for next entry             @D2A\nPDELND   DS    0H            must be DELETE(>nnn)                  @D2A\n*              we already checked for minimum length               @D2A\n         CH    R4,=H'12'           is it too long?                 @D2A\n         BH    BADPARM             yes, error                      @D2A\n         CLI   7(R9),C'>'          does it start with >?           @D2A\n         BNE   BADPARM             no, error                       @D2A\n*        save number of days, n thru nnn                           @D2A\n         MVC   DELDAYS,=C'000'     initialize receiving field      @D2A\n         LR    R14,R4              get length of entry             @D2A\n         SH    R14,=H'10'          get length of number - 1        @D2A\n         LA    R15,DELDAYS+2       end of receiving field          @D2A\n         SR    R15,R14             back up to correct position     @D2A\n         EX    R14,MVCDEL          move in number of days          @D2A\n         B     PNEXT                                               @D2A\nPSERIAL  DS    0H                                                  @04A\n         CLC   =C'ENQ',0(R9)       is it ENQ?                     <USR>\n         BNE   CHKFRMT             Check if HCFORMAT is specified <USR>\n         TM    ENQFLG,ENQREQ       was  ENQ   already processed?  <USR>\n         BO    BADPARM             yes,error                      <USR>\n         OI    ENQFLG,ENQREQ       set ENQ flag                   <USR>\n         B     PNEXT\nCHKFRMT  DS    0H                                                  @04A\n         CLC   =C'HCFORMAT',0(R9)  is it HCFORMAT?                 @04A\n         BNE   BADPARM             no, error                       @04A\n         TM    PFLAGS,HCFORMAT     was HCFORMAT already processed? @04A\n         BO    BADPARM             yes,error                       @04A\n         OI    PFLAGS,HCFORMAT     set HCFORMAT flag               @04A\n         CH    R4,=H'14'           is length 14 (the minimum)?     @04A\n         BL    BADPARM             error if less than min          @04A\n         CLI   8(R9),C'('          does it start with left paren?  @04A\n         BNE   BADPARM             no, error                       @04A\n         LA    R15,0(R4,R9)        end of parm + 1                 @04A\n         BCTR  R15,0               end of parm                     @04A\n         CLI   0(R15),C')'         does it end with right paren?   @04A\n         BNE   BADPARM             no, error                       @04A\n         CH    R4,=H'14'           is it the right length for          X\n                                   \"HCFORMAT(YEAR)\"?               @04A\n         BNE   CHKCENT             No, check for \"HCFORMAT(CENTURY)\"   X\n                                                                   @04A\n         CLC   =C'YEAR',9(R9)      is it \"HCFORMAT(YEAR)\"          @04A\n         BNE   BADPARM             no, error                       @04A\n         B     PNEXT               look for next entry             @04A\nCHKCENT  DS    0H                                                  @04A\n         CH    R4,=H'17'           is it the right length for          X\n                                   \"HCFORMAT(CENTURY)\"?            @04A\n         BNE   BADPARM             no, error                       @04A\n         CLC   =C'CENTURY',9(R9)   is it \"HCFORMAT(CENTURY)\"       @04A\n         BNE   BADPARM             no, error                       @04A\n         OI    PFLAGS,CENTURY      Indicate that the output            *\n                                   should have a 4-digit year      @04A\n         B     PNEXT               look for next entry             @04A\nTRT1     TRT   0(*-*,R14),TRTTAB1  scan parm for comma or l. paren @D2A\nTRT2     TRT   0(*-*,R1),TRTTAB2   scan parm for r. paren          @D2A\nMVCCOPY  MVC   0(*-*,R15),6(R9)    move in number of days          @D2A\nMVCDEL   MVC   0(*-*,R15),8(R9)    move in number of days          @D2A\nPNEXT    DS    0H                                                  @D2A\n*        get to next parm entry                                    @D2A\n         A     R4,=F'1'            add comma to len of this entry  @D2A\n         AR    R9,R4               point to next entry             @D2A\n         SR    R3,R4               calculate remaining length      @D2A\n         BP    PLOOP               loop back until parm is done    @D2A\n*\nPARMDONE DS    0H   see if defaults are needed\n* Formato antiguo de TIME; se sustituye y hace compatible A2M.    <USR>\n*        TIME  ,                   get today's date                @D2A\n*        ST    1,DATEWORK          copy it\n*        AP    DATEWORK(4),=P'1900000' add to correct the century\n*        UNPK  TDATE,DATEWORK      convert and save today's date   @D2A\n*        OI    TDATE+6,C'0'        fix sign                        @D2A\n*                                                      Principio  <USR>\n         TIME  DEC,@TIMEDAT,LINKAGE=SYSTEM,                            X\n               DATETYPE=YYYYDDD         obtener la fecha de hoy\n         UNPK  @HIPL(9),@TIMEDAT(5)     convertir\n         UNPK  @FIPL(9),@TIMEDAT+8(5)   y guardar\n         MVC   TDATE(7),@FIPL+1         fecha y hora\n*                                                      Fin        <USR>\n*                                                                  @D2A\n*        check parameters                                          @D2A\n*                                                                  @D2A\n         TM    PFLAGS,COPY         was copy specified?             @D2A\n         BNO   PVDELETE            no, so see if delete            @D2A\n*                                                                  @D2A\n*        check for valid copy days                                 @D2A\n*                                                                  @D2A\n         NC    COPYDAYS,COPYDAYS   was copy days given?            @D2A\n         BZ    PNCOPYD             no, so check for dates          @D2A\n         LA    R15,L'COPYDAYS      length of copydays field        @D2A\nPCOPYDL  LA    R14,COPYDAYS-1(R15) position within copydays        @D2A\n         CLI   0(R14),C'0'         is character less than 0?       @D2A\n         BL    BADPARM             yes, error                      @D2A\n         CLI   0(R14),C'9'         is character greater than 9?    @D2A\n         BH    BADPARM             yes, error                      @D2A\n         BCT   R15,PCOPYDL         loop to check all chars         @D2A\n         PACK  DAYSWORK,COPYDAYS   convert to decimal              @D2A\n         PACK  DATEWORK,TDATE      get today's date                @D2A\n         SP    DATEWORK+2(2),DAYSWORK subtract days from today     @D2A\n         BAS   R14,FIXDATE         adjust for the year             @D2A\n         UNPK  EDATE,DATEWORK      save it as end date             @D2A\n         OI    EDATE+6,C'0'        fix sign                        @D2A\n         MVC   SDATE,=C'1900001'   set start date to earliest      @D2A\n         B     PVDELETE            go see if delete was specified  @D2A\nPNCOPYD  DS    0H   \">nnn\" was not specified                       @D2A\n*\n*        see if start date was given, get default if not\n*\n         CLC   SDATE,=XL7'00'      was start date given?\n         BE    PSTARTDF            no, so get default\n         LA    R9,SDATE            point to start date\n         BAS   R14,CHKDATE         see if it is valid\n         LTR   R15,R15             is date valid?\n         BNZ   BADPARM             error if not\n         B     PENDCK              check end date                  @D2A\n*\n*        get default start date of 1900001                         @D2A\n*\nPSTARTDF MVC   SDATE,=C'1900001'   Get default start date          @D2A\n*                                                                 <USR>\n*        Asigna end date para la opci\u00f3n COPY(ALL)                 <USR>\n*                                                                 <USR>\n         TM    PFLAGS,COPYALL      Se especific\u00f3 COPY(ALL|MDB)?   <USR>\n         BNO   PENDCK              No, ir a verificaciones        <USR>\n         MVC   EDATE,TDATE         Asignamos la fecha de hoy      <USR>\n         B     PENDOK              y se toma tal cual             <USR>\n*\n*        check for valid end date                                  @D2A\n*                                                                  @D2A\nPENDCK   CLC   EDATE,=XL7'00'      was end date given?             @D2A\n         BE    PENDDEF             no, so get default              @D2A\n         LA    R9,EDATE            point to end date               @D2A\n         BAS   R14,CHKDATE         see if it is valid              @D2A\n         LTR   R15,R15             is date valid?                  @D2A\n         BNZ   BADPARM             error if not                    @D2A\n         CLC   EDATE,TDATE         is it after today?              @D2A\n         BH    BADPARM             yes, error                      @D2A\n*                                                                  @D2A\n*        recalculate end date as the day after the given date      @D2A\n*                                                                  @D2A\n         PACK  DATEWORK,EDATE      convert end date to decimal     @D2A\n         AP    DATEWORK+2(2),=PL1'1' add 1 to day                  @D2A\n         BAS   R14,FIXDATE         adjust for the year             @D2A\n         UNPK  EDATE,DATEWORK      save it as end date             @D2A\n         OI    EDATE+6,C'0'        fix sign                        @D2A\n         B     PENDOK                                              @D2A\n*                                                                  @D2A\n*        set default end date as today                             @D2A\n*                                                                  @D2A\nPENDDEF  MVC   EDATE,TDATE         get today's date                @D2A\nPENDOK   DS    0H                                                  @D2A\n*\n*\n*\n         CLC   SDATE,EDATE         see if start date < end date    @D2A\n         BNL   BADPARM             error if not\n*                                                                  @D2A\n*        see if DELETE was specified                               @D2A\n*                                                                  @D2A\nPVDELETE DS    0H                                                  @D2A\n         TM    PFLAGS,DELETE       was delete specified?           @D2A\n         BNO   PDELOK              no, ok                          @D2A\n*                                                                  @D2A\n*        check for valid delete days                               @D2A\n*                                                                  @D2A\n         NC    DELDAYS,DELDAYS     was delete days given?          @D2A\n*        BZ    PNDELD              no, so check the given date    <USR>\n         BZ    PDELAL              no, check DELETE(ALL) function <USR>\n         LA    R15,L'DELDAYS       length of deldays field         @D2A\nPDELDL   LA    R14,DELDAYS-1(R15)  position within deldays         @D2A\n         CLI   0(R14),C'0'         is character less than 0?       @D2A\n         BL    BADPARM             yes, error                      @D2A\n         CLI   0(R14),C'9'         is character greater than 9?    @D2A\n         BH    BADPARM             yes, error                      @D2A\n         BCT   R15,PDELDL          loop to check all chars         @D2A\n         PACK  DAYSWORK,DELDAYS    convert to decimal              @D2A\n         PACK  DATEWORK,TDATE      get today's date                @D2A\n         SP    DATEWORK+2(2),DAYSWORK subtract days from today     @D2A\n         BAS   R14,FIXDATE         adjust for the year             @D2A\n         UNPK  DDATE,DATEWORK      save it as delete date          @D2A\n         OI    DDATE+6,C'0'        fix sign                        @D2A\n         B     PDELOK              done with DELETE                @D2A\n*\n*        Asigna delete date para la opci\u00f3n DELETE(ALL)            <USR>\n*                                                                 <USR>\nPDELAL   TM    PFLAGS,DELEALL      Se especific\u00f3 DELETE(ALL)?     <USR>\n         BNO   PNDELD              No, ir a verificaciones        <USR>\n         MVC   DDATE,TDATE         Se asigna fecha de hoy         <USR>\n         B     PDELOK              y se toma tal cual             <USR>\n*                                                                  @D2A\n*        check for valid delete date                               @D2A\n*                                                                  @D2A\nPNDELD   LA    R9,DDATE            point to delete date            @D2A\n         BAS   R14,CHKDATE         see if it is valid              @D2A\n         LTR   R15,R15             is date valid?                  @D2A\n         BNZ   BADPARM             error if not                    @D2A\n*                                                                  @D2A\n*        recalculate delete date as the day after the given date   @D2A\n*                                                                  @D2A\n         PACK  DATEWORK,DDATE      convert delete date to decimal  @D2A\n         AP    DATEWORK+2(2),=PL1'1' add 1 to day                  @D2A\n         BAS   R14,FIXDATE         adjust for the year             @D2A\n         UNPK  DDATE,DATEWORK      save it as delete date          @D2A\n         OI    DDATE+6,C'0'        fix sign                        @D2A\nPDELOK   DS    0H                                                  @D2A\n*                                                                  @D2A\n* convert dates to stck format                                     @D2A\n*                                                                  @D2A\n         LA    R3,SDATE            start date yyyyddd              @D2A\n         LA    R4,SSTCK            field for stck form             @D2A\n         BAS   R14,CONVSTCK        convert yyyyddd to stck format  @D2A\n         LA    R3,EDATE            end   date yyyyddd              @D2A\n         LA    R4,ESTCK            field for stck form             @D2A\n         TM    PFLAGS,COPYALL      Se especific\u00f3 COPY(ALL|MDB)    <USR>\n         BNO   CONTCONV            No, continuar                  <USR>\n         PACK  WORK5,@HIPL(9)      convertir  hora actual a stck  <USR>\n         MVC   CONVTIME,WORK5      move date                      <USR>\nCONTCONV DS    0H                                                 <USR>\n         BAS   R14,CONVSTCK        convert yyyyddd to stck format  @D2A\n         LA    R3,DDATE            delete date yyyyddd             @D2A\n         LA    R4,DSTCK            field for stck form             @D2A\n         TM    PFLAGS,DELEALL      Se especific\u00f3 DELETE(ALL)      <USR>\n         BNO   FINCONV             No, continuar                  <USR>\n         PACK  WORK5,@HIPL(9)      convertir  hora actual a stck  <USR>\n         MVC   CONVTIME,WORK5      move date                      <USR>\n         BAS   R14,CONVSTCK        convert yyyyddd to stck format  @D2A\n***********************************************************************\n* Before IEAMDBLG continues processing, check if serialization        *\n* has been requested. If so, try to get OPERLOG.IEAMDBLG resource     *\n* enqueued, and proceed. If serialization fails, program ends with    *\n* a RC=04.                                                            *\n***********************************************************************\nFINCONV  DS    0H                                                 <USR>\n         TM    ENQFLG,ENQREQ       Serialization requested?       <USR>\n         BNO   PROCEED                                            <USR>\n         ENQ   (MAJNAME,MINNAME,E,,SYSTEMS),RET=USE               <USR>\n         LTR   R15,R15                                            <USR>\n         BNZ   ENQERR                                             <USR>\n*                                                                 <USR>\n         OI    ENQFLG,ENQSUC       set ENQ succesfull flag        <USR>\n         B     PROCEED                                            <USR>\n*                                                                 <USR>\nENQERR   DS    0H                                                 <USR>\n*        WTO   '**IEAMDBLG** COULD NOT SERIALIZE'                 <USR>\n         SLR   R15,R15                                            <USR>\n         LA    R15,4                                              <USR>\n         B     ENDOFPGM                                           <USR>\n*                                                                 <USR>\nPROCEED  DS    0H                                                 <USR>\n***********************************************************************\n* Obtain a buffer area for logger record and set up its base          *\n***********************************************************************\n         STORAGE OBTAIN,LENGTH=STRBUFFL,BNDRY=PAGE get storage for buff\n         LR    R10,R1              save its address\n         USING STRBUFF,R10         addressability\n***********************************************************************\n* Obtain a buffer area for MDBBUF record and save its address     <USR>\n***********************************************************************\n         STORAGE OBTAIN,LENGTH=MDBBUFFL,BNDRY=PAGE get storage for buff\n         ST    R1,MDBBUFA          save its address\n***********************************************************************\n*\n***********************************************************************\n*  If COPY was specified, open the output file                     @03A\n*  Connect to the log stream                                          *\n*  If a recoverable error is detected, write it to the output file @03A\n***********************************************************************\n         TM    PFLAGS,COPY         was copy specified?             @03A\n         BNO   STARTCON            no, skip open, go to IXGCONN    @03A\n         TM    PFLAGS,COPYMDB      se especific\u00f3 COPY(MDB)        <USR>\n         BO    STARTCON            S\u00ed, no abrir OFILE             <USR>\n         OPEN  (OFILE,OUTPUT)      open the file                   @03M\n         C     R15,=F'8'           see if open worked              @03M\n         BL    OPENOK              continue if so                 <USR>\nOPENNOK  DS    0H                                                 <USR>\n         ABEND 3,DUMP                                              @03M\nOPENOK   DS    0H                                                  @03M\n         OI    MFLAGS,OPEN         Output file opened              @01A\nSTARTCON DS    0H                                                  @03A\n         MVC   LOGRMSGT,=CL10'IXGCONN-1' insert in case of error   @P6C\n         IXGCONN REQUEST=CONNECT,  connect to the log stream           X\n               AUTH=WRITE,                                             X\n               STREAMNAME=STRNAME,                                     X\n               STREAMTOKEN=STRTOKEN,                                   X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BE    CONNOK              yes, continue                   @D2A\n*\n*        error during connect\n*        see if it is \"possible loss of data\". If it is, write a   @01C\n*        message to the output file.                               @01A\n*                                                                  @D2A\n*        IXGRSNCODECONNPOSSIBLELOSSOFDATA = possible loss of data  @D2A\n*\n         L     R14,RSNCODE         get reason code                 @D2A\n         N     R14,=AL4(IXGRSNCODEMASK) AND it with logger mask    @D2A\n***********************************************************************\n*        IXGRSNCODEWOWWARNING and IXGRSNCODEDIRECTORYFULLWARNING   @02A\n*        would be errors on an actual write to the operlog, but    @02A\n*        they are conditions that can be ignored for IEAMDBLG      @02A\n***********************************************************************\n         C     R14,=AL4(IXGRSNCODEWOWWARNING) Write warning?       @02A\n         BE    CONNOK              Yes, ok, continue               @02A\n         C     R14,=AL4(IXGRSNCODEDSDIRECTORYFULLWARNING)  Is the\n*                                  directory full?                 @02A\n         BE    CONNOK              Yes, continue                   @02A\n         C     R14,=AL4(IXGRSNCODECONNPOSSIBLELOSSOFDATA) is it        X\n                                   possible loss of data?          @D2A\n         BNE   LOGRERR             no, connect error, abend        @01C\n         BAS   R14,GAPMSG          indicate data may be missing    @01A\n         B     CONNOK              continue                        @01A\n***********************************************************************\n*        LOGRERR is entered from several points in this module     @01A\n*        to write an error message to the issuing console and      @01A\n*        ABEND the program with a U0002 code.                      @01A\n***********************************************************************\nLOGRERR  DS    0H   error return code from a system logger request\n         UNPK  LOGRMRET(4),RETCODE+2(3) get return code\n         TR    LOGRMRET,HEXTAB     make it printable\n         MVI   LOGRMRET+3,C','     replace lost character\n         UNPK  LOGRMRSN(5),RSNCODE+2(3) get reason code\n         TR    LOGRMRSN,HEXTAB     make it printable\n         MVI   LOGRMRSN+4,C' '     replace lost character\n         LA    R2,LOGRMSG          point to error message\n         BAS   R14,MESSR           display it\n         TM    MFLAGS,OPEN         output file opened?             @01A\n         BNO   GODUMP              No, don't write to or close it  @01A\n         CLOSE OFILE               close output file               @01A\n         CLOSE MFILE               close output file              <USR>\n         NI    MFLAGS,X'FF'-OPEN   indicate file now closed        @01A\nGODUMP   DS    0H\n         ABEND 2,DUMP              abend\n***********************************************************************\n* End initialization                                                  *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n* Begin COPY                                                      @D2A*\n***********************************************************************\n*                                                                 @D2A*\n*  If COPY was specified:                                         @D2A*\n*                                                                 @D2A*\n*   Start a log stream browse session and position the log stream @D2A*\n*   to first record in the range                                  @D2A*\n*                                                                 @D2A*\n*   Copy loop:                                                    @D2A*\n*                                                                 @D2A*\n*    Read successive records from the stream, starting with the   @D2A*\n*    earliest record bearing the start date and ending with the   @D2A*\n*    latest record on or before the end date. Indicate if there   @01C*\n*    was a gap or deleted records immediately before the first    @01A*\n*    record to be printed with a special message to the output    @01A*\n*    file.                                                        @01A*\n*                                                                 @D2A*\n*    For each record (MDB) that is read:                          @D2A*\n*                                                                 @D2A*\n*     Get the general and CP objects                              @D2A*\n*                                                                 @D2A*\n*     Extract the fixed info                                      @D2A*\n*                                                                 @D2A*\n*     For every line (text object) in the message:                @D2A*\n*                                                                 @D2A*\n*      Write a syslog-format line to the output file              @D2A*\n*                                                                 @D2A*\n*      If line was too long, also write a continuation line       @D2A*\n*                                                                 @01A*\n*      If IXGBRWSE indicated records were missing between the     @01A*\n*      current and previous record (due to a gap or deleted       @01A*\n*      records) write a special message to the output file.       @01A*\n*                                                                 @D2A*\n*   End the log stream browse session                             @D2A*\n*                                                                 @D2A*\n*   Close the output file                                         @D2A*\n*                                                                 @D2A*\n*                                                                 @D2A*\n***********************************************************************\nCONNOK   DS    0H                                                  @01M\n         TM    PFLAGS,COPY         was copy specified?             @D2A\n         BNO   NOTCOPY             no, so skip it                  @D2A\n***********************************************************************\n*        issue BROWSE START to get browse session going\n*        and position to first record in range\n***********************************************************************\n         XC    RECCOUNT,RECCOUNT   zero record count\n         MVC   LOGRMSGT,=CL10'IXGBRWSE-1' insert in case of error  @P6C\n         IXGBRWSE REQUEST=START,                                       X\n               SEARCH=SSTCK,           start date                      X\n               GMT=NO,                 GMT   time                      X\n               BROWSETOKEN=BRWTOKEN,                                   X\n               STREAMTOKEN=STRTOKEN,                                   X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BE    FIRSTOK             yes, so we have starting position\n***********************************************************************\n*        error in BROWSE START\n*        see if it is just a gap in the stream, and continue if so @P6A\n*        see if there are just no records in range\n*                                                                  @02A\n*        If the return code was 8 or more, set flag to indicate    @02A\n*        IXGBRWSE REQUEST=END should be bypassed                   @02A\n*\n*        IXGRSNCODEWARNINGGAP = request successful but data missing@P6A\n*        IXGRSNCODEWARNINGDEL = request successful but records had @01A\n*                               been previously deleted            @01A\n*        IXGRSNCODEEOFGAP  = end of file due to gap                @01A\n*        IXGRSNCODEEOFDELETE = end of file because all subsequent  @01A\n*                              records previously deleted          @01A\n*        IXGRSNCODENOBLOCK = block does not exist\n*        IXGRSNCODELOSSOFDATAGAP = a section of data is            @01A\n*                               permanently missing                @01A\n*        IXGRSNCODELOSSOFDATAEOF = premature end of file due to    @01A\n*                               records permanently missing        @01A\n*        IXGRSNCODEEMPTYSTREAM = no records in stream. Issue       @03A\n*                            message MLG004I and exit program      @03A\n***********************************************************************\n         CLC   RETCODE,=AL4(IXGRETCODEERROR) RC of 8 or more?      @02A\n         BL    STARTOK             No,  REQUEST=START worked       @02A\n         OI    MFLAGS,NOBREND      Yes. Do not do REQUEST=END      @02A\nSTARTOK  DS    0H                                                  @02A\n         CLC   RETCODE,=AL4(IXGRETCODECOMPERROR) Logger error?     @02A\n*                                  (Return code 12 or higher)      @02A\n         BNL   LOGRERR             yes, close and return           @02A\n         L     R14,RSNCODE         get reason code\n         N     R14,=AL4(IXGRSNCODEMASK) and it with logger mask\n         C     R14,=AL4(IXGRSNCODEEMPTYSTREAM) empty log stream?   @03A\n         BNE   NOTEMPTY            no, continue checking           @03A\n         LA    R2,EMPTYSTM         point to info msg               @03A\n         BAS   R14,MESSR           display it                      @03A\n         B     COPYDONE            done with copy                  @03A\nNOTEMPTY DS    0H                                                  @03A\n         C     R14,=AL4(IXGRSNCODEWARNINGGAP) is it a gap?         @P6A\n         BE    GAPORDEL            YES, write message to output    @01A\n         C     R14,=AL4(IXGRSNCODEWARNINGDEL) records deleted?     @01A\n         BE    GAPORDEL            Yes, write message and quit     @01A\n         C     R14,=AL4(IXGRSNCODEEOFGAP) EOF because gap to end?  @01A\n         BE    GAPEOF\n         C     R14,=AL4(IXGRSNCODELOSSOFDATAGAP) records permanently\n*                                  missing?                        @01A\n         BE    GAPORDEL            Yes, write message              @01A\n         C     R14,=AL4(IXGRSNCODELOSSOFDATAEOF) premature end of @ile\n*                                  records permanently missing?    @01A\n         BE    GAPEOF              Yes, write message and quit     @01A\n         C     R14,=AL4(IXGRSNCODEEOFDELETE) EOF because all       @01A\n*                                  subsequent records deleted?     @01A\n         BNE   OPENOK2             no, continue checking           @01A\nGAPEOF   EQU   *                                                   @01A\n         OI    MFLAGS,REACHEOF     indicate end of file reached    @01A\nGAPORDEL EQU   *                                                   @01A\n         BAS   R14,GAPMSG          Write record to sysout file     @01A\n         TM    MFLAGS,REACHEOF     was end of file reached?        @01A\n         BO    COPYDONE            yes, done                       @01A\n         B     FIRSTOK             continue                        @01A\nOPENOK2  EQU   *                                                   @01A\n         C     R14,=AL4(IXGRSNCODENOBLOCK) is it block not found?\n         BNE   LOGRERR             no, display the error\n*        no records in range\n         LA    R2,EMPTYMSG         point to info msg\n         BAS   R14,MESSR           display it\n         B     COPYDONE            done with copy                  @D2C\nFIRSTOK  DS    0H\n*\n***********************************************************************\n* Begin copy loop                                                 @D2A*\n***********************************************************************\n*\n***********************************************************************\n*  Read successive records from the stream, starting with the         *\n*  earliest record bearing the start date and ending with the         *\n*  latest record on or before the end date                            *\n***********************************************************************\n*\nCOPYLOOP DS    0H                                                  @D2C\n***********************************************************************\n***********************************************************************\n*\n* get next record from log stream\n*\n         MVC   LOGRMSGT,=CL10'IXGBRWSE-2' insert in case of error  @P6C\n         IXGBRWSE REQUEST=READCURSOR, read next record                 X\n               BROWSETOKEN=BRWTOKEN,                                   X\n               BUFFER=STRBUFF,                                         X\n               BUFFLEN=STRBLEN,                                        X\n               DIRECTION=OLDTOYOUNG,                                   X\n               RETBLOCKID=CURRBLK,                                     X\n               TIMESTAMP=CURRSTCK,                                     X\n               STREAMTOKEN=STRTOKEN,                                   X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BE    READCOK             yes, continue\n***********************************************************************\n*        error in BROWSE READCURSOR\n*        see if it is just a gap in the stream, and continue if so\n*        see if we reached EOF and end if so                       @D2A\n*\n*        IXGRSNCODEWARNINGGAP = request successful but data missing\n*        IXGRSNCODEWARNINGDEL = request successful but records     @01A\n*                               were previously deleted            @01A\n*        IXGRSNCODEWARNINGLOSSOFDATA = request successful but data\n*                               missing due to environment error   @02A\n*        IXGRSNCODEEOFGAP     = EOF because all subsequent records @01A\n*                               unavailable due to gap             @01A\n*        IXGRSNCODEEOFDELETE  = reached EOF because subsequent     @01C\n*                               records previously deleted         @01A\n*        IXGRSNCODEENDREACHED = reached EOF                        @D2A\n*        IXGRSNCODELOSSOFDATAGAP = records permanently missing     @01A\n*        IXGRSNCODELOSSOFDATAEOF = premature end of file due to    @01A\n*                               records permanenely missing        @01A\n***********************************************************************\n         L     R14,RSNCODE         get reason code\n         N     R14,=AL4(IXGRSNCODEMASK) and it with logger mask\n         C     R14,=AL4(IXGRSNCODEWARNINGGAP) is it a gap?\n         BE    READCOKG            yes, note that                  @01C\n         C     R14,=AL4(IXGRSNCODEWARNINGDEL) Records deleted?     @01A\n         BE    READCOKG            yes, note that                  @01A\n         C     R14,=AL4(IXGRSNCODEWARNINGLOSSOFDATA) Records deleted\n*                                  due to environmental error?     @02A\n         BE    READCOKG            yes, note that                  @02A\n         C     R14,=AL4(IXGRSNCODEEOFGAP) is it EOF because        @01A\n*                                  gap until end of file?          @01A\n         BE    SETEOFLG            yes, note that                  @01A\n         C     R14,=AL4(IXGRSNCODEEOFDELETE) is it EOF because     @01C\n*                                  subsequent records deleted?     @01A\n         BE    SETEOFLG            yes, note that                  @01C\n         C     R14,=AL4(IXGRSNCODEENDREACHED) is it EOF?           @D2A\n         BE    COPYDONE            yes, done                       @D2A\n         C     R14,=AL4(IXGRSNCODELOSSOFDATAGAP) records permanently\n*                                  missing?                        @01A\n         BE    READCOKG            Yes, note that                  @01A\n         C     R14,=AL4(IXGRSNCODELOSSOFDATAEOF) premature end of\n*                                  file due to records permanently\n*                                  missing?                        @01A\n         BNE   LOGRERR             no, display the error           @01A\nSETEOFLG EQU   *                                                   @01A\n         OI    MFLAGS,REACHEOF     indicate EOF reached            @01A\nREADCOKG EQU   *                                                   @01A\n         BAS   R14,GAPMSG          Write record to sysout file     @01A\n         TM    MFLAGS,REACHEOF     EOF reached?                    @01A\n         BNZ   COPYDONE            yes, done                       @01A\nREADCOK  DS    0H\n*\n* readcursor worked; see if we are past the end date               @D2C\n*\n         CLC   CURRSTCK+8(8),ESTCK   are we at the end?            @P1C\n         BL    NOTEND              no, ok\n         CLC   RECCOUNT,=F'0'      was this the first read?\n         BNE   COPYDONE            no, so copy is done             @D2C\n*\n* show no records processed\n*\n         LA    R2,EMPTYMSG         point to info msg\n         BAS   R14,MESSR           display it\n         B     COPYDONE            done with copy                  @D2C\nNOTEND   DS    0H\n*\n* increment record count\n*\n         L     R15,RECCOUNT        get record count\n         A     R15,=F'1'           add 1\n         ST    R15,RECCOUNT        store new count\n*\n***********************************************************************\n*  For each record (MDB) that is read:                                *\n*     Get the general and CP objects                                  *\n*     Extract the fixed info                                          *\n*     For every line (text object) in the message                     *\n*        Write a syslog-format line to the output file                *\n*        If line was too long, also write a continuation line         *\n***********************************************************************\nSTARTMDB LR    R8,R10              point to mdb in buffer\n         USING MDB,R8\n         MVI   FLAGS1,0            clear processing flags\n*                                                                 <USR>\n* A\u00a6adido para copiar el MDB a MDBLOG                             <USR>\n*                                                                 <USR>\n         TM    PFLAGS,COPYMDB      Se especific\u00f3 COPY(MDB)        <USR>\n         BNO   NCOPYMDB            No, continuar la copia         <USR>\n         TM    FLAGS2,MDBALDIN     Se cre\u00f3 ya MFILE?              <USR>\n         BNO   ALDINNO             Si no, ir a ALDINNO            <USR>\n         B     ALDINOK             en caso contrario, ALDINOK     <USR>\nALDINNO  BAS   R14,MDBDYN          ir a MDBDYN                    <USR>\n*                                                                 <USR>\nALDINOK  DS    0H                                                 <USR>\n         PUT   MFILE,(R8)          PUT THE MDB RECORD             <USR>\n         B     COPYLOOP            continuamos con el             <USR>X\n                                   siguiente                      <USR>\n*                                                                 <USR>\nNCOPYMDB DS    0H                                                 <USR>\n*                                                                 <USR>\n         MVC   LOGBUF(128),=CL128' '  clear out log record         @04C\n         LR    R6,R8               calc end of mdb in R6\n         AH    R6,MDBLEN           start+mdblen in header\n         LA    R7,MDBHLEN(0,R8)    address of first object\n         CR    R7,R6               see if this is the end\n         BNL   COPYLOOP            get another MDB if so (no           X\n                                   objects)                        @D2C\n         DROP  R8\n         USING MDB,R7\n*\n* scan MDB objects looking for general and CP objects, and\n* save syslog information from them\n*\nOBJLP    DS    0H                  loop through the objects\n         LH    R3,MDBTYPE          get type\n         C     R3,=A(MDBGOBJ)      check for general object\n         BNE   NOTG                not general object\n         TM    FLAGS1,FLAGGO       see if first general object\n         BO    NXTOBJ              no, skip it\n         OI    FLAGS1,FLAGGO       show general object was found\n         USING MDBG,R7             addressability to general object\n***********************************************************************\n* Move general object fields into log record or save them\n***********************************************************************\n         BAS   R14,GENINFO         Fill in the appropriate fields      X\n                                   in the log record from the MDB      X\n                                   general object                  @04A\n         MVC   JOBNAME,MDBGJBNM    save job name\n         SR    R15,R15             clear a reg\n         ICM   R15,7,MDBGSEQ       message sequence number\n         CVD   R15,DBLWD           convert to decimal\n         UNPK  MLID,DBLWD          save low 3 digits as ebcdic         X\n                                   multiline id\n         OI    MLID+2,C'0'         make it printable\n         B     NXTOBJ              bump to next object\n*\nNOTG     DS    0H\n         C     R3,=A(MDBCOBJ)      check for control prog object\n         BNE   NXTOBJ              not control prog object, get next\n         TM    FLAGS1,FLAGCO       see if first control prog object\n         BO    NXTOBJ              no, skip it\n         USING MDBSCP,R7           addressability to ctl prog object\n         CLC   MDBCPNAM,=C'MVS '   make sure it is an MVS object\n         BNE   NXTOBJ              if not, just skip cp object\n         CLC   MDBCVER,=AL4(MDBCVER5) see if it's the right version\n         BL    COPYLOOP            skip MDB if not                 @D2C\n         OI    FLAGS1,FLAGCO       set processed control prog object\n***********************************************************************\n* Move control pgm object fields into log record or save them\n*\n* set up record type\n***********************************************************************\n         BAS   R14,CPINFO          Fill in the appropriate fields      X\n                                   in the log record from the MDB      X\n                                   CP object                       @04A\n***********************************************************************\n* save console id, console name, MCS flags, and descriptors        @P4C\n***********************************************************************\n         MVC   CONSID,MDBCCNID     save console id\n         MVC   CONSNAME,MDBCCNNM   save console name               @D1A\n         MVC   MCSFLAGS,MDBCMCSF   save MCS flags                  @D1A\n         MVC   DESCS,MDBCDESC      save descriptor codes           @P4A\n***********************************************************************\n* remember whether this is a WTL\n***********************************************************************\n         MVI   WTLFLAG,C'N'        assume not wtl\n         TM    MDBCMSC2,MDBCWTL    is it a wtl?\n         BNO   NXTOBJ              no, ok\n         MVI   WTLFLAG,C'Y'        show it's a wtl\n***********************************************************************\nNXTOBJ   DS    0H                  find next object\n***********************************************************************\n         TM    FLAGS1,FLAGGO+FLAGCO see if we found general and SCP\n         BO    FNDTXT              got them, loop through text objs\n         USING MDB,R7\n         AH    R7,MDBLEN           bump to next object\n         CR    R7,R6               see if this is the end\n         BL    OBJLP               no, process this object\n         B     COPYLOOP            missing necessary objects,          X\n                                   skip it                         @D2C\n         DROP  R7\n***********************************************************************\n* find text objects, convert them to syslog records\n***********************************************************************\nFNDTXT   DS    0H\n         LA    R7,MDBHLEN(0,R8)    address of first object\n         CR    R7,R6               see if this is the end\n         BNL   COPYLOOP            get another MDB if so               X\n                                   objects)                        @D2C\n         USING MDB,R7\n***********************************************************************\n* fill in jobname/consname field\n***********************************************************************\n         BAS   R14,JOBINFO         Fill in jobname/consname field  @04A\n*\n* scan MDB looking for text objects\n*\n***********************************************************************\nTOBJLP   CLC   MDBTYPE,=AL2(MDBTOBJ) check for text object\n         BNE   NXTTOBJ             not text object, try next\n***********************************************************************\n* text object - convert it to syslog record and PUT it to the file\n*\n***********************************************************************\n         USING MDBT,R7             addressability to text object\n***********************************************************************\n* calculate length of text in R2\n***********************************************************************\n         LH    R2,MDBTLEN          get text object length\n         S     R2,=A(MDBTMSGT-MDBTLEN) subtract non-text size\n         BNP   NXTTOBJ             skip it if length is zero or less\n         LA    R3,MDBTMSGT         get address of text\n         CLI   WTLFLAG,C'Y'        is it a wtl?\n         BNE   NOTWTL              no, skip to the non-wtl case\n***********************************************************************\n*\n* message came from a wtl\n*\n* PUT only the text (no control info) from the first line\n*\n***********************************************************************\n         CH    R2,=H'128'          does text length exceed max?\n         BNH   WTLLOK              no, ok\n         LA    R2,128              set it to max\nWTLLOK   S     R2,=F'1'            subtract 1 for mvc\n         BM    COPYLOOP            skip it if negative (length < 1)@D2C\n         EX    R2,WTLMV            move in the text\n         LA    R2,5(0,R2)          add for RDW and get back the 1\n         STH   R2,LOGBUFL          set record length               @P4C\n*                                                                 3@P8D\n         PUT   OFILE,LOGBUFP       PUT the WTL record              @P8C\n*                                                                 4@P8D\n         B     COPYLOOP            get next MDB                    @D2C\nWTLMV    MVC   LOGBUF(*-*),0(R3)   executed above\n*\nNOTWTL   DS    0H\n***********************************************************************\n* not a wtl\n*\n***********************************************************************\n         BAS   R14,PROCLINE        Process text line               @04A\n*\n* bump to next object\n*\nNXTTOBJ  DS    0H\n         USING MDB,R7\n         AH    R7,MDBLEN           bump to next object\n         CR    R7,R6               see if this is the end\n         BL    TOBJLP              no, look at this object\n         DROP  R7\n         B     COPYLOOP            done with this mdb; get next    @D2C\n*\n***********************************************************************\n* End copy loop                                                   @D2C*\n***********************************************************************\nCOPYDONE DS    0H                                                  @D2A\n***********************************************************************\n*  If the return code from IXGBRWSE REQUEST=START had an error,    @02A\n*  \"do not perform REQUEST=END\" bit will have been set.            @02A\n***********************************************************************\n         TM    MFLAGS,NOBREND      Bypass REQUEST=END?             @02A\n         BO    SHUTFILE            Yes, continue to shut file      @02A\n***********************************************************************\n*  End the log stream browse session                                  *\n***********************************************************************\n         MVC   LOGRMSGT,=CL10'IXGBRWSE-3' insert in case of error  @P6C\n         IXGBRWSE REQUEST=END,                                         X\n               BROWSETOKEN=BRWTOKEN,                                   X\n               STREAMTOKEN=STRTOKEN,                                   X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BNE   LOGRERR             no, display error\n*\n***********************************************************************\n*  Close the output file                                              *\n***********************************************************************\nSHUTFILE DS    0H                                                  @02A\n         NI    MFLAGS,X'FF'-NOBREND  Reset bit for DELETE's use    @02A\n         CLOSE OFILE\n         CLOSE MFILE                                              <USR>\n***********************************************************************\n*  *START* ARRANQUE DE RUTINA INVESTIGADORA DEL LOG               @D2A*\n*  2004-03-02  SE SUSTITUYE EL ARRANQUE DE ESTA RUTINA SECUNDARIA @D2A*\n*              POR LA GRABACION DE UN FICHERO TEMPORAL QUE SERA   @D2A*\n*              LEIDO EN UN PASO POSTERIOR POR EL LOOGERSF         @D2A*\n***********************************************************************\n         OPEN      (FIOPERL,(OUTPUT))\n         PUT       FIOPERL\n         MVC       0(44,R1),$DATOSA1+4\n         MVI       45(R1),C' '\n         MVC       46(35,R1),45(R1)\n         CLOSE     (FIOPERL)\n***********************************************************************\n*  *END*   ARRANQUE DE RUTINA INVESTIGADORA DEL LOG               @D2A*\n***********************************************************************\n***********************************************************************\n* End COPY                                                        @D2A*\n***********************************************************************\nNOTCOPY  DS    0H                                                  @D2A\n***********************************************************************\n* Begin DELETE                                                    @D2A*\n***********************************************************************\n*                                                                 @D2A*\n*  If delete was specified:                                       @D2A*\n*                                                                 @D2A*\n*   Start a log stream browse session and position the log stream @D2A*\n*   to oldest record to be kept                                   @D2A*\n*                                                                 @D2A*\n*   Delete all records prior to that position                     @D2A*\n*                                                                 @D2A*\n*   End the log stream browse session                             @D2A*\n*                                                                 @D2A*\n***********************************************************************\n         TM    PFLAGS,DELETE       was delete specified?           @D2A\n         BNO   NOTDEL              no, skip                        @D2A\n* start browse session                                             @D2A\n         MVC   LOGRMSGT,=CL10'IXGBRWSE-4' insert in case of error  @P6C\n         IXGBRWSE REQUEST=START,                                       X\n               SEARCH=DSTCK,           deletion date                   X\n               GMT=NO,                 GMT   time                      X\n               BROWSETOKEN=BRWTOKEN,                                   X\n               STREAMTOKEN=STRTOKEN,                                   X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE                                     @D2A\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BE    DPOINTOK            yes, so we have deletion point  @D2A\n*                                                                  @D2A\n*        error in BROWSE START                                     @D2A\n*        see if it is just a gap in the stream, and continue if so @P6A\n*        see if there are just no records after deletion date      @D2A\n*                                                                  @D2A\n*        If the return code is 8 or more, set flag indicating      @02A\n*        IXGBRWSE REQUEST=END should not be performed              @02A\n*                                                                  @02A\n*        IXGRSNCODEDIRECTGORYFULLWARNING = directory full          @02A\n*        IXGRSNCODEEMPTYSTREAM = no records in log stream          @02A\n*        IXGRSNCODEWARNINGGAP = request successful but data missing@P6A\n*        IXGRSNCODEWARNINGDEL = records have been deleted          @01A\n*        IXGRSNCODEEOFGAP = EOF because subsequent records not     @01A\n*                           available due to gap                   @01A\n*        IXGRSNCODEEOFDELETE = EOF because subsequent records      @01A\n*                           previously deleted                     @01A\n*        IXGRSNCODENOBLOCK = block does not exist                  @D2A\n*        IXGRSNCODELOSSOFDATAGAP = records permanently missing     @01A\n*        IXGRSNCODELOSSOFDATAEOF = premature end of file due to    @01A\n*                             records permanently missing          @01A\n*        IXGRSNCODEWARNINGLOSSOFDATA = loss of data situation      @P7A\n*                                                                  @D2A\n         CLC   RETCODE,=AL4(IXGRETCODEERROR) RC 8 or more?         @02A\n         BL    STARTOKD            Yes, continue                   @02A\n         OI    MFLAGS,NOBREND      No, do not do REQUEST=END       @02A\nSTARTOKD DS    0H                                                  @02A\n         CLC   RETCODE,=AL4(IXGRETCODECOMPERROR) Logger error?     @02A\n         BE    LOGRERR             Yes, close and return           @02A\n         L     R14,RSNCODE         get reason code                 @D2A\n         N     R14,=AL4(IXGRSNCODEMASK) and it with logger mask    @D2A\n         C     R14,=AL4(IXGRSNCODEDSDIRECTORYFULLWARNING)  Is the\n*                                  directory full?                 @02A\n         BE    DPOINTOK            Yes, ok, we have deletion pt.   @02A\n         C     R14,=AL4(IXGRSNCODEEMPTYSTREAM) Log stream empty?   @02A\n         BE    DELDONE             Yes, nothing to delete          @02A\n         C     R14,=AL4(IXGRSNCODEWARNINGGAP) is it a gap?         @P6A\n         BE    DPOINTOK            yes, so we have deletion point  @P6A\n         C     R14,=AL4(IXGRSNCODEWARNINGDEL) records deleted?     @01A\n         BE    DPOINTOK            yes, so we have deletion point  @01A\n         C     R14,=AL4(IXGRSNCODEEOFGAP) is it EOF because of a   @01A\n*                                  gap in records to the end?      @01A\n         BE    DELALL              yes, delete all records         @01A\n         C     R14,=AL4(IXGRSNCODEEOFDELETE) is it EOF because of  @01A\n*                                  deleted records?                @01A\n         BE    DELALL              yes, delete all records         @01A\n         C     R14,=AL4(IXGRSNCODELOSSOFDATAGAP) is it records\n*                                  permanently lost?               @01A\n         BE    DPOINTOK            yes, so we have deletion point  @01A\n         C     R14,=AL4(IXGRSNCODELOSSOFDATAEOF) premature end of @ile\n*                                  from records permanently lost?  @01A\n         BE    DELALL              yes, delete all records         @01A\n         C     R14,=AL4(IXGRSNCODEWARNINGLOSSOFDATA) loss of data? @P7A\n         BE    DELALL              yes, delete all records         @P7A\n         C     R14,=AL4(IXGRSNCODENOBLOCK) is it block not found?  @D2A\n         BNE   LOGRERR             no, display the error           @D2A\n*        no records after deletion date - delete them all          @D2A\nDELALL   EQU   *                                                   @01A\n         MVC   LOGRMSGT,=CL10'IXGDELET-1' insert in case of error  @P6C\n         IXGDELET STREAMTOKEN=STRTOKEN, delete records                 X\n               BLOCKS=ALL,                                             X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE                                     @D2A\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BNE   LOGRERR             no, display error               @D2A\n         B     DELDONE             done with delete                @D2A\n*        delete by blockid                                         @D2A\nDPOINTOK MVC   LOGRMSGT,=CL10'IXGBRWSE-5' insert in case of error  @P6C\n         IXGBRWSE REQUEST=READCURSOR, get block id of next record      X\n               BROWSETOKEN=BRWTOKEN,                                   X\n               BUFFER=STRBUFF,                                         X\n               BUFFLEN=STRBLEN,                                        X\n               DIRECTION=OLDTOYOUNG,                                   X\n               RETBLOCKID=DELBLK,                                      X\n               STREAMTOKEN=STRTOKEN,                                   X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE                                     @D2A\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BE    DPOINTDL            yes, continue                   @P6A\n         L     R14,RSNCODE         get reason code                 @P6A\n         N     R14,=AL4(IXGRSNCODEMASK) and it with logger mask    @P6A\n         C     R14,=AL4(IXGRSNCODEWARNINGGAP) is it a gap?         @P6A\n         BE    DPOINTDL            yes, continue                   @01A\n         C     R14,=AL4(IXGRSNCODEWARNINGLOSSOFDATA) Records lost due\n*                                  to environmental error?         @02A\n         BE    DPOINTDL            yes, continue                   @02A\n         C     R14,=AL4(IXGRSNCODELOSSOFDATAGAP) records permanently\n*                                  lost?                           @01A\n         BE    DPOINTDL            yes, continue                   @01A\n         C     R14,=AL4(IXGRSNCODEWARNINGDEL) records deleted?     @01A\n         BNE   LOGRERR             no, display error               @D2A\nDPOINTDL MVC   LOGRMSGT,=CL10'IXGDELET-2' insert in case of error  @P6C\n         IXGDELET STREAMTOKEN=STRTOKEN, delete records                 X\n               BLOCKS=RANGE,                                           X\n               BLOCKID=DELBLK,                                         X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BNE   LOGRERR             no, display error\nDELDONE  DS    0H\n         TM    MFLAGS,NOBREND        Bypass REQUEST=END?           @02A\n         BO    NOTDEL                Yes                           @02A\n         MVC   LOGRMSGT,=CL10'IXGBRWSE-6' insert in case of error  @P6C\n         IXGBRWSE REQUEST=END,                                         X\n               BROWSETOKEN=BRWTOKEN,                                   X\n               STREAMTOKEN=STRTOKEN,                                   X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE                                     @D2A\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BE    NOTDEL              yes, begin cleanup              @P9C\n***********************************************************************\n*        Check for acceptable nonzero return/reason code           @P9A\n*        combinations, including                                   @P9A\n*        RC8/RS0804 - IXGRSNCODENOBLOCK - no block identifier      @P9A\n***********************************************************************\n         CLC   RETCODE,=AL4(IXGRETCODEERROR) Return Code 8?        @P9A\n         BNE   LOGRERR             no, display error               @P9A\n         CLC   RSNCODE,=AL4(IXGRSNCODENOBLOCK) no block id?        @P9A\n         BE    NOTDEL              yes, this condition is ok       @P9A\n         BNE   LOGRERR             no, display error               @D2A\n***********************************************************************\n* End DELETE                                                      @D2A*\n***********************************************************************\nNOTDEL   DS    0H                                                  @D2A\n***********************************************************************\n* Begin Cleanup                                                   @D2A*\n***********************************************************************\n*                                                                 @D2A*\n*  Disconnect from the log stream                                 @D2A*\n*                                                                 @D2A*\n*  Free the buffer area                                           @D2A*\n*                                                                 @D2A*\n*  Exit                                                           @D2A*\n*                                                                 @D2A*\n***********************************************************************\n         MVC   LOGRMSGT,=CL10'IXGCONN-2' insert in case of error   @P6C\n         IXGCONN REQUEST=DISCONNECT, disconnect from the log stream    X\n               STREAMTOKEN=STRTOKEN,                                   X\n               ANSAREA=ANSAREA,                                        X\n               ANSLEN=ANSLEN,                                          X\n               RETCODE=RETCODE,                                        X\n               RSNCODE=RSNCODE\n         CLC   RETCODE,=AL4(IXGRETCODEOK) did it work ok?          @P6C\n         BNE   LOGRERR             no, display error\n*\n         STORAGE RELEASE,LENGTH=STRBUFFL,ADDR=(R10) free the buffer\n*\n         L     R10,MDBBUFA\n         STORAGE RELEASE,LENGTH=MDBBUFFL,ADDR=(R10) free the buffer\n*\nCHECKDEQ DS    0H\n         TM    ENQFLG,ENQSUC                                      <USR>\n         BNO   ENDOFPGM                                           <USR>\n         MVC   @TIEMPOW,KDEFECTO   <> Forcing a delay             <USR>\n         STIMER WAIT,DINTVL=@TIEMPOW                              <USR>\n         DEQ   (MAJNAME,MINNAME,,SYSTEMS),RET=NONE                <USR>\nENDOFPGM DS    0H                                                 <USR>\n         PR    ,                   exit\n*\n***********************************************************************\n* End cleanup                                                         *\n***********************************************************************\n*\n***********************************************************************\n* Begin subroutines                                                   *\n***********************************************************************\n*\n***********************************************************************\n* CHKDATE - validate start/end date                                   *\n*                                                                     *\n*   Input:                                                            *\n*     R9 -> date presumably in the form yyyyddd                       *\n*     R14 = return address                                            *\n*                                                                     *\n*   Output:                                                           *\n*     if date is valid, set r15 = 0, otherwise set r15 = nonzero      *\n***********************************************************************\nCHKDATE  LA    R15,1(0,0)          assume date is invalid\n         TRT   0(7,R9),NUMTAB      scan for numbers\n         BNZR  R14                 not all numbers, exit\n         PACK  DATEWORK,0(7,R9)    pack the date\n         CP    DATEWORK+2(2),=P'366'    is it gt 366?\n         BHR   R14                 yes, error\n         BE    CHKDLEAP            366, must be a leap year\n         CP    DATEWORK+2(2),=P'1' is it lt 1?\n         BLR   R14                 yes, error\n         SR    R15,R15             show date is valid\n         BR    R14                 exit\n*        day is 366 -- make sure it's a leap year\n* Rutina de verificaci\u00f3n de bisiestos obsoleta y sustituida       <USR>\n*HKDLEAP SRP   DATEWORK,64-3,0     shift out ddd\n*        DP    DATEWORK,=PL1'4'    divide year by 4\n*        CP    DATEWORK+3(1),=P'0' see if remainder is zero\n*        BNER  R14                 exit if not, error\nCHKDLEAP TM    TDATE+1,X'01'       ES ANO IMPAR?                  <USR>\n         BO    R14                 SI, NO ES BISIESTO: error.     <USR>\n         TM    TDATE+1,X'12'       ES DIVISIBLE POR CUATRO        <USR>\n         BM    R14                 NO, NO ES BISIESTO: error.     <USR>\n         CLI   TDATE+1,X'00'       ACABADO EN '00'                <USR>\n         BNE   R14                 NO, ANO BISIESTO: error.       <USR>\n         TM    TDATE,X'01'         CENTENA IMPAR ?                <USR>\n         BO    R14                 SI, NO ES BISIESTO: error.     <USR>\n         TM    TDATE,X'12'         DIVISIBLE POR CUATROCI.        <USR>\n         BM    R14                 NO, DEVOLVER CONTROL: error.   <USR>\n         SR    R15,R15             show date is valid\n         BR    R14                 exit\n*\n***********************************************************************\n* FIXDATE - adjust year after adding / subtracting days           @D2A*\n*                                                                 @D2A*\n*   Input:                                                        @D2A*\n*     WORKDATE = date in the form yyyyddd packed; day may be zero @D2A*\n*                or less, or over 365 (366 for leap years)        @D2A*\n*     R14 = return address                                        @D2A*\n*                                                                 @D2A*\n*   Output:                                                       @D2A*\n*     None; date in WORKDATE is adjusted to correct year and day  @D2A*\n***********************************************************************\nFIXDATE  DS    0H                                                  @D2A\n         MVC   DATEWRK1,DATEWORK   copy date                       @D2A\n         OI    DATEWRK1+3,X'0F'    force sign positive             @D2A\n         SRP   DATEWRK1,64-3,0     shift out ddd                   @D2A\n         NC    DATEWORK,=X'0000FFFF' zero out year in datework     @D2A\nFIXDBACK DS    0H   back up year if day is zero or less            @D2A\n         CP    DATEWORK,=PL1'0'    is the day zero?                @D2A\n         BH    FIXDFWD             >0, ok                          @D2A\n*        day is 0 or less; adjust day and back up to previous year @D2A\n         AP    DATEWORK,=P'365'    adjust day                      @D2A\n         SP    DATEWRK1,=PL1'1'    subtract 1 from year            @D2A\n*        if leap year, add 1 to day                                @D2A\n         MVC   DATEWRK2,DATEWRK1   copy the year                   @D2A\n         DP    DATEWRK2,=PL1'4'    divide by 4                     @D2A\n         CP    DATEWRK2+3(1),=PL1'0' is remainder zero (leap yr)?  @D2A\n         BNE   FIXDBACK            no, not leap year,loop          @D2A\n         AP    DATEWORK,=PL1'1'    add 1 to day                    @D2A\n         B     FIXDBACK            loop                            @D2A\nFIXDFWD  DS    0H   add to year if day is over 365 (366 if leap yr)@D2A\n         MVC   DATEWRK2,DATEWRK1   copy the year                   @D2A\n         DP    DATEWRK2,=PL1'4'    divide by 4                     @D2A\n         CP    DATEWRK2+3(1),=PL1'0' is remainder zero (leap yr)?  @D2A\n         BE    FIXDFWDL            yes                             @D2A\n*        not leap year                                             @D2A\n         CP    DATEWORK,=PL2'365'  is day over 365?                @D2A\n         BNH   FIXDDONE            no, done                        @D2A\n         SP    DATEWORK,=PL2'365'  subtract 365 from day           @D2A\nFIXDFWDA AP    DATEWRK1,=PL1'1'    add 1 to year                   @D2A\n         B     FIXDFWD             loop back                       @D2A\n*        leap year                                                 @D2A\nFIXDFWDL CP    DATEWORK,=PL2'366'  is day over 366?                @D2A\n         BNH   FIXDDONE            no, done                        @D2A\n         SP    DATEWORK,=PL2'366'  subtract 366 from day           @D2A\n         B     FIXDFWDA            add to year                     @D2A\nFIXDDONE SRP   DATEWRK1,3,0        adjust year to form yyyyddd     @D2A\n         AP    DATEWORK,DATEWRK1   add year back in                @D2A\n         BR    R14                 exit                            @D2A\n*                                                                  @D2A\n***********************************************************************\n* CONVSTCK -Convert date from yyyyddd to stck format              @D2A*\n*                                                                 @D2A*\n*   Input:                                                        @D2A*\n*     R3 -> date to convert, yyyyddd packed                       @D2A*\n*     R4 -> field to hold STCK format date                        @D2A*\n*     R14 = return address                                        @D2A*\n*                                                                 @D2A*\n*   Output:                                                       @D2A*\n*     None; converted date is stored at address in R4.            @D2A*\n*     Branches to BADPARM if conversion fails.                    @D2A*\n*     Returns with no change if input date is binary zero.        @D2A*\n***********************************************************************\nCONVSTCK BAKR  R14,0               save caller's environment       @D2A\n         CLC   0(7,R3),=XL7'0'     is input date zero?             @D2A\n         BE    CONVDONE            yes, just return                @D2A\n         PACK  WORK5,0(8,R3)       move date                      <USR>\n         MVC   CONVDATE,WORK5      to parm area                   <USR>\n*        PACK  CONVDATE,0(7,R3)    move date to parm area         <USR>\n*        SP    CONVDATE,=P'1900000' strip off century             <USR>\n         CONVTOD CONVVAL=CONVWORK,  convert to stck value              X\n               TODVAL=(R4),                                            X\n               TIMETYPE=DEC,       cambio tipo BIN por DEC        <USR>X\n               DATETYPE=YYYYDDD    empleamos el formato yyyyddd   <USR>\n*              DATETYPE=YYDDD      en lugar de yyddd              <USR>\n         LTR   R15,R15             did it work?                    @D2A\n         BZ    CONVDONE            no, error en la conversi\u00f3n     <USR>\n         ABEND 26,DUMP             abend espec\u00edfico               <USR>\nCONVDONE PR    ,                   return                          @D2A\n*\n*\n***********************************************************************\n* MESSR -- Display a message                                          *\n*                                                                     *\n*   Input:                                                            *\n*     r2 -> text of message                                           *\n*     R14 = return address                                            *\n***********************************************************************\nMESSR    DS    0H\n         BAKR  R14,0               save caller's environment\n         WTO   TEXT=(R2),          display message                     X\n               ROUTCDE=(2,11)\n         PR                        return to caller\n*\n***********************************************************************\n* PUTREC -- PUT a record to the output file and set up for next       *\n*                                                                     *\n*   Input:                                                            *\n*     r3 -> text                                                      *\n*     r4  = text length                                               *\n*     R14 = return address                                            *\n***********************************************************************\nPUTREC   DS    0H\n         BAKR  R14,0               save caller's environment\n         LR    R1,R4               length of text\n         S     R1,=F'1'            subtract 1 for mvc\n         BM    PUTRECX             return if negative (length < 1)\n         TM    PFLAGS,CENTURY      Does customer want a 4-digit year   X\n                                   in output records               @04A\n         BNO   TWODGYRR            No, customer wants a 2-digit year   X\n                                   in the output records           @04A\n         LA    R9,LOGBUF           syslog record                   @04A\n         USING HCRREC,R9           addressability to HCR mapping   @04A\n         LA    R2,HCRTEXT          borrow r2 (PR will restore it)  @04A\n         A     R2,LOFF               for offset to text in log record  X\n                                                                   @04A\n         EX    R1,PUTMV            move in the text                @04A\n         A     R1,=A(HCRHEADL+5)   calculate length of log record  @04A\n         DROP  R9                  Drop addressability to HCRREC   @04A\n         B     PUTCONT             continue to calculate output        X\n                                   record length                   @04A\nTWODGYRR DS    0H                  Process 2-digit year records    @04A\n         LA    R9,LOGBUF           syslog record                   @04A\n         USING HCL,R9              addressability to HCL mapping   @04A\n         LA    R2,HCLTEXT          borrow r2 (PR will restore it)\n         A     R2,LOFF               for offset to text in log record\n         EX    R1,PUTMV            move in the text\n         A     R1,=A(HCLHEADL+5)   calculate length of log record\n         DROP  R9                  Drop addressability to HCL      @04A\nPUTCONT  DS    0H\n         A     R1,LOFF               including the offset\n         STH   R1,LOGBUFL          move it into prefix\n*                                                                 3@P8D\n         PUT   OFILE,LOGBUFP       PUT the syslog record           @P8C\n*                                                                 4@P8D\n*\n* set up for next record\n*\n         TM    PFLAGS,CENTURY      Does customer want a 4-digit year   X\n                                   in output records               @04A\n         BNO   TWODGYRN            No, customer wants a 2-digit year   X\n                                   in the output records           @04A\n         LA    R9,LOGBUF           syslog record                   @04A\n         USING HCRREC,R9           addressability to HCR mapping   @04A\n         ICM   R15,1,HCRREQTP     save request type                @04A\n         MVC   HCRREC(128),=CL128' ' clear out log record          @04A\n         STCM  R15,1,HCRREQTP     restore request type             @04A\n         MVI   FIRSTLNE,C'N'       show this is no longer first line   X\n                                                                   @04A\n         DROP  R9                  Drop addressability to HCRREC   @04A\n         B     PUTRECX             Exit subroutine                 @04A\nTWODGYRN DS    0H                  Process 2-digit year records    @04A\n         LA    R9,LOGBUF           syslog record                   @04A\n         USING HCL,R9              addressability to HCL mapping   @04A\n         ICM   R15,1,HCLREQTP     save request type\n         MVC   HCL(128),=CL128' ' clear out log record\n         STCM  R15,1,HCLREQTP     restore request type\n         MVI   FIRSTLNE,C'N'       show this is no longer first line\n         DROP  R9                  Drop addressability to HCL      @04A\nPUTRECX  PR    ,                  return\nPUTMV    MVC   0(*-*,R2),0(R3)    executed instruction\n*\n***********************************************************************\n* GAPMSG -- PUT special record to the output file indicating       @01A\n*           data missing (due to deleted record, gap, etc.)        @01A\n*           and set up for the next                                @01A\n*                                                                  @01A\n*   Input:                                                         @01A\n*     RETCODE = service routine return code                        @01A\n*     RSNCODE = service routine reason code                        @01A\n*     R14 = return address                                         @01A\n*     Logger service routine already initialized from LOGRMSGT     @01A\n*                                                                  @01A\n***********************************************************************\nGAPMSG   DS    0H                                                  @01A\n         BAKR  R14,0               save caller's environment       @01A\n         TM    MFLAGS,OPEN         is there an output dataset?     @02A\n         BNO   PUTGOK              No, skip writing message        @02A\n         MVC   NOMSGRTN,LOGRMSGT   put name of logger service routine\n*                                  where gap found in message      @01A\n         LR    R6,R14              save R14 across putrec call     @01A\n*                                  (restored by PR anyway)         @01A\n         UNPK  NOMSGRC(4),RETCODE+2(3)  get return code            @01A\n         TR    NOMSGRC,HEXTAB      make it printable               @01A\n         MVI   NOMSGRC+3,C','      replace lost character          @01A\n         UNPK  NOMSGRS(5),RSNCODE+2(3) get reason code             @01A\n         TR    NOMSGRS,HEXTAB      make it printable               @01A\n         MVI   NOMSGRS+4,C' '      replace lost character          @01A\n         MVC   LOGBUF(128),=CL128' '  blank message text area      @04C\n         MVC   LOGBUF,NOMSGMSG     move text into log buffer       @01A\n         LH    R3,NOMSGAL2         length of message               @01A\n         LA    R3,4(,R3)           Add for RDW                     @01A\n         STH   R3,LOGBUFL          set record length               @01A\n*                                                                 3@P8D\n         PUT   OFILE,LOGBUFP       PUT the record                  @01A\n*                                                                 3@P8D\nPUTGOK   EQU   *                                                   @01A\n         PR    ,                   return                          @01A\n*\n***********************************************************************\n* GENINFO -- Get information from the MDB general object and          *\n*            fill in the appropriate log record fields.               *\n*            Use the HCL or HCR to map the log records depending      *\n*            on whether the output records should have a 2-digit      *\n*            year or a 4-digit year respectively.                 @04A*\n*                                                                     *\n*   Input:                                                        @04A*\n*     r7 -> MDBG                                                  @04A*\n*     R14 = return address                                        @04A*\n***********************************************************************\nGENINFO  DS    0H                                                  @04A\n         BAKR  R14,0               save caller's environment       @04A\n         USING MDBG,R7             addressability to general object    X\n                                                                   @04A\n         TM    PFLAGS,CENTURY      Does customer want a 4-digit year   X\n                                   in output records               @04A\n         BNO   TWODGYR1            No, customer wants a 2-digit year   X\n                                   in the output records           @04A\n*\n* set up log record base\n*                                                                  @04A\n         LA    R9,LOGBUF           syslog record                   @04A\n         USING HCRREC,R9           addressability to HCR mapping   @04A\n         MVC   HCRSYSID,MDBGOSNM   system name                     @04A\n         MVC   HCRDATE,MDBGDSTP    date with 4-digit year (yyyyddd)    X\n                                                                   @04A\n         MVC   HCRTIME,MDBGTIMH    time                            @04A\n         MVI   HCRTIME+2,C':'      separate with                   @04A\n         MVI   HCRTIME+5,C':'       colons                         @04A\n         DROP  R9                                                  @04A\n         B     GENEXIT             Exit subroutine                 @04A\nTWODGYR1 DS    0H                  Process 2-digit year output records X\n                                                                   @04A\n* set up log record base\n*                                                                  @04M\n         LA    R9,LOGBUF           syslog record                   @04C\n         USING HCL,R9              addressability                  @04C\n         MVC   HCLSYSID,MDBGOSNM   system name                     @04M\n         MVC   HCLDATE,MDBGDSTP+2  date (note that MDB form is yyyyddd)\n         MVC   HCLTIME,MDBGTIMH    time                            @04M\n         MVI   HCLTIME+2,C':'      separate with                   @04M\n         MVI   HCLTIME+5,C':'       colons                         @04M\n         DROP  R9                                                  @04A\nGENEXIT  DS    0H                  Exit subroutine                 @04A\n         DROP  R7                  Drop addressability to MDB general  X\n                                   object                          @04A\n         PR                        return to caller                @04A\n*\n***********************************************************************\n* CPINFO --  Get information from the MDB CP object and               *\n*            fill in the appropriate log record fields.               *\n*            Use the HCL or HCR to map the log records depending      *\n*            on whether the output records should have a 2-digit      *\n*            year or a 4-digit year respectively.                 @04A*\n*                                                                     *\n*   Input:                                                        @04A*\n*     r7 -> MDBSCP                                                @04A*\n*     R14 = return address                                        @04A*\n***********************************************************************\nCPINFO   DS    0H                                                  @04A\n         BAKR  R14,0               save caller's environment       @04A\n         USING MDBSCP,R7           addressability to cp object     @04A\n         TM    PFLAGS,CENTURY      Does customer want a 4-digit year   X\n                                   in output records               @04A\n         BNO   TWODGYR2            No, customer wants a 2-digit year   X\n                                   in the output records           @04A\n*\n* set up log record base\n*                                                                  @04A\n         LA    R9,LOGBUF           syslog record                   @04A\n         USING HCRREC,R9           addressability to HCR mapping   @04A\n         MVI   HCRRECTP,HCRMLWTO   assume a multiline msg          @04A\n         CLC   MDBCLCNT,=F'1'      see if more than one line       @04A\n         BH    CPROK4              ok if so                        @04A\n         MVI   HCRRECTP,HCRWTO     make it a single line message   @04A\n         TM    MDBMLVL1,MDBMLR     is it a wtor?                   @04A\n         BNO   CPROK4              no, ok                          @04A\n         MVI   HCRRECTP,HCRWTOR    make it a wtor                  @04A\n***********************************************************************\n* set up request type                                              @04A\n***********************************************************************\nCPROK4   TM    MDBCMSC2,MDBCOCMD   is it an operator cmd echo?     @04A\n         BNO   CPNOP4              no, try next                    @04A\n         MVI   HCRREQTP,HCRCMD     mark it as operator command     @04A\n         CLC   MDBCCNID,=F'0'      is it an internal cmd (cons id=0)?  X\n                                                                   @04A\n         BNE   CPRC4               no, so HCLCMD is ok             @04A\n         MVI   HCRREQTP,HCRINTNL   mark it as internal command     @04A\n         B     CPRC4                                               @04A\nCPNOP4   TM    MDBCATT1,MDBCMCSC   is it a command response?       @04A\n         BO    CPRSP4              yes, mark it so                 @04A\n         TM    MDBDESC1,MDBDESCE   is it desc=5 (also cmd resp)    @04A\n         BNO   CPRC4               no, not cmd response            @04A\nCPRSP4   MVI   HCRREQTP,HCRRESP   mark it as command response      @04A\n***********************************************************************\n* make routing codes printable                                     @04A\n***********************************************************************\nCPRC4    UNPK  TWORK(9),MDBCERC(5) unpack first 28 routing codes   @04A\n         TR    TWORK(7),HEXTAB     make them printable             @04A\n         MVC   HCRROUTC,TWORK      move into record                @04A\n***********************************************************************\n* make request flags printable                                     @04A\n***********************************************************************\n         UNPK  TWORK(9),MDBCXMOD(5) unpack request flags           @04A\n         TR    TWORK(8),HEXTAB     make them printable             @04A\n         MVC   HCRREQFL,TWORK      move into record                @04A\n         MVC   REQFL,TWORK         save for second line            @04A\n         DROP  R9                                                  @04A\n         B     CPEXIT              Exit subroutine                 @04A\nTWODGYR2 DS    0H                  Process 2-digit year output records X\n                                                                   @04A\n* set up log record base\n*                                                                  @04M\n         LA    R9,LOGBUF           syslog record                   @04C\n         USING HCL,R9              addressability                  @04C\n         MVI   HCLRECTP,HCLMLWTO   assume a multiline msg          @04M\n         CLC   MDBCLCNT,=F'1'      see if more than one line       @04M\n         BH    CPROK               ok if so                        @04M\n         MVI   HCLRECTP,HCLWTO     make it a single line message   @04M\n         TM    MDBMLVL1,MDBMLR     is it a wtor?                   @04M\n         BNO   CPROK               no, ok                          @04M\n         MVI   HCLRECTP,HCLWTOR    make it a wtor                  @04M\n***********************************************************************\n* set up request type                                              @04M\n***********************************************************************\nCPROK    TM    MDBCMSC2,MDBCOCMD   is it an operator cmd echo?     @04M\n         BNO   CPNOP               no, try next                    @04M\n         MVI   HCLREQTP,HCLCMD     mark it as operator command     @04M\n         CLC   MDBCCNID,=F'0'      is it an internal cmd (cons id=0)?  X\n                                                                   @04M\n         BNE   CPRC                no, so HCLCMD is ok             @04M\n         MVI   HCLREQTP,HCLINTNL   mark it as internal command     @04M\n         B     CPRC                                                @04M\nCPNOP    TM    MDBCATT1,MDBCMCSC   is it a command response?       @04M\n         BO    CPRSP               yes, mark it so                 @04M\n         TM    MDBDESC1,MDBDESCE   is it desc=5 (also cmd resp)    @04M\n         BNO   CPRC                no, not cmd response            @04M\nCPRSP    MVI   HCLREQTP,HCLRESP   mark it as command response      @04M\n***********************************************************************\n* make routing codes printable                                     @04M\n***********************************************************************\nCPRC     UNPK  TWORK(9),MDBCERC(5) unpack first 28 routing codes   @04M\n         TR    TWORK(7),HEXTAB     make them printable             @04M\n         MVC   HCLROUTC,TWORK      move into record                @04M\n***********************************************************************\n* make request flags printable                                     @04M\n***********************************************************************\n         UNPK  TWORK(9),MDBCXMOD(5) unpack request flags           @04M\n         TR    TWORK(8),HEXTAB     make them printable             @04M\n         MVC   HCLREQFL,TWORK      move into record                @04M\n         MVC   REQFL,TWORK         save for second line            @04M\n         DROP  R9                                                  @04A\nCPEXIT   DS    0H                  Exit subroutine                 @04A\n         DROP  R7                  Drop addressability to MDB CP       X\n                                                                   @04A\n         PR                        return to caller                @04A\n*\n***********************************************************************\n* JOBINFO--  Get jobname information and fill in the                  *\n*            appropriate log record fields.                           *\n*            Use the HCL or HCR to map the log records depending      *\n*            on whether the output records should have a 2-digit      *\n*            year or a 4-digit year respectively.                 @04A*\n*                                                                     *\n*   Input:                                                        @04A*\n*     r7 -> MDB                                                   @04A*\n*     R14 = return address                                        @04A*\n***********************************************************************\nJOBINFO  DS    0H                                                  @04A\n         BAKR  R14,0               save caller's environment       @04A\n         USING MDB,R7              addressability to MDB object    @04A\n         TM    PFLAGS,CENTURY      Does customer want a 4-digit year   X\n                                   in output records               @04A\n         BNO   TWODGYR3            No, customer wants a 2-digit year   X\n                                   in the output records           @04A\n*\n* set up log record base\n*                                                                  @04A\n         LA    R9,LOGBUF           syslog record                   @04A\n         USING HCRREC,R9           addressability to HCR mapping   @04A\n         CLI   HCRREQTP,HCRCMD     is it a command?                @04A\n         BNE   NOTCMD4             no, try next                    @04A\n         CLC   CONSID,=F'128'      is it an instream command?      @04A\n         BE    GETCONS4            yes, use console name (INSTREAM)    X\n                                                                   @04A\n         CLC   JOBNAME,=CL8' '     is jobname blank?               @04A\n         BE    GETCONS4            yes, use console name           @04A\n         B     CHKMCS4             go see if it's an MCS console   @04A\nNOTCMD4  CLI   HCRREQTP,HCRINTNL   is it an internal command?      @04A\n         BNE   NOTINTL4            no, try next                    @04A\n         CLC   JOBNAME,=CL8' '     is jobname blank?               @04A\n         BNE   GETJOB4             no, so use job name             @04A\n         MVI   HCRREQTP,HCRCMD     change request type to \"command\"    X\n                                                                   @04A\n         B     GETCONS4            use console name (INTERNAL)     @04A\nNOTINTL4 CLI   HCRREQTP,HCLRESP    is it a command response?       @04A\n         BNE   GETJOB4             no, so use job name             @04A\n         TM    MCSFLAG1,MDBMCSB+MDBMCSH was it sent by console id      X\n                                        in reg 0?                  @04A\n         BZ    GETJOB4             no, use job name                @04A\n         CLC   JOBNAME,=CL8' '     is jobname blank?               @04A\n         BNE   GETJOB4             no, so use job name             @04A\n         CLC   CONSID,=F'0'        is it internal?                 @04A\n         BE    GETCONS4            yes, use console name (INTERNAL)    X\n                                                                   @04A\n         CLC   CONSID,=F'128'      is it instream?                 @04A\n         BE    GETCONS4            yes, use console name (INSTREAM)    X\n                                                                   @04A\nCHKMCS4  CLI   CONSID,X'00'        is console class zero (MCS)?    @04A\n         BE    GETJOB4             yes, use job name               @04A\n         TM    CONSID,X'E0'        is console class a JES3 console?    X\n                                                                   @04A\n         BNZ   GETJOB4             yes, so use job name            @04A\n***********************************************************************\n* move console name into hcr                                       @04A\n***********************************************************************\nGETCONS4 MVC   HCRCONID,CONSNAME   move in console name from MDB   @04A\n         CLC   CONSID,=F'0'        is it \"internal\"?               @04A\n         BNE   CONSNOT4            no, ok                          @04A\n         MVC   HCRCONID,=CL8'INTERNAL' move in \"internal\"          @04A\n         B     MDBJBOK4                                            @04A\nCONSNOT4 CLC   CONSID,=F'128'      is it \"instream\"?               @04A\n         BNE   MDBJBOK4            no, ok                          @04A\n         MVC   HCRCONID,=CL8'INSTREAM' move in \"instream\"          @04A\n         B     MDBJBOK4            done with job/console field     @04A\n***********************************************************************\n*        move in job name                                          @04A\nGETJOB4  MVC   HCRJOBID,JOBNAME    move in job name                @04A\n*\nMDBJBOK4 DS    0H                                                  @04A\n*                                                                  @04A\n* erase the timestamp if NOTIME was requested                      @04A\n***********************************************************************\n         TM    MCSFLAG2,MDBMCSI    was \"NOTIME\" requested?         @04A\n         BNO   TIMEOK              no, so leave time alone         @04A\n         MVC   HCRTIME,=CL11' '    blank out the time stamp        @04A\n         DROP  R9                                                  @04A\n         B     TIMEOK              Exit subroutine                 @04A\nTWODGYR3 DS    0H                  Process 2-digit year output records X\n                                                                   @04A\n* set up log record base\n*                                                                  @04M\n         LA    R9,LOGBUF           syslog record                   @04C\n         USING HCL,R9              addressability                  @04C\n         CLI   HCLREQTP,HCLCMD     is it a command?                @04M\n         BNE   NOTCMD              no, try next                    @04M\n         CLC   CONSID,=F'128'      is it an instream command?      @04M\n         BE    GETCONS             yes, use console name (INSTREAM)    X\n                                                                   @04M\n         CLC   JOBNAME,=CL8' '     is jobname blank?               @04M\n         BE    GETCONS             yes, use console name           @04M\n         B     CHKMCS              go see if it's an MCS console   @04M\nNOTCMD   CLI   HCLREQTP,HCLINTNL   is it an internal command?      @04M\n         BNE   NOTINTL             no, try next                    @04M\n         CLC   JOBNAME,=CL8' '     is jobname blank?               @04M\n         BNE   GETJOB              no, so use job name             @04M\n         MVI   HCLREQTP,HCLCMD     change request type to \"command\"    X\n                                                                   @04M\n         B     GETCONS             use console name (INTERNAL)     @04M\nNOTINTL  CLI   HCLREQTP,HCLRESP    is it a command response?       @04M\n         BNE   GETJOB              no, so use job name             @04M\n         TM    MCSFLAG1,MDBMCSB+MDBMCSH was it sent by console id      X\n                                        in reg 0?                  @04M\n         BZ    GETJOB              no, use job name                @04M\n         CLC   JOBNAME,=CL8' '     is jobname blank?               @04M\n         BNE   GETJOB              no, so use job name             @04M\n         CLC   CONSID,=F'0'        is it internal?                 @04M\n         BE    GETCONS             yes, use console name (INTERNAL)    X\n                                                                   @04M\n         CLC   CONSID,=F'128'      is it instream?                 @04M\n         BE    GETCONS             yes, use console name (INSTREAM)    X\n                                                                   @04M\nCHKMCS   CLI   CONSID,X'00'        is console class zero (MCS)?    @04M\n         BE    GETJOB              yes, use job name               @04M\n         TM    CONSID,X'E0'        is console class a JES3 console?    X\n                                                                   @04M\n         BNZ   GETJOB              yes, so use job name            @04M\n***********************************************************************\n* move console name into hcl                                       @04M\n***********************************************************************\nGETCONS  MVC   HCLCONID,CONSNAME   move in console name from MDB   @04M\n         CLC   CONSID,=F'0'        is it \"internal\"?               @04M\n         BNE   CONSNOTI            no, ok                          @04M\n         MVC   HCLCONID,=CL8'INTERNAL' move in \"internal\"          @04M\n         B     MDBJOBOK                                            @04M\nCONSNOTI CLC   CONSID,=F'128'      is it \"instream\"?               @04M\n         BNE   MDBJOBOK            no, ok                          @04M\n         MVC   HCLCONID,=CL8'INSTREAM' move in \"instream\"          @04M\n         B     MDBJOBOK            done with job/console field     @04M\n***********************************************************************\n*        move in job name                                          @04M\nGETJOB   MVC   HCLJOBID,JOBNAME    move in job name                @04M\n*                                                                  @04M\nMDBJOBOK DS    0H                                                  @04M\n*                                                                  @04M\n* erase the timestamp if NOTIME was requested                      @04M\n***********************************************************************\n         TM    MCSFLAG2,MDBMCSI    was \"NOTIME\" requested?         @04M\n         BNO   TIMEOK              no, so leave time alone         @04M\n         MVC   HCLTIME,=CL11' '    blank out the time stamp        @04M\n         DROP  R9                                                  @04A\nTIMEOK   DS    0H                                                  @04M\n***********************************************************************\n* remember this is the first line in the message                   @04M\n         MVI   FIRSTLNE,C'Y'       set first-line indicator        @04M\n         DROP  R7                  Drop addressability to MDB object   X\n                                                                   @04A\n         PR                        return to caller                @04A\n***********************************************************************\n* PROCLINE-  Process the line. Test to see if the message if a        *\n*            multiline message, and if so set the appropriate         *\n*            log record fields.                                       *\n*            Test to see if the line fits in one output record.       *\n*            If line does not fit in one output record, then          *\n*            split the line. Finally put the output record in         *\n*            the output dataset.                                      *\n*            Use the HCL or HCR to map the log records depending      *\n*            on whether the output records should have a 2-digit      *\n*            year or a 4-digit year respectively.                 @04A*\n*                                                                     *\n*   Input:                                                        @04A*\n*     r7 -> MDBT                                                  @04A*\n*     R14 = return address                                        @04A*\n***********************************************************************\nPROCLINE DS    0H                                                  @04A\n         BAKR  R14,0               save caller's environment       @04A\n         USING MDBT,R7             addressability to MDB Text          X\n                                   object                          @04A\n         TM    PFLAGS,CENTURY      Does customer want a 4-digit year   X\n                                   in output records               @04A\n         BNO   TWODGYR4            No, customer wants a 2-digit year   X\n                                   in the output records           @04A\n*\n* set up log record base\n*                                                                  @04A\n         LA    R9,LOGBUF           syslog record                   @04A\n         USING HCRREC,R9           addressability to HCR mapping   @04A\n***********************************************************************\n* see if this is line 2 or greater of a multiline, and if so\n*     show the multiline id and\n*     fill in the record type from the line type                   @04A\n***********************************************************************\n         CLI   FIRSTLNE,C'Y'       see if this is the first line   @04A\n         BE    MDBMLOK4            bypass if so                    @04A\n         MVC   HCRMLID,MLID        move in the multiline id number @04A\n         MVC   HCRREQFL,REQFL      move in request flags           @04A\n         TM    MDBTLNT1,MDBTLABT   see if label line               @04A\n         BNO   TXTNL4              no, try data                    @04A\n         MVI   HCRRECTP,HCRLABEL   show it is a label              @04A\nTXTNL4   TM    MDBTLNT1,MDBTDATT   see if data line                @04A\n         BNO   TXTND4              no, try end                     @04A\n         MVI   HCRRECTP,HCRDATA    show it is data                 @04A\nTXTND4   TM    MDBTLNT1,MDBTENDT   see if end line                 @04A\n         BNO   MDBMLOK4            no, ok                          @04A\n         MVI   HCRRECTP,HCRDTEND   show it is the end line         @04A\nMDBMLOK4 DS    0H                                                  @04A\n***********************************************************************\n* place text behind control info                                   @04A\n***********************************************************************\n         MVC   LOFF,=F'0'          init offset of text in log record\n*                                   (zero for first line, then one)\n*                                                                  @04A\n***********************************************************************\n* loop through text, issue PUT for each piece of text up to length 128\n*                                                                  @04A\n***********************************************************************\nTXTLP4   C     R2,=A(128-HCRHEADL) see if text is too long for buf@er  X\n                                                                   @04A\n         BNH   TXTDN4              do last piece if not            @04A\n***********************************************************************\n* truncate at a blank or comma, get length in R4                   @04A\n***********************************************************************\n         LA    R4,127-HCRHEADL(0,R3) starting position             @04A\n         LA    R1,118-HCRHEADL(0,R3) ending position               @04A\n         MVC   BLANKCT,=F'1'       assume there is a blank         @04A\nTXTSC4   CLI   0(R4),C' '          look for a blank                @04A\n         BE    TXTL4               stop if found                   @04A\n         CLI   0(R4),C','          look for a comma                @04A\n         BNE   TXTBK4              not found, try previous position    X\n                                                                   @04A\n         LA    R4,1(,R4)           keep comma on this line         @04A\n         MVC   BLANKCT,=F'0'       show no blank found             @04A\n         B     TXTL4               split the line                  @04A\nTXTBK4   BCTR  R4,0                back up                         @04A\n         CR    R4,R1               see if at end position          @04A\n         BNL   TXTSC4              loop back if not                @04A\n         LA    R4,128-HCRHEADL(0,R3) too big - trunc at 128        @04A\n         MVC   BLANKCT,=F'0'       show no blank found             @04A\nTXTL4    SR    R4,R3               calculate length                @04A\n***********************************************************************\n* issue PUT for the partial text                                   @04A\n***********************************************************************\n         BAS   R14,PUTREC          PUT the syslog record           @04A\n         MVI   HCRRECTP,HCRSPLIT   show this is a continuation     @04A\n         MVC   LOFF,=F'1'          adjust text offset for cont. lines  X\n                                                                   @04A\n         A     R4,BLANKCT          skip the blank if there was one @04A\n         SR    R2,R4               reduce the count                @04A\n         AR    R3,R4               bump down the record            @04A\n         B     TXTLP4              loop to do all pieces           @04A\n***********************************************************************\n* issue PUT for last (or only) piece                               @04A\n*                                                                  @04A\nTXTDN4   DS    0H                                                  @04A\n*                                                                  @04A\n* if this is the first line of a multiline and is not an operator  @04A\n*     request (descriptor code 9), append the multiline id to the  @04A\n*     text.  If there is not enough room in the line for the id,   @04A\n*     print it on the next (split) line by itself.                 @04A\n***********************************************************************\n         CLI   HCRRECTP,HCRMLWTO   is it first line of multiline?  @04A\n         BNE   NOTFIRST            no, ok                          @04A\n         TM    DESC2,MDBDESCI      is it descriptor code 9?        @04A\n         BO    NOTFIRST            yes, ok                         @04A\n         C     R2,=A(128-HCRHEADL-4) see if there is room for mlid @04A\n         BH    MLSPLIT4            go split line if not            @04A\n*        build line with mlid appended                             @04A\n         LR    R14,R2              get text length                 @04A\n         BCTR  R14,0               subtract 1 for MVC              @04A\n         EX    R14,MLMVC4          move in the text                @04A\n         LA    R14,MLTEMPLN(R2)    end of text + 1                 @04A\n         MVC   0(4,R14),HCID       append mlid                     @04A\n         A     R2,=F'4'            add 4 to length for mlid        @04A\n         LA    R3,MLTEMPLN         point to new line               @04A\n         B     NOTFIRST            go put the line                 @04A\nMLMVC4   MVC   MLTEMPLN(*-*),0(R3) executed above                  @04A\n*        put the line and build a split line containing the MLID   @04A\nMLSPLIT4 DS    0H                                                  @04A\n         LR    R4,R2               get text length                 @04A\n         BAS   R14,PUTREC          put the line                    @04A\n         MVI   HCRRECTP,HCRSPLIT   show this is a continuation     @04A\n         L     R2,=F'4'            length of mlid                  @04A\n         LA    R3,HCID             address of mlid                 @04A\n         DROP  R9                                                  @04A\n         B     NOTFIRST            go put the line                 @04A\nTWODGYR4 DS    0H                  Process 2-digit year output records X\n                                                                   @04A\n* set up log record base\n*                                                                  @04M\n         LA    R9,LOGBUF           syslog record                   @04C\n         USING HCL,R9              addressability                  @04C\n***********************************************************************\n* see if this is line 2 or greater of a multiline, and if so\n*     show the multiline id and\n*     fill in the record type from the line type                   @04M\n***********************************************************************\n         CLI   FIRSTLNE,C'Y'       see if this is the first line   @04M\n         BE    MDBMLOK             bypass if so                    @04M\n         MVC   HCLMLID,MLID        move in the multiline id number @04M\n         MVC   HCLREQFL,REQFL      move in request flags           @04M\n         TM    MDBTLNT1,MDBTLABT   see if label line               @04M\n         BNO   TXTNL               no, try data                    @04M\n         MVI   HCLRECTP,HCLLABEL   show it is a label              @04M\nTXTNL    TM    MDBTLNT1,MDBTDATT   see if data line                @04M\n         BNO   TXTND               no, try end                     @04M\n         MVI   HCLRECTP,HCLDATA    show it is data                 @04M\nTXTND    TM    MDBTLNT1,MDBTENDT   see if end line                 @04M\n         BNO   MDBMLOK             no, ok                          @04M\n         MVI   HCLRECTP,HCLDTEND   show it is the end line         @04M\nMDBMLOK  DS    0H                                                  @04M\n***********************************************************************\n* place text behind control info                                   @04M\n***********************************************************************\n         MVC   LOFF,=F'0'          init offset of text in log record\n*                                   (zero for first line, then one)\n*                                                                  @04M\n***********************************************************************\n* loop through text, issue PUT for each piece of text up to length 128\n*                                                                  @04M\n***********************************************************************\nTXTLP    C     R2,=A(128-HCLHEADL) see if text is too long for buf@er  X\n                                                                   @04M\n         BNH   TXTDN               do last piece if not            @04M\n***********************************************************************\n* truncate at a blank or comma, get length in R4                   @04M\n***********************************************************************\n         LA    R4,127-HCLHEADL(0,R3) starting position             @04M\n         LA    R1,118-HCLHEADL(0,R3) ending position               @04M\n         MVC   BLANKCT,=F'1'       assume there is a blank         @04M\nTXTSC    CLI   0(R4),C' '          look for a blank                @04M\n         BE    TXTL                stop if found                   @04M\n         CLI   0(R4),C','          look for a comma                @04M\n         BNE   TXTBK               not found, try previous position    X\n                                                                   @04M\n         LA    R4,1(,R4)           keep comma on this line         @04M\n         MVC   BLANKCT,=F'0'       show no blank found             @04M\n         B     TXTL                split the line                  @04M\nTXTBK    BCTR  R4,0                back up                         @04M\n         CR    R4,R1               see if at end position          @04M\n         BNL   TXTSC               loop back if not                @04M\n         LA    R4,128-HCLHEADL(0,R3) too big - trunc at 128        @04M\n         MVC   BLANKCT,=F'0'       show no blank found             @04M\nTXTL     SR    R4,R3               calculate length                @04M\n***********************************************************************\n* issue PUT for the partial text                                   @04M\n***********************************************************************\n         BAS   R14,PUTREC          PUT the syslog record           @04M\n         MVI   HCLRECTP,HCLSPLIT   show this is a continuation     @04M\n         MVC   LOFF,=F'1'          adjust text offset for cont. lines  X\n                                                                   @04M\n         A     R4,BLANKCT          skip the blank if there was one @04M\n         SR    R2,R4               reduce the count                @04M\n         AR    R3,R4               bump down the record            @04M\n         B     TXTLP               loop to do all pieces           @04M\n***********************************************************************\n* issue PUT for last (or only) piece                               @04M\n*                                                                  @04M\nTXTDN    DS    0H                                                  @04M\n*                                                                  @04M\n* if this is the first line of a multiline and is not an operator  @04M\n*     request (descriptor code 9), append the multiline id to the  @04M\n*     text.  If there is not enough room in the line for the id,   @04M\n*     print it on the next (split) line by itself.                 @04M\n***********************************************************************\n         CLI   HCLRECTP,HCLMLWTO   is it first line of multiline?  @04M\n         BNE   NOTFIRST            no, ok                          @04M\n         TM    DESC2,MDBDESCI      is it descriptor code 9?        @04M\n         BO    NOTFIRST            yes, ok                         @04M\n         C     R2,=A(128-HCLHEADL-4) see if there is room for mlid @04M\n         BH    MLSPLIT             go split line if not            @04M\n*        build line with mlid appended                             @04M\n         LR    R14,R2              get text length                 @04M\n         BCTR  R14,0               subtract 1 for MVC              @04M\n         EX    R14,MLMVC           move in the text                @04M\n         LA    R14,MLTEMPLN(R2)    end of text + 1                 @04M\n         MVC   0(4,R14),HCID       append mlid                     @04M\n         A     R2,=F'4'            add 4 to length for mlid        @04M\n         LA    R3,MLTEMPLN         point to new line               @04M\n         B     NOTFIRST            go put the line                 @04M\nMLMVC    MVC   MLTEMPLN(*-*),0(R3) executed above                  @04M\n*        put the line and build a split line containing the MLID   @04M\nMLSPLIT  DS    0H                                                  @04M\n         LR    R4,R2               get text length                 @04M\n         BAS   R14,PUTREC          put the line                    @04M\n         MVI   HCLRECTP,HCLSPLIT   show this is a continuation     @04M\n         L     R2,=F'4'            length of mlid                  @04M\n         LA    R3,HCID             address of mlid                 @04M\n         DROP  R9                                                  @04A\nNOTFIRST DS    0H                                                  @04M\n*                                                                  @04M\n         LR    R4,R2               get length of text              @04M\n         BAS   R14,PUTREC          PUT the syslog record           @04M\n         DROP  R7                  Drop addressability to MDB Text     X\n                                   object                          @04A\n         PR                        return to caller                @04A\n*                                                                 <USR>\n* Rutina de asignaci\u00f3n din\u00e1mica de MDBLOG                         <USR>\n*                                                                 <USR>\nMDBDYN   DS    0H                                                 <USR>\n         BAKR  R14,0               save caller's environment      <USR>\n         USING MDB,R8                                             <USR>\n*        LR    R6,R8               calc end of mdb in R6          <USR>\n*        AH    R6,MDBLEN           start+mdblen in header         <USR>\n         LA    R7,MDBHLEN(0,R8)    address of first object        <USR>\n         DROP  R8                                                 <USR>\n         USING MDBG,R7                                            <USR>\n*        +------------------------------------+                   <USR>\n*>>>>>>>>|   OBTENCION DEL NOMBRE DEL SYSPLEX |<<<<<<<<<<<<<<<<<<<<USR>\n*        +------------------------------------+                   <USR>\n         DS        0H                                             <USR>\n         LA        R3,INSISWK                                     <USR>\n         USING     INSISTMA,R3                                    <USR>\n         MVC       @MDSICAL,=AL2(@MDSILEN)                        <USR>\n         LINK      EP=MDSISTM,PARAM=((R3))                        <USR>\n*                                                                 <USR>\n         LA        R1,$DATOSA1+L'$DATOSA1-1      <> FIN DE DSNAME <USR>\nLB10     DS        0H                                             <USR>\n         CLI       0(R1),C' '          <> BUSQUEDA PRIMER NO BLANC<USR>\n         BNE       LB10A                                          <USR>\n         BCT       R1,LB10             <> REHACER BUCLE           <USR>\nLB10A    DS        0H                                             <USR>\n         MVC       1(L'@PLEXNAM,R1),@PLEXNAM                      <USR>\n*                                                                 <USR>\n         DROP      R3                                             <USR>\n*        +------------------------------------+                   <USR>\n*>>>>>>>>| Convert GMT date to YYYMMDD format |<<<<<<<<<<<<<<<<<<<<USR>\n*        +------------------------------------+                   <USR>\nSTCKCONV DS        0H                                             <USR>\n         STCKCONV STCKVAL=GMTCSTCK,  convert GMT stck value       <USR>X\n               CONVVAL=$TOD,         to TOD format                <USR>X\n               TIMETYPE=DEC,                                      <USR>X\n               DATETYPE=YYYYMMDD                                  <USR>\n         UNPK  WORKA15(9),$TODDTE(5)  Unpack GMT date             <USR>\n         NI    WORKA15,B'11001111' Translate millenium for letter <USR>\n         MVC   W_DATE(8),WORKA15      Store MDB GMT date          <USR>\n         UNPK  WORKA15(9),$TODTME(5)  Unpack DMB GMT time\n         MVC   W_TIME+1(6),WORKA15    Store MDB GMT time\n*                                                                 <USR>\nLB20     DS        0H                                             <USR>\n         LA        R1,$DATOSA1+L'$DATOSA1-1      <> FIN DE DSNAME <USR>\n*                                                                 <USR>\nLB30     DS        0H                                             <USR>\n         CLI       0(R1),C' '          <> BUSQUEDA PRIMER NO BLANC<USR>\n         BNE       LB30A                                          <USR>\n         BCT       R1,LB30             <> REHACER BUCLE           <USR>\nLB30A    DS        0H                                             <USR>\n         LA        R1,1(,R1)           <> AVANZAR EL NO BLANCO    <USR>\n         MVI       0(R1),C'.'          <> PUNTO TRAS PLEXNAME     <USR>\n*                                                                 <USR>\n         LA    R1,1(R1)               Address R1 for 4th Qualifier<USR>\n         MVC   0(L'W_DATE,R1),W_DATE  Put SMF Record Date         <USR>\n         LA    R1,L'W_DATE-1(R1)      Address R1 for 5th Q.       <USR>\n         MVI   1(R1),C'.'             Put dot                     <USR>\n         MVC   2(L'W_TIME,R1),W_TIME  Put SMF Record Time         <USR>\n*                                                                 <USR>\n*        MVC       1(L'W_DATE,R1),W_DATE                          <USR>\n*        MVI       1+L'W_DATE(R1),C'.'           <> PUNTO TRAS FEC<USR>\n*        MVI       1+L'W_DATE+1(R1),C'H'         <> PREFIJO DE HOR<USR>\n*        MVC       1+L'W_DATE+1+1(2,R1),MDBGTIMH                  <USR>\n*        MVC       1+L'W_DATE+1+1+2(2,R1),MDBGTIMH+3              <USR>\n*   LLQ: Hhhmmss                                                  <USR>\n*        MVC       1+L'W_DATE+1+1+2+2(2,R1),MDBGTIMH+6            <USR>\n*                                                                 <USR>\n         LA    R15,LB80            llamada a MDALDIN              <USR>\n         N     R15,OFF31           STRIP OFF AMODE(31) BIT        <USR>\n         BASSM R14,R15             SET AMODE                      <USR>\n*                                                                 <USR>\nLB80     MVC   WTO004+8(50),$DATOSA1\nWTO004   WTO   '                                                      '\n         CALL  MDALDIN,                                           <USR>X\n               ($WORKDIN,$PETICI,$DATOSA,$DATOSB),VL              <USR>\n         LA    R14,LB80OK          GET RESUME ADDRESS             <USR>\n         O     R14,ON31            TURN ON AMODE(31) BIT          <USR>\n         BSM   0,R14               SET AMODE(31)                  <USR>\nLB80OK   DS    0H                                                 <USR>\n         LTR   R15,R15             <> CODIGO RETORNO MDALDIN      <USR>\n         BZ    LB90                <> ASIGNACION CORRECTA, SEGUIR <USR>\n*                                                                 <USR>\n         WTO   '**IEAMDBLG** ASIGNACION DINAMICA ERRONEA. '       <USR>\n         ABEND 888,DUMP                                           <USR>\nLB90     DS    0H                                                 <USR>\n         OI    FLAGS2,MDBALDIN     establecer indicador MDBALDIN  <USR>\n         OPEN  (MFILE,OUTPUT)      ABRIR MFILE                    <USR>\n         C     R15,=F'8'           VERIFICO LA OPEN:              <USR>\n         BL    LB92                SI FUE BIEN, CONTINUO;         <USR>\n         WTO   '**IEAMDBLG** FALLO EN OPEN DE MFILE. '            <USR>\n         ABEND 888,DUMP                                           <USR>\nLB92     DS    0H                                                 <USR>\n         OI    MFLAGS,OPEN         Fichero abierto                <USR>\n         PR                        Retornar                       <USR>\n*\n***********************************************************************\n* End subroutines                                                     *\n***********************************************************************\n*\n***********************************************************************\n* static variables                                                    *\n***********************************************************************\n*\n*      translate table for testing for ebcdiic numbers\n*\nNUMTAB   DC    240X'FF',10X'00',6X'FF'\n*                                                                  @D2A\n*      translate tables for scanning parm field                    @D2A\n*                                                                  @D2A\nTRTTAB1  DC    256X'00'                                            @D2A\n         ORG   TRTTAB1+C','         stop on comma                  @D2A\n         DC    C','                                                @D2A\n         ORG   TRTTAB1+C'('         stop on right paren            @D2A\n         DC    C'('                                                @D2A\n         ORG   ,                                                   @D2A\nTRTTAB2  DC    256X'00'                                            @D2A\n         ORG   TRTTAB2+C')'         stop on left paren             @D2A\n         DC    C')'                                                @D2A\n         ORG   ,                                                   @D2A\nZLPAREN  DC    0F'0',3X'00',C'('   3 zeros and a left paren        @D2A\n*\n*      translate table for hex conversion\n*      must be at least 240 bytes past base\nHEXTAB   EQU   *-240\n         DC    C'0123456789ABCDEF' must follow hextab\n*\nSTRNAME  DC    CL26'SYSPLEX.OPERLOG' stream name\nANSLEN   DC    A(L'ANSAREA)        length of logger's answer area\nSTRBUFFL EQU   64*1024             length of largest log record\nSTRBLEN  DC    A(STRBUFFL)\n*                                                                 <USR>\nMDBBUFFL EQU   64*1024             LENGTH OF LARGEST MDB RECORD   <USR>\nMDBBLEN  DC    A(MDBBUFFL)                                        <USR>\n         LTORG\n*\n*        +--------------------------------+\n*>>>>>>>>| AREAS DE LLAMADA A MDALDIN     |                       <USR>\n*        +--------------------------------+                       <USR>\n$PETICI  DC        CL10'ALLOC  '                                  <USR>\n*                                                                 <USR>\n$WORKDIN DC        F'0'                <> WORK FACILITADA POR MOD <USR>\n*                                                                 <USR>\n$DATOSA  DS        0CL68                                          <USR>\n$DATOSA0 DC        CL15'DD=MDBLOG '                               <USR>\n$DATOSA1 DC        CL50'DSN=OPERLOG.'                             <USR>\n$DATOSA2 DC        CL03' ; '                                      <USR>\n*\n$DATOSB  DC        CL99' NEW CATLG CDELETE UNIT=3390                   X\n               RLSE VB LRECL=4096 BLKSIZE=8196 CLOSE ; '          <USR>\n*                                                                 <USR>\n*-------- AREA DE LLAMADA AL COMANDO                              <USR>\n*                                                                 <USR>\n*        DS        0H                                             <USR>\nA_PARM   DS        F                                              <USR>\nPARM_OUT DS        H                                              <USR>\nWF1      DC        C'START LOGGERSF,FICH='                        <USR>\nWF2      DC        CL44' '                                        <USR>\nWFLEN    EQU       *-WF1                                          <USR>\n*                                                                 <USR>\n*-------- SERIALIZATION AREA                                      <USR>\n*                                                                 <USR>\nSERIAL   DS        0H                                             <USR>\nMAJNAME  DC        CL7'OPERLOG'                                   <USR>\nMINNAME  DC        CL8'IEAMDBLG'                                  <USR>\n*                                                                 <USR>\nENQFLG   DS        XL1             Serialization flag             <USR>\nENQREQ   EQU       X'01'           Enqueue was requested          <USR>\nENQSUC   EQU       X'02'           Enqueue was succesfull         <USR>\n*                                                                 <USR>\n@TIEMPOW DS    D                                                  <USR>\nKDEFECTO DC    C'00030000'         Delay of 3 minutes             <USR>\n***********************************************************************\n* dynamic variables                                                   *\n***********************************************************************\n*\n***********************************************************************\n*\n$TIMEDAT DS    CL16                                               <USR>\n$FIPL    DS    CL9                                                <USR>\n$HIPL    DS    CL9                                                <USR>\n@TIMEDAT DS    CL16                                               <USR>\n@FIPL    DS    CL9                                                <USR>\n@HIPL    DS    CL9                                                <USR>\n***********************************************************************\n$TOD     DS    0XL16               Area for STCKCONV output       <USR>\n$TODTME  DC     XL4'0'                                            <USR>\n         DC     XL4'0'                                            <USR>\n$TODDTE  DC     XL4'0'                                            <USR>\n         DC     XL4'0'                                            <USR>\n***********************************************************************\nSV       DS    18F                 save area\nDATEWORK DS    F                   work area for checking dates\nDATEWRK1 DS    F                   work area for checking dates\nDATEWRK2 DS    F                   work area for checking dates    @D2A\nDAYSWORK DS    F                   work area for checking dates    @D2A\nSSTCK    DS    2F                  start date in stck format\nESTCK    DS    2F                  end date in stck format\nDSTCK    DS    2F                  delete date in stck format\nWORK5    DS    CL5                 Work area                      <USR>\nWORKA15  DS    CL15                Work area                      <USR>\nW_DATE   DC    CL8'YYYYMMDD'       Work area for date conversion  <USR>\nW_TIME   DC    CL7'THHMMSS'        SMF Record Date\nMDBBUFA  DS    F                   direcci\u00f3n buffer MDB           <USR>\nCONVWORK DC    4F'0'               parm area for convtod macro\nCONVTIME EQU   CONVWORK,4          time in parm area              <USR>\nCONVDATE EQU   CONVWORK+8,4        date in parm area\nCURRSTCK DS    2F,2F               timestamps (GMT,local) of curr rec\nGMTCSTCK EQU   CURRSTCK,8          GMT of curr rec                <USR>\nLOCCSTCK EQU   CURRSTCK+8,8        Local time of curr rec         <USR>\nRETCODE  DS    F                   return code from logger\nRSNCODE  DS    F                   reason code from logger\nBLANKCT  DS    F                   count of blanks in message segment\nLOFF     DS    F                   offset of text in log record\nRECCOUNT DS    F                   number of logger records read\nDBLWD    DS    D                   work area for cvd\nSDATE    DS    XL7                 start date as ebcdiic yyyyddd\nEDATE    DS    XL7                 end date as ebcdiic yyyyddd\nDDATE    DS    XL7                 delete date as ebcdiic yyyyddd\n$GMT     DS    XL7                 today's GMT time               <USR>\nTDATE    DS    XL7                 today's date as ebcdiic yyyyddd @D2A\nCOPYDAYS DS    CL3                 copy days ebcdiic nnn           @D2A\nDELDAYS  DS    CL3                 delete days ebcdiic nnn         @D2A\nSTRTOKEN DS    CL16                token for accessing stream\nBRWTOKEN DS    CL4                 token for browse session\nANSAREA  DS    CL(ANSAA_LEN)       answer area for log requests\nCURRBLK  DS    XL8                 block id of current block\nDELBLK   DS    XL8                 block id of blk after one to delete\nTWORK    DS    CL16                work area for hex translate\nJOBNAME  DS    CL8                 jobname\nCONSNAME DS    CL8                 console name                    @D1A\nCONSID   DS    XL4                 console id\nMCSFLAGS DS    0CL2                MCS flags from MDB              @D1A\nMCSFLAG1 DS    X                   MCS flag 1                      @D1A\nMCSFLAG2 DS    X                   MCS flag 2                      @D1A\nHCID     DC    CL4' '              hardcopy id                     @P4A\n         ORG   HCID+1              multiline id goes in bytes 2-4  @P4A\nMLID     DC    C'NNN'              multiline id from message\n         ORG   ,                                                   @P4A\nMLTEMPLN DC    CL80' '             work area for split line        @P4A\n*                                                                  @P4A\nDESCS    DS    0XL2                copy of descriptor codes        @P4A\nDESC1    DS    XL1                 descriptor codes byte 1         @P4A\nDESC2    DS    XL1                 descriptor codes byte 2         @P4A\n*                                                                  @P4A\nREQFL    DC    CL8' '              copy of request flags\nWTLFLAG  DS    C                   'Y' indicates a WTL\nFIRSTLNE DS    C                   'Y' indicates the first msg line\n*\nFLAGS1   DS    XL1                 mdb flags\nFLAGGO   EQU   X'01'               processed general object\nFLAGCO   EQU   X'02'               processed control prog object\n*\nFLAGS2   DS    XL1                 Marcadores de control          <USR>\nMDBALDIN EQU   X'01'               MDBALDIN correcto              <USR>\n*\nPFLAGS   DS    XL1                 parameter flags                 @D2A\nCOPY     EQU   X'01'               \"COPY\" was specified            @D2A\nDELETE   EQU   X'02'               \"DELETE\" was specified          @D2A\nHCFORMAT EQU   X'04'               \"HCFORMAT\" was specified        @04A\nYEAR     EQU   X'08'               \"HCFORMAT(YEAR)\" was specified      *\n                                    (this is also the default)     @04A\nCENTURY  EQU   X'10'               \"HCFORMAT(CENTURY)\" was specified   *\n                                                                   @04A\n*\nCOPYALL  EQU   X'20'               \"COPY(ALL)\" was specified      <USR>\nCOPYMDB  EQU   X'60'               \"COPY(MDB)\"  was specified     <USR>\nDELEALL  EQU   X'80'               \"DELETE(ALL)\" was specified    <USR>\n*\nMFLAGS   DS    XL1                 Miscellaneous flags             @01A\nOPEN     EQU   X'80'               Output file has been opened     @01A\nREACHEOF EQU   X'40'               End of file reached             @01A\nNOBREND  EQU   X'20'               Return code of 8 or more on     @02C\n*                                  IXGBRWSE REQUEST=START. Do not  @02A\n*                                  perform IXGBRWSE REQUEST=END    @02A\n*\nOFF31    DC    0F'0',XL4'7FFFFFFF' anded to a reg to turn off bit 0\nON31     DC    0F'0',XL4'80000000' ored to a reg to turn on bit 0\n*                                                                 <USR>\n         DS        0H              **ALINEAR A MEDIA PALABRA**    <USR>\nINSISWK  ORG       *+2+@MDSILEN                                   <USR>\n*                                                                 <USR>\nSTPLEX   DS        CL8 <> NOMBRE DEL SYSPLEX                      <USR>\n*                                                                 <USR>\n         DS        0H                                             <USR>\n*                                                                 <USR>\nMFILE    DCB   DDNAME=MDBLOG,      dcb for output file            <USR>X\n               DSORG=PS,                                          <USR>X\n               MACRF=PM                                           <USR>\n*\n*                                                                 <USR>\nFIOPERL  DCB   DDNAME=FIOPERL,     dcb for output file            <USR>X\n               DSORG=PS,                                          <USR>X\n               MACRF=PL,                                          <USR>X\n               RECFM=F,LRECL=80,BLKSIZE=80                        <USR>\n*\n*\n* buffer for log record\n*\nLOGBUFP  DS    0F                  prefix to log record\nLOGBUFL  DS    H                   length of logbuf data + 4\n         DC    H'0'\nLOGBUF   DS    CL128               log record (mapped by ihahclog)\n*\nOFILE    DCB   DDNAME=SYSLOG,      dcb for output file                 X\n               DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               RECFM=VB,                                               X\n               LRECL=132           128 + 4 for rdw\n*\n***********************************************************************\n* messages                                                            *\n***********************************************************************\n*                                 1         2         3         4\n*                        1234567890123456789012345678901234567890123456\nBADPMSG  DC    AL2(36),C'MLG001I INVALID OR MISSING PARAMETER'     @D2C\n*\nLOGRMSG  DC    AL2(LOGRMLEN)\nLOGRMSGD DC    C'MLG002I ERROR DURING SYSTEM LOGGER '              @P5C\nLOGRMSGT DC    CL10' ',C', RETURN CODE '                           @P6C\nLOGRMRET DC    CL3' ',C', REASON CODE '\nLOGRMRSN DS    CL4,C' '\nLOGRMLEN EQU   *-LOGRMSGD                                          @P5C\n*                                 1         2         3         4\n*                        1234567890123456789012345678901234567890123456\n         DS    0H                   for alignment                  @03A\nEMPTYMSG DC    AL2(27),C'MLG003I NO RECORDS IN RANGE'\n         DS    0H                   for alignment                  @03A\nEMPTYSTM DC    AL2(27),C'MLG004I LOG STREAM IS EMPTY'              @03A\n***********************************************************************\n* Output record                                                    @01A\n***********************************************************************\n         DS    0H                   for alignment                  @03A\nNOMSGAL2 DC    AL2(NOMSGLEN)        length field                   @01A\nNOMSGMSG DC    C'ILG0001 RECORDS NOT AVAILABLE. '                  @01A\nNOMSGRTN DC    CL10' '              IXG service routine instance   @01A\nNOMSGM2  DC    C' RETURN CODE '     more text                      @01A\nNOMSGRC  DC    CL4'   ,'            return code                    @01A\nNOMSGM3  DC    C' REASON CODE '     more text                      @01A\nNOMSGRS  DC    CL4' '               reason code                    @01A\n         DC    CL1' '               pad character for unpack       @01A\nNOMSGLEN EQU   *-NOMSGMSG           Message text length            @01A\n*\n         EJECT\n***********************************************************************\n* dsects                                                              *\n***********************************************************************\n*\nSTRBUFF  DSECT                     buffer for log records\n         ORG   *+STRBUFFL          length of buffer\n*-------- AREA DE LLAMADA AL MDSISTM  ----------------------------<USR>\n         INSISTMA                                                 <USR>\n*\n         IXGANSAA LIST=YES         logger answer area\n         PUSH  PRINT\n         PRINT NOGEN\n         IEAVG132 ,                mdb prefix\n         IEAVM105 ,                mdb\n         IHAHCLOG ,                hardcopy log format\n         CVT   DSECT=YES           cvt\n         POP   PRINT\n*\n***********************************************************************\n* equates                                                             *\n***********************************************************************\n*\n         IXGCON ,                  System logger equates\n*\n***********************************************************************\n* register usage                                                      *\n***********************************************************************\n*\nR1       EQU   1                   work and parm reg\nR2       EQU   2                   work reg\nR3       EQU   3                   work reg\nR4       EQU   4                   work reg\nR5       EQU   5                   module base                     @04A\nR6       EQU   6                   pointer to end of the mdb\nR7       EQU   7                   base for mdb objects\nR8       EQU   8                   base for mdb\nR9       EQU   9                   entry parameters and\n*                                  base for hardcopy log record dsect\nR10      EQU   10                  base for logger buffer\nR11      EQU   11                  module base\nR12      EQU   12                  module base\nR13      EQU   13                  linkage\nR14      EQU   14                  linkage\nR15      EQU   15                  linkage\n         END\n/*\n//SMP      EXEC $$$SMPE,COND=(0,NE)\n//TEMPLIB  DD DISP=SHR,DSN=INS.MVSIPO.A06X.EXITOBJ\n//SAMPMOD  DD DISP=(OLD,DELETE),DSN=&&SAMPMOD\n//SMPPTFIN DD DATA,DLM='$$'\n++USERMOD(@MVSX08) REWORK(06120402).\n++VER(Z038) FMID(HBB7720).\n++SAMP (IEAMDBLG) TXLIB(SAMPMOD).\n++MOD (IEAMDBLG) TXLIB(TEMPLIB) DISTLIB(AOSB3).\n++JCLIN CALLLIBS.\n//LINKEDIT EXEC PGM=IEWL,REGION=768K,\n// PARM='XREF,LET,LIST,AMODE=31,RMODE=24,REUS'\n//SYSLMOD  DD DSN=SYS1.LINKLIB,DISP=SHR,UNIT=3390,VOL=SER=SYA0R1\n//AOSB3    DD DSN=SYS1.AOSB3,DISP=SHR,UNIT=3390,VOL=SER=SYA0D4\n//SYSLIB   DD DSN=SYST.TLINKLIB,DISP=SHR,UNIT=3390,VOL=SER=SYA0P1\n//SYSLIN   DD *\n         INCLUDE AOSB3(IEAMDBLG)\n         ENTRY IEAMDBLG\n         NAME  IEAMDBLG(R)\n$$\n//SMPCNTL  DD  *\n  SET BDY(GLOBAL) .\n  RECEIVE      S(@MVSX08) LIST SYSMODS SOURCEID(USREXIT).\n  SET BDY(MVSTZNA).\n  UCLIN.\n   REP DDDEF(TLINKLIB)\n       DATASET(SYST.LINKLIB)\n       SHR\n       UNIT(3390)\n       VOLUME(SYA0P1)\n   .\n  ENDUCL.\n  APPLY        S(@MVSX08) REDO.\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FIN": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x08/\\x00\\x99\\x08/\\x19\\x17\\x00r\\x00r\\x00\\x00\\xc4\\xd4\\xf4\\xf2\\xf1\\xf6@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-23T00:00:00", "modifydate": "1999-03-23T19:17:00", "lines": 114, "newlines": 114, "modlines": 0, "user": "DM4216"}, "text": "         MACRO\n&NOMB    FIN   &CR,               CODIGO DE RETORNO (SOLO NORENT)      X\n               &TIPO=NORENT       TIPO (NORENT,RENT,ERROR)\n         GBLA  &SBP,&SBA,&CAP,&SAC,&SAV\n.*\n.* ****OS3906A*********************************************************\n.* *                                                                  *\n.* *   MACRO FIN    PARA PROGRAMAS ASSEMBLER                          *\n.* *                                                                  *\n.* *------------------------------------------------------------------*\n.* *                                                                  *\n.* *   TECNICA DE SISTEMAS                                            *\n.* *   ANGEL LUIS DOMINGUEZ MARTIN                                    *\n.* *   16 DE JULIO DE 1.983, SEPTIEMBRE DE 1.992, MAYO DE 1.996       *\n.* *                                                                  *\n.* *------------------------------------------------------------------*\n.* *                                                                  *\n.* * ESTA MACRO CONSERVA LAS FUNCIONES DE LA ANTIGUA FIN PARA PGMS.   *\n.* * NO-REENTRANTES, INCOPORANDO FUNCIONES PARA LA CODIFICACION DE    *\n.* * RUTINAS REENTRANTES.                                             *\n.* *                                                                  *\n.* * SU COMPLEMENTARIA, LA MACRO  -INICIO- HA SIDO ACTUALIZADA PARA   *\n.* * ADMITIR NUEVAS FUNCIONES ACORDE CON ESTA.                        *\n.* *                                                                  *\n.* * PARAMETROS:                                                      *\n.* * ----------                                                       *\n.* *                                                                  *\n.* * &CR      POSICIONAL  - OBLIGATORIO SI TIPO=NORENT                *\n.* *                      - PARA MANTENER LA ANTIGUA ESTRUCTURA.      *\n.* *                      - FIGURARA OBLIGATORIAMENTE LA CONST. -CR-  *\n.* *                                                                  *\n.* * TIPO     CLAVE       - PUEDE TENER VALORES NORENT/RENT/ERRGET    *\n.* *                      - POR DEFECTO TOMA  -NORENT-                *\n.* *                      - INDICA NO-REENTRANTE O REENTRANTE.        *\n.* *                                                                  *\n.* *          NORENT      - DEVOLUCION PARA NO REENTRANTES.           *\n.* *                      - TOMA EL CODIGO DE RETORNO DE LA VARIABLE  *\n.* *                        CR DEFINIDA EN LA MACRO INICIO.           *\n.* *                                                                  *\n.* *          RENT        - DEVOLUCION PARA REENTRANTES.              *\n.* *                      - TOMA EL CODIGO DE RETORNO DE  - R15 -.    *\n.* *                      - EFECTUA FREEMAIN DEL AREA DINAMICA.       *\n.* *                                                                  *\n.* *          ERRGET      - DEVOLUCION PARA REENTRANTES CUYA GETMAIN  *\n.* *                        HAYA DEVUELTO CODIGO DE ERROR.            *\n.* *                      - TIENE EN CUENTA QUE NO HAN SIDO COMPLE-   *\n.* *                        TADOS LOS ENCADENAMIENTOS STANDARD DE LAS *\n.* *                        SAVE AREAS AL FALLAR LA GETMAIN.          *\n.* *                                                                  *\n.* ***************************************** DOMINGUEZ   JULIO-1983 ***\n* ---------------------------------------------------------------------\n* *   V.S.I.             DEVOLUCION DE CONTROL PROGRAMAS O.S.         *\n* ---------------------------------------------------------------------\n         AIF   ('&NOMB' EQ '').LB00\n&NOMB    EQU   *\n.LB00    ANOP\n         AIF   ('&TIPO' EQ 'ERRGET').LBERR\n.*\n         AIF   ('&TIPO' EQ 'RENT').LBRENT\n.*\n         AIF   ('&TIPO' NE 'NORENT').TIPO1\n         AIF   ('&SAC' NE '1').CR001\n         AIF   ('&CR' NE 'CR').CR1\n         AIF   (&SAV EQ 0).CR002\n         L     R13,SAVE+4         CARGA DIRECCION DE SAVE AREA ANTERIOR\n         AGO   .CR002\n.CR001   ANOP\n         AIF   ('&CR' NE 'CR&SAC').CR1\n         AIF   (&SAV EQ 0).CR002\n         L     R13,SAVE&SAC+4     CARGA DIRECCION DE SAVE AREA ANTERIOR\n.CR002   ANOP\n         SR    R15,R15            LIMPIAR CODIGO DE RETORNO\n         IC    R15,&CR            CARGA CODIGO DE RETORNO\n         AGO   .LBERR\n.* ------------------- REENTRANTES\n.LBRENT  ANOP\n         LR    R1,R13             DIRECCION AREA DINAMICA\n         L     R0,=A(@LGDIN&SAC)  TAMA#O DEL AREA DINAMICA\n         LA    R1,0(,R1)          LIMPIAR OCTETO IZDO. REG. 1\n         AIF   (&SAV EQ 0).LBSAV01\n         L     R13,4(,R13)        CARGA DIRECCION DE SAVE AREA ANTERIOR\n.LBSAV01 ANOP\n         LR    R2,R15             SALVA CODIGO DE RETORNO A REG. 2\n         AIF   (&SBP EQ 0).LBRENT1\n         FREEMAIN R,LV=(0),A=(1),SP=&SBP  EFECTUAR FREEMAIN\n         AIF   (&SBP LE 127).LBRENT2\n         AIF   (&SBA EQ 1).LBRENT2\n         MODESET  KEY=NZERO,MODE=PROB\n         AUTORIZA AUTHOFF\n         AGO   .LBRENT2\n.LBRENT1 ANOP\n         FREEMAIN R,LV=(0),A=(1)  EFECTUAR FREEMAIN\n.LBRENT2 ANOP\n         LR    R15,R2             CARGA CODIGO DE RETORNO\n.LBERR   ANOP\n         AIF   (&SAV EQ 0).LBSAV02\n         L     R14,12(R13)        RESTAURAR DIRECCION DE RETORNO\n         LM    R0,R12,20(R13)     RESTAURAR SAVE AREA ANTERIOR\n.LBSAV02 ANOP\n         AIF   (&CAP EQ 0).LBCAP01\n         BSM   R0,R14             DEVOLUCION DE CONTROL CON CAPPING\n* ---------------------------------------------------------------------\n         AGO   .FIN\n.LBCAP01 ANOP\n         BR    R14                DEVOLUCION DE CONTROL\n* ---------------------------------------------------------------------\n         AGO   .FIN\n.*\n.CR1     MNOTE 255,'INCORRECTA ESPECIFICACION DE CONSTANTE -CR- '\n         MEXIT\n.TIPO1   MNOTE 255,'INCORRECTA ESPECIFICACION DE -TIPO- '\n         MEXIT\n.FIN     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INFECHAA": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x992o\\x00\\x992o\\t \\x00<\\x00;\\x00\\x00\\xc4\\xd4\\xf4\\xf2\\xf1\\xf6@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-11-22T00:00:00", "modifydate": "1999-11-22T09:20:00", "lines": 60, "newlines": 59, "modlines": 0, "user": "DM4216"}, "text": "         MACRO\n         INFECHAA\n*-----OS3906A ----- I N F E C H A A ------------<UCB4> <YR2000> ------*\n*                                                                     *\n*   NOMBRE:      INFECHAA                                             *\n*   FUNCION:     DECLARACION DEL AREA A PASAR DESDE UN PGM ESCRITO    *\n*                EN ASSEMBLER AL MODULO MDFECHA                       *\n*   LENGUAJE:    ASSEMBLER.                                           *\n*   TIPO:        COPY / DSECT.                                        *\n*---------------------------------------------------------------------*\nINFECHAA DSECT\n$CODIGO  DS    H            <> CODIGOS DE LLAMADA\n*                               0   OBTIENE FECHA DEL DIA\n*                               1   VERIFICACION/CONVERSION JULIANA\n*                               2   VERIFICACION/CONVERSION GREGORIANA\n*                               3   CONVERSION FECHA-BASE\n*                           <> CODIGOS DE RETORNO\n*                               0   FUNCION TERMINADA CORRECTAMENTE\n*                              -1   CODIGO DE LLAMADA ERRONEO\n*                              -2   FECHA(S) INVALIDA(S) O ILOGICA(S)\n*\n$FEGREGO DS    CL8'AAAAMMDD'\n$FEJULIA DS    CL7'AAAADDD'\n$FEBASE  DS    CL7'XXXXXXX'\n$HORA    DS    CL2'XX'\n$MINUTO  DS    CL2'XX'\n$SEGUNDO DS    CL2'XX'\n$DECIMAS DS    CL2'XX'\n*\n$IDIOMA  DS    CL4'XXXX'    <> CODIGOS DE IDIOMA\n*                                 341 ---> CASTELLANO\n*                                 343 ---> CATALAN------- FALTA\n*                                 344 ---> VASCO--------- FALTA\n*                                 3481 --> GALLEGO------- FALTA\n*                                 33 ----> FRANCES\n*                                 351 ---> PORTUGUES----- FALTA\n*                                 39 ----> ITALIANO\n*                                 44 ----> INGLES\n*                                 49 ----> ALEMAN\n$DIANUM  DS    CL2          <> DIA NUMERICO\n$DIAALF  DS    CL20         <> DIA ALFABETICO\n$MESNUM  DS    CL2          <> MES NUMERICO\n$MESALF  DS    CL20         <> MES ALFABETICO\n$ANONUM  DS    CL4          <> ANO NUMERICO\n$ANOALF  DS    CL40         <> ANO ALFABETICO\n$DIASEN  DS    CL1          <> DIA SEMANA NUMERICO (0=DOMINGO)\n$DIASEA  DS    CL15         <> DIA DE LA SEMANA\n*\n$FEEDT1  DS    CL11'DD.MMM.AAAA'\n$FEEDT2  DS    CL09'DD.MMM.AA'\n$FEEDT3  DS    CL10'DD.MM.AAAA'\n$FEEDT4  DS    CL08'DD.MM.AA'\n*\n$HOREDT  DS    CL11'HH:MM:SS:DD'\n*\n$HORBIN  DS    CL6\n$HORALF  DS    CL44\n*\n$INFELEN EQU       *-INFECHAA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INFECHSA": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x19\\x00\\x992o\\x01\\x061\\x7f\\x15T\\x00\\x84\\x00;\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-11-22T00:00:00", "modifydate": "2006-11-13T15:54:19", "lines": 132, "newlines": 59, "modlines": 0, "user": "U0Z72B6"}, "text": "         MACRO\n         INFECHSA\n* ---------------------------------------------------------------------\n*        DSECT DE PARAMETROS  CON CODIGOS DE LLAMADA/RETORNO\n* ---------------------------------------------------------------------\nINFECHSA DSECT\n$CODIGO DS         H         <> CODIGOS DE LLAMADA\n*                                0   FECHA DEL DIA LOCAL Y TIMESTAMP\n*                                1   VERIFICACION ANO BISIESTO      (1)\n*                                2   OBTENER FECHAS RELIGIOSAS      (1)\n*                                3   FECHA GMT Y TIMESTAMP GMT\n*                                --> CONVERSIONES / VERIFICACIONES\n*                                4   -GREGORIANA\n*                                5   -JULIANA\n*                                6   -BASE\n*                                7   -BASE SIGLO XX\n*                                8   -BASE SIGLO XXI\n*                                9   -ASTRONOMICA\n*                               10   -LILIANA\n*                               11   -GMT (NECESITA HH:MM)          (1)\n*                               12   DIFERENCIA GREGORIANAS     (2) (1)\n*\n* (1) ESTAS FUNCIONES DEVUELVEN CONTROL DIRECTO AL PROGRAMA LLAMADOR\n*     LLAMANTE. NO ES POSIBLE OBTENER OTRAS FECHAS Y/O EDICIONES.\n*     PARA HACERLO SERA NECESARIO LLAMAR AL MODULO DE NUEVO Y UTILIZAR\n*     EL CODIGO DE LLAMADA QUE SE DESEE.\n*\n* (2) SE CALCULAN LOS DIAS QUE VAN DESDE FEGREGO A FEGREG2 Y SE TIENE\n*     EN CUENTA EL SIGNO. SI FEGRE2 ES MAYOR SERA POSITIV0.\n*\n*                            <> CODIGOS DE RETORNO\n*                               0   FUNCION TERMINADA CORRECTAMENTE\n*                              -1   CODIGO DE LLAMADA ERRONEO\n*                              -2   FECHA(S) INVALIDA(S) O ILOGICA(S)\n*                              -3   PETICION INVALIDA FECHAS RELIGIOSAS\n*\n$SAVESTA DS        CL1024    <> AREA TRABAJO FACILITADA PGM LLAMADOR\n*\n$OBTIPOS DS        0CL16     <> MARCAS DATOS OBTENER\n$OBTBISI DS        CL1       <> - BISIESTO\n$OBTRELI DS        CL1       <> - RELIGIOSAS DE ESE ANO\n$OBTGREG DS        CL1       <> - GREGORIANA\n$OBTJULI DS        CL1       <> - JULIANA\n* --\n$OBTBASE DS        CL1       <> - BASE\n$OBTBAS0 DS        CL1       <> - BASE SIGLO XX\n$OBTBAS1 DS        CL1       <> - BASE SIGLO XXI\n$OBTLILI DS        CL1       <> - LILIANA\n* --\n$OBTASTR DS        CL1       <> - ASTRONOMICA\n$OBTEDT  DS        CL1       <> - EDICIONES\n         DS        CL1       <> - RESERVADO - 1\n         DS        CL1       <> - RESERVADO - 2\n* --\n         DS        CL1       <> - RESERVADO - 3\n         DS        CL1       <> - RESERVADO - 4\n$OBTEDTH DS        CL1       <> - EDICION-S LITERAL ANO            (2)\n$OBTEDTA DS        CL1       <> - EDICION-S LITERAL HORA           (2)\n*\n* (2) ESTAS FUNCIONES SOLO SON POSIBLES EN IDIOMA CASTELLANO\n*     AUNQUE SE HAYA SOLICITADO OTRO IDIOMA SE DEVOLVERAN EN CASTELLANO\n*     POR OTRO LADO, CONSUMEN TIEMPO Y RECURSOS, YA QUE ES NECESARIA\n*     UNA LLAMADA EXTERNA A OTRO MODULO, VARIAS VECES, PARA\n*     CONFECCIONAR LOS LITERALES.\n*\n         ORG       $OBTIPOS+16\n*\n$ANNO    DS        CL04'AAAA'          <> ANO (ALGUNAS FUNCIONES)\n$FEGREGO DS        CL08'AAAAMMDD'      <> GREGORIANA\n$FEJULIA DS        CL07'AAAADDD'       <> JULIANA\n$FEBASE  DS        CL07'NNNNNNN'       <> BASE TOTAL DESDE 01-01-0001\n$FEBAS20 DS        CL07'NNNNNNN'       <> BASE SIGLO XX\n$FEBAS21 DS        CL07'NNNNNNN'       <> BASE SIGLO XXI\n$FELILIA DS        CL07'NNNNNNN'       <> LILIANA\n$FEGMT   DS        CL12'AAAAMMDDHHMM'  <> GMT (VER CONSIDERACIONES)\n$FEASTRO DS        CL11'NNNNNNNDDDD'   <> ASTRONOMICA\n$FEGREG2 DS        CL08'AAAAMMDD'      <> GREGORIANA-2 DIF FECHAS\n$FEDIFER DS        CL04'BBBB'          <> DIFERENCIA BINARIA CON SIGNO\n$ERACRIS DS        CL02'AC'            <> ERA (ALGUNAS FUNCIONES)\n*                                          DC/ESPAC.=DESPUES DE CRISTO\n*                                          AC       =ANTES DE CRISTO\n$HORAFUL DS        0CL8'HHMMSSDD'      <> HORA COMPLETA\n$HORA    DS        CL02'XX'            <> HORA\n$MINUTO  DS        CL02'XX'            <> MINUTO\n$SEGUNDO DS        CL02'XX'            <> SEGUNDO\n$DECIMAS DS        CL02'XX'            <> DECIMAS DE SEGUNDO\n*\n$IDIOMA  DS        CL4'XXXX'           <> CODIGOS DE IDIOMA\n*                                         341 ---> CASTELLANO\n*                                         343 ---> CATALAN------- FALTA\n*                                         344 ---> VASCO--------- FALTA\n*                                         3481 --> GALLEGO------- FALTA\n*                                         33 ----> FRANCES\n*                                         351 ---> PORTUGUES----- FALTA\n*                                         39 ----> ITALIANO\n*                                         44 ----> INGLES\n*                                         49 ----> ALEMAN\n*\n$INDBISI DS        CL01                <> BISIESTO (S / N)\n$TIMESTA DS        CL20                <> TIMESTAMP\n$LOFFSET DS        CL7                 <> LOCAL OFFSET\n*\n$DIANUM  DS        CL2                 <> DIA NUMERICO\n$DIAALF  DS        CL20                <> DIA ALFABETICO\n$MESNUM  DS        CL2                 <> MES NUMERICO\n$MESALF  DS        CL20                <> MES ALFABETICO\n$ANONUM  DS        CL4                 <> ANO NUMERICO (SI MARCA EXPL.)\n$ANOALF  DS        CL40                <> ANO ALFABETICO (SI MARCA EX.)\n$DIASEN  DS        CL1                 <> DIA SEMANA NUM.(0=DOMINGO)\n$DIASEA  DS        CL15                <> DIA DE LA SEMANA\n*\n$FEEDT1  DS        CL11'DD.MMM.AAAA'\n$FEEDT2  DS        CL09'DD.MMM.AA'\n$FEEDT3  DS        CL10'DD.MM.AAAA'\n$FEEDT4  DS        CL08'DD.MM.AA'\n*\n$HOREDT  DS        CL11'HH:MM:SS:DD'\n$HORBIN  DS        CL6                 <> HEXADECIMAL SIN SIGNO\n$HORALF  DS        CL80                <> HORA ALFAB (SI MARCA EXPL.)\n*\n*        FECHAS RELIGIOSAS (EN FORMATO GREGORIANO)\n*\n$MICENIZ DS        CL8'AAAAMMDD'       <> MIERCOLES DE CENIZA (GREGOR.)\n$VIERNST DS        CL8'AAAAMMDD'       <> VIERNES SANTO       (GREGOR.)\n$RESURRE DS        CL8'AAAAMMDD'       <> RESURRECCION        (GREGOR.)\n$ASCENSI DS        CL8'AAAAMMDD'       <> ASCENSION           (GREGOR.)\n$PENTECO DS        CL8'AAAAMMDD'       <> PENTECOSTES         (GREGOR.)\n$CORPUSC DS        CL8'AAAAMMDD'       <> CORPUS CHRISTY      (GREGOR.)\n*\n$INFELEN EQU       *-INFECHSA\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INICIO": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x08/\\x01\\x00\\x13\\x9f\\x19\\x12\\x01`\\x01`\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-23T00:00:00", "modifydate": "2000-05-18T19:12:00", "lines": 352, "newlines": 352, "modlines": 0, "user": "U0Z72B6"}, "text": "         MACRO\n&NOMBRE  INICIO &R,                     REGISTROS BASE                 X\n               &TIPO=NORENT,            TIPO NORENT - RENT             X\n               &COMEN=,                 BREVE COMENTARIO DE FUNCIONES  X\n               &VERSION=,               VERSION                        X\n               &PDIN=,                  NOMBRE DSECT AREA DINAMICA     X\n               &FDIN=,                  NOMBRE EQU FIN AREA DINAMICA   X\n               &SUBPOOL=,               NUMERO DE SUBPOOL              X\n               &ERRGET=,                LABEL PARA ERROR EN GETMAIN    X\n               &AMODE=,                 ADRESABILITY                   X\n               &RMODE=,                 RESIDENCE                      X\n               &AUTH=SI,                SI AUTORIZACION                X\n               &CAPPING=SI,             ENLACE ENTRE RUTINAS           X\n               &SAVE=SI,                PARA SALVAR REG. A LA ENTRADA  X\n               &EQUREG=SI,              PARA DEFINIR EQU DE REGISTROS  X\n               &LOC=                    LOCATION PARA GETMAIN\n.*\n.* **** OS3906A *******************************************************\n.* *                                                                  *\n.* *   MACRO INICIO PARA PROGRAMAS ASSEMBLER                          *\n.* *                                                                  *\n.* *------------------------------------------------------------------*\n.* *                                                                  *\n.* *   TECNICA DE SISTEMAS                                            *\n.* *   ANGEL LUIS DOMINGUEZ MARTIN                                    *\n.* *   16 DE JULIO DE 1.983, SEPTIEMBRE DE 1.992                      *\n.* *                                                                  *\n.* * ESTA MACRO CONSERVA LAS FUNCIONES DE LA ANTIGUA INICIO PARA PGMS.*\n.* * NO-REENTRANTES, INCOPORANDO FUNCIONES PARA LA CODIFICACION DE    *\n.* * RUTINAS REENTRANTES.                                             *\n.* * ---------------------------------------------------------------  *\n.* * NOTA ===>  SE RECOMIENDA, POR STANDARIZACION, ANTEPONER EL PRE-  *\n.* *            FIJO ARROBA (@) A TODAS LAS AREAS QUE SE DEFINAN EN   *\n.* *            EN EL ESPACIO DINAMICO.                               *\n.* * ---------------------------------------------------------------  *\n.* * SU COMPLEMENTARIA, LA MACRO  -FIN-  HA SIDO ACTUALIZADA PARA     *\n.* * ADMITIR NUEVAS FUNCIONES ACORDE CON ESTA.                        *\n.* *                                                                  *\n.* * PARAMETROS:                                                      *\n.* * ----------                                                       *\n.* *                                                                  *\n.* * R        POSICIONAL  - REGISTRO/S ESPECIFICADOS PARA BASE DEL    *\n.* *                        PROGRAMA; SIN LA NOTACION RX, HASTA UN    *\n.* *                        MAXIMO DE 10.                             *\n.* *                      - ES OBLIGATORIO AL MENOS ESPECIFICAR       *\n.* *                        UNO, Y SI HUBIERA MAS, IRAN ENTRE         *\n.* *                        PARENTESIS Y SEPARADOS POR COMAS.         *\n.* *                                                                  *\n.* * TIPO     CLAVE       - PUEDE TENER LOS VALORES NORENT / RENT.    *\n.* *                      - POR DEFECTO TOMA  -NORENT-                *\n.* *                      - INDICA NO-REENTRANTE O REENTRANTE.        *\n.* *                                                                  *\n.* * COMEN    CLAVE       - NO ES OBLIGATORIO, PERO SE RECOMIENDA SU  *\n.* *                        INCLUSION PARA COMENTARIO EN EL PROGRAMA  *\n.* *                        TANTO EN FUENTE COMO EN CARGABLE Y GENE-  *\n.* *                        RACION DE INSTRUCCION  -TITLE-  PARA EL   *\n.* *                        LISTADO DE LA COMPILACION.                *\n.* *                      - MAXIMO DE CUARENTA POSICIONES ALFANUMERI- *\n.* *                        CAS Y SIEMPRE ENTRE COMILLAS.             *\n.* *                                                                  *\n.* * VERSION  CLAVE       - NO ES OBLIGATORIO, PERO SE RECOMIENDA SU  *\n.* *                        INCLUSION PARA QUE FIGURE LA VERSION      *\n.* *                        TANTO EN FUENTE COMO EN CARGABLE.         *\n.* *                      - MAXIMO DE SIETE POSICIONES ALFANUMERICAS  *\n.* *                                                                  *\n.* * PDIN     CLAVE       - OBLIGATORIO SI TIPO=RENT.                 *\n.* *                      - ES EL NOMBRE DE LA DSECT QUE VAMOS A UTI- *\n.* *                        LIZAR PARA USO DEL AREA DINAMICA.         *\n.* *                      - LAS 18 PALABRAS INICIALES DE ESTE AREA    *\n.* *                        SE RESERVAN PARA SAVEAREA.                *\n.* *                                                                  *\n.* * FDIN     CLAVE       - OBLIGATORIO SI TIPO=RENT.                 *\n.* *                      - ES EL NOMBRE DE UNA -EQU- QUE DEBEMOS CO- *\n.* *                        LOCAR AL FINAL DE NUESTRO AREA DINAMICA.  *\n.* *                      - SE UTILIZA PARA CALCULO DEL TAMANO DE AREA*\n.* *                        PARA GETMAIN.                             *\n.* *                                                                  *\n.* * SUBPOOL  CLAVE       - PARAMETRO OPCIONAL.                       *\n.* *                      - SOLO SE TIENE EN CUENTA SI TIPO=RENT.     *\n.* *                      - NUMERICO Y TRES POSICIONES OBLIGATORIAS EN*\n.* *                        CASO DE CONSIGNARSE.                      *\n.* *                      - SE UTILIZARA CUANDO SE DESEE EFECTUAR LA  *\n.* *                        GETMAIN SOBRE UN SUBPOOL ESPECIAL.        *\n.* *                                                                  *\n.* * ERRGET   CLAVE       - OBLIGATORIO SI TIPO=RENT.                 *\n.* *                      - LABEL DONDE SE BIFURCARA EN CASO DE ERROR *\n.* *                        EN LA GETMAIN.                            *\n.* *                                                                  *\n.* *                                                                  *\n.* * AMODE    CLAVE       - PARAMETRO OPCIONAL                        *\n.* *                                                                  *\n.* * RMODE    CLAVE       - PARAMETRO OPCIONAL                        *\n.* *                                                                  *\n.* * AUTH     CLAVE       - PARAMETRO OPCIONAL                        *\n.* *                      - SI SE QUIERE DAR MACRO AUTORIZA Y MODESET *\n.* *                        PARA PEDIR UNA GETMAIN EN SUBPOOL         *\n.* *                        ESPECIAL DE MEMORIA.                      *\n.* *                                                                  *\n.* * CAPPING  CLAVE       - PARAMETRO OPCIONAL                        *\n.* *                      - ENLACE ENTRE RUTINAS EN DIFERENTES MODOS. *\n.* *                        POR DEFINICION PUEDEN RECIBIR CONTROL EN  *\n.* *                        CUALQUIER MODO. OJO, EL MODULO DEBE RESI- *\n.* *                        DIR BAJO LOS 16MB SI QUIERE LLAMADAS DE   *\n.* *                        USUARIOS EN 24 BITS.                      *\n.* *                                                                  *\n.* * SAVE     CLAVE       - PARAMETRO OPCIONAL                        *\n.* *                      - SI SE QUIERE SALVAR LOS REGISTRO DE ENTRA *\n.* *                        A LA RUTINA EN UN SAVE AREA PROPORCIONADA *\n.* *                        EN EL REGISTRO 13.                        *\n.* *                                                                  *\n.* * EQUREG   CLAVE       - PARAMETRO OPCIONAL                        *\n.* *                      - PARA DEFINIR LOS EQU DE LOS REGISTROS     *\n.* *                        GENERALES.                                *\n.* *                                                                  *\n.* * LOC      CLAVE       - PARAMETRO OPCIONAL                        *\n.* *                      - RESIDENCIA POR ENCIMA O DEBAJO DE 16 MB.  *\n.* *                        DEL AREA OBTENIDA POR GETMAIN INICIAL.    *\n.* *                                                                  *\n.* * ERRORES:                                                         *\n.* * -------                                                          *\n.* *                                                                  *\n.* * - EN CASO DE ERROR EN GETMAIN, SE TENDRA EN CUENTA QUE LA CESION *\n.* *   SE EFECTUA SIN COMPLETAR LOS ENCADENAMIENTOS STANDARD DE SAVES *\n.* *   POR LO QUE SE PONDRA ESPECIAL CUIDADO EN LAS INSTRUCCIONES A   *\n.* *   REALIZAR, FINALIZANDO CON MACRO    -FIN   CR,TIPO=ERROR -      *\n.* *                                                                  *\n.* ***************************************** DOMINGUEZ   JULIO-1983 ***\n         LCLA  &INIA,&INID\n         LCLC  &INIC\n         GBLA  &SBP,&SBA,&CAP,&SAC,&SAV\n.*\n&SBP     SETA  0\n&SBA     SETA  0\n&CAP     SETA  0\n&SAV     SETA  0\n.*\n         AIF   ('&NOMBRE' EQ '').NOMBRE1\n         AIF   ('&NOMBRE'(1,1) LT 'A').NOMBRE2\n         AIF   ('&NOMBRE'(1,1) GT 'Z').NOMBRE2\n         AIF   (K'&NOMBRE GT 8).NOMBRE3\n         AIF   (N'&R EQ 0 OR N'&R GT 10).R1\n         AIF   ('&R(1)' EQ '').R2\n         AIF   (T'&R(1) NE 'N').R3\n         AIF   ('&TIPO' EQ 'RENT').LB0\n         AIF   ('&TIPO' NE 'NORENT').TIPO1\n.LB0     ANOP\n         AIF   ('&SUBPOOL' EQ '').LB1\n         AIF   (K'&SUBPOOL GT 3).SUBPOO1\n         AIF   (T'&SUBPOOL NE 'N').SUBPOO2\n         AIF   (&SUBPOOL GT 255).SUBPOO3\n         AIF   (&SUBPOOL LE 127).LB1\n         MNOTE 000,'----------------------------------------------'\n         MNOTE 000,' --NOTA--  SUBPOOL SOLICITADO SUPERIOR A 127. '\n         MNOTE 000,'----------------------------------------------'\n.LB1     ANOP\n         AIF   ('&COMEN' EQ '').LB2\n         AIF   (K'&COMEN GT 40).COMEN1\n         AIF   ('&COMEN'(1,1) NE '''').COMEN2\n&INIA    SETA  K'&COMEN\n&INIA    SETA  &INIA-2\n&INIC    SETC  '&COMEN'(2,&INIA)\n.LB2     ANOP\n         AIF   ('&TIPO' EQ 'NORENT').LB3\n         AIF   ('&PDIN' EQ '').PDIN1\n         AIF   ('&FDIN' EQ '').FDIN1\n.LB3     ANOP\n* ---------------------------------------------------------------------\n* *   V.S.I.             INICIALIZACION DE PROGRAMAS O.S.             *\n* ---------------------------------------------------------------------\n&NOMBRE  CSECT\n.*\n         AIF   ('&AMODE' EQ '').AM1\n&NOMBRE  AMODE &AMODE\n.AM1     ANOP\n         AIF   ('&RMODE' EQ '').RM1\n&NOMBRE  RMODE &RMODE\n.RM1     ANOP\n         AIF   ('&EQUREG' NE 'SI').EQ1\nR0       EQU   0\nR1       EQU   1                  ----- ATENCION -----\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4                  DEVUELVE LA LISTA DE PARAMETROS\nR5       EQU   5\nR6       EQU   6                  DIRECCIONADA EN  --  R2  --.\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.EQ1     ANOP\n.*\n         USING &NOMBRE,R15\n         B     L&SYSNDX\n         DC    AL1(I&SYSNDX-*)\n         DC    CL8'&NOMBRE'\n         DC    CL8'_&VERSION'\n         DC    C'_BBVA'\n         DC    C'(&SYSDATC./&SYSTIME./&SYSJOB)'\n         AIF   ('&COMEN' EQ '').LB00A\n         DC    C'_&INIC'\n.LB00A   ANOP\n         DC    C'_&SYSASM._&SYSVER.'\n&SAC     SETA  &SAC+1\nI&SYSNDX EQU   *\n         AIF   ('&TIPO' EQ 'RENT').LB00B\n         AIF   ('&SAC' NE '1').LB00D\nSAVE     DS    18F\nCR       DC    X'00'\n         AGO   .LB00C\n.LB00D   ANOP\nSAVE&SAC DS    18F\nCR&SAC   DC    X'00'\n         AGO   .LB00C\n.LB00B   ANOP\n@LGDIN&SAC EQU &FDIN-&PDIN        LONGITUD EN OCTETOS AREA DINAMICA\n.LB00C   ANOP\nL&SYSNDX DS    0H\n.*\n         AIF   ('&SAVE' NE 'SI').SA1\n&SAV     SETA  1\n         STM   R14,R12,12(R13)    SAVE REGISTROS TAREA ANTERIOR\n.SA1     ANOP\n&CAP     SETA  0\n         AIF   ('&CAPPING' NE 'SI').LB01AA\n&CAP     SETA  1\n         LA    R&R(1),*+6          CAPPING\n         BSM   R14,R&R(1)          CAPPING\n         AIF   ('&SAVE' NE 'SI').LB01AA\n         STCM  R14,B'1111',12(R13) CAPPING\n.LB01AA  ANOP\n         DROP  R15\n         LR    R2,R1              R2 DIRECCIONA LISTA PARM\n         LR    R&R(1),R15         DIRECCIONAR PRIMER REG.BASE\n         USING &NOMBRE,R&R(1)     USING A NOMBRE DE PROGRAMA\n.* ------------------------- REGISTROS BASE ADICIONALES\n.A0      ANOP\n&INIA    SETA  1\n&INID    SETA  0\n.A1      ANOP\n&INIA    SETA  &INIA+1\n&INID    SETA  &INID+4096\n         AIF   (&INIA GT N'&R).FIN1\n         USING &NOMBRE+&INID,R&R(&INIA)\n         LA    R&R(&INIA),2048(,R&R(&INIA-1))\n         LA    R&R(&INIA),2048(,R&R(&INIA))\n         AGO   .A1\n.* --------------------------------\n.FIN1    ANOP\n         TITLE '@@&NOMBRE @@ &INIC '\n.*\n         AIF   ('&TIPO' EQ 'RENT').LB01\n.*\n         AIF   ('&SAC' NE '1').LB0D\n         MVI   CR,X'00'           CODIGO DE RETORNO A CEROS\n         LA    R1,SAVE            ENCADENAMIENTO\n         AGO   .LB0C\n.LB0D    ANOP\n         MVI   CR&SAC,X'00'       CODIGO DE RETORNO A CEROS\n         LA    R1,SAVE&SAC        ENCADENAMIENTO\n.LB0C    ANOP\n         ST    R13,4(,R1)         STANDARD\n         AIF   ('&SAVE' NE 'SI').SA2\n         ST    R1,8(,R13)         DE LAS\n.SA2     ANOP\n         LR    R13,R1             SAVE AREAS\n         AGO   .FIN\n.*\n.LB01    ANOP\n         USING &PDIN,R13          USING AREA DINAMICA CON R13\n.* - - - - - - - - - - - - - - - - -\n         L     R15,=A(@LGDIN&SAC)  LONGITUD DEL AREA DINAMICA\n&SBA     SETA  1\n         AIF   ('&SUBPOOL' EQ '').LB02\n         AIF   (&SUBPOOL LE 127).LB02A\n         AIF   ('&AUTH' EQ 'NO').LB02A\n&SBA     SETA  0\n         AUTORIZA AUTHON\n         MODESET  KEY=ZERO,MODE=SUP\n.LB02A   ANOP\n         AIF   ('&LOC' EQ '').LB02B\n         L     R15,=A(@LGDIN&SAC)  LONGITUD DEL AREA DINAMICA\n         GETMAIN R,LV=(15),SP=&SUBPOOL,LOC=&LOC PET.EN SUBPOOL INDICADO\n         AGO   .LB02C\n.LB02B   ANOP\n         L     R15,=A(@LGDIN&SAC)  LONGITUD DEL AREA DINAMICA\n         GETMAIN R,LV=(15),SP=&SUBPOOL PET. EN SUBPOOL INDICADO\n.LB02C   ANOP\n&SBP     SETA  &SUBPOOL\n         AGO   .LB03\n.LB02    ANOP\n         AIF   ('&LOC' EQ '').LB02D\n         L     R15,=A(@LGDIN&SAC)  LONGITUD DEL AREA DINAMICA\n         GETMAIN R,LV=(15),LOC=&LOC GETMAIN SIN SUBPPOL EXPLICITO\n         AGO   .LB03\n.LB02D   ANOP\n         L     R15,=A(@LGDIN&SAC)  LONGITUD DEL AREA DINAMICA\n         GETMAIN R,LV=(15)         GETMAIN SIN SUBPPOL EXPLICITO\n.LB03    ANOP\n         AIF   ('&ERRGET' EQ '').ERRG1\n.*\n         LTR   R15,R15             GETMAIN CORRECTA ?\n         BNZ   &ERRGET             NO, BIFURCACION A LABEL DE USUARIO\n.*\n         LR    R4,R1               CEROS BINARIOS\n         L     R5,=A(@LGDIN&SAC)   LONGITUD DEL AREA DINAMICA\n         SR    R15,R15             DINAMICA\n         MVCL  R4,R14              OBTENIDA\n.*\n         LR    R15,R13             ENCADENAMIENTO\n         LR    R13,R1              STANDARD\n         ST    R15,4(R13)          DE LAS\n         AIF   ('&SAVE' NE 'SI').FIN\n         ST    R13,8(R15)          SAVE AREAS\n         AGO   .FIN\n.NOMBRE1 MNOTE 255,'FALTA NOMBRE PARA CSECT. '\n         MEXIT\n.NOMBRE2 MNOTE 255,'PRIMERA POSICION NOMBRE ERROR '\n         MEXIT\n.NOMBRE3 MNOTE 255,'EXCESIVA LONGITUD DE NOMBRE. '\n         MEXIT\n.R1      MNOTE 255,'EXCESIVO NUMERO DE REGISTROS BASE. '\n         MEXIT\n.R2      MNOTE 255,'FALTA AL MENOS UN REGISTRO BASE. '\n         MEXIT\n.R3      MNOTE 255,'REGISTROS BASE NO NUMERICOS. '\n         MEXIT\n.SUBPOO1 MNOTE 255,'LONGITUD SUBPOOL INCORRECTA (TRES POSICIONES). '\n         MEXIT\n.SUBPOO2 MNOTE 255,'SUBPOOL INCORRECTO (NO NUMERICO). '\n         MEXIT\n.SUBPOO3 MNOTE 255,'SUBPOOL INCORRECTO (SUPERIOR A 255).'\n         MEXIT\n.TIPO1   MNOTE 255,'TIPO INCORRECTO (ADMITIDOS RENT/NORENT). '\n         MEXIT\n.ERRG1   MNOTE 255,'FALTA LABEL PARA ERRORES EN GETMAIN. '\n         MEXIT\n.COMEN1  MNOTE 255,'EXCESIVA LONGITUD DE COMENTARIO. (40 CHAR MAX.) '\n         MEXIT\n.COMEN2  MNOTE 255,'EL COMENTARIO DEBER IR ENTRE COMILLAS. '\n         MEXIT\n.PDIN1   MNOTE 255,'FALTA NOMBRE DE DSECT PRINCIPIO AREA DINAMICA. '\n         MEXIT\n.FDIN1   MNOTE 255,'FALTA NOMBRE DE LA EQU DE FIN DE AREA DINAMICA. '\n         MEXIT\n.FIN     ANOP\n         ACTR  12\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDALDIN": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00G\\x00\\x99\\x08/\\x01\\x061\\x7f\\x15T\\x04\\x93\\x04\\x98\\x04\\x93\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-23T00:00:00", "modifydate": "2006-11-13T15:54:47", "lines": 1171, "newlines": 1176, "modlines": 1171, "user": "U0Z72B6"}, "text": "         TITLE 'DYNAMIC ALLOCATION INTERFACE'\n* ZOS170A\n*\n*   CREATE A VERB TABLE ENTRY\n*\n         MACRO\n         VENT  &VERB,&NUMBER\n         LCLA  &LABEL\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    AL1(&NUMBER)\n#&LABEL  DC    C'&VERB'\n         MEND\n         SPACE 3\n*\n*   CREATE A KEYWORD TABLE ENTRY\n*   &KEYWORD  - THE DYNAM KEYWORD\n*   &UAL      - THE DYNAM KEYWORD UNAMBIGOUS LENGTH\n*   &KEY      - THE SVC99 TEXT UNIT KEY\n*   &PARM     - THE SVC99 TEXT UNIT PARM\n*   &PARMLEN  - THE SVC99 TEXT UNIT PARM LENGTH\n*\n         MACRO\n         KENT  &KEYWORD,&UAL,&KEY,&PARM,&PARMLEN\n         GBLA  &OFFSET\n         LCLA  &LABEL\n         LCLC  &LEN\n&LEN     SETC  '0'\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    X'&UAL'\n         AIF   (T'&PARM EQ 'O').NOPARM\n         AIF   ('&PARM' NE 'SUBTABLE').KENT003\n         DC    AL1(&OFFSET+240)\n&OFFSET  SETA  &OFFSET+1\n&LEN     SETC  '1'\n         AGO   .KENT001\n.KENT003 ANOP\n         DC    X'&PARM'\n&LEN     SETC  '1'\n         AGO   .KENT001\n.NOPARM  ANOP\n         DC    AL1(0)\n.KENT001 ANOP\n         AIF   (T'&PARMLEN EQ 'O').KENT002\n&LEN     SETC  '&PARMLEN'\n.KENT002 ANOP\n         DC    AL1(&LEN)\n         DC    AL2(&KEY)\n#&LABEL  DC    C'&KEYWORD'\n         MEND\n         EJECT\n*\n*   CREATE A KEYWORD HASH TABLE ENTRY\n*\n         MACRO\n         BEGIN &CHAR\nBEGIN&CHAR DS  0X\n         MEND\n         SPACE 3\n*\n*   CREATE THE KEYWORD TABLE HASH INDEX\n*\n         MACRO\n         INDEX\nKYWDINDX DS    0F                 ALIGN ON FULLWORD BOUNDARY\n         DC    A(BEGINA)\n         DC    A(BEGINB)\n         DC    A(BEGINC)\n         DC    A(BEGIND)\n         DC    A(BEGINE)\n         DC    A(BEGINF)\n         DC    A(BEGING)\n         DC    A(BEGINH)\n         DC    A(BEGINI)\n         DC    7A(0)\n         DC    A(BEGINJ)\n         DC    A(BEGINK)\n         DC    A(BEGINL)\n         DC    A(BEGINM)\n         DC    A(BEGINN)\n         DC    A(BEGINO)\n         DC    A(BEGINP)\n         DC    A(BEGINQ)\n         DC    A(BEGINR)\n         DC    8A(0)\n         DC    A(BEGINS)\n         DC    A(BEGINT)\n         DC    A(BEGINU)\n         DC    A(BEGINV)\n         DC    A(BEGINW)\n         DC    A(BEGINX)\n         DC    A(BEGINY)\n         DC    A(BEGINZ)\n         MEND\n         EJECT\n*\n*   BEGIN A NEW SUBTABLE\n*   SET COUNT OF # OF ENTRIES FOR PREVIOUS SUBTABLE\n*   REMEMBER ENTRY POINT\n*\n         MACRO\n         BEGINSUB                 &SUBNAME\n         GBLC  &SUBLIST(30)       LIST OF SUBTABLE ENTRIES\n         GBLA  &SUBCT(30)         LIST OF SUBTABLE ENTRY COUNTS\n         GBLA  &SUBINDX           CURRENT SUBTABLE\n         GBLA  &SUBSENT           # ENTRIES IN CURRENT SUBTABLE\n         AIF   (&SUBINDX EQ 0).SUB0001 FIRST INVOCATION\n&SUBCT(&SUBINDX) SETA &SUBSENT\n&SUBSENT SETA  0\n.SUB0001 ANOP\n&SUBINDX SETA  &SUBINDX+1\n&SUBLIST(&SUBINDX) SETC '&SUBNAME'\n&SUBNAME DS    0X\n         MEND\n         SPACE 3\n*\n*   ADD LAST SUBTABLE DEFINITION TO SUBTABLE LIST\n*\n         MACRO\n         ENDSUB\n         GBLA  &SUBCT(30)\n         GBLA  &SUBINDX\n         GBLA  &SUBSENT\n&SUBCT(&SUBINDX) SETA &SUBSENT\n         MEND\n         EJECT\n*\n*       GENERATE THE INDEX FOR ALL SUBTABLES\n*\n         MACRO\n&LABEL   SUBINDEX\n         GBLC  &SUBLIST(30)\n         GBLA  &SUBCT(30)\n         GBLA  &SUBINDX\n         LCLA  &X\n         AIF   (&SUBINDX LE 15).NOERR\n         MNOTE 16,'ONLY 16 SUBTABLES PERMITTED'\n.NOERR   ANOP\n&LABEL   DS    0F\n.LOOP    ANOP\n         AIF   (&X EQ &SUBINDX).#1\n&X       SETA  &X+1\n         DC    AL1(&SUBCT(&X)),AL3(&SUBLIST(&X))\n         AGO   .LOOP\n.#1      ANOP\n         MEND\n         SPACE 3\n*\n*   BUILD AN ENTRY IN A SUBTABLE\n*\n         MACRO\n         SENT  &KEY,&VALUE\n         GBLA  &SUBSENT\n         LCLA  &LABEL\n&SUBSENT SETA  &SUBSENT+1\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    XL2'&VALUE'\n#&LABEL  DC    C'&KEY'\n         MEND\n         EJECT\n*\n*   BUILD A TABLE USED TO BUILD A DICB\n*\n         MACRO\n&LABEL   DICBTAB1\n&LABEL   DS    0H\n         DC    X'000400010008',XL8'00' DDNAME\n         DC    X'00050001002C',XL44'00' DSNAME\n         DC    X'000600010008',XL8'00' MEMBER NAME\n         DC    X'000700010001',X'00' STATUS\n         DC    X'000800010001',X'00' DISPOSITION\n         DC    X'000900010001',X'00'  CONDITIONAL DISPOSITION\n         DC    X'000A00010002',XL2'00' DSORG\n         DC    X'000B00010002',XL2'00' LIMIT SPECIFICATION\n         DC    X'000C00010001',X'00' ATTRIBUTE SPECIFICATION\n         DC    X'000D00010001',X'00' LAST ENTRY SPECIFICATION\n         DC    X'000E00010001',X'00' DATA SET TYPE\n         MEND\n         MACRO\n&LABEL   DICBTAB2\n&LABEL   DS    0H\n         DC    X'005500010008',XL8'00' DDNAME\n         DC    X'00560001002C',XL44'00' DSNAME\n         DC    X'005700010002',XL2'00' DSORG\n         DC    X'005D00010006',XL6'00' VOLSER\n         MEND\n         EJECT\n***********************************************************************\n*\n*   THIS ROUTINE PROVIDES AN INTERFACE BETWEEN A HIGH LEVEL\n*   LANGUAGE SUCH AS FORTRAN, PL/1 OR COBOL, AND THE OPERATING\n*   SYSTEM DYNAMIC ALLOCATION ROUTINES.\n*\n*   INSTALLATION: UNIVERSITY OF MANITOBA COMPUTER CENTRE\n*   AUTHOR:       GERRY DUECK\n*   DATE WRITTEN: SUMMER 1978\n*   MODS:         ADDITION OF ALLOCR VERB.\n*                 LOTS OF MUCKING ABOUT TO MAKE THIS PROGRAM\n*                 CONSISTENT WITH ITS DOCUMENATION.\n*                   ROD ZAZUBEK FEB 1979\n*   DOCUMENTATION: COMPLETE DOCUMENTATION ON THE USE OF DYNAM IS\n*                  AVAILABLE IN SYS4.DOCUMENT.TEXT(DYNAM)\n*   ATTRIBUTES:   RENT\n*   HINTS:        PUT THIS PROGRAM SOMEWHERE IN THE LINK LIST.\n*\n*   PARAMETERS\n*      1 - WORK AREA. THE FIRST WORD OF THIS WORK AREA MUST CONTAIN\n*          THE LENGTH OF THE AREA. A MINIMUM OF 100 BYTES IS REQUIRED.\n*          IF THE LENGTH IS ZERO, AND 'INIT' IS NOT SPECIFIED (SEE\n*          PARM 2) THEN A WORK AREA IS OBTAINED AND USED FOR THIS\n*          CALL ONLY. THE WORKAREA IS FREED BEFORE RETURNING TO THE\n*          CALLER.\n*      2 - REQUEST VERB. THIS FIELD IS DELIMITED BY A BLANK.\n*          IF THE REQUEST VERB IS 'INIT' THEN ALL THIS CALL\n*          DOES IS TO ALLOCATE A WORK AREA FOR SUBSEQUENT\n*          CALLS. IF THE VERB IS 'END' THEN THIS WORK AREA\n*          IS FREED.\n*      3 AND SUBSEQUENT PARAMETERS.\n*        - CHARACTER STRINGS CONSISTING OF KEYWORD/VALUE PAIRS\n*          SEPARATED BY '=' AND DELIMITED BY ' ', ';'.\n*          END OF STRING IS DETERMINED BY ';'\n*          END OF LIST IS INDICATED BY THE HIGH ORDER BIT OF\n*          THE PARAMETER ADDRESS.\n*      AT LEAST 3 PARAMETERS ARE ASSUMED FOR ALL VERBS OTHER THAN\n*      'INIT' AND 'END'\n*\n*   WORK AREA.\n*      THE WORK AREA CONTAINS 5 SECTIONS:\n*         - WORK AREA CONTROL BLOCK.\n*         - DAIRFAIL PARAMETER LIST.\n*         - DYNAMIC ALLOCATION REQUEST BLOCK.\n*         - TEXT UNITS.\n*         - TEXT POINTERS.\n*      THE TEXT POINTERS ARE STACKED AT THE BOTTOM OF THE WORK AREA.\n*      THE TEXT UNITS ARE HEAPED AFTER THE REQUEST BLOCK.\n*\n*  ENTRY OPTIONS:\n*     IF VERB = 'INIT' THEN\n*        GET WORK AREA\n*        PLACE ADDRESS IN PARM 1\n*        SET FIRST BYTE OF PARM 1 TO X'0F' TO INDICATE\n*           THAT THIS IS A GETMAINED AREA\n*        RETURN\n*     ELSE IF VERB = 'END' THEN\n*        FREE THE AREA POINTED TO BY PARM ONE\n*        RETURN\n*     ELSE IF PARM 1 = 0 THEN\n*        GETMAIN AREA\n*        PERFORM ALLOCATION\n*        FREMAIN AREA\n*        RETURN\n*     ELSE IF HIGH ORDER BYTE OF PARM 1 IS X'0F' THEN\n*        DEREFENCE WORK AREA POINTER\n*        PERFORM COMMAND\n*     ELSE\n*        PERFORM COMMAND USING USER SUPPLIED WORK AREA\n*\n*   THREE TABLES ARE USED TO BUILD TEXT UNITS FOR SVC99.\n*\n*   VERB TABLE:\n*      THERE ARE ONLY 7 VERBS USED BY SVC99, AND SINCE SOME OF\n*      THESE ARE INFORMATION VERBS (IE THEY RETURN INFO) THEY ARE\n*      NOT SUPPORTED BY THIS INTERFACE SINCE THERE IS NO TRIVIAL\n*      MEANS OF RETURNING INFORMATION TO THE CALLER. THE VERB MUST\n*      BE AT LEAST AS LONG AS THE LENGTH SPECIFIED IN ITS CORRESONDING\n*      TABLE ENTRY. ACCESS TO THIS TABLE IS BY LINEAR SEARCH AND THE\n*      RESULT IS A ONE BYTE FIELD CONTAINING THE VERB CODE. TABLE\n*      ENTRIES ARE OF VARIABLE LENGTH WITH THE FIRST BYTE CONTAINING\n*      THE LENGTH OF THE VARIABLE PART. THE LENGTH OVERHEAD IS 2.\n*\n*   KEYWORD TABLE:\n*      THE KEYWORD TABLE IS VERY LONG, AND THE ENTRIES ARE VARIABLE\n*      LENGTH SO A BINARY SEARCH IS OUT OF THE QUESTION (UNLESS YOU\n*      HAD A TAG POINTING TO EACH TABLE ENTRY -- HMMMMM...) AND A\n*      LINEAR SEARCH IS TOO SLOW. A PRIMITIVE HASH TABLE IS USED\n*      IN WHICH THERE IS AN ENTRY FOR EVERY LETTER AND A POINTER\n*      TO THE FIRST KEYWORD TABLE ENTRY WHOSE KEYWORD STARTS WITH\n*      THAT LETTER. THE KEYWORD TABLE IS SORTED ALPHABETICALLY\n*      AND THE HASH TABLE IS BUILT BY INSERTING A BEGIN MACRO\n*      EVERY TIME A CHANGE IN FIRST LETTER OCCURS. WHEN PERFORMING\n*      A SEARCH ON THIS TABLE, COMPARISONS ARE MADE TO THE LENGTH\n*      OF THE KEYWORD SPECIFIED BY THE USER. WHEN A MATCH IS FOUND,\n*      THE LENGTH OF THE KEYWORD IS COMPARED TO THE MINIMUM LENGTH\n*      SPECIFIED IN THE TABLE ENTRY. IT MUST BE AT LEAST THIS LONG\n*      IN ORDER TO BE UNAMBIGOUS.\n*\n*   KEYWORD SUBTABLE:\n*     SOME OF THE ENTRIES IN THE KEYWORD TABLE REQUIRE MORE INFORMATION\n*      AND FOR THESE A POINTER TO A SUBTABLE IS SUPPLIED. THIS POINTER\n*      IS AN INDEX INTO ANOTHER TABLE MUCH LIKE THE HASH TABLE AND IS\n*      ONLY ONE BYTE, SO ONLY 16 SUBTABLES CAN OCCUR.\n*\n*   BUILDING A TEXT UNIT:\n*      AFTER FINDING THE KEYWORD IN THE KEYWORD TABLE, A VARIETY\n*      OF EVENTS CAN OCCUR. THIS IS BECAUSE IBM IN ITS INFINITE\n*      WISDOM CANNOT DECIDE ON A SIMPLE STRUCTURE FOR TEXT UNITS.\n*      SOME HAVE PARAMETERS THAT ARE PLI TYPE CHAR VAR, SOME ARE\n*      VARIABLE LENGTH BINARY VALUES, SOME HAVE NO PARAMETERS, ETC.\n*      THE FOLLOWING ALGORITHM IS USED TO BUILD THE TEXT UNIT:\n*\n*      IF THE USER SUPPLIED A PARM THEN\n*         IF A NON ZERO LENGTH IS SPECIFIED IN THE KEYWORD TABLE THEN\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH BINARY VALUE\n*         ELSE\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH STRING VALUE\n*      ELIF THE PARM VALUE SUPPLIED IN THE KEYWORD TABLE IS >= X'F0'\n*         CREATE A TEXT UNIT USING THE LENGTH AND VALUE SUPPLIED\n*         IN THE SUBTABLE ENTRY CORRESSPONDING TO THE USER SUPPLIED\n*         VALUE\n*      ELSE\n*         CREATE A TEXT UNIT USING A LENGTH OF 1 AND THE VALUE\n*         SUPPLIED IN THE KEYWORD TABLE\n*\n*      THIS ALGORITHM WORKS WELL ENOUGH EXCEPT FOR TWO KLUGES:\n*      CONCATENATION AND MULTI-VALUED KEYWORDS SUCH AS RECFM.\n*\n*      FOR CONCATENATION, THE TEXT UNIT MUST CONTAIN A VARIABLE\n*      NUMBER OF VARIABLE LENGTH CHARACTER STRINGS SHOVED TOGETHER.\n*      IF A ',' OCCURS AFTER A VALUE,THEN THE NEXT VALUE IS SCANNED AND\n*      CONCATENATED TO THE CURRENT ONE. THIS ASSUMES THAT THE TEXT UNIT\n*      IS ONE FOR WHICH CONCATENATED STRINGS ARE REQUIRED. IT IS UP TO\n*      THE USER TO SUPPLY CORRECT DATA.\n*\n*      FOR THE SPECIAL KEYWORDS RECFM AND OPTCD, EACH LETTER OF THE\n*      VALUE IS INDIVIDUALLY LOOKED UP IN THE SUBTABLE AND THE VALUE\n*      THUS OBTAINED IS OR'ED WITH THE VALUE ALREADY IN THE TEXT UNIT.\n*      IE RECFM=FBA = X'80' | X'10' | X'04' = X'94'\n*\n*   RETURN CODES AND DIAGNOSTICS:\n*      IF THE RETURN CODE FROM SVC99 IS NOT ZERO THEN A PARAMETER\n*      BLOCK FOR DAIRFAIL IS BUILT. DAIRFAIL IS CALLED AND THE\n*      DIAGNOSTIC THAT IT GENERATES IS WRITTEN TO THE JOB LOG (WTP).\n*\n*      THE INTERFACE ALSO HAS ITS OWN RETURNS CODES FOR ERRORS IS\n*      DETECTS IN THE USERS PARAMETER LIST. THESE START AT 4 HIGHER\n*      THAN THE RETURN CODES FROM SVC99.\n*\n*      THE RETURN CODE IS RETURNED BOTH IN REGISTER 15 AND IN THE\n*      SECOND WORD OF THE WORKAREA, IF IT STILL EXISTS AT THE END\n*      OF THE ROUTINE.\n*\n*   SVC99 RETURN CODES (SEE SPL:JOB MANAGEMENT PAGE 34)\n*      00 SUCCESSFULL COMPLETION\n*      04 ENVIRONMENT, RESOURCE FAILURE, SYSTEM ROUTINE\n*      08 REQUEST DENIED BY INSTALLATION VALIDATION ROUTINE\n*      12 INVALID PARAMETER LIST\n*\n*   INTERFACE RETURN CODES\n*      16 INVALID VERB\n*      20 INVALID KEYWORD\n*      24 WORK AREA OVERFLOW\n*      28 VALUE NOT FOUND IN SUBTABLE: INVALID VALUE\n*\n***********************************************************************\n         EJECT\nWORKAREA DSECT\nWALEN    DS    F                  LENGTH OF WORK AREA\nWAS99RC  DS    A                  VALUE OF RETURN CODE FROM SVC 99\nWADWORD  DS    D                  DOUBLE WORD FOR PACKS\nWABOTTOM DS    A                  END OF WORK AREA\nWAKYSTRT DS    A                  START OF KEYWORD\nWAVALAD  DS    A                  START OF VALUE\nWAVBSTRT DS    A                  START OF VERB\nWAS99RB  DS    A                  POINTER TO REQUEST BLOCK\nWADFID   DS    XL2                CALLER IDENTIFIER FOR DAIR FAIL\nWADFDSCT DS    A                  ADDR OF DSECT FOR CALLING DAIR FAIL\nWAZEROES DS    A                  ADDRESS OF IKJEFF02\nWALASTTU DS    A                  ADDRESS OF END OF LAST TEXT UNIT\nWAALLOCR DS    XL1                IS THIS AN ALLOCR VERB\nWATRUE   EQU   X'FF'\nWASAVE   DS    18F                SAVE AREA FOR DAIRFAIL\nWAEND    EQU   *                  END OF DSECT\n         SPACE 1\nVERBTABL DSECT\nVTVLEN   DS    X                  LENGTH OF VERB\nVTVERB   DS    X                  VERB CODE\nVTVSTR   DS    0C                 VERB STRING\nVTVEND   EQU   *\n         SPACE 1\nKYWDTABL DSECT\nKYWDLEN  DS    X                  KEYWORD LENGTH\nKYWDMIN  DS    X                  MINIMUM UNAMBIGOUS LENGTH\nKYWDPARM DS    X                  SPECIAL PARAMETER\nKYNOPARM EQU   X'00'              FLAGS NO PARM\nKYWDPMLN DS    X                  LENGTH OF PARM IF FIXED LENGTH\nKYWDKEY  DS    2X                 KEYWORD KEY\nKYWDSTRG DS    0C                 KEYWORD STRING\n         ORG   KYWDPARM\nKYWDSUBT DS    X                  FLAG A SUBTABLE FOR THIS ENTRY\nKYWDSUBF EQU   X'F0'              FLAGS A SUBTABLE\n         ORG\n         SPACE 1\nVALUTABL DSECT\nVALULEN  DS    X                  LENGTH OF STRING IN THIS ENTRY\nVALUPARM DS    2X                 PARAMETER VALUE FOR TEXT UNIT\nVALUSTRG DS    0C                 ENTRY STRING\n         SPACE 1\nCHAR     DSECT\nCH       DS    C\n         EJECT\nDICB1    DSECT\nDIDDN    DS    XL14               DDNAME\nDIDSN    DS    XL50               DSNAME\nDIMEM    DS    XL14               MEMBER NAME\nDISTAT   DS    XL7                STATUS\nDIDISP   DS    XL7                NORMAL DISPOSITION\nDICDISP  DS    XL7                CONDITIONAL DISPOSITION\nDIDSORG  DS    XL8                DSORG\nDILIMIT  DS    XL8                NUMBER RESOURCES TO BE FREED\nDIATTR   DS    XL7                ATTRIBUTE SPECIFICATION\nDILAST   DS    XL7                LAST ENTRY SPECIFICATION\nDITYPE   DS    XL7                DATA SET TYPE (DUMMY,TERMINAL,OTHER)\nDILEN1   EQU   *-DICB1\nDICB2    DSECT\nDIDDN2   DS    XL14\nDIDSN2   DS    XL50\nDIDSORG2 DS    XL8\nDIVOL2   DS    XL12\nDILEN2   EQU   *-DICB2\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJEFFDF DFDSECT=YES\n         EJECT\n@WA      EQU   11                 BASE ADDRESS FOR WORK AREA\n@RB      EQU   10                 BASE ADDRESS FOR REQUEST BLOCK\n@TP      EQU   9                  BASE ADDRESS FOR TEXT POINTERS\n@TU      EQU   8                  TEXT UNIT\n@CH      EQU   7                  POINTER INTO PARM STRING\n@VTE     EQU   6                  VERB TABLE ENTRY\n@KTE     EQU   6                  KEYWORD TABLE ENTRY\nLENGTH   EQU   5\n@DF      EQU   5                  BASE ADDRESS FOR DFDSECT\n         SPACE 1\nMDALDIN  CSECT\n         USING MDALDIN,12         ADDRESSIBILITY FOR CSECT\n         SAVE  (14,12),,ZOS170A_COPYRIGHT(R)_ASI_&SYSDATE._&SYSTIME\n         LR    R12,R15            GET BASE FOR CSECT\n         SPACE 1\n         USING WORKAREA,@WA       ADDRESSIBILITY FOR WORK AREA\n         USING S99RB,@RB          ADDRESSIBILITY FOR REQUEST BLOCK\n         USING S99TUPL,@TP        ADDRESSIBILITY FOR TEXT POINTERS\n         USING S99TUNIT,@TU       ADDRESSIBILITY FOR TEXT UNITS\n         USING CHAR,@CH\n         USING VERBTABL,@VTE      ADDRESSIBILITY FOR VERB TABLE\n         USING DFDSECTD,@DF       ADDRESSIBILITY FOR DAIRFAIL DSECT\n         SPACE 1\n*\n**   DECODE ENTRY OPTIONS\n*\n         L     R2,4(R1)           ADDRESS OF VERB\n         CLC   0(4,R2),=C'INIT'\n         BE    INITCODE\n         CLC   0(3,R2),=C'END'\n         BE    ENDCODE\n         L     @WA,0(R1)          ADDRESS OF WORK AREA\n         OC    WALEN,WALEN        IS IT 0?\n         BNZ   WORKGOT            NOPE\n         LR    R2,R1              SAVE R1\n         GETMAIN R,LV=2048\n         L     R3,0(R2)           ADDR OF PARM 1\n         ST    R1,0(R3)           SAVE ADDRESS\n         MVI   0(R3),X'0E'        MARK TO BE FREED AFTER ALLOCATE\n         L     @WA,0(R3)          GET ADDRESS\n         LA    R3,2048            LENGTH OF WORKAREA\n         ST    R3,WALEN           SET LENGTH\n         LR    R1,R2              RESTORE R1\n         B     WORKSET\nWORKGOT  CLI   WALEN,X'0F'        IS THIS THE ADDRESS OF A WORK AREA?\n         BNE   WORKSET            NOPE, USER SUPPLIED AREA\n         L     @WA,WALEN          YES, DEREFENCE IT\nWORKSET  DS    0H\n*\n**   SET UP WORK AREA\n*\n         L     @TP,WALEN          GET LENGTH\n         LR    R2,@WA             ADDRESS OF WORK AREA\n         LR    R3,@TP             LENGTH\n         LR    R4,R2              FROM ADDR FOR ZAP\n         XR    R5,R5\n         MVCL  R2,R4              ZAP WORK AREA\n         LR    R15,R13            ADDR OF CALLERS SAVE\n         LA    R13,WASAVE\n         ST    R13,8(R15)         FORE LINK\n         ST    R15,4(R13)         BACK LINK\n         ST    @TP,WALEN\n         AR    @TP,@WA            + ADDRESS = END OF WORK AREA\n         ST    @TP,WABOTTOM\n         LA    @RB,WAEND          BEGINNING OF REQUEST BLOCK\n         ST    @RB,WADFDSCT       ADDRESS OF DFDSECTD\n         LA    @RB,DFLEN(@RB)     POINT PAST DFDSECTD\n         ST    @RB,WAS99RB        ADDRESS OF REQUEST BLOCK\n         LA    @TU,S99RBEND       BEGINNING OF TEXT UNIT HEAP\n         MVI   S99RBLN,X'14'      LENGTH OF RB\n*\n**  EXAMINE THE VERB PARAMETER\n*\n         L     @CH,4(R1)          GET SECOND PARM\n         LA    @VTE,VERBTAB       FIRST ENTRY IN VERB TABLE\n         SR    R2,R2\nVERBLOOP DS    0H\n         C     @VTE,VERBTEND      END OF TABLE?\n         BE    FAILVERB           YES, VERB NOT FOUND\n         IC    R2,VTVLEN          GET LENGTH OF VERB\n         BCTR  R2,0               LESS 1\n         EX    R2,VERBCLC         MATCH?\n         BE    VERBPOOL           YES\n         LA    @VTE,VTVSTR+1(R2)  GET NEXT ENTRY\n         B     VERBLOOP\nVERBCLC  CLC   VTVSTR,CH\nVERBPOOL DS    0H\n         CLC   CH(6),=C'ALLOCR'   VERB = ALLOCR?\n         BNE   VERBEND\n         MVI   WAALLOCR,WATRUE    SET ALLOCR FLAG\nVERBEND  DS    0H\n         MVC   S99VERB,VTVERB     MOVE IN VERB CODE\n*\n*  SCAN OFF KEYWORD PARAMETERS.\n*\n         CLI   4(R1),X'80'        END OF PARM LIST?\n         BE    FAILKEY\n         LA    R1,8(R1)           POINT TO THIRD PARAMETER\n         CLI   S99VERB,S99VRBIN   VERB = INFO?\n         BE    RETINFO            YUP\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?\n         BE    RETALLOC\n         B     PARMLOOP           NOPE, START LOOP\n*\n**   SET UP THE TEXT UNITS FOR DYNAMIC INFORMATION RETRIEVAL\n**   THIS IS FOR THE INFO AND ALLOCR VERBS\n*\nRETINFO  DS    0H\n         LA    R2,DILEN1(@TU)     POINT TO END OF DICB\n         MVC   0(DILEN1,@TU),DICBS1 MOVE IN MODEL TEXT UNITS\n         B     RETLOOP\nRETALLOC DS    0H\n         LA    R2,DILEN2(@TU)     POINT TO END OF DICB2\n         MVC   0(DILEN2,@TU),DICBS2 MOVE IN MODEL TEXT UNITS\nRETLOOP  DS    0H\n         S     @TP,=F'4'          POINT TO TUPTR ENTRY\n         ST    @TU,S99TUPTR       SET POINTER\n         LH    R3,S99TULNG        GET LENGTH OF PARM FIELD\n         LA    @TU,S99TUPAR(R3)   POINT TO NEXT TEXT UNIT\n         CR    @TU,R2             END OF DICB?\n         BNE   RETLOOP\n         CLI   0(R1),X'80'        LAST PARM?\n         BE    PARMPOOL           YES\n         LA    R1,4(R1)           POINT TO NEXT PARM\nPARMLOOP DS    0H\n         L     @CH,0(R1)          GET ADDRESS OF STRING\n         LA    @CH,0(@CH)         ZERO TOP BYTE\nSTRINGLP DS    0H                 START OF STRING LOOP\nSTRING01 DS    0H\n         CLI   CH,C';'            END OF STRING\n         BE    STRINGPL           YES, GOTO END OF STRING LOOP\n         CLI   CH,C','            COMMA?\n         BE    STRING02\n         CLI   CH,C' '            BLANK?\n         BNE   STRING03\nSTRING02 LA    @CH,1(@CH)         GET NEXT CHAR\n         B     STRING01\nSTRING03 DS    0H\n         LA    R2,15             LENGTH OF LONGEST KEYWORD\n         ST    @CH,WAKYSTRT       SAVE START ADDRESS\nKEYSLOOP DS    0H\n         CLI   CH,C'='            END OF KEYWORD?\n         BE    KEYSPOOL\n         CLI   CH,C','\n         BE    KEYSPOOL\n         CLI   CH,C';'\n         BE    KEYSPOOL\n         CLI   CH,C' '\n         BE    KEYSPOOL\n         LA    @CH,1(@CH)         GET NEXT CHAR\n         BCT   R2,KEYSLOOP\n         B     FAILKEY            KEY WORD FAILED\n         USING KYWDTABL,@KTE      ADDRESSIBILITY FOR KEY WORD TABLE\nKEYSPOOL DS    0H\n*\n** KEYWORD - SCAN OFF AND LOOK UP A KEYWORD\n*\nKEYWORD  DS    0H\n         L     R3,WAKYSTRT        GET FIRST CHR IN WORD\n         CLI   0(R3),C'A'\n         BL    FAILKEY            INVALID KEYWORD\n         CLI   0(R3),C'Z'\n         BH    FAILKEY            INVALID KEYWORD\n         IC    R2,0(R3) GET FIRST CHAR\n         S     R2,=F'193'         SUBTRACT OFF VALUE OF 'A'\n         SLL   R2,2               TIMES 4\n         L     @KTE,KYWDINDX(R2)  GET ADDRESS OF FIRST ENTRY WITH\n*                                 SAME FIRST LETTER\n         LR    LENGTH,@CH\n         S     LENGTH,WAKYSTRT    LENGTH OF KEYWORD\n         BCT   LENGTH,KEYLOOP     LESS ONE FOR EXECUTE\n         B     FAILKEY\nKEYLOOP  DS    0H\n         CLC   KYWDSTRG(1),0(R3)  CHECK FIRST CHAR\n         BNE   FAILKEY            NO LONGER IN CORRECT PART OF TABLE\n         EX    LENGTH,KEYCLC      COMPARE KEYWORD TO ENTRY\n         BE    KEYPOOL\n         IC    R2,KYWDLEN         GET LENGTH OF ENTRY\n         LA    @KTE,KYWDSTRG(R2)  GET NEXT ENTRY\n         B     KEYLOOP\nKEYCLC   CLC   KYWDSTRG,0(R3)\nKEYPOOL  DS    0H\n         IC    R2,KYWDMIN         GET MIMINUM UNAMBIGOUS LENGTH\n         LA    LENGTH,1(LENGTH)   LENGTH :=+ 1\n         CR    LENGTH,R2          CHECK LENGTH\n         BL    FAILKEY            KEY WORD TOO SHORT\n         MVC   S99TUKEY,KYWDKEY\n         LA    R4,S99TULNG        ADDRESS OF LENGTH FIELD\n         ST    R4,WALASTTU        SAVE IT\n         CLI   CH,C'='            DID THE USER SUPPLY A PARM\n         BNE   SPECPARM           IF NOT, THEN PARM IS IN TABLE\nVALUNEXT DS    0H\n         LA    @CH,1(@CH)         POINT PAST '='\n         ST    @CH,WAVALAD\nVALULOOP DS    0H\n         CLI   CH,C' '            BLANK?\n         BE    VALUPOOL           YES, END OF VALUE\n         CLI   CH,C','            COMMA?\n         BE    VALUPOOL           YES, END OF VALUE\n         CLI   CH,C';'            SEMI?\n         BE    VALUPOOL           YES, END OF VALUE\n         LA    @CH,1(@CH)         GET NEXT VALUE\n         B     VALULOOP\nVALUPOOL DS    0H\n         LR    LENGTH,@CH\n         S     LENGTH,WAVALAD     LENGTH OF VALUE\n         L     R4,WALASTTU\n         STH   LENGTH,0(R4)       SAVE LENGTH\n         BCTR  LENGTH,0\n         BM    TEXTNUM            DONT MOVE VALUE IF NULL\n         L     R3,WAVALAD         GET START OF VALUE\n         CLI   KYWDSUBT,KYWDSUBF  IS THERE A SUBTABLE?\n         BNL   SUBTLKUP           YES\n         CLI   KYWDPMLN,KYNOPARM  IS THERE A LENGTH SUPPLIED?\n         BNE   CONVALUE\n         L     R4,WALASTTU\n         LA    R4,2(R4)           POINT TO PARAMETER FIELD\n         EX    LENGTH,VALUEMVC\n         B     TEXTNUM\nVALUEMVC MVC   R0(0,R4),0(R3)\nSUBTLKUP DS    0H\n@SUBT    EQU   4\n*\n**   R3 POINTS TO VALUE\n**   R2 # OF ENTRIES IN SUBTABLE\n**   R15 USED FOR IC,STC\n*\n         XR    R15,R15\n         XR    R2,R2\n         IC    R2,KYWDSUBT        GET SUBTABLE INDEX POINTER\n         N     R2,=F'15'          GET RID OF FLAG BITS\n         SLL   R2,2               TIMES 4\n         L     @SUBT,VALUINDX(R2) ADDR OF SUBTABLE\n         USING VALUTABL,@SUBT     ADDRESSIBILITY FOR SUBTABLE ENTRIES\n         IC    R2,VALUINDX(2)     # ENTRIES IN SUBTABLE\n         CLC   KYWDSTRG(5),=C'RECFM' SPECIAL CASE FOR RECFM\n         BE    SPECCASE\n         CLC   KYWDSTRG(5),=C'OPTCD' AND FOR OPTION CODE\n         BE    SPECCASE\nSUBTLOOP DS    0H\n         EX    LENGTH,SUBTCLC     COMPARE ENTRIES\n         BE    SUBTPOOL           ENTRY FOUND\n         IC    R15,VALULEN        GET LENGTH OF THIS ENTRY\n         LA    @SUBT,VALUSTRG(R15) GET NEXT ENTRY\n         BCT   R2,SUBTLOOP        REPEAT IF NOT AT END OF TABLE\n         B     FAILVALU\nSUBTPOOL DS    0H\n         LA    LENGTH,1(LENGTH)   LENGTH +:= 1\n         CR    LENGTH,R15         CORRECT VALUE LENGTH\n         BNE   FAILVALU\n         IC    R2,KYWDPMLN        GET PARM LENGTH\n         STC   R2,S99TULNG+1      SAVE IT IN TEXT UNIT\n         IC    R2,CONVMASK(R2)    GET STCM MASK\n         ICM   R3,3,VALUPARM      GET VALUE\n         EX    R2,CONVSTCM        STCM R3,CONVMASK(R2),S99TUPAR\n         B     TEXTNUM\nSUBTCLC  CLC   VALUSTRG,0(R3)\n*\n**   THIS CODE HANDLES THE SPECIAL CASE FOR KEYWORDS THAT CAN HAVE\n**   MORE THAN ONE VALUE SPECIFIED. EG 'RECFM=FBA'.\n**   THE INDIVIDUAL VALUES ARE OR'ED TOGETHER\n*\nSPECCASE DS    0H\n         LR    R0,@SUBT           SAVE ADDR OF START OF SUBTABLE\n         LR    R15,R2             SAVE # SUBTABLE ENTRIES\n         L     @CH,WAVALAD        POINT TO FIRST VALUE\n         LA    LENGTH,1(LENGTH)   CORRECT LENGTH\nSPECLOOP DS    0H\n         CLC   CH,VALUSTRG        COMPARE CHAR WITH VALUE STRING\n         BE    SPECPOOL           FOUND\n         LA    @SUBT,VALUSTRG+1   NEXT ENTRY\n         BCT   R2,SPECLOOP        REPEAT WITH NEW ENTRY\n         B     FAILVALU           NO MORE ENTRIES LEFT\nSPECPOOL DS    0H\n         OC    S99TUPAR(1),VALUPARM+1\n         LA    @CH,CH+1           NEXT CHAR IN USER SUPPLIED VALUE\n         LR    @SUBT,R0           RESTORE SUBTABLE ADDR\n         LR    R2,R15             RESTORE SUBTABLE ENTRY COUNT\n         BCT   LENGTH,SPECLOOP\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH\n         B     TEXTNUM            FINISHED\n*\n**   SUPPLY THE PARAMETER VALUE FOR THE TEXT UNIT FROM THE KEYWRD TABLE\n*\nSPECPARM DS    0H\n         CLI   KYWDPARM,KYNOPARM  IS THERE A SPECIAL PARM?\n         BE    TEXTFINI\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH\n         MVC   S99TUPAR(1),KYWDPARM MOVE IN SPECIAL PARM\n         B     TEXTNUM\n*\n**   THE USER SUPPLIED VALUE IS TO BE CONVERTED TO BINARY AND RIGHT\n**   JUSTIFIED IN A FIELD WHOSE LENGTH IS SUPPLIED IN THE KEYWORD TABLE\n*\nCONVALUE DS    0H\n         LA    R2,WADWORD-1+L'WADWORD POINT 1 BYTE BEFOR END OF WADWORD\n         SR    R2,LENGTH          POINT TO CORRECT ADDR FOR MVC\n         XC    WADWORD,WADWORD\n         EX    LENGTH,CONVMVC     MOVE VALUE\n         PACK  WADWORD,WADWORD    CONVERT TO PACKED DECIMAL\n         CVB   R3,WADWORD         CONVERT TO BINARY\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN KYWDPARM\n         XR    R2,R2\n         IC    R2,S99TULNG+1      GET SPECIAL PARM\n         IC    R2,CONVMASK(R2)    SET BYTE 2 FOR STCM INST\n         EX    R2,CONVSTCM        STCM R3,MASK(2),S99TUPAR\n         B     TEXTNUM\nCONVMVC  MVC   0(0,R2),0(R3)\nCONVSTCM STCM  0,0,S99TUPAR\nCONVMASK DC    X'303133373F'\n*\n**   SET THE NUMBER FIELD IN THE TEXTUNIT\n*\nTEXTNUM  DS    0H\n         LH    R2,S99TUNUM        NUMBER OF KEYS IN THIS TEXT UNIT\n         LA    R2,1(R2)           + ONE\n         STH   R2,S99TUNUM        SAVE IT\n         CLI   CH,C','            IS THERE ANOTHER PARAMETER?\n         BNE   TEXTFINI           NO\n         L     R4,WALASTTU        ADDRESF OF LENGTH FIELD FOR LAST TU\n         AH    R4,0(R4)           ADD LENGTH OF PARAMETER\n         LA    R4,2(R4)           + 2 FOR LENGTH FIELD\n         ST    R4,WALASTTU        = ADDRESS OF NEXT LENGTH FIELD\n         B     VALUNEXT           PROCESS NEXT VALUE\n*\n**   COMLETE THE TEXT UNIT.\n**   CHECK FOR WAORK AREA OVERFLOW.\n**   ADD A NEW POINTER THE THE TEXTPOINTERS\n*\nTEXTFINI DS    0H\n         L     R2,WALASTTU        ADDRESS OF LENGTH FIELD\n         AH    R2,0(2)            + LENGTH OF PARM\n         LA    R2,2(2)            + TWO FOR LENGTH FIELD\n         S     @TP,=F'4'          POINT TO NEW TEXT POINTER\n         CR    R2,@TP             CHECK FOR OVERFLOW\n         BH    FAILOVFL           WORKAREA OVERFLOW\n         ST    @TU,S99TUPTR       SAVE ADDR OF TU\n         LR    @TU,R2             POINT TO NEW TEXT UNIT\n         B     STRINGLP\nSTRINGPL DS    0H                 END OF STRING LOOP\n         CLI   0(R1),X'80'        LAST PARM?\n         BE    PARMPOOL           YES\n         LA    R1,4(R1)           POINT TO NEXT PARM\n         B     PARMLOOP\nPARMPOOL DS    0H\n         EJECT\n         ST    @TP,S99TXTPP       SET TEXT POINTER FIELD IN RB\n         L     @TP,WABOTTOM       GET END OF WORKAREA\n         S     @TP,=F'4'          POINT TO LAST PARM\n         MVI   S99TUPTR,S99TUPLN  SET LAST TP FLAG\n         LA    R1,WAS99RB         GET ADDR OF REQUEST BLOCK\n         OI    0(R1),S99RBPND     TURN ON FIRST BIT OF S99RBP\nSVC99    DYNALLOC                 CALL DYNAMIC ALLOCATION RTN\n         LTR   R15,R15\n         BNE   DAIRFAIL\n         CLI   S99VERB,S99VRBIN   VERB = INFO?\n         BE    INFODECO           YES, DECODE IT\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?\n         BE    INFODECO\n         B     RETURN\nDAIRFAIL DS    0H\n         L     @DF,WADFDSCT       ADDRESS OF DFDSECT\n         ST    @RB,DFS99RBP       ADDRESS OF SVC99 REQUEST BLOCK\n         ST    R15,WAS99RC        SVC 99 RETURN CODE\n         LA    R2,WAS99RC         GET ADDR OF IT\n         ST    R2,DFRCP\n         LA    R2,WADFID          ADDR OF DIFD\n         ST    R2,DFIDP\n         MVI   WADFID,DFWTP       SPECIFY WRITE TO PROGRAMMER\n         MVI   WADFID+1,DFSVC99   FROM SVC 99\n         LA    R2,WAZEROES\n         ST    R2,DFJEFF02        ADDR OF ADDR OF IKJEFF02 (NOT KNOWN)\n         LR    R1,@DF\n         LINK  EP=IKJEFF18        CALL DAIRFAIL\n         L     R15,WAS99RC        RESTORE RETURN CODE\n         B     RETURN\n         EJECT\n*\n**   INITIALIZATION CODE\n*\nINITCODE DS    0H\n         LR    R2,R1\n         GETMAIN R,LV=2048        GETMAIN AREA\n         L     R3,0(R2)           ADDRESS OF PARM ONE\n         ST    R1,0(R3)           SAVE ADDRESS\n         MVI   0(R3),X'0F'        INDICATE GETMAINED AREA\n         L     R3,0(R3)           POINT TO AREA\n         LA    R4,2048            LENGTH\n         ST    R4,0(R3)           SET LENGTH\n         XR    R15,R15            SET RC\n         XC    4(4,R3),4(R3)      ZERO WAS99RC\n         LM    R14,R12,12(R13)    RESTORE REGS\n         XR    R15,R15            SET RETURN CODE\n         XR    R0,R0\n         BR    R14                RETURN\nENDCODE  DS    0H\n         LR    R2,R1              SAVE REG 1\n         L     R3,0(R1)           ADDRESS OF PARM 1\n         L     R3,0(R3)           ADDRESS TO BE FREED\n         L     R4,0(R3)           LENGTH TO BE FREED\n         FREEMAIN R,A=(3),LV=(4)\n         LM    R14,R12,12(R13)    RESTORE REGS\n         XR    R15,R15            SET RETURN CODE\n         XR    R0,R0\n         BR    R14                RETURN\n         EJECT\n*\n**   DECODE INFO RETURNED BY SVC99\n*\nINFODECO DS    0H\n         L     R1,4(R13)\n         L     R1,24(R1)          RECOVER R1\n         L     R1,8(R1)           POINT TO THIRD PARM\n         L     @TU,S99TUPTR       POINT TO FIRST TEXT UNIT\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?\n         BE    INFO1\n         LA    R0,DILEN1(@TU)     POINT TO END OF DICB\n         LA    R4,DICBS1          ADDRESS OF DICB MODEL\n         B     INFO2\nINFO1    DS    0H\n         LA    R0,DILEN2(@TU)     POINT TO END OF DICB\n         LA    R4,DICBS2          ADDRESS OF DICB MODEL\nINFO2    DS    0H\nINFOLOOP DS    0H\n         LH    R3,S99TULNG        GET LENGTH\n         BCTR  R3,0               LESS ONE FOR EXECUTE\n         LTR   R3,R3\n         BL    INFOLEN\n         EX    R3,INFOMVC\nINFOLEN  LH    R3,S99TULNG-S99TUNIT(,R4) GET MAX PARM LENGTH\n         AR    R1,R3              POINT TO NEXT INFO PARM\n         LA    @TU,S99TUPAR(R3)   NEXT TEXT UNIT\n         LA    R4,S99TUPAR-S99TUNIT(R3,4) NEXT TEXT UNIT IN MODEL\n         CR    @TU,R0             END OF INFO TU'S?\n         BNE   INFOLOOP\n         XR    R15,R15            SET RETURN CODE\n         B     RETURN\nINFOMVC  MVC   0(0,R1),S99TUPAR\n         SPACE 3\nFAILVERB DS    0H\n         LA    R15,16\n         B     RETURN\nFAILKEY  DS    0H\n         LA    R15,20\n         B     RETURN\nFAILVALU DS    0H\n         LA    R15,28\n         B     RETURN\nFAILOVFL DS    0H\n         LA    R15,24\n         B     RETURN\n         EJECT\nRETURN   DS    0H\n         ST    R15,WAS99RC        RETURN CODE\n         L     R13,4(R13)         RESTORE SAVEAREA ADDR\n         ST    R15,16(R13)        SET RETURN CODE\n         L     R1,24(R13)         RESTORE R1\n         L     R1,0(R1)           ADDR OF PARM 1\n         CLI   0(R1),X'0E'        IS AREA TO BE FREED?\n         BNE   RETURN01\n         LR    R2,R1              SAVE R1\n         L     R1,0(R1)           ADDR TO BE FREED\n         FREEMAIN R,LV=2048,A=(1)\n         LR    R1,R2              RESTORE R1\n         XC    0(4,R1),0(R1)      SET PARM 1 TO ZEROES\nRETURN01 DS    0H\n         LM    R14,R12,12(R13)    RESTORE REGS\n         LR    R0,R15\n         BR    R14                RETURN\n         EJECT\n*        PRINT NOGEN\n         INDEX\nVERBTAB  DS    0H\n         VENT  ALLOC,S99VRBAL\n         VENT  ALLOCR,S99VRBAL\n         VENT  UNALLOC,S99VRBUN\n         VENT  CONCAT,S99VRBCC\n         VENT  UNCONCAT,S99VRBDC\n         VENT  REMOVE,S99VRBRI\n         VENT  DDALLOC,S99VRBDN\n         VENT  INFO,S99VRBIN\nVERBMARK DS    0X\nVERBTEND DC    A(VERBMARK)\n         SPACE 1\nKYWDTAB  DS    0H\n         BEGIN A\n         KENT  ABE,3,DALEROPT,20\n         KENT  ACC,3,DALEROPT,80\n         KENT  AL,2,DALLABEL,40\n         KENT  ALIGNMENT,3,DALFCBAV,08\n         KENT  ALX,3,DALSPFRM,02\n         KENT  AUL,3,DALLABEL,48\n         BEGIN B\n         KENT  BLKSIZE,3,DALBLKSZ,,2\n         KENT  BLOCK,3,DALBLKLN,,3\n         KENT  BLP,3,DALLABEL,10\n         KENT  BUFALN,4,DALBFALN,SUBTABLE\n         KENT  BUFIN,4,DALBUFIN,,2\n         KENT  BUFL,4,DALBUFL,,2\n         KENT  BUFMAX,4,DALBUFMX,,1\n         KENT  BUFNO,4,DALBUFNO,,1\n         KENT  BUFOFF,5,DALBUFOF,,1\n         KENT  BUFOUT,5,DALBUFOU,,1\n         KENT  BUFRQ,4,DALBUFRQ,,1\n         KENT  BUFSZ,4,DALBUFSZ,,2\n         KENT  BUFTEK,4,DALBFTEK,SUBTABLE\n         BEGIN C\n         KENT  CATLG,2,DALNDISP,02\n         KENT  CCATLG,2,DALCDISP,02\n         KENT  CDELETE,2,DALCDISP,04\n         KENT  CHARSET,2,DALUVRFY\n         KENT  CKEEP,2,DALCDISP,08\n         KENT  CLOSE,2,DALCLOSE\n         KENT  CODE,3,DALCODE,SUBTABLE\n         KENT  CONTIG,3,DALSPFRM,08\n         KENT  CONVERT,4,DALCNVRT\n         KENT  COPIES,3,DALCOPYS,,1\n         KENT  CUNCATLG,2,DALCDISP,01\n         KENT  CYL,2,DALCYL\n         BEGIN D\n         KENT  DCBDD,5,DALDCBDD\n         KENT  DCBDS,5,DALDCBDS\n         KENT  DDNAME,2,DALDDNAM\n         KENT  DELETE,2,DALNDISP,04\n         KENT  DIRECTORY,2,DALDIR,,3\n         KENT  DSNAME,3,DALDSNAM\n         KENT  DSORG,3,DALDSORG,SUBTABLE,2\n         KENT  DSSEQ,3,DALDSSEQ,,2\n         KENT  DUMMY,2,DALDUMMY\n         KENT  D1600,5,DALDEN,C3\n         KENT  D6250,5,DALDEN,D3\n         KENT  D800,4,DALDEN,83\n         BEGIN E\n         KENT  EXPIRY,1,DALEXPDT\n         BEGIN F\n         KENT  F,1,DALRECFM,80\n         KENT  FA,2,DALRECFM,84\n         KENT  FAS,3,DALRECFM,8C\n         KENT  FB,2,DALRECFM,90\n         KENT  FBA,3,DALRECFM,94\n         KENT  FBAS,4,DALRECFM,9C\n         KENT  FBM,3,DALRECFM,92\n         KENT  FBMS,4,DALRECFM,9A\n         KENT  FBS,3,DALRECFM,98\n         KENT  FM,2,DALRECFM,82\n         KENT  FMS,3,DALRECFM,8A\n         KENT  FOLDMODE,3,DALUFOLD\n         KENT  FORMS,3,DALFCBIM\n         KENT  FS,2,DALRECFM,88\n         BEGIN G\n         BEGIN H\n         KENT  HOLD,1,DALSHOLD\n         BEGIN I\n         KENT  INPUT,1,DALINOUT,40\n         BEGIN J\n         BEGIN K\n         KENT  KEEP,3,DALNDISP,08\n         KENT  KEYLEN,3,DALKYLEN,,1\n         BEGIN L\n         KENT  LIMCT,2,DALLIMCT,,3\n         KENT  LRECL,2,DALLRECL,,2\n         KENT  LTM,2,DALLABEL,21\n         BEGIN M\n         KENT  MEMBER,2,DALMEMBR\n         KENT  MOD,3,DALSTATS,02\n         KENT  MODE,4,DALMODE,SUBTABLE\n         KENT  MSVGP,2,DALMSVGP\n         KENT  MXIG,2,DALSPFRM,04\n         BEGIN N\n         KENT  NCP,2,DALNCP,,1\n         KENT  NEW,3,DALSTATS,04\n         KENT  NEWCLASS,4,DUNOVCLS\n         KENT  NEWHOLD,4,DUNOVSHQ\n         KENT  NEWNOHOLD,4,DUNOVSNH\n         KENT  NEWREMOTE,4,DUNOVSUS\n         KENT  NL,2,DALLABEL,01\n         KENT  NSL,3,DALLABEL,04\n         BEGIN O\n         KENT  OLD,3,DALSTATS,01\n         KENT  OPTCD,2,DALOPTCD,SUBTABLE\n         KENT  OUTLIM,4,DALOUTLM,,3\n         KENT  OUTPUT,3,DALINOUT,80\n         KENT  OUTPUTDD,8,DALOUTPT\n         BEGIN P\n         KENT  PARALLEL,3,DALPARAL\n         KENT  PASSREAD,5,DALPASPR,10\n         KENT  PASSWORD,6,DALPASSW\n         KENT  PASSWRITE,6,DALPASPR,30\n         KENT  PERMANENT,2,DALPERMA\n         KENT  PERMCONCAT,5,DCCPERMC\n         KENT  PRIMARY,4,DALPRIME,,3\n         KENT  PRIVATE,4,DALPRIVT\n         KENT  PRTSP,3,DALPRTSP,SUBTABLE\n         BEGIN Q\n         KENT  QNAME,1,DALQNAME\n         BEGIN R\n         KENT  RECFM,3,DALRECFM,SUBTABLE\n         KENT  RELNO,3,DINRELNO,,2\n         KENT  REMOTE,3,DALSUSER\n         KENT  REMOVE,5,DUNREMOV\n         KENT  RETENTION,3,DALRETPD,,2\n         KENT  RLSE,2,DALRLSE\n         KENT  ROUND,2,DALROUND\n         BEGIN S\n         KENT  SECONDARY,3,DALSECND,,3\n         KENT  SHR,2,DALSTATS,08\n         KENT  SKP,2,DALEROPT,40\n         KENT  SL,2,DALLABEL,02\n         KENT  SUL,3,DALLABEL,08\n         KENT  SYSOFORM,5,DALSFMNO\n         KENT  SYSOPROG,5,DALSPGNM\n         KENT  SYSOUT,5,DALSYSOU\n         BEGIN T\n         KENT  TERMFILE,2,DALTERM\n         KENT  TRK,3,DALTRK\n         KENT  TRTCH,3,DALTRTCH,SUBTABLE\n         BEGIN U\n         KENT  U,1,DALRECFM,C0\n         KENT  UCS,2,DALUCS\n         KENT  UNALLOC,3,DUNUNALC\n         KENT  UNCATLG,3,DALNDISP,01\n         KENT  UNICOUNT,4,DALUNCNT,,1\n         KENT  UNIT,4,DALUNIT\n         BEGIN V\n         KENT  V,1,DALRECFM,40\n         KENT  VA,2,DALRECFM,44\n         KENT  VAS,3,DALRECFM,4C\n         KENT  VB,2,DALRECFM,50\n         KENT  VBA,3,DALRECFM,54\n         KENT  VBAS,4,DALRECFM,5C\n         KENT  VBM,3,DALRECFM,52\n         KENT  VBMS,4,DALRECFM,5A\n         KENT  VBS,3,DALRECFM,58\n         KENT  VERIFY,2,DALFCBAV,04\n         KENT  VM,2,DALRECFM,42\n         KENT  VMS,3,DALRECFM,4A\n         KENT  VOLUME,3,DALVLSER\n         KENT  VOLCOUNT,4,DALVLCNT,,1\n         KENT  VOLREF,4,DALVLRDS\n         KENT  VOLSEQ,4,DALVLSEQ,,2\n         KENT  VS,2,DALRECFM,48\n         BEGIN W\n         BEGIN X\n         BEGIN Y\n         BEGIN Z\nKYWDMARK DS    0X\nKYWDTEND DC    A(KYWDMARK)\n         BEGINSUB BFALN           OFFSET 00\n         SENT  F,01\n         SENT  D,02\n         BEGINSUB BFTEK           OFFSET 04\n         SENT  D,08\n         SENT  E,10\n         SENT  R,20\n         SENT  S,40\n         SENT  A,60\n         BEGINSUB CODE\n         SENT  T,02\n         SENT  A,04\n         SENT  C,08\n         SENT  B,10\n         SENT  F,20\n         SENT  I,40\n         SENT  N,80\n         BEGINSUB DSORG\n         SENT  TQ,0020\n         SENT  TX,0040\n         SENT  GS,0080\n         SENT  PO,0200\n         SENT  MQ,0400\n         SENT  CQ,0800\n         SENT  CX,1000\n         SENT  DA,2000\n         SENT  PS,4000\n         SENT  POU,0300\n         SENT  DAU,2100\n         SENT  PSU,4100\n         SENT  TCAM,0004\n         SENT  VSAM,0008\n         BEGINSUB MODE\n         SENT  E,40\n         SENT  C,80\n         SENT  ER,50\n         SENT  EO,60\n         SENT  CR,90\n         SENT  CO,A0\n         BEGINSUB OPTCD           OFFSET 04\n         SENT  R,01\n         SENT  T,02\n         SENT  Z,04\n         SENT  A,08\n         SENT  Q,08\n         SENT  F,10\n         SENT  H,10\n         SENT  O,10\n         SENT  C,20\n         SENT  E,20\n         SENT  B,40\n         SENT  U,40\n         SENT  W,80\n         BEGINSUB PRTSP\n         SENT  0,01\n         SENT  1,09\n         SENT  2,11\n         SENT  3,19\n         BEGINSUB RECFM\n         SENT  M,02\n         SENT  R,02\n         SENT  A,04\n         SENT  G,04\n         SENT  S,08\n         SENT  B,10\n         SENT  D,20\n         SENT  T,20\n         SENT  V,40\n         SENT  F,80\n         SENT  U,C0\n         BEGINSUB TRTCH\n         SENT  C,13\n         SENT  E,23\n         SENT  T,3B\n         SENT  ET,2B\n         ENDSUB\nVALUINDX SUBINDEX\nDICBS1   DICBTAB1\nDICBS2   DICBTAB2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDCATSI": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x05\\x01\\x00\\x02\\x1f\\x01\\x061\\x7f\\x15U\\x01\\x19\\x01\\x03\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2000-01-21T00:00:00", "modifydate": "2006-11-13T15:55:05", "lines": 281, "newlines": 259, "modlines": 0, "user": "U0Z72B6"}, "text": "* +--- ZOS170A --------- MDCATSI -------------------------------------+\n* |                                                                   |\n* | NOMBRE ....... MDCATSI                                            |\n* |                                                                   |\n* | UBICACION .... SYST.LINKLIB           AMODE(ANY) RMODE(24)        |\n* |                                                                   |\n* | AUTOR ........ ANGEL LUIS DOMINGUEZ MARTIN. (C) 1992              |\n* |                                                                   |\n* | FUNCIONES .... MODULO PARA OBTENCION DE DATOS DE DATASETS A       |\n* |                PARTIR DEL CATALOGO, MEDIANTE LA UTILIZACION DEL   |\n* |                CSI-CATALOG SEARCH INTERFACE                       |\n* |                                                                   |\n* | OBJETIVOS .... FACILITAR ACCESO A DATOS DE CATALOGOS              |\n* |                                                                   |\n* | LENGUAJE ..... ASSEMBLER H.                                       |\n* |                                                                   |\n* | TIPO ......... MODULO                                             |\n* |                                                                   |\n* | PARAMETROS ... AREA PASADA POR EL PROGRAMA LLAMANTE               |\n* |                VER LA DSECT $PARAM AL FINAL DEL FUENTE            |\n* |                                                                   |\n* | COD.LLAMADA    POSITIVOS:  FUNCIONES A REALIZAR                   |\n* |                            0 - OBTENER FICHEROS SEGUN FILTRO      |\n* |                            1 - FINAL DE DATOS                     |\n* |                            2 -                                    |\n* |                NEGATIVOS:  ERRORES                                |\n* |                           -1 - EL FILTRO NO PROPORCIONA DATOS     |\n* |                           -2 - NO LOCALIZA EL MODULO IGGCSI00     |\n* |                           -3 - ERRORES EN ACCESO A INTERFACE CSI  |\n* |                           -4 - AREA TRABAJO INSUFICIENTE          |\n* +-------------------------------------------------------------------+\nMDCATSI  INICIO    (12,11),COMEN='OBTENCION DE DATOS DE CATALOGOS.',   X\n               VERSION=ZOS170A,                                        X\n               AMODE=ANY,                                              X\n               RMODE=24,                                               X\n               TIPO=NORENT\n*        +--------------------------+\n*--------|   OBTENCION DE PARAMETRO |\n*        +--------------------------+\n         L         R2,0(,R2)\n         USING     $PARAM,R2\n*        +-----------------------------------+\n*--------| CAMBIO DE ESTADO SI ES NECESARIO  |-------------------------\n*        | PARA EJECUTAR SIEMPRE EN AMODE 31 |\n*        +-----------------------------------+\n         LA        R1,*+4+4+2\n         O         R1,KBSM\n         BSM       R0,R1\n*        +----------------------------------------+\n*--------|   CARGA DEL MODULO CSI                 |--------------------\n*        +----------------------------------------+\n         CLC       $CLAVEMD,CEROSBIN   <> PRIMERA LLAMADA\n         BNE       LB10                <> SALTAR CARGA MODULO\n*\n*        INICIALIZACION DE CONTADORES\n*\n         CLC       $WORKLEN,KF4096     <> AL MENOS 2048\n         BNL       LB00A\n         LA        R1,4\n         B         RETNEG\n*\nLB00A    DS        0H\n         XC        SWFIRST,SWFIRST     <> INDICAR PRIMERA VEZ\n         XC        PENTE,PENTE         <> CLEAR DATOS PENDIENTES\n         XC        SWDATOS,SWDATOS     <> CLEAR ALGUN DATO DEVUELTO\n         XC        POSIC,POSIC         <> CELAR POSI.\n*\n         LOAD      EP=IGGCSI00,ERRET=LB00B\n         STCM      R0,B'1111',$CLAVEMD <> GUARDAR LA DIRECCION\n         B         LB10\nLB00B    EQU       *\n         LA        R1,2\n         B         RETNEG\n*\n*        +----------------------------------------+\n*--------|   PROCESO DE PROGRAMA                  |--------------------\n*        +----------------------------------------+\nLB10     DS        0H\n         CLC       PENTE,CEROSBIN      <> HAY DATOS PENDIENTES ?\n         BNE       LB20                <> SI, PROCESARLOS\n*\n         TM        SWFIRST,X'80'       <> ES LA PRIMERA VEZ\n         BO        LB10CA\n         OI        SWFIRST,X'80'       <> DES-INDICAR PRIMERA VEZ\n*\n* - INICIALIZACION AREA DE LLAMADA\n*\n         MVC       CSIFILTK,$FILTRO\n         MVI       CSICATNM,C' '\n         MVC       CSICATNM+1(L'CSICATNM-1),CSICATNM\n         MVI       CSIRESNM,C' '\n         MVC       CSIRESNM+1(L'CSIRESNM-1),CSICATNM\n         MVI       CSIDTYPS,C' '\n         MVC       CSIDTYPS+1(L'CSIDTYPS-1),CSIDTYPS\n         MVI       CSICLDI,C'Y'\n         MVI       CSIRESUM,C' '\n         MVI       CSIS1CAT,C'Y'\n         XC        CSINUMEN,CSINUMEN\n         B         LB10CC\n*\nLB10CA   DS        0H\n         CLI       CSIRESUM,C'Y'       <> HABRA MAS ENTRADAS ?\n         BE        LB10CC\n         LA        R1,1\n         B         ENDOFPGM\n*\nLB10CC   DS        0H\n         ICM       R1,B'1111',$WORKLEN <> AREA DECLARADA\n         LA        R15,CSIDSTAR-$WORKA <> AREA GASTADA POR DELANTE\n         SR        R1,R15              <> RESTO LIBRE\n         ST        R1,CSIDWLEN         <> TAMA#O DE AREA MODULO\n         LA        R1,CSIRTCD\n         ST        R1,CSIPARM\n         LA        R1,CSIFLLAM\n         ST        R1,CSIPARM+4\n         LA        R1,CSIDATD\n         ST        R1,CSIPARM+8\n*\n         OI        SWFIRST,X'01'\n         LA        R1,CSIPARM\n         ICM       R15,B'1111',$CLAVEMD <> DIRECCION DE IGGCSI\n         CALL      (15)\n         LTR       R15,R15\n         BZ        LB10IN              <> EXTRAER NOMBRES\n         LA        R15,3\n         B         RETNEG\n*\nLB10IN   DS        0H\n*\n*        PENDIENTE DE VERIFICAR QUE HA ENCONTRADO EL FILTRO\n*\n         L         R3,CSIDULEN         <> LONGITUD USADA\n         LA        R1,CSIDSTAR-CSIDWLEN\n         SR        R3,R1               <> RESTAR CABECERA DATOS\n         ST        R3,PENTE\n         LTR       R3,R3\n         BNZ       LB10IN2\n         LA        R1,1                <> DEVOLVEMOS UNO (POS O NEG)\n         TM        SWDATOS,X'80'       <> SE DEVOLVIO ALGO YA\n         BO        ENDOFPGM\n         B         RETNEG\n*\nLB10IN2  DS        0H\n         OI        SWDATOS,X'80'       <> ALGUN DATO PARA ESTE FILTRO\n         LA        R4,CSIDSTAR\n         ST        R4,POSIC\n*        +----------------------------------------+\n*--------|   EXTRACCION DE NOMBRES DE FICHEROS    |--------------------\n*        +----------------------------------------+\nLB20     DS        0H\nLB20BUC  EQU       *\n         MVC       $DRCATNA,CSIDCATN\n         L         R3,PENTE\n         L         R4,POSIC\n         USING     CSIDDSEC,R4\n         MVC       $DRTIPO,CSIDETIP\n         MVC       $DRENAME,CSIDENAM\n         DROP      R4\n         LA        R1,CSIDEEND-CSIDEFLG\n         AR        R4,R1               <> AVANCE POSICIONAMIENTO\n         ST        R4,POSIC\n         SR        R3,R1               <> RESTAR TOTAL DATOS\n         ST        R3,PENTE\n         SLR       R1,R1\n         B         ENDOFPGM\n*\n*        +----------------------------------------+\n*--------|   FINALIZACION DEL PROGRAMA            |--------------------\n*        +----------------------------------------+\nENDOFPGM EQU       *\n         XC        $CODIGO,$CODIGO\n         STCM      R1,B'0011',$CODIGO\n         FIN       CR,TIPO=NORENT\nRETNEG   EQU       *\n         XC        $CODIGO,$CODIGO\n         MH        R1,KBIN1NEG\n         STCM      R1,B'0011',$CODIGO\n         FIN       CR,TIPO=NORENT\n*        +--------------------------------+\n*--------| RESERVA DE AREAS ESTATICAS     |----------------------------\n*        +--------------------------------+\n         DS        0F\nKBSM     DC        X'80000000'\n*\nCSIPARM  DS        3F\n*\nKBIN1NEG DC        H'-1'\nCEROSBIN DC        X'00000000'\nKF4096   DC        F'4096'\n         LTORG\n*        +--------------------------------+\n*--------| DSECT DE PARAMETROS            |----------------------------\n*        +--------------------------------+\n$PARAM   DSECT\n$CODIGO  DS        H                   <> CODIGOS DE LLAMADA\n*                                         0   OBTIENE DATOS\n*                                         1   FINAL DE DATOS\n*                                      <> CODIGOS DE RETORNO\n*                                         0   FUNCION CORRECTAMENTE\n*                             -1 - EL FILTRO NO PROPORCIONA DATOS\n*                             -2 - NO LOCALIZA EL MODULO IGGCSI00\n*                             -3 - ERRORES EN ACCESO A INTERFACE CSI\n*                             -4 - AREA TRABAJO INSUFICIENTE\n*\n$FILTRO  DS        CL44                <> FILTRO DE BUSQUEDA\n$CLAVEMD DS        CL4                 <> CLAVE PARA MODULO\n$RELLE1  DS        CL2                 <> PARA ALINEAMIENTO (CLASICO)\n*\n$DATLEN  DS        F     >>> 89 <<<    <> LONGITUD DATOS A DEVOLVER\n$DATOSR  DS        0CL1                <> COMIENZO DATOS RECUPERADOS\n$DRCATNA DS        CL44                <> NOMBRE DE CATALOGO\n$DRTIPO  DS        CL1                 <> TIPO DE ENTRADA\n*                                         A: FICHERO NO VSAM\n*                                         B: GRUPO DE GENERACION\n*                                         C: CLUSTER\n*                                         D: COMPONENTE DATOS VSAM\n*                                         G: ALTERNATE INDEX\n*                                         I: COMPONENTE INDICES VSAM\n*                                         H: GENERATION DATASET\n*                                         R: PATH DE VSAMSAM\n*                                         X: ALIAS\n*                                         U: ENTRADA CONEX.CAT.USUARIO\n*                                         L: LIBRARY TAPE AM\n*                                         W: ENTRY VOLUME TAPE\n$DRENAME DS        CL44                <> NOMBRE DE ENTRADA\n$RELLE2  DS        CL3                 <> AREA RESERVADA ALINEAMIENTO\n*\n$WORKLEN DS        CL4                 <> LONGITUD DE LA WORKA QUE\n*                                         EL PROGRAMA LLAMANTE\n*                                         SUMINISTRA A CONTINUACION\n$WORKA   DS        0CL1                <> AREA TRABAJO SUMINISTRADA\nPENTE    DS        F\nPOSIC    DS        F\nSWFIRST  DS        CL1\nSWDATOS  DS        CL1\n*----------------------------RETURN CODE CSI\nCSIRTCD  DS        0F\nPARMRC   DS        0CL4\nMODID    DC        XL2'0000'           <> MODULE ID\nRSNCODE  DC        XL1'00'             <> REASON CODE\nRTNCODE  DC        XL1'00'             <> RETURN CODE\n*----------------------------CABECERA DE LLAMADA\nCSIFLLAM DS        0F\nCSIFILTK DS        CL44                <> FILTER KEY\nCSICATNM DS        CL44                <> CATNAME O BLANCOS\nCSIRESNM DS        CL44                <> RESUME NAME O BLANCOS\nCSIDTYPD DS        0CL16               <> TIPOS DE ENTRADA\nCSIDTYPS DS        CL16\nCSIOPTS  DS        0CL4                <> OPCIONES\nCSICLDI  DS        CL1                 <> RETURN D&I IF MATCH Y/BLANK\nCSIRESUM DS        CL1                 <> RESUME FLAG  Y/BLANK\nCSIS1CAT DS        CL1                 <> SEARCH CATALOG Y/BLANK\nCSIRESRV DS        XL1                 <> RESERVED\nCSINUMEN DS        H                   <> NUM.ENTRADAS QUE SIGUEN\nCSIENTS  DS        0CL8                <> VARIABLE NUMERO ENTRADAS\nCSIFLDNM DS        CL8                 <> SOLO EL NOMBRE\n*----------------------------DATOS DEVUELTOS\n*----------------------------DATOS DEVUELTOS\n*----------------------------DATOS DEVUELTOS\nCSIDATD  DS        0F\nCSIDWLEN DS        F                   <> CALCULAR EL TAMA\u00a6O RESTANTE\nCSIDRLEN DS        F                   <> REQUERIDA EN CASO DE PEQUE#A\nCSIDULEN DS        F                   <> LONGITUD REAL DEVUELTA\nCSIDNUMC DS        H\nCSIDFLG1 DS        CL1\nCSIDCTIP DS        CL1                 <> TIPO DE CATALOGO\nCSIDCATN DS        CL44                <> NOMBRE DE CATALOGO\nCSIDMODR DS        F                   <> MODULO Y RETURN CODES\nCSIDSTAR EQU       *                   <> COMIENZAN LOS DATOS\n*\n* ESTE AREA ESTARA SOBRE LA ZONA FINAL DEL BUFFER PASADO AL MODULO\n*\nCSIDDSEC DSECT\nCSIDEFLG DS        XL1\nCSIDETIP DS        XL1\nCSIDENAM DS        CL44\nCSIDELEN DS        XL2                 <> VALOR 4 NO HAY CAMPOS\nCSIDEFI1 DS        XL2                 <> RESERVADO\nCSIDEEND EQU       *\n*\n         END       MDCATSI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDCVLOG": {"ttr": 2566, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x19\\x01\\x00\\x12O\\x01\\x061\\x7f\\x15U\\x04g\\x03\\xb0\\x04g\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2000-05-03T00:00:00", "modifydate": "2006-11-13T15:55:19", "lines": 1127, "newlines": 944, "modlines": 1127, "user": "U0Z72B6"}, "text": "* +--- ZOS170A ---- MDCVLOG -------------------------------------+\n* |                                                                   |\n* | NOMBRE ....... MDCVLOG                                            |\n* |                                                                   |\n* | UBICACION .... SYST.LINKLIB           AMODE(24)  RMODE(24)        |\n* |                                                                   |\n* | AUTOR ........ ANGEL LUIS DOMINGUEZ MARTIN      2000              |\n* |                JOSE MARIA MARTINEZ BESTEIRO     2000              |\n* |                                                                   |\n* | FUNCIONES .... MODULO DE CONVERSION DE MDBS DE OPERLOG A          |\n* |                TEXTO MULTILINEA DE FORMATO SYSLOG TRADICIONAL.    |\n* |                                                                   |\n* | OBJETIVOS .... FACILITAR LA CONSULTA DE OPERLOG, GUARDADO EN      |\n* |                FORMATO MDB, POR MEDIO DE LA UTILIDAD VERLOG.      |\n* |                                                                   |\n* | LENGUAJE ..... ASSEMBLER H.                                       |\n* |                                                                   |\n* | TIPO ......... MODULO                                             |\n* |                                                                   |\n* | PARAMETROS ... AREA PASADA POR EL PROGRAMA LLAMANTE               |\n* |                VER LA DSECT $PARAM AL FINAL DEL FUENTE DONDE SE   |\n* |                EXPLICAN LOS VALORES Y LAS FUNCIONES POSIBLES      |\n* |                                                                   |\n* +---------------------------------------(C) DOMINGUEZ 1999,2004-----+\nMDCVLOG  INICIO     (12,11,10),COMEN='CONVERSION MDB A SYSLOG',        X\n               VERSION=ZOS170A,                                        X\n               TIPO=NORENT\n*        +--------------------------+\n*>>>>>>>>| RECEPCION DE PARAMETROS  |\n*        +--------------------------+\n         L     R2,0(R2)\n         USING $PARAM,R2\n* PREPARACION FICHERO DE ENTRADA\n         CLC   KSYSIN,$DDN         <> CASO ESPECIAL DE DDN ES SYSIN?\n         BNE   LB05A\n*        +-----------------------------------------------+\n*>>>>>>>>| LA DDNAME DE ENTRADA ES ESPECIAL: VALOR=SYSIN |\n*        +-----------------------------------------------+\n*        | ELLO IMPLICA QUE APUNTA A UNA LISTA DE DSN'S  |\n*        | DE FICHEROS QUE HAY QUE                       |\n*        | \"ALLOCAR\" Y \"CONCATENAR\" PARA PASARSELAS AL   |\n*        | PROGRAMA PARA SU TRATAMIENTO                  |\n*        +-----------------------------------------------+\n         OPEN      (FISYS,(INPUT))\n         SLR       R3,R3               <> CONTADOR DD'S ASIGNADAS\n         LA        R4,$DACOND          <> AREA DE IR PONIENDO DDNAME'S\nLB00     EQU       *\n         GET       FISYS               <> LEER REGISTRO\n         LA        R3,1(,R3)           <> AVANCE CONTADOR\n         C         R3,$DACONDT         <> COMPARAR CON TOPE\n         BH        LB00ERR\n*\n         MVC       $DATOSCD,0(R1)      <> PONER EL DSNAME\n*\n         CALL  MDALDIN,                                                X\n               ($WORKDIN,$PETICIR,$RETINF,$DATOSCI),VL\n         LTR   R15,R15             <> CODIGO RETORNO MDALDIN\n         BZ    LB00OK1             <> ASIGNACION CORRECTA, SEGUIR\n*\n         WTO       '**MDCVLOG** ERRROR ALLOC DINAMICA ENTRADA'\n         ABEND     777,DUMP\n*\nLB00OK1  EQU       *\n         MVC       0(L'$RIDDN,R4),$RIDDN DDNAME DEVUELTA MDALDIN\n         MVI       L'$RIDDN(R4),C','  <> MOVER COMA SEPARADORA\n         LA        R4,L'$RIDDN+1(R4)  <> AVANCE R4\n         B         LB00               <> TRATAR OTRO REGISTRO\n*\nLB00ERR  EQU       *\n         WTO       '**MDCVLOG** EXCEDIDO NUM. FICHEROS (MAX=168).'\n         ABEND     666,DUMP            <> EXCEDIDO NUMERO DE DD'S\n*\nENDFISYS EQU       *                   <> FIN FICHERO TIPO SYSIND\n         CLOSE     (FISYS)\n*\n         BCTR      R4,R0\n         MVI       0(R4),C' '      <> QUITAR LA ULTIMA COMA\n         MVI       1(R4),C';'\n         MVI       2(R4),C' '\n*\n         CALL  MDALDIN,                                                X\n               ($WORKDIN,$PETICIC,$DACONI),VL\n         LTR   R15,R15             <> CODIGO RETORNO MDALDIN\n         BZ    LB00OK2             <> ASIGNACION CORRECTA, SEGUIR\n*\n         WTO       '**MDCVLOG** ERRROR ALLOC DINAMICA ENTRADA'\n         ABEND     777,DUMP\n*\nLB00OK2  EQU   *\n         LA    R1,SYUSR8           <> DIRECCIONAR LA DCB DE ENTRADA\n         USING IHADCB,R1           <> USING DCB\n         MVC   DCBDDNAM,$DACOND    <> MOVER DDNAME A UTILIZAR\n         DROP  R1\n         B     LB05B\n*        +-----------------------------------------------+\n*>>>>>>>>| LA DDNAME DE ENTRADA ES NORMAL                |\n*        +-----------------------------------------------+\n*        | ELLO IMPLICA QUE APUNTA A UNO O VARIOS DSN'S  |\n*        | CONCATENADOS DE FICHEROS DE OPERLOG           |\n*        +-----------------------------------------------+\nLB05A    EQU   *\n         LA    R1,SYUSR8           <> DIRECCIONAR LA DCB DE ENTRADA\n         USING IHADCB,R1           <> USING DCB\n         MVC   DCBDDNAM,$DDN       <> MOVER DDNAME A UTILIZAR\n         DROP  R1\nLB05B    EQU   *\n* CASO ESPECIAL FICHERO DE SALIDA SI PARAMETRO $DSN ES DDNAME=\n         CLC   $DSN(L'KDDNAME),KDDNAME\n         BNE   LB08\n         LA    R1,SYUSR9           <> DIRECCIONAR LA DCB DE ENTRADA\n         USING IHADCB,R1           <> USING DCB\n         MVC   DCBDDNAM,$DSN+L'KDDNAME    <> MODIFICAR DDNAME DEFECTO\n         DROP  R1\n         B     LB20\n* CONSTRUCCION DE PRIMERA AREA DE PARAMETROS PARA MDALDIN\nLB08     EQU   *\n         LA    R1,$DATOSA\n         MVC   0(L'$DATOSA0,R1),$DATOSA0\n         LA    R1,L'$DATOSA0(R1)\n         CLC   $DSN(L'KSYSOUT),KSYSOUT\n         BE    LB10\n         MVC   0(L'$DATOSA1,R1),$DATOSA1\n         LA    R1,L'$DATOSA1(R1)\n         MVC   $DATOSA2(44),$DSN   <> DSN DEL FICHERO DE SALIDA\n         MVC   0(L'$DATOSA2,R1),$DATOSA2\n         LA    R1,L'$DATOSA2(R1)\nLB10     DS    0H\n         MVC   0(L'$DATOSA9,R1),$DATOSA9\n* CONSTRUCCION DE SEGUNDA AREA DE PARAMETROS PARA MDALDIN\n         LA    R1,$DATOSB\n         CLC   $DSN(L'KSYSOUT),KSYSOUT\n         BE    LB11\n         MVC   0(L'$DATOSB1,R1),$DATOSB1\n         LA    R1,L'$DATOSB1(R1)\n         B     LB12\nLB11     DS    0H\n         MVC   $DATOSB,$DSN   <> DSN DEL FICHERO DE SALIDA\n         LA    R1,L'$DSN(R1)\n         B     LB13\nLB12     DS    0H\n         MVC   0(L'$DATOSB2,R1),$DATOSB2\n         LA    R1,L'$DATOSB2(R1)\nLB13     DS    0H\n         MVC   0(L'$DATOSB9,R1),$DATOSB9\n*\n         MVC   MDCVMSGT,$DATOSA    <> ERROR DE ASIGNACION\n         BAS   R14,MESSR           DISPLAY IT\n         MVC   MDCVMSGT,$DATOSB    <> ERROR DE ASIGNACION\n         BAS   R14,MESSR           DISPLAY IT\n         CALL  MDALDIN,                                                X\n               ($WORKDIN,$PETICI,$DATOSA,$DATOSB),VL\n         LTR   R15,R15             <> CODIGO RETORNO MDALDIN\n         BZ    LB20                <> ASIGNACION CORRECTA, SEGUIR\n*\n         MVC   MDCVMSGT,MDCVMSG1   <> ERROR DE ASIGNACION\n         STCM  R15,B'1111',TWORK\n         UNPK  TWORK+6(9),TWORK(5)\n         TR    TWORK+6(8),HEXTAB\n         BAS   R14,MESSR           DISPLAY IT\n         MVC   MDCVMSG3+4(8),TWORK+6\n         MVC   MDCVMSGT,MDCVMSG3\n         UNPK  TWORK(5),$WORKRC\n         TR    TWORK(4),HEXTAB\n         MVC   MDCVMSG3+17(4),TWORK\n         MVC   MDCVMSGT,MDCVMSG3\n*\nERRMSG   DS    0H\n         LA    R2,MDCVMSG          POINT TO ERROR MESSAGE\n         BAS   R14,MESSR           DISPLAY IT\n         ABEND 888,DUMP\n*\n*        +--------------------------+\n*>>>>>>>>| PROCESO DEL FICHERO      |\n*        +--------------------------+\nLB20     DS    0H\n         OPEN  (SYUSR8,(INPUT))    <> ABRIR FICHERO OPERLOG\n         OPEN  (SYUSR9,(OUTPUT))\n*        +--------------------------+\n*>>>>>>>>|   PROCESO DEL PROGRAMA   |\n*        +--------------------------+\nCOPYLOOP DS    0H\n         GET   SYUSR8              <> LEER PRIMER REGISTRO\n         LR    R8,R1               <> R8 DIRECCIONA PRIMER REGISTRO\n         USING MDB,R8\n         MVI   FLAGS1,0            CLEAR PROCESSING FLAGS\n         MVC   LOGBUF(128),=CL128' '  CLEAR OUT LOG RECORD         F04C\n         LR    R6,R8               CALC END OF MDB IN R6\n         AH    R6,MDBLEN           START+MDBLEN IN HEADER\n         LA    R7,MDBHLEN(0,R8)    ADDRESS OF FIRST OBJECT\n         CR    R7,R6               SEE IF THIS IS THE END\n         BNL   COPYLOOP            GET ANOTHER MDB IF SO (NO           X\n                                   OBJECTS)                        FD2C\n         DROP  R8\n         USING MDB,R7\n*\n* SCAN MDB OBJECTS LOOKING FOR GENERAL AND CP OBJECTS, AND\n* SAVE SYSLOG INFORMATION FROM THEM\n*\nOBJLP    DS    0H                  LOOP THROUGH THE OBJECTS\n         LH    R3,MDBTYPE          GET TYPE\n         C     R3,=A(MDBGOBJ)      CHECK FOR GENERAL OBJECT\n         BNE   NOTG                NOT GENERAL OBJECT\n         TM    FLAGS1,FLAGGO       SEE IF FIRST GENERAL OBJECT\n         BO    NXTOBJ              NO, SKIP IT\n         OI    FLAGS1,FLAGGO       SHOW GENERAL OBJECT WAS FOUND\n         USING MDBG,R7             ADDRESSABILITY TO GENERAL OBJECT\n***********************************************************************\n* MOVE GENERAL OBJECT FIELDS INTO LOG RECORD OR SAVE THEM\n***********************************************************************\n         BAS   R14,GENINFO         FILL IN THE APPROPRIATE FIELDS      X\n                                   IN THE LOG RECORD FROM THE MDB      X\n                                   GENERAL OBJECT                  F04A\n         MVC   JOBNAME,MDBGJBNM    SAVE JOB NAME\n         SR    R15,R15             CLEAR A REG\n         ICM   R15,7,MDBGSEQ       MESSAGE SEQUENCE NUMBER\n         CVD   R15,DBLWD           CONVERT TO DECIMAL\n         UNPK  MLID,DBLWD          SAVE LOW 3 DIGITS AS EBCDIC         X\n                                   MULTILINE ID\n         OI    MLID+2,C'0'         MAKE IT PRINTABLE\n         B     NXTOBJ              BUMP TO NEXT OBJECT\n*\nNOTG     DS    0H\n         C     R3,=A(MDBCOBJ)      CHECK FOR CONTROL PROG OBJECT\n         BNE   NXTOBJ              NOT CONTROL PROG OBJECT, GET NEXT\n         TM    FLAGS1,FLAGCO       SEE IF FIRST CONTROL PROG OBJECT\n         BO    NXTOBJ              NO, SKIP IT\n         USING MDBSCP,R7           ADDRESSABILITY TO CTL PROG OBJECT\n         CLC   MDBCPNAM,=C'MVS '   MAKE SURE IT IS AN MVS OBJECT\n         BNE   NXTOBJ              IF NOT, JUST SKIP CP OBJECT\n         CLC   MDBCVER,=AL4(MDBCVER5) SEE IF IT'S THE RIGHT VERSION\n         BL    COPYLOOP            SKIP MDB IF NOT                 FD2C\n         OI    FLAGS1,FLAGCO       SET PROCESSED CONTROL PROG OBJECT\n***********************************************************************\n* MOVE CONTROL PGM OBJECT FIELDS INTO LOG RECORD OR SAVE THEM\n*\n* SET UP RECORD TYPE\n***********************************************************************\n         BAS   R14,CPINFO          FILL IN THE APPROPRIATE FIELDS      X\n                                   IN THE LOG RECORD FROM THE MDB      X\n                                   CP OBJECT                       F04A\n***********************************************************************\n* SAVE CONSOLE ID, CONSOLE NAME, MCS FLAGS, AND DESCRIPTORS        FP4C\n***********************************************************************\n         MVC   CONSID,MDBCCNID     SAVE CONSOLE ID\n         MVC   CONSNAME,MDBCCNNM   SAVE CONSOLE NAME               FD1A\n         MVC   MCSFLAGS,MDBCMCSF   SAVE MCS FLAGS                  FD1A\n         MVC   DESCS,MDBCDESC      SAVE DESCRIPTOR CODES           FP4A\n***********************************************************************\n* REMEMBER WHETHER THIS IS A WTL\n***********************************************************************\n         MVI   WTLFLAG,C'N'        ASSUME NOT WTL\n         TM    MDBCMSC2,MDBCWTL    IS IT A WTL?\n         BNO   NXTOBJ              NO, OK\n         MVI   WTLFLAG,C'Y'        SHOW IT'S A WTL\n***********************************************************************\nNXTOBJ   DS    0H                  FIND NEXT OBJECT\n***********************************************************************\n         TM    FLAGS1,FLAGGO+FLAGCO SEE IF WE FOUND GENERAL AND SCP\n         BO    FNDTXT              GOT THEM, LOOP THROUGH TEXT OBJS\n         USING MDB,R7\n         AH    R7,MDBLEN           BUMP TO NEXT OBJECT\n         CR    R7,R6               SEE IF THIS IS THE END\n         BL    OBJLP               NO, PROCESS THIS OBJECT\n         B     COPYLOOP            MISSING NECESSARY OBJECTS,          X\n                                   SKIP IT                         FD2C\n         DROP  R7\n***********************************************************************\n* FIND TEXT OBJECTS, CONVERT THEM TO SYSLOG RECORDS\n***********************************************************************\nFNDTXT   DS    0H\n         LA    R7,MDBHLEN(0,R8)    ADDRESS OF FIRST OBJECT\n         CR    R7,R6               SEE IF THIS IS THE END\n         BNL   COPYLOOP            GET ANOTHER MDB IF SO               X\n                                   OBJECTS)                        FD2C\n         USING MDB,R7\n***********************************************************************\n* FILL IN JOBNAME/CONSNAME FIELD\n***********************************************************************\n         BAS   R14,JOBINFO         FILL IN JOBNAME/CONSNAME FIELD  F04A\n*\n* SCAN MDB LOOKING FOR TEXT OBJECTS\n*\n***********************************************************************\nTOBJLP   CLC   MDBTYPE,=AL2(MDBTOBJ) CHECK FOR TEXT OBJECT\n         BNE   NXTTOBJ             NOT TEXT OBJECT, TRY NEXT\n***********************************************************************\n* TEXT OBJECT - CONVERT IT TO SYSLOG RECORD AND PUT IT TO THE FILE\n*\n***********************************************************************\n         USING MDBT,R7             ADDRESSABILITY TO TEXT OBJECT\n***********************************************************************\n* CALCULATE LENGTH OF TEXT IN R2\n***********************************************************************\n         LH    R2,MDBTLEN          GET TEXT OBJECT LENGTH\n         S     R2,=A(MDBTMSGT-MDBTLEN) SUBTRACT NON-TEXT SIZE\n         BNP   NXTTOBJ             SKIP IT IF LENGTH IS ZERO OR LESS\n         LA    R3,MDBTMSGT         GET ADDRESS OF TEXT\n         CLI   WTLFLAG,C'Y'        IS IT A WTL?\n         BNE   NOTWTL              NO, SKIP TO THE NON-WTL CASE\n***********************************************************************\n*\n* MESSAGE CAME FROM A WTL\n*\n* PUT ONLY THE TEXT (NO CONTROL INFO) FROM THE FIRST LINE\n*\n***********************************************************************\n         CH    R2,=H'128'          DOES TEXT LENGTH EXCEED MAX?\n         BNH   WTLLOK              NO, OK\n         LA    R2,128              SET IT TO MAX\nWTLLOK   S     R2,=F'1'            SUBTRACT 1 FOR MVC\n         BM    COPYLOOP            SKIP IT IF NEGATIVE (LENGTH < 1)FD2C\n         EX    R2,WTLMV            MOVE IN THE TEXT\n         LA    R2,5(0,R2)          ADD FOR RDW AND GET BACK THE 1\n         STH   R2,LOGBUFL          SET RECORD LENGTH               FP4C\nPUT1     PUT   SYUSR9,LOGBUFP      PUT THE SYSLOG RECORD\n         B     COPYLOOP            GET NEXT MDB                    FD2C\nWTLMV    MVC   LOGBUF(*-*),0(R3)   EXECUTED ABOVE\n*\nNOTWTL   DS    0H\n***********************************************************************\n* NOT A WTL\n*\n***********************************************************************\n         BAS   R14,PROCLINE        PROCESS TEXT LINE               F04A\n*\n* BUMP TO NEXT OBJECT\n*\nNXTTOBJ  DS    0H\n         USING MDB,R7\n         AH    R7,MDBLEN           BUMP TO NEXT OBJECT\n         CR    R7,R6               SEE IF THIS IS THE END\n         BL    TOBJLP              NO, LOOK AT THIS OBJECT\n         DROP  R7\n         B     COPYLOOP            DONE WITH THIS MDB; GET NEXT    FD2C\n*\n***********************************************************************\n* END COPY LOOP                                                   FD2C*\n***********************************************************************\n*\n***********************************************************************\n* PUTREC -- PUT A RECORD TO THE OUTPUT FILE AND SET UP FOR NEXT       *\n*                                                                     *\n*   INPUT:                                                            *\n*     R3 -> TEXT                                                      *\n*     R4  = TEXT LENGTH                                               *\n*     R14 = RETURN ADDRESS                                            *\n***********************************************************************\nPUTREC   DS    0H\n         BAKR  R14,0               SAVE CALLER'S ENVIRONMENT\n         LR    R1,R4               LENGTH OF TEXT\n         S     R1,=F'1'            SUBTRACT 1 FOR MVC\n         BM    PUTRECX             RETURN IF NEGATIVE (LENGTH < 1)\n         TM    PFLAGS,CENTURY      DOES CUSTOMER WANT A 4-DIGIT YEAR   X\n                                   IN OUTPUT RECORDS               F04A\n         BNO   TWODGYRR            NO, CUSTOMER WANTS A 2-DIGIT YEAR   X\n                                   IN THE OUTPUT RECORDS           F04A\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04A\n         USING HCRREC,R9           ADDRESSABILITY TO HCR MAPPING   F04A\n         LA    R2,HCRTEXT          BORROW R2 (PR WILL RESTORE IT)  F04A\n         A     R2,LOFF               FOR OFFSET TO TEXT IN LOG RECORD  X\n                                                                   F04A\n         EX    R1,PUTMV            MOVE IN THE TEXT                F04A\n         A     R1,=A(HCRHEADL+5)   CALCULATE LENGTH OF LOG RECORD  F04A\n         DROP  R9                  DROP ADDRESSABILITY TO HCRREC   F04A\n         B     PUTCONT             CONTINUE TO CALCULATE OUTPUT        X\n                                   RECORD LENGTH                   F04A\nTWODGYRR DS    0H                  PROCESS 2-DIGIT YEAR RECORDS    F04A\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04A\n         USING HCL,R9              ADDRESSABILITY TO HCL MAPPING   F04A\n         LA    R2,HCLTEXT          BORROW R2 (PR WILL RESTORE IT)\n         A     R2,LOFF               FOR OFFSET TO TEXT IN LOG RECORD\n         EX    R1,PUTMV            MOVE IN THE TEXT\n         A     R1,=A(HCLHEADL+5)   CALCULATE LENGTH OF LOG RECORD\n         DROP  R9                  DROP ADDRESSABILITY TO HCL      F04A\nPUTCONT  DS    0H\n         A     R1,LOFF               INCLUDING THE OFFSET\n         STH   R1,LOGBUFL          MOVE IT INTO PREFIX\nPUT2     PUT   SYUSR9,LOGBUFP      PUT THE SYSLOG RECORD\n*\n* SET UP FOR NEXT RECORD\n*\n         TM    PFLAGS,CENTURY      DOES CUSTOMER WANT A 4-DIGIT YEAR   X\n                                   IN OUTPUT RECORDS               F04A\n         BNO   TWODGYRN            NO, CUSTOMER WANTS A 2-DIGIT YEAR   X\n                                   IN THE OUTPUT RECORDS           F04A\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04A\n         USING HCRREC,R9           ADDRESSABILITY TO HCR MAPPING   F04A\n         ICM   R15,1,HCRREQTP     SAVE REQUEST TYPE                F04A\n         MVC   HCRREC(128),=CL128' ' CLEAR OUT LOG RECORD          F04A\n         STCM  R15,1,HCRREQTP     RESTORE REQUEST TYPE             F04A\n         MVI   FIRSTLNE,C'N'       SHOW THIS IS NO LONGER FIRST LINE   X\n                                                                   F04A\n         DROP  R9                  DROP ADDRESSABILITY TO HCRREC   F04A\n         B     PUTRECX             EXIT SUBROUTINE                 F04A\nTWODGYRN DS    0H                  PROCESS 2-DIGIT YEAR RECORDS    F04A\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04A\n         USING HCL,R9              ADDRESSABILITY TO HCL MAPPING   F04A\n         ICM   R15,1,HCLREQTP     SAVE REQUEST TYPE\n         MVC   HCL(128),=CL128' ' CLEAR OUT LOG RECORD\n         STCM  R15,1,HCLREQTP     RESTORE REQUEST TYPE\n         MVI   FIRSTLNE,C'N'       SHOW THIS IS NO LONGER FIRST LINE\n         DROP  R9                  DROP ADDRESSABILITY TO HCL      F04A\nPUTRECX  PR    ,                  RETURN\nPUTMV    MVC   0(*-*,R2),0(R3)    EXECUTED INSTRUCTION\n***********************************************************************\n* GENINFO -- GET INFORMATION FROM THE MDB GENERAL OBJECT AND          *\n*            FILL IN THE APPROPRIATE LOG RECORD FIELDS.               *\n*            USE THE HCL OR HCR TO MAP THE LOG RECORDS DEPENDING      *\n*            ON WHETHER THE OUTPUT RECORDS SHOULD HAVE A 2-DIGIT      *\n*            YEAR OR A 4-DIGIT YEAR RESPECTIVELY.                 F04A*\n*                                                                     *\n*   INPUT:                                                        F04A*\n*     R7 -> MDBG                                                  F04A*\n*     R14 = RETURN ADDRESS                                        F04A*\n***********************************************************************\nGENINFO  DS    0H                                                  F04A\n         BAKR  R14,0               SAVE CALLER'S ENVIRONMENT       F04A\n         USING MDBG,R7             ADDRESSABILITY TO GENERAL OBJECT    X\n                                                                   F04A\n         TM    PFLAGS,CENTURY      DOES CUSTOMER WANT A 4-DIGIT YEAR   X\n                                   IN OUTPUT RECORDS               F04A\n         BNO   TWODGYR1            NO, CUSTOMER WANTS A 2-DIGIT YEAR   X\n                                   IN THE OUTPUT RECORDS           F04A\n*\n* SET UP LOG RECORD BASE\n*                                                                  F04A\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04A\n         USING HCRREC,R9           ADDRESSABILITY TO HCR MAPPING   F04A\n         MVC   HCRSYSID,MDBGOSNM   SYSTEM NAME                     F04A\n         MVC   HCRDATE,MDBGDSTP    DATE WITH 4-DIGIT YEAR (YYYYDDD)    X\n                                                                   F04A\n         MVC   HCRTIME,MDBGTIMH    TIME                            F04A\n         MVI   HCRTIME+2,C':'      SEPARATE WITH                   F04A\n         MVI   HCRTIME+5,C':'       COLONS                         F04A\n         DROP  R9                                                  F04A\n         B     GENEXIT             EXIT SUBROUTINE                 F04A\nTWODGYR1 DS    0H                  PROCESS 2-DIGIT YEAR OUTPUT RECORDS X\n                                                                   F04A\n* SET UP LOG RECORD BASE\n*                                                                  F04M\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04C\n         USING HCL,R9              ADDRESSABILITY                  F04C\n         MVC   HCLSYSID,MDBGOSNM   SYSTEM NAME                     F04M\n         MVC   HCLDATE,MDBGDSTP+2  DATE (NOTE THAT MDB FORM IS YYYYDDD)\n         MVC   HCLTIME,MDBGTIMH    TIME                            F04M\n         MVI   HCLTIME+2,C':'      SEPARATE WITH                   F04M\n         MVI   HCLTIME+5,C':'       COLONS                         F04M\n         DROP  R9                                                  F04A\nGENEXIT  DS    0H                  EXIT SUBROUTINE                 F04A\n         DROP  R7                  DROP ADDRESSABILITY TO MDB GENERAL  X\n                                   OBJECT                          F04A\n         PR                        RETURN TO CALLER                F04A\n*\n***********************************************************************\n* CPINFO --  GET INFORMATION FROM THE MDB CP OBJECT AND               *\n*            FILL IN THE APPROPRIATE LOG RECORD FIELDS.               *\n*            USE THE HCL OR HCR TO MAP THE LOG RECORDS DEPENDING      *\n*            ON WHETHER THE OUTPUT RECORDS SHOULD HAVE A 2-DIGIT      *\n*            YEAR OR A 4-DIGIT YEAR RESPECTIVELY.                 F04A*\n*                                                                     *\n*   INPUT:                                                        F04A*\n*     R7 -> MDBSCP                                                F04A*\n*     R14 = RETURN ADDRESS                                        F04A*\n***********************************************************************\nCPINFO   DS    0H                                                  F04A\n         BAKR  R14,0               SAVE CALLER'S ENVIRONMENT       F04A\n         USING MDBSCP,R7           ADDRESSABILITY TO CP OBJECT     F04A\n         TM    PFLAGS,CENTURY      DOES CUSTOMER WANT A 4-DIGIT YEAR   X\n                                   IN OUTPUT RECORDS               F04A\n         BNO   TWODGYR2            NO, CUSTOMER WANTS A 2-DIGIT YEAR   X\n                                   IN THE OUTPUT RECORDS           F04A\n*\n* SET UP LOG RECORD BASE\n*                                                                  F04A\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04A\n         USING HCRREC,R9           ADDRESSABILITY TO HCR MAPPING   F04A\n         MVI   HCRRECTP,HCRMLWTO   ASSUME A MULTILINE MSG          F04A\n         CLC   MDBCLCNT,=F'1'      SEE IF MORE THAN ONE LINE       F04A\n         BH    CPROK4              OK IF SO                        F04A\n         MVI   HCRRECTP,HCRWTO     MAKE IT A SINGLE LINE MESSAGE   F04A\n         TM    MDBMLVL1,MDBMLR     IS IT A WTOR?                   F04A\n         BNO   CPROK4              NO, OK                          F04A\n         MVI   HCRRECTP,HCRWTOR    MAKE IT A WTOR                  F04A\n***********************************************************************\n* SET UP REQUEST TYPE                                              F04A\n***********************************************************************\nCPROK4   TM    MDBCMSC2,MDBCOCMD   IS IT AN OPERATOR CMD ECHO?     F04A\n         BNO   CPNOP4              NO, TRY NEXT                    F04A\n         MVI   HCRREQTP,HCRCMD     MARK IT AS OPERATOR COMMAND     F04A\n         CLC   MDBCCNID,=F'0'      IS IT AN INTERNAL CMD (CONS ID=0)?  X\n                                                                   F04A\n         BNE   CPRC4               NO, SO HCLCMD IS OK             F04A\n         MVI   HCRREQTP,HCRINTNL   MARK IT AS INTERNAL COMMAND     F04A\n         B     CPRC4                                               F04A\nCPNOP4   TM    MDBCATT1,MDBCMCSC   IS IT A COMMAND RESPONSE?       F04A\n         BO    CPRSP4              YES, MARK IT SO                 F04A\n         TM    MDBDESC1,MDBDESCE   IS IT DESC=5 (ALSO CMD RESP)    F04A\n         BNO   CPRC4               NO, NOT CMD RESPONSE            F04A\nCPRSP4   MVI   HCRREQTP,HCRRESP   MARK IT AS COMMAND RESPONSE      F04A\n***********************************************************************\n* MAKE ROUTING CODES PRINTABLE                                     F04A\n***********************************************************************\nCPRC4    UNPK  TWORK(9),MDBCERC(5) UNPACK FIRST 28 ROUTING CODES   F04A\n         TR    TWORK(7),HEXTAB     MAKE THEM PRINTABLE             F04A\n         MVC   HCRROUTC,TWORK      MOVE INTO RECORD                F04A\n***********************************************************************\n* MAKE REQUEST FLAGS PRINTABLE                                     F04A\n***********************************************************************\n         UNPK  TWORK(9),MDBCXMOD(5) UNPACK REQUEST FLAGS           F04A\n         TR    TWORK(8),HEXTAB     MAKE THEM PRINTABLE             F04A\n         MVC   HCRREQFL,TWORK      MOVE INTO RECORD                F04A\n         MVC   REQFL,TWORK         SAVE FOR SECOND LINE            F04A\n         DROP  R9                                                  F04A\n         B     CPEXIT              EXIT SUBROUTINE                 F04A\nTWODGYR2 DS    0H                  PROCESS 2-DIGIT YEAR OUTPUT RECORDS X\n                                                                   F04A\n* SET UP LOG RECORD BASE\n*                                                                  F04M\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04C\n         USING HCL,R9              ADDRESSABILITY                  F04C\n         MVI   HCLRECTP,HCLMLWTO   ASSUME A MULTILINE MSG          F04M\n         CLC   MDBCLCNT,=F'1'      SEE IF MORE THAN ONE LINE       F04M\n         BH    CPROK               OK IF SO                        F04M\n         MVI   HCLRECTP,HCLWTO     MAKE IT A SINGLE LINE MESSAGE   F04M\n         TM    MDBMLVL1,MDBMLR     IS IT A WTOR?                   F04M\n         BNO   CPROK               NO, OK                          F04M\n         MVI   HCLRECTP,HCLWTOR    MAKE IT A WTOR                  F04M\n***********************************************************************\n* SET UP REQUEST TYPE                                              F04M\n***********************************************************************\nCPROK    TM    MDBCMSC2,MDBCOCMD   IS IT AN OPERATOR CMD ECHO?     F04M\n         BNO   CPNOP               NO, TRY NEXT                    F04M\n         MVI   HCLREQTP,HCLCMD     MARK IT AS OPERATOR COMMAND     F04M\n         CLC   MDBCCNID,=F'0'      IS IT AN INTERNAL CMD (CONS ID=0)?  X\n                                                                   F04M\n         BNE   CPRC                NO, SO HCLCMD IS OK             F04M\n         MVI   HCLREQTP,HCLINTNL   MARK IT AS INTERNAL COMMAND     F04M\n         B     CPRC                                                F04M\nCPNOP    TM    MDBCATT1,MDBCMCSC   IS IT A COMMAND RESPONSE?       F04M\n         BO    CPRSP               YES, MARK IT SO                 F04M\n         TM    MDBDESC1,MDBDESCE   IS IT DESC=5 (ALSO CMD RESP)    F04M\n         BNO   CPRC                NO, NOT CMD RESPONSE            F04M\nCPRSP    MVI   HCLREQTP,HCLRESP   MARK IT AS COMMAND RESPONSE      F04M\n***********************************************************************\n* MAKE ROUTING CODES PRINTABLE                                     F04M\n***********************************************************************\nCPRC     UNPK  TWORK(9),MDBCERC(5) UNPACK FIRST 28 ROUTING CODES   F04M\n         TR    TWORK(7),HEXTAB     MAKE THEM PRINTABLE             F04M\n         MVC   HCLROUTC,TWORK      MOVE INTO RECORD                F04M\n***********************************************************************\n* MAKE REQUEST FLAGS PRINTABLE                                     F04M\n***********************************************************************\n         UNPK  TWORK(9),MDBCXMOD(5) UNPACK REQUEST FLAGS           F04M\n         TR    TWORK(8),HEXTAB     MAKE THEM PRINTABLE             F04M\n         MVC   HCLREQFL,TWORK      MOVE INTO RECORD                F04M\n         MVC   REQFL,TWORK         SAVE FOR SECOND LINE            F04M\n         DROP  R9                                                  F04A\nCPEXIT   DS    0H                  EXIT SUBROUTINE                 F04A\n         DROP  R7                  DROP ADDRESSABILITY TO MDB CP       X\n                                                                   F04A\n         PR                        RETURN TO CALLER                F04A\n*\n***********************************************************************\n* JOBINFO--  GET JOBNAME INFORMATION AND FILL IN THE                  *\n*            APPROPRIATE LOG RECORD FIELDS.                           *\n*            USE THE HCL OR HCR TO MAP THE LOG RECORDS DEPENDING      *\n*            ON WHETHER THE OUTPUT RECORDS SHOULD HAVE A 2-DIGIT      *\n*            YEAR OR A 4-DIGIT YEAR RESPECTIVELY.                 F04A*\n*                                                                     *\n*   INPUT:                                                        F04A*\n*     R7 -> MDB                                                   F04A*\n*     R14 = RETURN ADDRESS                                        F04A*\n***********************************************************************\nJOBINFO  DS    0H                                                  F04A\n         BAKR  R14,0               SAVE CALLER'S ENVIRONMENT       F04A\n         USING MDB,R7              ADDRESSABILITY TO MDB OBJECT    F04A\n         TM    PFLAGS,CENTURY      DOES CUSTOMER WANT A 4-DIGIT YEAR   X\n                                   IN OUTPUT RECORDS               F04A\n         BNO   TWODGYR3            NO, CUSTOMER WANTS A 2-DIGIT YEAR   X\n                                   IN THE OUTPUT RECORDS           F04A\n*\n* SET UP LOG RECORD BASE\n*                                                                  F04A\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04A\n         USING HCRREC,R9           ADDRESSABILITY TO HCR MAPPING   F04A\n         CLI   HCRREQTP,HCRCMD     IS IT A COMMAND?                F04A\n         BNE   NOTCMD4             NO, TRY NEXT                    F04A\n         CLC   CONSID,=F'128'      IS IT AN INSTREAM COMMAND?      F04A\n         BE    GETCONS4            YES, USE CONSOLE NAME (INSTREAM)    X\n                                                                   F04A\n         CLC   JOBNAME,=CL8' '     IS JOBNAME BLANK?               F04A\n         BE    GETCONS4            YES, USE CONSOLE NAME           F04A\n         B     CHKMCS4             GO SEE IF IT'S AN MCS CONSOLE   F04A\nNOTCMD4  CLI   HCRREQTP,HCRINTNL   IS IT AN INTERNAL COMMAND?      F04A\n         BNE   NOTINTL4            NO, TRY NEXT                    F04A\n         CLC   JOBNAME,=CL8' '     IS JOBNAME BLANK?               F04A\n         BNE   GETJOB4             NO, SO USE JOB NAME             F04A\n         MVI   HCRREQTP,HCRCMD     CHANGE REQUEST TYPE TO \"COMMAND\"    X\n                                                                   F04A\n         B     GETCONS4            USE CONSOLE NAME (INTERNAL)     F04A\nNOTINTL4 CLI   HCRREQTP,HCLRESP    IS IT A COMMAND RESPONSE?       F04A\n         BNE   GETJOB4             NO, SO USE JOB NAME             F04A\n         TM    MCSFLAG1,MDBMCSB+MDBMCSH WAS IT SENT BY CONSOLE ID      X\n                                        IN REG 0?                  F04A\n         BZ    GETJOB4             NO, USE JOB NAME                F04A\n         CLC   JOBNAME,=CL8' '     IS JOBNAME BLANK?               F04A\n         BNE   GETJOB4             NO, SO USE JOB NAME             F04A\n         CLC   CONSID,=F'0'        IS IT INTERNAL?                 F04A\n         BE    GETCONS4            YES, USE CONSOLE NAME (INTERNAL)    X\n                                                                   F04A\n         CLC   CONSID,=F'128'      IS IT INSTREAM?                 F04A\n         BE    GETCONS4            YES, USE CONSOLE NAME (INSTREAM)    X\n                                                                   F04A\nCHKMCS4  CLI   CONSID,X'00'        IS CONSOLE CLASS ZERO (MCS)?    F04A\n         BE    GETJOB4             YES, USE JOB NAME               F04A\n         TM    CONSID,X'E0'        IS CONSOLE CLASS A JES3 CONSOLE?    X\n                                                                   F04A\n         BNZ   GETJOB4             YES, SO USE JOB NAME            F04A\n***********************************************************************\n* MOVE CONSOLE NAME INTO HCR                                       F04A\n***********************************************************************\nGETCONS4 MVC   HCRCONID,CONSNAME   MOVE IN CONSOLE NAME FROM MDB   F04A\n         CLC   CONSID,=F'0'        IS IT \"INTERNAL\"?               F04A\n         BNE   CONSNOT4            NO, OK                          F04A\n         MVC   HCRCONID,=CL8'INTERNAL' MOVE IN \"INTERNAL\"\n         B     MDBJBOK4\nCONSNOT4 CLC   CONSID,=F'128'      IS IT \"INSTREAM\"?\n         BNE   MDBJBOK4            NO, OK\n         MVC   HCRCONID,=CL8'INSTREAM' MOVE IN \"INSTREAM\"\n         B     MDBJBOK4            DONE WITH JOB/CONSOLE FIELD\n***************************************************************\n*        MOVE IN JOB NAME\nGETJOB4  MVC   HCRJOBID,JOBNAME    MOVE IN JOB NAME\n*\nMDBJBOK4 DS    0H\n*\n* ERASE THE TIMESTAMP IF NOTIME WAS REQUESTED\n***************************************************************\n         TM    MCSFLAG2,MDBMCSI    WAS \"NOTIME\" REQUESTED?\n         BNO   TIMEOK              NO, SO LEAVE TIME ALONE\n         MVC   HCRTIME,=CL11' '    BLANK OUT THE TIME STAMP\n         DROP  R9\n         B     TIMEOK              EXIT SUBROUTINE\nTWODGYR3 DS    0H                  PROCESS 2-DIGIT YEAR OUTPUT RECO\n* SET UP LOG RECORD BASE\n*\n         LA    R9,LOGBUF           SYSLOG RECORD\n         USING HCL,R9              ADDRESSABILITY\n         CLI   HCLREQTP,HCLCMD     IS IT A COMMAND?\n         BNE   NOTCMD              NO, TRY NEXT\n         CLC   CONSID,=F'128'      IS IT AN INSTREAM COMMAND?\n         BE    GETCONS             YES, USE CONSOLE NAME (INSTREAM)\n         CLC   JOBNAME,=CL8' '     IS JOBNAME BLANK?\n         BE    GETCONS             YES, USE CONSOLE NAME\n         B     CHKMCS              GO SEE IF IT'S AN MCS CONSOLE\nNOTCMD   CLI   HCLREQTP,HCLINTNL   IS IT AN INTERNAL COMMAND?\n         BNE   NOTINTL             NO, TRY NEXT\n         CLC   JOBNAME,=CL8' '     IS JOBNAME BLANK?\n         BNE   GETJOB              NO, SO USE JOB NAME\n         MVI   HCLREQTP,HCLCMD     CHANGE REQUEST TYPE TO \"COMMAND\"\n         B     GETCONS             USE CONSOLE NAME (INTERNAL)\nNOTINTL  CLI   HCLREQTP,HCLRESP    IS IT A COMMAND RESPONSE?\n         BNE   GETJOB              NO, SO USE JOB NAME\n         TM    MCSFLAG1,MDBMCSB+MDBMCSH WAS IT SENT BY CONSOLE ID      *\n                                        IN REG 0?\n         BZ    GETJOB              NO, USE JOB NAME\n         CLC   JOBNAME,=CL8' '     IS JOBNAME BLANK?\n         BNE   GETJOB              NO, SO USE JOB NAME\n         CLC   CONSID,=F'0'        IS IT INTERNAL?\n         BE    GETCONS             YES, USE CONSOLE NAME (INTERNAL)\n         CLC   CONSID,=F'128'      IS IT INSTREAM?\n         BE    GETCONS             YES, USE CONSOLE NAME (INSTREAM)\nCHKMCS   CLI   CONSID,X'00'        IS CONSOLE CLASS ZERO (MCS)?\n         BE    GETJOB              YES, USE JOB NAME\n         TM    CONSID,X'E0'        IS CONSOLE CLASS A JES3 CONSOLE?\n         BNZ   GETJOB              YES, SO USE JOB NAME\n*******************************************************************\n* MOVE CONSOLE NAME INTO HCL\n*******************************************************************\nGETCONS  MVC   HCLCONID,CONSNAME   MOVE IN CONSOLE NAME FROM MDB\n         CLC   CONSID,=F'0'        IS IT \"INTERNAL\"?\n         BNE   CONSNOTI            NO, OK\n         MVC   HCLCONID,=CL8'INTERNAL' MOVE IN \"INTERNAL\"\n         B     MDBJOBOK\nCONSNOTI CLC   CONSID,=F'128'      IS IT \"INSTREAM\"?\n         BNE   MDBJOBOK            NO, OK\n         MVC   HCLCONID,=CL8'INSTREAM' MOVE IN \"INSTREAM\"\n         B     MDBJOBOK            DONE WITH JOB/CONSOLE FIELD\n*******************************************************************\n*        MOVE IN JOB NAME\nGETJOB   MVC   HCLJOBID,JOBNAME    MOVE IN JOB NAME\n*\nMDBJOBOK DS    0H\n*\n* ERASE THE TIMESTAMP IF NOTIME WAS REQUESTED\n*******************************************************************\n         TM    MCSFLAG2,MDBMCSI    WAS \"NOTIME\" REQUESTED?\n         BNO   TIMEOK              NO, SO LEAVE TIME ALONE\n         MVC   HCLTIME,=CL11' '    BLANK OUT THE TIME STAMP\n         DROP  R9\nTIMEOK   DS    0H\n*******************************************************************\n* REMEMBER THIS IS THE FIRST LINE IN THE MESSAGE\n         MVI   FIRSTLNE,C'Y'       SET FIRST-LINE INDICATOR\n         DROP  R7                  DROP ADDRESSABILITY TO MDB OBJEC\n         PR                        RETURN TO CALLER\n*\n***********************************************************************\n* PROCLINE-  PROCESS THE LINE. TEST TO SEE IF THE MESSAGE IF A        *\n*            MULTILINE MESSAGE, AND IF SO SET THE APPROPRIATE         *\n*            LOG RECORD FIELDS.                                       *\n*            TEST TO SEE IF THE LINE FITS IN ONE OUTPUT RECORD.       *\n*            IF LINE DOES NOT FIT IN ONE OUTPUT RECORD, THEN          *\n*            SPLIT THE LINE. FINALLY PUT THE OUTPUT RECORD IN         *\n*            THE OUTPUT DATASET.                                      *\n*            USE THE HCL OR HCR TO MAP THE LOG RECORDS DEPENDING      *\n*            ON WHETHER THE OUTPUT RECORDS SHOULD HAVE A 2-DIGIT      *\n*            YEAR OR A 4-DIGIT YEAR RESPECTIVELY.                 F04A*\n*                                                                     *\n*   INPUT:                                                        F04A*\n*     R7 -> MDBT                                                  F04A*\n*     R14 = RETURN ADDRESS                                        F04A*\n***********************************************************************\nPROCLINE DS    0H                                                  F04A\n         BAKR  R14,0               SAVE CALLER'S ENVIRONMENT       F04A\n         USING MDBT,R7             ADDRESSABILITY TO MDB TEXT          X\n                                   OBJECT                          F04A\n         TM    PFLAGS,CENTURY      DOES CUSTOMER WANT A 4-DIGIT YEAR   X\n                                   IN OUTPUT RECORDS               F04A\n         BNO   TWODGYR4            NO, CUSTOMER WANTS A 2-DIGIT YEAR   X\n                                   IN THE OUTPUT RECORDS           F04A\n*\n* SET UP LOG RECORD BASE\n*                                                                  F04A\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04A\n         USING HCRREC,R9           ADDRESSABILITY TO HCR MAPPING   F04A\n***********************************************************************\n* SEE IF THIS IS LINE 2 OR GREATER OF A MULTILINE, AND IF SO\n*     SHOW THE MULTILINE ID AND\n*     FILL IN THE RECORD TYPE FROM THE LINE TYPE                   F04A\n***********************************************************************\n         CLI   FIRSTLNE,C'Y'       SEE IF THIS IS THE FIRST LINE   F04A\n         BE    MDBMLOK4            BYPASS IF SO                    F04A\n         MVC   HCRMLID,MLID        MOVE IN THE MULTILINE ID NUMBER F04A\n         MVC   HCRREQFL,REQFL      MOVE IN REQUEST FLAGS           F04A\n         TM    MDBTLNT1,MDBTLABT   SEE IF LABEL LINE               F04A\n         BNO   TXTNL4              NO, TRY DATA                    F04A\n         MVI   HCRRECTP,HCRLABEL   SHOW IT IS A LABEL              F04A\nTXTNL4   TM    MDBTLNT1,MDBTDATT   SEE IF DATA LINE                F04A\n         BNO   TXTND4              NO, TRY END                     F04A\n         MVI   HCRRECTP,HCRDATA    SHOW IT IS DATA                 F04A\nTXTND4   TM    MDBTLNT1,MDBTENDT   SEE IF END LINE                 F04A\n         BNO   MDBMLOK4            NO, OK                          F04A\n         MVI   HCRRECTP,HCRDTEND   SHOW IT IS THE END LINE         F04A\nMDBMLOK4 DS    0H                                                  F04A\n***********************************************************************\n* PLACE TEXT BEHIND CONTROL INFO                                   F04A\n***********************************************************************\n         MVC   LOFF,=F'0'          INIT OFFSET OF TEXT IN LOG RECORD\n*                                   (ZERO FOR FIRST LINE, THEN ONE)\n*                                                                  F04A\n***********************************************************************\n* LOOP THROUGH TEXT, ISSUE PUT FOR EACH PIECE OF TEXT UP TO LENGTH 128\n*                                                                  F04A\n***********************************************************************\nTXTLP4   C     R2,=A(128-HCRHEADL) SEE IF TEXT IS TOO LONG FOR BUFFER  X\n                                                                   F04A\n         BNH   TXTDN4              DO LAST PIECE IF NOT            F04A\n***********************************************************************\n* TRUNCATE AT A BLANK OR COMMA, GET LENGTH IN R4                   F04A\n***********************************************************************\n         LA    R4,127-HCRHEADL(0,R3) STARTING POSITION             F04A\n         LA    R1,118-HCRHEADL(0,R3) ENDING POSITION               F04A\n         MVC   BLANKCT,=F'1'       ASSUME THERE IS A BLANK         F04A\nTXTSC4   CLI   0(R4),C' '          LOOK FOR A BLANK                F04A\n         BE    TXTL4               STOP IF FOUND                   F04A\n         CLI   0(R4),C','          LOOK FOR A COMMA                F04A\n         BNE   TXTBK4              NOT FOUND, TRY PREVIOUS POSITION    X\n                                                                   F04A\n         LA    R4,1(,R4)           KEEP COMMA ON THIS LINE         F04A\n         MVC   BLANKCT,=F'0'       SHOW NO BLANK FOUND             F04A\n         B     TXTL4               SPLIT THE LINE                  F04A\nTXTBK4   BCTR  R4,0                BACK UP                         F04A\n         CR    R4,R1               SEE IF AT END POSITION          F04A\n         BNL   TXTSC4              LOOP BACK IF NOT                F04A\n         LA    R4,128-HCRHEADL(0,R3) TOO BIG - TRUNC AT 128        F04A\n         MVC   BLANKCT,=F'0'       SHOW NO BLANK FOUND             F04A\nTXTL4    SR    R4,R3               CALCULATE LENGTH                F04A\n***********************************************************************\n* ISSUE PUT FOR THE PARTIAL TEXT                                   F04A\n***********************************************************************\n         BAS   R14,PUTREC          PUT THE SYSLOG RECORD           F04A\n         MVI   HCRRECTP,HCRSPLIT   SHOW THIS IS A CONTINUATION     F04A\n         MVC   LOFF,=F'1'          ADJUST TEXT OFFSET FOR CONT. LINES  X\n                                                                   F04A\n         A     R4,BLANKCT          SKIP THE BLANK IF THERE WAS ONE F04A\n         SR    R2,R4               REDUCE THE COUNT                F04A\n         AR    R3,R4               BUMP DOWN THE RECORD            F04A\n         B     TXTLP4              LOOP TO DO ALL PIECES           F04A\n***********************************************************************\n* ISSUE PUT FOR LAST (OR ONLY) PIECE                               F04A\n*                                                                  F04A\nTXTDN4   DS    0H                                                  F04A\n*                                                                  F04A\n* IF THIS IS THE FIRST LINE OF A MULTILINE AND IS NOT AN OPERATOR  F04A\n*     REQUEST (DESCRIPTOR CODE 9), APPEND THE MULTILINE ID TO THE  F04A\n*     TEXT.  IF THERE IS NOT ENOUGH ROOM IN THE LINE FOR THE ID,   F04A\n*     PRINT IT ON THE NEXT (SPLIT) LINE BY ITSELF.                 F04A\n***********************************************************************\n         CLI   HCRRECTP,HCRMLWTO   IS IT FIRST LINE OF MULTILINE?  F04A\n         BNE   NOTFIRST            NO, OK                          F04A\n         TM    DESC2,MDBDESCI      IS IT DESCRIPTOR CODE 9?        F04A\n         BO    NOTFIRST            YES, OK                         F04A\n         C     R2,=A(128-HCRHEADL-4) SEE IF THERE IS ROOM FOR MLID F04A\n         BH    MLSPLIT4            GO SPLIT LINE IF NOT            F04A\n*        BUILD LINE WITH MLID APPENDED                             F04A\n         LR    R14,R2              GET TEXT LENGTH                 F04A\n         BCTR  R14,0               SUBTRACT 1 FOR MVC              F04A\n         EX    R14,MLMVC4          MOVE IN THE TEXT                F04A\n         LA    R14,MLTEMPLN(R2)    END OF TEXT + 1                 F04A\n         MVC   0(4,R14),HCID       APPEND MLID                     F04A\n         A     R2,=F'4'            ADD 4 TO LENGTH FOR MLID        F04A\n         LA    R3,MLTEMPLN         POINT TO NEW LINE               F04A\n         B     NOTFIRST            GO PUT THE LINE                 F04A\nMLMVC4   MVC   MLTEMPLN(*-*),0(R3) EXECUTED ABOVE                  F04A\n*        PUT THE LINE AND BUILD A SPLIT LINE CONTAINING THE MLID   F04A\nMLSPLIT4 DS    0H                                                  F04A\n         LR    R4,R2               GET TEXT LENGTH                 F04A\n         BAS   R14,PUTREC          PUT THE LINE                    F04A\n         MVI   HCRRECTP,HCRSPLIT   SHOW THIS IS A CONTINUATION     F04A\n         L     R2,=F'4'            LENGTH OF MLID                  F04A\n         LA    R3,HCID             ADDRESS OF MLID                 F04A\n         DROP  R9                                                  F04A\n         B     NOTFIRST            GO PUT THE LINE                 F04A\nTWODGYR4 DS    0H                  PROCESS 2-DIGIT YEAR OUTPUT RECORDS X\n                                                                   F04A\n* SET UP LOG RECORD BASE\n*                                                                  F04M\n         LA    R9,LOGBUF           SYSLOG RECORD                   F04C\n         USING HCL,R9              ADDRESSABILITY                  F04C\n***********************************************************************\n* SEE IF THIS IS LINE 2 OR GREATER OF A MULTILINE, AND IF SO\n*     SHOW THE MULTILINE ID AND\n*     FILL IN THE RECORD TYPE FROM THE LINE TYPE                   F04M\n***********************************************************************\n         CLI   FIRSTLNE,C'Y'       SEE IF THIS IS THE FIRST LINE   F04M\n         BE    MDBMLOK             BYPASS IF SO                    F04M\n         MVC   HCLMLID,MLID        MOVE IN THE MULTILINE ID NUMBER F04M\n         MVC   HCLREQFL,REQFL      MOVE IN REQUEST FLAGS           F04M\n         TM    MDBTLNT1,MDBTLABT   SEE IF LABEL LINE               F04M\n         BNO   TXTNL               NO, TRY DATA                    F04M\n         MVI   HCLRECTP,HCLLABEL   SHOW IT IS A LABEL              F04M\nTXTNL    TM    MDBTLNT1,MDBTDATT   SEE IF DATA LINE                F04M\n         BNO   TXTND               NO, TRY END                     F04M\n         MVI   HCLRECTP,HCLDATA    SHOW IT IS DATA                 F04M\nTXTND    TM    MDBTLNT1,MDBTENDT   SEE IF END LINE                 F04M\n         BNO   MDBMLOK             NO, OK                          F04M\n         MVI   HCLRECTP,HCLDTEND   SHOW IT IS THE END LINE         F04M\nMDBMLOK  DS    0H                                                  F04M\n***********************************************************************\n* PLACE TEXT BEHIND CONTROL INFO                                   F04M\n***********************************************************************\n         MVC   LOFF,=F'0'          INIT OFFSET OF TEXT IN LOG RECORD\n*                                   (ZERO FOR FIRST LINE, THEN ONE)\n*                                                                  F04M\n***********************************************************************\n* LOOP THROUGH TEXT, ISSUE PUT FOR EACH PIECE OF TEXT UP TO LENGTH 128\n*                                                                  F04M\n***********************************************************************\nTXTLP    C     R2,=A(128-HCLHEADL) SEE IF TEXT IS TOO LONG FOR BUFFER  X\n                                                                   F04M\n         BNH   TXTDN               DO LAST PIECE IF NOT            F04M\n***********************************************************************\n* TRUNCATE AT A BLANK OR COMMA, GET LENGTH IN R4                   F04M\n***********************************************************************\n         LA    R4,127-HCLHEADL(0,R3) STARTING POSITION             F04M\n         LA    R1,118-HCLHEADL(0,R3) ENDING POSITION               F04M\n         MVC   BLANKCT,=F'1'       ASSUME THERE IS A BLANK         F04M\nTXTSC    CLI   0(R4),C' '          LOOK FOR A BLANK                F04M\n         BE    TXTL                STOP IF FOUND                   F04M\n         CLI   0(R4),C','          LOOK FOR A COMMA                F04M\n         BNE   TXTBK               NOT FOUND, TRY PREVIOUS POSITION    X\n                                                                   F04M\n         LA    R4,1(,R4)           KEEP COMMA ON THIS LINE         F04M\n         MVC   BLANKCT,=F'0'       SHOW NO BLANK FOUND             F04M\n         B     TXTL                SPLIT THE LINE                  F04M\nTXTBK    BCTR  R4,0                BACK UP                         F04M\n         CR    R4,R1               SEE IF AT END POSITION          F04M\n         BNL   TXTSC               LOOP BACK IF NOT                F04M\n         LA    R4,128-HCLHEADL(0,R3) TOO BIG - TRUNC AT 128        F04M\n         MVC   BLANKCT,=F'0'       SHOW NO BLANK FOUND             F04M\nTXTL     SR    R4,R3               CALCULATE LENGTH                F04M\n***********************************************************************\n* ISSUE PUT FOR THE PARTIAL TEXT                                   F04M\n***********************************************************************\n         BAS   R14,PUTREC          PUT THE SYSLOG RECORD           F04M\n         MVI   HCLRECTP,HCLSPLIT   SHOW THIS IS A CONTINUATION     F04M\n         MVC   LOFF,=F'1'          ADJUST TEXT OFFSET FOR CONT. LINES  X\n                                                                   F04M\n         A     R4,BLANKCT          SKIP THE BLANK IF THERE WAS ONE F04M\n         SR    R2,R4               REDUCE THE COUNT                F04M\n         AR    R3,R4               BUMP DOWN THE RECORD            F04M\n         B     TXTLP               LOOP TO DO ALL PIECES           F04M\n***********************************************************************\n* ISSUE PUT FOR LAST (OR ONLY) PIECE                               F04M\n*                                                                  F04M\nTXTDN    DS    0H                                                  F04M\n*                                                                  F04M\n* IF THIS IS THE FIRST LINE OF A MULTILINE AND IS NOT AN OPERATOR  F04M\n*     REQUEST (DESCRIPTOR CODE 9), APPEND THE MULTILINE ID TO THE  F04M\n*     TEXT.  IF THERE IS NOT ENOUGH ROOM IN THE LINE FOR THE ID,   F04M\n*     PRINT IT ON THE NEXT (SPLIT) LINE BY ITSELF.                 F04M\n***********************************************************************\n         CLI   HCLRECTP,HCLMLWTO   IS IT FIRST LINE OF MULTILINE?  F04M\n         BNE   NOTFIRST            NO, OK                          F04M\n         TM    DESC2,MDBDESCI      IS IT DESCRIPTOR CODE 9?        F04M\n         BO    NOTFIRST            YES, OK                         F04M\n         C     R2,=A(128-HCLHEADL-4) SEE IF THERE IS ROOM FOR MLID F04M\n         BH    MLSPLIT             GO SPLIT LINE IF NOT            F04M\n*        BUILD LINE WITH MLID APPENDED                             F04M\n         LR    R14,R2              GET TEXT LENGTH                 F04M\n         BCTR  R14,0               SUBTRACT 1 FOR MVC              F04M\n         EX    R14,MLMVC           MOVE IN THE TEXT                F04M\n         LA    R14,MLTEMPLN(R2)    END OF TEXT + 1                 F04M\n         MVC   0(4,R14),HCID       APPEND MLID                     F04M\n         A     R2,=F'4'            ADD 4 TO LENGTH FOR MLID        F04M\n         LA    R3,MLTEMPLN         POINT TO NEW LINE               F04M\n         B     NOTFIRST            GO PUT THE LINE                 F04M\nMLMVC    MVC   MLTEMPLN(*-*),0(R3) EXECUTED ABOVE                  F04M\n*        PUT THE LINE AND BUILD A SPLIT LINE CONTAINING THE MLID   F04M\nMLSPLIT  DS    0H                                                  F04M\n         LR    R4,R2               GET TEXT LENGTH                 F04M\n         BAS   R14,PUTREC          PUT THE LINE                    F04M\n         MVI   HCLRECTP,HCLSPLIT   SHOW THIS IS A CONTINUATION     F04M\n         L     R2,=F'4'            LENGTH OF MLID                  F04M\n         LA    R3,HCID             ADDRESS OF MLID                 F04M\n         DROP  R9                                                  F04A\nNOTFIRST DS    0H                                                  F04M\n*                                                                  F04M\n         LR    R4,R2               GET LENGTH OF TEXT              F04M\n         BAS   R14,PUTREC          PUT THE SYSLOG RECORD           F04M\n         DROP  R7                  DROP ADDRESSABILITY TO MDB TEXT     X\n                                   OBJECT                          F04A\n         PR                        RETURN TO CALLER                F04A\n*\n* MESSR -- DISPLAY A MESSAGE                                          *\n*                                                                     *\n*   INPUT:                                                            *\n*     R2 -> TEXT OF MESSAGE                                           *\n*     R14 = RETURN ADDRESS                                            *\n***********************************************************************\nMESSR    DS    0H\n         BAKR  R14,0               SAVE CALLER'S ENVIRONMENT\n         WTO   TEXT=(R2)           DISPLAY MESSAGE\n         PR                        RETURN TO CALLER\n*\nENDFILE1 DS        0H\n         CLOSE     (SYUSR8)\n         CLOSE     (SYUSR9)\n         FIN       CR,TIPO=NORENT\n*        +--------------------------------+\n*>>>>>>>>| RESERVA DE AREAS ESTATICAS     |\n*        +--------------------------------+\nFISYS    DCB   DDNAME=SYSIN,MACRF=GL,DSORG=PS,EODAD=ENDFISYS\n*        <> FB-80-0\nSYUSR8   DCB       MACRF=GL,DSORG=PS,EODAD=ENDFILE1\n*        <> VB-4096-8196\n*\nSYUSR9   DCB   DDNAME=SYUSR9,      DCB FOR OUTPUT FILE                 X\n               DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               RECFM=VB,                                               X\n               LRECL=132           128 + 4 FOR RDW\n*\nREQFL    DC    CL8' '              COPY OF REQUEST FLAGS\nWTLFLAG  DS    C                   'Y' INDICATES A WTL\nFIRSTLNE DS    C                   'Y' INDICATES THE FIRST MSG LINE\nBLANKCT  DS    F                   COUNT OF BLANKS IN MESSAGE SEGMENT\nLOFF     DS    F                   OFFSET OF TEXT IN LOG RECORD\nDBLWD    DS    D                   WORK AREA FOR CVD\nTWORK    DS    CL16                WORK AREA FOR HEX TRANSLATE\nJOBNAME  DS    CL8                 JOBNAME\nCONSNAME DS    CL8                 CONSOLE NAME\nCONSID   DS    XL4                 CONSOLE ID\n*\nMCSFLAGS DS    0CL2                MCS FLAGS FROM MDB\nMCSFLAG1 DS    X                   MCS FLAG 1\nMCSFLAG2 DS    X                   MCS FLAG 2\n*\nKSYSIN   DC    CL8'SYSIN   '\nKSYSOUT  DC    CL7'SYSOUT='\nKDDNAME  DC    CL7'DDNAME='\n*\n* MENSAJES DEL PROGRAMA\n*\nMDCVMSG  DC    AL2(MDCVMLEN)\nMDCVMSGC DC    CL12'**MDCVLOG** '\nMDCVMSGT DC    CL40' '\nMDCVMLEN EQU   *-MDCVMSGC\n*\nMDCVMSG1 DC    CL40'ASIGNACION DINAMICA ERRONEA. '\nMDCVMSG2 DC    CL40'ERROR EN TIPO DE FICHERO. '\nMDCVMSG3 DC    CL40'R15=XXXXXXXX  RC=XXXX '\n*\nPFLAGS   DS    XL1                 PARAMETER FLAGS\nCOPY     EQU   X'01'               \"COPY\" WAS SPECIFIED\nDELETE   EQU   X'02'               \"DELETE\" WAS SPECIFIED\nHCFORMAT EQU   X'04'               \"HCFORMAT\" WAS SPECIFIED\nYEAR     EQU   X'08'               \"HCFORMAT(YEAR)\" WAS SPECIFIED\nCENTURY  EQU   X'10'               \"HCFORMAT(CENTURY)\" WAS SPECIFIE\n*\nHCID     DC    CL4' '              HARDCOPY ID\n         ORG   HCID+1              MULTILINE ID GOES IN BYTES 2-4\n*\nMLID     DC    C'NNN'              MULTILINE ID FROM MESSAGE\n         ORG   ,\nMLTEMPLN DC    CL80' '             WORK AREA FOR SPLIT LINE\n*\nDESCS    DS    0XL2                COPY OF DESCRIPTOR CODES\nDESC1    DS    XL1                 DESCRIPTOR CODES BYTE 1\nDESC2    DS    XL1                 DESCRIPTOR CODES BYTE 2\n*\nFLAGS1   DS    XL1                 MDB FLAGS\nFLAGGO   EQU   X'01'               PROCESSED GENERAL OBJECT\nFLAGCO   EQU   X'02'               PROCESSED CONTROL PROG OBJECT\n*\n* BUFFER FOR LOG RECORD\n*\nLOGBUFP  DS    0F                  PREFIX TO LOG RECORD\nLOGBUFL  DS    H                   LENGTH OF LOGBUF DATA + 4\n         DC    H'0'\nLOGBUF   DS    CL128               LOG RECORD (MAPPED BY IHAHCLOG)\n*\n*\n*      TRANSLATE TABLE FOR TESTING FOR EBCDIIC NUMBERS\n*\nNUMTAB   DC    240X'FF',10X'00',6X'FF'\n*\n*      TRANSLATE TABLES FOR SCANNING PARM FIELD\n*\nTRTTAB1  DC    256X'00'\n         ORG   TRTTAB1+C','         STOP ON COMMA\n         DC    C','\n         ORG   TRTTAB1+C'('         STOP ON RIGHT PAREN\n         DC    C'('\n         ORG   ,\nTRTTAB2  DC    256X'00'\n         ORG   TRTTAB2+C')'         STOP ON LEFT PAREN\n         DC    C')'\n         ORG   ,\nZLPAREN  DC    0F'0',3X'00',C'('   3 ZEROS AND A LEFT PAREN\n*\n*      TRANSLATE TABLE FOR HEX CONVERSION\n*      MUST BE AT LEAST 240 BYTES PAST BASE\nHEXTAB   EQU   *-240\n         DC    C'0123456789ABCDEF' MUST FOLLOW HEXTAB\n*        +--------------------------------+\n*>>>>>>>>| AREAS DE LLAMADA A MDALDIN     |\n*        +--------------------------------+\n$PETICI  DC        CL10'ALLOC  '\n$PETICIR DC        CL10'ALLOCR '\n$PETICIC DC        CL10'CONCAT '\n$DATOSA  DC        CL60' '\n$DATOSB  DC        CL92' '\n*\n$DATOSCI DC        CL08'SHR DSN='\n$DATOSCD DS        CL44' '\n$DATOSCF DC        CL3' ; '\n*\n$DATOSA0 DC        CL10'DD=SYUSR9 '\n$DATOSA1 DC        CL04'DSN='\n$DATOSA2 DC        CL44' '\n$DATOSA9 DC        CL02' ;'\n$DATOSB1 DC        CL45' NEW CATLG UNIT=SYSALLDA CYL PRIM=008 SEC=005'\n$DATOSB2 DC        CL45' RLSE VB LRECL=132 BLKSIZE=0 CLOSE'\n$DATOSB9 DC        CL02' ;'\n*\n*        INFORMACION DEVUELTA POR MDALDIN\n*\n$RETINF  DS        0CL60\n$RIDDN   DS        CL8\n$RIDSN   DS        CL44\n$RIDSORG DS        CL2\n$RIVOL   DS        CL6\n*\n$DACONDT DC        F'168'              <> HASTA 168 FICHEROS CONCAT\n*\n$DACONI  DC        C'DD='              <> INICIO DE CLAVE\n$DACOND  DS        CL1512              <> ESPACIO PARA 168 DDNAME'S\n$DACONF  DC        C' ; '              <> FIN TECNICO MDLADIN\n*\n         LTORG\n*\n$WORKDIN DC        F'4000'             <> WORK FACILITADA POR MODULO\n         DS        CL71\n$WORKRC  DS        CL02\n         DS        CL3927\n*\n         PRINT NOGEN\n         IEAVG132 ,                MDB PREFIX\n         IEAVM105 ,                MDB\n         IHAHCLOG ,                HARDCOPY LOG FORMAT\n*\n* ---------------------------------------------------------------------\n*        DSECT DE PARAMETROS  CON CODIGOS DE LLAMADA/RETORNO\n* ---------------------------------------------------------------------\n$PARAM   DSECT\n*\n$LEN     DS    CL2          <> LONGITUD DE PARAMETRO (NO SE USA PERO SE\n*                              PONE POR COMPATIBILIDAD A LLAMADAS JCL)\n$DDN     DS    CL8          <> DDNAME DEL FICHERO CON LOS MDBS\n*                              SI EL NOMBRE DE LA DDNAME ES SYSIN SE\n*                              TRATA COMO UN FICHERO DE LRECL=80 DONDE\n*                              EN LAS 44 PRIMERAS POSICIONES LLEVARA\n*                              LOS DSNAMES A ALLOCAR DINAMICAMENTE Y\n*                              CONCATENAR PARA SU TRATAMIENTO\n*                              SE ADMITEN UN MAXIMO DE 168 FICHEROS QUE\n*                              CORRESPONDERIAN A UNA SEMANA (7X24)\n$DSN     DS    CL44         <> DSN/SYSOUT/DDN FICHERO SALIDA SYSLOG\n*                              DDNAME=XXXXXXXX\n*                              SYSOUT=X\n*                              XXXXX.XXXXXX.XXXXX.XXX\n*\n         DCBD      DSORG=PS            <> MAPA DE REGISTROS MDB\n*\n         END\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MDFECHA": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x08/\\x01\\x01\\x08\\x7f\\x13\\x10\\x05\\x81\\x05\\x85\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-23T00:00:00", "modifydate": "2001-03-28T13:10:00", "lines": 1409, "newlines": 1413, "modlines": 0, "user": "U0Z72B6"}, "text": "* +--- OS3906A --------- MDFECHA -------------------------------------+\n* |                                                                   |\n* | NOMBRE ....... MDFECHA                                            |\n* |                                                                   |\n* | UBICACION .... SYST.LINKLIB    (RENT) AMODE(ANY) RMODE(24)        |\n* |                                                                   |\n* | AUTOR ........ ANGEL LUIS DOMINGUEZ MARTIN. (C) 1992              |\n* |                                                                   |\n* | FUNCIONES .... MODULO DE TRATAMIENTO, VERIFICACION Y CONVERSION   |\n* |                DE FECHAS, OBTENCION DE FECHA/HORA DEL DIA,        |\n* |                EDICION DE FECHA EN VARIOS FORMATOS Y DIA DE LA    |\n* |                SEMANA.                                            |\n* |                                                                   |\n* | OBJETIVOS .... LIBERAR A PROGRAMAS DEL TTO. DE FECHAS             |\n* |                                                                   |\n* | LENGUAJE ..... ASSEMBLER H.                                       |\n* |                                                                   |\n* | TIPO ......... MODULO                                             |\n* |                                                                   |\n* | PARAMETROS ... AREA PASADA POR EL PROGRAMA LLAMANTE               |\n* |                VER LA DSECT $PARAM AL FINAL DEL FUENTE            |\n* |                                                                   |\n* | COD.LLAMADA    POSITIVOS:  FUNCIONES A REALIZAR                   |\n* |                NEGATIVOS:  ERRORES O FECHAS INVALIDAS             |\n* |                                                                   |\n* +-------------------------------------------------------------------+\n* |     CONSIDERACIONES SOBRE EL CONCEPTO DE FECHA-BASE               |\n* +-------------------------------------------------------------------+\n* |                                                                   |\n* | --> SE ENTIENDE POR FECHA-BASE LOS DIAS TRANSCURRIDOS DESDE EL    |\n* |     1 DE ENERO DEL A\u00beO 1. ESO SUPONE UN NUMERO SECUENCIAL, QUE    |\n* |     EN LA ACTUALIDAD ES DEL ORDEN DE                              |\n* |                                                                   |\n* |        01-01-0001 -  LUN -         1                              |\n* |                                                                   |\n* |        31-12-1992 -  JUE -   727.563                              |\n* |        31-12-1993 -  VIE -   727.928                              |\n* |        31-12-1994 -  SAB -   728.293                              |\n* |        31-12-1995 -  DOM -   727.658                              |\n* |        31-12-1996 -  MAR -   729.024                              |\n* |        31-12-1997 -  MIE -   729.389                              |\n* |        31-12-1998 -  JUE -   729.754                              |\n* |        31-12-1999 -  VIE -   730.119                              |\n* |        31-12-2000 -  DOM -   730.485                              |\n* |                                                                   |\n* |        31-12-9999  - VIE - 3.652.059  (HEX 37B9DB)                |\n* |                                                                   |\n* |        24-03-22967 - MIE - 8.388.607  (HEX 7FFFFF)                |\n* |                                                                   |\n* | --> DE ESTO SE DESPRENDE QUE CON UN CAMPO HEXADECIMAL DE TRES     |\n* |     POSICIONES, BINARIAMENTE POSITIVO, PORDRIAN REPRESENTARSE     |\n* |     TODAS LAS FECHAS ENTRE EL 01-ENE-0001 Y 24-03-22967, LO QUE   |\n* |     PARECE SUFICIENTE INFORMATICAMENTE HABLANDO. UN CAMPO BINARIO |\n* |     POSITIVO DE DOS POSICIONES SERIA INSUFICIENTE DE FORMA GLOBAL,|\n* |     YA QUE SOLO PODRIA CONTENER EL VALOR 32760, LO QUE VALDRIA    |\n* |     PARA UN PERIODO DE UNOS NOVENTA A\u00beOS. QUIZA PARA CIERTAS      |\n* |     APLICACIONES, TOMANDO COMO FECHA DE ARRANQUE UNA DETERMINADA, |\n* |     PODRIA SERVIR. POR EJEMPLO, CIERTAS APLICACIONES DE TIPO PC   |\n* |     PARTEN DEL 01-01-1980, CON LO QUE, POR DIFERENCIA, SE PODRIAN |\n* |     TENER FECHAS-BASE, EN MEDIA PALABRA, HASTA EL A\u00beO 2174 APROX. |\n* |                                                                   |\n* +-------------------------------------------------------------------+\n* | FORMULA DE CALCULO DE FECHA-BASE A PARTIR DE UNA JULIANA AAAA/DDD |\n* +-------------------------------------------------------------------+\n* |                                                                   |\n* | SIENDO   D = DIA                                                  |\n* |          T = ANO - 1                                              |\n* |                                                                   |\n* | FECHA-BASE = D + (T*365) + (T/4) - (T/100) + (T/400)              |\n* |                                                                   |\n* +---------------------------------------  DOMINGUEZ (C) 1992 -------+\nMDFECHA  INICIO    (12,11,10),COMEN='MODULO DE TTO. DE FECHAS.',       X\n               VERSION=OS3906A,                                        X\n               TIPO=RENT,                                              X\n               PDIN=@DATA,                                             X\n               FDIN=@DATAL,                                            X\n               AMODE=ANY,                                              X\n               RMODE=24,                                               X\n               AUTH=NO,                                                X\n               LOC=BELOW,                                              X\n               CAPPING=SI,                                             X\n               EQUREG=SI,                                              X\n               ERRGET=ALERROR\n         B     CMDSTART\nALERROR  EQU   *\n         ABEND 77,DUMP\n         FIN   CR,TIPO=ERRGET\nCMDSTART EQU   *\n*        +-----------------------------------+\n*>>>>>>>>| CAMBIO DE ESTADO SI ES NECESARIO  |\n*        | PARA EJECUTAR SIEMPRE EN AMODE 31 |\n*        +-----------------------------------+\n         LA    R1,*+4+4+2\n         O     R1,KBSM\n         BSM   R0,R1\n*\n*        +--------------------------+\n*>>>>>>>>|   PROCESO DEL PROGRAMA   |\n*        +--------------------------+\n         L     R2,0(,R2)\n         USING $PARAM,R2\n*\n         MVC   @TIME(TIMEL),TIME\n         TIME  DEC,@TIMEDAT,LINKAGE=SYSTEM,MF=(E,@TIME),               X\n               DATETYPE=YYYYMMDD\n*\n         UNPK  @HIPL(9),@TIMEDAT(5)     OBTENER HORA DE IPL\n         UNPK  @FIPL(9),@TIMEDAT+8(5)   OBTENER FECHA IPL GREGORIANA\n         MVC   @CENTURY,@FIPL        <> ALMACENAR CENTURIA ACTUAL\n*\n         LA    R1,TBPETIC\nPR10     EQU   *\n         CLI   0(R1),C'*'            <> FIN DE TABLA\n         BE    PR10A\n         CLC   $CODIGO,0(R1)         <> LOCALIZAR PETICION\n         BE    PR10A\n         A     R1,TBPETICL           <> AVANCE DE TABLA\n         B     PR10\nPR10A    L     R1,4(,R1)             <> DIRECCIONAR RUTINA\n         BR    R1                    <> BIFURCAR A ELLA\n*\nPERR     MVI   $CODIGO,X'FF'\n         MVI   $CODIGO+1,X'FF'       <> RET. -1 LLAMADA INVALIDA\n         MVI   @WORKF,X'FF'\n         MVC   @WORKF+1(L'@WORKF-1),@WORKF\n         L     R15,@WORKF\n         B     ENDOFPGM\n*        +-----------------------------------------+----------+\n*>>>>>>>>|   OBTENCION DE LA FECHA DEL DIA         | PE00     |<<<<<<<<\n*        +-----------------------------------------+----------+\nPE00     EQU   *\n         MVC   $FEGREGO,@FIPL\n         BAL   R9,RTGJ        CONVERTIR GREGORIANA A JULIANA\n         BAL   R9,RTJB        CONVERTIR JULIANA A FECHA BASE\n         BAL   R9,RTLI        OBTENER LITERALES\n         SLR   R15,R15\n         XC    $CODIGO,$CODIGO\n         B     ENDOFPGM       DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>|   VERIFICACION/CONVERSION DE JULIANA    | PE01     |<<<<<<<<\n*        +-----------------------------------------+----------+\n         CLC   $FEJULIA(2),CEROS\n         BE    PE01A\n         CLC   $FEJULIA(2),BLANCOS\n         BNE   PE01B\nPE01A    MVC   $FEJULIA(2),@CENTURY\nPE01     EQU   *\nPE01B    MVC   @WJUL,$FEJULIA\n         BAL   R9,RTJULOK\n         BAL   R9,RTJG        CONVERTIR JULIANA A GREGORIANA\n         BAL   R9,RTJB        CONVERTIR JULIANA A FECHA BASE\n         BAL   R9,RTLI        OBTENER LITERALES\n         SLR   R15,R15\n         XC    $CODIGO,$CODIGO\n         B     ENDOFPGM       DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>|   VERIFICACION/CONVERSION DE GREGORIANA | PE02     |<<<<<<<<\n*        +-----------------------------------------+----------+\n         CLC   $FEGREGO(2),CEROS\n         BE    PE02A\n         CLC   $FEGREGO(2),BLANCOS\n         BNE   PE02B\nPE02A    MVC   $FEGREGO(2),@CENTURY\nPE02     EQU   *\nPE02B    MVC   @WGRE,$FEGREGO\n         BAL   R9,RTGREOK\n         BAL   R9,RTGJ        CONVERTIR GREGORIANA A JULIANA\n         BAL   R9,RTJB        CONVERTIR JULIANA A FECHA BASE\n         BAL   R9,RTLI        OBTENER LITERALES\n         SLR   R15,R15\n         XC    $CODIGO,$CODIGO\n         B     ENDOFPGM       DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>|   CONVERSION DE FECHA-BASE              | PE03     |<<<<<<<<\n*        +-----------------------------------------+----------+\nPE03     EQU   *\n         MVC   @WORKD(7),$FEBASE\n         TR    @WORKD(7),TBTRNUM\n         CLC   @WORKD(7),$FEBASE\n         BNE   PE03ERR\n         BAL   R9,RTBJ        CONVERTIR BASE A JULIANA\n         BAL   R9,RTJG        CONVERTIR JULIANA A GREGORIA\n         BAL   R9,RTLI        OBTENER LITERALES\n         SLR   R15,R15\n         XC    $CODIGO,$CODIGO\n         B     ENDOFPGM       DEVOLVER CONTROL\nPE03ERR  EQU   *\n         MVI   $CODIGO,X'FF'\n         MVI   $CODIGO+1,X'FE'          <> FECHA INVALIDA\n         MVI   @WORKF,X'FF'\n         MVC   @WORKF+1(L'@WORKF-1),@WORKF\n         L     R15,@WORKF\n         B     ENDOFPGM\n*        +-----------------------------------------+----------+\n*>>>>>>>>|   FINAL EL PROGRAMA                     | ENDOFPGM |<<<<<<<<\n*        +-----------------------------------------+----------+\nENDOFPGM EQU   *\n         FIN   CR,TIPO=RENT\n*        +-----------------------------------------+----------+\n*>>>>>>>>|   CONVERSION JULIANA A GREGORIANA       | RTJG     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R9                                     |\n*        +   RECIBE:   PARAMETROS       $FEGREGO,$FEJULIA     |\n*        +   RETORNA:  VALORES EN ESTAS AREAS                 |\n*        +----------------------------------------------------+\nRTJG     EQU       *\n         MVI       $FEGREGO,C'0'\n         MVC       $FEGREGO+1(L'$FEGREGO-1),$FEGREGO\n*\n         MVC       $FEGREGO(4),$FEJULIA     <> TRANSFERIR EL ANO\n         PACK      @WORKD(3),$FEJULIA(5)    <> PASAR ANO A BIN\n         MVC       @WBAAAA,@WORKD           <> ANO EN BIN\n         BAL       R14,RTBI                 <> TTO. DE BISIESTOS\n         PACK      @WORKD,$FEJULIA+4(3)     <> EMPAQUETAR EL DIA\n         LA        R5,@TBMES                <> TABLA MESES ACTUALIZADA\n         L         R1,=F'11'                <> ONCE MESES\n         MH        R1,TBMESLGE              <> POR LONG. ELEMENTO\n         AR        R5,R1                    <> DIRECC. DICIEMBRE\n         ZAP       @WORKF,=P'12'            <> ANOTAR DICIEMBRE\nRTJG20   CP        @WORKD,2(2,R5)           <> COMPARAR DIAS TRANSCU\n         BH        RTJG30                   <> DETECTADO\n         SH        R5,TBMESLGE              <> ELEMENTO ANTERIOR\n         SP        @WORKF,=P'1'             <> MES ANTERIOR\n         B         RTJG20\nRTJG30   UNPK      $FEGREGO+4(2),@WORKF     <> HALLADO MES\n         OI        $FEGREGO+5,X'F0'         <> SIGNO\n         SP        @WORKD,2(2,R5)           <> RESTA DIAS TRANSCURR.\n         UNPK      $FEGREGO+6(2),@WORKD     <> ANOTAR LOS DIAS\n         OI        $FEGREGO+7,X'F0'         <> SIGNO\n         CP        @WORKD,=P'0'             <> LOS DIAS FUERON 00\n         BNE       RTJG99                   <> NO, DEVOLVER CONTROL\n         UNPK      $FEGREGO+6(2),0(2,R5)    <> ANOTAR DIAS TOTALES MES\n         OI        $FEGREGO+7,X'F0'         <> SIGNO\n*\nRTJG99   BR        R9                       <> DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>|    CONVERSION GREGORIANA A JULIANA      |    RTGJ  |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R9                                     |\n*        +   RECIBE:   PARAMETROS       $FEGREGO              |\n*        +   RETORNA:  VALORES HALLADOS EN AREAS DE PARAMETR. |\n*        +----------------------------------------------------+\nRTGJ     EQU       *\n         MVI       $FEJULIA,C'0'\n         MVC       $FEJULIA+1(L'$FEJULIA-1),$FEJULIA\n*\n         MVC       $FEJULIA(4),$FEGREGO     <> TRANSFERIR EL ANO\n         PACK      @WORKD(3),$FEGREGO(5)    <> PASAR ANO A BIN\n         MVC       @WBAAAA,@WORKD           <> ANO EN BIN\n         BAL       R14,RTBI                 <> TTO. DE BISIESTOS\n         PACK      @WORKD,$FEGREGO+4(2)     <> EMPAQUETAR EL MES\n         CVB       R15,@WORKD               <> PASAR A BINARIO\n         BCTR      R15,R0                   <> RESTAR UNO\n         MH        R15,TBMESLGE             <> CALC. DESPZ. EN TABLA\n         LA        R5,@TBMES                <> TABLA DE MESES\n         AR        R5,R15                   <> DIRECCIONAR MES\n         PACK      @WORKD,$FEGREGO+6(2)     <> EMPAQUETAR EL DIA\n         AP        @WORKD,2(2,R5)           <> SUMAR DIAS ANTERIORES\n         UNPK      $FEJULIA+4(3),@WORKD+6(2) <> PASAR A PARAMETRO\n         OI        $FEJULIA+6,X'F0'         <> SIGNO DE ZONA\nRTGJ99   BR        R9                       <> DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>|    CONVERSION DE JULIANA A FECHA BASE   | RTJB     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R9                                     |\n*        +   RECIBE:   PARAMETROS       $FEJULIA              |\n*        +   RETORNA:  VALORES HALLADOS EN $FEBASE            |\n*        +----------------------------------------------------+\n*        +   FECHABASE = DIA + ((146097 * (ANO-1)) / 400)     |\n*        +----------------------------------------------------+\nRTJB     EQU   *\n         PACK  @WORKF,$FEJULIA(4)       <> CAPTURAR EL ANO\n         SP    @WORKF,=P'1'             <> RESTAR UNO\n         ZAP   @WORKD,@WORKF\n         MP    @WORKD,=P'365'           <> MULTIPL. POR CONSTANTE\n         ZAP   @ACUMUL,@WORKD           <> ACUMULADOR\n         ZAP   @WORKD,@WORKF\n         DP    @WORKD,=P'4'             <> DIVISION POR 4\n         AP    @ACUMUL,@WORKD(7)        <> ACUMULAR PARTE ENTERA\n         ZAP   @WORKD,@WORKF\n         DP    @WORKD,=P'400'           <> DIVISION POR 400\n         AP    @ACUMUL,@WORKD(6)        <> ACUMULAR PARTE ENTERA\n         ZAP   @WORKD,@WORKF\n         DP    @WORKD,=P'100'           <> DIVISION POR 100\n         SP    @ACUMUL,@WORKD(6)        <> RESTAR PARTE ENTERA\n         PACK  @WORKF,$FEJULIA+4(3)     <> CAPTURAR LOS DIAS\n         AP    @ACUMUL,@WORKF           <> COCIENTE ANTER. + DIAS\n         UNPK  $FEBASE,@ACUMUL          <> PASAR A FECHA BASE\n         OI    $FEBASE+L'$FEBASE-1,X'F0' > SIGNO\nRTJB99   BR        R9                   <> DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>|    CONVERSION DE FECHA BASE A JULIANA   | RTBJ     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R9                                     |\n*        +   RECIBE:   PARAMETROS       $FEBASE               |\n*        +   RETORNA:  VALORES HALLADOS EN $FEJULIA           |\n*        +----------------------------------------------------+\n*        +   TECNICA UTILIZADA                                |\n*        +   * DIVIDIR FEBASE POR 366 OBTENIENDO UN ANO QUE   |\n*        +     SIEMPRE SERA MENOR QUE EL REAL                 |\n*        +   * CALCULAR LA FEBASE PARA ESE ANO                |\n*        +   * RESTAR DE FEBASE ORIGINAL LA CALCULADA         |\n*        +   * SI EL RESTO ES SUPERIOR A 365 (O 366 SI EL A\u00beO |\n*        +     SIGUIENTE FUERA BISIESTO) AUMENTAR UNO AL A\u00beO  |\n*        +     Y RECALCULAR DE NUEVO.                         |\n*        +   * CUANDO EL RESTO SEA MENOR A 365 (O 366) EL     |\n*        +     A\u00beO SERA EL SIGUIENTE AL QUE HEMOS UTILIZADO   |\n*        +     EN LA ULTIMA BASE Y LOS DIAS EL RESTO.         |\n*        +----------------------------------------------------+\nRTBJ     EQU       *\n         PACK      @WORKD,$FEBASE           <> CAPTURAR FEBASE\n         DP        @WORKD,=P'366'           <> OBTENER ANO BASE CALCULO\n         ZAP       @WORKANO,@WORKD(6)\n*\nRTBJ10   EQU       *\n         ZAP       @WORKD,@WORKANO\n         MP        @WORKD,=P'365'           <> MULTIPL. POR CONSTANTE\n         ZAP       @ACUMUL,@WORKD           <> ACUMULADOR\n         ZAP       @WORKD,@WORKANO\n         DP        @WORKD,=P'4'             <> DIVISION POR 4\n         AP        @ACUMUL,@WORKD(7)        <> ACUMULAR PARTE ENTERA\n         ZAP       @WORKD,@WORKANO\n         DP        @WORKD,=P'400'           <> DIVISION POR 400\n         AP        @ACUMUL,@WORKD(6)        <> ACUMULAR PARTE ENTERA\n         ZAP       @WORKD,@WORKANO\n         DP        @WORKD,=P'100'           <> DIVISION POR 100\n         SP        @ACUMUL,@WORKD(6)        <> RESTAR PARTE ENTERA\n         PACK      @WORKD,$FEBASE\n         SP        @WORKD,@ACUMUL\n         ZAP       @WORKF,@WORKANO\n         AP        @WORKF,=P'1'\n         MVO       @WBAAAA(3),@WORKF+1(3)\n         BAL       R14,RTBI                 <> CALCULO DE BISIESTO\n         CP        @WORKD,@DIASANO          <> DIAS ANO SIGUIENTE\n         BNH       RTBJ20                   <> ANO DETECTADO\n         AP        @WORKANO,=P'1'           <> CALCULO A\u00beO SIGUIENTE\n         B         RTBJ10                   <> REPETIMOS BUCLE\n*\nRTBJ20   EQU       *\n         AP        @WORKANO,=P'1'           <> ANO SIGUIENTE\n         UNPK      $FEJULIA(4),@WORKANO\n         OI        $FEJULIA+3,X'F0'         <> SIGNO\n         UNPK      $FEJULIA+4(3),@WORKD     <> DIAS DE DIREFERENCIA\n         OI        $FEJULIA+6,X'F0'         <> SIGNO\n         CP        @WORKD,=P'0'                DIFERENCIA CERO ?\n         BNE       RTBJ99\n         UNPK      $FEJULIA+4(3),@DIASANO\n         OI        $FEJULIA+6,X'F0'\n*\nRTBJ99   BR        R9                       <> DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>| OBTENCION DE DATOS EN LITERALES         | RTLI     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        | ENLACE:     R9                                     |\n*        | RECIBE:     DATOS DE FECHAS EN ZONAS PARAMETROS    |\n*        | RETORNA:    DATOS EN LITERALES                     |\n*        +----------------------------------------------------+\nRTLI     EQU       *\n         LA        R1,TBIDIOMA\nRTLI10   EQU       *\n         CLI       0(R1),C'*'          <> FIN DE TABLA, IDIOM DEFECTO\n         BE        RTLI12\n         CLC       0(4,R1),$IDIOMA\n         BE        RTLI12\n         LA        R1,8(,R1)           <> SIGUIENTE ENTRADA EN TABLA\n         B         RTLI10\nRTLI12   EQU       *\n         MVC       @ADRIDIO,4(R1)      <> DIRECCION TABLA IDIOMA\n*        +------------------------------------------------------------+\n*        | CALCULO DEL DIA DE LA SEMANA                               |\n*        |                                                            |\n*        | DIA-SEMANA NUMERICO = RESTO DE ( FECHABASE / 7 )           |\n*        |                                                            |\n*        | SIENDO ----> 0=DOMINGO                                     |\n*        |              1=LUNES                                       |\n*        |              .......                                       |\n*        |              6=SABADO                                      |\n*        +------------------------------------------------------------+\n         PACK      @WORKD,$FEBASE           <> CAPTURAR FECHA BASE\n         DP        @WORKD,=P'7'             <> DIVIDIR POR SIETE\n         UNPK      $DIASEN,@WORKD+7(1)\n         OI        $DIASEN,X'F0'            <> DIA SEMANA NUMERICO\n         MVC       @WBSS,$DIASEN            <> PASAR A BINARIO\n         MVZ       @WBSS,=X'00'             <> EL DIA SEMANA NUMERICO\n         L         R1,@ADRIDIO              <> TABLA DEL IDIOMA\n         L         R1,4(,R1)                <> TABLA DE DIAS SEMANA\n         SLR       R15,R15\n         ICM       R15,B'0001',@WBSS        <> DIA CALCULADO\n         MH        R15,0(R1)                <> TAMANO DE CADA ENTRADA\n         SLR       R14,R14\n         LH        R14,0(R1)                <> GUARDA.TAMA\u00beO CADA ENTR\n         AR        R1,R15\n         LA        R1,2(,R1)                <> DIRECCIONA AL DATO\n         BCTR      R14,R0                   <> UNO MENOS PARA EXECUTE\n         MVC       $DIASEA,BLANCOS\n         EX        R14,MVCDIASE             <> MOVER DIA DE LA SEMANA\n         B         RTLI20\nMVCDIASE MVC       $DIASEA(0),0(R1)         <> MUEVE DIA DE LA SEMAMA\nRTLI20   EQU       *\n         MVC       $DIANUM,$FEGREGO+6       <> DIA NUMERICO\n         L         R1,@ADRIDIO              <> TABLA DEL IDIOMA\n         L         R1,0(,R1)                <> TABLA DE DIAS ALFABETICA\n         PACK      @WORKD,$DIANUM\n         CVB       R15,@WORKD               <> PASAR DIAS A BINARIO\n         BCTR      R15,R0                   <> RESTAR UNO\n         MH        R15,0(R1)                <> TAMANO DE CADA ENTRADA\n         SLR       R14,R14\n         LH        R14,0(R1)                <> GUARD TAMANO CADA ENTRA\n         AR        R1,R15\n         LA        R1,2(,R1)                <> DIRECCIONA AL DATO\n         BCTR      R14,R0                   <> UNO MENOS PARA EXECUTE\n         MVC       $DIAALF,BLANCOS\n         EX        R14,MVCDIAAL             <> MOVER DIA ALFABETICO\n         B         RTLI30\nMVCDIAAL MVC       $DIAALF(0),0(R1)         <> MUEVE DIA ALFABETICO\nRTLI30   EQU       *\n         MVC       $MESNUM,$FEGREGO+4       <> MES NUMERICO\n         L         R1,@ADRIDIO              <> TABLA DEL IDIOMA\n         L         R1,12(,R1)               <> TABLA DE MES LARGO\n         PACK      @WORKD,$MESNUM\n         CVB       R15,@WORKD               <> PASAR DIAS A BINARIO\n         BCTR      R15,R0                   <> RESTAR UNO\n         MH        R15,0(R1)                <> TAMANO DE CADA ENTRADA\n         SLR       R14,R14\n         LH        R14,0(R1)                <> GUARD TAMANO CADA ENTRA\n         AR        R1,R15\n         LA        R1,2(,R1)                <> DIRECCIONA AL DATO\n         BCTR      R14,R0                   <> UNO MENOS PARA EXECUTE\n         MVC       $MESALF,BLANCOS\n         EX        R14,MVCMESAL             <> MOVER MES ALFABETICO\n         B         RTLI40\nMVCMESAL MVC       $MESALF(0),0(R1)         <> MUEVE MES ALFABETICO\nRTLI40   EQU       *\n         MVC       $ANONUM,$FEGREGO         <> ANO NUMERICO\n         MVC       $ANOALF,BLANCOS          <> ANO ALFABETICO\n         L         R1,@ADRIDIO              <> TABLA DEL IDIOMA\n         L         R1,8(,R1)                <> TABLA DE MES CORTO\n         PACK      @WORKD,$FEGREGO+4(2)\n         CVB       R15,@WORKD               <> PASAR DIAS A BINARIO\n         BCTR      R15,R0                   <> RESTAR UNO\n         MH        R15,0(R1)                <> TAMANO DE CADA ENTRADA\n         AR        R1,R15\n         LA        R1,2(,R1)                <> DIRECCIONA AL DATO\n*\n         MVC       $FEEDT1(2),$FEGREGO+6\n         MVI       $FEEDT1+2,C'.'\n         MVC       $FEEDT1+3(3),0(R1)\n         MVI       $FEEDT1+6,C'.'\n         MVC       $FEEDT1+7(4),$FEGREGO\n*\n         MVC       $FEEDT2(7),$FEEDT1\n         MVC       $FEEDT2+7(2),$FEEDT1+9\n*\n         MVC       $FEEDT3(2),$FEGREGO+6\n         MVI       $FEEDT3+2,C'.'\n         MVC       $FEEDT3+3(2),$FEGREGO+4\n         MVI       $FEEDT3+5,C'.'\n         MVC       $FEEDT3+6(4),$FEGREGO\n*\n         MVC       $FEEDT4(6),$FEEDT3\n         MVC       $FEEDT4+6(2),$FEEDT3+8\n*\n         MVC       $HORA,@HIPL\n         MVC       $MINUTO,@HIPL+2\n         MVC       $SEGUNDO,@HIPL+4\n         MVC       $DECIMAS,@HIPL+6\n         MVI       $HOREDT,C':'\n         MVC       $HOREDT+1(L'$HOREDT-1),$HOREDT\n         MVC       $HOREDT(2),$HORA\n         MVC       $HOREDT+3(2),$MINUTO\n         MVC       $HOREDT+6(2),$SEGUNDO\n         MVC       $HOREDT+9(2),$DECIMAS\n*\n         MVC       $HORBIN,@TIMEDAT\n         MVI       $HORALF,C' '\n         MVC       $HORALF+1(L'$HORALF-1),$HORALF\n*\n         BR        R9                  <> DEVOLUCION DE CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>| VERIFICACION DE FECHA GREGORIANA        | RTGREOK  |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R9                                     |\n*        +   RECIBE:   AREA @WGRE                             |\n*        +   RETORNA:  SI CORRECTA: POR R9                    |\n*        +             SI INCORRECTA: -2 Y FIN DE EJECUCION   |\n*        +----------------------------------------------------+\nRTGREOK  EQU       *\n         MVC       @WORKD,@WGRE\n         TR        @WORKD,TBTRNUM\n         CLC       @WORKD,@WGRE\n         BNE       RTGREERR\n         CLC       @WGRE+4(2),=C'01'\n         BL        RTGREERR\n         CLC       @WGRE+4(2),=C'12'\n         BH        RTGREERR\n         PACK      @WORKD(3),@WGRE(5)\n         MVC       @WBAAAA,@WORKD\n         BAL       R14,RTBI                 <> CALCULAR BISIESTO\n         PACK      @WORKD,@WGRE+4(2)        <> PACK EL MES\n         CVB       R1,@WORKD\n         BCTR      R1,R0                    <> MES MENOS UNO\n         MH        R1,TBMESLGE\n         LA        R15,@TBMES\n         AR        R15,R1                   <> DIAS DEL MES\n         PACK      @WORKF,@WGRE+6(2)\n         CP        @WORKF,=P'1'\n         BL        RTGREERR\n         CP        @WORKF,0(2,R15)          <> DIAS MAXIMOS DEL MES\n         BH        RTGREERR\n         BR        R9                       <> DEVOLVER CONTROL\nRTGREERR EQU       *\n         MVI       $CODIGO,X'FF'            <> RETORNO  -2\n         MVI       $CODIGO+1,X'FE'          <> FECHA INVALIDA\n         MVI       @WORKF,X'FF'\n         MVC       @WORKF+1(L'@WORKF-1),@WORKF\n         MVI       @WORKF+3,X'FE'\n         L         R15,@WORKF\n         B         ENDOFPGM                 <> FIN DE EJECUCION\n*        +-----------------------------------------+----------+\n*>>>>>>>>| VERIFICACION DE FECHA JULIANA           | RTJULOK  |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R9                                     |\n*        +   RECIBE:   AREA @WJUL                             |\n*        +   RETORNA:  SI CORRECTA: POR R9                    |\n*        +             SI INCORRECTA: CR. -2 Y FIN MODULO     |\n*        +----------------------------------------------------+\nRTJULOK  EQU       *\n         MVC       @WORKD(7),@WJUL\n         TR        @WORKD(7),TBTRNUM\n         CLC       @WORKD(7),@WJUL\n         BNE       RTJULERR\n         PACK      @WORKD(3),@WJUL(5)\n         MVC       @WBAAAA,@WORKD\n         BAL       R14,RTBI                 <> CALCULAR BISIESTO\n         PACK      @WORKF,@WJUL+4(3)        <> OBTENER DIAS\n         CP        @WORKF,=P'1'\n         BL        RTJULERR\n         CP        @WORKF,@DIASANO          <> COMPARAR DIAS MAXIMOS\n         BH        RTJULERR\n         BR        R9                       <> DEVOLVER CONTROL\nRTJULERR EQU       *\n         MVI       $CODIGO,X'FF'\n         MVI       $CODIGO+1,X'FE'          <> FECHA INVALIDA\n         MVI       @WORKF,X'FF'\n         MVC       @WORKF+1(L'@WORKF-1),@WORKF\n         MVI       @WORKF+3,X'FE'\n         L         R15,@WORKF\n         B         ENDOFPGM\n*        +-----------------------------------------+----------+\n*>>>>>>>>| DETECCION DE ANO BISIESTO               | RTBI     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R14                                    |\n*        +   RECIBE:   AREA @WBAAAA RELLENA                   |\n*        +   RETORNA:  VALORES ACTUALIZADOS DEL ANO EN @TBMES |\n*        +----------------------------------------------------+\nRTBI     EQU       *\n         ZAP       @DIASANO,=P'365'         <> POR DEFECTO 365 DIAS\n         MVC       @TBMES(TBMESESL),TBMESES <> COPIA TABLA VALOR MESES\n         TM        @WBAAAA+1,X'01'          <> ES ANO IMPAR\n         BO        RTBI99                   <> SI, NO ES BISIESTO\n         TM        @WBAAAA+1,X'12'          <> ES DIVISIBLE POR CUATRO\n         BM        RTBI99                   <> NO, NO ES BISIESTO\n         CLI       @WBAAAA+1,X'00'          <> ACABADO EN '00'\n         BNE       RTBI10                   <> NO, ANO BISIESTO\n         TM        @WBAAAA,X'01'            <> CENTENA IMPAR ?\n         BO        RTBI99                   <> SI, NO ES BISIESTO\n         TM        @WBAAAA,X'12'            <> DIVISIBLE POR CUATROCI.\n         BM        RTBI99                   <> NO, DEVOLVER CONTROL\n*\nRTBI10   EQU       *\n         ZAP       @DIASANO,=P'366'         <> ES BISIESTO, 366 DIAS\n         LA        R15,@TBMES               <> DIRECCIONAR\n         AH        R15,TBMESLGE             <> AL MES DE FEBRERO\n         MVC       0(2,R15),=PL2'29'        <> ACTUALIZAR FEBRERO\n         AH        R15,TBMESLGE             <> DIRECC. DIAS MARZO\n         SLR       R1,R1\n         LA        R1,10                    <> 10 MESES A TRATAR\nRTBI20   EQU       *\n         AP        2(2,R15),=P'1'           <> SUMAR UNO\n         AH        R15,TBMESLGE             <> AVANZAR LA TABLA\n         BCT       R1,RTBI20                <> REPETIR BUCLE\n*\nRTBI99   BR        R14                      <> DEVOLVER CONTROL\n*        +--------------------------------+\n*>>>>>>>>| RESERVA DE AREAS ESTATICAS     |\n*        +--------------------------------+\n         DS    0F\nKBSM     DC    X'80000000'\n*\nBLANCOS  DC    CL40' '\nCEROS    DC    CL8'00000000'\n*\nTIME     TIME  LINKAGE=SYSTEM,MF=L\nTIMEL    EQU   *-TIME\n*\nTBTRNUM  DC    X'00000000000000000000000000000000' 0\n         DC    X'00000000000000000000000000000000' 1\n         DC    X'00000000000000000000000000000000' 2\n         DC    X'00000000000000000000000000000000' 3\n         DC    X'00000000000000000000000000000000' 4\n         DC    X'00000000000000000000000000000000' 5\n         DC    X'00000000000000000000000000000000' 6\n         DC    X'00000000000000000000000000000000' 7\n         DC    X'00000000000000000000000000000000' 8\n         DC    X'00000000000000000000000000000000' 9\n         DC    X'00000000000000000000000000000000' A\n         DC    X'00000000000000000000000000000000' B\n         DC    X'00000000000000000000000000000000' C\n         DC    X'00000000000000000000000000000000' D\n         DC    X'00000000000000000000000000000000' E\n         DC    X'F0F1F2F3F4F5F6F7F8F9000000000000' F\n*\nTBPETICL DC    F'8'                 <> LONGITUD DE CADA ELEMENTO\nTBPETIC  DC    H'0',CL2'  ',A(PE00) OBTIENE FECHA DEL DIA\n         DC    H'1',CL2'  ',A(PE01) CONVERSION JULIANA\n         DC    H'2',CL2'  ',A(PE02) CONVERSION GREGORIANA\n         DC    H'3',CL2'  ',A(PE03) CONVERSION FECHA-BASE\n         DC    C'****',A(PERR)      ERROR FIN DE TABLA\n*\n         DS    0F\nTBMESLGE DC    H'4'                    <> LONG. CADA ELEMENTO TABLA\nTBMESES  EQU   *\n         DC    PL2'31',PL2'000'\n         DC    PL2'28',PL2'031'\n         DC    PL2'31',PL2'059'\n         DC    PL2'30',PL2'090'\n         DC    PL2'31',PL2'120'\n         DC    PL2'30',PL2'151'\n         DC    PL2'31',PL2'181'\n         DC    PL2'31',PL2'212'\n         DC    PL2'30',PL2'243'\n         DC    PL2'31',PL2'273'\n         DC    PL2'30',PL2'304'\n         DC    PL2'31',PL2'334'\nTBMESESL EQU   *-TBMESES\n*\nTBIDIOMA DS    0F\n         DC    CL4'341 ',A(TBI341)     <> CASTELLANO\n         DC    CL4'343 ',A(TBI343)  ------CATALAN------- FALTA\n         DC    CL4'344 ',A(TBI346)  ------VASCO--------- FALTA\n         DC    CL4'3481',A(TBI3481) ------GALLEGO------- FALTA\n         DC    CL4'33  ',A(TBI33)      <> FRANCES\n         DC    CL4'351 ',A(TBI351)  ------PORTUGUES----- FALTA\n         DC    CL4'39  ',A(TBI39)      <> ITALIANO\n         DC    CL4'44  ',A(TBI44)      <> INGLES\n         DC    CL4'49  ',A(TBI49)      <> ALEMAN\n         DC    CL4'****',A(TBI341)     <> CASTELLANO ES EL DEFECTO\n*\n*  TBI341 -->  CASTELLANO\n*\nTBI341   DS    0F\n         DC    A(TBI341D)\n         DC    A(TBI341S)\n         DC    A(TBI341C)\n         DC    A(TBI341M)\nTBI341D  DC    H'13'\n         DC    CL13'UNO'\n         DC    CL13'DOS'\n         DC    CL13'TRES'\n         DC    CL13'CUATRO'\n         DC    CL13'CINCO'\n         DC    CL13'SEIS'\n         DC    CL13'SIETE'\n         DC    CL13'OCHO'\n         DC    CL13'NUEVE'\n         DC    CL13'DIEZ'\n         DC    CL13'ONCE'\n         DC    CL13'DOCE'\n         DC    CL13'TRECE'\n         DC    CL13'CATORCE'\n         DC    CL13'QUINCE'\n         DC    CL13'DIECISEIS'\n         DC    CL13'DIECISIETE'\n         DC    CL13'DIECIOCHO'\n         DC    CL13'DIECINUEVE'\n         DC    CL13'VEINTE'\n         DC    CL13'VEINTIUNO'\n         DC    CL13'VEINTIDOS'\n         DC    CL13'VEINTITRES'\n         DC    CL13'VEINTICUATRO'\n         DC    CL13'VEINTICINCO'\n         DC    CL13'VEINTISEIS'\n         DC    CL13'VEINTISIETE'\n         DC    CL13'VEINTIOCHO'\n         DC    CL13'VEINTINUEVE'\n         DC    CL13'TREINTA'\n         DC    CL13'TREINTA Y UNO'\nTBI341S  DC    H'09'\n         DC    CL09'DOMINGO'\n         DC    CL09'LUNES'\n         DC    CL09'MARTES'\n         DC    CL09'MIERCOLES'\n         DC    CL09'JUEVES'\n         DC    CL09'VIERNES'\n         DC    CL09'SABADO'\nTBI341C  DC    H'03'\n         DC    CL03'ENE'\n         DC    CL03'FEB'\n         DC    CL03'MAR'\n         DC    CL03'ABR'\n         DC    CL03'MAY'\n         DC    CL03'JUN'\n         DC    CL03'JUL'\n         DC    CL03'AGO'\n         DC    CL03'SEP'\n         DC    CL03'OCT'\n         DC    CL03'NOV'\n         DC    CL03'DIC'\nTBI341M  DC    H'10'\n         DC    CL10'ENERO'\n         DC    CL10'FEBRERO'\n         DC    CL10'MARZO'\n         DC    CL10'ABRIL'\n         DC    CL10'MAYO'\n         DC    CL10'JUNIO'\n         DC    CL10'JULIO'\n         DC    CL10'AGOSTO'\n         DC    CL10'SEPTIEMBRE'\n         DC    CL10'OCTUBRE'\n         DC    CL10'NOVIEMBRE'\n         DC    CL10'DICIEMBRE'\n*\n*  TBI343 -->  CATALAN\n*\nTBI343   DS    0F\n         DC    A(TBI343D)\n         DC    A(TBI343S)\n         DC    A(TBI343C)\n         DC    A(TBI343M)\nTBI343D  DC    H'13'\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\nTBI343S  DC    H'09'                >> CATALAN <<\n         DC    CL09'.......'        >> CATALAN <<\n         DC    CL09'.......'        >> CATALAN <<\n         DC    CL09'.......'        >> CATALAN <<\n         DC    CL09'.......'        >> CATALAN <<\n         DC    CL09'.......'        >> CATALAN <<\n         DC    CL09'.......'        >> CATALAN <<\n         DC    CL09'.......'        >> CATALAN <<\nTBI343C  DC    H'03'                >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\n         DC    CL03'...'            >> CATALAN <<\nTBI343M  DC    H'10'                >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n         DC    CL10'.....'          >> CATALAN <<\n*\n*  TBI346 -->  VASCO\n*\nTBI346   DS    0F\n         DC    A(TBI346D)\n         DC    A(TBI346S)\n         DC    A(TBI346C)\n         DC    A(TBI346M)\nTBI346D  DC    H'13'\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\n         DC    CL13'...'            >> VASCO <<\nTBI346S  DC    H'09'                >> VASCO <<\n         DC    CL09'.......'        >> VASCO <<\n         DC    CL09'.......'        >> VASCO <<\n         DC    CL09'.......'        >> VASCO <<\n         DC    CL09'.......'        >> VASCO <<\n         DC    CL09'.......'        >> VASCO <<\n         DC    CL09'.......'        >> VASCO <<\n         DC    CL09'.......'        >> VASCO <<\nTBI346C  DC    H'03'                >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\n         DC    CL03'...'            >> VASCO <<\nTBI346M  DC    H'10'                >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n         DC    CL10'.....'          >> VASCO <<\n*\n*  TBI3481 --> GALLEGO\n*\nTBI3481  DS    0F\n         DC    A(TBI3481D)\n         DC    A(TBI3481S)\n         DC    A(TBI3481C)\n         DC    A(TBI3481M)\nTBI3481D DC    H'13'\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\n         DC    CL13'....'           >> GALLEGO <<\nTBI3481S DC    H'09'                >> GALLEGO <<\n         DC    CL09'.........'      >> GALLEGO <<\n         DC    CL09'.........'      >> GALLEGO <<\n         DC    CL09'.........'      >> GALLEGO <<\n         DC    CL09'.........'      >> GALLEGO <<\n         DC    CL09'.........'      >> GALLEGO <<\n         DC    CL09'.........'      >> GALLEGO <<\n         DC    CL09'.........'      >> GALLEGO <<\nTBI3481C DC    H'09'                >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\n         DC    CL03'...'            >> GALLEGO <<\nTBI3481M DC    H'10'                >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n         DC    CL10'.....'          >> GALLEGO <<\n*\n*  TBI44  ---> INGLES\n*\nTBI44    DS    0F                      <> INGLES\n         DC    A(TBI44D)\n         DC    A(TBI44S)\n         DC    A(TBI44C)\n         DC    A(TBI44M)\nTBI44D   DC    H'12'\n         DC    CL12'ONE'\n         DC    CL12'TWO'\n         DC    CL12'THREE'\n         DC    CL12'FOUR'\n         DC    CL12'FIVE'\n         DC    CL12'SIX'\n         DC    CL12'SEVEN'\n         DC    CL12'EIGHT'\n         DC    CL12'NINE'\n         DC    CL12'TEN'\n         DC    CL12'ELEVEN'\n         DC    CL12'TWELVE'\n         DC    CL12'THIRTEEN'\n         DC    CL12'FORTEEN'\n         DC    CL12'FIFTEEN'\n         DC    CL12'SIXTEEN'\n         DC    CL12'SEVENTEEN'\n         DC    CL12'EIGHTEEN'\n         DC    CL12'NINETEEN'\n         DC    CL12'TWENTY'\n         DC    CL12'TWENTY ONE'\n         DC    CL12'TWENTY TWO'\n         DC    CL12'TWENTY THREE'\n         DC    CL12'TWENTY FOUR'\n         DC    CL12'TWENTY FIVE'\n         DC    CL12'TWENTY SIX'\n         DC    CL12'TWENTY SEVEN'\n         DC    CL12'TWENTY EIGHT'\n         DC    CL12'TWENTY NINE'\n         DC    CL12'THIRTY'\n         DC    CL12'THIRTY ONE'\nTBI44S   DC    H'09'\n         DC    CL09'SUNDAY'\n         DC    CL09'MONDAY'\n         DC    CL09'TUESDAY'\n         DC    CL09'WEDNESDAY'\n         DC    CL09'THURSDAY'\n         DC    CL09'FRIDAY'\n         DC    CL09'SATURDAY'\nTBI44C   DC    H'03'\n         DC    CL03'JAN'\n         DC    CL03'FEB'\n         DC    CL03'MAR'\n         DC    CL03'APR'\n         DC    CL03'MAY'\n         DC    CL03'JUN'\n         DC    CL03'JUL'\n         DC    CL03'AUG'\n         DC    CL03'SEP'\n         DC    CL03'OCT'\n         DC    CL03'NOV'\n         DC    CL03'DEC'\nTBI44M   DC    H'09'\n         DC    CL09'JANUARY'\n         DC    CL09'FEBRUARY'\n         DC    CL09'MARCH'\n         DC    CL09'APRIL'\n         DC    CL09'MAY'\n         DC    CL09'JUNE'\n         DC    CL09'JULY'\n         DC    CL09'AUGUST'\n         DC    CL09'SEPTEMBER'\n         DC    CL09'OCTOBER'\n         DC    CL09'NOVEMBER'\n         DC    CL09'DECEMBER'\n*\n*  TBI33  ---> FRANCES\n*\nTBI33    DS    0F                      <> FRANCES\n         DC    A(TBI33D)\n         DC    A(TBI33S)\n         DC    A(TBI33C)\n         DC    A(TBI33M)\nTBI33D   DC    H'12'\n         DC    CL12'UN'\n         DC    CL12'DEUX'\n         DC    CL12'TROIS'\n         DC    CL12'QUATRE'\n         DC    CL12'CINQ'\n         DC    CL12'SIX'\n         DC    CL12'SEPT'\n         DC    CL12'HUIT'\n         DC    CL12'NEUF'\n         DC    CL12'DIX'\n         DC    CL12'ONZE'\n         DC    CL12'DOUZE'\n         DC    CL12'TREIZE'\n         DC    CL12'QUATORZE'\n         DC    CL12'QUINZE'\n         DC    CL12'SEIZE'\n         DC    CL12'DIX-SEPT'\n         DC    CL12'DIX-HUIT'\n         DC    CL12'DIX-NEUF'\n         DC    CL12'VINGT'\n         DC    CL12'VINGT UN'\n         DC    CL12'VINGT DEUX'\n         DC    CL12'VINGT TROIS'\n         DC    CL12'VINGT QUATRE'\n         DC    CL12'VINGT CINQ'\n         DC    CL12'VINGT SIX'\n         DC    CL12'VINGT SEPT'\n         DC    CL12'VINGT HUIT'\n         DC    CL12'VINGT NEUF'\n         DC    CL12'TRENTE'\n         DC    CL12'TRENTE UNE INT'\nTBI33S   DC    H'08'\n         DC    CL08'DIMANCHE'\n         DC    CL08'LUNDI'\n         DC    CL08'MARDI'\n         DC    CL08'MERCREDI'\n         DC    CL08'JEUDI'\n         DC    CL08'VENDREDI'\n         DC    CL08'SAMEDI'\nTBI33C   DC    H'03'\n         DC    CL03'JAN'\n         DC    CL03'FEB'\n         DC    CL03'MAR'\n         DC    CL03'AVR'\n         DC    CL03'MAI'\n         DC    CL03'JUI'\n         DC    CL03'JUL'\n         DC    CL03'AOU'\n         DC    CL03'SEP'\n         DC    CL03'OCT'\n         DC    CL03'NOV'\n         DC    CL03'DEC'\nTBI33M   DC    H'09'\n         DC    CL09'JANVIER'\n         DC    CL09'FEVRIER'\n         DC    CL09'MARS'\n         DC    CL09'AVRIL'\n         DC    CL09'MAI'\n         DC    CL09'JUIN'\n         DC    CL09'JUILLET'\n         DC    CL09'AOUT'\n         DC    CL09'SEPTEMBRE'\n         DC    CL09'OCTOBRE'\n         DC    CL09'NOVEMBRE'\n         DC    CL09'DECEMBRE'\n*\n*  TBI39  ---> ITALIANO\n*\nTBI39    DS    0F\n         DC    A(TBI39D)\n         DC    A(TBI39S)\n         DC    A(TBI39C)\n         DC    A(TBI39M)\nTBI39D   DC    H'12'\n         DC    CL12'UN'            << ITALIANO >>\n         DC    CL12'DUE'           << ITALIANO >>\n         DC    CL12'TRE'           << ITALIANO >>\n         DC    CL12'QUATTRO'       << ITALIANO >>\n         DC    CL12'CINQUE'        << ITALIANO >>\n         DC    CL12'SEI'           << ITALIANO >>\n         DC    CL12'SETTE'         << ITALIANO >>\n         DC    CL12'OTTO'          << ITALIANO >>\n         DC    CL12'NOVE'          << ITALIANO >>\n         DC    CL12'DIECI'         << ITALIANO >>\n         DC    CL12'UNDICI'        << ITALIANO >>\n         DC    CL12'DODICI'        << ITALIANO >>\n         DC    CL12'TREDICI'       << ITALIANO >>\n         DC    CL12'QUATTORDICI'   << ITALIANO >>\n         DC    CL12'QUINDICI'      << ITALIANO >>\n         DC    CL12'SEDICI'        << ITALIANO >>\n         DC    CL12'DICIASSETTE'   << ITALIANO >>\n         DC    CL12'DICIOTTO'      << ITALIANO >>\n         DC    CL12'DICIANNOVE'    << ITALIANO >>\n         DC    CL12'VENTI'         << ITALIANO >>\n         DC    CL12'VENTUNO'       << ITALIANO >>\n         DC    CL12'VEINTIDUE'     << ITALIANO >>\n         DC    CL12'VENTITRE'      << ITALIANO >>\n         DC    CL12'VENTIQUATTRO'  << ITALIANO >>\n         DC    CL12'VENTICINQUE'   << ITALIANO >>\n         DC    CL12'VENTISEI'      << ITALIANO >>\n         DC    CL12'VENTISETTE'    << ITALIANO >>\n         DC    CL12'VENTOTTO'      << ITALIANO >>\n         DC    CL12'VENTINOVE'     << ITALIANO >>\n         DC    CL12'TRENTA'        << ITALIANO >>\n         DC    CL12'TRENTAUNO'     << ITALIANO >>\nTBI39S   DC    H'10'               << ITALIANO >>\n         DC    CL10'DOMENICA'      << ITALIANO >>\n         DC    CL10'LUNEDI'        << ITALIANO >>\n         DC    CL10'MARTEDI'       << ITALIANO >>\n         DC    CL10'MIERCOLEDI'    << ITALIANO >>\n         DC    CL10'GIOVEDI'       << ITALIANO >>\n         DC    CL10'VENERDI'       << ITALIANO >>\n         DC    CL10'SABATO'        << ITALIANO >>\nTBI39C   DC    H'03'               << ITALIANO >>\n         DC    CL03'GEN'           << ITALIANO >>\n         DC    CL03'FEB'           << ITALIANO >>\n         DC    CL03'MAR'           << ITALIANO >>\n         DC    CL03'APR'           << ITALIANO >>\n         DC    CL03'MAG'           << ITALIANO >>\n         DC    CL03'GIU'           << ITALIANO >>\n         DC    CL03'LUG'           << ITALIANO >>\n         DC    CL03'AUG'           << ITALIANO >>\n         DC    CL03'SET'           << ITALIANO >>\n         DC    CL03'OTT'           << ITALIANO >>\n         DC    CL03'NOV'           << ITALIANO >>\n         DC    CL03'DIC'           << ITALIANO >>\nTBI39M   DC    H'09'               << ITALIANO >>\n         DC    CL09'GENNAIO'       << ITALIANO >>\n         DC    CL09'FEBBRAIO'      << ITALIANO >>\n         DC    CL09'MARZO'         << ITALIANO >>\n         DC    CL09'APRILE'        << ITALIANO >>\n         DC    CL09'MAGGIO'        << ITALIANO >>\n         DC    CL09'GIUGNO'        << ITALIANO >>\n         DC    CL09'LUGLIO'        << ITALIANO >>\n         DC    CL09'AUGUST'        << ITALIANO >>\n         DC    CL09'SETTEMBRE'     << ITALIANO >>\n         DC    CL09'OTTOBRE'       << ITALIANO >>\n         DC    CL09'NOVEMBRE'      << ITALIANO >>\n         DC    CL09'DICEMBRE'      << ITALIANO >>\n*\n*  TBI49  ---> ALEMAN\n*\nTBI49    DS    0F\n         DC    A(TBI49D)\n         DC    A(TBI49S)\n         DC    A(TBI49C)\n         DC    A(TBI49M)\nTBI49D   DC    H'16'\n         DC    CL16'EINS'              << ALEMAN >>\n         DC    CL16'ZWEI'              << ALEMAN >>\n         DC    CL16'DREI'              << ALEMAN >>\n         DC    CL16'VIER'              << ALEMAN >>\n         DC    CL16'FUNF'              << ALEMAN >>\n         DC    CL16'SECHS'             << ALEMAN >>\n         DC    CL16'SIEBEN'            << ALEMAN >>\n         DC    CL16'ACHT'              << ALEMAN >>\n         DC    CL16'NEUN'              << ALEMAN >>\n         DC    CL16'ZEHN'              << ALEMAN >>\n         DC    CL16'ELF'               << ALEMAN >>\n         DC    CL16'ZWOLF'             << ALEMAN >>\n         DC    CL16'DREIZEHN'          << ALEMAN >>\n         DC    CL16'VIERZEHN'          << ALEMAN >>\n         DC    CL16'FUNFZEHN'          << ALEMAN >>\n         DC    CL16'SECHZEHN'          << ALEMAN >>\n         DC    CL16'SIEBZEHN'          << ALEMAN >>\n         DC    CL16'ACHTZEHN'          << ALEMAN >>\n         DC    CL16'NEUNZEHN'          << ALEMAN >>\n         DC    CL16'ZWANZIG'           << ALEMAN >>\n         DC    CL16'EINUNDZWANZIG'     << ALEMAN >>\n         DC    CL16'ZWEIUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'DEIUNDZWANZIG'     << ALEMAN >>\n         DC    CL16'VIERUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'FUNFUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'SECHSUNDZWANZIG'   << ALEMAN >>\n         DC    CL16'SIEBENUNDZWANZIG'  << ALEMAN >>\n         DC    CL16'ACHTUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'NEUNUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'DREISSIG'          << ALEMAN >>\n         DC    CL16'EINUNDREISSIG'     << ALEMAN >>\nTBI49S   DC    H'10'                   << ALEMAN >>\n         DC    CL10'SONNTAG'           << ALEMAN >>\n         DC    CL10'MONTAG'            << ALEMAN >>\n         DC    CL10'DIENSTAG'          << ALEMAN >>\n         DC    CL10'MITTWOCH'          << ALEMAN >>\n         DC    CL10'DONNERSTAG'        << ALEMAN >>\n         DC    CL10'FREITAG'           << ALEMAN >>\n         DC    CL10'SAMSTAG'           << ALEMAN >>\nTBI49C   DC    H'03'                   << ALEMAN >>\n         DC    CL03'JAN'               << ALEMAN >>\n         DC    CL03'FEB'               << ALEMAN >>\n         DC    CL03'MAR'               << ALEMAN >>\n         DC    CL03'APR'               << ALEMAN >>\n         DC    CL03'MAI'               << ALEMAN >>\n         DC    CL03'JUN'               << ALEMAN >>\n         DC    CL03'JUL'               << ALEMAN >>\n         DC    CL03'AUG'               << ALEMAN >>\n         DC    CL03'SEP'               << ALEMAN >>\n         DC    CL03'OKT'               << ALEMAN >>\n         DC    CL03'NOV'               << ALEMAN >>\n         DC    CL03'DEZ'               << ALEMAN >>\nTBI49M   DC    H'09'                   << ALEMAN >>\n         DC    CL09'JANUAR'            << ALEMAN >>\n         DC    CL09'FEBRUAR'           << ALEMAN >>\n         DC    CL09'MARZ'              << ALEMAN >>\n         DC    CL09'APRIL'             << ALEMAN >>\n         DC    CL09'MAI'               << ALEMAN >>\n         DC    CL09'JUNI'              << ALEMAN >>\n         DC    CL09'JULI'              << ALEMAN >>\n         DC    CL09'AUGUST'            << ALEMAN >>\n         DC    CL09'SEPTEMBER'         << ALEMAN >>\n         DC    CL09'OKTOBER'           << ALEMAN >>\n         DC    CL09'NOVEMBER'          << ALEMAN >>\n         DC    CL09'DEZEMBER'          << ALEMAN >>\n*\n*\n*  TB351  ---> PORTUGUES\n*\nTBI351   DS    0F\n         DC    A(TBI351D)\n         DC    A(TBI351S)\n         DC    A(TBI351C)\n         DC    A(TBI351M)\nTBI351D  DC    H'12'\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\nTBI351S  DC    H'10'             << PORTUGUES >>\n         DC    CL10'..NNTAG'     << PORTUGUES >>\n         DC    CL10'..NTAG'      << PORTUGUES >>\n         DC    CL10'..ENSTAG'    << PORTUGUES >>\n         DC    CL10'..TTWOCH'    << PORTUGUES >>\n         DC    CL10'..NNERSTAG'  << PORTUGUES >>\n         DC    CL10'..EITAG'     << PORTUGUES >>\n         DC    CL10'..MSTAG'     << PORTUGUES >>\nTBI351C  DC    H'03'             << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\nTBI351M  DC    H'09'             << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n*\n         LTORG\n*\n* ---------------------------------------------------------------------\n*        RESERVA DE AREAS DINAMICAS\n* ---------------------------------------------------------------------\n@DATA    DSECT\n         DS    18F\n*\n@TBMES   ORG   *+TBMESESL\n*\n@TIME    ORG   *+TIMEL\n*\n@TIMEDAT DS    CL16\n@FIPL    DS    CL9\n@HIPL    DS    CL9\n@CENTURY DS    CL2\n@DIASANO DS    PL2                          <> VARIABLE DEVUELTA POR LA\n*                                              RUTINA DE ANO BISIESTO\n*                                              RTBI CON 365 O 366\n@WBAAAA  DS    CL2\n@WBMM    DS    CL1\n@WBDD    DS    CL1\n@WBSS    DS    CL1\n@ACUMUL  DS    D\n@WORKD   DS    D\n@WORKF   DS    F\n@WORKH   DS    H\n@WORKANO DS    PL3\n*\n@ADRIDIO DS    F                            <> ADDR.CALCULADA IDIOMA\n*\n@ANOINI  DS    PL4\n@DIAINI  DS    PL4\n@FECINI  DS    PL4\n@FECFIN  DS    PL4\n@DIFERE  DS    PL4\n*\n@WGRE    DS    CL8     GREGORIANA PARA VERIFICACION\n@WJUL    DS    CL7     JULIANA PARA VERIFICACION\n*\n@DATAL   EQU   *\n*\n* ---------------------------------------------------------------------\n*        DSECT DE PARAMETROS  CON CODIGOS DE LLAMADA/RETORNO\n* ---------------------------------------------------------------------\n$PARAM   DSECT\n$CODIGO  DS    H            <> CODIGOS DE LLAMADA\n*                               0   OBTIENE FECHA DEL DIA\n*                               1   VERIFICACION/CONVERSION JULIANA\n*                               2   VERIFICACION/CONVERSION GREGORIANA\n*                               3   CONVERSION FECHA-BASE\n*                           <> CODIGOS DE RETORNO\n*                               0   FUNCION TERMINADA CORRECTAMENTE\n*                              -1   CODIGO DE LLAMADA ERRONEO\n*                              -2   FECHA(S) INVALIDA(S) O ILOGICA(S)\n*\n$FEGREGO DS    CL8'AAAAMMDD'\n$FEJULIA DS    CL7'AAAADDD'\n$FEBASE  DS    CL7'XXXXXXX'\n$HORA    DS    CL2'XX'\n$MINUTO  DS    CL2'XX'\n$SEGUNDO DS    CL2'XX'\n$DECIMAS DS    CL2'XX'\n*\n$IDIOMA  DS    CL4'XXXX'    <> CODIGOS DE IDIOMA\n*                                 341 ---> CASTELLANO\n*                                 343 ---> CATALAN------- FALTA\n*                                 344 ---> VASCO--------- FALTA\n*                                 3481 --> GALLEGO------- FALTA\n*                                 33 ----> FRANCES\n*                                 351 ---> PORTUGUES----- FALTA\n*                                 39 ----> ITALIANO\n*                                 44 ----> INGLES\n*                                 49 ----> ALEMAN\n$DIANUM  DS    CL2          <> DIA NUMERICO\n$DIAALF  DS    CL20         <> DIA ALFABETICO\n$MESNUM  DS    CL2          <> MES NUMERICO\n$MESALF  DS    CL20         <> MES ALFABETICO\n$ANONUM  DS    CL4          <> ANO NUMERICO\n$ANOALF  DS    CL40         <> ANO ALFABETICO\n$DIASEN  DS    CL1          <> DIA SEMANA NUMERICO (0=DOMINGO)\n$DIASEA  DS    CL15         <> DIA DE LA SEMANA\n*\n$FEEDT1  DS    CL11'DD.MMM.AAAA'\n$FEEDT2  DS    CL09'DD.MMM.AA'\n$FEEDT3  DS    CL10'DD.MM.AAAA'\n$FEEDT4  DS    CL08'DD.MM.AA'\n*\n$HOREDT  DS    CL11'HH:MM:SS:DD'\n*\n$HORBIN  DS    CL6\n$HORALF  DS    CL44\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDFECHS": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x11\\x00\\x99\\x08/\\x01\\x061\\x7f\\x15V\\nY\\x05\\x85\\nY\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-03-23T00:00:00", "modifydate": "2006-11-13T15:56:11", "lines": 2649, "newlines": 1413, "modlines": 2649, "user": "U0Z72B6"}, "text": "* +--- ZOS170D --------- MDFECHS -------------------------------------+\n* |                                                                   |\n* |  GGGGGG   MMM   MM  TTTTTTTT                11                    |\n* | GGGGGGGG  MMM  MMM  TTTTTTTT      ++       111                    |\n* | GG        MMMMMMMM     TT         ++      1111     AVISO          |\n* | GG  GGGG  MM MM MM     TT       ++++++   11 11                    |\n* | GG  GGGG  MM MM MM     TT       ++++++      11       IMPORTANTE   |\n* | GG    GG  MM    MM     TT         ++        11                    |\n* | GGGGGGGG  MM    MM     TT         ++    11111111                  |\n* |  GGGGGG   MM    MM     TT               11111111                  |\n* |                                                                   |\n* |                                                                   |\n* | PARA PODER OPERAR DE FORMA COMPLETA CON LA FUNCION DE \"GMTEAR\" UNA|\n* | FECHA, ESTE MODULO NECESITA CONOCER EL DESPLAZAMIENTO DE LA HORA  |\n* | LOCAL STANDARD PARA LA REGION DONDE ESA TRABAJANDO.               |\n* |                                                                   |\n* | EL MODULO LO CALCULA AUTOMATICAMENTE PARA TODAS LAS HORAS DEL A#O |\n* | MENOS UNA, QUE ES PRECISAMENTE LA DEL CAMBIO DE HORA QUE SE       |\n* | PRODUCE ANUALMENTE EL ULTIMO DOMINGO DE OCTUBRE. EL EL PERIODO    |\n* | DE 02:00 A 03:00 DE ESE DIA ESTAMOS TRABAJANOD PRIMERO CON EL     |\n* | LOCAL OFFSET DE VERANO Y A CONTINUACION, EN EL MISMO TRAMO, CON   |\n* | EL LOCAL OFFSET DE INVIERNO.                                      |\n* |                                                                   |\n* | SI ESTA INICIALIZADA DISTINTO DE BLANCOS LA VARIABLE SETLOCAL     |\n* | EL MODULO DEVOLVERA ESTA VARIABLE COMO DESPLAZAMIENTO SI ES       |\n* | INVOCADO PRECISAMENTE EN ESA HORA Y SOLO DURANTE ESA HORA.        |\n* |                                                                   |\n* | SI LA VARIABLE ESTA A ESPACIOS (CUSTOMIZACION PARA CADA REGION)   |\n* | EL MODULO DEVOLVERA UN CODIGO DE ERROR DICIENDO QUE ES IMPOSIBLE  |\n* | CALCULAR EL DESPLAZAMIENTO.                                       |\n* |                                                                   |\n* +-------------------------------------------------------------------+\n* | NOMBRE ....... MDFECHS                                            |\n* |                ES UNA VERSION MEJORADA Y AMPLIADA DEL MDFECHA     |\n* |                                                                   |\n* | UBICACION .... LINKLIB   RENT, REUS,AMODE(31),RMODE(ANY)          |\n* |                                                                   |\n* | AUTOR ........ ANGEL LUIS DOMINGUEZ MARTIN. (C) 1992,2006         |\n* |                                                                   |\n* | FUNCIONES .... MODULO DE TRATAMIENTO, VERIFICACION Y CONVERSION   |\n* |                DE FECHAS, OBTENCION DE FECHA/HORA DEL DIA,        |\n* |                EDICION DE FECHA EN VARIOS FORMATOS Y DIA DE LA    |\n* |                SEMANA, FECHAS RELIGIOSAS PARA UN ANO DADO Y       |\n* |                FECHA ASTRONOMICA (JULIANA REAL SEGUN LA           |\n* |                CONVENCION DEL OBSERVATORIO NAVAL DE LA NASA).     |\n* |                                                                   |\n* | OBJETIVOS .... LIBERAR A PROGRAMAS DEL TTO. DE FECHAS Y MEJORAR   |\n* |                EL RENDIMIENTO DE MODULOS DE ESTE TIPO. PARA       |\n* |                ELLO SE HA CODIFICADO DE FORMA RENT PARA FACILITAR |\n* |                SU POSIBLE UBICACION EN LPA Y NO EFECTUA LLAMADAS  |\n* |                EXTERNAS DEL TIPO GETMAIN O A OTROS MODULOS SALVO  |\n* |                EN SITUACIONES ESPECIALES QUE ESTAN DOCUMENTADAS   |\n* |                EN LOS PARAMETROS DE USO.                          |\n* |                                                                   |\n* | LENGUAJE ..... ASSEMBLER H.                                       |\n* |                                                                   |\n* | TIPO ......... MODULO                                             |\n* |                                                                   |\n* | PARAMETROS ... AREA PASADA POR EL PROGRAMA LLAMANTE               |\n* |                VER LA DSECT $PARAM AL FINAL DEL FUENTE            |\n* |                                                                   |\n* | COD.LLAMADA    POSITIVOS:  FUNCIONES A REALIZAR                   |\n* |                NEGATIVOS:  ERRORES O FECHAS INVALIDAS             |\n* |                                                                   |\n* +---+=================================+-----------------------------+\n*     | SOBRE EL CONCEPTO DE FECHA-BASE |\n* +---+=================================+-----------------------------+\n* |                                                                   |\n* | --> ENTENDEMOS POR FECHA-BASE EL DIA EN EL QUE ESTAMOS CONTANDO   |\n* |     CORRELATIVA E HIPOTETICAMENTE DESDE EL 01-ENE-0001. TENDREMOS |\n* |     UN VALOR EN LOS SIGUIENTES ORDENES DE MAGNITUD SEGUN FECHAS   |\n* |                                                                   |\n* |        01-01-0001 -  LUN -         1                              |\n* |                                                                   |\n* |        31-12-1992 -  JUE -   727.563                              |\n* |        31-12-1993 -  VIE -   727.928                              |\n* |        31-12-1994 -  SAB -   728.293                              |\n* |        31-12-1995 -  DOM -   727.658                              |\n* |        31-12-1996 -  MAR -   729.024                              |\n* |        31-12-1997 -  MIE -   729.389                              |\n* |        31-12-1998 -  JUE -   729.754                              |\n* |        31-12-1999 -  VIE -   730.119                              |\n* |        31-12-2000 -  DOM -   730.485                              |\n* |        04-07-2006  - MAR -   732.496                              |\n* |                                                                   |\n* |        31-12-9999  - VIE - 3.652.059  (HEX 37B9DB)                |\n* |                                                                   |\n* |        24-03-22967 - MIE - 8.388.607  (HEX 7FFFFF)                |\n* |                                                                   |\n* | --> DE ESTO SE DESPRENDE QUE CON UN CAMPO HEXADECIMAL DE TRES     |\n* |     POSICIONES, BINARIAMENTE POSITIVO, PODRIAN REPRESENTARSE      |\n* |     TODAS LAS FECHAS ENTRE EL 01-ENE-0001 Y 24-03-22967, LO QUE   |\n* |     PARECE SUFICIENTE INFORMATICAMENTE HABLANDO.                  |\n* |                                                                   |\n* | ------------------------------------------------------            |\n* | CALCULO DE FECHA-BASE A PARTIR DE UNA JULIANA AAAA/DDD            |\n* | ------------------------------------------------------            |\n* |                                                                   |\n* | SIENDO   D = DIA                                                  |\n* |          T = ANO - 1                                              |\n* |                                                                   |\n* | FECHA-BASE = D + (T*365) + (T/4) - (T/100) + (T/400)              |\n* |                                                                   |\n* |                                                                   |\n* +---+=================================================+-------------+\n*     | SOBRE EL CONCEPTO DE FECHA-BASE SIGLOS XX Y XXI |\n* +---+=================================================+-------------+\n* |                                                                   |\n* |     AQUELLAS APLICACIONES QUE NO REQUIERAN UNA DATACION QUE VAYA  |\n* |     MAS ALLA DE LOS LIMITES DE LOS SIGLO XX O XXI, PUEDEN USAR    |\n* |     ESTA FECHA BASE REDUCIDA CON EL CONSIGUIENTE AHORRO EN UN     |\n* |     OCTETO.                                                       |\n* |                                                                   |\n* |     UTILIZANDO UN CAMPO BINARIO DE DOS POSICIONES, CON SIGNO      |\n* |     ALCANZARIAMOS EL VALOR 32767 Y SIN SIGNO EL 65535.            |\n* |                                                                   |\n* |     CON EL VALOR 32767 PODRIAMOS DIRECCIONAR ALREDEDOR DE 89      |\n* |     ANOS, MIENTRAS QUE CON 65535 SERIA EL DOBLE, ESTO ES, UNOS    |\n* |     179 ANOS.                                                     |\n* |                                                                   |\n* |     SE TOMA COMO REFERENCIA DE COMIENZO DE SIGLO EL DIA PRIMERO   |\n* |     DE ENERO DEL ANO 1 DEL PERIODO, ESTO ES, 1901 Y 2001.         |\n* |                                                                   |\n* +---+=================================================+-------------+\n*     | SOBRE EL CONCEPTO DE FECHA LILIANA              |\n* +---+=================================================+-------------+\n* |                                                                   |\n* |     ES EL MISMO CONCEPTO QUE FECHA BASE PERO TOMANDO COMO         |\n* |     REFERENCIA LA FECHA DEL 14 DE OCTUBRE DE 1582 EN QUE SE       |\n* |     PASO OFICIALMENTE EN MUCHOS PAISES DEL CALENDARIO JULIANO     |\n* |     EL GREGORIANO.                                                |\n* |                                                                   |\n* +---+=================================================+-------------+\n*     | SOBRE EL CONCEPTO DE FECHA ASTRONOMICA          |\n* +---+=================================================+-------------+\n* |                                                                   |\n* |     SE HA ENTENDIDO POR FECHA JULIANA EL NUMERO DE DIAS QUE HAN   |\n* |     TRANSCURRIDO DE UN ANO DADO, AUNQUE ESTE CONCEPTO DEBERIA     |\n* |     LLAMARSE REALMENTE DIAS TRANSCURRIDOS DEL ANO.                |\n* |     EL VERDADERO CONCEPTO DE FECHA JULIANA, QUE HEMOS CONSIGNADO  |\n* |     AQUI COMO ASTRONOMICA SON LOS DIAS TRANSCURRIDOS DESDE UN     |\n* |     PUNTO QUE SE FIJO MEDIANTE CALCULOS ASTRONOMICOS EN EL DIA    |\n* |     01-01-4713 ANTES DE CRISTO. HAN TRANSCURRIDO, PUES, DESDE ESA |\n* |     FECHA UNOS DOS MILLONES Y MEDIO DE DIAS. SE ASUME QUE LOS     |\n* |     DIAS HAN TRNASCURRIDO SIN INTERRUPCION DESDE ESA FECHA EN     |\n* |     PERIODO SEMANALES DE SIETE DIAS, AUNQUE HAYAN OCURRIDO        |\n* |     HECHOS COMO EL PASO DEL CALENDARIO JULIANO AL GREGORIANO QUE  |\n* |     SUPUSIERON ALTERACIONES.                                      |\n* |     EN ESTE ESTADO DE COSAS, HAY DISCREPANCIAS ACERCA DE SI EL    |\n* |     DIA COMIENZA EN EL MEDIODIA O EN LA MEDIANOCHE. ESTO ES       |\n* |     IMPORTANTE DEBIDO A QUE LA FECHA JULIANA-ASTRONOMICA SE       |\n* |     REPRESENTA CON FRACCION DECIMAL QUE INDICA LAS HORAS          |\n* |     TRANSCURRIDAS DE UN DETERMINADO DIA.                          |\n* |     EL CALCULO QUE SE HA EFECTUADO EN ESTE PROGRAMA SE            |\n* |     CORRESPONDE CON EL OFRECIDO POR LA NASA EN LA WEB ASI         |\n* |     COMO SUS INDICACIONES                                         |\n* |                                                                   |\n* |     HTTP://AA.USNO.NAVY.MIL/DATA/DOCS/JULIANDATE.HTML             |\n* |                                                                   |\n* |     TODO LO ANTERIOR EN MINUSCULAS EXCEPTO LA J Y LA D DE LA      |\n* |     PALABRA JULIANDATE                                            |\n* +---------------------------------- DOMINGUEZ (CL) 1992,2006 -------+\nMDFECHS  CSECT\nMDFECHS  AMODE     31\nMDFECHS  RMODE     ANY\n*\n         YREGS\n*\n         USING     MDFECHS,R12         <> ESTABLECER DIRECCIONAMIENTO\n         USING     MDFECHS+4096,R11    <> ESTABLECER DIRECCIONAMIENTO\n         STM       R14,R12,12(R13)     <> STORE REGS SAVE ANTERIOR\n         LR        R12,R15             <> CARGAR ENTRY POINT\n         LR        R11,R12             <> SEGUNDO REGISTRO BASE\n         LA        R11,2048(,R11)\n         LA        R11,2048(,R11)\n*\n         B         INILB00\n         DC        3F'0'\n         DC        CL16'MDFECHS '\n         DC        CL16'FENIX___ZOS170D_'\n         DC        CL16'MODULO FECHAS___'\n         DC        C'&SYSDATC.__&SYSTIME._'\n         DC        C'(&SYSTEM_ID._&SYSASM._&SYSVER.)'\nINILB00  DS        0D\n*\n         L         R2,0(,R1)           <> ADDR. PARAMETROS\n         USING     $PARAM,R2           <> MAPA DE PARAMETROS\n         LA        R3,$SAVESTA\n         USING     @DYNDAT,R3          <> MAPA DE PARAMETROS\n*\n         LR        R10,R13             <> STORE SAVE ANTERIOR\n         LA        R13,@DYNSAV         <> SAVE ACTUAL EN AREA RECIBIDA\n         ST        R10,@DYNSAV+4       <> ENCADENAMIENTO DE SAVES\n         ST        R13,8(R10)          <> ENCADENAMIENTO DE SAVES\n*        +-----------------------------------+\n*--------| CAMBIO DE ESTADO SI ES NECESARIO  |\n*        | PARA EJECUTAR SIEMPRE EN AMODE 31 |\n*        +-----------------------------------+\n         SAM31\n*        +------------------------------------------------+\n*--------|  INICIALIZAMOS CEROS BINARIOS AREA DE TRABAJO  |\n*        |  ENVIADA POR EL MODULO MENOS LA SAVEAREA       |\n*        +------------------------------------------------+\n         LA        R4,@DYNDAT          <> AREA DE TRABAJO\n         LA        R5,@DYNDATL-@DYNSAVL\n         LA        R15,0\n         ICM       R15,B'1000',=X'EE'  <> RELLENO A X'EE'S\n         MVCL      R4,R14              OBTENIDA\n*        +--------------------------+\n*--------|   DETECCION PARAMETROS   |\n*        +--------------------------+\n         LA        R1,0                <> CLEAR R1\n         ICM       R1,B'0011',$CODIGO  <> CARGAR PARAMETRO\n         CH        R1,KH0              <> TEST VALOR INFERIOR\n         BL        PERR01              <> ERROR EN EL PARAMETRO\n         CH        R1,KMNPARM          <> TEST VALOR SUPERIOR\n         BNH       PR10                <> ERROR EN EL PARAMETRO\n*\n*        ERROR EN EL CODIGO DE LLAMADA\n*\nPERR01   DS        0H\n         MVI       @WORKF,X'FF'\n         MVC       @WORKF+1(L'@WORKF-1),@WORKF\n         B         PERR99\n*\nPERR02   DS        0H\n         MVI       @WORKF,X'FF'\n         MVC       @WORKF+1(L'@WORKF-1),@WORKF\n         MVI       @WORKF+L'@WORKF-1,X'FE'\n         B         PERR99\n*\nPERR03   DS        0H\n         MVI       @WORKF,X'FF'\n         MVC       @WORKF+1(L'@WORKF-1),@WORKF\n         MVI       @WORKF+L'@WORKF-1,X'FD'\n         B         PERR99\n*\nPERR04   DS        0H\n         MVI       @WORKF,X'FF'\n         MVC       @WORKF+1(L'@WORKF-1),@WORKF\n         MVI       @WORKF+L'@WORKF-1,X'FC'\n         B         PERR99\n*\nPERR99   DS        0H\n         MVC       $CODIGO,@WORKF+2\n         L         R15,@WORKF\n         B         ENDOFPGM\n*\nPR10     DS        0H\n         MH        R1,KH4              <> CUATRO POSIC. BIFURCAC.\n         LA        R15,PEJUMP          <> BASE DE SALTO\n         B         0(R1,R15)           <> SALTO A RUTINA TTO.\nPEJUMP   DS        0H\n         B         PE00                <> FECHA DEL DIA\n         B         PE01                <> VERIFICACION ANO BISIESTO\n         B         PE02                <> OBTENER FECHAS RELIGIOSAS\n         B         PE03                <> OFFSET HORA LOCAL\n         B         PE04                <> GREGORIANA\n         B         PE05                <> JULIANA\n         B         PE06                <> BASE\n         B         PE07                <> BASE SIGLO XX\n         B         PE08                <> BASE SIGLO XXI\n         B         PE09                <> ASTRONOMICA\n         B         PE10                <> LILIANA\n         B         PE11                <> GMT\n         B         PE12                <> DIFERENCIA ENTRE DOS GREGORI.\n*        +-----------------------------------------+----------+\n*========|   OBTENCION DE LA FECHA DEL DIA LOCAL   | PE00     |\n*        +-----------------------------------------+----------+\nPE00     DS        0H\n         BAS       R10,RTFA00          <> RUTINA FECHA ACTUAL\n*\n         MVC       @WGREGO,@WFACT      <> MOVER A GREGORIANA WORKA\n         BAS       R10,RTGJ00          <> OBTENER LA JULIANA PARA LI\n*\n         MVC       $HORA,@WHACT\n         MVC       $MINUTO,@WHACT+2\n         MVC       $SEGUNDO,@WHACT+4\n         MVC       $DECIMAS,@WHACT+6\n*\n         MVC       $HORBIN,@TIMEDAT\n         MVC       $TIMESTA(8),@WFACT            <> TIMESTAMP GREGO\n         UNPK      @WORK15(13),$HORBIN(7)\n         MVC       $TIMESTA+8(12),@WORK15\n*\n         B         PELI00\n*        +-----------------------------------------+----------+\n*========|   VERIFICACION DE ANO BISIESTO          | PE01     |\n*        +----------------------------------------------------+\n*        | ESTA RUTINA DEVUELVE CONTROL SIN OBTENER LAS       |\n*        | EXPANSIONES DE DATOS LITERALES                     |\n*        +----------------------------------------------------+\nPE01     DS        0H\n         MVC       @WANO,$ANNO         <> VERIFICAR ANO\n         TR        @WANO,TBTRNUM\n         CLC       @WANO,$ANNO\n         BNE       PERR02              <> INVALIDO\n         PACK      @WBAAAA(3),$ANNO(5) <> ANO HEXADECIMAL SIN SIGNO\n         BAS       R8,RTBI00           <> RUTINA BISIESTOS\n         MVC       $INDBISI,@WBISI\n         XC        $CODIGO,$CODIGO\n         B         ENDOFPGM            <> DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*========|   OBTENCION FECHAS RELIGIOSAS TEORICAS  | PE02     |\n*        +-----------------------------------------+----------+\n*        | ESTA RUTINA DEVUELVE CONTROL SIN OBTENER LAS       |\n*        | EXPANSIONES DE DATOS LITERALES                     |\n*        +----------------------------------------------------+\nPE02     DS        0H\n         MVC       @WANO,$ANNO         <> VERIFICAR ANO\n         TR        @WANO,TBTRNUM\n         CLC       @WANO,$ANNO\n         BNE       PERR02              <> INVALIDO\n         CLC       @WANO,=C'3399'      <> ANO TOPE\n         BH        PERR02\n*\n         BAS       R9,RTFR00           <> RUTINA FECHAS RELIGIOSAS\n*\n         XC        $CODIGO,$CODIGO\n         B         ENDOFPGM            <> DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*========|   OBTENCION FECHA_HORA GMT Y OFFSET     | PE03     |\n*        +-----------------------------------------+----------+\nPE03     DS        0H\n         BAS       R10,RTLO00\n         MVC       $FEGREGO,@GMTSTAM\n         MVC       $LOFFSET,@WLOFFSE\n         MVC       $TIMESTA,@GMTSTAM\n         MVC       $HORAFUL,@GMTSTAM+8\n*\n         MVC       @WGREGO,$FEGREGO\n         BAS       R10,RTGJ00\n*\n         B         PELI00\n*        +-----------------------------------------+----------+\n*========|   GREGORIANA   VERIFICACION/CONVERSION  | PE04     |\n*        +-----------------------------------------+----------+\nPE04     DS        0H\n         MVC       @WGREGO,$FEGREGO\n         BAS       R10,RTVG00          <> VERIFICAR GREGORIANA\n         BAS       R10,RTGJ00          <> CONVERTIR A JULIANA (BASELI)\n         B         PELI00\n*        +-----------------------------------------+----------+\n*========|   JULIANA      VERIFICACION/CONVERSION  | PE05     |\n*        +-----------------------------------------+----------+\nPE05     DS        0H\n         MVC       @WJULIA,$FEJULIA\n         BAS       R10,RTVJ00          <> VERIFICAR JULIANA\n         B         PELI00\n*        +-----------------------------------------+----------+\n*========|   BASE         VERIFICACION/CONVERSION  | PE06     |\n*        +-----------------------------------------+----------+\nPE06     DS        0H\n         MVC       @WBASE,$FEBASE      <> VERIFICAR NUMERICOS\n         TR        @WBASE,TBTRNUM\n         CLC       @WBASE,$FEBASE\n         BNE       PERR02              <> INVALIDO\n         BAS       R10,RTBJ00\n         B         PELI00              <> IR A OBTENER LITERALES\n*        +-----------------------------------------+----------+\n*========|   BASE SIGLO XX VERIFICACION/CONVERSION | PE07     |\n*        +-----------------------------------------+----------+\nPE07     DS        0H\n         MVC       @WBASE,$FEBAS20\n         TR        @WBASE,TBTRNUM\n         CLC       @WBASE,$FEBAS20\n         BNE       PERR02              <> INVALIDO\n         PACK      @WORKD,@WBASE\n         AP        @WORKD,=P'693960'\n         UNPK      @WBASE,@WORKD\n         OI        @WBASE+L'@WBASE-1,X'F0'\n         BAS       R10,RTBJ00\n         B         PELI00              <> IR A OBTENER LITERALES\n*        +-----------------------------------------+----------+\n*========|  BASE SIGLO XXI VERIFICACION/CONVERSION | PE07     |\n*        +-----------------------------------------+----------+\nPE08     DS        0H\n         MVC       @WBASE,$FEBAS21\n         TR        @WBASE,TBTRNUM\n         CLC       @WBASE,$FEBAS21\n         BNE       PERR02              <> INVALIDO\n         PACK      @WORKD,@WBASE\n         AP        @WORKD,=P'730485'\n         UNPK      @WBASE,@WORKD\n         OI        @WBASE+L'@WBASE-1,X'F0'\n         BAS       R10,RTBJ00\n         B         PELI00              <> IR A OBTENER LITERALES\n*        +-----------------------------------------+----------+\n*========|   ASTRONOMICA  VERIFICACION/CONVERSION  | PE09     |\n*        +-----------------------------------------+----------+\nPE09     DS        0H\n         MVC       @WASTRO,$FEASTRO\n         TR        @WASTRO,TBTRNUM\n         CLC       @WASTRO,$FEASTRO\n         BNE       PERR02              <> INVALIDO\n         CLC       $FEASTRO(7),=C'2305814'    <> ADMITIDAS ENTRE\n         BL        PERR02\n         CLC       $FEASTRO(7),=C'2962884'    <> ADMITIDAS ENTRE\n         BH        PERR02\n         BAL       R10,RTAG00          <> CONVERTIR A GREGORIANA\n         BAL       R10,RTGJ00          <> CONVERTIR A JULIANA\n         B         PELI00              <> IR A OBTENER LITERALES\n*        +-----------------------------------------+----------+\n*========|   LILIANA      VERIFICACION/CONVERSION  | PE10     |\n*        +-----------------------------------------+----------+\nPE10     DS        0H\n         MVC       @WBASE,$FELILIA     <> VERIFICAR NUMERICOS\n         TR        @WBASE,TBTRNUM\n         CLC       @WBASE,$FELILIA\n         BNE       PERR02              <> INVALIDO\n         PACK      @WORKD,@WBASE\n         AP        @WORKD,=P'577734'\n         UNPK      @WBASE,@WORKD\n         OI        @WBASE+L'@WBASE-1,X'F0'\n         BAS       R10,RTBJ00\n         B         PELI00              <> IR A OBTENER LITERALES\n*        +-----------------------------------------+----------+\n*========|   \"GMTEAR\"     VERIFICACION/CONVERSION  | PE11     |\n*        +-----------------------------------------+----------+\n*        | ESTA RUTINA DEVUELVE CONTROL SIN OBTENER LAS       |\n*        | EXPANSIONES DE DATOS LITERALES                     |\n*        +----------------------------------------------------+\nPE11     DS        0H\n         MVC       @WGMT,$FEGMT\n         TR        @WGMT,TBTRNUM\n         CLC       @WGMT,$FEGMT\n         BNE       PERR02              <> INVALIDO\n         CLC       @WGMT+8(2),=C'23'   <> VERIFICAR HORAS\n         BH        PERR02\n         CLC       @WGMT+10(2),=C'59'  <> VERIFICAR HORAS\n         BH        PERR02\n*\n         BAS       R10,RTFA00          <> RUTINA FECHA ACTUAL\n         MVC       @LOCSTAM(8),@WFACT\n         UNPK      @WORK15(13),@TIMEDAT(7)\n         MVC       @LOCSTAM+8(12),@WORK15\n*\n         BAS       R10,RTLO00          <> OFFSET ACTUAL Y @GMTSTAM\n         PACK      @WOFFBAS,@WLOFFSE+1(6)\n         CLI       @WLOFFSE,C'E'       <> POSITIVO ?\n         BE        *+4+6\n         MVN       @WOFFBAS+L'@WOFFBAS-1,=X'0D'  <> PONER NEGATIVO\n*\n*        CALCULAR FECHA Y HORA DEL CAMBIO A VERANO PARA LA GMT\n*        =====================================================\n         MVC       @WGREGO(4),@LOCSTAM <> ANO LOCAL\n         MVC       @WGREGO+4(4),KVERFEC1         <> COMIENZO HOR.VERANO\n         BAS       R10,RTGJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJB00          <> CONVERTIR A BASE\n         BAS       R10,RTDS00          <> DIA LA SEMANA\n         PACK      @WORKF,@WBASE       <> DIA BASE\n         PACK      @WORKH,@WDIASEN     <> DIA DE LA SEMANA NUMERICO\n         SP        @WORKF,@WORKH       <> CALCULAR ULT.DOMINGO DEL MES\n         UNPK      @WBASE,@WORKF\n         OI        @WBASE+L'@WBASE-1,X'F0'       <> WBASE ULT. DOMINGO\n         BAS       R10,RTBJ00          <> PASAR A JULIANA\n         BAS       R10,RTJG00          <> PASAR A GREGORIANA\n         MVC       @WLOC1PE(8),@WGREGO           <> FECHA DE VERANO\n         MVC       @WLOC1PE+8(4),KVERHOR1        <> HORA DE VERANO\n*\n*        CALCULAR FECHA Y HORA DEL CAMBIO A INVIERNO PARA LA GMT\n*        =====================================================\n         MVC       @WGREGO(4),@LOCSTAM <> ANO EN TRATAMIENTO\n         MVC       @WGREGO+4(4),KVERFEC2         <> COMIENZO HOR.VERANO\n         BAS       R10,RTGJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJB00          <> CONVERTIR A BASE\n         BAS       R10,RTDS00          <> DIA LA SEMANA\n         PACK      @WORKF,@WBASE       <> DIA BASE\n         PACK      @WORKH,@WDIASEN     <> DIA DE LA SEMANA NUMERICO\n         SP        @WORKF,@WORKH       <> CALCULAR ULT.DOMINGO DEL MES\n         UNPK      @WBASE,@WORKF\n         OI        @WBASE+L'@WBASE-1,X'F0'       <> WBASE ULT. DOMINGO\n         BAS       R10,RTBJ00          <> PASAR A JULIANA\n         BAS       R10,RTJG00          <> PASAR A GREGORIANA\n         MVC       @WLOC2PE(8),@WGREGO           <> FECHA DE VERANO\n         MVC       @WLOC2PE+8(4),KVERHOR2        <> HORA DE VERANO\n*\n*        CALCULAR FECHA Y HORA DEL CAMBIO A INVIERNO PARA LA GMT\n*        =====================================================\n         MVC       @WLOCHPE,@WLOC2PE             <> CAMBIO A INVIERNO\n         MVC       @WLOCHPE+8(4),KVERCAMB        <> HORA DE CAMBIO\n*\n*        VER SI EL OFFSET CALCULADO ES DE VERANO O DE INVIERNO\n*        O ESTA EN LA HORA DEL CAMBIO DE VERANO A INVIERNO\n*\n         CLC       @LOCSTAM(L'@WGMT),@WLOC1PE\n         BL        PE11PR10            <> ES EL OFFSET DE INVIERNO\n         CLC       @LOCSTAM(L'@WGMT),@WLOC2PE\n         BNL       PE11PR10            <> ES EL OFFSET DE INVIERNO\n         CLC       @LOCSTAM(L'@WGMT),@WLOCHPE\n         BNL       PE11HCAM            <> ES LA HORA DL CAMBIO\n         B         PE11OFVE            <> ES HORARIO DE VERANO\n*\nPE11OFVE DS        0H\n         SP        @WOFFBAS,=P'10000'  <> QUITAR UNA HORA (HHMMSS)\n         B         PE11PR10            <> CONTINUAR PROCESO\n*\n*        TTO. ESPECIAL CUANDO ESTAMOS EN LA HORA EN QUE SE PRODUCE\n*        EL CAMBIO DE VERANO A INVIERNO.\n*        VER COMENTARIO AL PRINCIPIO DE ESTE PROGRAMA\n*\nPE11HCAM DS        0H\n         CLC       SETLOCAL,BLANCOS    <> HAY VALOR DE INSTALACION ?\n         BE        PERR04              <> NO ERROR -4\n         PACK      @WOFFBAS,SETLOCAL+1(6)\n         CLI       SETLOCAL,C'E'       <> POSITIVO ?\n         BE        *+4+6\n         MVN       @WOFFBAS+L'@WOFFBAS-1,=X'0D'  <> PONER NEGATIVO\n         B         PE11PR10            <> CONTINUAR PROCESO\n*        ----------------------------\n*        EN ESTE PUNTO TENEMOS EN @WOFFBAS CON SIGNO EL VALOR BASICO DE\n*        LA INSTALACION COMO DESPLAZAMIENTO BASICO EN INVIERNO\n*        ----------------------------\n*\n*        CALCULAR FECHA/HORA DEL CAMBIO A VERANO PARA LA FECHA PEDIDA\n*        ============================================================\nPE11PR10 DS        0H\n         MVC       @WGREGO(4),@WGMT    <> ANO EN TRATAMIENTO\n         MVC       @WGREGO+4(4),KVERFEC1         <> COMIENZO HOR.VERANO\n         BAS       R10,RTGJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJB00          <> CONVERTIR A BASE\n         BAS       R10,RTDS00          <> DIA LA SEMANA\n         PACK      @WORKF,@WBASE       <> DIA BASE\n         PACK      @WORKH,@WDIASEN     <> DIA DE LA SEMANA NUMERICO\n         SP        @WORKF,@WORKH       <> CALCULAR ULT.DOMINGO DEL MES\n         UNPK      @WBASE,@WORKF\n         OI        @WBASE+L'@WBASE-1,X'F0'       <> WBASE ULT. DOMINGO\n         BAS       R10,RTBJ00          <> PASAR A JULIANA\n         BAS       R10,RTJG00          <> PASAR A GREGORIANA\n         MVC       @WLOC1PE(8),@WGREGO           <> FECHA DE VERANO\n         MVC       @WLOC1PE+8(4),KVERHOR1        <> HORA DE VERANO\n*\n*        CALCULAR FECHA/HORA DEL CAMBIO A INVIERNO PARA LA FECHA PEDIDA\n*        ==============================================================\n         MVC       @WGREGO(4),@WGMT    <> ANO EN TRATAMIENTO\n         MVC       @WGREGO+4(4),KVERFEC2         <> COMIENZO HOR.VERANO\n         BAS       R10,RTGJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJB00          <> CONVERTIR A BASE\n         BAS       R10,RTDS00          <> DIA LA SEMANA\n         PACK      @WORKF,@WBASE       <> DIA BASE\n         PACK      @WORKH,@WDIASEN     <> DIA DE LA SEMANA NUMERICO\n         SP        @WORKF,@WORKH       <> CALCULAR ULT.DOMINGO DEL MES\n         UNPK      @WBASE,@WORKF\n         OI        @WBASE+L'@WBASE-1,X'F0'       <> WBASE ULT. DOMINGO\n         BAS       R10,RTBJ00          <> PASAR A JULIANA\n         BAS       R10,RTJG00          <> PASAR A GREGORIANA\n         MVC       @WLOC2PE(8),@WGREGO           <> FECHA DE VERANO\n         MVC       @WLOC2PE+8(4),KVERHOR2        <> HORA DE VERANO\n*\n*        DESCONTAR EL OFFSET HALLADO A LA FECHA SOLICITADA\n*\n         MVC       @WGREGO,@WGMT       <> FECHA QUE WUEREMOS GMTEAR\n         BAS       R10,RTGJ00          <> PASAR A JULIANA\n         BAS       R10,RTJB00          <> PASAR A BASE\n         PACK      @WORKD,@WBASE       <> EMPAQUETAR\n         SP        @WORKD,=P'1'        <> RESTAR UN DIA\n         MP        @WORKD,=P'10000'    <> DEJAR HUECO HH:MM\n         AP        @WORKD,=P'2400'     <> 24 HORAS DEL DIA DISMINUIDO\n         PACK      @WORKF,@WGMT+8(4)   <> HH:MM SOLICITADOS\n         AP        @WORKD,@WORKF       <> SUMAR\n*\n*        EL OFFSET BASICO (@WOFFBAS) ESTA EN FORMATO HHMMSS\n*        AL GMTEAR LA HORA NO TRABAJAMOS CON SEGUNDOS\n*\n         MVN       @WOFFBAS+L'@WOFFBAS-2,@WOFFBAS+L'@WOFFBAS-1\n*\n         SP        @WORKD,@WOFFBAS(L'@WOFFBAS-1)\n*\n*        VER SI LA FECHA/HORA PEDIDA ES DE INVIERNO O DE VERANO\n*\n         CLC       @WGMT,@WLOC1PE\n         BL        PE11PR20            <> ES EL OFFSET DE INVIERNO\n         CLC       @WGMT,@WLOC2PE\n         BNL       PE11PR20            <> ES EL OFFSET DE VERANO\n*\n         SP        @WORKD,=P'100'      <> RESTAR UNA HORA MAS\n*\nPE11PR20 DS        0H                   <> OFFSET DE INVIERNO\n         UNPK      @WGMT,@WORKD\n         OI        @WGMT+L'@WGMT-1,X'F0'\n*\n         ZAP       @WORKF,@WORKD+5(3)   <> TRATAR LAS HORAS\n         MVZ       @WORKF+1(1),=X'00'   <> MACHACAR EL CERO IZQUIERDO\n         CP        @WORKF,=P'2400'\n         BL        PE11PR30             <> ESTA BIEN\n         SP        @WORKD,=P'2400'      <> QUITAR LAS 24:00\n         AP        @WORKD,=P'10000'     <> Y SUMAR UN DIA\nPE11PR30 DS        0H\n         UNPK      @WGMT,@WORKD         <> DESEMPAQUETAR LOS VALORES\n         OI        @WGMT+L'@WGMT-1,X'F0'         <> SIGNO\n         MVC       @WBASE,@WGMT+1       <> ENTRESACAR LA FECHA BASE\n         BAS       R10,RTBJ00           <> CONVERTIR A JULIANA\n         BAS       R10,RTJG00           <> CONVERTIR A GREGORIANA\n*\n         MVC       @WGMT(8),@WGREGO\n         MVC       $FEGMT,@WGMT\n*\n         XC        $CODIGO,$CODIGO\n         B        ENDOFPGM              <> DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*========|   DIFERENCIA ENTRE DOS FECHAS GREGORIA  | PE12     |\n*        +-----------------------------------------+----------+\nPE12     DS        0H\n         MVC       @WGREGO,$FEGREGO\n         BAS       R10,RTVG00          <> VERIFICAR GREGORIANA\n         BAS       R10,RTGJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJB00          <> CONVERTIR A BASE\n         PACK      @WDIFER,@WBASE      <> GUARDAR BASE DE FECHA-1\n         MVC       @WGREGO,$FEGREG2\n         BAS       R10,RTVG00          <> VERIFICAR GREGORIANA\n         BAS       R10,RTGJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJB00          <> CONVERTIR A BASE\n         PACK      @WORKD,@WBASE       <> GUARDAR BASE DE FECHA-2\n         SP        @WORKD,@WDIFER      <> RESTAR FECHAS\n         CVB       R1,@WORKD           <> PASAR A BINARIO CON SIGNO\n         STCM      R1,B'1111',$FEDIFER <> DIFERENCIA A PARAMETRO\n*\n         XC        $CODIGO,$CODIGO\n         B         ENDOFPGM              <> DEVOLVER CONTROL\n*        +-----------------------------------------+----------+\n*>>>>>>>>| OBTENCION DE DATOS EN LITERALES         |          |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        | OBTIENE LOS RESULTADOS SOLICITADOS A PARTIR DE     |\n*        | LOS DATOS QUE HA RECIBIDO                          |\n*        +----------------------------------------------------+\nPELI00   DS        0H\n         CLC       $OBTIPOS,BLANCOS    <> ALGUNA SOLICITUD\n         BE        PELI99\n*\n         CLI       $OB@BISI,C'S'       <> OBTENER ANO BISIESTO\n         BNE       PELI0B\n*\n*        <OBTENCION----> BISIESTO\n*\n         MVC       $INDBISI,@WBISI     <> POR DEFECTO LO QUE HAYA\n         CLI       $INDBISI,X'EE'      <> YA ESTABA OBTENIDO?\n         BNE       PELI0B              <> SI, SIGUIENTE PETICION\n         PACK      @WBAAAA(3),@WJULIA(5)  ANO HEXADECIMAL SIN SIGNO\n         BAS       R8,RTBI00\n         MVC       $INDBISI,@WBISI     <> LO NUEVO A SALIDA\n*\nPELI0B   DS        0H\n         CLI       $OB@RELI,C'S'\n         BNE       PELI0C\n*\n*        <OBTENCION----> FECHAS RELIGIOSAS\n*\n         MVC       @WANO,@WJULIA       <> CONSIGNAR ANNO TRABAJO\n         CLC       @WANO,=C'3399'      <> ANO MAXIMO\n         BH        PERR03              <> ERROR\n*\n         MVC       @SAVABAS,@AREABAS\n         BAS       R9,RTFR00\n         MVC       @AREABAS,@SAVABAS\n*\nPELI0C   DS        0H\n         CLI       $OB@GREG,C'S'\n         BNE       PELI0D\n*\n*        <OBTENCION----> GREGORIANA\n*\n         MVC       $FEGREGO,@WGREGO\n         CLI       $FEGREGO,X'EE'      <> YA LA TENEMOS?\n         BNE       PELI0D              <> SALTAR\n*\n         BAS       R10,RTJG00          <> CONVERTIR A GREGORIANA\n         MVC       $FEGREGO,@WGREGO    <> ASIGNARLA\n*\nPELI0D   DS        0H\n         CLI       $OB@JULI,C'S'\n         BNE       PELI0E\n*\n*        <OBTENCION----> JULIANA\n*\n         MVC       $FEJULIA,@WJULIA\n         CLI       $FEJULIA,X'EE'      <> YA LA TENEMOS?\n         BNE       PELI0E              <> SALTAR\n*\n         ABEND     777,DUMP            <> LA JULIANA ESTA SIEMPRE\n*\nPELI0E   DS        0H\n         CLI       $OB@BASE,C'S'\n         BNE       PELI0F\n*\n*        <OBTENCION----> FECHA BASE\n*\n         MVC       $FEBASE,@WBASE\n         CLI       $FEBASE,X'EE'       <> YA LA TENEMOS?\n         BNE       PELI0F              <> SALTAR\n*\n         BAS       R10,RTJB00          <> OBTENER FECHA BASE\n         MVC       $FEBASE,@WBASE\n*\nPELI0F   DS        0H\n         CLI       $OB@BAS0,C'S'\n         BNE       PELI0G\n*\n*        <OBTENCION----> FECHA BASE SIGLO XX\n*\n         CLI       @WBASE,X'EE'        <> TENEMOS BASE REAL ?\n         BE        PELI0F10            <> SI, A CALCULAR SIGLO XX\n         BAS       R10,RTJB00          <> CALCULAR BASE\n*\nPELI0F10 DS        0H\n         PACK      @WORKD(4),@WBASE\n         SP        @WORKD(4),=P'693960'\n         UNPK      $FEBAS20,@WORKD(4)\n         OI        $FEBAS20+L'$FEBAS20-1,X'F0'\n*\nPELI0G   DS        0H\n         CLI       $OB@BAS1,C'S'\n         BNE       PELI0H\n*\n*        <OBTENCION----> FECHA BASE SIGLO XXI\n*\n         CLI       @WBASE,X'EE'        <> TENEMOS BASE REAL ?\n         BE        PELI0G10            <> SI, A CALCULAR SIGLO XXO\n         BAS       R10,RTJB00          <> CALCULAR BASE\n*\nPELI0G10 DS        0H\n         PACK      @WORKD(4),@WBASE\n         SP        @WORKD(4),=P'730485'\n         UNPK      $FEBAS21,@WORKD(4)\n         OI        $FEBAS21+L'$FEBAS21-1,X'F0'\n*\nPELI0H   DS        0H\n         CLI       $OB@ASTR,C'S'\n         BNE       PELI0I         <<<<< OJO PENDIENTE\n*\n*        <OBTENCION----> FECHA ASTRONOMICA\n*\n         CLI       @WASTRO,X'EE'       <> YA LA TENEMOS\n         BNE       PELI0H10\n*\n         CLI       @WGREGO,X'EE'       <> TENEMOS LA GREGORIANA ?\n         BNE       *+4+4\n         BAL       R10,RTJG00          <> HALLAR LA GREGORIANA\n* ====>\n         BAL       R10,RTGA00          <> HALLAR LA ASTRONOMICA\n*\nPELI0H10 DS        0H\n         MVC       $FEASTRO,@WASTRO\n         MVC       $FEASTRO+7(4),CEROS <> POR EL MOMENTO SIN DECIMALES\n*\nPELI0I   DS        0H\n         CLI       $OB@LILI,C'S'\n         BNE       PELI0J\n*\n*        <OBTENCION----> FECHA LILIANA\n*\n         CLI       @WBASE,X'EE'        <> TENEMOS BASE REAL ?\n         BE        PELI0I10            <> SI, A CALCULAR SIGLO XXO\n         BAS       R10,RTJB00          <> CALCULAR BASE\n*\nPELI0I10 DS        0H\n         PACK      @WORKD(4),@WBASE\n         SP        @WORKD(4),=P'577734'\n         UNPK      $FELILIA,@WORKD(4)\n         OI        $FELILIA+L'$FELILIA-1,X'F0'\n*\nPELI0J   DS        0H\n         CLI       $OB@EDT,C'S'\n         BNE       PELI0K\n*                  * --\n*        <OBTENCION----> FECHAS EDITADAS Y OTROS VALORES\n*\n*        SELECCION DE TABLA DE IDIOMA A UTILIZAR\n*\n         LA        R1,TBIDIOMA\nPELI0J10 DS        0H\n         CLI       0(R1),C'*'          <> FIN DE TABLA, IDIOM DEFECTO\n         BE        PELI0J12\n         CLC       0(4,R1),$IDIOMA\n         BE        PELI0J12\n         LA        R1,8(,R1)           <> SIGUIENTE ENTRADA EN TABLA\n         B         PELI0J10\nPELI0J12 DS        0H\n         MVC       @ADRIDIO,4(R1)      <> DIRECCION TABLA IDIOMA\n*\n         CLI       @WBASE,X'EE'             <> TENEMOS FECHA BASE\n         BNE       PELI0J20\n         BAS       R10,RTJB00          <> OBTENER FECHA BASE\nPELI0J20 DS        0H\n         BAS       R10,RTDS00 <> OBTENER DIA SEMANA\n         MVC       $DIASEN,@WDIASEN         <> DIA SEMANA NUMERICO\n         MVC       @WBSS,$DIASEN            <> PASAR A BINARIO\n         MVZ       @WBSS,=X'00'             <> EL DIA SEMANA NUMERICO\n         L         R1,@ADRIDIO              <> TABLA DEL IDIOMA\n         L         R1,4(,R1)                <> TABLA DE DIAS SEMANA\n         LA        R15,0\n         ICM       R15,B'0001',@WBSS        <> DIA CALCULADO\n         MH        R15,0(R1)                <> TAMANO DE CADA ENTRADA\n         LA        R14,0\n         LH        R14,0(R1)                <> GUARDA.TAMANO CADA ENTR\n         AR        R1,R15\n         LA        R1,2(,R1)                <> DIRECCIONA AL DATO\n         BCTR      R14,R0                   <> UNO MENOS PARA EXECUTE\n         MVC       $DIASEA,BLANCOS\n         EX        R14,MVCDIASE             <> MOVER DIA DE LA SEMANA\n         B         PELI0J30\nMVCDIASE MVC       $DIASEA(0),0(R1)         <> MUEVE DIA DE LA SEMAMA\nPELI0J30 DS        0H\n         MVC       $DIANUM,$FEGREGO+6       <> DIA NUMERICO\n         L         R1,@ADRIDIO              <> TABLA DEL IDIOMA\n         L         R1,0(,R1)                <> TABLA DE DIAS ALFABETICA\n         PACK      @WORKD,$DIANUM\n         CVB       R15,@WORKD               <> PASAR DIAS A BINARIO\n         BCTR      R15,R0                   <> RESTAR UNO\n         MH        R15,0(R1)                <> TAMANO DE CADA ENTRADA\n         LA        R14,0\n         LH        R14,0(R1)                <> GUARD TAMANO CADA ENTRA\n         AR        R1,R15\n         LA        R1,2(,R1)                <> DIRECCIONA AL DATO\n         BCTR      R14,R0                   <> UNO MENOS PARA EXECUTE\n         MVC       $DIAALF,BLANCOS\n         EX        R14,MVCDIAAL             <> MOVER DIA ALFABETICO\n         B         PELI0J40\nMVCDIAAL MVC       $DIAALF(0),0(R1)         <> MUEVE DIA ALFABETICO\nPELI0J40 DS        0H\n         MVC       $MESNUM,$FEGREGO+4       <> MES NUMERICO\n         L         R1,@ADRIDIO              <> TABLA DEL IDIOMA\n         L         R1,12(,R1)               <> TABLA DE MES LARGO\n         PACK      @WORKD,$MESNUM\n         CVB       R15,@WORKD               <> PASAR DIAS A BINARIO\n         BCTR      R15,R0                   <> RESTAR UNO\n         MH        R15,0(R1)                <> TAMANO DE CADA ENTRADA\n         LA        R14,0\n         LH        R14,0(R1)                <> GUARD TAMANO CADA ENTRA\n         AR        R1,R15\n         LA        R1,2(,R1)                <> DIRECCIONA AL DATO\n         BCTR      R14,R0                   <> UNO MENOS PARA EXECUTE\n         MVC       $MESALF,BLANCOS\n         EX        R14,MVCMESAL             <> MOVER MES ALFABETICO\n         B         PELI0J50\nMVCMESAL MVC       $MESALF(0),0(R1)         <> MUEVE MES ALFABETICO\nPELI0J50 DS        0H\n         MVC       $ANONUM,$FEGREGO         <> ANO NUMERICO\n         MVC       $ANOALF,BLANCOS          <> ANO ALFABETICO\n         L         R1,@ADRIDIO              <> TABLA DEL IDIOMA\n         L         R1,8(,R1)                <> TABLA DE MES CORTO\n         PACK      @WORKD,$FEGREGO+4(2)\n         CVB       R15,@WORKD               <> PASAR DIAS A BINARIO\n         BCTR      R15,R0                   <> RESTAR UNO\n         MH        R15,0(R1)                <> TAMANO DE CADA ENTRADA\n         AR        R1,R15\n         LA        R1,2(,R1)                <> DIRECCIONA AL DATO\n*\n         MVC       $FEEDT1(2),$FEGREGO+6\n         MVI       $FEEDT1+2,C'.'\n         MVC       $FEEDT1+3(3),0(R1)\n         MVI       $FEEDT1+6,C'.'\n         MVC       $FEEDT1+7(4),$FEGREGO\n*\n         MVC       $FEEDT2(7),$FEEDT1\n         MVC       $FEEDT2+7(2),$FEEDT1+9\n*\n         MVC       $FEEDT3(2),$FEGREGO+6\n         MVI       $FEEDT3+2,C'.'\n         MVC       $FEEDT3+3(2),$FEGREGO+4\n         MVI       $FEEDT3+5,C'.'\n         MVC       $FEEDT3+6(4),$FEGREGO\n*\n         MVC       $FEEDT4(6),$FEEDT3\n         MVC       $FEEDT4+6(2),$FEEDT3+8\n*\n         CLI       $CODIGO+1,X'00'\n         BNE       PELI0K              <> SALTAR CAMPO SIGUIENTE\n         MVI       $HOREDT,C':'\n         MVC       $HOREDT+1(L'$HOREDT-1),$HOREDT\n         MVC       $HOREDT(2),$HORA\n         MVC       $HOREDT+3(2),$MINUTO\n         MVC       $HOREDT+6(2),$SEGUNDO\n         MVC       $HOREDT+9(2),$DECIMAS\n*\n         MVI       $HORALF,C' '\n         MVC       $HORALF+1(L'$HORALF-1),$HORALF\n*\nPELI0K   DS        0H\n         CLI       $OB@EDTH,C'S'\n         BNE       PELI0L\n*\n*        <OBTENCION----> EDITAR LA HORA\n*\n         CLI       $CODIGO+1,X'00'     <> NOS HAN PEDIDO LA HORA ?\n         BNE       PELI0L              <> NO, SALTAR ESTA OBTENCION\n*\n*        HORAS\n*\n         LA        R6,@CANAREA\n         USING     $CANPARM,R6\n         XC        $CANCOD,$CANCOD     <> GENERO FEMENINO\n         MVI       $CANPENT,C'0'\n         MVC       $CANPENT+1(L'$CANPENT-1),$CANPENT\n         MVC       $CANPENT+L'$CANPENT-2(2),@WHACT\n         MVC       $CANPDEC,CEROS      <> SIN DECIMALES\n         MVC       $CANTROC,=C'080999' <> TROCEAMIENTO DE LIETERALES\n         MVI       $CANLITE,C' '\n         MVC       $CANLITE+1(L'$CANLITE-1),$CANLITE\n         MVC       $CANLITE(10),=C'HORA/HORAS'\n         LINK      EP=MDCANTI,PARAM=((R6))\n*\n         MVC       $HORALF,$CANLITE    <> MOVER A CAMPO PARAMETROS\n         LA        R5,$HORALF+L'$HORALF-1 DIRECCIONAR FIN DE CAMPO\nPELI0K10 DS        0H\n         CLI       0(R5),C'*'          <> BUSCAR EL PRIMER ASTERISCO\n         BNE       *+4+4   =========+\n         BCT       R5,PELI0K10      |\n* ====>                      <======+\n         LA        R5,1(R5)            <> AVANZAR LA POSICION\n         MVI       0(R5),C' '          <> MOVER UN ESPACIO\n         LA        R5,1(R5)            <> AVANZAR LA POSICION\n*\n*        MINUTOS\n*\n         XC        $CANCOD,$CANCOD\n         MVI       $CANCOD+1,X'01'     <> MINUTOS MASCULINO\n         MVI       $CANPENT,C'0'\n         MVC       $CANPENT+1(L'$CANPENT-1),$CANPENT\n         MVC       $CANPENT+L'$CANPENT-2(2),@WHACT+2\n         MVC       $CANPDEC,CEROS      <> SIN DECIMALES\n         MVC       $CANTROC,=C'080999' <> TROCEAMIENTO DE LITERALES\n         MVI       $CANLITE,C' '\n         MVC       $CANLITE+1(L'$CANLITE-1),$CANLITE\n         MVC       $CANLITE(14),=C'MINUTO/MINUTOS'\n         LINK      EP=MDCANTI,PARAM=((R6))\n*\n         LR        R15,R5              <> POSIC. EN EL AREA SALIDA\n         LA        R1,$HORALF+L'$HORALF   FINAL DEL CAMPO\n         SR        R1,R15              <> POSICIONES RESTANTES\n         BCTR      R1,R0               <> UNA MENOS PARA MOVE\n         EX        R1,PELI0KMV         <> MOVER VARIABLE\n*\n         LA        R5,$HORALF+L'$HORALF-1 DIRECCIONAR FIN DE CAMPO\nPELI0K20 DS        0H\n         CLI       0(R5),C'*'          <> BUSCAR EL PRIMER ASTERISCO\n         BNE       *+4+4\n         BCT       R5,PELI0K20\n* ====>\n         LA        R5,1(R5)            <> AVANZAR LA POSICION\n         MVI       0(R5),C' '          <> MOVER UN ESPACIO\n         LA        R5,1(R5)            <> AVANZAR LA POSICION\n*\n*        SEGUNDOS\n*\n         XC        $CANCOD,$CANCOD\n         MVI       $CANCOD+1,X'01'     <> MINUTOS MASCULINO\n         MVI       $CANPENT,C'0'\n         MVC       $CANPENT+1(L'$CANPENT-1),$CANPENT\n         MVC       $CANPENT+L'$CANPENT-2(2),@WHACT+4\n         MVC       $CANPDEC,CEROS      <> SIN DECIMALES\n         MVC       $CANTROC,=C'080999' <> TROCEAMIENTO DE LITERALES\n         MVI       $CANLITE,C' '\n         MVC       $CANLITE+1(L'$CANLITE-1),$CANLITE\n         MVC       $CANLITE(16),=C'SEGUNDO/SEGUNDOS'\n         LINK      EP=MDCANTI,PARAM=((R6))\n*\n         LR        R15,R5              <> POSIC. EN EL AREA SALIDA\n         LA        R1,$HORALF+L'$HORALF   FINAL DEL CAMPO\n         SR        R1,R15              <> POSICIONES RESTANTES\n         BCTR      R1,R0               <> UNA MENOS PARA MOVE\n         EX        R1,PELI0KMV         <> MOVER VARIABLE\n*\n         B         PELI0L\n*\nPELI0KMV MVC       0(0,R5),$CANLITE    <> MOVE VARIABLE\n*\n         DROP      R6\nPELI0L   DS        0H\n         CLI       $OB@EDTA,C'S'\n         BNE       PELI99\n*\n*        <OBTENCION----> EDITAR EL ANO\n*\n         LA        R6,@CANAREA\n         USING     $CANPARM,R6\n         XC        $CANCOD,$CANCOD\n         MVI       $CANCOD+1,X'01'     <> GENERO MASCULINO\n         MVI       $CANPENT,C'0'\n         MVC       $CANPENT+1(L'$CANPENT-1),$CANPENT\n         MVC       $CANPENT+L'$CANPENT-4(4),@WJULIA\n         MVC       $CANPDEC,CEROS      <> SIN DECIMALES\n         MVC       $CANTROC,=C'080999' <> TROCEAMIENTO DE LIETERALES\n         MVI       $CANLITE,C' '\n         MVC       $CANLITE+1(L'$CANLITE-1),$CANLITE\n         LINK      EP=MDCANTI,PARAM=((R6))\n*\n         MVC       $ANOALF,$CANLITE\n*\n         LA        R5,$ANOALF+L'$ANOALF-1 DIRECCIONAR FIN DE CAMPO\nPELI0L10 DS        0H\n         CLI       0(R5),C'*'          <> BUSCAR EL PRIMER ASTERISCO\n         BNE       *+4+4\n         BCT       R5,PELI0L10\n* ====>\n         BCTR      R5,R0 <> CASO ESPECIAL ANOS UNO\n         BCTR      R5,R0\n         CLC       0(4,R5),=C' UN*'    <> AVANZAR LA POSICION\n         BNE       *+4+4               <> MOVER UN ESPACIO\n         MVI       3(R5),C'O'          <> PONER UNO\n*\n         DROP      R6\n*\nPELI99   DS        0H\n         XC        $CODIGO,$CODIGO\n         B         ENDOFPGM\n*        +-----------------------------------------+----------+\n*>>>>>>>>|   FINAL EL PROGRAMA                     | ENDOFPGM |<<<<<<<<\n*        +-----------------------------------------+----------+\nENDOFPGM DS        0H\n         LA        R15,0               <> CLEAR R15\n         ICM       R15,B'0011',$CODIGO <> CODIGO DE RETORNO\n*        RETORNO\n         L         R13,4(R13)          <> SAVE ANTERIOR\n         L         R14,12(R13)         <> R14 ANTERIOR\n         LM        R0,R12,20(R13)      <> RESTO REGISTROS\n         BSM       R0,R14\n*\nRTJG00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>|   CONVERSION JULIANA A GREGORIANA       | RTJG     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   @WJULIA                                |\n*        +   RETORNA:  @WGREGO                                |\n*        +----------------------------------------------------+\n         MVC       @WGREGO(4),@WJULIA       <> TRANSFERIR EL ANO\n*\n         CLI       @WBISI,X'EE'        <> YA SE CALCULO EL BISIESTO?\n         BNE       *+4+6+4              <> SI SALTAMOS\n         PACK      @WBAAAA(3),@WJULIA(5)    <> ANO EN BIN\n         BAS       R8,RTBI00           <> CALCULAR BISIESTO\n*\n         PACK      @WORKD,@WJULIA+4(3)      <> EMPAQUETAR EL DIA\n         LA        R5,@TBMES                <> TABLA MESES ACTUALIZADA\n         L         R1,=F'11'                <> ONCE MESES\n         MH        R1,TBMESLGE              <> POR LONG. ELEMENTO\n         AR        R5,R1                    <> DIRECC. DICIEMBRE\n         ZAP       @WORKF,=P'12'            <> ANOTAR DICIEMBRE\nRTJG20   CP        @WORKD,2(2,R5)           <> COMPARAR DIAS TRANSCU\n         BH        RTJG30                   <> DETECTADO\n         SH        R5,TBMESLGE              <> ELEMENTO ANTERIOR\n         SP        @WORKF,=P'1'             <> MES ANTERIOR\n         B         RTJG20\nRTJG30   UNPK      @WGREGO+4(2),@WORKF      <> HALLADO MES\n         OI        @WGREGO+5,X'F0'          <> SIGNO\n         SP        @WORKD,2(2,R5)           <> RESTA DIAS TRANSCURR.\n         UNPK      @WGREGO+6(2),@WORKD      <> ANOTAR LOS DIAS\n         OI        @WGREGO+7,X'F0'          <> SIGNO\n         CP        @WORKD,=P'0'             <> LOS DIAS FUERON 00\n         BNE       RTJG99                   <> NO, DEVOLVER CONTROL\n         UNPK      @WGREGO+6(2),0(2,R5)     <> ANOTAR DIAS TOTALES MES\n         OI        @WGREGO+7,X'F0'          <> SIGNO\n*\nRTJG99   BR        R10                      <> DEVOLVER CONTROL\n*\nRTGJ00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>|    CONVERSION GREGORIANA A JULIANA      |    RTGJ  |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   @WGREGO                                |\n*        +   RETORNA:  @WJULIA                                |\n*        +----------------------------------------------------+\n         MVI       @WJULIA,C'0'\n         MVC       @WJULIA+1(L'@WJULIA-1),@WJULIA\n*\n         MVC       @WJULIA(4),@WGREGO       <> TRANSFERIR EL ANO\n*\n         CLI       @WBISI,X'EE'        <> YA SE CALCULO EL BISIESTO?\n         BNE       *+4+6+4             <> SI SALTAMOS\n         PACK      @WBAAAA(3),@WGREGO(5)\n         BAS       R8,RTBI00           <> CALCULAR BISIESTO\n*\n         PACK      @WORKD,@WGREGO+4(2)      <> EMPAQUETAR EL MES\n         CVB       R15,@WORKD               <> PASAR A BINARIO\n         BCTR      R15,R0                   <> RESTAR UNO\n         MH        R15,TBMESLGE             <> CALC. DESPZ. EN TABLA\n         LA        R5,@TBMES                <> TABLA DE MESES\n         AR        R5,R15                   <> DIRECCIONAR MES\n         PACK      @WORKD,@WGREGO+6(2)      <> EMPAQUETAR EL DIA\n         AP        @WORKD,2(2,R5)           <> SUMAR DIAS ANTERIORES\n         UNPK      @WJULIA+4(3),@WORKD+6(2) <> PASAR A PARAMETRO\n         OI        @WJULIA+6,X'F0'          <> SIGNO DE ZONA\nRTGJ99   BR        R10                      <> DEVOLVER CONTROL\n*\nRTJB00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>|    CONVERSION DE JULIANA A FECHA BASE   | RTJB     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   @WJULIA                                |\n*        +   RETORNA:  @WBASE                                 |\n*        +----------------------------------------------------+\n*        +   FECHABASE = DIA + ((146097 * (ANO-1)) / 400)     |\n*        +----------------------------------------------------+\n         PACK  @WORKF,@WJULIA(4)        <> CAPTURAR EL ANO\n         SP    @WORKF,=P'1'             <> RESTAR UNO\n         ZAP   @WORKD,@WORKF\n         MP    @WORKD,=P'365'           <> MULTIPL. POR CONSTANTE\n         ZAP   @ACUMUL,@WORKD           <> ACUMULADOR\n         ZAP   @WORKD,@WORKF\n         DP    @WORKD,=P'4'             <> DIVISION POR 4\n         AP    @ACUMUL,@WORKD(7)        <> ACUMULAR PARTE ENTERA\n         ZAP   @WORKD,@WORKF\n         DP    @WORKD,=P'400'           <> DIVISION POR 400\n         AP    @ACUMUL,@WORKD(6)        <> ACUMULAR PARTE ENTERA\n         ZAP   @WORKD,@WORKF\n         DP    @WORKD,=P'100'           <> DIVISION POR 100\n         SP    @ACUMUL,@WORKD(6)        <> RESTAR PARTE ENTERA\n         PACK  @WORKF,@WJULIA+4(3)      <> CAPTURAR LOS DIAS\n         AP    @ACUMUL,@WORKF           <> COCIENTE ANTER. + DIAS\n         UNPK  @WBASE,@ACUMUL           <> PASAR A FECHA BASE\n         OI    @WBASE+L'@WBASE-1,X'F0'  <> SIGNO\nRTJB99   BR        R10                  <> DEVOLVER CONTROL\n*\nRTBJ00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>|    CONVERSION DE FECHA BASE A JULIANA   | RTBJ     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   @WBASE                                 |\n*        +   RETORNA:  @WJULIA                                |\n*        +----------------------------------------------------+\n*        +   TECNICA UTILIZADA                                |\n*        +   * DIVIDIR FEBASE POR 366 OBTENIENDO UN ANO QUE   |\n*        +     SIEMPRE SERA MENOR QUE EL REAL                 |\n*        +   * CALCULAR LA FEBASE PARA ESE ANO                |\n*        +   * RESTAR DE FEBASE ORIGINAL LA CALCULADA         |\n*        +   * SI EL RESTO ES SUPERIOR A 365 (O 366 SI EL ANO |\n*        +     SIGUIENTE FUERA BISIESTO) AUMENTAR UNO AL ANO  |\n*        +     Y RECALCULAR DE NUEVO.                         |\n*        +   * CUANDO EL RESTO SEA MENOR A 365 (O 366) EL     |\n*        +     ANO SERA EL SIGUIENTE AL QUE HEMOS UTILIZADO   |\n*        +     EN LA ULTIMA BASE Y LOS DIAS EL RESTO.         |\n*        +----------------------------------------------------+\n         PACK      @WORKD,@WBASE            <> CAPTURAR FEBASE\n         DP        @WORKD,=P'366'           <> OBTENER ANO BASE CALCULO\n         ZAP       @WORKANO,@WORKD(6)\n*\nRTBJ10   DS        0H\n         ZAP       @WORKD,@WORKANO\n         MP        @WORKD,=P'365'           <> MULTIPL. POR CONSTANTE\n         ZAP       @ACUMUL,@WORKD           <> ACUMULADOR\n         ZAP       @WORKD,@WORKANO\n         DP        @WORKD,=P'4'             <> DIVISION POR 4\n         AP        @ACUMUL,@WORKD(7)        <> ACUMULAR PARTE ENTERA\n         ZAP       @WORKD,@WORKANO\n         DP        @WORKD,=P'400'           <> DIVISION POR 400\n         AP        @ACUMUL,@WORKD(6)        <> ACUMULAR PARTE ENTERA\n         ZAP       @WORKD,@WORKANO\n         DP        @WORKD,=P'100'           <> DIVISION POR 100\n         SP        @ACUMUL,@WORKD(6)        <> RESTAR PARTE ENTERA\n         PACK      @WORKD,@WBASE\n         SP        @WORKD,@ACUMUL\n         ZAP       @WORKF,@WORKANO\n         AP        @WORKF,=P'1'\n         MVO       @WBAAAA(3),@WORKF+1(3)\n         BAS       R8,RTBI00           <> CALCULO DE BISIESTO\n         CP        @WORKD,@DIASANO          <> DIAS ANO SIGUIENTE\n         BNH       RTBJ20                   <> ANO DETECTADO\n         AP        @WORKANO,=P'1'           <> CALCULO ANO SIGUIENTE\n         B         RTBJ10                   <> REPETIMOS BUCLE\n*\nRTBJ20   DS        0H\n         AP        @WORKANO,=P'1'           <> ANO SIGUIENTE\n         UNPK      @WJULIA(4),@WORKANO\n         OI        @WJULIA+3,X'F0'          <> SIGNO\n         UNPK      @WJULIA+4(3),@WORKD      <> DIAS DE DIREFERENCIA\n         OI        @WJULIA+6,X'F0'          <> SIGNO\n         CP        @WORKD,=P'0'                DIFERENCIA CERO ?\n         BNE       RTBJ99\n         UNPK      @WJULIA+4(3),@DIASANO\n         OI        @WJULIA+6,X'F0'\n*\nRTBJ99   BR        R10                      <> DEVOLVER CONTROL\n*\nRTAG00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>|    CONVERSION ASTRONOMICA A GREGORIANA  | RTAG     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   @WASTRO                                |\n*        +   RETORNA:  @WGREGO                                |\n*        +-----------------------------------------+----------+\n*\n         PACK      @WORKDA,@WASTRO(7)  <> FECHA DE PARTIDA\n*\n* ATENCION LIMITES ORIGINALES ENTRE 2305814 O 2962884\n*\n         MP        @WORKDA,=P'4'       <> MULTIPLICAR POR 4\n         SP        @WORKDA,=P'6884477' <> RESTAR 6,884,477\n*\n         ZAP       @WORKDY,@WORKDA     <> TOMAR RESULTADO\n         DP        @WORKDY,=P'146097'  <> DIVIDIR POR 146,097\n         ZAP       @WORKDD,@WORKDY+4(4) > GUARDAR RESTO\n         ZAP       @WORKDY,@WORKDY(4)  <> DESPLAZAR EL COCIENTE\n         MP        @WORKDY,=P'100'     <> MULTIPLICAR POR 100\n*\n         DP        @WORKDD,=P'4'       <> DIVIDIR POR 4\n         ZAP       @WORKDD,@WORKDD(7)  <> DESPLAZAR COCIENTE\n*\n         ZAP       @WORKDA,@WORKDD     <> TOMAR RESULTADO\n         MP        @WORKDA,=P'4'       <> MULTIPLICAR POR CUATRO\n         AP        @WORKDA,=P'3'       <> SUMAR 3\n*\n         ZAP       @WORKDX,@WORKDA\n         DP        @WORKDX,=P'1461'\n         ZAP       @WORKDD,@WORKDX+5(3)\n         ZAP       @WORKDX,@WORKDX(5)\n         AP        @WORKDY,@WORKDX\n*\n         DP        @WORKDD,=P'4'\n         ZAP       @WORKDD,@WORKDD(7)\n         AP        @WORKDD,=P'1'\n*\n         ZAP       @WORKDA,@WORKDD\n         MP        @WORKDA,=P'5'\n         SP        @WORKDA,=P'3'\n*\n         ZAP       @WORKDM,@WORKDA\n         DP        @WORKDM,=P'153'\n         ZAP       @WORKDD,@WORKDM+6(2)\n         ZAP       @WORKDM,@WORKDM(6)\n         AP        @WORKDM,=P'1'\n*\n         DP        @WORKDD,=P'5'\n         ZAP       @WORKDD,@WORKDD(7)\n         AP        @WORKDD,=P'1'\n*\n         ZAP       @WGMES,@WORKDM      <> TRUNCAR EL MES\n         CP        @WGMES,=P'11'       <> MES MENOR QUE 11 ?    ?\n         BL        RTAG10              <> SI, SALTAMOS\n         SP        @WGMES,=P'10'           SUBTRACT 10\n         B         RTAG20                  CONTINUE\nRTAG10   DS        0H\n         AP        @WGMES,=P'2'        <> SUMAR 2 AL MES\nRTAG20   DS        0H\n         ZAP       @WGDIA,@WORKDD      <> TRUNCAR EL DIA\n         DP        @WORKDM,=P'11'      <> DIVIDIR POR 11\n         ZAP       @WGANO,@WORKDM(6)   <> COCIENTE\n         AP        @WGANO,@WORKDY      <> ANO FINAL\n*\n         UNPK      @WGREGO+4(2),@WGMES        UNPACK MONTH\n         OI        @WGREGO+5,X'F0'       CLEAR SIGN\n         UNPK      @WGREGO+6(2),@WGDIA     UNPACK DAY\n         OI        @WGREGO+7,X'F0'    CLEAR SIGN\n         UNPK      @WGREGO(4),@WGANO       UNPACK YEAR\n         OI        @WGREGO+3,X'F0'      CLEAR SIGN\n*\nRTAG99   BR        R10\n*\nRTGA00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>|    CONVERSION DE GREGORIANA A ATRONOMICA| RTGA     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   @WGREGO                                |\n*        +   RETORNA:  @WASTRO                                |\n*        +----------------------------------------------------+\n         PACK      @WGANO,@WGREGO(4)   <> ANO DE GREGORIA PACKED\n         PACK      @WGMES,@WGREGO+4(2) <> MES DE GREGORIANA PACKED\n         PACK      @WGDIA,@WGREGO+6(2) <> DIA DE GREGORIANA PACKED\n         CP        @WGMES(2),=P'2'     <> MES SUPERIOR A 2?\n         BH        RTGA10              <> SI, SALTAMOS\n*\n         AP        @WGMES(2),=P'9'     <> SUMAR 9 AL MES\n         SP        @WGANO(4),=P'1'     <> RES@WORKDAR UNO AL ANO\n         B         RTGA20              <> CONITNUAR CONVERSION\n*\nRTGA10   DS        0H\n         SP        @WGMES(2),=P'3'     <> RES@WORKDAR 3 AL MES\n*\nRTGA20   DP        @WGANO,=P'100'      <> DIVIDIR POR 100\n         ZAP       @WORKDA,@WGANO(2)   <> SALVAR COCIENTE EN @WORKDA\n         ZAP       @WORKDB,@WGANO+2(2) <> SALVAR RESTO EN @WORKDB\n         MP        @WORKDA,=P'146097'  <> MULTIPLICAR POR 146097\n         DP        @WORKDA,=P'4'       <> DIVIDIR POR 4\n         ZAP       @WORKDA,@WORKDA(7)  <> DESPLAZAR COCIENTE S/RESTO\n*                                      <>\n         MP        @WORKDB,=P'1461'    <> MULTIPLICAR POR 1461\n         DP        @WORKDB,=P'4'       <> DIVIDIR POR 4\n         ZAP       @WORKDB,@WORKDB(7)  <> DESPLAZAR COCIENTE SOBR RESTO\n*                                      <>\n         ZAP       @WORKDC,@WGMES      <>\n         MP        @WORKDC,=P'153'     <> MULTIPLICAR POR 153\n         AP        @WORKDC,=P'2'       <> SUMAR 2\n         DP        @WORKDC,=P'5'       <> DIVIDIR POR CINCO\n         ZAP       @WORKDC,@WORKDC(7)  <> DESPLAZAR COCIENTE S/ RESTO\n         AP        @WORKDC,@WGDIA      <> SUMAR EL DIA\n         AP        @WORKDC,=P'1721119' <> SUMAR 1721119\n*                                      <>\n         ZAP       @WORKDX,@WORKDA     <> COMBINAR LAS RESPUESTAS\n         AP        @WORKDX,@WORKDB     <>\n         AP        @WORKDX,@WORKDC     <>\n*                                      <>\n         UNPK      @WASTRO(7),@WORKDX+4(4) <> UNPACK ANUM\n         OI        @WASTRO+6,X'F0'     <> CLEAR SIGN\n*                                      <>\nRTGA99   BR        R10\n*\n*\nRTVG00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>| VERIFICACION DE FECHA GREGORIANA        | RTGREOK  |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   AREA @WGREGO                           |\n*        +   RETORNA:  SI CORRECTA: POR R10                   |\n*        +             SI INCORRECTA: -2 Y FIN DE EJECUCION   |\n*        +----------------------------------------------------+\n         MVC       @WORK15(L'@WGREGO),@WGREGO\n         TR        @WORK15(L'@WGREGO),TBTRNUM\n         CLC       @WORK15(L'@WGREGO),@WGREGO\n         BNE       PERR02\n         CLC       @WGREGO+4(2),=C'01'\n         BL        PERR02\n         CLC       @WGREGO+4(2),=C'12'\n         BH        PERR02\n*\n         CLI       @WBISI,X'EE'        <> YA SE CALCULO EL BISIESTO?\n         BNE       *+4+6+4             <> SI SALTAMOS\n         PACK      @WBAAAA(3),@WGREGO(5)\n         BAS       R8,RTBI00           <> CALCULAR BISIESTO\n*\n         PACK      @WORKD,@WGREGO+4(2) <> PACK EL MES\n         CVB       R1,@WORKD\n         BCTR      R1,R0               <> MES MENOS UNO\n         MH        R1,TBMESLGE\n         LA        R15,@TBMES\n         AR        R15,R1              <> DIAS DEL MES\n         PACK      @WORKF,@WGREGO+6(2)\n         CP        @WORKF,=P'1'\n         BL        PERR02\n         CP        @WORKF,0(2,R15)     <> DIAS MAXIMOS DEL MES\n         BH        PERR02              <> ERROR Y DEVOLUCION\n*\nRTVG99   BR        R10                 <> DEVOLUCION DE CONTROL\n*\nRTVJ00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>| VERIFICACION DE FECHA JULIANA           | RTVJ     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   AREA @WJULIA                           |\n*        +   RETORNA:  SI CORRECTA: POR R10                   |\n*        +             SI INCORRECTA: CR. -2 Y FIN MODULO     |\n*        +----------------------------------------------------+\n         MVC       @WORK15(L'@WJULIA),@WJULIA\n         TR        @WORK15(L'@WJULIA),TBTRNUM\n         CLC       @WORK15(L'@WJULIA),@WJULIA\n         BNE       PERR02\n*\n         CLI       @WBISI,X'EE'        <> YA SE CALCULO EL BISIESTO?\n         BNE       *+4+6+4             <> SI SALTAMOS\n         PACK      @WBAAAA(3),@WJULIA(5)\n         BAS       R8,RTBI00           <> CALCULAR BISIESTO\n*\n         PACK      @WORKF,@WJULIA+4(3) <> OBTENER DIAS\n         CP        @WORKF,=P'1'\n         BL        PERR02\n         CP        @WORKF,@DIASANO     <> COMPARAR DIAS MAXIMOS\n         BH        PERR02\n*\nRTVJ99   BR        R10\n*\nRTFA00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>| OBTENCION DE LA FECHA/HORA ACTUAL       | RTBI     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R10                                    |\n*        +   RECIBE:   NADA                                   |\n*        +   RETORNA:  VALORES ACTUALIZADOS @??ACT            |\n*        +----------------------------------------------------+\n         MVC       @TIME(TIMEL),TIME\n         TIME      DEC,@TIMEDAT,LINKAGE=SYSTEM,MF=(E,@TIME),           X\n               DATETYPE=YYYYMMDD\n*\n         UNPK      @WHACT(9),@TIMEDAT(5)         <> HORA ACTUAL\n         UNPK      @WFACT(9),@TIMEDAT+8(5)       <> FECHA ACTUAL GREGO\n         MVC       @CENTURY,@WFACT               <> CENTURIA ACTUAL\nRTFA99   BR        R10                 <> DEVOLUCION DE CONTROL\n*\nRTBI00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>| DETECCION DE ANO BISIESTO               | RTBI     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        +   ENLACE:   R8                                     |\n*        +   RECIBE:   AREA @WBAAAA RELLENA                   |\n*        +   RETORNA:  VALORES ACTUALIZADOS DEL ANO EN @TBMES |\n*        +             DIAS DEL ANO EN @DIASANO               |\n*        +             INDICADOR DE SI/NO EN @WBISI           |\n*        +----------------------------------------------------+\n         MVI       @WBISI,C'N'              <> INICIAR COMO NO BISIESTO\n         ZAP       @DIASANO,=P'365'         <> POR DEFECTO 365 DIAS\n         MVC       @TBMES(TBMESESL),TBMESES <> COPIA TABLA VALOR MESES\n         TM        @WBAAAA+1,X'01'          <> ES ANO IMPAR\n         BO        RTBI99                   <> SI, NO ES BISIESTO\n         TM        @WBAAAA+1,X'12'          <> ES DIVISIBLE POR CUATRO\n         BM        RTBI99                   <> NO, NO ES BISIESTO\n         CLI       @WBAAAA+1,X'00'          <> ACABADO EN '00'\n         BNE       RTBI10                   <> NO, ANO BISIESTO\n         TM        @WBAAAA,X'01'            <> CENTENA IMPAR ?\n         BO        RTBI99                   <> SI, NO ES BISIESTO\n         TM        @WBAAAA,X'12'            <> DIVISIBLE POR CUATROCI.\n         BM        RTBI99                   <> NO, DEVOLVER CONTROL\n*\nRTBI10   DS        0H\n         MVI       @WBISI,C'S'              <> INDICAR BISIESTO\n         ZAP       @DIASANO,=P'366'         <> ES BISIESTO, 366 DIAS\n         LA        R15,@TBMES               <> DIRECCIONAR\n         AH        R15,TBMESLGE             <> AL MES DE FEBRERO\n         MVC       0(2,R15),=PL2'29'        <> ACTUALIZAR FEBRERO\n         AH        R15,TBMESLGE             <> DIRECC. DIAS MARZO\n         LA        R1,0\n         LA        R1,10                    <> 10 MESES A TRATAR\nRTBI20   DS        0H\n         AP        2(2,R15),=P'1'           <> SUMAR UNO\n         AH        R15,TBMESLGE             <> AVANZAR LA TABLA\n         BCT       R1,RTBI20                <> REPETIR BUCLE\n*\nRTBI99   BR        R8                       <> DEVOLVER CONTROL\n*\nRTDS00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>| OBTENCION DEL DIA DE LA SEMANA          | RTDS     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        |   ENLACE:   R10                                    |\n*        |   RECIBE:   @WBASE                                 |\n*        |   RETORNA:  @DIASEMN                               |\n*        +----------------------------------------------------+\n         PACK      @WORKD,@WBASE            <> CAPTURAR FECHA BASE\n         DP        @WORKD,=P'7'             <> DIVIDIR POR SIETE\n         UNPK      @WDIASEN,@WORKD+7(1)\n         OI        @WDIASEN,X'F0'           <> DIA SEMANA NUMERICO\nRTDS99   BR        R10\n*\nRTLO00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>| OBTENCION FECHA-HORA GMT Y OFFSET LOCAL | RTLO     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        |   ENLACE:   R10                                    |\n*        |   RECIBE:   NADA                                   |\n*        |   RETORNA:  @WLOFFSE                               |\n*        |             @FMTSTAM                               |\n*        |             @TIMEGMT                               |\n*        +----------------------------------------------------+\n         MVC       @TIME(TIMEL),TIME\n         TIME      DEC,@TIMEGMT,LINKAGE=SYSTEM,MF=(E,@TIME),           X\n               DATETYPE=YYYYMMDD,ZONE=GMT\n*\n         UNPK      @GMTSTAM(9),@TIMEGMT+8(5)     <> FECHA GMT AAAAMMDD\n         UNPK      @WORK15(13),@TIMEGMT(7)\n         MVC       @GMTSTAM+8(12),@WORK15\n*\n         MVI       @WLOFFSE,C'E'\n         MVI       @WLOFFSE+1,C'0'\n         MVC       @WLOFFSE+1(L'@WLOFFSE-1),CEROS\n*\n         L         R4,CVTPTR           <> CVT ADDRESS\n         USING     CVT,R4\n         L         R4,CVTEXT2          <> CVT EXTENSION-2\n         USING     CVTXTNT2,R4\n*\n         MVI       @WLOFFSE,C'W'       <> ESTABLECEMOS ZONA WEST\n*\n         ICM       R7,B'1111',CVTLDTOL <>  DIFF. LOCAL AND GMT\n         JZ        RTLO10              <>  IS IT ZERO ?\n         JM        *+4+4               <>  NEGATIVE DIFFERENCE\n         MVI       @WLOFFSE,C'E'       <>  POSITIVE EAST\n         LG        R1,CVTLDTO          <>  PASS TOD CLOCK VALUE\n         LPGR      R1,R1               <>  NO SIGN\n         STG       R1,@WORKD\n*\n         MVC       @STCKC(MSTCKCL),MSTCKC\n         STCKCONV STCKVAL=@WORKD,CONVVAL=@TIMEOFF,                     X\n               TIMETYPE=DEC,DATETYPE=YYYYMMDD,MF=(E,@STCKC)\n*\n         UNPK      @WORK15(13),@TIMEOFF(7)\n         MVC       @WLOFFSE+1(6),@WORK15\nRTLO10   DS        0H\n         DROP      R4\n*\nRTLO99   BR        R10\n*\nRTFR00   DS        0H\n*        +-----------------------------------------+----------+\n*>>>>>>>>|  OBTENCION FECHAS RELIGIOSAS            | RTFR     |<<<<<<<<\n*        +-----------------------------------------+----------+\n*        |   ENLACE:   R9                                     |\n*        |   RECIBE:   @WANO                                  |\n*        |   RETORNA:  FECHAS EN AREAS DEL PARAMETRO          |\n*        +----------------------------------------------------+\n*        |                                                    |\n*        |   ANOS VALIDOS ENTRE 1601 Y 3399 INCLUSIVE         |\n*        |                                                    |\n*        |   BASADA EN UNA CODFICACION DE JAY MOSELEY         |\n*        |                                                    |\n*        +----------------------------------------------------+\n*\n*        PASO 1: COMPUTE CENTURY NUMBER + 1.\n*\n         PACK      @CENTPAK,@WANO(2)\n         AP        @CENTPAK,=P'1'\n*\n*        PASO 2: COMPUTE NON-LEAP-YEAR CENTESIMALS.\n*\n         PACK      @WKP5,@WANO         <> AMPLIAR ANO\n         SP        @WKP5,=P'1600'      <> RESTAR 1600\n         DP        @WKP5,=P'400'       <> DIVIDIR POR 400\n         ZAP       @WKT2,@WKP5+1(2)    <> TOMAR EL COCIENTE\n         MP        @WKT2,=P'3'         <> MULTIPLICARLO POR TRES\n         ZAP       @WKP5,@WKP5+3(2)    <> COGER EL RESTO\n         DP        @WKP5,=P'100'       <> DIVIDIR POR 100\n         ZAP       @WKT3,@WKP5+2(1)    <> GUARDAR EL COCIENTE\n         ZAP       @WKNONL,@WKT2       <> COMBINAR LOS\n         AP        @WKNONL,@WKT3       <>              DOS VALORES\n*\n*        PASO 3: COMPUTE YEAR'S POSITION IN METONIC CYCLE.\n*\n         PACK      @WKP5,@WANO         <> EXPANDIR EL ANO\n         DP        @WKP5,=P'19'        <> DIVIDIR POR 19\n         AP        @WKP5+3(2),=P'1'    <> SUMAR UNO AL RESTO\n         ZAP       @WKMET,@WKP5+3(2)   <> GUARDAR RESPUESTA\n*\n*        PASO 4: COMPUTE CORRECTION FOR METONIC CYCLE.\n*\n         ZAP       @WKP5,@CENTPAK      <> EXPANDIR CENTURIA\n         MP        @WKP5,=P'8'         <> MULTIPLICAR POR 8\n         AP        @WKP5,=P'5'         <> SUMAR 5\n         DP        @WKP5,=P'25'        <> DIVIDIR POR 25\n         SP        @WKP5(3),=P'5'      <> RESTAR 5\n         SP        @WKP5(3),@WKNONL    <> RESTAR VALOR GUARDADO\n         ZAP       @WKMETC,@WKP5+1(2)  <> GUARDAR RESOUESTA\n*\n*\n*        PASO 5: COMPUTE DAY COUNT MODIFIER.\n*\n         PACK      @WKP5,@WANO         <> EXPANDIR EL ANO\n         MP        @WKP5,=P'5'         <> MULTIPLICAR POR CINCO\n         DP        @WKP5,=P'4'         <> DIVIDIR POR CUATRO\n         SP        @WKP5(4),@WKNONL    <> RESTAR VALOR ANTERIOR\n         SP        @WKP5(4),=P'10'     <> RESTAR 10\n         ZAP       @WKDMOD,@WKP5+1(3)  <> GUARDAR RESPUESTA\n*\n*        PASO 6: COMPUTE THE EPACT.\n*\n         ZAP       @WKP5,@WKMET        <> TOMAR METONIC\n         MP        @WKP5,=P'11'        <> MULTIPLICAR POR ONCE\n         AP        @WKP5,=P'20'        <> SUMAR 20\n         AP        @WKP5,@WKMETC       <> SUMAR CORRECION METONICA\n         DP        @WKP5,=P'30'        <> DIVIDIR POR 30\n         ZAP       @WKEPACT,@WKP5+3(2) <> GUARDAR RESPUESTA\n*\n*        PASO 7: DETERMINE THE EPACT VALUE.\n*\n         CP        @WKEPACT,=P'25'     <> ES EPACT 25?\n         BNE       RTFREADJ            <> NO\n*\n*        PASO 8: DETERMINE METONIC CYCLE POSITION FOR EPACT ADJUST.\n*\n         CP        @WKMET,=P'11'       <> ES CICLO METONICO 11?\n         BNH       RTFREADJ            <> NO\n         AP        @WKEPACT,=P'1'      <> SUMAR 1 A EPACT\n*\n*        PASO 9: DETERMINE THE EPACT VALUE FOR ADJUSTMENT.\n*\nRTFREADJ CP        @WKEPACT,=P'24'     <> ES EPACT 24?\n         BNE       RTFRDAYV            <> NO\n         AP        @WKEPACT,=P'1'      <> SUMAR UNO A EPACT\n*\n*        PASO 10: COMPUTE VALUE OF DAY.\n*\nRTFRDAYV ZAP       @WKDAY,=P'44'       <> INIT DIA COMO 44\n         SP        @WKDAY,@WKEPACT     <> RESTAR EPACT\n*\n*        PASO 11: DETERMINE DAY VALUE FOR ADJUSTMENT.\n*\n         CP        @WKDAY,=P'21'       <> ES EL DIA 21 O MAYOR?\n         BNL       RTFRCAND            <> SI\n         AP        @WKDAY,=P'30'       <> SUMAR 30 DIAS\n*        -----------------------------------------\n*        PASO 12: FIND MODIFIED DAY VALUE.\n*        -----------------------------------------\nRTFRCAND ZAP       @WKP4,@WKDAY        <> EXPANDIR EL DIA\n         AP        @WKP4,=P'7'         <> SUMAR 7\n         ZAP       @WKP5,@WKDAY        <> EXPANDIR EL DIA\n         AP        @WKP5,@WKDMOD       <> ANADIR DMOD\n         DP        @WKP5,=P'7'         <> DIVIDIR POR SIETE\n         SP        @WKP4,@WKP5+4(1)    <> RESTAR RESTO ANTERIOR\n         ZAP       @WKDAY,@WKP4+2(2)   <> SALVAR RESPUESTA\n*        -----------------------------------------\n*        PASO 13: FIND EXACT DATE:\n*                  IF DAY LESS THAN/EQUAL 31\n*                   THEN EASTER IS 03/DAY/YR\n*                   ELSE EASTER IS 04/(DAY - 31)/YR.\n*        -----------------------------------------\n         MVC       @WEASTER(2),=C'03'  <> PREASUMIR ES MARZO\n         CP        @WKDAY,=P'31'       <> DIA MAYOR QUE 31?\n         BNH       RTFR10              <> NO\n         MVC       @WEASTER(2),=C'04'  <> ENTONCES MES=ABRIL\n         SP        @WKDAY,=P'31'       <> AJUSTAR EL DIA\nRTFR10   UNPK      @WKZ3,@WKDAY        <> DESEMPAQUETAR EL DIA\n         OI        @WKZ3+2,X'F0'       <> LIMPIEZA DE SIGNO\n         MVC       @WEASTER+2(2),@WKZ3+1\n         MVC       @WEASTER+4(4),@WANO\n*\n         MVC       $RESURRE+0(4),@WEASTER+4      <> RESURRECCION\n         MVC       $RESURRE+4(2),@WEASTER+0\n         MVC       $RESURRE+6(2),@WEASTER+2\n*\n         MVC       @WGREGO,$RESURRE\n         BAS       R10,RTGJ00\n         BAS       R10,RTJB00          <> FECHA BASE RESURRECCION\n         PACK      @WBASRES,@WBASE     <> GUARDAR FECHA REFERENCIA\n*\n         ZAP       @WKP5,@WBASRES      <> FECHA DE REFERENCIA\n         SP        @WKP5,=P'46'        <> MIERCOLES DE CENIZA\n         UNPK      @WBASE(7),@WKP5\n         OI        @WBASE+L'@WBASE-1,X'F0'\n         BAS       R10,RTBJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJG00          <> CONVERTIR A GREGORIANA\n         MVC       $MICENIZ,@WGREGO\n*\n         ZAP       @WKP5,@WBASRES      <> FECHA DE REFERENCIA\n         SP        @WKP5,=P'2'         <> VIERNES SANTO\n         UNPK      @WBASE(7),@WKP5\n         OI        @WBASE+L'@WBASE-1,X'F0'\n         BAS       R10,RTBJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJG00          <> CONVERTIR A GREGORIANA\n         MVC       $VIERNST,@WGREGO\n*\n         ZAP       @WKP5,@WBASRES      <> FECHA DE REFERENCIA\n         AP        @WKP5,=P'39'        <> ASCENSION\n         UNPK      @WBASE(7),@WKP5\n         OI        @WBASE+L'@WBASE-1,X'F0'\n         BAS       R10,RTBJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJG00          <> CONVERTIR A GREGORIANA\n         MVC       $ASCENSI,@WGREGO\n*\n         ZAP       @WKP5,@WBASRES      <> FECHA DE REFERENCIA\n         AP        @WKP5,=P'49'        <> PENTECOSTES\n         UNPK      @WBASE(7),@WKP5\n         OI        @WBASE+L'@WBASE-1,X'F0'\n         BAS       R10,RTBJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJG00          <> CONVERTIR A GREGORIANA\n         MVC       $PENTECO,@WGREGO\n*\n         ZAP       @WKP5,@WBASRES      <> FECHA DE REFERENCIA\n         AP        @WKP5,=P'60'        <> CORPUS CHRISTI\n         UNPK      @WBASE(7),@WKP5\n         OI        @WBASE+L'@WBASE-1,X'F0'\n         BAS       R10,RTBJ00          <> CONVERTIR A JULIANA\n         BAS       R10,RTJG00          <> CONVERTIR A GREGORIANA\n         MVC       $CORPUSC,@WGREGO\n*\nRTFR99   BR        R9                       <> DEVOLVER CONTROL\n*        +--------------------------------+\n*>>>>>>>>| RESERVA DE AREAS ESTATICAS     |\n*        +--------------------------------+\n* ---------    VARIABLE CUSTOMIZABLE PARA CADA INSTALACION -----------\n*\nSETLOCAL DC    CL7'E010000'            <> VER COMENTARIO PRINCIPIO PGM\n*\n* ---------    VARIABLE CUSTOMIZABLE PARA CADA INSTALACION -----------\n         DS    0F\nKH0      DC    H'0'\nKH4      DC    H'4'\nKP0      DC    PL1'0'\nKP1      DC    PL1'1'\nKP60     DC    P'60'\nKP3600   DC    P'3600'\nKPMHZ    DC    P'1048576'\nKMNPARM  DC    H'12' <> MAX. NUM, PARAM.\nKVERFEC1 DC    CL4'0331'\nKVERHOR1 DC    CL4'0200'\nKVERFEC2 DC    CL4'1031'\nKVERHOR2 DC    CL4'0300'\nKVERCAMB DC    CL4'0200'               <> HORA COMIENZO HOR.INVIERNO\n*\nBLANCOS  DC    CL40' '\nCEROS    DC    CL8'00000000'\n*\nTIME     TIME  LINKAGE=SYSTEM,MF=L\nTIMEL    EQU       *-TIME\n*\nMSTCKC   STCKCONV  MF=L\nMSTCKCL  EQU       *-MSTCKC\n*\nMCONVT   CONVTOD   MF=L\nMCONVTL  EQU       *-MCONVT\n*\nTBTRNUM  DC    X'00000000000000000000000000000000' 0\n         DC    X'00000000000000000000000000000000' 1\n         DC    X'00000000000000000000000000000000' 2\n         DC    X'00000000000000000000000000000000' 3\n         DC    X'00000000000000000000000000000000' 4\n         DC    X'00000000000000000000000000000000' 5\n         DC    X'00000000000000000000000000000000' 6\n         DC    X'00000000000000000000000000000000' 7\n         DC    X'00000000000000000000000000000000' 8\n         DC    X'00000000000000000000000000000000' 9\n         DC    X'00000000000000000000000000000000' A\n         DC    X'00000000000000000000000000000000' B\n         DC    X'00000000000000000000000000000000' C\n         DC    X'00000000000000000000000000000000' D\n         DC    X'00000000000000000000000000000000' E\n         DC    X'F0F1F2F3F4F5F6F7F8F9000000000000' F\n*\nTBMESLGE DC        H'4'                <> LONG. CADA ELEMENTO TABLA\nTBMESES  EQU       *\n         DC        PL2'31',PL2'000'    <> ENE\n         DC        PL2'28',PL2'031'    <> FEB\n         DC        PL2'31',PL2'059'    <> MAR\n         DC        PL2'30',PL2'090'    <> ABR\n         DC        PL2'31',PL2'120'    <> MAY\n         DC        PL2'30',PL2'151'    <> JUN\n         DC        PL2'31',PL2'181'    <> JUL\n         DC        PL2'31',PL2'212'    <> AGO\n         DC        PL2'30',PL2'243'    <> SEP\n         DC        PL2'31',PL2'273'    <> OCT\n         DC        PL2'30',PL2'304'    <> NOV\n         DC        PL2'31',PL2'334'    <> DIC\nTBMESESL EQU       *-TBMESES\n*\n         LTORG\n*\nTBIDIOMA DS    0F\n         DC    CL4'    ',A(TBI341)     <> SI NO EXPLICITO\n         DC    CL4'341 ',A(TBI341)     <> CASTELLANO\n         DC    CL4'343 ',A(TBI343)  ------CATALAN------- FALTA\n         DC    CL4'346 ',A(TBI346)  ------VASCO--------- FALTA\n         DC    CL4'3481',A(TBI3481) ------GALLEGO------- FALTA\n         DC    CL4'33  ',A(TBI33)      <> FRANCES\n         DC    CL4'351 ',A(TBI351)  ------PORTUGUES----- FALTA\n         DC    CL4'39  ',A(TBI39)      <> ITALIANO\n         DC    CL4'44  ',A(TBI44)      <> INGLES\n         DC    CL4'49  ',A(TBI49)      <> ALEMAN\n         DC    CL4'****',A(TBI341)     <> CASTELLANO ES EL DEFECTO\n*\n*  TBI341 -->  CASTELLANO\n*\nTBI341   DS    0F\n         DC    A(TBI341D)\n         DC    A(TBI341S)\n         DC    A(TBI341C)\n         DC    A(TBI341M)\nTBI341D  DC    H'13'\n         DC    CL13'UNO'\n         DC    CL13'DOS'\n         DC    CL13'TRES'\n         DC    CL13'CUATRO'\n         DC    CL13'CINCO'\n         DC    CL13'SEIS'\n         DC    CL13'SIETE'\n         DC    CL13'OCHO'\n         DC    CL13'NUEVE'\n         DC    CL13'DIEZ'\n         DC    CL13'ONCE'\n         DC    CL13'DOCE'\n         DC    CL13'TRECE'\n         DC    CL13'CATORCE'\n         DC    CL13'QUINCE'\n         DC    CL13'DIECISEIS'\n         DC    CL13'DIECISIETE'\n         DC    CL13'DIECIOCHO'\n         DC    CL13'DIECINUEVE'\n         DC    CL13'VEINTE'\n         DC    CL13'VEINTIUNO'\n         DC    CL13'VEINTIDOS'\n         DC    CL13'VEINTITRES'\n         DC    CL13'VEINTICUATRO'\n         DC    CL13'VEINTICINCO'\n         DC    CL13'VEINTISEIS'\n         DC    CL13'VEINTISIETE'\n         DC    CL13'VEINTIOCHO'\n         DC    CL13'VEINTINUEVE'\n         DC    CL13'TREINTA'\n         DC    CL13'TREINTA Y UNO'\nTBI341S  DC    H'09'\n         DC    CL09'DOMINGO'\n         DC    CL09'LUNES'\n         DC    CL09'MARTES'\n         DC    CL09'MIERCOLES'\n         DC    CL09'JUEVES'\n         DC    CL09'VIERNES'\n         DC    CL09'SABADO'\nTBI341C  DC    H'03'\n         DC    CL03'ENE'\n         DC    CL03'FEB'\n         DC    CL03'MAR'\n         DC    CL03'ABR'\n         DC    CL03'MAY'\n         DC    CL03'JUN'\n         DC    CL03'JUL'\n         DC    CL03'AGO'\n         DC    CL03'SEP'\n         DC    CL03'OCT'\n         DC    CL03'NOV'\n         DC    CL03'DIC'\nTBI341M  DC    H'10'\n         DC    CL10'ENERO'\n         DC    CL10'FEBRERO'\n         DC    CL10'MARZO'\n         DC    CL10'ABRIL'\n         DC    CL10'MAYO'\n         DC    CL10'JUNIO'\n         DC    CL10'JULIO'\n         DC    CL10'AGOSTO'\n         DC    CL10'SEPTIEMBRE'\n         DC    CL10'OCTUBRE'\n         DC    CL10'NOVIEMBRE'\n         DC    CL10'DICIEMBRE'\n*\n*  TBI343 -->  CATALAN\n*\nTBI343   DS    0F\n         DC    A(TBI343D)\n         DC    A(TBI343S)\n         DC    A(TBI343C)\n         DC    A(TBI343M)\nTBI343D  DC    H'13'\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\n         DC    CL13'...'            >> CATALAN <<\nTBI343S  DC    H'09'                >> CATALAN <<\n         DC    CL09'DIUMENGE'       >> CATALAN <<\n         DC    CL09'DILLUNS'        >> CATALAN <<\n         DC    CL09'DIMARTS'        >> CATALAN <<\n         DC    CL09'DIMECRES'       >> CATALAN <<\n         DC    CL09'DIJOUS'         >> CATALAN <<\n         DC    CL09'DIVENDRES'      >> CATALAN <<\n         DC    CL09'DISSABTE'       >> CATALAN <<\nTBI343C  DC    H'03'                >> CATALAN <<\n         DC    CL03'GEN'            >> CATALAN <<\n         DC    CL03'FEB'            >> CATALAN <<\n         DC    CL03'MAR'            >> CATALAN <<\n         DC    CL03'ABR'            >> CATALAN <<\n         DC    CL03'MAI'            >> CATALAN <<\n         DC    CL03'JUN'            >> CATALAN <<\n         DC    CL03'JUL'            >> CATALAN <<\n         DC    CL03'AGO'            >> CATALAN <<\n         DC    CL03'SET'            >> CATALAN <<\n         DC    CL03'OCT'            >> CATALAN <<\n         DC    CL03'NOV'            >> CATALAN <<\n         DC    CL03'DES'            >> CATALAN <<\nTBI343M  DC    H'08'                >> CATALAN <<\n         DC    CL08'GENER'          >> CATALAN <<\n         DC    CL08'FEBRER'         >> CATALAN <<\n         DC    CL08'MAR'            >> CATALAN <<\n         DC    CL08'ABRIL'          >> CATALAN <<\n         DC    CL08'MAIG'           >> CATALAN <<\n         DC    CL08'JUNY'           >> CATALAN <<\n         DC    CL08'JULIOL'         >> CATALAN <<\n         DC    CL08'AGOST'          >> CATALAN <<\n         DC    CL08'SETEMBRE'       >> CATALAN <<\n         DC    CL08'OCTUBRE'        >> CATALAN <<\n         DC    CL08'NOVEMBRE'       >> CATALAN <<\n         DC    CL08'DESEMBRE'       >> CATALAN <<\n*\n*  TBI346 -->  VASCO\n*\nTBI346   DS    0F\n         DC    A(TBI346D)\n         DC    A(TBI346S)\n         DC    A(TBI346C)\n         DC    A(TBI346M)\nTBI346D  DC    H'17'\n         DC    CL17'BAT'            >> VASCO <<\n         DC    CL17'BI'             >> VASCO <<\n         DC    CL17'HIRU'           >> VASCO <<\n         DC    CL17'LAU'            >> VASCO <<\n         DC    CL17'BOST'           >> VASCO <<\n         DC    CL17'SEI'            >> VASCO <<\n         DC    CL17'ZAZPI'          >> VASCO <<\n         DC    CL17'ZORTZI'         >> VASCO <<\n         DC    CL17'BEDERATZI'      >> VASCO <<\n         DC    CL17'HAMAR'          >> VASCO <<\n         DC    CL17'HAMAIKA'        >> VASCO <<\n         DC    CL17'HAMABI'         >> VASCO <<\n         DC    CL17'HAMAHIRU'       >> VASCO <<\n         DC    CL17'HAMALAU'        >> VASCO <<\n         DC    CL17'HAMABOST'       >> VASCO <<\n         DC    CL17'HAMASEI'        >> VASCO <<\n         DC    CL17'HAMAZAZPI'      >> VASCO <<\n         DC    CL17'HEMEZORTZI'     >> VASCO <<\n         DC    CL17'HEMERETZI'      >> VASCO <<\n         DC    CL17'HOGEI'             >> VASCO <<\n         DC    CL17'HOGEITA BAT'       >> VASCO <<\n         DC    CL17'HOGEITA BI'        >> VASCO <<\n         DC    CL17'HOGEITA HIRU'      >> VASCO <<\n         DC    CL17'HOGEITA LAU'       >> VASCO <<\n         DC    CL17'HOGEITA BOST'      >> VASCO <<\n         DC    CL17'HOGEITA SEI'       >> VASCO <<\n         DC    CL17'HOGEITA ZAZPI'     >> VASCO <<\n         DC    CL17'HOGEITA ZORTZI'    >> VASCO <<\n         DC    CL17'HOGEITA BEDERATZI' >> VASCO <<\n         DC    CL17'HOGEITA HAMAR'     >> VASCO <<\n         DC    CL17'HOGEITA HAMAIKA'   >> VASCO <<\nTBI346S  DC    H'10'                >> VASCO <<\n         DC    CL10'IGANDEA'        >> VASCO <<\n         DC    CL10'ASTELEHENA'     >> VASCO <<\n         DC    CL10'ASTEARTEA'      >> VASCO <<\n         DC    CL10'ASTEAZKENA'     >> VASCO <<\n         DC    CL10'OSTEGUNA'       >> VASCO <<\n         DC    CL10'OSTIRALA'       >> VASCO <<\n         DC    CL10'LARUNBATA'      >> VASCO <<\nTBI346C  DC    H'03'                >> VASCO <<\n         DC    CL03'URT'            >> VASCO <<\n         DC    CL03'OTS'            >> VASCO <<\n         DC    CL03'MAR'            >> VASCO <<\n         DC    CL03'API'            >> VASCO <<\n         DC    CL03'MAI'            >> VASCO <<\n         DC    CL03'EKA'            >> VASCO <<\n         DC    CL03'UZT'            >> VASCO <<\n         DC    CL03'ABU'            >> VASCO <<\n         DC    CL03'IRA'            >> VASCO <<\n         DC    CL03'URR'            >> VASCO <<\n         DC    CL03'AZA'            >> VASCO <<\n         DC    CL03'ABE'            >> VASCO <<\nTBI346M  DC    H'09'                >> VASCO <<\n         DC    CL09'URTARRILA'      >> VASCO <<\n         DC    CL09'OTSAILA'        >> VASCO <<\n         DC    CL09'MARTXOA'        >> VASCO <<\n         DC    CL09'APIRILA'        >> VASCO <<\n         DC    CL09'MAIATZA'        >> VASCO <<\n         DC    CL09'EKAINA'         >> VASCO <<\n         DC    CL09'UZTAILA'        >> VASCO <<\n         DC    CL09'ABUZTUA'        >> VASCO <<\n         DC    CL09'IRAILA'         >> VASCO <<\n         DC    CL09'URRIA'          >> VASCO <<\n         DC    CL09'AZAROA'         >> VASCO <<\n         DC    CL09'ABENDUA'        >> VASCO <<\n*\n*  TBI3481 --> GALLEGO\n*\nTBI3481  DS    0F\n         DC    A(TBI3481D)\n         DC    A(TBI3481S)\n         DC    A(TBI3481C)\n         DC    A(TBI3481M)\nTBI3481D DC    H'19'\n         DC    CL19'UN'             >> GALLEGO <<\n         DC    CL19'DOUS'           >> GALLEGO <<\n         DC    CL19'TRES'           >> GALLEGO <<\n         DC    CL19'CATRO'          >> GALLEGO <<\n         DC    CL19'CINCO'          >> GALLEGO <<\n         DC    CL19'SEIS'           >> GALLEGO <<\n         DC    CL19'SETE'           >> GALLEGO <<\n         DC    CL19'OITO'           >> GALLEGO <<\n         DC    CL19'NOVE'           >> GALLEGO <<\n         DC    CL19'DEZ'            >> GALLEGO <<\n         DC    CL19'ONCE'           >> GALLEGO <<\n         DC    CL19'DOCE'           >> GALLEGO <<\n         DC    CL19'TRECE'          >> GALLEGO <<\n         DC    CL19'CATORCE'        >> GALLEGO <<\n         DC    CL19'QUINCE'         >> GALLEGO <<\n         DC    CL19'DEZASEIS'       >> GALLEGO <<\n         DC    CL19'DEZASETE'       >> GALLEGO <<\n         DC    CL19'DEZAOITO'       >> GALLEGO <<\n         DC    CL19'DEZANOVE'       >> GALLEGO <<\n         DC    CL19'VINTE'          >> GALLEGO <<\n         DC    CL19'VINTE E UN'     >> GALLEGO <<\n         DC    CL19'VINTE E DOUS'   >> GALLEGO <<\n         DC    CL19'VINTE E TRES'   >> GALLEGO <<\n         DC    CL19'VINTE E CATRO'  >> GALLEGO <<\n         DC    CL19'VINTE E CINCO'  >> GALLEGO <<\n         DC    CL19'VINTE E SEIS'   >> GALLEGO <<\n         DC    CL19'VINTE E SETE'   >> GALLEGO <<\n         DC    CL19'VINTE E OITO'   >> GALLEGO <<\n         DC    CL19'VINTE E NOVE'   >> GALLEGO <<\n         DC    CL19'TRINTA'         >> GALLEGO <<\n         DC    CL19'TRINTA E UN'    >> GALLEGO <<\nTBI3481S DC    H'08'                >> GALLEGO <<\n         DC    CL08'DOMINGO'        >> GALLEGO <<\n         DC    CL08'LUNS'           >> GALLEGO <<\n         DC    CL08'MARTES'         >> GALLEGO <<\n         DC    CL08'MERCORES'       >> GALLEGO <<\n         DC    CL08'XOVES'          >> GALLEGO <<\n         DC    CL08'VENRES'         >> GALLEGO <<\n         DC    CL08'SABADO'         >> GALLEGO <<\nTBI3481C DC    H'03'                >> GALLEGO <<\n         DC    CL03'XAN'            >> GALLEGO <<\n         DC    CL03'FEB'            >> GALLEGO <<\n         DC    CL03'MAR'            >> GALLEGO <<\n         DC    CL03'ABR'            >> GALLEGO <<\n         DC    CL03'MAI'            >> GALLEGO <<\n         DC    CL03'XUN'            >> GALLEGO <<\n         DC    CL03'XUL'            >> GALLEGO <<\n         DC    CL03'AGO'            >> GALLEGO <<\n         DC    CL03'SET'            >> GALLEGO <<\n         DC    CL03'OUT'            >> GALLEGO <<\n         DC    CL03'NOV'            >> GALLEGO <<\n         DC    CL03'DEC'            >> GALLEGO <<\nTBI3481M DC    H'10'                >> GALLEGO <<\n         DC    CL10'XANEIRO'        >> GALLEGO <<\n         DC    CL10'FEBREIRO'       >> GALLEGO <<\n         DC    CL10'MARZO'          >> GALLEGO <<\n         DC    CL10'ABRIL'          >> GALLEGO <<\n         DC    CL10'MAIO'           >> GALLEGO <<\n         DC    CL10'XUNIO'          >> GALLEGO <<\n         DC    CL10'XULLO'          >> GALLEGO <<\n         DC    CL10'AGOSTO'         >> GALLEGO <<\n         DC    CL10'SETEMBRO'       >> GALLEGO <<\n         DC    CL10'OUTUBRO'        >> GALLEGO <<\n         DC    CL10'NOVEMBRO'       >> GALLEGO <<\n         DC    CL10'DECEMBRO'       >> GALLEGO <<\n*\n*  TBI44  ---> INGLES\n*\nTBI44    DS    0F                      <> INGLES\n         DC    A(TBI44D)\n         DC    A(TBI44S)\n         DC    A(TBI44C)\n         DC    A(TBI44M)\nTBI44D   DC    H'12'\n         DC    CL12'ONE'\n         DC    CL12'TWO'\n         DC    CL12'THREE'\n         DC    CL12'FOUR'\n         DC    CL12'FIVE'\n         DC    CL12'SIX'\n         DC    CL12'SEVEN'\n         DC    CL12'EIGHT'\n         DC    CL12'NINE'\n         DC    CL12'TEN'\n         DC    CL12'ELEVEN'\n         DC    CL12'TWELVE'\n         DC    CL12'THIRTEEN'\n         DC    CL12'FORTEEN'\n         DC    CL12'FIFTEEN'\n         DC    CL12'SIXTEEN'\n         DC    CL12'SEVENTEEN'\n         DC    CL12'EIGHTEEN'\n         DC    CL12'NINETEEN'\n         DC    CL12'TWENTY'\n         DC    CL12'TWENTY ONE'\n         DC    CL12'TWENTY TWO'\n         DC    CL12'TWENTY THREE'\n         DC    CL12'TWENTY FOUR'\n         DC    CL12'TWENTY FIVE'\n         DC    CL12'TWENTY SIX'\n         DC    CL12'TWENTY SEVEN'\n         DC    CL12'TWENTY EIGHT'\n         DC    CL12'TWENTY NINE'\n         DC    CL12'THIRTY'\n         DC    CL12'THIRTY ONE'\nTBI44S   DC    H'09'\n         DC    CL09'SUNDAY'\n         DC    CL09'MONDAY'\n         DC    CL09'TUESDAY'\n         DC    CL09'WEDNESDAY'\n         DC    CL09'THURSDAY'\n         DC    CL09'FRIDAY'\n         DC    CL09'SATURDAY'\nTBI44C   DC    H'03'\n         DC    CL03'JAN'\n         DC    CL03'FEB'\n         DC    CL03'MAR'\n         DC    CL03'APR'\n         DC    CL03'MAY'\n         DC    CL03'JUN'\n         DC    CL03'JUL'\n         DC    CL03'AUG'\n         DC    CL03'SEP'\n         DC    CL03'OCT'\n         DC    CL03'NOV'\n         DC    CL03'DEC'\nTBI44M   DC    H'09'\n         DC    CL09'JANUARY'\n         DC    CL09'FEBRUARY'\n         DC    CL09'MARCH'\n         DC    CL09'APRIL'\n         DC    CL09'MAY'\n         DC    CL09'JUNE'\n         DC    CL09'JULY'\n         DC    CL09'AUGUST'\n         DC    CL09'SEPTEMBER'\n         DC    CL09'OCTOBER'\n         DC    CL09'NOVEMBER'\n         DC    CL09'DECEMBER'\n*\n*  TBI33  ---> FRANCES\n*\nTBI33    DS    0F                      <> FRANCES\n         DC    A(TBI33D)\n         DC    A(TBI33S)\n         DC    A(TBI33C)\n         DC    A(TBI33M)\nTBI33D   DC    H'12'\n         DC    CL12'UN'\n         DC    CL12'DEUX'\n         DC    CL12'TROIS'\n         DC    CL12'QUATRE'\n         DC    CL12'CINQ'\n         DC    CL12'SIX'\n         DC    CL12'SEPT'\n         DC    CL12'HUIT'\n         DC    CL12'NEUF'\n         DC    CL12'DIX'\n         DC    CL12'ONZE'\n         DC    CL12'DOUZE'\n         DC    CL12'TREIZE'\n         DC    CL12'QUATORZE'\n         DC    CL12'QUINZE'\n         DC    CL12'SEIZE'\n         DC    CL12'DIX-SEPT'\n         DC    CL12'DIX-HUIT'\n         DC    CL12'DIX-NEUF'\n         DC    CL12'VINGT'\n         DC    CL12'VINGT UN'\n         DC    CL12'VINGT DEUX'\n         DC    CL12'VINGT TROIS'\n         DC    CL12'VINGT QUATRE'\n         DC    CL12'VINGT CINQ'\n         DC    CL12'VINGT SIX'\n         DC    CL12'VINGT SEPT'\n         DC    CL12'VINGT HUIT'\n         DC    CL12'VINGT NEUF'\n         DC    CL12'TRENTE'\n         DC    CL12'TRENTE UNE INT'\nTBI33S   DC    H'08'\n         DC    CL08'DIMANCHE'\n         DC    CL08'LUNDI'\n         DC    CL08'MARDI'\n         DC    CL08'MERCREDI'\n         DC    CL08'JEUDI'\n         DC    CL08'VENDREDI'\n         DC    CL08'SAMEDI'\nTBI33C   DC    H'03'\n         DC    CL03'JAN'\n         DC    CL03'FEB'\n         DC    CL03'MAR'\n         DC    CL03'AVR'\n         DC    CL03'MAI'\n         DC    CL03'JUI'\n         DC    CL03'JUL'\n         DC    CL03'AOU'\n         DC    CL03'SEP'\n         DC    CL03'OCT'\n         DC    CL03'NOV'\n         DC    CL03'DEC'\nTBI33M   DC    H'09'\n         DC    CL09'JANVIER'\n         DC    CL09'FEVRIER'\n         DC    CL09'MARS'\n         DC    CL09'AVRIL'\n         DC    CL09'MAI'\n         DC    CL09'JUIN'\n         DC    CL09'JUILLET'\n         DC    CL09'AOUT'\n         DC    CL09'SEPTEMBRE'\n         DC    CL09'OCTOBRE'\n         DC    CL09'NOVEMBRE'\n         DC    CL09'DECEMBRE'\n*\n*  TBI39  ---> ITALIANO\n*\nTBI39    DS    0F\n         DC    A(TBI39D)\n         DC    A(TBI39S)\n         DC    A(TBI39C)\n         DC    A(TBI39M)\nTBI39D   DC    H'12'\n         DC    CL12'UN'            << ITALIANO >>\n         DC    CL12'DUE'           << ITALIANO >>\n         DC    CL12'TRE'           << ITALIANO >>\n         DC    CL12'QUATTRO'       << ITALIANO >>\n         DC    CL12'CINQUE'        << ITALIANO >>\n         DC    CL12'SEI'           << ITALIANO >>\n         DC    CL12'SETTE'         << ITALIANO >>\n         DC    CL12'OTTO'          << ITALIANO >>\n         DC    CL12'NOVE'          << ITALIANO >>\n         DC    CL12'DIECI'         << ITALIANO >>\n         DC    CL12'UNDICI'        << ITALIANO >>\n         DC    CL12'DODICI'        << ITALIANO >>\n         DC    CL12'TREDICI'       << ITALIANO >>\n         DC    CL12'QUATTORDICI'   << ITALIANO >>\n         DC    CL12'QUINDICI'      << ITALIANO >>\n         DC    CL12'SEDICI'        << ITALIANO >>\n         DC    CL12'DICIASSETTE'   << ITALIANO >>\n         DC    CL12'DICIOTTO'      << ITALIANO >>\n         DC    CL12'DICIANNOVE'    << ITALIANO >>\n         DC    CL12'VENTI'         << ITALIANO >>\n         DC    CL12'VENTUNO'       << ITALIANO >>\n         DC    CL12'VEINTIDUE'     << ITALIANO >>\n         DC    CL12'VENTITRE'      << ITALIANO >>\n         DC    CL12'VENTIQUATTRO'  << ITALIANO >>\n         DC    CL12'VENTICINQUE'   << ITALIANO >>\n         DC    CL12'VENTISEI'      << ITALIANO >>\n         DC    CL12'VENTISETTE'    << ITALIANO >>\n         DC    CL12'VENTOTTO'      << ITALIANO >>\n         DC    CL12'VENTINOVE'     << ITALIANO >>\n         DC    CL12'TRENTA'        << ITALIANO >>\n         DC    CL12'TRENTAUNO'     << ITALIANO >>\nTBI39S   DC    H'10'               << ITALIANO >>\n         DC    CL10'DOMENICA'      << ITALIANO >>\n         DC    CL10'LUNEDI'        << ITALIANO >>\n         DC    CL10'MARTEDI'       << ITALIANO >>\n         DC    CL10'MIERCOLEDI'    << ITALIANO >>\n         DC    CL10'GIOVEDI'       << ITALIANO >>\n         DC    CL10'VENERDI'       << ITALIANO >>\n         DC    CL10'SABATO'        << ITALIANO >>\nTBI39C   DC    H'03'               << ITALIANO >>\n         DC    CL03'GEN'           << ITALIANO >>\n         DC    CL03'FEB'           << ITALIANO >>\n         DC    CL03'MAR'           << ITALIANO >>\n         DC    CL03'APR'           << ITALIANO >>\n         DC    CL03'MAG'           << ITALIANO >>\n         DC    CL03'GIU'           << ITALIANO >>\n         DC    CL03'LUG'           << ITALIANO >>\n         DC    CL03'AUG'           << ITALIANO >>\n         DC    CL03'SET'           << ITALIANO >>\n         DC    CL03'OTT'           << ITALIANO >>\n         DC    CL03'NOV'           << ITALIANO >>\n         DC    CL03'DIC'           << ITALIANO >>\nTBI39M   DC    H'09'               << ITALIANO >>\n         DC    CL09'GENNAIO'       << ITALIANO >>\n         DC    CL09'FEBBRAIO'      << ITALIANO >>\n         DC    CL09'MARZO'         << ITALIANO >>\n         DC    CL09'APRILE'        << ITALIANO >>\n         DC    CL09'MAGGIO'        << ITALIANO >>\n         DC    CL09'GIUGNO'        << ITALIANO >>\n         DC    CL09'LUGLIO'        << ITALIANO >>\n         DC    CL09'AUGUST'        << ITALIANO >>\n         DC    CL09'SETTEMBRE'     << ITALIANO >>\n         DC    CL09'OTTOBRE'       << ITALIANO >>\n         DC    CL09'NOVEMBRE'      << ITALIANO >>\n         DC    CL09'DICEMBRE'      << ITALIANO >>\n*\n*  TBI49  ---> ALEMAN\n*\nTBI49    DS    0F\n         DC    A(TBI49D)\n         DC    A(TBI49S)\n         DC    A(TBI49C)\n         DC    A(TBI49M)\nTBI49D   DC    H'16'\n         DC    CL16'EINS'              << ALEMAN >>\n         DC    CL16'ZWEI'              << ALEMAN >>\n         DC    CL16'DREI'              << ALEMAN >>\n         DC    CL16'VIER'              << ALEMAN >>\n         DC    CL16'FUNF'              << ALEMAN >>\n         DC    CL16'SECHS'             << ALEMAN >>\n         DC    CL16'SIEBEN'            << ALEMAN >>\n         DC    CL16'ACHT'              << ALEMAN >>\n         DC    CL16'NEUN'              << ALEMAN >>\n         DC    CL16'ZEHN'              << ALEMAN >>\n         DC    CL16'ELF'               << ALEMAN >>\n         DC    CL16'ZWOLF'             << ALEMAN >>\n         DC    CL16'DREIZEHN'          << ALEMAN >>\n         DC    CL16'VIERZEHN'          << ALEMAN >>\n         DC    CL16'FUNFZEHN'          << ALEMAN >>\n         DC    CL16'SECHZEHN'          << ALEMAN >>\n         DC    CL16'SIEBZEHN'          << ALEMAN >>\n         DC    CL16'ACHTZEHN'          << ALEMAN >>\n         DC    CL16'NEUNZEHN'          << ALEMAN >>\n         DC    CL16'ZWANZIG'           << ALEMAN >>\n         DC    CL16'EINUNDZWANZIG'     << ALEMAN >>\n         DC    CL16'ZWEIUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'DEIUNDZWANZIG'     << ALEMAN >>\n         DC    CL16'VIERUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'FUNFUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'SECHSUNDZWANZIG'   << ALEMAN >>\n         DC    CL16'SIEBENUNDZWANZIG'  << ALEMAN >>\n         DC    CL16'ACHTUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'NEUNUNDZWANZIG'    << ALEMAN >>\n         DC    CL16'DREISSIG'          << ALEMAN >>\n         DC    CL16'EINUNDREISSIG'     << ALEMAN >>\nTBI49S   DC    H'10'                   << ALEMAN >>\n         DC    CL10'SONNTAG'           << ALEMAN >>\n         DC    CL10'MONTAG'            << ALEMAN >>\n         DC    CL10'DIENSTAG'          << ALEMAN >>\n         DC    CL10'MITTWOCH'          << ALEMAN >>\n         DC    CL10'DONNERSTAG'        << ALEMAN >>\n         DC    CL10'FREITAG'           << ALEMAN >>\n         DC    CL10'SAMSTAG'           << ALEMAN >>\nTBI49C   DC    H'03'                   << ALEMAN >>\n         DC    CL03'JAN'               << ALEMAN >>\n         DC    CL03'FEB'               << ALEMAN >>\n         DC    CL03'MAR'               << ALEMAN >>\n         DC    CL03'APR'               << ALEMAN >>\n         DC    CL03'MAI'               << ALEMAN >>\n         DC    CL03'JUN'               << ALEMAN >>\n         DC    CL03'JUL'               << ALEMAN >>\n         DC    CL03'AUG'               << ALEMAN >>\n         DC    CL03'SEP'               << ALEMAN >>\n         DC    CL03'OKT'               << ALEMAN >>\n         DC    CL03'NOV'               << ALEMAN >>\n         DC    CL03'DEZ'               << ALEMAN >>\nTBI49M   DC    H'09'                   << ALEMAN >>\n         DC    CL09'JANUAR'            << ALEMAN >>\n         DC    CL09'FEBRUAR'           << ALEMAN >>\n         DC    CL09'MARZ'              << ALEMAN >>\n         DC    CL09'APRIL'             << ALEMAN >>\n         DC    CL09'MAI'               << ALEMAN >>\n         DC    CL09'JUNI'              << ALEMAN >>\n         DC    CL09'JULI'              << ALEMAN >>\n         DC    CL09'AUGUST'            << ALEMAN >>\n         DC    CL09'SEPTEMBER'         << ALEMAN >>\n         DC    CL09'OKTOBER'           << ALEMAN >>\n         DC    CL09'NOVEMBER'          << ALEMAN >>\n         DC    CL09'DEZEMBER'          << ALEMAN >>\n*\n*\n*  TB351  ---> PORTUGUES\n*\nTBI351   DS    0F\n         DC    A(TBI351D)\n         DC    A(TBI351S)\n         DC    A(TBI351C)\n         DC    A(TBI351M)\nTBI351D  DC    H'12'\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\n         DC    CL12'....'        << PORTUGUES >>\nTBI351S  DC    H'10'             << PORTUGUES >>\n         DC    CL10'..NNTAG'     << PORTUGUES >>\n         DC    CL10'..NTAG'      << PORTUGUES >>\n         DC    CL10'..ENSTAG'    << PORTUGUES >>\n         DC    CL10'..TTWOCH'    << PORTUGUES >>\n         DC    CL10'..NNERSTAG'  << PORTUGUES >>\n         DC    CL10'..EITAG'     << PORTUGUES >>\n         DC    CL10'..MSTAG'     << PORTUGUES >>\nTBI351C  DC    H'03'             << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\n         DC    CL03'...'         << PORTUGUES >>\nTBI351M  DC    H'09'             << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n         DC    CL09'...'         << PORTUGUES >>\n*\n* ---------------------------------------------------------------------\n*        RESERVA DE AREAS DINAMICAS\n* ---------------------------------------------------------------------\n@DYNDAT  DSECT\n@TBMES   ORG       *+TBMESESL\n@STCKC   ORG       *+MSTCKCL           <> CONVERSION A DECIMAL FECHAS\n@CONVT   ORG       *+MCONVTL           <> CONVERSION A BINARIO FECHAS\n*\n@TIME    ORG       *+TIMEL\n*\n@TIMEDAT DS        CL16\n@CENTURY DS        CL2\n@DIASANO DS        PL2                 <> VARIABLE DEVUELTA POR LA\n*                                         RUTINA DE ANO BISIESTO\n* AREA BASICA DE TRABAJO\n*\n@AREABAS DC        0CL22\n@WGREGO  DS        CL8                 <> GREGORIANA DE TRABAJO\n@WJULIA  DS        CL7                 <> JULIANA DE TRABAJO\n@WBASE   DS        CL7                 <> BASE DE TRABAJO\n*\n@SAVABAS DS        CL22                <> SALVADO BASICO\n*\n@WBASRES DS        PL4                 <> BASE DOMINGO RESURRECCION\n@WASTRO  DS        CL11                <> ASTRONOMICA\n@WGMT    DS        CL12                <> GMT\n@WLOC1PE DS        CL12                <> CAMBIO A VERANO\n@WLOC2PE DS        CL12                <> CAMBIO A INVIERNO\n@WLOCHPE DS        CL12                <> HORA DEL CAMBIO\n@WLOFFSE DS        CL7                 <> GMT\n@WFACT   DS        CL9\n@WHACT   DS        CL9\n@WBISI   DS        CL1                 <> INDICADOR BISIESTO WORK\n@WANO    DS        CL4                 <> ANNO DE TRABAJO\n@WDIASEN DS        CL1                 <> DIA SEMANA NUMERICO\n*\n@WDIFER  DS        PL4\n@WOFFBAS DS        PL4\n@WBAAAA  DS        CL3                 <> UNO MAS PARA PACK\n@WBMM    DS        CL1\n@WBDD    DS        CL1\n@WBSS    DS        CL1\n@ACUMUL  DS        D\n@WORKD   DS        D\n@WORKDA  DS        D                   <> INTERMEDIATE ANSWER\n@WORKDB  DS        D                   <> INTERMEDIATE ANSWER\n@WORKDC  DS        D                   <> INTERMEDIATE ANSWER\n@WORKDX  DS        D                   <> INTERMEDIATE ANSWER\n@WORKDM  DS        D\n@WORKDD  DS        D\n@WORKDY  DS        D\n@WORKF   DS        F\n@WORKH   DS        H\n@WORKANO DS        PL3\n@WORK15  DS        CL15\n@WGMES   DS        PL2                 <> GREGORIAN @WGMES\n@WGDIA   DS        PL2                 <> GREGORIAN @WGDIA\n@WGANO   DS        PL4                 <> GREGORIAN @WGANO\n*\n@ADRIDIO DS        F                   <> ADDR.CALCULADA IDIOMA\n*\n@CENTPAK DS        PL2\n@WKP5    DS        PL5\n@WKP4    DS        PL4\n@WKP3    DS        PL3\n@WKZ3    DS        ZL3\n@WKT2    DS        PL2\n@WKT3    DS        PL1\n@WKNONL  DS        PL2\n@WKMET   DS        PL2\n@WKMETC  DS        PL2\n@WKEPACT DS        PL2\n@WKDAY   DS        PL2\n@WKDMOD  DS        PL3\n@WEASTER DS        CL8     >>ATENCION    MMDDAAAA\n*\n@TIMEOFF DS        2D                  <> OFFSET DEC FECHAS\n@TIMELOC DS        2D                  <> DATE-TIME DEC LOCAL\n@TIMEGMT DS        2D                  <> DATE-TIME DEC GMT\n*\n@GMTSTAM DS        CL20\n@LOCSTAM DS        CL20\n*\n@CANAREA ORG       *+$CANLENG          <> AREA LLANADA MDCANTI\n*\n*        SE CONSIGNA LA ZONA DE SAVE'S AL FINAL PARA\n*        GARANTIZAR EL ALINEAMIENTO A DOBLE PALABRA\n*\n*        ATENCION A LA INSTRUCCION ORG DE POSICIONAMIENTO\n*        QUE TIENE DELANTE PARA FORZAR SU COLOCACION AL FINAL\n*        DEL AREA SUMINISTRADA POR EL PROGRAMA LLAMADOR\n*\n         ORG       @DYNDAT+1024-@DYNSAVL\n*\n@DYNSAV  DS        18D                 <> PREVISION EN CASO DIR.64\n@DYNSAVL EQU       *-@DYNSAV           <> PREVISION EN CASO DIR.64\n*\n@DYNDATL EQU   *-@DYNDAT\n* ---------------------------------------------------------------------\n*        DSECT ARAMETROS LLAMADA MDCANTI\n* ---------------------------------------------------------------------\n$CANPARM DSECT\n$CANCOD  DS        H                   <> CODIGOS DE LLAMADA\n*                                         0   FEMENINO\n*                                         1   MASCULINO\n$CANPENT DS        CL18                <> PARTE ENTERA A CONVERTIR\n$CANPDEC DS        CL2                 <> PARTE DECIMAL\n$CANTROC DS        CL6\n$CANLITE DS        CL80                <> LITERAL DEVUELTO\n*\n$CANLENG EQU       *-$CANPARM\n* ---------------------------------------------------------------------\n*        DSECT DE PARAMETROS  CON CODIGOS DE LLAMADA/RETORNO\n* ---------------------------------------------------------------------\n$PARAM   DSECT\n$CODIGO DS         H         <> CODIGOS DE LLAMADA\n*                                0   FECHA DEL DIA LOCAL Y TIMESTAMP\n*                                1   VERIFICACION ANO BISIESTO      (1)\n*                                2   OBTENER FECHAS RELIGIOSAS      (1)\n*                                3   FECHA GMT Y TIMESTAMP GMT\n*                                --> CONVERSIONES / VERIFICACIONES\n*                                4   -GREGORIANA\n*                                5   -JULIANA\n*                                6   -BASE\n*                                7   -BASE SIGLO XX\n*                                8   -BASE SIGLO XXI\n*                                9   -ASTRONOMICA\n*                               10   -LILIANA\n*                               11   -GMT (NECESITA HH:MM)          (1)\n*                               12   -DIFERENCIAS ENTRE DOS GREGORI.(1)\n*\n* (1) ESTAS FUNCIONES DEVUELVEN CONTROL DIRECTO AL PROGRAMA\n*     LLAMANTE. NO ES POSIBLE OBTENER OTRAS FECHAS Y/O EDICIONES.\n*     PARA HACERLO SERA NECESARIO LLAMAR AL MODULO DE NUEVO Y UTILIZAR\n*     EL CODIGO DE LLAMAD QUE SE DESEE.\n*\n*                            <> CODIGOS DE RETORNO\n*                               0   FUNCION TERMINADA CORRECTAMENTE\n*                              -1   CODIGO DE LLAMADA ERRONEO\n*                              -2   FECHA(S) INVALIDA(S) O ILOGICA(S)\n*                              -3   PETICION INVALIDA FECHAS RELIGIOSAS\n*                              -4   NO PODEMOS DETECTAR OFFSET BASICO\n*                                   DE LA HORA LOCAL POR ESTAR EN LA\n*                                   HORA EN LA QUE SE PRODUCE EL CAMBIO\n*                                   Y NO SE HA ESTABLECIDO VALOR POR\n*                                   DEFECTO EN LA INSTALACION.\n*\n$SAVESTA DS        CL1024    <> AREA TRABAJO FACILITADA PGM LLAMADOR\n*\n$OBTIPOS DS        0CL16     <> MARCAS DATOS OBTENER\n$OB@BISI DS        CL1       <> - BISIESTO\n$OB@RELI DS        CL1       <> - RELIGIOSAS DE ESE ANO\n$OB@GREG DS        CL1       <> - GREGORIANA\n$OB@JULI DS        CL1       <> - JULIANA\n* --\n$OB@BASE DS        CL1       <> - BASE\n$OB@BAS0 DS        CL1       <> - BASE SIGLO XX\n$OB@BAS1 DS        CL1       <> - BASE SIGLO XXI\n$OB@LILI DS        CL1       <> - LILIANA\n* --\n$OB@ASTR DS        CL1       <> - ASTRONOMICA\n$OB@EDT  DS        CL1       <> - EDICIONES\n         DS        CL1       <> - RESERVADO - 1\n         DS        CL1       <> - RESERVADO - 2\n* --\n         DS        CL1       <> - RESERVADO - 3\n         DS        CL1       <> - RESERVADO - 4\n$OB@EDTH DS        CL1       <> - EDICION-S LITERAL ANO            (2)\n$OB@EDTA DS        CL1       <> - EDICION-S LITERAL HORA           (2)\n*\n* (2) ESTAS FUNCIONES SOLO SON POSIBLES EN IDIOMA CASTELLANO\n*     AUNQUE SE HAYA SOLICITADO OTRO IDIOMA SE DEVOLVERAN EN CASTELLANO\n*     POR OTRO LADO, CONSUMEN TIEMPO Y RECURSOS, YA QUE ES NECESARIA\n*     UNA LLAMADA EXTERNA A OTRO MODULO, VARIAS VECES, PARA\n*     CONFECCIONAR LOS LITERALES.\n*\n         ORG       $OBTIPOS+16\n*\n$ANNO    DS        CL04'AAAA'          <> ANO (ALGUNAS FUNCIONES)\n$FEGREGO DS        CL08'AAAAMMDD'      <> GREGORIANA\n$FEJULIA DS        CL07'AAAADDD'       <> JULIANA\n$FEBASE  DS        CL07'NNNNNNN'       <> BASE TOTAL DESDE 01-01-0001\n$FEBAS20 DS        CL07'NNNNNNN'       <> BASE SIGLO XX\n$FEBAS21 DS        CL07'NNNNNNN'       <> BASE SIGLO XXI\n$FELILIA DS        CL07'NNNNNNN'       <> LILIANA\n$FEGMT   DS        CL12'AAAAMMDDHHMM'  <> GMT (VER CONSIDERACIONES)\n$FEASTRO DS        CL11'NNNNNNNDDDD'   <> ASTRONOMICA\n$FEGREG2 DS        CL08'AAAAMMDD'      <> GREGORIANA-2\n$FEDIFER DS        CL04'BBBB'          <> DIFERENCIA BINARIA CON SIGNO\n$ERACRIS DS        CL02'AC'            <> ERA (ALGUNAS FUNCIONES)\n*                                          DC/ESPAC.=DESPUES DE CRISTO\n*                                          AC       =ANTES DE CRISTO\n$HORAFUL DS        0CL8'HHMMSSDD'      <> HORA COMPLETA\n$HORA    DS        CL02'XX'            <> HORA\n$MINUTO  DS        CL02'XX'            <> MINUTO\n$SEGUNDO DS        CL02'XX'            <> SEGUNDO\n$DECIMAS DS        CL02'XX'            <> DECIMAS DE SEGUNDO\n*\n$IDIOMA  DS        CL4'XXXX'           <> CODIGOS DE IDIOMA\n*                                         341 ---> CASTELLANO\n*                                         343 ---> CATALAN------- FALTA\n*                                         346 ---> VASCO--------- FALTA\n*                                         3481 --> GALLEGO------- FALTA\n*                                         33 ----> FRANCES\n*                                         351 ---> PORTUGUES----- FALTA\n*                                         39 ----> ITALIANO\n*                                         44 ----> INGLES\n*                                         49 ----> ALEMAN\n*\n$INDBISI DS        CL01                <> BISIESTO (S / N)\n$TIMESTA DS        CL20                <> TIMESTAMP\n$LOFFSET DS        CL7                 <> LOCAL OFFSET\n*\n$DIANUM  DS        CL2                 <> DIA NUMERICO\n$DIAALF  DS        CL20                <> DIA ALFABETICO\n$MESNUM  DS        CL2                 <> MES NUMERICO\n$MESALF  DS        CL20                <> MES ALFABETICO\n$ANONUM  DS        CL4                 <> ANO NUMERICO (SI MARCA EXPL.)\n$ANOALF  DS        CL40                <> ANO ALFABETICO (SI MARCA EX.)\n$DIASEN  DS        CL1                 <> DIA SEMANA NUM.(0=DOMINGO)\n$DIASEA  DS        CL15                <> DIA DE LA SEMANA\n*\n$FEEDT1  DS        CL11'DD.MMM.AAAA'\n$FEEDT2  DS        CL09'DD.MMM.AA'\n$FEEDT3  DS        CL10'DD.MM.AAAA'\n$FEEDT4  DS        CL08'DD.MM.AA'\n*\n$HOREDT  DS        CL11'HH:MM:SS:DD'\n$HORBIN  DS        CL6                 <> HEXADECIMAL SIN SIGNO\n$HORALF  DS        CL80                <> HORA ALFAB (SI MARCA EXPL.)\n*\n*        FECHAS RELIGIOSAS (EN FORMATO GREGORIANO)\n*\n$MICENIZ DS        CL8'AAAAMMDD'       <> MIERCOLES DE CENIZA (GREGOR.)\n$VIERNST DS        CL8'AAAAMMDD'       <> VIERNES SANTO       (GREGOR.)\n$RESURRE DS        CL8'AAAAMMDD'       <> RESURRECCION        (GREGOR.)\n$ASCENSI DS        CL8'AAAAMMDD'       <> ASCENSION           (GREGOR.)\n$PENTECO DS        CL8'AAAAMMDD'       <> PENTECOSTES         (GREGOR.)\n$CORPUSC DS        CL8'AAAAMMDD'       <> CORPUS CHRISTY      (GREGOR.)\n*\n         CVT   DSECT=YES,LIST=NO\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MDTPUT": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x12\\x7f\\x01\\x01\\x08\\x7f\\x13\\x10\\x00\\x9c\\x00\\xa0\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-05-07T00:00:00", "modifydate": "2001-03-28T13:10:00", "lines": 156, "newlines": 160, "modlines": 0, "user": "U0Z72B6"}, "text": "         TITLE '** MDTPUT ** EDITAR EN PANTALLA UN TEXTO POR LIN. COL'\n* *****************   MDTPUT    ***************************************\n* *                                                                   *\n* * NOMBRE ....... MDTPUT   (ANTIGUO TPUTPGM)                         *\n* *                                                                   *\n* * UBICACION .... SYST.LINKLIB                                       *\n* *                                                                   *\n* * AUTOR ........ JOSE IGNACIO SANCHEZ GACITUAGA.                    *\n* *                ANGEL LUIS DOMINGUEZ MARTIN (REVISION/IMPLEMENTAC) *\n* *                                                                   *\n* * FUNCIONES .... EDITAR TEXTO EN PANTALLA.                          *\n* *                                                                   *\n* * OBJETIVOS .... EDITAR EN PANTALLA UN TEXTO EN UNA LINEA Y COLUMNA *\n* *                ESPECIFICADA EN PARM.                              *\n* *                                                                   *\n* * LENGUAJE ..... HIGH LEVEL ASSEMBLER                               *\n* *                                                                   *\n* * TIPO ......... MODULO ESTATICO.                                   *\n* *                                                                   *\n* * PARAMETROS ... UN UNICO PARAMETRO CON LOS DATOS SIGUIENTES:       *\n* *                                                                   *\n* *            1 O 2  OCTETOS  NUMERO DE LINEA. (MENOR DE 24)         *\n* *            1 O 2     \"     NUMERO DE COLUMNA.(MENOR DE 80)        *\n* *                X     \"     TEXTO A EDITAR.                        *\n* *****************   TPUT ********************************************\n         EJECT\nMDTPUT   INICIO 12\n         L      R2,0(R2)\n         SR     R4,R4\n         LH     R4,0(R2)\n         LTR    R4,R4\n         BZ     NODATOS\n*-----------TOMAR NUMERO DE LINEA-------------\n         SR     R7,R7\n         LA     R5,LIN\n         LA     R6,2(R2)\nBUC      CLI    0(R6),C','\n         BE     P1\n         MVC    0(1,R5),0(R6)\n         LA     R5,1(R5)\n         LA     R6,1(R6)\n         LA     R7,1(R7)\n         BCT    R4,BUC\nP1       STH    R7,LLIN\n         BCTR   R7,R0\n         EX     R7,PACK1\n         CVB    R6,PP\n         CH     R6,=H'24'\n         BC     2,HLIN\n         BCTR   R6,R0\n         MH     R6,=H'80'\n*----------------------------------------------\n*-----------TOMAR NUMERO DE COLUMNA-----------\n         SR     R7,R7\n         LA     R5,COL\n         LA     R8,2(R2)\n         LH     R7,LLIN\n         LA     R8,1(R7,R8)\n         SR     R7,R7\nBUC1     CLI    0(R8),C','\n         BE     P2\n         MVC    0(1,R5),0(R8)\n         LA     R5,1(R5)\n         LA     R8,1(R8)\n         LA     R7,1(R7)\n         BCT    R4,BUC1\nP2       STH    R7,LCOL\n         BCTR   R7,R0\n         EX     R7,PACK2\n         CVB    R8,PP\n         CH     R8,=H'80'\n         BC     2,HCOL\n         BCTR   R8,R0\n*----------------------------------------------\n*-----------CALCULAR LINEA Y COLUMNA----------\n         AR     R6,R8\n         STH    R6,DATOS+2\n         OI     DATOS+2,X'00'\n*-----------TOMAR TEXTO ----------------------\n         LA     R6,2(R2)\n         SR     R7,R7\n         SR     R8,R8\n         LH     R7,LLIN\n         LH     R8,LCOL\n         LA     R6,1(R7,R6)\n         LA     R6,1(R8,R6)\n         LH     R4,0(R2)\n         SR     R4,R7\n         SR     R4,R8\n         BCTR   R4,R0\n         BCTR   R4,R0\n         BCTR   R4,R0\n         EX     R4,MVCPARM\n*----------------------------------------------\n*-----CONVERSION DE DIRECCION LIN,COL (SBA)----\n         LA     R5,DATOS+2\n         LH     R7,0(R5)\n         STC    R7,TRA+1\n         SRL    R7,6\n         STC    R7,TRA\n         NI     TRA+1,X'3F'\n         TR     TRA(2),TAB\n         MVC    DATOS+2(2),TRA\n*----------------------------------------------\n*-----LANZAR MDTPUT EN LIN, COL-----------------\n         LA     R4,LDATOS+1(R4)\n         TPUT   DATOS,(R4),FULLSCR\n         LA     R5,20\n         CR     R15,R5\n         BH     FIN\n         B      IRA(R15)          DUMMY DE BIFURCACION\nIRA      B      FIN               BIFURCA SI RC15=0\n         B      FIN               BIFURCA SI RC15=4\n         B      FIN               BIFURCA SI RC15=8\n         B      RCC               BIFURCA SI RC15=12\n         B      RC10              BIFURCA SI RC15=16\n         B      RC14              BIFURCA SI RC15=20\nNODATOS  MVC    DATOS(30),=C'**** NO HAY DATOS EN PARM.    '\n         B      TPT\nRCC      MVC    DATOS(30),=C'**** TERMINAL CON NOINTERCOM. '\n         B      TPT\nRC10     MVC    DATOS(30),=C'**** PARAMETROS INVAL. MDTPUT'\n         B      TPT\nRC14     MVC    DATOS(30),=C'**** TERMINAL DESCONECTADO.   '\n         B      TPT\nHLIN     MVC    DATOS(30),=C'**** LINEA MAYOR DE 24        '\n         B      TPT\nHCOL     MVC    DATOS(30),=C'**** COLUMNA MAYOR DE 80      '\nTPT      TPUT   DATOS,30,,,,,HIGHP\nFIN      FIN    CR\nMVCPARM  MVC    DATOS+4(*-*),0(R6)\nPACK1    PACK   PP(8),LIN(*-*)\nPACK2    PACK   PP(8),COL(*-*)\n         DS     0D\nDATOS    DC     X'C1'               WCC\n         DC     X'114040'           SBA EN LIN 1, COL 1\nLDATOS   EQU    *-DATOS\n         DC     CL252' '\n*\nTRA      DC     X'0000'\nTAB      DC     X'40C1C2C3C4C5C6C7C8C94A4B'\n         DC     X'4C4D4E4F50D1D2D3D4D5D6D7'\n         DC     X'D8D95A5B5C5D5E5F6061E2E3'\n         DC     X'E4E5E6E7E8E96A6B6C6D6E6F'\n         DC     X'F0F1F2F3F4F5F6F7F8F97A'\n         DC     X'7B7C7D7E7F'\n*\n         DS     0D\nPP       DC     D'0'\nP        DC     P'0'\nLLIN     DS     H\nLIN      DC     CL4' '\nLCOL     DS     H\nCOL      DC     CL4' '\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OPERLOG": {"ttr": 4868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x004\\x01\\x01\\x08\\x7f\\x01\\x063\\x9f\\x11\"\\x00\\x03\\x00\\x03\\x00\\x02\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-03-28T00:00:00", "modifydate": "2006-12-05T11:22:34", "lines": 3, "newlines": 3, "modlines": 2, "user": "U0Z72B6"}, "text": "//OPERLOG PROC\n//UNLOAD  EXEC PGM=IEAMDBLG,COND=EVEN,\n//        PARM='COPY(MDB),DELETE(ALL),ENQ'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYVERLOG": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01(\\x00V\\x01\\x00\\x12_\\x01\\x063\\x9f\\x11\"\\x07\\x12\\x05\\xa6\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.40", "flags": 0, "createdate": "2000-05-04T00:00:00", "modifydate": "2006-12-05T11:22:56", "lines": 1810, "newlines": 1446, "modlines": 0, "user": "U0Z72B6"}, "text": "* +--- ZOS170E --------- SYVERLOG ------------------------------------+\n* |                                                                   |\n* | NOMBRE ....... SYVERLOG                                           |\n* |                                                                   |\n* | UBICACION .... SYST.LINKLIB           AMODE(24) RMODE(24)         |\n* |                                                                   |\n* | AUTOR ........ ANGEL LUIS DOMINGUEZ MARTIN. (C) 1999, 2004, 2006  |\n* |                                                                   |\n* | FUNCIONES .... FACILITA LA VISUALIZACION SELECTIVA DE LOS DATOS   |\n* |                DE SYSLOG DE LOS DIFERENTES SYSPLEX/SISTEMAS, O    |\n* |                OBTIENE EN BATCH LOS REGISTROS MDB DE UN PERIODO   |\n* |                DE TIEMPO DETERMINADO Y/O UN SISTEMA CONCRETO.     |\n* |                                                                   |\n* | OBJETIVOS .... FAVORECER BUSQUEDAS DE DATOS DE OPERLOG DEL SISTEMA|\n* |                                                                   |\n* | LENGUAJE ..... ASSEMBLER H.                                       |\n* |                                                                   |\n* | TIPO ......... PROGRAMA                                           |\n* |                                                                   |\n* | PARAMETROS ... RECIBE OBLIGATORIAMENTE TRES PARAMETROS,           |\n* | INTERAC.ISPF   SEPARADOS POR COMAS, COMO EL SIGUIENTE EJEMPLO     |\n* |                                                                   |\n* |                USTS.DM4216.SPFOLOG,DDNAME,OPERLOG.PLEX$A          |\n* |                                                                   |\n* |      MAX. 26   PRIMERO: PREFIJO FICHEROS DE RESULTADOS            |\n* | (*)  OBL.  8*  SEGUNDO: DDNAME ASIGNADA FICHEROS INTERMEDIOS MDB  |\n* |      MAX. 29   TERCERO: PREFIJO DE FICHEROS DE OPERLOG EXISTENTES |\n* |                                                                   |\n* | (*) CAMPO OBLIGATORIO DE OCHO POSICIONES. LA ULTIMA INDICA LA     |\n* |     PANTALLA (SCREEN) QUE ESTA USANDO. SE UTILIZA PARA EL PO-     |\n* |     SICIONAMIENTO DIRECTO DE MENSAJES EN PANTALLA POR TPUT.       |\n* |                                                                   |\n* | PARAMETROS ... RECIBE OBLIGATORIAMENTE TRES PARAMETROS,           |\n* | BATCH SELECC.. SEPARADOS POR COMAS, POSICIONALMENTE FIJOS Y CUYOS |\n* |                VALORES SON UTILIZADOS PERO NO VERIFICADOS POR EL  |\n* |                PROGRAMA LO QUE PUEDE DAR LUGAR A ABENDS VARIOS,   |\n* |                SEGUN EL EJEMPLO                                   |\n* |                                                                   |\n* |                AAAAMMDD/HHMM-AAAAMMDD/HHMM,SYSNAME ,OPERLOG       |\n* |                                                                   |\n* |      FIJO 27   FECHA HORA DE COMIENZO - FECHA HORA DE FIN         |\n* |      FIJO  1   UNA COMA                                           |\n* |      FIJO  8   SYSNAME SI SE DESEA SELECCIONAR UN SYSNAME CONCRETO|\n* |                A ESPACIOS PARA SELECCIONAR TODO EL SYSPLEX        |\n* |      FIJO  1   UNA COMA                                           |\n* |      FIJO  8   PRIMER NIVEL DE FICHEROS DE OPERLOG                |\n* |  TOTAL -- 45   POSICIONES EN EL CASO DE BATCH SELECCION           |\n* +===================================================================+\n* | AVISO IMPORTANTE DE CARA AL FUENTE DE ESTE PROGRAMA               |\n* +===================================================================+\n* |                                                                   |\n* | LA NOTACION    *--->>>>    INDICA QUE HAY UNA BIFURCACION A LA    |\n* |                            TARJETA A BASE DE DESPLAZAMIENTOS CON  |\n* |                            SUMAS DE TAMANOS DE INSTRUCCIONES      |\n* |                            OJO A SU MODIFICACION.                 |\n* +-------------------------------------------------------------------+\nSYVERLOG INICIO    (12,11,10),COMEN='VISUALIZA DATOS SYSLOG. ',        X\n               VERSION=ZOS170E,                                        X\n               AMODE=24,                                               X\n               RMODE=24,                                               X\n               TIPO=NORENT\n*        +----------------------------+\n*>>>>>>>>| DETECCION DE ENTORNO       |--------------------------------\n*        +----------------------------+\n         XC        SWTSOIND,SWTSOIND   <> INDICAMOS BATCH\n         EXTRACT   ATSOIND,'S',FIELDS=(TSO)\n         L         R15,ATSOIND\n         TM        0(R15),X'80'        <> SI ESTA A UNOS ES TSO\n         BO        LB05                <> PROCESO INTERACTIVO ISPF\n*        +----------------------------+\n*>>>>>>>>| RECEPCION DE PARAMETROS    |--------------------------------\n*        | PROCESO BATCH DE SELECCION |\n*        +----------------------------+\nLB00     EQU       *\n         L         R2,0(,R2)           <> DIRECCIONAR EL PARAMETRO\n         SLR       R15,R15\n         LH        R15,0(R2)           <> TAMA#O DEL PARAMETRO\n         LTR       R15,R15             <> HAY PARAMETRO ?\n         BZ        LB00AERR\n         LA        1,L'PRBTIME+L'PRBPRF+L'PRBSYSNA+1+1\n         CR        R15,R1              <> MAXIMO SUMA DE LONGITUDES\n         BE        LB00A\nLB00AERR ABEND     770,DUMP            <> ERRORES EN EL PARAMETRO\n*                                      <> REVISAR LAS LONGITUDES QUE SE\n*                                      <> HAN PASADO DESDE EL JCL\n*\nLB00A    EQU       *\n         MVC       PRBTIME,2(R2)\n         MVC       PRBSYSNA,L'PRBTIME+1+2(R2)\n         MVC       PRBPRF,L'PRBTIME+L'PRBSYSNA+2+2(R2)\n*\n*        OBTENER EL NOMBRE DEL SYSPLEX PARA\n*        ADICIONARLO AL PREFIJO DE OPERLOG\n*\n*\n         MVI       @SYMBLIN,C' '\n         MVC       @SYMBLIN+1(L'@SYMBLIN-1),@SYMBLIN\n         MVC       @SYMBLIN(9),=C'&&SYSPLEX.'\n*\n         XC        SYMBP(SYMBP_LEN),SYMBP\n         LA        R1,@SYMBLIN\n         ST        R1,SYMBPPATTERN@\n         LA        R1,L'@SYMBLIN\n         ST        R1,SYMBPPATTERNLENGTH\n         LA        R1,WORKA15\n         ST        R1,SYMBPTARGET@\n         LA        R1,L'WORKA15\n         STCM      R1,B'1111',@SYMBLGT\n         LA        R1,@SYMBLGT\n         ST        R1,SYMBPTARGETLENGTH@\n*                  ---SYMBPSYMBOLTABLE@\n*                  ---SYMBPTIMESTAMP@\n         LA        R1,@SYMBRC\n         ST        R1,SYMBPRETURNCODE@\n         LINK      EP=ASASYMBM,MF=(E,SYMBP)\n*\n*        PREPARAMOS PREFIJO EN EL PARAMETRO DE INTERACTIVO ISPF\n*\n         CLC       PRBPRF,BLANCOS\n         BE        LB00AERR\n         MVC       PRMDSN,BLANCOS      <> CLEAR CAMPOS PARAMETRO\n         MVC       PRMDSN(8),PRBPRF    <> PREFIJO OPERLOG RECIBIDO\n         LA        R1,PRMDSN+L'PRMDSN-1\nLB00B1   EQU       *\n         CLI       0(R1),C' '\n         BNE       *+4+4\n         BCT       R1,LB00B1\n*\n         MVI       1(R1),C'.'\n         MVC       2(8,R1),WORKA15       <> PREFIJO OPERLOG.SYSPLEX\n*\n*        CALCULAR LA LONGITUD DEL PREFIXO OPERLOG.SYSPLEX\n*\n         LA        R15,PRMDSN+L'PRMDSN-1  APUNTAR AL ULTIMO\nLB00B2   EQU       *\n         CLI       0(R15),C' '\n         BNE       LB00B2X\n         BCT       R15,LB00B2\n*\nLB00B2X  EQU       *\n         LA        R1,PRMDSN           <> COMIENZO DEL CAMPO\n         SR        R15,R1              <> LONGITUD MENOS 1\n         LA        R15,1(R15)          <> LONGITUD REAL\n         ST        R15,PRMDSN_L        <> ALMACENAR LA LOONGITUD\n*\n         MVC       PRMDD,KMDBSEL       <> FORZADA MDBSEL EN BATCH\n*\n*        CAMPOS QUE SE OBTENDRIAN DEL PANEL\n*\n         MVC       @FECINI,PRBTIME\n         MVC       @HORAINI,PRBTIME+9\n         MVC       @FECFIN,PRBTIME+14\n         MVC       @HORAFIN,PRBTIME+23\n*\n         MVI       @VLOARG1,C'*'       <> TODOS LOS REGISTROS\n*\n         MVC       @VLOARGM(8),PRBSYSNA   SI HAY UN SISTEMA O BLANCOS\n*\n         B         LB15LOAD            <> IR A CARGA DE MODULOS\n*        +----------------------------+\n*>>>>>>>>| RECEPCION DE PARAMETROS    |--------------------------------\n*        | PROCESO INTERACTIVO ISPF   |\n*        +----------------------------+\nLB05     EQU       *\n         OI        SWTSOIND,X'80'      <> INDICAMOS ENTORNO TSO\n         L         R2,0(,R2)           <> DIRECCIONAR EL PARAMETRO\n         MVC       PRMDD,BLANCOS       <> CLEAR CAMPOS PARAMETRO\n         MVC       PRMDSN,BLANCOS      <> CLEAR CAMPOS PARAMETRO\n         MVC       PRMPRF,BLANCOS      <> CLEAR CAMPOS PARAMETRO\n         SLR       R15,R15\n         LH        R15,0(R2)           <> TAMA#O DEL PARAMETRO\n         LTR       R15,R15             <> HAY PARAMETRO ?\n         BZ        LB10ABE\n         LA        1,L'PRMDD+L'PRMDSN+L'PRMPRF+1+1\n         CR        R15,R1              <> MAXIMO SUMA DE LONGITUDES\n         BNH       LB10\nLB10ABE  ABEND     771,DUMP            <> ERRORES EN EL PARAMETRO\n*                                      <> EL PROGRAMADOR DE SISTEMAS\n*                                      <> DEBE REVISAR LA CLIST/REXX\n*                                      <> QUE DA CONTROL A ESTE PGM.\n*\nLB10MVC1 MVC       PRMPRF(0),0(R3)     <> MOVE PRMPRF\nLB10MVC2 MVC       PRMDD(0),0(R3)      <> MOVE PRMDD\nLB10MVC3 MVC       PRMDSN(0),0(R3)     <> MOVE PRMDSN\n*\nLB10     DS        0H                  <> GENERACION DE DATOS\n         LA        R3,2(R2)            <> R3 COMIENZO DE CADA CAMPO\n         LA        R4,2(R2)            <> R4 AVANCE POR EL PARAMETRO\n         LA        R5,2(R2)\n         AR        R5,R15              <> OCTETO SIGUIENTE A PARAMETRO\n*\nLB10A    DS        0H\n         CLI       0(R4),C','\n         BE        LB101\n         LA        R4,1(R4)\n         CR        R4,R5\n         BNL       LB10ABE             <> FINALIZADO EL PARAMETRO\n         B         LB10A               <> REPETIR BUCLE\n*\nLB101    DS        0H                  <> ENCONTRADA PRIMERA COMA\n         SR        R4,R3               <> LONGITUD PRIMER CAMPO\n         SLR       R14,R14             <> CLEAR R14\n         LA        R14,L'PRMPRF        <> LONGITUD MAXIMA PREFIJO\n         CR        R4,R14              <> MAYOR, ERROR\n         BH        LB10ABE\n         ST        R4,PRMPRF_L         <> ALMACENAR LONGITUD\n         BCTR      R4,R0               <> UNO MENOS PARA EXECUTE\n         EX        R4,LB10MVC1         <> MOVE VARIABLE\n         AR        R3,R4\n         AH        R3,KH2              <> EL UNO MENOS Y LA COMA\n         LR        R4,R3               <> PREPARAR SEGUNDO PARAMETRO\n*\nLB20A    DS        0H\n         CLI       0(R4),C','\n         BE        LB201\n         LA        R4,1(R4)\n         CR        R4,R5\n         BNL       LB10ABE             <> FINALIZADO EL PARAMETRO\n         B         LB20A               <> REPETIR BUCLE\n*\nLB201    DS        0H                  <> ENCONTRADA PRIMERA COMA\n         SR        R4,R3               <> LONGITUD PRIMER CAMPO\n         SLR       R14,R14             <> CLEAR R14\n         LA        R14,L'PRMDD         <> LONGITUD MAXIMA DD\n         CR        R4,R14              <> MAYOR, ERROR\n         BH        LB10ABE\n         BCTR      R4,R0               <> UNO MENOS PARA EXECUTE\n         EX        R4,LB10MVC2         <> MOVE VARIABLE\n         AR        R3,R4\n         AH        R3,KH2              <> EL UNO MENOS Y LA COMA\n         LR        R4,R3               <> PREPARAR TERCER PARAMETRO\n*\nLB30A    DS        0H\n         SR        R5,R3               <> LONGITUD ULTIMO\n         SLR       R14,R14             <> CLEAR R14\n         LA        R14,L'PRMDSN        <> LONGITUD MAXIMA DSN'S\n         CR        R5,R14              <> MAYOR, ERROR\n         BH        LB10ABE\n         ST        R5,PRMDSN_L         <> ALMACENAR LONGITUD\n         BCTR      R5,R0               <> UNO MENOS PARA EXECUTE\n         EX        R5,LB10MVC3         <> MOVE VARIABLE\n*\nLB30Z    DS        0H\n         CLC       PRMPRF,BLANCOS\n         BE        LB10ABE\n         CLC       PRMDD,BLANCOS\n         BE        LB10ABE\n         CLC       PRMDSN,BLANCOS\n         BE        LB10ABE\n*\n*        +----------------------------------------+\n*>>>>>>>>|   CARGA DE MODULOS                     |--------------------\n*        +----------------------------------------+\nLB15LOAD EQU       *\n         LOAD      EP=ISPLINK\n         ST        R0,AISPLINK\n         LOAD      EP=MDTPUT\n         ST        R0,AMDTPUT\n         LOAD      EP=MDFECHS\n         ST        R0,AMDFECHS\n         LOAD      EP=MDCATSI\n         ST        R0,AMDCATSI\n         LOAD      EP=MDALDIN          <> AUNQUE LLAMADA CALL ESTATICA\n         ST        R0,AMDALDIN\n         LOAD      EP=MDCVLOG          <> AUNQUE LLAMADA CALL ESTATICA\n         ST        R0,AMDCVLOG\n*        +----------------------------------------+\n*>>>>>>>>|   COMPROBACION DE ENTORNO              |--------------------\n*        +----------------------------------------+\n         TM        SWTSOIND,X'80'      <> SI ESTA A CEROS ES BATCH\n         BZ        LB40                <> PROCESO BATCH - SALTAMOS\n*        +----------------------------------------+\n*>>>>>>>>|   DEFINICION DE VARIABLES PANEL ISPF   |--------------------\n*        +----------------------------------------+\n         L         R3,KTVARL           <> NRO.ELEMTNOS TABLA\n         LA        R4,TVAR             <> COMIENDO DE LA TABLA\nLB20     DS        0H\n         LA        R5,LVARN(,R4)\n         L         R6,LVARD(,R4)\n         LA        R7,LVARL(,R4)\n         L         R15,AISPLINK\n         CALL      (15),(KVDEFINE,(R5),(R6),KCHAR,(R7)),VL\n         LA        R4,LVARE(,R4)\n         BCT       R3,LB20\n*        +-----------------------------------------+\n*>>>>>>>>|   LLAMADA A PANEL ISPF DE ACTUALIZACION |-------------------\n*        +-----------------------------------------+\nLB29     DS        0H\n         MVC       @MSL(L'PRMDSN),PRMDSN\n         B         LB30DIS\nLB30     DS        0H\n*\n*        EN EL R1 RECIBIMOS EL NUMERO DE MENSAJE EN LA TABLA\n*        DE MENSAJES PARA SU DISPLAY EN EL PANEL\n*\n         MH        R1,TBMENSAL+2\n         LA        R15,TBMENSA\n         LA        R15,0(R1,R15)       <> APUNTAR A MENSAJE\n         MVC       @MSL,0(R15)\nLB30DIS  DS        0H\n         L         R15,AISPLINK\n         CALL      (15),(KDISPLAY,KPANEL),VL\n*\n         LTR       R15,R15\n         BZ        LB40\n         B         ENDOFPG2\n*        +-----------------------------------------+\n*>>>>>>>>|   VERIFICACIONES DE CAMPOS DEL PANEL    |-------------------\n*        +-----------------------------------------+\nLB40     DS        0H\n         ZAP       TOTRGSEL,KP0        <> CLEAR REGISTROS SELECCIONADOS\n         LA        R9,WFECHS\n         USING     INFECHSA,R9         <> MAPA AREA DE FECHAS\n         XC        $CODIGO,$CODIGO\n         MVI       $CODIGO+1,X'04'     <> VERIFICAR GREGORIANA\n         MVI       $OBTJULI,C'S'       <> OBTENER JULIANA\n         MVI       $OBTBASE,C'S'       <> OBTENER FECHA BASE\n         MVC       $FEGREGO(4),@AI\n         MVC       $FEGREGO+4(2),@MI\n         MVC       $FEGREGO+6(2),@DI\n         SLR       R1,R1\n         LA        R1,AWFECHS\n         L         R15,AMDFECHS\n         OILH      R15,X'8000'         <> MDFECHS ESTA EN AMODE 31\n         BASSM     R14,R15\n         CLI       $CODIGO,X'00'\n         BE        *+4+4+4\n         LA        R1,0                <> MENSA=0\n         B         LB30                <> REDISPLAY DEL PANEL\n*---->>>\n         MVC       FECINIJ,$FEJULIA\n         MVC       BASINI,$FEBASE\n         XC        $CODIGO,$CODIGO\n         MVI       $CODIGO+1,X'04'\n         MVI       $OBTJULI,C'S'       <> OBTENER JULIANA\n         MVI       $OBTBASE,C'S'       <> OBTENER FECHA BASE\n         MVC       $FEGREGO(4),@AF\n         MVC       $FEGREGO+4(2),@MF\n         MVC       $FEGREGO+6(2),@DF\n         SLR       R1,R1\n         LA        R1,AWFECHS\n         L         R15,AMDFECHS\n         OILH      R15,X'8000'         <> MDFECHS ESTA EN AMODE 31\n         BASSM     R14,R15\n         CLI       $CODIGO,X'00'\n         BE        *+4+4+4\n         LA        R1,1                <> MENSAJE 1\n         B         LB30                <> REDISPLAY DEL PANEL\n*---->>>\n         MVC       FECFINJ,$FEJULIA\n         MVC       BASFIN,$FEBASE\n         CLC       BASINI,BASFIN\n         BL        LB40B\n         BH        LB40A\n         CLC       @HORAINI,@HORAFIN   <> COMPARAR HORAS PARA DIA IGUAL\n         BNH       LB40B\n         LA        R1,3                <> MENSAJE 3\n         B         LB30\nLB40A    DS        0H\n         LA        R1,2                <> MENSAJE 2\n         B         LB30                <> REDISPLAY DEL PANEL\nLB40B    DS        0H\n         XC        $CODIGO,$CODIGO     <> OBTENER FECHA DEL DIA\n         MVI       $OBTJULI,C'S'       <> OBTENER JULIANA\n         MVI       $OBTBASE,C'S'       <> OBTENER FECHA BASE\n         MVI       $OBTEDT,C'S'\n         SLR       R1,R1\n         LA        R1,AWFECHS\n         L         R15,AMDFECHS\n         OILH      R15,X'8000'         <> MDFECHS ESTA EN AMODE 31\n         BASSM     R14,R15\n         CLI       $CODIGO,X'00'\n         BE        *+4+4+4\n         LA        R1,5                <> MENSAJE 5\n         B         LB30                <> NO DEBERIA DE OCURRIR\n*---->>>                               <> FECHA BASE DEL DIA\n         MVC       BASHOY,$FEBASE\n         MVC       HORHOY,$HORA\n*\n         DROP      R9\n         CLC       BASFIN,BASHOY       <> VERIFICAR FECHA FINAL\n         BNH       *+4+4+4\n         LA        R1,6                <> MENSAJE 6\n         B         LB30\n*---->>>\n         BL        LB40D\n         CLC       @HORAFIN,HORHOY     <> PARA DIA FINAL HOY\n         BNH       *+4+4+4\n         LA        R1,7\n         B         LB30\n*---->>>\nLB40D    DS        0H\n         PACK      WORKD,BASINI        <> DIFERENCIA ENTRE FECHAS\n         CVB       R3,WORKD\n         PACK      WORKD,BASFIN\n         CVB       R4,WORKD\n         SR        R4,R3\n         CH        R4,KH9\n         BNH       *+4+4+4\n         LA        R1,8                <> MENSAJE 8\n         B         LB30\n*---->>>\n         MVC       HORINIE(2),@HI      <> PREPARAR HORA INICIO EDITADA\n         MVI       HORINIE+2,C'.'      <> PREPARAR HORA INICIO EDITADA\n         MVC       HORINIE+3(2),@NI    <> PREPARAR HORA INICIO EDITADA\n*\n         MVC       HORFINE(2),@HF      <> PREPARAR HORA FIN EDITADA\n         MVI       HORFINE+2,C'.'      <> PREPARAR HORA FIN EDITADA\n         MVC       HORFINE+3(2),@NF    <> PREPARAR HORA FIN EDITADA\n*\n         LA        R15,@VNJOB          <> NUMERO DE JOB\n         LA        R1,L'@VNJOB         <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VNJOB$\n*\n         LA        R15,@VNSTC          <> NUMERO DE STC\n         LA        R1,L'@VNSTC         <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VNSTC$\n*\n         LA        R15,@VNTSU          <> NUMERO DE TSU\n         LA        R1,L'@VNTSU          <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VNTSU$\n*\n         LA        R15,@VLOARGD        <> ARGUMENTO DESDE\n         LA        R1,L'@VLOARGD        <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VLOARGD$\n*\n         LA        R15,@VLOARGH        <> ARGUMENTO HASTA\n         LA        R1,L'@VLOARGH       <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VLOARGH$\n*\n         LA        R15,@VLOARG1        <> ARGUMENTO UNO\n         LA        R1,L'@VLOARG1       <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VLOARG1$\n*\n         LA        R15,@VLOARG2        <> ARGUMENTO DOS\n         LA        R1,L'@VLOARG2       <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VLOARG2$\n*\n         LA        R15,@VLOARG3        <> ARGUMENTO TRES\n         LA        R1,L'@VLOARG3       <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VLOARG3$\n*\n         LA        R15,@VLOSDSN        <> ARGUMENTO TRES\n         LA        R1,L'@VLOSDSN       <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VLOSDSN$\n*\n         LA        R15,@VLOARGM        <> ARGUMENTO MAQUINAS\n         LA        R1,L'@VLOARGM       <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VLOARGM$\n*\n         LA        R15,@VLOARGN        <> NOMBRE DE JOB/STC/TSU\n         LA        R1,L'@VLOARGN       <> SU LONGITUD TOTAL\n         BAL       R14,RTLO00          <> ESTABLECER SU LONGITUD REAL\n         ST        R1,VLOARGN$\n*\n         CLI       @X,C' '             <> COMPARADOR-1 A ESPACIOS\n         BNE       LB40D01             <> SI SALTAR\n         CLC       VLOARG2$,KF0\n         BNE       LB40DERR            <> ERROR SINCRONISMO\n         CLC       VLOARG3$,KF0\n         BNE       LB40DERR            <> ERROR SINCRONISMO\n         B         LB40D04\nLB40D01  DS        0H                  <> @X ESTA A ESPACIOS\n         CLC       VLOARG1$,KF0\n         BE        LB40DERR            <> ERROR SINCRONISMO\n         CLC       VLOARG2$,KF0\n         BE        LB40DERR            <> ERROR SINCRONISMO\n*\n         CLI       @Y,C' '\n         BNE       LB40D02\n         CLC       VLOARG3$,KF0\n         BNE       LB40DERR            <> ERROR SINCRONISMO\n         B         LB40D04\nLB40D02  CLI       @X,C' '\n         BE        LB40DERR\n         CLC       VLOARG3$,KF0\n         BE        LB40DERR            <> ERROR SINCRONISMO\n         B         LB40D04\nLB40DERR DS        0H\n         LA        R1,14               <> ERROR SINCRONISMO ARGS\n         B         LB30\n*\nLB40D04  DS        0H\n         MVI       GLBID,C' '          <> BLANQUEAR GLBID\n         MVC       GLBID+1(L'GLBID-1),GLBID\n*\n         L         R1,VNJOB$\n         LTR       R1,R1\n         BZ        *+4+6+4+2+2+4\n         MVC       JOBID,KJOB          <> CONSTANTE DE JOB\n         LA        R15,JOBID+L'JOBID   <> DIRECCIONAR A VALOR NUMERICO\n         SR        R15,R1\n         BCTR      R1,R0\n         EX        R1,JOBIDMVC         <> EFECTUAR MOVIMIENTO\n*---->>>>\n         L         R1,VNSTC$\n         LTR       R1,R1\n         BZ        *+4+6+4+2+2+4\n         MVC       STCID,KSTC          <> CONSTANTE DE JOB\n         LA        R15,STCID+L'STCID\n         SR        R15,R1\n         BCTR      R1,R0\n         EX        R1,STCIDMVC         <> EFECTUAR MOVIMIENTO\n*---->>>>\n         L         R1,VNTSU$\n         LTR       R1,R1\n         BZ        *+4+6+4+2+2+4\n         MVC       TSUID,KTSU          <> CONSTANTE DE JOB\n         LA        R15,TSUID+L'TSUID   <> DIRECCIONAR A VALOR NUMERICO\n         SR        R15,R1\n         BCTR      R1,R0\n         EX        R1,TSUIDMVC         <> EFECTUAR MOVIMIENTO\n*---->>>>\n         CLC       GLBID,BLANCOS       <> ALGUN XXXID ?\n         BNE       *+4+6+4+6+4+4+4\n         CLC       @VLOARGN,BLANCOS    <> ALGUN NOMBRE DE JOB\n         BNE       *+4+6+4+4+4\n         CLC       VLOARG1$,KF0        <> ALGUN ARGUMENTO ?\n         BNE       *+4+4+4\n         LA        R1,4                <> SOLICITAR ALGUN DATO\n         B         LB30\n*---->>>>\n         CLC       GLBID,BLANCOS       <> XXXID O JOBNAME SON EXCLUSIV.\n         BE        *+4+6+4+4+4         <> ESPACIOS, SALTAMOS\n         CLC       @VLOARGN,BLANCOS    <> XXXID NO BLANCOS\n         BE        *+4+4+4\n         LA        R1,13               <> INFORMAR EXCLUSIVIDAD\n         B         LB30\n*---->>>>\n         CLC       @VLOARGN,BLANCOS    <> XXXID O JOBNAME SON EXCLUSIV.\n         BE        *+4+6+4+4+4         <> ESPACIOS, SALTAMOS\n         CLC       GLBID,BLANCOS       <> XXXID NO BLANCOS\n         BE        *+4+4+4\n         LA        R1,13               <> INFORMAR EXCLUSIVIDAD\n         B         LB30\n*---->>>>\n         MVI       TBMAQS,C'*'         <> INDICAR QUE NO HAY\n         L         R15,VLOARGM$        <> LONGITUD REAL\n         LTR       R15,R15\n         BZ        LB40E               <> NO, SALTAR IDENTIF.MAQS\n         BCTR      R15,R0              <> UNO MENOS PARA MOVE/EXECUTE\n         EX        R15,MAQMVC\n         EX        R15,MAQTR\n         EX        R15,MAQCLC\n         BE        *+4+4+4\n         LA        R1,9\n         B         LB30\n*---->>>>\n         LA        R9,TBMAQS           <> DIRECCIONAR TABLA MAQUINAS\n*\n         LA        R3,@VLOARGM         <> CAMPO DEL PANEL 60 POS\n         L         R4,VLOARGM$         <> MAXIMO NUMERO DE POSICIONES\n*\nLB40M$A  DS        0H\n         MVC       0(8,R9),BLANCOS     <> BLANQUEA ESA MAQUINA\n         MVC       8(8,R9),KASTERIS    <> ASTERISCA LA SIGUIENTE\n         LR        R5,R3               <> R5 PRINCIPIO DE UNA MAQUINA\n         SLR       R6,R6               <> LONGITUD DE UNA MAQUINA\nLB40M$   DS        0H\n         CLI       0(R3),C','          <> BUSCANDO LA COMA\n         BE        LB40M$E\n         LA        R6,1(,R6)           <> SUMA 1 A CONT POSICIONES\n         LA        R3,1(,R3)           <> AVANZA UNA POSICION\n         BCT       R4,LB40M$           <> RESTA CONTADOR DE POSIC.\n*\nLB40M$E  DS        0H\n         CH        R6,KH8              <> MAXIMO OCHO POSICIONES\n         BNH       *+4+4+4\n         LA        R1,9                <> ERROR EN CODIGOS MAQUINAS\n         B         LB30\n*---->>>\n         CH        R6,KH0              <> ESTA A CERO POSICIONES\n         BNE       *+4+4+4\n         LA        R1,9                <> ERROR EN CODIGOS MAQUINAS\n         B         LB30\n*---->>>\n         BCTR      R6,R0\n         EX        R6,LB40$MVC         <> CARGAR ENTRADA MAQUINA\n         LA        R9,8(,R9)           <> AVANZAR TABLA DE MAQUINAS\n         LTR       R4,R4\n         BZ        LB40E\n         LA        R3,1(,R3)           <> SALTAMOS LA COMA\n         BCTR      R4,R0               <> AVANZAMOS POSIC DE LA COMA\n         LTR       R4,R4               <>\n         BNZ       LB40M$A\n         B         LB40E\n*\nLB40E    DS        0H\n         LA        R8,WFECHS\n         USING     INFECHSA,R8         <> MAPA AREA DE FECHAS\n         XC        $CODIGO,$CODIGO\n         MVI       $OBTEDT,C'S'\n         MVI       $OBTGREG,C'S'\n         MVI       $OBTJULI,C'S'\n         MVI       $OBTBASE,C'S'\n         SLR       R1,R1\n         LA        R1,AWFECHS\n         L         R15,AMDFECHS\n         OILH      R15,X'8000'         <> MDFECHS ESTA EN AMODE 31\n         BASSM     R14,R15\n         CLI       $CODIGO,X'00'\n         BE        *+4+4+4\n         LA        R1,5                <> MENSAJE 5\n         B         LB30                <> NO DEBERIA DE OCURRIR\n*---->>>                               <> FECHA BASE DEL DIA\n         MVC       HOYGREGO,$FEGREGO   <> FORMATO SYSLOG CLASICO\n         NI        HOYGREGO,X'CF'\n         MVI       HOYPUNT2,C'.'\n         MVI       HOYHACHE,C'H'\n         MVC       HOYHORA,$HORA\n         DROP      R8\n*\n         MVI       STSAVEDS,C' '\n         MVC       STSAVEDS+1(L'STSAVEDS-1),STSAVEDS\n         MVC       STSAVEDS(L'PRMPRF),PRMPRF\n         LA        R15,STSAVEDS\n         A         R15,PRMPRF_L        <> SALTAR SU LONGITUD\n         MVI       0(R15),C'.'         <> PUNTO DE SEPARACION\n*\n         CLC       @VLOSDSN,BLANCOS    <> GENERAR UN TEMPORAL ?\n         BNE       LB40EX01            <> NO, SALTAMOS\n*\n*        SE HA PEDIDO GENERAR UN FICHERO TEMPORAL\n*\n         MVC       1(L'HOYSTAMP,R15),HOYSTAMP\n         B         LB40E9              <> COMENZAR LOS PROCESOS\n*\n*        SE HA PEDIDO GENERAR UN FICHERO DE USUARIO\n*\nLB40EX01 DS        0H\n         MVC       1(L'@VLOSDSN,R15),@VLOSDSN\n         B         LB40E9              <> COMENZAR LOS PROCESOS\n*        +----------------------------------------+\n*>>>>>>>>|   GENERACION DE LOS NOMBRES DE FICHERO |--------------------\n*        |   DE OPERLOG A LOCALIZAR               |\n*        |   EN EL AREA PRMDSN ESTA EL PREFIJO    |\n*        +----------------------------------------+\n*        |   ACTUALIZACION 18-07-2006             |\n*        |                                        |\n*        |   AL CAMBIAR LOS NOMBRES EXTERNOS A    |\n*        |   FECHA GMT PARA SALVAR LOS CAMBIOS DE |\n*        |   HORA, LOS NOMBRES DE FICHERO A       |\n*        |   BUSCAR DEBEN SER POR HORA GMT, QUE   |\n*        |   SE OBTIENE A PARTIR DE LA TECLEADA   |\n*        |   EN EL PANEL MEDIANTE LLAMADA AL      |\n*        |   MODULO DE FECHAS FUNCION-GMT.        |\n*        +----------------------------------------+\nLB40MVSD MVC       DSNDESDE(0),PRMDSN\nLB40E9   DS        0H\n*\n         TM        SWTSOIND,X'80'      <> SI ESTA A CEROS ES BATCH\n         BZ        LB40EZ1             <> PROCESO BATCH - SALTAMOS\n*\n*        LIMPIEZA DE MENSAJES DE ERROR ANTERIOR PARA NO TENER QUE\n*        HACER RE-DISPLAY DEL PANEL LO QUE OBLIGARIA AL USUARIO A\n*        TECLEAR DOS VECES ENTER.\n*\n*        SE UTILIZA UN ACCESO DIRECTO A LA PANTALLA, POR ELLO SOLO\n*        SE UTILIZA EN LA SCREEN 1, QUE ESTARA LOGICAMENTE POSICIONADA\n*        EN LA LINEA 1\n*\n         MVC       $TPUTX(2),KC04\n         CLI       PRMDD+7,C'1'\n         BNE       LB40EZ\n         MVI       $TPUTTXT,C' '\n         MVC       $TPUTTXT+1(L'$TPUTTXT-1),$TPUTTXT\n         L         R15,AMDTPUT\n         CALL      (15),($TPUTPRM)\n*\nLB40EZ1  EQU       *\n*        INICIALIZACIONES DE CADA BUSQUEDA\nLB40EZ   DS        0H\n         XC        SWRANGO,SWRANGO     <> CLEAR SWITCHES BUSQUEDAS\n         XC        SWDESDE,SWDESDE     <> CLEAR BUSQUEDAS DSNDESDE\n         MVC       DSNDESDE,BLANCOS\n         MVC       DSNHASTA,BLANCOS\n         MVC       DSNWK01,BLANCOS\n         MVC       DSNWK02,BLANCOS\n         MVI       RTCABRID+1,X'00'\n         MVI       LB60SW+1,X'00'\n         XC        $CLAVEMD,$CLAVEMD   <> ACCESOS A MDCATSI\n*\n         L         R3,PRMDSN_L         <> LONGITUD DEL PARAMETRO\n         BCTR      R3,R0               <> RESTAR UNO PARA EXECUTE\n         EX        R3,LB40MVSD\n         LA        R3,DSNDESDE\n         A         R3,PRMDSN_L\n         MVI       00(R3),C'.'         <> PUNTO DE SEPARACION\n         MVI       09(R3),C'.'         <> PUNTO DE SEPARACION\n         MVI       10(R3),C'T'         <> COMIENZO DE HORA\n         MVC       DSNHASTA,DSNDESDE   <> ESTRUCTURA SIMILAR EN HASTA\n*\n*        PASAMOS LAS FECHAS-HORAS DE INCIO Y FIN OBTENIDAS DEL\n*        PANEL A LAS MISMAS PERO VERSION GMT PARA LOCALIZAR FICHEROS\n*\n         LA        R9,WFECHS\n         USING     INFECHSA,R9         <> MAPA AREA DE FECHAS\n         XC        $CODIGO,$CODIGO\n         MVI       $CODIGO+1,X'0B'     <> GMTEAR LA FECHA\n         MVC       $FEGMT(8),@FECINI\n         MVC       $FEGMT+8(4),@HORAINI\n         SLR       R1,R1\n         LA        R1,AWFECHS\n         L         R15,AMDFECHS\n         OILH      R15,X'8000'         <> MDFECHS ESTA EN AMODE 31\n         BASSM     R14,R15\n         CLI       $CODIGO,X'00'\n         BE        *+4+4+4\n         LA        R1,17               <> MENSA=17\n         B         LB30                <> REDISPLAY DEL PANEL\n*---->>>\n         MVC       @GMTINI,$FEGMT      <> PASAR A CAMPOS \"GEMTEADOS\"\n         MVC       @HORGINI,$FEGMT+8\n*\n         XC        $CODIGO,$CODIGO\n         MVI       $CODIGO+1,X'0B'     <> GMTEAR LA FECHA\n         MVC       $FEGMT(8),@FECFIN\n         MVC       $FEGMT+8(4),@HORAFIN\n         SLR       R1,R1\n         LA        R1,AWFECHS\n         L         R15,AMDFECHS\n         OILH      R15,X'8000'         <> MDFECHS ESTA EN AMODE 31\n         BASSM     R14,R15\n         CLI       $CODIGO,X'00'\n         BE        *+4+4+4\n         LA        R1,17               <> MENSA=17\n         B         LB30                <> REDISPLAY DEL PANEL\n*---->>>\n         MVC       @GMTFIN,$FEGMT      <> PASAR A CAMPOS \"GEMTEADOS\"\n         MVC       @HORGFIN,$FEGMT+8\n*\n         MVC       1(L'@GMTINI,R3),@GMTINI\n         NI        1(R3),X'CF'         <> CONVERTIR A LETRA\n         MVC       11(L'@HORGINI,R3),@HORGINI\n         MVC       11+L'@HORGINI(2,R3),KCEROS\n*\n         LA        R3,DSNHASTA\n         A         R3,PRMDSN_L\n         MVC       1(L'@GMTFIN,R3),@GMTFIN\n         NI        1(R3),X'CF'         <> CONVERTIR A LETRA\n         MVC       11(L'@HORGFIN,R3),@HORGFIN\n         MVC       11+L'@HORGFIN(2,R3),KCEROS\n*\nLB40F    DS        0H\n         BAL       R9,RTCA00           <> OBTENER DSNAME\n         CLI       DSNOBTEN,X'FF'      <> FINAL DE FICHERO\n         BE        ENDOFPGM\n*\n* DISPLAY DE INFORMACION BAROMETRICA\n*\n         TM        SWTSOIND,X'80'      <> SI ESTA A CEROS ES BATCH\n         BZ        LB60AP1             <> PROCESO BATCH - SALTAMOS\n*\n         LA        R3,TBTPUTMS\n         MVC       20(L'DSNOBTEN,R3),DSNOBTEN\n         L         R4,KF20             <> LINEA INICIAL BASICA\n         CLI       PRMDD+7,C'1'        <> SCREEN DE ISPF 1?\n         BE        *+4+4               <> SALTAMOS\n         LA        R4,1(,R4)           <> ZSCREEN=2 SUMAMOS UNO\n*---->>>\n         ST        R4,STLINBAR         <> LINEA COMIENZO BAROMETRICO\nLB50     DS        0H\n         CLI       0(R3),C'*'          <> FIN DE TABLA\n         BE        LB50A\n         CVD       R4,WORKD\n         UNPK      $TPUTX(2),WORKD+6(2)\n         OI        $TPUTX+1,X'F0'\n         MVC       $TPUTTXT,000(R3)\n         L         R15,AMDTPUT\n         CALL      (15),($TPUTPRM)\n         LA        R4,1(R4)\n         LA        R3,80(R3)\n         B         LB50\n*\nLB50A    DS        0H\n         SLR       R3,R3\n         LA        R3,4                <> 4 PARPADEOS\n         L         R1,STLINBAR         <> LINEA DE COMIENZO BAROMETRICO\n         CVD       R1,WORKD\n         UNPK      $TPUTX(2),WORKD+6(2)\n         OI        $TPUTX+1,X'F0'\n         MVC       $TPUTTXT,TBTPUTMS\n         MVC       $TPUTTXT+20(L'DSNOBTEN),DSNOBTEN\nLB50A1   DS        0H\n         CLI       $TPUTTXT+20,C' '   <> ESTA A BLANCOS\n         BE        *+4+6+4\n         MVC       $TPUTTXT+20(44),BLANCOS\n         B         *+4+6\n         MVC       $TPUTTXT+20(44),DSNOBTEN\n         L         R15,AMDTPUT\n         CALL      (15),($TPUTPRM)\n         BCT       R3,LB50A1\n*\n*        ASIGNACION DINAMICA DE FICHEROS\n*\nLB60AP1  EQU       *\n         XC        MDALWORK,MDALWORK\n         L         R15,AMDALDIN\n         CALL      (15),(MDALWORK,KOPINIT),VL\n         LTR       R15,R15\n         BZ        *+4+4+4\n         LA        R1,11\n         B         LB30\n*--->>>>\n         MVC       MDDAT2B+4(L'DSNOBTEN),DSNOBTEN\n         LA        R1,MDDAT2B+L'MDDAT2B-1\nLB60A    DS        0H\n         CLI       0(R1),C' '\n         BNE       *+4+4\n         BCT       R1,LB60A\n*--->>>>\n         MVI       2(R1),C';'          <> INSERCCION ; DEL MDALDIN\n         L         R15,AMDALDIN\n         CALL      (15),(MDALWORK,KOPALLOC,MDDAT2A,MDDAT2B),VL\n         LTR       R15,R15             <> CODIGO RETORNO MDALDIN\n         BZ        *+4+4+4\n         LA        R1,11               <> MENSAJE 11\n         B         LB30                <> REDISPLAY DEL PANEL\n*--->>>>\n         OPEN      (FOPERLOG,(INPUT))\n         SLR       R7,R7               <> CONTADOR DE ACCESOS\n         SLR       R8,R8               <> CONTADOR DE DIEZMILES\n         MVI       $TPUTTXT,C' '\n         MVC       $TPUTTXT+1(L'$TPUTTXT-1),$TPUTTXT\n*\nLB60SW   NOP       LB60READ\n         MVI       *-3,X'F0'           <> MARCAR SW ANTERIOR\n         LA        R1,FSESLOG          <> DIRECCIONAR LA DCB\n         USING     IHADCB,R1           <> USING DCB\n         MVC       DCBDDNAM,PRMDD      <> MOVER DDNAME A UTILIZAR\n         DROP      R1\n         OPEN      (FSESLOG,(OUTPUT))  <> FICHERO DE RESULTADOS\n*\nLB60READ DS        0H\n         GET       FOPERLOG\n         LR        R3,R1               <> R3 DIRECCIONA REGIS ENTRADA\n         LA        R7,1(R7)            <> SUMAR 1 A REGISTROS LEIDOS\n         C         R7,KF10000          <> DIEZ MIL LINEAS\n         BNE       LB60XX\n         SLR       R7,R7               <> CLEAR CONTADOR\n         LA        R8,1(R8)            <> AUMENTO INDICADOR\n*\n*        BAROMETRIA\n*\n*\n         TM        SWTSOIND,X'80'      <> SI ESTA A CEROS ES BATCH\n         BZ        LB60XX              <> PROCESO BATCH - SALTAMOS\n*\n         L         R1,STLINBAR         <> LINEA DE COMIENZO BAROMETRICO\n         LA        R1,1(,R1)           <> LINEA SIGUIENTE\n         CVD       R1,WORKD\n         UNPK      $TPUTX(2),WORKD+6(2)\n         OI        $TPUTX+1,X'F0'\n         LA        R15,$TPUTTXT\n         AR        R15,R8\n         MVI       0(R15),C'>'\n         BCTR      R15,R0\n         MVI       0(R15),C'='\n         L         R15,AMDTPUT\n         CALL      (15),($TPUTPRM)\n*\nLB60XX   DS        0H\n*\n*        BUSQUEDA EN LOS FICHEROS\n*        R3 DIRECCIONA EL REGISTRO LEIDO\n*\n         USING     MDB,R3              <> DIRECCIONANDO MDB\n         LA        R4,MDBHLEN(R3)\n         USING     MDBG,R4             <> DIRECCIONANDO MDBG\n         LR        R5,R4\n         MVC       WORKH,MDBGLEN\n         AH        R5,WORKH\n         USING     MDBSCP,R5\n         LR        R6,R5\n         MVC       WORKH,MDBCLEN\n         AH        R6,WORKH\n         USING     MDBT,R6\n*        +------------------------------------------------------+\n*>>>>>>>>|   LOCALIZANDO FINAL DE DATOS .......                 |------\n*        +------------------------------------------------------+\n         CLC       MDBGDSTP(L'FECFINJ),FECFINJ\n         BH        LB60Z10             <> MAYOR, SE ACABO TTO.\n         BL        LB60A00             <> MENOR, ESTAMOS EN RANGO\n*                                      <> FECHA IGUAL\n         CLC       MDBGTIMH(L'HORFINE),HORFINE\n         BH        LB60Z10             <> MAYOR, SE ACABO\n         B         LB60A00             <> ESTAMOS EN RANGO\n*        +------------------------------------------------------+\n*>>>>>>>>|   SELECCIONANDO MAQUINA                              |------\n*        +------------------------------------------------------+\nLB60A00  DS        0H\n         CLI       TBMAQS,C'*'         <> HAY SELECCION ?\n         BE        LB60A10             <> NO SALTAMOS BUSQUEDA\n         LA        R15,TBMAQS          <> TABLA DE MAQUINAS\nLB60A00B DS        0H\n         CLI       0(R15),C'*'\n         BE        LB60READ            <> NO ES DE SELECCION, OTRO\n         CLC       MDBGOSNM,0(R15)     <> COINCIDE MAQUINA SISTEMA\n         BE        LB60A10             <> SISTEMA DETECTADO\n         LA        R15,8(R15)          <> POSICIONAR OTRA MAQUINA\n         B         LB60A00B\n*        +------------------------------------------------------+\n*>>>>>>>>|   LOCALIZANDO COMIENZO DE DATOS ....                 |------\n*        +------------------------------------------------------+\nLB60A10  DS        0H\n         TM        SWRANGO,X'80'       <> YA SE DETECTO EL PRINCIPIO ?\n         BO        LB60A20             <> SALTAMOS DETECCION PRIMARIA\n*\n         CLC       MDBGDSTP(L'FECINIJ),FECINIJ\n         BL        LB60READ            <> LEER  OTRO REGISTRO\n         BH        LB60A05             <> MARCAR DETECTADO INCIO\n         CLC       MDBGTIMH(L'HORINIE),HORINIE  <> FECHA IGUAL\n         BL        LB60READ\nLB60A05  DS        0H\n         OI        SWRANGO,X'80'       <> ACTIVAR COMIENZO HALLADO\n*        +------------------------------------------------------+\n*>>>>>>>>|   ESTAMOS EN RANGO FECHA-HORA PEDIDA                 |------\n*        |   LOCALIZANDO DESDE (SI EXISTE)                      |\n*        +------------------------------------------------------+\nLB60A20  DS        0H\n         TM        SWRANGO,X'C0'       <> YA TRATADO EL DESDE ?\n         BO        LB60A30             <> SALTANDO AL HASTA\n         CLC       @VLOARGD,BLANCOS    <> SOLICITADO UN DESDE ?\n         BNE       LB60A20A\n         OI        SWRANGO,X'40'       <> COMO LOCALIZADO DESDE\n         B         LB60A30\nLB60A20A DS        0H\n         LA        R1,@VLOARGD\n         ST        R1,WBUSDAT\n         MVC       WBUSDATL,VLOARGD$\n         ST        R3,WBUSCAM\n         XC        WBUSCAML,WBUSCAML\n         MVC       WBUSCAML+2(2),0(R3)\n         BAL       R14,RTBUS           <> REALIZAR LA BUSQUEDA\n         TM        SWLOC,X'80'         <> LOCALIZADO EL DESDE?\n         BZ        LB60READ            <> NO LEER OTRO REGISTRO\n         OI        SWRANGO,X'40'       <> INDICAR LOCALIZACION DE DESDE\n         B         LB60A50             <> REGISTRO SELECCIONADO\n*        +------------------------------------------------------+\n*>>>>>>>>|   ESTAMOS EN RANGO FECHA-HORA PEDIDA                 |------\n*        |   LOCALIZANDO HASTA (SI EXISTE)                      |\n*        +------------------------------------------------------+\nLB60A30  DS        0H\n         CLC       @VLOARGH,BLANCOS    <> SOLICITADO UN HASTA ?\n         BE        LB60A50             <> NO REGISTRO SELECCIONADO\n         LA        R1,@VLOARGH\n         ST        R1,WBUSDAT\n         MVC       WBUSDATL,VLOARGH$\n         ST        R3,WBUSCAM\n         XC        WBUSCAML,WBUSCAML\n         MVC       WBUSCAML+2(2),0(R3)\n         BAL       R14,RTBUS           <> REALIZAR LA BUSQUEDA\n         TM        SWLOC,X'80'         <> LOCALIZADO EL HASTA\n         BO        LB60Y10             <> SE ACABO EL TRATAMIENTO\n         B         LB60A50\n*        +------------------------------------------------------+\n*>>>>>>>>|   REGISTRO SELECCIONADO DENTRO DEL RANGO             |------\n*        +------------------------------------------------------+\nLB60A50  DS        0H\n         CLC       GLBID,BLANCOS       <> HAY ALGUN XXXID?\n         BE        LB60A50M            <> NO, SALTAMOS COMPROBACION\n         CLC       MDBCOJID,BLANCOS    <> HAY DATO EN EL REGISTRO ?\n         BE        LB60READ            <> SI, SELECCIONAR\n         CLC       MDBCOJID,JOBID      <> NO, LEER OTRO\n         BE        LB60A50S            <> SI, SELECCIONAR\n         CLC       MDBCOJID,STCID      <> COINCIDE STC?\n         BE        LB60A50S            <> SI, SELECCIONAR\n         CLC       MDBCOJID,TSUID      <> COINCIDE TSU?\n         BNE       LB60READ            <> NO SELECCIONADO, LEER OTRO\nLB60A50S DS        0H\n         CLC       VLOARG1$,KF0        <> HAY MAS ARGUMENTOS ?\n         BNE       LB60A60             <> SI, SEGUIR PROCESANDO\n         PUT       FSESLOG,(R3)\n         AP        TOTRGSEL,KP1        <> SUMAR CONTADOR REGISTROS SEL.\n         B         LB60READ\n*\nLB60A50M DS        0H\n         CLC       @VLOARGN,BLANCOS    <> CONSIGNADO UN JOBNAME ?\n         BE        LB60A60             <> NO, SALTAMOS\n         CLC       MDBCOJBN,@VLOARGN   <> COINCIDE JOBNAME ORIGINATING\n         BNE       LB60READ            <> SI, SELECCIONAR\n         CLC       VLOARG1$,KF0        <> HAY MAS ARGUMENTOS ?\n         BNE       LB60A60             <> SI, SEGUIR PROCESANDO\n         PUT       FSESLOG,(R3)\n         AP        TOTRGSEL,KP1        <> SUMAR CONTADOR REGISTROS SEL.\n         B         LB60READ\n*        +------------------------------------------------------+\n*>>>>>>>>|   PASADOS LOS FILTROS ANTERIORES                     |------\n*        |   BUSQUEDA DE ARGUMENTOS 1 A 3 CON SUS Y / O         |------\n*        +------------------------------------------------------+\nLB60A60  DS        0H                  <> BUSQUEDA Y/O Y ARGUMENTOS\n         XC        SWARG,SWARG\n         CLC       VLOARG1$,KF0        <> NO HAY ARGUMENTO-1 ?\n         BE        LB60A60A\n         CLC       VLOARG1$,KF1        <> ARGUMENTO 1 LONGITUD 1\n         BNE       LB60A60C\n         CLI       @VLOARG1,C'*'       <> SELECCIONAR TODO\n         BNE       LB60A60C            <> NO,PROCESO COMPARATIVO NORMAL\nLB60A60A DS        0H                  <> BUSQUEDA Y/O Y ARGUMENTOS\n         PUT       FSESLOG,(R3)\n         AP        TOTRGSEL,KP1        <> SUMAR CONTADOR REGISTROS SEL.\n         B         LB60READ\nLB60A60C DS        0H                  <> BUSQUEDA Y/O Y ARGUMENTOS\n         LA        R1,@VLOARG1\n         ST        R1,WBUSDAT\n         MVC       WBUSDATL,VLOARG1$\n         ST        R3,WBUSCAM\n         XC        WBUSCAML,WBUSCAML\n         MVC       WBUSCAML+2(2),0(R3)\n         BAL       R14,RTBUS           <> REALIZAR LA BUSQUEDA\n         TM        SWLOC,X'80'         <> LOCALIZADO EL HASTA\n         BZ        *+4+4\n         OI        SWARG,X'80'         <> DETECTADO ARGUMENTO-1\n*--->>>>\n         CLC       VLOARG2$,KF0        <> EXISTE ARGUMENTO-2\n         BE        LB60A60Q\n         LA        R1,@VLOARG2\n         ST        R1,WBUSDAT\n         MVC       WBUSDATL,VLOARG2$\n         ST        R3,WBUSCAM\n         XC        WBUSCAML,WBUSCAML\n         MVC       WBUSCAML+2(2),0(R3)\n         BAL       R14,RTBUS           <> REALIZAR LA BUSQUEDA\n         TM        SWLOC,X'80'         <> LOCALIZADO EL HASTA\n         BZ        *+4+4\n         OI        SWARG,X'40'         <> DETECTADO ARGUMENTO-2\n*--->>>>\n         CLC       VLOARG3$,KF0        <> EXISTE ARGUMENTO-3\n         BE        LB60A60Q\n         LA        R1,@VLOARG3\n         ST        R1,WBUSDAT\n         MVC       WBUSDATL,VLOARG3$\n         ST        R3,WBUSCAM\n         XC        WBUSCAML,WBUSCAML\n         MVC       WBUSCAML+2(2),0(R3)\n         BAL       R14,RTBUS           <> REALIZAR LA BUSQUEDA\n         TM        SWLOC,X'80'         <> LOCALIZADO EL HASTA\n         BZ        *+4+4\n         OI        SWARG,X'20'         <> DETECTADO ARGUMENTO-3\n*--->>>>\nLB60A60Q DS        0H\n*\n*        LA CODIFICACION PARA EL TRATAMIENTO DE LOS ARGUMENTOS Y LAS\n*        COMPARACIONES NO ES MUY FINA, PERO FUNCIONA. PROMETO PROCEDER\n*        A SU ARREGLO Y MEJORA ALGUN DIA SI DISPONGO DE TIEMPO.\n*\n         CLI       @X,C' '             <> SOLO UN ARGUMENTO ?\n         BNE       LB70A               <> NO, HAY MAS DE UNO\n         TM        SWARG,X'80'\n         BZ        LB60READ\n         B         LB70SEL\nLB70A    DS        0H\n         CLC       @COMPA,KCO\n         BNE       LB70B\n         TM        SWARG,X'C0'         <> ARG-1 O ARG-2\n         BZ        LB60READ\n         B         LB70SEL\nLB70B    DS        0H\n         CLC       @COMPA,KCOO\n         BNE       LB70C\n         TM        SWARG,X'E0'         <> ARG-1 O ARG-2 O ARG-3\n         BZ        LB60READ\n         B         LB70SEL\nLB70C    DS        0H\n         CLC       @COMPA,KCOY\n         BNE       LB70D\n         TM        SWARG,X'80'         <> ARG-1 O (ARG-2 Y ARG-3)\n         BO        LB70SEL\n         TM        SWARG,X'60'         <>\n         BO        LB70SEL\n         B         LB60READ\nLB70D    DS        0H\n         CLC       @COMPA,KCY\n         BNE       LB70E\n         TM        SWARG,X'C0'         <> ARG-1 O ARG-2 O ARG-3\n         BO        LB70SEL\n         B         LB60READ\nLB70E    DS        0H\n         CLC       @COMPA,KCYO\n         BNE       LB70F\n         TM        SWARG,X'20'         <> ARG-1 O ARG-2 O ARG-3\n         BO        LB70SEL\n         TM        SWARG,X'C0'         <> ARG-1 O ARG-2 O ARG-3\n         BO        LB70SEL\n         B         LB60READ\nLB70F    DS        0H\n         CLC       @COMPA,KCYY\n         BNE       LB70G\n         TM        SWARG,X'E0'         <> ARG-1 Y ARG-2 Y ARG-3\n         BO        LB70SEL\n         B         LB60READ\nLB70G    DS        0H\n         ABEND     774,DUMP           <> ERROR EN LA LOGICA AND/OR DE\n*                                     <> TTO. DE ARGUMENTOS\nLB70SEL  DS        0H\n         PUT       FSESLOG,(R3)\n         AP        TOTRGSEL,KP1        <> SUMAR CONTADOR REGISTROS SEL.\n         B         LB60READ\n*        +------------------------------------------------------+\n*>>>>>>>>|   ACABADO EL PROCESO DE LO PEDIDO ....               |------\n*        +------------------------------------------------------+\nLB60Y10  DS        0H\n         PUT       FSESLOG,(R3)\nLB60Z10  DS        0H\n         CLOSE     (FOPERLOG)\n         B         ENDOFPGM            <> ACABAMOS EL PROCESO\n*\nZOPERLOG DS        0H                  <> FIN DE OPERLOG\n         CLOSE     (FOPERLOG)\n         B         LB40F               <> OBTENER MAS NOMBRES\n         EJECT\n*        +----------------------------------------+\n*>>>>>>>>|   BUSQUEDA DE DATO EN UN CAMPO         |--------------------\n*        |                                        |\n*        |   RECIBE CAMPOS                        |\n*        |                                        |\n*        |     WBUSDAT    DIRECCION DATO A BUSCAR |\n*        |     WBUSDATL   LONGITUD  DATO A BUSCAR |\n*        |     WBUSCAM    DIRECCION CAMPO         |\n*        |     WBUSCAML   LONGITUD  CAMPO         |\n*        |                                        |\n*        |  TENER EN CUENTA LA TABLA DE MAQUINAS  |\n*        |                                        |\n*        |  SALVADO/RESTORE DE REGISTROS          |\n*        |                                        |\n*        |   RETORNA   SWLOC    X'80' ENCONTRADO  |\n*        |             SWLOC    X'00' NO ENCONTR. |\n*        |                                        |\n*        |   ENLACE    R14                        |\n*        +----------------------------------------+\nRTBUS    DS        0H\n         XC        SWLOC,SWLOC         <> INDICAR NO LOCALIZADO\n         STM       R3,R9,STREG3A9      <> SALVAR LOS REGISTROS\n*\n         L         R1,WBUSCAML         <> LONGITUD TOTAL\n         S         R1,WBUSDATL         <> MENOS LONGITUD CAMPO\n         LA        R1,1(R1)            <> + 1\n         L         R5,WBUSCAM\n         AR        R5,R1               <> ULTIMO OCTETO A MIRAR\n         SLR       R4,R4\n         LA        R4,1(R4)            <> AVANCE DE OCTETO EN OCTETO\n         L         R3,WBUSCAM          <> COMIENZO DE BUSQUEDA\n         B         RTBUS10\nRTBUSCLC CLC       0(0,R3),0(R7)       <> COMPARE DINAMICA\nRTBUS10  DS        0H\n         L         R1,WBUSDATL\n         BCTR      R1,R0               <> UNO MENOS PARA EXECUTE\n         L         R7,WBUSDAT          <> DATO A BUSCAR\n         EX        R1,RTBUSCLC         <> COMPARE\n         BE        RTBUS20             <> ENCONTRADO\n         BXLE      R3,R4,RTBUS10       <> REHACER EL BUCLE\n         B         RTBUS90             <> RETORNO NO ENCONTRADO\nRTBUS20  DS        0H\n         OI        SWLOC,X'80'         <> INDICAR ENCONTRADO\nRTBUS90  DS        0H\n         LM        R3,R9,STREG3A9      <> SALVAR LOS REGISTROS\n         BR        R14\n*        +----------------------------------------+\n*>>>>>>>>|   AJUSTE DE LONGITUDES CAMPOS PANEL    |--------------------\n*        |                                        |\n*        |   RECIBE:   R15: CAMPO                 |\n*        |             R1   LONGITUD TOTAL        |\n*        |   RETORNA   R1   LONGITUD REAL         |\n*        |   ENLACE    R14                        |\n*        +----------------------------------------+\nRTLOCLC  CLC       0(0,R15),BLANCOS    <> SI TODO EL CAMPO A BLANCOS\nRTLO00   DS        0H\n         BCTR      R1,R0               <> LONGITUD MENOS UNO\n         EX        R1,RTLOCLC          <> EJECUTE COMPARE\n         BNE       RTLO10\n         SLR       R1,R1               <> LONGITUD A CERO\n         B         RTLO30              <> IR A DEVOLVER CONTROL\n*\nRTLO10   DS        0H\n         AR        R15,R1              <> APUNTAR ULTIMA POSICION\n*\nRTLOBUC  DS        0H\n         CLI       0(R15),C' '         <> BUSQUEDA DE NO BLANCO\n         BNE       RTLO20\n         BCTR      R1,R0               <> RESTANDO LONGITUDES\n         BCT       R15,RTLOBUC         <> RESTANDO POSICIONES Y BUCLE\n*\n         ABEND     778,DUMP            <> NO PUEDE PASAR POR AQUI\n*\nRTLO20   DS        0H\n         CLI       0(R15),C'<'         <> CARACTER ESPECIAL\n         BE        RTLO30\n         LA        R1,1(R1)            <> RECUPERAR LA LONGITUD\n*\nRTLO30   DS        0H\n         BR        R14                 <> DEVOLUCION DE CONTROL\n         EJECT\n*        +----------------------------------------+\n*>>>>>>>>|   OBTENCION DE DSNAMES DEL CATALOGO    |--------------------\n*        |                                        |\n*        |   ENLACE CON EL R9                     |\n*        |                                        |\n*        |   EN UNA SUBRUTINA LLAMA AL MDCATSI    |\n*        |   ENLAZANDO CON EL MEDIANTE R8         |\n*        |                                        |\n*        |   LOS DATOS DSNDESDE Y DSNHASTA SON    |\n*        |   TENIDOS EN CUENTA PARA DETERMINAR    |\n*        |   LOS FICHEROS A ABRIR.                |\n*        |                                        |\n*        |   EL AREA DSNOBTEN CONTENDRA EL NOMBRE |\n*        |   DE FICHERO A UTILIZAR POR EL PROGRAMA|\n*        +----------------------------------------+\nRTCA00   DS        0H\nRTCA10   DS        0H                  <> PUENTE DEL SALTO\n         CLI       DSNWK01,X'00'       <> AREA 1 RELLENA ?\n         BNE       RTCA20              <> SI, IR A VERIFICAR AREA 2\n         BAL       R8,RTMO00           <> CARGAR AREA\n         MVC       DSNWK01,$DRENAME    <> ALMACENAR EN PRIMERA AREA\n         CLI       $DRENAME,X'FF'      <> HUBO FIN DE FICHERO\n         BNE       RTCA20\n         MVI       DSNWK02,X'FF'       <> MARCAR TAMBIEN LA SEGUNDA\n*\nRTCA20   DS        0H                  <> PUENTE DEL SALTO\n         CLI       DSNWK02,X'00'       <> AREA 1 RELLENA ?\n         BNE       RTCA30              <> SI, CARGAR AREA 2\n         BAL       R8,RTMO00           <> CARGAR AREA\n         MVC       DSNWK02,$DRENAME    <> ALMACENAR EN PRIMERA AREA\n         B         RTCA30\n*\n*        EN ESTE PUNTO LAS DOS AREAS ESTAN RELLENAS\n*        CON LOS REGISTROS DE DSNAME DEL CATALOGO\n*\nRTCA30   DS        0H\n         TM        SWDESDE,X'80'       <> ESTAMOS LOCALIZANDO DESDE ?\n         BO        RTCA40              <> NO, TRABAJAR CON DSNHASTA\n*\n*        LOCALIZANDO DSNDESDE ....\n*\n         CLC       DSNDESDE,DSNWK01\n         BE        RTCA30E\n         BL        RTCA30L\n         BH        RTCA30H\nRTCA30E  DS        0H\n         OI        SWDESDE,X'80'       <> ENCONTRADO EL INICIO\n         MVC       DSNOBTEN,DSNWK01\n         MVC       DSNWK01,DSNWK02\n         MVI       DSNWK02,X'00'       <> INVALIDAR ENTRADA 2\n         B         RTCA99              <> DEVOLVER CONTROL\nRTCA30H  DS        0H\n         CLC       DSNDESDE,DSNWK02    <> IGUAL A ENTRADA-2\n         BH        RTCA30HH\n         OI        SWDESDE,X'80'       <> DEVOLVEMOS ENTRADA-1\n         MVC       DSNOBTEN,DSNWK01\n         MVC       DSNWK01,DSNWK02\n         MVI       DSNWK02,X'00'       <> INVALIDAR ENTRADA 2\n         B         RTCA99              <> DEVOLVER CONTROL\nRTCA30HH DS        0H\nRTCA30L  DS        0H\n         MVC       DSNWK01,DSNWK02\n         MVI       DSNWK02,X'00'       <> INVALIDAR ENTRADA 2\n         B         RTCA20              <> OBTENER OTRA ENTRADA-2\n*\n*        LOCALIZANDO DSNHASTA ...\n*\nRTCA40   DS        0H\n         CLC       DSNWK01,DSNHASTA    <> OJO PREGUNTA AL REVES\n         BE        RTCA40E\n         BL        RTCA40L\n         BH        RTCA40H\nRTCA40L  DS        0H\nRTCA40E  DS        0H\n         MVC       DSNOBTEN,DSNWK01\n         MVC       DSNWK01,DSNWK02\n         MVI       DSNWK02,X'00'       <> INVALIDAR ENTRADA 2\n         B         RTCA99              <> DEVOLVER CONTROL\nRTCA40H  DS        0H\n         MVI       DSNOBTEN,X'FF'\n         MVC       DSNOBTEN+1(L'KFDSNEND),KFDSNEND\n*\nRTCA99   DS        0H\n         BR        R9\n*        +----------------------------------------+\n*>>>>>>>>|   ACCESO AL CATALOGO CON MDCATSI       |--------------------\n*        |                                        |\n*        |   LOS DATOS QUEDAN EN EL PROPIO AREA   |\n*        |   DEL MODULO PARA QUE LOS RECOJA EL    |\n*        |   LLAMANTE                             |\n*        |                                        |\n*        |   ENLACE CON EL R8                     |\n*        +----------------------------------------+\nRTMOMVC  MVC       0(0,R1),PRMDSN\nRTMO00   DS        0H\n*\nRTCABRID NOP       RTMO10              <> PUENTE PRIMERA VEZ\n         MVI       *-3,X'F0'           <> PROVOCAR EL PUENTE\n         XC        $CODIGCA,$CODIGCA\n         MVI       $FILTRO,C' '\n         MVC       $FILTRO+1(L'$FILTRO-1),$FILTRO\n         LA        R1,$FILTRO\n         L         R15,PRMDSN_L\n         BCTR      R15,R0\n         EX        R15,RTMOMVC\n         LA        R1,$FILTRO\n         L         R15,PRMDSN_L\n         AR        R1,R15\n         MVC       0(L'KMASK1,R1),KMASK1\n         XC        $CLAVEMD,$CLAVEMD\n         MVC       $WRKLEN,KF4096\n*\nRTMO10   DS        0H\n         L         R15,AMDCATSI\n         CALL      (15),($CODIGCA)\n         CLI       $CODIGCA,X'FF'\n         BNE       RTMO10A\n         ABEND     773,DUMP            <> ERRORES DE ACCESO A CATALOGO\nRTMO10A  DS        0H\n         CLI       $CODIGCA+1,X'00'\n         BE        RTMO99\n         MVI       $DRENAME,X'FF'      <> MARCAR FIN DE FICHERO\nRTMO99   DS        0H\n         BR        R8                  <> DEVOLVER CONTROL\n         EJECT\n*        +----------------------------------------+\n*>>>>>>>>|   FINALIZACION DEL PROGRAMA            |--------------------\n*        +----------------------------------------+\nENDOFPGM DS        0H\n         CLOSE     (FSESLOG)\n*\n         TM        SWTSOIND,X'80'      <> SI ESTA A CEROS ES BATCH\n         BZ        ENDOFPG2            <> PROCESO BATCH - SALTAMOS\n*\n*        +----------------------------------------+\n*>>>>>>>>|   LLAMADA A MDCVLOG PARA CONVERTIR EL  |--------------------\n*        |   LOG DE FORMATO MDB A SYSLOG CLASICO  |--------------------\n*        +----------------------------------------+\nLB80CALL DS        0H\n         CLC       @VLOSDSN,BLANCOS    <> SE SOLICITO UN TEMPORAL ?\n         BE        LB80CALX            <> SI, HACER LA LLAMADA\n*\n*        SI SE HA PEDIDO UN FICHERO NO TEMPORAL SE INTENTA SU\n*        BORRADO SIN MAS POR SI YA EXISTIERA PARA EVITAR ABEND 888\n*        EN EL MODULO DE GENERACION DEL FICHERO\n*\n         MVC       MDDAT3B+4(L'STSAVEDS),STSAVEDS\n         LA        R1,MDDAT3B+L'MDDAT3B-1\n*--->>>>\n         CLI       0(R1),C' '\n         BNE       *+4+4\n         BCT       R1,*-4-4            <> REHACER BUCLE\n*--->>>>\n         MVI       2(R1),C';'          <> INSERCCION ; DEL MDALDIN\n*\n         XC        MDALWORK,MDALWORK\n         L         R15,AMDALDIN\n         CALL      (15),(MDALWORK,KOPALLOC,MDDAT3AA,MDDAT3B),VL\n         LTR       R15,R15             <> CODIGO RETORNO MDALDIN\n         BNZ       LB80CALX            <> NO, SUPONEMOS NO EXISTE\n*--->>>>\n         XC        MDALWORK,MDALWORK\n         L         R15,AMDALDIN\n         CALL      (15),(MDALWORK,KOPUNALL,MDDAT3AU,MDDAT3B),VL\n         LTR       R15,R15             <> CODIGO RETORNO MDALDIN\n         BZ        *+4+4+4\n         LA        R1,15               <> MENSAJE 16\n         B         LB30                <> REDISPLAY DEL PANEL\n*\nLB80CALX DS        0H\n         MVC       CVLOGDD,PRMDD       <> DD UTILIZADA\n         MVC       CVLOGDSN,STSAVEDS   <> FICHERO SOLICITADO PARA DATOS\n*\n*        DS    0H\n*        MVC   WTO004+8(50),CVLOGPRM\n*TO004   WTO   '                                                      '\n*\n         L         R15,AMDCVLOG\n         CALL      (15),(CVLOGPRM),VL\n*\n         MVC       WSLOGDSN,BLANCOS\n         MVC       WSLOGDSN+1(L'CVLOGDSN),CVLOGDSN\n         MVI       WSLOGDSN,X'7D'\n         LA        R1,WSLOGDSN+L'WSLOGDSN-1\nLB80M    DS        0H\n         CLI       0(R1),C' '\n         BNE       *+4+4\n         BCT       R1,LB80M\n*--->>>>\n         MVI       1(R1),X'7D'\n*        +----------------------------------------+\n*>>>>>>>>|   EDIT DEL FICHERO DE RESULTADOS       |--------------------\n*        +----------------------------------------+\n         L         R15,AISPLINK\n         CALL      (15),(KEDIT,WSLOGDSN),VL\n*        +----------------------------------------+\n*>>>>>>>>|   BORRADO  FICHERO DE RESULTADOS       |--------------------\n*        +----------------------------------------+\n         CLC       @VLOSDSN,BLANCOS    <> SE GENERO UN TEMPORAL ?\n         BNE       LB80Z               <> NO, DEJAR GUARDADO EL FICHERO\n*\n         MVC       MDDAT3B+4(L'CVLOGDSN),CVLOGDSN\n         LA        R1,MDDAT3B+L'MDDAT3B-1\nLB80X    DS        0H\n         CLI       0(R1),C' '\n         BNE       *+4+4\n         BCT       R1,LB80X\n*--->>>>\n         MVI       2(R1),C';'          <> INSERCCION ; DEL MDALDIN\n*\n         XC        MDALWORK,MDALWORK\n         L         R15,AMDALDIN\n         CALL      (15),(MDALWORK,KOPALLOC,MDDAT3AA,MDDAT3B),VL\n         LTR       R15,R15             <> CODIGO RETORNO MDALDIN\n         BZ        *+4+4+4\n         LA        R1,15               <> MENSAJE 15\n         B         LB30                <> REDISPLAY DEL PANEL\n*--->>>>\n         XC        MDALWORK,MDALWORK\n         L         R15,AMDALDIN\n         CALL      (15),(MDALWORK,KOPUNALL,MDDAT3AU,MDDAT3B),VL\n         LTR       R15,R15             <> CODIGO RETORNO MDALDIN\n         BZ        *+4+4+4\n         LA        R1,15               <> MENSAJE 16\n         B         LB30                <> REDISPLAY DEL PANEL\n*--->>>>\nLB80Z    CP        TOTRGSEL,KP0           <> SELECCIONADO ALGUNO?\n         BH        ENDOFPG1               <> SI, SALIDA NORMAL\n         LA        R1,12 <> ERROR NO SELECCIONADO NADA\n         B         LB30                   <> REDISPLAY PANEL\nENDOFPG1 DS        0H\n         B         LB29                   <> REDISPLAY PANEL\nENDOFPG2 DS        0H\n         DELETE    EP=ISPLINK\n         DELETE    EP=MDTPUT\n         DELETE    EP=MDFECHS\n         DELETE    EP=MDCATSI\n         DELETE    EP=MDCVLOG\n         DELETE    EP=MDALDIN\n         FIN       CR,TIPO=NORENT\n*        +----------------------------------------+\n*>>>>>>>>|   MVCS Y CLCS VARIABLES                |--------------------\n*        +----------------------------------------+\nLB40$MVC MVC       0(0,R9),0(R5)\nMAQMVC   MVC       WORKA60(0),@VLOARGM\nMAQTR    TR        WORKA60(0),TBTRMAQ     <> VERIFICAR DATOS\nMAQCLC   CLC       WORKA60(0),@VLOARGM\nJOBIDMVC MVC       0(0,R15),@VNJOB\nSTCIDMVC MVC       0(0,R15),@VNSTC\nTSUIDMVC MVC       0(0,R15),@VNTSU\n*        +----------------------------------------+\n*>>>>>>>>|   RESERVA DE AREAS                     |--------------------\n*        +----------------------------------------+\nPRMPRF   DS        CL26                <> PREFIJO PARA FICHEROS\nPRMPRF_L DS        F                   <> LONGITUD DEL PREFIJO\nPRMDD    DS        CL8                 <> DDNAME ASIGNADO FICHEROS MDB\nPRMDSN   DS        CL29                <> PREFIJO FICHEROS OPERLOG\nPRMDSN_L DS        F                   <> LONGITUD SDA PARTE PARAMETRO\n*\nPRBTIME  DS        CL27                <> FECHA/HORA DE SELECCION\nPRBSYSNA DS        CL8                 <> SYSNAME O ESPACIOS\nPRBPRF   DS        CL8                 <> PREFIJO FICHEROS OPERLOG\n*\nDSNDESDE DS        CL44                <> DSNAME CONSTRUIDO ARRANQUE\nSWDESDE  DS        CL1                 <> BUSCANDO DESDE SI X'00'\nDSNHASTA DS        CL44                <> DSNAME CONSTRUIDO FINAL\n*\nDSNOBTEN DS        CL44                <> DSNAME DEVUELTO POR MDCATSI\nDSNWK01  DS        CL44                <> AREAS DE LECTURA PARA LOS\nDSNWK02  DS        CL44                <> DSNAMES DEVUELTOS POR MDCATSI\n*\nATSOIND  DS        F                   <> INDICADOR ENTORNO TSO\nSWTSOIND DS        XL1                 <> B'1... ....' INDICA TSO\n*\nWORKA15  DS        CL15\nWORKA60  DS        CL60\nWORKD    DS        D\nWORKF    DS        F\nSTLINBAR DS        F                   <> ALMACENA LINEA COMIEMZO BAROM\nWORKH    DS        H\n*\nTOTRGSEL DS        PL5                 <> TOTAL REGISTROS SELECCIONADOS\n*\nSWARG    DS        CL1                 <> LOCALIZAR ARGUMENTOS 1,2,3\nSWRANGO  DS        CL1                 <> RANGO SOLICITADO\n*                                         X'80' FECHA Y HORA INICIO\n*                                         X'40' DESDE O NO EXISTE\n*\nKP0      DC        P'0'\nKP1      DC        P'1'\nKH0      DC        H'0'\nKH2      DC        H'2'\nKH8      DC        H'8'\nKH9      DC        H'9'\nKF10000  DC        F'10000'\nKF0      DC        F'0'\nKF1      DC        F'1'\nKF20     DC        F'20'\nKF4096   DC        F'4096'\nKC04     DC        C'04'\nKC05     DC        C'05'\nKCO      DC        C'O '\nKCOO     DC        C'OO'\nKCOY     DC        C'OY'\nKCY      DC        C'Y '\nKCYO     DC        C'YO'\nKCYY     DC        C'YY'\nKH47     DC        H'47'\nBLANCOS  DC        CL60' '\nKCEROS   DC        C'00'\nKFDSNEND DC        C'SE ACABARON LOS FICHEROS'\nKASTERIS DC        CL8'********'\nKMASK1   DC        CL3'.**'            <> MASCARA ACCESO AL CATALOGO\nKMDBSEL  DC        CL8'MDBSEL'         <> FICHERO MDB'S SELECCIONADOS\n*\nKJOB     DC        C'JOB00000'         <> PLANTILLAS\nKSTC     DC        C'STC00000'\nKTSU     DC        C'TSU00000'\n*\nAISPLINK DS        F                   <> DIRECCION CARGA ISPLINK\nAMDFECHS DS        F                   <> DIRECCION CARGA MODULO FECHAS\nAMDCATSI DS        F                   <> DIRECCION CARGA ACCESO CATALO\nAMDTPUT  DS        F                   <> DIRECCION MODULO MDTPUT\nAMDALDIN DS        F                   <> DIRECCION MDALDIN ALLOC.DINAM\nAMDCVLOG DS        F                   <> DIRECCION MDCVLOG\n*\nSTREG3A9 DS        7F                  <> SAVE RESTORE DE REGISTROS\nWBUSDAT  DS        F                   <> ADDR CAMPO A BUSCAR\nWBUSDATL DS        F                   <> LONGITUD CAMPO A BUSCAR\nWBUSCAM  DS        F                   <> SERIE DONDE BUSCAR\nWBUSCAML DS        F                   <> LONGITUD DE LA SERIE\nSWLOC    DS        CL1                 <> SWITCH DE LOCALIZACION\n*\nBASINI   DS        CL7\nBASFIN   DS        CL7\nBASHOY   DS        CL7\nHORHOY   DS        CL4\n*\nHOYSTAMP DS        0CL17\nHOYGREGO DS        CL8\nHOYPUNT2 DS        CL1\nHOYHACHE DS        CL1\nHOYHORA  DS        CL7                 <> CON PRIEMERA DECIMA STAMP\n*\nFECINIJ  DS        CL7                 <> CAMPOS PARA COMPARACION CON\nHORINIE  DS        CL5                 <> LOS REGISTROS DE OPERLOG\nFECFINJ  DS        CL7\nHORFINE  DS        CL5\n*\nGLBID    DS        0CL24               <> ENGLOBA EXISTENCIA VALORES\nJOBID    DS        CL8                 <> VALORES CONSTRUIDOS\nSTCID    DS        CL8\nTSUID    DS        CL8\n*\nVLOARGD$ DS        F                   <> LONGITUDES ARGUMENTOS\nVLOARGH$ DS        F                   <> LONGITUDES ARGUMENTOS\nVLOARG1$ DS        F                   <> LONGITUDES ARGUMENTOS\nVLOARG2$ DS        F                   <> LONGITUDES ARGUMENTOS\nVLOARG3$ DS        F                   <> LONGITUDES ARGUMENTOS\nVLOARGM$ DS        F                   <> LONGITUDES ARGUMENTOS\nVLOARGN$ DS        F                   <> LONGITUDES ARGUMENTOS\nVLOSDSN$ DS        F                   <> LONGITUDES ARGUMENTOS\nVNJOB$   DS        F                   <> LONGITUDES ARGUMENTOS\nVNTSU$   DS        F                   <> LONGITUDES ARGUMENTOS\nVNSTC$   DS        F                   <> LONGITUDES ARGUMENTOS\n*\nFOPERLOG DCB       DDNAME=FOPERLOG,MACRF=GL,DSORG=PS,EODAD=ZOPERLOG\n*\nFSESLOG  DCB       DDNAME=XXXXXXXX,MACRF=PM,DSORG=PS\n*\nKVPUT    DC        CL8'VPUT '\nKVDEFINE DC        CL8'VDEFINE'\nKCHAR    DC        CL8'CHAR '\nKDISPLAY DC        CL8'DISPLAY '\nKPANEL   DC        CL8'VLOGP00 '\nKEDIT    DC        CL8'EDIT    '\n*\nSTSAVEDS DS        CL44' '              <> FICHERO PARA DATOS CONVERT.\n*\nWSLOGDSN DS        CL46' '\n*\nCVLOGPRM DS        0CL52\nCVLOGLEN DS        CL2                 NO SE USA SOLO POSICIONAMIENTO\nCVLOGDD  DS        CL8\nCVLOGDSN DS        CL44\n*\n         DS        0H\n@MSL     DC        CL40' '\n*\n*        CAMPOS OBTENIDOS DEL PANEL\n*\n@FECINI  DS        0CL8\n@AI      DC        CL04' '\n@MI      DC        CL02' '\n@DI      DC        CL02' '\n*\n@HORAINI DS        0CL4\n@HI      DC        CL02' '\n@NI      DC        CL02' '\n*\n@FECFIN  DS        0CL8\n@AF      DC        CL04' '\n@MF      DC        CL02' '\n@DF      DC        CL02' '\n*\n@HORAFIN DS        0CL4\n@HF      DC        CL02' '\n@NF      DC        CL02' '\n*\n@GMTINI  DS        0CL8\n@AIGMT   DC        CL04' '\n@MIGMT   DC        CL02' '\n@DIGMT   DC        CL02' '\n*\n@HORGINI DS        0CL4\n@HIGMT   DC        CL02' '\n@NIGMT   DC        CL02' '\n*\n@GMTFIN  DS        0CL8\n@AFGMT   DC        CL04' '\n@MFGMT   DC        CL02' '\n@DFGMT   DC        CL02' '\n*\n@HORGFIN DS        0CL4\n@HFGMT   DC        CL02' '\n@NFGMT   DC        CL02' '\n*\n@VLOARGD DC        CL21' '\n@VLOARGH DC        CL21' '\n@VLOARG1 DC        CL30' '\n@VLOARG2 DC        CL30' '\n@VLOARG3 DC        CL30' '\n@VLOSDSN DC        CL28' '\n@COMPA   DS        0CL2             <> ENGLOBA LOS DOS SIGUIENTES\n@X       DC        CL01' '\n@Y       DC        CL01' '\n@VLOARGM DC        CL60' '\n@VNJOB   DC        CL05' '\n@VNSTC   DC        CL05' '\n@VNTSU   DC        CL05' '\n@VLOARGN DC        CL8' '\n*\nTBMAQS   DC        33CL8' '\n*\nTBTRMAQ  DC        XL1'FF',XL15'00'\n         DC        XL16'00' 1\n         DC        XL16'00' 2\n         DC        XL16'00' 3\n         DC        XL16'00' 4\n         DC        XL16'00' 5\n         DC        XL11'00',X'6B',4X'00'\n         DC        XL16'00' 7\n         DC        XL16'00' 8\n         DC        XL16'00' 9\n         DC        XL16'00' A\n         DC        XL16'00' B\n         DC        X'00',C'ABCDEFGHI',6X'00'\n         DC        X'00',C'JKLMNOPQR',6X'00'\n         DC        X'0000',C'STUVWXYZ',6X'00'\n         DC        C'0123456789',6X'00'\n*\nTVAR     DS        0F\n         DC        CL12'(MSL)',A(@MSL),A(L'@MSL)\nLVARE    EQU       *-TVAR\n         DC        CL12'(DI)',A(@DI),A(L'@DI)\n         DC        CL12'(MI)',A(@MI),A(L'@MI)\n         DC        CL12'(AI)',A(@AI),A(L'@AI)\n         DC        CL12'(HI)',A(@HI),A(L'@HI)\n         DC        CL12'(NI)',A(@NI),A(L'@NI)\n         DC        CL12'(DF)',A(@DF),A(L'@DF)\n         DC        CL12'(MF)',A(@MF),A(L'@MF)\n         DC        CL12'(AF)',A(@AF),A(L'@AF)\n         DC        CL12'(HF)',A(@HF),A(L'@HF)\n         DC        CL12'(NF)',A(@NF),A(L'@NF)\n         DC        CL12'(VLOARGD)',A(@VLOARGD),A(L'@VLOARGD)\n         DC        CL12'(VLOARGH)',A(@VLOARGH),A(L'@VLOARGH)\n         DC        CL12'(VLOARG1)',A(@VLOARG1),A(L'@VLOARG1)\n         DC        CL12'(VLOARG2)',A(@VLOARG2),A(L'@VLOARG2)\n         DC        CL12'(VLOARG3)',A(@VLOARG3),A(L'@VLOARG3)\n         DC        CL12'(VLOSDSN)',A(@VLOSDSN),A(L'@VLOSDSN)\n         DC        CL12'(X)',A(@X),A(L'@X)\n         DC        CL12'(Y)',A(@Y),A(L'@Y)\n         DC        CL12'(VLOARGM)',A(@VLOARGM),A(L'@VLOARGM)\n         DC        CL12'(VLOARGN)',A(@VLOARGN),A(L'@VLOARGN)\n         DC        CL12'(VNJOB)',A(@VNJOB),A(L'@VNJOB)\n         DC        CL12'(VNSTC)',A(@VNSTC),A(L'@VNSTC)\n         DC        CL12'(VNTSU)',A(@VNTSU),A(L'@VNTSU)\nTVARL    EQU       (*-TVAR)/LVARE\nKTVARL   DC        A(TVARL)\nLVARN    EQU       0,12\nLVARD    EQU       L'LVARN,4\nLVARL    EQU       L'LVARN+L'LVARD,4\n*\nTBMENSA  EQU       *\n         DC        CL40'** FECHA INICIAL INVALIDA               '  00\nTBMENSAE EQU       *-TBMENSA\n         DC        CL40'** FECHA FINAL INVALIDA                 '  01\n         DC        CL40'** FECHA INICIAL MAYOR QUE FINAL        '  02\n         DC        CL40'** HORA INICIAL MAYOR QUE FINAL         '  03\n         DC        CL40'** FALTAN IDENTIFICACIONES O ARGUMENTOS '  04\n         DC        CL40'** ERROR GRAVE** OBTENCION FECHA DEL DIA'  05\n         DC        CL40'** FECHA FINAL ESTA POR LLEGAR          '  06\n         DC        CL40'** AUN NO ES LA HORA FINAL. PACIENCIA.  '  07\n         DC        CL40'** MAXIMO 9 DIAS DIFERENCIA ENTRE FECHAS'  08\n         DC        CL40'** ERROR EN IDENTIFICACION DE MAQUINAS  '  09\n         DC        CL40'** ERRORES EN ACCESO A CATALOGO         '  10\n         DC        CL40'<> ERROR ASIGNACION FICHEROS. VER FECHAS'  11\n         DC        CL40'<> NINGUN DATO SELECC. ATENCION MAY/MIN.'  12\n         DC        CL40'** IDENTIFIC/NOMBRE-TAREA SON EXCLUSIVOS'  13\n         DC        CL40'** ARGUMENTOS/COMPARADORES DESSINCRONIZ.'  14\n         DC        CL40'<> ERROR ASIGNACION FICHERO RESULTADOS  '  15\n         DC        CL40'<> ERROR DESASIG/BORRAR FICHERO RESULTA.'  16\n         DC        CL40'<> ERROR AL CONVERTIR FECHAS EN GMT.    '  17\nTBMENSAL DC        A(TBMENSAE)\n*\n*        +----------------------------------------+\n*>>>>>>>>|   PARAMETROS DE LLAMADA A MDTPUT       |--------------------\n*        +----------------------------------------+\n         DS        0F\n$TPUTPRM DC        H'86'               <> INICIALIZAR A 86\n$TPUTX   DC        CL2'20'             <> INICIALIZAR CON LA LINEA\n$TPUTC1  DC        CL1','              <> SIEMPRE UNA COMA\n$TPUTY   DC        CL2'01'             <> INICIALIZAR CON LA COLUMNA\n$TPUTC2  DC        CL1','              <> SIEMPRE UNA COMA\n$TPUTTXT DC        CL80' '             <> INICIALIZAR CON EL TEXTO\n*\nTBTPUTMS DS        0F\n*                   ----+----1----+----2----+----3----+----4----+----5-\n*              ---+----6----+----7----+----8\n         DC    CL80'------- EXPLORANDO                                 X\n                                   ---------'\n         DC    CL80' '\n         DC    CL80'....+....1....+....2....+....3....+....4....+....5.X\n               ...+....6....+....7....+....8'\n         DC    CL80'---------- LINEAS EXPLORADAS (EN DECENAS DE MILLAR)X\n               --------------------<JPO/ALD>'\n         DC    CL1'*'                  <> FIN DE TABLA\n*        +----------------------------------------+\n*>>>>>>>>|   PARAMETROS DE LLAMADA A MDALDIN      |--------------------\n*        +----------------------------------------+\nKOPINIT  DC        CL10'INIT '\nKOPEND   DC        CL10'END  '\nKOPALLOC DC        CL10'ALLOC  '\nKOPUNALL DC        CL10'UNALLOC '\nMDDAT2A  DC        CL50'DD=FOPERLOG SHR CLOSE ; '\nMDDAT2B  DC        CL55'DSN= '         <> OJO INSERCCION DEL ; FINAL\n*\nMDDAT3AA DC        CL50'OLD DELETE CLOSE ; '\nMDDAT3AU DC        CL11'DELETE ; '\nMDDAT3B  DC        CL55'DSN= '         <> OJO INSERCCION DEL ; FINAL\n*\nMDALWORK DC        F'0'                <> WORK FACILITADA POR MODULO\n*\n@SYSSIMB ASASYMBP  DSECT=NO\n@SYMBRC  DS        F\n@SYMBLGT DS        F\n*\n@SYMBLIN DC       CL10' '\n*\n         LTORG\n*\nAWFECHS  DC        A(WFECHS)\nWFECHS   ORG       *+$INFELEN\n*\n*        +----------------------------------------+\n*>>>>>>>>|   PARAMETROS DE LLAMADA A MDCATSI      |--------------------\n*        +----------------------------------------+\n         DS        0F\n$CODIGCA DS        H                   <> CODIGOS DE LLAMADA\n*                                         0   OBTIENE DATOS\n*                                         1   FINAL DE DATOS\n*                                      <> CODIGOS DE RETORNO\n*                                         0   FUNCION CORRECTAMENTE\n*\n$FILTRO  DS        CL44                <> FILTRO DE BUSQUEDA\n$CLAVEMD DS        CL4                 <> CLAVE PARA MODULO\n*                                         PRIMERA LLAMADA CEROS BIN.\n*                                         NO TOCAR POR EL PROGRAMA\n$FILLER  DS        CL2                 <> AJUSTE\n*\n$DATLEN  DS        F     >>> 89 <<<    <> LONGITUD DATOS A DEVOLVER\n$DATOSR  DS        0CL1                <> COMIENZO DATOS RECUPERADOS\n$DRCATNA DS        CL44                <> NOMBRE DE CATALOGO\n$DRTIPO  DS        CL1                 <> TIPO DE ENTRADA\n*                                         A: FICHERO NO VSAM\n*                                         B: GRUPO DE GENERACION\n*                                         C: CLUSTER\n*                                         D: COMPONENTE DATOS VSAM\n*                                         G: ALTERNATE INDEX\n*                                         I: COMPONENTE INDICES VSAM\n*                                         H: GENERATION DATASET\n*                                         R: PATH DE VSAMSAM\n*                                         X: ALIAS\n*                                         U: ENTRADA CONEX.CAT.USUARIO\n*                                         L: LIBRARY TAPE AM\n*                                         W: ENTRY VOLUME TAPE\n$DRENAME DS        CL44                <> NOMBRE DE ENTRADA\n$FILLE2  DS        CL3                 <> SEGUNDO FILLER\n$WRKLEN  DS        F                   <> TAMA#O BUFFER MODULO\n$WORKA   DS        CL4096              <> AREA DE TRABAJO MODULO\n*\n         INFECHSA                      <> PARAMETROS LLAMADA MDFECHS\n*\n         IEAVM105                      <> MAPA DE REGISTROS MDB\n*\n         DCBD      DSORG=PS            <> MAPA DE REGISTROS MDB\n*\n         END       SYVERLOG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VERLOG": {"ttr": 5635, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01#\\x00\\x12\\x00\\x99#/\\x01\\x061\\x7f\\x15W\\x00E\\x00\\x1b\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.35", "flags": 0, "createdate": "1999-08-20T00:00:00", "modifydate": "2006-11-13T15:57:12", "lines": 69, "newlines": 27, "modlines": 0, "user": "U0Z72B6"}, "text": "PROC 0 V(O) HLQDS(OPERLOG)\n /********************************************************************/\n /**                                                                **/\n /**  NOMBRE .- VERLOG.                                             **/\n /**  AUTORES.- JOSE MARIA MARTINEZ BESTEIRO                        **/\n /**         .- ANGEL LUIS DOMINGUEZ                                **/\n /**  FUNCION.- VISUALIZACION SELECTIVA DEL SYSLOG/OPERLOG          **/\n /**  DEPARTAMENTOS USUARIOS.- ORGANIZACION E INFORMATICA.          **/\n /**                                                                **/\n /********************************************************************/\nTSOCLEAR\nCONTROL END(ZZZZ)   MAIN NOMSG NOLIST NOCONLIST NOSYMLIST\nIF &STR(&SYSISPF) NE ACTIVE +\n  THEN DO\n        WRITE *** USTED NO ESTA BAJO ISPF. TECLEE EL COMANDO BAJO ISPF.\n        GOTO FIN\n       ZZZZ\nIF &V NE &STR(O) +\n  THEN DO\n         ISPEXEC LIBDEF ISPPLIB DATASET ID('SYS4.VPW.ISPPLIB')\n         ISPEXEC LIBDEF ISPMLIB DATASET ID('SYS4.VPW.ISPMLIB')\n         ISPEXEC LIBDEF ISPSLIB DATASET ID('SYS4.VPW.ISPSLIB')\n         ISPEXEC LIBDEF ISPTLIB DATASET ID('SYS4.VPW.ISPTLIB')\n         %$SYSPROC LIB(SYS4.VPW.CLIST) OPE(F)\n         %VPWCLI1\n         ISPEXEC LIBDEF ISPPLIB DATASET ID()\n         ISPEXEC LIBDEF ISPMLIB DATASET ID()\n         ISPEXEC LIBDEF ISPSLIB DATASET ID()\n         ISPEXEC LIBDEF ISPTLIB DATASET ID()\n         %$SYSPROC LIB(SYS4.VPW.CLIST) OPE(L)\n       ZZZZ\n  ELSE DO\n         SET &PREFLOG = &STR(&HLQDS)&STR(.)&STR(&SYSPLEX)\n         SET &PREFLOG = &SUBSTR(1:&LENGTH(&PREFLOG),&PREFLOG)\n\n         ISPEXEC VGET (ZSCREEN)\n         SET &LD  = &ZSCREEN\n\n         IF &STR(&SYSPREF) = &STR(&SYSUID) -\n         OR &STR(&SYSPREF) = &STR() -\n          THEN SET PREFUSR = &STR(&SYSUID)\n          ELSE SET PREFUSR = &STR(&SYSPREF..&SYSUID)\n\n         FREE    FI(FSESLOG&LD)\n         DELETE '&PREFUSR&STR(.SPF.VLOG&LD..&SYSNAME)'\n\n         ALLOC   FI(FSESLOG&LD) +\n                 DS('&PREFUSR&STR(.SPF.VLOG&LD..&SYSNAME)') +\n                 NEW CATALOG SPACE(1 1) CYL UNIT(SYSALLDA) +\n                 RECFM(V B) LRECL(4096) BLKSIZE(8196)\n\n         /* ATENCION:  &STR(FSESLOG&LD)  SIEMPRE OCHO POSICIONES */\n         /* LA OCTAVA &LD ES USADA POR EL PROGRAMA               */\n\n         SET &PARAME = &STR(&PREFUSR)+\n                       &STR(.SPFOLOG,)+\n                       &STR(FSESLOG&LD)+\n                       &STR(,)+\n                       &STR(&PREFLOG)\n\n         ISPEXEC SELECT  PGM(SYVERLOG) +\n                 PARM(&PARAME)\n\n         FREE    FI(FSESLOG&LD)\n\n         DELETE '&PREFUSR&STR(.SPF.VLOG&LD..&SYSNAME)'\n\n       ZZZZ\nFIN: END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VLOGH00": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x01\\x00\\x01/\\x01\\x01\\x08\\x7f\\x15\\x04\\x00\\x15\\x00\\x13\\x00\\x00\\xd4\\xc2\\xf3\\xf4\\xf7\\xf2@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2000-01-12T00:00:00", "modifydate": "2001-03-28T15:04:00", "lines": 21, "newlines": 19, "modlines": 0, "user": "MB3472"}, "text": "%VLOGH00---------------- SYSLOG's VIEW -------------------------------- Tutorial\n%\n+ %SYSIDS\n+     You can put here a correlation between your systems' names\n+     and the codes you have choose for them, so the user be able\n+     to enter it correctly.\n+-------------------------------------------------------------------------------\n+ %SAVE DATA\n+     If this field is empty, data will be edited/browsed in a temporary\n+     file. If you need this data to be kept, for later use, specifya\n+     valid suffix for a data set, that will have your PREFIX as HLQ.\n+-------------------------------------------------------------------------------\n+ %INFORMATION about TIME (hours)\n+     MDB records are written in the Operlog Log Stream as they are\n+     sent from the system connected to it. It is possible to find some\n+     delay between the time the MDB record is written by the system\n+     and the time it is processed by Operlog.\n+     For example, at IPL time, MDB records are temporarily stored in\n+     the CONSOLE buffer, until the system IPLing gets its OPERLOG\n+     connection active.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VLOGP00": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00P\\x01\\x00\\x01/\\x01\\x061\\x7f\\x15W\\x00I\\x00@\\x00\\x00\\xe4\\xf0\\xe9\\xf7\\xf2\\xc2\\xf6@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "2000-01-12T00:00:00", "modifydate": "2006-11-13T15:57:50", "lines": 73, "newlines": 64, "modlines": 0, "user": "U0Z72B6"}, "text": ")ATTR\n! TYPE(TEXT)   INTENS(LOW)\n@ TYPE(TEXT)   INTENS(HIGH) SKIP(ON)\n\u00ac TYPE(INPUT)  INTENS(HIGH) JUST(LEFT) PAD(' ')\n| TYPE(INPUT)  INTENS(HIGH) JUST(LEFT) PAD(' ') CAPS(OFF)\n} TYPE(INPUT)  INTENS(HIGH) JUST(ASIS) PAD(' ') CAPS(OFF)\n\u00a2 TYPE(OUTPUT) INTENS(HIGH)\n)BODY EXPAND(\u00c7\u00c7) SMSG(MSC) LMSG(MSL)\n%VLOGP00\u00c7-\u00c7Busqueda en OPERLOG(SYSLOG)\u00c7-\u00c7\n%Command ===>\u00acZCMD                                        +User:    &ZUSER\n+       \u00a2MSC                                              +Date:    &ZDATESTD\n%       \u00a2MSL\n+                   dd  mm  aaaa  hh  mm                  Refine your search\n%INTERVAL : +From  \u00acDI@\u00acMI@\u00acAI  @\u00acHI@\u00acNI@+Text-from   ==>}VLOARGD              +\n            +To    \u00acDF@\u00acMF@\u00acAF  @\u00acHF@\u00acNF@+Text-to     ==>}VLOARGH              +\n\n%SYSID's :   \u00acVLOARGM                                                     @\n+            B090,E,J,I,L... Blank, will select ALL FROM %THIS+SYSPLEX (F1)\n\n%IDENTIF.:  +Number         JOB ===>|VNJOB@+o STC ===>|VNSTC@+o TSU ===>|VNTSU+o\n            +Name   JOB/STC/TSU ===>|VLOARGN @+ %\n\n%ARGUMENTS :+Text-1  ===>}VLOARG1                       @ +(and/or):\u00acX@  (Y/O)\n+           +Text-2  ===>}VLOARG2                       @ +(and/or):\u00acY@  (Y/O)\n+           +Text-3  ===>}VLOARG3                       @+\n+\n%SAVE.DATA  +Sufix  DSN=>\u00acVLOSDSN                     @%WITHOUT ''+HELP(F1)\n+\n%NOTAS:+-Text Field are%CASE SENSITIVE.+\n       +-To Select %A FULL LOG+within interval, type %*+ if Text-1 field.\n       +-If you need %SPACES+at text end, use%<+symbol after space(S).\n)INIT\n  .HELP = VLOGH00\n)REINIT\n  REFRESH(*)\n)PROC\n\n  &MSL = &Z\n\n  VER (&DI,NONBLANK,PICT,'99')\n  VER (&DI,NONBLANK,RANGE,1,31)\n  VER (&MI,NONBLANK,PICT,'99')\n  VER (&MI,NONBLANK,RANGE,1,12)\n  VER (&AI,NONBLANK,PICT,'9999')\n  VER (&AI,NONBLANK,RANGE,2000,9999)\n  VER (&HI,NONBLANK,PICT,'99')\n  VER (&HI,NONBLANK,RANGE,00,23)\n  VER (&NI,NONBLANK,PICT,'99')\n  VER (&NI,NONBLANK,RANGE,00,59)\n\n  VER (&DF,NONBLANK,PICT,'99')\n  VER (&DF,NONBLANK,RANGE,1,31)\n  VER (&MF,NONBLANK,PICT,'99')\n  VER (&MF,NONBLANK,RANGE,1,12)\n  VER (&AF,NONBLANK,PICT,'9999')\n  VER (&AF,NONBLANK,RANGE,2000,9999)\n  VER (&HF,NONBLANK,PICT,'99')\n  VER (&HF,NONBLANK,RANGE,00,23)\n  VER (&NF,NONBLANK,PICT,'99')\n  VER (&NF,NONBLANK,RANGE,00,59)\n\n  VER (&X,LIST,Y,O)\n  VER (&Y,LIST,Y,O)\n\n  VER (&VNJOB,NUM)\n  VER (&VNSTC,NUM)\n  VER (&VNTSU,NUM)\n\n  VER (&VLOSDSN,DSNAME)\n\n  REFRESH(*)\n\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPWDOC": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x08\\x8f\\x01\\x01\\x08\\x8f\\x15R\\x01\\xc7\\x01\\xc7\\x00\\x00\\xe6\\xd6\\xd9\\xc4\\xf9\\xf7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-03-29T00:00:00", "modifydate": "2001-03-29T15:52:00", "lines": 455, "newlines": 455, "modlines": 0, "user": "WORD97"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT513/FILE513.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT513", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}