./ ADD NAME=$$$INDEX 0100-07332-07332-0900-00079-00079-00000-SEB
------------------------------------------------------------------------
Name:     ALLOCLNK
Type:     HELP
Purpose:  TSO help for ALLOCLNK clist
Requires: CLIST ALLOCLNK
Used by:
Comments:
------------------------------------------------------------------------
Name:     CLIST
Type:     CLIST
Purpose:  TSO help for CLIST clist
Requires: CLIST CLIST
Used by:
Comments:
------------------------------------------------------------------------
Name:     COMP
Type:     HELP
Purpose:  TSO help for COMP clist
Requires: CLIST COMP (q.v.)
Used by:
Comments:
------------------------------------------------------------------------
Name:     DU
Type:     HELP
Purpose:  TSO help for DU clist
Requires: CLIST DU (q.v.)
Used by:
Comments:
------------------------------------------------------------------------
Name:     FINDMEM
Type:     CLIST
Purpose:  Display PDS's that contain a given member name.
Requires: XPROC ASM
          XFINDM ASM (but see Comments)
          XLINKLST ASM
Used by:
Comments: When there are too many libraries in the linklist (for when
          no DDNAME is given), or too many datasets allocated to a given
          DDNAME, ABEND S013-E4 results due to too many extents.  Hence
          the FINDMEM2 CLIST.
------------------------------------------------------------------------
Name:     FINDMEM2
Type:     CLIST
Purpose:  Used internally by the FINDMEM CLIST.
Requires: LA CLIST
          XWRITENR ASM
Used by:  FINDMEM
Comments: Used in place of XFINDM program
          See comments under FINDMEM above.
------------------------------------------------------------------------
Name:     LA
Type:     CLIST
Purpose:  Display current file allocations and/or generate JCL therefrom
Requires:
Used by:  FINDMEM2
Comments: Part of the RENIX suite and contains relevant code thereto.
          Requires SWA=BELOW.
------------------------------------------------------------------------
Name:     Q
Type:     CLIST
Purpose:  TSO HELP for Q clist
Requires: CLIST Q (q.v.)
Used by:
Comments:
------------------------------------------------------------------------
------------------------------------------------------------------------
Name:     XLNKLST
Type:     HELP
Purpose:  TSO help for XLNKLST command
Requires: ASM XLNKLST
Used by:  (See ASM XLNKLST)
Comments: (See ASM XLNKLST)
------------------------------------------------------------------------
Name:     XPROC
Type:     HELP
Purpose:  TSO help for XPROC command
Requires: ASM XPROC
Used by:  (See ASM XPROC)
Comments: Help file contains references to local Draper facilities.
./ ADD NAME=ALLOCLNK 0100-07332-07332-0900-00033-00033-00000-SEB
)F Function -

   The ALLOCLNK CLIST allocates the system link list.

   Note 1:  This command requires MVS/SP2.1 (XA) with LLA (link list
            lookaside) to be installed.

   Note 2:  Even though the command functions successfully, using the
            generated DD concatenation can result in an S013-E4 ABEND
            if your installation has many LPA and link list libraries.

)X Syntax -

   ALLOCLNK
              FILE('file name')
              LPA

   Required:  none

   Defaults:
              FILE(SYSLIB)
              LPA defaults to null

)O Operands -

))FILE(SYSLIB)   - the file name to which the link list libraries
                   are to be allocated.  It will be reused if it is
                   already allocated.

))LPA            - If LPA is specified, 'SYS1.LPALIB' is included as
                   the first library in the concatenation; otherwise
                   'SYS1.LPALIB' is not used.

./ ADD NAME=CLIST    0100-07332-07332-0900-00049-00049-00000-SEB
)F Function -

   The CLIST CLIST places you into an interactive TSO mode under which
   you can enter TSO commands and a subset of command procedure (CLIST)
   statements, using symbolic substitution and system CLIST variables.
   Under ISPF it may be used to go into quasi-READY line mode in order
   to enter multiple TSO commands without full-screen interaction; in
   addition, it provides a way to type in the ISPEXEC command without
   creating a CLIST to contain it.

   This is useful for testing CLIST functions without writing a
   temporary CLIST for that purpose; it is also useful to take
   advantage of symbolic substitution and variable services in
   quasi-READY mode.

   You will be prompted for commands interactively until you enter /*
   or a command that terminates the CLIST (like END or EXIT).

   Entering a single equal sign = causes the last TSO command to be
   re-executed.

   Entering a double equal sign == causes the last TSO command to be
   redisplayed so that you may modify it by overtyping and re-execute.

   The following command procedure statements are permitted:

     ATTN
     CONTROL   (note:  CONTROL options cannot be abbreviated)
     ERROR     (note:  there is an error exit in effect initially)
     EXIT
     LISTDSI
     SET
     SYSCALL   (but there isn't any subprocedure to call)
     TERMIN
     WRITE
     WRITENR
     OPENFILE
     GETFILE
     PUTFILE
     CLOSFILE

   These are not considered TSO commands and therefore cannot be
   repeated via equal signs.

)X Syntax -

   %CLIST

)O Operands - none
./ ADD NAME=COMP     0100-07332-07332-0900-00084-00084-00000-SEB
)F Function -

   The COMP clist compares two datasets.

)X Syntax -

   COMP       'dsname1' 'dsname2'
              VOL1('volume serial')
              VOL2('volume serial')
              OUTPUT('data set name'/*)
              ISASIZE('number')
              REPORT(''/NO)
              NAME('module name')
              START('column spec')
              END('column spec')
              MATCH / MISMATCH ('number')
              REPLACE
              REUSE

   Required: 'dsname1' and 'dsname2'

   Defaults:
              VOL1     defaults to null
              VOL2     defaults to null
              OUTPUT(*)
              ISASIZE(10)
              REPORT(NO)
              NAME(PLICOMP)
              START(0)
              END(0)
              MATCH / MISMATCH (0)

)O Operands -

)P'dsname1'      - the first data set to be compared.

)P'dsname2'      - the second data set to be compared.

))VOL1           - the volume on which the first data set resides, if
                   the data set is not cataloged.

))VOL2           - the volume on which the second data set resides, if
                   the data set is not cataloged.

))OUTPUT         - the destination for the output.  Default is your
                   TSO terminal.  If a data set name is specified, it
                   is created using the ALLOCATE DCB parameters
                   DSORG(PS) RECFM(V B A) LRECL(155) BLKSIZE(6233).

))ISASIZE        - the ISASIZE value to be passed to the PL/1 program
                   which does the compare.  Default is 10 (i.e. 10K).

))REPORT         - Default is NO.  If REPORT('') is specified, then
                   the REPORT parameter is passed to the PL/1 program
                   which does the compare.  PL1DUMP or PLIDUMP must be
                   allocated to get this report.

))NAME           - The name of the PL/1 program invoked to do the
                   compare.  Default is PLICOMP.  It must reside in the
                   library 'SEB1525.PUB.LOAD' (you may change the name
                   of the library by editing the CLIST).

))START          - The starting column where the compare is to operate.
                   If 0 is specified (which is the default), column 1
                   is used as the starting column (thus 0 = 1).
                   This operand may be used to prevent sequence numbers
                   from being included in the compare for
                   variable-length records (specify START(9)).

))END            - The last column of the data to be compared.
                   If 0 is specified (which is the default), the last
                   column is used as the ending column.
                   This operand may be used to prevent sequence numbers
                   from being included in the compare for fixed-length
                   records (e.g. END(72)).

))MATCH          - Same as "MISMATCH".  Default is 0.

))MISMATCH       - The number of records which will be buffered to
                   detect insertions and/or deletions.  The higher
                   this value is, the more storage will be required.
                   Default is 0, which will detect no insertions or
                   deletions.

./ ADD NAME=COMPROC  0100-07332-07332-0900-00043-00043-00000-SEB
)F Function -

   The COMPROC clist compares a source CLIST with a PROCMAN-"compiled"
   CLIST.

   Two temporary data sets are created and deleted by COMPROC:

    'prefix.clistname.COMPILED.CLIST'
    'prefix.clistname.ORIGINAL.CLIST'

   If either of these exists prior to invocation of COMPROC, COMPROC
   will fail.

)X Syntax -

   COMPROC    'clistname'
              MISMATCH('number')

   Required: 'clistname'

   Defaults:  MISMATCH(64)

   Notes:     You are prompted to enter the names of the libraries
              from which both CLIST's come.

)O Operands -

)P'clistname'    - the name of the CLIST (1 to 8 characters) to be
                   compared.  You are prompted to enter the name of
                   the CLIST library that contains the source CLIST
                   (press ENTER to accept the default of the system
                   CLIST library) and also to enter the name of the
                   load library that contains the PROCMAN-"compiled"
                   CLIST (press ENTER to accept the default of the
                   system link list library that contains "compiled"
                   CLIST's).  The named CLIST must exist in both
                   libraries that you respond with.

))MISMATCH       - the number of records which will be buffered by the
                   compare program to detect insertions and/or
                   deletions.  The higher this value is, the more
                   storage will be required.  Default is 64.

./ ADD NAME=DEPROC   0100-07332-07332-0900-00057-00057-00000-SEB
)F Function -

   The DEPROC clist "decompiles" a CLIST "compiled" by PROCMAN
   (it will also decompile a CLIST invoked by EXEC).

)X Syntax -

   DEPROC 'clistname'/'clistdsn'
          LOADLIB('library name')
          OUTPUT('data set name'/*)

   Required: 'clistname' or 'clistdsn'

   Note:  You will be prompted to enter values for any required
          positional parameters, although these values will not
          be used.
   Exception: If new keyword values are entered, these values
          will be reflected in the decompiled PROC statement.

   Examples:

             DEPROC XPRINT
             DEPROC 'CSD.CMD.CLIST(XPRINT)'
             DEPROC CMD.CLIST(MYPROC)
             DEPROC MYPROC LOADLIB(CMD.LOAD) OUTPUT(NEW.SOURCE.CLIST)

)O Operands -

)P'clistname' - (1) the name of the PROCMAN-"compiled" clist to be
                decompiled (1-8 characters).  The clist must reside in
                the load library specified by the LOADLIB operand
                (whose default is the system link list load library
                which contains "compiled" system CLIST's).
                If the clistname is entered with a preceding percent
                sign (%), the decompiler will restore percent signs
                that were removed by PROCMAN's NOPERCENT option (except
                for ISPEXEC SELECT CMD(%...)  percent signs).

                Or...

                (2) a data set name identifying a source CLIST to be
                decompiled.  LOADLIB is ignored if this is specified.

))LOADLIB     - the name of the library which contains the
                PROCMAN-"compiled" CLIST to be decompiled (this is not
                applicable if a source CLIST is to be decompiled).
                Default is the system link list library which contains
                PROCMAN-"compiled" system CLIST's.

))OUTPUT      - the name of a new data set into which the decompiled
                CLIST is written.  Default is your TSO terminal.
                If the output is directed to the terminal, no sequence
                numbers are generated.
                If the output is directed to a data set, the data set
                is created as new (it must not already exist), and
                sequence numbers are generated.

./ ADD NAME=DU       0100-07332-07332-0900-00054-00054-00000-SEB
)F Function -

   The DU exec displays basic information from the UCB of a
   specified device, volume or group of devices.

)X Syntax -

   DU         'positional'

   Required: none

   Defaults: 'positional' defaults to * (meaning display all)

   Examples:
              DU *
              DU TSVOL
              DU A40
              DU ***RES
              DU 33*0
              DU 3400
              DU AUSCOM
              DU C**

)O Operands -

)P'positional'   - one of the following:

   Null, * or ALL - displays all devices.
   AUSCOM         - displays all AUSCOM devices.
   CAEDS / HFGD   - displays all devices of type HFGD.
   volser         - displays volumes beginning with the string
                    "volser".  Asterisks may be included in the string
                    as wild cards.
   unittype       - displays devices of the requested device type.
                    Asterisks may be included in the string as
                    wild cards.
   cuu            - displays devices of the requested unit address.
                    Asterisks may be included in the string as
                    wild cards.

   Some of these may be ambiguous.  In general, a string consisting
   of numbers is assumed to be a unittype specification;
   a 6-character string is assumed to be a volume serial;
   a 3-character string with hex characters and asterisks is assumed
   to be a unit address; otherwise a volume serial string is assumed.

  The following information is displayed:

    UCB address (only if PROFILE MSGID is active)
    Volume serial
    Unit address
    Device type (in character)
    Device type (in hex)

./ ADD NAME=FINDMEM  0100-07332-07332-0900-00045-00045-00000-SEB
)F Function -

   The FINDMEM clist locates PDS members in the system link list
   or in a preallocated concatenation of PDS's.

   You do not specify a member name on the CLIST; instead,
   you are prompted to enter member names (a null line terminates
   the CLIST).  Since the location of each requested member is
   determined by issuing a BLDL, only one PDS name will be
   displayed; a search through the directories of all PDS's is
   NOT done.

   (Note: The above is no longer the case, since the underlying
          program that does the search has been replace with a
          CLIST that does the search, and also displays other
          occurrences of the member name in the concatenation.)

)X Syntax -

   FINDMEM    'file'
              LPA / NOLPA

   Required: none

   Defaults:  'file' defaults to system link list
                     (including LPA unless NOLPA is specified)
              LPA / NOLPA defaults to LPA

)O Operands -

)P'file'         - the name of a file currently allocated to one or
                   more PDS's (a system file such as SYSPROC is
                   perfectly acceptable).  If this operand is omitted
                   or specified as *, the system link list plus the
                   link pack area (SYS1.LPALIB), as defined by the
                   LPA / NOLPA operand, is used.

))LPA            - If LPA is specified, 'SYS1.LPALIB' is included as
                   the first library in the concatenation, ahead of the
                   system link list libraries.  This is the default,
                   but is not applicable if a file name is specified.

))NOLPA          - If NOLPA is specified, 'SYS1.LPALIB' is not included
                   in the concatenation.

./ ADD NAME=LA       0100-07332-07332-0900-00053-00053-00000-SEB
)F Function -

   la - list current file allocations, optionally with volumes, units,
   dispositions, and/or data set attributes.  A ddname or group of
   ddnames can be selected.

)X Syntax -

   la {-acjqsuv} {fn {fn}} ...

      fn:   a filename or a filemask with *'s.

   Options: -a   display DCB attributes from the JFCB
            -c   display file concatenation numbers
            -j   generate JCL card images
            -q   queue output on stack instead of writing to output
            -s   display disposition status (SHR, NEW, MOD, OLD)
            -u   display volume and unit info
            -v   display volume info only

   Required:  none

   Defaults:  If no fn's are specified, all files are shown.

)O Operands -

)P'fn'   - a filename (ddname), or a filemask (a ddname with asterisks
           "*" in place of blank or nonblank characters).  Note that
           this is not the same as filespec wildcarding.  If no fn's
           are specified, all files are shown.

))-A  - display DCB attributes from the JFCB.

))-C  - display file concatenation numbers (zero-based) along with file
        names.  Useful if piping the output through grep (e.g. to see
        certain dsnames only), since concatenated file names show up
        empty otherwise.

))-J  - generate JCL images instead of information lines.  If this
        option is selected, then it is as if -asuv was also given.
        Files with a disposition other than SHR are generated as
        JCL comments to prevent a potential batch job from being
        hung up waiting for the TSO session to terminate.

))-Q  - queue lines to data stack instead of outputting.  This can be
        used in combination with -j to generate JCL for SUBMIT *.

))-S  - show disposition status (SHR, NEW, MOD, OLD).

))-U  - display volume and unit name information only

))-V  - display volume serials only

./ ADD NAME=Q        0100-07332-07332-0900-00031-00031-00000-SEB
)F Function -

   The Q clist displays system ENQ information.

)X Syntax -

   Q          'value'

   Required:  none

   Defaults:  user is prompted to enter ENQ parameters.

   Examples:  Q C           to display all waits.
              Q J=ABC1234   to see what ABC1234 is using.
              Q SYSIKJUA    to see who is logged on to TSO.
              Q ARCDSN      to see what HSM is migrating/recalling.
              Q             to be prompted to enter parameters.

)O Operands -

)P'value'        - one of the following:

                    C         - display all conflicts (waits).
                    R         - display all reserves.
                    J=jobname - display all resources held by the
                                specified job or TSO user.
                    null or * - be prompted to enter a major name
                                and/or a minor name or jobname.
                    other     - display all enqueues on the specified
                                major name (QNAME).

./ ADD NAME=XLNKLST  0100-07332-07332-0900-00054-00054-00000-SEB
)F Function -

   The XLNKLST command allocates the system link list and/or the
   LPA list libraries to a specified file name.

   Note 1:  This command requires MVS/SP2.1 (XA) with LLA (link list
            lookaside) to be installed.

   Note 2:  Even though the command functions successfully, using the
            generated DD concatenation can result in an S013-E4 ABEND
            if your installation has many LPA and link list libraries.

)X Syntax -

   XCMD
   XLNKLST    'filename'
              LPA / NOLPA
              LINKLIST / NOLINKLIST
              REUSE

   Required:  'filename'

   Defaults:  LPA, LINKLIST

   Notes:     It is an error to specify both NOLPA and NOLINKLIST.


)O Operands -

)P'filename'     - the file name to which the link list and/or LPA list
                   libraries are to be allocated.

))LPA            - If LPA is specified, the libraries from the LPA list
                   (normally 'SYS1.LPALIB') are included in the
                   concatenation, in front of the link list libraries
                   if requested.  This is the default.

))NOLPA          - If NOLPA is specified, the libraries from the LPA
                   list are not included in the concatenation.

))LINKLIST       - If LINKLIST is specified, the libraries from the
                   system link list are included in the concatenation,
                   behind the LPA list libraries if requested.  This is
                   the default.

))NOLINKLIST     - If NOLINKLIST is specified, the libraries from the
                   system link list are not included in the
                   concatenation.

))REUSE          - If REUSE is specified, the requested file name will
                   be unallocated and reused if it is already
                   allocated.  If you do not specify REUSE, the command
                   will fail if the file is already allocated.

./ ADD NAME=XPROC    0100-07332-07332-0900-00256-00256-00000-SEB
***********************************************************************
*                                                                     *
* Copyright (c) 1989, 1992 The Charles Stark Draper Laboratory, Inc.  *
*                                                                     *
*  This program is provided on an "as is" basis. It may be freely     *
*  distributed as long as it is not offered for commercial sale,      *
*  nd as long as this copyright notice is included.                   *
*                                                                     *
***********************************************************************
*
* XPROC 04/13/92 - SEB1525 - Version 2 - /quotable option added
*
)F FUNCTION -

 The XPROC command parses an argument string into positional and/or
 keyword parameters, similarly to the PROC statement of a CLIST.
 However, XPROC can be used inside a REXX exec to parse the argument
 to the exec, or inside a CLIST or REXX exec to process the value of
 a variable as if it were an argument string.

 The values of the parameters specified on the XPROC command cause the
 corresponding REXX or CLIST variables to be set, as they would in a
 CLIST PROC statement.

 The rules for entering parameters to be processed by the XPROC command
 are identical to those of the CLIST PROC statement - except that XPROC
 supports extensions to the CLIST PROC syntax by means of options
 preceded by the slash ("/") character.

 For more information on PROC syntax, consult a TSO/E CLIST manual,
 or use the local Draper command XHELPC PROC to view help for PROC.

 Notes: As for any TSO command, it is best to enclose the entire
       XPROC command in "double quotes" when using it from REXX.
       This includes the variable names.

       When XPROC is used, prompting is not available by default
       (unlike the PROC statement of a CLIST).  Therefore, it is
       advisable to precede the call to XPROC with a statement that
       activates prompting, e.g.

       CALL PROMPT "ON"  /* for REXX  */
       CONTROL PROMPT    /* for CLIST */

       Also, if there is an error in the XPROC command, or the parsing
       of the argument string fails, a REXX exec (or a CLIST with
       CONTROL NOFLUSH active) will NOT be flushed, but will continue
       to execute (with none of the parameters set).  Therefore, you
       should check the value of RC (for REXX) or &LASTCC (for CLIST)
       afterwards and EXIT if it is not zero.

)X SYNTAX -

 XPROC  {input-variable}
        positional-number
        {positional-parameter{/option...} ...}
        {keyword-parameter{/option...}{({default-value})}{/option...}}

        The number of positional-parameters must be equal to the
        value of positional-number (which must be a number).

 Required: positional-number

 Note that the syntax of XPROC is exactly identical to that of
 the PROC statement of CLIST language, except for the optional
 "input-variable" and the "/option" feature.

 Examples:

  The following examples assume a REXX environment:

  Example 1: Define one positional parameter (DATASET),
             no keyword parameters:

       "XPROC 1 DATASET"

  Example 2: Define no positional parameters, and one keyword
             parameter (TESTING) which has a null default value:

       "XPROC 0 TESTING"

  Example 3: Define a positional parameter (LIBRARY), one keyword
             parameter (TRACE) which has a null default value, and
             one (SYSOUT) which has the default value "A":

       "XPROC 1 LIBRARY TRACE SYSOUT(A)"

  Example 4: Define three positional parameters (LIBRARY, TYPE and
             MEMBER) and a keyword (OWNER) with a default value of
             the user's TSO prefix.  Note how we allow REXX to
             generate the desired default value so it appears in
             the XPROC command at execution time:

       "XPROC 3 LIBRARY TYPE MEMBER OWNER('"SYSVAR(SYSPREF)"')"

  Example 5: Define a positional parameter (NAME) and one keyword
             parameter (TITLE) which has a null default value, and
             one (SUBJECT) which has the default value "None".
             The values of all three parameters will be processed
             as is with respect to case.

       XPROC 1 NAME/ASIS TITLE/ASIS() SUBJECT(None)/ASIS

  The following examples work under REXX or CLIST (but be sure to
  enclose the command in "double quotes" under REXX):

  Example 6: Define a positional parameter (LIBRARY), one keyword
             parameter (TRACE) which has a null default value, and
             one (SYSOUT) which has the default value "A".  The
             argument string to be parsed will be taken from the
             value of the variable "SYSDVAL".

       XPROC SYSDVAL 1 LIBRARY TRACE SYSOUT(A)

  Example 7: Define three positional parameters (LIBRARY, TYPE and
             MEMBER), and a keyword (MARK) with a default value of
             the current time.  Note how we allow REXX to generate
             the desired default value so it appears in the XPROC
             command at execution time.  The argument string to be
             parsed will be taken from the value of the variable
             "STRING".

       "XPROC STRING 3 LIBRARY TYPE MEMBER MARK('"TIME()"')"

             Under CLIST, this could be coded as:

       XPROC STRING 3 LIBRARY TYPE MEMBER MARK('&SYSTIME')

             but note that &SYSTIME gets resolved BEFORE the XPROC
             command executes.  This is the only type of situation
             where an "&" is appropriate.

)O OPERANDS -

))input-variable

   the NAME of a variable from which the argument string to be parsed
   is to be extracted.  The name must conform to the rules for CLIST or
   REXX variable names.  The specified variable must be set to the
   argument string to be processed (no command name included) before
   XPROC is invoked.

   The input-variable name may be omitted in a REXX exec ONLY, in which
   case the arguments to the REXX exec are accessed.  This provides the
   same capability that the PROC statement of a CLIST would.

))positional-number

   a number (0 or greater) which specifies the number of positional
   parameters that follow.  This is required.  If there are no
   positional parameters, specify a 0.

))positional-parameter

   A variable name consisting of alphameric and national characters,
   of which the first cannot be numeric.  The length of this name must
   be between 1 and 252 for CLISTs, and between 1 and 250 for REXX.
   Underscores may be part of the name.

   Note: Unlike the CLIST PROC statement, XPROC does not accept
   ampersands in parameter names.  Ampersands in an XPROC command will
   cause normal symbolic substitution in CLISTS; they will cause errors
   under REXX.

))keyword-parameter

   A variable name consisting of alphameric and national characters,
   of which the first cannot be numeric.  The length of this name must
   be between 1 and 252 for CLISTs, and between 1 and 250 for REXX.
   A default value in parentheses may optionally follow the parameter;
   if there is no default value, the keyword takes on its own name as
   a value if given by the caller, and a null string otherwise.

   Note: Unlike the CLIST PROC statement, XPROC does not accept
   ampersands ("&") in parameter names.  Ampersands in an XPROC command
   will cause normal symbolic substitution in CLISTS; they will cause
   errors under REXX.

))default-value

   Any character string, including the null string.  If it is present,
   it must follow a valid keyword parameter and be enclosed in
   parentheses (the right parenthesis may be omitted if this is at the
   end of the command).  The value may be quoted (with single quotes,
   with two quotes representing one) or unquoted; however, if it
   contains any special characters (blanks, unbalanced parentheses,
   etc.), it must be quoted.

   If the caller provides an alternate value for the associated
   keyword, the keyword takes on the that value; otherwise it takes on
   the default value specified by XPROC.  Note that although () may be
   specified in XPROC for a null string, a caller must type ('') to get
   the same result.

))option

   Processing options may be associated with positional or keyword
   parameters by specifying their names following the parameter name
   delimited by a slash.  For example, assuming positional parameter
   name PP and keyword parameter name KP, and option name OP1 and OP2,
   the following are possible:

   PP/OP1
   KP/OP1
   KP/OP1(default)
   KP(default)/OP1
   PP/OP1/OP2
   KP/OP1(default)/OP2

   The supported options at this time are ASIS and QUOTABLE.

))ASIS

   If the ASIS option is associated with a positional or keyword
   parameter that takes a value, the value specified by the user
   for that parameter is processed in case-retention mode.  In
   other words, any lower-case characters present in the value
   are kept as is.  This overrides the default behavior, which
   converts all parameter values to uppercase (the only behavior
   available via the PROC statement of CLIST).

   The ASIS option is not valid for keyword parameters that do
   not take a value (i.e. evaluate to themselves or null).

   Note that default values in the XPROC prototype are always
   processed asis, regardless of the presence of this option.

   Examples: XPROC 1 NAME/ASIS
             XPROC 0 TITLE/ASIS(default)
             XPROC 0 TITLE(default)/ASIS

))QUOTABLE

   If the QUOTABLE option is associated with a positional parameter,
   the value specified by the user for that parameter may be entered
   as a quoted string.  In other words, embedded blanks or other
   special characters may be entered if the string is enclosed in
   single quotes by the user.  The quotes do not become part of the
   resulting value; to pass in quotes, the user must provide doubled
   quotes, similar to the way quotes are specified for keyword values.
   This overrides the default behavior, which takes a
   blank-or-comma-delimited string as the value of the positional
   parameter, without honoring quotes specially.

   Thus, you may define a CLIST or REXX exec that takes a syntax like:

     MYCLIST 'hi there' 'how are you'

   and have the strings entered as positional parameters.

   The QUOTABLE option is valid only for positional parameters,
   not keyword parameters.

   Examples: XPROC 1 NAME/QUOTABLE
             XPROC 3 NAME/ASIS/QUOTABLE ADDRESS/QUOTABLE CITY/ASIS

