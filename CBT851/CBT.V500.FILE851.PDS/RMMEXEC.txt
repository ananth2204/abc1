/** REXX *************************************************************/
/*                                                                   */
/*                               RMMEXEC                             */
/*                               -------                             */
/*                                                                   */
/* PURPOSE: REXX - BUILD JOBS TO COPY A TAPE USING IEBGENER          */
/*                                                                   */
/* SYNTAX : RMMEXEC volser_out                                       */
/*                                                                   */
/*          volser_out- the output tape's VOLSER. OPTIONAL. Required */
/*                      if there are more than 255 files on the tape.*/
/*                      This is because more than 255 files requires */
/*                      more than 255 steps and hence more than one  */
/*                      job. There is no way to pass the tape VOLSER */
/*                      used to the subsequent jobs, if a scratch    */
/*                      volume was used. Therefore, a dummy dataset  */
/*                      must be allocated on file 1 of the output    */
/*                      tape, then writing commencing from file 2.   */
/*                                                                   */
/* UPDATE : Customise this exec as follows, before using it.         */
/*                                                                   */
/*        - Refer to the section titled "Set constants". Update as   */
/*          required the values set here.                            */
/*                                                                   */
/*        - Refer to the section where the jobcard is built. Update  */
/*          as required, to your installation's standards.           */
/*                                                                   */
/* AUTHOR : Fred Schmidt                                             */
/* SOURCE :                                                          */
/* NOTES  :                                                          */
/* HISTORY:                                                          */
/* 28/04/11 1.0 Creation                                             */
/*********************************************************************/
PARSE   UPPER   ARG parms        /* Input parms to var parms         */
call Setup                       /* Setup standard environment       */
if trace then trace r

/*---------------------------------------------------------------------
Set constants                                                      @h3
---------------------------------------------------------------------*/
Job_pref='FUSC'              /* First 4 chars of generated jobnames  */
Jobclass='E'                                    /* Jobclass for jobs */
maxsteps=255                                    /* Max steps per job */
typrun="HOLD"                                   /* Job TYPRUN to use */
ovexpdt=""               /* Don't override EXPDT's for new tape dsns */
program="ICEGENER"          /* Program to do the copy, eg IEBGENER   */
/*ovexpdt="1999/000"*/      /* Override EXPDT to use for output dsns */

/*---------------------------------------------------------------------
Set static values                                                  @h3
---------------------------------------------------------------------*/
outlabel="1"                /* First file on output tape to write to */
volser_out=''                    /* Default is no output tape VOLSER */
k=1                                        /* Index for output lines */
step=1                        /* Counter for number of steps per job */
jobno=1                          /* Counter for job number generated */

/**********************************************************************
Main Code                                                          @h1
**********************************************************************/
PARSE VALUE parms WITH parms '(' options ')'
PARSE   UPPER   VALUE parms WITH volser_out therest
if therest<>'' then say 'Extraneous parms ignored:' therest<>''
if volser_out<>'' then outlabel="2" /* Start writing after dummy file*/

/*=====================================================================
Read List of dataset names and attributes
=====================================================================*/
'EXECIO * DISKR INDD (STEM LINE. FINIS'     /* FINIS Free's file  */
  if rc<>0 then call exit rc,'Problems reading file' fileid

/*=====================================================================
Extract required info
=====================================================================*/
Do i=1 by 1 to line.0                /* For each dsn in list...      */

  PARSE VALUE line.i WITH,
                            2    dsn      46,
                            49   volser   55,
                            56   label    65,
                            66   expdt    78,
                            79   vrsprot  80,
                            110  pgm      119,
                            101  blksize  110,
                            111  lrecl    119,
                            120  recfm    124,
                            127  loc      135,
                            .

  dsn=STRIP(dsn,'B')
  label=STRIP(label,'B')
  blksize=STRIP(blksize,'B')
  lrecl=STRIP(lrecl,'B')
  recfm=STRIP(recfm,'B')

  Select
    When ovexpdt <> "" then expdt=ovexpdt  /* allow override */
    When expdt = "00/00/1999" then expdt="1999/000"
    When expdt = "31/12/1999" then expdt="1999/365"
    When expdt = "32/12/1999" then expdt="1999/365"
    Otherwise do                              /* Convert date format */
      PARSE VALUE expdt WITH dd "/" mm "/" ccyy
      yy=SUBSTR(ccyy,3,2)
      Edate=yy||"/"mm||"/"dd
      expdt=GREG2JUL(Edate)
      expdt=SUBSTR(expdt,1,4)||"/"||SUBSTR(expdt,5,3)
    /*if SUBSTR(expdt,3,2)||SUBSTR(expdt,6,3)
    < DATE('J') then expired=1 */
    End
  End /* Select */

  If DEBUG then say 'dsn='dsn 'volser='volser 'label='label,
      'expdt='expdt,
      'blksize='blksize 'lrecl='lrecl 'recfm='recfm 'loc='loc

/*=====================================================================
If > maxsteps, write output to new file
=====================================================================*/
if step >= maxsteps then do
    outfile="OUT"||RIGHT('00000'||jobno,5)
    'EXECIO * DISKW' outfile '(STEM out1. FINIS'
    DROP out1.
    jobno=jobno+1
    step=1
End
/*=====================================================================
If first step, build jobcard
=====================================================================*/
if step=1 then do
  jobname=job_pref||RIGHT('00000'||jobno,3)
  step=1                            /* Reset step counter          */
  Say "Building job" jobname

  out1.1 ="//$JOBNAME JOB (MFS,1206),'F.SCHMIDT X96891',"
  out1.1=OVERLAY(jobname,out1.1,3,8," ")
  if DEBUG then say out1.1

  out1.2 ="//             MSGCLASS=2,MSGLEVEL=(1,1),CLASS="jobclass","
  out1.3 ="//             LINES=100,TIME=NOLIMIT,TYPRUN="typrun","
  out1.4 ="//             NOTIFY=FUS,REGION=0M,USER=O50"
  k=5                     /* Next output line index */
End

/*=====================================================================
Build step for this dataset
=====================================================================*/
copystep="COPY"||RIGHT(step,4,0)
out1.k="//"copystep" EXEC PGM="program
k=k+1
out1.k="//SYSPRINT DD SYSOUT=*"
k=k+1
out1.k="//SYSUT1   DD DSN="dsn","
k=k+1
out1.k="//            DISP=OLD,"
k=k+1
out1.k="//            LRECL="lrecl",RECFM="recfm",",
                       ||"BLKSIZE="blksize","
k=k+1
out1.k="//            UNIT=TAPE,LABEL=("label",SL),"
k=k+1
Select
  When step="1" then do
    out1.k="//            VOL=(,RETAIN,SER="volser")"
    end
  Otherwise do
    out1.k="//            VOL=(,RETAIN,REF=*."prev_step".SYSUT1)"
    end
End /* Select */
k=k+1
out1.k="//SYSUT2   DD DSN="dsn","
k=k+1
out1.k="//            DISP=(,KEEP),EXPDT="expdt","
k=k+1
out1.k="//            UNIT=TAPE,DATACLAS=ATL3592,"
k=k+1
out1.k="//            LRECL="lrecl",RECFM="recfm",BLKSIZE="blksize","
k=k+1
out1.k="//            LABEL=("outlabel",SL),"
k=k+1
Select
  When step="1" then do
    if volser_out='' then,
      out1.k="//            VOL=(,RETAIN)"
    else
      out1.k="//            VOL=(,RETAIN,SER="volser_out")"
    end
  Otherwise do
    out1.k="//            VOL=(,RETAIN,REF=*."prev_step".SYSUT2)"
    end
End /* Select */
k=k+1
out1.k="//SYSIN    DD DUMMY"
k=k+1
out1.k="//*======================================================"
k=k+1

prev_step=copystep   /* Save stepname for next step's referback */
step=step+1
outlabel=outlabel+1   /* Point to next tape label on output tape */

End  /* Do i=1 by 1 to line.0 */


/* Write out last job built */
outfile="OUT"||RIGHT('00000'||jobno,5)
'EXECIO * DISKW' outfile '(STEM out1. FINIS'

call exit 0

/**********************************************************************
                             SUBROUTINES
**********************************************************************/
/*===================================================================*/
/* Routines specific to this exec                                    */
/*===================================================================*/
/*-------------------------------------------------------------------*/
GREG2JUL: /* Convert Gregorian date to Julian                        */
/*-------------------------------------------------------------------*/
/* Convert a Gregorian date in one of the following formats to    */
/* Julian YYYYDDD.                                                */
/* Allowed formats: YYYY-MM-DD, YYYY/MM/DD, YY-MM-DD, YY/MM/DD    */
gdate = ARG(1)
If LENGTH(gdate) = 8 then         /* Handle YY-MM-DD and YY/MM/DD */
  Do
    /* Add century to YY format year                              */
    If SUBSTR(gdate,1,2) < 70 then gdate = "20"gdate
    Else gdate = "19"gdate
  End
gdate = SUBSTR(gdate,1,4)""SUBSTR(gdate,6,2)""SUBSTR(gdate,9,2)
                                                    /* YYYYMMDD   */
day = date('D',gdate,'S')                 /* DDD since year start */
day = RIGHT(day,3,'0')                    /* Ensure leading 0's   */
year = substr(gdate,1,4)                            /* YYYYY      */
jdate = year""day                                   /* YYYYDDD    */
return jdate


/*===================================================================*/
/* Standard Routines                                                 */
/*===================================================================*/
/*-------------------------------------------------------------------*/
Setup:    /* Standard Routines for environment and error handling @r */
/*-------------------------------------------------------------------*/
trace n                          /* Trace only failing expressions   */
signal on  syntax                /* Trap REXX syntax errors          */
signal on  halt                  /* Trap HI commands (interrupts)    */
signal on  novalue               /* Trap uninitialised REXX vars     */
signal on  error                 /* Trap any commands with rc<>0     */
If wordpos("?",parms)>0 then call HELP '$' /* Show Help information  */
If wordpos("%",parms)>0 then call HELP '%' /* Show Samples           */

PARSE VALUE parms WITH parms '(' options ')'
valid_options='DEBUG TRACE'

passon=''
PARSE VALUE 0 WITH 1 debug 1 trace .
Do while options <> ''
   PARSE UPPER VAR options option options
   If WORDPOS(option,valid_options)<>0 then INTERPRET option'=1'
   Else passon=passon option
end
parms=parms '(' passon ')'
rc=0                             /* Prime RC in case no host calls   */
RETURN                           /* Return to the main code          */
/*-------------------------------------------------------------------*/
SYNTAX:
/*-------------------------------------------------------------------*/
 parse upper source . how myname mytype . syn .
 call errexit rc,'REXX problem in' myname mytype 'line' sigl':' ,
      'ERRORTEXT'(rc), sigl':'||'SOURCELINE'(sigl)
/*-------------------------------------------------------------------*/
HALT:
/*-------------------------------------------------------------------*/
 parse upper source . how myname mytype . syn .
 call ERREXIT 5, myname mytype 'halted by HI command.'
/*-------------------------------------------------------------------*/
ERROR:
/*-------------------------------------------------------------------*/
 parse upper source . how myname mytype . syn .
 call ERREXIT rc, 'Retcode' rc 'from' 'CONDITION'('D'),,
  'Error occurred at line' sigl 'in' myname mytype
/*-------------------------------------------------------------------*/
NOVALUE:
/*-------------------------------------------------------------------*/
 parse upper source . how myname mytype . syn . '' undefvar
 parse version . rexxlvl .
 if rexxlvl>=3.46 then undefvar=' "'||'CONDITION'('D')'"'
 call errexit 99,'REXX problem in' myname mytype 'line' sigl,
      'variable'|| undefvar 'not defined'
/*-------------------------------------------------------------------*/
ERREXIT:                         /*  Exit with retcode & errormsg    */
/*-------------------------------------------------------------------*/
 do i=2 to 'ARG'()
    say 'ARG'(i)
 end
 call exit 99        /* Do any tidying up specific to the main code*/
/*-------------------------------------------------------------------*/
HELP:          /* Display Help info between $..$ comments            */
/*-------------------------------------------------------------------*/
 PARSE ARG c
 Do line = 1 to 100 while SUBSTR(SOURCELINE(line),1,3)<>'/*'||c; end
 Do line = line+1 to 100 while SUBSTR(SOURCELINE(line),1,3)<>'/*'||c
   parse value SOURCELINE(line) with "/*" helpline "*/"
   say helpline
 end
 call exit 00
RETURN
/*-------------------------------------------------------------------*/
EXIT: /*  Common  EXIT routine                                       */
/*-------------------------------------------------------------------*/
  parse arg retc,errmsg
  signal off error
  parse upper source . . myname .
  if errmsg<>'' then do; say myname':' errmsg; end
  if symbol('buffer')='VAR' then 'DROPBUF' buffer /* Drop MAKEBUF */
 exit retc
