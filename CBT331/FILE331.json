{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011801000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE331.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE331.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x11'", "DS1TRBAL": "b'X\\xda'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x7f\\x00\\x05\\x02\\x7f\\x00\\x07\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\"\\x0f\\x01\\x01\"\\x0f\\x11F\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-08T00:00:00", "modifydate": "2001-08-08T11:46:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 439    FILE:  331\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT439.FILE331\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   6 MEMBERS COUNTED; CUMULATIVE SIZE IS 284 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/08/01    11:46:47    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00D\\x00\\x99!\\x7f\\x01\\x01\"\\x0f\\x10Y\\x00\\\\\\x00Y\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-08-05T00:00:00", "modifydate": "2001-08-08T10:59:44", "lines": 92, "newlines": 89, "modlines": 0, "user": "SBGOLOB"}, "text": "The Weird and Wonderful World of Pointer Manipulation\n\nThe two callable routines SETPTRTO and SETPTRBY, demonstrate how, once\nPOINTER is introduced to COBOL, no matter how limited, it is possible\nto establish addressing to one's own WORKING-STORAGE and to directly\nmanipulate pointers without resorting to Assembler at all.  These\nroutines are self documented.  This text contains excerpts of an\narticle I have written and explain how they might be used.\n\nSETPTRTO was adapted, with changes from the IBM's GETADDRESS function,\nas described in the publication: VS COBOL II, APPLICATION PROGRAMMING\nGUIDE.  The purpose of this general routine, which is coded in COBOL,\nis to set the pointer POINTER-TO to the address of the object\nPOINTED-OBJECT.  Since we do not touch the latter, its type is\ninsignificant, and is reduced, internally, to the minimum, PIC X.\n\nThe purpose of SETPTRBY is to set the pointer POINTER-TO, up or down\n(according to the value's sign), by some value BY-VALUE.  The idea is\nto use INDEX in order to travel on the object and then to\nSET ADDRESS OF a subscripted item to the pointer.  This idea uses a\nfact, simply understood by any C programmer, that indexes and pointers\nare really the same entity.  Note that this program must be compiled\nwith the NOSSRANGE compile option (or the equivalent in your compiler)\nto ensure no compile or run time boundary checking.\n\nOne may imagine some useful applications for pointer manipulation.  The\nmost elegant use I've found for pointer manipulation is to overcome\nanother limitation of COBOL.  There is no provision in COBOL to\ndirectly manipulate variable length character strings.  The UNSTRING\nstatement may begin its process anywhere on the character string but\nthe total length of that string must be known to the UNSTRING at\ncompile time.  But if we could cheat and tell COBOL at run time that\nthe string begins somewhere else, we could, in effect, manipulate\nvariable length strings.\n\n:\n000400  DATA DIVISION.\n000600  WORKING-STORAGE SECTION.\n000610* 01  LENGTH-OF-CURRENT-STRING      PIC 9(4) COMP.\n000610  01  LENGTH-OF-CURRENT-STRING PIC S(4) COMP VALUE 19.\n000620  01  MAX-LENGTH-OF-STRING          PIC 9(4) COMP VALUE 254.\n000700  01  WS-STRING                     PIC X(254) VALUE\n000710      'ABC@DEF@GHI@JKLMNOP'.\n000900  01  FILLER.\n001000      05 WS-VALUE                      PIC S9(9) COMP.\n001100      05 WS-PTR                        USAGE POINTER.\n001120      05 WS-TALLY                      PIC S9(4) COMP.\n001130      05 WS-LEN-9                      PIC 9(4) COMP.\n001140      05 WS-POINT                      PIC 9(4) COMP.\n001150      05 WS-TOKENS OCCURS 8 INDEXED BY IX-TOKEN.\n001160         10 WS-TOKEN                   PIC X(30).\n001170         10 WS-DELM                    PIC X.\n001180         10 WS-CNT                     PIC S9(4) COMP.\n001200  LINKAGE SECTION.\n001210  01  LS-STRING                     PIC X(254).\n001400  PROCEDURE DIVISION.\n:\n005200       COMPUTE WS-VALUE = LENGTH-OF-CURRENT-STRING -\n005210                          MAX-LENGTH-OF-STRING\n005400       CALL 'SETPTRTO' USING WS-PTR WS-STRING\n005410       CALL 'SETPTRBY' USING WS-PTR WS-VALUE\n005500       SET ADDRESS OF LS-STRING TO WS-PTR.\n005600*      COMPUTE WS-POINT = MAX-LENGTH-OF-STRING - WS-VALUE + 1.\n005600       COMPUTE WS-POINT = MAX-LENGTH-OF-STRING -\n                 LENGTH-OF-CURRENT-STRING + 1.\n005700       MOVE ZERO TO WS-TALLY.\n005800       UNSTRING  LS-STRING\n005900            DELIMITED BY '@' OR '$' OR ALL X'00'\n006000            INTO WS-TOKEN (1) DELIMITER WS-DELM (1) COUNT WS-CNT(1)\n006100                 WS-TOKEN (2) DELIMITER WS-DELM (2) COUNT WS-CNT(2)\n\t\t\t\t:\n006700                 WS-TOKEN (8) DELIMITER WS-DELM (8) COUNT WS-CNT(8)\n006800            WITH POINTER WS-POINT\n006900            TALLYING WS-TALLY\n007000       END-UNSTRING\n\t:\n\nOne comment regarding pointers, strong type checking and the need to\nseparate the type from its implementation. Even though portability is\nnot a main concern in the Mainframe and COBOL world and we know how\npointers are implemented in that world, it is recommended not to\nassume that knowledge.  Do not assume that the pointer is implemented\nas a binary number or in any known way.  Keep it as a pointer only,\nnever REDEFINE it and never directly manipulate it as a number.  The\nreason for that is that platforms and implementations change.  It\nhappened once on the mainframe when IBM moved from 24 bits addresses\nto 31 bits.  Most of us were affected by that move and vividly\nremember the problems that arose out of that move, even in a pure COBOL\nenvironment.  Now if a program relates to a pointer as a signed binary\nnumber (basically, a 32 bit signed integer), it will be rendered\nincompatible as soon as the mainframe moves to 64 bits addresses.\nSuch a move may occur in our lifetime.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTEHO": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00H\\x01\\x01\"\\x0f\\x01\\x01\"\\x0f\\x11\\x00\\x00\\x1b\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-08-08T00:00:00", "modifydate": "2001-08-08T11:00:48", "lines": 27, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "   Note:  I applied these changes to the $$$DOC member, leaving\n          the old code lines, commented out.    SG - 08/08/01\n\n\n\nGolob, Sam\nFrom:   CHARLES.S.HOTTEL@customs.treas.gov\nSent:   Wednesday, August 08, 2001 10:08 AM\nTo:     sbgolob@attglobal.net\nCc:     zatlas@juno.com\nSubject:        Feedback CBT Tape File 331 Member $$$DOC\nSam and Ze'ev,\n\nThe example in the $$$DOC member requires two changes to work properly:\n\n    Line \"000610  01  length-of-current-string pic s(4) comp.\" should be\nchanged to:\n    Line \"000610  01  length-of-current-string pic s(4) comp value 19.\"\n\n    Line \"005600  compute ws-point = max-length-of-string - ws-value + 1.\"\nshould be changed to:\n    Line \"005600  compute ws-point = max-length-of-string -\nlength-of-current-string + 1.\"\n\nor  a less clear alternative would be \"compute ws-point = 1 - ws-value.\"\n\nCharles S Hottel\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE331": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x08?\\x00\\x99!\\x7f\\x12E\\x00\\x08\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-08-05T12:45:00", "lines": 8, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 331 is from Ze'ev Atlas and contains two COBOL            *   FILE 331\n//*           subroutines to set an area of Working-Storage to      *   FILE 331\n//*           an address pointer.  SETPTRTO sets the area to        *   FILE 331\n//*           the address pointer.  SETPTRBY moves the address      *   FILE 331\n//*           pointed to, up or down by a specified quantity.       *   FILE 331\n//*                                                                 *   FILE 331\n//*           email:   zatlas@juno.com                              *   FILE 331\n//*                                                                 *   FILE 331\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SETPTRBY": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99!\\x7f\\x00\\x99!\\x7f\\x12\\x15\\x00X\\x00X\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-08-05T00:00:00", "modifydate": "1999-08-05T12:15:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "SBGOLOB"}, "text": "000100*****************************************************************\n000200*        Copyright (c) 1990, 1991, 1992, 1993, 1998             *\n000300*        by Ze'ev Atlas.                                        *\n000400*        P.O.Box 121, Teaneck, NJ 07666.                        *\n000500*        Internet address: zatlas@juno.com                      *\n000600*        All rights reserved.                                   *\n000700*     The contents of this file is proprietary material,        *\n000800* property of Ze'ev Atlas. The incorporation of customer        *\n000900* modifications into the material contained herein to form an   *\n001000* updated work does not obviate or nullify any proprietary      *\n001100* rights of Ze'ev Atlas.                                        *\n001200*     Permission to copy, use and distribute this program as a  *\n001300* whole only, is granted to anybody, for private, commercial or *\n001400* government usage, free of charge, provided that this copyright*\n001500* note will be copied and distributed with it.                  *\n001600*     This product is distributed on \"as is\" basis.  Usage of   *\n001700* this product is the sole responsibility of the user. The      *\n001800* author does not assume any liability whatsoever, inherent or  *\n001900* implied, for any damage that might be caused as a result from *\n002000* using this software in any way.                               *\n002100*     Please refer to the documentation for more information.   *\n002200*****************************************************************\n002300*     Documentation:                                            *\n002400* SETPTRBY - SET pointer-name UP (or DOWN) BY value             *\n002500* -------------------------------------------------             *\n002600*     The purpose of this general routine is to set the pointer *\n002700* POINTER-TO, up or down (according to the value's sign), by    *\n002800* some value BY-VALUE.                                          *\n002900*     Together with the SETPTRTO program, this little package   *\n003000* would allow a more flexible Pointer Manipulation than is      *\n003100* possible with plain vanila COBOL.  It also demonstrate that   *\n003200* such manipulation is possible in COBOL, without resorting to  *\n003300* ASSEMBLER!                                                    *\n003400*     This subroutine manipulate a pointer to point several     *\n003500* bytes forewards or backwards.  There is a need for such a     *\n003600* command rather than manipulating the pointer directly.  A     *\n003700* pointer in IBM/370 is a 32 bits entity, but since the leftmost*\n003800* bit is not a sign, it is not a regular arithmetic value.  In  *\n003900* other architectures, a pointer may or may not be an arithmetic*\n004000* value.  Therefore it is not recomended to add to or subtract  *\n004100* from it, directly.  Also, even in IBM/370, the COBOL II type  *\n004200* PIC 9(9) COMP is defined to contain a nine decimal digits     *\n004300* and not 32 bits value, and is therefore not fully compatible  *\n004400* with the USAGE POINTER it may REDEFINES.  The \"NOTRUNC\"       *\n004500* compiler option is not always available.                      *\n004600*     Usage of the routine is like that:                        *\n004700*    ...                                                        *\n004800* CALL 'SETPTRBY' USING WS-PTR WS-VALUE.                        *\n004900*    ...                                                        *\n005000* If WS-VALUE contains a positive value, the pointer is SET UP  *\n005100* and if it contains a negative value, the pointer is SET DOWN. *\n005200* Note that this value is limitted to the equivalent of 9       *\n005300* decimal digits, which is enough for any reasonable purpose.   *\n005310*     It is possible to combine the usage of this routine with  *\n005320* the usage of the LENGTH OF spaecial register to advance to the*\n005324* next array element:                                           *\n005330*    ...                                                        *\n005340* CALL 'SETPTRBY' USING WS-PTR LENGTH OF WS-ELEMENT.            *\n005350*    ...                                                        *\n005360* providing the pointer was pointing to an array element.       *\n005400*     This program must be compiled with NOSSRANGE compile      *\n005500* option (or the equivalent in your compiler) to asure no       *\n005600* compile or run time boundary checking.                        *\n005700*****************************************************************\n005800* CBL NOSSRANGE\n005900  IDENTIFICATION DIVISION.\n006000  PROGRAM-ID. SETPTRBY.\n006100  ENVIRONMENT DIVISION.\n006200  DATA DIVISION.\n006300  WORKING-STORAGE SECTION.\n006400  01   J                   PIC S9(9) COMP.\n006500  LINKAGE SECTION.\n006600  01   POINTER-TO          POINTER.\n006700  01   BY-VALUE            PIC S9(9) COMP.\n006800  01   VIRTUAL-OBJECT.\n006900       05 VIRTUAL-ELEMENT OCCURS 1 INDEXED BY I PIC X.\n007000  PROCEDURE DIVISION USING POINTER-TO BY-VALUE.\n007100       SET ADDRESS OF VIRTUAL-OBJECT TO POINTER-TO\n007200       SET I TO 1\n007300       IF BY-VALUE < ZERO\n007400          MULTIPLY BY-VALUE BY -1 GIVING J\n007500          SET I DOWN BY J\n007600       ELSE\n007700          SET I UP BY BY-VALUE\n007800       END-IF\n007900       SET POINTER-TO TO ADDRESS OF VIRTUAL-ELEMENT (I)\n008000       GOBACK.\n008100  END PROGRAM SETPTRBY.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SETPTRTO": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99!\\x7f\\x00\\x99!\\x7f\\x12\\x12\\x009\\x009\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-08-05T00:00:00", "modifydate": "1999-08-05T12:12:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "SBGOLOB"}, "text": "000130*****************************************************************\n000200* Addapted, with changes, from the GETADDRESS subroutine,       *\n000300* as described in the IBM's publication:                        *\n000400* VS COBOL II, APPLICATION PROGRAMMING GUIDE. (*)               *\n000500*        BY ZEEV ATLAS.                                         *\n000600*        P.O.Box 121, Teaneck, NJ 07666.                        *\n000700*        Internet address: zatlas@juno.com                      *\n000710*     As this is an adaptation from an IBM manual it should be  *\n000720* availabe to all under same terms as stated in that manual     *\n000730*     This code is distributed on \"as is\" basis.  Usage of this *\n000740* code is the sole responsibility of the user. The author does  *\n000750* not assume any liability whatsoever, inherent or implied, for *\n000760* any damage that might be caused as a result from using this   *\n000770* software in any way.                                          *\n000780*     Please refer to the documentation for more information.   *\n000800*---------------------------------------------------------------*\n000900* (*) VS COBOL II, Application programming Guide, Release 3.0   *\n001000* 3.1 3.2, SC26-4045-4, IBM 1990                                *\n001100*****************************************************************\n001110*     Documentation:                                            *\n001200* SETPTRTO - SET pointer-name TO ADDRESS OF working-storage-name*\n001300* --------------------------------------------------------------*\n001400*    The purpose of this general routine is to set the pointer  *\n001500* POINTER-TO to the address of the object POINTED-OBJECT. Since *\n001600* we do not touch the latter, its type is insignificant, and is *\n001700* reduced here to the minimum, PIC X.                           *\n001800*    This subroutine forces the address of the WORKING-STORAGE  *\n001900* data item to the pointer.  This subroutine should be used in  *\n002000* cojunction with a regular SET command in order to establish   *\n002100* the right addressing.                                         *\n002200*    Usage of the routine is like that:                         *\n002300*    ...                                                        *\n002400* CALL 'SETPTRTO' USING WS-PTR WS-AREA.                         *\n002500* SET ADDRESS OF LS-AREA TO WS-PTR.                             *\n002600*    ...                                                        *\n002700* and from than on, any reference to LS-AREA-A1 etc., will      *\n002800* actually refer to some part of WS-AREA.                       *\n002900*    The \"Application programming Guide\" (*) brings in part 4 - *\n003000* \"Compiling Your Program\", an example similar to my SETPTRTO,  *\n003100* under the name GETADDRESS.  This subroutine does              *\n003200* \"SET pointer TO ADDRESS OF data-item\",                        *\n003300* while both are in the LINKAGE SECTION.  Note that calling such*\n003400* a subroutine (IBM's or mine), must be BY REFERENCE (which is  *\n003500* the default).                                                 *\n003600******************************************************************\n003700 IDENTIFICATION DIVISION.\n003800 PROGRAM-ID. SETPTRTO.\n003900 ENVIRONMENT DIVISION.\n004000 DATA DIVISION.\n004100 LINKAGE SECTION.\n004200 01  POINTER-TO          POINTER.\n004300 01  POINTED-OBJECT      PIC X.\n004400 PROCEDURE DIVISION USING POINTER-TO POINTED-OBJECT.\n004500       SET POINTER-TO TO ADDRESS OF POINTED-OBJECT\n004600       GOBACK.\n004700 END PROGRAM SETPTRTO.\n004800\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT331/FILE331.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT331", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}