{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012512000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE634.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE634.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x02'", "DS1TRBAL": "b'\\xd5*'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x91\\x00\\n\\x04\\x91\\x00\\r\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06#\\x8f\\x01\\x06#\\x8f#\\x07\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-08-26T00:00:00", "modifydate": "2006-08-26T23:07:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-472"}, "text": "REGULAR CBT TAPE - VERSION 472    FILE:  634\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT472.FILE634\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    3120    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 527 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/26/06    23:07:04    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ASSEMBL": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x14\\x01\\x03\\x16/\\x01\\x06#\\x8f\"F\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-06-11T00:00:00", "modifydate": "2006-08-26T22:46:14", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.K17.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.K17.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT472.FILE634(UCBSUBR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,7),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB472634\n SETCODE AC(1)\n NAME    UCBSUBR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$BATJCL": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00E\\x01\\x03\\x16/\\x01\\x03\\x16/\\x01\\x06\\x00\\x0e\\x00\\t\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-06-11T00:00:00", "modifydate": "2003-06-11T01:06:45", "lines": 14, "newlines": 9, "modlines": 0, "user": "IBMUSER"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//*  RUNNING LISTUCB IN BATCH - A JCL EXAMPLE                     *//\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//TSOBATCH EXEC PGM=IKJEFT01\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB   <== CONTAINS UCBSUBR\n//SYSPROC  DD DISP=SHR,DSN=SBGOLOB.CLIST         <== CONTAINS LISTUCB\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n LISTUCB *\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INSTALL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00!\\x01\\x03\\x16/\\x01\\x03\\x16/\\x01\\x08\\x00\\x11\\x00\\x08\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-06-11T00:00:00", "modifydate": "2003-06-11T01:08:21", "lines": 17, "newlines": 8, "modlines": 0, "user": "IBMUSER"}, "text": "Installation instructions for the LISTUCB program.\n\n   1.  You don't have to assemble the source.  You may just\n        TSO RECEIVE INDS(this.pds($LOADLIB))\n       and copy the load module UCBSUBR to a load library\n       accessible to your TSO session.  Or, you can assemble\n       UCBSUBR by customizing the JCL in member $ASSEMBL.\n\n   2.  Copy the LISTUCB REXX to a library in the ISPEXEC or\n       SYSPROC ddname concatenation for your TSO session.\n\n   3.  Execute the LISTUCB exec without operands, to get the\n       instructions on how to use it.\n\n   4.  You might try to run LISTUCB with various of its operands\n       in a Batch Job.  See member $BATJCL for an example.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$LOADLIB": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x06#\\x8f\\x01\\x06#\\x8f#\\x06\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2006-08-26T00:00:00", "modifydate": "2006-08-26T23:06:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "@FILE634": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06#\\x8f\\x01\\x06#\\x8f#\\x06\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-08-26T00:00:00", "modifydate": "2006-08-26T23:06:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "CBT-472"}, "text": "//***FILE 634 is a REXX with an Assembler subroutine, that enables  *   FILE 634\n//*           you to list the UCBs defined to your system.  It can  *   FILE 634\n//*           be used to see the UCBs that are both online and      *   FILE 634\n//*           offline.  This file has been contributed semi-        *   FILE 634\n//*           anonymously.  Questions should be referred to         *   FILE 634\n//*           Sam Golob.  By executing the LISTUCB exec without     *   FILE 634\n//*           operands, you get the HELP explanation.               *   FILE 634\n//*                                                                 *   FILE 634\n//*           The LISTUCB command can be run in batch.  See member  *   FILE 634\n//*           $BATJCL for an example.                               *   FILE 634\n//*                                                                 *   FILE 634\n//*           email:  sbgolob@cbttape.org                           *   FILE 634\n//*                   sbgolob@attglobal.net                         *   FILE 634\n//*                   sbgolob@aol.com                               *   FILE 634\n//*                                                                 *   FILE 634\n//*       UCBSUBR fixed by Alan Buschmann.                          *   FILE 634\n//*                                                                 *   FILE 634\n//*           email:  Alan.Buschmann@kohls.com                      *   FILE 634\n//*                                                                 *   FILE 634\n//*       A selection of possible execution parameters:             *   FILE 634\n//*                                                                 *   FILE 634\n//*           Some possible command lines are:                      *   FILE 634\n//*           LISTUCB MVSR                                          *   FILE 634\n//*           LISTUCB *                                             *   FILE 634\n//*           LISTUCB P TAPE                                        *   FILE 634\n//*           LISTUCB * UREC                                        *   FILE 634\n//*           LISTUCB * ALL OFF                                     *   FILE 634\n//*                                                                 *   FILE 634\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LISTUCB": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x006\\x01\\x03\\x15o\\x01\\x03\\x16/\\x003\\x00\\xde\\x00\\xc7\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-06-05T00:00:00", "modifydate": "2003-06-11T00:33:36", "lines": 222, "newlines": 199, "modlines": 0, "user": "IBMUSER"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "UCBSUBR": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00I\\x01\\x06#\\x8f\\x01\\x06#\\x8f\"A\\x00\\xaf\\x00\\xaf\\x00\\x00\\xc2\\xe4\\xe2\\xc3\\xc8\\xd4\\xd5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2006-08-26T00:00:00", "modifydate": "2006-08-26T22:41:49", "lines": 175, "newlines": 175, "modlines": 0, "user": "BUSCHMN"}, "text": "         TITLE 'UCBSUBR - SCAN ALL DASD UCBS FOR CACHE LIST.'           0001\n         SPACE 1                                                        0003\n*===================================================================*   0004\n*                                                                   *   0005\n*        SUBROUTINE TO BE CALLED FROM A REXX TO SCAN ALL UCBS OF A  *   0006\n*   GIVEN DEVICE TYPE ( DASD, TAPE ) AND REPORT BACK WITH EACH      *   0007\n*   UNIT'S UCB.  THE REXX IS THEN FREE TO DO WHATEVER IT WANTS WITH *   0008\n*   THE INFORMATION, INCLUDING THE STORAGE FUNCTION TO ACCESS THE   *   0009\n*   UCB EXTENSION AND OTHER INFORMATION IF NECESSARY.               *   0010\n*                                                                   *   0013\n*        ON RETURN, THE FIRST 2 BYTES OF THE RESULT INDICATE THE    *   0013\n*   STATUS.  HEX 'FFFF' MEANS THAT THE SUPPLY OF THE PARTICULAR     *   0013\n*   UCB'S IS EXHAUSTED.  HEX 'FFFE' MEANS THAT AN ERROR IN THE      *   0013\n*   ARGUMENTS WAS DETECTED, AND AN EXPLANATION FOLLOWS.  ANYTHING   *   0013\n*   ELSE IS THE START OF A NORMAL UCB.  THE LAST UCB MUST BE USED   *   0013\n*   AS THE SECOND ARGUMENT ON SUBSEQUENT CALLS TO THIS ROUTINE SO   *   0013\n*   THE PROPER CONTINUITY OF UCB'S MAY BE MAINTAINED.               *   0013\n*                                                                   *   0013\n*===================================================================*   0014\nUCBSUBR  CSECT                                                          0015\n         YREGS                                                          0016\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.             0017\n         LR    R12,R15             COPY BASE.                           0018\n         USING UCBSUBR,R12         (TELL ASSEMBLER).                    0019\n         LR    R14,R13             PRESERVE CALLER'S SAVE AREA PTR.     0020\n         LA    R13,SAVE            POINT TO MY SAVE AREA                0021\n         ST    R13,8(,R14)         CHAIN ...                            0022\n         ST    R14,SAVE+4          ... SAVE AREAS.                      0023\n*                                                                       0024\n         LR    R2,R0               ADDRESS OF ENVIRONMENT BLOCK         0025\n         LR    R3,R1               ADDRESS OF EXTERNAL FUNCTION BLOCK   0026\n         L     R4,16(,R3)          GET FIRST PARM'S ADDRESS POINTER     0026\n         L     R5,0(,R4)           GET FIRST PARM'S ADDRESS             0026\n         L     R6,4(,R4)           GET FIRST PARM'S LENGTH              0026\n         C     R6,=X'00000005'     MAKE SURE WE ARE 4 BYTES OR LESS     0026\n         BL    GOODARG             IF SO, WE MAY CONTINUE               0026\n         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS       0026\n         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS               0026\n         CVD   R6,TEMPWORK         DECIMALIZE REGISTER 6                0026\n         UNPK  BADMESS1(4),TEMPWORK(8)                                  0026\n         OI    BADMESS1+3,X'F0'                                         0026\n         TR    BADMESS1(4),TRTAB-240                                    0026\n         MVC   16(L'BADMESS1+2,R4),BADMESS1-2 PUT MESSAGE IN RETURN     0026\n         L     R5,LBADMS1          GET RETURN ARGUMENT LENGTH           0026\n         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK                 0026\n         LH    R15,=X'0004'        SET UP NON-ZERO RETURN CODE          0026\n         B     BADOUT              RETURN IT                            0026\n*                                                                       0027\nGOODARG  EQU   *                                                        0027\n         LA    R9,8(,R4)           GET SECOND ARG ADDRESS POINTER       0027\n         L     R4,0(,R9)           GET SECOND ARG ADDRESS               0027\n         MVC   TEMPUCB(L'TEMPUCB+L'SCANWORK),0(R4) RECOVER WORK AREA    0027\n         BCT   R6,COMP1            DECREMENT FOR CLC                    0027\nCOMP1    EX    R6,CLC1             COMPARE FOR ALL ZEROES               0027\n*                                                                       0027\n* CLC1   CLC   0(*-*,R5),ZEROES                                         0027\n*                                                                       0027\n         LA    R6,1(,R6)           RESTORE ADDRESS                      0027\n         BNZ   SEARCH              IF NOT FIRST PASS, DON'T INITIALIZE  0027\n         XC    SCANWORK,SCANWORK   INDICATE WE'RE STARTING FRESH        0036\n         LA    R9,8(,R9)           GET THIRD ADDRESS POINTER            0036\n         L     R4,0(,R9)           GET THIRD ARG ADDRESS                0036\n         L     R5,4(,R9)           GET THIRD ARG LENGTH                 0036\n         C     R5,=X'00000002'     MAKE SURE WE ARE AT LEAST 3 BYTES    0036\n         BH    LONGOK              IF SO, WE MAY CONTINUE               0036\n         BCT   R5,MOVE1            DECREMEMT FOR INSTRUCTIONAL USE      0036\nMOVE1    EX    R5,MVC1             ELSE PUT PARTIAL IN MESSAGE          0036\n*                                                                       0036\n* MVC1   MVC   BADMESS3(*-*),0(R4) EXECUTED INSTRUCTION                 0036\n*                                                                       0036\n         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS       0036\n         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS               0036\n         MVC   16(L'BADMESS3+2,R4),BADMESS3-2 PUT MESSAGE IN RETURN     0036\nMVC2     MVC   8(4,R4),LBADMS3     EXECUTED INSTRUCTION                 0036\n         LH    R15,=X'0004'        SET UP NON-ZERO RETURN CODE          0036\n         B     BADOUT              RETURN IT                            0036\nLONGOK   LA    R5,TYPES            POINT TO ALLOWED DEV TYPES           0036\n         LH    R14,NTYPES          GET COUNT OF POSSIBILITIES           0036\nNEXTRY   EQU   *                                                        0036\n         CLC   0(4,R4),0(R5)       DO WE HAVE A MATCH                   0036\n         BZ    TYPEFIND            IF SO WE'RE DONE                     0036\n         LA    R5,5(,R5)           POINT TO NEXT ONE                    0036\n         BCT   R14,NEXTRY          ELSE GO TRY AGAIN                    0036\n         MVC   BADMESS2(4),0(R4)   PUT SOUGHT DEVICE IN MESSAGE         0036\n         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS       0036\n         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS               0036\n         MVC   16(L'BADMESS2+2,R4),BADMESS2-2 PUT MESSAGE IN RETURN     0036\n         L     R5,LBADMS2          GET RETURN ARG LENGTH                0036\n         ST    R5,8(,R4)           PUT IT INTO EVAL BLOCK               0036\n         LH    R15,=X'008'         SET UP BAD RETURN CODE               0036\n         B     BADOUT              RETURN LIKE THAT                     0036\n         DS    0H                                                       0036\nTYPEFIND EQU   *                   *** SELF MODIFYING CODE ***          0036\n         MVC   GOSCAN+X'A1'(1),4(R5) MOVE INDICATOR INTO POSITION       0036\nSEARCH   EQU   *                                                        0036\n         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS       0037\n         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS               0037\n         B     GOSCAN                                                   0037\n         CNOP  0,8                 ALIGN FIRST                          0037\nGOSCAN   EQU   *                                                        0037\n         UCBSCAN COPY,WORKAREA=SCANWORK,DEVNCHAR=DEVNUM,               X0038\n               DEVCLASS=DASD,DYNAMIC=YES,UCBAREA=TEMPUCB,RANGE=ALL      0039\n         LTR   R15,R15             SEE IF WE GOT ONE                    0040\n         BNZ   NOMORE                                                   0041\n*        HERE WE HAVE A UCB POINTER TO PROCESS                          0042\n         MVC   16(L'TEMPUCB+L'SCANWORK+4,R4),TEMPUCB MOVE UCB FOR RET   0045\n         LA    R5,L'TEMPUCB+L'SCANWORK+4(0) RETURN ARGUMENT LENGTH      0045\n         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK                 0045\n         B     DONE                                                     0046\n*                                                                       0065\nNOMORE   EQU   *                                                        0066\n         L     R5,UCBLEN           GET RETURN ARGUMENT LENGTH           0066\n         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK                 0066\n         MVI   16(R4),X'FF'        MAKE ENDING UCB                      0067\n         MVC   17(L'TEMPUCB+L'SCANWORK-1,R4),16(R4)                     0068\n*                                                                       0076\nDONE     EQU   *                                                        0076\n         XR    R15,R15             MAKE ZERO RETURN CODE                0076\n*                                                                       0076\nBADOUT   EQU   *                                                        0077\n         L     R13,SAVE+4          GET CALLER'S SAVE AREA POINTER       0077\n         ST    R15,16(,R3)         SET RETURN CODE                      0077\n         LM    R14,R12,12(R13)     GET CALLER'S REGISTERS               0078\n         XR    R15,R15             SET UP ZERO RETURN CODE              0079\n         BR    R14                 RETURN TO CALLER                     0080\n*                                                                       0080\n         DS    0D                                                       0080\nSAVE     DS    9D                  REGISTER STORAGE                     0082\nTEMPWORK DS    1D                                                       0083\n*                                  EXECUTED INSTRUCTIONS                0085\nCLC1     CLC   0(*-*,R5),ZEROES                                         0085\nMVC1     MVC   BADMESS3(*-*),0(R4)                                      0085\n*                                                                       0085\nZEROES   DC    CL5'0000'                                                0085\n*                                                                       0085\n         DS    0F                                                       0085\nTYPES    EQU   *                   TYPES OF UCBS IT IS POSSIBLE TO      0085\n         DC    CL4'ALL ',X'00'     SEARCH FOR WITH THIS SUBROUTINE      0085\n         DC    CL4'TAPE',X'80'                                          0085\n         DC    CL4'COMM',X'40'                                          0085\n         DC    CL4'DASD',X'20'                                          0085\n         DC    CL4'DISP',X'10'                                          0085\n         DC    CL4'UREC',X'08'                                          0085\n         DC    CL4'CHAR',X'04'                                          0085\n         DC    CL4'CTC ',X'41'                                          0085\nNTYPES   DC    AL2((*-TYPES)/5)    NUMBER OF 5 BYTE ENTRIES IN TABLE    0085\n*                                                                       0085\n         DC    X'FFFE'             ERROR INDICATOR                      0085\nBADMESS1 DC    C'XXXX FIRST ARGUMENT MAY NOT EXCEED 5 CHARS IN LENGTH'  0085\n         DS    0F                                                       0085\nLBADMS1  DC    AL4(L'BADMESS1+2)                                        0085\n*                                                                       0085\n         DC    X'FFFE'             ERROR INDICATOR                      0085\nBADMESS2 DC    C'XXXX THAT DEVICE TYPE IS NOT DEFINED.'                 0085\n         DS    0F                                                       0085\nLBADMS2  DC    AL4(L'BADMESS2+2)                                        0085\n*                                                                       0085\n         DC    X'FFFE'             ERROR INDICATOR                      0085\nBADMESS3 DC    C'???? - A DEVICE TYPE MUST BE 4 CHARACTERS IN LENGTH.'  0085\n         DS    0F                                                       0085\nLBADMS3  DC    AL4(L'BADMESS3+2)                                        0085\n*                                                                       0086\nTRTAB    DC    C'0123456789ABCDEF'                                      0086\n*                                                                       0087\n         DS    0F                                                       0109\nTEMPUCB  DS    CL48                AREA FOR UCB STORAGE                 0111\nSCANWORK DS    CL100               UCBSCAN WORK AREA                    0111\nDEVNUM   DS    1F                  AREA FOR DEVICE NUMBER               0111\n         DS    0F                                                       0111\nUCBLEN   DC    AL4(L'TEMPUCB+L'SCANWORK+4)                              0111\n*                                                                       0113\n*        PRINT NOGEN                                                    0114\n         DSECT                                                          0115\n         IEFUCBOB                      UCB                              0116\n         END                                                            0117\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT634/FILE634.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT634", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}