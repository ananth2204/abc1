{"INMR01": {"INMLRECL": 80, "INMFNODE": "NKAISERA", "INMFUID": "SYSLBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20040412140428000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "SYSLBD.LOGIT.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SYSLBD.LOGIT.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "040103", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x0f'", "DS1LSTAR": "b'\\x00\\x05\\x06'", "DS1TRBAL": "b'\\x84\\xf2'"}, "COPYR2": {"deb": "b'\\x04\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x08\\xc0\\x00\\x04\\x8a{\\x98'", "extents": ["b'\\x04\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x08\\xc0\\x00\\x04\\x8a{\\x98'", "b'X\\xf2Yh\\x00\\x00\\x00\\x1e\\x00\\x02\\x00\\x1e\\x00\\x04\\x00\\x03'", "b'X\\xf2Yh\\x00\\x00\\x00\\x1c\\x00\\x00\\x00\\x1c\\x00\\x00\\x00\\x01'", "b'X\\xf2Yh\\x00\\x00\\x00\\x19\\x00\\x00\\x00\\x19\\x00\\x00\\x00\\x01'", "b'X\\xf2Yh\\x00\\x00\\x002\\x00\\r\\x003\\x00\\x0c\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x03\\x01\\x04\\t?\\x01\\x04\\to\\x11\\x18\\x00T\\x00\\x06\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-05T11:18:03", "lines": 84, "newlines": 6, "modlines": 0, "user": "SYSLBD"}, "text": "LOGIT is a package written in REXX that is intended to be called\nby CLIST or REXX programs to log information.\n\nThe members of this library are:\n\nLOGIT    This is the routine that will add records to a log data set.\nLOGITCPY This routine will copy, and optionally clear out, the log data set.\nSAMPLJOB A sample batch tmp calling Logit.\nSXMITLOG A sample exec to copy and clear a log. This exec will copy\n         the log, using LOGITCPY, to a new hlq appeneding the julian\n         data to the copy data set for uniqueness. It will then clear\n         the log and e-mail the copy using xmitip.\n\nTo install this package copy the members LOGIT and LOGITCPY into a\nlibrary where they can be accessed by the calling applications.\n\nThe log data set allocation recommendation is:\n     RECFM=VB LRECL=255 BLKSIZE=27998\n\nThe primary space allocation should be large enough so that it will\ncontain all the log messages that you anticipate to be generated\nbetween now and the time you copy and clear it. It should have\na secondary space allocation as a precaution.\n\nIt is recommended that the allocation units be in BLOCKS as the\nroutine will not write any data if there is no calculated free\nspace in the data set. The calculation is performed by subtracting\nthe used space from the allocated space (as determined from the\nlistdsi function).\n\n   ** as a precaution to avoid an x37 abend in any production job\n   ** a minimum of 2 free space units (blocks or tracks) is required\n\nThe log data set *must* be defined to your security system so that it\ncan be written to by anyone.\n\n      e.g. ADDSD 'log-dsname' UACC(UPDATE)\n\nIMPORTANT NOTE: Do *NOT* browse the log data set online as that will\n                prevent logging from occuring. Use the LOGITCPY to\n                make a copy to review.\n\nEach routine has documentation in the comments at the beginning of the\ncode so you should review that.\n\nThe basic logic used for LOGIT is:\n\n   1. Process the input options of log data set name and message text.\n   2. If the log data set does not exist then tell someone and exit.\n   3. Test for free space\n      a. If zero then exit\n   4. Attempt to allocate the log data set using DISP=MOD\n      a. if successful write out the message text with header\n      b. if not successful then call the SLEEP routine to sleep\n         for 1 second and then retry the allocation 10 times\n      ** Note that the sleep time and retry count are customizable.\n   5. Free the log data set allocation and exit\n\nThe basic logic used for LOGITCPY is:\n\n   1. Process the input options of log data set name, copy log data set\n      name, and optional clear option.\n   2. If the log data set does not exist then tell someone and exit.\n   3. If the copy log data set exists then tell someone and exit.\n      (the copy data set will be allocated by LOGITCPY)\n   4. Attempt to allocate the log data set using DISP=SHR\n      a. if successful then read in all the log data set records\n      b. if not successful then call the SLEEP routine to sleep\n         for 1 second and then retry the allocation 10 times\n      ** Note that the sleep time and retry count are customizable.\n   5. If the clear option is specified then write out a single\n      record indicating the log has been cleared.\n   6. Free the log data set.\n   6. Allocate and write out the copy log data set, free it and exit.\n\nComments, suggestions, and complaints should be directed to the author\nat:\n\n  Lionel B. Dyck\n  Kaiser Permanente Information Technology\n  25 N. Via Monte Ave.\n  Walnut Creek, CA 94598\n  (925) 926-5332\n  Internet: lionel.b.dyck@kp.org\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHANGES": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x02\\x01\\x04\\t?\\x01\\x04\\x10?\\x07\\x04\\x00\\x16\\x00\\x02\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-12T07:04:02", "lines": 22, "newlines": 2, "modlines": 0, "user": "SYSLBD"}, "text": "Change history:\n\n    LOGIT:\n           04/12/04 - 0.5 Correct setting of sleep variable\n           04/05/04 - 0.4 Improve comments\n                    - Require a minimum of 2 free space units to write\n           04/02/04 - 0.3 Change EXIT to RETURN\n                      So step/exec will not terminate\n                    - Add test for remaining space and if none then\n                      exit to avoid a D37 abend\n           04/02/04 - Add version and change jobname/userid\n                      to 8 chars in length\n           04/02/04 - Correct call to Sleep routine\n           04/02/04 - Improve comments and add header\n           04/01/04 - Creation\n\n    LOGITCPY:\n           04/12/04 - Correct setting of sleep variable\n           04/02/04 - Creation\n\n    SXMITLOG:\n           04/05/04 - Added example of using LOGITCPY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOGIT": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x003\\x01\\x04\\t/\\x01\\x04\\x10?\\x07\\x03\\x00\\x8c\\x00\\x17\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2004-04-01T00:00:00", "modifydate": "2004-04-12T07:03:33", "lines": 140, "newlines": 23, "modlines": 0, "user": "SYSLBD"}, "text": "        /* --------------------  rexx procedure  -------------------- */\n           ver = \"0.5\"\n        /* Name:      Logit                                           *\n         *                                                            *\n         * Function:  Log a message into a log data set.              *\n         *                                                            *\n         *            Designed to be called by a CLIST or REXX Exec   *\n         *            to log items of interest.                       *\n         *                                                            *\n         *            The log data set should never be processed      *\n         *            interactively. It should be copied and the      *\n         *            copy reviewed.                                  *\n         *                                                            *\n         *            Note that the log data set must be defined      *\n         *            such that everyone can write into it.           *\n         *                                                            *\n         *            The log message will be written with a          *\n         *            header:                                         *\n         *            yyyymmdd hh:mm:ss jobname userid systemid       *\n         *               message text                                 *\n         *                                                            *\n         *            It is recommended that the log data set be      *\n         *            allocated RECFM=VB LRECL=255 BLKSIZE=0          *\n         *            with a large primary and a secondary in tracks  *\n         *            or blocks as the calculation for free space     *\n         *            is based on allocated-used space from listdsi   *\n         *            so the more granular the better.                *\n         *                                                            *\n         *            The test for free space requires at least 2     *\n         *            free space units (blocks or tracks).            *\n         *                                                            *\n         *            See the LOGITCPY to copy and clear the log.     *\n         *                                                            *\n         * NOTE:      If the Log Data Set has no remaining space      *\n         *            then there will be no attempt to write the      *\n         *            log entry and this exec will return with        *\n         *            a return code of 4.                             *\n         *                                                            *\n         * Syntax:    %logit log_data_set log_message_text            *\n         *                                                            *\n         *            The log_data_set must be pre-allocated and      *\n         *            if accessed using DISP=MOD. If the data set     *\n         *            can not be allocated because it is in use       *\n         *            then it is attempted n more times before        *\n         *            giving up (where n is defined in this code.     *\n         *                                                            *\n         *            The log_message text may be mixed case and      *\n         *            does not require any quotes or other special    *\n         *            formatting.                                     *\n         *                                                            *\n         * Author:    Lionel B. Dyck                                  *\n         *            Kaiser Permanente Information Technology        *\n         *            Walnut Creek, CA 94598                          *\n         *            (925) 926-5332                                  *\n         *            Internet: lionel.b.dyck@kp.org                  *\n         *                                                            *\n         * History:                                                   *\n         *            04/12/04 - 0.5 Correct setting of Sleep var     *\n         *            04/03/04 - 0.4 Change to require a minimum of   *\n         *                       2 free space units                   *\n         *            04/02/04 - 0.3 Change Exit to Return            *\n         *                       Test if there is space available     *\n         *                       in the log data set before writing   *\n         *                       to avoid a D37 abend                 *\n         *            04/02/04 - Add version and change jobname/userid*\n         *                       to 8 chars in length                 *\n         *            04/02/04 - Correct call to Sleep routine        *\n         *            04/02/04 - Improve comments and add header      *\n         *            04/01/04 - Creation                             *\n         *                                                            *\n         * ---------------------------------------------------------- */\n        parse arg logds logmsg\n\n        /* ---------------------------- *\n         * Test that we have both parms *\n         * ---------------------------- */\n         if logds = \"\" then do\n            say \"Logit: Error - invalid syntax\"\n            say \"       No parameters provided.\"\n            say \"       Exiting.\"\n            return 8\n            end\n         if logmsg = \"\" then do\n            say \"Logit: Error - invalid syntax\"\n            say \"       No log message text provided.\"\n            say \"       Exiting.\"\n            return 8\n            end\n\n        /* ------------------------------------ *\n         * Determine if the log data set exists *\n         * ------------------------------------ */\n         call listdsi logds\n         if sysreason > 0 then do\n            say \"Logit: Error - the log data set:\" logds\n            say \"      \" sysdsn(logds)\n            say \"        Exiting....\"\n            return 8\n            end\n         if sysalloc - sysused < 2 then return 4\n\n        /* ------------------------------------------------------ *\n         * Define the number of seconds to sleep between attempts *\n         * ------------------------------------------------------ */\n         sleep = 1\n\n        /* ----------------------------------- *\n         * Define the number of retry attempts *\n         * ----------------------------------- */\n         retry = 10\n\n         dd = \"logit\"random(999)\n         c  = 1\n         call msg \"off\"\n\n         do forever\n            c = c + 1\n            if c > retry then return 4\n            \"alloc f(\"dd\") mod ds(\"logds\") reuse\"\n            if rc > 0 then call sleep\n            else do\n                 queue date('s') time('n') ,\n                       left(mvsvar(\"symdef\",\"jobname\"),8) ,\n                       left(sysvar('sysuid'),8) ,\n                       mvsvar('sysname') ,\n                       logmsg\n                 \"Execio 1 diskw\" dd \"(finis\"\n                 \"Free f(\"dd\")\"\n                 leave\n                 end\n            end\n\n        /* --------------------------------------------------- *\n         * Sleep Routine. This routine will call the USS Sleep *\n         * routine and sleep for 1 second.                     *\n         * --------------------------------------------------- */\n         Sleep:\n         call syscalls('ON')           /* allow calls to omvs */\n         address 'SYSCALL' 'SLEEP ('sleep')'\n         return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOGITCPY": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00X\\x01\\x04\\t?\\x01\\x04\\x10?\\x07\\x02\\x00Z\\x00,\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-12T07:02:58", "lines": 90, "newlines": 44, "modlines": 0, "user": "SYSLBD"}, "text": "        /* --------------------  rexx procedure  -------------------- *\n         * Name:      LOGITCPY                                        *\n         *                                                            *\n         * Function:  To copy the LOGIT log data set and optionally   *\n         *            reinitialize it                                 *\n         *                                                            *\n         * Syntax:    %logitcpy input_log output_log option           *\n         *                                                            *\n         *            input_log is the current log data set name      *\n         *                                                            *\n         *            output_log is the data set to be created        *\n         *            containing a copy of the input_log              *\n         *                                                            *\n         *            clear is optional and if specified will         *\n         *            empty out the input_log                         *\n         *                                                            *\n         * Author:    Lionel B. Dyck                                  *\n         *            Kaiser Permanente Information Technology        *\n         *            Walnut Creek, CA 94598                          *\n         *            (925) 926-5332                                  *\n         *            Internet: lionel.b.dyck@kp.org                  *\n         *                                                            *\n         * History:                                                   *\n         *            04/12/04 - Minor correction in sleep variable   *\n         *            04/02/04 - creation                             *\n         *                                                            *\n         * ---------------------------------------------------------- */\n         arg logds output clear\n\n         if sysdsn(logds) <> \"OK\" then do\n            say \"LOGITCPY Error: The input log data set:\" logds\n            say \"              \" sysvar(logds)\n            say \"Exiting...\"\n            exit 8\n            end\n\n         if sysdsn(output) = \"OK\" then do\n            say \"LOGITCPY Error: The output log data set:\" output\n            say \"                already exists. Please try again.\"\n            say \"                The output can not already exist.\"\n            say \"Exiting...\"\n            exit 8\n            end\n\n        /* ------------------------------------------------------ *\n         * Define the number of seconds to sleep between attempts *\n         * ------------------------------------------------------ */\n         sleep = 1\n\n        /* ----------------------------------- *\n         * Define the number of retry attempts *\n         * ----------------------------------- */\n         retry = 10\n\n         dd = \"logit\"random(999)\n         c  = 1\n         call msg \"off\"\n\n         do forever\n            c = c + 1\n            if c > retry then do\n               say \"Logit: Allocation of the log data set:\" logds\n               say \"       failed after\" retry \"attempts.\"\n               exit 4\n               end\n            \"alloc f(\"dd\") shr ds(\"logds\") reuse\"\n            if rc > 0 then iterate\n            \"Execio * diskr\" dd \"(finis stem in.\"\n            if clear <> \"\" then do\n            queue date('s') time('n') ,\n                  mvsvar(\"symdef\",\"jobname\") sysvar('sysuid') ,\n                  mvsvar('sysname') ,\n                  \"Log data set copied to\" output \"and cleared.\"\n               \"Execio 1 diskw\" dd \"(finis\"\n               end\n            \"Free f(\"dd\")\"\n            \"Alloc f(\"dd\") ds(\"output\") new like(\"logds\")\"\n            \"Execio * diskw\" dd \"(finis stem in.\"\n            \"Free f(\"dd\")\"\n            leave\n            end\n\n        /* --------------------------------------------------- *\n         * Sleep Routine. This routine will call the USS Sleep *\n         * routine and sleep for 1 second.                     *\n         * --------------------------------------------------- */\n         Sleep:\n         call syscalls('ON')           /* allow calls to omvs */\n         address 'SYSCALL' 'SLEEP ('sleep')'\n         return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SAMPLJOB": {"ttr": 265, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x01\\x04\\t?\\x01\\x04\\t?\\x08\"\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-02T08:22:40", "lines": 16, "newlines": 16, "modlines": 0, "user": "SYSLBD"}, "text": "//jobname  JOB  ...,NOTIFY=&SYSUID,\n//             MSGLEVEL=(1,1),MSGCLASS=X\n//* --------------------------------------------------------- *\n//* BATCH TERMINAL MONITOR PROGRAM (TMP) TO EXECUTE TSO       *\n//* APPLICATIONS IN BATCH.                                    *\n//* --------------------------------------------------------- *\n//TSOB     EXEC PGM=IKJEFT1B\n//SYSPRINT DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSEXEC  DD  DISP=SHR,DSN=hlq.LOGIT.PDS\n//SYSTSIN  DD  *\n%LOGIT 'hlq.LOGIT.DATA' +\n   This is a test message from a job\n%LOGIT 'hlq.LOGIT.DATA' +\n   This is a test message from a job message 2\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SXMITLOG": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x13\\x01\\x04\\to\\x01\\x04\\to\\x11\\x16\\x00U\\x00U\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-05T00:00:00", "modifydate": "2004-04-05T11:16:13", "lines": 85, "newlines": 85, "modlines": 0, "user": "SYSLBD"}, "text": "        /* --------------------  rexx procedure  -------------------- *\n         * Name:      SXMITLOG                                        *\n         *                                                            *\n         * Function:  Save the XMITIP Log data set to a copy          *\n         *            and clear by calling LOGITCPY                   *\n         *                                                            *\n         * Syntax:    %sxmitlog logdsn save_hlq                       *\n         *                                                            *\n         *            logdsn must be fully qualified                  *\n         *                   (e.g. 'sys1.xmitip.log')                 *\n         *            save_hlq must be a valid hlq without            *\n         *            qualifiers                                      *\n         *                   (e.g. sys1.xmitip.savelog)               *\n         *                                                            *\n         * Customizations:                                            *\n         *            1. The notify variable to e-mail the            *\n         *               log                                          *\n         *                                                            *\n         * Author:    Lionel B. Dyck                                  *\n         *            Kaiser Permanente Information Technology        *\n         *            Walnut Creek, CA 94598                          *\n         *            (925) 926-5332                                  *\n         *            Internet: lionel.b.dyck@kp.org                  *\n         *                                                            *\n         * History:                                                   *\n         *            04/05/04 - Creation                             *\n         *                                                            *\n         * ---------------------------------------------------------- */\n         arg logdsn save_hlq\n\n        /* ------------------------- *\n         * Test for input parameters *\n         * ------------------------- */\n         if logdsn =  \"\" then call invalid_syntax\n         if save_hlq= \"\" then call invalid_syntax\n\n        /* ---------------------- *\n         * Test for logdsn status *\n         * ---------------------- */\n         if sysdsn(logdsn) <> \"OK\" then do\n            say \"Invalid logdsn provided:\" logdsn\n            say sysdsn(logdsn)\n            say \"Exiting....\"\n            exit 8\n            end\n\n        /* --------------------------------- *\n         * Define the Save Log Data Set Name *\n         * --------------------------------- */\n         save_dsn =  \"'\"save_hlq\".D\"date('j')\"'\"\n\n        /* ---------------------------------------------------- *\n         * *Custom*                                             *\n         * Define the Notify e-mail address and the From e-mail *\n         * address.                                             *\n         * ---------------------------------------------------- */\n         notify = \"lionel.b.dyck@kp.org\"\n         from   = \"lionel.b.dyck@kp.org\"\n\n        /* ------------------------------------------ *\n         * Now call LOGITCPY to do the copy and clear *\n         * ------------------------------------------ */\n         \"%logitcpy\" logdsn save_dsn \"clear\"\n\n         '%xmitip' notify 'subject \"xmitip log created\"' ,\n            'msgt \"The XMITIP Log data set' logdsn 'has been' ,\n            'copied to' save_dsn 'and cleared.\"' ,\n            'From' from ,\n            'File' save_dsn 'Format rtf/l/9/let' ,\n            'Filename xmitip.log.d'date('j')'.rtf'\n\n        /* ----------------------------- *\n         * All done so exit this routine *\n         * ----------------------------- */\n         exit 0\n\n        /* ------------------------------ *\n         * Report Invalid Syntax and Exit *\n         * ------------------------------ */\n         Invalid_Syntax:\n         Say \"SXMITLOG has been called with invalid syntax:\"\n         say \"   %sxmitlog logdsn save_hlq\"\n         say \" \"\n         say \"Try again....\"\n         exit 8\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT312/CBT.V500.FILE312.PDS/LOGIT.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT312/CBT.V500.FILE312.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}