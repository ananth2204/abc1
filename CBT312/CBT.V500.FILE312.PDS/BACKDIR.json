{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "T311LBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20170711191402000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "T311LBD.BACKDIR.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"T311LBD.BACKDIR.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 32760, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "170192", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x1e'", "DS1LSTAR": "b'\\x00\\x01\\x08'", "DS1TRBAL": "b'\\n\\x18'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x18 \\x00\\x04\\x97\\xa0`'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x18 \\x00\\x04\\x97\\xa0`'", "b'X\\x9f\\x84`\\x00\\x00\\x08\\xe6\\x00\\x01\\x08\\xe6\\x00\\x03\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$README": {"ttr": 8, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00A\\x01\\x17\\x18o\\x01\\x17\\x18o\\x13@\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc2\\xc1\\xc3\\xd2\\xc4\\xc9\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-07-05T00:00:00", "modifydate": "2017-07-05T13:40:41", "lines": 15, "newlines": 15, "modlines": 0, "user": "BACKDIR"}, "text": "BACKDIR is a OMVS application, written in REXX, that will backup a\ndirectory, with all files and subdirectories, to a target location.\n\nIt is intended to be run as a scheduled task via cron.\n\nThe processing parameters are defined in a parmfile that the application\nreads.  This PDS contains the following members\n\n   $DOC     Documentation for the Backup Process\n   BACKDIR  REXX program to be installed into a USS directory\n   BACKPARM Sample parm file to be installed into a USS directory\n\nNo warranty, guarantee, or promise is provided that this will work at\nyour installation. It does work where the author has it installed and\nhas been tested on z/OS 2.2.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 261, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x06 \\x17\\x01\\x17\\x18\\x8f\\x01\\x17\\x18\\x8f\\x11R\\x00G\\x00G\\x00\\x00\\xc2\\xc1\\xc3\\xd2\\xc4\\xc9\\xd9@\\x00\\x00\\x00G\\x00\\x00\\x00G\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.06", "flags": 32, "createdate": "2017-07-07T00:00:00", "modifydate": "2017-07-07T11:52:17", "lines": 71, "newlines": 71, "modlines": 0, "user": "BACKDIR"}, "text": "                 Generalized OMVS Directory Backup Utility\n\n/usr/local/bin/backup_dir.rex is a generalized backup utility designed to\nbackup an entire directory by making a copy of the directory, and all\nsubdirectories, into a date stamped directory.\n\nUsage: backup_dir.rex is intended to be invoked under a cron task\n\n   * ------------------------------------------------------ *\n   * cron table updating  (IF YOU'RE NOT SURE ASK)          *\n   *                                                        *\n   *   Must be superuser                                    *\n   *   Issue:  crontab -e -u OMVSKERN                       *\n   *   - opens the cron table in OEDIT (standard ISPF Edit) *\n   *   - do NOT allow a cron entry across multiple records  *\n   *   - BE VERY CAREFUL                                    *\n   *   - save and close                                     *\n   * ------------------------------------------------------ *\n\nSample Crontab entry (shifted for comments)\n\n     # run daily 5 minutes after midnight\n     5 0 * * * /usr/local/bin/backup_dir.rex parmfile\n               /usr/local/bin/backup_dir.parmfile >\n               /tmp/xxx.backup.log\n\nThe syntax is demonstrated in the cron entry:\n\n  /usr/local/bin/backup_dir.rex is the command\n\n  /usr/local/bin/backup_dir.parmfile is the filename for the processing parms\n\n  > is a pipe that directs all messages to the next file\n\n  /tmp/xxx.backup.log is where any messages from the backup process will\n  be logged.\n\nThe parmfile must be of the format (shifted over for readability):\n\n    Notes: A sample parmfile can be found in /usr/local/bin/backup_dir.parm\n           The keywords are case insensitive\n\n  # Dir backup parmfile\n  #\n  #DirLoc is the directory to be backed up\n  #\n  DirLoc      /u/bozo/\n  #\n  #BackupDir is the directory to backup to\n  #          if this directory does not exist then\n  #          it will be created\n  #\n  BackupDir   /backup/backup_bozo/\n  #\n  #History is the number of iterations to keep\n  #\n  History     5\n  #\n\nSample Backup structure:\nBackUpDir   /u/ssh2_backup\n\nbackup directories under BackUpDir:\nbackup_d170701\nbackup_d170702\nbackup_d170703\nbackup_d170704\nbackup_d170705\n\nNote: if there are multiple backups during the same date then the new\nbackup directory will have a .thhmm suffix.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BACKDIR": {"ttr": 263, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x17\\x18o\\x01\\x17\\x19/\\x08\\x14\\x00\\xf0\\x00\\xca\\x00\\x00\\xc2\\xc1\\xc3\\xd2\\xc4\\xc9\\xd9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2017-07-05T00:00:00", "modifydate": "2017-07-11T08:14:29", "lines": 240, "newlines": 202, "modlines": 0, "user": "BACKDIR"}, "text": "/*                         rexx                               *\n * Name:      backup_dir.rex                                  *\n *                                                            *\n * Function:  Backup request directory (recursively) to       *\n *            requested directory/backup_dyymmdd/             *\n *                                                            *\n *            if the backup directory exists then the name    *\n *            will be changed to add the time:                *\n *            /backup-direct/backup_dyymmdd.thhmm/            *\n *                                                            *\n *            NOTE: The backup directory must be preallocated *\n *                  and then the backups will be placed under *\n *                  it.                                       *\n *                                                            *\n *            Only the last n directories will be kept        *\n *                                                            *\n * Parm file format:                                          *\n *                                                            *\n *        # Dir backup parmfile                               *\n *        #                                                   *\n *        DirLoc      /u/bozo/                                *\n *        History     5                                       *\n *        BackupDir   /tmp/backup_bozo/                       *\n *        #                                                   *\n *                                                            *\n * Sample parm in /usr/local/bin/backup_dir.parm              *\n *                                                            *\n * Syntax:    called from crontab                             *\n *                                                            *\n * Sample Crontab entry (shifted for comments)                *\n * 5 0 * * * /usr/local/bin/backup_dir.rex parmfile >         *\n *           /tmp/xxx.backup.log                              *\n *                                                            *\n * Dependencies:   Must be under uid(0)                       *\n *                 (which it will under crontab)              *\n *                                                            *\n * Author:    Lionel B. Dyck                                  *\n *                                                            *\n * History:                                                   *\n *            07/11/17 - Add -m to CP to retain date/time     *\n *            07/06/17 - Check for parms                      *\n *                     - add date/time to report              *\n *                     - additional cleanup                   *\n *            07/05/17 - Add test and create of backup dir    *\n *            07/03/17 - Crafted from ssh2_backup.rex to      *\n *                       be more generalized                  *\n *            04/06/17 - Correct cleanup                      *\n *            03/28/17 - Some cleanup and more messages       *\n *            03/23/17 - Creation                             *\n *                                                            *\n * ---------------------------------------------------------- */\n\n parse arg parmfile\n\n/* ------------------------------------ *\n * Read in the parm file for processing *\n * ------------------------------------ */\n cmd = 'cat' parmfile\n rc = bpxwunix(cmd,,stdout.,stderr.)\n\n/* -------------------- *\n * Process the parmfile *\n * -------------------- */\n say ' '\n say 'Processing parmfile:' parmfile\n say ' '\n\n parse value '' with dirloc backup_dir\n history = 5\n\n do i = 1 to stdout.0\n    if left(stdout.i,1) = '#' then iterate   /* ignore comments */\n    parse value stdout.i with keyword value\n    Select\n      When translate(keyword) = 'DIRLOC' then\n           dirloc = strip(value)\n      When translate(keyword) = 'HISTORY' then\n           history = strip(value)\n      When translate(keyword) = 'BACKUPDIR' then\n           backup_dir = strip(value)\n      Otherwise nop\n      end\n    end\n\n/* ------------------------ *\n | Log our processing parms |\n * ------------------------ */\n say 'Directory Backup Processing:' date() time()\n say ' '\n say 'Log rotation parms:'\n say ' '\n say \"DirLoc::   \" dirloc\n say \"BackUpDir: \" backup_dir\n say \"History:   \" history\n\n/* ---------------------------------------------- *\n | Check that the parmfile was read and had valid |\n | parameters.                                    |\n * ---------------------------------------------- */\n bad = 0\n if strip(dirloc) = '' then bad = 'DIRLOC missing'\n if strip(backup_dir) = '' then do\n    if bad = 0\n       then bad = 'BACKUPDIR missing'\n       else bad = bad 'and BACKUPDIR missing'\n    end\n if bad /= 0 then do\n    say ' '\n    say 'ERROR:' bad\n    say ' '\n    say 'Exiting.....'\n    exit 16\n    end\n\n/* ------------------------------------------------- *\n | Test the target backup directory and create if it |\n | does not exist.                                   |\n * ------------------------------------------------- */\n cmd = 'ls -la' backup_dir\n rc = bpxwunix(cmd,,stdout.,stderr.)\n if stderr.0 = 1 then do\n    cmd = 'mkdir' backup_dir\n    rc = bpxwunix(cmd,,stdout.,stderr.)\n    if stderr.0 = 0 then do\n       say ' '\n       say 'Creating backup directory:' backup_dir\n       end\n    else do\n         say ' '\n         say '*************************************'\n         say ' Error creating the backup directory:'\n         do i = 1 to stderr.0\n            say stderr.i\n            end\n         say '*************************************'\n         exit 8\n         end\n    end\n\n/* ------------------------------------- *\n | 1. Determine the new backup directory |\n | 2. Determine if it exists             |\n |    - Report and exit if it does       |\n | 3. mkdir the new backup directory     |\n * ------------------------------------- */\n today = date('o')\n backup = 'backup_d'left(today,2)''substr(today,4,2)''right(today,2)\n say ' '\n say 'New backup directory will be:' backup_dir''backup\n say 'For' today\n\n say ' '\n say 'getting list of' dirloc 'files:'\n say ' '\n cmd = 'ls -lat' backup_dir\n rc = bpxwunix(cmd,,dirout.,stderr.)\n dir_start = 0\n do id = 1 to dirout.0\n    dir_start = dir_start + 1\n    if word(dirout.id,1) = 'total' then leave\n    end\n do i = id+1 to dirout.0\n    parse value dirout.i with x1 x2 x3 x4 size x6 x7 x8 dir\n    if dir = '' then iterate\n    if dir = backup then do\n       parse value time('c') with h':'m\n       obackup = backup\n       backup = backup'.t'h''left(m,2)\n       say 'Changing backup:' obackup 'to' backup\n       end\n    end\n\n/* ----------------------------- *\n | Make the new target directory |\n * ----------------------------- */\n cmd = 'mkdir' backup_dir''backup\n say ' '\n say 'Processing command:' cmd\n say ' '\n rc = bpxwunix(cmd,,stdout.,stderr.)\n do i = 1 to stdout.0\n       say stdout.i\n       end\n do i = 1 to stderr.0\n       say stderr.i\n       end\n\n/* ----------------------------- *\n | Now copy the files for backup |\n * ----------------------------- */\n cmd = \"cp -Rm\" dirloc\"/\" backup_dir''backup\n say cmd\n Address SH cmd\n say 'Copy return code is:' rc\n say ' '\n\n/* ------------------------ *\n | Now clean up old backups |\n * ------------------------ */\n say 'Beginning cleanup'\n say ' '\n remove = dirout.0 - history - 1 - dir_start\n if remove < 0 then remove = 0\n say ' '\n say 'Plan to remove' remove 'files.'\n say ' '\n if remove > 0 then do\n say 'Remove:' remove\n    do i = dirout.0+dir_start to 1 by -1\n       parse value dirout.i with x1 x2 x3 x4 size x6 x7 x8 dir .\n       if left(x1,1) /= 'd' then iterate\n       say '*'dir'*'\n       if left(dir,1) = '.' then iterate\n       cmd = 'rm -r' backup_dir''dir\n       say 'Removing:' cmd\n       Address SH cmd\n       remove = remove - 1\n       if remove = 0 then leave\n       end\n    end\n say ' '\n\n/* ----------------------------- *\n | Now list the backup directory |\n * ----------------------------- */\n cmd = \"ls -lat\" backup_dir\n say 'List the backup directories:'\n say ' '\n say cmd\n say ' '\n Address SH cmd\n say ' '\n say 'Now list the current backup directory:'\n say ' '\n cmd = \"ls -latR\" backup_dir''backup\n say cmd\n say ' '\n Address SH cmd\n\n Exit 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BACKPARM": {"ttr": 14, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x17\\x01\\x17\\x18o\\x01\\x17\\x18\\x8f\\x118\\x00\\x10\\x00\\x10\\x00\\x00\\xc2\\xc1\\xc3\\xd2\\xc4\\xc9\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2017-07-05T00:00:00", "modifydate": "2017-07-07T11:38:17", "lines": 16, "newlines": 16, "modlines": 0, "user": "BACKDIR"}, "text": "# Dir backup parmfile\n#\n#DirLoc is the directory to be backed up\n#\nDirLoc      /u/bozo/\n#\n#BackupDir is the directory to backup to\n#   *** This target directory *MUST* be manually created\n#   *** before use or this backup will fail.\n#\nBackupDir   /backup/backup_bozo/\n#\n#History is the number of iterations to keep\n#\nHistory     5\n#\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT312/CBT.V500.FILE312.PDS/BACKDIR.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT312/CBT.V500.FILE312.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}