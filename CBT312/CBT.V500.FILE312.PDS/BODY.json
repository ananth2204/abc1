{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SLBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20200229151413000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 47923, "INMDSORG": "PO", "INMTYPE": "Data Library", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 1, "INMDSNAM": "SLBD.BODY.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 47923, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 47923, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SLBD.BODY.PDS": {"COPYR1": {"type": "PDSE", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 8, "DVACLASS": 32, "DVAUNIT": 0, "DVAMAXRC": 32760, "DVACYL": 256, "DVATRK": 256, "DVATRKLN": 65535, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "extents": ["b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "b'\\x00\\x11hH\\x00\\x00\\x00\\x00\\x00\\x00\\x00~\\x00\\xff\\x7f\\x00'", "b'\\x00\\x11hH\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xfd\\x00\\xff\\x7f\\x00'", "b'\\x00\\x11hH\\x00\\x00\\x00\\xfe\\x00\\x00\\x00\\xff\\x00\\xff\\x02\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$README": {"ttr": 11, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00R\\x01 \\x06\\x0f\\x01 \\x06\\x0f\\t\\x13\\x00\\x13\\x00\\x13\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-02-29T00:00:00", "modifydate": "2020-02-29T09:13:52", "lines": 19, "newlines": 19, "modlines": 0, "user": "README"}, "text": "BODY is an ISPF Edit macro (aka command) that will read the ISPF Panel\nwhile in edit and report back via notelines a suggested )BODY statement\nwith the WINDOW keyword showing the width and depth of the panel.\n\nThis information can be used if the panel is going to be used as a POPUP\npanel or just to determine if the panel is too wide or too deep for the\nISPF user. For example if a panel is 35 lines deep and the user has a\n3270 Mod 2 display, which is 24 lines deep by 80 characters wide, then\nthe user will never see the bottom of the panel.\n\nBODY will also recommended the Row and Column parameters for an ADDPOP\ncommand if the panel is a POPUP panel.\n\nInstallation: Copy the BODY member of this PDS into a library in your\nSYSPROC or SYSEXEC allocations.\n\nUsage:  While in ISPF Edit on an ISPF panel enter BODY in the Edit\nCommand line.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BODY": {"ttr": 9, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01 \\x06\\x0f\\x01 \\x06\\x0f\\t\\t\\x00`\\x00`\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-02-29T00:00:00", "modifydate": "2020-02-29T09:09:02", "lines": 96, "newlines": 96, "modlines": 0, "user": "REXX"}, "text": "  /* --------------------------- REXX -------------------------------- *\n  | Macro:         BODY                                               |\n  | Syntax:        BODY                                               |\n  | Parameter:     none                                               |\n  | Function:      Counts the number of lines in the )BODY section of |\n  |                an ISPF-Panel and the width of those lines.        |\n  | Author:        Norbert Haas, noaDatex.de                          |\n  | Updates:       Lionel Dyck                                        |\n  |                - 02/29/20 Recommend addpop row/column             |\n  |                - 02/26/20 check for and support expand            |\n  |                - 01/26/20 add RESET                               |\n  |                - 11/26/19 add msgline with WINDOW(dd,ww)          |\n  |                - 7/7/17 change to exclude all non BODY records    |\n  * ----------------------------------------------------------------- */\n  Address ISREdit\n  \"MACRO\"\n\n  /* ---------------------------------------------------- *\n  | Find the )BODY statement and extract the Expand info |\n  | and save the 1st record of the body text             |\n  * ---------------------------------------------------- */\n  'Reset'\n  \"FIND FIRST ')BODY' 1\"\n  IF rc = 0 THEN DO\n    \"(z1) = LINENUM .ZCSR\"\n    '(data) = line' z1\n    data = translate(data)\n    if pos('EXPAND(',data) > 0\n    then do\n      parse value data with . \"EXPAND(\"exp\")\" .\n      expand = 'Expand('exp')'\n    end\n    else expand = ''\n    /* --------------------------------- *\n    | Now find the end of the body text |\n    * --------------------------------- */\n    \"LABEL \"z1\" = .LINET\"\n    'exclude .zfirst .LINET all'\n    \"FIND NEXT ')' 1\"\n    IF rc = 0 THEN DO\n      \"(z2) = LINENUM .ZCSR\"\n      \"LABEL \"z2+1\" = .LINEE\"\n      'exclude .LINEE .zlast all'\n      anz = z2 - z1 - 1\n      \"(panel) = MEMBER\"\n      len = 1\n      do i = z1+1 to z2-1\n        '(data) = line' i\n        data = strip(data,'T')\n        if length(data) > len then len = length(data)\n      end\n      /* -------------------------------------------------------- *\n      | Found the end of the body section so report:             |\n      | 1. Suggested Addpop if the user chooses to define Window |\n      | 2. Suggested )BODY with Window and Expand                |\n      * -------------------------------------------------------- */\n      report = ')Body Window('len','anz')' expand\n      'Line_After' z1 '= noteline (report)'\n      x = get_pop(len anz)\n      report = 'Suggest Using AddPop Row('word(x,2)') Column('word(x,1)')' ,\n        'if this is a popup panel.'\n      'Line_before' z1 '= noteline (report)'\n      zedsmsg = 'BODY' anz 'lines'\n      zedlmsg = 'Panel' panel 'has' anz 'line in the BODY-Section.'\n      Address ISPEXEC \"SETMSG MSG(isrz000)\"\n      \"FIND FIRST ')BODY' 1\"\n    END\n    /* ---------------------------------------- *\n    | If no next panel section report that out |\n    * ---------------------------------------- */\n    ELSE DO\n      zedsmsg = 'Error (END missing)'\n      zedlmsg = 'No )END-Section found in this panel.'\n      Address ISPEXEC \"SETMSG MSG(isrz001)\"\n    END\n  END\n  /* ----------------------------------- *\n  | If no )Body section report that out |\n  * ----------------------------------- */\n  ELSE DO\n    zedsmsg = 'Error (BODY missing)'\n    zedlmsg = 'No )BODY-Section found in this panel.'\n    Address ISPEXEC \"SETMSG MSG(isrz001)\"\n  END\n\n  EXIT\n\n  /* -------------------------------- *\n  | Get the suggested AddPop setting |\n  * -------------------------------- */\nGet_Pop: procedure\n  arg col  row\n  col = ((80 - col) % 2 ) +1\n  row = ((23 - row) % 4 ) +1\n  data = col row\n  return data\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT312/CBT.V500.FILE312.PDS/BODY.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT312/CBT.V500.FILE312.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}