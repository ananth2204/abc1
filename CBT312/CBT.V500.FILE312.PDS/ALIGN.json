{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SLBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20191231124111000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 53248, "INMDSORG": "PO", "INMTYPE": "Data Library", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 1, "INMDSNAM": "SLBD.ALIGN.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 53248, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 53248, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SLBD.ALIGN.PDS": {"COPYR1": {"type": "PDSE", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 8, "DVACLASS": 32, "DVAUNIT": 0, "DVAMAXRC": 32760, "DVACYL": 256, "DVATRK": 256, "DVATRKLN": 65535, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "extents": ["b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "b'\\x00\\x14\\x88H\\x00\\x00\\x00\\x00\\x00\\x00\\x00~\\x00\\xff\\x7f\\x00'", "b'\\x00\\x14\\x88H\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xfd\\x00\\xff\\x7f\\x00'", "b'\\x00\\x14\\x88H\\x00\\x00\\x00\\xfe\\x00\\x00\\x00\\xff\\x00\\xff\\x02\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$README": {"ttr": 13, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Q\\x01\\x196_\\x01\\x196_\\x06@\\x00\\x12\\x00\\x12\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-12-31T00:00:00", "modifydate": "2019-12-31T06:40:51", "lines": 18, "newlines": 18, "modlines": 0, "user": "README"}, "text": "ALIGN is an ISPF Edit Command (Macro) that will align text in the\nactive Edit (or View) session Left, Right, Center, or Reverse.\n\nRow selection is using C or CC.\n\n    Options:\n    ? display help\n    C ll - strip and center\n    F ll - flow text to line length(ll)\n    L - strip and left justify\n    R - strip and right justify\n    V - strip and reverse text\n\n    Optional for C is ll for line length\n    e.g. ALIGN C 65\n         To align center for a width of 65\n\nTFLOW is used by ALIGN.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALIGN": {"ttr": 9, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00T\\x01\\x19\\x04?\\x01\\x196_\\x06\\x16\\x00\\x8b\\x00\\x1c\\x00\\x00\\xc1\\xd3\\xc9\\xc7\\xd5@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2019-02-12T00:00:00", "modifydate": "2019-12-31T06:16:54", "lines": 139, "newlines": 28, "modlines": 0, "user": "ALIGN"}, "text": "/* --------------------  rexx procedure  -------------------- *\n| Name:      Align                                           |\n|                                                            |\n| Function:  ISPF Edit Macro to Align the text on the        |\n|            specified line or lines                         |\n|                                                            |\n|            Options:                                        |\n|            ? display help                                  |\n|            C ll - strip and center                         |\n|            F ll - flow text to line length(ll)             |\n|            L - strip and left justify                      |\n|            R - strip and right justify                     |\n|            V - strip and reverse text                      |\n|                                                            |\n|            Optional for C is ll for line length            |\n|            e.g. ALIGN C 65                                 |\n|                 To align center for a width of 65          |\n|                                                            |\n| History:  (most recent on top)                             |\n|            12/31/19 LBD - Set cursor in command line       |\n|            02/14/19 LBD - Move RESET and add Flow          |\n|            02/13/19 LBD - Cleanup                          |\n|            02/12/19 LBD - creation                         |\n|                                                            |\n* ---------------------------------------------------------- */\n  Address ISREdit\n  'Macro (options) NOPROCESS'\n  options = translate(options)\n  if options = '' then options = 'C'\n  if options = '?' then call do_help\n  '(dw) = data_width'\n  opt = word(options,1)\n  if word(options,1) = 'F' then do\n    flowll = word(options,2)\n    if datatype(flowll) /= 'NUM' then call bad_flow\n    if flowll > dw then call bad_flow\n    fc = 0\n  end\n  if words(options) > 1 then\n  if word(options,1) = 'C' then do\n     dwt = word(options,2)\n     if datatype(dwt) /= 'NUM' then call bad_num\n     if dwt > dw then call bad_num\n     dw = dwt\n     end\n  Address ISPExec 'Control Errors Return'\n  'Reset Special'\n  \"PROCESS RANGE C\"\n  \"(start) = linenum .zfrange\"\n  \"(stop) = linenum .zlrange\"\n  do i = start to stop\n    '(data) = line' i\n    Select\n      when opt = 'C' then do\n        if length(strip(data)) > dw then do\n           msg = 'Line data exceeds center length - ignoring center'\n           \"Line_After\" i \"= msgline (msg)\"\n           act = 0\n           end\n        else do\n        data = center(strip(data),dw)\n        act = 'centered'\n      end\n      end\n      when opt = 'L' then do\n        data = strip(data)\n        act = 'left justified'\n      end\n      when opt = 'R' then do\n        data = right(strip(data),dw)\n        act = 'right justified'\n      end\n      when opt = 'V' then do\n        data = reverse(data)\n        act = 'reversed'\n      end\n      when opt = 'F' then do\n        act = 'Flowed to' flowll\n        'tflow' i flowll\n        \"(stop) = linenum .zlrange\"\n        fc = fc + 1\n      end\n      Otherwise nop\n    end\n    'line' i '= (data)'\n  end\n\n  if word(options,1) = 'F' then\n  text = fc 'lines' act 'with a width of' dw+0\n  else if act /= 0 then do\n  text = (stop - start) +1 'lines' act 'with a width of' dw+0\n  'line_before' start '= msgline (text)'\n  end\n  Exit  1\n\n/* ---------------------------- *\n| Display the Help information |\n* ---------------------------- */\nDo_Help:\n  zedsmsg = ''\n  zedlmsg = left('Align Edit Macro options:',76),\n    left('C ll-Center F ll-Flow L-Left R-Right',\n    'V-reVerse',76),\n    left('Leading and Trailing blanks',\n    'are always removed except for' ,\n    'reVerse and Flow.',76) ,\n    left('Note ll (line length) is optional for C',76),\n    left('----',76),\n    left('F 72 will flow all records to column 72',76)\n  Address ISPExec 'Setmsg msg(isrz001)'\n  exit\n/* ------------------------------ *\n | Display info on the Bad Number |\n | for options C, L, and R        |\n * ------------------------------ */\nBad_num:\n  Address ISPExec\n  zedsmsg = 'Invalid Length'\n  zedlmsg = left('C may be followed by a valid column number',76),\n    left('e.g. C 72 to center on width of 72',76),\n    left('It must never exceed the data width of' dw+0,76),\n    left('.',76),\n    left('Current Length specification is:' options,76)\n  'Setmsg msg(isrz001)'\n  exit\n\n/* ---------------------------------- *\n| Display info on bad flow parameter |\n* ---------------------------------- */\nBad_flow:\n  Address ISPExec\n  zedsmsg = 'Invalid Flow'\n  zedlmsg = left('Flow must be followed by a valid column number',76),\n    left('e.g. F 72 to flow to column 72',76),\n    left('It must never exceed the data width of' dw+0,76),\n    left('.',76),\n    left('Current Flow specification is:' options,76)\n  'Setmsg msg(isrz001)'\n  exit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TFLOW": {"ttr": 11, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x19\\x01\\x16\\x15\\x9f\\x01\\x196_\\x067\\x00\\x1e\\x00\\x17\\x00\\x00\\xe3\\xc6\\xd3\\xd6\\xe6@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-06-07T00:00:00", "modifydate": "2019-12-31T06:37:19", "lines": 30, "newlines": 23, "modlines": 0, "user": "TFLOW"}, "text": "/* --------------------  rexx procedure  -------------------- *\n * Name:      tflow                                           *\n *                                                            *\n * Function:  ispf edit macro to text flow a file             *\n *                                                            *\n * Syntax:    tflow width                                     *\n *                                                            *\n * Author:    Lionel B. Dyck                                  *\n *                                                            *\n * History:                                                   *\n *            06/07/16 - creation                             *\n *                                                            *\n * ---------------------------------------------------------- */\n\nAddress ISREdit\n\"Macro (opt)\"\n\nif opt = '' then opt = 70\n\"(lrecl) = LRECL\"\n\ndo forever\n \"Find p'\u00ac' nx\" opt+1 lrecl\n if rc > 0 then leave\n \"(line) = linenum .zcsr\"\n say \"working on line\" line\n \"Tflow .zcsr\" opt\n end\n\n\"Reset\"\n\"locate 1\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT312/CBT.V500.FILE312.PDS/ALIGN.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT312/CBT.V500.FILE312.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}