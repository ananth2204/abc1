{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SLBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20200823140809000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 95846, "INMDSORG": "PO", "INMTYPE": "Data Library", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 1, "INMDSNAM": "SLBD.CONCATIT.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 95846, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 95846, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SLBD.CONCATIT.PDS": {"COPYR1": {"type": "PDSE", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 8, "DVACLASS": 32, "DVAUNIT": 0, "DVAMAXRC": 32760, "DVACYL": 256, "DVATRK": 256, "DVATRKLN": 65535, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "extents": ["b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "b'\\x00\\x16XH\\x00\\x00\\x00\\x00\\x00\\x00\\x00~\\x00\\xff\\x7f\\x00'", "b'\\x00\\x16XH\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xfd\\x00\\xff\\x7f\\x00'", "b'\\x00\\x16XH\\x00\\x00\\x00\\xfe\\x00\\x00\\x00\\xff\\x00\\xff\\x02\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$README": {"ttr": 25, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00H\\x01 #o\\x01 #o\\t\\x07\\x001\\x00\\x11\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2020-08-23T00:00:00", "modifydate": "2020-08-23T09:07:48", "lines": 49, "newlines": 17, "modlines": 0, "user": "README"}, "text": "ALLOCADD and DEALLOC are a pair of REXX exec's for use with dynamically\nadding and removing datasets from a DD allocation.\n\nALLOCADD is a TSO Command in REXX that will add one, or more, datasets\nto an existing allocation. If the ddname is not allocated then it will\nbe allocated.\n\n    Syntax:    %allocadd ddname dsn1 dsn2 dsn3 ... dsn# \\ opt\n\n               opt is B to place last otherwise the dsns are\n               allocated in before existing allocations\n\nThere are TSO concatenation commands on the CBT Tape, and elsewhere,\nthat are load modules and thus more efficient than this.\n\nDEALLOC is a TSO Command in REXX that will remove one dataset from an\nexisting allocation.\n\nThis version is intended for sites where the installation of a load modules\nmay be prohibited.\n\nThis code is provided as-is, without any warranty or guarantee, and the\nusual stipulation that before using it should be tested in your site.\n\n===================================================================\n\nCONCATIT:\n Function:  Three (3) in one\n\n            Re-Allocate the specified DD adding the\n            requested dataset(s) to the front (F) or\n            back (B - default) of the allocation\n\n Syntax:    %concatit option\n\n            Options:  A - Add dataset(s) to a DD\n                      R - Remove a dataset from a DD\n                      L - List the datasets allocated to DD\n\n Add:       %concatit A ddname dsn1 dsn2 dsn3 . dsn# \\ opt\n\n            opt is B to place last otherwise the dsns are\n            allocated in before existing allocations\n\n Usage Notes: If the ddname is not allocated it will be\n\n Remove:    %concatit R ddname dsn\n\n List:      %concatit L ddname\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALLOCADD": {"ttr": 17, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00'\\x01 #?\\x01 #o\\x05A\\x00\\x8b\\x00-\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2020-08-20T00:00:00", "modifydate": "2020-08-23T05:41:27", "lines": 139, "newlines": 45, "modlines": 0, "user": "REXX"}, "text": "  /*%NOcomment ----------  rexx procedure  -------------------- *\n  | Name:      ALLOCADD                                        |\n  |                                                            |\n  | Function:  Re-Allocate the specified DD adding the         |\n  |            requested dataset(s) to the front (F) or        |\n  |            back (B - default) of the allocation            |\n  |                                                            |\n  | Syntax:    %allocadd ddname dsn1 dsn2 dsn3 ... dsn# \\ opt  |\n  |                                                            |\n  |            opt is B to place last otherwise the dsns are   |\n  |            allocated in before existing allocations        |\n  |                                                            |\n  | Usage Notes: If the ddname is not allocated it will be     |\n  |                                                            |\n  | Author:    Lionel B. Dyck                                  |\n  |                                                            |\n  | History:  (most recent on top)                             |\n  |            08/23/20 LBD - Change default to before         |\n  |                         - Detect if requested DD is open   |\n  |                           and may not be changed           |\n  |            08/22/20 LBD - Refine and make it really work   |\n  |            08/21/20 LBD - Creation                         |\n  |                                                            |\n  * ---------------------------------------------------------- *\n  | Copyright (C) 2020 by Lionel B. Dyck under GPLV3           |\n  * ---------------------------------------------------------- */\n  arg ddname dsname '\\' opt\n\n  /* --------------------------- *\n  | Get the name of the command |\n  * --------------------------- */\n  parse source . . name .\n\n  /* ----------------------------- *\n  | Validate (somewhat) the input |\n  * ----------------------------- */\n  if ddname = '' then bad = 1\n  if dsname = '' then bad = 1\n  if pos('.',ddname) > 1 then bad = 1\n  if opt /= '' then if opt /= 'B' then bad = 1\n\n  if bad = 1 then do\n    say 'Concatenation command failed due to invalid syntax.'\n    say ' '\n    say 'Correct syntax is:'\n    say ' '\n    say '%'name 'ddname dsname(s) \\ option'\n    say '        option is B for last'\n    say '                  or default is first'\n    say ' '\n    exit 8\n  end\n\n  /* -------------------------------------------- *\n  | Get the list of currently allocated datasets |\n  * -------------------------------------------- */\n  dsnames = get_allocations(ddname)\n\n  if dsnames = 0 then do\n    new_alloc = 0\n    dsnames = ''\n  end\n  else new_alloc = 1\n\n  /* --------------------------------------- *\n  | Process each Dataset Name one at a time |\n  | to fixup and add to the allocation list |\n  | in reverse order so they add in order   |\n  * --------------------------------------- */\n  do id = words(dsname) to 1 by -1\n    dsn = word(dsname,id)\n    call fix_dsn\n    if opt = 'B'\n    then dsnames = dsnames dsn\n    else dsnames = dsn dsnames\n  end\n\n  /* -------------- *\n  | Now reallocate |\n  * -------------- */\n  if new_alloc = 1 then do\n    call outtrap 'x.'\n    'Free file('ddname')'\n    frc = rc\n    call outtrap 'off'\n    if rc > 0 then do\n      say name 'failed because the requested dd is open and thus' ,\n        'may not be changed.'\n      exit 8\n    end\n  end\n  'Alloc f('ddname') shr ds('dsnames') reuse'\n  exit\n\n  /* ------------------------------------------------ *\n  | Fixup the provided dataset name to fully qualify |\n  * ------------------------------------------------ */\nFix_DSN:\n  x = listdsi(dsn)\n  if x > 0 then do\n    say dsn sysmsglvl2\n    exit 8\n  end\n  dsn = \"'\"sysdsname\"'\"\n  return\n\n  /* ------------------------------------ *\n  | Get the currently allocated datasets |\n  * ------------------------------------ */\nGet_Allocations: Procedure\n  arg cdd\n\n  call outtrap 'trap.'\n  \"lista sta\"\n  call outtrap 'off'\n\n  parse value '' with dd tdd dsns\n\n  do i = 1 to trap.0\n    if left(trap.i,1) = '-' then iterate\n    if word(trap.i,1) /= 'TERMFILE' then\n    if left(trap.i,1) /= ' ' then dsns = dsns \"'\"word(trap.i,1)\"'\"\n    if word(trap.i,1) = 'KEEP' then iterate\n    if left(trap.i,1) = ' ' then do\n      dd = word(trap.i,1)\n      if tdd = '' then do\n        tdd = dd\n        iterate\n      end\n      if tdd = cdd then do\n        return subword(dsns,1,words(dsns)-1)\n        exit\n      end\n      dsns = word(dsns,words(dsns))\n      tdd = dd\n    end\n  end\n  if tdd = cdd then return subword(dsns,1,words(dsns))\n  return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONCATIT": {"ttr": 23, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01 #o\\x01 #o\\t\\x07\\x00\\xc6\\x00\\xc7\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-08-23T00:00:00", "modifydate": "2020-08-23T09:07:01", "lines": 198, "newlines": 199, "modlines": 0, "user": "REXX"}, "text": "  /*%NOcomment ----------  rexx procedure  -------------------- *\n  | Name:      CONCATIT                                        |\n  |                                                            |\n  | Function:  Three (3) in one                                |\n  |                                                            |\n  |            Re-Allocate the specified DD adding the         |\n  |            requested dataset(s) to the front (F) or        |\n  |            back (B - default) of the allocation            |\n  |                                                            |\n  | Syntax:    %concatit option                                |\n  |                                                            |\n  |            Options:  A - Add dataset(s) to a DD            |\n  |                      R - Remove a dataset from a DD        |\n  |                      L - List the datasets allocated to DD |\n  |                                                            |\n  | Add:       %concatit A ddname dsn1 dsn2 dsn3 . dsn# \\ opt  |\n  |                                                            |\n  |            opt is B to place last otherwise the dsns are   |\n  |            allocated in before existing allocations        |\n  |                                                            |\n  | Usage Notes: If the ddname is not allocated it will be     |\n  |                                                            |\n  | Remove:    %concatit R ddname dsn                          |\n  |                                                            |\n  | List:      %concatit L ddname                              |\n  |                                                            |\n  | Author:    Lionel B. Dyck                                  |\n  |                                                            |\n  | History:  (most recent on top)                             |\n  |            08/23/20 LBD - Consolidate Allocadd/Dealloc     |\n  |                           and add List for 3 in one        |\n  |            08/23/20 LBD - Change default to before         |\n  |                         - Detect if requested DD is open   |\n  |                           and may not be changed           |\n  |            08/22/20 LBD - Refine and make it really work   |\n  |            08/21/20 LBD - Creation                         |\n  |                                                            |\n  * ---------------------------------------------------------- */\n  arg type ddname dsname '\\' opt\n\n  /* --------------------------- *\n  | Get the name of the command |\n  * --------------------------- */\n  parse source . . name .\n\n  /* ----------------------------- *\n  | Validate (somewhat) the input |\n  * ----------------------------- */\n  if pos(type,'ARL') = 0 then bad = 1\n  if ddname = '' then bad = 1\n  if type /= 'L' then\n  if dsname = '' then bad = 1\n  if pos('.',ddname) > 1 then bad = 1\n  if opt /= '' then if opt /= 'B' then bad = 1\n\n  if bad = 1 then do\n    say name 'command failed due to invalid syntax.'\n    say ' '\n    say 'Correct syntax is:'\n    say ' '\n    say '%'name 'A ddname dsname(s) \\ option'\n    say '          option is B for last'\n    say '                 or default is first'\n    say 'or'\n    say '%'name 'R ddname dsname'\n    say 'or'\n    say '%'name 'L ddname'\n    say ' '\n    exit 8\n  end\n\n  /* -------------------------------------------- *\n  | Get the list of currently allocated datasets |\n  * -------------------------------------------- */\n  dsnames = get_allocations(ddname)\n\n  if dsnames = 0 then do\n    new_alloc = 0\n    dsnames = ''\n  end\n  else new_alloc = 1\n\n  /* ---------------------------- *\n  | Validate the DD is allocated |\n  * ---------------------------- */\n  if pos(type,'RL') > 0 then\n  if dsnames = 0 then do\n    say name 'Error: the requested ddname' ddname 'is not allocated.'\n    exit 12\n  end\n\n  /* ------------------------------------- *\n  | Process type L - List the allocations |\n  * ------------------------------------- */\n  if type = 'L' then  do\n    say 'Datasets allocated to' ddname':'\n    do i = 1 to words(dsnames)\n      say ' ' strip(word(dsnames,i),'B',\"'\")\n    end\n    Exit\n  end\n\n  /* ------------------------------------------------ *\n  | Remove the requested dataset from the allocation |\n  * ------------------------------------------------ */\n  if type = 'R' then do\n    dsn = dsname\n    call fix_dsn\n    dp = wordpos(dsn,dsnames)\n    if dp = 0 then do\n      say name 'Error: the requested dataset is not found in the' ,\n        'current allocation for dd:' ddname\n      say name 'The requested dataset name is:' dsname\n      exit 12\n    end\n    dsnames = delword(dsnames,dp,1)\n  end\n\n  /* --------------------------------------------- *\n  | Add the requested Datasets for the allocation |\n  * --------------------------------------------- */\n  if type = 'A' then do\n    /* --------------------------------------- *\n    | Process each Dataset Name one at a time |\n    | to fixup and add to the allocation list |\n    | in reverse order so they add in order   |\n    * --------------------------------------- */\n    do id = words(dsname) to 1 by -1\n      dsn = word(dsname,id)\n      call fix_dsn\n      if opt = 'B'\n      then dsnames = dsnames dsn\n      else dsnames = dsn dsnames\n    end\n  end\n\n  /* -------------- *\n  | Now reallocate |\n  * -------------- */\n  if new_alloc = 1 then do\n    call outtrap 'x.'\n    'Free file('ddname')'\n    frc = rc\n    call outtrap 'off'\n    if rc > 0 then do\n      say name 'failed because the requested dd is open and thus' ,\n        'may not be changed.'\n      exit 8\n    end\n  end\n  'Alloc f('ddname') shr ds('dsnames') reuse'\n  exit\n\n  /* ------------------------------------------------ *\n  | Fixup the provided dataset name to fully qualify |\n  * ------------------------------------------------ */\nFix_DSN:\n  x = listdsi(dsn)\n  if x > 0 then do\n    say dsn sysmsglvl2\n    exit 8\n  end\n  dsn = \"'\"sysdsname\"'\"\n  return\n\n  /* ------------------------------------ *\n  | Get the currently allocated datasets |\n  * ------------------------------------ */\nGet_Allocations: Procedure\n  arg cdd\n\n  call outtrap 'trap.'\n  \"lista sta\"\n  call outtrap 'off'\n\n  parse value '' with dd tdd dsns\n\n  do i = 1 to trap.0\n    if left(trap.i,1) = '-' then iterate\n    if word(trap.i,1) /= 'TERMFILE' then\n    if left(trap.i,1) /= ' ' then dsns = dsns \"'\"word(trap.i,1)\"'\"\n    if word(trap.i,1) = 'KEEP' then iterate\n    if left(trap.i,1) = ' ' then do\n      dd = word(trap.i,1)\n      if tdd = '' then do\n        tdd = dd\n        iterate\n      end\n      if tdd = cdd then do\n        return subword(dsns,1,words(dsns)-1)\n        exit\n      end\n      dsns = word(dsns,words(dsns))\n      tdd = dd\n    end\n  end\n  if tdd = cdd then return subword(dsns,1,words(dsns))\n  return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEALLOC": {"ttr": 19, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00E\\x01 #o\\x01 #o\\x05A\\x00\\x84\\x00\\x82\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-08-23T00:00:00", "modifydate": "2020-08-23T05:41:45", "lines": 132, "newlines": 130, "modlines": 0, "user": "REXX"}, "text": "  /*%NOcomment ----------  rexx procedure  -------------------- *\n  | Name:      DEALLOC                                         |\n  |                                                            |\n  | Function:  Remove a dataset from an Allocation             |\n  |                                                            |\n  | Syntax:    %dealloc ddname dsname                          |\n  |                                                            |\n  | Author:    Lionel B. Dyck                                  |\n  |                                                            |\n  | History:  (most recent on top)                             |\n  |            08/23/20 LBD - Creation                         |\n  |                                                            |\n  * ---------------------------------------------------------- *\n  | Copyright (C) 2020 by Lionel B. Dyck under GPLV3           |\n  * ---------------------------------------------------------- */\n  arg ddname dsname\n\n  /* --------------------------- *\n  | Get the name of the command |\n  * --------------------------- */\n  parse source . . name .\n\n  /* ----------------------------- *\n  | Validate (somewhat) the input |\n  * ----------------------------- */\n  if ddname = '' then bad = 1\n  if dsname = '' then bad = 1\n  if pos('.',ddname) > 1 then bad = 1\n\n  if bad = 1 then do\n    say 'Concatenation command failed due to invalid syntax.'\n    say ' '\n    say 'Correct syntax is:'\n    say ' '\n    say '%'name 'ddname dsname'\n    say ' '\n    exit 8\n  end\n\n  /* ------------------------------------------- *\n  | Validate and fully qualify the dataset name |\n  * ------------------------------------------- */\n  x = listdsi(dsname)\n  if x > 0 then do\n    say name 'Error with provided dataset name:' dsname\n    say 'Message:' sysmsglvl2\n    exit 8\n  end\n  dsname = \"'\"sysdsname\"'\"\n\n  /* -------------------------------------------- *\n  | Get the list of currently allocated datasets |\n  * -------------------------------------------- */\n  dsnames = get_allocations(ddname)\n\n  if dsnames = 0 then do\n    say name 'Error: the requested ddname' ddname 'is not allocated.'\n    exit 12\n  end\n\n  /* ------------------------------------------------ *\n  | Remove the requested dataset from the allocation |\n  * ------------------------------------------------ */\n  dp = wordpos(dsname,dsnames)\n  if dp = 0 then do\n    say name 'Error: the requested dataset is not found in the' ,\n      'current allocation for dd:' ddname\n    say name 'The requested dataset name is:' dsname\n    exit 12\n  end\n  dsnames = delword(dsnames,dp,1)\n\n  /* -------------- *\n  | Now reallocate |\n  * -------------- */\n  call outtrap 'x.'\n  'Free file('ddname')'\n  frc = rc\n  call outtrap 'off'\n  if rc > 0 then do\n    say name 'failed because the requested dd is open and thus' ,\n      'may not be changed.'\n    exit 8\n  end\n  'Alloc f('ddname') shr ds('dsnames') reuse'\n  exit\n\n  /* ------------------------------------------------ *\n  | Fixup the provided dataset name to fully qualify |\n  * ------------------------------------------------ */\nFix_DSN:\n  x = listdsi(dsn)\n  if x > 0 then do\n    say dsn sysmsglvl2\n    exit 8\n  end\n  dsn = \"'\"sysdsname\"'\"\n  return\n\n  /* ------------------------------------ *\n  | Get the currently allocated datasets |\n  * ------------------------------------ */\nGet_Allocations: Procedure\n  arg cdd\n\n  call outtrap 'trap.'\n  \"lista sta\"\n  call outtrap 'off'\n\n  parse value '' with dd tdd dsns\n\n  do i = 1 to trap.0\n    if left(trap.i,1) = '-' then iterate\n    if word(trap.i,1) /= 'TERMFILE' then\n    if left(trap.i,1) /= ' ' then dsns = dsns \"'\"word(trap.i,1)\"'\"\n    if word(trap.i,1) = 'KEEP' then iterate\n    if left(trap.i,1) = ' ' then do\n      dd = word(trap.i,1)\n      if tdd = '' then do\n        tdd = dd\n        iterate\n      end\n      if tdd = cdd then do\n        return subword(dsns,1,words(dsns)-1)\n        exit\n      end\n      dsns = word(dsns,words(dsns))\n      tdd = dd\n    end\n  end\n  if tdd = cdd then return subword(dsns,1,words(dsns))\n  return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT312/CBT.V500.FILE312.PDS/CONCATIT.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT312/CBT.V500.FILE312.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}