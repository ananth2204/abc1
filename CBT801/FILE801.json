{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012827000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE801.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE801.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\x02'", "DS1TRBAL": "b'\\xd4\\x80'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05p\\x00\\x07\\x05q\\x00\\x0b\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\t\\x00\\x8f\\x01\\t\\x00\\x8f\\x15E\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2009-01-08T00:00:00", "modifydate": "2009-01-08T15:45:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-477"}, "text": "REGULAR CBT TAPE - VERSION 477    FILE:  801\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT477.FILE801\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 10,556 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/08/09    15:45:21    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\t\\x00\\x8f\\x01\\t\\x00\\x8f\\x15\\x11\\x00#\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-08T00:00:00", "modifydate": "2009-01-08T15:11:58", "lines": 35, "newlines": 35, "modlines": 0, "user": "SBGOLOB"}, "text": "From:       \"Turnbull, Rick\" <Rick.Turnbull@StateAuto.com>\nDate:       Tue, 6 Jan 2009 12:33:17 -0500\nTo:         <sbgolob@cbttape.org>\n\nAttached is a product which I would like to submit for CBT tape\ninclusion.\n\nIt contains the following members:\n\n    * XAML01 - A REXX script that produces a bar chart in a\n      Silverlight (http://silverlight.net/) XAML file format.\n      Silverlight is Microsoft's answer to Adobe's Flash.\n\n    * DOCPDF - \"How To\" documentation in PDF format. I've also\n      attached this directly to this email so you can get a quick\n      view as to what this REXX script can produce.\n\n    * DOCWORD - \"How To\" documentation in MS-Word format.\n\n    * HTML - A sample HTML page that will display a XAML file\n      using Silverlight.  Your internet browser must have had the\n      Silverlight plug-in installed before the bar chart can be\n      displayed.\n\n    * JCL1 - A sample batch job that executes the XAML01 script.\n\n    * JCL2 - A sample batch job that executes the XAML01 script.\n\n\nRick Turnbull\nSenior Systems Programmer\nState Auto Insurance Companies www.stateauto.com\nPO Box 1980, Indianapolis, IN 46206-1980\nPhone: 317.931.7416\n\n", "mimetype": "message/rfc822", "datatype": "ebcdic", "extension": ".eml"}, "@FILE801": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\t\\x00\\x8f\\x01\\t\\x00\\x8f\\x15D\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2009-01-08T00:00:00", "modifydate": "2009-01-08T15:44:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT-477"}, "text": "//***FILE 801 is from Rick Turnbull and contains an EXEC called     *   FILE 801\n//*           XAML01 that can produce browse-able bar charts in     *   FILE 801\n//*           Microsoft Silverlight format.  See the included       *   FILE 801\n//*           Word Doc file or PDF Doc file.                        *   FILE 801\n//*                                                                 *   FILE 801\n//*           email:  Rick.Turnbull@StateAuto.com                   *   FILE 801\n//*                                                                 *   FILE 801\n//*       This file contains the following members:                 *   FILE 801\n//*                                                                 *   FILE 801\n//*       * XAML01 - A REXX script that produces a bar chart        *   FILE 801\n//*         in a Silverlight (http://silverlight.net/) XAML         *   FILE 801\n//*         file format.                                            *   FILE 801\n//*                                                                 *   FILE 801\n//*         Silverlight is Microsoft's answer to Adobe's Flash.     *   FILE 801\n//*                                                                 *   FILE 801\n//*       * DOCPDF - \"How To\" documentation in PDF format.          *   FILE 801\n//*                                                                 *   FILE 801\n//*       * DOCWORD - \"How To\" documentation in MS-Word format.     *   FILE 801\n//*                                                                 *   FILE 801\n//*       * HTML - A sample HTML page that will display a           *   FILE 801\n//*                XAML file using Silverlight.  Your internet      *   FILE 801\n//*                browser must have had the Silverlight plug-in    *   FILE 801\n//*                installed before the bar chart can be            *   FILE 801\n//*                displayed.                                       *   FILE 801\n//*                                                                 *   FILE 801\n//*       * JCL1 - A sample batch job that executes the             *   FILE 801\n//*                XAML01 script.                                   *   FILE 801\n//*                                                                 *   FILE 801\n//*       * JCL2 - A sample batch job that executes the             *   FILE 801\n//*                XAML01 script.                                   *   FILE 801\n//*                                                                 *   FILE 801\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCPDF": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\t\\x00o\\x01\\t\\x00o\\x10\\x02\\x0f\\x97\\x0f\\x97\\x00\\x00\\xe3\\xe4\\xd9\\xf0\\xf5\\xf6\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-06T00:00:00", "modifydate": "2009-01-06T10:02:49", "lines": 3991, "newlines": 3991, "modlines": 0, "user": "TUR0563"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "DOCWORD": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\t\\x00o\\x01\\t\\x00o\\x10\\x02\\x14`\\x14`\\x00\\x00\\xe3\\xe4\\xd9\\xf0\\xf5\\xf6\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-06T00:00:00", "modifydate": "2009-01-06T10:02:28", "lines": 5216, "newlines": 5216, "modlines": 0, "user": "TUR0563"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "HTML": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t\\x00\\x8f\\x01\\t\\x00\\x8f\\x15\\x12\\x00>\\x00>\\x00\\x00\\xe3\\xe4\\xd9\\xf0\\xf5\\xf6\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-08T00:00:00", "modifydate": "2009-01-08T15:12:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "TUR0563"}, "text": "<html>\n<head>\n  <title>A Sample HTML page</title>\n <script type=\"text/javascript\">\n        function onSilverlightError(sender, args) {\n\n            var appSource = \"\";\n            if (sender != null && sender != 0) {\n                appSource = sender.getHost().Source;\n            }\n            var errorType = args.ErrorType;\n            var iErrorCode = args.ErrorCode;\n\n            var errMsg = \"Unhandled Error in Silverlight 2 Application \" +\n                appSource + \"\\n\";\n\n            errMsg += \"Code: \" + iErrorCode + \"    \\n\";\n            errMsg += \"Category: \" + errorType + \"       \\n\";\n            errMsg += \"Message: \" + args.ErrorMessage + \"     \\n\";\n\n            if (errorType == \"ParserError\") {\n                errMsg += \"File: \" + args.xamlFile + \"     \\n\";\n                errMsg += \"Line: \" + args.lineNumber + \"     \\n\";\n                errMsg += \"Position: \" + args.charPosition + \"     \\n\";\n            }\n            else if (errorType == \"RuntimeError\") {\n                if (args.lineNumber != 0) {\n                    errMsg += \"Line: \" + args.lineNumber + \"     \\n\";\n                    errMsg += \"Position: \" + args.charPosition + \"     \\n\";\n                }\n                errMsg += \"MethodName: \" + args.methodName + \"     \\n\";\n            }\n\n            throw new Error(errMsg);\n        }\n    </script>\n\n</head>\n\n\n<body>\n <div id=\"silverlightControlHost\">\n        <object width=\"100%\" height=\"100%\"\n            type=\"application/x-silverlight-2\"\n            data=\"data:application/x-silverlight-2,\" >\n            <param name=\"source\" value=\"Xaml.txt\"/>\n            <param name=\"onerror\" value=\"onSilverlightError\" />\n            <param name=\"background\" value=\"white\" />\n            <param name=\"minRuntimeVersion\" value=\"2.0.31005.0\" />\n            <param name=\"autoUpgrade\" value=\"true\" />\n            <a href=\"http://go.microsoft.com/fwlink/?LinkID=124807\"\n                style=\"text-decoration: none;\">\n                <img src=\"http://go.microsoft.com/fwlink/?LinkId=108181\"\n                    alt=\"Get Microsoft Silverlight\"\n                    style=\"border-style: none\"/>\n            </a>\n        </object>\n        <iframe style='visibility:hidden;height:0;width:0;border:0px'></iframe>\n    </div>\n\n</body>\n</html>\n", "mimetype": "text/html", "datatype": "ebcdic", "extension": ".html"}, "JCL1": {"ttr": 4355, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\t\\x00o\\x01\\t\\x00o\\x10\"\\x00\\xad\\x00\\xad\\x00\\x00\\xe3\\xe4\\xd9\\xf0\\xf5\\xf6\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-06T00:00:00", "modifydate": "2009-01-06T10:22:05", "lines": 173, "newlines": 173, "modlines": 0, "user": "TUR0563"}, "text": "//CBRXXRUN JOB ,'REXX RUN',CLASS=Q,MSGCLASS=X,MSGLEVEL=(1,1),\n//    NOTIFY=TUR0563\n//*=============================================================\n//*\n//* this job produces two barcharts. One a column type and the\n//* other is a cylinder type.\n//*\n//* Be sure to modify the PATH statements to ensure the proper\n//* location of the output XAML file. This job wants to copy the\n//* output xaml file to an HFS OMVS file, so it can be accessed\n//* by an HTTP request.\n//*\n//*=============================================================\n//*\n//*            Column Example\n//*\n//*=============================================================\n//STEP01  EXEC PGM=IRXJCL,PARM='XAML01'\n//SYSTSIN  DD DUMMY                         /* TERMINAL INPUT\n//SYSTSPRT DD SYSOUT=*                      /* TERMINAL OUTPUT\n//SYSUDUMP DD SYSOUT=*                      /* TERMINAL OUTPUT\n//SYSEXEC DD DISP=SHR,DSN=SA.SYSEXEC   <=====   Modify\n//XAMLIN  DD *\n<Canvas\n  xmlns=\"http://schemas.microsoft.com/client/2007\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n<PLACE BARCHART HERE>\n</Canvas>\n//XAMLOUT DD DISP=(NEW,PASS),\n//          DSN=&XAML,\n//          UNIT=DASD,\n//          STORCLAS=SCUSER,\n//          DCB=(LRECL=255,RECFM=VB)\n//ENVVAR  DD *\n  ShrinkBy = .75\n  ChartType='COL'\n  Spacing = RectangleWidth+Spacing\n  FooterText.0 = 16\n  FooterText.1 = \" 2007 01/01\"\n  FooterText.2 = \" 2007 02/01\"\n  FooterText.3 = \" 2007 03/01\"\n  FooterText.4 = \" 2007 04/01\"\n  FooterText.5 = \" 2007 05/01\"\n  FooterText.6 = \" 2007 06/01\"\n  FooterText.7 = \" 2007 07/01\"\n  FooterText.8 = \" 2007 08/01\"\n  FooterText.9 = \" 2007 09/01\"\n  FooterText.10= \" 2007 10/01\"\n  FooterText.11= \" 2007 11/01\"\n  FooterText.12= \" 2007 12/01\"\n  FooterText.13= \" 2008 01/01\"\n  FooterText.14= \" 2008 02/01\"\n  FooterText.15= \" 2008 03/01\"\n  FooterText.16= \" 2008 04/01\"\n  LedgerLineInterval = 5\n  LedgerText.0 = LedgerLineInterval\n  LedgerText.1 = 'Line One'\n  LedgerText.2 = 'Line Two'\n  LedgerText.3 = 'Line three'\n  LedgerText.4 = 'Line Four'\n  LedgerText.5 = 'Line Five'\n  Title = \"Chart Created by REXX - SA.SYSEXEC(XAML01)\"\n  LevelText.1 = \"Year 1999\"\n  LevelText.2 = \"Year 2000\"\n  LevelText.0 = 2\n//PERCENTS DD *\n5.5 10 15 20 50 75 95 25\n60.5 33.3\n44\n21 18 72 99 3\n/\n10 15 20 50 75 95 25\n60.5 33.3\n44\n21 18 72 99 3 5.5\n//*===============================================================\n//STEP02  EXEC BATCHTMP\n//SYSIN  DD *\n OCOPY INDD(I1) OUTDD(O1)\n/*\n//I1     DD  DISP=(OLD,DELETE),DSN=&XAML\n//O1     DD PATHOPTS=(OWRONLY,OCREAT),PATHMODE=(SIRWXU),\n// PATH='/usr/lpp/internet/server_root/saapps/pub/xaml/Xaml.txt'\n//*=============================================================\n//*\n//*                    Cylinder Example\n//*\n//*=============================================================\n//STEP01  EXEC PGM=IRXJCL,PARM='XAML01'\n//SYSTSIN  DD DUMMY\n//SYSTSPRT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSEXEC DD DISP=SHR,DSN=SA.SYSEXEC      <=====   Modify\n//XAMLIN  DD *\n<Canvas\n  xmlns=\"http://schemas.microsoft.com/client/2007\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n<PLACE BARCHART HERE>\n</Canvas>\n//XAMLOUT DD DISP=(NEW,PASS),\n//          DSN=&XAML,\n//          UNIT=DASD,\n//          STORCLAS=SCUSER,\n//          DCB=(LRECL=255,RECFM=VB)\n//ENVVAR  DD *\n  ChartType='CYL'\n  ShrinkBy = .85\n  xShift = 10\n  yShift = 5\n  CylinderWidth = 20\n  Spacing = CylinderWidth + 10\n  FooterText.0 = 16\n  FooterText.1 = \" 2007 01/01\"\n  FooterText.2 = \" 2007 02/01\"\n  FooterText.3 = \" 2007 03/01\"\n  FooterText.4 = \" 2007 04/01\"\n  FooterText.5 = \" 2007 05/01\"\n  FooterText.6 = \" 2007 06/01\"\n  FooterText.7 = \" 2007 07/01\"\n  FooterText.8 = \" 2007 08/01\"\n  FooterText.9 = \" 2007 09/01\"\n  FooterText.10= \" 2007 10/01\"\n  FooterText.11= \" 2007 11/01\"\n  FooterText.12= \" 2007 12/01\"\n  FooterText.13= \" 2008 01/01\"\n  FooterText.14= \" 2008 02/01\"\n  FooterText.15= \" 2008 03/01\"\n  FooterText.16= \" 2008 04/01\"\n  LedgerLineInterval = 5\n  LedgerText.0 = LedgerLineInterval\n  LedgerText.1 = 'This is an example of a very long ledger line.'\n  LedgerText.2 = 'Line Two'\n  LedgerText.3 = 'Line three'\n  LedgerText.4 = 'Line Four'\n  LedgerText.5 = 'Line Five'\n  LedgerColor = \"DarkGreen\"\n  Title = \"Chart Created by REXX - SA.SYSEXEC(XAML01)\"\n  TitleColor = \"DarkGreen\"\n  LevelText.1 = \"Level 1\"\n  LevelText.2 = \"Level 2\"\n  LevelText.3 = \"Level 3\"\n  LevelText.0 = 3\n//PERCENTS DD *\n5.5 10 15 20 50 75 95 25\n60.5 33.3\n44\n21 18 72 99 3\n/\n10 15 20 50 75 95 25\n60.5 33.3\n44\n21 18 72 99 3 5.5\n/\n15 20 50 75 95 25\n60.5 33.3\n44\n21 18 72 99 3 5.5 0\n/\n21 18 72 99 3 5.5 0\n15 20 50 75 95 25\n60.5 33.3\n44\n//*===============================================================\n//STEP02  EXEC BATCHTMP\n//SYSIN  DD *\n OCOPY INDD(I1) OUTDD(O1)\n/*\n//I1     DD  DISP=(OLD,DELETE),DSN=&XAML\n//O1     DD PATHOPTS=(OWRONLY,OCREAT),PATHMODE=(SIRWXU),\n// PATH='/usr/lpp/internet/server_root/saapps/pub/xaml/Xaml2.txt'\n//                                                =====   Modify\n//\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCL2": {"ttr": 4359, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\t\\x00o\\x01\\t\\x00o\\x10$\\x00Y\\x00Y\\x00\\x00\\xe3\\xe4\\xd9\\xf0\\xf5\\xf6\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-06T00:00:00", "modifydate": "2009-01-06T10:24:05", "lines": 89, "newlines": 89, "modlines": 0, "user": "TUR0563"}, "text": "//CBRXXRUN JOB ,'REXX RUN',CLASS=Q,MSGCLASS=X,MSGLEVEL=(1,1),\n//    NOTIFY=TUR0563\n//*=============================================================\n//*\n//*                    Line Chart Example\n//* Modify:  DSN of XAML01 location //SYSEXEC\n//*          PATH to where output is to be copied\n//*=============================================================\n//STEP01  EXEC PGM=IRXJCL,PARM='XAML01'\n//SYSTSIN  DD DUMMY                         /* TERMINAL INPUT\n//SYSTSPRT DD SYSOUT=*                      /* TERMINAL OUTPUT\n//SYSUDUMP DD SYSOUT=*                      /* TERMINAL OUTPUT\n//SYSEXEC DD DISP=SHR,DSN=SA.SYSEXEC\n//XAMLIN  DD *\n<Canvas\n  xmlns=\"http://schemas.microsoft.com/client/2007\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n<PLACE BARCHART HERE>\n</Canvas>\n//XAMLOUT DD DISP=(NEW,PASS),\n//          DSN=&XAML,\n//          UNIT=DASD,\n//          STORCLAS=SCUSER,\n//          DCB=(LRECL=255,RECFM=VB)\n//ENVVAR  DD *\n  ChartType='LIN'\n  Animation = \"NO\"\n  xShift = 10\n  yShift = 10\n  PointWidth = 2\n  FooterText.0 = 16\n  FooterText.1 = \" 2007 01/01\"\n  FooterText.2 = \" 2007 02/01\"\n  FooterText.3 = \" 2007 03/01\"\n  FooterText.4 = \" 2007 04/01\"\n  FooterText.5 = \" 2007 05/01\"\n  FooterText.6 = \" 2007 06/01\"\n  FooterText.7 = \" 2007 07/01\"\n  FooterText.8 = \" 2007 08/01\"\n  FooterText.9 = \" 2007 09/01\"\n  FooterText.10= \" 2007 10/01\"\n  FooterText.11= \" 2007 11/01\"\n  FooterText.12= \" 2007 12/01\"\n  FooterText.13= \" 2008 01/01\"\n  FooterText.14= \" 2008 02/01\"\n  FooterText.15= \" 2008 03/01\"\n  FooterText.16= \" 2008 04/01\"\n  LedgerLineInterval = 5\n  LedgerText.0 = LedgerLineInterval\n  LedgerText.1 = 'This is an example of a very long ledger line.'\n  LedgerText.2 = 'Line Two'\n  LedgerText.3 = 'Line three'\n  LedgerText.4 = 'Line Four'\n  LedgerText.5 = 'Line Five'\n  LedgerColor = \"DarkGreen\"\n  Title = \"Chart Created by REXX - SA.SYSEXEC(XAML01)\"\n  TitleColor = \"DarkGreen\"\n  LevelText.1 = \"Level 1\"\n  LevelText.2 = \"Level 2\"\n  LevelText.3 = \"Level 3\"\n  LevelText.0 = 3\n  FooterSpan = 10\n//PERCENTS DD *\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n/\n30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5\n15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35 30 45 40 55 50 65 70 75 70 85 80 85 80 90 85 95 90 100\n5 15 10 25 20 35\n//*===============================================================\n//STEP02  EXEC BATCHTMP\n//SYSIN  DD *\n OCOPY INDD(I1) OUTDD(O1)\n/*\n//I1     DD  DISP=(OLD,DELETE),DSN=&XAML\n//O1     DD PATHOPTS=(OWRONLY,OCREAT),PATHMODE=(SIRWXU),\n// PATH='/usr/lpp/internet/server_root/saapps/pub/xaml/Xaml4.txt'\n//\n//\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XAML01": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\t\\x00o\\x01\\t\\x00o\\x10\\x03\\x03\\xb3\\x03\\xb3\\x00\\x00\\xe3\\xe4\\xd9\\xf0\\xf5\\xf6\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-06T00:00:00", "modifydate": "2009-01-06T10:03:29", "lines": 947, "newlines": 947, "modlines": 0, "user": "TUR0563"}, "text": "/* rexx */\n/*\n Original Author: Richard C. Turnbull\n            Date: 12/2008\n\n This rexx script produces an XAML page suitable for displaying within\n a web browser.\n\n Following is an example of how to execute this script in a batch job:\n\n    //CBRXXRUN JOB ,'REXX RUN',CLASS=Q,MSGCLASS=X,MSGLEVEL=(1,1),\n    //    NOTIFY=TUR0563\n    //STEP10  EXEC PGM=IRXJCL,PARM='XAML01'\n    //SYSTSIN  DD DUMMY\n    //SYSTSPRT DD SYSOUT=*\n    //SYSUDUMP DD SYSOUT=*\n    //SYSEXEC DD DISP=SHR,DSN=SA.SYSEXEC\n    //XAMLIN  DD *\n    <Canvas\n      xmlns=\"http://schemas.microsoft.com/client/2007\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n    <PLACE BARCHART HERE>\n    </Canvas>\n    //XAMLOUT DD DISP=(NEW,PASS),\n    //          DSN=&XAML,\n    //          UNIT=DASD,\n    //          STORCLAS=SCUSER,\n    //          DCB=(LRECL=255,RECFM=VB)\n    //ENVVAR  DD *\n      ShadowWidth = 5\n      RectangleWidth = 10\n      LeftMargin = 150\n      TopMargin = 50\n      BoxHeight = 400\n      LedgerLineInterval = 5\n      LedgerText.0 = LedgerLineInterval\n      LedgerText.1 = 'Line One'\n      LedgerText.2 = 'Line Two'\n      LedgerText.3 = 'Line three'\n      LedgerText.4 = 'Line Four'\n      LedgerText.5 = 'Line Five'\n      LedgerFontSize=10\n      FooterText.0 = 12\n      FooterText.1 = '1999'\n      FooterText.2 = '2000'\n      FooterText.3 = '2001'\n      FooterText.4 = '2002'\n      FooterText.5 = '2003'\n      FooterText.6 = '2004'\n      FooterText.7 = '2005'\n      FooterText.8 = '2006'\n      FooterText.9 = '2007'\n      FooterText.10 = '2008'\n      FooterText.11 = '2009'\n      FooterText.12 = '2010'\n    //PERCENTS DD *\n    5 10 15 20 50 75 95 25\n    60 33\n    44\n    21\n    //STEP02  EXEC BATCHTMP\n    //SYSIN  DD *\n     OCOPY INDD(I1) OUTDD(O1)\n    //I1     DD  DISP=(OLD,DELETE),DSN=&XAML\n    //O1     DD PATHOPTS=(OWRONLY,OCREAT),PATHMODE=(SIRWXU),\n    // PATH='/usr/lpp/internet/server_root/saapps/pub/xaml/Xaml2.txt'\n*/\n  Call Init\n  do i = 1 to XAMLIn.0\n    select\n      when strip(XAMLIn.i) = '<PLACE BARCHART HERE>' then do\n        call CreateBarChart\n        end\n      otherwise do\n        call SendToOutput XAMLIn.i\n        end\n      end\n    end\n  address mvs 'execio * diskW 'OutputDDname' (finis stem Output.'\n  exit\n/*\n=======================================================================\n\n=======================================================================\n*/\nInit:\n  lci = 1        /* lci = Line Color Index */\n  xShift = 15\n  yShift = 15\n  Animation = \"Y\"\n  AnimationType = 1\n  BoxHeight = 400\n  CapHeight = 6\n  ChartType = 'COLUMN'   /* COLUMN or cylinder */\n  Color.0 = 5\n  Color.1 = 'TEAL'\n  Color.2 = 'MAROON'\n  Color.3 = 'SteelBlue'\n  Color.4 = 'DARKMAGENTA'\n  Color.5 = 'GRAY'\n  FooterFontSize = 9\n  FooterText.0 = 0\n  CylinderWidth = 30\n  FontName = 'Verdana'\n  FooterDepth = 0\n  FooterWidth = 0\n  FooterSpan  = 1     /* used only in Type=\"LIN\" charts */\n  LedgerColor = 'BLACK'\n  LedgerFontname = 'ARIAL'\n  LedgerFontSize = 10\n  LedgerLineInterval = 10\n  LedgerText.0 = 0\n  LeftMargin = 75\n  LevelText.0 = 0\n  PointWidth = 5\n  OutputDDname = 'XAMLOUT'\n  RectangleWidth = 20\n  ShadowWidth = 10\n  ShrinkBy = 1.00    /* used to alter the overall size of chart */\n  Spacing = 2\n  Title = \"\"\n  TitlefontSize = 20\n  TitleColor    = 'Black'\n  TitleFontname = 'ARIAL'\n  TopMargin = 50\n  ReturnedCommand = \"\"\n  address mvs \"execio * diskr ENVVAR (finis stem EnvVar.\"\n  do i = 1 to EnvVar.0\n    if left(EnvVar.i,2) = \"/*\" then do\n      iterate\n    end\n    parse var EnvVar.i ccdCommand \"/*\" Comment\n    ReturnedCommand = ReturnedCommand\";\"ccdCommand\n  end\n  Interpret ReturnedCommand\n  drop ReturnedCommand\n  drop EnvVar.\n  Call DisplayVariableSettings\n  Call CheckoutShrinkBy\n  LineNumber = 1\n  fnt = FontName\n  ChartTypePrefix = Ucase(left(ChartType,3))\n  true = 1\n  false = 0\n  FirstTime = true\n  address mvs \"execio * diskr XAMLIN (finis stem XAMLIn.\"\n  OutputIndex = 0\n  address mvs \"execio * diskr PERCENTS (finis stem Percents.\"\n  chi = 0 /*Column Heights Index */\n  do pci = 1 to Percents.0\n    do ii = 1 to Words(Percents.pci)\n      chi = chi + 1\n      ColumnHeights.chi = Word(Percents.pci,ii)\n      end\n    end\n  ColumnHeights.0 = chi\n  NumberOfFootings=ColumnHeights.0   /* set default              */\n  do chitemp = 1 to ColumnHeights.0  /* indicator. If none found */\n    if ColumnHeights.chitemp = '/' then do /* then only one line */\n      NumberOfFootings=chitemp-1     /* is being produced        */\n      leave\n      end\n    end\n  ChartLevel = 1\n  LevelTextXpos = 0\n  Animation = left(Animation,1)\n  upper Animation\n  AnimationOffsetTiming = 0\n  TargetSequence = 0\n  AnimationIndex = 0\n  AnimationOutput.0 = 0\n  xCo = 0    /* Type=\"LIN\", coordinate  index */\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreateBarChart:\n  ColumnWidth = ShadowWidth + RectangleWidth\n  xPrim= 0\n  Call CreateTitle\n  Call CreateLedgerLines\n  do chi = 1 to ColumnHeights.0\n    if ColumnHeights.chi = \"/\" then do /*check for multi-line      */\n      select\n        when ChartTypePrefix = \"LIN\" then do\n          Call CreateLevelText\n          Width = PointWidth + Spacing     /*indicator.                */\n          call CreateLinePath              /*if found, start a new line*/\n          xCo = 0\n          FirstTime = True\n          LineNumber = LineNumber + 1\n          xPrim= 0                         /*reset back to beginning of*/\n                                           /*chart.                    */\n          chi = chi + 1                    /*get next percent          */\n          ChartLevel = ChartLevel + 1\n          call AddBar ColumnHeights.chi\n          end\n        otherwise do\n          Call CreateLevelText\n          AnimationOffsetTiming = 0\n          FirstTime = True\n          TopMargin = TopMargin + yShift\n          LeftMargin = LeftMargin + xShift\n          xPrim = 0\n          chi = chi + 1                    /*get next percent          */\n          ChartLevel = ChartLevel + 1\n          yLine = TopMargin\n          call SendToOutput \"<!-- Top line -->\"\n            do while yLine < Boxheight + TopMargin\n              If yShift <> 0 then do\n                line = '<Line X1=\"'LeftMargin\n                line = line'\" Y1=\"'yLine\n                line = line'\" X2=\"'Width * NumberOfFootings + LeftMargin\n                line = line'\" Y2=\"'yLine'\" '\n                line = line'Stroke=\"'Color.ChartLevel'\" '\n                line = line' StrokeThickness=\"1\"></Line>'\n                call SendToOutput line\n                end\n              yLine = yLine + LedgerInterval\n              end\n          call AddBar ColumnHeights.chi\n          end\n        end\n      end\n    else do\n      call AddBar ColumnHeights.chi\n      end\n    end\n  select\n    when ChartTypePrefix = 'COL' then do\n      Width = ColumnWidth + Spacing\n      end\n    when ChartTypePrefix = 'CYL' then do\n      Width = CylinderWidth + Spacing\n      end\n    when ChartTypePrefix = 'LIN' then do\n      Width = PointWidth + Spacing\n      call CreateLinePath\n      end\n    otherwise nop\n    end\n  Call CreateLevelText\n  xLine = (NumberOfFootings * Width) + LeftMargin\n  call SendToOutput \"<!-- Bottom line -->\"\n  line = '<Line X1=\"'LeftMargin\n  line = line'\" Y1=\"'BoxHeight + TopMargin\n  line = line'\" X2=\"'xLine\n  line = line'\" Y2=\"'BoxHeight + TopMargin'\" '\n  line = line'Stroke=\"gray\" StrokeThickness=\"2\" ></Line>'\n  call SendToOutput line\n  Call CreateColumnFootings\n  If Animation = \"Y\" then do\n    Call SendToOutput '<Canvas.Triggers>'\n    Call SendToOutput '<EventTrigger RoutedEvent=\"Canvas.Loaded\">'\n    Call SendToOutput '<EventTrigger.Actions>'\n    Call SendToOutput '<BeginStoryboard>'\n    Call SendToOutput '<Storyboard AutoReverse=\"False\">'\n    do AO = 1 to AnimationOutput.0\n      call SendToOutput AnimationOutput.AO\n      end\n    Call SendToOutput '</Storyboard>'\n    Call SendToOutput '</BeginStoryboard>'\n    Call SendToOutput '</EventTrigger.Actions>'\n    Call SendToOutput '</EventTrigger>'\n    Call SendToOutput '</Canvas.Triggers>'\n    end\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreateColumnCap:\n  call SendToOutput \"<!-- Column Cap -->\"\n  ColumnCap = \"<Polygon \"\n  x1 = LeftMargin + xPrim\n  y1 = TopMargin + yPrim - CapHeight\n  x2 = x1 + RectangleWidth\n  y2 = y1\n  x3 = x1 + ColumnWidth\n  y3 = Y1 + CapHeight\n  x4 = x1 + ShadowWidth\n  y4 = Y3\n  ColumnCap = ColumnCap' Points=\"'\n  ColumnCap = ColumnCap||x1','y1' 'x2','y2' 'x3','y3' 'x4','y4\n  ColumnCap = ColumnCap'\">'\n  call SendToOutput ColumnCap\n  call CreatePolygonShading\n  ColumnCap = \"</Polygon> \"\n  call SendToOutput ColumnCap\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreatePolygonShading:\n  call SendToOutput '<Polygon.Fill>'\n  call SendToOutput '<LinearGradientBrush StartPoint=\"1,0.5\" '\n  call SendToOutput 'EndPoint=\"0,0.5\">'\n  call SendToOutput '<LinearGradientBrush.GradientStops>'\n  call SendToOutput '<GradientStopCollection>'\n  call SendToOutput '<GradientStop Offset=\"1.0\" Color=\"black\" />'\n  call SendToOutput '<GradientStop Offset=\"0.0\" '\n  call SendToOutput ' Color=\"'Color.ChartLevel'\" />'\n  call SendToOutput '</GradientStopCollection>'\n  call SendToOutput '</LinearGradientBrush.GradientStops>'\n  call SendToOutput '</LinearGradientBrush>'\n  call SendToOutput '</Polygon.Fill>'\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreateShadow:\n  call SendToOutput \"<!-- Column Shadow -->\"\n  Shadow = \"<Polygon \"\n  x1 = LeftMargin + xPrim\n  y1 = TopMargin + yPrim - CapHeight\n  x2 = x1 + ShadowWidth\n  y2 = y1 + CapHeight\n  x3 = x2\n  y3 = BoxHeight + TopMargin\n  x4 = x1\n  y4 = Y3 - CapHeight\n  Shadow = Shadow' Points=\"'\n  Shadow = Shadow||x1','y1' 'x2','y2' 'x3','y3' 'x4','y4\n  Shadow = Shadow'\"'\n  Shadow = Shadow'>'\n  call SendToOutput Shadow\n  call CreateShadowShading\n  call SendToOutput '</Polygon>'\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreateShadowShading:\n  call SendToOutput '<Polygon.Fill>'\n  call SendToOutput '<LinearGradientBrush StartPoint=\"1,0.5\" '\n  call SendToOutput 'EndPoint=\"0,0.5\">'\n  call SendToOutput '<LinearGradientBrush.GradientStops>'\n  call SendToOutput '<GradientStopCollection>'\n  call SendToOutput '<GradientStop Offset=\"1.0\" Color=\"black\" />'\n  call SendToOutput '<GradientStop Offset=\"0.0\" '\n  call SendToOutput ' Color=\"'Color.ChartLevel'\" />'\n  call SendToOutput '</GradientStopCollection>'\n  call SendToOutput '</LinearGradientBrush.GradientStops>'\n  call SendToOutput '</LinearGradientBrush>'\n  call SendToOutput '</Polygon.Fill>'\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreateBar:\n  call SendToOutput \"<!-- Column -->\"\n  Bar = '<Rectangle '\n  x1 = LeftMargin + xPrim + ShadowWidth\n  y1 = TopMargin + yPrim\n  Bar = Bar'Canvas.Left=\"'x1'\" '\n  Bar = Bar'Canvas.Top=\"'y1'\" '\n  Bar = Bar'Width=\"'RectangleWidth'\"'\n  Bar = Bar' Height=\"'ColumnHeight'\"'\n  Bar = Bar'>'\n  call SendToOutput Bar\n  Call CreateColumnShading\n  call SendToOutput '</Rectangle>'\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreateColumnShading:\n  call SendToOutput '<Rectangle.Fill>'\n  call SendToOutput '<LinearGradientBrush StartPoint=\"1,0.5\" '\n  call SendToOutput 'EndPoint=\"0,0.5\">'\n  call SendToOutput '<LinearGradientBrush.GradientStops>'\n  call SendToOutput '<GradientStopCollection>'\n  call SendToOutput '<GradientStop Offset=\"1.0\" Color=\"white\" />'\n  call SendToOutput '<GradientStop Offset=\"0.0\" '\n  call SendToOutput ' Color=\"'Color.ChartLevel'\" />'\n  call SendToOutput '</GradientStopCollection>'\n  call SendToOutput '</LinearGradientBrush.GradientStops>'\n  call SendToOutput '</LinearGradientBrush>'\n  call SendToOutput '</Rectangle.Fill>'\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nSendToOutput:\n  parse arg XAMLAdd\n  OutputIndex = OutputIndex + 1\n  Output.OutputIndex = XAMLAdd\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nAddAnimation:\n  parse arg XAMLAdd\n  AnimationIndex = AnimationIndex + 1\n  AnimationOutput.AnimationIndex = XAMLAdd\n  AnimationOutput.0 = AnimationIndex\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nAddBar:\n  parse arg NewHeight\n  if DataType(NewHeight) <> 'NUM' then NewHeight = 0\n  If NewHeight > 100 then NewHeight = 100\n  ColumnHeight = (BoxHeight * NewHeight *.01)\n  If ChartTypePrefix <> \"LIN\" then do\n    if ColumnHeight < (CapHeight/2) then ColumnHeight = (CapHeight/2)\n    end\n  call ConstructOneBar\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nConstructOneBar:\n  select\n    when ChartTypePrefix = 'COL' then do\n      if \\FirstTime then xPrim = xPrim + ColumnWidth + Spacing\n      else FirstTime = False\n      yPrim = BoxHeight - ColumnHeight\n      call CreateColumnCap\n      call CreateShadow\n      call CreateBar\n      end\n    when ChartTypePrefix = 'CYL' then do\n      yPrim = BoxHeight - ColumnHeight\n      if \\FirstTime then xPrim = xPrim + CylinderWidth + Spacing\n      else FirstTime = False\n      call CreateCylinderBottom\n      call CreateCylinder\n      call CreateCylinderTop\n      end\n    when ChartTypePrefix = 'LIN' then do\n      if \\FirstTime then xPrim = xPrim + PointWidth + Spacing\n      else FirstTime = False\n      xCo = xCo + 1\n      xCoordinate.xCo = xPrim + LeftMargin\n      yCoordinate.xCo = BoxHeight - ColumnHeight + TopMargin\n      end\n    otherwise do\n      Say 'Unknown Chart Type:'ChartType'.'\n      Say 'Must be \"COL\" or \"CYL\".'\n      Say 'Processing terminated.'\n      exit 8\n      end\n    end\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreateLedgerLines:\n  LedgerInterval = Boxheight / LedgerLineInterval\n  yLine = TopMargin\n  lti = 0\n  select\n    when ChartTypePrefix = 'COL' then Width = Columnwidth + Spacing\n    when ChartTypePrefix = 'CYL' then Width = CylinderWidth + Spacing\n    when ChartTypePrefix = 'LIN' then Width = PointWidth + Spacing\n    otherwise nop\n    end\n  do while yLine < Boxheight\n    if lti < LedgerText.0 then do\n      lti = lti + 1\n      call SendToOutput '<TextBlock FontFamily=\"'LedgerFontName'\" '\n      call SendToOutput ' Width=\"'LeftMargin'\" '\n      call SendToOutput ' Height=\"'LedgerInterval'\" '\n      call SendToOutput ' Canvas.Left=\"0\" Canvas.Top=\"'yLine'\" '\n      call SendToOutput ' FontSize=\"'LedgerFontSize'\" '\n      call SendToOutput ' Foreground=\"'LedgerColor'\" '\n      call SendToOutput ' TextWrapping=\"Wrap\" '\n      call SendToOutput ' Text=\"'LedgerText.lti'\" '\n      call SendToOutput '></TextBlock>'\n      end\n    line = '<Line X1=\"'LeftMargin\n    line = line'\" Y1=\"'yLine\n    line = line'\" X2=\"'Width * NumberOfFootings + LeftMargin\n    line = line'\" Y2=\"'yLine'\" '\n    line = line'Stroke=\"'Color.ChartLevel'\" '\n    line = line' StrokeThickness=\"1\"></Line>'\n    yLine = yLine + LedgerInterval\n    call SendToOutput line\n    end\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nCreateColumnFootings:\n  if ChartTypePrefix = 'COL' then xStart = LeftMargin + ShadowWidth\n  else xStart = LeftMargin\n  if FooterText.0 = 0 then do\n    do chi = 1 to NumberOfFootings  /* chi = column height index */\n      FooterText.chi = ColumnHeights.chi'%'\n      end\n    FooterText.0 = NumberOfFootings\n    end\n  xStart = LeftMargin - Spacing/2\n  if FooterWidth = 0 then FooterWidth = Width\n  if FooterDepth = 0 then FooterDepth = FooterWidth*2\n  if FooterSpan > 1 then do\n    FooterWidth = FooterWidth*FooterSpan\n    FooterText.0 = NumberOfFootings / FooterSpan\n    end\n  do cti = 1 to FooterText.0\n    call SendToOutput '<TextBlock FontFamily=\"'LedgerFontName'\" '\n    call SendToOutput ' Width=\"'FooterWidth'\" '\n    call SendToOutput ' Height=\"'FooterDepth'\" '\n    call SendToOutput ' Canvas.Left=\"'xStart'\" '\n    call SendToOutput ' Canvas.Top=\"'yLine'\" '\n    call SendToOutput ' FontSize=\"'FooterFontSize'\" '\n    call SendToOutput ' Foreground=\"'LedgerColor'\" '\n    call SendToOutput ' TextWrapping=\"Wrap\" '\n    call SendToOutput ' Text=\"'FooterText.cti'\" '\n    call SendToOutput '></TextBlock>'\n    line = '<Line X1=\"'xStart\n    line = line'\" Y1=\"'yLine\n    line = line'\" X2=\"'xStart\n    line = line'\" Y2=\"'yLine+FooterDepth'\" '\n    line = line'Stroke=\"Black\" '\n    line = line' StrokeThickness=\"1\"></Line>'\n    call SendToOutput line\n    if ChartTypePrefix = 'LIN' then do\n      line = '<Line X1=\"'xStart\n      line = line'\" Y1=\"'TopMargin\n      line = line'\" X2=\"'xStart\n      line = line'\" Y2=\"'TopMargin+boxHeight'\" '\n      line = line'Stroke=\"Black\" '\n      line = line' StrokeThickness=\".1\"></Line>'\n      call SendToOutput line\n      end\n    if FooterSpan = 1 then do\n      xStart = xStart + Width\n      end\n    else do\n      xStart = xStart + (Width*FooterSpan)\n      end\n    end\n  return\n/*\n=======================================================================\n\n=======================================================================\n*/\nUcase:\n  arg s1\n  return s1\n/*\n=======================================================================\n\nThis section draws the top of the cylinder (or its cap). So it looks\nlike a cap of a cylinder, different shading must be implemented.\n\n=======================================================================\n*/\nCreateCylinderTop:\n  cx = LeftMargin + xPrim\n  cy = TopMargin + (BoxHeight-ColumnHeight) - (CapHeight/2)\n  top = '<Ellipse x:Name=\"cap'TargetSequence'\" '\n  top = top'Canvas.Left=\"'cx'\" '\n  top = top'Canvas.Top=\"'cy'\" '\n  top = top'Width=\"'CylinderWidth'\" '\n  top = top'Height=\"'CapHeight'\" '\n  If Animation = 'Y' & AnimationType = 3 then do\n    top = top'Opacity=\"0\" '\n    end\n  top = top'>'\n  call SendToOutput top\n  call CreateCylinderTopShading\n  call SendToOutput '</Ellipse>'\n  If Animation = 'Y' then do\n    select\n      when Animationtype = 1 then do\n        Call AddAnimation '<DoubleAnimation '\n        Call AddAnimation 'Storyboard.TargetName=\"cap'TargetSequence'\" '\n        Call AddAnimation 'Storyboard.TargetProperty=\"(Canvas.Top)\" '\n        Call AddAnimation 'From=\"'BoxHeight+TopMargin'\" '\n        Call AddAnimation 'To=\"'cy'\" '\n        Call AddAnimation 'Duration=\"0:0:'1*ChartLevel'\"/>'\n        end\n      when Animationtype = 2 then do\n        Call AddAnimation '<DoubleAnimation '\n        Call AddAnimation 'Storyboard.TargetName=\"cap'TargetSequence'\" '\n        Call AddAnimation 'Storyboard.TargetProperty=\"Opacity\" '\n        Call AddAnimation 'From=\"0.0\" '\n        Call AddAnimation 'To=\"1.0\" '\n        Call AddAnimation 'Duration=\"0:0:'2*ChartLevel'\"/>'\n        end\n      when Animationtype = 3 then do\n        Call AddAnimation '<DoubleAnimation '\n        Call AddAnimation 'Storyboard.TargetName=\"cap'TargetSequence'\" '\n        Call AddAnimation 'Storyboard.TargetProperty=\"Opacity\" '\n        Call AddAnimation 'From=\"0.0\" '\n        Call AddAnimation 'To=\"1.0\" '\n        Call AddAnimation 'BeginTime=\"0:0:'1*ChartLevel'\" '\n        Call AddAnimation 'Duration=\"0:0:1\"/>'\n        end\n      otherwise nop\n      end\n    end\n  return\n/*\n=======================================================================\n\nThis section creates the bulk of the cylinder nminus the top and its\nbottom.\n\n=======================================================================\n*/\nCreateCylinder:\n  TargetSequence = TargetSequence + 1\n  Bar = '<Rectangle x:Name=\"cyl'TargetSequence'\" '\n  x1 = LeftMargin + xPrim\n  y1 = TopMargin + yPrim\n  ht = ColumnHeight-(CapHeight/2)\n  if ht < 0 then ht = 0\n  Bar = Bar'Canvas.Left=\"'x1'\" '\n  Bar = Bar'Canvas.Top=\"'y1'\" '\n  Bar = Bar'Width=\"'CylinderWidth'\"'\n  Bar = Bar' Height=\"'ht'\" '\n  If Animation = 'Y' & AnimationType = 3 then do\n    Bar = Bar'Opacity=\"0\" '\n    end\n  Bar = Bar'>'\n  call SendToOutput Bar\n  call CreateCylinderShading\n  call SendToOutput '</Rectangle>'\n  If Animation = 'Y' then do\n    Select\n      when AnimationType = 1 then do\n        Call AddAnimation '<DoubleAnimation '\n        Call AddAnimation 'Storyboard.TargetName=\"cyl'TargetSequence'\" '\n        Call AddAnimation 'Storyboard.TargetProperty=\"Height\" '\n        Call AddAnimation 'From=\"0\" '\n        Call AddAnimation 'To=\"'ht'\" '\n        Call AddAnimation 'Duration=\"0:0:'1*ChartLevel'\"/>'\n        Call AddAnimation '<DoubleAnimation '\n        Call AddAnimation 'Storyboard.TargetName=\"cyl'TargetSequence'\" '\n        Call AddAnimation 'Storyboard.TargetProperty=\"(Canvas.Top)\" '\n        Call AddAnimation 'From=\"'BoxHeight+TopMargin'\" '\n        Call AddAnimation 'To=\"'y1'\" '\n        Call AddAnimation 'Duration=\"0:0:'1*ChartLevel'\"/>'\n        end\n      when AnimationType = 2 then do\n        Call AddAnimation '<DoubleAnimation '\n        Call AddAnimation 'Storyboard.TargetName=\"cyl'TargetSequence'\" '\n        Call AddAnimation 'Storyboard.TargetProperty=\"Opacity\" '\n        Call AddAnimation 'From=\"0.0\" '\n        Call AddAnimation 'To=\"1.0\" '\n        Call AddAnimation 'Duration=\"0:0:'2*ChartLevel'\"/>'\n        end\n      when AnimationType = 3 then do\n        Call AddAnimation '<DoubleAnimation '\n        Call AddAnimation 'Storyboard.TargetName=\"cyl'TargetSequence'\" '\n        Call AddAnimation 'Storyboard.TargetProperty=\"Opacity\" '\n        Call AddAnimation 'From=\"0.0\" '\n        Call AddAnimation 'To=\"1.0\" '\n        Call AddAnimation 'BeginTime=\"0:0:'1*ChartLevel'\" '\n        Call AddAnimation 'Duration=\"0:0:1\"/>'\n        end\n      end\n    end\n  return\n/*\n=======================================================================\n\nThis creates the cylinder bottom using the Ellipse command. Basically,\nwe are just wanting to curve the bottom of the cylinder so it looks\nmore like a cylinder than a box.\n\n=======================================================================\n*/\nCreateCylinderBottom:\n  cx = LeftMargin + xPrim\n  cy = TopMargin + (BoxHeight) - (CapHeight)\n  top = '<Ellipse '\n  top = top'Width=\"'CylinderWidth'\" '\n  top = top'Height=\"'CapHeight'\" '\n  top = top'Canvas.Left=\"'cx'\" '\n  top = top'Canvas.Top=\"'cy'\" '\n  top = top'>                                                           '\n  call SendToOutput top\n  call CreateCylinderBottomShading\n  call SendToOutput '</Ellipse>'\n  return\n/*\n=======================================================================\n\nThis section draws the shading of the clinder top.\n\n=======================================================================\n*/\nCreateCylinderTopShading:\n  call SendToOutput '<Ellipse.Fill>'\n  call SendToOutput '<LinearGradientBrush StartPoint=\"1,0.5\" '\n  call SendToOutput '  EndPoint=\"0,0.5\">'\n  call SendToOutput '<LinearGradientBrush.GradientStops>'\n  call SendToOutput '<GradientStopCollection>'\n  call SendToOutput '<GradientStop Offset=\"0.6\" '\n  call SendToOutput ' Color=\"'Color.ChartLevel'\" />'\n  call SendToOutput '<GradientStop Offset=\"0.0\" Color=\"white\" />'\n  call SendToOutput '</GradientStopCollection>'\n  call SendToOutput '</LinearGradientBrush.GradientStops>'\n  call SendToOutput '</LinearGradientBrush>'\n  call SendToOutput '</Ellipse.Fill>'\n  return\n/*\n=======================================================================\n\nThis section draws shading of the cylinder.\n\n=======================================================================\n*/\nCreateCylinderShading:\n  call SendToOutput '<Rectangle.Fill>'\n  call CreateShading1\n  call SendToOutput '</Rectangle.Fill>'\n  return\n/*\n=======================================================================\n\nThis section creates the ellipse that is located at the bottom of a\ncylindar barchart. Basically it is just drawing the curve of cylindar\nbottom.\n\n=======================================================================\n*/\nCreateCylinderBottomShading:\n  call SendToOutput '<Ellipse.Fill>'\n  call CreateShading1\n  call SendToOutput '</Ellipse.Fill>'\n  return\n/*\n=======================================================================\n\nThis section creates the text box at the top of the barchart that will\ncontain the title.\n\n=======================================================================\n*/\nCreateTitle:\n  call SendToOutput '<TextBlock FontFamily=\"'TitleFontName'\" '\n  call SendToOutput ' Width=\"200\" Height=\"'TopMargin'\" '\n  call SendToOutput ' Canvas.Left=\"'LeftMargin'\" Canvas.Top=\"0\" '\n  call SendToOutput ' FontSize=\"'TitleFontSize'\" '\n  call SendToOutput 'Foreground=\"'TitleColor'\" Text=\"'Title'\" '\n  call SendToOutput '></TextBlock>'\n  return\n/*\n=======================================================================\n\nThis section draws the individual line for a given level of a\nCharttype=\"LIN\" barchart.  The complete line is drawn from left to\nright with just one PATH command.\n\n=======================================================================\n*/\nCreateLinePath:\n  xCoordinate.0 = xCo\n  call SendtoOutput '<Path x:Name=\"p'LineNumber'\"'\n  call SendtoOutput ' Stroke=\"'Color.LineNumber'\"'\n  call SendtoOutput ' StrokeThickness=\"1\" '\n  call SendtoOutput ' Data=\"M 'xCoordinate.1','yCoordinate.1' L '\n  do xCo=2 to xCoordinate.0\n    call SendToOutput ' 'xCoordinate.xCo','yCoordinate.xCo'  '\n    end\n  call SendToOutput '\"/>'\n  If Animation = 'Y' then do\n    select\n      when Animationtype = 1 then do\n        Call AddAnimation '<DoubleAnimation '\n        Call AddAnimation 'Storyboard.TargetName=\"p'LineNumber'\" '\n        Call AddAnimation 'Storyboard.TargetProperty=\"Opacity\" '\n        Call AddAnimation 'From=\"0.3\" '\n        Call AddAnimation 'To=\"1.0\" '\n        Call AddAnimation 'AutoReverse=\"True\" '\n        Call AddAnimation 'Duration=\"0:0:1\" '\n        Call AddAnimation 'RepeatBehavior=\"Forever\" '\n        Call AddAnimation 'BeginTime=\"0:0:'LineNumber'\" '\n        call AddAnimation '/>'\n        end\n      otherwise nop\n      end\n    end\n  return\n/*\n=======================================================================\n\nThis section draws the text boxes for the each level of the barchart,\nIf a char has only one lever, then only on text box will be created.\nThese text boxes are written near the bottom and towards the left of a\nbarchart.\n\n=======================================================================\n*/\nCreateLevelText:\n  If ChartTypePrefix = 'LIN' & ChartLevel > 1 then return\n  if ChartLevel > LevelText.0 then return\n  call SendToOutput '<TextBlock FontFamily=\"'LedgerFontName'\" '\n  call SendToOutput ' Width=\"'LeftMargin'\" '\n  call SendToOutput ' Height=\"'LedgerInterval'\" '\n  call SendToOutput ' Canvas.Left=\"'LevelTextXpos'\" '\n  call SendToOutput ' Canvas.Top=\"'yLine'\" '\n  call SendToOutput ' FontSize=\"'LedgerFontSize'\" '\n  call SendToOutput ' Foreground=\"'Color.ChartLevel'\" '\n  call SendToOutput ' Text=\"'LevelText.ChartLevel'\" '\n  call SendToOutput '></TextBlock>'\n  LevelTextXpos = LevelTextXpos + xShift /* for next time if any */\n  return\n/*\n=======================================================================\n\nThis section draws the shading for the individual cylindars and their\nbottoms for ChartType=\"CYL\" barcharts. The tops of the cylindars are\ndrawn elsewhere.\n\n=======================================================================\n*/\nCreateShading1:\n  call SendToOutput '<LinearGradientBrush StartPoint=\"1,0.5\" '\n  call SendToOutput '  EndPoint=\"0,0.5\">'\n  call SendToOutput '<LinearGradientBrush.GradientStops>'\n  call SendToOutput '<GradientStopCollection>'\n  call SendToOutput '<GradientStop Offset=\"0.0\" '\n  call SendToOutput ' Color=\"'Color.ChartLevel'\" />'\n  call SendToOutput '<GradientStop Offset=\"0.3\" Color=\"white\" />'\n  call SendToOutput '<GradientStop Offset=\"0.6\" '\n  call SendToOutput ' Color=\"'Color.ChartLevel'\" />'\n  call SendToOutput '<GradientStop Offset=\"0.9\" '\n  call SendToOutput ' Color=\"Black\" />'\n  call SendToOutput '</GradientStopCollection>'\n  call SendToOutput '</LinearGradientBrush.GradientStops>'\n  call SendToOutput '</LinearGradientBrush>'\n  return\n/*\n=======================================================================\n\n  This sesction displays the varaibles that will be used for the\n  creation of the barchart at the time of execution.\n\n=======================================================================\n*/\nDisplayVariableSettings:\n  Say \"Variable settings used during this execution:\"\n  Say \"ShrinkBy = \"ShrinkBy\n  Say \"Animation = \"Animation\n  Say \"AnimationType = \"AnimationType\n  Say \"lci = \"lci\n  Say \"xShift = \"xShift\n  Say \"yShift = \"yShift\n  Say \"BoxHeight = \"BoxHeight\n  Say \"CapHeight = \"CapHeight\n  Say \"ChartType = \"ChartType\n  Say \"FooterFontSize = \"FooterFontSize\n  Say \"FooterText.0 = \"FooterText.0\n  do i = 1 to FooterText.0\n    Say \"FooterText.\"i\" = \"FooterText.i\n    end\n  Say \"CylinderWidth = \"CylinderWidth\n  Say \"FontName = \"FontName\n  Say \"FooterDepth = \"FooterDepth\n  Say \"FooterWidth = \"FooterWidth\n  Say \"FooterSpan  = \"FooterSpan\n  Say \"LedgerLineInterval = \"LedgerLineInterval\n  Say \"LedgerText.0 = \"LedgerText.0\n  do i = 1 to LedgerText.0\n    Say \"LedgerText.\"i\" = \"LedgerText.i\n    end\n  Say \"LeftMargin = \"LeftMargin\n  Say \"LevelText.0 = \"LevelText.0\n  do i = 1 to LevelText.0\n    Say \"LevelText.\"i\" = \"LevelText.i\n    end\n  Say \"Color.0 = \"Color.0\n  do i = 1 to Color.0\n    Say \"Color.\"i\" = \"Color.i\n    end\n  Say \"LedgerColor = \"LedgerColor\n  Say \"LedgerFontname = \"LedgerFontname\n  Say \"LedgerFontSize = \"LedgerFontSize\n  Say \"PointWidth = \"PointWidth\n  Say \"OutputDDname = \"OutputDDname\n  Say \"RectangleWidth = \"RectangleWidth\n  Say \"ShadowWidth = \"ShadowWidth\n  Say \"Spacing = \"Spacing\n  Say \"Title = \"Title\n  Say \"TitlefontSize = \"TitlefontSize\n  Say \"TitleFontname = \"TitleFontname\n  Say \"TitleColor = \"TitleColor\n  Say \"TopMargin = \"TopMargin\n  return\n/*\n=======================================================================\n\n    This section reduces or increases the size of the chart by\n  applying the variable ShrinkBy to all other size controlling\n  variables.  ShrinkBy must be greater then zero of less than or\n  equal to 2.  Less than 1 will decrease the size of the bar chart\n  where as greater than 1 will increase its size.\n\n=======================================================================\n*/\nCheckoutShrinkBy:\n  if ShrinkBy <= 2.00 & ShrinkBy > 0.00 & ShrinkBy <> 1.00 then do\n    lci = lci*ShrinkBy\n    xShift = xShift*ShrinkBy\n    yShift = yShift*ShrinkBy\n    BoxHeight = BoxHeight*ShrinkBy\n    CapHeight = CapHeight*ShrinkBy\n    FooterFontSize = FooterFontSize*ShrinkBy\n    CylinderWidth = CylinderWidth*ShrinkBy\n    FooterDepth = FooterDepth*ShrinkBy\n    FooterWidth = FooterWidth*ShrinkBy\n    LeftMargin = LeftMargin*ShrinkBy\n    LedgerFontSize = LedgerFontSize*ShrinkBy\n    PointWidth = PointWidth*ShrinkBy\n    RectangleWidth = RectangleWidth*ShrinkBy\n    ShadowWidth = ShadowWidth*ShrinkBy\n    Spacing = Spacing*ShrinkBy\n    TitlefontSize = TitlefontSize*ShrinkBy\n    TopMargin = TopMargin*ShrinkBy\n    Say \"Variable settings after ShrinkBy.............................\"\n    call DisplayVariableSettings\n    end\n  return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT801/FILE801.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT801", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}