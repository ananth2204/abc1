/* rexx */
/*
 Original Author: Richard C. Turnbull
            Date: 12/2008

 This rexx script produces an XAML page suitable for displaying within
 a web browser.

 Following is an example of how to execute this script in a batch job:

    //CBRXXRUN JOB ,'REXX RUN',CLASS=Q,MSGCLASS=X,MSGLEVEL=(1,1),
    //    NOTIFY=TUR0563
    //STEP10  EXEC PGM=IRXJCL,PARM='XAML01'
    //SYSTSIN  DD DUMMY
    //SYSTSPRT DD SYSOUT=*
    //SYSUDUMP DD SYSOUT=*
    //SYSEXEC DD DISP=SHR,DSN=SA.SYSEXEC
    //XAMLIN  DD *
    <Canvas
      xmlns="http://schemas.microsoft.com/client/2007"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <PLACE BARCHART HERE>
    </Canvas>
    //XAMLOUT DD DISP=(NEW,PASS),
    //          DSN=&XAML,
    //          UNIT=DASD,
    //          STORCLAS=SCUSER,
    //          DCB=(LRECL=255,RECFM=VB)
    //ENVVAR  DD *
      ShadowWidth = 5
      RectangleWidth = 10
      LeftMargin = 150
      TopMargin = 50
      BoxHeight = 400
      LedgerLineInterval = 5
      LedgerText.0 = LedgerLineInterval
      LedgerText.1 = 'Line One'
      LedgerText.2 = 'Line Two'
      LedgerText.3 = 'Line three'
      LedgerText.4 = 'Line Four'
      LedgerText.5 = 'Line Five'
      LedgerFontSize=10
      FooterText.0 = 12
      FooterText.1 = '1999'
      FooterText.2 = '2000'
      FooterText.3 = '2001'
      FooterText.4 = '2002'
      FooterText.5 = '2003'
      FooterText.6 = '2004'
      FooterText.7 = '2005'
      FooterText.8 = '2006'
      FooterText.9 = '2007'
      FooterText.10 = '2008'
      FooterText.11 = '2009'
      FooterText.12 = '2010'
    //PERCENTS DD *
    5 10 15 20 50 75 95 25
    60 33
    44
    21
    //STEP02  EXEC BATCHTMP
    //SYSIN  DD *
     OCOPY INDD(I1) OUTDD(O1)
    //I1     DD  DISP=(OLD,DELETE),DSN=&XAML
    //O1     DD PATHOPTS=(OWRONLY,OCREAT),PATHMODE=(SIRWXU),
    // PATH='/usr/lpp/internet/server_root/saapps/pub/xaml/Xaml2.txt'
*/
  Call Init
  do i = 1 to XAMLIn.0
    select
      when strip(XAMLIn.i) = '<PLACE BARCHART HERE>' then do
        call CreateBarChart
        end
      otherwise do
        call SendToOutput XAMLIn.i
        end
      end
    end
  address mvs 'execio * diskW 'OutputDDname' (finis stem Output.'
  exit
/*
=======================================================================

=======================================================================
*/
Init:
  lci = 1        /* lci = Line Color Index */
  xShift = 15
  yShift = 15
  Animation = "Y"
  AnimationType = 1
  BoxHeight = 400
  CapHeight = 6
  ChartType = 'COLUMN'   /* COLUMN or cylinder */
  Color.0 = 5
  Color.1 = 'TEAL'
  Color.2 = 'MAROON'
  Color.3 = 'SteelBlue'
  Color.4 = 'DARKMAGENTA'
  Color.5 = 'GRAY'
  FooterFontSize = 9
  FooterText.0 = 0
  CylinderWidth = 30
  FontName = 'Verdana'
  FooterDepth = 0
  FooterWidth = 0
  FooterSpan  = 1     /* used only in Type="LIN" charts */
  LedgerColor = 'BLACK'
  LedgerFontname = 'ARIAL'
  LedgerFontSize = 10
  LedgerLineInterval = 10
  LedgerText.0 = 0
  LeftMargin = 75
  LevelText.0 = 0
  PointWidth = 5
  OutputDDname = 'XAMLOUT'
  RectangleWidth = 20
  ShadowWidth = 10
  ShrinkBy = 1.00    /* used to alter the overall size of chart */
  Spacing = 2
  Title = ""
  TitlefontSize = 20
  TitleColor    = 'Black'
  TitleFontname = 'ARIAL'
  TopMargin = 50
  ReturnedCommand = ""
  address mvs "execio * diskr ENVVAR (finis stem EnvVar."
  do i = 1 to EnvVar.0
    if left(EnvVar.i,2) = "/*" then do
      iterate
    end
    parse var EnvVar.i ccdCommand "/*" Comment
    ReturnedCommand = ReturnedCommand";"ccdCommand
  end
  Interpret ReturnedCommand
  drop ReturnedCommand
  drop EnvVar.
  Call DisplayVariableSettings
  Call CheckoutShrinkBy
  LineNumber = 1
  fnt = FontName
  ChartTypePrefix = Ucase(left(ChartType,3))
  true = 1
  false = 0
  FirstTime = true
  address mvs "execio * diskr XAMLIN (finis stem XAMLIn."
  OutputIndex = 0
  address mvs "execio * diskr PERCENTS (finis stem Percents."
  chi = 0 /*Column Heights Index */
  do pci = 1 to Percents.0
    do ii = 1 to Words(Percents.pci)
      chi = chi + 1
      ColumnHeights.chi = Word(Percents.pci,ii)
      end
    end
  ColumnHeights.0 = chi
  NumberOfFootings=ColumnHeights.0   /* set default              */
  do chitemp = 1 to ColumnHeights.0  /* indicator. If none found */
    if ColumnHeights.chitemp = '/' then do /* then only one line */
      NumberOfFootings=chitemp-1     /* is being produced        */
      leave
      end
    end
  ChartLevel = 1
  LevelTextXpos = 0
  Animation = left(Animation,1)
  upper Animation
  AnimationOffsetTiming = 0
  TargetSequence = 0
  AnimationIndex = 0
  AnimationOutput.0 = 0
  xCo = 0    /* Type="LIN", coordinate  index */
  return
/*
=======================================================================

=======================================================================
*/
CreateBarChart:
  ColumnWidth = ShadowWidth + RectangleWidth
  xPrim= 0
  Call CreateTitle
  Call CreateLedgerLines
  do chi = 1 to ColumnHeights.0
    if ColumnHeights.chi = "/" then do /*check for multi-line      */
      select
        when ChartTypePrefix = "LIN" then do
          Call CreateLevelText
          Width = PointWidth + Spacing     /*indicator.                */
          call CreateLinePath              /*if found, start a new line*/
          xCo = 0
          FirstTime = True
          LineNumber = LineNumber + 1
          xPrim= 0                         /*reset back to beginning of*/
                                           /*chart.                    */
          chi = chi + 1                    /*get next percent          */
          ChartLevel = ChartLevel + 1
          call AddBar ColumnHeights.chi
          end
        otherwise do
          Call CreateLevelText
          AnimationOffsetTiming = 0
          FirstTime = True
          TopMargin = TopMargin + yShift
          LeftMargin = LeftMargin + xShift
          xPrim = 0
          chi = chi + 1                    /*get next percent          */
          ChartLevel = ChartLevel + 1
          yLine = TopMargin
          call SendToOutput "<!-- Top line -->"
            do while yLine < Boxheight + TopMargin
              If yShift <> 0 then do
                line = '<Line X1="'LeftMargin
                line = line'" Y1="'yLine
                line = line'" X2="'Width * NumberOfFootings + LeftMargin
                line = line'" Y2="'yLine'" '
                line = line'Stroke="'Color.ChartLevel'" '
                line = line' StrokeThickness="1"></Line>'
                call SendToOutput line
                end
              yLine = yLine + LedgerInterval
              end
          call AddBar ColumnHeights.chi
          end
        end
      end
    else do
      call AddBar ColumnHeights.chi
      end
    end
  select
    when ChartTypePrefix = 'COL' then do
      Width = ColumnWidth + Spacing
      end
    when ChartTypePrefix = 'CYL' then do
      Width = CylinderWidth + Spacing
      end
    when ChartTypePrefix = 'LIN' then do
      Width = PointWidth + Spacing
      call CreateLinePath
      end
    otherwise nop
    end
  Call CreateLevelText
  xLine = (NumberOfFootings * Width) + LeftMargin
  call SendToOutput "<!-- Bottom line -->"
  line = '<Line X1="'LeftMargin
  line = line'" Y1="'BoxHeight + TopMargin
  line = line'" X2="'xLine
  line = line'" Y2="'BoxHeight + TopMargin'" '
  line = line'Stroke="gray" StrokeThickness="2" ></Line>'
  call SendToOutput line
  Call CreateColumnFootings
  If Animation = "Y" then do
    Call SendToOutput '<Canvas.Triggers>'
    Call SendToOutput '<EventTrigger RoutedEvent="Canvas.Loaded">'
    Call SendToOutput '<EventTrigger.Actions>'
    Call SendToOutput '<BeginStoryboard>'
    Call SendToOutput '<Storyboard AutoReverse="False">'
    do AO = 1 to AnimationOutput.0
      call SendToOutput AnimationOutput.AO
      end
    Call SendToOutput '</Storyboard>'
    Call SendToOutput '</BeginStoryboard>'
    Call SendToOutput '</EventTrigger.Actions>'
    Call SendToOutput '</EventTrigger>'
    Call SendToOutput '</Canvas.Triggers>'
    end
  return
/*
=======================================================================

=======================================================================
*/
CreateColumnCap:
  call SendToOutput "<!-- Column Cap -->"
  ColumnCap = "<Polygon "
  x1 = LeftMargin + xPrim
  y1 = TopMargin + yPrim - CapHeight
  x2 = x1 + RectangleWidth
  y2 = y1
  x3 = x1 + ColumnWidth
  y3 = Y1 + CapHeight
  x4 = x1 + ShadowWidth
  y4 = Y3
  ColumnCap = ColumnCap' Points="'
  ColumnCap = ColumnCap||x1','y1' 'x2','y2' 'x3','y3' 'x4','y4
  ColumnCap = ColumnCap'">'
  call SendToOutput ColumnCap
  call CreatePolygonShading
  ColumnCap = "</Polygon> "
  call SendToOutput ColumnCap
  return
/*
=======================================================================

=======================================================================
*/
CreatePolygonShading:
  call SendToOutput '<Polygon.Fill>'
  call SendToOutput '<LinearGradientBrush StartPoint="1,0.5" '
  call SendToOutput 'EndPoint="0,0.5">'
  call SendToOutput '<LinearGradientBrush.GradientStops>'
  call SendToOutput '<GradientStopCollection>'
  call SendToOutput '<GradientStop Offset="1.0" Color="black" />'
  call SendToOutput '<GradientStop Offset="0.0" '
  call SendToOutput ' Color="'Color.ChartLevel'" />'
  call SendToOutput '</GradientStopCollection>'
  call SendToOutput '</LinearGradientBrush.GradientStops>'
  call SendToOutput '</LinearGradientBrush>'
  call SendToOutput '</Polygon.Fill>'
  return
/*
=======================================================================

=======================================================================
*/
CreateShadow:
  call SendToOutput "<!-- Column Shadow -->"
  Shadow = "<Polygon "
  x1 = LeftMargin + xPrim
  y1 = TopMargin + yPrim - CapHeight
  x2 = x1 + ShadowWidth
  y2 = y1 + CapHeight
  x3 = x2
  y3 = BoxHeight + TopMargin
  x4 = x1
  y4 = Y3 - CapHeight
  Shadow = Shadow' Points="'
  Shadow = Shadow||x1','y1' 'x2','y2' 'x3','y3' 'x4','y4
  Shadow = Shadow'"'
  Shadow = Shadow'>'
  call SendToOutput Shadow
  call CreateShadowShading
  call SendToOutput '</Polygon>'
  return
/*
=======================================================================

=======================================================================
*/
CreateShadowShading:
  call SendToOutput '<Polygon.Fill>'
  call SendToOutput '<LinearGradientBrush StartPoint="1,0.5" '
  call SendToOutput 'EndPoint="0,0.5">'
  call SendToOutput '<LinearGradientBrush.GradientStops>'
  call SendToOutput '<GradientStopCollection>'
  call SendToOutput '<GradientStop Offset="1.0" Color="black" />'
  call SendToOutput '<GradientStop Offset="0.0" '
  call SendToOutput ' Color="'Color.ChartLevel'" />'
  call SendToOutput '</GradientStopCollection>'
  call SendToOutput '</LinearGradientBrush.GradientStops>'
  call SendToOutput '</LinearGradientBrush>'
  call SendToOutput '</Polygon.Fill>'
  return
/*
=======================================================================

=======================================================================
*/
CreateBar:
  call SendToOutput "<!-- Column -->"
  Bar = '<Rectangle '
  x1 = LeftMargin + xPrim + ShadowWidth
  y1 = TopMargin + yPrim
  Bar = Bar'Canvas.Left="'x1'" '
  Bar = Bar'Canvas.Top="'y1'" '
  Bar = Bar'Width="'RectangleWidth'"'
  Bar = Bar' Height="'ColumnHeight'"'
  Bar = Bar'>'
  call SendToOutput Bar
  Call CreateColumnShading
  call SendToOutput '</Rectangle>'
  return
/*
=======================================================================

=======================================================================
*/
CreateColumnShading:
  call SendToOutput '<Rectangle.Fill>'
  call SendToOutput '<LinearGradientBrush StartPoint="1,0.5" '
  call SendToOutput 'EndPoint="0,0.5">'
  call SendToOutput '<LinearGradientBrush.GradientStops>'
  call SendToOutput '<GradientStopCollection>'
  call SendToOutput '<GradientStop Offset="1.0" Color="white" />'
  call SendToOutput '<GradientStop Offset="0.0" '
  call SendToOutput ' Color="'Color.ChartLevel'" />'
  call SendToOutput '</GradientStopCollection>'
  call SendToOutput '</LinearGradientBrush.GradientStops>'
  call SendToOutput '</LinearGradientBrush>'
  call SendToOutput '</Rectangle.Fill>'
  return
/*
=======================================================================

=======================================================================
*/
SendToOutput:
  parse arg XAMLAdd
  OutputIndex = OutputIndex + 1
  Output.OutputIndex = XAMLAdd
  return
/*
=======================================================================

=======================================================================
*/
AddAnimation:
  parse arg XAMLAdd
  AnimationIndex = AnimationIndex + 1
  AnimationOutput.AnimationIndex = XAMLAdd
  AnimationOutput.0 = AnimationIndex
  return
/*
=======================================================================

=======================================================================
*/
AddBar:
  parse arg NewHeight
  if DataType(NewHeight) <> 'NUM' then NewHeight = 0
  If NewHeight > 100 then NewHeight = 100
  ColumnHeight = (BoxHeight * NewHeight *.01)
  If ChartTypePrefix <> "LIN" then do
    if ColumnHeight < (CapHeight/2) then ColumnHeight = (CapHeight/2)
    end
  call ConstructOneBar
  return
/*
=======================================================================

=======================================================================
*/
ConstructOneBar:
  select
    when ChartTypePrefix = 'COL' then do
      if \FirstTime then xPrim = xPrim + ColumnWidth + Spacing
      else FirstTime = False
      yPrim = BoxHeight - ColumnHeight
      call CreateColumnCap
      call CreateShadow
      call CreateBar
      end
    when ChartTypePrefix = 'CYL' then do
      yPrim = BoxHeight - ColumnHeight
      if \FirstTime then xPrim = xPrim + CylinderWidth + Spacing
      else FirstTime = False
      call CreateCylinderBottom
      call CreateCylinder
      call CreateCylinderTop
      end
    when ChartTypePrefix = 'LIN' then do
      if \FirstTime then xPrim = xPrim + PointWidth + Spacing
      else FirstTime = False
      xCo = xCo + 1
      xCoordinate.xCo = xPrim + LeftMargin
      yCoordinate.xCo = BoxHeight - ColumnHeight + TopMargin
      end
    otherwise do
      Say 'Unknown Chart Type:'ChartType'.'
      Say 'Must be "COL" or "CYL".'
      Say 'Processing terminated.'
      exit 8
      end
    end
  return
/*
=======================================================================

=======================================================================
*/
CreateLedgerLines:
  LedgerInterval = Boxheight / LedgerLineInterval
  yLine = TopMargin
  lti = 0
  select
    when ChartTypePrefix = 'COL' then Width = Columnwidth + Spacing
    when ChartTypePrefix = 'CYL' then Width = CylinderWidth + Spacing
    when ChartTypePrefix = 'LIN' then Width = PointWidth + Spacing
    otherwise nop
    end
  do while yLine < Boxheight
    if lti < LedgerText.0 then do
      lti = lti + 1
      call SendToOutput '<TextBlock FontFamily="'LedgerFontName'" '
      call SendToOutput ' Width="'LeftMargin'" '
      call SendToOutput ' Height="'LedgerInterval'" '
      call SendToOutput ' Canvas.Left="0" Canvas.Top="'yLine'" '
      call SendToOutput ' FontSize="'LedgerFontSize'" '
      call SendToOutput ' Foreground="'LedgerColor'" '
      call SendToOutput ' TextWrapping="Wrap" '
      call SendToOutput ' Text="'LedgerText.lti'" '
      call SendToOutput '></TextBlock>'
      end
    line = '<Line X1="'LeftMargin
    line = line'" Y1="'yLine
    line = line'" X2="'Width * NumberOfFootings + LeftMargin
    line = line'" Y2="'yLine'" '
    line = line'Stroke="'Color.ChartLevel'" '
    line = line' StrokeThickness="1"></Line>'
    yLine = yLine + LedgerInterval
    call SendToOutput line
    end
  return
/*
=======================================================================

=======================================================================
*/
CreateColumnFootings:
  if ChartTypePrefix = 'COL' then xStart = LeftMargin + ShadowWidth
  else xStart = LeftMargin
  if FooterText.0 = 0 then do
    do chi = 1 to NumberOfFootings  /* chi = column height index */
      FooterText.chi = ColumnHeights.chi'%'
      end
    FooterText.0 = NumberOfFootings
    end
  xStart = LeftMargin - Spacing/2
  if FooterWidth = 0 then FooterWidth = Width
  if FooterDepth = 0 then FooterDepth = FooterWidth*2
  if FooterSpan > 1 then do
    FooterWidth = FooterWidth*FooterSpan
    FooterText.0 = NumberOfFootings / FooterSpan
    end
  do cti = 1 to FooterText.0
    call SendToOutput '<TextBlock FontFamily="'LedgerFontName'" '
    call SendToOutput ' Width="'FooterWidth'" '
    call SendToOutput ' Height="'FooterDepth'" '
    call SendToOutput ' Canvas.Left="'xStart'" '
    call SendToOutput ' Canvas.Top="'yLine'" '
    call SendToOutput ' FontSize="'FooterFontSize'" '
    call SendToOutput ' Foreground="'LedgerColor'" '
    call SendToOutput ' TextWrapping="Wrap" '
    call SendToOutput ' Text="'FooterText.cti'" '
    call SendToOutput '></TextBlock>'
    line = '<Line X1="'xStart
    line = line'" Y1="'yLine
    line = line'" X2="'xStart
    line = line'" Y2="'yLine+FooterDepth'" '
    line = line'Stroke="Black" '
    line = line' StrokeThickness="1"></Line>'
    call SendToOutput line
    if ChartTypePrefix = 'LIN' then do
      line = '<Line X1="'xStart
      line = line'" Y1="'TopMargin
      line = line'" X2="'xStart
      line = line'" Y2="'TopMargin+boxHeight'" '
      line = line'Stroke="Black" '
      line = line' StrokeThickness=".1"></Line>'
      call SendToOutput line
      end
    if FooterSpan = 1 then do
      xStart = xStart + Width
      end
    else do
      xStart = xStart + (Width*FooterSpan)
      end
    end
  return
/*
=======================================================================

=======================================================================
*/
Ucase:
  arg s1
  return s1
/*
=======================================================================

This section draws the top of the cylinder (or its cap). So it looks
like a cap of a cylinder, different shading must be implemented.

=======================================================================
*/
CreateCylinderTop:
  cx = LeftMargin + xPrim
  cy = TopMargin + (BoxHeight-ColumnHeight) - (CapHeight/2)
  top = '<Ellipse x:Name="cap'TargetSequence'" '
  top = top'Canvas.Left="'cx'" '
  top = top'Canvas.Top="'cy'" '
  top = top'Width="'CylinderWidth'" '
  top = top'Height="'CapHeight'" '
  If Animation = 'Y' & AnimationType = 3 then do
    top = top'Opacity="0" '
    end
  top = top'>'
  call SendToOutput top
  call CreateCylinderTopShading
  call SendToOutput '</Ellipse>'
  If Animation = 'Y' then do
    select
      when Animationtype = 1 then do
        Call AddAnimation '<DoubleAnimation '
        Call AddAnimation 'Storyboard.TargetName="cap'TargetSequence'" '
        Call AddAnimation 'Storyboard.TargetProperty="(Canvas.Top)" '
        Call AddAnimation 'From="'BoxHeight+TopMargin'" '
        Call AddAnimation 'To="'cy'" '
        Call AddAnimation 'Duration="0:0:'1*ChartLevel'"/>'
        end
      when Animationtype = 2 then do
        Call AddAnimation '<DoubleAnimation '
        Call AddAnimation 'Storyboard.TargetName="cap'TargetSequence'" '
        Call AddAnimation 'Storyboard.TargetProperty="Opacity" '
        Call AddAnimation 'From="0.0" '
        Call AddAnimation 'To="1.0" '
        Call AddAnimation 'Duration="0:0:'2*ChartLevel'"/>'
        end
      when Animationtype = 3 then do
        Call AddAnimation '<DoubleAnimation '
        Call AddAnimation 'Storyboard.TargetName="cap'TargetSequence'" '
        Call AddAnimation 'Storyboard.TargetProperty="Opacity" '
        Call AddAnimation 'From="0.0" '
        Call AddAnimation 'To="1.0" '
        Call AddAnimation 'BeginTime="0:0:'1*ChartLevel'" '
        Call AddAnimation 'Duration="0:0:1"/>'
        end
      otherwise nop
      end
    end
  return
/*
=======================================================================

This section creates the bulk of the cylinder nminus the top and its
bottom.

=======================================================================
*/
CreateCylinder:
  TargetSequence = TargetSequence + 1
  Bar = '<Rectangle x:Name="cyl'TargetSequence'" '
  x1 = LeftMargin + xPrim
  y1 = TopMargin + yPrim
  ht = ColumnHeight-(CapHeight/2)
  if ht < 0 then ht = 0
  Bar = Bar'Canvas.Left="'x1'" '
  Bar = Bar'Canvas.Top="'y1'" '
  Bar = Bar'Width="'CylinderWidth'"'
  Bar = Bar' Height="'ht'" '
  If Animation = 'Y' & AnimationType = 3 then do
    Bar = Bar'Opacity="0" '
    end
  Bar = Bar'>'
  call SendToOutput Bar
  call CreateCylinderShading
  call SendToOutput '</Rectangle>'
  If Animation = 'Y' then do
    Select
      when AnimationType = 1 then do
        Call AddAnimation '<DoubleAnimation '
        Call AddAnimation 'Storyboard.TargetName="cyl'TargetSequence'" '
        Call AddAnimation 'Storyboard.TargetProperty="Height" '
        Call AddAnimation 'From="0" '
        Call AddAnimation 'To="'ht'" '
        Call AddAnimation 'Duration="0:0:'1*ChartLevel'"/>'
        Call AddAnimation '<DoubleAnimation '
        Call AddAnimation 'Storyboard.TargetName="cyl'TargetSequence'" '
        Call AddAnimation 'Storyboard.TargetProperty="(Canvas.Top)" '
        Call AddAnimation 'From="'BoxHeight+TopMargin'" '
        Call AddAnimation 'To="'y1'" '
        Call AddAnimation 'Duration="0:0:'1*ChartLevel'"/>'
        end
      when AnimationType = 2 then do
        Call AddAnimation '<DoubleAnimation '
        Call AddAnimation 'Storyboard.TargetName="cyl'TargetSequence'" '
        Call AddAnimation 'Storyboard.TargetProperty="Opacity" '
        Call AddAnimation 'From="0.0" '
        Call AddAnimation 'To="1.0" '
        Call AddAnimation 'Duration="0:0:'2*ChartLevel'"/>'
        end
      when AnimationType = 3 then do
        Call AddAnimation '<DoubleAnimation '
        Call AddAnimation 'Storyboard.TargetName="cyl'TargetSequence'" '
        Call AddAnimation 'Storyboard.TargetProperty="Opacity" '
        Call AddAnimation 'From="0.0" '
        Call AddAnimation 'To="1.0" '
        Call AddAnimation 'BeginTime="0:0:'1*ChartLevel'" '
        Call AddAnimation 'Duration="0:0:1"/>'
        end
      end
    end
  return
/*
=======================================================================

This creates the cylinder bottom using the Ellipse command. Basically,
we are just wanting to curve the bottom of the cylinder so it looks
more like a cylinder than a box.

=======================================================================
*/
CreateCylinderBottom:
  cx = LeftMargin + xPrim
  cy = TopMargin + (BoxHeight) - (CapHeight)
  top = '<Ellipse '
  top = top'Width="'CylinderWidth'" '
  top = top'Height="'CapHeight'" '
  top = top'Canvas.Left="'cx'" '
  top = top'Canvas.Top="'cy'" '
  top = top'>                                                           '
  call SendToOutput top
  call CreateCylinderBottomShading
  call SendToOutput '</Ellipse>'
  return
/*
=======================================================================

This section draws the shading of the clinder top.

=======================================================================
*/
CreateCylinderTopShading:
  call SendToOutput '<Ellipse.Fill>'
  call SendToOutput '<LinearGradientBrush StartPoint="1,0.5" '
  call SendToOutput '  EndPoint="0,0.5">'
  call SendToOutput '<LinearGradientBrush.GradientStops>'
  call SendToOutput '<GradientStopCollection>'
  call SendToOutput '<GradientStop Offset="0.6" '
  call SendToOutput ' Color="'Color.ChartLevel'" />'
  call SendToOutput '<GradientStop Offset="0.0" Color="white" />'
  call SendToOutput '</GradientStopCollection>'
  call SendToOutput '</LinearGradientBrush.GradientStops>'
  call SendToOutput '</LinearGradientBrush>'
  call SendToOutput '</Ellipse.Fill>'
  return
/*
=======================================================================

This section draws shading of the cylinder.

=======================================================================
*/
CreateCylinderShading:
  call SendToOutput '<Rectangle.Fill>'
  call CreateShading1
  call SendToOutput '</Rectangle.Fill>'
  return
/*
=======================================================================

This section creates the ellipse that is located at the bottom of a
cylindar barchart. Basically it is just drawing the curve of cylindar
bottom.

=======================================================================
*/
CreateCylinderBottomShading:
  call SendToOutput '<Ellipse.Fill>'
  call CreateShading1
  call SendToOutput '</Ellipse.Fill>'
  return
/*
=======================================================================

This section creates the text box at the top of the barchart that will
contain the title.

=======================================================================
*/
CreateTitle:
  call SendToOutput '<TextBlock FontFamily="'TitleFontName'" '
  call SendToOutput ' Width="200" Height="'TopMargin'" '
  call SendToOutput ' Canvas.Left="'LeftMargin'" Canvas.Top="0" '
  call SendToOutput ' FontSize="'TitleFontSize'" '
  call SendToOutput 'Foreground="'TitleColor'" Text="'Title'" '
  call SendToOutput '></TextBlock>'
  return
/*
=======================================================================

This section draws the individual line for a given level of a
Charttype="LIN" barchart.  The complete line is drawn from left to
right with just one PATH command.

=======================================================================
*/
CreateLinePath:
  xCoordinate.0 = xCo
  call SendtoOutput '<Path x:Name="p'LineNumber'"'
  call SendtoOutput ' Stroke="'Color.LineNumber'"'
  call SendtoOutput ' StrokeThickness="1" '
  call SendtoOutput ' Data="M 'xCoordinate.1','yCoordinate.1' L '
  do xCo=2 to xCoordinate.0
    call SendToOutput ' 'xCoordinate.xCo','yCoordinate.xCo'  '
    end
  call SendToOutput '"/>'
  If Animation = 'Y' then do
    select
      when Animationtype = 1 then do
        Call AddAnimation '<DoubleAnimation '
        Call AddAnimation 'Storyboard.TargetName="p'LineNumber'" '
        Call AddAnimation 'Storyboard.TargetProperty="Opacity" '
        Call AddAnimation 'From="0.3" '
        Call AddAnimation 'To="1.0" '
        Call AddAnimation 'AutoReverse="True" '
        Call AddAnimation 'Duration="0:0:1" '
        Call AddAnimation 'RepeatBehavior="Forever" '
        Call AddAnimation 'BeginTime="0:0:'LineNumber'" '
        call AddAnimation '/>'
        end
      otherwise nop
      end
    end
  return
/*
=======================================================================

This section draws the text boxes for the each level of the barchart,
If a char has only one lever, then only on text box will be created.
These text boxes are written near the bottom and towards the left of a
barchart.

=======================================================================
*/
CreateLevelText:
  If ChartTypePrefix = 'LIN' & ChartLevel > 1 then return
  if ChartLevel > LevelText.0 then return
  call SendToOutput '<TextBlock FontFamily="'LedgerFontName'" '
  call SendToOutput ' Width="'LeftMargin'" '
  call SendToOutput ' Height="'LedgerInterval'" '
  call SendToOutput ' Canvas.Left="'LevelTextXpos'" '
  call SendToOutput ' Canvas.Top="'yLine'" '
  call SendToOutput ' FontSize="'LedgerFontSize'" '
  call SendToOutput ' Foreground="'Color.ChartLevel'" '
  call SendToOutput ' Text="'LevelText.ChartLevel'" '
  call SendToOutput '></TextBlock>'
  LevelTextXpos = LevelTextXpos + xShift /* for next time if any */
  return
/*
=======================================================================

This section draws the shading for the individual cylindars and their
bottoms for ChartType="CYL" barcharts. The tops of the cylindars are
drawn elsewhere.

=======================================================================
*/
CreateShading1:
  call SendToOutput '<LinearGradientBrush StartPoint="1,0.5" '
  call SendToOutput '  EndPoint="0,0.5">'
  call SendToOutput '<LinearGradientBrush.GradientStops>'
  call SendToOutput '<GradientStopCollection>'
  call SendToOutput '<GradientStop Offset="0.0" '
  call SendToOutput ' Color="'Color.ChartLevel'" />'
  call SendToOutput '<GradientStop Offset="0.3" Color="white" />'
  call SendToOutput '<GradientStop Offset="0.6" '
  call SendToOutput ' Color="'Color.ChartLevel'" />'
  call SendToOutput '<GradientStop Offset="0.9" '
  call SendToOutput ' Color="Black" />'
  call SendToOutput '</GradientStopCollection>'
  call SendToOutput '</LinearGradientBrush.GradientStops>'
  call SendToOutput '</LinearGradientBrush>'
  return
/*
=======================================================================

  This sesction displays the varaibles that will be used for the
  creation of the barchart at the time of execution.

=======================================================================
*/
DisplayVariableSettings:
  Say "Variable settings used during this execution:"
  Say "ShrinkBy = "ShrinkBy
  Say "Animation = "Animation
  Say "AnimationType = "AnimationType
  Say "lci = "lci
  Say "xShift = "xShift
  Say "yShift = "yShift
  Say "BoxHeight = "BoxHeight
  Say "CapHeight = "CapHeight
  Say "ChartType = "ChartType
  Say "FooterFontSize = "FooterFontSize
  Say "FooterText.0 = "FooterText.0
  do i = 1 to FooterText.0
    Say "FooterText."i" = "FooterText.i
    end
  Say "CylinderWidth = "CylinderWidth
  Say "FontName = "FontName
  Say "FooterDepth = "FooterDepth
  Say "FooterWidth = "FooterWidth
  Say "FooterSpan  = "FooterSpan
  Say "LedgerLineInterval = "LedgerLineInterval
  Say "LedgerText.0 = "LedgerText.0
  do i = 1 to LedgerText.0
    Say "LedgerText."i" = "LedgerText.i
    end
  Say "LeftMargin = "LeftMargin
  Say "LevelText.0 = "LevelText.0
  do i = 1 to LevelText.0
    Say "LevelText."i" = "LevelText.i
    end
  Say "Color.0 = "Color.0
  do i = 1 to Color.0
    Say "Color."i" = "Color.i
    end
  Say "LedgerColor = "LedgerColor
  Say "LedgerFontname = "LedgerFontname
  Say "LedgerFontSize = "LedgerFontSize
  Say "PointWidth = "PointWidth
  Say "OutputDDname = "OutputDDname
  Say "RectangleWidth = "RectangleWidth
  Say "ShadowWidth = "ShadowWidth
  Say "Spacing = "Spacing
  Say "Title = "Title
  Say "TitlefontSize = "TitlefontSize
  Say "TitleFontname = "TitleFontname
  Say "TitleColor = "TitleColor
  Say "TopMargin = "TopMargin
  return
/*
=======================================================================

    This section reduces or increases the size of the chart by
  applying the variable ShrinkBy to all other size controlling
  variables.  ShrinkBy must be greater then zero of less than or
  equal to 2.  Less than 1 will decrease the size of the bar chart
  where as greater than 1 will increase its size.

=======================================================================
*/
CheckoutShrinkBy:
  if ShrinkBy <= 2.00 & ShrinkBy > 0.00 & ShrinkBy <> 1.00 then do
    lci = lci*ShrinkBy
    xShift = xShift*ShrinkBy
    yShift = yShift*ShrinkBy
    BoxHeight = BoxHeight*ShrinkBy
    CapHeight = CapHeight*ShrinkBy
    FooterFontSize = FooterFontSize*ShrinkBy
    CylinderWidth = CylinderWidth*ShrinkBy
    FooterDepth = FooterDepth*ShrinkBy
    FooterWidth = FooterWidth*ShrinkBy
    LeftMargin = LeftMargin*ShrinkBy
    LedgerFontSize = LedgerFontSize*ShrinkBy
    PointWidth = PointWidth*ShrinkBy
    RectangleWidth = RectangleWidth*ShrinkBy
    ShadowWidth = ShadowWidth*ShrinkBy
    Spacing = Spacing*ShrinkBy
    TitlefontSize = TitlefontSize*ShrinkBy
    TopMargin = TopMargin*ShrinkBy
    Say "Variable settings after ShrinkBy............................."
    call DisplayVariableSettings
    end
  return
