{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011235000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 529074, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE102.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE102.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x06'", "DS1TRBAL": "b'q\\xb0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xaf\\x00\\x04\\x00\\xaf\\x00\\r\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$NOTE1": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x95\\x01\\x0f\\x01\\x00)\\x9f\\x113\\x00e\\x00\\x15\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1995-01-10T00:00:00", "modifydate": "2000-10-25T11:33:00", "lines": 101, "newlines": 21, "modlines": 0, "user": "WSBG"}, "text": "Note for TAPESCAN.  06/22/00   Version 5.2      (Sam Golob)\n\n   Frank Pajerski's updates to Howard Dean's version of TAPESCAN,\n   called Version 5.1, has been fitted with 64K block support and\n   has now been called Version 5.2.  See notes on Version 4.6.\n\nNote for TAPESCAN.  06/22/00   Version 4.6A     (Sam Golob)\n\n   A small fix has been made to both Versions 5.2 and 4.6, so\n   that if you mount a tape with different JCL volser than the\n   VOL1 label says, you get a descriptive error message\n   mentioning both VOLSERs explicitly.\n\nNote for TAPESCAN.  04/06/00   Version 4.6      (Sam Golob)\n\n   I think I've fixed TAPESCAN to handle tapes with up to 64K\n   blocks.  Since TAPESCAN is a complicated program, I'm making\n   some notes to show you what I've had to do.\n\n   TAPESCAN's I/O is as follows:  READs of input tapes are\n   \"officially\" done using BSAM.  Write I/O (for tape copy) is\n   done using EXCP.  There is a BSAM DCB with MACRF=RC (so the\n   CNTRL macro can be used to position the tape).  But a clever\n   way of pushing an EXCP into the BSAM control blocks is\n   employed, so that most of the input I/O is really EXCP and not\n   BSAM.  See label EXECEXCP for the guts of much of the read I/O\n   (but not all of it) in this program.  The rest of the read I/O\n   action is in the subroutine at label READON, which is BSAM.\n\n   Since some of the input I/O in TAPESCAN is a BSAM READ, we need\n   a remedy to handle 64K block sizes.  To make the TAPESCAN\n   program handle up to 64K block sizes, I used a trick, whose\n   explanation follows.  This trick was taught to me by Bruce Black\n   and Larry Stout of Innovation Data Processing, and we all owe\n   them, and that fine company, a huge amount of thanks.\n\n   There is a way to \"doctor\" a BSAM READ or WRITE, so it will\n   copy up to a 64K block of tape data, as opposed to the\n   \"official limit\" of 32K.  You define the BSAM DCB (in our\n   case, MACRF=RC) with RECFM=U and BLKSIZE=32760 (the DCBBLKSI\n   field).  Then you stuff the number 65535 into the length\n   parameter of the READ or WRITE macro (the 5th parameter).\n   This works.  This trick was told to me courtesy of the FDR\n   people (Bruce Black and Larry Stout).  In their programs, they\n   also stuff (for good measure) the number 65535 into the BSAM\n   DECB block size field too.  I didn't have to do that, but\n   in the TAPESCAN source, below label READER, where the code does\n   a subtraction of the residual count from the blocksize, since\n   the original code got the blocksize from the DCBBLKSI field of\n   the DCB (which is 32760 and unrealistic), I had to substitute a\n   flat 65535 for the blocksize in that subtraction.\n\n   Halfword arithmetic was eliminated from the entire program, as\n   follows:  A workarea was defined as a fullword, and cleared to\n   binary zeros.  Then the first two byte quantity was moved with\n   a MVC instruction for 2 bytes, into the low order 2 bytes of the\n   fullword.  The entire fullword, with zeroes in the upper 2 bytes\n   and the full 16-byte quantity in the lower 2 bytes, was then\n   loaded into a register, and fullword numeric operations were\n   performed.  There were S instead of SH, and C instead of CH,\n   usually.\n\n   Please note that the Store Halfword (STH) instruction stores the\n   entire 2-byte quantity, but the Load Halfword (LH) instruction\n   does not.  They are NOT opposites, as L and ST are for fullwords.\n   Therefore all of the STH instructions involving 2-byte numeric\n   quantities, could be kept, as is.\n\n   In this version, I've also forced tape units that are defined as\n   3400-6 (which in former times could be either 1600 bpi or 6250)\n   to default to DEN=4 (6250 bpi).  There aren't very many 1600\n   bpi tape drives (or 6250 for that matter) around any more.\n\nNote for TAPESCAN.  01/11/95   Version 4.5      (Sam Golob)\n\n   This is just to mention that I've tried to remove an annoying\n   aspect of using TAPESCAN, in that footage measures for cartridges\n   were being displayed as if they were DEN=2 (800 bpi).  The numbers\n   generated were unduly large, and hard to relate to.  I simply made\n   an attempt to fool the program into thinking cartridges were DEN=4\n   (6250 bpi), which generates footage numbers that are more\n   \"realistic\" to most of us.  I have not attempted to put 38000 bpi\n   code into this program.  For me, it's better to relate the numbers\n   to \"6250 tape\" footages.  If you are actually reading a cartridge,\n   the word CART appears at end of processing in several places.\n\n   Also included is the previous version of this program in case\n   I've inadventently messed something up.\n\n   This program has been linkedited with a routine called \"JULIAN\"\n   that can be found elsewhere on the CBT Tape.  However, I've put\n   an object deck and a disassembly for this module here, to make\n   your life (hopefully) easier.\n\n        Sam Golob    P.O. Box 906    Tallman, NY 10982-0906\n\n\n   Address of NaSPA:         (this has nothing to do with anything)\n        NaSPA  414-768-8000   7044 S. 13th Street\n                              Oak Creek, WI 53154-1429\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE102": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x99\\x08?\\x01\\x00\\x17O\\x16S\\x002\\x00)\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2000-06-22T16:53:00", "lines": 50, "newlines": 41, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 102 is the TAPESCAN program, from Frank Pajerski of       *   FILE 102\n//*           Sacramento, California, and fixed to handle tapes     *   FILE 102\n//*           that have up to 64K blocks of data, by Sam Golob.     *   FILE 102\n//*                                                                 *   FILE 102\n//*            email:  fpajerski@earthlink.net                      *   FILE 102\n//*                    \"Pajerski, Frank\" <fpajerski@calfarm.com>    *   FILE 102\n//*                                                                 *   FILE 102\n//*            email:  sbgolob@attglobal.net or sbgolob@aol.com     *   FILE 102\n//*                                                                 *   FILE 102\n//*           ABSTRACT - A PROGRAM TO PROVIDE AN OVERVIEW OF THE    *   FILE 102\n//*                      DATA SETS ON A TAPE, COPY FILES AND        *   FILE 102\n//*                      RECOVER DATA PAST THE FIRST END OF         *   FILE 102\n//*                      VOLUME INDICATOR.  INFORMATION PRESENTED   *   FILE 102\n//*                      INCLUDES RECORD AND BYTE COUNT, LENGTH     *   FILE 102\n//*                      ESTIMATE, DISPLAY OF THE FIRST 100 BYTES   *   FILE 102\n//*                      OF THE FIRST FOUR RECORDS OF EACH DATA     *   FILE 102\n//*                      SET, AND THE PHYSICAL TAPE FILE NUMBER.    *   FILE 102\n//*                                                                 *   FILE 102\n//*           WARNINGS - WHEN DATA IS RECOVERED PAST THE END OF     *   FILE 102\n//*                      VOLUME INDICATOR, THE FIRST RECORD MAY     *   FILE 102\n//*                      HAVE BEEN TRUNCATED.  IF ACCEPTED, IT      *   FILE 102\n//*                      MAY LEAD TO PROBLEMS EVEN AFTER IT IS      *   FILE 102\n//*                      COPIED.  WHEN COPYING DATA SETS FROM A     *   FILE 102\n//*                      STANDARD LABEL TAPE, THE DATA SET          *   FILE 102\n//*                      SEQUENCE NUMBER STORED IN THE HEADER       *   FILE 102\n//*                      RECORD ISN'T CHANGED.  THIS HAS CAUSED     *   FILE 102\n//*                      NO PROBLEMS SO FAR, BUT IS NOT SUPPORTED   *   FILE 102\n//*                      BY IBM.  SOME OPERATIONS OF THIS PROGRAM   *   FILE 102\n//*                      ARE BASED ON THE NUMBER OF TAPE MARKS      *   FILE 102\n//*                      ENCOUNTERED.                               *   FILE 102\n//*                                                                 *   FILE 102\n//*           TAPESCAN'S REPORTING HAS NOW (VERSION 5.2) BEEN       *   FILE 102\n//*           IMPROVED WHEN READING CARTRIDGES.  I AM ALSO          *   FILE 102\n//*           INCLUDING THE OLDER VERSION (4.6A), JUST IN CASE.     *   FILE 102\n//*           VERSION 4.6A CAN READ CARTRIDGES, BUT REPORTS         *   FILE 102\n//*           THE FOOTAGES AS IF 6250 BPI TAPES.                    *   FILE 102\n//*                                                                 *   FILE 102\n//*    ABOUT TAPESCAN VERSION 5.2 -                                 *   FILE 102\n//*                                                                 *   FILE 102\n//*    I've now included my 64K fix to Frank Pajerski's update      *   FILE 102\n//*    to Howard Dean's version of TAPESCAN.  This version has      *   FILE 102\n//*    better 3480 support, and I also improved the report line     *   FILE 102\n//*    if you mounted a tape with a different VOLSER than the JCL   *   FILE 102\n//*    said.  The report now shows both VOLSERs, so you can see     *   FILE 102\n//*    them.  This version is called TAPESCAN Version 5.2.          *   FILE 102\n//*    Old Version 4.6 is being included for reference, and it      *   FILE 102\n//*    has also been fixed to show the JCL VOLSER and the internal  *   FILE 102\n//*    VOLSER that is on the VOL1 label of the tape, if they are    *   FILE 102\n//*    different.     (SG 06/00)                                    *   FILE 102\n//*                                                                 *   FILE 102\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JULIAN": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x01\\x0f\\x00\\x95\\x01\\x0f\\x19T\\x00\\x94\\x00\\x94\\x00\\x00\\xc7\\xd6\\xd3\\xd6\\xc2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-01-10T00:00:00", "modifydate": "1995-01-10T19:54:00", "lines": 148, "newlines": 148, "modlines": 0, "user": "GOLOB"}, "text": "//TAPESCAN  EXEC REASMLNK,OUTPUT='??REASM.OUTPUT',          <=== CHANGE\n//  PARM.LKED='NCAL,MAP,LIST,LET'\n//ASM.SYSIN   DD *\nJULIAN   CSECT                                                     0000  002688\n         B     26(,R15)                47F0 F01A        *.00.*     0000  002688\n         CLR   R13,R1                  15D1             *.J*       0004  00268C\n         DC    C'ULIAN-07'             E4D3C9C1D560F0F7 *ULIAN-07* 0006  00268E\n         DC    C'/21/88-2'             61F2F161F8F860F2 */21/88-2* 000E  002696\n         DC    C'0.11'                 F04BF1F1         *0.11*     0016  00269E\n         STM   R14,R12,12(R13)         90EC D00C        *..}.*     001A  0026A2\n         LR    R12,R15                 18CF             *..*       001E  0026A6\n         LR    R2,R1                   1821             *..*       0020  0026A8\n         NOPR  R0                      0700             *..*       0022  0026AA\n         BAL   R1,112(,R12)            4510 C070        *..{.*     0024  0026AC\n         DC    X'0000000000000000'     0000000000000000 *........* 0028  0026B0\n         DC    X'0000000000000000'     0000000000000000 *........* 0030  0026B8\n         DC    X'0000000000000000'     0000000000000000 *........* 0038  0026C0\n         DC    X'0000000000000000'     0000000000000000 *........* 0040  0026C8\n         DC    X'0000000000000000'     0000000000000000 *........* 0048  0026D0\n         DC    X'0000000000000000'     0000000000000000 *........* 0050  0026D8\n         DC    X'0000000000000000'     0000000000000000 *........* 0058  0026E0\n         DC    X'0000000000000000'     0000000000000000 *........* 0060  0026E8\n         DC    X'0000000000000000'     0000000000000000 *........* 0068  0026F0\n         ST    R1,8(,R13)              5010 D008        *&.}.*     0070  0026F8\n         ST    R13,4(,R1)              50D0 1004        *&}..*     0074  0026FC\n         LR    R13,R1                  18D1             *.J*       0078  002700\n         LR    R1,R2                   1812             *..*       007A  002702\n         LM    R2,R3,0(R1)             9823 1000        *q...*     007C  002704\n         SLR   R9,R9                   1F99             *.r*       0080  002708\n         LTR   R3,R3                   1233             *..*       0082  00270A\n         BM    144(,R12)               4740 C090        *. {.*     0084  00270C\n         L     R9,8(,R1)               5890 1008        *....*     0088  002710\n         MVI   0(R9),C'0'              92F0 9000        *k0..*     008C  002714\n         PACK  512(8,R12),0(2,R3)      F271 C200 3000   *2.B...*   0090  002718\n         CVB   R4,512(,R12)            4F40 C200        *| B.*     0096  00271E\n         SR    R5,R5                   1B55             *..*       009A  002722\n         CR    R4,R5                   1945             *..*       009C  002724\n         BE    314(,R12)               4780 C13A        *..A.*     009E  002726\n         LA    R5,12                   4150 000C        *.&..*     00A2  00272A\n         CR    R4,R5                   1945             *..*       00A6  00272E\n         BH    298(,R12)               4720 C12A        *..A.*     00A8  002730\n         SLL   R4,1                    8940 0001        *i ..*     00AC  002734\n         PACK  520(8,R12),2(2,R3)      F271 C208 3002   *2.B...*   00B0  002738\n         PACK  528(8,R12),4(2,R3)      F271 C210 3004   *2.B...*   00B6  00273E\n         CVB   R5,520(,R12)            4F50 C208        *|&B.*     00BC  002744\n         DP    528(8,R12),564(1,R12)   FD70 C210 C234   *..B.B.*   00C0  002748\n         L     R6,532(,R12)            5860 C214        *.-B.*     00C6  00274E\n         N     R6,556(,R12)            5460 C22C        *.-B.*     00CA  002752\n         BZ    218(,R12)               4780 C0DA        *..{.*     00CE  002756\n         AH    R5,568(R4,R12)          4A54 C238        *\u00a2.B.*     00D2  00275A\n         B     222(,R12)               47F0 C0DE        *.0{.*     00D6  00275E\n         AH    R5,596(R4,R12)          4A54 C254        *\u00a2.B.*     00DA  002762\n         CVD   R5,536(,R12)            4E50 C218        *+&B.*     00DE  002766\n         UNPK  2(3,R2),536(8,R12)      F327 2002 C218   *3...B.*   00E2  00276A\n         OI    4(R2),C'0'              96F0 2004        *o0..*     00E8  002770\n         MVC   0(2,R2),4(R3)           D201 2000 3004   *K.....*   00EC  002774\n         LTR   R9,R9                   1299             *.r*       00F2  00277A\n         BZ    298(,R12)               4780 C12A        *..A.*     00F4  00277C\n         PACK  528(8,R12),0(2,R2)      F271 C210 2000   *2.B...*   00F8  002780\n         CVB   R4,528(,R12)            4F40 C210        *| B.*     00FE  002786\n         LR    R5,R4                   1854             *..*       0102  00278A\n         BCTR  R5,R0                   0650             *.&*       0104  00278C\n         SRL   R5,2                    8850 0002        *h&..*     0106  00278E\n         AR    R5,R4                   1A54             *..*       010A  002792\n         PACK  536(8,R12),2(3,R2)      F272 C218 2002   *2.B...*   010C  002794\n         CVB   R4,536(,R12)            4F40 C218        *| B.*     0112  00279A\n         AR    R5,R4                   1A54             *..*       0116  00279E\n         SLR   R4,R4                   1F44             *..*       0118  0027A0\n         D     R4,552(,R12)            5D40 C228        *) B.*     011A  0027A2\n         LA    R4,1(,R4)               4140 4001        *.  .*     011E  0027A6\n         STC   R4,0(R9)                4249 0000        *....*     0122  0027AA\n         OI    0(R9),C'0'              96F0 9000        *o0..*     0126  0027AE\n         L     R13,4(,R13)             58D0 D004        *.}}.*     012A  0027B2\n         LM    R14,R12,12(R13)         98EC D00C        *q.}.*     012E  0027B6\n         MVI   12(R13),X'FF'           92FF D00C        *k.}.*     0132  0027BA\n         SLR   R15,R15                 1FFF             *..*       0136  0027BE\n         BR    R14                     07FE             *..*       0138  0027C0\n         PACK  536(8,R12),2(3,R2)      F272 C218 2002   *2.B...*   013A  0027C2\n         CVB   R4,536(,R12)            4F40 C218        *| B.*     0140  0027C8\n         CR    R4,R5                   1945             *..*       0144  0027CC\n         BE    442(,R12)               4780 C1BA        *..A.*     0146  0027CE\n         PACK  528(8,R12),0(2,R2)      F271 C210 2000   *2.B...*   014A  0027D2\n         LA    R5,24                   4150 0018        *.&..*     0150  0027D8\n         L     R6,548(,R12)            5860 C224        *.-B.*     0154  0027DC\n         SR    R7,R7                   1B77             *..*       0158  0027E0\n         DP    528(8,R12),564(1,R12)   FD70 C210 C234   *..B.B.*   015A  0027E2\n         L     R8,532(,R12)            5880 C214        *..B.*     0160  0027E8\n         N     R8,556(,R12)            5480 C22C        *..B.*     0164  0027EC\n         BZ    422(,R12)               4780 C1A6        *..Aw*     0168  0027F0\n         CH    R4,568(R5,R12)          4945 C238        *..B.*     016C  0027F4\n         BH    376(,R12)               4720 C178        *..A.*     0170  0027F8\n         BXH   R5,R6,364(R12)          8656 C16C        *f.A%*     0174  0027FC\n         SH    R4,568(R5,R12)          4B45 C238        *..B.*     0178  002800\n         SRL   R5,1                    8850 0001        *h&..*     017C  002804\n         CVD   R5,512(,R12)            4E50 C200        *+&B.*     0180  002808\n         CVD   R4,520(,R12)            4E40 C208        *+ B.*     0184  00280C\n         UNPK  0(2,R3),512(8,R12)      F317 3000 C200   *3...B.*   0188  002810\n         OI    1(R3),C'0'              96F0 3001        *o0..*     018E  002816\n         UNPK  2(2,R3),520(8,R12)      F317 3002 C208   *3...B.*   0192  00281A\n         OI    3(R3),C'0'              96F0 3003        *o0..*     0198  002820\n         MVC   4(2,R3),0(R2)           D201 3004 2000   *K.....*   019C  002824\n         B     242(,R12)               47F0 C0F2        *.0{2*     01A2  00282A\n         CH    R4,596(R5,R12)          4945 C254        *..B.*     01A6  00282E\n         BH    434(,R12)               4720 C1B2        *..A.*     01AA  002832\n         BXH   R5,R6,422(R12)          8656 C1A6        *f.Aw*     01AE  002836\n         SH    R4,596(R5,R12)          4B45 C254        *..B.*     01B2  00283A\n         B     380(,R12)               47F0 C17C        *.0A@*     01B6  00283E\n         LA    R1,2                    4110 0002        *....*     01BA  002842\n         SVC   11      TIME            0A0B             *..*       01BE  002846\n         SR    R6,R6                   1B66             *..*       01C0  002848\n         LR    R5,R1                   1851             *..*       01C2  00284A\n         N     R1,560(,R12)            5410 C230        *..B.*     01C4  00284C\n         ST    R6,536(,R12)            5060 C218        *&-B.*     01C8  002850\n         ST    R1,540(,R12)            5010 C21C        *&.B.*     01CC  002854\n         SRL   R5,12                   8850 000C        *h&..*     01D0  002858\n         ST    R6,528(,R12)            5060 C210        *&-B.*     01D4  00285C\n         ST    R5,532(,R12)            5050 C214        *&&B.*     01D8  002860\n         OI    535(R12),X'0F'          960F C217        *o.B.*     01DC  002864\n         UNPK  2(3,R2),536(8,R12)      F327 2002 C218   *3...B.*   01E0  002868\n         OI    4(R2),C'0'              96F0 2004        *o0..*     01E6  00286E\n         UNPK  0(2,R2),528(8,R12)      F317 2000 C210   *3...B.*   01EA  002872\n         OI    1(R2),C'0'              96F0 2001        *o0..*     01F0  002878\n         CVB   R4,536(,R12)            4F40 C218        *| B.*     01F4  00287C\n         B     336(,R12)               47F0 C150        *.0A&*     01F8  002880\n         DC    X'0000000000000000'     0000000000000000 *........* 01FC  002884\n         DC    X'0000000000000000'     0000000000000000 *........* 0204  00288C\n         DC    X'0000000000000000'     0000000000000000 *........* 020C  002894\n         DC    X'0000000000000000'     0000000000000000 *........* 0214  00289C\n         DC    X'0000000000000002'     0000000000000002 *........* 021C  0028A4\n         DC    X'FFFFFFFE00000007'     FFFFFFFE00000007 *........* 0224  0028AC\n         DC    X'000000F00000FFFF'     000000F00000FFFF *...0....* 022C  0028B4\n         MH    R0,0                    4C00 0000        *<...*     0234  0028BC\n         DC    X'00000000001F003B'     00000000001F003B *........* 0238  0028C0\n         DC    X'005A0078009700B5'     005A0078009700B5 *.!...p..* 0240  0028C8\n         DC    X'00D400F301110130'     00D400F301110130 *.M.3....* 0248  0028D0\n         DC    X'014E000000000000'     014E000000000000 *.+......* 0250  0028D8\n         DC    X'001F003C005B00',C'`'  001F003C005B0079 *.....$.`* 0258  0028E0\n         DC    X'009800B600D500',C'4'  009800B600D500F4 *.q...N.4* 0260  0028E8\n         DC    X'01120131014F0000'     01120131014F0000 *.....|..* 0268  0028F0\n         REGEQU\n         END\n//LKED.SYSLIN  DD *\n INCLUDE SYSLIBX\n ORDER   TAPESCAN,JULIAN\n SETSSI  CE390102\n SETCODE AC(1)\n ENTRY   TAPESCAN\n NAME    TAPESCAN(R)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JULOBJ": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x01\\x0f\\x00\\x95\\x01\\x0f\\x19X\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc7\\xd6\\xd3\\xd6\\xc2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-01-10T00:00:00", "modifydate": "1995-01-10T19:58:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "GOLOB"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "REASMLNK": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x94\\x14?\\x00\\x94\\x14?\\x158\\x00\\x11\\x00\\x10\\x00\\x03\\xc7\\xd6\\xd3\\xd6\\xc2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1994-05-23T00:00:00", "modifydate": "1994-05-23T15:38:00", "lines": 17, "newlines": 16, "modlines": 3, "user": "GOLOB"}, "text": "//ASM    EXEC  PGM=IEV90,REGION=4096K,\n//             PARM=(DECK,NOOBJECT,NORLD,RENT,TERM,'XREF(SHORT)')\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(MOD,PASS),DSN=&&X,\n//             DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR,DCB=BLKSIZE=32000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//LKED   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR,LET,NCAL',COND=(0,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIBX  DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=&OUTPUT\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REASMLNN": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\"/\\x00\\x99\"/\\x11D\\x00\\x12\\x00\\x12\\x00\\x01\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-08-10T00:00:00", "modifydate": "1999-08-10T11:44:00", "lines": 18, "newlines": 18, "modlines": 1, "user": "SBGOLOB"}, "text": "//REASMLNK PROC\n//ASM    EXEC  PGM=ASMA90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,RENT,TERM,'XREF(SHORT)')\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(MOD,PASS),DSN=&&X,\n//             DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR,DCB=BLKSIZE=23440\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//LKED   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR,LET,NCAL',COND=(0,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIBX  DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=&OUTPUT\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//       PEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TAPESCAN": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x05\\x02\\x00\\x00\\x01\\x00\\x17?\\x01\\x00\\x17?\\x18%\\x08\\xe8\\x08\\xe0\\x04'\\xe6\\xe2\\xc2\\xc7@@@@@@\"", "ispf": {"version": "05.02", "flags": 0, "createdate": "2000-06-21T00:00:00", "modifydate": "2000-06-21T18:25:00", "lines": 2280, "newlines": 2272, "modlines": 1063, "user": "WSBG"}, "text": "TSCN     TITLE 'TAPESCAN 5.2 - TAPE SCAN AND COPY UTILITY'\n*\n*----------------------------------------------------------------------\n*\n* ABSTRACT - A PROGRAM TO PROVIDE AN OVERVIEW OF THE DATA SETS ON A\n*            TAPE, COPY FILES AND RECOVER DATA PAST THE FIRST END OF\n*            VOLUME INDICATOR.  INFORMATION PRESENTED INCLUDES RECORD\n*            AND BYTE COUNT, LENGTH ESTIMATE, DISPLAY OF THE FIRST 100\n*            BYTES OF THE FIRST FOUR RECORDS OF EACH DATA SET, AND THE\n*            PHYSICAL TAPE FILE NUMBER.\n*\n* WARNINGS - WHEN DATA IS RECOVERED PAST THE END OF VOLUME INDICATOR,\n*            THE FIRST RECORD MAY HAVE BEEN TRUNCATED.  IF ACCEPTED, IT\n*            MAY LEAD TO PROBLEMS EVEN AFTER IT IS COPIED.  WHEN\n*            COPYING DATA SETS FROM A STANDARD LABEL TAPE, THE DATA SET\n*            SEQUENCE NUMBER STORED IN THE HEADER RECORD ISN'T CHANGED.\n*            THIS HAS CAUSED NO PROBLEMS SO FAR, BUT IS NOT SUPPORTED\n*            BY IBM.  SOME OPERATIONS OF THIS PROGRAM ARE BASED ON THE\n*            NUMBER OF TAPE MARKS ENCOUNTERED.\n*\n* RESTRICTIONS - FOR USE WITH TAPE DATA SETS ONLY.\n*\n* DDNAMES - SYSPRINT - A FILE WHICH CONTAINS THE TAPE OVERVIEW REPORT\n*                      AND ANY I/O ERROR MESSAGES.\n*\n*           INPUT    - THE FILE WHICH REFERENCES THE TAPE TO BE SCANNED\n*                      OR COPIED.\n*\n*           OUTPUT   - IF REQUIRED, WILL CONTAIN THE COPY OF THE DATA\n*                      SETS REQUESTED FROM INPUT.\n*\n* PARAMETERS - ALL THE PARAMETERS ARE KEYWORDS.  THEIR MEANINGS,DEFAULT\n*              VALUES AND KEY WORDS ARE:\n*\n*     COPY      - CREATE A COPY OF THE INPUT DATA SETS, LABELS AND\n*                 TAPE MARKS REQUESTED ON OUTPUT.  THE OUTPUT DD\n*                 STATEMENT MUST BE INCLUDED.  NOCOUNT MAY NOT BE\n*                 SPECIFIED.  BY DEFAULT THE PARAMETER IS ASSUMED\n*                 NOT TO BE IN EFFECT.\n*\n*     EOVMOD    - PLACES THE INPUT DATA TO BE COPIED AFTER THE LAST\n*                 DATA SET ON OUTPUT.  THE OUTPUT DD STATEMENT MUST\n*                 BE INCLUDED.  THIS PARAMETER IMPLIES COPY.  NOCOUNT\n*                 MAY NOT BE SPECIFIED.  BY DEFAULT THE PARAMETER\n*                 IS ASSUMED NOT TO BE IN EFFECT.\n*\n*     ERRLIMN   - THE MAXIMUM NUMBER OF I/O ERRORS ALLOWED BEFORE\n*                 PROCESSING IS TERMINATED IS SPECIFIED BY \"N\".  THE\n*                 DEFAULT IS ERRLIM50.\n*\n*     LISTN     - THE NUMBER OF BLOCKS WHICH HAVE ONE LINE PRODUCED\n*                 SYSPRINT IS SPECIFIED BY \"N\".  THE DEFAULT IS LIST\n*\n*     MAXEOVN   - PROCESSING WILL CONTINUE UNTIL \"N\" END OF VOLUME\n*                 INDICATORS HAVE BEEN FOUND.  PROCESSING WILL STOP\n*                 WHEN EITHER MAXTMN OR MAXEOVN IS EXCEEDED.  THE\n*                 DEFAULT VALUE IS MAXEOV1 AND IF SKIPEOVN IS USED\n*                 THEN MAXEOVN MUST BE ONE GREATER THAN SKIPEOVN.\n*\n*     MAXTMN    - STOP PROCESSING AFTER \"N\" TAPE MARKS HAVE BEEN\n*                 ENCOUNTERED.  THIS WILL NOT GO PAST THE END OF VOLUME\n*                 INDICATOR.  THE DEFAULT IS TO PROCESS TO THE END OF\n*                 THE VOLUME.\n*\n*     NOCOUNT   - TO SAVE I/O TIME THE COUNTING FEATURE MAY BE TURNED\n*                 OFF BY THIS PARAMETER.  THE NUMBER OF PHYSICAL BLOCKS\n*                 THE MAXIMUM, AVERAGE AND MINIMUM BLOCK SIZES, THE\n*                 LENGTH AND THE TOTAL NUMBER OF BYTES PROCESSED WILL\n*                 BE REPORTED.  THIS PARAMETER MAY NOT BE USED WITHCOPY\n*                 OR EOVMOD.  BY DEFAULT THE PARAMETER IS ASSUMED\n*                 NOT TO BE IN EFFECT.\n*\n*     NOHEX     - DO NOT PRODUCE THE HEXADECIMAL EQUIVALENT OF THEFIRST\n*                 FEW LINES ON SYSPRINT.  BY DEFAULT THE PARAMETER\n*                 IS ASSUMED TO BE OFF.\n*\n*     NOLIST    - FUNCTIONS THE SAME AS LIST0.  BY DEFAULT THE\n*                 PARAMETER IS ASSUMED NOT TO BE IN EFFECT.\n*\n*     NOSUMMARY - DO NOT PRODUCE THE SUMMARY OF DATA SETS FOR STANDARD\n*                 LABEL TAPE ON SYSPRINT.  BY DEFAULT THE PARAMETER\n*                 IS ASSUMED NOT TO BE IN EFFECT.\n*\n*     NOVOLSER  - DURING A COPY OPERATION BETWEEM TWO STANDARD LABEL\n*                 TAPES, THE VOLUME HEADER LABEL WILL NOT BE COPIED.\n*                 BY DEFAULT THE PARAMETER IS ASSUMED NOT TO BE IN\n*                 EFFECT.\n*\n*     SKIPEOVN  - PROCESSING WILL START AFTER \"N\" NUMBER OF END OF VOL\n*                 INDICATORS HAVE BEEN ENCOUNTERED.  INSURE THAT MAXEOV\n*                 IS AT LEAST ONE GREATER THAN SKIPEOVN. THE DEFAULT IS\n*                 SKIPEOV0.\n*\n*     SKIPTMN   - START PROCESSING AFTER \"N\" TAPE MARKS HAVE BEEN\n*                 ENCOUNTERED.  PROCESSING WILL NOT START PAST THE END\n*                 OF VOLUME INDICATOR.  WHEN BOTH SKIPTMN AND SKIPEOVN\n*                 ARE SPECIFIED THE MAXIMUM AMOUNT OF SKIPPING IS DONE.\n*                 THE DEFAULT IS SKIPTM0.\n*\n*     VTOC      - FOR A STANDARD LABEL TAPE, PRODUCE ONLY THE VTOC\n*                 REPORT, AND NOT THE SAMPLE DUMP OF EACH FILE.\n*\n* DEFAULT PARAMETERS - LIST4,SKIPTM0,MAXEOV1,SKIPEOV0,ERRLIM50\n*\n* RETURN CODES - THE JOB STEP RETURN CODE IS SET IF TAPESCAN ABNORMALLY\n*                TERMINATES.  THIS MAY BE TESTED BY LATER JOB STEPS AND\n*                THEIR EXECUTION BASED ON TAPESCAN'S SUCCESS.  THE\n*                RETURN CODE IS:\n*\n*                8 - TAPESCAN HAS TERMINATED BEFORE PROCESSING HAS BEEN\n*                    COMPLETED.  THIS IS USUALLY CAUSED BY I/O ERRORS O\n*                    INPUT.\n*\n* EXAMPLE -\n*               COPY THE FOURTH AND FIFTH FILES OF A STANDARD LABEL SEV\n*               TRACK 556 BPI EVEN PARITY TAPE NEEDING TRANSLATION AND\n*               CONVERSION, TO THE SECOND AND THIRD FILES OF A TAPE WHI\n*               HAD ONLY ONE FILE.  DO NOT COPY THE VOLUME HEADER RECOR\n*               OR PRODUCE THE HEXADECIMAL OUTPUT ON SYSPRINT.  LIST TH\n*               FIRST 20 RECORDS OF THE INPUT DATA SETS.  STOP PROCESSI\n*               AFTER 5 I/O ERRORS OCCUR.\n*\n*               //COPYTAPE EXEC PGM=TAPESCAN,PARM=('COPY,NOVOLSER',\n*               //            'EOVMOD,SKIPTM10,MAXTM16,LIST20,NOHEX')\n*               //SYSPRINT DD  SYSOUT=A\n*               //INPUT    DD  UNIT=2400-7,DISP=OLD,DCB=(TRTCH=ET,DEN=1\n*               //             EROPT=ACC),VOL=SER=TRACK7\n*               //OUTPUT   DD  UNIT=2400-4,LABEL=2,VOL=SER=OTPTTP\n*\n* ASM/LINK JCL - -\n*    //TAPESCAN     EXEC ASMHCL  (NO SPECIAL PARMS NEEDED)\n*    //ASM.SYSIN     DD  DISP=SHR,DSN=<SOURCE>(TAPESCAN)\n*    //LKED.SYSLMOD  DD  DISP=SHR,DSN=<LOADLIB>(TAPESCAN)\n*\n*--------------------------------------------------------------------\n*\n* THIS PROGRAM, CALLED TAPESCAN, WAS WRITTEN BY WILL DALAND, SOCIAL\n* SCIENCE STATISTICAL LABORATORY, INSTITUTE FOR RESEARCH IN SOCIAL\n* SCIENCE, UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL, MARCH 1974.\n* SEE IRSS MEMO SSSL-7-3 FOR FURTHER DOCUMENTATION.\n*\n* SINCE PROGRAM FOR TAPESCAN WAS PUBLICALLY FUNDED, PERMISSION IS\n* GRANTED FOR ANYONE TO USE THIS PROGRAM IN WHOLE OR IN PART.  IT\n* IS REQUESTED THAT WHEN DOING SO YOU GIVE CREDIT (PREFERABLY BOTH\n* IN SOURCE AND DOCUMENTATION) TO WILL DALAND, IRSS, UNC@CH.\n*\n* VERSION 3.1 INCLUDES EXPIRATION DATE, AVERAGE BLOCK SIZES, AND VTOC\n* LISTING AND WAS PRODUCED BY C. WRANDLE BARTH, GODDARD SPACE FLIGHT\n* CENTER, JANUARY 1975.\n*\n* VERSION 3.2 CORRECTED VARIOUS BUGS.\n*\n* VERSION 3.3 CHANGED OUTPUT TAPE HANDLING TO USE ONLY EXCP.\n*\n* VERSION 3.4 ADDS 6250 BPI TAPE HANDLING.\n* PLACEMENT OF PROGRAM SECTIONS: INIT CODE, INIT SUBS, INIT VARS,\n* INIT LITS, COMMON ROUTINES, COMMON VARS, COMMON LITS, MAIN CODE,\n* MAIN SUBS, MAIN VARS, MAIN LITS.\n*\n* VERSION 4.0 MAJOR PROGRAM REORGANIZATION AND MODIFICATION BY\n* E. LONG, OCT 78\n*\n*   17FEB79, FRANK PAJERSKI, MEMOREX\n*      . DEFAULT LINE-COUNT SET TO 58\n*      . MAX TAPE BLOCKSIZE REDUCED FROM 32767 TO 32760 BYTES\n*        IN ORDER TO KEEP MVS HAPPY\n*\n*   21AUG81, JOHN J. JACOBY, MEMOREX (VERS. 4.1)\n*      . INTRODUCE THE ABILITY TO PRINT VTOC REPORT ONLY\n*        BY SPECIFYING PARM='VTOC'\n*      . ALL OTHER TAPESCAN FUNCTIONS ARE STILL SUPPORTED IF 'VTOC'\n*        IS SPECIFIED, BUT ONLY THE VTOC, INFORMATIONAL AND ERROR\n*        MESSAGES WILL BE PRINTED.\n*      . INCLUDE 'DATE' CSECT SO EVERYTHING IS IN ONE CSECT.\n*\n*   31AUG81, JOHN J. JACOBY, MEMOREX (VERS. 4.2)\n*      . PRINT THE DD CARD VOLSER IN THE VTOC REPORT IF NL TAPE,\n*        PRINT THE TAPE VOLSER IF SL, AND, IF THE DD CARD AND TAPE\n*        DON'T MATCH, THEN ISSUE A WARNING MESSAGE.\n*\n*   09DEC81, FRANK PAJERSKI, ATARI (VERSION 4.2)\n*      . MINOR ESTHETICS ....\n*\n*   12OCT87, SCOTT BARTH, SIGNETICS (VERSION 4.3)\n*      . ADDED OPTION \"INOUT\" TO OPEN MACRO ON INPUT, THIS WILL\n*        SUPPRESS BLOCK COUNT CHECKING ON D/T 3480'S WHICH WILL\n*        PREVENT S237 RC=C ABEND.\n*\n*   24OCT88, FRANK PAJERSKI, SYNTELLIGENCE (VERSION 4.4)\n*      . MINOR CLEANUP/DELETION OF CIRCA S/360 COMMENTS ... THESE\n*        WERE SO OLD THAT I WAS GETTING TIRED OF EXPLAINING THEM\n*        TO THE YOUNGER FOLKS HERE, AS WELL AS BEING EMBARRASSED.\n*      . THIS STILL RUNS OK UNDER MVS/XA 2.1.7 AND DFP 1.2.  THE\n*        ADDITION OF \"INOUT\" TO HANDLE THE S237 PROBLEM MEANS MESSAGE\n*        IEC510D IF NO TAPE RING IS PRESENT, BUT I CAN LIVE WITH THAT.\n*\n*\n* THIS PROGRAM WAS MODIFIED FOR MVS, JUNE 1978 BY:\n*  STEVE R. HAGGERTY\n*  GTE DATA SERVICES\n*  MARINA DEL REY, CA 90291\n*  (213) 821-0511 EXT. 285\n*\n*  INSTALLED AT UNIONBANC COMPUTER CORPORATION ON 08/25/78\n*  BY HOWARD DEAN (TECHNICAL SERVICES). IF ANY PROBLEMS WITH\n*  THIS PROGRAM ARE ENCOUNTERED, PLEASE CONTACT:\n*\n*   HOWARD M. DEAN\n*   UNION BANK COMPUTER CORPORATION\n*   TECHNICAL SERVICES (8TH FLOOR)\n*   605 W. OLYMPIC BLVD.\n*   LOS ANGELES, CA. 90015\n*   PHONE - (213) 687-5719\n*\n*   WILLIAM J. SMITH\n*   SYNTEX (USA), INC.\n*   3401 HILLVIEW AVENUE\n*   MS A4-CIS\n*   PALO ALTO, CA.  94304\n*   PHONE - (415) 852-1638\n*\n*   LAST ONE TO WORK ON THIS CODE:                             HD DEC86\n*                                                              HD DEC86\n*   HOWARD M. DEAN                                             HD DEC86\n*   SR. SYSTEMS SPECIALIST                                     HD DEC86\n*   AMERICAN PRESIDENT LINES                                   HD DEC86\n*   #3 WATERS PARK DRIVE                                       HD DEC86\n*   SUITE 115                                                  HD DEC86\n*   SAN MATEO, CA 94403                                        HD DEC86\n*   (415) 570-2331                                             HD DEC86\n*                                                              HD DEC86\n* VERSION 3.2 CORRECTED VARIOUS BUGS.\n* VERSION 3.3 CHANGED OUTPUT TAPE HANDLING TO USE ONLY EXCP.\n* VERSION 3.4 CORRECTED FOR USE UNDER MVS REL. 3.7F      *GTEDS LA*SRH*\n* VERSION 3.5 CORRECT BUGS AND ADD LINECNT PARAMETER     *GTEDS LA*HMD*\n* VERSION 4.0 REMOVE 7-TRK CODE AND SUPPORT FOR 3480 CARTS     HD DEC86\n* VERSION 5.0 COMPLETE SUPPORT FOR 3480 CARTRIDGE TAPES        HD JAN89\n         EJECT\n***** H I S T O R Y    L O G **********\n*  08/29/78 - HOWARD M. DEAN\n*  A.  INSTALLED AT UNIONBANC COMPUTER\n*  B.  FINISH SUPPORT FOR 556 BPI TAPE (REMOVED BY S. HAGGERTY)\n*      SEE COMMENT AROUND LABEL TRY556. IF DENSITY IS NOT\n*      FOUND, THIS IS THE DEFAULT\n*\n*  09/15/78 - HOWARD M. DEAN\n*   A.  DENSITY PRINTOUT WRONG ON FIRST PAGE OF LISTING. CHANGED\n*       COPY ROUTINE TO ISSUE SENSE CHANNEL COMMAND BEFORE PRINTING\n*       FIRST HEADING SO DENSITY WILL BE CORRECT.\n*\n*   B.  ADD ROUTINE TO CHECK FOR MAGNETIC TAPE DEVICES ON BOTH\n*       INPUT AND OUTPUT, FOR IDIOTS THAT LIKE TO PLAY AROUND\n*       WITH OTHER PEOPLES OVERSIGHTS.\n*\n*   C.  ADD ROUTINE TO CHECK FOR PRINTABLE OUTPUT VOLSER. IF THE\n*       VOLSER FROM THE JFCB IS PRINTABLE, IT IS PRINTED. IF NOT,\n*       THE UCB IS CHECKED FOR A VOLSER. IF THAT IS PRINTABLE IT\n*       IS PRINTED. IF NOT, THE NAME OUTVOL IS USED. THE DCB VOLSER\n*       OR JFCB VOLSER, WHICHEVER IS VALID IS COMPARED TO THE OUTPUT\n*       TAPE LABEL TO DETERMINE IF THE LABEL IS VALID.\n*       ** H. DEAN  09/78 **\n*\n*  10/30/78 - HOWARD DEAN\n*   A.  ADD ROUTINE TO PRINT ERROR MESSAGE IF EXPDT OR\n*       CREDT IN HDR1 OR EOF1 LABEL IS INVALID.\n*\n*   B.  INDICATE STD TRTCH ON VTOC INSTEAD OF BLANKS.\n*\n*   C.  FIX UNPK INSTRUCTION SO TOTAL COUNT OF BLOCKS READ\n*       WOULD NOT BE TRUNCATED. ADDED 3 DIGITS TO LABEL BYTES.\n*\n*  11/22/78 - HOWARD DEAN\n*   A. MOVE DENSITY SENSE ROUTINE TO AVOID ERROR IN SENSE\n*      PROCESSING FOR 6250 BPI TAPES.\n*\n*   B. SET SENSEBYTS INITIALLY TO 3XL8'00'\n*\n*  01/23/79 - HOWARD DEAN\n*   A. FIX DENSITY PRINT ON FIRST PAGE OF COPY LISTING BY ISSUING\n*      READ COMMAND TO SET MODE BEFORE OUTPUT PROCESSING\n*  04/09/79 - HOWARD DEAN\n*   A. MAKE LINE COUNT A SYMBOLIC PARAMETER\n*   B. MAKE \"LINE\" AN EXEC PARAMETER\n*\n*  01/09/84 - WILLIAM SMITH, SYNTEX (USA), INC., PALO ALTO, CA. 94304\n*   A. CHANGED NAME TO \"SYNTEX\" FOR OBVIOUS REASONS\n*   B. EXECUTED UNDER MVS/SP 1.3.3 PUT 8308 WITH UCC/1 4.7 AND\n*      CGA'S \"TOP SECRET\" SECURITY SYSTEM\n*   C. CREDIT IS HEREBY GIVEN TO A PERSONAL FRIEND, C. WRANDLE BARTH,\n*      FORMERLY OF NASA GODDARD SPACE FLIGHT CENTER, FOR THE WORK HE\n*      DID TO ENHANCE TAPESCAN IN THE MID 1970'S UNDER OS/MVT;  ALL\n*      CHANGES IMPLEMENTED BY RANDY ARE FLAGGED -CWB-\n*\n*  08/23/86 - HOWARD M. DEAN, SYNTEX (USA), INC. PALO ALTO, CA 94304\n*   A. FIX PAGE EJECT ROUTINE IN 'VTOC' LISTING TO CORRECTLY\n*      SPACE WHEN A MULTIPLE PAGE VTOC IS PRINTED.\n*\n*  12/24/86 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. REMOVE ALL VESTIGES OF SEVEN TRACK TAPE SUPPORT\n*   B. ADD MINIMAL SUPPORT FOR 3480 TAPE CARDTRIDGES.\n*   C. USE SYSTEM MACROS WHERE POSSIBLE INSTEAD OF HARDCODED VALUES\n*\n*  11/04/88 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. ADD SUPPORT FOR 3480 TAPE CARTRIDGES - MAKE IT WORK\n*\n*  01/09/89 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. FIX 3480 SUPPORT.\n*   B. ADD OPTIONS LIST AT BEGINNING OF INVOCATION             HD JAN89\n*\n*  04/28/89 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. FIX BUG IN OPTIONS LIST WITH \"NOVOLSER\" OPTION\n*\n**** NOTE: THIS PROGRAM MUST BE LINKED AUTHORIZED FOR MVS\n****       OPERATION. THIS IS NOT A REQUIREMENT IN ANOTHER\n****       OPERATING SYSTEM. ** HMD 05/79 **\n*\n*  FPAJ/18JAN99 --- MERGED TOGETHER TWO VERSIONS OF TAPESCAN\n*                   AND CALLED IT 5.1.  ASM/LINK'ED UNDER MVS 5.2.2.\n*  FPAJ/29OCT99 --- ASM/LINK'ED UNDER OS390R5\n*               --- CHG SYSPRINT BLKSIZE FROM 3458 TO 133\n*\n*  SAM GOLOB    --- ADDED 64K BLOCK SUPPORT FROM MY VERSION 4.6.\n*    06/21/00       CALLED THIS VERSION 5.2.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     OPTIONS IN EFFECT MACRO                         *\n*                                                                     *\n***********************************************************************\n         MACRO\n         OPTN  &C,&CONST,&VALUE\n         LCLA  &N,&P,&P1\n         LCLC  &X,&Y,&Z                                        HD JAN89\n         LCLC  &SANSNO                                         HD JAN89\n&N       SETA  K'&CONST+1\n&P       SETA  &N-2                                            HD JAN89\n&W       SETC  'W'.'&SYSNDX'                                   HD JAN89\n&X       SETC  'X'.'&SYSNDX'                                   HD JAN89\n&Y       SETC  'Y'.'&SYSNDX'                                   HD JAN89\n&Z       SETC  'Z'.'&SYSNDX'                                   HD JAN89\n         AIF   (K'&C EQ 0).SKIP\n.* ASSUME &CONST BEGINS WITH 'NO' IF &C IS NOT EQUAL TO NULLS  HD JAN89\n&SANSNO  SETC  '&CONST'(3,&P)                                  HD JAN89\n         B&C   &X                       NEGATIVE BRANCH        HD JAN89\n         B     &Y                       POSITIVE BRANCH        HD JAN89\n         AGO   .NONUM                                          HD JAN89\n.SKIP    ANOP                                                  HD JAN89\n         AIF   (K'&VALUE EQ 0).ERR01\n         MVC   0(&N,R2),=C',&CONST'\n         L     R1,&VALUE\n         L     R15,=A(DBLWORK)          GET WORK AREA ADDRESS  HD JAN89\n         CVD   R1,0(R15)                CONVERT IN WORK AREA   HD JAN89\n         OI    7(R15),X'0F'             FIX SIGN\n         UNPK  &N.(3,R2),6(2,R15)       UNPACK\n&N       SETA  &N+3                     INCREMENT PAST NUMBER  HD JAN89\n         LA    R2,&N.(R2)               INCREMENT POINTER      HD JAN89\n&W       DS    0H                                              HD JAN89\n         AGO   .MEND                                           HD JAN89\n.NONUM   ANOP                                                  HD JAN89\n&X       DS    0H\n         MVC   0(&N,R2),=C',&CONST'     MOVE NEGATIVE PARM     HD JAN89\n         LA    R2,&N.(R2)               INCREMENT POINTER      HD JAN89\n         B     &Z                       EXIT                   HD JAN89\n&Y       DS    0H                                              HD JAN89\n         MVC   0(&P,R2),=C',&SANSNO'    MOVE POSITIVE PARM     HD JAN89\n         LA    R2,&P.(R2)               INCREMENT POINTER      HD JAN89\n         B     &Z                       EXIT                   HD JAN89\n&Z       DS    0H                                              HD JAN89\n         AGO   .MEND                                           HD JAN89\n.ERR01   MNOTE 12,'VALUE MUST BE SPEIFIED FOR NUMERIC VARIABLE'\n         MEXIT                                                 HD JAN89\n.MEND    ANOP                                                  HD JAN89\n         MEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     INITIALIZATION ROUTINES                         *\n*                                                                     *\n***********************************************************************\n         LCLA  &LINECNT                                    *HMD 04/79*\n&LINECNT SETA  57                                          *HMD 04/79*\nMSECT    DSECT\nTRT1     DS    32D\nBLANKBUF DS    CL136              BLANKS FOR BLANKING MSGBUF FAST\nTRT2     DS    32D\nMSGBUF   DS    CL136\nRECBUF   DS    CL136              MINIMUM ALLOC, MAX ALLOC = 64K\nHOLDBUF  DS    CL136                                           HD AUG86\n         EJECT\nTAPESCAN CSECT\nR0       EQU   0   WORK REG + SYSTEM USES\nR1       EQU   1   WORK REG + SYSTEM USES\nR2       EQU   2   MOSTLY FOR LINKAGE TO PUTLINE & GETNUM\nR3       EQU   3   USED IN PARM SCANNER + VTOC ENTRY POINTER.     -CWB-\nR4       EQU   4   BELOW LABEL 'PROCESS' COUNTS BLKS READ FOLLOWING A  +\n                   TAPEMARK OR THE LOAD POINT.\nR5       EQU   5   WORK, INTERNAL SUBROUTINE LINKAGE\nR6       EQU   6   WORK REG\nR7       EQU   7   WORK REG + LENGTH OF LAST BLK READ\nR8       EQU   8   PARM FIELD LENGTH CTR, TOTAL BYTES ON TAPE CTR\nR9       EQU   9   BASE REG FOR DSECT MSECT\nR10      EQU   10  FREE UNUSED REG\nR11      EQU   11  2ND BASE REG\nR12      EQU   12  1ST BASE REG\nR13      EQU   13\nR14      EQU   14  WORK REG + SYSTEM USES\nR15      EQU   15  WORK REG + SYSTEM USES\nIOBECBPT EQU   4\nIOBSTART EQU   16\nDEBUCBAD EQU   32\n         EJECT\nTAPESCAN CSECT                                              -HMD-\n         USING *,R12              BASE FOR INITIALIZATION ONLY\n         STM   14,12,12(13)\n         LR    R12,R15            R12 = TEMP BASE FOR INITIALIZATION\n         L     R11,=A(EXIT)       PERMANENT BASE FOR MAIN AND COMMON\n         USING EXIT,R11\n         LA    R9,SAVE\n         ST    R9,8(R13)\n         ST    13,SAVE+4\n         LR    R13,R9\n         L     R1,0(R1)           GET PTR TO PARM FIELD\n         LH    R8,0(R1)           LOAD PARM FIELD LENGTH\n         LA    R3,2(R1)           SET PTR TO PARM FIELD CHAR STRING\n         LA    R9,SRCHPRM         LOAD TEMPORARY BASE FOR MSECT DSECT\n         USING MSECT,R9           PERMANENT DECLARATION FOR MSECT BASE\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    SYSPRINT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    EXITRC8\n         GETMAIN VU,LA=GMCTRL,A=GMLOCS\n         L     R9,GMLOCS          THERE IS AT LEAST THE MINIMUM CORE\n*              ABOVE STMT SETS UP PERMANENT BASE FOR MSECT DSECT\n*        MVI   BLANKBUF,C' '           (POSTPONE TIL AFTER CLEAR) -CWB-\n*        MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-\n         LR    R6,R9              START CLEARING GOTTEN MAIN TO        +\n                                  SHORTEN POSSIBLE DUMPS.\n         L     R4,GMLOCS+4        ACTUAL LENGTH OF GOTTEN MAIN\n         LA    R5,256             OFT-USED CONSTANT FOR CLEARING MAIN\nCLOOP    CR    R4,R5              R5 CONTAINS F'256'\n         BNH   LE256              BIF ONLY 256 OR FEWER BYTES LEFT\n         XC    0(256,R6),0(R6)    CLEAR 256 BYTES\n         SR    R4,R5              R5 CONTAINS F'256'\n         AR    R6,R5              R5 CONTAINS F'256'\n         B     CLOOP\nLE256    BCTR  R4,0               SET TO MACHINE LENGTH\n         EX    R4,XCLEAR          CLEAR LAST 1 TO 256 BYTES\nXCLEAR   XC    0(0,R6),0(R6)      EXECUTED IN STMT ABOVE\n         MVI   BLANKBUF,C' '           CLEAR BLANK AREA.          -CWB-\n         MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-\n         LA    R1,MSGBUF+46       FOR ADDRESS CONSTANT IN DYNAMIC -CWB-\n         ST    R1,AMSGBP46        STORAGE.                        -CWB-\n         LA    R1,MSGBUF+72       SECOND ADCON.                   -CWB-\n         ST    R1,AMSGBP72                                        -CWB-\n         LA    R15,RECBUF         POINT THE WRITE\n         O     R15,WRTCMND        CCW TO DYNAMICALLY\n         ST    R15,WRTCMND        ALLOCATED RECORD BUFFER.\n         LA    R15,RECBUF         SET FILE SEARCH CCW TO\n         O     R15,READ81CM       POINT TO\n         ST    R15,READ81CM\n         LA    R15,RECBUF         INSERT POINTER IN               -CWB-\n         O     R15,READCMND            READ COMMAND.              -CWB-\n         ST    R15,READCMND                                       -CWB-\n         LR    R5,R9              PTR TO TRT1\n         LA    R6,16\n         LA    R7,CTABLE\nSETUPTR1 MVC   0(1,5),0(7)        MOVE SEED CHAR INTO TRT1\n         MVC   1(15,5),0(5)       AND PROPAGATE IT\n         LA    5,16(5)\n         LA    7,1(7)\n         BCT   6,SETUPTR1\n         MVC   TRT2(16),CTABLE    MOVE 16 CHAR SEED INTO TRT2\n         MVC   TRT2+16(240),TRT2  AND PROPAGATE IT 15 TIMES\n         TIME  DEC                GET DATE IN R1 IN FORM 00YYJJJF\n         ST    R0,BADLNGTH        SAVE TIME WHILE YOU'RE AT IT\n         LR    R2,R1              PUT IN R2 TO PASS TO DATE SUBROUTINE\n         LA    R1,=A(DATERSLT)    PTR TO PTR TO DATE'S RESULT FIELD\n         L     R15,=V(DATE)       IRSS DATE SUBROUTINE (DATECONV)\n         BALR  R14,R15            CONVERT 00YYJJJF TO MM/DD/YY\n         ED    TIMERSLT,BADLNGTH  EDIT INTO PAGE HEADER LINE BUFFER\n*        SR    R0,R0              SET TO AVOID RESERVING ANY LINES\n*        BAL   R2,PAGECHK         PRINT PAGE HEADER\n         DEVTYPE INPUT+40,DTYPE   CHECK TO SEE IF TAPE DEVICE     -HMD-\n         LTR   R15,R15            DID WE FIND DD STATEMENT?       -HMD-\n         BNZ   NOINPUT            NOPE                            -HMD-\n         CLI   DTYPE+2,X'80'      IS THIS A TAPE DEVICE?          -HMD-\n         BNE   NOTTAPEI           NOPE                            -HMD-\n         RDJFCB (INPUT)           READ INPUT TAPE'S JFCB\n         LTR   R15,R15            SEE IF DD STATEMENT THERE\n         BNE   NOINPUT            EXIT WITH ERR MSG IF NOT\n         MVC   DDVOL,JFCBINX+(JFCBVOLS-JFCB) PUT VOL INTO PAGE HEAD.\n         MVC   JFCLTSV,JFCBINX+(JFCBLTYP-JFCB) SAVE INPUT LABEL TYPE\n         TM    JFCLTSV,X'01'      SEE IF NL OR LTM SPECIFIED\n         BO    *+8                IF IT WAS THEN LEAVE IT AS IT IS\n         MVI   JFCBINX+(JFCBLTYP-JFCB),JFCBLP ELSE SET TO BLP\n         MVC   JFCBINX+JFCBFLSQ-JFCB(2),=H'1' SET FILE SEQ. NO. TO = 1\n         OPEN  (INPUT,INOUT),TYPE=J                            HD OCT88\n         TM    INPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOINPUT            TERMINAL ERROR\n         L     R1,INPUT+(DCBEODAD-IHADCB) GET CORRECT EODAD       -HMD-\n         ST    R1,EODADDR         SAVE FOR EXCP ROUTINE           -HMD-\n         L     R1,GMCTRL+4        LOAD MAXIMUM REQUESTED GETMAIN LENGTH\n         S     R1,GMLOCS+4        SUBTRACT LENGTH ACTUALLY GOTTEN\n         BZ    SENSLDPT           BIF GOT ALL CORE REQUESTED\n* ---- CUT OUT THE SHENANIGANS AND DON'T RUN CRIPPLED ------------ *\n         CVD   R1,BADLNGTH        CONVERT DIFERENCE TO PACKED DECIMAL\n         UNPK  MORECORE+33(5),BADLNGTH\n         OI    MORECORE+37,C'0'\n*        LH    R2,INPUT+(DCBBLKSI-IHADCB) TO PREVENT DATA 'OVERRUNS'\n*        SR    R2,R1              SUBTRACT DIFFERENCE OF MORE CORE\n*        STH   R2,INPUT+(DCBBLKSI-IHADCB) AND PUT BACK IN DCB\n* ---------------------------------------------------------------- *\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'MORECORE),MORECORE\n         B     EXITRC8\nSENSLDPT LA    R1,=AL3(SENSCMND)  SET UP PTR FOR EXECEXCP CALL\n         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL\n         BAL   R4,EXECEXCP        CALL EXCP SUBROUTINE\n         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED\n         BO    SENSTYP            BIF LOAD POINT SENSED           -HMD-\n         LA    R1,=AL3(RWNDCMND)  REWIND AND RE-SENSE COMMAND CHAIN\n         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL\n         BAL   R4,EXECEXCP\n         TM    SENSBYTS+1,X'08'   SEE IF NOW AT LOAD POINT\n         BO    SENSTYP            BIF AT LOAD POINT               -HMD-\nLDPTERR  BAL   R2,PUTLINE         PRINT ERROR MESSAGE             -HMD-\n         MVC   MSGBUF(66),=C'0UNABLE TO REWIND INPUT TAPE TO LOAD POINT+\n                - TERMINATING EXECUTION'\n         B     EXITRC8\nSENSTYP  DS    0H                 SENSE DENSITY OF TAPE           -HMD-\n         LA    R1,HDEOD           FAKE EOD ADDRESS                -HMD-\n         ST    R1,EODADDR         SAVE EOD ADDRESS FOR EXECEXCP   -HMD-\n         LA    R1,=AL3(READCMND)  READ TO SET UP SENSE BYTES      -HMD-\n         LA    R2,INPUT           POINT TO DCB                    -HMD-\n         BAL   R4,EXECEXCP        GO DO EXCP                      -HMD-\nHDEOD    LA    R1,=AL3(SENSCMND)  REWIND TO LOAD POINT            -HMD-\n         LA    R2,INPUT           POINT TO INPUT DCB              -HMD-\n         XC    SENSBYTS(24),SENSBYTS                              -HMD-\n         BAL   R4,EXECEXCP        ISSUE EXCP                      -HMD-\nRESTREOD L     R1,INPUT+(DCBEODAD-IHADCB) GET EOD ADDRESS         -HMD-\n         ST    R1,EODADDR         SAVE FOR FUTURE USE             -HMD-\n         L     R2,(DCBDEBAD-IHADCB)+INPUT GET \"DEB\" ADDRESS    HD NOV86\n         L     R2,DEBUCBAD(R2)    GET \"UCB\" ADDRESS            HD NOV86\n         TM    UCBTBYT4-UCBOB(R2),UCB3480                      HD NOV86\n         BO    HD3480             FLAG HEADER IF 3480 DEVICE   HD NOV86\n         TM    SENSBYTS+3,4       P.E.= 1600 B.P.I?               -HMD-\n         BZ    HD6250             NO, TRY 6250                    -HMD-\n         MVI   TAPEDENS,C'3'      SET DENS FOR 1600 BPI           -HMD-\n         MVC   PRTDENS(4),=CL4'1600'   SET PRINT DENS FOR 1600    -HMD-\n         B     HDEND              HEADING END                     -HMD-\nHD6250   L     R2,(DCBDEBAD-IHADCB)+INPUT GET INPUT DEB ADDR.     -HMD-\n         L     R2,DEBUCBAD(R2)    GET UCB ADDRESS                 -HMD-\n         TM    16(R2),2           UCBTYP = 6250?                  -HMD-\n         BNO   HD800              NOPE, TRY 800 BPI               -HMD-\n         MVI   TAPEDENS,C'4'      SET DEN FOR 6250 BPI            -HMD-\n         MVC   PRTDENS(4),=CL4'6250'  SET PRINT FOR 6250          -HMD-\n         B     HDEND                                              -HMD-\nHD3480   MVI   TAPEDENS,C'5'      SELECT DENSITY=5             HD JAN89\n         MVC   PRTDENS(4),=CL4' 38K'                           HD JAN89\n         L     R1,=A(FLAG3480)    LOAD ADDRESS OF FLAG         HD NOV86\n         MVI   0(R1),C'Y'         INDICATE 3480 DEVICE         HD NOV86\n         B     HDEND              CONTINUE WITH PROGRAM        HD NOV86\nHD800    TM    INPUT+(DCBDEN-IHADCB),B'10000011' 800 BPI?         -HMD-\n         MVI   TAPEDENS,C'2'      SET DEN FOR 800 BPI             -HMD-\n         MVC   PRTDENS(4),=CL4' 800'  SET PRINT FOR 800 BPI       -HMD-\n         B     HDEND              END OF ROUTINE                  -HMD-\nHDEND    DS    0H                 ENOUGH OF ALL THIS NONSENSE     -HMD-\n         LA    R1,=AL3(RWNDCMND)  REWIND TO LOAD POINT            -HMD-\n         LA    R2,INPUT           GET INPUT ADDRESS               -HMD-\n         BAL   R4,EXECEXCP        GO DO IT                        -HMD-\nREWOUND  TM    SENSBYTS+1,X'08'   ARE WE AT LOAD POINT NOW?       -HMD-\n         BZ    LDPTERR            NO, INDICATE LOAD ERROR         -HMD-\nSRCHPRM  LTR   R8,R8              LOAD AND TEST REMAINING PARM LENGTH\n         BNH   ENDPARMS\n         SR    R5,R5              ZERO CURRENT PARM LENGTH COUNTER\n         LR    R4,R3              SAVE PTR TO START OF PARM\nSRCHCOMA CLI   0(R3),C','\n         LA    R3,1(R3)           BUMP PTR TO NEXT CHAR\n         BE    GOTCOMMA\n         LA    5,1(5)             COUNTS LENGTH OF CURRENT PARM\n         BCT   R8,SRCHCOMA\nGOTCOMMA CLC   0(6,R4),=C'NOLIST' GET HERE IF COMMA OR END OF PARM LIST\n         BE    NOLIST\n         CLC   0(4,4),=C'LIST'\n         BE    LIST\n         CLC   0(5,4),=C'MAXTM'   INITIALLY 32760           FJP/20FEB79\n         BE    MAXTM\n         CLC   0(6,4),=C'SKIPTM'\n         BE    SKIPTM\n         CLC   0(5,4),=C'NOHEX'\n         BE    NOHEX\n         CLC   0(6,4),=C'MAXEOV'                               HD JUN94\n         BE    MAXEOV\n         CLC   0(7,4),=C'SKIPEOV'\n         BE    SKIPEOV\n         CLC   0(9,4),=C'NOSUMMARY'\n         BE    NOSUMARY\n         CLC   0(5,4),=C'COUNT'\n         BE    COUNT\n         CLC   0(7,4),=C'NOCOUNT'\n         BE    NOCOUNT\n         CLC   0(6,4),=C'ERRLIM'\n         BE    ERRLIM\n         CLC   0(4,4),=C'COPY'\n         BE    COPY               TAPE COPYING OPTION\n         CLC   0(6,4),=C'EOVMOD'  MOD OPTION IMPLIES COPY & COUNT OPTNS\n         BE    EOVMOD\n         CLC   0(8,4),=C'NOVOLSER'\n         BE    NOVOLSER\n         CLC   0(3,4),=C'OPT'\n         BE    OPT                MISCELLANEOUS OPTIONS\n         CLC   0(4,4),=C'LINE'    LINE COUNT OPTION        *HMD 04/79*\n         BE    LINE                                        *HMD 04/79*\n         CLC   0(4,4),=C'VTOC'                                  MRX-JJJ\n         BE    VTOCONLY                                         MRX-JJJ\nUNRECOG  BAL   R2,PUTLINE\n         MVC   MSGBUF(33),=C'0ERROR - UNRECOGNIZABLE PARAMETER'\nPRLENERR BAL   2,PUTLINE\n         MVC   MSGBUF(32),=C'0WARNING - INVALID PARM IGNORED.'\nSRCHPARM BCTR  R8,0\n         B     SRCHPRM\nGETNUM   DS    0H                 CHAR STRNG INTGR TO BIN INTGR CONV SB\n         SR    6,6                CLEAR ACCUMULATOR\n         CLI   0(4),C'9'          * R4=PTR TO 1ST CHAR OF NUM         *\n         BH    NUMERR             * R5=ACTUAL LENGTH OF NUM           *\n         CLI   0(4),C'0'          * RESULT RETURNED IN R6             *\n         BL    NUMERR             * R2,R4,R5,R6, AND R7 MODIFIED BY   *\n         MH    R6,=H'10'          * USING GETNUM SUBROUTINE.          *\n         IC    R7,0(4)            PICK UP DECIMAL CHARACTER\n         SLL   7,28               CHOP OFF LEFT 4 BITS\n         SRL   7,28               AND SHIFT BACK\n         AR    6,7                ADD DIGIT INTO RESULT\n         LA    4,1(4)             BUMP PTR TO NEXT CHAR\n         BCT   5,GETNUM+2         GO TO TOP OF LOOP\n         BR    2                  RETURN FROM GETNUM SUBROUTINE\nNUMERR   BAL   R2,PUTLINE         ERROR DESCRIPTOR SUBROUTINE\n         MVC   MSGBUF(50),=C'0ERROR - PARAMETER HAS INVALID NUMERICAL C+\n               OMPONENT'\n         B     PRLENERR\nNOCOUNT  CH    R5,=H'7'\n         BNE   PRLENERR           *** WARNING *** MODIFIED IN COPY/MOD +\n                                                  OPTION ROUTINES.\n         MVI   COUNTFLG,C'N'\n         B     SRCHPARM\nCOUNT    CH    R5,=H'5'           FINAL PROCESSING OF COUNT OPTION\n         BNE   UNRECOG\n         MVI   COUNTFLG,C'Y'\n         B     SRCHPARM\nNOVOLSER CH    R5,=H'8'\n         BNE   UNRECOG\n         MVI   SVOUTFLG,C'Y'      SET 'NOVOLSER SPECIFIED' FLAG\n         TM    JFCLTSV,X'31'      SEE IF INPUT HAD LABEL TYPE OF NL,\n         BNZ   SRCHPARM           BLP, OR LTM, AND BIF SO.\n         OI    WRTFLG,X'04'       OR IN 'DO NOT COPY INPUT VOL LABEL'\n         B     SRCHPARM\nCOPY     CH    R5,=H'4'\n         BNE   UNRECOG\n         OI    COPYFLG,X'01'      INDICATE COPY OPTION SPECIFIED\n         OI    WRTFLG,X'01'       INDICATE COPY   REQUESTED (THAT BIT)\n         OI    NOCOUNT+5,X'F0'    NOP OUT NOCOUNT & SET FOR WARN MSG\n         B     COUNT+8            COPY OPTION INVOKES COUNT AUTOMATICLY\nEOVMOD   CH    R5,=H'6'           ADD DATASETS ONTO EOV\n         BNE   UNRECOG\n         OI    COPYFLG,X'03'      BITS = 'COPY OPT + MOD OPT REQUESTED'\n         B     COPY+8             MOD OPTION IMPLIES COPY OPTION\nOPT      CH    R5,=H'3'\n         BNH   PRLENERR\n         LA    R4,4(R4)\n         SH    R5,=H'4'\n         BAL   R2,GETNUM\n         ST    R6,OPTNO\n         B     SRCHPARM\nERRLIM   CH    R5,=H'5'           CHANGE SYNAD ERROR COUNT LIMIT\n         BNH   PRLENERR\n         LA    R4,6(R4)\n         SH    R5,=H'6'\n         BAL   R2,GETNUM\n         ST    R6,SYNADNO\n         B     SRCHPARM\nNOLIST   CH    R5,=H'6'           FINAL PROCESSING OF NOLIST PARM\n         BNE   UNRECOG\n         SR    R0,R0\n         ST    R0,LISTNO\n         B     SRCHPARM\nLIST     CH    R5,=H'4'\n         BNH   PRLENERR\n         LA    R4,4(R4)\n         SH    R5,=H'4'           GET ACTUAL LENGTH OF PRESUMED NUMBER\n         BAL   R2,GETNUM          GET PRESUMED NUMBER INTO BINARY FORM\n         ST    R6,LISTNO          STORE NONNEGATIVE BINARY INTEGER\n         B     SRCHPARM\nNOHEX    CH    R5,=H'5'\n         BNE   UNRECOG\n         MVI   HEXFLG,C'N'\n         B     SRCHPARM\nVTOCONLY CH    R5,=H'4'                                         MRX-JJJ\n         BNE   UNRECOG                                          MRX-JJJ\n         MVI   VTOCFLAG,C'Y'      SET VTOC ONLY FLAG           HD OCT88\n         B     SRCHPARM                                         MRX-JJJ\nNOSUMARY CH    R5,=H'9'\n         BNE   UNRECOG\n         MVI   SUMFLG,C'N'        SET SUMMARY FLAG TO 'NOSUMMARY'\n         LA    R0,1               READ MINIMUM OF 1 BLK AFTER A TAPEMRK\n         ST    R0,READNO          SET # OF BLKS TO READ FOR SUMMARY=0\n         B     SRCHPARM\nSKIPTM   CH    R5,=H'6'\n         BNH   PRLENERR\n         LA    R4,6(R4)\n         SH    R5,=H'6'\n         BAL   R2,GETNUM\n         ST    R6,SKIPTMNO\n         B     SRCHPARM\nLINE     CH    R5,=H'4'            IS THIS PARM 'LINE'?    *HMD 04/79*\n         BNH   PRLENERR            NOPE, LENGTH ERROR      *HMD 04/79*\n         LA    R4,4(R4)            BUMP POINTER            *HMD 04/79*\n         SH    R5,=H'4'            DECREMENT COUNTER       *HMD 04/79*\n         BAL   R2,GETNUM           GET NUMERIC VALUE       *HMD 04/79*\n         CH    R6,=H'30'           TOO LOW?                *HMD 04/79*\n         BL    NUMERR              YES, FORGET IT          *HMD 04/79*\n         CH    R6,=H'99'           TOO HIGH?               *HMD 04/79*\n         BH    NUMERR              YES, FORGET IT          *HMD 04/79*\n         ST    R6,LINECNT          SAVE LINE COUNT PARM    *HMD 04/79*\n         B     SRCHPARM            GET SOME MORE PARMS     *HMD 04/79*\nMAXTM    CH    R5,=H'5'\n         BNH   PRLENERR\n         LA    R4,5(4)\n         SH    R5,=H'5'\n         BAL   R2,GETNUM\n         LTR   R6,R6              MAKE SURE MAXTM IS NOT =0\n         BZ    NUMERR             ERROR - INVALID NUMERICAL PARM\n         ST    R6,MAXTMNO\n         B     SRCHPARM\nSKIPEOV  CH    R5,=H'7'\n         BNH   PRLENERR\n         LA    R4,7(R4)\n         SH    R5,=H'7'\n         BAL   R2,GETNUM\n         ST    R6,SKPEOVNO\n         B     SRCHPARM\nMAXEOV   CH    R5,=H'6'           CHECK LENGTH OF PARM\n         BNH   PRLENERR           LENGTH MUST BE GREATER THAN 6\n         LA    R4,6(R4)           BUMP PTR TO START OF PARM'S NUMBER\n         SH    R5,=H'6'           GET ACTUAL LENGTH OF PRESUMED NUMBER\n         BAL   R2,GETNUM          CONVERT NUMBER FOLLOWING 'MAXEOV' PRM\n         LTR   R6,R6              MAKE SURE MAXEOV IS NOT=0\n         BZ    NUMERR             INVALID NUMERICAL COMPONENT\n         ST    R6,MAXEOVNO        STORE RESULT\n         B     SRCHPARM\nENDPARMS DS    0H\n         CLC   SKPEOVNO,MAXEOVNO  PARM VALIDITY CHECKING\n         BL    *+26               SKIP IF NO ERROR\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(48),=C'0SKIPEOV PARM GE MAXEOV; SKIPEOV SET TO MA+\n               XEOV-1'\n         L     R2,MAXEOVNO\n         SH    R2,=H'1'\n         ST    R2,SKPEOVNO        STORE IT SET TO MAXEOV-1\n         CLC   SKIPTMNO,MAXTMNO\n         BL    *+26               SKIP IF SKIPTMNO & MAXTMNO CONSISTENT\n         BAL   R2,PUTLINE         PRINT ERROR MESSAGE\n         MVC   MSGBUF(44),=C'0SKIPTM PARM GE MAXTM; SKIPTM SET TO MAXTM+\n               -1'\n         L     R2,MAXTMNO         MAXIMUM ON TAPEMARKS TO BE READ\n         SH    R2,=H'1'\n         ST    R2,SKIPTMNO        STORE AS MAXTM-1\n         CLC   SKPEOVNO,=F'0'     SPECIFIED?\n         BE    ENDP010            NO, ITS OK\n         CLC   SKIPTMNO,=F'0'     SPECIFIED?\n         BE    ENDP010             NO, ITS OK\n         BAL   R2,PUTLINE         BOTH SPECIFIED, ERROR\n         MVC   MSGBUF(52),=C'0BOTH SKIPTM AND SKIPEOV SPECIFIED; SKIPEO+\n               V IGNORED.'        PRINT ERROR MESSAGE\n         MVC   SKPEOVNO,=F'0'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       PRINT OPTIONS IN EFFECT                       *\n*                                                                     *\n***********************************************************************\nENDP010  DS    0H                                              HD OCT88\n         MVC   MSGBUF,BLANKBUF    PRINT A BLANK LINE           HD JAN89\n         BAL   R2,PUTLINE3                                     HD JAN89\n         DC    C'OPT111'                                       HD JAN89\n         SPACE 2                                               HD JAN89\n         MVC   MSGBUF(19),=C' OPTIONS IN EFFECT:'\n         LA    R2,MSGBUF+19       R2=NEXT POSITION TO RECEIVE PARM\n         OPTN  ,LIST,LISTNO                                    HD JAN89\n         CLI   HEXFLG,C'N'                                     HD JAN89\n         OPTN  E,NOHEX                                         HD JAN89\n         CLI   COUNTFLG,C'N'                                   HD JAN89\n         OPTN  E,NOCOUNT                                       HD JAN89\n         CLC   READNO,=F'1'                                    HD JAN89\n         OPTN  E,NOSUMMARY                                     HD JAN89\n         CLI   COPYFLG,0                                       HD JAN89\n         OPTN  E,NOCOPY                                        HD JAN89\n         TM    COPYFLG,X'02'                                   HD JAN89\n         OPTN  NO,NOEOVMOD                                     HD JAN89\n         CLI   SVOUTFLG,C'Y'                                   HD APR89\n         OPTN  E,NOVOLSER                                      HD JAN89\n         MVI   MSGBUF+19,C' '    BLANK OUT FIRST COMMA         HD JAN89\n         BAL   R2,PUTLINE3       PRINT FIRST OPTION SET        HD JAN89\n         NOP   FWY101            POINT TO                      HD JAN89\n         NOPR  0                    BRANCH AROUND              HD JAN89\n         SPACE 2                                               HD JAN89\n         MVC   MSGBUF,BLANKBUF   CLEAR BUFFER FAST             HD JAN89\n         MVC   MSGBUF(19),=C' OPTIONS IN EFFECT:'\n         LA    R2,MSGBUF+19       R2=NEXT POSITION TO RECEIVE PARM\n         OPTN  ,SKIPEOV,SKPEOVNO                               HD JAN89\n         OPTN  ,SKIPTM,SKIPTMNO                                HD JAN89\n         OPTN  ,MAXEOV,MAXEOVNO                                HD JAN89\n         OPTN  ,MAXTM,MAXTMNO                                  HD JAN89\n         OPTN  ,OPT,OPTNO                                      HD JAN89\n         CLI   VTOCFLAG,C'N'                                   HD JAN89\n         OPTN  E,NOVTOCONLY                                    HD JAN89\n         MVI   MSGBUF+19,C' '     BLANK OUT FIRST COMMA\n         BAL   R2,PUTLINE3\n         DC    C'OPT222'                                       HD JAN89\n         SPACE 2                                               HD JAN89\nFWY101   DS    0H                                              HD JAN89\n         TM    COPYFLG,X'01'      SEE IF COPY AND/OR MOD SPECIFIED\n         BZ    NOTBOTH            BIF COPY OPTION NOT SPECIFIEDHD JAN89\n         MVI   COUNTFLG,C'Y'      TURN COUNT OPTION ON         HD OCT88\n         MVI   SVOUTFLG,C'N'      TURN \"NOVOLSER\" OFF          HD OCT88\n***************************************************************HD OCT88\n**                                                             HD OCT88\n**   CHECK OUTPUT TAPE, IF ANY FOR VALID DEVICE TYPE, ETC..    HD OCT88\n**                                                             HD OCT88\n***************************************************************HD OCT88\nOUTCHECK DS    0H                                              HD OCT88\n         DEVTYPE OUTPUT+40,DTYPE  CHECK FOR MAG TAPE DEVICE       -HMD-\n         LTR   R15,R15            IS DD STMT THERE?               -HMD-\n         BNZ   NOOUTPUT           NOPE                            -HMD-\n         CLI   DTYPE+2,X'80'      IS THIS A TAPE DEVICE?          -HMD-\n         BNE   NOTTAPEO           NOPE                            -HMD-\n         RDJFCB (OUTPUT)          ELSE PROCESS COPY AND/OR MOD OPTIONS\n         LTR   R15,R15            SEE IF RDJFCB WENT ALLRIGHT\n         BNE   NOOUTPUT           'MISSING OR INVALID DD' ERROR MSG\n         MVC   SAVEVOL,JFCBOUT+(JFCBVOLS-JFCB) SAVE VOLSER        -HMD-\n         NI    VOLSW,255-VOLSWNV          TURN OFF BIT            -HMD-\n         L     R3,=A(EBCDTBL)             GET TABLE ADDR          -HMD-\n         TRT   SAVEVOL(6),0(R3)           CHECK PRINTABLES        -HMD-\n         BZ    @VALID                     BIF OK                  -HMD-\n         OI    VOLSW,VOLSWNV              TURN ON SWITCH          -HMD-\n         B     *+10                       DONT MOVE IN VOLSER     -HMD\n@VALID   MVC   POSMSG+22(6),SAVEVOL       MOVE VOLSER TO HEADING  -HMD-\n         MVC   OUTLTYP,JFCBOUT+(JFCBLTYP-JFCB)\n         TM    OUTLTYP,X'01'      SEE IF LABEL IS NL OR LTM\n         BO    *+8                BIF YES - IT IS NL OR LTM\n         MVI   JFCBOUT+(JFCBLTYP-JFCB),JFCBLP ELSE SET TO BLP\n         LA    R0,1\n         LH    R2,JOUTFLSQ        SAVE ORIGINAL FILE SEQ. NO.\n         LTR   R2,R2              BUT IF IT'S\n         BNZ   *+6                EQUAL TO ZERO THEN\n         LR    R2,R0              SET IT TO = 1.\n         STH   R0,JOUTFLSQ        TEMPORARILY SET FLSQ IN JFCB TO = 1\n         ST    R2,SVR2            SAVE R2 OVER TRT                -HMD-\n         OPEN  (OUTPUT,INOUT),TYPE=J                           HD OCT88\n         TM    OUTPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOOUTPUT\n         TM    VOLSW,VOLSWNV      IS VOLSER PRINTABLE?            -HMD-\n         BNO   @VOLOK             YES, WE TOOK CARE OF IT EARLIER -HMD-\n         L     R2,(DCBDEBAD-IHADCB)+OUTPUT GET DEB ADDR           -HMD-\n         L     R2,DEBUCBAD(R2)    GET UCB ADDR                    -HMD-\n         MVC   SAVEVOL(6),28(R2)  SAVE VOLSER                     -HMD-\n         L     R3,=A(EBCDTBL)     GET TABLE ADDR                  -HMD-\n         TRT   SAVEVOL(6),0(R3)   SEE IF CHARS ARE PRINTABLE      -HMD-\n         BNZ   @VOLOK             NOPE, THEY ARE NOT..LEAVE CONST.-HMD-\n         MVC   POSMSG+22(6),SAVEVOL   MOVE IN MESSAGE             -HMD-\n@VOLOK   DS    0H                 END OF PRINTABLE CHECK          -HMD-\n         L     R2,SVR2            RESTORE R2 FROM SAVE AREA       -HMD-\n         LA    R1,EXCPIOBP        POINT TO IOB BSAM-TYPE PREFIX.  -CWB-\n         IC    R0,OUTPUT+(DCBIOBA-IHADCB) CHANGE DCB POINTER FROM EXCP-\n         ST    R1,OUTPUT+(DCBIOBA-IHADCB) TYPE TO BSAM-TYPE POINTER\n         STC   R0,OUTPUT+(DCBIOBA-IHADCB) FOR \"EXECEXCP\" CONSISTANCY\n         STH   R2,JOUTFLSQ        RESTORE ORIGINAL FLSQ IN JFCB\n         TM    OUTLTYP,X'42'      SEE IF AL, AUL, SL, OR SUL\n         BZ    COPYOUT            BIF NOT ONE OF ABOVE\n         LA    R1,=AL3(READCMND)  USE EXCP TO READ PRESUMED VOL   -CWB-\n         LA    R2,OUTPUT               LABEL (CHANGED FROM BSAM   -CWB-\n         BAL   R4,EXECEXCP             READING).                  -CWB-\n*        LH    R7,READLENG        GET LENGTH OF READ COMMAND.     -CWB-\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK1,FULLWRK1  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK1(2),READLENG   MOVE ENTIRE HALFWORD\n         L     R7,FULLWRK1        LOAD REGISTER PROPERLY      SBG 04/00\n*        LH    R6,RESIDL          GET RESIDUAL LENGTH AFTER READ. -CWB-\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK2,FULLWRK2  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK2(2),RESIDL     MOVE ENTIRE HALFWORD\n         L     R6,FULLWRK2        LOAD REGISTER PROPERLY\n         SR    R7,R6\n         BNH   BADREC             VERY BAD IF RECORD LENGTH LT 1\n         TM    OUTLTYP,X'02'      SEE IF SL OR SUL, OR AL OR AUL\n         BO    COPYSL             BIF SL OR SUL\n*COPYAL  CLC   RECBUF(4),=X'B6AFAC51'  SEE IF ANSI 'VOL1'\n         BNE   BADOUTVL           AL OR AUL IN JCL, BUT LABEL NOT ANSI\n         C     R7,=F'80'\n         BL    BADOUTVL\n         B     REWINDCK\nCOPYSL   C     R7,=F'80'          SEE IF PRESUMED IBM SL IS 80 BYTES\n         BNE   BADOUTVL           BIF PRESUMED IBM LABEL NOT 80 BYTES\n         CLC   RECBUF(4),=C'VOL1'\n         BNE   BADOUTVL\n         CLC   SAVEVOL,RECBUF+4             COMPARE VOL SERS     -HMD-\n         BNE   BADOUTVL\nREWINDCK CLC   JOUTFLSQ(2),=H'1'  DO NOT REWIND IF FILE SEQ. NO. GT 1\n         BH    COPYOUT            DO NOT REWIND IF FILE SEQ. NO. GT 1\n         TM    COPYFLG,X'02'      DO NOT REWIND IF EOVMOD SPECIFIED\n         BO    COPYOUT            DO NOT REWIND IF EOVMOD SPECIFIED\n         CLI   SVOUTFLG,C'Y'      DO NOT REWIND IF NOVOLSER SPECIFIED\n         BE    COPYOUT            DO NOT REWIND IF NOVOLSER SPECIFIED\n         LA    R1,=AL3(RWNDCMND)  REWIND COMMAND CHAINED TO SENSE CMND\n         LA    R2,OUTPUT          OUTPUT DCB\n         BAL   R4,EXECEXCP        REWIND AND SENSE\n         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED\n         BO    COPYOUT            BIF SENSED LOADPOINT\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(67),=C'0UNABLE TO REWIND OUTPUT TAPE TO LOAD POIN+\n               T - TERMINATING EXECUTION'\n         B     EXITRC8\nBADOUTVL BAL   R2,PUTLINE\n         MVC   MSGBUF(32),=C'0OUTPUT VOLUME LABEL IS INVALID:'\n         LR    R3,R12             PROVIDE PROPER ADDRESSABILITY.\n         L     R12,=A(EXIT+4096)\n         DROP  R12\n         USING TAPESCAN,R3\n         BAL   R5,LISTON\n         B     EXITRC8\n         LR    R12,R3             RESTORE ADDRESSABILITY.\n         DROP  R3\n         USING TAPESCAN,R12\nCOPYOUT  DS    0H                 IF NECESS., MOD PROCESSING DONE HERE\n         LA    R0,EODADOUT        ADDRESS OF NEW OUTPUT TAPE EODAD RTN\n         ST    R0,OUTPUT+(DCBEODAD-IHADCB) AND SET IT UP IN DCB.\nFILELOOP TM    COPYFLG,X'02'      SEE IF MOD SPECIFIED\n         BO    FILEFSM            IF SO THEN DO SRCH FWRD FOR TPMK\n         CLC   COUTFILE,JOUTFLSQ  ARE WE IN RIGHT FILE YET?\n         BNL   FILEMSG            BIF YES\nFILEFSM  LA    R1,=AL3(FSMCMND)   FWRD SPACE JUST PAST NEXT TAPEMARK\n         LA    R2,OUTPUT\n         BAL   R4,EXECEXCP\n         LA    R0,1               MAINTAIN\n         AH    R0,COUTFILE        CURRENT FILE\n         STH   R0,COUTFILE        NUMBER.\n         CH    R0,JOUTFLSQ        BIF NOT YET UP TO SPECIFIED FILE\n         BL    *+12               BIF NOT YET UP TO SPECIFIED FILE\n         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED\n         BZ    FILEMSG            BIF   EOVMOD NOT SPECIFIED\n         LA    R1,=AL3(READCMND)  PREPARE TO READ WHAT IMMEDIATELY-CWB-\n         LA    R2,OUTPUT               FOLLOWS THE TAPE MARK.     -CWB-\n         BAL   R4,EXECEXCP        (CHANGED TO EXCP FROM BSAM.)    -CWB-\n         B     FILELOOP           ELSE IT'S A BLOCK, SO JUST GO ON\nFILEPOS  DS    0H                 BACKSPACE PAST 2ND TAPEMARK OF EOV\n         LA    R2,OUTPUT          PTR TO OUTPUT TAPE'S DCB\n         LA    R1,=AL3(BSFCMND)   BACKSPACE PAST ONE TAPEMARK\n         BAL   R4,EXECEXCP\n         LH    R0,COUTFILE        AND\n         BCTR  R0,0               REDUCE CURRENT FILE NO. APPROPRIATELY\n         STH   R0,COUTFILE\nFILEMSG  DS    0H                 PRINT INITIAL OUTPUT POSITION MSG\n         LH    R1,COUTFILE\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  POSMSG+32(4),BADLNGTH TELL WHERE 1ST FILE OUTPUT GO-CWB-\n         MVC   POSMSG+47(4),POSMSG+32 MOVE INTO EXPLANATORY COMMEN-CWB-\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'POSMSG),POSMSG\n         B     NOTBOTH\nEODADOUT LA    R0,1               COUNT\n         AH    R0,COUTFILE        THIS\n         STH   R0,COUTFILE        TAPEMARK (THE 2ND ONE OF AN EOV).\n         CH    R0,JOUTFLSQ        SEE IF UP TO SPECIFIED TAPEMARK\n         BL    TOPT456            BIF NOT UP TO SPECIFIED TAPEMARK\n         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED\n         BO    FILEPOS            BIF EOVMOD SPECIFIED\n         TM    OPTNO,X'10'        SEE IF 'IGNORE EOV'S UNTIL FLSQ SATIS\n         BO    FILEPOS            BIF IT IS SPECIFIED\n         B     BADEOV             GIVE 'EM HELL, HARRY!\n*\nNOTTAPEO MVC   IDNTAPE+1(6),=C'OUTPUT'   MOVE 'OUTPUT' TO MSG     -HMD-\nNOTTAPEI BAL   R2,PUTLINE         PUT OUT LINE.                   -HMD-\n         MVC   MSGBUF(L'IDNTAPE),IDNTAPE MOVE MSG TO BUFFER       -HMD-\n         B     EXITRC8            RETURN WITH BAD CODE            -HMD-\n*\nTOPT456  TM    OPTNO,X'10'        TEST FOR OPT268435456\n         BO    FILELOOP           AND IF SPECIFIED IGNORE DOUBLE TPMK\nBADEOV   BAL   R2,PUTLINE\n         MVC   MSGBUF(83),=C'0ERROR - EOV INDICATION ENCOUNTERED BEFORE+\n                OUTPUT TAPE FINISHED INITIAL POSITIONING'\n         B     EXITRC8\nEODADBAD BAL   R2,PUTLINE\n         MVC   MSGBUF(092),=C'0ERROR - OUTPUT TAPE HAD TAPEMARK FOLLOWI+\n               NG LOAD POINT, BUT NEITHER LTM OR BLP WAS SPECIFIED'\n*                                 (LENGTH FIELD CORRECTED.)       -CWB-\n         B     EXITRC8\nNOTBOTH  DS    0H\n         L     R12,=A(EXIT+4096)  LOAD 2ND BASE REG FOR MAIN CODE\n         DROP  R12                DROP R12 FOR COMMON STUFF, ONLY R11\n         B     SKIPEOVP           INITIALIZATION ENDS HERE\n         USING TAPESCAN,R12\nNOOUTPUT MVC   BADINPUT+1(6),=C'OUTPUT'\nNOINPUT  BAL   R2,PUTLINE         BAD OR MISSING DD ROUTINE\n         MVC   MSGBUF(L'BADINPUT),BADINPUT\n         B     EXITRC8\n         DROP  R12\nBSFCMND  CCW   X'2F',0,X'70',1    BSF, CC,SLI,SKIP\n         CCW   X'04',SENSBYTS,X'20',24 SENSE SLI UP TO 24 BYTES\nREAD81CM CCW   2,0,X'60',81       SET TO POINT TO RECBUF DYNAMICALLY\n         CCW   4,SENSBYTS,X'20',24 AND SENSE FOR DEBUG\nJFCBOUT  DS    22D\nJOUTFLSQ EQU   JFCBOUT+(JFCBFLSQ-JFCB)\nEXLSTOUT DC    0F'0',X'87',AL3(JFCBOUT)\nGMCTRL   DC    A(RECBUF+136-TRT1)  MINIMUM LENGTH FOR THE GETMAIN\n         DC    A(RECBUF-TRT1+65536) MAXIMUM LENGTH FOR THE GETMAIN\nGMLOCS   DC    2F'0'\nDTYPE    DC    2F'0'              TO HOLD DEVTYPE INFO            -HMD-\nSVR2     DC    F'0'               SAVE AREA FOR R2 OVER TRT       -HMD-\nEXITLIST DS    0F                 INPUT DCB EXIT LIST FOR RDJFCB\n         DC    X'87'              LAST ENTRY AND RDJFCB\n         DC    AL3(JFCBINX)       BUFFER FOR INPUT TAPE'S JFCB\nBADINPUT DC    C'0INPUT  DD STATEMENT MISSING OR INVALID'\nIDNTAPE  DC    C'0INPUT DEVICE IS NOT MAGNETIC TAPE - EXECUTION TERMINAX\n               TED '                                              -HMD-\nPOSMSG   DC    C'0FIRST OUTPUT FILE ON SCRTCH IS 0000 -- LABEL=(0000,BL+\n               P)'                                                -CWB-\nMORECORE DC    C'0WARNING:  TAPESCAN SHOULD HAVE 00000 MORE BYTES OF CO+\n               RE FOR RELIABLE OPERATION; PROCESSING WILL BE ATTEMPTED +\n               ANYWAY.'\nCTABLE   DC    C'0123456789ABCDEF'\nSAVEVOL  DC    CL6' '             SAVE AREA FOR OUTPUT VOLSER     -HMD-\nSVOUTFLG DC    C'N'               C'Y' = 'SAVE OUTPUT VOL LABEL '\nVERIFLG  DC    C'N'\nOUTLTYP  DC    C'0'               FOR SAVING OUTPUT TAPE'S LABEL TYPE\nCOPYFLG  DC    X'00'              COPY AND MOD OPTION REQUEST BITS\nVOLSW    DC    X'00'              SWITCH FOR ALPHANUMERIC TEST    -HMD-\nVOLSWNV  EQU   X'80'              VOLSER NOT ALPHANUMERIC         -HMD-\n         LTORG\n         EJECT\n* COMMON ROUTINES FOR BOTH INITIALIZATION AND MAIN ARE HERE.\nEXIT     MVI   RCINSTR+3,X'00'    NORMAL END, SET RET CODE = 0\nEXITRC8  DS    0H                                                 -CWB-\n         TM    OUTPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    CLOSEIN            IF NOT, SKIP CLOSE.             -CWB-\n         LA    R1,EXCPIOB         RESTORE IOB POINTER IN DCB      -CWB-\n         IC    R0,OUTPUT+(DCBIOBA-IHADCB) TO POINT TO TRUE IOB, NOT\n         ST    R1,OUTPUT+(DCBIOBA-IHADCB) BSAM-TYPE IOB PREFIX.\n         STC   R0,OUTPUT+(DCBIOBA-IHADCB)\n         NI    OUTPUT+(DCBOFLGS-IHADCB),X'7F' PRETEND LAST I/O WAS A\n         OI    OUTPUT+(DCBOFLGS-IHADCB),X'04' READ TO AVOID WRITING A\n*                                      TAPE MARK.                 -CWB-\n         CLOSE  OUTPUT            CLOSE OUTPUT TAPE.              -CWB-\nCLOSEIN  TM    INPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOTOPEN            PROGRAM DIDN'T GET VERY FAR,    -CWB-\n*                                      DID IT.                    -CWB-\n         CLOSE INPUT              CLOSE INPUT TAPE.               -CWB-\nNOTOPEN  DS    0H                                                 -CWB-\n         L     R13,SAVE+4         MAY BYPASS UNRELEASED SYNAD AREA\n         LM    14,12,12(13)\nRCINSTR  LA    15,8\n         BR    R14                FINAL EXIT FROM TAPESCAN IN ALL CASES\nPUTLINE  DS    0H                 GENERAL PRINTING SUBROUTINE, ENTRY 1\n         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER FAST\nPUTLINE2 EX    0,0(R2)            GENERAL PRINTING SUBROUTINE, ENTRY 2\nPUTLINE3 CLI   MSGBUF,C' '        GENERAL PRINTING SUBROUTINE, ENTRY 3\n         BE    LNCOUNT-4          BIF CARR. CTRL  CHAR IS A BLANK\n         CLI   MSGBUF,C'0'        SEE IF CARRIAGE CONTROL CHAR IS ZERO\n         BE    C0                 BIF IS A ZERO\n         LA    R0,3               NO BLANK OR ZERO, MUST BE A MINUS\n         B     LNCOUNT\nC0       LA    R0,2               COUNT TWO LINES\n         B     LNCOUNT\n         LA    R0,1               COUNT ONE LINE\nLNCOUNT  A     R0,LINENO\n         ST    R0,LINENO\n         C     R0,LINECNT         COMPARE WITH MAX LINES          -HMD-\n         BNH   SAMEPAGE\n         MVC   PAGECHAR,=X'40202120' EDIT PATTERN\n         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-\n         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB-\n         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB-\n         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-\n         ED    PAGECHAR,DBLPAGE+6                                 -CWB-\n         MVI   LINENO+3,X'00'\n         PUT   SYSPRINT,PAGEHDR\n         SPACE 1                                               HD AUG86\n         CLC   =C'VTOC--',0(R2)   ARE WE IN VTOC ROUTINE?      HD AUG86\n         BNE   SAMEPAGE           NO, CONTINUE                 HD AUG86\n         MVC   HOLDBUF,BLANKBUF   CLEAR BUFFER FAST            HD AUG86\n         L     R1,=A(VTOCHED2)    GET HEADER TEXT AND MOVE     HD AUG86\n         MVC   HOLDBUF(L'VTOCHED2),0(R1)                       HD AUG86\n         MVI   LINENO+3,X'04'     INDICATE 3 LINES             HD AUG86\n         PUT   SYSPRINT,HOLDBUF   PUT THE LINE OUT             HD AUG86\n         MVI   MSGBUF,C'0'        INDICATE SKIP 1 LINE         HD DEC86\n         SPACE 1                                               HD AUG86\nSAMEPAGE PUT   SYSPRINT,MSGBUF\n         B     6(R2)              RETURN FROM PUTLINE SUBROUTINE\nPAGECHK  DS    0H                 LINE RESERVATION SUBROUTINE\n         A     R0,LINENO          ADD LINES TO BE RESERVED TO LINE NO\n         C     R0,LINECNT         COMPARE TO MAXIMUM LINE  NUMBER -HMD-\n         BCR   13,R2              RETURN IF CURRENT PAGE HAS ENUF ROOM\n         MVI   LINENO+3,0         ZERO LINE COUNTER\n*        AP    PAGEPACK,=P'1'     COUNT NEW PAGE                  -CWB-\n         MVC   PAGECHAR,=X'40202120'\n*        ED    PAGECHAR,PAGEPACK                                  -CWB-\n         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-\n         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB-\n         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB-\n         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-\n         ED    PAGECHAR,DBLPAGE+6                                 -CWB-\n         PUT   SYSPRINT,PAGEHDR\n         BR    R2\n*BADREC  WTL   'BAD (0) BLOCK SIZE' (OFTEN MEANS TAPE OFF END OF REEL)\nBADREC   DS    0H                                               -CWB-\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'BADRECM),BADRECM\n         B     EXITRC8\nSYNERR   SYNADAF ACSMETH=BSAM\nSYNERR2  ST    R14,SVR14\n         CH    R0,=H'4'           CHECK SYNADAF'S RETURN CODE\n         BNE   DIRECT\n*        LH    R14,12(R1)         LOAD NO. OF BYTES READ\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK1,FULLWRK1  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK1(2),12(R1)    MOVE FULL HALFWORD\n         L     R14,FULLWRK1       FULLWORD LOAD\n         CVD   R14,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  32(5,R1),BADLNGTH\n         MVC   8(24,R1),=C'0I/O ERROR - BYTES READ='\nDIRECT   BAL   R2,PUTLINE         PRINT SYNAD ERROR MESSAGE\n         MVC   MSGBUF(120),8(R1)\n         LA    R14,1\n         A     R14,ERRCOUNT       INCREMENT ERROR COUNT\n         ST    R14,ERRCOUNT\n         C     R14,SYNADNO        COMPARE ERROR COUNT WITH ERROR LIMIT\n         BH    TOOMANY            PRINT MSG & EXIT IF ERR LIM EXCEEDED\n         SYNADRLS\n         L     R14,SVR14\n         BR    R14\nTOOMANY  BAL   R2,PUTLINE         YOU SHOULD PROBABLY SET ERRLIM TO 0 -\n         MVC   MSGBUF(55),=C'0TAPESCAN TERMINATING DUE TO EXCESSIVE I/O+\n                ERROR COUNT.'\n         B     EXITRC8            FOR TAPE COPYING OPERATIONS.\nEXECEXCP DS    0H                 EXCP SUBROUTINE, R2=PTR TO DCB, AND  +\n                                  R1=PTR TO 3-BYTE ADCON WHICH POINTS  +\n                                  TO CHANNEL PROGRAM.\n         ST    R2,EXCPDCB         SAVE DCB POINTER.               -CWB-\n         L     R2,DCBIOBA-IHADCB(R2) GET PTR TO A BSAM IOB PREFIX\n         MVC   STARTSAV(3),IOBSTART+9(R2) SAVE PTR TO BSAM'S CCW\n         MVC   IOBSTART+9(3,R2),0(R1) MOVE IN PTR TO CHAN PROG\n         LA    R1,4(R2)           LOAD PTR TO ECB IN PREFIX\n         ST    R1,IOBECBPT+8(R2)  STORE PTR TO ECB\n         XC    0(4,R1),0(R1)      CLEAR ECB IN IOB PREFIX\n         EXCP  8(R2)              EXCP USING BSAM'S IOB AND ECB\n         WAIT  ECB=4(R2)\n         L     R1,IOBSTART+8(R2)  RESTORE CCW POINTER.            -CWB-\n         MVC   IOBSTART+9(3,R2),STARTSAV RESTORE PTR TO BSAM'S CCW\n         CLI   4(R2),X'7F'        SEE IF EXCP WORKED PERFECTLY\n         BCR   8,R4               RETURN IF IT DID\n         CLI   4(R2),X'41'        DID PERMANENT ERROR OCCUR?      -CWB-\n         BNE   DOSYN              OTHER ERRORS BRANCH.            -CWB-\n         CLI   0(R1),X'02'        WAS COMMAND CODE A READ?        -CWB-\n         BNE   DOSYN              IF NOT, DO ERROR.               -CWB-\n*        LH    R1,6(R1)           GET COMMAND LENGTH.             -CWB-\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK1,FULLWRK1  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK1(2),6(R1)      GET COMMAND LENGTH\n         L     R1,FULLWRK1        FULLWORD LOAD\n*        CH    R1,22(R2)          IS RESIDUAL LENGTH THE SAME?    -CWB-\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK2,FULLWRK2  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK2(2),22(R2)    MOVE RESIDUAL LENGTH\n         C     R1,FULLWRK2        FULLWORD COMPARE\n         BNE   DOSYN              IF NOT, BRANCH FOR ERROR.       -CWB-\n         L     R1,EXCPDCB         ELSE, MUST BE TAPE MARK READ.   -CWB-\n         C     R1,=A(INPUT)       IS THIS THE INPUT DCB?          -HMD-\n         BNE   LOADEOD            NO, LOAD THE EODAD FROM THE DCB -HMD-\n         L     R1,EODADDR         GET PREDEFINED EOD ADDRESS      -HMD-\n         BR    R1                 GO TO IT                        -HMD-\nLOADEOD  L     R1,DCBEODAD-IHADCB(R1) GET EOD FROM DCB            -HMD-\n         BR    R1                 GO TO IT                        -CWB-\nDOSYN    DS    0H                                                 -CWB-\n         LA    R1,8(R2)           GET PTR TO IOB FOR SYNADAF MACRO\n         SYNADAF ACSMETH=EXCP     WORKS OK EVEN THO IOBSTART RESTORED\n         BAL   R14,SYNERR2        NOW DO REST OF ANALYSIS WITH SYNERR\n         BR    R4\n         EJECT\n* CONSTANTS AND STORAGE FOR THIS SECTION\nSAVE     DS    9D\nJFCBINX  DS    22D                176 BYTES\nBADLNGTH DC    D'0'\nDBLPAGE  DC    D'0'               CVD WORK AREA FOR PAGE NUMBER.  -CWB-\nFSMCMND  CCW   X'3F',0,X'30',1    FWRD SPACE FILE, SKIP/SLI\nRWNDCMND CCW   7,0,X'60',1        REWIND TAPE, CHAIN CMND, SLI\nSENSCMND CCW   4,SENSBYTS,X'20',24 SENSE UP TO 24 BYTES, SLI\nREADCMND CCW   X'02',0,X'20',65535  READ COMMAND.                 -CWB-\nREADLENG EQU   READCMND+6           READ LENGTH FIELD.            -CWB-\nWRTCMND  CCW   1,0,X'20',0        PTR TO RECBUF UPDATED AFTER GM. -CWB-\nWTMCMND  CCW   X'1F',0,X'60',1    WRITE TM, SLI, CC TO SENSE.     -CWB-\n         CCW   X'04',SENSBYTS,X'20',1  SENSE CHAINED FOR DEV END. -CWB-\n*                                 ABOVE FIELDS MOVED HERE FROM    -CWB-\n*                                      LATTER PART OF PROGRAM TO  -CWB-\n*                                      CORRECT ADDRESSABILITY.    -CWB-\nSENSBYTS DC    3XL8'00'           BUFFER FOR SENSE BYTES\nAMSGBP46 DC    A(0)               A(MSGBUF+46) SET UP DURING INIT -CWB-\nAMSGBP72 DC    A(0)               A(MSGBUF+72) AS ABOVE.          -CWB-\nERRCOUNT DC    F'0'               NUMBER OF SYNAD EXITS TAKEN (I/O ERRS\nOPTNO    DC    F'0'               BIT ORIENTED OPTIONS - MISC/DEBUG\nLINENO   DC    F'90'                                              -CWB-\nEODADDR  DC    F'0'               FAKE END OF DATA ADDRESS        -HMD-\nLISTNO   DC    F'4'               NUMBER OF BLKS TO LIST PER DATASET\nSKIPTMNO DC    F'0'\nMAXTMNO  DC    F'32767'\nSKPEOVNO DC    F'0'\nMAXEOVNO DC    F'1'\nSYNADNO  DC    F'50'              MAX SYNAD EXITS BEFORE TERMINATION\nREADNO   DC    F'3'               SET TO ONE  FOR NOSUMMARY OPTION\nPAGECNT  DC    F'0'               PAGE COUNTER.                   -CWB-\nLINECNT  DC    F'&LINECNT'        LINES/PAGE                      -HMD-\nSVR14    DC    F'0'                                               -CWB-\nCOUTFILE DC    H'1'               CURRENT OUTPUT FILE SEQ. NO.\n*PAGEPACK DC   PL2'0'             (REPL'D BY PAGECNT)             -CWB-\nBADRECM  DC    C'0BAD (0) BLOCK SIZE ENCOUNTERED'\nERRSUMSG DC    C'0NUMBER OF I/O ERRORS=XXXXX'\nPAGEHDR  DC    CL60'1TAPESCAN 5.2  --------  TAPE ANALYSIS AND COPYING +\n               PROGRAM  '                                   -CWB-\nDATERSLT DC    CL8'MM/DD/YY'      DATE WILL BE PLACED HERE\n         DC    CL2'  '\nTIMERSLT DC    XL11'4021207A20207A20204B20'\n         DC    C'   INPUT VOL='                                   -CWB-\nDDVOL    DC    CL6'VVVVVV'                                        -CWB-\n         DC    CL12'    DENSITY='                                 -SRH-\nTAPEDENS DC    CL1'X'\n         DC    CL2' ('\nPRTDENS  DC    CL4' XXX'\n         DC    CL4'BPI)'\n         DC    CL6'  PAGE'\nPAGECHAR DC    X'40202120'        EXAMPLE EDIT PATTERN FOR PAGE NUMBER\n         DC    CL12'           '  PAGE TRAILING BLANKS\nJFCLTSV  DC    X'FF'              FOR SAVING JFCBLTYP BYTE\nSENSW    DC    X'00'              SENS INFO SWITCH                *SRH*\nEXCPIOBP DC    0D'0',A(*)         IOB BSAM-TYPE PREFIX.           -CWB-\nEXCPECB  DC    F'0'                                               -CWB-\nEXCPIOB  DC    B'01000010',XL3'0',A(EXCPECB,0),H'0'  IOB PROPER.  -CWB-\nRESIDL   DC    H'0'               RESIDUAL COUNT.                 -CWB-\nEXCPCCW  DC    A(0)               ADDRESS OF CHANNEL PROGRAM.     -CWB-\n         DC    A(OUTPUT,0,0)                                      -CWB-\nEXCPDCB  DC    A(0)               DCB ADDRESS SAVE AREA.          -CWB-\nSTARTSAV DC    C'SAV'             FOR SAVING BSAM'S IOBSTART FIELD\nWRTFLG   DC    X'00'              TWO BIT COPY FLAG, X'03'=WRITE BLOCK\nCOUNTFLG DC    C'Y'               COUNT OPTION DEFAULT VALUE\nHEXFLG   DC    C'Y'\nSUMFLG   DC    C'Y'\nVTOCFLAG DC    C'N'               VTOC ONLY FLAG               HD OCT88\n* ----------------------------------------------------------  SBG 04/00\n         DS    0D               START ON DWORD BOUNDARY\nFULLWRK1 DS    0F               FULLWORD WORK AREA\n         DC    H'0'\nHALFWRK1 DC    H'0'             HALFWORD WORK AREA\nFULLWRK2 DS    0F               FULLWORD WORK AREA\n         DC    H'0'\nHALFWRK2 DC    H'0'             HALFWORD WORK AREA\n* ----------------------------------------------------------  SBG 04/00\n         EJECT\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,            +\n               LRECL=133,BLKSIZE=133                         FPAJ MAY99\n         EJECT\n* MAXIMUM BLKSIZE IS 32760                                     HD DEC86\nINPUT    DCB   DDNAME=INPUT,MACRF=RC,DSORG=PS,RECFM=U,DEVD=TA,         +\n               BLKSIZE=32760,EODAD=EODS,SYNAD=SYNERR,EXLST=EXITLIST\n         EJECT\nOUTPUT   DCB   DDNAME=OUTPUT,MACRF=(E),EODAD=EODADBAD,DSORG=PS,   -CWB-+\n               IOBAD=EXCPIOB,DEVD=TA,EXLST=EXLSTOUT               -CWB-\n         EJECT\n         LTORG\n         EJECT\n* MAIN LOOP AND MAIN LINE CODE STARTS HERE\nSKIPEOVP DS    0H                 SKIPEOV OPTION CONTROL ROUTINE\n         USING EXIT+4096,R12\n         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB-\n*                                      BLOCK ENTRY.               -CWB-\n         CLC   CEOVNO,SKPEOVNO\n         BNL   SKIPTMPR\n         SR    R4,R4              ZERO TO GET GOOD BLK CNT EVEN IF     +\n                                  SKIPTM OR SKIPEOV USED.\n         SR    R8,R8              (RE)-ZERO BYTE COUNTER\n         ST    R8,BLKCNT          (RE)-ZERO BLKCNT\n         BAL   R5,READER          CHECK FOR DOUBLE TAPEMARK\n         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)\n         BNE   CONTROL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A +\n                                                    LABEL).\n         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   +\n                                  TAPEMARK OR THE LOAD POINT.\n         BNE   CONTROL            BIF IT ISN'T THE FIRST\n         CLC   RECBUF(4),=C'EOV1'\n         BNE   CONTROL\n         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'\n         B     CONTROL            POSITION PAST TAPEMARK AND GOTO EODS\nSKIPTMPR CLC   CTPMKNO,SKIPTMNO   SKIPTM OPTION CONTROL ROUTINE\n         BL    SKIPEOVP+12\n         SR    R8,R8              CLEAR CTR FOR TOTAL BYTES ON TAPE\n         ST    R8,BLKCNT          (RE)-ZERO BLKCNT\n         OI    WRTFLG,X'02'       OR IN  'ALL TM & EOV SKIPPING DONE'\n         L     R1,CTPMKNO         GET TAPEMARK COUNT.             -CWB-\n         SR    R0,R0              CALCULATE NUMBER OF SL FILES    -CWB-\n         D     R0,=F'3'                WE HAVE SKIPPED.           -CWB-\n         ST    R1,TRUESEQN        SAVE AS LABEL= VALUE.           -CWB-\n         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB-\n*                                      BLOCK ENTRY.               -CWB-\nPROCESS  DS    0H                 TOP OF OUTER MAIN LOOP\n         SR    R4,R4              ZERO BLK COUNTER\n         ST    R4,FILEBYTS        CLEAR FILE BYTE COUNT.          -CWB-\n         ST    R4,MAX             RESET MAX BLKSIZE WATCHER\n         MVC   MIN,=F'65535'      RESET MIN BLKSIZE WATCHER\n         MVC   PREVHDR1,HDR1FLAG     SAVE PREV LABEL INDICATION.  -CWB-\n         MVI   HDR1FLAG,C'N'             ASSUME NO HDR1 LABEL.    -CWB-\n         MVI   LABLFLAG,C'N'      ASSUME THIS FILE IS NOT A LABEL.-CWB-\nPROCESS2 DS    0H                 TOP OF MAIN INNER LOOP\n         C     R4,READNO          SEE IF BLK IS TO BE READ FOR SUMMARY\n         BNL   OTHRCHKS\n         BAL   R5,READON          READ BLK, CALC LENGTH, DO MIN/MAX\n         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)\n         BNE   NOLABEL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A +\n                                                    LABEL).\n         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   +\n                                  TAPEMARK OR THE LOAD POINT.\n         BNE   *+18               BIF IT ISN'T THE FIRST\n         CLC   RECBUF(4),=C'EOV1'\n         BNE   *+8\n         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'\n         CLI   SUMFLG,C'Y'        SEE IF SUMMARY OPTION IS YES\n         BE    CHKLABEL           DO SUMMARY PROCESSING IF SO\nNOLABEL  C     R4,LISTNO\n         BNH   LISTER             BRANCH TO LIST BLOCK\n         B     PROCESS2\nOTHRCHKS C     R4,LISTNO\n         BNL   CHKCNT             BRANCH IF EVERYTHING ALREADY LISTED\n         BAL   R5,READON\nLISTER   BAL   R5,LISTON\n         B     PROCESS2\nCHKCNT   CLI   COUNTFLG,C'N'\n         BE    CONTROL\n         BAL   R5,READER          TOP    OF MAIN COUNTBLK OPTION LOOP\n         B     *-4                BOTTOM OF MAIN COUNTBLK OPTION LOOP\nCONTROL  CNTRL INPUT,FSM          FORWARD SPACE TO NEXT TAPEMARK,      +\n                                  THEN BACKSPACE OVER IT.\n         SR    R4,R4              RE-ZERO CURRENT BLK COUNT\n         ST    R4,MAX             ZERO MAX TO INHIBIT BLK COUNT MSG\n         SR    R8,R8              IS THIS NECESSARY?\n         BAL   R5,READON          NOW READ THE TAPEMARK\n         BAL   R5,LISTON          RETURN HERE IF NO TAPEMARK - ERROR!\n         BAL   R2,PUTLINE         PRINT ERR MSG\n         MVC   MSGBUF(37),=C'0ERROR - EXPECTED TAPEMARK NOT FOUND.'\n         B     EXITRC8\nREADON   DS    0H\n         MVC   RECBUF,BLANKBUF    CLEAR FIRST PART OF BUFFER FAST\nREADER   XC    TAPE(4),TAPE       CLEAR ECB\n         LA    R2,RECBUF\n         READ  TAPE,SF,INPUT,(R2),65535\n*                                     READ A BLK OR TAPEMARK (WE HOPE)\n         CHECK TAPE\n         MVI   MARK,X'00'         SET TO X'FF' WHEN TAPEMARK READ (EOD)\n         LA    R4,1(R4)           COUNT THE BLK JUST READ FOR DATASET\n         L     R6,TAPE+16         GET PTR TO IOB\n*        LH    R6,14(R6)          GET RESIDUAL COUNT\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK1,FULLWRK1  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK1(2),14(R6)     FULL HALFWORD OF RESIDUAL COUNT\n         L     R6,FULLWRK1        FULLWORD LOAD\n*        LH    R7,INPUT+(DCBBLKSI-IHADCB)\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK2,FULLWRK2  CLEAR FULLWORK WORKAREA\n*        MVC   HALFWRK2(2),INPUT+(DCBBLKSI-IHADCB)\n         MVC   HALFWRK2(2),=X'FFFF'    ASSUME BLOCKSIZE IS 65535\n         L     R7,FULLWRK2        FULLWORD LOAD\n         SR    R7,R6              COMPUTE BLOCK'S LENGTH\n         BNH   BADREC             BIF ZERO OR NEG RECORD LENGTH\n         L     R1,FILEBYTS        ADD BLOCK LENGTH TO TOTAL       -CWB-\n         AR    R1,R7                   BYTE COUNT FOR THIS        -CWB-\n         ST    R1,FILEBYTS             FILE.                      -CWB-\n         AR    R8,R7              COUNT ALL BYTES READ DURING RUN\n         C     R7,MAX             COMPARE CURRENT BLK'S SIZE WITH MAX\n         BNH   *+8                SKIP IF OLD MAX IS BIGGER\n         ST    R7,MAX             STORE NEW MAX BLK LENGTH\n         C     R7,MIN             COMPARE BLK'S SIZE WITH PREVIOUS MIN\n         BNL   *+8                SKIP IF OLD MIN IS SMALLER\n         ST    R7,MIN             STORE NEW MINIMUM BLOCK LENGTH\n         SPACE 1                                               HD DEC86\n         TM    SENSW,1        DID WE GET THE SENS INFO?\n         BO    DENEND         YEP,GO ON\n         LA    R1,=AL3(SENSCMND) POINT TO SENS CMDS\n         LA    R2,INPUT       POINT TO INPUT DATASET\n         LR    R6,R4          SAVE R4\n         BAL   R4,EXECEXCP    DO SENS EXCP\n         LR    R4,R6          RESTORE R4\n         OI    SENSW,1        TELL'M WE BEEN HERE BEFORE\n         SPACE 1                                               HD DEC86\nRD3480A  CLI   FLAG3480,C'Y'  ARE WE PROCESSING A 3480?        HD DEC86\n         BNE   RD3480Z        NO, CHECK 1600/6250              HD DEC86\n         MVI   TAPEDENS,C'5'  SELECT DENSITY=5                 HD NOV86\n         MVC   PRTDENS(4),=CL4' 38K'                           HD JAN89\n         B     DENEND         MOVE TEXT AND END DENSITY CHK    HD NOV86\nRD3480Z  DS    0H                                              HD DEC86\n         SPACE 1                                               HD DEC86\n         TM    SENSBYTS+3,4   P.E. = 1600 BPI\n         BNO   TRY6250        NOPE, TRY 6250BPI\n         MVI   TAPEDENS,C'3'      SET DENS FOR 1600 BPI\n         MVC   PRTDENS(4),=CL4'1600'\n         B     DENEND\nTRY6250  L     R2,(DCBDEBAD-IHADCB)+INPUT GET DEB PTR\n         L     R2,DEBUCBAD(R2)    GET UCB PTR\n         TM    16(R2),2           UCBTYP = 6250BPI?\n         BNO   TRY800             NOPE, TRY 800 BPI\n         MVI   TAPEDENS,C'4'      SET DEN FOR 6250BPI\n         MVC   PRTDENS(4),=CL4'6250'\n         B     DENEND\nTRY800   TM    INPUT+(DCBDEN-IHADCB),B'10000011' 800BPI?\n         BNO   TRY556             TRY 556BPI\n         MVI   TAPEDENS,C'2'      SET DENS\n         MVC   PRTDENS(4),=CL4' 800'  TO 800 BPI\n         B     DENEND             BRANCH AROUND 556 CODE         -HMD-\nTRY556   DS    0H ANYONE STILL USING THESE TURKEYS? DO YOUR OWN THING\n* I AM, AND WHOSE CALLING THEM TURKEYS, SUCKER                   -HMD-\n         MVI   TAPEDENS,C'1'      DEN=1 FOR 556 BPI              -HMD-\n         MVC   PRTDENS(4),=CL4' 556'  MOVE DEN TO PRINT          -HMD-\nDENEND   DS    0H\n         CLI   WRTFLG,X'03'       SEE IF SHOULD WRITE TO OUTPUT TAPE\n         BNE   READEREX\n         STH   R7,WRTCMND+6       STORE BLK LENGTH IN WRITE CCW\n         LA    R1,=AL3(WRTCMND)\n         LA    R2,OUTPUT\n         LR    R6,R4              SAVE R4 (CURRENT FILE BLK CNT)\n         BAL   R4,EXECEXCP\n         LR    R4,R6              RESTORE R4 (CURRENT FILE BLK COUNT)\nREADEREX NI    WRTFLG,X'03'       ZERO OFF POSSIBLE 'NOVOLSER' BIT\n         BR    R5                 RETURN FROM READON SUBROUTINE\nLISTON   DS    0H                                              HD JAN89\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPD           YES..BYPASS PRINT            HD JAN89\n         MVI   MSGBUF,C'0'\n         LA    R0,4               PREPARE TO RESERVE 4 LINES\n         BAL   R2,PAGECHK         RESERVE 4 LINES\n         BAL   R2,PUTLINE2        LIST THE FIRST PART OF THE BLOCK\n         MVC   MSGBUF+1(132),RECBUF\nHEXON    DS    0H                                              HD JAN89\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPD           YES, BYPASS PRINT            HD JAN89\n         CLI   HEXFLG,C'N'        SEE IF HEXLIST SPECIFIED\n         BCR   8,R5               BER R5 RETURN IF HEXLIST NOT SPECIFID\n         MVC   MSGBUF+1(132),RECBUF\n         MVI   TRINT1+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES\n         MVI   TRINT2+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES\n         C     R7,=F'132'         SEE IF LENGTH OF BLK EXCEEDS 1 LINE\n         BH    TRINT1             BRANCH IF LE 132 BYTES\n         BCTR  R7,0               CONVERT BLK LENGTH TO MACHINE LENGTH\n         STC   R7,TRINT1+1        AND STORE IN 1ST TR INSTRUCTION\n         STC   R7,TRINT2+1        AND IN THE SECOND ONE\nTRINT1   TR    MSGBUF+1(132),TRT1 MODIFIED INSTRUCTION (LENGTH)\n         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL\n         BAL   R2,PUTLINE3        PRINT FIRST LINE OF HEX\n         DC    C'TRT111'\n         MVC   MSGBUF+1(132),RECBUF\nTRINT2   TR    MSGBUF+1(132),TRT2 MODIFIED INSTRUCTION (LENGTH)\n         BAL   R2,PUTLINE3        PRINT SECOND LINE OF HEX\n         DC    C'TRT222'          FILLER\nVTOCBYPD BR    R5                 RETURN FROM LISTON OR HEXON SUBR\nCHKLABEL DS    0H\n         MVI   LABLFLAG,C'Y'      NOTE WE HAVE A LABEL.           -CWB-\n         MVI   MSGBUF,C'0'\n         MVC   MSGBUF+1(132),RECBUF\n         CLC   RECBUF(4),=C'HDR1'\n         BE    HDR1\n         CLC   RECBUF(4),=C'EOF1'\n         BE    EOF1EOV1\n         CLC   RECBUF(4),=C'HDR2'\n         BE    HDR2\n         CLC   RECBUF(4),=C'EOF2'\n         BE    EOF2EOV2\n         CLC   RECBUF(4),=C'VOL1'\n         BE    VOL1\n         CLC   RECBUF(4),=C'EOV1'\n         BE    EOF1EOV1\n         CLC   RECBUF(4),=C'EOV2'\n         BE    EOF2EOV2\n         MVI   LABLFLAG,C'N'      OOPS, NO LABEL.                 -CWB-\n         B     NOLABEL            IT'S NOT A LABEL AFTER ALL\nHDR1     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP1           YES, BYPASS THIS MESS        HD JAN89\n         MVI   HDR1FLAG,C'Y'      NOTE HEADER LABEL FILE.         -CWB-\n         LA    R0,14              PREPARE TO RESERVE 14 LINES\n         BAL   R2,PAGECHK\n         MVC   MSGBUF,BLANKBUF    CLEAR PRINT BUFFER FAST\n         MVI   MSGBUF+43,C'*'     MOVE IN SEED FOR FILL\n         MVC   MSGBUF+44(47),MSGBUF+43 FILL IN REST OF ASTERISKS\n         MVI   MSGBUF,C'-'\n         BAL   R2,PUTLINE3        PRINT LINE OF ASTERISKS\n         DC    C'HDR222'\n         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL TO BLANK\n         BAL   R2,PUTLINE3        PRINT 2ND LINE OF ASTERISKS\n         DC    C'HDR333'\n         MVC   MSGBUF+45(44),=C' DATASET SEQUENCE NUMBER 0000  (LABEL=0+\n               000) '\n         MVC   MSGBUF+70(4),RECBUF+31  MOVE IN DATASET SEQUENCE NUMBER\n*        MVC   MSGBUF+83(4),RECBUF+31  AND MOVE IT IN AGAIN       -CWB-\nVTOCBYP1 DS    0H                                              HD JAN89\n         L     R5,CURRVTOC        POINT TO CURRENT VTOC BLOCK.    -CWB-\n         CLI   0(R5),VTOCEPB      IS THIS BLOCK FULL?             -CWB-\n         BL    NXTENTRY           IF NOT, BRANCH.                 -CWB-\n         GETMAIN  R,LV=VTOCBLSZ   ELSE, GET CORE FOR ANOTHER BLOCK-CWB-\n         ST    R1,0(R5)           SAVE FOREWARD POINTER.          -CWB-\n         MVI   0(R5),VTOCEPB      REINSERT THE ENTRY COUNT.       -CWB-\n         LR    R5,R1              MAKE NEW BLOCK CURRENT.         -CWB-\n         ST    R1,CURRVTOC                                        -CWB-\n         LA    R3,8(R5)           STEP OVER INITIAL DOUBLEWORD.   -CWB-\n*                                      R3 POINTS AT CURRENT ENTRY.-CWB-\n         SR    R0,R0              CLEAR ENTRY COUNT AND FORWARD   -CWB-\n         ST    R0,0(R5)                POINTER IN NEW BLOCK.      -CWB-\n         MVI   0(R5),1            CHANGE ENTRY COUNT TO 1.        -CWB-\n         B     CLEARVEN           GO CLEAR THE FIRST ENTRY.       -CWB-\nNXTENTRY LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT VTOC ENTRY.     -CWB-\n         SR    R1,R1              INCREMENT ENTRY COUNT.          -CWB-\n         IC    R1,0(R5)                                           -CWB-\n         LA    R1,1(R1)                                           -CWB-\n         STC   R1,0(R5)                                           -CWB-\n         USING VTOC,R3            R3 WILL ALWAYS POINT TO ENTRY.  -CWB-\nCLEARVEN MVC   VTOC(VTOCSIZE),BLANKBUF  CLEAR OUT VTOC ENTRY.     -CWB-\n         L     R1,TRUESEQN        ADVANCE THE TRUE DATA SET       -CWB-\n         LA    R1,1(R1)                SEQUENCE NUMBER COUNT.     -CWB-\n         ST    R1,TRUESEQN                                        -CWB-\n         L     R1,TRUESEQN        USE TRUE SEQUENCE NUMBER (AS    -CWB-\n         CVD   R1,DBLWORK              OPPOSED TO WHAT THE LABEL  -CWB-\n         OI    DBLWORK+7,X'0F'         SAYS) IN THE LABEL=XXXX    -CWB-\n         UNPK  MSGBUF+83(4),DBLWORK    PART OF THE MESSAGE.       -CWB-\n         MVC   VTOCSEQN,MSGBUF+83 ALSO USE IT IN VTOC.            -CWB-\n         CLI   VTOCFLAG,C'Y'           VTOC ONLY?              HD JAN89\n         BE    VTOCBYP2                YES, FILL IN LABEL REC  HD JAN89\n         BAL   R2,PUTLINE3        PRINT MSG BETWEEN TWO LINES OF STARS\n         DC    C'HDR444'\n         MVC   MSGBUF+44(47),MSGBUF+43 REFILL WITH ASTERISKS\n         BAL   R2,PUTLINE3\n         DC    C'HDR555'\n         BAL   R2,PUTLINE3\n         DC    C'HDR666'\n         MVC   MSGBUF+40(56),BLANKBUF CLEAR ASTERISKS TO BLANKS\n         MVC   MSGBUF+1(80),RECBUF\n         MVC   MSGBUF+82(35),=C'1ST HEADER LABEL RECORD,  FILE NO. '\nVTOCBYP2 DS    0H                                              HD JAN89\n         MVC   MSGBUF+116(4),RECBUF+31 MOVE IN DATASET SEQUENCE #\n         MVC   DATASEQ,RECBUF+31  SAVE DATASET SEQUENCE #\n         MVI   MSGBUF,C'-'        CCTRL FOR 2 BLANK LINES, THEN PRINT\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP3           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'HDR111'\n         BAL   R5,HEXON           PRINT HEX IF OPTION IS YES\nVTOCBYP3 DS    0H                                              HD JAN89\n         CLC   RECBUF+54(6),=C'000000' SEE IF BLK CNT = 0\n         BNE   DOBLKCNT\n         MVC   MSGBUF,BLANKBUF\n         MVI   SWT2,X'01'               MOVE IN HEADR CODE        -HMD-\nLBL1     DS    0H\n         MVC   MSGBUF+6(7),=C'DSNAME='\n         MVC   MSGBUF+13(17),RECBUF+4\n         LTR   R3,R3                  DO WE HAVE A VTOC ENTRY?    -CWB-\n         BZ    *+10                   IF NOT, SKIP DSN SAVE.      -CWB-\n         MVC   VTOCDSN,RECBUF+4   SAVE DSN FOR VTOC.              -CWB-\n         MVC   MSGBUF+32(14),=C'CREATION DATE=' (MOVED OVER)      -CWB-\nCHKDATE  DS    0H                 CHECK FOR VALID DATA            -HMD-\n         L     R6,=A(NUBTABL)     LOAD TABLE ADDRESS              -HMD-\n         CLC   =C'00000',RECBUF+42 CHECK FOR ZERO CREATION DATE   -HMD-\n         BE    BADCREDT           BAD CREATION DATE               -HMD-\n         TRT   RECBUF+42(5),0(R6) CHECK FOR NUMERICS              -HMD-\n         BZ    DATEOK1            DATE IS OK                      -HMD-\nBADCREDT DS    0H                 CREATION DATE IS BAD            -HMD-\n         L     R1,AMSGBP46        POINT TO MESSAGE BUFFER         -HMD-\n         MVC   0(8,R1),=C'INVALID ' MOVE INVALID TO MSG           -HMD-\n         OI    SWT2,C'0'          INDICATE BAD DATE               -HMD-\n         B     CDATBAD            SKIP DATE CONVERSION         HD JAN89\nDATEOK1  DS    0H                                                 -HMD-\n         PACK  BADLNGTH+4(4),RECBUF+42(5)   CONVERT FOR DATE SUBROUTINE\n         L     R2,BADLNGTH+4\n         LA    R1,AMSGBP46        PTR TO PTR TO DATE SUBR'S RSULT -CWB-\n         L     R15,=V(DATE)       IRSS DATECONV SUBROUTINE\n         BALR  R14,R15            DATE SUBROUTINE\nCDATBAD  DS    0H                                              HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-\n         MVC   VTOCCREA,MSGBUF+46 SAVE DATE FOR VTOC.             -CWB-\n         CLC   RECBUF+48(5),=C'00000'  DOES TAPE HAVE EXP DATE?   -HMD-\n         BE    EXPIRED            IF NOT, BRANCH.                 -CWB-\n         MVC   MSGBUF+56(16),=C'EXPIRATION DATE='  ELSE, LIST IT. -CWB-\n         TRT   RECBUF+48(5),0(R6)    SEE IF VALID EXPDT           -HMD-\n         BZ    DATEOK2            YES, IS VALID                   -HMD-\nBADEXPDT L     R1,AMSGBP72        GET POINTER TO MSG BUFFER       -HMD-\n         MVC   0(8,R1),=C'INVALID ' MOVE INVALID TO MSG BUFFER    -HMD-\n         OI    SWT2,C'0'          INDICATE ERROR                  -HMD-\n         B     EDATBAD            FORGET DATE CONVERSION          -HMD\nDATEOK2  PACK  BADLNGTH+4(4),RECBUF+48(5)                         -CWB-\n         L     R2,BADLNGTH+4      DO CONVERSION AS BEFORE.        -CWB-\n         LA    R1,AMSGBP72                                        -CWB-\n         L     R15,=V(DATE)                                       -CWB-\n         BALR  R14,R15                                            -CWB-\nEDATBAD  DS    0H                                              HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-\n         MVC   VTOCEXPR,MSGBUF+72 SAVE EXP DATE FOR VTOC.         -CWB-\nEXPIRED  EQU   *                                                  -CWB-\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP4           CONTINUE PROCESSING          HD JAN89\n         MVI   MSGBUF,C'0'\n         BAL   R2,PUTLINE3\n         DC    CL6'LBL111'\n         BAL   R5,PUTERROR        SEND WARNING MESSAGE            -HMD-\nVTOCBYP4 B     LABELEND           END OF THIS LABEL           HD  JAN89\nPUTERROR DS    0H                 ERROR MESSAGE ROUTINE           -HMD-\n         CLI   SWT2,X'03'         SEE IF ERROR                    -HMD-\n         BLR   R5                 BRANCH IF NO ERROR              -HMD-\n         CLI   SWT2,C'1'          IS THIS A HDR ERROR?            -HMD-\n         BNE   TRLRERR            NO, MUST BE A TRAILER ERROR     -HMD-\n         MVC   ERR1MSG(4),=C'HDR1'                                -HMD-\n         B     *+10                                               -HMD-\nTRLRERR  MVC   ERR1MSG(4),=C'EOF1'                                -HMD-\n         MVC   MSGBUF,BLANKBUF    CLEAR OUTPUT BUFFER             -HMD-\n         BAL   R2,PUTLINE2                                        -HMD-\n         MVC   MSGBUF(LMSG),ERR0MSG                               -HMD\n         BR    R5                 RETURN TO CALLER                -HMD-\nEOF1EOV1 DS    0H\n         CLC   DATASEQ,RECBUF+31  COMPARE OLD DATASET SEQ. NO. TO  THE +\n                                  CURRENT ONE.\n         BE    NEWSEQNO           SKIP ERROR MSG IF EQUAL\n         CLI   DATASEQ,C'N'       SEE IF 'NONE' STILL IN DATASEQ\n         BE    NEWSEQNO           SKIP ERR MSG IF NO PREVIOUS HDR1\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP5           YES, BYPASS THIS MESS        HD JAN89\n         BAL   R2,PUTLINE2\n         MVC   MSGBUF(100),=C'0ERROR - THE DATASET SEQ. NO. ON THE FOLL+\n               OWING LABEL DOES NOT MATCH THAT ON THE PRECEDING HDR1 LA+\n               BEL'\n         LA    R0,6               PREPARE TO RESERVE 6 LINES\n         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINTOUT\nVTOCBYP5 DS    0H                                              HD JAN89\n         MVC   MSGBUF+1(132),RECBUF RESTORE MSGBUF\nNEWSEQNO MVC   DATASEQ,RECBUF+31  GET NEW DATASET SEQUENCE NUMBER\n         MVC   MSGBUF+82(35),=C'1ST TRAILER LABEL RECORD, FILE NO. '\n         MVC   MSGBUF+116(4),RECBUF+31\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    DOBLKCNT           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'EOF1EV'\n         BAL   R5,HEXON\nDOBLKCNT MVC   MSGBUF,BLANKBUF\n         MVI   SWT2,X'02'         INDICATE IN TRAILER ROUTINE     -HMD-\n         MVC   MSGBUF+82(12),=C'BLOCK COUNT=' (MOVED OVER.)       -CWB-\n         MVC   MSGBUF+94(6),RECBUF+54                             -CWB-\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    LBL1               IF NOT, SKIP SAVE.              -CWB-\n         CLI   VTOCOUNT,C' '      HAS THE TRUE BLOCK COUNT BEEN   -CWB-\n         BNE   LBL1                    FILLED IN?  IF SO, BRANCH. -CWB-\n         MVC   VTOCOUNT,RECBUF+54 ELSE, FILL IT IN FROM THE LABEL.-CWB-\n         B     LBL1\nEOF2EOV2 DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP6           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT\n         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINT\n         MVC   MSGBUF+82(35),=C'2ND TRAILER LABEL RECORD, FILE NO. '\n         B     LBL2\nHDR2     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP6           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,8               PREPARE TO RESERVE 8 LINES  FOR PRINT\n         BAL   R2,PAGECHK         RESERVE PRINT\n         MVC   MSGBUF+82(35),=C'2ND HEADER LABEL RECORD,  FILE NO. '\nLBL2     DS    0H\n         MVC   MSGBUF+116(4),DATASEQ\n         BAL   R2,PUTLINE3\n         DC    C'HDR222'\n         BAL   R5,HEXON\nVTOCBYP6 DS    0H                                              HD JAN89\n         MVC   BLKSIZE(5),RECBUF+5\n         MVC   LRECL(5),RECBUF+10\n         MVC   RECFM(1),RECBUF+4  MOVE F, U, OR V PART OF RECFM DESC.\n         SR    R1,R1\n         CLI   RECBUF+38,C'R'     SEE IF BLOCKING ATTRIBUTE IS 'BS'\n         BNE   *+18               BIF NOT BS (BS AS IN 'VBS')\n         LA    R1,2\n         MVC   RECFM+1(2),=C'BS'\n         B     CTRLCHAR\n         CLI   RECBUF+38,C' '     SEE IF BLOCKING ATTRIBUTE IS UNBLKED\n         BE    CTRLCHAR           BIF UNBLOCKED\n         MVC   RECFM+1(1),RECBUF+38   MOVE B OR S BLOCK ATTRIBUTE CHAR\n         LA    R1,1               BUMP PTR PAST THE B OR S\nCTRLCHAR LA    R1,RECFM+1(R1)\n         MVC   0(1,R1),RECBUF+36\n         MVC   TRTCH(2),RECBUF+34\n         CLC   TRTCH(2),LBL2MSG+1 SEE IF IT'S 2 BLANKS\n         BNE   *+10\n         MVC   TRTCH(8),=C'STANDARD' 9-TRK\n         CLI   VTOCFLAG,C'Y'      CHECK FOR VTOC ONLY          HD JAN89\n         BE    VTOCBYP7           BYPASS PRINT                 HD JAN89\n         BAL   R2,PUTLINE\nVTOCBYP7 DS    0H                                              HD JAN89\n         MVC   MSGBUF(109),LBL2MSG\n         CLI   RECBUF,C'H'        SEE IF IS 'HDR2'\n         BNE   LABELEND           BIF IT WAS EOF2 OR EOV2      HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    NOVSTUFF           IF NOT, SKIP SAVES.             -CWB-\n         MVC   VTOCRECF,RECFM     COPY DATA FOR VTOC.             -CWB-\n         MVC   VTOCLREC,LRECL                                     -CWB-\n         MVC   VTOCBLKS,BLKSIZE                                   -CWB-\n         MVC   VTOCDEN,PRTDENS                                    *SRH*\n         MVC   VTOCTRTC,RECBUF+34                                 -CWB-\n         MVC   VTOCJOBN,RECBUF+17                                 -CWB-\n         MVC   VTOCSTEP,RECBUF+26                                 -CWB-\nNOVSTUFF EQU   *                                                  -CWB-\n         MVC   MSGBUF+2(120),MSGBUF+1    CLEAR MOST OF MSGBUF\n         MVC   CRMSG+15(8),RECBUF+17\n         MVC   CRMSG+32(8),RECBUF+26\n         CLI   VTOCFLAG,C'Y'                                   HD JAN89\n         BE    VTOCBYP8                                        HD JAN89\n         BAL   R2,PUTLINE2\n         MVC   MSGBUF+6(L'CRMSG),CRMSG\nVTOCBYP8 B     LABELEND                                        HD JAN89\n         EJECT                                                 HD JAN89\n************************************************************** HD JAN89\n**                                                             HD JAN89\n**        ROUTINE TO HANDLE VOLSER FILE AND PRINT VOLSER       HD JAN89\n**                                                             HD JAN89\n************************************************************** HD JAN89\nVOL1     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP9           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT\n         BAL   R2,PAGECHK         AND RESERVE THEM\n         MVC   MSGBUF+82(19),=C'VOLUME LABEL RECORD'\n         MVI   MSGBUF,C'0'\n         BAL   R2,PUTLINE3\n         DC    C'VOL111'\n         BAL   R5,HEXON\nVTOCBYP9 DS    0H                                              HD JAN89\n         MVC   MSGBUF,BLANKBUF\n         MVC   MSGBUF+6(21),=C'VOLUME SERIAL NUMBER='\n         MVC   MSGBUF+27(6),RECBUF+4\n         MVC   MSGBUF+40(19),=C'OWNER INFORMATION='''\n         MVC   MSGBUF+59(10),RECBUF+41\n         MVI   MSGBUF+69,C''''\n         MVC   VSNSAVE,RECBUF+4   SAVE VSN AND OWNER FOR USE      -CWB-\n         MVC   OWNERSAV,RECBUF+41      IN VTOC LISTING.           -CWB-\n         MVI   MSGBUF,C'0'\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPA           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'VOL222'\n         CLC   (JFCBINX+JFCBVOLS-JFCB)(6),RECBUF+4 SEE IF VOLUME MATCH\n         BE    LABELEND           BIF SAME                     HD JAN89\n         MVC   NOMATCH+46(6),RECBUF+4               VOL ON VOL1\n         MVC   NOMATCH+84(6),JFCBINX+JFCBVOLS-JFCB  VOL ON INPUT DD\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(90),NOMATCH\nVTOCBYPA DS    0H                                              HD JAN89\n         TM    WRTFLG,X'01'       ARE WE MAKING A COPY?        -CWB-\n         BZ    LABELEND           IF NOT, CONTINUE PROCESSING. -CWB-\n         L     R0,CTPMKNO         GET CURRENT TAPEMARK NUMBER\n         LTR   R0,R0              SEE IF IT'S ZERO (NO TAPEMARKS YET)\n         BNZ   LABELEND           BIF A TAPEMARK HAS ALREADY BEEN READ\n         TM    JFCLTSV,X'02'      SEE IF 'SL' (OR SUL) BIT IS ON\n         BZ    LABELEND           IF IT'S NOT THEN 'NO VERIFY' (BLP OR +\n                                  AL) WAS SPECIFIED IN JCL; SO KEEP ON.\n         BAL   R2,PUTLINE         PRINT OPERATOR ERROR TERMINATION MSG\n         MVC   MSGBUF(38),=C'0TERMINATION DUE TO WRONG TAPE MOUNTED'\n         B     EXITRC8\nLABELEND B     PROCESS2                                        HD JAN89\n         EJECT                                                 HD JAN89\n************************************************************** HD JAN89\n**                                                             HD JAN89\n**               EOD PROCESSING                                HD JAN89\n**                                                             HD JAN89\n************************************************************** HD JAN89\nEODS     DS    0H\n*        AP    MARKNO,=P'1'       COUNT THE TAPEMARK              -CWB-\n*        UNPK  MARKNUM,MARKNO                                     -CWB-\n         L     R1,MARKNO          COUNT THE TAPEMARK (COUNT       -CWB-\n         LA    R1,1(R1)                STORED IN BINARY FORM).    -CWB-\n         ST    R1,MARKNO                                          -CWB-\n         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-\n         UNPK  MARKNUM,DBLWORK                                    -CWB-\n         OI    MARKNUM+3,X'F0'\n         LA    R1,1\n         A     R1,CTPMKNO         CURRENT NUMBER OF TAPEMARKS PASSED\n         ST    R1,CTPMKNO         IS NOW UPDATED TO ACTUAL VALUE\n         L     R1,BLKCNT          BLKS IN PREVIOUS DATASETS\n         AR    R1,R4              ADD NO. OF BLKS IN DATASET JUST READ\n         ST    R1,BLKCNT          TO GET TOTAL BLKS READ SO FAR (EXCEPT+\n                                  FOR SKIPPING - SKIPEOV OR SKIPTM).\n         CLI   WRTFLG,X'03'       SEE IF COPY BEING DONE NOW\n         BNE   *+24               SKIP WRITING TAPEMARK IF NOT\n         LA    R1,=AL3(WTMCMND)   PTR TO PTR TO WTM CCW FOR OUTPUT TAPE\n         LA    R2,OUTPUT          DCB FOR WTM EXCP OUTPUT\n         ST    R4,SVR4            SAVE R4 FOR EXEC ESCP CALL\n         BAL   R4,EXECEXCP        CAL SUBROUTINE TO ISSUE EXCP\n         L     R4,SVR4            RESTORE R4\n         CLI   COUNTFLG,C'N'\n         BE    SIMPLETM           BIF COUNT OPTION NOT SPECIFIED\n         L     R0,MAX\n         LTR   R0,R0\n         BZ    SIMPLETM           BIF NO COUNTING WORK HAS BEEN DONE\n         LTR   R4,R4              BYPASS MAX/MIN/AVG IF           -CWB-\n         BZ    SIMPLETM                NO RECORDS.                -CWB-\n         L     R1,MIN\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  MINMSG,BADLNGTH\n         L     R1,MAX\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  MAXMSG,BADLNGTH\n         LR    R1,R4              COPY COUNT OF RECORDS AND DIVIDE-CWB-\n         SRA   R1,1                    BY 2 TO ROUND THE AVERAGE. -CWB-\n         A     R1,FILEBYTS        ADD NUMBER OF BYTES IN FILE.    -CWB-\n         SR    R0,R0              CLEAR R0 FOR DIVIDE.            -CWB-\n         ST    R0,FILEBYTS        ALSO CLEAR FILEBYTS FOR NEXT    -CWB-\n*                                      FILE.                      -CWB-\n         DR    R0,R4              DIVIDE FOR AVERAGE BLOCK SIZE.  -CWB-\n         CVD   R1,BADLNGTH        MAKE AVERAGE SIZE PRINTABLE.    -CWB-\n         OI    BADLNGTH+7,X'0F'                                   -CWB-\n         UNPK  AVGMSG,BADLNGTH                                    -CWB-\n         CVD   R4,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  COUNTMSG,BADLNGTH\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    NOSAVE             IF NOT, BRANCH.                 -CWB-\n         CLI   LABLFLAG,C'Y'      IS THIS A LABEL FILE?           -CWB-\n         BE    NOSAVE             IF SO, DON'T SAVE STAT'S.       -CWB-\n         MVC   VTOCMINB,MINMSG    SAVE MIN, MAX, AVG, AND COUNT   -CWB-\n         MVC   VTOCMAXB,MAXMSG         FOR VTOC LISTING.          -CWB-\n         MVC   VTOCAVGB,AVGMSG                                    -CWB-\n         MVC   VTOCOUNT,COUNTMSG                                  -CWB-\nNOSAVE   EQU   *                                                  -CWB-\n*        MVI   EOVM+1,120         SET LENGTH FOR POSSIBLE LONG EOV-CWB-\n         MVI   EOVM+1,CNTSEND-TPMKMSG-1  SET LENGTH FOR MVC.      -CWB-\n*        MVI   MSGBUF+100,C' '    PREPARE TO CLEAR PART OF MSG BUF-CWB-\n*        MVC   MSGBUF+101(32),MSGBUF+100 CLEAR LAST PART OF  BUFFE-CWB-\n         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER COMPLETELY.        -CWB-\n*        MVC   MSGBUF+18(87),EOVNUM+3                             -CWB-\n         MVC   MSGBUF+18(CNTSEND-EOVNUM-3),EOVNUM+3 COPY MESG.    -CWB-\n         LA    R5,PUTLINE2        SPECIFY LONG TYPE OF TAPEMARK MSG\n         B     TMSGDONE\nSIMPLETM MVI   EOVM+1,33          SET LENGTH OF POSSIBLE EOV MSG\n         LA    R5,PUTLINE         SPECIFY SHORT TPMK FOUND MSG IF ANY\n*************************************************************  HD AUG86\n** LABEL TMSGDONE REPLACED BELOW                           **  HD AUG86\n*************************************************************  HD AUG86\n*TMSGDONE  CLI   MARK,X'FF'\n*          BE    EOVPROC\n*          MVI   MARK,X'FF'\n*************************************************************  HD AUG86\n** END OF REPLACED CODE SEGMENT                            **  HD AUG86\n*************************************************************  HD AUG86\nTMSGDONE DS    0H                                                 -CWB-\n         CLI   EOV1FLG,C'Y'\n         BE    EOVPROC            BIF 'EOV PENDING' FLAG SET\n         CLI   MARK,X'FF'         TWO CONSECUTIVE MARKS?          -CWB-\n         BNE   SKPCHK             IF NOT, BRANCH.                 -CWB-\n         CLI   PREVHDR1,C'N'      PREV FILE A HDR1 LABEL?         -CWB-\n         BE    EOVPROC            IF NOT, GO DO EOV.              -CWB-\nSKPCHK   MVI   MARK,X'FF'         NOTE THIS MARK FOUND.           -CWB-\n         CLC   SKPEOVNO,CEOVNO    SKIP SKIPTM PROCESSSING IF\n         BH    SKIPEOVP           SKIPEOV PROCESSING IS BEING DONE\n         CLC   CTPMKNO,SKIPTMNO   COMPARE CTPMKNO WITH SKIPTMNO\n         BL    SKIPTMPR           BRANCH TO DO POSSIBLE SKIPTM PROCESS\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPB           BYPASS PRINT IF YES.         HD JAN89\n         BALR  R2,R5              TO PUTLINE OR PUTLINE2\nVTOCBYPB DS    0H                                              HD JAN89\n         MVC   MSGBUF(18),TPMKMSG\n         OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY\n         CLC   CTPMKNO,MAXTMNO\n         BL    PROCESS\n         CLI   WRTFLG,X'03'       CHECK IF COPY BEING DONE\n         BNE   *+16               SKIP IF IT'S NOT BEING DONE\n         LA    R1,=AL3(WTMCMND)   OTHERWISE WRITE AN EXTRA TAPEMARK,\n         LA    R2,OUTPUT          JUST TO MAKE SURE.  THIS COULD\n         BAL   R4,EXECEXCP        RESULT  IN 3 TAPEMARKS IN LAST EOV.\n         B     PRENDMSG\nEOVPROC  DS    0H                 HANDLES END-OF-VOLUME INDICATIONS\n         MVI   EOV1FLG,C'N'       CLEAR 'EOV PENDING' FLAG\n*        AP    EOVNO,=P'1'        COUNT EOV'S                     -CWB-\n*        UNPK  EOVNUM,EOVNO                                       -CWB-\n         L     R1,EOVNO           COUNT EOV'S (COUNT STORED       -CWB-\n         LA    R1,1(R1)                IN BINARY FORM).           -CWB-\n         ST    R1,EOVNO                                           -CWB-\n         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-\n         UNPK  EOVNUM,DBLWORK                                     -CWB-\n         OI    EOVNUM+2,X'F0'\n*        MVC   WRITELOG+11(3),EOVNUM                              -CWB-\n*WRITELOG WTL  'EOV000 ENCOUNTERED'                               -CWB-\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPC           YES..BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE\nVTOCBYPC DS    0H                                              HD JAN89\nEOVM     MVC   MSGBUF(00),TPMKMSG LENGTH SPECIFIED IN EODS EXIT\n         LA    R1,1\n         A     R1,CEOVNO\n         ST    R1,CEOVNO\n         C     R1,SKPEOVNO\n         BL    SKIPEOVP           BIF SKIPEOV BEING DONE\n         BNE   NOTJUST            BIF SKIPEOV PROCESSING NOT JUST DONE\n         CLC   CTPMKNO,SKIPTMNO   SEE IF SKIPTM PROCESSING COMPLETED\n         BL    NOTJUST            BIF NOT, SKIPTMNO SHOULD BECOME      +\n                                  ACTUAL NUMBER OF TAPEMARKS SKIPPED.\n         MVC   SKIPTMNO,CTPMKNO   MORE THAN SKIPTMNO WERE SKIPPED DUE  +\n                                  SKIPEOV; RESET SKIPTMNO TO INDICATE  +\n                                  ACTUAL NUMBER SKIPPED (FOR LNGTH EST)\nNOTJUST  DS    0H\n         OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY\n         CLC   CEOVNO,MAXEOVNO\n         BL    PROCESS\n         SPACE 2                                               HD JAN89\nPRENDMSG DS    0H                                              HD JAN89\n         CLI   COUNTFLG,C'N'\n         BE    SHORT              SKIP TO NOT PRINT COUNTS\n         LA    R0,6               PREPARE TO RESERVE 6 LINES FOR PRINT\n         BAL   R2,PAGECHK         RESERVE THEM\n         LA    R1,=AL3(SENSCMND)  RE-SENSE AT END OF PROCESSING\n         LA    R2,INPUT           PTR TO DCB FOR EXCP CALL\n         BAL   R4,EXECEXCP\n         CLI   FLAG3480,C'Y'      IS THIS A 3480 DEVICE        HD JAN89\n         BE    ADDDEN3            YES, CONTINUE WITH PROCESS   HD JAN89\n         MVI   INDEX+3,8          SINCE 9-TRK, LOAD OFFSET     HD JAN89\n         TM    SENSBYTS+3,X'04'   CHECK IF PE, 1 = PE = 1600 BPI\n         BNO   CK6250             CK FOR 6250 BPI 9TRK\n         MVI   (DCBDEN-IHADCB)+INPUT,X'C3' SET DEN=1600 BPI INDICATOR\n         MVI   LNGTHEST+50,C'3'   SET DENSITY = 3              HD JAN89\n         B     ADDDEN3            CONTINUE WITH LENGTH CHECK   HD JAN89\n         SPACE 1\nEIGHTBPI DS    0H\n         MVI   INDEX+3,0          SET OFFSET IN BPI TABLE      HD JAN89\n         MVI   INPUT+(DCBDEN-IHADCB),X'83' SET DEN=800 BPI INDICATOR\n         MVI   LNGTHEST+50,C'2'   SET DENSITY = 2              HD JAN89\n         B     ADDDEN3            CONTINUE WITH LENGTH CHECK   HD JAN89\n         SPACE 1\nCK6250   L     R2,(DCBDEBAD-IHADCB)+INPUT GET DEB ADDR\n         L     R2,DEBUCBAD(R2)    GET UCB ADDR\n         TM    16(R2),2           CK UCBTYP FOR 6250 BPI\n         BNO   EIGHTBPI           NOPE, ASSUME 800 BPI         HD JAN89\n         MVI   (DCBDEN-IHADCB)+INPUT,X'D3' SET DENS=4 FOR 6250 BPI\n         MVI   LNGTHEST+50,C'4'   SAY DENS=4\n         MVI   INDEX+3,12         SET INDEX FOR 6250 BPI       HD JAN89\n         B     ADDDEN3            BYPASS SOME CODE\n         SPACE 1\n*\n*         FORMULA FOR LENGTH IN INCHES FOLLOWS:\n*         INCHES=R8/BPI+(IBG*BLKCNT+CTPMKNO*TMLENGTH)/1000\n         SPACE 1\nADDDEN3  L     R15,CTPMKNO        LOAD NUMBER OF TAPEMARKS READ\n         S     R15,SKIPTMNO       SUBTRACT NUMBER OF TAPEMARKS SKIPPED\n         MH    R15,TMLENGTH       MULTIPLY BY (TAPEMARK LENGTH*1000)\n         CLI   FLAG3480,C'N'      3480?                        HD JAN89\n         BE    ADDEN3A            YES, BYPASS THIS             HD JAN89\n         MVI   LNGTHEST+50,C'5'   INDICATE DENSITY=5           HD JAN89\n         L     R1,BLKCNT          LOAD BLOCK COUNT             HD JAN89\n         MH    R1,GAP3480         MULT TO GET GAP LEN*1000     HD JAN89\n         AR    R1,R15             GET TOTAL GAP + TM LGTH*1000 HD JAN89\n         SR    R0,R0              CLEAR FOR DIVIDE             HD JAN89\n         D     R0,=F'1000'        GET TOTAL TAPEMARK+GAP IN.   HD JAN89\n         LR    R15,R1             SAVE FOR LATER               HD JAN89\n         L     R2,BPI3480         LOAD DENSITY                 HD JAN89\n         B     ADDEN3B            CONTINUE WITH CALCULATION    HD JAN89\nADDEN3A  DS    0H                                              HD JAN89\n         L     R2,INDEX           LOAD INDEX INTO BPI/IBG TABLE\n         L     R1,BLKCNT          LOAD BLOCK COUNT\n         MH    R1,BPIBGTBL(R2)    MULTIPLY TO GET TOTAL GAP LENGTH*1000\n*                                                              HD JAN89\n         AR    R1,R15             GET TOTAL GAP + TAPEMARK LENGTH*1000\n         SR    R0,R0\n         D     R0,=F'1000'        GET TOTAL TAPEMARK+ GAP LENGTH INCHES\n         LR    R15,R1             SAVE THIS FOR LATER\n         LH    R2,BPIBGTBL+2(R2)  LOAD PHYSICAL BPI (NOT LOGICAL BPI)\n*                                                              HD JAN89\nADDEN3B  DS    0H                                              HD JAN89\n         LR    R1,R8              LOAD TOTAL BYTE COUNT\n         SR    R0,R0\n         DR    R0,R2              DIVIDE BYTE COUNT BY PHYSICAL BPI\n         AR    R1,R15             GET TOTAL LENGTH IN INCHES\n         SR    R0,R0\n         D     R0,=F'12'          GET FEET IN R1, INCHES IN R0\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  LNGTHEST+17(4),BADLNGTH\n         CVD   R0,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  LNGTHEST+27(2),BADLNGTH\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(81),LNGTHEST\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(106),LNGTHACC\n         MVI   SHORTNOW+1,LNGTHEST-ENDMSG-1  SET LENGTH OF MESSAGE-HMD-\n         CVD   R8,BADLNGTH        TOTAL BYTES READ (FOR COUNT OPT ONLY)\n         OI    BADLNGTH+7,X'0F'   SET SIGN NIBBLE\n         UNPK  BYTES,BADLNGTH\n         L     R8,BLKCNT          TOTAL BLKS READ ON TAPE, EXCLUDING   +\n                                  THOSE READ DURING SKIP PROC%SSING.\n         CVD   R8,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  NBLKS,BADLNGTH\nSHORT    BAL   R2,PUTLINE         PRINT 'SUCCESSFUL END' MSG\nSHORTNOW MVC   MSGBUF(L'ENDMSG),ENDMSG (LENGTH MODIFIED FOR COUNTBLKS)\n         L     R2,ERRCOUNT        COUNT OF SYNAD EXITS TAKEN\n         LTR   R2,R2              SEE IF ZERO\n*        BZ    EXIT               EXIT IF SO                      -CWB-\n         BZ    LISTVTOC           GO DO VTOC IF SO.               -CWB-\n         CVD   R2,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  ERRSUMSG+22(5),BADLNGTH\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'ERRSUMSG),ERRSUMSG\n*        B     EXIT                                               -CWB-\n         SPACE 3\nLISTVTOC CLC   FRSTVTOC+1(3),=AL3(0)  DID WE MAKE A VTOC?         -CWB-\n         BE    EXIT               IF NOT, SKIP IT.                -CWB-\n         LA    R0,100             RESERVE 100 LINES (FORCE EJECT).-CWB-\n         BAL   R2,PAGECHK                                         -CWB-\n         BAL   R2,PUTLINE         OUTPUT VTOC HEADING.            -CWB-\n         MVC   MSGBUF(VHEADLEN),VTOCHEAD                          -CWB-\n         BAL   R2,PUTLINE         OUTPUT COLUMN HEADINGS.         -CWB-\n         MVC   MSGBUF(L'VTOCHED2),VTOCHED2                        -CWB-\n         L     R4,FRSTVTOC        GET ADDRESS OF FIRST VTOC BLOCK.-CWB-\n         SR    R8,R8              CLEAR R8 FOR 1-BYTE COUNTS.     -CWB-\nNEXTVBLK LA    R3,8(R4)           GET ADDRESS OF FIRST ENTRY IN   -CWB-\n*                                      THE VTOC BLOCK.            -CWB-\n         IC    R8,0(R4)           GET THE NUMBER OF ENTRIES IN    -CWB-\n*                                      THIS VTOC BLOCK.           -CWB-\nNEXTLINE MVC   MSGBUF,BLANKBUF    BUILD THE VTOC ENTRY LINE:      -CWB-\n         MVC   MSGBUF+1(4),VTOCSEQN    DATA SET SEQUENCE NUMBER.  -CWB-\n         MVC   MSGBUF+7(17),VTOCDSN    DATA SET NAME.             -CWB-\n         MVC   MSGBUF+26(4),VTOCRECF   RECFM.                     -CWB-\n         MVC   MSGBUF+32(5),VTOCLREC   LRECL.                     -CWB-\n         MVC   MSGBUF+40(5),VTOCBLKS   BLKSIZE.                   -CWB-\n         MVC   MSGBUF+47(4),VTOCDEN    DENSITY.                   -CWB-\n         MVC   MSGBUF+53(2),VTOCTRTC   TRTCH.                     -CWB-\n         CLC   VTOCTRTC,LBL2MSG+1    Q. TRTCH IS BLANKS.          -HMD-\n         BNE   *+10                  A. NO, LEAVE AS IT IS        -HMD-\n         MVC   MSGBUF+53(3),=C'STD'     INDICATE STD. TRTCH       -HMD-\n         MVC   MSGBUF+59(5),VTOCMAXB   MAXIMUM BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+68(5),VTOCMINB   MINIMUM BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+77(5),VTOCAVGB   AVERAGE BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+86(6),VTOCOUNT   NUMBER OF BLOCKS.          -CWB-\n         MVC   MSGBUF+95(8),VTOCCREA   CREATION DATE.             -CWB-\n         MVC   MSGBUF+105(8),VTOCJOBN  JOB NAME.                  -CWB-\n         MVC   MSGBUF+115(8),VTOCSTEP  STEP NAME.                 -CWB-\n         MVC   MSGBUF+125(8),VTOCEXPR  EXPIRATION DATE.           -CWB-\n         BAL   R2,PUTLINE3        OUTPUT THE LINE.                -CWB-\n         DC    CL6'VTOC--'        REQUIRED DEAD SPACE.            -CWB-\n         LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT ENTRY.          -CWB-\n         BCT   R8,NEXTLINE        LOOP IF MORE IN THIS BLOCK.     -CWB-\n         LR    R1,R4              POINT TO VTOC BLOCK.            -CWB-\n         L     R4,0(R4)           GET ADDRESS OF NEXT BLOCK.      -CWB-\n         LA    R0,VTOCBLSZ        GET VTOC BLOCK SIZE.            -CWB-\n         FREEMAIN  R,LV=(0),A=(1) FREE UP VTOC BLOCK'S CORE.      -CWB-\n         LA    R4,0(R4)           CLEAR HIGH-ORDER BYTE.          -CWB-\n         LTR   R4,R4              IS FOREWARD POINTER ZERO?       -CWB-\n         BZ    EXIT               IF SO, WE'RE DONE.              -CWB-\n         B     NEXTVBLK           ELSE, GO DO NEXT BLOCK.         -CWB-\n         EJECT\nCTPMKNO  DC    F'0'               # OF TAPEMARKS ALREADY ENCOUNTERED\nCEOVNO   DC    F'0'               # OF DOUBLE TAPEMARKS PASSED\nSVR4     DC    F'0'               FOR SAVING R4 TEMPORARILY\nBLKCNT   DC    F'0'               KEEPS TRACK OF TOTAL BLKS READ ON TAPE\n                                  EXCLUDING THOSE READ DURING SKIPPING.\nMAX      DC    F'0'               KEEPS TRACK OF MAX BLK LEN   HD DEC86\nMIN      DC    F'65535'           KEEPS TRACK OF MIN BLK LEN   HD DEC86\nTMLENGTH DC    H'3750'            DEFAULT TAPEMARK LENGTH*1000 (9-TRK)\nINDEX    DC    F'0'               NOCONV=+4, +DEN*8            HD DEC86\n         EJECT\n*\n*  -.-.-.- DO NOT CHANGE THE ORDER OF THE FOLLOWING TABLE -.-.-.-.\n*\n*TBLORG EQU BPIBGTBL-20           THEORETICAL ORIGIN OF BPIBGTBL\n*                                 WHICH IS LIKE A 3-D ARRAY:\n*                                 NOCONV=+4, +DEN*8\nBPIBGTBL DC    H'601,800'    800 BPI NOCONV 9-TRK\n         DC    H'1,1'       1600 BPI CONV   9-TRK (NOT USED)\n         DC    H'651,1600'  1600 BPI NOCONV 9-TRK\n         DC    H'300,6250'  6250 BPI NOCONV 9-TRK                 *SRH*\n*  TABLE END                                                      *SRH*\nGAP3480  DC    H'100'       3480 GAP                           HD JAN89\nBPI3480  DC    F'38000'     3480 DENSITY                       HD JAN89\nMARKNO   DC    F'0'               NUMBER OF TAPE MARKS READ.      -CWB-\nEOVNO    DC    F'0'               NUMBER OF EOV'S PROCESSED.      -CWB-\nTPMKMSG  DC    C'0TAPEMARK NO. '\nMARKNUM  DC    C'    '\n         DC    C' -- EOV NO. '\nEOVNUM   DC    CL3'000'\n         DC    C'    BLOCK LENGTHS:  MIN='                        -CWB-\nMINMSG   DC    C'00000'\n         DC    C'  MAX='                                          -CWB-\nMAXMSG   DC    C'00000'\n         DC    C'  AVG='                                          -CWB-\nAVGMSG   DC    C'00000'                                           -CWB-\n         DC    C'    NUMBER OF BLOCKS='\nCOUNTMSG DC    C'000000'\nCNTSEND  EQU   *                                                  -CWB-\nDATASEQ  DC    CL4'NONE'\nENDMSG   DC    C'0SUCCESSFUL PROCESSING OF THIS TAPE COMPLETED'\n         DC    C':    TOTAL BYTES READ='\nBYTES    DC    C'XXXXXXXXXXX'    NUMBER OF BYTES READ             -HMD-\n         DC    C'    NUMBER OF DATA BLOCKS READ='\nNBLKS    DC    C'XXXXXX'\nLNGTHEST DC    C'0LENGTH ESTIMATE=XXXX FEET YY INCHES ASSUMING DEN=X AN+\n               D TRTCH=STANDARD           '\nLNGTHACC DC    C'0(LENGTH ESTIMATE USUALLY ACCURATE WITHIN PLUS OR MINU+\n               S TEN PERCENT;  ALMOST ALWAYS WITHIN TWENTY PERCENT)'\nLNGT3480 DC    C'0LENGTH TEST BYPASSED FOR 3480 CARTRIDGE DEVICE' -HMD-\nLNGT348A DC    C'0LENGTH MEANINGLESS FOR CARTRIDGE TAPE'       HD DEC86\nLBL2MSG  DC    CL12'0     RECFM='\nRECFM    DC    CL18'          BLKSIZE='\nBLKSIZE  DC    CL18'XXXXX       LRECL='\nLRECL    DC    CL20'XXXXX               '\nDENSITY  DC    CL6'TRTCH='\nTRTCH    DC    CL35' '\nCRMSG    DC    C'CREATED BY JOB          IN STEP         '\nMARK     DC    X'00'              'TAPEMARK JUST READ' FLAG (00 = NOT)\nEOV1FLG  DC    C'N'               SET EOV1FLG =C'Y' WHENEVER 1ST BLK   +\n                                  AFTER A TAPEMARK IS 80 BYTES LONG &  +\n                                  STARTS WITH 'EOV1'.\nSWT2     DC    X'00'              SET FOR INVALID CREDT OR EXPDT  -HMD-\nLABLFLAG DC    C'N'               INDICATES WHETHER WE ARE        -CWB-\n*                                      PROCESSING A LABEL FILE.   -CWB-\nPREVHDR1 DC    C'N'               C'Y' IF PREV FILE A HDR1 LABEL. -CWB-\nHDR1FLAG DC    C'N'               C'Y' IF CURRENT FILE A HDR1.    -CWB-\nFLAG3480 DC    C'N'               C'Y' IF TAPE IS A 3480       HD NOV86\nDBLWORK  DC    D'0'               CVB/CVD WORK AREA.              -CWB-\nCURRVTOC DC    A(FRSTVTOC)        CURRENT VTOC BLOCK.             -CWB-\nFRSTVTOC DC    AL1(VTOCEPB),AL3(0)  ADDRESS OF FIRST VTOC BLOCK;  -CWB-\n*                                      HIGH-ORDER BYTE SET TO     -CWB-\n*                                      FORCE FIRST GETMAIN.       -CWB-\nFILEBYTS DC    F'0'               NUMBER OF BYTES IN THIS FILE.   -CWB-\nTRUESEQN DC    F'0'               LABEL= VALUE SEQUENCE NUMBER.   -CWB-\nVTOCHEAD DC    C'-VOLUME TABLE OF CONTENTS FOR '                  -CWB-\nVSNSAVE  DC    C'VSNVSN',C'    '                                  -CWB-\nSAVETRK  DC    C'9 TRACK    '                                     -CWB-\nOWNERSAV DC    CL10'          '                                   -CWB-\nVHEADLEN EQU   *-VTOCHEAD                                         -CWB-\nVTOCHED2 DC    C'-SEQ.  DATA SET NAME     RECFM  LRECL  BLKSIZE DEN TRT+\n               CH  MAX BLK  MIN BLK  AVG BLK  BLK COUNT  CREATED  JOB N+\n               AME  STEP      EXPIRES'                            -CWB-\nERR0MSG  DC    C'0WARNING - THE CREATION DATE AND/OR EXPIRATION DATE  OX\n               N THE ABOVE '\nERR1MSG  DC    C'HDR1'\nERR2MSG  DC    C' LABEL IS INVALID '\nLMSG     EQU   *-ERR0MSG\n         EJECT\n         LTORG\nNOMATCH  DC    C'0WARNING - VOLUME SERIAL NUMBER IN VOL1 LABEL XXXXXX D+\n               OES NOT MATCH INPUT DD VOLSER XXXXXX'\n         EJECT\n*****************************************************************-HMD-\n**  THIS TABLE IS USED TO DETERMINE IF THE VOLSER IN THE JFCB  **-HMD-\n**  OR IN THE UCB IS PRINTABLE EBCDIC. IF SO IT IS DISPLAYED;  **-HMD-\n**  IF NOT, THE DEFAULT CONSTANT IS DISPLAYED..SEE POSMSG.     **-HMD-\n*****************************************************************-HMD-\nEBCDTBL  DS    0C\n         DC    256XL1'FF'                FOR NON-PRINTABLES     -HMD-\n         ORG   EBCDTBL+C' '              SPACES ARE OK          -HMD-\n         DC    X'00'                     MAKE IT OK             -HMD-\n         ORG   EBCDTBL+C'$'              DOLLAR-SIGN            -HMD\n         DC    X'00'                     MAKE IT OK             -HMD-\n         ORG   EBCDTBL+C'#'              POUND-SIGN AND AT-SIGN -HMD-\n         DC    X'0000'                   BOTH ARE OK            -HMD-\n         ORG   EBCDTBL+C'A'              ALPHABET (UPPER-CASE)  -HMD-\n         DC    9X'00'                    OK                     -HMD-\n         ORG   EBCDTBL+C'J'                                     -HMD-\n         DC    9X'00'                                           -HMD-\n         ORG   EBCDTBL+C'S'                                     -HMD-\n         DC    8X'00'                                           -HMD-\n         ORG   EBCDTBL+C'0'              NUMBERS                -HMD-\n         DC    10X'00'                                          -HMD-\n         ORG   ,                         BACK TO REALITY        -HMD-\n         EJECT\n****************************************************************-HMD-\n** THIS TABLE IS USED TO DETERMINE WHETHER THE CREATION DATE  **-HMD-\n** OR THE EXPIRATION DATE IN THE HDR1 OR EOF1 FIELD OF A      **-HMD-\n** STANDARD LABELED TAPE IS NUMERIC. IF NOT, AN ERROR MSG IS  **-HMD-\n** PRINTED AND TAPESCAN CONTINUES.                            **-HMD-\n****************************************************************-HMD-\nNUBTABL  DS    0C                 NUMERIC CHECK TABLE\n         DC    256XL1'FD'         TO DISTINGUISH FROM EBCDTBL\n         ORG   NUBTABL+C'0'       NUMBERS ONLY\n         DC    10X'00'\n         ORG   ,                  BACK TO REALITY\n         EJECT\nDATE     CSECT\n         SAVE  (14,12),T,*\n*      R1 = ADDR FOR OUTPUT (DS CL8'MM/DD/YY')\n*      R2 = R1 FROM THE TIME MACRO\n         LR    R12,R15\n         USING DATE,R12\n         LA    R3,DATESAVE\n         ST    R13,4(,R3)\n         ST    R3,8(,R13)\n         LR    R13,R3\n         USING PARMAREA,R1\n         L     R1,0(,R1)   GET ADDR FOR OUTPUT            *LACCD*\n         ST    R2,W2                    STORE DATE (00YYDDDF)\n         TM    W2+1,01                  IF ODD NOT LEAP.\n         BO    NOLEAP                    NOT LEAP\n         TM    W2+1,X'12'               TEST FOR LEAP (VALID TILL 1999)\n         BM    NOLEAP                   1NOT LEAP\n         MVI   MONTHTBL+5,29            SETUP FEB LEAP YEAR\nNOLEAP   UNPK  MMDDYY+6(3),W2+1(2)           UNPK YR\n         XC    W1(6),W1                  CLEAR YR FOR DAY RTN.\n         CVB   R4,W1                    GET DAY\n         LA    R5,MONTHTBL-4            SET BACK PTR\nMONLUPE  LA    R5,4(R5)                 INCR THRU MON TBL\n         SH    R4,0(R5)                 DROP DOWN THRU MONTBL\n         BH    MONLUPE                  NOT YET, TRY AGAIN\n         AH    R4,0(R5)                 ADD BACK THE DAY\n         CVD   R4,W1                    MAKE\n         OI    W2+3,X'0F'                  THE DAY\n         UNPK  MMDDYY+2(3),W2+2(2)            PRINTABLE\n         MVI   MMDDYY+5,C'/'            RESTORE SLASH\n         MVC   MMDDYY(2),2(R5)          MOVE THE MONTH\n         MVI   MMDDYY+2,C'/'  RESTORE SLASH\n         MVC   THEDATE,MMDDYY         MOVE DATE TO USER\nRETURN   DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),,RC=0 RESTORE REGS AND RETURN\n         EJECT\n         SPACE 2\nMONTHTBL DS    0CL48\nMTK      DC    H'31',C'01' JAN\n         DC    H'28',C'02' FEB\n         DC    H'31',C'03' MAR\n         DC    H'30',C'04' APR\n         DC    H'31',C'05' MAY\n         DC    H'30',C'06' JUN\n         DC    H'31',C'07' JLY\n         DC    H'31',C'08' AUG\n         DC    H'30',C'09' SEP\n         DC    H'31',C'10' OCT\n         DC    H'30',C'11' NOV\n         DC    H'255',C'12' DEC\n         SPACE 2\nDATESAVE     DS    9D\nW1       DS    F              WORKARE1\nW2       DS    F              WORKAREA2\nMMDDYY   DS    CL9\nPARMAREA DSECT\nTHEDATE  DS    CL8\n         SPACE 5\nVTOC     DSECT\nVTOCSEQN DS    CL4                SEQUENCE NUMBER                 -CWB-\nVTOCDSN  DS    CL17               DATA SET NAME.                  -CWB-\nVTOCRECF DS    CL4                RECFM.                          -CWB-\nVTOCLREC DS    CL5                LRECL.                          -CWB-\nVTOCBLKS DS    CL5                BLKSIZE.                        -CWB-\nVTOCDEN  DS    CL4                DENSITY.                        -CWB-\nVTOCTRTC DS    CL2                TRTCH.                          -CWB-\nVTOCMAXB DS    CL5                MAXIMUM BLOCK SIZE.             -CWB-\nVTOCMINB DS    CL5                MINIMUM BLOCK SIZE.             -CWB-\nVTOCAVGB DS    CL5                AVERAGE BLOCK SIZE.             -CWB-\nVTOCOUNT DS    CL6                BLOCK COUNT.                    -CWB-\nVTOCCREA DS    CL8                CREATION DATE.                  -CWB-\nVTOCJOBN DS    CL8                JOB NAME.                       -CWB-\nVTOCSTEP DS    CL8                STEP NAME.                      -CWB-\nVTOCEXPR DS    CL8                EXPIRATION DATE.                -CWB-\n         DS    0D                 ADVANCE TO DOUBLE WORD BNDRY.   -CWB-\nVTOCSIZE EQU   *-VTOC             SIZE OF VTOC ENTRY.             -CWB-\nVTOCEPB  EQU   10                 NUMBER OF ENTRIES PER BLOCK.    -CWB-\nVTOCBLSZ EQU   VTOCEPB*VTOCSIZE+8 SIZE OF VTOC BLOCK.             -CWB-\n         EJECT\n         IEFUCBOB LIST=YES                                        -HMD-\n         EJECT                                                 HD DEC86\n         DCBD  DSORG=PS,DEVD=TA                                HD DEC86\n         EJECT                                                 HD DEC86\nJFCB     DSECT                                                 HD DEC86\n         IEFJFCBN LIST=YES                                     HD DEC86\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPESC46": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x06\\x00\\x00\\x01\\x00\\to\\x01\\x00\\x17O\\x16\\x18\\x07\\x82\\x07y\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "04.06", "flags": 0, "createdate": "2000-04-05T00:00:00", "modifydate": "2000-06-22T16:18:00", "lines": 1922, "newlines": 1913, "modlines": 0, "user": "WSBG"}, "text": "TSCN     TITLE 'TAPESCAN 4.6A - TAPE SCAN AND COPY UTILITY'\n*\n*----------------------------------------------------------------------\n*\n* ABSTRACT - A PROGRAM TO PROVIDE AN OVERVIEW OF THE DATA SETS ON A\n*            TAPE, COPY FILES AND RECOVER DATA PAST THE FIRST END OF\n*            VOLUME INDICATOR.  INFORMATION PRESENTED INCLUDES RECORD\n*            AND BYTE COUNT, LENGTH ESTIMATE, DISPLAY OF THE FIRST 100\n*            BYTES OF THE FIRST FOUR RECORDS OF EACH DATA SET, AND THE\n*            PHYSICAL TAPE FILE NUMBER.\n*\n* WARNINGS - WHEN DATA IS RECOVERED PAST THE END OF VOLUME INDICATOR,\n*            THE FIRST RECORD MAY HAVE BEEN TRUNCATED.  IF ACCEPTED, IT\n*            MAY LEAD TO PROBLEMS EVEN AFTER IT IS COPIED.  WHEN\n*            COPYING DATA SETS FROM A STANDARD LABEL TAPE, THE DATA SET\n*            SEQUENCE NUMBER STORED IN THE HEADER RECORD ISN'T CHANGED.\n*            THIS HAS CAUSED NO PROBLEMS SO FAR, BUT IS NOT SUPPORTED\n*            BY IBM.  SOME OPERATIONS OF THIS PROGRAM ARE BASED ON THE\n*            NUMBER OF TAPE MARKS ENCOUNTERED.\n*\n* RESTRICTIONS - FOR USE WITH TAPE DATA SETS ONLY.\n*\n* DDNAMES - SYSPRINT - A FILE WHICH CONTAINS THE TAPE OVERVIEW REPORT\n*                      AND ANY I/O ERROR MESSAGES.\n*\n*           INPUT    - THE FILE WHICH REFERENCES THE TAPE TO BE SCANNED\n*                      OR COPIED.\n*\n*           OUTPUT   - IF REQUIRED, WILL CONTAIN THE COPY OF THE DATA\n*                      SETS REQUESTED FROM INPUT.\n*\n* PARAMETERS - ALL THE PARAMETERS ARE KEYWORDS.  THEIR MEANINGS,DEFAULT\n*              VALUES AND KEY WORDS ARE:\n*\n*     COPY      - CREATE A COPY OF THE INPUT DATA SETS, LABELS AND\n*                 TAPE MARKS REQUESTED ON OUTPUT.  THE OUTPUT DD\n*                 STATEMENT MUST BE INCLUDED.  NOCOUNT MAY NOT BE\n*                 SPECIFIED.  BY DEFAULT THE PARAMETER IS ASSUMED\n*                 NOT TO BE IN EFFECT.\n*\n*     EOVMOD    - PLACES THE INPUT DATA TO BE COPIED AFTER THE LAST\n*                 DATA SET ON OUTPUT.  THE OUTPUT DD STATEMENT MUST\n*                 BE INCLUDED.  THIS PARAMETER IMPLIES COPY.  NOCOUNT\n*                 MAY NOT BE SPECIFIED.  BY DEFAULT THE PARAMETER\n*                 IS ASSUMED NOT TO BE IN EFFECT.\n*\n*     ERRLIMN   - THE MAXIMUM NUMBER OF I/O ERRORS ALLOWED BEFORE\n*                 PROCESSING IS TERMINATED IS SPECIFIED BY \"N\".  THE\n*                 DEFAULT IS ERRLIM50.\n*\n*     LISTN     - THE NUMBER OF BLOCKS WHICH HAVE ONE LINE PRODUCED\n*                 SYSPRINT IS SPECIFIED BY \"N\".  THE DEFAULT IS LIST\n*\n*     MAXEOVN   - PROCESSING WILL CONTINUE UNTIL \"N\" END OF VOLUME\n*                 INDICATORS HAVE BEEN FOUND.  PROCESSING WILL STOP\n*                 WHEN EITHER MAXTMN OR MAXEOVN IS EXCEEDED.  THE\n*                 DEFAULT VALUE IS MAXEOV1 AND IF SKIPEOVN IS USED\n*                 THEN MAXEOVN MUST BE ONE GREATER THAN SKIPEOVN.\n*\n*     MAXTMN    - STOP PROCESSING AFTER \"N\" TAPE MARKS HAVE BEEN\n*                 ENCOUNTERED.  THIS WILL NOT GO PAST THE END OF VOLUME\n*                 INDICATOR.  THE DEFAULT IS TO PROCESS TO THE END OF\n*                 THE VOLUME.\n*\n*     NOCOUNT   - TO SAVE I/O TIME THE COUNTING FEATURE MAY BE TURNED\n*                 OFF BY THIS PARAMETER.  THE NUMBER OF PHYSICAL BLOCKS\n*                 THE MAXIMUM, AVERAGE AND MINIMUM BLOCK SIZES, THE\n*                 LENGTH AND THE TOTAL NUMBER OF BYTES PROCESSED WILL\n*                 BE REPORTED.  THIS PARAMETER MAY NOT BE USED WITHCOPY\n*                 OR EOVMOD.  BY DEFAULT THE PARAMETER IS ASSUMED\n*                 NOT TO BE IN EFFECT.\n*\n*     NOHEX     - DO NOT PRODUCE THE HEXADECIMAL EQUIVALENT OF THEFIRST\n*                 FEW LINES ON SYSPRINT.  BY DEFAULT THE PARAMETER\n*                 IS ASSUMED TO BE OFF.\n*\n*     NOLIST    - FUNCTIONS THE SAME AS LIST0.  BY DEFAULT THE\n*                 PARAMETER IS ASSUMED NOT TO BE IN EFFECT.\n*\n*     NOSUMMARY - DO NOT PRODUCE THE SUMMARY OF DATA SETS FOR STANDARD\n*                 LABEL TAPE ON SYSPRINT.  BY DEFAULT THE PARAMETER\n*                 IS ASSUMED NOT TO BE IN EFFECT.\n*\n*     NOVOLSER  - DURING A COPY OPERATION BETWEEM TWO STANDARD LABEL\n*                 TAPES, THE VOLUME HEADER LABEL WILL NOT BE COPIED.\n*                 BY DEFAULT THE PARAMETER IS ASSUMED NOT TO BE IN\n*                 EFFECT.\n*\n*     SKIPEOVN  - PROCESSING WILL START AFTER \"N\" NUMBER OF END OF VOL\n*                 INDICATORS HAVE BEEN ENCOUNTERED.  INSURE THAT MAXEOV\n*                 IS AT LEAST ONE GREATER THAN SKIPEOVN. THE DEFAULT IS\n*                 SKIPEOV0.\n*\n*     SKIPTMN   - START PROCESSING AFTER \"N\" TAPE MARKS HAVE BEEN\n*                 ENCOUNTERED.  PROCESSING WILL NOT START PAST THE END\n*                 OF VOLUME INDICATOR.  WHEN BOTH SKIPTMN AND SKIPEOVN\n*                 ARE SPECIFIED THE MAXIMUM AMOUNT OF SKIPPING IS DONE.\n*                 THE DEFAULT IS SKIPTM0.\n*\n*     VTOC      - FOR A STANDARD LABEL TAPE, PRODUCE ONLY THE VTOC\n*                 REPORT, AND NOT THE SAMPLE DUMP OF EACH FILE.\n*\n* DEFAULT PARAMETERS - LIST4,SKIPTM0,MAXEOV1,SKIPEOV0,ERRLIM50\n*\n* RETURN CODES - THE JOB STEP RETURN CODE IS SET IF TAPESCAN ABNORMALLY\n*                TERMINATES.  THIS MAY BE TESTED BY LATER JOB STEPS AND\n*                THEIR EXECUTION BASED ON TAPESCAN'S SUCCESS.  THE\n*                RETURN CODE IS:\n*\n*                8 - TAPESCAN HAS TERMINATED BEFORE PROCESSING HAS BEEN\n*                    COMPLETED.  THIS IS USUALLY CAUSED BY I/O ERRORS O\n*                    INPUT.\n*\n* EXAMPLE -\n*               COPY THE FOURTH AND FIFTH FILES OF A STANDARD LABEL SEV\n*               TRACK 556 BPI EVEN PARITY TAPE NEEDING TRANSLATION AND\n*               CONVERSION, TO THE SECOND AND THIRD FILES OF A TAPE WHI\n*               HAD ONLY ONE FILE.  DO NOT COPY THE VOLUME HEADER RECOR\n*               OR PRODUCE THE HEXADECIMAL OUTPUT ON SYSPRINT.  LIST TH\n*               FIRST 20 RECORDS OF THE INPUT DATA SETS.  STOP PROCESSI\n*               AFTER 5 I/O ERRORS OCCUR.\n*\n*               //COPYTAPE EXEC PGM=TAPESCAN,PARM=('COPY,NOVOLSER',\n*               //            'EOVMOD,SKIPTM10,MAXTM16,LIST20,NOHEX')\n*               //SYSPRINT DD  SYSOUT=A\n*               //INPUT    DD  UNIT=2400-7,DISP=OLD,DCB=(TRTCH=ET,DEN=1\n*               //             EROPT=ACC),VOL=SER=TRACK7\n*               //OUTPUT   DD  UNIT=2400-4,LABEL=2,VOL=SER=OTPTTP\n*\n* ASM/LINK JCL - -\n*    //TAPESCAN     EXEC ASMHCL  (NO SPECIAL PARMS NEEDED)\n*    //ASM.SYSIN     DD  DISP=SHR,DSN=<SOURCE>(TAPESCAN)\n*    //LKED.SYSLMOD  DD  DISP=SHR,DSN=<LOADLIB>(TAPESCAN)\n*\n*--------------------------------------------------------------------\n*\n* THIS PROGRAM, CALLED TAPESCAN, WAS WRITTEN BY WILL DALAND, SOCIAL\n* SCIENCE STATISTICAL LABORATORY, INSTITUTE FOR RESEARCH IN SOCIAL\n* SCIENCE, UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL, MARCH 1974.\n* SEE IRSS MEMO SSSL-7-3 FOR FURTHER DOCUMENTATION.\n*\n* SINCE PROGRAM FOR TAPESCAN WAS PUBLICALLY FUNDED, PERMISSION IS\n* GRANTED FOR ANYONE TO USE THIS PROGRAM IN WHOLE OR IN PART.  IT\n* IS REQUESTED THAT WHEN DOING SO YOU GIVE CREDIT (PREFERABLY BOTH\n* IN SOURCE AND DOCUMENTATION) TO WILL DALAND, IRSS, UNC@CH.\n*\n* VERSION 3.1 INCLUDES EXPIRATION DATE, AVERAGE BLOCK SIZES, AND VTOC\n* LISTING AND WAS PRODUCED BY C. WRANDLE BARTH, GODDARD SPACE FLIGHT\n* CENTER, JANUARY 1975.\n*\n* VERSION 3.2 CORRECTED VARIOUS BUGS.\n*\n* VERSION 3.3 CHANGED OUTPUT TAPE HANDLING TO USE ONLY EXCP.\n*\n* VERSION 3.4 ADDS 6250 BPI TAPE HANDLING.\n* PLACEMENT OF PROGRAM SECTIONS: INIT CODE, INIT SUBS, INIT VARS,\n* INIT LITS, COMMON ROUTINES, COMMON VARS, COMMON LITS, MAIN CODE,\n* MAIN SUBS, MAIN VARS, MAIN LITS.\n*\n* VERSION 4.0 MAJOR PROGRAM REORGANIZATION AND MODIFICATION BY\n* E. LONG, OCT 78\n*\n*   17FEB79, FRANK PAJERSKI, MEMOREX\n*      . DEFAULT LINE-COUNT SET TO 58\n*      . MAX TAPE BLOCKSIZE REDUCED FROM 32767 TO 32760 BYTES\n*        IN ORDER TO KEEP MVS HAPPY\n*\n*   21AUG81, JOHN J. JACOBY, MEMOREX (VERS. 4.1)\n*      . INTRODUCE THE ABILITY TO PRINT VTOC REPORT ONLY\n*        BY SPECIFYING PARM='VTOC'\n*      . ALL OTHER TAPESCAN FUNCTIONS ARE STILL SUPPORTED IF 'VTOC'\n*        IS SPECIFIED, BUT ONLY THE VTOC, INFORMATIONAL AND ERROR\n*        MESSAGES WILL BE PRINTED.\n*      . INCLUDE 'DATE' CSECT SO EVERYTHING IS IN ONE CSECT.\n*\n*   31AUG81, JOHN J. JACOBY, MEMOREX (VERS. 4.2)\n*      . PRINT THE DD CARD VOLSER IN THE VTOC REPORT IF NL TAPE,\n*        PRINT THE TAPE VOLSER IF SL, AND, IF THE DD CARD AND TAPE\n*        DON'T MATCH, THEN ISSUE A WARNING MESSAGE.\n*\n*   09DEC81, FRANK PAJERSKI, ATARI (VERSION 4.2)\n*      . MINOR ESTHETICS ....\n*\n*   12OCT87, SCOTT BARTH, SIGNETICS (VERSION 4.3)\n*      . ADDED OPTION \"INOUT\" TO OPEN MACRO ON INPUT, THIS WILL\n*        SUPPRESS BLOCK COUNT CHECKING ON D/T 3480'S WHICH WILL\n*        PREVENT S237 RC=C ABEND.\n*\n*   24OCT88, FRANK PAJERSKI, SYNTELLIGENCE (VERSION 4.4)\n*      . SIGNETICS SAYS THAT THIS IS RUNNING FINE AGAINST 3480'S\n*        WITH MVS/XA 2.2 AND DFP 2.3 ... AND I SAW IT DO SO.\n*      . MINOR CLEANUP/DELETION OF CIRCA S/360 COMMENTS ... THESE\n*        WERE SO OLD THAT I WAS GETTING TIRED OF EXPLAINING THEM\n*        TO THE YOUNGER FOLKS HERE, AS WELL AS BEING EMBARRASSED.\n*      . THIS STILL RUNS OK UNDER MVS/XA 2.1.7 AND DFP 1.2.  THE\n*        ADDITION OF \"INOUT\" TO HANDLE THE S237 PROBLEM MEANS MESSAGE\n*        IEC510D IF NO TAPE RING IS PRESENT, BUT I CAN LIVE WITH THAT.\n*\n*   11JAN95, SAM GOLOB (VERSION 4.5)\n*      . TRIED TO MAKE DEFAULT FOOTAGES FOR CARTRIDGE TAPES TO BE\n*        LIKE 6250 BPI INSTEAD OF 800 BPI.  WE CAN RELATE TO THOSE\n*        NUMBERS A LITTLE BETTER.  THEY ARE MORE MEANINGFUL TO THE\n*        LIKES OF US.  NO ATTEMPT TO CALCULATE CARTRIDGE FOOTAGES.\n*        INDICATE CART AT END OF PROCESSING AND IN \"TRUE DENSITY\"\n*        MESSAGE.\n*\n*   19MAR00, SAM GOLOB (VERSION 4.6)\n*      . INCREASED MAXIMUM BLOCKSIZE FROM 32K TO 64K.\n*        ABORT THE PROGRAM IF IT CAN'T GETMAIN THE MAXIMUM AMOUNT.\n*\n*   22JUN00, SAM GOLOB (VERSION 4.6A)\n*      . SHOW VOLSER OF INCORRECTLY MOUNTED TAPE VOLUME.\n*        DON'T JUST SAY THAT THE ID DIFFERS.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     OPTIONS IN EFFECT MACRO                         *\n*                                                                     *\n***********************************************************************\n         MACRO\n         OPTN  &COND,&CONST,&VALUE\n         LCLA  &N\n&N       SETA  K'&CONST+1\n         AIF   (K'&COND EQ 0).SKIP\n         BN&COND X&SYSNDX\n.SKIP    MVC   0(&N,R2),=C',&CONST'\n         AIF   (K'&VALUE EQ 0).EXIT\n         L     R1,&VALUE\n         CVD   R1,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  &N.(3,R2),DBLWORK\n&N       SETA  &N+3\n.EXIT    LA    R2,&N.(R2)\nX&SYSNDX DS    0H\n         MEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     INITIALIZATION ROUTINES                         *\n*                                                                     *\n***********************************************************************\nTAPESCAN CSECT\n         USING *,R12,R11,R10\n         SAVE  (14,12),,'TAPESCAN &SYSDATE &SYSTIME'\n         LR    R12,R15\n         LA    R11,4095(R12)\n         LA    R11,1(R11)\n         LA    R10,4095(R11)\n         LA    R10,1(R10)\n         LA    R2,SAVE\n         ST    R2,8(R13)\n         ST    13,SAVE+4\n         LR    R13,R2\n         L     R1,0(R1)           GET PTR TO PARM FIELD\n         LH    R8,0(R1)           LOAD PARM FIELD LENGTH\n         LA    R3,2(R1)           SET PTR TO PARM FIELD CHAR STRING\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    SYSPRINT+DCBOFLGS,X'10'\n         BZ    EXITRC8\n         USING MSECT,@MSECT\n         GETMAIN VU,LA=GMCTRL,A=GMLOCS\n         L     @MSECT,GMLOCS      THERE IS AT LEAST THE MINIMUM CORE\n         LR    R6,@MSECT          START CLEARING GOTTEN MAIN\n         L     R4,GMLOCS+4        ACTUAL LENGTH OF GOTTEN MAIN\n         LA    R5,256             OFT-USED CONSTANT FOR CLEARING MAIN\nCLOOP    CR    R4,R5              R5 CONTAINS F'256'\n         BNH   LE256              BIF ONLY 256 OR FEWER BYTES LEFT\n         XC    0(256,R6),0(R6)    CLEAR 256 BYTES\n         SR    R4,R5              R5 CONTAINS F'256'\n         AR    R6,R5              R5 CONTAINS F'256'\n         B     CLOOP\nLE256    BCTR  R4,0               SET TO MACHINE LENGTH\n         EX    R4,XCLEAR          CLEAR LAST 1 TO 256 BYTES\nXCLEAR   XC    0(0,R6),0(R6)      EXECUTED IN STMT ABOVE\n         MVI   BLANKBUF,C' '      CLEAR BLANK AREA.               -CWB-\n         MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-\n         LA    R1,MSGBUF+46       FOR ADDRESS CONSTANT IN DYNAMIC -CWB-\n         ST    R1,AMSGBP46        STORAGE.                        -CWB-\n         LA    R1,MSGBUF+72       SECOND ADCON.                   -CWB-\n         ST    R1,AMSGBP72                                        -CWB-\n         LA    R15,RECBUF         POINT THE WRITE\n         O     R15,WRTCMND        CCW TO DYNAMICALLY\n         ST    R15,WRTCMND        ALLOCATED RECORD BUFFER.\n         LA    R15,RECBUF         SET FILE SEARCH CCW TO\n         O     R15,READ81CM       POINT TO\n         ST    R15,READ81CM\n         LA    R15,RECBUF         INSERT POINTER IN               -CWB-\n         O     R15,READCMND       READ COMMAND.                   -CWB-\n         ST    R15,READCMND                                       -CWB-\n         LR    R5,@MSECT          PTR TO TRT1\n         LA    R6,16\n         LA    R7,CTABLE\nSETUPTR1 MVC   0(1,5),0(7)        MOVE SEED CHAR INTO TRT1\n         MVC   1(15,5),0(5)       AND PROPAGATE IT\n         LA    5,16(5)\n         LA    7,1(7)\n         BCT   6,SETUPTR1\n         MVC   TRT2(16),CTABLE    MOVE 16 CHAR SEED INTO TRT2\n         MVC   TRT2+16(240),TRT2  AND PROPAGATE IT 15 TIMES\n         TIME  DEC                GET DATE IN R1 IN FORM 00YYJJJF\n         ST    R0,DBLWORK         SAVE TIME WHILE YOU'RE AT IT\n         LR    R2,R1              PUT IN R2 TO PASS TO DATE SUBROUTINE\n         LA    R1,=A(DATERSLT)    PTR TO PTR TO DATE'S RESULT FIELD\n         BAL   R14,DATE           CONVERT 00YYJJJF TO MM/DD/YY  MRX-JJJ\n         ED    TIMERSLT,DBLWORK   EDIT INTO PAGE HEADER LINE BUFFER\n         RDJFCB (INPUT)           READ INPUT TAPE'S JFCB\n         LTR   R15,R15            SEE IF DD STATEMENT THERE\n         BNE   NOINPUT            EXIT WITH ERR MSG IF NOT\n         MVC   DDVOL,JFCBIN+JFCBVOLS PUT VOL INTO PAGE HEAD.      -CWB-\n         MVC   VSNSAVE,JFCBIN+JFCBVOLS\n         MVC   JFCLTSV,JFCBIN+JFCBLTYP SAVE INPUT TAPE'S LABEL TYPE\n         TM    JFCLTSV,X'01'      SEE IF NL OR LTM SPECIFIED\n         BO    *+8                IF IT WAS THEN LEAVE IT AS IT IS\n         MVI   JFCBIN+JFCBLTYP,X'10' ELSE SET TO BLP\n         MVC   JFCBIN+JFCBFLSQ(2),=H'1' SET FILE SEQ. NO. TO = 1\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       PARAMETER SEARCH SECTION                      *\n*                                                                     *\n***********************************************************************\nSRCHPRM  LTR   R8,R8              LOAD AND TEST REMAINING PARM LENGTH\n         BNH   ENDPARMS\n         SR    R5,R5              ZERO CURRENT PARM LENGTH COUNTER\n         LR    R4,R3              SAVE PTR TO START OF PARM\nSRCHCOMA CLI   0(R3),C','\n         LA    R3,1(R3)           BUMP PTR TO NEXT CHAR\n         BE    *+4+4+4\n         LA    5,1(5)             COUNTS LENGTH OF CURRENT PARM\n         BCT   R8,SRCHCOMA\n         CLC   0(4,4),=C'COPY'\n         BE    COPY               TAPE COPYING OPTION\n         CLC   0(5,4),=C'COUNT'\n         BE    COUNT\n         CLC   0(7,4),=C'NOCOUNT'\n         BE    NOCOUNT\n         CLC   0(6,4),=C'ERRLIM'\n         BE    ERRLIM\n         CLC   0(6,4),=C'EOVMOD'  MOD OPTION IMPLIES COPY & COUNT OPTNS\n         BE    EOVMOD\n         CLC   0(5,4),=C'NOHEX'\n         BE    NOHEX\n         CLC   0(4,4),=C'LIST'\n         BE    LIST\n         CLC   0(6,R4),=C'NOLIST'\n         BE    NOLIST\n         CLC   0(6,4),=C'MAXEOV'\n         BE    MAXEOV\n         CLC   0(5,4),=C'MAXTM'   INITIALLY 65535           FJP/20FEB79\n         BE    MAXTM\n         CLC   0(3,4),=C'OPT'\n         BE    OPT                MISCELLANEOUS OPTIONS\n         CLC   0(7,4),=C'SKIPEOV'\n         BE    SKIPEOV\n         CLC   0(6,4),=C'SKIPTM'\n         BE    SKIPTM\n         CLC   0(9,4),=C'NOSUMMARY'\n         BE    NOSUMARY\n         CLC   0(8,4),=C'NOVOLSER'\n         BE    NOVOLSER\n         CLC   0(4,4),=C'VTOC'                                  MRX-JJJ\n         BE    VTOCONLY                                         MRX-JJJ\nUNRECOG  LA    R1,=C'0ERROR - UNRECOGNIZABLE PARAMETER.'\n         BAL   R2,PUTLINE\nBADLEN   LA    R1,=C'0WARNING - INVALID PARM IGNORED.'\n         BAL   R2,PUTLINE\nSRCHPARM BCTR  R8,0\n         B     SRCHPRM\nCOPY     CH    R5,=H'4'\n         BNE   UNRECOG\n         OI    FLAGS,COPYFLG      INDICATE COPY OPTION SPECIFIED\n         B     SRCHPARM\nCOUNT    CH    R5,=H'5'           FINAL PROCESSING OF COUNT OPTION\n         BNE   UNRECOG\n         OI    FLAGS,COUNTFLG\n         B     SRCHPARM\nNOCOUNT  CH    R5,=H'7'\n         BNE   BADLEN\n         NI    FLAGS,255-COUNTFLG\n         B     SRCHPARM\nERRLIM   CH    R5,=H'5'           CHANGE SYNAD ERROR COUNT LIMIT\n         BNH   BADLEN\n         LA    R4,6(R4)\n         SH    R5,=H'6'\n         BAL   R2,GETNUM\n         ST    R6,SYNADNO\n         B     SRCHPARM\nEOVMOD   CH    R5,=H'6'           ADD DATASETS ONTO EOV\n         BNE   UNRECOG\n         OI    FLAGS,COPYFLG+MODFLG+NOVOLFLG\n         B     SRCHPARM\nNOHEX    CH    R5,=H'5'\n         BNE   UNRECOG\n         MVI   HEXFLG,C'N'\n         B     SRCHPARM\nLIST     CH    R5,=H'4'\n         BNH   BADLEN\n         LA    R4,4(R4)\n         SH    R5,=H'4'           GET ACTUAL LENGTH OF PRESUMED NUMBER\n         BAL   R2,GETNUM          GET PRESUMED NUMBER INTO BINARY FORM\n         ST    R6,LISTNO          STORE NONNEGATIVE BINARY INTEGER\n         B     SRCHPARM\nNOLIST   CH    R5,=H'6'           FINAL PROCESSING OF NOLIST PARM\n         BNE   UNRECOG\n         SR    R0,R0\n         ST    R0,LISTNO\n         B     SRCHPARM\nMAXEOV   CH    R5,=H'6'           CHECK LENGTH OF PARM\n         BNH   BADLEN             LENGTH MUST BE GREATER THAN 6\n         LA    R4,6(R4)           BUMP PTR TO START OF PARM'S NUMBER\n         SH    R5,=H'6'           GET ACTUAL LENGTH OF PRESUMED NUMBER\n         BAL   R2,GETNUM          CONVERT NUMBER FOLLOWING 'MAXEOV' PRM\n         LTR   R6,R6              MAKE SURE MAXEOV IS NOT=0\n         BZ    NUMERR             INVALID NUMERICAL COMPONENT\n         ST    R6,MAXEOVNO        STORE RESULT\n         B     SRCHPARM\nMAXTM    CH    R5,=H'5'\n         BNH   BADLEN\n         LA    R4,5(4)\n         SH    R5,=H'5'\n         BAL   R2,GETNUM\n         LTR   R6,R6              MAKE SURE MAXTM IS NOT =0\n         BZ    NUMERR             ERROR - INVALID NUMERICAL PARM\n         ST    R6,MAXTMNO\n         B     SRCHPARM\nOPT      CH    R5,=H'3'\n         BNH   BADLEN\n         LA    R4,4(R4)\n         SH    R5,=H'4'\n         BAL   R2,GETNUM\n         ST    R6,OPTNO\n         B     SRCHPARM\nSKIPEOV  CH    R5,=H'7'\n         BNH   BADLEN\n         LA    R4,7(R4)\n         SH    R5,=H'7'\n         BAL   R2,GETNUM\n         ST    R6,SKPEOVNO\n         B     SRCHPARM\nSKIPTM   CH    R5,=H'6'\n         BNH   BADLEN\n         LA    R4,6(R4)\n         SH    R5,=H'6'\n         BAL   R2,GETNUM\n         ST    R6,SKIPTMNO\n         B     SRCHPARM\nNOSUMARY CH    R5,=H'9'\n         BNE   UNRECOG\n         MVC   SUMMNO,=F'1'       SET # OF BLKS TO READ FOR SUMMARY=0\n         B     SRCHPARM\nNOVOLSER CH    R5,=H'8'\n         BNE   UNRECOG\n*        TM    JFCLTSV,X'31'      SEE IF INPUT HAD LABEL TYPE OF N-CWB-\n*        BNZ   SRCHPARM           BLP, OR LTM, AND BIF SO.        -CWB-\n         OI    FLAGS,NOVOLFLG\n         B     SRCHPARM\nVTOCONLY CH    R5,=H'4'                                         MRX-JJJ\n         BNE   UNRECOG                                          MRX-JJJ\n         OI    FLAGS,VTOCFLAG     SET THE WRITE VTOC ONLY FLAG  MRX-JJJ\n         B     SRCHPARM                                         MRX-JJJ\nGETNUM   DS    0H                 CHAR STRNG INTGR TO BIN INTGR CONV SB\n         SR    6,6                CLEAR ACCUMULATOR\n         CLI   0(4),C'9'          * R4=PTR TO 1ST CHAR OF NUM         *\n         BH    NUMERR             * R5=ACTUAL LENGTH OF NUM           *\n         CLI   0(4),C'0'          * RESULT RETURNED IN R6             *\n         BL    NUMERR             * R2,R4,R5,R6, AND R7 MODIFIED BY   *\n         MH    R6,=H'10'          * USING GETNUM SUBROUTINE.          *\n         IC    R7,0(4)            PICK UP DECIMAL CHARACTER\n         SLL   7,28               CHOP OFF LEFT 4 BITS\n         SRL   7,28               AND SHIFT BACK\n         AR    6,7                ADD DIGIT INTO RESULT\n         LA    4,1(4)             BUMP PTR TO NEXT CHAR\n         BCT   5,GETNUM+2         GO TO TOP OF LOOP\n         BR    2                  RETURN FROM GETNUM SUBROUTINE\nNUMERR   LA    R1,=C'0ERROR - PARAMETER HAS INVALID NUMERICAL COMPONENT+\n               .'\n         BAL   R2,PUTLINE\n         B     BADLEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      PARMETER VALIDITY CHECKING                     *\n*                                                                     *\n***********************************************************************\nENDPARMS DS    0H\n         L     R2,MAXEOVNO\n         BCTR  R2,0               READY TO RESET SKIPEOV IF NECESSARY\n         LA    R1,=C'0SKIPEOV PARM GE MAXEOV; SKIPEOV SET TO MAXEOV-1.'\n         CLC   SKPEOVNO,MAXEOVNO  PARM VALIDITY CHECKING\n         BL    *+4+4+4            SKIP IF NO ERROR\n         ST    R2,SKPEOVNO        STORE IT SET TO MAXEOV-1\n         BAL   R2,PUTLINE\n         L     R2,MAXTMNO         GET READY TO CHANGE SKIPTM\n         BCTR  R2,0\n         LA    R1,=C'0SKIPTM PARM GE MAXTM; SKIPTM SET TO MAXTM-1.'\n         CLC   SKIPTMNO,MAXTMNO\n         BL    *+4+4+4            SKIP IF SKIPTMNO & MAXTMNO CONSISTENT\n         ST    R2,SKIPTMNO        STORE AS MAXTM-1\n         BAL   R2,PUTLINE         PRINT ERROR MESSAGE\n         LA    R1,=C'0BOTH SKIPTM AND SKIPEOV SPECIFIED; SKIPEOV IGNORE+\n               D.'                READY TO PRINT NEXT MESSAGE\n         CLC   SKPEOVNO,=F'0'     SPECIFIED?\n         BE    *+4+6              NO, ITS OK\n         CLC   SKIPTMNO,=F'0'     SPECIFIED?\n         BE    *+4+4+6             NO, ITS OK\n         BAL   R2,PUTLINE         BOTH SPECIFIED, ERROR\n         MVC   SKPEOVNO,=F'0'\n         TM    FLAGS,COPYFLG      IS COPY SPECIFIED?\n         BZ    *+4+4\n         OI    FLAGS,COUNTFLG     YES, TURN ON COUNT ALSO\n         TM    FLAGS,COPYFLG      IS COPY ON?\n         BO    *+4+4\n         NI    FLAGS,255-NOVOLFLG NO, TURN OFF NOVOLFLG\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       PRINT OPTIONS IN EFFECT                       *\n*                                                                     *\n***********************************************************************\n         MVC   MSGBUF,BLANKBUF    START CLEAN\n         MVC   MSGBUF(19),=C' OPTIONS IN EFFECT:'\n         LA    R2,MSGBUF+19       R2=NEXT POSITION TO RECEIVE PARM\n         OPTN  ,LIST,LISTNO\n         CLI   HEXFLG,C'N'\n         OPTN  E,NOHEX\n         TM    FLAGS,COUNTFLG\n         OPTN  Z,NOCOUNT\n         CLC   SUMMNO,=F'1'\n         OPTN  E,NOSUMMARY\n         TM    FLAGS,COPYFLG\n         OPTN  O,COPY\n         TM    FLAGS,MODFLG\n         OPTN  O,EOVMOD\n         TM    FLAGS,NOVOLFLG\n         OPTN  O,NOVOLSER\n         CLC   SKPEOVNO,=F'0'\n         OPTN  H,SKIPEOV,SKPEOVNO\n         CLC   SKIPTMNO,=F'0'\n         OPTN  H,SKIPTM,SKIPTMNO\n         CLC   MAXEOVNO,=F'1'\n         OPTN  H,MAXEOV,MAXEOVNO\n         CLC   MAXTMNO,=F'32760'                            FJP/20FEB79\n         OPTN  L,MAXTM,MAXTMNO\n         CLC   OPTNO,=F'0'\n         OPTN  H,OPT,OPTNO\n         TM    FLAGS,VTOCFLAG                                   MRX-JJJ\n         OPTN  O,VTOC                                           MRX-JJJ\n         MVI   MSGBUF+19,C' '     BLANK OUT FIRST COMMA\n         BAL   R2,PUTLINE3\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     INPUT FILE POSITIONINGS(SKIPEOF/SKIPTM)         *\n*                                                                     *\n***********************************************************************\n         OPEN  (INPUT,INOUT),TYPE=J\n         TM    INPUT+DCBOFLGS,X'10'\n         BZ    NOINPUT            TERMINAL ERROR, EXIT RC=8\n         L     R1,GMCTRL+4        LOAD MAXIMUM REQUESTED GETMAIN LENGTH\n         S     R1,GMLOCS+4        SUBTRACT LENGTH ACTUALLY GOTTEN\n         BZ    SENSLDPT           BIF GOT ALL CORE REQUESTED\n* ----------------------------------------------------------- SBG 04/00\n*   PREVIOUS VERSIONS OF TAPESCAN TRIED TO RUN WITHOUT THE    SBG 04/00\n*   MAXIMUM CORE REQUESTED.  THIS VERSION WILL NOT DO SO,     SBG 04/00\n*   BECAUSE NOWADAYS, WE CAN USUALLY RUN IN A LARGE REGION.   SBG 04/00\n* ----------------------------------------------------------- SBG 04/00\n         CVD   R1,DBLWORK         CONVERT DIFFERENCE TO PACKED DECIMAL\n         LA    1,=C'0WARNING:  TAPESCAN SHOULD HAVE 00000 MORE BYTES OF+\n                CORE FOR RELIABLE OPERATION; PLEASE RUN WITH A LARGER R+\n               EGION.'\n         UNPK  33(5,R1),DBLWORK   PUT THE NUMBER INTO THE\n         OI    37(R1),C'0'        MESSAGE,\n         BAL   R2,PUTLINE         AND PRINT THE MESSAGE.\n         B     EXITRC8     DON'T ATTEMPT CRIPPLED OPERATION.  SBG 04/00\nSENSLDPT LA    R1,=AL3(SENSCMND)  SET UP PTR FOR EXECEXCP CALL\n         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL\n         BAL   R4,EXECEXCP        CALL EXCP SUBROUTINE\n         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED\n         BO    SKIPEOVP           BIF LOAD POINT SENSED\n         LA    R1,=AL3(RWNDCMND)  REWIND AND RE-SENSE COMMAND CHAIN\n         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL\n         BAL   R4,EXECEXCP\n         TM    SENSBYTS+1,X'08'   SEE IF NOW AT LOAD POINT\n         BO    SKIPEOVP           BIF AT LOAD POINT\n         LA    R1,=C'0UNABLE TO REWIND INPUT TAPE TO LOAD POINT - TERMI+\n               NATING EXECUTION.'\n         BAL   R2,PUTLINE         PRINT ERROR MESSAGE\n         B     EXITRC8\nSKIPEOVP DS    0H                 SKIPEOV OPTION CONTROL ROUTINE\n*                                 BLOCK ENTRY.                    -CWB-\n         CLC   EOVNO,SKPEOVNO     FULFILLED SKIPEOV REQUIREMENTS?\n         BL    *+4+6+4            NO\n         CLC   TPMKCNT,SKIPTMNO   FULFILLED SKIPTM REQUIREMENTS?\n         BNL   DONESKIP           YES, DONE WITH SKIPPING\n         BAL   R5,READER          NO, READ FIRST RECORD\n         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)\n         BNE   SKIPPER            NO, NOT A LABEL\n         CLC   RECBUF(4),=C'EOV1'\n         BNE   SKIPPER\n         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'\n         B     SKIPPER            POSITION PAST TAPEMARK AND GOTO EOF\nSKIPEOF  LA    R1,1\n         A     R1,TPMKCNT         CURRENT NUMBER OF TAPEMARKS PASSED\n         ST    R1,TPMKCNT         IS NOW UPDATED TO ACTUAL VALUE\n         CLI   MARK,C'Y'          IS THIS 2ND TMPK?\n         BE    *+4+4              YES, GOT AN EOV\n         CLI   EOV1FLG,C'Y'\n         BE    *+4+4+4            WE FOUND AN EOV\n         MVI   MARK,C'Y'          INDICATE EOF\n         B     SKIPEOVP           TRY AGAIN\n         LA    R1,1               WE FOUND AN EOV\n         A     R1,EOVNO\n         ST    R1,EOVNO\n         B     SKIPEOVP\nDONESKIP DS    0H\n         SR    R8,R8              CLEAR CTR FOR TOTAL BYTES ON TAPE\n         ST    R8,TBLKCNT         (RE)-ZERO BLKCNT\n         OI    FLAGS,SDONEFLG     OR IN  'ALL TM & EOV SKIPPING DONE'\n         L     R1,TPMKCNT         GET TAPEMARK COUNT.             -CWB-\n         SR    R0,R0              CALCULATE NUMBER OF SL FILES    -CWB-\n         D     R0,=F'3'           WE HAVE SKIPPED.                -CWB-\n         ST    R1,TRUESEQN        SAVE AS LABEL= VALUE.           -CWB-\n         LA    R1,EODS            GET NEW EODAD\n         ST    R1,INPUT+DCBEODAD\n         SR        R3,R3          ZERO R3 FOR VTOC ENTRYS\n         EJECT\n***********************************************************************\n*                                                                     *\n*               OUTPUT FILE POSITIONING (MOD PROCESSING)              *\n*                                                                     *\n***********************************************************************\n         TM    FLAGS,COPYFLG      SEE IF COPY AND/OR MOD SPECIFIED\n         BZ    PROCESS            BIF COPY OPTION NOT SPECIFIED\n         RDJFCB (OUTPUT)          ELSE PROCESS COPY AND/OR MOD OPTIONS\n         LTR   R15,R15            SEE IF RDJFCB WENT ALLRIGHT\n         BNE   NOOUTPUT           'MISSING OR INVALID DD' ERROR MSG\n         MVC   POSMSG+22(6),JFCBOUT+JFCBVOLS  PUT VOL IN MSG.     -CWB-\n         MVC   OUTLTYP,JFCBOUT+JFCBLTYP SAVE LABEL TYPE FOR OUTPUT TAPE\n         TM    OUTLTYP,X'01'      SEE IF LABEL IS NL OR LTM\n         BO    *+8                BIF YES - IT IS NL OR LTM\n         MVI   JFCBOUT+JFCBLTYP,X'10' ELSE SET TO BLP\n*COMMENT OI    JFCBOUT+JFCBTSDM,X'08' INHIBIT WRITING BACK OF JFCB\n         LA    R0,1\n         LH    R2,JOUTFLSQ        SAVE ORIGINAL FILE SEQ. NO.\n         LTR   R2,R2              BUT IF IT'S\n         BNZ   *+6                EQUAL TO ZERO THEN\n         LR    R2,R0              SET IT TO = 1.\n         STH   R0,JOUTFLSQ        TEMPORARILY SET FLSQ IN JFCB TO = 1\n         OPEN  (OUTPUT,OUTPUT),TYPE=J\n         TM    OUTPUT+DCBOFLGS,X'10' CHECK IF OPENED SUCCESSFULLY\n         BZ    NOOUTPUT           EXIT RC=8\n         LA    R1,EXCPIOBP        POINT TO IOB BSAM-TYPE PREFIX.  -CWB-\n         IC    R0,OUTPUT+DCBIOBA  CHANGE DCB POINTER FROM EXCP-   -CWB-\n         ST    R1,OUTPUT+DCBIOBA  TYPE TO BSAM-TYPE POINTER       -CWB-\n         STC   R0,OUTPUT+DCBIOBA  FOR \"EXECEXCP\" CONSISTANCY.     -CWB-\n         STH   R2,JOUTFLSQ        RESTORE ORIGINAL FLSQ IN JFCB\n         TM    OUTLTYP,X'42'      SEE IF AL, AUL, SL, OR SUL\n         BZ    COPYOUT            BIF NOT ONE OF ABOVE\n         LA    R1,=AL3(READCMND)  USE EXCP TO READ PRESUMED VOL   -CWB-\n         LA    R2,OUTPUT          LABEL (CHANGED FROM BSAM        -CWB-\n         BAL   R4,EXECEXCP        READING).                       -CWB-\n*        LH    R7,READLENG        GET LENGTH OF READ COMMAND.     -CWB-\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK1,FULLWRK1  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK1(2),READLENG   MOVE ENTIRE HALFWORD\n         L     R7,FULLWRK1        LOAD REGISTER PROPERLY      SBG 04/00\n*        LH    R6,RESIDL          GET RESIDUAL LENGTH AFTER READ. -CWB-\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK2,FULLWRK2  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK2(2),RESIDL     MOVE ENTIRE HALFWORD\n         L     R6,FULLWRK2        LOAD REGISTER PROPERLY\n         SR    R7,R6\n         BNH   BADREC             VERY BAD IF REC LEN LT 1,EXIT RC=8\n         TM    OUTLTYP,X'02'      SEE IF SL OR SUL, OR AL OR AUL\n         BO    COPYSL             BIF SL OR SUL\n*COPYAL  CLC   RECBUF(4),=X'B6AFAC51' SEE IF ANSI 'VOL1'\n         BNE   BADOUTVL           AL OR AUL IN JCL, BUT LABEL NOT ANSI\n         C     R7,=F'80'\n         BL    BADOUTVL           EXIT RC=8\n         B     REWINDCK\nCOPYSL   C     R7,=F'80'          SEE IF PRESUMED IBM SL IS 80 BYTES\n         BNE   BADOUTVL           BIF PRESUMED LABEL NOT 80,EXIT RC=8\n         CLC   RECBUF(4),=C'VOL1'\n         BNE   BADOUTVL           EXIT RC=8\n         CLC   JFCBOUT+JFCBVOLS(6),RECBUF+4 COMPARE VOL SERS\n         BNE   BADOUTVL           EXIT RC=8\nREWINDCK CLC   JOUTFLSQ(2),=H'1'  DO NOT REWIND IF FILE SEQ. NO. GT 1\n         BH    COPYOUT            DO NOT REWIND IF FILE SEQ. NO. GT 1\n         TM    FLAGS,MODFLG+NOVOLFLG DO NOT REWIND IF EOVMOD/NOVOLSER\n         BNZ   COPYOUT\n         LA    R1,=AL3(RWNDCMND)  REWIND COMMAND CHAINED TO SENSE CMND\n         LA    R2,OUTPUT          OUTPUT DCB\n         BAL   R4,EXECEXCP        REWIND AND SENSE\n         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED\n         BO    COPYOUT            BIF SENSED LOADPOINT\n         LA    R1,=C'0UNABLE TO REWIND OUTPUT TAPE TO LOAD POINT - TEMI+\n               NATING EXECUTION.'\n         BAL   R2,PUTLINE\n         B     EXITRC8\nCOPYOUT  DS    0H                 IF NECESS., MOD PROCESSING DONE HERE\n         LA    R0,EODADOUT        ADDRESS OF NEW OUTPUT TAPE EODAD RTN\n         ST    R0,OUTPUT+DCBEODAD AND SET IT UP IN DCB.\nFILELOOP TM    FLAGS,MODFLG       SEE IF MOD SPECIFIED\n         BO    FILEFSM            IF SO THEN DO SRCH FWRD FOR TPMK\n         CLC   COUTFILE,JOUTFLSQ  ARE WE IN RIGHT FILE YET?\n         BNL   FILEMSG            BIF YES\nFILEFSM  LA    R1,=AL3(FSMCMND)   FWRD SPACE JUST PAST NEXT TAPEMARK\n         LA    R2,OUTPUT\n         BAL   R4,EXECEXCP\n         LA    R0,1               MAINTAIN\n         AH    R0,COUTFILE        CURRENT FILE\n         STH   R0,COUTFILE        NUMBER.\n         CH    R0,JOUTFLSQ        BIF NOT YET UP TO SPECIFIED FILE\n         BL    *+12               BIF NOT YET UP TO SPECIFIED FILE\n         TM    FLAGS,MODFLG       SEE IF EOVMOD SPECIFIED\n         BZ    FILEMSG            BIF   EOVMOD NOT SPECIFIED\n         LA    R1,=AL3(READCMND)  PREPARE TO READ WHAT IMMEDIATELY-CWB-\n         LA    R2,OUTPUT          FOLLOWS THE TAPE MARK.          -CWB-\n         BAL   R4,EXECEXCP        (CHANGED TO EXCP FROM BSAM.)    -CWB-\n         B     FILELOOP           ELSE IT'S A BLOCK, SO JUST GO ON\nEODADOUT LA    R0,1               COUNT\n         AH    R0,COUTFILE        THIS\n         STH   R0,COUTFILE        TAPEMARK (THE 2ND ONE OF AN EOV).\n         CH    R0,JOUTFLSQ        SEE IF UP TO SPECIFIED TAPEMARK\n         BL    TOPT456            BIF NOT UP TO SPECIFIED TAPEMARK\n         TM    FLAGS,MODFLG       SEE IF EOVMOD SPECIFIED\n         BO    FILEPOS            BIF EOVMOD SPECIFIED\n         TM    OPTNO,X'10'        SEE IF 'IGNORE EOV'S UNTIL FLSQ SATIS\n         BO    FILEPOS            BIF IT IS SPECIFIED\n         B     BADEOV             GIVE 'EM HELL, HARRY!\nTOPT456  TM    OPTNO,X'10'        TEST FOR OPT268435456\n         BO    FILELOOP           AND IF SPECIFIED IGNORE DOUBLE TPMK\n         B     BADEOV\nFILEPOS  DS    0H                 BACKSPACE PAST 2ND TAPEMARK OF EOV\n         LA    R2,OUTPUT          PTR TO OUTPUT TAPE'S DCB\n         LA    R1,=AL3(BSFCMND)   BACKSPACE PAST ONE TAPEMARK\n         BAL   R4,EXECEXCP\n         LH    R0,COUTFILE        AND\n         BCTR  R0,0               REDUCE CURRENT FILE NO. APPROPRIATELY\n         STH   R0,COUTFILE\nFILEMSG  DS    0H                 PRINT INITIAL OUTPUT POSITION MSG\n         LH    R1,COUTFILE\n         CVD   R1,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  POSMSG+32(4),DBLWORK TELL WHERE 1ST FILE OUTPUT GO-CWB-\n         MVC   POSMSG+47(4),POSMSG+32 MOVE INTO EXPLANATORY COMMEN-CWB-\n         LA    R1,1(R1)           COMPUTE # OF SL FILES\n         SR    R0,R0\n         D     R0,=F'3'\n         STH   R1,COUTFILE        SAVE NEW NUMBER\n         LA    R1,POSMSG\n         BAL   R2,PUTLINE\n         B     PROCESS\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   INITIALIZATION ERRORS ROUTUINES                   *\n*                                                                     *\n***********************************************************************\nBADEOV   LA    R1,=C'0ERROR - EOV INDICATION ENCOUNTERED BEFORE OUTPUT +\n                TAPE FINISHED INITIAL POSITIONING.'\n         BAL   R2,PUTLINE\n         B     EXITRC8\nBADOUTVL LA    R1,=C'0OUTPUT VOLUME LABEL IS INVALID:.'\n         BAL   R2,PUTLINE\n         BAL   R5,LISTON\n         B     EXITRC8\nEODADBAD LA    R1,=C'0ERROR - OUTPUT TAPE HAD TAPEMARK FOLLOWIG LOAD PO+\n               NT, BUT NEITHER LTM OR BLP WAS SPECIFIED.'\n         BAL   R2,PUTLINE\n*                                 (LENGTH FIELD CORRECTED.)       -CWB-\n         B     EXITRC8\nNOINPUT  LA    R1,=C'INPUT DD CARD MISSING OR INVALID.'\n         BAL   R2,PUTLINE\n         B     EXITRC8\nNOOUTPUT LA    R1,=C'OUTPUT DD CARD MISSING OR INVALID.'\n         BAL   R2,PUTLINE\n         B     EXITRC8\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     MAIN FILE PROCESSING ROUTINE                    *\n*                                                                     *\n***********************************************************************\nPROCESS  DS    0H                 TOP OF OUTER MAIN LOOP\n         XC    BLKCNT,BLKCNT      ZERO BLK COUNTER\n         XC    FILEBYTS,FILEBYTS  CLEAR FILE BYTE COUNT.          -CWB-\n         XC    MAX,MAX            RESET MAX BLKSIZE WATCHER\n         MVC   MIN,=X'7FFFFFFF'   RESET MIN BLKSIZE WATCHER\n         MVC   PREVHDR1,HDR1FLAG  SAVE PREV LABEL INDICATION.     -CWB-\n         MVI   HDR1FLAG,C'N'      ASSUME NO HDR1 LABEL.           -CWB-\n         MVI   LABLFLAG,C'N'      ASSUME THIS FILE IS NOT A LABEL.-CWB-\n*\n*                        PROCESS A NEW BLOCK\n*\nPROCESS2 DS    0H                 TOP OF MAIN INNER LOOP\n         CLC   BLKCNT,SUMMNO      SEE IF BLK IS TO BE READ FOR SUMMARY\n         BL    SUMMARY            YES, DO IT\n         CLC   BLKCNT,LISTNO      IS RECORD TO BE LISTED?\n         BNL   *+4+4+4+4          BRANCH IF EVERYTHING ALREADY LISTED\n         BAL   R5,READON\n         BAL   R5,LISTON\n         B     PROCESS2\n         TM    FLAGS,COUNTFLG     IS RECORD COUNT REQUESTED?\n         BZ    SKIPPER            NO, SKIP REST OF FILE\n         BAL   R5,READER          KEEP LOOPING FOR RECORD COUNT\n         B     *-4                UNTIL EOF\nSUMMARY  BAL   R5,READON          READ BLK, CALC LENGTH, DO MIN/MAX\n         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)\n         BNE   NOLABEL            NO, NOT A LABEL\n         CLC   BLKCNT,=F'1'       1ST BLK AFT TAPEMARK OR LOAD PT?\n         BNE   *+4+6+4+4          BIF IT ISN'T THE FIRST\n         CLC   RECBUF(4),=C'EOV1'\n         BNE   *+4+4\n         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'\n         CLC   SUMMNO,=F'3'       SEE IF SUMMARY OPTION IS YES\n         BNE   NOLABEL            NO, AS IF NO LABEL\n         MVI   LABLFLAG,C'Y'      NOTE WE HAVE A LABEL.           -CWB-\n         MVI   MSGBUF,C'0'\n         MVC   MSGBUF+1(132),RECBUF\n         CLC   RECBUF(4),=C'HDR1'\n         BE    HDR1\n         CLC   RECBUF(4),=C'EOF1'\n         BE    EOF1EOV1\n         CLC   RECBUF(4),=C'HDR2'\n         BE    HDR2\n         CLC   RECBUF(4),=C'EOF2'\n         BE    EOF2EOV2\n         CLC   RECBUF(4),=C'VOL1'\n         BE    VOL1\n         CLC   RECBUF(4),=C'EOV1'\n         BE    EOF1EOV1\n         CLC   RECBUF(4),=C'EOV2'\n         BE    EOF2EOV2\n         MVI   LABLFLAG,C'N'      OOPS, NO LABEL.                 -CWB-\nNOLABEL  CLC   BLKCNT,LISTNO\n         BH    PROCESS2\n         BAL   R5,LISTON\n         B     PROCESS2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       SUMMARY LABEL ROUTINES                        *\n*                                                                     *\n***********************************************************************\nHDR1     DS    0H\n         LA    R0,14              PREPARE TO RESERVE 14 LINES\n         BAL   R2,PAGECHK\n         MVC   MSGBUF,BLANKBUF    CLEAR PRINT BUFFER FAST\n         MVI   MSGBUF+43,C'*'     MOVE IN SEED FOR FILL\n         MVC   MSGBUF+44(33),MSGBUF+43 FILL IN REST OF ASTERISKS  -CWB-\n         MVI   MSGBUF,C'-'\n         MVI   HDR1FLAG,C'Y'      NOTE HEADER LABEL FILE.         -CWB-\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP1           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3        PRINT LINE OF ASTERISKS\n         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL TO BLANK\n         BAL   R2,PUTLINE3        PRINT 2ND LINE OF ASTERISKS\nVTOCBYP1 MVC   MSGBUF+45(30),=C' DATASET SEQUENCE NUMBER 0000 '   -CWB-\n         L     R5,CURRVTOC        POINT TO CURRENT VTOC BLOCK.  MRX-JJJ\n         CLI   0(R5),VTOCEPB      IS THIS BLOCK FULL?             -CWB-\n         BL    NXTENTRY           IF NOT, BRANCH.                 -CWB-\n         GETMAIN  R,LV=VTOCBLSZ   ELSE, GET CORE FOR ANOTHER BLOCK-CWB-\n         ST    R1,0(R5)           SAVE FOREWARD POINTER.          -CWB-\n         MVI   0(R5),VTOCEPB      REINSERT THE ENTRY COUNT.       -CWB-\n         LR    R5,R1              MAKE NEW BLOCK CURRENT.         -CWB-\n         ST    R1,CURRVTOC                                        -CWB-\n         LA    R3,8(R5)           STEP OVER INITIAL DOUBLEWORD.   -CWB-\n*                                 R3 POINTS AT CURRENT ENTRY.     -CWB-\n         SR    R0,R0              CLEAR ENTRY COUNT AND FORWARD   -CWB-\n         ST    R0,0(R5)           POINTER IN NEW BLOCK.           -CWB-\n         MVI   0(R5),1            CHANGE ENTRY COUNT TO 1.        -CWB-\n         B     CLEARVEN           GO CLEAR THE FIRST ENTRY.       -CWB-\nNXTENTRY LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT VTOC ENTRY.     -CWB-\n         SR    R1,R1              INCREMENT ENTRY COUNT.          -CWB-\n         IC    R1,0(R5)                                           -CWB-\n         LA    R1,1(R1)                                           -CWB-\n         STC   R1,0(R5)                                           -CWB-\n         USING VTOC,R3            R3 WILL ALWAYS POINT TO ENTRY.  -CWB-\nCLEARVEN MVC   VTOC(VTOCSIZE),BLANKBUF CLEAR OUT VTOC ENTRY.      -CWB-\n         L     R1,TRUESEQN        ADVANCE THE TRUE DATA SET       -CWB-\n         LA    R1,1(R1)           SEQUENCE NUMBER COUNT.          -CWB-\n         ST    R1,TRUESEQN                                        -CWB-\n         L     R1,TRUESEQN        USE TRUE SEQUENCE NUMBER (AS    -CWB-\n         CVD   R1,DBLWORK         OPPOSED TO WHAT THE LABEL       -CWB-\n         OI    DBLWORK+7,X'0F'    SAYS) IN MESSAGE BOX.           -CWB-\n         UNPK  MSGBUF+70(4),DBLWORK                               -CWB-\n         MVC   VTOCSEQN,MSGBUF+70 ALSO USE IT IN VTOC.            -CWB-\n         TM    FLAGS,COPYFLG      MISMATCH OK IF COPY\n         BO    PRINTBOX\n         CLC   MSGBUF+70(4),RECBUF+31 DO COUNT AND LABEL          -CWB-\n         BE    PRINTBOX           AGREE?  IF SO, BRANCH.          -CWB-\n         MVC   MSGBUF+79(31),=C'(LABEL SEQ FIELD CONTAINS 0001)'  -CWB-\n         MVC   MSGBUF+105(4),RECBUF+31 ELSE SHOW DIFFERENCE.      -CWB-\nPRINTBOX EQU   *                                                  -CWB-\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP2           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3        PRINT MSG BETWEEN TWO LINES OF STARS\n         MVC   MSGBUF+44(33),MSGBUF+43 REFILL WITH ASTERISKS      -CWB-\n         MVC   MSGBUF+79(31),MSGBUF+78 ASSURE BLANKS.             -CWB-\n         BAL   R2,PUTLINE3\n         BAL   R2,PUTLINE3\n         MVC   MSGBUF+40(56),BLANKBUF CLEAR ASTERISKS TO BLANKS\n         MVC   MSGBUF+1(80),RECBUF\n         MVC   MSGBUF+82(35),=C'1ST HEADER LABEL RECORD,  FILE NO. '\nVTOCBYP2 MVC   MSGBUF+116(4),RECBUF+31 MOVE IN DATASET SEQUENCE #\n         MVC   DATASEQ,RECBUF+31  SAVE DATASET SEQUENCE #\n         MVI   MSGBUF,C'-'        CCTRL FOR 2 BLANK LINES, THEN PRINT\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP3           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3\n         BAL   R5,HEXON           PRINT HEX IF OPTION IS YES\nVTOCBYP3 CLC   RECBUF+54(6),=C'000000' SEE IF BLK CNT = 0\n         BNE   DOBLKCNT\n         MVC   MSGBUF,BLANKBUF\nLBL1     DS    0H\n         MVC   MSGBUF+6(7),=C'DSNAME='\n         MVC   MSGBUF+13(17),RECBUF+4\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP DSN SAVE.          -CWB-\n         MVC   VTOCDSN,RECBUF+4   SAVE DSN FOR VTOC.              -CWB-\n         MVC   MSGBUF+32(14),=C'CREATION DATE=' (MOVED OVER)      -CWB-\n         PACK  DBLWORK+4(4),RECBUF+42(5) CONVERT FOR DATE SUBROUTINE\n         L     R2,DBLWORK+4\n         LA    R1,AMSGBP46        PTR TO PTR TO DATE SUBR'S RSULT -CWB-\n         BAL   R14,DATE           DATE SUBROUTINE               MRX-JJJ\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-\n         MVC   VTOCCREA,MSGBUF+46 SAVE DATE FOR VTOC.             -CWB-\n         CLC   RECBUF+48(5),=C'00000' DOES TAPE HAVE EXP DATE?    -CWB-\n         BE    EXPIRED            IF NOT, BRANCH.                 -CWB-\n         MVC   MSGBUF+56(16),=C'EXPIRATION DATE=' ELSE, LIST IT.  -CWB-\n         PACK  DBLWORK+4(4),RECBUF+48(5)                          -CWB-\n         L     R2,DBLWORK+4       DO CONVERSION AS BEFORE.        -CWB-\n         LA    R1,AMSGBP72                                        -CWB-\n         BAL   R14,DATE                                         MRX-JJJ\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-\n         MVC   VTOCEXPR,MSGBUF+72 SAVE EXP DATE FOR VTOC.         -CWB-\nEXPIRED  EQU   *                                                  -CWB-\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP4           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         MVI   MSGBUF,C'0'\n         BAL   R2,PUTLINE3\nVTOCBYP4 B     LABELEND\nEOF1EOV1 DS    0H\n         CLC   DATASEQ,RECBUF+31  COMPARE OLD DATASET SEQ. NO. TO  THE +\n                                  CURRENT ONE.\n         BE    NEWSEQNO           SKIP ERROR MSG IF EQUAL\n         CLI   DATASEQ,C'N'       SEE IF 'NONE' STILL IN DATASEQ\n         BE    NEWSEQNO           SKIP ERR MSG IF NO PREVIOUS HDR1\n         LA    R1,=C'0ERROR - THE DATASET SEQ NO ON THE FOLLOWING LABEL+\n                DOES NOT MATCH THAT ON THE PRECEDING HDR1 LABEL.'\n         BAL   R2,PUTLINE\n         LA    R0,6               PREPARE TO RESERVE 6 LINES\n         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINTOUT\n         MVC   MSGBUF+1(132),RECBUF RESTORE MSGBUF\nNEWSEQNO MVC   DATASEQ,RECBUF+31  GET NEW DATASET SEQUENCE NUMBER\n         MVC   MSGBUF+82(35),=C'1ST TRAILER LABEL RECORD, FILE NO. '\n         MVC   MSGBUF+116(4),RECBUF+31\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    DOBLKCNT           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3\n         BAL   R5,HEXON\nDOBLKCNT MVC   MSGBUF,BLANKBUF\n         MVC   MSGBUF+82(12),=C'BLOCK COUNT=' (MOVED OVER.)       -CWB-\n         MVC   MSGBUF+94(6),RECBUF+54                             -CWB-\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    LBL1               IF NOT, SKIP SAVE.              -CWB-\n         CLI   VTOCOUNT,C' '      HAS THE TRUE BLOCK COUNT BEEN   -CWB-\n         BNE   LBL1               FILLED IN?  IF SO, BRANCH.      -CWB-\n         MVC   VTOCOUNT,RECBUF+54 ELSE, FILL IT IN FROM THE LABEL.-CWB-\n         B     LBL1\nEOF2EOV2 DS    0H\n         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT\n         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINT\n         MVC   MSGBUF+82(35),=C'2ND TRAILER LABEL RECORD, FILE NO. '\n         B     LBL2\nHDR2     DS    0H\n         LA    R0,8               PREPARE TO RESERVE 8 LINES  FOR PRINT\n         BAL   R2,PAGECHK         RESERVE PRINT\n         MVC   MSGBUF+82(35),=C'2ND HEADER LABEL RECORD,  FILE NO. '\nLBL2     DS    0H\n         MVC   MSGBUF+116(4),DATASEQ\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP5           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3\n         BAL   R5,HEXON\nVTOCBYP5 MVC   BLKSIZE(5),RECBUF+5\n         MVC   LRECL(5),RECBUF+10\n         MVC   DENSITY(1),RECBUF+15\n         CLI   DENSITY,C'0'\n         BNE   *+10\n         MVC   DENSITY+2(9),=C'(200 BPI)'\n         CLI   DENSITY,C'1'\n         BNE   *+10\n         MVC   DENSITY+2(9),=C'(556 BPI)'\n         CLI   DENSITY,C'2'\n         BNE   *+10\n         MVC   DENSITY+2(9),=C'(800 BPI)'\n         CLI   DENSITY,C'3'\n         BNE   *+10\n         MVC   DENSITY+2(10),=C'(1600 BPI)'\n         CLI   DENSITY,C'4'                                       -CWB-\n*        BNE   *+10                                               -SBG-\n         MVC   DENSITY+2(10),=C'(6250 BPI)'                       -CWB-\n         MVC   RECFM(1),RECBUF+4  MOVE F, U, OR V PART OF RECFM DESC.\n         SR    R1,R1\n         CLI   RECBUF+38,C'R'     SEE IF BLOCKING ATTRIBUTE IS 'BS'\n         BNE   *+18               BIF NOT BS (BS AS IN 'VBS')\n         LA    R1,2\n         MVC   RECFM+1(2),=C'BS'\n         B     CTRLCHAR\n         CLI   RECBUF+38,C' '     SEE IF BLOCKING ATTRIBUTE IS UNBLKED\n         BE    CTRLCHAR           BIF UNBLOCKED\n         MVC   RECFM+1(1),RECBUF+38 MOVE B OR S BLOCK ATTRIBUTE CHAR\n         LA    R1,1               BUMP PTR PAST THE B OR S\nCTRLCHAR LA    R1,RECFM+1(R1)\n         MVC   0(1,R1),RECBUF+36\n         MVC   TRTCH(2),RECBUF+34\n         CLC   TRTCH(2),LBL2MSG+1 SEE IF IT'S 2 BLANKS\n         BNE   *+10\n         MVC   TRTCH(8),=C'STANDARD' 9-TRK OR 7-TRK\n         LA    R1,LBL2MSG\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP6           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE\nVTOCBYP6 CLI   RECBUF,C'H'        SEE IF IS 'HDR2'\n         BNE   LABELEND           BIF IT WAS EOF2 OR EOV2\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    NOVSTUFF           IF NOT, SKIP SAVES.             -CWB-\n         MVC   VTOCRECF,RECFM     COPY DATA FOR VTOC.             -CWB-\n         MVC   VTOCLREC,LRECL                                     -CWB-\n         MVC   VTOCBLKS,BLKSIZE                                   -CWB-\n         MVC   VTOCDEN,DENSITY+3                                  -CWB-\n         MVC   VTOCTRTC,RECBUF+34                                 -CWB-\n         MVC   VTOCJOBN,RECBUF+17                                 -CWB-\n         MVC   VTOCSTEP,RECBUF+26                                 -CWB-\nNOVSTUFF EQU   *                                                  -CWB-\n         MVC   MSGBUF+2(120),MSGBUF+1 CLEAR MOST OF MSGBUF\n         LA    R1,=C'-CREATED BY JOB XXXXXXXX IN STEP XXXXXXXX.'\n         MVC   16(8,R1),RECBUF+17\n         MVC   33(8,R1),RECBUF+26\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP7           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE\nVTOCBYP7 B     LABELEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*           ROUTINE TO HANDLE VOLSER FILE AND PRINT VOLSER            *\n*                                                                     *\n***********************************************************************\nVOL1     DS    0H\n         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT\n         BAL   R2,PAGECHK         AND RESERVE THEM\n         MVC   MSGBUF+82(19),=C'VOLUME LABEL RECORD'\n         MVI   MSGBUF,C'0'\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP8           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3\n         BAL   R5,HEXON\nVTOCBYP8 MVC   MSGBUF,BLANKBUF\n         MVC   MSGBUF+6(21),=C'VOLUME SERIAL NUMBER='\n         MVC   MSGBUF+27(6),RECBUF+4\n         MVC   VSNSAVE,RECBUF+4   CLOBBER JCL VOLSER WITH REAL  MRX-JJJ\n         MVI   VSNFLAG,C'1'       ONE AND INDICATE IT IS DONE.  MRX-JJJ\n         MVC   MSGBUF+40(19),=C'OWNER INFORMATION='''\n         MVC   MSGBUF+59(10),RECBUF+41\n         MVI   MSGBUF+69,C''''\n         MVC   OWNERSAV,RECBUF+41 MOVE OWNER INFO INTO VTOC LIST\n         MVI   MSGBUF,C'0'\n         BAL   R2,PUTLINE3\n         CLC   JFCBIN+JFCBVOLS(6),RECBUF+4 SEE IF JCL MATCHES VOLSER\n         BE    LABELEND           BIF SAME\n         MVC   NOMATCH+46(6),RECBUF+4               VOL ON VOL1\n         MVC   NOMATCH+84(6),JFCBIN+JFCBVOLS        VOL ON INPUT DD\n         LA    R1,NOMATCH\n         BAL   R2,PUTLINE\n         TM    FLAGS,COPYFLG      ARE WE MAKING A COPY?           -CWB-\n         BZ    LABELEND           IF NOT, CONTINUE PROCESSING.    -CWB-\n         L     R0,TPMKCNT         GET CURRENT TAPEMARK NUMBER\n         LTR   R0,R0              SEE IF IT'S ZERO (NO TAPEMARKS YET)\n         BNZ   LABELEND           BIF A TAPEMARK HAS ALREADY BEEN READ\n         TM    JFCLTSV,X'02'      SEE IF 'SL' (OR SUL) BIT IS ON\n         BZ    LABELEND           IF IT'S NOT THEN 'NO VERIFY' (BLP OR +\n                                  AL) WAS SPECIFIED IN JCL; SO KEEP ON.\n         LA    R1,=C'0TERMINATION DUE TO WRONG TAPE MOUNTED.'\n         BAL   R2,PUTLINE         PRINT OPERATOR ERROR TERMINATION MSG\n         MVI   RC,8\n         B     EOJ\nLABELEND B     PROCESS2           GET NEXT BLOCK\n         EJECT\n***********************************************************************\n*                                                                     *\n*                            EOD PROCESSING                           *\n*                                                                     *\n***********************************************************************\nEODS     DS    0H\n         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER\n         LA    R1,1\n         A     R1,TPMKCNT         CURRENT NUMBER OF TAPEMARKS PASSED\n         ST    R1,TPMKCNT         IS NOW UPDATED TO ACTUAL VALUE\n         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-\n         OI    DBLWORK+7,X'0F'\n         MVC   MSGBUF(13),=C'0TAPEMARK NO '\n         UNPK  MSGBUF+13(4),DBLWORK\n         L     R1,TBLKCNT         BLKS IN PREVIOUS DATASETS\n         A     R1,BLKCNT          ADD NO. OF BLKS IN DATASET JUST READ\n         ST    R1,TBLKCNT         TO GET TOTAL BLKS READ SO FAR\n         TM    FLAGS,COPYFLG+SDONEFLG IS COPY BEING DONE NOW?\n         BNO   *+24               SKIP WRITING TAPEMARK IF NOT    -CWB-\n         LA    R1,=AL3(WTMCMND)   PTR TO PTR TO WTM CCW FOR OUTPUT TAPE\n         LA    R2,OUTPUT          DCB FOR WTM EXCP OUTPUT\n         BAL   R4,EXECEXCP        CAL SUBROUTINE TO ISSUE EXCP\n         TM    FLAGS,COUNTFLG\n         BZ    EODSDONE           BIF COUNT OPTION NOT SPECIFIED\n         L     R0,MAX\n         LTR   R0,R0\n         BZ    EODSDONE           BIF NO COUNTING WORK HAS BEEN DONE\n         CLC   BLKCNT,=F'0'       BYPASS MAX/MIN/AVG IF           -CWB-\n         BE    EODSDONE           NO RECORDS.                     -CWB-\n         MVC   MSGBUF+31(78),=C'    BLOCK LENGTHS:  MIN=00000  MAX=0000+\n               0  AVG=00000    NUMBER OF BLOCKS=000000'\n         L     R1,MIN\n         CVD   R1,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  MSGBUF+55(5),DBLWORK\n         L     R1,MAX\n         CVD   R1,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  MSGBUF+66(5),DBLWORK\n         L     R1,BLKCNT          COPY COUNT OF RECORDS AND DIVIDE-CWB-\n         SRA   R1,1               BY 2 TO ROUND THE AVERAGE.      -CWB-\n         A     R1,FILEBYTS        ADD NUMBER OF BYTES IN FILE.    -CWB-\n         SR    R0,R0              CLEAR R0 FOR DIVIDE.            -CWB-\n         D     R0,BLKCNT          DIVIDE FOR AVERAGE BLOCK SIZE.  -CWB-\n         CVD   R1,DBLWORK         MAKE AVERAGE SIZE PRINTABLE.    -CWB-\n         OI    DBLWORK+7,X'0F'                                    -CWB-\n         UNPK  MSGBUF+77(5),DBLWORK\n         L     R1,BLKCNT\n         CVD   R1,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  MSGBUF+103(6),DBLWORK\n         CLC   CURRVTOC,=A(FRSTVTOC) DO WE HAVE A VTOC ENTRY?\n         BE    EODSDONE           IF NOT, BRANCH.                 -CWB-\n         CLI   LABLFLAG,C'Y'      IS THIS A LABEL FILE?           -CWB-\n         BE    EODSDONE           IF SO, DON'T SAVE STAT'S.       -CWB-\n         MVC   VTOCMINB,MSGBUF+55\n         MVC   VTOCMAXB,MSGBUF+66\n         MVC   VTOCAVGB,MSGBUF+77\n         MVC   VTOCOUNT,MSGBUF+103\nEODSDONE DS    0H                                                 -CWB-\n         CLI   EOV1FLG,C'Y'\n         BE    EOVPROC            BIF 'EOV PENDING' FLAG SET\n         CLI   MARK,C'Y'          TWO CONSECUTIVE MARKS?          -CWB-\n         BNE   SKPCHK             IF NOT, BRANCH.                 -CWB-\n         CLI   PREVHDR1,C'N'      PREV FILE A HDR1 LABEL?         -CWB-\n         BE    EOVPROC            IF NOT, GO DO EOV.              -CWB-\nSKPCHK   MVI   MARK,C'Y'          NOTE THIS MARK FOUND.           -CWB-\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYP9           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3\nVTOCBYP9 CLC   TPMKCNT,MAXTMNO\n         BL    PROCESS            RETURN TO MAIN LOOP\n         TM    FLAGS,COPYFLG      CHECK IF COPY BEING DONE        -CWB-\n         BNO   *+16               SKIP IF IT'S NOT BEING DONE     -CWB-\n         LA    R1,=AL3(WTMCMND)   OTHERWISE WRITE AN EXTRA TAPEMARK,\n         LA    R2,OUTPUT          JUST TO MAKE SURE.  THIS COULD\n         BAL   R4,EXECEXCP        RESULT  IN 3 TAPEMARKS IN LAST EOV.\n         B     EOJ\n         EJECT\n***********************************************************************\n*                                                                     *\n*                            EOV PROCESSING                           *\n*                                                                     *\n***********************************************************************\nEOVPROC  DS    0H\n         MVI   EOV1FLG,C'N'       CLEAR 'EOV PENDING' FLAG\n         L     R1,EOVNO           COUNT EOV'S (COUNT STORED       -CWB-\n         LA    R1,1(R1)           IN BINARY FORM).                -CWB-\n         ST    R1,EOVNO                                           -CWB-\n         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-\n         OI    DBLWORK+7,X'0F'\n         MVC   MSGBUF+17(11),=C' -- EOV NO '\n         UNPK  MSGBUF+28(3),DBLWORK\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYPA           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3\nVTOCBYPA CLC   EOVNO,MAXEOVNO\n         BL    PROCESS            MAIN PROCESSING CONTINUED\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     END-OF-JOB AND ERROR ROUTINES                   *\n*                                                                     *\n***********************************************************************\nEOJ      DS    0H\n         TM    FLAGS,COUNTFLG\n         BZ    SHORT              SKIP TO NOT PRINT COUNTS\n         CLI   SENSE+1,X'F0'      HAVE WE READ AT LEAST 1 GOOD RECORD?\n         BNE   EXIT               NO, SKIP SUMMARY\n         LA    R0,6               PREPARE TO RESERVE 6 LINES FOR PRINT\n         BAL   R2,PAGECHK         RESERVE THEM\n         MVC   SENSBYTS,HOLDSENS  RESTORE SENSBYTS IN CASE WE NEED IT\n         LA    R1,=AL3(SENSCMND)  RE-SENSE AT END OF PROCESSING\n         LA    R2,INPUT\n         CLI   RC,8               ARE WE DOING AN ABEND?\n         BE    *+4+4              YES, DONT TRUST SENSE, USE OLD\n         BAL   R4,EXECEXCP        SENSE TO GET DENSITY\n         L     R2,DCBDEBAD+INPUT  FIND UCB.                       -CWB-\n         L     R2,DEBUCBAD(R2)                                    -CWB-\n         TM    19(R2),X'80'       IS THIS A CART?                 -SBG-\n         BO    ITSACART           CONTINUE                        -SBG-\n         TM    19(R2),X'03'       IS THIS A 2400?                 -CWB-\n         BNO   ITS2400            IF SO, BRANCH.                  -CWB-\n         TM    SENSBYTS+6,X'80'   IS THIS A 7 TRACK DRIVE?        -CWB-\n         BO    SEVENTRK           IF SO, BRANCH.                  -CWB-\n         MVI   INDEX+3,4          SET INDEX FOR NO-CONVERT.       -CWB-\n         LA    R2,3               ASSUME DEN=3.                   -CWB-\n         TM    SENSBYTS+6,X'10'   IS IT 1600 BPI?                 -CWB-\n         BZ    ADDDEN2            IF SO, GO.                      -CWB-\n         LA    R2,4               ASSUME DEN=4.                   -CWB-\n         TM    SENSBYTS+6,X'08'   IS THIS A MODEL 4, 6, OR 8?     -CWB-\n         BO    ADDDEN2            IF SO, GO.                      -CWB-\n         LA    R2,2               ELSE, DEN=2.                    -CWB-\n         B     ADDDEN2                                            -CWB-\nITSACART LA    R2,4               CONSIDER IT A 6250 FOR FOOTAGE  -SBG-\n         MVC   PAGEHDR+16(4),CARTMARK  SHOW CART IN REPORTS SINCE -SBG-\n         MVC   ENDMSG+20(4),CARTMARK   PGM IS NOT REENTRANT ANYWAY-SBG-\n         MVC   CARTM,CARTMARK     SHOW IT'S A CART                -SBG-\n         B     ADDDEN2                                            -SBG-\nITS2400  TM    SENSBYTS+1,X'10'   CHECK IF 7-TRK, 1 BIT = 7-TRK   -CWB-\n         BO    SEVENTRK\n         MVI   INDEX+3,4          SINCE 9-TRK, LOAD OFFSET FOR NO CONV\n         TM    SENSBYTS+3,X'04'   CHECK IF PE, 1 = PE = 1600 BPI\n         BNO   EIGHTBPI           BIF 800 BPI 9-TRK\n         MVI   DCBDEN+INPUT,X'C3' SET DEN=1600 BPI INDICATOR\n         B     ADDDEN\nEIGHTBPI DS    0H\n         MVI   INPUT+DCBDEN,X'83' SET DEN=800 BPI INDICATOR\n         B     ADDDEN\nSEVENTRK DS    0H\n         MVI   SAVETRK,C'7'                                       -CWB-\n         MVI   INDEX+3,40         LOAD OFFSET FOR 7-TRK           -CWB-\n         LA    R0,3900            LOAD TAPEMARK LENGTH FOR 7-TRK\n         STH   R0,TMLENGTH\n         MVC   LNGTHEST+57(14),=C'C (CONVERSION)'                 -CWB-\n         CLI   INPUT+DCBTRTCH,X'13' SEE IF CONVERSION SPECIFIED\n         BE    ADDDEN             BIF IT IS, OFFSET=0 FOR CONV\n         MVI   INDEX+3,44         SET OFFSET FOR 7-TRK, NO CONVERS-CWB-\n         MVC   LNGTHEST+57(19),=C'7-TRK NO CONVERSION'            -CWB-\nADDDEN   DS    0H\n         SR    R2,R2\n         IC    R2,INPUT+DCBDEN\n         SRL   R2,6               SHIFT INTO RIGHT-HAND 2 BITS\n         LTR   R2,R2              SEE IF DEN=0 SPECIFIED\n         BNE   ADDDEN2            BIF DEN=0 NOT SPECIFIED\n         L     R2,DCBDEBAD+INPUT  GET PTR TO DEB\n         L     R2,DEBUCBAD(R2)    GET PTR TO UCB\n         TM    19(R2),X'80'  SBG  SEE IF IT'S A CART SERIES OR THE LIKE\n         BO    DEFDEN4       SBG  CONSIDER IT A 6250 FOR FOOTAGES\n         TM    19(R2),X'03'       SEE IF IT'S A 3400 SERIES OR THE LIKE\n         LA    R2,0               CLEAR R2 WITHOUT RESETTING CC\n         BNO   ADDDEN2            BIF IT ISN'T, IT'S OK\n         LA    R2,4               DEFAULT TO DEN=4                -SBG-\n         B     ADDDEN2            CONTINUE                        -SBG-\nDEFDEN4  LA    R2,4       SBG     SET DENSITY USED FOR LENGTH ESTIMATE +\n                                  TO 6250 BPI BECAUSE 3400 SERIES      +\n                                  DOESN'T SUPPORT 200 BPI (EXCEPT 3410)\n         MVC   PAGEHDR+16(4),CARTMARK  SHOW CART IN REPORTS SINCE -SBG-\n         MVC   ENDMSG+20(4),CARTMARK   PGM IS NOT REENTRANT ANYWAY-SBG-\n         MVC   CARTM,CARTMARK     SHOW IT'S A CART                -SBG-\nADDDEN2  DS    0H\n         LA    R0,X'F0'           LOAD C'0' FOR OR OPERATION\n         OR    R0,R2              GET PRINTABLE DENSITY CHARACTER\n         STC   R0,LNGTHEST+45     STORE PRINTABLE DENSITY MSG     -CWB-\n         STC   R0,TRUEDEN         PUT INTO TRUE DEN MESG.         -CWB-\n         SLL   R2,3               MULTIPLY BY 8 TO GET DEN OFFSET\n         A     R2,INDEX           ADD PREVIOUS OFFSETS\n         ST    R2,INDEX           STORE COMPLETED OFFSET FOR BPIBGTBL\n*         FORMULA FOR LENGTH IN INCHES FOLLOWS:\n*         INCHES=R8/BPI+(IBG*BLKCNT+TPMKCNT*TMLENGTH)/1000\n         L     R15,TPMKCNT        LOAD NUMBER OF TAPEMARKS READ\n         S     R15,SKIPTMNO       SUBTRACT NUMBER OF TAPEMARKS SKIPPED\n         MH    R15,TMLENGTH       MULTIPLY BY (TAPEMARK LENGTH*1000)\n         L     R2,INDEX           LOAD INDEX INTO BPI/IBG TABLE\n         L     R1,TBLKCNT         LOAD BLOCK COUNT\n         MH    R1,BPIBGTBL-20(R2) MULTIPLY TO GET TOTAL GAP LENGTH*1000\n         AR    R1,R15             GET TOTAL GAP + TAPEMARK LENGTH*1000\n         SR    R0,R0\n         D     R0,=F'1000'        GET TOTAL TAPEMARK+ GAP LENGTH INCHES\n         LR    R15,R1             SAVE THIS FOR LATER\n         LH    R2,BPIBGTBL-18(R2) LOAD PHYSICAL BPI (NOT LOGICAL BPI)\n         LR    R1,R8              LOAD TOTAL BYTE COUNT\n         SR    R0,R0\n         DR    R0,R2              DIVIDE BYTE COUNT BY PHYSICAL BPI\n         AR    R1,R15             GET TOTAL LENGTH IN INCHES\n         SR    R0,R0\n         D     R0,=F'12'          GET FEET IN R1, INCHES IN R0\n         CVD   R1,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  LNGTHEST+17(4),DBLWORK\n         CVD   R0,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  LNGTHEST+27(2),DBLWORK\n         LA   R1,=C'-TRUE DENSITY AT END OF PROCESSING:  DEN=X       .'\n         MVC   41(1,R1),TRUEDEN\n         MVC   44(4,R1),CARTM      MARK AS CARTRIDGE              -SBG-\n         BAL   R2,PUTLINE\n         LA    R1,LNGTHEST\n         BAL   R2,PUTLINE\n         LA    R1,LNGTHACC\n         BAL   R2,PUTLINE\n         MVI   ENDMSG+L'ENDMSG-1,C':' LONG MESSAGE\n         CVD   R8,DBLWORK         TOTAL BYTES READ (FOR COUNT OPT ONLY)\n         OI    DBLWORK+7,X'0F'    SET SIGN NIBBLE\n         UNPK  BYTES,DBLWORK\n         L     R8,TBLKCNT         TOTAL BLKS READ ON TAPE, EXCLUDING   +\n                                  THOSE READ DURING SKIP PROCOSSING.\n         CVD   R8,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  NBLKS,DBLWORK\nSHORT    LA    R1,ENDMSG\n         BAL   R2,PUTLINE\n         L     R2,ERRCOUNT        COUNT OF SYNAD EXITS TAKEN\n         LTR   R2,R2              SEE IF ZERO\n*        BZ    EXIT               EXIT IF SO                      -CWB-\n         BZ    LISTVTOC           GO DO VTOC IF SO.               -CWB-\n         CVD   R2,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  ERRSUMSG+22(5),DBLWORK\n         LA    R1,ERRSUMSG\n         BAL   R2,PUTLINE\nLISTVTOC CLC   FRSTVTOC+1(3),=AL3(0) DID WE MAKE A VTOC?          -CWB-\n         BE    EXIT               IF NOT, SKIP IT.                -CWB-\n         LA    R0,100             RESERVE 100 LINES (FORCE EJECT).-CWB-\n         BAL   R2,PAGECHK                                         -CWB-\n         LA    R1,VTOCHEAD\n         BAL   R2,PUTLINE         OUTPUT VTOC HEADING.            -CWB-\n         CLI   VSNFLAG,C'1'       IS THIS A JCL OR TAPE VOLSER? MRX-JJJ\n         BNE   LISTVTC2           JCL, BUT IT'S ALL WE GOT.     MRX-JJJ\n         CLC   JFCBIN+JFCBVOLS(6),VSNSAVE DOES JCL MATCH VOLSER?MRX-JJJ\n         BE    LISTVTC2           YES. PRINT REAL VOLSER.       MRX-JJJ\n         LA    R1,=C'0WARNING - VOLUME SERIAL NUMBER IN ABOVE LABEL DOE+\n               S NOT MATCH THAT SPECIFIED ON INPUT DD STATEMENT.'\n         BAL   R2,PUTLINE         MISMATCH. WARN USER.          MRX-JJJ\nLISTVTC2 LA    R1,VTOCHED2\n         BAL   R2,PUTLINE         OUTPUT COLUMN HEADINGS.         -CWB-\n         L     R4,FRSTVTOC        GET ADDRESS OF FIRST VTOC BLOCK.-CWB-\n         SR    R8,R8              CLEAR R8 FOR 1-BYTE COUNTS.     -CWB-\nNEXTVBLK LA    R3,8(R4)           GET ADDRESS OF FIRST ENTRY IN   -CWB-\n*                                 THE VTOC BLOCK.                 -CWB-\n         IC    R8,0(R4)           GET THE NUMBER OF ENTRIES IN    -CWB-\n*                                 THIS VTOC BLOCK.                -CWB-\nNEXTLINE MVC   MSGBUF,BLANKBUF    BUILD THE VTOC ENTRY LINE:      -CWB-\n         MVC   MSGBUF+1(4),VTOCSEQN    DATA SET SEQUENCE NUMBER.  -CWB-\n         MVC   MSGBUF+7(17),VTOCDSN    DATA SET NAME.             -CWB-\n         MVC   MSGBUF+26(4),VTOCRECF   RECFM.                     -CWB-\n         MVC   MSGBUF+32(5),VTOCLREC   LRECL.                     -CWB-\n         MVC   MSGBUF+40(5),VTOCBLKS   BLKSIZE.                   -CWB-\n         MVC   MSGBUF+47(4),VTOCDEN    DENSITY.                   -CWB-\n         MVC   MSGBUF+53(2),VTOCTRTC   TRTCH.                     -CWB-\n         MVC   MSGBUF+59(5),VTOCMAXB   MAXIMUM BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+68(5),VTOCMINB   MINIMUM BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+77(5),VTOCAVGB   AVERAGE BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+86(6),VTOCOUNT   NUMBER OF BLOCKS.          -CWB-\n         MVC   MSGBUF+95(8),VTOCCREA   CREATION DATE.             -CWB-\n         MVC   MSGBUF+105(8),VTOCJOBN  JOB NAME.                  -CWB-\n         MVC   MSGBUF+115(8),VTOCSTEP  STEP NAME.                 -CWB-\n         MVC   MSGBUF+125(8),VTOCEXPR  EXPIRATION DATE.           -CWB-\n         BAL   R2,PUTLINE3        OUTPUT THE LINE.                -CWB-\n         LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT ENTRY.          -CWB-\n         BCT   R8,NEXTLINE        LOOP IF MORE IN THIS BLOCK.     -CWB-\n         LR    R1,R4              POINT TO VTOC BLOCK.            -CWB-\n         L     R4,0(R4)           GET ADDRESS OF NEXT BLOCK.      -CWB-\n         LA    R0,VTOCBLSZ        GET VTOC BLOCK SIZE.            -CWB-\n         FREEMAIN R,LV=(0),A=(1)  FREE UP VTOC BLOCK'S CORE.      -CWB-\n         LA    R4,0(R4)           CLEAR HIGH-ORDER BYTE.          -CWB-\n         LTR   R4,R4              IS FOREWARD POINTER ZERO?       -CWB-\n         BZ    EXIT               IF SO, WE'RE DONE.              -CWB-\n         B     NEXTVBLK           ELSE, GO DO NEXT BLOCK.         -CWB-\nEXITRC8  MVI   RC,8               SET RETURN CODE=8\nEXIT     DS    0H\n         TM    OUTPUT+DCBOFLGS,X'10' IS OUTPUT DCB OPEN?          -CWB-\n         BZ    CLOSEIN            IF NOT, SKIP CLOSE.             -CWB-\n         LA    R1,EXCPIOB         RESTORE IOB POINTER IN DCB      -CWB-\n         IC    R0,OUTPUT+DCBIOBA  TO POINT TO TRUE IOB, NOT       -CWB-\n         ST    R1,OUTPUT+DCBIOBA  BSAM-TYPE IOB PREFIX.           -CWB-\n         STC   R0,OUTPUT+DCBIOBA                                  -CWB-\n         NI    OUTPUT+DCBOFLGS,X'7F' PRETEND LAST I/O WAS A READ  -CWB-\n         OI    OUTPUT+DCBOFLGS,X'04' TO AVOID WRTING A TAPEMARK.  -CWB-\n         CLOSE  OUTPUT            CLOSE OUTPUT TAPE.              -CWB-\nCLOSEIN  TM    INPUT+DCBOFLGS,X'10' IS INPUT TAPE OPEN?           -CWB-\n         BZ    NOTOPEN            PROGRAM DIDN'T GET VERY FAR,    -CWB-\n*                                 DID IT.                         -CWB-\n         CLOSE INPUT              CLOSE INPUT TAPE.               -CWB-\nNOTOPEN  DS    0H                                                 -CWB-\n         L     R13,SAVE+4         MAY BYPASS UNRELEASED SYNAD AREA\n         LM    14,12,12(13)\n         LA    15,0\nRC       EQU   *-1\n         BR    R14                FINAL EXIT FROM TAPESCAN IN ALL CASES\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     COMMON PROGRAM ROUTINES                         *\n*                                                                     *\n***********************************************************************\nPUTLINE  DS    0H                 GENERAL PRINTING SUBROUTINE, ENTRY 1\n* ADDRESS OF MSG IN R1, MSG MUST BE TERMINATED BY A PERIOD.\n         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER FAST\n         LR    R0,R1              SAVE START OF FIELD\n         LA    R1,1(R1)           NEXT POSITION\n         CLI   1(R1),C'.'         END OF MESSAGE?\n         BNE   *-4-4              NO, TRY AGAIN\n         SR    R1,R0              YES, GET LENGTH -1\n         STC   R1,*+4+2+1\n         LR    R1,R0              RESTORE R1\n         MVC   MSGBUF(0),0(R1)    MOVE IN MESSAGE (W/O PERIOD)\nPUTLINE3 CLI   MSGBUF,C' '        GENERAL PRINTING SUBROUTINE, ENTRY 3\n         BE    LNCOUNT-4          BIF CARR. CTRL  CHAR IS A BLANK\n         CLI   MSGBUF,C'0'        SEE IF CARRIAGE CONTROL CHAR IS ZERO\n         BE    C0                 BIF IS A ZERO\n         LA    R0,3               NO BLANK OR ZERO, MUST BE A MINUS\n         B     LNCOUNT\nC0       LA    R0,2               COUNT TWO LINES\n         B     LNCOUNT\n         LA    R0,1               COUNT ONE LINE\nLNCOUNT  A     R0,LINENO\n         ST    R0,LINENO\n         C     R0,=F'58'                                    FJP/20FEB79\n         BNH   SAMEPAGE\n         MVC   PAGECHAR,=X'40202120' EDIT PATTERN\n         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-\n         LA    R1,1(R1)           (DECIMAL INSTRUCTIONS           -CWB-\n         ST    R1,PAGECNT         REPLACED BY BINARY.)            -CWB-\n         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-\n         ED    PAGECHAR,DBLPAGE+6                                 -CWB-\n         MVI   LINENO+3,X'00'\n         PUT   SYSPRINT,PAGEHDR\nSAMEPAGE PUT   SYSPRINT,MSGBUF\n         BR    R2                 RETURN FROM PUTLINE SUBROUTINE\nPAGECHK  DS    0H                 LINE RESERVATION SUBROUTINE\n         A     R0,LINENO          ADD LINES TO BE RESERVED TO LINE NO\n         C     R0,=F'58'          MAX LINE #?               FJP/20FEB79\n         BCR   13,R2              RETURN IF CURRENT PAGE HAS ENUF ROOM\n         MVI   LINENO+3,0         ZERO LINE COUNTER\n         MVC   PAGECHAR,=X'40202120'\n         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-\n         LA    R1,1(R1)           (DECIMAL INSTRUCTIONS           -CWB-\n         ST    R1,PAGECNT         REPLACED BY BINARY.)            -CWB-\n         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-\n         ED    PAGECHAR,DBLPAGE+6                                 -CWB-\n         PUT   SYSPRINT,PAGEHDR\n         BR    R2\nBADREC   DS    0H                                                 -CWB-\n         LA    R1,=C'0BAD (0) BLOCK SIZE ENCOUNTERED.'\n         BAL   R2,PUTLINE\n         MVI   RC,8\n         B     EOJ\nSYNERR   SYNADAF ACSMETH=BSAM\nSYNERR2  ST    R14,SVR14\n         CH    R0,=H'4'           CHECK SYNADAF'S RETURN CODE\n         BNE   DIRECT\n*        LH    R14,12(R1)         LOAD NO. OF BYTES READ\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK1,FULLWRK1  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK1(2),12(R1)    MOVE FULL HALFWORD\n         L     R14,FULLWRK1       FULLWORD LOAD\n         CVD   R14,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  32(5,R1),DBLWORK\n         MVC   8(24,R1),=C'0I/O ERROR - BYTES READ='\nDIRECT   MVC   MSGBUF(120),8(R1)\n         BAL   R2,PUTLINE3        PRINT SYNAD ERROR MESSAGE\n         MVC   MSGBUF(120),8(R1)\n         LA    R14,1\n         A     R14,ERRCOUNT       INCREMENT ERROR COUNT\n         ST    R14,ERRCOUNT\n         C     R14,SYNADNO        COMPARE ERROR COUNT WITH ERROR LIMIT\n         BNH   SYNADRLS           PRINT MSG & EXIT IF ERR LIM EXCEEDED\n         MVI   *-3,X'F0'          NEVER COME HERE AGAIN\n         LA    R1,=C'0TAPESCAN TERMINATING DUE TO EXCESSIVE I/O ERROR C+\n               OUNT.'\n         BAL   R2,PUTLINE\n         MVI   RC,8\n         B     EOJ\nSYNADRLS SYNADRLS\n         L     R14,SVR14\n         BR    R14\n*  R2=PTR TO DCB, AND R1=PTR TO 3-BYTE ADCON WHICH PTS TO CHANNEL PGM.\nEXECEXCP DS    0H                 EXCP SUBROUTINE\n         ST    R2,EXCPDCB         SAVE DCB POINTER.               -CWB-\n         L     R2,DCBIOBA(R2)     GET PTR TO A BSAM IOB PREFIX\n         MVC   STARTSAV(3),IOBSTART+9(R2) SAVE PTR TO BSAM'S CCW\n         MVC   IOBSTART+9(3,R2),0(R1) MOVE IN PTR TO CHAN PROG\n         LA    R1,4(R2)           LOAD PTR TO ECB IN PREFIX\n         ST    R1,IOBECBPT+8(R2)  STORE PTR TO ECB\n         XC    0(4,R1),0(R1)      CLEAR ECB IN IOB PREFIX\n         EXCP  8(R2)              EXCP USING BSAM'S IOB AND ECB\n         WAIT  ECB=4(R2)\n         L     R1,IOBSTART+8(R2)  RESTORE CCW POINTER.            -CWB-\n         MVC   IOBSTART+9(3,R2),STARTSAV RESTORE PTR TO BSAM'S CCW\n         CLI   4(R2),X'7F'        SEE IF EXCP WORKED PERFECTLY\n         BCR   8,R4               RETURN IF IT DID\n         CLI   4(R2),X'41'        DID PERMANENT ERROR OCCUR?      -CWB-\n         BNE   DOSYN              OTHER ERRORS BRANCH.            -CWB-\n         CLI   0(R1),X'02'        WAS COMMAND CODE A READ?        -CWB-\n         BNE   DOSYN              IF NOT, DO ERROR.               -CWB-\n*        LH    R1,6(R1)           GET COMMAND LENGTH.             -CWB-\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK1,FULLWRK1  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK1(2),6(R1)      GET COMMAND LENGTH\n         L     R1,FULLWRK1        FULLWORD LOAD\n*        CH    R1,22(R2)          IS RESIDUAL LENGTH THE SAME?    -CWB-\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK2,FULLWRK2  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK2(2),22(R2)    MOVE RESIDUAL LENGTH\n         C     R1,FULLWRK2        FULLWORD COMPARE\n         BNE   DOSYN              IF NOT, BRANCH FOR ERROR.       -CWB-\n         L     R1,EXCPDCB         ELSE, MUST BE TAPE MARK READ.   -CWB-\n         L     R1,DCBEODAD(R1)    GO TO EODAD ROUTINE.            -CWB-\n         BR    R1                                                 -CWB-\nDOSYN    DS    0H                                                 -CWB-\n         LA    R1,8(R2)           GET PTR TO IOB FOR SYNADAF MACRO\n         SYNADAF ACSMETH=EXCP     WORKS OK EVEN THO IOBSTART RESTORED\n         BAL   R14,SYNERR2        NOW DO REST OF ANALYSIS WITH SYNERR\n         BR    R4\nSKIPPER  CNTRL INPUT,FSM          FORWARD SPACE TO NEXT TAPEMARK,      +\n                                  THEN BACKSPACE OVER IT.\n         XC    BLKCNT,BLKCNT      RE-ZERO CURRENT BLK COUNT\n         XC    MAX,MAX            ZERO MAX TO INHIBIT BLK COUNT MSG\n         SR    R8,R8              IS THIS NECESSARY?\n         BAL   R5,READON          NOW READ THE TAPEMARK\n         BAL   R5,LISTON          RETURN HERE IF NO TAPEMARK - ERROR!\n         LA    R1,=C'0ERROR - EXPECTED TAPEMARK NOT FOUND.'\n         BAL   R2,PUTLINE         PRINT ERR MSG\n         MVI   RC,8\n         B     EOJ\nREADON   DS    0H                 ROUTINE TO READ (AND COPY) 1 BLOCK\n         MVC   RECBUF,BLANKBUF    CLEAR FIRST PART OF BUFFER FAST\nREADER   XC    TAPE(4),TAPE       CLEAR ECB\n         LA    R2,RECBUF\n         READ  TAPE,SF,INPUT,(R2),65535\n*                                     READ A BLK OR TAPEMARK (WE HOPE)\n         CHECK TAPE\n         MVI   MARK,C'N'          SET TO C'Y' WHEN TAPEMARK READ (EOD)\n         L     R1,BLKCNT\n         LA    R1,1(R1)           COUNT THE BLK JUST READ FOR DATASET\n         ST    R1,BLKCNT\n         L     R6,TAPE+16         GET PTR TO IOB\n*        LH    R6,14(R6)          GET RESIDUAL COUNT\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK1,FULLWRK1  CLEAR FULLWORK WORKAREA\n         MVC   HALFWRK1(2),14(R6)     FULL HALFWORD OF RESIDUAL COUNT\n         L     R6,FULLWRK1        FULLWORD LOAD\n*        LH    R7,INPUT+DCBBLKSI\n*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.\n         XC    FULLWRK2,FULLWRK2  CLEAR FULLWORK WORKAREA\n*        MVC   HALFWRK2(2),INPUT+DCBBLKSI  FULL HWD OF BLKSIZE\n         MVC   HALFWRK2(2),=X'FFFF'    ASSUME BLOCKSIZE IS 65535\n         L     R7,FULLWRK2        FULLWORD LOAD\n         SR    R7,R6              COMPUTE BLOCK'S LENGTH\n         BNH   BADREC             BIF ZERO OR NEG REC LEN, EXIT RC=8\n         LA    R1,=AL3(SENSCMND)  GET READY TO SENSE\n         LA    R2,INPUT\n         CLC   BLKCNT,ERRCOUNT    ARE ALL RECORDS BAD SO FAR?\nSENSE    BE    GOTSENSE           YES, DONT SENSE\n         MVI   SENSE+1,X'F0'      ONLY DO IT ONCE\n         BAL   R4,EXECEXCP        SENSE TO GET DENSITY\n         MVC   HOLDSENS,SENSBYTS  SAVE SENSBYTS\nGOTSENSE L     R1,FILEBYTS        ADD BLOCK LENGTH TO TOTAL       -CWB-\n         AR    R1,R7              BYTE COUNT FOR THIS             -CWB-\n         ST    R1,FILEBYTS        FILE.                           -CWB-\n         AR    R8,R7              COUNT ALL BYTES READ DURING RUN\n         C     R7,MAX             COMPARE CURRENT BLK'S SIZE WITH MAX\n         BNH   *+8                SKIP IF OLD MAX IS BIGGER\n         ST    R7,MAX             STORE NEW MAX BLK LENGTH\n         C     R7,MIN             COMPARE BLK'S SIZE WITH PREVIOUS MIN\n         BNL   *+8                SKIP IF OLD MIN IS SMALLER\n         ST    R7,MIN             STORE NEW MINIMUM BLOCK LENGTH\n         TM    FLAGS,COPYFLG+SDONEFLG SHOULD WRITE TO OUTPUT TAPE?\n         BNO   READEREX\n         TM    FLAGS,NOVOLFLG     NOVOLSER BEEN SPECIFIED?\n         BZ    COPOUT             IF NOT, GO COPY\n         MVI   *-3,X'F0'          ONLY COME HERE ONCE\n         C     R7,=F'80'          IS THIS AN 80-BYTE BLOCK?       -CWB-\n         BNE   COPOUT             IF NOT, GO COPY.                -CWB-\n         CLC   RECBUF(4),=C'VOL1' IS THIS A VOL LABEL?            -CWB-\n         BE    READEREX           IF SO, BYPASS COPY.             -CWB-\nCOPOUT   EQU   *                  WRITE TO OUTPUT TAPE\n         CLC   RECBUF(4),=C'HDR1' IS IT A HDR1?\n         BE    *+4+6              OR\n         CLC   RECBUF(4),=C'EOF1' IS IT AN EOF1?\n         BNE   COPOUT2            NEITHER, SKIP\n         CLC   BLKCNT,=F'2'       FIRST/SECOND BLOCK ON A FILE?\n         BH    COPOUT2  NO\n         TM    FLAGS,NOVOLFLG\n         BZ    *+4+6\n         MVC   RECBUF+21(6),POSMSG+22 MOVE IN REAL VOL SER\n         LH    R1,COUTFILE\n         CLC   RECBUF(4),=C'HDR1' IS IT A HDR1?\n         BNE   *+4+4\n         LA    R1,1(R1)           YES,INCREMENT FILE SEQ NUMBER\n         STH   R1,COUTFILE\n         CVD   R1,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  RECBUF+31(4),DBLWORK GET REAL FILE SEQ NO\nCOPOUT2  DS    0H\n         STH   R7,WRTCMND+6       STORE BLK LENGTH IN WRITE CCW\n         LA    R1,=AL3(WRTCMND)\n         LA    R2,OUTPUT\n         BAL   R4,EXECEXCP\nREADEREX BR    R5                 RETURN FROM READON SUBROUTINE\nLISTON   MVI   MSGBUF,C'0'\n         LA    R0,4               PREPARE TO RESERVE 4 LINES\n         BAL   R2,PAGECHK         RESERVE 4 LINES\n         MVC   MSGBUF+1(132),RECBUF\n         TM    FLAGS,VTOCFLAG     IS THE VTOC FLAG ON?          MRX-JJJ\n         BO    VTOCBYPB           YES, BYPASS THIS OVERHEAD.    MRX-JJJ\n         BAL   R2,PUTLINE3        LIST THE FIRST PART OF THE BLOCK\nHEXON    CLI   HEXFLG,C'N'        SEE IF HEXLIST SPECIFIED\n         BCR   8,R5               BER R5 RETURN IF HEXLIST NOT SPECIFID\n         MVC   MSGBUF+1(132),RECBUF\n         MVI   TRINT1+1,131       SET UP DEFAULT  OF MOVE  =132 BYTES\n         MVI   TRINT2+1,131       SET UP DEFAULT  OF MOVE  =132 BYTES\n         C     R7,=F'132'         SEE IF LENGTH OF BLK EXCEEDS 1 LINE\n         BH    TRINT1             BRANCH IF LE 132 BYTES\n         BCTR  R7,0               CONVERT BLK LENGTH TO MACHINE LENGTH\n         STC   R7,TRINT1+1        AND STORE IN 1ST TR INSTRUCTION\n         STC   R7,TRINT2+1        AND IN THE SECOND ONE\nTRINT1   TR    MSGBUF+1(132),TRT1 MODIFIED INSTRUCTION (LENGTH)\n         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL\n         BAL   R2,PUTLINE3        PRINT FIRST LINE OF HEX\n         MVC   MSGBUF+1(132),RECBUF\nTRINT2   TR    MSGBUF+1(132),TRT2 MODIFIED INSTRUCTION (LENGTH)\n         BAL   R2,PUTLINE3        PRINT SECOND LINE OF HEX\nVTOCBYPB BR    R5                 RETURN FROM LISTON OR HEXON SUBR\n         EJECT\n***********************************************************************\n*                                                                     *\n*          DATE - PRODUCES DATE FOR TAPESCAN - FJP/17FEB79            *\n*                                                                     *\n***********************************************************************\nDATE     DS    0H\n         STM   R14,R5,12(R13)\n         L     R1,0(R1)           GET PTR TO RESULT FIELD\n         SR    R3,R3              ACCUMULATOR OF MONTH-DAYS\n         SR    R4,R4              MONTH COUNTER\n         STM   R3,R4,DEC          CLEAR DEC TO ZEROS\n         LA    R2,0(R2)           CLEAR HIGH-ORDER BYTE.\n         ST    R2,TEMP            STORE 00YYJJJF, (ESPECIALLY YY)\n         STH   R2,DEC+6           SAVE JJJF FOR LATER CVB\n         OI    DEC+7,X'0F'        FORCE SIGN TO X'F'.\n         SRL   R2,20              GET TENS PART OF YY\n         MH    R2,=H'6'           GET HEX DEC SUBTRACTION FACTOR\n         LH    R0,TEMP            RELOAD YY\n         SR    R0,R2              SUBTRACT TO GET BIN RESULT\n         STC   R0,CHAR1           STORE RESULT FOR TM\n         TM    CHAR1,X'03'        SEE IF YEAR IS DOUBLY EVEN\n         MVI   MONTH+3,29         MOVE IN LEAPYEAR FEBRUARY\n         BZ    *+8                SKIP IF IT'S REALLY A LEAP YEAR\n         MVI   MONTH+3,28         MOVE IN REGULAR FEBRUARY\n         CVB   R0,DEC             GET JJJ INTO R0\n         C     R0,=F'366'         IS DAY VALID?\n         BNH   GOODDAY            IF SO, GO CONVERT.\n         MVC   0(8,R1),=C'????????' ELSE RETURN BAD DATE.\n         B     RETURN             GO BACK.\nGOODDAY  LA    R2,MONTH           PTR TO TBL OF # OF DAYS IN EACH MONTH\nNEXT     LR    R5,R3              SAVE PREVIOUS MONTH-DAYS TOTAL\n         AH    R3,0(R2)\n         LA    R2,2(R2)\n         LA    R4,1(R4)           COUNT THIS MONTH\n         CR    R3,R0              COMPARE TOTAL MONTH-DAYS TO JJJ\n         BL    NEXT\n         CVD   R4,DEC             CONVERT MONTHNUMBER TO DEC\n         MVO   TEMP-1(2),DEC+6(2) PUT MONTH INTO PLACE FOR EDIT\n         SR    R0,R5              GET DAY#\n         CVD   R0,DEC             CONVERT DAY TO DEC\n         MVO   CHAR1(2),DEC+6(2)\n         MVC   TEMP(1),CHAR1\n         MVC   DEC-1(9),=X'F02120612020612020' MOVE IN EDIT PATTERN\n         ED    DEC-1(9),TEMP-1\n         MVC   0(8,R1),DEC        MOVE RESULT TO FINAL RESTING PLACE\nRETURN   LM    R14,R5,12(R13)\n         BR    R14\nMONTH    DC    H'31,28,31,30,31,30,31,31,30,31,30,31,32767'\nDEC      DC    D'0'               FOR CVB & CVD\nCHAR1    DC    C'....'            TEMP\nTEMP     DC    F'0'               TEMP\n         PRINT GEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*                            CONSTANTS                                *\n*                                                                     *\n***********************************************************************\nR0       EQU   0   WORK REG + SYSTEM USES\nR1       EQU   1   WORK REG + SYSTEM USES\nR2       EQU   2   MOSTLY FOR LINKAGE TO PUTLINE & GETNUM\nR3       EQU   3   USED IN PARM SCANNER + VTOC ENTRY POINTER.     -CWB-\nR4       EQU   4   BELOW LABEL 'PROCESS' COUNTS BLKS READ FOLLOWING A  +\n                   TAPEMARK OR THE LOAD POINT.\nR5       EQU   5   WORK, INTERNAL SUBROUTINE LINKAGE\nR6       EQU   6   WORK REG\nR7       EQU   7   WORK REG + LENGTH OF LAST BLK READ\nR8       EQU   8   PARM FIELD LENGTH CTR, TOTAL BYTES ON TAPE CTR\n@MSECT   EQU   9   BASE REG FOR DSECT MSECT\nR10      EQU   10  3RD BASE REG\nR11      EQU   11  2ND BASE REG\nR12      EQU   12  1ST BASE REG\nR13      EQU   13\nR14      EQU   14  WORK REG + SYSTEM USES\nR15      EQU   15  WORK REG + SYSTEM USES\nDCBTRTCH EQU   16\nDCBDEN   EQU   18\nDCBEODAD EQU   32\nDCBDEBAD EQU   44\nDCBOFLGS EQU   48\nDCBBLKSI EQU   62\nDCBIOBA  EQU   68                 PTR TO IOB'S BSAM PREFIX\nIOBECBPT EQU   4\nIOBSTART EQU   16\nDEBUCBAD EQU   32\nJFCBLTYP EQU   66                 LABEL TYPE (AL, LTM, ETC.)\nJFCBFLSQ EQU   68                 FILE SEQUENCE NUMBER, 0 OR 1 =1ST\nJFCBVOLS EQU   118                1ST BYTE OF JFCB VOLUME LIST\n* ----------------------------------------------------------  SBG 04/00\n         DS    0D               START ON DWORD BOUNDARY\nFULLWRK1 DS    0F               FULLWORD WORK AREA\n         DC    H'0'\nHALFWRK1 DC    H'0'             HALFWORD WORK AREA\nFULLWRK2 DS    0F               FULLWORD WORK AREA\n         DC    H'0'\nHALFWRK2 DC    H'0'             HALFWORD WORK AREA\n* ----------------------------------------------------------  SBG 04/00\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,            +\n               BLKSIZE=133,LRECL=133                              -FJP-\nINPUT    DCB   DDNAME=INPUT,MACRF=RC,DSORG=PS,RECFM=U,DEVD=TA,         +\n               BLKSIZE=32760,                               FJP/20FEB79+\n               SYNAD=SYNERR,EXLST=EXITLIST,EODAD=SKIPEOF\nOUTPUT   DCB   DDNAME=OUTPUT,MACRF=(E),EODAD=EODADBAD,DSORG=PS,   -CWB-+\n               IOBAD=EXCPIOB,DEVD=TA,EXLST=EXLSTOUT               -CWB-\n         ORG   OUTPUT+DCBIOBA+4   LEAVE SPACE FOR DUMMY IOBA\nBSFCMND  CCW   X'2F',0,X'70',1    BSF, CC,SLI,SKIP\n         CCW   X'04',SENSBYTS,X'20',24 SENSE SLI UP TO 24 BYTES\nREAD81CM CCW   2,0,X'60',81       SET TO POINT TO RECBUF DYNAMICALLY\n         CCW   4,SENSBYTS,X'20',24 AND SENSE FOR DEBUG\nJFCBOUT  DS    22D\nJOUTFLSQ EQU   JFCBOUT+JFCBFLSQ\nEXLSTOUT DC    0F'0',X'87',AL3(JFCBOUT)\nEXITLIST DS    0F                 INPUT DCB EXIT LIST FOR RDJFCB\n         DC    X'87'              LAST ENTRY AND RDJFCB\n         DC    AL3(JFCBIN)        BUFFER FOR INPUT TAPE'S JFCB\nJFCBIN   DS    22D                176 BYTES\nFSMCMND  CCW   X'3F',0,X'30',1    FWRD SPACE FILE, SKIP/SLI\nRWNDCMND CCW   7,0,X'60',1        REWIND TAPE, CHAIN CMND, SLI\nSENSCMND CCW   4,SENSBYTS,X'20',24 SENSE UP TO 24 BYTES, SLI\nREADCMND CCW   X'02',0,X'20',65535 READ COMMAND.            FJP/20FEB79\nREADLENG EQU   READCMND+6         READ LENGTH FIELD.              -CWB-\nWRTCMND  CCW   1,0,X'20',0        PTR TO RECBUF UPDATED AFTER GM. -CWB-\nWTMCMND  CCW   X'1F',0,X'60',1    WRITE TM, SLI, CC TO SENSE.     -CWB-\n         CCW   X'04',SENSBYTS,X'20',1 SENSE CHAINED FOR DEV END.  -CWB-\nSENSBYTS DC    3CL8'SENSBYTS'     BUFFER FOR SENSE BYTES\nHOLDSENS DC    CL8' '\nERRCOUNT DC    F'0'               NUMBER OF SYNAD EXITS TAKEN (I/O ERRS\nSYNADNO  DC    F'50'              MAX SYNAD EXITS BEFORE TERMINATION\nEXCPIOBP DC    0D'0',A(*)         IOB BSAM-TYPE PREFIX.           -CWB-\nEXCPECB  DC    F'0'                                               -CWB-\nEXCPIOB  DC    B'01000010',XL3'0',A(EXCPECB,0),H'0' IOB PROPER.   -CWB-\nRESIDL   DC    H'0'               RESIDUAL COUNT.                 -CWB-\n         DC    A(0)               ADDRESS OF CHANNEL PROGRAM.     -CWB-\n         DC    A(OUTPUT,0,0)                                      -CWB-\nEXCPDCB  DC    A(0)               DCB ADDRESS SAVE AREA.          -CWB-\nSTARTSAV DC    C'SAV'             FOR SAVING BSAM'S IOBSTART FIELD\nGMCTRL   DC    A(MSECTEND-MSECT)  MINIMUM LENGTH FOR THE GETMAIN\n         DC    A(MSECTEND-MSECT+65536) MAXIMUM LENGTH FOR THE GETMAIN\nGMLOCS   DC    2F'0'\nCTABLE   DC    C'0123456789ABCDEF'\nOUTLTYP  DC    C'0'               FOR SAVING OUTPUT TAPE'S LABEL TYPE\nSAVE     DS    9D\nDBLPAGE  DC    D'0'               CVD WORK AREA FOR PAGE NUMBER.  -CWB-\nAMSGBP46 DC    A(0)               A(MSGBUF+46) SET UP DURING INIT -CWB-\nAMSGBP72 DC    A(0)               A(MSGBUF+72) AS ABOVE.          -CWB-\nOPTNO    DC    F'0'               BIT ORIENTED OPTIONS - MISC/DEBUG\nLINENO   DC    F'90'                                              -CWB-\nLISTNO   DC    F'4'               NUMBER OF BLKS TO LIST PER DATASET\nSKIPTMNO DC    F'0'\nMAXTMNO  DC    F'32760'                                     FJP/20FEB79\nSKPEOVNO DC    F'0'\nMAXEOVNO DC    F'1'\nSUMMNO   DC    F'3'               SET TO ONE  FOR NOSUMMARY OPTION\nPAGECNT  DC    F'0'               PAGE COUNTER.                   -CWB-\nSVR14    DC    F'0'                                               -CWB-\nCOUTFILE DC    H'1'               CURRENT OUTPUT FILE SEQ. NO.\nJFCLTSV  DC    X'FF'              FOR SAVING JFCBLTYP BYTE\nHEXFLG   DC    C'Y'\nTPMKCNT  DC    F'0'               # OF TAPEMARKS ALREADY ENCOUNTERED\nBLKCNT   DC    F'0'               KEEPS TRACK OF BLKS READ ON TAPE\nTBLKCNT  DC    F'0'               KEEPS TRACK OF TOTAL BLKS READ ON TAPE\n                                  EXCLUDING THOSE READ DURING SKIPPING.\nMAX      DC    F'0'               KEEPS TRACK OF MAXIMUM BLK LENGTH\nMIN      DC    F'65535'           MIN BLK LENGTH            FJP/20FEB79\nTMLENGTH DC    H'3750'            DEFAULT TAPEMARK LENGTH*1000 (9-TRK)\nINDEX    DC    F'0'               NOCONV=+4, 7-TRK=+40, +DEN*8    -CWB-\n*TBLORG EQU BPIBGTBL-20           THEORETICAL ORIGIN OF BPIBGTBL\n*                                 WHICH IS LIKE A 3-D ARRAY:\n*                                 7-TRK=+40,  NOCONV=+4, +DEN*8   -CWB-\nBPIBGTBL DC    H'601,800'          800 BPI NOCONV 9-TRK\n         DC    H'1,1'             1600 BPI CONV   9-TRK (NOT USED)\n         DC    H'651,1600'        1600 BPI NOCONV 9-TRK\n         DC    H'300,4687'        6250 BPI CONV   9-TRK (NOT USED)\n         DC    H'300,6250'        6250 BPI NOCONV 9-TRK           -CWB-\n         DC    H'752,150'          200 BPI CONV   7-TRK\n         DC    H'752,200'          200 BPI NOCONV 7-TRK\n         DC    H'751,417'          556 BPI CONV   7-TRK\n         DC    H'751,556'          556 BPI NOCONV 7-TRK\n         DC    H'751,600'          800 BPI CONV   7-TRK\n         DC    H'751,800'          800 BPI NOCONV 7-TRK\nEOVNO    DC    F'0'               NUMBER OF EOV'S PROCESSED.      -CWB-\nDATASEQ  DC    CL4'NONE'\nTRUEDEN  DC    C'3'                                               -CWB-\nCARTMARK DC    C'CART'                                            -SBG-\nCARTM    DC    C'    '                                            -SBG-\nMARK     DC    C'N'               'TAPEMARK JUST READ' FLAG (N = NOT)\nFLAGS    DC    B'10000000'        FLAGS FOR THE FOLLOWING:\nCOUNTFLG EQU   128\nNOVOLFLG EQU   64\nSDONEFLG EQU   32\nVTOCFLAG EQU   4                                               MRX-JJJ\nMODFLG   EQU   2\nCOPYFLG  EQU   1\nEOV1FLG  DC    C'N'               SET EOV1FLG =C'Y' WHENEVER 1ST BLK   +\n                                  AFTER A TAPEMARK IS 80 BYTES LONG &  +\n                                  STARTS WITH 'EOV1'.\nLABLFLAG DC    C'N'               INDICATES WHETHER WE ARE        -CWB-\n*                                 PROCESSING A LABEL FILE.        -CWB-\nVSNFLAG  DC    C'0'               REAL OR PHONY VOLSER.         MRX-JJJ\nPREVHDR1 DC    C'N'               C'Y' IF PREV FILE A HDR1 LABEL. -CWB-\nHDR1FLAG DC    C'N'               C'Y' IF CURRENT FILE A HDR1.    -CWB-\nDBLWORK  DC    D'0'               CVB/CVD WORK AREA.              -CWB-\nCURRVTOC DC    A(FRSTVTOC)        CURRENT VTOC BLOCK.             -CWB-\nFRSTVTOC DC    AL1(VTOCEPB),AL3(0) ADDR. OF 1ST VTOC BLK; HI-ORDER-CWB-\n*                                 BYTE SET TO FORCE 1ST GETMAIN.  -CWB-\nFILEBYTS DC    F'0'               NUMBER OF BYTES IN THIS FILE.   -CWB-\nTRUESEQN DC    F'0'               LABEL= VALUE SEQUENCE NUMBER.   -CWB-\nVTOCHEAD DC    C'-VOLUME TABLE OF CONTENTS FOR '                  -CWB-\nVSNSAVE  DC    C'VSNVSN',C'    '                                  -CWB-\nSAVETRK  DC    C'9 TRACK    '                                     -CWB-\nOWNERSAV DC    CL10'          ',C'.'            -CWB-\nVTOCHED2 DC    C'-SEQ   DATA SET NAME     RECFM  LRECL  BLKSIZE DEN TRT+\n               CH  MAX BLK  MIN BLK  AVG BLK  BLK COUNT  CREATED  JOB N+\n               AME  STEP      EXPIRES.'\nPOSMSG   DC    C'0FIRST OUTPUT FILE ON VVVVVV IS 0000 -- LABEL=(0000,BL+\n               P).'                                               -CWB-\nERRSUMSG DC    C'0NUMBER OF I/O ERRORS=XXXXX.'\n* THE CL60 BELOW ALLOWS ROOM TO PERSONALIZE THE TITLE FOR YOUR SHOP\nPAGEHDR  DC    CL60'1TAPESCAN 4.6A  TAPE ANALYSIS AND COPYING PROGRAM'  PYI*\nDATERSLT DC    CL8'MM/DD/YY'      DATE WILL BE PLACED HERE\n         DC    CL2'  '\nTIMERSLT DC    XL11'4021207A20207A20204B20'\n         DC    C'   INPUT VOL='                                   -CWB-\nDDVOL    DC    CL6'VVVVVV'                                        -CWB-\n         DC    CL22'   (LAST MOD-19MAR00) '                       -SBG-\n         DC    CL7'   PAGE'\nPAGECHAR DC    X'40202120'        EXAMPLE EDIT PATTERN FOR PAGE NUMBER\n         DC    CL12'           '  PAGE TRAILING BLANKS\nENDMSG   DC    C'0PROCESSING OF THIS TAPE COMPLETED.'\n         DC    C'    TOTAL BYTES READ='\nBYTES    DC    C'XXXXXXXXXX'\n         DC    C'    NUMBER OF DATA BLOCKS READ='\nNBLKS    DC    C'XXXXXX',C'.'\nLNGTHEST DC    C'0LENGTH ESTIMATE=XXXX FEET YY INCHES FOR DEN=X AND TRT+\n               CH=STANDARD           .'\nLNGTHACC DC    C'0(LENGTH ESTIMATE USUALLY ACCURATE WITHIN PLUS OR MINU+\n               S TEN PERCENT;  ALMOST ALWAYS WITHIN TWENTY PERCENT).'\nLBL2MSG  DC    CL12'0     RECFM='\nRECFM    DC    CL16'        BLKSIZE='\nBLKSIZE  DC    CL16'XXXXX     LRECL='\nLRECL    DC    CL25'XXXXX     LABEL DEN SPEC='\nDENSITY  DC    CL24'                  TRTCH='\nTRTCH    DC    CL8' ',C'.'\n         LTORG\nNOMATCH  DC    C'0WARNING - VOLUME SERIAL NUMBER IN VOL1 LABEL XXXXXX D+\n               OES NOT MATCH INPUT DD VOLSER XXXXXX .'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                             VTOC DSECT                              *\n*                                                                     *\n***********************************************************************\nVTOC     DSECT\nVTOCSEQN DS    CL4                SEQUENCE NUMBER                 -CWB-\nVTOCDSN  DS    CL17               DATA SET NAME.                  -CWB-\nVTOCRECF DS    CL4                RECFM.                          -CWB-\nVTOCLREC DS    CL5                LRECL.                          -CWB-\nVTOCBLKS DS    CL5                BLKSIZE.                        -CWB-\nVTOCDEN  DS    CL4                DENSITY.                        -CWB-\nVTOCTRTC DS    CL2                TRTCH.                          -CWB-\nVTOCMAXB DS    CL5                MAXIMUM BLOCK SIZE.             -CWB-\nVTOCMINB DS    CL5                MINIMUM BLOCK SIZE.             -CWB-\nVTOCAVGB DS    CL5                AVERAGE BLOCK SIZE.             -CWB-\nVTOCOUNT DS    CL6                BLOCK COUNT.                    -CWB-\nVTOCCREA DS    CL8                CREATION DATE.                  -CWB-\nVTOCJOBN DS    CL8                JOB NAME.                       -CWB-\nVTOCSTEP DS    CL8                STEP NAME.                      -CWB-\nVTOCEXPR DS    CL8                EXPIRATION DATE.                -CWB-\n         DS    0D                 ADVANCE TO DOUBLE WORD BNDRY.   -CWB-\nVTOCSIZE EQU   *-VTOC             SIZE OF VTOC ENTRY.             -CWB-\nVTOCEPB  EQU   10                 NUMBER OF ENTRIES PER BLOCK.    -CWB-\nVTOCBLSZ EQU   VTOCEPB*VTOCSIZE+8 SIZE OF VTOC BLOCK.             -CWB-\nMSECT    DSECT\nTRT1     DS    32D\nBLANKBUF DS    CL136              BLANKS FOR BLANKING MSGBUF FAST\nTRT2     DS    32D\nMSGBUF   DS    CL136\nRECBUF   DS    CL136              MINIMUM ALLOC, MAX ALLOC = 64K\nMSECTEND DS    0D\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT102/FILE102.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT102", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}