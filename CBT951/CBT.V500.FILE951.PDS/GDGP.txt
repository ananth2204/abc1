 /*------------------------------REXX----------------------------------
 |                                                                    |
 |  PROGRAM ID:  GDGP (GDG Plus).                                     |
 |                                                                    |
 |  FUNCTION:    This REXX EXEC allows the user to do a couple of     |
 |               things:                                              |
 |                                                                    |
 |               1.  Create a new GDG if the one specified by the     |
 |                   user does not exist; or,                         |
 |                                                                    |
 |               2.  If the GDG does exist, modify the base with      |
 |                   the properties specified by the user.            |
 |                                                                    |
 |               To modify an existing GDG, the EXEC processes as     |
 |               follows:                                             |
 |                                                                    |
 |               1.  If the new limit specified is 255 or less, or    |
 |                   the GDG is already defined as NONEXTENDED, then  |
 |                   the ALTER command is used to update the GDG.     |
 |                                                                    |
 |               2.  If the GDG is defined as NONEXTENDED and a       |
 |                   limit of greater than 255 is requested, the      |
 |                   following process is executed:                   |
 |                                                                    |
 |                   a.  Uncatalog each GDS, disassociating it with   |
 |                       the base.                                    |
 |                   b.  Delete the GDG base and redefine it with     |
 |                       the requested specifications.                |
 |                   c.  Re-catalog each GDS, re-associating it with  |
 |                       the base.                                    |
 |                                                                    |
 |               NOTE:  This process will work with generations on    |
 |                      either DASD or tape.  However, if the ALTER   |
 |                      command cannot be used for the updates        |
 |                      (item 2 above is required for processing),    |
 |                      this EXEC will not work with one or more      |
 |                      generations that have been archived.          |
 |                                                                    |
 |               This REXX EXEC can be run any of 4 ways:             |
 |                                                                    |
 |               1.  Online displaying a panel.  The panel is         |
 |                   displayed when TSO GDGP is invoked without       |
 |                   both the GDG base and limit specified.  If       |
 |                   either are specified, they will be displayed     |
 |                   on the panel.                                    |
 |                                                                    |
 |               2.  Online without a panel.  If TSO GDGP is          |
 |                   invoked with at least the GDG base and limit     |
 |                   specified, the panel will not be displayed       |
 |                   and processing will occur with exactly the       |
 |                   parameters specified when GDGP was invoked.      |
 |                                                                    |
 |               3.  In batch from the panel.  On the GDGP panel,     |
 |                   specify B (for Batch), and JCL will be           |
 |                   displayed which can be submitted to execute      |
 |                   the process as a batch job.                      |
 |                                                                    |
 |               4.  As a batch job.  Simply submit the job from      |
 |                   your JCL library.  Following is sampel JCL:      |
 |                                                                    |
 |                   //GDGP     EXEC PGM=IKJEFT01                     |
 |                   //SYSEXEC   DD DISP=SHR,DSN=rexx.dsn             |
 |                   //SYSTSPRT  DD SYSOUT=*                          |
 |                   //SYSTSIN   DD *                                 |
 |                   GDGP gdg.base.name limit nscr emp fifo purge     |
 |                                                                    |
 |  INPUT:       N/A.  See Parameters below.                          |
 |                                                                    |
 |  PARAMETERS:  Parameters passed to this program are as follows:    |
 |                                                                    |
 |               The following two parameters are required and        |
 |               positional:                                          |
 |                                                                    |
 |               Base    1st parameter.  An existing GDG base to be   |
 |                       converted or the name of a GDG base to be    |
 |                       created.                                     |
 |               Limit   2nd parameter.  The GDG limit for the        |
 |                       converted/new GDG base.                      |
 |                                                                    |
 |                       On the panel only, if left blank and the     |
 |                       specified GDG base already exists, the       |
 |                       current attributes are displayed on the      |
 |                       panel.                                       |
 |                                                                    |
 |               The following parameters are all optional and can    |
 |               be entered in any order (after the first two         |
 |               required parameters).  See DFSMS Access Method       |
 |               Services Commands for detailed descriptions of       |
 |               each parameter.                                      |
 |                                                                    |
 |               SCRATCH/NOSCRATCH  NOSCRATCH is the default.         |
 |               EMPTY/NOEMPTY      NOEMPTY is the default.           |
 |               FIFO/LIFO          LIFO is the default.              |
 |               PURGE/NOPURGE      NOPURGE is the default.           |
 |                                  When NOSCRATCH is specified,      |
 |                                  NOPURGE is automatically set.     |
 |                                                                    |
 |               For new GDGs, the above defaults are taken when      |
 |               nothing is specified.  For existing GDGs, the        |
 |               value is not changed if not specified/overridden     |
 |               by the user.                                         |
 |                                                                    |
 |  OUTPUT:      Output from this exec is the converted/new GDG.      |
 |                                                                    |
 |--------------------------------------------------------------------|
 |  MAINTENANCE LOG:                                                  |
 |--------------------------------------------------------------------|
 |                                                                    |
 |  ID      DATE                     MODIFICATION                     |
 |  ---   --------   -----------------------------------------------  |
 |  nel   10/06/16   Created this REXX EXEC.                          |
 |        11/23/18   Errors fixed by Peter Glanzmann                  |
 |                                                                    |
 --------------------------------------------------------------------*/

 parse upper arg gdgbase limit parm.1 parm.2 parm.3 parm.4

 call CHECK_MSGID

 exitrc = 0      /*  Initialize EXITRC  */

 /*--------------------------------------------------------------------
 |  Determine if this is being run online or in batch.                |
 --------------------------------------------------------------------*/

 /*  PROCOPT (PROCessing OPTion).  Process...                        */
 /*       J - as a batch job                                         */
 /*       N - Online w/o panel (GDGBASE and LIMIT were provided)     */
 /*       O - Online after panel displayed                           */
 /*       B - In batch after panel displayed                         */

 online = sysvar(sysispf)

 /*  Invoked online in ISPF:  */
 if online = 'ACTIVE' then do

     /*  If both of the required parameters are entered,  */
     /*  then simply process the request.  However, if    */
     /*  either parameter is missing, display the panel.  */
     if gdgbase = '' | limit = '' then do

         /*  Set default of "Process Online" on panel:  */
         procopt = 'O'

         do forever
             "ISPEXEC DISPLAY PANEL(GDGPP)"

             gdgbase_save = gdgbase

             /*  If F3, then exit  */
             if rc > 0 then do
                 call EXIT_PROCESSING
             end

             call DATASET_CHECK

             if exitrc \= 8 then do

                 /*  If user specified "Batch" on panel:  */
                 if procopt = 'B' then do
                     if scratch = '@DFL' then scratch = ''
                     if empty   = '@DFL' then empty   = ''
                     if fifo    = '@DFL' then fifo    = ''
                     if purge   = '@DFL' then purge   = ''

                     call PROCESS_IN_BATCH
                 end
                 else do
                     call MAIN_PROCESSING
                 end
             end

             /*  Re-initialize variables for next panel display:  */
             if exitrc = 0 then do

                 gdgbase = ''
                 limit   = ''
                 scratch = ''
                 empty   = ''
                 fifo    = ''
                 purge   = ''
             end
             else do
                 if scratch = '@DFL' then scratch = ''
                 if empty   = '@DFL' then empty   = ''
                 if fifo    = '@DFL' then fifo    = ''
                 if purge   = '@DFL' then purge   = ''

                 exitrc  = 0
                 gdgbase = gdgbase_save
             end
         end
     end

     /*  Process online w/o panel:  */
     else do
         procopt = 'N'

         /*  Clear the screen:  */
         "CLEAR 0"
     end
 end

 /*  Invoked in a batch job:  */
 else do
     procopt = 'J'
 end

 /*  Processing for online w/o panel and invoked in a batch job:  */
 if exitrc \= 8 then call DATASET_CHECK
 if exitrc \= 8 then call PROCESS_PARMS
 if exitrc \= 8 then call MAIN_PROCESSING

 call EXIT_PROCESSING

 /*--------------------------------------------------------------------
 |  Main Processing:  If executed by a batch job or processed online  |
 |                    from the panel.                                 |
 --------------------------------------------------------------------*/

 MAIN_PROCESSING:

 call INITIALIZE_REPORT_PROCESSING

 call CAPTURE_LISTCAT

 /*--------------------------------------------------------------------
 |  Validate the GDG passed to the EXEC.                              |
 |  1.  If the entry does not exist, create a new GDG base and        |
 |      end the program (RC 0).                                       |
 |  2.  If it is a valid dataset but not a GDG, write an error and    |
 |      end the program (RC 8).                                       |
 --------------------------------------------------------------------*/

 if word(lgdg.1,1) ¬= 'GDG' then do

     /*  Alloc a new GDG base for a GDG  */
     /*  that did not already exist:     */
     if word(lgdg.1,1) = 'IDC3012I' then do
         call CREATE_NEW_GDG
     end

     /*  ERROR - dataset specified is valid but not a GDG:  */
     else do
         if procopt = 'J' | procopt = 'N' then do
             say
             say '****************************************************'
             say '*  DATASET MUST BE A GDG BASE!                     *'
             say '****************************************************'
             say
         end

         "ISPEXEC SETMSG MSG(GDGP005)"
         exitrc = 8
     end
 end

 /*--------------------------------------------------------------------
 |  The GDG passed to the EXEC is valid, keep processing...           |
 --------------------------------------------------------------------*/

 else do

     /*----------------------------------------------------------------
     |  Get the previously defined GDG base properties for the post-  |
     |  processing report.                                            |
     ----------------------------------------------------------------*/

     gdsct = 0       /*  GDS counter     */
     l     = 26      /*  report counter  */

     do i=1 to lgdg.0
         if substr(word(lgdg.i,1),1,5) = 'LIMIT' then do
             report.11 = '  GDG base previously defined with the',
                         'following properties:'
             report.12 = '  ----------------------------------'||,
                         '------------------------'
             report.13 = '      ' gdgbase
             report.14 = lgdg.i
             report.15 = ''
             report.16 = ''

             extended = word(lgdg.i,6)
         end

         if word(lgdg.i,1) = 'NONVSAM' then do
             gdsct = gdsct + 1

             l = l + 1
             report.l = '      ' left(word(lgdg.i,3),44)
         end
     end

     l = l + 1
     report.l = ''

     report.0 = l

     /*  Save the current attributes:  */
     cur_limit   = strip(substr(word(report.14,1),23,3),'l','-')
     cur_scratch = word(report.14,2)
     cur_empty   = word(report.14,3)
     cur_fifo    = word(report.14,4)
     cur_purge   = word(report.14,5)

     select

         /*------------------------------------------------------------
         |  If none of the attributes have changed, don't redefine    |
         |  the GDG base.                                             |
         ------------------------------------------------------------*/

         when limit   = cur_limit                        &,
              (scratch = cur_scratch | scratch = '@DFL') &,
              (empty   = cur_empty   | empty   = '@DFL') &,
              (fifo    = cur_fifo    | fifo    = '@DFL') &,
              (purge   = cur_purge   | purge   = '@DFL') then do
             if procopt = 'J' | procopt = 'N' then do
                 say
                 say '************************************************'
                 say '*  No attributes have been changed.  GDG base  *'
                 say '*  not modified.                               *'
                 say '************************************************'
                 say
             end
             else do
                 "ISPEXEC SETMSG MSG(GDGP007)"
             end

             exitrc = 8
         end

         /*------------------------------------------------------------
         |  If no LIMIT was specified (which can only happen from     |
         |  the panel), display all of the current attributes on the  |
         |  panel.                                                    |
         ------------------------------------------------------------*/

         when limit = '' then do
             limit   = cur_limit
             scratch = cur_scratch
             empty   = cur_empty
             fifo    = cur_fifo
             purge   = cur_purge

             exitrc = 8
         end

         /*------------------------------------------------------------
         |  If the GDG limit specified is less than than the number   |
         |  of existing generations, terminate processing.            |
         ------------------------------------------------------------*/

         when limit < gdsct then do
             if procopt = 'J' | procopt = 'N' then do
                 say
                 say '************************************************'
                 say '*  Specified limit is smaller than the number  *'
                 say '*  of existing GDSs.  Request terminated.      *'
                 say '************************************************'
                 say
             end
             else do
                 "ISPEXEC SETMSG MSG(GDGP002)"
             end

             exitrc = 8
         end

         /*------------------------------------------------------------
         |  SHORTCUT:  If the specified LIMIT is 255 or less, or the  |
         |  GDG base is already EXTENDED, just use ALTER.             |
         ------------------------------------------------------------*/

         when limit <= 255 | extended = 'EXTENDED' then do
             call ALTER_GDG_BASE
         end

         /*------------------------------------------------------------
         |  Unable to ALTER the GDG base, which means the GDG base    |
         |  was defined as NONEXTENDED and the user wants a LIMIT of  |
         |  more than 255.  We will need to uncatalog all of the      |
         |  GDSs, delete the old GDG base, define it with the new     |
         |  specifications, and re-catalog the GDSs, re-associating   |
         |  them with the base.                                       |
         ------------------------------------------------------------*/

         otherwise do

             call CREATE_STATEMENTS   /* To uncatalog & catalog GDSs */

             if exitrc = 0 then do
                 call UNCAT_GENERATION_DATASETS
                 call CAPTURE_LISTCAT
                 call DELETE_AND_REDEFINE_GDG_BASE
                 call RECAT_GENERATION_DATASETS
                 call WRITE_POST_PROCESSING_REPORT
             end
         end
     end
 end

 return

 /*--------------------------------------------------------------------
 |  - - - - - - - - - -  INTERNAL REXX ROUTINES  - - - - - - - - - -  |
 --------------------------------------------------------------------*/

 /*--------------------------------------------------------------------
 |  Check the caller's TSO profile to see if MSGID/NOMSGID is set.    |
 |  If NOMSGID, then change to MSGID and and set USER_MSGID to FALSE  |
 |  (0).  This will be set back to NOMSGID when exiting the program.  |
 --------------------------------------------------------------------*/

 CHECK_MSGID:

 x = outtrap("lprof.","*","CONCAT")
 "PROFILE"

 user_msgid = 1

 do i=1 to words(lprof.1)
     if word(lprof.1,i) = 'NOMSGID' then do
         user_msgid = 0
         "PROF MSGID"
     end
 end

 return

 /*--------------------------------------------------------------------
 |  Verify the validity of the GDG being processed.                   |
 --------------------------------------------------------------------*/

 DATASET_CHECK:

 /*  If dataset has quotes, strip them off and process  */
 /*  the dataset as it is.  If it has no quotes,        */
 /*  prepend the userid:                                */
 if left(gdgbase,1) = "'" then do
     gdgbase = strip(gdgbase,b,"'")
 end
 else if sysvar('syspref')   \= null    &,
         substr(gdgbase,1,7) \= sysvar('sysuid') then do
     gdgbase = sysvar('syspref')||'.'||gdgbase
 end

 if length(gdgbase) > 35 then do
     if procopt = 'O' then do
         "ISPEXEC SETMSG MSG(GDGP003)"
     end
     else do             /*  procopt = 'N' | 'J'  */
         say
         say '****************************************************'
         say '*  GDG BASE SPECIFIED EXCEEDS 35 CHARACTERS!       *'
         say '****************************************************'
         say
     end

     exitrc = 8
 end

 return

 /*--------------------------------------------------------------------
 |  The Batch option was selected from the online panel.  Do the      |
 |  following:                                                        |
 |                                                                    |
 |  1.  Create a temporary dataset with JCL for the user to submit.   |
 |  2.  When the user backs out of the JCL, free/delete the file.     |
 |  3.  Exit the program.                                             |
 |                                                                    |
 --------------------------------------------------------------------*/

 PROCESS_IN_BATCH:

 j = 0

 /*  Ensure dataset name is unique:  */
 do until i = 'DATASET NOT FOUND'
     j = j + 1

     dsn1 = userid()'.TMP@.G2GE00'j

     i = sysdsn("'"dsn1"'")
 end

 /*  Create and allocate the temp dataset:  */
 "ALLOC DA('"dsn1"') FI(FILEI) SP(10 1) TR LRECL(80)",
 "BLKSIZE(6480) RECFM(F B) DSORG(PS) UNIT(SYSDA) REUSE"

 /*  Write the JCL to the temporary dataset:  */
 queue '//JOBCARD HERE                                              '
 queue '//*                                                         '
 queue '//GDGP     EXEC PGM=IKJEFT01                                '
 queue '//SYSEXEC   DD DISP=SHR,DSN=dsn.where.GDGP.exists           '
 queue '//SYSTSPRT  DD SYSOUT=*                                     '
 queue '//SYSTSIN   DD *                                            '
 queue 'GDGP' gdgbase limit empty scratch fifo purge
 queue '//*                                                         '

 'EXECIO' queued() 'DISKW FILEI (FINIS)'

 /*  Edit the JCL:  */
 "ISPEXEC EDIT DATASET('"dsn1"')"

 /*  Free/delete the temporary dataset:  */
 x = MSG("OFF")

 "FREE DSNAME('"dsn1"') DELETE"
 if rc = 12 then do
     "DELETE '"dsn1"'"
 end

 x = MSG("ON")

 return

 /*--------------------------------------------------------------------
 |  Process parameters from processing other than from the panel.     |
 --------------------------------------------------------------------*/

 PROCESS_PARMS:

 /*  Default values of optional parms:  */
 empty   = '@DFL'
 fifo    = '@DFL'
 purge   = '@DFL'
 scratch = '@DFL'

 /*  Set flags to FALSE:  */
 eset = 0
 fset = 0
 pset = 0
 sset = 0

 /*  Validate parameters and assign values:  */
 do i=1 to 4 until exitrc = 8
     select
         when parm.i = '' then do
             nop
         end
         when parm.i = 'EXTENDED' | parm.i = 'NOEXTENDED' then do
             nop
         end
         when parm.i = 'EMPTY' | parm.i = 'NOEMPTY' then do
             if eset then do
                 say
                 say '************************************************'
                 say '*  EMPTY/NOEMPTY MAY ONLY BE SPECIFIED ONCE!   *'
                 say '************************************************'
                 say

                 exitrc = 8
             end

             eset  = 1
             empty = parm.i
         end
         when parm.i = 'FIFO' | parm.i = 'LIFO' then do
             if fset then do
                 say
                 say '************************************************'
                 say '*  FIFO/LIFO MAY ONLY BE SPECIFIED ONCE!       *'
                 say '************************************************'
                 say

                 exitrc = 8
             end

             fset = 1
             fifo = parm.i
         end
         when parm.i = 'PURGE' | parm.i = 'NOPURGE' then do
             if pset then do
                 say
                 say '************************************************'
                 say '*  PURGE/NOPURGE MAY ONLY BE SPECIFIED ONCE!   *'
                 say '************************************************'
                 say

                 exitrc = 8
             end

             pset = 1
             purge = parm.i
         end
         when parm.i = 'SCRATCH' | parm.i = 'NOSCRATCH' then do
             if sset then do
                 say
                 say '************************************************'
                 say '*  SCRATCH/NOSCR MAY ONLY BE SPECIFIED ONCE!   *'
                 say '************************************************'
                 say

                 exitrc = 8
             end

             sset    = 1
             scratch = parm.i
         end
         otherwise do
             say
             say '****************************************************'
             say '*  INVALID PARAMETERS - ENDING PROGRAM!            *'
             say '****************************************************'
             say

             exitrc = 8
         end
     end
 end

 /*  Initialize the INVALID_LIMIT flag to FALSE (0):  */
 invalid_limit = 0

 /*  Ensure each digit of the LIMIT is numeric:  */
 do i=1 to length(limit)
     if substr(limit,i,1) < 0 | substr(limit,i,1) > 9 then do
         invalid_limit = 1
     end
 end

 /*  The limit can't be more than 3 digits (999):  */
 if length(limit) > 3 then do
     invalid_limit = 1
 end

 /*  LIMIT must be 1-999:  */
 if invalid_limit & exitrc = 0 then do
     say
     say '****************************************************'
     say '*  INVALID LIMIT PARAMETER - MUST BE 1-999!        *'
     say '****************************************************'
     say

     exitrc = 8
 end

 /*  LIMIT must be an integer:  */
 if pos('.',limit) > 0 & exitrc = 0 then do
     say
     say '****************************************************'
     say '*  LIMIT PARAMETER MUST BE AN INTEGER!             *'
     say '****************************************************'
     say

     exitrc = 8
 end

 return

 /*--------------------------------------------------------------------
 |  Initialize the REPORT STEM variable.                              |
 --------------------------------------------------------------------*/

 INITIALIZE_REPORT_PROCESSING:

 drop report.

 curdate = date('u')
 curtime = time()

 report.1 = ''
 report.2 = ''
 report.3 = '                          GDGP Post-Processing Report',
            '                ' curdate
 report.4 = '                          ---------------------------',
            '                ' curtime
 report.5 = ''
 report.6 = '  Parameters:'
 report.7 = '  -----------'
 report.8 = '      ' gdgbase '' limit ' '

 if scratch \= '@DFL' then report.8 = report.8||left(scratch,11)
 if empty   \= '@DFL' then report.8 = report.8||left(empty,11)
 if fifo    \= '@DFL' then report.8 = report.8||left(fifo,11)
 if purge   \= '@DFL' then report.8 = report.8||left(purge,11)

 report.9  = ''
 report.10 = ''

 return

 /*--------------------------------------------------------------------
 |  Capture a LISTCAT of the GDG base in the LGDG stem variable.      |
 --------------------------------------------------------------------*/

 CAPTURE_LISTCAT:

 drop lgdg.

 x = outtrap("lgdg.",'*',"CONCAT")
 "LISTCAT ENT('"gdgbase"') ALL"

 return

 /*--------------------------------------------------------------------
 |  Create a new GDG base - the one specified does not exist.         |
 --------------------------------------------------------------------*/

 CREATE_NEW_GDG:

 /*  Set the default values for the parameters  */
 /*  that were not explicitly specified:        */
 if empty   = '@DFL' then empty   = 'NOEMPTY'
 if fifo    = '@DFL' then fifo    = 'LIFO'
 if purge   = '@DFL' then purge   = 'NOPURGE'
 if scratch = '@DFL' then scratch = 'NOSCRATCH'

 /*  Check for LIMIT not passed to the program (this can only   */
 /*  occur from the panel).  If no limit, return to the panel   */
 /*  and display an error message:                              */
 if limit = '' then do
     "ISPEXEC SETMSG MSG(GDGP006)"
     exitrc = 8
 end
 else do
     "DEFINE GDG (NAME('"gdgbase"')",
     "LIMIT("limit")",
     "EXTENDED" empty fifo purge scratch

     x = outtrap("lgdn.",'*',"CONCAT")
     "LISTCAT ENT('"gdgbase"') ALL"

     do i=1 to lgdn.0
         if substr(word(lgdn.i,1),1,5) = 'LIMIT' then do
             report.11 = '  New GDG base defined as follows:'
             report.12 = '  --------------------------------'
             report.13 = '      ' gdgbase
             report.14 = lgdn.i
             report.15 = ''

             report.0  = 15
         end
     end

     if procopt = 'J' | procopt = 'N' then do
         do i=1 to report.0
             say report.i
         end
     end
     else do
         call STEMEDIT 'browse','report.'
     end
 end

 return

 /*--------------------------------------------------------------------
 |  Use ALTER to update the GDG properties.                           |
 --------------------------------------------------------------------*/

 ALTER_GDG_BASE:

 /*  Set the default values for the parameters that were not     */
 /*  explicitly overridden with the values of the old GDG base:  */
 do i=1 to 10
     if substr(word(lgdg.i,1),1,5) = 'LIMIT' then do
         if scratch = '@DFL' then scratch = word(lgdg.i,2)
         if empty   = '@DFL' then empty   = word(lgdg.i,3)
         if fifo    = '@DFL' then fifo    = word(lgdg.i,4)
         if purge   = '@DFL' then purge   = word(lgdg.i,5)
     end
 end

 /*  ALTER does not allow NSCR to be specified if PURGE     */
 /*  is already specified.  Likewise, ALTER does not allow  */
 /*  PURGE to be specified if NSCR is already specified.    */
 /*  Since NOPURGE is set if NOSCRATCH is specified         */
 /*  regardless of the PURGE specification when defining a  */
 /*  new GDG, we're just going to do the same with ALTER:   */
 if scratch = 'NOSCRATCH' then do
     purge = 'NOPURGE'
 end

 /*  Use IDCAMS to do the ALTER (it works better than   */
 /*  TSO).  Allocate the necessary files and write the  */
 /*  ALTER statement to SYSIN with EXECIO:              */
 'ALLOC F(SYSPRINT) SPA(10,1) TR RECFM(F B)',
       'LRECL(80) BLKSIZE(80) REUSE'
 'ALLOC F(SYSIN) SPA(1,1) TR RECFM(F B)',
       'LRECL(80) BLKSIZE(80) REUSE'

 si.1 = " ALTER '"gdgbase"' LIMIT("limit")",
        scratch empty fifo purge
 si.0 = 1

 'EXECIO * DISKW SYSIN (FINIS STEM si.)'

 address linkmvs 'IDCAMS'

 /*  Set things back to the way they were:  */
 address
 'FREE F(SYSPRINT)'
 'FREE F(SYSIN)'

 call CAPTURE_LISTCAT

 l = 26

 do i=1 to lgdg.0
     if substr(word(lgdg.i,1),1,5) = 'LIMIT' then do
         report.17 = '  GDG base has been ALTERed with the following',
                     'properties:'
         report.18 = '  ------------------------------------------'||,
                     '--------------'
         report.19 = '      ' gdgbase
         report.20 = lgdg.i
         report.21 = ''
         report.22 = ''
     end

     if word(lgdg.i,1) = 'NONVSAM' then do
         l = l + 1
         if word(report.l,1) = word(lgdg.i,3) then do
             report.l = report.l||' - Still intact'
         end
     end
 end

 report.23 = '  Generations associated with ALTERed base:'
 report.24 = ''
 report.25 = '       Generations Prior to Processing'
 report.26 = '       --------------------------------------------'

 if procopt = 'J' | procopt = 'N' then do
     do i=1 to report.0
         say report.i
     end
 end
 else do
     call STEMEDIT 'browse','report.'
 end

 return

 /*--------------------------------------------------------------------
 |  Create statements to uncatalog (in the UNCAT stem variable) and   |
 |  catalog (in the CAT stem variable) each GDS.                      |
 --------------------------------------------------------------------*/

 CREATE_STATEMENTS:

 j = 0

 do i=1 to lgdg.0
     if word(lgdg.i,1) = 'NONVSAM' then do
         j = j + 1

         uncat.j = " DEL '"word(lgdg.i,3)"' NOSCRATCH"
         cat.j   = " DEF NVSAM(NAME('"word(lgdg.i,3)"')"
     end

     /*  Finish the statement to re-catalog the GDS:  */
     if substr(word(lgdg.i,1),1,6) = 'VOLSER' then do
         call GET_DEVICE_TYPE

         if devtype = '????' then do
             if procopt = 'J' | procopt = 'N' then do
                 say
                 say '************************************************'
                 say '*  At least one GDS resides on an unsupported  *'
                 say '*  device.  Request terminated.                *'
                 say '************************************************'
                 say
             end
             else do
                 "ISPEXEC SETMSG MSG(GDGP004)"
             end

             exitrc = 8
        /*   exitrc = 8; call EXIT_PROCESSING      */
         end

         cat.j = cat.j 'DEVT('devtype')',
                       'VOL('substr(word(lgdg.i,1),19,6)') RECATALOG)'
     end
 end

 uncat.0 = j
 cat.0   = j

 return

 /*--------------------------------------------------------------------
 |  Get the device type of a GDS.                                     |
 --------------------------------------------------------------------*/

 GET_DEVICE_TYPE:

 devtyp34 = substr(word(lgdg.i,2),20,4)

 select
     when devtyp34 = '2004' then devtype = '9345'   /*  DISK  */
     when devtyp34 = '200C' then devtype = '3375'   /*  DISK  */
     when devtyp34 = '200E' then devtype = '3380'   /*  DISK  */
     when devtyp34 = '200F' then devtype = '3390'   /*  DISK  */
     when devtyp34 = '200A' then devtype = '3340'   /*  DISK  */
     when devtyp34 = '2009' then devtype = '3330'   /*  DISK  */
     when devtyp34 = '200D' then devtype = '3330-1' /*  DISK  */
     when devtyp34 = '200B' then devtype = '3350'   /*  DISK  */
     when devtyp34 = '2008' then devtype = '2314'   /*  DISK  */
     when devtyp34 = '8003' then devtype = '3420'   /*  TAPE  */
     when devtyp34 = '8003' then devtype = '3420'   /*  TAPE  */
     when devtyp34 = '8003' then devtype = '3420'   /*  TAPE  */
     when devtyp34 = '8003' then devtype = '3420'   /*  TAPE  */
     when devtyp34 = '8080' then devtype = '3480'   /*  TAPE  */
     when devtyp34 = '8080' then devtype = '3480X'  /*  TAPE  */
     when devtyp34 = '8081' then devtype = '3490'   /*  TAPE  */
     when devtyp34 = '8083' then devtype = '3590-1' /*  TAPE  */
     otherwise  devtype = '????'
 end

 return

 /*--------------------------------------------------------------------
 |  Uncatalog all of the GDS datasets, seperating them from the GDG   |
 |  base.                                                             |
 --------------------------------------------------------------------*/

 UNCAT_GENERATION_DATASETS:

 if procopt = 'J' | procopt = 'N' then do
     say 'Uncataloging the GDSs, separating them from the base...'
 end
 else do
     _tmpgdg = gdgbase

     /*  Display the In-Progress message while searching:  */
     "ISPEXEC CONTROL DISPLAY LOCK"
     "ISPEXEC DISPLAY MSG(GDGP001) MSGLOC(PURGE)"

     gdgbase = _tmpgdg
 end

 /*  Uncatalog each of the GDSs:  */
 do i=1 to uncat.0
     uncat.i
 end

 return

 /*--------------------------------------------------------------------
 |  Delete the existing GDG base and allocate a new one.              |
 --------------------------------------------------------------------*/

 DELETE_AND_REDEFINE_GDG_BASE:

 if procopt = 'J' | procopt = 'N' then do
     say 'Deleting & Redefining the GDG base...'
 end

 /*  Set the default values for the parameters that were not     */
 /*  explicitly overridden with the values of the old GDG base:  */
 do i=1 to 10
     if substr(word(lgdg.i,1),1,5) = 'LIMIT' then do
         if scratch = '@DFL' then scratch = word(lgdg.i,2)
         if empty   = '@DFL' then empty   = word(lgdg.i,3)
         if fifo    = '@DFL' then fifo    = word(lgdg.i,4)
         if purge   = '@DFL' then purge   = word(lgdg.i,5)
     end
 end

 /*  Delete and redefine the GDG base:  */
 do i=1 to lgdg.0
     if word(lgdg.i,2) = 'BASE' then do

         /*  Delete the old GDG base:  */
         "DELETE '"word(lgdg.i,4)"' GDG FORCE"

         /*  Allocate the new GDG base:  */
         "DEFINE GDG (NAME('"word(lgdg.i,4)"')",
         "LIMIT("limit")",
         "EXTENDED" scratch empty fifo purge
     end
 end

 return

 /*--------------------------------------------------------------------
 |  Re-catalog the GDS datasets, re-associating them with the GDG     |
 |  base.                                                             |
 --------------------------------------------------------------------*/

 RECAT_GENERATION_DATASETS:

 if procopt = 'J' | procopt = 'N' then do
     say 'Re-cataloging the GDSs, re-associating them with the base...'
 end

 /*  Recatalog each of the GDSs:  */
 do i=1 to cat.0
     cat.i
 end

 return

 /*--------------------------------------------------------------------
 |  Get the newly defined GDG base properties, wrap up the post-      |
 |  processing report, and write it out.                              |
 --------------------------------------------------------------------*/

 WRITE_POST_PROCESSING_REPORT:

 call CAPTURE_LISTCAT

 l = 26

 do i=1 to lgdg.0
     if substr(word(lgdg.i,1),1,5) = 'LIMIT' then do
         report.17 = '  GDG base has been redefined with the following',
                     'properties:'
         report.18 = '  --------------------------------------------'||,
                     '--------------'
         report.19 = '      ' gdgbase
         report.20 = lgdg.i
         report.21 = ''
         report.22 = ''
     end

     if word(lgdg.i,1) = 'NONVSAM' then do
         l = l + 1
         if word(report.l,1) = word(lgdg.i,3) then do
             report.l = report.l||' - Processed successfully'
         end
     end
 end

 report.23 = '  All generations have been successfully processed:'
 report.24 = ''
 report.25 = '       Generations Prior to Processing'
 report.26 = '       --------------------------------------------'

 if procopt = 'J' | procopt = 'N' then do
     do i=1 to report.0
         say report.i
     end
 end
 else do
     call STEMEDIT 'browse','report.'
 end

 return

 /*--------------------------------------------------------------------
 |  Exit Processing.                                                  |
 --------------------------------------------------------------------*/

 EXIT_PROCESSING:

 /*  If the user had NOMSGID specified on entry to this program,  */
 /*  then set their profile back to NOMSGID:                      */
 if user_msgid = 0 then do
     "PROF NOMSGID"
 end

 exit exitrc

