{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013105000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2527798, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 26, "INMDSNAM": "CBT.V500.FILE858.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2527798, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2527798, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE858.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00(\\x11'", "DS1TRBAL": "b'$\\xec'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07\\x0f\\x00\\x04\\x07\\x11\\x00\\x0e\\x00)'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04S\\x00I\\x01\\x110_\\x01\\x110_\\x01C\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf3@@@'", "ispf": {"version": "04.83", "flags": 0, "createdate": "2011-11-01T00:00:00", "modifydate": "2011-11-01T01:43:49", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-483"}, "text": "REGULAR CBT TAPE - VERSION 483    FILE:  858\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT483.FILE858\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 124 MEMBERS COUNTED; CUMULATIVE SIZE IS 22,681 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/01/11    01:43:49    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x05\\x01\\x110O\\x01\\x110O!W\\x1ed\\x1ed\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "2011-10-31T00:00:00", "modifydate": "2011-10-31T21:57:05", "lines": 7780, "newlines": 7780, "modlines": 0, "user": "CLEMSON"}, "text": "\n  Structured Programming Macros User's Guide and Reference\n\nCopyright (c) 1987-2011 Clemson University\n\nGenerated: 2005-09-20-04:00 12:11:10-04:00\n\n------------------------------------------------------------------------\n\n*Table of Contents*\n\nPreface <#id477932>\nI. Structured Macros User's Guide <#id421938>\n\n1. Nesting Levels <#id420713>\n2. Conditional Statements <##condch>\n\nStandard Conditions <#id420432>\nCoding Conditional Expressions <#id479304>\nUser-Defined Conditions <##ucond>\n\n3. Blocks <#id480744>\n\nThe Program Block <#id480152>\nThe Inline Block <#id480866>\nThe Subroutine Block <#id480918>\nThe ErrExit Block <#id480993>\n\n4. Program Environments <#id480697>\n\nDC Environment <#id480675>\n\nSystem Mode And User Mode <#id480689>\nReentrancy Under IDMS/DC <#id481323>\n*NORENT <#id481357>\n*NORENTSYS <#id481378>\n*RENT <#id481394>\n*RENTSYS <#id481416>\n*PWA <#id481439>\n*PWASYS <#id481470>\n\nOS Environment <#id481498>\n\n*NORENT <#id481518>\n*RENT <#id481540>\n*PWA <##ospwa>\n*MAIN <#id481654>\n*NOMAIN <#id481682>\n*SRVPRC <#id481702>\n\nPL/I Environment <#id481723>\n\n*STDPLI <#id481743>\n\nOther Environments <#id481784>\nSubroutine Block Super Options <#id481843>\n\n*SWA <#id481856>\n*NOSUBOPTS <#id481886>\n\nConclusion <#id481913>\n\n5. Program and Subroutine Work Areas <##pwaswa>\n\nProgram Work Areas <#id480591>\nReusable Program Work Areas <#id482608>\nSubroutine Work Areas <#id482699>\nSWA Placement <#id482794>\nPSDs and SSDs <#id482826>\n\n6. Large Program Management <##large>\n\nPWAs and SWAs with Dynamic Storage Management <##dynpwa>\n\nRecursive Subroutines with the DYN Option <#id483218>\nStorage Calculations with the DYN Option <#id483252>\nSWA Addressability with the DYN Option <#id483287>\nSuper Options Used with the DYN Option <#id483309>\nStorage Optimization with the DYN Option <#id483370>\n\nLONG and LOADBASE <#id483417>\nSize Limitations <#id483502>\nConclusion <#id483547>\n\n7. The IF Structure <##if>\n8. Loops <#id484008>\n9. CASEs and CASE Blocks <##case>\n10. Parameter Lists and Standard Linkage <##parms>\n\nReferencing Input Parameter Lists <#id484600>\nGenerating Parameter Lists <#id485185>\nAutomatic Parameter Lists <#id485428>\nPermanent Parameter Lists <#id485470>\nCalling Subroutines <#id485601>\nParameter Lists on CALLSUB and CALLX <#id485668>\nRecommendations <#id485741>\nExample Source <#id485850>\n\n11. Location and Scope of Data Structures <##scope>\n\nLocal Scope within Subroutines <#id486795>\n\n12. Miscellaneous Macros <#id487245>\n\nBit Manipulation <#id487260>\nTesting A Register <#id486653>\nInitializing Storage <#id486674>\nRegister Loading <#id486708>\nExecuting Instructions <#id487418>\nLoading Control Block Addresses <#id487517>\nControlling Structured Macro Operation <#id487616>\n\n13. Miscellaneous Examples <#id486553>\n\nA Search Loop <#id486567>\nScanning Text <#id486365>\nA DCB EODAD Exit <#id488214>\nReturning R0 and R1 with ENDBLK <#id488268>\n\n14. Structured Macros Listing Program <##listing>\n\nOutput of the Listing Program <#id487698>\nControlling Listing Program Operation <#id488666>\n\nII. Structured Macro Reference <#id493194>\n\n15. The BLOCK Macro <#id430569>\n\nBLOCK <#id430575> - Structured macro used to start a block.\n\n16. The CALLCASE Macro <#id497725>\n\nCALLCASE <#id497731> - Structured macro used to call a subroutine based\non a case number.\n\n17. The CALLSUB Macro <#id497511>\n\nCALLSUB <#id497517> - Macro used to call an internal subroutine with\nlinkage provided by the Structured Macros. A parameter list can be\ncreated for the call and its address loaded into register one, or\nregister one can be loaded with the address of a previously created list.\n\n18. The CALLX Macro <#id499259>\n\nCALLX <#id499265> - Macro used to call an external subroutine with\nstandard OS linkage. A parameter list can be created for the call and\nits address loaded into register one, or register one can be loaded with\nthe address of a previously created list.\n\n19. The CASE Macro <#id499737>\n\nCASE <#id499743> - Structured macro used to start the code for a\nparticular case within a case block. This macro must be coded between a\nCASEBLK and ENDCASE macro. The CASE macro is always associated with the\ninnermost CASEBLK.\n\n20. The CASEBLK Macro <#id499729>\n\nCASEBLK <#id499711> - Structured macro used to start a case block. Case\nblocks can be nested up to twenty deep.\n\n21. The DEFUCOND Macro <#id500418>\n\nDEFUCOND <#id500425> - Structured macro used to define the name of a\nuser condition and to identify the macro that processes it. With\nDEFUCOND the programmer can add special case conditions to the list of\nstandard conditions available in conditional expressions. For\ninformation on writing a user condition macro, see User-Defined Conditions.\n\n22. The ELSE Macro <#id498508>\n\nELSE <#id498514> - Structured macro used to start the else code for an\nassociated IF or ELSEIF macro. An ELSE macro is always associated with\nthe innermost IF structure.\n\n23. The ELSEIF Macro <#id500623>\n\nELSEIF <#id500630> - Structured macro used to start the else code for an\nassociated IF or ELSEIF macro. An ELSEIF macro is always associated with\nthe innermost IF structure. An ELSEIF is like an ELSE macro followed by\nan IF macro except that the IF nesting level stays the same.\n\n24. The ENDBLK Macro <#id500933>\n\nENDBLK <#id500939> - Structured macro used to end a block structure.\nRefer to the description of the BLOCK macro for more information.\n\n25. The ENDCASE Macro <#id501360>\n\nENDCASE <#id501366> - Structured macro used to end a case block structure.\n\n26. The ENDIF Macro <#id501300>\n\nENDIF <#id501306> - Structured macro used to end an IF structure.\n\n27. The ENDLOOP Macro <#id501846>\n\nENDLOOP <#id501852> - Structured macro used to end a LOOP structure. For\nmore information, see The LOOP macro.\n\n28. The ENDPSD Macro <#id501603>\n\nENDPSD <#id501610> - Macro used to define the end of the Program Static\nData (PSD). The ENDPSD macro is used to close either a partial PSD\nwithin the program code, or the last PSD at the end of the program.\n\n29. The ENDPWA Macro <#id500124>\n\nENDPWA <#id500130> - Macro used to define the end of the Program Work\nArea (PWA) or to close a partial PWA. The ENDPWA macro defines the\nPWAPLLEN tag to establish the length of the PWA. If the DYN option is\nbeing used, ENDPWA uses the ##ORGS macro to reserve space for the SWAs.\nIf option NORENT is in effect, a DS instruction is generated to reserve\nstorage in the CSECT for the PWA.\n\n30. The ENDSSD Macro <#id502472>\n\nENDSSD <#id502478> - Macro used to define the end of the Subroutine\nStatic Data (SSD). The ENDSSD macro is used to close either a partial\nSSD within the subroutine code, or the last SSD at the end of the\nsubroutine.\n\n31. The ENDSWA Macro <#id502778>\n\nENDSWA <#id502785> - Macro used to define the end of the Subroutine Work\nArea (SWA). It is also used to end a partial SWA definition. The ENDSWA\nmacro establishes the length of the SWA for Dynamic Storage\ncalculations. ENDSWA insures double word alignment for anything that\nfollows the SWA.\n\n32. The ERREXIT Macro <#id502394>\n\nERREXIT <#id502621> - Structured macro used to conditionally cause an\nerrexit block to be executed.\n\n33. The EXI Macro <#id503129>\n\nEXI <#id503135> - This is the EXecute Immediate macro. It is used to\ngenerate an EX instruction and the instruction to be executed. This\nallows the EXecuted statement to be defined at the same time the EX\ninstruction is defined, minimizing confusion. It also insures that the\nUSING environment is the same as that of the EX instruction. The\nEXecuted instruction is generated in the PSD for the program (or SSD for\na subroutine) if the program has selected option LOCTR. Otherwise, it is\ngenerated inline with a branch around it.\n\n34. The FILL Macro <#id503422>\n\nFILL <#id503428> - Macro used to fill an area of storage with a character.\n\n35. The IBIT Macro <#id503730>\n\nIBIT <#id503736> - Macro used to invert bit flags in a byte.\n\n36. The IF Macro <#id504003>\n\nIF <#id504009> - Structured macro used to start an IF structure.\n\n37. The LCBA Macro <#id504561>\n\nLCBA <#id504567> - This macro loads the address of certain control\nblocks into a register. No registers are changed except for the register\nspecified. A zero condition is set if the control block cannot be\nlocated. It is not necessary for the mapping macros for the control\nblocks used internally by this macros to be included in the source program.\n\n38. The LEAVE Macro <#id503410>\n\nLEAVE <#id503416> - Structured macro used to leave a structure.\n\n39. The LOOP Macro <##loopm>\n\nLOOP <#id505094> - Structured macro used to start a loop structure. For\nLOOP WHILE loops, tests are done at the start of the loop. For LOOP\nUNTIL loops, tests are done at the bottom of the loop. If the ENDLOOP\nspecifies UNTIL,LEAVE, the loop will continue until a LEAVE macro is\nused to leave the loop. BCT, BXH, and BXLE loop use the assembler\ninstruction by the same name. BXH instructions are generated at the top\nof the loop and BXLE, and BCT instructions are generated at the bottom\nof the loop.\n\n40. The L8, L16, L24, L32 Macros <#id505508>\n\nL8, L16, L24, L32 <#id504978> - Macros used to load a register with one,\ntwo, three, or four bytes of data from non-aligned storage. This macro\nclears the register and issues the appropriate ICM to accomplish this.\n\n41. The PLIST Macro <#id505744>\n\nPLIST <#id505750> - Macro used to generate or modify a parameter list.\nThe parameter list can be created in default parameter list storage or\nrouted to a specific location. Register one is also loaded with the\naddress of the completed list.\n\n42. The PSD Macro <#id506149>\n\nPSD <#id506155> - Macro used to define the beginning of the Program\nStatic Data (PSD). The PSD macro uses LOCTR to locate the static data\nafter the instructions for the program. The PSD should be defined just\nbefore the PWA for a particular program block if there is one.\n\n43. The PWA Macro <#id506790>\n\nPWA <#id506796> - Macro used to define the beginning of the Program Work\nArea (PWA). The PWA macro automatically reserves space for a standard OS\nsave area, the SMWA, and any parameter lists if it is appropriate for\nthe current environment. Also, if the DYN option is being used, PWA sets\nup the dynamic storage pointers (NAB, EOS-64). The PWA should be defined\nas the last thing associated with a particular program block.\n\n44. The RBIT Macro <#id506750>\n\nRBIT <#id506756> - Macro used to reset bit flags in a byte.\n\n45. The SBIT Macro <#id503114>\n\nSBIT <#id503120> - Macro used to set bit flags in a byte.\n\n46. The SMCTRL Macro <#id503099>\n\nSMCTRL <#id503105> - Macro used to set internal flags to affect the\noperation of the Structured Macros.\n\n47. The SMLIST Macro <#id507764>\n\nSMLIST <#id507749> - Macro used to set options for the operation of the\nStructured Macros Listing Program. This macro is processed by the\nlisting program and not the assembler.\n\n48. The SMSYMS Macro <#id507932>\n\nSMSYMS <#id507938> - This is not a macro, but is a copy member that must\nbe included at the beginning of any program that uses the structure\nlocation symbols described in Location and Scope of Data Structures.\n\n49. The SSD Macro <#id507458>\n\nSSD <#id507464> - Macro used to define the beginning of the Subroutine\nStatic Data (SSD). The SSD macro uses LOCTR to locate the static data.\nIf the subroutine has selected the LOADBASE option, the static data is\nplaced immediately after the subroutine code in the object module. If\nthe subroutine is not using LOADBASE, the subroutine static data is\nplaced with the program static data. The SSD should be defined just\nbefore the SWA for a particular subroutine block.\n\n50. The STRSA Macro <#id508649>\n\nSTRSA <#id507155> - Macro used to store a register's value in the\nSubroutine Work Area (SWA) save area. If an internal subroutine contains\nan SWA, registers are automatically restored when the subroutine is\nexited. If the internal subroutine needs to pass back the value of a\nregister, it can use this macro to save a register's current value in\nthe subroutine save area, so that it is not restored to the original\nvalue when the subroutine returns.\n\n51. The SWA Macro <#id508317>\n\nSWA <#id508323> - Macro used to define the beginning of the Subroutine\nWork Area (SWA). The SWA macro automatically reserves space for a\nsubroutine save area, a SMWA, any parameter lists used by the\nsubroutine, and the Dynamic Storage Management pointers if needed. The\nSWA for a subroutine should be defined immediately after the ENDBLK for\nthat subroutine. The SWA macro insures that any fields specified within\nthe SWA are aligned properly.\n\n52. The TBIT Macro <#id508184>\n\nTBIT <#id508190> - Macro used to test bit flags in a byte.\n\n53. The TREG Macro <#id508601>\n\nTREG <#id508957> - Macro used to test a register for zero, positive, or\nnegative.\n\n54. The ##COND Macro <#id508590>\n\n##COND <#id508596> - This is an internal macro for use within other\nmacros and not in open code. The ##COND macro tests a conditional\nexpression and branches to the appropriate success or failure tags. This\nmacro is intended for use in user condition macros. For information\nabout writing a user condition macro, see User-Defined Conditions.\n\nIII. Appendices <#id519044>\n\nA. Catalogued ASM Procedures At Clemson <##asmproc>\nB. Internal Macros Error Messages <##interr>\nC. Work Area Storage Layout <##dynform>\n\nWork Area Layout with the DYN Option <#id523172>\nWork Area Layout with NODYN and ENVIRON=DC <#id523607>\nWork Area Layout with NODYN and ENVIRON=OS <#id523779>\nWork Area Layout with NODYN and ENVIRON=PLI <#id523952>\n\nD. Program Code and Static Data Layout <##codform>\nE. Register Usage <#id524857>\n\nRegister Usage for ENVIRON=DC <#id524845>\n\nIDMS/DC User Mode Registers And Linkage <#id524797>\nIDMS/DC System Mode Registers And Linkage <#id525576>\n\nRegister Usage for ENVIRON=OS <#id525792>\nRegister Usage for ENVIRON=PLI <#id525943>\n\nF. Summary of Amendments <#id526825>\n\nUpdate November 6, 1989 <#id526837>\nUpdate April 19, 1989 <#id526241>\nUpdate October 1, 1987 <#id526986>\nUpdate March 11, 1987 <#id527042>\n\n*List of Tables*\n\nC.1. Dynamic Storage Layout <#id523182>\nC.2. Single PWA Format <#id523292>\nC.3. Single SWA Format <#id523480>\nC.4. NODYN and ENVIRON=DC Work Area Layout <#id523628>\nC.5. SWA in NODYN ENVIRON=DC Format <#id523698>\nC.6. NODYN and ENVIRON=OS Work Area Layout <#id523794>\nC.7. SWA in NODYN ENVIRON=OS Format <#id523875>\nC.8. NODYN and ENVIRON=PLI Work Area Layout <#id523974>\nD.1. CSECT Layout <#id525014>\n\n*List of Examples*\n\n1.1. Unindented Assembler Source <#id421860>\n1.2. Indented Assembler Source <#id478321>\n3.1. Switching AMODE <#id480900>\n7.1. Conditional Statement Using Assembler Compare Instructions <#id482305>\n7.2. Compound Conditional Statement Using Assembler Compare Instructions\n<#id484026>\n7.3. Comparison Condition and Branch <#id484099>\n7.4. Coding Only the Conditional Operator When Condition Code Is Known\nTo Exist <#id484140>\n7.5. Using ELSEIF <#id484189>\n8.1. Types of LOOP macros <#id482409>\n9.1. The CASE Block <#id484874>\n10.1. PLIST Macro <#id485214>\n10.2. PLIST Macro with Constants <#id485282>\n10.3. Parameter List Lengths <#id485397>\n10.4. Using the DS Keyword <#id485546>\n10.5. Combining Parameter Lists with Subroutine Calls <#id485689>\n10.6. Creating the Parameter List Once <#id485725>\n10.7. Parameter List Example <#id485864>\n11.1. Using Tags <#id486850>\n12.1. Setting Multiple Bits at Once <#id486305>\n12.2. Default Target Bit Name <#id486617>\n12.3. Loading Multiple Bytes into a Register <#id486722>\n12.4. Register Loading Clearing the Register <#id487371>\n12.5. Execute Instruction Using the EXI Macro <#id487489>\n12.6. Loading the Control Bloack Address with LCBA <#id487598>\n13.1. Search Loop Example <#id486584>\n13.2. Text Scanning Example <#id488175>\n13.3. EODAD Example <#id488234>\n13.4. Returning R0 and R1 Example <#id488297>\n14.1. Listing Program Output <#id487712>\n14.2. Listing Program Output for Defective Program <#id488638>\n14.3. Mixed Case Input <#id488721>\n16.1. CALLCASE with USESSYMBOLS <#id497874>\n16.2. CALLCASE without USESSYMBOLS <#id497895>\nD.1. Structured Macros Use of Location Counters <#id524265>\n\n\n    Preface\n\nThe Structured Programming Macros library is a programming tool\ndeveloped at Clemson University for internal use by the staff of the\nComputer Center. However, after they were written, the decision was made\nto release them to the public, since they are very useful to anyone who\nis programming in System/370 Assembler language.\n\nThe macros were designed to make the programmer's job easier by handling\nthe often confusing but necessary code needed in any program. Things\nlike program linkage, subroutines, parameter lists, loops, and\nconditional sections are handled easily by use of the macros. This\nallows the user to concentrate on the program instead of the details,\nand also helps make the code much easier to read and debug.\n\nThe Structured Programming Macros provide a means by which the Assembler\nprogrammer can use logical programming structures normally available\nonly in high-level languages. Structures like DO WHILE, DO UNTIL,\nIF-THEN-ELSE, and CASE are available directly through the macros. More\ncomplex structures, such as SEARCH, may be coded simply through a\ncombination of the macros. In addition, some useful macros that perform\ncommon functions (such as flipping bits and clearing storage) are\nprovided as a convenience.\n\nThe macros are packaged in a macro library which may be concatenated to\nSYSLIB for Assembler H. (There are catalogued procedures available at\nClemson that concatenate this macro library to SYS1.MACLIB.)\n\nAmong other things, the Structured Programming Macros may be used to\nhandle addressing mode switching and linkage under MVS/XA. If you want\nto use the 31-bit addressing features, you should be familiar with the\nconcepts described in /MVS/XA SPL: 31-Bit Addressing,/GC28-1158. Using\nthe macros, it becomes very simple to change and restore addressing\nmodes, both inline and for subroutine calls.\n\nSince the Structured Programming Macros provide all of the needed\ncontrol structures, you should not have to code any branch instructions\n(and associated statement labels) in a program. This makes the source\ncode much neater and easier to read.\n\nThis document serves as an introduction to the Structured Programming\nMacros, and assumes that the reader is already familiar with the uses of\ncommon structured programming techniques. While the Structured\nProgramming Macros serve as a programming aid, they are not meant to be\na substitute for a working knowledge of System/370 Assembler language\nand System/370 architectures. When using these macros, the reader should\nnot arbitrarily assume that what the macros generate is some kind of\n\u00f4magic code\u00f6. It's not: in fact, the code generated by the macros tends\nto look a lot like what a competent programmer would write. When using\nthe macros, look at the macro expansions occasionally. Knowing a little\nabout how the macros work will help you to make better use of them.\n\n\n      Note\n\nIn order to achieve the desired level of functionality within the\nStructured Macros, they have been written in such a way as to require\nthe use of the Level H Assembler. Although some of the macros might not\ncurrently require Assembler H, no guarantee is made that any of the\nfeatures described here will work with the Level F Assembler. Use of\nthese macros with anything other than Assembler H is /not/recommended.\n\n\n  Part I. Structured Macros User's Guide\n\n*Table of Contents*\n\n1. Nesting Levels <#id420713>\n2. Conditional Statements <##condch>\n\nStandard Conditions <#id420432>\nCoding Conditional Expressions <#id479304>\nUser-Defined Conditions <##ucond>\n\n3. Blocks <#id480744>\n\nThe Program Block <#id480152>\nThe Inline Block <#id480866>\nThe Subroutine Block <#id480918>\nThe ErrExit Block <#id480993>\n\n4. Program Environments <#id480697>\n\nDC Environment <#id480675>\n\nSystem Mode And User Mode <#id480689>\nReentrancy Under IDMS/DC <#id481323>\n*NORENT <#id481357>\n*NORENTSYS <#id481378>\n*RENT <#id481394>\n*RENTSYS <#id481416>\n*PWA <#id481439>\n*PWASYS <#id481470>\n\nOS Environment <#id481498>\n\n*NORENT <#id481518>\n*RENT <#id481540>\n*PWA <##ospwa>\n*MAIN <#id481654>\n*NOMAIN <#id481682>\n*SRVPRC <#id481702>\n\nPL/I Environment <#id481723>\n\n*STDPLI <#id481743>\n\nOther Environments <#id481784>\nSubroutine Block Super Options <#id481843>\n\n*SWA <#id481856>\n*NOSUBOPTS <#id481886>\n\nConclusion <#id481913>\n\n5. Program and Subroutine Work Areas <##pwaswa>\n\nProgram Work Areas <#id480591>\nReusable Program Work Areas <#id482608>\nSubroutine Work Areas <#id482699>\nSWA Placement <#id482794>\nPSDs and SSDs <#id482826>\n\n6. Large Program Management <##large>\n\nPWAs and SWAs with Dynamic Storage Management <##dynpwa>\n\nRecursive Subroutines with the DYN Option <#id483218>\nStorage Calculations with the DYN Option <#id483252>\nSWA Addressability with the DYN Option <#id483287>\nSuper Options Used with the DYN Option <#id483309>\nStorage Optimization with the DYN Option <#id483370>\n\nLONG and LOADBASE <#id483417>\nSize Limitations <#id483502>\nConclusion <#id483547>\n\n7. The IF Structure <##if>\n8. Loops <#id484008>\n9. CASEs and CASE Blocks <##case>\n10. Parameter Lists and Standard Linkage <##parms>\n\nReferencing Input Parameter Lists <#id484600>\nGenerating Parameter Lists <#id485185>\nAutomatic Parameter Lists <#id485428>\nPermanent Parameter Lists <#id485470>\nCalling Subroutines <#id485601>\nParameter Lists on CALLSUB and CALLX <#id485668>\nRecommendations <#id485741>\nExample Source <#id485850>\n\n11. Location and Scope of Data Structures <##scope>\n\nLocal Scope within Subroutines <#id486795>\n\n12. Miscellaneous Macros <#id487245>\n\nBit Manipulation <#id487260>\nTesting A Register <#id486653>\nInitializing Storage <#id486674>\nRegister Loading <#id486708>\nExecuting Instructions <#id487418>\nLoading Control Block Addresses <#id487517>\nControlling Structured Macro Operation <#id487616>\n\n13. Miscellaneous Examples <#id486553>\n\nA Search Loop <#id486567>\nScanning Text <#id486365>\nA DCB EODAD Exit <#id488214>\nReturning R0 and R1 with ENDBLK <#id488268>\n\n14. Structured Macros Listing Program <##listing>\n\nOutput of the Listing Program <#id487698>\nControlling Listing Program Operation <#id488666>\n\n\n    Chapter 1. Nesting Levels\n\nThere are 4 major building blocks that can be nested. These are the\n/block,/the /if// /elseif,/the /loop,/and the /case block./The\nStructured Programming Macros support nesting to a depth of 20 for each\nstructure. The structures may be intermixed: for example, a BLOCK can\ncontain IF structures, and a LOOP may contain a CASE block, which may in\nturn contain more LOOPs. Levels of nesting are opened and closed by the\nuse of complementary macros, like BLOCK/ENDBLK, LOOP/ENDLOOP, IF/ENDIF\nand CASEBLK/ENDCASE.\n\nThe user of these macros might find it helpful to start indenting source\nstatements as nesting levels vary. Since no labels are required in the\nprogram code, the user can code statements starting in column two and\nindent while still leaving room for comments. Consider the following two\nexamples: in the first, operands are coded in fixed columns, as is\ncommon practice.\n\n*Example 1.1. Unindented Assembler Source*\n\nBLOCK NAME=TEST\nIF (condition1),THEN\nLOOP WHILE,(condition2)\nLEAVE   (condition3,),IF=*\nENDLOOP WHILE\nENDIF\nENDBLK\n\n\nIn the second example, the same instructions are indented based on the\nnesting level of each. While this may look unusual to the hardened\nAssembler programmer, it's easier to follow the nesting levels, and thus\nthe logical structure, by sight alone.\n\n*Example 1.2. Indented Assembler Source*\n\nBLOCK NAME=TEST\n  IF    (condition1),THEN\n    LOOP  WHILE,(condition2)\n      LEAVE LOOP=*,(condition3)\n    ENDLOOP WHILE\n  ENDIF\nENDBLK\n\n\nSince the macros require proper nesting of structures to generate tags\nfor branches and the like, correct pairing of complementary macros is\nimportant. The structured assembler cataloged procedures in use at\nClemson include a pre-step that examines your source for nesting\nproblems and lists your program with a nesting-level report. This\npre-processor is described later in Chapter 14, <##listing>/Structured\nMacros Listing Program/ <##listing>.\n\nThe nesting of structures provides a very specific path for the program\nto follow. This can be interrupted where necessary by the use of the\nLEAVE macro. This macro allows the program to leave a structure\nprematurely either conditionally or unconditionally. By default, the\nLEAVE macro leaves the innermost structure of the type specified.\nHowever, it can be used to exit a structure from any depth. If you are\nleaving from a deeply nested series of inline blocks, restoring\nregisters and AMODEs properly is a complicated task. The LEAVE macro can\nhandle this task nicely. The programmer should not have to worry about\nthis. You can leave an arbitrarily complex structure and LEAVE will\nhandle the details.\n\n\n    Chapter 2. Conditional Statements\n\n*Table of Contents*\n\nStandard Conditions <#id420432>\nCoding Conditional Expressions <#id479304>\nUser-Defined Conditions <##ucond>\n\nUsing the Structured Macros, conditional expressions are defined in\nterms of the instruction(s) that will make the comparison. Conditional\nexpressions are mandatory on some macros (IF, ELSEIF, and some forms of\nLOOP) and optional on others (LEAVE and ERREXIT). The syntax of a\nconditional expression on each of these macros is identical.\n\n\n    Standard Conditions\n\nThe format of a single condition can be any of the following:\n\n  *\n\n    (*CLC*,operand1,condition,operand2)\n\n  *\n\n    (*CR*,operand1,condition,operand2)\n\n  *\n\n    (*C*,operand1,condition,operand2)\n\n  *\n\n    (*CP*,operand1,condition,operand2)\n\n  *\n\n    (*CH*,operand1,condition,operand2)\n\n  *\n\n    (*CHI*,operand1,condition,operand2)\n\n  *\n\n    (*CLR*,operand1,condition,operand2)\n\n  *\n\n    (*CL*,operand1,condition,operand2)\n\n  *\n\n    (*CLI*,operand1,condition,operand2)\n\n  *\n\n    (*CLCL*,operand1,condition,operand2)\n\n  *\n\n    (*TM*,operand1,condition,operand2)\n\n  *\n\n    (*CLM*,operand1,mask,condition,operand2)\n\n  *\n\n    (*TREG*,operand1,condition)\n\n  *\n\n    (*TBIT*,[operand1,]operand2[,*ON|OFF|ANY|MIXED*]) default ON\n\n  *\n\n    ( *#TEST,*operand1[,*ON|OFF|ANY*]) default ON\n\nwhere:\n\n  *\n\n    The first parameter is the machine or macro instruction that is to\n    be used to perform the comparison. CLC, CR, C, CP, CH, CLR, CL, CLI,\n    CLCL, TM and CLM are all S/370 machine instructions. TREG is a macro\n    that tests a register for zero, positive, or negative. TBIT is\n    another macro that is used for testing bits. As signified, the only\n    conditions that can be specified for TBIT are ON, OFF, ANY and\n    MIXED. #TEST supports the IDMS/DC #TEST macro. #TEST supports the\n    conditions ON, OFF and ANY.\n\n  *\n\n    *operand1*is the first operand of the specified instruction or\n    macro. Any valid form of the operand for the comparison being\n    performed is allowed.\n\n  *\n\n    *operand2*is the second operand of the specified instruction or\n    macro. Any valid form of the operand for the comparison being\n    performed is allowed.\n\n  *\n\n    *mask*is the mask operand of the CLM instruction and can be any form\n    that is valid in the instruction itself.\n\n  *\n\n    *condition*may be coded as one of the following:\n\n    EQ\n        Equal\n    E\n        Equal\n    NE\n        Not equal\n    LT\n        Less than\n    GT\n        Greater than\n    LE\n        Less than or equal\n    GE\n        Greater than or equal\n    Z\n        Zero\n    NZ\n        Not zero\n    M\n        Minus or mixed\n    NM\n        Not minus or not mixed\n    P\n        Positive\n    NP\n        Not positive\n    O\n        Ones or overflow\n    NO\n        Not ones or not overflow\n    ON\n        All flags on\n    OFF\n        All flags off\n    ANY\n        Any flags on\n    MIXED\n        Mixed\n    CCnn\n        Condition code, CC1 through CC14\n\nThe conditional expression coded expands using the comparison\ninstruction(s) provided and appropriate conditional branches. For\nexample, instead of the expression |IF A=B,THEN|, you code |IF\n(CLC,A,EQ,B),THEN|, which would generate a |CLC A,B|and a\n|BNE|instruction to the appropriate ELSE, ELSEIF or ENDIF macro.\n\n\n    Coding Conditional Expressions\n\nBoolean expressions and nested conditions are available when using the\nStructured Macros. Using the Boolean operators AND, OR and NOT,\nconditional expressions can be nested and/or concatenated on a single\nmacro. Under Assembler H (IEV90), the depth of nesting is limited to 255\ncharacters within the outer parentheses. Multiple conditions are\nevaluated following the normal precedence rules with expressions in\nparentheses taking precedence and NOT being done before AND, and AND\nbeing done before OR.\n\nFor example, you can code:\n\n IF   NOT,(CLC,A,EQ,B)\n\n\nwhich is equivalent to:\n\n IF   (CLC,A,NE,B)\n\n\nMultiple conditions can be coded together, as in this example:\n\n IF   ((CLC,A,EQ,B),OR,(CLC,C,EQ,D),AND,(CLC,E,EQ,D))\n\n\nwhich is equivalent to:\n\n IF   ((CLC,A,EQ,B),OR,((CLC,C,EQ,D),AND,(CLC,E,EQ,D)))\n\n\nThe rules of Boolean algebra are followed by the Structured Macros. For\nexample, the Boolean expression |NOT (x AND y)|is equivalent to |NOT (x)\nOR NOT (y)|. Similarly, the IF statement\n\n IF   (NOT,((CLC,A,EQ,B),AND,(CLC,C,EQ,D))),THEN\n\n\nand the IF statement\n\n IF   (NOT,(CLC,A,EQ,B),OR,NOT,(CLC,C,EQ,D)),THEN\n\n\nand the IF statement\n\n IF   ((CLC,A,NE,B),OR,(CLC,C,NE,D)),THEN\n\n\nwill all generate identical code.\n\nAlthough parentheses and the precedence rules affect the meaning of the\nexpressions, the comparisons are always generated in the order that they\nare coded. There are two cases where this is significant. Consider the\nfollowing example:\n\n IF   ((CLI,A,EQ,C'Y'),AND,(C,R3,EQ,B))\n\n\nThe second comparison will only be done if the first one succeeds. This\ncan be very useful if you only have addressability for the second\ncomparison if the first one is true. Another case where coding order is\nimportant can be illustrated by the following two IF statements:\n\n IF   ((Z),OR,(CLC,A,EQ,B))\n\n IF   ((CLC,A,EQ,B),OR,(Z))\n\n\nIn the first example, the zero conditional test refers to the condition\ncode that exists from a previous instruction before the IF is\nencountered. In the second example, the zero conditional test refers to\nthe result of the compare that precedes it. Because it is sometimes\ndifficult to determine which comparisons will actually be performed in a\nparticular multiple condition IF statement, it is usually a good\npractice to put a condition test with no comparison only at the\nbeginning of an IF.\n\n\n    User-Defined Conditions\n\nAlthough the conditions supported by the Structured Macros cover most of\nthe standard types of comparisions, there are occasionally instances\nwhere they are not sufficient. To avoid unpleasant side-effects, we have\ndecided that our conditions will never modify storage locations or\nregisters. Therefore, we do not have conditions for things like TRT\n(Translate and Test), which modifies registers one and two. In addition,\nmany programs will have tests involving more than a simple compare that\nthey do repeatedly. It would be helpful to be able to code these tests\nwithin a Structured Macros conditional expression.\n\nFortunately, there is a very easy way to get around both of these\nsituations. The Structured Macros provide a facility to allow you to\ndefine your own conditional tests that can be placed within any\nconditional expression. User-defined conditions are identified by a\npercent sign (%) and may have any number of operands following them. For\nexample, suppose you wanted to be able to code something like this:\n\nIF    ((TREG,R4,NZ),AND,(%TRT,0(8,R4),NE,PSDVALID))\n  .\n  .\n  .\nENDIF\n\n\nBefore you can use the %TRT condition, you need to do two things. First,\nyou must define the condition name itself and identify the macro that\nwill process it. This is done with the DEFUCOND macro. Second, you must\ncode the macro itself. For our %TRT example, these two steps would look\nlike this:\n\n   DEFUCOND NAME=TRT,MACRO=TRT_UCOND   | Define the condition name.\n          MACRO\n &NAME    TRT_UCOND &EXPR,&S=,&F=,&L=  | Our TRT macro.\n          AIF (N'&EXPR NE 4).ERR0001   | Were we called wrong?\n &NAME    TRT   &EXPR(2),&EXPR(4)      | Do TRT instruction.\n          ##COND &EXPR(3),             | Test result and branch       +\n                S=&S,F=&F,L=&L         |   as appropriate.\n          MEXIT\n .ERR0001 MNOTE 8,'Wrong number of parameters in %TRT expr'\n          MEND\n\n\nThere are several important requirements that all user-condition macros\nmust meet. When those are understood, writing these macros becomes quite\nsimple. First, the &NAME label is required and must identify the first\nexecutable statement generated by your macro. The Structured Macros\ngenerate a unique label for &NAME so that they can branch to your\ncondition when it is part of a compound conditional expression.\n\nNext come the parameters that your macro will be called with. The first\nparameter is positional and is the entire condition that invoked this\nmacro, including the condition name. For our previous example, this\nwould be |(%TRT,0(8,R4),NE,PSDVALID)|The individual fields within the\ncondition can be extracted by subscripting the expression. For example\n&EXPR(3) for the third item in the expression (NE). The next three\nkeyword parameters (S=, F=, and L=) define the tag names that the macro\nshould branch to on success and failure and indicate the logic of this\nconditional (P for positive and N for negative).\n\nThe Logic keyword (L=) needs a little explaining. Positive logic says\nthat the macro should branch to the success tag if the condition is true\nand fall through to the following code if the condition is false.\nPositive logic is used for things like ERREXIT and LEAVE. Negative logic\nsays to branch to the failure tag if the condition is false and fall\nthrough if it is true. This is used in standard IF statements.\n\nThe ##COND macro is an internal macro that should only be used within\nother macros. Its purpose is to evaluate a conditional expression and\nproperly process the S=, F=, and L= keywords. The expression passed to\n##COND can be any valid conditional expression including Boolean\nexpressions, nested conditions, and other user-defined conditions. Most\nuser-defined condition macros will include a ##COND macro to perform the\nactual test and process the S=, F=, and L= keywords. This greatly\nsimplifies the macro.\n\nFor another example, what if you wanted to be able to check the status\nof ISPF like this?\n\nIF    (%ISPFACT)\n  .\n  .\n  .\nELSE\n  .\n  .\n  .\nENDIF\n\n\nDefine the %ISPFACT condition like this:\n\n   DEFUCOND NAME=ISPFACT,MACRO=ISPF_UCOND\n          MACRO\n &NAME    ISPF_UCOND &EXPR,&S=,&F=,&L=\n          AIF (N'&EXPR NE 1).ERR0001   | Check number of parms.\n &NAME    LINK  EP=ISPQRY              | Call ISPF status routine.\n          ##COND (TREG,R15,Z),         | Check condition code.        +\n                S=&S,F=&F,L=&L\n          MEXIT\n .ERR0001 MNOTE 8,'Wrong number of parameters in %ISPFACT expr'\n          MEND\n\n\nThere are several user-defined conditions provided in a copy member\ncalled SMPUCOND. These should provide good examples of how to code user\nconditions and may also be useful in programs. You can include them in\nyour programs by placing a |COPY SMPUCOND|statement at the start of your\nprogram.\n\n\n      Note\n\nBe careful when using conditions that modifiy registers or storage\nlocations. When these conditions are used as part of a compound\nconditional expression, they can affect the other conditions in the\nexpression. Be careful of your register usage in these cases and\nremember that although some conditions in an expression may be skipped\nbecause of the logic, conditions are always evaluated in the order they\nare coded.\n\n\n    Chapter 3. Blocks\n\n*Table of Contents*\n\nThe Program Block <#id480152>\nThe Inline Block <#id480866>\nThe Subroutine Block <#id480918>\nThe ErrExit Block <#id480993>\n\nThere are 4 types of blocks available with the Structured Programming\nMacros. These are: the /program/block, the /inline/block, the\n/subroutine/block, and the /errexit/block. Each type of block can be\nnamed, and this name can be used as a reference on the associated ENDBLK\nmacro and also on the LEAVE macro.\n\n\n    The Program Block\n\nThe program block encloses the main body of a program and corresponds\nroughly to a mainline. Program blocks can not be enclosed by any other\nstructure. They must be used at block level zero. The program block must\nbe the first block coded for a program. Options and the ENVIRON keyword\non the BLOCK TYPE=PROGRAM macro determine the type of linkage,\ninitialization and other program attributes to be established. The\nassociated ENDBLK macro will reverse the linkage when it is executed. A\nLEAVE macro which either names the program block or is coded as BLOCK=*\nat the program block's block level will cause a branch to the ENDBLK\nmacro, thus terminating the program.\n\nWhen writing a program that uses both 24-bit and 31-bit addressing under\nMVS/XA, a Structured Macro Workarea (SMWA) must be provided for the\nmacro's use. This is automatically provided by the SWA and PWA services,\nor can be specified with a keyword on the block macro. The SMWA is a\ndoubleword of storage that is used to save work registers and addressing\nmodes, thus allowing an AMODE change without disturbing the registers.\n\n\n    The Inline Block\n\nInline blocks are generally used to set off a procedure from neighboring\ncode. Inline blocks provide a structure that can be exited with the\nLEAVE BLOCK=* macro. Inline blocks are placed within the other types of\nblocks and can be nested within themselves. If desired, registers can be\nsaved and restored when entering and leaving an inline block by use of\nthe SAVE operand on the BLOCK macro.\n\nWhen writing programs that will be run on MVS/XA, the inline block can\nbe used to switch addressing modes \u00f4on the fly\u00f6. For example, the\nfollowing program section is running AMODE 31 and RMODE 24, but needs to\nissue a PUT, which requires AMODE 24. These instructions generate the\ncorrect sequence of instructions to save the current addressing mode,\nswitch to AMODE 24, and then restore the saved addressing mode at the\nend of the block.\n\n*Example 3.1. Switching AMODE*\n\n-- AMODE 31 code --\n   :\nBLOCK  AMODE=24\n PUT   SYSPRINT,RECORD\nENDBLK\n   :\n-- AMODE 31 code --\n\n\n\n    The Subroutine Block\n\nSubroutine blocks contain code that is reached using the CALLSUB macro.\nSubroutines coded in this manner must be at block level zero (i.e.\ncannot be contained within any other block). Subroutine blocks should be\ncoded after the program block to which they belong. Subroutine blocks\nare meant for internal subroutines, not for a called program that\nfollows standard OS linkage conventions.\n\nA subroutine block is called by CALLSUB using |BAL R14,routine|or an\nequivalent sequence. By using the SAVE operand, the subroutine can have\nsome or all of its registers saved and restored, although its use is\noptional. If Subroutine Work Areas (SWAs) are used, registers R0-R14 are\nautomatically saved in the SWA and restored when the subroutine is\nexited. In this case, the SAVE operand is invalid. The user can also\nspecify that the USING environment be saved and restored around the\nsubroutine. This prevents any USINGs within the subroutine from\naffecting the rest of the program. Furthermore, a subroutine can request\nthat its AMODE be switched and restored on entry and exit by using the\nAMODE operand.\n\nThe CALLSUB macro uses register 14 to link to the subroutine, but all\nother registers have the same value on entry to the subroutine that they\nhad in the calling program. However, if Dynamic Storage Management or\nthe LONG program option is used, register 15 is also destroyed by the\nCALLSUB linkage. For more information about dynamic storage, see Chapter\n6, <##large>/Large Program Management/ <##large>.\n\n\n    The ErrExit Block\n\nThe errexit block is executed whenever an ERREXIT macro that refers to\nit is executed. Like the subroutine block, the errexit block must be\ncoded at block level zero. Errexit blocks should be coded with the\nsubroutine blocks after the program block to which they belong. The\nENDBLK macro associated with an errexit block generates a branch to the\nprogram block's ENDBLK expansion, and also allows you to specify a\nreturn code with which the program terminates. This return code\noverrides any return code that might appear on the program block's\nENDBLK macro.\n\n\n    Chapter 4. Program Environments\n\n*Table of Contents*\n\nDC Environment <#id480675>\n\nSystem Mode And User Mode <#id480689>\nReentrancy Under IDMS/DC <#id481323>\n*NORENT <#id481357>\n*NORENTSYS <#id481378>\n*RENT <#id481394>\n*RENTSYS <#id481416>\n*PWA <#id481439>\n*PWASYS <#id481470>\n\nOS Environment <#id481498>\n\n*NORENT <#id481518>\n*RENT <#id481540>\n*PWA <##ospwa>\n*MAIN <#id481654>\n*NOMAIN <#id481682>\n*SRVPRC <#id481702>\n\nPL/I Environment <#id481723>\n\n*STDPLI <#id481743>\n\nOther Environments <#id481784>\nSubroutine Block Super Options <#id481843>\n\n*SWA <#id481856>\n*NOSUBOPTS <#id481886>\n\nConclusion <#id481913>\n\nThere are several types of environments for which the Structured Macros\ncontain explicit support. These environments are selected with the\nENVIRON keyword of the program block macro. The environments are: the\n/OS program environment/, which supports standard OS linkages; the /DC\nprogram environment/, which supports Cullinet IDMS/DC linkage; and the\n/PLI environment/, which supports the execution time environment of\nrelease 5 of the OS Optimizing Compiler. Other types of environments can\nbe accommodated by coding your own linkage.\n\nThe options and keywords on the program and subroutine block macros\nallow you to control virtually all phases of the program linkage as well\nas the Structured Macros options. All of the major initialization and\ntermination functions are represented by their individual keywords.\nHowever, there are certain program types that occur frequently. To cut\ndown on the number of options that need to be coded to represent these\nprogram types, the /super options/can be used. They contain the correct\ncombination of options for the most common program types. The super\noptions for each environment are discussed in their corresponding\nsections below.\n\n\n    DC Environment\n\nSpecifying ENVIRON=DC generates support for programs to execute in the\nIDMS/DC run-time environment. This support is relatively new and perhaps\ndoes not support all of the functions required by its users: however, a\nbasic set of options and super options should satisfy most IDMS/DC\nprogrammers' needs.\n\n\n      System Mode And User Mode\n\nIDMS/DC programs generally are called in either /system mode/or /user\nmode/. As a rule, user-mode programs are called by a #LINK or #XCTL and\nuse #RETURN to return to their caller, while system-mode programs are\ncalled by #CALL and return with #RTN, and also have a slightly different\nset of register and linkage conventions. IDMS/DC applications whose\nprogram names are invoked by a task code or called by #LINK or #XCTL are\nalmost always user mode programs, while DC numbered exits and map edit\nroutines are usually system mode programs. Both types are supported by\nENVIRON=DC.\n\n\n      Reentrancy Under IDMS/DC\n\nSince any IDMS/DC program can be in use by several users at any given\ntime, reentrancy in application programs and DC system routines is much\nmore valuable than under the standard MVS environment. The savings in\nexecution time gained by avoiding a #GETSTG/#FREESTG and management of a\nreentrant program workarea are usually far outweighed by the program\npool savings and avoidance of program management overhead gained by\nmaking a program truly reentrant. System mode programs, where speed and\nefficiency are prime considerations, can take advantage of IDMS/DC's\n#GETSTK service for \u00f4fast storage\u00f6 if their PWA storage requirements are\nsmall.\n\n\n      *NORENT\n\nA non-reentrant user mode program in IDMS/DC terms means basically the\nsame as a non-reentrant program under the OS environment: IDMS/DC does\nnot allow users to share a copy of the program, but loads a new copy\neach time a new user requests one. As a result, the program can contain\nits variables within its CSECT without having to acquire storage from\nIDMS/DC for them.\n\n\n      *NORENTSYS\n\nThis super option defines a non-reentrant system mode program for\nIDMS/DC. This option is provided for consistency: however, it is\nrecommended that any system mode program be assembled as reentrant,\nusing either the *RENTSYS or *PWASYS super option.\n\n\n      *RENT\n\nReentrancy in an IDMS/DC user mode program allows IDMS/DC to share a\nsingle copy of the program among multiple users, and also allows the\nprogram to be loaded into the IDMS/DC reentrant program pool. The *RENT\nsuper option causes reentrant linkage to occur, but does not acquire any\nvariable storage for the program.\n\n\n      *RENTSYS\n\nThe *RENTSYS super option causes reentrant linkage to occur for an\nIDMS/DC system mode routine. Like *RENT, *RENTSYS does not acquire any\nvariable storage for the program: thus, if local variable storage is not\nneeded, the overhead of #GETSTG/#FREESTG can be avoided.\n\n\n      *PWA\n\nThe *PWA super option causes a #GETSTG and #FREESTG to be included in\nthe linkage and delinkage for the program, thus allowing reentrancy and\nproviding storage for variables. This process (except for actually\nacquiring the storage) is basically the same as described in the *PWA\nsection under the section called \u00f4*PWA\u00f6 <##ospwa> .\n\n\n      *PWASYS\n\nThis is generally the option that system mode programs would use if they\nhave any need for variable storage. If a small PWA (10 fullwords or\nless) is all that's needed, the option GETSTK can be coded among the\nprogram block's OPTIONS: this causes #GETSTK to be used to acquire\nvariable storage from the task's TCE stack, which is much faster than\ncalling #GETSTG and #FREESTG.\n\n\n    OS Environment\n\nThe OS environment is the default environment and supports standard OS\nlinkage. By specifying different options, you can have the Structured\nMacros do as little or as much of the linkage as desired. For most\nsituations, there are super options that pick the correct set of options\nfor you.\n\n\n      *NORENT\n\nIf a program is non-reentrant, the system will load a fresh copy of it\nevery time the program is invoked. Because of this, the program is\nallowed to modify itself. Data and work areas can be stored in the load\nmodule itself. Most user programs can be non-reentrant. The *NORENT\nsuper option will automatically define a save area in the program ID\nsection and perform non-reentrant linkage.\n\n\n      *RENT\n\nSince reentrant programs are not reloaded every time they are invoked,\nthey are not allowed to modify any fields within themselves. Any data\nthat might be modified must be copied into working storage that has been\nGETMAINed, and modified there. This preserves the integrity of the load\nmodule for other users. The *RENT super option provides the reentrant\nlinkage and automatically GETMAINs storage for a save area. No provision\nis made for a Program Work Area (PWA). Any storage (other than the save\narea) needed by the program must be acquired by the user. Because of\nthis, the *RENT super option is not very useful for new programs. *PWA\nprovides much better support for reentrant programs. *RENT was included\nto provide support for those programs that already acquire their own\nstorage or that for some reason could not use the storage provided by *PWA.\n\n\n      *PWA\n\n*PWA provides all the functions of *RENT, plus it automatically GETMAINs\nand FREEs a Program Work Area (PWA) for the user. The best way to\nillustrate this is with an example:\n\n BLOCK NAME=MAINPROG,TYPE=PROGRAM,OPTIONS=(*PWA)\n        :\n        :\n ENDBLK BLOCK=MAINPROG\n PSD\n        :\n   Static Data\n        :\n ENDPSD\n PWA\n        :\n   Work Area\n        :\n ENDPWA\n\n\nIn the example above, the static data (constants and other data not\nmodified by the program) is placed at the end of the program in an area\ncalled the PSD (Program Static Data) and included in the load module.\nThe PWA and ENDPWA macros define a DSECT for a block of storage acquired\nfor the user by the BLOCK macro and freed at the end of the program.\nSpace for the save area is automatically reserved in the PWA, so the\nuser does not need to worry about this. The user simply needs to define\nany work area fields that the program needs between the PWA and ENDPWA\nmacros. After this storage is acquired by the BLOCK macro, it is cleared\nfor the user and addressability is set up using register 13. This super\noption makes writing reentrant programs almost as easy as writing\nnon-reentrant ones. The bothersome details of computing storage\nrequirements, GETMAINing storage, keeping up with addresses, and\nFREEMAINing the acquired storage are handled by the Structured\nProgramming Macros.\n\nThe *PWA option and the PWA macro also provide a variety of other\nfeatures that are described in more detail in Chapter 5,\n<##pwaswa>/Program and Subroutine Work Areas/ <##pwaswa>.\n\n\n      *MAIN\n\nThe *MAIN super option provides all of the features of *PWA and adds the\noptions DYN and MAIN. This allows SWAs to be allocated from dynamic\nstorage instead of being statically defined in the PWA. See Chapter 6,\n<##large>/Large Program Management/ <##large>for more information on\ndynamic storage. The *MAIN super option should be used on the program\nblock for any main program that uses dynamic storage.\n\n\n      *NOMAIN\n\nThe *NOMAIN super option provides all of the features of *MAIN except\nthat it specifies option NOMAIN instead of MAIN. This super option\nshould be used on a program block that represents an external subroutine\ncalled from another program that uses dynamic storage.\n\n\n      *SRVPRC\n\nThe *SRVPRC super option is used by service processors. Refer to\n/Clemson University Computer Center Service Processor User's Guide and\nReference/for more information on this super option.\n\n\n    PL/I Environment\n\nENVIRON=PLI supports the execution time environment of release 5 of the\nOS PL/I Optimizing Compiler. At the current time this support is\nminimal, but it should satisfy the needs of most assembler programs that\nrun as subroutines to PL/I programs and use the PL/I environment.\n\n\n      *STDPLI\n\nThis is the only PL/I environment super option and should always be\nspecified. The Structured Macros' support of PL/I is not as fully\ndeveloped as it is for the OS and DC environments. Specifying this\noption will help insure future compatibility.\n\nThis super option provides the proper reentrant linkage for a majority\nof assembler programs that run in an OS PL/I Optimizing Compiler\nexecution time environment. Storage is obtained for a PWA in the same\nmanner as a PL/I program obtains storage for its DSA. A DSA in PL/I\ncontains an OS save area, control information and program variables.\n\n\n    Other Environments\n\nIf you want to use the Structured Macros in other than one of the\nexplicitly supported environments, you can code your own linkage or add\nsupport for the environment with prolog and epilog macros.\n\nIf you want to code your own linkage, let the environment default to OS\nand do not code any linkage-related options. Put your own linkage before\nor after the program block macro and after the end block macro for the\nprogram. If you do your own linkage you cannot use PWAs, SWAs, PSDs,\nSSDs or anything related.\n\nIf the Structured Macros will be used often in this environment or if\nyou need to use PWAs, etc., it might be worth the time to add support\nfor the environment. Refer to the internals manual for the Structured\nMacros for information on writing prolog and epilog macros if you would\nlike to take this approach.\n\nAdding support for an environment requires a thorough understanding of\nthe internals of the Structured Macros and the support might have to be\nupdated each time the Structured Macros themselves are updated. If the\nenvironment needed is of general interest, you might want to request\nthat it be added as a standard part of the Structured Macros and\nsupported as such.\n\n\n    Subroutine Block Super Options\n\nAll environments use the same subroutine block options and super options.\n\n\n      *SWA\n\nIn any program that uses the PWA option, the internal subroutines for\nthat program can each have an individual Subroutine Work Area (SWA). The\n*SWA super option is specified on the subroutine block (or the SUBOPTS=\non the program block) to provide an SWA for a subroutine. There are SWA\nand ENDSWA macros to delimit the SWA just as the PWA was delimited. The\ndetails about the functions of an SWA and its relation to a PWA are\ndescribed in Chapter 5, <##pwaswa>/Program and Subroutine Work Areas/\n<##pwaswa>.\n\n\n      *NOSUBOPTS\n\nThis super option clears all the subroutine options to their \u00f4no\u00f6 state.\nIf the program block has specified a default set of subroutine options\nwith the SUBOPTS= keyword, this super option can be used on a subroutine\nblock to create a subroutine without those default options. For example,\na *NOSUBOPTS,CUSTOM might be coded to create a subroutine with just the\nCUSTOM option.\n\n\n    Conclusion\n\nThe environment support and super options make programming much easier,\nsince all of the tedious initialization and termination details are\ntaken care of with a minimum of effort. This allows you to worry about\nprogram logic and not the linkage. They also do not lock you into only\nthese combinations of options. If you want to override any of the\noptions in a super option, simply code them after the super option on\nthe OPTIONS= keyword. For example:\n\nBLOCK  TYPE=PROGRAM,NAME=PROG,OPTIONS=(*PWA,XA,NOREGEQU),ENVIRON=OS\n\n\n\n    Chapter 5. Program and Subroutine Work Areas\n\n*Table of Contents*\n\nProgram Work Areas <#id480591>\nReusable Program Work Areas <#id482608>\nSubroutine Work Areas <#id482699>\nSWA Placement <#id482794>\nPSDs and SSDs <#id482826>\n\nThe Program and Subroutine Work Area (PWA and SWA) support built into\nthe Structured Programming Macros is a powerful tool that can be\ninvaluable to someone writing a complex program, and also provides\nservices that can be useful in even a relatively small program. Although\nPWAs and SWAs are normally used in reentrant programs, even\nnon-reentrant programs can take advantage of the services they provide.\nIf option NORENT is in effect, the storage for the work areas is defined\nin the load module instead of being dynamically obtained at execution time.\n\n\n    Program Work Areas\n\nThe PWA option and PWA macro provide many services besides just defining\na block of storage to be obtained for the user. By specifying that the\nprogram has a PWA, you allow the Structured Macros to automatically\nperform many functions. For example, space for a SMWA for the main\nprogram and one for each of the subroutines is reserved in the PWA\npreventing you from having to code the SMWA= keyword on the program\nblock. If you want to override this and force the SMWA to a specific\nlocation, the SMWA= keyword can still be used.\n\nYou can have parameter lists placed in the PWA without having to\nexplicitly define storage for them. The Structured Macros can compute\nthe largest parameter list in the program and reserve enough space in\nthe PWA. A separate parameter list area is reserved for the program and\neach subroutine. This is required because the program parameter storage\nmight be in use when a subroutine is called. For more information on\nparameter lists, see Chapter 10, <##parms>/Parameter Lists and Standard\nLinkage/ <##parms>.\n\nOption PWA allows you to define a Subroutine Work Area (SWA) for each\nsubroutine that contains any work area fields that are needed only while\nthe subroutine is executing. This SWA is analogous to the PWA for the\nprogram.\n\n\n    Reusable Program Work Areas\n\nUnder normal circumstances, the PWA for a program is allocated whenever\nthe program is called, and freed before the program terminates. However,\nthere are cases when a program is loaded into memory once and called\nrepeatedly to perform a particular function. Not only would it be\ninefficient to repeatedly acquire and free storage for this program, it\nmight cause problems if the program is required to retain information\nbetween calls.\n\nThis problem is solved by a mechanism known as Reusable PWAs. Using this\ncapabilility, the Structured Macros allocates a new PWA only when given\na start-up call and does not free the storage when the program\nterminates. When the program detects that it is being called for the\nfinal time, it can issue a macro to instruct the Structured Macros to\nfree the PWA storage at the termination of the current invocation.\n\nWhen reusable PWAs are being used, the caller of the program must keep\ntrack of the PWA address and pass it in the parameter list on every\ncall. The position of the PWA address in the parameter list is\ncustomizable. If this address is binary zeros, the Structured Macros\nallocates storage for a new PWA and stores its address back into the\nparameter list. Otherwise, they use the passed value.\n\nAlternatively, you can specify a parameter position for a function code\nto be provided on every call and a value that means Start. With this\nform, the Structured Macros allocate a new PWA on the Start call, and\nuse the passed PWA value in other cases.\n\nWhen the program is in its final invocation (either because of an error\nor when called to terminate), the SMCTRL macro is used to force the\nStructured Macros to free the PWA at program termination.\n\nThis concept is used heavily at Clemson by what we call Service\nProcessors. These are programs that are started once and then called\nrepeatedly to perform a particular type of service for their invoker.\nFile handling, string manipulation, and symbol management are all\nexamples of functions that can be handled by service processors. For\nmore information about the workings of Service Processors, see /Clemson\nUniversity Computer Center Service Processor User's Guide and Reference/.\n\n\n    Subroutine Work Areas\n\nAny subroutine that uses an SWA should use the SWA and ENDSWA macros to\ndefine its boundaries, just as the PWA and ENDPWA macros are used for\nthe program's PWA. There are options on the subroutine block to control\nSWA usage, and a super option (*SWA) that provides the correct\ncombination of options for SWA usage.\n\nSWAs provide useful functions for subroutines just as PWAs do for\nprograms. SMWAs and parameter lists for the subroutines are created as\npart of the SWA instead of as PWA fields. R0-R14 are automatically saved\nand restored for any subroutine that has an SWA. Space for this is\nreserved by the SWA macro. You do not have to code the SAVE keyword, or\nexplicitly reserve the space. The registers are saved as R0-R14 so that\nR15 is not restored and the subroutine can pass a return code back in\nthis register.\n\nYou should be aware of the implications of saving and restoring\nregisters. A subroutine can not pass back any values to its caller by\nway of the registers. It would have to use the PWA to pass back any\ninformation. To get around this problem, the STRSA macro was created.\nSTRSA stores the current value of a register in the SWA save area for\nthe current subroutine. Then when the subroutine ends, the register is\nrestored to the value it had when the STRSA macro was issued, instead of\nthe value it had when the subroutine was called. You can use the STRSA\nmacro to pass back any registers that the calling routine needs, while\nallowing the other registers to be restored to their original values.\n\nThe CLEARPWA option on program blocks instructs the macros to clear the\nPWA after it has been obtained. This option is included in all of the\nsuper options that use PWAs so that you can count on the PWA being all\nzeros on entry. However, there is not a similar option on the subroutine\nblock to clear the SWA. You should never count on the SWA contents\nanytime a subroutine is entered. If the fields within the SWA need to be\nset to a specific value, the subroutine must include code to initialize\nthese fields.\n\nThese functions of SWA usage can be a great help to the programmer, even\nthe subroutine does not need to have any of its own fields defined in\nthe SWA. If you select the SWA option, the Structured Macros generate an\nSWA for internal use in saving registers, even if you do not code the\nSWA and ENDSWA macros at the end of your subroutine.\n\n\n    SWA Placement\n\nWith the *PWA option, these SWAs are included as part of the PWA for the\nprogram to which they belong. They are placed in the PWA's partial area\nand addressability is off of the PWA register (R13). This configuration\nof PWAs and SWAs is changed in programs that use the Structured Macros'\ndynamic storage management support. For more information on this, see\nthe section called \u00f4PWAs and SWAs with Dynamic Storage Management\u00f6\n<##dynpwa>.\n\n\n    PSDs and SSDs\n\nThe PSD and SSD macros (and their respective end macros) are used to\ndefine the Program and Subroutine Static Data areas, just as PWA and SWA\nare used to define the work areas. These macros are used in conjunction\nwith the LOCTR option on the program block to insure proper placement of\nthe program code and static data. They also allow fields to be defined\nfrom within the program code that is placed with the static data when\nthe program is assembled. This facility is used by the EXI macro. These\ndata areas are addressed off of the same base registers as the program\nand subroutine code.\n\n\n    Chapter 6. Large Program Management\n\n*Table of Contents*\n\nPWAs and SWAs with Dynamic Storage Management <##dynpwa>\n\nRecursive Subroutines with the DYN Option <#id483218>\nStorage Calculations with the DYN Option <#id483252>\nSWA Addressability with the DYN Option <#id483287>\nSuper Options Used with the DYN Option <#id483309>\nStorage Optimization with the DYN Option <#id483370>\n\nLONG and LOADBASE <#id483417>\nSize Limitations <#id483502>\nConclusion <#id483547>\n\nAs a program becomes larger and contains more subroutines, certain\nproblems arise. The PWA (which contains an SWA for each subroutine) can\ngrow to an unmanageable size. Also, the program code along with the\nsubroutine code can become so long that it would take several base\nregisters to maintain addressability. The Structured Macros provide two\ntools to help manage such large programs. They are Dynamic Storage\nManagement and the LONG and LOADBASE options. Dynamic Storage Management\nis only available for program blocks that are using ENVIRON=OS.\n\n\n    PWAs and SWAs with Dynamic Storage Management\n\nIf your program has a large number of internal subroutines that heavily\nuse SWA storage, the size of the PWA can easily grow to an unmanageable\nsize. If the fields defined in the SWA are really only necessary when\nthe subroutine is active, it is not necessary to allocate enough space\nfor all of the SWAs. Only enough storage to contain the PWA itself, and\nthe largest combination of active SWAs is required. If there were some\nway to dynamically allocate and free SWA storage as subroutines were\nentered and exited, a great savings in storage could be realized.\n\nTo solve this problem, the storage for an SWA could be GETMAINed as the\nsubroutine is entered and FREEd at the end, but this would slow down the\noperation of the program greatly.\n\nA much more efficient system is to obtain a large block of storage at\nthe beginning of the program, allocate the first part to the PWA, and\nallocate the rest to SWAs as it is needed. This block of storage can be\nmuch smaller than the size of the PWA plus all of the SWAs, since not\nall of the subroutines will be active at once. Also, since new SWA\nstorage is allocated for a subroutine each time it is entered,\nsubroutines can be called recursively. With this system, a GETMAIN is\nnever done more than once for a single program. Enough storage is\nallocated for all the program and subroutines' needs at the beginning,\nand storage is assigned and taken back as subroutines are entered and\nexited.\n\nThis is just what the Structured Macros' Dynamic Storage Management\ndoes. The DYN option on the program block is used to turn on Dynamic\nStorage Management. Dynamic Storage also allows subroutines to call\nthemselves, which adds more complexity. Also, there is hidden recursion,\nsuch as when subroutine A calls subroutine B, and subroutine B in turn\ncalls subroutine A.\n\n\n      Recursive Subroutines with the DYN Option\n\nRecursive subroutines cause another problem. Since they are called again\nwithout the previous invocation being ended, multiple copies of the\nsubroutine's SWA need to be allocated from dynamic storage. Since the\nStructured Macros have no way of knowing how deep the recursion might\ngo, you need to supply this information. On any subroutine that will be\ncalled recursively (this includes all the programs in a recursive loop\nsuch as the one described above), you need to use the RECUR keyword to\ntell the macros the maximum number of times the subroutine will be\ncalled recursively. This keyword tells the macros how many copies of\nthat subroutines SWA could be active at once, and therefore how much\nroom to allocate. If you miscalculate on the RECUR keyword, the\nStructured Macros will miscalculate on the space required. If you use\ntoo big a number, the macros will allocate more space than is needed. If\nyou use too small a number, the macros will allocate too little space,\nand a dynamic storage error will result. By default, the macros will\nforce an ABEND 0C1 when your program runs out of dynamic storage.\nHowever, you can specify an error exit that will get control when this\nhappens with the DYNERR keyword on the program block.\n\n\n      Storage Calculations with the DYN Option\n\nThe Structured Macros' algorithm is very comprehensive and will allocate\nenough space for all known cases. It uses an internal macro called\n##ORGS to trace the subroutine call structure of the program. From this,\nit determines the subroutines that will be active together, and how big\ntheir SWAs are. Using this information and the size of the PWA, the\nmacros determine how much space they will need to GETMAIN to accommodate\nyour program. This tracing of the subroutine structure is more difficult\nthan it may seem, since the main program and each subroutine might call\nmany other subroutines forming a very complex tree. However, there are\ncertain very complicated and unlikely combinations of subroutines that\ncan trick them into allocating more space than they need. If this ever\nbecomes a problem, it can be adjusted with the DYNSIZE keyword on the\nprogram block. The DYNSIZE keyword is used to replace or adjust the\nvalue for the amount of dynamic storage calculated by the macros. It can\nbe used in certain cases to fine-tune the dynamic storage requirements.\nHowever, in most cases the macros themselves should calculate the\ncorrect amount, and the DYNSIZE keyword should not be needed.\n\n\n      SWA Addressability with the DYN Option\n\nThese SWAs are based off of register 11, while the subroutine itself is\naddressed off of the program base, and the PWA base remains with\nregister 13. It should be noted that register 11 is in use in DYN\nprograms even when a subroutine has not been invoked.\n\n\n      Super Options Used with the DYN Option\n\nThere are two program block super options for use with Dynamic Storage\nManagement. They are *MAIN and *NOMAIN. *MAIN contains all of the\noptions in *PWA plus the options DYN and MAIN. The MAIN option tells DYN\nthat this is a main program and that dynamic storage should always be\nobtained when this program is entered. By contrast, *NOMAIN says that\nthis program is an external subroutine that will be called from a main\nprogram that uses DYN. In a *NOMAIN program, the dynamic storage of its\ncaller is used if there is enough of it. Otherwise, more storage is\nGETMAINed to accommodate the program and its subroutines. It should be\nemphasized that a program compiled with option *NOMAIN should /only/be\ncalled from a program that uses Dynamic Storage Management. Even if the\n*NOMAIN program GETMAINs its own storage, it requires that registers and\nstorage areas be set up by the calling program.\n\nAny *MAIN program that calls external subroutines with *NOMAIN might\nneed to use the DYNSIZE keyword to adjust its dynamic storage to allow\nfor what the *NOMAIN program uses. Since the *NOMAIN program will most\nlikely be compiled separately, there is no way for the Structured Macros\nto calculate its requirements. However, since the *NOMAIN gets more\nstorage if it needs it, adjusting the storage on the *MAIN program only\naffects performance by preventing an extra GETMAIN.\n\n\n      Storage Optimization with the DYN Option\n\nWhen using the DYN option, a short routine is added to the beginning of\neach internal subroutine to obtain the new SWA. This is not a real\nproblem, but if the program has a large number of small subroutines,\nthis can significantly lengthen the load module. If the size of the load\nmodule is critical, the OPTSTOR option can be used on the program block\nto help remedy this. The OPTSTOR option will create a single copy of the\nsubroutine linkage code and have each subroutine branch to it. This\nmakes subroutine calls slower, but will reduce the size of the load\nmodule. However, space is rarely this critical, so the OPTSTOR option is\nnot needed in most cases.\n\n\n    LONG and LOADBASE\n\nWhen a program gets to be very long with a lot of subroutines (such as a\nserver routine or a command processor), the CSECT can become so large\nthat it takes two, three, or even more base registers to maintain\naddressability. It would be nice if there were some way to allow a\nsubroutine to have its own base register separate from the program's\nbase register. The LOADBASE option on subroutine blocks and the LONG\noption on the program block provide this support.\n\nThe LOADBASE option on the subroutine block instructs the subroutine\nlinkage routines to establish a separate addressability to that\nsubroutine using the subroutine base register. This register defaults to\nR10, but another register can be selected with the BASEREG= keyword. Any\nsubroutines coded in this manner are located at the end of the CSECT, so\nthat they do not interfere with the program's addressability.\n\nIf a program has any subroutines that use the LOADBASE option, the\nprogram block must have the LONG option coded. This option causes\nCALLSUB to generate the correct linkage for LOADBASE subroutines. Since\nboth of these options make use of partial PSDs, the LOCTR option is also\nrequired when using these. However, LOCTR is included in all of the\nsuper options, so usually you do not have to code it.\n\nWith this scheme, the macros always keep a base to the program and to\nthe current subroutine. Therefore, the program will be able to address\nanything in the program and its PSD as well as the current subroutine\nand its SSD. However, one subroutine cannot address anything in another\nsubroutine's SSD. If you have any static data that is shared among\nsubroutines, place it in the PSD.\n\nSince a separate base register is kept for the program and the current\nsubroutine, this facility is only useful in programs that already need\ntwo or more base registers. However, with these options the program base\nregister only needs to address the main program code and its static\ndata. If even this can not be done with a single base register, the main\nprogram code can be moved to an internal subroutine with only a single\nCALLSUB in the program block.\n\n\n    Size Limitations\n\nWith the techniques described here, a very large program can be created\nquite easily. Although most programmers will never exceed the Structured\nMacros' limits, it may be useful to know just how large a program can\nbecome. The only limitation on program length (and it's static data) is\nthe number of base registers you are willing to use to address it. But\nwith the LONG and LOADBASE options, this is not necessarily a problem.\nPWAs can be up to 16M in size, but again you must maintain\naddressibility on it. SWAs can be up to a maximum of 32K in size if DYN\nis in effect. If the majority of one of your data or work areas is a\nsingle very large data area that you only need to address the start of,\nyou can place it at the end of the data area. The user fields always go\nafter the fields generated by the Structured Macros.\n\n\n    Conclusion\n\nThe long program management routines provide very useful support for\nlarge or memory intensive programs. A great savings in GETMAINed storage\ncan be achieved in programs with large numbers of subroutines, and many\nof the tedious details of subroutine linkage and program storage can be\nautomated. A savings in base registers can also be achieved in extremely\nlong programs. For more information on the actual layout of dynamic\nstorage, see Appendix C, <##dynform>/Work Area Storage Layout/\n<##dynform>. For a description of program code and static data layout\nwith an example of how these options should be coded, see Appendix D,\n<##codform>/Program Code and Static Data Layout/ <##codform>.\n\n\n    Chapter 7. The IF Structure\n\nThere are four macros that are used to build IF structures: these are\n/IF/, /ELSEIF/, /ELSE/, and /ENDIF/. Of these, conditions to govern\nstatements are coded on the IF and ELSEIF macros. Like the IF services\nin many higher-level languages, there are Boolean operators available\n(AND, OR, NOT) for building complex expressions; however, the\nconditional statements themselves are coded using the actual assembler\ncompare instructions.\n\n*Example 7.1. Conditional Statement Using Assembler Compare Instructions*\n\n IF    (CLC,TAG1(8),NE,6(R2)),THEN\n         :\n   -- success code --\n         :\n ELSE\n         :\n   -- fail code --\n         :\n ENDIF\n\n\nGenerates:\n\n+         CLC   TAG1(8),6(R2)         generated by IF\n+         BE    failtag               generated by IF\n          :\n  -- success code --\n          :\n+         B     endiftag              generated by ELSE\n+failtag  DS    0H                    generated by ELSE\n          :\n  -- fail code --\n          :\n+endiftag DS    0H                    generated by ENDIF\n\n\n*Example 7.2. Compound Conditional Statement Using Assembler Compare\nInstructions*\n\n IF    ((CH,R1,EQ,A),OR,(CH,R1,EQ,B)),THEN\n       :\n   -- success code --\n       :\n ENDIF\n\n\nGenerates:\n\n+         CH    R1,A                  first comparison\n+         BE    successtag            branch if test succeeds\n+         CH    R1,B                  second comparison\n+         BNE   failtag               branch if test fails\n+successtag DS  0H                    generated by IF\n          :\n  -- success code --\n          :\n+failtag  DS    0H                    generated by ENDIF\n+endiftag DS    0H                    generated by ENDIF\n\n\nIn these examples, one thing that you may have noticed is that the macro\nexpansions generate tags and branches to them as may be appropriate.\nAlthough these tags are used only by the macros at assembly time, it is\nvery handy to have them available under TSO TEST.\n\nThe IF and ELSEIF macros allow you to specify conditions in a number of\nways, which are fully described in Chapter 2, <##condch>/Conditional\nStatements/ <##condch>. Simply stated, the condition of the IF statement\nprovides the instruction that is used for the actual comparison and the\nappropriate condition for the subsequent branch.\n\n*Example 7.3. Comparison Condition and Branch*\n\n IF   (CLC,A(6),NE,3(R1)),THEN\n\n\nGenerates:\n\n+         CLC   A(6),3(R1)\n+         BE    failtag\n\n\nConditions can be combined on the IF statement using Boolean expressions\nNOT, AND, and OR.\n\nIf a condition code is known to exist when an IF is executed, only the\ndesired conditional operator need be coded.\n\n*Example 7.4. Coding Only the Conditional Operator When Condition Code\nIs Known To Exist*\n\n TRT   TEXT,TABLE\n IF    Z,THEN\n  MVC   MESSAGE(15),=CL15'TEXT NOT FOUND'\n  PUT   SYSPRINT,MESSAGE\n ELSE\n    :\n    :\n ENDIF\n\n\nIn this example, the TRT instruction sets a zero condition code if the\ntranslate-and-test operation fails. The subsequent IF statement is used\nto generate a conditional branch without a compare instruction. This\nform of the IF statement is useful for non-comparison instructions that\nset a condition code, such as arithmetic and logical instructions. Avoid\nmixing this form of condition with conditions that generate compare\ninstructions, though, because the order in which the instructions are\ngenerated can cause the condition code to be changed prematurely.\n\nThe ELSEIF macro is similar to an ELSE macro followed by an IF macro,\nexcept the IF nesting level is not changed. This allows you to test for\none condition out of a list of conditions.\n\n*Example 7.5. Using ELSEIF*\n\n IF      (CLC,FUNC,EQ,=C'READ'),THEN\n    :\n    :\n ELSEIF  (CLC,FUNC,EQ,=C'WRITE'),THEN\n    :\n    :\n ELSEIF  (CLC,FUNC,EQ,=C'CLOSE'),THEN\n    :\n    :\n ENDIF\n\n\nThis is similar to the CASE structure, except that the CASE macro is\nmainly used to select one out of a sequence of numerically ordered\nitems. For more information on the CASE macro, See Chapter 9,\n<##case>/CASEs and CASE Blocks/ <##case>.\n\n\n    Chapter 8. Loops\n\nVariations of the /LOOP/and /ENDLOOP/macros can be used to create the\nmost commonly used loop structures. The types of loop available are as\nfollows:\n\n  *\n\n    *WHILE Loops: *Completion tests are performed at the top of the loop.\n\n  *\n\n    *UNTIL Loops: *Completion checking is done at the bottom of the loop.\n\n  *\n\n    *BCT and BXLE Loops: *Completion tests are performed at the end of\n    the loop\n\n  *\n\n    *BXH Loops: *Completion checks are made at the top of the loop.\n\n  *\n\n    *Endless Loops: *Completion checks are made within the loop by the\n    programmer's code.\n\nThe WHILE and UNTIL loops provide the Assembly language programmer with\nthe standard loop structures available in any high-level language and\nthe ability to control the loops with any condition that is legal in an\nIF statement. See Chapter 2, <##condch>/Conditional Statements/\n<##condch>for a complete description of the conditions that can be\nspecified with the Structured Macros. The BCT, BXH, and BXLE loop\nprovide support for the standard System/370 looping statements, while\npreserving the structured nature of the code.\n\nAs in the other structures, the LEAVE macro can be used to exit a loop\nif desired. In the case of an endless loop, a LEAVE macro is usually the\nonly way to exit the loop.\n\n*Example 8.1. Types of LOOP macros *\n\n   LOOP      WHILE,condition\n     :\n   ENDLOOP   WHILE\n\n\n   LOOP      UNTIL\n     :\n   ENDLOOP   UNTIL,condition\n\n\n   LOOP      UNTIL\n     :\n   ENDLOOP   UNTIL,LEAVE\n\n\n   LOOP      BXH,r1,r2\n     :\n   ENDLOOP   BXH\n\n\n   LOOP      BXLE\n     :\n   ENDLOOP   BXLE,r1,r2\n\n\n   LOOP      BCT\n     :\n   ENDLOOP   BCT,reg\n\n\n\n    Chapter 9. CASEs and CASE Blocks\n\nThe CASE structure can be used in place of the jump-table or\ngo-to-depending-on structure and serves the same function as the Pascal\nCASE structure. The macros used to create the CASE structure are\nCASEBLK, CASE and ENDCASE. The CASEBLK macro opens a case block and\ngenerates code that selects a handler routine based on the contents of a\nregister. The ENDCASE macro denotes the end of a CASE block, and is\nbranched to at the end of each individual CASE. CASE macros within the\nCASE block frame code that handles an individual case or occurrence.\n\nA common example of the use of a CASE block might appear after a call to\nsome routine that can return one of several return codes, each of which\nmust be handled differently.\n\n*Example 9.1. The CASE Block *\n\nIF  (TREG,R15,NZ),THEN\n\n  CASEBLK REG=R15,MULT=4\n\n    CASE 4\n    -- code handles return code 4\n\n    CASE 12,16\n    -- code handles return codes 12 and 16\n\n    CASE OTHER\n    -- code handles other return codes\n\n  ENDCASE\n\nENDIF\n\nNote that since the CASE and CASEBLK macros generate a series of\nbranches that are selected by the value in the CASEBLK register, they\nshould be used to select one value from a list of numerically ordered\nchoices. For comparing character data, or selecting from widely\nseparated values, the IF - ELSEIF structure should be used. For more\ninformation on ELSEIF, see its description in Chapter 7, <##if>/The IF\nStructure/ <##if>.\n\n\n    Chapter 10. Parameter Lists and Standard Linkage\n\n*Table of Contents*\n\nReferencing Input Parameter Lists <#id484600>\nGenerating Parameter Lists <#id485185>\nAutomatic Parameter Lists <#id485428>\nPermanent Parameter Lists <#id485470>\nCalling Subroutines <#id485601>\nParameter Lists on CALLSUB and CALLX <#id485668>\nRecommendations <#id485741>\nExample Source <#id485850>\n\nThe Structured Macros provide excellent support for the main program\nbeing called and for calling internal and external subroutines using\nstandard OS linkage conventions. A large part of this is handling\nstandard OS parameter lists. The standard form for these parameter lists\nis a sequence of fullwords, each the address of a particular data item.\nIf a data item is missing, the address pointing to it is filled in with\na fullword of zeros. Upon entry to the routine, register 1 points to the\nfirst fullword in the parameter list.\n\nThe handling of parameter lists consists of two parts. First, there must\nbe some way to reference input parameter lists. These lists are\nprocessed by a program or subroutine block and are created by the\ninvoking program. Second, support is needed for generated parameter\nlists. These are parameter lists that are created by a program or\nsubroutine block and then passed to an external routine or another\nsubroutine. These functions are intertwined, since a program that calls\nan internal subroutine can create a generated parameter list that\nbecomes the input parameter list of the subroutine being called.\n\n\n    Referencing Input Parameter Lists\n\nThe input parameter list for a program is referred to by the Structured\nMacros as the Program Parameter List (PPL) The corresponding structure\nfor subroutines is the Subroutine Parameter List (SPL). The Structured\nMacros provide a number of options to control the handling of input\nparameter lists. These options are specified as sub-options of the PARMS\noption.\n\nThe VL|NOVL parameter option identifies the input parameter list as\nbeing either variable or fixed length.\n\nThe COPY parameter option instructs the macros to copy the input\nparameter list into the current work area (PWA for programs and SWA for\nsubroutines). In this case, the PPL (or SPL for subroutines) is not the\noriginal input parameter list, but a copy of the original made in\nworking storage. This has several uses. First, it prevents the program\nfrom modifying the original parameter list. Modifying an input parameter\nlist is not allowed by the standard linkage rules. Second, by copying\nthe parameter list, it is addressed with the work area base register and\na separate parameter list register is not required. Last, the COPY\noption makes it easier to determine which parameters were specified on a\nvariable length parameter list. The work area storage is always large\nenough to hold the maximum length parameter list and is filled with\nzeros before the input parameter list is copied there. Because of this,\nthe program only needs to test any parameter address for zero to see if\nit was specified in the original parameter list. The COPY option\nrequires that the PWA option be specified for program blocks and that\nthe SWA option be specified on subroutine blocks.\n\nThe COPYERROR parameter option is required if the COPY option is used\nwith VL input parameter lists and is used to name the error exit that is\ninvoked if the input parameter list is too large to fit in the space\nreserved for it in working storage. This happens if the parameter list\nis larger than expected or if it is not a VL parameter list, which makes\nit impossible for the Structured Macros to determine the last parameter.\nAny error exit in the program can be specified, including the unnamed\nerror exit, and an exit code can be passed to the error exit identifing\nthe type of error, for a multi-purpose exit.\n\nThe COUNT parameter option specifies the location of a fullword into\nwhich the Structured Macros place the number of parameters in a VL input\nparameter list. This can be used to verify that the program is called\nwith the correct number of parameters.\n\nThe USING parameter option specifies a register to be loaded with the\nstarting address of the input parameter list. This is either the\noriginal input parameter list, or an area within the current work area\n(if COPY is also specified). After the register is loaded, a USING is\ndone to provide addressibility on the parameter list.\n\nThe PREFIX option instructs the macros to use a unique parameter list ID\nwhen generating the tag names within the PPL or SPL. For more\ninformation about how this is used, see Chapter 11, <##scope>/Location\nand Scope of Data Structures/ <##scope>.\n\nA description of the input parameter list must be provided in order to\nmake use of these options. There are two mutually exclusive keywords on\nthe BLOCK macro provided for this purpose.\n\nIf a mapping macro is already available for the input parameter list,\nthe PARMMAP keyword can be used to specify the Dsect name and length.\nThis provides a name for a USING on the parameter list and defines the\nsize of the area that must be reserved for a COPY.\n\nIf a mapping macro is not available, the PARMS keyword can be used to\nspecify a list of tags to be used to map the parameter list. These tag\nnames are either used to generate the parameter list Dsect or mapped to\nthe work area storage if COPY is being used.\n\n\n      Note\n\nWhether a parameter list is mapped by a supplied Dsect or tags generated\nby the PARMS keyword, these tags do not refer to the parameters\nthemselves, but rather to the addresses of the parameters. This is not a\ndeficiency in the Structured Macros; it is simply the way that standard\nOS parameters work.\n\n\n    Generating Parameter Lists\n\nMost external subroutines (and some internal ones) will require some\nsort of parameter list to pass data between the calling program and the\nsubroutine.\n\nThe Structured Macros provide excellent support for building,\nmaintaining, and passing parameter lists. The PLIST macro is used to\ncreate or modify a parameter list. It also loads register one with the\naddress of the completed list. The following example illustrates some of\nthe capabilities of the PLIST macro.\n\n*Example 10.1. PLIST Macro*\n\n  PLIST  (DATA1,,*DATA3,*),PL=(PARMSTOR,4)\n\n\nThis example statement builds a parameter list of four items at the\nlocation pointed to by PARMSTOR. First is a simple data item whose\naddress is loaded into the parameter list. The second item in the list\nis missing, so its address is filled in with a full word of zeros. The\nthird item in the list is filled in with the contents of DATA3 instead\nof a pointer to DATA3. This form of indirect addressing is used when the\nreferenced storage contains a pointer to the actual parameter. The\nasterisk in the fourth position tells the PLIST macro to skip over that\nposition in the list and leave the value there unchanged. This is useful\nif you are modifying a parameter list that was created earlier, and you\nonly want to update certain fields. The fields that are not to be\nchanged can be marked with asterisks. Once the parameter list has been\nbuilt, PLIST loads register one with the address of PARMSTOR.\n\nThe PLIST macro allows the use of constants as well as labels when\ndefining parameter lists. Observe the following example:\n\n*Example 10.2. PLIST Macro with Constants*\n\n  PLIST (0,,'HELLO?',=X'FF')\n\n\nwhich is equivalent to:\n\n  PLIST (=F'0',,=C'HELLO?',=X'FF')\n\n\nBoth cases generate literal constants, and then fill in the parameter\nlist with the addresses of these constants. Any decimal self-defining\nconstant is treated as a full word literal and any character string in\nquotes is treated as a character literal. Note that any other type of\nliteral (such as hex or binary) has to be coded as a literal. Since\ndecimal and character constants can be coded as constants instead of as\nliterals, the PLIST macro makes generating parameter lists even more\npainless.\n\nNote in the examples above the distinction between the first and second\nparameter in each list. The first parameter is a decimal constant of\nzero. The macros generate a full word of zero and fill in the first\nposition in the parameter list with the address of it. The second\nparameter is missing, so the macros put a full word of zeros into the\nparameter list itself. This is an important distinction to remember.\n\nThere are two main types of parameter lists: variable length (VL) and\nfixed length (NOVL). In variable length parameter lists, the last\naddress in the list has its high bit set to one to mark it as the end of\nthe list. Since the length of fixed length parameter lists is known in\nadvance, the end does not need to be marked. The VL or NOVL option on\nthe program block macro is used to set up the default for all parameter\nlists generated by the program or any of its internal subroutines. Note\nthat this is distinct from the VL parameter option (specified by the\nPARMS option). The VL parameter option describes the input parameter\nlist. You can specify a VL (or NOVL) keyword on the PLIST macro to\noverride this default. Note that all of the super options specify VL so\nthat you get variable length parameter lists by default. If the PLIST\nmacro is generating a VL parameter list (either because of the VL option\non the program block or the VL keyword on the PLIST macro), the last\naddress in the parameter list has its high bit set to one. This occurs\neven if the last parameter has been marked with an asterisk.\n\nYou have many choices as to where the parameter list itself gets built.\nAs you have already seen, you can use the PL= keyword to specify a tag\nand a number of parameters for the parameter list. This number should\nrepresent the size of the storage available for the parameter list. The\nnumber is necessary because the PLIST macro verifies that there is\nenough room to hold the parameter list. This prevents PLIST from running\nover the parameter list storage into other data fields. If the tag has a\nself-defining length attribute, the number field can be omitted.\nHowever, because of the way the assembler interprets lengths, you need\nto be careful. To illustrate this:\n\n*Example 10.3. Parameter List Lengths*\n\nPARMS1  DS  3F\nPARMS2  DS  XL(3*4)\n\n\nBoth of the definitions above reserve enough space for a parameter list\nat least three items long. However, the assembler views the first tag as\nhaving a length of 4 since it is just a series of fullwords. Therefore,\nPLIST will assume that this storage location can hold a parameter list\nof only one item. The second example actually has a length of 12, which\nis what PLIST requires if you try to build a parameter list of three\nitems here.\n\n\n    Automatic Parameter Lists\n\nIf your program has a PWA, you can have storage for your generated\nparameter lists automatically allocated within the PWA. Any parameter\nlists that do not include a PL= keyword in their definitions are placed\nin a special parameter list area in the PWA. This area is only big\nenough to contain the single largest parameter list in the program and\nis reused when a new parameter list is needed. For this reason, it is\nmost useful for parameter lists that are created, immediately used, and\nthen discarded.\n\nA separate parameter list area is also created for any internal\nsubroutines that generate parameter lists themselves. This is because a\nsubroutine that generates a parameter list might have been called with\none and that one must remain even though the subroutine is generating\nnew ones. The subroutine parameter list area is created within the SWA\nfor the subroutine.\n\nIf your program does not have a PWA, you can achieve the same effect\nwith the PL= keyword on the block macro. This keyword is identical to\nthe PL= keyword on the PLIST, CALLSUB, and CALLX macros and defines a\ndefault parameter list area for any parameter lists within that\nenclosing block. This keyword can be used on any type block to create a\nunique parameter list area for each program section.\n\n\n    Permanent Parameter Lists\n\nThere are still cases where you would want to code PL= for a parameter\nlist. If your program requires that a subroutine will be called many\ntimes with the same parameter list, it would help to be able to create\nit just once, then refer to it as often as necessary. Also, it may be\ndesirable to create a parameter list and then modify it conditionally\nbefore its use. In either of these cases, you can use PLIST with the PL=\nkeyword to create the list in its own unique location. This prevents the\nlist from being overwritten by the next parameter list. These lists can\nbe viewed as permanent since they remain until specifically written\nover, while the automatic parameter lists only remain until the storage\nis needed for the next list.\n\nIf a permanent parameter list is needed, you can code a PLIST macro with\nthe PL= keyword and define storage for the parameter list, most likely\nin the PWA or SWA. However, this requires more upkeep than the other\ntypes of parameter lists. You must make sure that enough storage has\nbeen reserved to contain all the parameters in the list and if the\nnumber of parameters is changed later, the storage definition must be\nchanged.\n\nIt would be nice if there was a way to get the Structured Macros to\ngenerate the DS commands for you. That way, if the size of the parameter\nlist changed, the storage area would change with it. This would give the\nadvantages of the temporary lists while still allowing you to keep the\nlist around and refer to it by name for subroutine calls or\nmodifications to the list. There is such a mechanism in the macros. It\nis done with the DS= keyword on the PLIST macro. With the DS= keyword,\nyou can instruct the macros to set aside storage for a particular\nparameter list in the PWA or in an SWA (of course you can only specify\nSWA if the parameter list is being built in a subroutine that has one.)\n\n*Example 10.4. Using the DS Keyword*\n\n  PLIST  (DATA1,DATA2,DATA3),PL=PARM1,DS=PWA\n\n  PLIST  (DATA4,DATA5),PL=(PARM2,3),DS=SWA\n\n\nWhen the DS= keyword is used, the PLIST macro counts the parameters in\nthe list and sets aside just enough storage for them with a label\nsupplied by the PL= keyword. You can also force the macro to allocate a\nspecific amount of space by including a number in the PL= keyword. After\na parameter list is created using the DS= keyword, it can be referred to\nwith just a PL=tag. One caution on using this keyword: Since the PLIST\nmacro actually defines the parameter list storage within a partial PWA,\nthe DS= keyword should appear on the first reference to the parameter\nlist that the assembler sees and no others. All other references to the\nparameter list should just use PL= to specify the tag for that list.\n\n\n    Calling Subroutines\n\nTwo macros are provided for calling subroutines. CALLSUB is used to call\nan internal subroutine that is included as part of the assembly of the\nmain program. CALLX is used to call external routines that have been\nlinked with the main program or that are dynamically loaded. These\nexternal routines may be other programs, or they can be IBM or vendor\nsupplied service routines.\n\nThe CALLSUB macro generates a BAL instruction (or BAS if the XA option\nis being used) to jump to a subroutine that the program has direct\naddressability to. The return address is in register 14. Otherwise, all\nregisters have the same value upon entry to the subroutine that they had\nin the main program. CALLSUB also provides the necessary linkage for\nDynamic Storage Management if DYN is being used, and for subroutines\nthat use LOADBASE. In either of these cases, the contents of register 15\nare also destroyed by the CALLSUB macro.\n\nThe CALLX macro is for external subroutines and generates a BALR\ninstruction (or BASR) with the return address in register 14 and the\nsubroutine address in register 15. This is the standard format for\nexternal subroutines. Registers 14 and 15 are the only ones destroyed by\nthe CALLX macro. All others have the same value in the subroutine that\nthey had in the calling program.\n\nCALLX also differs from CALLSUB in the way that the subroutine address\nis specified. Since CALLSUB is used for internal subroutines, the name\nof the subroutine is specified on the CALLSUB macro. To call an external\nsubroutine with CALLX, you specify the address in a register or give the\nCALLX macro the address of a location that contains a pointer to the\nexternal routine.\n\n\n    Parameter Lists on CALLSUB and CALLX\n\nIf you are going to build a parameter list and then immediately issue a\nCALLSUB or CALLX macro, you can combine these functions in a single\nmacro. The CALLSUB and CALLX macros can generate parameter lists just as\nPLIST does, so you can have these macros build your parameter list for you.\n\n*Example 10.5. Combining Parameter Lists with Subroutine Calls*\n\n  CALLSUB SUBONE,(DATA1,*DATA2,100),PL=(PARMS1,3),NOVL\n\n  CALLX   (R15),(DATA3,'ERROR')\n\n\nThis method of calling subroutines is very simple. However, it should be\nnoted that the parameter list is recreated every time the subroutine is\ncalled. If you are going to make repeated calls to a subroutine with the\nsame parameter list, it would be better to create the parameter list\nonce and simply load the address of it before the subroutine call. This\ncan be done like this:\n\n*Example 10.6. Creating the Parameter List Once*\n\n  CALLX   (R15),PL=PARMSTOR\n\n\n\n    Recommendations\n\nTo help you better understand the types of parameter lists and calls,\nhere are some general conventions to remember when using the Structured\nMacros for parameter lists. These rules are not enforced by the macros,\nbut are good programming practice. When reading these rules, remember\nthe distinction between permanent lists that use the PL= keyword to\npoint to a specific location and automatic lists that are defined in\ndefault parameter list storage.\n\n  *\n\n    If the PARMS keyword was used to describe the input parameter list,\n    you will generally want a parameter option of either COPY or USING,\n    but not both.\n\n  *\n\n    Since it frees a register that otherwise would be used to map the\n    parameter list, COPY will probably be the most common option.\n\n  *\n\n    If the PARMMAP keyword was used to describe the input parameter\n    list, you will generally want the USING parameter option. The COPY\n    option may be specified if you want the functions it provides.\n\n  *\n\n    When using CALLSUB and CALLX, the PL= keyword is only really\n    necessary when referring to a permanent list created by a previous\n    PLIST macro.\n\n  *\n\n    The PLIST macro is only needed for creating and modifying permanent\n    parameter lists or when the call must be done without CALLSUB or\n    CALLX (With LINK for example).\n\n  *\n\n    Permanent parameter lists should only be created with PLIST.\n\n  *\n\n    The * notation for modifying parameters should only be used in\n    permanent parameter lists.\n\n  *\n\n    Temporary parameter lists should only be created with CALLSUB or\n    CALLX (Except when forced to use PLIST because the call cannot be\n    made with CALLSUB or CALLX).\n\n\n    Example Source\n\nHere is an example to show you some of the various ways parameter lists\ncan be used.\n\n*Example 10.7. Parameter List Example*\n\n BLOCK   TYPE=PROGRAM,NAME=PROG1,OPTIONS=(*PWA)\n*  Call external routine and pass a parameter list\n  LOAD   EP=PROG2\n  CALLX  (R0),(MYDATA,'OPEN',),NOVL\n ENDBLK  BLOCK=PROG1\n\n*  And under a separate assembly, you have\n BLOCK   TYPE=PROGRAM,NAME=PROG2,PARMS=(DATA,FUNCTION,OPT)             +\n               OPTIONS=(*PWA,(PARMS,COPY,NOVL))\n*  Copy actual parameter data to working storage\n  L      R1,DATA               Get address of 1st parameter\n  MVC    DATA1,0(R1)           Save data away\n*  Create a permanent list for later use.  Note that FUNCTION contains\n*  the address of the parameter we want to pass.\n  PLIST  (DATA1,*FUNCTION,53),PL=PARM1,DS=PWA\n*  Call subroutine using temporary list\n  CALLSUB SUBONE,(DATA3,,'INIT')\n*  Modify permanent list\n  PLIST  (*,DATA5,*),PL=PARM1\n*  Call subroutine using previous list\n  CALLX  =V(EXTRSUB),PL=PARM1\n ENDBLK  BLOCK=PROG2\n\n BLOCK   TYPE=SUBROUTINE,NAME=SUBONE,PARMMAP=(SUBPARM,SUBPARML),       +\n               OPTIONS=(*SWA,(PARMS,(USING,R9),VL))\n*  Call subroutine using temporary list\n*  This list will be created in SWA\n  CALLX  (R15),(155,'NAME',=X'FF')\n*  Create a permanent list within SWA\n  PLIST  (DATA4,DATA5),PL=SWAPARM,DS=SWA\n ENDBLK  BLOCK=SUBONE\n         SUBPARM DSECT=YES            Generate Dsect for input parms.\nSUBPARML EQU   *-SUBPARM\n\n\n\n    Chapter 11. Location and Scope of Data Structures\n\n*Table of Contents*\n\nLocal Scope within Subroutines <#id486795>\n\nSince the Structured Macros handle all of the implementation details of\nPWAs, PSDs, SWAs, etc., a programmer should not have to reference any of\nthese data areas directly. However, on the rare occasions that it is\nnecessary, symbols are defined by the Structured Macros that contain\nunique tags located at the beginning of these structures. These symbols\nare listed below:\n\n  *\n\n    *&PWA: *Program Work Area\n\n  *\n\n    *&PSD: *Program Static Data\n\n  *\n\n    *&PPL: *Program Parameter List\n\n  *\n\n    *&SWA: *Subroutine Work Area\n\n  *\n\n    *&SSD: *Subroutine Static Data\n\n  *\n\n    *&SPL: *Subroutine Parameter List\n\nTo have these symbols available to your program, include an assembler\nCOPY statement at the beginning of your program for the member SMSYMS.\nThis is necessary because of the Assembler H requirement that all global\nsymbols be declared in open code and not from within macros.\n\nThese symbols can be used by any programs that needs to calculate\noffsets within any of these structures. However, these symbols have a\nmuch better use when used within subroutines.\n\n\n    Local Scope within Subroutines\n\nOne of the nicer concepts of high-level languages is local scope within\nsubroutines. This isolates the working storage of the subroutine from\nthe main program, and helps to prevent the subroutine from affecting the\nprogram's storage in unforseen ways. To some extent, Subroutine Work\nArea accomplish this goal for assembler programs. By giving each\nsubroutine its own work area instead having to share work areas within\nthe PWA, the chance that two subroutines will overlay each other's\nstorage is greatly reduced.\n\nAnother very nice feature of local scope becomes evident when it comes\ntime to think up names for variables and work areas. In a language with\nlocal scoping, you can name variables within a subroutine without any\nregard for what the variables in other subroutines have been named. This\nalso makes it easier to copy a subroutine from one program to another,\nsince the new program does not have to be checked for variable name\nconflicts.\n\nUnfortunately, 370 assembler requires that every tag be unique and does\nnot allow for local scoping of names. However, the subroutine data area\nsymbols described above can be used to accomplish the same effect. They\ncontain the name of a tag at the beginning of a data area, but this can\nalso be thought of as a unique id that can be prefixed to tag names to\ndistinguish them from identically named tags in other subroutines. To\nfacilitate this use of the symbols, abbreviated versions of them were\ncreated. The short versions are as follows:\n\n   &SWA = &W\n   &SSD = &S\n   &SPL = &P\n\n\nWith these tags, you can write a subroutine like the following. Note the\nuse of the PREFIX parameter option to force the use of the &P. symbol in\nthe SPL.\n\n*Example 11.1. Using Tags*\n\n       .\n       .\n       .\n  COPY    SMSYMS\n       .\n       .\n       .\n EDITDATA    TITLE 'SUBROUTINE TO EDIT PASSED FULLWORD'\n *---------------------------------------------------------------------*\n *  SUBROUTINE  EDITDATA\n *\n *  ABSTRACT    THIS SUBROUTINE TAKES THE FULLWORD PASSED IN THE\n *              FIRST PARAMETER PASSED TO IT, EDIT IT INTO A WORK AREA,\n *              AND COPY THE RESULTS INTO THE AREA POINTED TO BY THE\n *              SECOND PARAMETER.\n *---------------------------------------------------------------------*\n          SPACE 3\n  BLOCK   NAME=EDITDATA,TYPE=SUBROUTINE,                               +\n                OPTIONS=(*SWA,(PARMS,(USING,R9),PREFIX)),              +\n                PARMS=(DATAPTR,RESULT)\n   L      R1,&P.DATAPTR                | GET ADDR OF FULL WORD.\n   L      R2,0(,R1)                    | LOAD FULL WORD TO CONVERT.\n   CVD    R2,&W.DOUBL                  | CONVERT TO DECIMAL.\n   MVC    &W.MASK,&S.MASK              | COPY EDIT MASK TO WORK AREA.\n   EDIT   &W.MASK,&W.DOUBL             | EDIT DECIMAL NUMBER TO EBCDIC.\n   L      R1,&P.RESULT                 | GET PTR TO RESULT STORAGE.\n   MVC    0(11,R1),&W.MASK             | COPY RESULT.\n  ENDBLK  BLOCK=EDITDATA\n          SSD\n &S.MASK  DC    CL'4020202020202020202120'\n          ENDSSD\n          SWA\n &W.MASK  DC    CL'4020202020202020202120'\n &W.DOUBL DS    D\n          ENDSWA\n\n\nAlthough this may seem strange at first, most programmers find that the\nadvantages outweigh any inconveniences.\n\n\n    Chapter 12. Miscellaneous Macros\n\n*Table of Contents*\n\nBit Manipulation <#id487260>\nTesting A Register <#id486653>\nInitializing Storage <#id486674>\nRegister Loading <#id486708>\nExecuting Instructions <#id487418>\nLoading Control Block Addresses <#id487517>\nControlling Structured Macro Operation <#id487616>\n\nThere are several macros packaged with the Structured Macros that, while\nthey are not true structured programming aids, perform commonly used\nfunctions and relieve some coding effort.\n\n\n    Bit Manipulation\n\nThere are macros provided that perform the 4 most common functions\nperformed on a bit: setting (OI), resetting (NI), inverting (XI), and\ntesting (TM). The macros that perform these tasks are /SBIT/, /RBIT/,\n/IBIT/, and /TBIT/respectively. Each macro uses the appropriate\nimmediate instruction to operate on a single byte; however, multiple\nbits within the target byte can be changed at once.\n\n*Example 12.1. Setting Multiple Bits at Once*\n\n  SBIT  FLAGBYTE,(BIT1,BIT2,BIT3)\n\n\nGenerates:\n\n+          OI    FLAGBYTE,BIT1+BIT2+BIT3\n\n\nThere is also an optional naming convention. If the address of the\ntarget byte is not provided, the macros assume that the target bit's tag\nis the first 5 characters of the flag name.\n\n*Example 12.2. Default Target Bit Name*\n\n IBIT  PWAF1OK\n\n\nAssumes the flag was named PWAF1 and generates:\n\n+         XI    PWAF1,PWAF1OK\n\n\nThe TBIT macro is valid as a \u00f4compare\u00f6 instruction, allowing the use of\nTBIT in conditional expressions on IF, LEAVE, LOOP and ERREXIT.\n\n\n    Testing A Register\n\nThe TREG macro can be used in place of the LTR instruction. TREG always\nissues a LTR that loads the target register from itself, thus setting\nthe condition code without modifying any registers. TREG is valid in a\nconditional expressions.\n\n\n    Initializing Storage\n\nThe FILL macro can be used to set areas of storage to a byte value, such\nas spaces or low-values. There are three types of FILL which can be\ndone: short, the default, for 1 to 256 bytes; medium, for up to 4095\nbytes, and long, for up to 16 megabytes. Medium FILL can use any length\nconstant that the LA instruction can handle, while a long FILL must have\nits length in a register. Otherwise, medium and long FILL are identical.\nA short FILL does not destroy any registers, as it uses MVI and MVC to\npropagate its fill character, but medium and long FILL both use MVCL,\nand destroys the contents of R14, R15, R0 and R1.\n\n\n    Register Loading\n\nOften it is necessary to load one, two, three, or four bytes of data\ninto a register from storage. The L8, L16, L24, and L32 macros allow\nthis to be easily accomplished.\n\n*Example 12.3. Loading Multiple Bytes into a Register*\n\n  L16   R4,DATA1\n\n\nThis loads the low-order two bytes of register four with the two bytes\nat location DATA1 and clears the high-order two bytes of register four.\nThese macros clear the specified register, and issue an appropriate ICM\nto load the required data.\n\n\n      Important\n\nSince all of these macros except L32 clear the register before doing the\nICM, they should never be used to load a register that is referred to in\nthe address being loaded from.\n\n*Example 12.4. Register Loading Clearing the Register*\n\n  L16   R2,10(R2)\n\n\nGenerates:\n\n+         SLR   R2,R2                     CLEAR REGISTER\n+         ICM   R2,B'0011',10(R2)         LOAD 16 BITS\n\n\nIn this example, register two is cleared to zero, then is loaded with\nthe two bytes at the location pointed to by ten off of the contents of\nregister two. But since register two has been zeroed, this loads from\n/absolute location ten/. This type of problem can be very difficult to\ndebug because without looking at the macro expansion, it is difficult to\nunderstand exactly what is going on.\n\n\n    Executing Instructions\n\nThe EX instruction is a very powerful tool in System/370 assembly\nlanguage. There are many cases where it is the simplest method to\noperate on a variable amount of data. However, there are problems with\nusing the EX instruction. Most of these stem from the placement of the\ninstruction to be EXecuted. The instruction can be placed inline, right\nnext to the EX instruction with a branch around it. This is convenient,\nbut wasteful because it requires unnecessary branch instructions. The\ninstruction can be placed with the static data, but this causes more\nproblems. First, the EX instruction is removed in the source from the\ninstruction being EXecuted, making the program harder to read. Second,\nthe USING environment of the EXecuted instruction can be completely\ndifferent from that of the EX instruction, making the coding of\nmeaningful labels difficult or impossible.\n\nPerhaps the best solution is to use the LOCTR assembler instruction.\nThis instruction establishes a new location counter for whatever data\nfollows. Any data or instruction defined with a new location counter\nwill be collected and placed at the end of the load module. This way,\nthe EXecuted instruction can be defined inline with the current USING\nenvironment, but will be placed at the end of the load module where no\nbranch is needed to skip over it.\n\nHowever, all of these methods have one problem in common when used with\nthe Structured Macros. They all require you to code tags in the body of\nthe program. Since the Structured Macros eliminate the need for tags in\nthe rest of the program, this can upset the indentation scheme and make\nthe program look messy and difficult to read.\n\nA solution to all of these problems is to provide a macro to generate\nthe EX instruction and its object, and to generate the tags\nautomatically. This way, the source can still be coded without the use\nof any tags. The EXI macro is included with the Structured Macros to\nprovide this function. It can accept any register for the EX\ninstruction, and allows the user to specify any opcode and one to three\noperands.\n\n*Example 12.5. Execute Instruction Using the EXI Macro*\n\n  EXI   R3,(MVC,DEST(0),0(R10))\n\n\nThis generates a MVC instruction with the operands specified and an EX\ninstruction using register 3 and the MVC.\n\nIf the LOCTR option was specified on the program block, the EXI macro\nputs the EXecuted instruction in the PSD (or the SSD if it is within a\nsubroutine). If NOLOCTR was specified, EXI generates the instruction\ninline with a branch around it.\n\n\n    Loading Control Block Addresses\n\nThere are certain system control blocks that programmers find themselves\naccessing often. The LCBA macro is provided to give you a standard way\nof finding these control blocks. The LCBA macro locates the address of\nthe specified control block and places it in the specified register. The\nmapping macros for any control blocks LCBA uses to find the desired\ncontrol block are not required. The LCBA macro can be used to load the\naddress of the following:\n\n  *\n\n    current ACEE\n\n  *\n\n    current ASCB\n\n  *\n\n    current ASXB\n\n  *\n\n    CVT\n\n  *\n\n    current TCB\n\n  *\n\n    UJT (Clemson dependent)\n\n  *\n\n    UVT (Clemson dependent)\n\n*Example 12.6. Loading the Control Bloack Address with LCBA*\n\n  LCBA   R8,ACEE\n  IF     (Z)\n    -- ACEE not found code --\n  ENDIF\n  USING  ACEE,R8\n    -- Now have ACEE --\n\n\n\n    Controlling Structured Macro Operation\n\nThere are times when a decision must be made in the middle of a program\nthat needs to affect the operation of the Structured Macros at a later\ntime. To provide for this capability, the SMCTRL macro was created to\nset flags that are checked by other macros.\n\nOne example of this use is the reusable PWA support. You use SMCTRL to\ninform the macros that the PWA should be freed when the current\ninvocation of the program is terminated.\n\n\n    Chapter 13. Miscellaneous Examples\n\n*Table of Contents*\n\nA Search Loop <#id486567>\nScanning Text <#id486365>\nA DCB EODAD Exit <#id488214>\nReturning R0 and R1 with ENDBLK <#id488268>\n\nThis section provides some examples for pieces of code that programmers\nfind themselves writing often.\n\n\n    A Search Loop\n\nWhile search routines can be as different as the data structures they\nare accessing, they are usually similar in their general structure. This\nis an example of a sequential search routine that looks through a RACF\naccess list.\n\n*Example 13.1. Search Loop Example*\n\n  BLOCK NAME=SEARCH\n*\n*   Set up list pointer and count for search.\n*\n   LA   R2,ACL\n   LH   R3,ACLCNT\n*\n*   Now loop through the access list (ACLCNT) times.\n*\n   LOOP BCT\n    IF  (CLC,USERID(8),EQ,0(R2)),THEN\n*\n*   If compare succeeds, do success code and leave.\n*\n          :\n     -- success code --\n          :\n     LEAVE BLOCK=SEARCH\n    ENDIF\n*\n*  Point to next entry, try again.\n*\n    LA  R2,ACLLEN(,R2)\n   ENDLOOP BCT,R3\n*\n*  Entire ACL searched without a hit, do fail code.\n*\n          :\n    -- fail code --\n          :\n  ENDBLK BLOCK=SEARCH\n          :\n\n\n\n    Scanning Text\n\nThis routine (lifted from the nesting level pre-processor) uses a BXLE\nand a BXH loop to scan a line of assembler source for its opcode.\n\n*Example 13.2. Text Scanning Example*\n\n*\n*   Set up for BXLE loop:\n*     R1 points to start of source code line\n*     R14 contains increment for R1\n*     R15 contains A(end of line) as limit for R1\n*\n  LA   R1,LINE                        R1 -> start of line\n  LA   R14,1                          Set increment to 1\n  LA   R15,LINE+L'LINE                R15 -> end of line\n\n  LOOP  BXLE                          Skip past any tags in col. 1\n   LEAVE LOOP=*,(CLI,0(R1),EQ,X'40')\n  ENDLOOP BXLE,R1,R14\n\n*\n*   Now use remaining value in R1 as start for BXH loop.\n*\n  LOOP  BXH,R1,R14                    Now scan for opcode\n\n   IF   (CLI,0(R1),NE,X'40')\n\n    IF  (CLC,0(6,R1),EQ,=C'BLOCK ')     If 'BLOCK'\n     IC R0,=C'B'                        Set type to 'B'\n     CALLSUB NEST!Call NEST\n\n    ELSEIF (CLC,0(7,R1),EQ,=C'ENDBLK ') Elseif 'ENDBLK'\n     IC R0,=C'B'                         Set type to 'B'\n     CALLSUB UNNEST                      Call UNNEST\n\n    ELSEIF                              ( etc. )\n       :\n    ENDIF\n\n*\n*   If outer IF succeeded, line is processed, so leave.\n*\n    LEAVE  LOOP=*\n   ENDIF\n\n  ENDLOOP BXH                         End of search loop.\n\n\n\n    A DCB EODAD Exit\n\nOne way to use a DCB EODAD exit (or SYNAD, EOV and other DCB exits) is\nto fake out the macros by coding a tag at the place your end-of-file\ncode started and specifying EODAD=tag in the DCB. This, however, becomes\ndangerous when running mixed-AMODE programs because the EODAD routine\nmust be the same AMODE as the routine where the GET is issued. To avoid\nthis, you can take advantage of the fact that R14 points to the\ninstruction following the GET or READ macro whenever a DCB exit is\ncalled by using an implied CALLSUB, as follows:\n\n*Example 13.3. EODAD Example*\n\n  OPEN  DCB,INPUT\n\n  LOOP  UNTIL              Do 'endless' loop\n\n*\n*  PWAF1EOF gets set if end-of-file was found.\n*\n   GET      DCB,RECORD\n   LEAVE    LOOP=*,(TBIT,PWAF1EOF,ON)\n   CALLSUB  EATREC\n\n  ENDLOOP   UNTIL,LEAVE\n\n  CLOSE DCB\n         :\n         :\n\n  BLOCK NAME=EOF,TYPE=SUBROUTINE,OPTIONS=*NOSUBOPTS\n\n   SBIT  PWAF1EOF\n  ENDBLK BLOCK=EOF\n         :\n         :\nPWAF1    DC    X'00'\nPWAF1EOF EQU   X'80'\n  :\nDCB      DCB   EODAD=EOF,  ...\n\n\nIf this sample were bimodal, subroutine EOF would have to be the same\nAMODE as the code that issues the GET macro.\n\n\n    Returning R0 and R1 with ENDBLK\n\nThere are many programming situations where it is desirable to return\nvalues or pointers to a calling program using registers zero and one.\nCommon examples are sort exits, lookup routines and user SVC's.\n\nThe Structured Macros provide a method for passing back R0 and/or R1\nfrom a program block. You can use the RTNR0 and/or RTNR1 options on the\nprogram block macro and specify the R0= and/or R1= keyword on the ENDBLK\nfor the program and all error exits.\n\n*Example 13.4. Returning R0 and R1 Example*\n\n BLOCK NAME=TEST,TYPE=PROGRAM,OPTIONS=*PWA,RTNR0,RTNR1\n       :\n       :\n ENDBLK BLOCK=TEST,RC=0,R0=8,R1=PARMLIST\n       :\n BLOCK NAME=ERR1,TYPE=ERREXIT\n       :\n ENDBLK BLOCK=TEST,RC=8,R0=0,R1=0\n\n\n\nIf you are using an internal subroutine that has an SWA and would like\nto have the subroutine return a register to its caller, you can use the\nSTRSA macro.\n\n\n    Chapter 14. Structured Macros Listing Program\n\n*Table of Contents*\n\nOutput of the Listing Program <#id487698>\nControlling Listing Program Operation <#id488666>\n\nTo aid the programmer, a listing program was written that will analyze\nthe nesting structure of a program and report on any problems. It also\nprovides a listing of the original program without the macro expansions\nthat tend to blur the structured nature of the program. After they have\ngotten used to it, many programmers use this listing for most of their\nwork, and only refer to the assembler listing occasionally. JCL\nprocedures have been provided that run this listing program and then\nfeed the assembler source into the Level H Assembler. For more\ninformation, see Appendix A, <##asmproc>/Catalogued ASM Procedures At\nClemson/ <##asmproc>.\n\n\n    Output of the Listing Program\n\nBelow is an example of the output of the listing program. It displays\nthe original input source, along with the current nesting level depth,\nand a diagram of the nesting type (Block, Loop, or If).\n\n*Example 14.1. Listing Program Output*\n\nLVL NESTING    SOURCE STATEMENT              MSC0150$ V1R4  15:43 89.117\n\n001  B    | BLOCK NAME=TEST,TYPE=PROGRAM,OPTIONS=(*PWA) |\n001  B    |*                                            |\n002  BL   |  LOOP   WHILE,(CR,R4,LT,R5)                 |\n003  BLI  |   IF    (C,R3,GE,XYZ)                       |\n003  BLI  |    MVC  ABC,XYZ                             |\n002  BL   |   ENDIF                                     |\n001  B    |  ENDLOOP WHILE                              |\n001  B    |  CALLSUB SUB1                               |\n001  B    |*                                            |\n000       | ENDBLK BLOCK=TEST                           |\n000       |*                                            |\n001  B    | BLOCK   NAME=SUB1,TYPE=SUBROUTINE           |\n001  B    |  LR     R1,R2                               |\n000       | ENDBLK  BLOCK=SUB1                          |\n000       |*                                            |\n000       |         PSD                                 |\n000       |         LTORG                               |\n000       |XYZ      DC    F'9'                          |\n000       |ABC      DC    F'4'                          |\n000       |         ENDPSD                              |\n000       |*                                            |\n000       |         PWA                                 |\n000       |PWAFLAG  DS    18F                           |\n000       |         ENDPWA                              |\n000       |*                                            |\n000       |         END                                 |\n\n\nThe Structured Macros Listing Program also points out any irregularities\nin the nesting structure of the program. Below is the listing produced\nby feeding an incorrect program into it.\n\n*Example 14.2. Listing Program Output for Defective Program*\n\n        LVL NESTING    SOURCE STATEMENT              MSC0150$ V1R4  15:43 89.117\n\n001  B    | BLOCK NAME=TEST,TYPE=PROGRAM,OPTIONS=(*PWA) |\n001  B    |*                                            |\n002  BI   |  IF     (C,R3,GE,XYZ)                       |\n002  BI   |*                                            |\n002  BI   | ENDBLK BLOCK=TEST                           |>E-8 NESTING PROBLEM\n002  BI   |*                                            |\n002  BI   |         END                                 |\n\n>E-8 ENDING STRUCTURAL LEVEL IS NON-ZERO\n\n\n\n    Controlling Listing Program Operation\n\nThe SMLIST macro has been provided to control the operation of the\nStructured Macros Listing Program. Parameters on this macro are\nprocessed by the listing program itself, before the source statements\nare sent to the assembler.\n\nCurrently, the only parameter available is CONVERT=YES/NO. CONVERT=YES\ninstructs the listing program to convert the input source to all\nuppercase before feeding it to the assembler. This allows you to write\nprograms in upper and lower case. Many people find mixed case programs\nand comments easier to read, and this parameter makes that easy to do.\n\nAlthough the assembler requires that its input be in upper case, lower\ncase letters are allowed in text strings. To prevent the listing program\nfrom converting your mixed case text strings to upper case, place them\nin double quotes (\") instead of single quotes ('). The listing programs\ndo not convert the text between double quotes and change the double\nquotes back to single quotes before passing the line to the assembler.\n\nWith this facility, programmers can write programs like the one below.\n\n*Example 14.3. Mixed Case Input*\n\n TRYLOWER    TITLE 'Example program for Structured Macros'\n             SMLIST CONVERT=YES\n *---------------------------------------------------------------------*\n *  Program     TRYLOWER\n *\n *  Abstract    This illustrates the use of lower case in assembler\n *              source using the SMLIST CONVERT=YES function of the\n *              Structured Macros Listing Program.\n *---------------------------------------------------------------------*\n          space 3\n  block   name=trylower,type=program,options=(*pwa,xa),amode=any,\n                rmode=any,r1save=r9\n   l      r15,4(r9)                    | Get output routine address.\n   la     r1,psdtext                   | Get pointer to text.\n   balr   r14,r15                      | Call output routine.\n  endblk  block=trylower\n          psd\n psdtext  dc    cl80\"This is a test that is true.\"\n          endpsd\n          pwa\n          endpwa\n\n\n\n  Part II. Structured Macro Reference\n\n*Table of Contents*\n\n15. The BLOCK Macro <#id430569>\n\nBLOCK <#id430575> - Structured macro used to start a block.\n\n16. The CALLCASE Macro <#id497725>\n\nCALLCASE <#id497731> - Structured macro used to call a subroutine based\non a case number.\n\n17. The CALLSUB Macro <#id497511>\n\nCALLSUB <#id497517> - Macro used to call an internal subroutine with\nlinkage provided by the Structured Macros. A parameter list can be\ncreated for the call and its address loaded into register one, or\nregister one can be loaded with the address of a previously created list.\n\n18. The CALLX Macro <#id499259>\n\nCALLX <#id499265> - Macro used to call an external subroutine with\nstandard OS linkage. A parameter list can be created for the call and\nits address loaded into register one, or register one can be loaded with\nthe address of a previously created list.\n\n19. The CASE Macro <#id499737>\n\nCASE <#id499743> - Structured macro used to start the code for a\nparticular case within a case block. This macro must be coded between a\nCASEBLK and ENDCASE macro. The CASE macro is always associated with the\ninnermost CASEBLK.\n\n20. The CASEBLK Macro <#id499729>\n\nCASEBLK <#id499711> - Structured macro used to start a case block. Case\nblocks can be nested up to twenty deep.\n\n21. The DEFUCOND Macro <#id500418>\n\nDEFUCOND <#id500425> - Structured macro used to define the name of a\nuser condition and to identify the macro that processes it. With\nDEFUCOND the programmer can add special case conditions to the list of\nstandard conditions available in conditional expressions. For\ninformation on writing a user condition macro, see User-Defined Conditions.\n\n22. The ELSE Macro <#id498508>\n\nELSE <#id498514> - Structured macro used to start the else code for an\nassociated IF or ELSEIF macro. An ELSE macro is always associated with\nthe innermost IF structure.\n\n23. The ELSEIF Macro <#id500623>\n\nELSEIF <#id500630> - Structured macro used to start the else code for an\nassociated IF or ELSEIF macro. An ELSEIF macro is always associated with\nthe innermost IF structure. An ELSEIF is like an ELSE macro followed by\nan IF macro except that the IF nesting level stays the same.\n\n24. The ENDBLK Macro <#id500933>\n\nENDBLK <#id500939> - Structured macro used to end a block structure.\nRefer to the description of the BLOCK macro for more information.\n\n25. The ENDCASE Macro <#id501360>\n\nENDCASE <#id501366> - Structured macro used to end a case block structure.\n\n26. The ENDIF Macro <#id501300>\n\nENDIF <#id501306> - Structured macro used to end an IF structure.\n\n27. The ENDLOOP Macro <#id501846>\n\nENDLOOP <#id501852> - Structured macro used to end a LOOP structure. For\nmore information, see The LOOP macro.\n\n28. The ENDPSD Macro <#id501603>\n\nENDPSD <#id501610> - Macro used to define the end of the Program Static\nData (PSD). The ENDPSD macro is used to close either a partial PSD\nwithin the program code, or the last PSD at the end of the program.\n\n29. The ENDPWA Macro <#id500124>\n\nENDPWA <#id500130> - Macro used to define the end of the Program Work\nArea (PWA) or to close a partial PWA. The ENDPWA macro defines the\nPWAPLLEN tag to establish the length of the PWA. If the DYN option is\nbeing used, ENDPWA uses the ##ORGS macro to reserve space for the SWAs.\nIf option NORENT is in effect, a DS instruction is generated to reserve\nstorage in the CSECT for the PWA.\n\n30. The ENDSSD Macro <#id502472>\n\nENDSSD <#id502478> - Macro used to define the end of the Subroutine\nStatic Data (SSD). The ENDSSD macro is used to close either a partial\nSSD within the subroutine code, or the last SSD at the end of the\nsubroutine.\n\n31. The ENDSWA Macro <#id502778>\n\nENDSWA <#id502785> - Macro used to define the end of the Subroutine Work\nArea (SWA). It is also used to end a partial SWA definition. The ENDSWA\nmacro establishes the length of the SWA for Dynamic Storage\ncalculations. ENDSWA insures double word alignment for anything that\nfollows the SWA.\n\n32. The ERREXIT Macro <#id502394>\n\nERREXIT <#id502621> - Structured macro used to conditionally cause an\nerrexit block to be executed.\n\n33. The EXI Macro <#id503129>\n\nEXI <#id503135> - This is the EXecute Immediate macro. It is used to\ngenerate an EX instruction and the instruction to be executed. This\nallows the EXecuted statement to be defined at the same time the EX\ninstruction is defined, minimizing confusion. It also insures that the\nUSING environment is the same as that of the EX instruction. The\nEXecuted instruction is generated in the PSD for the program (or SSD for\na subroutine) if the program has selected option LOCTR. Otherwise, it is\ngenerated inline with a branch around it.\n\n34. The FILL Macro <#id503422>\n\nFILL <#id503428> - Macro used to fill an area of storage with a character.\n\n35. The IBIT Macro <#id503730>\n\nIBIT <#id503736> - Macro used to invert bit flags in a byte.\n\n36. The IF Macro <#id504003>\n\nIF <#id504009> - Structured macro used to start an IF structure.\n\n37. The LCBA Macro <#id504561>\n\nLCBA <#id504567> - This macro loads the address of certain control\nblocks into a register. No registers are changed except for the register\nspecified. A zero condition is set if the control block cannot be\nlocated. It is not necessary for the mapping macros for the control\nblocks used internally by this macros to be included in the source program.\n\n38. The LEAVE Macro <#id503410>\n\nLEAVE <#id503416> - Structured macro used to leave a structure.\n\n39. The LOOP Macro <##loopm>\n\nLOOP <#id505094> - Structured macro used to start a loop structure. For\nLOOP WHILE loops, tests are done at the start of the loop. For LOOP\nUNTIL loops, tests are done at the bottom of the loop. If the ENDLOOP\nspecifies UNTIL,LEAVE, the loop will continue until a LEAVE macro is\nused to leave the loop. BCT, BXH, and BXLE loop use the assembler\ninstruction by the same name. BXH instructions are generated at the top\nof the loop and BXLE, and BCT instructions are generated at the bottom\nof the loop.\n\n40. The L8, L16, L24, L32 Macros <#id505508>\n\nL8, L16, L24, L32 <#id504978> - Macros used to load a register with one,\ntwo, three, or four bytes of data from non-aligned storage. This macro\nclears the register and issues the appropriate ICM to accomplish this.\n\n41. The PLIST Macro <#id505744>\n\nPLIST <#id505750> - Macro used to generate or modify a parameter list.\nThe parameter list can be created in default parameter list storage or\nrouted to a specific location. Register one is also loaded with the\naddress of the completed list.\n\n42. The PSD Macro <#id506149>\n\nPSD <#id506155> - Macro used to define the beginning of the Program\nStatic Data (PSD). The PSD macro uses LOCTR to locate the static data\nafter the instructions for the program. The PSD should be defined just\nbefore the PWA for a particular program block if there is one.\n\n43. The PWA Macro <#id506790>\n\nPWA <#id506796> - Macro used to define the beginning of the Program Work\nArea (PWA). The PWA macro automatically reserves space for a standard OS\nsave area, the SMWA, and any parameter lists if it is appropriate for\nthe current environment. Also, if the DYN option is being used, PWA sets\nup the dynamic storage pointers (NAB, EOS-64). The PWA should be defined\nas the last thing associated with a particular program block.\n\n44. The RBIT Macro <#id506750>\n\nRBIT <#id506756> - Macro used to reset bit flags in a byte.\n\n45. The SBIT Macro <#id503114>\n\nSBIT <#id503120> - Macro used to set bit flags in a byte.\n\n46. The SMCTRL Macro <#id503099>\n\nSMCTRL <#id503105> - Macro used to set internal flags to affect the\noperation of the Structured Macros.\n\n47. The SMLIST Macro <#id507764>\n\nSMLIST <#id507749> - Macro used to set options for the operation of the\nStructured Macros Listing Program. This macro is processed by the\nlisting program and not the assembler.\n\n48. The SMSYMS Macro <#id507932>\n\nSMSYMS <#id507938> - This is not a macro, but is a copy member that must\nbe included at the beginning of any program that uses the structure\nlocation symbols described in Location and Scope of Data Structures.\n\n49. The SSD Macro <#id507458>\n\nSSD <#id507464> - Macro used to define the beginning of the Subroutine\nStatic Data (SSD). The SSD macro uses LOCTR to locate the static data.\nIf the subroutine has selected the LOADBASE option, the static data is\nplaced immediately after the subroutine code in the object module. If\nthe subroutine is not using LOADBASE, the subroutine static data is\nplaced with the program static data. The SSD should be defined just\nbefore the SWA for a particular subroutine block.\n\n50. The STRSA Macro <#id508649>\n\nSTRSA <#id507155> - Macro used to store a register's value in the\nSubroutine Work Area (SWA) save area. If an internal subroutine contains\nan SWA, registers are automatically restored when the subroutine is\nexited. If the internal subroutine needs to pass back the value of a\nregister, it can use this macro to save a register's current value in\nthe subroutine save area, so that it is not restored to the original\nvalue when the subroutine returns.\n\n51. The SWA Macro <#id508317>\n\nSWA <#id508323> - Macro used to define the beginning of the Subroutine\nWork Area (SWA). The SWA macro automatically reserves space for a\nsubroutine save area, a SMWA, any parameter lists used by the\nsubroutine, and the Dynamic Storage Management pointers if needed. The\nSWA for a subroutine should be defined immediately after the ENDBLK for\nthat subroutine. The SWA macro insures that any fields specified within\nthe SWA are aligned properly.\n\n52. The TBIT Macro <#id508184>\n\nTBIT <#id508190> - Macro used to test bit flags in a byte.\n\n53. The TREG Macro <#id508601>\n\nTREG <#id508957> - Macro used to test a register for zero, positive, or\nnegative.\n\n54. The ##COND Macro <#id508590>\n\n##COND <#id508596> - This is an internal macro for use within other\nmacros and not in open code. The ##COND macro tests a conditional\nexpression and branches to the appropriate success or failure tags. This\nmacro is intended for use in user condition macros. For information\nabout writing a user condition macro, see User-Defined Conditions.\n\n\n    Chapter 15. The BLOCK Macro\n\n*Table of Contents*\n\nBLOCK <#id430575> - Structured macro used to start a block.\n\n\n    Name\n\nBLOCK \u00f9 Structured macro used to start a block.\n\n\n    Syntax\n\n|BLOCK [NAME=name][,TYPE=type][,ENVIRON=environ][,keyword[,keyword,...]] |\n\n\n    Operands\n\nname\n    Name of block. This operand is required for program and subroutine\n    blocks.\ntype\n    Type of block. This keyword specifies the type of block. If this\n    keyword is not specified, INLINE is assumed.\n    The types of blocks are ERREXIT, INLINE, PROGRAM, and SUBROUTINE.\n    An ERREXIT block contains code to be executed when an ERREXIT macro\n    is executed. This type of block must be coded at block level zero.\n    INLINE blocks are used to group a section of code into a logical\n    structure.\n    SUBROUTINE blocks contain code that is executed when a CALLSUB macro\n    specifying its name is executed. A subroutine block must be coded at\n    block level zero.\n    A PROGRAM block is used to contain the main code body of a program.\n    Program blocks can be specified only at block level zero.\nenviron\n    Program environment. This keyword specifies the type of environment\n    the program runs in. The currently supported environments are: OS\n    for OS linkage, DC for IDMS/DC and PLI for the execution environment\n    of the PL/I Optimizing Compiler. This keyword defaults to OS.\nkeyword\n    Indicates linkage and initialization to be done. Using these\n    keywords causes the associated ENDBLK to do the reverse linkage. The\n    keywords allowed depend on the type of block being defined. (See the\n    sections on the individual block types for more information on the\n    keywords allowed.)\n\n\n    Errors\n\n  *\n\n    Too many parameters specified on PL keyword\n\n  *\n\n    INLINE BLOCK must be contained within PROGRAM, SUBROUTINE, or\n    ERREXIT BLOCK\n\n  *\n\n    PROGRAM BLOCK must be at block nesting level 1\n\n  *\n\n    PROGRAM BLOCK requires NAME keyword\n\n  *\n\n    SUBROUTINE BLOCK requires NAME keyword\n\n  *\n\n    ENVIRON must be less than 5 alphanumeric characters\n\n  *\n\n    SUBROUTINE BLOCK must follow ENDBLK for PROGRAM BLOCK and be at\n    block level zero\n\n  *\n\n    ERREXIT BLOCK must follow ENDBLK for PROGRAM BLOCK and be at block\n    level zero\n\n  *\n\n    Maximum nesting level for blocks is 20\n\n  *\n\n    Invalid BLOCK type <type>\n\n\n    BLOCK TYPE=ERREXIT\n\nThe errexit block surrounds code to be performed after a fatal error is\ndetected. It is invoked by the ERREXIT macro. The ENDBLK macro\nassociated with an errexit block generates a branch to the ENDBLK code\nof the most recent program block, and allows you to specify the return\ncode with which the program terminates. This return code overrides any\nreturn code that appears on the program block's ENDBLK macro. One\nerrexit block without a name keyword can be associated with a program\nblock, in which case, a generated name is used. Therefore, if you have\nonly one errexit block, the NAME parameter can be left off of the BLOCK\nand the ERREXIT macros and a name are automatically generated.\n\n\n      Keywords\n\nAMODE= 24 | 31 | ANY\n    Specifies the addressing mode the block runs in. Amode switching\n    code is generated if required. The default is AMODE=ANY, which\n    specifies that the errexit runs in the amode in effect when it is\n    invoked.\nPL= tag|(tag,num)\n    Defines the default place to build parameter lists generated within\n    this block. Tag defines the label for the start of parameter list\n    storage, and num is a self-defining term that represents the maximum\n    number of parameter list entries that the storage at tag can hold.\n    This must be large enough to contain the largest parameter list in\n    the block. If num is not specified, the tag must have a length\n    modifier that is a self-defining term.\nSAVE= (r1[,r2],address)\n    Requests that the register(s) named should be saved and restored.\n    The address operand provides the address of a place to save the\n    register(s). If more than one register is specified, a STM\n    instruction is generated: therefore, specification of something like\n    \u00f4R14,R12,address\u00f6 is valid. The SAVE keyword can be used on errexit\n    blocks to preserve some or all registers without requiring a\n    standard OS save area. The SAVE operand is not valid on program\n    blocks, and should not be confused with OPTIONS=SAVE.\n\n\n      Errors\n\n  *\n\n    Refer to Appendix B, <##interr>/Internal Macros Error Messages/\n    <##interr>for macros that start with \u00f4##EP\u00f6.\n\n\n    BLOCK TYPE=INLINE\n\nThe INLINE block is used to surround a section of code to be treated as\na single unit. With the inline block, AMODE can be changed at the\nbeginning of the block and restored at the end. Registers can also be\nsaved and restored. The inline block also allows the user to define a\nlogical group of code that can be exited with the LEAVE macro.\n\n\n      Keywords\n\nAMODE= 24 | 31 | ANY\n    Specifies the addressing mode the block runs in. Amode switching\n    code is generated if required. The default is AMODE=ANY, which\n    specifies that the block runs in the amode in effect when it is entered.\nPL= tag|(tag,num)\n    Defines the default place to build parameter lists generated within\n    this block. Tag defines the label for the start of parameter list\n    storage, and num is a self-defining term that represents the maximum\n    number of parameter list entries that the storage at tag can hold.\n    This must be large enough to contain the largest parameter list in\n    the block. If num is not specified, the tag must have a length\n    modifier that is a self-defining term.\nSAVE= (r1[,r2],address)\n    Requests that the register(s) named should be saved and restored.\n    The address operand provides the address of a place to save the\n    register(s). If more than one register is specified, a STM\n    instruction is generated: therefore, specification of something like\n    \u00f4R14,R12,address\u00f6 is valid. The SAVE keyword can be used on inline\n    blocks to preserve some or all registers without requiring a\n    standard OS save area. The SAVE operand is not valid on program\n    blocks, and should not be confused with OPTIONS=SAVE.\n\n\n      Errors\n\n  *\n\n    Refer to Appendix B, <##interr>/Internal Macros Error Messages/\n    <##interr>for macros that start with \u00f4##IP\u00f6.\n\n\n    BLOCK TYPE=PROGRAM,ENVIRON=DC\n\nThe IDMS/DC program block, like the OS program block, surrounds the main\nbody of executable code. Options on the IDMS/DC program block determine\nwhat type of IDMS/DC linkage is to be used, how IDMS/DC macros are to be\nexpanded, and end-of-task information for application programs (for\nexample, NEXT TASK CODE), as well as reentrancy, register equating, and\nPWA allocation.\n\n\n      Keywords\n\nOPTIONS= option | (option[,option[,...]])\n    *Regular Options: *These are the options for individually\n    controlling each of the BLOCK macro's functions. The default value\n    for each of these options is the negative form (NOCSECT, NOREGEQU,\n    etc.), but note that many of the options are included in all of the\n    super options.\n\nCSECT|NOCSECT\n    Indicates that a CSECT card is generated with the name of the block.\n    If NOCSECT is specified, you must code a USING name,R15 before the\n    BLOCK macro if the LOADBASE option is in effect.\nID|NOID\n    Specifies that a DC should be generated at the start of the program,\n    containing the program block name, assembly date, and assembly time.\n    If the CPYRGHT keyword is specified, it is also DC'ed.\nLOCTR|NOLOCTR\n    Cause the macros to generate LOCTR instructions for the program,\n    subroutines, and static data areas to ensure proper placement. This\n    option must be selected if the program is using PSDs and SSDs or\n    LONG and LOADBASE.\nLONG|NOLONG\n    Indicates that CALLSUBs generate a BALR (or equivalent) instead of a\n    BAL to allow subroutines to establish a base register. This option\n    is required if the program has any subroutines that use LOADBASE.\n    The LOCTR option is required if this option is specified.\nMODE|NOMODE\n    Enables generation of AMODE and RMODE cards.\nPWA|NOPWA\n    Specifies that this program has a PWA. The PWA is acquired using\n    #GETSTG and freed using #FREESTG if option RENT is in effect. If the\n    NORENT option is in effect, the ENDPWA macro generates a DS\n    instruction to reserve storage for the PWA within the CSECT. The PWA\n    and ENDPWA macros should be used to define the limits of the PWA.\n    This option is required if the program has subroutines that use SWAs.\nREGEQU|NOREGEQU\n    Specifies that register equates are to be generated.\nRENT|NORENT\n    Specifies that the program is reentrant and that the macros generate\n    reentrant code wherever necessary.\nRTNR0|NORTNR0\n    Indicates that register zero is passed back to the caller. Use the\n    R0= keyword on the ENDBLK macro for the program block and error\n    exits to specify the value to be returned. This is only valid with\n    OPTIONS=SYSTEM, unless the routine is handling its own delinkage and\n    needs a value in R0 from within the program block.\nRTNR1|NORTNR1\n    Indicates that register one is passed back to the caller. Use the\n    R1= keyword on the ENDBLK macro for the program block and error\n    exits to specify the value to be returned. This is only valid with\n    OPTIONS=SYSTEM, unless the routine is handling its own delinkage and\n    needs a value in R1 from within the program block.\nVL|NOVL\n    Forces all generated parameter lists (PLIST, CALLSUB, CALLX) to\n    default to VL unless overridden.\nXA|NOXA\n    Generates support for linkage using XA instructions. If neither XA\n    or 370 is specified, 370 is the default.\n370|NO370\n    Generates support for linkage using 370 instructions. If OPTIONS=XA\n    is also specified, OPTIONS=370 causes generation of code that\n    determines whether the program is running under MVS/XA or not, and\n    causes branches around XA-dependent instructions generated by the\n    Structured Macros such as the amode switches.\nDCMACPRT/NODCMACPRT\n    Provides support for the #MOPT MACPRNT=ON/OFF operand for those\n    IDMS/DC macros that make use of it.\nDCPRGPRT/NODCPRGPRT\n    Provides support for the #MOPT PRGPRNT=ON/OFF operand for those\n    IDMS/DC macros that make use of it.\nSYSTEM or (SYSTEM,module#) / NOSYSTEM\n    Presence of the SYSTEM keyword causes IDMS/DC system-mode linkage to\n    be generated.\n#START/NO#START\n    Causes a #START macro to be generated by the BLOCK macro. Valid only\n    with the SYSTEM option.\n#RTN/NO#RTN\n    Causes a #RTN macro to be generated by the ENDBLK macro. Valid only\n    with the SYSTEM option.\n#RETURN/NO#RETURN\n    Causes ENDBLK to generate a #RETURN macro. Valid only with NOSYSTEM\n    option.\nGETSTK\n    Causes BLOCK to generate a #GETSTK instead of #GETSTG. Valid only\n    with SYSTEM and PWA options.\n(NXTTASK,taskcode)\n    Specifies the IDMS/DC task code that should be initiated next. Valid\n    only with #RETURN option.\n(TYPE,returntype)\n    Specifies the type of program termination (NORMAL, ABORT, or\n    CONTINUE). This option is generally used only with IDMS/DC #STAE\n    routines. Valid only with #RETURN option.\n(RESINT,interval)\n    Specifies the resource timeout interval for this task termination.\n    Valid only with #RETURN option.\n(RESPGM,pgmname)\n    Specifies a resource timeout handler program that is called if the\n    resource timeout interval is specified and reached. Valid only with\n    #RETURN option.\n(EP,entrypoint)\n    Specifies an entry point name (other than the CSECT name) to be\n    included on the #START macro. If this option is not coded, the entry\n    point name is assumed to be \u00f4#ST\u00f6 followed by the internal program\n    block number (usually 1). Valid only with SYSTEM and #START options.\n\n    If a type of regular option is specified more than once, the last\n    occurrence (ie. PWA or NOPWA) is used.\n    *Super Options: *These are provided as combinations of the most\n    popular options. If one or more options is not needed, it should be\n    specified as desired following the super option's specification.\n    *NORENT - selects options CSECT, ID, LOCTR, MODE, REGEQU, VL, and\n    #RETURN.\n    *NORENTSYS - selects options CSECT, ID, LOCTR, MODE, REGEQU, VL,\n    #START, #RTN, and SYSTEM.\n    *RENT - selects options CSECT, ID, LOCTR, MODE, REGEQU, RENT, VL,\n    and #RETURN.\n    *RENTSYS - selects options CSECT, ID, LOCTR, MODE, REGEQU, RENT, VL,\n    #START, #RTN, and SYSTEM.\n    *PWA - selects options CSECT, ID, LOCTR, MODE, PWA, REGEQU, RENT,\n    VL, and #RETURN.\n    *PWASYS - selects options CSECT, ID, LOCTR, MODE, PWA, REGEQU, RENT,\n    VL, #START, #RTN, and SYSTEM.\nAMODE= 24 | 31 | ANY\n    Specifies the addressing mode. This keyword causes an AMODE card to\n    be generated by the assembler with the specified amode. If this\n    keyword is not specified, no AMODE card is generated.\nBASEREG= reg | (reg[,reg[,...]])\n    Specifies the register or registers to be used for program\n    addressability. The register cannot be R0, R1, R14, or R15. BASEREG\n    defaults to R13 if the NORENT option is in effect and the SVAREA\n    keyword is not specified; otherwise, it defaults to R12.\nCPYRGHT= notice\n    Specifies a quoted string that is DC'ed if the ID option is in effect.\nPL= tag|(tag,num)\n    Defines the default place to build parameter lists generated within\n    this block. Tag defines the label for the start of parameter list\n    storage and num is a self-defining term that represents the maximum\n    number of parameter list entries that the storage at tag can hold.\n    This must be large enough to contain the largest parameter list in\n    the block. If num is not specified, the tag must have a length\n    modifier that is a self-defining term.\nPWAREG= R11 | (R11,[reg[,...]])\n    Specifies the register or registers to be used for PWA addressability.\nRMODE= 24 | ANY\n    Specifies the residency mode.\nR1SAVE= register\n    The number of the register that register 1 is copied to. Program\n    linkage (notably the use of #GETSTG or #GETSTK) sometimes destroys\n    the contents of register 1 from entry. This keyword is useful for\n    copying the contents of the parameter register to another register\n    before it is destroyed.\nSMWA= address\n    Provides the address of a Structured Macro Workarea (SMWA). The SMWA\n    is a doubleword of storage that is used to preserve addressing mode\n    and a work register while performing AMODE switching. The SMWA\n    keyword is valid only on a PROGRAM block, and is required when both\n    the 370 and XA options are in effect, or when AMODE=ANY is\n    specified. The SMWA can reside in the PWA. If the program has a PWA,\n    space for the SMWA is automatically allocated in the PWA, and this\n    keyword is not necessary.\nSUBOPTS= (option,...)\n    Can be used to specify a default set of options for all subroutine\n    blocks associated with this program. Any options specified on\n    subsequent subroutine blocks are in addition to these options. For a\n    description of the valid subroutine block options, see the section\n    called \u00f4BLOCK TYPE=SUBROUTINE\u00f6 <##subblk>.\n\n\n      Errors\n\n  *\n\n    Refer to ##PPDC in Appendix B, <##interr>/Internal Macros Error\n    Messages/ <##interr>.\n\n\n    BLOCK TYPE=PROGRAM,ENVIRON=OS\n\nThe program block surrounds the main body of executable code. It can\nperform a wide variety of linkage types and initializations, including\nstandard save area linkage, register equates, automatic allocation of\nProgram Work Area, and Dynamic Storage Management. If the program block\nkeywords and options are not used to establish linkage, the BLOCK macro\ncall should follow linkage code and the associated ENDBLK macro should\nbe followed by the reverse linkage.\n\n\n      Keywords\n\nOPTIONS= option | (option[,option[,...]])\n    *Regular Options: *These are the options for individually\n    controlling each of the BLOCK macro's functions. The default value\n    for each of these options is the negative form (NOBR14, NOCSECT,\n    etc.) but note that many of the options are included in all of the\n    super options.\n\nBR14|NOBR14\n    Determines whether a program block's ENDBLK macro generates a BR 14\n    instruction. The default is NOBR14, but note that BR14 is included\n    in each super option.\nCODEBASE|NOCODEBASE\n    CODEBASE indicates that the BASEREG= gives addressability to the\n    code and static data. NOCODEBASE specifies that BASEREG= only gives\n    addressability to the static data. CODEBASE is the default if the\n    IBM macro SYSSTATE has not been issued or if SYSSTATE has been\n    issued with ARCHLVL=0 specified. Subroutine blocks can also specify\n    CODEBASE/NOCODEBASE. They default to the setting for the program block.\nCLEARPWA|NOCLEARPWA\n    Specifies whether the PWA is cleared to zeros.\nCLRDEBUG|NOCLRDEBUG\n    Specifies whether the debug area in the ESV is cleared at entry to\n    this program block. CLRDEBUG requires the ESV option.\nCSECT|NOCSECT\n    Indicates that a CSECT card is generated with the name of the block\n    along with a USING name,R15. If NOCSECT is specified, you must code\n    a USING name,R15 before the BLOCK macro if the LOADBASE option is in\n    effect.\nDYN|NODYN\n    Indicates that Dynamic Storage Management is used. With this option,\n    PWA and SWA storage is allocated from the dynamic storage area. When\n    the DYN option is on, register 11 is used as a base for SWAs and\n    cannot be used by the programmer.\nERRADDR|NOERRADDR\n    Indicates that the ERREXIT macro uses a BAS instruction when\n    branching to an errexit block. If a code is specified, it is defined\n    in the halfword immediately following the BAS instruction. The\n    affect of the ERRADDR option is that at entry to an errexit block,\n    the CODEREG has the address of the invoking ERREXIT macro. If\n    NOERRADDR is specified, a BCC instruction is generated by the\n    ERREXIT macro to invoke an errexit block and the CODEREG is loaded\n    with the code itself.\n(ESV,[parmnum],[esvtag])|NOESV\n    Specifies that an Environment Support Vector is present. The macros\n    use the ESV to locate routines to do all environment dependent\n    services. Parameter /|parmnum|/defaults to 3 and is the number of\n    the parameter at input to the program block that contains a pointer\n    to the ESV. If the FNCODE option is in effect, this parameter is\n    only referenced on the \u00f4startup\u00f6 call. Parameter /|esvtag|/defaults\n    to PWAAESV and is the tag generated in the PWA for a word into which\n    the program block macro stores the address of the ESV. The ESV\n    option requires the PWA and RENT options. The NOESV option indicates\n    that the macros call OS services directly.\n(FNCODE,[parmnum],[startcode])|NOFNCODE\n    Specifies that a function code is passed as a parameter to this\n    program. Parameter /|parmnum|/defaults to 2 and is the number of the\n    parameter at input to the program block that contains a pointer to\n    the function code. Parameter /|startcode|/defaults to AL4(1) and is\n    the value of the startup function code. This parameter can be any\n    form that is valid to the right of a DC instruction. This option is\n    ignored if option REUSPWA is not in effect.\nID|NOID\n    Specifies that a DC should be generated at the start of the program,\n    containing the program block name, assembly date, and assembly time.\n    If the CPYRGHT keyword is specified, it is also DC'ed.\nLOADBASE|NOLOADBASE\n    Specifies that program base registers are loaded. LOADBASE is\n    assumed if the BASEREG= keyword is specified.\nLOCTR|NOLOCTR\n    Cause the macros to generate LOCTR instructions for the program,\n    subroutines, and static data areas to insure proper placement. This\n    option must be selected if the program is using PSDs and SSDs or\n    LONG and LOADBASE.\nLONG|NOLONG\n    Indicates that CALLSUBs generate a BALR (or equivalent) instead of a\n    BAL to allow subroutines to establish a base register. This option\n    is required if the program has any subroutines that use LOADBASE.\n    The LOCTR option is required if this option is specified.\nMAIN|NOMAIN\n    Indicates that this is a main program. and dynamic storage is always\n    obtained if Dynamic Storage Management is being used. If NOMAIN is\n    specified, the storage already allocated by the calling program is\n    used if it is sufficient, otherwise extra storage is obtained.\nMODE|NOMODE\n    Enables generation of AMODE and RMODE cards.\nOPTSTOR|NOOPSTOR\n    Turns on storage optimization to reduce the size of the load module.\n    If your program has a large number of internal subroutines, this can\n    save you a significant amount of storage, but slows down subroutine\n    calls slightly. This option in only valid for programs with the DYN\n    option.\n(PARMS[,options...])|NOPARMS\n    Indicates that this program has an input parameter list and\n    therefore register one should be preserved during program linkage.\n    This option is also used to specify options for handling the input\n    parameter list. Any parameter option not specified takes on its\n    default, \u00f4NO\u00f6 state. The available parameter options are:\n\nCOPY|NOCOPY\n    Specifies that the input parameter list is copied to the PWA. An\n    area large enough to contain the entire list is reserved and the\n    entire parameter list is copied here at the start of the program.\n    Any missing parameters (including those left off the end of a VL\n    parameter list) contain an address of zero. Use of this option\n    requires the PWA option.\n(COPYERROR,errexit[,exitcode])|NOCOPYERROR\n    Identifies an error exit and optionally an exit code that is invoked\n    if the input parameter list overruns the space reserved for it in\n    the PWA during a (PARMS,COPY,VL) operation. This suboption is\n    required when (PARMS,COPY,VL) is specified. If specified, exitcode\n    is passed in the default code register R14 and must follow the same\n    restrictions as CODE= on the ERREXIT macro. If errexit is specified\n    as a null string, e.g. (COPYERROR,), the unnamed error exit for this\n    program block is invoked in case of a copy failure.\n(COUNT,tag)|NOCOUNT\n    Specifies that a count of the parameters actually specified in the\n    input parameter list be made and that the result be placed in the\n    fullword at location tag. The use of this option requires the VL\n    suboption of PARMS.\nPREFIX|NOPREFIX\n    Specifies that the tags listed in the PARMS keyword for this block\n    are prefixed with the &PPL symbol before placing them within the\n    PPL. This gives all the tags within the PPL a unique prefix so there\n    are not any collisions with tags within other structures. If this\n    option is specified, any references to tags within the PPL from the\n    program must be coded as |&PPL.||/tag/|.\n(USING,reg)|NOUSING\n    Specifies that reg should be used to establish addressibility on the\n    input parameter list. The specified register is loaded with the\n    contents of register one unless the COPY option is also specified.\n    In this case, reg is loaded with the address of the input parameter\n    list storage in the PWA.\nVL|NOVL\n    Specifies that the input parameter list is a variable length (VL)\n    parameter list. For VL parameter lists, the COPY option loops\n    through the parameters instead of doing a block copy. If the COPY\n    option is being used, the high order bit in the last item of the\n    copied parameter list is cleared.\n\nPWA|NOPWA\n    Specifies that this program has a PWA. The PWA is either GETMAINed\n    or obtained from dynamic storage if option RENT is in effect. If the\n    NORENT option is in effect, the ENDPWA macro generates a DS\n    instruction to reserve storage for the PWA within the CSECT. The PWA\n    and ENDPWA macros should be used to define the limits of the PWA.\n    This option is required if the program has subroutines that use SWAs.\nREGEQU|NOREGEQU\n    Specifies that register equates are to be generated.\nRENT|NORENT\n    Specifies that the program is reentrant and that the macros generate\n    reentrant code wherever necessary.\n(REUSPWA,[parmnum])|NOREUSPWA\n    Specifies that the same PWA storage is used on multiple calls to the\n    program block. Parameter /|parmnum|/defaults to 1 and is the number\n    of the parameter at input to the program block that contains a\n    pointer to the PWA anchor. If the FNCODE option is in effect, the\n    PWA is obtained and its address stored in the anchor on the\n    \u00f4startup\u00f6 call. If NOFNCODE is in effect, the PWA is obtained and\n    its address stored when the anchor at entry contains binary zeros.\n    The PWA is freed by the ENDBLK macro when the SMCTRL macro with\n    FREEPWA=YES specified has been executed. REUSPWA requires the PWA,\n    RENT and SAVE options. NOREUSPWA indicates that the PWA should be\n    obtained and freed each time the program block is called.\nRTNR0|NORTNR0\n    Indicates that register zero is passed back to the caller. Use the\n    R0= keyword on the ENDBLK macro for the program block and error\n    exits to specify the value to be returned.\nRTNR1|NORTNR1\n    Indicates that register one is passed back to the caller. Use the\n    R1= keyword on the ENDBLK macro for the program block and error\n    exits to specify the value to be returned.\nSAVE|NOSAVE\n    Save R14-R12 in the standard save area pointed to by register 13.\nSAVEAREA|NOSAVEAREA\n    Obtain a save area, do forward and backward linking, and point R13\n    to new save area. If NORENT is specified, the save area is obtained\n    inline. If RENT is specified, the save area is GETMAINed or obtained\n    from the PWA. SAVEAREA is assumed if the PWA option is specified.\nVL|NOVL\n    Forces all generated parameter lists (PLIST, CALLSUB, CALLX) to\n    default to VL unless overridden.\nXA|NOXA\n    Generates support for linkage using XA instructions. If neither XA\n    or 370 is specified, 370 is the default.\n370|NO370\n    Generates support for linkage using 370 instructions. If OPTIONS=XA\n    is also specified, OPTIONS=370 causes generation of code that\n    determines whether the program is running under MVS/XA or not, and\n    causes branches around XA-dependent instructions generated by the\n    Structured Macros such as the amode switches.\n\n    If a type of regular option is specified more than once, the last\n    occurrence (ie. PWA or NOPWA) is used.\n    *Super options. *These are provided as combinations of the most\n    popular options. If one or more options is not needed, it should be\n    specified as desired following the super option's specification.\n    *NORENT - selects options NOPWA, SAVE, BR14, SAVEAREA, NORENT, ID,\n    CSECT, REGEQU, LOADBASE, MODE, VL, NODYN, NOMAIN, NOLONG, LOCTR,\n    NORTNR0, NORTNR1, NOREUSPWA, NOFNCODE, NOESV, NOERRADDR, and NOCLRDEBUG.\n    *RENT - selects options NOPWA, SAVE, BR14, SAVEAREA, RENT, ID,\n    CSECT, REGEQU, LOADBASE, MODE, VL, NODYN, NOMAIN, NOLONG, LOCTR,\n    NORTNR0, NORTNR1, NOREUSPWA, NOFNCODE, NOESV, NOERRADDR, and NOCLRDEBUG.\n    *PWA - selects options PWA, CLEARPWA, SAVE, BR14, SAVEAREA, RENT,\n    ID, CSECT, REGEQU, LOADBASE, MODE, VL, NODYN, NOMAIN, NOLONG, LOCTR,\n    NORTNR0, NORTNR1, NOREUSPWA, NOFNCODE, NOESV, NOERRADDR, and NOCLRDEBUG.\n    *MAIN - selects options PWA, CLEARPWA, SAVE, BR14, SAVEAREA, RENT,\n    ID, CSECT, REGEQU, LOADBASE, MODE, VL, DYN, MAIN, NOLONG, LOCTR,\n    NORTNR0, NORTNR1, NOREUSPWA, NOFNCODE, NOESV, NOERRADDR, and NOCLRDEBUG.\n    *NOMAIN - selects options PWA, CLEARPWA, SAVE, BR14, SAVEAREA, RENT,\n    ID, CSECT, REGEQU, LOADBASE, MODE, VL, DYN, NOMAIN, NOLONG, LOCTR,\n    NORTNR0, NORTNR1, NOREUSPWA, NOFNCODE, NOESV, NOERRADDR, and NOCLRDEBUG.\n    *SRVPRC - selects options PWA, CLEARPWA, SAVE, BR14, SAVEAREA, RENT,\n    ID, CSECT, REGEQU, LOADBASE, MODE, XA, NO370, VL, NODYN, NOMAIN,\n    NOLONG, LOCTR, NORTNR0, NORTNR1, (REUSPWA,1), (FNCODE,2,AL4(1)),\n    (ESV,3,PWAAESV), ERRADDR, and CLRDEBUG.\nAMODE= 24 | 31 | ANY\n    Specifies the addressing mode. This keyword causes an AMODE card to\n    be generated by the assembler with the specified amode. If this\n    keyword is not specified, no AMODE card is generated.\nBASEREG= reg | (reg[,reg[,...]])\n    Specifies the register or registers to be used for program\n    addressability. The register cannot be R0, R1, R14, or R15. BASEREG\n    defaults to R13 if the NORENT option is in effect and the SVAREA\n    keyword is not specified; otherwise, it defaults to R12.\nCPYRGHT= notice\n    Specifies a quoted string that is DC'ed if the ID option is in effect.\nDYNERR= name\n    Specifies the name of the dynamic storage error exit name. If DYNERR\n    is not specified and a dynamic storage error occurs, an ABEND 0C1\n    occurs.\nDYNSIZE= [+|-]size\n    Defines the amount of storage to be added to the PWA to be used for\n    additional PWAs and SWAs. A \u00f4+\u00f6 or \u00f4-\u00f6 can be specified to indicate\n    that the size is added or subtracted from the size calculated by the\n    macros. If this keyword is not specified, the size calculated by the\n    macros is used.\nPARMMAP=(dsect[,len])\n    Defines the Dsect used to map the input parameter list and its\n    length. This keyword can be used if the input parameter list is too\n    complicated to describe with the PARMS keyword or if the input\n    parameter list is a standard form described by an existing Dsect.\n    /|len|/is only required if COPY is specified with the PARMS option.\n    This keyword is mutually exclusive with the PARMS keyword.\nPARMS=(tag[,tag[,...]])\n    Defines the tags used to map the input parameter list. These are\n    used to generate the Program Parameter List (PPL) Dsect or to map\n    the input parameter list storage in the PWA (if parameter option\n    COPY was specified). This also defines the size of the input\n    parameter list for the COPY option. This keyword is mutually\n    exclusive with the PARMMAP keyword.\nPL= tag|(tag,num)\n    Defines the default place to build parameter lists generated within\n    this block. /|Tag|/defines the label for the start of parameter list\n    storage and /|num|/is a self-defining term that represents the\n    maximum number of parameter list entries that the storage at\n    /|tag|/holds. This must be large enough to contain the largest\n    parameter list in the block. If num is not specified, the tag must\n    have a length modifier that is a self-defining term.\nPWAREG= R13 | (R13,[reg[,...]])\n    Specifies the register or registers to be used for PWA addressability.\nPWASP= number | symbol\n    Specifies the number of the subpool in which the PWA is to be\n    GETMAINed. PWASP can only be specified on PROGRAM blocks with PWA\n    included among the OPTIONS. The default subpool is zero.\nRMODE= 24 | ANY\n    Specifies the residency mode.\nR1SAVE= register\n    The number of the register that register 1 is copied to. Program\n    linkage sometimes destroys the contents of register 1 from entry.\n    This keyword is useful for copying the contents of the parameter\n    register to another register before it is destroyed.\nSMWA= address\n    Provides the address of a Structured Macro Workarea (SMWA). The SMWA\n    is a doubleword of storage that is used to preserve addressing mode\n    and a work register while performing AMODE switching. The SMWA\n    keyword is valid only on a PROGRAM block, and is required when both\n    the 370 and XA options are in effect, or when AMODE=ANY is\n    specified. The SMWA can reside in the PWA. If the program has a PWA,\n    space for the SMWA is automatically allocated in the PWA, and this\n    keyword is not necessary.\nSUBOPTS= (option,...)\n    Can be used to specify a default set of options for all subroutine\n    blocks associated with this program. Any options specified on\n    subsequent subroutine blocks are in addition to these options. For a\n    description of the valid subroutine block options, see the section\n    called \u00f4BLOCK TYPE=SUBROUTINE\u00f6 <##subblk>.\nSVAREA= tag\n    Can be specified if the NORENT option is in effect and specifies a\n    relocatable tag that is used to address the program save area.\n\n\n      Errors\n\n  *\n\n    Refer to ##PPOS in Appendix B, <##interr>/Internal Macros Error\n    Messages/ <##interr>.\n\n\n    BLOCK TYPE=PROGRAM,ENVIRON=PLI\n\nThe program block surrounds the main body of executable code. If\nENVIRON=PLI is specified, options can be specified to do various\ninitialization and termination functions specific to the OS PL/I\nOptimizing Compiler's execution time environment including obtaining and\nfreeing a DSA, doing register equates and automatically defining a DSA\nwithin the Program Work Area.\n\n\n      Keywords\n\nOPTIONS= option | (option[,option[,...]])\n    *Regular Options: *These are the options for individually\n    controlling each of the BLOCK macro's functions. The default value\n    for each of these options is the negative form (NOREGEQU, NOCSECT,\n    etc.) but note that many of the options are included in all of the\n    super options.\n\nCLEARPWA|NOCLEARPWA\n    Specifies whether the PWA is cleared to zeros.\nID|NOID\n    Specifies that a DC is generated at the start of the program, to\n    contain the program block name, assembly date, and assembly time. If\n    the CPYRGHT keyword is specified, it is also DC'ed.\nLOCTR|NOLOCTR\n    Cause the macros to generate LOCTR instructions for the program,\n    subroutines, and static data areas to insure proper placement. This\n    option must be selected if the program is using PSDs and SSDs or\n    LONG and LOADBASE.\nLONG|NOLONG\n    Indicates that CALLSUBs generate a BALR (or equivalent) instead of a\n    BAL to allow subroutines to establish a base register. This option\n    is required if the program has any subroutines that use LOADBASE.\n    The LOCTR option is required if this option is specified.\nMODE|NOMODE\n    Enables generation of AMODE and RMODE cards.\nPWA\n    PWA can not be specified if ENVIRON=PLI is specified, but it is\n    implied. ENVIRON=PLI programs have a PWA and can take advantage of\n    all of a PWA's features. The PWA is obtained in the same manner as\n    and has the same format as a Dynamic Storage Area that is obtained\n    by PL/I. The PWA and ENDPWA macros should be used to define the\n    limits of the PWA.\nREGEQU|NOREGEQU\n    Specifies that register equates are generated.\nVL|NOVL\n    Forces all generated parameter lists (PLIST, CALLSUB, CALLX) to\n    default to VL unless overridden.\nXA|NOXA\n    Generates support for linkage using XA instructions. If neither XA\n    or 370 is specified, 370 is the default.\n370|NO370\n    Generates support for linkage using 370 instructions. If OPTIONS=XA\n    is also specified, OPTIONS=370 causes generation of code that\n    determines whether the program is running under MVS/XA or not, and\n    causes branches around XA-dependent instructions, such as the amode\n    switches, generated by the Structured Macros.\n\n    If a type of regular option is specified more than once, the last\n    occurrence (ie. REGEQU or NOREGEQU) is used.\n    *Super Option: *This is provided as a combination of the most\n    popular options. If one or more options is not needed, it should be\n    specified as desired following the super option's specification.\n    *STDPLI - selects options CLEARPWA, ID, REGEQU, MODE, NOXA, NO370,\n    VL, LOCTR, NOLONG.\nBASEREG= R11 | (R11[,reg[,...]])\n    Specifies the register or registers to be used for program\n    addressability. The first register must be R11 and the other\n    registers cannot be R0, R1, R12, R14, or R15. BASEREG defaults to R11.\nCPYRGHT= notice\n    Specifies a quoted string that is DC'ed if the ID option is in effect.\nPL= tag|(tag,num)\n    Defines the default place to build parameter lists generated within\n    this block. If this keyword is not specified, the correct amount of\n    storage is automatically reserved and used in the PWA.\n    /|Tag|/defines the label for the start of parameter list storage and\n    /|num|/is a self-defining term that represents the maximum number of\n    parameter list entries that the storage at tag can hold. This must\n    be large enough to contain the largest parameter list in the block.\n    If num is not specified, the tag must have a length modifier that is\n    a self-defining term.\nPWAREG= R13 | (R13,[reg[,...]])\n    Specifies the register or registers to be used for PWA addressability.\nRMODE= 24 | ANY\n    Specifies the residency mode.\nSUBOPTS= (option,...)\n    Can be used to specify a default set of options for all subroutine\n    blocks associated with this program. Any options specified on\n    subsequent subroutine blocks are in addition to these options. See\n    the section called \u00f4BLOCK TYPE=SUBROUTINE\u00f6 <##subblk> for a\n    description of the valid subroutine block options.\n\n\n      Errors\n\n  *\n\n    Refer to ##PPPLI in Appendix B, <##interr>/Internal Macros Error\n    Messages/ <##interr>.\n\n\n    BLOCK TYPE=SUBROUTINE\n\nThe subroutine block contains code that is reached via the CALLSUB\nmacro. This block must be at block level zero. Subroutine blocks are\nmeant for internal subroutines, not for a called program that follows\nstandard OS linkage conventions.\n\n\n      Keywords\n\nOPTIONS= option | (option[,option[,...]])\n    *Regular options. *These are the options for individually\n    controlling each of the BLOCK macro's functions. The default value\n    for each of these options is the negative form (NOSWA, NOCUSTOM, etc.).\n\nCODEBASE|NOCODEBASE\n    CODEBASE indicates that the BASEREG= gives addressability to the\n    code and static data. NOCODEBASE specifies that BASEREG= gives\n    addressability to only the static data. CODEBASE defaults to the\n    setting for the program block.\nCUSTOM|NOCUSTOM\n    Specifies that the return instructions at the end of the subroutine\n    block are not generated. This option should be used if you are going\n    to handle all of the linkage details yourself. If this option is\n    specified, no other option or keywords on the subroutine block can\n    be specified.\nLOADBASE|NOLOADBASE\n    Indicates that a base register (or registers) should be loaded to\n    establish separate addressability to this subroutine. The program\n    base register is left intact providing addressability to the\n    program's static data.\n(PARMS[,options...])|NOPARMS\n    Indicates that this subroutine has an input parameter list and\n    therefore register one should be preserved during subroutine\n    linkage. This option is also used to specify options for handling\n    the input parameter list. Any parameter option not specified will\n    take on its default, \u00f4NO\u00f6 state. The available parameter options are:\n\nCOPY|NOCOPY\n    Specifies that the input parameter list should be copied to the SWA.\n    An area large enough to contain the entire list is reserved and the\n    entire parameter list is copied here at the start of the subroutine.\n    Any missing parameters (including those left off the end of a VL\n    parameter list) contain an address of zero. Use of this option\n    requires the SWA option.\nPREFIX|NOPREFIX\n    Specifies that the tags listed in the PARMS keyword for this block\n    should be prefixed with the &SPL symbol before placing them within\n    the SPL. This gives all the tags within the SPL a unique prefix so\n    there are no collisions with tags within other structures. If this\n    option is specified, any references to tags within the SPL from the\n    subroutine must be coded as &SPL./|tag|/or &P./|tag|/.\n(USING,reg)|NOUSING\n    Specifies that /|reg|/should be used to establish addressibility on\n    the input parameter list. The specified register is loaded with the\n    contents of register one unless the COPY option is also specified.\n    In this case, /|reg|/is loaded with the address of the input\n    parameter list storage in the SWA.\nVL|NOVL\n    Specifies that the input parameter list is a variable length (VL)\n    parameter list. For VL parameter lists, the COPY option loops\n    through the parameters instead of doing a block copy. If the COPY\n    option is being used, the high order bit in the last item of the\n    copied parameter list is cleared.\n\nSAVEUSING|NOSAVEUSING\n    Specifies that a PUSH USING be done before the subroutine and a POP\n    USING be done after to save and restore the USING environment around\n    the subroutine. This isolates any changes made to the USING\n    environment in the subroutine from the rest of the program.\nSWA|NOSWA\n    Specifies that this subroutine has an SWA. The PWA option must be\n    specified on the program block options to use this option. The SWA\n    is obtained out of dynamic storage if the DYN option is being used,\n    otherwise, it is allocated within the program's PWA. R0-R14 are\n    automatically saved and restored if this option is specified. This\n    option cannot be used with the SAVE= keyword.\n\n    *Super options. *These are provided as combinations of the most\n    popular options. If one or more options is not needed, it should be\n    specified as desired following the super option's specification.\n    *SWA - selects options SWA, SAVEUSING\n    *NOSUBOPTS - selects options NOSWA, NOSAVEUSING, NOLOADBASE,\n    NOCUSTOM, NOPARMS\nAMODE= 24 | 31 | ANY\n    Specifies the addressing mode the block runs in. Amode switching\n    code is generated if required. The default is AMODE=ANY, which\n    specifies that the subroutine runs in the amode of its caller.\n    *Restriction. *AMODE 24 or 31 must be specified on a subroutine\n    block if it contains inline blocks with AMODE 24 or 31 specified.\nBASEREG= reg|(reg,...)\n    Defines the base register(s) to be used to establish addressability\n    to this subroutine. If this keyword is not specified, register 10 is\n    used. The register(s) specified with this keyword are only used when\n    LOADBASE is in effect.\nPARMMAP=(dsect[,len])\n    Defines the Dsect to be used to map the input parameter list and its\n    length. This keyword can be used if the input parameter list is too\n    complicated to describe with the PARMS keyword or if the input\n    parameter list is a standard form described by an existing Dsect.\n    /|Len|/is only required if COPY is specified with the PARMS option.\n    This keyword is mutually exclusive with the PARMS keyword.\nPARMS=(tag[,tag[,...]])\n    Defines the tags used to map the input parameter list. These are\n    used to generate the Subroutine Parameter List (SPL) Dsect or to map\n    the input parameter list storage in the SWA (if parameter option\n    COPY was specified). This also defines the size of the input\n    parameter list for the COPY option. This keyword is mutually\n    exclusive with the PARMMAP keyword.\nPL= tag|(tag,num)\n    Defines the default place to build parameter lists generated within\n    this block. /|Tag|/defines the label for the start of parameter list\n    storage and /|num|/is a self-defining term that represents the\n    maximum number of parameter list entries that the storage at tag\n    holds. This must be large enough to contain the largest parameter\n    list in the block. If num is not specified, the tag must have a\n    length modifier that is a self-defining term.\nRECUR= number\n    Specifies the maximum number of times the subroutine can be called\n    recursively. This is used in Dynamic Storage Management to calculate\n    the amount of space needed for SWAs. /|Number|/must be a\n    self-defining term.\nSAVE= (r1[,r2],address)\n    Requests that the register(s) named be saved and restored. The\n    /|address|/operand provides the address of a place to save the\n    register(s). If more than one register is specified, a STM\n    instruction is generated: therefore, specification of something like\n    \u00f4R14,R12,address\u00f6 is valid. The SAVE keyword can be used on\n    subroutine blocks to preserve some or all registers without\n    requiring a standard OS save area. The SAVE operand is not valid on\n    program blocks, and should not be confused with OPTIONS=SAVE.\nSWAREG= R11|(R11,reg...)\n    Specifies the register or registers to be used for SWA\n    addressability. The register(s) specified with this keyword are only\n    used when DYN is in effect.\n\n\n      Errors\n\n  *\n\n    Refer to Appendix B, <##interr>/Internal Macros Error Messages/\n    <##interr>for macros that start with \u00f4##SP\u00f6.\n\n\n    Chapter 16. The CALLCASE Macro\n\n*Table of Contents*\n\nCALLCASE <#id497731> - Structured macro used to call a subroutine based\non a case number.\n\n\n    Name\n\nCALLCASE \u00f9 Structured macro used to call a subroutine based on a case\nnumber.\n\n\n    Syntax\n\n|CASEBLK REG=reg,[USESYMBOLS,]case_numbers_and_subroutine_names\n[OTHER,othersub|(ERREXIT[,[exitname][,exitcode])]\n[,(parms)[,VL|NOVL]][,PL=tag|(tag,num)] |\n\n\n    Operands\n\nreg\n    Specifies the register that contains the case number. An available\n    register between R2 and R12 can be used.\ncase_numbers_and_subroutine_names\n    When USESYMBOLS is specified, this is a list of subroutine names\n    whose case number is stored in a GBLA symbol by the same name.\n    When USESYMBOLS is not specified, this is a list of one or more case\n    numbers, followed by the name of the subroutine to call, followed by\n    more case numbers, followed by the subroutine name, and so on. If a\n    name is specifed without a preceeding number, it is assigned a case\n    of one more than the last number assigned. If no number is supplied\n    before the first name, it is assigned case 0. A case number can only\n    be assigned to one subroutine.\n    Case numbers must not be negative. A table is built at the bottom of\n    the PSD containing the maximum case number plus one entries. Large\n    case numbers should not be used.\n\n*Example 16.1. CALLCASE with USESSYMBOLS*\n\n  CALLCASE REG=R3,USESYMBOLS,\n      FI_OPEN,\n      FI_TERMINATE,\n      FI_READLINE,\n      OTHER,(ERREXIT,,16)\n\n\n*Example 16.2. CALLCASE without USESSYMBOLS*\n\n  CALLCASE REG=R2,\n      1,5,2,SUBA,\n      4,3,SUBB,\n      7,SUBC,SUBD,SUBE,\n      OTHER,SUBERR,\n      (x,y),VL\n\n\nothersub\n    Specifies the name of the subroutine to call if the case in reg is\n    not assigned to a subroutine.\nexitname\n    Specifies the name of an ERREXIT to call if the case in reg is not\n    assigned to a subroutine. If a name is not specified, the unnamed\n    ERREXIT is called.\nexitcode\n    Specifies the value for the CODE= keyword if the ERREXIT is called.\nparms\n    A list of the parameters to be included in the parameter list that\n    the subroutine is called with. A missing parameter causes zero to be\n    filled in for the parameter address. An * causes the macro to skip\n    over that parameter, reserving the space in the parameter list but\n    not modifying the data there. An * before a tag causes the macro to\n    load the parameter list with the contents of the storage referenced\n    by the tag instead of the address of the tag. This provides a form\n    of indirect addressing. Numeric and character constants can be coded\n    and are converted to fullword and character literals respectively.\n    If/|parms|/is missing, the CALLSUB macro loads register one with the\n    address specified by PL=.\nVL|NOVL\n    VL specifies that this is a variable length parameter list and\n    therefore the high bit of the last address in the list be set to\n    one. NOVL specifies to not set the bit. NOVL is normally the\n    default, but all of the super options establish VL as the default so\n    that NOVL might be needed in certain cases.\ntag\n    Specifies the address of the parameter list to use for the call to\n    this subroutine. Register one is loaded with the address of\n    /|tag|/before the subroutine is entered. If a parameter list is\n    being created for this subroutine, /|tag|/also specifies where to\n    build it. If the PL= keyword is not specified, the parameter list is\n    created in the default parameter list storage established by an\n    enclosing BLOCK macro, or, if no other default was set up, in PWA or\n    SWA storage.\nnum\n    Specifies the maximum number of the parameters that the storage at\n    /|tag|/can accommodate. If /|tag|/has a length attribute that is a\n    self-defining term, this operand is not necessary. This is used to\n    insure that the specified parameter list can fit into the storage at\n    /|tag|/.\n\n\n    Errors\n\n  *\n\n    Case number <num>, supplied by <sym> has already been assigned.\n\n  *\n\n    Case number <num> has already been assigned.\n\n  *\n\n    Parameter <num> is empty.\n\n  *\n\n    Expecting a subroutine name or ERREXIT following OTHER\n\n  *\n\n    <parm> is not expected as <num> parameter.\n\n  *\n\n    Negative case number <num> encountered in parameter <num> is not\n    allowed.\n\n  *\n\n    <parm> is not valid.\n\n  *\n\n    REG= must be specified.\n\n\n    Chapter 17. The CALLSUB Macro\n\n*Table of Contents*\n\nCALLSUB <#id497517> - Macro used to call an internal subroutine with\nlinkage provided by the Structured Macros. A parameter list can be\ncreated for the call and its address loaded into register one, or\nregister one can be loaded with the address of a previously created list.\n\n\n    Name\n\nCALLSUB \u00f9 Macro used to call an internal subroutine with linkage\nprovided by the Structured Macros. A parameter list can be created for\nthe call and its address loaded into register one, or register one can\nbe loaded with the address of a previously created list.\n\n\n    Syntax\n\n|CALLSUB name[,(parms)][,VL|NOVL][,PL=tag|(tag,num)] |\n\n\n    Operands\n\nname\n    Specifies the name of the internal subroutine to be called. The call\n    is performed with a |BAL R14,||/name/|or equivalent instruction. If\n    the program block option LONG has been selected, a |BAL R14,R15|is\n    generated, destroying the contents of register 15. The contents of\n    register 15 are also destroyed if DYN is used.\nparms\n    A list of the parameters to be included in the parameter list that\n    the subroutine is called with. A missing parameter causes zero to be\n    filled in for the parameter address. An * causes the macro to skip\n    over that parameter, reserving the space in the parameter list but\n    not modifying the data there. An * before a tag causes the macro to\n    load the parameter list with the contents of the storage referenced\n    by the tag instead of the address of the tag. This provides a form\n    of indirect addressing. Numeric and character constants can be coded\n    and are converted to fullword and character literals respectively.\n    If /|parms|/is missing, the CALLSUB macro loads register one with\n    the address specified by PL=.\nVL|NOVL\n    VL specifies that this is a variable length parameter list and\n    therefore the high bit of the last address in the list be set to\n    one. NOVL specifies to not set the bit. NOVL is normally the\n    default, but all of the super options establish VL as the default so\n    that NOVL might be needed in certain cases.\ntag\n    Specifies the address of the parameter list to used for the call to\n    this subroutine. Register one is loaded with the address of\n    /|tag|/before the subroutine is entered. If a parameter list is\n    being created for this subroutine, /|tag|/also specifies where to\n    build it. If the PL= keyword is not specified, the parameter list is\n    created in the default parameter list storage established by an\n    enclosing BLOCK macro, or, if no other default was set up, in PWA or\n    SWA storage.\nnum\n    Specifies the maximum number of the parameters that the storage\n    at/|tag|/can accommodate. If/|tag|/has a length attribute that is a\n    self-defining term, this operand is not necessary. This is used to\n    insure that the specified parameter list can fit into the storage at\n    /|tag|/.\n\n\n    Errors\n\n  *\n\n    Cannot CALLSUB program block or subroutine in previous program block\n\n\n    Chapter 18. The CALLX Macro\n\n*Table of Contents*\n\nCALLX <#id499265> - Macro used to call an external subroutine with\nstandard OS linkage. A parameter list can be created for the call and\nits address loaded into register one, or register one can be loaded with\nthe address of a previously created list.\n\n\n    Name\n\nCALLX \u00f9 Macro used to call an external subroutine with standard OS\nlinkage. A parameter list can be created for the call and its address\nloaded into register one, or register one can be loaded with the address\nof a previously created list.\n\n\n    Syntax\n\n|CALLX addr[,(parms)][,VL|NOVL][,PL=tag|(tag,num)] |\n\n\n    Operands\n\naddr\n    Specifies the address of the external subroutine. This address can\n    be of the form: |(R15)|=V(name)|tag|If the /|tag|/form is used, tag\n    must be the label of the address of the external subroutine. The\n    call is performed with a |BALR R14,R15|or equivalent instruction.\nparms\n    A list of the parameters to be included in the parameter list that\n    the subroutine is called with. A missing parameter causes zero to be\n    filled in for the parameter address. An * causes the macro to skip\n    over that parameter, reserving the space in the parameter list but\n    not modifying the data there. An * before a tag causes the macro to\n    load the parameter list with the contents of the storage referenced\n    by the tag instead of the address of the tag. This provides a form\n    of indirect addressing. Numeric and character constants can be coded\n    and are converted to fullword and character literals respectively.\n    If/|parms|/is missing, the CALLX macro loads register one with the\n    address specified by PL=.\nVL|NOVL\n    VL specifies that this is a variable length parameter list and\n    therefore the high bit of the last address in the list be set to\n    one. NOVL specifies to not set the bit. NOVL is normally the\n    default, but all of the super options establish VL as the default so\n    that NOVL might be needed in certain cases.\ntag\n    Specifies the address of the parameter list to used for the call to\n    this subroutine. Register one is loaded with the address of\n    /|tag|/before the subroutine is entered. If a parameter list is\n    being created for this subroutine, tag also specifies where to build\n    it. If the PL= keyword is not specified, the parameter list is\n    created in the default parameter list storage established by an\n    enclosing BLOCK macro, or, if no other default was set up, in PWA or\n    SWA storage.\nnum\n    Specifies the maximum number of parameters that the storage at\n    /|tag|/can accommodate. If tag has a length attribute that is a\n    self-defining term, this operand is not necessary. This is used to\n    insure that the specified parameter list can fit in the storage at tag.\n\n\n    Errors\n\n  *\n\n    None\n\n\n    Chapter 19. The CASE Macro\n\n*Table of Contents*\n\nCASE <#id499743> - Structured macro used to start the code for a\nparticular case within a case block. This macro must be coded between a\nCASEBLK and ENDCASE macro. The CASE macro is always associated with the\ninnermost CASEBLK.\n\n\n    Name\n\nCASE \u00f9 Structured macro used to start the code for a particular case\nwithin a case block. This macro must be coded between a CASEBLK and\nENDCASE macro. The CASE macro is always associated with the innermost\nCASEBLK.\n\n\n    Syntax\n\n|CASE n[,n[,...]]|OTHER[,CASEBLK=name] |\n\n\n    Operands\n\nn\n    Specifies the case number or numbers whose code follows the case\n    statement.\nOTHER\n    Indicates all cases not associated with a particular case. The case\n    number cannot be larger than the MULT= value on the associated\n    CASEBLK macro times 100.\nname\n    Name specified on the associated CASEBLK macro.\n\n\n    Errors\n\n  *\n\n    CASE <casenumber> already used\n\n  *\n\n    No operand was specified on CASE statement\n\n  *\n\n    OTHER has already been specified in this CASEBLK\n\n  *\n\n    CASE is not numeric\n\n  *\n\n    CASE number can not be larger then 'MULT' * 100\n\n  *\n\n    CASE number must be a multiple of 'MULT'\n\n  *\n\n    CASEBLK= does not match CASE name\n\n  *\n\n    CASE macro is not at same structural level as a CASEBLK macro\n\n\n    Chapter 20. The CASEBLK Macro\n\n*Table of Contents*\n\nCASEBLK <#id499711> - Structured macro used to start a case block. Case\nblocks can be nested up to twenty deep.\n\n\n    Name\n\nCASEBLK \u00f9 Structured macro used to start a case block. Case blocks can\nbe nested up to twenty deep.\n\n\n    Syntax\n\n|CASEBLK REG=reg[,WREG=wreg][,MULT=1|2|4|8][,NAME=name] |\n\n\n    Operands\n\nreg\n    Specifies the register that contains the case number.\nwreg\n    Specifies the register that CASEBLK can use internally as a work\n    register for address calculations. If WREG= is not specified, the\n    REG= is used as a work register. This destroys the contents of REG.\n    The work register cannot be register 0.\nmult\n    This keyword specifies that all the case numbers on the associated\n    CASE macros are a multiple of 1, 2, 4, or 8. 1 is the default.\nname\n    Specifies the name of the case block.\n\n\n    Errors\n\n  *\n\n    Invalid MULT= specified. Must be 1, 2, 4, or 8.\n\n  *\n\n    CASEBLK cannot be nested more than 20 deep\n\n  *\n\n    REG= must be specified\n\n\n    Chapter 21. The DEFUCOND Macro\n\n*Table of Contents*\n\nDEFUCOND <#id500425> - Structured macro used to define the name of a\nuser condition and to identify the macro that processes it. With\nDEFUCOND the programmer can add special case conditions to the list of\nstandard conditions available in conditional expressions. For\ninformation on writing a user condition macro, see User-Defined Conditions.\n\n\n    Name\n\nDEFUCOND \u00f9 Structured macro used to define the name of a user condition\nand to identify the macro that processes it. With DEFUCOND the\nprogrammer can add special case conditions to the list of standard\nconditions available in conditional expressions. For information on\nwriting a user condition macro, see the section called \u00f4User-Defined\nConditions\u00f6 <##ucond>.\n\n\n    Syntax\n\n|DEFUCOND NAME=name,MACRO=macro |\n\n\n    Operands\n\nname\n    Name of the user condition being defined. This name is used in\n    conditional expressions to invoke this condition.\nmacro\n    Name of the macro that performs this user-defined conditional test.\n    This macro is invoked by the Structured Macros whenever a\n    conditional expression is encountered that contains the named condition.\n\n\n    Errors\n\n  *\n\n    NAME= must be specified\n\n  *\n\n    MACRO= must be specified\n\n\n    Chapter 22. The ELSE Macro\n\n*Table of Contents*\n\nELSE <#id498514> - Structured macro used to start the else code for an\nassociated IF or ELSEIF macro. An ELSE macro is always associated with\nthe innermost IF structure.\n\n\n    Name\n\nELSE \u00f9 Structured macro used to start the else code for an associated IF\nor ELSEIF macro. An ELSE macro is always associated with the innermost\nIF structure.\n\n\n    Syntax\n\n|ELSE [IF=name] |\n\n\n    Operands\n\nname\n    Name of associated IF macro.\n\n\n    Errors\n\n  *\n\n    IF nesting level is zero\n\n  *\n\n    ELSE already encountered for this IF\n\n  *\n\n    NAME= does not match corresponding IF\n\n  *\n\n    ELSE structural level is not the same as the corresponding IF\n\n\n    Chapter 23. The ELSEIF Macro\n\n*Table of Contents*\n\nELSEIF <#id500630> - Structured macro used to start the else code for an\nassociated IF or ELSEIF macro. An ELSEIF macro is always associated with\nthe innermost IF structure. An ELSEIF is like an ELSE macro followed by\nan IF macro except that the IF nesting level stays the same.\n\n\n    Name\n\nELSEIF \u00f9 Structured macro used to start the else code for an associated\nIF or ELSEIF macro. An ELSEIF macro is always associated with the\ninnermost IF structure. An ELSEIF is like an ELSE macro followed by an\nIF macro except that the IF nesting level stays the same.\n\n\n    Syntax\n\n|ELSEIF cond[,THEN][,IF=name] |\n\n\n    Operands\n\ncond\n    Conditional expression. (See Chapter 2, <##condch>/Conditional\n    Statements/ <##condch>)\nname\n    Name on associated IF macro.\n\n\n    Errors\n\n  *\n\n    ELSEIF must be contained in IF structure\n\n  *\n\n    ELSE for this IF precedes ELSEIF\n\n  *\n\n    IF= does not match corresponding IF\n\n  *\n\n    ELSEIF structural level is not the same as corresponding IF\n\n  *\n\n    For possible condition errors, see Appendix B, <##interr>/Internal\n    Macros Error Messages/ <##interr>.\n\n\n    Chapter 24. The ENDBLK Macro\n\n*Table of Contents*\n\nENDBLK <#id500939> - Structured macro used to end a block structure.\nRefer to the description of the BLOCK macro for more information.\n\n\n    Name\n\nENDBLK \u00f9 Structured macro used to end a block structure. Refer to the\ndescription of the BLOCK macro for more information.\n\n\n    Syntax\n\n|ENDBLK [BLOCK=name][,RC=rc][,R0=r0][,R1=r1] |\n\n\n    Operands\n\nname\n    Name on associated BLOCK macro.\nrc\n    Return code. The return code can be specified as a symbol or (Rn)\n    where n is the number of a register. The default for RC is (R15).\n    RC= is ignored on the ENDBLK macro of a program block that is using\n    the PLI environment.\nr0\n    Value to be returned in register zero. This keyword requires the\n    RTNR0 option to be in effect and is valid only on the ENDBLK for a\n    program block and its error exits. This value can be specified as a\n    symbol or (Rn) where n is the number of a register. The default for\n    R0 is (R0).\nr1\n    Value to be returned in register one. This keyword requires the\n    RTNR1 option to be in effect and is valid only on the ENDBLK for a\n    program block and its error exits. This value can be specified as a\n    symbol or (Rn) where n is the number of a register. The default for\n    R1 is (R1).\n\n\n    Errors\n\n  *\n\n    <RC> invalid on RC=\n\n  *\n\n    Block nesting level is already zero\n\n  *\n\n    BLOCK= does not match current block\n\n  *\n\n    Structural nesting level does not match level at entry to\n    corresponding block\n\n  *\n\n    For macros that start with ##EE, ##IE, ##PE, or ##SE, see Appendix\n    B, <##interr>/Internal Macros Error Messages/ <##interr>for other\n    possible errors.\n\n\n    Chapter 25. The ENDCASE Macro\n\n*Table of Contents*\n\nENDCASE <#id501366> - Structured macro used to end a case block structure.\n\n\n    Name\n\nENDCASE \u00f9 Structured macro used to end a case block structure.\n\n\n    Syntax\n\n|ENDCASE [CASEBLK=name] |\n\n\n    Operands\n\nname\n    Name on associated CASEBLK macro.\n\n\n    Errors\n\n  *\n\n    CASEBLK nesting level is zero\n\n  *\n\n    CASEBLK= does not match CASE name\n\n  *\n\n    Structural nesting level of ENDCASE is different from corresponding\n    CASEBLK macro\n\n\n    Chapter 26. The ENDIF Macro\n\n*Table of Contents*\n\nENDIF <#id501306> - Structured macro used to end an IF structure.\n\n\n    Name\n\nENDIF \u00f9 Structured macro used to end an IF structure.\n\n\n    Syntax\n\n|ENDIF [IF=name] |\n\n\n    Operands\n\nname\n    Name on associated IF macro.\n\n\n    Errors\n\n  *\n\n    IF nesting level is zero\n\n  *\n\n    IF= does not match corresponding IF\n\n  *\n\n    ENDIF is not at same structural level as corresponding IF\n\n\n    Chapter 27. The ENDLOOP Macro\n\n*Table of Contents*\n\nENDLOOP <#id501852> - Structured macro used to end a LOOP structure. For\nmore information, see The LOOP macro.\n\n\n    Name\n\nENDLOOP \u00f9 Structured macro used to end a LOOP structure. For more\ninformation, see Chapter 39, <##loopm>/The LOOP Macro/ <##loopm>.\n\n\n    Syntax\n\n|ENDLOOP [LOOP=name,] WHILE | UNTIL,cond | UNTIL,LEAVE | BCT,reg | BXH |\nBXLE,reg,reg |\n\n\n    Operands\n\nname\n    Name on associated LOOP macro.\ncond\n    Conditional expression. (See Chapter 2, <##condch>/Conditional\n    Statements/ <##condch>)\nreg\n    Register to be used on associated instruction.\n\n\n    Errors\n\n  *\n\n    Additional positional parameters cannot be specified on ENDLOOP <type>\n\n  *\n\n    Nesting level for loops is 0\n\n  *\n\n    LOOP= does not match corresponding LOOP\n\n  *\n\n    <type> does not match type on corresponding LOOP\n\n  *\n\n    Incorrect number of parameters specified for ENDLOOP <type>\n\n  *\n\n    LOOP type <type> is invalid\n\n  *\n\n    Incorrect number of parameters specified on ENDLOOP UNTIL,LEAVE\n\n  *\n\n    ENDLOOP structural level is not the same as the corresponding LOOP\n\n  *\n\n    For possible condition errors, see Appendix B, <##interr>/Internal\n    Macros Error Messages/ <##interr>.\n\n\n    Chapter 28. The ENDPSD Macro\n\n*Table of Contents*\n\nENDPSD <#id501610> - Macro used to define the end of the Program Static\nData (PSD). The ENDPSD macro is used to close either a partial PSD\nwithin the program code, or the last PSD at the end of the program.\n\n\n    Name\n\nENDPSD \u00f9 Macro used to define the end of the Program Static Data (PSD).\nThe ENDPSD macro is used to close either a partial PSD within the\nprogram code, or the last PSD at the end of the program.\n\n\n    Syntax\n\n|ENDPSD |\n\n\n    Operands\n\nNone\n\n\n    Errors\n\n  *\n\n    ENDPSD does not correspond to a PSD\n\n  *\n\n    ENDPSD is not at the same nesting level as PSD\n\n\n    Chapter 29. The ENDPWA Macro\n\n*Table of Contents*\n\nENDPWA <#id500130> - Macro used to define the end of the Program Work\nArea (PWA) or to close a partial PWA. The ENDPWA macro defines the\nPWAPLLEN tag to establish the length of the PWA. If the DYN option is\nbeing used, ENDPWA uses the ##ORGS macro to reserve space for the SWAs.\nIf option NORENT is in effect, a DS instruction is generated to reserve\nstorage in the CSECT for the PWA.\n\n\n    Name\n\nENDPWA \u00f9 Macro used to define the end of the Program Work Area (PWA) or\nto close a partial PWA. The ENDPWA macro defines the PWAPLLEN tag to\nestablish the length of the PWA. If the DYN option is being used, ENDPWA\nuses the ##ORGS macro to reserve space for the SWAs. If option NORENT is\nin effect, a DS instruction is generated to reserve storage in the CSECT\nfor the PWA.\n\n\n    Syntax\n\n|ENDPWA |\n\n\n    Operands\n\nNone\n\n\n    Errors\n\nNone\n\n\n    Chapter 30. The ENDSSD Macro\n\n*Table of Contents*\n\nENDSSD <#id502478> - Macro used to define the end of the Subroutine\nStatic Data (SSD). The ENDSSD macro is used to close either a partial\nSSD within the subroutine code, or the last SSD at the end of the\nsubroutine.\n\n\n    Name\n\nENDSSD \u00f9 Macro used to define the end of the Subroutine Static Data\n(SSD). The ENDSSD macro is used to close either a partial SSD within the\nsubroutine code, or the last SSD at the end of the subroutine.\n\n\n    Syntax\n\n|ENDSSD |\n\n\n    Operands\n\nNone\n\n\n    Errors\n\n  *\n\n    ENDSSD does not correspond to a SSD\n\n  *\n\n    ENDSSD is not at the same nesting level as SSD\n\n\n    Chapter 31. The ENDSWA Macro\n\n*Table of Contents*\n\nENDSWA <#id502785> - Macro used to define the end of the Subroutine Work\nArea (SWA). It is also used to end a partial SWA definition. The ENDSWA\nmacro establishes the length of the SWA for Dynamic Storage\ncalculations. ENDSWA insures double word alignment for anything that\nfollows the SWA.\n\n\n    Name\n\nENDSWA \u00f9 Macro used to define the end of the Subroutine Work Area (SWA).\nIt is also used to end a partial SWA definition. The ENDSWA macro\nestablishes the length of the SWA for Dynamic Storage calculations.\nENDSWA insures double word alignment for anything that follows the SWA.\n\n\n    Syntax\n\n|ENDSWA |\n\n\n    Operands\n\nNone\n\n\n    Errors\n\nNone\n\n\n    Chapter 32. The ERREXIT Macro\n\n*Table of Contents*\n\nERREXIT <#id502621> - Structured macro used to conditionally cause an\nerrexit block to be executed.\n\n\n    Name\n\nERREXIT \u00f9 Structured macro used to conditionally cause an errexit block\nto be executed.\n\n\n    Syntax\n\n|ERREXIT [cond][,CODE=code][,CODEREG=reg][,NAME=name] |\n\n\n    Operands\n\nname\n    Name of errexit block to execute. If the name is omitted, the\n    unnamed error exit block for the program is executed.\ncode\n    Symbol representing a value from 0 to 4095. If specified, this code\n    is passed to the error exit block in the CODEREG= register.\nreg\n    Register used for passing error code. The default is R14.\ncond\n    Conditional expression. (See Chapter 2, <##condch>/Conditional\n    Statements/ <##condch>) If the expression is true, the error exit is\n    taken. If an expression is not specified, the error exit is always\n    taken.\n\n\n    Errors\n\n  *\n\n    For possible condition errors, see Appendix B, <##interr>/Internal\n    Macros Error Messages/ <##interr>.\n\n\n    Chapter 33. The EXI Macro\n\n*Table of Contents*\n\nEXI <#id503135> - This is the EXecute Immediate macro. It is used to\ngenerate an EX instruction and the instruction to be executed. This\nallows the EXecuted statement to be defined at the same time the EX\ninstruction is defined, minimizing confusion. It also insures that the\nUSING environment is the same as that of the EX instruction. The\nEXecuted instruction is generated in the PSD for the program (or SSD for\na subroutine) if the program has selected option LOCTR. Otherwise, it is\ngenerated inline with a branch around it.\n\n\n    Name\n\nEXI \u00f9 This is the EXecute Immediate macro. It is used to generate an EX\ninstruction and the instruction to be executed. This allows the EXecuted\nstatement to be defined at the same time the EX instruction is defined,\nminimizing confusion. It also insures that the USING environment is the\nsame as that of the EX instruction. The EXecuted instruction is\ngenerated in the PSD for the program (or SSD for a subroutine) if the\nprogram has selected option LOCTR. Otherwise, it is generated inline\nwith a branch around it.\n\n\n    Syntax\n\n|EXI reg,(opcode,op1[,op2[,op3]]) |\n\n\n    Operands\n\nreg\n    Specifies the register to be used in the EX instruction.\nopcode\n    Defines the opcode to be used for the EXecuted instruction.\nop1-3\n    Defines the operands for the EXecuted instruction. There can be one,\n    two, or three operands.\n\n\n    Errors\n\nNone\n\n\n    Chapter 34. The FILL Macro\n\n*Table of Contents*\n\nFILL <#id503428> - Macro used to fill an area of storage with a character.\n\n\n    Name\n\nFILL \u00f9 Macro used to fill an area of storage with a character.\n\n\n    Syntax\n\n|FILL op1[,op2][,LENGTH=len|(len,type)] |\n\n\n    Operands\n\nop1\n    Provides the starting address of the storage to be cleared. This can\n    be given as an RX-type address.\nop2\n    Provides a byte other than X'00' to propagate through the storage to\n    be cleared. This can be specified in X'nn' or C'c' form (suitable\n    for use by MVI). If not specified, X'00' is assumed.\nlen\n    Provides the length of the storage area to be cleared. This can be a\n    numeric value, a constant value or a register specification. The\n    default is (L'op1,SHORT).\ntype\n    Specifies the type of clearing operation to be performed: short,\n    medium or long.\n\n\n    Errors\n\n  *\n\n    FILL operation type invalid: Must be S)hort, M)edium, or L)ong\n\n  *\n\n    Long form FILL requires R-Form length\n\n  *\n\n    Length for FILL required but not specified\n\n  *\n\n    Unable to parse FILL destination\n\n\n    Notes\n\nIf a tag is defined in a macro, FILL does not have L'/|tag|/resolved for\nit and gets an assembly error. To correct this, code:\n\n  FILL  tag,X'00',LENGTH=L'tag\n\n\n\n    Chapter 35. The IBIT Macro\n\n*Table of Contents*\n\nIBIT <#id503736> - Macro used to invert bit flags in a byte.\n\n\n    Name\n\nIBIT \u00f9 Macro used to invert bit flags in a byte.\n\n\n    Syntax\n\n|IBIT [byte,]flag|(flag[,flag[,...]]) |\n\n\n    Operands\n\nbyte\n    Byte that contains bit(s) to be inverted. If this operand is\n    omitted, the name of the byte is assumed to be the first five\n    characters of the first flag name.\nflag\n    Byte mask with a binary one in the bit position of the mask that\n    corresponds to the bit to be inverted in the byte.\n\n\n    Errors\n\n  *\n\n    No more than eight flags can be specified\n\n  *\n\n    IBIT macro can have no more than two operands\n\n  *\n\n    If byte is not specified, flag name must be at least six characters long\n\n  *\n\n    If byte is not specified, the first five characters of all flags\n    must match\n\n\n    Chapter 36. The IF Macro\n\n*Table of Contents*\n\nIF <#id504009> - Structured macro used to start an IF structure.\n\n\n    Name\n\nIF \u00f9 Structured macro used to start an IF structure.\n\n\n    Syntax\n\n|IF cond[,THEN][,NAME=name]|\n\n\n    Operands\n\nname\n    Name to be associated with IF structure.\ncond\n    Conditional expression. (See Chapter 2, <##condch>/Conditional\n    Statements/ <##condch>)\n\n\n    Errors\n\n  *\n\n    IFs can only be 20 deep\n\n  *\n\n    For possible condition errors, see Appendix B, <##interr>/Internal\n    Macros Error Messages/ <##interr>.\n\n\n    Chapter 37. The LCBA Macro\n\n*Table of Contents*\n\nLCBA <#id504567> - This macro loads the address of certain control\nblocks into a register. No registers are changed except for the register\nspecified. A zero condition is set if the control block cannot be\nlocated. It is not necessary for the mapping macros for the control\nblocks used internally by this macros to be included in the source program.\n\n\n    Name\n\nLCBA \u00f9 This macro loads the address of certain control blocks into a\nregister. No registers are changed except for the register specified. A\nzero condition is set if the control block cannot be located. It is not\nnecessary for the mapping macros for the control blocks used internally\nby this macros to be included in the source program.\n\n\n    Syntax\n\n|LCBA reg,cb |\n\n\n    Operands\n\nreg\n    This operand specifies the register to be loaded. The register must\n    be specified as R1 through R15.\ncb\n    One of the following control blocks can be specified:\n\nACEE\n    The address of the current RACF Accessor Environment Element is\n    loaded. This address is the contents of the TCBSENV field of the\n    current TCB if non-zero and present; otherwise, the address is the\n    contents of the ASXBSENV field of the current ASXB.\nASCB\n    The address of the current Address Space Control Block is loaded.\n    This address is loaded from PSAAOLD.\nASXB\n    The address of the current Address Space Extension Block is loaded.\n    This address is loaded from ASCBASXB.\nCVT\n    The address of the Communications Vector Table is loaded. This\n    address is loaded from location decimal 16.\nTCB\n    The address of the current Task Control Block is loaded. This\n    address is loaded from PSATOLD.\nUJT\n    The address of the User Job Table is loaded. This control block is\n    Clemson dependent. TCBUSER of the current TCB and its parents TCBs\n    are searched to find the address of the UJT.\nUVT\n    The address of the User Communication Vector Table is loaded. This\n    control block is Clemson dependent. This address is loaded from the\n    three low order bytes of CVTUSER.\n\n\n    Errors\n\n  *\n\n    <reg> is invalid. Register must be R1-R15.\n\n  *\n\n    <cb> is not a supported control block.\n\n\n    Chapter 38. The LEAVE Macro\n\n*Table of Contents*\n\nLEAVE <#id503416> - Structured macro used to leave a structure.\n\n\n    Name\n\nLEAVE \u00f9 Structured macro used to leave a structure.\n\n\n    Syntax\n\n|LEAVE struc=name[,cond] |\n\n\n    Operands\n\nstruc\n    Type of structure to leave. This can be IF, LOOP, BLOCK, or CASEBLK.\nname\n    Name of the structure to leave. An * can be coded to indicate the\n    current (innermost) structure of the specified type.\ncond\n    Conditional expression. (See Chapter 2, <##condch>/Conditional\n    Statements/ <##condch>) If the expression is true, the structure is\n    left. If an expression is not specified, the structure is left\n    unconditionally.\n\n\n    Errors\n\n  *\n\n    SMWA= keyword must be specified on program block macro\n\n  *\n\n    Only one keyword can be specified on LEAVE\n\n  *\n\n    Nesting level for <structure> is zero\n\n  *\n\n    <name> is not an active <structure> name\n\n  *\n\n    One keyword must be specified on LEAVE\n\n  *\n\n    For possible condition errors, see Appendix B, <##interr>/Internal\n    Macros Error Messages/ <##interr>.\n\n\n    Chapter 39. The LOOP Macro\n\n*Table of Contents*\n\nLOOP <#id505094> - Structured macro used to start a loop structure. For\nLOOP WHILE loops, tests are done at the start of the loop. For LOOP\nUNTIL loops, tests are done at the bottom of the loop. If the ENDLOOP\nspecifies UNTIL,LEAVE, the loop will continue until a LEAVE macro is\nused to leave the loop. BCT, BXH, and BXLE loop use the assembler\ninstruction by the same name. BXH instructions are generated at the top\nof the loop and BXLE, and BCT instructions are generated at the bottom\nof the loop.\n\n\n    Name\n\nLOOP \u00f9 Structured macro used to start a loop structure. For LOOP WHILE\nloops, tests are done at the start of the loop. For LOOP UNTIL loops,\ntests are done at the bottom of the loop. If the ENDLOOP specifies\nUNTIL,LEAVE, the loop will continue until a LEAVE macro is used to leave\nthe loop. BCT, BXH, and BXLE loop use the assembler instruction by the\nsame name. BXH instructions are generated at the top of the loop and\nBXLE, and BCT instructions are generated at the bottom of the loop.\n\n\n    Syntax\n\n|LOOP [NAME=name,] WHILE,cond | UNTIL | BCT | BXH,reg,reg | BXLE |\n\n\n    Operands\n\nname\n    Name to be associated with loop structure.\ncond\n    Conditional expression. (See Chapter 2, <##condch>/Conditional\n    Statements/ <##condch>)\nreg\n    Register to be used on associated instruction.\n\n\n    Errors\n\n  *\n\n    Additional positional parameters cannot be specified on LOOP <type>\n\n  *\n\n    LOOPs can only be nested 20 deep\n\n  *\n\n    Incorrect number of parameters specified for LOOP BXH\n\n  *\n\n    LOOP type <type> is invalid\n\n  *\n\n    For possible condition errors, see Appendix B, <##interr>/Internal\n    Macros Error Messages/ <##interr>.\n\n\n    Chapter 40. The L8, L16, L24, L32 Macros\n\n*Table of Contents*\n\nL8, L16, L24, L32 <#id504978> - Macros used to load a register with one,\ntwo, three, or four bytes of data from non-aligned storage. This macro\nclears the register and issues the appropriate ICM to accomplish this.\n\n\n    Name\n\nL8, L16, L24, L32 \u00f9 Macros used to load a register with one, two, three,\nor four bytes of data from non-aligned storage. This macro clears the\nregister and issues the appropriate ICM to accomplish this.\n\n\n    Syntax\n\n|L||/n/||reg,addr |\n\n\n    Operands\n\nn\n    Defines the size of the load operation in bits. /|n|/should be\n    either 8, 16, 24 or 32 for single byte, half word, three byte, or\n    full word load respectively.\nreg\n    Specifies the register to load.\n\n\n      Warning\n\n    Since this register is cleared before the load, it should not be\n    used (directly or indirectly) to specify /|addr|/.\n\naddr\n    Specifies the address that register /|reg|/is loaded from.\n\n\n    Errors\n\n  *\n\n    Invalid number of operands on L<n> instruction\n\n\n    Chapter 41. The PLIST Macro\n\n*Table of Contents*\n\nPLIST <#id505750> - Macro used to generate or modify a parameter list.\nThe parameter list can be created in default parameter list storage or\nrouted to a specific location. Register one is also loaded with the\naddress of the completed list.\n\n\n    Name\n\nPLIST \u00f9 Macro used to generate or modify a parameter list. The parameter\nlist can be created in default parameter list storage or routed to a\nspecific location. Register one is also loaded with the address of the\ncompleted list.\n\n\n    Syntax\n\n|PLIST [(parms)][,VL|NOVL][,PL=tag|(tag,num)][,DS=PWA|SWA] |\n\n\n    Operands\n\nparms\n    A list of the parameters to be included in the parameter list. A\n    missing parameter causes zero to be filled in for the parameter\n    address. An * causes the macro to skip over that parameter,\n    reserving the space in the parameter list but not modifying the data\n    there. An * before a tag causes the macro to load the parameter list\n    with the contents of the storage referenced by the tag instead of\n    the address of the tag. This provides a form of indirect addressing.\n    Numeric and character constants can be coded and are converted to\n    fullword and character literals respectively. If /|parms|/is\n    missing, the PLIST macro loads register one with the address\n    specified by PL=.\nVL|NOVL\n    VL specifies that this is a variable length parameter list and\n    therefore the high bit of the last address in the list should be set\n    to one. NOVL says to not set the bit. NOVL is normally the default,\n    but all of the super options establish VL as the default so that\n    NOVL might be needed in certain cases.\ntag\n    Specifies the address of the parameter list to be created or\n    modified. If the PL= keyword is not specified, the parameter list is\n    created in the default parameter list storage established by an\n    enclosing BLOCK macro, or in PWA or SWA storage if no other default\n    was set up.\nnum\n    Specifies the maximum number of the parameters that the storage at\n    /|tag|/can accommodate. If /|tag|/has a length attribute that is a\n    self-defining term, this operand is not necessary. This is used to\n    insure that the specified parameter list will fit into the storage\n    at /|tag|/.\nDS=\n    Specifies that space for this list is created in the PWA or SWA with\n    a label of /|tag|/. The PL= keyword is required when using this\n    operand. The size of /|parms|/is used to calculate the size of the\n    storage created, unless /|num|/was specified on the PL= keyword. In\n    this case, the size specified by /|num|/is used.\n\n\n    Errors\n\n  *\n\n    First operand of PL keyword is required if DS keyword is specified\n\n  *\n\n    <ds> is not valid on the DS keyword\n\n  *\n\n    The PL keyword must be specified on this macro or on an enclosing\n    BLOCK macro\n\n  *\n\n    <tag> is not large enough to contain parameter list\n\n  *\n\n    Invalid parameter <vl>\n\n  *\n\n    Too many parameters specified\n\n  *\n\n    Too many parameters on PL keyword\n\n\n    Chapter 42. The PSD Macro\n\n*Table of Contents*\n\nPSD <#id506155> - Macro used to define the beginning of the Program\nStatic Data (PSD). The PSD macro uses LOCTR to locate the static data\nafter the instructions for the program. The PSD should be defined just\nbefore the PWA for a particular program block if there is one.\n\n\n    Name\n\nPSD \u00f9 Macro used to define the beginning of the Program Static Data\n(PSD). The PSD macro uses LOCTR to locate the static data after the\ninstructions for the program. The PSD should be defined just before the\nPWA for a particular program block if there is one.\n\n\n    Syntax\n\n|PSD [TYPE=LAST|PARTIAL] |\n\n\n    Operands\n\nTYPE=\n    Defines whether this is the PSD macro that defines the main body of\n    the PSD at the end of the program (LAST), or a PSD macro that\n    defines a portion of the PSD from within the body of the program\n    (PARTIAL). If TYPE= is not specified, TYPE=LAST is assumed. The\n    TYPE=PARTIAL option is included to allow macros within the body of\n    the program to define fields in the PSD and have them placed with\n    the static data.\n\n\n    Errors\n\n  *\n\n    Nested PSD and SSD macros are not allowed\n\n\n    Chapter 43. The PWA Macro\n\n*Table of Contents*\n\nPWA <#id506796> - Macro used to define the beginning of the Program Work\nArea (PWA). The PWA macro automatically reserves space for a standard OS\nsave area, the SMWA, and any parameter lists if it is appropriate for\nthe current environment. Also, if the DYN option is being used, PWA sets\nup the dynamic storage pointers (NAB, EOS-64). The PWA should be defined\nas the last thing associated with a particular program block.\n\n\n    Name\n\nPWA \u00f9 Macro used to define the beginning of the Program Work Area (PWA).\nThe PWA macro automatically reserves space for a standard OS save area,\nthe SMWA, and any parameter lists if it is appropriate for the current\nenvironment. Also, if the DYN option is being used, PWA sets up the\ndynamic storage pointers (NAB, EOS-64). The PWA should be defined as the\nlast thing associated with a particular program block.\n\n\n    Syntax\n\n|PWA [TYPE=LAST|PARTIAL] |\n\n\n    Operands\n\nTYPE=\n    Defines whether this is the PWA macro that defines the main body of\n    the PWA at the end of the program (LAST), or a PWA macro that\n    defines a portion of the PWA from within the body of the program\n    (PARTIAL). If TYPE= is not specified, TYPE=LAST is assumed. The\n    TYPE=PARTIAL option is included to allow macros within the body of\n    the program to define fields in the PWA and also generate the code\n    to initialize them. So far, this feature is only used by the PLIST\n    macro, but can be used by any user macro.\n\n\n    Errors\n\n  *\n\n    PWA option should be specified on the program block macro\n\n  *\n\n    Invalid TYPE <type> specified on PWA macro\n\n\n    Chapter 44. The RBIT Macro\n\n*Table of Contents*\n\nRBIT <#id506756> - Macro used to reset bit flags in a byte.\n\n\n    Name\n\nRBIT \u00f9 Macro used to reset bit flags in a byte.\n\n\n    Syntax\n\n|RBIT [byte,]flag|(flag[,flag[,...]]) |\n\n\n    Operands\n\nbyte\n    Byte that contains bit(s) to be reset. If this operand is omitted,\n    the name of the byte is assumed to be the first five characters of\n    the first flag name.\nflag\n    Byte mask with a binary one in the bit position of the mask that\n    corresponds to the bit to be reset in the byte.\n\n\n    Errors\n\n  *\n\n    No more than eight flags can be specified\n\n  *\n\n    RBIT macro can have no more than two operands\n\n  *\n\n    If byte is not specified, flag name must be at least six characters long\n\n  *\n\n    If byte is not specified, the first five characters of all flags\n    must match\n\n\n    Chapter 45. The SBIT Macro\n\n*Table of Contents*\n\nSBIT <#id503120> - Macro used to set bit flags in a byte.\n\n\n    Name\n\nSBIT \u00f9 Macro used to set bit flags in a byte.\n\n\n    Syntax\n\n|SBIT [byte,]flag|(flag[,flag[,...]]) |\n\n\n    Operands\n\nbyte\n    Byte that contains bit(s) to be set. If this operand is omitted, the\n    name of the byte is assumed to be the first five characters of the\n    first flag name.\nflag\n    Byte mask with a binary one in the bit position of the mask that\n    corresponds to the bit to be set in the byte.\n\n\n    Errors\n\n  *\n\n    No more than eight flags can be specified\n\n  *\n\n    SBIT macro can have no more than two operands\n\n  *\n\n    If byte is not specified, flag name must be at least six characters long\n\n  *\n\n    If byte is not specified, the first five characters of all flags\n    must match\n\n\n    Chapter 46. The SMCTRL Macro\n\n*Table of Contents*\n\nSMCTRL <#id503105> - Macro used to set internal flags to affect the\noperation of the Structured Macros.\n\n\n    Name\n\nSMCTRL \u00f9 Macro used to set internal flags to affect the operation of the\nStructured Macros.\n\n\n    Syntax\n\n|SMCTRL FREEPWA=yesno |\n\n\n    Operands\n\nyesno\n    Can be YES or NO to set an internal free PWA flag on or off. When\n    this flag is on, the ENDBLK macro for the program block frees the\n    PWA. This parameter in only valid if the REUSPWA option is in effect.\n\n\n    Errors\n\n  *\n\n    The FREEPWA keyword is only valid if the REUSPWA option is in effect\n\n  *\n\n    FREEPWA=<value> is not valid\n\n\n    Chapter 47. The SMLIST Macro\n\n*Table of Contents*\n\nSMLIST <#id507749> - Macro used to set options for the operation of the\nStructured Macros Listing Program. This macro is processed by the\nlisting program and not the assembler.\n\n\n    Name\n\nSMLIST \u00f9 Macro used to set options for the operation of the Structured\nMacros Listing Program. This macro is processed by the listing program\nand not the assembler.\n\n\n    Syntax\n\n|SMLIST CONVERT=yesno |\n\n\n    Operands\n\nyesno\n    Can be YES or NO to begin or end the automatic conversion of\n    assembler source to upper case. All non-comment lines are converted\n    to upper case with the exception of text between double quotes. This\n    text remains unconverted and the double quotes (\") are replaced with\n    single quotes (') before passing the source on to the assembler.\n\n\n    Errors\n\n  *\n\n    INVALID SMLIST STATEMENT\n\n\n    Chapter 48. The SMSYMS Macro\n\n*Table of Contents*\n\nSMSYMS <#id507938> - This is not a macro, but is a copy member that must\nbe included at the beginning of any program that uses the structure\nlocation symbols described in Location and Scope of Data Structures.\n\n\n    Name\n\nSMSYMS \u00f9 This is not a macro, but is a copy member that must be included\nat the beginning of any program that uses the structure location symbols\ndescribed in Chapter 11, <##scope>/Location and Scope of Data\nStructures/ <##scope>.\n\n\n    Syntax\n\n|COPY SMSYMS |\n\n\n    Operands\n\nNone.\n\n\n    Errors\n\nNone.\n\n\n    Chapter 49. The SSD Macro\n\n*Table of Contents*\n\nSSD <#id507464> - Macro used to define the beginning of the Subroutine\nStatic Data (SSD). The SSD macro uses LOCTR to locate the static data.\nIf the subroutine has selected the LOADBASE option, the static data is\nplaced immediately after the subroutine code in the object module. If\nthe subroutine is not using LOADBASE, the subroutine static data is\nplaced with the program static data. The SSD should be defined just\nbefore the SWA for a particular subroutine block.\n\n\n    Name\n\nSSD \u00f9 Macro used to define the beginning of the Subroutine Static Data\n(SSD). The SSD macro uses LOCTR to locate the static data. If the\nsubroutine has selected the LOADBASE option, the static data is placed\nimmediately after the subroutine code in the object module. If the\nsubroutine is not using LOADBASE, the subroutine static data is placed\nwith the program static data. The SSD should be defined just before the\nSWA for a particular subroutine block.\n\n\n    Syntax\n\n|SSD [TYPE=LAST|PARTIAL] |\n\n\n    Operands\n\nTYPE=\n    Defines whether this is the SSD macro that defines the main body of\n    the SSD at the end of the subroutine (LAST), or an SSD macro that\n    defines a portion of the SSD from within the body of the subroutine\n    (PARTIAL). If TYPE= is not specified, TYPE=LAST is assumed. The\n    TYPE=PARTIAL option is included to allow macros within the body of\n    the subroutine to define fields in the SSD and have them placed with\n    the static data.\n\n\n    Errors\n\n  *\n\n    Nested PSD and SSD macros are not allowed\n\n\n    Chapter 50. The STRSA Macro\n\n*Table of Contents*\n\nSTRSA <#id507155> - Macro used to store a register's value in the\nSubroutine Work Area (SWA) save area. If an internal subroutine contains\nan SWA, registers are automatically restored when the subroutine is\nexited. If the internal subroutine needs to pass back the value of a\nregister, it can use this macro to save a register's current value in\nthe subroutine save area, so that it is not restored to the original\nvalue when the subroutine returns.\n\n\n    Name\n\nSTRSA \u00f9 Macro used to store a register's value in the Subroutine Work\nArea (SWA) save area. If an internal subroutine contains an SWA,\nregisters are automatically restored when the subroutine is exited. If\nthe internal subroutine needs to pass back the value of a register, it\ncan use this macro to save a register's current value in the subroutine\nsave area, so that it is not restored to the original value when the\nsubroutine returns.\n\n\n    Syntax\n\n|STRSA reg |\n\n\n    Operands\n\nreg\n    Defines the register to be saved. /|Reg|/must be one of the\n    registers R0-R14.\n\n\n    Errors\n\n  *\n\n    Invalid register specified - <reg>\n\n  *\n\n    This macro can only be used in subroutine blocks with the SWA option\n    specified\n\n\n    Chapter 51. The SWA Macro\n\n*Table of Contents*\n\nSWA <#id508323> - Macro used to define the beginning of the Subroutine\nWork Area (SWA). The SWA macro automatically reserves space for a\nsubroutine save area, a SMWA, any parameter lists used by the\nsubroutine, and the Dynamic Storage Management pointers if needed. The\nSWA for a subroutine should be defined immediately after the ENDBLK for\nthat subroutine. The SWA macro insures that any fields specified within\nthe SWA are aligned properly.\n\n\n    Name\n\nSWA \u00f9 Macro used to define the beginning of the Subroutine Work Area\n(SWA). The SWA macro automatically reserves space for a subroutine save\narea, a SMWA, any parameter lists used by the subroutine, and the\nDynamic Storage Management pointers if needed. The SWA for a subroutine\nshould be defined immediately after the ENDBLK for that subroutine. The\nSWA macro insures that any fields specified within the SWA are aligned\nproperly.\n\n\n    Syntax\n\n|SWA [TYPE=LAST|PARTIAL] |\n\n\n    Operands\n\nTYPE=\n    Defines whether this is the SWA macro that defines the main body of\n    the SWA at the end of the subroutine (LAST), or an SWA macro that\n    defines a portion of the SWA from within the body of the subroutine\n    (PARTIAL). If TYPE= is not specified, TYPE=LAST is assumed. The\n    TYPE=PARTIAL option is included to allow macros within the body of\n    the subroutine to define fields in the SWA and also generate the\n    code to initialize them. So far, this feature is only used by the\n    PLIST macro, but can be used by any user macro.\n\n\n    Errors\n\n  *\n\n    SWA option was not specified on the subroutine block macro or SWA\n    already defined\n\n  *\n\n    Invalid TYPE <type> specified on SWA macro\n\n\n    Chapter 52. The TBIT Macro\n\n*Table of Contents*\n\nTBIT <#id508190> - Macro used to test bit flags in a byte.\n\n\n    Name\n\nTBIT \u00f9 Macro used to test bit flags in a byte.\n\n\n    Syntax\n\n|TBIT [byte,]flag|(flag[,flag[,...]]) |\n\n\n    Operands\n\nbyte\n    Byte that contains bit(s) to be tested. If this operand is omitted,\n    the name of the byte is assumed to be the first five characters of\n    the first flag name.\nflag\n    Byte mask with a binary one in the bit position of the mask that\n    corresponds to the bit to be tested in the byte.\n\n\n    Errors\n\n  *\n\n    No more than eight flags can be specified\n\n  *\n\n    TBIT macro can have no more than two operands\n\n  *\n\n    If byte is not specified, flag name must be at least six characters long\n\n  *\n\n    If byte is not specified, the first five characters of all flags\n    must match\n\n  *\n\n    This expression requires the Level H assembler\n\n\n    Chapter 53. The TREG Macro\n\n*Table of Contents*\n\nTREG <#id508957> - Macro used to test a register for zero, positive, or\nnegative.\n\n\n    Name\n\nTREG \u00f9 Macro used to test a register for zero, positive, or negative.\n\n\n    Syntax\n\n|TREG reg |\n\n\n    Operands\n\nreg\n    Register to be tested.\n\n\n    Errors\n\n  *\n\n    TREG macro can have one and only one operand\n\n\n    Chapter 54. The ##COND Macro\n\n*Table of Contents*\n\n##COND <#id508596> - This is an internal macro for use within other\nmacros and not in open code. The ##COND macro tests a conditional\nexpression and branches to the appropriate success or failure tags. This\nmacro is intended for use in user condition macros. For information\nabout writing a user condition macro, see User-Defined Conditions.\n\n\n    Name\n\n##COND \u00f9 This is an internal macro for use within other macros and not\nin open code. The ##COND macro tests a conditional expression and\nbranches to the appropriate success or failure tags. This macro is\nintended for use in user condition macros. For information about writing\na user condition macro, see the section called \u00f4User-Defined Conditions\u00f6\n<##ucond>.\n\n\n    Syntax\n\n|##COND expr,S=stag,F=ftag,L=logic |\n\n\n    Operands\n\nexpr\n    The conditional expression to be evaluated. This can be any valid\n    conditional expression and can contain previously defined user\n    conditions.\nstag\n    The name of the tag that marks the beginning of the code to be\n    executed if the condition is true.\nftag\n    The name of the tag that marks the beginning of the code to be\n    executed if the condition is false.\nlogic\n    Either P for positive logic (branch to success if condition is true)\n    or N for negative logic (branch to failure, skipping over success\n    code if condition is false). These last three operands are usually\n    passed unchanged from the operands passed in on the user condition\n    macro that is invoking ##COND.\n\n\n    Errors\n\n  *\n\n    Invalid option <cond> for #TEST condition\n\n  *\n\n    Invalid or missing condition expression\n\n  *\n\n    Invalid number of parms for <op>\n\n  *\n\n    This expression requires the Level H assembler\n\n  *\n\n    Invalid condition <cond>\n\n  *\n\n    No more than 51 positional parameters can be specified in a condition\n\n\n  Part III. Appendices\n\n*Table of Contents*\n\nA. Catalogued ASM Procedures At Clemson <##asmproc>\nB. Internal Macros Error Messages <##interr>\nC. Work Area Storage Layout <##dynform>\n\nWork Area Layout with the DYN Option <#id523172>\nWork Area Layout with NODYN and ENVIRON=DC <#id523607>\nWork Area Layout with NODYN and ENVIRON=OS <#id523779>\nWork Area Layout with NODYN and ENVIRON=PLI <#id523952>\n\nD. Program Code and Static Data Layout <##codform>\nE. Register Usage <#id524857>\n\nRegister Usage for ENVIRON=DC <#id524845>\n\nIDMS/DC User Mode Registers And Linkage <#id524797>\nIDMS/DC System Mode Registers And Linkage <#id525576>\n\nRegister Usage for ENVIRON=OS <#id525792>\nRegister Usage for ENVIRON=PLI <#id525943>\n\nF. Summary of Amendments <#id526825>\n\nUpdate November 6, 1989 <#id526837>\nUpdate April 19, 1989 <#id526241>\nUpdate October 1, 1987 <#id526986>\nUpdate March 11, 1987 <#id527042>\n\n\n    Appendix A. Catalogued ASM Procedures At Clemson\n\nThere are four catalogued procedures available at Clemson that provide\naccess to the Structured Macros: these are ASMP, ASMPC, ASMPCL, and\nASMPCLG. These procs perform a preprocess; preprocess and assemble;\npreprocess, assemble, and link; or preprocess, assemble, link, and go\nrespectively.\n\nThe Structured Macro preprocessor (MSC0150$) does not change the source\ninput, but analyzes the use of the Structured Macros and produces a\nnesting level report. After you have had some time to get used to it,\nthe nesting level report becomes very useful. Use //P.SYSIN to provide\niyour assembler source.\n\nThe assembly step executes the Level H Assembler with the options\nXREF(SHORT), TERM and OBJECT. A //SYSTERM DD statement is included in\nthe procs, because it appears to be one of the more popular assembler\noptions. //SYSLIB concatenates SYS1.MACLIB and SYS2.STRUC.MACLIB. Note\nthat SYS2.MACLIB is not included, and must be included manually if desired.\n\nThe link-edit step follows the same conventions as the other Clemson\ncompile-and-link procs, in that link-edit control cards can be provided\nvia //L.SYSIN. Parms LIST and MAP are provided by the proc.\n\nThe three procs have the following keyword parameters available:\n\nKeyword\n\n\n\nIn Procs\n\n\n\nDefault\n\n\n\nUsed For:\n\nSYSOUT\n\n\n\nAll\n\n\n\nA\n\n\n\nListing SYSOUT class\n\nOBJECT\n\n\n\nAll but ASMP\n\n\n\nDUMMY\n\n\n\nASM SYSPUNCH\n\nCOPT\n\n\n\nAll but ASMP\n\n\n\n<null>\n\n\n\nASM parameters\n\nLOPT\n\n\n\nASMPCL, ASMPCLG\n\n\n\n<null>\n\n\n\nLinkedit parameters\n\nPDS\n\n\n\nASMPCL\n\n\n\n<null>\n\n\n\nLoadlib for L.SYSLMOD\n\nNAME\n\n\n\nASMPCL\n\n\n\n<null>\n\n\n\nLoad module name\n\n\n    Appendix B. Internal Macros Error Messages\n\nThe following is a list of error messages that can be produced by\ninternal macros used by the Structured Macros. The character preceding\nthe message indicates: *-informational, 4-warning, and 8-error. Words\nenclosed in angle brackets are replaced with the appropriate text when\nthe message is issued.\n\n##COND\n\n  *\n        8-Invalid option <cond> for #TEST condition\n  *\n        8-Invalid or missing condition expression\n  *\n        8-Invalid number of parms for <op>\n  *\n        8-This expression requires the Level H assembler\n  *\n        8-Invalid condition <cond>\n  *\n        8-Invalid T=\n  *\n        8-No more than 51 positional parameters can be specified in a\n        condition\n\n##EESTD\n\n  *\n        8-R0 keyword can not be specified if option RTNR0 is not in effect\n  *\n        8-R1 keyword can not be specified if option RTNR1 is not in effect\n  *\n        8-SMWA= keyword needs to be specified on program block\n\n##EPSTD\n\n  *\n        8-AMODE=<amode> is invalid on <type> block, keyword ignored\n        :li-AMODE ignored unless XA option specified for program block\n  *\n        8-Invalid number of parameters in SAVE= keyword\n\n##IESTD\n\n  *\n        8-SMWA= keyword needs to be specified on program block macro\n\n##IGMSG\n\n  *\n        4-<kwdname>=<kwd> ignored\n\n##IPSTD\n\n  *\n        8-AMODE=<amode> is invalid on <type> block, keyword ignored\n        :li-AMODE ignored unless XA option specified for program block\n  *\n        8-AMODE 24 or 31 must be specified on containing subroutine\n  *\n        8-Invalid number of parameters in SAVE= keyword\n\n##L\n\n  *\n        8-Decimal self-defining terms are the only type of self-defining\n        terms allowed\n  *\n        8-WREG is required if R0,*ADDR is used\n\n##LA\n\n  *\n        8-Decimal self-defining terms are the only type of self-defining\n        terms allowed\n\n##MREG\n\n  *\n        8-Register specification <reg> is invalid\n  *\n        8-Register <reg> specified multiple times\n  *\n        8-Register <reg> was not used - internal error\n  *\n        8-Invalid type of <type> on ##MREG macro - internal error\n\n##ORGS\n    *-For subroutine <subname> when called from subroutine <subname>\n##PEDC\n\n  *\n        8-R0= invalid if option RTNR0 not specified\n  *\n        8-R1= invalid if option RTNR1 not specified\n\n##PEOS\n\n  *\n        8-R0 keyword can not be specified if option RTNR0 is not in effect\n  *\n        8-R1 keyword can not be specified if option RTNR1 is not in effect\n\n##PPDC\n\n  *\n        8-Invalid option <opt>\n  *\n        4-RMODE and AMODE ignored if MODE option not specified\n  *\n        4-RMODE and AMODE ignored if XA option not specified\n        :li-SYSTEM-MODE GETSTG generated :li-#GETSTK generated: #GETSTK\n        =(value)\n  *\n        8-#START option required if SYSTEM option specified\n  *\n        8-#RETURN-related operands not allowed with SYSTEM option\n  *\n        8-#START/#RTN options not allowed with NOSYSTEM option\n  *\n        8-#RETURN option not allowed with SYSTEM option\n  *\n        8-EP option not allowed with NOSYSTEM option\n  *\n        8-AMODE and RMODE requested are inconsistent\n  *\n        8-GETSTK option requires SYSTEM option\n  *\n        8-GETSTK option requires PWA option\n  *\n        8-MPMODE option requires SYSTEM and #START options\n\n##PPOS\n\n  *\n        8-Invalid option &OPT\n  *\n        4-Option DYN assumed because of option MAIN\n  *\n        4-Option PWA assumed because of option DYN\n  *\n        4-DYNSIZE can not be specified without option DYN\n  *\n        8-Name required on program block macro\n  *\n        4-RMODE and AMODE ignored if MODE option not specified\n  *\n        4-RMODE and AMODE ignored if XA option not specified\n  *\n        4-SVAREA= ignored when PWA option specified\n  *\n        8-First PWAREG must be R13 :li-SAVEAREA option assumed because\n        of PWA option\n  *\n        4-SVAREA= ignored when RENT and SAVEAREA option specified\n        :li-SAVEAREA option assumed because of SVAREA= keyword\n        :li-Assuming register 1 is saved\n  *\n        8-Option REUSPWA requires the PWA, RENT and SAVE options\n  *\n        4-Option FNCODE is ignored when the REUSPWA option is not in effect\n  *\n        8-Option ESV requires the PWA and RENT options\n  *\n        8-Option CLRDEBUG requires the ESV option\n\n##PPPLI\n\n  *\n        8-Invalid option <opt>\n  *\n        8-With ENVIRON=PLI, first BASEREG must be R11\n  *\n        8-With ENVIRON=PLI, first PWAREG must be R13\n  *\n        8-Name required on program block macro\n  *\n        4-RMODE and AMODE ignored if MODE option not specified\n  *\n        4-RMODE and AMODE ignored if XA option not specified\n\n##PRMOPT\n\n  *\n        8-USING option requires two parameters\n  *\n        8-COPYERROR option requires two or three parameters\n  *\n        8-<opt> is an invalid suboption of the PARMS option\n  *\n        8-PARMS and PARMMAP keywords require the PARMS option\n  *\n        8-PARMS and PARMMAP keywords are mutually exclusive\n  *\n        8-Too many parameters specified on PARMMAP keyword\n  *\n        8-Second parameter required on PARMMAP keyword if COPY PARMS\n        option is specified\n  *\n        8-<type> is invalid\n  *\n        8-##PRMOPT does not support <opt> option\n  *\n        8-<process> is an invalid value for PROCESS keyword\n  *\n        8-The first parameter in PARM options must be PARMS\n\n##SPSTD\n\n  *\n        8-SAVE= invalid if SWA option specified\n  *\n        8-SWA option requires PWA option on program block\n  *\n        8-SWAREG= can not be specified unless OPTION=SWA is specified\n  *\n        8-AMODE= invalid for custom subroutine blocks\n  *\n        8-SAVE= invalid for custom subroutine blocks\n  *\n        8-CUSTOM must be specified alone\n  *\n        8-AMODE=<amode> is invalid on subroutine block, keyword ignored\n        :li-LOADBASE assumed because BASEREG= specified\n  *\n        8-BLOCK TYPE=SUBROUTINE requires NAME=\n  *\n        8-LOADBASE option requires LONG option on program block\n  *\n        8-RECUR keyword requires DYN option on program block\n  *\n        8-R11 must be the first register specified on the SWAREG=\n        keyword :li-AMODE ignored unless XA option specified on program\n        block\n  *\n        8-Invalid number of parameters in SAVE= keyword\n\n##ST\n\n  *\n        8-*ADDR form of second operand requires WREG=\n\n##SUBOPT\n\n  *\n        8-<opt> is an invalid option for subroutine block\n\n##SWREG\n\n  *\n        8-SMWA= keyword is required on the program block macro to\n        support this function\n\n##UCOND\n\n  *\n        8-Invalid or undefined user condition name: <cond>\n\n##UPSTD\n\n  *\n        8-SWA option was not specified on the subroutine block macro or\n        SWA already defined\n  *\n        8-Invalid type <type> specified on SWA macro\n\n##WESTD\n    *-<subname> first from index is <num>\n    *-<num> CALLSUB from <subname>(<num>) to <subname>(<num>)\n##WPDC\n\n  *\n        8-PWA option should be specified on the program block macro\n  *\n        8-Invalid type <type> specified on PWA macro\n\n##WPOS\n\n  *\n        8-PWA option should be specified on the program block macro\n  *\n        8-Invalid type <type> specified on PWA macro\n\n##WPPLI\n\n  *\n        8-PWA option should be specified on the program block macro\n  *\n        8-Invalid type <type> specified on PWA macro\n\n\n    Appendix C. Work Area Storage Layout\n\n*Table of Contents*\n\nWork Area Layout with the DYN Option <#id523172>\nWork Area Layout with NODYN and ENVIRON=DC <#id523607>\nWork Area Layout with NODYN and ENVIRON=OS <#id523779>\nWork Area Layout with NODYN and ENVIRON=PLI <#id523952>\n\nIf you are using PWAs and SWAs (with or without the DYN option), the\nStructured Macros automatically allocate many fields for you. Since the\nmacros also manage these fields, you rarely need to worry about them.\nHowever, there may be some cases in which it would be useful to know the\nlayout of PWA and SWA storage. That is what this appendix describes.\n\n\n    Work Area Layout with the DYN Option\n\nThe DYN option is only available for program blocks with ENVIRON=OS in\neffect.\n\nAs described in Chapter 5, <##pwaswa>/Program and Subroutine Work Areas/\n<##pwaswa>, the DYN option acquires a single large chunk of storage at\nthe beginning of the program and partitions it as it is needed for\ninternal subroutine SWAs. The layout of the dynamic storage follows.\n\n*Table C.1. Dynamic Storage Layout*\n\nPWA\n\n\n\nSWA\n\n\n\nSWA\n\n\n\n. . .\n\n\n\nPWA\n\n\n\nSWA\n\n\n\n. . .\n\n\n\nNAB?Free\n\n\n\n(EOS-64)?16 Words\n\nThe first thing in dynamic storage is the main program's PWA followed by\nany SWAs that happen to be active for that program. If the main program\ninvokes an external subroutine that uses *NOMAIN, another PWA is\ngenerated for that program, followed by its SWAs. At the end is free\nstorage waiting to be allocated. The current NAB (Next Available Byte)\ncontains a pointer to the beginning of free storage. See the following\nto see how to find the current NAB.\n\nWhile EOS (End Of Storage) actually marks the end of the block of\nstorage that was GETMAINed, a pointer is kept to EOS-64 instead. This\nprovides a 16 word (64 byte) \u00f4safety zone\u00f6 for use by the internal\nsubroutine linkage routines. These extra bytes insure that there are\nalways at least 16 words left in dynamic storage when a subroutine is\nentered. Because of this buffer, the subroutine can save its registers\nbefore it has to calculate remaining space and update the pointers.\n\nWithin dynamic storage, all PWAs and SWAs start on a double word\nboundary. This is to insure that any fields defined within their DSECTs\nas double words actually have that alignment.\n\nThe preceding diagram shows that dynamic storage is divided up into PWAs\nand SWAs. The format of a single PWA is shown in the following.\n\n*Table C.2. Single PWA Format*\n\nR13?Save Area (18F)\n\n\n\nEOS-64\n\n\n\nReserved\n\n\n\nNAB\n\n\n\nPartial PWA\n\n\n\nSMWA ^[a <#ftn.id523338>]\n\n\n\nPL ^[b <#ftn.id523350>]\n\n\n\nUser Defined\n\n^[a <#id523338>] The SMWA is variable in length.\n\n^[b <#id523350>] The PL storage is as large as required.\n\nFirst is an 18 word, standard OS save area for this program. It is used\nanytime the program calls an external subroutine. This could be either\nan IBM service or a separately compiled module. By putting the save area\nat the beginning of the PWA and pointing register 13 to it, we can use\nthis register to keep up with both the current save area and the\nbeginning of PWA storage.\n\nFollowing the save area is a pointer to EOS-64. This field defines the\nend of the block of dynamic storage that this PWA resides in. This field\nis filled in even for a *NOMAIN PWA. The EOS-64 pointer is used in\nsubroutine linkages to determine if there is enough storage left for an\nSWA. Following this pointer is a fullword reserved for future use.\n\nNext comes the NAB (Next Available Byte) for this PWA. This NAB points\nto the first byte after this PWA. If there are no active SWAs following\nthis PWA, the NAB points to the start of free storage. Otherwise, it\npoints to the first SWA following the PWA.\n\nFollowing the NAB are any fields defined by a PWA TYPE=PARTIAL macro.\nThese fields might have been defined by user macros, or by the DS=PWA\nkeyword on the PLIST macro. These fields can be any length. Also in the\npartial PWA are parameter list fields for any internal subroutines that\ndo not have SWAs.\n\nFollowing the partial fields is the SMWA (Structured Macros Work Area).\nNote that the SMWA can be variable in length or absent. If you specify a\nrelocatable address for the SMWA, one is not allocated automatically.\n\nNext is any space reserved for dynamically defined parameter lists in\nthe program block. These lists are any that do not have a PL=tag coded\non the PLIST macro or any enclosing block. Note that only enough space\nfor the largest such list is reserved instead of for all the lists. All\nof these dynamic lists are created in the same place. For more\ninformation on PLIST processing, see Chapter 10, <##parms>/Parameter\nLists and Standard Linkage/ <##parms>. This field can also be variable\nin length or missing.\n\nFinally come any fields that you coded between the PWA and ENDPWA\nmacros. These continue until the end of the PWA.\n\nA PWA remains in dynamic storage as long as its program is running. The\nPWA is followed by any active SWAs for that program's internal\nsubroutines. The SWAs are created and destroyed as the subroutines are\nentered and exited. The format of a single SWA is shown in the following.\n\n*Table C.3. Single SWA Format*\n\nR11?NAB\n\n\n\nR0-R14 Save\n\n\n\nPartial SWA\n\n\n\nSMWA ^[a <#ftn.id523518>]\n\n\n\nPL ^[b <#ftn.id523532>]\n\n\n\nUser Defined\n\n^[a <#id523518>] The SMWA for subroutines is not used and is of zero length.\n\n^[b <#id523532>] The PL storage is as large as required.\n\nThe SWA looks very much like a PWA with a few fields missing. The only\nsignificant difference is the 15 word subroutine save area. Note that\nthis is an internal subroutine save area, and not a standard OS save\narea. The NAB for a subroutine points to the first available byte after\nthat subroutine's SWA. If this is the last SWA currently in dynamic\nstorage, this NAB points to the beginning of free space. Otherwise, it\ncontains the address of the next SWA (or PWA) in dynamic storage.\n\nR11 always points to the beginning (i.e. the NAB) of the currently\nactive subroutine. If there is no subroutine active, R11 points to the\nNAB from the current PWA. Therefore, R11 not only provides us with a\nbase for our SWA, it always points to the most current NAB.\n\nThis storage scheme is very easy to maintain and perform linkages on.\nWhen an internal subroutine is entered, it uses R15 (this is why R15 is\ndestroyed with the DYN option) to calculate where its SWA will go from\nthe current NAB (pointed to by R11). It then saves its registers in this\nnew SWA and calculates a new NAB. If there is enough room for this SWA,\nthe subroutine updates R11 to point to its NAB and the linkage is\ncomplete. Adding a new PWA is a similar process. The reverse linkage is\neven easier. Since the pointer to the current NAB is kept in a register,\nthe act of restoring registers at the end of a subroutine returns the\ndynamic storage environment to the state it was in before the subroutine\nwas entered. The same holds true for eliminating a PWA when an *NOMAIN\nprogram is exited.\n\n\n    Work Area Layout with NODYN and ENVIRON=DC\n\nThe work area layout for an ENVIRON=DC program is nearly identical with\nthat of an ENVIRON=OS program: the only differences are that the PWA\ndoes not contain an 18-word OS savearea, and the PWA in an ENVIRON=DC\nprogram is addressed by some register other than R13 (usually R11).\n\n*Table C.4. NODYN and ENVIRON=DC Work Area Layout*\n\nR11?Partial PWA\n\n\n\nSMWA ^[a <#ftn.id523659>]\n\n\n\nPL ^[b <#ftn.id523671>]\n\n\n\nUser Defined\n\n^[a <#id523659>] The SMWA is variable in length.\n\n^[b <#id523671>] The PL storage is as large as required.\n\nAn SWA in a NODYN program is represented in the following. It is\nidentical to the SWA for an ENVIRON=OS program with the NODYN option.\n\n*Table C.5. SWA in NODYN ENVIRON=DC Format*\n\n^[a <#ftn.id523723>] R0-R14 Save\n\n\n\nPartial SWA\n\n\n\nSMWA ^[b <#ftn.id523741>]\n\n\n\nPL ^[c <#ftn.id523755>]\n\n\n\nUser Defined\n\n^[a <#id523723>] With NODYN, the SWA is addressed off of the PWA base.\n\n^[b <#id523741>] The SMWA for subroutines is not used and is of zero length.\n\n^[c <#id523755>] The PL storage is as large as required.\n\nENVIRON=DC does not support the DYN option.\n\n\n    Work Area Layout with NODYN and ENVIRON=OS\n\nIf the DYN option is not being used, the program can still have a PWA.\nIf this is the case, the PWA is of the following format:\n\n*Table C.6. NODYN and ENVIRON=OS Work Area Layout*\n\nR13?Save Area (18F)\n\n\n\nPartial PWA\n\n\n\nSMWA ^[a <#ftn.id523829>]\n\n\n\nPL ^[b <#ftn.id523841>]\n\n\n\nUser Defined\n\n^[a <#id523829>] The SMWA is variable in length.\n\n^[b <#id523841>] The PL storage is as large as required.\n\nThe PWA for a NODYN program looks very much like the PWA created in\ndynamic storage, except that the pointers used to keep up with dynamic\nstorage are not there. Also, any SWAs defined by this program reside in\nthe partial PWA area.\n\nAn SWA in a NODYN program is represented below. Remember that this\nstorage is actually allocated within the PWA's partial field.\n\n*Table C.7. SWA in NODYN ENVIRON=OS Format*\n\n^[a <#ftn.id523900>] R0-R14 Save\n\n\n\nPartial SWA\n\n\n\nSMWA ^[b <#ftn.id523918>]\n\n\n\nPL ^[c <#ftn.id523932>]\n\n\n\nUser Defined\n\n^[a <#id523900>] With NODYN, the SWA is addressed off of the PWA base.\n\n^[b <#id523918>] The SMWA for subroutines is not used and is of zero length.\n\n^[c <#id523932>] The PL storage is as large as required.\n\n\n    Work Area Layout with NODYN and ENVIRON=PLI\n\nThe work area layout for ENVIRON=PLI is the same as the layout for\nENVIRON=OS with option NODYN in effect with the exception that the save\narea is replaced by a PL/I DSA. A DSA starts with an OS save area with\nthe first word used for PL/I housekeeping. The forward link in the save\narea is not used. The save area is followed by other PL/I housekeeping\nfields. The format of the DSA is described in detail in the execution\ntime logic manual for the PL/I Optimizing Compiler.\n\n*Table C.8. NODYN and ENVIRON=PLI Work Area Layout*\n\nR13?PL/I DSA\n\n\n\nPartial PWA\n\n\n\nSMWA ^[a <#ftn.id524008>]\n\n\n\nPL ^[b <#ftn.id524021>]\n\n\n\nUser Defined\n\n^[a <#id524008>] The SMWA is variable in length.\n\n^[b <#id524021>] The PL storage is as large as required.\n\n\n    Appendix D. Program Code and Static Data Layout\n\nThe use of the LOCTR instruction in the Level H Assembler allows the\nStructured Macros to gather code under different location counters and\nplace them at the proper point in the load module. To preserve the\nintegrity of the structure that the macros produce, a program should be\ncoded in the manner shown below.\n\n*Example D.1. Structured Macros Use of Location Counters*\n\n BLOCK  TYPE=PROGRAM,NAME=MAINPROG,OPTIONS=(*MAIN,LONG),\n               SUBOPTS=(*SWA,LOADBASE)\n       :\n  CALLSUB SUBONE\n       :\n ENDBLK BLOCK=MAINPROG\n\n BLOCK  TYPE=SUBROUTINE,NAME=SUBONE\n       :\n  CALLSUB SUBTWO\n       :\n ENDBLK BLOCK=SUBONE\n SWA\n  --- SWA Fields for SUBONE ---\n ENDSWA\n\n BLOCK  TYPE=SUBROUTINE,NAME=SUBTWO,RECUR=10\n       :\n  CALLSUB SUBTWO\n       :\n ENDBLK BLOCK=SUBTWO\n SSD\n  --- Subroutine Static Data for SUBTWO ---\n ENDSSD\n SWA\n  --- SWA Fields for SUBTWO ---\n ENDSWA\n\n BLOCK  TYPE=SUBROUTINE,NAME=SUBTHREE,OPTIONS=(NOLOADBASE)\n       :\n  CALLSUB SUBTHREE\n       :\n ENDBLK BLOCK=SUBTHREE\n SSD\n  --- Subroutine Static Data for SUBTHREE ---\n ENDSSD\n\n PSD\n  --- Program Static Data ---\n ENDPSD\n PWA\n  --- PWA FIELDS ---\n ENDPWA\n\n\nNote that not all programs require all of these options. If SUBTWO was\nnot recursive, we would not need Dynamic Storage Management. However, it\ncan still be of assistance in reducing storage needs. SWAs, SSDs, and\nthe PSD only need to be coded if there are fields to define there. If\nthese areas are needed by the macros, they create them if you have not.\nHowever, /the PWA and ENDPWA macros must always be coded if the program\nuses the PWA option./\n\n\n      Note\n\nIf the NOLOCTR option has been selected, the macros do not generate\nLOCTRs to arrange the code, and the CSECT is arranged as it was coded.\n\nWhen the load module is actually created by the Assembler, the layout of\na single CSECT looks like the example in the following table.\n\n*Table D.1. CSECT Layout*\n\nProgram Code ^[a <#ftn.id525040>]\n\n\n\nSubroutine Code ^[b <#ftn.id525051>]\n\n\n\nPartial PSD ^[c <#ftn.id525064>]\n\n\n\nPSD User Fields ^[d <#ftn.id525084>]\n\n\n\nSubroutine Code ^[e <#ftn.id525098>]\n\n\n\nSSD ^[f <#ftn.id525111>]\n\n^[a <#id525040>] First in the CSECT is the code from the program block\nitself.\n\n^[b <#id525051>] Following the program code is the code for any\nsubroutines that did not specify LOADBASE. This allows these subroutines\nto be addressed off of the program's base register.\n\n^[c <#id525064>] The partial PSD contains any PSD fields defined within\nthe body of the program. Also included here are the SSDs from the\nsubroutines without LOADBASE. The partial PSD along with the PSD user\nfields are addressed off of the program's base register.\n\n^[d <#id525084>] The PSD user fields are any static data coded between\nthe PSD and ENDPSD macros at the end of the program.\n\n^[e <#id525098>] The subroutine code for any subroutines that use the\nLOADBASE option is placed after the PSD. If there are no subroutines\nthat use LOADBASE, this area and the next one are missing.\n\n^[f <#id525111>] Following the code for a LOADBASE subroutine is the\nstatic data (SSD) for that subroutine. This data is addressed off of the\nsubroutine's base register. These last two areas can be repeated any\nnumber of times, once for each subroutine that uses the LOADBASE option.\n\n\n    Appendix E. Register Usage\n\n*Table of Contents*\n\nRegister Usage for ENVIRON=DC <#id524845>\n\nIDMS/DC User Mode Registers And Linkage <#id524797>\nIDMS/DC System Mode Registers And Linkage <#id525576>\n\nRegister Usage for ENVIRON=OS <#id525792>\nRegister Usage for ENVIRON=PLI <#id525943>\n\nWith so many things being done by the macros, you might not be sure what\nregisters are available for general use. This topic describes the\nregisters used by the Structured Macros.\n\n\n    Register Usage for ENVIRON=DC\n\nUser mode and system mode differ.\n\n\n      IDMS/DC User Mode Registers And Linkage\n\nUser mode programs are invoked by the following:\n\n  *\n\n    A #LINK from RHDCTSKC (task create)\n\n  *\n\n    A #LINK or #XCTL from another program\n\nUser mode registers are used as follows.\n\nR15\n    Entry point address from caller; loaded into the specified program\n    base register by the BLOCK TYPE=PROGRAM macro. Also used for\n    subroutine linkage if the LONG option is used.\nR14\n    This is used for returning from subroutine blocks.\nR13\n    Not used.\nR12\n    Default program base register.\nR11\n    Default PWA base register.\nR10\n    Address of the IDMS/DC CSA on entry, although this register can be\n    used for other things by the program.\nR9\n    Address of the IDMS/DC task's TCE on entry, although this register\n    can be used for other things by the program.\nR2-R8\n    Not used.\nR1\n    Address of parameter list from calling program, if any\nR0\n    Not used.\n\nRegisters are always saved across requests for IDMS/DC services, except\nfor R14, R15, R0 and R1.\n\nThe assembler program should include an interface, either by coding a\n#BALI macro among your constants somewhere, or by specifying INCLUDE\nIDMSLIB(IDMSBALI) to the linkage editor.\n\nUser mode programs must return to IDMS/DC using the #RETURN macro. If\nyou use the NO#RETURN option, you must code a #RETURN yourself at some\npoint after the program block's ENDBLK macro.\n\n\n      IDMS/DC System Mode Registers And Linkage\n\nSystem mode programs are invoked by a #CALL from another system-mode\nprogram. Should you want to call an external routine, use #CALL instead\nof CALLX.\n\nSystem mode registers are used as follows.\n\nR15\n    Entry point address from caller; loaded into the specified program\n    base register by the BLOCK TYPE=PROGRAM macro. Also used for\n    internal subroutine linkage if the LONG option is used.\nR14\n    This is used for returning from subroutine blocks.\nR13\n    Not used.\nR12\n    Program base register.\nR11\n    Default PWA base register, for PWA's obtained by either #GETSTG or\n    #GETSTK.\nR10\n    Address of the IDMS/DC CSA. This should not be modified by the program.\nR9\n    Address of the IDMS/DC task's TCE. This should not be modified by\n    the program.\nR2-R8\n    Not used.\nR1\n    Address of parameter list from calling program, if any\nR0\n    Not used.\n\nRegisters R13 and R15-R1 are never saved across #CALLs.\n\nRegisters R11, R12 and R14 are always saved in the current TCE's save\narea stack.\n\nThe caller of a routine is responsible for specifying which of the\nremaining registers (R2-R8) are to be saved. For example, |#CALL\npgmname,(R2-R8)|causes R2 through R8 to be saved on the TCE stack, along\nwith R11, R12 and R14.\n\n\n    Register Usage for ENVIRON=OS\n\nR15\n    This register is used for the address of the subroutine when CALLSUB\n    is used with the LONG Program Block option.\nR14\n    This register holds the return address from any subroutine block\n    called by the macros.\nR13\n    This is the base register for the PWA. Although the PWA can have\n    multiple base registers, the first one must always be R13 since the\n    standard OS save area for the program is at the beginning of the\n    PWA. If *NORENT is used and SVAREA= is not specified, R13 is the\n    first program base as well as pointing to the OS save area.\nR12\n    This is normally the base register for the program itself along with\n    any static data. If the NORENT option is being used and the SVAREA=\n    keyword was not specified, R13 is used for the base register instead\n    of R12. The BASEREG= keyword on the Program Block can be used to\n    specify a different base register (or multiple base registers).\nR11\n    If the DYN option is specified on the Program Block, R11 is used to\n    establish addressibility on the SWA of the current subroutine. This\n    register is in use even when no subroutine is currently active.\n    Although the Subroutine Block allows you to specify multiple base\n    registers for the SWA, R11 must always be the first one.\nR10\n    If the LOADBASE options is specified on the Subroutine Block, R10 is\n    used as the base register for the subroutine code. This register is\n    only in use while the LOADBASE subroutine is currently active. The\n    BASEREG= keyword on the Subroutine Block can be used to specify a\n    different base register (or multiple base registers).\n\n\n    Register Usage for ENVIRON=PLI\n\nR15\n    This register is used for the address of the subroutine when CALLSUB\n    is used with the LONG Program Block option.\nR14\n    This register holds the return address from any subroutine block\n    called by the macros.\nR13\n    This is the base register for the PWA. A PL/I DSA is contained in\n    the first part of the PWA; therefore, R13 is also the base for the\n    DSA. Although the PWA can have multiple base registers, the first\n    one must always be R13 because PL/I requires that R13 contain a\n    pointer to the DSA.\nR12\n    This is the pointer to PL/I's Task Communications Area (TCA) and\n    should never be modified by a program.\nR11\n    This is the first program base register for the program itself along\n    with any static data.\nR10\n    If the LOADBASE option is specified on the Subroutine Block, R10 is\n    used as the base register for the subroutine code. This register is\n    only in use while the LOADBASE subroutine is currently active. The\n    BASEREG= keyword on the Subroutine Block can be used to specify a\n    different base register (or multiple base registers).\n\n\n    Appendix F. Summary of Amendments\n\n*Table of Contents*\n\nUpdate November 6, 1989 <#id526837>\nUpdate April 19, 1989 <#id526241>\nUpdate October 1, 1987 <#id526986>\nUpdate March 11, 1987 <#id527042>\n\nAmendments and changes made since initial development follow.\n\n\n    Update November 6, 1989\n\n 1.\n\n    Two new macros (DEFUCOND and ##COND) are provided to allow the\n    programmer to define new conditional tests that can be inserted into\n    any conditional expression.\n\n 2.\n\n    The COPYERROR and COUNT suboptions have been added to the PARMS option.\n\n\n    Update April 19, 1989\n\n 1.\n\n    The Structured Macros now require the Level H Assembler for correct\n    operation. Do not use them with the Level F Assembler.\n\n 2.\n\n    Changes were made in the PLIST macro to allow more flexible\n    specification of parameters. Most notably, indirect referencing is\n    now supported.\n\n 3.\n\n    Symbols have been provided to allow the program to locate the start\n    of major structures such as the PWA, PSD, SWA, and SSD.\n\n 4.\n\n    An automatic prefixing facility has been added to allow programmers\n    to name storage tags in a subroutine without having to worry about\n    what tags in other subroutines have been named.\n\n 5.\n\n    A SMLIST macro has been added to control the output of the\n    Structured Macros listing program. Currently, the only option is to\n    provide for automatic conversion of the program to uppercase before\n    assembly.\n\n\n    Update October 1, 1987\n\n 1.\n\n    Support was added for writing Service Processors with the Structured\n    Macros. Service Processors are programs that are called repeatedly\n    to process one of a variety of functions, and that retain their\n    workarea between calls. To learn more about Service Processors, see\n    /Clemson University Computer Center Service Processor User's Guide\n    and Reference/. The Service Processor support includes new options\n    and keywords on the BLOCK macro and a new super option.\n\n 2.\n\n    The SMCTRL macro was added to set internal flags that affect the\n    operation of the Structured Macros. Currently, this is only used for\n    Service Processor support.\n\n\n    Update March 11, 1987\n\n 1.\n\n    An ENVIRON keyword was added to the BLOCK TYPE=PROGRAM macro to\n    allow for the different linkage conventions in different program\n    environments. Currently, the supported environments are: OS, DC, and\n    PLI.\n\n 2.\n\n    Support was added for PWAs in non-reentrant programs.\n\n 3.\n\n    R0 and R1 keywords were added to the ENDBLK macro for programs to\n    enable a program to pass back registers 0 and 1 to its caller.\n\n 4.\n\n    The error messages issued by internal macros have been moved to\n    their own section.\n\n 5.\n\n    Minor editorial changes have been made.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$ASMONE": {"ttr": 3591, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00,\\x00,\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 44, "newlines": 44, "modlines": 0, "user": "CLEMSON"}, "text": "//$ASMONE JOB ...installation jobcard...\n//*\n//* This model job is an example of how to assemble a source module\n//* using the Clemson University Structured Macros.\n//*\n//*\n//*\n//  SET MEMBER=REQUIRED\n//  SET SRVLIB=prefix.SRV.SOURCE\n//  SET LOAD=user.LOAD\n//  SET COPT='RENT'\n//  SET LOPT='RENT,REUS,REFR'\n//  SET SYSOUT='*'\n//*\n//P       EXEC PGM=MSC0150$\n//* STEPLIB  DD  DISP=SHR,DSN=library     Use if not in linklist\n//SYSPRINT DD  SYSOUT=A,DCB=BLKSIZE=141\n//SYSPUNCH DD  SPACE=(CYL,(1,1)),UNIT=SYSDA,DCB=BLKSIZE=3120,\n//             DSN=&&SRC,DISP=(,PASS)\n//*\n//* P.SYSIN should point to your source member, or use \"DD *\" inline\n//*\n//C       EXEC PGM=ASMA90,\n//             PARM='DECK,OBJECT,XREF(SHORT),TERM,&COPT',\n//             COND=(5,LT)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=&STRUCMAC.\n//* Add SYSLIBs as needed\n//*\n//SYSPRINT DD  SYSOUT=&SYSOUT.,LRECL=121\n//SYSTERM  DD  SYSOUT=&SYSOUT.\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO\n//SYSLIN   DD  DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSIN    DD  DSN=&&SRC,DISP=(OLD,DELETE)\n//SYSPUNCH DD  &OBJECT,DCB=BLKSIZE=80\n//*\n//L       EXEC PGM=IEWL,COND=(5,LT),PARM='LIST,MAP,&LOPT.'\n//SYSPRINT DD  SYSOUT=&SYSOUT\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1)),DSN=&&UT1\n//SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE),UNIT=SYSDA\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LOAD.(&MEMBER),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$ASMPCL": {"ttr": 3593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x003\\x003\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 51, "newlines": 51, "modlines": 0, "user": "CLEMSON"}, "text": "//$ASMPCL PROC  OBJECT=DUMMY,COPT=,LOPT=,PDS=NONAME,NAME=NONAME,\n//            SYSOUT=A,MAC=SYS2\n//*\n//* BATCH PROC TO ASSEMBLE/LINK A STRUCTURED MACRO SOURCE MODULE.\n//* ASSUMPTIONS:\n//*   STRUCTURED MACRO PDS NAME = SYS2.STRUC.MACLIB\n//*   SYSOUT CLASS = A\n//*   ASSEMBLE/LINK IS STANDARD NONREENTRANT\n//*\n//* EXAMPLE:\n//*\n//*   //ASMSTUFF EXEC ASMPCL,PDS='USERID.LOAD',NAME=STUFF,\n//*   //    COPT=',RENT',LOPT='RENT,REUS,REFR'\n//*   //P.SYSIN DD *\n//*     ---SOURCE CODE---\n//*   //C.SYSLIB DD\n//*   //         DD\n//*   //         DD DSN=SYS1.MODGEN,DISP=SHR\n//*   //L.SYSLIB DD DSN=SYSLIB.LOADLIB,DISP=SHR\n//*   //L.SYSIN  DD *\n//*    INCLUDE SYSLIB(SUBRTN1)\n//*    ENTRY STUFF\n//*    NAME STUFF(R)\n//*   //\n//*\n//P       EXEC PGM=MSC0150$\n//SYSPRINT DD  SYSOUT=A,DCB=BLKSIZE=141\n//SYSPUNCH DD  SPACE=(CYL,(1,1)),UNIT=DISK,DCB=BLKSIZE=3120,\n//             DSN=&&SRC,DISP=(,PASS)\n//*\n//C       EXEC PGM=ASMA90,\n//             PARM='DECK,OBJECT,XREF(SHORT),TERM&COPT',\n//             COND=(5,LT)\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=(SHR,PASS)\n//         DD  DSN=&MAC..STRUC.MACLIB,DISP=(SHR,PASS)\n//SYSPRINT DD  SYSOUT=&SYSOUT,BLKSIZE=121,LRECL=121\n//SYSTERM  DD  SYSOUT=&SYSOUT\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSLIN   DD  DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSIN    DD  DSN=&&SRC,DISP=(OLD,DELETE)\n//SYSPUNCH DD  &OBJECT,DCB=BLKSIZE=80\n//*\n//L       EXEC PGM=IEWL,COND=(5,LT),PARM='LIST,MAP&LOPT'\n//SYSPRINT DD  SYSOUT=&SYSOUT\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1)),DSN=&&UT1\n//SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE),UNIT=SYSDA\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&PDS.(&NAME),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$BOILER": {"ttr": 3595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 16, "newlines": 16, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$LICENSE": {"ttr": 3597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\xc9\\x00\\xc9\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 201, "newlines": 201, "modlines": 0, "user": "CLEMSON"}, "text": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"\u00dd\u00a8\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright \u00ddyyyy\u00a8 \u00ddname of copyright owner\u00a8\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$MEMBERS": {"ttr": 3843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00.\\x00.\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 46, "newlines": 46, "modlines": 0, "user": "CLEMSON"}, "text": "                    Clemson University Structured Macros\n\nThis library contains all macros required to write and assemble programs\nusing the Clemson University Structured Macros.\n\nThese materials are being made available to cbttape.org under the\nApache 2.0 license.  See member $LICENSE or refer to Apache's web site\nat http://www.apache.org/licenses/LICENSE-2.0\n\nNaming Conventions\n------------------\n\n  o The member describing what is in this library (this member), is\n    named $MEMBERS.\n  o The \"Structured Macros User's Guide and Reference\" manual is\n    included in the CBT package as a single html file, strucmac.html.\n\n  All members beginning with \"##\" are internal macros.  Some may be\n  useful in certain situations, such as coding DEFUCOND macros.  See\n  the documentation for more information.\n\n  All members beginning with '$' are documentation (such as it is),\n  license information or JCL examples.\n\n  All members whose names don't begin with a special character are\n  macro members.\n\n  Exception:\n\n  Member MSC0150$ is the source for the Structured Macro listing\n  program.  This program should be included as a precompile step in\n  all assembly jobs using the Macros, since it will:\n\n    a) produce a cleaner listing with nesting levels;  this listing\n       is often easier to read, since expansion of the macros can be\n       verbose at times\n    b) ensures that structures \"line up\" (BLOCK and ENDBLK, IF and\n       ENDIF, etc) and ends with a nonzero RC if it finds a problem.\n       Structure problems can be much harder to find using just the\n       assembler listing.\n\n  As part of the installation of the Structured Macros, you should\n  assemble MSC0150$ (feel free to name it whatever makes sense in\n  your shop) and link it into a public place like USER.LINKLIB.\n  Then, include it as a precompile step in Structured Macro assembly\n  jobs (see member $ASMONE for a model).\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##$DC": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x007\\x007\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 55, "newlines": 55, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##$DC\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##$DC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##$DC\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS SET DEFAULTS FOR BLOCK\n.*             START/END MACRO NAMES FOR IDMS/DC PROGRAMS\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   01/05/87 JCB - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#PPMAC,&#PEMAC,&#EPMAC,&#EEMAC\n         GBLC  &#SPMAC,&#SEMAC,&#IPMAC,&#IEMAC\n         GBLC  &#WPMAC,&#WEMAC,&#UPMAC,&#UEMAC\n&#PPMAC  SETC  '##PPDC'               PROGRAM BLOCK PROLOG MACRO NAME\n&#PEMAC  SETC  '##PEDC'               PROGRAM BLOCK EPILOG MACRO NAME\n&#EPMAC  SETC  '##EPSTD'              ERREXIT BLOCK PROLOG MACRO NAME\n&#EEMAC  SETC  '##EESTD'              ERREXIT BLOCK EPILOG MACRO NAME\n&#SPMAC  SETC  '##SPSTD'              SUBROUTINE BLOCK PROLOG MACRO\n&#SEMAC  SETC  '##SESTD'              SUBROUTINE BLOCK EPILOG MACRO\n&#IPMAC  SETC  '##IPSTD'              INLINE BLOCK PROLOG MACRO NAME\n&#IEMAC  SETC  '##IESTD'              INLINE BLOCK EPILOG MACRO NAME\n&#WPMAC  SETC  '##WPDC'               PWA PROLOG MACRO NAME\n&#WEMAC  SETC  '##WESTD'              PWA EPILOG MACRO NAME\n&#UPMAC  SETC  '##UPSTD'              SWA PROLOG MACRO NAME\n&#UEMAC  SETC  '##UESTD'              SWA EPILOG MACRO NAME\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##$OS": {"ttr": 3847, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x007\\x007\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 55, "newlines": 55, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##$OS\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##$OS\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##$OS\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS SET DEFAULTS FOR BLOCK\n.*             START/END MACRO NAMES FOR OS ENVIRONMENT PROGRAMS\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#PPMAC,&#PEMAC,&#EPMAC,&#EEMAC\n         GBLC  &#SPMAC,&#SEMAC,&#IPMAC,&#IEMAC\n         GBLC  &#WPMAC,&#WEMAC,&#UPMAC,&#UEMAC\n&#PPMAC  SETC  '##PPOS'               PROGRAM BLOCK PROLOG MACRO NAME\n&#PEMAC  SETC  '##PEOS'               PROGRAM BLOCK EPILOG MACRO NAME\n&#EPMAC  SETC  '##EPSTD'              ERREXIT BLOCK PROLOG MACRO NAME\n&#EEMAC  SETC  '##EESTD'              ERREXIT BLOCK EPILOG MACRO NAME\n&#SPMAC  SETC  '##SPSTD'              SUBROUTINE BLOCK PROLOG MACRO\n&#SEMAC  SETC  '##SESTD'              SUBROUTINE BLOCK EPILOG MACRO\n&#IPMAC  SETC  '##IPSTD'              INLINE BLOCK PROLOG MACRO NAME\n&#IEMAC  SETC  '##IESTD'              INLINE BLOCK EPILOG MACRO NAME\n&#WPMAC  SETC  '##WPOS'               PWA PROLOG MACRO NAME\n&#WEMAC  SETC  '##WESTD'              PWA EPILOG MACRO NAME\n&#UPMAC  SETC  '##UPSTD'              SWA PROLOG MACRO NAME\n&#UEMAC  SETC  '##UESTD'              SWA EPILOG MACRO NAME\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##$PLI": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x007\\x007\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 55, "newlines": 55, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##$PLI\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##$PLI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##$PLI\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS SET DEFAULTS FOR BLOCK\n.*             START/END MACRO NAMES FOR PLI PROGRAMS\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#PPMAC,&#PEMAC,&#EPMAC,&#EEMAC\n         GBLC  &#SPMAC,&#SEMAC,&#IPMAC,&#IEMAC\n         GBLC  &#WPMAC,&#WEMAC,&#UPMAC,&#UEMAC\n&#PPMAC  SETC  '##PPPLI'              PROGRAM BLOCK PROLOG MACRO NAME\n&#PEMAC  SETC  '##PEPLI'              PROGRAM BLOCK EPILOG MACRO NAME\n&#EPMAC  SETC  '##EPSTD'              ERREXIT BLOCK PROLOG MACRO NAME\n&#EEMAC  SETC  '##EESTD'              ERREXIT BLOCK EPILOG MACRO NAME\n&#SPMAC  SETC  '##SPSTD'              SUBROUTINE BLOCK PROLOG MACRO\n&#SEMAC  SETC  '##SESTD'              SUBROUTINE BLOCK EPILOG MACRO\n&#IPMAC  SETC  '##IPSTD'              INLINE BLOCK PROLOG MACRO NAME\n&#IEMAC  SETC  '##IESTD'              INLINE BLOCK EPILOG MACRO NAME\n&#WPMAC  SETC  '##WPPLI'              PWA PROLOG MACRO NAME\n&#WEMAC  SETC  '##WESTD'              PWA EPILOG MACRO NAME\n&#UPMAC  SETC  '##UPSTD'              SWA PROLOG MACRO NAME\n&#UEMAC  SETC  '##UESTD'              SWA EPILOG MACRO NAME\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##$SASC": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x007\\x007\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 55, "newlines": 55, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##$SASC\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##$SASC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##$SASC\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS SET DEFAULTS FOR BLOCK\n.*             START/END MACRO NAMES FOR SAS/C PROGRAMS\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/98 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#PPMAC,&#PEMAC,&#EPMAC,&#EEMAC\n         GBLC  &#SPMAC,&#SEMAC,&#IPMAC,&#IEMAC\n         GBLC  &#WPMAC,&#WEMAC,&#UPMAC,&#UEMAC\n&#PPMAC  SETC  '##PPSC'               PROGRAM BLOCK PROLOG MACRO NAME\n&#PEMAC  SETC  '##PESC'               PROGRAM BLOCK EPILOG MACRO NAME\n&#EPMAC  SETC  '##EPSTD'              ERREXIT BLOCK PROLOG MACRO NAME\n&#EEMAC  SETC  '##EESTD'              ERREXIT BLOCK EPILOG MACRO NAME\n&#SPMAC  SETC  '##SPSTD'              SUBROUTINE BLOCK PROLOG MACRO\n&#SEMAC  SETC  '##SESTD'              SUBROUTINE BLOCK EPILOG MACRO\n&#IPMAC  SETC  '##IPSTD'              INLINE BLOCK PROLOG MACRO NAME\n&#IEMAC  SETC  '##IESTD'              INLINE BLOCK EPILOG MACRO NAME\n&#WPMAC  SETC  '##WPSC'               PWA PROLOG MACRO NAME\n&#WEMAC  SETC  '##WESTD'              PWA EPILOG MACRO NAME\n&#UPMAC  SETC  '##UPSTD'              SWA PROLOG MACRO NAME\n&#UEMAC  SETC  '##UESTD'              SWA EPILOG MACRO NAME\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##AHI": {"ttr": 3853, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00.\\x00.\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 46, "newlines": 46, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##AHI  &REG,&OP\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##AHI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##AHI\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE AN ADD HALFWORD\n.*             IMMEDIATE BASED ON ARCH LEVEL.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO)\n         AIF   (&SYSALVL LT 1).SIM      USE AHI IS AVAILABLE FOR SURE.\n&NAME    AHI   &REG,&OP\n         MEXIT\n.SIM     ANOP                           USE AH TO SIMULATE IS NOT SURE.\n&NAME    AH    &REG,=Y(&OP)\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##ASMH": {"ttr": 3855, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00:\\x00:\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 58, "newlines": 58, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##ASMH  &PASS=FIRST            MACRO TO TEST ASSEMBLER.\n.*                                      SHOULD BE CALLED WITH FIELD\n.*                                      OF THE FORM ((A))\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##ASMH\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##ASMH\n.*\n.*  PURPOSE    INTERNAL MACRO USED BY PLIST AND EXECUTE MACRO TO\n.*             TEST TO SEE IF ASSEMBLER H IS ACTIVE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/31/85 PLH - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLB  &##ASMH                  DECLARE GLOBAL VARIABLE.\n&##ASMH  SETB  0                        ASSUME NOT ASSEMBLER H.\n         AIF   ('&PASS' NE 'FIRST').X50\n.*  PASS THE FIRST ITEM IN THE FIRST LIST BACK TO ##ASMH.  IF THE\n.*  LEVEL H ASSEMBLER IS BEING USED, THIS WILL BE A LIST OF ONE\n.*  ITEM -->  (A)\n.*  IF THE F ASSEMBLER IS BEING USED, THIS WILL BE THE CHARACTER\n.*  STRING \"(A)\"\n         ##ASMH &SYSLIST(1,1),PASS=SECOND\n         MEXIT\n.*  IF THE FIRST CHARACTER IN THE FIRST ITEM OF THE FIRST LIST\n.*  IS A PARENTHESIS, THEN THE \"(A)\" WAS PASSED AS A CHARACTER\n.*  STRING AND NOT A LIST.  THEREFORE, THE F ASSEMBLER IS BEING\n.*  USED.\n.X50     AIF   ('&SYSLIST(1,1)'(1,1) EQ '(').X100\n&##ASMH  SETB  1                        IF IS ASSEMBLER H,\n.X100    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##B": {"ttr": 3857, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\xf0\\x00\\xf0\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 240, "newlines": 240, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##B    &COND,&P1,&P2,&P3,&LONG=,&BREG=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##B\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##B\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE BRANCHES BASED ON\n.*             ARCH LEVEL AND LONG= KEYWORD.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/02/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO)\n         GBLB  &#PB370\n         GBLB  &#PBXA\n         GBLB  &#PBLONG                 LONG PROGRAM OPTION\n         LCLB  &WLONG\n         LCLB  &JAVAIL\n         LCLB  &JLAVAIL\n         LCLC  &WCOND\n         AIF   ('&LONG' EQ '').LONGIFY\n         AIF   ('&LONG' EQ 'NO').LONGIFY\n         AIF   ('&LONG' EQ 'YES').LONGOIFY\n         AIF   ('&LONG' EQ 'PBLONG').LONGS1\n         AIF   ('&LONG' EQ 'PBLONGSLGT0').LONGS2\n         MNOTE 8,'LONG=&LONG IS NOT VALID.'\n         AGO   .LONGSP\n.* LONG='PBLONG' USES PBLONG FOR LONG.\n.LONGS1  ANOP\n&WLONG   SETB  (&#PBLONG)\n         AGO   .LONGSET\n.* LONG='PBLONGSLGT0' USES PBLONG FOR LONG IF &SYSLVL>0 OTHERWISE NO.\n.LONGS2  AIF   (&SYSALVL LE 0).LONGIFY\n&WLONG   SETB  (&#PBLONG)\n         AGO   .LONGSET\n.*\n.LONGIFY ANOP\n&WLONG   SETB  ('&LONG' EQ 'YES')\n.LONGSET ANOP\n.*\n&JAVAIL  SETB  (&SYSALVL GE 1)\n&JLAVAIL SETB  (&SYSALVL GE 2)\n&WCOND   SETC  '&COND'\n         AIF   (N'&SYSLIST NE 2).CHK3\n         AIF   ('&WCOND' EQ '').U\n         AIF   ('&WCOND' EQ 'U').U\n         AIF   ('&WCOND' EQ 'H').XM\n         AIF   ('&WCOND' EQ 'L').XM\n         AIF   ('&WCOND' EQ 'E').XM\n         AIF   ('&WCOND' EQ 'NH').XM\n         AIF   ('&WCOND' EQ 'NL').XM\n         AIF   ('&WCOND' EQ 'NE').XM\n         AIF   ('&WCOND' EQ 'P').XM\n         AIF   ('&WCOND' EQ 'M').XM\n         AIF   ('&WCOND' EQ 'Z').XM\n         AIF   ('&WCOND' EQ 'O').XM\n         AIF   ('&WCOND' EQ 'NP').XM\n         AIF   ('&WCOND' EQ 'NM').XM\n         AIF   ('&WCOND' EQ 'NZ').XM\n         AIF   ('&WCOND' EQ 'NO').XM\n         AIF   ('&WCOND' EQ 'NOP').NOP\n         AGO   .ERRNPRM\n.CHK3    AIF   (N'&SYSLIST NE 3).CHK4\n         AIF   ('&WCOND' EQ 'C').C\n         AIF   ('&WCOND' EQ 'AS').AS\n         AIF   ('&WCOND' EQ 'ASR').ASR\n         AIF   ('&WCOND' EQ 'CT').CT\n         AGO   .ERRNPRM\n.CHK4    AIF   (N'&SYSLIST NE 4).ERRNPRM\n         AIF   ('&WCOND' EQ 'XH').XHLE\n         AIF   ('&WCOND' EQ 'XLE').XHLE\n         AGO   .ERRNPRM\n.*\n.* UNCONDITIONAL.\n.*\n.U       AIF   (&JAVAIL).J\n         AIF   (&WLONG).BR\n&WOP     SETC  'B'\n         AGO   .OP1\n.J       AIF   (&WLONG).JL\n&WOP     SETC  'J'\n         AGO   .OP1\n.JL      AIF   (NOT &JLAVAIL).BR\n&WOP     SETC  'JLU'\n         AGO   .OP1\n.BR      ANOP\n&WOP     SETC  'BR'\n         AGO   .OP1R\n.*\n.* MOST EXTENDED MNEMONICS.\n.*\n.XM      AIF   (&JAVAIL).XMJ\n         AIF   (&WLONG).XMR\n&WOP     SETC  'B&WCOND'\n         AGO   .OP1\n.XMJ     AIF   (&WLONG).XMJL\n&WOP     SETC  'J&WCOND'\n         AGO   .OP1\n.XMJL    AIF   (NOT &JLAVAIL).XMR\n&WOP     SETC  'JL&WCOND'\n         AGO   .OP1\n.XMR     ANOP\n&WOP     SETC  'B&COND.R'\n         AGO   .OP1R\n.*\n.* NOP\n.*\n.NOP     AIF   (&JAVAIL).JNOP\n&WOP     SETC  'NOP'\n         AGO   .OP1\n.JNOP    ANOP\n&WOP     SETC  'JNOP'\n         AGO   .OP1\n.*\n.* BRANCH/JUMP ON CONDITION.\n.*\n.C       AIF   (&JAVAIL).BRC\n         AIF   (&WLONG).BCR\n&WOP     SETC  'BC'\n         AGO   .OP2\n.BRC     AIF   (&WLONG).BRCL\n&WOP     SETC  'BRC'\n         AGO   .OP2\n.BRCL    AIF   (NOT &JLAVAIL).BCR\n&WOP     SETC  'BRCL'\n         AGO   .OP2\n.BCR     ANOP\n&WOP     SETC  'BCR'\n         AGO   .OP2R\n.*\n.* BRANCH/JUMP AND SAVE.\n.*\n.AS      AIF   (&JAVAIL).JAS\n&WOP     SETC  'BAS'\n         AGO   .OP2\n.JAS     AIF   (&WLONG).ASL\n&WOP     SETC  'JAS'\n         AGO   .OP2\n.ASL     AIF   (&JLAVAIL).JASL\n         AIF   (NOT &#PB370 AND &#PBXA).BASRL\n&WOP     SETC  'BALR'\n         AGO   .OP2R\n.BASRL   ANOP\n&WOP     SETC  'BASR'\n         AGO   .OP2R\n.JASL    ANOP\n&WOP     SETC  'JASL'\n         AGO   .OP2\n.*\n.* BRANCH AND SAVE REGISTER.  ISSUES BALR IF INDICATED BY\n.* PROGRAM BLOCK XA AND 370 OPTIONS.\n.*\n.ASR     AIF   (NOT &#PB370).BASR\n&WOP     SETC  'BALR'\n         AGO   .OP2\n.BASR    ANOP\n&WOP     SETC  'BASR'\n         AGO   .OP2\n.*\n.* NOTE: LONG IS IGNORED ON THE REMAINING BRANCHES UNLESS IT IS\n.*       SUPPORTED BASED ON ARCH LEVEL.\n.*\n.* BRANCH/JUMP ON COUNT\n.*\n.CT      AIF   (&JAVAIL).JCT\n&WOP     SETC  'BCT'\n         AGO   .OP2\n.JCT     AIF   (&WLONG AND &JLAVAIL).JCTG\n&WOP     SETC  'JCT'\n         AGO   .OP2\n.JCTG    ANOP\n&WOP     SETC  'JCTG'\n         AGO   .OP2\n.*\n.* BRANCH/JUMP XH/XLE\n.*\n.XHLE    AIF   (&JAVAIL).JXHLE\n&WOP     SETC  'B&COND'\n         AGO   .OP3\n.JXHLE   AIF   (&WLONG AND &JLAVAIL).JXHLEG\n&WOP     SETC  'J&COND'\n         AGO   .OP3\n.JXHLEG  ANOP\n&WOP     SETC  'J&COND.G'\n         AGO   .OP3\n.*\n.* GENERATE INSTRUCTIONS.\n.*\n.OP1     ANOP\n&NAME    &WOP  &P1\n         MEXIT\n.OP1R    AIF   ('&BREG' EQ '').ERRBREG\n&NAME    L     &BREG,=A(&P1)\n         &WOP  &BREG\n         MEXIT\n.OP2     ANOP\n&NAME    &WOP  &P1,&P2\n         MEXIT\n.OP2R    AIF   ('&BREG' EQ '').ERRBREG\n&NAME    L     &BREG,=A(&P2)\n         &WOP  &P1,&BREG\n         MEXIT\n.OP3     ANOP\n&NAME    &WOP  &P1,&P2,&P3\n         MEXIT\n *\n.ERRNPRM MNOTE 8,'INVALID COND OR NUMBER OF POSITIONAL PARMS ON ##B &CO+\n               ND.'\n         MEXIT\n.ERRBREG MNOTE 8,'BREG IS REQUIRE IF LONG=YES IS SPECIFIED AND ARCH LEV+\n               EVEL IS LESS THAN 2.'\n&NAME    EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##CHI": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00.\\x00.\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 46, "newlines": 46, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##CHI  &REG,&OP\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##CHI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##CHI\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE A COMPARE HALFWORD\n.*             IMMEDIATE BASED ON ARCH LEVEL.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO)\n         AIF   (&SYSALVL LT 1).SIM      USE CHI IS AVAILABLE FOR SURE.\n&NAME    CHI   &REG,&OP\n         MEXIT\n.SIM     ANOP                           USE CH TO SIMULATE IS NOT SURE.\n&NAME    CH    &REG,=Y(&OP)\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##COND": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01\\xc9\\x01\\xc9\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 457, "newlines": 457, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##COND &S=,&F=,&T=B,&L=N,&B=1,&E=,&LONG=,&BREG=            @C4\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##COND\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##COND\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE TESTS FOR CONDITIONAL\n.*             EXPRESSIONS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 MGG - NEW\n.*              2/20/86 MGG - ADDED #TEST SUPPORT FOR DC PROGRAMS   @C1\n.*                            AND CONDITION ANY SUPPORT             @C1\n.*              9/13/89 MGG - ADDED SUPPORT FOR USER DEFINED        @C2\n.*                            CONDITIONS.                           @C2\n.*              9/15/89 MGG - CHANGED DEFAULT T= FROM A TO B AND    @C3\n.*                            MAKE E= DEFAULT TO N'SYSLIST.         @C3\n.*              8/02/05 MGG - CHANGE TO USE ##B MACRO FOR BRANCHING @C4\n.*                            TO SUPPORT J AND JL.  ALSO ADDED NEW  @C4\n.*                            COMPARE INSTRUCTIONS.                 @C4\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   TAG INDEX\n         LCLA  &CTR                     WORK COUNTER\n         LCLC  &COND,&TAG,&OP           WORK 'COND', TAG, AND OPCODE\n         LCLC  &WL,&WNAME,&WS,&WF       WORK L=, &NAME, S=, AND T=\n         LCLA  &WB,&WE                  WORK B= AND E=\n         LCLC  &WORK                    WORK CHARACTER FIELD\n&WL      SETC  '&L'                     SET WORK L=\n&WS      SETC  '&S'                     SET WORK S=\n&WF      SETC  '&F'                     SET WORK F=\n&WB      SETA  &B                       SET WORK B=\n         AIF   ('&E' EQ '').PRC0110                                 @C3\n&WE      SETA  &E                       SET WORK E=                 @C3\n         AGO   .PRC0120                                             @C3\n.PRC0110 ANOP                                                       @C3\n&WE      SETA  N'&SYSLIST               SET WORK E= TO N'&SYSLIST   @C3\n.PRC0120 ANOP                                                       @C3\n&WNAME   SETC  '&NAME'                  SET WORK NAME\n         AIF   (&WE LT &WB).ERR0001     ERROR IF <1 PARM\n         AIF   ('&T' EQ 'A').PRC1000    GO TO PRODUCTION A PROCESS\n         AIF   ('&T' EQ 'B').PRC2000    GO TO PRODUCTION B PROCESS\n         AIF   ('&T' EQ 'C').PRC3000    GO TO PRODUCTION C PROCESS\n         AIF   ('&T' EQ 'D').PRC4000    GO TO PRODUCTION D PROCESS\n         AIF   ('&T' EQ 'E').PRC5000    GO TO PRODUCTION E PROCESS\n         AGO   .ERR0004                 ERROR OTHERWISE\n.*--------------------------------------------------------------------*\n.*       A ::= B,THEN | B\n.*--------------------------------------------------------------------*\n.PRC1000 ANOP  ,                        PRODUCTION A PROCESS\n&CTR     SETA  &WE-&WB+1                SET CTR = NUMBER OF PARMS\n         AIF   (&CTR LT 1).ERR0001      ERROR IF LESS THAN 1 PARM\n         AIF   ('&SYSLIST(&WE)' NE 'THEN').PRC1100 IF 'THEN' ON END\n         AIF   (&CTR LT 2).ERR0001        ERROR IF LESS THAN 2 PARMS\n&WE      SETA  &WE-1                      BACK WORK E= TO BEFORE 'THEN'\n.PRC1100 AGO   .PRC2000                 TAKE SHORT CUT TO T=B\n.*--------------------------------------------------------------------*\n.*       B ::= B,OR,C | C\n.*--------------------------------------------------------------------*\n.PRC2000 AIF   (&WE GT 51).ERR0006\n&CTR     SETA  &WE                      SEARCH FROM END FOR 'OR'\n.PRC2100 AIF   (&CTR LT &WB).PRC3000    IF NO OR, TAKE SHORT CUT TO T=C\n         AIF   ('&SYSLIST(&CTR)' EQ 'OR').PRC2200 SUCCESSFUL IF 'OR'\n&CTR     SETA  &CTR-1                   DECREMENT COUNTER\n         AGO   .PRC2100                 LOOP SEARCHING FOR 'OR'\n.PRC2200 AIF   (&WE EQ &CTR).ERR0001    ERROR IF 'OR' ON END\n         AIF   (&WB EQ &CTR).ERR0001    ERROR IF 'OR' ON FRONT\n&#MNDX   SETA  &#MNDX+1                 INCREMENT MASTER TAG INDEX\n&TAG     SETC  '#IF&#MNDX'              SET TAG EQUAL TO NEW FAIL TAG\n&CTR     SETA  &CTR-1                   PROCESS THINGS TO LEFT OF 'OR'\n&WNAME   ##COND &SYSLIST(1),&SYSLIST(2),                               $\n               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),                 $\n               F=&TAG,S=&WS,T=B,L=P,B=&WB,E=&CTR\n&WNAME   SETC  '&TAG'                   SET NEW WORK TAG\n&WB      SETA  &CTR+2                   SET NEW BEGINNING PAST OR\n         AGO   .PRC3000                 TAKE SHORT CUT TO T=C\n.*--------------------------------------------------------------------*\n.*       C ::= C,AND,D | D\n.*--------------------------------------------------------------------*\n.PRC3000 ANOP  ,                        PRODUCTION C PROCESSING\n&CTR     SETA  &WE                      SEARCH FROM END FOR 'AND'\n.PRC3100 AIF   (&CTR LT &WB).PRC4000    IF NO AND,TAKE SHORT CUT TO T=D\n         AIF   ('&SYSLIST(&CTR)' EQ 'AND').PRC3200 CHECK FOR 'AND'\n&CTR     SETA  &CTR-1                   DECREMENT COUNTER\n         AGO   .PRC3100                 LOOP SEARCHING FOR 'AND'\n.PRC3200 AIF   (&WE EQ &CTR).ERR0001    ERROR IF 'AND' ON END\n         AIF   (&WB EQ &CTR).ERR0001    ERROR IF 'AND\n&#MNDX   SETA  &#MNDX+1                 INCREMENT MASTER TAG INDEX\n&TAG     SETC  '#IS&#MNDX'              MAKE NEW SUCCESS TAG\n&CTR     SETA  &CTR-1                   PROCESS THINGS TO LEFT OF 'AND'\n&WNAME   ##COND &SYSLIST(1),&SYSLIST(2),                               $\n               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),                 $\n               F=&WF,S=&TAG,T=C,L=N,B=&WB,E=&CTR\n&WNAME   SETC  '&TAG'                   SET NEW WORK TAG\n&WB      SETA  &CTR+2                   SET NEW BEGINNING PAST OR\n         AGO   .PRC4000                 TAKE SHORT CUT TO T=D\n.*--------------------------------------------------------------------*\n.*       D ::= NOT,E | E\n.*--------------------------------------------------------------------*\n.PRC4000 ANOP  ,                        PRODUCTION D PROCESS\n         AIF   ('&SYSLIST(&WB)' NE 'NOT').PRC5000 SHORT CUT TO T=E\n         AIF   (&WE-&WB NE 1).ERR0001   ERROR IF NOT 2 PARMS\n         AIF   ('&WL' EQ 'P').PRC4010   SWITCH LOGIC\n&WL      SETC  'P'                        'N' CHANGES TO 'P'\n         AGO   .PRC4020\n.PRC4010 ANOP\n&WL      SETC  'N'                        'P' CHANGES TO 'N'\n.PRC4020 ANOP\n&WB      SETA  &WB+1                    SET BEGINNING PAST NOT\n&TAG     SETC  '&WS'                    SWITCH SUCCESS\n&WS      SETC  '&WF'                      AND\n&WF      SETC  '&TAG'                     FAIL TAGS\n         AGO   .PRC5000                 TAKE SHORT CUT TO T=E\n.*--------------------------------------------------------------------*\n.*       E ::= (B) | (COMPARE) | COND\n.*--------------------------------------------------------------------*\n.PRC5000 ANOP  ,                        PRODUCTION E PROCESSING\n         AIF   (&WE NE &WB).ERR0001     ERROR IF NOT ONE PARM LEFT\n         AIF   ('&SYSLIST(&WB)' EQ '').ERR0001 ERROR IF PARM IS NULL\n         AIF   ('&SYSLIST(&WB)'(1,1) EQ '(').PRC5050 IF PARM DOES NOT\n&COND    SETC  '&SYSLIST(&WB)'          START WITH '(', MUST BE 'COND'\n         AGO   .PRC6000                 GO PROCESS 'COND'\n.PRC5050 ANOP  ,                        CHECK FOR OPCODE\n         AIF   ('&SYSLIST(&WB)' EQ '&SYSLIST(&WB,1)').ERR0005\n&OP      SETC  '&SYSLIST(&WB,1)'        GET POSSIBLE OPCODE\n         AIF   ('&OP' EQ 'CLC').PRC5200 IF IT IS ONE OF THE OPCODES\n         AIF   ('&OP' EQ 'CR').PRC5200    HERE THEN IT MUST BE OF\n         AIF   ('&OP' EQ 'C').PRC5200     THE FORM (COMPARE)\n         AIF   ('&OP' EQ 'CP').PRC5200  ELSE\n         AIF   ('&OP' EQ 'CH').PRC5200    ASSUME THE FROM (B)\n         AIF   ('&OP' EQ 'CHI').PRC5800                             @C4\n         AIF   ('&OP' EQ 'CLR').PRC5200\n         AIF   ('&OP' EQ 'CL').PRC5200\n         AIF   ('&OP' EQ 'CLI').PRC5200\n         AIF   ('&OP' EQ 'CLCL').PRC5200\n         AIF   ('&OP' EQ 'TM').PRC5200\n         AIF   ('&OP' EQ 'CLM').PRC5300\n         AIF   ('&OP' EQ 'TBIT').PRC5400\n         AIF   ('&OP' EQ 'TREG').PRC5500\n         AIF   ('&OP' EQ '#TEST').PRC5600                           @C1\n         AIF   ('&OP'(1,1) EQ '%').PRC5700                          @C2\n&CTR     SETA  N'&SYSLIST(&WB)          PROCESS THINGS INSIDE ()'S\n&WNAME   ##COND &SYSLIST(&WB,1),&SYSLIST(&WB,2),&SYSLIST(&WB,3),       $\n               &SYSLIST(&WB,4),&SYSLIST(&WB,5),&SYSLIST(&WB,6),        $\n               &SYSLIST(&WB,7),&SYSLIST(&WB,8),&SYSLIST(&WB,9),        $\n               &SYSLIST(&WB,10),&SYSLIST(&WB,11),&SYSLIST(&WB,12),     $\n               &SYSLIST(&WB,13),&SYSLIST(&WB,14),&SYSLIST(&WB,15),     $\n               &SYSLIST(&WB,16),&SYSLIST(&WB,17),&SYSLIST(&WB,18),     $\n               &SYSLIST(&WB,19),&SYSLIST(&WB,20),&SYSLIST(&WB,21),     $\n               &SYSLIST(&WB,22),&SYSLIST(&WB,23),&SYSLIST(&WB,24),     $\n               &SYSLIST(&WB,25),&SYSLIST(&WB,26),&SYSLIST(&WB,27),     $\n               &SYSLIST(&WB,28),&SYSLIST(&WB,29),&SYSLIST(&WB,30),     $\n               &SYSLIST(&WB,31),&SYSLIST(&WB,32),&SYSLIST(&WB,33),     $\n               &SYSLIST(&WB,34),&SYSLIST(&WB,35),&SYSLIST(&WB,36),     $\n               &SYSLIST(&WB,37),&SYSLIST(&WB,38),&SYSLIST(&WB,39),     $\n               &SYSLIST(&WB,40),&SYSLIST(&WB,41),&SYSLIST(&WB,42),     $\n               &SYSLIST(&WB,43),&SYSLIST(&WB,44),&SYSLIST(&WB,45),     $\n               &SYSLIST(&WB,46),&SYSLIST(&WB,47),&SYSLIST(&WB,48),     $\n               &SYSLIST(&WB,49),&SYSLIST(&WB,50),&SYSLIST(&WB,51),     $\n               F=&WF,S=&WS,T=B,L=&WL,E=&CTR,B=1\n         AGO   .EXIT                    EXIT\n.*       OF FORM (OPCODE,OP1,COND,OP2)\n.PRC5200 AIF   (N'&SYSLIST(&WB) NE 4).ERR0002\n&WNAME   &OP   &SYSLIST(&WB,2),&SYSLIST(&WB,4)\n&WNAME   SETC  ''\n&COND    SETC  '&SYSLIST(&WB,3)'\n         AGO   .PRC6000\n.*       OF FORM (OPCODE,OP1,MASK,COND,OP2)\n.PRC5300 AIF   (N'&SYSLIST(&WB) NE 5).ERR0002\n&WNAME   &OP   &SYSLIST(&WB,2),&SYSLIST(&WB,3),&SYSLIST(&WB,5)\n&WNAME   SETC  ''                       CLEAR WORK NAME\n&COND    SETC  '&SYSLIST(&WB,4)'        SET CONDITION\n         AGO   .PRC6000                 PROCESS 'COND'\n.*       OF FORM (TBIT,OP1,OP2,ON|OFF|MIXED|ANY) 'ON' IS DEFAULT    @C1\n.PRC5400 ANOP\n         AIF   (N'&SYSLIST(&WB) GT 4).ERR0002\n         AIF   (N'&SYSLIST(&WB) LT 2).ERR0002\n         AIF   (N'&SYSLIST(&WB) NE 2).PRC5410\n&COND    SETC  'ON'\n&WNAME   TBIT  &SYSLIST(&WB,2)\n         AGO   .PRC5450\n.PRC5410 AIF   (N'&SYSLIST(&WB) NE 3).PRC5440\n         AIF   ('&SYSLIST(&WB,3)' EQ 'ON').PRC5430\n         AIF   ('&SYSLIST(&WB,3)' EQ 'OFF').PRC5430\n         AIF   ('&SYSLIST(&WB,3)' EQ 'MIXED').PRC5430\n         AIF   ('&SYSLIST(&WB,3)' EQ 'ANY').PRC5430                 @C1\n&COND    SETC  'ON'\n&WNAME   TBIT  &SYSLIST(&WB,2),&SYSLIST(&WB,3)\n         AGO   .PRC5450\n.PRC5430 ANOP\n&COND    SETC  '&SYSLIST(&WB,3)'\n&WNAME   TBIT  &SYSLIST(&WB,2)\n         AGO   .PRC5450\n.PRC5440 ANOP\n&COND    SETC  '&SYSLIST(&WB,4)'\n         AIF   ('&COND' EQ 'ON').PRC5445\n         AIF   ('&COND' EQ 'OFF').PRC5445\n         AIF   ('&COND' EQ 'MIXED').PRC5445                         @C1\n         AIF   ('&COND' NE 'ANY').ERR0002                           @C1\n.PRC5445 ANOP\n&WNAME   TBIT  &SYSLIST(&WB,2),&SYSLIST(&WB,3)\n.PRC5450 ANOP\n&WNAME   SETC  ''\n         AGO   .PRC6000\n.*       OF FORM (TREG,OP1,COND)\n.PRC5500 AIF   (N'&SYSLIST(&WB) NE 3).ERR0002\n&WNAME   TREG  &SYSLIST(&WB,2)\n&WNAME   SETC  ''\n&COND    SETC  '&SYSLIST(&WB,3)'\n         AGO   .PRC6000\n.*       OF FORM (#TEST,OP1,ON|OFF|ANY) 'ON' IS DEFAULT             @C1\n.PRC5600 ANOP                                                       @C1\n         AIF   (N'&SYSLIST(&WB) EQ 3).PRC5610                       @C1\n         AIF   (N'&SYSLIST(&WB) NE 2).ERR0002                       @C1\n&COND    SETC  'ON'                                                 @C1\n         AGO   .PRC5620                                             @C1\n.PRC5610 ANOP                                                       @C1\n&COND    SETC  '&SYSLIST(&WB,3)'                                    @C1\n.PRC5620 AIF   ('&COND' EQ 'ON').PRC5630                            @C1\n         AIF   ('&COND' EQ 'OFF').PRC5630                           @C1\n         AIF   ('&COND' EQ 'ANY').PRC5630                           @C1\n         MNOTE 8,'Invalid option &COND for #TEST condition'         @C1\n         AGO   .EXIT                                                @C1\n.PRC5630 ANOP                                                       @C1\n&WNAME   TM    &SYSLIST(&WB,2).I,&SYSLIST(&WB,2).M                  @C1\n&WNAME   SETC  ''                                                   @C1\n         AGO   .PRC6000                                             @C1\n.*       OF FORM (%UCOND,.....) WHERE UCOND IS USER SUPPLIED COND.  @C2\n.PRC5700 ANOP                                                       @C2\n&WNAME   ##UCOND &SYSLIST(&WB),S=&WS,F=&WF,L=&WL                    @C2\n         AGO   .EXIT                                                @C2\n.*       OF FORM (OPCODE,OP1,COND,OP2) WHERE OPCODE NEEDS ## PREFIX @C4\n.PRC5800 AIF   (N'&SYSLIST(&WB) NE 4).ERR0002                       @C4\n&OP      SETC  '##&OP'                                              @C4\n&WNAME   &OP   &SYSLIST(&WB,2),&SYSLIST(&WB,4)                      @C4\n&WNAME   SETC  ''                                                   @C4\n&COND    SETC  '&SYSLIST(&WB,3)'                                    @C4\n         AGO   .PRC6000                                             @C4\n.*--------------------------------------------------------------------*\n.*       GENERATE BRANCH FOR NEGATIVE LOGIC\n.*--------------------------------------------------------------------*\n.PRC6000 AIF   ('&WL' EQ 'P').PRC7000   IF POSITIVE LOGIC, PROCESS IT\n         AIF   ('&COND' NE 'EQ').PRC6010\n&WNAME   ##B NE,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6010 AIF   ('&COND' NE 'NE').PRC6020\n&WNAME   ##B E,&WF,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC6020 AIF   ('&COND' NE 'LT').PRC6030\n&WNAME   ##B NL,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6030 AIF   ('&COND' NE 'LE').PRC6040\n&WNAME   ##B H,&WF,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC6040 AIF   ('&COND' NE 'GT').PRC6050\n&WNAME   ##B NH,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6050 AIF   ('&COND' NE 'GE').PRC6060\n&WNAME   ##B L,&WF,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC6060 AIF   ('&COND' NE 'Z').PRC6070\n&WNAME   ##B NZ,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6070 AIF   ('&COND' NE 'NZ').PRC6080\n&WNAME   ##B Z,&WF,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC6080 AIF   ('&COND' NE 'M').PRC6090\n&WNAME   ##B NM,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6090 AIF   ('&COND' NE 'NM').PRC6100\n&WNAME   ##B M,&WF,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC6100 AIF   ('&COND' NE 'P').PRC6110\n&WNAME   ##B NP,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6110 AIF   ('&COND' NE 'NP').PRC6120\n&WNAME   ##B P,&WF,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC6120 AIF   ('&COND' NE 'O').PRC6130\n&WNAME   ##B NO,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6130 AIF   ('&COND' NE 'NO').PRC6140\n&WNAME   ##B O,&WF,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC6140 AIF   ('&COND' NE 'ON').PRC6150\n&WNAME   ##B NO,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6150 AIF   ('&COND' NE 'OFF').PRC6160\n&WNAME   ##B NZ,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6160 AIF   ('&COND' NE 'MIXED').PRC6170\n&WNAME   ##B NM,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6170 AIF   ('&COND' NE 'E').PRC6180\n&WNAME   ##B NE,&WF,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC6180 AIF   ('&COND' NE 'ANY').PRC6190                           @C1\n&WNAME   ##B Z,&WF,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT                                                @C1\n.PRC6190 ANOP                                                       @C1\n.PRC6500 ANOP\n         AIF   (K'&COND GT 4).ERR0003\n         AIF   (K'&COND LT 3).ERR0003\n         AIF   ('&COND'(1,2) NE 'CC').ERR0003\n&WORK    SETC  '&COND'(3,1)\n         AIF   ('&WORK' LT '0' OR '&WORK' GT '9').ERR0003\n&CTR     SETA  &WORK\n         AIF   (K'&COND NE 4).PRC6510\n&WORK    SETC  '&COND'(4,1)\n         AIF   ('&WORK' LT '0' OR '&WORK' GT '9').ERR0003\n&CTR     SETA  10*&CTR+&WORK\n.PRC6510 AIF   (&CTR LT 1).ERR0003\n         AIF   (&CTR GT 14).ERR0003\n&WNAME   ##B C,15-&CTR,&WF,LONG=&LONG,BREG=&BREG                    @C4\n         AGO   .EXIT\n.PRC7000 ANOP\n.*--------------------------------------------------------------------*\n.*       GENERATE BRANCH FOR POSITIVE LOGIC\n.*--------------------------------------------------------------------*\n         AIF   ('&COND' NE 'EQ').PRC7010\n&WNAME   ##B E,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7010 AIF   ('&COND' NE 'NE').PRC7020\n&WNAME   ##B NE,&WS,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC7020 AIF   ('&COND' NE 'LT').PRC7030\n&WNAME   ##B L,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7030 AIF   ('&COND' NE 'LE').PRC7040\n&WNAME   ##B NH,&WS,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC7040 AIF   ('&COND' NE 'GT').PRC7050\n&WNAME   ##B H,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7050 AIF   ('&COND' NE 'GE').PRC7060\n&WNAME   ##B NL,&WS,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC7060 AIF   ('&COND' NE 'Z').PRC7070\n&WNAME   ##B Z,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7070 AIF   ('&COND' NE 'NZ').PRC7080\n&WNAME   ##B NZ,&WS,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC7080 AIF   ('&COND' NE 'M').PRC7090\n&WNAME   ##B M,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7090 AIF   ('&COND' NE 'NM').PRC7100\n&WNAME   ##B NM,&WS,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC7100 AIF   ('&COND' NE 'P').PRC7110\n&WNAME   ##B P,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7110 AIF   ('&COND' NE 'NP').PRC7120\n&WNAME   ##B NP,&WS,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC7120 AIF   ('&COND' NE 'O').PRC7130\n&WNAME   ##B O,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7130 AIF   ('&COND' NE 'NO').PRC7140\n&WNAME   ##B NO,&WS,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT\n.PRC7140 AIF   ('&COND' NE 'ON').PRC7150\n&WNAME   ##B O,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7150 AIF   ('&COND' NE 'OFF').PRC7160\n&WNAME   ##B Z,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7160 AIF   ('&COND' NE 'MIXED').PRC7170\n&WNAME   ##B M,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7170 AIF   ('&COND' NE 'E').PRC7180\n&WNAME   ##B E,&WS,LONG=&LONG,BREG=&BREG                            @C4\n         AGO   .EXIT\n.PRC7180 AIF   ('&COND' NE 'ANY').PRC7190                           @C1\n&WNAME   ##B NZ,&WS,LONG=&LONG,BREG=&BREG                           @C4\n         AGO   .EXIT                                                @C1\n.PRC7190 ANOP                                                       @C1\n.PRC7500 ANOP\n         AIF   (K'&COND GT 4).ERR0003\n         AIF   (K'&COND LT 3).ERR0003\n         AIF   ('&COND'(1,2) NE 'CC').ERR0003\n&WORK    SETC  '&COND'(3,1)\n         AIF   ('&WORK' LT '0' OR '&WORK' GT '9').ERR0003\n&CTR     SETA  &WORK\n         AIF   (K'&COND NE 4).PRC7510\n&WORK    SETC  '&COND'(4,1)\n         AIF   ('&WORK' LT '0' OR '&WORK' GT '9').ERR0003\n&CTR     SETA  10*&CTR+&WORK\n.PRC7510 AIF   (&CTR LT 1).ERR0003\n         AIF   (&CTR GT 14).ERR0003\n&WNAME   ##B C,&CTR,&WS,LONG=&LONG,BREG=&BREG                       @C4\n         AGO   .EXIT\n.ERR0001 MNOTE 8,'Invalid or missing condition expression'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'Invalid number of parms for &OP'\n         AGO   .EXIT\n.ERR0003 MNOTE 8,'Invalid condition &COND'\n         AGO   .EXIT\n.ERR0004 MNOTE 8,'Invalid T='\n         AGO   .EXIT\n.ERR0005 MNOTE 8,'This expression requires the Level H assembler'\n         AGO   .EXIT\n.ERR0006 MNOTE 8,'No more than 51 positional parameters can be specifie$\n               d in a condition'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##CVREG": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00M\\x00M\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 77, "newlines": 77, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##CVREG &REG\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##CVREG\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##CVREG\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO CONVERT AND TEST R FORM\n.*             REGISTER NOTATION.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 MGG - NEW\n.*              7/15/85 MGG - REPLACED WITH THIS VERSION.  THE OLD\n.*                            USED K' AND T' WHICH DID NOT WORK\n.*                            IN SOME CASES.\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MCVREG                 CONVERTED REGISTER\n&#MCVREG SETA  0\n         AIF   ('&REG' EQ 'R0').EXIT\n&#MCVREG SETA  1\n         AIF   ('&REG' EQ 'R1').EXIT\n&#MCVREG SETA  2\n         AIF   ('&REG' EQ 'R2').EXIT\n&#MCVREG SETA  3\n         AIF   ('&REG' EQ 'R3').EXIT\n&#MCVREG SETA  4\n         AIF   ('&REG' EQ 'R4').EXIT\n&#MCVREG SETA  5\n         AIF   ('&REG' EQ 'R5').EXIT\n&#MCVREG SETA  6\n         AIF   ('&REG' EQ 'R6').EXIT\n&#MCVREG SETA  7\n         AIF   ('&REG' EQ 'R7').EXIT\n&#MCVREG SETA  8\n         AIF   ('&REG' EQ 'R8').EXIT\n&#MCVREG SETA  9\n         AIF   ('&REG' EQ 'R9').EXIT\n&#MCVREG SETA  10\n         AIF   ('&REG' EQ 'R10').EXIT\n&#MCVREG SETA  11\n         AIF   ('&REG' EQ 'R11').EXIT\n&#MCVREG SETA  12\n         AIF   ('&REG' EQ 'R12').EXIT\n&#MCVREG SETA  13\n         AIF   ('&REG' EQ 'R13').EXIT\n&#MCVREG SETA  14\n         AIF   ('&REG' EQ 'R14').EXIT\n&#MCVREG SETA  15\n         AIF   ('&REG' EQ 'R15').EXIT\n&#MCVREG SETA  99\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##DEFSUB": {"ttr": 4359, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00U\\x00U\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 85, "newlines": 85, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##DEFSUB &NAME,&TYPE=                                      @C1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##DEFSUB\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##DEFSUB\n.*\n.*  PURPOSE    INTERNAL MACRO USED MAINTAIN TABLE OF SUBROUTINE NAMES\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    7/14/85 MGG - NEW\n.*              8/09/05 MGG - Moved some code from CALLSUB to       @C1\n.*                            make TYPE=CALL.  This was so code     @C1\n.*                            would not have to be duplicated in    @C1\n.*                            CALLCASE.                             @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#SB#C                   CURRENT SUBROUTINE NUMBER   @C1\n         GBLA  &#SB#D                   SUBROUTINE NUMBER (RETURNED)\n         GBLA  &#SB#M                   MAX SUBROUTINE NUMBER\n         GBLA  &#SB#CPB                 (SUB #) OF CURRENT PROG BLK @C1\n         GBLC  &#SBNM(99)               SUBROUTINE NAMES\n         GBLA  &#CSFF(99)               FIRST FOR SUBROUTINE FROM   @C1\n         GBLA  &#CSF(500)               CALLSUB FROM                @C1\n         GBLA  &#CST(500)               CALLSUB TO                  @C1\n         GBLA  &#CSFT#N                 CALLSUB FROM/TO NEXT NUMBER @C1\n         LCLA  &CTR                     LOCAL WORK VARIABLE         @C1\n&#SB#D   SETA  0\n.LOOP    AIF   (&#SB#D GE &#SB#M).NOTFND\n&#SB#D   SETA  &#SB#D+1\n         AIF   ('&#SBNM(&#SB#D)' EQ '&NAME').FND\n         AGO   .LOOP\n.NOTFND  ANOP\n&#SB#D   SETA  &#SB#D+1\n&#SBNM(&#SB#D) SETC '&NAME'\n&#SB#M   SETA  &#SB#D\n.FND     AIF   ('&TYPE' NE 'CALL').MEND                             @C1\n.*                                                                  @C1\n.*  Store additional info if TYPE=CALL.                             @C1\n.*                                                                  @C1\n         AIF   (&#SB#D GT &#SB#CPB).X50                             @C1\n         MNOTE 8,'Can not call program block or subroutine in previous +\n               program block.'                                      @C1\n.X50     ANOP                                                       @C1\n&CTR     SETA  &#CSFF(&#SB#C)                                       @C1\n         AIF   (&CTR NE 0).X100                                     @C1\n&#CSFF(&#SB#C) SETA &#CSFT#N                                        @C1\n         AGO   .X200                                                @C1\n.X100    AIF   (&CTR GE &#CSFT#N).X200                              @C1\n         AIF   (&#CSF(&CTR) NE &#SB#C).X200                         @C1\n         AIF   (&#CST(&CTR) EQ &#SB#D).X300                         @C1\n&CTR     SETA  &CTR+1                                               @C1\n         AGO   .X100                                                @C1\n.X200    ANOP                                                       @C1\n&#CSF(&#CSFT#N) SETA &#SB#C                                         @C1\n&#CST(&#CSFT#N) SETA &#SB#D                                         @C1\n&#CSFT#N SETA  &#CSFT#N+1                                           @C1\n.X300    ANOP                                                       @C1\n.*                                                                  @C1\n.MEND    MEND                                                       @C1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##EESTD": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 138, "newlines": 138, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##EESTD &RC,                 RETURN CODE KEYWORD              $\n               &R0,                   R0 KEYWORD                       $\n               &R1                    R1 KEYWORD\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##EESTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##EESTD\n.*\n.*  PURPOSE    DEFAULT EPILOG MACRO FOR ERREXIT BLOCKS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/29/86 MGG - BROKEN APART FROM ENDBLK AND RESTRUCTURED\n.*              8/05/05 MGG - CHANGE TO BRANCH TO QUIT OF ENDBLK WITH A\n.*                            L R14,=A(TAG) AND BR R14.\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLC  &#PBAMOD                 AMODE OF PROGRAM\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLB  &#PBRTN0                 RETURN R0\n         GBLB  &#PBRTN1                 RETURN R1\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         LCLC  &TAG                     WORK TAG\n.*--------------------------------------------------------------------*\n.*  ISSUE MESSAGE FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n.* NONE\n.*--------------------------------------------------------------------*\n.*  LOAD R0 WITH VALUE TO RETURN IN R0\n.*--------------------------------------------------------------------*\n         AIF   ('&R0' EQ '').PKW0030\n         AIF   (&#PBRTN0).PKW0021\n         MNOTE 8,'R0 keyword can not be specified if option RTNR0 is no$\n               t in effect'\n.PKW0021 AIF   ('&R0' EQ '(R0)').PKW0030\n         AIF   ('&R0'(1,1) NE '(').PKW0022\n         LR    R0,&R0(1)                LOAD R0\n         AGO   .PKW0030\n.PKW0022 AIF   ('&R0' NE '0').PKW0025\n         SLR   R0,R0                    SET R0 TO ZERO\n         AGO   .PKW0030\n.PKW0025 LA    R0,&R0                   LOAD R0\n.PKW0030 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD R1 WITH VALUE TO RETURN IN R1\n.*--------------------------------------------------------------------*\n         AIF   ('&R1' EQ '').PKW0040\n         AIF   (&#PBRTN1).PKW0031\n         MNOTE 8,'R1 keyword can not be specified if option RTNR1 is no$\n               t in effect'\n.PKW0031 AIF   ('&R1' EQ '(R1)').PKW0040\n         AIF   ('&R1'(1,1) NE '(').PKW0032\n         LR    R1,&R1(1)                LOAD R1\n         AGO   .PKW0040\n.PKW0032 AIF   ('&R1' NE '0').PKW0035\n         SLR   R1,R1                    SET R1 TO ZERO\n         AGO   .PKW0040\n.PKW0035 LA    R1,&R1                   LOAD R1\n.*--------------------------------------------------------------------*\n.PKW0040 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE AMODE CHANGE CODE IF NECESSARY\n.*--------------------------------------------------------------------*\n&TAG     SETC  '#BV&#BNDX(&#BLVL)'\n         AIF   (NOT &#PBXA).PRC0210\n         AIF   ('&#PBAMOD' EQ 'ANY').PRC0010\n         AIF   ('&#PBAMOD' EQ '&#BAMODE(&#BLVL)').PRC0210\n.PRC0010 AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0020\n         ##SWREG R15                    SAVE WORK REGISTER\n.PRC0020 AIF   (NOT &#PB370).PRC0100\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         BZ    &TAG                     NO, SKIP AMODE SETTING\n.PRC0100 AIF   ('&#PBAMOD' NE '31').PRC0110\n         L     R15,=A(&TAG+X'80000000')\n         BSM   0,R15                     AMODE=31.\n         AGO   .PRC0200\n.PRC0110 AIF   ('&#PBAMOD' NE 'ANY' AND '&#PBAMOD' NE '').PRC0120\n         L     R15,=A(&TAG)             SWITCH TO\n         O     R15,&#PBSMWA+4            AMODE AT ENTRY\n         BSM   0,R15                     TO THE PROGRAM.\n         AGO   .PRC0200\n.PRC0120 AIF   ('&#PBAMOD' NE '24').PRC0130\n         L     R15,=A(&TAG)             SWITCH TO\n         BSM   0,R15                     AMODE=24.\n         AGO   .PRC0200\n.PRC0130 ANOP INVALID AMODE (A PREVIOUS MACRO WILL ISSUE THE MESSAGE)\n.PRC0200 AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0210\n&TAG     ##RST R15=YES                  RESTORE REGISTERS\n         ##RWREG R15                    RESTORE WORK REGISTER\n         AGO   .PRC0300\n.PRC0210 AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0220\n&TAG     ##RST R15=NO                   RESTORE REGISTERS\n         AGO   .PRC0300\n.PRC0220 AIF   ('&RC'(1,1) NE '(').PRC0230\n&TAG     LR    R15,&RC(1)               LOAD RETURN CODE\n         ##RST R15=NO                   RESTORE REGISTERS\n         AGO   .PRC0300\n.PRC0230 ANOP\n&TAG     ##RST R15=YES                  RESTORE REGISTERS\n         AIF   ('&RC' NE '0').PRC0240\n         SLR   R15,R15                  SET RETURN CODE TO 0\n         AGO   .PRC0300\n.PRC0240 LA    R15,&RC                  LOAD RETURN CODE\n.PRC0300 ANOP\n         L     R14,=A(#BQ&#PBNDX)\n         BR    R14                      LEAVE PROGRAM WITH RC IN R15\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##ENDSD": {"ttr": 4365, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00-\\x00-\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 45, "newlines": 45, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##ENDSD\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##ENDSD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##ENDSD\n.*\n.*  PURPOSE    INTERNAL STRUCTURED MACRO USED TO END A SSD IF THERE\n.*             IS ONE OR A PSD IN OTHER CASES.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/05/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         AIF   ('&#BTYPE(1)' EQ 'SUBROUTINE').SSD\n         ENDPSD\n         MEXIT\n.SSD     ENDSSD\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##ENDWA": {"ttr": 4367, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x002\\x002\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 50, "newlines": 50, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##ENDWA\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##ENDWA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##ENDWA\n.*\n.*  PURPOSE    INTERNAL STRUCTURED MACRO USED TO END A SWA IF THERE\n.*             IS ONE OR A PWA IN OTHER CASES.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/05/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PBPWA                 PWA OPTION.\n         GBLB  &#SBSWA                 SWA IS IN EFFECT.\n         AIF   (NOT &#PBPWA).ERRPWA\n         AIF   (&#SBSWA).SWA\n         ENDPWA\n         MEXIT\n.SWA     ENDSWA\n         MEXIT\n.ERRPWA  MNOTE 8,'PWA OPTION SHOULD BE SPECIFIED ON THE PROGRAM BLOCK M$\n               ACRO.'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##EPSTD": {"ttr": 4369, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x9d\\x00\\x9d\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 157, "newlines": 157, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##EPSTD  &NAME,                NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &BASEREG,                BASE REGS                      $\n               &AMODE,                  ADDRESSING MODE                $\n               &SAVE                    REGISTER TO SAVE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##EPSTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##EPSTD\n.*\n.*  PURPOSE    INTERNAL MACRO USE FOR PROLOG FOR ERREXIT BLOCK.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - BROKE APART FOR BLOCK MACRO AND\n.*                            RESTRUCTURED.\n.*              5/08/89 MGG - REMOVED &SDID AND &WAID PARMS\n.*              8/07/05 MGG - CHANGED AMODE SETTING TO BE COMPATABLE@C3\n.*                            WITH NOCODEBASE OPTION.               @C3\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLC  &#BSV1(20)               BLOCK SAVE PARM 1\n         GBLC  &#BSV2(20)               BLOCK SAVE PARM 2\n         GBLC  &#BSV3(20)               BLOCK SAVE PARM 3\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#SBCSTM                 CUSTOM SUBROUTINE\n         GBLB  &#SBLDBS                 LOAD BASE OPTION\n         GBLB  &#SBSU                   SAVEUSING OPTION\n         GBLB  &#SBSWA                  SWA OPTION\n         GBLB  &#SBUSWA                 USERSWA OPTION\n         LCLC  &TAG,&TAG2               WORK FIELDS\n.*--------------------------------------------------------------------*\n.*  SUPPLY MISSING SWA.\n.*--------------------------------------------------------------------*\n.CLV0020 AIF   (NOT &#SBSWA).CLV0030\n         SWA   TYPE=LAST                SUPPLY MISSING SWA\n         ENDSWA\n.CLV0030 ANOP\n.*--------------------------------------------------------------------*\n.*  SET CHECK FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &OPTIONS,OPTION\n         ##IGMSG &BASEREG,BASEREG\n.*------------------------------------------------------------------\n.*  RESET SUBROUTINE OPTIONS.\n.*------------------------------------------------------------------\n&#SBCSTM SETB  0                        SET CUSTOM OFF\n&#SBSWA  SETB  0                        SET SWA OFF\n&#SBSU   SETB  0                        SET SAVEUSING OFF\n&#SBUSWA SETB  0                        SET USERSWA OFF\n&#SBLDBS SETB  0                        SET LOADBASE OFF\n.*--------------------------------------------------------------------*\n.*  SET AND CHECK AMODE.\n.*--------------------------------------------------------------------*\n&#BAMODE(&#BLVL) SETC  '&AMODE'\n         AIF   ('&AMODE' EQ '' OR '&AMODE' EQ 'ANY').ANY0020\n         AIF   ('&AMODE' EQ '24' OR '&AMODE' EQ '31').ANY0020\n         MNOTE 8,'AMODE=&AMODE is invalid on &TYPE block, keyword ignor$\n               ed'\n&#BAMODE(&#BLVL) SETC   ''\n.ANY0020 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE DS FOR ERREXIT NAME.\n.*--------------------------------------------------------------------*\n         AIF   ('&NAME' EQ '').ERX0020\n&NAME    DS    0H                       ERREXIT NAME\n         AGO   .ERX0990\n.ERX0020 ANOP\n&TAG     SETC  '#BX&#PBNDX'\n&TAG     DS    0H                       UNNAMED ERROR EXIT\n.ERX0990 ANOP\n.*--------------------------------------------------------------------*\n.*  WARN IF XA OPTION IS NOT SPECIFIED AND AMODE IS.  IF AMODE IS NOT\n.*  SPECIFIED OR \"ANY\" IS SPECIFIED, SKIP AMODE CHECKING CODE.\n.*--------------------------------------------------------------------*\n.AMO0000 ANOP\n&TAG     SETC  ''\n         AIF   ('&AMODE' EQ '').AMO0350\n         AIF   (&#PBXA).AMO0100\n         AIF   (&#XAWARN).AMO0350\n         MNOTE *,'AMODE ignored unless XA option specified for program $\n               block'\n&#XAWARN SETB  1                        ONLY ISSUE ONE TIME\n         AGO   .AMO0350\n.AMO0100 AIF   ('&#BAMODE(&#BLVL)' EQ 'ANY').AMO0350\n.AMO0200 ANOP\n.*--------------------------------------------------------------------*\n.*  IF OPTIONS XA AND 370, GENERATE TEST FOR XA\n.*--------------------------------------------------------------------*\n         ##SWREG R15                    SAVE WORK REGISTER\n&TAG     SETC  '#BY&#MNDX'\n         AIF   (NOT &#PBXA OR NOT &#PB370).AMO0300\n         LA    R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         BZ    &TAG                     SKIP AMODE SETTING\n.*--------------------------------------------------------------------*\n.*  GENERATE CHANGE AMODE CODE.\n.*--------------------------------------------------------------------*\n.AMO0300 ANOP\n         AIF   ('&#BAMODE(&#BLVL)' NE '31').AMO0310\n         L     R15,=A(&TAG+X'80000000') SET TO 31                   @C3\n         AGO   .AMO0320\n.AMO0310 L     R15,=A(&TAG)             SET TO 24                   @C3\n.AMO0320 BSM   0,R15                    BIT MODE.                   @C3\n&TAG     ##RWREG R15                    RESTORE WORK REG\n&TAG     SETC  ''\n.AMO0350 ANOP\n.*--------------------------------------------------------------------*\n.*  IF SAVE= KEYWORD SPECIFIED, SAVE REGISTERS.\n.*--------------------------------------------------------------------*\n&#BSV1(&#BLVL) SETC '&SAVE(1)'\n&#BSV2(&#BLVL) SETC '&SAVE(2)'\n&#BSV3(&#BLVL) SETC '&SAVE(3)'\n         AIF   ('&SAVE' EQ '').AMO0380\n         AIF   (N'&SAVE NE 2).AMO0360\n&TAG     ST    &SAVE(1),&SAVE(2)       SAVE REGISTER\n         AGO   .AMO0390\n.AMO0360 AIF   (N'&SAVE NE 3).AMO0370\n&TAG     STM   &SAVE(1),&SAVE(2),&SAVE(3) SAVE REGISTERS\n         AGO   .AMO0390\n.AMO0370 MNOTE 8,'Invalid number of parameters in SAVE= keyword'\n.AMO0380 AIF   ('&TAG' EQ '').AMO0390\n&TAG     DS    0H\n.AMO0390 ANOP\n.AMO9000 ANOP\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##IESTD": {"ttr": 4612, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00l\\x00l\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 108, "newlines": 108, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##IESTD &RC,                 RETURN CODE KEYWORD              $\n               &R0,                   R0                               $\n               &R1                    R1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##IESTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##IESTD\n.*\n.*  PURPOSE    DEFAULT EPILOG MACRO FOR INLINE BLOCKS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/29/86 MGG - BROKEN APART FROM ENDBLK AND RESTRUCTURED\n.*              8/07/05 MGG - CHANGED AMODE SETTING TO BE COMPATABLE@C2\n.*                            WITH NOCODEBASE OPTION.               @C2\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         LCLC  &TAG,&TAG2               WORK TAGS\n.*--------------------------------------------------------------------*\n.*  ISSUE MESSAGE FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &R0,R0\n         ##IGMSG &R1,R1\n.*--------------------------------------------------------------------*\n.*  IF OPTIONS XA AND AMODE IS DIFFERENT THAN ENCLOSING BLOCK'S\n.*  AMODE, GENERATE CODE TO SET AMODE TO ENCLOSING BLOCK'S AMODE\n.*--------------------------------------------------------------------*\n         AIF   (NOT &#PBXA).PRC0800\n         AIF   ('&#BAMODE(&#BLVL)' EQ '&#BAMODE(&#BLVL-1)').PRC0800\n.*--------------------------------------------------------------------*\n.*  IF OPTIONS XA AND 370, GENERATE TEST FOR XA\n.*--------------------------------------------------------------------*\n         AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0190\n         ##SWREG R15                    SAVE WORK REGISTER\n.PRC0190 ANOP\n&TAG     SETC  '#BV&#BNDX(&#BLVL)'\n         AIF   (NOT &#PB370).PRC0200\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         BZ    &TAG                     SKIP AMODE SETTING\n.*--------------------------------------------------------------------*\n.*  GENERATE CHANGE CODE\n.*--------------------------------------------------------------------*\n.PRC0200 ANOP\n         AIF   ('&#BAMODE(&#BLVL-1)' NE '31').PRC0210\n         L     R15,=A(&TAG+X'80000000') LOAD ADDR OF INST AFTER BSM @C2\n         AGO   .PRC0240                                             @C2\n.PRC0210 L     R15,=A(&TAG)             LOAD ADDR OF INST AFTER BSM @C2\n.PRC0220 AIF   ('&#BAMODE(&#BLVL-1)' NE 'ANY').PRC0240\n         AIF   ('&#PBSMWA' NE '').PRC0230\n         MNOTE 8,'SMWA= keyword needs to be specified on program block $\n               macro'\n         AGO   .PRC0240\n.PRC0230 O     R15,&#PBSMWA+4           SET HIGH BIT TO AMODE AT ENTRY\n.PRC0240 BSM   0,R15                    SET NEW MODE\n         AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0810\n&TAG     ##RST R15=YES                  RESTORE REGISTERS\n         ##RWREG R15                    RESTORE WORK REGISTER\n         AGO   .PRC0900\n.PRC0800 AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0810\n&TAG     ##RST R15=NO                   RESTORE REGISTERS\n         AGO   .PRC0900\n.PRC0810 AIF   ('&RC'(1,1) NE '(').PRC0820\n&TAG     LR    R15,&RC(1)               LOAD RETURN CODE\n         ##RST R15=NO                   RESTORE REGISTERS\n         AGO   .PRC0900\n.PRC0820 ANOP\n&TAG     ##RST R15=YES                  RESTORE REGISTERS\n         AIF   ('&RC' NE '0').PRC0830\n         SLR   R15,R15                  SET RETURN CODE TO ZERO\n         AGO   .PRC0900\n.PRC0830 LA    R15,&RC                  LOAD RETURN CODE\n.PRC0900 ANOP\n.*--------------------------------------------------------------------*\n.*  DECREMENT BLOCK LEVEL AND CHECK FOR IGNORED KEYWORDS\n.*--------------------------------------------------------------------*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##IGMSG": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00+\\x00+\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 43, "newlines": 43, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##IGMSG &KWD,                  KEYWORD                        $\n               &KWDNAME                 KEYWORD NAME\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##IGMSG\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##IGMSG\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO DISPLAY MESSAGE FOR IGNORED\n.*             KEYWORDS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         AIF   ('&KWD' EQ '').EXIT\n         MNOTE 4,'&KWDNAME=&KWD ignored'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##IPSTD": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x8d\\x00\\x8d\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 141, "newlines": 141, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##IPSTD &NAME,                 NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &AMODE,                  ADDRESSING MODE                $\n               &SAVE                    REGISTER TO SAVE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##IPSTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##IPSTD\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS DEFAULT FOR INLINE BLOCK PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - BROKEN APART FROM THE BLOCK MACRO AND\n.*                            RESTRUCURED.\n.*              5/08/89 MGG - REMOVED &SDID AND &WAID TAGS\n.*              8/07/05 MGG - CHANGED AMODE SETTING TO BE COMPATABLE@C3\n.*                            WITH NOCODEBASE OPTION.               @C3\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLC  &#BSV1(20)               BLOCK SAVE PARM 1\n         GBLC  &#BSV2(20)               BLOCK SAVE PARM 2\n         GBLC  &#BSV3(20)               BLOCK SAVE PARM 3\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#XAWARN                 XA WARNING MESSAGE ISSUED\n         LCLC  &TAG,&TAG2               WORK TAGS\n.*--------------------------------------------------------------------*\n.*  ISSUE WARNINGS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &OPTIONS,OPTION\n.*--------------------------------------------------------------------*\n.*  IF AMODE IS NOT SPECIFIED, IS \"ANY\", OR IS THE SAME AS THE\n.*  CONTAINING BLOCK, ASSUME THE AMODE OF THE CONTAINING BLOCK\n.*  AND SKIP THE GENERATION OF THE AMODE SWITCHING CODE.  IF THE\n.*  AMODE IS INVALID OR OPTION XA WAS NOT SPECIFIED ON THE PROGRAM\n.*  BLOCK, ISSUE AN MESSAGE AND DO THE SAME AS IF THE AMODE\n.*  WAS NOT SPECIFIED.\n.*--------------------------------------------------------------------*\n&#BAMODE(&#BLVL) SETC  '&AMODE'\n         AIF   ('&AMODE' EQ '').AMO0020\n         AIF   ('&AMODE' EQ 'ANY').AMO0020\n         AIF   ('&AMODE' EQ '&#BAMODE(&#BLVL-1)').AMO0020\n         AIF   ('&AMODE' EQ '24' OR '&AMODE' EQ '31').AMO0010\n         MNOTE 8,'AMODE=&AMODE is invalid on &TYPE block, keyword ignor$\n               ed'\n         AGO   .AMO0020\n.AMO0010 AIF   (&#PBXA).AMO0030\n         AIF   (&#XAWARN).AMO0020\n         MNOTE *,'AMODE ignored unless XA option specified for program $\n               block'\n&#XAWARN SETB  1                        ONLY ISSUE ONE TIME\n.AMO0020 ANOP\n&#BAMODE(&#BLVL) SETC  '&#BAMODE(&#BLVL-1)'\n         AGO   .AMO9000\n.AMO0030 ANOP\n.*------------------------------------------------------------------\n.*  IF THIS IS AN INLINE BLOCK WITH AMODE 24 OR 31 SPECIFIED AND\n.*  THE INLINE BLOCK IS WITHIN A SUBROUTINE BLOCK,  REQUIRE THAT\n.*  THE SUBROUTINE BLOCK HAS AMODE 24 OR 31 SPECIFIED.  THIS IS A\n.*  RESTRICTION THAT CAN BE REMOVED WHEN A WAY IS DEVELOPED TO SAVE\n.*  THE AMODE OF THE SUBROUTINE AT ENTRY.  THIS IS NEEDED BECAUSE\n.*  THE OUTERMOST INLINE BLOCK WITH AMODE 24 OR 31 MUST RETURN TO\n.*  THE AMODE OF THE SUBROUTINE ON EXIT.\n.*------------------------------------------------------------------\n         AIF   ('&#BTYPE(1)' NE 'SUBROUTINE').AMO0050\n         AIF   ('&#BAMODE(1)' EQ '31' OR '&#BAMODE(1)' EQ '24').AMO0050\n         MNOTE 8,'AMODE 24 or 31 must be specified on containing subrou$\n               tine block'\n.AMO0050 ANOP\n.*--------------------------------------------------------------------*\n.*  IF OPTIONS XA AND 370 ARE BOTH SPECIFIED FOR THE PROGRAM BLOCK,\n.*  GENERATE A TEST FOR XA.\n.*--------------------------------------------------------------------*\n&TAG     SETC  ''\n         ##SWREG R15                    SAVE WORK REGISTER\n&TAG     SETC  '#BY&#MNDX'\n         AIF   (NOT &#PBXA OR NOT &#PB370).AMO0300\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         ##B Z,&TAG                     SKIP AMODE SETTING          @C3\n.*--------------------------------------------------------------------*\n.*  GENERATE CHANGE AMODE CODE.\n.*--------------------------------------------------------------------*\n.AMO0300 ANOP\n         AIF   ('&#BAMODE(&#BLVL)' NE '31').AMO0310                 @C3\n         L     R15,=A(&TAG+X'80000000') SWITCH TO 31                @C3\n         AGO   .AMO0320                                             @C3\n.AMO0310 L     R15,=A(&TAG)             SWITCH TO 24                @C3\n.AMO0320 BSM   0,R15                    BIT MODE.                   @C3\n&TAG     ##RWREG R15                    RESTORE WORK REG\n&TAG     SETC  ''\n.AMO0350 ANOP\n.AMO9000 ANOP\n.*--------------------------------------------------------------------*\n.*  IF SAVE= KEYWORD SPECIFIED, SAVE REGISTERS.\n.*--------------------------------------------------------------------*\n&#BSV1(&#BLVL) SETC '&SAVE(1)'\n&#BSV2(&#BLVL) SETC '&SAVE(2)'\n&#BSV3(&#BLVL) SETC '&SAVE(3)'\n         AIF   ('&SAVE' EQ '').SAV0060\n         AIF   (N'&SAVE NE 2).SAV0020\n&TAG     ST    &SAVE(1),&SAVE(2)       SAVE REGISTER\n         AGO   .SAV0080\n.SAV0020 AIF   (N'&SAVE NE 3).SAV0040\n&TAG     STM   &SAVE(1),&SAVE(2),&SAVE(3) SAVE REGISTERS\n         AGO   .SAV0080\n.SAV0040 MNOTE 8,'Invalid number of parameters in SAVE= keyword'\n.SAV0060 AIF   ('&TAG' EQ '').SAV0080\n&TAG     DS    0H\n.SAV0080 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##L": {"ttr": 4621, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00_\\x00_\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 95, "newlines": 95, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##L   &REG,                    REGISTER TO LOAD               $\n               &FIELD,                  FIELD TO LOAD                  $\n               &WREG=                   WORK REGISTER\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1989.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##L\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##L\n.*\n.*  PURPOSE    INTERNAL MACRO TO LOAD A VALUE INTO A REGISTER.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    3/15/89 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         LCLC  &TAG                     WORK TAG\n         LCLC  &TREG                    WORK FIELD\n         AIF   ('&FIELD' NE '').X100\n         SLR   &REG,&REG                NO PARAMETER SPECIFIED\n         MEXIT\n.X100    AIF   (T'&FIELD NE 'N').X200\n         AIF   ('&FIELD'(1,1) LT '0' OR '&FIELD'(1,1) GT '9').ERR1\n         L     &REG,=F'&FIELD'          LOAD NUMERIC CONSTANT\n         MEXIT\n.X200    AIF   (K'&FIELD GT 4).X300\n         AIF   (K'&FIELD NE 4).X210\n         AIF   ('&FIELD'(1,2) NE '*R').X300\n         AIF   ('&FIELD'(3,1) NE '1').X300\n         AIF   ('&FIELD'(4,1) LT '0').X300\n         AIF   ('&FIELD'(4,1) GT '5').X300\n&TREG    SETC  '&FIELD'(2,3)\n         L     &REG,0(,&TREG)\n         MEXIT\n.X210    AIF   (K'&FIELD NE 3).X230\n         AIF   ('&FIELD'(1,2) NE '*R').X220\n         AIF   ('&FIELD'(3,1) LT '0').X300\n&TREG    SETC  '&FIELD'(2,2)\n         L     &REG,0(,&TREG)\n         MEXIT\n.X220    AIF   ('&FIELD'(1,1) NE 'R').X300\n         AIF   ('&FIELD'(2,1) NE '1').X300\n         AIF   ('&FIELD'(3,1) LT '0').X300\n         AIF   ('&FIELD'(3,1) GT '5').X300\n         AIF   ('&REG' EQ '&FIELD').MEXIT\n         LR    &REG,&FIELD\n         MEXIT\n.X230    AIF   (K'&FIELD NE 2).X300\n         AIF   ('&FIELD'(1,1) NE 'R').X300\n         AIF   ('&FIELD'(2,1) LT '0').X300\n         AIF   ('&REG' EQ '&FIELD').MEXIT\n         LR    &REG,&FIELD\n         MEXIT\n.X300    AIF   ('&FIELD'(1,1) NE '*').X400\n&TAG     SETC  '&FIELD'(2,K'&FIELD-1)\n         AIF   ('&REG' NE 'R0').X310\n         AIF   (T'&WREG EQ 'O').ERR2\n         L     &WREG,&TAG\n         L     &REG,0(,&WREG.)\n         MEXIT\n.X310    ANOP\n         L     &REG,&TAG\n         L     &REG,0(,&REG.)\n         MEXIT\n.X400    L     &REG,&FIELD              LOAD ADDR OF PARAMETER\n         MEXIT\n.ERR1    MNOTE 8,'Decimal self-defining terms are the only type of self$\n               -defining terms allowed'\n         MEXIT\n.ERR2    MNOTE 8,'WREG is required if R0,*ADDR is used'\n.MEXIT   MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##LA": {"ttr": 4624, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00B\\x00B\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 66, "newlines": 66, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##LA  &REG,                    REGISTER TO LOAD               $\n               &FIELD                   FIELD TO LOAD\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##LA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##LA\n.*\n.*  PURPOSE    INTERNAL MACRO USED BY PLIST AND CALLX MACRO.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    6/20/85 MGG - NEW\n.*              8/31/88 MGG - ADDED *ADDR SUPPORT                   @C1\n.*             11/03/98 MGG - ADDED UDT SUPPORT                     @C2\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &##DT__VALUE                                         @C2\n         LCLC  &TAG                     WORK TAG\n         AIF   ('&FIELD' NE '').X100\n         SLR   &REG,&REG                NO PARAMETER SPECIFIED\n         MEXIT\n.X100    AIF   (T'&FIELD NE 'N').X200\n         AIF   ('&FIELD'(1,1) LT '0' OR '&FIELD'(1,1) GT '9').ERR1\n         LA    &REG,=F'&FIELD'          LOAD ADDR OF NUMERIC CONSTANT\n         MEXIT\n.X200    AIF   ('&FIELD'(1,1) NE '''').X300\n         LA    &REG,=C&FIELD            LOAD ADDR OF CHARACTER STRING\n         MEXIT\n.X300    AIF   ('&FIELD'(1,1) NE '*').X400                          @C1\n&TAG     SETC  '&FIELD'(2,K'&FIELD-1)                               @C1\n         L     &REG,&TAG                                            @C1\n         MEXIT                                                      @C1\n.X400    AIF   ('&FIELD'(1,1) NE '%').X500                          @C2\n         ##DTXTR &FIELD                                             @C2\n         LA    &REG,=&##DT__VALUE                                   @C2\n         MEXIT                                                      @C2\n.X500    LA    &REG,&FIELD              LOAD ADDR OF PARAMETER      @C2\n         MEXIT\n.ERR1    MNOTE 8,'Decimal self-defining terms are the only type of self$\n               -defining terms allowed'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##LAL": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00:\\x00:\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 58, "newlines": 58, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##LAL &REG,&OP,&LPBASE=YES\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##LAL\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##LAL\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO DO A LOAD ADDRESS LONG.\n.*             IF ARCHLVL>1 IT USES THE LARL, OTHERWISE IT\n.*             SIMULATES IT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/05/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO)\n         LCLC  &TAG                     WORK TAG\n         AIF   (&SYSALVL LT 2).SIM\n&NAME    LARL  &REG,&OP\n         MEXIT\n.SIM     AIF   ('&LPBASE' EQ 'YES').SIML\n         AIF   ('&LPBASE' NE 'NO').ERRLBAS\n&NAME    CNOP  0,4\n&TAG     SETC  '##LAL__A&SYSNDX'\n         ##B   AS,&REG,&TAG\n         DC    A(&OP)\n&TAG     L     &REG,0(,&REG)\n         MEXIT\n.SIML    ANOP\n&NAME    L     &REG,=A(&OP)\n         MEXIT\n.ERRLBAS MNOTE 8,'##LAL LPBASE=&LPBASE IS NOT VALID.'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##LDBS": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x84\\x00\\x84\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 132, "newlines": 132, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&MACTAG  ##LDBS &NAME,&BREGS,&DEFREG,&FRSTLD=NO                     @C1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##LDBS\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##LDBS\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO LOAD BASE REGISTERS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    2/14/86 - NEW  MGG\n.*              8/06/05 - REWORKED AND ADDED SUPPORT FOR NOCODEBASE.@C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO) @C1\n         GBLA  &#MCVREG\n         GBLA  &#MNDX                   MASTER TAG INDEX\n         GBLB  &#PBXA                   XA PROGRAM OPTION\n         GBLB  &#PB370                  370 PROGRAM OPTION\n         GBLB  &#SBCDBS                 SUBROUTIME HAS BASE FOR CODE@C1\n         GBLC  &SSD                     TAG FOR SSD.                @C1\n         LCLA  &NDX                     LOCAL TAG INDEX\n         LCLC  &REGS                    COMMA SEPERATED REGS.       @C1\n         LCLC  &BASE1                   FIRST BASE.                 @C1\n         LCLC  &REG                                                 @C1\n         LCLC  &UNAME                   USING NAME.                 @C1\n         LCLC  &TAG                     TAG FOR FIRST INSTRUCTION.  @C1\n         LCLC  &TAG1,&TAG2              WORK TAGS.                  @C1\n&#MNDX   SETA  &#MNDX+1                 INCREMENT MASTER TAG INDEX\n&NDX     SETA  &#MNDX                   SET MACROS LOCAL TAG INDEX\n&TAG     SETC  '&MACTAG'                SET FIRST TAG.              @C1\n.*------------------------------------------------------------------@C1\n.* SET &BASE1 TO FIRST BASE AND &UNAME TO &NAME.                    @C1\n.*------------------------------------------------------------------@C1\n&BASE1   SETC  '&DEFREG'                                            @C1\n         AIF   ('&BREGS' EQ '').SFB0010                             @C1\n&BASE1   SETC  '&BREGS(1)'                                          @C1\n.SFB0010 ANOP                                                       @C1\n&UNAME   SETC  '&NAME'                                              @C1\n.*------------------------------------------------------------------@C1\n.* IF FRSTLD=YES, LOAD FIRST BASE REGISTER.  BASE ON CODE OR SSD AS @C1\n.* INDICATED BY SUBROUTINES CODEBASE OPTION.                        @C1\n.*------------------------------------------------------------------@C1\n         AIF   ('&FRSTLD' NE 'YES').FY9999                          @C1\n         AIF   (NOT &#SBCDBS).FY2000                                @C1\n         AIF   ('&NAME' EQ '*').FY1000                              @C1\n&TAG     LR    &BASE1,R15               LOAD SUBROUTINE BASE REG.   @C1\n         AGO   .FY3000                                              @C1\n.FY1000  ANOP                                                       @C1\n&TAG     ##B ASR,&BASE1,0               LOAD SUBROUTINE BASE REG.   @C1\n         AGO   .FY3000                                              @C1\n.FY2000  ANOP                                                       @C1\n&TAG     ##LAL &BASE1,&SSD              LOAD SUBROUTINE BASE REG.   @C1\n&UNAME   SETC  '&SSD'                   BASED ON SSD.               @C1\n.FY3000  ANOP                                                       @C1\n&TAG     SETC  ''                                                   @C1\n*FIXME   ##MREG USE,&BASE1 MAY BE NEEDED HERE.  CHECK LATER.        @C1\n.FY9999  ANOP                                                       @C1\n.*------------------------------------------------------------------@C1\n.* GENERATE USING.                                                  @C1\n.*------------------------------------------------------------------@C1\n.PRC1000 ANOP\n&CTR     SETA  1\n&REGS    SETC  '&BASE1'                                             @C1\n         AGO   .PRC1110                                             @C1\n.PRC1100 ##MREG USE,&BREGS(&CTR)\n.PRC1110 AIF   (N'&BREGS LE &CTR).PRC1200\n&REGS    SETC  '&REGS,&BREGS(&CTR+1)'                               @C1\n&CTR     SETA  &CTR+1\n         AGO   .PRC1100\n.PRC1200 USING &UNAME,&REGS             ESTABLISH SUBROUTINE BASE   @C1\n.*------------------------------------------------------------------@C1\n.* GENERATE AMODE CODE IF APPROPRIATE IF NAME IS * AND FRSTLD=YES.  @C1\n.*------------------------------------------------------------------@C1\n         AIF   (NOT &#PB370 OR NOT &#PBXA OR '&NAME' NE '*').AMD9999 C1\n         AIF   ('&FRSTLD' NE 'YES').AMD9999                         @C1\n&TAG1    SETC  '##LDBS__Q&NDX'                                      @C1\n&TAG2    SETC  '##LDBS__R&NDX'                                      @C1\n&TAG1    ##SWREG R15                                                @C1\n         L     R15,X'10'                POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING ON XA?\n         ##B Z,&TAG2                    NO, SKIP NEXT 3 INSTRUCTIONS@C1\n         BASR  &BASE1,0                 LOAD FIRST BASE             @C1\n         LA    R15,*-&TAG1              ADJUST TO SAME ADDR AS BALR @C1\n         SLR   &BASE1,R15               INSTRUCTION PRODUCED        @C1\n&TAG2    ##RWREG R15                                                @C1\n.AMD9999 ANOP                                                       @C1\n.*------------------------------------------------------------------@C1\n.* LOAD EXTRA BASE REGISTERS.                                       @C1\n.*------------------------------------------------------------------@C1\n&CTR     SETA  1\n&REG     SETC  '&BASE1'                                             @C1\n         AGO   .LDB1900                                             @C1\n.LDB1000 ANOP                                                       @C1\n&CTR     SETA  &CTR+1                                               @C1\n         AIF   (&SYSALVL LE 0).LDB1100                              @C1\n         LR    &BREGS(&CTR),&REG                                    @C1\n         ##AHI &BREGS(&CTR),4096                                    @C1\n         AGO   .LDB1200                                             @C1\n.LDB1100 ANOP                                                       @C1\n         LA    &BREGS(&CTR),X'800'(,&REG)                           @C1\n         LA    &BREGS(&CTR),X'800'(,&BREGS(&CTR))                   @C1\n.LDB1200 ANOP                                                       @C1\n&REG     SETC  '&BREGS(&CTR)'                                       @C1\n.LDB1900 AIF   (N'&BREGS GT &CTR).LDB1000                           @C1\n.*------------------------------------------------------------------@C1\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##LHI": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00.\\x00.\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 46, "newlines": 46, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##LHI  &REG,&OP\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##LHI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##LHI\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE AN LOAD HALFWORD\n.*             IMMEDIATE BASED ON ARCH LEVEL.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO)\n         AIF   (&SYSALVL LT 1).SIM      USE LHI IS AVAILABLE FOR SURE.\n&NAME    LHI   &REG,&OP\n         MEXIT\n.SIM     ANOP                           USE LH TO SIMULATE IS NOT SURE.\n&NAME    LH    &REG,=Y(&OP)\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##MODPFX": {"ttr": 4872, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00.\\x00.\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 46, "newlines": 46, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##MODPFX &NAME,                NAME OF BLOCK                  $\n               &CPYRGHT                 COPYRIGHT NOTICE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1990.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##MODPFX\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##MODPFX\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO BUILD THE PREFIX OF A PROGRAM\n.*             BLOCK.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    2/04/90 MGG - NEW.\n.*\n.*--------------------------------------------------------------------*\n         DC    AL1(8+10+6)\n         DC    CL8'&NAME',CL10' &SYSDATE ',CL6'&SYSTIME'\n         AIF   ('&CPYRGHT' EQ '').BLD0010\n         DC    C&CPYRGHT\n.BLD0010 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##MOVEL": {"ttr": 4874, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00=\\x00=\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 61, "newlines": 61, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##MOVEL &TOREG,&FROMREG,&LENREG,&N=,&MACNAME=##MOVEL\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##MOVEL\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##MOVEL\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE A MORE EFFICIENT\n.*             MOVE LONG THEN MVCL.  THERE IS ONLY ONE LENGTH\n.*             SO PADDING IS NOT SUPPORTED.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/02/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         LCLA  &WN\n&WN      SETA  N'&SYSLIST\n         AIF   ('&N' EQ '').CHECKN\n&WN      SETA  &N\n.CHECKN  AIF   (&WN NE 3).ERRNPRM\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H\n.NONAME  ANOP\n         LOOP WHILE,(CHI,&LENREG,GE,256)\n          MVC   0(256,&TOREG),0(&FROMREG)\n          ##AHI &TOREG,256\n          ##AHI &FROMREG,256\n          ##AHI &LENREG,-256\n         ENDLOOP WHILE\n         IF (TREG,&LENREG,P)\n          ##AHI  &LENREG,-1\n          EXI   &LENREG,(MVC,0(*-*,&TOREG),0(&FROMREG))\n         ENDIF\n         MEXIT\n.ERRNPRM MNOTE 8,'Expecting 3 parameters on &MACNAME.'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##MREG": {"ttr": 4876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00n\\x00n\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 110, "newlines": 110, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&LABEL   ##MREG &TYPE,&REG\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##MREG\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##MREG\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO KEEP UP WITH WHICH REGS ARE USED\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    2/14/86 - NEW  MGG\n.*              8/10/05 - MGG Added TYPE=CHECK.\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MCVREG\n         GBLB  &#REG(16)\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS RESET,  INDICATE ALL BUT R13-R1 AS FREE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'RESET').PRC1000\n&#REG(0+1)  SETB 1\n&#REG(1+1)  SETB 1\n&#REG(2+1)  SETB 0\n&#REG(3+1)  SETB 0\n&#REG(4+1)  SETB 0\n&#REG(5+1)  SETB 0\n&#REG(6+1)  SETB 0\n&#REG(7+1)  SETB 0\n&#REG(8+1)  SETB 0\n&#REG(9+1)  SETB 0\n&#REG(10+1) SETB 0\n&#REG(11+1) SETB 0\n&#REG(12+1) SETB 0\n&#REG(13+1) SETB 1\n&#REG(14+1) SETB 1\n&#REG(15+1) SETB 1\n            MEXIT\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS USE, INDICATE REGISTER USED IF VALID AND NOT ALREADY\n.*  USED.\n.*--------------------------------------------------------------------*\n.PRC1000 AIF   ('&TYPE' NE 'USE').PRC2000\n         ##CVREG &REG\n         AIF   (&#MCVREG LE 15).PRC1020\n         MNOTE 8,'Register specification &REG is invalid'\n         MEXIT\n.PRC1020 AIF   (NOT &#REG(&#MCVREG+1)).PRC1040\n         MNOTE 8,'Register &REG is a temporary register or reserved for+\n                another purpose.'\n.PRC1040 ANOP\n&#REG(&#MCVREG+1) SETB 1                INDICATE REGISTER USED\n         MEXIT\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS RELEASE,  INDICATE REGISTER IS NOT USED IF VALID.\n.*--------------------------------------------------------------------*\n.PRC2000 AIF   ('&TYPE' NE 'RELEASE').PRC3000\n         ##CVREG &REG\n         AIF   (&#MCVREG LE 15).PRC2020\n         MNOTE 8,'Register specification &REG is invalid'\n         MEXIT\n.PRC2020 AIF   (&#REG(&#MCVREG+1)).PRC2040\n         MNOTE 8,'Register &REG was not used - internal error'\n.PRC2040 ANOP\n&#REG(&#MCVREG+1) SETB 0                INDICATE REGISTER USED\n         MEXIT\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS CHECK, ISSUE MNOTE IF REG ALREADY USED.  THIS IS USEFUL\n.*  IF NEEDING TO CHECK REGISTER FOR TEMPORARY USE.\n.*--------------------------------------------------------------------*\n.PRC3000 AIF   ('&TYPE' NE 'CHECK').PRC4000\n         ##CVREG &REG\n         AIF   (&#MCVREG LE 15).PRC3020\n         MNOTE 8,'Register specification &REG is invalid'\n         MEXIT\n.PRC3020 AIF   (NOT &#REG(&#MCVREG+1)).PRC3040\n         MNOTE 8,'Register &REG is a temporary register or reserved for+\n                another purpose.'\n.PRC3040 ANOP\n         MEXIT\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS NOT ONE OF THE ABOVE, ISSUE ERROR MESSAGE.\n.*--------------------------------------------------------------------*\n.PRC4000 MNOTE 8,'Invalid type of &TYPE on ##MREG macro - internal erro$\n               r'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##ORGS": {"ttr": 4879, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00I\\x00I\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 73, "newlines": 73, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##ORGS &F,            ORGS FOR                                $\n               &C              WHEN CALLED FROM\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##ORGS\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##ORGS\n.*\n.*  PURPOSE    INTERNAL MACRO USED PRODUCE ORGS TO DETERMINE MAXIMUM\n.*             SWA STORAGE NEEDED\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    7/14/85 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#CSF(500)                CALLSUB FROM\n         GBLA  &#CSFF(99)                FIRST FOR SUBROUTINE FROM\n         GBLA  &#CSFT#N                  CALLSUB FROM/TO NEXT NUMBER\n         GBLA  &#CST(500)                CALLSUB TO\n         GBLA  &#CSVST(99)               SUBROUTINES VISITED\n         GBLC  &#SBNM(99)                SUBROUTINE NAMES\n         GBLA  &#SBORGC                  ORG COUNTER\n         GBLA  &#SBREC(99)               SUBROUTINE RECUR NUMBER\n         LCLA  &CTR                      LOCAL WORK VARIABLE\n         LCLC  &TAG                      LOCAL WORK TAG\n         MNOTE *,'For subroutine &#SBNM(&F)(&F) when called from subrou$\n               tine &#SBNM(&C)(&C)'\n&#CSVST(&F) SETA &#CSVST(&F)+1\n&CTR     SETA  &#CSFF(&F)\n         AIF   (&CTR EQ 0).FINISH\n&TAG     SETC  ''\n.LOOP    AIF   (&CTR GE &#CSFT#N).FINISH\n         AIF   (&#CSF(&CTR) NE &F).FINISH\n         AIF   (&#CST(&CTR) EQ &F).NEXT\n         AIF   (&#CSVST(&#CST(&CTR)) GT 1).NEXT\n         AIF   (&#CSVST(&#CST(&CTR)) EQ 1).PASTORG\n         AIF   ('&TAG' NE '').GENORG\n&TAG     SETC  '#SB$&#SBORGC'\n&#SBORGC SETA  &#SBORGC+1\n&TAG     EQU   *\n.GENORG  ORG   &TAG+#SBL&#CST(&CTR)*&#SBREC(&#CST(&CTR))\n.PASTORG ##ORGS &#CST(&CTR),&F\n.NEXT    ANOP\n&CTR     SETA  &CTR+1\n         AGO   .LOOP\n.FINISH  ANOP\n&#CSVST(&F) SETA &#CSVST(&F)-1\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PEDC": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\xbf\\x00\\xbf\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 191, "newlines": 191, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PEDC &RC,                  RETURN CODE KEYWORD              $\n               &R0,                   VALUE TO RETURN IN R0            $\n               &R1                    VALUE TO RETURN IN R1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PEDC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PEDC\n.*\n.*  PURPOSE    IDMS/DC EPILOG MACRO FOR PROGRAM BLOCKS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   01/05/87 JCB - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLA  &#BMLVL(20)              BLOCK STRUCTURAL LEVEL\n         GBLC  &#BNAME(20)              BLOCK NAMES\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLB  &#PBPWA                  PROGRAM BLOCK HAS PWA\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLC  &#PBNAME                 PROGRAM BLOCK NAME\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#SBSWA                  SWA OPTION\n         GBLB  &#PBLOCR                 LOCTR OPTION\n         GBLB  &#SBSU                   SAVEUSING OPTION\n         GBLB  &#SBUSWA                 USERSWA OPTION\n         GBLA  &#SB#C                   CURRENT SUBROUTINE BLOCK NUM\n         GBLC  &#PBAMOD                 AMODE OF PROGRAM\n         GBLB  &#PBRTN0                 OPTION=RTNR0\n         GBLB  &#PBRTN1                 OPTION=RTNR1\n         GBLA  &#SBPLMX                 MAXIMUM PARMS IN SUBROUTINE\n         GBLB  &#SBCSTM                 CUSTOM SUBROUTINE BLOCK\n         GBLB  &#DC#RTN             DC: GENERATE A #RTN\n         GBLB  &#DC#RET             DC: GENERATE A #RETURN\n         GBLB  &#DCSYS              DC: SYSTEM MODE\n         GBLC  &#DCNTSK             DC: NXTTASK= FOR #RETURN\n         GBLC  &#DCRTYP             DC: RTNTYPE= FOR #RETURN\n         GBLC  &#DCRINT             DC: RESINT=  FOR #RETURN\n         GBLC  &#DCRPGM             DC: RESPGM=  FOR #RETURN\n         GBLC  &#DCPWAR             DC: FIRST REGISTER OF PWAREG=\n         GBLB  &#DCRENT             DC: RENT OPTION\n         GBLB  &#DCGSTK             DC: GETSTK OPTION\n         LCLC  &TAG,&TAG2,&TAG3         WORK TAGS\n         LCLC  &#RETOPS,&COMMA\n         LCLA  &CNT                     WORK COUNTER\n         LCLB  &SKIPRC\n         LCLB  &SKIPR0\n         LCLB  &SKIPR1\n&SKIPRC  SETB  0\n&SKIPR0  SETB  0\n&SKIPR1  SETB  0\n&TAG     SETC  ''\n&TAG2    SETC  ''\n&TAG3    SETC  ''\n.*--------------------------------------------------------------------*\n.*  ISSUE MESSAGE FOR IGNORED KEYWORD.\n.*--------------------------------------------------------------------*\n         AIF   (&#DC#RTN).PWA\n         ##IGMSG &RC,RC            IGNORE RC ONLY IF NO#RTN\n         ##IGMSG &R0,R0\n         ##IGMSG &R1,R1\n&SKIPRC  SETB  1\n.*====================================================================*\n.*  WORKING WITH PROGRAM WORK AREA.\n.*====================================================================*\n.PWA     ANOP\n&TAG     SETC  '#BQ&#PBNDX'\n&TAG2    SETC  '#BF&#PBNDX'\n.*\n.*  RTNR0 PROCESSING\n.*\n.RTNR000 AIF   (NOT &#DC#RTN).RCD0000\n         AIF   ('&R0' EQ '').RTNR100\n         AIF   (NOT &#PBRTN0).ERR0001\n         AIF   ('&R0'(1,1) NE '(').RTNR010\n&TAG3    SETC  'LR'\n         AGO   .RTNR020\n.RTNR010 ANOP\n&TAG3    SETC  'LA'\n.RTNR020 ANOP\n         &TAG3  R0,&R0\n.*\n.*  RTNR1 PROCESSING\n.*\n.RTNR100 AIF   ('&R1' EQ '').RCD0000\n         AIF   (NOT &#PBRTN1).ERR0002\n         AIF   ('&R1'(1,1) NE '(').RTNR110\n&TAG3    SETC  'LR'\n         AGO   .RTNR120\n.RTNR110 ANOP\n&TAG3    SETC  'LA'\n.RTNR120 ANOP\n         &TAG3  R1,&R1\n.*\n.RCD0000 ANOP\n         AIF   (&SKIPRC OR '&RC' EQ '').FRE0000\n         AIF   ('&RC' EQ '(R15)').FRE0000\n         AIF   ('&RC'(1,1) NE '(').RCD0010\n         LR    R15,&RC(1)               LOAD R15 WITH RETURN CODE\n         AGO   .FRE0000\n.RCD0010 AIF   ('&RC' NE '0').RCD0020\n         SLR   R15,R15                  SET RETURN CODE TO ZERO\n         AGO   .FRE0000\n.RCD0020 LA    R15,&RC                  LOAD RETURN CODE\n.FRE0000 ANOP\n&TAG     DS    0H\n         AIF   (NOT &#PBPWA OR NOT &#DCRENT).RET0000 IF NO PWA OBTAINED\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO FREEMAIN PWA IF PWA WAS OBTAINED BY GETMAIN.\n.*--------------------------------------------------------------------*\n         AIF   (&SKIPRC OR '&RC' EQ '').FRE0010\n         LR    R2,R15                   SAVE RETURN CODE IN R2\n.FRE0010 ANOP\n         AIF   (&#DCGSTK).FRE0040       IF GETSTK USED, SKIP #FREESTG\n         AIF   ('&R0' EQ '' OR NOT &#DC#RTN).FRE0020\n         LR    R3,R0                    SAVE R0 VALUE\n.FRE0020 AIF   ('&R1' EQ '' OR NOT &#DC#RTN).FRE0030\n         LR    R4,R1                    SAVE R1 VALUE\n.FRE0030 ANOP\n         AIF   (&#DCSYS).FRE0035\n         #FREESTG ADDR=(&#DCPWAR)       FREEMAIN PWA\n         AGO   .FRE0040\n.FRE0035 ANOP\n         #FREESTG ADDR=(&#DCPWAR),RGSV=(R2-R8)   FREE PWA\n.FRE0040 ANOP\n         AIF   ('&R0' EQ '' OR NOT &#DC#RTN).FRE0050\n         LR    R0,R3                    RESTORE R0 VALUE\n.FRE0050 AIF   ('&R1' EQ '' OR NOT &#DC#RTN).FRE0060\n         LR    R4,R1                    RESTORE R1 VALUE\n.FRE0060 AIF   (&SKIPRC OR '&RC' EQ '').RET0000\n         LR    R15,R2                   RESTORE RETURN CODE\n.*--------------------------------------------------------------------*\n.*  #RETURN PROCESSING\n.*--------------------------------------------------------------------*\n.RET0000 ANOP\n         AIF   (NOT &#DC#RET).RTN0000\n         AIF   ('&#DCRTYP' NE '').RET0100\n&#DCRTYP SETC  'NORMAL'\n.RET0100 ANOP\n MNOTE *,'#RETURN NXTTASK=&#DCNTSK,TYPE=&#DCRTYP,RESINT=&#DCRINT,RESPGM*\n               =&#DCRPGM'\n         #RETURN NXTTASK=&#DCNTSK,TYPE=&#DCRTYP,RESINT=&#DCRINT,       *\n               RESPGM=&#DCRPGM\n         AGO   .EXIT\n.*--------------------------------------------------------------------*\n.*  #RTN PROCESSING\n.*--------------------------------------------------------------------*\n.RTN0000 ANOP\n         AIF   (NOT &#DC#RTN).TAG0000\n&TAG2    DS    0H\n         #RTN\n         AGO   .EXIT\n.TAG0000 ANOP\n&TAG2    DS    0H\n.EXIT    MEXIT\n.ERR0001 MNOTE 8,'R0= invalid if option RTNR0 not specified'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'R1= invalid if option RTNR1 not specified'\n         AGO   .EXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PEOS": {"ttr": 5125, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01\\x10\\x01\\x10\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 272, "newlines": 272, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PEOS &RC,                  RETURN CODE KEYWORD              $\n               &R0,                   VALUE TO RETURN IN R0            $\n               &R1                    VALUE TO RETURN IN R1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PEOS\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PEOS\n.*\n.*  PURPOSE    DEFAULT EPILOG MACRO FOR PROGRAM BLOCKS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/29/86 MGG - BROKEN APART FROM ENDBLK AND RESTRUCTURED\n.*              4/23/86 MGG - ADDED REUSABLE PWA AND ESV SUPPORT    @C1\n.*              5/08/89 MGG - CHANGED &#PBWAID TAG TO &PWA          @C2\n.*              3/28/91 MGG - ADDED MANUALFREE OPTION SUPPORT       @C3\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C4\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLB  &#PBBR14                 BR14 OPTION FOR PROGRAM BLOCK\n         GBLB  &#PBDYN                  DYN OPTION\n         GBLB  &#PBGTMN                 SAVE AREA GETMAINED\n         GBLB  &#PBMAIN                 MAIN OPTION\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLB  &#PBNRSV                 NORENT SAVE AREA IN PROGRAM BLK\n         GBLB  &#PBPWA                  PROGRAM BLOCK HAS PWA\n         GBLB  &#PBRTN0                 RETURN R0 OPTION\n         GBLB  &#PBRTN1                 RETURN R1 OPTION\n         GBLB  &#PBRPWA                 REUSABLE PWA OPTION         @C1\n         GBLB  &#PBMFRE                 REUSABLE PWA OPTION         @C3\n         GBLB  &#PBSAVE                 REGISTERS SAVED IN PROGRAM BLK\n         GBLB  &#PBESV                  ENVIRONMENT SUPPORT OPTION  @C1\n         GBLC  &PWA                     PROGRAM BLOCK WORK AREA ID  @C2\n         GBLA  &#PB#C                   NUMBER OF PROGRAM BLOCK     @C1\n         GBLA  &#PBPWAP                 REUSABLE PWA PARM NUMBER    @C1\n         LCLC  &TAG,&TAG2               WORK TAGS                   @C1\n.*--------------------------------------------------------------------*\n.*  ISSUE MESSAGE FOR IGNORED KEYWORD.\n.*--------------------------------------------------------------------*\n.* NONE\n.*--------------------------------------------------------------------*\n&TAG     SETC  '#BQ&#PBNDX'\n.*--------------------------------------------------------------------*\n.*  LOAD R15 WITH RETURN CODE.\n.*--------------------------------------------------------------------*\n         AIF   ('&RC' EQ '(R15)' OR '&RC' EQ '').PRC0020\n         AIF   ('&RC'(1,1) NE '(').PRC0012\n         LR    R15,&RC(1)               LOAD R15 WITH RETURN CODE\n         AGO   .PRC0020\n.PRC0012 AIF   ('&RC' NE '0').PRC0015\n         SLR   R15,R15                  SET RETURN CODE TO ZERO\n         AGO   .PRC0020\n.PRC0015 LA    R15,&RC                  LOAD RETURN CODE\n.PRC0020 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD R0 WITH VALUE TO RETURN IN R0\n.*--------------------------------------------------------------------*\n         AIF   ('&R0' EQ '').PRC0030\n         AIF   (&#PBRTN0).PRC0021\n         MNOTE 8,'R0 keyword can not be specified if option RTNR0 is no$\n               t in effect'\n.PRC0021 AIF   ('&R0' EQ '(R0)').PRC0030\n         AIF   ('&R0'(1,1) NE '(').PRC0022\n         LR    R0,&R0(1)                LOAD R0\n         AGO   .PRC0030\n.PRC0022 AIF   ('&R0' NE '0').PRC0025\n         SLR   R0,R0                    SET R0 TO ZERO\n         AGO   .PRC0030\n.PRC0025 LA    R0,&R0                   LOAD R0\n.PRC0030 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD R1 WITH VALUE TO RETURN IN R1\n.*--------------------------------------------------------------------*\n         AIF   ('&R1' EQ '').PRC0040\n         AIF   (&#PBRTN1).PRC0031\n         MNOTE 8,'R1 keyword can not be specified if option RTNR1 is no$\n               t in effect'\n.PRC0031 AIF   ('&R1' EQ '(R1)').PRC0040\n         AIF   ('&R1'(1,1) NE '(').PRC0032\n         LR    R1,&R1(1)                LOAD R1\n         AGO   .PRC0040\n.PRC0032 AIF   ('&R1' NE '0').PRC0035\n         SLR   R1,R1                    SET R1 TO ZERO\n         AGO   .PRC0040\n.PRC0035 LA    R1,&R1                   LOAD R1\n.*--------------------------------------------------------------------*\n.PRC0040 ANOP\n         AIF   (NOT &#PBPWA).PRC0100\n.*====================================================================*\n.*  WORKING WITH PROGRAM WORK AREA.\n.*====================================================================*\n.*--------------------------------------------------------------------*\n.*  IF NONREENTRENT PWA, JUST BACKLINK AND RESTORE REGISTERS.       @C1\n.*--------------------------------------------------------------------*\n         AIF   (NOT &#PBNRSV).PRC0045\n&TAG     L     R13,4(,R13)              BACKLINK\n&TAG     SETC  ''\n         AGO   .RST0000                 GO RESTORE REGISTERS\n.PRC0045 ANOP\n.*------------------------------------------------------------------@C1\n.*  IF THIS IS A REUSABLE PWA AND THE PWA IS NOT MARKED TO BE FREED,@C1\n.*  BACKLINK AND SKIP FREEMAIN CODE.  IF THIS IS A REUSABLE PWA THAT@C1\n.*  IS MARKED TO BE FREED, CLEAR THE ANCHOR AND DO NORMAL FREEMAIN  @C1\n.*  CODE.                                                           @C1\n.*------------------------------------------------------------------@C1\n&TAG2    SETC  ''                                                   @C1\n         AIF   (NOT &#PBRPWA).PRC0047                               @C3\n&TAG2    SETC  '#BF&#PBNDX'                                         @C1\n&TAG     L     R14,4(,R13)              LOAD R14 WITH BACKLINK      @C1\n         L     R14,24(,R14)             LOAD R14 WITH R1 AT ENTRY   @C1\n         L     R14,(&#PBPWAP-1)*4(,R14) POINT R14 TO PWA ANCHOR     @C1\n&TAG     SETC  '#BL&#PBNDX'                                         @C1\n         TM    0(R14),X'80'             IS PWA MARKED TO BE FREED?  @C1\n         ##B O,&TAG                     YES, CLEAR ANCHOR AND FREE  @C4\n         L     R13,4(,R13)              BACKLINK                    @C1\n         ##B U,&TAG2                    SKIP FREEMAIN CODE          @C4\n&TAG     XC    0(4,R14),0(R14)          SET ANCHOR TO ZERO          @C1\n&TAG     SETC  ''                                                   @C1\n.PRC0047 AIF  (NOT &#PBMFRE).PRC0050    MANUALPWA OPTION            @C3\n&TAG2    SETC  '#BF&#PBNDX'                                         @C3\n&TAG     TM    &PWA.__F,&PWA.__F_FREEPWA                            @C3\n&TAG     SETC  '#BL&#PBNDX'                                         @C3\n         ##B O,&TAG                     YES, TIME TO FREE           @C4\n         L     R13,4(,R13)              BACKLINK                    @C3\n         ##B U,&TAG2                    SKIP FREEMAIN CODE          @C4\n.PRC0050 ANOP                                                       @C3\n.*--------------------------------------------------------------------*\n.*  AS NEEDED, SAVE R0, R1, AND R15 IN OTHER REGISTERS.\n.*--------------------------------------------------------------------*\n&TAG     LR    R5,R15                   SAVE RETURN CODE IN R5      @C1\n&TAG     SETC  ''\n         AIF   (NOT &#PBRTN0).PRC0055\n         LR    R3,R0                    SAVE R0 IN R3\n.PRC0055 AIF   (NOT &#PBRTN1).PRC0056\n         LR    R4,R1                    SAVE R1 IN R4\n.PRC0056 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO FREEMAIN PWA IF PWA WAS OBTAINED BY GETMAIN.\n.*--------------------------------------------------------------------*\n         LR    R1,R13                   POINT R1 TO PWA\n         ICM   R0,B'1111',#BW&#PBNDX    LOAD R0 WITH LENGTH OF PWA\n         L     R13,4(,R13)              BACKLINK\n         AIF   (NOT &#PBDYN OR &#PBMAIN).PRC0070\n&TAG2    SETC  '#BF&#PBNDX'\n         TM    8(R13),X'80'             WAS DYNAMIC STORAGE USED?\n         ##B O,&TAG2                    YES, SKIP FREEMAIN          @C4\n.PRC0070 AIF   (&#PBESV).PRC0072                                    @C1\n         FREEMAIN R,LV=(0),A=(1)        FREEMAIN PWA\n         AGO   .PRC0074                                             @C1\n.PRC0072 ANOP                                                       @C1\n         L     R15,#PBL&#PB#C-&PWA.(,R1) POINT R15 TO ESV           @C2\n         L     R2,20(,R15)              LOAD USER PARM FOR FREEMAIN @C1\n         L     R15,16(,R15)             LOAD ADDRESS OF FREEMAIN    @C1\n         BALR  R14,R15                  DO FREEMAIN                 @C1\n.PRC0074 ANOP                                                       @C1\n.*--------------------------------------------------------------------*\n.*  AS NEEDED, RESTORE R0, R1, AND R15 FROM OTHER REGISTERS.\n.*--------------------------------------------------------------------*\n         LR    R15,R5                   RESTORE RETURN CODE         @C1\n         AIF   (NOT &#PBRTN0).PRC0075\n         LR    R0,R3                    RESTORE R0\n.PRC0075 AIF   (NOT &#PBRTN1).PRC0076\n         LR    R1,R4                    RESTORE R1\n.PRC0076 ANOP\n.*--------------------------------------------------------------------*\n.*  GO RESTORE REGISTERS.\n.*--------------------------------------------------------------------*\n         AIF   ('&TAG2' EQ '').RST0000\n&TAG2    DS    0H\n         AGO   .RST0000                 GO RESTORE REGISTERS\n.*--------------------------------------------------------------------*\n.PRC0100 AIF   (NOT &#PBGTMN).PRC0200\n.*====================================================================*\n.*  WORKING WITH A REENTRENT SAVE AREA THAT IS NOT A PWA.\n.*====================================================================*\n.*--------------------------------------------------------------------*\n.*  AS NEEDED, SAVE R0, R1, AND R15 IN OTHER REGISTERS.\n.*--------------------------------------------------------------------*\n&TAG     LR    R5,R15                   SAVE RETURN CODE IN R5      @C1\n         AIF   (NOT &#PBRTN0).PRC0155\n         LR    R3,R0                    SAVE R0 IN R3\n.PRC0155 AIF   (NOT &#PBRTN1).PRC0156\n         LR    R4,R1                    SAVE R1 IN R4\n.PRC0156 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO FREEMAIN SAVE AREA.\n.*--------------------------------------------------------------------*\n         LR    R1,R13                   POINT R1 TO SAVE AREA\n         LA    R0,18*4                  LOAD LENGTH OF SAVE AREA\n         L     R13,4(,R13)              BACKLINK\n         LR    R5,R15                   SAVE RETURN CODE IN R5      @C1\n         FREEMAIN R,LV=(0),A=(1)        FREEMAIN SAVE AREA\n.*--------------------------------------------------------------------*\n.*  AS NEEDED, RESTORE R0, R1, AND R15 FROM OTHER REGISTERS.\n.*--------------------------------------------------------------------*\n         LR    R15,R5                   RESTORE RETURN CODE         @C1\n         AIF   (NOT &#PBRTN0).PRC0175\n         LR    R0,R3                    RESTORE R0\n.PRC0175 AIF   (NOT &#PBRTN1).PRC0176\n         LR    R1,R4                    RESTORE R1\n.PRC0176 ANOP\n.*--------------------------------------------------------------------*\n         AGO   .RST0000                 GO RESTORE REGISTERS\n.*--------------------------------------------------------------------*\n.PRC0200 AIF   (NOT &#PBNRSV).PRC0300\n.*====================================================================*\n.*  WORKING WITH NONREENTRENT SAVE AREA.\n.*====================================================================*\n&TAG     L     R13,4(,R13)              BACKLINK\n         AGO   .RST0000                 GO RESTORE REGISTERS\n.PRC0300 ANOP\n.*====================================================================*\n.*  WORKING WITH NO SAVE AREA.\n.*====================================================================*\n&TAG     DS    0H\n         AGO   .RST0000\n.*====================================================================*\n.RST0000 ANOP\n.*--------------------------------------------------------------------*\n.* IF REGISTERS ARE SAVED, RESTORE REGISTERS.\n.*--------------------------------------------------------------------*\n         AIF   (NOT &#PBSAVE).RST9000\n         L     R14,12(,R13)             RESTORE R14\n         AIF   (&#PBRTN1).RST0100\n         AIF   (&#PBRTN0).RST0200\n         LM    R0,R12,20(R13)           RESTORE R0-R12\n         AGO   .RST9000\n.RST0100 AIF   (&#PBRTN0).RST0150\n         L     R0,20(,R13)              RESTORE R0\n         LM    R2,R12,28(R13)           RESTORE R2-R12\n         AGO   .RST9000\n.RST0150 LM    R2,R12,28(R13)           RESTORE R2-R12\n         AGO   .RST9000\n.RST0200 LM    R1,R12,24(R13)           RESTORE R1-R12\n.RST9000 ANOP\n.DBR0000 ANOP\n.*--------------------------------------------------------------------*\n.* DO BR14 IF REQUESTED.\n.*--------------------------------------------------------------------*\n         AIF   (NOT &#PBBR14).DBR0010\n         BR    R14                      RETURN TO CALLER\n.DBR0010 ANOP\n.*--------------------------------------------------------------------*\n.*  DECREMENT BLOCK LEVEL.\n.*--------------------------------------------------------------------*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PEPLI": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00:\\x00:\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 58, "newlines": 58, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PEPLI &RC,                 RETURN CODE KEYWORD              $\n               &R0,                   VALUE TO RETURN IN R0            $\n               &R1                    VALUE TO RETURN IN R1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PEPLI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PEPLI\n.*\n.*  PURPOSE    EPILOG MACRO FOR ASSEMBLER PROGRAMS THAT RUN IN THE\n.*             PL/I ENVIRONMENT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/07/87 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         LCLC  &TAG                     WORK TAG\n.*--------------------------------------------------------------------*\n.*  ISSUE MESSAGE FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &R0,R0\n         ##IGMSG &R1,R1\n         ##IGMSG &RC,RC\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO RETURN TO CALLER.\n.*--------------------------------------------------------------------*\n         SPACE\n&TAG     SETC  '#BQ&#PBNDX'\n&TAG     L     R13,4(,R13)              RELEASE CURRENT DSA\n         LM    R14,R12,12(R13)          RESTORE CALLER'S REGISTERS\n         BR    R14                      RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PESC": {"ttr": 5132, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00@\\x00@\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 64, "newlines": 64, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PESC &RC,                  RETURN CODE KEYWORD              $\n               &R0,                   VALUE TO RETURN IN R0            $\n               &R1                    VALUE TO RETURN IN R1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PESC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PESC\n.*\n.*  PURPOSE    EPILOG MACRO FOR ASSEMBLER PROGRAMS THAT RUN IN THE\n.*             SAS/C ENVIRONMENT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/98 MGG - NEW\n.*             10/29/98 JCB - ADDED SUPPORT FOR OPTIONS=(..,INDEP)\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLB  &#PBINDEP                INDEP= FROM OPTIONS=\n         LCLC  &TAG                     WORK TAG\n         LCLC  &INDEP                   INDEP= YES OR NO\n.*--------------------------------------------------------------------*\n.*  ISSUE MESSAGE FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &R0,R0\n         ##IGMSG &R1,R1\n.INT0000 ANOP\n&INDEP   SETC  'NO'\n         AIF   (NOT &#PBINDEP).INT0010\n&INDEP   SETC  'YES'\n.INT0010 ANOP\n.INT9999 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO RETURN TO CALLER.\n.*--------------------------------------------------------------------*\n         SPACE\n&TAG     SETC  '#BQ&#PBNDX'\n&TAG     CEXIT RC=&RC,DSA=YES,INDEP=&INDEP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PLIST": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01\\r\\x01\\r\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 269, "newlines": 269, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PLIST &PL=,&DS=              PARAMETER LIST\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1989.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PLIST\n.*\n.*  TITLE      Clemson University Computer Center Structured\n.*             Programming Macros - ##PLIST\n.*\n.*  PURPOSE    Internal macro used to build parameter lists.\n.*\n.*  SYNTAX     ##PLIST START{,PL=TAG}{,DS=PWA|SWA|WA}\n.*             ##PLIST PARM,ADDR*\n.*             ##PLIST PLIST,(ADDR+)\n.*             ##PLIST END,VL|NOVL\n.*\n.*  NOTE       See the following document for more information on\n.*             this and other structured programming macros:\n.*\n.*             . Clemson University Computer Center Structured\n.*               Programming Macros User's Guide and Reference.\n.*\n.*  ACTIVITY    9/26/89 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &##PLIST__NUMBER_OF_PARAMETERS\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BMLVL(20)              BLOCK STRUCTURAL LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#PB#C                   CURRENT PROGRAM BLOCK NUMBER\n         GBLA  &#PBPLMX                 MAXIMUM PL FOR PROGRAM\n         GBLA  &#SB#C                   CURRENT SUBROUTINE BLOCK NUMBER\n         GBLA  &#SBPLMX                 MAXIMUM PL FOR SUBROUTINE\n         GBLB  &##PLIST__STARTED\n         GBLB  &##PLIST__STD_PLIST\n         GBLC  &##PLIST__PL1            PL PARAMETER 1\n         GBLC  &##PLIST__PL2            PL PARAMETER 2\n         GBLC  &##PLIST__DS             DS PARAMETER\n         GBLB  &#PBDYN                  DYN OPTION FOR PROGRAM BLOCK\n         GBLB  &#PBPWA                  PWA OPTION FOR PROGRAM BLOCK\n         GBLB  &#PBVL                   VL OPTION\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#SBSWA                  SWA OPTION FOR SUBROUTINE BLOCK\n         GBLB  &#XAWARN                 XA WARNING MESSAGE ISSUED\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLC  &#BNAME(20)              BLOCK NAMES\n         GBLC  &#BPL1(20)               BLOCK PL PARAMETER 1\n         GBLC  &#BPL2(20)               BLOCK PL PARAMETER 2\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         GBLC  &#PBAMOD                 AMODE OF PROGRAM\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         LCLA  &CNT,&DISP               WORK VARIABLES\n.* Require at least type parameter.\n         AIF   (N'&SYSLIST GE 1).CHECK_10\n         MNOTE 8,'Missing TYPE parameter.'\n         MEXIT\n.CHECK_10 ANOP\n.*\n.* Process based on type.\n.*\n         AIF   ('&SYSLIST(1)' EQ 'START').START\n         AIF   ('&SYSLIST(1)' EQ 'PARM').PARM\n         AIF   ('&SYSLIST(1)' EQ 'PLIST').PLIST\n         AIF   ('&SYSLIST(1)' EQ 'END').END\n         MNOTE 8,'Invalid TYPE parameter - &SYSLIST(1)'\n         MEXIT\n.*\n.* Process type START.\n.*\n.START   ANOP\n&##PLIST__NUMBER_OF_PARAMETERS SETA 0\n&##PLIST__STD_PLIST            SETB 0\n         AIF   (N'&SYSLIST EQ 1).START_10\n         MNOTE 8,'Too many parameters for type START.'\n.START_10 AIF  (NOT &##PLIST__STARTED).START_20\n         MNOTE 8,'A parameter list build is already active.'\n         MEXIT\n.START_20 AIF  (N'&PL LE 2).START_30\n         MNOTE 8,'Too many parameters on PL keyword.'\n         MEXIT\n.START_30 ANOP\n&##PLIST__STARTED SETB 1\n&##PLIST__PL1 SETC '&PL(1)'\n&##PLIST__PL2 SETC '&PL(2)'\n&##PLIST__DS  SETC '&DS'\n.*   Process DS keyword.\n         AIF   ('&##PLIST__DS' EQ '').DS_OK\n.HAVE_DS AIF   ('&##PLIST__PL1' NE '').CHK_DS\n         MNOTE 8,'First operand of PL keyword is required if DS keyword$\n                is specified.'\n         MEXIT\n.CHK_DS  AIF   ('&##PLIST__DS' EQ 'PWA').DS_OK\n         AIF   ('&##PLIST__DS' EQ 'SWA').DS_OK\n         AIF   ('&##PLIST__DS' EQ 'WA').DS_OK\n         MNOTE 8,'&##PLIST__DS is not valid on the DS keyword.'\n         MEXIT\n.DS_OK   ANOP\n.*   Process PL keyword.\n         AIF   ('&PL' NE '').PL_LA\n&CNT     SETA  &#BLVL+1\n.PL_LOOP AIF   (&CNT LE 1).PL_STD\n&CNT     SETA  &CNT-1\n         AIF   ('&#BPL1(&CNT)' EQ '').PL_LOOP\n&##PLIST__PL1 SETC '&#BPL1(&CNT)'\n&##PLIST__PL2 SETC '&#BPL2(&CNT)'\n         AGO   .PL_LA\n.PL_STD  ANOP\n&##PLIST__STD_PLIST            SETB 1\n         AIF   (NOT &#PBPWA).PL_ERR\n         AIF   ('&#BTYPE(1)' EQ 'SUBROUTINE').PL_SUB\n         AIF   ('&#BTYPE(1)' EQ 'ERREXIT').PL_PROG\n         AIF   ('&#BTYPE(1)' EQ 'PROGRAM').PL_PROG\n.PL_ERR  MNOTE 8,'The PL keyword must be specified on this macro or on $\n               an enclosing BLOCK macro.'\n         MEXIT\n.PL_PROG ANOP\n&##PLIST__PL1 SETC '#PBP&#PB#C'\n         AGO   .PL_LA\n.PL_SUB  ANOP\n&##PLIST__PL1 SETC '#SBP&#SB#C'\n.PL_LA   LA    R1,&##PLIST__PL1         POINT R1 TO PARAMETER LIST\n         MEXIT\n.*\n.* Process type PARM.\n.*\n.PARM    AIF   (&##PLIST__STARTED).PARM_10\n         MNOTE 8,'A ##PLIST start must be specified first.'\n         MEXIT\n.PARM_10 ANOP\n&CTR     SETA  2\n&DISP    SETA  &##PLIST__NUMBER_OF_PARAMETERS*4\n.PRC2100 AIF   (&CTR GT N'&SYSLIST).PRC2900\n&##PLIST__NUMBER_OF_PARAMETERS SETA &##PLIST__NUMBER_OF_PARAMETERS+1\n         AIF   ('&SYSLIST(&CTR)' EQ '*').PRC2200\n         AIF   ('&SYSLIST(&CTR)' EQ '').PRC2150\n         AIF   ('&SYSLIST(&CTR)'(1,1) NE '(').PRC2150\n         ST    &SYSLIST(&CTR),&DISP.(,R1)\n         AGO   .PRC2200\n.PRC2150 ##LA  R14,&SYSLIST(&CTR)     LOAD ADDRESS OF PARAMETER.\n         ST    R14,&DISP.(,R1)        STORE ADDRESS IN PARAMETER LIST.\n.PRC2200 ANOP\n&DISP    SETA  &DISP+4\n&CTR     SETA  &CTR+1\n         AGO   .PRC2100\n.PRC2900 ANOP\n         MEXIT\n.*\n.* Process type PLIST.\n.*\n.PLIST   AIF   (&##PLIST__STARTED).PLIST_10\n         MNOTE 8,'A ##PLIST start must be specified first.'\n         MEXIT\n.PLIST_10 AIF  (N'&SYSLIST LE 2).PLIST_20\n         MNOTE 8,'Too many parameters for type PLIST.'\n.PLIST_20 ANOP\n&CTR     SETA  1\n&DISP    SETA  &##PLIST__NUMBER_OF_PARAMETERS*4\n.PRC3100 AIF   (&CTR GT N'&SYSLIST(2)).PRC3900\n&##PLIST__NUMBER_OF_PARAMETERS SETA &##PLIST__NUMBER_OF_PARAMETERS+1\n         AIF   ('&SYSLIST(2,&CTR)' EQ '*').PRC3200\n         AIF   ('&SYSLIST(2,&CTR)' EQ '').PRC3150\n         AIF   ('&SYSLIST(2,&CTR)'(1,1) NE '(').PRC3150\n         ST    &SYSLIST(2,&CTR),&DISP.(,R1)\n         AGO   .PRC3200\n.PRC3150 ##LA  R14,&SYSLIST(2,&CTR)   LOAD ADDRESS OF PARAMETER.\n         ST    R14,&DISP.(,R1)        STORE ADDRESS IN PARAMETER LIST.\n.PRC3200 ANOP\n&DISP    SETA  &DISP+4\n&CTR     SETA  &CTR+1\n         AGO   .PRC3100\n.PRC3900 ANOP\n         MEXIT\n.*\n.* Process type END.\n.*\n.END     AIF   (&##PLIST__STARTED).END_SOK\n         MNOTE 8,'A ##PLIST start must be specified first.'\n         MEXIT\n.END_SOK ANOP\n&##PLIST__STARTED SETB 0\n         AIF   (N'&SYSLIST EQ 1).DEFAULT_VL\n         AIF   (N'&SYSLIST EQ 2).END_NOK\n         MNOTE 8,'Too many parameters for type END.'\n.END_NOK AIF   ('&SYSLIST(2)' EQ 'VL').SET_VL\n         AIF   ('&SYSLIST(2)' EQ 'NOVL').PAST_VL\n         AIF   ('&SYSLIST(2)' EQ '').DEFAULT_VL\n         MNOTE 8,'Invalid VL parameter - &SYSLIST(2)..'\n.DEFAULT_VL AIF (NOT &#PBVL).PAST_VL\n.SET_VL  AIF   (&##PLIST__NUMBER_OF_PARAMETERS EQ 0).PAST_VL\n&DISP    SETA  &##PLIST__NUMBER_OF_PARAMETERS*4-4\n         OI    &DISP.(R1),X'80'       SET ON HIGH BIT.\n.PAST_VL ANOP\n         AIF   (&##PLIST__STD_PLIST).DS_STD\n         AIF   ('&##PLIST__DS' EQ 'WA').DS_WA\n         AIF   ('&##PLIST__DS' EQ 'PWA').DS_PWA\n         AIF   ('&##PLIST__DS' EQ 'SWA').DS_SWA\n         AIF   ('&##PLIST__DS' EQ '').DS_SPECIFIED\n         MNOTE 8,'Invalid DS value &DS.'\n         MEXIT\n.DS_STD  ANOP\n         AIF   ('&#BTYPE(1)' EQ 'SUBROUTINE').UPD_SWA_MX\n         AIF   (&#PBPLMX GE &##PLIST__NUMBER_OF_PARAMETERS).PAST_DS\n&#PBPLMX SETA   &##PLIST__NUMBER_OF_PARAMETERS\n         AGO   .PAST_DS\n.UPD_SWA_MX ANOP\n         AIF   (&#SBPLMX GE &##PLIST__NUMBER_OF_PARAMETERS).PAST_DS\n&#SBPLMX SETA  &##PLIST__NUMBER_OF_PARAMETERS\n         AGO   .PAST_DS\n.DS_WA   AIF   ('&#BTYPE(1)' EQ 'SUBROUTINE').DS_SWA\n.DS_PWA  AIF   ('&##PLIST__PL2' NE '').DS_PWA_20\n         PWA   TYPE=PARTIAL\n&##PLIST__PL1 DS (&##PLIST__NUMBER_OF_PARAMETERS.)F\n         ENDPWA\n         AGO   .PAST_DS\n.DS_PWA_20 AIF (&##PLIST__NUMBER_OF_PARAMETERS LE &##PLIST__PL2).DS_PWA+\n               _30\n         MNOTE 8,'There are more parameters than the number specified w+\n               ith the PL keyword.'\n.DS_PWA_30 ANOP\n         PWA   TYPE=PARTIAL\n&##PLIST__PL1 DS (&##PLIST__PL2.)F\n         ENDPWA\n         AGO   .PAST_DS\n.DS_SWA  AIF   ('&##PLIST__PL2' NE '').DS_SWA_20\n         SWA   TYPE=PARTIAL\n&##PLIST__PL1 DS (&##PLIST__NUMBER_OF_PARAMETERS.)F\n         ENDSWA\n         AGO   .PAST_DS\n.DS_SWA_20 AIF (&##PLIST__NUMBER_OF_PARAMETERS LE &##PLIST__PL2).DS_SWA+\n               _30\n         MNOTE 8,'There are more parameters than the number specified w+\n               ith the PL keyword.'\n.DS_SWA_30 ANOP\n         SWA   TYPE=PARTIAL\n&##PLIST__PL1 DS (&##PLIST__PL2.)F\n         ENDSWA\n         AGO   .PAST_DS\n.DS_SPECIFIED ANOP\n         AIF   ('&##PLIST__PL2' NE '').PL2_SPEC\n    AIF   (L'&##PLIST__PL1 GE &##PLIST__NUMBER_OF_PARAMETERS*4).PAST_DS\n         MNOTE 8,'&##PLIST__PL1 is not large enough for the number of p+\n               arameters specified.'\n         AGO   .PAST_DS\n.PL2_SPEC AIF  (&##PLIST__PL2 GE &##PLIST__NUMBER_OF_PARAMETERS).PAST_D+\n               S\n         MNOTE 8,'There are more parameters than the number specified w+\n               ith the PL keyword.'\n.PAST_DS ANOP\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PPDC": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x02\\xcb\\x02\\xcb\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 715, "newlines": 715, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PPDC &NAME,                  NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &SUBOPTS,                DEFAULT SUBROUTINE OPTIONS     $\n               &BASEREG,                BASE REGS                      $\n               &PWAREG,                 PWA REGS                       $\n               &SVAREA,                 SAVE AREA TAG NAME             $\n               &CPYRGHT,                COPYRIGHT NOTICE               $\n               &AMODE,                  ADDRESSING MODE                $\n               &RMODE,                  RESIDENCE MODE                 $\n               &R1SAVE,                 PARM SAVE REGISTER             $\n               &SMWA,                   STRUCTURED MACRO WORK AREA     $\n               &DYNSIZE,                SIZE OF DYNAMIC STORAGE        $\n               &DYNERR,                 DYNAMIC STORAGE ERROR EXIT     $\n               &SWAREG,                 SWA BASE REGS                  $\n               &PWASP                   PROGRAM WORK AREA SUB POOL\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PPDC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PPDC\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS THE DEFAULT FOR PROGRAM BLOCK\n.*             PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/30/86 JCB - NEW, MODELED AFTER ##PPMAC\n.*             08/04/87 JCB - ADDED MISSING AIF FOR SMWA= CHECK    @C1\n.*             09/14/87 JCB - RELEASED R13 IF USER MODE PROGRAM    @C2\n.*             07/25/88 JCB - ADD (MPMODE,XXXXXX) OPTION FOR 10.2  @C3\n.*             05/08/89 MGG - REMOVED &SDID AND &WAID TAGS AND     @C4\n.*                            CHANGED &#PBWAID TAG TO &PWA.  ADDED @C4\n.*                            PSD TAG.                             @C4\n.*             07/25/97 JCB - added default support for ##sect     @C5\n.*                            macro:  &#pbsect is always \"CSECT\"   @C5\n.*\n.*--------------------------------------------------------------------*\n.*  PROGRAM BLOCK OPTIONS SUPPORTED BY ##PPDC:\n.*      CSECT    - CAUSES CSECT TO BE GENERATED BY #MOPT\n.*      ID       - CAUSES ID TO BE GENERATED IN PROLOG\n.*      LOCTR    - STANDARD LOCTR OPTION\n.*      LONG     - STANDARD LONG OPTION\n.*      MODE     - STANDARD MODE OPTION\n.*      PWA      - ENABLES PWA GENERATION: WITH RENT, CAUSES #GETSTG\n.*      REGEQU   - CAUSES #REGEQU TO BE GENERATED BY #MOPT\n.*      RENT     - CAUSES REENTRANT LINKAGE (USED ONLY WITH PWA)\n.*      VL       - MAKES PLIST MACRO USE VL OPTION\n.*      XA       - USES XA INSTRUCTIONS FOR LINKAGE IF ASM'D ON XA\n.*      370      - USES 370 INSTRUCTIONS FOR LINKAGE IF ASM'D ON 370\n.* <DC> DCMACPRT - #MOPT MACPRNT=YES OR =NO\n.* <DC> DCPRGPRT - #MOPT PRGPRNT=YES OR =NO\n.* <DC> SYSTEM OR (SYSTEM,<MODULE#>) - #MOPT ENV=SYS AND OPT'L MODULE#\n.* <DC> #START   - GENERATE #START. ONLY VALID WITH SYSTEM\n.* <DC> #RTN     - GENERATE #RTN. ONLY VALID WITH SYSTEM\n.* <DC> #RETURN  - GENERATE #RETURN. ONLY VALID WITH NOSYSTEM\n.* <DC> GETSTK   - GENERATE #GETSTK INSTEAD OF #GETSTG. VALID ONLY\n.*                 WITH SYSTEM AND PWA OPTIONS\n.* <DC> (NXTTASK,<TASKCODE>) - #RETURN NXTTASK=. ONLY VALID W/NOSYSTEM\n.* <DC> (TYPE,<RTNTYPE>)     - #RETURN TYPE=.    ONLY VALID W/NOSYSTEM\n.* <DC> (RESINT,<INTERVAL>)  - #RETURN RESINT=.  ONLY VALID W/NOSYSTEM\n.* <DC> (RESPGM,<PGMNAME>)   - #RETURN RESPGM=.  ONLY VALID W/NOSYSTEM\n.* <DC> (EP,<ENTRYPOINT>)    - #START EP=.       ONLY VALID W/SYSTEM\n.* <DC> (MPMODE,<MPMODE>)    - #START MPMODE=    ONLY VALID W/SYSTEM.\n.*                                               NOTE THAT MPMODE WILL\n.*                                               NOT ASSEMBLE USING\n.*                                               IDMS RELEASE 10.0.\n.*\n.*  SUPER OPTIONS SUPPORTED BY ##PBDC:\n.*      *PWA     - CSECT,ID,LOCTR,MODE,PWA,REGEQU,RENT,VL,\n.*                 #RETURN\n.*      *PWASYS  - CSECT,ID,LOCTR,MODE,PWA,REGEQU,RENT,VL,\n.*                 #START,#RTN,SYSTEM\n.*      *RENT    - CSECT,ID,LOCTR,MODE,REGEQU,RENT,VL,#RETURN\n.*      *RENTSYS - CSECT,ID,LOCTR,MODE,REGEQU,RENT,VL,#START,#RTN,\n.*                 SYSTEM\n.*      *NORENT  - CSECT,ID,LOCTR,MODE,REGEQU,VL,#RETURN\n.*      *NORENTSYS - CSECT,ID,LOCTR,MODE,REGEQU,VL,#START,#RTN,\n.*                 SYSTEM\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   CURRENT STRUCTURAL LEVEL\n         GBLA  &#MCVREG                 CONVERTED REG (SEE ##CVREG)\n         GBLB  &##ASMH                  ##ASMH MACRO RETURN FLAG\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLA  &#BMLVL(20)              BLOCK STRUCTURAL LEVEL\n         GBLC  &#BNAME(20)              BLOCK NAMES\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLC  &#BSV1(20)               BLOCK SAVE PARM 1\n         GBLC  &#BSV2(20)               BLOCK SAVE PARM 2\n         GBLC  &#BSV3(20)               BLOCK SAVE PARM 3\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLC  &#PBNAME                 PROGRAM BLOCK NAME\n         GBLB  &#PBVL                   DEFAULT VL OPTION\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLC  &#PBRMOD                 RMODE OF PROGRAM\n         GBLC  &#PBAMOD                 AMODE OF PROGRAM\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         GBLB  &#XAWARN                 XA WARNING MESSAGE ISSUED\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLB  &#PBLONG                 LONG PROGRAM OPTION\n         GBLA  &#PBWAMX                 MAX SMWA IN PROGRAM\n         GBLB  &#PBLOCR                 DO LOCATR IN PROGRAM\n         GBLB  &#PBPWA                  PWA OPTION\n         GBLB  &#PBDSWA       ENDPWA SHOULD DEFINE STORAGE FOR PWA\n         GBLB  &#PBRTN0                 ENABLE RETURN_R0\n         GBLB  &#PBRTN1                 ENABLE RETURN_R1\n.*       GBLC  &#PBPWAT                 PWA TAG\n.*       GBLC  &#PBPWAL                 PWA LENGTH TAG\n         GBLC  &PWA                     GENERATED TAG OF PWA       @C4\n         GBLC  &PSD                     GENERATED TAG OF PSD       @C4\n         GBLB  &#DC#RTN             DC: #RTN SHOULD BE GEN'D\n         GBLB  &#DC#RET             DC: #RETURN SHOULD BE GEN'D\n         GBLB  &#DCSYS              DC: SYSTEM MODE REQUESTED\n         GBLC  &#DCNTSK             DC: NXTTASK= FOR #RETURN\n         GBLC  &#DCRTYP             DC: TYPE= FOR #RETURN\n         GBLC  &#DCRINT             DC: RESINT= FOR #RETURN\n         GBLC  &#DCRPGM             DC: RESPGM= FOR #RETURN\n         GBLB  &#DCRENT             DC: RENT OPTION\n         GBLC  &#DCPWAR             DC: 1ST PWA REGISTER (FOR #FREESTG)\n         GBLB  &#DCGSTK             DC: #GETSTK USED TO GET PWA\n         GBLC  &#PBSECT                 xSECT ID for ##SECT to use  @C5\n         LCLB  &REGS(16)                REGISTERS USED\n         LCLB  &OID                     ID OPTION\n         LCLB  &OCSECT                  CSECT OPTION\n         LCLB  &OREGEQU                 REGEQU OPTION\n         LCLB  &OMODE                   MODE OPTION\n         LCLB  &ODCMACP                 #MOPT W/MACPRNT=YES\n         LCLB  &ODCPRGP                 #MOPT W/PRGPRNT=YES\n         LCLB  &#DC#STR             DC: #START SHOULD BE GENERATED\n         LCLA  &CTR                     WORK COUNTER\n         LCLA  &ZCTR\n         LCLC  &OPT,&TAG,&TAG1,&TAG2,&TAG3 WORK FIELDS\n         LCLC  &TAG4                    WORK TAG\n         LCLC  &ZENVIR\n         LCLC  &ZREGEQU\n         LCLC  &ZDCMACP\n         LCLC  &ZDCPRGP\n         LCLC  &ZMODNO\n         LCLC  &ZGINIT\n         LCLC  &ZGLOC\n         LCLA  &NDX                     #MNDX FOR BLOCK\n         LCLC  &EP\n         LCLC  &MPMODE                  MPMODE FROM OPTIONS         @C3\n.*====================================================================*\n&NDX     SETA  &#MNDX                   SET INDEX FOR BLOCK\n         ##MREG RESET                   RESET REGISTERS\n&#PBPWA  SETB  0                        CLEAR FLAGS\n&#PBXA   SETB  0\n&#PBDSWA SETB  0\n&#PB370  SETB  0\n&#PBVL   SETB  0\n&#PBLONG SETB  0\n&#PBLOCR SETB  0\n&#PBRMOD SETC  '&RMODE'\n&#PBAMOD SETC  '&AMODE'\n&#PBSMWA SETC  '&SMWA'\n&#BAMODE(1) SETC  '&AMODE'\n&#DC#STR SETB  0\n&#DC#RTN SETB  0\n&#DC#RET SETB  0\n&#DCSYS  SETB  0\n&#DCGSTK SETB  0\n&#DCNTSK SETC  ''\n&#DCRTYP SETC  ''\n&#DCRINT SETC  ''\n&#DCRPGM SETC  ''\n&EP      SETC  ''\n&MPMODE  SETC  ''                                                   @C3\n&ODCMACP SETB  0\n&ODCPRGP SETB  0\n.*--------------------------------------------------------------------*\n.*  CHECK FOR IGNORED KEYWORDS\n.*--------------------------------------------------------------------*\n         ##IGMSG &DYNSIZE,DYNSIZE\n         ##IGMSG &DYNERR,DYNERR\n         ##IGMSG &SVAREA,SVAREA\n         ##IGMSG &PWASP,PWASP\n.*--------------------------------------------------------------------*\n.*  SET OPTIONS FOR TYPE=PROGRAM\n.*--------------------------------------------------------------------*\n#&PBSECT SETC  'CSECT'                  Default for ##SECT          @C5\n&CTR     SETA  1                        SET OPTIONS\n.SPO0010 AIF   (N'&OPTIONS LT &CTR).SPO9999\n&OPT     SETC  '&OPTIONS(&CTR)'\n.SPO0020 AIF   ('&OPT' NE 'PWA').SPO0030           PWA\n&#PBPWA  SETB  1\n         AGO   .SPO9000\n.SPO0030 AIF   ('&OPT' NE 'NOPWA').SPO0100         NOPWA\n&#PBPWA  SETB  0\n         AGO   .SPO9000\n.SPO0100 AIF   ('&OPT' NE 'RENT').SPO0110          RENT\n&#DCRENT SETB  1\n         AGO   .SPO9000\n.SPO0110 AIF   ('&OPT' NE 'NORENT').SPO0120        NORENT\n&#DCRENT SETB  0\n         AGO   .SPO9000\n.SPO0120 AIF   ('&OPT' NE 'ID').SPO0130            ID\n&OID     SETB  1\n         AGO   .SPO9000\n.SPO0130 AIF   ('&OPT' NE 'NOID').SPO0140          NOID\n&OID     SETB  0\n         AGO   .SPO9000\n.SPO0140 AIF   ('&OPT' NE 'REGEQU').SPO0150        REGEQU\n&OREGEQU SETB  1\n         AGO   .SPO9000\n.SPO0150 AIF   ('&OPT' NE 'NOREGEQU').SPO0160      NOREGEQU\n&OREGEQU SETB  0\n         AGO   .SPO9000\n.SPO0160 AIF   ('&OPT' NE 'CSECT').SPO0170         CSECT\n&OCSECT  SETB  1\n         AGO   .SPO9000\n.SPO0170 AIF   ('&OPT' NE 'NOCSECT').SPO0200       NOCSECT\n&OCSECT  SETB  0\n         AGO   .SPO9000\n.SPO0200 AIF   ('&OPT' NE '*RENT').SPO0205         SUPER *RENT\n&#PBPWA  SETB  0         NOPWA OPTION\n&#DC#RET SETB  1         #RETURN OPTION\n&#DCRENT SETB  1         RENT OPTION\n&OID     SETB  1         ID OPTION\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n         AGO   .SPO9000\n.SPO0205 AIF   ('&OPT' NE '*RENTSYS').SPO0210      SUPER *RENTSYS\n&#PBPWA  SETB  0         NOPWA OPTION\n&#DC#STR SETB  1         #START OPTION\n&#DC#RTN SETB  1         #RTN OPTION\n&#DCRENT SETB  1         RENT OPTION\n&OID     SETB  1         ID OPTION\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n&#DCSYS  SETB  1         SYSTEM OPTION\n         AGO   .SPO9000\n.SPO0210 AIF   ('&OPT' NE '*PWA').SPO0215          SUPER *PWA\n&#PBPWA  SETB  1         PWA OPTION\n&#DC#RET SETB  1         #RETURN OPTION\n&#DCRENT SETB  1         RENT OPTION\n&OID     SETB  1         ID OPTION\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n         AGO   .SPO9000\n.SPO0215 AIF   ('&OPT' NE '*PWASYS').SPO0220       SUPER *PWASYS\n&#PBPWA  SETB  1         PWA OPTION\n&#DC#STR SETB  1         #START OPTION\n&#DC#RTN SETB  1         #RTN OPTION\n&#DCRENT SETB  1         RENT OPTION\n&OID     SETB  1         ID OPTION\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n&#DCSYS  SETB  1         SYSTEM OPTION\n         AGO   .SPO9000\n.SPO0220 AIF   ('&OPT' NE '*NORENT').SPO0225       SUPER *NORENT\n&#PBPWA  SETB  0         NOPWA OPTION\n&#DC#RET SETB  1         #RETURN OPTION\n&#DCRENT SETB  0         NORENT OPTION\n&OID     SETB  1         ID OPTION\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n         AGO   .SPO9000\n.SPO0225 AIF   ('&OPT' NE '*NORENTSYS').SPO0230    SUPER *NORENTSYS\n&#PBPWA  SETB  0         NOPWA OPTION\n&#DC#STR SETB  1         #START OPTION\n&#DC#RTN SETB  1         #RTN OPTION\n&#DCRENT SETB  0         NORENT OPTION\n&OID     SETB  1         ID OPTION\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n&#DCSYS  SETB  1         SYSTEM OPTION\n         AGO   .SPO9000\n.SPO0230 AIF   ('&OPT' NE 'MODE').SPO0240          MODE\n&OMODE   SETB  1\n         AGO   .SPO9000\n.SPO0240 AIF   ('&OPT' NE 'NOMODE').SPO0250        NOMODE\n&OMODE   SETB  0\n         AGO   .SPO9000\n.SPO0250 AIF   ('&OPT' NE 'XA').SPO0260            XA\n&#PBXA   SETB  1\n         AGO   .SPO9000\n.SPO0260 AIF   ('&OPT' NE 'NOXA').SPO0270          NOXA\n&#PBXA   SETB  0\n         AGO   .SPO9000\n.SPO0270 AIF   ('&OPT' NE '370').SPO0280           370\n&#PB370  SETB  1\n         AGO   .SPO9000\n.SPO0280 AIF   ('&OPT' NE 'NO370').SPO0290         NO370\n&#PB370  SETB  0\n         AGO   .SPO9000\n.SPO0290 AIF   ('&OPT' NE 'VL').SPO0300            VL\n&#PBVL   SETB  1\n         AGO   .SPO9000\n.SPO0300 AIF   ('&OPT' NE 'NOVL').SPO0390          NOVL\n&#PBVL   SETB  0\n         AGO   .SPO9000\n.SPO0390 AIF   ('&OPT' NE 'LOCTR').SPO0400         LOCTR\n&#PBLOCR SETB  1\n         AGO   .SPO9000\n.SPO0400 AIF   ('&OPT' NE 'NOLOCTR').SPO0410       NOLOCTR\n&#PBLOCR SETB  0\n         AGO   .SPO9000\n.SPO0410 AIF   ('&OPT' NE 'LONG').SPO0420          LONG\n&#PBLONG SETB  1\n         AGO   .SPO9000\n.SPO0420 AIF   ('&OPT' NE 'NOLONG').SPO0490        NOLONG\n&#PBLONG SETB  0\n         AGO   .SPO9000\n.*------------------------------------------------------------------\n.*  IDMS/DC SPECIFIC OPTIONS\n.*------------------------------------------------------------------\n.SPO0490 AIF   ('&OPT' NE 'DCMACPRT').SPO0500      DCMACPRT\n&ODCMACP SETB  1\n         AGO   .SPO9000\n.SPO0500 AIF   ('&OPT' NE 'NODCMACPRT').SPO0510    NODCMACPRT\n&ODCMACP SETB  0\n         AGO   .SPO9000\n.SPO0510 AIF   ('&OPT' NE 'DCPRGPRT').SPO0520      DCPRGPRT\n&ODCPRGP SETB  1\n         AGO   .SPO9000\n.SPO0520 AIF   ('&OPT' NE 'NODCPRGPRT').SPO0530    NODCPRGPRT\n&ODCPRGP SETB  0\n         AGO   .SPO9000\n.SPO0530 AIF   ('&OPT' NE '#START').SPO0540        #START\n&#DC#STR SETB  1\n         AGO   .SPO9000\n.SPO0540 AIF   ('&OPT' NE 'NO#START').SPO0550      NO#START\n&#DC#STR SETB  0\n         AGO   .SPO9000\n.SPO0550 AIF   ('&OPT' NE '#RTN').SPO0560          #RTN\n&#DC#RTN SETB  1\n         AGO   .SPO9000\n.SPO0560 AIF   ('&OPT' NE 'NO#RTN').SPO0570        NO#RTN\n&#DC#RTN SETB  0\n         AGO   .SPO9000\n.SPO0570 AIF   ('&OPT' NE '#RETURN').SPO0580       #RETURN\n&#DC#RET SETB  1\n         AGO   .SPO9000\n.SPO0580 AIF   ('&OPT' NE 'NO#RETURN').SPO0590     NO#RETURN\n&#DC#RET SETB  0\n         AGO   .SPO9000\n.SPO0590 AIF   ('&OPT' NE 'SYSTEM').SPO0600        SYSTEM OR\n&#DCSYS  SETB  1                                     (SYSTEM,MODULE#)\n         AIF   (N'&OPT EQ 1).SPO0595\n&ZMODNO  SETC  '&OPT(2)'\n         AGO   .SPO9000\n.SPO0595 ANOP\n&ZMODNO  SETC   '0'\n         AGO   .SPO9000\n.SPO0600 AIF   ('&OPT' NE 'NOSYSTEM').SPO0610      NOSYSTEM\n&#DCSYS  SETB  0\n         AGO   .SPO9000\n.SPO0605 ANOP\n&ZMODNO  SETC   '0'\n         AGO   .SPO9000\n.SPO0610 AIF   ('&OPT' NE 'GETSTK').SPO0615       GETSTK\n&#DCGSTK SETB  1\n         AGO   .SPO9000\n.SPO0615 AIF   ('&OPT' NE 'NOGETSTK').SPO0620     NOGETSTK\n&#DCGSTK SETB  0\n         AGO   .SPO9000\n.SPO0620 AIF   ('&OPT' NE 'RTNR0').SPO0625        RTNR0\n&#PBRTN0 SETB  1\n         AGO   .SPO9000\n.SPO0625 AIF   ('&OPT' NE 'NORTNR0').SPO0630      NORTNR0\n&#PBRTN0 SETB  0\n         AGO   .SPO9000\n.SPO0630 AIF   ('&OPT' NE 'RTNR1').SPO0635        RTNR1\n&#PBRTN1 SETB  1\n         AGO   .SPO9000\n.SPO0635 AIF   ('&OPT' NE 'NORTNR1').SPO0800      NORTNR1\n&#PBRTN1 SETB  0\n         AGO   .SPO9000\n.*------------------------------------------------------------------\n.*  SUBSCRIPTED OPTIONS: FIRST, PARSE OPTION STRINGS\n.*------------------------------------------------------------------\n.SPO0800 AIF   ('&OPT'(1,1) NE '(').SPO1000\n&ZCTR    SETA  2                                 SET TO 2 TO SKIP '('\n&TAG     SETC  ''                                SET TO NULL TO START\n.SPO0810 AIF   ('&OPT'(&ZCTR,1) EQ ',').SPO0820  COMMA? GET 2ND OPERAND\n         AIF   ('&OPT'(&ZCTR,1) EQ ')').SPO5000  ')' - ERROR.\n&TAG3    SETC  '&OPT'(&ZCTR,1)                   GET OPERAND 1 BYTE\n&TAG     SETC  '&TAG&TAG3'                       CONCAT TO 'TAG'\n&ZCTR    SETA  &ZCTR+1                           NEXT BYTE\n         AGO   .SPO0810                           TIL WE HIT A DELIM.\n.SPO0820 ANOP  ,                                 GET 2ND OPERAND:\n&ZCTR    SETA  &ZCTR+1                           SKIP OVER COMMA\n&TAG2    SETC  ''                                SET TO NULL TO START\n.SPO0830 AIF   ('&OPT'(&ZCTR,1) EQ ')').SPO0900  ')' - WE'RE DONE.\n         AIF   ('&OPT'(&ZCTR,1) EQ ',').SPO5000  ',' - ERROR.\n&TAG3    SETC  '&OPT'(&ZCTR,1)                   GET OPERAND 2 BYTE\n&TAG2    SETC  '&TAG2&TAG3'                      CONCAT TO 'TAG2'\n&ZCTR    SETA  &ZCTR+1                           NEXT BYTE\n         AGO   .SPO0830                           TIL WE HIT A DELIM.\n.*------------------------------------------------------------------\n.*  PROCESS SUBSCRIPTED OPTIONS\n.*------------------------------------------------------------------\n.SPO0900 ANOP\n         AIF   ('&TAG' NE 'NXTTASK').SPO0910    (NXTTASK,ADDRESS)\n&#DCNTSK SETC  '&TAG2'\n         AGO   .SPO9000\n.SPO0910 AIF   ('&TAG' NE 'TYPE').SPO0920       (TYPE,RTNTYPE)\n&#DCRTYP SETC  '&TAG2'\n         AGO   .SPO9000\n.SPO0920 AIF   ('&TAG' NE 'RESINT').SPO0930     (RESINT,INTERVAL)\n&#DCRINT SETC  '&TAG2'\n         AGO   .SPO9000\n.SPO0930 AIF   ('&TAG' NE 'RESPGM').SPO0940     (RESPGM,PGMNAME)\n&#DCRPGM SETC  '&TAG2'\n         AGO   .SPO9000\n.SPO0940 AIF   ('&TAG' NE 'EP').SPO0950\n&EP      SETC  '&TAG2'\n         AGO   .SPO9000\n.SPO0950 AIF   ('&TAG' NE 'MPMODE').SPO1000                         @C3\n&MPMODE  SETC  '&TAG2'                                              @C3\n         AGO   .SPO9000                                             @C3\n.SPO1000 ANOP  ,                                ADD'L OPTIONS HERE\n.SPO5000 MNOTE 8,'Invalid option &OPT'\n.SPO9000 ANOP\n&CTR     SETA  &CTR+1\n         AGO   .SPO0010\n.SPO9999 ANOP\n.*------------------------------------------------------------------\n.*  SET DEFAULT SUBROUTINE OPTIONS BASED ON SUBOPT\n.*------------------------------------------------------------------\n         ##SUBOPT &SUBOPTS,DEFAULT=YES\n.*------------------------------------------------------------------\n.*  CHECK OPTIONS\n.*------------------------------------------------------------------\n         AIF   ('&#PBSMWA' NE '' OR NOT &#PBPWA).COP0050            @C1\n&#PBWAMX SETA  2\n&#PBSMWA SETC  '#PBW&#PB#C'\n.COP0050 AIF   (NOT &#PBLOCR).COP0060\n         ##ASMH ((A))\n         AIF   (&##ASMH).COP0060\n         MNOTE 8,'Assembler H required for LOCTR option'\n.* .COP0060 AIF   ('&#BNAME(&#BLVL)' EQ '').ERR0003\n.COP0060 AIF   (NOT &#DCSYS).NSYS000\n.*--------------------------------------------------------------------*\n.*  OPTIONS NOT ALLOWED WITH SYSTEM MODE\n.*--------------------------------------------------------------------*\n         AIF   (&#DC#RET).ERR0012\n         AIF   ('&#DCNTSK' NE '' OR '&#DCRTYP' NE '').ERR0010\n         AIF   ('&#DCRINT' NE '' OR '&#DCRPGM' NE '').ERR0010\n         AIF   ('&MPMODE' NE '' AND NOT &#DC#STR).ERR0017           @C3\n         AGO   .COP0070\n.*--------------------------------------------------------------------*\n.*  OPTIONS NOT ALLOWED WITH NOSYSTEM MODE\n.*--------------------------------------------------------------------*\n.NSYS000 AIF   (&#DC#STR OR &#DC#RTN).ERR0011\n         AIF   ('&EP' NE '').ERR0013\n         AIF   ('&MPMODE' NE '').ERR0017                            @C3\n         AIF   (&#DCGSTK).ERR0015\n.COP0070 AIF   (&#DCGSTK AND NOT &#PBPWA).ERR0016\n.*--------------------------------------------------------------------*\n.*  GENERATE CSECT, AMODE, AND RMODE CARDS\n.*--------------------------------------------------------------------*\n.CAR0100 AIF   ('&AMODE' EQ '' AND '&RMODE' EQ '').CAR0200\n         AIF   (&OMODE).CAR0110\n         MNOTE 4,'RMODE and AMODE ignored if MODE option not specified'\n         AGO   .CAR0200\n.CAR0110 AIF   (&#PBXA).CAR0120\n         MNOTE 4,'RMODE and AMODE ignored if XA option not specified'\n         AGO   .CAR0200\n.CAR0120 AIF   ('&AMODE' EQ '' AND '&RMODE' EQ '').CAR0200  DEFAULTS\n         AIF   ('&RMODE' EQ 'ANY' AND '&AMODE' EQ '24').ERR0014\n         AIF   ('&RMODE' EQ '').CAR0130\n&#PBRMOD SETC  '&RMODE'\n         AGO   .CAR0140\n.CAR0130 ANOP\n&#PBRMOD SETC  '24'\n.CAR0140 AIF   ('&AMODE' EQ '').CAR0150\n&#PBAMOD SETC  '&AMODE'\n         AGO   .CAR0900\n.CAR0150 ANOP\n&#PBAMOD SETC  '24'\n         AGO   .CAR0900\n.CAR0200 ANOP  ,             DEFAULT BOTH AMODE AND RMODE\n&#PBRMOD SETC  '24'\n&#PBAMOD SETC  '24'\n.CAR0900 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CSECT, REGEQU, ETC. AS REQUESTED\n.*--------------------------------------------------------------------*\n.MOP0000 ANOP\n&ZCSECT  SETC  '&NAME'\n         AIF   (NOT &#DCSYS).MOP0005     SET #MOPT ENVIR=\n&ZENVIR  SETC  'SYS'\n         AGO   .MOP0010\n.MOP0005 ANOP\n&ZENVIR  SETC  'USER'\n.MOP0010 ANOP                            SET #MOPT REGS=\n&ZREGEQU SETC  'NO'\n.MOP0020 AIF   (NOT &ODCMACP).MOP0025 SET #MOPT MACPRNT=\n&ZDCMACP SETC  'ON'\n         AGO   .MOP0030\n.MOP0025 ANOP\n&ZDCMACP SETC  'OFF'\n.MOP0030 AIF   (NOT &ODCPRGP).MOP0035 SET MOPT PRGPRNT=\n&ZDCPRGP SETC  'ON'\n         AGO   .MOP0040\n.MOP0035 ANOP\n&ZDCPRGP SETC  'OFF'\n.MOP0040 ANOP\n&ZREGEQU SETC  'NO'\n         AIF   (NOT &OCSECT).MOP0050\n&ZCSECT  ##SECT ,                                                   @C7\n.MOP0050 ANOP\n         AIF   (&#DCSYS).MOP0060                                   @C2\n         ##MREG RELEASE,R13                                        @C2\n.MOP0060 ANOP  ,                                                   @C2\n         #MOPT CSECT=,ENV=&ZENVIR,REGS=&ZREGEQU,                       X\n               MACPRNT=&ZDCMACP,PRGPRNT=&ZDCPRGP,                      X\n               AMODE=&#PBAMOD,RMODE=&#PBRMOD,MODNO=&ZMODNO\n         AIF   (NOT &OREGEQU).LOC0000\n         ##REGS\n.*--------------------------------------------------------------------*\n.* GENERATE LOCTR IF LOCTR OPTION SPECIFIED\n.*--------------------------------------------------------------------*\n.LOC0000 AIF   (NOT &#PBLOCR).CAR0105\n&NAME    LOCTR ,                        LOCTR FOR PROGRAM BLOCK INST\n         PSD   TYPE=PARTIAL\n&PSD     EQU   *                                                   &C4\n         ENDPSD ,\n.*--------------------------------------------------------------------*\n.*  GENERATE INITIAL CODE TO COPY R15 AND SET 1ST PROGRAM BASE\n.*--------------------------------------------------------------------*\n         AIF   (NOT &#DC#STR).STR0050\n         AIF   ('&EP' NE '').STR0010\n&TAG     SETC  '#ST&#PB#C'\n         AGO   .STR0020\n.STR0010 ANOP\n&TAG     SETC   '&EP'\n.STR0020 ANOP\n         AIF   ('&MPMODE' NE '').STR0025                            @C3\n&TAG     #START\n         AGO   .IDC0000\n.STR0025 ANOP  ,                                                    @C3\n&TAG     #START MPMODE=&MPMODE                                      @C3\n         AGO   .IDC0000                                             @C3\n.STR0050 AIF   (&#DCSYS).ERR0009\n         LR    R12,R15\n         ##LDBS &NAME,&BASEREG,R12\n.*--------------------------------------------------------------------*\n.*  GENERATE CONSTANTS AND SAVE REGISTERS\n.*--------------------------------------------------------------------*\n.IDC0000 AIF   (NOT &OID AND '&CPYRGHT' EQ '').CNS0190\n         B     #BP&NDX                  BRANCH PAST CONSTANTS\n         AIF   (NOT &OID).IDC0050             GENERATE ID\n         DC    C'&NAME &SYSDATE &SYSTIME '\n.IDC0050 AIF   ('&CPYRGHT' EQ '').CNS0190     GENERATE COPYRIGHT\n         DC    C&CPYRGHT\n.CNS0190 ANOP\n#BP&NDX  DS     0H\n.CNS0200 AIF   (NOT &#PBPWA).CNS0900\n         AIF   (&#DCRENT).CNS0900        GENERATE NORENT PWA?\n&TAG     SETC  '#BJ&NDX'\n&TAG2    SETC  '#PBJ&#PB#C'\n&TAG     DC    AL4(&TAG2)                ADDRESS OF PWA STORAGE\n.CNS0900 ANOP\n.*--------------------------------------------------------------------*\n.*  SAVE R1 IN REGISTER SPECIFIED ON R1SAVE=\n.*--------------------------------------------------------------------*\n         AIF   (NOT &#DCSYS).RPB0010    SYSTEM MODE RESERVED REGS?\n         ##MREG USE,R9                  INDICATE R9  USED FOR TCE\n         ##MREG USE,R10                 INDICATE R10 USED FOR CSA\n         USING CSA,R10                  SET CSA BASE FOR PROGRAM\n         ##MREG USE,R12                 INDICATE R12 USED FOR BASE\n.RPB0010 AIF   ('&R1SAVE' EQ '').PWA0000\n         ##MREG USE,&R1SAVE\n         LR    &R1SAVE,R1               SAVE R1\n.*--------------------------------------------------------------------*\n.*  ISSUE #GETSTG FOR PWA IF REQUIRED AND SET BASE(S) ON IT\n.*--------------------------------------------------------------------*\n.PWA0000 AIF   (NOT &#PBPWA).SAM0000\n&#DCPWAR SETC  '&PWAREG(1)'\n         AIF   ('&#DCPWAR' NE '').PWA0050\n&#DCPWAR SETC  'R11'\n.PWA0050 ##MREG USE,&#DCPWAR\n         AIF   (&#DCRENT).PWA0100\n         ICM   &#DCPWAR,B'1111',#BJ&NDX  LOAD ADDRESS OF DS'D PWA\n&#PBDSWA SETB  1\n         AGO   .PWA0600\n.PWA0100 ANOP\n&ZGLOC   SETC  'ANY'\n         AIF   ('&#PBAMOD' EQ '31' OR '&#PBAMOD' EQ 'ANY').PWA0200\n&ZGLOC   SETC  'BELOW'             GETS APP'D TO #GETSTG\n.PWA0200 ANOP\n.*       AIF   (NOT &OCLRPWA).PWA0300\n&ZGINIT  SETC  '00'\n.PWA0300 ANOP\n         ##CVREG &#DCPWAR\n         AIF   (&#DCGSTK).PWA0500\n         B     #ID&#PB#C.+4        SKIP #GETSTG STGID\n#ID&#PB#C DC   AL4(&NAME)\n         AIF   (&#DCSYS).PWA0400\n         #GETSTG TYPE=(USER,SHORT),PLIST=*,STGID=#ID&#PB#C.,           X\n               LEN=&PWA.PLLEN,ADDR=(&#MCVREG),INIT=&ZGINIT,        @C4 X\n               LOC=&ZGLOC\n         AGO   .PWA0600\n.PWA0400 ANOP\n         MNOTE *,'SYSTEM-MODE GETSTG generated'\n         #GETSTG TYPE=(SYSTCE,SHORT),PLIST=*,STGID=#ID&#PB#C.,         X\n               LEN=&PWA.PLLEN,ADDR=(&#MCVREG),INIT=&ZGINIT,        @C4 X\n               LOC=&ZGLOC,RGSV=(R2-R8)\n         AGO   .PWA0600\n.PWA0500 ANOP\n         MNOTE *,'#GETSTK generated: #GETSTK =(&PWA.PLLEN/4)'      @C4\n         #GETSTK =(&PWA.PLLEN/4)                                   @C4\n.PWA0600 ##LDBS &PWA,&PWAREG,R11                                   @C4\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO SAVE ADDRESS MODE IF NEEDED\n.*--------------------------------------------------------------------*\n.SAM0000 AIF   ('&#PBSMWA' EQ '').SAM0999 SKIP IF NO SMWA\n&TAG     SETC  '#BY&#BNDX(&#BLVL)'      MAKE UP TAG\n         AIF   (NOT &#PBXA).SAM0200\n         AIF   (NOT &#PB370).SAM0100\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         BZ    &TAG                     SKIP AMODE SETTING\n.SAM0100 ANOP\n         SLR   R15,R15                  CLEAR R15\n         AIF   (NOT &#PBXA).SAM0110\n         BSM   R15,0                    SET AMODE IN HIGH BIT\n.SAM0110 ST    R15,&#PBSMWA+4           SAVE ADDRESS MODE\n         AIF   (NOT &#PB370).SAM0200\n&TAG     DS    0H\n.SAM0200 ANOP\n.SAM0999 ANOP\n         AGO  .EXIT\n.*====================================================================*\n.*  ERRORS\n.*====================================================================*\n.* .ERR0003 MNOTE 8,'REGISTER USED FOR MULTIPLE REASONS'\n.*          AGO   .EXIT\n.ERR0009 MNOTE 8,'#START option required if SYSTEM option specified'\n         AGO   .EXIT\n.ERR0010 MNOTE 8,'#RETURN-related operands not allowed with SYSTEM opti*\n               on'\n         AGO   .EXIT\n.ERR0011 MNOTE 8,'#START/#RTN options not allowed with NOSYSTEM option'\n         AGO   .EXIT\n.ERR0012 MNOTE 8,'#RETURN option not allowed with SYSTEM option'\n         AGO   .EXIT\n.ERR0013 MNOTE 8,'EP option not allowed with NOSYSTEM option'\n         AGO   .EXIT\n.ERR0014 MNOTE 8,'AMODE and RMODE requested are inconsistent'\n         AGO   .EXIT\n.ERR0015 MNOTE 8,'GETSTK option requires SYSTEM option'\n         AGO   .EXIT\n.ERR0016 MNOTE 8,'GETSTK option requires PWA option'\n         AGO   .EXIT\n.ERR0017 MNOTE 8,'MPMODE option requires SYSTEM and #START options' @C3\n         AGO   .EXIT                                                @C3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PPOS": {"ttr": 5640, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x04o\\x04o\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 1135, "newlines": 1135, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PPOS &NAME,                  NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &SUBOPTS,                DEFAULT SUBROUTINE OPTIONS     $\n               &BASEREG,                BASE REGS                      $\n               &PWAREG,                 PWA REGS                       $\n               &SVAREA,                 SAVE AREA TAG NAME             $\n               &CPYRGHT,                COPYRIGHT NOTICE               $\n               &AMODE,                  ADDRESSING MODE                $\n               &RMODE,                  RESIDENCE MODE                 $\n               &R1SAVE,                 PARM SAVE REGISTER             $\n               &SMWA,                   STRUCTURED MACRO WORK AREA     $\n               &DYNSIZE,                SIZE OF DYNAMIC STORAGE        $\n               &DYNERR,                 DYNAMIC STORAGE ERROR EXIT     $\n               &PWASP,                  PROGRAM WORK AREA SUB POOL  @C2$\n               &PARMS,                  PARAMETER LIST              @C2$\n               &PARMMAP                 PARAMETER LIST MAP          @C2\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PPOS\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PPOS\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS THE DEFAULT FOR PROGRAM BLOCK\n.*             PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - BROKEN APART FROM BLOCK MACRO AND\n.*                            RESTRUCTURED\n.*              4/23/87 MGG - ADDED REUSABLE PWA, ESV, FUNCTION     @C1\n.*                            CODE AND ERROR ADDRESS SUPPORT.       @C1\n.*              5/08/89 MGG - ADDED PARAMETER SUPPORT AND MISC.     @C2\n.*                            RELATED CHANGES.                      @C2\n.*              2/04/90 MGG - ADDED support for ##MODPFX macro.     @C3\n.*              1/10/91 MJM - Added code to check a flag in the ESV @C4\n.*                            before resetting the debug stack.     @C4\n.*              2/13/91 MGG - Added XEFF option.                    @C5\n.*              3/28/91 MGG - Added MANUALFREE option.              @C6\n.*              7/25/97 JCB - RSECT option, ##SECT macro support    @C7\n.*             12/01/98 MGG - SUPPORT FOR PSD TYPE=BOTTOM.          @C8\n.*              5/21/03 MGG - Added tag just past STM for use by    @C9\n.*                            GENINTF.                              @C9\n.*              8/02/05 MGG - Changed to use ##B macro for branching@CA\n.*                          - Added new option CODEBASE that        @CA\n.*                            specifies whether LOADBASE should be  @CA\n.*                            based on the code or PSD/SSD.  It     @CA\n.*                            defaults to on if &SYSALVL is less    @CA\n.*                            than 1.  See system macro SYSSTATE    @CA\n.*                            for more information.                 @CA\n.*\n.*--------------------------------------------------------------------*\n         GBLB  &##ASMH                  ##ASMH MACRO RETURN FLAG\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO) @CA\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLC  &#PBPSTM                 TAG PAST STM                @C9\n         GBLC  &#PBAMOD                 AMODE OF PROGRAM\n         GBLB  &#PBBR14                 ENDBLK SHOULD GENERATE 'BR 14'\n         GBLB  &#PBCDBS                 CODE BASE OPTION            @CA\n         GBLC  &#NOBASE (Default set in BLOCK) NOCODEBASE LOCTR NAME@CA\n         GBLC  &#PBDERR                 DYNAMIC STORAGE ERROR TAG\n         GBLB  &#PBDSWA       ENDPWA SHOULD DEFINE STORAGE FOR PWA\n         GBLB  &#PBDYN                  DYNAMIC STORAGE OPTION\n         GBLC  &#PBDYNS                 VALUE FROM DYNSIZE PARAMETER\n         GBLB  &#PBGTMN                 SAVE AREA GETMAINED\n         GBLB  &#PBLOCR                 DO LOCTR IN PROGRAM         @CA\n         GBLB  &#PBLONG                 LONG PROGRAM OPTION\n         GBLB  &#PBMAIN                 MAIN OPTION\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLB  &#PBNRSV                 NORENT SAVE AREA IN PROGRAM BLK\n         GBLB  &#PBOPTS                 OPTIMIZE STORAGE\n         GBLA  &#PBPLMX                 MAX PL ENTRIES IN PROGRAM\n         GBLB  &#PBPWA                  PWA OPTION\n         GBLC  &#PBRMOD                 RMODE OF PROGRAM\n         GBLB  &#PBRTN0                 RETURN_R0 OPTION\n         GBLB  &#PBRTN1                 RETURN_R1 OPTION\n         GBLB  &#PBRPWA                 REUSABLE PWA OPTION         @C1\n         GBLB  &#PBMFRE                 MANUALFREE OPTION           @C6\n         GBLB  &#PBFNCD                 FUNCTION CODE OPTION        @C1\n         GBLB  &#PBESV                  ENVIRONMENT SUPPORT OPTION  @C1\n         GBLB  &#PBERRA                 ERROR ADDRESS OPTION        @C1\n         GBLB  &#PBSAVE                 REGISTERS SAVED IN PROGRAM BLK\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         GBLB  &#PBVL                   DEFAULT VL OPTION\n         GBLA  &#PBWAMX                 MAX SMWA IN PROGRAM\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#SBSU                   SAVEUSING OPTION\n         GBLB  &#SBUSWA                 USERSWA OPTION\n         GBLA  &#PBPWAP                 REUSABLE PWA PARM NUMBER    @C1\n         GBLA  &#PBESVP                 ESV PARM NUMBER             @C1\n         GBLA  &#PBFNCP                 FUNCTION PARM NUMBER        @C1\n         GBLB  &#POOPT                  PARM OPTION ACTIVE          @C2\n         GBLC  &#PBSECT                 Program block CSECT type    @C7\n         GBLC  &#PBBTAG                 Program block base tag.     @CA\n         GBLC  &PWA                     PWA GLOBAL SYMBOL           @C2\n         GBLC  &PSD                     PSD GLOBAL SYMBOL           @C2\n         GBLC  &PPL                     PARAMETER LIST TAG          @C2\n         LCLA  &CTR                     WORK COUNTER\n         LCLA  &NDX                     #MNDX VALUE AT START OF MACRO\n         LCLB  &OCLRPWA                 CLEARPWA OPTION\n         LCLB  &OCSECT                  CSECT OPTION\n         LCLB  &ORSECT                  RSECT OPTION                @C7\n         LCLB  &OID                     ID OPTION\n         LCLB  &OXEFF                   XEFF OPTION                 @C5\n         LCLB  &OLDBASE                 LOAD BASE OPTION\n         LCLB  &OMODE                   MODE OPTION\n         LCLC  &OPT                     OPTIONS WORK FIELD\n         LCLB  &OREGEQU                 REGEQU OPTION\n         LCLB  &ORENT                   RENT OPTION\n         LCLB  &OSAVE                   SAVE OPTION\n         LCLB  &OSAVEAR                 SAVEAREA OPTION\n         LCLB  &OCLRDBG                 CLEAR DEBUG OPTION          @C1\n         LCLC  &PGMN                    PROGRAM NAME\n         LCLC  &STRTFCD                 START FUNCTION CODE         @C1\n         LCLC  &ESVTAG                  ESV TAG                     @C1\n         LCLC  &TAG                     WORK TAG\n         LCLC  &TAG2                    WORK TAG\n         LCLC  &TAG3                    WORK TAG\n         LCLC  &TAG4                    WORK TAG                    @C1\n         LCLC  &TAG5                    WORK TAG                    @C1\n         LCLC  &TAG6                    WORK TAG                    @C1\n         LCLC  &TAG7                    WORK TAG                    @C1\n.*====================================================================*\n&NDX     SETA  &#MNDX                   SAVE INDEX VALUE TO USE\n         ##MREG RESET                   RESET REGISTERS USED\n&#PBPWA  SETB  0                        CLEAR FLAGS\n&#PBNRSV SETB  0\n&#PBOPTS SETB  0\n&#PBSAVE SETB  0\n&#PBBR14 SETB  0\n&#PBGTMN SETB  0\n&#PBXA   SETB  0\n&#PBDSWA SETB  0\n&#PBRTN0 SETB  0\n&#PBRTN1 SETB  0\n&#PB370  SETB  0\n&#PBVL   SETB  0\n&#PBDYN  SETB  0\n&#PBCDBS SETB  (&SYSALVL LT 1)          DEFAULT TO ON IF ARCHLVL<1. @CA\n&#PBLONG SETB  0\n&#PBPLMX SETA  0\n&#PBLOCR SETB  (&SYSALVL GE 1)          DEFAULT TO ON IF ARCHLVL>=1 @CA\n&#SBUSWA SETB  0\n&#SBSU   SETB  0\n&#PBRTN0 SETB  0         NORTNR0 OPTION                             @C1\n&#PBRTN1 SETB  0         NORTNR1 OPTION                             @C1\n&#PBRPWA SETB  0         NOREUSPWA OPTION                           @C1\n&#PBMFRE SETB  0         NOMANUALFREE OPTION                        @C6\n&#PBFNCD SETB  0         NOFNCODE OPTION                            @C1\n&#PBESV  SETB  0         ENVIRONMENT SUPPORT OPTION                 @C1\n&#PBERRA SETB  0         ERROR ADDRESS OPTION                       @C1\n&#PBPWAP SETA  0         NO PWA PARM                                @C1\n&#PBESVP SETA  0         NO ESV PARM                                @C1\n&#PBFNCP SETA  0         NO FNCODE PARM                             @C1\n&STRTFCD SETC  ''        NO START FUNCTION CODE                     @C1\n         ##PRMOPT PROCESS=RESET,TYPE=PROGRAM                        @C2\n&#PBRMOD SETC  '&RMODE'\n&#PBAMOD SETC  '&AMODE'\n&#PBSMWA SETC  '&SMWA'\n&#PBDYNS SETC  '&DYNSIZE'\n&#BAMODE(1) SETC  '&AMODE'\n&#PBSECT SETC  'CSECT'                           Default for ##SECT @C7\n.*--------------------------------------------------------------------*\n.*  CHECK FOR IGNORED KEYWORDS\n.*--------------------------------------------------------------------*\n.* NONE\n.*--------------------------------------------------------------------*\n.*  SET OPTIONS FOR TYPE=PROGRAM\n.*--------------------------------------------------------------------*\n&CTR     SETA  1                        SET OPTIONS\n.SPO0010 AIF   (N'&OPTIONS LT &CTR).SPO9999\n&OPT     SETC  '&OPTIONS(&CTR)'\n.SPO0020 AIF   ('&OPT' NE 'PWA').SPO0030\n&#PBPWA  SETB  1\n         AGO   .SPO9000\n.SPO0030 AIF   ('&OPT' NE 'NOPWA').SPO0040\n&#PBPWA  SETB  0\n         AGO   .SPO9000\n.SPO0040 AIF   ('&OPT' NE 'CLEARPWA').SPO0050\n&OCLRPWA SETB  1\n         AGO   .SPO9000\n.SPO0050 AIF   ('&OPT' NE 'NOCLEARPWA').SPO0060\n&OCLRPWA SETB  0\n         AGO   .SPO9000\n.SPO0060 AIF   ('&OPT' NE 'SAVE').SPO0070\n&OSAVE   SETB  1\n         AGO   .SPO9000\n.SPO0070 AIF   ('&OPT' NE 'NOSAVE').SPO0071\n&OSAVE   SETB  0\n         AGO   .SPO9000\n.SPO0071 AIF   ('&OPT' NE 'BR14').SPO0072\n&#PBBR14 SETB  1\n         AGO   .SPO9000\n.SPO0072 AIF   ('&OPT' NE 'NOBR14').SPO0080\n&#PBBR14 SETB  0\n         AGO   .SPO9000\n.SPO0080 AIF   ('&OPT' NE 'SAVEAREA').SPO0090\n&OSAVEAR SETB  1\n         AGO   .SPO9000\n.SPO0090 AIF   ('&OPT' NE 'NOSAVEAREA').SPO0100\n&OSAVEAR SETB  0\n         AGO   .SPO9000\n.SPO0100 AIF   ('&OPT' NE 'RENT').SPO0110\n&ORENT   SETB  1\n         AGO   .SPO9000\n.SPO0110 AIF   ('&OPT' NE 'NORENT').SPO0120\n&ORENT   SETB  0\n         AGO   .SPO9000\n.SPO0120 AIF   ('&OPT' NE 'ID').SPO0130\n&OID     SETB  1\n         AGO   .SPO9000\n.SPO0130 AIF   ('&OPT' NE 'NOID').SPO0140\n&OID     SETB  0\n         AGO   .SPO9000\n.SPO0140 AIF   ('&OPT' NE 'REGEQU').SPO0150\n&OREGEQU SETB  1\n         AGO   .SPO9000\n.SPO0150 AIF   ('&OPT' NE 'NOREGEQU').SPO0160\n&OREGEQU SETB  0\n         AGO   .SPO9000\n.SPO0160 AIF   ('&OPT' NE 'CSECT').SPO0162\n&OCSECT  SETB  1\n&#PBSECT SETC  'CSECT'                         Set type for ##SECT  @C7\n         AGO   .SPO9000\n.SPO0162 AIF   ('&OPT' NE 'RSECT').SPO0164                          @C7\n&ORSECT  SETB  1                               Turn on RSECT        @C7\n&OCSECT  SETB  0                               Turn off CSECT       @C7\n&#PBSECT SETC  'RSECT'                         Set type for ##SECT  @C7\n         AGO   .SPO9000                                             @C7\n.SPO0164 AIF   ('&OPT' NE 'NORSECT').SPO0170                        @C7\n&ORSECT  SETB  1                                                    @C7\n         AGO   .SPO9000                                             @C7\n.SPO0170 AIF   ('&OPT' NE 'NOCSECT').SPO0180\n&OCSECT  SETB  0\n         AGO   .SPO9000\n.SPO0180 AIF   ('&OPT' NE 'LOADBASE').SPO0190\n&OLDBASE SETB  1\n         AGO   .SPO9000\n.SPO0190 AIF   ('&OPT' NE 'NOLOADBASE').SPO0191                     @CA\n&OLDBASE SETB  0\n         AGO   .SPO9000\n.SPO0191 AIF   ('&OPT' NE 'CODEBASE').SPO0192                       @CA\n&#PBCDBS SETB  1                                                    @CA\n         AGO   .SPO9000                                             @CA\n.SPO0192 AIF   ('&OPT' NE 'NOCODEBASE').SPO0200                     @CA\n&#PBCDBS SETB  0                                                    @CA\n         AGO   .SPO9000                                             @CA\n.SPO0200 AIF   ('&OPT' NE '*RENT').SPO0210\n&#PBPWA  SETB  0         NOPWA OPTION\n&OCLRPWA SETB  0         NOCLEARPWA OPTION\n&OSAVE   SETB  1         SAVE OPTION\n&#PBBR14 SETB  1         BR14 OPTION\n&OSAVEAR SETB  1         SAVEAREA OPTION\n&ORENT   SETB  1         RENT OPTION\n&OID     SETB  1         ID OPTION\n&OXEFF   SETB  0         NOXEFF OPTION                              @C5\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OLDBASE SETB  1         LOAD BASE OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBDYN  SETB  0         NODYN OPTION\n&#PBMAIN SETB  0         NOMAIN OPTION\n&#PBOPTS SETB  0         NOOPTSTOR OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n&#PBRTN0 SETB  0         NORTNR0 OPTION\n&#PBRTN1 SETB  0         NORTNR1 OPTION\n&#PBRPWA SETB  0         NOREUSPWA OPTION                           @C1\n&#PBMFRE SETB  0         NOMANUALFREE OPTION                        @C6\n&#PBFNCD SETB  0         NOFNCODE OPTION                            @C1\n&#PBESV  SETB  0         ENVIRONMENT SUPPORT OPTION                 @C1\n&#PBPWAP SETA  0         NO PWA PARM                                @C1\n&#PBESVP SETA  0         NO ESV PARM                                @C1\n&#PBERRA SETB  0         NO ERROR ADDRESS                           @C1\n&OCLRDBG SETB  0         NO CLEAR DEBUG                             @C1\n&#PBFNCP SETA  0         NO FNCODE PARM                             @C1\n         ##PRMOPT PROCESS=RESET,TYPE=PROGRAM                        @C2\n&STRTFCD SETC  ''        NO START FUNCTION CODE                     @C1\n         AGO   .SPO9000\n.SPO0210 AIF   ('&OPT' NE '*PWA').SPO0220\n&#PBPWA  SETB  1         PWA OPTION\n&OCLRPWA SETB  1         CLEARPWA OPTION\n&OSAVE   SETB  1         SAVE OPTION\n&#PBBR14 SETB  1         BR14 OPTION\n&OSAVEAR SETB  1         SAVEAREA OPTION\n&ORENT   SETB  1         RENT OPTION\n&OID     SETB  1         ID OPTION\n&OXEFF   SETB  0         NOXEFF OPTION                              @C5\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OLDBASE SETB  1         LOAD BASE OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBDYN  SETB  0         NODYN OPTION\n&#PBMAIN SETB  0         NOMAIN OPTION\n&#PBOPTS SETB  0         NOOPTSTOR OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n&#PBRTN0 SETB  0         NORTNR0 OPTION\n&#PBRTN1 SETB  0         NORTNR1 OPTION\n&#PBRPWA SETB  0         NOREUSPWA OPTION                           @C1\n&#PBMFRE SETB  0         NOMANUALFREE OPTION                        @C6\n&#PBFNCD SETB  0         NOFNCODE OPTION                            @C1\n&#PBESV  SETB  0         ENVIRONMENT SUPPORT OPTION                 @C1\n&#PBERRA SETB  0         NO ERROR ADDRESS                           @C1\n&OCLRDBG SETB  0         NO CLEAR DEBUG                             @C1\n&#PBPWAP SETA  0         NO PWA PARM                                @C1\n&#PBESVP SETA  0         NO ESV PARM                                @C1\n&#PBFNCP SETA  0         NO FNCODE PARM                             @C1\n&STRTFCD SETC  ''        NO START FUNCTION CODE                     @C1\n         ##PRMOPT PROCESS=RESET,TYPE=PROGRAM                        @C2\n         AGO   .SPO9000\n.SPO0220 AIF   ('&OPT' NE '*NORENT').SPO0230\n&#PBPWA  SETB  0         NOPWA OPTION\n&OCLRPWA SETB  0         NOCLEARPWA OPTION\n&OSAVE   SETB  1         SAVE OPTION\n&#PBBR14 SETB  1         BR14 OPTION\n&OSAVEAR SETB  1         SAVEAREA OPTION\n&ORENT   SETB  0         NORENT OPTION\n&OID     SETB  1         ID OPTION\n&OXEFF   SETB  0         NOXEFF OPTION                              @C5\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OLDBASE SETB  1         LOAD BASE OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBDYN  SETB  0         NODYN OPTION\n&#PBMAIN SETB  0         NOMAIN OPTION\n&#PBOPTS SETB  0         NOOPTSTOR OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n&#PBRTN0 SETB  0         NORTNR0 OPTION\n&#PBRTN1 SETB  0         NORTNR1 OPTION\n&#PBRPWA SETB  0         NOREUSPWA OPTION                           @C1\n&#PBMFRE SETB  0         NOMANUALFREE OPTION                        @C6\n&#PBFNCD SETB  0         NOFNCODE OPTION                            @C1\n&#PBESV  SETB  0         ENVIRONMENT SUPPORT OPTION                 @C1\n&#PBERRA SETB  0         NO ERROR ADDRESS                           @C1\n&OCLRDBG SETB  0         NO CLEAR DEBUG                             @C1\n&#PBPWAP SETA  0         NO PWA PARM                                @C1\n&#PBESVP SETA  0         NO ESV PARM                                @C1\n&#PBFNCP SETA  0         NO FNCODE PARM                             @C1\n&STRTFCD SETC  ''        NO START FUNCTION CODE                     @C1\n         ##PRMOPT PROCESS=RESET,TYPE=PROGRAM                        @C2\n         AGO   .SPO9000\n.SPO0230 AIF   ('&OPT' NE 'MODE').SPO0240\n&OMODE   SETB  1\n         AGO   .SPO9000\n.SPO0240 AIF   ('&OPT' NE 'NOMODE').SPO0250\n&OMODE   SETB  0\n         AGO   .SPO9000\n.SPO0250 AIF   ('&OPT' NE 'XA').SPO0260\n&#PBXA   SETB  1\n         AGO   .SPO9000\n.SPO0260 AIF   ('&OPT' NE 'NOXA').SPO0270\n&#PBXA   SETB  0\n         AGO   .SPO9000\n.SPO0270 AIF   ('&OPT' NE '370').SPO0280\n&#PB370  SETB  1\n         AGO   .SPO9000\n.SPO0280 AIF   ('&OPT' NE 'NO370').SPO0290\n&#PB370  SETB  0\n         AGO   .SPO9000\n.SPO0290 AIF   ('&OPT' NE 'VL').SPO0300\n&#PBVL   SETB  1\n         AGO   .SPO9000\n.SPO0300 AIF   ('&OPT' NE 'NOVL').SPO0310\n&#PBVL   SETB  0\n         AGO   .SPO9000\n.SPO0310 AIF   ('&OPT' NE 'DYN').SPO0320\n&#PBDYN  SETB  1\n         AGO   .SPO9000\n.SPO0320 AIF   ('&OPT' NE 'NODYN').SPO0330\n&#PBDYN  SETB  0\n         AGO   .SPO9000\n.SPO0330 AIF   ('&OPT' NE 'MAIN').SPO0340\n&#PBMAIN SETB  1\n         AGO   .SPO9000\n.SPO0340 AIF   ('&OPT' NE 'NOMAIN').SPO0350\n&#PBMAIN SETB  0\n         AGO   .SPO9000\n.SPO0350 AIF   ('&OPT' NE '*MAIN').SPO0360\n&#PBPWA  SETB  1         PWA OPTION\n&OCLRPWA SETB  1         CLEARPWA OPTION\n&OSAVE   SETB  1         SAVE OPTION\n&#PBBR14 SETB  1         BR14 OPTION\n&OSAVEAR SETB  1         SAVEAREA OPTION\n&ORENT   SETB  1         RENT OPTION\n&OID     SETB  1         ID OPTION\n&OXEFF   SETB  0         NOXEFF OPTION                              @C5\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OLDBASE SETB  1         LOAD BASE OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBDYN  SETB  1         DYN OPTION\n&#PBMAIN SETB  1         MAIN OPTION\n&#PBOPTS SETB  0         NOOPTSTOR OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n&#PBRTN0 SETB  0         NORTNR0 OPTION\n&#PBRTN1 SETB  0         NORTNR1 OPTION\n&#PBRPWA SETB  0         NOREUSPWA OPTION                           @C1\n&#PBMFRE SETB  0         NOMANUALFREE OPTION                        @C6\n&#PBFNCD SETB  0         NOFNCODE OPTION                            @C1\n&#PBESV  SETB  0         ENVIRONMENT SUPPORT OPTION                 @C1\n&#PBERRA SETB  0         NO ERROR ADDRESS                           @C1\n&#PBPWAP SETA  0         NO PWA PARM                                @C1\n&OCLRDBG SETB  0         NO CLEAR DEBUG                             @C1\n&#PBESVP SETA  0         NO ESV PARM                                @C1\n&#PBFNCP SETA  0         NO FNCODE PARM                             @C1\n&STRTFCD SETC  ''        NO START FUNCTION CODE                     @C1\n         ##PRMOPT PROCESS=RESET,TYPE=PROGRAM                        @C2\n         AGO   .SPO9000\n.SPO0360 AIF   ('&OPT' NE '*NOMAIN').SPO0370\n&#PBPWA  SETB  1         PWA OPTION\n&OCLRPWA SETB  1         CLEARPWA OPTION\n&OSAVE   SETB  1         SAVE OPTION\n&#PBBR14 SETB  1         BR14 OPTION\n&OSAVEAR SETB  1         SAVEAREA OPTION\n&ORENT   SETB  1         RENT OPTION\n&OID     SETB  1         ID OPTION\n&OXEFF   SETB  0         NOXEFF OPTION                              @C5\n&OCSECT  SETB  1         CSECT OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OLDBASE SETB  1         LOAD BASE OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBDYN  SETB  1         DYN OPTION\n&#PBMAIN SETB  0         NOMAIN OPTION\n&#PBOPTS SETB  0         NOOPTSTOR OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n&#PBRTN0 SETB  0         NORTNR0 OPTION\n&#PBRTN1 SETB  0         NORTNR1 OPTION\n&#PBRPWA SETB  0         NOREUSPWA OPTION                           @C1\n&#PBMFRE SETB  0         NOMANUALFREE OPTION                        @C6\n&#PBFNCD SETB  0         NOFNCODE OPTION                            @C1\n&#PBESV  SETB  0         ENVIRONMENT SUPPORT OPTION                 @C1\n&#PBERRA SETB  0         NO ERROR ADDRESS                           @C1\n&OCLRDBG SETB  0         NO CLEAR DEBUG                             @C1\n&#PBPWAP SETA  0         NO PWA PARM                                @C1\n&#PBESVP SETA  0         NO ESV PARM                                @C1\n&#PBFNCP SETA  0         NO FNCODE PARM                             @C1\n&STRTFCD SETC  ''        NO START FUNCTION CODE                     @C1\n         ##PRMOPT PROCESS=RESET,TYPE=PROGRAM                        @C2\n         AGO   .SPO9000\n.SPO0370 AIF   ('&OPT' NE 'OPTSTOR').SPO0380\n&#PBOPTS SETB  1\n         AGO   .SPO9000\n.SPO0380 AIF   ('&OPT' NE 'NOOPTSTOR').SPO0390\n&#PBOPTS SETB  0\n         AGO   .SPO9000\n.SPO0390 AIF   ('&OPT' NE 'LOCTR').SPO0400\n&#PBLOCR SETB  1\n         AGO   .SPO9000\n.SPO0400 AIF   ('&OPT' NE 'NOLOCTR').SPO0410\n         AIF   (&SYSALVL LT 1).SPO0401                              @CA\n         MNOTE 8,'NOLOCTR is not allowed is ARCHLVL>=1'             @CA\n&#PBLOCR SETB  1                        DEFAULT TO ON IF ARCHLVL>=1 @CA\n         AGO   .SPO9000\n.SP00401 ANOP                                                       @CA\n&#PBLOCR SETB  0                                                    @CA\n         AGO   .SPO9000                                             @CA\n.SPO0410 AIF   ('&OPT' NE 'LONG').SPO0420\n&#PBLONG SETB  1\n         AGO   .SPO9000\n.SPO0420 AIF   ('&OPT' NE 'NOLONG').SPO0430\n&#PBLONG SETB  0\n         AGO   .SPO9000\n.SPO0430 AIF   ('&OPT' NE 'RTNR0').SPO0440\n&#PBRTN0 SETB  1\n         AGO   .SPO9000\n.SPO0440 AIF   ('&OPT' NE 'NORTNR0').SPO0450\n&#PBRTN0 SETB  0\n         AGO   .SPO9000\n.SPO0450 AIF   ('&OPT' NE 'RTNR1').SPO0460\n&#PBRTN1 SETB  1\n         AGO   .SPO9000\n.SPO0460 AIF   ('&OPT' NE 'NORTNR1').SPO0470\n&#PBRTN1 SETB  0\n         AGO   .SPO9000\n.SPO0470 AIF   ('&OPTIONS(&CTR,1)' NE 'REUSPWA').SPO0480            @C1\n&#PBRPWA SETB  1                                                    @C1\n&#PBPWAP SETA  1                                                    @C1\n         AIF   (N'&OPTIONS(&CTR) EQ 1).SPO9000                      @C1\n         AIF   (N'&OPTIONS(&CTR) NE 2).SPO8900                      @C1\n&#PBPWAP SETA  &OPTIONS(&CTR,2)                                     @C1\n         AGO   .SPO9000                                             @C1\n.SPO0480 AIF   ('&OPT' NE 'NOREUSPWA').SPO0490                      @C1\n&#PBRPWA SETB  0                                                    @C1\n&#PBPWAP SETA  0                                                    @C1\n         AGO   .SPO9000                                             @C1\n.SPO0490 AIF   ('&OPTIONS(&CTR,1)' NE 'FNCODE').SPO0500             @C1\n&#PBFNCD SETB  1                                                    @C1\n&#PBFNCP SETA  2                                                    @C1\n&STRTFCD SETC  'A(1)'                                               @CA\n         AIF   (N'&OPTIONS(&CTR) EQ 1).SPO9000                      @C1\n         AIF   ('&OPTIONS(&CTR,2)' EQ '').SPO0492                   @C1\n&#PBFNCP SETA  &OPTIONS(&CTR,2)                                     @C1\n.SPO0492 AIF   (N'&OPTIONS(&CTR) EQ 2).SPO9000                      @C1\n&STRTFCD SETC  '&OPTIONS(&CTR,3)'                                   @C1\n         AIF   (N'&OPTIONS(&CTR) NE 3).SPO8900                      @C1\n         AGO   .SPO9000                                             @C1\n.SPO0500 AIF   ('&OPT' NE 'NOFNCODE').SPO0510                       @C1\n&#PBFNCD SETB  0                                                    @C1\n&#PBFNCP SETA  0                                                    @C1\n         AGO   .SPO9000                                             @C1\n.SPO0510 AIF   ('&OPTIONS(&CTR,1)' NE 'ESV').SPO0520                @C1\n&#PBESV  SETB  1                                                    @C1\n&#PBESVP SETA  3                                                    @C1\n&ESVTAG  SETC  'PWAAESV'                                            @C1\n         AIF   (N'&OPTIONS(&CTR) EQ 1).SPO9000                      @C1\n         AIF   ('&OPTIONS(&CTR,2)' EQ '').SPO0512                   @C1\n&#PBESVP SETA  &OPTIONS(&CTR,2)                                     @C1\n.SPO0512 AIF   (N'&OPTIONS(&CTR) EQ 2).SPO9000                      @C1\n&ESVTAG  SETC  '&OPTIONS(&CTR,3)'                                   @C1\n         AIF   (N'&OPTIONS(&CTR) NE 3).SPO8900                      @C1\n         AGO   .SPO9000                                             @C1\n.SPO0520 AIF   ('&OPT' NE 'NOESV').SPO0530                          @C1\n&#PBESV  SETB  0                                                    @C1\n&#PBESVP SETA  0                                                    @C1\n         AGO   .SPO9000                                             @C1\n.SPO0530 AIF   ('&OPT' NE '*SRVPRC').SPO0540                        @C1\n&#PBPWA  SETB  1         PWA OPTION                                 @C1\n&OCLRPWA SETB  1         CLEARPWA OPTION                            @C1\n&OSAVE   SETB  1         SAVE OPTION                                @C1\n&#PBBR14 SETB  1         BR14 OPTION                                @C1\n&OSAVEAR SETB  1         SAVEAREA OPTION                            @C1\n&ORENT   SETB  1         RENT OPTION                                @C1\n&OID     SETB  1         ID OPTION                                  @C1\n&OXEFF   SETB  0         NOXEFF OPTION                              @C5\n&OCSECT  SETB  1         CSECT OPTION                               @C1\n&OREGEQU SETB  1         REGEQU OPTION                              @C1\n&OLDBASE SETB  1         LOAD BASE OPTION                           @C1\n&OMODE   SETB  1         MODE OPTION                                @C1\n&#PBXA   SETB  1         XA OPTION                                  @C1\n&#PB370  SETB  0         NO370 OPTION                               @C1\n&#PBVL   SETB  1         VL OPTION                                  @C1\n&#PBDYN  SETB  0         NODYN OPTION                               @C1\n&#PBMAIN SETB  0         NOMAIN OPTION                              @C1\n&#PBOPTS SETB  0         NOOPTSTOR OPTION                           @C1\n&#PBLOCR SETB  1         LOCTR OPTION                               @C1\n&#PBLONG SETB  0         NOLONG OPTION                              @C1\n&#PBRTN0 SETB  0         NORTNR0 OPTION                             @C1\n&#PBRTN1 SETB  0         NORTNR1 OPTION                             @C1\n&#PBRPWA SETB  1         REUSPWA OPTION                             @C6\n&#PBMFRE SETB  0         NOMANUALFREE OPTION                        @C6\n&#PBFNCD SETB  1         NOFNCODE OPTION                            @C1\n&#PBESV  SETB  1         ENVIRONMENT SUPPORT OPTION                 @C1\n&#PBERRA SETB  1         ERROR ADDRESS                              @C1\n&OCLRDBG SETB  1         NO CLEAR DEBUG                             @C1\n&#PBPWAP SETA  1         NO PWA PARM                                @C1\n&#PBESVP SETA  3         NO ESV PARM                                @C1\n&#PBFNCP SETA  2         NO FNCODE PARM                             @C1\n         ##PRMOPT PROCESS=RESET,TYPE=PROGRAM                        @C2\n&STRTFCD SETC  'A(1)'    START FUNCTION CODE IS A FULLWORD OF ONE   @CA\n&ESVTAG  SETC  'PWAAESV' ENVIRONMENT SUPPORT VECTOR TAG             @C1\n         AGO   .SPO9000                                             @C1\n.SPO0540 AIF   ('&OPT' NE 'ERRADDR').SPO0550                        @C1\n&#PBERRA SETB  1                                                    @C1\n         AGO   .SPO9000                                             @C1\n.SPO0550 AIF   ('&OPT' NE 'NOERRADDR').SPO0560                      @C1\n&#PBERRA SETB  0                                                    @C1\n         AGO   .SPO9000                                             @C1\n.SPO0560 AIF   ('&OPT' NE 'CLRDEBUG').SPO0570                       @C1\n&OCLRDBG SETB  1                                                    @C1\n         AGO   .SPO9000                                             @C1\n.SPO0570 AIF   ('&OPT' NE 'NOCLRDEBUG').SPO0580                     @C1\n&OCLRDBG SETB  0                                                    @C1\n         AGO   .SPO9000                                             @C1\n.SPO0580 AIF   ('&OPTIONS(&CTR,1)' NE 'PARMS').SPO0590              @C2\n         ##PRMOPT PROCESS=PARSE_OPTIONS,OPTIONS=&OPTIONS(&CTR),     @C2+\n               TYPE=PROGRAM\n         AGO   .SPO9000                                             @C2\n.SPO0590 AIF   ('&OPT' NE 'NOPARMS').SPO0600                        @C2\n         ##PRMOPT PROCESS=RESET,TYPE=PROGRAM                        @C2\n         AGO   .SPO9000                                             @C2\n.SPO0600 AIF   ('&OPT' NE 'XEFF').SPO0610                           @C5\n&OXEFF   SETB  1                                                    @C5\n         AGO   .SPO9000                                             @C5\n.SPO0610 AIF   ('&OPT' NE 'NOXEFF').SPO0620                         @C5\n&OXEFF   SETB  0                                                    @C5\n         AGO   .SPO9000                                             @C5\n.SPO0620 AIF   ('&OPT' NE 'MANUALFREE').SPO0630                     @C6\n&#PBMFRE SETB  1         MANUALFREE OPTION                          @C6\n         AGO   .SPO9000                                             @C6\n.SPO0630 AIF   ('&OPT' NE 'NOMANUALFREE').SPO0640                   @C6\n&#PBMFRE SETB  0         NOMANUALFREE OPTION                        @C6\n         AGO   .SPO9000                                             @C6\n.SPO0640 ANOP                                                       @C6\n.SPO8900 ANOP                                                       @C1\n         MNOTE 8,'Invalid option &OPT'\n.SPO9000 ANOP\n&CTR     SETA  &CTR+1\n         AGO   .SPO0010\n.SPO9999 ANOP\n.*------------------------------------------------------------------\n.*  CHECK OPTIONS\n.*------------------------------------------------------------------\n.COP0010 AIF   (NOT &#PBMAIN OR &#PBDYN).COP0020\n         MNOTE 4,'Option DYN assumed because of option MAIN'\n&#PBDYN  SETB  1\n.COP0020 AIF   (NOT &#PBDYN OR &#PBPWA).COP0030\n         MNOTE 4,'Option PWA assumed because of option DYN'\n&#PBPWA  SETB  1\n.COP0030 AIF   ('&DYNSIZE' EQ '' OR &#PBDYN).COP0040\n         MNOTE 4,'DYNSIZE can not be specified without option DYN'\n.COP0040 AIF   ('&#PBSMWA' NE '' OR NOT &#PBPWA).COP0050\n&#PBWAMX SETA  2\n&#PBSMWA SETC  '#PBW&#PB#C'\n.COP0050 AIF   (NOT &#PBLOCR).COP0060\n         ##ASMH ((A))\n         AIF   (&##ASMH).COP0060\n         MNOTE 8,'Assembler H required for LOCTR option'\n.COP0060 AIF   (NOT &#PBRPWA).COP0070                               @C1\n         AIF   (&#PBPWA AND &ORENT AND &OSAVE).COP0070              @C1\n         MNOTE 8,'Option REUSPWA requires the PWA, RENT and SAVE option$\n               s'                                                   @C1\n.COP0070 AIF   (NOT &#PBFNCD).COP0080                               @C1\n         AIF   (&#PBRPWA).COP0080                                   @C1\n         MNOTE 4,'Option FNCODE is ignored when the REUSPWA option is n$\n               ot in effect.'                                       @C1\n.COP0080 ANOP                                                       @C1\n.COP0090 AIF   (NOT &#PBESV).COP0100                                @C1\n         AIF   (&#PBPWA AND &ORENT).COP0110                         @C1\n         MNOTE 8,'Option ESV requires the PWA and RENT options'     @C1\n.COP0100 AIF   (NOT &OCLRDBG).COP0110                               @C1\n         MNOTE 8,'Option CLRDEBUG requires the ESV option'          @C1\n.COP0110 ANOP                                                       @C1\n         AIF   (NOT &OXEFF).COP0120                                 @C5\n         AIF   (&OID AND &OSAVE).COP0120                            @C5\n         MNOTE 8,'ID and SAVE option required if XEFF option specified.+\n               '                                                    @C5\n.COP0120 AIF   (NOT &#PBRPWA OR NOT &#PBMFRE).COP0130               @C6\n         MNOTE 8,'MANUALFREE and REUSPWA options are mutually exclusive+\n               '                                                    @C6\n.COP0130 AIF   (NOT &#PBMFRE).COP0140                               @C6\n         AIF   (&#PBPWA AND &ORENT AND &OSAVE).COP0140              @C6\n         MNOTE 8,'Option MANUALFREE requires the PWA, RENT and SAVE opt$\n               ions'                                                @C6\n.COP0140 ANOP                                                       @C6\n.*--------------------------------------------------------------------*\n.*  GET REQUIRED PROGRAM NAME.\n.*--------------------------------------------------------------------*\n&PGMN    SETC  '&NAME'\n         AIF   ('&NAME' NE '').CAR0090\n         MNOTE 8,'Name required on program block macro'\n&PGMN    SETC  'TEMPNAME'\n.CAR0090 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CSECT, AMODE, AND RMODE CARDS\n.*--------------------------------------------------------------------*\n         AIF   (NOT &OCSECT AND NOT &ORSECT).CAR0100                @C7\n&PGMN    ##SECT ,                       PROGRAM BLOCK               @C7\n         USING &PGMN,R15                TEMPORARY BASE\n.CAR0100 AIF   (NOT &#PBLOCR).CAR0105\n&PGMN    LOCTR ,                        LOCTR FOR PROGRAM BLOCK INST\n         PSD   TYPE=PARTIAL                                         @C2\n&PSD     DS    0D                       PSD TAG                     @CA\n         ENDPSD ,                                                   @C2\n         AIF   (&#PBCDBS).CAR0103   If program block is NOCODEBASE, @CA\n&#NOBASE SETC  '&PGMN'              use its code LOCTR for other    @CA\n         AGO   .CAR0104             NOCODEBASE subroutine code.     @CA\n.CAR0103 ANOP                       If program block is CODEBASE,   @CA\n&#NOBASE LOCTR ,                    place NOCODEBASE subroutine code@CA\n&PGMN    LOCTR ,                    between PSD AND PSD bottom.     @CA\n.CAR0104 ANOP                                                       @CA\n         PSD   TYPE=BOTTOM                                          @C8\n         ENDPSD ,                                                   @C8\n.CAR0105 AIF   ('&AMODE' EQ '' AND '&RMODE' EQ '').CAR0200\n         AIF   (&OMODE).CAR0110\n         MNOTE 4,'RMODE and AMODE ignored if MODE option not specified'\n         AGO   .CAR0200\n.CAR0110 AIF   (&#PBXA).CAR0120\n         MNOTE 4,'RMODE and AMODE ignored if XA option not specified'\n         AGO   .CAR0200\n.CAR0120 AIF   ('&AMODE' EQ '').CAR0130\n&PGMN    AMODE &AMODE                   ADDRESSING MODE\n         AGO   .CAR0140                                             @C1\n.CAR0130 ANOP\n&#PBAMOD SETC  '24'\n         AIF   ('&RMODE' NE 'ANY').CAR0140                          @C1\n&#PBAMOD SETC  '31'\n.CAR0140 AIF   ('&RMODE' EQ '').CAR0150\n&PGMN    RMODE &RMODE                   RESIDENCE MODE\n         AGO   .CAR0180\n.CAR0150 ANOP\n&#PBRMOD SETC  '24'\n.CAR0180 AGO   .CAR0900\n.CAR0200 ANOP\n&#PBRMOD SETC  '24'\n&#PBAMOD SETC  '24'\n.CAR0900 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CONSTANTS AND SAVE REGISTERS\n.*--------------------------------------------------------------------*\n         AIF   ('&SVAREA' NE '' AND NOT &OID).CNS0800\n         AIF   (NOT &#PBPWA AND NOT &OSAVEAR AND NOT &OID).CNS0800\n.* REMOVED LINE\n         ##B U,#BP&NDX                  BRANCH PAST CONSTANTS       @CA\n AIF (&ORENT OR &#PBPWA OR NOT &OSAVEAR OR '&SVAREA' NE '').CNS0100\n         DS    17F                      NONRENT SAVE AREA\n.CNS0100 AIF   (NOT &OID).CNS0200\n         ##MODPFX &PGMN,&CPYRGHT                                    @C3\n         DS    0H                                                   @C1\n.CNS0200 AIF   (&#PBCDBS).CNS0201                                   @CA\n         PSD   TYPE=PARTIAL                                         @CA\n.CNS0201 AIF   (NOT &#PBPWA).CNS0300                                @CA\n         AIF   (NOT &#PBDYN).CNS0203\n&#PBDERR SETC  '&DYNERR'\n         AIF   ('&DYNERR' NE '').CNS0203\n&#PBDERR SETC  '#BO&NDX'\n&#PBDERR DC    F'0'                      DYNAMIC ERROR ROUTINE      @CA\n.CNS0203 AIF   (NOT &#PBFNCD).CNS0205                               @C1\n&TAG     SETC  '#BM&NDX'                                            @C1\n&TAG     DC    &STRTFCD                  START FUNCTION CODE        @C1\n.CNS0205 ANOP                                                       @C1\n&TAG     SETC  '#BW&NDX'\n&TAG2    SETC  '&PWA.PLLEN'                                         @C2\n         AIF   ('&PWASP' NE '').CNS0210\n&TAG     DC    AL1(0),AL3(&TAG2)         LENGTH OF PWA\n         AGO   .CNS0250\n.CNS0210 ANOP\n&TAG     DC    AL1(&PWASP),AL3(&TAG2)    LENGTH OF PWA\n.CNS0250 AIF   (&ORENT).CNS0300\n&TAG     SETC  '#BJ&NDX'\n&TAG2    SETC  '#PBJ&#PB#C'\n&TAG     DC    A(&TAG2)                  ADDRESS OF PWA STORAGE     @CA\n.CNS0300 ANOP\n         AIF   (NOT &#PBDYN).CNS0400\n&TAG     SETC  '#BU&NDX'\n&TAG     DC    A(#PBX&#PB#C-&PWA)       DISPLACEMENT OF NAB         @CA\n.CNS0400 AIF   (&#PBCDBS).CNS0401                                   @CA\n         ENDPSD                                                     @CA\n.CNS0401 AIF   (NOT &OXEFF).CNS0500                                 @CA\n&#PBSAVE SETB  1                        INDICATE REGISTERS SAVED\n&TAG     SETC  '#BP&NDX'                                            @C5\n&TAG     ##XEFF &PGMN                   GENERATE XEFF CODE          @C5\n         AGO   .CNS0900                                             @C5\n.CNS0500 ANOP                                                       @C5\n&TAG     SETC  '#BP&NDX'\n&TAG     DS    0H                       END OF CONSTANTS\n.CNS0800 AIF   (NOT &OSAVE).CNS0900\n         STM   R14,R12,12(R13)          SAVE REGISTERS\n&#PBPSTM SETC  '#PPOS__PAST_STM_&#PB#C'                             @C9\n&#PBPSTM DS    0H                       TAG PAST STM                @C9\n&#PBSAVE SETB  1                        INDICATE REGISTERS SAVED\n.CNS0900 ANOP\n.*--------------------------------------------------------------------*\n.*  SAVE R1 IN REGISTER SPECIFIED ON R1SAVE=\n.*--------------------------------------------------------------------*\n         AIF   (NOT &#PBDYN).RPB0010\n         ##MREG USE,R11                 INDICATE R11 USED\n.RPB0010 ANOP\n         AIF   ('&R1SAVE' EQ '').LDB0000\n         ##MREG USE,&R1SAVE\n         LR    &R1SAVE,R1               SAVE R1\n.*--------------------------------------------------------------------*\n.*  LOAD PROGRAM BASES\n.*--------------------------------------------------------------------*\n.LDB0000 AIF   (NOT &OLDBASE).OAC000                                @C1\n         AIF   ('&BASEREG' NE '').LDB0200\n         AIF   (&ORENT OR &#PBPWA OR '&SVAREA' NE '').LDB0110\n         AIF   (NOT &OSAVEAR).LDB0110\n.* THIS IS A NO RENT WITH SAVEAREA OPTION USING R13 FOR BASE REG\n         ST    R15,8(,R13)              BACK LINK\n         ST    R13,4(,R15)              FORWARD LINK\n         LR    R13,R15                  POINT R13 TO START OF PROGRAM\n         DROP  R15                      DROP TEMPORARY BASE\n         USING &PGMN,R13                PROGRAM BASE (DEFAULT)\n&#PBNRSV SETB  1                        SET NORENT SAVE AREA FLAG\n         AGO   .USG0000                 GO DO USINGS\n.LDB0110 ANOP\n         AIF   (&#PBCDBS).LDB0120                                   @CA\n         ##LAL  R12,&PSD,LPBASE=NO      POINT TO PSD.               @CA\n&#PBBTAG SETC  '&PSD'                                               @CA\n         AGO   .LDB0130                                             @CA\n.LDB0120 LR    R12,R15                  POINT R12 TO START OF PROGRA@CA\n&#PBBTAG SETC  '&PGMN'                                              @CA\n.LDB0130 ANOP                                                       @CA\n         ##MREG USE,R12                 INDICATE R12 USED\n&TAG     SETC  'R12'                    DO USING OF R12\n         AGO   .LDB2000                 GO DO BASE USING\n.LDB0200 AIF   (&ORENT OR &#PBPWA OR '&SVAREA' NE '').LDB0300\n         AIF   (NOT &OSAVEAR).LDB0300\n         AIF   ('&BASEREG(1)' NE 'R13').LDB0300\n.* THIS IS A NO RENT WITH SAVEAREA OPTION USING R13 AS FIRST BASE REG\n         ST    R15,8(,R13)              BACK LINK\n         ST    R13,4(,R15)              FORWARD LINK\n         LR    R13,R15                  POINT R13 TO START OF PROGRAM\n&TAG     SETC  'R13'\n&#PBNRSV SETB  1                        SET NORENT SAVE AREA FLAG\n         AGO   .LDB2000\n.LDB0300 ANOP\n&TAG     SETC  '&BASEREG(1)'\n         ##MREG USE,&BASEREG(1)\n         AIF   (&#PBCDBS).LDB0310                                   @CA\n         ##LAL  &BASEREG(1),&PSD,LPBASE=NO POINT TO PSD.            @CA\n&#PBBTAG SETC  '&PSD'                                               @CA\n         AGO   .LDB0320                                             @CA\n.LDB0310 LR    &BASEREG(1),R15          POINT FIRST BASE TO START   @CA\n&#PBBTAG SETC  '&PGMN'                                              @CA\n.LDB0320 ANOP                                                       @CA\n.LDB2000 DROP  R15                      DROP TEMPORARY BASE\n         ##LDBS &#PBBTAG,&BASEREG,&TAG                              @CA\n.*--------------------------------------------------------------------*\n.*  OBTAIN AND CHAIN PWA\n.*--------------------------------------------------------------------*\n.OAC000  AIF    (NOT &#PBPWA).OAC1000                               @C1\n&TAG     SETC  '#BW&NDX'\n         AIF   ('&SVAREA' EQ '').OAC100                             @C1\n         MNOTE 4,'SVAREA= ignored when PWA option specified'\n.OAC100  ANOP                                                       @C1\n&TAG7    SETC  ''                                                   @C1\n&TAG6    SETC  ''                                                   @C1\n&TAG5    SETC  ''                                                   @C1\n&TAG4    SETC  ''                                                   @C1\n&TAG3    SETC  ''                                                   @C1\n&TAG2    SETC  ''\n         AIF   (NOT &#PBDYN OR &#PBMAIN).OAC200                     @C1\n&TAG2    SETC  '#PBG&#PB#C'\n         AIF   (&OCLRPWA).OAC120                                    @C1\n         L     R1,0(,R11)               POINT R1 TO NAB\n         SLR   R0,R0                    LOAD R0 WITH LENGTH OF\n         ICM   R0,B'0111',&TAG+1        .STORAGE NEEDED FOR NEW PWA\n         ALR   R0,R1                    CALCULATE NEW NAB\n         CL    R0,72(,R13)              HAVE WE OVERFLOWED?\n         ##B H,&TAG2                    YES, DO GETMAIN             @CA\n         ST    R1,8(,R13)               NO, USE DYNAMIC STORAGE\n         AGO   .OAC140                                              @C1\n.OAC120  L      R0,0(,R11)               POINT R1 TO NAB            @C1\n         LR    R15,R0                   POINT R15 TO NAB\n         SLR   R1,R1                    LOAD R1 WITH LENGTH OF\n         ICM   R1,B'0111',&TAG+1        .STORAGE NEEDED FOR NEW PWA\n         ALR   R15,R1                   CALCULATE NEW NAB\n         CL    R15,72(,R13)             HAVE WE OVERFLOWED?\n         ##B H,&TAG2                    YES, DO GETMAIN             @CA\n         ST    R0,8(,R13)               NO, USE DYNAMIC STORAGE\n         SLR   R14,R14                  CLEAR R14\n         SLR   R15,R15                  CLEAR R15\n         MVCL  R0,R14                   CLEAR PWA\n         L     R1,8(,R13)               POINT R1 TO NEW PWA\n.OAC140  OI     8(R13),X'80'             INDICATE DYNAMIC STORAGE USED\n         MVC   72(4,R1),72(R13)         MOVE EOS-64 FROM PREVIOUS PWA\n&TAG3    SETC  '#PBK&#PB#C'\n         ##B U,&TAG3                    BRANCH PAST GETMAIN         @CA\n&TAG2    DS    0H\n.OAC200  ANOP                                                       @C1\n&#PBNRSV SETB  (NOT &ORENT)             SET NORENT SAVE FLAG\n.OAC210  ANOP                                                       @C1\n         AIF   (&ORENT).OAC215                                      @C1\n         L     R1,#BJ&NDX               POINT R1 TO PWA             @CA\n&#PBDSWA SETB  1\n         AGO   .OAC217                                              @C1\n.OAC215  AIF    (NOT &#PBRPWA).OAC216                               @C1\n&TAG4    SETC  '#BG&NDX'                                            @C1\n&TAG7    SETC  '#BN&NDX'                                            @C1\n         AIF    (&#PBFNCD).OAC215F                                  @C1\n.* REUSABLE PWA WITH NOFNCODE OPTION                                @C1\n         L     R1,(&#PBPWAP-1)*4(,R1)   LOAD POINTER TO PWA ANCHOR  @C1\n         ICM   R1,B'1111',0(R1)         LOAD PWA ANCHOR             @C1\n         AIF   (&OCLRPWA).OAC215C                                   @C1\n         ##B NZ,&TAG4                   REUSE PWA IF IT EXIST       @CA\n         AGO   .OAC216                                              @C1\n.OAC215C ##B Z,&TAG7                    GETMAIN PWA IF ZERO         @CA\n         ST    R1,8(,R13)               BACKLINK                    @C1\n&TAG5    SETC  '#BH&NDX'                                            @C1\n         ##B U,&TAG5                    BRANCH PAST CLEAR PWA       @CA\n&TAG7    DS    0H                                                   @C1\n&TAG7    SETC  ''                                                   @C1\n.*                                                                  @C1\n         AGO   .OAC216                                              @C1\n.OAC215F ANOP                                                       @C1\n.* REUSABLE PWA WITH FNCODE OPTION                                  @C1\n         L     R14,(&#PBFNCP-1)*4(,R1)  LOAD POINTER TO FUNCTION    @C1\n         CLC   #BM&NDX,0(R14)           CHECK FOR START FUNCTION    @C1\n         ##B E,&TAG7                    YES, DO GETMAIN             @CA\n         L     R1,(&#PBPWAP-1)*4(,R1)   LOAD POINTER TO PWA ANCHOR  @C1\n         L     R1,0(,R1)                LOAD PWA ANCHOR             @C1\n         AIF   (&OCLRPWA).OAC215L                                   @C1\n         ##B U,&TAG4                    REUSE PWA                   @CA\n         AGO   .OAC215O                                             @C1\n.OAC215L ST    R1,8(,R13)               BACKLINK                    @C1\n&TAG5    SETC  '#BH&NDX'                                            @C1\n         ##B U,&TAG5                    BRANCH PAST CLEAR PWA       @CA\n.OAC215O ANOP                                                       @C1\n&TAG7    DS    0H                                                   @C1\n&TAG7    SETC  ''                                                   @C1\n.*                                                                  @C1\n.OAC216  ANOP                                                       @C1\n         L     R0,&TAG                  LOAD LENGTH OF PWA          @CA\n         AIF   (NOT &#PBESV).OAC216M                                @C1\n         L     R15,24(,R13)             POINT R15 TO PARMS          @C1\n         L     R15,(&#PBESVP-1)*4(,R15) LOAD POINTER TO ESV POINTER @C1\n         L     R15,0(,R15)              LOAD POINTER TO ESV         @C1\n         ##MREG CHECK,R2                HAVE TO USE R2              @CA\n         L     R2,12(,R15)              LOAD USER PARM FOR GETMAIN  @C1\n         L     R15,8(,R15)              LOAD ADDRESS OF GETMAIN     @C1\n         BALR  R14,R15                  DO GETMAIN                  @C1\n         AIF   (&OCLRPWA).OAC216N                                   @C1\n         L     R15,24(,R13)             POINT R14 TO PARMS          @C1\n         L     R15,(&#PBESVP-1)*4(,R15) LOAD POINTER TO ESV POINTER @C1\n         L     R15,0(,R15)              LOAD POINTER TO ESV         @C1\n&TAG6    SETC  '#PBL&#PB#C'                                         @C1\n         PWA   TYPE=PARTIAL                                         @C1\n&ESVTAG  DS    A                        ESV ADDRESS                 @C1\n&TAG6    EQU   &ESVTAG,4,C'A'           TAG FOR MACROS TO USE       @C1\n         ENDPWA                                                     @C1\n         ST    R15,&TAG6-&PWA.(,R1)   STORE ADDRESS OF ESV          @C2\n         AGO   .OAC216N                                             @C1\n.OAC216M GETMAIN R,LV=(0)               GETMAIN PWA                 @C1\n.OAC216N AIF   (NOT &#PBRPWA).OAC217                                @C1\n         L     R14,24(,R13)             POINT R14 TO PARMS          @C1\n         L     R14,(&#PBPWAP-1)*4(,R14) LOAD POINTER TO PWA ANCHOR  @C1\n         ST    R1,0(,R14)               STORE PWA ANCHOR            @C1\n.OAC217  ANOP                                                       @C1\n&TAG4    ST    R1,8(,R13)               BACKLINK                    @C1\n         AIF   (NOT &OCLRPWA).OAC220    IF OPTION SET, GEN CLEAR COD@C1\n         SLR   R14,R14                  CLEAR R14\n         SLR   R15,R15                  CLEAR R15\n         LR    R0,R1                    PUT ADDRESS OF PWA IN R0\n         L     R1,&TAG                  LOAD LENGTH OF PWA          @CA\n         MVCL  R0,R14                   CLEAR PWA\n         L     R1,8(,R13)               RESTORE R1\n         AIF   (NOT &#PBESV).OAC217N                                @C1\n         L     R15,24(,R13)             POINT R14 TO PARMS          @C1\n         L     R15,(&#PBESVP-1)*4(,R15) LOAD POINTER TO ESV POINTER @C1\n         L     R15,0(,R15)              LOAD POINTER TO ESV         @C1\n&TAG6    SETC  '#PBL&#PB#C'                                         @C1\n         PWA   TYPE=PARTIAL                                         @C1\n&ESVTAG  DS    A                        ESV ADDRESS                 @C1\n&TAG6    EQU   &ESVTAG,4,C'A'           TAG FOR MACROS TO USE       @C1\n         ENDPWA                                                     @C1\n         ST    R15,&TAG6-&PWA.(,R1)   STORE ADDRESS OF ESV          @C2\n.OAC217N AIF   (NOT &#PBRPWA).OAC220                                @C1\n&TAG5    DS    0H                       PAST CLEAR PWA              @C1\n.OAC220  AIF    (NOT &#PBDYN).OAC240                                @C1\n         LA    R0,16*4                  LOAD R0 WITH 64\n         SLR   R15,R15                  LOAD R15 WITH\n         ICM   R15,B'0111',&TAG+1       .LENGTH OF PWA\n         SR    R15,R0                   CALCULATE LENGTH - 64\n         ALR   R15,R1                   CALCULATE EOS - 64\n         ST    R15,72(,R1)              STORE EOS - 64\n.OAC240  ANOP                                                       @C1\n&TAG3    ST    R13,4(,R1)               FORWARD LINK\n         LR    R13,R1                   POINT R13 TO PWA\n.OAC280  ANOP                                                       @C1\n         AIF   ('&PWAREG' EQ '').OAC300                             @C1\n         AIF   ('&PWAREG(1)' EQ 'R13').OAC300                       @C1\n         MNOTE 8,'First PWAREG must be R13'\n.OAC300  ##LDBS &PWA,&PWAREG,R13                                    @C2\n         AIF   (NOT &OCLRDBG).OAC310                                @C1\n         L     R15,&ESVTAG              Load address of ESV.        @C1\n         CLI   44(R15),X'00'            Test: ClearDebug Inhibited? @C4\n         ##B NE,#BC&NDX                 Don't clear if inhibited.   @CA\n         MVC   36(4,R15),32(R15)        Reset debug stack.          @C1\n#BC&NDX  DS    0H                       Tag for skipping reset.     @C4\n.OAC310  ANOP                                                       @C1\n.OAC900  AIF    (NOT &#PBDYN).OAC910                                @C1\n         L     R11,#BU&NDX              LOAD DISPLACEMENT OF NAB    @CA\n         ALR   R11,R13                  CALCULATE NAB ADDRESS\n         ST    R11,#PBN&#PB#C           STORE NAB ADDRESS IN PWA\n         LA    R11,#PBN&#PB#C           POINT R11 TO ADDRESS OF SWA\n*                                       .ADDRESS OF NAB\n.OAC910  AIF    (NOT &#PBOPTS OR NOT &#PBDYN).OAC920                @C1\n         AIF   (&#PBLOCR).OAC912                                    @C1\n         ##B U,#BI&#PBNDX               BRANCH AROUND LINKAGE SUB   @CA\n         AGO   .OAC914                                              @C1\n.OAC912  PSD    TYPE=PARTIAL                                        @C2\n.OAC914  ANOP                                                       @C1\n#BK&#PBNDX DS  0H                       LINKAGE SUBROUTINE\n         ##SWREG R15\n         L     R15,0(,R11)              POINT R15 TO NAB (NEW SWA)\n         STM   R0,R14,4(R15)            SAVE R0 - R14\n         LR    R11,R15                  POINT R11 TO NEW SWA\n         LR    R14,R15                  POINT R14 TO NEW SWA\n         ##RWREG R15\n         AH    R14,0(,R15)              CALCULATE NEW NAB\n         CL    R14,#PBE&#PB#C           CHECK FOR OVERFLOW\n         ##B H,&#PBDERR                 BRANCH TO ERREXIT IF OVERFLO@CA\n         ST    R14,0(,R11)              STORE NEW NAB\n         B     2(,R15)                  BRANCH BACK TO SUBROUTINE\n         AIF   (&#PBLOCR).OAC916                                    @C1\n#BI&#PBNDX DS  0H\n         AGO   .OAC920                                              @C1\n.OAC916  ENDPSD ,                                                   @C2\n.OAC920  ANOP                                                       @C2\n         AIF   (NOT &#POOPT).OAC930                                 @C2\n         L     R1,4(,R13)               RESTORE                     @C2\n         L     R1,24(,R1)                PARAMETER LIST BASE.       @C2\n.OAC930  ANOP                                                       @C2\n         AIF    (&OSAVEAR).USG0000      SKIP IF WARNING NOT NEEDED @C12\n         MNOTE *,'SAVEAREA option assumed because of PWA option'\n         AGO   .USG0000                 GO DO USINGS\n.*--------------------------------------------------------------------*\n.*  GETMAIN AND CHAIN SAVE AREA FOR RENT BUT NOT PWA\n.*--------------------------------------------------------------------*\n.OAC1000 AIF   (NOT &ORENT OR NOT &OSAVEAR).OAC2000\n         AIF   ('&SVAREA' EQ '').OAC1010\n         MNOTE 4,'SVAREA= ignored when RENT and SAVEAREA option specifi$\n               ed'\n.OAC1010 ANOP\n&#PBGTMN SETB  1                        SET GETMAINED SAVE AREA FLAG\n         LA    R0,18*4                  LOAD LENGTH OF SAVE AREA\n         GETMAIN R,LV=(0)               GET SAVE AREA\n         ST    R1,8(,R13)               BACK LINK\n         ST    R13,4(,R1)               FORWARD LINK\n         LR    R13,R1                   POINT R13 TO SAVE AREA\n&#PBGTMN SETB  1                        SET RENT SAVE AREA FLAG\n         AIF   (NOT &#POOPT).OAC1030                                @C2\n         AIF   (&OSAVE).OAC1020                                     @C2\n         MNOTE *,'Assuming register 1 is saved'                     @C2\n.OAC1020 ANOP                                                       @C2\n         L     R1,4(,R13)               RESTORE                     @C2\n         L     R1,24(,R1)                PARAMETER LIST BASE.       @C2\n.OAC1030 ANOP                                                       @C2\n         AGO   .USG0000                 GO DO USINGS\n.*--------------------------------------------------------------------*\n.*  CHAIN SAVE AREA FOR NORENT THAT SPECIFIES A SAVE AREA\n.*--------------------------------------------------------------------*\n.OAC2000 AIF   ('&SVAREA' EQ '' OR NOT &OSAVEAR).OAC3000\n         LA    R15,&SVAREA              LOAD ADDRESS OF SAVE AREA\n         ST    R15,8(,R13)              BACK LINK\n         ST    R13,4(,R15)              FORWARD LINK\n         LR    R13,R15                  POINT R13 TO SAVE AREA\n&#PBNRSV SETB  1                        SET NORENT SAVE AREA FLAG\n         AGO   .USG0000                 GO DO USINGS\n.*--------------------------------------------------------------------*\n.*  CHAIN SAVE AREA FOR NORENT THAT DID NOT SPECIFIES A SAVE AREA\n.*  AND THAT DID NOT USE 13 AS A PROGRAM BASE\n.*--------------------------------------------------------------------*\n.OAC3000 AIF   ('&SVAREA' NE '' OR NOT &OSAVEAR).OAC4000\n  AIF   ('&BASEREG' EQ '' OR '&BASEREG(1)' EQ 'R13').OAC4000\n         ST    R15,8(,R13)              BACK LINK\n         ST    R13,4(,R15)              FORWARD LINK\n         LR    R13,R15                  POINT R13 TO SAVE AREA\n&#PBNRSV SETB  1                        SET NORENT SAVE AREA FLAG\n         AGO   .USG0000                 GO DO USINGS\n.*--------------------------------------------------------------------*\n.*  CHAIN SAVE AREA FOR NORENT THAT DID SPECIFIES A SAVE AREA\n.*--------------------------------------------------------------------*\n.OAC4000 AIF   ('&SVAREA' EQ '').USG0000\n         AIF   (&OSAVEAR).OAC4010\n         MNOTE *,'SAVEAREA option assumed because of SVAREA= keyword'\n.OAC4010 LA    R15,&SVAREA              POINT R15 TO SAVE AREA\n         ST    R15,8(,R13)              BACK LINK\n         ST    R13,4(,R15)              FORWARD LINK\n         LR    R13,R15                  POINT R13 TO SAVE AREA\n&#PBNRSV SETB  1                        SET NORENT SAVE AREA FLAG\n         AGO   .USG0000                 GO DO USINGS\n.USG0000 ANOP\n.* NOT WRITTEN YET\n.PSU0000 ANOP                                                       @C6\n         AIF   (NOT &#PBMFRE OR NOT &#PBPWA).PSU0999                @C6\n         PWA   TYPE=PARTIAL                                         @C6\n&PWA.__F DS    BL1                         FLAGS                    @C6\n&PWA.__F_FREEPWA         EQU B'10000000'    FREE THE PWA            @C6\n         ENDPWA                                                     @C6\n.PSU0999 ANOP                                                       @C6\n.GPC0000 ANOP                                                       @C2\n.*------------------------------------------------------------------@C2\n.*  GENERATE PARMS CODE.                                            @C2\n.*------------------------------------------------------------------@C2\n         ##PRMOPT PROCESS=GENERATE,PARMS=&PARMS,PARMMAP=&PARMMAP,   @C2+\n               TYPE=PROGRAM\n.*------------------------------------------------------------------@C2\n.*  SET DEFAULT SUBROUTINE OPTIONS BASED ON SUBOPT                  @C2\n.*------------------------------------------------------------------@C2\n         ##SUBOPT &SUBOPTS,DEFAULT=YES                              @C2\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO SAVE ADDRESS MODE IF NEEDED\n.*--------------------------------------------------------------------*\n         AIF   ('&#PBSMWA' EQ '').SAM0999 SKIP IF NO SMWA\n&TAG     SETC  '#BY&#BNDX(&#BLVL)'      MAKE UP TAG\n         AIF   (NOT &#PBXA).SAM0200\n         AIF   (NOT &#PB370).SAM0100\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         ##B Z,&TAG                     SKIP AMODE SETTING          @CA\n.SAM0100 ANOP\n         SLR   R15,R15                  CLEAR R15\n         AIF   (NOT &#PBXA).SAM0110\n         BSM   R15,0                    SET AMODE IN HIGH BIT\n.SAM0110 ST    R15,&#PBSMWA+4           SAVE ADDRESS MODE\n         AIF   (NOT &#PB370).SAM0200\n&TAG     DS    0H\n.SAM0200 ANOP\n.SAM0999 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE REGISTER EQUATES IF REQUESTED\n.*--------------------------------------------------------------------*\n.REQ0000 AIF   (NOT &OREGEQU).REQ0010\n         ##REGS\n.REQ0010 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PPPLI": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01\\x84\\x01\\x84\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 388, "newlines": 388, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PPPLI &NAME,                 NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &SUBOPTS,                DEFAULT SUBROUTINE OPTIONS     $\n               &BASEREG,                BASE REGS                      $\n               &PWAREG,                 PWA REGS                       $\n               &SVAREA,                 SAVE AREA TAG NAME             $\n               &CPYRGHT,                COPYRIGHT NOTICE               $\n               &AMODE,                  ADDRESSING MODE                $\n               &RMODE,                  RESIDENCE MODE                 $\n               &R1SAVE,                 PARM SAVE REGISTER             $\n               &SMWA,                   STRUCTURED MACRO WORK AREA     $\n               &DYNSIZE,                SIZE OF DYNAMIC STORAGE        $\n               &DYNERR,                 DYNAMIC STORAGE ERROR EXIT     $\n               &SWAREG,                 SWA BASE REGS                  $\n               &PWASP                   PROGRAM WORK AREA SUB POOL\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PPPLI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PPPLI\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS THE DEFAULT FOR PROGRAM BLOCK\n.*             PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - BROKEN APART FROM BLOCK MACRO AND\n.*                            RESTRUCTURED\n.*              5/08/89 MGG - REMOVED &WAID AND &SDID PARAMETERS    @C1\n.*                            AND CHANGED &PBWAID REFERENCES TO     @C1\n.*                            &PWA.  ADDED PSD TAG.                 @C1\n.*              7/25/97 JCB - Added default support for ##SECT.     @C2\n.*                            &#PBSECT is always 'CSECT'.           @C2\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLC  &#PBAMOD                 AMODE OF PROGRAM\n         GBLB  &#PBDSWA       ENDPWA SHOULD DEFINE STORAGE FOR PWA\n         GBLB  &#PBDYN                  DYNAMIC STORAGE OPTION\n         GBLB  &#PBLOCR                 DO LOCATR IN PROGRAM\n         GBLB  &#PBLONG                 LONG PROGRAM OPTION\n         GBLB  &#PBMAIN                 MAIN OPTION\n         GBLC  &#PBNAME                 PROGRAM BLOCK CSECT NAME\n         GBLA  &#PBPLMX                 MAX PL ENTRIES IN PROGRAM\n         GBLB  &#PBPWA                  PWA OPTION\n         GBLC  &#PBRMOD                 RMODE OF PROGRAM\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         GBLB  &#PBVL                   DEFAULT VL OPTION\n         GBLC  &PWA                     PWA ID                      @C1\n         GBLC  &PSD                     PSD ID                      @C1\n         GBLA  &#PBWAMX                 MAX SMWA IN PROGRAM\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#SBSU                   SAVEUSING OPTION\n         GBLC  &#PBSECT                 Control sect type for ##SECT@C2\n         LCLA  &CTR                     WORK COUNTER\n         LCLA  &NDX                     #MNDX VALUE AT START OF MACRO\n         LCLB  &OCLRPWA                 CLEARPWA OPTION\n         LCLB  &OID                     ID OPTION\n         LCLB  &OMODE                   MODE OPTION\n         LCLC  &OPT                     OPTIONS WORK FIELD\n         LCLB  &OREGEQU                 REGEQU OPTION\n         LCLC  &PGMN                    PROGRAM NAME\n         LCLC  &PWAL                    TAG FOR DC FOR PWA LENGTH\n         LCLC  &TAG                     WORK TAG\n&#PBSECT SETC  'CSECT'                  Default ctl sect type       @C2\n.*--------------------------------------------------------------------*\n&NDX     SETA  &#MNDX                   SAVE INDEX VALUE TO USE\n.*--------------------------------------------------------------------*\n.*  RESET REGISTERS USED.  R12-R1 ARE RESERVED.\n.*--------------------------------------------------------------------*\n         ##MREG RESET                   RESET REGISTERS USED\n         ##MREG USE,R12                 RESERVED FOR TCA\n.*--------------------------------------------------------------------*\n.*  SET FLAGS THAT ARE ALWAYS CONSTANT FOR ENVIRON=PLI\n.*--------------------------------------------------------------------*\n&#PBPWA  SETB  1  ALWAYS HAVE PWA\n&#PBDYN  SETB  0  ALWAYS OFF\n&#PBDSWA SETB  0  NEVER DS PROGRAM WORK AREA\n&#PBMAIN SETB  0  NEVER USER MAIN\n.*--------------------------------------------------------------------*\n.*  SET DEFAULTS FOR GLOBAL OPTIONS.\n.*--------------------------------------------------------------------*\n&#PBXA   SETB  0\n&#PB370  SETB  0\n&#PBVL   SETB  0\n&#PBLONG SETB  0\n&#PBLOCR SETB  0\n.*--------------------------------------------------------------------*\n.*  SET VARIOUS VARIABLES.\n.*--------------------------------------------------------------------*\n&#PBPLMX SETA  0  RESET MAXIMUM PARMS TO ZERO\n&#PBWAMX SETA  2\n&#PBSMWA SETC  '#PBW&#PB#C'\n&#SBUSWA SETB  0  RESET\n&#SBSU   SETB  0  RESET\n&#PBRMOD SETC  '&RMODE'\n&#PBAMOD SETC  '&AMODE'\n&#BAMODE(1) SETC '&AMODE'\n.*--------------------------------------------------------------------*\n.*  CHECK FOR IGNORED KEYWORDS\n.*--------------------------------------------------------------------*\n         ##IGMSG &SVAREA,SVAREA\n         ##IGMSG &R1SAVE,R1SAVE\n         ##IGMSG &SMWA,SMWA\n         ##IGMSG &DYNSIZE,DYNSIZE\n         ##IGMSG &DYNERR,DYNERR\n         ##IGMSG &SWAREG,SWAREG\n         ##IGMSG &PWASP,PWASP\n.*--------------------------------------------------------------------*\n.*  SET OPTIONS.\n.*--------------------------------------------------------------------*\n&CTR     SETA  1                        SET OPTIONS\n.SPO0010 AIF   (N'&OPTIONS LT &CTR).SPO9999\n&OPT     SETC  '&OPTIONS(&CTR)'\n.SPO0020 AIF   ('&OPT' NE 'REGEQU').SPO0030\n&OREGEQU SETB  1\n         AGO   .SPO9000\n.SPO0030 AIF   ('&OPT' NE 'NOREGEQU').SPO0040\n&OREGEQU SETB  0\n         AGO   .SPO9000\n.SPO0040 AIF   ('&OPT' NE 'CLEARPWA').SPO0050\n&OCLRPWA SETB  1\n         AGO   .SPO9000\n.SPO0050 AIF   ('&OPT' NE 'NOCLEARPWA').SPO0060\n&OCLRPWA SETB  0\n         AGO   .SPO9000\n.SPO0060 AIF   ('&OPT' NE 'ID').SPO0070\n&OID     SETB  1\n         AGO   .SPO9000\n.SPO0070 AIF   ('&OPT' NE 'NOID').SPO0100\n&OID     SETB  0\n         AGO   .SPO9000\n.SPO0100 AIF   ('&OPT' NE 'MODE').SPO0110\n&OMODE   SETB  1\n         AGO   .SPO9000\n.SPO0110 AIF   ('&OPT' NE 'NOMODE').SPO0120\n&OMODE   SETB  0\n         AGO   .SPO9000\n.SPO0120 AIF   ('&OPT' NE 'XA').SPO0130\n&#PBXA   SETB  1\n         AGO   .SPO9000\n.SPO0130 AIF   ('&OPT' NE 'NOXA').SPO0140\n&#PBXA   SETB  0\n         AGO   .SPO9000\n.SPO0140 AIF   ('&OPT' NE '370').SPO0150\n&#PB370  SETB  1\n         AGO   .SPO9000\n.SPO0150 AIF   ('&OPT' NE 'NO370').SPO0160\n&#PB370  SETB  0\n         AGO   .SPO9000\n.SPO0160 AIF   ('&OPT' NE 'VL').SPO0170\n&#PBVL   SETB  1\n         AGO   .SPO9000\n.SPO0170 AIF   ('&OPT' NE 'NOVL').SPO0180\n&#PBVL   SETB  0\n         AGO   .SPO9000\n.SPO0180 AIF   ('&OPT' NE 'LOCTR').SPO0190\n&#PBLOCR SETB  1\n         AGO   .SPO9000\n.SPO0190 AIF   ('&OPT' NE 'NOLOCTR').SPO0200\n&#PBLOCR SETB  0\n         AGO   .SPO9000\n.SPO0200 AIF   ('&OPT' NE 'LONG').SPO0210\n&#PBLONG SETB  1\n         AGO   .SPO9000\n.SPO0210 AIF   ('&OPT' NE 'NOLONG').SPO0220\n&#PBLONG SETB  0\n         AGO   .SPO9000\n.SPO0220 ANOP\n.SPO0500 AIF   ('&OPT' NE '*STDPLI').SPO0510\n&OCLRPWA SETB  1         CLEARPWA OPTION\n&OID     SETB  1         ID OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n         AGO   .SPO9000\n.SPO0510 ANOP\n         MNOTE 8,'Invalid option &OPT'\n.SPO9000 ANOP\n&CTR     SETA  &CTR+1\n         AGO   .SPO0010\n.SPO9999 ANOP\n.*------------------------------------------------------------------\n.*  SET DEFAULT SUBROUTINE OPTIONS BASED ON SUBOPT\n.*------------------------------------------------------------------\n         ##SUBOPT &SUBOPTS,DEFAULT=YES\n.*------------------------------------------------------------------\n.*  CHECK OPTIONS AND KEYWORDS\n.*------------------------------------------------------------------\n         AIF   ('&BASEREG' EQ '').CHK0100\n         AIF   ('&BASEREG(1)' EQ 'R11').CHK0100\n         MNOTE 8,'With ENVIRON=PLI, first BASEREG must be R11'\n.CHK0100 ANOP\n         AIF   ('&BASEREG' EQ '').CHK0200\n         AIF   ('&BASEREG(1)' EQ 'R11').CHK0200\n         MNOTE 8,'With ENVIRON=PLI, first PWAREG must be R13'\n.CHK0200 ANOP\n&PGMN    SETC  '&NAME'\n         AIF   ('&NAME' NE '').CHK0300\n         MNOTE 8,'Name required on program block macro'\n&PGMN    SETC  'TEMPNAM'\n.CHK0300 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CSECT, AMODE, RMODE, AND LOCTR STATEMENTS.\n.*--------------------------------------------------------------------*\n.INT0000 ANOP\n&#PBNAME SETC  '&PGMN.1'                                            @C1\n&#PBNAME ##SECT ,                       START OF CSECT              @C2\n.INT0100 AIF   (NOT &#PBLOCR).INT0105\n&#PBNAME LOCTR ,                        LOCTR FOR PROGRAM BLOCK INST\n         PSD   TYPE=PARTIAL\n&PSD     EQU   *                                                    @C1\n         ENDPSD ,\n.INT0105 AIF   ('&AMODE' EQ '' AND '&RMODE' EQ '').INT0200\n         AIF   (&OMODE).INT0110\n         MNOTE 4,'RMODE and AMODE ignored if MODE option not specified'\n         AGO   .INT0200\n.INT0110 AIF   (&#PBXA).INT0120\n         MNOTE 4,'RMODE and AMODE ignored if XA option not specified'\n         AGO   .INT0200\n.INT0120 AIF   ('&AMODE' EQ '').INT0130\n&PGMN    AMODE &AMODE                   ADDRESSING MODE\n.INT0130 ANOP\n&#PBAMOD SETC  '24'\n         AGO   .INT0140\n         AIF   ('&RMODE' EQ 'ANY').INT0140\n&#PBAMOD SETC  '31'\n.INT0140 AIF   ('&RMODE' EQ '').INT0150\n&PGMN    RMODE &RMODE                   RESIDENCE MODE\n         AGO   .INT0180\n.INT0150 ANOP\n&#PBRMOD SETC  '24'\n.INT0180 AGO   .INT0900\n.INT0200 ANOP\n&#PBRMOD SETC  '24'\n&#PBAMOD SETC  '24'\n.INT0900 ANOP\n*---------------------------------------------------------------------*\n*  PL/I TO ASSEMBLER INITIALIZATION                                   *\n*                                                                     *\n*  MORE INFORMATION ABOUT THIS INITIALIZATION CAN BE FOUND IN THE     *\n*  OS PL/I OPTIMIZING COMPILER: PROGRAMMER'S GUIDE AND                *\n*  OS PL/I OPTIMIZING COMPILER: EXECUTION LOGIC'.                     *\n*                                                                     *\n*  THIS INITIALIZATION FOLLOWS RECOMMENDATIONS STATED IN THE          *\n*  PROGRAMMER'S GUIDE.  THIS INITIALIZATION IS REENTRENT.             *\n*                                                                     *\n*---------------------------------------------------------------------*\n.*--------------------------------------------------------------------*\n.*  ENTRY POINT MUST BE PRECEEDED BY THE ENTRY POINT NAME.  THIS IS\n.*  SO THE ERROR MESSAGE AND PLIDUMP CAN USE THE NAME IN THEIR PRINT.\n.*--------------------------------------------------------------------*\n&LENNAME SETA  (K'&PGMN/2)*2+1          GET ODD LENGTH >= ACTUAL\n         DC    CL&LENNAME'&PGMN'        ENTRY NAME\n         DC    AL1(&LENNAME)\n.*--------------------------------------------------------------------*\n.*  THE FOLLOWING TAG REPRESENTS THE START OF EXECUTABLE INSTRUCTIONS.\n.*  IT IS THE REAL ENTRY TO CSECT.\n.*--------------------------------------------------------------------*\n         ENTRY &PGMN\n&PGMN    EQU   *                        FIRST EXECUTABLE INSTRUCTION\n         USING &PGMN,R15                ESTABLISH TEMPORARY PGM BASE\n.*--------------------------------------------------------------------*\n.* GENERATE ID AND CONSTANTS.\n.*--------------------------------------------------------------------*\n&TAG     SETC  '#BP&NDX'\n         B     &TAG\n         AIF   (NOT &OID).GID0010\n         DC    C'&SYSDATE &SYSTIME '\n         AIF   ('&CPYRGHT' EQ '').GID0010\n         DC    C&CPYRGHT\n.GID0010 ANOP\n&PWAL    SETC  '#BJ&NDX'\n&PWAL    DC    AL4(&PWA.PLLEN)                                      @C1\n&TAG     DS    0H\n.*--------------------------------------------------------------------*\n.*  SAVE REGISTERS AND LOAD PROGRAM BASE\n.*--------------------------------------------------------------------*\n         USING &PWA,R13                 ESTABLISH BASE FOR DSA      @C1\n         STM   R14,R12,12(R13)          SAVE REGS IN CALLER'S DSA\n         LR    R11,R15                  LOAD ENTRY ADDRESS\n         DROP  R15                      DROP TEMPORARY PROGRAM BASE\n         ##LDBS &PGMN,&BASEREG,R11      ESTABLISH PROGRAM BASE\n.*--------------------------------------------------------------------*\n.*  GET STORAGE FOR NEW DSA AND INITIALIZE IT\n.*--------------------------------------------------------------------*\n         ICM   R0,B'1111',&PWAL         LOAD LENGTH OF DSA\n         L     R1,&PWA.XANAB            LOAD ADDR OF NAB            @C1\n         ALR   R0,R1                    ADD LENGTH OF DSA TO NAB\n         CL    R0,12(,R12)              COMPARE TO ADDRESS OF LAST BYTE\n&TAG     SETC  '#BS&NDX'\n         BNH   &TAG                     SKIP CALL IF SPACE AVAILABLE\n         L     R15,116(,R12)            LOAD AND BRANCH TO PLI STORAGE\n         BALR  R14,R15                    OVERFLOW ROUTINE TO ATTEMPT\n*                                         TO OBTAIN MORE STORAGE\n         AIF   (NOT &OCLRPWA).PRC0200\n&TAG     ICM   R2,B'1111',&PWAL         LOAD R2 WITH LENGTH OF NEW DSA\n&TAG     SETC  ''\n         LR    R3,R1                    POINT R3 TO NEW DSA\n         SLR   R14,R14                  CLEAR R14\n         SLR   R15,R15                  CLEAR R15\n         MVCL  R2,R14                   CLEAR NEW DSA\n.PRC0200 ANOP\n&TAG     ST    R0,&PWA.XANAB-&PWA.(,R1) STORE NAB IN NEW DSA        @C1\n         ST    R13,&PWA.XBCH-&PWA.(,R1) BACKCHAIN                   @C1\n         MVC   &PWA.XALWS-&PWA.(4,R1),&PWA.XALWS COPY->LWS          @C1\n.*--------------------------------------------------------------------*\n.*  LOAD R13 WITH ADDRESS OF NEW DSA AND PRESERVE PL/I ERROR HANDLING.\n.*--------------------------------------------------------------------*\n         LR    R13,R1                   POINT R13 TO NEW DSA\n         ##LDBS &PWA,&PWAREG,R13        ESTABLISH BASE FOR DSA      @C1\n         MVI   &PWA.XF1A,X'80'          SET FLAGS IN DSA TO         @C1\n         MVI   &PWA.XF1B,X'00'            PRESERVE PL/I             @C1\n         MVI   &PWA.XCEC,X'91'            ERROR-HANDLEING           @C1\n         MVI   &PWA.XCEC+1,X'C0'          IN THE ASSEMBLER ROUTINE  @C1\n.SAM0000 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO SAVE ADDRESS MODE IF NEEDED\n.*--------------------------------------------------------------------*\n&TAG     SETC  '#BY&#BNDX(&#BLVL)'      MAKE UP TAG\n         AIF   (NOT &#PBXA).SAM0200\n         AIF   (NOT &#PB370).SAM0100\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         BZ    &TAG                     SKIP AMODE SETTING\n.SAM0100 ANOP\n         SLR   R15,R15                  CLEAR R15\n         AIF   (NOT &#PBXA).SAM0110\n         BSM   R15,0                    SET AMODE IN HIGH BIT\n.SAM0110 ST    R15,&#PBSMWA+4           SAVE ADDRESS MODE\n         AIF   (NOT &#PB370).SAM0200\n&TAG     DS    0H\n.SAM0200 ANOP\n.SAM0999 ANOP\n.*--------------------------------------------------------------------*\n.*  RESTORE PARMAMETER LIST POINTER\n.*--------------------------------------------------------------------*\n         L     R1,&PWA.XBCH             POINT TO PREVIOUS DSA       @C1\n         L     R1,&PWA.XS1-&PWA.(,R1) RESTORE R1 ON ENTRY           @C1\n.*--------------------------------------------------------------------*\n.*  GENERATE REGISTER EQUATES IF REQUESTED\n.*--------------------------------------------------------------------*\n.REQ0000 AIF   (NOT &OREGEQU).REQ0010\n*---------------------------------------------------------------------*\n*                       W A R N I N G                                 *\n*                                                                     *\n*  REGISTER 12 POINT TO THE TASK COMMUNICATIONS AREA (TCA) AND        *\n*  SHOULD NEVER BE MODIFIED BY THE ASSEMBLER ROUTINE.                 *\n*                                                                     *\n*  REGISTER 13 POINT TO THE CURRENT DYNAMIC STORAGE AREA (DSA)        *\n*  AND SHOULD NEVER BE MODIFIED BY THE ASSEMBLER ROUTINE.             *\n*---------------------------------------------------------------------*\n         ##REGS\n.REQ0010 ANOP\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PPSC": {"ttr": 6404, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01\\x96\\x01\\x96\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 406, "newlines": 406, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PPSC &NAME,                  NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &SUBOPTS,                DEFAULT SUBROUTINE OPTIONS     $\n               &BASEREG,                BASE REGS                      $\n               &PWAREG,                 PWA REGS                       $\n               &SVAREA,                 SAVE AREA TAG NAME             $\n               &CPYRGHT,                COPYRIGHT NOTICE               $\n               &AMODE,                  ADDRESSING MODE                $\n               &RMODE,                  RESIDENCE MODE                 $\n               &R1SAVE,                 PARM SAVE REGISTER             $\n               &SMWA,                   STRUCTURED MACRO WORK AREA     $\n               &DYNSIZE,                SIZE OF DYNAMIC STORAGE        $\n               &DYNERR,                 DYNAMIC STORAGE ERROR EXIT     $\n               &SWAREG,                 SWA BASE REGS                  $\n               &PWASP,                  PROGRAM WORK AREA SUB POOL     $\n               &PARMS,                  INPUT PARAMETERS               $\n               &PARMMAP                 INPUT PARAMETER MAPPING\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PPSC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PPSC\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS THE DEFAULT FOR PROGRAM BLOCK\n.*             PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/98 MGG - New\n.*             10/29/98 JCB - ADDED SUPPORT FOR OPTIONS=(..,INDEP)\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLC  &#PBAMOD                 AMODE OF PROGRAM\n         GBLB  &#PBDSWA       ENDPWA SHOULD DEFINE STORAGE FOR PWA\n         GBLB  &#PBDYN                  DYNAMIC STORAGE OPTION\n         GBLB  &#PBLOCR                 DO LOCATR IN PROGRAM\n         GBLB  &#PBLONG                 LONG PROGRAM OPTION\n         GBLB  &#PBMAIN                 MAIN OPTION\n         GBLC  &#PBNAME                 PROGRAM BLOCK CSECT NAME\n         GBLA  &#PBPLMX                 MAX PL ENTRIES IN PROGRAM\n         GBLB  &#PBPWA                  PWA OPTION\n         GBLC  &#PBRMOD                 RMODE OF PROGRAM\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         GBLB  &#PBVL                   DEFAULT VL OPTION\n         GBLC  &PWA                     PWA ID\n         GBLC  &PSD                     PSD ID\n         GBLA  &#PBWAMX                 MAX SMWA IN PROGRAM\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#SBSU                   SAVEUSING OPTION\n         GBLC  &#PBSECT                 Control sect type for ##SECT\n         GBLB  &#PBINDEP                INDEP requested in OPTIONS=\n         LCLA  &CTR                     WORK COUNTER\n         LCLA  &NDX                     #MNDX VALUE AT START OF MACRO\n         LCLB  &OCLRPWA                 CLEARPWA OPTION\n         LCLB  &OID                     ID OPTION\n         LCLB  &OMODE                   MODE OPTION\n         LCLC  &OPT                     OPTIONS WORK FIELD\n         LCLB  &OREGEQU                 REGEQU OPTION\n         LCLC  &PGMN                    PROGRAM NAME\n         LCLC  &PWAL                    TAG FOR DC FOR PWA LENGTH\n         LCLC  &TAG                     WORK TAG\n         LCLC  &INDEP                   YES/NO for CENTRY INDEP=\n&#PBSECT SETC  'CSECT'                  Default ctl sect type\n.*--------------------------------------------------------------------*\n&NDX     SETA  &#MNDX                   SAVE INDEX VALUE TO USE\n.*--------------------------------------------------------------------*\n.*  PWA DSECT IS ALWAYS CALLED DSA.\n.*--------------------------------------------------------------------*\n&PWA     SETC  'DSA'\n&INDEP   SETC  'NO'                     Default INDEP to NO\n.*--------------------------------------------------------------------*\n.*  RESET REGISTERS USED.  R12-R1 ARE RESERVED.\n.*--------------------------------------------------------------------*\n         ##MREG RESET                   RESET REGISTERS USED\n         ##MREG USE,R12                 RESERVED FOR CRAB\n.*--------------------------------------------------------------------*\n.*  SET FLAGS THAT ARE ALWAYS CONSTANT FOR ENVIRON=SC\n.*--------------------------------------------------------------------*\n&#PBPWA  SETB  1  ALWAYS HAVE PWA\n&#PBDYN  SETB  0  ALWAYS OFF\n&#PBDSWA SETB  0  NEVER DS PROGRAM WORK AREA\n.*--------------------------------------------------------------------*\n.*  SET DEFAULTS FOR GLOBAL OPTIONS.\n.*--------------------------------------------------------------------*\n&#PBXA   SETB  0\n&#PB370  SETB  0\n&#PBVL   SETB  0\n&#PBLONG SETB  0\n&#PBLOCR SETB  0\n&#PBINDEP SETB 0\n&#PBMAIN SETB  0\n.*--------------------------------------------------------------------*\n.*  SET VARIOUS VARIABLES.\n.*--------------------------------------------------------------------*\n&#PBPLMX SETA  0  RESET MAXIMUM PARMS TO ZERO\n&#PBWAMX SETA  2\n&#PBSMWA SETC  '#PBW&#PB#C'\n&#SBUSWA SETB  0  RESET\n&#SBSU   SETB  0  RESET\n&#PBRMOD SETC  '&RMODE'\n&#PBAMOD SETC  '&AMODE'\n&#BAMODE(1) SETC '&AMODE'\n.*--------------------------------------------------------------------*\n.*  CHECK FOR IGNORED KEYWORDS\n.*--------------------------------------------------------------------*\n         ##IGMSG &SVAREA,SVAREA\n         ##IGMSG &SMWA,SMWA\n         ##IGMSG &DYNSIZE,DYNSIZE\n         ##IGMSG &DYNERR,DYNERR\n         ##IGMSG &SWAREG,SWAREG\n         ##IGMSG &PWASP,PWASP\n         ##IGMSG &PARMS,PARMS\n.*--------------------------------------------------------------------*\n.*  SET OPTIONS.\n.*--------------------------------------------------------------------*\n&CTR     SETA  1                        SET OPTIONS\n.SPO0010 AIF   (N'&OPTIONS LT &CTR).SPO9999\n&OPT     SETC  '&OPTIONS(&CTR)'\n.SPO0020 AIF   ('&OPT' NE 'REGEQU').SPO0030\n&OREGEQU SETB  1\n         AGO   .SPO9000\n.SPO0030 AIF   ('&OPT' NE 'NOREGEQU').SPO0040\n&OREGEQU SETB  0\n         AGO   .SPO9000\n.SPO0040 AIF   ('&OPT' NE 'CLEARPWA').SPO0050\n&OCLRPWA SETB  1\n         AGO   .SPNOSUP\n.SPO0050 AIF   ('&OPT' NE 'NOCLEARPWA').SPO0060\n&OCLRPWA SETB  0\n         AGO   .SPO9000\n.SPO0060 AIF   ('&OPT' NE 'ID').SPO0070\n&OID     SETB  1\n         AGO   .SPO9000\n.SPO0070 AIF   ('&OPT' NE 'NOID').SPO0100\n&OID     SETB  0\n         AGO   .SPO9000\n.SPO0100 AIF   ('&OPT' NE 'MODE').SPO0110\n&OMODE   SETB  1\n         AGO   .SPO9000\n.SPO0110 AIF   ('&OPT' NE 'NOMODE').SPO0120\n&OMODE   SETB  0\n         AGO   .SPO9000\n.SPO0120 AIF   ('&OPT' NE 'XA').SPO0130\n&#PBXA   SETB  1\n         AGO   .SPO9000\n.SPO0130 AIF   ('&OPT' NE 'NOXA').SPO0140\n&#PBXA   SETB  0\n         AGO   .SPO9000\n.SPO0140 AIF   ('&OPT' NE '370').SPO0150\n&#PB370  SETB  1\n         AGO   .SPO9000\n.SPO0150 AIF   ('&OPT' NE 'NO370').SPO0160\n&#PB370  SETB  0\n         AGO   .SPO9000\n.SPO0160 AIF   ('&OPT' NE 'VL').SPO0170\n&#PBVL   SETB  1\n         AGO   .SPO9000\n.SPO0170 AIF   ('&OPT' NE 'NOVL').SPO0180\n&#PBVL   SETB  0\n         AGO   .SPO9000\n.SPO0180 AIF   ('&OPT' NE 'LOCTR').SPO0190\n&#PBLOCR SETB  1\n         AGO   .SPO9000\n.SPO0190 AIF   ('&OPT' NE 'NOLOCTR').SPO0200\n&#PBLOCR SETB  0\n         AGO   .SPO9000\n.SPO0200 AIF   ('&OPT' NE 'LONG').SPO0210\n&#PBLONG SETB  1\n         AGO   .SPO9000\n.SPO0210 AIF   ('&OPT' NE 'NOLONG').SPO0220\n&#PBLONG SETB  0\n         AGO   .SPO9000\n.SPO0220 AIF   ('&OPT' NE 'INDEP').SPO0230\n&#PBINDEP SETB 1\n         AGO   .SPO9000\n.SPO0230 AIF   ('&OPT' NE 'MAIN').SPO0240\n&#PBMAIN SETB  1\n         AGO   .SPO9000\n.SPO0240 AIF   ('&OPT' NE 'NOMAIN').SPO0250\n&#PBMAIN SETB  0\n         AGO   .SPO9000\n.SPO0250 ANOP\n.SPO0500 AIF   ('&OPT' NE '*STDSASC').SPO0510\n&OCLRPWA SETB  0         NOCLEARPWA OPTION\n&OID     SETB  0         NOID OPTION\n&OREGEQU SETB  1         REGEQU OPTION\n&OMODE   SETB  1         MODE OPTION\n&#PBXA   SETB  0         NOXA OPTION\n&#PB370  SETB  0         NO370 OPTION\n&#PBVL   SETB  1         VL OPTION\n&#PBLOCR SETB  1         LOCTR OPTION\n&#PBLONG SETB  0         NOLONG OPTION\n         AGO   .SPO9000\n.SPO0510 ANOP\n.SPNOSUP ANOP\n         MNOTE 8,'Invalid option &OPT'\n.SPO9000 ANOP\n&CTR     SETA  &CTR+1\n         AGO   .SPO0010\n.SPO9999 ANOP\n.*------------------------------------------------------------------\n.*  SET DEFAULT SUBROUTINE OPTIONS BASED ON SUBOPT\n.*------------------------------------------------------------------\n         ##SUBOPT &SUBOPTS,DEFAULT=YES\n.*------------------------------------------------------------------\n.*  CHECK OPTIONS AND KEYWORDS\n.*------------------------------------------------------------------\n&PGMN    SETC  '&NAME'\n         AIF   ('&NAME' NE '').CHK0300\n         MNOTE 8,'Name required on program block macro'\n&PGMN    SETC  'TEMPNAM'\n.CHK0300 ANOP\n         AIF   (NOT &#PBINDEP OR NOT &#PBMAIN).CHK0400\n         MNOTE 8,'INDEP and MAIN are mutually exclusive.'\n.CHK0400 ANOP\n.*------------------------------------------------------------------\n.*  Generate CRAB dsect.\n.*------------------------------------------------------------------\n         COPY  CRAB\n.*--------------------------------------------------------------------*\n.*  GENERATE CSECT, AMODE, RMODE, AND LOCTR STATEMENTS.\n.*--------------------------------------------------------------------*\n.INT0000 ANOP\n&#PBNAME SETC  '&PGMN'\n&#PBNAME ##SECT ,                       START OF CSECT\n.INT0100 AIF   (NOT &#PBLOCR).INT0105\n&#PBNAME LOCTR ,                        LOCTR FOR PROGRAM BLOCK INST\n         PSD   TYPE=PARTIAL\n&PSD     EQU   *\n         ENDPSD ,\n.INT0105 AIF   ('&AMODE' EQ '' AND '&RMODE' EQ '').INT0200\n         AIF   (&OMODE).INT0110\n         MNOTE 4,'RMODE and AMODE ignored if MODE option not specified'\n         AGO   .INT0200\n.INT0110 AIF   (&#PBXA).INT0120\n         MNOTE 4,'RMODE and AMODE ignored if XA option not specified'\n         AGO   .INT0200\n.INT0120 AIF   ('&AMODE' EQ '').INT0130\n&PGMN    AMODE &AMODE                   ADDRESSING MODE\n.INT0130 ANOP\n&#PBAMOD SETC  '24'\n         AGO   .INT0140\n         AIF   ('&RMODE' EQ 'ANY').INT0140\n&#PBAMOD SETC  '31'\n.INT0140 AIF   ('&RMODE' EQ '').INT0150\n&PGMN    RMODE &RMODE                   RESIDENCE MODE\n         AGO   .INT0180\n.INT0150 ANOP\n&#PBRMOD SETC  '24'\n.INT0180 ANOP\n&INDEP   SETC  'NO'\n         AIF   (NOT &#PBINDEP).INT0190\n&INDEP   SETC  'YES'\n.INT0190 ANOP\n.INT0200 ANOP\n&#PBRMOD SETC  '24'\n&#PBAMOD SETC  '24'\n.INT0900 ANOP\n*---------------------------------------------------------------------*\n*  SAS/C TO ASSEMBLER INITIALIZATION                                  *\n*                                                                     *\n*  MORE INFORMATION ABOUT THIS INITIALIZATION CAN BE FOUND IN THE     *\n*  SAS/C COMPILER AND LIBRARY USER'S GUIDE.                           *\n*                                                                     *\n*  THIS IMPLEMENTATION ONLY SUPPORTS ONE PROGRAM BLOCK PER SOURCE     *\n*  FILE.                                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         AIF   (NOT &OID).GID0010\n&TAG     SETC  '##PPSC_PAST_ID'\n         USING &#PBNAME,R15       ESTABLISH TEMPORARY BASE\n         B     &TAG               BRANCH PAST PREFIX\n         ##MODPFX &PGMN,&CPYRGHT\n&TAG     DS    0H                 PAST PREFIX\n         DROP  R15                DROP TEMPORARY BASE\n         BASR  R15,0\n.GID0010 ANOP\n&CENTRY  SETC  '@CENTRY'\n.*--------------------------------------------------------------------*\n.* If option MAIN was specified, create C environment.\n.*--------------------------------------------------------------------*\n         AIF   (NOT &#PBMAIN).GID0015\n         ENTRY @MAIN\n         USING @MAIN,R15\n@MAIN    B     ##PPSC_PAST_C_PREFIX\n         DC    AL1(L'@MAINID)\n@MAINID  DC    C' MAIN(&#PBNAME)'\n##PPSC_PAST_C_PREFIX DS 0H\n         STM   R14,R12,12(R13)\n         USING &PWA,R13\n*---------------------------------------------------------------------*\n* Call L$UMAIN to establish C environment and call this module at\n* tag &CENTRY.  When the program block's endblk is executed, control\n* will return to after BALR to destroy the environment and return.\n*---------------------------------------------------------------------*\n         MVC   DSAR15,=A(&CENTRY) SET UP RETURN POINT FROM L$UMAIN\n         SLR   R1,R1              ZERO CRAB ADDRESS POINTER\n         LR    R9,R15             COPY R15 TO BETTER PLACE\n         DROP  R15\n         USING @MAIN,R9\n         L     R15,=V(L$UMAIN)    LOCATE ENVIRONMENT CREATOR\n         BALR  R14,R15            CALL IT (IT WILL CALL #OSMAIN)\n         ST    R15,DSAR15         STORE FINAL RETURN CODE\n         BR    R5                 DESTROY ENVIRONMENT AND EXIT\n         DROP  R13\n         DROP  R9\n         SPACE\n.GID0015 ANOP\n.*--------------------------------------------------------------------*\n.*\n.*--------------------------------------------------------------------*\n&BASE1   SETC  '&BASEREG(1)'\n         AIF   ('&BASE1' NE '').GID0020\n&BASE1   SETC  'R11'\n         ##MREG USE,&BASE1              RESERVED FOR BASE REGISTER\n.GID0020 ANOP\n         USING CRAB,R12                 R12 ALWAYS POINTS TO CRAB.\n&CENTRY  CENTRY DSA=&PWA.PLLEN,                                        +\n               BASE=&BASE1,                                            +\n               STATIC=YES,                                             +\n               INDEP=&INDEP\n         AIF   ('&PWAREG' EQ '').LPWA000\n         AIF   ('&PWAREG(1)' EQ 'R13').LPWA000\n         MNOTE 8,'First PWAREG must be R13'\n.LPWA000 ##LDBS &PWA,&PWAREG,R13\n.SAM0000 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE CODE TO SAVE ADDRESS MODE IF NEEDED\n.*--------------------------------------------------------------------*\n&TAG     SETC  '#BY&#BNDX(&#BLVL)'      MAKE UP TAG\n         AIF   (NOT &#PBXA).SAM0200\n         AIF   (NOT &#PB370).SAM0100\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         BZ    &TAG                     SKIP AMODE SETTING\n.SAM0100 ANOP\n         SLR   R15,R15                  CLEAR R15\n         AIF   (NOT &#PBXA).SAM0110\n         BSM   R15,0                    SET AMODE IN HIGH BIT\n.SAM0110 ST    R15,&#PBSMWA+4           SAVE ADDRESS MODE\n         AIF   (NOT &#PB370).SAM0200\n&TAG     DS    0H\n.SAM0200 ANOP\n.SAM0999 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD ADDITIONAL BASE REGISTERS IF NECESSARY.\n.*--------------------------------------------------------------------*\n         AIF   ('&BASEREG' EQ '').LDB0010\n         ##LDBS &CENTRY,&BASEREG,&BASE1   ESTABLISH PROGRAM BASE\n.LDB0010 ANOP\n.*--------------------------------------------------------------------*\n.*  RESTORE PARMAMETER LIST POINTER\n.*--------------------------------------------------------------------*\n&REG     SETC  'R1'\n         AIF   ('&R1SAVE' EQ '').R1S0010\n&REG     SET   '&R1SAVE'\n         ##MREG USE,&R1SAVE\n.R1S0010 ANOP\n         L     R1,DSAPR13               POINT TO PREVIOUS DSA\n         L     &REG,DSAR1-&PWA.(,R1)    LOAD R1 ON ENTRY\n.*--------------------------------------------------------------------*\n.*  GENERATE REGISTER EQUATES IF REQUESTED\n.*--------------------------------------------------------------------*\n.REQ0000 AIF   (NOT &OREGEQU).REQ0010\n*---------------------------------------------------------------------*\n*                       W A R N I N G                                 *\n*                                                                     *\n*  REGISTER 12 POINTS TO THE C EXECUTION FRAMEWORK (CRAB) AND         *\n*  SHOULD NEVER BE MODIFIED BY THE ASSEMBLER ROUTINE.                 *\n*                                                                     *\n*  REGISTER 13 POINTS TO THE CURRENT DYNAMIC STORAGE AREA (DSA)       *\n*  AND SHOULD NEVER BE MODIFIED BY THE ASSEMBLER ROUTINE.             *\n*---------------------------------------------------------------------*\n         CREGS\n.REQ0010 ANOP\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##PRMOPT": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01^\\x01^\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 350, "newlines": 350, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##PRMOPT &OPTIONS=,            PARSE_OPTION PROCESS ONLY      $\n               &PARMS=,                 GENERATE_REST PROCESS ONLY     $\n               &PARMMAP=,               GENERATE_REST PROCESS ONLY     $\n               &TYPE=,                  PARMS TYPE                     $\n               &PROCESS=                SET OR GENERATE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1989.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##PRMOPT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##PRMOPT\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS PARSE THE PARMS OPTIONS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    4/28/89 MGG - NEW\n.*             10/18/89 MJM - Fixed a problem with the PARMMAP      @C1\n.*                            keyword and a problem with its effect @C1\n.*                            on the USING option.                  @C1\n.*             10/19/89 MJM - Added the COUNT suboption of PARMS.   @C2\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C3\n.*\n.*--------------------------------------------------------------------*\n         LCLC  &O                       OPTION PREFIX\n         LCLC  &D                       DEFAULT OPTION PREFIX\n&O       SETC  '&TYPE'(1,1)\n&D       SETC  '#&O.D'                  PREFIX FOR DEFAULT PARMS OPTS\n&O       SETC  '#&O.O'                  PREFIX FOR PARMS OPTIONS\n         GBLC  &(&O.BASE)               PARM BASE REGISTER\n         GBLB  &(&O.OPT)                PARM PARMS OPTION SPECIFIED\n         GBLB  &(&O.VL)                 PARM VL OPTION\n         GBLB  &(&O.COPY)               PARM COPY OPTION\n         GBLC  &(&O.COUNT)              PARM COUNT OPTION           @C2\n         GBLB  &(&O.PFX)                PARM PREFIX OPTION\n         GBLC  &(&O.CERX)               ERROR EXIT NAME\n         GBLC  &(&O.CERC)               ERROR EXIT CODE\n         GBLC  &(&D.BASE)               DEFAULT BASE REGISTER\n         GBLB  &(&D.OPT)                DEFAULT DEFAULTS OPTION\n         GBLB  &(&D.VL)                 DEFAULT VL OPTION\n         GBLB  &(&D.COPY)               DEFAULT COPY OPTION\n         GBLC  &(&D.COUNT)              DEFAULT COUNT OPTION        @C2\n         GBLB  &(&D.PFX)                DEFAULT PREFIX OPTION\n         GBLC  &(&D.CERX)               DEFAULT ERROR EXIT NAME\n         GBLC  &(&D.CERC)               DEFAULT ERROR EXIT CODE\n         GBLC  &#PBNAME                 PROGRAM BLOCK NAME\n         GBLA  &#BLVL                   BLOCK LEVEL\n         LCLC  &PREFIX                  PREFIX\n         LCLC  &TAG                     WORK TAG\n         LCLA  &CTR                     WORK COUNTER\n         AIF   ('&TYPE' NE 'PROGRAM').NOT_PROGRAM\n&WAOPT   SETC  '##PBPWA'\n&WA      SETC  'PWA'\n&PARMTAG SETC  'PPL'\n         AGO   .DSECT_GLOBALS\n.NOT_PROGRAM ANOP\n         AIF   ('&TYPE' NE 'SUBROUTINE').NOT_SUBROUTINE\n&WAOPT   SETC  '##SBSWA'\n&WA      SETC  'SWA'\n&PARMTAG SETC  'SPL'\n         AGO   .DSECT_GLOBALS\n.NOT_SUBROUTINE ANOP\n         AGO  .CEROR1\n.DSECT_GLOBALS ANOP\n         GBLB  &(&WAOPT)\n         GBLC  &(&WA)\n         GBLC  &(&PARMTAG)\n.*\n.*  Branch to the correct PROCESS= code.\n.*\n         AIF   ('&PROCESS' EQ 'RESET'                     ).RES0000\n         AIF   ('&PROCESS' EQ 'SET_TO_SUBROUTINE_DEFAULTS').STD0000\n         AIF   ('&PROCESS' EQ 'SET_SUBROUTINE_DEFAULTS'   ).SSD0000\n         AIF   ('&PROCESS' EQ 'PARSE_OPTIONS'             ).POP0000\n         AIF   ('&PROCESS' EQ 'GENERATE'                  ).RST0000\n         AGO  .CEROR3\n.*--------------------------------------------------------------------*\n.*  PROCESS=RESET.\n.*--------------------------------------------------------------------*\n.RES0000    ANOP                    Process=RESET:\n&(&O.OPT)   SETB 0                    Indicate PARMS option off.\n&(&O.VL)    SETB 0                    Indicate NOVL\n&(&O.COPY)  SETB 0                    Indicate NOCOPY\n&(&O.COUNT) SETC ''                   Indicate NOCOUNT              @C2\n&(&O.PFX)   SETB 0                    Indicate NOPREFIX\n&(&O.BASE)  SETC ''                   Indicate NOUSING\n&(&O.CERX)  SETC ''                   Indicate NOCOPYERROR name.\n&(&O.CERC)  SETC ''                   Indicate NOCOPYERROR code.\n            MEXIT                   End of process=RESET.\n.*--------------------------------------------------------------------*\n.*  PROCESS=SET_TO_SUBROUTINE_DEFAULTS\n.*--------------------------------------------------------------------*\n.STD0000    ANOP                    Process=SET_TO_SUBROUTINE_DEFAULTS\n&(&O.BASE)  SETC '&(&D.BASE)'         Parm default base register.\n&(&O.OPT)   SETB (&(&D.OPT))          Parm default PARMS option.\n&(&O.VL)    SETB (&(&D.VL))           Parm default VL option.\n&(&O.COPY)  SETB (&(&D.COPY))         Parm default COPY option.\n&(&O.COUNT) SETC '&(&D.COUNT)'        Parm default COUNT option.    @C2\n&(&O.PFX)   SETB (&(&D.PFX))          Parm default PREFIX option.\n&(&O.CERX)  SETC '&(&D.CERX)'         Parm default ERROR EXIT name.\n&(&O.CERC)  SETC '&(&D.CERC)'         Parm default ERROR EXIT code.\n            MEXIT                   End of SET_TO_SUBROUTINE_DEFAULTS.\n.*--------------------------------------------------------------------*\n.*  PROCESS=SET_SUBROUTINE_DEFAULTS\n.*--------------------------------------------------------------------*\n.SSD0000    ANOP                    Process=SET_SUBROUTINE_DEFAULTS\n&(&D.BASE)  SETC '&(&O.BASE)'         Parm default base register.\n&(&D.OPT)   SETB (&(&O.OPT))          Parm default PARMS option.\n&(&D.VL)    SETB (&(&O.VL))           Parm default VL option.\n&(&D.COPY)  SETB (&(&O.COPY))         Parm default COPY option.\n&(&D.COUNT) SETC '&(&O.COUNT)'        Parm default COUNT option.    @C2\n&(&D.PFX)   SETB (&(&O.PFX))          Parm default PREFIX option.\n&(&D.CERX)  SETC '&(&O.CERX)'         Parm default ERROR EXIT name.\n&(&D.CERC)  SETC '&(&O.CERC)'         Parm default ERROR EXIT code.\n            MEXIT                   End of SET_SUBROUTINE_DEFAULTS.\n.*--------------------------------------------------------------------*\n.*  PROCESS=PARSE_OPTIONS.\n.*--------------------------------------------------------------------*\n.POP0000   ANOP                    Process=PARSE_OPTIONS.\n           AIF   ('&OPTIONS(1)' NE 'PARMS').CEROR4\n&(&O.OPT)  SETB  1\n&CTR       SETA  2                        SET COUNTER TO 1\n.POP1000   AIF   (&CTR GT N'&OPTIONS).POP7000\n           AIF   ('&OPTIONS(&CTR)'   EQ 'VL'          ).POP1100\n           AIF   ('&OPTIONS(&CTR)'   EQ 'NOVL'        ).POP1110\n           AIF   ('&OPTIONS(&CTR)'   EQ 'COPY'        ).POP1120\n           AIF   ('&OPTIONS(&CTR)'   EQ 'NOCOPY'      ).POP1130\n           AIF   ('&OPTIONS(&CTR,1)' EQ 'COUNT'       ).POP1140     @C2\n           AIF   ('&OPTIONS(&CTR)'   EQ 'NOCOUNT'     ).POP1150     @C2\n           AIF   ('&OPTIONS(&CTR,1)' EQ 'USING'       ).POP1160\n           AIF   ('&OPTIONS(&CTR)'   EQ 'NOUSING'     ).POP1170\n           AIF   ('&OPTIONS(&CTR)'   EQ 'PREFIX'      ).POP1180\n           AIF   ('&OPTIONS(&CTR)'   EQ 'NOPREFIX'    ).POP1190\n           AIF   ('&OPTIONS(&CTR,1)' EQ 'COPYERROR'   ).POP1200\n           AIF   ('&OPTIONS(&CTR)'   EQ 'NOCOPYERROR' ).POP1210\n           MNOTE 8,'&OPTIONS(&CTR) is an invalid suboption of the PARMS$\n                option'\n           AGO   .POP1900               Check next option.\n.*\n.POP1100    ANOP                         VL Option:\n&(&O.VL)    SETB  1                        Indicate VL\n            AGO   .POP1900                 Check next option.\n.POP1110    ANOP                         NOVL Option:\n&(&O.VL)    SETB  0                        Indicate NOVL\n            AGO   .POP1900                 Check next option.\n.POP1120    ANOP                         COPY Option:\n&(&O.COPY)  SETB  1                        Indicate COPY\n            AGO   .POP1900                 Check next option.\n.POP1130    ANOP                         NOCOPY Option:\n&(&O.COPY)  SETB  0                        Indicate NOCOPY\n            AGO   .POP1900                 Check next option.\n.POP1140    ANOP                         COUNT Option:              @C2\n            AIF   (N'&OPTIONS(&CTR) EQ 2).POP1142                   @C2\n            MNOTE 8,'(COUNT,tag) option requires two parameters'    @C2\n            AGO   .POP1900                 Check next option.       @C2\n.POP1142    ANOP                           Count tag was specified. @C2\n&(&O.COUNT) SETC '&OPTIONS(&CTR,2)'        Indicate NOCOUNT.        @C2\n            AGO   .POP1900                 Check next option.       @C2\n.POP1150    ANOP                         NOCOUNT Option:            @C2\n&(&O.COUNT) SETC ''                        Indicate NOCOUNT.        @C2\n            AGO   .POP1900                 Check next option.       @C2\n.POP1160    ANOP                         USING Option:\n            AIF   (N'&OPTIONS(&CTR) EQ 2).POP1162\n            MNOTE 8,'USING option requires two parameters'\n            AGO   .POP1900                 Check next option.\n.POP1162    ANOP                           Base register was specified.\n&(&O.BASE)  SETC  '&OPTIONS(&CTR,2)'       Set parm base register.\n            AGO   .POP1900                 Check next option.\n.POP1170    ANOP                         NOUSING Option:\n&(&O.BASE)  SETC  ''                       Indicate NOUSING\n            AGO   .POP1900                 Check next option.\n.POP1180    ANOP                         PREFIX Option:\n&(&O.PFX)   SETB  1                        Indicate PREFIX\n            AGO   .POP1900                 Check next option.\n.POP1190    ANOP                         NOPREFIX Option:\n&(&O.PFX)   SETB  0                        Indicate NOPREFIX\n            AGO   .POP1900                 Check next option.\n.POP1200    ANOP                         COPYERROR Option:\n            AIF   (N'&OPTIONS(&CTR) GT 3).POP1202\n            AIF   (N'&OPTIONS(&CTR) GE 2).POP1204\n.POP1202    MNOTE 8,'COPYERROR option requires two or three parameters'\n            AGO   .POP1900                 Check next option.\n.POP1204    ANOP                           Right number of parameters.\n&(&O.CERX)  SETC '&OPTIONS(&CTR,2)'        Indicate exit name.\n&(&O.CERC)  SETC '&OPTIONS(&CTR,3)'        Indicate exit code.\n            AGO   .POP1900                 Check next option.\n.POP1210    ANOP                         NOCOPYERROR Option:\n&(&O.CERX)  SETC  ''                       Indicate no exit name.\n&(&O.CERC)  SETC  ''                       Indicate no exit code.\n            AGO   .POP1900                 Check next option.\n.*\n.POP1900    ANOP\n&CTR        SETA  &CTR+1                 Increment counter.\n            AGO   .POP1000               Return to top-of-loop.\n.POP7000    ANOP\n.POP9000    MEXIT                     End of PARSE_OPTIONS.\n.*--------------------------------------------------------------------*\n.*  PROCESS=GENERATE\n.*--------------------------------------------------------------------*\n.RST0000 ANOP                        Process=GENERATE.\n         AIF   (&(&O.OPT)).RST0010\n         AIF   ('&PARMS' EQ '' AND '&PARMMAP' EQ '').RST9000\n         MNOTE 8,'PARMS and PARMMAP keywords require the PARMS option'\n         AGO   .RST9000\n.RST0010 ANOP\n.**-----------------------------------------------------------------\n.**  LOAD PARAMETER LIST BASE AND ESTABLISH ADDRESSIBILITY AS\n.**  REQUESTED.\n.**-----------------------------------------------------------------\n         AIF   ('&(&O.BASE)' EQ '').RST0080\n         AIF   (&(&O.COPY)).RST0020\n         LR    &(&O.BASE),R1            LOAD PARM LIST BASE\n         AGO   .RST0030\n.RST0020 LA    &(&O.BASE),&(&PARMTAG)   POINT TO COPY OF PARM LIST\n.RST0030 AIF   ('&PARMMAP' NE '').RST0040                           @C1\n         USING &(&PARMTAG),&(&O.BASE)   ESTABLISH BASE FOR PARM LIST@C1\n         AGO   .RST0080                                             @C1\n.RST0040 USING &PARMMAP(1).,&(&O.BASE)  ESTABLISH BASE FOR PARMMAP  @C1\n.**-----------------------------------------------------------------\n.**  PROCESS THE PARMS KEYWORD, IF SPECIFIED.\n.**-----------------------------------------------------------------\n.RST0080 AIF   ('&PARMS' EQ '').RST1000\n         AIF   ('&PARMMAP' EQ '').RST0090\n         MNOTE 8,'PARMS and PARMMAP keywords are mutually exclusive'\n.RST0090 ANOP\n         AIF   (&(&O.COPY)).RST0100\n&(&PARMTAG)  DSECT ,                    PARAMETER LIST DSECT\n         AGO   .RST0190\n.RST0100 &WA   TYPE=PARTIAL             BUILD LIST IN WORK AREA\n         DS    0F                       INSURE FULLWORD ALIGNMENT\n&X       SETA  N'&PARMS*4\n&(&PARMTAG) EQU *,&X                    DEFINE TAG FOR PARAMETER LIST\n.RST0190 ANOP\n.* START OF LOOP\n&CTR     SETA  0\n&PREFIX  SETC  ''\n         AIF   (NOT &(&O.PFX)).RST0200\n&PREFIX  SETC  '&(&PARMTAG)'\n.RST0200 AGO   .RST0480\n.RST0400 ANOP\n&TAG     SETC  '&PREFIX.&PARMS(&CTR)'\n&TAG     DS    A                         PARAMETER ADDRESS\n.RST0480 ANOP\n&CTR     SETA  &CTR+1\n         AIF   (&CTR LE N'&PARMS).RST0400\n.* END OF LOOP\n         AIF   (&(&O.COPY)).RST0570\n&#PBNAME CSECT ,                        GET BACK IN PROGRAM CSECT\n         AGO   .RST0590\n.RST0570 END&WA ,                       GET OUT OF WORK AREA\n.RST0590 ANOP\n.RST1000 ANOP\n.**-----------------------------------------------------------------\n.**  PROCESS THE PARMMAP KEYWORD, IF SPECIFIED.\n.**-----------------------------------------------------------------\n         AIF   ('&PARMMAP' EQ '').RST1900\n         AIF   (N'&PARMMAP LE 2).RST1010\n         MNOTE 8,'Too many parameters specified on PARMMAP keyword'\n.RST1010 ANOP\n         AIF   (&(&O.COPY)).RST1020\n&(&PARMTAG) EQU &PARMMAP(1)\n         AGO   .RST1900\n.RST1020 ANOP\n         AIF   (N'&PARMMAP EQ 2).RST1030\n         MNOTE 8,'Second parameter required on PARMMAP keyword if COPY *\n               PARMS option is specified'\n         AGO   .RST1900\n.RST1030    &WA TYPE=PARTIAL             DEFINE FIELD IN WORK AREA\n            DS  0F                       INSURE FULLWORD ALIGNMENT\n&(&PARMTAG) DS  XL(&PARMMAP(2).)         DEFINE FIELD FOR COPY      @C1\n            END&WA ,                     GET OUT OF WORK AREA\n.RST1900 ANOP\n.RST2000 ANOP\n.**-----------------------------------------------------------------\n.**  Implement the COPY (VL or NOVL) and COUNT (VL only) options.   @C2\n.**-----------------------------------------------------------------\n&TAG     SETC  '##PRMOPT_PARMS_&SYSNDX._'\n         AIF   (&(&O.VL)).RST2100\n         AIF   ('&(&O.COUNT)' EQ '').RST2050                        @C2\n         MNOTE 8,'COUNT option requires the VL option.'             @C2\n.RST2050 AIF   (NOT &(&O.COPY)).RST2900\n         MVC   &(&PARMTAG).,0(R1)       | Move parms to copy area.\n         AGO   .RST2900\n.RST2100 AIF   (NOT &(&O.COPY)).RST2200\n         AIF   ('&(&O.CERX)' EQ '' AND '&(&O.CERC)' EQ '').CEROR5\n         XC    &(&PARMTAG).,&(&PARMTAG) | Clear parmlist area.\n         SLR   R15,R15                  | Clear index register.\n&TAG.000 DS    0H                       | Loop over parameters.\n         L     R0,0(R15,R1)             |   Load parameter from input.\n         ST    R0,&(&PARMTAG).(R15)     |   Store in copy area.\n         LTR   R0,R0                    |   Check for final parm.\n         ##B M,&TAG.100                 |   Finish up if last one.  @C3\n         LA    R15,4(R15)               |   Increment index register.\n         CH    R15,=Y(L'&(&PARMTAG.).)  |   Check for overflow.\n         ##B L,&TAG.000                 | Continue looping if okay. @C3\n         ERREXIT NAME=&(&O.CERX),CODE=&(&O.CERC)  CopyError exit.\n&TAG.100 DS    0H                       | Finished with VL copying.\n         AIF   ('&(&O.COUNT)' EQ '').RST2170                        @C2\n         LA    R0,4(,R15)               | R0 := length of parmlist. @C2\n         SRL   R0,2                     | R0 := number of parms.    @C2\n         ST    R0,&(&O.COUNT)           | Store in COUNT tag.       @C2\n.RST2170 LA    R15,&(&PARMTAG).(R15)    | Get address of final parm.\n         NI    0(R15),X'7F'             | Turn off the VL bit.\n         AGO   .RST2900\n.RST2200 AIF   ('&(&O.COUNT)' EQ '').RST2900\n         LR    R15,R1                   | R15 -> Start of parmlist. @C2\n&TAG.000 TM    0(R15),X'80'             | Test for VL bit.          @C2\n         LA    R15,4(,R15)              | Point to next parameter.  @C2\n         ##B NO,&TAG.000                | Loop if not past VL bit.  @C3\n         SLR   R15,R1                   | R15 := parmlist length.   @C2\n         SRL   R15,2                    | R15 := number of parms.   @C2\n         ST    R15,&(&O.COUNT)          | Store in COUNT tag.       @C2\n.RST2900 ANOP\n.*\n.RST9000 MEXIT                          End of Process=GENERATE.\n.*--------------------------------------------------------------------*\n.CEROR1  MNOTE 8,'&TYPE is invalid'\n         MEXIT\n.CEROR2  MNOTE 8,'##PRMOPT does not support &OPTIONS(1) option'\n         MEXIT\n.CEROR3  MNOTE 8,'&PROCESS is an invalid value for PROCESS keyword'\n         MEXIT\n.CEROR4  MNOTE 8,'The first parameter in PARM options must be PARMS'\n         MEXIT\n.CEROR5  MNOTE 8,'COPYERROR is required for (PARMS,COPY,VL) options.'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##REGS": {"ttr": 6662, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x007\\x007\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 55, "newlines": 55, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##REGS\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##REGS\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##REGS\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE REGISTER EQUATES.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\nR0       EQU   0                        EQUATE FOR REGISTER 0\nR1       EQU   1                        EQUATE FOR REGISTER 1\nR2       EQU   2                        EQUATE FOR REGISTER 2\nR3       EQU   3                        EQUATE FOR REGISTER 3\nR4       EQU   4                        EQUATE FOR REGISTER 4\nR5       EQU   5                        EQUATE FOR REGISTER 5\nR6       EQU   6                        EQUATE FOR REGISTER 6\nR7       EQU   7                        EQUATE FOR REGISTER 7\nR8       EQU   8                        EQUATE FOR REGISTER 8\nR9       EQU   9                        EQUATE FOR REGISTER 9\nR10      EQU   10                       EQUATE FOR REGISTER 10\nR11      EQU   11                       EQUATE FOR REGISTER 11\nR12      EQU   12                       EQUATE FOR REGISTER 12\nR13      EQU   13                       EQUATE FOR REGISTER 13\nR14      EQU   14                       EQUATE FOR REGISTER 14\nR15      EQU   15                       EQUATE FOR REGISTER 15\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##RST": {"ttr": 6664, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00n\\x00n\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 110, "newlines": 110, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##RST &R15=YES,&LVL=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##RST\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##RST\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO RESTORE REGISTERS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*              7/14/84 MGG - DEFINED &CNT\n.*              7/15/85 MGG - MADE IT GENERATE L INSTEAD OF LM\n.*                            IF ONLY ONE REGISTER IS INVOLVED\n.*              1/08/87 MGG - SOME CLEANUP.  REMOVED @CN.\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLC  &#BSV1(20)               BLOCK SAVE PARM 1\n         GBLC  &#BSV2(20)               BLOCK SAVE PARM 2\n         GBLC  &#BSV3(20)               BLOCK SAVE PARM 3\n         GBLA  &#MCVREG                 CONVERTED REGISTER\n         LCLC  &WRK                     WORK FIELD\n         LCLC  &O1                      OPERAND 1 WORK FIELD\n         LCLC  &O2                      OPERAND 2 WORK FIELD\n         LCLC  &O3                      OPERAND 3 WORK FIELD\n         LCLA  &WKLVL                   WORK BLOCK LEVEL\n         LCLC  &TAG                     WORK TAG\n         LCLA  &CNT                     WORK COUNTER\n&TAG     SETC  '&NAME'                  SET TAG\n&WKLVL   SETA  &#BLVL\n         AIF   ('&LVL' EQ '').PRC0010\n&WKLVL   SETA  &LVL\n.PRC0010 ANOP\n         AIF   ('&#BSV1(&WKLVL)' EQ '').PRC2000\n         AIF   ('&#BSV3(&WKLVL)' EQ '').PRC1000\n         AIF   ('&R15' EQ 'YES').PRC0100\n         AIF   ('&#BSV1(&WKLVL)' EQ 'R15').PRC3000\n         AIF   ('&#BSV2(&WKLVL)' EQ 'R15').PRC4000\n         AIF   (K'&#BSV1(&WKLVL) GT K'&#BSV2(&WKLVL)).PRC5000\n         AIF   ('&#BSV1(&WKLVL)' GT '&#BSV2(&WKLVL)').PRC5000\n.PRC0100 ANOP\n&O1      SETC  '&#BSV1(&WKLVL)'\n&O2      SETC  '&#BSV2(&WKLVL)'\n&O3      SETC  '&#BSV3(&WKLVL)'\n         AGO   .LM\n.PRC1000 AIF   ('&R15' EQ 'NO' AND '&#BSV1(&WKLVL)' EQ 'R15').PRC2000\n&O1      SETC  '&#BSV1(&WKLVL)'\n&O2      SETC  '&#BSV1(&WKLVL)'\n&O3      SETC  '&#BSV2(&WKLVL)'\n         AGO   .LM\n.PRC2000 AIF   ('&TAG' EQ '').EXIT\n&TAG     DS    0H                       NO REGISTERS RESTORED\n         AGO   .EXIT\n.PRC3000 ANOP\n&O1      SETC  'R0'\n&O2      SETC  '&#BSV2(&WKLVL)'\n&O3      SETC  '4+&#BSV3(&WKLVL)'\n         AGO   .LM\n.PRC4000 ANOP\n&O1      SETC  '&#BSV1(&WKLVL)'\n&O2      SETC  'R14'\n&O3      SETC  '&#BSV3(&WKLVL)'\n         AGO   .LM\n.PRC5000 ANOP\n         AIF   ('&#BSV1(&WKLVL)' EQ 'R14').PRC5010\n&WRK     SETC  '&#BSV1(&WKLVL),R14,&#BSV3(&WKLVL)'\n&TAG     LM    &WRK                     RESTORE REGISTER(S)\n         AGO   .PRC5020\n.PRC5010 ANOP\n&TAG     L     R14,&#BSV3(&WKLVL)       RESTORE R14\n.PRC5020 ANOP\n&TAG     SETC  ''\n         ##CVREG &#BSV1(&WKLVL)\n&CNT     SETA  (16-&#MCVREG)*4\n&O1      SETC  'R0'\n&O2      SETC  '&#BSV2(&WKLVL)'\n&O3      SETC  '&CNT+&#BSV3(&WKLVL)'\n.LM      ANOP\n         AIF   ('&O1' EQ '&O2').L\n&TAG     LM    &O1,&O2,&O3              RESTORE REGISTERS\n         AGO   .EXIT\n.L       ANOP\n&TAG     L     &O1,&O3                  RESTORE REGISTER\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##RWREG": {"ttr": 6667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00.\\x00.\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 46, "newlines": 46, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##RWREG &REG\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##RWREG\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##RWREG\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO RESTORE A WORK REGISTER FROM\n.*             THE SMWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         AIF   ('&#PBSMWA' NE '').PRC0100\n&NAME    DS    0H\n         MEXIT\n.PRC0100 ANOP\n&NAME    L     &REG,&#PBSMWA            RESTORE WORK REGISTER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##SD": {"ttr": 6669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00.\\x00.\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 46, "newlines": 46, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##SD  &TYPE=PARTIAL\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##SD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##SD\n.*\n.*  PURPOSE    INTERNAL STRUCTURED MACRO USED TO START A SSD IF THERE\n.*             IS ONE OR A PSD IN OTHER CASES.  TYPE=PARTIAL IS THE\n.*             DEFAULT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/05/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         AIF   ('&#BTYPE(1)' EQ 'SUBROUTINE').SSD\n         PSD   TYPE=&TYPE\n         MEXIT\n.SSD     SSD   TYPE=&TYPE\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##SECT": {"ttr": 6671, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00,\\x00,\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 44, "newlines": 44, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&TAG     ##SECT\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##SECT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##SECT\n.*\n.*  PURPOSE    Generate CSECT or RSECT based on PROGRAM block option\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   07/25/97 JCB - New\n.*\n.*--------------------------------------------------------------------*\n        GBLC &#PBSECT\n        AIF   ('&TAG' EQ '').NOTAG\n&TAG    &#PBSECT ,\n        MEXIT ,\n.NOTAG  MNOTE 8,'Label must be provided for ##SECT macro.'\n        MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##SESTD": {"ttr": 6913, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x84\\x00\\x84\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 132, "newlines": 132, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##SESTD &RC,                 RETURN CODE KEYWORD              $\n               &R0,                     R0                             $\n               &R1                      R1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##SESTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##SESTD\n.*\n.*  PURPOSE    DEFAULT EPILOG MACRO FOR SUBROUTINE BLOCKS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/29/86 MGG - BROKEN APART FROM ENDBLK AND RESTRUCTURED\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLB  &#PBPWA                  PROGRAM BLOCK HAS PWA\n         GBLC  &#PBNAME                 PROGRAM BLOCK NAME\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#PBDYN                  DYN OPTION\n         GBLB  &#SBSWA                  SWA OPTION\n         GBLB  &#PBLOCR                 LOCTR OPTION\n         GBLB  &#SBSU                   SAVEUSING OPTION\n         GBLB  &#SBUSWA                 USERSWA OPTION\n         GBLA  &#SB#C                   CURRENT SUBROUTINE BLOCK NUM\n         GBLA  &#SBPLMX                 MAXIMUM PARMS IN SUBROUTINE\n         GBLB  &#SBCSTM                 CUSTOM SUBROUTINE BLOCK\n         LCLC  &TAG                     WORK TAG\n         LCLC  &TAG2                    WORK TAG\n         LCLA  &CNT                     WORK COUNTER\n.*--------------------------------------------------------------------*\n.*  ISSUE MESSAGE FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &R0,R0\n         ##IGMSG &R1,R1\n.*--------------------------------------------------------------------*\n         AIF   (&#SBCSTM).PRC0700       GO DO CUSTOM STUFF\n         AIF   (NOT &#PBXA).PRC0210\n         AIF   ('&#BAMODE(&#BLVL)' EQ 'ANY').PRC0210\n         AIF   ('&#BAMODE(&#BLVL)' EQ '').PRC0210\n         AIF   (NOT &#PB370).PRC0210\n         AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0010\n         ##SWREG R15                    SAVE WORK REGISTER\n.PRC0010 L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n.PRC0200 AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0210\n         ##RST R15=YES                  RESTORE REGISTERS\n         ##RWREG R15                    RESTORE WORK REGISTER\n         AGO   .PRC0300\n.PRC0210 AIF   ('&RC' NE '(R15)' AND '&RC' NE '').PRC0220\n&TAG     ##RST R15=NO                   RESTORE REGISTERS\n         AGO   .PRC0300\n.PRC0220 AIF   ('&RC'(1,1) NE '(').PRC0230\n&TAG     LR    R15,&RC(1)               LOAD RETURN CODE\n         ##RST R15=NO                   RESTORE REGISTERS\n         AGO   .PRC0300\n.PRC0230 ANOP\n&TAG     ##RST R15=YES                  RESTORE REGISTERS\n         AIF   ('&RC' NE '0').PRC0240\n         SLR   R15,R15                  SET RETURN CODE TO 0\n         AGO   .PRC0300\n.PRC0240 LA    R15,&RC                  LOAD RETURN CODE\n.PRC0300 AIF   (NOT &#PBXA).PRC0320\n         AIF   ('&#BAMODE(&#BLVL)' EQ 'ANY').PRC0320\n         AIF   ('&#BAMODE(&#BLVL)' EQ '').PRC0320\n         AIF   (NOT &#PB370).PRC0310\n         BZR   R14                      NO, RETURN WITH BR\n.PRC0310 ANOP\n         BSM   0,R14                    RETURN WITH PREVIOUS AMODE\n         AGO   .PRC0390\n.PRC0320 ANOP\n         BR    R14                      RETURN\n.PRC0390 ANOP\n         AGO   .PRC0900\n.PRC0700 AIF   ('&RC' EQ '(R15)').PRC0900\n         AIF   ('&RC' EQ '').PRC0900\n         AIF   ('&RC'(1,1) EQ '(').PRC0750\n         AIF   ('&RC' EQ '0').PRC0760\n         LA    R15,&RC                  LOAD RETURN CODE\n         AGO   .PRC0900\n.PRC0750 LR    R15,&RC(1)               LOAD RETURN CODE\n         AGO   .PRC0900\n.PRC0760 SLR   R15,R15                  SET ZERO RETURN CODE\n.PRC0900 ANOP\n         AIF   (NOT &#SBSU).PRC0950\n         POP   USING\n.PRC0950 AIF   (NOT &#PBPWA).PRC0965\n         AIF   (NOT &#SBSWA).PRC0955\n         AIF   (&#SBUSWA).PRC0965\n         SWA   ,\n         ENDSWA ,\n         AGO   .PRC0965\n.PRC0955 AIF   (NOT &#PBDYN).PRC0960\n#SBL&#SB#C EQU 0                        NO SWA FOR THIS SUBROUTINE\n.PRC0960 AIF   (&#SBPLMX EQ 0).PRC0965\n         PWA   TYPE=PARTIAL\n&TAG     SETC  '#SBP&#SB#C'\n&CNT     SETA  &#SBPLMX*4\n         DS    0F\n&TAG     DS    XL&CNT                   SUBROUTINE PARAMETER STORAGE\n         ENDPWA ,\n.PRC0965 AIF   (NOT &#PBLOCR).PRC0970\n&#PBNAME LOCTR ,\n.PRC0970 ANOP\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##SPSTD": {"ttr": 6916, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01Q\\x01Q\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 337, "newlines": 337, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##SPSTD &NAME,                 NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &BASEREG,                BASE REGS                      $\n               &AMODE,                  ADDRESSING MODE                $\n               &SMWA,                   STRUCTURED MACRO WORK AREA     $\n               &SWAREG,                 SWA BASE REGS                  $\n               &RECUR,                  MAX RECURSIVE CALLS            $\n               &SAVE,                   REGISTER TO SAVE               $\n               &PARMS,                  INPUT PARM LIST                $\n               &PARMMAP                 INPUT MAP\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##SPSTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##SPSTD\n.*\n.*  PURPOSE    DEFAULT MACRO USED TO FOR SUBROUTINE BLOCK PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - BROKE APART FROM BLOCK MACRO AND\n.*                            RESTRUCTURED.\n.*              9/01/88 MGG - ADDED &S AND &W GLOBAL TAGS           @C1\n.*              3/14/89 MGG - ADDED &P GLOBAL TAG                   @C2\n.*              5/08/89 MGG - &S, &W, AND &P GENERATION MOVED TO    @C3\n.*                            BLOCK MACRO.  ADDED EQU FOR &SSD.     @C3\n.*                            ADDED PARMS OPTION SUPPORT.           @C3\n.*              8/06/05 MGG - ADDED A BOTTOM OF SSD LOCTR.          @C4\n.*                            ADDED SUPPORT FOR CODEBASE OPTION.    @C4\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLC  &#BNAME(20)              BLOCK NAMES\n         GBLC  &#BSV1(20)               BLOCK SAVE PARM 1\n         GBLC  &#BSV2(20)               BLOCK SAVE PARM 2\n         GBLC  &#BSV3(20)               BLOCK SAVE PARM 3\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLC  &#PBDERR                 DYNAMIC STORAGE ERROR TAG\n         GBLB  &#PBDYN                  DYNAMIC STORAGE OPTION\n         GBLC  &#PBDYNS                 VALUE FROM DYNSIZE PARAMETER\n         GBLB  &#PBLOCR                 DO LOCATR IN PROGRAM\n         GBLB  &#PBLONG                 LONG PROGRAM OPTION\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLB  &#PBOPTS                 OPTIMIZE STORAGE\n         GBLB  &#PBPWA                  PWA OPTION\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLC  &#NOBASE                 NOCODEBASE LOCTR NAME       @C4\n         GBLA  &#SB#C                   # OF CURRENT SUBROUTINE\n         GBLA  &#SB#D                   SUB BLOCK NMBR FROM ##DEFSUB\n         GBLB  &#SBCDBS                 SUBROUTINE HAS BASE FOR CODE@C4\n         GBLB  &#SBCSTM                 CUSTOM SUBROUTINE\n         GBLB  &#SBLDBS                 LOAD BASE OPTION\n         GBLC  &#SBNM(99)               SUBROUTINE BLOCK NAMES\n         GBLA  &#SBPLMX                 MAX PL ENTRIES IN SUBROUTINE\n         GBLA  &#SBREC(99)              SUBROUTINE BLOCK RECUR + 1\n         GBLB  &#SBSU                   SAVEUSING OPTION\n         GBLB  &#SBSWA                  SWA OPTION\n         GBLB  &#SBUSWA                 USERSWA OPTION\n         GBLB  &#XAWARN                 XA WARNING MESSAGE ISSUED\n         GBLC  &SSD                     SUBROUTINE STATIC DATA TAG  @C3\n         LCLA  &CTR                     WORK COUNTER\n         LCLC  &TAG                     WORK TAGS\n         LCLC  &TAG2                    WORK TAGS\n         LCLC  &SBLOCTR                 WORK TAGS                   @C4\n.*------------------------------------------------------------------\n.*  GET OPTIONS FOR SUBROUTINE BLOCK\n.*------------------------------------------------------------------\n         ##SUBOPT &OPTIONS\n.*------------------------------------------------------------------\n.*  DO CHECKS FOR SWA\n.*------------------------------------------------------------------\n.CST7000 AIF   (NOT &#SBSWA).CST7100   SKIP IF NOSWA OPTION\n.CST7010 AIF   ('&SAVE' EQ '').CST7020\n         MNOTE 8,'SAVE= invalid if SWA option specified'\n.CST7020 AIF   (&#PBPWA).CST7030\n         MNOTE 8,'SWA option requires PWA option on program block'\n         AGO   .CST7200\n.CST7030 ANOP\n.CST7100 AIF   ('&SWAREG' EQ '').CST7110\n         MNOTE 8,'SWAREG= can not be specified unless OPTION=SWA is spe$\n               cified'\n.CST7110 ANOP\n.CST7200 ANOP\n.*------------------------------------------------------------------\n.*  DO CHECKS FOR CUSTOM SUBROUTINE BLOCK.\n.*------------------------------------------------------------------\n.CST8000 AIF   (NOT &#SBCSTM).CST9999   SKIP IF NOT CUSTOM SUBROUTIN\n.CST8010 AIF   ('&AMODE' EQ '').CST8020\n         MNOTE 8,'AMODE= invalid for custom subroutine blocks'\n.CST8020 AIF   ('&SAVE' EQ '').CST8030\n         MNOTE 8,'SAVE= invalid for custom subroutine blocks'\n.CST8030 AIF  (NOT &#SBUSWA AND NOT &#SBSU AND NOT &#SBSWA).CST8040\n         MNOTE 8,'CUSTOM must be specified alone'\n.CST8040 ANOP\n.CST9999 ANOP\n.*--------------------------------------------------------------------*\n.*  SET AND CHECK MODE\n.*--------------------------------------------------------------------*\n&#BAMODE(&#BLVL) SETC  '&AMODE'\n         AIF   ('&AMODE' EQ '' OR '&AMODE' EQ 'ANY').ANY0020\n         AIF   ('&AMODE' EQ '24' OR '&AMODE' EQ '31').ANY0020\n.ANY0010 MNOTE 8,'AMODE=&AMODE is invalid on subroutine block, keyword $\n               ignored'\n&#BAMODE(&#BLVL) SETC   ''\n.ANY0020 ANOP\n.*--------------------------------------------------------------------*\n.*  ASSUME LOADBASE OPTION IF BASEREG IS SPECIFIED.\n.*--------------------------------------------------------------------*\n&#SBPLMX SETA  0\n         AIF   ('&BASEREG' EQ '' OR &#SBLDBS).SUB0010\n         MNOTE *,'LOADBASE assumed because BASEREG= specified'\n&#SBLDBS SETB  1\n.*--------------------------------------------------------------------*\n.*  REQUIRE NAME= KEYWORD.\n.*--------------------------------------------------------------------*\n.SUB0010 AIF   ('&NAME' NE '').SUB0020\n         MNOTE 8,'BLOCK TYPE=SUBROUTINE requires NAME='\n&#BNAME(&#BLVL) SETC 'BADNAME'\n.*--------------------------------------------------------------------*\n.*  LOADBASE OPTION REQUIRES LONG OPTION ON PROGRAM BLOCK.\n.*--------------------------------------------------------------------*\n.SUB0020 AIF   (NOT &#SBLDBS OR &#PBLONG OR NOT &#SBCDBS).SUB0030   @C4\n         MNOTE 8,'LOADBASE option requires LONG option on program block$\n                if CODEBASE is in effect for subroutine.'           @C4\n.SUB0030 ANOP\n.*------------------------------------------------------------------\n.*  GENERATE SUBROUTINE DEPENDENT CODE\n.*------------------------------------------------------------------\n.SUB0100 ANOP\n.*------------------------------------------------------------------@C4\n.*  IF USING LOCTRS, SET A LOCTR FOR SUBROUTINE INSTRUCTIONS,       @C4\n.*  SSD, AND SSD BOTTOM.  THE 'NOCODEBASE' INSTRUCTION LOCTR WILL   @C4\n.*  BE USED IF THIS IS A NOCODEBASE SUBROUTINE.  IF THIS SUBROUTINE @C4\n.*  DOES HAVE A CODEBASE, USE NEW LOCTR IF LOADBASE IS SPECIFIED OR @C4\n.*  CURRENT LOCTR (PROGRAM BLOCK) IF NOLOADBASE IS SPECIFIED.       @C4\n.*  IF PROGRAM BLOCK HAS NOCODEBASE AND SUBROUTINE BLOCK HAS        @C4\n.*  CODEBASE BUT NOLOADBASE, CODE WILL HAVE TO BE PLACED AFTER THE  @C4\n.*  SUBROUTINE BLOCK MACRO TO ESTABLISH A CODE BASE.                @C4\n.*------------------------------------------------------------------@C4\n         AIF   (NOT &#PBLOCR).SUB0150                               @C4\n         AIF   (NOT &#SBCDBS).SUB0120                               @C4\n         AIF   (&#SBLDBS).SUB0130                                   @C4\n&SBLOCTR SETC  '&SYSLOC'                                            @C4\n         AGO   .SUB0140                                             @C4\n.SUB0120 ANOP                                                       @C4\n&SBLOCTR SETC  '&#NOBASE'                                           @C4\n         AGO   .SUB0140                                             @C4\n.SUB0130 ANOP                                                       @C4\n&SBLOCTR SETC  '#SBIL&#SB#C'                                        @C4\n         AGO   .SUB0140                                             @C4\n.SUB0140 ANOP                                                       @C4\n&SBLOCTR LOCTR ,                        SUBROUTINE BLOCK INST LOCTR @C4\n         SSD   TYPE=PARTIAL                                         @C4\n&SSD     EQU   *                        START OF SSD                @C3\n         ENDSSD                                                     @C4\n         SSD   TYPE=BOTTOM                                          @C4\n         ENDSSD                                                     @C4\n.SUB0150 ANOP\n.*------------------------------------------------------------------@C4\n.*  PROCESS RECUR.                                                  @C4\n.*------------------------------------------------------------------@C4\n&#SBREC(&#SB#C) SETA 1\n         AIF   ('&RECUR' EQ '').SUB0200\n         AIF   (&#PBDYN).SUB0205\n         MNOTE 8,'RECUR keyword requires DYN option on program block' 7\n.SUB0205 ANOP\n&#SBREC(&#SB#C) SETA &RECUR+1\n.SUB0200 ANOP\n.*------------------------------------------------------------------@C4\n.*  PROCESS SAVEUSING.                                              @C4\n.*------------------------------------------------------------------@C4\n         AIF   (NOT &#SBSU).SUB0210\n         PUSH  USING\n.SUB0210 ANOP\n.*------------------------------------------------------------------@C4\n.* NOSWA                                                            @C4\n.*------------------------------------------------------------------@C4\n         AIF   (&#SBSWA).SUB0220\n&NAME    DS    0H                       SUBROUTINE NAME\n         AGO   .SUB9000\n.*------------------------------------------------------------------@C4\n.* NODYN                                                            @C4\n.*------------------------------------------------------------------@C4\n.SUB0220 AIF   (&#PBDYN).SUB0225                                    @C4\n&NAME    STM   R0,R14,#SBS&#SB#C        SAVE REGISTERS\n&#BSV1(&#BLVL) SETC 'R0'\n&#BSV2(&#BLVL) SETC 'R14'\n&#BSV3(&#BLVL) SETC '#SBS&#SB#C'\n         AIF   (NOT &#SBLDBS).SUB9000\n         ##LDBS &NAME,&BASEREG,R10,FRSTLD=YES\n         AGO   .SUB9000\n.*------------------------------------------------------------------@C4\n.* DYN                                                              @C4\n.*------------------------------------------------------------------@C4\n.SUB0225 AIF   (NOT &#PBOPTS).SUB0230\n&TAG2    SETC  '&#SBNM(&#SB#C)'\n&TAG2    ##B AS,R15,#BK&#PBNDX,         DO LINKAGE                  @C4+\n               LONG=PBLONGSLGT0,BREG=R15                            @C4\n         DC    Y(#SBL&#SB#C)            LENGTH OF SWA TO OBTAIN\n         AIF   (NOT &#SBLDBS).SUB0240\n         ##LDBS *,&BASEREG,R10,FRSTLD=YES\n         AGO   .SUB0240\n.SUB0230 ANOP                                                       @C4\n&TAG     SETC  '#SBLT&#SB#C'                                        @C4\n         AIF   (NOT &#PBLOCR).SUB0232                               @C4\n         SSD                                                        @C4\n.SUB0232 ANOP                                                       @C4\n&TAG     DC    Y(#SBL&#SB#C)\n         AIF   (NOT &#PBLOCR).SUB0233                               @C4\n         ENDSSD                                                     @C4\n.SUB0233 ANOP                                                       @C4\n&TAG2    SETC  '&#SBNM(&#SB#C)'\n&TAG2    L     R15,0(,R11)              POINT R15 TO NAB (NEW SWA)\n         STM   R0,R14,4(R15)            SAVE R0 - R14\n         AIF   (NOT &#SBLDBS).SUB0235\n         ##LDBS *,&BASEREG,R10,FRSTLD=YES\n.SUB0235 LR    R11,R15                  POINT R11 TO NEW SWA\n         AH    R15,&TAG                 CALCULATE NEW NAB\n         CL    R15,#PBE&#PB#C           CHECK FOR OVERFLOW\n         ##B H,&#PBDERR,                BRANCH TO ERREXIT IF OVERFLO@C4+\n               LONG=PBLONGSLGT0,BREG=R14                            @C4\n         ST    R15,0(,R11)              STORE NEW NAB\n.SUB0240 ANOP\n&#BSV1(&#BLVL) SETC 'R0'\n&#BSV2(&#BLVL) SETC 'R14'\n&#BSV3(&#BLVL) SETC '#SBS&#SB#C'\n&TAG2    SETC  '#SBD&#SB#C'\n         AIF   ('&SWAREG' EQ '').SUB0300\n         AIF   ('&SWAREG(1)' EQ 'R11').SUB0300\n         MNOTE 8,'R11 must be the first register specified on the SWARE$\n               G= keyword'\n.SUB0300 ##LDBS &TAG2,&SWAREG,R11\n.*------------------------------------------------------------------@C4\n.SUB9000 ANOP\n.*--------------------------------------------------------------------*\n.*  IF AMODE SPECIFIED\n.*    IF SUBROUTINE BLOCK OR ERREXIT BLOCK\n.*      OR INLINE BLOCK AND AMODE IS NOT THE SAME AS PREVIOUS BLOCK\n.*--------------------------------------------------------------------*\n.AMO0000 ANOP\n&TAG     SETC  ''\n         AIF   (&#SBCSTM).AMO0350       AMODE INVALID FOR CUSTOM\n         AIF   ('&AMODE' EQ '').AMO0350\n         AIF   (&#PBXA).AMO0100\n         AIF   (&#XAWARN).AMO0350\n         MNOTE *,'AMODE ignored unless XA option specified for program $\n               block'\n&#XAWARN SETB  1                        ONLY ISSUE ONE TIME\n         AGO   .AMO0350\n.AMO0100 AIF   ('&#BAMODE(&#BLVL)' EQ 'ANY').AMO0350\n.*--------------------------------------------------------------------*\n.*      IF OPTIONS XA AND 370, GENERATE TEST FOR XA\n.*--------------------------------------------------------------------*\n         AIF   (&#SBSWA).AMO0210\n         ##SWREG R15                    SAVE WORK REGISTER\n.AMO0210 ANOP\n&TAG     SETC  '#BY&#MNDX'\n         AIF   (NOT &#PBXA OR NOT &#PB370).AMO0300\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         BZ    &TAG                     SKIP AMODE SETTING\n.*--------------------------------------------------------------------*\n.*      GENERATE CHANGE AMODE CODE\n.*--------------------------------------------------------------------*\n.AMO0300 ANOP\n         AIF   ('&#BAMODE(&#BLVL)' NE '31').AMO0310\n         L     R15,=A(&TAG+X'80000000') SWITCH TO 31                @C4\n         AGO   .AMO0320                                             @C4\n.AMO0310 L     R15,=A(&TAG)             SWITCH TO 24                @C4\n.AMO0320 BSM   R14,R15                  BIT MODE.                   @C4\n         AIF   (&#SBSWA).AMO0350\n&TAG     ##RWREG R15                    RESTORE WORK REG\n&TAG     SETC  ''\n         AGO   .AMO0350\n.AMO0330 ANOP\n&TAG     DS    0H\n&TAG     SETC  ''\n.AMO0350 ANOP\n.*--------------------------------------------------------------------*\n.*      IF SAVE= KEYWORD SPECIFIED, SAVE REGISTERS\n.*--------------------------------------------------------------------*\n         AIF   (&#SBCSTM).AMO0380       SAVE NOT VALID FOR CUSTOM\n         AIF   (&#SBSWA).AMO0380        SAVE NOT VALID FOR CUSTOM\n&#BSV1(&#BLVL) SETC '&SAVE(1)'\n&#BSV2(&#BLVL) SETC '&SAVE(2)'\n&#BSV3(&#BLVL) SETC '&SAVE(3)'\n         AIF   ('&SAVE' EQ '').AMO0380\n         AIF   (N'&SAVE NE 2).AMO0360\n&TAG     ST    &SAVE(1),&SAVE(2)       SAVE REGISTER\n         AGO   .AMO0390\n.AMO0360 AIF   (N'&SAVE NE 3).AMO0370\n&TAG     STM   &SAVE(1),&SAVE(2),&SAVE(3) SAVE REGISTERS\n         AGO   .AMO0390\n.AMO0370 MNOTE 8,'Invalid number of parameters in SAVE= keyword'\n.AMO0380 AIF   ('&TAG' EQ '').AMO0390\n&TAG     DS    0H\n.AMO0390 ANOP\n.*------------------------------------------------------------------\n.*       IF SUBROUTINE AND NO SWA, LOAD BASE REGISTER IF OPTION\n.*       LOADBASE IS IN EFFECT\n.*------------------------------------------------------------------\n         AIF   (&#SBSWA OR NOT &#SBLDBS).AMO0400\n         ##LDBS &NAME,&BASEREG,R10,FRSTLD=YES\n.AMO0400 ANOP\n.*------------------------------------------------------------------@C3\n.*       GENERATE PARAMETER LIST CODE.                              @C3\n.*------------------------------------------------------------------@C3\n         ##PRMOPT PROCESS=GENERATE,PARMS=&PARMS,PARMMAP=&PARMMAP,   @C3+\n               TYPE=SUBROUTINE                                      @C3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##ST": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00T\\x00T\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 84, "newlines": 84, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##ST  &REG,                    REGISTER TO LOAD               $\n               &FIELD,                  FIELD TO LOAD                  $\n               &WREG                    WORK REGISTER\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1989.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##ST\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##ST\n.*\n.*  PURPOSE    INTERNAL MACRO TO STORE A VALUE FROM A REGISTER.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    3/15/89 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         LCLC  &TAG                     WORK TAG\n         LCLC  &TREG                    WORK FIELD\n         AIF   ('&FIELD' NE '').X100\n         SLR   &REG,&REG                NO PARAMETER SPECIFIED\n         MEXIT\n.X100    ANOP\n.X200    AIF   (K'&FIELD GT 4).X300\n         AIF   (K'&FIELD NE 4).X210\n         AIF   ('&FIELD'(1,2) NE '*R').X300\n         AIF   ('&FIELD'(3,1) NE '1').X300\n         AIF   ('&FIELD'(4,1) LT '0').X300\n         AIF   ('&FIELD'(4,1) GT '5').X300\n&TREG    SETC  '&FIELD'(2,3)\n         ST    &REG,0(,&TREG)\n         MEXIT\n.X210    AIF   (K'&FIELD NE 3).X230\n         AIF   ('&FIELD'(1,2) NE '*R').X220\n         AIF   ('&FIELD'(3,1) LT '0').X300\n&TREG    SETC  '&FIELD'(2,2)\n         ST    &REG,0(,&TREG)\n         MEXIT\n.X220    AIF   ('&FIELD'(1,1) NE 'R').X300\n         AIF   ('&FIELD'(2,1) NE '1').X300\n         AIF   ('&FIELD'(3,1) LT '0').X300\n         AIF   ('&FIELD'(3,1) GT '5').X300\n         AIF   ('&REG' EQ '&FIELD').MEXIT\n         LR    &FIELD,&REG\n         MEXIT\n.X230    AIF   (K'&FIELD NE 2).X300\n         AIF   ('&FIELD'(1,1) NE 'R').X300\n         AIF   ('&FIELD'(2,1) LT '0').X300\n         AIF   ('&REG' EQ '&FIELD').MEXIT\n         LR    &FIELD,&REG\n         MEXIT\n.X300    AIF   ('&FIELD'(1,1) NE '*').X400\n         AIF   ('&WREG' EQ '').ERR1\n&TAG     SETC  '&FIELD'(2,K'&FIELD-1)\n         L     &WREG,&TAG\n         ST    &REG,0(,&WREG.)\n         MEXIT\n.X400    ST    &REG,&FIELD              LOAD ADDR OF PARAMETER\n         MEXIT\n.ERR1    MNOTE 8,'*ADDR form of second operand requires WREG='\n.MEXIT   MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##SUBOPT": {"ttr": 7169, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\xad\\x00\\xad\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 173, "newlines": 173, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##SUBOPT &OPTIONS,             OPTIONS                        $\n               &DEFAULT=NO              DO NOT SET DEFAULTS\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##SUBOPT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##SUBOPT\n.*\n.*  PURPOSE    INTERNAL MACRO USED AS PARSE THE SUBROUTINE STANDARD\n.*             SUBROUTINE OPTIONS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   12/18/86 MGG - BROKEN APART FROM THE BLOCK MACRO AND\n.*                            RESTRUCURED.\n.*              5/08/89 MGG - ADDED PARMS OPTION SUPPORT.           @C1\n.*              8/06/05 MGG - ADDED CODEBASE OPTION.                @C2\n.*\n.*--------------------------------------------------------------------*\n         GBLB  &#PBCDBS                 PROGRAM BLOCK CODEBASE OPTIO@C2\n         GBLB  &#SBCSTM                 CUSTOM SUBROUTINE\n         GBLB  &#SBCDBS                 CODEBASE OPTION             @C2\n         GBLB  &#SBLDBS                 LOAD BASE OPTION\n         GBLB  &#SBSU                   SAVEUSING OPTION\n         GBLB  &#SBSWA                  SWA OPTION\n         GBLB  &#SBUSWA                 USERSWA OPTION\n         GBLB  &#SDCSTM                 DEFAULT CUSTOM OPTION\n         GBLB  &#SDCDBS                 DEFAULT CODEBASE OPTION     @C2\n         GBLB  &#SDLDBS                 DEFAULT LOAD BASE OPTION\n         GBLB  &#SDSU                   DEFAULT SAVEUSING OPTION\n         GBLB  &#SDSWA                  DEFAULT SWA OPTION\n         GBLB  &#SDUSWA                 DEFAULT USERSWA OPTION\n         LCLB  &CSTM                    CUSTOM SUBROUTINE\n         LCLB  &CDBS                    CODEBASE OPTION             @C2\n         LCLB  &LDBS                    LOAD BASE OPTION\n         LCLB  &SU                      SAVEUSING OPTION\n         LCLB  &SWA                     SWA OPTION\n         LCLB  &USWA                    USERSWA OPTION\n.*------------------------------------------------------------------\n.*  IF NOT DEFAULT=YES, SET OPTIONS TO DEFAULT; OTHERWISE, RESET.   @C1\n.*------------------------------------------------------------------\n         AIF   ('&DEFAULT' EQ 'YES').SDO0050                        @C1\n&CSTM    SETB  (&#SDCSTM)               SET CUSTOM TO DEFAULT\n&CDBS    SETB  (&#SDCDBS)               SET CODEBASE DEFAULT        @C2\n&SWA     SETB  (&#SDSWA)                SET SWA TO DEFAULT\n&SU      SETB  (&#SDSU)                 SET SAVEUSING TO DEFAULT\n&USWA    SETB  (&#SDUSWA)               SET USERSWA TO DEFAULT\n&LDBS    SETB  (&#SDLDBS)               SET LOADBASE TO DEFAULT\n         ##PRMOPT PROCESS=SET_TO_SUBROUTINE_DEFAULTS,               @C1+\n               TYPE=SUBROUTINE                                      @C1\n         AGO   .SDO0100                                             @C1\n.SDO0050 ANOP                                                       @C1\n&CSTM    SETB  0                        SET NOCUSTOM                @C1\n&CDBS    SETB  (&#PBCDBS)               SET TO PROGRAM CODEBASE     @C2\n&SWA     SETB  0                        SET NOSWA                   @C1\n&SU      SETB  0                        SET NOSAVEUSING             @C1\n&USWA    SETB  0                        SET NOUSERSWA               @C1\n&LDBS    SETB  0                        SET NOLOADBASE              @C1\n         ##PRMOPT PROCESS=RESET,TYPE=SUBROUTINE SET NOPARMS         @C1\n.SDO0100 ANOP\n.*------------------------------------------------------------------\n.*  SET SUBROUTINE OPTIONS BASE ON SUBOPT\n.*------------------------------------------------------------------\n&CTR     SETA  1                        SET COUNTER TO 1\n.SDO1000 AIF   (&CTR GT N'&OPTIONS).SDO7000\n.SDO1100 AIF   ('&OPTIONS(&CTR)' NE 'CUSTOM').SDO1110\n&CSTM    SETB  1                        INDICATE CUSTOM SUBROUTINE\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1110 AIF   ('&OPTIONS(&CTR)' NE 'NOCUSTOM').SDO1120\n&CSTM    SETB  0                        INDICATE NOT CUSTOM SUB\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1120 AIF   ('&OPTIONS(&CTR)' NE 'SWA').SDO1130\n&SWA     SETB  1                        INDICATE SWA\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1130 AIF   ('&OPTIONS(&CTR)' NE 'NOSWA').SDO1140\n&SWA     SETB  0                        INDICATE NOSWA\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1140 AIF   ('&OPTIONS(&CTR)' NE 'SAVEUSING').SDO1150\n&SU      SETB  1                        INDICATE SAVEUSING\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1150 AIF   ('&OPTIONS(&CTR)' NE 'NOSAVEUSING').SDO1160\n&SU      SETB  0                        INDICATE NOSAVEUSING\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1160 AIF   ('&OPTIONS(&CTR)' NE 'USERSWA').SDO1170\n&USWA    SETB  1                        INDICATE USERSWA\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1170 AIF   ('&OPTIONS(&CTR)' NE 'NOUSERSWA').SDO1180\n&USWA    SETB  0                        INDICATE NOUSERSWA\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1180 AIF   ('&OPTIONS(&CTR)' NE '*SWA').SDO1190\n&SWA     SETB  1                        INDICATE SWA\n&SU      SETB  1                        INDICATE SAVEUSING\n&USWA    SETB  1                        INDICATE USERSWA\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1190 AIF   ('&OPTIONS(&CTR)' NE '*NOSUBOPTS').SDO1200\n&SWA     SETB  0                        INDICATE NOSWA\n&SU      SETB  0                        INDICATE NOSAVEUSING\n&USWA    SETB  0                        INDICATE NOUSERSWA\n&LDBS    SETB  0                        INDICATE NOLOADBASE\n         ##PRMOPT PROCESS=RESET,TYPE=SUBROUTINE                     @C1\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1200 AIF   ('&OPTIONS(&CTR)' NE 'LOADBASE').SDO1210\n&LDBS    SETB  1                        INDICATE LOADBASE\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1210 AIF   ('&OPTIONS(&CTR)' NE 'NOLOADBASE').SDO1220\n&LDBS    SETB  0                        INDICATE NOLOADBASE\n         AGO   .SDO1900                 CHECK NEXT OPTION\n.SDO1220 AIF   ('&OPTIONS(&CTR,1)' NE 'PARMS').SDO1230              @C1\n         ##PRMOPT PROCESS=PARSE_OPTIONS,OPTIONS=&OPTIONS(&CTR),     @C1+\n               TYPE=SUBROUTINE                                      @C1\n         AGO   .SDO1900                 CHECK NEXT OPTION           @C1\n.SDO1230 AIF   ('&OPTIONS(&CTR)' NE 'NOPARMS').SDO1240              @C1\n         ##PRMOPT PROCESS=RESET,TYPE=SUBROUTINE                     @C1\n         AGO   .SDO1900                 CHECK NEXT OPTION           @C1\n.SDO1240 AIF   ('&OPTIONS(&CTR)' NE 'CODEBASE').SDO1250             @C2\n&CDBS    SETB  1                        INDICATE CODEBASE           @C2\n         AGO   .SDO1900                 CHECK NEXT OPTION           @C2\n.SDO1250 AIF   ('&OPTIONS(&CTR)' NE 'NOCODEBASE').SDO1260           @C2\n&CDBS    SETB  0                        INDICATE NO CODEBASE        @C2\n         AGO   .SDO1900                 CHECK NEXT OPTION           @C2\n.SDO1260 ANOP                                                       @C2\n         MNOTE 8,'&OPTIONS(&CTR) is an invalid option for subroutine bl$\n               ock'\n.SDO1900 ANOP\n&CTR     SETA  &CTR+1                   INCREMENT COUNTER\n         AGO   .SDO1000                 LOOP\n.SDO7000 ANOP\n.*--------------------------------------------------------------------*\n.*  IF DEFAULT=YES SET DEFAULTS; OTHERWISE, SET ACTUAL VALUES.\n.*--------------------------------------------------------------------*\n         AIF   ('&DEFAULT' NE 'YES').SDO7010\n&#SDCSTM SETB  (&CSTM)\n&#SDCDBS SETB  (&CDBS)                                              @C2\n&#SDUSWA SETB  (&USWA)\n&#SDSU   SETB  (&SU)\n&#SDSWA  SETB  (&SWA)\n&#SDLDBS SETB  (&LDBS)\n         ##PRMOPT PROCESS=SET_SUBROUTINE_DEFAULTS,TYPE=SUBROUTINE   @C1\n         AGO   .SDO7020\n.SDO7010 ANOP\n&#SBCSTM SETB  (&CSTM)\n&#SBCDBS SETB  (&CDBS)                                              @C2\n&#SBUSWA SETB  (&USWA)\n&#SBSU   SETB  (&SU)\n&#SBSWA  SETB  (&SWA)\n&#SBLDBS SETB  (&LDBS)\n.SDO7020 ANOP\n.*--------------------------------------------------------------------*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##SWREG": {"ttr": 7173, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x000\\x000\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 48, "newlines": 48, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##SWREG &REG\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##SWREG\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##SWREG\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE CODE TO SAVE A WORK\n.*             REGISTER IN THE SMWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#PBSMWA                 TAG OF SMWA\n         AIF   ('&#PBSMWA' NE '').PRC0100\n         MNOTE 8,'SMWA= keyword if required on the program block macro $\n               to support this function'\n&NAME    DS    0H\n         MEXIT\n.PRC0100 ANOP\n&NAME    ST    &REG,&#PBSMWA            SAVE WORK REGISTER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##UCEXI": {"ttr": 7175, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x004\\x004\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 52, "newlines": 52, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##UCEXI &EXPR,&S=,&F=,&L=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##UCEXI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##UCEXI\n.*\n.*  PURPOSE    USER DEFINED CONDITON MACRO FOR EXI.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/22/86 MGG - NEW\n.*             11/03/98 MGG - EXTRACTED FROM SMPUCOND\n.*\n.*--------------------------------------------------------------------*\n.*-------------------------------------------------------------------*\n.* Define EXI condition name.  EXecute an instruction and test the\n.* resulting condition code.\n.*     FORM: (%EXI,op1,op2,cond)\n.*       EX: (%EXI,R1,(CLC,PWASTUFF,0(R3)),EQ)\n.*-------------------------------------------------------------------*\n         AIF (N'&EXPR NE 4).ERR0001\n&NAME    EXI   &EXPR(2),&EXPR(3)        Call EXI macro.\n         ##COND &EXPR(4),                                              +\n               S=&S,F=&F,L=&L\n         MEXIT\n.ERR0001 MNOTE 8,'Too many parameters in %EXI expr'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##UCL16": {"ttr": 7177, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x004\\x004\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 52, "newlines": 52, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##UCL16 &EXPR,&S=,&F=,&L=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##UCL16\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##UCL16\n.*\n.*  PURPOSE    USER DEFINED CONDITON MACRO FOR L16.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/22/86 MGG - NEW\n.*             11/03/98 MGG - EXTRACTED FROM SMPUCOND\n.*\n.*--------------------------------------------------------------------*\n.*-------------------------------------------------------------------*\n.* Define L16 user cond name.  Load a register with a half-word value\n.* and check the result of the load.\n.*     FORM: (%L16,op1,op2,cond)\n.*       EX: (%L16,R1,XYZADDR,NZ)\n.*-------------------------------------------------------------------*\n         AIF (N'&EXPR NE 4).ERR0001\n&NAME    L16   &EXPR(2),&EXPR(3)        Load address of token value.\n         ##COND &EXPR(4),                                              +\n               S=&S,F=&F,L=&L\n         MEXIT\n.ERR0001 MNOTE 8,'Incorrect number of parameters in %L16 expr'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##UCL32": {"ttr": 7179, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x004\\x004\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 52, "newlines": 52, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##UCL32 &EXPR,&S=,&F=,&L=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##UCL32\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##UCL32\n.*\n.*  PURPOSE    USER DEFINED CONDITON MACRO FOR L32.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/22/86 MGG - NEW\n.*             11/03/98 MGG - EXTRACTED FROM SMPUCOND\n.*\n.*--------------------------------------------------------------------*\n.*-------------------------------------------------------------------*\n.* Define L32 user cond name.  Load a register with a full word value\n.* and check the result of the load.\n.*     FORM: (%L32,op1,op2,cond)\n.*       EX: (%L32,R1,XYZADDR,NZ)\n.*-------------------------------------------------------------------*\n         AIF (N'&EXPR NE 4).ERR0001\n&NAME    L32   &EXPR(2),&EXPR(3)        Load address of token value.\n         ##COND &EXPR(4),                                              +\n               S=&S,F=&F,L=&L\n         MEXIT\n.ERR0001 MNOTE 8,'Incorrect number of parameters in %L32 expr'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##UCOND": {"ttr": 7181, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x10\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x008\\x008\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:10", "lines": 56, "newlines": 56, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&TAG     ##UCOND &EXPR,&S=,&F=,&L=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1989.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##UCOND\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##UCOND\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO CALL MACRO TO SUPPORT USER\n.*             DEFINED CONDITIONS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    9/13/89 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         LCLC  &UCOND                   USER CONDITION NAME\n         LCLC  &UCOND_NAME\n         LCLC  &UCOND_MACRO\n         LCLA  &X                       WORK VARIABLE\n&X       SETA  K'&EXPR(1)-1\n         AIF   (&X LT 1).ERR0001\n&UCOND   SETC  '&EXPR(1)'(2,&X)\n&UCOND_DEFINED SETC '&UCOND.__DEFINED'\n&UCOND_MACRO   SETC '&UCOND.__MACRO'\n         GBLB  &(&UCOND_DEFINED)\n         GBLC  &(&UCOND_MACRO)\n         AIF   (NOT &(&UCOND_DEFINED)).ERR0001\n&TAG     &(&UCOND_MACRO) &EXPR,S=&S,F=&F,L=&L\n         MEXIT\n.ERR0001 MNOTE 8,'Invalid or undefined user condition name: &UCOND'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##UCTRT": {"ttr": 7183, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x004\\x004\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 52, "newlines": 52, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    ##UCTRT &EXPR,&S=,&F=,&L=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##UCTRT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##UCTRT\n.*\n.*  PURPOSE    USER DEFINED CONDITON MACRO FOR TRT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/22/86 MGG - NEW\n.*             11/03/98 MGG - EXTRACTED FROM SMPUCOND\n.*\n.*--------------------------------------------------------------------*\n.*-------------------------------------------------------------------*\n.* Define TRT condition name.  Do a Translate and Test and check the\n.* result.\n.*     FORM: (%TRT,op1,cond,op2)\n.*       EX: (%TRT,PWAFIELD,NE,PSDVALID)\n.*-------------------------------------------------------------------*\n         AIF (N'&EXPR NE 4).ERR0001\n&NAME    TRT   &EXPR(2),&EXPR(4)        Do TRT instruction.\n         ##COND &EXPR(3),                                              +\n               S=&S,F=&F,L=&L\n         MEXIT\n.ERR0001 MNOTE 8,'Too many parameters in %TRT expr'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##UESTD": {"ttr": 7185, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00@\\x00@\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 64, "newlines": 64, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##UESTD\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##UESTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##UESTD\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE EPILOG FOR A STANDARD\n.*             SWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/06/87 MGG - BROKE APART FROM ENDSWA MACRO AND\n.*                            REORGANIZED.\n.*              7/25/97 JCB - ADDED SUPPORT FOR ##SECT              @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#SB#C                   SUBROUTINE BLOCK NUMBER\n         GBLB  &#SBPSWA                 PARTIAL SWA ENCOUNTERED\n         GBLC  &#PBNAME                 CSECT NAME OF PROGRAM BLOCK\n         GBLB  &#PBDYN                  PROGRAM BLOCK DYN OPTION\n         LCLA  &N\n&N       SETA  &#SB#C\n.*--------------------------------------------------------------------*\n.*  IF THIS IS THE ENDSWA FOR A TYPE=LAST SWA THEN GENERATE DS FOR\n.*  ALIGNMENT AND GENERATE SWA LENGTH TAG.\n.*--------------------------------------------------------------------*\n         AIF   (&#SBPSWA).PRC0200\n         AIF   (&#PBDYN).PRC0110\n         DS    0F ONLY INSURE FULLWORD ALIGNMENT BECAUSE OF NODYN\n         AGO   .PRC0120\n.PRC0110 DS    0D INSURE DOUBLEWORD ALIGNMENT BECAUSE OF DYN OPTION\n.PRC0120 ANOP\n#SBL&N   EQU   *-#SBD&N                 LENGTH OF SWA\n.PRC0200 ANOP\n.*--------------------------------------------------------------------*\n.*  SWITCH BACK TO CSECT.\n.*--------------------------------------------------------------------*\n&#PBNAME ##SECT ,                                                   @C1\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##UPSTD": {"ttr": 7425, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00y\\x00y\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 121, "newlines": 121, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##UPSTD &TYPE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##UPSTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##UPSTD\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE PROLOG FOR A STANDARD\n.*             SWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/06/87 MGG - NEW\n.*              5/08/89 MGG - ADDED SWA TAG.                        @C1\n.*              6/26/93 MGG - ADDED tags for saved registers.       @C2\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#SB#C                   SUBROUTINE BLOCK NUMBER\n         GBLB  &#SBSWA                  SUBROUTINE BLOCK SWA OPTION\n         GBLB  &#SBPSWA                 PARTIAL SWA EXIST\n         GBLB  &#PBDYN                  PROGRAM BLOCK DYNAMIC OPTION\n         GBLA  &#SBPLMX                 MAX PARMS IN SUBROUTINE\n         GBLA  &#SBWAMX                 MAX WORDS OF SMWA NEEDED\n         GBLC  &SWA                     SWA TAG                     @C1\n         LCLA  &N\n.*--------------------------------------------------------------------*\n.*  REQUIRE THAT SWA OPTION BE IN EFFECT TO ISSUE THIS MACRO.\n.*--------------------------------------------------------------------*\n         AIF   (&#SBSWA).PRC0010\n         MNOTE 8,'SWA option was not specified on the subroutine block $\n               macro or SWA already defined'\n.PRC0010 ANOP\n&N       SETA  &#SB#C\n.*--------------------------------------------------------------------*\n.*  IF NOT USING DYN OPTION, PLACE STORAGE FOR SWA IN PWA.\n.*--------------------------------------------------------------------*\n         AIF   (&#PBDYN).PRC0020\n         PWA   TYPE=PARTIAL\n         AIF   (&#SBPSWA).PRC0030\n#SBD&N   DS    0F                       SWA STORAGE\n         AGO   .PRC0030\n.PRC0020 ANOP\n.*--------------------------------------------------------------------*\n.*  IF USING DYN OPTION, USE SEPERATE DSECT FOR SWA.\n.*--------------------------------------------------------------------*\n#SBD&N   DSECT                          SWA DSECT\n.PRC0030 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS THE FIRST CALL FOR THIS SWA, GENERATE FIELDS THAT\n.*  GO AT START OF THE SWA.\n.*--------------------------------------------------------------------*\n         AIF   (&#SBPSWA).PRC0200\n&SWA     EQU   #SBD&N                                               @C1\n         AIF   (NOT &#PBDYN).PRC0040\n#SBN&N   DS    A                        NAB\n.PRC0040 ANOP\n#SBS&N   DS    0F                       SAVE AREA (R0-R14)\n&SWA.SWA_SAVE_AREA_R0 DS F\n&SWA.SWA_SAVE_AREA_R1 DS F\n&SWA.SWA_SAVE_AREA_R2 DS F\n&SWA.SWA_SAVE_AREA_R3 DS F\n&SWA.SWA_SAVE_AREA_R4 DS F\n&SWA.SWA_SAVE_AREA_R5 DS F\n&SWA.SWA_SAVE_AREA_R6 DS F\n&SWA.SWA_SAVE_AREA_R7 DS F\n&SWA.SWA_SAVE_AREA_R8 DS F\n&SWA.SWA_SAVE_AREA_R9 DS F\n&SWA.SWA_SAVE_AREA_R10 DS F\n&SWA.SWA_SAVE_AREA_R11 DS F\n&SWA.SWA_SAVE_AREA_R12 DS F\n&SWA.SWA_SAVE_AREA_R13 DS F\n&SWA.SWA_SAVE_AREA_R14 DS F\n&#SBPSWA SETB  1\n.PRC0200 ANOP\n.*--------------------------------------------------------------------*\n.*  IF TYPE=PARTIAL WAS SPECIFIED, EXIT.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' EQ 'PARTIAL').PRC0900\n.PRC0300 ANOP\n.*--------------------------------------------------------------------*\n.*  IF TYPE=LAST WAS SPECIFIED, GENERATE FIELDS THAT GO JUST BEFORE\n.*  USER FIELDS.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0400\n&#SBSWA  SETB  0\n&#SBPSWA SETB  0\n#SBW&N   DS    &#SBWAMX.A               SMWA\n#SBP&N   DS    &#SBPLMX.A               PARAMETER LIST STORAGE\n#SBU&N   DS    0X                       START OF USER STORAGE\n         AGO   .PRC0900\n.PRC0400 ANOP\n.*--------------------------------------------------------------------*\n.*  IT IS AN ERROR IF &TYPE IS OTHER THAN ONE OF THE ABOVE.\n.*--------------------------------------------------------------------*\n         MNOTE 8,'Invalid type &TYPE specified on SWA macro'\n.PRC0900 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##VEDSCT": {"ttr": 7428, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00=\\x00=\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 61, "newlines": 61, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##VEDSCT\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##VEDSCT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##VEDSCT\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO PROCESS VDA GENTYPE=DSECT\n.*             EPILOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*              7/25/97 JCB - Added support for ##SECT              @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__START(20)\n         GBLC  &VDA__SIZE(20)\n         GBLC  &VDA__STORAGE(20)\n         GBLC  &VDA__END(20)\n         GBLC  &VDA__CSECT\n         GBLA  &VDA__LEVEL\n&START   SETC  '&VDA__START(&VDA__LEVEL)'\n&SIZE    SETC  '&VDA__SIZE(&VDA__LEVEL)'\n&STORAGE SETC  '&VDA__STORAGE(&VDA__LEVEL)'\n&END     SETC  '&VDA__END(&VDA__LEVEL)'\n         AIF   ('&END' EQ '').PRC010\n&END     EQU   *                       End of VDA.\n.PRC010  AIF   ('&SIZE' EQ '').PRC020\n&SIZE    EQU   *-&START                Size of VDA.\n.PRC020  AIF   ('&STORAGE' EQ '').PRC030\n&STORAGE EQU   &START,*-&START,C'X'    Storage of VDA.\n.PRC030  ANOP\n         AIF   (&VDA__LEVEL NE 1).PRC9010\n&VDA__CSECT ##SECT ,                                                @C1\n.PRC9010 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##VEINLN": {"ttr": 7430, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x008\\x008\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 56, "newlines": 56, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##VEINLN\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##VEINLN\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##VEINLN\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO PROCESS VDA GENTYPE=INLINE\n.*             EPILOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__START(20)\n         GBLC  &VDA__SIZE(20)\n         GBLC  &VDA__STORAGE(20)\n         GBLC  &VDA__END(20)\n         GBLA  &VDA__LEVEL\n&START   SETC  '&VDA__START(&VDA__LEVEL)'\n&SIZE    SETC  '&VDA__SIZE(&VDA__LEVEL)'\n&STORAGE SETC  '&VDA__STORAGE(&VDA__LEVEL)'\n&END     SETC  '&VDA__END(&VDA__LEVEL)'\n         AIF   ('&END' EQ '').PRC010\n&END     EQU   *                       End of VDA.\n.PRC010  AIF   ('&SIZE' EQ '').PRC020\n&SIZE    EQU   *-&START                Size of VDA.\n.PRC020  AIF   ('&STORAGE' EQ '').PRC030\n&STORAGE EQU   &START,*-&START,C'X'    Storage of VDA.\n.PRC030  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##VOP": {"ttr": 7432, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00:\\x00:\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 58, "newlines": 58, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##VOP &TYPE,&OP\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##VOP\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##VOP\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO OVERRIDE OPCODES.\n.*             PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/08/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         AIF  ('&OP' EQ 'DC').GBLC\n         AIF  ('&OP' EQ 'DS').GBLC\n         AIF  ('&OP' EQ 'EQU').GBLC\n         MNOTE 8,'OP &OP IS NOT SUPPORTED.'\n         MEXIT\n.GBLC    GBLC  &(VDA__&OP)\n         AIF   ('&(VDA__&OP)' EQ '').MEND\n         AIF   ('&TYPE' EQ 'OVERRIDE').OVERRIDE\n         AIF   ('&TYPE' EQ 'NORMAL').NORMAL\n         MNOTE 8,'TYPE &TYPE IS NOT VALID.'\n         MEXIT\n.OVERRIDE ANOP\n##&OP    OPSYN &OP\n&OP      OPSYN\n         MEXIT\n.NORMAL  ANOP\n&OP      OPSYN ##&OP\n##&OP    OPSYN\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##VPDSCT": {"ttr": 7434, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x002\\x002\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 50, "newlines": 50, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##VPDSCT &GENTYPE=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##VPDSCT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##VPDSCT\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO PROCESS VDA GENTYPE=DSECT\n.*             PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__START(20)\n         GBLC  &VDA__ALIGN(20)\n         GBLA  &VDA__LEVEL\n&TAG     SETC  '&VDA__START(&VDA__LEVEL)'\n         AIF   (&VDA__LEVEL NE 1).PRC100\n&TAG     DSECT ,                       Start of VDA\n         AGO   .PRC200\n.PRC100  ANOP\n&TAG     DS    0&VDA__ALIGN(&VDA__LEVEL) Start of VDA\n.PRC200  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##VPINLN": {"ttr": 7436, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00-\\x00-\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 45, "newlines": 45, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##VPINLN &GENTYPE=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##VPINLN\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##VPINLN\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO PROCESS VDA GENTYPE=INLINE\n.*             PROLOG.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__START(20)\n         GBLC  &VDA__ALIGN(20)\n         GBLA  &VDA__LEVEL\n&TAG     SETC  '&VDA__START(&VDA__LEVEL)'\n&TAG     DS    0&VDA__ALIGN(&VDA__LEVEL) Start of VDA\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##WA": {"ttr": 7438, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x003\\x003\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 51, "newlines": 51, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##WA  &TYPE=PARTIAL\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##WA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##WA\n.*\n.*  PURPOSE    INTERNAL STRUCTURED MACRO USED TO START A SWA IF THERE\n.*             IS ONE OR A PWA IN OTHER CASES.  TYPE=PARTIAL IS THE\n.*             DEFAULT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/05/05 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PBPWA                 PWA OPTION.\n         GBLB  &#SBSWA                 SWA IS IN EFFECT.\n         AIF   (NOT &#PBPWA).ERRPWA\n         AIF   (&#SBSWA).SWA\n         PWA   TYPE=&TYPE\n         MEXIT\n.SWA     SWA   TYPE=&TYPE\n         MEXIT\n.ERRPWA  MNOTE 8,'PWA OPTION SHOULD BE SPECIFIED ON THE PROGRAM BLOCK M$\n               ACRO.'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##WESTD": {"ttr": 7440, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00z\\x00z\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 122, "newlines": 122, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##WESTD\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##WESTD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##WESTD\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE EPILOG FOR A STANDARD\n.*             PWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/06/87 MGG - NEW\n.*              5/08/89 MGG - CHANGED &#PBWAID TO &PWA              @C1\n.*              7/25/97 JCB - Added support for ##SECT              @C2\n.*              8/07/05 MGG - Changed to generate LTORG if this is  @C3\n.*                            not a partial PWA END.  The LTORG is  @C3\n.*                            placed in the PSD if LOCTRs are being @C3\n.*                            used.  This was put in to support     @C3\n.*                            NOCODEBASE since the default LTORG    @C3\n.*                            would be in code and not data.        @C3\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#CSF(500)               CALLSUB FROM\n         GBLA  &#CSFF(99)               FIRST FROM INDEX\n         GBLA  &#CSFT#N                 CALLSUB FROM/TO NEXT NUMBER\n         GBLA  &#CST(500)               CALLSUB TO\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLB  &#PBDSWA                 ENDPWA SHOULD DO DS\n         GBLB  &#PBDYN                  PROGRAM BLOCK DYN OPTION\n         GBLC  &#PBDYNS                 DYNSIZE KEYWORD\n         GBLB  &#PBLOCR                 ENDPWA SHOULD DO DS\n         GBLC  &#PBNAME                 CSECT NAME OF PROGRAM BLOCK\n         GBLB  &#PBPPWA                 PARTIAL PWA ENCOUNTERED\n         GBLC  &PWA                     PWA ID                      @C1\n         GBLA  &#SB#CPB                 'SUB #' OF CURRENT PROG BLK\n         GBLA  &#SB#M                   MAX SUBROUTINE NUMBER\n         GBLC  &#SBNM(99)               SUBROUTINE NAMES\n         LCLA  &CTR\n         LCLA  &N\n         LCLC  &TAG\n&N       SETA  &#PB#C\n.*--------------------------------------------------------------------*\n.*  IF THIS IS A PARTIAL PWA, JUST SWITCH BACK TO CSECT.\n.*--------------------------------------------------------------------*\n.PRC0100 AIF   (NOT &#PBPPWA).PRC0200                               @C3\n&#PBNAME ##SECT ,                                                   @C3\n         MEXIT                                                      @C3\n.*--------------------------------------------------------------------*\n.*  IF DYN OPTION IN EFFECT, RESERVE ROOM FOR SUBROUTINE WORK AREAS.\n.*--------------------------------------------------------------------*\n.PRC0200 AIF   (NOT &#PBDYN).PRC0800                                @C3\n#PBX&N   DS    0D                   EXTRA STORAGE FOR SWA'S AND PWA'S\n         AIF   ('&#PBDYNS' EQ '').PRC0300\n         AIF   ('&#PBDYNS'(1,1) EQ '-').PRC0300\n         AIF   ('&#PBDYNS'(1,1) EQ '+').PRC0300\n         DS    (&#PBDYNS)X\n         AGO   .PRC0800\n.PRC0300 ANOP\n&CTR     SETA  &#SB#CPB\n.PRC0310 AIF   (&CTR GT &#SB#M).PRC0315\n         MNOTE *,'&#SBNM(&CTR)(&CTR) first from indes is &#CSFF(&CTR)'\n&CTR     SETA  &CTR+1\n         AGO   .PRC0310\n.PRC0315 ANOP\n&CTR     SETA  &#SB#CPB\n.PRC0320 AIF   (&CTR GE &#CSFT#N).PRC0330\n         MNOTE *,'&CTR CALLSUB from &#SBNM(&#CSF(&CTR))(&#CSF(&CTR)) to$\n                &#SBNM(&#CST(&CTR))(&#CST(&CTR))'\n&CTR     SETA  &CTR+1\n         AGO   .PRC0320\n.PRC0330 ##ORGS &#SB#CPB,&#SB#CPB       DO ORGS\n         ORG   ,\n         AIF   ('&#PBDYNS' EQ '').PRC0700\n         ORG   *&#PBDYNS\n.PRC0700 DS    16F                      64 EXTRA BYTES\n.*--------------------------------------------------------------------*\n.*  GENERATE LENGTH TAG.\n.*--------------------------------------------------------------------*\n.PRC0800 DS    0D                       INSURE DOUBLEWORD ALIGNMENT\n&TAG     SETC  '&PWA.PLLEN'                                         @C1\n&TAG     EQU   *-&PWA                   LENGTH OF PWA               @C1\n.*------------------------------------------------------------------@C3\n.*  SWITCH BACK TO CSECT/RSECT.  MAKE SURE THAT THE LITERAL POOL    @C3\n.*  WILL BE WITH DATA AND NOT CODE.  GENERATE DS FOR PWA IF NEEDED. @C3\n.*------------------------------------------------------------------@C3\n&#PBNAME ##SECT ,                                                   @C3\n         AIF   (NOT &#PBLOCR).PRC0810                               @C3\n         PSD                                                        @C3\n.PRC0810 AIF   (NOT &#PBDSWA).PRC0820                               @C3\n#PBJ&N   DS    0D                       ALIGN ON DOUBLE WORD        @C3\n         DS    (&PWA.PLLEN)X            PWA STORAGE AREA            @C3\n.PRC0820 LTORG ,                                                    @C3\n         AIF   (NOT &#PBLOCR).PRC0830                               @C3\n         ENDPSD                                                     @C3\n.PRC0830 ANOP                                                       @C3\n.*------------------------------------------------------------------@C3\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##WPDC": {"ttr": 7681, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00i\\x00i\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 105, "newlines": 105, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##WPDC &TYPE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##WPDC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##WPDC\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE PROLOG FOR AN IDMS/DC\n.*             PWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/06/87 MGG - BROKE APART FROM PWA MACRO AND\n.*                            REORGANIZED.\n.*              5/08/89 MGG - CHANGED &#PBWAID TO &PWA.             @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLB  &#PBDYN                  PROGRAM BLOCK DYN OPTION\n         GBLB  &#PBPWA                  PROGRAM BLOCK PWA OPTION\n         GBLB  &#PBPPWA                 PARTIAL PWA ENCOUNTERED\n         GBLB  &#SBSWA                  SWA OPTION ON SUBROUTINE BLOCK\n         GBLA  &#PBPLMX                 MAX PARMS IN PROGRAM\n         GBLA  &#PBWAMX                 MAX WORDS OF SMWA NEEDED\n         GBLC  &PWA                     PWA ID                      @C1\n         LCLA  &N\n         LCLC  &TAG\n.*--------------------------------------------------------------------*\n.*  IF TYPE=LAST, SUPPLY SWA FOR PREVIOUS SUBROUTINE IF MISSING.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0000\n         AIF   (NOT &#SBSWA).PRC0000\n         SWA   TYPE=LAST                FINISH LAST SWA\n         ENDSWA ,\n.PRC0000 ANOP\n.*--------------------------------------------------------------------*\n.*  REQUIRE THAT PWA OPTION BE SPECIFIED FOR PROGRAM.\n.*--------------------------------------------------------------------*\n         AIF   (&#PBPWA).PRC0010\n         MNOTE 8,'PWA option should be specified on the program block m$\n               acro'\n.PRC0010 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE PWA DSECT CARD.\n.*--------------------------------------------------------------------*\n&N       SETA  &#PB#C\n&PWA     DSECT                          PWA DSECT                   @C1\n.*--------------------------------------------------------------------*\n.*  IF THIS IS THE FIRST CALL FOR THIS PWA, GENERATE DS'S FOR FIELDS\n.*  THAT GO AT THE START OF THE PWA.\n.*--------------------------------------------------------------------*\n.PRC0100 AIF   (&#PBPPWA).PRC0200\n         AIF   (NOT &#PBDYN).PRC0150\n#PBE&N   DS    A                        EOS - 64\n#PBR&N   DS    A                        RESERVED\n#PBN&N   DS    A                        NAB (FIRST SWA)\n.PRC0150 ANOP\n&#PBPPWA SETB  1\n.PRC0200 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS TYPE=PARTIAL, ALL THAT NEEDS TO BE DONE HAS BEEN DONE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' EQ 'PARTIAL').PRC0900\n.PRC0300 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS TYPE=LAST, GENERATE FIELDS FOR SMWA AND PARAMETER LIST\n.*  STORAGE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0400\n&#PBPPWA SETB  0\n#PBW&N   DS    &#PBWAMX.A               SMWA\n#PBP&N   DS    &#PBPLMX.A               PARAMETER LIST STORAGE\n#PBU&N   DS    0X                       START OF USER STORAGE\n         AGO   .PRC0900\n.PRC0400 ANOP\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS NOT ONE OF THE ABOVE THEN IT IS INVALID.\n.*--------------------------------------------------------------------*\n         MNOTE 8,'Invalid type &TYPE specified on PWA macro'\n.PRC0900 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##WPOS": {"ttr": 7684, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00j\\x00j\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 106, "newlines": 106, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##WPOS &TYPE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##WPOS\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##WPOS\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE PROLOG FOR A STANDARD\n.*             PWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/06/87 MGG - BROKE APART FROM PWA MACRO AND\n.*                            REORGANIZED.\n.*              5/08/89 MGG - CHANGED &#PBWAID TO &PWA.             @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLB  &#PBDYN                  PROGRAM BLOCK DYN OPTION\n         GBLB  &#PBPWA                  PROGRAM BLOCK PWA OPTION\n         GBLB  &#PBPPWA                 PARTIAL PWA ENCOUNTERED\n         GBLB  &#SBSWA                  SWA OPTION ON SUBROUTINE BLOCK\n         GBLA  &#PBPLMX                 MAX PARMS IN PROGRAM\n         GBLA  &#PBWAMX                 MAX WORDS OF SMWA NEEDED\n         GBLC  &PWA                     PWA ID                      @C1\n         LCLA  &N\n         LCLC  &TAG\n.*--------------------------------------------------------------------*\n.*  IF TYPE=LAST, SUPPLY SWA FOR PREVIOUS SUBROUTINE IF MISSING.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0000\n         AIF   (NOT &#SBSWA).PRC0000\n         SWA   TYPE=LAST                FINISH LAST SWA\n         ENDSWA ,\n.PRC0000 ANOP\n.*--------------------------------------------------------------------*\n.*  REQUIRE THAT PWA OPTION BE SPECIFIED FOR PROGRAM.\n.*--------------------------------------------------------------------*\n         AIF   (&#PBPWA).PRC0010\n         MNOTE 8,'PWA option should be specified on the program block m$\n               acro'\n.PRC0010 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE PWA DSECT CARD.\n.*--------------------------------------------------------------------*\n&N       SETA  &#PB#C\n&PWA DSECT                              PWA DSECT                   @C1\n.*--------------------------------------------------------------------*\n.*  IF THIS IS THE FIRST CALL FOR THIS PWA, GENERATE DS'S FOR FIELDS\n.*  THAT GO AT THE START OF THE PWA.\n.*--------------------------------------------------------------------*\n.PRC0100 AIF   (&#PBPPWA).PRC0200\n#PBS&N   DS    18F                      STANDARD OS SAVE AREA\n         AIF   (NOT &#PBDYN).PRC0150\n#PBE&N   DS    A                        EOS - 64\n#PBR&N   DS    A                        RESERVED\n#PBN&N   DS    A                        NAB (FIRST SWA)\n.PRC0150 ANOP\n&#PBPPWA SETB  1\n.PRC0200 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS TYPE=PARTIAL, ALL THAT NEEDS TO BE DONE HAS BEEN DONE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' EQ 'PARTIAL').PRC0900\n.PRC0300 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS TYPE=LAST, GENERATE FIELDS FOR SMWA AND PARAMETER LIST\n.*  STORAGE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0400\n&#PBPPWA SETB  0\n#PBW&N   DS    &#PBWAMX.A               SMWA\n#PBP&N   DS    &#PBPLMX.A               PARAMETER LIST STORAGE\n#PBU&N   DS    0X                       START OF USER STORAGE\n         AGO   .PRC0900\n.PRC0400 ANOP\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS NOT ONE OF THE ABOVE THEN IT IS INVALID.\n.*--------------------------------------------------------------------*\n         MNOTE 8,'Invalid type &TYPE specified on PWA macro'\n.PRC0900 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##WPPLI": {"ttr": 7687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x90\\x00\\x90\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 144, "newlines": 144, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##WPPLI &TYPE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##WPPLI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##WPPLI\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE PROLOG FOR A PLI\n.*             PWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/06/87 MGG - NEW\n.*              5/08/89 MGG - CHANGED &#PBWAID TO &PWA.             @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLA  &#PBPLMX                 MAX PARMS IN PROGRAM\n         GBLB  &#PBPPWA                 PARTIAL PWA ENCOUNTERED\n         GBLB  &#PBPWA                  PROGRAM BLOCK PWA OPTION\n         GBLC  &PWA                     PWA DSECT TAG               @C1\n         GBLA  &#PBWAMX                 MAX WORDS OF SMWA NEEDED\n         GBLB  &#SBSWA                  SWA OPTION ON SUBROUTINE BLOCK\n         LCLA  &N\n         LCLC  &TAG\n         LCLC  &D\n&D       SETC  '&PWA'                                               @C1\n.*--------------------------------------------------------------------*\n.*  IF TYPE=LAST, SUPPLY SWA FOR PREVIOUS SUBROUTINE IF MISSING.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0000\n         AIF   (NOT &#SBSWA).PRC0000\n         SWA   TYPE=LAST                FINISH LAST SWA\n         ENDSWA ,\n.PRC0000 ANOP\n.*--------------------------------------------------------------------*\n.*  REQUIRE THAT PWA OPTION BE SPECIFIED FOR PROGRAM.\n.*--------------------------------------------------------------------*\n         AIF   (&#PBPWA).PRC0010\n         MNOTE 8,'PWA option should be specified on the program block m$\n               acro'\n.PRC0010 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE PWA DSECT CARD.\n.*--------------------------------------------------------------------*\n&N       SETA  &#PB#C\n&PWA DSECT                              PWA DSECT                   @C1\n.*--------------------------------------------------------------------*\n.*  IF THIS IS THE FIRST CALL FOR THIS PWA, GENERATE DS'S FOR FIELDS\n.*  THAT GO AT THE START OF THE PWA.\n.*--------------------------------------------------------------------*\n.PRC0100 AIF   (&#PBPPWA).PRC0200\n&#PBPPWA SETB  1\n*=====================================================================*\n*  PL/I DYNAMIC STORAGE AREA (PL/I OPTIMIZING COMPILER)               *\n*                                                                     *\n*  MORE INFORMATION ABOUT THIS CONTROL BLOCK IS CONTAINED IN THE      *\n*  OS PL/I OPTIMIZING COMPILER: EXECUTION LOGIC.                      *\n*                                                                     *\n*=====================================================================*\n         SPACE\n&D.XF1A  DS    B                        FLAGS (FIRST BYTE)\n&D.XF1B  DS    B                        FLAGS (SECOND BYTE)\n&D.XOF   DS    H                        OFFSET\n&D.XBCH  DS    A                        BACK CHAIN\n&D.XRS1  DS    A                        NOT USED\n&D.XS14  DS    F                        SAVE AREA R14\n&D.XS15  DS    F                        SAVE AREA R15\n&D.XS0   DS    F                        SAVE AREA R0\n&D.XS1   DS    F                        SAVE AREA R1\n&D.XS2   DS    F                        SAVE AREA R2\n&D.XS3   DS    F                        SAVE AREA R3\n&D.XS4   DS    F                        SAVE AREA R4\n&D.XS5   DS    F                        SAVE AREA R5\n&D.XS6   DS    F                        SAVE AREA R6\n&D.XS7   DS    F                        SAVE AREA R7\n&D.XS8   DS    F                        SAVE AREA R8\n&D.XS9   DS    F                        SAVE AREA R9\n&D.XS10  DS    F                        SAVE AREA R10\n&D.XS11  DS    F                        SAVE AREA R11\n&D.XS12  DS    F                        SAVE AREA R12\n&D.XALWS DS    A                        ADDRESS OF LWS\n&D.XANAB DS    A                        ADDRESS OF NAB\n&D.XEPNA DS    A                        END OF PROLOG NAB\n&D.XBEC  DS    H                        BLOCK-ENABLE CELL\n&D.XCEC  DS    H                        CURRENT-ENABLE CELL\n&D.XSB   DS    A                        STATIC BACK CHAIN\n&D.XFONC DS    A                        ADDRESS OF FIRST ONCB\n&D.XCONC DS    A                        ADDRESS OF MOST RESENT ONCB\n&D.XRSV2 DS    A                        RESERVED\n&D.XRSV3 DS    A                        RESERVED\n&D.XRSV4 DS    A                        RESERVED\n&D.XAONC DS    A                        ADDRESS OF ONCELLS\n&D.XCEXQ DS    X                        SAVE AREA FOR FIRST BYTE OF TCA\n&D.XRSV5 DS    X                        RESERVED\n&D.XF2   DS    B                        FLAGS\n&D.XCT   DS    B                        CT FLAGS\n.PRC0200 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS TYPE=PARTIAL, ALL THAT NEEDS TO BE DONE HAS BEEN DONE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' EQ 'PARTIAL').PRC0900\n.PRC0300 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS TYPE=LAST, GENERATE FIELDS FOR SMWA AND PARAMETER LIST\n.*  STORAGE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0400\n&#PBPPWA SETB  0\n#PBW&N   DS    &#PBWAMX.A               SMWA\n#PBP&N   DS    &#PBPLMX.A               PARAMETER LIST STORAGE\n#PBU&N   DS    0X                       START OF USER STORAGE\n         AGO   .PRC0900\n.PRC0400 ANOP\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS NOT ONE OF THE ABOVE THEN IT IS INVALID.\n.*--------------------------------------------------------------------*\n         MNOTE 8,'Invalid type &TYPE specified on PWA macro'\n.PRC0900 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##WPSC": {"ttr": 7691, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00n\\x00n\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 110, "newlines": 110, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ##WPSC &TYPE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ##WPSC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ##WPSC\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO GENERATE PROLOG FOR A SAS/C\n.*             PWA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/98 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLA  &#PBPLMX                 MAX PARMS IN PROGRAM\n         GBLB  &#PBPPWA                 PARTIAL PWA ENCOUNTERED\n         GBLB  &#PBPWA                  PROGRAM BLOCK PWA OPTION\n         GBLC  &PWA                     PWA DSECT TAG\n         GBLA  &#PBWAMX                 MAX WORDS OF SMWA NEEDED\n         GBLB  &#SBSWA                  SWA OPTION ON SUBROUTINE BLOCK\n         LCLA  &N\n         LCLC  &TAG\n         LCLC  &D\n&D       SETC  '&PWA'\n.*--------------------------------------------------------------------*\n.*  IF TYPE=LAST, SUPPLY SWA FOR PREVIOUS SUBROUTINE IF MISSING.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0000\n         AIF   (NOT &#SBSWA).PRC0000\n         SWA   TYPE=LAST                FINISH LAST SWA\n         ENDSWA ,\n.PRC0000 ANOP\n.*--------------------------------------------------------------------*\n.*  REQUIRE THAT PWA OPTION BE SPECIFIED FOR PROGRAM.\n.*--------------------------------------------------------------------*\n         AIF   (&#PBPWA).PRC0010\n         MNOTE 8,'PWA option should be specified on the program block m$\n               acro'\n.PRC0010 ANOP\n.*--------------------------------------------------------------------*\n.*  GENERATE PWA DSECT CARD.\n.*--------------------------------------------------------------------*\n&N       SETA  &#PB#C\n&PWA DSECT                              PWA DSECT\n.*--------------------------------------------------------------------*\n.*  IF THIS IS THE FIRST CALL FOR THIS PWA, GENERATE DS'S FOR FIELDS\n.*  THAT GO AT THE START OF THE PWA.\n.*--------------------------------------------------------------------*\n.PRC0100 AIF   (&#PBPPWA).PRC0200\n&#PBPPWA SETB  1\n*=====================================================================*\n*  SAS/C DYNAMIC STORAGE AREA                                         *\n*                                                                     *\n*  MORE INFORMATION ABOUT THIS CONTROL BLOCK IS CONTAINED IN THE      *\n*  SAS/C COMPILER AND LIBRARY USER'S REFERENCE.                       *\n*                                                                     *\n*=====================================================================*\n         SPACE\n         COPY   DSA\n         SPACE\n*=== END OF COPY =====================================================*\n.PRC0200 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS TYPE=PARTIAL, ALL THAT NEEDS TO BE DONE HAS BEEN DONE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' EQ 'PARTIAL').PRC0900\n.PRC0300 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THIS IS TYPE=LAST, GENERATE FIELDS FOR SMWA AND PARAMETER LIST\n.*  STORAGE.\n.*--------------------------------------------------------------------*\n         AIF   ('&TYPE' NE 'LAST').PRC0400\n&#PBPPWA SETB  0\n#PBW&N   DS    &#PBWAMX.A               SMWA\n#PBP&N   DS    &#PBPLMX.A               PARAMETER LIST STORAGE\n#PBU&N   DS    0X                       START OF USER STORAGE\n         AGO   .PRC0900\n.PRC0400 ANOP\n.*--------------------------------------------------------------------*\n.*  IF TYPE IS NOT ONE OF THE ABOVE THEN IT IS INVALID.\n.*--------------------------------------------------------------------*\n         MNOTE 8,'Invalid type &TYPE specified on PWA macro'\n.PRC0900 ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##XEFF": {"ttr": 7694, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00>\\x00>\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 62, "newlines": 62, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&TAG     ##XEFF &NAME\n.*--------------------------------------------------------------------*\n.*\n.*  (C) Copyright 1991.  Clemson University Computer Center.\n.*\n.*  Macro:     ##XEFF\n.*\n.*  Title:     Clemson University Computer Center Structured\n.*             Programming Macros - ##XEFF\n.*\n.*  Purpose:   Internal macro used to generate the code in a module\n.*             prolog for the XEFF option of ##PPOS.\n.*\n.*  Note:      See the following document for more information on\n.*             this and other Structured Programming macros:\n.*\n.*             . Clemson University Computer Center Structured\n.*               Programming Macros User's Guide And Reference.\n.*\n.*  Activity:   2/13/91 MGG - New.\n.*              4/19/91 JCB - Minor changes before installation.\n.*\n.*--------------------------------------------------------------------*\n.*       Exit Effector Control Block.  A mapping macro exists in\n.*       SYSTEMS.CXM.SOURCE(CXMMACS).\n.*--------------------------------------------------------------------*\n         DS    0H\n         DC    CL4'XEFF'                Sanity check ID\n         DC    CL8'&NAME'               Name of exit\n         DC    Y(##XEFF_STM_&SYSNDX-&TAG) Offset that is used by\n*                                         XEFF to calculate where\n*                                         it should branch to in\n*                                         either the original module\n*                                         or replacement.\n&TAG     STM   R14,R12,12(R13)          Save registers.\n         L     R1,16                    Point to CVT.\n         ICM   R1,B'0111',205(R1)       Point to UVT.\n         BZ    ##XEFF_RESTORE_&SYSNDX   Don't call XEFF if zero.\n         ICM   R1,B'1111',4(R1)         Load address of XEFF.\n.*       ICM   R1,B'1111',=V(CXMEXEFF)  << Testing >>\n         BNZR  R1                       Call XEFF if not zero.\n##XEFF_RESTORE_&SYSNDX DS 0H\n         L     R1,24(,R13)              Restore R1.\n##XEFF_STM_&SYSNDX     DS 0H            Place where XEFF returns.\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE858": {"ttr": 7696, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04S\\x009\\x01\\x110_\\x01\\x110_\\x01C\\x00\\x08\\x00\\x08\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf3@@@'", "ispf": {"version": "04.83", "flags": 0, "createdate": "2011-11-01T00:00:00", "modifydate": "2011-11-01T01:43:39", "lines": 8, "newlines": 8, "modlines": 0, "user": "CBT-483"}, "text": "//***FILE 858 is from Jim Blalock and contains the Clemson          *   FILE 858\n//*           University Structured Macros.  These are extremely    *   FILE 858\n//*           useful for many purposes, including the Clemson       *   FILE 858\n//*           University Service Processors, which are on           *   FILE 858\n//*           File 859.                                             *   FILE 858\n//*                                                                 *   FILE 858\n//*       email:  Jim Blalock <carey@clemson.edu>                   *   FILE 858\n//*                                                                 *   FILE 858\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLOCK": {"ttr": 7937, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01m\\x01m\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 365, "newlines": 365, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         BLOCK &NAME=,                  NAME OF BLOCK                  $\n               &AMODE=,                 ADDRESSING MODE                $\n               &BASEREG=,               BASE REGS                      $\n               &CPYRGHT=,               COPYRIGHT NOTICE               $\n               &DYNERR=,                DYNAMIC STORAGE ERROR EXIT     $\n               &DYNSIZE=,               SIZE OF DYNAMIC STORAGE        $\n               &EXPMAC=,                MACRO USED TO EXPAND THE BLOCK $\n               &OPTIONS=,               OPTIONS                        $\n               &ENVIRON=,               SETS DEFAULT EXPANSION MACROS  $\n               &PARMS=,                 INPUT PARAMETERS            @C1$\n               &PARMMAP=,               INPUT PARAMETER MAPPING     @C1$\n               &PL=,                    DEFAULT PL FOR PLIST        @C1$\n               &PWAREG=,                PWA REGS                       $\n               &PWASP=,                 PROGRAM WORK AREA SUB POOL     $\n               &RECUR=,                 MAX RECURSIVE CALLS            $\n               &RMODE=,                 RESIDENCE MODE                 $\n               &R1SAVE=,                PARM SAVE REGISTER             $\n               &SAVE=,                  REGISTER TO SAVE               $\n               &SMWA=,                  STRUCTURED MACRO WORK AREA     $\n               &SUBOPTS=,               DEFAULT SUBROUTINE OPTIONS     $\n               &SVAREA=,                SAVE AREA TAG NAME             $\n               &SWAREG=,                SWA BASE REGS                  $\n               &TYPE=INLINE             BLOCK TYPE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      BLOCK\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - BLOCK\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START A BLOCK STRUCTURE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 MGG - NEW\n.*             11/10/83 MGG - ADDED BR14 OPTION TO PROGRAM BLOCK\n.*             04/26/84 MGG - ADDED CUSTOM SUBROUTINE SUPPORT\n.*             10/22/84 MGG - FIXED &CPYRGHT KEYWORD\n.*              4/30/85 MGG - PUT IN RESTRICTION THAT IF AN INLINE\n.*                            BLOCK CONTAINED WITHIN A SUBROUTINE\n.*                            BLOCK SPECIFIES AMODE 24 OR 31, THEN\n.*                            THE SUBROUTINE BLOCK MUST ALSO SPECIFY\n.*                            AMODE 24 OR 31.  THIS RESTRICTION\n.*                            SHOULD BE REMOVED WHEN A WAY TO SAVE\n.*                            THE AMODE AT ENTRY TO THE SUBROUTINE\n.*                            IS ESTABLISHED.\n.*              6/27/85 MGG - PUT IN SUPPORT FOR VL OPTION AND\n.*                            PL KEYWORD OPTION\n.*              7/13/85 MGG - PUT IN DYNAMIC STORAGE SUPPORT\n.*              1/22/86 MGG - ADDED OPTION LOCTR\n.*              2/14/86 MGG - ADDED LONG OPTION\n.*                            SUBOPTS KEYWORD\n.*                            LOADBASE SUBROUTINE OPTION\n.*                            BASEREG KEYWORD ON SUBROUTINE BLOCK\n.*                            AUTOMATIC CLOSE SWA SUPPORT\n.*              9/10/86 MGG - ADDED NORENT PWA SUPPORT\n.*             12/15/86 MGG - MAJOR REVISION AND RESTRUCTURE\n.*                            REMOVED @CN\n.*              4/28/89 MGG - ADDED PARMS AND PARMMAP KEYWORDS.     @C1\n.*              5/08/89 MGG - ADDED VARIOUS NEW GLOBAL VARIABLES.   @C2\n.*              8/11/05 MGG - SET NOCODEBASE RELATED VARIABLES TO   @C3\n.*                            A DEFAULT THAT IS COMPATABLE WITH     @C3\n.*                            ENVIRONMENTS THAT HAVE NOT BEEN       @C3\n.*                            CHANGED TO SUPPORT IT.                @C3\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BMLVL(20)              BLOCK STRUCTURAL LEVEL\n         GBLC  &#BNAME(20)              BLOCK NAMES\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLC  &#BPL1(20)               PL KEYWORD PARAMETER 1\n         GBLC  &#BPL2(20)               PL KEYWORD PARAMETER 2\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         GBLA  &#CSFT#N                 CALLSUB FROM/TO NEXT NUMBER\n         GBLC  &#EPMAC                  ERREXIT BLOCK PROLOG MACRO NAME\n         GBLC  &#IPMAC                  INLINE BLOCK PROLOG MACRO NAME\n         GBLA  &#MLVL                   CURRENT STRUCTURAL LEVEL\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#PB#C                   # OF CURRENT PROGRAM BLOCK\n         GBLB  &#PBCDBS                 CODE BASE OPTION            @C3\n         GBLC  &#NOBASE                 NOCODEBASE LOCTR NAME       @C3\n         GBLB  &#PBENC                  PROGRAM BLOCK ENCOUNTERED\n         GBLC  &#PBNAME                 PROGRAM BLOCK NAME\n         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX\n         GBLA  &#PBPLMX                 MAX PL ENTRIES IN PROGRAM\n         GBLA  &#PBWAMX                 MAX SMWA IN PROGRAM\n         GBLC  &#PPMAC                  PROGRAM BLOCK PROLOG MACRO NAME\n         GBLA  &#SB#C                   # OF CURRENT SUBROUTINE\n         GBLA  &#SB#CPB                 'SUB #' OF CURRENT PROG BLK\n         GBLB  &#SBSWA                  SWA HAS NOT BEEN ENDED      @C2\n         GBLA  &#SB#D                   SUB BLOCK NMBR FROM ##DEFSUB\n         GBLA  &#SBPLMX                 MAX PL ENTRIES IN SUBROUTINE\n         GBLC  &#SPMAC                  SUBROUTINE PROLOG MACRO\n         GBLC  &PWA                     PWA ID                      @C2\n         GBLC  &PSD                     PSD ID                      @C2\n         GBLC  &PPL                     PPL ID                      @C2\n         GBLC  &SWA                     SWA ID                      @C2\n         GBLC  &SSD                     SSD ID                      @C2\n         GBLC  &SPL                     SPL ID                      @C2\n         GBLC  &W                       SWA ID                      @C2\n         GBLC  &S                       SSD ID                      @C2\n         GBLC  &P                       SPL ID                      @C2\n         LCLC  &MAC                     WORK FIELD\n.*--------------------------------------------------------------------*\n.*  DO HOUSEKEEPING THAT APPLIES TO ALL BLOCKS.\n.*--------------------------------------------------------------------*\n         AIF   (&#BLVL GE 20).ERR0001   CAN ONLY BE NESTED 20 LEVELS\n&#BLVL   SETA  &#BLVL+1                 ADD ONE TO BLOCK LEVEL\n&#MLVL   SETA  &#MLVL+1                 ADD ONE TO STRUCTURAL LEVEL\n&#MNDX   SETA  &#MNDX+1                 ADD ONE TO TAG INDEX\n&#BNAME(&#BLVL) SETC '&NAME'            SAVE NAME\n&#BNDX(&#BLVL)  SETA &#MNDX             SAVE TAG INDEX\n&#BMLVL(&#BLVL) SETA &#MLVL             SAVE STRUCTURAL LEVEL FOR BLOCK\n&#BTYPE(&#BLVL) SETC '&TYPE'            SET TYPE\n&#BPL1(&#BLVL)  SETC '&PL(1)'           SAVE PL PARAMETER 1\n&#BPL2(&#BLVL)  SETC '&PL(2)'           SAVE PL PARAMETER 2\n         AIF   (N'&PL LE 2).PRC0000\n         MNOTE 8,'Too many parameters specified on PL keyword'\n.*====================================================================*\n.*  TYPE=INLINE.\n.*====================================================================*\n.PRC0000 AIF   ('&TYPE' NE 'INLINE').PRC0100\n.*--------------------------------------------------------------------*\n.*  INLINE BLOCKS MUST NOT BE AT LEVEL 0.\n.*--------------------------------------------------------------------*\n         AIF   (&#BLVL NE 1).PRC0010\n         MNOTE 8,'INLINE BLOCK must be contained within PROGRAM, SUBROU$\n               TINE, or ERREXIT BLOCK'\n.PRC0010 ANOP\n.*--------------------------------------------------------------------*\n.*  DISPLAY ERRORS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &SUBOPTS,SUBOPTS         DEFAULT SUBROUTINE OPTIONS\n         ##IGMSG &BASEREG,BASEREG         BASE REGS\n         ##IGMSG &PWAREG,PWAREG           PWA REGS\n         ##IGMSG &SVAREA,SVAREA           SAVE AREA TAG NAME\n         ##IGMSG &CPYRGHT,CPYRGHT         COPYRIGHT NOTICE\n         ##IGMSG &RMODE,RMODE             RESIDENCE MODE\n         ##IGMSG &PARMS,PARMS             INPUT PARMS               @C1\n         ##IGMSG &PARMMAP,PARMMAP         INPUT PARAMETER MAPPING   @C1\n         ##IGMSG &R1SAVE,R1SAVE           PARM SAVE REGISTER\n         ##IGMSG &SMWA,SMWA               STRUCTURED MACRO WORK AREA\n         ##IGMSG &DYNSIZE,DYNSIZE         SIZE OF DYNAMIC STORAGE\n         ##IGMSG &DYNERR,DYNERR           DYNAMIC STORAGE ERROR EXIT\n         ##IGMSG &SWAREG,SWAREG           SWA BASE REGS\n         ##IGMSG &RECUR,RECUR             MAX RECURSIVE CALLS\n         ##IGMSG &PWASP,PWASP             PROGRAM WORK AREA SUB POOL\n         ##IGMSG &ENVIRON,ENVIRON         DEFAULT PROLOG/EPILOG MACROS\n.*--------------------------------------------------------------------*\n.*  ISSUE MACRO TO GENERATE CODE FOR BLOCK.\n.*--------------------------------------------------------------------*\n&MAC     SETC  '&#IPMAC'\n         AIF   ('&EXPMAC' EQ '').PRC0050\n&MAC     SETC  '&EXPMAC'\n.PRC0050 ANOP\n         &MAC  &NAME,                   NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &AMODE,                  ADDRESSING MODE                $\n               &SAVE                    REGISTER TO SAVE\n         AGO   .EXIT\n.*====================================================================*\n.*  TYPE=PROGRAM.\n.*====================================================================*\n.PRC0100 AIF   ('&TYPE' NE 'PROGRAM').PRC0200\n.*--------------------------------------------------------------------*\n.*  PROGRAM BLOCKS MUST NOT BE AT LEVEL 0.\n.*--------------------------------------------------------------------*\n         AIF   (&#BLVL EQ 1).PRC0110    PROGRAM BLOCK MUST BE LVL=1\n         MNOTE 8,'PROGRAM BLOCK must be at block nesting level 1'\n.PRC0110 ANOP\n         AIF   ('&#BNAME(&#BLVL)' NE '').PRC0115                    @C2\n         MNOTE 8,'PROGRAM BLOCK requires NAME keyword'              @C2\n&#BNAME(&#BLVL) SETC '#1$&SYSNDX'                                   @C2\n.PRC0115 ANOP                                                       @C2\n.*--------------------------------------------------------------------*\n.*  DO HOUSEKEEPING.\n.*--------------------------------------------------------------------*\n&#PB#C   SETA  &#PB#C+1                 SET PROGRAM BLOCK NUMBER\n&#PBENC  SETB  1                        INDICATE PGM BLOCK ENCOUNTERED\n         ##DEFSUB &#BNAME(&#BLVL)       DEFINE PROGRAM BLOCK NAME\n&#SB#C   SETA  &#SB#D                   SET CURRENT BLOCK NUMBER\n&#SB#CPB SETA  &#SB#D                   SET BLOCK NUMBER OF CURRENT PGM\n&#CSFT#N SETA  1                        RESET FROM TO ARRAY INDEX\n&#PBPLMX SETA  0                        RESET MAXIMUM PARAMETER LIST\n&#PBNAME SETC  '&#BNAME(&#BLVL)'        SET PROGRAM BLOCK NAME\n&#PBNDX  SETA  &#MNDX                   SET PROGRAM BLOCK INDEX\n&#PBWAMX SETA  0                        RESET MAX SMWA IN PROGRAM\n&PWA     SETC  'PWA&#PB#C._'            SET PWA TAG                 @C2\n&PSD     SETC  'PSD&#PB#C._'            SET PSD TAG                 @C2\n&PPL     SETC  'PPL&#PB#C._'            SET PPL TAG                 @C2\n&#PBCDBS SETB  1                        CODEBASE ON FOR COMPATIBILIT@C3\n&#NOBASE SETC  '#NBIL&#PB#C'            NOCODEBASE LOCTR NAME DEFAUL@C3\n.*--------------------------------------------------------------------*\n.*  DISPLAY ERRORS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &SWAREG,SWAREG           SWA BASE REGS\n         ##IGMSG &RECUR,RECUR             MAX RECURSIVE CALLS\n         ##IGMSG &SAVE,SAVE               REGISTER TO SAVE\n.*--------------------------------------------------------------------*\n.*  SET EXPANSION MACRO NAMES.\n.*--------------------------------------------------------------------*\n.PRC0120 AIF   ('&ENVIRON' EQ '').PRC0130\n         AIF   (K'&ENVIRON LE 5).PRC0125\n         MNOTE 8,'ENVIRON must be less than 5 alphanumeric characters'\n         AGO   .PRC0130\n.PRC0125 ##$&ENVIRON ,\n         AGO   .PRC0140\n.PRC0130 ##$OS    ,\n.PRC0140 ANOP\n.*--------------------------------------------------------------------*\n.*  ISSUE MACRO TO GENERATE CODE FOR BLOCK.\n.*--------------------------------------------------------------------*\n&MAC     SETC  '&#PPMAC'\n         AIF   ('&EXPMAC' EQ '').PRC0150\n&MAC     SETC  '&EXPMAC'\n.PRC0150 ANOP\n         &MAC  &#BNAME(&#BLVL),         NAME OF BLOCK               @C2$\n               &OPTIONS,                OPTIONS                        $\n               &SUBOPTS,                DEFAULT SUBROUTINE OPTIONS     $\n               &BASEREG,                BASE REGS                      $\n               &PWAREG,                 PWA REGS                       $\n               &SVAREA,                 SAVE AREA TAG NAME             $\n               &CPYRGHT,                COPYRIGHT NOTICE               $\n               &AMODE,                  ADDRESSING MODE                $\n               &RMODE,                  RESIDENCE MODE                 $\n               &R1SAVE,                 PARM SAVE REGISTER             $\n               &SMWA,                   STRUCTURED MACRO WORK AREA     $\n               &DYNSIZE,                SIZE OF DYNAMIC STORAGE        $\n               &DYNERR,                 DYNAMIC STORAGE ERROR EXIT     $\n               &PWASP,                  PROGRAM WORK AREA SUB POOL  @C1$\n               &PARMS,                  INPUT PARAMETERS            @C1$\n               &PARMMAP                 INPUT PARAMETER MAPPING     @C1\n         AGO   .EXIT\n.*====================================================================*\n.*  TYPE=SUBROUTINE.\n.*====================================================================*\n.PRC0200 AIF   ('&TYPE' NE 'SUBROUTINE').PRC0300\n.*--------------------------------------------------------------------*\n.*  SUBROUTINE BLOCKS MUST BE AT BLOCK LEVEL 0.\n.*--------------------------------------------------------------------*\n         AIF   (&#BLVL EQ 1 AND &#PBENC).PRC0210\n         MNOTE 8,'SUBROUTINE BLOCK must follow ENDBLK for PROGRAM BLOCK$\n               and be at block level zero'\n.PRC0210 ANOP\n         AIF   ('&#BNAME(&#BLVL)' NE '').PRC0220                    @C2\n         MNOTE 8,'SUBROUTINE BLOCK requires NAME keyword'           @C2\n&#BNAME(&#BLVL) SETC '#1$&SYSNDX'                                   @C2\n.PRC0220 ANOP                                                       @C2\n         AIF   (NOT &#SBSWA).PRC0230                                @C2\n         SWA   TYPE=LAST                SUPPLY MISSING SWA          @C2\n         ENDSWA ,                                                   @C2\n.PRC0230 ANOP                                                       @C2\n         ##DEFSUB &#BNAME(&#BLVL)                                   @C2\n&#SB#C   SETA  &#SB#D                                               @C2\n&W       SETC  'SWA&#SB#C._'                                        @C2\n&S       SETC  'SSD&#SB#C._'                                        @C2\n&P       SETC  'SPL&#SB#C._'                                        @C2\n&SWA     SETC  '&W'                     SET SWA TAG                 @C2\n&SSD     SETC  '&S'                     SET SSD TAG                 @C2\n&SPL     SETC  '&P'                     SET SPL TAG                 @C2\n.*--------------------------------------------------------------------*\n.*  DISPLAY ERRORS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &SUBOPTS,SUBOPTS         DEFAULT SUBROUTINE OPTIONS\n         ##IGMSG &PWAREG,PWAREG           PWA REGS\n         ##IGMSG &SVAREA,SVAREA           SAVE AREA TAG NAME\n         ##IGMSG &CPYRGHT,CPYRGHT         COPYRIGHT NOTICE\n         ##IGMSG &RMODE,RMODE             RESIDENCE MODE\n         ##IGMSG &R1SAVE,R1SAVE           PARM SAVE REGISTER\n         ##IGMSG &SMWA,SMWA               STRUCTURED MACRO WORK AREA\n         ##IGMSG &DYNSIZE,DYNSIZE         SIZE OF DYNAMIC STORAGE\n         ##IGMSG &DYNERR,DYNERR           DYNAMIC STORAGE ERROR EXIT\n         ##IGMSG &PWASP,PWASP             PROGRAM WORK AREA SUB POOL\n         ##IGMSG &ENVIRON,ENVIRON         ENVIRONMENT\n.*--------------------------------------------------------------------*\n.*  ISSUE MACRO TO GENERATE CODE FOR BLOCK.\n.*--------------------------------------------------------------------*\n&MAC     SETC  '&#SPMAC'\n         AIF   ('&EXPMAC' EQ '').PRC0250\n&MAC     SETC  '&EXPMAC'\n.PRC0250 ANOP\n         &MAC  &#BNAME(&#BLVL),         NAME OF BLOCK               @C2$\n               &OPTIONS,                OPTIONS                        $\n               &BASEREG,                BASE REGS                      $\n               &AMODE,                  ADDRESSING MODE                $\n               &SMWA,                   STRUCTURED MACRO WORK AREA     $\n               &SWAREG,                 SWA BASE REGS                  $\n               &RECUR,                  MAX RECURSIVE CALLS            $\n               &SAVE,                   REGISTER TO SAVE            @C1$\n               &PARMS,                  INPUT PARAMETERS            @C1$\n               &PARMMAP                 INPUT PARAMETER MAPPING     @C1\n         AGO   .EXIT\n.*====================================================================*\n.*  TYPE=ERREXIT.\n.*====================================================================*\n.PRC0300 AIF   ('&TYPE' NE 'ERREXIT').ERR0002\n.*--------------------------------------------------------------------*\n.*  IF ERREXIT MUST BE AT BLOCK LEVEL 0\n.*--------------------------------------------------------------------*\n         AIF   (&#BLVL EQ 1 AND &#PBENC).PRC0310\n         MNOTE 8,'ERREXIT BLOCK must follow ENDBLK for PROGRAM BLOCK an$\n               d be at block level zero'\n.PRC0310 ANOP\n.*--------------------------------------------------------------------*\n.*  DISPLAY ERRORS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n         ##IGMSG &SUBOPTS,SUBOPTS         DEFAULT SUBROUTINE OPTIONS\n         ##IGMSG &BASEREG,BASEREG         BASE REGS\n         ##IGMSG &PWAREG,PWAREG           PWA REGS\n         ##IGMSG &SVAREA,SVAREA           SAVE AREA TAG NAME\n         ##IGMSG &CPYRGHT,CPYRGHT         COPYRIGHT NOTICE\n         ##IGMSG &RMODE,RMODE             RESIDENCE MODE\n         ##IGMSG &R1SAVE,R1SAVE           PARM SAVE REGISTER\n         ##IGMSG &SMWA,SMWA               STRUCTURED MACRO WORK AREA\n         ##IGMSG &DYNSIZE,DYNSIZE         SIZE OF DYNAMIC STORAGE\n         ##IGMSG &DYNERR,DYNERR           DYNAMIC STORAGE ERROR EXIT\n         ##IGMSG &SWAREG,SWAREG           SWA BASE REGS\n         ##IGMSG &RECUR,RECUR             MAX RECURSIVE CALLS\n         ##IGMSG &PWASP,PWASP             PROGRAM WORK AREA SUB POOL\n         ##IGMSG &ENVIRON,ENVIRON         DEFAULT PROLOG/EPILOG MACROS\n         ##IGMSG &PARMS,PARMS             INPUT PARMS               @C1\n         ##IGMSG &PARMMAP,PARMMAP         INPUT PARAMETER MAPPING   @C1\n.*--------------------------------------------------------------------*\n.*  ISSUE MACRO TO GENERATE CODE FOR BLOCK.\n.*--------------------------------------------------------------------*\n&MAC     SETC  '&#EPMAC'\n         AIF   ('&EXPMAC' EQ '').PRC0350\n&MAC     SETC  '&EXPMAC'\n.PRC0350 ANOP\n         &MAC  &NAME,                   NAME OF BLOCK                  $\n               &OPTIONS,                OPTIONS                        $\n               &BASEREG,                BASE REGS                      $\n               &AMODE,                  ADDRESSING MODE                $\n               &SAVE                    REGISTER TO SAVE\n         AGO   .EXIT\n.*--------------------------------------------------------------------*\n.*  ERRORS\n.*--------------------------------------------------------------------*\n.ERR0001 MNOTE 8,'Maximum nesting level for blocks is 20'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'Invalid BLOCK type &TYPE'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CALLCASE": {"ttr": 7944, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\xf1\\x00\\xf1\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 241, "newlines": 241, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         CALLCASE &P1,                  SEE SYNTAX BELOW               +\n               &REG=,                   CASE REGISTER                  +\n               &PL=                     PARAMETER LIST STORAGE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      CALLCASE\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - CALLCASE\n.*\n.*             CALLCASE REG=R2-R12,\u00ddUSESYMBOLS,\u00a8\n.*                  (SEE (A))\n.*                  \u00ddOTHER,subname|(ERREXIT\u00dd,\u00ddname\u00a8\u00dd,code\u00a8)\u00a8\n.*                  \u00dd,(PARMLIST..)\u00dd,VL|NOVL\u00a8\u00a8|\u00dd,PL=pl\u00a8\n.*\n.*        (A)  When USESYMBOLS is specified, this is a list of\n.*             subroutine names whose case number is stored in a\n.*             GBLA symbol by the same name.\n.*\n.*             Otherwise, this is a list of one or more case\n.*             numbers followed by the name of the subroutine\n.*             to call followed by more case numbers followed\n.*             by the subroutine name and so on. If a name is\n.*             specifed without a preceeding number, it is\n.*             assigned a case of one more than the last number\n.*             assigned.  If no number is supplied before the\n.*             first name it is assigned case 0.  A case number\n.*             can only be assigned to one subroutine.\n.*\n.*             EX: CALLCASE REG=R2,\n.*                    1,5,2,SUBA,\n.*                    4,3,SUBB,\n.*                    7,SUBC,SUBD,SUBE,\n.*                    OTHER,SUBERR,\n.*                    (x,y),VL\n.*\n.*             EX: CALLCASE REG=R3,USESYMBOLS,\n.*                    FI_OPEN,FI_TERMINATE,FI_READLINE,\n.*                    OTHER,(ERREXIT,,16)\n.*\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO CALL ONE OF A LIST OF\n.*             SUBROUTINE BLOCKS BASED ON A CASE NUMBER.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   08/08/05 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         LCLA  &CTR\n         LCLA  &CTRPARM\n         LCLA  &C#INROW\n         LCLA  &LASTC#\n         LCLA  &MAXC#\n         LCLC  &CASESUB(100)\n         LCLA  &OTHRCTR\n         LCLC  &VL\n         LCLC  &TAGTBL\n         LCLC  &TAGOTHR\n         LCLC  &TAGBASR\n&TAGTBL  SETC  'CALLCASE_&SYSNDX.__ADDRESS_TABLE'\n&TAGOTHR SETC  'CALLCASE_&SYSNDX.__OTHER'\n&TAGBASR SETC  'CALLCASE_&SYSNDX.__BASR'\n.*\n.* Loop for parsing when USESYMBOLS is specified.\n.*\n         AIF   ('&P1' NE 'USESYMBOLS').L1START\n&CTR     SETA  1\n.L0START AGO   .L0INC\n.L0TOP   AIF   ('&SYSLIST(&CTR)' EQ 'OTHER').OTHER\n         AIF   ('&SYSLIST(&CTR)' EQ '').ERRNULL\n         AIF   ('&SYSLIST(&CTR)'(1,1) EQ '(').PARMS\n         GBLA  &(&SYSLIST(&CTR))\n&LASTC#  SETA  &(&SYSLIST(&CTR))\n         AIF   (&LASTC# LT 0).ERRNEGC\n         AIF   ('&CASESUB(&LASTC#+1)' NE '').L0ERDUP\n&CASESUB(&LASTC#+1) SETC '&SYSLIST(&CTR)'\n         AIF   (&LASTC# LE &MAXC#).L0INC\n&MAXC#   SETA  &LASTC#\n         AGO   .L0INC\n.L0ERDUP MNOTE 8,'Case number &LASTC#, supplied by &&&SYSLIST(&CTR), ha+\n               s already been assigned.'\n.L0INC   ANOP\n&CTR     SETA  &CTR+1\n         AIF   (&CTR LE N'&SYSLIST).L0TOP\n.*\n.* Loops for parsing when USESYMBOLS is NOT specified.\n.*\n.L1START ANOP\n&LASTC#  SETA  -1\n         AGO   .L1INC\n.L1TOP   AIF   (T'&SYSLIST(&CTR) EQ 'N').L1NUM\n         AIF   ('&SYSLIST(&CTR)' EQ 'OTHER').OTHER\n         AIF   ('&SYSLIST(&CTR)' EQ '').ERRNULL\n         AIF   ('&SYSLIST(&CTR)'(1,1) EQ '(').PARMS\n         AIF   (&C#INROW GT 0).L2TOP\n&LASTC#  SETA  &LASTC#+1\n         AGO   .L2SET\n.*\n.L2TOP   ANOP\n&LASTC#  SETA  &SYSLIST(&CTR-&C#INROW)\n.L2SET   AIF   (&LASTC# LT 0).ERRNEGC\n         AIF   ('&CASESUB(&LASTC#+1)' NE '').L2ERDUP\n&CASESUB(&LASTC#+1) SETC '&SYSLIST(&CTR)'\n         AIF   (&LASTC# LE &MAXC#).L2INC\n&MAXC#   SETA  &LASTC#\n         AGO   .L2INC\n.L2ERDUP MNOTE 8,'Case number &LASTC# has already been assigned.'\n.L2INC   ANOP\n&C#INROW SETA  &C#INROW-1\n         AIF   (&C#INROW GT 0).L2TOP\n&C#INROW SETA  0\n         AGO   .L1INC\n.*\n.L1NUM   ANOP\n&C#INROW SETA  &C#INROW+1\n.L1INC   ANOP\n&CTR     SETA  &CTR+1\n         AIF   (&CTR LE N'&SYSLIST).L1TOP\n         AGO   .PRSDONE\n.*\n.* Parse OTHER\n.*\n.OTHER   AIF   (&CTR GE N'&SYSLIST).ERRMISO\n&CTR     SETA  &CTR+1\n         AIF   ('&SYSLIST(&CTR)' EQ '').ERRNULL\n         AIF   ('&SYSLIST(&CTR,1)' EQ 'ERREXIT').CHKERRX\n         AIF   ('&SYSLIST(&CTR)'(1,1) EQ '(').ERRMISO\n         AGO   .SETOTHR\n.CHKERRX AIF   (N'&SYSLIST(&CTR) GT 3).ERRERRX\n.SETOTHR ANOP\n&OTHRCTR SETA  &CTR\n         AIF   (&CTR GE N'&SYSLIST).PRSDONE\n&CTR     SETA  &CTR+1\n         AIF   ('&SYSLIST(&CTR)' EQ '').ERRNULL\n         AIF   ('&SYSLIST(&CTR)'(1,1) NE '(').ERRNEXP\n         AGO   .PARMS\n.*\n.* Parse and process parms.\n.*\n.PARMS   ANOP\n&CTRPARM SETA  &CTR\n         AIF   (&CTR GE N'&SYSLIST).VLSET\n&CTR     SETA  &CTR+1\n         AIF   ('&SYSLIST(&CTR)' EQ 'VL').SETVL\n         AIF   ('&SYSLIST(&CTR)' NE 'NOVL').ERRNEXP\n.SETVL   ANOP\n&VL      SETC  '&SYSLIST(&CTR)'\n.VLSET   ANOP\n&CTR     SETA  &CTR+1\n         AIF   (&CTR LE N'&SYSLIST).ERRNEXP\n         PLIST &SYSLIST(&CTRPARM),&VL,PL=&PL\n.PRSDONE ANOP PARSING DONE\n.*\n.* Build case table at bottom of PSD.\n.*\n         PSD   TYPE=BOTTOM\n&TAGTBL  DS    0A\n&CTR     SETA  0\n.L5START AGO   .L5INC\n.L5TOP   AIF   ('&CASESUB(&CTR)' EQ '').L5DC0\n         ##DEFSUB &CASESUB(&CTR),TYPE=CALL\n         DC    A(&CASESUB(&CTR))\n         AGO   .L5INC\n.L5DC0   DC    A(0)\n.L5INC   AIF   (&CTR GT &MAXC#).L5END   Index is 1 more than case#.\n&CTR     SETA  &CTR+1\n         AGO   .L5TOP\n.L5END   ANOP\n         ENDPSD\n.*\n.* Generate code to call case.\n.*\n         AIF ('&REG' EQ '').ERRREG     REG= is required.\n         ##MREG CHECK,&REG             Make sure reg is not one used\n.*                                     elsewhere including R14-R1.\n         LTR   R15,&REG                Put case number in R15.\n         ##B M,&TAGOTHR                Go to other: if negative.\n         C     R15,=F'&MAXC#'          Check for max case.\n         ##B H,&TAGOTHR                Go to other: if higher.\n         SLA   R15,2                   Multiply case by 4.\n         AL    R15,=A(&TAGTBL)         Add address of address table.\n         L     R15,0(,R15)             Point R15 to case subroutine.\n         LTR   R15,R15                 Test address.\n         AIF   (&OTHRCTR EQ 0).NOOTHER\n         ##B NZ,&TAGBASR               Go to BASR if not zero.\n         AIF   ('&SYSLIST(&OTHRCTR,1)' EQ 'ERREXIT').GENERRX\n&TAGOTHR ##LAL R15,&SYSLIST(&OTHRCTR)  Point R15 to other sub.\n         ##DEFSUB &SYSLIST(&OTHRCTR),TYPE=CALL\n         AGO   .GENBASR\n.GENERRX ANOP\n&TAGOTHR DS    0H\n         ERREXIT NAME=&SYSLIST(&OTHRCTR,2),CODE=&SYSLIST(&OTHRCTR,3)\n.GENBASR ANOP\n&TAGBASR ##B ASR,R14,R15               Call subroutine.\n         MEXIT\n.NOOTHER ANOP\n         ##B Z,&TAGOTHR                Skip BASR if zero.\n         ##B ASR,R14,R15               Call subroutine.\n&TAGOTHR DS    0H                      No OTHER specified.\n         MEXIT\n.*\n.* Errors.\n.*\n.ERRNULL MNOTE 8,'Parameter &CTR is empty.'\n         MEXIT\n.ERRMISO MNOTE 8,'Expecting a subroutine name or ERREXIT following OTHE+\n               R.'\n         MEXIT\n.ERRNEXP MNOTE 8,'&SYSLIST(&CTR) is not expected as &CTR parameter.'\n         MEXIT\n.ERRNEGC MNOTE 8,'Negative case number &LASTC# encountered in parameter+\n                &CTR is not allowed.'\n         MEXIT\n.ERRERRX MNOTE 8,'&SYSLIST(&CTR) is not valid.'\n         MEXIT\n.ERRREG  MNOTE 8,'REG= must be specified.'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CALLSUB": {"ttr": 8193, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00W\\x00W\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 87, "newlines": 87, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         CALLSUB &NAME,                 SUBROUTINE NAME             @C1$\n               &P,                      PARAMETER LIST              @C1$\n               &VL,                     VL                          @C1$\n               &PL=                     PARAMETER LIST STORAGE      @C1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      CALLSUB\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - CALLSUB\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO CALL A SUBROUTINE BLOCK.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*              6/27/85 - ADDED PARAMETER SUPPORT                   @C1\n.*              7/15/85 MGG - ADDED DYNAMIC SUPPORT                 @C2\n.*              2/18/86 MGG - ADDED LONG OPTION SUPPORT             @C3\n.*              3/23/87 MGG - FIXED ERROR WHEN LONG OPTION IS USED  @C4\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C5\n.*             08/09/05 MGG - Moved some code to ##DEFSUB and added @C6\n.*                            TYPE=CALL on ##DEFSUB call.           @C6\n.*\n.*--------------------------------------------------------------------*\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         GBLB  &#CSSD(99)                ADCON ALREADY IN PSD       @C2\n         GBLA  &#SB#D                    SUBROUTINE NUMBER CALLED   @C2\n         GBLB  &#PBLONG                  LONG PROGRAM OPTION        @C3\n         LCLC  &TAG                      LOCAL WORK TAG             @C2\n         ##DEFSUB &NAME,TYPE=CALL                                   @C6\n         PLIST &P,&VL,PL=&PL                                        @C1\n         AIF   (NOT &#PBLONG).CSB0003   IF LONG OPTION              @C3\n&TAG     SETC  '#SBAD&#SB#D'                                        @C3\n         AIF   (&#CSSD(&#SB#D)).CSB0002 SKIP IF ADCON ALREADY DEFINEDC3\n         PSD   TYPE=PARTIAL                                         @C3\n&TAG     DC    A(&NAME)                 ADCON FOR SUBROUTINE BLOCK  @C3\n         ENDPSD ,                                                   @C3\n&#CSSD(&#SB#D) SETB  1                  INDICATE ADCON ALREADY DEFINED3\n.CSB0002 L     R15,&TAG                 LOAD ADDRESS OF SUBROUTINE  @C3\n.CSB0003 ANOP                                                       @C3\n         AIF   (&#PBXA).CSB0010         IF XA OPTION OFF, USE BAL INST\n         AIF   (&#PBLONG).CSB0005       IF LONG OPTION              @C3\n         BAL   R14,&NAME                CALL SUBROUTINE\n         AGO   .CSB0100                                             @C3\n.CSB0005 BALR  R14,R15                  CALL SUBROUTINE             @C3\n         AGO   .CSB0100                                             @C3\n.CSB0010 AIF   (&#PB370).CSB0020        IF XA OPTION ON AND 370 OPTION\n.*                                        OFF, USE BAS INST\n         AIF   (&#PBLONG).CSB0015       IF LONG OPTION              @C3\n         ##B AS,R14,&NAME               CALL SUBROUTINE             @C5\n         AGO   .CSB0100                                             @C3\n.CSB0015 BASR  R14,R15                  CALL SUBROUTINE             @C3\n         AGO   .CSB0100                                             @C3\n.CSB0020 ANOP                           IF XA AND 370 OPTION ON\n         AIF   (&#PBLONG).CSB0025       IF LONG OPTION              @C3\n         LA    R14,*+8               CALL SUBROUTINE WITH R14 VALID @C4\n         ##B U,&NAME                      AS 31 BIT ADDRESS         @C5\n         AGO   .CSB0100                                             @C3\n.CSB0025 LA    R14,*+6               CALL SUBROUTINE WITH R14 VALID @C4\n         BR    R15                        AS 31 BIT ADDRESS         @C4\n         AGO   .CSB0100                                             @C3\n.CSB0100 MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CALLX": {"ttr": 8196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00F\\x00F\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 70, "newlines": 70, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         CALLX &PGM,                    PROGRAM ADDRESS                $\n               &P,                      PARAMETER LIST                 $\n               &VL,                     VL                             $\n               &PL=,                    PARAMETER LIST STORAGE      @C1$\n               &PARM1=                  OPTIONAL FIRST PARAMETER    @C1\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      CALLX\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - CALLX\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO CALL EXTERNAL PROGRAMS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    6/27/85 MGG - NEW\n.*              5/21/03 MGG - ADDED PARM1= PARAMETER                @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLB  &#PBXA                   XA OPTION\n         GBLB  &#PB370                  370 OPTION\n         LCLC  &TAG\n&#MNDX   SETA  &#MNDX+1                 ADD ONE TO TAG INDEX\n         PLIST &P,&VL,PL=&PL,PARM1=&PARM1                           @C1\n.X100    AIF   ('&PGM' EQ '(R15)' OR '&PGM' EQ '(15)').X200\n         L     R15,&PGM                 POINT R1 TO ROUTINE\n.X200    AIF   (&#PBXA).X300            IF XA OPTION OFF, USE BALR INST\n         BALR  R14,R15                  CALL EXTERNAL ROUTINE\n         MEXIT\n.X300    AIF   (&#PB370).X400           IF XA OPTION ON AND 370 OPTION\n.*                                        OFF, USE BAS INST\n         BASR  R14,R15                  CALL EXTERNAL ROUTINE\n         MEXIT\n.X400    ANOP                           IF XA AND 370 OPTION ON, USE\n.*                                       BALR ON 370 AND BASR ON XA\n         L     R14,16                   POINT R14 TO CVT\n         TM    X'74'(R14),X'80'         RUNNING UNDER XA?\n         BO    #CX&#MNDX                YES, DO BASR\n         BALR  R14,R15                  CALL EXTERNAL ROUTINE\n         B     #CP&#MNDX                BRANCH PAST BASR\n&TAG     SETC  '#CX&#MNDX'\n&TAG     BASR  R14,R15                  CALL EXTERNAL ROUTINE\n&TAG     SETC  '#CP&#MNDX'\n&TAG     DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CASE": {"ttr": 8198, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00h\\x00h\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 104, "newlines": 104, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         CASE  &CASEBLK=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      CASE\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - CASE\n.*\n.*  PURPOSE    INTERNAL MACRO USED TO START CODE FOR A CASE WITHIN\n.*             A CASEBLK.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*              9/23/93 - mgg Allow case number up to 501*mult.\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#CMLVL(20)              STRUCTURAL LEVEL CASEBLK\n         GBLA  &#CLVL                   CASEBLK LEVEL\n         GBLA  &#CNDX(20)               CASEBLK BLOCK TAG INDEX\n         GBLB  &#COTH(20)               CASEBLK OTHER ENCOUNTERED\n         GBLB  &#CCAS(20)               CASEBLK ENCOUNTERED\n         GBLC  &#CNAME(20)              CASEBLK NAMES\n         GBLA  &#CMULT(20)              CASEBLK MULT FACTOR\n         GBLA  &#CMAXC(20)              MAX CASE NUM IN THIS CASEBLK\n         GBLA  &#CTAGS(10020)  20*501   CASE TAGS\n         LCLA  &CTR,&NDX                WORK COUNTER & INDEX\n         LCLC  &TAG                     WORK TAG\n         AIF   ('&CASEBLK' EQ '').PRC0010\n         AIF   ('&CASEBLK' NE '&#CNAME(&#CLVL)').ERR0006\n.PRC0010 AIF   (&#CLVL EQ 0 OR &#CMLVL(&#CLVL) NE &#MLVL).ERR0007\n&CTR     SETA  N'&SYSLIST\n         AIF   (&CTR LE 0).ERR0001\n         AIF   (NOT &#CCAS(&#CLVL)).PRC0090\n         ##B U,#CE&#CNDX(&#CLVL)        LEAVE CASE                  @C1\n.PRC0090 ANOP\n&#CCAS(&#CLVL) SETB 1\n         AIF   (&CTR NE 1).PRC0100\n         AIF   ('&SYSLIST(1)' NE 'OTHER').PRC0100\n         AIF   (&#COTH(&#CLVL)).ERR0002\n&#COTH(&#CLVL) SETB  1\n&TAG     SETC  '#CO&#CNDX(&#CLVL)'\n&TAG     DS    0H                       OTHER CASES\n         AGO   .EXIT\n.PRC0100 ANOP\n&#MNDX   SETA  &#MNDX+1\n&TAG     SETC  '#CC&#MNDX'\n&TAG     DS    0H                       START OF CASE\n.PRC0110 ANOP\n         AIF   (T'&SYSLIST(&CTR) NE 'N').ERR0003\n         AIF   (&SYSLIST(&CTR) GT 500).ERR0004\n&NDX     SETA  &SYSLIST(&CTR)/&#CMULT(&#CLVL)\n         AIF   (&NDX*&#CMULT(&#CLVL) NE &SYSLIST(&CTR)).ERR0005\n         AIF   (&#CTAGS((&#CLVL-1)*501+1+&NDX) EQ 0).PRC0120\n         MNOTE 8,'CASE &SYSLIST(&CTR) already used'\n.PRC0120 ANOP\n&#CTAGS((&#CLVL-1)*501+1+&NDX) SETA &#MNDX\n         AIF   (&NDX LE &#CMAXC(&#CLVL)).PRC0130\n&#CMAXC(&#CLVL) SETA &NDX\n.PRC0130 ANOP\n&CTR     SETA  &CTR-1\n         AIF   (&CTR GT 0).PRC0110\n         AGO   .EXIT\n.ERR0001 MNOTE 8,'No operand was specified on CASE statement'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'OTHER has already been specified in this CASEBLK'\n         AGO   .EXIT\n.ERR0003 MNOTE 8,'CASE is not numeric'\n         AGO   .EXIT\n.ERR0004 MNOTE 8,'CASE number cannot be larger than ''MULT'' * 500'\n         AGO   .EXIT\n.ERR0005 MNOTE 8,'CASE number must be multiple of ''MULT'''\n         AGO   .EXIT\n.ERR0006 MNOTE 8,'CASEBLK= does not match CASE name'\n         AGO   .EXIT\n.ERR0007 MNOTE 8,'CASE macro is not at same structural level as a CASEB$\n               LK macro'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CASEBLK": {"ttr": 8201, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x88\\x00\\x88\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 136, "newlines": 136, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         CASEBLK &REG=,&MULT=1,&WREG=,&NAME=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      CASEBLK\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - CASEBLK\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START A CASE BLOCK.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - mgg New\n.*              9/23/93 - mgg Allow case number up to 501*mult.\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C1\n.*                            Changed to use ADCON table in PSD if  @C1\n.*                            &SYSALVL is >= 1.                     @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO) @C1\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#CMLVL(20)              STRUCTURAL LEVEL\n         GBLA  &#CLVL                   CASEBLK LEVEL\n         GBLA  &#CNDX(20)               CASEBLK BLOCK TAG INDEX\n         GBLB  &#COTH(20)               CASEBLK OTHER ENCOUNTERED\n         GBLB  &#CCAS(20)               CASEBLK ENCOUNTERED\n         GBLC  &#CNAME(20)              CASEBLK NAMES\n         GBLA  &#CMULT(20)              CASEBLK MULT FACTOR\n         GBLA  &#CMAXC(20)              MAX CASE NUM IN THIS CASEBLK\n         GBLA  &#CTAGS(10020)  20*501   CASE TAGS\n         LCLA  &CTR                     WORK COUNT\n         LCLC  &TAG                     WORK TAG\n         LCLC  &R                       REGISTER USED\n&#MNDX   SETA  &#MNDX+1                 ADD ONE TO TAG INDEX\n         AIF   (&#CLVL GE 20).ERR0001\n&#CLVL   SETA  &#CLVL+1                 ADD ONE TO CASEBLK LEVEL\n&#MLVL   SETA  &#MLVL+1                 ADD ONE TO STRUCTURAL LEVEL\n&#CMLVL(&#CLVL) SETA &#MLVL             SAVE LEVEL FOR THIS CASEBLK\n&#CNDX(&#CLVL)  SETA &#MNDX             SET BLOCK TAG INDEX\n&#COTH(&#CLVL) SETB  0                  CLEAR CASE OTHER FLAG\n&#CCAS(&#CLVL) SETB  0                  CLEAR CASE FLAG\n&#CNAME(&#CLVL) SETC '&NAME'            SAVE NAME\n&#CMULT(&#CLVL) SETA &MULT              SET MULT FACTOR\n&#CMAXC(&#CLVL) SETA 0                  SET MAX CASE TO 0\n&CTR     SETA  500                      CLEAR\n.PRC0010 ANOP                             CASE\n&#CTAGS((&#CLVL-1)*501+1+&CTR) SETA 0            TAGS\n&CTR     SETA  &CTR-1\n         AIF   (&CTR GE 0).PRC0010\n.PRC0050 ANOP\n&R       SETC  '&WREG'                  SET REGISTER\n         AIF   ('&R' NE '').PRC0060\n&R       SETC  '&REG'                   DEFAULT TO REG=\n         AIF   ('&R' EQ '').ERR0002\n         AGO   .PRC0070\n.PRC0060 LR    &R,&REG                  LOAD WORK REGISTER\n.PRC0070 ANOP\n.PRC0100 AIF   (&SYSALVL GE 1).PRC0300                              @C1\n.*- Use branch offset table.                                        @C1\n         AIF   ('&MULT' NE '1').PRC0110                             @C1\n         SLA   &R,1                     MULTIPLY CASE NUMBER BY 2\n         AGO   .PRC0200\n.PRC0110 AIF   ('&MULT' NE '2').PRC0120\n.*       NO SCALEING FOR MULT=2\n         AGO   .PRC0200\n.PRC0120 AIF   ('&MULT' NE '4').PRC0130\n         SRA   &R,1                     DIVIDE CASE BY 2\n         AGO   .PRC0200\n.PRC0130 AIF   ('&MULT' NE '8').PRC0140\n         SRA   &R,2                     DIVIDE CASE BY 4\n         AGO   .PRC0200\n.PRC0140 ANOP\n         MNOTE 8,'Invalid MULT= specified. Must be 1, 2, 4, or 8'\n.PRC0200 ANOP                                                       @C1\n         CH    &R,#CM&#CNDX(&#CLVL)      CHECK FOR MAX\n         BH    #CO&#CNDX(&#CLVL)         GO TO CASE OTHER IF HIGH   @C1\n         LH    &R,#CT&#CNDX(&#CLVL).(&R) LOAD DISPLACEMENT TO CASE\n&TAG     SETC  '#CS&#CNDX(&#CLVL)'\n&TAG     B     *(&R)                    BRANCH TO CASE\n         AGO   .EXIT\n.*- Use address table.                                              @C1\n.PRC0300 ANOP                                                       @C1\n         TREG  &R                        CHECK CASE                 @C1\n         ##B M,#CO&#CNDX(&#CLVL)         GO TO CASE OTHER IF MINUS  @C1\n         CHI   &R,#CM&#CNDX(&#CLVL)      CHECK FOR MAX              @C1\n         ##B H,#CO&#CNDX(&#CLVL)         GO TO CASE OTHER IF HIGH   @C1\n         AIF   ('&MULT' NE '1').PRC0310                             @C1\n         SLA   &R,2                      MULTIPLY CASE NUMBER BY 4  @C1\n         AGO   .PRC0400                                             @C1\n.PRC0310 AIF   ('&MULT' NE '2').PRC0320                             @C1\n         SLA   &R,1                      MULTIPLY CASE NUMBER BY 2  @C1\n         AGO   .PRC0400                                             @C1\n.PRC0320 AIF   ('&MULT' NE '4').PRC0330                             @C1\n.*       NO SCALEING FOR MULT=4                                     @C1\n         AGO   .PRC0400                                             @C1\n.PRC0330 AIF   ('&MULT' NE '8').PRC0340                             @C1\n         SRA   &R,1                      DIVIDE CASE BY 2           @C1\n         AGO   .PRC0400                                             @C1\n.PRC0340 ANOP                                                       @C1\n         MNOTE 8,'Invalid MULT= specified. Must be 1, 2, 4, or 8'   @C1\n.PRC0400 ANOP                                                       @C1\n         AL    &R,=A(#CT&#CNDX(&#CLVL).) LOAD ADDRESS OF CASE THIS  @C1\n         L     &R,0(,&R)                 WAY BECAUSE THE VECTOR OF  @C1\n*                                        CASE ADDRESSES IS AT BOTTOM@C1\n*                                        OF PSD.                    @C1\n         BR    &R                        BRANCH TO CASE.            @C1\n         AGO   .EXIT                                                @C1\n.ERR0001 MNOTE 8,'CASEBLK can not be nested more than 20 deep'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'REG= must be specified'\n         AGO   .EXIT\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DC": {"ttr": 8204, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x007\\x007\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 55, "newlines": 55, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    DC\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      DC\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - DC\n.*\n.*  PURPOSE    MACRO USED TO REPLACE DC OPCODE WITH AN ASSOCIATED\n.*             MACRO.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__DC\n&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS\n&NAME    &VDA__DC &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),     +\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        +\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     +\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    +\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    +\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    +\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    +\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    +\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    +\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    +\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    +\n               &SYSLIST(45),&SYSLIST(45),&SYSLIST(47),&SYSLIST(48),    +\n               &SYSLIST(49),&SYSLIST(50),N=&CTR\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEFUCOND": {"ttr": 8206, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x006\\x006\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 54, "newlines": 54, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         DEFUCOND &NAME=,&MACRO=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1989.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      DEFUCOND\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - DEFUCOND\n.*\n.*  PURPOSE    STRUCTURED MACRO TO DEFINE USER DEFINED CONDITON NAMES.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    9/13/89 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         LCLC  &UCOND_DEFINED\n         LCLC  &UCOND_MACRO\n         AIF   ('&NAME' EQ '').ERR0001\n         AIF   ('&MACRO' EQ '').ERR0002\n&UCOND_DEFINED SETC '&NAME.__DEFINED'\n&UCOND_MACRO   SETC '&NAME.__MACRO'\n         GBLB  &(&UCOND_DEFINED)\n         GBLC  &(&UCOND_MACRO)\n&(&UCOND_DEFINED) SETB 1\n&(&UCOND_MACRO)   SETC '&MACRO'\n         MEXIT\n.ERR0001 MNOTE 8,'NAME= must be specified'\n         MEXIT\n.ERR0002 MNOTE 8,'MACRO= must be specified'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEFVGTYP": {"ttr": 8208, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00B\\x00B\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 66, "newlines": 66, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         DEFVGTYP &NAME=,&PROLOG=,&EPILOG=,&DS=,&DC=,&EQU=,&ORG=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      DEFVGTYP\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - DEFVGTYP\n.*\n.*  PURPOSE    STRUCTURED MACRO TO DEFINE A VDA GENTYPE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/05/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         LCLC  &VGTYP_DEFINED\n         LCLC  &VGTYP_MACRO\n         AIF   ('&NAME' EQ '').ERR0001\n&VGTYP_DEFINED SETC '&NAME.__DEFINED'\n&VGTYP_PROLOG  SETC '&NAME.__PROLOG'\n&VGTYP_EPILOG  SETC '&NAME.__EPILOG'\n&VGTYP_DC      SETC '&NAME.__DC'\n&VGTYP_DS      SETC '&NAME.__DS'\n&VGTYP_EQU     SETC '&NAME.__EQU'\n&VGTYP_ORG     SETC '&NAME.__ORG'\n         GBLB  &(&VGTYP_DEFINED)\n         GBLC  &(&VGTYP_PROLOG)\n         GBLC  &(&VGTYP_EPILOG)\n         GBLC  &(&VGTYP_DC)\n         GBLC  &(&VGTYP_DS)\n         GBLC  &(&VGTYP_EQU)\n         GBLC  &(&VGTYP_ORG)\n&(&VGTYP_DEFINED) SETB 1\n&(&VGTYP_PROLOG)  SETC '&PROLOG'\n&(&VGTYP_EPILOG)  SETC '&EPILOG'\n&(&VGTYP_DC)      SETC '&DC'\n&(&VGTYP_DS)      SETC '&DS'\n&(&VGTYP_EQU)     SETC '&EQU'\n&(&VGTYP_ORG)     SETC '&ORG'\n         MEXIT\n.ERR0001 MNOTE 8,'NAME= must be specified'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DS": {"ttr": 8449, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x007\\x007\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 55, "newlines": 55, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    DS\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      DS\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - DS\n.*\n.*  PURPOSE    MACRO USED TO REPLACE DS OPCODE WITH AN ASSOCIATED\n.*             MACRO.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__DS\n&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS\n&NAME    &VDA__DS &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),     +\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        +\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     +\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    +\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    +\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    +\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    +\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    +\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    +\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    +\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    +\n               &SYSLIST(45),&SYSLIST(45),&SYSLIST(47),&SYSLIST(48),    +\n               &SYSLIST(49),&SYSLIST(50),N=&CTR\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ELSE": {"ttr": 8451, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00B\\x00B\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 66, "newlines": 66, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ELSE  &IF=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ELSE\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ELSE\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START ELSE CODE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#IMLVL(20)              STRUCTURAL LEVEL OF IF\n         GBLA  &#ILVL                   IF NEXTING LEVEL\n         GBLA  &#INDX(20)               IF TAG INDEX\n         GBLA  &#INDX2(20)              IF TAG INDEX 2\n         GBLB  &#IELSE(20)              ELSE ENCOUNTERED\n         GBLC  &#INAME(20)              IF NAMES\n         LCLC  &TAG                     WORK TAG\n         AIF   (&#ILVL LT 1).ERR0001\n         AIF   (&#IELSE(&#ILVL)).ERR0002\n         AIF   ('&IF' EQ '').PRC0010\n         AIF   ('&IF' NE '&#INAME(&#ILVL)').ERR0003\n.PRC0010 AIF   (&#IMLVL(&#ILVL) NE &#MLVL).ERR0004\n         ##B U,#IE&#INDX(&#ILVL)        GO TO ENDIF                 @C1\n&TAG     SETC  '#IF&#INDX2(&#ILVL)'     SET TAG TO PREVIOUS FAIL TAG\n&TAG     DS    0H                       START OF ELSE CODE\n&#IELSE(&#ILVL) SETB 1\n         AGO   .EXIT\n.ERR0001 MNOTE 8,'IF nexting level is zero'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'ELSE already encountered for this IF'\n         AGO   .EXIT\n.ERR0003 MNOTE 8,'NAME= does not match corresponding IF'\n         AGO   .EXIT\n.ERR0004 MNOTE 8,'ELSE structural level is not the same as the correspo$\n               nding IF'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ELSEIF": {"ttr": 8453, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00Y\\x00Y\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 89, "newlines": 89, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ELSEIF  &IF=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ELSEIF\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ELSEIF\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START ELSEIF CODE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*              9/15/89 MGG - ADDED T=A TO ##COND MACRO CALL.       @C1\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C2\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#IMLVL(20)              STRUCTURAL LEVEL OF IF\n         GBLA  &#ILVL                   IF NEXTING LEVEL\n         GBLA  &#INDX(20)               IF TAG INDEX\n         GBLA  &#INDX2(20)              IF TAG INDEX 2\n         GBLB  &#IELSE(20)              ELSE ENCOUNTERED\n         GBLC  &#INAME(20)              IF NAMES\n         LCLA  &CTR                     WORK COUNT\n         LCLC  &FTAG,&STAG,&TAG         FAIL TAG AND SUCCESS TAG\n&#MNDX   SETA  &#MNDX+1                 ADD ONE TO TAG INDEX\n         AIF   (&#ILVL LT 1).ERR0001    ERROR IF NO IF ACTIVE\n         AIF   (&#IELSE(&#ILVL)).ERR0002 ERROR IF ELSE ENCOUNTERED\n         AIF   ('&IF' EQ '').PRC0010    ERROR IF IF= DOES NOT MATCH\n         AIF   ('&IF' NE '&#INAME(&#ILVL)').ERR0003\n.PRC0010 AIF   (&#IMLVL(&#ILVL) NE &#MLVL).ERR0004\n         ##B U,#IE&#INDX(&#ILVL)        GO TO ENDIF                 @C2\n&TAG     SETC  '#IF&#INDX2(&#ILVL)'     SET TAG TO PREVIOUS FAIL TAG\n&#INDX2(&#ILVL) SETA  &#MNDX            SET TAG INDEX 2\n&FTAG    SETC  '#IF&#MNDX'              FAIL TAG NAME\n&STAG    SETC  '#IS&#MNDX'              SUCCESS TAG NAME\n&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS\n&TAG     ##COND &SYSLIST(1),&SYSLIST(2),                               $\n               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),                 $\n               F=&FTAG,S=&STAG,E=&CTR,B=1,T=A                       @C1\n&STAG    DS    0H                       START OF SUCCESSFUL ELSEIF CODE\n         AGO   .EXIT\n.ERR0001 MNOTE 8,'ELSEIF must be contained in IF structure'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'ELSE for this IF precedes ELSEIF'\n         AGO   .EXIT\n.ERR0003 MNOTE 8,'IF= does not match corresponding IF'\n         AGO   .EXIT\n.ERR0004 MNOTE 8,'ELSEIF structural level is not the same as correspond$\n               ing IF'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDBLK": {"ttr": 8456, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\xb0\\x00\\xb0\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 176, "newlines": 176, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDBLK &BLOCK=,                NAME OF BLOCK                  $\n               &RC=,                    RETURN CODE                    $\n               &R0=,                    VALUE OF R0 TO RETURN          $\n               &R1=,                    VALUE OF R1 TO RETURN          $\n               &EXPMAC=                 BLOCK EPILOG MACRO\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDBLK\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDBLK\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO END A BLOCK.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 MGG - NEW\n.*             11/10/83 MGG - ADDED SUPPORT FOR BR14 OPTION\n.*             11/10/83 MGG - ADDED R-FORM REGISTER SUPPORT ON RC=\n.*             04/26/84 MGG - ADDED CUSTOM BLOCK SUPPORT\n.*             11/21/84 MGG - FIXED BUG IN RC CODE IF RENT SPECIFIED\n.*             07/15/85 MGG - PUT IN DYNAMIC STORAGE SUPPORT\n.*              1/22/86 MGG - PUT IN LOCTR OPTION SUPPORT\n.*              2/ 6/86 MGG - PUT IN AUTOMATIC PL STORAGE SUPPORT\n.*              9/10/86 MGG - PUT IN SUPPORT FOR NORENT PWA\n.*             12/29/86 MGG - MAJOR RESTRUCTURE.  @CN REMOVED.\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEXS\n         GBLA  &#BMLVL(20)              BLOCK STRUCTURAL LEVEL\n         GBLC  &#BNAME(20)              BLOCK NAMES\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         GBLA  &#SBPLMX                 MAXIMUM PARMS IN SUBROUTINE\n         GBLB  &#SBCSTM                 CUSTOM SUBROUTINE BLOCK\n         GBLC  &#EEMAC                  ERREXIT BLOCK EPILOG MACRO NAME\n         GBLC  &#IEMAC                  INLINE BLOCK EPILOG MACRO NAME\n         GBLC  &#PEMAC                  PROGRAM BLOCK EPILOG MACRO NAME\n         GBLC  &#SEMAC                  SUBROUTINE EPILOG MACRO NAME\n         LCLC  &TAG                     WORK TAG\n         LCLC  &MAC                     WORK FIELD\n.*--------------------------------------------------------------------*\n.*  ERROR CHECK STRUCTURAL LEVEL\n.*--------------------------------------------------------------------*\n         AIF   (&#BLVL LE 0).ERR0001\n         AIF   (&#BMLVL(&#BLVL) NE &#MLVL).ERR0004\n&#MLVL   SETA  &#MLVL-1\n         AIF   ('&BLOCK' EQ '').CRC0000\n         AIF   ('&BLOCK' NE '&#BNAME(&#BLVL)').ERR0002\n.CRC0000 ANOP\n.*--------------------------------------------------------------------*\n.*  CHECK RC=\n.*--------------------------------------------------------------------*\n&TAG     SETC  '#BE&#BNDX(&#BLVL)'\n&TAG     DS    0H                       END OF BLOCK\n&TAG     SETC  ''\n         AIF   ('&RC' EQ '').CRC0010\n         AIF   ('&RC'(1,1) NE '(').CRC0010\n         AIF   (N'&RC EQ 1).CRC0010\n         MNOTE 8,'&RC invalid on RC='\n.CRC0010 ANOP\n.*====================================================================*\n.*  TYPE=INLINE.\n.*====================================================================*\n.PRC0000 AIF   ('&#BTYPE(&#BLVL)' NE 'INLINE').PRC0100\n.*--------------------------------------------------------------------*\n.*  DISPLAY ERRORS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n.*NONE\n.*--------------------------------------------------------------------*\n.*  ISSUE MACRO TO GENERATE CODE FOR BLOCK.\n.*--------------------------------------------------------------------*\n&MAC     SETC  '&#IEMAC'\n         AIF   ('&EXPMAC' EQ '').PRC0050\n&MAC     SETC  '&EXPMAC'\n.PRC0050 ANOP\n         &MAC  &RC                      RETURN CODE FOR BLOCK\n         AGO   .PRC9000\n.*====================================================================*\n.*  TYPE=ERREXIT.\n.*====================================================================*\n.PRC0100 AIF   ('&#BTYPE(&#BLVL)' NE 'ERREXIT').PRC0200\n.*--------------------------------------------------------------------*\n.*  DISPLAY ERRORS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n.* NONE\n.*--------------------------------------------------------------------*\n.*  ISSUE MACRO TO GENERATE CODE FOR BLOCK.\n.*--------------------------------------------------------------------*\n&MAC     SETC  '&#EEMAC'\n         AIF   ('&EXPMAC' EQ '').PRC0150\n&MAC     SETC  '&EXPMAC'\n.PRC0150 ANOP\n         &MAC  &RC,                     RETURN CODE FOR BLOCK          $\n               &R0,                     R0 TO PASS BACK                $\n               &R1                      R1 TO PASS BACK\n         AGO   .PRC9000\n.*====================================================================*\n.*  TYPE=PROGRAM.\n.*====================================================================*\n.PRC0200 AIF   ('&#BTYPE(&#BLVL)' NE 'PROGRAM').PRC0300\n.*--------------------------------------------------------------------*\n.*  DISPLAY ERRORS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n.* NONE\n.*--------------------------------------------------------------------*\n.*  ISSUE MACRO TO GENERATE CODE FOR BLOCK.\n.*--------------------------------------------------------------------*\n&MAC     SETC  '&#PEMAC'\n         AIF   ('&EXPMAC' EQ '').PRC0250\n&MAC     SETC  '&EXPMAC'\n.PRC0250 ANOP\n         &MAC  &RC,                     RETURN CODE FOR BLOCK          $\n               &R0,                     R0 KEYWORD                     $\n               &R1                      R1 KEYWORD\n         AGO   .PRC9000\n.*====================================================================*\n.*  TYPE=SUBROUTINE.\n.*====================================================================*\n.PRC0300 AIF   ('&#BTYPE(&#BLVL)' NE 'SUBROUTINE').PRC0400\n.*--------------------------------------------------------------------*\n.*  DISPLAY ERRORS FOR IGNORED KEYWORDS.\n.*--------------------------------------------------------------------*\n.*NONE\n.*--------------------------------------------------------------------*\n.*  ISSUE MACRO TO GENERATE CODE FOR BLOCK.\n.*--------------------------------------------------------------------*\n&MAC     SETC  '&#SEMAC'\n         AIF   ('&EXPMAC' EQ '').PRC0350\n&MAC     SETC  '&EXPMAC'\n.PRC0350 ANOP\n         &MAC  &RC                      RETURN CODE FOR BLOCK\n         AGO   .PRC9000\n.PRC0400 ANOP\n.*--------------------------------------------------------------------*\n.*  FIXUP FOR INVALID BLOCK TYPES.\n.*--------------------------------------------------------------------*\n&TAG     SETC  '#BE&#BNDX(&#BLVL)'\n&TAG     DS    0H                       INVALID BLOCK\n.*--------------------------------------------------------------------*\n.PRC9000 ANOP\n&#BLVL   SETA  &#BLVL-1                 BACKUP ONE LEVEL\n         AGO   .EXIT\n.*--------------------------------------------------------------------*\n.ERR0001 MNOTE 8,'Block nesting level is already zero'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'BLOCK= does not match current block'\n         AGO   .EXIT\n.ERR0004 MNOTE 8,'Structural nesting level does not match level at entr$\n               y to corresponding block'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDCASE": {"ttr": 8460, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00z\\x00z\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 122, "newlines": 122, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDCASE  &CASEBLK=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDCASE\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDCASE\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO END A CASE BLOCK.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - mgg NEW\n.*              9/23/93 - mgg Allow case number up to 501*mult.\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C1\n.*                            Changed to use ADCON table in PSD if  @C1\n.*                            &SYSALVL is >= 1.                     @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#CMLVL(20)              STRUCTURAL LEVEL FOR CASEBLK\n         GBLA  &#CLVL                   CASEBLK LEVEL\n         GBLA  &#CNDX(20)               CASEBLK BLOCK TAG INDEX\n         GBLB  &#COTH(20)               CASEBLK OTHER ENCOUNTERED\n         GBLB  &#CCAS(20)               CASEBLK ENCOUNTERED\n         GBLC  &#CNAME(20)              CASEBLK NAMES\n         GBLA  &#CMULT(20)              CASEBLK MULT FACTOR\n         GBLA  &#CMAXC(20)              MAX CASE NUM IN THIS CASEBLK\n         GBLA  &#CTAGS(10020)  20*501   CASE TAGS\n         GBLA  &SYSALVL                 ARCH LEVEL (SYSSTATE MACRO) @C1\n         LCLA  &CTR                     WORK COUNTER\n         LCLC  &TAG                     WORK TAG\n         AIF   (&#CLVL LE 0).ERR0002\n         AIF   (&#CMLVL(&#CLVL) NE &#MLVL).ERR0003\n&#MLVL   SETA  &#MLVL-1\n         AIF   ('&CASEBLK' EQ '').PRC0010\n         AIF   ('&CASEBLK' NE '&#CNAME(&#CLVL)').ERR0001\n.PRC0010 AIF   (&SYSALVL GE 1).PRC0300                              @C1\n.*- Use branch offset table.                                        @C1\n         B     #CE&#CNDX(&#CLVL)                                    @C1\n&TAG     SETC  '#CM&#CNDX(&#CLVL)'\n&TAG     DC    AL2(&#CMAXC(&#CLVL)*2)\n&TAG     SETC  '#CT&#CNDX(&#CLVL)'\n&CTR     SETA  0\n.PRC0100 AIF   (&CTR GT &#CMAXC(&#CLVL)).PRC0200\n         AIF   (&#CTAGS((&#CLVL-1)*501+1+&CTR) NE 0).PRC0120\n&TAG     DC    AL2(#CO&#CNDX(&#CLVL)-#CS&#CNDX(&#CLVL))\n         AGO   .PRC0140\n.PRC0120 ANOP\n&TAG     DC    AL2(#CC&#CTAGS((&#CLVL-1)*501+1+&CTR)-#CS&#CNDX(&#CLVL))\n.PRC0140 ANOP\n&TAG     SETC  ''\n&CTR     SETA  &CTR+1\n         AGO   .PRC0100\n.PRC0200 ANOP\n         AIF   (&#COTH(&#CLVL)).PRC0210\n&TAG     SETC  '#CO&#CNDX(&#CLVL)'\n&TAG     DS    0H                       NO CASE OTHER\n.PRC0210 ANOP\n&TAG     SETC  '#CE&#CNDX(&#CLVL)'\n&TAG     DS    0H                       END OF CASEBLK\n&#CLVL   SETA  &#CLVL-1\n         AGO   .EXIT\n.*- Use address table.                                              @C1\n.PRC0300 ANOP                                                       @C1\n         ##SD  TYPE=BOTTOM                                          @C1\n&TAG     SETC  '#CM&#CNDX(&#CLVL)'                                  @C1\n&TAG     EQU   &#CMAXC(&#CLVL)                                      @C1\n&TAG     SETC  '#CT&#CNDX(&#CLVL)'                                  @C1\n&CTR     SETA  0                                                    @C1\n.PRC0310 AIF   (&CTR GT &#CMAXC(&#CLVL)).PRC0400                    @C1\n         AIF   (&#CTAGS((&#CLVL-1)*501+1+&CTR) NE 0).PRC0320        @C1\n&TAG     DC    A(#CO&#CNDX(&#CLVL))                                 @C1\n         AGO   .PRC0340                                             @C1\n.PRC0320 ANOP                                                       @C1\n&TAG     DC    A(#CC&#CTAGS((&#CLVL-1)*501+1+&CTR))                 @C1\n.PRC0340 ANOP                                                       @C1\n&TAG     SETC  ''                                                   @C1\n&CTR     SETA  &CTR+1                                               @C1\n         AGO   .PRC0310                                             @C1\n.PRC0400 ANOP                                                       @C1\n         ##ENDSD                                                    @C1\n         AIF   (&#COTH(&#CLVL)).PRC0410                             @C1\n&TAG     SETC  '#CO&#CNDX(&#CLVL)'                                  @C1\n&TAG     DS    0H                       NO CASE OTHER               @C1\n.PRC0410 ANOP                                                       @C1\n&TAG     SETC  '#CE&#CNDX(&#CLVL)'                                  @C1\n&TAG     DS    0H                       END OF CASEBLK              @C1\n&#CLVL   SETA  &#CLVL-1                                             @C1\n         AGO   .EXIT                                                @C1\n.*--------------------                                              @C1\n.ERR0001 MNOTE 8,'CASEBLK= does not match CASE name'\n         MEXIT\n.ERR0002 MNOTE 8,'CASEBLK nesting level is zero'\n         MEXIT\n.ERR0003 MNOTE 8,'Structural nesting level of ENDCASE is different than$\n                corresponding CASEBLK macro'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDIF": {"ttr": 8463, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00B\\x00B\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 66, "newlines": 66, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDIF &IF=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDIF\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDIF\n.*\n.*  PURPOSE    STRUCTURED MACRO TO END A IF STRUCTURE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#ILVL                   IF NEXTING LEVEL\n         GBLA  &#IMLVL(20)              IF STURCTURAL LEVEL\n         GBLA  &#INDX(20)               IF TAG INDEX\n         GBLA  &#INDX2(20)              IF TAG INDEX 2\n         GBLB  &#IELSE(20)              ELSE ENCOUNTERED\n         GBLC  &#INAME(20)              IF NAMES\n         LCLC  &TAG                     WORK TAG\n         AIF   (&#ILVL LT 1).ERR0001\n         AIF   ('&IF' EQ '').PRC0010\n         AIF   ('&IF' NE '&#INAME(&#ILVL)').ERR0002\n.PRC0010 AIF   (&#IMLVL(&#ILVL) NE &#MLVL).ERR0003\n&#MLVL   SETA  &#MLVL-1                 SUBTRACT 1 FORM STRUCTURAL LVL\n         AIF   (&#IELSE(&#ILVL)).PRC0020\n&TAG     SETC  '#IF&#INDX2(&#ILVL)'     SET TAG TO PREVIOUS FAIL TAG\n&TAG     DS    0H                       NO ELSE CODE\n.PRC0020 ANOP\n&TAG     SETC  '#IE&#INDX(&#ILVL)'      SET TAG TO END IF TAG\n&TAG     DS    0H                       END OF IF CODE\n&#ILVL   SETA  &#ILVL-1                 BUMP DOWN IF LEVEL\n         AGO   .EXIT\n.ERR0001 MNOTE 8,'IF nesting level is zero'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'IF= does not match corresponding IF'\n         AGO   .EXIT\n.ERR0003 MNOTE 8,'ENDIF is not at same structural level as correspondin$\n               g IF'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDLOOP": {"ttr": 8705, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x80\\x00\\x80\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 128, "newlines": 128, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDLOOP &LOOP=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDLOOP\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDLOOP\n.*\n.*  PURPOSE    STRUCTURED MACRO TO END A LOOP STRUCTURE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C2\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#DMLVL(20)              STRUCTURAL LEVEL OF LOOP\n         GBLA  &#DLVL                   LOOP NEXTING LEVEL\n         GBLA  &#DNDX(20)               LOOP TAG INDEX\n         GBLC  &#DNAME(20)              LOOP NAMES\n         GBLC  &#DTYPE(20)              TYPE OF LOOP\n         LCLA  &CTR                     WORK COUNT\n         LCLC  &FTAG,&STAG,&TAG         FAIL TAG AND SUCCESS TAG\n         AIF   (&#DLVL LT 1).ERR0001    IF NOT INSIDE LOOP, ERROR\n         AIF   ('&LOOP' EQ '').PRC0010\n         AIF   ('&#DNAME(&#DLVL)' NE '&LOOP').ERR0002\n.PRC0010 AIF   (&#DMLVL(&#DLVL) NE &#MLVL).ERR0007\n&#MLVL   SETA  &#MLVL-1\n         AIF   ('&#DTYPE(&#DLVL)' NE '&SYSLIST(1)').ERR0003\n&TAG     SETC  '#DB&#DNDX(&#DLVL)'      BEGIN TAG\n&STAG    SETC  '#DE&#DNDX(&#DLVL)'      END TAG NAME\n         AIF   ('&SYSLIST(1)' NE 'UNTIL').PRC2000\n         AIF   ('&SYSLIST(2)' NE 'LEAVE').PRC2100\n         ##B U,&TAG                     LOOP UNTIL,LEAVE            @C1\n&STAG    DS    0H                       END OF UNTIL,LEAVE LOOP\n&#DLVL   SETA  &#DLVL-1                 DECREMENT LOOP LEVEL\n         AIF   (N'&SYSLIST NE 2).ERR0006\n         AGO   .EXIT\n.PRC2100 ANOP\n&CTR     SETA  N'&SYSLIST-1             GET NUMBER OF POSITIONAL PARMS\n         ##COND &SYSLIST(2),                                           $\n               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),&SYSLIST(52),    $\n               F=&TAG,S=&STAG,E=&CTR,B=1,T=B\n&STAG    DS    0H                       END OF UNTIL LOOP\n&#DLVL   SETA  &#DLVL-1                 DECREMENT LOOP LEVEL\n         AGO   .EXIT\n.PRC2000 AIF   ('&SYSLIST(1)' NE 'WHILE').PRC3000\n         ##B U,&TAG                     LOOP WHILE                  @C1\n&STAG    DS    0H                       END OF WHILE LOOP\n&#DLVL   SETA  &#DLVL-1                 DECREMENT LOOP LEVEL\n         AGO   .CHKONE\n.PRC3000 AIF   ('&SYSLIST(1)' NE 'BCT').PRC4000\n         ##B CT,&SYSLIST(2),&TAG        LOOP BCT                    @C1\n&STAG    DS    0H                       END OF BCT LOOP\n&#DLVL   SETA  &#DLVL-1                 DECREMENT LOOP LEVEL\n         AIF   (N'&SYSLIST NE 2).ERR0004\n         AGO   .EXIT\n.PRC4000 AIF   ('&SYSLIST(1)' NE 'BXH').PRC5000\n         ##B U,&TAG                     LOOP BXH                    @C1\n&STAG    DS    0H                       END OF BXH LOOP\n&#DLVL   SETA  &#DLVL-1                 DECREMENT LOOP LEVEL\n         AGO   .CHKONE\n.PRC5000 AIF   ('&SYSLIST(1)' NE 'BXLE').ERR0005\n         ##B XLE,&SYSLIST(2),&SYSLIST(3),&TAG LOOP BXLE             @C1\n&STAG    DS    0H                       END OF BXLE LOOP\n&#DLVL   SETA  &#DLVL-1                 DECREMENT LOOP LEVEL\n         AIF   (N'&SYSLIST NE 3).ERR0004\n         AGO   .EXIT\n.CHKONE  AIF   (N'&SYSLIST EQ 1).EXIT\n         MNOTE 8,'Additional positional parameters can not be specified$\n                on ENDLOOP &SYSLIST(1)'\n         AGO   .EXIT\n.ERR0001 MNOTE 8,'Nesting level for loops is 0'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'LOOP= does not match corresponding LOOP'\n         AGO   .EXIT\n.ERR0003 MNOTE 8,'&SYSLIST(1) does not match type on corresponding LOOP$\n               '\n         AGO   .EXIT\n.ERR0004 MNOTE 8,'Incorrect number of parameters specified for ENDLOOP $\n               &SYSLIST(1)'\n         AGO   .EXIT\n.ERR0005 MNOTE 8,'LOOP type &SYSLIST(1) is invalid'\n         AGO   .EXIT\n.ERR0006 MNOTE 8,'Incorrect number of parameters specified on ENDLOOP U$\n               NTIL,LEAVE'\n         AGO   .EXIT\n.ERR0007 MNOTE 8,'ENDLOOP structural level is not the same as the corre$\n               ponding LOOP'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDPSD": {"ttr": 8708, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x009\\x009\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 57, "newlines": 57, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDPSD\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDPSD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDPSD\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO END A PSD\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/22/86 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#PBNAME                 PROGRAM BLOCK NAME\n         GBLA  &#SB#C                   SUBROUTINE BLOCK NUMBER\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#SDLVL                  STRUCTURAL LEVEL OF STATIC DATA\n         GBLB  &#SDPSD                  INDICATES IN PSD\n         GBLC  &#SDSVLC                 SAVE LOCATION COUNTER\n         AIF   (&#SDPSD).SKIP1\n         MNOTE 8,'ENDPSD does not correspond to a PSD'\n         MEXIT\n.SKIP1   AIF   (&#SDLVL EQ &#MLVL).SKIP2\n         MNOTE 8,'ENDPSD is not at same nesting level as PSD'\n         AGO   .SKIP3\n.SKIP2   ANOP\n&#MLVL   SETA  &#MLVL-1                 ADD ONE TO STRUCTURAL LEVEL\n.SKIP3   ANOP\n&#SDLVL  SETA  0\n&#SDPSD  SETB  0\n&#SDSVLC LOCTR ,                        SET LOCATION COUNTER BACK\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDPWA": {"ttr": 8710, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00,\\x00,\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 44, "newlines": 44, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDPWA\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDPWA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDPWA\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO END A PWA\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    7/14/85 MGG - NEW\n.*              1/23/86 MGG - ADDED TYPE=PARTIAL SUPPORT\n.*              9/10/86 MGG - ADDED SUPPORT FOR DEFINE STORAGE\n.*              1/06/87 MGG - MOVED CODE TO ##WESTD\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#WEMAC                  EPILOG MACRO\n         &#WEMAC\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDSSD": {"ttr": 8712, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x009\\x009\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 57, "newlines": 57, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDSSD\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDSSD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDSSD\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO END A SSD\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/22/86 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#PBNAME                 PROGRAM BLOCK NAME\n         GBLA  &#SB#C                   SUBROUTINE BLOCK NUMBER\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#SDLVL                  STRUCTURAL LEVEL OF STATIC DATA\n         GBLB  &#SDSSD                  INDICATES IN SSD\n         GBLC  &#SDSVLC                 SAVE LOCATION COUNTER\n         AIF   (&#SDSSD).SKIP1\n         MNOTE 8,'ENDSSD does not correspond to a SSD'\n         MEXIT\n.SKIP1   AIF   (&#SDLVL EQ &#MLVL).SKIP2\n         MNOTE 8,'ENDSSD is not at the same nesting level as SSD'\n         AGO   .SKIP3\n.SKIP2   ANOP\n&#MLVL   SETA  &#MLVL-1                 ADD ONE TO STRUCTURAL LEVEL\n.SKIP3   ANOP\n&#SDLVL  SETA  0\n&#SDSSD  SETB  0\n&#SDSVLC LOCTR ,                        RESTORE LOCATION COUNTER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDSWA": {"ttr": 8714, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00+\\x00+\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 43, "newlines": 43, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDSWA\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDSWA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDSWA\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO END A SWA\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    7/14/85 MGG - NEW\n.*              1/23/86 MGG - ADDED PARTIAL SWA SUPPORT\n.*              1/06/87 MGG - MOVED CODE TO ##UESTD\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#UEMAC                  EPILOG MACRO\n         &#UEMAC\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENDVDA": {"ttr": 8716, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00]\\x00]\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 93, "newlines": 93, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ENDVDA &SIZE=,&STORAGE=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ENDVDA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ENDVDA\n.*\n.*  PURPOSE    MACRO TO END A VARIABLE DEFINITION AREA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__ID(20)\n         GBLC  &VDA__START(20)\n         GBLC  &VDA__SIZE(20)\n         GBLC  &VDA__STORAGE(20)\n         GBLC  &VDA__GENTYPE\n         GBLC  &VDA__CSECT\n         GBLC  &VDA__EPILOG\n         GBLC  &VDA__DC\n         GBLC  &VDA__DS\n         GBLC  &VDA__EQU\n         GBLA  &VDA__LEVEL\n         AIF   (&VDA__LEVEL GE 1).PRC010\n         MNOTE 8,'ENDVDA does not have a corresponding VDA macro.'\n         MEXIT\n.PRC010  ANOP\n&I       SETC  '&VDA__ID(&VDA__LEVEL)'\n.*\n.*  Determine tags for SIZE and storage\n.*\n&VDA__SIZE(&VDA__LEVEL) SETC ''\n         AIF   ('&SIZE' EQ 'NO').PRC020\n&VDA__SIZE(&VDA__LEVEL) SETC '&SIZE'\n         AIF   ('&SIZE' NE '').PRC020\n&VDA__SIZE(&VDA__LEVEL) SETC '&I.SIZE'\n.PRC020  ANOP\n&VDA__STORAGE(&VDA__LEVEL) SETC ''\n         AIF   ('&STORAGE' EQ 'NO').PRC030\n&VDA__STORAGE(&VDA__LEVEL) SETC '&STORAGE'\n         AIF   ('&STORAGE' NE '').PRC030\n&VDA__STORAGE(&VDA__LEVEL) SETC '&I.STORAGE'\n.PRC030  ANOP\n.*\n.*  If there is a epilog macro, call it.\n.*\n         AIF   ('&VDA__EPILOG' EQ '').PRC040\n         &VDA__EPILOG\n.PRC040  ANOP\n.*\n.*  Redefine opcodes as necessary and decrement VDA level.\n.*\n.FINISH  AIF   (&VDA__LEVEL NE 1).FIN900\n         AIF   ('&VDA__DC' EQ '').FIN010\nDC       OPSYN ##DC\n##DC     OPSYN\n.FIN010  AIF   ('&VDA__DS' EQ '').FIN020\nDS       OPSYN ##DS\n##DS     OPSYN\n.FIN020  AIF   ('&VDA__EQU' EQ '').FIN030\nEQU      OPSYN ##EQU\n##EQU    OPSYN\n.FIN030  ANOP\n.FIN900  AIF   (&VDA__LEVEL LT 1).FIN910\n&VDA__LEVEL SETA &VDA__LEVEL-1\n.FIN910  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EQU": {"ttr": 8719, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x007\\x007\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 55, "newlines": 55, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    EQU\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      EQU\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - EQU\n.*\n.*  PURPOSE    MACRO USED TO REPLACE EQU OPCODE WITH AN ASSOCIATED\n.*             MACRO.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__EQU\n&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS\n&NAME    &VDA__EQU &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),    +\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        +\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     +\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    +\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    +\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    +\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    +\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    +\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    +\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    +\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    +\n               &SYSLIST(45),&SYSLIST(45),&SYSLIST(47),&SYSLIST(48),    +\n               &SYSLIST(49),&SYSLIST(50),N=&CTR\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ERREXIT": {"ttr": 8721, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x91\\x00\\x91\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 145, "newlines": 145, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         ERREXIT &CODE=,&CODEREG=,&NAME=,&LONG=PBLONGSLGT0,&BREG=   @C2\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      ERREXIT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - ERREXIT\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO INVOKE AND ERREXIT BLOCK.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*             03/20/84 MGG -  ALLOW '   ERREXIT , '\n.*              7/20/87 MGG -  REMOVED @CX, REORGANIZED AND ADDED\n.*                             ERRADDR SUPPORT.\n.*             10/18/89 MGG -  ERREXIT , FIX                        @C1\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C2\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   MASTER TAG INDEX\n         GBLA  &#PBNDX                  INDEX FOR PROGRAM BLOCK\n         GBLB  &#PBERRA                 ERROR ADDRESS OPTION\n         LCLC  &WNAME                   WORK NAME\n         LCLC  &WREG                    WORK CODE REGISTER\n         LCLC  &WBREG                   WORK BRANCH REGISTER        @C2\n         LCLC  &FTAG                    ERREXIT FAIL TAG\n         LCLC  &STAG                    ERREXIT SUCCESS TAG\n         LCLA  &CTR                     WORK COUNTER\n         LCLA  &NDX                     TAG INDEX FOR MACRO\n.*--------------------------------------------------------------------*\n.*  GET TAG INDEX, ERREXIT NAME AND CODE REGISTER INTO LOCAL VARIABLES.\n.*--------------------------------------------------------------------*\n&#MNDX   SETA  &#MNDX+1                 INCREMENT MASTER TAG INDEX\n&NDX     SETA  &#MNDX                   GET TAG INDEX\n&WREG    SETC  '&CODEREG'\n         AIF   ('&CODEREG' NE '').PRC0010\n&WREG    SETC  'R14'\n.PRC0010 ANOP\n&WNAME   SETC  '&NAME'                  SET WORK NAME\n         AIF   ('&NAME' NE '').PRC0020  IF NAME NOT SPECIFIED\n&WNAME   SETC  '#BX&#PBNDX'               USE DEFAULT NAME\n.PRC0020 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THE NOERRADDR PROGRAM OPTION IS IN EFFECT, PLACE AN OPTIONAL\n.*  CODE IN THE CODE REGISTER AND BRANCH TO THE ERROR EXIT IF THE\n.*  CONDITION IS SUCCESSFUL.\n.*--------------------------------------------------------------------*\n.PRC0100 AIF   (&#PBERRA).PRC1000\n&WBREG   SETC  '&BREG'                                              @C2\n         AIF   ('&CODE' EQ '').PRC0150                              @C2\n         LA    &WREG,&CODE              LOAD CODE (DEFAULT CODEREG)\n.PRC0150 AIF   ('&BREG' NE '').PRC0200                              @C2\n&WBREG   SETC  'R2'                                                 @C2\n.PRC0200 AIF   (N'&SYSLIST GT 2).PRC0300                            @C1\n         AIF   ('&SYSLIST(1)' NE '' OR '&SYSLIST(2)' NE '').PRC0300 @C1\n         ##B U,&WNAME,                  BRANCH TO ERREXIT           @C2+\n               LONG=&LONG,BREG=&WBREG                               @C2\n         MEXIT\n.PRC0300 ANOP\n&FTAG    SETC  '#LF&NDX'                FAIL TAG NAME\n&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS\n         ##COND &SYSLIST(1),&SYSLIST(2),                               $\n               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),                 $\n               F=&FTAG,S=&WNAME,E=&CTR,B=1,L=P,T=B,                 @C2$\n               LONG=&LONG,BREG=&WBREG                               @C2\n&FTAG    DS    0H                       LEAVE NOT EXECUTED TAG\n         MEXIT\n.PRC1000 ANOP\n.*--------------------------------------------------------------------*\n.*  IF THE ERRADDR PROGRAM OPTION IS IN EFFECT, USE A BAS INSTRUCTION\n.*  TO CALL THE ERROR EXIT IF THE CONDITION IS SATISFIED.  IF A CODE\n.*  IS SPECIFIED, GENERATE A DC FOR IT IMMEDIATELY AFTER THE BAS\n.*  INSTRUCTION.\n.*--------------------------------------------------------------------*\n&FTAG    SETC  '#LF&NDX'                FAIL TAG NAME\n&STAG    SETC  '#LS&NDX'                SUCCESS TAG NAME\n&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS\n         AIF   (N'&SYSLIST GT 2).PRC1020                            @C1\n         AIF   ('&SYSLIST(1)' NE '' OR '&SYSLIST(2)' NE '').PRC1020 @C1\n         AGO   .PRC1030                                             @C1\n.PRC1020 ##COND &SYSLIST(1),&SYSLIST(2),                            @C1$\n               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),                 $\n               F=&FTAG,S=&STAG,E=&CTR,B=1,L=N,T=B\n.PRC1030 ANOP                                                       @C2\n&WBREG   SETC  '&BREG'                                              @C2\n         AIF   ('&BREG' NE '').PRC1040                              @C2\n&WBREG   SETC  '&WREG'                                              @C2\n.PRC1040 ANOP                                                       @C2\n&STAG    ##B AS,&WREG,&WNAME,           BRANCH TO ERREXIT           @C2+\n               LONG=&LONG,BREG=&WBREG                               @C2\n         AIF   ('&CODE' EQ '').PRC1050                              @C2\n         DC    AL2(&CODE)               ERREXIT CODE\n.PRC1050 ANOP                                                       @C2\n&FTAG    DS    0H                       ERREXIT NOT TAKEN\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXI": {"ttr": 8964, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00H\\x00H\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 72, "newlines": 72, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         EXI   &REG,                    REGISTER FOR EXECUTE.          +\n               &INSTR,                  INSTRUCTION TO EXECUTE.        +\n               &GEN=LOCTR               GENERATE WITH LOCTR (\u00acINLINE)\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      EXI\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - EXI\n.*\n.*  PURPOSE    MACRO TO GENERATE AN EX INSTRUCTION AND INSTRUCTION\n.*             THAT EX REFERS TO (EXECUTE IMMEDIATE).\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/31/85 PLH - NEW\n.*              8/05/05 MGG - CHANGED TO USE ##SD MACRO.\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#PB#C                   NUMBER OF CURRENT PROGRAM BLOCK\n         GBLB  &#PBLOCR                 PROGRAM BLOCK LOCTR OPTION\n         GBLC  &#BTYPE(20)              BLOCK TYPE.\n         LCLA  &NDX                     TAG INDEX FOR THIS MACRO\n&#MNDX   SETA  &#MNDX+1                 CALCULATE NEW TAG INDEX.\n&NDX     SETA  &#MNDX                   SET INDEX TO USE IN THIS MACRO.\n         LCLC  &TAG1,&TAG2,&OPC\n&TAG1    SETC  '#EX#&NDX'               GENERATE TAGS FOR TARGET OF EX\n&OPC     SETC  '&INSTR(1)'              EXTRACT OPCODE.\n         LCLC  &OPS                     WILL BUILD OPERAND STRING HERE.\n         AIF   (N'&INSTR LE 1).X100     DETERMINE NUMBER OF OPERANDS,\n&OPS     SETC  '&INSTR(2)'                  AND BUILD\n         AIF   (N'&INSTR LE 2).X100             OPERAND\n&OPS     SETC  '&OPS,&INSTR(3)'                   STRING.\n         AIF   (N'&INSTR LE 3).X100\n&OPS     SETC  '&OPS,&INSTR(4)'\n.X100    ANOP\n         EX    &REG,&TAG1               GENERATED EX INSTRUCTION.\n         AIF   (NOT &#PBLOCR).X300      CHECK FOR INLINE OR LOCTR.\n         ##SD  TYPE=PARTIAL\n&TAG1    &OPC  &OPS\n         ##ENDSD\n         AGO   .MEND\n.X300    ANOP                           IF GENERATING INLINE,\n&TAG2    SETC  '#EXEND#&NDX'            BRANCH POINT FOR SKIP.\n         B     &TAG                     BRANCH OVER EX'ED INSTR.\n&TAG1    &OPC  &OPS\n&TAG2    DS    0H                       BRANCH HERE TO SKIP INSTR.\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FILL": {"ttr": 8967, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\xd8\\x00\\xd8\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 216, "newlines": 216, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&TAG     FILL  &PLACE,&CHAR,&LENGTH=(,S)\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      FILL\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - FILL\n.*\n.*  PURPOSE    MACRO USED TO FILL AN AREA OF STORAGE WITH A CHARACTER.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  JCB\n.*              7/14/85 - DEFINE &LVALID\n.*              2/03/86 - CHANGED USE OF L',                        @C2\n.*                        ADDED 'XC' FOR SHORT FILLS FOR X'00'      @C3\n.*              1/18/88 - ADDED SUPPORT FOR SHORT 0(R1) FILLS       @C4\n.*              9/01/88 - MED AND LONG FILLS FOR X'00' USE SLR 1,1, @C5\n.*                        NOT LA 1,X'00'/SLL 1,24 SEQUENCE          @C5\n.*              7/23/03 - ADDED SUPPORT FOR ##LA FORM ADDRESSES ON  @C6\n.*                        LONG FORM FILLS &PLACE.                   @C6\n.*\n.*--------------------------------------------------------------------*\n.*\n.*   FILL MACRO FILLS A CHARACTER STRING WITH A CHARACTER.\n.*\n.*  SYM FILL TAG  ,LENGTH=((R)|EQUATE|NUMBER,S|M|L)   ,CHAR|X'00'\n.*        SMALL: 256 OR LESS\n.*        MEDIUM: 4095 OR LESS\n.*        LARGE: >4K\n.*      DEFAULTS: LENGTH=(L'TAG,S),CHAR=X'00'\n.*\n         LCLC  &C\n         LCLC  &REG\n         LCLC  &LEN\n         LCLB  &RFORM\n         LCLA  &L\n         LCLA  &I,&ISAVE                                            @C4\n         LCLC  &DEST1,&DEST2                                        @C4\n         LCLB  &LVALID                                              @C1\n         AIF   ('&TAG' EQ '').NOTAG\n&TAG     DS    0H\n.NOTAG   ANOP\n.*--------------------------------------------------------------------*\n.*  SET FILL CHARACTER OR DEFAULT IT TO X'00'\n.*--------------------------------------------------------------------*\n         AIF   ('&CHAR' EQ '').CHR0000\n&C       SETC  '&CHAR'                 SET FILL CHARACTER\n         AGO   .CHR0010\n.CHR0000 ANOP ,\n&C       SETC  'X''00'''               SET FILL CHARACTER\n.CHR0010 ANOP ,\n.*--------------------------------------------------------------------*\n.*  DETERMINE IF LENGTH SPECIFIED, AND IF IT'S A REGISTER\n.*--------------------------------------------------------------------*\n&RFORM   SETB  0                       SET REGFORM OFF\n&LVALID  SETB  0\n         AIF   ('&LENGTH(1)' NE '').LEN0000 NULL LENGTH? NO, .LEN0000\n&LEN     SETC  'L''&PLACE'             SET LCLC VAR. TO LENGTH\n&LVALID  SETB  1\n         AGO   .TYP0000                GO EXPAND 'SHORT'.\n.LEN0000 ANOP ,                        A 'LEN=' EXISTS.\n         AIF   ('&LENGTH(1)'(1,1) NE '(').NUM0000 (RNN) FORM, .REG0000\n.REG0000 ANOP\n&REG     SETC  '&LENGTH(1)'            SET 'REG' FOR INSTRUCTIONS\n&RFORM   SETB    1                    SET REG-FORM FLAG\n         AGO   .TYP0000             GO DETERMINE TYPE VALUE.\n.NUM0000 ANOP ,\n&LEN     SETC  '&LENGTH(1)'\n&LVALID  SETB  1\n.TYP0000 ANOP\n.*--------------------------------------------------------------------*\n.*  DETERMINE TYPE OF CALL: SHORT, MEDIUM OR LONG\n.*--------------------------------------------------------------------*\n         AIF   ('&LENGTH(2)' EQ '').SHO0000\n         AIF   ('&LENGTH(2)'(1,1) EQ 'L').LNG0000\n         AIF   ('&LENGTH(2)'(1,1) EQ 'M').MED0000\n         AIF   ('&LENGTH(2)'(1,1) NE 'S').LENERR\n.*--------------------------------------------------------------------*\n.*  SHORT FILL\n.*--------------------------------------------------------------------*\n.SHO0000 ANOP\n         AIF   (&RFORM).SHX0000\n.*--------------------------------------------------------------------*\n.*  DETERMINE IF LENGTH IS OF THE FORM: DISP(REG) (E.G 0(R1))\n.*--------------------------------------------------------------------*\n.SHO0010 ANOP  ,                                                    @C4\n&I       SETA  1                                                    @C4\n.SHO0020 AIF   ('&PLACE'(&I,1) EQ '(').SHO0030                      @C4\n&I       SETA  &I+1                                                 @C4\n         AIF   (&I LE K'&PLACE).SHO0020                             @C4\n         AGO   .SHO0100                                             @C4\n.*--------------------------------------------------------------------*\n.*  POINTER TO AREA TO FILL IS OF FORM: DISP(REG). MAKE SURE A LENGTH\n.*  WAS PROVIDED (L'TAG IS NO GOOD HERE), THEN PICK THE ADDRESS APART.\n.*--------------------------------------------------------------------*\n.SHO0030 AIF   ('&LENGTH(1)' NE '').SHO0040                         @C4\n         MNOTE 8,'Length for FILL required but not specified'       @C4\n         AGO   .FILLXIT                                             @C4\n.SHO0040 ANOP                                                       @C4\n&DEST1   SETC  '&PLACE'(1,&I-1)                                     @C4\n&ISAVE   SETA  &I+1                                                 @C4\n.SHO0050 AIF   ('&PLACE'(&I,1) EQ ')').SHO0060                      @C4\n&I       SETA  &I+1                                                 @C4\n         AIF   (&I LE K'&PLACE).SHO0050                             @C4\n         MNOTE 8,'Unable to parse FILL destination'                 @C4\n         AGO   .FILLXIT                                             @C4\n.SHO0060 ANOP  ,                                                    @C4\n&I       SETA  &I-&ISAVE                                            @C4\n&DEST2   SETC  '&PLACE'(&ISAVE,&I)                                  @C4\n&LEN     SETC  '&LENGTH(1)'                                         @C4\n         AIF   ('&LENGTH'(1,1) EQ '(').SRG0000\n         AIF   ('&C' EQ 'X''00''' OR '&C' EQ '0').SHO0080           @C5\n         MVI   &PLACE,&C            MOVE INITIAL FILL BYTE          @C4\n         MVC   1+&DEST1.(&LEN.-1,&DEST2.),&PLACE                    @C4\n         AGO   .FILLXIT                                             @C4\n.SHO0080 XC    &DEST1.(&LEN.,&DEST2.),&PLACE                        @C5\n         AGO   .FILLXIT                                             @C4\n.SRG0000 ANOP  ,\n&REG     SETC  '&LEN'\n         LCLC  &EXIOP1\n&EXIOP1  SETC  '&DEST1.(0,&DEST2.)'\n         BCTR  &REG.,0\n         AIF   ('&C' EQ 'X''00''' OR '&C' EQ '0').SRG0010\n         BCTR  &REG.,0\n         MVI   &PLACE.,&C.\n         EXI   &REG.,(MVC,1+&EXIOP1,&PLACE.)\n         AGO   .FILLXIT                                             @C4\n.SRG0010 ANOP  ,\n.*       MNOTE *,'EXI   &REG.,(XC,&EXIOP1,&PLACE.)'\n         EXI   &REG.,(XC,&EXIOP1,&PLACE.)\n         AGO   .FILLXIT                                             @C4\n.*--------------------------------------------------------------------*\n.*  STANDARD SHORT FILL\n.*--------------------------------------------------------------------*\n.SHO0100 AIF   ('&C' NE 'X''00''' AND '&C' NE '0').SHO0110          @C5\n         XC    &PLACE.(&LEN),&PLACE  USE XC TO ZERO OUT STRING      @C3\n         AGO   .FILLXIT                                             @C5\n.SHO0110 MVI   &PLACE.,&C.          MOVE INITIAL FILL BYTE          @C5\n         MVC   1+&PLACE.(&LEN.-1),&PLACE  COPY THROUGH FIELD\n         AGO   .FILLXIT\n.SHX0000 AIF   ('&PLACE'(1,1) EQ '(').SHXREG0\n         BCTR  &REG.,0              DECREMENT LENGTH REGISTER\n         AIF   ('&C' NE 'X''00''' AND '&C' NE '0').SHX0010\n         BCTR  &REG.,0                TWICE\n         MVI   &PLACE.,&C.          MOVE INITIAL FILL BYTE\n         EXI   &REG,(MVC,1+&PLACE.(0),&PLACE)\n         LA    &REG.,2(,&REG.)      RESTORE LENGTH REGISTER\n         AGO   .FILLXIT\n.SHX0010 EXI   &REG,(XC,&PLACE.(0),&PLACE)\n         LA    &REG.,1(,&REG.)      RESTORE LENGTH REGISTER\n         AGO   .FILLXIT\n.SHXREG0 ANOP\n         BCTR  &REG.,0              DECREMENT LENGTH REGISTER\n         AIF   ('&C' NE 'X''00''' AND '&C' NE '0').SHXREG1\n         BCTR  &REG.,0                TWICE\n         MVI   0&PLACE.,&C.         MOVE INITIAL FILL BYTE\n.*       EX    &REG.,*+8            EXECUTE THE MOVE\n.*       B     *+10                 SKIP EXECUTED MOVE\n.*       MVC   1(0,&PLACE.),0&PLACE ** EXECUTED **\n         EXI   &REG,(MVC,1(0,&PLACE),0(&PLACE))\n         LA    &REG.,2(,&REG.)      RESTORE LENGTH REGISTER\n         AGO   .FILLXIT\n.SHXREG1 EXI   &REG,(XC,0(0,&PLACE),0(&PLACE))\n         LA    &REG.,1(,&REG.)      RESTORE LENGTH REGISTER\n         AGO   .FILLXIT\n.MED0000 ANOP  ,                    GENERATE MEDIUM-LENGTH FILL\n         AIF   (&RFORM).LNG0000     LONGFORM, SAME DIFFERENCE\n         AIF   (&LVALID).MED0010\n         LA    15,&LENGTH(1)           GET LENGTH VALUE\n         AGO   .MVL0000             GO DO MOVE-LONG CODE\n.MED0010 ANOP ,\n         LA    15,&LEN              GET LENGTH VALUE                @C2\n         AGO   .MVL0000\n.LNG0000 ANOP ,\n         AIF   (&RFORM).LNG0010\n         MNOTE 8,'Long form FILL requires R-form length'\n         AGO   .FILLXIT\n.LNG0010 ANOP ,\n         LR    15,&REG.             GET LENGTH OF FILL AREA\n.MVL0000 ANOP ,\n         ##LA  14,&PLACE.           GET DESTINATION ADDRESS         @C6\n         SLR   0,0                  NO SOURCE ADDRESS\n         AIF   ('&C' EQ 'X''00''' OR '&C' EQ '0').MVL0010           @C5\n         LA    1,&C.                LOAD FILL CHARACTER\n         SLL   1,24                 SHIFT TO HIGH-ORDER BYTE\n         AGO   .MVL0020\n.MVL0010 SLR   1,1                  ZERO DEST LENGTH AND FILL BYTE  @C5\n.MVL0020 MVCL  14,0                 PROPAGATE FILL CHARACTER.\n.FILLXIT MEXIT\n.LENERR  MNOTE 8,'FILL operation type invalid: Must be S)hort, M)edium,*\n                or L)ong.'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IBIT": {"ttr": 8972, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00O\\x00O\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 79, "newlines": 79, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    IBIT  ,                        INVERT BIT MACRO\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      IBIT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - IBIT\n.*\n.*  PURPOSE    MACRO USED TO INVERT A BIT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         LCLA  &POSFLAG                 POSITION OF FLAG\n         LCLA  &CTR                     COUNTER\n         LCLC  &BYTE                    BYTE NAME\n         LCLC  &FLAGS                   CONCATINATION OF FLAGS\n         AIF   (N'&SYSLIST NE 1).PRC0100\n         AIF   (N'&SYSLIST(1) GT 8).ERR0001  ERROR IF MORE THEN 8 FLAGS\n         AIF   (K'&SYSLIST(1,1) LT 6).ERR0003  ERROR IF FLAG < 6 CHARS\n&BYTE    SETC  '&SYSLIST(1,1)'(1,5)     BYTE NAME IS FIRST FIVE CHARS\n&FLAGS   SETC  '&SYSLIST(1,1)'          MOVE IN FIRST FLAG\n&CTR     SETA  2                        LOOP CONCATINATING EACH FLAG\n.PRC0050 AIF   (&CTR GT N'&SYSLIST(1)).PRC0060   LEAVE LOOP IF FINISHED\n         AIF   (K'&SYSLIST(1,&CTR) LT 6).ERR0003    ERROR\n         AIF   ('&SYSLIST(1,&CTR)'(1,5) NE '&BYTE').ERR0004 ERROR\n&FLAGS   SETC  '&FLAGS+&SYSLIST(1,&CTR)' CONCATINATE\n&CTR     SETA  &CTR+1                   ADD 1 TO COUNTER\n         AGO   .PRC0050                 LOOP FOR ALL FLAGS\n.PRC0060 ANOP\n&NAME    XI    &BYTE,&FLAGS             INVERT FLAG(S)\n         MEXIT\n.PRC0100 AIF   (N'&SYSLIST NE 2).ERR0002     ERROR IF MORE THAN 2 PARMS\n         AIF   (N'&SYSLIST(2) GT 8).ERR0001  ERROR IF MORE THAN 8 FLAGS\n&BYTE    SETC  '&SYSLIST(1)'            SET BYTE NAME\n&FLAGS   SETC  '&SYSLIST(2,1)'          MOVE IN FIRST FLAG\n&CTR     SETA  2                        LOOP CONCATINATING EACH FLAG\n.PRC0150 AIF   (&CTR GT N'&SYSLIST(2)).PRC0160 LEAVE LOOP IF FINISHED\n&FLAGS   SETC  '&FLAGS+&SYSLIST(2,&CTR)' CONCATINATE\n&CTR     SETA  &CTR+1                   ADD 1 TO COUNTER\n         AGO   .PRC0150                 LOOP FOR ALL FLAGS\n.PRC0160 ANOP\n&NAME    XI    &BYTE,&FLAGS             INVERT FLAG(S)\n         MEXIT\n.ERR0001 MNOTE 8,'No more than eight flags can be specified'\n         MEXIT\n.ERR0002 MNOTE 8,'IBIT macro can have no more than two operands'\n         MEXIT\n.ERR0003 MNOTE 8,'If byte is not specified, flag name must be at least $\n               six characters long'\n         MEXIT\n.ERR0004 MNOTE 8,'If byte is not specified, the first five characters o$\n               f all flags must match'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IF": {"ttr": 8975, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00Q\\x00Q\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 81, "newlines": 81, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         IF    &NAME=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      IF\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - IF\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START AN IF STRUCTURE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*              9/15/89 MGG - ADDED T=A ON ##COND MACRO CALL.       @C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#IMLVL(20)              STRUCTURAL LEVEL OF IF\n         GBLA  &#ILVL                   IF NEXTING LEVEL\n         GBLA  &#INDX(20)               IF TAG INDEX\n         GBLA  &#INDX2(20)              IF TAG INDEX 2\n         GBLB  &#IELSE(20)              ELSE ENCOUNTERED\n         GBLC  &#INAME(20)              IF NAMES\n         LCLA  &CTR                     WORK COUNT\n         LCLC  &FTAG,&STAG              FAIL TAG AND SUCCESS TAG\n&#MNDX   SETA  &#MNDX+1                 ADD ONE TO TAG INDEX\n         AIF   (&#ILVL GE 20).ERR0001\n&#ILVL   SETA  &#ILVL+1                 ADD ONE TO NESTING LEVEL\n&#MLVL   SETA  &#MLVL+1                 ADD ONE TO STRUCTURAL LEVEL\n&#IMLVL(&#ILVL) SETA  &#MLVL            SAVE STRUCTURAL LEVEL OF IF\n&#INDX(&#ILVL)  SETA  &#MNDX            SET BLOCK TAG INDEX\n&#INDX2(&#ILVL) SETA  &#MNDX            SET BLOCK TAG INDEX\n&#IELSE(&#ILVL) SETB  0                 ELSE ENCOUNTERED FLAG\n&#INAME(&#ILVL) SETC '&NAME'            SAVE NAME\n&FTAG    SETC  '#IF&#MNDX'              FAIL TAG NAME\n&STAG    SETC  '#IS&#MNDX'              SUCCESS TAG NAME\n&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS\n         ##COND &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),                   $\n               &SYSLIST(4),&SYSLIST(5),&SYSLIST(6),                    $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),                 $\n               F=&FTAG,S=&STAG,E=&CTR,B=1,T=A                       @C1\n&STAG    DS    0H                       START OF SUCCESSFUL IF CODE\n         AGO   .EXIT\n.ERR0001 MNOTE 8,'IFs can only be nested 20 deep'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LCBA": {"ttr": 9217, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x7f\\x00\\x7f\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 127, "newlines": 127, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         LCBA  &REG,&CB\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      LCBA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - LCBA\n.*\n.*  PURPOSE    MACRO USED TO LOAD ADDRESS OF CONTROL BLOCK\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   05/06/86 - NEW  MGG\n.*             08/10/05 - MGG Changed to use ##B.\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   STRUCTURED MACRO TAG INDEX\n         GBLA  &#MCVREG                 CONVERTED REGISTER (##CVREG)\n         LCLC  &TAG1,&TAG2,&TAG3        WORK TAGS\n&#MNDX   SETA  &#MNDX+1                 INCREMENT TAG INDEX\n.*--------------------------------------------------------------------*\n.*  INSURE THAT REG IS R1-R15\n.*--------------------------------------------------------------------*\n         ##CVREG &REG\n         AIF   (&#MCVREG LE 15 AND &#MCVREG GT 0).CHK0100\n         MNOTE 8,'&REG is invalid.  Register must be R1-R15.'\n         MEXIT\n.CHK0100 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD ADDRESS OF CURRENT ACEE\n.*--------------------------------------------------------------------*\n         AIF   ('&CB' NE 'ACEE').ACE9999\n&TAG1    SETC  '#LE&#MNDX'\n&TAG2    SETC  '#LS&#MNDX'\n         L     &REG,540                POINT TO CURRENT TCB\n         TM    278(&REG),X'80'         TCB EXTENTION PRESENT?\n         ##B Z,&TAG2                   NO, SKIP LOAD FROM TCB\n         ICM   &REG,B'1111',340(&REG)  LOAD ACEE POINTER\n         ##B NZ,&TAG1                  BRANCH IF PRESENT\n&TAG2    L     &REG,548                POINT TO CURRENT ASCB\n         L     &REG,108(,&REG)         POINT TO CURRENT ASXB\n         ICM   &REG,B'1111',200(&REG)  POINT TO ACEE\n&TAG1    DS    0H                      END OF LOAD ACEE CODE\n         MEXIT\n.ACE9999 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD ADDRESS OF ASCB\n.*--------------------------------------------------------------------*\n         AIF   ('&CB' NE 'ASCB').ASC9999\n         ICM   &REG,B'1111',548         POINT TO CURRENT ASCB\n         MEXIT\n.ASC9999 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD ADDRESS OF ASXB\n.*--------------------------------------------------------------------*\n         AIF   ('&CB' NE 'ASXB').ASX9999\n         L     &REG,548                 POINT TO CURRENT ASCB\n         ICM   &REG,B'1111',108(&REG)   POINT TO CURRENT ASXB\n         MEXIT\n.ASX9999 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD ADDRESS OF CVT\n.*--------------------------------------------------------------------*\n         AIF   ('&CB' NE 'CVT').CVT9999\n         ICM   &REG,B'1111',16          POINT TO CVT\n         MEXIT\n.CVT9999 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD ADDRESS OF CURRENT TCB\n.*--------------------------------------------------------------------*\n         AIF   ('&CB' NE 'TCB').TCB9999\n         ICM   &REG,B'1111',540         POINT TO CURRENT TCB\n         MEXIT\n.TCB9999 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD ADDRESS OF UJT\n.*--------------------------------------------------------------------*\n         AIF   ('&CB' NE 'UJT').UJT9999\n&TAG1    SETC  '#LL&#MNDX'\n&TAG2    SETC  '#LF&#MNDX'\n&TAG3    SETC  '#LE&#MNDX'\n         L     &REG,540                 POINT TO CURRENT TCB\n&TAG1    TM    168(&REG),X'80'          DOES THIS TCB POINT TO UJT?\n         ##B O,&TAG2                    YES, FOUND\n         ICM   &REG,B'1111',132(&REG)   NO, POINT TO NEXT TCB\n         ##B NZ,&TAG1                   LOOP UNTIL END OF TCB CHAIN\n         ##B U,&TAG3                    SKIP SUCCESS CODE\n&TAG2    L     &REG,168(,&REG)          POINT TO UVT\n         N     &REG,=A(X'00FFFFFF')     CLEAR HIGH BYTE AND SET CC\n&TAG3    DS    0H                       END OF LOAD UVT CODE\n         MEXIT\n.UJT9999 ANOP\n.*--------------------------------------------------------------------*\n.*  LOAD ADDRESS OF UVT\n.*--------------------------------------------------------------------*\n         AIF   ('&CB' NE 'UVT').UVT9999\n         L     &REG,16                  POINT TO CVT\n         L     &REG,204(,&REG)          LOAD UVT ADDRESS\n         N     &REG,=A(X'00FFFFFF')     CLEAR HIGH BYTE AND SET CC\n         MEXIT\n.UVT9999 ANOP\n.*--------------------------------------------------------------------*\n         MNOTE 8,'&CB is not a supported control block'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LEAVE": {"ttr": 9220, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x01B\\x01B\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 322, "newlines": 322, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         LEAVE &BLOCK=,                 LEAVE BLOCK                    $\n               &LOOP=,                  LEAVE LOOP                     $\n               &IF=,                    LEAVE IF                       $\n               &CASEBLK=,               LEAVE CASEBLK                  $\n               &LONG=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      LEAVE\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - LEAVE\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO LEAVE A STRUCTURE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 MGG - NEW\n.*             11/21/83 MGG - &ENBLK WAS UNDEFINED\n.*              7/14/85 MGG - &PBSMWA WAS UNDEFINED                 @C1\n.*             08/02/05 MGG - CHANGED TO USE ##B MACRO FOR BRANCHING@C2\n.*                          - CHANGED AMODE SETTING TO BE COMPATABLE@C2\n.*                            WITH NOCODEBASE OPTION.               @C2\n.*\n.*--------------------------------------------------------------------*\n         GBLB  &#PBXA                   XA\n         GBLB  &#PB370                  370\n         GBLA  &#MNDX                   MASTER TAG INDEX\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#BMLVL(20)              STRUCTURAL LEVEL OF BLOCK\n         GBLC  &#BNAME(20)              BLOCK NAME\n         GBLA  &#BLVL                   BLOCK LEVEL\n         GBLA  &#BNDX(20)               BLOCK TAG INDEX\n         GBLC  &#BTYPE(20)              BLOCK TYPE\n         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK\n         GBLC  &#BSV1(20)               BLOCK SAVE PARM 1\n         GBLC  &#BSV2(20)               BLOCK SAVE PARM 2\n         GBLC  &#BSV3(20)               BLOCK SAVE PARM 3\n         GBLA  &#DMLVL(20)              STRUCTURAL LEVEL OF LOOP\n         GBLC  &#DNAME(20)              LOOP NAME\n         GBLA  &#DLVL                   LOOP LEVEL\n         GBLA  &#DNDX(20)               LOOP TAG INDEX\n         GBLA  &#IMLVL(20)              STRUCTURAL LEVEL OF IF\n         GBLC  &#INAME(20)              IF NAME\n         GBLA  &#ILVL                   IF LEVEL\n         GBLA  &#INDX(20)               IF TAG INDEX\n         GBLA  &#CMLVL(20)              STRUCTURAL LEVEL OF CASEBLK\n         GBLC  &#CNAME(20)              CASEBLK NAME\n         GBLA  &#CLVL                   CASELBK LEVEL\n         GBLA  &#CNDX(20)               CASEBLK TAG INDEX\n         GBLC  &#PBSMWA                 STRUCTURED MACRO WA TAG     @C1\n         LCLA  &CTR                     WORK COUNTER\n         LCLA  &ENBLK                   WORK VARIABLE\n         LCLC  &NAME                    NAME OF THING LEAVING\n         LCLC  &STRUC                   TYPE OF STRUCTURE LEAVING\n         LCLC  &TAG                     LEAVE TAG NAME\n         LCLC  &TAG2,&TAG3              WORK TAGS\n         LCLC  &FTAG                    LEAVE FAIL TAG NAME\n         LCLC  &STAG                    LEAVE SUCCESS TAG NAME\n         LCLC  &LOGIC                   LOGIC FOR ##COND\n         LCLA  &SMLVL                   LEAVE TO THIS STRUCTURAL LEVEL\n&#MNDX   SETA  &#MNDX+1\n.PRC1000 AIF   ('&BLOCK' EQ '').PRC2000\n.*--------------------------------------------------------------------*\n.* LEAVE BLOCK.\n.*--------------------------------------------------------------------*\n         AIF   ('&LOOP' NE '').ERR0001\n         AIF   ('&IF' NE '').ERR0001\n         AIF   ('&CASEBLK' NE '').ERR0001\n&STRUC   SETC  'BLOCK'\n&NAME    SETC  '&BLOCK'\n         AIF   (&#BLVL LE 0).ERR0002\n         AIF   ('&NAME' NE '*').PRC1100\n&TAG     SETC  '#BE&#BNDX(&#BLVL)'\n&SMLVL   SETA  &#BMLVL(&#BLVL)\n         AGO   .PRC8000\n.PRC1100 ANOP\n&CTR     SETA  &#BLVL                   BLOCK LEVEL\n.PRC1110 AIF   ('&NAME' EQ '&#BNAME(&CTR)').PRC1200\n&CTR     SETA  &CTR-1\n         AIF   (&CTR GT 0).PRC1110      LOOP\n         AGO   .ERR0003\n.PRC1200 ANOP\n&TAG     SETC  '#BE&#BNDX(&CTR)'\n&SMLVL   SETA  &#BMLVL(&CTR)\n         AGO   .PRC8000\n.PRC2000 AIF   ('&IF' EQ '').PRC3000\n.*--------------------------------------------------------------------*\n.* LEAVE IF.\n.*--------------------------------------------------------------------*\n         AIF   ('&LOOP' NE '').ERR0001\n         AIF   ('&BLOCK' NE '').ERR0001\n         AIF   ('&CASEBLK' NE '').ERR0001\n&STRUC   SETC  'IF'\n&NAME    SETC  '&IF'\n         AIF   (&#BLVL LE 0).ERR0002\n         AIF   ('&NAME' NE '*').PRC2100\n&TAG     SETC  '#IE&#INDX(&#ILVL)'\n&SMLVL   SETA  &#IMLVL(&#ILVL)\n         AGO   .PRC8000\n.PRC2100 ANOP\n&CTR     SETA  &#ILVL                   IF LEVEL\n.PRC2110 AIF   ('&NAME' EQ '&#INAME(&CTR)').PRC2200\n&CTR     SETA  &CTR-1\n         AIF   (&CTR GT 0).PRC2110      LOOP\n         AGO   .ERR0003\n.PRC2200 ANOP\n&TAG     SETC  '#IE&#INDX(&CTR)'\n&SMLVL   SETA  &#IMLVL(&CTR)\n         AGO   .PRC8000\n.PRC3000 AIF   ('&LOOP' EQ '').PRC4000\n.*--------------------------------------------------------------------*\n.* LEAVE LOOP.\n.*--------------------------------------------------------------------*\n         AIF   ('&IF' NE '').ERR0001\n         AIF   ('&BLOCK' NE '').ERR0001\n         AIF   ('&CASEBLK' NE '').ERR0001\n&STRUC   SETC  'LOOP'\n&NAME    SETC  '&LOOP'\n         AIF   (&#DLVL LE 0).ERR0002\n         AIF   ('&NAME' NE '*').PRC3100\n&TAG     SETC  '#DE&#DNDX(&#DLVL)'\n&SMLVL   SETA  &#DMLVL(&#DLVL)\n         AGO   .PRC8000\n.PRC3100 ANOP\n&CTR     SETA  &#DLVL                   LOOP LEVEL\n.PRC3110 AIF   ('&NAME' EQ '&#DNAME(&CTR)').PRC3200\n&CTR     SETA  &CTR-1\n         AIF   (&CTR GT 0).PRC3110      LOOP\n         AGO   .ERR0003\n.PRC3200 ANOP\n&TAG     SETC  '#DE&#DNDX(&CTR)'\n&SMLVL   SETA  &#DMLVL(&CTR)\n         AGO   .PRC8000\n.PRC4000 AIF   ('&CASEBLK' EQ '').PRC5000\n.*--------------------------------------------------------------------*\n.* LEAVE CASEBLK.\n.*--------------------------------------------------------------------*\n         AIF   ('&BLOCK' NE '').ERR0001\n         AIF   ('&IF' NE '').ERR0001\n         AIF   ('&LOOP' NE '').ERR0001\n&STRUC   SETC  'CASEBLK'\n&NAME    SETC  '&CASEBLK'\n         AIF   (&#CLVL LE 0).ERR0002\n         AIF   ('&NAME' NE '*').PRC4100\n&TAG     SETC  '#CE&#CNDX(&#CLVL)'\n&SMLVL   SETA  &#CMLVL(&#CLVL)\n         AGO   .PRC8000\n.PRC4100 ANOP\n&CTR     SETA  &#CLVL                   CASEBLK LEVEL\n.PRC4110 AIF   ('&NAME' EQ '&#CNAME(&CTR)').PRC4200\n&CTR     SETA  &CTR-1\n         AIF   (&CTR GT 0).PRC4110      CASEBLK\n         AGO   .ERR0003\n.PRC4200 ANOP\n&TAG     SETC  '#CE&#CNDX(&CTR)'\n&SMLVL   SETA  &#CMLVL(&CTR)\n         AGO   .PRC8000\n.PRC5000 AGO   .ERR0004                 NO KEYWORD SPECIFIED\n.*--------------------------------------------------------------------*\n.* FIND LEVEL OF ENCLOSING BLOCK.\n.*--------------------------------------------------------------------*\n.PRC8000 ANOP\n&ENBLK   SETA  &#BLVL\n.PRC8100 AIF   (&#BMLVL(&ENBLK) LE &SMLVL).PRC8110\n&ENBLK   SETA  &ENBLK-1\n         AIF   (&ENBLK GT 0).PRC8100\n.*--------------------------------------------------------------------*\n.* IF (ENCLOSEING BLOCK IS NOT INNERMOST BLOCK AND\n.* (AMODE OF CONTAINING BLOCK IS NOT EQUATE TO INNERMOST BLOCK\n.* AND (STRUCTURE WE ARE LEAVING IS NOT BLOCK OR (STRUCTURE\n.* WE ARE LEAVING IS BLOCK AND IT'S ENCLOSING BLOCK IS SAME\n.* ADDRESSING MODE))) OR BLOCKS CONTAINED SAVE REGISTERS) THEN\n.* SPECIAL PROCESSING IS REQUIRED.\n.*--------------------------------------------------------------------*\n         AGO   .PRC8600                 OUTSIDE OF BLOCK\n.PRC8110 AIF   (&ENBLK GE &#BLVL).PRC8600\n         AIF   (&#BAMODE(&ENBLK) EQ &#BAMODE(&#BLVL)).PRC8190\n         AIF   ('&STRUC' NE 'BLOCK').PRC8500\n         AIF   (&#BLVL LE 1).PRC8500\n         AIF   (&#BAMODE(&ENBLK) EQ &#BAMODE(&ENBLK-1)).PRC8500\n.PRC8190 ANOP\n&CTR     SETA  &ENBLK+1\n.PRC8200 AIF   ('&#BSV1(&CTR)' NE '').PRC8500\n&CTR     SETA  &CTR+1\n         AIF   (&CTR LE &#BLVL).PRC8200\n         AGO   .PRC8600\n.*--------------------------------------------------------------------*\n.* SPECIAL RESTORES AND/OR AMODE CHANGES NEEDED IF HERE.\n.*--------------------------------------------------------------------*\n.PRC8500 AIF   (N'&SYSLIST EQ 0).PRC9000\n&STAG    SETC  '#LS&#MNDX'              SUCCESS TAG\n&FTAG    SETC  '#LF&#MNDX'              FAIL TAG\n&LOGIC   SETC  'N'                      NEGATIVE LOGIC\n         AGO   .PRC8700\n.*--------------------------------------------------------------------*\n.* NO SPECIAL RESTORES OR AMODE CHANGES NEEDED IF HERE.\n.*--------------------------------------------------------------------*\n.PRC8600 AIF   (N'&SYSLIST EQ 0).PRC9800\n&STAG    SETC  '&TAG'                   SUCCESS TAG NAME\n&FTAG    SETC  '#LF&#MNDX'              FAIL TAG NAME\n&LOGIC   SETC  'P'                      POSITIVE LOGIC\n.*--------------------------------------------------------------------*\n.* GENERATE CONDITION TESTS.\n.*--------------------------------------------------------------------*\n.PRC8700 ANOP\n&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS\n         ##COND &SYSLIST(1),&SYSLIST(2),                               $\n               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),                 $\n               F=&FTAG,S=&STAG,E=&CTR,B=1,L=&LOGIC,T=B\n.*--------------------------------------------------------------------*\n.* IF NO SPECIAL RESTORES OR AMODE CHANGES ARE NEEDED THEN GENERATE\n.* LEAVE CONDITION FAIL TAG AND EXIT MACRO.\n.*--------------------------------------------------------------------*\n         AIF   ('&LOGIC' EQ 'P').PRC8800\n&STAG    DS    0H                       LEAVE CONDITIONS MET\n         AGO   .PRC9000\n.PRC8800 ANOP\n&FTAG    DS    0H                       LEAVE NOT DONE\n         MEXIT\n.*--------------------------------------------------------------------*\n.* GENERATE SPECIAL RESTORES AND AMODE CHANGES.\n.*--------------------------------------------------------------------*\n.PRC9000 ANOP\n&CTR     SETA  &#BLVL\n.PRC9100 AIF   (&CTR LE &ENBLK).PRC9200\n         AIF   ('&#BSV1(&CTR)' EQ '').PRC9190\n         ##RST R15=NO,LVL=&CTR\n.PRC9190 ANOP\n&CTR     SETA  &CTR-1\n         AGO   .PRC9100\n.*--------------------------------------------------------------------*\n.*  IF OPTIONS XA AND AMODE OF THE ENCLOSING BLOCK IS DIFFERENT FROM\n.*  THE AMODE OF THE INNERMOST BLOCK AND (STRUCTURE IS NOT BLOCK\n.*  STRUCTURE) OR (STRUCTURE IS BLOCK STRUCTURE AND BLOCK CONTAINING\n.*  ENCLOSING BLOCK HAS THE SAME ADDRESS MODE AS THE ENCLOSING BLOCK)\n.*  THEN GENERATE AMODE CHANGE.\n.*--------------------------------------------------------------------*\n.PRC9200 AIF   (NOT &#PBXA).PRC9300\n         AIF   ('&#BAMODE(&#BLVL)' EQ '&#BAMODE(&ENBLK)').PRC9300\n         AIF   ('&STRUC' NE 'BLOCK').PRC9205\n         AIF   (&ENBLK LE 0).PRC9205\n         AIF   ('&#BAMODE(&ENBLK-1)' NE '&#BAMODE(&ENBLK)').PRC9300\n.*--------------------------------------------------------------------*\n.*  IF OPTIONS XA AND 370, GENERATE TEST FOR XA\n.*--------------------------------------------------------------------*\n.PRC9205 ANOP\n&TAG3    SETC  '#LV&#MNDX'\n         ##SWREG R15                    SAVE WORK REGISTER\n         AIF   (NOT &#PB370).PRC9210\n         L     R15,16                   POINT R15 TO CVT\n         TM    X'74'(R15),X'80'         RUNNING UNDER XA?\n         ##B Z,&TAG3                    SKIP AMODE SETTING          @C2\n.*--------------------------------------------------------------------*\n.*  GENERATE CHANGE CODE.\n.*--------------------------------------------------------------------*\n.PRC9210 ANOP\n         AIF   ('&#BAMODE(&ENBLK)' NE '31').PRC9220\n         L     R15,=A(&TAG3+X'80000000') ADDR WITH AMODE=31 BIT ON. @C2\n         AGO   .PRC9250                 SET NEW MODE                @C2\n.PRC9220 L     R15,=A(&TAG3)             ADDR WITH AMODE=31 BIT OFF.@C2\n.PRC9230 AIF   ('&#BAMODE(&ENBLK)' NE 'ANY').PRC9250\n         AIF   ('&#PBSMWA' NE '').PRC9240\n         MNOTE 8,'SMWA= keyword needs to be specified on program block $\n               macro'\n         AGO   .PRC9250\n.PRC9240 O     R15,&#PBSMWA+4           SET HIGH BIT TO AMODE AT ENTRY\n.PRC9250 BSM   0,R15                    SET NEW MODE\n.PRC9290 ANOP\n&TAG3    ##RWREG R15\n.PRC9300 ANOP\n         ##B U,&TAG,LONG=&LONG          LEAVE STRUCTURE             @C2\n&FTAG    DS    0H                       LEAVE NOT DONE\n         MEXIT\n.*\n.* BRANCH TO LEAVE TAG.\n.PRC9800 ANOP\n         ##B U,&TAG,LONG=&LONG          LEAVE STRUCTURE             @C2\n         MEXIT\n.ERR0001 MNOTE 8,'Only one keyword can be specified on LEAVE'\n         MEXIT\n.ERR0002 MNOTE 8,'Nesting level for &STRUC is zero'\n         MEXIT\n.ERR0003 MNOTE 8,'&NAME is not an active &STRUC name'\n         MEXIT\n.ERR0004 MNOTE 8,'One keyword must be specified on LEAVE'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOOP": {"ttr": 9226, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00g\\x00g\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 103, "newlines": 103, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         LOOP  &NAME=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      LOOP\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - LOOP\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START A LOOP STRUCTURE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*             08/02/05 MGG - Changed to use ##B macro for branching@C1\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MNDX                   LAST TAG INDEX USED\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#DMLVL(20)              STRUCTURAL LEVEL OF LOOP\n         GBLA  &#DLVL                   LOOP NEXTING LEVEL\n         GBLA  &#DNDX(20)               LOOP TAG INDEX\n         GBLC  &#DNAME(20)              LOOP NAMES\n         GBLC  &#DTYPE(20)              TYPE OF LOOP\n         LCLA  &CTR                     WORK COUNT\n         LCLC  &FTAG,&STAG,&TAG         FAIL TAG AND SUCCESS TAG\n&#MNDX   SETA  &#MNDX+1                 ADD ONE TO TAG INDEX\n         AIF   (&#DLVL GE 20).ERR0001\n&#DLVL   SETA  &#DLVL+1                 ADD ONE TO NESTING LEVEL\n&#MLVL   SETA  &#MLVL+1                 ADD ONE TO STRUCTURAL LEVEL\n&#DMLVL(&#DLVL) SETA  &#MLVL            SAVE STRUCTURAL LEVEL\n&#DNDX(&#DLVL)  SETA  &#MNDX            SET BLOCK TAG INDEX\n&#DNAME(&#DLVL) SETC '&NAME'            SAVE NAME\n&#DTYPE(&#DLVL) SETC '&SYSLIST(1)'      SAVE TYPE\n&TAG     SETC  '#DB&#MNDX'              SUCCESS TAG NAME\n         AIF   ('&SYSLIST(1)' NE 'WHILE').PRC2000\n&FTAG    SETC  '#DE&#MNDX'              FAIL TAG NAME (END OF LOOP)\n&STAG    SETC  '#DS&#MNDX'              SUCCESS TAG NAME\n&CTR     SETA  N'&SYSLIST-1             GET NUMBER OF POSITIONAL PARMS\n&TAG     ##COND &SYSLIST(2),                                           $\n               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $\n               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $\n               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $\n               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $\n               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $\n               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $\n               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $\n               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $\n               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $\n               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $\n               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $\n               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $\n               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),&SYSLIST(52),    $\n               F=&FTAG,S=&STAG,E=&CTR,B=1,T=B\n&STAG    DS    0H                       START OF LOOP WHILE CODE\n         AGO   .EXIT\n.PRC2000 AIF   ('&SYSLIST(1)' NE 'UNTIL').PRC3000\n&TAG     DS    0H                       START OF LOOP UNTIL\n         AGO   .CHKONE\n.PRC3000 AIF   ('&SYSLIST(1)' NE 'BCT').PRC4000\n&TAG     DS    0H                       START OF LOOP BCT\n         AGO   .CHKONE\n.PRC4000 AIF   ('&SYSLIST(1)' NE 'BXH').PRC5000\n&TAG     ##B XH,&SYSLIST(2),&SYSLIST(3),#DE&#MNDX START OF LOOP BXH @C1\n         AIF   (N'&SYSLIST NE 3).ERR0002\n         AGO   .EXIT\n.PRC5000 AIF   ('&SYSLIST(1)' NE 'BXLE').ERR0003\n&TAG     DS    0H                       START OF LOOP BXLE\n         AGO   .EXIT\n.CHKONE  AIF   (N'&SYSLIST EQ 1).EXIT\n         MNOTE 8,'Additional positional parameters can not be specified$\n                on LOOP &SYSLIST(1)'\n         AGO   .EXIT\n.ERR0001 MNOTE 8,'LOOPs can only be nested 20 deep'\n         AGO   .EXIT\n.ERR0002 MNOTE 8,'Incorrect number of parameters specified for LOOP BXH$\n               '\n         AGO   .EXIT\n.ERR0003 MNOTE 8,'LOOP type &SYSLIST(1) is invalid'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "L16": {"ttr": 9229, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00-\\x00-\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 45, "newlines": 45, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&TAG     L16   &OP1,&OP2\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      L16\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - L16\n.*\n.*  PURPOSE    LOAD 16 BITS INTO A REGISTER RIGHT JUSTIFIED WITH\n.*             LEADING ZEROS AND SET CONDITION CODE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         AIF   (N'&SYSLIST NE 2).ERR0001\n&TAG     SLR   &OP1,&OP1                CLEAR REGISTER\n         ICM   &OP1,B'0011',&OP2        LOAD 16 BITS\n         MEXIT\n.ERR0001 MNOTE 8,'Invalid number of operands on L16 instruction'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "L24": {"ttr": 9473, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00-\\x00-\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 45, "newlines": 45, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&TAG     L24   &OP1,&OP2\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      L24\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - L24\n.*\n.*  PURPOSE    LOAD 24 BITS INTO A REGISTER RIGHT JUSTIFIED WITH\n.*             LEADING ZEROS AND SET CONDITION CODE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         AIF   (N'&SYSLIST NE 2).ERR0001\n&TAG     SLR   &OP1,&OP1                CLEAR REGISTER\n         ICM   &OP1,B'0111',&OP2        LOAD 24 BITS\n         MEXIT\n.ERR0001 MNOTE 8,'Invalid number of operands on L24 instruction'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "L32": {"ttr": 9475, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00,\\x00,\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 44, "newlines": 44, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&TAG     L32   &OP1,&OP2\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      L32\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - L32\n.*\n.*  PURPOSE    LOAD 32 BITS INTO A REGISTER AND SET CONDITON\n.*             CODE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         AIF   (N'&SYSLIST NE 2).ERR0001\n&TAG     ICM   &OP1,B'1111',&OP2        LOAD 32 BITS\n         MEXIT\n.ERR0001 MNOTE 8,'Invalid number of operands on L32 instruction'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "L8": {"ttr": 9477, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00-\\x00-\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 45, "newlines": 45, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&TAG     L8    &OP1,&OP2\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      L8\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - L8\n.*\n.*  PURPOSE    LOAD 8 BITS INTO A REGISTER RIGHT JUSTIFIED WITH\n.*             LEADING ZEROS AND SET CONDITION CODE.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         AIF   (N'&SYSLIST NE 2).ERR0001\n&TAG     SLR   &OP1,&OP1                CLEAR REGISTER\n         ICM   &OP1,B'0001',&OP2        LOAD 8 BITS\n         MEXIT\n.ERR0001 MNOTE 8,'Invalid number of operands on L8 instruction'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MSC0150$": {"ttr": 9479, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x03\\xbd\\x03\\xbd\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 957, "newlines": 957, "modlines": 0, "user": "CLEMSON"}, "text": "//MSC0150$ JOB (H2803302,S17,,8),'S17 ASSEMBLE&LINK',TIME=(,4)\n/*JOBPARM Q=T,I\n// EXEC ASMPCL,COPT=',RENT',LOPT=',RENT',\n//     PDS='SYS1.LINK2LIB',NAME=MSC0150$,COND=(0,NE)\n//P.SYSIN    DD  *\nMSC0150 TITLE 'STRUCTURED MACRO LISTING PROGRAM'\n*---------------------------------------------------------------------*\n*  Copyright 2011 by Clemson University Research Foundation           *\n*                                                                     *\n*  Licensed under the Apache License, Version 2.0 (the \"License\");    *\n*  you may not use this file except in compliance with the License.   *\n*  You may obtain a copy of the License in this library as member     *\n*  $LICENSE, or from                                                  *\n*                                                                     *\n*      http://www.apache.org/licenses/LICENSE-2.0                     *\n*                                                                     *\n*  Unless required by applicable law or agreed to in writing,         *\n*  software distributed under the License is distributed on an \"AS    *\n*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *\n*  express or implied.  See the License for the specific language     *\n*  governing permissions and limitations under the License.           *\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*\n*  CSECT: MSC0150\n*\n*  COPYRIGHT: (C) COPYRIGHT CLEMSON UNIVERSITY 1983, 1988.\n*\n*  ABSTRACT: THIS PROGRAM READS AN ASSEMBLER SOURCE PROGRAM CONTAINING\n*            THE CLEMSON STRUCTURED MACROS AND PRODUCES A LISTING\n*            WITH TITLING, SPACING, AND NESTING INFORMATION.  THE\n*            ASSEMBLER SOURCE IS WRITTEN TO DDNAME SYSPUNCH FOR\n*            FURTHER PROCESSING BY THE ASSEMBLER.  SOME ERROR CHECKING\n*            IS DONE FOR STRUCTURAL PROBLEMS BUT THIS CHECKING\n*            IS BY NO MEANS EXTENSIVE.\n*\n*  FILES: SYSIN    - SOURCE INPUT FILE\n*         SYSPRINT - LISTING FILE\n*         SYSPUNCH - SOURCE OUTPUT FILE\n*\n*  RETURN CODES:  0 - GOOD\n*                 4 - A WARNING ERROR WAS ENCOUNTERED\n*                 8 - A ERROR WAS ENCOUNTERED\n*                16 - A SEVERE ERROR CAUSED THE PROGRAM TO TERMINATE\n*\n*  ATTRIBUTES: REENTRENT, AMODE 24, RMODE 24\n*\n*  DEPENDENCIES: DEFAULT ICTL IS REQUIRED FOR SYSIN.  THIS ASSMEMBLY\n*                REQUIRES THE CLEMSON STRUCTURED MACROS.\n*\n*  METHOD OF OPERATION:\n*\n*     OPEN FILES\n*     READ FIRST SYSIN RECORD\n*     DO WHILE NOT END OF FILE ON SYSIN\n*       WRITE RECORD TO SYSPUNCH\n*       IF NOT COMMENT CARD OR CONTINUED LINE\n*         SCAN FOR OPCODE\n*         IF OPCODE IS ONE OF THE STRUCTURED MACRO THAT START OR END\n*           A STRUCTURE OR MACRO OR MEND , DO NESTING AND UNNESTING\n*           PROCESSING FOR LISTING\n*         ELSEIF 'SPACE', 'TITLE', OR 'EJECT', DO APPROPRIATE\n*           LISTING PROCESSING\n*       ENDIF\n*       DO CONTINUATION PROCESSING\n*       PRINT TITLE AND HEADING IF OVERFLOW\n*       PRINT LINE IF APPROPRIATE\n*       READ NEXT SYSIN RECORD\n*     ENDDO\n*     CLOSE FILES\n*     RETURN\n*\n*  MODULE ACTIVITY:  MGG 07/29/83 NEW\n*                    MGG 09/04/84 FIXED TITLE STATMENT PROCESSING.\n*                                 PUT IN CONTINUED STATEMENT CHECK.\n*                                 INSTREAM MACRO SUPPORT\n*                                 GENERAL CLEANUP\n*                    MGG 01/29/87 RESTRUCTURED AND REMOVED @CN.\n*                    MGG  8/08/88 ADDED SMLIST SUPPORT              @C4\n*---------------------------------------------------------------------*\n  EJECT                               |\n BLOCK NAME=MSC0150,TYPE=PROGRAM,OPTIONS=(*PWA),SUBOPTS=*SWA,       @C4$\n               BASEREG=(R12,R11)      |                             @C4\n* *-------------------------------------------------------------------*\n* *  INITIALIZE THE PROGRAM WORK AREA.\n* *-------------------------------------------------------------------*\n  CALLSUB INITIALIZE_PWA              | INITIALIZE PWA\n* *-------------------------------------------------------------------*\n* *  OPEN SOURCE INPUT AND OUTPUT FILES AND PRINT FILE.\n* *-------------------------------------------------------------------*\n  MVC   PWADIN,PSDDIN                 | MOVE SYSIN DCB TO PWA\n  MVC   PWADOUT,PSDDOUT               | MOVE SYSPUNCH DCB TO PWA\n  MVC   PWADPRT,PSDDPRT               | MOVE SYSPRINT DCB TO PWA\n  MVC   PWAOPN3,PSDOPN3               | MOVE OPEN LIST FORM TO PWA\n  OPEN  (PWADIN,INPUT,PWADOUT,OUTPUT,PWADPRT,OUTPUT),MF=(E,PWAOPN3)\n  ERREXIT (TBIT,PWADIN+DCBOFLGS-IHADCB,DCBOFOPN,OFF),CODE=0\n  ERREXIT (TBIT,PWADOUT+DCBOFLGS-IHADCB,DCBOFOPN,OFF),CODE=1\n  ERREXIT (TBIT,PWADPRT+DCBOFLGS-IHADCB,DCBOFOPN,OFF),CODE=2\n* *-------------------------------------------------------------------*\n* *  PRINT LISTING UNTIL END OF FILE ON SYSIN.\n* *-------------------------------------------------------------------*\n  CALLSUB READ_SYSIN_AND_WRITE_SRCOUT | DO PRIMING READ\n  LOOP WHILE,NOT,(TBIT,PWAF1EOF)      | LOOP WHILE NOT END OF FILE\n*  *------------------------------------------------------------------*\n*  *  IF NOT A COMMENT CARD, SEARCH FOR AN OPCODE ON THE LINE AND\n*  *  DO THE APPROPRIATE LISTING PROCESSING.\n*  *------------------------------------------------------------------*\n   IF (CLI,PWATEXT,NE,C'*'),AND,      |  IF NOT A COMMENT CARD         $\n               (CLC,PWATEXT(2),NE,=C'.*')\n    LA    R1,PWALNE                   |   POINT R1 TO START OF TEXT\n    LA    R15,PWATEXT+L'PWATEXT       |   POINT R15 TO LAST BYTE\n    LA    R14,1                       |   SET INCREMENT TO 1\n    LOOP  BXLE                        |   USE BXLE TO FIND THE\n     LEAVE LOOP=*,(CLI,0(R1),EQ,X'40')     FIRST BLANK AFTER\n    ENDLOOP BXLE,R1,R14               |    AN OPTIONAL TAG\n    XC    PWAAOPR,PWAAOPR             |   CLEAR POINTER TO OPCODE\n    LOOP  BXH,R1,R14                  |   SEARCH FOR NONBLANK\n     IF  (CLI,0(R1),NE,X'40')         |    IF NONBLANK FOUND\n      ST    R1,PWAAOPR                |     SAVE POINTER TO OPCODE\n      CALLSUB PROCESS_OPCODE          |     PROCESS THE OPCODE\n      LEAVE LOOP=*                    |     LEAVE SEARCH FOR OPCODE\n     ENDIF                            |    ENDIF\n    ENDLOOP BXH                       |   END OF SEARCH\n   ENDIF                              |  ENDIF\n*  *------------------------------------------------------------------*\n*  *  IF A STATEMENT IS CONTINUED, PROCESS CONTINUATION LINES.\n*  *------------------------------------------------------------------*\n   IF (CLI,PWACONT,NE,X'40')          |  IF CONTINUED STATEMENT\n    CALLSUB PROCESS_CONTINUATION_LINES    PROCESS CONTINUATION LINES\n   ENDIF                              |  ENDIF\n*  *------------------------------------------------------------------*\n*  *  IF THE NOWRITE FLAG IS NOT SET,  PRINT A STATEMENT LINE.\n*  *------------------------------------------------------------------*\n   IF (TBIT,PWAF1NOW,OFF)             |  IF NO WRITE FLAG IS OFF\n    CALLSUB PRINT_STATEMENT_LINE      |   PRINT STATEMENT\n   ENDIF                              |  ENDIF\n   RBIT  PWAF1NOW                     |  RESET NOWRITE FLAG\n*  *------------------------------------------------------------------*\n*  *  READ NEXT STATEMENT\n*  *------------------------------------------------------------------*\n   IF NOT,(TBIT,PWAF1EOF)             |  IF NOT END OF FILE\n    CALLSUB READ_SYSIN_AND_WRITE_SRCOUT   GET NEXT RECORD\n   ENDIF                              |  ENDIF\n*  *------------------------------------------------------------------*\n  ENDLOOP WHILE                       | ENDLOOP\n* *-------------------------------------------------------------------*\n* *  IF STRUCTURAL LEVEL IS NON-ZERO, ISSUE ERROR MESSAGE.\n* *-------------------------------------------------------------------*\n  IF (CLC,PWANSTL,NE,=H'0')           | IF LEVEL NOT ZERO\n   PUT   PWADPRT,PSDERLVL             |  ISSUE ERROR MESSAGE\n   IF (CLI,PWAMAXRC,LT,8)             |  IF MAX RETURN CODE < 8\n    MVI   PWAMAXRC,8                  |   MOVE 8 TO MAX RETURN CODE\n   ENDIF                              |  ENDIF\n  ENDIF                               | ENDIF\n* *-------------------------------------------------------------------*\n* *  CLOSE FILES AND RETURN WITH MAXIMUM RETURN CODE.\n* *-------------------------------------------------------------------*\n  MVC   PWAOPN3,PSDOPN3               | MOVE OPEN LIST FORM TO PWA\n  CLOSE (PWADIN,,PWADOUT,,PWADPRT),MF=(E,PWAOPN3) CLOSE FILES\n* *-------------------------------------------------------------------*\n* *  SET RETURN CODE.\n* *-------------------------------------------------------------------*\n  SLR   R15,R15                    CLEAR R15\n  IC    R15,PWAMAXRC               LOAD MAXIMUM RETURN CODE\n* *-------------------------------------------------------------------*\n ENDBLK BLOCK=MSC0150,RC=(R15)  END OF PROGRAM BLOCK\n EJECT                                |\n**--------------------------------------------------------------------*\n**  EODAD EXIT - FOR SYSIN FILE\n**--------------------------------------------------------------------*\n SPACE 1                              |\n BLOCK NAME=EODADIN,TYPE=SUBROUTINE,OPTIONS=*NOSUBOPTS\n  SBIT  PWAF1EOF                      | SET END OF FILE FLAG\n ENDBLK BLOCK=EODADIN                 |\n EJECT                                |\n**--------------------------------------------------------------------*\n**  SUBROUTINE: INITIALIZE_PWA\n**\n**  THIS SUBROUTINE INITIALIZES FIELDS IN THE PWA.\n**--------------------------------------------------------------------*\n BLOCK TYPE=SUBROUTINE,NAME=INITIALIZE_PWA\n  ZAP   PWALNUM,=P'999'               | FORCE TITLES\n  ZAP   PWAPGN,=P'0'                  | SET PAGE NUMBER TO ZERO\n  ZAP   PWAMNL,=P'0'                  | SET MACRO NESTING LEVEL TO ZERO\n  FILL  PWANSTK,X'40'                 | INITIALIZE NESTING STACK\n  MVC   PWAT,PSDT                     | INITIALIZE TITLE LINE\n  MVC   PWAH,PSDH                     | INITIALIZE HEADING LINE\n  TIME  ,                             | GET TIME\n  ST    R1,PWAD                       | STORE DATE\n  MVC   PWAHDTE,PSDMDTE               | MOVE MASK FOR DATE\n  ED    PWAHDTE,PWAD+1                | EDIT DATE INTO HEADING LINE\n  ST    R0,PWAD                       | STORE TIME\n  MVC   PWAHTME,PSDMTME               | MOVE EDIT MASK FOR TIME\n  ED    PWAHTME,PWAD                  | EDIT TIME INTO HEADING LINE\n  MVC   PWAL,PSDL                     | INITIALIZE TEXT LINE\n  MVC   PWABLINE,PSDBLINE             | INITIALIZE BLANK LINE\n ENDBLK BLOCK=INITIALIZE_PWA          |\n EJECT                                |\n**--------------------------------------------------------------------*\n**  SUBROUTINE: PROCESS_OPCODE\n**\n**  THIS SUBROUTINE WILL CHECK TO SEE IF THE OPCODE POINTED TO\n**  BY REGISTER 1 IS ONE OF THE STRUCTURED MACROS, TITLE, EJECT,\n**  SPACE, MACRO OR MEND AND TAKE THE APPROPRIATE LISTING ACTIONS.\n**  IF THE OPCODE IS ONE OF THE MACROS THAT START A STRUCTURE, CALLS\n**  NEST.  IF IT IS ONE OF THE MACROS THAT END A STRUCTURE, CALL\n**  UNNEST.  IF WE ARE INSIDE A MACRO DEFINITION,  ALL THAT IS LOOKED\n**  FOR IS MEND AND MACRO MNEMONICS.\n**--------------------------------------------------------------------*\n BLOCK TYPE=SUBROUTINE,NAME=PROCESS_OPCODE\n  IF (CP,PWAMNL,GT,=P'0')             | IF MACRO NESTING IS NON-ZERO\n   IF (CLC,=C'MEND ',EQ,0(R1))        |  IF 'MEND'\n    CALLSUB UNNEST,('M')              |   CALL UNNEST\n    SP    PWAMNL,=P'1'                |   DEC MACRO NESTING LVL\n   ELSEIF (CLC,=C'MACRO ',EQ,0(R1))   |  ELSE IF 'MACRO'\n    CALLSUB NEST,('M')                |   CALL NEST\n    AP    PWAMNL,=P'1'                |   INC MACRO NESTING LVL\n   ENDIF                              |  ENDIF\n  ELSEIF (CLC,=C'BLOCK ',EQ,0(R1))    | ELSEIF 'BLOCK'\n   CALLSUB NEST,('B')                 |  CALL NEST\n  ELSEIF (CLC,=C'ENDBLK ',EQ,0(R1))   | ELSEIF 'ENDBLK'\n   CALLSUB UNNEST,('B')               |  CALL UNNEST\n  ELSEIF (CLC,=C'CASEBLK ',EQ,0(R1))  | ELSEIF 'CASEBLK'\n   CALLSUB NEST,('C')                 |  CALL NEST\n  ELSEIF (CLC,=C'ENDCASE ',EQ,0(R1))  | ELSEIF 'ENDCASE'\n   CALLSUB UNNEST,('C')               |  CALL UNNEST\n  ELSEIF (CLC,=C'IF ',EQ,0(R1))       | ELSEIF 'IF'\n   CALLSUB NEST,('I')                 |  CALL NEST\n  ELSEIF (CLC,=C'ENDIF ',EQ,0(R1))    | ELSEIF 'ENDIF'\n   CALLSUB UNNEST,('I')               |  CALL UNNEST\n  ELSEIF (CLC,=C'LOOP ',EQ,0(R1))     | ELSEIF 'LOOP'\n   CALLSUB NEST,('L')                 |  CALL NEST\n  ELSEIF (CLC,=C'ENDLOOP ',EQ,0(R1))  | ELSEIF 'ENDLOOP'\n   CALLSUB UNNEST,('L')               |  CALL UNNEST\n  ELSEIF (CLC,=C'MACRO ',EQ,0(R1))    | ELSEIF 'MACRO'\n   CALLSUB NEST,('M')                 |  CALL NEST\n   AP    PWAMNL,=P'1'                 |  UP MACRO NESTING LEVEL\n  ELSEIF (CLC,=C'MEND ',EQ,0(R1))     | ELSEIF 'MEND'\n   MVC   PWALMSG(26),=C'>E-4 MEND OUTSIDE OF MACRO'\n   IF (CLI,PWAMAXRC,LT,4)             |  IF MAX RETURN CODE < 4\n    MVI   PWAMAXRC,4                  |   SET RETURN CODE TO 4\n   ENDIF                              |  ENDIF\n  ELSEIF (CLC,=C'TITLE ',EQ,0(R1))    | ELSEIF 'TITLE'\n   CALLSUB PROCESS_TITLE              |  PROCESS TITLE\n  ELSEIF (CLC,=C'SPACE ',EQ,0(R1))    | ELSEIF 'SPACE'\n   CALLSUB PROCESS_SPACE              |  PROCESS SPACE\n  ELSEIF (CLC,=C'EJECT ',EQ,0(R1))    | ELSEIF 'EJECT'\n   ZAP   PWALNUM,=P'999'              |  CAUSE TITLE TO PRINT\n   SBIT  PWAF1NOW                     |  INDICATE NO WRITE\n  ELSEIF (CLC,=C'END ',EQ,0(R1))      | ELSEIF 'END'\n   SBIT  PWAF1EOF                     |  INDICATE END OF FILE\n  ELSEIF (CLC,=C'SMLIST ',EQ,0(R1))   | ELSEIF 'SMLIST'             @C4\n   CALLSUB PROCESS_SMLIST             |  PROCESS SMLIST COMMAND     @C4\n  ENDIF                               | ENDIF\n ENDBLK BLOCK=PROCESS_OPCODE          |\n  EJECT                               |\n**--------------------------------------------------------------------*\n**  SUBROUTINE - PROCESS_TITLE\n**\n**  IF 'TITLE' IS THE OPCODE, ISOLATE THE TITLE, MOVE IT TO THE TITLE\n**  LINE, AND FORCE OVERFLOW.  THIS CODE HANDLES DOUBLE QUOTES BUT\n**  DOES NOT AND IN FACT CAN NOT HANDLE SYMBOLIC VARIABLE\n**  SUBSTITUTION.  IF THIS CODE DETECTS A SYNTAX ERROR, THE MOVE OF\n**  THE TITLE IS TERMINATED BUT NO SYNTAX ERROR IS ISSUED.\n**--------------------------------------------------------------------*\n BLOCK TYPE=SUBROUTINE,NAME=PROCESS_TITLE\n* *-------------------------------------------------------------------*\n* *  IF NAME FIELD IS NON-BLANK AND NOT A SEQUENCE SYMBOL AND AN\n* *  IDENTIFICATION IS SPECIFIED IN THE NAME FIELD OF THE TITLE\n* *  STATEMENT AND WE HAVE NOT ALREADY DONE SO, MOVE THE\n* *  IDENTIFICATION TO THE MODEL OUTPUT TITLE LINE.\n* *-------------------------------------------------------------------*\n  IF (CLI,PWATEXT,NE,C'.'),AND,       | IF NAME FIELD IS NOT A         $\n               (CLI,PWATEXT,NE,X'40'),AND, SEQUENCE SYMBOL OR BLANK    $\n               (CLI,PWATID,EQ,X'40')  |    AND THIS IS THE 1ST TIME\n   L     R3,PWAAOPR                   |  POINT R3 TO 'TITLE'\n   LA    R2,PWALNE                    |  POINT R2 TO START OF LINE\n   SLR   R3,R2                        |  CALC LENGTH BEFORE 'TITLE'\n   LA    R4,PWATID                    |  POINT TO ID IN TITLE LINE\n   LA    R5,L'PWATID                  |  LOAD R5 WITH LENGTH OF ID\n   ICM   R3,B'1000',=X'40'            |  FILL CHAR IS SPACE\n   MVCL  R4,R2                        |  MOVE ID TO TITLE\n  ENDIF                               | ENDIF\n* *-------------------------------------------------------------------*\n* *  BLANK OUT PLACE TO PUT TITLE IN MODEL TITLE OUTPUT LINE AND\n* *  POINT R4 TO PLACE, LOAD R5 WITH LENGTH OF PLACE, AND POINT R1\n* *  TO FIRST NON-BLANK AFTER 'TITLE'.\n* *-------------------------------------------------------------------*\n  FILL  PWATDTA,X'40'                 | BLANK OUT PLACE TO PUT TITLE\n  LA    R4,PWATDTA                    | POINT R4 TO PLACE\n  LA    R5,L'PWATDTA                  | LOAD R5 WITH IT'S LENGTH\n  L     R1,PWAAOPR                    | POINT R1 TO 'TITLE'\n  LA    R1,5(,R1)                     | POINT R1 PAST 'TITLE'\n  LA    R14,1                         | SET INCREMENT TO 1\n  LA    R15,PWATEXT+L'PWATEXT         | POINT R15 TO LAST BYTE\n  LOOP  BXH,R1,R14                    | SEARCH FOR NON-BLANK\n   LEAVE LOOP=*,(CLI,0(R1),NE,X'40')  |  PAST 'TITLE'\n  ENDLOOP BXH                         | END SEARCH\n* *-------------------------------------------------------------------*\n* *  IF THERE WAS A NON-BLANK AND IT IS A QUOTE, MOVE TITLE TO\n* *  MODEL TITLE OUTPUT LINE ONE BYTE AT A TIME.\n* *-------------------------------------------------------------------*\n  IF (CLR,R1,LT,R15),AND,(CLI,0(R1),EQ,C'''')\n   LA    R1,1(,R1)                    |  POINT R1 PAST QUOTE\n   LOOP BCT                           |  LOOP FOR EACH BYTE\n*   *-----------------------------------------------------------------*\n*   *  IF WE HAVE SCANNED TO THE END OF THE TEXT AREA ON THE CARD\n*   *  AND IT IS A CONTINUATION,  READ ANOTHER CARD AND REESTABLISH\n*   *  R1 AND R15.  IF END OF FILE ON SYSIN, CONSIDER MOVE COMPLETE.\n*   *-----------------------------------------------------------------*\n    IF (CLR,R1,GE,R15)                |   IF AT END OF TEXT AREA\n     LEAVE LOOP=*,(CLI,PWACONT,EQ,X'40')   FINISHED IF NOT CONTINUATION\n     CALLSUB READ_SYSIN_AND_WRITE_SRCOUT   READ A NEW RECORD\n     LEAVE LOOP=*,(TBIT,PWAF1EOF)     |    FINISHED IF EOF\n     LA    R1,PWATEXT+16-1            |    POINT R1 TO COL 16\n     LA    R14,1                      |    REESTABLISH R14\n     LA    R15,PWATEXT+L'PWATEXT      |    REESTABLISH R15\n    ENDIF                             |   ENDIF\n*   *-----------------------------------------------------------------*\n*   *  IF NEXT CHARACTER IN INPUT RECORD IS A QUOTE, INCREMENT TO\n*   *  NEXT CHARACTER.  IF NEXT CHARACTER IS NOT A QUOTE, ASSUME\n*   *  THE MOVE IS COMPLETE EVEN IF IT IS A NON-SPACE.\n*   *-----------------------------------------------------------------*\n    IF (CLI,0(R1),EQ,C'''')           |   IF QUOTE\n     LA    R1,1(,R1)                  |    INCREMENT POINTER\n     IF (CLR,R1,GE,R15)               |    IF AT END OF CARD\n      LEAVE LOOP=*,(CLI,PWACONT,EQ,X'40')   THROUGH IF NOT CONTINUATION\n      CALLSUB READ_SYSIN_AND_WRITE_SRCOUT   READ A NEW RECORD\n      LEAVE LOOP=*,(TBIT,PWAF1EOF)    |     FINISHED IF EOF\n      LEAVE LOOP=*,(CLI,PWATEXT+16-1,NE,C'''')\n      LA    R1,PWATEXT+16-1           |     POINT R1 TO COL 16\n      LA    R14,1                     |     REESTABLISH R14\n      LA    R15,PWATEXT+L'PWATEXT     |     REESTABLISH R15\n     ELSE                             |    ELSEIF NEXT CHAR IS NOT AN\n      LEAVE LOOP=*                    |     QUOTE, LEAVE LOOP\n     ENDIF                            |    ENDIF\n    ENDIF                             |   ENDIF\n*   *-----------------------------------------------------------------*\n*   *  MOVE ONE CHARACTER TO OUTPUT AREA AND ADJUST POINTERS.\n*   *-----------------------------------------------------------------*\n    MVC   0(1,R4),0(R1)               |   MOVE A CHARACTER\n    LA    R1,1(,R1)                   |   BUMP POINTER INTO INPUT\n    LA    R4,1(,R4)                   |   BUMP POINTER INTO OUTPUT\n   ENDLOOP BCT,R5                     |  ENDLOOP\n  ENDIF                               | ENDIF\n* *-------------------------------------------------------------------*\n  ZAP   PWALNUM,=P'999'               | CAUSE TITLE TO PRINT\n  SBIT  PWAF1NOW                      | INDICATE NO WRITE\n ENDBLK BLOCK=PROCESS_TITLE           |ENDBLK\n  EJECT                               |\n**--------------------------------------------------------------------*\n**  SUBROUTINE - PROCESS_SPACE\n**\n**  IF SPACE IS OPCODE, ISOLATE NUMBER OF LINES TO SPACE AND PRINT\n**  BLANK LINES IF NECESSARY.\n**--------------------------------------------------------------------*\n BLOCK TYPE=SUBROUTINE,NAME=PROCESS_SPACE\n  L     R1,PWAAOPR                    | POINT R1 TO OPCODE FIELD\n  LA    R14,1                         | SET INCREMENT TO 1\n  LA    R15,PWATEXT+L'PWATEXT         | POINT R15 TO LAST BYTE\n  LA    R0,1                          | ASSUME ONE SPACE\n  LA    R1,5(,R1)                     | POINT R1 PAST 'SPACE'\n  LOOP  BXH,R1,R14,NAME=SCANSP        | SCAN FOR NUMBER AFTER SPACE\n   IF (CLI,0(R1),NE,X'40')            |  IF NON-BLANK FOUND\n    LR   R2,R1                        |   SAVE ADDRESS IN R2\n    LOOP BXH,R1,R14                   |   SCAN FOR NEXT BLANK\n     IF (CLI,0(R1),EQ,X'40')          |    IF NEXT BLANK FOUND\n      SLR   R1,R2                     |     CALC LENGTH OF NON-BLANKS\n      IF (CH,R1,LT,=H'3')             |     IF LENGTH < 3\n       BCTR  R1,0                     |      PACK INTO\n       EXI   R1,(PACK,PWAD,0(*-*,R2)) |      .PWAD\n      ELSE                            |     IF LENGTH >= 3\n       ZAP   PWALNUM,=P'999'          |      FORCE EJECT ON NEXT PRINT\n      ENDIF                           |     ENDIF\n      LEAVE LOOP=SCANSP               |     LEAVE SCANSP\n     ELSE                             |    ELSE IF NOT BLANK\n      LEAVE LOOP=*,                   |     JUST TAKE DEFAULT OF       $\n               (CLI,0(R1),LT,C'0'),OR,       ONE IF NON-NUMERIC        $\n               (CLI,0(R1),GT,C'9')    |      ENCOUNTERED\n     ENDIF                            |    ENDIF\n    ENDLOOP BXH                       |   ENDLOOP\n    LEAVE LOOP=SCANSP                 |   LEAVE SCANSP\n   ENDIF                              |  ENDIF\n  ENDLOOP BXH,LOOP=SCANSP             | ENDLOOP\n* *-------------------------------------------------------------------*\n* *  GENERATE SPACING\n* *-------------------------------------------------------------------*\n  LR    R2,R0                         | R2 = COUNT ON 'SPACE'\n  LEAVE BLOCK=*,(CP,PWALNUM,GT,PSDLPP)  LEAVE IF OVERFLOW\n  MVC   PWABLCC,PWALCC                | PUT BLANK LINES BASED ON\n  PUT   PWADPRT,PWABLINE              | .CC IN STATMENT LINE\n  MVI   PWALCC,X'40'                  | SET STMT LINE TO SINGLE SPACE\n  BCTR  R2,0                          | ADJUST COUNT\n  AP    PWALNUM,=P'1'                 | ADD ONE TO LINE NUMBER\n  LOOP WHILE,(TREG,R2,NZ)             | SET CC FOR NEXT LINE\n   IF (CH,R2,EQ,=H'1')                |  IF ONE SPACE\n    AP    PWALNUM,=P'1'               |   ADD 1 TO LINE NUMBER\n    MVI   PWALCC,C'0'                 |   SET CC TO DOUBLE SPACE\n    LEAVE LOOP=*                      |   LEAVE LOOP\n   ENDIF                              |  ENDIF\n   IF (CH,R2,EQ,=H'2')                |  IF TWO SPACES\n    AP    PWALNUM,=P'2'               |   ADD 2 TO LINE NUMBER\n    MVI   PWALCC,C'-'                 |   SET CC TO TRIPLE SPACE\n    LEAVE LOOP=*                      |   LEAVE LOOP\n   ENDIF                              |  ENDIF\n   AP    PWALNUM,=P'3'                |  ADD 3 TO LINE NUMBER\n   SH    R2,=H'3'                     |  SUB 3 FROM SPACING\n   LEAVE LOOP=*,(CP,PWALNUM,GT,PSDLPP)   LEAVE IF OVERFLOW\n   MVI   PWABLCC,C'-'                 |  SET CC TO TRIPLE SPACE\n   PUT   PWADPRT,PWABLINE             |  PUT 3 BLANK LINES\n  ENDLOOP WHILE                       | KEEP LOOPING IF MORE\n  SBIT  PWAF1NOW                      | INDICATE NO WRITE\n ENDBLK BLOCK=PROCESS_SPACE           |ENDBLK\n EJECT                                |\n**------------------------------------------------------------------@C4\n**  SUBROUTINE - PROCESS_SMLIST                                     @C4\n**                                                                  @C4\n**  IF SMLIST IS OPCODE, PROCESS THE LISTING OPTIONS.               @C4\n**                                                                  @C4\n**------------------------------------------------------------------@C4\n BLOCK TYPE=SUBROUTINE,NAME=PROCESS_SMLIST                          @C4\n  L     R1,PWAAOPR                    | POINT R1 TO OPCODE FIELD    @C4\n  LA    R14,1                         | SET INCREMENT TO 1          @C4\n  LA    R15,PWATEXT+L'PWATEXT         | POINT R15 TO LAST BYTE      @C4\n  LA    R0,1                          | ASSUME ONE SPACE            @C4\n  LA    R1,6(,R1)                     | POINT R1 PAST 'SMLIST'      @C4\n  LOOP  BXH,R1,R14                    | SCAN FOR NUMBER AFTER SPACE @C4\n   IF (CLI,0(R1),NE,X'40')            |  IF NON-BLANK FOUND         @C4\n    LR    R2,R15                      |   CALCULATE                 @C4\n    SLR   R2,R1                       |    REMAINING LENGHT         @C4\n    IF (CH,R2,GE,=H'11'),AND,         |   IF OPERAND IS             @C4$\n               (CLC,=C'CONVERT=YES',EQ,0(R1))  CONVERT=YES          @C4\n     SBIT  PWAF1CUP                   |    TURN CONVERSION ON       @C4\n    ELSEIF (CH,R2,GE,=H'10'),AND,     |   ELSE IF OPERAND IS        @C4$\n               (CLC,=C'CONVERT=NO',EQ,0(R1))   CONVERT=NO           @C4\n     RBIT  PWAF1CUP                   |    TURN CONVERSION OFF      @C4\n    ELSE                              |   ELSE                      @C4\n     MVC   PWALMSG,=CL27'>E-8 INVALID SMLIST STATEMENT'  ERROR      @C4\n     IF (CLI,PWAMAXRC,LT,8)           |    IF HIGHEST RC < 8        @C4\n      MVI  PWAMAXRC,8                 |     SET HIGHEST TO 8        @C4\n     ENDIF                            |    ENDIF                    @C4\n    ENDIF                             |   ENDIF                     @C4\n    LEAVE LOOP=*                      |   LEAVE LOOP                @C4\n   ENDIF                              |  ENDIF                      @C4\n  ENDLOOP BXH                         | ENDLOOP                     @C4\n ENDBLK BLOCK=PROCESS_SMLIST          |ENDBLK                       @C4\n EJECT                                |                             @C4\n**--------------------------------------------------------------------*\n**  SUBROUTINE - PROCESS_CONTINUATION_LINES\n**\n**  THIS SUBROUTINE PROCESSES CONTINUATION LINES AND ISSUES WARNING\n**  MESSAGES FOR POSSIBLE CONTINUATION ERRORS.  A POSSIBLE\n**  CONTINUATION ERROR IN WHEN COLUMN 16 OF A CONTINUATION CARD IS\n**  BLANK WHEN IT IS NOT PART OF A QUOTED STRING.\n**\n**--------------------------------------------------------------------*\n BLOCK TYPE=SUBROUTINE,NAME=PROCESS_CONTINUATION_LINES\n  L     R1,PWAAOPR                    | POINT R1 TO OPCODE FIELD\n* *-------------------------------------------------------------------*\n* *  IF NOT A CONDITIONAL ASSEMBLY STATEMENT, CHECK FOR POSSIBLE\n* *  CONTINUATION ERRORS.\n* *-------------------------------------------------------------------*\n  IF           (CLC,0(4,R1),NE,=C'AGO '),AND,                          $\n               (CLC,0(4,R1),NE,=C'AIF '),AND,                          $\n               (CLC,0(5,R1),NE,=C'GBLA '),AND,                         $\n               (CLC,0(5,R1),NE,=C'GBLB '),AND,                         $\n               (CLC,0(5,R1),NE,=C'GBLC '),AND,                         $\n               (CLC,0(5,R1),NE,=C'LCLA '),AND,                         $\n               (CLC,0(5,R1),NE,=C'LCLB '),AND,                         $\n               (CLC,0(5,R1),NE,=C'LCLC '),AND,                         $\n               (CLC,0(5,R1),NE,=C'SETA '),AND,                         $\n               (CLC,0(5,R1),NE,=C'SETB '),AND,                         $\n               (CLC,0(5,R1),NE,=C'SETC ')\n*  *------------------------------------------------------------------*\n*  *  SEARCH FOR SPACE PAST MNEUMONIC.\n*  *------------------------------------------------------------------*\n   LA    R14,1                        |  LOAD R14 WITH INCREMENT\n   LA    R15,PWATEXT+L'PWATEXT        |  POINT R15 TO BYTE AFTER TEXT\n   LOOP BXH,R1,R14                    |  SEARCH FOR BLANK\n    LEAVE LOOP=*,(CLI,0(R1),EQ,X'40') |   COMPLETE IF FOUND\n   ENDLOOP BXH                        |  END OF SEARCH\n*  *------------------------------------------------------------------*\n*  *  SCAN CHARACTER BY CHARACTER THRU RECORDS\n*  *------------------------------------------------------------------*\n   LOOP BXH,R1,R14,NAME=SCAN_RECORD   |\n*   *-----------------------------------------------------------------*\n*   *  IF A COMMA IS FOUND THAT IS FOLLOWED BY A SPACE, READ\n*   *  NEXT LINE AND IF COLUMN 16 IS BLANK, WARN OF A POSSIBLE\n*   *  ERROR.\n*   *-----------------------------------------------------------------*\n    IF (CLI,0(R1),EQ,C',')            |   IF COMMA FOUND\n     LA   R2,1(,R1)                   |    POINT R2 TO NEXT BYTE\n     IF (CLR,R2,GE,R15),OR,           |    IF END OF CARD OR SPACE     $\n               (CLI,0(R2),EQ,X'40')   |\n      CALLSUB READ_CONTINUATION_LINE  |     READ CONTINUATION\n      LEAVE LOOP=SCAN_RECORD,(TREG,R15,NZ)  LEAVE IF READ UNSUCCESSFUL\n      IF (CLI,PWATEXT+16-1,EQ,X'40')  |     IF COL 16 BLANK\n       MVC   PWALMSG(23),=C'>E-4 COLUMN 16 IS BLANK' MOVE IN ERROR MSG\n       IF (CLI,PWAMAXRC,LT,4)         |      IF MAX RETURN CODE < 4\n        MVI   PWAMAXRC,4              |       SET MAX TO 4\n       ENDIF                          |      ENDIF\n       LEAVE LOOP=SCAN_RECORD         |      STOP SCAN OF RECORD\n      ENDIF                           |     ENDIF\n      LEAVE BLOCK=*,(CLI,PWACONT,EQ,X'40')  STOP SCAN IF NOT CONTINUED\n      LA    R1,PWATEXT+16-1           |     POINT R1 TO COL 16\n      LA    R14,1                     |     REESTABLISH R14\n      LA    R15,PWATEXT+L'PWATEXT     |     REESTABLISH R15\n     ENDIF                            |    ENDIF\n    ENDIF                             |   ENDIF\n*   *-----------------------------------------------------------------*\n*   *  IF QUOTE IS FOUND THAT IS NOT PRECEEDED BY A SPECIAL CHARACTER\n*   *  OTHER THAN '&' FOLLOWED BY THE CHARACTER 'L', SEARCH FOR THE\n*   *  ENDING QOUTE.  AN ERROR IS WARNED OF IF COLUMN 71 IS A SINGLE\n*   *  QUOTE AND COLUMN 16 OF THE NEXT CARD IS A SPACE.\n*   *-----------------------------------------------------------------*\n    IF (CLI,0(R1),EQ,C'''')           |   IF QUOTE FOUND\n     LR    R2,R1                      |    POINT R2 TWO BYTES\n     SL    R2,=F'2'                   |     BEFORE CURRENT CHARACTER\n     LA    R3,=C'+-,=.*()''/ '        |    POINT R3 TO SPECIAL CHARS\n     LA    R4,11                      |    LOAD R4 WITH NUMBER OF CHARS\n     LOOP BCT                         |    CHECK TO SEE IF CHARACTER\n      LEAVE LOOP=*,(CLC,0(1,R2),EQ,0(R3))   TWO BYTES BEFORE CURRENT\n      LA    R3,1(,R3)                 |     CHARACTER IS ONE OF THE\n     ENDLOOP BCT,R4                   |     SPECIAL CHARS EXCEPT &\n     LA     R3,0                      |    ZERO R0 WITHOUT CHANGING CC\n     IF NE,OR,(CLI,1(R2),NE,C'L')     |    IF NOT SPECIAL FOLLOWED BY L\n      LOOP BXH,R1,R14                 |     SCAN FOR OTHER QUOTE\n       LA    R2,1(,R1)                |      POINT R2 TO NEXT BYTE\n       IF (CLR,R2,GE,R15)             |      IF OUT OF CHAR ON THIS LIN\n        CALLSUB READ_CONTINUATION_LINE READ CONTINUATION LINE\n        LEAVE LOOP=SCAN_RECORD,(TREG,R15,NZ) LEAVE IF READ FAILED\n        LA    R1,PWATEXT+16-1         |      POINT R1 TO COL 16\n        LA    R14,1                   |      REESTABLISH R14\n        LA    R15,PWATEXT+L'PWATEXT   |      REESTABLISH R15\n        IF (CLM,R3,B'0001',EQ,=C'''') |      IF LAST CHAR WAS QUOTE\n         IF (CLI,PWATEXT+16-1,EQ,X'40')       IF COL 16 IS BLANK\n          MVC   PWALMSG(23),=C'>E-4 COLUMN 16 IS BLANK' MOVE ERR MSG\n          IF (CLI,PWAMAXRC,LT,4)      |        IF MAX RC < 4\n           MVI   PWAMAXRC,4           |         SET MAX RC TO 4\n          ENDIF                       |        ENDIF\n         ENDIF                        |       ENDIF\n         LEAVE BLOCK=*,(CLI,PWACONT,EQ,X'40')\n         LEAVE LOOP=*,(CLI,PWATEXT+16-1,NE,C'''') LEAVE IF NOT ''\n        ELSE                          |      ELSE\n         LEAVE BLOCK=*,(CLI,PWACONT,EQ,X'40')\n         LEAVE LOOP=*,(CLI,1(R1),NE,C'''')    LEAVE IF NOT ''\n         LA    R1,1(,R1)              |       SKIP SECOND '\n        ENDIF                         |      ENDIF\n       ENDIF                          |     ENDIF\n       IC    R3,1(,R1)                |     LOAD R3 WITH NEXT BYTE\n      ENDLOOP BXH                     |    ENDLOOP\n     ENDIF                            |   ENDIF\n    ENDIF                             |  ENDIF\n*   *-----------------------------------------------------------------*\n*   *  LEAVE IF SPACE FOUND OUTSIDE OF QUOTES.\n*   *-----------------------------------------------------------------*\n    LEAVE LOOP=*,(CLI,0(R1),EQ,X'40') |\n   ENDLOOP BXH,LOOP=SCAN_RECORD       |  ENDLOOP\n  ENDIF                               | ENDIF\n* *-------------------------------------------------------------------*\n* *  EAT REST OF CONTINUATION LINES.\n* *-------------------------------------------------------------------*\n  LOOP WHILE,NOT,(TBIT,PWAF1EOF),AND, | LOOP UNTIL END OF CONTINUATION $\n               (CLI,PWACONT,NE,X'40') |  LINES\n   CALLSUB READ_CONTINUATION_LINE     |  READ A CONTINUATION LINE\n  ENDLOOP WHILE                       | ENDLOOP\n ENDBLK BLOCK=PROCESS_CONTINUATION_LINES\n EJECT                                |\n**--------------------------------------------------------------------*\n**  SUBROUTINE - READ_CONTINUATION_LINE\n**\n**  PRINT LAST LINE AND READ CONTINUATION LINE.  IF COL 1-15 IS\n**  NOT BLANK, ISSUE A WARNING.\n**--------------------------------------------------------------------*\n BLOCK TYPE=SUBROUTINE,NAME=READ_CONTINUATION_LINE\n  CALLSUB PRINT_STATEMENT_LINE        | PRINT STATEMENT LINE\n  CALLSUB READ_SYSIN_AND_WRITE_SRCOUT | GET NEXT RECORD\n  LA    R15,8                         | ASSUME 8 RETURN CODE FOR SUB\n  LEAVE BLOCK=*,(TBIT,PWAF1EOF)       | LEAVE IF END OF FILE\n  SLR   R15,R15                       | ASSUME 0 RETURN CODE FOR SUB\n  IF (CLI,PWATEXT,NE,X'40'),OR,       | IF COLUMN 1-15 IS NOT BLANK    $\n               (CLC,PWATEXT+1(15-1),NE,PWATEXT)\n   MVC   PWALMSG(26),=C'>E-4 COLUMN 1-16 NOT BLANK'\n   IF (CLI,PWAMAXRC,LT,4)             |  IF PROGRAM RETURN CODE < 4\n    MVI   PWAMAXRC,4                  |   SET PROGRAM RETURN CODE TO 4\n   ENDIF                              |  ENDIF\n  ENDIF                               | ENDIF\n ENDBLK BLOCK=READ_CONTINUATION_LINE  |\n EJECT                                |\n**--------------------------------------------------------------------*\n**  SUBROUTINE - READ_SYSIN_AND_WRITE_SRCOUT\n**\n**  READ A RECORD FROM SYSIN AND PLACE IT IN THE PWA.\n**--------------------------------------------------------------------*\n BLOCK TYPE=SUBROUTINE,NAME=READ_SYSIN_AND_WRITE_SRCOUT\n* *-----------------------------------------------------------------@C4\n* *  GET A RECORD FROM THE SYSIN FILE AND IF NOT AT END OF FILE,    @C4\n* *  PROCESS IT.                                                    @C4\n* *-----------------------------------------------------------------@C4\n  GET   PWADIN                        | GET RECORD FROM SYSIN\n  IF NOT,(TBIT,PWAF1EOF)              | IF NOT END OF FILE ON SYSIN\n*  *----------------------------------------------------------------@C4\n*  *  MAKE TWO COPIES OF THE RECORD, ONE TO ALTER AND ONE TO LEAVE  @C4\n*  *  ALONE.                                                        @C4\n*  *----------------------------------------------------------------@C4\n   MVC   PWALNE,0(R1)                 |  MOVE RECORD TO PWA\n   MVC   PWAUNALT,0(R1)               |  MOVE UNALTERED RECORD TO PW@C4\n*  *----------------------------------------------------------------@C4\n*  *  IF TRANSLATION IS ON, TRANSLATE LOWER CASE TO UPPER IF IT IS N@C4\n*  *  WITHIN A \"ED STRING.                                          @C4\n*  *----------------------------------------------------------------@C4\n   IF (TBIT,PWAF1CUP),AND,            |  IF CONVERSION IS ON        @C4$\n               (CLI,PWATEXT,NE,C'*'),AND, AND NOT COMMENT LINE      @C4$\n               (CLC,=C'.*',NE,PWATEXT)                              @C4\n    LA    R1,PWATEXT                  |   POINT R1 TO TEXT          @C4\n    LA    R14,1                       |   SET INCREMENT TO 1        @C4\n    LA    R15,L'PWATEXT+PWATEXT-1     |   POINT R15 TO TEXT         @C4\n    LOOP  BXLE                        |   LOOP THROUGH LINE         @C4\n     IF (TBIT,PWAF1QT)                |    IF WORKING ON QUOTED STNG@C4\n      IF (CLI,0(R1),EQ,C'\"')          |     IF DOUBLE QUOTE         @C4\n       RBIT  PWAF1QT                  |      RESET \"INSIDE QUOTED\"  @C4\n       MVI   0(R1),C''''              |      CHANGE TO SINGLE QUOTE @C4\n      ENDIF                           |     ENDIF                   @C4\n     ELSEIF (CLI,0(R1),EQ,C'\"')       |    ELSEIF DOUBLE QUOTE      @C4\n      SBIT PWAF1QT                    |     TURN ON \"INSIDE QUOTED\" @C4\n      MVI  0(R1),C''''                |     CHANGE TO SINGLE QUOTE  @C4\n     ELSE                             |    ELSE                     @C4\n      TR   0(1,R1),S01_TRT_TABLE      |     TRANSLATE TO UPPER      @C4\n     ENDIF                            |    ENDIF                    @C4\n    ENDLOOP BXLE,R1,R14               |   ENDLOOP                   @C4\n   ENDIF                              |  ENDIF                      @C4\n*  *----------------------------------------------------------------@C4\n*  *  IF THIS IS NOT A CONTINUED LINE AND THE QUOTED FLAG IS STILL O@C4\n*  *  CONSIDER IT AN ERROR AND TURN OFF THE FLAG.                   @C4\n*  *----------------------------------------------------------------@C4\n   IF (TBIT,PWAF1QT),AND,(CLI,PWACONT,EQ,C' ') IF UNMATCHED QUOTE   @C4\n    MVC   PWALMSG,=CL27'>E-8 ENDING QUOTE EXPECTED'  ERROR          @C4\n    IF (CLI,PWAMAXRC,LT,8)            |         SET MAX             @C4\n     MVI  PWAMAXRC,8                  |           RETURN            @C4\n    ENDIF                             |           CODE              @C4\n    RBIT  PWAF1QT                     |         RESET \"INSIDE QUOTE\"@C4\n   ENDIF                              |        ENDIF                @C4\n*  *----------------------------------------------------------------@C4\n*  *  WRITE THE MODIFIED COPY OF THE RECORD TO THE OUTPUT FILE.     @C4\n*  *----------------------------------------------------------------@C4\n   PUT   PWADOUT,PWALNE               |  PUT COPY OF RECORD IN SRCOU@C4\n  ENDIF                               | ENDIF\n ENDBLK BLOCK=READ_SYSIN_AND_WRITE_SRCOUT\n SPACE 1                              |                             @C4\n         PSD ,                        |                             @C4\nS01_TRT_TABLE DC 256AL1(*-S01_TRT_TABLE)                            @C4\n         ORG   S01_TRT_TABLE+C'a'     |                             @C4\n         DC    C'ABCDEFGHI'           |                             @C4\n         ORG   S01_TRT_TABLE+C'j'     |                             @C4\n         DC    C'JKLMNOPQR'           |                             @C4\n         ORG   S01_TRT_TABLE+C's'     |                             @C4\n         DC    C'STUVWXYZ'            |                             @C4\n         ORG   ,                      |                             @C4\n         ENDPSD ,                     |                             @C4\n EJECT                                |\n**------------------------------------------------------------------\n**  SUBROUTINE - PRINT_STATEMENT_LINE\n**\n**  IF A PAGE OVERFLOW OCCURS,  SKIP TO THE TOP OF A NEW PAGE\n**  AND PRINT NEW TITLE AND HEADING LINES.  PAGE OVERFLOW IS\n**  FORCED IN VARIOUS PARTS OF THIS PROGRAM BY SETTING CURRENT\n**  LINE NUMBER TO 999.  PRINT THE PRE-PREPARED OUTPUT LINE THEN\n**  CLEAR THE MESSAGE AREA IN THE LINE AND RESET THE CARRIAGE\n**  CONTROL TO SINGLE SPACING.\n**------------------------------------------------------------------\n BLOCK TYPE=SUBROUTINE,NAME=PRINT_STATEMENT_LINE\n  IF (CP,PWALNUM,GT,PSDLPP)           | IF PAGE OVERFLOW THEN\n   AP    PWAPGN,=P'1'                 |  ADD ONE TO PAGE NUMBER\n   MVC   PWATPGN,PSDMPGN              |  MOVE PAGE NUM MASK TO TITLE\n   ED    PWATPGN,PWAPGN               |  EDIT PAGE NUMBER INTO TITLE\n   PUT   PWADPRT,PWAT                 |  PUT TITLE LINE\n   PUT   PWADPRT,PWAH                 |  PUT HEADING LINE\n   MVI   PWALCC,C'0'                  |  NEXT LINE SHOULD DOUBLE SPACE\n   ZAP   PWALNUM,=P'5'                |  SET LINE NUMBER\n  ENDIF                               | ENDIF\n  MVC   PWALTEXT,PWAUNALT             | MOVE LINE TO OUTPUT LINE    @C4\n  PUT   PWADPRT,PWAL                  | PUT LINE\n  FILL  PWALMSG,X'40'                 | CLEAR MESSAGE\n  MVI   PWALCC,X'40'                  | RESET TO SINGLE SPACEING\n  AP    PWALNUM,=P'1'                 | ADD ONE TO LINE NUMBER\n ENDBLK BLOCK=PRINT_STATEMENT_LINE    |\n EJECT                                |\n**--------------------------------------------------------------------*\n**  SUBROUTINE - NEST\n**\n**  PARAMETERS - (CL1-TYPE)\n**\n**  THE ONE BYTE TYPE PASSED IS PUSHED ON THE NESTING STACK.  IF THE\n**  STACK DOES NOT OVERFLOW, THE CURRENT NESTING LEVEL AND A GROUP OF\n**  16 BYTE FROM SIZE DIV 16 * 16 INTO THE STACK ARE MOVED TO THE\n**  PRINT LINE.  IF THE STACK OVERFLOWS, AN ERROR MESSAGE IS MOVED TO\n**  THE MESSAGE AREA OF THE PRINT LINE AND *'S MOVED WHERE THE 16\n**  BYTES OF THE STACK WOULD HAVE BEEN MOVED.\n**--------------------------------------------------------------------*\n   SPACE 1                            |\n BLOCK NAME=NEST,TYPE=SUBROUTINE      |\n  L     R1,0(,R1)                     | POINT R1 TO ONLY PARAMETER\n  IC    R0,0(,R1)                     | INSERT TYPE PASSED IN R0\n  LH    R15,PWANSTL                   | LOAD LENGTH OF STACK\n  IF (CH,R15,LT,=Y(L'PWANSTK))        | IF STACK WILL NOT OVERFLOW\n   STC   R0,PWANSTK(R15)              |  STORE BYTE ON STACK\n   SRA   R15,4                        |  DIVIDE LENGTH BY 16\n   SLA   R15,4                        |  CALCULATE LENGTH / 16 * 16\n   LA    R15,PWANSTK(R15)             |  POINT R15 TO GROUP TO 16 BYTES\n   MVC   PWALNST,0(15)                |  MOVE GROUP TO PRINT LINE\n  ELSE                                | IF STACK OVERFLOWED\n   FILL  PWALNST,C'*'                 |  MOVE *'S TO NESTING PART OF LI\n   MVC   PWALMSG(19),=C'>E-4 STACK OVERFLOW' MOVE ERROR MESSAGE\n   IF (CLI,PWAMAXRC,LT,4)             |  IF MAX RETURN CODE < 4\n    MVI   PWAMAXRC,4                  |   MOVE 4 TO MAX RETURN CODE\n   ENDIF                              |  ENDIF\n  ENDIF                               | ENDIF\n  LH    R15,PWANSTL                   | LOAD LENGTH OF STACK\n  LA    R15,1(,R15)                   | INCREMENT\n  STH   R15,PWANSTL                   | STORE NEW LENGTH OF STACK\n  CVD   R15,PWAD                      | CONVERT NESTING DEPTH TO DEC\n  UNPK  PWALNL,PWAD                   | UNPACK INTO LINE\n  OI    PWALNL+L'PWALNL-1,X'F0'       | REMOVE SIGN\n  MVI   PWALPLS,X'40'                 | MOVE SPACE TO >16 FLAG\n  IF (CH,R15,GT,=H'16')               | IF DEPTH > 16\n   MVI   PWALPLS,C'+'                 |  MOVE PLUS SIGN TO >16 FLAG\n  ENDIF                               | ENDIF\n ENDBLK BLOCK=NEST                    |\n EJECT                                |\n**--------------------------------------------------------------------*\n**  SUBROUTINE - UNNEST\n**\n**  PARAMETERS - (CL1-TYPE)\n**\n**  THE ONE BYTE TYPE PASSED SHOULD BE EQUAL TO THE TOP ELEMENT ON THE\n**  NESTING STACK.  IF IT MATCHES, THE ELEMENT IS POPPED OFF THE\n**  STACK.  IF NOT, AN ERROR MESSAGE IS MOVED TO THE PRINT LINE.  IN\n**  BOTH CASES,  16 BYTES OF THE STACK ARE MOVE TO THE PRINT LINE AS\n**  DISCRIBED IN SUBROUTINE NEST.\n**--------------------------------------------------------------------*\n   SPACE 1                            |\n BLOCK NAME=UNNEST,TYPE=SUBROUTINE    |\n  L     R1,0(,R1)                     | POINT R1 TO ONLY PARAMETER\n  IC    R0,0(,R1)                     | INSERT TYPE PASSED IN R0\n  LH    R15,PWANSTL                   | LOAD LENGTH OF STACK\n  BCTR  R15,0                         | SUBTRACT 1\n  IF (TREG,R15,NM)                    | IF STACK HAS NOT UNDERFLOWED\n   IF (CH,R15,LT,=Y(L'PWANSTK))       |  IF STACK IS NOT IN OVERFLOW\n    LA    R1,PWANSTK(R15)             |   POINT R1 TO TO ELEMENT OF STK\n    IF (CLM,R0,B'0001',EQ,0(R1))      |   IF TOP ELEMENT IS CORRECT\n     STH   R15,PWANSTL                |    STORE NEW LENGTH OF STACK\n     CVD   R15,PWAD                   |    CONVERT NESTING DEPTH TO DEC\n     UNPK  PWALNL,PWAD                |    UNPACK INTO LINE\n     OI    PWALNL+L'PWALNL-1,X'F0'    |    REMOVE SIGN\n     MVI   PWALPLS,X'40'              |    MOVE SPACE TO >16 FLAG\n     IF (CH,R15,GT,=H'16')            |    IF DEPTH > 16\n      MVI   PWALPLS,C'+'              |     MOVE PLUS SIGN TO >16 FLAG\n     ENDIF                            |    ENDIF\n     MVI   0(R1),X'40'                |    BLANK OUT OLD ELEMENT\n     BCTR  R15,0                      |    SUB 1 FROM R15\n     SRA   R15,4                      |    DIVIDE LENGTH BY 16\n     SLA   R15,4                      |    CALCULATE LENGTH / 16 * 16\n     IF M                             |    IF NEGATIVE\n      LA    R15,0                     |     SET R15 TO ZERO\n     ENDIF                            |    ENDIF\n     LA    R15,PWANSTK(R15)           |    POINT R15 TO 16 BYTE GROUP\n     MVC   PWALNST,0(15)              |    MOVE GROUP TO PRINT LINE\n    ELSE                              |   IF TOP ELEMENT NOT CORRECT\n     MVC   PWALMSG(20),=C'>E-8 NESTING PROBLEM' MOVE ERROR MESSAGE\n     IF (CLI,PWAMAXRC,LT,8)           |    IF MAX RC < 8\n      MVI   PWAMAXRC,8                |     SET MAX RC TO 8\n     ENDIF                            |    ENDIF\n    ENDIF                             |   ENDIF\n   ELSE                               |  IF STACK IS STILL OVERFLOWED\n    STH   R15,PWANSTL                 |   SAVE NEW LENGTH OF STACK\n    CVD   R15,PWAD                    |   CONVERT NESTING DEPTH TO DEC\n    UNPK  PWALNL,PWAD                 |   UNPACK INTO LINE\n    OI    PWALNL+L'PWALNL-1,X'F0'     |   REMOVE SIGN\n   ENDIF                              |  ENDIF\n  ELSE                                | IF STACK WILL UNDERFLOW\n   MVC   PWALMSG(22),=C'>E-8 NESTING UNDERFLOW' MOVE ERROR MESSAGE\n   IF (CLI,PWAMAXRC,LT,8)             |  IF MAX RETURN CODE < 8\n    MVI   PWAMAXRC,8                  |   MOVE 8 TO MAX RETURN CODE\n   ENDIF                              |  ENDIF\n  ENDIF                               | ENDIF\n ENDBLK BLOCK=UNNEST                  |\n EJECT                                |\n**--------------------------------------------------------------------*\n**  ERREXIT (UNNAMED)\n**\n**  WTO ERROR MESSAGE BASED ON CODE IN R14\n**\n**--------------------------------------------------------------------*\n   SPACE 1                            |\n BLOCK TYPE=ERREXIT                   |ERREXIT (UNNAMED)\n  MVC   PWAOPNER,PSDOPNER             | MOVE WTO LIST FORM TO PWA\n  CASEBLK REG=R14                     | MOVE DDNAME FAILING TO WTO MSG\n  CASE 0                              | CASE 0\n   MVC   PWAEDDN,=CL8'SYSIN'          |  SYSIN DATASET OPEN ERROR\n  CASE 1                              | CASE 1\n   MVC   PWAEDDN,=CL8'SYSPUNCH'       |  SYSPUNCH DATASET OPEN ERROR\n  CASE 2                              | CASE 2\n   MVC   PWAEDDN,=CL8'SYSPRINT'       |  SYSPRINT DATASET OPEN ERROR\n  ENDCASE                             | ENDCASE\n  WTO   MF=(E,PWAOPNER)               | USE WTO TO ISSUE MESSAGE\n  LA    R15,16                        | SET BASE RETURN CODE\n ENDBLK ,                             |ENDBLK\n         TITLE 'PROGRAM STATIC DATA'  |\n         PSD                          |\nPSDOPNER WTO   'ERROR OPENING DDNAME=........',MF=L,ROUTCDE=11\nPSDEDDN  EQU   PSDOPNER+4+21,8,C'C'   | TAG FOR DDNAME\nPSDOPNER_LENGTH EQU *-PSDOPNER        | LENGTH OF WTO LIST FORM\n         SPACE 1                      |\nPSDMTME  DC    X'402120',C':',X'2020' | MASK FOR TIME\nPSDMDTE  DC    X'402120',C'.',X'202020' MASK FOR DATE\nPSDMPGN  DC    X'402020202120'        | MASK FOR PAGE\n         SPACE 1                      |\nPSDLPP   DC    PL2'60'                | MAXIMUM LINES PER PAGE\n         SPACE 1                      |\n*        TITLE LINE\nPSDT     DC    CL137' '               | TITLE LINE 1\n         ORG   PSDT                   | ORG TO START OF TITLE LINE\n         DC    AL2(137)               | LENGTH OF LINE\n         DC    AL2(0)                 |\n         DC    C'1'                   | SKIP TO TOP OF PAGE\nPSDTID   DC    CL8' '                 | ID FROM TITLE\n         DC    C' '                   | SPACE\nPSDTDTA  DC    CL100' '               | DATA FROM TITLE STATEMENT\n         DC    CL12' '                | TIME\n         DC    C' PAGE'               | C'PAGE'\nPSDTPGN  DC    CL6' '                 | PAGE NUMBER\n         ORG   ,                      |\n         SPACE 1                      |\n*        HEADING LINE\nPSDH     DC    CL137' '               | PRINT LINE\n         ORG   PSDH                   | ORG TO START OF LINE\n         DC    AL2(137)               |\n         DC    AL2(0)                 |\n         DC    C'-'                   | CC\n         DC    CL3'LVL'               | NESTING DEPTH\n         DC    C' '                   | SPACE\n         DC    C'+'                   | PLUS SIGN IF DEEPER THAN 16\n         DC    CL16'    NESTING     ' | NESTING INFO\n         DC    C'  '                  |\n         DC    CL80' SOURCE STATEMENT'  TEXT OF LINE\n         DC    C'  '                  |\n         DC    C'MSC0150$ V1R4 '      | PROGRAM VERSION AND RELEASE @C4\nPSDHTME  DC    CL6' '                 | TIME\nPSDHDTE  DC    CL7' '                 | DATE\n         ORG   ,                      |\n         SPACE 1                      |\n*        LINE\nPSDL     DC    CL137' '               | PRINT LINE\n         ORG   PSDL                   | ORG TO START OF LINE\n         DC    AL2(137)               |\n         DC    AL2(0)                 |\nPSDLCC   DC    C' '                   | CC\nPSDLNL   DC    CL3' '                 | NESTING LEVEL\n         DC    C' '                   | SPACE\nPSDLPLS  DC    C' '                   | PLUS SIGN IF DEEPER THAN 16\nPSDLNST  DC    CL16' '                | NESTING INFO\n         DC    C' |'                  |\nPSDLTEXT DC    CL80' '                | TEXT OF LINE\n         DC    C'| '                  |\nPSDLMSG  DC    CL27' '                | MESSAGE\n         ORG   ,                      |\n         SPACE 1                      |\n*        BLANK LINE USED IN SPACING\nPSDBLINE DC    AL2(6),AL2(0)          | BLANK LINE\nPSDBLCC  DC    C' '                   | CC\n         DC    C' '                   | BLANK FOR BLANK LINE\nPSDBLINE_LENGTH EQU *-PSDBLINE        | LENGTH OF BLANK LINE\n         SPACE 1                      |\n*        NOT AT LEVEL ZERO ERROR MESSAGE\nPSDERLVL DC    AL2(45),AL2(0),C'0>E-8 ENDING STRUCTURAL LEVEL IS NON-ZE$\n               RO'                    |\n         SPACE 1                      |\n*        LITERAL POOL                                               @C4\n         LTORG ,                      |                             @C4\n         SPACE 1                      |                             @C4\nPSDOPN3  OPEN  (*,,*,,*),MF=L         |\nPSDOPN3_LENGTH EQU *-PSDOPN3          |\n         SPACE 3                      |\nPSDDIN   DCB   DDNAME=SYSIN,MACRF=GL,EODAD=EODADIN,DSORG=PS\nPSDDIN_LENGTH EQU *-PSDDIN            |\n         SPACE 3                      |\nPSDDOUT  DCB   DDNAME=SYSPUNCH,MACRF=PM,LRECL=80,DSORG=PS,RECFM=FB\nPSDDOUT_LENGTH EQU *-PSDDOUT          |\n         SPACE 3                      |\nPSDDPRT  DCB   DDNAME=SYSPRINT,MACRF=PM,LRECL=137,                     $\n               RECFM=VBA,DSORG=PS     |\nPSDDPRT_LENGTH EQU *-PSDDPRT          |\n         SPACE 3                      |\n         ENDPSD ,                     |                             @C4\n         TITLE 'DSECTS'               |\n         PUSH  PRINT                  |\n         PRINT NOGEN                  |\n         DCBD  DSORG=PS               |\n         POP   PRINT                  |\n         SPACE 3                      |\n         TITLE 'PROGRAM WORK AREA'    |\n         PWA                          |\nPWAD     DS    D                      | WORK DOUBLE WORD\nPWAAOPR  DS    A                      | ADDRESS OF OPERATION FIELD\nPWAF1    DS    BL1                    | BIT FLAG\nPWAF1EOF EQU   B'10000000'            |   END OF FILE ON SYSIN\nPWAF1NOW EQU   B'01000000'            |   DO NOT WRITE\nPWAF1QT  EQU   B'00100000'            |   INSIDE OF A QUOTED STRING @C4\nPWAF1CUP EQU   B'00010000'            |   CONVERT TO UPPER IS ON    @C4\nPWALNUM  DS    PL2                    | LINE NUMBER (TITLES FIRST TIME)\nPWAPGN   DS    PL3                    | PAGE NUMBER\nPWAMNL   DS    PL3                    | MACRO NESTING LEVEL\nPWAMAXRC DS    X                      | MAXIMUM RETURN CODE\nPWANSTK  DS    CL256                  | NESTING STACK\nPWANSTL  DS    H                      | DISP OF NEXT ELEMENT ON STACK\n*        INPUT LINE\nPWALNE   DS    0CL80                  | INPUT LINE\nPWATEXT  DS    CL71                   | LINE TEXT\nPWACONT  DS    C                      | CONTINUE\n         DS    CL8                    | LINE NUMBER\n*        TITLE LINE\nPWAT     DS    CL(L'PSDT)             | TITLE LINE 1\nPWATID   EQU   PWAT+PSDTID-PSDT,L'PSDTID,C'C'      SEE PSDTID\nPWATDTA  EQU   PWAT+PSDTDTA-PSDT,L'PSDTDTA,C'C'    SEE PSDTDTA\nPWATPGN  EQU   PWAT+PSDTPGN-PSDT,L'PSDTPGN,C'C'    SEE PSDTPGN\n*        HEADING LINE\nPWAH     DS    CL(L'PSDH)             | HEADING LINE\nPWAHTME  EQU   PWAH+PSDHTME-PSDH,L'PSDHTME,C'C'    SEE PSDHTME\nPWAHDTE  EQU   PWAH+PSDHDTE-PSDH,L'PSDHDTE,C'C'    SEE PSDHDTE\n*        UNALTERED LINE                                             @C4\nPWAUNALT DS    CL80                   | UNALTERED PRINT LINE        @C4\n*        LINE\nPWAL     DS    CL(L'PSDL)             | PRINT LINE\nPWALCC   EQU   PWAL+PSDLCC-PSDL,L'PSDLCC,C'C'      SEE PSDLCC\nPWALNL   EQU   PWAL+PSDLNL-PSDL,L'PSDLNL,C'C'      SEE PSDLNL\nPWALPLS  EQU   PWAL+PSDLPLS-PSDL,L'PSDLPLS,C'C'    SEE PSDLPLS\nPWALNST  EQU   PWAL+PSDLNST-PSDL,L'PSDLNST,C'C'    SEE PSDLNST\nPWALTEXT EQU   PWAL+PSDLTEXT-PSDL,L'PSDLTEXT,C'C'  SEE PSDLTEST\nPWALMSG  EQU   PWAL+PSDLMSG-PSDL,L'PSDLMSG,C'C'    SEE PSDLMSG\n*        BLANK LINE USED IN SPACING\nPWABLINE DS    CL(PSDBLINE_LENGTH)    | BLANK LINE\nPWABLCC  EQU   PWABLINE+PSDBLCC-PSDBLINE,L'PSDBLCC SEE PSDBLCC\n*        ERROR WTO STORAGE\n         DS    0F                     | INSURE FULLWORD ALIGNMENT\nPWAOPNER DS    CL(PSDOPNER_LENGTH)    |\nPWAEDDN  EQU   PWAOPNER+PSDEDDN-PSDOPNER           SEE PSDEDDN\n*        DCB STORAGE\n         DS    0F                     | INSURE FULLWORD ALIGNMENT\nPWAOPN3  DS    XL(PSDOPN3_LENGTH)     |\n         DS    0D                     | INSURE DOUBLEWORD ALIGNMENT\nPWADIN   DS    XL(PSDDIN_LENGTH)      |\n         DS    0D                     | INSURE DOUBLEWORD ALIGNMENT\nPWADOUT  DS    XL(PSDDOUT_LENGTH)     |\n         DS    0D                     | INSURE DOUBLEWORD ALIGNMENT\nPWADPRT  DS    XL(PSDDPRT_LENGTH)     |\n         ENDPWA ,                     |\n         END     ,                    |\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PLIST": {"ttr": 9738, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00>\\x00>\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 62, "newlines": 62, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         PLIST &P,                      PARAMETER LIST                 $\n               &PARM1=,                 OPTIONAL PARAMETER 1.       @C5$\n               &VL,                     VL                             $\n               &DS=,                    DEFINE STORAGE              @C1$\n               &PL=                     PARAMETER LIST STORAGE\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      PLIST\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - PLIST\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO BUILD PARAMETER LIST.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    6/27/85 MGG - NEW                                   @C1\n.*              1/22/86 MGG - ADDED * SUPPORT                       @C1\n.*                            ADDED DL= KEYWORD                     @C1\n.*                            ADDED AUTOMATIC PL FOR PWA SUPPORT    @C1\n.*              2/03/87 MGG - EXTENDED AUTOMATIC PL SUPPORT TO      @C2\n.*                            ERREXIT                               @C2\n.*             11/16/89 MGG - Changed to used ##PLIST macro.        @C3\n.*             10/21/98 MGG - Added optional self pointer to        @C4\n.*                            support method calls.                 @C4\n.*              5/21/03 MGG - Change name of SELF parameter to PARM1@C5\n.*\n.*--------------------------------------------------------------------*\n         AIF  (N'&SYSLIST LE 2).SYSLIST_OK                          @C3\n         MNOTE 8,'Too many parameters specified.'                   @C3\n.SYSLIST_OK ANOP                                                    @C3\n         AIF  ('&PL' EQ '' AND '&P' EQ '').EXIT                     @C3\n         ##PLIST START,PL=&PL,DS=&DS                                @C3\n         AIF  ('&PARM1' EQ '').NO_PARM1                             @C5\n         ##PLIST PARM,&PARM1                                        @C5\n.NO_PARM1 ANOP                                                      @C5\n         ##PLIST PLIST,&P                                           @C3\n         ##PLIST END,&VL                                            @C3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PSD": {"ttr": 9985, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00:\\x00:\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 58, "newlines": 58, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         PSD &TYPE=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      PSD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - PSD\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START A PSD\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/22/86 MGG - NEW\n.*             12/01/98 MGG - ADDED TYPE=BOTTOM\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#SDLVL                  STRUCTURAL LEVEL OF STATIC DATA\n         GBLB  &#SDPSD                  INDICATES IN PSD\n         GBLC  &#SDSVLC                 SAVE LOCATION COUNTER\n         LCLC  &TAG                     WORK TAG\n         AIF   (&#SDLVL EQ 0).SKIP\n         MNOTE 8,'Nested PSD and SSD macros are not allowed'\n.SKIP    ANOP\n&#MLVL   SETA  &#MLVL+1                 ADD ONE TO STRUCTURAL LEVEL\n&#SDLVL  SETA  &#MLVL                   SAVE STRUCTURAL LEVEL FOR END\n&#SDPSD  SETB  1\n&#SDSVLC SETC  '&SYSLOC'                SAVE LOCATION COUNTER\n&TAG     SETC  '#PBDL&#PB#C'\n         AIF   ('&TYPE' NE 'BOTTOM').NOTBOTTOM\n&TAG     SETC  '#PBDLB&#PB#C'\n.NOTBOTTOM ANOP\n&TAG     LOCTR ,                        PROGRAM STATIC DATA\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PWA": {"ttr": 9987, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00.\\x00.\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 46, "newlines": 46, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         PWA   &TYPE=LAST\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      PWA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - PWA\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START A PWA\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    7/14/85 MGG - NEW\n.*              1/23/86 MGG - ADDED TYPE=PARTIAL SUPPORT\n.*              2/17/86 MGG - ADDED AUTOMATIC CLOSE OF SWA\n.*              1/05/86 MGG - SUPPORT PWA TAG GLOBAL VARIABLE AND\n.*                            TYPE FIRST.\n.*              1/06/87 MGG - MOVED CODE TO ##WPSTD MACRO\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#WPMAC                  PWA PREFIX MACRO\n         &#WPMAC &TYPE\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RBIT": {"ttr": 9989, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00O\\x00O\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 79, "newlines": 79, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    RBIT  ,                        RESET BIT MACRO\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      RBIT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - RBIT\n.*\n.*  PURPOSE    MACRO USED TO RESET A BIT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         LCLA  &POSFLAG                 POSITION OF FLAG\n         LCLA  &CTR                     COUNTER\n         LCLC  &BYTE                    BYTE NAME\n         LCLC  &FLAGS                   CONCATINATION OF FLAGS\n         AIF   (N'&SYSLIST NE 1).PRC0100\n         AIF   (N'&SYSLIST(1) GT 8).ERR0001  ERROR IF MORE THEN 8 FLAGS\n         AIF   (K'&SYSLIST(1,1) LT 6).ERR0003  ERROR IF FLAG < 6 CHARS\n&BYTE    SETC  '&SYSLIST(1,1)'(1,5)     BYTE NAME IS FIRST FIVE CHARS\n&FLAGS   SETC  'X''FF''-&SYSLIST(1,1)'  MOVE IN FIRST FLAG\n&CTR     SETA  2                        LOOP CONCATINATING EACH FLAG\n.PRC0050 AIF   (&CTR GT N'&SYSLIST(1)).PRC0060   LEAVE LOOP IF FINISHED\n         AIF   (K'&SYSLIST(1,&CTR) LT 6).ERR0003    ERROR\n         AIF   ('&SYSLIST(1,&CTR)'(1,5) NE '&BYTE').ERR0004 ERROR\n&FLAGS   SETC  '&FLAGS-&SYSLIST(1,&CTR)' CONCATINATE\n&CTR     SETA  &CTR+1                   ADD 1 TO COUNTER\n         AGO   .PRC0050                 LOOP FOR ALL FLAGS\n.PRC0060 ANOP\n&NAME    NI    &BYTE,&FLAGS             RESET FLAG(S)\n         MEXIT\n.PRC0100 AIF   (N'&SYSLIST NE 2).ERR0002     ERROR IF MORE THAN 2 PARMS\n         AIF   (N'&SYSLIST(2) GT 8).ERR0001  ERROR IF MORE THAN 8 FLAGS\n&BYTE    SETC  '&SYSLIST(1)'            SET BYTE NAME\n&FLAGS   SETC  'X''FF''-&SYSLIST(2,1)'  MOVE IN FIRST FLAG\n&CTR     SETA  2                        LOOP CONCATINATING EACH FLAG\n.PRC0150 AIF   (&CTR GT N'&SYSLIST(2)).PRC0160 LEAVE LOOP IF FINISHED\n&FLAGS   SETC  '&FLAGS-&SYSLIST(2,&CTR)' CONCATINATE\n&CTR     SETA  &CTR+1                   ADD 1 TO COUNTER\n         AGO   .PRC0150                 LOOP FOR ALL FLAGS\n.PRC0160 ANOP\n&NAME    NI    &BYTE,&FLAGS             RESET FLAG(S)\n         MEXIT\n.ERR0001 MNOTE 8,'No more than eight flags can be specified'\n         MEXIT\n.ERR0002 MNOTE 8,'RBIT macro can have no more than two operands'\n         MEXIT\n.ERR0003 MNOTE 8,'IF byte is not specified, flag name must be at least $\n               six characters long'\n         MEXIT\n.ERR0004 MNOTE 8,'If byte is not specified, the first five characters o$\n               f all flags must match'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SBIT": {"ttr": 9992, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00O\\x00O\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 79, "newlines": 79, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    SBIT  ,                        SET BIT MACRO\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      SBIT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - SBIT\n.*\n.*  PURPOSE    MACRO USED TO SET A BIT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         LCLA  &POSFLAG                 POSITION OF FLAG\n         LCLA  &CTR                     COUNTER\n         LCLC  &BYTE                    BYTE NAME\n         LCLC  &FLAGS                   CONCATINATION OF FLAGS\n         AIF   (N'&SYSLIST NE 1).PRC0100\n         AIF   (N'&SYSLIST(1) GT 8).ERR0001  ERROR IF MORE THEN 8 FLAGS\n         AIF   (K'&SYSLIST(1,1) LT 6).ERR0003  ERROR IF FLAG < 6 CHARS\n&BYTE    SETC  '&SYSLIST(1,1)'(1,5)     BYTE NAME IS FIRST FIVE CHARS\n&FLAGS   SETC  '&SYSLIST(1,1)'          MOVE IN FIRST FLAG\n&CTR     SETA  2                        LOOP CONCATINATING EACH FLAG\n.PRC0050 AIF   (&CTR GT N'&SYSLIST(1)).PRC0060   LEAVE LOOP IF FINISHED\n         AIF   (K'&SYSLIST(1,&CTR) LT 6).ERR0003    ERROR\n         AIF   ('&SYSLIST(1,&CTR)'(1,5) NE '&BYTE').ERR0004 ERROR\n&FLAGS   SETC  '&FLAGS+&SYSLIST(1,&CTR)' CONCATINATE\n&CTR     SETA  &CTR+1                   ADD 1 TO COUNTER\n         AGO   .PRC0050                 LOOP FOR ALL FLAGS\n.PRC0060 ANOP\n&NAME    OI    &BYTE,&FLAGS             SET FLAG(S)\n         MEXIT\n.PRC0100 AIF   (N'&SYSLIST NE 2).ERR0002     ERROR IF MORE THAN 2 PARMS\n         AIF   (N'&SYSLIST(2) GT 8).ERR0001  ERROR IF MORE THAN 8 FLAGS\n&BYTE    SETC  '&SYSLIST(1)'            SET BYTE NAME\n&FLAGS   SETC  '&SYSLIST(2,1)'          MOVE IN FIRST FLAG\n&CTR     SETA  2                        LOOP CONCATINATING EACH FLAG\n.PRC0150 AIF   (&CTR GT N'&SYSLIST(2)).PRC0160 LEAVE LOOP IF FINISHED\n&FLAGS   SETC  '&FLAGS+&SYSLIST(2,&CTR)' CONCATINATE\n&CTR     SETA  &CTR+1                   ADD 1 TO COUNTER\n         AGO   .PRC0150                 LOOP FOR ALL FLAGS\n.PRC0160 ANOP\n&NAME    OI    &BYTE,&FLAGS             SET FLAG(S)\n         MEXIT\n.ERR0001 MNOTE 8,'No more than eight flags can be specified'\n         MEXIT\n.ERR0002 MNOTE 8,'SBIT macro can have no more than two operands'\n         MEXIT\n.ERR0003 MNOTE 8,'If byte is not specified, flag name must be at least $\n               six characters long'\n         MEXIT\n.ERR0004 MNOTE 8,'If byte is not specified, the first five characters o$\n               f all flags must match'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMCTRL": {"ttr": 9995, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00L\\x00L\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 76, "newlines": 76, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    SMCTRL &FREEPWA=               SET BIT MACRO\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      SMCTRL\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - SMCTRL\n.*\n.*  PURPOSE    MACRO USED TO SET CONTROL INFORMATION IN THE\n.*             STRUCTURED MACROS.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    4/23/87 - NEW  MGG\n.*              3/28/91 - Added support for MANUALFREE option.      @C1\n.*              2/19/92 - Fixed bug that ignored parm number for    @C2\n.*                        reusable PWA.                             @C2\n.*\n.*--------------------------------------------------------------------*\n         GBLB  &#PBRPWA                 REUSABLE PWA OPTION\n         GBLA  &#PBPWAP                 REUSABLE PWA PARM NUMBER    @C2\n         GBLB  &#PBMFRE                 MANUALFREE OPTION           @C1\n         GBLC  &PWA                     PWA TAG                     @C1\n.*====================================================================*\n.*   FREEPWA KEYWORD\n.*====================================================================*\n         AIF  ('&FREEPWA' EQ '').FPW9999\n         AIF  (&#PBRPWA OR &#PBMFRE).FPW0100                        @C1\n         MNOTE 8,'The FREEPWA keyword is only valid if the REUSPWA or M$\n               ANUALFREE option is in effect'                       @C1\n.FPW0100 AIF  (&#PBMFRE).FPW1000                                    @C1\n         ##SWREG R15\n         L     R15,4(,R13)              LOAD R15 WITH BACKLINK\n         L     R15,24(,R15)             LOAD R15 WITH R1 AT ENTRY\n         L     R15,(&#PBPWAP-1)*4(,R15) LOAD R15 WITH PTR TO ANCHOR @C2\n         AIF   ('&FREEPWA' NE 'YES').FPW0110\n         OI    0(R15),X'80'             INDICATE PWA SHOULD BE FREED\n         AGO   .FPW0200\n.FPW0110 AIF   ('&FREEPWA' EQ 'NO').FPW0120\n         MNOTE 8,'FREEPWA=&FREEPWA is not valid'\n.FPW0120 NI    0(R15),X'7F'             INDICATE PWA SHOULD BE KEPT\n.FPW0200 ##RWREG R15\n         AGO   .FPW9999                                             @C1\n.FPW1000 ANOP                                                       @C1\n         AIF   ('&FREEPWA' NE 'YES').FPW1110                        @C1\n         OI    &PWA.__F,&PWA.__F_FREEPWA                            @C1\n         AGO   .FPW9999                                             @C1\n.FPW1110 AIF   ('&FREEPWA' EQ 'NO').FPW1120                         @C1\n         MNOTE 8,'FREEPWA=&FREEPWA is not valid'                    @C1\n.FPW1120 NI    &PWA.__F,X'FF'-&PWA.__F_FREEPWA                      @C1\n.FPW9999 ANOP\n.*====================================================================*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMLIST": {"ttr": 9998, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00*\\x00*\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 42, "newlines": 42, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         SMLIST &CONVERT=               SET BIT MACRO\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1988.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      SMLIST\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - SMLIST\n.*\n.*  PURPOSE    THIS MACRO WILL BE INTERPRETED BY THE STRUCTURED\n.*             MACRO LISTING PROGRAM TO TURN UPPER CASE CONVERSION\n.*             ON AND OFF.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/8/88 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         MNOTE *,'Processed by listing program.'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMPUCOND": {"ttr": 10000, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 18, "newlines": 18, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n* The macros in the member have been moved to ##UCEXI, ##UCTRT,\n* ##UCL16, ##UCL32, and SMSYMS.  MGG 11/03/98\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMSYMS": {"ttr": 10002, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\x98\\x00\\x98\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 152, "newlines": 152, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*\n*   (C) COPYRIGHT 1988.  CLEMSON UNIVERSITY COMPUTER CENTER.\n*\n*   MEMBER     SMSYMS\n*\n*   TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n*              PROGRAMMING MACROS - SMSYMS\n*\n*   PURPOSE    THIS COPY MEMBER CONTAINS CODE THAT NEEDS TO BE\n*              COPIED INTO PROGRAMS THAT USE THE STRUCTURED\n*              MACROS.\n*\n*   NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n*              THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n*\n*              . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n*                PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n*\n*   ACTIVITY    9/1/88 - NEW  MGG\n*               3/14/89 MGG - ADDED &P SYMBOL\n*               3/23/89 MGG - ADDED &PWA AND &PSD SYMBOLS.\n*               5/02/89 MGG - ADDED &SWA, &SSD, &SPL AND &PPL SYMBOLS.\n*              11/03/98 MGG - ADDED STANDARD UCOND AND UDT.\n*               8/10/05 MGG - Removed experimental definitions.\n*                             Added SM_ macros.\n*\n*---------------------------------------------------------------------*\n         GBLC  &PWA                PROGRAM WORK AREA ID\n         GBLC  &PSD                PROGRAM STATIC DATA ID\n         GBLC  &PPL                PROGRAM PARAMETER LIST\n         GBLC  &SWA                SUBROUTINE WORK AREA ID\n         GBLC  &W                  SHORTER NAME\n         GBLC  &SSD                SUBROUTINE STATIC DATA ID\n         GBLC  &S                  SHORTER NAME\n         GBLC  &SPL                SUBROUTINE PARAMETER LIST\n         GBLC  &P                  SHORTER NAME\n.*--------------------------------------------------------------------*\n.* Standard user conditions.\n.*--------------------------------------------------------------------*\n         DEFUCOND NAME=EXI,MACRO=##UCEXI\n         DEFUCOND NAME=TRT,MACRO=##UCTRT\n         DEFUCOND NAME=L16,MACRO=##UCL16\n         DEFUCOND NAME=L32,MACRO=##UCL32\n.*====================================================================*\n.* SM_ macros.\n.*====================================================================*\n.* Move Long\n         MACRO\n&NAME    SM_MOVEL &TOREG,&FROMREG,&LENREG\n         LCLA   &N\n&N       SETA   N'&SYSLIST\n&NAME    ##MOVEL &TOREG,&FROMREG,&LENREG,N=&N,MACNAME=SM_MOVEL\n         MEND\n.* Add halfword immediate.\n         MACRO\n&NAME    SM_AHI &REG,&VALUE\n&NAME    ##AHI  &REG,&VALUE\n         MEND\n.* Load halfword immediate.\n         MACRO\n&NAME    SM_LHI &REG,&VALUE\n&NAME    ##LHI  &REG,&VALUE\n         MEND\n.* Load address long.\n         MACRO\n&NAME    SM_LAL &REG,&TAG,&LPBASE=YES\n&NAME    ##LAL &REG,&TAG,LPBASE=&LPBASE\n         MEND\n.* Increment fullword\n         MACRO\n&NAME    SM_INC &FULLWORD,&WREG=R14,&INC=1\n&NAME    L     &WREG,&FULLWORD\n         ##AHI &WREG,&INC\n         ST    &WREG,&FULLWORD\n         MEND\n.* Increment halfword\n         MACRO\n&NAME    SM_INCH &HALFWORD,&WREG=R14,&INC=1\n&NAME    LH    &WREG,&HALFWORD\n         ##AHI &WREG,&INC\n         STH   &WREG,&HALFWORD\n         MEND\n.* Increment register\n         MACRO\n&NAME    SM_INCR &REG,&INC=1\n&NAME    ##AHI &REG,&INC\n         MEND\n.* Decrement fullword\n         MACRO\n&NAME    SM_DEC &FULLWORD,&WREG=R14,&DEC=1\n&NAME    L     &WREG,&FULLWORD\n         ##AHI &WREG,-(&DEC)\n         ST    &WREG,&FULLWORD\n         MEND\n.* Decrement halfword\n         MACRO\n&NAME    SM_DECH &HALFWORD,&WREG=R14,&DEC=1\n&NAME    LH    &WREG,&HALFWORD\n         ##AHI &WREG,-(&DEC)\n         STH   &WREG,&HALFWORD\n         MEND\n.* Decrement register\n         MACRO\n&NAME    SM_DECR &REG,&DEC=1\n&NAME    ##AHI &REG,-(&DEC)\n         MEND\n.* Add fullword storage\n         MACRO\n&NAME    SM_AS &TO,&FROM,&WREG=R14\n&NAME    L     &WREG,&FROM\n         A     &WREG,&TO\n         ST    &WREG,&TO\n         MEND\n.* Add halfword storage\n         MACRO\n&NAME    SM_ASH &TO,&FROM,&WREG=R14\n&NAME    LH    &WREG,&FROM\n         AH    &WREG,&TO\n         STH   &WREG,&TO\n         MEND\n.* Subtract fullword storage\n         MACRO\n&NAME    SM_SS &TO,&FROM,&WREG=R14\n&NAME    L     &WREG,&TO\n         S     &WREG,&FROM\n         ST    &WREG,&TO\n         MEND\n.* Subtract halfword storage\n         MACRO\n&NAME    SM_SSH &TO,&FROM,&WREG=R14\n&NAME    LH    &WREG,&TO\n         SH    &WREG,&FROM\n         STH   &WREG,&TO\n         MEND\n*-- END OF SMSYMS ----------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSD": {"ttr": 10242, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00M\\x00M\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 77, "newlines": 77, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         SSD &TYPE=\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      SSD\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - SSD\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START A SSD\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    1/22/86 MGG - NEW\n.*              8/05/05 MGG - ADDED TYPE=BOTTOM\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#SB#C                   SUBROUTINE BLOCK NUMBER\n         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER\n         GBLA  &#MLVL                   STRUCTURAL LEVEL\n         GBLA  &#SDLVL                  STRUCTURAL LEVEL OF STATIC DATA\n         GBLB  &#SDSSD                  INDICATES IN SSD\n         GBLC  &#SDSVLC                 SAVE LOCATION COUNTER\n         GBLB  &#SBLDBS                 SUBROUTINE LOADBASE OPTION\n         AIF   (&#SDLVL EQ 0).SKIPERR\n         MNOTE 8,'Nested PSD and SSD macros are not allowed'\n.SKIPERR ANOP\n&#MLVL   SETA  &#MLVL+1                 ADD ONE TO STRUCTURAL LEVEL\n&#SDLVL  SETA  &#MLVL                   SAVE STRUCTURAL LEVEL FOR END\n&#SDSSD  SETB  1\n&#SDSVLC SETC  '&SYSLOC'                SAVE LOCATION COUNTER\n         AIF   ('&TYPE' EQ '').SD\n         AIF   ('&TYPE' EQ 'LAST').SD\n         AIF   ('&TYPE' EQ 'PARTIAL').SD\n         AIF   ('&TYPE' EQ 'BOTTOM').BOT\n         MNOTE 4,'INVALID TYPE=&TYPE on SSD.'\n.SD      AIF   (&#SBLDBS).SSD\n         AGO   .PSD\n.BOT     AIF   (&#SBLDBS).SSDBOT\n         AGO   .PSDBOT\n.SSD     ANOP\n&TAG     SETC  '#SBDL&#SB#C'\n         AGO   .LOCTR\n.PSD     ANOP\n&TAG     SETC  '#PBDL&#PB#C'\n         AGO   .LOCTR\n.SSDBOT  ANOP\n&TAG     SETC  '#SBDLB&#SB#C'\n         AGO   .LOCTR\n.PSDBOT  ANOP\n&TAG     SETC  '#PBDLB&#PB#C'\n         AGO   .LOCTR\n.LOCTR   ANOP\n&TAG     LOCTR ,                        SUBROUTINE DATA\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STRSA": {"ttr": 10245, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x003\\x003\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 51, "newlines": 51, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         STRSA &REG\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      STRSA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - STRSA\n.*\n.*  PURPOSE    MACRO USED TO STORE REGISTER IS REGISTER SAVE AREA\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    7/16/85 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLA  &#MCVREG                 CONVERTED REGISTER\n         GBLA  &#SB#C                   CURRENT SUBROUTINE NUMBER\n         GBLB  &#SBSWA                  SWA OPTION\n         ##CVREG &REG\n         AIF   (&#MCVREG GE 15).ERR1\n         AIF   (NOT &#SBSWA).ERR2\n         ST    &REG,#SBS&#SB#C+4*&#MCVREG SAVE REGISTER IN SAVE AREA\n         MEXIT\n.ERR1    MNOTE 8,'Invalid register specified - &REG'\n         MEXIT\n.ERR2    MNOTE 8,'This macro can only be used in subroutine blocks with$\n                the SWA option specified'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SWA": {"ttr": 10247, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00+\\x00+\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 43, "newlines": 43, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         SWA   &TYPE=LAST\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1985.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      SWA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - SWA\n.*\n.*  PURPOSE    STRUCTURED MACRO USED TO START A SWA\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    7/14/85 MGG - NEW\n.*              1/23/86 MGG - ADDED TYPE=PARTIAL SUPPORT\n.*              1/06/87 MGG - MOVED CODE TO ##UPMAC\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &#UPMAC                  SWA PROLOG MACRO\n         &#UPMAC &TYPE\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TBIT": {"ttr": 10249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00W\\x00W\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 87, "newlines": 87, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    TBIT  ,                        TEST BIT MACRO\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      TBIT\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - TBIT\n.*\n.*  PURPOSE    MACRO USED TO TEST A BIT.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         LCLA  &POSFLAG                 POSITION OF FLAG\n         LCLA  &CTR                     COUNTER\n         LCLC  &BYTE                    BYTE NAME\n         LCLC  &FLAGS                   CONCATINATION OF FLAGS\n         AIF   (N'&SYSLIST NE 1).PRC0100\n         AIF   (N'&SYSLIST(1) GT 8).ERR0001  ERROR IF MORE THEN 8 FLAGS\n         AIF   (K'&SYSLIST(1,1) LT 6).ERR0003  ERROR IF FLAG < 6 CHARS\n&BYTE    SETC  '&SYSLIST(1,1)'(1,5)     BYTE NAME IS FIRST FIVE CHARS\n&FLAGS   SETC  '&SYSLIST(1,1)'          MOVE IN FIRST FLAG\n&CTR     SETA  2                        LOOP CONCATINATING EACH FLAG\n.PRC0050 AIF   (&CTR GT N'&SYSLIST(1)).PRC0060   LEAVE LOOP IF FINISHED\n         AIF   (K'&SYSLIST(1,&CTR) LT 6).ERR0003    ERROR\n         AIF   ('&SYSLIST(1,&CTR)'(1,5) NE '&BYTE').ERR0004 ERROR\n&FLAGS   SETC  '&FLAGS+&SYSLIST(1,&CTR)' CONCATINATE\n&CTR     SETA  &CTR+1                   ADD 1 TO COUNTER\n         AGO   .PRC0050                 LOOP FOR ALL FLAGS\n.PRC0060 AIF   (N'&SYSLIST(1) NE 1).PRC0070        ASM H REQUIRED?\n         AIF   ('&SYSLIST(1)'(1,1) NE '(').PRC0070   YES, ERROR\n         AIF   ('&SYSLIST(1)' EQ '&SYSLIST(1,1)').ERR0005\n.PRC0070 ANOP\n&NAME    TM    &BYTE,&FLAGS             TEST FLAG(S)\n         MEXIT\n.PRC0100 AIF   (N'&SYSLIST NE 2).ERR0002     ERROR IF MORE THAN 2 PARMS\n         AIF   (N'&SYSLIST(2) GT 8).ERR0001  ERROR IF MORE THAN 8 FLAGS\n&BYTE    SETC  '&SYSLIST(1)'            SET BYTE NAME\n&FLAGS   SETC  '&SYSLIST(2,1)'          MOVE IN FIRST FLAG\n&CTR     SETA  2                        LOOP CONCATINATING EACH FLAG\n.PRC0150 AIF   (&CTR GT N'&SYSLIST(2)).PRC0160 LEAVE LOOP IF FINISHED\n&FLAGS   SETC  '&FLAGS+&SYSLIST(2,&CTR)' CONCATINATE\n&CTR     SETA  &CTR+1                   ADD 1 TO COUNTER\n         AGO   .PRC0150                 LOOP FOR ALL FLAGS\n.PRC0160 AIF   (N'&SYSLIST(2) NE 1).PRC0170        ASM H REQUIRED?\n         AIF   ('&SYSLIST(2)'(1,1) NE '(').PRC0170 YES, ERROR\n         AIF   ('&SYSLIST(2)' EQ '&SYSLIST(2,1)').ERR0005\n.PRC0170 ANOP\n&NAME    TM    &BYTE,&FLAGS             TEST FLAG(S)\n         MEXIT\n.ERR0001 MNOTE 8,'No more than eight flags can be specified'\n         MEXIT\n.ERR0002 MNOTE 8,'TBIT macro can have no more than two operands'\n         MEXIT\n.ERR0003 MNOTE 8,'If byte is not specified, flag name must be at least $\n               six characters long'\n         MEXIT\n.ERR0004 MNOTE 8,'If byte is not specified, the first five characters o$\n               f all flags must match'\n         MEXIT\n.ERR0005 MNOTE 8,'This expression requires the Level H assembler'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TREG": {"ttr": 10252, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00+\\x00+\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 43, "newlines": 43, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    TREG  ,                        TEST REGISTER MACRO\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      TREG\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - TREG\n.*\n.*  PURPOSE    MACRO USED TO TEST A REGISTER.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY   11/01/83 - NEW  MGG\n.*\n.*--------------------------------------------------------------------*\n         AIF   (N'&SYSLIST NE 1).ERR0001\n&NAME    LTR   &SYSLIST(1),&SYSLIST(1)  TEST REGISTER\n         MEXIT\n.ERR0001 MNOTE 8,'TREG macro can have one and only one operand'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VDA": {"ttr": 10254, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x11\\x01\\x11)\\x9f\\x01\\x11)\\x9f\\t(\\x00\\xa0\\x00\\xa0\\x00\\x00\\xc3\\xd3\\xc5\\xd4\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2011-10-26T00:00:00", "modifydate": "2011-10-26T09:28:11", "lines": 160, "newlines": 160, "modlines": 0, "user": "CLEMSON"}, "text": ".*--------------------------------------------------------------------*\n.*  Copyright 2011 by Clemson University Research Foundation          *\n.*                                                                    *\n.*  Licensed under the Apache License, Version 2.0 (the \"License\");   *\n.*  you may not use this file except in compliance with the License.  *\n.*  You may obtain a copy of the License in this library as member    *\n.*  $LICENSE, or from                                                 *\n.*                                                                    *\n.*      http://www.apache.org/licenses/LICENSE-2.0                    *\n.*                                                                    *\n.*  Unless required by applicable law or agreed to in writing,        *\n.*  software distributed under the License is distributed on an \"AS   *\n.*  IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *\n.*  express or implied.  See the License for the specific language    *\n.*  governing permissions and limitations under the License.          *\n.*--------------------------------------------------------------------*\n         MACRO\n         VDA   &ID=,&GENTYPE=,&DSECT=,&START=,&TYPE=LAST,&ALIGN=F\n.*--------------------------------------------------------------------*\n.*\n.*  (C) COPYRIGHT 1991.  CLEMSON UNIVERSITY COMPUTER CENTER.\n.*\n.*  MACRO      VDA\n.*\n.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*             PROGRAMMING MACROS - VDA\n.*\n.*  PURPOSE    MACRO TO START A VARIABLE DEFINITION AREA.\n.*\n.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON\n.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:\n.*\n.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED\n.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.\n.*\n.*  ACTIVITY    8/06/91 MGG - NEW\n.*\n.*--------------------------------------------------------------------*\n         GBLC  &VDA__ID(20)\n         GBLC  &VDA__START(20)\n         GBLC  &VDA__ALIGN(20)\n         GBLC  &VDA__GENTYPE\n         GBLC  &VDA__CSECT\n         GBLA  &VDA__LEVEL\n         GBLC  &VDA__PROLOG\n         GBLC  &VDA__EPILOG\n         GBLC  &VDA__DC\n         GBLC  &VDA__DS\n         GBLC  &VDA__EQU\n         GBLC  &VDA__ORG\n.*\n.*  Initialize variables.\n.*\n&VDA__LEVEL   SETA &VDA__LEVEL+1\n&VDA__ID(&VDA__LEVEL)    SETC  '&ID'\n.*\n&VDA__START(&VDA__LEVEL) SETC  '&START'\n&VDA__ALIGN(&VDA__LEVEL) SETC  '&ALIGN'\n         AIF   ('&START' NE '').PRC010\n&VDA__START(&VDA__LEVEL) SETC  '&ID.START'\n.PRC010  AIF   (&VDA__LEVEL EQ 1).PRC020\n         MNOTE *,'DSECT, GENTYPE and TYPE are ignored for nested VDAs.'\n         AGO   .PROLOG\n.PRC020  ANOP\n&VDA__CSECT   SETC '&SYSECT'\n&VDA__GENTYPE SETC ''\n&VDA__PROLOG  SETC ''\n&VDA__EPILOG  SETC ''\n&VDA__DC      SETC ''\n&VDA__DS      SETC ''\n&VDA__EQU     SETC ''\n&VDA__ORG     SETC ''\n.*\n.*  Process based on GENTYPE and DSECT.\n.*\n         AIF   ('&DSECT' EQ '').SEL100\n         AIF   ('&GENTYPE' EQ '').SEL050\n         MNOTE *,'DSECT=&DSECT ignored because was GENTYPE specified.'\n         AGO   .SEL100\n.SEL050  AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&DSECT' EQ 'NO').INLINE\n         MNOTE 4,'DSECT=&DSECT is not valid.  DSECT=NO assumed.'\n         AGO   .INLINE\n.SEL100  AIF   ('&GENTYPE' EQ '').INLINE\n         AIF   ('&GENTYPE' EQ 'INLINE').INLINE\n         AIF   ('&GENTYPE' EQ 'GENERATE').INLINE\n         AIF   ('&GENTYPE' EQ 'DSECT').DSECT\n         AIF   ('&GENTYPE(1)'(1,1) EQ '%').VGTYPE\n         MNOTE 8,'GENTYPE=&GENTYPE is not valid.'\n         MEXIT\n.*\n.*  Process user defined GENTYPE.\n.*\n.VGTYPE  ANOP\n&X       SETA  K'&GENTYPE(1)-1\n         AIF   (&X GE 1).VGT050\n         MNOTE 8,'GENTYPE=&GENTYPE is not valid.'\n         MEXIT\n.VGT050  ANOP\n&NAME    SETC  '&GENTYPE(1)'(2,&X)\n&VGTYP_DEFINED SETC '&NAME.__DEFINED'\n&VGTYP_PROLOG  SETC '&NAME.__PROLOG'\n&VGTYP_EPILOG  SETC '&NAME.__EPILOG'\n&VGTYP_DC      SETC '&NAME.__DC'\n&VGTYP_DS      SETC '&NAME.__DS'\n&VGTYP_EQU     SETC '&NAME.__EQU'\n&VGTYP_ORG     SETC '&NAME.__ORG'\n         GBLB  &(&VGTYP_DEFINED)\n         GBLC  &(&VGTYP_PROLOG)\n         GBLC  &(&VGTYP_EPILOG)\n         GBLC  &(&VGTYP_DC)\n         GBLC  &(&VGTYP_DS)\n         GBLC  &(&VGTYP_EQU)\n         GBLC  &(&VGTYP_ORG)\n         AIF   (&(&VGTYP_DEFINED)).VGT100\n         MNOTE 8,'No DEFDGTYP macro exists for GENTYPE=&GENTYPE.'\n         MEXIT\n.VGT100  ANOP\n&VDA__PROLOG SETC '&(&VGTYP_PROLOG)'\n&VDA__EPILOG SETC '&(&VGTYP_EPILOG)'\n&VDA__DC     SETC '&(&VGTYP_DC)'\n&VDA__DS     SETC '&(&VGTYP_DS)'\n&VDA__EQU    SETC '&(&VGTYP_EQU)'\n&VDA__ORG    SETC '&(&VGTYP_ORG)'\n         AGO   .PROLOG\n.*\n.*  Process GENTYPE=INLINE.\n.*\n.INLINE  ANOP\n&VDA__GENTYPE SETC 'INLINE'\n&VDA__PROLOG  SETC '##VPINLN'\n&VDA__EPILOG  SETC '##VEINLN'\n         AGO   .PROLOG\n.*\n.*  Process GENTYPE=DSECT.\n.*\n.DSECT   ANOP\n&VDA__GENTYPE SETC 'DSECT'\n&VDA__PROLOG  SETC '##VPDSCT'\n&VDA__EPILOG  SETC '##VEDSCT'\n         AGO   .PROLOG\n.*\n.*  Do OPSYNs as necessary and call prolog macro.\n.*\n.PROLOG  AIF   (&VDA__LEVEL NE 1).PRO500\n         AIF   ('&VDA__DC' EQ '').PRO110\n##DC     OPSYN DC\nDC       OPSYN\n.PRO110  AIF   ('&VDA__DS' EQ '').PRO120\n##DS     OPSYN DS\nDS       OPSYN\n.PRO120  AIF   ('&VDA__EQU' EQ '').PRO130\n##EQU    OPSYN EQU\nEQU      OPSYN\n.PRO130  ANOP\n.PRO500  AIF   ('&VDA__PROLOG' EQ '').PRO510\n         &VDA__PROLOG GENTYPE=&GENTYPE\n.PRO510  ANOP\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT858/FILE858.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT858", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}