.*--------------------------------------------------------------------*
.*  Copyright 2011 by Clemson University Research Foundation          *
.*                                                                    *
.*  Licensed under the Apache License, Version 2.0 (the "License");   *
.*  you may not use this file except in compliance with the License.  *
.*  You may obtain a copy of the License in this library as member    *
.*  $LICENSE, or from                                                 *
.*                                                                    *
.*      http://www.apache.org/licenses/LICENSE-2.0                    *
.*                                                                    *
.*  Unless required by applicable law or agreed to in writing,        *
.*  software distributed under the License is distributed on an "AS   *
.*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *
.*  express or implied.  See the License for the specific language    *
.*  governing permissions and limitations under the License.          *
.*--------------------------------------------------------------------*
         MACRO
         ##SPSTD &NAME,                 NAME OF BLOCK                  $
               &OPTIONS,                OPTIONS                        $
               &BASEREG,                BASE REGS                      $
               &AMODE,                  ADDRESSING MODE                $
               &SMWA,                   STRUCTURED MACRO WORK AREA     $
               &SWAREG,                 SWA BASE REGS                  $
               &RECUR,                  MAX RECURSIVE CALLS            $
               &SAVE,                   REGISTER TO SAVE               $
               &PARMS,                  INPUT PARM LIST                $
               &PARMMAP                 INPUT MAP
.*--------------------------------------------------------------------*
.*
.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.
.*
.*  MACRO      ##SPSTD
.*
.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*             PROGRAMMING MACROS - ##SPSTD
.*
.*  PURPOSE    DEFAULT MACRO USED TO FOR SUBROUTINE BLOCK PROLOG.
.*
.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON
.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:
.*
.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.
.*
.*  ACTIVITY   12/18/86 MGG - BROKE APART FROM BLOCK MACRO AND
.*                            RESTRUCTURED.
.*              9/01/88 MGG - ADDED &S AND &W GLOBAL TAGS           @C1
.*              3/14/89 MGG - ADDED &P GLOBAL TAG                   @C2
.*              5/08/89 MGG - &S, &W, AND &P GENERATION MOVED TO    @C3
.*                            BLOCK MACRO.  ADDED EQU FOR &SSD.     @C3
.*                            ADDED PARMS OPTION SUPPORT.           @C3
.*              8/06/05 MGG - ADDED A BOTTOM OF SSD LOCTR.          @C4
.*                            ADDED SUPPORT FOR CODEBASE OPTION.    @C4
.*
.*--------------------------------------------------------------------*
         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK
         GBLA  &#BLVL                   BLOCK LEVEL
         GBLC  &#BNAME(20)              BLOCK NAMES
         GBLC  &#BSV1(20)               BLOCK SAVE PARM 1
         GBLC  &#BSV2(20)               BLOCK SAVE PARM 2
         GBLC  &#BSV3(20)               BLOCK SAVE PARM 3
         GBLA  &#MNDX                   LAST TAG INDEX USED
         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER
         GBLC  &#PBDERR                 DYNAMIC STORAGE ERROR TAG
         GBLB  &#PBDYN                  DYNAMIC STORAGE OPTION
         GBLC  &#PBDYNS                 VALUE FROM DYNSIZE PARAMETER
         GBLB  &#PBLOCR                 DO LOCATR IN PROGRAM
         GBLB  &#PBLONG                 LONG PROGRAM OPTION
         GBLA  &#PBNDX                  PROGRAM BLOCK INDEX
         GBLB  &#PBOPTS                 OPTIMIZE STORAGE
         GBLB  &#PBPWA                  PWA OPTION
         GBLB  &#PBXA                   XA OPTION
         GBLB  &#PB370                  370 OPTION
         GBLC  &#NOBASE                 NOCODEBASE LOCTR NAME       @C4
         GBLA  &#SB#C                   # OF CURRENT SUBROUTINE
         GBLA  &#SB#D                   SUB BLOCK NMBR FROM ##DEFSUB
         GBLB  &#SBCDBS                 SUBROUTINE HAS BASE FOR CODE@C4
         GBLB  &#SBCSTM                 CUSTOM SUBROUTINE
         GBLB  &#SBLDBS                 LOAD BASE OPTION
         GBLC  &#SBNM(99)               SUBROUTINE BLOCK NAMES
         GBLA  &#SBPLMX                 MAX PL ENTRIES IN SUBROUTINE
         GBLA  &#SBREC(99)              SUBROUTINE BLOCK RECUR + 1
         GBLB  &#SBSU                   SAVEUSING OPTION
         GBLB  &#SBSWA                  SWA OPTION
         GBLB  &#SBUSWA                 USERSWA OPTION
         GBLB  &#XAWARN                 XA WARNING MESSAGE ISSUED
         GBLC  &SSD                     SUBROUTINE STATIC DATA TAG  @C3
         LCLA  &CTR                     WORK COUNTER
         LCLC  &TAG                     WORK TAGS
         LCLC  &TAG2                    WORK TAGS
         LCLC  &SBLOCTR                 WORK TAGS                   @C4
.*------------------------------------------------------------------
.*  GET OPTIONS FOR SUBROUTINE BLOCK
.*------------------------------------------------------------------
         ##SUBOPT &OPTIONS
.*------------------------------------------------------------------
.*  DO CHECKS FOR SWA
.*------------------------------------------------------------------
.CST7000 AIF   (NOT &#SBSWA).CST7100   SKIP IF NOSWA OPTION
.CST7010 AIF   ('&SAVE' EQ '').CST7020
         MNOTE 8,'SAVE= invalid if SWA option specified'
.CST7020 AIF   (&#PBPWA).CST7030
         MNOTE 8,'SWA option requires PWA option on program block'
         AGO   .CST7200
.CST7030 ANOP
.CST7100 AIF   ('&SWAREG' EQ '').CST7110
         MNOTE 8,'SWAREG= can not be specified unless OPTION=SWA is spe$
               cified'
.CST7110 ANOP
.CST7200 ANOP
.*------------------------------------------------------------------
.*  DO CHECKS FOR CUSTOM SUBROUTINE BLOCK.
.*------------------------------------------------------------------
.CST8000 AIF   (NOT &#SBCSTM).CST9999   SKIP IF NOT CUSTOM SUBROUTIN
.CST8010 AIF   ('&AMODE' EQ '').CST8020
         MNOTE 8,'AMODE= invalid for custom subroutine blocks'
.CST8020 AIF   ('&SAVE' EQ '').CST8030
         MNOTE 8,'SAVE= invalid for custom subroutine blocks'
.CST8030 AIF  (NOT &#SBUSWA AND NOT &#SBSU AND NOT &#SBSWA).CST8040
         MNOTE 8,'CUSTOM must be specified alone'
.CST8040 ANOP
.CST9999 ANOP
.*--------------------------------------------------------------------*
.*  SET AND CHECK MODE
.*--------------------------------------------------------------------*
&#BAMODE(&#BLVL) SETC  '&AMODE'
         AIF   ('&AMODE' EQ '' OR '&AMODE' EQ 'ANY').ANY0020
         AIF   ('&AMODE' EQ '24' OR '&AMODE' EQ '31').ANY0020
.ANY0010 MNOTE 8,'AMODE=&AMODE is invalid on subroutine block, keyword $
               ignored'
&#BAMODE(&#BLVL) SETC   ''
.ANY0020 ANOP
.*--------------------------------------------------------------------*
.*  ASSUME LOADBASE OPTION IF BASEREG IS SPECIFIED.
.*--------------------------------------------------------------------*
&#SBPLMX SETA  0
         AIF   ('&BASEREG' EQ '' OR &#SBLDBS).SUB0010
         MNOTE *,'LOADBASE assumed because BASEREG= specified'
&#SBLDBS SETB  1
.*--------------------------------------------------------------------*
.*  REQUIRE NAME= KEYWORD.
.*--------------------------------------------------------------------*
.SUB0010 AIF   ('&NAME' NE '').SUB0020
         MNOTE 8,'BLOCK TYPE=SUBROUTINE requires NAME='
&#BNAME(&#BLVL) SETC 'BADNAME'
.*--------------------------------------------------------------------*
.*  LOADBASE OPTION REQUIRES LONG OPTION ON PROGRAM BLOCK.
.*--------------------------------------------------------------------*
.SUB0020 AIF   (NOT &#SBLDBS OR &#PBLONG OR NOT &#SBCDBS).SUB0030   @C4
         MNOTE 8,'LOADBASE option requires LONG option on program block$
                if CODEBASE is in effect for subroutine.'           @C4
.SUB0030 ANOP
.*------------------------------------------------------------------
.*  GENERATE SUBROUTINE DEPENDENT CODE
.*------------------------------------------------------------------
.SUB0100 ANOP
.*------------------------------------------------------------------@C4
.*  IF USING LOCTRS, SET A LOCTR FOR SUBROUTINE INSTRUCTIONS,       @C4
.*  SSD, AND SSD BOTTOM.  THE 'NOCODEBASE' INSTRUCTION LOCTR WILL   @C4
.*  BE USED IF THIS IS A NOCODEBASE SUBROUTINE.  IF THIS SUBROUTINE @C4
.*  DOES HAVE A CODEBASE, USE NEW LOCTR IF LOADBASE IS SPECIFIED OR @C4
.*  CURRENT LOCTR (PROGRAM BLOCK) IF NOLOADBASE IS SPECIFIED.       @C4
.*  IF PROGRAM BLOCK HAS NOCODEBASE AND SUBROUTINE BLOCK HAS        @C4
.*  CODEBASE BUT NOLOADBASE, CODE WILL HAVE TO BE PLACED AFTER THE  @C4
.*  SUBROUTINE BLOCK MACRO TO ESTABLISH A CODE BASE.                @C4
.*------------------------------------------------------------------@C4
         AIF   (NOT &#PBLOCR).SUB0150                               @C4
         AIF   (NOT &#SBCDBS).SUB0120                               @C4
         AIF   (&#SBLDBS).SUB0130                                   @C4
&SBLOCTR SETC  '&SYSLOC'                                            @C4
         AGO   .SUB0140                                             @C4
.SUB0120 ANOP                                                       @C4
&SBLOCTR SETC  '&#NOBASE'                                           @C4
         AGO   .SUB0140                                             @C4
.SUB0130 ANOP                                                       @C4
&SBLOCTR SETC  '#SBIL&#SB#C'                                        @C4
         AGO   .SUB0140                                             @C4
.SUB0140 ANOP                                                       @C4
&SBLOCTR LOCTR ,                        SUBROUTINE BLOCK INST LOCTR @C4
         SSD   TYPE=PARTIAL                                         @C4
&SSD     EQU   *                        START OF SSD                @C3
         ENDSSD                                                     @C4
         SSD   TYPE=BOTTOM                                          @C4
         ENDSSD                                                     @C4
.SUB0150 ANOP
.*------------------------------------------------------------------@C4
.*  PROCESS RECUR.                                                  @C4
.*------------------------------------------------------------------@C4
&#SBREC(&#SB#C) SETA 1
         AIF   ('&RECUR' EQ '').SUB0200
         AIF   (&#PBDYN).SUB0205
         MNOTE 8,'RECUR keyword requires DYN option on program block' 7
.SUB0205 ANOP
&#SBREC(&#SB#C) SETA &RECUR+1
.SUB0200 ANOP
.*------------------------------------------------------------------@C4
.*  PROCESS SAVEUSING.                                              @C4
.*------------------------------------------------------------------@C4
         AIF   (NOT &#SBSU).SUB0210
         PUSH  USING
.SUB0210 ANOP
.*------------------------------------------------------------------@C4
.* NOSWA                                                            @C4
.*------------------------------------------------------------------@C4
         AIF   (&#SBSWA).SUB0220
&NAME    DS    0H                       SUBROUTINE NAME
         AGO   .SUB9000
.*------------------------------------------------------------------@C4
.* NODYN                                                            @C4
.*------------------------------------------------------------------@C4
.SUB0220 AIF   (&#PBDYN).SUB0225                                    @C4
&NAME    STM   R0,R14,#SBS&#SB#C        SAVE REGISTERS
&#BSV1(&#BLVL) SETC 'R0'
&#BSV2(&#BLVL) SETC 'R14'
&#BSV3(&#BLVL) SETC '#SBS&#SB#C'
         AIF   (NOT &#SBLDBS).SUB9000
         ##LDBS &NAME,&BASEREG,R10,FRSTLD=YES
         AGO   .SUB9000
.*------------------------------------------------------------------@C4
.* DYN                                                              @C4
.*------------------------------------------------------------------@C4
.SUB0225 AIF   (NOT &#PBOPTS).SUB0230
&TAG2    SETC  '&#SBNM(&#SB#C)'
&TAG2    ##B AS,R15,#BK&#PBNDX,         DO LINKAGE                  @C4+
               LONG=PBLONGSLGT0,BREG=R15                            @C4
         DC    Y(#SBL&#SB#C)            LENGTH OF SWA TO OBTAIN
         AIF   (NOT &#SBLDBS).SUB0240
         ##LDBS *,&BASEREG,R10,FRSTLD=YES
         AGO   .SUB0240
.SUB0230 ANOP                                                       @C4
&TAG     SETC  '#SBLT&#SB#C'                                        @C4
         AIF   (NOT &#PBLOCR).SUB0232                               @C4
         SSD                                                        @C4
.SUB0232 ANOP                                                       @C4
&TAG     DC    Y(#SBL&#SB#C)
         AIF   (NOT &#PBLOCR).SUB0233                               @C4
         ENDSSD                                                     @C4
.SUB0233 ANOP                                                       @C4
&TAG2    SETC  '&#SBNM(&#SB#C)'
&TAG2    L     R15,0(,R11)              POINT R15 TO NAB (NEW SWA)
         STM   R0,R14,4(R15)            SAVE R0 - R14
         AIF   (NOT &#SBLDBS).SUB0235
         ##LDBS *,&BASEREG,R10,FRSTLD=YES
.SUB0235 LR    R11,R15                  POINT R11 TO NEW SWA
         AH    R15,&TAG                 CALCULATE NEW NAB
         CL    R15,#PBE&#PB#C           CHECK FOR OVERFLOW
         ##B H,&#PBDERR,                BRANCH TO ERREXIT IF OVERFLO@C4+
               LONG=PBLONGSLGT0,BREG=R14                            @C4
         ST    R15,0(,R11)              STORE NEW NAB
.SUB0240 ANOP
&#BSV1(&#BLVL) SETC 'R0'
&#BSV2(&#BLVL) SETC 'R14'
&#BSV3(&#BLVL) SETC '#SBS&#SB#C'
&TAG2    SETC  '#SBD&#SB#C'
         AIF   ('&SWAREG' EQ '').SUB0300
         AIF   ('&SWAREG(1)' EQ 'R11').SUB0300
         MNOTE 8,'R11 must be the first register specified on the SWARE$
               G= keyword'
.SUB0300 ##LDBS &TAG2,&SWAREG,R11
.*------------------------------------------------------------------@C4
.SUB9000 ANOP
.*--------------------------------------------------------------------*
.*  IF AMODE SPECIFIED
.*    IF SUBROUTINE BLOCK OR ERREXIT BLOCK
.*      OR INLINE BLOCK AND AMODE IS NOT THE SAME AS PREVIOUS BLOCK
.*--------------------------------------------------------------------*
.AMO0000 ANOP
&TAG     SETC  ''
         AIF   (&#SBCSTM).AMO0350       AMODE INVALID FOR CUSTOM
         AIF   ('&AMODE' EQ '').AMO0350
         AIF   (&#PBXA).AMO0100
         AIF   (&#XAWARN).AMO0350
         MNOTE *,'AMODE ignored unless XA option specified for program $
               block'
&#XAWARN SETB  1                        ONLY ISSUE ONE TIME
         AGO   .AMO0350
.AMO0100 AIF   ('&#BAMODE(&#BLVL)' EQ 'ANY').AMO0350
.*--------------------------------------------------------------------*
.*      IF OPTIONS XA AND 370, GENERATE TEST FOR XA
.*--------------------------------------------------------------------*
         AIF   (&#SBSWA).AMO0210
         ##SWREG R15                    SAVE WORK REGISTER
.AMO0210 ANOP
&TAG     SETC  '#BY&#MNDX'
         AIF   (NOT &#PBXA OR NOT &#PB370).AMO0300
         L     R15,16                   POINT R15 TO CVT
         TM    X'74'(R15),X'80'         RUNNING UNDER XA?
         BZ    &TAG                     SKIP AMODE SETTING
.*--------------------------------------------------------------------*
.*      GENERATE CHANGE AMODE CODE
.*--------------------------------------------------------------------*
.AMO0300 ANOP
         AIF   ('&#BAMODE(&#BLVL)' NE '31').AMO0310
         L     R15,=A(&TAG+X'80000000') SWITCH TO 31                @C4
         AGO   .AMO0320                                             @C4
.AMO0310 L     R15,=A(&TAG)             SWITCH TO 24                @C4
.AMO0320 BSM   R14,R15                  BIT MODE.                   @C4
         AIF   (&#SBSWA).AMO0350
&TAG     ##RWREG R15                    RESTORE WORK REG
&TAG     SETC  ''
         AGO   .AMO0350
.AMO0330 ANOP
&TAG     DS    0H
&TAG     SETC  ''
.AMO0350 ANOP
.*--------------------------------------------------------------------*
.*      IF SAVE= KEYWORD SPECIFIED, SAVE REGISTERS
.*--------------------------------------------------------------------*
         AIF   (&#SBCSTM).AMO0380       SAVE NOT VALID FOR CUSTOM
         AIF   (&#SBSWA).AMO0380        SAVE NOT VALID FOR CUSTOM
&#BSV1(&#BLVL) SETC '&SAVE(1)'
&#BSV2(&#BLVL) SETC '&SAVE(2)'
&#BSV3(&#BLVL) SETC '&SAVE(3)'
         AIF   ('&SAVE' EQ '').AMO0380
         AIF   (N'&SAVE NE 2).AMO0360
&TAG     ST    &SAVE(1),&SAVE(2)       SAVE REGISTER
         AGO   .AMO0390
.AMO0360 AIF   (N'&SAVE NE 3).AMO0370
&TAG     STM   &SAVE(1),&SAVE(2),&SAVE(3) SAVE REGISTERS
         AGO   .AMO0390
.AMO0370 MNOTE 8,'Invalid number of parameters in SAVE= keyword'
.AMO0380 AIF   ('&TAG' EQ '').AMO0390
&TAG     DS    0H
.AMO0390 ANOP
.*------------------------------------------------------------------
.*       IF SUBROUTINE AND NO SWA, LOAD BASE REGISTER IF OPTION
.*       LOADBASE IS IN EFFECT
.*------------------------------------------------------------------
         AIF   (&#SBSWA OR NOT &#SBLDBS).AMO0400
         ##LDBS &NAME,&BASEREG,R10,FRSTLD=YES
.AMO0400 ANOP
.*------------------------------------------------------------------@C3
.*       GENERATE PARAMETER LIST CODE.                              @C3
.*------------------------------------------------------------------@C3
         ##PRMOPT PROCESS=GENERATE,PARMS=&PARMS,PARMMAP=&PARMMAP,   @C3+
               TYPE=SUBROUTINE                                      @C3
.EXIT    MEND
