.*--------------------------------------------------------------------*
.*  Copyright 2011 by Clemson University Research Foundation          *
.*                                                                    *
.*  Licensed under the Apache License, Version 2.0 (the "License");   *
.*  you may not use this file except in compliance with the License.  *
.*  You may obtain a copy of the License in this library as member    *
.*  $LICENSE, or from                                                 *
.*                                                                    *
.*      http://www.apache.org/licenses/LICENSE-2.0                    *
.*                                                                    *
.*  Unless required by applicable law or agreed to in writing,        *
.*  software distributed under the License is distributed on an "AS   *
.*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *
.*  express or implied.  See the License for the specific language    *
.*  governing permissions and limitations under the License.          *
.*--------------------------------------------------------------------*
         MACRO
         CALLCASE &P1,                  SEE SYNTAX BELOW               +
               &REG=,                   CASE REGISTER                  +
               &PL=                     PARAMETER LIST STORAGE
.*--------------------------------------------------------------------*
.*
.*  (C) COPYRIGHT 2005.  CLEMSON UNIVERSITY COMPUTER CENTER.
.*
.*  MACRO      CALLCASE
.*
.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*             PROGRAMMING MACROS - CALLCASE
.*
.*             CALLCASE REG=R2-R12,ÝUSESYMBOLS,¨
.*                  (SEE (A))
.*                  ÝOTHER,subname|(ERREXITÝ,Ýname¨Ý,code¨)¨
.*                  Ý,(PARMLIST..)Ý,VL|NOVL¨¨|Ý,PL=pl¨
.*
.*        (A)  When USESYMBOLS is specified, this is a list of
.*             subroutine names whose case number is stored in a
.*             GBLA symbol by the same name.
.*
.*             Otherwise, this is a list of one or more case
.*             numbers followed by the name of the subroutine
.*             to call followed by more case numbers followed
.*             by the subroutine name and so on. If a name is
.*             specifed without a preceeding number, it is
.*             assigned a case of one more than the last number
.*             assigned.  If no number is supplied before the
.*             first name it is assigned case 0.  A case number
.*             can only be assigned to one subroutine.
.*
.*             EX: CALLCASE REG=R2,
.*                    1,5,2,SUBA,
.*                    4,3,SUBB,
.*                    7,SUBC,SUBD,SUBE,
.*                    OTHER,SUBERR,
.*                    (x,y),VL
.*
.*             EX: CALLCASE REG=R3,USESYMBOLS,
.*                    FI_OPEN,FI_TERMINATE,FI_READLINE,
.*                    OTHER,(ERREXIT,,16)
.*
.*
.*  PURPOSE    STRUCTURED MACRO USED TO CALL ONE OF A LIST OF
.*             SUBROUTINE BLOCKS BASED ON A CASE NUMBER.
.*
.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON
.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:
.*
.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.
.*
.*  ACTIVITY   08/08/05 - NEW  MGG
.*
.*--------------------------------------------------------------------*
         LCLA  &CTR
         LCLA  &CTRPARM
         LCLA  &C#INROW
         LCLA  &LASTC#
         LCLA  &MAXC#
         LCLC  &CASESUB(100)
         LCLA  &OTHRCTR
         LCLC  &VL
         LCLC  &TAGTBL
         LCLC  &TAGOTHR
         LCLC  &TAGBASR
&TAGTBL  SETC  'CALLCASE_&SYSNDX.__ADDRESS_TABLE'
&TAGOTHR SETC  'CALLCASE_&SYSNDX.__OTHER'
&TAGBASR SETC  'CALLCASE_&SYSNDX.__BASR'
.*
.* Loop for parsing when USESYMBOLS is specified.
.*
         AIF   ('&P1' NE 'USESYMBOLS').L1START
&CTR     SETA  1
.L0START AGO   .L0INC
.L0TOP   AIF   ('&SYSLIST(&CTR)' EQ 'OTHER').OTHER
         AIF   ('&SYSLIST(&CTR)' EQ '').ERRNULL
         AIF   ('&SYSLIST(&CTR)'(1,1) EQ '(').PARMS
         GBLA  &(&SYSLIST(&CTR))
&LASTC#  SETA  &(&SYSLIST(&CTR))
         AIF   (&LASTC# LT 0).ERRNEGC
         AIF   ('&CASESUB(&LASTC#+1)' NE '').L0ERDUP
&CASESUB(&LASTC#+1) SETC '&SYSLIST(&CTR)'
         AIF   (&LASTC# LE &MAXC#).L0INC
&MAXC#   SETA  &LASTC#
         AGO   .L0INC
.L0ERDUP MNOTE 8,'Case number &LASTC#, supplied by &&&SYSLIST(&CTR), ha+
               s already been assigned.'
.L0INC   ANOP
&CTR     SETA  &CTR+1
         AIF   (&CTR LE N'&SYSLIST).L0TOP
.*
.* Loops for parsing when USESYMBOLS is NOT specified.
.*
.L1START ANOP
&LASTC#  SETA  -1
         AGO   .L1INC
.L1TOP   AIF   (T'&SYSLIST(&CTR) EQ 'N').L1NUM
         AIF   ('&SYSLIST(&CTR)' EQ 'OTHER').OTHER
         AIF   ('&SYSLIST(&CTR)' EQ '').ERRNULL
         AIF   ('&SYSLIST(&CTR)'(1,1) EQ '(').PARMS
         AIF   (&C#INROW GT 0).L2TOP
&LASTC#  SETA  &LASTC#+1
         AGO   .L2SET
.*
.L2TOP   ANOP
&LASTC#  SETA  &SYSLIST(&CTR-&C#INROW)
.L2SET   AIF   (&LASTC# LT 0).ERRNEGC
         AIF   ('&CASESUB(&LASTC#+1)' NE '').L2ERDUP
&CASESUB(&LASTC#+1) SETC '&SYSLIST(&CTR)'
         AIF   (&LASTC# LE &MAXC#).L2INC
&MAXC#   SETA  &LASTC#
         AGO   .L2INC
.L2ERDUP MNOTE 8,'Case number &LASTC# has already been assigned.'
.L2INC   ANOP
&C#INROW SETA  &C#INROW-1
         AIF   (&C#INROW GT 0).L2TOP
&C#INROW SETA  0
         AGO   .L1INC
.*
.L1NUM   ANOP
&C#INROW SETA  &C#INROW+1
.L1INC   ANOP
&CTR     SETA  &CTR+1
         AIF   (&CTR LE N'&SYSLIST).L1TOP
         AGO   .PRSDONE
.*
.* Parse OTHER
.*
.OTHER   AIF   (&CTR GE N'&SYSLIST).ERRMISO
&CTR     SETA  &CTR+1
         AIF   ('&SYSLIST(&CTR)' EQ '').ERRNULL
         AIF   ('&SYSLIST(&CTR,1)' EQ 'ERREXIT').CHKERRX
         AIF   ('&SYSLIST(&CTR)'(1,1) EQ '(').ERRMISO
         AGO   .SETOTHR
.CHKERRX AIF   (N'&SYSLIST(&CTR) GT 3).ERRERRX
.SETOTHR ANOP
&OTHRCTR SETA  &CTR
         AIF   (&CTR GE N'&SYSLIST).PRSDONE
&CTR     SETA  &CTR+1
         AIF   ('&SYSLIST(&CTR)' EQ '').ERRNULL
         AIF   ('&SYSLIST(&CTR)'(1,1) NE '(').ERRNEXP
         AGO   .PARMS
.*
.* Parse and process parms.
.*
.PARMS   ANOP
&CTRPARM SETA  &CTR
         AIF   (&CTR GE N'&SYSLIST).VLSET
&CTR     SETA  &CTR+1
         AIF   ('&SYSLIST(&CTR)' EQ 'VL').SETVL
         AIF   ('&SYSLIST(&CTR)' NE 'NOVL').ERRNEXP
.SETVL   ANOP
&VL      SETC  '&SYSLIST(&CTR)'
.VLSET   ANOP
&CTR     SETA  &CTR+1
         AIF   (&CTR LE N'&SYSLIST).ERRNEXP
         PLIST &SYSLIST(&CTRPARM),&VL,PL=&PL
.PRSDONE ANOP PARSING DONE
.*
.* Build case table at bottom of PSD.
.*
         PSD   TYPE=BOTTOM
&TAGTBL  DS    0A
&CTR     SETA  0
.L5START AGO   .L5INC
.L5TOP   AIF   ('&CASESUB(&CTR)' EQ '').L5DC0
         ##DEFSUB &CASESUB(&CTR),TYPE=CALL
         DC    A(&CASESUB(&CTR))
         AGO   .L5INC
.L5DC0   DC    A(0)
.L5INC   AIF   (&CTR GT &MAXC#).L5END   Index is 1 more than case#.
&CTR     SETA  &CTR+1
         AGO   .L5TOP
.L5END   ANOP
         ENDPSD
.*
.* Generate code to call case.
.*
         AIF ('&REG' EQ '').ERRREG     REG= is required.
         ##MREG CHECK,&REG             Make sure reg is not one used
.*                                     elsewhere including R14-R1.
         LTR   R15,&REG                Put case number in R15.
         ##B M,&TAGOTHR                Go to other: if negative.
         C     R15,=F'&MAXC#'          Check for max case.
         ##B H,&TAGOTHR                Go to other: if higher.
         SLA   R15,2                   Multiply case by 4.
         AL    R15,=A(&TAGTBL)         Add address of address table.
         L     R15,0(,R15)             Point R15 to case subroutine.
         LTR   R15,R15                 Test address.
         AIF   (&OTHRCTR EQ 0).NOOTHER
         ##B NZ,&TAGBASR               Go to BASR if not zero.
         AIF   ('&SYSLIST(&OTHRCTR,1)' EQ 'ERREXIT').GENERRX
&TAGOTHR ##LAL R15,&SYSLIST(&OTHRCTR)  Point R15 to other sub.
         ##DEFSUB &SYSLIST(&OTHRCTR),TYPE=CALL
         AGO   .GENBASR
.GENERRX ANOP
&TAGOTHR DS    0H
         ERREXIT NAME=&SYSLIST(&OTHRCTR,2),CODE=&SYSLIST(&OTHRCTR,3)
.GENBASR ANOP
&TAGBASR ##B ASR,R14,R15               Call subroutine.
         MEXIT
.NOOTHER ANOP
         ##B Z,&TAGOTHR                Skip BASR if zero.
         ##B ASR,R14,R15               Call subroutine.
&TAGOTHR DS    0H                      No OTHER specified.
         MEXIT
.*
.* Errors.
.*
.ERRNULL MNOTE 8,'Parameter &CTR is empty.'
         MEXIT
.ERRMISO MNOTE 8,'Expecting a subroutine name or ERREXIT following OTHE+
               R.'
         MEXIT
.ERRNEXP MNOTE 8,'&SYSLIST(&CTR) is not expected as &CTR parameter.'
         MEXIT
.ERRNEGC MNOTE 8,'Negative case number &LASTC# encountered in parameter+
                &CTR is not allowed.'
         MEXIT
.ERRERRX MNOTE 8,'&SYSLIST(&CTR) is not valid.'
         MEXIT
.ERRREG  MNOTE 8,'REG= must be specified.'
.MEND    MEND
