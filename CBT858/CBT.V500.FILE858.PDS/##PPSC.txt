.*--------------------------------------------------------------------*
.*  Copyright 2011 by Clemson University Research Foundation          *
.*                                                                    *
.*  Licensed under the Apache License, Version 2.0 (the "License");   *
.*  you may not use this file except in compliance with the License.  *
.*  You may obtain a copy of the License in this library as member    *
.*  $LICENSE, or from                                                 *
.*                                                                    *
.*      http://www.apache.org/licenses/LICENSE-2.0                    *
.*                                                                    *
.*  Unless required by applicable law or agreed to in writing,        *
.*  software distributed under the License is distributed on an "AS   *
.*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either   *
.*  express or implied.  See the License for the specific language    *
.*  governing permissions and limitations under the License.          *
.*--------------------------------------------------------------------*
         MACRO
         ##PPSC &NAME,                  NAME OF BLOCK                  $
               &OPTIONS,                OPTIONS                        $
               &SUBOPTS,                DEFAULT SUBROUTINE OPTIONS     $
               &BASEREG,                BASE REGS                      $
               &PWAREG,                 PWA REGS                       $
               &SVAREA,                 SAVE AREA TAG NAME             $
               &CPYRGHT,                COPYRIGHT NOTICE               $
               &AMODE,                  ADDRESSING MODE                $
               &RMODE,                  RESIDENCE MODE                 $
               &R1SAVE,                 PARM SAVE REGISTER             $
               &SMWA,                   STRUCTURED MACRO WORK AREA     $
               &DYNSIZE,                SIZE OF DYNAMIC STORAGE        $
               &DYNERR,                 DYNAMIC STORAGE ERROR EXIT     $
               &SWAREG,                 SWA BASE REGS                  $
               &PWASP,                  PROGRAM WORK AREA SUB POOL     $
               &PARMS,                  INPUT PARAMETERS               $
               &PARMMAP                 INPUT PARAMETER MAPPING
.*--------------------------------------------------------------------*
.*
.*  (C) COPYRIGHT 1998.  CLEMSON UNIVERSITY COMPUTER CENTER.
.*
.*  MACRO      ##PPSC
.*
.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*             PROGRAMMING MACROS - ##PPSC
.*
.*  PURPOSE    INTERNAL MACRO USED AS THE DEFAULT FOR PROGRAM BLOCK
.*             PROLOG.
.*
.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON
.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:
.*
.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.
.*
.*  ACTIVITY    8/06/98 MGG - New
.*             10/29/98 JCB - ADDED SUPPORT FOR OPTIONS=(..,INDEP)
.*
.*--------------------------------------------------------------------*
         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK
         GBLA  &#BLVL                   BLOCK LEVEL
         GBLA  &#BNDX(20)               BLOCK TAG INDEXS
         GBLA  &#MNDX                   LAST TAG INDEX USED
         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER
         GBLC  &#PBAMOD                 AMODE OF PROGRAM
         GBLB  &#PBDSWA       ENDPWA SHOULD DEFINE STORAGE FOR PWA
         GBLB  &#PBDYN                  DYNAMIC STORAGE OPTION
         GBLB  &#PBLOCR                 DO LOCATR IN PROGRAM
         GBLB  &#PBLONG                 LONG PROGRAM OPTION
         GBLB  &#PBMAIN                 MAIN OPTION
         GBLC  &#PBNAME                 PROGRAM BLOCK CSECT NAME
         GBLA  &#PBPLMX                 MAX PL ENTRIES IN PROGRAM
         GBLB  &#PBPWA                  PWA OPTION
         GBLC  &#PBRMOD                 RMODE OF PROGRAM
         GBLC  &#PBSMWA                 TAG OF SMWA
         GBLB  &#PBVL                   DEFAULT VL OPTION
         GBLC  &PWA                     PWA ID
         GBLC  &PSD                     PSD ID
         GBLA  &#PBWAMX                 MAX SMWA IN PROGRAM
         GBLB  &#PBXA                   XA OPTION
         GBLB  &#PB370                  370 OPTION
         GBLB  &#SBSU                   SAVEUSING OPTION
         GBLC  &#PBSECT                 Control sect type for ##SECT
         GBLB  &#PBINDEP                INDEP requested in OPTIONS=
         LCLA  &CTR                     WORK COUNTER
         LCLA  &NDX                     #MNDX VALUE AT START OF MACRO
         LCLB  &OCLRPWA                 CLEARPWA OPTION
         LCLB  &OID                     ID OPTION
         LCLB  &OMODE                   MODE OPTION
         LCLC  &OPT                     OPTIONS WORK FIELD
         LCLB  &OREGEQU                 REGEQU OPTION
         LCLC  &PGMN                    PROGRAM NAME
         LCLC  &PWAL                    TAG FOR DC FOR PWA LENGTH
         LCLC  &TAG                     WORK TAG
         LCLC  &INDEP                   YES/NO for CENTRY INDEP=
&#PBSECT SETC  'CSECT'                  Default ctl sect type
.*--------------------------------------------------------------------*
&NDX     SETA  &#MNDX                   SAVE INDEX VALUE TO USE
.*--------------------------------------------------------------------*
.*  PWA DSECT IS ALWAYS CALLED DSA.
.*--------------------------------------------------------------------*
&PWA     SETC  'DSA'
&INDEP   SETC  'NO'                     Default INDEP to NO
.*--------------------------------------------------------------------*
.*  RESET REGISTERS USED.  R12-R1 ARE RESERVED.
.*--------------------------------------------------------------------*
         ##MREG RESET                   RESET REGISTERS USED
         ##MREG USE,R12                 RESERVED FOR CRAB
.*--------------------------------------------------------------------*
.*  SET FLAGS THAT ARE ALWAYS CONSTANT FOR ENVIRON=SC
.*--------------------------------------------------------------------*
&#PBPWA  SETB  1  ALWAYS HAVE PWA
&#PBDYN  SETB  0  ALWAYS OFF
&#PBDSWA SETB  0  NEVER DS PROGRAM WORK AREA
.*--------------------------------------------------------------------*
.*  SET DEFAULTS FOR GLOBAL OPTIONS.
.*--------------------------------------------------------------------*
&#PBXA   SETB  0
&#PB370  SETB  0
&#PBVL   SETB  0
&#PBLONG SETB  0
&#PBLOCR SETB  0
&#PBINDEP SETB 0
&#PBMAIN SETB  0
.*--------------------------------------------------------------------*
.*  SET VARIOUS VARIABLES.
.*--------------------------------------------------------------------*
&#PBPLMX SETA  0  RESET MAXIMUM PARMS TO ZERO
&#PBWAMX SETA  2
&#PBSMWA SETC  '#PBW&#PB#C'
&#SBUSWA SETB  0  RESET
&#SBSU   SETB  0  RESET
&#PBRMOD SETC  '&RMODE'
&#PBAMOD SETC  '&AMODE'
&#BAMODE(1) SETC '&AMODE'
.*--------------------------------------------------------------------*
.*  CHECK FOR IGNORED KEYWORDS
.*--------------------------------------------------------------------*
         ##IGMSG &SVAREA,SVAREA
         ##IGMSG &SMWA,SMWA
         ##IGMSG &DYNSIZE,DYNSIZE
         ##IGMSG &DYNERR,DYNERR
         ##IGMSG &SWAREG,SWAREG
         ##IGMSG &PWASP,PWASP
         ##IGMSG &PARMS,PARMS
.*--------------------------------------------------------------------*
.*  SET OPTIONS.
.*--------------------------------------------------------------------*
&CTR     SETA  1                        SET OPTIONS
.SPO0010 AIF   (N'&OPTIONS LT &CTR).SPO9999
&OPT     SETC  '&OPTIONS(&CTR)'
.SPO0020 AIF   ('&OPT' NE 'REGEQU').SPO0030
&OREGEQU SETB  1
         AGO   .SPO9000
.SPO0030 AIF   ('&OPT' NE 'NOREGEQU').SPO0040
&OREGEQU SETB  0
         AGO   .SPO9000
.SPO0040 AIF   ('&OPT' NE 'CLEARPWA').SPO0050
&OCLRPWA SETB  1
         AGO   .SPNOSUP
.SPO0050 AIF   ('&OPT' NE 'NOCLEARPWA').SPO0060
&OCLRPWA SETB  0
         AGO   .SPO9000
.SPO0060 AIF   ('&OPT' NE 'ID').SPO0070
&OID     SETB  1
         AGO   .SPO9000
.SPO0070 AIF   ('&OPT' NE 'NOID').SPO0100
&OID     SETB  0
         AGO   .SPO9000
.SPO0100 AIF   ('&OPT' NE 'MODE').SPO0110
&OMODE   SETB  1
         AGO   .SPO9000
.SPO0110 AIF   ('&OPT' NE 'NOMODE').SPO0120
&OMODE   SETB  0
         AGO   .SPO9000
.SPO0120 AIF   ('&OPT' NE 'XA').SPO0130
&#PBXA   SETB  1
         AGO   .SPO9000
.SPO0130 AIF   ('&OPT' NE 'NOXA').SPO0140
&#PBXA   SETB  0
         AGO   .SPO9000
.SPO0140 AIF   ('&OPT' NE '370').SPO0150
&#PB370  SETB  1
         AGO   .SPO9000
.SPO0150 AIF   ('&OPT' NE 'NO370').SPO0160
&#PB370  SETB  0
         AGO   .SPO9000
.SPO0160 AIF   ('&OPT' NE 'VL').SPO0170
&#PBVL   SETB  1
         AGO   .SPO9000
.SPO0170 AIF   ('&OPT' NE 'NOVL').SPO0180
&#PBVL   SETB  0
         AGO   .SPO9000
.SPO0180 AIF   ('&OPT' NE 'LOCTR').SPO0190
&#PBLOCR SETB  1
         AGO   .SPO9000
.SPO0190 AIF   ('&OPT' NE 'NOLOCTR').SPO0200
&#PBLOCR SETB  0
         AGO   .SPO9000
.SPO0200 AIF   ('&OPT' NE 'LONG').SPO0210
&#PBLONG SETB  1
         AGO   .SPO9000
.SPO0210 AIF   ('&OPT' NE 'NOLONG').SPO0220
&#PBLONG SETB  0
         AGO   .SPO9000
.SPO0220 AIF   ('&OPT' NE 'INDEP').SPO0230
&#PBINDEP SETB 1
         AGO   .SPO9000
.SPO0230 AIF   ('&OPT' NE 'MAIN').SPO0240
&#PBMAIN SETB  1
         AGO   .SPO9000
.SPO0240 AIF   ('&OPT' NE 'NOMAIN').SPO0250
&#PBMAIN SETB  0
         AGO   .SPO9000
.SPO0250 ANOP
.SPO0500 AIF   ('&OPT' NE '*STDSASC').SPO0510
&OCLRPWA SETB  0         NOCLEARPWA OPTION
&OID     SETB  0         NOID OPTION
&OREGEQU SETB  1         REGEQU OPTION
&OMODE   SETB  1         MODE OPTION
&#PBXA   SETB  0         NOXA OPTION
&#PB370  SETB  0         NO370 OPTION
&#PBVL   SETB  1         VL OPTION
&#PBLOCR SETB  1         LOCTR OPTION
&#PBLONG SETB  0         NOLONG OPTION
         AGO   .SPO9000
.SPO0510 ANOP
.SPNOSUP ANOP
         MNOTE 8,'Invalid option &OPT'
.SPO9000 ANOP
&CTR     SETA  &CTR+1
         AGO   .SPO0010
.SPO9999 ANOP
.*------------------------------------------------------------------
.*  SET DEFAULT SUBROUTINE OPTIONS BASED ON SUBOPT
.*------------------------------------------------------------------
         ##SUBOPT &SUBOPTS,DEFAULT=YES
.*------------------------------------------------------------------
.*  CHECK OPTIONS AND KEYWORDS
.*------------------------------------------------------------------
&PGMN    SETC  '&NAME'
         AIF   ('&NAME' NE '').CHK0300
         MNOTE 8,'Name required on program block macro'
&PGMN    SETC  'TEMPNAM'
.CHK0300 ANOP
         AIF   (NOT &#PBINDEP OR NOT &#PBMAIN).CHK0400
         MNOTE 8,'INDEP and MAIN are mutually exclusive.'
.CHK0400 ANOP
.*------------------------------------------------------------------
.*  Generate CRAB dsect.
.*------------------------------------------------------------------
         COPY  CRAB
.*--------------------------------------------------------------------*
.*  GENERATE CSECT, AMODE, RMODE, AND LOCTR STATEMENTS.
.*--------------------------------------------------------------------*
.INT0000 ANOP
&#PBNAME SETC  '&PGMN'
&#PBNAME ##SECT ,                       START OF CSECT
.INT0100 AIF   (NOT &#PBLOCR).INT0105
&#PBNAME LOCTR ,                        LOCTR FOR PROGRAM BLOCK INST
         PSD   TYPE=PARTIAL
&PSD     EQU   *
         ENDPSD ,
.INT0105 AIF   ('&AMODE' EQ '' AND '&RMODE' EQ '').INT0200
         AIF   (&OMODE).INT0110
         MNOTE 4,'RMODE and AMODE ignored if MODE option not specified'
         AGO   .INT0200
.INT0110 AIF   (&#PBXA).INT0120
         MNOTE 4,'RMODE and AMODE ignored if XA option not specified'
         AGO   .INT0200
.INT0120 AIF   ('&AMODE' EQ '').INT0130
&PGMN    AMODE &AMODE                   ADDRESSING MODE
.INT0130 ANOP
&#PBAMOD SETC  '24'
         AGO   .INT0140
         AIF   ('&RMODE' EQ 'ANY').INT0140
&#PBAMOD SETC  '31'
.INT0140 AIF   ('&RMODE' EQ '').INT0150
&PGMN    RMODE &RMODE                   RESIDENCE MODE
         AGO   .INT0180
.INT0150 ANOP
&#PBRMOD SETC  '24'
.INT0180 ANOP
&INDEP   SETC  'NO'
         AIF   (NOT &#PBINDEP).INT0190
&INDEP   SETC  'YES'
.INT0190 ANOP
.INT0200 ANOP
&#PBRMOD SETC  '24'
&#PBAMOD SETC  '24'
.INT0900 ANOP
*---------------------------------------------------------------------*
*  SAS/C TO ASSEMBLER INITIALIZATION                                  *
*                                                                     *
*  MORE INFORMATION ABOUT THIS INITIALIZATION CAN BE FOUND IN THE     *
*  SAS/C COMPILER AND LIBRARY USER'S GUIDE.                           *
*                                                                     *
*  THIS IMPLEMENTATION ONLY SUPPORTS ONE PROGRAM BLOCK PER SOURCE     *
*  FILE.                                                              *
*                                                                     *
*---------------------------------------------------------------------*
         AIF   (NOT &OID).GID0010
&TAG     SETC  '##PPSC_PAST_ID'
         USING &#PBNAME,R15       ESTABLISH TEMPORARY BASE
         B     &TAG               BRANCH PAST PREFIX
         ##MODPFX &PGMN,&CPYRGHT
&TAG     DS    0H                 PAST PREFIX
         DROP  R15                DROP TEMPORARY BASE
         BASR  R15,0
.GID0010 ANOP
&CENTRY  SETC  '@CENTRY'
.*--------------------------------------------------------------------*
.* If option MAIN was specified, create C environment.
.*--------------------------------------------------------------------*
         AIF   (NOT &#PBMAIN).GID0015
         ENTRY @MAIN
         USING @MAIN,R15
@MAIN    B     ##PPSC_PAST_C_PREFIX
         DC    AL1(L'@MAINID)
@MAINID  DC    C' MAIN(&#PBNAME)'
##PPSC_PAST_C_PREFIX DS 0H
         STM   R14,R12,12(R13)
         USING &PWA,R13
*---------------------------------------------------------------------*
* Call L$UMAIN to establish C environment and call this module at
* tag &CENTRY.  When the program block's endblk is executed, control
* will return to after BALR to destroy the environment and return.
*---------------------------------------------------------------------*
         MVC   DSAR15,=A(&CENTRY) SET UP RETURN POINT FROM L$UMAIN
         SLR   R1,R1              ZERO CRAB ADDRESS POINTER
         LR    R9,R15             COPY R15 TO BETTER PLACE
         DROP  R15
         USING @MAIN,R9
         L     R15,=V(L$UMAIN)    LOCATE ENVIRONMENT CREATOR
         BALR  R14,R15            CALL IT (IT WILL CALL #OSMAIN)
         ST    R15,DSAR15         STORE FINAL RETURN CODE
         BR    R5                 DESTROY ENVIRONMENT AND EXIT
         DROP  R13
         DROP  R9
         SPACE
.GID0015 ANOP
.*--------------------------------------------------------------------*
.*
.*--------------------------------------------------------------------*
&BASE1   SETC  '&BASEREG(1)'
         AIF   ('&BASE1' NE '').GID0020
&BASE1   SETC  'R11'
         ##MREG USE,&BASE1              RESERVED FOR BASE REGISTER
.GID0020 ANOP
         USING CRAB,R12                 R12 ALWAYS POINTS TO CRAB.
&CENTRY  CENTRY DSA=&PWA.PLLEN,                                        +
               BASE=&BASE1,                                            +
               STATIC=YES,                                             +
               INDEP=&INDEP
         AIF   ('&PWAREG' EQ '').LPWA000
         AIF   ('&PWAREG(1)' EQ 'R13').LPWA000
         MNOTE 8,'First PWAREG must be R13'
.LPWA000 ##LDBS &PWA,&PWAREG,R13
.SAM0000 ANOP
.*--------------------------------------------------------------------*
.*  GENERATE CODE TO SAVE ADDRESS MODE IF NEEDED
.*--------------------------------------------------------------------*
&TAG     SETC  '#BY&#BNDX(&#BLVL)'      MAKE UP TAG
         AIF   (NOT &#PBXA).SAM0200
         AIF   (NOT &#PB370).SAM0100
         L     R15,16                   POINT R15 TO CVT
         TM    X'74'(R15),X'80'         RUNNING UNDER XA?
         BZ    &TAG                     SKIP AMODE SETTING
.SAM0100 ANOP
         SLR   R15,R15                  CLEAR R15
         AIF   (NOT &#PBXA).SAM0110
         BSM   R15,0                    SET AMODE IN HIGH BIT
.SAM0110 ST    R15,&#PBSMWA+4           SAVE ADDRESS MODE
         AIF   (NOT &#PB370).SAM0200
&TAG     DS    0H
.SAM0200 ANOP
.SAM0999 ANOP
.*--------------------------------------------------------------------*
.*  LOAD ADDITIONAL BASE REGISTERS IF NECESSARY.
.*--------------------------------------------------------------------*
         AIF   ('&BASEREG' EQ '').LDB0010
         ##LDBS &CENTRY,&BASEREG,&BASE1   ESTABLISH PROGRAM BASE
.LDB0010 ANOP
.*--------------------------------------------------------------------*
.*  RESTORE PARMAMETER LIST POINTER
.*--------------------------------------------------------------------*
&REG     SETC  'R1'
         AIF   ('&R1SAVE' EQ '').R1S0010
&REG     SET   '&R1SAVE'
         ##MREG USE,&R1SAVE
.R1S0010 ANOP
         L     R1,DSAPR13               POINT TO PREVIOUS DSA
         L     &REG,DSAR1-&PWA.(,R1)    LOAD R1 ON ENTRY
.*--------------------------------------------------------------------*
.*  GENERATE REGISTER EQUATES IF REQUESTED
.*--------------------------------------------------------------------*
.REQ0000 AIF   (NOT &OREGEQU).REQ0010
*---------------------------------------------------------------------*
*                       W A R N I N G                                 *
*                                                                     *
*  REGISTER 12 POINTS TO THE C EXECUTION FRAMEWORK (CRAB) AND         *
*  SHOULD NEVER BE MODIFIED BY THE ASSEMBLER ROUTINE.                 *
*                                                                     *
*  REGISTER 13 POINTS TO THE CURRENT DYNAMIC STORAGE AREA (DSA)       *
*  AND SHOULD NEVER BE MODIFIED BY THE ASSEMBLER ROUTINE.             *
*---------------------------------------------------------------------*
         CREGS
.REQ0010 ANOP
.EXIT    MEND
