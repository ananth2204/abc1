{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012333000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE556.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE556.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x0c'", "DS1TRBAL": "b'tX'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x13\\x00\\x0c\\x04\\x13\\x00\\x0e\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x11O\\x01\\x02\\x11O\\x083\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-24T00:00:00", "modifydate": "2002-04-24T08:33:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 445    FILE:  556\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT445.FILE556\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 4 MEMBERS COUNTED; CUMULATIVE SIZE IS 239 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/24/02    08:33:12    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$SCKTDOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x10\\x01\\x02\\x08\\x0f\\x01\\x02\\x11?\\x11Y\\x00F\\x00\\x01\\x00E\\xe2\\xe8\\xe2\\xd7\\xd1\\xd2\\xf1@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-03-21T00:00:00", "modifydate": "2002-04-23T11:59:10", "lines": 70, "newlines": 1, "modlines": 69, "user": "SYSPJK1"}, "text": "SCKTINTF - REXX generalized HTTP socket interface.\n\nThis REXX program is passed an external WEB site URL address of a\ntext file, and downloads that file into a new OS/390 file.\nSimilar code could be used to acquire any web site element.\n\nThree (3) parameters are passed - proxyname proxyport url\n\nSample JCL #1\n//STEP1 EXEC PGM=IKJEFT01,DYNAMNBR=255,\n//* PARM parameter ends in col 71 and should be continued in col 16\n// PARM='SCKTINTF xxproxy.us.xxxxxx.com 8080 http://nasdaqtrader.com/dy\n//             namic/symdir/nasdaq.txt'\n//*STEPLIB  DD DSN=SYS1.TCPIP.SEZALINK,DISP=SHR <==IBM REXX socket func\n//*SYSTCPD  DD   DISP=SHR,DSN=SYS1.TCPPARMS(TCPDATA)<== May need\n//SYSEXEC  DD DSN=SYSPJK1.USER.CNTLLIB,DISP=SHR <== EXEC location\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n//HTTPRESP DD DSN=SYSPJK1.HTTPRESP.TXT,DISP=(NEW,CATLG), <==VB output\n// SPACE=(CYL,(1,1)),RECFM=VB,LRECL=32756,BLKSIZE=32760\n\nSample JCL #2\n//STEP1 EXEC PGM=IKJEFT01,DYNAMNBR=255,\n//* PARM parameter ends in col 71 and should be continued in col 16\n// PARM='SCKTINTF xxproxy.us.xxxxxx.com 8080 http://www.cbttape.org/ftp\n//             /docfiles/CBTF1.txt'\n//*STEPLIB  DD DSN=SYS1.TCPIP.SEZALINK,DISP=SHR\n//*SYSTCPD  DD   DISP=SHR,DSN=SYS1.TCPPARMS(TCPDATA)\n//SYSEXEC  DD DSN=SYSPJK1.USER.CNTLLIB,DISP=SHR <== EXEC location\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n//HTTPRESP DD DSN=SYSPJK1.TEST.TXT2,DISP=(NEW,CATLG), <==FB output\n// SPACE=(CYL,(10,1)),RECFM=FB,LRECL=80\nNotes:\nproxyname is the name of your corporate proxy server\n8080 proxy port\nurl is the target text file that you want to acquire.\nSEZALINK required for IBM REXX sockets interface - see SC31-8516\nSYSTCPD DD statement may be required based upon your TCP/IP config\nHTTPRESP is the output DD statement.\n\nSample execution output log\n\nInitialization of socket set complete\nSocket creation successful\nPassed proxy xxproxy.us.xxxxxx.com resolves to xxx.xx.xxx.xxx\nSocket bind successful via xxx.xx.xxx.xxx\nSocket ASCII translation mode activation successful\nSocket HTTPREQ successful\nSocket read 10052 characters\nSearching for HTTP request/response header\nHTTP request/response header located\n505 characters.\nHTTP request header: HTTP/1.0 200 OK  Age: 53680  Accept-Ranges: bytes\n1  Content-Type: text/plain  Server: Apache/1.3.6 (Unix) PHP/3.0.14  Las\n935-3c92b02f\"  Via: 1.1 xxproxyx (NetCache NetApp/5.2.1R1)\nSocket read 38772 characters\nSocket read 100000 characters\nSocket read 100000 characters\n...\nSocket read 100000 characters\nSocket read 18060 characters\nSocket read EOF signalled\nTotal socket read characters: 3766884\nFile write of 3720080 characters complete 0\n94 records written.\nSocket close successful\nSocket termination successful\nREADY\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE556": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00X\\x01\\x01\\x02_\\x01\\x02\\x11/\\x17\\x05\\x00\\x1d\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-04-22T17:05:58", "lines": 29, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 556 is from Jeff Kaplan, and contains a generalized       *   FILE 556\n//*           HTTP requestor socket interface written in REXX.      *   FILE 556\n//*                                                                 *   FILE 556\n//*           email:  jdkaplan@optonline.net                        *   FILE 556\n//*                                                                 *   FILE 556\n//*      SCKTINTF - REXX generalized HTTP socket interface.         *   FILE 556\n//*                                                                 *   FILE 556\n//*      This REXX program is passed an external WEB site URL       *   FILE 556\n//*      address of a text file, and downloads that file into a     *   FILE 556\n//*      new OS/390 file.  Similar code could be used to acquire    *   FILE 556\n//*      any web site element.                                      *   FILE 556\n//*                                                                 *   FILE 556\n//*      Three (3) parameters are passed - proxyname proxyport url  *   FILE 556\n//*                                                                 *   FILE 556\n//*    Notes:                                                       *   FILE 556\n//*                                                                 *   FILE 556\n//*      proxyname is the name of your corporate proxy server       *   FILE 556\n//*      8080 proxy port.                                           *   FILE 556\n//*                                                                 *   FILE 556\n//*      url is the target text file that you want to acquire.      *   FILE 556\n//*                                                                 *   FILE 556\n//*      SEZALINK required for IBM REXX sockets interface - see     *   FILE 556\n//*      SC31-8516.                                                 *   FILE 556\n//*                                                                 *   FILE 556\n//*      SYSTCPD DD statement may be required based upon your       *   FILE 556\n//*      TCP/IP config.                                             *   FILE 556\n//*                                                                 *   FILE 556\n//*      HTTPRESP is the output DD statement.                       *   FILE 556\n//*                                                                 *   FILE 556\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SCKTINTF": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01>\\x00Y\\x01\\x01&\\x9f\\x01\\x02\\x11?\\x11D\\x00\\x80\\x00\\x01\\x00\\x80\\xe2\\xe8\\xe2\\xd7\\xd1\\xd2\\xf1@@@'", "ispf": {"version": "01.62", "flags": 0, "createdate": "2001-09-26T00:00:00", "modifydate": "2002-04-23T11:44:59", "lines": 128, "newlines": 1, "modlines": 128, "user": "SYSPJK1"}, "text": "/* REXX generalized HTTP requestor socket interface */\n/**/\nparse arg proxyname proxyport url . ;\nlf = '25'x;\ncr = '0d'x;\ntrue = \"1\";\nfalse = \"0\";\nhttpreq = \"GET\" url \"HTTP/1.0\"lf||cr|| ,\n          \"Accept: text/plain, text/html, text/*\"lf||cr||lf||cr;\n/**/\nres = Socket('Initialize', 'scktintf');\nparse var res rc subtaskid maxdesc service .;\nif rc\u00ac=0 then signal error;\nsay \"Initialization of socket set complete\";\n/**/\nres = Socket('Socket');\nparse var res rc socketid .;\nif rc\u00ac=0 then signal error;\nsay \"Socket creation successful\";\n/**/\nres = Socket('Gethostbyname', proxyname);\nparse var res rc ipaddresslist;\nif rc\u00ac=0 then signal error;\nipctr = words(ipaddresslist);\ndo i = 1 to ipctr;\n   proxyip = strip(word(ipaddresslist,i));\n   say \"Passed proxy\" proxyname \"resolves to\" proxyip;\nend i;\n/**/\nproxyok = false;\ndo i = 1 to ipctr;\n   proxyip = strip(word(ipaddresslist,i));\n   res = Socket('Connect', socketid, 'AF_INET' proxyport proxyip);\n   parse var res rc .;\n   if rc=0 then do;\n            say \"Socket bind successful via\" proxyip;\n            proxyok = true;\n            leave i;\n         end;\n      else do;\n            say \"Socket bind failed via\" proxyip;\n            say \"Socket interface failure:\" res;\n         end;\nend i;\nif \u00acproxyok then signal error;\n/**/\nres = Socket('Setsockopt', socketid, 'Sol_Socket', 'So_ASCII', 'On');\nparse var res rc .;\nif rc\u00ac=0 then signal error;\nsay \"Socket ASCII translation mode activation successful\";\n/**/\nres = Socket('Write', socketid, httpreq);\nparse var res rc .;\nif rc\u00ac=0 then signal error;\nsay \"Socket HTTPREQ successful\";\n/**/\nrespctr = 0;\nsocketcharlen = 0;\nfoundhdr=false;\nresponsestream=\"\";\nfilecharlen = 0;\ndo forever;\n  res = Socket('Recvfrom', socketid, 100000);\n  parse var res rc . . . datalen data;\n  if rc\u00ac=0 then signal error;\n  if datalen=0 then leave;\n  say \"Socket read\" datalen \"characters\";\n  socketcharlen = socketcharlen + datalen;\n  /* convert dashed vertical line to solid vertical line */\n  responsestream=responsestream||translate(data,'4f'x,'6a'x);\n  if \u00acfoundhdr then do;\n       say \"Searching for HTTP request/response header\";\n       if pos(\"0d250d25\"x,responsestream)\u00ac=0 then do;\n           parse var responsestream header \"0d250d25\"x ,\n                  responsestream;\n           say \"HTTP request/response header located\";\n           say length(header) \"characters.\";\n           say \"HTTP request/response header:\" header;\n           foundhdr=true;\n           end;\n  end;\n  do while(foundhdr & pos(\"25\"x,responsestream)\u00ac=0);\n           respctr=respctr+1;\n           parse var responsestream out.respctr \"25\"x responsestream;\n           linelen = length(out.respctr);\n           if linelen\u00ac=0 then do; /* If line=just '25'x then skip */\n              /* strip trailing cr, if any */\n              if substr(out.respctr,linelen,1)=\"0d\"x then ,\n                  out.respctr=substr(out.respctr,1,linelen-1);\n              filecharlen = filecharlen + length(out.respctr);\n           end;\n  end;\nend;\nsay \"Socket read EOF signalled\";\nsay \"Total socket read characters:\" socketcharlen;\nif \u00acfoundhdr then do;\n       say \"ERROR: HTTP request/response header not located\";\n       say \"Clear text read:\";\n       say responsestream;\n       say \"Hex text read:\";\n       say c2x(responsestream);\n       say \"Terminating\";\n       exit 20;\n       end;\nif responsestream\u00ac=\"\" then do;\n       say \"Logic error: Response stream not totally processed\";\n       say \"Remaining response stream:\";\n       say c2x(responsestream);\n       say \"Terminating\";\n       exit 24;\n       end;\n\"execio * diskw HTTPRESP (stem out. finis\";\nsaverc = rc;\nsay \"File write of\" filecharlen \"characters complete\" saverc;\nsay respctr \"records written.\";\nif saverc\u00ac=0 then exit 16;\n/**/\nres = Socket('Close', socketid);\nparse var res rc .;\nif rc\u00ac=0 then signal error;\nsay \"Socket close successful\";\n/**/\nres = Socket('Terminate', subtaskid);\nparse var res rc subtaskid .;\nif rc\u00ac=0 then signal error;\nsay \"Socket termination successful\";\nexit 0;\nerror: Say \"Socket interface failure:\" res; exit 16;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT556/FILE556.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT556", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}