./ ADD NAME=$$LIB    0101-19004-19004-0953-00001-00001-00000-APLKS   17
     USERID().ASUTIL.COBOL
./ ADD NAME=$DIRSTR  0127-17264-19304-1343-00025-00011-00000-APLKS   41
*   CBT#... FILE...      Aritecture Services                  LKS

 LOADMEM   CMPJCL    EXECJCL
 --------  --------  --------
           COBBCL              compile individual pgm/sub-pgm(s)

 ASTDATEB  COBBCL    ASTIVP06  test LE date callable svc(s)
 ASTMSG1B  COBBCL    ASTIVP01  test ASU messages using LE svc(s)
 ASTSRT1B  COBBCL    ASTIVP07  test ASU heap sort & binary search
                               ..& fibonaccian search
 ASTSRT2B  COBBCL    ASTIVP07  test COBOL heap sort & binary search
 ASTSTR1B  COBBCL    ASTIVP02  test ASU STRING svc(s)
 ASTSVC1B  COBBCL    ASTIVP06  test LE callable svc(s)
 ASTSVC2B  COBBCL    ASTIVP06  test use of C/C++ functions
 ASUDNOFB  COBBCL    ASTIVP02  return number of find(s) BPOS
 ASUDN2TB  COBBCL    ASTIVP02  convert nbr to text
 ASUMETXT  COBBCL              dispatch error message(s)
 ASUMDHEX  COBBCL    ASTIVP04  CEEMOUT horizontal hex
 ASUMVHEX  COBBCL    ASTIVP04  CEEMOUT vertical hex
 ASUP2DSB  COBBCL    ASTIVP03  copy PARM= statement to QSAM
                               ..with resolved symbolic(s)

 VBINSRCH  COBBCL    ASTIVP07  binary search (1st occurance)
 VBINSRH1  COBBCL    ASTIVP07  binary search (>= srcharg)
 VHEAPSRT  COBBCL    ASTIVP07  heap sort
./ ADD NAME=ASTDATEB 0119-14180-18295-1358-01243-01252-00000-APLKS   01
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTDATEB.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*--------------------------------------------------------------*
000700*               ** PROGRAM DESCRIPTION **                      *
000800*                                                              *
000900*    NAME: ASTDATEB                                            *
001000*    APPL: Architecture Services Utility                       *
001100*    DESC: Test sub-program to access LE date services.        *
001200* PURPOSE: Sub-program to drive the LE date services.          *
001300*                                                              *
001400* Called Routine(s):                                           *
001500*    ASUMETXT                                                  *
001600*    CEEDATE                                                   *
001700*    CEEDAYS                                                   *
001800*    CEEDYWK                                                   *
001900*    CEEFTDS                                                   *
002000*    CEESIABS                                                  *
002100*                                                              *
002200* INPUT: CALL 'ASTDATEB'                                       *
002300*             USING ASCA-COMMAREA                              *
002400*                   ASUDATE-ACTION                             *
002500*                   ASUDATE-INPUT                              *
002600*                   ASUDATE-OUTPUT                             *
002700*                   AS5FDBK-COND-AREA                          *
002800*                                                              *
002900*--------------------------------------------------------------*
003000     SKIP2
003100*--------------------------------------------------------------*
003200*               ** HISTORY OF REVISIONS **                     *
003300* DESCRIPTION                                           CHNGID *
003400* ____________________________________________________  _______*
003500*                                                              *
003600* 10/17/01 NEW                                                 *
003700*                                                              *
003800*--------------------------------------------------------------*
003900     SKIP2
004000 DATA DIVISION.
004100
004200 WORKING-STORAGE SECTION.
004300*    PERSISTENT DATA
004400
004500 01  FILLER.
004600     03  WS-EYE-CATCHER PIC X(25)
004700              VALUE "BUZZARD CREEK TECH, INC. ".
004800     03  WS-PGMID       PIC X(08) VALUE "ASTDATEB".
004900
005000 01  FILLER.
005100     03  WS-LILIAN-DAYS      PIC S9(9) BINARY SYNC VALUE ZERO.
005200     03  WS-LILIAN-SEC                 COMP-2      VALUE ZERO.
005300     03  WS-GREGORIAN-DT     PIC X(17) VALUE ZERO.
005400*        FORMAT: YYYYMMDDHHMISS999
005500
005600 01  FILLER.
005700     03  LE-MSG-DEST         PIC S9(9) BINARY VALUE +2.
005800     03  DFLT-DATE-FULL-MASK.
005900         05  DFLT-DATE-FULL-MASK-VLEN  PIC S9(4)
006000                                       BINARY VALUE +24.
006100         05  DFLT-DATE-FULL-MASK-VTXT  PIC X(80)
006200             VALUE '%A %B %d, %Y %x %X %j %U'.
006300     03  DFLT-DATE-ABBR-MASK.
006400         05  DFLT-DATE-ABBR-MASK-VLEN  PIC S9(4)
006500                                       BINARY VALUE +12.
006600         05  DFLT-DATE-ABBR-MASK-VTXT  PIC X(80)
006700             VALUE '%a %b %e, %Y'.
006800
006900 01  WS-MONTH-TITLE-TABLE.
007000     03  FILLER.
007100         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
007200         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
007300         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
007400     03  FILLER.
007500         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
007600         05  FILLER     PIC S9(3) COMP-3 VALUE +28.
007700         05  FILLER     PIC S9(3) COMP-3 VALUE +29.
007800     03  FILLER.
007900         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008000         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
008100         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
008200     03  FILLER.
008300         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008400         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008500         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008600     03  FILLER.
008700         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008800         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008900         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009000     03  FILLER.
009100         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009200         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009300         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009400     03  FILLER.
009500         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009600         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
009700         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
009800     03  FILLER.
009900         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010000         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
010100         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
010200     03  FILLER.
010300         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010400         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010500         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010600     03  FILLER.
010700         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010800         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
010900         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
011000     03  FILLER.
011100         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
011200         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
011300         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
011400     03  FILLER.
011500         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
011600         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
011700         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
011800 01  FILLER REDEFINES WS-MONTH-TITLE-TABLE.
011900     03  WS-MONTH-TABLE-ENTRY OCCURS 12 TIMES.
012000         05  WS-MONTH-DAYS-360    PIC S9(3) COMP-3.
012100         05  WS-MONTH-DAYS-365    PIC S9(3) COMP-3.
012200         05  WS-MONTH-DAYS-366    PIC S9(3) COMP-3.
012300
012400 LOCAL-STORAGE SECTION.
012500*    TRANSIENT DATA
012600
012700     COPY CEEIGZTD.
012800
012900     COPY AS5MSGRB.
013000
013100 01  LS-MISC-STORAGE.
013200     03  LS-FIELD1-PTR  POINTER.
013300     03  LS-FWORD       PIC S9(9) BINARY.
013400     03  LS-FWORD1      PIC S9(9) BINARY.
013500     03  LS-FWORD2      PIC S9(9) BINARY.
013600     03  LS-FWORD3      PIC S9(9) BINARY.
013700     03  LS-2BYTES      PIC  9(2).
013800     03  LS-2BYTES1     PIC  9(2).
013900     03  LS-3BYTES      PIC  9(3).
014000     03  LS-4BYTES      PIC  9(4).
014100     03  LS-4BYTES1     PIC  9(4).
014200     03  LS-PDEC1       PIC S9(5) COMP-3.
014300     03  LS-PDEC2       PIC S9(5) COMP-3.
014400     03  ASU-MODULE     PIC X(08).
014500     03  LS-TIME        PIC X(06).
014600**   03  LS-DTTM        PIC X(14).
014700     03  LS-DATE-FORMAT      PIC S9(2) BINARY.
014800       88 LS-FORMAT-YYDDD        VALUE +01.
014900       88 LS-FORMAT-YYYYDDD      VALUE +02.
015000       88 LS-FORMAT-DDDYY        VALUE +03.
015100       88 LS-FORMAT-DDDYYYY      VALUE +04.
015200       88 LS-FORMAT-YYMMDD       VALUE +10.
015300       88 LS-FORMAT-YYYYMMDD     VALUE +11.
015400       88 LS-FORMAT-MMDDYY       VALUE +12.
015500       88 LS-FORMAT-MMDDYYYY     VALUE +13.
015600       88 LS-FORMAT-DDMMYY       VALUE +14.
015700       88 LS-FORMAT-DDMMYYYY     VALUE +15.
015800     03  LS-VSTR1.
015900         05  LS-V1LEN        PIC S9(2) BINARY.
016000         05  LS-V1DATA       PIC X(80).
016100     03  LS-VSTR2.
016200         05  LS-V2LEN        PIC S9(2) BINARY.
016300         05  LS-V2DATA       PIC X(80).
016400     03  LS-DATE-A           PIC 9(08).
016500     03  LS-DATE-B           PIC 9(08).
016600     03  LS-DATE-C           PIC 9(08).
016700     SKIP2
016800 LINKAGE SECTION.
016900     SKIP1
017000     COPY AS5CA.
017100     SKIP1
017200 01  ASUDATE-ACTION.
017300     03  I-DATE-ACTION       PIC S9(9) BINARY.
017400       88 I-ACTION-QUERY         VALUE +002.
017500       88 I-ACTION-DIFF          VALUE +005.
017600       88 I-ACTION-INCR          VALUE +006.
017700       88 I-ACTION-DECR          VALUE +007.
017800       88 I-ACTION-FORMAT        VALUE +008.
017900     SKIP1
018000 01  ASUDATE-INPUT.
018100     03  I-DATE-CALENDAR     PIC X(01).
018200       88 I-CALENDAR-DEFAULT     VALUE ' '.
018300       88 I-CALENDAR-ACTUAL      VALUE 'A'.
018400       88 I-CALENDAR-BUSINESS    VALUE 'B'.
018500       88 I-CALENDAR-360         VALUE 'C'.
018600     03  I-DATE-FLDMOD       PIC X(01).
018700       88 I-FLDMOD-DEFAULT       VALUE ' '.
018800       88 I-FLDMOD-DAY           VALUE 'D'.
018900       88 I-FLDMOD-MONTH         VALUE 'M'.
019000       88 I-FLDMOD-WEEK          VALUE 'W'.
019100     03  I-DATE-INCLUDE      PIC X(01).
019200       88 I-INCLUDE-DEFAULT      VALUE ' '.
019300       88 I-INCLUDE-BOTH         VALUE 'B'.
019400       88 I-INCLUDE-FIRST        VALUE 'F'.
019500       88 I-INCLUDE-LAST         VALUE 'L'.
019600       88 I-INCLUDE-NONE         VALUE 'N'.
019700     03  I-DTTM-A            PIC X(14).
019800     03  I-DATE-A-FORMAT     PIC S9(2) BINARY.
019900       88 I-A-FORMAT-YYDDD       VALUE +01.
020000       88 I-A-FORMAT-YYYYDDD     VALUE +02.
020100       88 I-A-FORMAT-DDDYY       VALUE +03.
020200       88 I-A-FORMAT-DDDYYYY     VALUE +04.
020300       88 I-A-FORMAT-YYMMDD      VALUE +10.
020400       88 I-A-FORMAT-YYYYMMDD    VALUE +11.
020500       88 I-A-FORMAT-MMDDYY      VALUE +12.
020600       88 I-A-FORMAT-MMDDYYYY    VALUE +13.
020700       88 I-A-FORMAT-DDMMYY      VALUE +14.
020800       88 I-A-FORMAT-DDMMYYYY    VALUE +15.
020900     03  I-DTTM-B            PIC X(14).
021000     03  I-DATE-B-FORMAT     PIC S9(2) BINARY.
021100       88 I-B-FORMAT-YYDDD       VALUE +01.
021200       88 I-B-FORMAT-YYYYDDD     VALUE +02.
021300       88 I-B-FORMAT-DDDYY       VALUE +03.
021400       88 I-B-FORMAT-DDDYYYY     VALUE +04.
021500       88 I-B-FORMAT-YYMMDD      VALUE +10.
021600       88 I-B-FORMAT-YYYYMMDD    VALUE +11.
021700       88 I-B-FORMAT-MMDDYY      VALUE +12.
021800       88 I-B-FORMAT-MMDDYYYY    VALUE +13.
021900       88 I-B-FORMAT-DDMMYY      VALUE +14.
022000       88 I-B-FORMAT-DDMMYYYY    VALUE +15.
022100     03  I-DATE-INCR-DECR    PIC S9(9) BINARY.
022200     03  I-DATE-FULL-MASK.
022300         05  I-DATE-FULL-MASK-VLEN     PIC S9(4) BINARY.
022400         05  I-DATE-FULL-MASK-VTXT     PIC X(80).
022500     03  I-DATE-ABBR-MASK.
022600         05  I-DATE-ABBR-MASK-VLEN     PIC S9(4) BINARY.
022700         05  I-DATE-ABBR-MASK-VTXT     PIC X(80).
022800     SKIP1
022900 01  ASUDATE-OUTPUT.
023000     03  O-DATE         PIC X(10).
023100     03  O-DATE-CMPR-FLAG    PIC X(02).
023200       88 O-CMPR-FLAG-LT         VALUE 'LT'.
023300       88 O-CMPR-FLAG-EQ         VALUE 'EQ'.
023400       88 O-CMPR-FLAG-GT         VALUE 'GT'.
023500     03  O-DATE-DIFF    PIC S9(9) BINARY.
023600     03  O-DOW          PIC S9(9) BINARY.
023700     03  O-DOW-OCCUR    PIC S9(9) BINARY.
023800     03  O-DATE-FULL-STR.
023900         05  O-DATE-FULL-VLEN     PIC S9(4) BINARY.
024000         05  O-DATE-FULL-VTXT     PIC X(80).
024100     03  O-DATE-ABBR-STR.
024200         05  O-DATE-ABBR-VLEN     PIC S9(4) BINARY.
024300         05  O-DATE-ABBR-VTXT     PIC X(80).
024400     SKIP1
024500     COPY AS5FDBK.
024600     EJECT
024700 PROCEDURE DIVISION USING
024800     ASCA-COMMAREA
024900     ASUDATE-ACTION
025000     ASUDATE-INPUT
025100     ASUDATE-OUTPUT
025200     AS5FDBK-COND-AREA.
025300
025400 0100-0000-MAINLINE.
025500     INITIALIZE LS-MISC-STORAGE
025600     INITIALIZE ASUDATE-OUTPUT
025700
025800     DISPLAY WS-PGMID
025900          ' Testing date processing'
026000
026100     EVALUATE TRUE
026200       WHEN I-ACTION-QUERY
026300         PERFORM 2000-0000-DATE-QUERY
026400              THRU 2000-0999-END
026500       WHEN I-ACTION-DIFF
026600         PERFORM 5000-0000-DATE-DIFF
026700              THRU 5000-0999-END
026800       WHEN I-ACTION-INCR
026900         PERFORM 6000-0000-DATE-INCR
027000              THRU 6000-0999-END
027100       WHEN I-ACTION-DECR
027200         PERFORM 7000-0000-DATE-DECR
027300              THRU 7000-0999-END
027400       WHEN I-ACTION-FORMAT
027500         DISPLAY WS-PGMID
027600              ' CODE NOT AVAILABLE FOR ACTION=FORMAT'
027700         PERFORM 80103-0001-TEXT
027800              THRU 89000-0999-END
027900       WHEN OTHER
028000         DISPLAY WS-PGMID
028100              ' INVALID VALUE FOR ACTION, '
028200              I-DATE-ACTION
028300         PERFORM 80101-0001-TEXT
028400              THRU 89000-0999-END
028500     END-EVALUATE
028600
028700     GOBACK
028800
028900     CONTINUE.
029000 0100-0999-END.
029100     EXIT.
029200
029300 2000-0000-DATE-QUERY.
029400* --------------------------------------------------- *
029500* RETURN INFO ABOUT REQUESTED DATE
029600* --------------------------------------------------- *
029700
029800     IF I-DTTM-A = SPACE
029900***    IF ASCA-APPL-DTTM = SPACE OR ZERO
030000***      CALL 'CEELOCT' USING WS-LILIAN-DAYS WS-LILIAN-SEC
030100***           WS-GREGORIAN-DT WSLE-FEEDBACK (1)
030200***      END-CALL
030300***      IF NOT CEE000 (1)
030400***        MOVE ASCA-CUR-DTTM      TO I-DTTM-A
030500***      ELSE
030600***        MOVE WS-GREGORIAN-DT TO I-DTTM-A
030700***      END-IF
030800***    ELSE
030900***      MOVE ASCA-APPL-DTTM      TO I-DTTM-A
031000***    END-IF
031100       SET  I-A-FORMAT-YYYYMMDD TO TRUE
031200     END-IF
031300     MOVE I-DTTM-A        TO LS-V1DATA
031400     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
031500     PERFORM 11000-0000-CONVERT-TO-DAYS
031600*    GET DAY OF WEEK
031700     CALL 'CEEDYWK'
031800          USING LS-FWORD
031900                O-DOW
032000                OMITTED
032100     SET LS-FORMAT-YYYYMMDD TO TRUE
032200     PERFORM 12000-0000-CONVERT-TO-DATE
032300*    GENERATE DATE INFO STRING
032400     MOVE LS-TIME (5:2)   TO LS-2BYTES
032500     MOVE LS-2BYTES       TO TM-SEC
032600     MOVE LS-TIME (3:2)   TO LS-2BYTES
032700     MOVE LS-2BYTES       TO TM-MIN
032800     MOVE LS-TIME (1:2)   TO LS-2BYTES
032900     MOVE LS-2BYTES       TO TM-HOUR
033000     MOVE LS-V1DATA (7:2) TO LS-2BYTES
033100     MOVE LS-2BYTES       TO TM-DAY
033200     MOVE LS-V1DATA (5:2) TO LS-2BYTES
033300     SUBTRACT +1 FROM LS-2BYTES
033400     MOVE LS-2BYTES       TO TM-MON
033500     MOVE LS-V1DATA (1:4) TO LS-4BYTES
033600     SUBTRACT +1900 FROM LS-4BYTES GIVING TM-YEAR
033700     SUBTRACT +1 FROM O-DOW GIVING TM-WDAY
033800     MOVE LS-V1DATA (7:2) TO LS-2BYTES
033900     DIVIDE LS-2BYTES BY 7 GIVING O-DOW-OCCUR
034000          REMAINDER LS-FWORD1
034100     IF LS-FWORD1 > ZERO
034200       ADD +1 TO O-DOW-OCCUR
034300     END-IF
034400*    GET DAY OF YEAR
034500     SET LS-FORMAT-YYYYDDD  TO TRUE
034600     PERFORM 12000-0000-CONVERT-TO-DATE
034700     MOVE LS-V1DATA (5:3) TO LS-3BYTES
034800     SUBTRACT +1 FROM LS-3BYTES
034900     MOVE LS-3BYTES       TO TM-YDAY
035000     MOVE -1              TO TM-IS-DLST
035100     MOVE +80             TO LS-FWORD1
035200     DISPLAY WS-PGMID
035300          ' TM-DAY: '
035400          TM-DAY
035500          ' TM-MON: '
035600          TM-MON
035700          ' TM-YEAR: '
035800          TM-YEAR
035900          ' TM-YDAY: '
036000          TM-YDAY
036100
036200     SET LS-FIELD1-PTR TO ADDRESS OF TD-STRUCT
036300     IF I-DATE-FULL-MASK-VLEN = ZERO
036400       MOVE DFLT-DATE-FULL-MASK TO I-DATE-FULL-MASK
036500     END-IF
036600     CALL 'CEEFTDS'
036700          USING OMITTED
036800                LS-FIELD1-PTR
036900                LS-FWORD1
037000                I-DATE-FULL-MASK
037100                O-DATE-FULL-STR
037200                OMITTED
037300
037400     IF I-DATE-ABBR-MASK-VLEN = ZERO
037500       MOVE DFLT-DATE-ABBR-MASK TO I-DATE-ABBR-MASK
037600     END-IF
037700     CALL 'CEEFTDS'
037800          USING OMITTED
037900                LS-FIELD1-PTR
038000                LS-FWORD1
038100                I-DATE-ABBR-MASK
038200                O-DATE-ABBR-STR
038300                OMITTED
038400
038500     CONTINUE.
038600 2000-0999-END.
038700     EXIT.
038800
038900 5000-0000-DATE-DIFF.
039000* --------------------------------------------------- *
039100* COMPUTE THE DIFFERENCE BETWEEN 2 DATES
039200* --------------------------------------------------- *
039300     EVALUATE TRUE              ALSO TRUE
039400       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-DAY
039500         PERFORM 5000-0100-ACTUAL-DIFF-DA
039600              THRU 5000-0199-END
039700       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-MONTH
039800         PERFORM 5000-0200-ACTUAL-DIFF-MO
039900              THRU 5000-0299-END
040000**     WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-WEEK
040100**       PERFORM 5000-0300-ACTUAL-DIFF-WK
040200**            THRU 5000-0399-END
040300       WHEN I-CALENDAR-BUSINESS ALSO ANY
040400         DISPLAY WS-PGMID
040500              ' CODE NOT AVAILABLE FOR BUSINESS DATE DIFF'
040600       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-DAY
040700         PERFORM 5000-0400-BUSINESS-DIFF-DA
040800              THRU 5000-0499-END
040900       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-MONTH
041000         PERFORM 5000-0500-BUSINESS-DIFF-MO
041100              THRU 5000-0599-END
041200       WHEN I-CALENDAR-360      ALSO I-FLDMOD-DAY
041300         PERFORM 5000-0700-V360-DIFF-DA
041400              THRU 5000-0799-END
041500       WHEN I-CALENDAR-360      ALSO I-FLDMOD-MONTH
041600         PERFORM 5000-0800-V360-DIFF-MO
041700              THRU 5000-0899-END
041800       WHEN OTHER
041900         PERFORM 80105-0001-TEXT
042000              THRU 89000-0999-END
042100         DISPLAY WS-PGMID
042200              ' INVALID DATE DIFF OPTION '
042300              I-DATE-CALENDAR
042400              ' '
042500              I-DATE-FLDMOD
042600     END-EVALUATE
042700     GO TO 5000-0999-END
042800
042900     CONTINUE.
043000 5000-0100-ACTUAL-DIFF-DA.
043100* --------------------------------------------------- *
043200* COMPUTE NBR OF DAYS BETWEEN 2 DATES (365/366)
043300* --------------------------------------------------- *
043400     MOVE I-DTTM-A        TO LS-V1DATA
043500     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
043600     PERFORM 11000-0000-CONVERT-TO-DAYS
043700     MOVE LS-FWORD        TO LS-FWORD1
043800
043900     IF I-DTTM-B = SPACE
044000       SET I-B-FORMAT-YYYYMMDD TO TRUE
044100     END-IF
044200     MOVE I-DTTM-B        TO LS-V1DATA
044300     MOVE I-DATE-B-FORMAT TO LS-DATE-FORMAT
044400     PERFORM 11000-0000-CONVERT-TO-DAYS
044500     MOVE LS-FWORD        TO LS-FWORD2
044600
044700     COMPUTE LS-FWORD3 = LS-FWORD2 - LS-FWORD1
044800     IF LS-FWORD3 < ZERO
044900       SET O-CMPR-FLAG-GT TO TRUE
045000       CALL 'CEESIABS'
045100            USING LS-FWORD3
045200                  OMITTED
045300                  LS-FWORD3
045400     END-IF
045500     IF LS-FWORD3 = ZERO
045600       SET O-CMPR-FLAG-EQ TO TRUE
045700     END-IF
045800     IF LS-FWORD3 > ZERO
045900       SET O-CMPR-FLAG-LT TO TRUE
046000     END-IF
046100     MOVE LS-FWORD3 TO O-DATE-DIFF
046200     EVALUATE TRUE
046300       WHEN I-INCLUDE-BOTH
046400         ADD +1 TO O-DATE-DIFF
046500       WHEN I-INCLUDE-FIRST
046600         IF O-DATE-DIFF = ZERO
046700           ADD +1 TO O-DATE-DIFF
046800         END-IF
046900       WHEN I-INCLUDE-LAST
047000         CONTINUE
047100       WHEN I-INCLUDE-NONE
047200         IF O-DATE-DIFF > ZERO
047300           SUBTRACT +1 FROM O-DATE-DIFF
047400         END-IF
047500       WHEN OTHER
047600         PERFORM 80105-0002-TEXT
047700              THRU 89000-0999-END
047800         DISPLAY WS-PGMID
047900              ' INVALID INCLUDE OPTION '
048000              I-DATE-INCLUDE
048100     END-EVALUATE
048200
048300     CONTINUE.
048400 5000-0199-END.
048500     EXIT.
048600
048700 5000-0200-ACTUAL-DIFF-MO.
048800* --------------------------------------------------- *
048900* COMPUTE NBR OF MONTHS BETWEEN 2 DATES (365/366)
049000* --------------------------------------------------- *
049100     MOVE I-DTTM-A        TO LS-V1DATA
049200     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
049300     PERFORM 11000-0000-CONVERT-TO-DAYS
049400
049500     SET LS-FORMAT-YYYYMMDD TO TRUE
049600     PERFORM 12000-0000-CONVERT-TO-DATE
049700     MOVE LS-V1DATA (1:LENGTH OF LS-DATE-A) TO LS-DATE-A
049800
049900     IF I-DTTM-B = SPACE
050000       SET I-B-FORMAT-YYYYMMDD TO TRUE
050100     END-IF
050200     MOVE I-DTTM-B        TO LS-V1DATA
050300     MOVE I-DATE-B-FORMAT TO LS-DATE-FORMAT
050400     PERFORM 11000-0000-CONVERT-TO-DAYS
050500
050600     SET LS-FORMAT-YYYYMMDD TO TRUE
050700     PERFORM 12000-0000-CONVERT-TO-DATE
050800     MOVE LS-V1DATA (1:LENGTH OF LS-DATE-B) TO LS-DATE-B
050900
051000     IF LS-DATE-B = LS-DATE-A
051100       SET O-CMPR-FLAG-EQ TO TRUE
051200     END-IF
051300     IF LS-DATE-B > LS-DATE-A
051400       SET O-CMPR-FLAG-LT TO TRUE
051500     END-IF
051600     IF LS-DATE-B < LS-DATE-A
051700       SET O-CMPR-FLAG-GT TO TRUE
051800       MOVE LS-DATE-A TO LS-DATE-C
051900       MOVE LS-DATE-B TO LS-DATE-A
052000       MOVE LS-DATE-C TO LS-DATE-B
052100     END-IF
052200     MOVE LS-DATE-A (1:4) TO LS-4BYTES
052300     MOVE LS-DATE-B (1:4) TO LS-4BYTES1
052400     COMPUTE LS-FWORD2 = (LS-4BYTES1 - LS-4BYTES) * 12
052500     MOVE LS-DATE-A (5:2) TO LS-2BYTES
052600     MOVE LS-DATE-B (5:2) TO LS-2BYTES1
052700     COMPUTE O-DATE-DIFF = LS-FWORD2 + LS-DATE-B - LS-DATE-A
052800     MOVE LS-DATE-A (7:2) TO LS-2BYTES
052900     MOVE LS-DATE-B (7:2) TO LS-2BYTES1
053000     IF LS-2BYTES1 < LS-2BYTES
053100       SUBTRACT +1 FROM O-DATE-DIFF
053200     END-IF
053300
053400     CONTINUE.
053500 5000-0299-END.
053600     EXIT.
053700
053800 5000-0400-BUSINESS-DIFF-DA.
053900* --------------------------------------------------- *
054000*
054100* --------------------------------------------------- *
054200*    CODE
054300
054400     CONTINUE.
054500 5000-0499-END.
054600     EXIT.
054700
054800 5000-0500-BUSINESS-DIFF-MO.
054900* --------------------------------------------------- *
055000*
055100* --------------------------------------------------- *
055200     SKIP1
055300*    CODE
055400
055500     CONTINUE.
055600 5000-0599-END.
055700     EXIT.
055800
055900 5000-0700-V360-DIFF-DA.
056000* --------------------------------------------------- *
056100* COMPUTE NBR OF DAYS BETWEEN TWO DATES (360)
056200* --------------------------------------------------- *
056300     MOVE I-DTTM-A        TO LS-V1DATA
056400     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
056500     PERFORM 11000-0000-CONVERT-TO-DAYS
056600
056700     SET LS-FORMAT-YYYYMMDD TO TRUE
056800     PERFORM 12000-0000-CONVERT-TO-DATE
056900     MOVE LS-V1DATA (1:LENGTH OF LS-DATE-A) TO LS-DATE-A
057000
057100     IF I-DTTM-B = SPACE
057200*      MOVE ASCA-CUR-DTTM      TO I-DTTM-B
057300       SET I-B-FORMAT-YYYYMMDD TO TRUE
057400     END-IF
057500     MOVE I-DTTM-B        TO LS-V1DATA
057600     MOVE I-DATE-B-FORMAT TO LS-DATE-FORMAT
057700     PERFORM 11000-0000-CONVERT-TO-DAYS
057800
057900     SET LS-FORMAT-YYYYMMDD TO TRUE
058000     PERFORM 12000-0000-CONVERT-TO-DATE
058100     MOVE LS-V1DATA (1:LENGTH OF LS-DATE-B) TO LS-DATE-B
058200
058300     IF LS-DATE-B < LS-DATE-A
058400       MOVE LS-DATE-A TO LS-DATE-C
058500       MOVE LS-DATE-B TO LS-DATE-A
058600       MOVE LS-DATE-C TO LS-DATE-B
058700     END-IF
058800     MOVE LS-DATE-A (7:2) TO LS-2BYTES
058900     MOVE LS-DATE-B (7:2) TO LS-2BYTES1
059000     IF LS-DATE-B (7:2) > LS-DATE-A (7:2)
059100       COMPUTE LS-FWORD3 = LS-2BYTES1 - LS-2BYTES
059200     ELSE
059300       COMPUTE LS-FWORD3 = 30 + LS-2BYTES1 - LS-2BYTES
059400       SUBTRACT 1 FROM LS-2BYTES1
059500     END-IF
059600     IF LS-DATE-B (5:2) > LS-DATE-A (5:2)
059700       COMPUTE LS-FWORD2 = LS-2BYTES1 - LS-2BYTES
059800     ELSE
059900       COMPUTE LS-FWORD2 = 12 + LS-2BYTES1 -
060000            LS-2BYTES
060100       SUBTRACT 1 FROM LS-2BYTES1
060200     END-IF
060300     COMPUTE LS-FWORD1 = LS-2BYTES1 - LS-2BYTES
060400     COMPUTE O-DATE-DIFF = (360 * LS-FWORD1) +
060500          (12 * LS-FWORD2) + LS-FWORD3
060600     END-COMPUTE
060700     EVALUATE TRUE
060800       WHEN I-INCLUDE-BOTH
060900         ADD +1 TO O-DATE-DIFF
061000       WHEN I-INCLUDE-FIRST
061100         IF O-DATE-DIFF = ZERO
061200           ADD +1 TO O-DATE-DIFF
061300         END-IF
061400       WHEN I-INCLUDE-LAST
061500         CONTINUE
061600       WHEN I-INCLUDE-NONE
061700         IF O-DATE-DIFF > ZERO
061800           SUBTRACT +1 FROM O-DATE-DIFF
061900         END-IF
062000       WHEN OTHER
062100         PERFORM 80105-0002-TEXT
062200              THRU 89000-0999-END
062300         DISPLAY WS-PGMID
062400              ' INVALID INCLUDE OPTION '
062500              I-DATE-INCLUDE
062600     END-EVALUATE
062700
062800     CONTINUE.
062900 5000-0799-END.
063000     EXIT.
063100
063200 5000-0800-V360-DIFF-MO.
063300* --------------------------------------------------- *
063400* COMPUTE NBR OF MONTHS BETWEEN TWO DATES (360)
063500* --------------------------------------------------- *
063600     PERFORM 5000-0700-V360-DIFF-DA
063700          THRU 5000-0799-END
063800     DIVIDE O-DATE-DIFF BY 30 GIVING O-DATE-DIFF
063900
064000     CONTINUE.
064100 5000-0899-END.
064200     EXIT.
064300
064400 5000-0999-END.
064500     EXIT.
064600
064700 6000-0000-DATE-INCR.
064800* --------------------------------------------------- *
064900* COMPUTE NEW DATE GIVEN DATE AND INCREMENT
065000* --------------------------------------------------- *
065100     EVALUATE TRUE              ALSO TRUE
065200       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-DAY
065300         PERFORM 6000-0100-ACTUAL-INCR-DA
065400              THRU 6000-0199-END
065500       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-MONTH
065600         PERFORM 6000-0200-ACTUAL-INCR-MO
065700              THRU 6000-0299-END
065800       WHEN I-CALENDAR-BUSINESS ALSO ANY
065900         DISPLAY WS-PGMID
066000              ' CODE NOT AVAILABLE FOR BUSINESS DATE INCR'
066100       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-DAY
066200         PERFORM 6000-0400-BUSINESS-INCR-DA
066300              THRU 6000-0499-END
066400       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-MONTH
066500         PERFORM 6000-0500-BUSINESS-INCR-MO
066600              THRU 6000-0599-END
066700       WHEN I-CALENDAR-360      ALSO I-FLDMOD-DAY
066800         PERFORM 6000-0700-V360-INCR-DA
066900              THRU 6000-0799-END
067000       WHEN I-CALENDAR-360      ALSO I-FLDMOD-MONTH
067100         PERFORM 6000-0800-V360-INCR-MO
067200              THRU 6000-0899-END
067300       WHEN OTHER
067400         PERFORM 80105-0001-TEXT
067500              THRU 89000-0999-END
067600         DISPLAY WS-PGMID
067700              ' INVALID DATE INCR OPTION, '
067800              I-DATE-CALENDAR
067900              ' '
068000              I-DATE-FLDMOD
068100     END-EVALUATE
068200
068300     GO TO 6000-0999-END
068400
068500     CONTINUE.
068600 6000-0100-ACTUAL-INCR-DA.
068700* --------------------------------------------------- *
068800* COMPUTE NEW DATE GIVEN DATE AND DAY INCREMENT
068900*         (365/366)
069000* --------------------------------------------------- *
069100     MOVE I-DTTM-A        TO LS-V1DATA
069200     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
069300     PERFORM 11000-0000-CONVERT-TO-DAYS
069400     ADD I-DATE-INCR-DECR TO LS-FWORD
069500
069600     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
069700     PERFORM 12000-0000-CONVERT-TO-DATE
069800     MOVE LS-V1DATA (1:LS-V1LEN) TO O-DATE
069900
070000     CONTINUE.
070100 6000-0199-END.
070200     EXIT.
070300
070400 6000-0200-ACTUAL-INCR-MO.
070500* --------------------------------------------------- *
070600* COMPUTE NEW DATE GIVEN DATE AND MONTH INCREMENT
070700*         (365/366)
070800* --------------------------------------------------- *
070900     MOVE I-DTTM-A        TO LS-V1DATA
071000     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
071100     PERFORM 11000-0000-CONVERT-TO-DAYS
071200
071300     SET LS-FORMAT-YYYYMMDD TO TRUE
071400     PERFORM 12000-0000-CONVERT-TO-DATE
071500     MOVE LS-V1DATA (1:4) TO LS-4BYTES
071600     MOVE LS-V1DATA (5:2) TO LS-2BYTES
071700     PERFORM I-DATE-INCR-DECR TIMES
071800       IF LS-4BYTES (3:2) = ZERO
071900         DIVIDE LS-4BYTES BY 400 GIVING LS-PDEC1
072000             REMAINDER LS-PDEC2
072100         IF LS-PDEC2 = 0
072200           ADD WS-MONTH-DAYS-366 (LS-2BYTES) TO LS-FWORD
072300         ELSE
072400           ADD WS-MONTH-DAYS-365 (LS-2BYTES) TO LS-FWORD
072500         END-IF
072600       ELSE
072700         DIVIDE LS-4BYTES BY 4 GIVING LS-PDEC1
072800             REMAINDER LS-PDEC2
072900         IF LS-PDEC2 = 0
073000           ADD WS-MONTH-DAYS-366 (LS-2BYTES) TO LS-FWORD
073100         ELSE
073200           ADD WS-MONTH-DAYS-365 (LS-2BYTES) TO LS-FWORD
073300         END-IF
073400       END-IF
073500       ADD +1 TO LS-2BYTES
073600       IF LS-2BYTES > 12
073700         MOVE +1 TO LS-2BYTES
073800         ADD  +1 TO LS-4BYTES
073900       END-IF
074000     END-PERFORM
074100     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
074200     PERFORM 12000-0000-CONVERT-TO-DATE
074300     MOVE LS-V1DATA       TO O-DATE
074400
074500     CONTINUE.
074600 6000-0299-END.
074700     EXIT.
074800
074900 6000-0400-BUSINESS-INCR-DA.
075000* --------------------------------------------------- *
075100*
075200* --------------------------------------------------- *
075300*    CODE
075400
075500     CONTINUE.
075600 6000-0499-END.
075700     EXIT.
075800
075900 6000-0500-BUSINESS-INCR-MO.
076000* --------------------------------------------------- *
076100*
076200* --------------------------------------------------- *
076300*    CODE
076400
076500     CONTINUE.
076600 6000-0599-END.
076700     EXIT.
076800
076900 6000-0700-V360-INCR-DA.
077000* --------------------------------------------------- *
077100* COMPUTE NEW DATE GIVEN DATE AND DAY INCREMENT
077200*         (360)
077300* --------------------------------------------------- *
077400*    CODE
077500
077600     CONTINUE.
077700 6000-0799-END.
077800     EXIT.
077900
078000 6000-0800-V360-INCR-MO.
078100* --------------------------------------------------- *
078200* COMPUTE NEW DATE GIVEN DATE AND MONTH INCREMENT
078300*         (360)
078400* --------------------------------------------------- *
078500*    CODE
078600
078700     CONTINUE.
078800 6000-0899-END.
078900     EXIT.
079000
079100 6000-0999-END.
079200     EXIT.
079300
079400 7000-0000-DATE-DECR.
079500* --------------------------------------------------- *
079600* COMPUTE NEW DATE GIVEN DATE AND DECREMENT
079700* --------------------------------------------------- *
079800     EVALUATE TRUE              ALSO TRUE
079900       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-DAY
080000         PERFORM 7000-0100-ACTUAL-DECR-DA
080100              THRU 7000-0199-END
080200       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-MONTH
080300         PERFORM 7000-0200-ACTUAL-DECR-MO
080400              THRU 7000-0299-END
080500       WHEN I-CALENDAR-BUSINESS ALSO ANY
080600         DISPLAY WS-PGMID
080700              ' CODE NOT AVAILABLE FOR BUSINESS DATE DECR'
080800       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-DAY
080900         PERFORM 7000-0400-BUSINESS-DECR-DA
081000              THRU 7000-0499-END
081100       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-MONTH
081200         PERFORM 7000-0500-BUSINESS-DECR-MO
081300              THRU 7000-0599-END
081400       WHEN I-CALENDAR-360      ALSO ANY
081500         DISPLAY WS-PGMID
081600              ' CODE NOT AVAILABLE FOR 360 DATE DECR'
081700       WHEN I-CALENDAR-360      ALSO I-FLDMOD-DAY
081800         PERFORM 7000-0700-V360-DECR-DA
081900              THRU 7000-0799-END
082000       WHEN I-CALENDAR-360      ALSO I-FLDMOD-MONTH
082100         PERFORM 7000-0800-V360-DECR-MO
082200              THRU 7000-0899-END
082300       WHEN OTHER
082400         PERFORM 80105-0001-TEXT
082500              THRU 89000-0999-END
082600         DISPLAY WS-PGMID
082700              ' INVALID DATE DECR OPTION '
082800              I-DATE-CALENDAR
082900              ' '
083000              I-DATE-FLDMOD
083100     END-EVALUATE
083200
083300     GO TO 7000-0999-END
083400
083500     CONTINUE.
083600 7000-0100-ACTUAL-DECR-DA.
083700* --------------------------------------------------- *
083800* COMPUTE NEW DATE GIVEN DATE AND DAY DECREMENT
083900*         (365/366)
084000* --------------------------------------------------- *
084100     MOVE I-DTTM-A        TO LS-V1DATA
084200     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
084300     PERFORM 11000-0000-CONVERT-TO-DAYS
084400     SUBTRACT I-DATE-INCR-DECR FROM LS-FWORD
084500
084600     MOVE I-DTTM-A        TO LS-V1DATA
084700     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
084800     PERFORM 12000-0000-CONVERT-TO-DATE
084900     MOVE LS-V1DATA       TO O-DATE
085000
085100     CONTINUE.
085200 7000-0199-END.
085300     EXIT.
085400
085500 7000-0200-ACTUAL-DECR-MO.
085600* --------------------------------------------------- *
085700* COMPUTE NEW DATE GIVEN DATE AND MONTH DECREMENT
085800*         (365/366)
085900* --------------------------------------------------- *
086000     MOVE I-DTTM-A        TO LS-V1DATA
086100     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
086200     PERFORM 11000-0000-CONVERT-TO-DAYS
086300
086400     SET LS-FORMAT-YYYYMMDD TO TRUE
086500     PERFORM 12000-0000-CONVERT-TO-DATE
086600     MOVE LS-V1DATA (1:4) TO LS-4BYTES
086700     MOVE LS-V1DATA (5:2) TO LS-2BYTES
086800     PERFORM I-DATE-INCR-DECR TIMES
086900       IF LS-4BYTES (3:2) = ZERO
087000         DIVIDE LS-4BYTES BY 400 GIVING LS-PDEC1
087100              REMAINDER LS-PDEC2
087200         IF LS-PDEC2 = 0
087300           SUBTRACT WS-MONTH-DAYS-366 (LS-2BYTES) FROM LS-FWORD
087400         ELSE
087500           SUBTRACT WS-MONTH-DAYS-365 (LS-2BYTES) FROM LS-FWORD
087600         END-IF
087700       ELSE
087800         DIVIDE LS-4BYTES BY 4 GIVING LS-PDEC1
087900              REMAINDER LS-PDEC2
088000         IF LS-PDEC2 = 0
088100           SUBTRACT WS-MONTH-DAYS-366 (LS-2BYTES) FROM LS-FWORD
088200         ELSE
088300           SUBTRACT WS-MONTH-DAYS-365 (LS-2BYTES) FROM LS-FWORD
088400         END-IF
088500       END-IF
088600       SUBTRACT +1 FROM LS-2BYTES
088700       IF LS-2BYTES < 1
088800         MOVE +12 TO LS-2BYTES
088900         SUBTRACT +1 FROM LS-4BYTES
089000       END-IF
089100     END-PERFORM
089200     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
089300     PERFORM 12000-0000-CONVERT-TO-DATE
089400     MOVE LS-V1DATA       TO O-DATE
089500
089600     CONTINUE.
089700 7000-0299-END.
089800     EXIT.
089900
090000 7000-0400-BUSINESS-DECR-DA.
090100* --------------------------------------------------- *
090200*
090300* --------------------------------------------------- *
090400*    CODE
090500
090600     CONTINUE.
090700 7000-0499-END.
090800     EXIT.
090900
091000 7000-0500-BUSINESS-DECR-MO.
091100* --------------------------------------------------- *
091200*
091300* --------------------------------------------------- *
091400*    CODE
091500
091600     CONTINUE.
091700 7000-0599-END.
091800     EXIT.
091900
092000 7000-0700-V360-DECR-DA.
092100* --------------------------------------------------- *
092200* COMPUTE NEW DATE GIVEN DATE AND DAY DECREMENT
092300*         (360)
092400* --------------------------------------------------- *
092500*    CODE
092600
092700     CONTINUE.
092800 7000-0799-END.
092900     EXIT.
093000
093100 7000-0800-V360-DECR-MO.
093200* --------------------------------------------------- *
093300* COMPUTE NEW DATE GIVEN DATE AND MONTH DECREMENT
093400*         (360)
093500* --------------------------------------------------- *
093600*    CODE
093700
093800     CONTINUE.
093900 7000-0899-END.
094000     EXIT.
094100
094200 7000-0999-END.
094300     EXIT.
094400
094500 11000-0000-CONVERT-TO-DAYS.
094600* ------------------------------------------------------------ *
094700*     INPUT: LS-DATE-FORMAT (DATE FORMAT CODE)
094800*            LS-VSTR1       (INPUT DATE)
094900*            LS-VSTR2       (INPUT DATE MASK)
095000*    OUTPUT: LS-FWORD       (OUTPUT DAYS)
095100*            LS-TIME        (OUTPUT TIME)
095200* ------------------------------------------------------------ *
095300     EVALUATE TRUE
095400       WHEN LS-FORMAT-YYDDD
095500         MOVE +5         TO LS-V1LEN LS-V2LEN
095600         MOVE 'YYDDD'    TO LS-V2DATA
095700         MOVE LS-V1DATA (6:6) TO LS-TIME
095800       WHEN LS-FORMAT-YYYYDDD
095900         MOVE +7         TO LS-V1LEN LS-V2LEN
096000         MOVE 'YYYYDDD'  TO LS-V2DATA
096100         MOVE LS-V1DATA (8:6) TO LS-TIME
096200       WHEN LS-FORMAT-DDDYY
096300         MOVE +5         TO LS-V1LEN LS-V2LEN
096400         MOVE 'DDDYY'    TO LS-V2DATA
096500         MOVE LS-V1DATA (6:6) TO LS-TIME
096600       WHEN LS-FORMAT-DDDYYYY
096700         MOVE +7         TO LS-V1LEN LS-V2LEN
096800         MOVE 'DDDYYYY'  TO LS-V2DATA
096900         MOVE LS-V1DATA (8:6) TO LS-TIME
097000       WHEN LS-FORMAT-YYMMDD
097100         MOVE +6         TO LS-V1LEN LS-V2LEN
097200         MOVE 'YYMMDD'   TO LS-V2DATA
097300         MOVE LS-V1DATA (7:6) TO LS-TIME
097400       WHEN LS-FORMAT-YYYYMMDD
097500         MOVE +8         TO LS-V1LEN LS-V2LEN
097600         MOVE 'YYYYMMDD' TO LS-V2DATA
097700         MOVE LS-V1DATA (9:6) TO LS-TIME
097800       WHEN LS-FORMAT-MMDDYY
097900         MOVE +6         TO LS-V1LEN LS-V2LEN
098000         MOVE 'MMDDYY'   TO LS-V2DATA
098100         MOVE LS-V1DATA (7:6) TO LS-TIME
098200       WHEN LS-FORMAT-MMDDYYYY
098300         MOVE +8         TO LS-V1LEN LS-V2LEN
098400         MOVE 'MMDDYYYY' TO LS-V2DATA
098500         MOVE LS-V1DATA (9:6) TO LS-TIME
098600       WHEN LS-FORMAT-DDMMYY
098700         MOVE +6         TO LS-V1LEN LS-V2LEN
098800         MOVE 'DDMMYY'   TO LS-V2DATA
098900         MOVE LS-V1DATA (7:6) TO LS-TIME
099000       WHEN LS-FORMAT-DDMMYYYY
099100         MOVE +8         TO LS-V1LEN LS-V2LEN
099200         MOVE 'DDMMYYYY' TO LS-V2DATA
099300         MOVE LS-V1DATA (9:6) TO LS-TIME
099400       WHEN OTHER
099500         PERFORM 80105-0003-TEXT
099600              THRU 89000-0999-END
099700         DISPLAY WS-PGMID
099800              ' INVALID DATE FORMAT '
099900              LS-DATE-FORMAT
100000     END-EVALUATE
100100     CALL 'CEEDAYS'
100200          USING LS-VSTR1
100300                LS-VSTR2
100400                LS-FWORD
100500                OMITTED
100600     IF LS-TIME = SPACE
100700       MOVE ZERO TO LS-TIME
100800     END-IF
100900     IF LS-TIME NOT NUMERIC
101000       IF LS-TIME (5:2) NOT NUMERIC
101100         MOVE ZERO TO LS-TIME (5:2)
101200       END-IF
101300       IF LS-TIME (1:4) NOT NUMERIC
101400         MOVE ZERO TO LS-TIME (1:4)
101500       END-IF
101600     END-IF
101700
101800     CONTINUE.
101900 11000-0999-END.
102000     EXIT.
102100
102200 12000-0000-CONVERT-TO-DATE.
102300* ------------------------------------------------------------ *
102400*     INPUT: LS-DATE-FORMAT (DATE FORMAT CODE)
102500*            LS-FWORD       (INPUT DAYS)
102600*    OUTPUT: LS-VSTR1       (OUTPUT DATE)
102700*            LS-VSTR2       (OUTPUT DATE MASK)
102800* ------------------------------------------------------------ *
102900     EVALUATE TRUE
103000       WHEN LS-FORMAT-YYDDD
103100         MOVE +5         TO LS-V1LEN LS-V2LEN
103200         MOVE 'YYDDD'    TO LS-V2DATA
103300       WHEN LS-FORMAT-YYYYDDD
103400         MOVE +7         TO LS-V1LEN LS-V2LEN
103500         MOVE 'YYYYDDD'  TO LS-V2DATA
103600       WHEN LS-FORMAT-DDDYY
103700         MOVE +5         TO LS-V1LEN LS-V2LEN
103800         MOVE 'DDDYY'    TO LS-V2DATA
103900       WHEN LS-FORMAT-DDDYYYY
104000         MOVE +7         TO LS-V1LEN LS-V2LEN
104100         MOVE 'DDDYYYY'  TO LS-V2DATA
104200       WHEN LS-FORMAT-YYMMDD
104300         MOVE +6         TO LS-V1LEN LS-V2LEN
104400         MOVE 'YYMMDD'   TO LS-V2DATA
104500       WHEN LS-FORMAT-YYYYMMDD
104600         MOVE +8         TO LS-V1LEN LS-V2LEN
104700         MOVE 'YYYYMMDD' TO LS-V2DATA
104800       WHEN LS-FORMAT-MMDDYY
104900         MOVE +6         TO LS-V1LEN LS-V2LEN
105000         MOVE 'MMDDYY'   TO LS-V2DATA
105100       WHEN LS-FORMAT-MMDDYYYY
105200         MOVE +8         TO LS-V1LEN LS-V2LEN
105300         MOVE 'MMDDYYYY' TO LS-V2DATA
105400       WHEN LS-FORMAT-DDMMYY
105500         MOVE +6         TO LS-V1LEN LS-V2LEN
105600         MOVE 'DDMMYY'   TO LS-V2DATA
105700       WHEN LS-FORMAT-DDMMYYYY
105800         MOVE +8         TO LS-V1LEN LS-V2LEN
105900         MOVE 'DDMMYYYY' TO LS-V2DATA
106000       WHEN OTHER
106100         PERFORM 80105-0003-TEXT
106200              THRU 89000-0999-END
106300         DISPLAY WS-PGMID
106400              ' INVALID DATE FORMAT '
106500              LS-DATE-FORMAT
106600     END-EVALUATE
106700     CALL 'CEEDATE'
106800          USING LS-FWORD
106900                LS-VSTR2
107000                LS-V1DATA
107100                OMITTED
107200
107300     CONTINUE.
107400 12000-0999-END.
107500     EXIT.
107600
107700* ------------------------------------------------------------ *
107800* ALL ERROR MESSAGE PROCESSING FOLLOWS
107900* ------------------------------------------------------------ *
108000
108100 80101-0001-TEXT.
108200* ------------------------------------------------------------ *
108300* 0101: V1 V2 V3 ACTION V4 IS INVALID
108400* ------------------------------------------------------------ *
108500     MOVE ZERO TO AS5MSGRB-ISI (1)
108600     SET ASU035_0002 (1) TO TRUE
108700
108800     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
108900     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
109000     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
109100     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
109200     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
109300     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
109400     MOVE I-DATE-ACTION  TO LS-4BYTES
109500     MOVE +4             TO AS5MSGRB-ISI-VLEN (1 4)
109600     MOVE LS-4BYTES      TO AS5MSGRB-ISI-VTXT (1 4)
109700
109800     CONTINUE.
109900 80102-0001-TEXT.
110000* ------------------------------------------------------------ *
110100* 0102: V1 V2 V3 VALID ACTIONS ARE V7
110200* ------------------------------------------------------------ *
110300     MOVE ZERO TO AS5MSGRB-ISI (2)
110400     SET ASU036 (2)      TO TRUE
110500
110600     MOVE +8             TO AS5MSGRB-ISI-VLEN (2 1)
110700     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (2 1)
110800     MOVE +11            TO AS5MSGRB-ISI-VLEN (2 2)
110900     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (2 2)
111000     MOVE +8             TO AS5MSGRB-ISI-VLEN (2 3)
111100     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (2 3)
111200     MOVE +5             TO AS5MSGRB-ISI-VLEN (2 7)
111300     MOVE '2,5:9'        TO AS5MSGRB-ISI-VTXT (2 7)
111400
111500     GO TO 88000-0000-MSG
111600
111700     CONTINUE.
111800 80103-0001-TEXT.
111900* ------------------------------------------------------------ *
112000* 0103: V1 V2 V3 ACTION V4 IS NOT SUPPORTED
112100* ------------------------------------------------------------ *
112200     MOVE ZERO TO AS5MSGRB-ISI (1)
112300     SET ASU037_0001 (1) TO TRUE
112400
112500     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
112600     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
112700     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
112800     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
112900     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
113000     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
113100     MOVE I-DATE-ACTION  TO LS-4BYTES
113200     MOVE +4             TO AS5MSGRB-ISI-VLEN (1 4)
113300     MOVE LS-4BYTES      TO AS5MSGRB-ISI-VTXT (1 4)
113400
113500     CONTINUE.
113600 80104-0001-TEXT.
113700* ------------------------------------------------------------ *
113800* 0104: V1 V2 V3 SUPPORTED ACTIONS ARE V7
113900* ------------------------------------------------------------ *
114000     MOVE ZERO TO AS5MSGRB-ISI (2)
114100     SET ASU038 (2)      TO TRUE
114200
114300     MOVE +8             TO AS5MSGRB-ISI-VLEN (2 1)
114400     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (2 1)
114500     MOVE +11            TO AS5MSGRB-ISI-VLEN (2 2)
114600     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (2 2)
114700     MOVE +8             TO AS5MSGRB-ISI-VLEN (2 3)
114800     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (2 3)
114900     MOVE +5             TO AS5MSGRB-ISI-VLEN (2 7)
115000     MOVE '2,5:7'        TO AS5MSGRB-ISI-VTXT (2 7)
115100
115200     GO TO 88000-0000-MSG
115300
115400     CONTINUE.
115500 80105-0001-TEXT.
115600* ------------------------------------------------------------ *
115700* 0105: V1 V2 V3 ARGUMENT (V5) IS INVALID
115800* ------------------------------------------------------------ *
115900     MOVE ZERO TO AS5MSGRB-ISI (1)
116000     SET ASU039_0002 (1) TO TRUE
116100
116200     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
116300     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
116400     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
116500     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
116600     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
116700     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
116800     MOVE +23            TO AS5MSGRB-ISI-VLEN (1 5)
116900     MOVE '2-CALENDAR & FIELD TYPE'
117000                         TO AS5MSGRB-ISI-VTXT (1 5)
117100
117200     GO TO 88000-0000-MSG
117300
117400     CONTINUE.
117500 80105-0002-TEXT.
117600* ------------------------------------------------------------ *
117700* 0105: V1 V2 V3 ARGUMENT (V5) IS INVALID
117800* ------------------------------------------------------------ *
117900     MOVE ZERO TO AS5MSGRB-ISI (1)
118000     SET ASU039_0002 (1) TO TRUE
118100
118200     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
118300     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
118400     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
118500     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
118600     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
118700     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
118800     MOVE +14            TO AS5MSGRB-ISI-VLEN (1 5)
118900     MOVE '2-INCLUDE TYPE'
119000                         TO AS5MSGRB-ISI-VTXT (1 5)
119100
119200     GO TO 88000-0000-MSG
119300
119400     CONTINUE.
119500 80105-0003-TEXT.
119600* ------------------------------------------------------------ *
119700* 0105: V1 V2 V3 ARGUMENT (V5) IS INVALID
119800* ------------------------------------------------------------ *
119900     MOVE ZERO TO AS5MSGRB-ISI (1)
120000     SET ASU039_0002 (1) TO TRUE
120100
120200     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
120300     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
120400     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
120500     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
120600     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
120700     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
120800     MOVE +13            TO AS5MSGRB-ISI-VLEN (1 5)
120900     MOVE '2-DATE FORMAT'
121000                         TO AS5MSGRB-ISI-VTXT (1 5)
121100
121200     GO TO 88000-0000-MSG
121300
121400     CONTINUE.
121500 88000-0000-MSG.
121600     DISPLAY WS-PGMID
121700          ' ABOUT TO CALL ASUMETXT'
121800
121900     MOVE 'ASUMETXT' TO ASU-MODULE
122000     CALL ASU-MODULE
122100          USING ASCA-COMMAREA
122200                AS5MSGRB-REQUEST-BLOCK
122300**              AS5FDBK-COND-AREA
122400                OMITTED
122500
122600     IF ADDRESS OF AS5FDBK-COND-AREA = NULL
122700       DISPLAY WS-PGMID
122800            ' ABOUT TO CALL CEESGL'
122900       CALL 'CEESGL'
123000            USING AS5FDBK-COND-AREA
123100                  OMITTED
123200     ELSE
123300       DISPLAY WS-PGMID
123400            ' ABOUT TO CALL CEEMSG'
123500       CALL 'CEEMSG'
123600            USING AS5FDBK-COND-AREA
123700                  LE-MSG-DEST
123800                  OMITTED
123900     END-IF
124000
124100     CONTINUE.
124200 89000-0999-END.
124300     EXIT.
./ ADD NAME=ASTMSG1B 0168-17363-19029-1600-01490-01324-00000-APLKS   29
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTMSG1B.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------------ *
000600* ARCHITECTURE SERVICES FACILITY
000700* UNIT TESTING
000800* COBOL ROUTINE
000900*
001000* PROGRAM ID: ASTMSG1B
001100*      TITLE: TEST LE MESSAGE SERVICES
001200*       DATE: 2015/03/03
001300*
001400*       DESC:
001500*
001600* ------------------------------------------------------------ *
001700* MAINTENANCE HISTORY:
001800*
001900* 2018/05/17 ADDED NEW MESSAGES TO AS LE MESSAGE TABLE
002000*
002100* ------------------------------------------------------------ *
002200     SKIP2
002300 DATA DIVISION.
002400     SKIP2
002500 WORKING-STORAGE SECTION.
002600 01  FILLER.
002700     03  WS-EYE-CATCHER PIC X(25)
002800              VALUE "BUZZARD CREEK TECH, INC. ".
002900     03  WS-PGMID       PIC X(08) VALUE "ASTMSG1B".
003000
003100 01  WS-LAST-FDBK         PIC X(12) VALUE LOW-VALUE.
003200 01  WS-DATE-PATTERN.
003300     03  FILLER           PIC S9(4) BINARY VALUE 10.
003400     03  FILLER           PIC X(10) VALUE "MM/DD/YYYY".
003500 01  WS-DATE-TIME-PATTERN.
003600     03  FILLER           PIC S9(4) BINARY VALUE 24.
003700     03  FILLER           PIC X(24)
003800     VALUE "WWW, MM/DD/YYYY HH:MI AP".
003900 01  WS-DAY-VALUES.
004000     03  FILLER           PIC X(09) VALUE "SUNDAY".
004100     03  FILLER           PIC X(09) VALUE "MONDAY".
004200     03  FILLER           PIC X(09) VALUE "TUESDAY".
004300     03  FILLER           PIC X(09) VALUE "WEDNESDAY".
004400     03  FILLER           PIC X(09) VALUE "THURSDAY".
004500     03  FILLER           PIC X(09) VALUE "FRIDAY".
004600     03  FILLER           PIC X(09) VALUE "SATURDAY".
004700 01  FILLER REDEFINES WS-DAY-VALUES.
004800     03  FILLER OCCURS 7 TIMES.
004900         05  WS-DOW-TITLE PIC X(09).
005000     SKIP1
005100     COPY AS5ENVCA.
005200     SKIP1
005300     COPY AS5FDBK.
005400     SKIP2
005500 LOCAL-STORAGE SECTION.
005600 01  FILLER.
005700     03  LS-ASMODULE         PIC X(08).
005800     03  LS-ASCA-PTR         POINTER.
005900     03  LS-LEFUNCT          PIC S9(9) BINARY SYNC.
006000     03  LS-LEMSGDEST        PIC S9(9) BINARY SYNC.
006100     03  LS-LEISIVAR         PIC S9(9) BINARY SYNC.
006200     03  LS-SYS-SUBSYS-MASK  PIC  9(9) BINARY SYNC.
006300     03  LS-LEENV-MASK       PIC  9(9) BINARY SYNC.
006400     03  LS-LEMBRID-MASK     PIC  9(9) BINARY SYNC.
006500     03  LS-LEGPID           PIC  9(9) BINARY SYNC.
006600     03  FILLER REDEFINES LS-LEGPID.
006700         05  LS-LEGPID-BYTE  PIC  X(1) OCCURS 4.
006800
006900     03  LS-BIT-NBR          PIC S9(9) BINARY SYNC.
007000     03  LS-BIT-RSLT         PIC S9(9) BINARY SYNC.
007100
007200     03  LS-WORK             PIC  9(9) BINARY SYNC.
007300     03  FILLER REDEFINES LS-WORK.
007400         05  FILLER          PIC  X(3).
007500         05  LS-WORK-4       PIC  X(1).
007600     03  LS-WORK-UNPK-1      PIC  Z99.
007700     03  LS-WORK-UNPK-2      PIC  Z99.
007800     03  LS-WORK-UNPK-3      PIC  Z99.
007900     03  LS-WORK-UNPK-4      PIC  Z99.
008000     03  LS-VSTRING          PIC  X(80).
008100     SKIP1
008200     COPY AS5DMPRB.
008300     SKIP1
008400     COPY AS5MSGRB.
008500     SKIP2
008600 LINKAGE SECTION.
008700     COPY AS5CA.
008800     EJECT
008900 PROCEDURE DIVISION USING
009000     ASCA-COMMAREA.
009100     SKIP2
009200     CONTINUE.
009300 0100-00-MAINLINE.
009400     DISPLAY WS-PGMID
009500          " Testing ASU messages"
009600     SKIP2
009700*    * ------------------------------------------------------- *
009800*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
009900*    * ------------------------------------------------------- *
010000
010100     SET LS-ASCA-PTR TO NULL
010200     MOVE "ASU3I01B" TO LS-ASMODULE
010300     CALL LS-ASMODULE
010400          USING LS-ASCA-PTR
010500**              AS5FDBK-COND-AREA
010600                OMITTED
010700
010800     IF LS-ASCA-PTR = NULL
010900       DISPLAY WS-PGMID
011000            " ASU3I01B failed to create the ASCA"
011100       GOBACK
011200     END-IF
011300
011400     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
011500     MOVE +2 TO LS-LEMSGDEST
011600     DISPLAY " "
011700
011800*    DUMP AS5CA COMMUNICATION AREA
011900     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
012000     MOVE +1 TO AS5DMPRB-NUMBER
012100     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
012200     MOVE "ASUMDHEX" TO LS-ASMODULE
012300     CALL LS-ASMODULE
012400          USING ASCA-COMMAREA
012500                AS5DMPRB-REQUEST-BLOCK
012600                ASCA-COMMAREA
012700**              AS5FDBK-COND-AREA
012800                OMITTED
012900
013000*    QUERY LE ENCLAVE INFORMATION
013100     DISPLAY " "
013200     CALL 'CEE3INF'
013300          USING LS-SYS-SUBSYS-MASK
013400                LS-LEENV-MASK
013500                LS-LEMBRID-MASK
013600                LS-LEGPID
013700**              AS5FDBK-COND-AREA
013800                OMITTED
013900
014000*    TEST BIT SETTINGS
014100     MOVE ZERO TO LS-BIT-RSLT
014200     PERFORM
014300          VARYING LS-BIT-NBR FROM +0 BY +1
014400          UNTIL LS-BIT-NBR > +31
014500       CALL 'CEESITST'
014600            USING LS-SYS-SUBSYS-MASK
014700                  LS-BIT-NBR
014800                  OMITTED
014900                  LS-BIT-RSLT
015000       IF LS-BIT-NBR = (31 - 0) AND LS-BIT-RSLT = +1
015100         DISPLAY WS-PGMID
015200              " EXECUTING IN A CICS ENVIRONMENT"
015300       END-IF
015400       IF LS-BIT-NBR = (31 - 1) AND LS-BIT-RSLT = +1
015500         DISPLAY WS-PGMID
015600              " EXECUTING IN A CICS_PIPI ENVIRONMENT"
015700       END-IF
015800       IF LS-BIT-NBR = (31 - 4) AND LS-BIT-RSLT = +1
015900         DISPLAY WS-PGMID
016000              " EXECUTING IN A TSO ENVIRONMENT"
016100       END-IF
016200       IF LS-BIT-NBR = (31 - 5) AND LS-BIT-RSLT = +1
016300         DISPLAY WS-PGMID
016400              " EXECUTING IN A BATCH ENVIRONMENT"
016500       END-IF
016600       IF LS-BIT-NBR = (31 - 6) AND LS-BIT-RSLT = +1
016700         DISPLAY WS-PGMID
016800              " EXECUTING IN A z/OS UNIX ENVIRONMENT"
016900       END-IF
017000       IF LS-BIT-NBR = (31 - 29) AND LS-BIT-RSLT = +1
017100         DISPLAY WS-PGMID
017200              " EXECUTING ON z/VSE"
017300       END-IF
017400       IF LS-BIT-NBR = (31 - 30) AND LS-BIT-RSLT = +1
017500         DISPLAY WS-PGMID
017600              " EXECUTING ON z/ZOS"
017700       END-IF
017800     END-PERFORM
017900
018000*    TEST BIT SETTINGS
018100     MOVE ZERO TO LS-BIT-RSLT
018200     PERFORM
018300          VARYING LS-BIT-NBR FROM +0 BY +1
018400          UNTIL LS-BIT-NBR > +31
018500       CALL 'CEESITST'
018600            USING LS-LEENV-MASK
018700                  LS-BIT-NBR
018800                  OMITTED
018900                  LS-BIT-RSLT
019000       IF LS-BIT-NBR = (31 - 0) AND LS-BIT-RSLT = +1
019100         DISPLAY WS-PGMID
019200              " EXECUTING IN A PIPI ENVIRONMENT"
019300       END-IF
019400       IF LS-BIT-NBR = (31 - 1) AND LS-BIT-RSLT = +1
019500         DISPLAY WS-PGMID
019600              " EXECUTING IN A PIPI-MAIN ENVIRONMENT"
019700       END-IF
019800       IF LS-BIT-NBR = (31 - 2) AND LS-BIT-RSLT = +1
019900         DISPLAY WS-PGMID
020000              " EXECUTING IN A PIPI-SUB ENVIRONMENT"
020100       END-IF
020200       IF LS-BIT-NBR = (31 - 3) AND LS-BIT-RSLT = +1
020300         DISPLAY WS-PGMID
020400              " EXECUTING IN A PIPI-SUBDP ENVIRONMENT"
020500       END-IF
020600       IF LS-BIT-NBR = (31 - 4) AND LS-BIT-RSLT = +1
020700         DISPLAY WS-PGMID
020800              " EXECUTING IN A PICI ENVIRONMENT"
020900       END-IF
021000       IF LS-BIT-NBR = (31 - 5) AND LS-BIT-RSLT = +1
021100         DISPLAY WS-PGMID
021200              " EXECUTING IN A NESTED ENCLAVE"
021300       END-IF
021400       IF LS-BIT-NBR = (31 - 6) AND LS-BIT-RSLT = +1
021500         DISPLAY WS-PGMID
021600              " LRR IS ACTIVE IN CURRENT ENCLAVE"
021700       END-IF
021800       IF LS-BIT-NBR = (31 - 7) AND LS-BIT-RSLT = +1
021900         DISPLAY WS-PGMID
022000              " RUNTIME REUSE IS ACTIVE"
022100       END-IF
022200       IF LS-BIT-NBR = (31 - 8) AND LS-BIT-RSLT = +1
022300         DISPLAY WS-PGMID
022400              " XPLINK(ON) IS IN EFFECT"
022500       END-IF
022600       IF LS-BIT-NBR = (31 - 9) AND LS-BIT-RSLT = +1
022700         DISPLAY WS-PGMID
022800              " POSIX(ON) RTO IS IN EFFECT"
022900       END-IF
023000       IF LS-BIT-NBR = (31 - 10) AND LS-BIT-RSLT = +1
023100         DISPLAY WS-PGMID
023200              " PTHREAD > 0"
023300       END-IF
023400       IF LS-BIT-NBR = (31 - 11) AND LS-BIT-RSLT = +1
023500         DISPLAY WS-PGMID
023600              " EXECUTING ON THE IPT"
023700       END-IF
023800       IF LS-BIT-NBR = (31 - 12) AND LS-BIT-RSLT = +1
023900         DISPLAY WS-PGMID
024000              " MULTITHREADED FORK IS IN EFFECT"
024100       END-IF
024200       IF LS-BIT-NBR = (31 - 13)
024300         IF LS-BIT-RSLT = +1
024400           DISPLAY WS-PGMID
024500                " AMODE 31"
024600         ELSE
024700           DISPLAY WS-PGMID
024800                " AMODE 24"
024900         END-IF
025000       END-IF
025100       IF LS-BIT-NBR = (31 - 15) AND LS-BIT-RSLT = +1
025200         DISPLAY WS-PGMID
025300              " EXECUTING IN A PIPI-MAINDP ENVIRONMENT"
025400       END-IF
025500     END-PERFORM
025600
025700*    TEST BIT SETTINGS
025800     MOVE ZERO TO LS-BIT-RSLT
025900     PERFORM
026000          VARYING LS-BIT-NBR FROM +0 BY +1
026100          UNTIL LS-BIT-NBR > +31
026200       CALL 'CEESITST'
026300            USING LS-LEMBRID-MASK
026400                  LS-BIT-NBR
026500                  OMITTED
026600                  LS-BIT-RSLT
026700       IF LS-BIT-NBR = (31 - 3) AND LS-BIT-RSLT = +1
026800         DISPLAY WS-PGMID
026900              " MEMBER LANGUAGE IS C/C++"
027000       END-IF
027100       IF LS-BIT-NBR = (31 - 5) AND LS-BIT-RSLT = +1
027200         DISPLAY WS-PGMID
027300              " MEMBER LANGAUGE IS COBOL"
027400       END-IF
027500       IF LS-BIT-NBR = (31 - 7) AND LS-BIT-RSLT = +1
027600         DISPLAY WS-PGMID
027700              " MEMBER LANGUAGE IS FORTRAN"
027800       END-IF
027900       IF LS-BIT-NBR = (31 - 10) AND LS-BIT-RSLT = +1
028000         DISPLAY WS-PGMID
028100              " MEMBER LANGUAGE IS PL/I"
028200       END-IF
028300       IF LS-BIT-NBR = (31 - 11) AND LS-BIT-RSLT = +1
028400         DISPLAY WS-PGMID
028500              " MEMBER LANGUAGE IS ENTERPRISE PL/I"
028600       END-IF
028700     END-PERFORM
028800
028900*    UNPACK PRODUCT VRM
029000     MOVE ZERO TO LS-WORK
029100     MOVE LS-LEGPID-BYTE (1) TO LS-WORK-4
029200     MOVE LS-WORK   TO LS-WORK-UNPK-1
029300     MOVE LS-LEGPID-BYTE (2) TO LS-WORK-4
029400     MOVE LS-WORK   TO LS-WORK-UNPK-2
029500     MOVE LS-LEGPID-BYTE (3) TO LS-WORK-4
029600     MOVE LS-WORK   TO LS-WORK-UNPK-3
029700     MOVE LS-LEGPID-BYTE (4) TO LS-WORK-4
029800     MOVE LS-WORK   TO LS-WORK-UNPK-4
029900     DISPLAY WS-PGMID
030000          " LE VERSION INFO PP/VV/RR/MM: "
030100          LS-WORK-UNPK-1 (2:2) "/"
030200          LS-WORK-UNPK-2 (2:2) "/"
030300          LS-WORK-UNPK-3 (2:2) "/"
030400          LS-WORK-UNPK-4 (2:2)
030500
030600     DISPLAY " "
030700*    QUERY UTC/GMT
030800***  CALL 'CEEGMT'
030900***       USING ASCA-GMT-LDAYS
031000***             ASCA-GMT-LSEC
031100**              AS5FDBK-COND-AREA
031200***             OMITTED
031300     MOVE SPACE TO LS-VSTRING
031400     CALL 'CEEDATE'
031500          USING ASCA-GMT-LDAYS
031600                WS-DATE-PATTERN
031700                LS-VSTRING
031800**              AS5FDBK-COND-AREA
031900                OMITTED
032000     DISPLAY WS-PGMID
032100          " UTC/GMT DATE: "
032200          LS-VSTRING
032300     MOVE SPACE TO LS-VSTRING
032400     CALL 'CEEDATM'
032500          USING ASCA-GMT-LSEC
032600                WS-DATE-TIME-PATTERN
032700                LS-VSTRING
032800**              AS5FDBK-COND-AREA
032900                OMITTED
033000     DISPLAY WS-PGMID
033100          " UTC/GMT TIMESTAMP: "
033200          LS-VSTRING
033300
033400*    QUERY LOCAL DATE/TIME
033500***  CALL 'CEELOCT'
033600***       USING ASCA-CUR-LDAYS
033700***             ASCA-CUR-LSEC
033800***             ASCA-CUR-DTTM
033900**              AS5FDBK-COND-AREA
034000***             OMITTED
034100     DISPLAY WS-PGMID
034200          " LOCAL DATE/TIME YYYYMMDDHHMISS999: "
034300          ASCA-CUR-DTTM
034400     MOVE SPACE TO LS-VSTRING
034500     CALL 'CEEDATE'
034600          USING ASCA-CUR-LDAYS
034700                WS-DATE-PATTERN
034800                LS-VSTRING
034900**              AS5FDBK-COND-AREA
035000                OMITTED
035100     DISPLAY WS-PGMID
035200          " LOCAL DATE: "
035300          LS-VSTRING
035400     MOVE SPACE TO LS-VSTRING
035500     CALL 'CEEDATM'
035600          USING ASCA-CUR-LSEC
035700                WS-DATE-TIME-PATTERN
035800                LS-VSTRING
035900**              AS5FDBK-COND-AREA
036000                           OMITTED
036100     DISPLAY WS-PGMID
036200          " LOCAL TIMESTAMP: "
036300          LS-VSTRING
036400
036500*    QUERY DAY OF WEEK NUMBER (1:7) (SUN:SAT)
036600***  CALL 'CEEDYWK'
036700***       USING ASCA-CUR-LDAYS
036800***             ASCA-CUR-DOWNBR
036900**              AS5FDBK-COND-AREA
037000***             OMITTED
037100     MOVE ASCA-CUR-DOWNBR TO LS-WORK-UNPK-1
037200     DISPLAY WS-PGMID
037300          " DAY OF WEEK NUMBER: "
037400          LS-WORK-UNPK-1
037500          " "
037600          WS-DOW-TITLE (ASCA-CUR-DOWNBR)
037700
037800*    QUERY LE LANGUAGE
037900***  MOVE +2 TO LS-LEFUNCT
038000***  CALL 'CEE3LNG'
038100***       USING LS-LEFUNCT
038200***             ASCA-NATL-LANG
038300**              AS5FDBK-COND-AREA
038400***             OMITTED
038500     DISPLAY WS-PGMID
038600          " LANGUAGE: "
038700          ASCA-NATL-LANG
038800
038900*    QUERY LE COUNTRY CODE
039000***  MOVE +2 TO LS-LEFUNCT
039100***  CALL 'CEE3CTY'
039200***       USING LS-LEFUNCT
039300***             ASCA-CNTRY
039400**              AS5FDBK-COND-AREA
039500***             OMITTED
039600     DISPLAY WS-PGMID
039700          " COUNTRY CODE: "
039800          ASCA-CNTRY
039900
040000*    QUERY DECIMAL SEPARATOR
040100***  CALL 'CEE3MDS'
040200***       USING ASCA-CNTRY
040300***             ASCA-CNTRY-MDS
040400**              AS5FDBK-COND-AREA
040500***             OMITTED
040600     DISPLAY WS-PGMID
040700          " DECIMAL SEPARATOR: "
040800          ASCA-CNTRY-MDS
040900
041000*    QUERY THOUSANDS SEPARATOR
041100***  CALL 'CEE3MTS'
041200***       USING ASCA-CNTRY
041300***             ASCA-CNTRY-MTS
041400**              AS5FDBK-COND-AREA
041500***             OMITTED
041600     DISPLAY WS-PGMID
041700          " THOUSANDS SEPARATOR: "
041800          ASCA-CNTRY-MTS
041900
042000*    QUERY CURRENCY SYMBOL
042100***  CALL 'CEE3MC2'
042200***       USING ASCA-CNTRY
042300***             ASCA-CNTRY-MCS
042400***             ASCA-INTL-MCS
042500**              AS5FDBK-COND-AREA
042600***             OMITTED
042700     DISPLAY WS-PGMID
042800          " CURRENCY SYMBOL: "
042900          ASCA-CNTRY-MCS
043000          "  INTL: "
043100          ASCA-INTL-MCS
043200
043300*    QUERY TIME STAMP FORMAT
043400***  CALL 'CEEFMDT'
043500***       USING ASCA-CNTRY
043600***             ASCA-TS-FORMAT
043700**              AS5FDBK-COND-AREA
043800***             OMITTED
043900     DISPLAY WS-PGMID
044000          " TIMESTAMP FORMAT: "
044100          ASCA-TS-FORMAT
044200     DISPLAY WS-PGMID
044300          " TIMESTAMP LENGTH: "
044400          ASCA-TS-LEN
044500     DISPLAY " "
044600     SKIP2
044700*    * ------------------------------------------------------- *
044800*    * CALL ASU3QEIB TO COLLECT ALL OF THE ENVIRONMENT DATA
044900*    * ------------------------------------------------------- *
045000
045100     MOVE LOW-VALUE TO AS5ENVCA-COMMAREA
045200     INITIALIZE AS5ENVCA-COMMAREA
045300*    QUERY ENVIRONMENT INFORMATION
045400     MOVE WS-PGMID TO AS5ENVCA-CSV-IPGM
045500     MOVE +2 TO LS-LEFUNCT
045600     MOVE "ASU3QEIB" TO LS-ASMODULE
045700     CALL LS-ASMODULE
045800          USING ASCA-COMMAREA
045900                LS-LEFUNCT
046000                AS5ENVCA-COMMAREA
046100**              AS5FDBK-COND-AREA
046200                OMITTED
046300
046400*    DUMP ASU3QEIB COMMUNICATION AREA
046500     MOVE LENGTH OF AS5ENVCA-COMMAREA TO AS5DMPRB-DATA-LEN
046600     MOVE +2 TO AS5DMPRB-NUMBER
046700     MOVE 'ENVIRONMENT INFORMATION' TO AS5DMPRB-TITLE
046800     MOVE "ASUMDHEX" TO LS-ASMODULE
046900     CALL LS-ASMODULE
047000          USING ASCA-COMMAREA
047100                AS5DMPRB-REQUEST-BLOCK
047200                AS5ENVCA-COMMAREA
047300**              AS5FDBK-COND-AREA
047400                OMITTED
047500
047600     DISPLAY " "
047700     SKIP2
047800*    * ------------------------------------------------------- *
047900*    * CALL ASU3QEIB TO PRINT ALL OF THE ENVIRONMENT DATA
048000*    * ------------------------------------------------------- *
048100
048200*    PRINT ENVIRONMENT INFORMATION
048300     MOVE +5 TO LS-LEFUNCT
048400     MOVE "ASU3QEIB" TO LS-ASMODULE
048500     CALL LS-ASMODULE
048600          USING ASCA-COMMAREA
048700                LS-LEFUNCT
048800                AS5ENVCA-COMMAREA
048900**              AS5FDBK-COND-AREA
049000                OMITTED
049100     SKIP2
049200*    * ------------------------------------------------------- *
049300*    * PRODUCE ALL OF THE ASU DEFINED MESSAGES
049400*    * ------------------------------------------------------- *
049500
049600     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
049700                            AS5MSGRB-ISI-VLEN (2 1)
049800                            AS5MSGRB-ISI-VLEN (3 1)
049900     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
050000                            AS5MSGRB-ISI-VTXT (2 1)
050100                            AS5MSGRB-ISI-VTXT (3 1)
050200
050300     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
050400                            AS5MSGRB-ISI-VLEN (2 2)
050500                            AS5MSGRB-ISI-VLEN (3 2)
050600     MOVE "SUB-ROUTINE"  TO AS5MSGRB-ISI-VTXT (1 2)
050700                            AS5MSGRB-ISI-VTXT (2 2)
050800                            AS5MSGRB-ISI-VTXT (3 2)
050900
051000     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
051100                            AS5MSGRB-ISI-VLEN (2 3)
051200                            AS5MSGRB-ISI-VLEN (3 3)
051300     MOVE "ASUDAPND"     TO AS5MSGRB-ISI-VTXT (1 3)
051400                            AS5MSGRB-ISI-VTXT (2 3)
051500                            AS5MSGRB-ISI-VTXT (3 3)
051600
051700     MOVE +2             TO AS5MSGRB-ISI-VLEN (1 4)
051800     MOVE "00"           TO AS5MSGRB-ISI-VTXT (1 4)
051900
052000     MOVE +1             TO AS5MSGRB-ISI-VLEN (1 5)
052100     MOVE "3"            TO AS5MSGRB-ISI-VTXT (1 5)
052200
052300     MOVE +4             TO AS5MSGRB-ISI-VLEN (1 6)
052400     MOVE "1024"         TO AS5MSGRB-ISI-VTXT (1 6)
052500
052600     MOVE +4             TO AS5MSGRB-ISI-VLEN (1 7)
052700     MOVE "JUNK"         TO AS5MSGRB-ISI-VTXT (1 7)
052800
052900     MOVE +10            TO AS5MSGRB-ISI-VLEN (2 7)
053000     MOVE "5,7,8,9,10"   TO AS5MSGRB-ISI-VTXT (2 7)
053100
053200     MOVE +9             TO AS5MSGRB-ISI-VLEN (3 8)
053300     MOVE "MORE INFO"    TO AS5MSGRB-ISI-VTXT (3 8)
053400
053500     DISPLAY " "
053600
053700*    GO TO MESSAGE-0108.
053800*    GO TO MESSAGE-0109.
053900*    GO TO MESSAGE-0110.
054000*    GO TO MESSAGE-0111.
054100*    GO TO MESSAGE-0112.
054200*    GO TO MESSAGE-0113.
054300*    GO TO MESSAGE-0114.
054400*    GO TO MESSAGE-0115.
054500*    GO TO MESSAGE-0116.
054600*    GO TO MESSAGE-0117.
054700*    GO TO MESSAGE-0118.
054800*    GO TO MESSAGE-0119.
054900*    GO TO MESSAGE-0120.
055000*    GO TO MESSAGE-0121.
055100
055200*    0101 - VAR1:VAR2 VAR3 ACTION VAR4 IS INVALID
055300     SET ASU035_0001 (1) TO TRUE
055400     MOVE ZERO           TO AS5MSGRB-ISI (1)
055500
055600     MOVE +1             TO LS-LEISIVAR
055700     CALL 'CEECMI'
055800          USING AS5MSGRB-CTOKEN (1)
055900                LS-LEISIVAR
056000                AS5MSGRB-ISI-VSTR (1 1)
056100**              AS5FDBK-COND-AREA
056200                OMITTED
056300
056400     MOVE +2             TO LS-LEISIVAR
056500     CALL 'CEECMI'
056600          USING AS5MSGRB-CTOKEN (1)
056700                LS-LEISIVAR
056800                AS5MSGRB-ISI-VSTR (1 2)
056900**              AS5FDBK-COND-AREA
057000                OMITTED
057100
057200     MOVE +3             TO LS-LEISIVAR
057300     CALL 'CEECMI'
057400          USING AS5MSGRB-CTOKEN (1)
057500                LS-LEISIVAR
057600                AS5MSGRB-ISI-VSTR (1 3)
057700**              AS5FDBK-COND-AREA
057800                OMITTED
057900
058000     MOVE +4             TO LS-LEISIVAR
058100     CALL 'CEECMI'
058200          USING AS5MSGRB-CTOKEN (1)
058300                LS-LEISIVAR
058400                AS5MSGRB-ISI-VSTR (1 4)
058500**              AS5FDBK-COND-AREA
058600                OMITTED
058700
058800     CALL 'CEEMSG'
058900          USING AS5MSGRB-CTOKEN (1)
059000                LS-LEMSGDEST
059100**              AS5FDBK-COND-AREA
059200                OMITTED
059300
059400*    0102 - VAR1:VAR2 VAR3 VALID ACTIONS ARE: VAR7
059500     SET ASU036 (2)      TO TRUE
059600     MOVE ZERO           TO AS5MSGRB-ISI (2)
059700
059800     MOVE +1             TO LS-LEISIVAR
059900     CALL 'CEECMI'
060000          USING AS5MSGRB-CTOKEN (2)
060100                LS-LEISIVAR
060200                AS5MSGRB-ISI-VSTR (2 1)
060300**              AS5FDBK-COND-AREA
060400                OMITTED
060500
060600     MOVE +2             TO LS-LEISIVAR
060700     CALL 'CEECMI'
060800          USING AS5MSGRB-CTOKEN (2)
060900                LS-LEISIVAR
061000                AS5MSGRB-ISI-VSTR (2 2)
061100**              AS5FDBK-COND-AREA
061200                OMITTED
061300
061400     MOVE +3             TO LS-LEISIVAR
061500     CALL 'CEECMI'
061600          USING AS5MSGRB-CTOKEN (2)
061700                LS-LEISIVAR
061800                AS5MSGRB-ISI-VSTR (2 3)
061900**              AS5FDBK-COND-AREA
062000                OMITTED
062100
062200     MOVE +7             TO LS-LEISIVAR
062300     CALL 'CEECMI'
062400          USING AS5MSGRB-CTOKEN (2)
062500                LS-LEISIVAR
062600                AS5MSGRB-ISI-VSTR (2 7)
062700**              AS5FDBK-COND-AREA
062800                OMITTED
062900
063000     CALL 'CEEMSG'
063100          USING AS5MSGRB-CTOKEN (2)
063200                LS-LEMSGDEST
063300**              AS5FDBK-COND-AREA
063400                OMITTED
063500
063600*    0103 - VAR1:VAR2 VAR3 ACTION VAR4 IS NOT SUPPORTED
063700     SET ASU037_0001 (1) TO TRUE
063800     MOVE ZERO           TO AS5MSGRB-ISI (1)
063900
064000     MOVE +1             TO LS-LEISIVAR
064100     CALL 'CEECMI'
064200          USING AS5MSGRB-CTOKEN (1)
064300                LS-LEISIVAR
064400                AS5MSGRB-ISI-VSTR (1 1)
064500**              AS5FDBK-COND-AREA
064600                OMITTED
064700
064800     MOVE +2             TO LS-LEISIVAR
064900     CALL 'CEECMI'
065000          USING AS5MSGRB-CTOKEN (1)
065100                LS-LEISIVAR
065200                AS5MSGRB-ISI-VSTR (1 2)
065300**              AS5FDBK-COND-AREA
065400                OMITTED
065500
065600     MOVE +3             TO LS-LEISIVAR
065700     CALL 'CEECMI'
065800          USING AS5MSGRB-CTOKEN (1)
065900                LS-LEISIVAR
066000                AS5MSGRB-ISI-VSTR (1 3)
066100**              AS5FDBK-COND-AREA
066200                OMITTED
066300
066400     MOVE +4             TO LS-LEISIVAR
066500     CALL 'CEECMI'
066600          USING AS5MSGRB-CTOKEN (1)
066700                LS-LEISIVAR
066800                AS5MSGRB-ISI-VSTR (1 4)
066900**              AS5FDBK-COND-AREA
067000                OMITTED
067100
067200     CALL 'CEEMSG'
067300          USING AS5MSGRB-CTOKEN (1)
067400                LS-LEMSGDEST
067500**              AS5FDBK-COND-AREA
067600                OMITTED
067700
067800*    0104 - VAR1:VAR2 VAR3 SUPORTED ACTIONS ARE: VAR7
067900     SET ASU038 (2)      TO TRUE
068000     MOVE ZERO           TO AS5MSGRB-ISI (2)
068100
068200     MOVE +1             TO LS-LEISIVAR
068300     CALL 'CEECMI'
068400          USING AS5MSGRB-CTOKEN (2)
068500                LS-LEISIVAR
068600                AS5MSGRB-ISI-VSTR (2 1)
068700**              AS5FDBK-COND-AREA
068800                OMITTED
068900
069000     MOVE +2             TO LS-LEISIVAR
069100     CALL 'CEECMI'
069200          USING AS5MSGRB-CTOKEN (2)
069300                LS-LEISIVAR
069400                AS5MSGRB-ISI-VSTR (2 2)
069500**              AS5FDBK-COND-AREA
069600                OMITTED
069700
069800     MOVE +3             TO LS-LEISIVAR
069900     CALL 'CEECMI'
070000          USING AS5MSGRB-CTOKEN (2)
070100                LS-LEISIVAR
070200                AS5MSGRB-ISI-VSTR (2 3)
070300**              AS5FDBK-COND-AREA
070400                OMITTED
070500
070600     MOVE +7             TO LS-LEISIVAR
070700     CALL 'CEECMI'
070800          USING AS5MSGRB-CTOKEN (2)
070900                LS-LEISIVAR
071000                AS5MSGRB-ISI-VSTR (2 7)
071100**              AS5FDBK-COND-AREA
071200                OMITTED
071300
071400     CALL 'CEEMSG'
071500          USING AS5MSGRB-CTOKEN (2)
071600                LS-LEMSGDEST
071700**              AS5FDBK-COND-AREA
071800                OMITTED
071900
072000*    0105 VAR1:VAR2 VAR3 ARGUMENT (VAR5) IS INVALID
072100     SET ASU039_0001 (1) TO TRUE
072200     MOVE ZERO           TO AS5MSGRB-ISI (1)
072300
072400     MOVE +1             TO LS-LEISIVAR
072500     CALL 'CEECMI'
072600          USING AS5MSGRB-CTOKEN (1)
072700                LS-LEISIVAR
072800                AS5MSGRB-ISI-VSTR (1 1)
072900**              AS5FDBK-COND-AREA
073000                OMITTED
073100
073200     MOVE +2             TO LS-LEISIVAR
073300     CALL 'CEECMI'
073400          USING AS5MSGRB-CTOKEN (1)
073500                LS-LEISIVAR
073600                AS5MSGRB-ISI-VSTR (1 2)
073700**              AS5FDBK-COND-AREA
073800                OMITTED
073900
074000     MOVE +3             TO LS-LEISIVAR
074100     CALL 'CEECMI'
074200          USING AS5MSGRB-CTOKEN (1)
074300                LS-LEISIVAR
074400                AS5MSGRB-ISI-VSTR (1 3)
074500**              AS5FDBK-COND-AREA
074600                OMITTED
074700
074800     MOVE +5             TO LS-LEISIVAR
074900     CALL 'CEECMI'
075000          USING AS5MSGRB-CTOKEN (1)
075100                LS-LEISIVAR
075200                AS5MSGRB-ISI-VSTR (1 5)
075300**              AS5FDBK-COND-AREA
075400                OMITTED
075500
075600     CALL 'CEEMSG'
075700          USING AS5MSGRB-CTOKEN (1)
075800                LS-LEMSGDEST
075900**              AS5FDBK-COND-AREA
076000                OMITTED
076100
076200*    0106 VAR1:VAR2 VAR3 VALID ARGUMENT VALUES ARE: VAR7
076300     SET ASU03A (2)      TO TRUE
076400     MOVE ZERO           TO AS5MSGRB-ISI (2)
076500
076600     MOVE +1             TO LS-LEISIVAR
076700     CALL 'CEECMI'
076800          USING AS5MSGRB-CTOKEN (2)
076900                LS-LEISIVAR
077000                AS5MSGRB-ISI-VSTR (2 1)
077100**              AS5FDBK-COND-AREA
077200                OMITTED
077300
077400     MOVE +2             TO LS-LEISIVAR
077500     CALL 'CEECMI'
077600          USING AS5MSGRB-CTOKEN (2)
077700                LS-LEISIVAR
077800                AS5MSGRB-ISI-VSTR (2 2)
077900**              AS5FDBK-COND-AREA
078000                OMITTED
078100
078200     MOVE +3             TO LS-LEISIVAR
078300     CALL 'CEECMI'
078400          USING AS5MSGRB-CTOKEN (2)
078500                LS-LEISIVAR
078600                AS5MSGRB-ISI-VSTR (2 3)
078700**              AS5FDBK-COND-AREA
078800                OMITTED
078900
079000     MOVE +7             TO LS-LEISIVAR
079100     CALL 'CEECMI'
079200          USING AS5MSGRB-CTOKEN (2)
079300                LS-LEISIVAR
079400                AS5MSGRB-ISI-VSTR (2 7)
079500**              AS5FDBK-COND-AREA
079600                OMITTED
079700
079800     CALL 'CEEMSG'
079900          USING AS5MSGRB-CTOKEN (2)
080000                LS-LEMSGDEST
080100**              AS5FDBK-COND-AREA
080200                OMITTED
080300
080400*    0107 VAR1:VAR2 VAR3 FAILED WITH R15=VAR5 REASON=VAR6
080500     SET ASU03B_0001 (1) TO TRUE
080600     MOVE ZERO           TO AS5MSGRB-ISI (1)
080700
080800     MOVE +1             TO LS-LEISIVAR
080900     CALL 'CEECMI'
081000          USING AS5MSGRB-CTOKEN (1)
081100                LS-LEISIVAR
081200                AS5MSGRB-ISI-VSTR (1 1)
081300**              AS5FDBK-COND-AREA
081400                OMITTED
081500
081600     MOVE +2             TO LS-LEISIVAR
081700     CALL 'CEECMI'
081800          USING AS5MSGRB-CTOKEN (1)
081900                LS-LEISIVAR
082000                AS5MSGRB-ISI-VSTR (1 2)
082100**              AS5FDBK-COND-AREA
082200                OMITTED
082300
082400     MOVE +3             TO LS-LEISIVAR
082500     CALL 'CEECMI'
082600          USING AS5MSGRB-CTOKEN (1)
082700                LS-LEISIVAR
082800                AS5MSGRB-ISI-VSTR (1 3)
082900**              AS5FDBK-COND-AREA
083000                OMITTED
083100
083200     MOVE +5             TO LS-LEISIVAR
083300     CALL 'CEECMI'
083400          USING AS5MSGRB-CTOKEN (1)
083500                LS-LEISIVAR
083600                AS5MSGRB-ISI-VSTR (1 5)
083700**              AS5FDBK-COND-AREA
083800                OMITTED
083900
084000     MOVE +6             TO LS-LEISIVAR
084100     CALL 'CEECMI'
084200          USING AS5MSGRB-CTOKEN (1)
084300                LS-LEISIVAR
084400                AS5MSGRB-ISI-VSTR (1 6)
084500**              AS5FDBK-COND-AREA
084600                OMITTED
084700
084800     CALL 'CEEMSG'
084900          USING AS5MSGRB-CTOKEN (1)
085000                LS-LEMSGDEST
085100**              AS5FDBK-COND-AREA
085200                OMITTED
085300
085400     CONTINUE.
085500 MESSAGE-0108.
085600
085700*    0108 VAR1:VAR2 VAR3 CONTAINS INVALID DATA VAR7
085800     SET ASU03C_0001 (1) TO TRUE
085900     MOVE ZERO           TO AS5MSGRB-ISI (1)
086000
086100     MOVE +1             TO LS-LEISIVAR
086200     CALL 'CEECMI'
086300          USING AS5MSGRB-CTOKEN (1)
086400                LS-LEISIVAR
086500                AS5MSGRB-ISI-VSTR (1 1)
086600**              AS5FDBK-COND-AREA
086700                OMITTED
086800
086900     MOVE +2             TO LS-LEISIVAR
087000     CALL 'CEECMI'
087100          USING AS5MSGRB-CTOKEN (1)
087200                LS-LEISIVAR
087300                AS5MSGRB-ISI-VSTR (1 2)
087400**              AS5FDBK-COND-AREA
087500                OMITTED
087600
087700     MOVE +3             TO LS-LEISIVAR
087800     CALL 'CEECMI'
087900          USING AS5MSGRB-CTOKEN (1)
088000                LS-LEISIVAR
088100                AS5MSGRB-ISI-VSTR (1 3)
088200**              AS5FDBK-COND-AREA
088300                OMITTED
088400
088500     MOVE +7             TO LS-LEISIVAR
088600     CALL 'CEECMI'
088700          USING AS5MSGRB-CTOKEN (1)
088800                LS-LEISIVAR
088900                AS5MSGRB-ISI-VSTR (1 7)
089000**              AS5FDBK-COND-AREA
089100                OMITTED
089200
089300     CALL 'CEEMSG'
089400          USING AS5MSGRB-CTOKEN (1)
089500                LS-LEMSGDEST
089600**              AS5FDBK-COND-AREA
089700                OMITTED
089800
089900     CONTINUE.
090000 MESSAGE-0109.
090100
090200*    0109 VAR1:VAR2 VAR3 BRANCH INDEX (VAR5) IS INVALID
090300     SET ASU03D_0001 (1) TO TRUE
090400     MOVE ZERO           TO AS5MSGRB-ISI (1)
090500
090600     MOVE +1             TO LS-LEISIVAR
090700     CALL 'CEECMI'
090800          USING AS5MSGRB-CTOKEN (1)
090900                LS-LEISIVAR
091000                AS5MSGRB-ISI-VSTR (1 1)
091100**              AS5FDBK-COND-AREA
091200                OMITTED
091300
091400     MOVE +2             TO LS-LEISIVAR
091500     CALL 'CEECMI'
091600          USING AS5MSGRB-CTOKEN (1)
091700                LS-LEISIVAR
091800                AS5MSGRB-ISI-VSTR (1 2)
091900**              AS5FDBK-COND-AREA
092000                OMITTED
092100
092200     MOVE +3             TO LS-LEISIVAR
092300     CALL 'CEECMI'
092400          USING AS5MSGRB-CTOKEN (1)
092500                LS-LEISIVAR
092600                AS5MSGRB-ISI-VSTR (1 3)
092700**              AS5FDBK-COND-AREA
092800                OMITTED
092900
093000     MOVE +5             TO LS-LEISIVAR
093100     CALL 'CEECMI'
093200          USING AS5MSGRB-CTOKEN (1)
093300                LS-LEISIVAR
093400                AS5MSGRB-ISI-VSTR (1 5)
093500**              AS5FDBK-COND-AREA
093600                OMITTED
093700
093800     CALL 'CEEMSG'
093900          USING AS5MSGRB-CTOKEN (1)
094000                LS-LEMSGDEST
094100**              AS5FDBK-COND-AREA
094200                OMITTED
094300
094400     CONTINUE.
094500 MESSAGE-0110.
094600
094700*    0110 VAR1:VAR2 VAR3 VAR7 NOT FOUND
094800     SET ASU03E_0001 (1) TO TRUE
094900     MOVE ZERO           TO AS5MSGRB-ISI (1)
095000
095100     MOVE +1             TO LS-LEISIVAR
095200     CALL 'CEECMI'
095300          USING AS5MSGRB-CTOKEN (1)
095400                LS-LEISIVAR
095500                AS5MSGRB-ISI-VSTR (1 1)
095600**              AS5FDBK-COND-AREA
095700                OMITTED
095800
095900     MOVE +2             TO LS-LEISIVAR
096000     CALL 'CEECMI'
096100          USING AS5MSGRB-CTOKEN (1)
096200                LS-LEISIVAR
096300                AS5MSGRB-ISI-VSTR (1 2)
096400**              AS5FDBK-COND-AREA
096500                OMITTED
096600
096700     MOVE +3             TO LS-LEISIVAR
096800     CALL 'CEECMI'
096900          USING AS5MSGRB-CTOKEN (1)
097000                LS-LEISIVAR
097100                AS5MSGRB-ISI-VSTR (1 3)
097200**              AS5FDBK-COND-AREA
097300                OMITTED
097400
097500     MOVE +7             TO LS-LEISIVAR
097600     CALL 'CEECMI'
097700          USING AS5MSGRB-CTOKEN (1)
097800                LS-LEISIVAR
097900                AS5MSGRB-ISI-VSTR (1 7)
098000**              AS5FDBK-COND-AREA
098100                OMITTED
098200
098300     CALL 'CEEMSG'
098400          USING AS5MSGRB-CTOKEN (1)
098500                LS-LEMSGDEST
098600**              AS5FDBK-COND-AREA
098700                OMITTED
098800
098900     CONTINUE.
099000 MESSAGE-0111.
099100
099200*    0111 VAR1:VAR2 VAR3 ACTION VAR4 PREMATURELY
099300*          TERMINATED DUE TO DATA TRUNC
099400     SET ASU03F_0001 (1) TO TRUE
099500     MOVE ZERO           TO AS5MSGRB-ISI (1)
099600
099700     MOVE +1             TO LS-LEISIVAR
099800     CALL 'CEECMI'
099900          USING AS5MSGRB-CTOKEN (1)
100000                LS-LEISIVAR
100100                AS5MSGRB-ISI-VSTR (1 1)
100200**              AS5FDBK-COND-AREA
100300                OMITTED
100400
100500     MOVE +2             TO LS-LEISIVAR
100600     CALL 'CEECMI'
100700          USING AS5MSGRB-CTOKEN (1)
100800                LS-LEISIVAR
100900                AS5MSGRB-ISI-VSTR (1 2)
101000**              AS5FDBK-COND-AREA
101100                OMITTED
101200
101300     MOVE +3             TO LS-LEISIVAR
101400     CALL 'CEECMI'
101500          USING AS5MSGRB-CTOKEN (1)
101600                LS-LEISIVAR
101700                AS5MSGRB-ISI-VSTR (1 3)
101800**              AS5FDBK-COND-AREA
101900                OMITTED
102000
102100     MOVE +4             TO LS-LEISIVAR
102200     CALL 'CEECMI'
102300          USING AS5MSGRB-CTOKEN (1)
102400                LS-LEISIVAR
102500                AS5MSGRB-ISI-VSTR (1 4)
102600**              AS5FDBK-COND-AREA
102700                OMITTED
102800
102900     CALL 'CEEMSG'
103000          USING AS5MSGRB-CTOKEN (1)
103100                LS-LEMSGDEST
103200**              AS5FDBK-COND-AREA
103300                OMITTED
103400
103500     CONTINUE.
103600 MESSAGE-0112.
103700
103800*    0112 VAR1:VAR2 VAR3 IS NOT NUMERIC
103900     SET ASU03G_0001 (1) TO TRUE
104000     MOVE ZERO           TO AS5MSGRB-ISI (1)
104100
104200     MOVE +1             TO LS-LEISIVAR
104300     CALL 'CEECMI'
104400          USING AS5MSGRB-CTOKEN (1)
104500                LS-LEISIVAR
104600                AS5MSGRB-ISI-VSTR (1 1)
104700**              AS5FDBK-COND-AREA
104800                OMITTED
104900
105000     MOVE +2             TO LS-LEISIVAR
105100     CALL 'CEECMI'
105200          USING AS5MSGRB-CTOKEN (1)
105300                LS-LEISIVAR
105400                AS5MSGRB-ISI-VSTR (1 2)
105500**              AS5FDBK-COND-AREA
105600                OMITTED
105700
105800     MOVE +3             TO LS-LEISIVAR
105900     CALL 'CEECMI'
106000          USING AS5MSGRB-CTOKEN (1)
106100                LS-LEISIVAR
106200                AS5MSGRB-ISI-VSTR (1 3)
106300**              AS5FDBK-COND-AREA
106400                OMITTED
106500
106600     CALL 'CEEMSG'
106700          USING AS5MSGRB-CTOKEN (1)
106800                LS-LEMSGDEST
106900**              AS5FDBK-COND-AREA
107000                OMITTED
107100
107200     CONTINUE.
107300 MESSAGE-0113.
107400
107500*    0113 VAR1:VAR2 VAR3 WAS PASSED TOO MANY ARGUMENTS
107600     SET ASU03H_0001 (1) TO TRUE
107700     MOVE ZERO           TO AS5MSGRB-ISI (1)
107800
107900     MOVE +1             TO LS-LEISIVAR
108000     CALL 'CEECMI'
108100          USING AS5MSGRB-CTOKEN (1)
108200                LS-LEISIVAR
108300                AS5MSGRB-ISI-VSTR (1 1)
108400**              AS5FDBK-COND-AREA
108500                OMITTED
108600
108700     MOVE +2             TO LS-LEISIVAR
108800     CALL 'CEECMI'
108900          USING AS5MSGRB-CTOKEN (1)
109000                LS-LEISIVAR
109100                AS5MSGRB-ISI-VSTR (1 2)
109200**              AS5FDBK-COND-AREA
109300                OMITTED
109400
109500     MOVE +3             TO LS-LEISIVAR
109600     CALL 'CEECMI'
109700          USING AS5MSGRB-CTOKEN (1)
109800                LS-LEISIVAR
109900                AS5MSGRB-ISI-VSTR (1 3)
110000**              AS5FDBK-COND-AREA
110100                OMITTED
110200
110300     CALL 'CEEMSG'
110400          USING AS5MSGRB-CTOKEN (1)
110500                LS-LEMSGDEST
110600**              AS5FDBK-COND-AREA
110700                OMITTED
110800
110900     CONTINUE.
111000 MESSAGE-0114.
111100
111200*    0114 VAR1:VAR2 VAR3 WAS PASSED TOO FEW ARGUMENTS
111300     SET ASU03I_0001 (1) TO TRUE
111400     MOVE ZERO           TO AS5MSGRB-ISI (1)
111500
111600     MOVE +1             TO LS-LEISIVAR
111700     CALL 'CEECMI'
111800          USING AS5MSGRB-CTOKEN (1)
111900                LS-LEISIVAR
112000                AS5MSGRB-ISI-VSTR (1 1)
112100**              AS5FDBK-COND-AREA
112200                OMITTED
112300
112400     MOVE +2             TO LS-LEISIVAR
112500     CALL 'CEECMI'
112600          USING AS5MSGRB-CTOKEN (1)
112700                LS-LEISIVAR
112800                AS5MSGRB-ISI-VSTR (1 2)
112900**              AS5FDBK-COND-AREA
113000                OMITTED
113100
113200     MOVE +3             TO LS-LEISIVAR
113300     CALL 'CEECMI'
113400          USING AS5MSGRB-CTOKEN (1)
113500                LS-LEISIVAR
113600                AS5MSGRB-ISI-VSTR (1 3)
113700**              AS5FDBK-COND-AREA
113800                OMITTED
113900
114000     CALL 'CEEMSG'
114100          USING AS5MSGRB-CTOKEN (1)
114200                LS-LEMSGDEST
114300**              AS5FDBK-COND-AREA
114400                OMITTED
114500
114600     CONTINUE.
114700 MESSAGE-0115.
114800
114900*    0115 VAR1:VAR2 VAR3 NUMERIC DATA (VAR5)
115000*         IS OUT OF RANGE (VAR7)
115100     SET ASU03J_0001 (1) TO TRUE
115200     MOVE ZERO           TO AS5MSGRB-ISI (1)
115300
115400     MOVE +1             TO LS-LEISIVAR
115500     CALL 'CEECMI'
115600          USING AS5MSGRB-CTOKEN (1)
115700                LS-LEISIVAR
115800                AS5MSGRB-ISI-VSTR (1 1)
115900**              AS5FDBK-COND-AREA
116000                OMITTED
116100
116200     MOVE +2             TO LS-LEISIVAR
116300     CALL 'CEECMI'
116400          USING AS5MSGRB-CTOKEN (1)
116500                LS-LEISIVAR
116600                AS5MSGRB-ISI-VSTR (1 2)
116700**              AS5FDBK-COND-AREA
116800                OMITTED
116900
117000     MOVE +3             TO LS-LEISIVAR
117100     CALL 'CEECMI'
117200          USING AS5MSGRB-CTOKEN (1)
117300                LS-LEISIVAR
117400                AS5MSGRB-ISI-VSTR (1 3)
117500**              AS5FDBK-COND-AREA
117600                OMITTED
117700
117800     MOVE +5             TO LS-LEISIVAR
117900     CALL 'CEECMI'
118000          USING AS5MSGRB-CTOKEN (1)
118100                LS-LEISIVAR
118200                AS5MSGRB-ISI-VSTR (1 5)
118300**              AS5FDBK-COND-AREA
118400                OMITTED
118500
118600     MOVE +7             TO LS-LEISIVAR
118700     CALL 'CEECMI'
118800          USING AS5MSGRB-CTOKEN (1)
118900                LS-LEISIVAR
119000                AS5MSGRB-ISI-VSTR (1 7)
119100**              AS5FDBK-COND-AREA
119200                OMITTED
119300
119400     CALL 'CEEMSG'
119500          USING AS5MSGRB-CTOKEN (1)
119600                LS-LEMSGDEST
119700**              AS5FDBK-COND-AREA
119800                OMITTED
119900
120000     CONTINUE.
120100 MESSAGE-0116.
120200
120300*    0116 VAR1:VAR2 VAR3 UNDERFLOW
120400     SET ASU03K_0001 (1) TO TRUE
120500     MOVE ZERO           TO AS5MSGRB-ISI (1)
120600
120700     MOVE +1             TO LS-LEISIVAR
120800     CALL 'CEECMI'
120900          USING AS5MSGRB-CTOKEN (1)
121000                LS-LEISIVAR
121100                AS5MSGRB-ISI-VSTR (1 1)
121200**              AS5FDBK-COND-AREA
121300                OMITTED
121400
121500     MOVE +2             TO LS-LEISIVAR
121600     CALL 'CEECMI'
121700          USING AS5MSGRB-CTOKEN (1)
121800                LS-LEISIVAR
121900                AS5MSGRB-ISI-VSTR (1 2)
122000**              AS5FDBK-COND-AREA
122100                OMITTED
122200
122300     MOVE +3             TO LS-LEISIVAR
122400     CALL 'CEECMI'
122500          USING AS5MSGRB-CTOKEN (1)
122600                LS-LEISIVAR
122700                AS5MSGRB-ISI-VSTR (1 3)
122800**              AS5FDBK-COND-AREA
122900                OMITTED
123000
123100     CALL 'CEEMSG'
123200          USING AS5MSGRB-CTOKEN (1)
123300                LS-LEMSGDEST
123400**              AS5FDBK-COND-AREA
123500                OMITTED
123600
123700     CONTINUE.
123800 MESSAGE-0117.
123900
124000*    0117 VAR1:VAR2 VAR3 OVERFLOW
124100     SET ASU03L_0001 (1) TO TRUE
124200     MOVE ZERO           TO AS5MSGRB-ISI (1)
124300
124400     MOVE +1             TO LS-LEISIVAR
124500     CALL 'CEECMI'
124600          USING AS5MSGRB-CTOKEN (1)
124700                LS-LEISIVAR
124800                AS5MSGRB-ISI-VSTR (1 1)
124900**              AS5FDBK-COND-AREA
125000                OMITTED
125100
125200     MOVE +2             TO LS-LEISIVAR
125300     CALL 'CEECMI'
125400          USING AS5MSGRB-CTOKEN (1)
125500                LS-LEISIVAR
125600                AS5MSGRB-ISI-VSTR (1 2)
125700**              AS5FDBK-COND-AREA
125800                OMITTED
125900
126000     MOVE +3             TO LS-LEISIVAR
126100     CALL 'CEECMI'
126200          USING AS5MSGRB-CTOKEN (1)
126300                LS-LEISIVAR
126400                AS5MSGRB-ISI-VSTR (1 3)
126500**              AS5FDBK-COND-AREA
126600                OMITTED
126700
126800     CALL 'CEEMSG'
126900          USING AS5MSGRB-CTOKEN (1)
127000                LS-LEMSGDEST
127100**              AS5FDBK-COND-AREA
127200                OMITTED
127300
127400     CONTINUE.
127500 MESSAGE-0118.
127600
127700*    0118 VAR1:VAR2 VAR3 ACTION VAR4 FAILED
127800*         WITH R15=VAR5 REASON=VAR6
127900     SET ASU03M_0001 (1) TO TRUE
128000     MOVE ZERO           TO AS5MSGRB-ISI (1)
128100
128200     MOVE +1             TO LS-LEISIVAR
128300     CALL 'CEECMI'
128400          USING AS5MSGRB-CTOKEN (1)
128500                LS-LEISIVAR
128600                AS5MSGRB-ISI-VSTR (1 1)
128700**              AS5FDBK-COND-AREA
128800                OMITTED
128900
129000     MOVE +2             TO LS-LEISIVAR
129100     CALL 'CEECMI'
129200          USING AS5MSGRB-CTOKEN (1)
129300                LS-LEISIVAR
129400                AS5MSGRB-ISI-VSTR (1 2)
129500**              AS5FDBK-COND-AREA
129600                OMITTED
129700
129800     MOVE +3             TO LS-LEISIVAR
129900     CALL 'CEECMI'
130000          USING AS5MSGRB-CTOKEN (1)
130100                LS-LEISIVAR
130200                AS5MSGRB-ISI-VSTR (1 3)
130300**              AS5FDBK-COND-AREA
130400                OMITTED
130500
130600     MOVE +4             TO LS-LEISIVAR
130700     CALL 'CEECMI'
130800          USING AS5MSGRB-CTOKEN (1)
130900                LS-LEISIVAR
131000                AS5MSGRB-ISI-VSTR (1 4)
131100**              AS5FDBK-COND-AREA
131200                OMITTED
131300
131400     MOVE +5             TO LS-LEISIVAR
131500     CALL 'CEECMI'
131600          USING AS5MSGRB-CTOKEN (1)
131700                LS-LEISIVAR
131800                AS5MSGRB-ISI-VSTR (1 5)
131900**              AS5FDBK-COND-AREA
132000                OMITTED
132100
132200     MOVE +6             TO LS-LEISIVAR
132300     CALL 'CEECMI'
132400          USING AS5MSGRB-CTOKEN (1)
132500                LS-LEISIVAR
132600                AS5MSGRB-ISI-VSTR (1 6)
132700**              AS5FDBK-COND-AREA
132800                OMITTED
132900
133000     CALL 'CEEMSG'
133100          USING AS5MSGRB-CTOKEN (1)
133200                LS-LEMSGDEST
133300**              AS5FDBK-COND-AREA
133400                OMITTED
133500
133600     CONTINUE.
133700 MESSAGE-0119.
133800
133900*    0119 VAR1:VAR2 VAR3 VAR7
134000     SET ASU03N      (2) TO TRUE
134100     MOVE ZERO           TO AS5MSGRB-ISI (2)
134200
134300     MOVE +1             TO LS-LEISIVAR
134400     CALL 'CEECMI'
134500          USING AS5MSGRB-CTOKEN (2)
134600                LS-LEISIVAR
134700                AS5MSGRB-ISI-VSTR (2 1)
134800**              AS5FDBK-COND-AREA
134900                OMITTED
135000
135100     MOVE +2             TO LS-LEISIVAR
135200     CALL 'CEECMI'
135300          USING AS5MSGRB-CTOKEN (2)
135400                LS-LEISIVAR
135500                AS5MSGRB-ISI-VSTR (2 2)
135600**              AS5FDBK-COND-AREA
135700                OMITTED
135800
135900     MOVE +3             TO LS-LEISIVAR
136000     CALL 'CEECMI'
136100          USING AS5MSGRB-CTOKEN (2)
136200                LS-LEISIVAR
136300                AS5MSGRB-ISI-VSTR (2 3)
136400**              AS5FDBK-COND-AREA
136500                OMITTED
136600
136700     MOVE +7             TO LS-LEISIVAR
136800     CALL 'CEECMI'
136900          USING AS5MSGRB-CTOKEN (2)
137000                LS-LEISIVAR
137100                AS5MSGRB-ISI-VSTR (2 7)
137200**              AS5FDBK-COND-AREA
137300                OMITTED
137400
137500     CALL 'CEEMSG'
137600          USING AS5MSGRB-CTOKEN (2)
137700                LS-LEMSGDEST
137800**              AS5FDBK-COND-AREA
137900                OMITTED
138000
138100     CONTINUE.
138200 MESSAGE-0120.
138300
138400*    0120 VAR1:VAR2 VAR3 VAR8
138500     SET ASU03O      (3) TO TRUE
138600     MOVE ZERO           TO AS5MSGRB-ISI (3)
138700
138800     MOVE +1             TO LS-LEISIVAR
138900     CALL 'CEECMI'
139000          USING AS5MSGRB-CTOKEN (3)
139100                LS-LEISIVAR
139200                AS5MSGRB-ISI-VSTR (3 1)
139300**              AS5FDBK-COND-AREA
139400                OMITTED
139500
139600     MOVE +2             TO LS-LEISIVAR
139700     CALL 'CEECMI'
139800          USING AS5MSGRB-CTOKEN (3)
139900                LS-LEISIVAR
140000                AS5MSGRB-ISI-VSTR (3 2)
140100**              AS5FDBK-COND-AREA
140200                OMITTED
140300
140400     MOVE +3             TO LS-LEISIVAR
140500     CALL 'CEECMI'
140600          USING AS5MSGRB-CTOKEN (3)
140700                LS-LEISIVAR
140800                AS5MSGRB-ISI-VSTR (3 3)
140900**              AS5FDBK-COND-AREA
141000                OMITTED
141100
141200     MOVE +8             TO LS-LEISIVAR
141300     CALL 'CEECMI'
141400          USING AS5MSGRB-CTOKEN (3)
141500                LS-LEISIVAR
141600                AS5MSGRB-ISI-VSTR (3 8)
141700**              AS5FDBK-COND-AREA
141800                OMITTED
141900
142000     CALL 'CEEMSG'
142100          USING AS5MSGRB-CTOKEN (3)
142200                LS-LEMSGDEST
142300**              AS5FDBK-COND-AREA
142400                OMITTED
142500
142600     CONTINUE.
142700 MESSAGE-0121.
142800
142900*    0121 VAR1:VAR2 VAR3 SYNTAX ERROR POS=VAR5 VAR7
143000     SET ASU03P_0001 (1) TO TRUE
143100     MOVE ZERO           TO AS5MSGRB-ISI (1)
143200
143300     MOVE +1             TO LS-LEISIVAR
143400     CALL 'CEECMI'
143500          USING AS5MSGRB-CTOKEN (1)
143600                LS-LEISIVAR
143700                AS5MSGRB-ISI-VSTR (1 1)
143800**              AS5FDBK-COND-AREA
143900                OMITTED
144000
144100     MOVE +2             TO LS-LEISIVAR
144200     CALL 'CEECMI'
144300          USING AS5MSGRB-CTOKEN (1)
144400                LS-LEISIVAR
144500                AS5MSGRB-ISI-VSTR (1 2)
144600**              AS5FDBK-COND-AREA
144700                OMITTED
144800
144900     MOVE +3             TO LS-LEISIVAR
145000     CALL 'CEECMI'
145100          USING AS5MSGRB-CTOKEN (1)
145200                LS-LEISIVAR
145300                AS5MSGRB-ISI-VSTR (1 3)
145400**              AS5FDBK-COND-AREA
145500                OMITTED
145600
145700     MOVE +5             TO LS-LEISIVAR
145800     CALL 'CEECMI'
145900          USING AS5MSGRB-CTOKEN (1)
146000                LS-LEISIVAR
146100                AS5MSGRB-ISI-VSTR (1 5)
146200**              AS5FDBK-COND-AREA
146300                OMITTED
146400
146500     MOVE +7             TO LS-LEISIVAR
146600     CALL 'CEECMI'
146700          USING AS5MSGRB-CTOKEN (1)
146800                LS-LEISIVAR
146900                AS5MSGRB-ISI-VSTR (1 7)
147000**              AS5FDBK-COND-AREA
147100                OMITTED
147200
147300     CALL 'CEEMSG'
147400          USING AS5MSGRB-CTOKEN (1)
147500                LS-LEMSGDEST
147600**              AS5FDBK-COND-AREA
147700                OMITTED
147800
147900     SKIP2
148000     CONTINUE.
148100 9000-00-RETURN.
148200*    * ------------------------------------------------------- *
148300*    * RETURN TO CALLER
148400*    * ------------------------------------------------------- *
148500
148600     DISPLAY WS-PGMID
148700          " DONE WITH ASTMSG1B"
148800
148900     EXIT PROGRAM.
149000     GOBACK.
./ ADD NAME=ASTSRT1B 0123-18171-18365-0952-00843-01487-00000-APLKS   41
000100 PROCESS DATA(31),NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSRT1B.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------------ *
000600* ARCHITECTURE SERVICES FACILITY
000700* UNIT TESTING
000800* COBOL ROUTINE
000900*
001000* PROGRAM ID: ASTSRT1B
001100*      TITLE: TEST ASU Heap Sort,
001200*             Binary Search (1st occurance),
001300*             Fibonaccian Search, all written in HLASM.
001400*       DATE: 2018/07/17
001500*
001600*       DESC:
001700*
001800* ------------------------------------------------------------ *
001900* MAINTENANCE HISTORY:
002000*
002100* YYYY/MM/DD
002200*
002300* ------------------------------------------------------------ *
002400     SKIP2
002500 DATA DIVISION.
002600     SKIP2
002700 WORKING-STORAGE SECTION.
002800 01  FILLER.
002900     03  WS-EYE-CATCHER PIC X(25)
003000              VALUE "BUZZARD CREEK TECH, INC. ".
003100     03  WS-PGMID       PIC X(08) VALUE "ASTSRT1B".
003200
003300 01  WS-LAST-FDBK       PIC X(12) VALUE LOW-VALUE.
003400     SKIP1
003500 01  WS-NBRS-VECTOR.
003600     03  WS-NBRS-NTRYCNT     PIC S9(9) BINARY VALUE +15.
003700     03  WS-NBRS-NTRYPOS     PIC S9(9) BINARY VALUE +21.
003800     03  WS-NBRS-NTRYLEN     PIC S9(9) BINARY VALUE +3.
003900     03  WS-NBRS-KEYPOS      PIC S9(9) BINARY VALUE +1.
004000     03  WS-NBRS-KEYLEN      PIC S9(9) BINARY VALUE +2.
004100     03  WS-NBRS-VALUES.
004200         05  FILLER     PIC X(03) VALUE '00 '.
004300         05  FILLER     PIC X(03) VALUE '05 '.
004400         05  FILLER     PIC X(03) VALUE '10 '.
004500         05  FILLER     PIC X(03) VALUE '15 '.
004600         05  FILLER     PIC X(03) VALUE '20 '.
004700         05  FILLER     PIC X(03) VALUE '25 '.
004800         05  FILLER     PIC X(03) VALUE '30 '.
004900         05  FILLER     PIC X(03) VALUE '35 '.
005000         05  FILLER     PIC X(03) VALUE '40 '.
005100         05  FILLER     PIC X(03) VALUE '45 '.
005200         05  FILLER     PIC X(03) VALUE '50 '.
005300         05  FILLER     PIC X(03) VALUE '55 '.
005400         05  FILLER     PIC X(03) VALUE '60 '.
005500         05  FILLER     PIC X(03) VALUE '65 '.
005600         05  FILLER     PIC X(03) VALUE '70 '.
005700     03  FILLER REDEFINES WS-NBRS-VALUES.
005800         05  WS-NBRS OCCURS 15 TIMES
005900                  INDEXED BY WS-NBRS-IDX1.
006000             07  WS-NBR      PIC X(02).
006100             07  FILLER      PIC X(01).
006200     SKIP1
006300 01  WS-STATE-VECTOR.
006400     03  WS-STATE-NTRYCNT    PIC S9(9) BINARY VALUE 50.
006500     03  WS-STATE-NTRYPOS    PIC S9(9) BINARY VALUE 29.
006600     03  WS-STATE-NTRYLEN    PIC S9(9) BINARY VALUE 26.
006700     03  WS-STATE-KEY1POS    PIC S9(9) BINARY VALUE 01.
006800     03  WS-STATE-KEY1LEN    PIC S9(9) BINARY VALUE 15.
006900     03  WS-STATE-KEY2POS    PIC S9(9) BINARY VALUE 16.
007000     03  WS-STATE-KEY2LEN    PIC S9(9) BINARY VALUE 08.
007100     03  WS-STATE-VALUES.
007200         05  FILLER PIC X(26) VALUE "DELAWARE       17871207 08".
007300         05  FILLER PIC X(26) VALUE "PENNSYLVANIA   17871212 38".
007400         05  FILLER PIC X(26) VALUE "NEW JERSEY     17871218 30".
007500         05  FILLER PIC X(26) VALUE "GEORGIA        17880102 10".
007600         05  FILLER PIC X(26) VALUE "CONNECTICUT    17880109 07".
007700         05  FILLER PIC X(26) VALUE "MASSACHUSETTS  17880206 21".
007800         05  FILLER PIC X(26) VALUE "MARYLAND       17880428 20".
007900         05  FILLER PIC X(26) VALUE "SOUTH CAROLINA 17880523 40".
008000         05  FILLER PIC X(26) VALUE "NEW HAMPSHIRE  17880621 29".
008100         05  FILLER PIC X(26) VALUE "VIRGINA        17880625 46".
008200         05  FILLER PIC X(26) VALUE "NEW YORK       17880726 32".
008300         05  FILLER PIC X(26) VALUE "NORTH CAROLINA 17891121 33".
008400         05  FILLER PIC X(26) VALUE "RHODE ISLAND   17900529 39".
008500         05  FILLER PIC X(26) VALUE "VERMONT        17910304 45".
008600         05  FILLER PIC X(26) VALUE "KENTUCKY       17920601 17".
008700         05  FILLER PIC X(26) VALUE "TENNESSEE      17960601 42".
008800         05  FILLER PIC X(26) VALUE "OHIO           18030301 35".
008900         05  FILLER PIC X(26) VALUE "LOUISIANA      18120430 18".
009000         05  FILLER PIC X(26) VALUE "INDIANA        18161211 14".
009100         05  FILLER PIC X(26) VALUE "MISSISSIPPI    18171210 24".
009200         05  FILLER PIC X(26) VALUE "ILLINOIS       18181203 13".
009300         05  FILLER PIC X(26) VALUE "ALABAMA        18191214 01".
009400         05  FILLER PIC X(26) VALUE "MAINE          18200315 19".
009500         05  FILLER PIC X(26) VALUE "MISSOURI       18210810 25".
009600         05  FILLER PIC X(26) VALUE "ARKANSAS       18360615 04".
009700         05  FILLER PIC X(26) VALUE "MICHIGAN       18370126 22".
009800         05  FILLER PIC X(26) VALUE "FLORIDA        18450303 09".
009900         05  FILLER PIC X(26) VALUE "TEXAS          18451229 43".
010000         05  FILLER PIC X(26) VALUE "IOWA           18461228 15".
010100         05  FILLER PIC X(26) VALUE "WISCONSIN      18480529 49".
010200         05  FILLER PIC X(26) VALUE "CALIFORNIA     18500909 05".
010300         05  FILLER PIC X(26) VALUE "MINNESOTA      18580511 23".
010400         05  FILLER PIC X(26) VALUE "OREGON         18590214 37".
010500         05  FILLER PIC X(26) VALUE "KANSAS         18610129 16".
010600         05  FILLER PIC X(26) VALUE "WEST VIRGINA   18630620 48".
010700         05  FILLER PIC X(26) VALUE "NEVADA         18641031 28".
010800         05  FILLER PIC X(26) VALUE "NEBRASKA       18670301 27".
010900         05  FILLER PIC X(26) VALUE "COLORADO       18760801 06".
011000         05  FILLER PIC X(26) VALUE "NORTH DAKOTA   18891102 34".
011100         05  FILLER PIC X(26) VALUE "SOUTH DAKOTA   18891102 41".
011200         05  FILLER PIC X(26) VALUE "MONTANA        18891108 26".
011300         05  FILLER PIC X(26) VALUE "WASHINGTON     18891111 47".
011400         05  FILLER PIC X(26) VALUE "IDAHO          18900703 12".
011500         05  FILLER PIC X(26) VALUE "WYOMING        18900710 50".
011600         05  FILLER PIC X(26) VALUE "UTAH           18960104 44".
011700         05  FILLER PIC X(26) VALUE "OKLAHOMA       19071116 36".
011800         05  FILLER PIC X(26) VALUE "NEW MEXICO     19120106 31".
011900         05  FILLER PIC X(26) VALUE "ARIZONA        19120214 03".
012000         05  FILLER PIC X(26) VALUE "ALASKA         19590103 02".
012100         05  FILLER PIC X(26) VALUE "HAWAII         19590821 11".
012200     03  FILLER REDEFINES WS-STATE-VALUES.
012300         05  WS-STATE OCCURS 50 TIMES
012400                  ASCENDING KEY IS WS-STATEHOOD-YEAR
012500                  INDEXED BY WS-STATE-IDX1.
012600             07  WS-STATE-NAME    PIC X(15).
012700             07  WS-STATEHOOD-DATE.
012800                 09  WS-STATEHOOD-YEAR PIC X(04).
012900                 09  FILLER            PIC X(04).
013000             07  FILLER           PIC X(03).
013100     SKIP1
013200     COPY AS5FDBK.
013300     SKIP2
013400 LOCAL-STORAGE SECTION.
013500 01  FILLER.
013600     03  LS-ASMODULE         PIC X(08).
013700     03  LS-ASCA-PTR         POINTER.
013800     03  LS-LEFUNCT          PIC S9(9) BINARY SYNC.
013900     03  LS-LEMSGDEST        PIC S9(9) BINARY SYNC.
014000     03  LS-ENCLAVE-RC       PIC S9(9) BINARY SYNC.
014100     03  LS-KEYLEN           PIC S9(9) BINARY SYNC.
014200     03  LS-FIBSUB           PIC S9(9) BINARY SYNC.
014300     03  LS-SUB              PIC S9(9) BINARY SYNC.
014400     03  FILLER REDEFINES LS-SUB.
014500         05  LS-SUB-1        PIC S9(4) BINARY.
014600         05  LS-SUB-2        PIC S9(4) BINARY.
014700     03  LS-SRCHARG          PIC X(15).
014800     SKIP1
014900 01  LS-STATE-VECTOR.
015000     03  LS-STATE-NTRYCNT    PIC S9(9) BINARY.
015100     03  LS-STATE-NTRYPOS    PIC S9(9) BINARY.
015200     03  LS-STATE-NTRYLEN    PIC S9(9) BINARY.
015300     03  LS-STATE-KEY1POS    PIC S9(9) BINARY.
015400     03  LS-STATE-KEY1LEN    PIC S9(9) BINARY.
015500     03  LS-STATE-KEY2POS    PIC S9(9) BINARY.
015600     03  LS-STATE-KEY2LEN    PIC S9(9) BINARY.
015700     03  LS-STATE-VALUES.
015800         05  LS-STATE OCCURS 50 TIMES
015900                  INDEXED BY LS-STATE-IDX1.
016000             07  LS-STATE-NAME    PIC X(15).
016100             07  LS-STATEHOOD-DATE.
016200                 09  LS-STATEHOOD-YEAR PIC X(04).
016300                 09  FILLER            PIC X(04).
016400             07  FILLER           PIC X(03).
016500     SKIP1
016600     COPY AS5DMPRB.
016700     SKIP1
016800     COPY AS5MSGRB.
016900     SKIP2
017000 LINKAGE SECTION.
017100     COPY AS5CA.
017200     EJECT
017300 PROCEDURE DIVISION USING
017400     ASCA-COMMAREA.
017500     SKIP2
017600     CONTINUE.
017700 0000-00-INITIALIZATION.
017800     DISPLAY WS-PGMID
017900          " Testing ASU HeapSort & BinSearch & FibSearch"
018000     SKIP2
018100*    * ------------------------------------------------------- *
018200*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
018300*    * ------------------------------------------------------- *
018400
018500     SET LS-ASCA-PTR TO NULL
018600     MOVE "ASU3I01B" TO LS-ASMODULE
018700     CALL LS-ASMODULE
018800          USING LS-ASCA-PTR
018900**              AS5FDBK-COND-AREA
019000                OMITTED
019100
019200     IF LS-ASCA-PTR = NULL
019300       DISPLAY WS-PGMID
019400            " ASU3I01B failed to create the ASCA"
019500       GOBACK
019600     END-IF
019700
019800     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
019900     MOVE +2 TO LS-LEMSGDEST
020000     DISPLAY " "
020100
020200*    DUMP AS5CA COMMUNICATION AREA
020300     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
020400     MOVE +1 TO AS5DMPRB-NUMBER
020500     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
020600     MOVE "ASUMDHEX" TO LS-ASMODULE
020700     CALL LS-ASMODULE
020800          USING ASCA-COMMAREA
020900                AS5DMPRB-REQUEST-BLOCK
021000                ASCA-COMMAREA
021100**              AS5FDBK-COND-AREA
021200                OMITTED
021300
021400*    PRINT STATE TABLE BEFORE SORT
021500     DISPLAY " "
021600     DISPLAY WS-PGMID
021700           " Print states in statehood date order"
021800     PERFORM
021900          VARYING WS-STATE-IDX1 FROM +1 BY +1
022000          UNTIL WS-STATE-IDX1 > WS-STATE-NTRYCNT
022100       SET LS-SUB TO WS-STATE-IDX1
022200       DISPLAY WS-PGMID
022300            " "
022400            LS-SUB-2
022500            " "
022600            WS-STATE (WS-STATE-IDX1)
022700     END-PERFORM
022800     SKIP2
022900     CONTINUE.
023000 0100-00-MAINLINE.
023100     DISPLAY " "
023200     DISPLAY WS-PGMID
023300          " Use COBOL SEARCH ALL to locate states by year"
023400     DISPLAY " "
023500     DISPLAY WS-PGMID
023600          " Find year 1787: DELAWARE, PENNSYLVANIA, NEW JERSEY"
023700     MOVE "1787" TO LS-SRCHARG
023800     SEARCH ALL WS-STATE
023900          AT END
024000            DISPLAY WS-PGMID
024100                 " can not find STATEHOOD date 1787"
024200            GO TO 0100-10-MAINLINE
024300       WHEN WS-STATEHOOD-YEAR (WS-STATE-IDX1) = LS-SRCHARG
024400         SET LS-SUB TO WS-STATE-IDX1
024500         DISPLAY WS-PGMID
024600              "   "
024700              LS-SUB-2
024800              " "
024900              WS-STATE (WS-STATE-IDX1)
025000     END-SEARCH
025100     SET WS-STATE-IDX1 UP BY +1
025200     PERFORM UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
025300          NOT = LS-SRCHARG
025400       SET LS-SUB TO WS-STATE-IDX1
025500       DISPLAY WS-PGMID
025600            "   "
025700            LS-SUB-2
025800            " "
025900            WS-STATE (WS-STATE-IDX1)
026000       SET WS-STATE-IDX1 UP BY +1
026100     END-PERFORM
026200
026300     CONTINUE.
026400 0100-10-MAINLINE.
026500     DISPLAY " "
026600     DISPLAY WS-PGMID
026700          " Find year 1889: NORTH DAKAOTA, SOUTH DAKAOTA,"
026800          " MONTANA, WASHINGTON"
026900     MOVE "1889" TO LS-SRCHARG
027000     SEARCH ALL WS-STATE
027100          AT END
027200            DISPLAY WS-PGMID
027300                 " can not find STATEHOOD date 1889"
027400            GO TO 0100-20-MAINLINE
027500       WHEN WS-STATEHOOD-YEAR (WS-STATE-IDX1) = LS-SRCHARG
027600         SET LS-SUB TO WS-STATE-IDX1
027700         DISPLAY WS-PGMID
027800              "   "
027900              LS-SUB-2
028000              " "
028100              WS-STATE (WS-STATE-IDX1)
028200     END-SEARCH
028300     SET WS-STATE-IDX1 UP BY +1
028400     PERFORM UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
028500          NOT = LS-SRCHARG
028600       SET LS-SUB TO WS-STATE-IDX1
028700       DISPLAY WS-PGMID
028800            "   "
028900            LS-SUB-2
029000            " "
029100            WS-STATE (WS-STATE-IDX1)
029200       SET WS-STATE-IDX1 UP BY +1
029300     END-PERFORM
029400
029500     CONTINUE.
029600 0100-20-MAINLINE.
029700     DISPLAY " "
029800     DISPLAY WS-PGMID
029900          " Find year 1890: IDAHO, WYOMING"
030000     MOVE "1890" TO LS-SRCHARG
030100     SEARCH ALL WS-STATE
030200          AT END
030300            DISPLAY WS-PGMID
030400                 " CAN NOT FIND STATEHOOD DATE 1890"
030500            GO TO 0100-30-MAINLINE
030600       WHEN WS-STATEHOOD-YEAR (WS-STATE-IDX1) = LS-SRCHARG
030700         SET LS-SUB TO WS-STATE-IDX1
030800         DISPLAY WS-PGMID
030900              "   "
031000              LS-SUB-2
031100              " "
031200              WS-STATE (WS-STATE-IDX1)
031300     END-SEARCH
031400     SET WS-STATE-IDX1 UP BY +1
031500     PERFORM UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
031600          NOT = LS-SRCHARG
031700       SET LS-SUB TO WS-STATE-IDX1
031800       DISPLAY WS-PGMID
031900            "   "
032000            LS-SUB-2
032100            " "
032200            WS-STATE (WS-STATE-IDX1)
032300       SET WS-STATE-IDX1 UP BY +1
032400     END-PERFORM
032500
032600     CONTINUE.
032700 0100-30-MAINLINE.
032800     DISPLAY " "
032900     DISPLAY WS-PGMID
033000          " Find year 1959: ALASKA, HAWAII"
033100     MOVE "1959" TO LS-SRCHARG
033200     SEARCH ALL WS-STATE
033300          AT END
033400            DISPLAY WS-PGMID
033500                 " can not find STATEHOOD date 1959"
033600            GO TO 0100-40-MAINLINE
033700       WHEN WS-STATEHOOD-YEAR (WS-STATE-IDX1) = LS-SRCHARG
033800         SET LS-SUB TO WS-STATE-IDX1
033900         DISPLAY WS-PGMID
034000              "   "
034100              LS-SUB-2
034200              " "
034300              WS-STATE (WS-STATE-IDX1)
034400     END-SEARCH
034500     SET WS-STATE-IDX1 UP BY +1
034600     PERFORM UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
034700          NOT = LS-SRCHARG
034800       SET LS-SUB TO WS-STATE-IDX1
034900       DISPLAY WS-PGMID
035000            "   "
035100            LS-SUB-2
035200            " "
035300            WS-STATE (WS-STATE-IDX1)
035400       SET WS-STATE-IDX1 UP BY +1
035500     END-PERFORM
035600
035700     CONTINUE.
035800 0100-40-MAINLINE.
035900     CONTINUE.
036000 0200-00-MAINLINE.
036100     DISPLAY " "
036200     DISPLAY WS-PGMID
036300          " Use ASU BinSearch to locate States by year"
036400     DISPLAY " "
036500     DISPLAY WS-PGMID
036600          " Find year 1787: DELAWARE, PENNSYLVANIA, NEW JERSEY"
036700     MOVE "1787" TO LS-SRCHARG
036800     MOVE +4 TO LS-KEYLEN
036900     PERFORM 8100-00-BINSRCH THRU 8100-99-EXIT
037000
037100     CONTINUE.
037200 0200-10-MAINLINE.
037300     DISPLAY " "
037400     DISPLAY WS-PGMID
037500          " Find year 1889: NORTH DAKAOTA, SOUTH DAKAOTA,"
037600          " MONTANA, WASHINGTON"
037700     MOVE "1889" TO LS-SRCHARG
037800     MOVE +4 TO LS-KEYLEN
037900     PERFORM 8100-00-BINSRCH THRU 8100-99-EXIT
038000
038100     CONTINUE.
038200 0200-20-MAINLINE.
038300     DISPLAY " "
038400     DISPLAY WS-PGMID
038500          " Find year 1890: IDAHO, WYOMING"
038600     MOVE "1890" TO LS-SRCHARG
038700     MOVE +4 TO LS-KEYLEN
038800     PERFORM 8100-00-BINSRCH THRU 8100-99-EXIT
038900
039000     CONTINUE.
039100 0200-30-MAINLINE.
039200     DISPLAY " "
039300     DISPLAY WS-PGMID
039400          " Find year 1959: ALASKA, HAWAII"
039500     MOVE "1959" TO LS-SRCHARG
039600     MOVE +4 TO LS-KEYLEN
039700     PERFORM 8100-00-BINSRCH THRU 8100-99-EXIT
039800
039900     CONTINUE.
040000 0200-40-MAINLINE.
040100     CONTINUE.
040200 0300-00-MAINLINE.
040300     MOVE WS-STATE-VECTOR TO LS-STATE-VECTOR
040400     DISPLAY " "
040500     DISPLAY WS-PGMID
040600          " Use ASU HeapSort to order states by name"
040700     MOVE "ASUHSRTB" TO LS-ASMODULE
040800     CALL LS-ASMODULE
040900          USING ASCA-COMMAREA
041000                LS-STATE-VECTOR
041100                LS-STATE-NTRYCNT
041200                LS-STATE-NTRYPOS
041300                LS-STATE-NTRYLEN
041400                LS-STATE-KEY1POS
041500                LS-STATE-KEY1LEN
041600**              AS5FDBK-COND-AREA
041700                OMITTED
041800
041900     CALL 'CEE3GRC'
042000          USING LS-ENCLAVE-RC
042100                OMITTED
042200     EVALUATE LS-ENCLAVE-RC
042300       WHEN ZERO
042400         CONTINUE
042500       WHEN +8
042600         DISPLAY WS-PGMID LS-ASMODULE
042700              " invalid parameters"
042800       WHEN OTHER
042900         DISPLAY WS-PGMID LS-ASMODULE
043000              " unknown return code:" LS-ENCLAVE-RC
043100     END-EVALUATE
043200
043300*    PRINT STATE TABLE AFTER SORT
043400     PERFORM
043500          VARYING LS-STATE-IDX1 FROM +1 BY +1
043600          UNTIL LS-STATE-IDX1 > LS-STATE-NTRYCNT
043700       SET LS-SUB TO LS-STATE-IDX1
043800       DISPLAY WS-PGMID
043900            " "
044000            LS-SUB-2
044100            " "
044200            LS-STATE (LS-STATE-IDX1)
044300     END-PERFORM
044400
044500     CONTINUE.
044600 0400-00-MAINLINE.
044700     DISPLAY " "
044800     DISPLAY WS-PGMID
044900          " Use ASU Binary search to locate states by name"
045000
045100     CONTINUE.
045200 0400-10-MAINLINE.
045300     DISPLAY " "
045400     MOVE "ALABAMA" TO LS-SRCHARG
045500     DISPLAY WS-PGMID
045600          " Find state: " LS-SRCHARG " 01"
045700     MOVE +15 TO LS-KEYLEN
045800     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
045900
046000     CONTINUE.
046100 0400-20-MAINLINE.
046200     DISPLAY " "
046300     MOVE "KENTUCKY" TO LS-SRCHARG
046400     DISPLAY WS-PGMID
046500          " Find state: " LS-SRCHARG " 17"
046600     MOVE +15 TO LS-KEYLEN
046700     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
046800
046900     CONTINUE.
047000 0400-30-MAINLINE.
047100     DISPLAY " "
047200     MOVE "MONTANA" TO LS-SRCHARG
047300     DISPLAY WS-PGMID
047400          " Find state: " LS-SRCHARG " 26"
047500     MOVE +15 TO LS-KEYLEN
047600     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
047700
047800     CONTINUE.
047900 0400-40-MAINLINE.
048000     DISPLAY " "
048100     MOVE "OREGON" TO LS-SRCHARG
048200     DISPLAY WS-PGMID
048300          " Find state: " LS-SRCHARG " 37"
048400     MOVE +15 TO LS-KEYLEN
048500     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
048600
048700     CONTINUE.
048800 0400-50-MAINLINE.
048900     DISPLAY " "
049000     MOVE "WYOMING" TO LS-SRCHARG
049100     DISPLAY WS-PGMID
049200          " Find state: " LS-SRCHARG " 50"
049300     MOVE +15 TO LS-KEYLEN
049400     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
049500
049600     CONTINUE.
049700 0400-60-MAINLINE.
049800     DISPLAY " "
049900     MOVE "ZOOLULAND" TO LS-SRCHARG
050000     DISPLAY WS-PGMID
050100          " Find state: " LS-SRCHARG " Not found"
050200     MOVE +15 TO LS-KEYLEN
050300     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
050400
050500     CONTINUE.
050600 0500-00-MAINLINE.
050700     DISPLAY " "
050800     DISPLAY WS-PGMID
050900          " Use ASU Fibonaccian search to locate states by name"
051000
051100     CONTINUE.
051200 0500-10-MAINLINE.
051300     MOVE ZERO TO LS-FIBSUB
051400     MOVE "ALABAMA" TO LS-SRCHARG
051500     DISPLAY " "
051600     DISPLAY WS-PGMID
051700          " Find: " LS-SRCHARG " 01"
051800     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
051900
052000     CONTINUE.
052100 0500-20-MAINLINE.
052200     MOVE "KENTUCKY" TO LS-SRCHARG
052300     DISPLAY " "
052400     DISPLAY WS-PGMID
052500          " Find: " LS-SRCHARG " 17"
052600     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
052700
052800     CONTINUE.
052900 0500-30-MAINLINE.
053000     MOVE "MONTANA" TO LS-SRCHARG
053100     DISPLAY " "
053200     DISPLAY WS-PGMID
053300          " Find: " LS-SRCHARG " 26"
053400     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
053500
053600     CONTINUE.
053700 0500-40-MAINLINE.
053800     MOVE "OREGON" TO LS-SRCHARG
053900     DISPLAY " "
054000     DISPLAY WS-PGMID
054100          " Find: " LS-SRCHARG " 37"
054200     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
054300
054400     CONTINUE.
054500 0500-50-MAINLINE.
054600     MOVE "WYOMING" TO LS-SRCHARG
054700     DISPLAY " "
054800     DISPLAY WS-PGMID
054900          " Find: " LS-SRCHARG " 50"
055000     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
055100
055200     CONTINUE.
055300 0500-60-MAINLINE.
055400     MOVE "ZOOLULAND" TO LS-SRCHARG
055500     DISPLAY " "
055600     DISPLAY WS-PGMID
055700          " Find: " LS-SRCHARG " Not found"
055800     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
055900
056000     CONTINUE.
056100 0600-00-MAINLINE.
056200     DISPLAY " "
056300     DISPLAY WS-PGMID
056400          " Use ASU Fibonaccian search to locate numbers"
056500
056600     CONTINUE.
056700 0600-10-MAINLINE.
056800     MOVE ZERO TO LS-FIBSUB
056900     MOVE "00" TO LS-SRCHARG
057000     DISPLAY " "
057100     DISPLAY WS-PGMID
057200          " Find: " LS-SRCHARG " 01"
057300     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
057400
057500     CONTINUE.
057600 0600-20-MAINLINE.
057700     MOVE "15" TO LS-SRCHARG
057800     DISPLAY " "
057900     DISPLAY WS-PGMID
058000          " Find: " LS-SRCHARG " 04"
058100     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
058200
058300     CONTINUE.
058400 0600-30-MAINLINE.
058500     MOVE "35" TO LS-SRCHARG
058600     DISPLAY " "
058700     DISPLAY WS-PGMID
058800          " Find: " LS-SRCHARG " 08"
058900     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
059000
059100     CONTINUE.
059200 0600-40-MAINLINE.
059300     MOVE "55" TO LS-SRCHARG
059400     DISPLAY " "
059500     DISPLAY WS-PGMID
059600          " Find: " LS-SRCHARG " 12"
059700     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
059800
059900     CONTINUE.
060000 0600-50-MAINLINE.
060100     MOVE "60" TO LS-SRCHARG
060200     DISPLAY " "
060300     DISPLAY WS-PGMID
060400          " Find: " LS-SRCHARG " 13"
060500     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
060600
060700     CONTINUE.
060800 0600-60-MAINLINE.
060900     MOVE "65" TO LS-SRCHARG
061000     DISPLAY " "
061100     DISPLAY WS-PGMID
061200          " Find: " LS-SRCHARG " 14"
061300     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
061400
061500     CONTINUE.
061600 0600-70-MAINLINE.
061700     MOVE "70" TO LS-SRCHARG
061800     DISPLAY " "
061900     DISPLAY WS-PGMID
062000          " Find: " LS-SRCHARG  " 15"
062100     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
062200
062300     CONTINUE.
062400 0600-80-MAINLINE.
062500     MOVE "99" TO LS-SRCHARG
062600     DISPLAY " "
062700     DISPLAY WS-PGMID
062800          " Find: " LS-SRCHARG  " Not found"
062900     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
063000
063100     GO TO 9000-00-RETURN
063200
063300     SKIP2
063400     CONTINUE.
063500*8000-00-ROUTINES.
063600
063700 8100-00-BINSRCH.
063800     MOVE ZERO TO LS-SUB
063900     MOVE "ASUBSRHB" TO LS-ASMODULE
064000     CALL LS-ASMODULE
064100          USING ASCA-COMMAREA
064200                WS-STATE-VECTOR
064300                WS-STATE-NTRYCNT
064400                WS-STATE-NTRYPOS
064500                WS-STATE-NTRYLEN
064600                WS-STATE-KEY2POS
064700                LS-KEYLEN
064800                LS-SRCHARG
064900                LS-SUB
065000**              AS5FDBK-COND-AREA
065100                OMITTED
065200
065300     CALL 'CEE3GRC'
065400          USING LS-ENCLAVE-RC
065500                OMITTED
065600     EVALUATE LS-ENCLAVE-RC
065700       WHEN ZERO
065800         CONTINUE
065900       WHEN +4
066000         DISPLAY WS-PGMID LS-ASMODULE
066100              " not found"
066200       WHEN +8
066300         DISPLAY WS-PGMID LS-ASMODULE
066400              " invalid parameters"
066500       WHEN OTHER
066600         DISPLAY WS-PGMID LS-ASMODULE
066700              " unknown return code:" LS-ENCLAVE-RC
066800     END-EVALUATE
066900
067000     IF LS-SUB = ZERO
067100       DISPLAY WS-PGMID
067200            " can not find STATEHOOD date " LS-SRCHARG
067300     ELSE
067400       SET WS-STATE-IDX1 TO LS-SUB
067500       PERFORM
067600            UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
067700            NOT = LS-SRCHARG
067800         SET LS-SUB TO WS-STATE-IDX1
067900         DISPLAY WS-PGMID
068000              "   "
068100              LS-SUB-2
068200              " "
068300              WS-STATE (WS-STATE-IDX1)
068400         SET WS-STATE-IDX1 UP BY +1
068500       END-PERFORM
068600     END-IF
068700
068800     CONTINUE.
068900 8100-99-EXIT.
069000     EXIT.
069100
069200 8200-00-BINSRCH.
069300     MOVE ZERO TO LS-SUB
069400     MOVE "ASUBSRHB" TO LS-ASMODULE
069500     CALL LS-ASMODULE
069600          USING ASCA-COMMAREA
069700                LS-STATE-VECTOR
069800                LS-STATE-NTRYCNT
069900                LS-STATE-NTRYPOS
070000                LS-STATE-NTRYLEN
070100                LS-STATE-KEY1POS
070200                LS-KEYLEN
070300                LS-SRCHARG
070400                LS-SUB
070500**              AS5FDBK-COND-AREA
070600                OMITTED
070700
070800     CALL 'CEE3GRC'
070900          USING LS-ENCLAVE-RC
071000                OMITTED
071100     EVALUATE LS-ENCLAVE-RC
071200       WHEN ZERO
071300         CONTINUE
071400       WHEN +4
071500         DISPLAY WS-PGMID LS-ASMODULE
071600              " not found"
071700       WHEN +8
071800         DISPLAY WS-PGMID LS-ASMODULE
071900              " invalid parameters"
072000       WHEN OTHER
072100         DISPLAY WS-PGMID LS-ASMODULE
072200              " unknown return code:" LS-ENCLAVE-RC
072300     END-EVALUATE
072400
072500     IF LS-SUB = ZERO
072600       DISPLAY WS-PGMID
072700            " can not find state " LS-SRCHARG
072800     ELSE
072900       DISPLAY WS-PGMID
073000            " Found: " LS-STATE (LS-SUB) " in pos " LS-SUB-2
073100     END-IF
073200
073300     CONTINUE.
073400 8200-99-EXIT.
073500     EXIT.
073600
073700 8300-00-FIBLOOKUP.
073800     MOVE ZERO TO LS-SUB
073900     MOVE "ASUFSRHB" TO LS-ASMODULE
074000     CALL LS-ASMODULE
074100          USING ASCA-COMMAREA
074200                LS-STATE-VECTOR
074300                LS-STATE-NTRYCNT
074400                LS-STATE-NTRYPOS
074500                LS-STATE-NTRYLEN
074600                LS-STATE-KEY1POS
074700                LS-STATE-KEY1LEN
074800                LS-SRCHARG
074900                LS-FIBSUB
075000                LS-SUB
075100**              AS5FDBK-COND-AREA
075200                OMITTED
075300
075400     CALL 'CEE3GRC'
075500          USING LS-ENCLAVE-RC
075600                OMITTED
075700     EVALUATE LS-ENCLAVE-RC
075800       WHEN ZERO
075900         CONTINUE
076000       WHEN +4
076100         DISPLAY WS-PGMID LS-ASMODULE
076200              " not found"
076300       WHEN +8
076400         DISPLAY WS-PGMID LS-ASMODULE
076500              " invalid parameters"
076600       WHEN OTHER
076700         DISPLAY WS-PGMID LS-ASMODULE
076800              " unknown return code:" LS-ENCLAVE-RC
076900     END-EVALUATE
077000
077100     IF LS-SUB = ZERO
077200       DISPLAY WS-PGMID
077300            " can not find STATE " LS-SRCHARG
077400       GO TO 8300-99-EXIT
077500     ELSE
077600       DISPLAY WS-PGMID
077700            " Found: " LS-STATE (LS-SUB) " in pos " LS-SUB-2
077800     END-IF
077900
078000     CONTINUE.
078100 8300-99-EXIT.
078200     EXIT.
078300
078400     CONTINUE.
078500 8400-00-FIBLOOKUP.
078600     MOVE ZERO TO LS-SUB
078700     MOVE "ASUFSRHB" TO LS-ASMODULE
078800     CALL LS-ASMODULE
078900          USING ASCA-COMMAREA
079000                WS-NBRS-VECTOR
079100                WS-NBRS-NTRYCNT
079200                WS-NBRS-NTRYPOS
079300                WS-NBRS-NTRYLEN
079400                WS-NBRS-KEYPOS
079500                WS-NBRS-KEYLEN
079600                LS-SRCHARG
079700                LS-FIBSUB
079800                LS-SUB
079900**              AS5FDBK-COND-AREA
080000                OMITTED
080100
080200     CALL 'CEE3GRC'
080300          USING LS-ENCLAVE-RC
080400                OMITTED
080500     EVALUATE LS-ENCLAVE-RC
080600       WHEN ZERO
080700         CONTINUE
080800       WHEN +4
080900         DISPLAY WS-PGMID LS-ASMODULE
081000              " not found"
081100       WHEN +8
081200         DISPLAY WS-PGMID LS-ASMODULE
081300              " invalid parameters"
081400       WHEN OTHER
081500         DISPLAY WS-PGMID LS-ASMODULE
081600              " unknown return code:" LS-ENCLAVE-RC
081700     END-EVALUATE
081800
081900     IF LS-SUB = ZERO
082000       DISPLAY WS-PGMID
082100            " can not find NBR " LS-SRCHARG
082200       GO TO 8400-99-EXIT
082300     ELSE
082400       DISPLAY WS-PGMID
082500            " Found: " WS-NBR (LS-SUB) " in pos " LS-SUB-2
082600     END-IF
082700
082800     CONTINUE.
082900 8400-99-EXIT.
083000     EXIT.
083100     SKIP2
083200     CONTINUE.
083300 9000-00-RETURN.
083400*    * ------------------------------------------------------- *
083500*    * RETURN TO CALLER
083600*    * ------------------------------------------------------- *
083700
083800     DISPLAY " "
083900     DISPLAY WS-PGMID
084000          " DONE WITH ASTSRT1B"
084100
084200     EXIT PROGRAM.
084300     GOBACK.
./ ADD NAME=ASTSRT2B 0112-18198-18295-1410-00747-01252-00000-APLKS   10
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSRT2B.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------------ *
000600* ARCHITECTURE SERVICES FACILITY
000700* UNIT TESTING
000800* COBOL ROUTINE
000900*
001000* PROGRAM ID: TEST
001100*
001200* ------------------------------------------------------------ *
001300* MAINTENANCE HISTORY:
001400*
001500* YYYY/MM/DD
001600*
001700* ------------------------------------------------------------ *
001800     SKIP2
001900 DATA DIVISION.
002000     SKIP2
002100 WORKING-STORAGE SECTION.
002200 01  FILLER.
002300     03  WS-EYE-CATCHER PIC X(25)
002400              VALUE "BUZZARD CREEK TECH, INC. ".
002500     03  WS-PGMID       PIC X(08) VALUE "ASTSRT2B".
002600     SKIP1
002700 01  WS-NBRS-VECTOR.
002800     03  WS-NBRS-NTRYCNT     PIC S9(9) BINARY VALUE +6.
002900     03  WS-NBRS-NTRYLEN     PIC S9(9) BINARY VALUE +8.
003000     03  WS-NBRS-KEY1POS     PIC S9(9) BINARY VALUE +1.
003100     03  WS-NBRS-KEY1LEN     PIC S9(9) BINARY VALUE +2.
003200     03  WS-NBRS-KEY2POS     PIC S9(9) BINARY VALUE +4.
003300     03  WS-NBRS-KEY2LEN     PIC S9(9) BINARY VALUE +5.
003400     03  WS-NBRS-VALUES.
003500         05  FILLER     PIC X(08) VALUE '01 ONE'.
003600         05  FILLER     PIC X(08) VALUE '05 FIVE'.
003700         05  FILLER     PIC X(08) VALUE '03 THREE'.
003800         05  FILLER     PIC X(08) VALUE '02 TWO'.
003900         05  FILLER     PIC X(08) VALUE '06 SIX'.
004000         05  FILLER     PIC X(08) VALUE '04 FOUR'.
004100     03  FILLER REDEFINES WS-NBRS-VALUES.
004200         05  WS-NBRS OCCURS 6 TIMES
004300                  INDEXED BY WS-NBRS-IDX1.
004400             07  WS-NBR      PIC X(02).
004500             07  FILLER      PIC X(06).
004600     SKIP2
004700 LOCAL-STORAGE SECTION.
004800 01  FILLER.
004900     03  LS-MODULE           PIC X(08).
005000     03  LS-ENCLAVE-RC       PIC S9(9) BINARY SYNC.
005100     03  LS-KEYLEN           PIC S9(9) BINARY SYNC.
005200     03  LS-SUB              PIC S9(9) BINARY SYNC.
005300     03  FILLER REDEFINES LS-SUB.
005400         05  LS-SUB-1        PIC S9(4) BINARY.
005500         05  LS-SUB-2        PIC S9(4) BINARY.
005600     03  LS-SRCHARG          PIC X(05).
005700     SKIP1
005800 01  LS-NBRS-VECTOR.
005900     03  LS-NBRS-NTRYCNT     PIC S9(9) BINARY.
006000     03  LS-NBRS-NTRYLEN     PIC S9(9) BINARY.
006100     03  LS-NBRS-KEY1POS     PIC S9(9) BINARY.
006200     03  LS-NBRS-KEY1LEN     PIC S9(9) BINARY.
006300     03  LS-NBRS-KEY2POS     PIC S9(9) BINARY.
006400     03  LS-NBRS-KEY2LEN     PIC S9(9) BINARY.
006500     03  LS-NBRS-VALUES.
006600         05  LS-NBRS OCCURS 6 TIMES
006700                  INDEXED BY LS-NBRS-IDX1.
006800             07  LS-NBR      PIC X(02).
006900             07  LS-TEXT     PIC X(06).
007000     EJECT
007100 PROCEDURE DIVISION.
007200     SKIP2
007300     CONTINUE.
007400 0000-00-INITIALIZATION.
007500     DISPLAY WS-PGMID
007600          " Testing Heap Sort written in COBOL"
007700     SKIP2
007800*    PRINT TABLE BEFORE SORT
007900     DISPLAY " "
008000     DISPLAY WS-PGMID
008100           " Print table before sort"
008200     PERFORM
008300          VARYING WS-NBRS-IDX1 FROM +1 BY +1
008400          UNTIL WS-NBRS-IDX1 > WS-NBRS-NTRYCNT
008500       SET LS-SUB TO WS-NBRS-IDX1
008600       DISPLAY WS-PGMID
008700            " "
008800            LS-SUB-2
008900            " "
009000            WS-NBRS (WS-NBRS-IDX1)
009100     END-PERFORM
009200     SKIP2
009300     CONTINUE.
009400 0100-00-MAINLINE.
009500
009600     CONTINUE.
009700 0200-00-MAINLINE.
009800     MOVE WS-NBRS-VECTOR TO LS-NBRS-VECTOR
009900     DISPLAY " "
010000     DISPLAY WS-PGMID
010100          " Use VHEAPSRT Heap Sort, ascending order by nbr"
010200
010300     CONTINUE.
010400 0200-10-MAINLINE.
010500     MOVE ZERO TO RETURN-CODE
010600     MOVE "VHEAPSRT" TO LS-MODULE
010700     CALL LS-MODULE
010800          USING LS-NBRS-NTRYCNT
010900                LS-NBRS-NTRYLEN
011000                LS-NBRS-KEY1POS
011100                LS-NBRS-KEY1LEN
011200                LS-NBRS-VALUES
011300
011400*    LE GET RETURN CODE
011500     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
011600     DISPLAY WS-PGMID
011700          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
011800
011900*    PRINT TABLE AFTER SORT
012000     DISPLAY " "
012100     DISPLAY WS-PGMID
012200           " Print table after sort by nbr"
012300     PERFORM
012400          VARYING LS-NBRS-IDX1 FROM +1 BY +1
012500          UNTIL LS-NBRS-IDX1 > LS-NBRS-NTRYCNT
012600       SET LS-SUB TO LS-NBRS-IDX1
012700       DISPLAY WS-PGMID
012800            " "
012900            LS-SUB-2
013000            " "
013100            LS-NBRS (LS-NBRS-IDX1)
013200     END-PERFORM
013300
013400     CONTINUE.
013500 0300-00-MAINLINE.
013600     DISPLAY " "
013700     DISPLAY WS-PGMID
013800          " Use VBINSRCH Binary search to locate nbr"
013900
014000     CONTINUE.
014100 0300-10-MAINLINE.
014200     DISPLAY " "
014300     DISPLAY WS-PGMID
014400          " Find 01 in pos 1"
014500     MOVE -1 TO LS-SUB
014600     MOVE "01" TO LS-SRCHARG
014700     MOVE ZERO TO RETURN-CODE
014800                  LS-SUB
014900     MOVE "VBINSRCH" TO LS-MODULE
015000     CALL LS-MODULE
015100          USING LS-SUB
015200                LS-NBRS-NTRYCNT
015300                LS-NBRS-NTRYLEN
015400                LS-NBRS-KEY1POS
015500                LS-NBRS-KEY1LEN
015600                LS-SRCHARG
015700                LS-NBRS-VALUES
015800
015900*    LE GET RETURN CODE
016000     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
016100     DISPLAY WS-PGMID
016200          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
016300
016400     IF LS-SUB = ZERO
016500       DISPLAY WS-PGMID
016600            "  can not find: " LS-SRCHARG
016700       GO TO 0300-20-MAINLINE
016800     END-IF
016900
017000     DISPLAY WS-PGMID
017100          "  Found: " LS-SRCHARG " in pos: " LS-SUB
017200
017300     CONTINUE.
017400 0300-20-MAINLINE.
017500     DISPLAY " "
017600     DISPLAY WS-PGMID
017700          " Find 06 in pos 6"
017800     MOVE "06" TO LS-SRCHARG
017900     MOVE ZERO TO RETURN-CODE
018000                  LS-SUB
018100     MOVE "VBINSRCH" TO LS-MODULE
018200     CALL LS-MODULE
018300          USING LS-SUB
018400                LS-NBRS-NTRYCNT
018500                LS-NBRS-NTRYLEN
018600                LS-NBRS-KEY1POS
018700                LS-NBRS-KEY1LEN
018800                LS-SRCHARG
018900                LS-NBRS-VALUES
019000
019100*    LE GET RETURN CODE
019200     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
019300     DISPLAY WS-PGMID
019400          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
019500
019600     IF LS-SUB = ZERO
019700       DISPLAY WS-PGMID
019800            "  can not find: " LS-SRCHARG
019900       GO TO 0300-30-MAINLINE
020000     END-IF
020100
020200     DISPLAY WS-PGMID
020300          "  Found: " LS-SRCHARG " in pos: " LS-SUB
020400
020500     CONTINUE.
020600 0300-30-MAINLINE.
020700     DISPLAY " "
020800     DISPLAY WS-PGMID
020900          " Find 03 in pos 3"
021000     MOVE "03" TO LS-SRCHARG
021100     MOVE ZERO TO RETURN-CODE
021200                  LS-SUB
021300     MOVE "VBINSRCH" TO LS-MODULE
021400     CALL LS-MODULE
021500          USING LS-SUB
021600                LS-NBRS-NTRYCNT
021700                LS-NBRS-NTRYLEN
021800                LS-NBRS-KEY1POS
021900                LS-NBRS-KEY1LEN
022000                LS-SRCHARG
022100                LS-NBRS-VALUES
022200
022300*    LE GET RETURN CODE
022400     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
022500     DISPLAY WS-PGMID
022600          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
022700
022800     IF LS-SUB = ZERO
022900       DISPLAY WS-PGMID
023000            "  can not find: " LS-SRCHARG
023100       GO TO 0300-40-MAINLINE
023200     END-IF
023300
023400     DISPLAY WS-PGMID
023500          "  Found: " LS-SRCHARG " in pos: " LS-SUB
023600
023700     CONTINUE.
023800 0300-40-MAINLINE.
023900     DISPLAY " "
024000     DISPLAY WS-PGMID
024100          " Find 04 in pos 4"
024200     MOVE "04" TO LS-SRCHARG
024300     MOVE ZERO TO RETURN-CODE
024400                  LS-SUB
024500     MOVE "VBINSRCH" TO LS-MODULE
024600     CALL LS-MODULE
024700          USING LS-SUB
024800                LS-NBRS-NTRYCNT
024900                LS-NBRS-NTRYLEN
025000                LS-NBRS-KEY1POS
025100                LS-NBRS-KEY1LEN
025200                LS-SRCHARG
025300                LS-NBRS-VALUES
025400
025500*    LE GET RETURN CODE
025600     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
025700     DISPLAY WS-PGMID
025800          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
025900
026000     IF LS-SUB = ZERO
026100       DISPLAY WS-PGMID
026200            "  can not find: " LS-SRCHARG
026300       GO TO 0300-50-MAINLINE
026400     END-IF
026500
026600     DISPLAY WS-PGMID
026700          "  Found: " LS-SRCHARG " in pos: " LS-SUB
026800
026900     CONTINUE.
027000 0300-50-MAINLINE.
027100     DISPLAY " "
027200     DISPLAY WS-PGMID
027300          " Find 99 in pos 0 not found"
027400     MOVE "99" TO LS-SRCHARG
027500     MOVE ZERO TO RETURN-CODE
027600                  LS-SUB
027700     MOVE "VBINSRCH" TO LS-MODULE
027800     CALL LS-MODULE
027900          USING LS-SUB
028000                LS-NBRS-NTRYCNT
028100                LS-NBRS-NTRYLEN
028200                LS-NBRS-KEY1POS
028300                LS-NBRS-KEY1LEN
028400                LS-SRCHARG
028500                LS-NBRS-VALUES
028600
028700*    LE GET RETURN CODE
028800     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
028900     DISPLAY WS-PGMID
029000          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
029100
029200     IF LS-SUB = ZERO
029300       DISPLAY WS-PGMID
029400            "  can not find: " LS-SRCHARG
029500       GO TO 0400-00-MAINLINE
029600     END-IF
029700
029800     DISPLAY WS-PGMID
029900          "  Found: " LS-SRCHARG " in pos: " LS-SUB
030000
030100     CONTINUE.
030200 0400-00-MAINLINE.
030300     DISPLAY " "
030400     DISPLAY WS-PGMID
030500          " Use VHEAPSRT Heap Sort, ascending order by text"
030600
030700     CONTINUE.
030800 0400-10-MAINLINE.
030900     MOVE ZERO TO RETURN-CODE
031000     MOVE "VHEAPSRT" TO LS-MODULE
031100     CALL LS-MODULE
031200          USING LS-NBRS-NTRYCNT
031300                LS-NBRS-NTRYLEN
031400                LS-NBRS-KEY2POS
031500                LS-NBRS-KEY2LEN
031600                LS-NBRS-VALUES
031700
031800*    LE SET RETURN CODE
031900     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
032000     DISPLAY WS-PGMID
032100          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
032200
032300*    PRINT TABLE AFTER SORT
032400     DISPLAY " "
032500     DISPLAY WS-PGMID
032600           " Print table after sort by text"
032700     PERFORM
032800          VARYING LS-NBRS-IDX1 FROM +1 BY +1
032900          UNTIL LS-NBRS-IDX1 > LS-NBRS-NTRYCNT
033000       SET LS-SUB TO LS-NBRS-IDX1
033100       DISPLAY WS-PGMID
033200            " "
033300            LS-SUB-2
033400            " "
033500            LS-NBRS (LS-NBRS-IDX1)
033600     END-PERFORM
033700
033800     CONTINUE.
033900 0500-00-MAINLINE.
034000     DISPLAY " "
034100     DISPLAY WS-PGMID
034200          " Use VBINSRCH Binary search to locate text"
034300
034400     CONTINUE.
034500 0500-10-MAINLINE.
034600     DISPLAY " "
034700     DISPLAY WS-PGMID
034800          " Find FIVE in pos 1"
034900     MOVE -1 TO LS-SUB
035000     MOVE "FIVE" TO LS-SRCHARG
035100     MOVE ZERO TO RETURN-CODE
035200     MOVE "VBINSRCH" TO LS-MODULE
035300     CALL LS-MODULE
035400          USING LS-SUB
035500                LS-NBRS-NTRYCNT
035600                LS-NBRS-NTRYLEN
035700                LS-NBRS-KEY2POS
035800                LS-NBRS-KEY2LEN
035900                LS-SRCHARG
036000                LS-NBRS-VALUES
036100
036200*    LE GET RETURN CODE
036300     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
036400     DISPLAY WS-PGMID
036500          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
036600
036700     IF LS-SUB = ZERO
036800       DISPLAY WS-PGMID
036900            "  can not find: " LS-SRCHARG
037000       GO TO 0500-20-MAINLINE
037100     END-IF
037200
037300     DISPLAY WS-PGMID
037400          "  Found: " LS-SRCHARG " in pos: " LS-SUB
037500
037600     CONTINUE.
037700 0500-20-MAINLINE.
037800     DISPLAY " "
037900     DISPLAY WS-PGMID
038000          " Find TWO in pos 6"
038100     MOVE "TWO" TO LS-SRCHARG
038200     MOVE ZERO TO RETURN-CODE
038300                  LS-SUB
038400     MOVE "VBINSRCH" TO LS-MODULE
038500     CALL LS-MODULE
038600          USING LS-SUB
038700                LS-NBRS-NTRYCNT
038800                LS-NBRS-NTRYLEN
038900                LS-NBRS-KEY2POS
039000                LS-NBRS-KEY2LEN
039100                LS-SRCHARG
039200                LS-NBRS-VALUES
039300
039400*    LE GET RETURN CODE
039500     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
039600     DISPLAY WS-PGMID
039700          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
039800
039900     IF LS-SUB = ZERO
040000       DISPLAY WS-PGMID
040100            "  can not find: " LS-SRCHARG
040200       GO TO 0500-30-MAINLINE
040300     END-IF
040400
040500     DISPLAY WS-PGMID
040600          "  Found: " LS-SRCHARG " in pos: " LS-SUB
040700
040800     CONTINUE.
040900 0500-30-MAINLINE.
041000     DISPLAY " "
041100     DISPLAY WS-PGMID
041200          " Find ONE in pos 3"
041300     MOVE "ONE" TO LS-SRCHARG
041400     MOVE ZERO TO RETURN-CODE
041500                  LS-SUB
041600     MOVE "VBINSRCH" TO LS-MODULE
041700     CALL LS-MODULE
041800          USING LS-SUB
041900                LS-NBRS-NTRYCNT
042000                LS-NBRS-NTRYLEN
042100                LS-NBRS-KEY2POS
042200                LS-NBRS-KEY2LEN
042300                LS-SRCHARG
042400                LS-NBRS-VALUES
042500
042600*    LE GET RETURN CODE
042700     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
042800     DISPLAY WS-PGMID
042900          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
043000
043100     IF LS-SUB = ZERO
043200       DISPLAY WS-PGMID
043300            "  can not find: " LS-SRCHARG
043400       GO TO 0500-40-MAINLINE
043500     END-IF
043600
043700     DISPLAY WS-PGMID
043800          "  Found: " LS-SRCHARG " in pos: " LS-SUB
043900
044000     CONTINUE.
044100 0500-40-MAINLINE.
044200     DISPLAY " "
044300     DISPLAY WS-PGMID
044400          " Find SIX in pos 4"
044500     MOVE "SIX" TO LS-SRCHARG
044600     MOVE ZERO TO RETURN-CODE
044700                  LS-SUB
044800     MOVE "VBINSRCH" TO LS-MODULE
044900     CALL LS-MODULE
045000          USING LS-SUB
045100                LS-NBRS-NTRYCNT
045200                LS-NBRS-NTRYLEN
045300                LS-NBRS-KEY2POS
045400                LS-NBRS-KEY2LEN
045500                LS-SRCHARG
045600                LS-NBRS-VALUES
045700
045800*    LE SET RETURN CODE
045900     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
046000     DISPLAY WS-PGMID
046100          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
046200
046300     IF LS-SUB = ZERO
046400       DISPLAY WS-PGMID
046500            "  can not find: " LS-SRCHARG
046600       GO TO 0500-50-MAINLINE
046700     END-IF
046800
046900     DISPLAY WS-PGMID
047000          "  Found: " LS-SRCHARG " in pos: " LS-SUB
047100
047200     CONTINUE.
047300 0500-50-MAINLINE.
047400     DISPLAY " "
047500     DISPLAY WS-PGMID
047600          " Find ZERO in pos 0 not found"
047700     MOVE "ZERO" TO LS-SRCHARG
047800     MOVE ZERO TO RETURN-CODE
047900                  LS-SUB
048000     MOVE "VBINSRCH" TO LS-MODULE
048100     CALL LS-MODULE
048200          USING LS-SUB
048300                LS-NBRS-NTRYCNT
048400                LS-NBRS-NTRYLEN
048500                LS-NBRS-KEY2POS
048600                LS-NBRS-KEY2LEN
048700                LS-SRCHARG
048800                LS-NBRS-VALUES
048900
049000*    LE GET RETURN CODE
049100     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
049200     DISPLAY WS-PGMID
049300          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
049400
049500     IF LS-SUB = ZERO
049600       DISPLAY WS-PGMID
049700            "  can not find: " LS-SRCHARG
049800       GO TO 0600-00-MAINLINE
049900     END-IF
050000
050100     DISPLAY WS-PGMID
050200          "  Found: " LS-SRCHARG " in pos: " LS-SUB
050300
050400     CONTINUE.
050500 0600-00-MAINLINE.
050600     DISPLAY " "
050700     DISPLAY WS-PGMID
050800          " Use VBINSRH1 Binary search to locate text"
050900
051000     CONTINUE.
051100 0600-10-MAINLINE.
051200     DISPLAY " "
051300     DISPLAY WS-PGMID
051400          " Find FIVE in pos 1"
051500     MOVE -1 TO LS-SUB
051600     MOVE "FIVE" TO LS-SRCHARG
051700     MOVE ZERO TO RETURN-CODE
051800     MOVE "VBINSRH1" TO LS-MODULE
051900     CALL LS-MODULE
052000          USING LS-SUB
052100                LS-NBRS-NTRYCNT
052200                LS-NBRS-NTRYLEN
052300                LS-NBRS-KEY2POS
052400                LS-NBRS-KEY2LEN
052500                LS-SRCHARG
052600                LS-NBRS-VALUES
052700
052800*    LE GET RETURN CODE
052900     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
053000     DISPLAY WS-PGMID
053100          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
053200
053300     IF LS-SUB = ZERO
053400       DISPLAY WS-PGMID
053500            "  can not find: " LS-SRCHARG
053600       GO TO 0600-20-MAINLINE
053700     END-IF
053800
053900     DISPLAY WS-PGMID
054000          "  Found: " LS-SRCHARG " in pos: " LS-SUB
054100
054200     CONTINUE.
054300 0600-20-MAINLINE.
054400     DISPLAY " "
054500     DISPLAY WS-PGMID
054600          " Find TWO in pos 6"
054700     MOVE "TWO" TO LS-SRCHARG
054800     MOVE ZERO TO RETURN-CODE
054900                  LS-SUB
055000     MOVE "VBINSRH1" TO LS-MODULE
055100     CALL LS-MODULE
055200          USING LS-SUB
055300                LS-NBRS-NTRYCNT
055400                LS-NBRS-NTRYLEN
055500                LS-NBRS-KEY2POS
055600                LS-NBRS-KEY2LEN
055700                LS-SRCHARG
055800                LS-NBRS-VALUES
055900
056000*    LE GET RETURN CODE
056100     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
056200     DISPLAY WS-PGMID
056300          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
056400
056500     IF LS-SUB = ZERO
056600       DISPLAY WS-PGMID
056700            "  can not find: " LS-SRCHARG
056800       GO TO 0600-30-MAINLINE
056900     END-IF
057000
057100     DISPLAY WS-PGMID
057200          "  Found: " LS-SRCHARG " in pos: " LS-SUB
057300
057400     CONTINUE.
057500 0600-30-MAINLINE.
057600     DISPLAY " "
057700     DISPLAY WS-PGMID
057800          " Find ONE in pos 3"
057900     MOVE "ONE" TO LS-SRCHARG
058000     MOVE ZERO TO RETURN-CODE
058100                  LS-SUB
058200     MOVE "VBINSRH1" TO LS-MODULE
058300     CALL LS-MODULE
058400          USING LS-SUB
058500                LS-NBRS-NTRYCNT
058600                LS-NBRS-NTRYLEN
058700                LS-NBRS-KEY2POS
058800                LS-NBRS-KEY2LEN
058900                LS-SRCHARG
059000                LS-NBRS-VALUES
059100
059200*    LE GET RETURN CODE
059300     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
059400     DISPLAY WS-PGMID
059500          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
059600
059700     IF LS-SUB = ZERO
059800       DISPLAY WS-PGMID
059900            "  can not find: " LS-SRCHARG
060000       GO TO 0600-40-MAINLINE
060100     END-IF
060200
060300     DISPLAY WS-PGMID
060400          "  Found: " LS-SRCHARG " in pos: " LS-SUB
060500
060600     CONTINUE.
060700 0600-40-MAINLINE.
060800     DISPLAY " "
060900     DISPLAY WS-PGMID
061000          " Find SIX in pos 4"
061100     MOVE "SIX" TO LS-SRCHARG
061200     MOVE ZERO TO RETURN-CODE
061300                  LS-SUB
061400     MOVE "VBINSRH1" TO LS-MODULE
061500     CALL LS-MODULE
061600          USING LS-SUB
061700                LS-NBRS-NTRYCNT
061800                LS-NBRS-NTRYLEN
061900                LS-NBRS-KEY2POS
062000                LS-NBRS-KEY2LEN
062100                LS-SRCHARG
062200                LS-NBRS-VALUES
062300
062400*    LE GET RETURN CODE
062500     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
062600     DISPLAY WS-PGMID
062700          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
062800
062900     IF LS-SUB = ZERO
063000       DISPLAY WS-PGMID
063100            "  can not find: " LS-SRCHARG
063200       GO TO 0600-50-MAINLINE
063300     END-IF
063400
063500     DISPLAY WS-PGMID
063600          "  Found: " LS-SRCHARG " in pos: " LS-SUB
063700
063800     CONTINUE.
063900 0600-50-MAINLINE.
064000     DISPLAY " "
064100     DISPLAY WS-PGMID
064200          " Find ZERO in pos 0 not found"
064300     MOVE "ZERO" TO LS-SRCHARG
064400     MOVE ZERO TO RETURN-CODE
064500                  LS-SUB
064600     MOVE "VBINSRH1" TO LS-MODULE
064700     CALL LS-MODULE
064800          USING LS-SUB
064900                LS-NBRS-NTRYCNT
065000                LS-NBRS-NTRYLEN
065100                LS-NBRS-KEY2POS
065200                LS-NBRS-KEY2LEN
065300                LS-SRCHARG
065400                LS-NBRS-VALUES
065500
065600*    LE GET RETURN CODE
065700     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
065800     DISPLAY WS-PGMID
065900          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
066000
066100     IF LS-SUB = ZERO
066200       DISPLAY WS-PGMID
066300            "  can not find: " LS-SRCHARG
066400       GO TO 0600-60-MAINLINE
066500     END-IF
066600
066700     DISPLAY WS-PGMID
066800          "  Found: " LS-SRCHARG " in pos: " LS-SUB
066900
067000     CONTINUE.
067100 0600-60-MAINLINE.
067200     DISPLAY " "
067300     DISPLAY WS-PGMID
067400          " Find AAAAA in pos 1 FIVE"
067500     MOVE "AAAAA" TO LS-SRCHARG
067600     MOVE ZERO TO RETURN-CODE
067700                  LS-SUB
067800     MOVE "VBINSRH1" TO LS-MODULE
067900     CALL LS-MODULE
068000          USING LS-SUB
068100                LS-NBRS-NTRYCNT
068200                LS-NBRS-NTRYLEN
068300                LS-NBRS-KEY2POS
068400                LS-NBRS-KEY2LEN
068500                LS-SRCHARG
068600                LS-NBRS-VALUES
068700
068800*    LE GET RETURN CODE
068900     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
069000     DISPLAY WS-PGMID
069100          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
069200
069300     IF LS-SUB = ZERO
069400       DISPLAY WS-PGMID
069500            "  can not find: " LS-SRCHARG
069600       GO TO 0600-70-MAINLINE
069700     END-IF
069800
069900     DISPLAY WS-PGMID
070000          "  Found: " LS-SRCHARG " in pos: " LS-SUB
070100
070200     CONTINUE.
070300 0600-70-MAINLINE.
070400     DISPLAY " "
070500     DISPLAY WS-PGMID
070600          " Find KKKKK in pos 3 ONE"
070700     MOVE "KKKKK" TO LS-SRCHARG
070800     MOVE ZERO TO RETURN-CODE
070900                  LS-SUB
071000     MOVE "VBINSRH1" TO LS-MODULE
071100     CALL LS-MODULE
071200          USING LS-SUB
071300                LS-NBRS-NTRYCNT
071400                LS-NBRS-NTRYLEN
071500                LS-NBRS-KEY2POS
071600                LS-NBRS-KEY2LEN
071700                LS-SRCHARG
071800                LS-NBRS-VALUES
071900
072000*    LE GET RETURN CODE
072100     CALL 'CEE3GRC' USING LS-ENCLAVE-RC OMITTED
072200     DISPLAY WS-PGMID
072300          "  LE/COBOL RETURN-CODE = " LS-ENCLAVE-RC
072400
072500     IF LS-SUB = ZERO
072600       DISPLAY WS-PGMID
072700            "  can not find: " LS-SRCHARG
072800       GO TO 0700-00-MAINLINE
072900     END-IF
073000
073100     DISPLAY WS-PGMID
073200          "  Found: " LS-SRCHARG " in pos: " LS-SUB
073300
073400     CONTINUE.
073500 0700-00-MAINLINE.
073600     SKIP2
073700     CONTINUE.
073800 9000-00-RETURN.
073900*    * ------------------------------------------------------- *
074000*    * RETURN TO CALLER
074100*    * ------------------------------------------------------- *
074200
074300     DISPLAY WS-PGMID
074400          " DONE WITH ASTSRT2B"
074500
074600     EXIT PROGRAM.
074700     GOBACK.
./ ADD NAME=ASTSTR1B 0199-18037-19326-1524-09507-03954-00000-APLKS   34
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSTR1B.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------------ *
000600* ARCHITECTURE SERVICES FACILITY
000700* STRING SERVICES
000800* COBOL ROUTINE
000900*
001000* PROGRAM ID: ASTSTR1B
001100*      TITLE: STRING SERVICES BATCH TEST PROGRAM
001200*
001300* ------------------------------------------------------------ *
001400* MAINTENANCE HISTORY:
001500*
001600* 01/01/2007
001700* 03/11/2015 made more test friendly
001800* 02/06/2018 match test case number up with the action code
001900* ------------------------------------------------------------ *
002000     SKIP2
002100 DATA DIVISION.
002200     SKIP2
002300 WORKING-STORAGE SECTION.
002400 01  FILLER.
002500     03  WS-EYE-CATCHER PIC X(25)
002600              VALUE "BUZZARD CREEK TECH, INC. ".
002700     03  WS-PGMID       PIC X(08) VALUE "ASTSTR1B".
002800
002900 01  WS-PARM.
003000     03  WS-PARM-LENGTH      PIC S9(9) BINARY.
003100     03  WS-PARM-STMT.
003200         05  WS-PARM-LEN     PIC  9(4) BINARY.
003300         05  WS-PARM-TEXT    PIC X(256).
003400
003500     COPY AS5CTOK.
003600
003700 01  AS-REQUEST-OPTIONS.
003800*    CONTROL BLOCK NAME ASU9LA02
003900     05  RO-DFLT-STRIP-CHR   PIC X(01) VALUE "+".
004000     05  RO-DFLT-DELIM-CHR   PIC X(01) VALUE "+".
004100     05  RO-DFLT-PAD-CHR     PIC X(01) VALUE "*".
004200     05  RO-OPTION-FLAG      PIC X(01) VALUE LOW-VALUE.
004300       88  RO-FLAG-NONE          VALUE X'00'.
004400       88  RO-FLAG-UC            VALUE X'80'.
004500       88  RO-FLAG-CASE          VALUE X'40'.
004600       88  RO-FLAG-CASE-CONT     VALUE X'41'.
004700       88  RO-FLAG-BOTH          VALUE X'30'.
004800       88  RO-FLAG-LEAD          VALUE X'20'.
004900       88  RO-FLAG-TRAIL         VALUE X'10'.
005000       88  RO-FLAG-CONT          VALUE X'01'.
005100     05  FILLER VALUE LOW-VALUE.
005200         07  FILLER          PIC X(03).
005300         07  RO-PSTATE       PIC X(01).
005400     05  RO-START            PIC  9(4) COMP VALUE ZERO.
005500     05  RO-COUNT            PIC  9(4) COMP VALUE ZERO.
005600     05  FILLER              PIC X(06) VALUE LOW-VALUE.
005700     05  RO-PSA-LEN          PIC  9(4) COMP VALUE ZERO.
005800     05  FILLER.
005900         07  RO-PSA-LFUCHR   PIC X(01)  VALUE LOW-VALUE.
006000         07  RO-PSA-LFUOFF   PIC X(01)  VALUE LOW-VALUE.
006100         07  RO-PSA-NXTPOS   PIC  9(4)  COMP VALUE ZERO.
006200         07  FILLER          PIC X(28)  VALUE LOW-VALUE.
006300         07  FILLER          PIC X(256) VALUE LOW-VALUE.
006400
006500 01  WS-SOURCE-STRING-1.
006600*    CONTROL BLOCK NAME ASU9LA03
006700     05  FILLER              PIC S9(4) COMP VALUE +51.
006800     05  FILLER              PIC X(51)
006900     VALUE "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++".
007000**   VALUE "Now is the time for all good men MEN MEMMEN men    ".
007100     05  FILLER              PIC X(5) VALUE "#####".
007200
007300 01  WS-SOURCE-STRING-2.
007400     05  FILLER           PIC S9(4) COMP VALUE +20.
007500     05  FILLER           PIC X(20)
007600     VALUE "+How+now+brown+cow++".
007700     05  FILLER           PIC X(5) VALUE "#####".
007800
007900 01  WS-SOURCE-STRING-3.
008000     05  FILLER           PIC S9(4) COMP VALUE +17.
008100     05  FILLER           PIC X(17) VALUE "1st National Bank".
008200     05  FILLER           PIC X(5) VALUE "#####".
008300
008400 01  WS-SOURCE-STRING-4.
008500     05  FILLER           PIC S9(4) COMP VALUE +27.
008600     05  FILLER           PIC X(27)
008700     VALUE "+++++1ST+NATIONAL+BANK+++++".
008800     05  FILLER           PIC X(5) VALUE "#####".
008900
009000 01  WS-SOURCE-STRING-5.
009100     05  FILLER           PIC S9(4) COMP VALUE +26.
009200     05  FILLER           PIC X(26)
009300     VALUE "++TO++BE,+OR+NOT+TO+BE++++".
009400     05  FILLER           PIC X(5) VALUE "#####".
009500
009600 01  WS-SOURCE-STRING-6.
009700     05  FILLER           PIC S9(4) COMP VALUE +09.
009800     05  FILLER           PIC X(09)
009900     VALUE "123456789".
010000     05  FILLER           PIC X(5) VALUE "#####".
010100
010200 01  WS-SOURCE-STRING-7.
010300     05  FILLER           PIC S9(4) COMP VALUE +07.
010400     05  FILLER           PIC X(7) VALUE "$234.56".
010500     05  FILLER           PIC X(5) VALUE "#####".
010600
010700 01  WS-SOURCE-STRING-8.
010800     05  FILLER           PIC S9(4) COMP VALUE +09.
010900     05  FILLER           PIC X(9) VALUE "-1,234.56".
011000     05  FILLER           PIC X(5) VALUE "#####".
011100
011200 01  WS-SOURCE-STRING-9.
011300     05  FILLER           PIC S9(4) COMP VALUE +09.
011400     05  FILLER           PIC X(9) VALUE "$-,--4.56".
011500     05  FILLER           PIC X(5) VALUE "#####".
011600
011700 01  WS-SOURCE-STRING-10.
011800     05  FILLER           PIC S9(4) COMP VALUE +09.
011900     05  FILLER           PIC X(9) VALUE "0123,456 ".
012000     05  FILLER           PIC X(5) VALUE "#####".
012100
012200 01  WS-SOURCE-STRING-11.
012300     05  FILLER           PIC S9(4) COMP VALUE +86.
012400     05  FILLER           PIC X(86)
012500         VALUE 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX
012600-              'YZ0123456789.<(+|&!$*);¬-/,%_>?:#@="'.
012700     05  FILLER           PIC X(5) VALUE "#####".
012800
012900 01  WS-SOURCE-STRING-12.
013000     05  FILLER           PIC S9(4) COMP VALUE +3.
013100     05  FILLER           PIC X(3) VALUE "abc".
013200     05  FILLER           PIC X(5) VALUE "#####".
013300
013400 01  WS-SOURCE-STRING-13.
013500     05  FILLER           PIC S9(4) COMP VALUE +3.
013600     05  FILLER           PIC X(3) VALUE "DEF".
013700     05  FILLER           PIC X(5) VALUE "#####".
013800
013900 01  WS-SOURCE-STRING-14.
014000     05  FILLER           PIC S9(4) COMP VALUE +3.
014100     05  FILLER           PIC X(3) VALUE "ghi".
014200     05  FILLER           PIC X(5) VALUE "#####".
014300
014400 01  WS-SOURCE-STRING-15.
014500     05  FILLER           PIC S9(4) COMP VALUE +3.
014600     05  FILLER           PIC X(3) VALUE "JKL".
014700     05  FILLER           PIC X(5) VALUE "#####".
014800
014900 01  WS-SOURCE-STRING-16.
015000     05  FILLER           PIC S9(4) COMP VALUE +03.
015100     05  FILLER           PIC X(3) VALUE "64K".
015200     05  FILLER           PIC X(5) VALUE "#####".
015300
015400 01  WS-SOURCE-STRING-17.
015500     05  FILLER           PIC S9(4) COMP VALUE +011.
015600     05  FILLER           PIC X(11) VALUE "123.456E+12".
015700     05  FILLER           PIC X(5) VALUE "#####".
015800
015900 01  WS-SOURCE-STRING-18.
016000     05  FILLER           PIC S9(4) COMP VALUE +012.
016100     05  FILLER           PIC X(12) VALUE "0.123456E+15".
016200     05  FILLER           PIC X(5) VALUE "#####".
016300
016400 01  WS-SOURCE-STRING-19.
016500     05  FILLER           PIC S9(4) COMP VALUE +011.
016600     05  FILLER           PIC X(11) VALUE "-123.456E-3".
016700     05  FILLER           PIC X(5) VALUE "#####".
016800
016900 01  WS-SOURCE-STRING-20.
017000     05  FILLER           PIC S9(4) COMP VALUE +11.
017100     05  FILLER           PIC S9(9)V99
017200                   VALUE 1321321.77.
017300     05  FILLER           PIC X(5) VALUE "#####".
017400
017500 01  WS-SOURCE-STRING-21.
017600     05  FILLER           PIC S9(4) COMP VALUE +11.
017700     05  FILLER           PIC S9(8)V999
017800                   VALUE 1321321.888.
017900     05  FILLER           PIC X(5) VALUE "#####".
018000
018100 01  WS-SOURCE-STRING-22.
018200     05  FILLER           PIC S9(4) COMP VALUE +18.
018300     05  FILLER           PIC S9(10)V9(8)
018400                   VALUE 1321321321.87654321.
018500     05  FILLER           PIC X(5) VALUE "#####".
018600
018700 01  WS-SOURCE-STRING-23.
018800     05  FILLER           PIC S9(4) COMP VALUE +18.
018900     05  FILLER           PIC S9(10)V9(8)
019000                   VALUE 1321321321.00004321.
019100     05  FILLER           PIC X(5) VALUE "#####".
019200
019300 01  WS-SOURCE-STRING-24.
019400     05  FILLER           PIC S9(4) COMP VALUE +18.
019500     05  FILLER           PIC S9(12)V9(6)
019600                   VALUE 1000021001.000543.
019700     05  FILLER           PIC X(5) VALUE "#####".
019800
019900 01  WS-SOURCE-STRING-25.
020000     05  FILLER           PIC S9(4) COMP VALUE +5.
020100     05  FILLER           PIC S9(5) VALUE -10200.
020200     05  FILLER           PIC X(5) VALUE "#####".
020300
020400 01  WS-SOURCE-STRING-26.
020500     05  FILLER           PIC S9(4) COMP VALUE +6.
020600     05  FILLER           PIC S9(9)V99 COMP-3
020700                   VALUE 1321321.77.
020800     05  FILLER           PIC X(5) VALUE "#####".
020900
021000 01  WS-SOURCE-STRING-27.
021100     05  FILLER           PIC S9(4) COMP VALUE +6.
021200     05  FILLER           PIC S9(8)V999 COMP-3
021300                   VALUE 1321321.888.
021400     05  FILLER           PIC X(5) VALUE "#####".
021500
021600 01  WS-SOURCE-STRING-28.
021700     05  FILLER           PIC S9(4) COMP VALUE +10.
021800     05  FILLER           PIC S9(10)V9(8) COMP-3
021900                   VALUE 1321321321.87654321.
022000     05  FILLER           PIC X(5) VALUE "#####".
022100
022200 01  WS-SOURCE-STRING-29.
022300     05  FILLER           PIC S9(4) COMP VALUE +10.
022400     05  FILLER           PIC S9(10)V9(8) COMP-3
022500                   VALUE 1321321321.00004321.
022600     05  FILLER           PIC X(5) VALUE "#####".
022700
022800 01  WS-SOURCE-STRING-30.
022900     05  FILLER           PIC S9(4) COMP VALUE +9.
023000     05  FILLER           PIC S9(10)V9(6) COMP-3
023100                   VALUE 1000021001.000543.
023200     05  FILLER           PIC X(5) VALUE "#####".
023300
023400 01  WS-SOURCE-STRING-31.
023500     05  FILLER           PIC S9(4) COMP VALUE +3.
023600     05  FILLER           PIC S9(5) COMP-3
023700                   VALUE -10200.
023800     05  FILLER           PIC X(5) VALUE "#####".
023900
024000 01  WS-SOURCE-STRING-32.
024100     05  FILLER           PIC S9(4) COMP VALUE +10.
024200     05  FILLER           PIC S9(9)V9(9) COMP-3
024300                   VALUE 100000001.100000001.
024400     05  FILLER           PIC X(5) VALUE "#####".
024500
024600 01  WS-SOURCE-STRING-33.
024700     05  FILLER           PIC S9(4) COMP VALUE +04.
024800     05  FILLER           PIC X(11) VALUE '0.75'.
024900     05  FILLER           PIC X(5) VALUE "#####".
025000
025100 01  WS-SOURCE-STRING-34.
025200     05  FILLER           PIC S9(4) COMP VALUE +05.
025300     05  FILLER           PIC S9(3)V9(2)
025400                   VALUE 0.75.
025500     05  FILLER           PIC X(5) VALUE "#####".
025600
025700 01  WS-SOURCE-STRING-35.
025800     05  FILLER           PIC S9(4) COMP VALUE +03.
025900     05  FILLER           PIC S9(3)V9(2) COMP-3
026000                   VALUE 0.75.
026100     05  FILLER           PIC X(5) VALUE "#####".
026200
026300 01  TEMPLATE-0.
026400     05  TOKEN-0-TYPE        PIC X(01) VALUE X'01'.
026500     05  TMPLT-0-LEN         PIC S9(4) COMP VALUE 1.
026600     05  TMPLT-0-TXT         PIC X(1)  VALUE ",".
026700     05  TMPLT-0-TXT-Z       PIC X(5)  VALUE "$$$$$".
026800
026900 01  TEMPLATE-1.
027000     05  TOKEN-1-TYPE        PIC X(01) VALUE X'04'.
027100     05  TOKEN-1-SIZE        PIC S9(4) COMP VALUE +12.
027200     05  TMPLT-1-LEN         PIC S9(4) COMP VALUE ZERO.
027300     05  TMPLT-1-TXT-A       PIC S9(9) COMP.
027400     05  TMPLT-1-TXT-B       PIC S9(9) COMP.
027500     05  TMPLT-1-TXT-C       PIC S9(9) COMP.
027600     05  TMPLT-1-TXT-Z       PIC X(5)  VALUE "$$$$$".
027700
027800 01  TEMPLATE-2.
027900     05  TOKEN-2-TYPE        PIC X(01) VALUE X'04'.
028000     05  TOKEN-2-SIZE        PIC S9(4) COMP VALUE +4.
028100     05  TMPLT-2-LEN         PIC S9(4) COMP VALUE ZERO.
028200     05  TMPLT-2-TXT         PIC S9(9) COMP VALUE ZERO.
028300     05  TMPLT-2-TXT-Z       PIC X(5)  VALUE "$$$$$".
028400
028500 01  TEMPLATE-3.
028600     05  TOKEN-3-TYPE        PIC X(01) VALUE X'04'.
028700     05  TOKEN-3-SIZE        PIC S9(4) COMP VALUE +80.
028800     05  TMPLT-3-LEN         PIC S9(4) COMP VALUE ZERO.
028900     05  TMPLT-3-TXT         PIC X(80) VALUE LOW-VALUE.
029000     05  TMPLT-3-TXT-Z       PIC X(5)  VALUE "$$$$$".
029100
029200 01  TEMPLATE-4.
029300     05  TOKEN-4-TYPE        PIC X(01) VALUE X'02'.
029400     05  TMPLT-4-LEN         PIC S9(4) COMP VALUE +3.
029500     05  TMPLT-4-TXT.
029600         07  FILLER          PIC X(3)  VALUE "MEN".
029700         07  FILLER          PIC X(5)  VALUE "@@@@@".
029800
029900 01  TEMPLATE-5.
030000     05  TOKEN-5-TYPE        PIC X(01) VALUE X'04'.
030100     05  TOKEN-5-SIZE        PIC S9(4) COMP VALUE +80.
030200     05  TMPLT-5-LEN         PIC S9(4) COMP VALUE ZERO.
030300     05  TMPLT-5-TXT         PIC X(80) VALUE LOW-VALUE.
030400     05  TMPLT-5-TXT-Z       PIC X(5)  VALUE "$$$$$".
030500
030600 01  TEMPLATE-6.
030700     05  TOKEN-6-TYPE        PIC X(01) VALUE X'04'.
030800     05  TOKEN-6-SIZE        PIC S9(4) COMP VALUE +55.
030900     05  TMPLT-6-LEN         PIC S9(4) COMP VALUE ZERO.
031000     05  TMPLT-6-TXT         PIC X(55) VALUE LOW-VALUE.
031100     05  TMPLT-6-TXT-Z       PIC X(5)  VALUE "$$$$$".
031200
031300 01  TEMPLATE-7.
031400     05  TOKEN-7-TYPE        PIC X(01) VALUE X'04'.
031500     05  TOKEN-7-SIZE        PIC S9(4) COMP VALUE +26.
031600     05  TMPLT-7-LEN         PIC S9(4) COMP VALUE ZERO.
031700     05  TMPLT-7-TXT         PIC X(26) VALUE LOW-VALUE.
031800     05  TMPLT-7-TXT-Z       PIC X(5)  VALUE "$$$$$".
031900
032000 01  TEMPLATE-8.
032100     05  TOKEN-8-TYPE        PIC X(01) VALUE X'02'.
032200     05  TMPLT-8-LEN         PIC S9(4) COMP VALUE +5.
032300     05  TMPLT-8-TXT.
032400         07  FILLER          PIC X(5)  VALUE "GOOD+".
032500         07  FILLER          PIC X(5)  VALUE "@@@@@".
032600
032700 01  TEMPLATE-11.
032800     05  TOKEN-11-TYPE       PIC X(01) VALUE X'04'.
032900     05  TOKEN-11-SIZE       PIC S9(4) COMP VALUE +50.
033000     05  TMPLT-11-LEN        PIC S9(4) COMP VALUE ZERO.
033100     05  TMPLT-11-TXT.
033200         07  TMPLT-11-TOK-TYPE  PIC X(01).
033300         07  TMPLT-11-TOK-STYPE PIC X(01).
033400         07  TMPLT-11-TOK-LEN   PIC S9(4) COMP.
033500         07  FILLER.
033600             09  TMPLT-11-TOK-DIGIT PIC S9(4) COMP.
033700             09  TMPLT-11-TOK-SCALE PIC S9(4) COMP.
033800             09  TMPLT-11-TOK-EXP   PIC S9(4) COMP.
033900             09  TMPLT-11-TOK-NBR   PIC X(40).
034000     05  TMPLT-11-TXT-Z      PIC X(5)  VALUE "$$$$$".
034100
034200 01  TEMPLATE-12.
034300     05  TOKEN-12-TYPE       PIC X(01) VALUE X'04'.
034400     05  TOKEN-12-SIZE       PIC S9(4) COMP VALUE +80.
034500     05  TMPLT-12-LEN        PIC S9(4) COMP VALUE ZERO.
034600     05  TMPLT-12-TXT        PIC X(80) VALUE LOW-VALUE.
034700     05  TMPLT-12-TXT-Z      PIC X(5)  VALUE "$$$$$".
034800
034900 01  TEMPLATE-13.
035000     05  TOKEN-13-TYPE       PIC X(01) VALUE X'04'.
035100     05  TOKEN-13-SIZE       PIC S9(4) COMP VALUE +8.
035200     05  TMPLT-13-LEN        PIC S9(4) COMP VALUE ZERO.
035300     05  TMPLT-13-TXT        PIC X(8)  VALUE LOW-VALUE.
035400     05  TMPLT-13-TXT-Z      PIC X(5)  VALUE "$$$$$".
035500
035600 01  TEMPLATE-DUMMY.
035700     05  TOKEN-14-TYPE       PIC X(01) VALUE X'04'.
035800     05  TOKEN-14-SIZE       PIC S9(4) COMP VALUE ZERO.
035900     05  TMPLT-14-LEN        PIC S9(4) COMP VALUE ZERO.
036000     05  TMPLT-14-TXT        PIC X(01) VALUE LOW-VALUE.
036100     05  TMPLT-14-TXT-Z      PIC X(05) VALUE "$$$$$".
036200
036300 01  TEMPLATE-15.
036400     05  TOKEN-15-TYPE       PIC X(01) VALUE X'04'.
036500     05  TOKEN-15-SIZE       PIC S9(4) COMP VALUE +86.
036600     05  TMPLT-15-LEN        PIC S9(4) COMP VALUE ZERO.
036700     05  TMPLT-15-TXT        PIC X(86) VALUE LOW-VALUE.
036800     05  TMPLT-15-TXT-Z      PIC X(5)  VALUE "$$$$$".
036900
037000 01  TEMPLATE-16.
037100     05  TOKEN-16-TYPE       PIC X(01) VALUE X'04'.
037200     05  TOKEN-16-SIZE       PIC S9(4) COMP VALUE +86.
037300     05  TMPLT-16-LEN        PIC S9(4) COMP VALUE ZERO.
037400     05  TMPLT-16-TXT        PIC X(86) VALUE LOW-VALUE.
037500     05  TMPLT-16-TXT-Z      PIC X(5)  VALUE "$$$$$".
037600
037700 01  TEMPLATE-17.
037800     05  TOKEN-17-TYPE       PIC X(01) VALUE X'04'.
037900     05  TOKEN-17-SIZE       PIC S9(4) COMP VALUE +86.
038000     05  TMPLT-17-LEN        PIC S9(4) COMP VALUE ZERO.
038100     05  TMPLT-17-TXT        PIC X(86) VALUE LOW-VALUE.
038200     05  TMPLT-17-TXT-Z      PIC X(5)  VALUE "$$$$$".
038300
038400 01  TEMPLATE-18.
038500     05  TOKEN-18-TYPE       PIC X(01) VALUE X'02'.
038600     05  TMPLT-18-LEN        PIC S9(4) COMP VALUE +4.
038700     05  TMPLT-18-TXT.
038800         07  FILLER          PIC X(4)  VALUE "+How".
038900         07  FILLER          PIC X(5)  VALUE "@@@@@".
039000
039100 01  TEMPLATE-19.
039200     05  TOKEN-19-TYPE       PIC X(01) VALUE X'02'.
039300     05  TMPLT-19-LEN        PIC S9(4) COMP VALUE +5.
039400     05  TMPLT-19-TXT.
039500         07  FILLER          PIC X(5)  VALUE "brown".
039600         07  FILLER          PIC X(5)  VALUE "@@@@@".
039700
039800 01  TEMPLATE-20.
039900     05  TOKEN-20-TYPE       PIC X(01) VALUE X'02'.
040000     05  TMPLT-20-LEN        PIC S9(4) COMP VALUE +4.
040100     05  TMPLT-20-TXT.
040200         07  FILLER          PIC X(4)  VALUE "cow+".
040300         07  FILLER          PIC X(5)  VALUE "@@@@@".
040400
040500 01  TEMPLATE-21.
040600     05  TOKEN-21-TYPE       PIC X(01) VALUE X'02'.
040700     05  TMPLT-21-LEN        PIC S9(4) COMP VALUE +5.
040800     05  TMPLT-21-TXT.
040900         07  FILLER          PIC X(5)  VALUE "+How+".
041000         07  FILLER          PIC X(5)  VALUE "@@@@@".
041100
041200 01  TEMPLATE-22.
041300     05  TOKEN-22-TYPE       PIC X(01) VALUE X'02'.
041400     05  TMPLT-22-LEN        PIC S9(4) COMP VALUE +6.
041500     05  TMPLT-22-TXT.
041600         07  FILLER          PIC X(6)  VALUE "+cow++".
041700         07  FILLER          PIC X(5)  VALUE "@@@@@".
041800
041900 01  TEMPLATE-23.
042000     05  TOKEN-23-TYPE       PIC X(01) VALUE X'02'.
042100     05  TMPLT-23-LEN        PIC S9(4) COMP VALUE +1.
042200     05  TMPLT-23-TXT.
042300         07  FILLER          PIC X(1)  VALUE "c".
042400         07  FILLER          PIC X(5)  VALUE "@@@@@".
042500
042600 01  TEMPLATE-24.
042700     05  TOKEN-24-TYPE       PIC X(01) VALUE X'02'.
042800     05  TMPLT-24-LEN        PIC S9(4) COMP VALUE +3.
042900     05  TMPLT-24-TXT.
043000         07  FILLER          PIC X(3)  VALUE "now".
043100         07  FILLER          PIC X(5)  VALUE "@@@@@".
043200
043300 01  TEMPLATE-25.
043400     05  TOKEN-25-TYPE       PIC X(01) VALUE X'04'.
043500     05  TOKEN-25-SIZE       PIC S9(4) COMP VALUE +260.
043600     05  TMPLT-25-LEN        PIC S9(4) COMP VALUE ZERO.
043700     05  TMPLT-25-TXT        PIC X(260) VALUE LOW-VALUE.
043800     05  FILLER REDEFINES TMPLT-25-TXT.
043900         07  TMPLT-25-POS    PIC S9(4) COMP-5 OCCURS 127.
044000     05  TMPLT-25-TXT-Z      PIC X(5)  VALUE "$$$$$".
044100
044200     SKIP2
044300 LOCAL-STORAGE SECTION.
044400 01  FILLER.
044500     03  LS-ASMODULE    PIC X(08).
044600     03  LS-LEMODULE    PIC X(08).
044700     03  LS-ASCA-PTR    POINTER.
044800     03  LS-ENCLAVE-RC  PIC S9(9) COMP SYNC.
044900     03  LE-MSG-DEST    PIC S9(9) COMP SYNC.
045000     03  LS-OPT         PIC X(01).
045100       88  INDIV-CALL       VALUE 'I'.
045200       88  PACKAGE-CALL     VALUE 'P'.
045300
045400 01  ACTION             PIC S9(9) COMP SYNC.
045500   88  ACTION-APPEND        VALUE +5.
045600   88  ACTION-CENTER        VALUE +6.
045700   88  ACTION-COUNT         VALUE +7.
045800   88  ACTION-DEEDIT        VALUE +8.
045900   88  ACTION-EDIT          VALUE +9.
046000   88  ACTION-JUSTIFY       VALUE +10.
046100   88  ACTION-LEFT          VALUE +11.
046200   88  ACTION-LEX           VALUE +12.
046300   88  ACTION-RIGHT         VALUE +13.
046400   88  ACTION-SPACE         VALUE +14.
046500   88  ACTION-STRDEL        VALUE +15.
046600   88  ACTION-STRFPOS       VALUE +16.
046700   88  ACTION-STRIP         VALUE +17.
046800   88  ACTION-STRISRT       VALUE +18.
046900   88  ACTION-STRLPOS       VALUE +19.
047000   88  ACTION-BMFPOS        VALUE +20.
047100   88  ACTION-STRREPL       VALUE +21.
047200   88  ACTION-SUBSTR        VALUE +22.
047300   88  ACTION-VAR           VALUE +23.
047400   88  ACTION-VHEX          VALUE +24.
047500   88  ACTION-WORDDEL       VALUE +25.
047600   88  ACTION-WORDFND       VALUE +26.
047700   88  ACTION-WORDPOS       VALUE +27.
047800   88  ACTION-HHEX          VALUE +28.
047900
048000 01  TEMPLATE-COUNT     PIC S9(9) COMP SYNC.
048100 01  FILLER.
048200     05  TEMPLATE-9 OCCURS 8 TIMES.
048300         07  TOKEN-9-TYPE    PIC X(01).
048400         07  TOKEN-9-SIZE    PIC S9(4) COMP.
048500         07  TMPLT-9-LEN     PIC S9(4) COMP.
048600         07  TMPLT-9-TXT     PIC X(25).
048700         07  TMPLT-9-TXT-Z   PIC X(5).
048800     05  TEMPLATE-10 OCCURS 8 TIMES.
048900         07  TOKEN-10-TYPE   PIC X(01).
049000         07  TMPLT-10-LEN    PIC S9(4) COMP.
049100         07  TMPLT-10-TXT    PIC X(25).
049200         07  TMPLT-10-TXT-A REDEFINES TMPLT-10-TXT PIC S9(1).
049300         07  TMPLT-10-TXT-B REDEFINES TMPLT-10-TXT PIC S9(2).
049400
049500 01  SOURCE-STRING.
049600     05  SRC-LEN             PIC S9(4) COMP.
049700     05  SRC-TXT             PIC X(100).
049800
049900 01  TEMP-FIELD.
050000     05  FW-BINARY           PIC  9(9) COMP.
050100
050200 01  LOOP-COUNT              PIC 9(4).
050300
050400 01  CTL-CARD.
050500     03 TEST-CASE            PIC X(03).
050600     03 FILLER               PIC X(77).
050700
050800     COPY AS5DMPRB.
050900     SKIP2
051000 LINKAGE SECTION.
051100     COPY AS5CA.
051200     EJECT
051300 PROCEDURE DIVISION USING
051400     ASCA-COMMAREA.
051500     SKIP2
051600 0000-00-INITIAL.
051700     DISPLAY WS-PGMID
051800          " Testing AS String services"
051900
052000*    CALL CEE3PR2 - Query PARM string long
052100     MOVE +258      TO WS-PARM-LENGTH
052200     MOVE "CEE3PR2" TO LS-LEMODULE
052300     CALL LS-LEMODULE
052400          USING WS-PARM-LENGTH
052500                WS-PARM-STMT
052600**              AS5CTOK-OCTOKEN
052700                OMITTED
052800     END-CALL
052900
053000     IF WS-PARM-LENGTH = ZERO
053100       DISPLAY WS-PGMID
053200            " - PARM STATEMENT NOT SPECIFIED"
053300       MOVE +10 TO WS-PARM-LENGTH
053400       MOVE "INDIVIDUAL" TO WS-PARM-TEXT
053500       SET INDIV-CALL TO TRUE
053600     END-IF
053700
053800     IF WS-PARM-LENGTH > ZERO AND <= +10
053900       IF WS-PARM-TEXT (1:1) = "P"
054000         MOVE +10 TO WS-PARM-LENGTH
054100         MOVE "PACKAGE" TO WS-PARM-TEXT
054200         SET PACKAGE-CALL TO TRUE
054300       END-IF
054400     END-IF
054500
054600     DISPLAY WS-PGMID
054700          " - PROCESSING MODE IS " WS-PARM-TEXT
054800
054900     MOVE +2 TO LE-MSG-DEST
055000     SKIP2
055100*    * ------------------------------------------------------- *
055200*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
055300*    * ------------------------------------------------------- *
055400
055500     SET LS-ASCA-PTR TO NULL
055600     MOVE "ASU3I01B" TO LS-ASMODULE
055700     CALL LS-ASMODULE
055800          USING LS-ASCA-PTR
055900**              AS5CTOK-OCTOKEN
056000                OMITTED
056100
056200     IF LS-ASCA-PTR = NULL
056300       DISPLAY WS-PGMID
056400            " ASU3I01B failed to create the ASCA"
056500       GOBACK
056600     END-IF
056700
056800     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
056900
057000     DISPLAY " "
057100
057200*    DUMP AS5CA COMMUNICATION AREA
057300     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
057400     MOVE +1 TO AS5DMPRB-NUMBER
057500     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
057600     MOVE "ASUMDHEX" TO LS-ASMODULE
057700     CALL LS-ASMODULE
057800          USING ASCA-COMMAREA
057900                AS5DMPRB-REQUEST-BLOCK
058000                ASCA-COMMAREA
058100**              AS5CTOK-OCTOKEN
058200                OMITTED
058300
058400     DISPLAY " "
058500
058600     CONTINUE.
058700 0100-00-MAINLINE.
058800     SKIP2
058900     CONTINUE.
059000 0200-00-INPUT.
059100     ACCEPT CTL-CARD FROM SYSIN
059200     IF TEST-CASE = "999" OR "***" OR "END"
059300       DISPLAY WS-PGMID
059400            " NO MORE INPUT"
059500       GO TO 9000-00-RETURN
059600     END-IF
059700
059800     IF TEST-CASE NUMERIC
059900       GO TO TEST-CASE-005
060000     ELSE
060100       IF TEST-CASE = "ALL"
060200         GO TO TEST-CASE-005
060300       ELSE
060400         DISPLAY WS-PGMID
060500              " NO VALID INPUT"
060600         GO TO 9000-00-RETURN
060700       END-IF
060800     END-IF
060900     SKIP2
061000     CONTINUE.
061100 TEST-CASE-005.
061200
061300     IF NOT (TEST-CASE = "ALL" OR "005")
061400       GO TO TEST-CASE-006
061500     END-IF
061600
061700*    * ------------------------------------------------------- *
061800*    * CALL STRING SERVICE APPEND
061900*    * ------------------------------------------------------- *
062000     SKIP1
062100     MOVE ZERO TO RO-START
062200                  RO-COUNT
062300                  RO-PSA-LEN
062400     SET RO-FLAG-NONE  TO TRUE
062500     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
062600*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
062700     MOVE +1   TO TEMPLATE-COUNT
062800     MOVE ZERO TO TMPLT-12-LEN
062900     MOVE LOW-VALUE TO TMPLT-12-TXT
063000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
063100     IF PACKAGE-CALL
063200*      CALL ASUDAPND TO PERFORM SERVICE STRING APPEND
063300       SET ACTION-APPEND TO TRUE
063400       MOVE "ASUSSVCB" TO LS-ASMODULE
063500       CALL LS-ASMODULE
063600            USING ASCA-COMMAREA
063700                  ACTION
063800                  AS-REQUEST-OPTIONS
063900                  SOURCE-STRING
064000                  TEMPLATE-COUNT
064100                  TEMPLATE-12
064200                  AS5CTOK-OCTOKEN
064300     ELSE
064400       MOVE "ASUDAPND" TO LS-ASMODULE
064500       CALL LS-ASMODULE
064600            USING ASCA-COMMAREA
064700                  AS-REQUEST-OPTIONS
064800                  SOURCE-STRING
064900                  TEMPLATE-COUNT
065000                  TEMPLATE-12
065100                  AS5CTOK-OCTOKEN
065200     END-IF
065300
065400     IF AS5CTOK-SEVNBR > ZERO
065500       DISPLAY WS-PGMID
065600            " RETURN CODE: " AS5CTOK-SEVNBR
065700            " MESSAGE NBR: " AS5CTOK-MSGNBR
065800     END-IF
065900
066000     DISPLAY WS-PGMID
066100          " TEST CASE 005.A - APPEND"
066200     DISPLAY WS-PGMID
066300          " MIXED CASE / NO CASE"
066400     DISPLAY WS-PGMID
066500          " COUNT:" RO-COUNT
066600     DISPLAY WS-PGMID
066700          " SOURCE:" SRC-TXT
066800     DISPLAY WS-PGMID
066900          " OUTPUT LEN (51):" TMPLT-12-LEN
067000     DISPLAY WS-PGMID
067100          " RESULT:" TMPLT-12-TXT
067200     DISPLAY WS-PGMID
067300          " "
067400          TMPLT-12-TXT-Z
067500     DISPLAY " "
067600     SKIP2
067700*    * ------------------------------------------------------- *
067800*    * CALL STRING SERVICE APPEND
067900*    * ------------------------------------------------------- *
068000     SKIP1
068100     MOVE ZERO TO RO-START
068200                  RO-COUNT
068300                  RO-PSA-LEN
068400     SET RO-FLAG-NONE  TO TRUE
068500     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
068600*    "++TO++BE,+OR+NOT+TO+BE++++"
068700     MOVE +1   TO TEMPLATE-COUNT
068800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
068900     IF PACKAGE-CALL
069000*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
069100       SET ACTION-APPEND TO TRUE
069200       MOVE "ASUSSVCB" TO LS-ASMODULE
069300       CALL LS-ASMODULE
069400            USING ASCA-COMMAREA
069500                  ACTION
069600                  AS-REQUEST-OPTIONS
069700                  SOURCE-STRING
069800                  TEMPLATE-COUNT
069900                  TEMPLATE-12
070000                  AS5CTOK-OCTOKEN
070100     ELSE
070200       MOVE "ASUDAPND" TO LS-ASMODULE
070300       CALL LS-ASMODULE
070400            USING ASCA-COMMAREA
070500                  AS-REQUEST-OPTIONS
070600                  SOURCE-STRING
070700                  TEMPLATE-COUNT
070800                  TEMPLATE-12
070900                  AS5CTOK-OCTOKEN
071000     END-IF
071100
071200     IF AS5CTOK-SEVNBR > ZERO
071300       DISPLAY WS-PGMID
071400            " RETURN CODE: " AS5CTOK-SEVNBR
071500            " MESSAGE NBR: " AS5CTOK-MSGNBR
071600     END-IF
071700
071800     DISPLAY WS-PGMID
071900          " TEST CASE 005.B - APPEND"
072000     DISPLAY WS-PGMID
072100          " UPPER CASE / NO CASE"
072200     DISPLAY WS-PGMID
072300          " COUNT:" RO-COUNT
072400     DISPLAY WS-PGMID
072500          " SOURCE:" SRC-TXT
072600     DISPLAY WS-PGMID
072700          " OUTPUT LEN (77):" TMPLT-12-LEN
072800     DISPLAY WS-PGMID
072900          " RESULT:" TMPLT-12-TXT
073000     DISPLAY WS-PGMID
073100          " "
073200          TMPLT-12-TXT-Z
073300     DISPLAY " "
073400     SKIP2
073500*    * ------------------------------------------------------- *
073600*    * CALL STRING SERVICE APPEND
073700*    * ------------------------------------------------------- *
073800     SKIP1
073900     MOVE ZERO TO RO-START
074000                  RO-COUNT
074100                  RO-PSA-LEN
074200     SET RO-FLAG-NONE  TO TRUE
074300     MOVE WS-SOURCE-STRING-12 TO SOURCE-STRING
074400*    "abc"
074500     MOVE +1   TO TEMPLATE-COUNT
074600     MOVE ZERO TO TMPLT-7-LEN
074700     MOVE LOW-VALUE TO TMPLT-7-TXT
074800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
074900     IF PACKAGE-CALL
075000*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
075100       SET ACTION-APPEND TO TRUE
075200       MOVE "ASUSSVCB" TO LS-ASMODULE
075300       CALL LS-ASMODULE
075400            USING ASCA-COMMAREA
075500                  ACTION
075600                  AS-REQUEST-OPTIONS
075700                  SOURCE-STRING
075800                  TEMPLATE-COUNT
075900                  TEMPLATE-7
076000                  AS5CTOK-OCTOKEN
076100     ELSE
076200       MOVE "ASUDAPND" TO LS-ASMODULE
076300       CALL LS-ASMODULE
076400            USING ASCA-COMMAREA
076500                  AS-REQUEST-OPTIONS
076600                  SOURCE-STRING
076700                  TEMPLATE-COUNT
076800                  TEMPLATE-7
076900                  AS5CTOK-OCTOKEN
077000     END-IF
077100
077200     IF AS5CTOK-SEVNBR > ZERO
077300       DISPLAY WS-PGMID
077400            " RETURN CODE: " AS5CTOK-SEVNBR
077500            " MESSAGE NBR: " AS5CTOK-MSGNBR
077600     END-IF
077700
077800     DISPLAY WS-PGMID
077900          " TEST CASE 005.C - APPEND"
078000     DISPLAY WS-PGMID
078100          " MIXED CASE / NO CASE"
078200     DISPLAY WS-PGMID
078300          " COUNT:" RO-COUNT
078400     DISPLAY WS-PGMID
078500          " SOURCE:" SRC-TXT
078600     DISPLAY WS-PGMID
078700          " OUTPUT LEN (3):" TMPLT-7-LEN
078800     DISPLAY WS-PGMID
078900          " RESULT:" TMPLT-7-TXT
079000     DISPLAY WS-PGMID
079100          " "
079200          TMPLT-7-TXT-Z
079300     DISPLAY " "
079400     SKIP2
079500*    * ------------------------------------------------------- *
079600*    * CALL STRING SERVICE APPEND
079700*    * ------------------------------------------------------- *
079800     SKIP1
079900     MOVE ZERO TO RO-START
080000                  RO-COUNT
080100                  RO-PSA-LEN
080200     SET RO-FLAG-NONE  TO TRUE
080300     MOVE WS-SOURCE-STRING-13 TO SOURCE-STRING
080400*    "DEF"
080500     MOVE +1   TO TEMPLATE-COUNT
080600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
080700     IF PACKAGE-CALL
080800*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
080900       SET ACTION-APPEND TO TRUE
081000       MOVE "ASUSSVCB" TO LS-ASMODULE
081100       CALL LS-ASMODULE
081200            USING ASCA-COMMAREA
081300                  ACTION
081400                  AS-REQUEST-OPTIONS
081500                  SOURCE-STRING
081600                  TEMPLATE-COUNT
081700                  TEMPLATE-7
081800                  AS5CTOK-OCTOKEN
081900     ELSE
082000       MOVE "ASUDAPND" TO LS-ASMODULE
082100       CALL LS-ASMODULE
082200            USING ASCA-COMMAREA
082300                  AS-REQUEST-OPTIONS
082400                  SOURCE-STRING
082500                  TEMPLATE-COUNT
082600                  TEMPLATE-7
082700                  AS5CTOK-OCTOKEN
082800     END-IF
082900
083000     IF AS5CTOK-SEVNBR > ZERO
083100       DISPLAY WS-PGMID
083200            " RETURN CODE: " AS5CTOK-SEVNBR
083300            " MESSAGE NBR: " AS5CTOK-MSGNBR
083400     END-IF
083500
083600     DISPLAY WS-PGMID
083700          " TEST CASE 005.D - APPEND"
083800     DISPLAY WS-PGMID
083900          " MIXED CASE / NO CASE"
084000     DISPLAY WS-PGMID
084100          " COUNT:" RO-COUNT
084200     DISPLAY WS-PGMID
084300         " SOURCE:" SRC-TXT
084400     DISPLAY WS-PGMID
084500          " OUTPUT LEN (6):" TMPLT-7-LEN
084600     DISPLAY WS-PGMID
084700          " RESULT:" TMPLT-7-TXT
084800     DISPLAY WS-PGMID
084900          " "
085000          TMPLT-7-TXT-Z
085100     DISPLAY " "
085200     SKIP2
085300*    * ------------------------------------------------------- *
085400*    * CALL STRING SERVICE APPEND
085500*    * ------------------------------------------------------- *
085600     SKIP1
085700     MOVE ZERO TO RO-START
085800                  RO-COUNT
085900                  RO-PSA-LEN
086000     SET RO-FLAG-NONE  TO TRUE
086100     MOVE WS-SOURCE-STRING-14 TO SOURCE-STRING
086200*    "ghi"
086300     MOVE +1   TO TEMPLATE-COUNT
086400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
086500     IF PACKAGE-CALL
086600*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
086700       SET ACTION-APPEND TO TRUE
086800       MOVE "ASUSSVCB" TO LS-ASMODULE
086900       CALL LS-ASMODULE
087000            USING ASCA-COMMAREA
087100                  ACTION
087200                  AS-REQUEST-OPTIONS
087300                  SOURCE-STRING
087400                  TEMPLATE-COUNT
087500                  TEMPLATE-7
087600                  AS5CTOK-OCTOKEN
087700     ELSE
087800       MOVE "ASUDAPND" TO LS-ASMODULE
087900       CALL LS-ASMODULE
088000            USING ASCA-COMMAREA
088100                  AS-REQUEST-OPTIONS
088200                  SOURCE-STRING
088300                  TEMPLATE-COUNT
088400                  TEMPLATE-7
088500                  AS5CTOK-OCTOKEN
088600     END-IF
088700
088800     IF AS5CTOK-SEVNBR > ZERO
088900       DISPLAY WS-PGMID
089000            " RETURN CODE: " AS5CTOK-SEVNBR
089100            " MESSAGE NBR: " AS5CTOK-MSGNBR
089200     END-IF
089300
089400     DISPLAY WS-PGMID
089500          " TEST CASE 005.E - APPEND"
089600     DISPLAY WS-PGMID
089700          " MIXED CASE / NO CASE"
089800     DISPLAY WS-PGMID
089900          " COUNT:" RO-COUNT
090000     DISPLAY WS-PGMID
090100          " SOURCE:" SRC-TXT
090200     DISPLAY WS-PGMID
090300          " OUTPUT LEN (9):" TMPLT-7-LEN
090400     DISPLAY WS-PGMID
090500          " RESULT:" TMPLT-7-TXT
090600     DISPLAY WS-PGMID
090700          " "
090800          TMPLT-7-TXT-Z
090900     DISPLAY " "
091000     SKIP2
091100*    * ------------------------------------------------------- *
091200*    * CALL STRING SERVICE APPEND
091300*    * ------------------------------------------------------- *
091400     SKIP1
091500     MOVE ZERO TO RO-START
091600                  RO-COUNT
091700                  RO-PSA-LEN
091800     SET RO-FLAG-NONE  TO TRUE
091900     MOVE WS-SOURCE-STRING-15 TO SOURCE-STRING
092000*    "JKL"
092100     MOVE +1   TO TEMPLATE-COUNT
092200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
092300     IF PACKAGE-CALL
092400*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
092500       SET ACTION-APPEND TO TRUE
092600       MOVE "ASUSSVCB" TO LS-ASMODULE
092700       CALL LS-ASMODULE
092800            USING ASCA-COMMAREA
092900                  ACTION
093000                  AS-REQUEST-OPTIONS
093100                  SOURCE-STRING
093200                  TEMPLATE-COUNT
093300                  TEMPLATE-7
093400                  AS5CTOK-OCTOKEN
093500     ELSE
093600       MOVE "ASUDAPND" TO LS-ASMODULE
093700       CALL LS-ASMODULE
093800            USING ASCA-COMMAREA
093900                  AS-REQUEST-OPTIONS
094000                  SOURCE-STRING
094100                  TEMPLATE-COUNT
094200                  TEMPLATE-7
094300                  AS5CTOK-OCTOKEN
094400     END-IF
094500
094600     IF AS5CTOK-SEVNBR > ZERO
094700       DISPLAY WS-PGMID
094800            " RETURN CODE: " AS5CTOK-SEVNBR
094900            " MESSAGE NBR: " AS5CTOK-MSGNBR
095000     END-IF
095100
095200     DISPLAY WS-PGMID
095300          " TEST CASE 005.F - APPEND"
095400     DISPLAY WS-PGMID
095500          " UPPER CASE / NO CASE"
095600     DISPLAY WS-PGMID
095700          " COUNT:" RO-COUNT
095800     DISPLAY WS-PGMID
095900          " SOURCE:" SRC-TXT
096000     DISPLAY WS-PGMID
096100          " OUTPUT LEN (12):" TMPLT-7-LEN
096200     DISPLAY WS-PGMID
096300          " RESULT:" TMPLT-7-TXT
096400     DISPLAY WS-PGMID
096500          " "
096600          TMPLT-7-TXT-Z
096700     DISPLAY " "
096800     SKIP2
096900*    * ------------------------------------------------------- *
097000*    * CALL STRING SERVICE APPEND
097100*    * ------------------------------------------------------- *
097200     SKIP1
097300     MOVE ZERO TO RO-START
097400                  RO-COUNT
097500                  RO-PSA-LEN
097600     SET RO-FLAG-NONE  TO TRUE
097700     MOVE WS-SOURCE-STRING-12 TO SOURCE-STRING
097800*    "abc"
097900     MOVE +1   TO TEMPLATE-COUNT
098000     MOVE ZERO TO TMPLT-7-LEN
098100     MOVE LOW-VALUE TO TMPLT-7-TXT
098200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
098300     IF PACKAGE-CALL
098400*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
098500       SET ACTION-APPEND TO TRUE
098600       MOVE "ASUSSVCB" TO LS-ASMODULE
098700       CALL LS-ASMODULE
098800            USING ASCA-COMMAREA
098900                  ACTION
099000                  AS-REQUEST-OPTIONS
099100                  SOURCE-STRING
099200                  TEMPLATE-COUNT
099300                  TEMPLATE-7
099400                  AS5CTOK-OCTOKEN
099500     ELSE
099600       MOVE "ASUDAPND" TO LS-ASMODULE
099700       CALL LS-ASMODULE
099800            USING ASCA-COMMAREA
099900                  AS-REQUEST-OPTIONS
100000                  SOURCE-STRING
100100                  TEMPLATE-COUNT
100200                  TEMPLATE-7
100300                  AS5CTOK-OCTOKEN
100400     END-IF
100500
100600     IF AS5CTOK-SEVNBR > ZERO
100700       DISPLAY WS-PGMID
100800            " RETURN CODE: " AS5CTOK-SEVNBR
100900            " MESSAGE NBR: " AS5CTOK-MSGNBR
101000     END-IF
101100
101200     DISPLAY WS-PGMID
101300          " TEST CASE 005.G - APPEND"
101400     DISPLAY WS-PGMID
101500          " MIXED CASE / NO CASE"
101600     DISPLAY WS-PGMID
101700          " COUNT:" RO-COUNT
101800     DISPLAY WS-PGMID
101900          " SOURCE:" SRC-TXT
102000     DISPLAY WS-PGMID
102100          " OUTPUT LEN (3):" TMPLT-7-LEN
102200     DISPLAY WS-PGMID
102300          " RESULT:" TMPLT-7-TXT
102400     DISPLAY WS-PGMID
102500          " "
102600          TMPLT-7-TXT-Z
102700     DISPLAY " "
102800     SKIP2
102900*    * ------------------------------------------------------- *
103000*    * CALL STRING SERVICE APPEND
103100*    * ------------------------------------------------------- *
103200     SKIP1
103300     MOVE ZERO TO RO-START
103400                  RO-COUNT
103500                  RO-PSA-LEN
103600     MOVE +3   TO RO-COUNT
103700     SET RO-FLAG-NONE  TO TRUE
103800     MOVE WS-SOURCE-STRING-13 TO SOURCE-STRING
103900*    "DEF"
104000     MOVE +1   TO TEMPLATE-COUNT
104100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
104200     IF PACKAGE-CALL
104300*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
104400       SET ACTION-APPEND TO TRUE
104500       MOVE "ASUSSVCB" TO LS-ASMODULE
104600       CALL LS-ASMODULE
104700            USING ASCA-COMMAREA
104800                  ACTION
104900                  AS-REQUEST-OPTIONS
105000                  SOURCE-STRING
105100                  TEMPLATE-COUNT
105200                  TEMPLATE-7
105300                  AS5CTOK-OCTOKEN
105400     ELSE
105500       MOVE "ASUDAPND" TO LS-ASMODULE
105600       CALL LS-ASMODULE
105700            USING ASCA-COMMAREA
105800                  AS-REQUEST-OPTIONS
105900                  SOURCE-STRING
106000                  TEMPLATE-COUNT
106100                  TEMPLATE-7
106200                  AS5CTOK-OCTOKEN
106300     END-IF
106400
106500     IF AS5CTOK-SEVNBR > ZERO
106600       DISPLAY WS-PGMID
106700            " RETURN CODE: " AS5CTOK-SEVNBR
106800            " MESSAGE NBR: " AS5CTOK-MSGNBR
106900     END-IF
107000
107100     DISPLAY WS-PGMID
107200          " TEST CASE 005.H - APPEND"
107300     DISPLAY WS-PGMID
107400          " MIXED CASE / NO CASE"
107500     DISPLAY WS-PGMID
107600          " COUNT:" RO-COUNT
107700     DISPLAY WS-PGMID
107800          " SOURCE:" SRC-TXT
107900     DISPLAY WS-PGMID
108000          " OUTPUT LEN (9):" TMPLT-7-LEN
108100     DISPLAY WS-PGMID
108200          " RESULT:" TMPLT-7-TXT
108300     DISPLAY WS-PGMID
108400          " "
108500          TMPLT-7-TXT-Z
108600     DISPLAY " "
108700     SKIP2
108800*    * ------------------------------------------------------- *
108900*    * CALL STRING SERVICE APPEND
109000*    * ------------------------------------------------------- *
109100     SKIP1
109200     MOVE ZERO TO RO-START
109300                  RO-COUNT
109400                  RO-PSA-LEN
109500     SET RO-FLAG-NONE  TO TRUE
109600     MOVE +3   TO RO-COUNT
109700     MOVE WS-SOURCE-STRING-14 TO SOURCE-STRING
109800*    "ghi"
109900     MOVE +1   TO TEMPLATE-COUNT
110000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
110100     IF PACKAGE-CALL
110200*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
110300       SET ACTION-APPEND TO TRUE
110400       MOVE "ASUSSVCB" TO LS-ASMODULE
110500       CALL LS-ASMODULE
110600            USING ASCA-COMMAREA
110700                  ACTION
110800                  AS-REQUEST-OPTIONS
110900                  SOURCE-STRING
111000                  TEMPLATE-COUNT
111100                  TEMPLATE-7
111200                  AS5CTOK-OCTOKEN
111300     ELSE
111400       MOVE "ASUDAPND" TO LS-ASMODULE
111500       CALL LS-ASMODULE
111600            USING ASCA-COMMAREA
111700                  AS-REQUEST-OPTIONS
111800                  SOURCE-STRING
111900                  TEMPLATE-COUNT
112000                  TEMPLATE-7
112100                  AS5CTOK-OCTOKEN
112200     END-IF
112300
112400     IF AS5CTOK-SEVNBR > ZERO
112500       DISPLAY WS-PGMID
112600            " RETURN CODE: " AS5CTOK-SEVNBR
112700            " MESSAGE NBR: " AS5CTOK-MSGNBR
112800     END-IF
112900
113000     DISPLAY WS-PGMID
113100          " TEST CASE 005.I - APPEND"
113200     DISPLAY WS-PGMID
113300          " MIXED CASE / NO CASE"
113400     DISPLAY WS-PGMID
113500          " COUNT:" RO-COUNT
113600     DISPLAY WS-PGMID
113700          " SOURCE:" SRC-TXT
113800     DISPLAY WS-PGMID
113900          " OUTPUT LEN (15):" TMPLT-7-LEN
114000     DISPLAY WS-PGMID
114100          " RESULT:" TMPLT-7-TXT
114200     DISPLAY WS-PGMID
114300          " "
114400          TMPLT-7-TXT-Z
114500     DISPLAY " "
114600     SKIP2
114700*    * ------------------------------------------------------- *
114800*    * CALL STRING SERVICE APPEND
114900*    * ------------------------------------------------------- *
115000     SKIP1
115100     MOVE ZERO TO RO-START
115200                  RO-COUNT
115300                  RO-PSA-LEN
115400     SET RO-FLAG-NONE  TO TRUE
115500     MOVE +3   TO RO-COUNT
115600     MOVE WS-SOURCE-STRING-15 TO SOURCE-STRING
115700*    "JKL"
115800     MOVE +1   TO TEMPLATE-COUNT
115900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
116000     IF PACKAGE-CALL
116100*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
116200       SET ACTION-APPEND TO TRUE
116300       MOVE "ASUSSVCB" TO LS-ASMODULE
116400       CALL LS-ASMODULE
116500            USING ASCA-COMMAREA
116600                  ACTION
116700                  AS-REQUEST-OPTIONS
116800                  SOURCE-STRING
116900                  TEMPLATE-COUNT
117000                  TEMPLATE-7
117100                  AS5CTOK-OCTOKEN
117200     ELSE
117300       MOVE "ASUDAPND" TO LS-ASMODULE
117400       CALL LS-ASMODULE
117500            USING ASCA-COMMAREA
117600                  AS-REQUEST-OPTIONS
117700                  SOURCE-STRING
117800                  TEMPLATE-COUNT
117900                  TEMPLATE-7
118000                  AS5CTOK-OCTOKEN
118100     END-IF
118200
118300     IF AS5CTOK-SEVNBR > ZERO
118400       DISPLAY WS-PGMID
118500            " RETURN CODE: " AS5CTOK-SEVNBR
118600            " MESSAGE NBR: " AS5CTOK-MSGNBR
118700     END-IF
118800
118900     DISPLAY WS-PGMID
119000          " TEST CASE 005.J - APPEND"
119100     DISPLAY WS-PGMID
119200          " UPPER CASE / NO CASE"
119300     DISPLAY WS-PGMID
119400          " COUNT:" RO-COUNT
119500     DISPLAY WS-PGMID
119600          " SOURCE:" SRC-TXT
119700     DISPLAY WS-PGMID
119800          " OUTPUT LEN (21):" TMPLT-7-LEN
119900     DISPLAY WS-PGMID
120000          " RESULT:" TMPLT-7-TXT
120100     DISPLAY WS-PGMID
120200          " "
120300          TMPLT-7-TXT-Z
120400     DISPLAY " "
120500     SKIP2
120600*    * ------------------------------------------------------- *
120700*    * CALL STRING SERVICE APPEND (OVERFLOW)
120800*    * ------------------------------------------------------- *
120900     SKIP1
121000     MOVE ZERO TO RO-START
121100                  RO-COUNT
121200                  RO-PSA-LEN
121300     SET RO-FLAG-NONE  TO TRUE
121400     MOVE +3   TO RO-COUNT
121500     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
121600*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
121700     MOVE +1   TO TEMPLATE-COUNT
121800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
121900     IF PACKAGE-CALL
122000*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
122100       SET ACTION-APPEND TO TRUE
122200       MOVE "ASUSSVCB" TO LS-ASMODULE
122300       CALL LS-ASMODULE
122400            USING ASCA-COMMAREA
122500                  ACTION
122600                  AS-REQUEST-OPTIONS
122700                  SOURCE-STRING
122800                  TEMPLATE-COUNT
122900                  TEMPLATE-7
123000                  AS5CTOK-OCTOKEN
123100     ELSE
123200       MOVE "ASUDAPND" TO LS-ASMODULE
123300       CALL LS-ASMODULE
123400            USING ASCA-COMMAREA
123500                  AS-REQUEST-OPTIONS
123600                  SOURCE-STRING
123700                  TEMPLATE-COUNT
123800                  TEMPLATE-7
123900                  AS5CTOK-OCTOKEN
124000     END-IF
124100
124200     IF AS5CTOK-SEVNBR > ZERO
124300       DISPLAY WS-PGMID
124400            " RETURN CODE: " AS5CTOK-SEVNBR
124500            " MESSAGE NBR: " AS5CTOK-MSGNBR
124600     END-IF
124700
124800     DISPLAY WS-PGMID
124900          " TEST CASE 005.K - APPEND (OVERFLOW)"
125000     DISPLAY WS-PGMID
125100          " MIXED CASE / NO CASE"
125200     DISPLAY WS-PGMID
125300          " COUNT:" RO-COUNT
125400     DISPLAY WS-PGMID
125500          " SOURCE:" SRC-TXT
125600     DISPLAY WS-PGMID
125700          " OUTPUT LEN (21):" TMPLT-7-LEN
125800     DISPLAY WS-PGMID
125900          " RESULT:" TMPLT-7-TXT
126000     DISPLAY WS-PGMID
126100          " "
126200          TMPLT-7-TXT-Z
126300     DISPLAY " "
126400     SKIP2.
126500     CONTINUE.
126600 TEST-CASE-006.
126700
126800     IF NOT (TEST-CASE = "ALL" OR "006")
126900       GO TO TEST-CASE-007
127000     END-IF
127100
127200*    * ------------------------------------------------------- *
127300*    * CALL STRING SERVICE CENTER
127400*    * ------------------------------------------------------- *
127500     SKIP1
127600     MOVE ZERO TO RO-START
127700                  RO-COUNT
127800                  RO-PSA-LEN
127900     SET RO-FLAG-UC TO TRUE
128000     MOVE WS-SOURCE-STRING-3 TO SOURCE-STRING
128100*    "1st National Bank"
128200     MOVE +1   TO TEMPLATE-COUNT
128300     MOVE ZERO TO TMPLT-6-LEN
128400     MOVE LOW-VALUE TO TMPLT-6-TXT
128500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
128600     IF PACKAGE-CALL
128700*      CALL ASUSSVCB TO PERFORM SERVICE CENTER
128800       SET ACTION-CENTER TO TRUE
128900       MOVE "ASUSSVCB" TO LS-ASMODULE
129000       CALL LS-ASMODULE
129100            USING ASCA-COMMAREA
129200                  ACTION
129300                  AS-REQUEST-OPTIONS
129400                  SOURCE-STRING
129500                  TEMPLATE-COUNT
129600                  TEMPLATE-6
129700                  AS5CTOK-OCTOKEN
129800     ELSE
129900       MOVE "ASUDCNTR" TO LS-ASMODULE
130000       CALL LS-ASMODULE
130100            USING ASCA-COMMAREA
130200                  AS-REQUEST-OPTIONS
130300                  SOURCE-STRING
130400                  TEMPLATE-COUNT
130500                  TEMPLATE-6
130600                  AS5CTOK-OCTOKEN
130700     END-IF
130800
130900     IF AS5CTOK-SEVNBR > ZERO
131000       DISPLAY WS-PGMID
131100            " RETURN CODE: " AS5CTOK-SEVNBR
131200            " MESSAGE NBR: " AS5CTOK-MSGNBR
131300     END-IF
131400
131500     DISPLAY WS-PGMID
131600          " TEST CASE 006 - CENTER (19 PADS IN FRONT)"
131700     DISPLAY WS-PGMID
131800          " MIXED CASE / UPPER CASE"
131900     DISPLAY WS-PGMID
132000          " SOURCE:" SRC-TXT
132100     DISPLAY WS-PGMID
132200          " OUTPUT LEN (55):" TMPLT-6-LEN
132300     DISPLAY WS-PGMID
132400          " RESULT:" TMPLT-6-TXT
132500     DISPLAY WS-PGMID
132600          " "
132700          TMPLT-6-TXT-Z
132800     DISPLAY " "
132900     SKIP2.
133000     CONTINUE.
133100 TEST-CASE-007.
133200
133300     IF NOT (TEST-CASE = "ALL" OR "007")
133400       GO TO TEST-CASE-008
133500     END-IF
133600
133700*    * ------------------------------------------------------- *
133800*    * CALL STRING SERVICE - COUNT
133900*    * ------------------------------------------------------- *
134000     SKIP1
134100     MOVE ZERO TO RO-START
134200                  RO-COUNT
134300                  RO-PSA-LEN
134400     SET RO-FLAG-NONE TO TRUE
134500     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
134600*    "+HOW+NOW+BROWN+COW++"
134700     MOVE +2   TO TEMPLATE-COUNT
134800     MOVE ZERO TO TMPLT-1-LEN
134900     MOVE ZERO TO TMPLT-1-TXT-A
135000                  TMPLT-1-TXT-B
135100                  TMPLT-1-TXT-C
135200     MOVE ZERO TO TMPLT-3-LEN
135300     MOVE LOW-VALUE TO TMPLT-3-TXT
135400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
135500     IF PACKAGE-CALL
135600*      CALL ASUSSVCB TO PERFORM SERVICE COUNT
135700       SET ACTION-COUNT TO TRUE
135800       MOVE "ASUSSVCB" TO LS-ASMODULE
135900       CALL LS-ASMODULE
136000            USING ASCA-COMMAREA
136100                  ACTION
136200                  AS-REQUEST-OPTIONS
136300                  SOURCE-STRING
136400                  TEMPLATE-COUNT
136500                  TEMPLATE-1
136600                  TEMPLATE-3
136700                  AS5CTOK-OCTOKEN
136800     ELSE
136900       MOVE "ASUDSCNT" TO LS-ASMODULE
137000       CALL LS-ASMODULE
137100            USING ASCA-COMMAREA
137200                  AS-REQUEST-OPTIONS
137300                  SOURCE-STRING
137400                  TEMPLATE-COUNT
137500                  TEMPLATE-1
137600                  TEMPLATE-3
137700                  AS5CTOK-OCTOKEN
137800     END-IF
137900
138000     IF AS5CTOK-SEVNBR > ZERO
138100       DISPLAY WS-PGMID
138200            " RETURN CODE: " AS5CTOK-SEVNBR
138300            " MESSAGE NBR: " AS5CTOK-MSGNBR
138400     END-IF
138500
138600     DISPLAY WS-PGMID
138700          " TEST CASE 007.A - COUNT"
138800     DISPLAY WS-PGMID
138900          " MIXED CASE / MIXED CASE"
139000     DISPLAY WS-PGMID
139100          " SOURCE:" SRC-TXT
139200     DISPLAY WS-PGMID
139300          " SOURCE LEN (18):" TMPLT-1-TXT-A
139400     DISPLAY WS-PGMID
139500          " CHAR COUNT (14):" TMPLT-1-TXT-B
139600     DISPLAY WS-PGMID
139700          " WORD COUNT  (4):" TMPLT-1-TXT-C
139800     DISPLAY WS-PGMID
139900          " "
140000          TMPLT-1-TXT-Z
140100     DISPLAY " "
140200     SKIP2
140300*    * ------------------------------------------------------- *
140400*    * CALL STRING SERVICE COUNT
140500*    * ------------------------------------------------------- *
140600     SKIP1
140700     MOVE ZERO TO RO-START
140800                  RO-COUNT
140900                  RO-PSA-LEN
141000     SET RO-FLAG-NONE TO TRUE
141100     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
141200*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
141300     MOVE +2   TO TEMPLATE-COUNT
141400     MOVE ZERO TO TMPLT-1-LEN
141500     MOVE ZERO TO TMPLT-1-TXT-A
141600                  TMPLT-1-TXT-B
141700                  TMPLT-1-TXT-C
141800     MOVE ZERO TO TMPLT-3-LEN
141900     MOVE LOW-VALUE TO TMPLT-3-TXT
142000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
142100     IF PACKAGE-CALL
142200*      CALL ASUSSVCB TO PERFORM SERVICE COUNT
142300       SET ACTION-COUNT TO TRUE
142400       MOVE "ASUSSVCB" TO LS-ASMODULE
142500       CALL LS-ASMODULE
142600            USING ASCA-COMMAREA
142700                  ACTION
142800                  AS-REQUEST-OPTIONS
142900                  SOURCE-STRING
143000                  TEMPLATE-COUNT
143100                  TEMPLATE-1
143200                  TEMPLATE-3
143300                  AS5CTOK-OCTOKEN
143400     ELSE
143500       MOVE "ASUDSCNT" TO LS-ASMODULE
143600       CALL LS-ASMODULE
143700            USING ASCA-COMMAREA
143800                  AS-REQUEST-OPTIONS
143900                  SOURCE-STRING
144000                  TEMPLATE-COUNT
144100                  TEMPLATE-1
144200                  TEMPLATE-3
144300                  AS5CTOK-OCTOKEN
144400     END-IF
144500
144600     IF AS5CTOK-SEVNBR > ZERO
144700       DISPLAY WS-PGMID
144800            " RETURN CODE: " AS5CTOK-SEVNBR
144900            " MESSAGE NBR: " AS5CTOK-MSGNBR
145000     END-IF
145100
145200     DISPLAY WS-PGMID
145300          " TEST CASE 007.B - COUNT"
145400     DISPLAY WS-PGMID
145500          " MIXED CASE / MIXED CASE"
145600     DISPLAY WS-PGMID
145700          " SOURCE:" SRC-TXT
145800     DISPLAY WS-PGMID
145900          " SOURCE LEN (47):" TMPLT-1-TXT-A
146000     DISPLAY WS-PGMID
146100          " CHAR COUNT (37):" TMPLT-1-TXT-B
146200     DISPLAY WS-PGMID
146300          " WORD COUNT (11):" TMPLT-1-TXT-C
146400     DISPLAY WS-PGMID
146500          " "
146600          TMPLT-1-TXT-Z
146700     DISPLAY " "
146800     SKIP2
146900     CONTINUE.
147000 TEST-CASE-008.
147100
147200     IF NOT (TEST-CASE = "ALL" OR "008")
147300       GO TO TEST-CASE-009
147400     END-IF
147500
147600*    * ------------------------------------------------------- *
147700*    * CALL STRING SERVICE DE-EDIT (123456789)
147800*    * ------------------------------------------------------- *
147900     SKIP1
148000     MOVE ZERO TO RO-START
148100                  RO-COUNT
148200                  RO-PSA-LEN
148300     SET RO-FLAG-NONE  TO TRUE
148400     MOVE WS-SOURCE-STRING-6 TO SOURCE-STRING
148500*    "123456789"
148600     MOVE +1   TO TEMPLATE-COUNT
148700     MOVE ZERO TO TMPLT-11-LEN
148800     MOVE LOW-VALUE TO TMPLT-11-TXT
148900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
149000     IF PACKAGE-CALL
149100*      CALL ASUSSVCB TO PERFORM SERVICE STRING DE-EDIT
149200       SET ACTION-DEEDIT TO TRUE
149300       MOVE "ASUSSVCB" TO LS-ASMODULE
149400       CALL LS-ASMODULE
149500            USING ASCA-COMMAREA
149600                  ACTION
149700                  AS-REQUEST-OPTIONS
149800                  SOURCE-STRING
149900                  TEMPLATE-COUNT
150000                  TEMPLATE-11
150100                  AS5CTOK-OCTOKEN
150200     ELSE
150300       MOVE "ASUDDEDT" TO LS-ASMODULE
150400       CALL LS-ASMODULE
150500            USING ASCA-COMMAREA
150600                  AS-REQUEST-OPTIONS
150700                  SOURCE-STRING
150800                  TEMPLATE-COUNT
150900                  TEMPLATE-11
151000                  AS5CTOK-OCTOKEN
151100     END-IF
151200
151300     IF AS5CTOK-SEVNBR > ZERO
151400       DISPLAY WS-PGMID
151500            " RETURN CODE: " AS5CTOK-SEVNBR
151600            " MESSAGE NBR: " AS5CTOK-MSGNBR
151700     END-IF
151800
151900     DISPLAY WS-PGMID
152000          " TEST CASE 008.A - DE-EDIT (123456789)"
152100     DISPLAY WS-PGMID
152200          " NUMERIC / NO CASE"
152300     DISPLAY WS-PGMID
152400          " SOURCE:" SRC-TXT
152500     DISPLAY WS-PGMID
152600          " OUTPUT LEN (19):" TMPLT-11-LEN
152700     DISPLAY WS-PGMID
152800          " RESULT:" TMPLT-11-TXT
152900     DISPLAY WS-PGMID
153000          "    TYPE (Z):" TMPLT-11-TOK-TYPE
153100          "     STYPE (1):" TMPLT-11-TOK-STYPE
153200          "     LEN (15):" TMPLT-11-TOK-LEN
153300     DISPLAY WS-PGMID
153400          "   DIGIT (9):" TMPLT-11-TOK-DIGIT
153500          "  SCALE (0):" TMPLT-11-TOK-SCALE
153600          "  EXP (0):" TMPLT-11-TOK-EXP
153700     DISPLAY WS-PGMID
153800          "     NBR (123456789):" TMPLT-11-TOK-NBR
153900     DISPLAY WS-PGMID
154000          " "
154100          TMPLT-11-TXT-Z
154200     DISPLAY " "
154300     SKIP2
154400*    * ------------------------------------------------------- *
154500*    * CALL STRING SERVICE DE-EDIT ($234.56)
154600*    * ------------------------------------------------------- *
154700     SKIP1
154800     MOVE ZERO TO RO-START
154900                  RO-COUNT
155000                  RO-PSA-LEN
155100     SET RO-FLAG-NONE  TO TRUE
155200     MOVE WS-SOURCE-STRING-7 TO SOURCE-STRING
155300*    "$234.56"
155400     MOVE +1   TO TEMPLATE-COUNT
155500     MOVE ZERO TO TMPLT-11-LEN
155600     MOVE LOW-VALUE TO TMPLT-11-TXT
155700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
155800     IF PACKAGE-CALL
155900*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
156000       SET ACTION-DEEDIT TO TRUE
156100       MOVE "ASUSSVCB" TO LS-ASMODULE
156200       CALL LS-ASMODULE
156300            USING ASCA-COMMAREA
156400                  ACTION
156500                  AS-REQUEST-OPTIONS
156600                  SOURCE-STRING
156700                  TEMPLATE-COUNT
156800                  TEMPLATE-11
156900                  AS5CTOK-OCTOKEN
157000     ELSE
157100       MOVE "ASUDDEDT" TO LS-ASMODULE
157200       CALL LS-ASMODULE
157300            USING ASCA-COMMAREA
157400                  AS-REQUEST-OPTIONS
157500                  SOURCE-STRING
157600                  TEMPLATE-COUNT
157700                  TEMPLATE-11
157800                  AS5CTOK-OCTOKEN
157900     END-IF
158000
158100     IF AS5CTOK-SEVNBR > ZERO
158200       DISPLAY WS-PGMID
158300            " RETURN CODE: " AS5CTOK-SEVNBR
158400            " MESSAGE NBR: " AS5CTOK-MSGNBR
158500     END-IF
158600
158700     DISPLAY WS-PGMID
158800          " TEST CASE 008.B - DE-EDIT ($234.56)"
158900     DISPLAY WS-PGMID
159000          " NUMERIC / NO CASE"
159100     DISPLAY WS-PGMID
159200          " SOURCE:" SRC-TXT
159300     DISPLAY WS-PGMID
159400          " OUTPUT LEN (15):" TMPLT-11-LEN
159500     DISPLAY WS-PGMID
159600          " RESULT:" TMPLT-11-TXT
159700     DISPLAY WS-PGMID
159800          "    TYPE (R):" TMPLT-11-TOK-TYPE
159900          "     STYPE (1):" TMPLT-11-TOK-STYPE
160000          "     LEN (11):" TMPLT-11-TOK-LEN
160100     DISPLAY WS-PGMID
160200          "   DIGIT (5):" TMPLT-11-TOK-DIGIT
160300          "  SCALE (2):" TMPLT-11-TOK-SCALE
160400          "  EXP (0):" TMPLT-11-TOK-EXP
160500     DISPLAY WS-PGMID
160600          "     NBR (23456):" TMPLT-11-TOK-NBR
160700     DISPLAY WS-PGMID
160800          " "
160900          TMPLT-11-TXT-Z
161000     DISPLAY " "
161100     SKIP2
161200*    * ------------------------------------------------------- *
161300*    * CALL STRING SERVICE DE-EDIT (-1,234.56)
161400*    * ------------------------------------------------------- *
161500     SKIP1
161600     MOVE ZERO TO RO-START
161700                  RO-COUNT
161800                  RO-PSA-LEN
161900     SET RO-FLAG-NONE  TO TRUE
162000     MOVE WS-SOURCE-STRING-8 TO SOURCE-STRING
162100*    "-1,234.56"
162200     MOVE +1   TO TEMPLATE-COUNT
162300     MOVE ZERO TO TMPLT-11-LEN
162400     MOVE LOW-VALUE TO TMPLT-11-TXT
162500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
162600     IF PACKAGE-CALL
162700*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
162800       SET ACTION-DEEDIT TO TRUE
162900       MOVE "ASUSSVCB" TO LS-ASMODULE
163000       CALL LS-ASMODULE
163100            USING ASCA-COMMAREA
163200                  ACTION
163300                  AS-REQUEST-OPTIONS
163400                  SOURCE-STRING
163500                  TEMPLATE-COUNT
163600                  TEMPLATE-11
163700                  AS5CTOK-OCTOKEN
163800     ELSE
163900       MOVE "ASUDDEDT" TO LS-ASMODULE
164000       CALL LS-ASMODULE
164100            USING ASCA-COMMAREA
164200                  AS-REQUEST-OPTIONS
164300                  SOURCE-STRING
164400                  TEMPLATE-COUNT
164500                  TEMPLATE-11
164600                  AS5CTOK-OCTOKEN
164700     END-IF
164800
164900     IF AS5CTOK-SEVNBR > ZERO
165000       DISPLAY WS-PGMID
165100            " RETURN CODE: " AS5CTOK-SEVNBR
165200            " MESSAGE NBR: " AS5CTOK-MSGNBR
165300     END-IF
165400
165500     DISPLAY WS-PGMID
165600          " TEST CASE 008.C - DE-EDIT (-1,234.56)"
165700     DISPLAY WS-PGMID
165800          " NUMERIC / NO CASE"
165900     DISPLAY WS-PGMID
166000          " SOURCE:" SRC-TXT
166100     DISPLAY WS-PGMID
166200          " OUTPUT LEN (16):" TMPLT-11-LEN
166300     DISPLAY WS-PGMID
166400          " RESULT:" TMPLT-11-TXT
166500     DISPLAY WS-PGMID
166600          "    TYPE (R):" TMPLT-11-TOK-TYPE
166700          "     STYPE (1):" TMPLT-11-TOK-STYPE
166800          "     LEN (12):" TMPLT-11-TOK-LEN
166900     DISPLAY WS-PGMID
167000          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
167100          "  SCALE (2):" TMPLT-11-TOK-SCALE
167200          "  EXP (0):" TMPLT-11-TOK-EXP
167300     DISPLAY WS-PGMID
167400          "     NBR (12345O):" TMPLT-11-TOK-NBR
167500     DISPLAY WS-PGMID
167600          " "
167700          TMPLT-11-TXT-Z
167800     DISPLAY " "
167900     SKIP2
168000*    * ------------------------------------------------------- *
168100*    * CALL STRING SERVICE DE-EDIT ($-,--4.56)
168200*    * ------------------------------------------------------- *
168300     SKIP1
168400     MOVE ZERO TO RO-START
168500                  RO-COUNT
168600                  RO-PSA-LEN
168700     SET RO-FLAG-NONE  TO TRUE
168800     MOVE WS-SOURCE-STRING-9 TO SOURCE-STRING
168900*    "$-,--4.56"
169000     MOVE +1   TO TEMPLATE-COUNT
169100     MOVE ZERO TO TMPLT-11-LEN
169200     MOVE LOW-VALUE TO TMPLT-11-TXT
169300     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
169400     IF PACKAGE-CALL
169500*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
169600       SET ACTION-DEEDIT TO TRUE
169700       MOVE "ASUSSVCB" TO LS-ASMODULE
169800       CALL LS-ASMODULE
169900            USING ASCA-COMMAREA
170000                  ACTION
170100                  AS-REQUEST-OPTIONS
170200                  SOURCE-STRING
170300                  TEMPLATE-COUNT
170400                  TEMPLATE-11
170500                  AS5CTOK-OCTOKEN
170600     ELSE
170700       MOVE "ASUDDEDT" TO LS-ASMODULE
170800       CALL LS-ASMODULE
170900            USING ASCA-COMMAREA
171000                  AS-REQUEST-OPTIONS
171100                  SOURCE-STRING
171200                  TEMPLATE-COUNT
171300                  TEMPLATE-11
171400                  AS5CTOK-OCTOKEN
171500     END-IF
171600
171700     IF AS5CTOK-SEVNBR > ZERO
171800       DISPLAY WS-PGMID
171900            " RETURN CODE: " AS5CTOK-SEVNBR
172000            " MESSAGE NBR: " AS5CTOK-MSGNBR
172100     END-IF
172200
172300     DISPLAY WS-PGMID
172400          " TEST CASE 008.D - DE-EDIT ($-,--4.56)"
172500     DISPLAY WS-PGMID
172600          " NUMERIC / NO CASE"
172700     DISPLAY WS-PGMID
172800          " SOURCE:" SRC-TXT
172900     DISPLAY WS-PGMID
173000          " OUTPUT LEN (13):" TMPLT-11-LEN
173100     DISPLAY WS-PGMID
173200          " RESULT:" TMPLT-11-TXT
173300     DISPLAY WS-PGMID
173400          "    TYPE (R):" TMPLT-11-TOK-TYPE
173500          "     STYPE (1):" TMPLT-11-TOK-STYPE
173600          "     LEN (9):" TMPLT-11-TOK-LEN
173700     DISPLAY WS-PGMID
173800          "   DIGIT (3):" TMPLT-11-TOK-DIGIT
173900          "  SCALE (2):" TMPLT-11-TOK-SCALE
174000          "  EXP (0):" TMPLT-11-TOK-EXP
174100     DISPLAY WS-PGMID
174200          "     NBR (45O):" TMPLT-11-TOK-NBR
174300     DISPLAY WS-PGMID
174400          " "
174500          TMPLT-11-TXT-Z
174600     DISPLAY " "
174700     SKIP2
174800*    * ------------------------------------------------------- *
174900*    * CALL STRING SERVICE DE-EDIT (0123,456 )
175000*    * ------------------------------------------------------- *
175100     SKIP1
175200     MOVE ZERO TO RO-START
175300                  RO-COUNT
175400                  RO-PSA-LEN
175500     SET RO-FLAG-NONE  TO TRUE
175600     MOVE WS-SOURCE-STRING-10 TO SOURCE-STRING
175700*    "0123,456 "
175800     MOVE +1   TO TEMPLATE-COUNT
175900     MOVE ZERO TO TMPLT-11-LEN
176000     MOVE LOW-VALUE TO TMPLT-11-TXT
176100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
176200     IF PACKAGE-CALL
176300*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
176400       SET ACTION-DEEDIT TO TRUE
176500       MOVE "ASUSSVCB" TO LS-ASMODULE
176600       CALL LS-ASMODULE
176700            USING ASCA-COMMAREA
176800                  ACTION
176900                  AS-REQUEST-OPTIONS
177000                  SOURCE-STRING
177100                  TEMPLATE-COUNT
177200                  TEMPLATE-11
177300                  AS5CTOK-OCTOKEN
177400     ELSE
177500       MOVE "ASUDDEDT" TO LS-ASMODULE
177600       CALL LS-ASMODULE
177700            USING ASCA-COMMAREA
177800                  AS-REQUEST-OPTIONS
177900                  SOURCE-STRING
178000                  TEMPLATE-COUNT
178100                  TEMPLATE-11
178200                  AS5CTOK-OCTOKEN
178300     END-IF
178400
178500     IF AS5CTOK-SEVNBR > ZERO
178600       DISPLAY WS-PGMID
178700            " RETURN CODE: " AS5CTOK-SEVNBR
178800            " MESSAGE NBR: " AS5CTOK-MSGNBR
178900     END-IF
179000
179100     DISPLAY WS-PGMID
179200          " TEST CASE 008.E - DE-EDIT (0123,456 )"
179300     DISPLAY WS-PGMID
179400          " NUMERIC / NO CASE"
179500     DISPLAY WS-PGMID
179600          " SOURCE:" SRC-TXT
179700     DISPLAY WS-PGMID
179800          " OUTPUT LEN (16):" TMPLT-11-LEN
179900     DISPLAY WS-PGMID
180000          " RESULT:" TMPLT-11-TXT
180100     DISPLAY WS-PGMID
180200          "    TYPE (Z):" TMPLT-11-TOK-TYPE
180300          "     STYPE (1):" TMPLT-11-TOK-STYPE
180400          "     LEN (12):" TMPLT-11-TOK-LEN
180500     DISPLAY WS-PGMID
180600          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
180700          "  SCALE (0):" TMPLT-11-TOK-SCALE
180800          "  EXP (0):" TMPLT-11-TOK-EXP
180900     DISPLAY WS-PGMID
181000          "     NBR (123456):" TMPLT-11-TOK-NBR
181100     DISPLAY WS-PGMID
181200          " "
181300          TMPLT-11-TXT-Z
181400     DISPLAY " "
181500     SKIP2
181600*    * ------------------------------------------------------- *
181700*    * CALL STRING SERVICE DE-EDIT (64K)
181800*    * ------------------------------------------------------- *
181900     SKIP1
182000     MOVE ZERO TO RO-START
182100                  RO-COUNT
182200                  RO-PSA-LEN
182300     SET RO-FLAG-NONE  TO TRUE
182400     MOVE WS-SOURCE-STRING-16 TO SOURCE-STRING
182500*    "64K"
182600     MOVE +1   TO TEMPLATE-COUNT
182700     MOVE ZERO TO TMPLT-11-LEN
182800     MOVE LOW-VALUE TO TMPLT-11-TXT
182900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
183000     IF PACKAGE-CALL
183100*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
183200       SET ACTION-DEEDIT TO TRUE
183300       MOVE "ASUSSVCB" TO LS-ASMODULE
183400       CALL LS-ASMODULE
183500            USING ASCA-COMMAREA
183600                  ACTION
183700                  AS-REQUEST-OPTIONS
183800                  SOURCE-STRING
183900                  TEMPLATE-COUNT
184000                  TEMPLATE-11
184100                  AS5CTOK-OCTOKEN
184200     ELSE
184300       MOVE "ASUDDEDT" TO LS-ASMODULE
184400       CALL LS-ASMODULE
184500            USING ASCA-COMMAREA
184600                  AS-REQUEST-OPTIONS
184700                  SOURCE-STRING
184800                  TEMPLATE-COUNT
184900                  TEMPLATE-11
185000                  AS5CTOK-OCTOKEN
185100     END-IF
185200
185300     IF AS5CTOK-SEVNBR > ZERO
185400       DISPLAY WS-PGMID
185500            " RETURN CODE: " AS5CTOK-SEVNBR
185600            " MESSAGE NBR: " AS5CTOK-MSGNBR
185700     END-IF
185800
185900     DISPLAY WS-PGMID
186000          " TEST CASE 008.F - DE-EDIT (64K)"
186100     DISPLAY WS-PGMID
186200          " NUMERIC / NO CASE"
186300     DISPLAY WS-PGMID
186400          " SOURCE:" SRC-TXT
186500     DISPLAY WS-PGMID
186600          " OUTPUT LEN (15):" TMPLT-11-LEN
186700     DISPLAY WS-PGMID
186800          " RESULT:" TMPLT-11-TXT
186900     DISPLAY WS-PGMID
187000          "    TYPE (Z):" TMPLT-11-TOK-TYPE
187100          "     STYPE (1):" TMPLT-11-TOK-STYPE
187200          "     LEN (11):" TMPLT-11-TOK-LEN
187300     DISPLAY WS-PGMID
187400          "   DIGIT (5):" TMPLT-11-TOK-DIGIT
187500          "  SCALE (0):" TMPLT-11-TOK-SCALE
187600          "  EXP (0):" TMPLT-11-TOK-EXP
187700     DISPLAY WS-PGMID
187800          "     NBR (64000):" TMPLT-11-TOK-NBR
187900     DISPLAY WS-PGMID
188000          " "
188100          TMPLT-11-TXT-Z
188200     DISPLAY " "
188300     SKIP2
188400*    * ------------------------------------------------------- *
188500*    * CALL STRING SERVICE DE-EDIT (123.456E+12)
188600*    * ------------------------------------------------------- *
188700     SKIP1
188800     MOVE ZERO TO RO-START
188900                  RO-COUNT
189000                  RO-PSA-LEN
189100     SET RO-FLAG-NONE  TO TRUE
189200     MOVE WS-SOURCE-STRING-17 TO SOURCE-STRING
189300*    "123.456E+12"
189400     MOVE +1   TO TEMPLATE-COUNT
189500     MOVE ZERO TO TMPLT-11-LEN
189600     MOVE LOW-VALUE TO TMPLT-11-TXT
189700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
189800     IF PACKAGE-CALL
189900*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
190000       SET ACTION-DEEDIT TO TRUE
190100       MOVE "ASUSSVCB" TO LS-ASMODULE
190200       CALL LS-ASMODULE
190300            USING ASCA-COMMAREA
190400                  ACTION
190500                  AS-REQUEST-OPTIONS
190600                  SOURCE-STRING
190700                  TEMPLATE-COUNT
190800                  TEMPLATE-11
190900                  AS5CTOK-OCTOKEN
191000     ELSE
191100       MOVE "ASUDDEDT" TO LS-ASMODULE
191200       CALL LS-ASMODULE
191300            USING ASCA-COMMAREA
191400                  AS-REQUEST-OPTIONS
191500                  SOURCE-STRING
191600                  TEMPLATE-COUNT
191700                  TEMPLATE-11
191800                  AS5CTOK-OCTOKEN
191900     END-IF
192000
192100     IF AS5CTOK-SEVNBR > ZERO
192200       DISPLAY WS-PGMID
192300            " RETURN CODE: " AS5CTOK-SEVNBR
192400            " MESSAGE NBR: " AS5CTOK-MSGNBR
192500     END-IF
192600
192700     DISPLAY WS-PGMID
192800          " TEST CASE 008.G - DE-EDIT (123.456E+12)"
192900     DISPLAY WS-PGMID
193000          " NUMERIC / NO CASE"
193100     DISPLAY WS-PGMID
193200          " SOURCE:" SRC-TXT
193300     DISPLAY WS-PGMID
193400          " OUTPUT LEN (18):" TMPLT-11-LEN
193500     DISPLAY WS-PGMID
193600          " RESULT:" TMPLT-11-TXT
193700     DISPLAY WS-PGMID
193800          "    TYPE (F):" TMPLT-11-TOK-TYPE
193900          "     STYPE (1):" TMPLT-11-TOK-STYPE
194000          "     LEN (14):" TMPLT-11-TOK-LEN
194100     DISPLAY WS-PGMID
194200          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
194300          "  SCALE (3):" TMPLT-11-TOK-SCALE
194400          "  EXP (2):" TMPLT-11-TOK-EXP
194500     DISPLAY WS-PGMID
194600          "     NBR (12345612):" TMPLT-11-TOK-NBR
194700     DISPLAY WS-PGMID
194800          " "
194900          TMPLT-11-TXT-Z
195000     DISPLAY " "
195100     SKIP2
195200*    * ------------------------------------------------------- *
195300*    * CALL STRING SERVICE DE-EDIT (0.123456E+15)
195400*    * ------------------------------------------------------- *
195500     SKIP1
195600     MOVE ZERO TO RO-START
195700                  RO-COUNT
195800                  RO-PSA-LEN
195900     SET RO-FLAG-NONE  TO TRUE
196000     MOVE WS-SOURCE-STRING-18 TO SOURCE-STRING
196100*    "0.123456E+15"
196200     MOVE +1   TO TEMPLATE-COUNT
196300     MOVE ZERO TO TMPLT-11-LEN
196400     MOVE LOW-VALUE TO TMPLT-11-TXT
196500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
196600     IF PACKAGE-CALL
196700*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
196800       SET ACTION-DEEDIT TO TRUE
196900       MOVE "ASUSSVCB" TO LS-ASMODULE
197000       CALL LS-ASMODULE
197100            USING ASCA-COMMAREA
197200                  ACTION
197300                  AS-REQUEST-OPTIONS
197400                  SOURCE-STRING
197500                  TEMPLATE-COUNT
197600                  TEMPLATE-11
197700                  AS5CTOK-OCTOKEN
197800     ELSE
197900       MOVE "ASUDDEDT" TO LS-ASMODULE
198000       CALL LS-ASMODULE
198100            USING ASCA-COMMAREA
198200                  AS-REQUEST-OPTIONS
198300                  SOURCE-STRING
198400                  TEMPLATE-COUNT
198500                  TEMPLATE-11
198600                  AS5CTOK-OCTOKEN
198700     END-IF
198800
198900     IF AS5CTOK-SEVNBR > ZERO
199000       DISPLAY WS-PGMID
199100            " RETURN CODE: " AS5CTOK-SEVNBR
199200            " MESSAGE NBR: " AS5CTOK-MSGNBR
199300     END-IF
199400
199500     DISPLAY WS-PGMID
199600          " TEST CASE 008.H - DE-EDIT (0.123456E+15)"
199700     DISPLAY WS-PGMID
199800          " NUMERIC / NO CASE"
199900     DISPLAY WS-PGMID
200000          " SOURCE:" SRC-TXT
200100     DISPLAY WS-PGMID
200200          " OUTPUT LEN (18):" TMPLT-11-LEN
200300     DISPLAY WS-PGMID
200400          " RESULT:" TMPLT-11-TXT
200500     DISPLAY WS-PGMID
200600          "    TYPE (F):" TMPLT-11-TOK-TYPE
200700          "     STYPE (1):" TMPLT-11-TOK-STYPE
200800          "     LEN (14):" TMPLT-11-TOK-LEN
200900     DISPLAY WS-PGMID
201000          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
201100          "  SCALE (6):" TMPLT-11-TOK-SCALE
201200          "  EXP (2):" TMPLT-11-TOK-EXP
201300     DISPLAY WS-PGMID
201400          "     NBR (12345615):" TMPLT-11-TOK-NBR
201500     DISPLAY WS-PGMID
201600          " "
201700          TMPLT-11-TXT-Z
201800     DISPLAY " "
201900     SKIP2
202000*    * ------------------------------------------------------- *
202100*    * CALL STRING SERVICE DE-EDIT (-123.456E-15)
202200*    * ------------------------------------------------------- *
202300     SKIP1
202400     MOVE ZERO TO RO-START
202500                  RO-COUNT
202600                  RO-PSA-LEN
202700     SET RO-FLAG-NONE  TO TRUE
202800     MOVE WS-SOURCE-STRING-19 TO SOURCE-STRING
202900*    "-123.456E-3"
203000     MOVE +1   TO TEMPLATE-COUNT
203100     MOVE ZERO TO TMPLT-11-LEN
203200     MOVE LOW-VALUE TO TMPLT-11-TXT
203300     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
203400     IF PACKAGE-CALL
203500*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
203600       SET ACTION-DEEDIT TO TRUE
203700       MOVE "ASUSSVCB" TO LS-ASMODULE
203800       CALL LS-ASMODULE
203900            USING ASCA-COMMAREA
204000                  ACTION
204100                  AS-REQUEST-OPTIONS
204200                  SOURCE-STRING
204300                  TEMPLATE-COUNT
204400                  TEMPLATE-11
204500                  AS5CTOK-OCTOKEN
204600     ELSE
204700       MOVE "ASUDDEDT" TO LS-ASMODULE
204800       CALL LS-ASMODULE
204900            USING ASCA-COMMAREA
205000                  AS-REQUEST-OPTIONS
205100                  SOURCE-STRING
205200                  TEMPLATE-COUNT
205300                  TEMPLATE-11
205400                  AS5CTOK-OCTOKEN
205500     END-IF
205600
205700     IF AS5CTOK-SEVNBR > ZERO
205800       DISPLAY WS-PGMID
205900            " RETURN CODE: " AS5CTOK-SEVNBR
206000            " MESSAGE NBR: " AS5CTOK-MSGNBR
206100     END-IF
206200
206300     DISPLAY WS-PGMID
206400          " TEST CASE 008.I - DE-EDIT (-123.456E-3)"
206500     DISPLAY WS-PGMID
206600          " NUMERIC / NO CASE"
206700     DISPLAY WS-PGMID
206800          " SOURCE:" SRC-TXT
206900     DISPLAY WS-PGMID
207000          " OUTPUT LEN (17):" TMPLT-11-LEN
207100     DISPLAY WS-PGMID
207200          " RESULT:" TMPLT-11-TXT
207300     DISPLAY WS-PGMID
207400          "    TYPE (F):" TMPLT-11-TOK-TYPE
207500          "     STYPE (1):" TMPLT-11-TOK-STYPE
207600          "     LEN (13):" TMPLT-11-TOK-LEN
207700     DISPLAY WS-PGMID
207800          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
207900          "  SCALE (3):" TMPLT-11-TOK-SCALE
208000          "  EXP (1):" TMPLT-11-TOK-EXP
208100     DISPLAY WS-PGMID
208200          "     NBR (12345OL):" TMPLT-11-TOK-NBR
208300     DISPLAY WS-PGMID
208400          " "
208500          TMPLT-11-TXT-Z
208600     DISPLAY " "
208700     SKIP2
208800     CONTINUE.
208900 TEST-CASE-009.
209000
209100     IF NOT (TEST-CASE = "ALL" OR "009")
209200       GO TO TEST-CASE-010
209300     END-IF
209400     SKIP2
209500     CONTINUE.
209600 TEST-CASE-010.
209700
209800     IF NOT (TEST-CASE = "ALL" OR "010")
209900       GO TO TEST-CASE-011
210000     END-IF
210100
210200*    * ------------------------------------------------------- *
210300*    * CALL STRING SERVICE JUSTIFY
210400*    * ------------------------------------------------------- *
210500     SKIP1
210600     MOVE ZERO TO RO-START
210700                  RO-COUNT
210800                  RO-PSA-LEN
210900                  TMPLT-7-LEN
211000     SET RO-FLAG-UC TO TRUE
211100     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
211200*    "+How+now+brown+cow++"
211300     MOVE +1   TO TEMPLATE-COUNT
211400     MOVE ZERO TO TMPLT-7-LEN
211500     MOVE LOW-VALUE TO TMPLT-7-TXT
211600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
211700     IF PACKAGE-CALL
211800*      CALL ASUSSVCB TO PERFORM SERVICE JUSTIFY
211900       SET ACTION-JUSTIFY TO TRUE
212000       MOVE "ASUSSVCB" TO LS-ASMODULE
212100       CALL LS-ASMODULE
212200            USING ASCA-COMMAREA
212300                  ACTION
212400                  AS-REQUEST-OPTIONS
212500                  SOURCE-STRING
212600                  TEMPLATE-COUNT
212700                  TEMPLATE-7
212800                  AS5CTOK-OCTOKEN
212900     ELSE
213000       MOVE "ASUDJSTF" TO LS-ASMODULE
213100       CALL LS-ASMODULE
213200            USING ASCA-COMMAREA
213300                  AS-REQUEST-OPTIONS
213400                  SOURCE-STRING
213500                  TEMPLATE-COUNT
213600                  TEMPLATE-7
213700                  AS5CTOK-OCTOKEN
213800     END-IF
213900
214000     IF AS5CTOK-SEVNBR > ZERO
214100       DISPLAY WS-PGMID
214200            " RETURN CODE: " AS5CTOK-SEVNBR
214300            " MESSAGE NBR: " AS5CTOK-MSGNBR
214400     END-IF
214500
214600     DISPLAY WS-PGMID
214700          " TEST CASE 010 - JUSTIFY (4 PADS BETWEEN)"
214800     DISPLAY WS-PGMID
214900          " MIXED CASE / UPPER CASE"
215000     DISPLAY WS-PGMID
215100          " SOURCE:" SRC-TXT
215200     DISPLAY WS-PGMID
215300          " OUTPUT LEN (26):" TMPLT-7-LEN
215400     DISPLAY WS-PGMID
215500          " RESULT:" TMPLT-7-TXT
215600     DISPLAY WS-PGMID
215700          " "
215800          TMPLT-7-TXT-Z
215900     DISPLAY " "
216000     SKIP2
216100     CONTINUE.
216200 TEST-CASE-011.
216300
216400     IF NOT (TEST-CASE = "ALL" OR "011")
216500       GO TO TEST-CASE-012
216600     END-IF
216700
216800*    * ------------------------------------------------------- *
216900*    * CALL STRING SERVICE LEFT JUSTIFY
217000*    * ------------------------------------------------------- *
217100     SKIP1
217200     MOVE ZERO TO RO-START
217300                  RO-COUNT
217400                  RO-PSA-LEN
217500                  TMPLT-6-LEN
217600     SET RO-FLAG-NONE  TO TRUE
217700     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
217800*    "+++++1ST+NATIONAL+BANK+++++"
217900     MOVE +1   TO TEMPLATE-COUNT
218000     MOVE ZERO TO TMPLT-6-LEN
218100     MOVE LOW-VALUE TO TMPLT-6-TXT
218200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
218300     IF PACKAGE-CALL
218400*      CALL ASUSSVCB TO PERFORM SERVICE LEFT JUSTIFY
218500       SET ACTION-LEFT TO TRUE
218600       MOVE "ASUSSVCB" TO LS-ASMODULE
218700       CALL LS-ASMODULE
218800            USING ASCA-COMMAREA
218900                  ACTION
219000                  AS-REQUEST-OPTIONS
219100                  SOURCE-STRING
219200                  TEMPLATE-COUNT
219300                  TEMPLATE-6
219400                  AS5CTOK-OCTOKEN
219500     ELSE
219600       MOVE "ASUDLEFT" TO LS-ASMODULE
219700       CALL LS-ASMODULE
219800            USING ASCA-COMMAREA
219900                  AS-REQUEST-OPTIONS
220000                  SOURCE-STRING
220100                  TEMPLATE-COUNT
220200                  TEMPLATE-6
220300                  AS5CTOK-OCTOKEN
220400     END-IF
220500
220600     IF AS5CTOK-SEVNBR > ZERO
220700       DISPLAY WS-PGMID
220800            " RETURN CODE: " AS5CTOK-SEVNBR
220900            " MESSAGE NBR: " AS5CTOK-MSGNBR
221000     END-IF
221100
221200     DISPLAY WS-PGMID
221300          " TEST CASE 011 - LEFT"
221400     DISPLAY WS-PGMID
221500          " UPPER CASE / NO CASE"
221600     DISPLAY WS-PGMID
221700          " SOURCE:" SRC-TXT
221800     DISPLAY WS-PGMID
221900          " OUTPUT LEN (55):" TMPLT-6-LEN
222000     DISPLAY WS-PGMID
222100          " RESULT:" TMPLT-6-TXT
222200     DISPLAY WS-PGMID
222300          " "
222400          TMPLT-6-TXT-Z
222500     DISPLAY " "
222600     SKIP2
222700     CONTINUE.
222800 TEST-CASE-012.
222900
223000     IF NOT (TEST-CASE = "ALL" OR "012")
223100       GO TO TEST-CASE-013
223200     END-IF
223300     SKIP2
223400     CONTINUE.
223500 TEST-CASE-013.
223600
223700     IF NOT (TEST-CASE = "ALL" OR "013")
223800       GO TO TEST-CASE-014
223900     END-IF
224000
224100*    * ------------------------------------------------------- *
224200*    * CALL STRING SERVICE RIGHT JUSTIFY
224300*    * ------------------------------------------------------- *
224400     SKIP1
224500     MOVE ZERO TO RO-START
224600                  RO-COUNT
224700                  RO-PSA-LEN
224800                  TMPLT-6-LEN
224900     SET RO-FLAG-NONE  TO TRUE
225000     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
225100*    "+++++1ST+NATIONAL+BANK+++++"
225200     MOVE +1   TO TEMPLATE-COUNT
225300     MOVE ZERO TO TMPLT-6-LEN
225400     MOVE LOW-VALUE TO TMPLT-6-TXT
225500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
225600     IF PACKAGE-CALL
225700*      CALL ASUSSVCB TO PERFORM SERVICE RIGHT JUSTIFY
225800       SET ACTION-RIGHT TO TRUE
225900       MOVE "ASUSSVCB" TO LS-ASMODULE
226000       CALL LS-ASMODULE
226100            USING ASCA-COMMAREA
226200                  ACTION
226300                  AS-REQUEST-OPTIONS
226400                  SOURCE-STRING
226500                  TEMPLATE-COUNT
226600                  TEMPLATE-6
226700                  AS5CTOK-OCTOKEN
226800     ELSE
226900       MOVE "ASUDRGHT" TO LS-ASMODULE
227000       CALL LS-ASMODULE
227100            USING ASCA-COMMAREA
227200                  AS-REQUEST-OPTIONS
227300                  SOURCE-STRING
227400                  TEMPLATE-COUNT
227500                  TEMPLATE-6
227600                  AS5CTOK-OCTOKEN
227700     END-IF
227800
227900     IF AS5CTOK-SEVNBR > ZERO
228000       DISPLAY WS-PGMID
228100            " RETURN CODE: " AS5CTOK-SEVNBR
228200            " MESSAGE NBR: " AS5CTOK-MSGNBR
228300     END-IF
228400
228500     DISPLAY WS-PGMID
228600          " TEST CASE 013 - RIGHT"
228700     DISPLAY WS-PGMID
228800          " UPPER CASE / NO CASE"
228900     DISPLAY WS-PGMID
229000          " SOURCE:" SRC-TXT
229100     DISPLAY WS-PGMID
229200          " OUTPUT LEN (55):" TMPLT-6-LEN
229300     DISPLAY WS-PGMID
229400          " RESULT:" TMPLT-6-TXT
229500     DISPLAY WS-PGMID
229600          " "
229700          TMPLT-6-TXT-Z
229800     DISPLAY " "
229900     SKIP2
230000     CONTINUE.
230100 TEST-CASE-014.
230200
230300     IF NOT (TEST-CASE = "ALL" OR "014")
230400       GO TO TEST-CASE-015
230500     END-IF
230600
230700*    * ------------------------------------------------------- *
230800*    * CALL STRING SERVICE SPACE
230900*    * ------------------------------------------------------- *
231000     SKIP1
231100     MOVE ZERO TO RO-START
231200                  RO-COUNT
231300                  RO-PSA-LEN
231400                  TMPLT-7-LEN
231500     SET RO-FLAG-UC TO TRUE
231600     MOVE +3   TO RO-COUNT
231700     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
231800*    "+How+now+brown+cow++"
231900     MOVE +1   TO TEMPLATE-COUNT
232000     MOVE ZERO TO TMPLT-7-LEN
232100     MOVE LOW-VALUE TO TMPLT-7-TXT
232200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
232300     IF PACKAGE-CALL
232400*      CALL ASUSSVCB TO PERFORM SERVICE SPACE
232500       SET ACTION-SPACE TO TRUE
232600       MOVE "ASUSSVCB" TO LS-ASMODULE
232700       CALL LS-ASMODULE
232800            USING ASCA-COMMAREA
232900                  ACTION
233000                  AS-REQUEST-OPTIONS
233100                  SOURCE-STRING
233200                  TEMPLATE-COUNT
233300                  TEMPLATE-7
233400                  AS5CTOK-OCTOKEN
233500     ELSE
233600       MOVE "ASUDSPCE" TO LS-ASMODULE
233700       CALL LS-ASMODULE
233800            USING ASCA-COMMAREA
233900                  AS-REQUEST-OPTIONS
234000                  SOURCE-STRING
234100                  TEMPLATE-COUNT
234200                  TEMPLATE-7
234300                  AS5CTOK-OCTOKEN
234400     END-IF
234500
234600     IF AS5CTOK-SEVNBR > ZERO
234700       DISPLAY WS-PGMID
234800            " RETURN CODE: " AS5CTOK-SEVNBR
234900            " MESSAGE NBR: " AS5CTOK-MSGNBR
235000     END-IF
235100
235200     DISPLAY WS-PGMID
235300          " TEST CASE 014 - SPACE (3 PADS BETWEEN)"
235400     DISPLAY WS-PGMID
235500          " MIXED CASE / UPPER CASE"
235600     DISPLAY WS-PGMID
235700          " COUNT:" RO-COUNT
235800     DISPLAY WS-PGMID
235900          " SOURCE:" SRC-TXT
236000     DISPLAY WS-PGMID
236100          " OUTPUT LEN (23):" TMPLT-7-LEN
236200     DISPLAY WS-PGMID
236300          " RESULT:" TMPLT-7-TXT
236400     DISPLAY WS-PGMID
236500          " "
236600          TMPLT-7-TXT-Z
236700     DISPLAY " "
236800     SKIP2
236900     CONTINUE.
237000 TEST-CASE-015.
237100
237200     IF NOT (TEST-CASE = "ALL" OR "015")
237300       GO TO TEST-CASE-016
237400     END-IF
237500
237600*    * ------------------------------------------------------- *
237700*    * CALL STRING SERVICE STRING DELETE LEADING
237800*    * ------------------------------------------------------- *
237900     SKIP1
238000     MOVE ZERO TO RO-START
238100                  RO-COUNT
238200                  RO-PSA-LEN
238300     SET RO-FLAG-NONE  TO TRUE
238400     MOVE +0   TO RO-START
238500     MOVE +7   TO RO-COUNT
238600     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
238700*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
238800     MOVE +1   TO TEMPLATE-COUNT
238900     MOVE ZERO TO TMPLT-6-LEN
239000     MOVE LOW-VALUE TO TMPLT-6-TXT
239100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
239200     IF PACKAGE-CALL
239300*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
239400       SET ACTION-STRDEL TO TRUE
239500       MOVE "ASUSSVCB" TO LS-ASMODULE
239600       CALL LS-ASMODULE
239700            USING ASCA-COMMAREA
239800                  ACTION
239900                  AS-REQUEST-OPTIONS
240000                  SOURCE-STRING
240100                  TEMPLATE-COUNT
240200                  TEMPLATE-6
240300                  AS5CTOK-OCTOKEN
240400     ELSE
240500       MOVE "ASUDSDEL" TO LS-ASMODULE
240600       CALL LS-ASMODULE
240700            USING ASCA-COMMAREA
240800                  AS-REQUEST-OPTIONS
240900                  SOURCE-STRING
241000                  TEMPLATE-COUNT
241100                  TEMPLATE-6
241200                  AS5CTOK-OCTOKEN
241300     END-IF
241400
241500     IF AS5CTOK-SEVNBR > ZERO
241600       DISPLAY WS-PGMID
241700            " RETURN CODE: " AS5CTOK-SEVNBR
241800            " MESSAGE NBR: " AS5CTOK-MSGNBR
241900     END-IF
242000
242100     DISPLAY WS-PGMID
242200          " TEST CASE 015.A - STRING DELETE (0,7)"
242300     DISPLAY WS-PGMID
242400          " MIXED CASE / NO CASE"
242500     DISPLAY WS-PGMID
242600          " SOURCE:" SRC-TXT
242700     DISPLAY WS-PGMID
242800          " OUTPUT LEN (44):" TMPLT-6-LEN
242900     DISPLAY WS-PGMID
243000          " RESULT:" TMPLT-6-TXT
243100     DISPLAY WS-PGMID
243200          " "
243300          TMPLT-6-TXT-Z
243400     DISPLAY " "
243500     SKIP2
243600*    * ------------------------------------------------------- *
243700*    * CALL STRING SERVICE STRING DELETE MIDDLE
243800*    * ------------------------------------------------------- *
243900     SKIP1
244000     MOVE ZERO TO RO-START
244100                  RO-COUNT
244200                  RO-PSA-LEN
244300     SET RO-FLAG-NONE  TO TRUE
244400     MOVE +25  TO RO-START
244500     MOVE +9   TO RO-COUNT
244600     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
244700*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
244800     MOVE +1   TO TEMPLATE-COUNT
244900     MOVE ZERO TO TMPLT-6-LEN
245000     MOVE LOW-VALUE TO TMPLT-6-TXT
245100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
245200     IF PACKAGE-CALL
245300*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
245400       SET ACTION-STRDEL TO TRUE
245500       MOVE "ASUSSVCB" TO LS-ASMODULE
245600       CALL LS-ASMODULE
245700            USING ASCA-COMMAREA
245800                  ACTION
245900                  AS-REQUEST-OPTIONS
246000                  SOURCE-STRING
246100                  TEMPLATE-COUNT
246200                  TEMPLATE-6
246300                  AS5CTOK-OCTOKEN
246400     ELSE
246500       MOVE "ASUDSDEL" TO LS-ASMODULE
246600       CALL LS-ASMODULE
246700            USING ASCA-COMMAREA
246800                  AS-REQUEST-OPTIONS
246900                  SOURCE-STRING
247000                  TEMPLATE-COUNT
247100                  TEMPLATE-6
247200                  AS5CTOK-OCTOKEN
247300     END-IF
247400
247500     IF AS5CTOK-SEVNBR > ZERO
247600       DISPLAY WS-PGMID
247700            " RETURN CODE: " AS5CTOK-SEVNBR
247800            " MESSAGE NBR: " AS5CTOK-MSGNBR
247900     END-IF
248000
248100     DISPLAY WS-PGMID
248200          " TEST CASE 015.B - STRING DELETE (25,9)"
248300     DISPLAY WS-PGMID
248400          " MIXED CASE / NO CASE"
248500     DISPLAY WS-PGMID
248600          " SOURCE:" SRC-TXT
248700     DISPLAY WS-PGMID
248800          " OUTPUT LEN (42):" TMPLT-6-LEN
248900     DISPLAY WS-PGMID
249000          " RESULT:" TMPLT-6-TXT
249100     DISPLAY WS-PGMID
249200          " "
249300          TMPLT-6-TXT-Z
249400     DISPLAY " "
249500     SKIP2
249600*    * ------------------------------------------------------- *
249700*    * CALL STRING SERVICE STRING DELETE TRAILING
249800*    * ------------------------------------------------------- *
249900     SKIP1
250000     MOVE ZERO TO RO-START
250100                  RO-COUNT
250200                  RO-PSA-LEN
250300     SET RO-FLAG-NONE  TO TRUE
250400     MOVE +25  TO RO-START
250500     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
250600*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
250700     MOVE +1   TO TEMPLATE-COUNT
250800     MOVE ZERO TO TMPLT-6-LEN
250900     MOVE LOW-VALUE TO TMPLT-6-TXT
251000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
251100     IF PACKAGE-CALL
251200*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
251300       SET ACTION-STRDEL TO TRUE
251400       MOVE "ASUSSVCB" TO LS-ASMODULE
251500       CALL LS-ASMODULE
251600            USING ASCA-COMMAREA
251700                  ACTION
251800                  AS-REQUEST-OPTIONS
251900                  SOURCE-STRING
252000                  TEMPLATE-COUNT
252100                  TEMPLATE-6
252200                  AS5CTOK-OCTOKEN
252300     ELSE
252400       MOVE "ASUDSDEL" TO LS-ASMODULE
252500       CALL LS-ASMODULE
252600            USING ASCA-COMMAREA
252700                  AS-REQUEST-OPTIONS
252800                  SOURCE-STRING
252900                  TEMPLATE-COUNT
253000                  TEMPLATE-6
253100                  AS5CTOK-OCTOKEN
253200     END-IF
253300
253400     IF AS5CTOK-SEVNBR > ZERO
253500       DISPLAY WS-PGMID
253600            " RETURN CODE: " AS5CTOK-SEVNBR
253700            " MESSAGE NBR: " AS5CTOK-MSGNBR
253800     END-IF
253900
254000     DISPLAY WS-PGMID
254100          " TEST CASE 015.C - STRING DELETE (25,0)"
254200     DISPLAY WS-PGMID
254300          " MIXED CASE / NO CASE"
254400     DISPLAY WS-PGMID
254500         " SOURCE:" SRC-TXT
254600     DISPLAY WS-PGMID
254700          " OUTPUT LEN (24):" TMPLT-6-LEN
254800     DISPLAY WS-PGMID
254900          " RESULT:" TMPLT-6-TXT
255000     DISPLAY WS-PGMID
255100          " "
255200          TMPLT-6-TXT-Z
255300     DISPLAY " "
255400     SKIP2
255500*    * ------------------------------------------------------- *
255600*    * CALL STRING SERVICE STRING DELETE VIA STRING (front)
255700*    * ------------------------------------------------------- *
255800     SKIP1
255900     MOVE ZERO TO RO-START
256000                  RO-COUNT
256100                  RO-PSA-LEN
256200     SET RO-FLAG-NONE  TO TRUE
256300     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
256400*    "+How+now+brown+cow++"
256500     MOVE +2   TO TEMPLATE-COUNT
256600     MOVE ZERO TO TMPLT-6-LEN
256700     MOVE LOW-VALUE TO TMPLT-6-TXT
256800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
256900     IF PACKAGE-CALL
257000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
257100       SET ACTION-STRDEL  TO TRUE
257200       MOVE "ASUSSVCB" TO LS-ASMODULE
257300       CALL LS-ASMODULE
257400            USING ASCA-COMMAREA
257500                  ACTION
257600                  AS-REQUEST-OPTIONS
257700                  SOURCE-STRING
257800                  TEMPLATE-COUNT
257900                  TEMPLATE-21
258000                  TEMPLATE-6
258100                  AS5CTOK-OCTOKEN
258200     ELSE
258300       MOVE "ASUDSDEL" TO LS-ASMODULE
258400       CALL LS-ASMODULE
258500            USING ASCA-COMMAREA
258600                  AS-REQUEST-OPTIONS
258700                  SOURCE-STRING
258800                  TEMPLATE-COUNT
258900                  TEMPLATE-21
259000                  TEMPLATE-6
259100                  AS5CTOK-OCTOKEN
259200     END-IF
259300
259400     IF AS5CTOK-SEVNBR > ZERO
259500       DISPLAY WS-PGMID
259600            " RETURN CODE: " AS5CTOK-SEVNBR
259700            " MESSAGE NBR: " AS5CTOK-MSGNBR
259800     END-IF
259900
260000     DISPLAY WS-PGMID
260100          " TEST CASE 015.D - STRING DELETE (+How+)"
260200     DISPLAY WS-PGMID
260300          " MIXED CASE / NO CASE"
260400     DISPLAY WS-PGMID
260500          " SOURCE:" SRC-TXT
260600     DISPLAY WS-PGMID
260700          " OUTPUT LEN (15):" TMPLT-6-LEN
260800     DISPLAY WS-PGMID
260900          " RESULT:" TMPLT-6-TXT
261000     DISPLAY WS-PGMID
261100          " "
261200          TMPLT-6-TXT-Z
261300     DISPLAY " "
261400     SKIP2
261500*    * ------------------------------------------------------- *
261600*    * CALL STRING SERVICE STRING DELETE VIA STRING (middle)
261700*    * ------------------------------------------------------- *
261800     SKIP1
261900     MOVE ZERO TO RO-START
262000                  RO-COUNT
262100                  RO-PSA-LEN
262200     SET RO-FLAG-NONE  TO TRUE
262300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
262400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
262500     MOVE +2   TO TEMPLATE-COUNT
262600     MOVE ZERO TO TMPLT-6-TXT
262700     MOVE LOW-VALUE TO TMPLT-6-TXT
262800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
262900     IF PACKAGE-CALL
263000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
263100       SET ACTION-STRDEL TO TRUE
263200       MOVE "ASUSSVCB" TO LS-ASMODULE
263300       CALL LS-ASMODULE
263400            USING ASCA-COMMAREA
263500                  ACTION
263600                  AS-REQUEST-OPTIONS
263700                  SOURCE-STRING
263800                  TEMPLATE-COUNT
263900                  TEMPLATE-8
264000                  TEMPLATE-6
264100                  AS5CTOK-OCTOKEN
264200     ELSE
264300       MOVE "ASUDSDEL" TO LS-ASMODULE
264400       CALL LS-ASMODULE
264500            USING ASCA-COMMAREA
264600                  AS-REQUEST-OPTIONS
264700                  SOURCE-STRING
264800                  TEMPLATE-COUNT
264900                  TEMPLATE-8
265000                  TEMPLATE-6
265100                  AS5CTOK-OCTOKEN
265200     END-IF
265300
265400     IF AS5CTOK-SEVNBR > ZERO
265500       DISPLAY WS-PGMID
265600            " RETURN CODE: " AS5CTOK-SEVNBR
265700            " MESSAGE NBR: " AS5CTOK-MSGNBR
265800     END-IF
265900
266000     DISPLAY WS-PGMID
266100          " TEST CASE 015.E - STRING DELETE (GOOD+)"
266200     DISPLAY WS-PGMID
266300          " MIXED CASE / NO CASE"
266400     DISPLAY WS-PGMID
266500          " SOURCE:" SRC-TXT
266600     DISPLAY WS-PGMID
266700          " OUTPUT LEN (0):" TMPLT-6-LEN
266800     DISPLAY WS-PGMID
266900          " RESULT:" TMPLT-6-TXT
267000     DISPLAY WS-PGMID
267100          " "
267200          TMPLT-6-TXT-Z
267300     DISPLAY " "
267400     SKIP2
267500*    * ------------------------------------------------------- *
267600*    * CALL STRING SERVICE STRING DELETE VIA STRING (middle)
267700*    * ------------------------------------------------------- *
267800     SKIP1
267900     MOVE ZERO TO RO-START
268000                  RO-COUNT
268100                  RO-PSA-LEN
268200     SET RO-FLAG-UC    TO TRUE
268300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
268400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
268500     MOVE +2   TO TEMPLATE-COUNT
268600     MOVE ZERO TO TMPLT-6-LEN
268700     MOVE LOW-VALUE TO TMPLT-6-TXT
268800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
268900     IF PACKAGE-CALL
269000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
269100       SET ACTION-STRDEL TO TRUE
269200       MOVE "ASUSSVCB" TO LS-ASMODULE
269300       CALL LS-ASMODULE
269400            USING ASCA-COMMAREA
269500                  ACTION
269600                  AS-REQUEST-OPTIONS
269700                  SOURCE-STRING
269800                  TEMPLATE-COUNT
269900                  TEMPLATE-8
270000                  TEMPLATE-6
270100                  AS5CTOK-OCTOKEN
270200     ELSE
270300       MOVE "ASUDSDEL" TO LS-ASMODULE
270400       CALL LS-ASMODULE
270500            USING ASCA-COMMAREA
270600                  AS-REQUEST-OPTIONS
270700                  SOURCE-STRING
270800                  TEMPLATE-COUNT
270900                  TEMPLATE-8
271000                  TEMPLATE-6
271100                  AS5CTOK-OCTOKEN
271200     END-IF
271300
271400     IF AS5CTOK-SEVNBR > ZERO
271500       DISPLAY WS-PGMID
271600            " RETURN CODE: " AS5CTOK-SEVNBR
271700            " MESSAGE NBR: " AS5CTOK-MSGNBR
271800     END-IF
271900
272000     DISPLAY WS-PGMID
272100          " TEST CASE 015.F - STRING DELETE (GOOD+)"
272200     DISPLAY WS-PGMID
272300          " MIXED CASE / UPPER CASE"
272400     DISPLAY WS-PGMID
272500          " SOURCE:" SRC-TXT
272600     DISPLAY WS-PGMID
272700          " OUTPUT LEN (46):" TMPLT-6-LEN
272800     DISPLAY WS-PGMID
272900          " RESULT:" TMPLT-6-TXT
273000     DISPLAY WS-PGMID
273100          " "
273200          TMPLT-6-TXT-Z
273300     DISPLAY " "
273400     SKIP2
273500*    * ------------------------------------------------------- *
273600*    * CALL STRING SERVICE STRING DELETE VIA STRING (trail)
273700*    * ------------------------------------------------------- *
273800     SKIP1
273900     MOVE ZERO TO RO-START
274000                  RO-COUNT
274100                  RO-PSA-LEN
274200     SET RO-FLAG-NONE  TO TRUE
274300     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
274400*    "+How+now+brown+cow++"
274500     MOVE +2   TO TEMPLATE-COUNT
274600     MOVE ZERO TO TMPLT-6-LEN
274700     MOVE LOW-VALUE TO TMPLT-6-TXT
274800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
274900     IF PACKAGE-CALL
275000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
275100       SET ACTION-STRDEL  TO TRUE
275200       MOVE "ASUSSVCB" TO LS-ASMODULE
275300       CALL LS-ASMODULE
275400            USING ASCA-COMMAREA
275500                  ACTION
275600                  AS-REQUEST-OPTIONS
275700                  SOURCE-STRING
275800                  TEMPLATE-COUNT
275900                  TEMPLATE-22
276000                  TEMPLATE-6
276100                  AS5CTOK-OCTOKEN
276200     ELSE
276300       MOVE "ASUDSDEL" TO LS-ASMODULE
276400       CALL LS-ASMODULE
276500            USING ASCA-COMMAREA
276600                  AS-REQUEST-OPTIONS
276700                  SOURCE-STRING
276800                  TEMPLATE-COUNT
276900                  TEMPLATE-22
277000                  TEMPLATE-6
277100                  AS5CTOK-OCTOKEN
277200     END-IF
277300
277400     IF AS5CTOK-SEVNBR > ZERO
277500       DISPLAY WS-PGMID
277600            " RETURN CODE: " AS5CTOK-SEVNBR
277700            " MESSAGE NBR: " AS5CTOK-MSGNBR
277800     END-IF
277900
278000     DISPLAY WS-PGMID
278100          " TEST CASE 015.G - STRING DELETE (+cow++)"
278200     DISPLAY WS-PGMID
278300          " MIXED CASE / NO CASE"
278400     DISPLAY WS-PGMID
278500          " SOURCE:" SRC-TXT
278600     DISPLAY WS-PGMID
278700          " OUTPUT LEN (14):" TMPLT-6-LEN
278800     DISPLAY WS-PGMID
278900          " RESULT:" TMPLT-6-TXT
279000     DISPLAY WS-PGMID
279100          " "
279200          TMPLT-6-TXT-Z
279300     DISPLAY " "
279400     SKIP2
279500*    * ------------------------------------------------------- *
279600*    * CALL STRING SERVICE STRING DELETE VIA STRING (NO MATCH)
279700*    * ------------------------------------------------------- *
279800     SKIP1
279900     MOVE ZERO TO RO-START
280000                  RO-COUNT
280100                  RO-PSA-LEN
280200     SET RO-FLAG-NONE  TO TRUE
280300     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
280400*    "+How+now+brown+cow++"
280500     MOVE +2   TO TEMPLATE-COUNT
280600     MOVE ZERO TO TMPLT-6-LEN
280700     MOVE LOW-VALUE TO TMPLT-6-TXT
280800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
280900     IF PACKAGE-CALL
281000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
281100       SET ACTION-STRDEL  TO TRUE
281200       MOVE "ASUSSVCB" TO LS-ASMODULE
281300       CALL LS-ASMODULE
281400            USING ASCA-COMMAREA
281500                  ACTION
281600                  AS-REQUEST-OPTIONS
281700                  SOURCE-STRING
281800                  TEMPLATE-COUNT
281900                  TEMPLATE-8
282000                  TEMPLATE-6
282100                  AS5CTOK-OCTOKEN
282200     ELSE
282300       MOVE "ASUDSDEL" TO LS-ASMODULE
282400       CALL LS-ASMODULE
282500            USING ASCA-COMMAREA
282600                  AS-REQUEST-OPTIONS
282700                  SOURCE-STRING
282800                  TEMPLATE-COUNT
282900                  TEMPLATE-8
283000                  TEMPLATE-6
283100                  AS5CTOK-OCTOKEN
283200     END-IF
283300
283400     IF AS5CTOK-SEVNBR > ZERO
283500       DISPLAY WS-PGMID
283600            " RETURN CODE: " AS5CTOK-SEVNBR
283700            " MESSAGE NBR: " AS5CTOK-MSGNBR
283800     END-IF
283900
284000     DISPLAY WS-PGMID
284100          " TEST CASE 015.H - STRING DELETE (GOOD+)"
284200     DISPLAY WS-PGMID
284300          " MIXED CASE / NO CASE"
284400     DISPLAY WS-PGMID
284500          " SOURCE:" SRC-TXT
284600     DISPLAY WS-PGMID
284700          " OUTPUT LEN (0):" TMPLT-6-LEN
284800     DISPLAY WS-PGMID
284900          " RESULT:" TMPLT-6-TXT
285000     DISPLAY WS-PGMID
285100          " "
285200          TMPLT-6-TXT-Z
285300     DISPLAY " "
285400     SKIP2
285500     CONTINUE.
285600 TEST-CASE-016.
285700
285800     IF NOT (TEST-CASE = "ALL" OR "016")
285900       GO TO TEST-CASE-017
286000     END-IF
286100
286200*    * ------------------------------------------------------- *
286300*    * CALL STRING SERVICE FIRST/NEXT POS
286400*    * ------------------------------------------------------- *
286500     SKIP1
286600     MOVE ZERO TO RO-START
286700                  RO-COUNT
286800                  RO-PSA-LEN
286900     SET RO-FLAG-NONE TO TRUE
287000     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
287100*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
287200     MOVE +32  TO RO-PSA-LEN
287300     MOVE +2   TO TEMPLATE-COUNT
287400     MOVE ZERO TO TMPLT-5-LEN
287500     MOVE LOW-VALUE TO TMPLT-5-TXT
287600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
287700     IF PACKAGE-CALL
287800*      CALL ASUSSVCB TO PERFORM SERVICE POS
287900       SET ACTION-STRFPOS TO TRUE
288000       MOVE "ASUSSVCB" TO LS-ASMODULE
288100       CALL LS-ASMODULE
288200            USING ASCA-COMMAREA
288300                  ACTION
288400                  AS-REQUEST-OPTIONS
288500                  SOURCE-STRING
288600                  TEMPLATE-COUNT
288700                  TEMPLATE-4
288800                  TEMPLATE-5
288900                  AS5CTOK-OCTOKEN
289000     ELSE
289100       MOVE "ASUDFPOS" TO LS-ASMODULE
289200       CALL LS-ASMODULE
289300            USING ASCA-COMMAREA
289400                  AS-REQUEST-OPTIONS
289500                  SOURCE-STRING
289600                  TEMPLATE-COUNT
289700                  TEMPLATE-4
289800                  TEMPLATE-5
289900                  AS5CTOK-OCTOKEN
290000     END-IF
290100
290200     IF AS5CTOK-SEVNBR > ZERO
290300       DISPLAY WS-PGMID
290400            " RETURN CODE: " AS5CTOK-SEVNBR
290500            " MESSAGE NBR: " AS5CTOK-MSGNBR
290600     END-IF
290700
290800     DISPLAY WS-PGMID
290900          " TEST CASE 016.A FPOS FIRST/NEXT"
291000     DISPLAY WS-PGMID
291100          " MIXED CASE / MIXED CASE"
291200     DISPLAY WS-PGMID
291300          " SOURCE:" SRC-TXT
291400     DISPLAY WS-PGMID
291500          " ARGUMENT:" TMPLT-4-TXT
291600     MOVE TMPLT-5-TXT TO TEMP-FIELD
291700     DISPLAY WS-PGMID
291800          " POSITION CALL 1 (34):" FW-BINARY
291900     DISPLAY WS-PGMID
292000          " "
292100          TMPLT-5-TXT-Z
292200     DISPLAY " "
292300     IF FW-BINARY = ZERO
292400       GO TO TEST-CASE-017
292500     END-IF
292600     SKIP2
292700     CONTINUE.
292800 LOOP-16.
292900*    * ------------------------------------------------------- *
293000*    * CALL STRING SERVICE FIRST/NEXT POS
293100*    * ------------------------------------------------------- *
293200     SKIP1
293300     SET RO-FLAG-CONT TO TRUE
293400     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
293500*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
293600     MOVE +32  TO RO-PSA-LEN
293700     MOVE +2   TO TEMPLATE-COUNT
293800     MOVE ZERO TO TMPLT-5-TXT
293900     MOVE LOW-VALUE TO TMPLT-5-TXT
294000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
294100     IF PACKAGE-CALL
294200*      CALL ASUSSVCB TO PERFORM SERVICE POS
294300       SET ACTION-STRFPOS TO TRUE
294400       MOVE "ASUSSVCB" TO LS-ASMODULE
294500       CALL LS-ASMODULE
294600            USING ASCA-COMMAREA
294700                  ACTION
294800                  AS-REQUEST-OPTIONS
294900                  SOURCE-STRING
295000                  TEMPLATE-COUNT
295100                  TEMPLATE-4
295200                  TEMPLATE-5
295300                  AS5CTOK-OCTOKEN
295400     ELSE
295500       MOVE "ASUDFPOS" TO LS-ASMODULE
295600       CALL LS-ASMODULE
295700            USING ASCA-COMMAREA
295800                  AS-REQUEST-OPTIONS
295900                  SOURCE-STRING
296000                  TEMPLATE-COUNT
296100                  TEMPLATE-4
296200                  TEMPLATE-5
296300                  AS5CTOK-OCTOKEN
296400     END-IF
296500
296600     IF AS5CTOK-SEVNBR > ZERO
296700       DISPLAY WS-PGMID
296800            " RETURN CODE: " AS5CTOK-SEVNBR
296900            " MESSAGE NBR: " AS5CTOK-MSGNBR
297000     END-IF
297100
297200     DISPLAY WS-PGMID
297300          " TEST CASE 016.B FPOS FIRST/NEXT LOOP"
297400     DISPLAY WS-PGMID
297500          " MIXED CASE / MIXED CASE"
297600     DISPLAY WS-PGMID
297700          " SOURCE:" SRC-TXT
297800     DISPLAY WS-PGMID
297900          " ARGUMENT:" TMPLT-4-TXT
298000     MOVE TMPLT-5-TXT TO TEMP-FIELD
298100     DISPLAY WS-PGMID
298200          " POSITION CALL 2 (38,41,0):" FW-BINARY
298300     DISPLAY WS-PGMID
298400          " "
298500          TMPLT-5-TXT-Z
298600     DISPLAY " "
298700     IF FW-BINARY NOT = ZERO
298800       GO TO LOOP-16
298900     END-IF
299000     SKIP2
299100     CONTINUE.
299200 TEST-CASE-017.
299300
299400     IF NOT (TEST-CASE = "ALL" OR "017")
299500       GO TO TEST-CASE-018
299600     END-IF
299700
299800*    * ------------------------------------------------------- *
299900*    * CALL STRING SERVICE STRIP TRAILING
300000*    * ------------------------------------------------------- *
300100     SKIP1
300200     MOVE ZERO TO RO-START
300300                  RO-COUNT
300400                  RO-PSA-LEN
300500                  TMPLT-6-LEN
300600     SET RO-FLAG-TRAIL  TO TRUE
300700     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
300800*    "+++++1ST+NATIONAL+BANK+++++"
300900     MOVE +1   TO TEMPLATE-COUNT
301000     MOVE ZERO TO TMPLT-6-LEN
301100     MOVE LOW-VALUE TO TMPLT-6-TXT
301200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
301300     IF PACKAGE-CALL
301400*      CALL ASUSSVCB TO PERFORM SERVICE STRIP TRAILING
301500       SET ACTION-STRIP TO TRUE
301600       MOVE "ASUSSVCB" TO LS-ASMODULE
301700       CALL LS-ASMODULE
301800            USING ASCA-COMMAREA
301900                  ACTION
302000                  AS-REQUEST-OPTIONS
302100                  SOURCE-STRING
302200                  TEMPLATE-COUNT
302300                  TEMPLATE-6
302400                  AS5CTOK-OCTOKEN
302500     ELSE
302600       MOVE "ASUDSTRP" TO LS-ASMODULE
302700       CALL LS-ASMODULE
302800            USING ASCA-COMMAREA
302900                  AS-REQUEST-OPTIONS
303000                  SOURCE-STRING
303100                  TEMPLATE-COUNT
303200                  TEMPLATE-6
303300                  AS5CTOK-OCTOKEN
303400     END-IF
303500
303600     IF AS5CTOK-SEVNBR > ZERO
303700       DISPLAY WS-PGMID
303800            " RETURN CODE: " AS5CTOK-SEVNBR
303900            " MESSAGE NBR: " AS5CTOK-MSGNBR
304000     END-IF
304100
304200     DISPLAY WS-PGMID
304300          " TEST CASE 017.A - STRIP TRAILING"
304400     DISPLAY WS-PGMID
304500          " UPPER CASE / NO CASE"
304600     DISPLAY WS-PGMID
304700          " SOURCE:" SRC-TXT
304800     DISPLAY WS-PGMID
304900          " OUTPUT LEN (22):" TMPLT-6-LEN
305000     DISPLAY WS-PGMID
305100          " RESULT:" TMPLT-6-TXT
305200     DISPLAY WS-PGMID
305300          " "
305400          TMPLT-6-TXT-Z
305500     DISPLAY " "
305600     SKIP2
305700*    * ------------------------------------------------------- *
305800*    * CALL STRING SERVICE STRIP LEADING
305900*    * ------------------------------------------------------- *
306000     SKIP1
306100     MOVE ZERO TO RO-START
306200                  RO-COUNT
306300                  RO-PSA-LEN
306400                  TMPLT-6-LEN
306500     SET RO-FLAG-LEAD  TO TRUE
306600     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
306700*    "+++++1ST+NATIONAL+BANK+++++"
306800     MOVE +1   TO TEMPLATE-COUNT
306900     MOVE ZERO TO TMPLT-6-LEN
307000     MOVE LOW-VALUE TO TMPLT-6-TXT
307100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
307200     IF PACKAGE-CALL
307300*      CALL ASUSSVCB TO PERFORM SERVICE STRIP LEADING
307400       SET ACTION-STRIP TO TRUE
307500       MOVE "ASUSSVCB" TO LS-ASMODULE
307600       CALL LS-ASMODULE
307700            USING ASCA-COMMAREA
307800                  ACTION
307900                  AS-REQUEST-OPTIONS
308000                  SOURCE-STRING
308100                  TEMPLATE-COUNT
308200                  TEMPLATE-6
308300                  AS5CTOK-OCTOKEN
308400     ELSE
308500       MOVE "ASUDSTRP" TO LS-ASMODULE
308600       CALL LS-ASMODULE
308700            USING ASCA-COMMAREA
308800                  AS-REQUEST-OPTIONS
308900                  SOURCE-STRING
309000                  TEMPLATE-COUNT
309100                  TEMPLATE-6
309200                  AS5CTOK-OCTOKEN
309300     END-IF
309400
309500     IF AS5CTOK-SEVNBR > ZERO
309600       DISPLAY WS-PGMID
309700            " RETURN CODE: " AS5CTOK-SEVNBR
309800            " MESSAGE NBR: " AS5CTOK-MSGNBR
309900     END-IF
310000
310100     DISPLAY WS-PGMID
310200          " TEST CASE 017.B - STRIP LEADING"
310300     DISPLAY WS-PGMID
310400          " UPPER CASE / NO CASE"
310500     DISPLAY WS-PGMID
310600          " SOURCE:" SRC-TXT
310700     DISPLAY WS-PGMID
310800          " OUTPUT LEN (22):" TMPLT-6-LEN
310900     DISPLAY WS-PGMID
311000          " RESULT:" TMPLT-6-TXT
311100     DISPLAY WS-PGMID
311200          " "
311300          TMPLT-6-TXT-Z
311400     DISPLAY " "
311500     SKIP2
311600*    * ------------------------------------------------------- *
311700*    * CALL STRING SERVICE STRIP BOTH
311800*    * ------------------------------------------------------- *
311900     SKIP1
312000     MOVE ZERO TO RO-START
312100                  RO-COUNT
312200                  RO-PSA-LEN
312300                  TMPLT-6-LEN
312400     SET RO-FLAG-BOTH  TO TRUE
312500     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
312600*    "+++++1ST+NATIONAL+BANK+++++"
312700     MOVE +1   TO TEMPLATE-COUNT
312800     MOVE ZERO TO TMPLT-6-LEN
312900     MOVE LOW-VALUE TO TMPLT-6-TXT
313000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
313100     IF PACKAGE-CALL
313200*      CALL ASUSSVCB TO PERFORM SERVICE STRIP BOTH
313300       SET ACTION-STRIP TO TRUE
313400       MOVE "ASUSSVCB" TO LS-ASMODULE
313500       CALL LS-ASMODULE
313600            USING ASCA-COMMAREA
313700                  ACTION
313800                  AS-REQUEST-OPTIONS
313900                  SOURCE-STRING
314000                  TEMPLATE-COUNT
314100                  TEMPLATE-6
314200                  AS5CTOK-OCTOKEN
314300     ELSE
314400       MOVE "ASUDSTRP" TO LS-ASMODULE
314500       CALL LS-ASMODULE
314600            USING ASCA-COMMAREA
314700                  AS-REQUEST-OPTIONS
314800                  SOURCE-STRING
314900                  TEMPLATE-COUNT
315000                  TEMPLATE-6
315100                  AS5CTOK-OCTOKEN
315200     END-IF
315300
315400     IF AS5CTOK-SEVNBR > ZERO
315500       DISPLAY WS-PGMID
315600            " RETURN CODE: " AS5CTOK-SEVNBR
315700            " MESSAGE NBR: " AS5CTOK-MSGNBR
315800     END-IF
315900
316000     DISPLAY WS-PGMID
316100          " TEST CASE 017.C - STRIP BOTH"
316200     DISPLAY WS-PGMID
316300          " UPPER CASE / NO CASE"
316400     DISPLAY WS-PGMID
316500          " SOURCE:" SRC-TXT
316600     DISPLAY WS-PGMID
316700          " OUTPUT LEN (17):" TMPLT-6-LEN
316800     DISPLAY WS-PGMID
316900          " RESULT:" TMPLT-6-TXT
317000     DISPLAY WS-PGMID
317100          " "
317200          TMPLT-6-TXT-Z
317300     DISPLAY " "
317400     SKIP2
317500     CONTINUE.
317600 TEST-CASE-018.
317700
317800     IF NOT (TEST-CASE = "ALL" OR "018")
317900       GO TO TEST-CASE-019
318000     END-IF
318100
318200*    * ------------------------------------------------------- *
318300*    * CALL STRING SERVICE STRING INSERT IN FRONT
318400*    * ------------------------------------------------------- *
318500     SKIP1
318600     MOVE ZERO TO RO-START
318700                  RO-COUNT
318800                  RO-PSA-LEN
318900                  TMPLT-6-LEN
319000     SET RO-FLAG-NONE  TO TRUE
319100     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
319200*    "+How+now+brown+cow++"
319300     MOVE +2   TO TEMPLATE-COUNT
319400     MOVE ZERO TO TMPLT-6-LEN
319500     MOVE LOW-VALUE TO TMPLT-6-TXT
319600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
319700     IF PACKAGE-CALL
319800*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
319900       SET ACTION-STRISRT TO TRUE
320000       MOVE "ASUSSVCB" TO LS-ASMODULE
320100       CALL LS-ASMODULE
320200            USING ASCA-COMMAREA
320300                  ACTION
320400                  AS-REQUEST-OPTIONS
320500                  SOURCE-STRING
320600                  TEMPLATE-COUNT
320700                  TEMPLATE-8
320800                  TEMPLATE-6
320900                  AS5CTOK-OCTOKEN
321000     ELSE
321100       MOVE "ASUDSINS" TO LS-ASMODULE
321200       CALL LS-ASMODULE
321300            USING ASCA-COMMAREA
321400                  AS-REQUEST-OPTIONS
321500                  SOURCE-STRING
321600                  TEMPLATE-COUNT
321700                  TEMPLATE-8
321800                  TEMPLATE-6
321900                  AS5CTOK-OCTOKEN
322000     END-IF
322100
322200     IF AS5CTOK-SEVNBR > ZERO
322300       DISPLAY WS-PGMID
322400            " RETURN CODE: " AS5CTOK-SEVNBR
322500            " MESSAGE NBR: " AS5CTOK-MSGNBR
322600     END-IF
322700
322800     DISPLAY WS-PGMID
322900          " TEST CASE 018.A - STRING INSERT (0,0,GOOD+)"
323000     DISPLAY WS-PGMID
323100          " MIXED CASE / NO CASE"
323200     DISPLAY WS-PGMID
323300          " SOURCE:" SRC-TXT
323400     DISPLAY WS-PGMID
323500          " OUTPUT LEN (25):" TMPLT-6-LEN
323600     DISPLAY WS-PGMID
323700          " RESULT:" TMPLT-6-TXT
323800     DISPLAY WS-PGMID
323900          " "
324000          TMPLT-6-TXT-Z
324100     DISPLAY " "
324200     SKIP2
324300*    * ------------------------------------------------------- *
324400*    * CALL STRING SERVICE STRING INSERT IN MIDDLE
324500*    * ------------------------------------------------------- *
324600     SKIP1
324700     MOVE ZERO TO RO-START
324800                  RO-COUNT
324900                  RO-PSA-LEN
325000                  TMPLT-6-LEN
325100     SET RO-FLAG-NONE  TO TRUE
325200     MOVE +10 TO RO-START
325300     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
325400*    "+How+now+brown+cow++"
325500     MOVE +2   TO TEMPLATE-COUNT
325600     MOVE ZERO TO TMPLT-6-LEN
325700     MOVE LOW-VALUE TO TMPLT-6-TXT
325800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
325900     IF PACKAGE-CALL
326000*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
326100       SET ACTION-STRISRT TO TRUE
326200       MOVE "ASUSSVCB" TO LS-ASMODULE
326300       CALL LS-ASMODULE
326400            USING ASCA-COMMAREA
326500                  ACTION
326600                  AS-REQUEST-OPTIONS
326700                  SOURCE-STRING
326800                  TEMPLATE-COUNT
326900                  TEMPLATE-8
327000                  TEMPLATE-6
327100                  AS5CTOK-OCTOKEN
327200     ELSE
327300       MOVE "ASUDSINS" TO LS-ASMODULE
327400       CALL LS-ASMODULE
327500            USING ASCA-COMMAREA
327600                  AS-REQUEST-OPTIONS
327700                  SOURCE-STRING
327800                  TEMPLATE-COUNT
327900                  TEMPLATE-8
328000                  TEMPLATE-6
328100                  AS5CTOK-OCTOKEN
328200     END-IF
328300
328400     IF AS5CTOK-SEVNBR > ZERO
328500       DISPLAY WS-PGMID
328600            " RETURN CODE: " AS5CTOK-SEVNBR
328700            " MESSAGE NBR: " AS5CTOK-MSGNBR
328800     END-IF
328900
329000     DISPLAY WS-PGMID
329100          " TEST CASE 018.B - STRING INSERT (10,0,GOOD+)"
329200     DISPLAY WS-PGMID
329300          " MIXED CASE / NO CASE"
329400     DISPLAY WS-PGMID
329500          " SOURCE:" SRC-TXT
329600     DISPLAY WS-PGMID
329700          " OUTPUT LEN (25):" TMPLT-6-LEN
329800     DISPLAY WS-PGMID
329900          " RESULT:" TMPLT-6-TXT
330000     DISPLAY WS-PGMID
330100          " "
330200          TMPLT-6-TXT-Z
330300     DISPLAY " "
330400     SKIP2
330500*    * ------------------------------------------------------- *
330600*    * CALL STRING SERVICE STRING INSERT AT END
330700*    * ------------------------------------------------------- *
330800     SKIP1
330900     MOVE ZERO TO RO-START
331000                  RO-COUNT
331100                  RO-PSA-LEN
331200                  TMPLT-6-LEN
331300     SET RO-FLAG-UC    TO TRUE
331400     MOVE +20 TO RO-START
331500     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
331600*    "+How+now+brown+cow++"
331700     MOVE +2   TO TEMPLATE-COUNT
331800     MOVE ZERO TO TMPLT-6-LEN
331900     MOVE LOW-VALUE TO TMPLT-6-TXT
332000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
332100     IF PACKAGE-CALL
332200*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
332300       SET ACTION-STRISRT TO TRUE
332400       MOVE "ASUSSVCB" TO LS-ASMODULE
332500       CALL LS-ASMODULE
332600            USING ASCA-COMMAREA
332700                  ACTION
332800                  AS-REQUEST-OPTIONS
332900                  SOURCE-STRING
333000                  TEMPLATE-COUNT
333100                  TEMPLATE-8
333200                  TEMPLATE-6
333300                  AS5CTOK-OCTOKEN
333400     ELSE
333500       MOVE "ASUDSINS" TO LS-ASMODULE
333600       CALL LS-ASMODULE
333700            USING ASCA-COMMAREA
333800                  AS-REQUEST-OPTIONS
333900                  SOURCE-STRING
334000                  TEMPLATE-COUNT
334100                  TEMPLATE-8
334200                  TEMPLATE-6
334300                  AS5CTOK-OCTOKEN
334400     END-IF
334500
334600     IF AS5CTOK-SEVNBR > ZERO
334700       DISPLAY WS-PGMID
334800            " RETURN CODE: " AS5CTOK-SEVNBR
334900            " MESSAGE NBR: " AS5CTOK-MSGNBR
335000     END-IF
335100
335200     DISPLAY WS-PGMID
335300          " TEST CASE 018.C - STRING INSERT (20,0,GOOD+)"
335400     DISPLAY WS-PGMID
335500          " MIXED CASE / UPPER CASE"
335600     DISPLAY WS-PGMID
335700          " SOURCE:" SRC-TXT
335800     DISPLAY WS-PGMID
335900          " OUTPUT LEN (25):" TMPLT-6-LEN
336000     DISPLAY WS-PGMID
336100          " RESULT:" TMPLT-6-TXT
336200     DISPLAY WS-PGMID
336300          " "
336400          TMPLT-6-TXT-Z
336500     DISPLAY " "
336600     SKIP2
336700     CONTINUE.
336800 TEST-CASE-019.
336900
337000     IF NOT (TEST-CASE = "ALL" OR "019")
337100       GO TO TEST-CASE-020
337200     END-IF
337300
337400*    * ------------------------------------------------------- *
337500*    * CALL STRING SERVICE LAST/PREV POS
337600*    * ------------------------------------------------------- *
337700     SKIP1
337800     MOVE ZERO TO RO-START
337900                  RO-COUNT
338000                  RO-PSA-LEN
338100     SET RO-FLAG-NONE TO TRUE
338200     MOVE +32  TO RO-PSA-LEN
338300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
338400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
338500     MOVE +2   TO TEMPLATE-COUNT
338600     MOVE ZERO TO TMPLT-5-LEN
338700     MOVE LOW-VALUE TO TMPLT-5-TXT
338800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
338900     IF PACKAGE-CALL
339000*      CALL ASUSSVCB TO PERFORM SERVICE POS
339100       SET ACTION-STRLPOS TO TRUE
339200       MOVE "ASUSSVCB" TO LS-ASMODULE
339300       CALL LS-ASMODULE
339400            USING ASCA-COMMAREA
339500                  ACTION
339600                  AS-REQUEST-OPTIONS
339700                  SOURCE-STRING
339800                  TEMPLATE-COUNT
339900                  TEMPLATE-4
340000                  TEMPLATE-5
340100                  AS5CTOK-OCTOKEN
340200     ELSE
340300       MOVE "ASUDLPOS" TO LS-ASMODULE
340400       CALL LS-ASMODULE
340500            USING ASCA-COMMAREA
340600                  AS-REQUEST-OPTIONS
340700                  SOURCE-STRING
340800                  TEMPLATE-COUNT
340900                  TEMPLATE-4
341000                  TEMPLATE-5
341100                  AS5CTOK-OCTOKEN
341200     END-IF
341300
341400     IF AS5CTOK-SEVNBR > ZERO
341500       DISPLAY WS-PGMID
341600            " RETURN CODE: " AS5CTOK-SEVNBR
341700            " MESSAGE NBR: " AS5CTOK-MSGNBR
341800     END-IF
341900
342000     DISPLAY WS-PGMID
342100          " TEST CASE 019.A LPOS LAST/PREV"
342200     DISPLAY WS-PGMID
342300          " MIXED CASE / MIXED CASE"
342400     DISPLAY WS-PGMID
342500          " SOURCE:" SRC-TXT
342600     DISPLAY WS-PGMID
342700          " ARGUMENT:" TMPLT-4-TXT
342800     MOVE TMPLT-5-TXT TO TEMP-FIELD
342900     DISPLAY WS-PGMID
343000          " POSITION CALL 1 (41):" FW-BINARY
343100     DISPLAY WS-PGMID
343200          " "
343300          TMPLT-5-TXT-Z
343400     DISPLAY " "
343500     IF FW-BINARY = ZERO
343600       GO TO TEST-CASE-019
343700     END-IF
343800     SKIP2
343900     CONTINUE.
344000 LOOP-19.
344100*    * ------------------------------------------------------- *
344200*    * CALL STRING SERVICE LAST/PREV POS
344300*    * ------------------------------------------------------- *
344400     SKIP1
344500     SET RO-FLAG-CONT TO TRUE
344600     MOVE +32  TO RO-PSA-LEN
344700     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
344800*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
344900     MOVE +2   TO TEMPLATE-COUNT
345000     MOVE ZERO TO TMPLT-5-LEN
345100     MOVE LOW-VALUE TO TMPLT-5-TXT
345200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
345300     IF PACKAGE-CALL
345400*      CALL ASUSSVCB TO PERFORM SERVICE POS
345500       SET ACTION-STRLPOS TO TRUE
345600       MOVE "ASUSSVCB" TO LS-ASMODULE
345700       CALL LS-ASMODULE
345800            USING ASCA-COMMAREA
345900                  ACTION
346000                  AS-REQUEST-OPTIONS
346100                  SOURCE-STRING
346200                  TEMPLATE-COUNT
346300                  TEMPLATE-4
346400                  TEMPLATE-5
346500                  AS5CTOK-OCTOKEN
346600     ELSE
346700       MOVE "ASUDLPOS" TO LS-ASMODULE
346800       CALL LS-ASMODULE
346900            USING ASCA-COMMAREA
347000                  AS-REQUEST-OPTIONS
347100                  SOURCE-STRING
347200                  TEMPLATE-COUNT
347300                  TEMPLATE-4
347400                  TEMPLATE-5
347500                  AS5CTOK-OCTOKEN
347600     END-IF
347700
347800     IF AS5CTOK-SEVNBR > ZERO
347900       DISPLAY WS-PGMID
348000            " RETURN CODE: " AS5CTOK-SEVNBR
348100            " MESSAGE NBR: " AS5CTOK-MSGNBR
348200     END-IF
348300
348400     DISPLAY WS-PGMID
348500          " TEST CASE 019.B LPOS LAST/PREV LOOP"
348600     DISPLAY WS-PGMID
348700          " MIXED CASE / MIXED CASE"
348800     DISPLAY WS-PGMID
348900          " SOURCE:" SRC-TXT
349000     DISPLAY WS-PGMID
349100          " ARGUMENT:" TMPLT-4-TXT
349200     MOVE TMPLT-5-TXT TO TEMP-FIELD
349300     DISPLAY WS-PGMID
349400          " POSITION CALL 2 (38,34,0):" FW-BINARY
349500     DISPLAY WS-PGMID
349600          " "
349700          TMPLT-5-TXT-Z
349800     DISPLAY " "
349900     IF FW-BINARY NOT = ZERO
350000       GO TO LOOP-19
350100     END-IF
350200     SKIP2
350300     CONTINUE.
350400 TEST-CASE-020.
350500
350600     IF NOT (TEST-CASE = "ALL" OR "020")
350700       GO TO TEST-CASE-021
350800     END-IF
350900
351000*    * ------------------------------------------------------- *
351100*    * CALL STRING SERVICE BOYER-MOORE FIRST/NEXT POS
351200*    * ------------------------------------------------------- *
351300     SKIP1
351400     MOVE ZERO TO RO-START
351500                  RO-COUNT
351600                  RO-PSA-LEN
351700     SET RO-FLAG-NONE TO TRUE
351800     MOVE +288 TO RO-PSA-LEN
351900     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
352000*    "+How+now+brown+cow++"
352100     MOVE +2   TO TEMPLATE-COUNT
352200     MOVE ZERO TO TMPLT-5-LEN
352300     MOVE LOW-VALUE TO TMPLT-5-TXT
352400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
352500     IF PACKAGE-CALL
352600*      CALL ASUSSVCB TO PERFORM SERVICE POS
352700       SET ACTION-BMFPOS TO TRUE
352800       MOVE "ASUSSVCB" TO LS-ASMODULE
352900       CALL LS-ASMODULE
353000            USING ASCA-COMMAREA
353100                  ACTION
353200                  AS-REQUEST-OPTIONS
353300                  SOURCE-STRING
353400                  TEMPLATE-COUNT
353500                  TEMPLATE-23
353600                  TEMPLATE-5
353700                  AS5CTOK-OCTOKEN
353800     ELSE
353900       MOVE "ASUDBPOS" TO LS-ASMODULE
354000       CALL LS-ASMODULE
354100            USING ASCA-COMMAREA
354200                  AS-REQUEST-OPTIONS
354300                  SOURCE-STRING
354400                  TEMPLATE-COUNT
354500                  TEMPLATE-23
354600                  TEMPLATE-5
354700                  AS5CTOK-OCTOKEN
354800     END-IF
354900
355000     IF AS5CTOK-SEVNBR > ZERO
355100       DISPLAY WS-PGMID
355200            " RETURN CODE: " AS5CTOK-SEVNBR
355300            " MESSAGE NBR: " AS5CTOK-MSGNBR
355400     END-IF
355500
355600     DISPLAY WS-PGMID
355700          " TEST CASE 020.A BMFPOS FIRST/NEXT"
355800     DISPLAY WS-PGMID
355900          " MIXED CASE / MIXED CASE"
356000     DISPLAY WS-PGMID
356100          " SOURCE:" SRC-TXT
356200     DISPLAY WS-PGMID
356300          " ARGUMENT:" TMPLT-23-TXT
356400     MOVE TMPLT-5-TXT TO TEMP-FIELD
356500     DISPLAY WS-PGMID
356600          " POSITION CALL (16):" FW-BINARY
356700     DISPLAY WS-PGMID
356800          " "
356900          TMPLT-5-TXT-Z
357000     DISPLAY " "
357100     SKIP2
357200*    * ------------------------------------------------------- *
357300*    * CALL STRING SERVICE BOYER-MOORE FIRST/NEXT POS
357400*    * ------------------------------------------------------- *
357500     SKIP1
357600     MOVE ZERO TO RO-START
357700                  RO-COUNT
357800                  RO-PSA-LEN
357900     SET RO-FLAG-NONE TO TRUE
358000     MOVE +288 TO RO-PSA-LEN
358100     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
358200*    "+How+now+brown+cow++"
358300     MOVE +2   TO TEMPLATE-COUNT
358400     MOVE ZERO TO TMPLT-5-LEN
358500     MOVE LOW-VALUE TO TMPLT-5-TXT
358600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
358700     IF PACKAGE-CALL
358800*      CALL ASUSSVCB TO PERFORM SERVICE POS
358900       SET ACTION-BMFPOS TO TRUE
359000       MOVE "ASUSSVCB" TO LS-ASMODULE
359100       CALL LS-ASMODULE
359200            USING ASCA-COMMAREA
359300                  ACTION
359400                  AS-REQUEST-OPTIONS
359500                  SOURCE-STRING
359600                  TEMPLATE-COUNT
359700                  TEMPLATE-24
359800                  TEMPLATE-5
359900                  AS5CTOK-OCTOKEN
360000     ELSE
360100       MOVE "ASUDBPOS" TO LS-ASMODULE
360200       CALL LS-ASMODULE
360300            USING ASCA-COMMAREA
360400                  AS-REQUEST-OPTIONS
360500                  SOURCE-STRING
360600                  TEMPLATE-COUNT
360700                  TEMPLATE-24
360800                  TEMPLATE-5
360900                  AS5CTOK-OCTOKEN
361000     END-IF
361100
361200     IF AS5CTOK-SEVNBR > ZERO
361300       DISPLAY WS-PGMID
361400            " RETURN CODE: " AS5CTOK-SEVNBR
361500            " MESSAGE NBR: " AS5CTOK-MSGNBR
361600     END-IF
361700
361800     DISPLAY WS-PGMID
361900          " TEST CASE 020.B BMFPOS FIRST/NEXT"
362000     DISPLAY WS-PGMID
362100          " MIXED CASE / MIXED CASE"
362200     DISPLAY WS-PGMID
362300          " SOURCE:" SRC-TXT
362400     DISPLAY WS-PGMID
362500          " ARGUMENT:" TMPLT-24-TXT
362600     MOVE TMPLT-5-TXT TO TEMP-FIELD
362700     DISPLAY WS-PGMID
362800          " POSITION CALL (6):" FW-BINARY
362900     DISPLAY WS-PGMID
363000          " "
363100          TMPLT-5-TXT-Z
363200     DISPLAY " "
363300     SKIP2
363400*    * ------------------------------------------------------- *
363500*    * CALL STRING SERVICE BOYER-MOORE FIRST/NEXT POS
363600*    * ------------------------------------------------------- *
363700     SKIP1
363800     MOVE ZERO TO RO-START
363900                  RO-COUNT
364000                  RO-PSA-LEN
364100     SET RO-FLAG-CASE TO TRUE
364200     MOVE +288 TO RO-PSA-LEN
364300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
364400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
364500     MOVE +2   TO TEMPLATE-COUNT
364600     MOVE ZERO TO TMPLT-5-LEN
364700     MOVE LOW-VALUE TO TMPLT-5-TXT
364800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
364900     IF PACKAGE-CALL
365000*      CALL ASUSSVCB TO PERFORM SERVICE POS
365100       SET ACTION-BMFPOS TO TRUE
365200       MOVE "ASUSSVCB" TO LS-ASMODULE
365300       CALL LS-ASMODULE
365400            USING ASCA-COMMAREA
365500                  ACTION
365600                  AS-REQUEST-OPTIONS
365700                  SOURCE-STRING
365800                  TEMPLATE-COUNT
365900                  TEMPLATE-4
366000                  TEMPLATE-5
366100                  AS5CTOK-OCTOKEN
366200     ELSE
366300       MOVE "ASUDBPOS" TO LS-ASMODULE
366400       CALL LS-ASMODULE
366500            USING ASCA-COMMAREA
366600                  AS-REQUEST-OPTIONS
366700                  SOURCE-STRING
366800                  TEMPLATE-COUNT
366900                  TEMPLATE-4
367000                  TEMPLATE-5
367100                  AS5CTOK-OCTOKEN
367200     END-IF
367300
367400     IF AS5CTOK-SEVNBR > ZERO
367500       DISPLAY WS-PGMID
367600            " RETURN CODE: " AS5CTOK-SEVNBR
367700            " MESSAGE NBR: " AS5CTOK-MSGNBR
367800     END-IF
367900
368000     DISPLAY WS-PGMID
368100          " TEST CASE 020.C BMFPOS FIRST/NEXT"
368200     DISPLAY WS-PGMID
368300          " MIXED CASE / UPPER CASE / CASE INSENSITIVE"
368400     DISPLAY WS-PGMID
368500          " SOURCE:" SRC-TXT
368600     DISPLAY WS-PGMID
368700          " ARGUMENT:" TMPLT-4-TXT
368800     MOVE TMPLT-5-TXT TO TEMP-FIELD
368900     DISPLAY WS-PGMID
369000          " POSITION CALL 1 (30):" FW-BINARY
369100     DISPLAY WS-PGMID
369200          " "
369300          TMPLT-5-TXT-Z
369400     DISPLAY " "
369500     IF FW-BINARY = ZERO
369600       GO TO TEST-CASE-021
369700     END-IF
369800     SKIP2
369900     CONTINUE.
370000 LOOP-20-D.
370100*    * ------------------------------------------------------- *
370200*    * CALL STRING SERVICE BOYER-MORE FIRST/NEXT POS
370300*    * ------------------------------------------------------- *
370400     SKIP1
370500     SET RO-FLAG-CASE-CONT TO TRUE
370600     MOVE +288 TO RO-PSA-LEN
370700     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
370800*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
370900     MOVE +2   TO TEMPLATE-COUNT
371000     MOVE ZERO TO TMPLT-5-LEN
371100     MOVE LOW-VALUE TO TMPLT-5-TXT
371200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
371300     IF PACKAGE-CALL
371400*      CALL ASUSSVCB TO PERFORM SERVICE POS
371500       SET ACTION-BMFPOS TO TRUE
371600       MOVE "ASUSSVCB" TO LS-ASMODULE
371700       CALL LS-ASMODULE
371800            USING ASCA-COMMAREA
371900                  ACTION
372000                  AS-REQUEST-OPTIONS
372100                  SOURCE-STRING
372200                  TEMPLATE-COUNT
372300                  TEMPLATE-4
372400                  TEMPLATE-5
372500                  AS5CTOK-OCTOKEN
372600     ELSE
372700       MOVE "ASUDBPOS" TO LS-ASMODULE
372800       CALL LS-ASMODULE
372900            USING ASCA-COMMAREA
373000                  AS-REQUEST-OPTIONS
373100                  SOURCE-STRING
373200                  TEMPLATE-COUNT
373300                  TEMPLATE-4
373400                  TEMPLATE-5
373500                  AS5CTOK-OCTOKEN
373600     END-IF
373700
373800     IF AS5CTOK-SEVNBR > ZERO
373900       DISPLAY WS-PGMID
374000            " RETURN CODE: " AS5CTOK-SEVNBR
374100            " MESSAGE NBR: " AS5CTOK-MSGNBR
374200     END-IF
374300
374400     DISPLAY WS-PGMID
374500          " TEST CASE 020.D BMFPOS FIRST/NEXT LOOP"
374600     DISPLAY WS-PGMID
374700          " MIXED CASE / UPPER CASE / CASE INSENSITIVE"
374800     DISPLAY WS-PGMID
374900          " SOURCE:" SRC-TXT
375000     DISPLAY WS-PGMID
375100          " ARGUMENT:" TMPLT-4-TXT
375200     MOVE TMPLT-5-TXT TO TEMP-FIELD
375300     DISPLAY WS-PGMID
375400          " POSITION CALL 2 (34,38,41,45,0):" FW-BINARY
375500     DISPLAY WS-PGMID
375600          " "
375700          TMPLT-5-TXT-Z
375800     DISPLAY " "
375900     IF FW-BINARY NOT = ZERO
376000       GO TO LOOP-20-D
376100     END-IF
376200     SKIP2
376300     CONTINUE.
376400 TEST-CASE-021.
376500
376600     IF NOT (TEST-CASE = "ALL" OR "021")
376700       GO TO TEST-CASE-022
376800     END-IF
376900
377000*    * ------------------------------------------------------- *
377100*    * CALL STRING SERVICE STRING REPLACE IN FRONT
377200*    * ------------------------------------------------------- *
377300     SKIP1
377400     MOVE ZERO TO RO-START
377500                  RO-COUNT
377600                  RO-PSA-LEN
377700                  TMPLT-6-LEN
377800     SET RO-FLAG-NONE  TO TRUE
377900     MOVE +1 TO RO-START
378000     MOVE +4 TO RO-COUNT
378100     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
378200*    "+How+now+brown+cow++"
378300     MOVE +2   TO TEMPLATE-COUNT
378400     MOVE ZERO TO TMPLT-6-LEN
378500     MOVE LOW-VALUE TO TMPLT-6-TXT
378600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
378700     IF PACKAGE-CALL
378800*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
378900       SET ACTION-STRREPL TO TRUE
379000       MOVE "ASUSSVCB" TO LS-ASMODULE
379100       CALL LS-ASMODULE
379200            USING ASCA-COMMAREA
379300                  ACTION
379400                  AS-REQUEST-OPTIONS
379500                  SOURCE-STRING
379600                  TEMPLATE-COUNT
379700                  TEMPLATE-8
379800                  TEMPLATE-6
379900                  AS5CTOK-OCTOKEN
380000     ELSE
380100       MOVE "ASUDSREP" TO LS-ASMODULE
380200       CALL LS-ASMODULE
380300            USING ASCA-COMMAREA
380400                  AS-REQUEST-OPTIONS
380500                  SOURCE-STRING
380600                  TEMPLATE-COUNT
380700                  TEMPLATE-8
380800                  TEMPLATE-6
380900                  AS5CTOK-OCTOKEN
381000     END-IF
381100
381200     IF AS5CTOK-SEVNBR > ZERO
381300       DISPLAY WS-PGMID
381400            " RETURN CODE: " AS5CTOK-SEVNBR
381500            " MESSAGE NBR: " AS5CTOK-MSGNBR
381600     END-IF
381700
381800     DISPLAY WS-PGMID
381900          " TEST CASE 021.A - STRING REPLACE (1,4,GOOD+)"
382000     DISPLAY WS-PGMID
382100          " MIXED CASE / NO CASE"
382200     DISPLAY WS-PGMID
382300          " SOURCE:" SRC-TXT
382400     DISPLAY WS-PGMID
382500          " OUTPUT LEN (21):" TMPLT-6-LEN
382600     DISPLAY WS-PGMID
382700          " RESULT:" TMPLT-6-TXT
382800     DISPLAY WS-PGMID
382900          " "
383000          TMPLT-6-TXT-Z
383100     DISPLAY " "
383200     SKIP2
383300*    * ------------------------------------------------------- *
383400*    * CALL STRING SERVICE STRING REPLACE IN MIDDLE
383500*    * ------------------------------------------------------- *
383600     SKIP1
383700     MOVE ZERO TO RO-START
383800                  RO-COUNT
383900                  RO-PSA-LEN
384000                  TMPLT-6-LEN
384100     SET RO-FLAG-NONE  TO TRUE
384200     MOVE +10 TO RO-START
384300     MOVE +5  TO RO-COUNT
384400     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
384500*    "+How+now+brown+cow++"
384600     MOVE +2   TO TEMPLATE-COUNT
384700     MOVE ZERO TO TMPLT-6-LEN
384800     MOVE LOW-VALUE TO TMPLT-6-TXT
384900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
385000     IF PACKAGE-CALL
385100*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
385200       SET ACTION-STRREPL TO TRUE
385300       MOVE "ASUSSVCB" TO LS-ASMODULE
385400       CALL LS-ASMODULE
385500            USING ASCA-COMMAREA
385600                  ACTION
385700                  AS-REQUEST-OPTIONS
385800                  SOURCE-STRING
385900                  TEMPLATE-COUNT
386000                  TEMPLATE-4
386100                  TEMPLATE-6
386200                  AS5CTOK-OCTOKEN
386300     ELSE
386400       MOVE "ASUDSREP" TO LS-ASMODULE
386500       CALL LS-ASMODULE
386600            USING ASCA-COMMAREA
386700                  AS-REQUEST-OPTIONS
386800                  SOURCE-STRING
386900                  TEMPLATE-COUNT
387000                  TEMPLATE-4
387100                  TEMPLATE-6
387200                  AS5CTOK-OCTOKEN
387300     END-IF
387400
387500     IF AS5CTOK-SEVNBR > ZERO
387600       DISPLAY WS-PGMID
387700            " RETURN CODE: " AS5CTOK-SEVNBR
387800            " MESSAGE NBR: " AS5CTOK-MSGNBR
387900     END-IF
388000
388100     DISPLAY WS-PGMID
388200          " TEST CASE 021.B - STRING REPLACE (10,5,MEN)"
388300     DISPLAY WS-PGMID
388400          " MIXED CASE / NO CASE"
388500     DISPLAY WS-PGMID
388600          " SOURCE:" SRC-TXT
388700     DISPLAY WS-PGMID
388800          " OUTPUT LEN (18):" TMPLT-6-LEN
388900     DISPLAY WS-PGMID
389000          " RESULT:" TMPLT-6-TXT
389100     DISPLAY WS-PGMID
389200          " "
389300          TMPLT-6-TXT-Z
389400     DISPLAY " "
389500     SKIP2
389600*    * ------------------------------------------------------- *
389700*    * CALL STRING SERVICE STRING REPLACE IN MIDDLE TRUNC
389800*    * ------------------------------------------------------- *
389900     SKIP1
390000     MOVE ZERO TO RO-START
390100                  RO-COUNT
390200                  RO-PSA-LEN
390300                  TMPLT-6-LEN
390400     SET RO-FLAG-NONE  TO TRUE
390500     MOVE +10 TO RO-START
390600     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
390700*    "+How+now+brown+cow++"
390800     MOVE +2   TO TEMPLATE-COUNT
390900     MOVE ZERO TO TMPLT-6-LEN
391000     MOVE LOW-VALUE TO TMPLT-6-TXT
391100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
391200     IF PACKAGE-CALL
391300*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
391400       SET ACTION-STRREPL TO TRUE
391500       MOVE "ASUSSVCB" TO LS-ASMODULE
391600       CALL LS-ASMODULE
391700            USING ASCA-COMMAREA
391800                  ACTION
391900                  AS-REQUEST-OPTIONS
392000                  SOURCE-STRING
392100                  TEMPLATE-COUNT
392200                  TEMPLATE-4
392300                  TEMPLATE-6
392400                  AS5CTOK-OCTOKEN
392500     ELSE
392600       MOVE "ASUDSREP" TO LS-ASMODULE
392700       CALL LS-ASMODULE
392800            USING ASCA-COMMAREA
392900                  AS-REQUEST-OPTIONS
393000                  SOURCE-STRING
393100                  TEMPLATE-COUNT
393200                  TEMPLATE-4
393300                  TEMPLATE-6
393400                  AS5CTOK-OCTOKEN
393500     END-IF
393600
393700     IF AS5CTOK-SEVNBR > ZERO
393800       DISPLAY WS-PGMID
393900            " RETURN CODE: " AS5CTOK-SEVNBR
394000            " MESSAGE NBR: " AS5CTOK-MSGNBR
394100     END-IF
394200
394300     DISPLAY WS-PGMID
394400          " TEST CASE 021.C - STRING REPLACE (10,0,MEN)"
394500     DISPLAY WS-PGMID
394600          " MIXED CASE / NO CASE"
394700     DISPLAY WS-PGMID
394800          " SOURCE:" SRC-TXT
394900     DISPLAY WS-PGMID
395000          " OUTPUT LEN (12):" TMPLT-6-LEN
395100     DISPLAY WS-PGMID
395200          " RESULT:" TMPLT-6-TXT
395300     DISPLAY WS-PGMID
395400          " "
395500          TMPLT-6-TXT-Z
395600     DISPLAY " "
395700     SKIP2
395800*    * ------------------------------------------------------- *
395900*    * CALL STRING SERVICE STRING REPLACE AT END
396000*    * ------------------------------------------------------- *
396100     SKIP1
396200     MOVE ZERO TO RO-START
396300                  RO-COUNT
396400                  RO-PSA-LEN
396500                  TMPLT-6-LEN
396600     SET RO-FLAG-UC    TO TRUE
396700     MOVE +20 TO RO-START
396800     MOVE +1  TO RO-COUNT
396900     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
397000*    "+How+now+brown+cow++"
397100     MOVE +2   TO TEMPLATE-COUNT
397200     MOVE ZERO TO TMPLT-6-LEN
397300     MOVE LOW-VALUE TO TMPLT-6-TXT
397400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
397500     IF PACKAGE-CALL
397600*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
397700       SET ACTION-STRREPL TO TRUE
397800       MOVE "ASUSSVCB" TO LS-ASMODULE
397900       CALL LS-ASMODULE
398000            USING ASCA-COMMAREA
398100                  ACTION
398200                  AS-REQUEST-OPTIONS
398300                  SOURCE-STRING
398400                  TEMPLATE-COUNT
398500                  TEMPLATE-8
398600                  TEMPLATE-6
398700                  AS5CTOK-OCTOKEN
398800     ELSE
398900       MOVE "ASUDSREP" TO LS-ASMODULE
399000       CALL LS-ASMODULE
399100            USING ASCA-COMMAREA
399200                  AS-REQUEST-OPTIONS
399300                  SOURCE-STRING
399400                  TEMPLATE-COUNT
399500                  TEMPLATE-8
399600                  TEMPLATE-6
399700                  AS5CTOK-OCTOKEN
399800     END-IF
399900
400000     IF AS5CTOK-SEVNBR > ZERO
400100       DISPLAY WS-PGMID
400200            " RETURN CODE: " AS5CTOK-SEVNBR
400300            " MESSAGE NBR: " AS5CTOK-MSGNBR
400400     END-IF
400500
400600     DISPLAY WS-PGMID
400700          " TEST CASE 021.D - STRING REPLACE (20,1,GOOD+)"
400800     DISPLAY WS-PGMID
400900          " MIXED CASE / UPPER CASE"
401000     DISPLAY WS-PGMID
401100          " SOURCE:" SRC-TXT
401200     DISPLAY WS-PGMID
401300          " OUTPUT LEN (24):" TMPLT-6-LEN
401400     DISPLAY WS-PGMID
401500          " RESULT:" TMPLT-6-TXT
401600     DISPLAY WS-PGMID
401700          " "
401800          TMPLT-6-TXT-Z
401900     DISPLAY " "
402000     SKIP2
402100*    * ------------------------------------------------------- *
402200*    * CALL STRING SERVICE STRING REPLACE IN FRONT
402300*    * ------------------------------------------------------- *
402400     SKIP1
402500     MOVE ZERO TO RO-START
402600                  RO-COUNT
402700                  RO-PSA-LEN
402800                  TMPLT-6-LEN
402900     SET RO-FLAG-NONE  TO TRUE
403000     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
403100*    "+How+now+brown+cow++"
403200     MOVE +3   TO TEMPLATE-COUNT
403300     MOVE ZERO TO TMPLT-6-LEN
403400     MOVE LOW-VALUE TO TMPLT-6-TXT
403500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
403600     IF PACKAGE-CALL
403700*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
403800       SET ACTION-STRREPL TO TRUE
403900       MOVE "ASUSSVCB" TO LS-ASMODULE
404000       CALL LS-ASMODULE
404100            USING ASCA-COMMAREA
404200                  ACTION
404300                  AS-REQUEST-OPTIONS
404400                  SOURCE-STRING
404500                  TEMPLATE-COUNT
404600                  TEMPLATE-18
404700                  TEMPLATE-8
404800                  TEMPLATE-6
404900                  AS5CTOK-OCTOKEN
405000     ELSE
405100       MOVE "ASUDSREP" TO LS-ASMODULE
405200       CALL LS-ASMODULE
405300            USING ASCA-COMMAREA
405400                  AS-REQUEST-OPTIONS
405500                  SOURCE-STRING
405600                  TEMPLATE-COUNT
405700                  TEMPLATE-18
405800                  TEMPLATE-8
405900                  TEMPLATE-6
406000                  AS5CTOK-OCTOKEN
406100     END-IF
406200
406300     IF AS5CTOK-SEVNBR > ZERO
406400       DISPLAY WS-PGMID
406500            " RETURN CODE: " AS5CTOK-SEVNBR
406600            " MESSAGE NBR: " AS5CTOK-MSGNBR
406700     END-IF
406800
406900     DISPLAY WS-PGMID
407000          " TEST CASE 021.E - STRING REPLACE (+How,GOOD+)"
407100     DISPLAY WS-PGMID
407200          " MIXED CASE / NO CASE"
407300     DISPLAY WS-PGMID
407400          " SOURCE:" SRC-TXT
407500     DISPLAY WS-PGMID
407600          " ARGUMENT:" TMPLT-18-TXT
407700     DISPLAY WS-PGMID
407800          " OUTPUT LEN (21):" TMPLT-6-LEN
407900     DISPLAY WS-PGMID
408000          " RESULT:" TMPLT-6-TXT
408100     DISPLAY WS-PGMID
408200          " "
408300          TMPLT-6-TXT-Z
408400     DISPLAY " "
408500     SKIP2
408600*    * ------------------------------------------------------- *
408700*    * CALL STRING SERVICE STRING REPLACE IN MIDDLE
408800*    * ------------------------------------------------------- *
408900     SKIP1
409000     MOVE ZERO TO RO-START
409100                  RO-COUNT
409200                  RO-PSA-LEN
409300                  TMPLT-6-LEN
409400     SET RO-FLAG-NONE  TO TRUE
409500     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
409600*    "+How+now+brown+cow++"
409700     MOVE +3   TO TEMPLATE-COUNT
409800     MOVE ZERO TO TMPLT-6-LEN
409900     MOVE LOW-VALUE TO TMPLT-6-TXT
410000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
410100     IF PACKAGE-CALL
410200*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
410300       SET ACTION-STRREPL TO TRUE
410400       MOVE "ASUSSVCB" TO LS-ASMODULE
410500       CALL LS-ASMODULE
410600            USING ASCA-COMMAREA
410700                  ACTION
410800                  AS-REQUEST-OPTIONS
410900                  SOURCE-STRING
411000                  TEMPLATE-COUNT
411100                  TEMPLATE-19
411200                  TEMPLATE-4
411300                  TEMPLATE-6
411400                  AS5CTOK-OCTOKEN
411500     ELSE
411600       MOVE "ASUDSREP" TO LS-ASMODULE
411700       CALL LS-ASMODULE
411800            USING ASCA-COMMAREA
411900                  AS-REQUEST-OPTIONS
412000                  SOURCE-STRING
412100                  TEMPLATE-COUNT
412200                  TEMPLATE-19
412300                  TEMPLATE-4
412400                  TEMPLATE-6
412500                  AS5CTOK-OCTOKEN
412600     END-IF
412700
412800     IF AS5CTOK-SEVNBR > ZERO
412900       DISPLAY WS-PGMID
413000            " RETURN CODE: " AS5CTOK-SEVNBR
413100            " MESSAGE NBR: " AS5CTOK-MSGNBR
413200     END-IF
413300
413400     DISPLAY WS-PGMID
413500          " TEST CASE 021.F - STRING REPLACE (brown,MEN)"
413600     DISPLAY WS-PGMID
413700          " MIXED CASE / NO CASE"
413800     DISPLAY WS-PGMID
413900          " SOURCE:" SRC-TXT
414000     DISPLAY WS-PGMID
414100          " ARGUMENT:" TMPLT-19-TXT
414200     DISPLAY WS-PGMID
414300          " OUTPUT LEN (18):" TMPLT-6-LEN
414400     DISPLAY WS-PGMID
414500          " RESULT:" TMPLT-6-TXT
414600     DISPLAY WS-PGMID
414700          " "
414800          TMPLT-6-TXT-Z
414900     DISPLAY " "
415000     SKIP2
415100*    * ------------------------------------------------------- *
415200*    * CALL STRING SERVICE STRING REPLACE AT END
415300*    * ------------------------------------------------------- *
415400     SKIP1
415500     MOVE ZERO TO RO-START
415600                  RO-COUNT
415700                  RO-PSA-LEN
415800                  TMPLT-6-LEN
415900     SET RO-FLAG-NONE  TO TRUE
416000     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
416100*    "+How+now+brown+cow++"
416200     MOVE +3   TO TEMPLATE-COUNT
416300     MOVE ZERO TO TMPLT-6-LEN
416400     MOVE LOW-VALUE TO TMPLT-6-TXT
416500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
416600     IF PACKAGE-CALL
416700*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
416800       SET ACTION-STRREPL TO TRUE
416900       MOVE "ASUSSVCB" TO LS-ASMODULE
417000       CALL LS-ASMODULE
417100            USING ASCA-COMMAREA
417200                  ACTION
417300                  AS-REQUEST-OPTIONS
417400                  SOURCE-STRING
417500                  TEMPLATE-COUNT
417600                  TEMPLATE-20
417700                  TEMPLATE-8
417800                  TEMPLATE-6
417900                  AS5CTOK-OCTOKEN
418000     ELSE
418100       MOVE "ASUDSREP" TO LS-ASMODULE
418200       CALL LS-ASMODULE
418300            USING ASCA-COMMAREA
418400                  AS-REQUEST-OPTIONS
418500                  SOURCE-STRING
418600                  TEMPLATE-COUNT
418700                  TEMPLATE-20
418800                  TEMPLATE-8
418900                  TEMPLATE-6
419000                  AS5CTOK-OCTOKEN
419100     END-IF
419200
419300     IF AS5CTOK-SEVNBR > ZERO
419400       DISPLAY WS-PGMID
419500            " RETURN CODE: " AS5CTOK-SEVNBR
419600            " MESSAGE NBR: " AS5CTOK-MSGNBR
419700     END-IF
419800
419900     DISPLAY WS-PGMID
420000          " TEST CASE 021.G - STRING REPLACE (cow+,GOOD+)"
420100     DISPLAY WS-PGMID
420200          " MIXED CASE / NO CASE"
420300     DISPLAY WS-PGMID
420400          " SOURCE:" SRC-TXT
420500     DISPLAY WS-PGMID
420600          " ARGUMENT:" TMPLT-20-TXT
420700     DISPLAY WS-PGMID
420800          " OUTPUT LEN (21):" TMPLT-6-LEN
420900     DISPLAY WS-PGMID
421000          " RESULT:" TMPLT-6-TXT
421100     DISPLAY WS-PGMID
421200          " "
421300          TMPLT-6-TXT-Z
421400     DISPLAY " "
421500     SKIP2
421600*    * ------------------------------------------------------- *
421700*    * CALL STRING SERVICE STRING REPLACE AT (NO MATCH)
421800*    * ------------------------------------------------------- *
421900     SKIP1
422000     MOVE ZERO TO RO-START
422100                  RO-COUNT
422200                  RO-PSA-LEN
422300                  TMPLT-6-LEN
422400     SET RO-FLAG-NONE  TO TRUE
422500     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
422600*    "+How+now+brown+cow++"
422700     MOVE +3   TO TEMPLATE-COUNT
422800     MOVE ZERO TO TMPLT-6-LEN
422900     MOVE LOW-VALUE TO TMPLT-6-TXT
423000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
423100     IF PACKAGE-CALL
423200*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
423300       SET ACTION-STRREPL TO TRUE
423400       MOVE "ASUSSVCB" TO LS-ASMODULE
423500       CALL LS-ASMODULE
423600            USING ASCA-COMMAREA
423700                  ACTION
423800                  AS-REQUEST-OPTIONS
423900                  SOURCE-STRING
424000                  TEMPLATE-COUNT
424100                  TEMPLATE-8
424200                  TEMPLATE-8
424300                  TEMPLATE-6
424400                  AS5CTOK-OCTOKEN
424500     ELSE
424600       MOVE "ASUDSREP" TO LS-ASMODULE
424700       CALL LS-ASMODULE
424800            USING ASCA-COMMAREA
424900                  AS-REQUEST-OPTIONS
425000                  SOURCE-STRING
425100                  TEMPLATE-COUNT
425200                  TEMPLATE-8
425300                  TEMPLATE-8
425400                  TEMPLATE-6
425500                  AS5CTOK-OCTOKEN
425600     END-IF
425700
425800     IF AS5CTOK-SEVNBR > ZERO
425900       DISPLAY WS-PGMID
426000            " RETURN CODE: " AS5CTOK-SEVNBR
426100            " MESSAGE NBR: " AS5CTOK-MSGNBR
426200     END-IF
426300
426400     DISPLAY WS-PGMID
426500          " TEST CASE 021.H - STRING REPLACE (GOOD+,GOOD+)"
426600     DISPLAY WS-PGMID
426700          " MIXED CASE / NO CASE"
426800     DISPLAY WS-PGMID
426900          " SOURCE:" SRC-TXT
427000     DISPLAY WS-PGMID
427100          " ARGUMENT:" TMPLT-8-TXT
427200     DISPLAY WS-PGMID
427300          " OUTPUT LEN (0):" TMPLT-6-LEN
427400     DISPLAY WS-PGMID
427500          " RESULT:" TMPLT-6-TXT
427600     DISPLAY WS-PGMID
427700          " "
427800          TMPLT-6-TXT-Z
427900     DISPLAY " "
428000     SKIP2
428100     CONTINUE.
428200 TEST-CASE-022.
428300
428400     IF NOT (TEST-CASE = "ALL" OR "022")
428500       GO TO TEST-CASE-023
428600     END-IF
428700
428800*    * ------------------------------------------------------- *
428900*    * CALL STRING SERVICE SUBSTR
429000*    * ------------------------------------------------------- *
429100     SKIP1
429200     MOVE ZERO TO RO-START
429300                  RO-COUNT
429400                  RO-PSA-LEN
429500                  TMPLT-6-LEN
429600     SET RO-FLAG-NONE  TO TRUE
429700     MOVE +25 TO RO-START
429800     MOVE +4  TO RO-COUNT
429900     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
430000*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
430100     MOVE +1   TO TEMPLATE-COUNT
430200     MOVE ZERO TO TMPLT-6-LEN
430300     MOVE LOW-VALUE TO TMPLT-6-TXT
430400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
430500     IF PACKAGE-CALL
430600*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR
430700       SET ACTION-SUBSTR TO TRUE
430800       MOVE "ASUSSVCB" TO LS-ASMODULE
430900       CALL LS-ASMODULE
431000            USING ASCA-COMMAREA
431100                  ACTION
431200                  AS-REQUEST-OPTIONS
431300                  SOURCE-STRING
431400                  TEMPLATE-COUNT
431500                  TEMPLATE-6
431600                  AS5CTOK-OCTOKEN
431700     ELSE
431800       MOVE "ASUDSSUB" TO LS-ASMODULE
431900       CALL LS-ASMODULE
432000            USING ASCA-COMMAREA
432100                  AS-REQUEST-OPTIONS
432200                  SOURCE-STRING
432300                  TEMPLATE-COUNT
432400                  TEMPLATE-6
432500                  AS5CTOK-OCTOKEN
432600     END-IF
432700
432800     IF AS5CTOK-SEVNBR > ZERO
432900       DISPLAY WS-PGMID
433000            " RETURN CODE: " AS5CTOK-SEVNBR
433100            " MESSAGE NBR: " AS5CTOK-MSGNBR
433200     END-IF
433300
433400     DISPLAY WS-PGMID
433500          " TEST CASE 022.A - SUB STRING (25,4)"
433600     DISPLAY WS-PGMID
433700          " MIXED CASE / NO CASE"
433800     DISPLAY WS-PGMID
433900          " SOURCE:" SRC-TXT
434000     DISPLAY WS-PGMID
434100          " OUTPUT LEN (4):" TMPLT-6-LEN
434200     DISPLAY WS-PGMID
434300          " RESULT (good):" TMPLT-6-TXT
434400     DISPLAY WS-PGMID
434500          " "
434600          TMPLT-6-TXT-Z
434700     DISPLAY " "
434800     SKIP2
434900*    * ------------------------------------------------------- *
435000*    * CALL STRING SERVICE SUBSTR
435100*    * ------------------------------------------------------- *
435200     SKIP1
435300     MOVE ZERO TO RO-START
435400                  RO-COUNT
435500                  RO-PSA-LEN
435600                  TMPLT-6-LEN
435700     SET RO-FLAG-NONE  TO TRUE
435800     MOVE +25 TO RO-START
435900     MOVE +27 TO RO-COUNT
436000     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
436100*    "NOW+IS+THE+TIME+FOR+ALL+GOOD+MEN+MEN+MENMEN+MEN++++"
436200     MOVE +1   TO TEMPLATE-COUNT
436300     MOVE ZERO TO TMPLT-6-LEN
436400     MOVE LOW-VALUE TO TMPLT-6-TXT
436500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
436600     IF PACKAGE-CALL
436700*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR END
436800       SET ACTION-SUBSTR TO TRUE
436900       MOVE "ASUSSVCB" TO LS-ASMODULE
437000       CALL LS-ASMODULE
437100            USING ASCA-COMMAREA
437200                  ACTION
437300                  AS-REQUEST-OPTIONS
437400                  SOURCE-STRING
437500                  TEMPLATE-COUNT
437600                  TEMPLATE-6
437700                  AS5CTOK-OCTOKEN
437800     ELSE
437900       MOVE "ASUDSSUB" TO LS-ASMODULE
438000       CALL LS-ASMODULE
438100            USING ASCA-COMMAREA
438200                  AS-REQUEST-OPTIONS
438300                  SOURCE-STRING
438400                  TEMPLATE-COUNT
438500                  TEMPLATE-6
438600                  AS5CTOK-OCTOKEN
438700     END-IF
438800
438900     IF AS5CTOK-SEVNBR > ZERO
439000       DISPLAY WS-PGMID
439100            " RETURN CODE: " AS5CTOK-SEVNBR
439200            " MESSAGE NBR: " AS5CTOK-MSGNBR
439300     END-IF
439400
439500     DISPLAY WS-PGMID
439600          " TEST CASE 022.B - SUB STRING (25,27)"
439700     DISPLAY WS-PGMID
439800          " MIXED CASE / NO CASE"
439900     DISPLAY WS-PGMID
440000          " SOURCE:" SRC-TXT
440100     DISPLAY WS-PGMID
440200          " OUTPUT LEN (27):" TMPLT-6-LEN
440300     DISPLAY WS-PGMID
440400          " RESULT (good+...):" TMPLT-6-TXT
440500     DISPLAY WS-PGMID
440600          " "
440700          TMPLT-6-TXT-Z
440800     DISPLAY " "
440900     SKIP2
441000*    * ------------------------------------------------------- *
441100*    * CALL STRING SERVICE SUBSTR
441200*    * ------------------------------------------------------- *
441300     SKIP1
441400     MOVE ZERO TO RO-START
441500                  RO-COUNT
441600                  RO-PSA-LEN
441700                  TMPLT-6-LEN
441800     SET RO-FLAG-NONE  TO TRUE
441900     MOVE +25 TO RO-START
442000     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
442100*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
442200     MOVE +1   TO TEMPLATE-COUNT
442300     MOVE ZERO TO TMPLT-6-LEN
442400     MOVE LOW-VALUE TO TMPLT-6-TXT
442500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
442600     IF PACKAGE-CALL
442700*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR REST
442800       SET ACTION-SUBSTR TO TRUE
442900       MOVE "ASUSSVCB" TO LS-ASMODULE
443000       CALL LS-ASMODULE
443100            USING ASCA-COMMAREA
443200                  ACTION
443300                  AS-REQUEST-OPTIONS
443400                  SOURCE-STRING
443500                  TEMPLATE-COUNT
443600                  TEMPLATE-6
443700                  AS5CTOK-OCTOKEN
443800     ELSE
443900       MOVE "ASUDSSUB" TO LS-ASMODULE
444000       CALL LS-ASMODULE
444100            USING ASCA-COMMAREA
444200                  AS-REQUEST-OPTIONS
444300                  SOURCE-STRING
444400                  TEMPLATE-COUNT
444500                  TEMPLATE-6
444600                  AS5CTOK-OCTOKEN
444700     END-IF
444800
444900     IF AS5CTOK-SEVNBR > ZERO
445000       DISPLAY WS-PGMID
445100            " RETURN CODE: " AS5CTOK-SEVNBR
445200            " MESSAGE NBR: " AS5CTOK-MSGNBR
445300     END-IF
445400
445500     DISPLAY WS-PGMID
445600          " TEST CASE 022.C - SUB STRING (25,0)"
445700     DISPLAY WS-PGMID
445800          " MIXED CASE / NO CASE"
445900     DISPLAY WS-PGMID
446000          " SOURCE:" SRC-TXT
446100     DISPLAY WS-PGMID
446200          " OUTPUT LEN (27):" TMPLT-6-LEN
446300     DISPLAY WS-PGMID
446400          " RESULT (good+...):" TMPLT-6-TXT
446500     DISPLAY WS-PGMID
446600          " "
446700          TMPLT-6-TXT-Z
446800     DISPLAY " "
446900     SKIP2
447000*    * ------------------------------------------------------- *
447100*    * CALL STRING SERVICE SUBSTR
447200*    * ------------------------------------------------------- *
447300     SKIP1
447400     MOVE ZERO TO RO-START
447500                  RO-COUNT
447600                  RO-PSA-LEN
447700                  TMPLT-6-LEN
447800     SET RO-FLAG-NONE  TO TRUE
447900     MOVE +1  TO RO-START
448000     MOVE +4  TO RO-COUNT
448100     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
448200*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
448300     MOVE +1   TO TEMPLATE-COUNT
448400     MOVE ZERO TO TMPLT-6-LEN
448500     MOVE LOW-VALUE TO TMPLT-6-TXT
448600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
448700     IF PACKAGE-CALL
448800*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR LEADING
448900       SET ACTION-SUBSTR TO TRUE
449000       MOVE "ASUSSVCB" TO LS-ASMODULE
449100       CALL LS-ASMODULE
449200            USING ASCA-COMMAREA
449300                  ACTION
449400                  AS-REQUEST-OPTIONS
449500                  SOURCE-STRING
449600                  TEMPLATE-COUNT
449700                  TEMPLATE-6
449800                  AS5CTOK-OCTOKEN
449900     ELSE
450000       MOVE "ASUDSSUB" TO LS-ASMODULE
450100       CALL LS-ASMODULE
450200            USING ASCA-COMMAREA
450300                  AS-REQUEST-OPTIONS
450400                  SOURCE-STRING
450500                  TEMPLATE-COUNT
450600                  TEMPLATE-6
450700                  AS5CTOK-OCTOKEN
450800     END-IF
450900
451000     IF AS5CTOK-SEVNBR > ZERO
451100       DISPLAY WS-PGMID
451200            " RETURN CODE: " AS5CTOK-SEVNBR
451300            " MESSAGE NBR: " AS5CTOK-MSGNBR
451400     END-IF
451500
451600     DISPLAY WS-PGMID
451700          " TEST CASE 022.D - SUB STRING (1,4)"
451800     DISPLAY WS-PGMID
451900          " MIXED CASE / NO CASE"
452000     DISPLAY WS-PGMID
452100          " SOURCE:" SRC-TXT
452200     DISPLAY WS-PGMID
452300          " OUTPUT LEN (4):" TMPLT-6-LEN
452400     DISPLAY WS-PGMID
452500          " RESULT (Now+):" TMPLT-6-TXT
452600     DISPLAY WS-PGMID
452700          " "
452800          TMPLT-6-TXT-Z
452900     DISPLAY " "
453000     SKIP2
453100*    * ------------------------------------------------------- *
453200*    * CALL STRING SERVICE SUBSTR
453300*    * ------------------------------------------------------- *
453400     SKIP1
453500     MOVE ZERO TO RO-START
453600                  RO-COUNT
453700                  RO-PSA-LEN
453800                  TMPLT-6-LEN
453900     SET RO-FLAG-NONE  TO TRUE
454000     MOVE +0  TO RO-START
454100     MOVE +4  TO RO-COUNT
454200     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
454300*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
454400     MOVE +1   TO TEMPLATE-COUNT
454500     MOVE ZERO TO TMPLT-6-LEN
454600     MOVE LOW-VALUE TO TMPLT-6-TXT
454700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
454800     IF PACKAGE-CALL
454900*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR LEADING
455000       SET ACTION-SUBSTR TO TRUE
455100       MOVE "ASUSSVCB" TO LS-ASMODULE
455200       CALL LS-ASMODULE
455300            USING ASCA-COMMAREA
455400                  ACTION
455500                  AS-REQUEST-OPTIONS
455600                  SOURCE-STRING
455700                  TEMPLATE-COUNT
455800                  TEMPLATE-6
455900                  AS5CTOK-OCTOKEN
456000     ELSE
456100       MOVE "ASUDSSUB" TO LS-ASMODULE
456200       CALL LS-ASMODULE
456300            USING ASCA-COMMAREA
456400                  AS-REQUEST-OPTIONS
456500                  SOURCE-STRING
456600                  TEMPLATE-COUNT
456700                  TEMPLATE-6
456800                  AS5CTOK-OCTOKEN
456900     END-IF
457000
457100     IF AS5CTOK-SEVNBR > ZERO
457200       DISPLAY WS-PGMID
457300            " RETURN CODE: " AS5CTOK-SEVNBR
457400            " MESSAGE NBR: " AS5CTOK-MSGNBR
457500     END-IF
457600
457700     DISPLAY WS-PGMID
457800          " TEST CASE 022.E - SUB STRING (0,4)"
457900     DISPLAY WS-PGMID
458000          " MIXED CASE / NO CASE"
458100     DISPLAY WS-PGMID
458200          " SOURCE:" SRC-TXT
458300     DISPLAY WS-PGMID
458400          " OUTPUT LEN (4):" TMPLT-6-LEN
458500     DISPLAY WS-PGMID
458600          " RESULT (Now+):" TMPLT-6-TXT
458700     DISPLAY WS-PGMID
458800          " "
458900          TMPLT-6-TXT-Z
459000     DISPLAY " "
459100     SKIP2
459200     CONTINUE.
459300 TEST-CASE-023.
459400
459500     IF NOT (TEST-CASE = "ALL" OR "023")
459600       GO TO TEST-CASE-024
459700     END-IF
459800
459900*    * ------------------------------------------------------- *
460000*    * CALL STRING SERVICE VAR (W1 W2 W3 W4)
460100*    * ------------------------------------------------------- *
460200     SKIP1
460300     MOVE ZERO TO RO-START
460400                  RO-COUNT
460500                  RO-PSA-LEN
460600     SET RO-FLAG-NONE  TO TRUE
460700     MOVE X'04' TO TOKEN-9-TYPE (1)
460800                   TOKEN-9-TYPE (2)
460900                   TOKEN-9-TYPE (3)
461000                   TOKEN-9-TYPE (4)
461100     MOVE +20   TO TOKEN-9-SIZE (1)
461200                   TOKEN-9-SIZE (2)
461300                   TOKEN-9-SIZE (3)
461400                   TOKEN-9-SIZE (4)
461500     MOVE ZERO  TO TMPLT-9-LEN  (1)
461600                   TMPLT-9-LEN  (2)
461700                   TMPLT-9-LEN  (3)
461800                   TMPLT-9-LEN  (4)
461900     MOVE SPACE TO TMPLT-9-TXT  (1)
462000                   TMPLT-9-TXT  (2)
462100                   TMPLT-9-TXT  (3)
462200                   TMPLT-9-TXT  (4)
462300     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
462400                     TMPLT-9-TXT-Z (2)
462500                     TMPLT-9-TXT-Z (3)
462600                     TMPLT-9-TXT-Z (4)
462700     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
462800*    "++TO++BE,+OR+NOT+TO+BE++++"
462900     MOVE +5   TO TEMPLATE-COUNT
463000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
463100     IF PACKAGE-CALL
463200*      CALL ASUSSVCB TO PERFORM SERVICE VAR
463300       SET ACTION-VAR TO TRUE
463400       MOVE "ASUSSVCB" TO LS-ASMODULE
463500       CALL LS-ASMODULE
463600            USING ASCA-COMMAREA
463700                  ACTION
463800                  AS-REQUEST-OPTIONS
463900                  SOURCE-STRING
464000                  TEMPLATE-COUNT
464100                  TEMPLATE-0
464200                  TEMPLATE-9 (1)
464300                  TEMPLATE-9 (2)
464400                  TEMPLATE-9 (3)
464500                  TEMPLATE-9 (4)
464600                  AS5CTOK-OCTOKEN
464700     ELSE
464800       MOVE "ASUDSVAR" TO LS-ASMODULE
464900       CALL LS-ASMODULE
465000            USING ASCA-COMMAREA
465100                  AS-REQUEST-OPTIONS
465200                  SOURCE-STRING
465300                  TEMPLATE-COUNT
465400                  TEMPLATE-0
465500                  TEMPLATE-9 (1)
465600                  TEMPLATE-9 (2)
465700                  TEMPLATE-9 (3)
465800                  TEMPLATE-9 (4)
465900                  AS5CTOK-OCTOKEN
466000     END-IF
466100
466200     IF AS5CTOK-SEVNBR > ZERO
466300       DISPLAY WS-PGMID
466400            " RETURN CODE: " AS5CTOK-SEVNBR
466500            " MESSAGE NBR: " AS5CTOK-MSGNBR
466600     END-IF
466700
466800     DISPLAY WS-PGMID
466900          " TEST CASE 023.A - VAR (W1 W2 W3 W4)"
467000     DISPLAY WS-PGMID
467100          " UPPER CASE / NO CASE"
467200     DISPLAY WS-PGMID
467300          " SOURCE:" SRC-TXT
467400     DISPLAY WS-PGMID
467500          " OUTPUT LEN 1 (2):" TMPLT-9-LEN (1)
467600     DISPLAY WS-PGMID
467700          " RESULT 1 (TO):" TMPLT-9-TXT (1)
467800     DISPLAY WS-PGMID
467900          " "
468000          TMPLT-9-TXT-Z (1)
468100     DISPLAY WS-PGMID
468200          " OUTPUT LEN 2 (2):" TMPLT-9-LEN (2)
468300     DISPLAY WS-PGMID
468400          " RESULT 2 (BE):" TMPLT-9-TXT (2)
468500     DISPLAY WS-PGMID
468600          " "
468700          TMPLT-9-TXT-Z (2)
468800     DISPLAY WS-PGMID
468900          " OUTPUT LEN 3 (2):" TMPLT-9-LEN (3)
469000     DISPLAY WS-PGMID
469100          " RESULT 3 (OR):" TMPLT-9-TXT (3)
469200     DISPLAY WS-PGMID
469300          " "
469400          TMPLT-9-TXT-Z (3)
469500     DISPLAY WS-PGMID
469600          " OUTPUT LEN 4 (13):" TMPLT-9-LEN (4)
469700     DISPLAY WS-PGMID
469800          " RESULT 4 (NOT+TO+BE++++):" TMPLT-9-TXT (4)
469900     DISPLAY WS-PGMID
470000          " "
470100          TMPLT-9-TXT-Z (4)
470200     DISPLAY " "
470300     SKIP2
470400*    * ------------------------------------------------------- *
470500*    * CALL STRING SERVICE VAR (6 W1 11 W2 18 W3)
470600*    * ------------------------------------------------------- *
470700     SKIP1
470800     MOVE ZERO TO RO-START
470900                  RO-COUNT
471000                  RO-PSA-LEN
471100     SET RO-FLAG-NONE  TO TRUE
471200     MOVE X'04' TO TOKEN-9-TYPE (1)
471300                   TOKEN-9-TYPE (2)
471400                   TOKEN-9-TYPE (3)
471500     MOVE +25   TO TOKEN-9-SIZE (1)
471600                   TOKEN-9-SIZE (2)
471700                   TOKEN-9-SIZE (3)
471800     MOVE ZERO  TO TMPLT-9-LEN  (1)
471900                   TMPLT-9-LEN  (2)
472000                   TMPLT-9-LEN  (3)
472100     MOVE LOW-VALUE TO TMPLT-9-TXT (1)
472200                        TMPLT-9-TXT (2)
472300                        TMPLT-9-TXT (3)
472400     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
472500                     TMPLT-9-TXT-Z (2)
472600                     TMPLT-9-TXT-Z (3)
472700     MOVE X'03' TO TOKEN-10-TYPE (1)
472800                   TOKEN-10-TYPE (2)
472900                   TOKEN-10-TYPE (3)
473000     MOVE +1    TO TMPLT-10-LEN (1)
473100     MOVE +2    TO TMPLT-10-LEN (2)
473200                   TMPLT-10-LEN (3)
473300     MOVE "6"   TO TMPLT-10-TXT (1)
473400     MOVE "11"  TO TMPLT-10-TXT (2)
473500     MOVE "18"  TO TMPLT-10-TXT (3)
473600     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
473700*    "++TO++BE,+OR+NOT+TO+BE++++"
473800     MOVE +7   TO TEMPLATE-COUNT
473900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
474000     IF PACKAGE-CALL
474100*      CALL ASUSSVCB TO PERFORM SERVICE VAR
474200       SET ACTION-VAR TO TRUE
474300       MOVE "ASUSSVCB" TO LS-ASMODULE
474400       CALL LS-ASMODULE
474500            USING ASCA-COMMAREA
474600                  ACTION
474700                  AS-REQUEST-OPTIONS
474800                  SOURCE-STRING
474900                  TEMPLATE-COUNT
475000                  TEMPLATE-0
475100                  TEMPLATE-10 (1)
475200                  TEMPLATE-9 (1)
475300                  TEMPLATE-10 (2)
475400                  TEMPLATE-9 (2)
475500                  TEMPLATE-10 (3)
475600                  TEMPLATE-9 (3)
475700                  AS5CTOK-OCTOKEN
475800     ELSE
475900       MOVE "ASUDSVAR" TO LS-ASMODULE
476000       CALL LS-ASMODULE
476100            USING ASCA-COMMAREA
476200                  AS-REQUEST-OPTIONS
476300                  SOURCE-STRING
476400                  TEMPLATE-COUNT
476500                  TEMPLATE-0
476600                  TEMPLATE-10 (1)
476700                  TEMPLATE-9 (1)
476800                  TEMPLATE-10 (2)
476900                  TEMPLATE-9 (2)
477000                  TEMPLATE-10 (3)
477100                  TEMPLATE-9 (3)
477200                  AS5CTOK-OCTOKEN
477300     END-IF
477400
477500     IF AS5CTOK-SEVNBR > ZERO
477600       DISPLAY WS-PGMID
477700            " RETURN CODE: " AS5CTOK-SEVNBR
477800            " MESSAGE NBR: " AS5CTOK-MSGNBR
477900     END-IF
478000
478100     DISPLAY WS-PGMID
478200          " TEST CASE 023.B - VAR (6 W1 11 W2 18 W3)"
478300     DISPLAY WS-PGMID
478400          " UPPER CASE / NO CASE"
478500     DISPLAY WS-PGMID
478600          " SOURCE:" SRC-TXT
478700     DISPLAY WS-PGMID
478800          " OUTPUT LEN 1 (5):" TMPLT-9-LEN (1)
478900     DISPLAY WS-PGMID
479000          " RESULT 1 (+BE,+):" TMPLT-9-TXT (1)
479100     DISPLAY WS-PGMID
479200          " "
479300          TMPLT-9-TXT-Z (1)
479400     DISPLAY WS-PGMID
479500          " OUTPUT LEN 2 (7):" TMPLT-9-LEN (2)
479600     DISPLAY WS-PGMID
479700          " RESULT 2 (OR+NOT+):" TMPLT-9-TXT (2)
479800     DISPLAY WS-PGMID
479900          " "
480000          TMPLT-9-TXT-Z (2)
480100     DISPLAY WS-PGMID
480200          " OUTPUT LEN 3 (9):" TMPLT-9-LEN (3)
480300     DISPLAY WS-PGMID
480400          " RESULT 3 (TO+BE++++):" TMPLT-9-TXT (3)
480500     DISPLAY WS-PGMID
480600          " "
480700          TMPLT-9-TXT-Z (3)
480800     DISPLAY " "
480900     SKIP2
481000*    * ------------------------------------------------------- *
481100*    * CALL STRING SERVICE VAR ('BE' W1 +6 W2 +11 W3)
481200*    * ------------------------------------------------------- *
481300     SKIP1
481400     MOVE ZERO TO RO-START
481500                  RO-COUNT
481600                  RO-PSA-LEN
481700     SET RO-FLAG-UC    TO TRUE
481800     MOVE X'04' TO TOKEN-9-TYPE (1)
481900                   TOKEN-9-TYPE (2)
482000                   TOKEN-9-TYPE (3)
482100     MOVE +25   TO TOKEN-9-SIZE (1)
482200                   TOKEN-9-SIZE (2)
482300                   TOKEN-9-SIZE (3)
482400     MOVE ZERO  TO TMPLT-9-LEN  (1)
482500                   TMPLT-9-LEN  (2)
482600                   TMPLT-9-LEN  (3)
482700     MOVE LOW-VALUE TO TMPLT-9-TXT (1)
482800                        TMPLT-9-TXT (2)
482900                        TMPLT-9-TXT (3)
483000     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
483100                     TMPLT-9-TXT-Z (2)
483200                     TMPLT-9-TXT-Z (3)
483300     MOVE X'02' TO TOKEN-10-TYPE (1)
483400     MOVE X'03' TO TOKEN-10-TYPE (2)
483500                   TOKEN-10-TYPE (3)
483600     MOVE +2    TO TMPLT-10-LEN (1)
483700     MOVE +1    TO TMPLT-10-LEN (2)
483800     MOVE +2    TO TMPLT-10-LEN (3)
483900     MOVE "BE"  TO TMPLT-10-TXT (1)
484000     MOVE +6    TO TMPLT-10-TXT-A (2)
484100     MOVE +11   TO TMPLT-10-TXT-B (3)
484200     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
484300*    "++TO++BE,+OR+NOT+TO+BE++++"
484400     MOVE +7   TO TEMPLATE-COUNT
484500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
484600     IF PACKAGE-CALL
484700*      CALL ASUSSVCB TO PERFORM SERVICE VAR
484800       SET ACTION-VAR TO TRUE
484900       MOVE "ASUSSVCB" TO LS-ASMODULE
485000       CALL LS-ASMODULE
485100            USING ASCA-COMMAREA
485200                  ACTION
485300                  AS-REQUEST-OPTIONS
485400                  SOURCE-STRING
485500                  TEMPLATE-COUNT
485600                  TEMPLATE-0
485700                  TEMPLATE-10 (1)
485800                  TEMPLATE-9 (1)
485900                  TEMPLATE-10 (2)
486000                  TEMPLATE-9 (2)
486100                  TEMPLATE-10 (3)
486200                  TEMPLATE-9 (3)
486300                  AS5CTOK-OCTOKEN
486400     ELSE
486500       MOVE "ASUDSVAR" TO LS-ASMODULE
486600       CALL LS-ASMODULE
486700            USING ASCA-COMMAREA
486800                  AS-REQUEST-OPTIONS
486900                  SOURCE-STRING
487000                  TEMPLATE-COUNT
487100                  TEMPLATE-0
487200                  TEMPLATE-10 (1)
487300                  TEMPLATE-9 (1)
487400                  TEMPLATE-10 (2)
487500                  TEMPLATE-9 (2)
487600                  TEMPLATE-10 (3)
487700                  TEMPLATE-9 (3)
487800                  AS5CTOK-OCTOKEN
487900     END-IF
488000
488100     IF AS5CTOK-SEVNBR > ZERO
488200       DISPLAY WS-PGMID
488300            " RETURN CODE: " AS5CTOK-SEVNBR
488400            " MESSAGE NBR: " AS5CTOK-MSGNBR
488500     END-IF
488600
488700     DISPLAY WS-PGMID
488800          " TEST CASE 023.C - VAR ('BE' W1 +6 W2 +11 W3)"
488900     DISPLAY WS-PGMID
489000          " UPPER CASE / UPPER CASE"
489100     DISPLAY WS-PGMID
489200          " SOURCE:" SRC-TXT
489300     DISPLAY WS-PGMID
489400          " OUTPUT LEN 1 (4):" TMPLT-9-LEN (1)
489500     DISPLAY WS-PGMID
489600          " RESULT 1 (,+OR):" TMPLT-9-TXT (1)
489700     DISPLAY WS-PGMID
489800          " "
489900          TMPLT-9-TXT-Z (1)
490000     DISPLAY WS-PGMID
490100          " OUTPUT LEN 2 (5):" TMPLT-9-LEN (2)
490200     DISPLAY WS-PGMID
490300          " RESULT 2 (+NOT+):" TMPLT-9-TXT (2)
490400     DISPLAY WS-PGMID
490500          " "
490600          TMPLT-9-TXT-Z (2)
490700     DISPLAY WS-PGMID
490800          " OUTPUT LEN 3 (9):" TMPLT-9-LEN (3)
490900     DISPLAY WS-PGMID
491000          " RESULT 3 (TO+BE++++):" TMPLT-9-TXT (3)
491100     DISPLAY WS-PGMID
491200          " "
491300          TMPLT-9-TXT-Z (3)
491400     DISPLAY " "
491500     SKIP2
491600*    * ------------------------------------------------------- *
491700*    * CALL STRING SERVICE VAR (3 W1 +3 W2 3 W3)
491800*    * ------------------------------------------------------- *
491900     SKIP1
492000     MOVE ZERO TO RO-START
492100                  RO-COUNT
492200                  RO-PSA-LEN
492300     SET RO-FLAG-NONE  TO TRUE
492400     MOVE X'04' TO TOKEN-9-TYPE (1)
492500                   TOKEN-9-TYPE (2)
492600                   TOKEN-9-TYPE (3)
492700     MOVE +25   TO TOKEN-9-SIZE (1)
492800                   TOKEN-9-SIZE (2)
492900                   TOKEN-9-SIZE (3)
493000     MOVE ZERO  TO TMPLT-9-LEN  (1)
493100                   TMPLT-9-LEN  (2)
493200                   TMPLT-9-LEN  (3)
493300     MOVE LOW-VALUE TO TMPLT-9-TXT (1)
493400                        TMPLT-9-TXT (2)
493500                        TMPLT-9-TXT (3)
493600     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
493700                     TMPLT-9-TXT-Z (2)
493800                     TMPLT-9-TXT-Z (3)
493900     MOVE X'03' TO TOKEN-10-TYPE (1)
494000                   TOKEN-10-TYPE (2)
494100                   TOKEN-10-TYPE (3)
494200     MOVE +1    TO TMPLT-10-LEN (1)
494300     MOVE +1    TO TMPLT-10-LEN (2)
494400     MOVE +1    TO TMPLT-10-LEN (3)
494500     MOVE "3"   TO TMPLT-10-TXT (1)
494600     MOVE +3    TO TMPLT-10-TXT-A (2)
494700     MOVE "3"   TO TMPLT-10-TXT (3)
494800     MOVE WS-SOURCE-STRING-6 TO SOURCE-STRING
494900*    "123456789"
495000     MOVE +7   TO TEMPLATE-COUNT
495100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
495200     IF PACKAGE-CALL
495300*      CALL ASUSSVCB TO PERFORM SERVICE VAR
495400       SET ACTION-VAR TO TRUE
495500       MOVE "ASUSSVCB" TO LS-ASMODULE
495600       CALL LS-ASMODULE
495700            USING ASCA-COMMAREA
495800                  ACTION
495900                  AS-REQUEST-OPTIONS
496000                  SOURCE-STRING
496100                  TEMPLATE-COUNT
496200                  TEMPLATE-0
496300                  TEMPLATE-10 (1)
496400                  TEMPLATE-9 (1)
496500                  TEMPLATE-10 (2)
496600                  TEMPLATE-9 (2)
496700                  TEMPLATE-10 (3)
496800                  TEMPLATE-9 (3)
496900                  AS5CTOK-OCTOKEN
497000     ELSE
497100       MOVE "ASUDSVAR" TO LS-ASMODULE
497200       CALL LS-ASMODULE
497300            USING ASCA-COMMAREA
497400                  AS-REQUEST-OPTIONS
497500                  SOURCE-STRING
497600                  TEMPLATE-COUNT
497700                  TEMPLATE-0
497800                  TEMPLATE-10 (1)
497900                  TEMPLATE-9 (1)
498000                  TEMPLATE-10 (2)
498100                  TEMPLATE-9 (2)
498200                  TEMPLATE-10 (3)
498300                  TEMPLATE-9 (3)
498400                  AS5CTOK-OCTOKEN
498500     END-IF
498600
498700     IF AS5CTOK-SEVNBR > ZERO
498800       DISPLAY WS-PGMID
498900            " RETURN CODE: " AS5CTOK-SEVNBR
499000            " MESSAGE NBR: " AS5CTOK-MSGNBR
499100     END-IF
499200
499300     DISPLAY WS-PGMID
499400          " TEST CASE 023.D - VAR (3 W1 +3 W2 3 W3)"
499500     DISPLAY WS-PGMID
499600          " NUMERIC / NO CASE"
499700     DISPLAY WS-PGMID
499800          " SOURCE:" SRC-TXT
499900     DISPLAY WS-PGMID
500000          " OUTPUT LEN 1 (3):" TMPLT-9-LEN (1)
500100     DISPLAY WS-PGMID
500200          " RESULT 1 (345):" TMPLT-9-TXT (1)
500300     DISPLAY WS-PGMID
500400          " "
500500          TMPLT-9-TXT-Z (1)
500600     DISPLAY WS-PGMID
500700          " OUTPUT LEN 2 (4):" TMPLT-9-LEN (2)
500800     DISPLAY WS-PGMID
500900          " RESULT 2 (6789):" TMPLT-9-TXT (2)
501000     DISPLAY WS-PGMID
501100          " "
501200          TMPLT-9-TXT-Z (2)
501300     DISPLAY WS-PGMID
501400          " OUTPUT LEN 3 (7):" TMPLT-9-LEN (3)
501500     DISPLAY WS-PGMID
501600          " RESULT 3 (3456789):" TMPLT-9-TXT (3)
501700     DISPLAY WS-PGMID
501800          " "
501900          TMPLT-9-TXT-Z (3)
502000     DISPLAY " "
502100     SKIP2
502200*    * ------------------------------------------------------- *
502300*    * CALL STRING SERVICE VAR (Wn ...)
502400*    * ------------------------------------------------------- *
502500     SKIP1
502600     MOVE ZERO TO RO-START
502700                  RO-COUNT
502800                  RO-PSA-LEN
502900     SET RO-FLAG-NONE  TO TRUE
503000     MOVE +32  TO RO-PSA-LEN
503100     MOVE  1   TO LOOP-COUNT
503200
503300     CONTINUE.
503400 TEST-CASE-023-LOOP.
503500
503600     MOVE X'04' TO TOKEN-13-TYPE
503700     MOVE +8    TO TOKEN-13-SIZE
503800     MOVE ZERO  TO TMPLT-13-LEN
503900     MOVE SPACE TO TMPLT-13-TXT
504000     MOVE ALL "$" TO TMPLT-13-TXT-Z
504100     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
504200*    "++TO++BE,+OR+NOT+TO+BE++++"
504300     MOVE +3   TO TEMPLATE-COUNT
504400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
504500     IF PACKAGE-CALL
504600*      CALL ASUSSVCB TO PERFORM SERVICE VAR
504700       SET ACTION-VAR TO TRUE
504800       MOVE "ASUSSVCB" TO LS-ASMODULE
504900       CALL LS-ASMODULE
505000            USING ASCA-COMMAREA
505100                  ACTION
505200                  AS-REQUEST-OPTIONS
505300                  SOURCE-STRING
505400                  TEMPLATE-COUNT
505500                  TEMPLATE-0
505600                  TEMPLATE-13
505700                  TEMPLATE-DUMMY
505800                  AS5CTOK-OCTOKEN
505900     ELSE
506000       MOVE "ASUDSVAR" TO LS-ASMODULE
506100       CALL LS-ASMODULE
506200            USING ASCA-COMMAREA
506300                  AS-REQUEST-OPTIONS
506400                  SOURCE-STRING
506500                  TEMPLATE-COUNT
506600                  TEMPLATE-0
506700                  TEMPLATE-13
506800                  TEMPLATE-DUMMY
506900                  AS5CTOK-OCTOKEN
507000     END-IF
507100
507200     IF AS5CTOK-SEVNBR > ZERO
507300       DISPLAY WS-PGMID
507400            " RETURN CODE: " AS5CTOK-SEVNBR
507500            " MESSAGE NBR: " AS5CTOK-MSGNBR
507600       DISPLAY " "
507700       GO TO TEST-CASE-023-CONT
507800     END-IF
507900
508000     DISPLAY WS-PGMID
508100          " TEST CASE 023.E - VAR (Wn ... W6)"
508200     DISPLAY WS-PGMID
508300          " UPPER CASE / NO CASE"
508400     DISPLAY WS-PGMID
508500          " SOURCE:" SRC-TXT
508600     DISPLAY WS-PGMID
508700          " OUTPUT LEN:" TMPLT-13-LEN
508800     DISPLAY WS-PGMID
508900          " RESULT " LOOP-COUNT ":" TMPLT-13-TXT
509000     DISPLAY WS-PGMID
509100          " START (0,7,11,14,18,21,27) " LOOP-COUNT
509200          ":" RO-START
509300     DISPLAY WS-PGMID
509400          " NXT POS (7,11,14,18,21,27) " LOOP-COUNT
509500          ":" RO-PSA-NXTPOS
509600     DISPLAY WS-PGMID
509700          " "
509800          TMPLT-13-TXT-Z
509900     DISPLAY " "
510000
510100     ADD  1 TO LOOP-COUNT
510200
510300     IF LOOP-COUNT >  8
510400       DISPLAY WS-PGMID
510500            " TOO MANY LOOPS FOR TEST CASE 023.E"
510600       DISPLAY " "
510700       GO TO TEST-CASE-023-CONT
510800     END-IF
510900
511000     IF TMPLT-13-LEN > ZERO
511100       GO TO TEST-CASE-023-LOOP
511200     END-IF
511300
511400     CONTINUE.
511500 TEST-CASE-023-CONT.
511600     SKIP2
511700*    * ------------------------------------------------------- *
511800*    * CALL STRING SERVICE VAR ('ZZ' W1 +6 W2 +11 W3) (NO MATCH)
511900*    * ------------------------------------------------------- *
512000     SKIP1
512100     MOVE ZERO TO RO-START
512200                  RO-COUNT
512300                  RO-PSA-LEN
512400     SET RO-FLAG-UC    TO TRUE
512500     MOVE X'04' TO TOKEN-9-TYPE (1)
512600                   TOKEN-9-TYPE (2)
512700                   TOKEN-9-TYPE (3)
512800     MOVE +25   TO TOKEN-9-SIZE (1)
512900                   TOKEN-9-SIZE (2)
513000                   TOKEN-9-SIZE (3)
513100     MOVE ZERO  TO TMPLT-9-LEN  (1)
513200                   TMPLT-9-LEN  (2)
513300                   TMPLT-9-LEN  (3)
513400     MOVE LOW-VALUE TO TMPLT-9-TXT (1)
513500                        TMPLT-9-TXT (2)
513600                        TMPLT-9-TXT (3)
513700     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
513800                     TMPLT-9-TXT-Z (2)
513900                     TMPLT-9-TXT-Z (3)
514000     MOVE X'02' TO TOKEN-10-TYPE (1)
514100     MOVE X'03' TO TOKEN-10-TYPE (2)
514200                   TOKEN-10-TYPE (3)
514300     MOVE +2    TO TMPLT-10-LEN (1)
514400     MOVE +1    TO TMPLT-10-LEN (2)
514500     MOVE +2    TO TMPLT-10-LEN (3)
514600     MOVE "ZZ"  TO TMPLT-10-TXT (1)
514700     MOVE +6    TO TMPLT-10-TXT-A (2)
514800     MOVE +11   TO TMPLT-10-TXT-B (3)
514900     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
515000*    "++TO++BE,+OR+NOT+TO+BE++++"
515100     MOVE +7   TO TEMPLATE-COUNT
515200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
515300     IF PACKAGE-CALL
515400*      CALL ASUSSVCB TO PERFORM SERVICE VAR
515500       SET ACTION-VAR TO TRUE
515600       MOVE "ASUSSVCB" TO LS-ASMODULE
515700       CALL LS-ASMODULE
515800            USING ASCA-COMMAREA
515900                  ACTION
516000                  AS-REQUEST-OPTIONS
516100                  SOURCE-STRING
516200                  TEMPLATE-COUNT
516300                  TEMPLATE-0
516400                  TEMPLATE-10 (1)
516500                  TEMPLATE-9 (1)
516600                  TEMPLATE-10 (2)
516700                  TEMPLATE-9 (2)
516800                  TEMPLATE-10 (3)
516900                  TEMPLATE-9 (3)
517000                  AS5CTOK-OCTOKEN
517100     ELSE
517200       MOVE "ASUDSVAR" TO LS-ASMODULE
517300       CALL LS-ASMODULE
517400            USING ASCA-COMMAREA
517500                  AS-REQUEST-OPTIONS
517600                  SOURCE-STRING
517700                  TEMPLATE-COUNT
517800                  TEMPLATE-0
517900                  TEMPLATE-10 (1)
518000                  TEMPLATE-9 (1)
518100                  TEMPLATE-10 (2)
518200                  TEMPLATE-9 (2)
518300                  TEMPLATE-10 (3)
518400                  TEMPLATE-9 (3)
518500                  AS5CTOK-OCTOKEN
518600     END-IF
518700
518800     IF AS5CTOK-SEVNBR > ZERO
518900       DISPLAY WS-PGMID
519000            " RETURN CODE: " AS5CTOK-SEVNBR
519100            " MESSAGE NBR: " AS5CTOK-MSGNBR
519200     END-IF
519300
519400     DISPLAY WS-PGMID
519500          " TEST CASE 023.F - VAR ('ZZ' W1 +6 W2 +11 W3)"
519600     DISPLAY WS-PGMID
519700          " UPPER CASE / UPPER CASE"
519800     DISPLAY WS-PGMID
519900          " SOURCE:" SRC-TXT
520000     DISPLAY WS-PGMID
520100          " OUTPUT LEN 1 (0):" TMPLT-9-LEN (1)
520200     DISPLAY WS-PGMID
520300          " RESULT 1 ():" TMPLT-9-TXT (1)
520400     DISPLAY WS-PGMID
520500          " "
520600          TMPLT-9-TXT-Z (1)
520700     DISPLAY WS-PGMID
520800          " OUTPUT LEN 2 (0):" TMPLT-9-LEN (2)
520900     DISPLAY WS-PGMID
521000          " RESULT 2 ():" TMPLT-9-TXT (2)
521100     DISPLAY WS-PGMID
521200          " "
521300          TMPLT-9-TXT-Z (2)
521400     DISPLAY WS-PGMID
521500          " OUTPUT LEN 3 (0):" TMPLT-9-LEN (3)
521600     DISPLAY WS-PGMID
521700          " RESULT 3 ():" TMPLT-9-TXT (3)
521800     DISPLAY WS-PGMID
521900          " "
522000          TMPLT-9-TXT-Z (3)
522100     DISPLAY " "
522200     SKIP2
522300     CONTINUE.
522400 TEST-CASE-024.
522500
522600     IF NOT (TEST-CASE = "ALL" OR "024")
522700       GO TO TEST-CASE-025
522800     END-IF
522900
523000*    * ------------------------------------------------------- *
523100*    * CALL STRING SERVICE VHEX
523200*    * (a...zA...Z0...9.<(+|&!$*);¬-/,%_>?:#@=")
523300*    * ------------------------------------------------------- *
523400     SKIP1
523500     MOVE ZERO TO RO-START
523600                  RO-COUNT
523700                  RO-PSA-LEN
523800     SET RO-FLAG-NONE  TO TRUE
523900     MOVE WS-SOURCE-STRING-11 TO SOURCE-STRING
524000*    "a...zA...Z0...9.<(+|&!$*);¬-/,%_>?:#@="
524100     MOVE +3   TO TEMPLATE-COUNT
524200     MOVE ZERO TO TMPLT-15-LEN
524300                  TMPLT-16-LEN
524400                  TMPLT-17-LEN
524500     MOVE LOW-VALUE TO TMPLT-15-TXT
524600                       TMPLT-16-TXT
524700                       TMPLT-17-TXT
524800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
524900     IF PACKAGE-CALL
525000*      CALL ASUSSVCB TO PERFORM SERVICE STRING VHEX
525100       SET ACTION-VHEX   TO TRUE
525200       MOVE "ASUSSVCB" TO LS-ASMODULE
525300       CALL LS-ASMODULE
525400            USING ASCA-COMMAREA
525500                  ACTION
525600                  AS-REQUEST-OPTIONS
525700                  SOURCE-STRING
525800                  TEMPLATE-COUNT
525900                  TEMPLATE-15
526000                  TEMPLATE-16
526100                  TEMPLATE-17
526200                  AS5CTOK-OCTOKEN
526300     ELSE
526400       MOVE "ASUDVHEX" TO LS-ASMODULE
526500       CALL LS-ASMODULE
526600            USING ASCA-COMMAREA
526700                  AS-REQUEST-OPTIONS
526800                  SOURCE-STRING
526900                  TEMPLATE-COUNT
527000                  TEMPLATE-15
527100                  TEMPLATE-16
527200                  TEMPLATE-17
527300                  AS5CTOK-OCTOKEN
527400     END-IF
527500
527600     IF AS5CTOK-SEVNBR > ZERO
527700       DISPLAY WS-PGMID
527800            " RETURN CODE: " AS5CTOK-SEVNBR
527900            " MESSAGE NBR: " AS5CTOK-MSGNBR
528000     END-IF
528100
528200     DISPLAY WS-PGMID
528300          " TEST CASE 024.A - VHEX"
528400     DISPLAY WS-PGMID
528500          ' a...zA...Z0...9.<(+|&!$*);¬-/,%_>?:#@="'
528600     DISPLAY WS-PGMID
528700          " NO CASE"
528800     DISPLAY WS-PGMID
528900          " SOURCE:" SRC-TXT
529000     DISPLAY WS-PGMID
529100          " OUTPUT LEN (86):" TMPLT-15-LEN
529200     DISPLAY WS-PGMID
529300          " RESULT CHAR:" TMPLT-15-TXT
529400     DISPLAY WS-PGMID
529500          " "
529600          TMPLT-15-TXT-Z
529700     DISPLAY " "
529800     DISPLAY WS-PGMID
529900          " OUTPUT LEN (86):" TMPLT-16-LEN
530000     DISPLAY WS-PGMID
530100          " RESULT ZONE:" TMPLT-16-TXT
530200     DISPLAY WS-PGMID
530300          " "
530400          TMPLT-16-TXT-Z
530500     DISPLAY " "
530600     DISPLAY WS-PGMID
530700          " OUTPUT LEN (86):" TMPLT-17-LEN
530800     DISPLAY WS-PGMID
530900          " RESULT NUMB:" TMPLT-17-TXT
531000     DISPLAY WS-PGMID
531100          " "
531200          TMPLT-17-TXT-Z
531300     DISPLAY " "
531400     SKIP2
531500     CONTINUE.
531600 TEST-CASE-025.
531700
531800     IF NOT (TEST-CASE = "ALL" OR "025")
531900       GO TO TEST-CASE-026
532000     END-IF
532100
532200*    * ------------------------------------------------------- *
532300*    * CALL STRING SERVICE WORD DELETE
532400*    * ------------------------------------------------------- *
532500     SKIP1
532600     MOVE ZERO TO RO-START
532700                  RO-COUNT
532800                  RO-PSA-LEN
532900                  TMPLT-5-LEN
533000     SET RO-FLAG-NONE TO TRUE
533100     MOVE +9   TO RO-START
533200     MOVE +2   TO RO-COUNT
533300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
533400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
533500     MOVE +1   TO TEMPLATE-COUNT
533600     MOVE ZERO TO TMPLT-5-LEN
533700     MOVE LOW-VALUE TO TMPLT-5-TXT
533800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
533900     IF PACKAGE-CALL
534000*      CALL ASUSSVCB TO PERFORM SERVICE WORD DELETE
534100       SET ACTION-WORDDEL TO TRUE
534200       MOVE "ASUSSVCB" TO LS-ASMODULE
534300       CALL LS-ASMODULE
534400            USING ASCA-COMMAREA
534500                  ACTION
534600                  AS-REQUEST-OPTIONS
534700                  SOURCE-STRING
534800                  TEMPLATE-COUNT
534900                  TEMPLATE-5
535000                  AS5CTOK-OCTOKEN
535100     ELSE
535200       MOVE "ASUDWDEL" TO LS-ASMODULE
535300       CALL LS-ASMODULE
535400            USING ASCA-COMMAREA
535500                  AS-REQUEST-OPTIONS
535600                  SOURCE-STRING
535700                  TEMPLATE-COUNT
535800                  TEMPLATE-5
535900                  AS5CTOK-OCTOKEN
536000     END-IF
536100
536200     IF AS5CTOK-SEVNBR > ZERO
536300       DISPLAY WS-PGMID
536400            " RETURN CODE: " AS5CTOK-SEVNBR
536500            " MESSAGE NBR: " AS5CTOK-MSGNBR
536600     END-IF
536700
536800     DISPLAY WS-PGMID
536900          " TEST CASE 025.A - WORD DELETE (9,2)"
537000     DISPLAY WS-PGMID
537100          " MIXED CASE / MIXED CASE"
537200     DISPLAY WS-PGMID
537300          " SOURCE:" SRC-TXT
537400     DISPLAY WS-PGMID
537500          " OUTPUT LEN (36):" TMPLT-5-LEN
537600     DISPLAY WS-PGMID
537700          " RESULT:" TMPLT-5-TXT
537800     DISPLAY WS-PGMID
537900          " "
538000          TMPLT-5-TXT-Z
538100     DISPLAY " "
538200     SKIP2
538300*    * ------------------------------------------------------- *
538400*    * CALL STRING SERVICE WORD DELETE
538500*    * ------------------------------------------------------- *
538600     SKIP1
538700     MOVE ZERO TO TMPLT-5-LEN
538800                  RO-COUNT
538900     SET RO-FLAG-UC   TO TRUE
539000     MOVE +9   TO RO-START
539100     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
539200*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
539300     MOVE +1   TO TEMPLATE-COUNT
539400     MOVE ZERO TO TMPLT-5-LEN
539500     MOVE LOW-VALUE TO TMPLT-5-TXT
539600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
539700     IF PACKAGE-CALL
539800*      CALL ASUSSVCB TO PERFORM SERVICE WORD DELETE
539900       SET ACTION-WORDDEL TO TRUE
540000       MOVE "ASUSSVCB" TO LS-ASMODULE
540100       CALL LS-ASMODULE
540200            USING ASCA-COMMAREA
540300                  ACTION
540400                  AS-REQUEST-OPTIONS
540500                  SOURCE-STRING
540600                  TEMPLATE-COUNT
540700                  TEMPLATE-5
540800                  AS5CTOK-OCTOKEN
540900     ELSE
541000       MOVE "ASUDWDEL" TO LS-ASMODULE
541100       CALL LS-ASMODULE
541200            USING ASCA-COMMAREA
541300                  AS-REQUEST-OPTIONS
541400                  SOURCE-STRING
541500                  TEMPLATE-COUNT
541600                  TEMPLATE-5
541700                  AS5CTOK-OCTOKEN
541800     END-IF
541900
542000     IF AS5CTOK-SEVNBR > ZERO
542100       DISPLAY WS-PGMID
542200            " RETURN CODE: " AS5CTOK-SEVNBR
542300            " MESSAGE NBR: " AS5CTOK-MSGNBR
542400     END-IF
542500
542600     DISPLAY WS-PGMID
542700          " TEST CASE 025.B - WORD DELETE (9,0)"
542800     DISPLAY WS-PGMID
542900          " MIXED CASE / UPPER CASE"
543000     DISPLAY WS-PGMID
543100          " SOURCE:" SRC-TXT
543200     DISPLAY WS-PGMID
543300          " OUTPUT LEN (32):" TMPLT-5-LEN
543400     DISPLAY WS-PGMID
543500          " RESULT:" TMPLT-5-TXT
543600     DISPLAY WS-PGMID
543700          " "
543800          TMPLT-5-TXT-Z
543900     DISPLAY " "
544000     SKIP2
544100     CONTINUE.
544200 TEST-CASE-026.
544300
544400     IF NOT (TEST-CASE = "ALL" OR "026")
544500       GO TO TEST-CASE-027
544600     END-IF
544700     SKIP2
544800     CONTINUE.
544900 TEST-CASE-027.
545000
545100     IF NOT (TEST-CASE = "ALL" OR "027")
545200       GO TO TEST-CASE-028
545300     END-IF
545400
545500*    * ------------------------------------------------------- *
545600*    * CALL STRING SERVICE WORD POSITION
545700*    * ------------------------------------------------------- *
545800     SKIP1
545900     MOVE ZERO TO RO-START
546000                  RO-COUNT
546100                  RO-PSA-LEN
546200     SET RO-FLAG-NONE  TO TRUE
546300     MOVE +7   TO RO-START
546400     MOVE +1   TO RO-COUNT
546500     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
546600*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
546700     MOVE +2   TO TEMPLATE-COUNT
546800     MOVE ZERO TO TMPLT-6-LEN
546900     MOVE LOW-VALUE TO TMPLT-6-TXT
547000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
547100     IF PACKAGE-CALL
547200*      CALL ASUSSVCB TO PERFORM SERVICE WORD POS
547300       SET ACTION-WORDPOS TO TRUE
547400       MOVE "ASUSSVCB" TO LS-ASMODULE
547500       CALL LS-ASMODULE
547600            USING ASCA-COMMAREA
547700                  ACTION
547800                  AS-REQUEST-OPTIONS
547900                  SOURCE-STRING
548000                  TEMPLATE-COUNT
548100                  TEMPLATE-2
548200                  TEMPLATE-6
548300                  AS5CTOK-OCTOKEN
548400     ELSE
548500       MOVE "ASUDWPOS" TO LS-ASMODULE
548600       CALL LS-ASMODULE
548700            USING ASCA-COMMAREA
548800                  AS-REQUEST-OPTIONS
548900                  SOURCE-STRING
549000                  TEMPLATE-COUNT
549100                  TEMPLATE-2
549200                  TEMPLATE-6
549300                  AS5CTOK-OCTOKEN
549400     END-IF
549500
549600     IF AS5CTOK-SEVNBR > ZERO
549700       DISPLAY WS-PGMID
549800            " RETURN CODE: " AS5CTOK-SEVNBR
549900            " MESSAGE NBR: " AS5CTOK-MSGNBR
550000     END-IF
550100
550200     DISPLAY WS-PGMID
550300          " TEST CASE 027.A - WORD POS (7,1)"
550400     DISPLAY WS-PGMID
550500          " MIXED CASE / NO CASE"
550600     DISPLAY WS-PGMID
550700          " SOURCE:" SRC-TXT
550800     DISPLAY WS-PGMID
550900          " OUTPUT LEN (4):" TMPLT-2-LEN
551000     DISPLAY WS-PGMID
551100          " WORD POS (25):" TMPLT-2-TXT
551200     DISPLAY WS-PGMID
551300          " "
551400          TMPLT-2-TXT-Z
551500     DISPLAY WS-PGMID
551600          " OUTPUT LEN (4):" TMPLT-6-LEN
551700     DISPLAY WS-PGMID
551800          " WORD TEXT (good):" TMPLT-6-TXT
551900     DISPLAY WS-PGMID
552000          " "
552100          TMPLT-6-TXT-Z
552200     DISPLAY " "
552300     SKIP2
552400*    * ------------------------------------------------------- *
552500*    * CALL STRING SERVICE WORD POSITION
552600*    * ------------------------------------------------------- *
552700     SKIP1
552800     MOVE ZERO TO RO-START
552900                  RO-COUNT
553000                  RO-PSA-LEN
553100     SET RO-FLAG-NONE  TO TRUE
553200     MOVE +7   TO RO-START
553300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
553400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
553500     MOVE +2   TO TEMPLATE-COUNT
553600     MOVE ZERO TO TMPLT-6-LEN
553700     MOVE LOW-VALUE TO TMPLT-6-TXT
553800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
553900     IF PACKAGE-CALL
554000*      CALL ASUSSVCB TO PERFORM SERVICE WORD POS
554100       SET ACTION-WORDPOS TO TRUE
554200       MOVE "ASUSSVCB" TO LS-ASMODULE
554300       CALL LS-ASMODULE
554400            USING ASCA-COMMAREA
554500                  ACTION
554600                  AS-REQUEST-OPTIONS
554700                  SOURCE-STRING
554800                  TEMPLATE-COUNT
554900                  TEMPLATE-2
555000                  TEMPLATE-6
555100                  AS5CTOK-OCTOKEN
555200     ELSE
555300       MOVE "ASUDWPOS" TO LS-ASMODULE
555400       CALL LS-ASMODULE
555500            USING ASCA-COMMAREA
555600                  AS-REQUEST-OPTIONS
555700                  SOURCE-STRING
555800                  TEMPLATE-COUNT
555900                  TEMPLATE-2
556000                  TEMPLATE-6
556100                  AS5CTOK-OCTOKEN
556200     END-IF
556300
556400     IF AS5CTOK-SEVNBR > ZERO
556500       DISPLAY WS-PGMID
556600            " RETURN CODE: " AS5CTOK-SEVNBR
556700            " MESSAGE NBR: " AS5CTOK-MSGNBR
556800     END-IF
556900
557000     DISPLAY WS-PGMID
557100          " TEST CASE 027.B - WORD POS (7,0)"
557200     DISPLAY WS-PGMID
557300          " MIXED CASE / NO CASE"
557400     DISPLAY WS-PGMID
557500          " SOURCE:" SRC-TXT
557600     DISPLAY WS-PGMID
557700          " OUTPUT LEN (4):" TMPLT-2-LEN
557800     DISPLAY WS-PGMID
557900          " WORD POS (25):" TMPLT-2-TXT
558000     DISPLAY WS-PGMID
558100          " "
558200          TMPLT-2-TXT-Z
558300     DISPLAY WS-PGMID
558400          " OUTPUT LEN (23):" TMPLT-6-LEN
558500     DISPLAY WS-PGMID
558600          " WORD TEXT (good...):" TMPLT-6-TXT
558700     DISPLAY WS-PGMID
558800          " "
558900          TMPLT-6-TXT-Z
559000     DISPLAY " "
559100     SKIP2
559200*    * ------------------------------------------------------- *
559300*    * CALL STRING SERVICE WORD POSITION
559400*    * ------------------------------------------------------- *
559500     SKIP1
559600     MOVE ZERO TO RO-START
559700                  RO-COUNT
559800                  RO-PSA-LEN
559900     SET RO-FLAG-NONE  TO TRUE
560000     MOVE +7   TO RO-START
560100     MOVE +2   TO RO-COUNT
560200     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
560300*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
560400     MOVE +2   TO TEMPLATE-COUNT
560500     MOVE ZERO TO TMPLT-6-LEN
560600     MOVE LOW-VALUE TO TMPLT-6-TXT
560700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
560800     IF PACKAGE-CALL
560900*      CALL ASUSSVCB TO PERFORM SERVICE WORD POS
561000       SET ACTION-WORDPOS TO TRUE
561100       MOVE "ASUSSVCB" TO LS-ASMODULE
561200       CALL LS-ASMODULE
561300            USING ASCA-COMMAREA
561400                  ACTION
561500                  AS-REQUEST-OPTIONS
561600                  SOURCE-STRING
561700                  TEMPLATE-COUNT
561800                  TEMPLATE-2
561900                  TEMPLATE-6
562000                  AS5CTOK-OCTOKEN
562100     ELSE
562200       MOVE "ASUDWPOS" TO LS-ASMODULE
562300       CALL LS-ASMODULE
562400            USING ASCA-COMMAREA
562500                  AS-REQUEST-OPTIONS
562600                  SOURCE-STRING
562700                  TEMPLATE-COUNT
562800                  TEMPLATE-2
562900                  TEMPLATE-6
563000                  AS5CTOK-OCTOKEN
563100     END-IF
563200
563300     IF AS5CTOK-SEVNBR > ZERO
563400       DISPLAY WS-PGMID
563500            " RETURN CODE: " AS5CTOK-SEVNBR
563600            " MESSAGE NBR: " AS5CTOK-MSGNBR
563700     END-IF
563800
563900     DISPLAY WS-PGMID
564000          " TEST CASE 027.C - WORD POS (7,2)"
564100     DISPLAY WS-PGMID
564200          " MIXED CASE / NO CASE"
564300     DISPLAY WS-PGMID
564400          " SOURCE:" SRC-TXT
564500     DISPLAY WS-PGMID
564600          " OUTPUT LEN (4):" TMPLT-2-LEN
564700     DISPLAY WS-PGMID
564800          " WORD POS (25):" TMPLT-2-TXT
564900     DISPLAY WS-PGMID
565000          " "
565100          TMPLT-2-TXT-Z
565200     DISPLAY WS-PGMID
565300          " OUTPUT LEN (8):" TMPLT-6-LEN
565400     DISPLAY WS-PGMID
565500          " WORD TEXT (good*men):" TMPLT-6-TXT
565600     DISPLAY WS-PGMID
565700          " "
565800          TMPLT-6-TXT-Z
565900     DISPLAY " "
566000     SKIP2
566100     CONTINUE.
566200 TEST-CASE-028.
566300
566400     IF NOT (TEST-CASE = "ALL" OR "028")
566500       GO TO TEST-CASE-090
566600     END-IF
566700     SKIP2
566800     CONTINUE.
566900 TEST-CASE-090.
567000
567100     IF NOT (TEST-CASE = "ALL" OR "090")
567200       GO TO TEST-CASE-091
567300     END-IF
567400
567500*    * ------------------------------------------------------- *
567600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
567700*    *   FORMAT: WORD, CURRENCY, CHECK
567800*    * ------------------------------------------------------- *
567900     SKIP1
568000     MOVE ZERO TO RO-START
568100                  RO-COUNT
568200                  RO-PSA-LEN
568300     SET RO-FLAG-NONE  TO TRUE
568400*    SET NUMBER TO WORD CONVERSION
568500     MOVE X'20' TO RO-OPTION-FLAG
568600     MOVE +2   TO RO-COUNT
568700     MOVE WS-SOURCE-STRING-20 TO SOURCE-STRING
568800*    132132177     9(9)V99
568900     MOVE +1   TO TEMPLATE-COUNT
569000     MOVE ZERO TO TMPLT-25-LEN
569100     MOVE LOW-VALUE TO TMPLT-25-TXT
569200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
569300     IF PACKAGE-CALL
569400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
569500       CONTINUE
569600     ELSE
569700       MOVE "ASUDN2TB" TO LS-ASMODULE
569800       CALL LS-ASMODULE
569900            USING ASCA-COMMAREA
570000                  AS-REQUEST-OPTIONS
570100                  SOURCE-STRING
570200                  TEMPLATE-COUNT
570300                  TEMPLATE-25
570400                  AS5CTOK-OCTOKEN
570500     END-IF
570600
570700     MOVE ZERO TO LS-ENCLAVE-RC
570800     MOVE "CEE3GRC" TO LS-LEMODULE
570900     CALL LS-LEMODULE
571000          USING LS-ENCLAVE-RC
571100                OMITTED
571200     IF LS-ENCLAVE-RC > ZERO
571300       DISPLAY WS-PGMID
571400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
571500     END-IF
571600
571700     IF AS5CTOK-SEVNBR > ZERO
571800       DISPLAY WS-PGMID
571900            " RETURN CODE: " AS5CTOK-SEVNBR
572000            " MESSAGE NBR: " AS5CTOK-MSGNBR
572100     END-IF
572200
572300     DISPLAY WS-PGMID
572400          " TEST CASE 090.A - NBR-2-WRD (ZD 1321321.77)"
572500     DISPLAY WS-PGMID
572600          " MIXED CASE / NO CASE"
572700     DISPLAY WS-PGMID
572800          " SOURCE:" SRC-TXT
572900     DISPLAY WS-PGMID
573000          " OUTPUT LEN (99):" TMPLT-25-LEN
573100     DISPLAY WS-PGMID
573200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
573300     DISPLAY WS-PGMID
573400          " "
573500          TMPLT-25-TXT-Z
573600     DISPLAY " "
573700     SKIP2
573800*    * ------------------------------------------------------- *
573900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
574000*    *   FORMAT: WORD, CURRENCY, CHECK
574100*    * ------------------------------------------------------- *
574200     SKIP1
574300     MOVE ZERO TO RO-START
574400                  RO-COUNT
574500                  RO-PSA-LEN
574600     SET RO-FLAG-NONE  TO TRUE
574700*    SET NUMBER TO CURRENCY CONVERSION
574800     MOVE X'10' TO RO-OPTION-FLAG
574900     MOVE +2   TO RO-COUNT
575000     MOVE WS-SOURCE-STRING-20 TO SOURCE-STRING
575100*    132132177     9(9)V99
575200     MOVE +1   TO TEMPLATE-COUNT
575300     MOVE ZERO TO TMPLT-25-LEN
575400     MOVE LOW-VALUE TO TMPLT-25-TXT
575500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
575600     IF PACKAGE-CALL
575700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
575800       CONTINUE
575900     ELSE
576000       MOVE "ASUDN2TB" TO LS-ASMODULE
576100       CALL LS-ASMODULE
576200            USING ASCA-COMMAREA
576300                  AS-REQUEST-OPTIONS
576400                  SOURCE-STRING
576500                  TEMPLATE-COUNT
576600                  TEMPLATE-25
576700                  AS5CTOK-OCTOKEN
576800     END-IF
576900
577000     MOVE ZERO TO LS-ENCLAVE-RC
577100     MOVE "CEE3GRC" TO LS-LEMODULE
577200     CALL LS-LEMODULE
577300          USING LS-ENCLAVE-RC
577400                OMITTED
577500     IF LS-ENCLAVE-RC > ZERO
577600       DISPLAY WS-PGMID
577700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
577800     END-IF
577900
578000     IF AS5CTOK-SEVNBR > ZERO
578100       DISPLAY WS-PGMID
578200            " RETURN CODE: " AS5CTOK-SEVNBR
578300            " MESSAGE NBR: " AS5CTOK-MSGNBR
578400     END-IF
578500
578600     DISPLAY WS-PGMID
578700          " TEST CASE 090.B - NBR-2-CUR (ZD 1321321.77)"
578800     DISPLAY WS-PGMID
578900          " MIXED CASE / NO CASE"
579000     DISPLAY WS-PGMID
579100          " SOURCE:" SRC-TXT
579200     DISPLAY WS-PGMID
579300          " OUTPUT LEN (102):" TMPLT-25-LEN
579400     DISPLAY WS-PGMID
579500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
579600     DISPLAY WS-PGMID
579700          " "
579800          TMPLT-25-TXT-Z
579900     DISPLAY " "
580000     SKIP2
580100*    * ------------------------------------------------------- *
580200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
580300*    *   FORMAT: WORD, CURRENCY, CHECK
580400*    * ------------------------------------------------------- *
580500     SKIP1
580600     MOVE ZERO TO RO-START
580700                  RO-COUNT
580800                  RO-PSA-LEN
580900     SET RO-FLAG-NONE  TO TRUE
581000     MOVE +2   TO RO-COUNT
581100     MOVE WS-SOURCE-STRING-20 TO SOURCE-STRING
581200*    132132177     9(9)V99
581300     MOVE +1   TO TEMPLATE-COUNT
581400     MOVE ZERO TO TMPLT-25-LEN
581500     MOVE LOW-VALUE TO TMPLT-25-TXT
581600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
581700     IF PACKAGE-CALL
581800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
581900       CONTINUE
582000     ELSE
582100       MOVE "ASUDN2TB" TO LS-ASMODULE
582200       CALL LS-ASMODULE
582300            USING ASCA-COMMAREA
582400                  AS-REQUEST-OPTIONS
582500                  SOURCE-STRING
582600                  TEMPLATE-COUNT
582700                  TEMPLATE-25
582800                  AS5CTOK-OCTOKEN
582900     END-IF
583000
583100     MOVE ZERO TO LS-ENCLAVE-RC
583200     MOVE "CEE3GRC" TO LS-LEMODULE
583300     CALL LS-LEMODULE
583400          USING LS-ENCLAVE-RC
583500                OMITTED
583600     IF LS-ENCLAVE-RC > ZERO
583700       DISPLAY WS-PGMID
583800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
583900     END-IF
584000
584100     IF AS5CTOK-SEVNBR > ZERO
584200       DISPLAY WS-PGMID
584300            " RETURN CODE: " AS5CTOK-SEVNBR
584400            " MESSAGE NBR: " AS5CTOK-MSGNBR
584500     END-IF
584600
584700     DISPLAY WS-PGMID
584800          " TEST CASE 090.C - NBR-2-CHK (ZD 1321321.77)"
584900     DISPLAY WS-PGMID
585000          " MIXED CASE / NO CASE"
585100     DISPLAY WS-PGMID
585200          " SOURCE:" SRC-TXT
585300     DISPLAY WS-PGMID
585400          " OUTPUT LEN (89):" TMPLT-25-LEN
585500     DISPLAY WS-PGMID
585600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
585700     DISPLAY WS-PGMID
585800          " "
585900          TMPLT-25-TXT-Z
586000     DISPLAY " "
586100     SKIP2
586200*    * ------------------------------------------------------- *
586300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
586400*    *   FORMAT: WORD, CURRENCY, CHECK
586500*    * ------------------------------------------------------- *
586600     SKIP1
586700     MOVE ZERO TO RO-START
586800                  RO-COUNT
586900                  RO-PSA-LEN
587000     SET RO-FLAG-NONE  TO TRUE
587100*    SET NUMBER TO WORD CONVERSION
587200     MOVE X'20' TO RO-OPTION-FLAG
587300     MOVE +3   TO RO-COUNT
587400     MOVE WS-SOURCE-STRING-21 TO SOURCE-STRING
587500*    1321321888    9(8)V9(3)
587600     MOVE +1   TO TEMPLATE-COUNT
587700     MOVE ZERO TO TMPLT-25-LEN
587800     MOVE LOW-VALUE TO TMPLT-25-TXT
587900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
588000     IF PACKAGE-CALL
588100*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
588200       CONTINUE
588300     ELSE
588400       MOVE "ASUDN2TB" TO LS-ASMODULE
588500       CALL LS-ASMODULE
588600            USING ASCA-COMMAREA
588700                  AS-REQUEST-OPTIONS
588800                  SOURCE-STRING
588900                  TEMPLATE-COUNT
589000                  TEMPLATE-25
589100                  AS5CTOK-OCTOKEN
589200     END-IF
589300
589400     MOVE ZERO TO LS-ENCLAVE-RC
589500     MOVE "CEE3GRC" TO LS-LEMODULE
589600     CALL LS-LEMODULE
589700          USING LS-ENCLAVE-RC
589800                OMITTED
589900     IF LS-ENCLAVE-RC > ZERO
590000       DISPLAY WS-PGMID
590100            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
590200     END-IF
590300
590400     IF AS5CTOK-SEVNBR > ZERO
590500       DISPLAY WS-PGMID
590600            " RETURN CODE: " AS5CTOK-SEVNBR
590700            " MESSAGE NBR: " AS5CTOK-MSGNBR
590800     END-IF
590900
591000     DISPLAY WS-PGMID
591100          " TEST CASE 090.D - NBR-2-WRD (ZD 1321321.888)"
591200     DISPLAY WS-PGMID
591300          " MIXED CASE / NO CASE"
591400     DISPLAY WS-PGMID
591500          " SOURCE:" SRC-TXT
591600     DISPLAY WS-PGMID
591700          " OUTPUT LEN (113):" TMPLT-25-LEN
591800     DISPLAY WS-PGMID
591900          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
592000     DISPLAY WS-PGMID
592100          " "
592200          TMPLT-25-TXT-Z
592300     DISPLAY " "
592400     SKIP2
592500*    * ------------------------------------------------------- *
592600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
592700*    *   FORMAT: WORD, CURRENCY, CHECK
592800*    * ------------------------------------------------------- *
592900     SKIP1
593000     MOVE ZERO TO RO-START
593100                  RO-COUNT
593200                  RO-PSA-LEN
593300     SET RO-FLAG-NONE  TO TRUE
593400*    SET NUMBER TO CURRENCY CONVERSION
593500     MOVE X'10' TO RO-OPTION-FLAG
593600     MOVE +3   TO RO-COUNT
593700     MOVE WS-SOURCE-STRING-21 TO SOURCE-STRING
593800*    1321321888    9(8)V9(3)
593900     MOVE +1   TO TEMPLATE-COUNT
594000     MOVE ZERO TO TMPLT-25-LEN
594100     MOVE LOW-VALUE TO TMPLT-25-TXT
594200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
594300     IF PACKAGE-CALL
594400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
594500       CONTINUE
594600     ELSE
594700       MOVE "ASUDN2TB" TO LS-ASMODULE
594800       CALL LS-ASMODULE
594900            USING ASCA-COMMAREA
595000                  AS-REQUEST-OPTIONS
595100                  SOURCE-STRING
595200                  TEMPLATE-COUNT
595300                  TEMPLATE-25
595400                  AS5CTOK-OCTOKEN
595500     END-IF
595600
595700     MOVE ZERO TO LS-ENCLAVE-RC
595800     MOVE "CEE3GRC" TO LS-LEMODULE
595900     CALL LS-LEMODULE
596000          USING LS-ENCLAVE-RC
596100                OMITTED
596200     IF LS-ENCLAVE-RC > ZERO
596300       DISPLAY WS-PGMID
596400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
596500     END-IF
596600
596700     IF AS5CTOK-SEVNBR > ZERO
596800       DISPLAY WS-PGMID
596900            " RETURN CODE: " AS5CTOK-SEVNBR
597000            " MESSAGE NBR: " AS5CTOK-MSGNBR
597100     END-IF
597200
597300     DISPLAY WS-PGMID
597400          " TEST CASE 090.E - NBR-2-CUR (ZD 1321321.888)"
597500     DISPLAY WS-PGMID
597600          " MIXED CASE / NO CASE"
597700     DISPLAY WS-PGMID
597800          " SOURCE:" SRC-TXT
597900     DISPLAY WS-PGMID
598000          " OUTPUT LEN (0):" TMPLT-25-LEN
598100     DISPLAY WS-PGMID
598200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
598300     DISPLAY WS-PGMID
598400          " "
598500          TMPLT-25-TXT-Z
598600     DISPLAY " "
598700     SKIP2
598800*    * ------------------------------------------------------- *
598900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
599000*    *   FORMAT: WORD, CURRENCY, CHECK
599100*    * ------------------------------------------------------- *
599200     SKIP1
599300     MOVE ZERO TO RO-START
599400                  RO-COUNT
599500                  RO-PSA-LEN
599600     SET RO-FLAG-NONE  TO TRUE
599700     MOVE +3   TO RO-COUNT
599800     MOVE WS-SOURCE-STRING-21 TO SOURCE-STRING
599900*    1321321888    9(8)V9(3)
600000     MOVE +1   TO TEMPLATE-COUNT
600100     MOVE ZERO TO TMPLT-25-LEN
600200     MOVE LOW-VALUE TO TMPLT-25-TXT
600300     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
600400     IF PACKAGE-CALL
600500*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
600600       CONTINUE
600700     ELSE
600800       MOVE "ASUDN2TB" TO LS-ASMODULE
600900       CALL LS-ASMODULE
601000            USING ASCA-COMMAREA
601100                  AS-REQUEST-OPTIONS
601200                  SOURCE-STRING
601300                  TEMPLATE-COUNT
601400                  TEMPLATE-25
601500                  AS5CTOK-OCTOKEN
601600     END-IF
601700
601800     MOVE ZERO TO LS-ENCLAVE-RC
601900     MOVE "CEE3GRC" TO LS-LEMODULE
602000     CALL LS-LEMODULE
602100          USING LS-ENCLAVE-RC
602200                OMITTED
602300     IF LS-ENCLAVE-RC > ZERO
602400       DISPLAY WS-PGMID
602500            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
602600     END-IF
602700
602800     IF AS5CTOK-SEVNBR > ZERO
602900       DISPLAY WS-PGMID
603000            " RETURN CODE: " AS5CTOK-SEVNBR
603100            " MESSAGE NBR: " AS5CTOK-MSGNBR
603200     END-IF
603300
603400     DISPLAY WS-PGMID
603500          " TEST CASE 090.F - NBR-2-CHK (ZD 1321321.888)"
603600     DISPLAY WS-PGMID
603700          " MIXED CASE / NO CASE"
603800     DISPLAY WS-PGMID
603900          " SOURCE:" SRC-TXT
604000     DISPLAY WS-PGMID
604100          " OUTPUT LEN (89):" TMPLT-25-LEN
604200     DISPLAY WS-PGMID
604300          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
604400     DISPLAY WS-PGMID
604500          " "
604600          TMPLT-25-TXT-Z
604700     DISPLAY " "
604800     SKIP2
604900*    * ------------------------------------------------------- *
605000*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
605100*    *   FORMAT: WORD, CURRENCY, CHECK
605200*    * ------------------------------------------------------- *
605300     SKIP1
605400     MOVE ZERO TO RO-START
605500                  RO-COUNT
605600                  RO-PSA-LEN
605700     SET RO-FLAG-NONE  TO TRUE
605800*    SET NUMBER TO WORD CONVERSION
605900     MOVE X'20' TO RO-OPTION-FLAG
606000     MOVE +8   TO RO-COUNT
606100     MOVE WS-SOURCE-STRING-22 TO SOURCE-STRING
606200*    132132132187654321    9(10)V9(8)
606300     MOVE +1   TO TEMPLATE-COUNT
606400     MOVE ZERO TO TMPLT-25-LEN
606500     MOVE LOW-VALUE TO TMPLT-25-TXT
606600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
606700     IF PACKAGE-CALL
606800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
606900       CONTINUE
607000     ELSE
607100       MOVE "ASUDN2TB" TO LS-ASMODULE
607200       CALL LS-ASMODULE
607300            USING ASCA-COMMAREA
607400                  AS-REQUEST-OPTIONS
607500                  SOURCE-STRING
607600                  TEMPLATE-COUNT
607700                  TEMPLATE-25
607800                  AS5CTOK-OCTOKEN
607900     END-IF
608000
608100     MOVE ZERO TO LS-ENCLAVE-RC
608200     MOVE "CEE3GRC" TO LS-LEMODULE
608300     CALL LS-LEMODULE
608400          USING LS-ENCLAVE-RC
608500                OMITTED
608600     IF LS-ENCLAVE-RC > ZERO
608700       DISPLAY WS-PGMID
608800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
608900     END-IF
609000
609100     IF AS5CTOK-SEVNBR > ZERO
609200       DISPLAY WS-PGMID
609300            " RETURN CODE: " AS5CTOK-SEVNBR
609400            " MESSAGE NBR: " AS5CTOK-MSGNBR
609500     END-IF
609600
609700     DISPLAY WS-PGMID
609800          " TEST CASE 090.G - NBR-2-WRD (ZD 1321321321.87654321)"
609900     DISPLAY WS-PGMID
610000          " MIXED CASE / NO CASE"
610100     DISPLAY WS-PGMID
610200          " SOURCE:" SRC-TXT
610300     DISPLAY WS-PGMID
610400          " OUTPUT LEN (204):" TMPLT-25-LEN
610500     DISPLAY WS-PGMID
610600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
610700     DISPLAY WS-PGMID
610800          " "
610900          TMPLT-25-TXT-Z
611000     DISPLAY " "
611100     SKIP2
611200*    * ------------------------------------------------------- *
611300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
611400*    *   FORMAT: WORD, CURRENCY, CHECK
611500*    * ------------------------------------------------------- *
611600     SKIP1
611700     MOVE ZERO TO RO-START
611800                  RO-COUNT
611900                  RO-PSA-LEN
612000     SET RO-FLAG-NONE  TO TRUE
612100*    SET NUMBER TO CURRENCY CONVERSION
612200     MOVE X'10' TO RO-OPTION-FLAG
612300     MOVE +8   TO RO-COUNT
612400     MOVE WS-SOURCE-STRING-22 TO SOURCE-STRING
612500*    132132132187654321   9(10)V9(8)
612600     MOVE +1   TO TEMPLATE-COUNT
612700     MOVE ZERO TO TMPLT-25-LEN
612800     MOVE LOW-VALUE TO TMPLT-25-TXT
612900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
613000     IF PACKAGE-CALL
613100*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
613200       CONTINUE
613300     ELSE
613400       MOVE "ASUDN2TB" TO LS-ASMODULE
613500       CALL LS-ASMODULE
613600            USING ASCA-COMMAREA
613700                  AS-REQUEST-OPTIONS
613800                  SOURCE-STRING
613900                  TEMPLATE-COUNT
614000                  TEMPLATE-25
614100                  AS5CTOK-OCTOKEN
614200     END-IF
614300
614400     MOVE ZERO TO LS-ENCLAVE-RC
614500     MOVE "CEE3GRC" TO LS-LEMODULE
614600     CALL LS-LEMODULE
614700          USING LS-ENCLAVE-RC
614800                OMITTED
614900     IF LS-ENCLAVE-RC > ZERO
615000       DISPLAY WS-PGMID
615100            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
615200     END-IF
615300
615400     IF AS5CTOK-SEVNBR > ZERO
615500       DISPLAY WS-PGMID
615600            " RETURN CODE: " AS5CTOK-SEVNBR
615700            " MESSAGE NBR: " AS5CTOK-MSGNBR
615800     END-IF
615900
616000     DISPLAY WS-PGMID
616100          " TEST CASE 090.H - NBR-2-CUR (ZD 1321321321.87654321)"
616200     DISPLAY WS-PGMID
616300          " MIXED CASE / NO CASE"
616400     DISPLAY WS-PGMID
616500          " SOURCE:" SRC-TXT
616600     DISPLAY WS-PGMID
616700          " OUTPUT LEN (0):" TMPLT-25-LEN
616800     DISPLAY WS-PGMID
616900          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
617000     DISPLAY WS-PGMID
617100          " "
617200          TMPLT-25-TXT-Z
617300     DISPLAY " "
617400     SKIP2
617500*    * ------------------------------------------------------- *
617600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
617700*    *   FORMAT: WORD, CURRENCY, CHECK
617800*    * ------------------------------------------------------- *
617900     SKIP1
618000     MOVE ZERO TO RO-START
618100                  RO-COUNT
618200                  RO-PSA-LEN
618300     SET RO-FLAG-NONE  TO TRUE
618400     MOVE +8   TO RO-COUNT
618500     MOVE WS-SOURCE-STRING-22 TO SOURCE-STRING
618600*    132132132187654321    9(10)V9(8)
618700     MOVE +1   TO TEMPLATE-COUNT
618800     MOVE ZERO TO TMPLT-25-LEN
618900     MOVE LOW-VALUE TO TMPLT-25-TXT
619000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
619100     IF PACKAGE-CALL
619200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
619300       CONTINUE
619400     ELSE
619500       MOVE "ASUDN2TB" TO LS-ASMODULE
619600       CALL LS-ASMODULE
619700            USING ASCA-COMMAREA
619800                  AS-REQUEST-OPTIONS
619900                  SOURCE-STRING
620000                  TEMPLATE-COUNT
620100                  TEMPLATE-25
620200                  AS5CTOK-OCTOKEN
620300     END-IF
620400
620500     MOVE ZERO TO LS-ENCLAVE-RC
620600     MOVE "CEE3GRC" TO LS-LEMODULE
620700     CALL LS-LEMODULE
620800          USING LS-ENCLAVE-RC
620900                OMITTED
621000     IF LS-ENCLAVE-RC > ZERO
621100       DISPLAY WS-PGMID
621200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
621300     END-IF
621400
621500     IF AS5CTOK-SEVNBR > ZERO
621600       DISPLAY WS-PGMID
621700            " RETURN CODE: " AS5CTOK-SEVNBR
621800            " MESSAGE NBR: " AS5CTOK-MSGNBR
621900     END-IF
622000
622100     DISPLAY WS-PGMID
622200          " TEST CASE 090.I - NBR-2-CHK (ZD 1321321321.87654321)"
622300     DISPLAY WS-PGMID
622400          " MIXED CASE / NO CASE"
622500     DISPLAY WS-PGMID
622600          " SOURCE:" SRC-TXT
622700     DISPLAY WS-PGMID
622800          " OUTPUT LEN (122):" TMPLT-25-LEN
622900     DISPLAY WS-PGMID
623000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
623100     DISPLAY WS-PGMID
623200          " "
623300          TMPLT-25-TXT-Z
623400     DISPLAY " "
623500     SKIP2
623600*    * ------------------------------------------------------- *
623700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
623800*    *   FORMAT: WORD, CURRENCY, CHECK
623900*    * ------------------------------------------------------- *
624000     SKIP1
624100     MOVE ZERO TO RO-START
624200                  RO-COUNT
624300                  RO-PSA-LEN
624400     SET RO-FLAG-NONE  TO TRUE
624500*    SET NUMBER TO WORD CONVERSION
624600     MOVE X'20' TO RO-OPTION-FLAG
624700     MOVE +8   TO RO-COUNT
624800     MOVE WS-SOURCE-STRING-23 TO SOURCE-STRING
624900*    132132132100004321    9(10)V9(8)
625000     MOVE +1   TO TEMPLATE-COUNT
625100     MOVE ZERO TO TMPLT-25-LEN
625200     MOVE LOW-VALUE TO TMPLT-25-TXT
625300     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
625400     IF PACKAGE-CALL
625500*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
625600       CONTINUE
625700     ELSE
625800       MOVE "ASUDN2TB" TO LS-ASMODULE
625900       CALL LS-ASMODULE
626000            USING ASCA-COMMAREA
626100                  AS-REQUEST-OPTIONS
626200                  SOURCE-STRING
626300                  TEMPLATE-COUNT
626400                  TEMPLATE-25
626500                  AS5CTOK-OCTOKEN
626600     END-IF
626700
626800     MOVE ZERO TO LS-ENCLAVE-RC
626900     MOVE "CEE3GRC" TO LS-LEMODULE
627000     CALL LS-LEMODULE
627100          USING LS-ENCLAVE-RC
627200                OMITTED
627300     IF LS-ENCLAVE-RC > ZERO
627400       DISPLAY WS-PGMID
627500            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
627600     END-IF
627700
627800     IF AS5CTOK-SEVNBR > ZERO
627900       DISPLAY WS-PGMID
628000            " RETURN CODE: " AS5CTOK-SEVNBR
628100            " MESSAGE NBR: " AS5CTOK-MSGNBR
628200     END-IF
628300
628400     DISPLAY WS-PGMID
628500          " TEST CASE 090.J - NBR-2-WRD (ZD 1321321321.00004321)"
628600     DISPLAY WS-PGMID
628700          " MIXED CASE / NO CASE"
628800     DISPLAY WS-PGMID
628900          " SOURCE:" SRC-TXT
629000     DISPLAY WS-PGMID
629100          " OUTPUT LEN (165):" TMPLT-25-LEN
629200     DISPLAY WS-PGMID
629300          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
629400     DISPLAY WS-PGMID
629500          " "
629600          TMPLT-25-TXT-Z
629700     DISPLAY " "
629800     SKIP2
629900*    * ------------------------------------------------------- *
630000*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
630100*    *   FORMAT: WORD, CURRENCY, CHECK
630200*    * ------------------------------------------------------- *
630300     SKIP1
630400     MOVE ZERO TO RO-START
630500                  RO-COUNT
630600                  RO-PSA-LEN
630700     SET RO-FLAG-NONE  TO TRUE
630800*    SET NUMBER TO CURRENCY CONVERSION
630900     MOVE X'10' TO RO-OPTION-FLAG
631000     MOVE +8   TO RO-COUNT
631100     MOVE WS-SOURCE-STRING-23 TO SOURCE-STRING
631200*    132132132100004321   9(10)V9(8)
631300     MOVE +1   TO TEMPLATE-COUNT
631400     MOVE ZERO TO TMPLT-25-LEN
631500     MOVE LOW-VALUE TO TMPLT-25-TXT
631600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
631700     IF PACKAGE-CALL
631800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
631900       CONTINUE
632000     ELSE
632100       MOVE "ASUDN2TB" TO LS-ASMODULE
632200       CALL LS-ASMODULE
632300            USING ASCA-COMMAREA
632400                  AS-REQUEST-OPTIONS
632500                  SOURCE-STRING
632600                  TEMPLATE-COUNT
632700                  TEMPLATE-25
632800                  AS5CTOK-OCTOKEN
632900     END-IF
633000
633100     MOVE ZERO TO LS-ENCLAVE-RC
633200     MOVE "CEE3GRC" TO LS-LEMODULE
633300     CALL LS-LEMODULE
633400          USING LS-ENCLAVE-RC
633500                OMITTED
633600     IF LS-ENCLAVE-RC > ZERO
633700       DISPLAY WS-PGMID
633800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
633900     END-IF
634000
634100     IF AS5CTOK-SEVNBR > ZERO
634200       DISPLAY WS-PGMID
634300            " RETURN CODE: " AS5CTOK-SEVNBR
634400            " MESSAGE NBR: " AS5CTOK-MSGNBR
634500     END-IF
634600
634700     DISPLAY WS-PGMID
634800          " TEST CASE 090.K - NBR-2-CUR (ZD 1321321321.00004321)"
634900     DISPLAY WS-PGMID
635000          " MIXED CASE / NO CASE"
635100     DISPLAY WS-PGMID
635200          " SOURCE:" SRC-TXT
635300     DISPLAY WS-PGMID
635400          " OUTPUT LEN (0):" TMPLT-25-LEN
635500     DISPLAY WS-PGMID
635600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
635700     DISPLAY WS-PGMID
635800          " "
635900          TMPLT-25-TXT-Z
636000     DISPLAY " "
636100     SKIP2
636200*    * ------------------------------------------------------- *
636300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
636400*    *   FORMAT: WORD, CURRENCY, CHECK
636500*    * ------------------------------------------------------- *
636600     SKIP1
636700     MOVE ZERO TO RO-START
636800                  RO-COUNT
636900                  RO-PSA-LEN
637000     SET RO-FLAG-NONE  TO TRUE
637100     MOVE +8   TO RO-COUNT
637200     MOVE WS-SOURCE-STRING-23 TO SOURCE-STRING
637300*    132132132100004321    9(10)V9(8)
637400     MOVE +1   TO TEMPLATE-COUNT
637500     MOVE ZERO TO TMPLT-25-LEN
637600     MOVE LOW-VALUE TO TMPLT-25-TXT
637700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
637800     IF PACKAGE-CALL
637900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
638000       CONTINUE
638100     ELSE
638200       MOVE "ASUDN2TB" TO LS-ASMODULE
638300       CALL LS-ASMODULE
638400            USING ASCA-COMMAREA
638500                  AS-REQUEST-OPTIONS
638600                  SOURCE-STRING
638700                  TEMPLATE-COUNT
638800                  TEMPLATE-25
638900                  AS5CTOK-OCTOKEN
639000     END-IF
639100
639200     MOVE ZERO TO LS-ENCLAVE-RC
639300     MOVE "CEE3GRC" TO LS-LEMODULE
639400     CALL LS-LEMODULE
639500          USING LS-ENCLAVE-RC
639600                OMITTED
639700     IF LS-ENCLAVE-RC > ZERO
639800       DISPLAY WS-PGMID
639900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
640000     END-IF
640100
640200     IF AS5CTOK-SEVNBR > ZERO
640300       DISPLAY WS-PGMID
640400            " RETURN CODE: " AS5CTOK-SEVNBR
640500            " MESSAGE NBR: " AS5CTOK-MSGNBR
640600     END-IF
640700
640800     DISPLAY WS-PGMID
640900          " TEST CASE 090.L - NBR-2-CHK (ZD 1321321321.00004321)"
641000     DISPLAY WS-PGMID
641100          " MIXED CASE / NO CASE"
641200     DISPLAY WS-PGMID
641300          " SOURCE:" SRC-TXT
641400     DISPLAY WS-PGMID
641500          " OUTPUT LEN (122):" TMPLT-25-LEN
641600     DISPLAY WS-PGMID
641700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
641800     DISPLAY WS-PGMID
641900          " "
642000          TMPLT-25-TXT-Z
642100     DISPLAY " "
642200     SKIP2
642300*    * ------------------------------------------------------- *
642400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
642500*    *   FORMAT: WORD, CURRENCY, CHECK
642600*    * ------------------------------------------------------- *
642700     SKIP1
642800     MOVE ZERO TO RO-START
642900                  RO-COUNT
643000                  RO-PSA-LEN
643100     SET RO-FLAG-NONE  TO TRUE
643200*    SET NUMBER TO WORD CONVERSION
643300     MOVE X'20' TO RO-OPTION-FLAG
643400     MOVE +6   TO RO-COUNT
643500     MOVE WS-SOURCE-STRING-24 TO SOURCE-STRING
643600*    1000021001000543      9(12)V9(6)
643700     MOVE +1   TO TEMPLATE-COUNT
643800     MOVE ZERO TO TMPLT-25-LEN
643900     MOVE LOW-VALUE TO TMPLT-25-TXT
644000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
644100     IF PACKAGE-CALL
644200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
644300       CONTINUE
644400     ELSE
644500       MOVE "ASUDN2TB" TO LS-ASMODULE
644600       CALL LS-ASMODULE
644700            USING ASCA-COMMAREA
644800                  AS-REQUEST-OPTIONS
644900                  SOURCE-STRING
645000                  TEMPLATE-COUNT
645100                  TEMPLATE-25
645200                  AS5CTOK-OCTOKEN
645300     END-IF
645400
645500     MOVE ZERO TO LS-ENCLAVE-RC
645600     MOVE "CEE3GRC" TO LS-LEMODULE
645700     CALL LS-LEMODULE
645800          USING LS-ENCLAVE-RC
645900                OMITTED
646000     IF LS-ENCLAVE-RC > ZERO
646100       DISPLAY WS-PGMID
646200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
646300     END-IF
646400
646500     IF AS5CTOK-SEVNBR > ZERO
646600       DISPLAY WS-PGMID
646700            " RETURN CODE: " AS5CTOK-SEVNBR
646800            " MESSAGE NBR: " AS5CTOK-MSGNBR
646900     END-IF
647000
647100     DISPLAY WS-PGMID
647200          " TEST CASE 090.M - NBR-2-WRD (ZD 1000021001.000543)"
647300     DISPLAY WS-PGMID
647400          " MIXED CASE / NO CASE"
647500     DISPLAY WS-PGMID
647600          " SOURCE:" SRC-TXT
647700     DISPLAY WS-PGMID
647800          " OUTPUT LEN (75):" TMPLT-25-LEN
647900     DISPLAY WS-PGMID
648000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
648100     DISPLAY WS-PGMID
648200          " "
648300          TMPLT-25-TXT-Z
648400     DISPLAY " "
648500     SKIP2
648600*    * ------------------------------------------------------- *
648700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
648800*    *   FORMAT: WORD, CURRENCY, CHECK
648900*    * ------------------------------------------------------- *
649000     SKIP1
649100     MOVE ZERO TO RO-START
649200                  RO-COUNT
649300                  RO-PSA-LEN
649400     SET RO-FLAG-NONE  TO TRUE
649500*    SET NUMBER TO CURRENCY CONVERSION
649600     MOVE X'10' TO RO-OPTION-FLAG
649700     MOVE +6   TO RO-COUNT
649800     MOVE WS-SOURCE-STRING-24 TO SOURCE-STRING
649900*    1000021001000543   9(12)V9(6)
650000     MOVE +1   TO TEMPLATE-COUNT
650100     MOVE ZERO TO TMPLT-25-LEN
650200     MOVE LOW-VALUE TO TMPLT-25-TXT
650300     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
650400     IF PACKAGE-CALL
650500*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
650600       CONTINUE
650700     ELSE
650800       MOVE "ASUDN2TB" TO LS-ASMODULE
650900       CALL LS-ASMODULE
651000            USING ASCA-COMMAREA
651100                  AS-REQUEST-OPTIONS
651200                  SOURCE-STRING
651300                  TEMPLATE-COUNT
651400                  TEMPLATE-25
651500                  AS5CTOK-OCTOKEN
651600     END-IF
651700
651800     MOVE ZERO TO LS-ENCLAVE-RC
651900     MOVE "CEE3GRC" TO LS-LEMODULE
652000     CALL LS-LEMODULE
652100          USING LS-ENCLAVE-RC
652200                OMITTED
652300     IF LS-ENCLAVE-RC > ZERO
652400       DISPLAY WS-PGMID
652500            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
652600     END-IF
652700
652800     IF AS5CTOK-SEVNBR > ZERO
652900       DISPLAY WS-PGMID
653000            " RETURN CODE: " AS5CTOK-SEVNBR
653100            " MESSAGE NBR: " AS5CTOK-MSGNBR
653200     END-IF
653300
653400     DISPLAY WS-PGMID
653500          " TEST CASE 090.N - NBR-2-CUR (ZD 1000021001.000543)"
653600     DISPLAY WS-PGMID
653700          " MIXED CASE / NO CASE"
653800     DISPLAY WS-PGMID
653900          " SOURCE:" SRC-TXT
654000     DISPLAY WS-PGMID
654100          " OUTPUT LEN (0):" TMPLT-25-LEN
654200     DISPLAY WS-PGMID
654300          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
654400     DISPLAY WS-PGMID
654500          " "
654600          TMPLT-25-TXT-Z
654700     DISPLAY " "
654800     SKIP2
654900*    * ------------------------------------------------------- *
655000*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
655100*    *   FORMAT: WORD, CURRENCY, CHECK
655200*    * ------------------------------------------------------- *
655300     SKIP1
655400     MOVE ZERO TO RO-START
655500                  RO-COUNT
655600                  RO-PSA-LEN
655700     SET RO-FLAG-NONE  TO TRUE
655800     MOVE +6   TO RO-COUNT
655900     MOVE WS-SOURCE-STRING-24 TO SOURCE-STRING
656000*    1000021001000543    9(12)V9(6)
656100     MOVE +1   TO TEMPLATE-COUNT
656200     MOVE ZERO TO TMPLT-25-LEN
656300     MOVE LOW-VALUE TO TMPLT-25-TXT
656400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
656500     IF PACKAGE-CALL
656600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
656700       CONTINUE
656800     ELSE
656900       MOVE "ASUDN2TB" TO LS-ASMODULE
657000       CALL LS-ASMODULE
657100            USING ASCA-COMMAREA
657200                  AS-REQUEST-OPTIONS
657300                  SOURCE-STRING
657400                  TEMPLATE-COUNT
657500                  TEMPLATE-25
657600                  AS5CTOK-OCTOKEN
657700     END-IF
657800
657900     MOVE ZERO TO LS-ENCLAVE-RC
658000     MOVE "CEE3GRC" TO LS-LEMODULE
658100     CALL LS-LEMODULE
658200          USING LS-ENCLAVE-RC
658300                OMITTED
658400     IF LS-ENCLAVE-RC > ZERO
658500       DISPLAY WS-PGMID
658600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
658700     END-IF
658800
658900     IF AS5CTOK-SEVNBR > ZERO
659000       DISPLAY WS-PGMID
659100            " RETURN CODE: " AS5CTOK-SEVNBR
659200            " MESSAGE NBR: " AS5CTOK-MSGNBR
659300     END-IF
659400
659500     DISPLAY WS-PGMID
659600          " TEST CASE 090.O - NBR-2-CHK (ZD 1000021001.000543)"
659700     DISPLAY WS-PGMID
659800          " MIXED CASE / NO CASE"
659900     DISPLAY WS-PGMID
660000          " SOURCE:" SRC-TXT
660100     DISPLAY WS-PGMID
660200          " OUTPUT LEN (54):" TMPLT-25-LEN
660300     DISPLAY WS-PGMID
660400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
660500     DISPLAY WS-PGMID
660600          " "
660700          TMPLT-25-TXT-Z
660800     DISPLAY " "
660900     SKIP2
661000*    * ------------------------------------------------------- *
661100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
661200*    *   FORMAT: WORD, CURRENCY, CHECK
661300*    * ------------------------------------------------------- *
661400     SKIP1
661500     MOVE ZERO TO RO-START
661600                  RO-COUNT
661700                  RO-PSA-LEN
661800     SET RO-FLAG-NONE  TO TRUE
661900*    SET NUMBER TO WORD CONVERSION
662000     MOVE X'20' TO RO-OPTION-FLAG
662100     MOVE +0   TO RO-COUNT
662200     MOVE WS-SOURCE-STRING-25 TO SOURCE-STRING
662300*    -10200             9(5)
662400     MOVE +1   TO TEMPLATE-COUNT
662500     MOVE ZERO TO TMPLT-25-LEN
662600     MOVE LOW-VALUE TO TMPLT-25-TXT
662700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
662800     IF PACKAGE-CALL
662900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
663000       CONTINUE
663100     ELSE
663200       MOVE "ASUDN2TB" TO LS-ASMODULE
663300       CALL LS-ASMODULE
663400            USING ASCA-COMMAREA
663500                  AS-REQUEST-OPTIONS
663600                  SOURCE-STRING
663700                  TEMPLATE-COUNT
663800                  TEMPLATE-25
663900                  AS5CTOK-OCTOKEN
664000     END-IF
664100
664200     MOVE ZERO TO LS-ENCLAVE-RC
664300     MOVE "CEE3GRC" TO LS-LEMODULE
664400     CALL LS-LEMODULE
664500          USING LS-ENCLAVE-RC
664600                OMITTED
664700     IF LS-ENCLAVE-RC > ZERO
664800       DISPLAY WS-PGMID
664900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
665000     END-IF
665100
665200     IF AS5CTOK-SEVNBR > ZERO
665300       DISPLAY WS-PGMID
665400            " RETURN CODE: " AS5CTOK-SEVNBR
665500            " MESSAGE NBR: " AS5CTOK-MSGNBR
665600     END-IF
665700
665800     DISPLAY WS-PGMID
665900          " TEST CASE 090.P - NBR-2-WRD (ZD -10200)"
666000     DISPLAY WS-PGMID
666100          " MIXED CASE / NO CASE"
666200     DISPLAY WS-PGMID
666300          " SOURCE:" SRC-TXT
666400     DISPLAY WS-PGMID
666500          " OUTPUT LEN (33):" TMPLT-25-LEN
666600     DISPLAY WS-PGMID
666700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
666800     DISPLAY WS-PGMID
666900          " "
667000          TMPLT-25-TXT-Z
667100     DISPLAY " "
667200     SKIP2
667300*    * ------------------------------------------------------- *
667400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
667500*    *   FORMAT: WORD, CURRENCY, CHECK
667600*    * ------------------------------------------------------- *
667700     SKIP1
667800     MOVE ZERO TO RO-START
667900                  RO-COUNT
668000                  RO-PSA-LEN
668100     SET RO-FLAG-NONE  TO TRUE
668200*    SET NUMBER TO CURRENCY CONVERSION
668300     MOVE X'10' TO RO-OPTION-FLAG
668400     MOVE +0   TO RO-COUNT
668500     MOVE WS-SOURCE-STRING-25 TO SOURCE-STRING
668600*    -10200             9(5)
668700     MOVE +1   TO TEMPLATE-COUNT
668800     MOVE ZERO TO TMPLT-25-LEN
668900     MOVE LOW-VALUE TO TMPLT-25-TXT
669000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
669100     IF PACKAGE-CALL
669200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
669300       CONTINUE
669400     ELSE
669500       MOVE "ASUDN2TB" TO LS-ASMODULE
669600       CALL LS-ASMODULE
669700            USING ASCA-COMMAREA
669800                  AS-REQUEST-OPTIONS
669900                  SOURCE-STRING
670000                  TEMPLATE-COUNT
670100                  TEMPLATE-25
670200                  AS5CTOK-OCTOKEN
670300     END-IF
670400
670500     MOVE ZERO TO LS-ENCLAVE-RC
670600     MOVE "CEE3GRC" TO LS-LEMODULE
670700     CALL LS-LEMODULE
670800          USING LS-ENCLAVE-RC
670900                OMITTED
671000     IF LS-ENCLAVE-RC > ZERO
671100       DISPLAY WS-PGMID
671200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
671300     END-IF
671400
671500     IF AS5CTOK-SEVNBR > ZERO
671600       DISPLAY WS-PGMID
671700            " RETURN CODE: " AS5CTOK-SEVNBR
671800            " MESSAGE NBR: " AS5CTOK-MSGNBR
671900     END-IF
672000
672100     DISPLAY WS-PGMID
672200          " TEST CASE 090.Q - NBR-2-CUR (ZD -10200)"
672300     DISPLAY WS-PGMID
672400          " MIXED CASE / NO CASE"
672500     DISPLAY WS-PGMID
672600          " SOURCE:" SRC-TXT
672700     DISPLAY WS-PGMID
672800          " OUTPUT LEN (41):" TMPLT-25-LEN
672900     DISPLAY WS-PGMID
673000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
673100     DISPLAY WS-PGMID
673200          " "
673300          TMPLT-25-TXT-Z
673400     DISPLAY " "
673500     SKIP2
673600*    * ------------------------------------------------------- *
673700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
673800*    *   FORMAT: WORD, CURRENCY, CHECK
673900*    * ------------------------------------------------------- *
674000     SKIP1
674100     MOVE ZERO TO RO-START
674200                  RO-COUNT
674300                  RO-PSA-LEN
674400     SET RO-FLAG-NONE  TO TRUE
674500     MOVE +0   TO RO-COUNT
674600     MOVE WS-SOURCE-STRING-25 TO SOURCE-STRING
674700*    -10200             9(5)
674800     MOVE +1   TO TEMPLATE-COUNT
674900     MOVE ZERO TO TMPLT-25-LEN
675000     MOVE LOW-VALUE TO TMPLT-25-TXT
675100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
675200     IF PACKAGE-CALL
675300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
675400       CONTINUE
675500     ELSE
675600       MOVE "ASUDN2TB" TO LS-ASMODULE
675700       CALL LS-ASMODULE
675800            USING ASCA-COMMAREA
675900                  AS-REQUEST-OPTIONS
676000                  SOURCE-STRING
676100                  TEMPLATE-COUNT
676200                  TEMPLATE-25
676300                  AS5CTOK-OCTOKEN
676400     END-IF
676500
676600     MOVE ZERO TO LS-ENCLAVE-RC
676700     MOVE "CEE3GRC" TO LS-LEMODULE
676800     CALL LS-LEMODULE
676900          USING LS-ENCLAVE-RC
677000                OMITTED
677100     IF LS-ENCLAVE-RC > ZERO
677200       DISPLAY WS-PGMID
677300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
677400     END-IF
677500
677600     IF AS5CTOK-SEVNBR > ZERO
677700       DISPLAY WS-PGMID
677800            " RETURN CODE: " AS5CTOK-SEVNBR
677900            " MESSAGE NBR: " AS5CTOK-MSGNBR
678000     END-IF
678100
678200     DISPLAY WS-PGMID
678300          " TEST CASE 090.R - NBR-2-CHK (ZD -10200)"
678400     DISPLAY WS-PGMID
678500          " MIXED CASE / NO CASE"
678600     DISPLAY WS-PGMID
678700          " SOURCE:" SRC-TXT
678800     DISPLAY WS-PGMID
678900          " OUTPUT LEN (0):" TMPLT-25-LEN
679000     DISPLAY WS-PGMID
679100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
679200     DISPLAY WS-PGMID
679300          " "
679400          TMPLT-25-TXT-Z
679500     DISPLAY " "
679600     SKIP2
679700*    * ------------------------------------------------------- *
679800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
679900*    *   FORMAT: WORD, CURRENCY, CHECK
680000*    * ------------------------------------------------------- *
680100     SKIP1
680200     MOVE ZERO TO RO-START
680300                  RO-COUNT
680400                  RO-PSA-LEN
680500     SET RO-FLAG-NONE  TO TRUE
680600*    SET NUMBER TO WORD CONVERSION
680700     MOVE X'20' TO RO-OPTION-FLAG
680800     MOVE +2   TO RO-COUNT
680900     MOVE WS-SOURCE-STRING-34 TO SOURCE-STRING
681000*    0.75          9(3)V9(2)
681100     MOVE +1   TO TEMPLATE-COUNT
681200     MOVE ZERO TO TMPLT-25-LEN
681300     MOVE LOW-VALUE TO TMPLT-25-TXT
681400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
681500     IF PACKAGE-CALL
681600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
681700       CONTINUE
681800     ELSE
681900       MOVE "ASUDN2TB" TO LS-ASMODULE
682000       CALL LS-ASMODULE
682100            USING ASCA-COMMAREA
682200                  AS-REQUEST-OPTIONS
682300                  SOURCE-STRING
682400                  TEMPLATE-COUNT
682500                  TEMPLATE-25
682600                  AS5CTOK-OCTOKEN
682700     END-IF
682800
682900     MOVE ZERO TO LS-ENCLAVE-RC
683000     MOVE "CEE3GRC" TO LS-LEMODULE
683100     CALL LS-LEMODULE
683200          USING LS-ENCLAVE-RC
683300                OMITTED
683400     IF LS-ENCLAVE-RC > ZERO
683500       DISPLAY WS-PGMID
683600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
683700     END-IF
683800
683900     IF AS5CTOK-SEVNBR > ZERO
684000       DISPLAY WS-PGMID
684100            " RETURN CODE: " AS5CTOK-SEVNBR
684200            " MESSAGE NBR: " AS5CTOK-MSGNBR
684300     END-IF
684400
684500     DISPLAY WS-PGMID
684600          " TEST CASE 090.S - NBR-2-WRD (ZD 0.75)"
684700     DISPLAY WS-PGMID
684800          " MIXED CASE / NO CASE"
684900     DISPLAY WS-PGMID
685000          " SOURCE:" SRC-TXT
685100     DISPLAY WS-PGMID
685200          " OUTPUT LEN (32):" TMPLT-25-LEN
685300     DISPLAY WS-PGMID
685400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
685500     DISPLAY WS-PGMID
685600          " "
685700          TMPLT-25-TXT-Z
685800     DISPLAY " "
685900     SKIP2
686000*    * ------------------------------------------------------- *
686100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
686200*    *   FORMAT: WORD, CURRENCY, CHECK
686300*    * ------------------------------------------------------- *
686400     SKIP1
686500     MOVE ZERO TO RO-START
686600                  RO-COUNT
686700                  RO-PSA-LEN
686800     SET RO-FLAG-NONE  TO TRUE
686900*    SET NUMBER TO CURRENCY CONVERSION
687000     MOVE X'10' TO RO-OPTION-FLAG
687100     MOVE +2   TO RO-COUNT
687200     MOVE WS-SOURCE-STRING-34 TO SOURCE-STRING
687300*    0.75          9(3)V9(2)
687400     MOVE +1   TO TEMPLATE-COUNT
687500     MOVE ZERO TO TMPLT-25-LEN
687600     MOVE LOW-VALUE TO TMPLT-25-TXT
687700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
687800     IF PACKAGE-CALL
687900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
688000       CONTINUE
688100     ELSE
688200       MOVE "ASUDN2TB" TO LS-ASMODULE
688300       CALL LS-ASMODULE
688400            USING ASCA-COMMAREA
688500                  AS-REQUEST-OPTIONS
688600                  SOURCE-STRING
688700                  TEMPLATE-COUNT
688800                  TEMPLATE-25
688900                  AS5CTOK-OCTOKEN
689000     END-IF
689100
689200     MOVE ZERO TO LS-ENCLAVE-RC
689300     MOVE "CEE3GRC" TO LS-LEMODULE
689400     CALL LS-LEMODULE
689500          USING LS-ENCLAVE-RC
689600                OMITTED
689700     IF LS-ENCLAVE-RC > ZERO
689800       DISPLAY WS-PGMID
689900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
690000     END-IF
690100
690200     IF AS5CTOK-SEVNBR > ZERO
690300       DISPLAY WS-PGMID
690400            " RETURN CODE: " AS5CTOK-SEVNBR
690500            " MESSAGE NBR: " AS5CTOK-MSGNBR
690600     END-IF
690700
690800     DISPLAY WS-PGMID
690900          " TEST CASE 090.T - NBR-2-CUR (ZD 0.75)"
691000     DISPLAY WS-PGMID
691100          " MIXED CASE / NO CASE"
691200     DISPLAY WS-PGMID
691300          " SOURCE:" SRC-TXT
691400     DISPLAY WS-PGMID
691500          " OUTPUT LEN (35):" TMPLT-25-LEN
691600     DISPLAY WS-PGMID
691700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
691800     DISPLAY WS-PGMID
691900          " "
692000          TMPLT-25-TXT-Z
692100     DISPLAY " "
692200     SKIP2
692300*    * ------------------------------------------------------- *
692400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
692500*    *   FORMAT: WORD, CURRENCY, CHECK
692600*    * ------------------------------------------------------- *
692700     SKIP1
692800     MOVE ZERO TO RO-START
692900                  RO-COUNT
693000                  RO-PSA-LEN
693100     SET RO-FLAG-NONE  TO TRUE
693200     MOVE +2   TO RO-COUNT
693300     MOVE WS-SOURCE-STRING-34 TO SOURCE-STRING
693400*    0.75          9(3)V9(2)
693500     MOVE +1   TO TEMPLATE-COUNT
693600     MOVE ZERO TO TMPLT-25-LEN
693700     MOVE LOW-VALUE TO TMPLT-25-TXT
693800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
693900     IF PACKAGE-CALL
694000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
694100       CONTINUE
694200     ELSE
694300       MOVE "ASUDN2TB" TO LS-ASMODULE
694400       CALL LS-ASMODULE
694500            USING ASCA-COMMAREA
694600                  AS-REQUEST-OPTIONS
694700                  SOURCE-STRING
694800                  TEMPLATE-COUNT
694900                  TEMPLATE-25
695000                  AS5CTOK-OCTOKEN
695100     END-IF
695200
695300     MOVE ZERO TO LS-ENCLAVE-RC
695400     MOVE "CEE3GRC" TO LS-LEMODULE
695500     CALL LS-LEMODULE
695600          USING LS-ENCLAVE-RC
695700                OMITTED
695800     IF LS-ENCLAVE-RC > ZERO
695900       DISPLAY WS-PGMID
696000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
696100     END-IF
696200
696300     IF AS5CTOK-SEVNBR > ZERO
696400       DISPLAY WS-PGMID
696500            " RETURN CODE: " AS5CTOK-SEVNBR
696600            " MESSAGE NBR: " AS5CTOK-MSGNBR
696700     END-IF
696800
696900     DISPLAY WS-PGMID
697000          " TEST CASE 090.U - NBR-2-CHK (ZD 0.75)"
697100     DISPLAY WS-PGMID
697200          " MIXED CASE / NO CASE"
697300     DISPLAY WS-PGMID
697400          " SOURCE:" SRC-TXT
697500     DISPLAY WS-PGMID
697600          " OUTPUT LEN (23):" TMPLT-25-LEN
697700     DISPLAY WS-PGMID
697800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
697900     DISPLAY WS-PGMID
698000          " "
698100          TMPLT-25-TXT-Z
698200     DISPLAY " "
698300     SKIP2
698400     CONTINUE.
698500 TEST-CASE-091.
698600
698700     IF NOT (TEST-CASE = "ALL" OR "091")
698800       GO TO TEST-CASE-092
698900     END-IF
699000*    * ------------------------------------------------------- *
699100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
699200*    *   FORMAT: WORD, CURRENCY, CHECK
699300*    * ------------------------------------------------------- *
699400     SKIP1
699500     MOVE ZERO TO RO-START
699600                  RO-COUNT
699700                  RO-PSA-LEN
699800     SET RO-FLAG-NONE  TO TRUE
699900*    SET NUMBER TO WORD CONVERSION
700000     MOVE X'20' TO RO-OPTION-FLAG
700100     MOVE +2   TO RO-COUNT
700200     MOVE WS-SOURCE-STRING-26 TO SOURCE-STRING
700300*    132132177     9(9)V99
700400     MOVE +1   TO TEMPLATE-COUNT
700500     MOVE ZERO TO TMPLT-25-LEN
700600     MOVE LOW-VALUE TO TMPLT-25-TXT
700700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
700800     IF PACKAGE-CALL
700900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
701000       CONTINUE
701100     ELSE
701200       MOVE "ASUDN2TB" TO LS-ASMODULE
701300       CALL LS-ASMODULE
701400            USING ASCA-COMMAREA
701500                  AS-REQUEST-OPTIONS
701600                  SOURCE-STRING
701700                  TEMPLATE-COUNT
701800                  TEMPLATE-25
701900                  AS5CTOK-OCTOKEN
702000     END-IF
702100
702200     MOVE ZERO TO LS-ENCLAVE-RC
702300     MOVE "CEE3GRC" TO LS-LEMODULE
702400     CALL LS-LEMODULE
702500          USING LS-ENCLAVE-RC
702600                OMITTED
702700     IF LS-ENCLAVE-RC > ZERO
702800       DISPLAY WS-PGMID
702900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
703000     END-IF
703100
703200     IF AS5CTOK-SEVNBR > ZERO
703300       DISPLAY WS-PGMID
703400            " RETURN CODE: " AS5CTOK-SEVNBR
703500            " MESSAGE NBR: " AS5CTOK-MSGNBR
703600     END-IF
703700
703800     DISPLAY WS-PGMID
703900          " TEST CASE 091.A - NBR-2-WRD (PD 1321321.77)"
704000     DISPLAY WS-PGMID
704100          " MIXED CASE / NO CASE"
704200     DISPLAY WS-PGMID
704300          " SOURCE:" SRC-TXT
704400     DISPLAY WS-PGMID
704500          " OUTPUT LEN (99):" TMPLT-25-LEN
704600     DISPLAY WS-PGMID
704700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
704800     DISPLAY WS-PGMID
704900          " "
705000          TMPLT-25-TXT-Z
705100     DISPLAY " "
705200     SKIP2
705300*    * ------------------------------------------------------- *
705400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
705500*    *   FORMAT: WORD, CURRENCY, CHECK
705600*    * ------------------------------------------------------- *
705700     SKIP1
705800     MOVE ZERO TO RO-START
705900                  RO-COUNT
706000                  RO-PSA-LEN
706100     SET RO-FLAG-NONE  TO TRUE
706200*    SET NUMBER TO CURRENCY CONVERSION
706300     MOVE X'10' TO RO-OPTION-FLAG
706400     MOVE +2   TO RO-COUNT
706500     MOVE WS-SOURCE-STRING-26 TO SOURCE-STRING
706600*    132132177     9(9)V99
706700     MOVE +1   TO TEMPLATE-COUNT
706800     MOVE ZERO TO TMPLT-25-LEN
706900     MOVE LOW-VALUE TO TMPLT-25-TXT
707000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
707100     IF PACKAGE-CALL
707200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
707300       CONTINUE
707400     ELSE
707500       MOVE "ASUDN2TB" TO LS-ASMODULE
707600       CALL LS-ASMODULE
707700            USING ASCA-COMMAREA
707800                  AS-REQUEST-OPTIONS
707900                  SOURCE-STRING
708000                  TEMPLATE-COUNT
708100                  TEMPLATE-25
708200                  AS5CTOK-OCTOKEN
708300     END-IF
708400
708500     MOVE ZERO TO LS-ENCLAVE-RC
708600     MOVE "CEE3GRC" TO LS-LEMODULE
708700     CALL LS-LEMODULE
708800          USING LS-ENCLAVE-RC
708900                OMITTED
709000     IF LS-ENCLAVE-RC > ZERO
709100       DISPLAY WS-PGMID
709200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
709300     END-IF
709400
709500     IF AS5CTOK-SEVNBR > ZERO
709600       DISPLAY WS-PGMID
709700            " RETURN CODE: " AS5CTOK-SEVNBR
709800            " MESSAGE NBR: " AS5CTOK-MSGNBR
709900     END-IF
710000
710100     DISPLAY WS-PGMID
710200          " TEST CASE 091.B - NBR-2-CUR (PD 1321321.77)"
710300     DISPLAY WS-PGMID
710400          " MIXED CASE / NO CASE"
710500     DISPLAY WS-PGMID
710600          " SOURCE:" SRC-TXT
710700     DISPLAY WS-PGMID
710800          " OUTPUT LEN (102):" TMPLT-25-LEN
710900     DISPLAY WS-PGMID
711000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
711100     DISPLAY WS-PGMID
711200          " "
711300          TMPLT-25-TXT-Z
711400     DISPLAY " "
711500     SKIP2
711600*    * ------------------------------------------------------- *
711700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
711800*    *   FORMAT: WORD, CURRENCY, CHECK
711900*    * ------------------------------------------------------- *
712000     SKIP1
712100     MOVE ZERO TO RO-START
712200                  RO-COUNT
712300                  RO-PSA-LEN
712400     SET RO-FLAG-NONE  TO TRUE
712500     MOVE +2   TO RO-COUNT
712600     MOVE WS-SOURCE-STRING-26 TO SOURCE-STRING
712700*    132132177     9(9)V99
712800     MOVE +1   TO TEMPLATE-COUNT
712900     MOVE ZERO TO TMPLT-25-LEN
713000     MOVE LOW-VALUE TO TMPLT-25-TXT
713100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
713200     IF PACKAGE-CALL
713300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
713400       CONTINUE
713500     ELSE
713600       MOVE "ASUDN2TB" TO LS-ASMODULE
713700       CALL LS-ASMODULE
713800            USING ASCA-COMMAREA
713900                  AS-REQUEST-OPTIONS
714000                  SOURCE-STRING
714100                  TEMPLATE-COUNT
714200                  TEMPLATE-25
714300                  AS5CTOK-OCTOKEN
714400     END-IF
714500
714600     MOVE ZERO TO LS-ENCLAVE-RC
714700     MOVE "CEE3GRC" TO LS-LEMODULE
714800     CALL LS-LEMODULE
714900          USING LS-ENCLAVE-RC
715000                OMITTED
715100     IF LS-ENCLAVE-RC > ZERO
715200       DISPLAY WS-PGMID
715300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
715400     END-IF
715500
715600     IF AS5CTOK-SEVNBR > ZERO
715700       DISPLAY WS-PGMID
715800            " RETURN CODE: " AS5CTOK-SEVNBR
715900            " MESSAGE NBR: " AS5CTOK-MSGNBR
716000     END-IF
716100
716200     DISPLAY WS-PGMID
716300          " TEST CASE 091.C - NBR-2-CHK (PD 1321321.77)"
716400     DISPLAY WS-PGMID
716500          " MIXED CASE / NO CASE"
716600     DISPLAY WS-PGMID
716700          " SOURCE:" SRC-TXT
716800     DISPLAY WS-PGMID
716900          " OUTPUT LEN (89):" TMPLT-25-LEN
717000     DISPLAY WS-PGMID
717100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
717200     DISPLAY WS-PGMID
717300          " "
717400          TMPLT-25-TXT-Z
717500     DISPLAY " "
717600     SKIP2
717700*    * ------------------------------------------------------- *
717800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
717900*    *   FORMAT: WORD, CURRENCY, CHECK
718000*    * ------------------------------------------------------- *
718100     SKIP1
718200     MOVE ZERO TO RO-START
718300                  RO-COUNT
718400                  RO-PSA-LEN
718500     SET RO-FLAG-NONE  TO TRUE
718600*    SET NUMBER TO WORD CONVERSION
718700     MOVE X'20' TO RO-OPTION-FLAG
718800     MOVE +3   TO RO-COUNT
718900     MOVE WS-SOURCE-STRING-27 TO SOURCE-STRING
719000*    1321321888    9(8)V9(3)
719100     MOVE +1   TO TEMPLATE-COUNT
719200     MOVE ZERO TO TMPLT-25-LEN
719300     MOVE LOW-VALUE TO TMPLT-25-TXT
719400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
719500     IF PACKAGE-CALL
719600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
719700       CONTINUE
719800     ELSE
719900       MOVE "ASUDN2TB" TO LS-ASMODULE
720000       CALL LS-ASMODULE
720100            USING ASCA-COMMAREA
720200                  AS-REQUEST-OPTIONS
720300                  SOURCE-STRING
720400                  TEMPLATE-COUNT
720500                  TEMPLATE-25
720600                  AS5CTOK-OCTOKEN
720700     END-IF
720800
720900     MOVE ZERO TO LS-ENCLAVE-RC
721000     MOVE "CEE3GRC" TO LS-LEMODULE
721100     CALL LS-LEMODULE
721200          USING LS-ENCLAVE-RC
721300                OMITTED
721400     IF LS-ENCLAVE-RC > ZERO
721500       DISPLAY WS-PGMID
721600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
721700     END-IF
721800
721900     IF AS5CTOK-SEVNBR > ZERO
722000       DISPLAY WS-PGMID
722100            " RETURN CODE: " AS5CTOK-SEVNBR
722200            " MESSAGE NBR: " AS5CTOK-MSGNBR
722300     END-IF
722400
722500     DISPLAY WS-PGMID
722600          " TEST CASE 091.D - NBR-2-WRD (PD 1321321.888)"
722700     DISPLAY WS-PGMID
722800          " MIXED CASE / NO CASE"
722900     DISPLAY WS-PGMID
723000          " SOURCE:" SRC-TXT
723100     DISPLAY WS-PGMID
723200          " OUTPUT LEN (113):" TMPLT-25-LEN
723300     DISPLAY WS-PGMID
723400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
723500     DISPLAY WS-PGMID
723600          " "
723700          TMPLT-25-TXT-Z
723800     DISPLAY " "
723900     SKIP2
724000*    * ------------------------------------------------------- *
724100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
724200*    *   FORMAT: WORD, CURRENCY, CHECK
724300*    * ------------------------------------------------------- *
724400     SKIP1
724500     MOVE ZERO TO RO-START
724600                  RO-COUNT
724700                  RO-PSA-LEN
724800     SET RO-FLAG-NONE  TO TRUE
724900*    SET NUMBER TO CURRENCY CONVERSION
725000     MOVE X'10' TO RO-OPTION-FLAG
725100     MOVE +3   TO RO-COUNT
725200     MOVE WS-SOURCE-STRING-27 TO SOURCE-STRING
725300*    1321321888    9(8)V9(3)
725400     MOVE +1   TO TEMPLATE-COUNT
725500     MOVE ZERO TO TMPLT-25-LEN
725600     MOVE LOW-VALUE TO TMPLT-25-TXT
725700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
725800     IF PACKAGE-CALL
725900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
726000       CONTINUE
726100     ELSE
726200       MOVE "ASUDN2TB" TO LS-ASMODULE
726300       CALL LS-ASMODULE
726400            USING ASCA-COMMAREA
726500                  AS-REQUEST-OPTIONS
726600                  SOURCE-STRING
726700                  TEMPLATE-COUNT
726800                  TEMPLATE-25
726900                  AS5CTOK-OCTOKEN
727000     END-IF
727100
727200     MOVE ZERO TO LS-ENCLAVE-RC
727300     MOVE "CEE3GRC" TO LS-LEMODULE
727400     CALL LS-LEMODULE
727500          USING LS-ENCLAVE-RC
727600                OMITTED
727700     IF LS-ENCLAVE-RC > ZERO
727800       DISPLAY WS-PGMID
727900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
728000     END-IF
728100
728200     IF AS5CTOK-SEVNBR > ZERO
728300       DISPLAY WS-PGMID
728400            " RETURN CODE: " AS5CTOK-SEVNBR
728500            " MESSAGE NBR: " AS5CTOK-MSGNBR
728600     END-IF
728700
728800     DISPLAY WS-PGMID
728900          " TEST CASE 091.E - NBR-2-CUR (PD 1321321.888)"
729000     DISPLAY WS-PGMID
729100          " MIXED CASE / NO CASE"
729200     DISPLAY WS-PGMID
729300          " SOURCE:" SRC-TXT
729400     DISPLAY WS-PGMID
729500          " OUTPUT LEN (0):" TMPLT-25-LEN
729600     DISPLAY WS-PGMID
729700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
729800     DISPLAY WS-PGMID
729900          " "
730000          TMPLT-25-TXT-Z
730100     DISPLAY " "
730200     SKIP2
730300*    * ------------------------------------------------------- *
730400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
730500*    *   FORMAT: WORD, CURRENCY, CHECK
730600*    * ------------------------------------------------------- *
730700     SKIP1
730800     MOVE ZERO TO RO-START
730900                  RO-COUNT
731000                  RO-PSA-LEN
731100     SET RO-FLAG-NONE  TO TRUE
731200     MOVE +3   TO RO-COUNT
731300     MOVE WS-SOURCE-STRING-27 TO SOURCE-STRING
731400*    1321321888    9(8)V9(3)
731500     MOVE +1   TO TEMPLATE-COUNT
731600     MOVE ZERO TO TMPLT-25-LEN
731700     MOVE LOW-VALUE TO TMPLT-25-TXT
731800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
731900     IF PACKAGE-CALL
732000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
732100       CONTINUE
732200     ELSE
732300       MOVE "ASUDN2TB" TO LS-ASMODULE
732400       CALL LS-ASMODULE
732500            USING ASCA-COMMAREA
732600                  AS-REQUEST-OPTIONS
732700                  SOURCE-STRING
732800                  TEMPLATE-COUNT
732900                  TEMPLATE-25
733000                  AS5CTOK-OCTOKEN
733100     END-IF
733200
733300     MOVE ZERO TO LS-ENCLAVE-RC
733400     MOVE "CEE3GRC" TO LS-LEMODULE
733500     CALL LS-LEMODULE
733600          USING LS-ENCLAVE-RC
733700                OMITTED
733800     IF LS-ENCLAVE-RC > ZERO
733900       DISPLAY WS-PGMID
734000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
734100     END-IF
734200
734300     IF AS5CTOK-SEVNBR > ZERO
734400       DISPLAY WS-PGMID
734500            " RETURN CODE: " AS5CTOK-SEVNBR
734600            " MESSAGE NBR: " AS5CTOK-MSGNBR
734700     END-IF
734800
734900     DISPLAY WS-PGMID
735000          " TEST CASE 091.F - NBR-2-CHK (PD 1321321.888)"
735100     DISPLAY WS-PGMID
735200          " MIXED CASE / NO CASE"
735300     DISPLAY WS-PGMID
735400          " SOURCE:" SRC-TXT
735500     DISPLAY WS-PGMID
735600          " OUTPUT LEN (89):" TMPLT-25-LEN
735700     DISPLAY WS-PGMID
735800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
735900     DISPLAY WS-PGMID
736000          " "
736100          TMPLT-25-TXT-Z
736200     DISPLAY " "
736300     SKIP2
736400*    * ------------------------------------------------------- *
736500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
736600*    *   FORMAT: WORD, CURRENCY, CHECK
736700*    * ------------------------------------------------------- *
736800     SKIP1
736900     MOVE ZERO TO RO-START
737000                  RO-COUNT
737100                  RO-PSA-LEN
737200     SET RO-FLAG-NONE  TO TRUE
737300*    SET NUMBER TO WORD CONVERSION
737400     MOVE X'20' TO RO-OPTION-FLAG
737500     MOVE +8   TO RO-COUNT
737600     MOVE WS-SOURCE-STRING-28 TO SOURCE-STRING
737700*    132132132187654321    9(10)V9(8)
737800     MOVE +1   TO TEMPLATE-COUNT
737900     MOVE ZERO TO TMPLT-25-LEN
738000     MOVE LOW-VALUE TO TMPLT-25-TXT
738100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
738200     IF PACKAGE-CALL
738300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
738400       CONTINUE
738500     ELSE
738600       MOVE "ASUDN2TB" TO LS-ASMODULE
738700       CALL LS-ASMODULE
738800            USING ASCA-COMMAREA
738900                  AS-REQUEST-OPTIONS
739000                  SOURCE-STRING
739100                  TEMPLATE-COUNT
739200                  TEMPLATE-25
739300                  AS5CTOK-OCTOKEN
739400     END-IF
739500
739600     MOVE ZERO TO LS-ENCLAVE-RC
739700     MOVE "CEE3GRC" TO LS-LEMODULE
739800     CALL LS-LEMODULE
739900          USING LS-ENCLAVE-RC
740000                OMITTED
740100     IF LS-ENCLAVE-RC > ZERO
740200       DISPLAY WS-PGMID
740300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
740400     END-IF
740500
740600     IF AS5CTOK-SEVNBR > ZERO
740700       DISPLAY WS-PGMID
740800            " RETURN CODE: " AS5CTOK-SEVNBR
740900            " MESSAGE NBR: " AS5CTOK-MSGNBR
741000     END-IF
741100
741200     DISPLAY WS-PGMID
741300          " TEST CASE 091.G - NBR-2-WRD (PD 1321321321.87654321)"
741400     DISPLAY WS-PGMID
741500          " MIXED CASE / NO CASE"
741600     DISPLAY WS-PGMID
741700          " SOURCE:" SRC-TXT
741800     DISPLAY WS-PGMID
741900          " OUTPUT LEN (204):" TMPLT-25-LEN
742000     DISPLAY WS-PGMID
742100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
742200     DISPLAY WS-PGMID
742300          " "
742400          TMPLT-25-TXT-Z
742500     DISPLAY " "
742600     SKIP2
742700*    * ------------------------------------------------------- *
742800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
742900*    *   FORMAT: WORD, CURRENCY, CHECK
743000*    * ------------------------------------------------------- *
743100     SKIP1
743200     MOVE ZERO TO RO-START
743300                  RO-COUNT
743400                  RO-PSA-LEN
743500     SET RO-FLAG-NONE  TO TRUE
743600*    SET NUMBER TO CURRENCY CONVERSION
743700     MOVE X'10' TO RO-OPTION-FLAG
743800     MOVE +8   TO RO-COUNT
743900     MOVE WS-SOURCE-STRING-28 TO SOURCE-STRING
744000*    132132132187654321   9(10)V9(8)
744100     MOVE +1   TO TEMPLATE-COUNT
744200     MOVE ZERO TO TMPLT-25-LEN
744300     MOVE LOW-VALUE TO TMPLT-25-TXT
744400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
744500     IF PACKAGE-CALL
744600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
744700       CONTINUE
744800     ELSE
744900       MOVE "ASUDN2TB" TO LS-ASMODULE
745000       CALL LS-ASMODULE
745100            USING ASCA-COMMAREA
745200                  AS-REQUEST-OPTIONS
745300                  SOURCE-STRING
745400                  TEMPLATE-COUNT
745500                  TEMPLATE-25
745600                  AS5CTOK-OCTOKEN
745700     END-IF
745800
745900     MOVE ZERO TO LS-ENCLAVE-RC
746000     MOVE "CEE3GRC" TO LS-LEMODULE
746100     CALL LS-LEMODULE
746200          USING LS-ENCLAVE-RC
746300                OMITTED
746400     IF LS-ENCLAVE-RC > ZERO
746500       DISPLAY WS-PGMID
746600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
746700     END-IF
746800
746900     IF AS5CTOK-SEVNBR > ZERO
747000       DISPLAY WS-PGMID
747100            " RETURN CODE: " AS5CTOK-SEVNBR
747200            " MESSAGE NBR: " AS5CTOK-MSGNBR
747300     END-IF
747400
747500     DISPLAY WS-PGMID
747600          " TEST CASE 091.H - NBR-2-CUR (PD 1321321321.87654321)"
747700     DISPLAY WS-PGMID
747800          " MIXED CASE / NO CASE"
747900     DISPLAY WS-PGMID
748000          " SOURCE:" SRC-TXT
748100     DISPLAY WS-PGMID
748200          " OUTPUT LEN (0):" TMPLT-25-LEN
748300     DISPLAY WS-PGMID
748400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
748500     DISPLAY WS-PGMID
748600          " "
748700          TMPLT-25-TXT-Z
748800     DISPLAY " "
748900     SKIP2
749000*    * ------------------------------------------------------- *
749100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
749200*    *   FORMAT: WORD, CURRENCY, CHECK
749300*    * ------------------------------------------------------- *
749400     SKIP1
749500     MOVE ZERO TO RO-START
749600                  RO-COUNT
749700                  RO-PSA-LEN
749800     SET RO-FLAG-NONE  TO TRUE
749900     MOVE +8   TO RO-COUNT
750000     MOVE WS-SOURCE-STRING-28 TO SOURCE-STRING
750100*    132132132187654321    9(10)V9(8)
750200     MOVE +1   TO TEMPLATE-COUNT
750300     MOVE ZERO TO TMPLT-25-LEN
750400     MOVE LOW-VALUE TO TMPLT-25-TXT
750500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
750600     IF PACKAGE-CALL
750700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
750800       CONTINUE
750900     ELSE
751000       MOVE "ASUDN2TB" TO LS-ASMODULE
751100       CALL LS-ASMODULE
751200            USING ASCA-COMMAREA
751300                  AS-REQUEST-OPTIONS
751400                  SOURCE-STRING
751500                  TEMPLATE-COUNT
751600                  TEMPLATE-25
751700                  AS5CTOK-OCTOKEN
751800     END-IF
751900
752000     MOVE ZERO TO LS-ENCLAVE-RC
752100     MOVE "CEE3GRC" TO LS-LEMODULE
752200     CALL LS-LEMODULE
752300          USING LS-ENCLAVE-RC
752400                OMITTED
752500     IF LS-ENCLAVE-RC > ZERO
752600       DISPLAY WS-PGMID
752700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
752800     END-IF
752900
753000     IF AS5CTOK-SEVNBR > ZERO
753100       DISPLAY WS-PGMID
753200            " RETURN CODE: " AS5CTOK-SEVNBR
753300            " MESSAGE NBR: " AS5CTOK-MSGNBR
753400     END-IF
753500
753600     DISPLAY WS-PGMID
753700          " TEST CASE 091.I - NBR-2-CHK (PD 1321321321.87654321)"
753800     DISPLAY WS-PGMID
753900          " MIXED CASE / NO CASE"
754000     DISPLAY WS-PGMID
754100          " SOURCE:" SRC-TXT
754200     DISPLAY WS-PGMID
754300          " OUTPUT LEN (122):" TMPLT-25-LEN
754400     DISPLAY WS-PGMID
754500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
754600     DISPLAY WS-PGMID
754700          " "
754800          TMPLT-25-TXT-Z
754900     DISPLAY " "
755000     SKIP2
755100*    * ------------------------------------------------------- *
755200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
755300*    *   FORMAT: WORD, CURRENCY, CHECK
755400*    * ------------------------------------------------------- *
755500     SKIP1
755600     MOVE ZERO TO RO-START
755700                  RO-COUNT
755800                  RO-PSA-LEN
755900     SET RO-FLAG-NONE  TO TRUE
756000*    SET NUMBER TO WORD CONVERSION
756100     MOVE X'20' TO RO-OPTION-FLAG
756200     MOVE +8   TO RO-COUNT
756300     MOVE WS-SOURCE-STRING-29 TO SOURCE-STRING
756400*    132132132100004321    9(10)V9(8)
756500     MOVE +1   TO TEMPLATE-COUNT
756600     MOVE ZERO TO TMPLT-25-LEN
756700     MOVE LOW-VALUE TO TMPLT-25-TXT
756800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
756900     IF PACKAGE-CALL
757000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
757100       CONTINUE
757200     ELSE
757300       MOVE "ASUDN2TB" TO LS-ASMODULE
757400       CALL LS-ASMODULE
757500            USING ASCA-COMMAREA
757600                  AS-REQUEST-OPTIONS
757700                  SOURCE-STRING
757800                  TEMPLATE-COUNT
757900                  TEMPLATE-25
758000                  AS5CTOK-OCTOKEN
758100     END-IF
758200
758300     MOVE ZERO TO LS-ENCLAVE-RC
758400     MOVE "CEE3GRC" TO LS-LEMODULE
758500     CALL LS-LEMODULE
758600          USING LS-ENCLAVE-RC
758700                OMITTED
758800     IF LS-ENCLAVE-RC > ZERO
758900       DISPLAY WS-PGMID
759000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
759100     END-IF
759200
759300     IF AS5CTOK-SEVNBR > ZERO
759400       DISPLAY WS-PGMID
759500            " RETURN CODE: " AS5CTOK-SEVNBR
759600            " MESSAGE NBR: " AS5CTOK-MSGNBR
759700     END-IF
759800
759900     DISPLAY WS-PGMID
760000          " TEST CASE 091.J - NBR-2-WRD (ZD 1321321321.00004321)"
760100     DISPLAY WS-PGMID
760200          " MIXED CASE / NO CASE"
760300     DISPLAY WS-PGMID
760400          " SOURCE:" SRC-TXT
760500     DISPLAY WS-PGMID
760600          " OUTPUT LEN (165):" TMPLT-25-LEN
760700     DISPLAY WS-PGMID
760800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
760900     DISPLAY WS-PGMID
761000          " "
761100          TMPLT-25-TXT-Z
761200     DISPLAY " "
761300     SKIP2
761400*    * ------------------------------------------------------- *
761500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
761600*    *   FORMAT: WORD, CURRENCY, CHECK
761700*    * ------------------------------------------------------- *
761800     SKIP1
761900     MOVE ZERO TO RO-START
762000                  RO-COUNT
762100                  RO-PSA-LEN
762200     SET RO-FLAG-NONE  TO TRUE
762300*    SET NUMBER TO CURRENCY CONVERSION
762400     MOVE X'10' TO RO-OPTION-FLAG
762500     MOVE +8   TO RO-COUNT
762600     MOVE WS-SOURCE-STRING-29 TO SOURCE-STRING
762700*    132132132100004321   9(10)V9(8)
762800     MOVE +1   TO TEMPLATE-COUNT
762900     MOVE ZERO TO TMPLT-25-LEN
763000     MOVE LOW-VALUE TO TMPLT-25-TXT
763100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
763200     IF PACKAGE-CALL
763300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
763400       CONTINUE
763500     ELSE
763600       MOVE "ASUDN2TB" TO LS-ASMODULE
763700       CALL LS-ASMODULE
763800            USING ASCA-COMMAREA
763900                  AS-REQUEST-OPTIONS
764000                  SOURCE-STRING
764100                  TEMPLATE-COUNT
764200                  TEMPLATE-25
764300                  AS5CTOK-OCTOKEN
764400     END-IF
764500
764600     MOVE ZERO TO LS-ENCLAVE-RC
764700     MOVE "CEE3GRC" TO LS-LEMODULE
764800     CALL LS-LEMODULE
764900          USING LS-ENCLAVE-RC
765000                OMITTED
765100     IF LS-ENCLAVE-RC > ZERO
765200       DISPLAY WS-PGMID
765300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
765400     END-IF
765500
765600     IF AS5CTOK-SEVNBR > ZERO
765700       DISPLAY WS-PGMID
765800            " RETURN CODE: " AS5CTOK-SEVNBR
765900            " MESSAGE NBR: " AS5CTOK-MSGNBR
766000     END-IF
766100
766200     DISPLAY WS-PGMID
766300          " TEST CASE 091.K - NBR-2-CUR (PD 1321321321.00004321)"
766400     DISPLAY WS-PGMID
766500          " MIXED CASE / NO CASE"
766600     DISPLAY WS-PGMID
766700          " SOURCE:" SRC-TXT
766800     DISPLAY WS-PGMID
766900          " OUTPUT LEN (0):" TMPLT-25-LEN
767000     DISPLAY WS-PGMID
767100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
767200     DISPLAY WS-PGMID
767300          " "
767400          TMPLT-25-TXT-Z
767500     DISPLAY " "
767600     SKIP2
767700*    * ------------------------------------------------------- *
767800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
767900*    *   FORMAT: WORD, CURRENCY, CHECK
768000*    * ------------------------------------------------------- *
768100     SKIP1
768200     MOVE ZERO TO RO-START
768300                  RO-COUNT
768400                  RO-PSA-LEN
768500     SET RO-FLAG-NONE  TO TRUE
768600     MOVE +8   TO RO-COUNT
768700     MOVE WS-SOURCE-STRING-29 TO SOURCE-STRING
768800*    132132132100004321    9(10)V9(8)
768900     MOVE +1   TO TEMPLATE-COUNT
769000     MOVE ZERO TO TMPLT-25-LEN
769100     MOVE LOW-VALUE TO TMPLT-25-TXT
769200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
769300     IF PACKAGE-CALL
769400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
769500       CONTINUE
769600     ELSE
769700       MOVE "ASUDN2TB" TO LS-ASMODULE
769800       CALL LS-ASMODULE
769900            USING ASCA-COMMAREA
770000                  AS-REQUEST-OPTIONS
770100                  SOURCE-STRING
770200                  TEMPLATE-COUNT
770300                  TEMPLATE-25
770400                  AS5CTOK-OCTOKEN
770500     END-IF
770600
770700     MOVE ZERO TO LS-ENCLAVE-RC
770800     MOVE "CEE3GRC" TO LS-LEMODULE
770900     CALL LS-LEMODULE
771000          USING LS-ENCLAVE-RC
771100                OMITTED
771200     IF LS-ENCLAVE-RC > ZERO
771300       DISPLAY WS-PGMID
771400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
771500     END-IF
771600
771700     IF AS5CTOK-SEVNBR > ZERO
771800       DISPLAY WS-PGMID
771900            " RETURN CODE: " AS5CTOK-SEVNBR
772000            " MESSAGE NBR: " AS5CTOK-MSGNBR
772100     END-IF
772200
772300     DISPLAY WS-PGMID
772400          " TEST CASE 091.L - NBR-2-CHK (ZD 1321321321.00004321)"
772500     DISPLAY WS-PGMID
772600          " MIXED CASE / NO CASE"
772700     DISPLAY WS-PGMID
772800          " SOURCE:" SRC-TXT
772900     DISPLAY WS-PGMID
773000          " OUTPUT LEN (122):" TMPLT-25-LEN
773100     DISPLAY WS-PGMID
773200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
773300     DISPLAY WS-PGMID
773400          " "
773500          TMPLT-25-TXT-Z
773600     DISPLAY " "
773700     SKIP2
773800*    * ------------------------------------------------------- *
773900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
774000*    *   FORMAT: WORD, CURRENCY, CHECK
774100*    * ------------------------------------------------------- *
774200     SKIP1
774300     MOVE ZERO TO RO-START
774400                  RO-COUNT
774500                  RO-PSA-LEN
774600     SET RO-FLAG-NONE  TO TRUE
774700*    SET NUMBER TO WORD CONVERSION
774800     MOVE X'20' TO RO-OPTION-FLAG
774900     MOVE +6   TO RO-COUNT
775000     MOVE WS-SOURCE-STRING-30 TO SOURCE-STRING
775100*    1000021001000543      9(12)V9(6)
775200     MOVE +1   TO TEMPLATE-COUNT
775300     MOVE ZERO TO TMPLT-25-LEN
775400     MOVE LOW-VALUE TO TMPLT-25-TXT
775500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
775600     IF PACKAGE-CALL
775700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
775800       CONTINUE
775900     ELSE
776000       MOVE "ASUDN2TB" TO LS-ASMODULE
776100       CALL LS-ASMODULE
776200            USING ASCA-COMMAREA
776300                  AS-REQUEST-OPTIONS
776400                  SOURCE-STRING
776500                  TEMPLATE-COUNT
776600                  TEMPLATE-25
776700                  AS5CTOK-OCTOKEN
776800     END-IF
776900
777000     MOVE ZERO TO LS-ENCLAVE-RC
777100     MOVE "CEE3GRC" TO LS-LEMODULE
777200     CALL LS-LEMODULE
777300          USING LS-ENCLAVE-RC
777400                OMITTED
777500     IF LS-ENCLAVE-RC > ZERO
777600       DISPLAY WS-PGMID
777700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
777800     END-IF
777900
778000     IF AS5CTOK-SEVNBR > ZERO
778100       DISPLAY WS-PGMID
778200            " RETURN CODE: " AS5CTOK-SEVNBR
778300            " MESSAGE NBR: " AS5CTOK-MSGNBR
778400     END-IF
778500
778600     DISPLAY WS-PGMID
778700          " TEST CASE 091.M - NBR-2-WRD (PD 1000021001.000543)"
778800     DISPLAY WS-PGMID
778900          " MIXED CASE / NO CASE"
779000     DISPLAY WS-PGMID
779100          " SOURCE:" SRC-TXT
779200     DISPLAY WS-PGMID
779300          " OUTPUT LEN (75):" TMPLT-25-LEN
779400     DISPLAY WS-PGMID
779500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
779600     DISPLAY WS-PGMID
779700          " "
779800          TMPLT-25-TXT-Z
779900     DISPLAY " "
780000     SKIP2
780100*    * ------------------------------------------------------- *
780200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
780300*    *   FORMAT: WORD, CURRENCY, CHECK
780400*    * ------------------------------------------------------- *
780500     SKIP1
780600     MOVE ZERO TO RO-START
780700                  RO-COUNT
780800                  RO-PSA-LEN
780900     SET RO-FLAG-NONE  TO TRUE
781000*    SET NUMBER TO CURRENCY CONVERSION
781100     MOVE X'10' TO RO-OPTION-FLAG
781200     MOVE +6   TO RO-COUNT
781300     MOVE WS-SOURCE-STRING-30 TO SOURCE-STRING
781400*    1000021001000543   9(12)V9(6)
781500     MOVE +1   TO TEMPLATE-COUNT
781600     MOVE ZERO TO TMPLT-25-LEN
781700     MOVE LOW-VALUE TO TMPLT-25-TXT
781800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
781900     IF PACKAGE-CALL
782000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
782100       CONTINUE
782200     ELSE
782300       MOVE "ASUDN2TB" TO LS-ASMODULE
782400       CALL LS-ASMODULE
782500            USING ASCA-COMMAREA
782600                  AS-REQUEST-OPTIONS
782700                  SOURCE-STRING
782800                  TEMPLATE-COUNT
782900                  TEMPLATE-25
783000                  AS5CTOK-OCTOKEN
783100     END-IF
783200
783300     MOVE ZERO TO LS-ENCLAVE-RC
783400     MOVE "CEE3GRC" TO LS-LEMODULE
783500     CALL LS-LEMODULE
783600          USING LS-ENCLAVE-RC
783700                OMITTED
783800     IF LS-ENCLAVE-RC > ZERO
783900       DISPLAY WS-PGMID
784000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
784100     END-IF
784200
784300     IF AS5CTOK-SEVNBR > ZERO
784400       DISPLAY WS-PGMID
784500            " RETURN CODE: " AS5CTOK-SEVNBR
784600            " MESSAGE NBR: " AS5CTOK-MSGNBR
784700     END-IF
784800
784900     DISPLAY WS-PGMID
785000          " TEST CASE 091.N - NBR-2-CUR (PD 1000021001.000543)"
785100     DISPLAY WS-PGMID
785200          " MIXED CASE / NO CASE"
785300     DISPLAY WS-PGMID
785400          " SOURCE:" SRC-TXT
785500     DISPLAY WS-PGMID
785600          " OUTPUT LEN (0):" TMPLT-25-LEN
785700     DISPLAY WS-PGMID
785800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
785900     DISPLAY WS-PGMID
786000          " "
786100          TMPLT-25-TXT-Z
786200     DISPLAY " "
786300     SKIP2
786400*    * ------------------------------------------------------- *
786500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
786600*    *   FORMAT: WORD, CURRENCY, CHECK
786700*    * ------------------------------------------------------- *
786800     SKIP1
786900     MOVE ZERO TO RO-START
787000                  RO-COUNT
787100                  RO-PSA-LEN
787200     SET RO-FLAG-NONE  TO TRUE
787300     MOVE +6   TO RO-COUNT
787400     MOVE WS-SOURCE-STRING-30 TO SOURCE-STRING
787500*    1000021001000543    9(12)V9(6)
787600     MOVE +1   TO TEMPLATE-COUNT
787700     MOVE ZERO TO TMPLT-25-LEN
787800     MOVE LOW-VALUE TO TMPLT-25-TXT
787900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
788000     IF PACKAGE-CALL
788100*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
788200       CONTINUE
788300     ELSE
788400       MOVE "ASUDN2TB" TO LS-ASMODULE
788500       CALL LS-ASMODULE
788600            USING ASCA-COMMAREA
788700                  AS-REQUEST-OPTIONS
788800                  SOURCE-STRING
788900                  TEMPLATE-COUNT
789000                  TEMPLATE-25
789100                  AS5CTOK-OCTOKEN
789200     END-IF
789300
789400     MOVE ZERO TO LS-ENCLAVE-RC
789500     MOVE "CEE3GRC" TO LS-LEMODULE
789600     CALL LS-LEMODULE
789700          USING LS-ENCLAVE-RC
789800                OMITTED
789900     IF LS-ENCLAVE-RC > ZERO
790000       DISPLAY WS-PGMID
790100            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
790200     END-IF
790300
790400     IF AS5CTOK-SEVNBR > ZERO
790500       DISPLAY WS-PGMID
790600            " RETURN CODE: " AS5CTOK-SEVNBR
790700            " MESSAGE NBR: " AS5CTOK-MSGNBR
790800     END-IF
790900
791000     DISPLAY WS-PGMID
791100          " TEST CASE 091.O - NBR-2-CHK (PD 1000021001.000543)"
791200     DISPLAY WS-PGMID
791300          " MIXED CASE / NO CASE"
791400     DISPLAY WS-PGMID
791500          " SOURCE:" SRC-TXT
791600     DISPLAY WS-PGMID
791700          " OUTPUT LEN (54):" TMPLT-25-LEN
791800     DISPLAY WS-PGMID
791900          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
792000     DISPLAY WS-PGMID
792100          " "
792200          TMPLT-25-TXT-Z
792300     DISPLAY " "
792400     SKIP2
792500*    * ------------------------------------------------------- *
792600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
792700*    *   FORMAT: WORD, CURRENCY, CHECK
792800*    * ------------------------------------------------------- *
792900     SKIP1
793000     MOVE ZERO TO RO-START
793100                  RO-COUNT
793200                  RO-PSA-LEN
793300     SET RO-FLAG-NONE  TO TRUE
793400*    SET NUMBER TO WORD CONVERSION
793500     MOVE X'20' TO RO-OPTION-FLAG
793600     MOVE +0   TO RO-COUNT
793700     MOVE WS-SOURCE-STRING-31 TO SOURCE-STRING
793800*    -10200             9(5)
793900     MOVE +1   TO TEMPLATE-COUNT
794000     MOVE ZERO TO TMPLT-25-LEN
794100     MOVE LOW-VALUE TO TMPLT-25-TXT
794200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
794300     IF PACKAGE-CALL
794400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
794500       CONTINUE
794600     ELSE
794700       MOVE "ASUDN2TB" TO LS-ASMODULE
794800       CALL LS-ASMODULE
794900            USING ASCA-COMMAREA
795000                  AS-REQUEST-OPTIONS
795100                  SOURCE-STRING
795200                  TEMPLATE-COUNT
795300                  TEMPLATE-25
795400                  AS5CTOK-OCTOKEN
795500     END-IF
795600
795700     MOVE ZERO TO LS-ENCLAVE-RC
795800     MOVE "CEE3GRC" TO LS-LEMODULE
795900     CALL LS-LEMODULE
796000          USING LS-ENCLAVE-RC
796100                OMITTED
796200     IF LS-ENCLAVE-RC > ZERO
796300       DISPLAY WS-PGMID
796400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
796500     END-IF
796600
796700     IF AS5CTOK-SEVNBR > ZERO
796800       DISPLAY WS-PGMID
796900            " RETURN CODE: " AS5CTOK-SEVNBR
797000            " MESSAGE NBR: " AS5CTOK-MSGNBR
797100     END-IF
797200
797300     DISPLAY WS-PGMID
797400          " TEST CASE 091.P - NBR-2-WRD (PD -10200)"
797500     DISPLAY WS-PGMID
797600          " MIXED CASE / NO CASE"
797700     DISPLAY WS-PGMID
797800          " SOURCE:" SRC-TXT
797900     DISPLAY WS-PGMID
798000          " OUTPUT LEN (33):" TMPLT-25-LEN
798100     DISPLAY WS-PGMID
798200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
798300     DISPLAY WS-PGMID
798400          " "
798500          TMPLT-25-TXT-Z
798600     DISPLAY " "
798700     SKIP2
798800*    * ------------------------------------------------------- *
798900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
799000*    *   FORMAT: WORD, CURRENCY, CHECK
799100*    * ------------------------------------------------------- *
799200     SKIP1
799300     MOVE ZERO TO RO-START
799400                  RO-COUNT
799500                  RO-PSA-LEN
799600     SET RO-FLAG-NONE  TO TRUE
799700*    SET NUMBER TO CURRENCY CONVERSION
799800     MOVE X'10' TO RO-OPTION-FLAG
799900     MOVE +0   TO RO-COUNT
800000     MOVE WS-SOURCE-STRING-31 TO SOURCE-STRING
800100*    -10200             9(5)
800200     MOVE +1   TO TEMPLATE-COUNT
800300     MOVE ZERO TO TMPLT-25-LEN
800400     MOVE LOW-VALUE TO TMPLT-25-TXT
800500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
800600     IF PACKAGE-CALL
800700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
800800       CONTINUE
800900     ELSE
801000       MOVE "ASUDN2TB" TO LS-ASMODULE
801100       CALL LS-ASMODULE
801200            USING ASCA-COMMAREA
801300                  AS-REQUEST-OPTIONS
801400                  SOURCE-STRING
801500                  TEMPLATE-COUNT
801600                  TEMPLATE-25
801700                  AS5CTOK-OCTOKEN
801800     END-IF
801900
802000     MOVE ZERO TO LS-ENCLAVE-RC
802100     MOVE "CEE3GRC" TO LS-LEMODULE
802200     CALL LS-LEMODULE
802300          USING LS-ENCLAVE-RC
802400                OMITTED
802500     IF LS-ENCLAVE-RC > ZERO
802600       DISPLAY WS-PGMID
802700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
802800     END-IF
802900
803000     IF AS5CTOK-SEVNBR > ZERO
803100       DISPLAY WS-PGMID
803200            " RETURN CODE: " AS5CTOK-SEVNBR
803300            " MESSAGE NBR: " AS5CTOK-MSGNBR
803400     END-IF
803500
803600     DISPLAY WS-PGMID
803700          " TEST CASE 091.Q - NBR-2-CUR (PD -10200)"
803800     DISPLAY WS-PGMID
803900          " MIXED CASE / NO CASE"
804000     DISPLAY WS-PGMID
804100          " SOURCE:" SRC-TXT
804200     DISPLAY WS-PGMID
804300          " OUTPUT LEN (41):" TMPLT-25-LEN
804400     DISPLAY WS-PGMID
804500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
804600     DISPLAY WS-PGMID
804700          " "
804800          TMPLT-25-TXT-Z
804900     DISPLAY " "
805000     SKIP2
805100*    * ------------------------------------------------------- *
805200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
805300*    *   FORMAT: WORD, CURRENCY, CHECK
805400*    * ------------------------------------------------------- *
805500     SKIP1
805600     MOVE ZERO TO RO-START
805700                  RO-COUNT
805800                  RO-PSA-LEN
805900     SET RO-FLAG-NONE  TO TRUE
806000     MOVE +0   TO RO-COUNT
806100     MOVE WS-SOURCE-STRING-31 TO SOURCE-STRING
806200*    -10200             9(5)
806300     MOVE +1   TO TEMPLATE-COUNT
806400     MOVE ZERO TO TMPLT-25-LEN
806500     MOVE LOW-VALUE TO TMPLT-25-TXT
806600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
806700     IF PACKAGE-CALL
806800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
806900       CONTINUE
807000     ELSE
807100       MOVE "ASUDN2TB" TO LS-ASMODULE
807200       CALL LS-ASMODULE
807300            USING ASCA-COMMAREA
807400                  AS-REQUEST-OPTIONS
807500                  SOURCE-STRING
807600                  TEMPLATE-COUNT
807700                  TEMPLATE-25
807800                  AS5CTOK-OCTOKEN
807900     END-IF
808000
808100     MOVE ZERO TO LS-ENCLAVE-RC
808200     MOVE "CEE3GRC" TO LS-LEMODULE
808300     CALL LS-LEMODULE
808400          USING LS-ENCLAVE-RC
808500                OMITTED
808600     IF LS-ENCLAVE-RC > ZERO
808700       DISPLAY WS-PGMID
808800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
808900     END-IF
809000
809100     IF AS5CTOK-SEVNBR > ZERO
809200       DISPLAY WS-PGMID
809300            " RETURN CODE: " AS5CTOK-SEVNBR
809400            " MESSAGE NBR: " AS5CTOK-MSGNBR
809500     END-IF
809600
809700     DISPLAY WS-PGMID
809800          " TEST CASE 091.R - NBR-2-CHK (PD -10200)"
809900     DISPLAY WS-PGMID
810000          " MIXED CASE / NO CASE"
810100     DISPLAY WS-PGMID
810200          " SOURCE:" SRC-TXT
810300     DISPLAY WS-PGMID
810400          " OUTPUT LEN (0):" TMPLT-25-LEN
810500     DISPLAY WS-PGMID
810600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
810700     DISPLAY WS-PGMID
810800          " "
810900          TMPLT-25-TXT-Z
811000     DISPLAY " "
811100     SKIP2
811200*    * ------------------------------------------------------- *
811300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
811400*    *   FORMAT: WORD, CURRENCY, CHECK
811500*    * ------------------------------------------------------- *
811600     SKIP1
811700     MOVE ZERO TO RO-START
811800                  RO-COUNT
811900                  RO-PSA-LEN
812000     SET RO-FLAG-NONE  TO TRUE
812100*    SET NUMBER TO WORD CONVERSION
812200     MOVE X'20' TO RO-OPTION-FLAG
812300     MOVE +9   TO RO-COUNT
812400     MOVE WS-SOURCE-STRING-32 TO SOURCE-STRING
812500*    100000001.100000001  9(9)V9(9)
812600     MOVE +1   TO TEMPLATE-COUNT
812700     MOVE ZERO TO TMPLT-25-LEN
812800     MOVE LOW-VALUE TO TMPLT-25-TXT
812900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
813000     IF PACKAGE-CALL
813100*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
813200       CONTINUE
813300     ELSE
813400       MOVE "ASUDN2TB" TO LS-ASMODULE
813500       CALL LS-ASMODULE
813600            USING ASCA-COMMAREA
813700                  AS-REQUEST-OPTIONS
813800                  SOURCE-STRING
813900                  TEMPLATE-COUNT
814000                  TEMPLATE-25
814100                  AS5CTOK-OCTOKEN
814200     END-IF
814300
814400     MOVE ZERO TO LS-ENCLAVE-RC
814500     MOVE "CEE3GRC" TO LS-LEMODULE
814600     CALL LS-LEMODULE
814700          USING LS-ENCLAVE-RC
814800                OMITTED
814900     IF LS-ENCLAVE-RC > ZERO
815000       DISPLAY WS-PGMID
815100            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
815200     END-IF
815300
815400     IF AS5CTOK-SEVNBR > ZERO
815500       DISPLAY WS-PGMID
815600            " RETURN CODE: " AS5CTOK-SEVNBR
815700            " MESSAGE NBR: " AS5CTOK-MSGNBR
815800     END-IF
815900
816000     DISPLAY WS-PGMID
816100          " TEST CASE 091.S - NBR-2-WRD (PD 100000001.100000001)"
816200     DISPLAY WS-PGMID
816300          " MIXED CASE / NO CASE"
816400     DISPLAY WS-PGMID
816500          " SOURCE:" SRC-TXT
816600     DISPLAY WS-PGMID
816700          " OUTPUT LEN (62):" TMPLT-25-LEN
816800     DISPLAY WS-PGMID
816900          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
817000     DISPLAY WS-PGMID
817100          " "
817200          TMPLT-25-TXT-Z
817300     DISPLAY " "
817400     SKIP2
817500*    * ------------------------------------------------------- *
817600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
817700*    *   FORMAT: WORD, CURRENCY, CHECK
817800*    * ------------------------------------------------------- *
817900     SKIP1
818000     MOVE ZERO TO RO-START
818100                  RO-COUNT
818200                  RO-PSA-LEN
818300     SET RO-FLAG-NONE  TO TRUE
818400*    SET NUMBER TO WORD CONVERSION
818500     MOVE X'20' TO RO-OPTION-FLAG
818600     MOVE +2   TO RO-COUNT
818700     MOVE WS-SOURCE-STRING-35 TO SOURCE-STRING
818800*    0.75          9(3)V9(2)
818900     MOVE +1   TO TEMPLATE-COUNT
819000     MOVE ZERO TO TMPLT-25-LEN
819100     MOVE LOW-VALUE TO TMPLT-25-TXT
819200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
819300     IF PACKAGE-CALL
819400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
819500       CONTINUE
819600     ELSE
819700       MOVE "ASUDN2TB" TO LS-ASMODULE
819800       CALL LS-ASMODULE
819900            USING ASCA-COMMAREA
820000                  AS-REQUEST-OPTIONS
820100                  SOURCE-STRING
820200                  TEMPLATE-COUNT
820300                  TEMPLATE-25
820400                  AS5CTOK-OCTOKEN
820500     END-IF
820600
820700     MOVE ZERO TO LS-ENCLAVE-RC
820800     MOVE "CEE3GRC" TO LS-LEMODULE
820900     CALL LS-LEMODULE
821000          USING LS-ENCLAVE-RC
821100                OMITTED
821200     IF LS-ENCLAVE-RC > ZERO
821300       DISPLAY WS-PGMID
821400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
821500     END-IF
821600
821700     IF AS5CTOK-SEVNBR > ZERO
821800       DISPLAY WS-PGMID
821900            " RETURN CODE: " AS5CTOK-SEVNBR
822000            " MESSAGE NBR: " AS5CTOK-MSGNBR
822100     END-IF
822200
822300     DISPLAY WS-PGMID
822400          " TEST CASE 091.T - NBR-2-WRD (PD 0.75)"
822500     DISPLAY WS-PGMID
822600          " MIXED CASE / NO CASE"
822700     DISPLAY WS-PGMID
822800          " SOURCE:" SRC-TXT
822900     DISPLAY WS-PGMID
823000          " OUTPUT LEN (32):" TMPLT-25-LEN
823100     DISPLAY WS-PGMID
823200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
823300     DISPLAY WS-PGMID
823400          " "
823500          TMPLT-25-TXT-Z
823600     DISPLAY " "
823700     SKIP2
823800*    * ------------------------------------------------------- *
823900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
824000*    *   FORMAT: WORD, CURRENCY, CHECK
824100*    * ------------------------------------------------------- *
824200     SKIP1
824300     MOVE ZERO TO RO-START
824400                  RO-COUNT
824500                  RO-PSA-LEN
824600     SET RO-FLAG-NONE  TO TRUE
824700*    SET NUMBER TO CURRENCY CONVERSION
824800     MOVE X'10' TO RO-OPTION-FLAG
824900     MOVE +2   TO RO-COUNT
825000     MOVE WS-SOURCE-STRING-35 TO SOURCE-STRING
825100*    0.75          9(3)V9(2)
825200     MOVE +1   TO TEMPLATE-COUNT
825300     MOVE ZERO TO TMPLT-25-LEN
825400     MOVE LOW-VALUE TO TMPLT-25-TXT
825500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
825600     IF PACKAGE-CALL
825700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
825800       CONTINUE
825900     ELSE
826000       MOVE "ASUDN2TB" TO LS-ASMODULE
826100       CALL LS-ASMODULE
826200            USING ASCA-COMMAREA
826300                  AS-REQUEST-OPTIONS
826400                  SOURCE-STRING
826500                  TEMPLATE-COUNT
826600                  TEMPLATE-25
826700                  AS5CTOK-OCTOKEN
826800     END-IF
826900
827000     MOVE ZERO TO LS-ENCLAVE-RC
827100     MOVE "CEE3GRC" TO LS-LEMODULE
827200     CALL LS-LEMODULE
827300          USING LS-ENCLAVE-RC
827400                OMITTED
827500     IF LS-ENCLAVE-RC > ZERO
827600       DISPLAY WS-PGMID
827700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
827800     END-IF
827900
828000     IF AS5CTOK-SEVNBR > ZERO
828100       DISPLAY WS-PGMID
828200            " RETURN CODE: " AS5CTOK-SEVNBR
828300            " MESSAGE NBR: " AS5CTOK-MSGNBR
828400     END-IF
828500
828600     DISPLAY WS-PGMID
828700          " TEST CASE 091.U - NBR-2-CUR (PD 0.75)"
828800     DISPLAY WS-PGMID
828900          " MIXED CASE / NO CASE"
829000     DISPLAY WS-PGMID
829100          " SOURCE:" SRC-TXT
829200     DISPLAY WS-PGMID
829300          " OUTPUT LEN (35):" TMPLT-25-LEN
829400     DISPLAY WS-PGMID
829500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
829600     DISPLAY WS-PGMID
829700          " "
829800          TMPLT-25-TXT-Z
829900     DISPLAY " "
830000     SKIP2
830100*    * ------------------------------------------------------- *
830200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
830300*    *   FORMAT: WORD, CURRENCY, CHECK
830400*    * ------------------------------------------------------- *
830500     SKIP1
830600     MOVE ZERO TO RO-START
830700                  RO-COUNT
830800                  RO-PSA-LEN
830900     SET RO-FLAG-NONE  TO TRUE
831000     MOVE +2   TO RO-COUNT
831100     MOVE WS-SOURCE-STRING-35 TO SOURCE-STRING
831200*    0.75          9(3)V9(2)
831300     MOVE +1   TO TEMPLATE-COUNT
831400     MOVE ZERO TO TMPLT-25-LEN
831500     MOVE LOW-VALUE TO TMPLT-25-TXT
831600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
831700     IF PACKAGE-CALL
831800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
831900       CONTINUE
832000     ELSE
832100       MOVE "ASUDN2TB" TO LS-ASMODULE
832200       CALL LS-ASMODULE
832300            USING ASCA-COMMAREA
832400                  AS-REQUEST-OPTIONS
832500                  SOURCE-STRING
832600                  TEMPLATE-COUNT
832700                  TEMPLATE-25
832800                  AS5CTOK-OCTOKEN
832900     END-IF
833000
833100     MOVE ZERO TO LS-ENCLAVE-RC
833200     MOVE "CEE3GRC" TO LS-LEMODULE
833300     CALL LS-LEMODULE
833400          USING LS-ENCLAVE-RC
833500                OMITTED
833600     IF LS-ENCLAVE-RC > ZERO
833700       DISPLAY WS-PGMID
833800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
833900     END-IF
834000
834100     IF AS5CTOK-SEVNBR > ZERO
834200       DISPLAY WS-PGMID
834300            " RETURN CODE: " AS5CTOK-SEVNBR
834400            " MESSAGE NBR: " AS5CTOK-MSGNBR
834500     END-IF
834600
834700     DISPLAY WS-PGMID
834800          " TEST CASE 091.V - NBR-2-CHK (PD 0.75)"
834900     DISPLAY WS-PGMID
835000          " MIXED CASE / NO CASE"
835100     DISPLAY WS-PGMID
835200          " SOURCE:" SRC-TXT
835300     DISPLAY WS-PGMID
835400          " OUTPUT LEN (23):" TMPLT-25-LEN
835500     DISPLAY WS-PGMID
835600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
835700     DISPLAY WS-PGMID
835800          " "
835900          TMPLT-25-TXT-Z
836000     DISPLAY " "
836100     SKIP2
836200     CONTINUE.
836300 TEST-CASE-092.
836400
836500     IF NOT (TEST-CASE = "ALL" OR "092")
836600       GO TO TEST-CASE-093
836700     END-IF
836800*    * ------------------------------------------------------- *
836900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
837000*    *   FORMAT: WORD, CURRENCY, CHECK
837100*    * ------------------------------------------------------- *
837200     SKIP1
837300     MOVE ZERO TO RO-START
837400                  RO-COUNT
837500                  RO-PSA-LEN
837600     SET RO-FLAG-NONE  TO TRUE
837700*    SET NUMBER TO WORD CONVERSION
837800     MOVE X'20' TO RO-OPTION-FLAG
837900     MOVE WS-SOURCE-STRING-7 TO SOURCE-STRING
838000*    "$234.56"
838100     MOVE +1   TO TEMPLATE-COUNT
838200     MOVE ZERO TO TMPLT-25-LEN
838300     MOVE LOW-VALUE TO TMPLT-25-TXT
838400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
838500     IF PACKAGE-CALL
838600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
838700       CONTINUE
838800     ELSE
838900       MOVE "ASUDN2TB" TO LS-ASMODULE
839000       CALL LS-ASMODULE
839100            USING ASCA-COMMAREA
839200                  AS-REQUEST-OPTIONS
839300                  SOURCE-STRING
839400                  TEMPLATE-COUNT
839500                  TEMPLATE-25
839600                  AS5CTOK-OCTOKEN
839700     END-IF
839800
839900     MOVE ZERO TO LS-ENCLAVE-RC
840000     MOVE "CEE3GRC" TO LS-LEMODULE
840100     CALL LS-LEMODULE
840200          USING LS-ENCLAVE-RC
840300                OMITTED
840400     IF LS-ENCLAVE-RC > ZERO
840500       DISPLAY WS-PGMID
840600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
840700     END-IF
840800
840900     IF AS5CTOK-SEVNBR > ZERO
841000       DISPLAY WS-PGMID
841100            " RETURN CODE: " AS5CTOK-SEVNBR
841200            " MESSAGE NBR: " AS5CTOK-MSGNBR
841300     END-IF
841400
841500     DISPLAY WS-PGMID
841600          " TEST CASE 092.A - NBR-2-WRD (ED $234.56)"
841700     DISPLAY WS-PGMID
841800          " MIXED CASE / NO CASE"
841900     DISPLAY WS-PGMID
842000          " SOURCE:" SRC-TXT
842100     DISPLAY WS-PGMID
842200          " OUTPUT LEN (48):" TMPLT-25-LEN
842300     DISPLAY WS-PGMID
842400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
842500     DISPLAY WS-PGMID
842600          " "
842700          TMPLT-25-TXT-Z
842800     DISPLAY " "
842900     SKIP2
843000*    * ------------------------------------------------------- *
843100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
843200*    *   FORMAT: WORD, CURRENCY, CHECK
843300*    * ------------------------------------------------------- *
843400     SKIP1
843500     MOVE ZERO TO RO-START
843600                  RO-COUNT
843700                  RO-PSA-LEN
843800     SET RO-FLAG-NONE  TO TRUE
843900*    SET NUMBER TO CURRENCY CONVERSION
844000     MOVE X'10' TO RO-OPTION-FLAG
844100     MOVE WS-SOURCE-STRING-7 TO SOURCE-STRING
844200*    "$234.56"
844300     MOVE +1   TO TEMPLATE-COUNT
844400     MOVE ZERO TO TMPLT-25-LEN
844500     MOVE LOW-VALUE TO TMPLT-25-TXT
844600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
844700     IF PACKAGE-CALL
844800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
844900       CONTINUE
845000     ELSE
845100       MOVE "ASUDN2TB" TO LS-ASMODULE
845200       CALL LS-ASMODULE
845300            USING ASCA-COMMAREA
845400                  AS-REQUEST-OPTIONS
845500                  SOURCE-STRING
845600                  TEMPLATE-COUNT
845700                  TEMPLATE-25
845800                  AS5CTOK-OCTOKEN
845900     END-IF
846000
846100     MOVE ZERO TO LS-ENCLAVE-RC
846200     MOVE "CEE3GRC" TO LS-LEMODULE
846300     CALL LS-LEMODULE
846400          USING LS-ENCLAVE-RC
846500                OMITTED
846600     IF LS-ENCLAVE-RC > ZERO
846700       DISPLAY WS-PGMID
846800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
846900     END-IF
847000
847100     IF AS5CTOK-SEVNBR > ZERO
847200       DISPLAY WS-PGMID
847300            " RETURN CODE: " AS5CTOK-SEVNBR
847400            " MESSAGE NBR: " AS5CTOK-MSGNBR
847500     END-IF
847600
847700     DISPLAY WS-PGMID
847800          " TEST CASE 092.B - NBR-2-CUR (ED $234.56)"
847900     DISPLAY WS-PGMID
848000          " MIXED CASE / NO CASE"
848100     DISPLAY WS-PGMID
848200          " SOURCE:" SRC-TXT
848300     DISPLAY WS-PGMID
848400          " OUTPUT LEN (51):" TMPLT-25-LEN
848500     DISPLAY WS-PGMID
848600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
848700     DISPLAY WS-PGMID
848800          " "
848900          TMPLT-25-TXT-Z
849000     DISPLAY " "
849100     SKIP2
849200*    * ------------------------------------------------------- *
849300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
849400*    *   FORMAT: WORD, CURRENCY, CHECK
849500*    * ------------------------------------------------------- *
849600     SKIP1
849700     MOVE ZERO TO RO-START
849800                  RO-COUNT
849900                  RO-PSA-LEN
850000     SET RO-FLAG-NONE  TO TRUE
850100     MOVE WS-SOURCE-STRING-7 TO SOURCE-STRING
850200*    "$234.56"
850300     MOVE +1   TO TEMPLATE-COUNT
850400     MOVE ZERO TO TMPLT-25-LEN
850500     MOVE LOW-VALUE TO TMPLT-25-TXT
850600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
850700     IF PACKAGE-CALL
850800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
850900       CONTINUE
851000     ELSE
851100       MOVE "ASUDN2TB" TO LS-ASMODULE
851200       CALL LS-ASMODULE
851300            USING ASCA-COMMAREA
851400                  AS-REQUEST-OPTIONS
851500                  SOURCE-STRING
851600                  TEMPLATE-COUNT
851700                  TEMPLATE-25
851800                  AS5CTOK-OCTOKEN
851900     END-IF
852000
852100     MOVE ZERO TO LS-ENCLAVE-RC
852200     MOVE "CEE3GRC" TO LS-LEMODULE
852300     CALL LS-LEMODULE
852400          USING LS-ENCLAVE-RC
852500                OMITTED
852600     IF LS-ENCLAVE-RC > ZERO
852700       DISPLAY WS-PGMID
852800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
852900     END-IF
853000
853100     IF AS5CTOK-SEVNBR > ZERO
853200       DISPLAY WS-PGMID
853300            " RETURN CODE: " AS5CTOK-SEVNBR
853400            " MESSAGE NBR: " AS5CTOK-MSGNBR
853500     END-IF
853600
853700     DISPLAY WS-PGMID
853800          " TEST CASE 092.C - NBR-2-CHK (ED $234.56)"
853900     DISPLAY WS-PGMID
854000          " MIXED CASE / NO CASE"
854100     DISPLAY WS-PGMID
854200          " SOURCE:" SRC-TXT
854300     DISPLAY WS-PGMID
854400          " OUTPUT LEN (42):" TMPLT-25-LEN
854500     DISPLAY WS-PGMID
854600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
854700     DISPLAY WS-PGMID
854800          " "
854900          TMPLT-25-TXT-Z
855000     DISPLAY " "
855100     SKIP2
855200*    * ------------------------------------------------------- *
855300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
855400*    *   FORMAT: WORD, CURRENCY, CHECK
855500*    * ------------------------------------------------------- *
855600     SKIP1
855700     MOVE ZERO TO RO-START
855800                  RO-COUNT
855900                  RO-PSA-LEN
856000     SET RO-FLAG-NONE  TO TRUE
856100*    SET NUMBER TO WORD CONVERSION
856200     MOVE X'20' TO RO-OPTION-FLAG
856300     MOVE WS-SOURCE-STRING-8 TO SOURCE-STRING
856400*    "-1,234.56"
856500     MOVE +1   TO TEMPLATE-COUNT
856600     MOVE ZERO TO TMPLT-25-LEN
856700     MOVE LOW-VALUE TO TMPLT-25-TXT
856800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
856900     IF PACKAGE-CALL
857000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
857100       CONTINUE
857200     ELSE
857300       MOVE "ASUDN2TB" TO LS-ASMODULE
857400       CALL LS-ASMODULE
857500            USING ASCA-COMMAREA
857600                  AS-REQUEST-OPTIONS
857700                  SOURCE-STRING
857800                  TEMPLATE-COUNT
857900                  TEMPLATE-25
858000                  AS5CTOK-OCTOKEN
858100     END-IF
858200
858300     MOVE ZERO TO LS-ENCLAVE-RC
858400     MOVE "CEE3GRC" TO LS-LEMODULE
858500     CALL LS-LEMODULE
858600          USING LS-ENCLAVE-RC
858700                OMITTED
858800     IF LS-ENCLAVE-RC > ZERO
858900       DISPLAY WS-PGMID
859000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
859100     END-IF
859200
859300     IF AS5CTOK-SEVNBR > ZERO
859400       DISPLAY WS-PGMID
859500            " RETURN CODE: " AS5CTOK-SEVNBR
859600            " MESSAGE NBR: " AS5CTOK-MSGNBR
859700     END-IF
859800
859900     DISPLAY WS-PGMID
860000          " TEST CASE 092.D - NBR-2-WRD (ED -1,234.56)"
860100     DISPLAY WS-PGMID
860200          " MIXED CASE / NO CASE"
860300     DISPLAY WS-PGMID
860400          " SOURCE:" SRC-TXT
860500     DISPLAY WS-PGMID
860600          " OUTPUT LEN (70):" TMPLT-25-LEN
860700     DISPLAY WS-PGMID
860800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
860900     DISPLAY WS-PGMID
861000          " "
861100          TMPLT-25-TXT-Z
861200     DISPLAY " "
861300     SKIP2
861400*    * ------------------------------------------------------- *
861500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
861600*    *   FORMAT: WORD, CURRENCY, CHECK
861700*    * ------------------------------------------------------- *
861800     SKIP1
861900     MOVE ZERO TO RO-START
862000                  RO-COUNT
862100                  RO-PSA-LEN
862200     SET RO-FLAG-NONE  TO TRUE
862300*    SET NUMBER TO CURRENCY CONVERSION
862400     MOVE X'10' TO RO-OPTION-FLAG
862500     MOVE WS-SOURCE-STRING-8 TO SOURCE-STRING
862600*    "-1,234.56"
862700     MOVE +1   TO TEMPLATE-COUNT
862800     MOVE ZERO TO TMPLT-25-LEN
862900     MOVE LOW-VALUE TO TMPLT-25-TXT
863000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
863100     IF PACKAGE-CALL
863200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
863300       CONTINUE
863400     ELSE
863500       MOVE "ASUDN2TB" TO LS-ASMODULE
863600       CALL LS-ASMODULE
863700            USING ASCA-COMMAREA
863800                  AS-REQUEST-OPTIONS
863900                  SOURCE-STRING
864000                  TEMPLATE-COUNT
864100                  TEMPLATE-25
864200                  AS5CTOK-OCTOKEN
864300     END-IF
864400
864500     MOVE ZERO TO LS-ENCLAVE-RC
864600     MOVE "CEE3GRC" TO LS-LEMODULE
864700     CALL LS-LEMODULE
864800          USING LS-ENCLAVE-RC
864900                OMITTED
865000     IF LS-ENCLAVE-RC > ZERO
865100       DISPLAY WS-PGMID
865200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
865300     END-IF
865400
865500     IF AS5CTOK-SEVNBR > ZERO
865600       DISPLAY WS-PGMID
865700            " RETURN CODE: " AS5CTOK-SEVNBR
865800            " MESSAGE NBR: " AS5CTOK-MSGNBR
865900     END-IF
866000
866100     DISPLAY WS-PGMID
866200          " TEST CASE 092.E - NBR-2-CUR (ED -1,234.56)"
866300     DISPLAY WS-PGMID
866400          " MIXED CASE / NO CASE"
866500     DISPLAY WS-PGMID
866600          " SOURCE:" SRC-TXT
866700     DISPLAY WS-PGMID
866800          " OUTPUT LEN (73):" TMPLT-25-LEN
866900     DISPLAY WS-PGMID
867000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
867100     DISPLAY WS-PGMID
867200          " "
867300          TMPLT-25-TXT-Z
867400     DISPLAY " "
867500     SKIP2
867600*    * ------------------------------------------------------- *
867700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
867800*    *   FORMAT: WORD, CURRENCY, CHECK
867900*    * ------------------------------------------------------- *
868000     SKIP1
868100     MOVE ZERO TO RO-START
868200                  RO-COUNT
868300                  RO-PSA-LEN
868400     SET RO-FLAG-NONE  TO TRUE
868500     MOVE WS-SOURCE-STRING-8 TO SOURCE-STRING
868600*    "-1,234.56"
868700     MOVE +1   TO TEMPLATE-COUNT
868800     MOVE ZERO TO TMPLT-25-LEN
868900     MOVE LOW-VALUE TO TMPLT-25-TXT
869000     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
869100     IF PACKAGE-CALL
869200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
869300       CONTINUE
869400     ELSE
869500       MOVE "ASUDN2TB" TO LS-ASMODULE
869600       CALL LS-ASMODULE
869700            USING ASCA-COMMAREA
869800                  AS-REQUEST-OPTIONS
869900                  SOURCE-STRING
870000                  TEMPLATE-COUNT
870100                  TEMPLATE-25
870200                  AS5CTOK-OCTOKEN
870300     END-IF
870400
870500     MOVE ZERO TO LS-ENCLAVE-RC
870600     MOVE "CEE3GRC" TO LS-LEMODULE
870700     CALL LS-LEMODULE
870800          USING LS-ENCLAVE-RC
870900                OMITTED
871000     IF LS-ENCLAVE-RC > ZERO
871100       DISPLAY WS-PGMID
871200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
871300     END-IF
871400
871500     IF AS5CTOK-SEVNBR > ZERO
871600       DISPLAY WS-PGMID
871700            " RETURN CODE: " AS5CTOK-SEVNBR
871800            " MESSAGE NBR: " AS5CTOK-MSGNBR
871900     END-IF
872000
872100     DISPLAY WS-PGMID
872200          " TEST CASE 092.F - NBR-2-CHK (ED -1,234.56)"
872300     DISPLAY WS-PGMID
872400          " MIXED CASE / NO CASE"
872500     DISPLAY WS-PGMID
872600          " SOURCE:" SRC-TXT
872700     DISPLAY WS-PGMID
872800          " OUTPUT LEN (0):" TMPLT-25-LEN
872900     DISPLAY WS-PGMID
873000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
873100     DISPLAY WS-PGMID
873200          " "
873300          TMPLT-25-TXT-Z
873400     DISPLAY " "
873500     SKIP2
873600*    * ------------------------------------------------------- *
873700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
873800*    *   FORMAT: WORD, CURRENCY, CHECK
873900*    * ------------------------------------------------------- *
874000     SKIP1
874100     MOVE ZERO TO RO-START
874200                  RO-COUNT
874300                  RO-PSA-LEN
874400     SET RO-FLAG-NONE  TO TRUE
874500*    SET NUMBER TO WORD CONVERSION
874600     MOVE X'20' TO RO-OPTION-FLAG
874700     MOVE WS-SOURCE-STRING-9 TO SOURCE-STRING
874800*    "$-,--4.56"
874900     MOVE +1   TO TEMPLATE-COUNT
875000     MOVE ZERO TO TMPLT-25-LEN
875100     MOVE LOW-VALUE TO TMPLT-25-TXT
875200     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
875300     IF PACKAGE-CALL
875400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
875500       CONTINUE
875600     ELSE
875700       MOVE "ASUDN2TB" TO LS-ASMODULE
875800       CALL LS-ASMODULE
875900            USING ASCA-COMMAREA
876000                  AS-REQUEST-OPTIONS
876100                  SOURCE-STRING
876200                  TEMPLATE-COUNT
876300                  TEMPLATE-25
876400                  AS5CTOK-OCTOKEN
876500     END-IF
876600
876700     MOVE ZERO TO LS-ENCLAVE-RC
876800     MOVE "CEE3GRC" TO LS-LEMODULE
876900     CALL LS-LEMODULE
877000          USING LS-ENCLAVE-RC
877100                OMITTED
877200     IF LS-ENCLAVE-RC > ZERO
877300       DISPLAY WS-PGMID
877400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
877500     END-IF
877600
877700     IF AS5CTOK-SEVNBR > ZERO
877800       DISPLAY WS-PGMID
877900            " RETURN CODE: " AS5CTOK-SEVNBR
878000            " MESSAGE NBR: " AS5CTOK-MSGNBR
878100     END-IF
878200
878300     DISPLAY WS-PGMID
878400          " TEST CASE 092.G - NBR-2-WRD (ED $-,--4.56)"
878500     DISPLAY WS-PGMID
878600          " MIXED CASE / NO CASE"
878700     DISPLAY WS-PGMID
878800          " SOURCE:" SRC-TXT
878900     DISPLAY WS-PGMID
879000          " OUTPUT LEN (38):" TMPLT-25-LEN
879100     DISPLAY WS-PGMID
879200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
879300     DISPLAY WS-PGMID
879400          " "
879500          TMPLT-25-TXT-Z
879600     DISPLAY " "
879700     SKIP2
879800*    * ------------------------------------------------------- *
879900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
880000*    *   FORMAT: WORD, CURRENCY, CHECK
880100*    * ------------------------------------------------------- *
880200     SKIP1
880300     MOVE ZERO TO RO-START
880400                  RO-COUNT
880500                  RO-PSA-LEN
880600     SET RO-FLAG-NONE  TO TRUE
880700*    SET NUMBER TO CURRENCY CONVERSION
880800     MOVE X'10' TO RO-OPTION-FLAG
880900     MOVE WS-SOURCE-STRING-9 TO SOURCE-STRING
881000*    "$-,--4.56"
881100     MOVE +1   TO TEMPLATE-COUNT
881200     MOVE ZERO TO TMPLT-25-LEN
881300     MOVE LOW-VALUE TO TMPLT-25-TXT
881400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
881500     IF PACKAGE-CALL
881600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
881700       CONTINUE
881800     ELSE
881900       MOVE "ASUDN2TB" TO LS-ASMODULE
882000       CALL LS-ASMODULE
882100            USING ASCA-COMMAREA
882200                  AS-REQUEST-OPTIONS
882300                  SOURCE-STRING
882400                  TEMPLATE-COUNT
882500                  TEMPLATE-25
882600                  AS5CTOK-OCTOKEN
882700     END-IF
882800
882900     MOVE ZERO TO LS-ENCLAVE-RC
883000     MOVE "CEE3GRC" TO LS-LEMODULE
883100     CALL LS-LEMODULE
883200          USING LS-ENCLAVE-RC
883300                OMITTED
883400     IF LS-ENCLAVE-RC > ZERO
883500       DISPLAY WS-PGMID
883600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
883700     END-IF
883800
883900     IF AS5CTOK-SEVNBR > ZERO
884000       DISPLAY WS-PGMID
884100            " RETURN CODE: " AS5CTOK-SEVNBR
884200            " MESSAGE NBR: " AS5CTOK-MSGNBR
884300     END-IF
884400
884500     DISPLAY WS-PGMID
884600          " TEST CASE 092.H - NBR-2-CUR (ED $-,--4.56)"
884700     DISPLAY WS-PGMID
884800          " MIXED CASE / NO CASE"
884900     DISPLAY WS-PGMID
885000          " SOURCE:" SRC-TXT
885100     DISPLAY WS-PGMID
885200          " OUTPUT LEN (41):" TMPLT-25-LEN
885300     DISPLAY WS-PGMID
885400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
885500     DISPLAY WS-PGMID
885600          " "
885700          TMPLT-25-TXT-Z
885800     DISPLAY " "
885900     SKIP2
886000*    * ------------------------------------------------------- *
886100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
886200*    *   FORMAT: WORD, CURRENCY, CHECK
886300*    * ------------------------------------------------------- *
886400     SKIP1
886500     MOVE ZERO TO RO-START
886600                  RO-COUNT
886700                  RO-PSA-LEN
886800     SET RO-FLAG-NONE  TO TRUE
886900     MOVE WS-SOURCE-STRING-9 TO SOURCE-STRING
887000*    "$-,--4.56"
887100     MOVE +1   TO TEMPLATE-COUNT
887200     MOVE ZERO TO TMPLT-25-LEN
887300     MOVE LOW-VALUE TO TMPLT-25-TXT
887400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
887500     IF PACKAGE-CALL
887600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
887700       CONTINUE
887800     ELSE
887900       MOVE "ASUDN2TB" TO LS-ASMODULE
888000       CALL LS-ASMODULE
888100            USING ASCA-COMMAREA
888200                  AS-REQUEST-OPTIONS
888300                  SOURCE-STRING
888400                  TEMPLATE-COUNT
888500                  TEMPLATE-25
888600                  AS5CTOK-OCTOKEN
888700     END-IF
888800
888900     MOVE ZERO TO LS-ENCLAVE-RC
889000     MOVE "CEE3GRC" TO LS-LEMODULE
889100     CALL LS-LEMODULE
889200          USING LS-ENCLAVE-RC
889300                OMITTED
889400     IF LS-ENCLAVE-RC > ZERO
889500       DISPLAY WS-PGMID
889600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
889700     END-IF
889800
889900     IF AS5CTOK-SEVNBR > ZERO
890000       DISPLAY WS-PGMID
890100            " RETURN CODE: " AS5CTOK-SEVNBR
890200            " MESSAGE NBR: " AS5CTOK-MSGNBR
890300     END-IF
890400
890500     DISPLAY WS-PGMID
890600          " TEST CASE 092.I - NBR-2-CHK (ED $-,--4.56)"
890700     DISPLAY WS-PGMID
890800          " MIXED CASE / NO CASE"
890900     DISPLAY WS-PGMID
891000          " SOURCE:" SRC-TXT
891100     DISPLAY WS-PGMID
891200          " OUTPUT LEN (0):" TMPLT-25-LEN
891300     DISPLAY WS-PGMID
891400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
891500     DISPLAY WS-PGMID
891600          " "
891700          TMPLT-25-TXT-Z
891800     DISPLAY " "
891900     SKIP2
892000*    * ------------------------------------------------------- *
892100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
892200*    *   FORMAT: WORD, CURRENCY, CHECK
892300*    * ------------------------------------------------------- *
892400     SKIP1
892500     MOVE ZERO TO RO-START
892600                  RO-COUNT
892700                  RO-PSA-LEN
892800     SET RO-FLAG-NONE  TO TRUE
892900*    SET NUMBER TO WORD CONVERSION
893000     MOVE X'20' TO RO-OPTION-FLAG
893100     MOVE WS-SOURCE-STRING-10 TO SOURCE-STRING
893200*    "0123,456 "
893300     MOVE +1   TO TEMPLATE-COUNT
893400     MOVE ZERO TO TMPLT-25-LEN
893500     MOVE LOW-VALUE TO TMPLT-25-TXT
893600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
893700     IF PACKAGE-CALL
893800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
893900       CONTINUE
894000     ELSE
894100       MOVE "ASUDN2TB" TO LS-ASMODULE
894200       CALL LS-ASMODULE
894300            USING ASCA-COMMAREA
894400                  AS-REQUEST-OPTIONS
894500                  SOURCE-STRING
894600                  TEMPLATE-COUNT
894700                  TEMPLATE-25
894800                  AS5CTOK-OCTOKEN
894900     END-IF
895000
895100     MOVE ZERO TO LS-ENCLAVE-RC
895200     MOVE "CEE3GRC" TO LS-LEMODULE
895300     CALL LS-LEMODULE
895400          USING LS-ENCLAVE-RC
895500                OMITTED
895600     IF LS-ENCLAVE-RC > ZERO
895700       DISPLAY WS-PGMID
895800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
895900     END-IF
896000
896100     IF AS5CTOK-SEVNBR > ZERO
896200       DISPLAY WS-PGMID
896300            " RETURN CODE: " AS5CTOK-SEVNBR
896400            " MESSAGE NBR: " AS5CTOK-MSGNBR
896500     END-IF
896600
896700     DISPLAY WS-PGMID
896800          " TEST CASE 092.J - NBR-2-WRD (ED 0123,456 )"
896900     DISPLAY WS-PGMID
897000          " MIXED CASE / NO CASE"
897100     DISPLAY WS-PGMID
897200          " SOURCE:" SRC-TXT
897300     DISPLAY WS-PGMID
897400          " OUTPUT LEN (56):" TMPLT-25-LEN
897500     DISPLAY WS-PGMID
897600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
897700     DISPLAY WS-PGMID
897800          " "
897900          TMPLT-25-TXT-Z
898000     DISPLAY " "
898100     SKIP2
898200*    * ------------------------------------------------------- *
898300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
898400*    *   FORMAT: WORD, CURRENCY, CHECK
898500*    * ------------------------------------------------------- *
898600     SKIP1
898700     MOVE ZERO TO RO-START
898800                  RO-COUNT
898900                  RO-PSA-LEN
899000     SET RO-FLAG-NONE  TO TRUE
899100*    SET NUMBER TO CURRENCY CONVERSION
899200     MOVE X'10' TO RO-OPTION-FLAG
899300     MOVE WS-SOURCE-STRING-10 TO SOURCE-STRING
899400*    "0123,456 "
899500     MOVE +1   TO TEMPLATE-COUNT
899600     MOVE ZERO TO TMPLT-25-LEN
899700     MOVE LOW-VALUE TO TMPLT-25-TXT
899800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
899900     IF PACKAGE-CALL
900000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
900100       CONTINUE
900200     ELSE
900300       MOVE "ASUDN2TB" TO LS-ASMODULE
900400       CALL LS-ASMODULE
900500            USING ASCA-COMMAREA
900600                  AS-REQUEST-OPTIONS
900700                  SOURCE-STRING
900800                  TEMPLATE-COUNT
900900                  TEMPLATE-25
901000                  AS5CTOK-OCTOKEN
901100     END-IF
901200
901300     MOVE ZERO TO LS-ENCLAVE-RC
901400     MOVE "CEE3GRC" TO LS-LEMODULE
901500     CALL LS-LEMODULE
901600          USING LS-ENCLAVE-RC
901700                OMITTED
901800     IF LS-ENCLAVE-RC > ZERO
901900       DISPLAY WS-PGMID
902000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
902100     END-IF
902200
902300     IF AS5CTOK-SEVNBR > ZERO
902400       DISPLAY WS-PGMID
902500            " RETURN CODE: " AS5CTOK-SEVNBR
902600            " MESSAGE NBR: " AS5CTOK-MSGNBR
902700     END-IF
902800
902900     DISPLAY WS-PGMID
903000          " TEST CASE 092.K - NBR-2-CUR (ED 0123,456 )"
903100     DISPLAY WS-PGMID
903200          " MIXED CASE / NO CASE"
903300     DISPLAY WS-PGMID
903400          " SOURCE:" SRC-TXT
903500     DISPLAY WS-PGMID
903600          " OUTPUT LEN (64):" TMPLT-25-LEN
903700     DISPLAY WS-PGMID
903800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
903900     DISPLAY WS-PGMID
904000          " "
904100          TMPLT-25-TXT-Z
904200     DISPLAY " "
904300     SKIP2
904400*    * ------------------------------------------------------- *
904500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
904600*    *   FORMAT: WORD, CURRENCY, CHECK
904700*    * ------------------------------------------------------- *
904800     SKIP1
904900     MOVE ZERO TO RO-START
905000                  RO-COUNT
905100                  RO-PSA-LEN
905200     SET RO-FLAG-NONE  TO TRUE
905300     MOVE WS-SOURCE-STRING-10 TO SOURCE-STRING
905400*    "0123,456 "
905500     MOVE +1   TO TEMPLATE-COUNT
905600     MOVE ZERO TO TMPLT-25-LEN
905700     MOVE LOW-VALUE TO TMPLT-25-TXT
905800     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
905900     IF PACKAGE-CALL
906000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
906100       CONTINUE
906200     ELSE
906300       MOVE "ASUDN2TB" TO LS-ASMODULE
906400       CALL LS-ASMODULE
906500            USING ASCA-COMMAREA
906600                  AS-REQUEST-OPTIONS
906700                  SOURCE-STRING
906800                  TEMPLATE-COUNT
906900                  TEMPLATE-25
907000                  AS5CTOK-OCTOKEN
907100     END-IF
907200
907300     MOVE ZERO TO LS-ENCLAVE-RC
907400     MOVE "CEE3GRC" TO LS-LEMODULE
907500     CALL LS-LEMODULE
907600          USING LS-ENCLAVE-RC
907700                OMITTED
907800     IF LS-ENCLAVE-RC > ZERO
907900       DISPLAY WS-PGMID
908000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
908100     END-IF
908200
908300     IF AS5CTOK-SEVNBR > ZERO
908400       DISPLAY WS-PGMID
908500            " RETURN CODE: " AS5CTOK-SEVNBR
908600            " MESSAGE NBR: " AS5CTOK-MSGNBR
908700     END-IF
908800
908900     DISPLAY WS-PGMID
909000          " TEST CASE 092.L - NBR-2-CHK (ED 0123,456 )"
909100     DISPLAY WS-PGMID
909200          " MIXED CASE / NO CASE"
909300     DISPLAY WS-PGMID
909400          " SOURCE:" SRC-TXT
909500     DISPLAY WS-PGMID
909600          " OUTPUT LEN (64):" TMPLT-25-LEN
909700     DISPLAY WS-PGMID
909800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
909900     DISPLAY WS-PGMID
910000          " "
910100          TMPLT-25-TXT-Z
910200     DISPLAY " "
910300     SKIP2
910400*    * ------------------------------------------------------- *
910500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
910600*    *   FORMAT: WORD, CURRENCY, CHECK
910700*    * ------------------------------------------------------- *
910800     SKIP1
910900     MOVE ZERO TO RO-START
911000                  RO-COUNT
911100                  RO-PSA-LEN
911200     SET RO-FLAG-NONE  TO TRUE
911300*    SET NUMBER TO WORD CONVERSION
911400     MOVE X'20' TO RO-OPTION-FLAG
911500     MOVE +2   TO RO-COUNT
911600     MOVE WS-SOURCE-STRING-33 TO SOURCE-STRING
911700*    "0.75"
911800     MOVE +1   TO TEMPLATE-COUNT
911900     MOVE ZERO TO TMPLT-25-LEN
912000     MOVE LOW-VALUE TO TMPLT-25-TXT
912100     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
912200     IF PACKAGE-CALL
912300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
912400       CONTINUE
912500     ELSE
912600       MOVE "ASUDN2TB" TO LS-ASMODULE
912700       CALL LS-ASMODULE
912800            USING ASCA-COMMAREA
912900                  AS-REQUEST-OPTIONS
913000                  SOURCE-STRING
913100                  TEMPLATE-COUNT
913200                  TEMPLATE-25
913300                  AS5CTOK-OCTOKEN
913400     END-IF
913500
913600     MOVE ZERO TO LS-ENCLAVE-RC
913700     MOVE "CEE3GRC" TO LS-LEMODULE
913800     CALL LS-LEMODULE
913900          USING LS-ENCLAVE-RC
914000                OMITTED
914100     IF LS-ENCLAVE-RC > ZERO
914200       DISPLAY WS-PGMID
914300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
914400     END-IF
914500
914600     IF AS5CTOK-SEVNBR > ZERO
914700       DISPLAY WS-PGMID
914800            " RETURN CODE: " AS5CTOK-SEVNBR
914900            " MESSAGE NBR: " AS5CTOK-MSGNBR
915000     END-IF
915100
915200     DISPLAY WS-PGMID
915300          " TEST CASE 092.M - NBR-2-WRD (ED 0.75)"
915400     DISPLAY WS-PGMID
915500          " MIXED CASE / NO CASE"
915600     DISPLAY WS-PGMID
915700          " SOURCE:" SRC-TXT
915800     DISPLAY WS-PGMID
915900          " OUTPUT LEN (32):" TMPLT-25-LEN
916000     DISPLAY WS-PGMID
916100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
916200     DISPLAY WS-PGMID
916300          " "
916400          TMPLT-25-TXT-Z
916500     DISPLAY " "
916600     SKIP2
916700*    * ------------------------------------------------------- *
916800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
916900*    *   FORMAT: WORD, CURRENCY, CHECK
917000*    * ------------------------------------------------------- *
917100     SKIP1
917200     MOVE ZERO TO RO-START
917300                  RO-COUNT
917400                  RO-PSA-LEN
917500     SET RO-FLAG-NONE  TO TRUE
917600*    SET NUMBER TO CURRENCY CONVERSION
917700     MOVE X'10' TO RO-OPTION-FLAG
917800     MOVE +2   TO RO-COUNT
917900     MOVE WS-SOURCE-STRING-33 TO SOURCE-STRING
918000*    "0.75"
918100     MOVE +1   TO TEMPLATE-COUNT
918200     MOVE ZERO TO TMPLT-25-LEN
918300     MOVE LOW-VALUE TO TMPLT-25-TXT
918400     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
918500     IF PACKAGE-CALL
918600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
918700       CONTINUE
918800     ELSE
918900       MOVE "ASUDN2TB" TO LS-ASMODULE
919000       CALL LS-ASMODULE
919100            USING ASCA-COMMAREA
919200                  AS-REQUEST-OPTIONS
919300                  SOURCE-STRING
919400                  TEMPLATE-COUNT
919500                  TEMPLATE-25
919600                  AS5CTOK-OCTOKEN
919700     END-IF
919800
919900     MOVE ZERO TO LS-ENCLAVE-RC
920000     MOVE "CEE3GRC" TO LS-LEMODULE
920100     CALL LS-LEMODULE
920200          USING LS-ENCLAVE-RC
920300                OMITTED
920400     IF LS-ENCLAVE-RC > ZERO
920500       DISPLAY WS-PGMID
920600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
920700     END-IF
920800
920900     IF AS5CTOK-SEVNBR > ZERO
921000       DISPLAY WS-PGMID
921100            " RETURN CODE: " AS5CTOK-SEVNBR
921200            " MESSAGE NBR: " AS5CTOK-MSGNBR
921300     END-IF
921400
921500     DISPLAY WS-PGMID
921600          " TEST CASE 092.N - NBR-2-CUR (ED 0.75)"
921700     DISPLAY WS-PGMID
921800          " MIXED CASE / NO CASE"
921900     DISPLAY WS-PGMID
922000          " SOURCE:" SRC-TXT
922100     DISPLAY WS-PGMID
922200          " OUTPUT LEN (35):" TMPLT-25-LEN
922300     DISPLAY WS-PGMID
922400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
922500     DISPLAY WS-PGMID
922600          " "
922700          TMPLT-25-TXT-Z
922800     DISPLAY " "
922900     SKIP2
923000*    * ------------------------------------------------------- *
923100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
923200*    *   FORMAT: WORD, CURRENCY, CHECK
923300*    * ------------------------------------------------------- *
923400     SKIP1
923500     MOVE ZERO TO RO-START
923600                  RO-COUNT
923700                  RO-PSA-LEN
923800     SET RO-FLAG-NONE  TO TRUE
923900     MOVE +2   TO RO-COUNT
924000     MOVE WS-SOURCE-STRING-33 TO SOURCE-STRING
924100*    "0.75"
924200     MOVE +1   TO TEMPLATE-COUNT
924300     MOVE ZERO TO TMPLT-25-LEN
924400     MOVE LOW-VALUE TO TMPLT-25-TXT
924500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
924600     IF PACKAGE-CALL
924700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
924800       CONTINUE
924900     ELSE
925000       MOVE "ASUDN2TB" TO LS-ASMODULE
925100       CALL LS-ASMODULE
925200            USING ASCA-COMMAREA
925300                  AS-REQUEST-OPTIONS
925400                  SOURCE-STRING
925500                  TEMPLATE-COUNT
925600                  TEMPLATE-25
925700                  AS5CTOK-OCTOKEN
925800     END-IF
925900
926000     MOVE ZERO TO LS-ENCLAVE-RC
926100     MOVE "CEE3GRC" TO LS-LEMODULE
926200     CALL LS-LEMODULE
926300          USING LS-ENCLAVE-RC
926400                OMITTED
926500     IF LS-ENCLAVE-RC > ZERO
926600       DISPLAY WS-PGMID
926700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
926800     END-IF
926900
927000     IF AS5CTOK-SEVNBR > ZERO
927100       DISPLAY WS-PGMID
927200            " RETURN CODE: " AS5CTOK-SEVNBR
927300            " MESSAGE NBR: " AS5CTOK-MSGNBR
927400     END-IF
927500
927600     DISPLAY WS-PGMID
927700          " TEST CASE 092.O - NBR-2-CHK (ED 0.75)"
927800     DISPLAY WS-PGMID
927900          " MIXED CASE / NO CASE"
928000     DISPLAY WS-PGMID
928100          " SOURCE:" SRC-TXT
928200     DISPLAY WS-PGMID
928300          " OUTPUT LEN (23):" TMPLT-25-LEN
928400     DISPLAY WS-PGMID
928500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
928600     DISPLAY WS-PGMID
928700          " "
928800          TMPLT-25-TXT-Z
928900     DISPLAY " "
929000     SKIP2
929100     CONTINUE.
929200 TEST-CASE-093.
929300
929400     IF NOT (TEST-CASE = "ALL" OR "093")
929500       GO TO TEST-CASE-094
929600     END-IF
929700
929800     IF PACKAGE-CALL
929900       GO TO TEST-CASE-094
930000     END-IF
930100
930200*    * ------------------------------------------------------- *
930300*    * CALL STRING SERVICE NBROF
930400*    * IMPLEMENT BOYER-MOORE FIND
930500*    * ------------------------------------------------------- *
930600     SKIP1
930700     MOVE ZERO TO RO-START
930800                  RO-COUNT
930900                  RO-PSA-LEN
931000     SET RO-FLAG-NONE TO TRUE
931100     MOVE +288 TO RO-PSA-LEN
931200     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
931300*    "+How+now+brown+cow++"
931400     MOVE +2   TO TEMPLATE-COUNT
931500     MOVE ZERO TO TMPLT-2-LEN
931600     MOVE ZERO TO TMPLT-2-TXT
931700     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
931800     IF PACKAGE-CALL
931900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
932000       CONTINUE
932100     ELSE
932200       MOVE "ASUDNOFB" TO LS-ASMODULE
932300       CALL LS-ASMODULE
932400            USING ASCA-COMMAREA
932500                  AS-REQUEST-OPTIONS
932600                  SOURCE-STRING
932700                  TEMPLATE-COUNT
932800                  TEMPLATE-23
932900                  TEMPLATE-2
933000                  OMITTED
933100**                OMITTED
933200**                AS5CTOK-OCTOKEN
933300     END-IF
933400
933500     MOVE ZERO TO LS-ENCLAVE-RC
933600     MOVE "CEE3GRC" TO LS-LEMODULE
933700     CALL LS-LEMODULE
933800          USING LS-ENCLAVE-RC
933900                OMITTED
934000     IF LS-ENCLAVE-RC > ZERO
934100       DISPLAY WS-PGMID
934200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
934300     END-IF
934400
934500     DISPLAY WS-PGMID
934600          " TEST CASE 093.A NBROF"
934700     DISPLAY WS-PGMID
934800          " MIXED CASE / MIXED CASE"
934900     DISPLAY WS-PGMID
935000          " SOURCE:" SRC-TXT
935100     DISPLAY WS-PGMID
935200          " ARGUMENT:" TMPLT-23-TXT
935300     DISPLAY WS-PGMID
935400          " NBROF CALL (1) (16):" TMPLT-2-TXT
935500     DISPLAY WS-PGMID
935600          " "
935700          TMPLT-2-TXT-Z
935800     DISPLAY " "
935900     SKIP2
936000*    * ------------------------------------------------------- *
936100*    * CALL STRING SERVICE NBROF
936200*    * IMPLEMENT BOYER-MOORE FIND
936300*    * ------------------------------------------------------- *
936400     SKIP1
936500     MOVE ZERO TO RO-START
936600                  RO-COUNT
936700                  RO-PSA-LEN
936800     SET RO-FLAG-NONE TO TRUE
936900     MOVE +288 TO RO-PSA-LEN
937000     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
937100*    "+How+now+brown+cow++"
937200     MOVE +2   TO TEMPLATE-COUNT
937300     MOVE ZERO TO TMPLT-2-LEN
937400     MOVE ZERO TO TMPLT-2-TXT
937500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
937600     IF PACKAGE-CALL
937700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
937800       CONTINUE
937900     ELSE
938000       MOVE "ASUDNOFB" TO LS-ASMODULE
938100       CALL LS-ASMODULE
938200            USING ASCA-COMMAREA
938300                  AS-REQUEST-OPTIONS
938400                  SOURCE-STRING
938500                  TEMPLATE-COUNT
938600                  TEMPLATE-24
938700                  TEMPLATE-2
938800                  OMITTED
938900**                OMITTED
939000**                AS5CTOK-OCTOKEN
939100     END-IF
939200
939300     MOVE ZERO TO LS-ENCLAVE-RC
939400     MOVE "CEE3GRC" TO LS-LEMODULE
939500     CALL LS-LEMODULE
939600          USING LS-ENCLAVE-RC
939700                OMITTED
939800     IF LS-ENCLAVE-RC > ZERO
939900       DISPLAY WS-PGMID
940000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
940100     END-IF
940200
940300     DISPLAY WS-PGMID
940400          " TEST CASE 093.B NBROF"
940500     DISPLAY WS-PGMID
940600          " MIXED CASE / MIXED CASE"
940700     DISPLAY WS-PGMID
940800          " SOURCE:" SRC-TXT
940900     DISPLAY WS-PGMID
941000          " ARGUMENT:" TMPLT-24-TXT
941100     DISPLAY WS-PGMID
941200          " NBROF CALL (1) (6):" TMPLT-2-TXT
941300     DISPLAY WS-PGMID
941400          " "
941500          TMPLT-2-TXT-Z
941600     DISPLAY " "
941700     SKIP2
941800*    * ------------------------------------------------------- *
941900*    * CALL STRING SERVICE NBROF
942000*    * IMPLEMENT BOYER-MOORE FIND
942100*    * ------------------------------------------------------- *
942200     SKIP1
942300     MOVE ZERO TO RO-START
942400                  RO-COUNT
942500                  RO-PSA-LEN
942600     SET RO-FLAG-CASE TO TRUE
942700     MOVE +288 TO RO-PSA-LEN
942800     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
942900*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
943000     MOVE +3   TO TEMPLATE-COUNT
943100     MOVE ZERO TO TMPLT-2-LEN
943200     MOVE ZERO TO TMPLT-2-TXT
943300     MOVE ZERO TO TMPLT-25-LEN
943400     MOVE LOW-VALUE TO TMPLT-25-TXT
943500     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
943600     IF PACKAGE-CALL
943700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
943800       CONTINUE
943900     ELSE
944000       MOVE "ASUDNOFB" TO LS-ASMODULE
944100       CALL LS-ASMODULE
944200            USING ASCA-COMMAREA
944300                  AS-REQUEST-OPTIONS
944400                  SOURCE-STRING
944500                  TEMPLATE-COUNT
944600                  TEMPLATE-4
944700                  TEMPLATE-2
944800                  TEMPLATE-25
944900**                OMITTED
945000**                AS5CTOK-OCTOKEN
945100     END-IF
945200
945300     MOVE ZERO TO LS-ENCLAVE-RC
945400     MOVE "CEE3GRC" TO LS-LEMODULE
945500     CALL LS-LEMODULE
945600          USING LS-ENCLAVE-RC
945700                OMITTED
945800     IF LS-ENCLAVE-RC > ZERO
945900       DISPLAY WS-PGMID
946000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
946100     END-IF
946200
946300     DISPLAY WS-PGMID
946400          " TEST CASE 093.C NBROF"
946500     DISPLAY WS-PGMID
946600          " MIXED CASE / UPPER CASE / CASE INSENSITIVE"
946700     DISPLAY WS-PGMID
946800          " SOURCE:" SRC-TXT
946900     DISPLAY WS-PGMID
947000          " ARGUMENT:" TMPLT-4-TXT
947100     DISPLAY WS-PGMID
947200          " NBROF CALL (5) (30,34,38,41,45,0):" TMPLT-2-TXT
947300     DISPLAY WS-PGMID
947400          " "
947500          TMPLT-2-TXT-Z
947600     PERFORM
947700          VARYING LOOP-COUNT FROM +1 BY +1
947800          UNTIL LOOP-COUNT > TMPLT-2-TXT
947900       DISPLAY WS-PGMID
948000            " NBROF POS:" TMPLT-25-POS (LOOP-COUNT)
948100     END-PERFORM
948200     DISPLAY WS-PGMID
948300          " "
948400          TMPLT-25-TXT-Z
948500     DISPLAY " "
948600     SKIP2
948700     CONTINUE.
948800 TEST-CASE-094.
948900
949000     IF NOT (TEST-CASE = "ALL" OR "094")
949100       GO TO TEST-CASE-999
949200     END-IF
949300
949400     SKIP2
949500     CONTINUE.
949600 TEST-CASE-999.
949700
949800     GO TO 0200-00-INPUT
949900     SKIP2
950000     CONTINUE.
950100 9000-00-RETURN.
950200*    * ------------------------------------------------------- *
950300*    * RETURN TO CALLER
950400*    * ------------------------------------------------------- *
950500     SKIP1
950600     EXIT PROGRAM.
950700     GOBACK.
./ ADD NAME=ASTSVC1B 0135-17340-19246-1346-00987-00654-00000-APLKS   44
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSVC1B.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **                      *
000700*                                                              *
000800* ASTSVC1B test LE callable services                           *
000900*    NAME: ASTSVC1B                                            *
001000*    APPL: Architecture Services Utility                       *
001100*    DESC: Test program to access LE services                  *
001200*          & ASU date services.                                *
001300* PURPOSE: Program to drive the ASU date services.             *
001400*                                                              *
001500* Called Routine(s):                                           *
001600*    ASUMETXT                                                  *
001700*    ASUMDHEX                                                  *
001800*    ASTDATEB                                                  *
001900*    ASU3QEIB                                                  *
002000*    CEEFMDA                                                   *
002100*    CEEFMDT                                                   *
002200*    CEEFMTM                                                   *
002300*    CEEGPID                                                   *
002400*    CEEMOUT                                                   *
002500*    CEEQCEN                                                   *
002600*    CEESETL                                                   *
002700*    CEE3CTY                                                   *
002800*    CEE3LNG                                                   *
002900*    CEE3MCS                                                   *
003000*    CEE3MDS                                                   *
003100*    CEE3MTS                                                   *
003200*    CEE3PRM                                                   *
003300*    CEE3RPH                                                   *
003400*    GETENV()                                                  *
003500*    TIME()        retrieve time in seconds from 19700101      *
003600*    CTIME()       return time as a char string 26             *
003700*                                                              *
003800*--------------------------------------------------------------*
003900     SKIP2
004000*--------------------------------------------------------------*
004100*               ** HISTORY OF REVISIONS **                     *
004200* DESCRIPTION                                           CHNGID *
004300* ____________________________________________________  _______*
004400*                                                              *
004500* 10/17/01 NEW                                                 *
004600*                                                              *
004700*--------------------------------------------------------------*
004800     SKIP2
004900 DATA DIVISION.
005000     SKIP2
005100 WORKING-STORAGE SECTION.
005200 01  FILLER.
005300     03  WS-EYE-CATCHER PIC X(25)
005400              VALUE "BUZZARD CREEK TECH, INC. ".
005500     03  WS-PGMID       PIC X(08) VALUE 'ASTSVC1B'.
005600
005700 01  WS-NULL-CNTRY-CODE PIC X(02) VALUE SPACE.
005800 01  WS-PRT-HD          PIC X(80) VALUE 'THIS IS FOR ASTSVC1B'.
005900 01  KEYWORD-LE-ENVAR-1 PIC X(03) VALUE Z'TZ'.
006000
006100     COPY CEEIGZLC.
006200
006300     COPY AS5FDBK.
006400
006500     COPY AS5ENVCA.
006600     SKIP2
006700 LOCAL-STORAGE SECTION.
006800 01  LS-VAR-PTR         POINTER.
006900 01  LS-VAR-PTR1        POINTER.
007000 01  XS-VAR-PTR         POINTER.
007100 01  LS-ASCA-PTR        POINTER.
007200
007300 01  LS-FWORD-1         PIC  9(9) BINARY.
007400 01  FILLER REDEFINES LS-FWORD-1.
007500     03  FILLER         PIC X(01).
007600     03  LS-BYTE-12     PIC X(01).
007700     03  LS-BYTE-13     PIC X(01).
007800     03  LS-BYTE-14     PIC X(01).
007900 01  FILLER REDEFINES LS-FWORD-1.
008000     03  LS-HWORD-11    PIC  9(4) BINARY.
008100     03  LS-HWORD-12    PIC  9(4) BINARY.
008200 01  LS-FWORD-2         PIC  9(9) BINARY.
008300 01  FILLER REDEFINES LS-FWORD-2.
008400     03  FILLER         PIC X(03).
008500     03  LS-BYTE-24     PIC X(01).
008600 01  LS-ZDEC-1          PIC  9(2).
008700 01  LS-ZDEC-2          PIC  9(4).
008800
008900 01  LS-USER-MSG-VSTRING.
009000     03  LS-USER-MSG-LEN     PIC S9(4) BINARY.
009100     03  LS-USER-MSG-TEXT    PIC X(120).
009200
009300 01  LS-VSTR.
009400     03  LS-VLEN        PIC S9(4) BINARY.
009500     03  LS-VTXT        PIC X(80).
009600
009700 01  LS-MISC-STORAGE.
009800     03  LS-LESECS1     COMP-2 SYNC.
009900     03  LS-LESECS2     COMP-2 SYNC.
010000     03  LS-LEFUNCT     PIC  9(9) BINARY.
010100     03  LS-LEPLATFORM  PIC  9(9) BINARY.
010200     03  LS-LEMSGDEST   PIC S9(9) BINARY.
010300     03  LS-LELILIAN    PIC S9(9) BINARY.
010400     03  LS-LEYEAR      PIC S9(9) BINARY.
010500     03  LS-LEMONTH     PIC S9(9) BINARY.
010600     03  LS-LEDAY       PIC S9(9) BINARY.
010700     03  LS-LEHOUR      PIC S9(9) BINARY.
010800     03  LS-LEMINUTE    PIC S9(9) BINARY.
010900     03  LS-LESECOND    PIC S9(9) BINARY.
011000     03  LS-LEMILLISEC  PIC S9(9) BINARY.
011100     03  LS-LEVERSION   PIC X(06).
011200     03  LS-ASMODULE    PIC X(08).
011300     03  LE-PARM-STR         PIC X(80).
011400     03  LE-DATE-PIC-STR     PIC X(80).
011500     03  LE-DTTM-PIC-STR     PIC X(80).
011600     03  LE-TIME-PIC-STR     PIC X(80).
011700
011800 01  ASUDATE-ACTION.
011900     03  I-DATE-ACTION  PIC S9(9) BINARY.
012000       88 I-ACTION-QUERY    VALUE +002.
012100       88 I-ACTION-DIFF     VALUE +005.
012200       88 I-ACTION-INCR     VALUE +006.
012300       88 I-ACTION-DECR     VALUE +007.
012400       88 I-ACTION-FORMAT   VALUE +008.
012500
012600 01  ASUDATE-INPUT.
012700     03  I-DATE-CALENDAR     PIC X(01).
012800       88 I-CALENDAR-DEFAULT     VALUE ' '.
012900       88 I-CALENDAR-ACTUAL      VALUE 'A'.
013000       88 I-CALENDAR-BUSINESS    VALUE 'B'.
013100       88 I-CALENDAR-360         VALUE 'C'.
013200     03  I-DATE-FLDMOD       PIC X(01).
013300       88 I-FLDMOD-DEFAULT       VALUE ' '.
013400       88 I-FLDMOD-DAY           VALUE 'D'.
013500       88 I-FLDMOD-MONTH         VALUE 'M'.
013600       88 I-FLDMOD-WEEK          VALUE 'W'.
013700     03  I-DATE-INCLUDE      PIC X(01).
013800       88 I-INCLUDE-DEFAULT      VALUE ' '.
013900       88 I-INCLUDE-BOTH         VALUE 'B'.
014000       88 I-INCLUDE-FIRST        VALUE 'F'.
014100       88 I-INCLUDE-LAST         VALUE 'L'.
014200       88 I-INCLUDE-NONE         VALUE 'N'.
014300     03  I-DTTM-A            PIC X(14).
014400     03  I-DATE-A-FORMAT     PIC S9(2) BINARY.
014500       88 I-A-FORMAT-YYDDD       VALUE +01.
014600       88 I-A-FORMAT-YYYYDDD     VALUE +02.
014700       88 I-A-FORMAT-DDDYY       VALUE +03.
014800       88 I-A-FORMAT-DDDYYYY     VALUE +04.
014900       88 I-A-FORMAT-YYMMDD      VALUE +10.
015000       88 I-A-FORMAT-YYYYMMDD    VALUE +11.
015100       88 I-A-FORMAT-MMDDYY      VALUE +12.
015200       88 I-A-FORMAT-MMDDYYYY    VALUE +13.
015300       88 I-A-FORMAT-DDMMYY      VALUE +14.
015400       88 I-A-FORMAT-DDMMYYYY    VALUE +15.
015500     03  I-DTTM-B       PIC X(14).
015600     03  I-DATE-B-FORMAT     PIC S9(2) BINARY.
015700       88 I-B-FORMAT-YYDDD       VALUE +01.
015800       88 I-B-FORMAT-YYYYDDD     VALUE +02.
015900       88 I-B-FORMAT-DDDYY       VALUE +03.
016000       88 I-B-FORMAT-DDDYYYY     VALUE +04.
016100       88 I-B-FORMAT-YYMMDD      VALUE +10.
016200       88 I-B-FORMAT-YYYYMMDD    VALUE +11.
016300       88 I-B-FORMAT-MMDDYY      VALUE +12.
016400       88 I-B-FORMAT-MMDDYYYY    VALUE +13.
016500       88 I-B-FORMAT-DDMMYY      VALUE +14.
016600       88 I-B-FORMAT-DDMMYYYY    VALUE +15.
016700     03  I-DATE-INCR-DECR    PIC S9(9) BINARY.
016800     03  I-DATE-FULL-MASK.
016900         05  I-DATE-FULL-MASK-VLEN     PIC S9(4) BINARY.
017000         05  I-DATE-FULL-MASK-VSTR     PIC X(80).
017100     03  I-DATE-ABBR-MASK.
017200         05  I-DATE-ABBR-MASK-VLEN     PIC S9(4) BINARY.
017300         05  I-DATE-ABBR-MASK-VSTR     PIC X(80).
017400
017500 01  ASUDATE-OUTPUT.
017600     03  O-DATE         PIC X(10).
017700     03  O-DATE-CMPR-FLAG    PIC X(02).
017800       88 O-CMPR-FLAG-LT         VALUE 'LT'.
017900       88 O-CMPR-FLAG-EQ         VALUE 'EQ'.
018000       88 O-CMPR-FLAG-GT         VALUE 'GT'.
018100     03  O-DATE-DIFF    PIC S9(9) BINARY.
018200     03  O-DOW          PIC S9(9) BINARY.
018300     03  O-DOW-OCCUR    PIC S9(9) BINARY.
018400     03  O-DATE-FULL-STR.
018500         05  O-DATE-FULL-VLEN     PIC S9(4) BINARY.
018600         05  O-DATE-FULL-VTXT     PIC X(80).
018700     03  O-DATE-ABBR-STR.
018800         05  O-DATE-ABBR-VLEN     PIC S9(4) BINARY.
018900         05  O-DATE-ABBR-VTXT     PIC X(80).
019000
019100     COPY AS5CTOK.
019200
019300     COPY AS5MSGRB.
019400
019500     COPY AS5DMPRB.
019600     EJECT
019700 LINKAGE SECTION.
019800     COPY AS5CA.
019900     SKIP1
020000 01  LE-ENV-VAR         PIC X(256).
020100     EJECT
020200 PROCEDURE DIVISION USING
020300     ASCA-COMMAREA.
020400
020500     CONTINUE.
020600 0000-00-INITIAL.
020700     DISPLAY WS-PGMID
020800          " Testing ASU services"
020900     SKIP2
021000*    * ------------------------------------------------------- *
021100*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
021200*    * ------------------------------------------------------- *
021300
021400     SET LS-ASCA-PTR TO NULL
021500     MOVE "ASU3I01B" TO LS-ASMODULE
021600     CALL LS-ASMODULE
021700          USING LS-ASCA-PTR
021800**              AS5FDBK-COND-AREA
021900                OMITTED
022000
022100     IF LS-ASCA-PTR = NULL
022200       DISPLAY WS-PGMID
022300            " ASU3I01B failed to create the ASCA"
022400       GOBACK
022500     END-IF
022600
022700     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
022800     DISPLAY " "
022900
023000*    DUMP AS5CA COMMUNICATION AREA
023100     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
023200     MOVE +1 TO AS5DMPRB-NUMBER
023300     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
023400     MOVE "ASUMDHEX" TO LS-ASMODULE
023500     CALL LS-ASMODULE
023600          USING ASCA-COMMAREA
023700                AS5DMPRB-REQUEST-BLOCK
023800                ASCA-COMMAREA
023900**              AS5FDBK-COND-AREA
024000                OMITTED
024100
024200     DISPLAY ' '
024300
024400     CONTINUE.
024500 0100-00-MAINLINE.
024600     INITIALIZE AS5ENVCA-COMMAREA
024700
024800     INITIALIZE LS-MISC-STORAGE
024900     MOVE +2 TO LS-LEMSGDEST
025000     INITIALIZE ASUDATE-ACTION
025100     INITIALIZE ASUDATE-INPUT
025200     INITIALIZE ASUDATE-OUTPUT
025300
025400     PERFORM 1000-00-INITIAL
025500     PERFORM 2000-00-TEST-DATE
025600     DISPLAY WS-PGMID
025700          ' STOP RUN/GOBACK/EXIT'
025800     GOBACK
025900
026000     CONTINUE.
026100 1000-00-INITIAL.
026200*    CALL CEE3RPH TO SET LE STORAGE REPORT HEADING
026300     CALL 'CEE3RPH'
026400          USING WS-PRT-HD
026500**              AS5FDBK-COND-AREA
026600                OMITTED
026700
026800*    CALL CEEGPID TO RETURN THE LE VERSION AND PLATFORM ID
026900     CALL 'CEEGPID'
027000          USING LS-FWORD-1
027100                LS-LEPLATFORM
027200**              AS5FDBK-COND-AREA
027300                OMITTED
027400
027500     MOVE ZERO TO LS-FWORD-2 LS-ZDEC-1
027600     MOVE LS-BYTE-12 TO LS-BYTE-24
027700     MOVE LS-FWORD-2 TO LS-ZDEC-1
027800     MOVE LS-ZDEC-1  TO LS-LEVERSION (1:2)
027900     MOVE LS-BYTE-13 TO LS-BYTE-24
028000     MOVE LS-FWORD-2 TO LS-ZDEC-1
028100     MOVE LS-ZDEC-1  TO LS-LEVERSION (3:2)
028200     MOVE LS-BYTE-14 TO LS-BYTE-24
028300     MOVE LS-FWORD-2 TO LS-ZDEC-1
028400     MOVE LS-ZDEC-1  TO LS-LEVERSION (5:2)
028500     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
028600     STRING WS-PGMID
028700          ' CURRENTLY RUNNING VERSION '
028800          LS-LEVERSION
028900          ' OF IBM LE '
029000          DELIMITED SIZE INTO LS-USER-MSG-TEXT
029100     END-STRING
029200     MOVE ZERO TO LS-HWORD-11
029300     INSPECT LS-USER-MSG-TEXT
029400          TALLYING LS-HWORD-11
029500          FOR CHARACTERS BEFORE INITIAL X'00'
029600     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
029700*    CALL CEEMOUT TO PRINT MESSAGE
029800     CALL 'CEEMOUT'
029900          USING LS-USER-MSG-VSTRING
030000                LS-LEMSGDEST
030100**              AS5FDBK-COND-AREA
030200                OMITTED
030300
030400     EVALUATE LS-LEPLATFORM
030500       WHEN 2
030600         DISPLAY WS-PGMID ' UNDER OS/2'
030700       WHEN 3
030800         DISPLAY WS-PGMID ' UNDER MVS/VM/370'
030900       WHEN 4
031000         DISPLAY WS-PGMID ' UNDER AN AS/400'
031100       WHEN 5
031200         DISPLAY WS-PGMID ' UNDER VSE'
031300       WHEN NOT 2 THRU 5
031400         DISPLAY WS-PGMID ' UNKNOWN'
031500     END-EVALUATE
031600
031700*    CALL CEE3CTY TO RETURN THE LE COUNTRY CODE
031800     MOVE 2 TO LS-LEFUNCT
031900     CALL 'CEE3CTY'
032000          USING LS-LEFUNCT
032100                ASCA-CNTRY
032200**              AS5FDBK-COND-AREA
032300                OMITTED
032400
032500     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING.
032600     STRING WS-PGMID
032700          ' THE COUNTRY CODE IS '
032800          ASCA-CNTRY
032900          DELIMITED SIZE INTO LS-USER-MSG-TEXT
033000     END-STRING
033100     MOVE ZERO TO LS-HWORD-11
033200     INSPECT LS-USER-MSG-TEXT
033300          TALLYING LS-HWORD-11
033400          FOR CHARACTERS BEFORE INITIAL X'00'
033500     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
033600*    CALL CEEMOUT TO PRINT MESSAGE
033700     CALL 'CEEMOUT'
033800          USING LS-USER-MSG-VSTRING
033900                LS-LEMSGDEST
034000**              AS5FDBK-COND-AREA
034100                OMITTED
034200
034300*    CALL CEE3LNG TO RETURN THE LE NATIONAL LANGUAGE
034400     MOVE 2 TO LS-LEFUNCT
034500     CALL 'CEE3LNG'
034600          USING LS-LEFUNCT
034700                ASCA-NATL-LANG
034800**              AS5FDBK-COND-AREA
034900                OMITTED
035000
035100     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
035200     STRING WS-PGMID
035300          ' THE LANGUAGE CODE IS '
035400          ASCA-NATL-LANG
035500          DELIMITED SIZE INTO LS-USER-MSG-TEXT
035600     END-STRING
035700     MOVE ZERO TO LS-HWORD-11
035800     INSPECT LS-USER-MSG-TEXT
035900          TALLYING LS-HWORD-11
036000          FOR CHARACTERS BEFORE INITIAL X'00'
036100     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
036200*    CALL CEEMOUT TO PRINT MESSAGE
036300     CALL 'CEEMOUT'
036400          USING LS-USER-MSG-VSTRING
036500                LS-LEMSGDEST
036600**              AS5FDBK-COND-AREA
036700                OMITTED
036800
036900*    CALL CEE3MCS TO RETURN THE LE CURRENCY SYMBOL
037000     MOVE ZERO TO LS-LEFUNCT
037100     CALL 'CEE3MCS'
037200          USING WS-NULL-CNTRY-CODE
037300                ASCA-CNTRY-MCS
037400**              AS5FDBK-COND-AREA
037500                OMITTED
037600
037700     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
037800     STRING WS-PGMID
037900          ' THE CURRENCY SYMBOL IS '
038000          ASCA-CNTRY-MCS
038100          DELIMITED SIZE INTO LS-USER-MSG-TEXT
038200     END-STRING
038300     MOVE ZERO TO LS-HWORD-11
038400     INSPECT LS-USER-MSG-TEXT
038500          TALLYING LS-HWORD-11
038600          FOR CHARACTERS BEFORE INITIAL X'00'
038700     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
038800*    CALL CEEMOUT TO PRINT MESSAGE
038900     CALL 'CEEMOUT'
039000          USING LS-USER-MSG-VSTRING
039100                LS-LEMSGDEST
039200**              AS5FDBK-COND-AREA
039300                OMITTED
039400
039500*    CALL CEE3MDS TO RETURN THE LE DECIMAL SYMBOL
039600     MOVE ZERO TO LS-LEFUNCT
039700     CALL 'CEE3MDS'
039800          USING WS-NULL-CNTRY-CODE
039900                ASCA-CNTRY-MDS
040000**              AS5FDBK-COND-AREA
040100                OMITTED
040200
040300     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
040400     STRING WS-PGMID
040500          ' THE DECIMAL SYMBOL IS '
040600          ASCA-CNTRY-MDS
040700          DELIMITED SIZE INTO LS-USER-MSG-TEXT
040800     END-STRING
040900     MOVE ZERO TO LS-HWORD-11
041000     INSPECT LS-USER-MSG-TEXT
041100          TALLYING LS-HWORD-11
041200          FOR CHARACTERS BEFORE INITIAL X'00'
041300     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
041400*    CALL CEEMOUT TO PRINT MESSAGE
041500     CALL 'CEEMOUT'
041600          USING LS-USER-MSG-VSTRING
041700                LS-LEMSGDEST
041800**              AS5FDBK-COND-AREA
041900                OMITTED
042000
042100*    CALL CEE3MTS TO RETURN THE LE THOUSANDS SYMBOL
042200     MOVE ZERO TO LS-LEFUNCT
042300     CALL 'CEE3MTS'
042400          USING WS-NULL-CNTRY-CODE
042500                ASCA-CNTRY-MTS
042600**              AS5FDBK-COND-AREA
042700                OMITTED
042800
042900     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
043000     STRING WS-PGMID
043100          ' THE THOUSANDS SYMBOL IS '
043200          ASCA-CNTRY-MTS
043300          DELIMITED SIZE INTO LS-USER-MSG-TEXT
043400     END-STRING
043500     MOVE ZERO TO LS-HWORD-11
043600     INSPECT LS-USER-MSG-TEXT
043700          TALLYING LS-HWORD-11
043800          FOR CHARACTERS BEFORE INITIAL X'00'
043900     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
044000*    CALL CEEMOUT TO PRINT MESSAGE
044100     CALL 'CEEMOUT'
044200          USING LS-USER-MSG-VSTRING
044300                LS-LEMSGDEST
044400**              AS5FDBK-COND-AREA
044500                OMITTED
044600
044700*    CALL CEE3PRM TO RETURN THE PARM= STATEMENT STRING
044800     MOVE ZERO TO LS-LEFUNCT
044900     CALL 'CEE3PRM'
045000          USING LE-PARM-STR
045100**              AS5FDBK-COND-AREA
045200                OMITTED
045300
045400     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
045500     STRING WS-PGMID
045600          ' THE PARM STRING IS '
045700          LE-PARM-STR
045800          DELIMITED SIZE INTO LS-USER-MSG-TEXT
045900     END-STRING
046000     MOVE ZERO TO LS-HWORD-11
046100     INSPECT LS-USER-MSG-TEXT
046200          TALLYING LS-HWORD-11
046300          FOR CHARACTERS BEFORE INITIAL X'00'
046400     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
046500*    CALL CEEMOUT TO PRINT MESSAGE
046600     CALL 'CEEMOUT'
046700          USING LS-USER-MSG-VSTRING
046800                LS-LEMSGDEST
046900**              AS5FDBK-COND-AREA
047000                OMITTED
047100
047200*    CALL CEEQCEN TO RETURN THE CENTURY WINDOW
047300     CALL 'CEEQCEN'
047400          USING LS-FWORD-1
047500**              AS5FDBK-COND-AREA
047600                OMITTED
047700
047800     MOVE LS-FWORD-1 TO LS-ZDEC-2
047900     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
048000     STRING WS-PGMID
048100          ' THE DEFAULT CENTURY WINDOW IS '
048200          LS-ZDEC-2
048300          DELIMITED SIZE INTO LS-USER-MSG-TEXT
048400     END-STRING
048500     MOVE ZERO TO LS-HWORD-11
048600     INSPECT LS-USER-MSG-TEXT
048700          TALLYING LS-HWORD-11
048800          FOR CHARACTERS BEFORE INITIAL X'00'
048900     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
049000*    CALL CEEMOUT TO PRINT MESSAGE
049100     CALL 'CEEMOUT'
049200          USING LS-USER-MSG-VSTRING
049300                LS-LEMSGDEST
049400**              AS5FDBK-COND-AREA
049500                OMITTED
049600
049700*    CALL CEEFMDA TO RETURN THE LE DATE FORMAT
049800     MOVE ZERO TO LS-LEFUNCT
049900     CALL 'CEEFMDA'
050000          USING WS-NULL-CNTRY-CODE
050100                LE-DATE-PIC-STR
050200**              AS5FDBK-COND-AREA
050300                OMITTED
050400
050500     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
050600     STRING WS-PGMID
050700          ' THE DEFAULT DATE FORMAT IS '
050800          LE-DATE-PIC-STR
050900          DELIMITED SIZE INTO LS-USER-MSG-TEXT
051000     END-STRING
051100     MOVE ZERO TO LS-HWORD-11
051200     INSPECT LS-USER-MSG-TEXT
051300          TALLYING LS-HWORD-11
051400          FOR CHARACTERS BEFORE INITIAL X'00'
051500     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
051600*    CALL CEEMOUT TO PRINT MESSAGE
051700     CALL 'CEEMOUT'
051800          USING LS-USER-MSG-VSTRING
051900                LS-LEMSGDEST
052000**              AS5FDBK-COND-AREA
052100                OMITTED
052200
052300*    CALL CEEFMDT TO RETURN THE LE DATE/TIME FORMAT
052400     MOVE ZERO TO LS-LEFUNCT
052500     CALL 'CEEFMDT'
052600          USING WS-NULL-CNTRY-CODE
052700                LE-DTTM-PIC-STR
052800**              AS5FDBK-COND-AREA
052900                OMITTED
053000
053100     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
053200     STRING WS-PGMID
053300          ' THE DEFAULT DATE/TIME FORMAT IS '
053400          LE-DTTM-PIC-STR
053500          DELIMITED SIZE INTO LS-USER-MSG-TEXT
053600     END-STRING
053700     MOVE ZERO TO LS-HWORD-11
053800     INSPECT LS-USER-MSG-TEXT
053900          TALLYING LS-HWORD-11
054000          FOR CHARACTERS BEFORE INITIAL X'00'
054100     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
054200*    CALL CEEMOUT TO PRINT MESSAGE
054300     CALL 'CEEMOUT'
054400          USING LS-USER-MSG-VSTRING
054500                LS-LEMSGDEST
054600**              AS5FDBK-COND-AREA
054700                OMITTED
054800
054900*    CALL CEEFMTM TO RETURN THE LE TIME FORMAT
055000     MOVE ZERO TO LS-LEFUNCT
055100     CALL 'CEEFMTM'
055200          USING WS-NULL-CNTRY-CODE
055300                LE-TIME-PIC-STR
055400**              AS5FDBK-COND-AREA
055500                OMITTED
055600
055700     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
055800     STRING WS-PGMID
055900          ' THE DEFAULT TIME FORMAT IS '
056000          LE-TIME-PIC-STR
056100          DELIMITED SIZE INTO LS-USER-MSG-TEXT
056200     END-STRING
056300     MOVE ZERO TO LS-HWORD-11
056400     INSPECT LS-USER-MSG-TEXT
056500          TALLYING LS-HWORD-11
056600          FOR CHARACTERS BEFORE INITIAL X'00'
056700     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
056800*    CALL CEEMOUT TO PRINT MESSAGE
056900     CALL 'CEEMOUT'
057000          USING LS-USER-MSG-VSTRING
057100                LS-LEMSGDEST
057200**              AS5FDBK-COND-AREA
057300                OMITTED
057400
057500*    CALL LE SERVICE(S) TO RETURN NBR OF SECONDS
057600*    FROM 15821014 TO 19700101
057700     MOVE 1970 TO LS-LEYEAR
057800     MOVE   01 TO LS-LEMONTH
057900     MOVE   01 TO LS-LEDAY
058000     MOVE ZERO TO LS-LEHOUR
058100                  LS-LEMINUTE
058200                  LS-LESECOND
058300                  LS-LEMILLISEC
058400     CALL 'CEEISEC'
058500          USING LS-LEYEAR
058600                LS-LEMONTH
058700                LS-LEDAY
058800                LS-LEHOUR
058900                LS-LEMINUTE
059000                LS-LESECOND
059100                LS-LEMILLISEC
059200                LS-LESECS2
059300**              AS5FDBK-COND-AREA
059400                OMITTED
059500
059600*    CALL LE SERVICE(S) TO RETURN NBR OF SECONDS FROM 15821014
059700     CALL 'CEEGMT'
059800          USING LS-LELILIAN
059900                LS-LESECS1
060000**              AS5FDBK-COND-AREA
060100                OMITTED
060200
060300     DISPLAY ' '
060400     DISPLAY WS-PGMID
060500          ' NBR OF SECONDS FROM 15821014 TO TODAY    = '
060600          LS-LESECS1
060700     DISPLAY WS-PGMID
060800          ' NBR OF SECONDS FROM 15821014 TO 19700101 = '
060900          LS-LESECS2
061000     COMPUTE LS-FWORD-2 = LS-LESECS1 - LS-LESECS2
061100     DISPLAY WS-PGMID
061200          ' NBR OF SECONDS FROM 19700101 = ' LS-FWORD-2
061300     DISPLAY ' '
061400
061500*    CALL C/C++ FUNCTION TO RETIEVE THE NBR SECS FROM 1970101
061600     MOVE ZERO TO LS-FWORD-1
061700     CALL 'TIME'
061800          USING BY VALUE ADDRESS OF LS-FWORD-1
061900     DISPLAY WS-PGMID
062000          ' NBR OF SECONDS FROM 19700101 = ' LS-FWORD-1
062100     CALL 'CTIME'
062200          USING BY VALUE ADDRESS OF LS-FWORD-1
062300          RETURNING LS-VAR-PTR1
062400     IF LS-VAR-PTR1 NOT = NULL
062500       SET ADDRESS OF LE-ENV-VAR TO LS-VAR-PTR1
062600       DISPLAY WS-PGMID
062700            ' DATE/TIME = ' LE-ENV-VAR (1:24)
062800     END-IF
062900
063000     DISPLAY ' '
063100
063200*    CALL C/C++ FUNCTION TO RETIEVE A LE ENV VARIABLE
063300     SET LS-VAR-PTR TO ADDRESS OF KEYWORD-LE-ENVAR-1
063400     CALL 'GETENV'
063500          USING BY VALUE LS-VAR-PTR
063600          RETURNING XS-VAR-PTR
063700     IF XS-VAR-PTR = NULL
063800       DISPLAY WS-PGMID
063900            ' ENV VAR TZ NOT FOUND'
064000     ELSE
064100       SET ADDRESS OF LE-ENV-VAR TO XS-VAR-PTR
064200       MOVE ZERO TO LS-HWORD-11
064300       INSPECT LE-ENV-VAR
064400            TALLYING LS-HWORD-11
064500            FOR CHARACTERS BEFORE INITIAL X'00'
064600       MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
064700       STRING WS-PGMID
064800            ' ENV VAR TZ IS '
064900            LE-ENV-VAR (1:LS-HWORD-11)
065000            DELIMITED SIZE INTO LS-USER-MSG-TEXT
065100       END-STRING
065200       MOVE ZERO TO LS-HWORD-11
065300       INSPECT LS-USER-MSG-TEXT
065400            TALLYING LS-HWORD-11
065500            FOR CHARACTERS BEFORE INITIAL X'00'
065600       MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
065700*      CALL CEEMOUT TO PRINT MESSAGE
065800       CALL 'CEEMOUT'
065900            USING LS-USER-MSG-VSTRING
066000                  LS-LEMSGDEST
066100**                AS5FDBK-COND-AREA
066200                  OMITTED
066300     END-IF
066400
066500*    CALL CEESETL TO SET THE LOCALE FOR DATE ROUTINE
066600     MOVE +14              TO LS-VLEN
066700     MOVE 'En_US.IBM-1047' TO LS-VTXT
066800**   MOVE +14              TO LS-VLEN
066900**   MOVE 'Es_CR.IBM-1047' TO LS-VTXT
067000     CALL 'CEESETL'
067100          USING LS-VSTR
067200                LC-ALL
067300**              AS5FDBK-COND-AREA
067400                OMITTED
067500
067600     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
067700     STRING WS-PGMID
067800          ' SET LOCALE TO: '
067900          LS-VTXT (1:LS-VLEN)
068000          DELIMITED SIZE INTO LS-USER-MSG-TEXT
068100     END-STRING
068200     MOVE ZERO TO LS-HWORD-11
068300     INSPECT LS-USER-MSG-TEXT
068400          TALLYING LS-HWORD-11
068500          FOR CHARACTERS BEFORE INITIAL X'00'
068600     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
068700*    CALL CEEMOUT TO PRINT MESSAGE
068800     CALL 'CEEMOUT'
068900          USING LS-USER-MSG-VSTRING
069000                LS-LEMSGDEST
069100**              AS5FDBK-COND-AREA
069200                OMITTED
069300
069400     DISPLAY ' '
069500
069600*    QUERY ENVIRONMENT INFORMATION
069700     MOVE WS-PGMID TO AS5ENVCA-CSV-IPGM
069800     MOVE 2 TO LS-LEFUNCT
069900     MOVE 'ASU3QEIB' TO LS-ASMODULE
070000     CALL LS-ASMODULE
070100          USING ASCA-COMMAREA
070200                LS-LEFUNCT
070300                AS5ENVCA-COMMAREA
070400**              AS5FDBK-COND-AREA
070500                OMITTED
070600
070700*    DUMP ASU3QEIB COMMUNICATION AREA
070800     MOVE LENGTH OF AS5ENVCA-COMMAREA TO AS5DMPRB-DATA-LEN
070900     MOVE +2 TO AS5DMPRB-NUMBER
071000     MOVE 'ENVIRONMENT INFORMATION' TO AS5DMPRB-TITLE
071100     MOVE 'ASUMDHEX' TO LS-ASMODULE
071200     CALL LS-ASMODULE
071300          USING ASCA-COMMAREA
071400                AS5DMPRB-REQUEST-BLOCK
071500                AS5ENVCA-COMMAREA
071600**              AS5FDBK-COND-AREA
071700                OMITTED
071800
071900     DISPLAY ' '
072000
072100*    QUERY ENVIRONMENT INFORMATION
072200     MOVE 5 TO LS-LEFUNCT
072300     MOVE 'ASU3QEIB' TO LS-ASMODULE
072400     CALL LS-ASMODULE
072500          USING ASCA-COMMAREA
072600                LS-LEFUNCT
072700                AS5ENVCA-COMMAREA
072800**              AS5FDBK-COND-AREA
072900                OMITTED
073000
073100     DISPLAY ' '
073200
073300     CONTINUE.
073400 1000-99-END.
073500     EXIT.
073600
073700     CONTINUE.
073800 2000-00-TEST-DATE.
073900*    TEST DATE QUERY
074000     DISPLAY WS-PGMID
074100          ' 1. TESTING DATE QUERY'
074200     SET I-ACTION-QUERY TO TRUE
074300     SET I-CALENDAR-ACTUAL TO TRUE
074400     SET I-FLDMOD-DAY TO TRUE
074500     SET I-INCLUDE-BOTH TO TRUE
074600     MOVE '12302004' TO I-DTTM-A
074700     SET I-A-FORMAT-MMDDYYYY TO TRUE
074800     MOVE 'ASTDATEB' TO LS-ASMODULE
074900     CALL LS-ASMODULE
075000          USING ASCA-COMMAREA
075100                ASUDATE-ACTION
075200                ASUDATE-INPUT
075300                ASUDATE-OUTPUT
075400                AS5FDBK-COND-AREA
075500**              OMITTED
075600
075700     DISPLAY WS-PGMID
075800          ' ACTUAL DAY BOTH 12302004 MMDDYYYY'
075900     DISPLAY WS-PGMID
076000          ' DATE QUERY = '
076100          I-DTTM-A
076200          '  COMPARE FLAG = '
076300          O-DATE-CMPR-FLAG
076400          '  DAY OF WEEK = '
076500          O-DOW
076600          '  DAY OF WEEK OCCUR = '
076700          O-DOW-OCCUR
076800     DISPLAY WS-PGMID
076900          ' FULL DATE: '
077000          O-DATE-FULL-VTXT (1:O-DATE-FULL-VLEN)
077100     DISPLAY WS-PGMID
077200          ' ABBR DATE: '
077300          O-DATE-ABBR-VTXT (1:O-DATE-ABBR-VLEN)
077400
077500     DISPLAY ' '
077600
077700*    TEST DATE QUERY
077800     DISPLAY WS-PGMID
077900          ' 2. TESTING DATE QUERY'
078000     SET I-ACTION-QUERY TO TRUE
078100     SET I-CALENDAR-ACTUAL TO TRUE
078200     SET I-FLDMOD-DAY TO TRUE
078300     SET I-INCLUDE-BOTH TO TRUE
078400     MOVE '01012005' TO I-DTTM-A
078500     SET I-A-FORMAT-MMDDYYYY TO TRUE
078600     MOVE 'ASTDATEB' TO LS-ASMODULE
078700     CALL LS-ASMODULE
078800          USING ASCA-COMMAREA
078900                ASUDATE-ACTION
079000                ASUDATE-INPUT
079100                ASUDATE-OUTPUT
079200                AS5FDBK-COND-AREA
079300**              OMITTED
079400
079500     DISPLAY WS-PGMID
079600          ' ACTUAL DAY BOTH 01012005 MMDDYYYY'
079700     DISPLAY WS-PGMID
079800          ' DATE QUERY = '
079900          I-DTTM-A
080000          '  COMPARE FLAG = '
080100          O-DATE-CMPR-FLAG
080200          '  DAY OF WEEK = '
080300          O-DOW
080400          '  DAY OF WEEK OCCUR = '
080500          O-DOW-OCCUR
080600     DISPLAY WS-PGMID
080700          ' FULL DATE: '
080800          O-DATE-FULL-VTXT (1:O-DATE-FULL-VLEN)
080900     DISPLAY WS-PGMID
081000          ' ABBR DATE: '
081100          O-DATE-ABBR-VTXT (1:O-DATE-ABBR-VLEN)
081200     DISPLAY ' '
081300
081400*    TEST DATE QUERY
081500     DISPLAY WS-PGMID
081600          ' 3. TESTING DATE QUERY'
081700     SET I-ACTION-QUERY TO TRUE
081800     SET I-CALENDAR-ACTUAL TO TRUE
081900     SET I-FLDMOD-DAY TO TRUE
082000     SET I-INCLUDE-BOTH TO TRUE
082100     MOVE '01032005121212' TO I-DTTM-A
082200     SET I-A-FORMAT-MMDDYYYY TO TRUE
082300     MOVE 'ASTDATEB' TO LS-ASMODULE
082400     CALL LS-ASMODULE
082500          USING ASCA-COMMAREA
082600                ASUDATE-ACTION
082700                ASUDATE-INPUT
082800                ASUDATE-OUTPUT
082900                AS5FDBK-COND-AREA
083000**              OMITTED
083100
083200     DISPLAY WS-PGMID
083300          ' ACTUAL DAY BOTH 01032005121212 MMDDYYYY'
083400     DISPLAY WS-PGMID
083500          ' DATE QUERY = '
083600          I-DTTM-A
083700          '  COMPARE FLAG = '
083800          O-DATE-CMPR-FLAG
083900          '  DAY OF WEEK = '
084000          O-DOW
084100          '  DAY OF WEEK OCCUR = '
084200          O-DOW-OCCUR
084300     DISPLAY WS-PGMID
084400          ' FULL DATE: '
084500          O-DATE-FULL-VTXT (1:O-DATE-FULL-VLEN)
084600     DISPLAY WS-PGMID
084700          ' ABBR DATE: '
084800          O-DATE-ABBR-VTXT (1:O-DATE-ABBR-VLEN)
084900     DISPLAY ' '
085000
085100*    TEST DATE DIFF
085200     DISPLAY WS-PGMID
085300          ' 4. TESTING DATE DIFFERENCE - 09121956 12102001'
085400     SET I-ACTION-DIFF TO TRUE
085500     SET I-CALENDAR-ACTUAL TO TRUE
085600     SET I-FLDMOD-DAY TO TRUE
085700     SET I-INCLUDE-BOTH TO TRUE
085800     MOVE '09121956' TO I-DTTM-A
085900     SET I-A-FORMAT-MMDDYYYY TO TRUE
086000     MOVE '12102001' TO I-DTTM-B
086100     SET I-B-FORMAT-MMDDYYYY TO TRUE
086200     MOVE 'ASTDATEB' TO LS-ASMODULE
086300     CALL LS-ASMODULE
086400          USING ASCA-COMMAREA
086500                ASUDATE-ACTION
086600                ASUDATE-INPUT
086700                ASUDATE-OUTPUT
086800                AS5FDBK-COND-AREA
086900**              OMITTED
087000
087100     DISPLAY WS-PGMID
087200          ' ACTUAL DAY BOTH 09121956 MMDDYYYY 12102001 MMDDYYYY'
087300     DISPLAY WS-PGMID
087400          ' DATE DIFFERENCE = '
087500          O-DATE-DIFF
087600          '  COMPARE FLAG = '
087700          O-DATE-CMPR-FLAG
087800     DISPLAY ' '
087900
088000*    TEST DATE INCR
088100     DISPLAY WS-PGMID
088200          ' 5. TESTING DATE INCREMENT - 01012001+120'
088300     SET I-ACTION-INCR TO TRUE
088400     SET I-CALENDAR-ACTUAL TO TRUE
088500     SET I-FLDMOD-DAY TO TRUE
088600     SET I-INCLUDE-DEFAULT TO TRUE
088700     MOVE '01012001' TO I-DTTM-A
088800     SET I-A-FORMAT-MMDDYYYY TO TRUE
088900     MOVE +120 TO I-DATE-INCR-DECR
089000     MOVE 'ASTDATEB' TO LS-ASMODULE
089100     CALL LS-ASMODULE
089200          USING ASCA-COMMAREA
089300                ASUDATE-ACTION
089400                ASUDATE-INPUT
089500                ASUDATE-OUTPUT
089600                AS5FDBK-COND-AREA
089700**              OMITTED
089800
089900     DISPLAY WS-PGMID
090000          ' ACTUAL DAY DEFAULT 01012001 MMDDYYYY +120'
090100     DISPLAY WS-PGMID
090200          ' DATE INCR = '
090300          O-DATE
090400          '  COMPARE FLAG = '
090500          O-DATE-CMPR-FLAG
090600     DISPLAY ' '
090700
090800*    TEST DATE DECR
090900     DISPLAY WS-PGMID
091000          ' 6. TESTING DATE DECREMENT - 12102001-120'
091100     SET I-ACTION-DECR TO TRUE
091200     SET I-CALENDAR-ACTUAL TO TRUE
091300     SET I-FLDMOD-DAY TO TRUE
091400     SET I-INCLUDE-DEFAULT TO TRUE
091500     MOVE '12102001' TO I-DTTM-A
091600     SET I-A-FORMAT-MMDDYYYY TO TRUE
091700     MOVE +120 TO I-DATE-INCR-DECR
091800     MOVE 'ASTDATEB' TO LS-ASMODULE
091900     CALL LS-ASMODULE
092000          USING ASCA-COMMAREA
092100                ASUDATE-ACTION
092200                ASUDATE-INPUT
092300                ASUDATE-OUTPUT
092400                AS5FDBK-COND-AREA
092500**              OMITTED
092600
092700     DISPLAY WS-PGMID
092800          ' ACTUAL DAY DEFAULT 12102001 MMDDYYYY -120'
092900     DISPLAY WS-PGMID
093000          ' DATE DECR ='
093100          O-DATE
093200          '  COMPARE FLAG = '
093300          O-DATE-CMPR-FLAG
093400     DISPLAY ' '
093500
093600*    TEST DATE FORMAT
093700     DISPLAY WS-PGMID
093800          ' 7. TESTING DATE FORMAT'
093900     SET I-ACTION-FORMAT TO TRUE
094000     SET I-CALENDAR-ACTUAL TO TRUE
094100     SET I-FLDMOD-DAY TO TRUE
094200     SET I-INCLUDE-DEFAULT TO TRUE
094300     MOVE '01302001' TO I-DTTM-A
094400     SET I-A-FORMAT-MMDDYYYY TO TRUE
094500     MOVE SPACE      TO I-DTTM-B
094600     SET I-B-FORMAT-YYYYMMDD TO TRUE
094700     MOVE 'ASTDATEB' TO LS-ASMODULE
094800     CALL LS-ASMODULE
094900          USING ASCA-COMMAREA
095000                ASUDATE-ACTION
095100                ASUDATE-INPUT
095200                ASUDATE-OUTPUT
095300                AS5FDBK-COND-AREA
095400**              OMITTED
095500
095600     DISPLAY WS-PGMID
095700          ' DATE FORMAT 1 = '
095800          I-DTTM-A
095900          '  DATE FORMAT 2 = '
096000          I-DTTM-B
096100          '  DATE = '
096200          O-DATE
096300     DISPLAY ' '
096400
096500*    TEST INVALID REQUEST
096600     DISPLAY WS-PGMID
096700          ' 8. TESTING INVALID ACTION'
096800     MOVE +9 TO I-DATE-ACTION
096900     SET I-CALENDAR-ACTUAL TO TRUE
097000     SET I-FLDMOD-DAY TO TRUE
097100     SET I-INCLUDE-DEFAULT TO TRUE
097200     MOVE '01302001' TO I-DTTM-A
097300     SET I-A-FORMAT-MMDDYYYY TO TRUE
097400     MOVE '20171212' TO I-DTTM-B
097500     SET I-B-FORMAT-YYYYMMDD TO TRUE
097600     MOVE 'ASTDATEB' TO LS-ASMODULE
097700     CALL LS-ASMODULE
097800          USING ASCA-COMMAREA
097900                ASUDATE-ACTION
098000                ASUDATE-INPUT
098100                ASUDATE-OUTPUT
098200                AS5FDBK-COND-AREA
098300**              OMITTED
098400
098500     CONTINUE.
098600 2000-99-END.
098700     EXIT.
./ ADD NAME=ASTSVC2B 0117-19158-19250-1416-00751-00992-00000-APLKS   17
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSVC2B.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **                      *
000700*                                                              *
000800* ASTSVC1B test C/C++ library services                         *
000900*    NAME: ASTSVC2B                                            *
001000*    APPL: Architecture Services Utility                       *
001100*    DESC: Test program to access C/C++ library services       *
001200* PURPOSE: show how to CALL C/C++ functions in COBOL           *
001300*                                                              *
001400* Called Routine(s):                                           *
001500*    ASU3I01B                                                  *
001600*    ASUMDHEX                                                  *
001700*    CUSERID()     retrieve RACF userid                        *
001800*    CTIME()       return time as a char string 26             *
001900*    DIFFTIME()    return difference between two times         *
002000*    FCLOSE()      close MVS file                              *
002100*    FEOF()        return EOF indicator                        *
002200*    FERROR()      return I/O return code                      *
002300*    FLDATA()      return file information                     *
002400*    FOPEN()       open MVS file                               *
002500*    FREAD()       read MVS file                               *
002600*    REGCOMP()     compile regular expression                  *
002700*    REGERR()      output regular expression error messages    *
002800*    REGEXEC()     exec compiled regular expression            *
002900*    REGFREE()     free storage acquired by regular expression *
003000*    SPRINTF()     return a formated string to print           *
003100*    TIME()        retrieve time in seconds from 19700101      *
003200*                                                              *
003300*--------------------------------------------------------------*
003400     SKIP2
003500***************************************************************
003600*  CUSTOM CODE REVISION LIST
003700*     DATE     PROGRAMMER  DESCRIPTION
003800*--------------------------------------------------------------
003900*  yyyy/mm/dd   xxxxxxxx
004000*  2019/08/29   lks        new
004100***************************************************************
004200     SKIP2
004300 DATA DIVISION.
004400     SKIP2
004500 WORKING-STORAGE SECTION.
004600 01  FILLER.
004700     03  WS-EYE-CATCHER PIC X(25)
004800              VALUE "BUZZARD CREEK TECH, INC. ".
004900     03  WS-PGMID       PIC X(08) VALUE 'ASTSVC2B'.
005000
005100 01  WS-POINTERS.
005200     03  WS-SYSIN-PTR   POINTER.
005300
005400 01  WS-BINARY.
005500     03  WS-SYSIN-MAX-LRECL  PIC S9(9) BINARY.
005600
005700 01  WS-CSTRINGS.
005800     03  WS-DD-SYSIN    PIC X(11) VALUE Z"dd:SYSIN".
005900     03  WS-MODE-RD     PIC X(21) VALUE Z"rb,samethread,noseek".
006000     03  WS-MODE-WR     PIC X(14) VALUE Z"wb,samethread".
006100     03  WS-MODE-EXT    PIC X(21) VALUE Z"ab,samethread,noseek".
006200     03  WS-MODE-RDWR   PIC X(15) VALUE Z"rb+,samethread".
006300     03  WS-MODE-WRRD   PIC X(15) VALUE Z"wb+,samethread".
006400     03  WS-SPACE       PIC X(02) VALUE Z" ".
006500     03  WS-FRMT-1      PIC X(03) VALUE Z"%s".
006600     03  WS-FRMT-2      PIC X(03) VALUE Z"%d".
006700     03  WS-FRMT-3      PIC X(07) VALUE Z"%s%s%d".
006800     03  WS-GREP-INPUT1 PIC X(70) VALUE Z"Now is the time for all
006900-    "good men to come to the aid of their country.".
007000     03  WS-GREP-INPUT2 PIC X(46) VALUE Z"The quick brown fox jump
007100-    "ed over the lazy dog.".
007200     03  WS-GREP-INPUT3 PIC X(22) VALUE Z"GOOD good GOODE goode".
007300     03  WS-MATCH-BROWN PIC X(12) VALUE Z".*(brown).*".
007400**   03  WS-MATCH-BROWN PIC X(12) VALUE Z".*brown.*".
007500
007600***  COPY CEEIGZLC.
007700
007800     COPY AS5FDBK.
007900
008000     COPY AS5RECA.
008100     SKIP2
008200 LOCAL-STORAGE SECTION.
008300 01  LS-POINTERS.
008400     03  LS-ASCA-PTR    POINTER.
008500     03  LS-VAR-PTR     POINTER.
008600     03  LS-FWORD-0 REDEFINES LS-VAR-PTR PIC S9(9) BINARY.
008700     03  LS-XS-VAR-PTR  POINTER.
008800     03  LS-FILE-PTR    POINTER.
008900     03  LS-INPBUF-PTR  POINTER.
009000
009100 01  LS-BINARY.
009200     03  LS-FP-1        COMP-2.
009300     03  LS-RTNCD       PIC S9(9) BINARY.
009400     03  LS-FILE-POS    PIC S9(9) BINARY.
009500     03  LS-REC-SIZE    PIC S9(9) BINARY.
009600     03  LS-MAX-LRECL   PIC S9(9) BINARY.
009700     03  LS-ITEMS-READ  PIC S9(9) BINARY.
009800     03  LS-LEMSGDEST   PIC S9(9) BINARY.
009900     03  LS-STRING-LEN  PIC S9(9) BINARY.
010000     03  LS-FWORD-1     PIC  9(9) BINARY.
010100     03  LS-FWORD-2     PIC  9(9) BINARY.
010200     03  LS-FWORD-3     PIC  9(9) BINARY.
010300     03  LS-POS         PIC  9(4) BINARY.
010400     03  LS-I           PIC S9(4) BINARY.
010500
010600 01  LS-CSTRINGS.
010700     03  LS-FILE-DD.
010800         05  FILLER     PIC X(03).
010900         05  LS-FILE-DDN     PIC X(08).
011000         05  LS-FILE-NULL    PIC X(01).
011100     03  LS-FILE-MODE   PIC X(80).
011200     03  LS-STRING      PIC X(256).
011300
011400 01  LS-STRINGS.
011500     03  LS-ASMODULE    PIC X(08).
011600     03  LS-FLAG-EOF    PIC X(01).
011700     03  FILLER         PIC X(07).
011800     03  LS-SYSIN-BUF   PIC X(80).
011900     03  LS-STUFF.
012000         05  LS-FILENAME     PIC X(80).
012100         05  LS-FILEINFO     PIC X(48).
012200         05  LS-MTAG         PIC X(16).
012300
012400***  COPY AS5CTOK.
012500
012600     COPY AS5DMPRB.
012700     EJECT
012800 LINKAGE SECTION.
012900     COPY AS5CA.
013000     SKIP1
013100 01  XS-STRING          PIC X(256).
013200     EJECT
013300 PROCEDURE DIVISION USING
013400     ASCA-COMMAREA
013500     XS-STRING.
013600
013700     CONTINUE.
013800 0000-00-INITIAL.
013900     DISPLAY WS-PGMID
014000          " Testing C/C++ library services"
014100     SKIP2
014200*    * ------------------------------------------------------- *
014300*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
014400*    * ------------------------------------------------------- *
014500
014600     SET LS-ASCA-PTR TO NULL
014700     MOVE "ASU3I01B" TO LS-ASMODULE
014800     CALL LS-ASMODULE
014900          USING LS-ASCA-PTR
015000**              AS5FDBK-COND-AREA
015100                OMITTED
015200
015300     IF LS-ASCA-PTR = NULL
015400       DISPLAY WS-PGMID
015500            " ASU3I01B failed to create the ASCA"
015600       GOBACK
015700     END-IF
015800
015900     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
016000     DISPLAY " "
016100
016200*    DUMP AS5CA COMMUNICATION AREA
016300     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
016400     MOVE +1 TO AS5DMPRB-NUMBER
016500     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
016600     MOVE "ASUMDHEX" TO LS-ASMODULE
016700     CALL LS-ASMODULE
016800          USING ASCA-COMMAREA
016900                AS5DMPRB-REQUEST-BLOCK
017000                ASCA-COMMAREA
017100**              AS5FDBK-COND-AREA
017200                OMITTED
017300
017400     DISPLAY " "
017500
017600     CONTINUE.
017700 0100-00-MAINLINE.
017800     INITIALIZE LS-BINARY
017900                LS-STRINGS
018000     MOVE +2 TO LS-LEMSGDEST
018100
018200     PERFORM 1000-00-MISC THRU 1000-99-END
018300     PERFORM 2000-00-IO THRU 2000-99-END
018400     PERFORM 3000-00-IOFORMAT THRU 3000-99-END
018500     PERFORM 4000-00-REFUN THRU 4000-99-END
018600     DISPLAY WS-PGMID
018700          ' STOP RUN/GOBACK/EXIT'
018800     STOP RUN
018900
019000     CONTINUE.
019100 1000-00-MISC.
019200*    MISC FUNCTIONS
019300
019400*    Return number of seconds from 1970101 00:00:00
019500*    get ready for CALL to difftime()
019600     MOVE ZERO TO LS-FWORD-2
019700     CALL 'TIME'
019800          USING BY VALUE ADDRESS OF LS-FWORD-2
019900
020000*    Return the RACF Userid
020100     DISPLAY WS-PGMID
020200          " Testing C/C++ function CUSERID"
020300
020400     MOVE SPACE TO LS-STRING
020500     CALL 'CUSERID'
020600          USING LS-STRING
020700          RETURNING LS-VAR-PTR
020800     IF LS-VAR-PTR = NULL
020900       DISPLAY WS-PGMID
021000            "   CUSERID failed"
021100     ELSE
021200       DISPLAY WS-PGMID
021300            "   CUSERID RACF USERID = " LS-STRING (1:8)
021400     END-IF
021500
021600     MOVE SPACE TO LS-STRING
021700     CALL 'CUSERID'
021800          USING BY VALUE ADDRESS OF LS-STRING
021900          RETURNING LS-VAR-PTR
022000     IF LS-VAR-PTR = NULL
022100       DISPLAY WS-PGMID
022200            "   CUSERID failed"
022300     ELSE
022400       DISPLAY WS-PGMID
022500            "   CUSERID RACF USERID = " LS-STRING (1:8)
022600     END-IF
022700
022800     MOVE SPACE TO LS-STRING
022900     CALL 'CUSERID'
023000          USING BY VALUE ADDRESS OF LS-STRING
023100     DISPLAY WS-PGMID
023200          "   CUSERID RACF USERID = " LS-STRING (1:8)
023300
023400     DISPLAY " "
023500
023600*    Return number of seconds from 1970101 00:00:00
023700     DISPLAY WS-PGMID
023800          " Testing C/C++ function TIME"
023900
024000     MOVE ZERO TO LS-FWORD-1
024100     CALL 'TIME'
024200          USING LS-FWORD-1
024300          RETURNING LS-VAR-PTR
024400     IF LS-VAR-PTR = NULL
024500       DISPLAY WS-PGMID
024600            "   TIME failed"
024700     ELSE
024800       DISPLAY WS-PGMID
024900            "   TIME nbr of seconds from 19700101 = " LS-FWORD-1
025000     END-IF
025100
025200     MOVE ZERO TO LS-FWORD-1
025300     CALL 'TIME'
025400          USING BY VALUE ADDRESS OF LS-FWORD-1
025500     DISPLAY WS-PGMID
025600          "   TIME nbr of seconds from 19700101 = " LS-FWORD-1
025700
025800     MOVE ZERO TO LS-FWORD-1
025900     CALL 'TIME'
026000          USING BY VALUE ADDRESS OF LS-FWORD-1
026100          RETURNING LS-VAR-PTR
026200     IF LS-VAR-PTR = NULL
026300       DISPLAY WS-PGMID
026400            "   TIME failed"
026500     ELSE
026600       DISPLAY WS-PGMID
026700            "   TIME nbr of seconds from 19700101 = " LS-FWORD-1
026800     END-IF
026900
027000*    Return date string(26) Ddd Mmm dd hh:mm:ss yyyy\n\0
027100     CALL 'CTIME'
027200          USING BY VALUE ADDRESS OF LS-FWORD-1
027300          RETURNING LS-XS-VAR-PTR
027400     IF LS-XS-VAR-PTR NOT = NULL
027500       SET ADDRESS OF XS-STRING TO LS-XS-VAR-PTR
027600       DISPLAY WS-PGMID
027700            "   CTIME Date/Time = " XS-STRING (1:24)
027800     END-IF
027900
028000*    Return the time difference between LS-FWORD-1 & LS-FWORD-2
028100     COMPUTE LS-FWORD-3 = LS-FWORD-1 - LS-FWORD-2
028200     DISPLAY WS-PGMID
028300          "   end - start = " LS-FWORD-3 " seconds"
028400     MOVE ZERO TO LS-FWORD-3
028500
028600     CALL 'DIFFTIME'
028700          USING BY VALUE LS-FWORD-1
028800                         LS-FWORD-2
028900          RETURNING LS-FP-1
029000     DISPLAY WS-PGMID
029100          "   DIFFTIME end - start = " LS-FP-1 " seconds"
029200
029300     DISPLAY " "
029400
029500     CONTINUE.
029600 1000-99-END.
029700     EXIT.
029800
029900     CONTINUE.
030000 2000-00-IO.
030100     DISPLAY WS-PGMID
030200          " Testing C/C++ function FOPEN, FLDATA, FREAD, FCLOSE"
030300
030400     MOVE WS-DD-SYSIN TO LS-FILE-DD
030500     MOVE WS-MODE-RD  TO LS-FILE-MODE
030600     SET LS-FILE-PTR TO NULL
030700     PERFORM 7000-11-OPEN THRU 7000-11-END
030800     IF LS-FILE-PTR NOT = NULL
030900       SET WS-SYSIN-PTR TO LS-FILE-PTR
031000     END-IF
031100
031200     PERFORM 7000-23-FLDATA THRU 7000-23-END
031300
031400     DISPLAY WS-PGMID
031500          " Testing C/C++ function FREAD"
031600
031700     MOVE SPACE TO LS-FLAG-EOF
031800     MOVE ZERO TO LS-ITEMS-READ
031900     SET LS-INPBUF-PTR TO ADDRESS OF LS-SYSIN-BUF
032000     MOVE +80 TO LS-MAX-LRECL
032100     SET LS-FILE-PTR TO WS-SYSIN-PTR
032200     PERFORM
032300          UNTIL LS-FLAG-EOF = "Y"
032400       PERFORM 7000-41-READ THRU 7000-41-END
032500       IF LS-FLAG-EOF = "N"
032600         DISPLAY WS-PGMID
032700              "   SYSIN record is " LS-SYSIN-BUF
032800       END-IF
032900     END-PERFORM
033000
033100     SET LS-FILE-PTR TO WS-SYSIN-PTR
033200     PERFORM 7000-21-CLOSE THRU 7000-21-END
033300
033400     DISPLAY " "
033500
033600     CONTINUE.
033700 2000-99-END.
033800     EXIT.
033900
034000     CONTINUE.
034100 3000-00-IOFORMAT.
034200*    FORMATING FUNCTIONS
034300*    %<flags><width><. precision><opt prefix>
034400     DISPLAY WS-PGMID
034500          " Testing C/C++ function SPRINTF"
034600
034700     MOVE ZERO  TO LS-STRING-LEN
034800     MOVE SPACE TO LS-STRING
034900     CALL 'SPRINTF'
035000          USING BY VALUE ADDRESS OF LS-STRING
035100                         ADDRESS OF WS-FRMT-1
035200                         ADDRESS OF WS-GREP-INPUT1
035300          RETURNING LS-STRING-LEN
035400     DISPLAY WS-PGMID
035500          "   " LS-STRING
035600
035700     MOVE ZERO  TO LS-FWORD-1
035800                   LS-STRING-LEN
035900     MOVE SPACE TO LS-STRING
036000     CALL 'SPRINTF'
036100          USING BY VALUE ADDRESS OF LS-STRING
036200                         ADDRESS OF WS-FRMT-1
036300                         ADDRESS OF WS-GREP-INPUT3
036400          RETURNING LS-STRING-LEN
036500     DISPLAY WS-PGMID
036600          "   SPRINTF string length = " LS-STRING-LEN
036700     ADD LS-STRING-LEN TO LS-FWORD-1
036800     DISPLAY WS-PGMID
036900          "   string combined length = " LS-FWORD-1
037000     SET LS-VAR-PTR TO ADDRESS OF LS-STRING
037100     COMPUTE LS-FWORD-2 = LS-FWORD-0 + LS-FWORD-1
037200     MOVE ZERO TO LS-STRING-LEN
037300     CALL 'SPRINTF'
037400          USING BY VALUE LS-FWORD-2
037500                         ADDRESS OF WS-FRMT-1
037600                         ADDRESS OF WS-SPACE
037700          RETURNING LS-STRING-LEN
037800     DISPLAY WS-PGMID
037900          "   SPRINTF string length = " LS-STRING-LEN
038000     ADD LS-STRING-LEN TO LS-FWORD-1
038100     DISPLAY WS-PGMID
038200          "   string combined length = " LS-FWORD-1
038300     COMPUTE LS-FWORD-2 = LS-FWORD-0 + LS-FWORD-1
038400     MOVE ZERO TO LS-STRING-LEN
038500     CALL 'SPRINTF'
038600          USING BY VALUE LS-FWORD-2
038700                         ADDRESS OF WS-FRMT-2
038800                         LS-FWORD-1
038900          RETURNING LS-STRING-LEN
039000     DISPLAY WS-PGMID
039100          "   SPRINTF string length = " LS-STRING-LEN
039200     ADD LS-STRING-LEN TO LS-FWORD-1
039300     ADD +1 TO LS-FWORD-1
039400     DISPLAY WS-PGMID
039500          "   string combined length = " LS-FWORD-1
039600     DISPLAY WS-PGMID
039700          "   " LS-STRING (1:LS-FWORD-1)
039800
039900     MOVE ZERO TO LS-STRING-LEN
040000     MOVE SPACE TO LS-STRING
040100     CALL 'SPRINTF'
040200          USING BY VALUE ADDRESS OF LS-STRING
040300                         ADDRESS OF WS-FRMT-3
040400                         ADDRESS OF WS-GREP-INPUT3
040500                         ADDRESS OF WS-SPACE
040600                         LS-FWORD-1
040700          RETURNING LS-STRING-LEN
040800     DISPLAY WS-PGMID
040900          "   " LS-STRING (1:LS-STRING-LEN)
041000
041100     DISPLAY ' '
041200
041300     CONTINUE.
041400 3000-99-END.
041500     EXIT.
041600
041700     CONTINUE.
041800 4000-00-REFUN.
041900*    REGULAR EXPRESSIONS FUNCTIONS
042000*       . period matches any one character except \n
042100*       [char-char] character thru character
042200*       [string] match on any character in string
042300*       {m}{m,}{m,u} minimum,maximum nbr of times to apply the
042400*         preceding RE
042500*       * 0 or more of any characters
042600*       $ matches the end of the string
042700*       char+ 1 or more occurrences of a char
042800*       [^string] negate or not any of the characters in string
042900*       (expression)$n stores the value matched by the enclosed
043000*         RE in the (n+1)th return parameter (maximum of 10)
043100*       (expression) parentheses alow you to create sub-expression
043200*         sub-expressions (maximum of 10)
043300*
043400     DISPLAY WS-PGMID
043500          " Testing C/C++ function REGCOMP"
043600
043700     INITIALIZE AS5RECA-COMMAREA
043800     MOVE ZERO TO AS5RECA-RE-CFLAGS
043900                  LS-RTNCD
044000     SET USE-EXTENDED-RULES TO TRUE
044100     CALL 'REGCOMP'
044200          USING BY VALUE ADDRESS OF AS5RECA-COMMAREA
044300                         ADDRESS OF WS-MATCH-BROWN
044400                         AS5RECA-RE-CFLAGS
044500          RETURNING LS-RTNCD
044600
044700     IF LS-RTNCD NOT = ZERO
044800       DISPLAY WS-PGMID
044900            "   REGCOMP failed - " LS-RTNCD
045000       CALL 'REGERROR'
045100            USING BY VALUE LS-RTNCD
045200                           ADDRESS OF AS5RECA-COMMAREA
045300                           ADDRESS OF LS-STRING
045400                  BY CONTENT LENGTH OF LS-STRING
045500       DISPLAY WS-PGMID
045600            "   REGCOMP failed - " LS-STRING (1:80)
045700       GO TO 4000-99-END
045800     END-IF
045900
046000*    DUMP AS5RECA COMMUNICATION AREA
046100     MOVE LENGTH OF AS5RECA-COMMAREA TO AS5DMPRB-DATA-LEN
046200     MOVE +3 TO AS5DMPRB-NUMBER
046300     MOVE "RE COMMAREA"              TO AS5DMPRB-TITLE
046400     MOVE "ASUMDHEX" TO LS-ASMODULE
046500     CALL LS-ASMODULE
046600          USING ASCA-COMMAREA
046700                AS5DMPRB-REQUEST-BLOCK
046800                AS5RECA-COMMAREA
046900**              AS5FDBK-COND-AREA
047000                OMITTED
047100
047200     DISPLAY " "
047300
047400     DISPLAY WS-PGMID
047500          " Testing C/C++ function REGEXEC"
047600
047700     MOVE ZERO TO LS-FWORD-1
047800                  AS5RECA-RE-ECODE
047900                  LS-RTNCD
048000**   MOVE +1 TO LS-FWORD-1
048100     MOVE +2 TO LS-FWORD-1
048200     CALL 'REGEXEC'
048300          USING BY VALUE ADDRESS OF AS5RECA-COMMAREA
048400                         ADDRESS OF WS-GREP-INPUT2
048500                         LS-FWORD-1
048600                         ADDRESS OF AS5RECA-RE-MATCH
048700                         AS5RECA-RE-ECODE
048800          RETURNING LS-RTNCD
048900
049000     DISPLAY WS-PGMID
049100          "   REGEXEC EC=" AS5RECA-RE-ECODE
049200
049300     IF LS-RTNCD NOT = ZERO
049400       DISPLAY WS-PGMID
049500            "   REGEXEC failed - " LS-RTNCD
049600            "  " AS5RECA-RE-ECODE
049700       MOVE SPACE TO LS-STRING
049800       CALL 'REGERROR'
049900            USING BY VALUE LS-RTNCD
050000                           ADDRESS OF AS5RECA-COMMAREA
050100                           ADDRESS OF LS-STRING
050200                  BY CONTENT LENGTH OF LS-STRING
050300       DISPLAY WS-PGMID
050400            "   REGEXEC failed - " LS-STRING (1:80)
050500       GO TO 4000-99-END
050600     END-IF
050700
050800     MOVE ZERO TO LS-POS
050900     MOVE +1 TO LS-I
051000     PERFORM
051100          UNTIL LS-RTNCD NOT = ZERO
051200       ADD +1 TO LS-I
051300       DISPLAY WS-PGMID
051400            "   found arg <" WS-MATCH-BROWN
051500            "> in string <" WS-GREP-INPUT2
051600            "> at offset " AS5RECA-RE-MSOFFSET (LS-I)
051700       DISPLAY " "
051800*      DUMP AS5RECA MATCH AREA
051900       MOVE LENGTH OF AS5RECA-RE-MATCH TO AS5DMPRB-DATA-LEN
052000       MOVE +3 TO AS5DMPRB-NUMBER
052100       MOVE "RE MATCH"                 TO AS5DMPRB-TITLE
052200       MOVE "ASUMDHEX" TO LS-ASMODULE
052300       CALL LS-ASMODULE
052400            USING ASCA-COMMAREA
052500                  AS5DMPRB-REQUEST-BLOCK
052600                  AS5RECA-RE-MATCH
052700**                AS5FDBK-COND-AREA
052800                  OMITTED
052900       ADD AS5RECA-RE-MNOFFSET (LS-I) TO LS-POS
053000       ADD +1 TO LS-POS
053100       CALL 'REGEXEC'
053200            USING BY VALUE ADDRESS OF AS5RECA-COMMAREA
053300                           ADDRESS OF WS-GREP-INPUT2 (LS-POS:)
053400                           LS-FWORD-1
053500                           ADDRESS OF AS5RECA-RE-MATCH
053600                           AS5RECA-RE-ECODE
053700            RETURNING LS-RTNCD
053800     END-PERFORM
053900
054000     DISPLAY " "
054100
054200     CALL 'REGFREE'
054300          USING BY VALUE ADDRESS OF AS5RECA-COMMAREA
054400
054500     CONTINUE.
054600 4000-99-END.
054700     EXIT.
054800
054900     CONTINUE.
055000 7000-00-IOFUN.
055100*    I/O FUNCTIONS
055200*       Record model
055300*         OS/IO - process the following organization of files
055400*           library
055500*             PDS, PDSE
055600*           sequential
055700*             GDG, DASD, tape, printer, punch, card, optical,
055800*             inline JCL, spool, striped
055900*         VSAM/IO - process the following organization of files
056000*           ESDS, KSDS, RRDS, VRRDS
056100*
056200*       recfm=F|V|U  fixed|variable|undefined
056300*         additonal attr:  A|B|M|S
056400*                          printer ASA ctl chr
056500*                          blocked
056600*                          printer machine ctl chr
056700*                          If FS then std format
056800*                          If VS then spanned format
056900*       recfm=F|FA|FB|FM|FS|FBA|FBM|FBS|FSA|FSM|FBSA|FBSM
057000*       recfm=V|VA|VB|VM|VS|VBA|VBM|VBS|VSA|VSM|VBSA|VBSM
057100*       recfm=U|UA|UM
057200*
057300*    OPEN mode
057400*       positional
057500*         1st pos - r=read,w=write
057600*         2nd pos - b=binary
057700*         2nd|3rd pos - +=update
057800*       keyword
057900*         samethread
058000*         noseek
058100*         byteseek
058200*         for DSNAME recfm=value
058300*         for DSNAME lrecl=value
058400*         for DSNAME blksize=value
058500*         for DSNAME space
058600*         for VSAM acc=fwd|bwd
058700*         type=blocked|record
058800*         default for VSAM type=record
058900*
059000*
059100     CONTINUE.
059200 7000-11-OPEN.
059300     DISPLAY WS-PGMID
059400          " Testing C/C++ function FOPEN"
059500
059600     CALL 'FOPEN'
059700          USING BY VALUE ADDRESS OF LS-FILE-DD
059800                         ADDRESS OF LS-FILE-MODE
059900          RETURNING LS-FILE-PTR
060000     IF LS-FILE-PTR = NULL
060100       DISPLAY WS-PGMID
060200            "   FOPEN failed"
060300       EXIT PROGRAM
060400     END-IF
060500
060600     CONTINUE.
060700 7000-11-END.
060800     EXIT.
060900
061000     CONTINUE.
061100 7000-12-OPEN.
061200*    CALL 'OPENDIR'
061300
061400     CONTINUE.
061500 7000-12-END.
061600     EXIT.
061700
061800     CONTINUE.
061900 7000-21-CLOSE.
062000     DISPLAY WS-PGMID
062100          " Testing C/C++ function FCLOSE"
062200
062300     MOVE ZERO TO LS-RTNCD
062400     CALL 'FCLOSE'
062500          USING BY VALUE LS-FILE-PTR
062600          RETURNING LS-RTNCD
062700     IF LS-RTNCD NOT = ZERO
062800       DISPLAY WS-PGMID
062900            "   FCLOSE failed - " LS-RTNCD
063000     END-IF
063100
063200     CONTINUE.
063300 7000-21-END.
063400     EXIT.
063500
063600     CONTINUE.
063700 7000-22-CLOSEDIR.
063800*    CALL 'CLOSEDIR'
063900
064000     CONTINUE.
064100 7000-22-END.
064200     EXIT.
064300
064400     CONTINUE.
064500 7000-23-FLDATA.
064600     DISPLAY WS-PGMID
064700          " Testing C/C++ function FLDATA"
064800
064900     MOVE ALL X'FA' TO LS-FILENAME
065000     MOVE ALL X'FB' TO LS-FILEINFO
065100     MOVE ALL X'FE' TO LS-MTAG
065200
065300     CALL 'FLDATA'
065400          USING BY VALUE LS-FILE-PTR
065500                         ADDRESS OF LS-FILENAME
065600                         ADDRESS OF LS-FILEINFO
065700          RETURNING LS-RTNCD
065800     IF LS-RTNCD NOT = ZERO
065900       DISPLAY WS-PGMID
066000            "   FLDATA failed - " LS-RTNCD
066100       EXIT PROGRAM
066200     END-IF
066300
066400*    DUMP C/C++ FLDATA AREA
066500     MOVE LENGTH OF LS-STUFF TO AS5DMPRB-DATA-LEN
066600     MOVE +2 TO AS5DMPRB-NUMBER
066700     MOVE "C/C++ FLDATA AREA"   TO AS5DMPRB-TITLE
066800     MOVE "ASUMDHEX" TO LS-ASMODULE
066900     CALL LS-ASMODULE
067000          USING ASCA-COMMAREA
067100                AS5DMPRB-REQUEST-BLOCK
067200                LS-STUFF
067300**              AS5FDBK-COND-AREA
067400                OMITTED
067500
067600     DISPLAY " "
067700
067800     CONTINUE.
067900 7000-23-END.
068000     EXIT.
068100
068200     CONTINUE.
068300 7000-31-NOTE.
068400     CALL 'FGETPOS'
068500          USING BY VALUE LS-FILE-PTR
068600                         ADDRESS OF LS-FILE-POS
068700          RETURNING LS-RTNCD
068800     IF LS-RTNCD NOT = ZERO
068900       DISPLAY WS-PGMID
069000            "   FGETPOS failed - " LS-RTNCD
069100     END-IF
069200
069300     CONTINUE.
069400 7000-31-END.
069500     EXIT.
069600
069700     CONTINUE.
069800 7000-32-POINT.
069900     CALL 'FSETPOS'
070000          USING BY VALUE LS-FILE-PTR
070100                         ADDRESS OF LS-FILE-POS
070200          RETURNING LS-RTNCD
070300     IF LS-RTNCD NOT = ZERO
070400       DISPLAY WS-PGMID
070500            "   FSETPOS failed"
070600     END-IF
070700
070800     CONTINUE.
070900 7000-32-END.
071000     EXIT.
071100
071200     CONTINUE.
071300 7000-41-READ.
071400     MOVE "N" TO LS-FLAG-EOF
071500     MOVE +1  TO LS-REC-SIZE
071600     CALL 'FREAD'
071700          USING BY VALUE LS-INPBUF-PTR
071800                         LS-REC-SIZE
071900                         LS-MAX-LRECL
072000                         LS-FILE-PTR
072100          RETURNING LS-ITEMS-READ
072200     CALL 'FERROR'
072300          USING BY VALUE LS-FILE-PTR
072400          RETURNING LS-RTNCD
072500     IF LS-RTNCD NOT = ZERO
072600       DISPLAY WS-PGMID
072700            "   FREAD error - " LS-RTNCD
072800     ELSE
072900       CALL 'FEOF'
073000            USING BY VALUE LS-FILE-PTR
073100            RETURNING LS-RTNCD
073200       IF LS-RTNCD NOT = ZERO
073300         MOVE 'Y' TO LS-FLAG-EOF
073400       END-IF
073500     END-IF
073600
073700     CONTINUE.
073800 7000-41-END.
073900     EXIT.
074000
074100     CONTINUE.
074200 7000-42-READDIR.
074300*    CALL 'READDIR'
074400
074500     CONTINUE.
074600 7000-42-END.
074700     EXIT.
074800
074900     CONTINUE.
075000 7000-99-END.
075100     EXIT.
./ ADD NAME=ASUDNOFB 0111-18295-18304-1004-00263-01265-00000-APLKS   38
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. ASUDNOFB.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUDNOFB
000900*    APPL: Architecture Services Utility
001000*    DESC: Subroutine to return the number of finds.
001100* PURPOSE: Return a result field (4-byte integer)
001200*          containing the number of times the search
001300*          argument is found in the source field.
001400*
001500*          If two result fields are specified, a vector
001600*          containing the position (2-byte integer) of
001700*          each occurrence of the search argument in the
001800*          source field.
001900*
002000*          The internal vector used to keep track of each
002100*          find in the source field is a fixed length of
002200*          512 bytes.  Which is enough space to track 256
002300*          finds.  The internal vector will be copied to
002400*          the optional supplied result template, if
002500*          present.  Therefore, make sure that the second
002600*          result field is a minimum of 512 bytes in
002700*          length.
002800*
002900*          Subroutine ASUDBPOS (Boyer-Moore) is used to
003000*          find the search argument in the source string.
003100*          So, refer to it's documentation to determine
003200*          capabilities.
003300*
003400*          If the template count < 2.
003500*          LE/COBOL RETURN-CODE = +4
003600*
003700*          If the 6th parm in the call list is not
003800*          a result template.
003900*          LE/COBOL RETURN-CODE = +8
004000*
004100*          If the 7th parm in the call list is not
004200*          a result template.
004300*          LE/COBOL RETURN-CODE = +8
004400*
004500*          If the 7th parm is specified in such a way that
004600*          the temporary position vector can not be copied
004700*          to it (i.e. too short, etc.).
004800*          LE/COBOL RETURN-CODE = +8
004900*
005000* Called Routine(s):
005100*    ASUDBPOS
005200*    CEESISET
005300*
005400* INPUT: CALL 'ASUDNOFB'
005500*             USING ASCA-COMMAREA
005600*                   AS5LARO1-OPTIONS
005700*                   AS5LAST1-SOURCE
005800*                   XS-TMPLATE-CNT
005900*                   AS5LAIT1-INPUT-TEMPLATE
006000*                   AS5LART1-RESULT-TEMPLATE
006100*        (optional) AS5LART3-RESULT-TEMPLATE
006200*
006300*--------------------------------------------------------------*
006400     SKIP2
006500*--------------------------------------------------------------*
006600*               ** HISTORY OF REVISIONS **                     *
006700* DESCRIPTION                                           CHNGID *
006800* ____________________________________________________  _______*
006900*                                                              *
007000* 2018/10/02 New                                               *
007100*                                                              *
007200*--------------------------------------------------------------*
007300     SKIP2
007400 DATA DIVISION.
007500     SKIP2
007600 WORKING-STORAGE SECTION.
007700     SKIP1
007800 01  FILLER.
007900     03  WS-EYE-CATCHER PIC X(25)
008000              VALUE "BUZZARD CREEK TECH, INC. ".
008100     03  WS-PGMID       PIC X(08) VALUE 'ASUDNOFB'.
008200     SKIP2
008300 LOCAL-STORAGE SECTION.
008400     SKIP1
008500 01  LS-AS-MODULE       PIC X(08).
008600 01  LS-LE-MODULE       PIC X(08).
008700 01  LS-ENCLAVE-RC      PIC S9(9) BINARY SYNC.
008800
008900 01  FILLER.
009000     03  LS-BIT         PIC S9(9) BINARY SYNC.
009100     03  LS-FOUND-COUNT      PIC S9(9) BINARY SYNC.
009200     03  LS-FOUND-LENGTH     PIC S9(9) BINARY SYNC.
009300     03  LS-FOUND-VECTOR.
009400         05  LS-FOUND-ENTRY
009500                   OCCURS 257 TIMES
009600                   INDEXED BY LS-FOUND-IDX.
009700             07  LS-FOUND-POS     PIC S9(4) COMP-5.
009800     03  LS-4BYTES.
009900         05  FILLER          PIC X(01).
010000         05  FILLER          PIC X(01).
010100         05  FILLER          PIC X(01).
010200         05  LS-4BYTES4      PIC X(01).
010300     03  LS-4BYTES-N REDEFINES LS-4BYTES    PIC S9(9) BINARY.
010400     03  LS-EOL         PIC X(01).
010500     SKIP1
010600     COPY AS5LAREQ.
010700     SKIP2
010800 LINKAGE SECTION.
010900     SKIP1
011000     COPY AS5CA.
011100     SKIP1
011200     COPY AS5LARO1.
011300     SKIP1
011400     COPY AS5LAST1.
011500     SKIP1
011600 01  XS-TMPLATE-CNT     PIC S9(9) BINARY.
011700     SKIP1
011800     COPY AS5LAIT1.
011900     SKIP1
012000     COPY AS5LART1.
012100     SKIP1
012200     COPY AS5LART3.
012300     EJECT
012400 PROCEDURE DIVISION USING
012500     ASCA-COMMAREA
012600     AS5LARO1-OPTIONS
012700     AS5LAST1-SOURCE
012800     XS-TMPLATE-CNT
012900     AS5LAIT1-INPUT-TEMPLATE
013000     AS5LART1-RESULT-TEMPLATE
013100     AS5LART3-RESULT-TEMPLATE.
013200     SKIP2
013300     CONTINUE.
013400 0100-00-INIT.
013500
013600     IF NOT (XS-TMPLATE-CNT >= +2)
013700       MOVE +4 TO LS-ENCLAVE-RC
013800       GO TO 1000-99-END
013900     END-IF
014000
014100     MOVE ZERO       TO LS-BIT
014200                        LS-ENCLAVE-RC
014300                        LS-FOUND-COUNT
014400
014500     MOVE AS5LARO1-OPTIONS TO AS5LAREQ-OPTIONS
014600     MOVE LOW-VALUE TO AS5LAREQ-PSTATE
014700     MOVE ZERO      TO AS5LAREQ-COUNT
014800     MOVE +288      TO AS5LAREQ-PSA-LEN
014900
015000     CONTINUE.
015100 1000-00-MAINLINE.
015200
015300     MOVE X'04' TO AS5LAREQ-RSLT-PATTYPE (1)
015400     MOVE +4    TO AS5LAREQ-RSLT-STR-SIZE (1)
015500     MOVE ZERO  TO LS-FOUND-COUNT
015600     MOVE "N"   TO LS-EOL
015700     PERFORM
015800          UNTIL LS-EOL = "Y"
015900       MOVE ZERO  TO AS5LAREQ-RSLT-STR-LEN (1)
016000       MOVE LOW-VALUE
016100            TO AS5LAREQ-RSLT-STR-FLD (1)
016200               (1:AS5LAREQ-RSLT-STR-SIZE (1))
016300       PERFORM 7000-00-CALL-ASUDBPOS THRU 7000-99-END
016400       IF AS5LAREQ-RSLT-STR-LEN (1) = +4
016500         MOVE AS5LAREQ-RSLT-STR-FLD (1) (1:4)
016600              TO LS-4BYTES
016700         IF LS-4BYTES-N > ZERO
016800           ADD +1 TO LS-FOUND-COUNT
016900           IF LS-FOUND-COUNT <= 256
017000             SET LS-FOUND-IDX TO LS-FOUND-COUNT
017100             MOVE LS-4BYTES-N TO LS-FOUND-POS (LS-FOUND-IDX)
017200           END-IF
017300         ELSE
017400           MOVE "Y" TO LS-EOL
017500         END-IF
017600       ELSE
017700         MOVE "Y" TO LS-EOL
017800       END-IF
017900       MOVE ZERO TO LS-4BYTES-N
018000*      SET CONTINUE OPTION ON FOR NEXT CALL
018100       MOVE AS5LAREQ-OPT-FLAG TO LS-4BYTES4
018200       CALL 'CEESISET'
018300            USING LS-4BYTES-N
018400                  LS-BIT
018500                  OMITTED
018600                  LS-4BYTES-N
018700       END-CALL
018800       MOVE LS-4BYTES4 TO AS5LAREQ-OPT-FLAG
018900     END-PERFORM
019000
019100     IF AS5LART1-RSLT-PATTYPE NOT = X'04'
019200       MOVE +8 TO LS-ENCLAVE-RC
019300       GO TO 1000-99-END
019400     END-IF
019500
019600     IF AS5LART1-RSLT-STR-SIZE >= +4
019700       MOVE +4 TO AS5LART1-RSLT-STR-LEN
019800       MOVE LS-FOUND-COUNT TO LS-4BYTES-N
019900       MOVE LS-4BYTES
020000            TO AS5LART1-RSLT-STR-FLD (1:AS5LART1-RSLT-STR-LEN)
020100     END-IF
020200
020300     IF XS-TMPLATE-CNT = +2
020400       GO TO 1000-99-END
020500     END-IF
020600
020700     IF ADDRESS OF AS5LART3-RESULT-TEMPLATE = NULL
020800       GO TO 1000-99-END
020900     END-IF
021000
021100     IF AS5LART3-RSLT-PATTYPE NOT = X'04'
021200       MOVE +8 TO LS-ENCLAVE-RC
021300       GO TO 1000-99-END
021400     END-IF
021500
021600     COMPUTE LS-FOUND-LENGTH = LS-FOUND-COUNT * 2
021700
021800     IF LS-FOUND-LENGTH > AS5LART3-RSLT-STR-SIZE
021900       MOVE +8 TO LS-ENCLAVE-RC
022000       GO TO 1000-99-END
022100     END-IF.
022200
022300     MOVE LS-FOUND-LENGTH
022400          TO AS5LART3-RSLT-STR-LEN
022500     MOVE LS-FOUND-VECTOR
022600          (1:LS-FOUND-LENGTH)
022700          TO AS5LART3-RSLT-STR-FLD (1:AS5LART3-RSLT-STR-LEN)
022800
022900     CONTINUE.
023000 1000-99-END.
023100     EXIT.
023200
023300     GO TO 9000-00-TERMINATE
023400     SKIP2
023500     CONTINUE.
023600 7000-00-CALL-ASUDBPOS.
023700
023800     MOVE +2 TO AS5LAREQ-TEMPLATE-CNT
023900     MOVE "ASUDBPOS" TO LS-AS-MODULE
024000     CALL LS-AS-MODULE
024100          USING ASCA-COMMAREA
024200                AS5LAREQ-OPTIONS
024300                AS5LAST1-SOURCE
024400                AS5LAREQ-TEMPLATE-CNT
024500                AS5LAIT1-INPUT-TEMPLATE
024600                AS5LAREQ-RESULT-TEMPLATE (1)
024700                OMITTED
024800     END-CALL
024900
025000     CONTINUE.
025100 7000-99-END.
025200     EXIT.
025300     SKIP2
025400 9000-00-TERMINATE.
025500
025600*    LE SET RETURN CODE
025700     CALL 'CEE3SRC' USING LS-ENCLAVE-RC OMITTED
025800     GOBACK
025900     EXIT PROGRAM
026000     SKIP1
026100     CONTINUE.
026200 9000-99-END.
026300     EXIT.
./ ADD NAME=ASUDN2TB 0130-18275-18316-1133-01282-00303-00000-APLKS   29
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. ASUDN2TB.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUDN2TB
000900*    APPL: Architecture Services Utility
001000*    DESC: Subroutine to convert a number into words/text.
001100* PURPOSE: Convert pack decimal or zone decimal or edited
001200*          numeric fields to text in one of the following
001300*          formats:
001400*            + word - text [AND] text
001500*            + currency - text [DOLLARS] [AND] text [CENTS]
001600*            + check - text [AND] nn/100 [DOLLARS]
001700*
001800*          Input number may contain up to 18 digits.  There can
001900*          be at most 9 digits to the right of decimal.
002000*
002100*          If template count <= +1.
002200*          LE/COBOL RETURN-CODE = +4
002300*
002400*          If format = currency then there can not be
002500*          more than 2 decimal digits.  The routine will
002600*          return with zero length RESULT.
002700*          LE/COBOL RETURN-CODE = +4
002800*
002900*          If format = check then the source number can not
003000*          be negative.  The routine will return with zero
003100*          length RESULT.
003200*          LE/COBOL RETURN-CODE = +4
003300*
003400*          If the result is longer than the caller's
003500*          RESULT area, the routine will return with zero
003600*          length RESULT.
003700*          LE/COBOL RETURN-CODE = +8
003800*
003900*          If input can not be determined the routine will
004000*          return with zero length RESULT.
004100*          LE/COBOL RETURN-CODE = +16
004200*
004300*          Call ASUDDEDT to convert edited numeric to a
004400*          zone decimal.
004500*
004600*          Call ASUDAPND to build the result string.
004700*
004800* Called Routine(s):
004900*    ASUDDEDT
005000*    ASUDAPND
005100*
005200* INPUT: CALL 'ASUDN2TB'
005300*             USING ASCA-COMMAREA
005400*                   AS5LARO1-OPTIONS
005500*                   AS5LAST1-SOURCE
005600*                   XS-TMPLATE-CNT
005700*                   AS5LART1-RESULT-TEMPLATE
005800*                   AS5FDBK-COND-AREA
005900*
006000*--------------------------------------------------------------*
006100     SKIP2
006200*--------------------------------------------------------------*
006300*               ** HISTORY OF REVISIONS **                     *
006400* DESCRIPTION                                           CHNGID *
006500* ____________________________________________________  _______*
006600*                                                              *
006700* 2018/10/02 New                                               *
006800*                                                              *
006900*--------------------------------------------------------------*
007000     SKIP2
007100 DATA DIVISION.
007200     SKIP2
007300 WORKING-STORAGE SECTION.
007400     SKIP1
007500 01  FILLER.
007600     03  WS-EYE-CATCHER PIC X(25)
007700              VALUE "BUZZARD CREEK TECH, INC. ".
007800     03  WS-PGMID       PIC X(08) VALUE 'ASUDN2TB'.
007900     SKIP1
008000 01  WS-CONSTANTS.
008100     03  WS-NEGATIVE.
008200         05  FILLER     PIC S9(4) BINARY VALUE +8.
008300         05  FILLER     PIC X(08) VALUE 'NEGATIVE'.
008400     03  WS-AND.
008500         05  FILLER     PIC S9(4) BINARY VALUE +3.
008600         05  FILLER     PIC X(08) VALUE 'AND'.
008700     03  WS-NO.
008800         05  FILLER     PIC S9(4) BINARY VALUE +2.
008900         05  FILLER     PIC X(08) VALUE 'NO'.
009000     03  WS-FRACTION.
009100         05  FILLER     PIC S9(4) BINARY VALUE +4.
009200         05  FILLER     PIC X(08) VALUE '/100'.
009300     03  WS-ZERO.
009400         05  FILLER     PIC S9(4) BINARY VALUE +4.
009500         05  FILLER     PIC X(08) VALUE 'ZERO'.
009600     03  WS-CENTS.
009700         05  FILLER     PIC S9(4) BINARY VALUE +5.
009800         05  FILLER     PIC X(08) VALUE 'CENTS'.
009900     03  WS-DOLLARS.
010000         05  FILLER     PIC S9(4) BINARY VALUE +7.
010100         05  FILLER     PIC X(08) VALUE 'DOLLARS'.
010200     03  WS-HUNDRED.
010300         05  FILLER     PIC S9(4) BINARY VALUE +7.
010400         05  FILLER     PIC X(08) VALUE 'HUNDRED'.
010500     SKIP1
010600 01  WS-COMMA-VECTOR-VALUES.
010700     03  FILLER.
010800         05  FILLER     PIC S9(4) BINARY VALUE +16.
010900         05  FILLER     PIC S9(4) BINARY VALUE +18.
011000         05  FILLER     PIC S9(4) BINARY VALUE +11.
011100         05  FILLER     PIC X(12) VALUE 'QUADRILLION'.
011200     03  FILLER.
011300         05  FILLER     PIC S9(4) BINARY VALUE +13.
011400         05  FILLER     PIC S9(4) BINARY VALUE +15.
011500         05  FILLER     PIC S9(4) BINARY VALUE +8.
011600         05  FILLER     PIC X(12) VALUE 'TRILLION'.
011700     03  FILLER.
011800         05  FILLER     PIC S9(4) BINARY VALUE +10.
011900         05  FILLER     PIC S9(4) BINARY VALUE +12.
012000         05  FILLER     PIC S9(4) BINARY VALUE +7.
012100         05  FILLER     PIC X(12) VALUE 'BILLION'.
012200     03  FILLER.
012300         05  FILLER     PIC S9(4) BINARY VALUE +7.
012400         05  FILLER     PIC S9(4) BINARY VALUE +9.
012500         05  FILLER     PIC S9(4) BINARY VALUE +7.
012600         05  FILLER     PIC X(12) VALUE 'MILLION'.
012700     03  FILLER.
012800         05  FILLER     PIC S9(4) BINARY VALUE +4.
012900         05  FILLER     PIC S9(4) BINARY VALUE +6.
013000         05  FILLER     PIC S9(4) BINARY VALUE +8.
013100         05  FILLER     PIC X(12) VALUE 'THOUSAND'.
013200     03  FILLER.
013300         05  FILLER     PIC S9(4) BINARY VALUE +1.
013400         05  FILLER     PIC S9(4) BINARY VALUE +3.
013500         05  FILLER     PIC S9(4) BINARY VALUE ZERO.
013600         05  FILLER     PIC X(12) VALUE 'N/A'.
013700 01  WS-COMMA-VECTOR REDEFINES WS-COMMA-VECTOR-VALUES.
013800     03  WS-COMMA-ENTRY
013900                   OCCURS 6 TIMES
014000                   INDEXED BY WS-COMMA-IDX1.
014100         05  WS-COMMA-LO-DIGIT    PIC S9(4) BINARY.
014200         05  WS-COMMA-HI-DIGIT    PIC S9(4) BINARY.
014300         05  WS-COMMA-SOURCE.
014400             07  FILLER      PIC S9(4) BINARY.
014500             07  FILLER      PIC X(12).
014600     SKIP1
014700 01  WS-HUNDREDS-VECTOR-VALUES.
014800     03  FILLER.
014900         05  FILLER     PIC S9(4) BINARY VALUE +3.
015000         05  FILLER     PIC X(14) VALUE 'ONE'.
015100     03  FILLER.
015200         05  FILLER     PIC S9(4) BINARY VALUE +3.
015300         05  FILLER     PIC X(14) VALUE 'TWO'.
015400     03  FILLER.
015500         05  FILLER     PIC S9(4) BINARY VALUE +5.
015600         05  FILLER     PIC X(14) VALUE 'THREE'.
015700     03  FILLER.
015800         05  FILLER     PIC S9(4) BINARY VALUE +4.
015900         05  FILLER     PIC X(14) VALUE 'FOUR'.
016000     03  FILLER.
016100         05  FILLER     PIC S9(4) BINARY VALUE +4.
016200         05  FILLER     PIC X(14) VALUE 'FIVE'.
016300     03  FILLER.
016400         05  FILLER     PIC S9(4) BINARY VALUE +3.
016500         05  FILLER     PIC X(14) VALUE 'SIX'.
016600     03  FILLER.
016700         05  FILLER     PIC S9(4) BINARY VALUE +5.
016800         05  FILLER     PIC X(14) VALUE 'SEVEN'.
016900     03  FILLER.
017000         05  FILLER     PIC S9(4) BINARY VALUE +5.
017100         05  FILLER     PIC X(14) VALUE 'EIGHT'.
017200     03  FILLER.
017300         05  FILLER     PIC S9(4) BINARY VALUE +4.
017400         05  FILLER     PIC X(14) VALUE 'NINE'.
017500     03  FILLER.
017600         05  FILLER     PIC S9(4) BINARY VALUE +3.
017700         05  FILLER     PIC X(14) VALUE 'TEN'.
017800     03  FILLER.
017900         05  FILLER     PIC S9(4) BINARY VALUE +6.
018000         05  FILLER     PIC X(14) VALUE 'ELEVEN'.
018100     03  FILLER.
018200         05  FILLER     PIC S9(4) BINARY VALUE +6.
018300         05  FILLER     PIC X(14) VALUE 'TWELVE'.
018400     03  FILLER.
018500         05  FILLER     PIC S9(4) BINARY VALUE +8.
018600         05  FILLER     PIC X(14) VALUE 'THIRTEEN'.
018700     03  FILLER.
018800         05  FILLER     PIC S9(4) BINARY VALUE +8.
018900         05  FILLER     PIC X(14) VALUE 'FOURTEEN'.
019000     03  FILLER.
019100         05  FILLER     PIC S9(4) BINARY VALUE +7.
019200         05  FILLER     PIC X(14) VALUE 'FIFTEEN'.
019300     03  FILLER.
019400         05  FILLER     PIC S9(4) BINARY VALUE +7.
019500         05  FILLER     PIC X(14) VALUE 'SIXTEEN'.
019600     03  FILLER.
019700         05  FILLER     PIC S9(4) BINARY VALUE +9.
019800         05  FILLER     PIC X(14) VALUE 'SEVENTEEN'.
019900     03  FILLER.
020000         05  FILLER     PIC S9(4) BINARY VALUE +8.
020100         05  FILLER     PIC X(14) VALUE 'EIGHTEEN'.
020200     03  FILLER.
020300         05  FILLER     PIC S9(4) BINARY VALUE +8.
020400         05  FILLER     PIC X(14) VALUE 'NINETEEN'.
020500     03  FILLER.
020600         05  FILLER     PIC S9(4) BINARY VALUE +6.
020700         05  FILLER     PIC X(14) VALUE 'TWENTY'.
020800     03  FILLER.
020900         05  FILLER     PIC S9(4) BINARY VALUE +10.
021000         05  FILLER     PIC X(14) VALUE 'TWENTY-ONE'.
021100     03  FILLER.
021200         05  FILLER     PIC S9(4) BINARY VALUE +10.
021300         05  FILLER     PIC X(14) VALUE 'TWENTY-TWO'.
021400     03  FILLER.
021500         05  FILLER     PIC S9(4) BINARY VALUE +12.
021600         05  FILLER     PIC X(14) VALUE 'TWENTY-THREE'.
021700     03  FILLER.
021800         05  FILLER     PIC S9(4) BINARY VALUE +11.
021900         05  FILLER     PIC X(14) VALUE 'TWENTY-FOUR'.
022000     03  FILLER.
022100         05  FILLER     PIC S9(4) BINARY VALUE +11.
022200         05  FILLER     PIC X(14) VALUE 'TWENTY-FIVE'.
022300     03  FILLER.
022400         05  FILLER     PIC S9(4) BINARY VALUE +10.
022500         05  FILLER     PIC X(14) VALUE 'TWENTY-SIX'.
022600     03  FILLER.
022700         05  FILLER     PIC S9(4) BINARY VALUE +12.
022800         05  FILLER     PIC X(14) VALUE 'TWENTY-SEVEN'.
022900     03  FILLER.
023000         05  FILLER     PIC S9(4) BINARY VALUE +12.
023100         05  FILLER     PIC X(14) VALUE 'TWENTY-EIGHT'.
023200     03  FILLER.
023300         05  FILLER     PIC S9(4) BINARY VALUE +11.
023400         05  FILLER     PIC X(14) VALUE 'TWENTY-NINE'.
023500     03  FILLER.
023600         05  FILLER     PIC S9(4) BINARY VALUE +6.
023700         05  FILLER     PIC X(14) VALUE 'THIRTY'.
023800     03  FILLER.
023900         05  FILLER     PIC S9(4) BINARY VALUE +10.
024000         05  FILLER     PIC X(14) VALUE 'THIRTY-ONE'.
024100     03  FILLER.
024200         05  FILLER     PIC S9(4) BINARY VALUE +10.
024300         05  FILLER     PIC X(14) VALUE 'THIRTY-TWO'.
024400     03  FILLER.
024500         05  FILLER     PIC S9(4) BINARY VALUE +12.
024600         05  FILLER     PIC X(14) VALUE 'THIRTY-THREE'.
024700     03  FILLER.
024800         05  FILLER     PIC S9(4) BINARY VALUE +11.
024900         05  FILLER     PIC X(14) VALUE 'THIRTY-FOUR'.
025000     03  FILLER.
025100         05  FILLER     PIC S9(4) BINARY VALUE +11.
025200         05  FILLER     PIC X(14) VALUE 'THIRTY-FIVE'.
025300     03  FILLER.
025400         05  FILLER     PIC S9(4) BINARY VALUE +10.
025500         05  FILLER     PIC X(14) VALUE 'THIRTY-SIX'.
025600     03  FILLER.
025700         05  FILLER     PIC S9(4) BINARY VALUE +12.
025800         05  FILLER     PIC X(14) VALUE 'THIRTY-SEVEN'.
025900     03  FILLER.
026000         05  FILLER     PIC S9(4) BINARY VALUE +12.
026100         05  FILLER     PIC X(14) VALUE 'THIRTY-EIGHT'.
026200     03  FILLER.
026300         05  FILLER     PIC S9(4) BINARY VALUE +11.
026400         05  FILLER     PIC X(14) VALUE 'THIRTY-NINE'.
026500     03  FILLER.
026600         05  FILLER     PIC S9(4) BINARY VALUE +5.
026700         05  FILLER     PIC X(14) VALUE 'FORTY'.
026800     03  FILLER.
026900         05  FILLER     PIC S9(4) BINARY VALUE +9.
027000         05  FILLER     PIC X(14) VALUE 'FORTY-ONE'.
027100     03  FILLER.
027200         05  FILLER     PIC S9(4) BINARY VALUE +9.
027300         05  FILLER     PIC X(14) VALUE 'FORTY-TWO'.
027400     03  FILLER.
027500         05  FILLER     PIC S9(4) BINARY VALUE +11.
027600         05  FILLER     PIC X(14) VALUE 'FORTY-THREE'.
027700     03  FILLER.
027800         05  FILLER     PIC S9(4) BINARY VALUE +10.
027900         05  FILLER     PIC X(14) VALUE 'FORTY-FOUR'.
028000     03  FILLER.
028100         05  FILLER     PIC S9(4) BINARY VALUE +10.
028200         05  FILLER     PIC X(14) VALUE 'FORTY-FIVE'.
028300     03  FILLER.
028400         05  FILLER     PIC S9(4) BINARY VALUE +9.
028500         05  FILLER     PIC X(14) VALUE 'FORTY-SIX'.
028600     03  FILLER.
028700         05  FILLER     PIC S9(4) BINARY VALUE +11.
028800         05  FILLER     PIC X(14) VALUE 'FORTY-SEVEN'.
028900     03  FILLER.
029000         05  FILLER     PIC S9(4) BINARY VALUE +11.
029100         05  FILLER     PIC X(14) VALUE 'FORTY-EIGHT'.
029200     03  FILLER.
029300         05  FILLER     PIC S9(4) BINARY VALUE +10.
029400         05  FILLER     PIC X(14) VALUE 'FORTY-NINE'.
029500     03  FILLER.
029600         05  FILLER     PIC S9(4) BINARY VALUE +5.
029700         05  FILLER     PIC X(14) VALUE 'FIFTY'.
029800     03  FILLER.
029900         05  FILLER     PIC S9(4) BINARY VALUE +9.
030000         05  FILLER     PIC X(14) VALUE 'FIFTY-ONE'.
030100     03  FILLER.
030200         05  FILLER     PIC S9(4) BINARY VALUE +9.
030300         05  FILLER     PIC X(14) VALUE 'FIFTY-TWO'.
030400     03  FILLER.
030500         05  FILLER     PIC S9(4) BINARY VALUE +11.
030600         05  FILLER     PIC X(14) VALUE 'FIFTY-THREE'.
030700     03  FILLER.
030800         05  FILLER     PIC S9(4) BINARY VALUE +10.
030900         05  FILLER     PIC X(14) VALUE 'FIFTY-FOUR'.
031000     03  FILLER.
031100         05  FILLER     PIC S9(4) BINARY VALUE +10.
031200         05  FILLER     PIC X(14) VALUE 'FIFTY-FIVE'.
031300     03  FILLER.
031400         05  FILLER     PIC S9(4) BINARY VALUE +9.
031500         05  FILLER     PIC X(14) VALUE 'FIFTY-SIX'.
031600     03  FILLER.
031700         05  FILLER     PIC S9(4) BINARY VALUE +11.
031800         05  FILLER     PIC X(14) VALUE 'FIFTY-SEVEN'.
031900     03  FILLER.
032000         05  FILLER     PIC S9(4) BINARY VALUE +11.
032100         05  FILLER     PIC X(14) VALUE 'FIFTY-EIGHT'.
032200     03  FILLER.
032300         05  FILLER     PIC S9(4) BINARY VALUE +10.
032400         05  FILLER     PIC X(14) VALUE 'FIFTY-NINE'.
032500     03  FILLER.
032600         05  FILLER     PIC S9(4) BINARY VALUE +5.
032700         05  FILLER     PIC X(14) VALUE 'SIXTY'.
032800     03  FILLER.
032900         05  FILLER     PIC S9(4) BINARY VALUE +9.
033000         05  FILLER     PIC X(14) VALUE 'SIXTY-ONE'.
033100     03  FILLER.
033200         05  FILLER     PIC S9(4) BINARY VALUE +9.
033300         05  FILLER     PIC X(14) VALUE 'SIXTY-TWO'.
033400     03  FILLER.
033500         05  FILLER     PIC S9(4) BINARY VALUE +11.
033600         05  FILLER     PIC X(14) VALUE 'SIXTY-THREE'.
033700     03  FILLER.
033800         05  FILLER     PIC S9(4) BINARY VALUE +10.
033900         05  FILLER     PIC X(14) VALUE 'SIXTY-FOUR'.
034000     03  FILLER.
034100         05  FILLER     PIC S9(4) BINARY VALUE +10.
034200         05  FILLER     PIC X(14) VALUE 'SIXTY-FIVE'.
034300     03  FILLER.
034400         05  FILLER     PIC S9(4) BINARY VALUE +9.
034500         05  FILLER     PIC X(14) VALUE 'SIXTY-SIX'.
034600     03  FILLER.
034700         05  FILLER     PIC S9(4) BINARY VALUE +11.
034800         05  FILLER     PIC X(14) VALUE 'SIXTY-SEVEN'.
034900     03  FILLER.
035000         05  FILLER     PIC S9(4) BINARY VALUE +11.
035100         05  FILLER     PIC X(14) VALUE 'SIXTY-EIGHT'.
035200     03  FILLER.
035300         05  FILLER     PIC S9(4) BINARY VALUE +10.
035400         05  FILLER     PIC X(14) VALUE 'SIXTY-NINE'.
035500     03  FILLER.
035600         05  FILLER     PIC S9(4) BINARY VALUE +7.
035700         05  FILLER     PIC X(14) VALUE 'SEVENTY'.
035800     03  FILLER.
035900         05  FILLER     PIC S9(4) BINARY VALUE +11.
036000         05  FILLER     PIC X(14) VALUE 'SEVENTY-ONE'.
036100     03  FILLER.
036200         05  FILLER     PIC S9(4) BINARY VALUE +11.
036300         05  FILLER     PIC X(14) VALUE 'SEVENTY-TWO'.
036400     03  FILLER.
036500         05  FILLER     PIC S9(4) BINARY VALUE +13.
036600         05  FILLER     PIC X(14) VALUE 'SEVENTY-THREE'.
036700     03  FILLER.
036800         05  FILLER     PIC S9(4) BINARY VALUE +12.
036900         05  FILLER     PIC X(14) VALUE 'SEVENTY-FOUR'.
037000     03  FILLER.
037100         05  FILLER     PIC S9(4) BINARY VALUE +12.
037200         05  FILLER     PIC X(14) VALUE 'SEVENTY-FIVE'.
037300     03  FILLER.
037400         05  FILLER     PIC S9(4) BINARY VALUE +11.
037500         05  FILLER     PIC X(14) VALUE 'SEVENTY-SIX'.
037600     03  FILLER.
037700         05  FILLER     PIC S9(4) BINARY VALUE +13.
037800         05  FILLER     PIC X(14) VALUE 'SEVENTY-SEVEN'.
037900     03  FILLER.
038000         05  FILLER     PIC S9(4) BINARY VALUE +13.
038100         05  FILLER     PIC X(14) VALUE 'SEVENTY-EIGHT'.
038200     03  FILLER.
038300         05  FILLER     PIC S9(4) BINARY VALUE +12.
038400         05  FILLER     PIC X(14) VALUE 'SEVENTY-NINE'.
038500     03  FILLER.
038600         05  FILLER     PIC S9(4) BINARY VALUE +6.
038700         05  FILLER     PIC X(14) VALUE 'EIGHTY'.
038800     03  FILLER.
038900         05  FILLER     PIC S9(4) BINARY VALUE +10.
039000         05  FILLER     PIC X(14) VALUE 'EIGHTY-ONE'.
039100     03  FILLER.
039200         05  FILLER     PIC S9(4) BINARY VALUE +11.
039300         05  FILLER     PIC X(14) VALUE 'EIGHTY-TWO'.
039400     03  FILLER.
039500         05  FILLER     PIC S9(4) BINARY VALUE +12.
039600         05  FILLER     PIC X(14) VALUE 'EIGHTY-THREE'.
039700     03  FILLER.
039800         05  FILLER     PIC S9(4) BINARY VALUE +11.
039900         05  FILLER     PIC X(14) VALUE 'EIGHTY-FOUR'.
040000     03  FILLER.
040100         05  FILLER     PIC S9(4) BINARY VALUE +11.
040200         05  FILLER     PIC X(14) VALUE 'EIGHTY-FIVE'.
040300     03  FILLER.
040400         05  FILLER     PIC S9(4) BINARY VALUE +10.
040500         05  FILLER     PIC X(14) VALUE 'EIGHTY-SIX'.
040600     03  FILLER.
040700         05  FILLER     PIC S9(4) BINARY VALUE +12.
040800         05  FILLER     PIC X(14) VALUE 'EIGHTY-SEVEN'.
040900     03  FILLER.
041000         05  FILLER     PIC S9(4) BINARY VALUE +12.
041100         05  FILLER     PIC X(14) VALUE 'EIGHTY-EIGHT'.
041200     03  FILLER.
041300         05  FILLER     PIC S9(4) BINARY VALUE +11.
041400         05  FILLER     PIC X(14) VALUE 'EIGHTY-NINE'.
041500     03  FILLER.
041600         05  FILLER     PIC S9(4) BINARY VALUE +6.
041700         05  FILLER     PIC X(14) VALUE 'NINETY'.
041800     03  FILLER.
041900         05  FILLER     PIC S9(4) BINARY VALUE +10.
042000         05  FILLER     PIC X(14) VALUE 'NINETY-ONE'.
042100     03  FILLER.
042200         05  FILLER     PIC S9(4) BINARY VALUE +10.
042300         05  FILLER     PIC X(14) VALUE 'NINETY-TWO'.
042400     03  FILLER.
042500         05  FILLER     PIC S9(4) BINARY VALUE +12.
042600         05  FILLER     PIC X(14) VALUE 'NINETY-THREE'.
042700     03  FILLER.
042800         05  FILLER     PIC S9(4) BINARY VALUE +11.
042900         05  FILLER     PIC X(14) VALUE 'NINETY-FOUR'.
043000     03  FILLER.
043100         05  FILLER     PIC S9(4) BINARY VALUE +11.
043200         05  FILLER     PIC X(14) VALUE 'NINETY-FIVE'.
043300     03  FILLER.
043400         05  FILLER     PIC S9(4) BINARY VALUE +10.
043500         05  FILLER     PIC X(14) VALUE 'NINETY-SIX'.
043600     03  FILLER.
043700         05  FILLER     PIC S9(4) BINARY VALUE +12.
043800         05  FILLER     PIC X(14) VALUE 'NINETY-SEVEN'.
043900     03  FILLER.
044000         05  FILLER     PIC S9(4) BINARY VALUE +12.
044100         05  FILLER     PIC X(14) VALUE 'NINETY-EIGHT'.
044200     03  FILLER.
044300         05  FILLER     PIC S9(4) BINARY VALUE +11.
044400         05  FILLER     PIC X(14) VALUE 'NINETY-NINE'.
044500 01  WS-HUNDREDS-VECTOR REDEFINES WS-HUNDREDS-VECTOR-VALUES.
044600     03  WS-HUNDREDS-ENTRY
044700                  OCCURS 99 TIMES
044800                  INDEXED BY WS-HUNDREDS-IDX1.
044900         05  FILLER     PIC S9(4) BINARY.
045000         05  FILLER     PIC X(14).
045100     SKIP1
045200 01  WS-DECIMAL-VECTOR-VALUES.
045300     03  FILLER.
045400         05  FILLER     PIC S9(4) BINARY VALUE +6.
045500         05  FILLER     PIC X(20) VALUE 'TENTHS'.
045600     03  FILLER.
045700         05  FILLER     PIC S9(4) BINARY VALUE +10.
045800         05  FILLER     PIC X(20) VALUE 'HUNDREDTHS'.
045900     03  FILLER.
046000         05  FILLER     PIC S9(4) BINARY VALUE +11.
046100         05  FILLER     PIC X(20) VALUE 'THOUSANDTHS'.
046200     03  FILLER.
046300         05  FILLER     PIC S9(4) BINARY VALUE +15.
046400         05  FILLER     PIC X(20) VALUE 'TEN-THOUSANDTHS'.
046500     03  FILLER.
046600         05  FILLER     PIC S9(4) BINARY VALUE +19.
046700         05  FILLER     PIC X(20) VALUE 'HUNDRED-THOUSANDTHS'.
046800     03  FILLER.
046900         05  FILLER     PIC S9(4) BINARY VALUE +10.
047000         05  FILLER     PIC X(20) VALUE 'MILLIONTHS'.
047100     03  FILLER.
047200         05  FILLER     PIC S9(4) BINARY VALUE +14.
047300         05  FILLER     PIC X(20) VALUE 'TEN-MILLIONTHS'.
047400     03  FILLER.
047500         05  FILLER     PIC S9(4) BINARY VALUE +18.
047600         05  FILLER     PIC X(20) VALUE 'HUNDRED-MILLIONTHS'.
047700     03  FILLER.
047800         05  FILLER     PIC S9(4) BINARY VALUE +10.
047900         05  FILLER     PIC X(20) VALUE 'BILLIONTHS'.
048000 01  WS-DECIMAL-VECTOR REDEFINES WS-DECIMAL-VECTOR-VALUES.
048100     03  WS-DECIMAL-ENTRY
048200                  OCCURS 9 TIMES
048300                  INDEXED BY WS-DECIMAL-IDX1.
048400         05  FILLER     PIC S9(4) BINARY.
048500         05  FILLER     PIC X(20).
048600     SKIP2
048700 LOCAL-STORAGE SECTION.
048800     SKIP1
048900 01  LS-AS-MODULE       PIC X(08).
049000 01  LS-ENCLAVE-RC      PIC S9(9) BINARY SYNC.
049100 01  LS-OUTPUT-FORMAT   PIC X(01).
049200   88  LS-OUTPUT-WRD        VALUE '1'.
049300   88  LS-OUTPUT-CUR        VALUE '2'.
049400   88  LS-OUTPUT-CHK        VALUE '3'.
049500 01  LS-PROCESS-FLAG    PIC X(01).
049600   88  LS-NEG-ON            VALUE 'Y'.
049700
049800 01  FILLER.
049900     03  LS-TEMP        PIC S9(4) BINARY SYNC.
050000     03  LS-DATA-LEN    PIC S9(4) BINARY SYNC.
050100     03  LS-DATA-POS    PIC S9(4) BINARY SYNC.
050200     03  LS-DIGITS-LOD  PIC S9(4) BINARY SYNC.
050300     03  LS-DIGITS-SLOD PIC S9(4) BINARY SYNC.
050400     03  LS-NBRDIG-ROD  PIC S9(4) BINARY SYNC.
050500     03  LS-DIGITS-ROD  PIC S9(4) BINARY SYNC.
050600     03  LS-DIGITS-SROD PIC S9(4) BINARY SYNC.
050700     03  LS-ZONE-NBR    PIC S9(18).
050800     03  LS-ZONE-DATA REDEFINES LS-ZONE-NBR PIC X(18).
050900     03  LS-3BYTES-X.
051000         05  LS-3BYTES-N     PIC S9(03).
051100     03  LS-3BYTES-9         PIC  9(03).
051200     03  FILLER REDEFINES LS-3BYTES-9.
051300         05  LS-1BYTES-9     PIC  9(01).
051400         05  LS-2BYTES-9     PIC  9(02).
051500     03  LS-2BYTES-X    PIC X(02).
051600     03  LS-2BYTES-N REDEFINES LS-2BYTES-X  PIC S9(02).
051700     03  LS-4DIGITS     PIC 9(04).
051800
051900 01  FILLER.
052000     03  LS-ZONE-FILLER PIC X(18).
052100     03  FILLER REDEFINES LS-ZONE-FILLER.
052200         05  LS-ZONE-1       PIC S9(1).
052300         05  FILLER          PIC X(17).
052400     03  FILLER REDEFINES LS-ZONE-FILLER.
052500         05  LS-ZONE-2       PIC S9(2).
052600         05  FILLER          PIC X(16).
052700     03  FILLER REDEFINES LS-ZONE-FILLER.
052800         05  LS-ZONE-3       PIC S9(3).
052900         05  FILLER          PIC X(15).
053000     03  FILLER REDEFINES LS-ZONE-FILLER.
053100         05  LS-ZONE-4       PIC S9(4).
053200         05  FILLER          PIC X(14).
053300     03  FILLER REDEFINES LS-ZONE-FILLER.
053400         05  LS-ZONE-5       PIC S9(5).
053500         05  FILLER          PIC X(13).
053600     03  FILLER REDEFINES LS-ZONE-FILLER.
053700         05  LS-ZONE-6       PIC S9(6).
053800         05  FILLER          PIC X(12).
053900     03  FILLER REDEFINES LS-ZONE-FILLER.
054000         05  LS-ZONE-7       PIC S9(7).
054100         05  FILLER          PIC X(11).
054200     03  FILLER REDEFINES LS-ZONE-FILLER.
054300         05  LS-ZONE-8       PIC S9(8).
054400         05  FILLER          PIC X(10).
054500     03  FILLER REDEFINES LS-ZONE-FILLER.
054600         05  LS-ZONE-9       PIC S9(9).
054700         05  FILLER          PIC X(09).
054800     03  FILLER REDEFINES LS-ZONE-FILLER.
054900         05  LS-ZONE-10      PIC S9(10).
055000         05  FILLER          PIC X(08).
055100     03  FILLER REDEFINES LS-ZONE-FILLER.
055200         05  LS-ZONE-11      PIC S9(11).
055300         05  FILLER          PIC X(07).
055400     03  FILLER REDEFINES LS-ZONE-FILLER.
055500         05  LS-ZONE-12      PIC S9(12).
055600         05  FILLER          PIC X(06).
055700     03  FILLER REDEFINES LS-ZONE-FILLER.
055800         05  LS-ZONE-13      PIC S9(13).
055900         05  FILLER          PIC X(05).
056000     03  FILLER REDEFINES LS-ZONE-FILLER.
056100         05  LS-ZONE-14      PIC S9(14).
056200         05  FILLER          PIC X(04).
056300     03  FILLER REDEFINES LS-ZONE-FILLER.
056400         05  LS-ZONE-15      PIC S9(15).
056500         05  FILLER          PIC X(03).
056600     03  FILLER REDEFINES LS-ZONE-FILLER.
056700         05  LS-ZONE-16      PIC S9(16).
056800         05  FILLER          PIC X(02).
056900     03  FILLER REDEFINES LS-ZONE-FILLER.
057000         05  LS-ZONE-17      PIC S9(17).
057100         05  FILLER          PIC X(01).
057200     03  FILLER REDEFINES LS-ZONE-FILLER.
057300         05  LS-ZONE-18      PIC S9(18).
057400     SKIP1
057500 01  FILLER.
057600     03  LS-PACK-FILLER PIC X(18).
057700     03  FILLER REDEFINES LS-PACK-FILLER.
057800         05  LS-PACK-1       PIC S9(1) PACKED-DECIMAL.
057900         05  FILLER          PIC X(17).
058000     03  FILLER REDEFINES LS-PACK-FILLER.
058100         05  LS-PACK-2       PIC S9(3) PACKED-DECIMAL.
058200         05  FILLER          PIC X(16).
058300     03  FILLER REDEFINES LS-PACK-FILLER.
058400         05  LS-PACK-3       PIC S9(5) PACKED-DECIMAL.
058500         05  FILLER          PIC X(15).
058600     03  FILLER REDEFINES LS-PACK-FILLER.
058700         05  LS-PACK-4       PIC S9(7) PACKED-DECIMAL.
058800         05  FILLER          PIC X(14).
058900     03  FILLER REDEFINES LS-PACK-FILLER.
059000         05  LS-PACK-5       PIC S9(9) PACKED-DECIMAL.
059100         05  FILLER          PIC X(13).
059200     03  FILLER REDEFINES LS-PACK-FILLER.
059300         05  LS-PACK-6       PIC S9(11) PACKED-DECIMAL.
059400         05  FILLER          PIC X(12).
059500     03  FILLER REDEFINES LS-PACK-FILLER.
059600         05  LS-PACK-7       PIC S9(13) PACKED-DECIMAL.
059700         05  FILLER          PIC X(11).
059800     03  FILLER REDEFINES LS-PACK-FILLER.
059900         05  LS-PACK-8       PIC S9(15) PACKED-DECIMAL.
060000         05  FILLER          PIC X(10).
060100     03  FILLER REDEFINES LS-PACK-FILLER.
060200         05  LS-PACK-9       PIC S9(17) PACKED-DECIMAL.
060300         05  FILLER          PIC X(09).
060400     03  FILLER REDEFINES LS-PACK-FILLER.
060500         05  LS-PACK-10      PIC S9(18) PACKED-DECIMAL.
060600         05  FILLER          PIC X(08).
060700     SKIP1
060800     COPY AS5LAREQ.
060900     SKIP1
061000     COPY AS5CTOK.
061100     SKIP2
061200 LINKAGE SECTION.
061300     SKIP1
061400     COPY AS5CA.
061500     SKIP1
061600     COPY AS5LARO1.
061700     SKIP1
061800     COPY AS5LAST1.
061900     SKIP1
062000 01  XS-TMPLATE-CNT     PIC S9(9) BINARY.
062100     SKIP1
062200     COPY AS5LART1.
062300     SKIP1
062400     COPY AS5FDBK.
062500     EJECT
062600 PROCEDURE DIVISION USING
062700     ASCA-COMMAREA
062800     AS5LARO1-OPTIONS
062900     AS5LAST1-SOURCE
063000     XS-TMPLATE-CNT
063100     AS5LART1-RESULT-TEMPLATE
063200     AS5FDBK-COND-AREA.
063300     SKIP2
063400     CONTINUE.
063500 0100-00-INIT.
063600
063700     IF NOT (XS-TMPLATE-CNT >= +1)
063800       MOVE +4 TO LS-ENCLAVE-RC
063900       GO TO 1000-99-END
064000     END-IF
064100
064200     MOVE LOW-VALUE TO LS-PROCESS-FLAG
064300                       AS5CTOK-OCTOKEN
064400     MOVE ZERO      TO LS-ENCLAVE-RC
064500
064600     CONTINUE.
064700 1000-00-MAINLINE.
064800
064900*    ESTABLISH THE OUTPUT FORMAT i.e. word, currency, check
065000     SET LS-OUTPUT-CHK TO TRUE
065100     IF AS5LARO1-NBR2WRD
065200       SET LS-OUTPUT-WRD TO TRUE
065300     END-IF
065400     IF AS5LARO1-NBR2CUR
065500       SET LS-OUTPUT-CUR TO TRUE
065600     END-IF
065700
065800     MOVE ZERO TO AS5LAREQ-RSLT-TOKEN-EXPS (1)
065900
066000     IF AS5LARO1-COUNT > 0
066100       MOVE 'R' TO AS5LAREQ-RSLT-TOKEN-TYPE (1)
066200       MOVE AS5LARO1-COUNT TO AS5LAREQ-RSLT-TOKEN-SCALES (1)
066300     ELSE
066400       MOVE 'Z' TO AS5LAREQ-RSLT-TOKEN-TYPE (1)
066500       MOVE ZERO TO AS5LAREQ-RSLT-TOKEN-SCALES (1)
066600     END-IF
066700
066800     MOVE ZERO TO LS-ZONE-NBR
066900     IF AS5LAST1-SRC-LEN <= +18
067000*      DETERMINE IF SOURCE DATA IS VALID ZONE DECIMAL FORMAT
067100       EVALUATE TRUE
067200         WHEN AS5LAST1-SRC-LEN = +1
067300           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
067400                TO LS-ZONE-FILLER
067500           IF LS-ZONE-1 NUMERIC
067600             MOVE LS-ZONE-1 TO LS-ZONE-NBR
067700           END-IF
067800         WHEN AS5LAST1-SRC-LEN = +2
067900           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
068000                TO LS-ZONE-FILLER
068100           IF LS-ZONE-2 NUMERIC
068200             MOVE LS-ZONE-2 TO LS-ZONE-NBR
068300           END-IF
068400         WHEN AS5LAST1-SRC-LEN = +3
068500           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
068600                TO LS-ZONE-FILLER
068700           IF LS-ZONE-3 NUMERIC
068800             MOVE LS-ZONE-3 TO LS-ZONE-NBR
068900           END-IF
069000         WHEN AS5LAST1-SRC-LEN = +4
069100           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
069200                TO LS-ZONE-FILLER
069300           IF LS-ZONE-4 NUMERIC
069400             MOVE LS-ZONE-4 TO LS-ZONE-NBR
069500           END-IF
069600         WHEN AS5LAST1-SRC-LEN = +5
069700           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
069800                TO LS-ZONE-FILLER
069900           IF LS-ZONE-5 NUMERIC
070000             MOVE LS-ZONE-5 TO LS-ZONE-NBR
070100           END-IF
070200         WHEN AS5LAST1-SRC-LEN = +6
070300           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
070400                TO LS-ZONE-FILLER
070500           IF LS-ZONE-6 NUMERIC
070600             MOVE LS-ZONE-6 TO LS-ZONE-NBR
070700           END-IF
070800         WHEN AS5LAST1-SRC-LEN = +7
070900           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
071000                TO LS-ZONE-FILLER
071100           IF LS-ZONE-7 NUMERIC
071200             MOVE LS-ZONE-7 TO LS-ZONE-NBR
071300           END-IF
071400         WHEN AS5LAST1-SRC-LEN = +8
071500           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
071600                TO LS-ZONE-FILLER
071700           IF LS-ZONE-8 NUMERIC
071800             MOVE LS-ZONE-8 TO LS-ZONE-NBR
071900           END-IF
072000         WHEN AS5LAST1-SRC-LEN = +9
072100           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
072200                TO LS-ZONE-FILLER
072300           IF LS-ZONE-9 NUMERIC
072400             MOVE LS-ZONE-9 TO LS-ZONE-NBR
072500           END-IF
072600         WHEN AS5LAST1-SRC-LEN = +10
072700           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
072800                TO LS-ZONE-FILLER
072900           IF LS-ZONE-10 NUMERIC
073000             MOVE LS-ZONE-10 TO LS-ZONE-NBR
073100           END-IF
073200         WHEN AS5LAST1-SRC-LEN = +11
073300           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
073400                TO LS-ZONE-FILLER
073500           IF LS-ZONE-11 NUMERIC
073600             MOVE LS-ZONE-11 TO LS-ZONE-NBR
073700           END-IF
073800         WHEN AS5LAST1-SRC-LEN = +12
073900           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
074000                TO LS-ZONE-FILLER
074100           IF LS-ZONE-12 NUMERIC
074200             MOVE LS-ZONE-12 TO LS-ZONE-NBR
074300           END-IF
074400         WHEN AS5LAST1-SRC-LEN = +13
074500           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
074600                TO LS-ZONE-FILLER
074700           IF LS-ZONE-13 NUMERIC
074800             MOVE LS-ZONE-13 TO LS-ZONE-NBR
074900           END-IF
075000         WHEN AS5LAST1-SRC-LEN = +14
075100           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
075200                TO LS-ZONE-FILLER
075300           IF LS-ZONE-14 NUMERIC
075400             MOVE LS-ZONE-14 TO LS-ZONE-NBR
075500           END-IF
075600         WHEN AS5LAST1-SRC-LEN = +15
075700           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
075800                TO LS-ZONE-FILLER
075900           IF LS-ZONE-15 NUMERIC
076000             MOVE LS-ZONE-15 TO LS-ZONE-NBR
076100           END-IF
076200         WHEN AS5LAST1-SRC-LEN = +16
076300           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
076400                TO LS-ZONE-FILLER
076500           IF LS-ZONE-16 NUMERIC
076600             MOVE LS-ZONE-16 TO LS-ZONE-NBR
076700           END-IF
076800         WHEN AS5LAST1-SRC-LEN = +17
076900           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
077000                TO LS-ZONE-FILLER
077100           IF LS-ZONE-17 NUMERIC
077200             MOVE LS-ZONE-17 TO LS-ZONE-NBR
077300           END-IF
077400         WHEN AS5LAST1-SRC-LEN = +18
077500           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
077600                TO LS-ZONE-FILLER
077700           IF LS-ZONE-18 NUMERIC
077800             MOVE LS-ZONE-18 TO LS-ZONE-NBR
077900           END-IF
078000       END-EVALUATE
078100     END-IF
078200
078300     IF LS-ZONE-NBR = ZERO
078400*      DETERMINE IF SOURCE DATA IS VALID PACK DECIMAL FORMAT
078500       IF AS5LAST1-SRC-LEN <= +10
078600         EVALUATE TRUE
078700           WHEN AS5LAST1-SRC-LEN = +1
078800             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
078900                  TO LS-PACK-FILLER
079000             IF LS-PACK-1 NUMERIC
079100               MOVE LS-PACK-1 TO LS-ZONE-NBR
079200             END-IF
079300           WHEN AS5LAST1-SRC-LEN = +2
079400             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
079500                  TO LS-PACK-FILLER
079600             IF LS-PACK-2 NUMERIC
079700               MOVE LS-PACK-2 TO LS-ZONE-NBR
079800             END-IF
079900           WHEN AS5LAST1-SRC-LEN = +3
080000             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
080100                  TO LS-PACK-FILLER
080200             IF LS-PACK-3 NUMERIC
080300               MOVE LS-PACK-3 TO LS-ZONE-NBR
080400             END-IF
080500           WHEN AS5LAST1-SRC-LEN = +4
080600             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
080700                  TO LS-PACK-FILLER
080800             IF LS-PACK-4 NUMERIC
080900               MOVE LS-PACK-4 TO LS-ZONE-NBR
081000             END-IF
081100           WHEN AS5LAST1-SRC-LEN = +5
081200             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
081300                  TO LS-PACK-FILLER
081400             IF LS-PACK-5 NUMERIC
081500               MOVE LS-PACK-5 TO LS-ZONE-NBR
081600             END-IF
081700           WHEN AS5LAST1-SRC-LEN = +6
081800             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
081900                  TO LS-PACK-FILLER
082000             IF LS-PACK-6 NUMERIC
082100               MOVE LS-PACK-6 TO LS-ZONE-NBR
082200             END-IF
082300           WHEN AS5LAST1-SRC-LEN = +7
082400             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
082500                  TO LS-PACK-FILLER
082600             IF LS-PACK-7 NUMERIC
082700               MOVE LS-PACK-7 TO LS-ZONE-NBR
082800             END-IF
082900           WHEN AS5LAST1-SRC-LEN = +8
083000             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
083100                  TO LS-PACK-FILLER
083200             IF LS-PACK-8 NUMERIC
083300               MOVE LS-PACK-8 TO LS-ZONE-NBR
083400             END-IF
083500           WHEN AS5LAST1-SRC-LEN = +9
083600             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
083700                  TO LS-PACK-FILLER
083800             IF LS-PACK-9 NUMERIC
083900               MOVE LS-PACK-9 TO LS-ZONE-NBR
084000             END-IF
084100           WHEN AS5LAST1-SRC-LEN = +10
084200             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
084300                  TO LS-PACK-FILLER
084400             IF LS-PACK-10 NUMERIC
084500               MOVE LS-PACK-10 TO LS-ZONE-NBR
084600             END-IF
084700         END-EVALUATE
084800       END-IF
084900     END-IF
085000
085100     IF LS-ZONE-NBR NOT = ZERO
085200*      SAVE NBR WITH NO LEADING ZEROS
085300       MOVE LENGTH OF LS-ZONE-NBR TO LS-DATA-LEN
085400       PERFORM VARYING LS-DATA-POS FROM +1 BY +1
085500            UNTIL LS-ZONE-DATA (LS-DATA-POS:1) > ZERO
085600               OR LS-DATA-POS > +17
085700         SUBTRACT +1 FROM LS-DATA-LEN
085800       END-PERFORM
085900       MOVE LS-DATA-LEN TO AS5LAREQ-RSLT-TOKEN-DIGITS (1)
086000       MOVE LS-ZONE-DATA (LS-DATA-POS:LS-DATA-LEN)
086100            TO AS5LAREQ-RSLT-TOKEN-NBR (1)
086200     END-IF
086300
086400     IF LS-ZONE-NBR = ZERO
086500*      DETERMINE IF SOURCE DATA IS VALID EDITED NUMERIC FORMAT
086600       INITIALIZE AS5LAREQ-OPTIONS
086700       MOVE AS5LARO1-OPT-FLAG TO AS5LAREQ-OPT-FLAG
086800       INITIALIZE AS5LAREQ-SOURCE
086900       MOVE AS5LAST1-SRC-LEN  TO AS5LAREQ-SRC-LEN
087000       MOVE AS5LAST1-SRC-FLD  TO AS5LAREQ-SRC-FLD
087100       MOVE +1 TO AS5LAREQ-TEMPLATE-CNT
087200       INITIALIZE AS5LAREQ-RESULT-TEMPLATE (1)
087300       MOVE X'04' TO AS5LAREQ-RSLT-PATTYPE (1)
087400       MOVE +50 TO AS5LAREQ-RSLT-STR-SIZE (1)
087500       PERFORM 7000-00-CALL-ASUDDEDT THRU 7000-99-END
087600     END-IF
087700
087800     IF LS-OUTPUT-CUR
087900       IF AS5LAREQ-RSLT-TOKEN-SCALES (1) > 2
088000         MOVE +4 TO LS-ENCLAVE-RC
088100         GO TO 1000-99-END
088200       END-IF
088300     END-IF
088400
088500*    DETERMINE SIGN
088600     MOVE AS5LAREQ-RSLT-TOKEN-DIGITS (1)
088700          TO LS-DATA-POS
088800
088900     IF LS-DATA-POS NOT > ZERO
089000       MOVE +16 TO LS-ENCLAVE-RC
089100       GO TO 1000-99-END
089200     END-IF
089300
089400     IF AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1) =
089500          X'D0' OR
089600          (AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1)
089700          >= 'J' AND <= 'R')
089800       SET LS-NEG-ON TO TRUE
089900     END-IF
090000
090100*    CALCULATE NBR OF SIGNIFICANT DIGITS LEFT OF DECIMAL
090200     COMPUTE LS-DIGITS-LOD = AS5LAREQ-RSLT-TOKEN-DIGITS (1)
090300          - AS5LAREQ-RSLT-TOKEN-SCALES (1)
090400
090500*    CALCULATE NBR OF SIGNIFICANT DIGITS RIGHT OF DECIMAL
090600     MOVE AS5LAREQ-RSLT-TOKEN-SCALES (1)
090700          TO LS-NBRDIG-ROD
090800     IF LS-NBRDIG-ROD > ZERO
090900       COMPUTE LS-TEMP = LS-DIGITS-LOD + 1
091000       PERFORM VARYING LS-DATA-POS FROM LS-TEMP BY +1
091100            UNTIL AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1)
091200                 > ZERO
091300               OR LS-DATA-POS > AS5LAREQ-RSLT-TOKEN-DIGITS (1)
091400         SUBTRACT +1 FROM LS-NBRDIG-ROD
091500       END-PERFORM
091600     END-IF
091700
091800*    GET STARTING ENTRY IN VIRTUAL COMMA VECTOR
091900     MOVE ZERO TO LS-TEMP
092000     PERFORM VARYING WS-COMMA-IDX1 FROM +1 BY +1
092100          UNTIL WS-COMMA-IDX1 > 6
092200             OR LS-TEMP > 0
092300       IF NOT LS-DIGITS-LOD < WS-COMMA-LO-DIGIT (WS-COMMA-IDX1)
092400         SET LS-TEMP TO WS-COMMA-IDX1
092500       END-IF
092600     END-PERFORM
092700     SET WS-COMMA-IDX1 TO LS-TEMP
092800
092900     INITIALIZE AS5LAREQ-OPTIONS
093000     MOVE +1 TO AS5LAREQ-TEMPLATE-CNT
093100     INITIALIZE AS5LAREQ-RESULT-TEMPLATE (2)
093200     MOVE X'04' TO AS5LAREQ-RSLT-PATTYPE (2)
093300     MOVE +250 TO AS5LAREQ-RSLT-STR-SIZE (2)
093400
093500     IF LS-NEG-ON
093600       EVALUATE TRUE
093700         WHEN LS-OUTPUT-WRD
093800         WHEN LS-OUTPUT-CUR
093900           MOVE WS-NEGATIVE TO AS5LAREQ-SOURCE
094000           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
094100         WHEN LS-OUTPUT-CHK
094200           MOVE +4 TO LS-ENCLAVE-RC
094300           GO TO 1000-99-END
094400         WHEN OTHER
094500           CONTINUE
094600       END-EVALUATE
094700     END-IF
094800
094900     MOVE +1 TO LS-DATA-POS
095000     IF LS-DIGITS-LOD > ZERO
095100       MOVE LS-DIGITS-LOD TO LS-DIGITS-SLOD
095200       PERFORM 2000-00-CONVERT-LOD THRU 2000-99-END
095300     ELSE
095400       MOVE WS-ZERO TO AS5LAREQ-SOURCE
095500       PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
095600       IF LS-OUTPUT-CUR
095700         MOVE WS-DOLLARS TO AS5LAREQ-SOURCE
095800         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
095900       END-IF
096000     END-IF
096100
096200     IF AS5LAREQ-RSLT-TOKEN-SCALES (1) > ZERO
096300       EVALUATE TRUE
096400         WHEN LS-OUTPUT-WRD
096500         WHEN LS-OUTPUT-CUR
096600         WHEN LS-OUTPUT-CHK
096700           MOVE WS-AND TO AS5LAREQ-SOURCE
096800           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
096900         WHEN OTHER
097000           CONTINUE
097100       END-EVALUATE
097200*      GET STARTING ENTRY IN RIGHT OF DECIMAL VECTOR
097300       SET WS-DECIMAL-IDX1 TO AS5LAREQ-RSLT-TOKEN-SCALES (1)
097400*      GET STARTING ENTRY IN VIRTUAL COMMA VECTOR
097500       MOVE AS5LAREQ-RSLT-TOKEN-SCALES (1) TO LS-DIGITS-ROD
097600       PERFORM VARYING WS-COMMA-IDX1 FROM +1 BY +1
097700            UNTIL LS-NBRDIG-ROD >=
097800                 WS-COMMA-LO-DIGIT (WS-COMMA-IDX1)
097900       END-PERFORM
098000       COMPUTE LS-DATA-POS = AS5LAREQ-RSLT-TOKEN-DIGITS (1)
098100            - LS-NBRDIG-ROD + 1
098200       MOVE LS-NBRDIG-ROD TO LS-DIGITS-SROD
098300       EVALUATE TRUE
098400         WHEN LS-OUTPUT-WRD
098500         WHEN LS-OUTPUT-CUR
098600           PERFORM 2100-00-CONVERT-ROD THRU 2100-99-END
098700         WHEN LS-OUTPUT-CHK
098800           MOVE WS-NO TO AS5LAREQ-SOURCE
098900           IF AS5LAREQ-RSLT-TOKEN-SCALES (1) >= 2
099000             COMPUTE LS-DATA-POS = LS-DIGITS-LOD + 1
099100             MOVE AS5LAREQ-RSLT-TOKEN-NBR (1)
099200                  (LS-DATA-POS:2) TO LS-2BYTES-X
099300             IF LS-2BYTES-N > ZERO
099400               MOVE LS-2BYTES-N TO LS-2BYTES-9
099500               MOVE LS-2BYTES-9 TO AS5LAREQ-SRC-FLD
099600             END-IF
099700           END-IF
099800           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
099900           MOVE ZERO TO AS5LAREQ-COUNT
100000           MOVE WS-FRACTION TO AS5LAREQ-SOURCE
100100           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
100200           MOVE WS-DOLLARS TO AS5LAREQ-SOURCE
100300           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
100400         WHEN OTHER
100500           CONTINUE
100600       END-EVALUATE
100700     END-IF
100800
100900     IF AS5LAREQ-RSLT-STR-LEN (2) > AS5LART1-RSLT-STR-SIZE
101000       MOVE +8 TO LS-ENCLAVE-RC
101100       GO TO 1000-99-END
101200     END-IF.
101300
101400     MOVE AS5LAREQ-RSLT-STR-LEN (2)
101500          TO AS5LART1-RSLT-STR-LEN
101600     MOVE AS5LAREQ-RSLT-STR-FLD (2)
101700          (1:AS5LAREQ-RSLT-STR-LEN (2))
101800          TO AS5LART1-RSLT-STR-FLD
101900
102000     CONTINUE.
102100 1000-99-END.
102200     EXIT.
102300
102400     GO TO 9000-00-TERMINATE
102500     SKIP2
102600     CONTINUE.
102700 2000-00-CONVERT-LOD.
102800
102900     EVALUATE TRUE
103000       WHEN LS-DIGITS-SLOD = WS-COMMA-HI-DIGIT (WS-COMMA-IDX1)
103100*        THREE DIGITS IN THE GROUP
103200         MOVE ZERO TO LS-3BYTES-X
103300         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:3)
103400              TO LS-3BYTES-X
103500         MOVE LS-3BYTES-N TO LS-3BYTES-9
103600         EVALUATE TRUE
103700           WHEN LS-3BYTES-9 = ZERO
103800             ADD +3 TO LS-DATA-POS
103900             SUBTRACT +3 FROM LS-DIGITS-SLOD
104000             SET WS-COMMA-IDX1 UP BY +1
104100           WHEN OTHER
104200             IF LS-1BYTES-9 > ZERO
104300*              LEADING DIGIT > ZERO, SO DO LOOKUP
104400               SET WS-HUNDREDS-IDX1 TO LS-1BYTES-9
104500               MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
104600                    TO AS5LAREQ-SOURCE
104700               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
104800               MOVE WS-HUNDRED
104900                    TO AS5LAREQ-SOURCE
105000               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
105100             END-IF
105200             IF LS-2BYTES-9 > ZERO
105300               SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
105400               MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
105500                    TO AS5LAREQ-SOURCE
105600               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
105700             END-IF
105800             ADD +3 TO LS-DATA-POS
105900             SUBTRACT +3 FROM LS-DIGITS-SLOD
106000             MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
106100                  TO AS5LAREQ-SOURCE
106200             PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
106300             SET WS-COMMA-IDX1 UP BY +1
106400         END-EVALUATE
106500       WHEN LS-DIGITS-SLOD = WS-COMMA-LO-DIGIT (WS-COMMA-IDX1)
106600*        ONE DIGIT IN THE GROUP
106700         MOVE ZERO TO LS-3BYTES-X
106800         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1)
106900              TO LS-3BYTES-X (3:1)
107000         MOVE LS-3BYTES-N TO LS-3BYTES-9
107100         SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
107200         IF LS-2BYTES-9 > ZERO
107300           MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
107400                TO AS5LAREQ-SOURCE
107500           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
107600         END-IF
107700         ADD +1 TO LS-DATA-POS
107800         SUBTRACT +1 FROM LS-DIGITS-SLOD
107900         MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
108000              TO AS5LAREQ-SOURCE
108100         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
108200         SET WS-COMMA-IDX1 UP BY +1
108300       WHEN LS-DIGITS-SLOD < WS-COMMA-HI-DIGIT (WS-COMMA-IDX1)
108400*        TWO DIGITS IN THE GROUP
108500         MOVE ZERO TO LS-3BYTES-X
108600         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:2)
108700              TO LS-3BYTES-X (2:2)
108800         MOVE LS-3BYTES-N TO LS-3BYTES-9
108900         SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
109000         IF LS-2BYTES-9 > ZERO
109100           MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
109200                TO AS5LAREQ-SOURCE
109300           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
109400         END-IF
109500         ADD +2 TO LS-DATA-POS
109600         SUBTRACT +2 FROM LS-DIGITS-SLOD
109700         MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
109800              TO AS5LAREQ-SOURCE
109900         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
110000         SET WS-COMMA-IDX1 UP BY +1
110100     END-EVALUATE
110200
110300     IF WS-COMMA-IDX1 > 6
110400       EVALUATE TRUE
110500         WHEN LS-OUTPUT-CUR
110600           MOVE WS-DOLLARS TO AS5LAREQ-SOURCE
110700           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
110800         WHEN LS-OUTPUT-CHK
110900           IF AS5LAREQ-RSLT-TOKEN-SCALES (1) = ZERO
111000             MOVE WS-DOLLARS TO AS5LAREQ-SOURCE
111100             PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
111200           END-IF
111300         WHEN OTHER
111400           CONTINUE
111500       END-EVALUATE
111600       GO TO 2000-99-END
111700     END-IF
111800
111900     IF LS-DIGITS-SLOD > ZERO
112000       GO TO 2000-00-CONVERT-LOD
112100     END-IF
112200
112300     CONTINUE.
112400 2000-99-END.
112500     EXIT.
112600     SKIP2
112700     CONTINUE.
112800 2100-00-CONVERT-ROD.
112900
113000     EVALUATE TRUE
113100       WHEN LS-DIGITS-SROD = WS-COMMA-HI-DIGIT (WS-COMMA-IDX1)
113200*        THREE DIGITS IN THE GROUP
113300         MOVE ZERO TO LS-3BYTES-X
113400         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:3)
113500              TO LS-3BYTES-X
113600         MOVE LS-3BYTES-N TO LS-3BYTES-9
113700         EVALUATE TRUE
113800           WHEN LS-3BYTES-9 = ZERO
113900             ADD +3 TO LS-DATA-POS
114000             SUBTRACT +3 FROM LS-DIGITS-SROD
114100             SET WS-COMMA-IDX1 UP BY +1
114200           WHEN OTHER
114300             IF LS-1BYTES-9 > ZERO
114400*              LEADING DIGIT > ZERO, SO DO LOOKUP
114500               SET WS-HUNDREDS-IDX1 TO LS-1BYTES-9
114600               MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
114700                    TO AS5LAREQ-SOURCE
114800               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
114900               MOVE WS-HUNDRED TO AS5LAREQ-SOURCE
115000               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
115100             END-IF
115200             SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
115300             IF LS-2BYTES-9 > ZERO
115400               MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
115500                    TO AS5LAREQ-SOURCE
115600               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
115700             END-IF
115800             ADD +3 TO LS-DATA-POS
115900             SUBTRACT +3 FROM LS-DIGITS-SROD
116000             MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
116100                  TO AS5LAREQ-SOURCE
116200             PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
116300             SET WS-COMMA-IDX1 UP BY +1
116400         END-EVALUATE
116500       WHEN LS-DIGITS-SROD = WS-COMMA-LO-DIGIT (WS-COMMA-IDX1)
116600*        ONE DIGIT IN THE GROUP
116700         MOVE ZERO TO LS-3BYTES-X
116800         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1)
116900              TO LS-3BYTES-X (3:1)
117000         MOVE LS-3BYTES-N TO LS-3BYTES-9
117100         SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
117200         IF LS-2BYTES-9 > ZERO
117300           MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
117400                TO AS5LAREQ-SOURCE
117500           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
117600         END-IF
117700         ADD +1 TO LS-DATA-POS
117800         SUBTRACT +1 FROM LS-DIGITS-SROD
117900         MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
118000              TO AS5LAREQ-SOURCE
118100         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
118200         SET WS-COMMA-IDX1 UP BY +1
118300       WHEN LS-DIGITS-SROD < WS-COMMA-HI-DIGIT (WS-COMMA-IDX1)
118400*        TWO DIGITS IN THE GROUP
118500         MOVE ZERO TO LS-3BYTES-X
118600         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:2)
118700              TO LS-3BYTES-X (2:2)
118800         MOVE LS-3BYTES-N TO LS-3BYTES-9
118900         SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
119000         IF LS-2BYTES-9 > ZERO
119100           MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
119200                TO AS5LAREQ-SOURCE
119300           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
119400         END-IF
119500         ADD +2 TO LS-DATA-POS
119600         SUBTRACT +2 FROM LS-DIGITS-SROD
119700         MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
119800              TO AS5LAREQ-SOURCE
119900         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
120000         SET WS-COMMA-IDX1 UP BY +1
120100     END-EVALUATE
120200
120300     IF WS-COMMA-IDX1 > 6
120400       EVALUATE TRUE
120500         WHEN LS-OUTPUT-WRD
120600           MOVE WS-DECIMAL-ENTRY (WS-DECIMAL-IDX1)
120700                TO AS5LAREQ-SOURCE
120800           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
120900         WHEN LS-OUTPUT-CUR
121000           MOVE WS-CENTS TO AS5LAREQ-SOURCE
121100           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
121200         WHEN OTHER
121300           CONTINUE
121400       END-EVALUATE
121500       GO TO 2100-99-END
121600     END-IF
121700
121800     GO TO 2100-00-CONVERT-ROD
121900
122000     CONTINUE.
122100 2100-99-END.
122200     EXIT.
122300     SKIP2
122400     CONTINUE.
122500 7000-00-CALL-ASUDDEDT.
122600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
122700     MOVE "ASUDDEDT" TO LS-AS-MODULE
122800     CALL LS-AS-MODULE
122900          USING ASCA-COMMAREA
123000                AS5LAREQ-OPTIONS
123100                AS5LAREQ-SOURCE
123200                AS5LAREQ-TEMPLATE-CNT
123300                AS5LAREQ-RESULT-TEMPLATE (1)
123400                AS5CTOK-OCTOKEN
123500**              OMITTED
123600     END-CALL
123700
123800     SKIP1
123900     CONTINUE.
124000 7000-99-END.
124100     EXIT.
124200     SKIP1
124300     CONTINUE.
124400 7100-00-CALL-ASUDAPND.
124500     IF AS5LAREQ-SRC-LEN NOT > ZERO
124600       GO TO 7100-99-END
124700     END-IF
124800
124900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
125000     MOVE "ASUDAPND" TO LS-AS-MODULE
125100     CALL LS-AS-MODULE
125200          USING ASCA-COMMAREA
125300                AS5LAREQ-OPTIONS
125400                AS5LAREQ-SOURCE
125500                AS5LAREQ-TEMPLATE-CNT
125600                AS5LAREQ-RESULT-TEMPLATE (2)
125700                AS5CTOK-OCTOKEN
125800**              OMITTED
125900     END-CALL
126000
126100     MOVE +1 TO AS5LAREQ-COUNT
126200
126300     SKIP1
126400     CONTINUE.
126500 7100-99-END.
126600     EXIT.
126700     SKIP2
126800 9000-00-TERMINATE.
126900     MOVE AS5CTOK-OCTOKEN TO AS5FDBK-COND-AREA
127000
127100     IF AS5CTOK-SEVNBR > ZERO
127200       COMPUTE LS-ENCLAVE-RC = AS5CTOK-SEVNBR * 2
127300     END-IF
127400
127500*    LE SET RETURN CODE
127600     CALL 'CEE3SRC' USING LS-ENCLAVE-RC OMITTED
127700     GOBACK
127800     EXIT PROGRAM
127900     SKIP1
128000     CONTINUE.
128100 9000-99-END.
128200     EXIT.
./ ADD NAME=ASUIGZCT 0107-15061-18310-1408-00081-00001-00000-APLKS   48
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, PERSISTANT DATA
000400*    *
000500*    * COPYBOOK NAME: ASUIGZCT
000600*    *         TITLE: LE COBOL CONDITION TOKENS
000700*    *          DATE: 03/02/2015
000800*    *          DESC:
000900*    * ------------------------------------------------------- *
001000*    *
001100*    * 2015/03/02 REGENNED USING REXX EXEC CEEBLDTX
001200*    * 2016/08/09 REGENNED USING REXX EXEC CEEBLDTX
001300*    * 2018/05/11 REGENNED USING REXX EXEC CEEBLDTX
001400*    * 2018/11/06 REGENNED USING REXX EXEC CEEBLDTX
001500*    * ------------------------------------------------------- *
001600      88  ASU035_0001  VALUE X'0001006588C1E2E4'.
001700      88  ASU035_0002  VALUE X'0002006590C1E2E4'.
001800      88  ASU035_0003  VALUE X'0003006598C1E2E4'.
001900      88  ASU035_0004  VALUE X'00040065A0C1E2E4'.
002000      88  ASU036       VALUE X'0000006640C1E2E4'.
002100      88  ASU037_0001  VALUE X'0001006788C1E2E4'.
002200      88  ASU037_0002  VALUE X'0002006790C1E2E4'.
002300      88  ASU038       VALUE X'0000006840C1E2E4'.
002400      88  ASU039_0001  VALUE X'0001006988C1E2E4'.
002500      88  ASU039_0002  VALUE X'0002006990C1E2E4'.
002600      88  ASU039_0003  VALUE X'0003006998C1E2E4'.
002700      88  ASU039_0004  VALUE X'00040069A0C1E2E4'.
002800      88  ASU03A       VALUE X'0000006A40C1E2E4'.
002900      88  ASU03B_0001  VALUE X'0001006B88C1E2E4'.
003000      88  ASU03B_0002  VALUE X'0002006B90C1E2E4'.
003100      88  ASU03B_0003  VALUE X'0003006B98C1E2E4'.
003200      88  ASU03B_0004  VALUE X'0004006BA0C1E2E4'.
003300      88  ASU03C_0001  VALUE X'0001006C88C1E2E4'.
003400      88  ASU03C_0002  VALUE X'0002006C90C1E2E4'.
003500      88  ASU03C_0003  VALUE X'0003006C98C1E2E4'.
003600      88  ASU03C_0004  VALUE X'0004006CA0C1E2E4'.
003700      88  ASU03D_0001  VALUE X'0001006D88C1E2E4'.
003800      88  ASU03D_0002  VALUE X'0002006D90C1E2E4'.
003900      88  ASU03D_0003  VALUE X'0003006D98C1E2E4'.
004000      88  ASU03D_0004  VALUE X'0004006DA0C1E2E4'.
004100      88  ASU03E_0001  VALUE X'0001006E88C1E2E4'.
004200      88  ASU03E_0002  VALUE X'0002006E90C1E2E4'.
004300      88  ASU03E_0003  VALUE X'0003006E98C1E2E4'.
004400      88  ASU03E_0004  VALUE X'0004006EA0C1E2E4'.
004500      88  ASU03F_0001  VALUE X'0001006F88C1E2E4'.
004600      88  ASU03F_0002  VALUE X'0002006F90C1E2E4'.
004700      88  ASU03F_0003  VALUE X'0003006F98C1E2E4'.
004800      88  ASU03F_0004  VALUE X'0004006FA0C1E2E4'.
004900      88  ASU03G_0001  VALUE X'0001007088C1E2E4'.
005000      88  ASU03G_0002  VALUE X'0002007090C1E2E4'.
005100      88  ASU03G_0003  VALUE X'0003007098C1E2E4'.
005200      88  ASU03H_0001  VALUE X'0001007188C1E2E4'.
005300      88  ASU03H_0002  VALUE X'0002007190C1E2E4'.
005400      88  ASU03H_0003  VALUE X'0003007198C1E2E4'.
005500      88  ASU03H_0004  VALUE X'00040071A0C1E2E4'.
005600      88  ASU03I_0001  VALUE X'0001007288C1E2E4'.
005700      88  ASU03I_0002  VALUE X'0002007290C1E2E4'.
005800      88  ASU03I_0003  VALUE X'0003007298C1E2E4'.
005900      88  ASU03I_0004  VALUE X'00040072A0C1E2E4'.
006000      88  ASU03J_0001  VALUE X'0001007388C1E2E4'.
006100      88  ASU03J_0002  VALUE X'0002007390C1E2E4'.
006200      88  ASU03J_0003  VALUE X'0003007398C1E2E4'.
006300      88  ASU03J_0004  VALUE X'00040073A0C1E2E4'.
006400      88  ASU03K_0001  VALUE X'0001007488C1E2E4'.
006500      88  ASU03K_0002  VALUE X'0002007490C1E2E4'.
006600      88  ASU03K_0003  VALUE X'0003007498C1E2E4'.
006700      88  ASU03K_0004  VALUE X'00040074A0C1E2E4'.
006800      88  ASU03L_0001  VALUE X'0001007588C1E2E4'.
006900      88  ASU03L_0002  VALUE X'0002007590C1E2E4'.
007000      88  ASU03L_0003  VALUE X'0003007598C1E2E4'.
007100      88  ASU03L_0004  VALUE X'00040075A0C1E2E4'.
007200      88  ASU03M_0001  VALUE X'0001007688C1E2E4'.
007300      88  ASU03M_0002  VALUE X'0002007690C1E2E4'.
007400      88  ASU03M_0003  VALUE X'0003007698C1E2E4'.
007500      88  ASU03M_0004  VALUE X'00040076A0C1E2E4'.
007600      88  ASU03N       VALUE X'0000007740C1E2E4'.
007700      88  ASU03O       VALUE X'0000007840C1E2E4'.
007800      88  ASU03P_0001  VALUE X'0001007988C1E2E4'.
007900      88  ASU03P_0002  VALUE X'0002007990C1E2E4'.
008000      88  ASU03P_0003  VALUE X'0003007998C1E2E4'.
008100      88  ASU03P_0004  VALUE X'00040079A0C1E2E4'.
./ ADD NAME=ASUMDHEX 0136-17153-19329-1657-00663-00311-00000-APLKS   33
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. ASUMDHEX.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUMDHEX
000900*    APPL: Architecture Services Utility
001000*    DESC: Subroutine to dump storage to LE message file.
001100* PURPOSE: Subroutine to receive a request block, data and
001200*          length from caller.  Call subroutine ASUDHHEX to
001300*          convert the data to horizontal hex format.  Then
001400*          call LE subroutine CEEMOUT to direct output to
001500*          LE message file.
001600*
001700* Called Routine(s):
001800*    ASUDHHEX
001900*    CEEMOUT
002000*
002100* INPUT: CALL 'ASUMDHEX'
002200*             USING ASCA-COMMAREA
002300*                   AS5DMPRB-REQUEST-BLOCK
002400*                   XS-DATA
002500*
002600*--------------------------------------------------------------*
002700     SKIP2
002800*--------------------------------------------------------------*
002900*               ** HISTORY OF REVISIONS **                     *
003000* DESCRIPTION                                           CHNGID *
003100* ____________________________________________________  _______*
003200*                                                              *
003300* 2017/06/10 New                                               *
003400*                                                              *
003500*--------------------------------------------------------------*
003600     SKIP2
003700 DATA DIVISION.
003800     SKIP2
003900 WORKING-STORAGE SECTION.
004000     SKIP1
004100 01  FILLER.
004200     03  WS-EYE-CATCHER PIC X(25)
004300              VALUE "BUZZARD CREEK TECH, INC. ".
004400     03  WS-PGMID       PIC X(08) VALUE 'ASUMDHEX'.
004500     SKIP1
004600 01  WS-DUMP-HEX.
004700     03  WS-DH-LINE-1.
004800         05  FILLER          PIC X(10)  VALUE 'ASUMDHEX: '.
004900         05  FILLER          PIC X(07)  VALUE 'NUMBER('.
005000         05  WS-DHL1-NBR     PIC Z(5)9(1).
005100         05  FILLER          PIC X(03)  VALUE ')'.
005200         05  FILLER          PIC X(07)  VALUE 'LENGTH('.
005300         05  WS-DHL1-LEN     PIC Z(4)9(1).
005400         05  FILLER          PIC X(03)  VALUE ')'.
005500         05  WS-DHL1-ADDR    PIC X(08)  VALUE SPACE.
005600         05  FILLER          PIC X(02)  VALUE SPACE.
005700         05  WS-DHL1-TITLE   PIC X(44)  VALUE SPACE.
005800         05  FILLER          PIC X(25)  VALUE SPACE.
005900     03  WS-DH-LINE-2.
006000         05  FILLER          PIC X(20)  VALUE SPACE.
006100         05  FILLER          PIC X(09)  VALUE '0+++++++'.
006200         05  FILLER          PIC X(10)  VALUE '4+++++++'.
006300         05  FILLER          PIC X(09)  VALUE '8+++++++'.
006400         05  FILLER          PIC X(11)  VALUE 'C+++++++'.
006500         05  FILLER          PIC X(16)  VALUE '0+++4+++8+++C+++'.
006600     03  WS-DH-LINE-3.
006700         05  FILLER          PIC X(10)  VALUE SPACE.
006800         05  WS-DHL3-ADDR    PIC X(08)  VALUE SPACE.
006900         05  FILLER          PIC X(02)  VALUE SPACE.
007000         05  WS-DHL3-DATA1   PIC X(08)  VALUE SPACE.
007100         05  FILLER          PIC X(01)  VALUE SPACE.
007200         05  WS-DHL3-DATA2   PIC X(08)  VALUE SPACE.
007300         05  FILLER          PIC X(02)  VALUE SPACE.
007400         05  WS-DHL3-DATA3   PIC X(08)  VALUE SPACE.
007500         05  FILLER          PIC X(01)  VALUE SPACE.
007600         05  WS-DHL3-DATA4   PIC X(08)  VALUE SPACE.
007700         05  FILLER          PIC X(02)  VALUE SPACE.
007800         05  FILLER          PIC X(01)  VALUE '*'.
007900         05  WS-DHL3-DATA5   PIC X(16)  VALUE SPACE.
008000         05  FILLER          PIC X(01)  VALUE '*'.
008100     SKIP1
008200 01  WS-HEX-VALUES      PIC X(16) VALUE '0123456789ABCDEF'.
008300 01  WS-BIT-NBR         PIC  9(9) BINARY SYNC VALUE 31.
008400     SKIP2
008500 LOCAL-STORAGE SECTION.
008600     SKIP1
008700 01  LS-AS-MODULE       PIC X(08) VALUE SPACE.
008800 01  FILLER.
008900     03  LS-LE-MSG-DEST      PIC S9(9) BINARY SYNC.
009000         SKIP1
009100     03  LS-DATA-LEN         PIC S9(9) BINARY SYNC.
009200     03  LS-DATA-LEN-1       PIC S9(9) BINARY SYNC.
009300     03  LS-CPOS             PIC S9(9) BINARY SYNC.
009400     03  LS-XPOS             PIC S9(9) BINARY SYNC.
009500     03  LS-XLEN             PIC S9(9) BINARY SYNC.
009600     03  LS-BIT-SHIFT        PIC S9(9) BINARY SYNC.
009700         SKIP1
009800     03  LS-ORIGIN-NBR       PIC 9(9) BINARY SYNC.
009900     03  LS-LINE-NBR         PIC 9(9) BINARY SYNC.
010000     03  LS-LINE-OFFSET      PIC 9(9) BINARY SYNC.
010100     SKIP1
010200 01  LS-USER-VSTR.
010300     03  LS-USER-VLEN   PIC S9(4) BINARY SYNC.
010400     03  LS-USER-VTXT.
010500         05  LS-USER-FTXT    PIC X(80).
010600         05  FILLER          PIC X(40).
010700     SKIP1
010800 01  LS-CONVERT-TO-HEX.
010900     03  LS-C2H-PTR     POINTER.
011000     03  LS-C2H-NBR     REDEFINES LS-C2H-PTR
011100                        PIC 9(9) BINARY SYNC.
011200     03  LS-C2H-HEXADDR REDEFINES LS-C2H-PTR
011300                        PIC X(04).
011400     03  LS-C2H-HWD     PIC S9(4) BINARY SYNC.
011500     03  FILLER REDEFINES LS-C2H-HWD.
011600         05  FILLER     PIC X(01).
011700         05  LS-C2H-LAST-BYTE     PIC X(01).
011800     03  LS-C2H-I       PIC S9(9) BINARY SYNC.
011900     03  LS-C2H-J       PIC S9(9) BINARY SYNC.
012000     03  LS-C2H-JP1     PIC S9(9) BINARY SYNC.
012100     03  LS-C2H-Q       PIC S9(9) BINARY SYNC.
012200     03  LS-C2H-QP1     PIC S9(9) BINARY SYNC.
012300     03  LS-C2H-R       PIC S9(9) BINARY SYNC.
012400     03  LS-C2H-RP1     PIC S9(9) BINARY SYNC.
012500     03  LS-C2H-STRING  PIC X(08).
012600     SKIP1
012700     COPY AS5LAREQ.
012800     SKIP1
012900     COPY AS5FDBK.
013000     SKIP2
013100 LINKAGE SECTION.
013200     SKIP1
013300     COPY AS5CA.
013400     SKIP1
013500     COPY AS5DMPRB.
013600 01  XS-DATA            PIC X(32767).
013700     EJECT
013800 PROCEDURE DIVISION USING
013900     ASCA-COMMAREA
014000     AS5DMPRB-REQUEST-BLOCK
014100     XS-DATA.
014200     SKIP2
014300     CONTINUE.
014400 0100-00-INIT.
014500     MOVE +2         TO LS-LE-MSG-DEST
014600
014700     INITIALIZE AS5LAREQ-OPTIONS
014800     INITIALIZE AS5LAREQ-SOURCE
014900
015000     IF AS5DMPRB-NUMBER = ZERO
015100       MOVE +1 TO AS5DMPRB-NUMBER
015200     END-IF
015300     IF AS5DMPRB-TITLE <= SPACE
015400       MOVE 'DUMP STORAGE' TO AS5DMPRB-TITLE
015500     END-IF
015600
015700*    convert address to printable hex
015800     SET LS-C2H-PTR TO ADDRESS OF XS-DATA
015900     PERFORM 6000-00-CONVERT-2-HEX THRU 6000-99-END
016000     MOVE LS-C2H-STRING TO WS-DHL1-ADDR
016100     SKIP1
016200     CONTINUE.
016300 1000-00-MAINLINE.
016400*    print heading line 1
016500     MOVE AS5DMPRB-NUMBER   TO WS-DHL1-NBR
016600     MOVE AS5DMPRB-DATA-LEN TO WS-DHL1-LEN
016700     MOVE AS5DMPRB-TITLE    TO WS-DHL1-TITLE
016800     MOVE +120              TO LS-USER-VLEN
016900     MOVE WS-DH-LINE-1      TO LS-USER-VTXT
017000     PERFORM 8100-00-MESSAGE THRU 8100-99-END
017100
017200*    print blank line
017300     MOVE +1                TO LS-USER-VLEN
017400     MOVE SPACE             TO LS-USER-VTXT
017500     PERFORM 8100-00-MESSAGE THRU 8100-99-END
017600
017700*    print heading line 2 (scale line)
017800     MOVE +120              TO LS-USER-VLEN
017900     MOVE WS-DH-LINE-2      TO LS-USER-VTXT
018000     PERFORM 8100-00-MESSAGE THRU 8100-99-END
018100
018200     IF AS5DMPRB-DATA-LEN <= ZERO
018300       GO TO 1000-99-END
018400     END-IF
018500
018600*    initialize ASUDHHEX source field
018700     SET AS5LAREQ-SRC-PTR TO ADDRESS OF XS-DATA
018800     MOVE LS-C2H-NBR TO LS-ORIGIN-NBR
018900
019000*    clear high order bit of address
019100*    WS-BIT-NBR is 0:31 counting right to left
019200     CALL 'CEESICLR'
019300          USING LS-C2H-NBR
019400                WS-BIT-NBR
019500**              AS5FDBK-COND-AREA
019600                OMITTED
019700                LS-C2H-NBR
019800
019900*    align storage address on previous 16 byte boundry
020000*    shift right -4 bits shift left +4 bits
020100     MOVE -4 TO LS-BIT-SHIFT
020200     CALL 'CEESISHF'
020300          USING LS-C2H-NBR
020400                LS-BIT-SHIFT
020500**              AS5FDBK-COND-AREA
020600                OMITTED
020700                LS-C2H-NBR
020800     MOVE +4 TO LS-BIT-SHIFT
020900     CALL 'CEESISHF'
021000          USING LS-C2H-NBR
021100                LS-BIT-SHIFT
021200**              AS5FDBK-COND-AREA
021300                OMITTED
021400                LS-C2H-NBR
021500
021600     MOVE LS-C2H-NBR TO LS-LINE-NBR
021700     COMPUTE LS-LINE-OFFSET = LS-LINE-NBR - LS-ORIGIN-NBR
021800
021900*    convert address to printable hex
022000     PERFORM 6000-00-CONVERT-2-HEX THRU 6000-99-END
022100
022200*    make length (-) so that src fld is treated as addr
022300     COMPUTE AS5LAREQ-SRC-LEN = AS5DMPRB-DATA-LEN * -1
022400
022500     MOVE AS5DMPRB-DATA-LEN TO LS-DATA-LEN
022600     MOVE +2                TO AS5LAREQ-TEMPLATE-CNT
022700*    initialize ASUDHHEX result templates
022800     IF AS5DMPRB-DATA-LEN >= +128
022900       MOVE +128  TO AS5LAREQ-RSLT-STR-SIZE (1)
023000     ELSE
023100       MOVE AS5DMPRB-DATA-LEN TO AS5LAREQ-RSLT-STR-SIZE (1)
023200     END-IF
023300     COMPUTE AS5LAREQ-RSLT-STR-SIZE (2) =
023400          AS5LAREQ-RSLT-STR-SIZE (1) * 2
023500     MOVE SPACE TO AS5LAREQ-RSLT-STR-FLD (1)
023600     MOVE SPACE TO AS5LAREQ-RSLT-STR-FLD (2)
023700
023800     MOVE +1 TO AS5LAREQ-START
023900     PERFORM
024000          UNTIL LS-DATA-LEN <= ZERO
024100*      convert data area to horizontal hex 128-bytes at a time
024200       PERFORM 7000-00-CALL-ASUDHHEX THRU 7000-99-END
024300       MOVE AS5LAREQ-RSLT-STR-LEN (1) TO LS-DATA-LEN-1
024400       MOVE +1 TO LS-CPOS
024500                  LS-XPOS
024600       PERFORM
024700            UNTIL LS-DATA-LEN-1 <= ZERO
024800*        print data area 16-bytes at a time
024900         MOVE SPACE TO WS-DHL3-ADDR
025000                       WS-DHL3-DATA1
025100                       WS-DHL3-DATA2
025200                       WS-DHL3-DATA3
025300                       WS-DHL3-DATA4
025400                       WS-DHL3-DATA5
025500         MOVE LS-C2H-STRING TO WS-DHL3-ADDR
025600         EVALUATE TRUE
025700           WHEN LS-LINE-OFFSET > ZERO
025800*            print 1st partial detail line of dump
025900             PERFORM 5000-00-FORMAT-PARTIAL THRU 5000-99-END
026000             MOVE ZERO TO LS-LINE-OFFSET
026100             PERFORM 5100-00-PRINT-DETAIL THRU 5100-99-END
026200           WHEN LS-DATA-LEN-1 >= +16
026300*            print full detail line of dump
026400             MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:16)
026500                  TO WS-DHL3-DATA5
026600             ADD +16 TO LS-CPOS
026700             MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
026800                  TO WS-DHL3-DATA1
026900             ADD +8 TO LS-XPOS
027000             MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
027100                  TO WS-DHL3-DATA2
027200             ADD +8 TO LS-XPOS
027300             MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
027400                  TO WS-DHL3-DATA3
027500             ADD +8 TO LS-XPOS
027600             MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
027700                  TO WS-DHL3-DATA4
027800             ADD +8 TO LS-XPOS
027900             ADD +16 TO AS5LAREQ-START
028000             SUBTRACT +16 FROM LS-DATA-LEN
028100                               LS-DATA-LEN-1
028200             PERFORM 5100-00-PRINT-DETAIL THRU 5100-99-END
028300           WHEN LS-DATA-LEN < +16 AND LS-DATA-LEN-1 < +16
028400*            print last partial line of dump
028500             MOVE AS5LAREQ-RSLT-STR-FLD (1)
028600                  (LS-CPOS:LS-DATA-LEN-1)
028700                  TO WS-DHL3-DATA5
028800             ADD LS-DATA-LEN-1 TO LS-CPOS
028900             EVALUATE TRUE
029000               WHEN LS-DATA-LEN-1 > +12
029100                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
029200                      TO WS-DHL3-DATA1
029300                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
029400                      TO WS-DHL3-DATA2
029500                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
029600                      TO WS-DHL3-DATA3
029700                 ADD +24 TO LS-XPOS
029800                 SUBTRACT +12 FROM LS-DATA-LEN
029900                                   LS-DATA-LEN-1
030000                 COMPUTE LS-XLEN = LS-DATA-LEN-1 * 4
030100                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:LS-XLEN)
030200                      TO WS-DHL3-DATA4
030300                 ADD LS-DATA-LEN-1 TO LS-XPOS
030400                 SUBTRACT LS-DATA-LEN-1 FROM LS-DATA-LEN
030500                                             LS-DATA-LEN-1
030600               WHEN LS-DATA-LEN-1 > +8
030700                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
030800                      TO WS-DHL3-DATA1
030900                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
031000                      TO WS-DHL3-DATA2
031100                 ADD +16 TO LS-XPOS
031200                 SUBTRACT +8 FROM LS-DATA-LEN
031300                                  LS-DATA-LEN-1
031400                 COMPUTE LS-XLEN = LS-DATA-LEN-1 * 4
031500                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:LS-XLEN)
031600                      TO WS-DHL3-DATA3
031700                 ADD LS-DATA-LEN-1 TO LS-XPOS
031800                 SUBTRACT LS-DATA-LEN-1 FROM LS-DATA-LEN
031900                                             LS-DATA-LEN-1
032000               WHEN LS-DATA-LEN-1 > +4
032100                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
032200                      TO WS-DHL3-DATA1
032300                 ADD +8 TO LS-XPOS
032400                 SUBTRACT +4 FROM LS-DATA-LEN
032500                                  LS-DATA-LEN-1
032600                 COMPUTE LS-XLEN = LS-DATA-LEN-1 * 4
032700                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:LS-XLEN)
032800                      TO WS-DHL3-DATA2
032900                 ADD LS-DATA-LEN-1 TO LS-XPOS
033000                 SUBTRACT LS-DATA-LEN-1 FROM LS-DATA-LEN
033100                                             LS-DATA-LEN-1
033200               WHEN LS-DATA-LEN-1 > ZERO
033300                 COMPUTE LS-XLEN = LS-DATA-LEN-1 * 4
033400                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:LS-XLEN)
033500                      TO WS-DHL3-DATA1
033600                 ADD LS-DATA-LEN-1 TO LS-XPOS
033700                 SUBTRACT LS-DATA-LEN-1 FROM LS-DATA-LEN
033800                                             LS-DATA-LEN-1
033900             END-EVALUATE
034000             PERFORM 5100-00-PRINT-DETAIL THRU 5100-99-END
034100           WHEN LS-DATA-LEN > +16 AND LS-DATA-LEN-1 < +16
034200*            do not have enough data to complete a detail line
034300*            loop back and get another chunk of data
034400             MOVE ZERO TO LS-DATA-LEN-1
034500           WHEN OTHER
034600*            failsafe
034700             MOVE ZERO TO LS-DATA-LEN
034800                          LS-DATA-LEN-1
034900         END-EVALUATE
035000       END-PERFORM
035100         MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (1)
035200                      AS5LAREQ-RSLT-STR-LEN (2)
035300         IF LS-DATA-LEN < +128
035400           MOVE LS-DATA-LEN TO AS5LAREQ-RSLT-STR-SIZE (1)
035500           COMPUTE AS5LAREQ-RSLT-STR-SIZE (2) =
035600                LS-DATA-LEN * 2
035700         END-IF
035800     END-PERFORM
035900     SKIP1
036000     CONTINUE.
036100 1000-99-END.
036200     EXIT.
036300     SKIP1
036400     GO TO 9000-00-TERMINATE
036500     SKIP2
036600     CONTINUE.
036700 5000-00-FORMAT-PARTIAL.
036800     EVALUATE LS-LINE-OFFSET
036900       WHEN +1
037000         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:15)
037100              TO WS-DHL3-DATA5 (2:15)
037200         ADD +15 TO LS-CPOS
037300         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:6)
037400              TO WS-DHL3-DATA1 (3:6)
037500         ADD +6 TO LS-XPOS
037600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
037700              TO WS-DHL3-DATA2
037800         ADD +8 TO LS-XPOS
037900         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
038000              TO WS-DHL3-DATA3
038100         ADD +8 TO LS-XPOS
038200         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
038300              TO WS-DHL3-DATA4
038400         ADD +8 TO LS-XPOS
038500         ADD +15 TO AS5LAREQ-START
038600         SUBTRACT +15 FROM LS-DATA-LEN
038700                           LS-DATA-LEN-1
038800       WHEN +2
038900         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:14)
039000              TO WS-DHL3-DATA5 (3:14)
039100         ADD +14 TO LS-CPOS
039200         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:4)
039300              TO WS-DHL3-DATA1 (5:4)
039400         ADD +4 TO LS-XPOS
039500         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
039600              TO WS-DHL3-DATA2
039700         ADD +8 TO LS-XPOS
039800         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
039900              TO WS-DHL3-DATA3
040000         ADD +8 TO LS-XPOS
040100         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
040200              TO WS-DHL3-DATA4
040300         ADD +8 TO LS-XPOS
040400         ADD +14 TO AS5LAREQ-START
040500         SUBTRACT +14 FROM LS-DATA-LEN
040600                           LS-DATA-LEN-1
040700       WHEN +3
040800         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:13)
040900              TO WS-DHL3-DATA5 (4:13)
041000         ADD +13 TO LS-CPOS
041100         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:2)
041200              TO WS-DHL3-DATA1 (7:2)
041300         ADD +2 TO LS-XPOS
041400         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
041500              TO WS-DHL3-DATA2
041600         ADD +8 TO LS-XPOS
041700         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
041800              TO WS-DHL3-DATA3
041900         ADD +8 TO LS-XPOS
042000         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
042100              TO WS-DHL3-DATA4
042200         ADD +8 TO LS-XPOS
042300         ADD +13 TO AS5LAREQ-START
042400         SUBTRACT +13 FROM LS-DATA-LEN
042500                           LS-DATA-LEN-1
042600       WHEN +4
042700         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:12)
042800              TO WS-DHL3-DATA5 (5:12)
042900         ADD +12 TO LS-CPOS
043000         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
043100              TO WS-DHL3-DATA2
043200         ADD +8 TO LS-XPOS
043300         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
043400              TO WS-DHL3-DATA3
043500         ADD +8 TO LS-XPOS
043600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
043700              TO WS-DHL3-DATA4
043800         ADD +8 TO LS-XPOS
043900         ADD +12 TO AS5LAREQ-START
044000         SUBTRACT +12 FROM LS-DATA-LEN
044100                           LS-DATA-LEN-1
044200       WHEN +5
044300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:11)
044400              TO WS-DHL3-DATA5 (6:11)
044500         ADD +11 TO LS-CPOS
044600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:6)
044700              TO WS-DHL3-DATA2 (3:6)
044800         ADD +6 TO LS-XPOS
044900         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
045000              TO WS-DHL3-DATA3
045100         ADD +8 TO LS-XPOS
045200         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
045300              TO WS-DHL3-DATA4
045400         ADD +8 TO LS-XPOS
045500         ADD +11 TO AS5LAREQ-START
045600         SUBTRACT +11 FROM LS-DATA-LEN
045700                           LS-DATA-LEN-1
045800       WHEN +6
045900         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:10)
046000              TO WS-DHL3-DATA5 (7:10)
046100         ADD +10 TO LS-CPOS
046200         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:4)
046300              TO WS-DHL3-DATA2 (5:4)
046400         ADD +4 TO LS-XPOS
046500         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
046600              TO WS-DHL3-DATA3
046700         ADD +8 TO LS-XPOS
046800         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
046900              TO WS-DHL3-DATA4
047000         ADD +8 TO LS-XPOS
047100         ADD +10 TO AS5LAREQ-START
047200         SUBTRACT +10 FROM LS-DATA-LEN
047300                           LS-DATA-LEN-1
047400       WHEN +7
047500         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:9)
047600              TO WS-DHL3-DATA5 (8:9)
047700         ADD +9 TO LS-CPOS
047800         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:2)
047900              TO WS-DHL3-DATA2 (7:2)
048000         ADD +2 TO LS-XPOS
048100         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
048200              TO WS-DHL3-DATA3
048300         ADD +8 TO LS-XPOS
048400         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
048500              TO WS-DHL3-DATA4
048600         ADD +8 TO LS-XPOS
048700         ADD +9 TO AS5LAREQ-START
048800         SUBTRACT +9 FROM LS-DATA-LEN
048900                          LS-DATA-LEN-1
049000       WHEN +8
049100         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:8)
049200              TO WS-DHL3-DATA5 (9:8)
049300         ADD +8 TO LS-CPOS
049400         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
049500              TO WS-DHL3-DATA3
049600         ADD +8 TO LS-XPOS
049700         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
049800              TO WS-DHL3-DATA4
049900         ADD +8 TO LS-XPOS
050000         ADD +8 TO AS5LAREQ-START
050100         SUBTRACT +8 FROM LS-DATA-LEN
050200                          LS-DATA-LEN-1
050300       WHEN +9
050400         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:7)
050500              TO WS-DHL3-DATA5 (10:7)
050600         ADD +7 TO LS-CPOS
050700         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:6)
050800              TO WS-DHL3-DATA3 (3:6)
050900         ADD +6 TO LS-XPOS
051000         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
051100              TO WS-DHL3-DATA4
051200         ADD +8 TO LS-XPOS
051300         ADD +7 TO AS5LAREQ-START
051400         SUBTRACT +7 FROM LS-DATA-LEN
051500                          LS-DATA-LEN-1
051600       WHEN +10
051700         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:6)
051800              TO WS-DHL3-DATA5 (11:6)
051900         ADD +6 TO LS-CPOS
052000         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:4)
052100              TO WS-DHL3-DATA3 (5:4)
052200         ADD +4 TO LS-XPOS
052300         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
052400              TO WS-DHL3-DATA4
052500         ADD +8 TO LS-XPOS
052600         ADD +6 TO AS5LAREQ-START
052700         SUBTRACT +6 FROM LS-DATA-LEN
052800                          LS-DATA-LEN-1
052900       WHEN +11
053000         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:5)
053100              TO WS-DHL3-DATA5 (12:5)
053200         ADD +5 TO LS-CPOS
053300         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:2)
053400              TO WS-DHL3-DATA3 (7:2)
053500         ADD +2 TO LS-XPOS
053600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
053700              TO WS-DHL3-DATA4
053800         ADD +8 TO LS-XPOS
053900         ADD +5 TO AS5LAREQ-START
054000         SUBTRACT +5 FROM LS-DATA-LEN
054100                          LS-DATA-LEN-1
054200       WHEN +12
054300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:4)
054400              TO WS-DHL3-DATA5 (13:4)
054500         ADD +4 TO LS-CPOS
054600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
054700              TO WS-DHL3-DATA4
054800         ADD +8 TO LS-XPOS
054900         ADD +4 TO AS5LAREQ-START
055000         SUBTRACT +4 FROM LS-DATA-LEN
055100                          LS-DATA-LEN-1
055200       WHEN +13
055300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:3)
055400              TO WS-DHL3-DATA5 (14:3)
055500         ADD +3 TO LS-CPOS
055600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:6)
055700              TO WS-DHL3-DATA4 (3:6)
055800         ADD +6 TO LS-XPOS
055900         ADD +3 TO AS5LAREQ-START
056000         SUBTRACT +3 FROM LS-DATA-LEN
056100                          LS-DATA-LEN-1
056200       WHEN +14
056300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:2)
056400              TO WS-DHL3-DATA5 (15:2)
056500         ADD +2 TO LS-CPOS
056600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:4)
056700              TO WS-DHL3-DATA4 (5:4)
056800         ADD +4 TO LS-XPOS
056900         ADD +2 TO AS5LAREQ-START
057000         SUBTRACT +2 FROM LS-DATA-LEN
057100                          LS-DATA-LEN-1
057200       WHEN +15
057300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:1)
057400              TO WS-DHL3-DATA5 (16:1)
057500         ADD +1 TO LS-CPOS
057600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:2)
057700              TO WS-DHL3-DATA4 (7:2)
057800         ADD +2 TO LS-XPOS
057900         ADD +1 TO AS5LAREQ-START
058000         SUBTRACT +1 FROM LS-DATA-LEN
058100                          LS-DATA-LEN-1
058200     END-EVALUATE
058300     SKIP1
058400     CONTINUE.
058500 5000-99-END.
058600     SKIP2
058700     CONTINUE.
058800 5100-00-PRINT-DETAIL.
058900*    print horizontal hex detail line
059000     MOVE +120 TO LS-USER-VLEN
059100     MOVE WS-DH-LINE-3 TO LS-USER-VTXT
059200     PERFORM 8100-00-MESSAGE THRU 8100-99-END
059300*    recompute storage address
059400     ADD +16 TO LS-LINE-NBR
059500     MOVE LS-LINE-NBR TO LS-C2H-NBR
059600*    convert address to printable hex
059700     PERFORM 6000-00-CONVERT-2-HEX THRU 6000-99-END
059800     SKIP1
059900     CONTINUE.
060000 5100-99-END.
060100     SKIP2
060200     CONTINUE.
060300 6000-00-CONVERT-2-HEX.
060400     MOVE ZERO TO LS-C2H-HWD
060500     PERFORM
060600          VARYING LS-C2H-I FROM 1 BY 1 UNTIL LS-C2H-I > 4
060700       COMPUTE LS-C2H-J = 2 * LS-C2H-I - 1
060800       MOVE LS-C2H-HEXADDR (LS-C2H-I:1) TO LS-C2H-LAST-BYTE
060900       DIVIDE LS-C2H-HWD BY 16
061000            GIVING LS-C2H-Q
061100            REMAINDER LS-C2H-R
061200       COMPUTE LS-C2H-JP1 = LS-C2H-J + 1
061300       COMPUTE LS-C2H-QP1 = LS-C2H-Q + 1
061400       COMPUTE LS-C2H-RP1 = LS-C2H-R + 1
061500       MOVE WS-HEX-VALUES (LS-C2H-QP1:1)
061600            TO LS-C2H-STRING (LS-C2H-J:1)
061700       MOVE WS-HEX-VALUES (LS-C2H-RP1:1)
061800            TO LS-C2H-STRING (LS-C2H-JP1:1)
061900     END-PERFORM
062000     SKIP1
062100     CONTINUE.
062200 6000-99-END.
062300     EXIT.
062400     SKIP2
062500     CONTINUE.
062600 7000-00-CALL-ASUDHHEX.
062700     MOVE 'ASUDHHEX' TO LS-AS-MODULE
062800     CALL LS-AS-MODULE
062900          USING ASCA-COMMAREA
063000                AS5LAREQ-OPTIONS
063100                AS5LAREQ-SOURCE
063200                AS5LAREQ-TEMPLATE-CNT
063300                AS5LAREQ-RESULT-TEMPLATE (1)
063400                AS5LAREQ-RESULT-TEMPLATE (2)
063500**              AS5FDBK-COND-AREA
063600                OMITTED
063700     END-CALL
063800     SKIP1
063900     CONTINUE.
064000 7000-99-END.
064100     EXIT.
064200     SKIP2
064300     CONTINUE.
064400 8100-00-MESSAGE.
064500     CALL 'CEEMOUT'
064600          USING LS-USER-VSTR
064700                LS-LE-MSG-DEST
064800**              AS5FDBK-COND-AREA
064900                OMITTED
065000     END-CALL
065100
065200     INITIALIZE LS-USER-VSTR
065300     SKIP1
065400     CONTINUE.
065500 8100-99-END.
065600     EXIT.
065700     SKIP2
065800 9000-00-TERMINATE.
065900     GOBACK
066000     SKIP1
066100     CONTINUE.
066200 9000-99-END.
066300     EXIT.
./ ADD NAME=ASUMETXT 0113-17264-18295-1426-00102-01120-00000-APLKS   18
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASUMETXT.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600* ------------------------------------------------------------ *
000700* ARCHITECTURE SERVICES FACILITY
000800* DISPATCH ERROR MESSAGE(S)
000900* COBOL ROUTINE
001000*
001100* PROGRAM ID: ASUMETXT
001200*      TITLE: DISPATCH ERROR MESSAGE(S)
001300*       DATE: 2017/09/21
001400*
001500*       DESC: CALL LE MODULE CEECMI TO INSERT VARIABLE TEXT
001600*             INTO MESSAGES.  CALL LE MODULE CEEMSG TO DISPATCH
001700*             THOSE MESSAGE(S).
001800*
001900* ------------------------------------------------------------ *
002000* MAINTENANCE HISTORY:
002100* YYYY/MM/DD
002200*
002300* ------------------------------------------------------------ *
002400     SKIP2
002500 DATA DIVISION.
002600     SKIP2
002700 WORKING-STORAGE SECTION.
002800 01  FILLER.
002900     03  WS-EYE-CATCHER PIC X(25)
003000              VALUE "BUZZARD CREEK TECH, INC. ".
003100     03  WS-PGMID       PIC X(08) VALUE "ASUMETXT".
003200     SKIP2
003300 LOCAL-STORAGE SECTION.
003400 01  FILLER.
003500     03  LS-LEMSGDEST   PIC S9(9) BINARY SYNC.
003600     03  LS-LEISISEQ    PIC S9(9) BINARY SYNC.
003700     SKIP2
003800 LINKAGE SECTION.
003900     COPY AS5CA.
004000     SKIP1
004100     COPY AS5MSGRB.
004200     SKIP1
004300     COPY AS5FDBK.
004400     EJECT
004500 PROCEDURE DIVISION USING
004600     ASCA-COMMAREA
004700     AS5MSGRB-REQUEST-BLOCK
004800     AS5FDBK-COND-AREA.
004900     SKIP2
005000     CONTINUE.
005100 0000-00-INITIAL.
005200     MOVE +2 TO LS-LEMSGDEST
005300     MOVE ZERO TO LS-LEISISEQ
005400     SKIP2
005500     CONTINUE.
005600 0100-00-MAINLINE.
005700     PERFORM
005800          VARYING AS5MSGRB-CTOK-NDX FROM +1 BY +1
005900          UNTIL AS5MSGRB-CTOK-NDX > 3
006000          OR AS5MSGRB-COND (AS5MSGRB-CTOK-NDX) = LOW-VALUE
006100       MOVE ZERO TO AS5MSGRB-ISI (AS5MSGRB-CTOK-NDX)
006200       PERFORM
006300            VARYING AS5MSGRB-ISI-NDX FROM +1 BY +1
006400            UNTIL AS5MSGRB-ISI-NDX > 8
006500*        INSERT MESSAGE VARIABLE DATA
006600         IF AS5MSGRB-ISI-VLEN
006700              (AS5MSGRB-CTOK-NDX AS5MSGRB-ISI-NDX)
006800              > ZERO
006900           SET LS-LEISISEQ TO AS5MSGRB-ISI-NDX
007000           CALL 'CEECMI'
007100                USING AS5MSGRB-CTOKEN (AS5MSGRB-CTOK-NDX)
007200                      LS-LEISISEQ
007300                      AS5MSGRB-ISI-VSTR (AS5MSGRB-CTOK-NDX
007400                           AS5MSGRB-ISI-NDX)
007500**                    AS5FDBK-COND-AREA
007600                      OMITTED
007700         END-IF
007800       END-PERFORM
007900*      DISPATCH MESSAGE
008000       CALL 'CEEMSG'
008100            USING AS5MSGRB-CTOKEN (AS5MSGRB-CTOK-NDX)
008200                  LS-LEMSGDEST
008300**                AS5FDBK-COND-AREA
008400                  OMITTED
008500       IF AS5MSGRB-SEVNBR (AS5MSGRB-CTOK-NDX) > 1
008600         MOVE AS5MSGRB-CTOKEN (AS5MSGRB-CTOK-NDX)
008700              TO ASCA-CUR-CTOKN
008800         IF ASCA-CUR-CTOKN (1:2) >= ASCA-MAX-CTOKN (1:2)
008900*          CURRENT SEVERITY >= MAX SEVERITY
009000           MOVE ASCA-CUR-CTOKN TO ASCA-MAX-CTOKN
009100         END-IF
009200       END-IF
009300     END-PERFORM
009400     MOVE LOW-VALUE TO AS5MSGRB-REQUEST-BLOCK
009500     SKIP2
009600     CONTINUE.
009700 9000-00-RETURN.
009800*    * ------------------------------------------------------- *
009900*    * RETURN TO CALLER
010000*    * ------------------------------------------------------- *
010100     EXIT PROGRAM.
010200     GOBACK.
./ ADD NAME=ASUMVHEX 0146-16012-18295-1428-00305-00298-00000-APLKS   39
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. ASUMVHEX.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUMVHEX
000900*    APPL: Architecture Services Utility
001000*    DESC: Subroutine to dump storage to LE message file.
001100* PURPOSE: Subroutine to receive a request block, data and
001200*          length from caller.  Call subroutine ASUDVHEX to
001300*          convert the data to vertical hex format.  Then
001400*          call LE subroutine CEEMOUT to direct output to
001500*          LE message file.
001600*
001700* Called Routine(s):
001800*    ASUDVHEX
001900*    CEEMOUT
002000*
002100* INPUT: CALL 'ASUMVHEX'
002200*             USING ASCA-COMMAREA
002300*                   AS5DMPRB-REQUEST-BLOCK
002400*                   XS-DATA
002500*
002600*--------------------------------------------------------------*
002700     SKIP2
002800*--------------------------------------------------------------*
002900*               ** HISTORY OF REVISIONS **                     *
003000* DESCRIPTION                                           CHNGID *
003100* ____________________________________________________  _______*
003200*                                                              *
003300* 2016/08/25 New                                               *
003400*                                                              *
003500*--------------------------------------------------------------*
003600     SKIP2
003700 DATA DIVISION.
003800     SKIP2
003900 WORKING-STORAGE SECTION.
004000     SKIP1
004100 01  FILLER.
004200     03  WS-EYE-CATCHER PIC X(25)
004300              VALUE "BUZZARD CREEK TECH, INC.".
004400     03  WS-PGMID       PIC X(08) VALUE 'ASUMVHEX'.
004500     SKIP1
004600 01  WS-VERT-HEX.
004700     03  WS-VH-LINE-1.
004800         05  FILLER          PIC X(10)  VALUE 'ASUMVHEX: '.
004900         05  FILLER          PIC X(07)  VALUE 'NUMBER('.
005000         05  WS-VHL1-NBR     PIC Z(5)9(1).
005100         05  FILLER          PIC X(03)  VALUE ')'.
005200         05  FILLER          PIC X(07)  VALUE 'LENGTH('.
005300         05  WS-VHL1-LEN     PIC Z(4)9(1).
005400         05  FILLER          PIC X(03)  VALUE ')'.
005500         05  WS-VHL1-ADDR    PIC X(08)  VALUE SPACE.
005600         05  FILLER          PIC X(02)  VALUE SPACE.
005700         05  WS-VHL1-TITLE   PIC X(44)  VALUE SPACE.
005800         05  FILLER          PIC X(25)  VALUE SPACE.
005900     03  WS-VH-LINE-2.
006000         05  FILLER          PIC X(10)  VALUE SPACE.
006100         05  FILLER          PIC X(05)  VALUE 'CHAR'.
006200         05  WS-VHL2-DATA    PIC X(100) VALUE SPACE.
006300         05  FILLER          PIC X(05)  VALUE SPACE.
006400     03  WS-VH-LINE-3.
006500         05  FILLER          PIC X(10)  VALUE SPACE.
006600         05  FILLER          PIC X(05)  VALUE 'ZONE'.
006700         05  WS-VHL3-DATA    PIC X(100) VALUE SPACE.
006800         05  FILLER          PIC X(05)  VALUE SPACE.
006900     03  WS-VH-LINE-4.
007000         05  FILLER          PIC X(10)  VALUE SPACE.
007100         05  FILLER          PIC X(05)  VALUE 'NUMR'.
007200         05  WS-VHL4-DATA    PIC X(100) VALUE SPACE.
007300         05  FILLER          PIC X(05)  VALUE SPACE.
007400     03  WS-VH-LINE-5.
007500         05  FILLER          PIC X(11)  VALUE SPACE.
007600         05  WS-VHL5-POS     PIC Z(3)9(2).
007700         05  FILLER     PIC X(19) VALUE  '---+----1----+----2'.
007800         05  FILLER     PIC X(20) VALUE '----+----3----+----4'.
007900         05  FILLER     PIC X(20) VALUE '----+----5----+----6'.
008000         05  FILLER     PIC X(20) VALUE '----+----7----+----8'.
008100         05  FILLER     PIC X(20) VALUE '----+----9----+----0'.
008200         05  FILLER     PIC X(05) VALUE SPACE.
008300     SKIP1
008400 01  WS-HEX-VALUES      PIC X(16) VALUE '0123456789ABCDEF'.
008500     SKIP2
008600 LOCAL-STORAGE SECTION.
008700     SKIP1
008800 01  LS-AS-MODULE       PIC X(08) VALUE SPACE.
008900 01  FILLER.
009000     03  LS-LE-MSG-DEST      PIC S9(9) BINARY SYNC.
009100     SKIP1
009200     03  LS-DATA-LEN         PIC S9(9) BINARY SYNC.
009300     03  LS-DATA-POS         PIC S9(5) COMP-3.
009400     SKIP1
009500 01  LS-USER-VSTR.
009600     03  LS-USER-VLEN   PIC S9(4) BINARY SYNC.
009700     03  LS-USER-VTXT.
009800         05  LS-USER-FTXT    PIC X(80).
009900         05  FILLER          PIC X(40).
010000     SKIP1
010100 01  LS-CONVERT-TO-HEX.
010200     03  LS-C2H-PTR     POINTER.
010300     03  LS-C2H-NBR     REDEFINES LS-C2H-PTR
010400                        PIC 9(9) BINARY SYNC.
010500     03  LS-C2H-HEXADDR REDEFINES LS-C2H-PTR
010600                        PIC X(04).
010700     03  LS-C2H-HWD     PIC S9(4) BINARY SYNC.
010800     03  FILLER REDEFINES LS-C2H-HWD.
010900         05  FILLER     PIC X(01).
011000         05  LS-C2H-LAST-BYTE     PIC X(01).
011100     03  LS-C2H-I       PIC S9(9) BINARY SYNC.
011200     03  LS-C2H-J       PIC S9(9) BINARY SYNC.
011300     03  LS-C2H-JP1     PIC S9(9) BINARY SYNC.
011400     03  LS-C2H-Q       PIC S9(9) BINARY SYNC.
011500     03  LS-C2H-QP1     PIC S9(9) BINARY SYNC.
011600     03  LS-C2H-R       PIC S9(9) BINARY SYNC.
011700     03  LS-C2H-RP1     PIC S9(9) BINARY SYNC.
011800     03  LS-C2H-STRING  PIC X(08).
011900     SKIP1
012000     COPY AS5LAREQ.
012100     SKIP1
012200     COPY AS5FDBK.
012300     SKIP2
012400 LINKAGE SECTION.
012500     SKIP1
012600     COPY AS5CA.
012700     SKIP1
012800     COPY AS5DMPRB.
012900 01  XS-DATA            PIC X(32767).
013000     EJECT
013100 PROCEDURE DIVISION USING
013200     ASCA-COMMAREA
013300     AS5DMPRB-REQUEST-BLOCK
013400     XS-DATA.
013500     SKIP2
013600     CONTINUE.
013700 0100-00-INIT.
013800     MOVE 'ASUDVHEX' TO LS-AS-MODULE
013900     MOVE +1         TO LS-DATA-POS
014000     MOVE +2         TO LS-LE-MSG-DEST
014100
014200     INITIALIZE AS5LAREQ-OPTIONS
014300     INITIALIZE AS5LAREQ-SOURCE
014400
014500     IF AS5DMPRB-NUMBER = ZERO
014600       MOVE +1 TO AS5DMPRB-NUMBER
014700     END-IF
014800     IF AS5DMPRB-TITLE <= SPACE
014900       MOVE 'DUMP STORAGE' TO AS5DMPRB-TITLE
015000     END-IF
015100
015200*    convert address to printable hex
015300     SET LS-C2H-PTR TO ADDRESS OF XS-DATA
015400     MOVE ZERO TO LS-C2H-HWD
015500     PERFORM
015600          VARYING LS-C2H-I FROM 1 BY 1 UNTIL LS-C2H-I > 4
015700       COMPUTE LS-C2H-J = 2 * LS-C2H-I - 1
015800       MOVE LS-C2H-HEXADDR (LS-C2H-I:1) TO LS-C2H-LAST-BYTE
015900       DIVIDE LS-C2H-HWD BY 16
016000            GIVING LS-C2H-Q
016100            REMAINDER LS-C2H-R
016200       COMPUTE LS-C2H-JP1 = LS-C2H-J + 1
016300       COMPUTE LS-C2H-QP1 = LS-C2H-Q + 1
016400       COMPUTE LS-C2H-RP1 = LS-C2H-R + 1
016500       MOVE WS-HEX-VALUES (LS-C2H-QP1:1)
016600            TO LS-C2H-STRING (LS-C2H-J:1)
016700       MOVE WS-HEX-VALUES (LS-C2H-RP1:1)
016800            TO LS-C2H-STRING (LS-C2H-JP1:1)
016900     END-PERFORM
017000     SKIP2
017100     CONTINUE.
017200 1000-00-MAINLINE.
017300*    print heading line
017400     MOVE AS5DMPRB-NUMBER   TO WS-VHL1-NBR
017500     MOVE AS5DMPRB-DATA-LEN TO WS-VHL1-LEN
017600     MOVE AS5DMPRB-TITLE    TO WS-VHL1-TITLE
017700     MOVE LS-C2H-STRING     TO WS-VHL1-ADDR
017800     MOVE +120              TO LS-USER-VLEN
017900     MOVE WS-VH-LINE-1      TO LS-USER-VTXT
018000     PERFORM 8100-00-MESSAGE THRU 8100-99-END
018100
018200*    print blank line
018300     MOVE +1                TO LS-USER-VLEN
018400     MOVE SPACE             TO LS-USER-VTXT
018500     PERFORM 8100-00-MESSAGE THRU 8100-99-END
018600
018700     IF AS5DMPRB-DATA-LEN <= ZERO
018800       GO TO 1000-99-END
018900     END-IF
019000
019100*    initialize ASUDVHEX source field
019200     SET AS5LAREQ-SRC-PTR   TO ADDRESS OF XS-DATA
019300
019400*    make length (-) so that src fld is treated as addr
019500     COMPUTE AS5LAREQ-SRC-LEN = AS5DMPRB-DATA-LEN * -1
019600
019700     MOVE LS-DATA-POS TO WS-VHL5-POS
019800     MOVE AS5DMPRB-DATA-LEN TO LS-DATA-LEN
019900     MOVE +3                TO AS5LAREQ-TEMPLATE-CNT
020000*    initialize ASUDVHEX result templates
020100     MOVE +100  TO AS5LAREQ-RSLT-STR-SIZE (1)
020200                   AS5LAREQ-RSLT-STR-SIZE (2)
020300                   AS5LAREQ-RSLT-STR-SIZE (3)
020400     MOVE SPACE TO AS5LAREQ-RSLT-STR-FLD (1)
020500                   AS5LAREQ-RSLT-STR-FLD (2)
020600                   AS5LAREQ-RSLT-STR-FLD (3)
020700
020800     MOVE +1 TO AS5LAREQ-START
020900     PERFORM
021000          UNTIL LS-DATA-LEN <= ZERO
021100*      convert data area to vertical hex 100-bytes at a time
021200       PERFORM 7000-00-CALL-ASUDVHEX THRU 7000-99-END
021300       ADD +100 TO AS5LAREQ-START
021400       MOVE SPACE TO WS-VHL2-DATA
021500                     WS-VHL3-DATA
021600                     WS-VHL4-DATA
021700*      print vertical hex char line
021800       MOVE AS5LAREQ-RSLT-STR-FLD (1)
021900            TO WS-VHL2-DATA
022000       MOVE +120 TO LS-USER-VLEN
022100       IF LS-DATA-LEN < 100
022200         COMPUTE LS-USER-VLEN = LS-DATA-LEN + 15
022300       END-IF
022400       MOVE WS-VH-LINE-2 TO LS-USER-VTXT
022500       PERFORM 8100-00-MESSAGE THRU 8100-99-END
022600       MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (1)
022700*      print vertical hex zone line
022800       MOVE AS5LAREQ-RSLT-STR-FLD (2)
022900            TO WS-VHL3-DATA
023000       MOVE +120         TO LS-USER-VLEN
023100       IF LS-DATA-LEN < 100
023200         COMPUTE LS-USER-VLEN = LS-DATA-LEN + 15
023300       END-IF
023400       MOVE WS-VH-LINE-3 TO LS-USER-VTXT
023500       PERFORM 8100-00-MESSAGE THRU 8100-99-END
023600       MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (2)
023700*      print vertical hex numbr line
023800       MOVE AS5LAREQ-RSLT-STR-FLD (3)
023900            TO WS-VHL4-DATA
024000       MOVE +120         TO LS-USER-VLEN
024100       IF LS-DATA-LEN < 100
024200         COMPUTE LS-USER-VLEN = LS-DATA-LEN + 15
024300       END-IF
024400       MOVE WS-VH-LINE-4 TO LS-USER-VTXT
024500       PERFORM 8100-00-MESSAGE THRU 8100-99-END
024600       MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (3)
024700*      print vertical hex scale line
024800       MOVE +120         TO LS-USER-VLEN
024900       IF LS-DATA-LEN < 100
025000         COMPUTE LS-USER-VLEN = LS-DATA-LEN + 15
025100       END-IF
025200       MOVE WS-VH-LINE-5 TO LS-USER-VTXT
025300       PERFORM 8100-00-MESSAGE THRU 8100-99-END
025400       MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (4)
025500*      do the bump
025600       ADD +100          TO LS-DATA-POS
025700       MOVE LS-DATA-POS  TO WS-VHL5-POS
025800       SUBTRACT +100 FROM LS-DATA-LEN
025900     END-PERFORM
026000     SKIP1
026100     CONTINUE.
026200 1000-99-END.
026300     EXIT.
026400
026500     GO TO 9000-00-TERMINATE
026600     SKIP2
026700     CONTINUE.
026800 7000-00-CALL-ASUDVHEX.
026900     CALL LS-AS-MODULE
027000          USING ASCA-COMMAREA
027100                AS5LAREQ-OPTIONS
027200                AS5LAREQ-SOURCE
027300                AS5LAREQ-TEMPLATE-CNT
027400                AS5LAREQ-RESULT-TEMPLATE (1)
027500                AS5LAREQ-RESULT-TEMPLATE (2)
027600                AS5LAREQ-RESULT-TEMPLATE (3)
027700**              AS5FDBK-COND-AREA
027800                OMITTED
027900     END-CALL
028000     SKIP1
028100     CONTINUE.
028200 7000-99-END.
028300     EXIT.
028400     SKIP2
028500     CONTINUE.
028600 8100-00-MESSAGE.
028700     CALL 'CEEMOUT'
028800          USING LS-USER-VSTR
028900                LS-LE-MSG-DEST
029000**              AS5FDBK-COND-AREA
029100                OMITTED
029200     END-CALL
029300
029400     INITIALIZE LS-USER-VSTR
029500     SKIP1
029600     CONTINUE.
029700 8100-99-END.
029800     EXIT.
029900     SKIP2
030000 9000-00-TERMINATE.
030100     GOBACK
030200     SKIP1
030300     CONTINUE.
030400 9000-99-END.
030500     EXIT.
./ ADD NAME=ASUP2DSB 0104-18186-18295-1431-00271-00269-00000-APLKS   01
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASUP2DSB.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUP2DSB
000900*    APPL: Architecture Services Utility
001000*    DESC: Copy PARM statement to DD SYSUT2
001100* PURPOSE: Create control cards with resolved symbolic variables
001200*
001300* Called Routine(s):
001400*    CEEMOUT
001500*    CEE3ABD
001600*    CEE3PR2
001700*
001800* INPUT: PARM=(stmts)
001900*        Format: 'crdsep','card1...crdsep','card2...crdsep'
002000*
002100*--------------------------------------------------------------*
002200     SKIP2
002300*--------------------------------------------------------------*
002400*               ** HISTORY OF REVISIONS **                     *
002500* DESCRIPTION                                           CHNGID *
002600* ____________________________________________________  _______*
002700*                                                              *
002800* 2016/01/15 New                                               *
002900* 2017/03/20 LKS increase max output card count to 20          *
003000*                                                              *
003100*--------------------------------------------------------------*
003200     SKIP2
003300 INPUT-OUTPUT SECTION.
003400 FILE-CONTROL.
003500     SELECT CARD-FILE ASSIGN TO SYSUT2.
003600     SKIP2
003700 DATA DIVISION.
003800 FILE SECTION.
003900 FD  CARD-FILE
004000     BLOCK  CONTAINS 0 RECORDS
004100     RECORD CONTAINS 80 CHARACTERS.
004200 01  CARD-RECORD        PIC X(80).
004300     SKIP2
004400 WORKING-STORAGE SECTION.
004500 01  FILLER.
004600     03  WS-EYE-CATCHER PIC X(25)
004700              VALUE "BUZZARD CREEK TECH, INC. ".
004800     03  WS-PGMID       PIC X(08) VALUE "ASUP2DSB".
004900     SKIP1
005000 01  WS-LE-MSG-DEST     PIC S9(9) BINARY SYNC.
005100 01  WS-LE-ABEND        PIC S9(9) BINARY SYNC.
005200 01  WS-LE-CLEANUP      PIC S9(9) BINARY SYNC.
005300     SKIP1
005400 01  WS-MISC-STORAGE.
005500     03  WS-PARM-LENGTH      PIC S9(9) BINARY.
005600     03  WS-PARM-STMT.
005700         05  WS-PARM-LEN     PIC  9(4) BINARY.
005800         05  WS-PARM-TEXT    PIC X(256).
005900     03  WS-PARM-POS         PIC  9(4) BINARY.
006000     03  WS-STR-LEN          PIC  9(4) BINARY.
006100     03  WS-CARD-COUNT       PIC  9(4) BINARY.
006200     03  WS-CARD-SEP         PIC X(01).
006300     03  WS-CARD-OUT         PIC X(256)
006400         OCCURS 20
006500         INDEXED BY WS-CARD-IDX.
006600     SKIP1
006700 01  WS-USER-MSG-VSTRING.
006800     03  WS-USER-MSG-LEN     PIC S9(4) BINARY.
006900     03  WS-USER-MSG-TEXT    PIC X(120).
007000     SKIP1
007100 01  WS-LE-FDBK.
007200     02  WS-LE-COND-TOKEN-VALUE.
007300     COPY CEEIGZCT.
007400         03  WS-COND-ID.
007500             05  WS-LE-COND-SEV   PIC S9(4) BINARY.
007600             05  WS-LE-COND-MSGNO PIC S9(4) BINARY.
007700         03  WS-COND-SEV-CTL      PIC X.
007800         03  WS-COND-FACID        PIC X(03).
007900     02  WS-LE-I-S-INFO           PIC S9(9) BINARY.
008000     EJECT
008100 PROCEDURE DIVISION.
008200     SKIP2
008300     CONTINUE.
008400 0100-00-MAINLINE.
008500     MOVE +2 TO WS-LE-MSG-DEST
008600     INITIALIZE WS-MISC-STORAGE
008700                WS-USER-MSG-VSTRING
008800                WS-LE-FDBK
008900
009000*    CALL CEE3PR2 - Query PARM string long
009100     MOVE +258      TO WS-PARM-LENGTH
009200     CALL 'CEE3PR2'
009300          USING WS-PARM-LENGTH
009400                WS-PARM-STMT
009500**              WS-LE-FDBK
009600                OMITTED
009700     END-CALL
009800
009900     IF WS-PARM-LENGTH = ZERO
010000       STRING WS-PGMID DELIMITED SIZE
010100            " - PARM STATEMENT NOT SPECIFIED ON EXEC"
010200            DELIMITED SIZE
010300            INTO WS-USER-MSG-TEXT
010400       END-STRING
010500       PERFORM 8100-00-MESSAGE
010600            THRU 8100-99-END
010700       MOVE +101 TO WS-LE-ABEND
010800       PERFORM 8200-00-ABEND
010900            THRU 8200-99-END
011000     END-IF
011100
011200     STRING WS-PGMID DELIMITED SIZE
011300          " - PARM:"
011400          DELIMITED SIZE
011500          WS-PARM-TEXT(1:WS-PARM-LEN) DELIMITED SIZE
011600          INTO WS-USER-MSG-TEXT
011700     END-STRING
011800     PERFORM 8100-00-MESSAGE
011900          THRU 8100-99-END
012000
012100     PERFORM 2100-00-PARSE-PARMSTMT
012200          THRU 2100-99-END
012300
012400     PERFORM 3100-00-WRITE
012500          THRU 3100-99-END
012600
012700     STRING WS-PGMID DELIMITED SIZE
012800            " - ACTION SUCCESSFUL" DELIMITED SIZE
012900          INTO WS-USER-MSG-TEXT
013000     END-STRING
013100     PERFORM 8100-00-MESSAGE
013200          THRU 8100-99-END
013300
013400     GOBACK
013500     SKIP2
013600     CONTINUE.
013700 2100-00-PARSE-PARMSTMT.
013800     SET WS-CARD-IDX TO +1
013900     MOVE +1         TO WS-PARM-POS
014000
014100*    EXTRACT CARD DELIMITER CHARACTER FOR LATER PARSING
014200     UNSTRING WS-PARM-TEXT DELIMITED ","
014300          INTO WS-CARD-OUT (WS-CARD-IDX)
014400          COUNT WS-STR-LEN
014500          POINTER WS-PARM-POS
014600     END-UNSTRING
014700
014800     IF WS-STR-LEN > +1
014900       STRING WS-PGMID DELIMITED SIZE
015000            " - 1ST POSITION OF PARM IS NOT A DELIMITER"
015100            DELIMITED SIZE
015200            INTO WS-USER-MSG-TEXT
015300       END-STRING
015400       PERFORM 8100-00-MESSAGE
015500            THRU 8100-99-END
015600       MOVE +102 TO WS-LE-ABEND
015700       PERFORM 8200-00-ABEND
015800            THRU 8200-99-END
015900     END-IF
016000
016100     MOVE WS-PARM-TEXT(1:1)  TO WS-CARD-SEP
016200     MOVE SPACE              TO WS-CARD-OUT (WS-CARD-IDX)
016300
016400     CONTINUE.
016500 2100-20-PARSE.
016600*    SCAN FOR CARD DELIMITER CHARACTER
016700     UNSTRING WS-PARM-TEXT DELIMITED WS-CARD-SEP
016800          INTO WS-CARD-OUT (WS-CARD-IDX)
016900          COUNT WS-STR-LEN
017000          POINTER WS-PARM-POS
017100     END-UNSTRING
017200
017300     IF WS-STR-LEN > 80
017400       STRING WS-PGMID DELIMITED SIZE
017500            " - CARD LENGTH > 80"
017600            DELIMITED SIZE
017700            INTO WS-USER-MSG-TEXT
017800       END-STRING
017900       PERFORM 8100-00-MESSAGE
018000            THRU 8100-99-END
018100       MOVE +103 TO WS-LE-ABEND
018200       PERFORM 8200-00-ABEND
018300            THRU 8200-99-END
018400     END-IF
018500
018600     ADD +1 TO WS-CARD-COUNT
018700
018800     IF WS-PARM-POS >= WS-PARM-LEN
018900       GO TO 2100-99-END
019000     END-IF
019100
019200     SET WS-CARD-IDX UP BY +1
019300
019400*    PARSE PAST FOLLOWING COMMA
019500     UNSTRING WS-PARM-TEXT DELIMITED ","
019600          INTO WS-CARD-OUT (WS-CARD-IDX)
019700          COUNT WS-STR-LEN
019800          POINTER WS-PARM-POS
019900     END-UNSTRING
020000
020100     IF WS-PARM-POS >= WS-PARM-LEN
020200       GO TO 2100-99-END
020300     END-IF
020400
020500     IF WS-CARD-IDX > 20
020600       STRING WS-PGMID DELIMITED SIZE
020700            " - CAN NOT PROCESS MORE THAN 20 CONTROL CARDS"
020800            DELIMITED SIZE
020900            INTO WS-USER-MSG-TEXT
021000       END-STRING
021100       PERFORM 8100-00-MESSAGE
021200            THRU 8100-99-END
021300       MOVE +104 TO WS-LE-ABEND
021400       PERFORM 8200-00-ABEND
021500            THRU 8200-99-END
021600     END-IF
021700
021800     GO TO 2100-20-PARSE
021900
022000     CONTINUE.
022100 2100-99-END.
022200     EXIT.
022300     SKIP2
022400     CONTINUE.
022500 3100-00-WRITE.
022600     IF WS-CARD-COUNT = ZERO
022700       GO TO 3100-99-END
022800     END-IF
022900
023000     OPEN OUTPUT CARD-FILE
023100
023200     PERFORM
023300          VARYING WS-CARD-IDX FROM +1 BY +1
023400          UNTIL WS-CARD-IDX > WS-CARD-COUNT
023500       WRITE CARD-RECORD FROM WS-CARD-OUT (WS-CARD-IDX)
023600     END-PERFORM
023700
023800     CLOSE CARD-FILE
023900
024000     CONTINUE.
024100 3100-99-END.
024200     EXIT.
024300     SKIP2
024400     CONTINUE.
024500 8100-00-MESSAGE.
024600     MOVE +120 TO WS-USER-MSG-LEN
024700     CALL 'CEEMOUT'
024800          USING WS-USER-MSG-VSTRING
024900                WS-LE-MSG-DEST
025000**              WS-LE-FDBK
025100                OMITTED
025200     END-CALL
025300
025400     MOVE SPACE TO WS-USER-MSG-TEXT
025500
025600     CONTINUE.
025700 8100-99-END.
025800     EXIT.
025900     SKIP2
026000 8200-00-ABEND.
026100     MOVE +3        TO WS-LE-CLEANUP
026200     CALL 'CEE3ABD'
026300          USING WS-LE-ABEND
026400                WS-LE-CLEANUP
026500**              WS-LE-FDBK
026600                OMITTED
026700     END-CALL
026800
026900     CONTINUE.
027000 8200-99-END.
027100     EXIT.
./ ADD NAME=AS5CA    0123-15061-19289-1333-00051-00064-00000-APLKS   06
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5CA
000600*    *         TITLE: AS COMMUNICATION AREA
000700*    *          DATE: 2007/01/01
000800*    *          DESC:
000900*    * ------------------------------------------------------- *
001000*    *
001100*    * 2007/01/01 CREATE
001200*    * 2017/09/22 CHANGE SOME LABELS, ADDED COMMENTS
001300*    * 2019/10/16 ADDED  SOME LABELS
001400*    * ------------------------------------------------------- *
001500 01  ASCA-COMMAREA.
001600     03  ASCA-DSLEN          PIC  9(4)  BINARY SYNC.
001700*                            MINIMUM LENGTH (9*4)=36
001800     03  ASCA-DSID           PIC  9(4)  BINARY SYNC.
001900       88  ASCA              VALUE 2562.
002000     03  ASCA-EYECATHER      PIC  X(8) VALUE "**ASCA**".
002100*    APPLICATION LE CONDITION TOKEN(S)
002200     03  ASCA-CUR-CTOKN      PIC X(12).
002300     03  ASCA-MAX-CTOKN      PIC X(12).
002400*    PLATFORM DEFAULTS
002500     03  ASCA-CUR-DOWNBR     PIC S9(9)  BINARY SYNC.
002600     03  ASCA-GMT-LSEC       COMP-2.
002700     03  ASCA-CUR-LSEC       COMP-2.
002800     03  ASCA-GMT-LDAYS      PIC S9(9)  BINARY SYNC.
002900     03  ASCA-CUR-LDAYS      PIC S9(9)  BINARY SYNC.
003000     03  ASCA-CUR-DTTM       PIC  X(17).
003100*                            GREGORIAN YYYYMMDDHHMISS999
003200     03  FILLER              PIC  X(13).
003300     03  ASCA-NATL-LANG      PIC  X(3).
003400     03  ASCA-CNTRY          PIC  X(2).
003500     03  ASCA-CNTRY-MDS      PIC  X(2).
003600*                            COUNTRY MONETARY DECIMAL SEPARATOR
003700     03  ASCA-CNTRY-MTS      PIC  X(2).
003800*                            COUNTRY MONETARY THOUSANDS SEPARATOR
003900     03  ASCA-CNTRY-MCS      PIC  X(4).
004000*                            COUNTRY MONETARY SYMBOL
004100     03  ASCA-INTL-MCS       PIC  X(3).
004200*                            INTL MONETARY SYMBOL
004300     03  ASCA-TIMESTAMP.
004400         05  ASCA-TS-LEN     PIC S9(4)  BINARY.
004500         05  ASCA-TS-FORMAT  PIC  X(80).
004600*    POINTERS TO CONTROL BLOCKS
004700     03  ASCA-ASAB-PTR       POINTER SYNC.
004800     03  FILLER              POINTER SYNC OCCURS 15 TIMES.
004900*    MISC. INFORMATION
005000     03  ASCA-INIT-SCRPT     PIC X(16).
005100     03  ASCA-INIT-PGM       PIC X(8).
./ ADD NAME=AS5CTOK  0113-15062-17242-1356-00039-00017-00000-APLKS   26
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5CTOK
000600*    *         TITLE: LE CONDITION TOKEN WORK AREA
000700*    *          DATE: 2015/03/02
000800*    *          DESC: INPUT DATA FOR LE CEENCOD MODULE
000900*    * ------------------------------------------------------- *
001000*    *
001100*    * 2015/03/02 CREATE
001200*    * 2017/08/30 REMOVED SOME FIELDS
001300*    * ------------------------------------------------------- *
001400 01  AS5CTOK-WORK-AREA.
001500     03  AS5CTOK-ICONDTOK.
001600         05  AS5CTOK-ICONDID.
001700             07  AS5CTOK-ISEVNBR  PIC S9(4) BINARY.
001800             07  AS5CTOK-IMSGNBR  PIC S9(4) BINARY.
001900         05  AS5CTOK-ICASE        PIC S9(4) BINARY.
002000         05  AS5CTOK-ISEVERITY    PIC S9(4) BINARY.
002100           88 AS5CTOK-ISEV-I          VALUE ZERO.
002200           88 AS5CTOK-ISEV-W          VALUE +1.
002300           88 AS5CTOK-ISEV-E          VALUE +2.
002400           88 AS5CTOK-ISEV-S          VALUE +3.
002500           88 AS5CTOK-ISEV-C          VALUE +4.
002600         05  AS5CTOK-ICONTROL     PIC S9(4) BINARY.
002700           88 AS5CTOK-ICTL-USER       VALUE ZERO.
002800           88 AS5CTOK-ICTL-IBM        VALUE +1.
002900         05  AS5CTOK-IFACILITY    PIC X(03).
003000         05  AS5CTOK-IISINFO      PIC S9(9) BINARY.
003100     03  AS5CTOK-OCTOKEN.
003200         05  AS5CTOK-COND-VALUE.
003300             07  AS5CTOK-COND          PIC  X(08).
003400             07  FILLER REDEFINES AS5CTOK-COND.
003500                 09  AS5CTOK-SEVNBR    PIC S9(4) BINARY.
003600                 09  AS5CTOK-MSGNBR    PIC S9(4) BINARY.
003700                 09  AS5CTOK-CASE      PIC  X(01).
003800                 09  AS5CTOK-FACID     PIC  X(03).
003900         05  AS5CTOK-ISI               PIC S9(9) BINARY.
./ ADD NAME=AS5DMPRB 0101-16243-17158-1346-00004-00004-00000-APLKS   53
017600 01  AS5DMPRB-REQUEST-BLOCK.
017700     03  AS5DMPRB-DATA-LEN    PIC 9(9) BINARY.
017800     03  AS5DMPRB-NUMBER      PIC 9(9) BINARY.
017900     03  AS5DMPRB-TITLE       PIC X(44).
./ ADD NAME=AS5ENVCA 0116-17242-19238-1136-00875-00684-00000-APLKS   44
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * CPYBK ID: AS5ENVCA
000600*    *    TITLE: MAP QUERY ENVIRONMENT COMMUNICATION AREA
000700*    *     DATE: 2017/08/31
000800*    *
000900*    *     DESC: THIS COPYBOOK IS USED TO MAP THE COMM AREA
001000*    *           FOR PROGRAM(S) ASU3QEIB
001100*    *
001200*    * ------------------------------------------------------- *
001300***************************************************************
001400*     CUSTOM CODE REVISION LIST
001500*     DATE     PROGRAMMER  DESCRIPTION
001600*--------------------------------------------------------------
001700*  YYYY/MM/DD   XXXXXXXX
001800*  2018/09/20   lks        z/OS 1.13
001900*  2019/08/26   lks        z/OS 2.2
002000***************************************************************
002100 01  AS5ENVCA-COMMAREA.
002200     03  AS5ENVCA-PSA-AREA.
002300         05  AS5ENVCA-PSA-ARCH.
002400             07  AS5ENVCA-PSA-ARCH-BYTE0.
002500                 09  AS5ENVCA-ARCB0-HEX     PIC X(01).
002600                 09  FILLER                 PIC X(07).
002700                 09  AS5ENVCA-ARCB0-X01     PIC X(01).
002800     03  FILLER              COMP-2 SYNC.
002900     03  AS5ENVCA-PSAE-AREA.
003000         05  AS5ENVCA-PSAE-FACLST.
003100*            FACILITY BYTES 0:15
003200             07  AS5ENVCA-PSAE-FAC-BYTE0.
003300                 09  AS5ENVCA-FACB0-HEX     PIC X(01).
003400                 09  AS5ENVCA-FACB0-X80     PIC X(01).
003500                 09  AS5ENVCA-FACB0-X40     PIC X(01).
003600                 09  AS5ENVCA-FACB0-X20     PIC X(01).
003700                 09  AS5ENVCA-FACB0-X10     PIC X(01).
003800                 09  AS5ENVCA-FACB0-X08     PIC X(01).
003900                 09  AS5ENVCA-FACB0-X04     PIC X(01).
004000                 09  AS5ENVCA-FACB0-X02     PIC X(01).
004100                 09  AS5ENVCA-FACB0-X01     PIC X(01).
004200             07  AS5ENVCA-PSAE-BYTE1.
004300                 09  AS5ENVCA-FACB1-HEX     PIC X(01).
004400                 09  AS5ENVCA-FACB1-X80     PIC X(01).
004500                 09  AS5ENVCA-FACB1-X40     PIC X(01).
004600                 09  AS5ENVCA-FACB1-X20     PIC X(01).
004700                 09  AS5ENVCA-FACB1-X10     PIC X(01).
004800                 09  AS5ENVCA-FACB1-X08     PIC X(01).
004900                 09  AS5ENVCA-FACB1-X04     PIC X(01).
005000                 09  AS5ENVCA-FACB1-X02     PIC X(01).
005100                 09  AS5ENVCA-FACB1-X01     PIC X(01).
005200             07  AS5ENVCA-PSAE-BYTE2.
005300                 09  AS5ENVCA-FACB2-HEX     PIC X(01).
005400                 09  AS5ENVCA-FACB2-X80     PIC X(01).
005500                 09  AS5ENVCA-FACB2-X40     PIC X(01).
005600                 09  AS5ENVCA-FACB2-X20     PIC X(01).
005700                 09  AS5ENVCA-FACB2-X10     PIC X(01).
005800                 09  AS5ENVCA-FACB2-X08     PIC X(01).
005900                 09  AS5ENVCA-FACB2-X04     PIC X(01).
006000                 09  AS5ENVCA-FACB2-X02     PIC X(01).
006100                 09  AS5ENVCA-FACB2-X01     PIC X(01).
006200             07  AS5ENVCA-PSAE-BYTE3.
006300                 09  AS5ENVCA-FACB3-HEX     PIC X(01).
006400                 09  AS5ENVCA-FACB3-X80     PIC X(01).
006500                 09  AS5ENVCA-FACB3-X40     PIC X(01).
006600                 09  AS5ENVCA-FACB3-X20     PIC X(01).
006700                 09  AS5ENVCA-FACB3-X10     PIC X(01).
006800                 09  AS5ENVCA-FACB3-X08     PIC X(01).
006900                 09  AS5ENVCA-FACB3-X04     PIC X(01).
007000                 09  AS5ENVCA-FACB3-X02     PIC X(01).
007100                 09  AS5ENVCA-FACB3-X01     PIC X(01).
007200             07  AS5ENVCA-PSAE-BYTE4.
007300                 09  AS5ENVCA-FACB4-HEX     PIC X(01).
007400                 09  AS5ENVCA-FACB4-X80     PIC X(01).
007500                 09  AS5ENVCA-FACB4-X40     PIC X(01).
007600                 09  AS5ENVCA-FACB4-X20     PIC X(01).
007700                 09  AS5ENVCA-FACB4-X10     PIC X(01).
007800                 09  AS5ENVCA-FACB4-X08     PIC X(01).
007900                 09  AS5ENVCA-FACB4-X04     PIC X(01).
008000                 09  AS5ENVCA-FACB4-X02     PIC X(01).
008100                 09  AS5ENVCA-FACB4-X01     PIC X(01).
008200             07  AS5ENVCA-PSAE-BYTE5.
008300                 09  AS5ENVCA-FACB5-HEX     PIC X(01).
008400                 09  AS5ENVCA-FACB5-X80     PIC X(01).
008500                 09  AS5ENVCA-FACB5-X40     PIC X(01).
008600                 09  AS5ENVCA-FACB5-X20     PIC X(01).
008700                 09  AS5ENVCA-FACB5-X10     PIC X(01).
008800                 09  AS5ENVCA-FACB5-X08     PIC X(01).
008900                 09  AS5ENVCA-FACB5-X04     PIC X(01).
009000                 09  AS5ENVCA-FACB5-X02     PIC X(01).
009100                 09  AS5ENVCA-FACB5-X01     PIC X(01).
009200             07  AS5ENVCA-PSAE-BYTE6.
009300                 09  AS5ENVCA-FACB6-HEX     PIC X(01).
009400                 09  AS5ENVCA-FACB6-X80     PIC X(01).
009500                 09  AS5ENVCA-FACB6-X40     PIC X(01).
009600                 09  AS5ENVCA-FACB6-X20     PIC X(01).
009700                 09  AS5ENVCA-FACB6-X10     PIC X(01).
009800                 09  AS5ENVCA-FACB6-X08     PIC X(01).
009900                 09  AS5ENVCA-FACB6-X04     PIC X(01).
010000                 09  AS5ENVCA-FACB6-X02     PIC X(01).
010100                 09  AS5ENVCA-FACB6-X01     PIC X(01).
010200             07  AS5ENVCA-PSAE-BYTE7.
010300                 09  AS5ENVCA-FACB7-HEX     PIC X(01).
010400                 09  AS5ENVCA-FACB7-X80     PIC X(01).
010500                 09  AS5ENVCA-FACB7-X40     PIC X(01).
010600                 09  AS5ENVCA-FACB7-X20     PIC X(01).
010700                 09  AS5ENVCA-FACB7-X10     PIC X(01).
010800                 09  AS5ENVCA-FACB7-X08     PIC X(01).
010900                 09  AS5ENVCA-FACB7-X04     PIC X(01).
011000                 09  AS5ENVCA-FACB7-X02     PIC X(01).
011100                 09  AS5ENVCA-FACB7-X01     PIC X(01).
011200             07  AS5ENVCA-PSAE-BYTE8.
011300                 09  AS5ENVCA-FACB8-HEX     PIC X(01).
011400                 09  AS5ENVCA-FACB8-X80     PIC X(01).
011500                 09  AS5ENVCA-FACB8-X40     PIC X(01).
011600                 09  AS5ENVCA-FACB8-X20     PIC X(01).
011700                 09  AS5ENVCA-FACB8-X10     PIC X(01).
011800                 09  AS5ENVCA-FACB8-X08     PIC X(01).
011900                 09  AS5ENVCA-FACB8-X04     PIC X(01).
012000                 09  AS5ENVCA-FACB8-X02     PIC X(01).
012100                 09  AS5ENVCA-FACB8-X01     PIC X(01).
012200             07  AS5ENVCA-PSAE-BYTE9.
012300                 09  AS5ENVCA-FACB9-HEX     PIC X(01).
012400                 09  AS5ENVCA-FACB9-X80     PIC X(01).
012500                 09  AS5ENVCA-FACB9-X40     PIC X(01).
012600                 09  AS5ENVCA-FACB9-X20     PIC X(01).
012700                 09  AS5ENVCA-FACB9-X10     PIC X(01).
012800                 09  AS5ENVCA-FACB9-X08     PIC X(01).
012900                 09  AS5ENVCA-FACB9-X04     PIC X(01).
013000                 09  AS5ENVCA-FACB9-X02     PIC X(01).
013100                 09  AS5ENVCA-FACB9-X01     PIC X(01).
013200             07  AS5ENVCA-PSAE-BYTEA.
013300                 09  AS5ENVCA-FACBA-HEX     PIC X(01).
013400                 09  AS5ENVCA-FACBA-X80     PIC X(01).
013500                 09  AS5ENVCA-FACBA-X40     PIC X(01).
013600                 09  AS5ENVCA-FACBA-X20     PIC X(01).
013700                 09  AS5ENVCA-FACBA-X10     PIC X(01).
013800                 09  AS5ENVCA-FACBA-X08     PIC X(01).
013900                 09  AS5ENVCA-FACBA-X04     PIC X(01).
014000                 09  AS5ENVCA-FACBA-X02     PIC X(01).
014100                 09  AS5ENVCA-FACBA-X01     PIC X(01).
014200             07  AS5ENVCA-PSAE-BYTEB.
014300                 09  AS5ENVCA-FACBB-HEX     PIC X(01).
014400                 09  AS5ENVCA-FACBB-X80     PIC X(01).
014500                 09  AS5ENVCA-FACBB-X40     PIC X(01).
014600                 09  AS5ENVCA-FACBB-X20     PIC X(01).
014700                 09  AS5ENVCA-FACBB-X10     PIC X(01).
014800                 09  AS5ENVCA-FACBB-X08     PIC X(01).
014900                 09  AS5ENVCA-FACBB-X04     PIC X(01).
015000                 09  AS5ENVCA-FACBB-X02     PIC X(01).
015100                 09  AS5ENVCA-FACBB-X01     PIC X(01).
015200             07  AS5ENVCA-PSAE-BYTEC.
015300                 09  AS5ENVCA-FACBC-HEX     PIC X(01).
015400                 09  AS5ENVCA-FACBC-X80     PIC X(01).
015500                 09  AS5ENVCA-FACBC-X40     PIC X(01).
015600                 09  AS5ENVCA-FACBC-X20     PIC X(01).
015700                 09  AS5ENVCA-FACBC-X10     PIC X(01).
015800                 09  AS5ENVCA-FACBC-X08     PIC X(01).
015900                 09  AS5ENVCA-FACBC-X04     PIC X(01).
016000                 09  AS5ENVCA-FACBC-X02     PIC X(01).
016100                 09  AS5ENVCA-FACBC-X01     PIC X(01).
016200             07  AS5ENVCA-PSAE-BYTED.
016300                 09  AS5ENVCA-FACBD-HEX     PIC X(01).
016400                 09  AS5ENVCA-FACBD-X80     PIC X(01).
016500                 09  AS5ENVCA-FACBD-X40     PIC X(01).
016600                 09  AS5ENVCA-FACBD-X20     PIC X(01).
016700                 09  AS5ENVCA-FACBD-X10     PIC X(01).
016800                 09  AS5ENVCA-FACBD-X08     PIC X(01).
016900                 09  AS5ENVCA-FACBD-X04     PIC X(01).
017000                 09  AS5ENVCA-FACBD-X02     PIC X(01).
017100                 09  AS5ENVCA-FACBD-X01     PIC X(01).
017200             07  AS5ENVCA-PSAE-BYTEE.
017300                 09  AS5ENVCA-FACBE-HEX     PIC X(01).
017400                 09  AS5ENVCA-FACBE-X80     PIC X(01).
017500                 09  AS5ENVCA-FACBE-X40     PIC X(01).
017600                 09  AS5ENVCA-FACBE-X20     PIC X(01).
017700                 09  AS5ENVCA-FACBE-X10     PIC X(01).
017800                 09  AS5ENVCA-FACBE-X08     PIC X(01).
017900                 09  AS5ENVCA-FACBE-X04     PIC X(01).
018000                 09  AS5ENVCA-FACBE-X02     PIC X(01).
018100                 09  AS5ENVCA-FACBE-X01     PIC X(01).
018200             07  AS5ENVCA-PSAE-BYTEF.
018300                 09  AS5ENVCA-FACBF-HEX     PIC X(01).
018400                 09  AS5ENVCA-FACBF-X80     PIC X(01).
018500                 09  AS5ENVCA-FACBF-X40     PIC X(01).
018600                 09  AS5ENVCA-FACBF-X20     PIC X(01).
018700                 09  AS5ENVCA-FACBF-X10     PIC X(01).
018800                 09  AS5ENVCA-FACBF-X08     PIC X(01).
018900                 09  AS5ENVCA-FACBF-X04     PIC X(01).
019000                 09  AS5ENVCA-FACBF-X02     PIC X(01).
019100                 09  AS5ENVCA-FACBF-X01     PIC X(01).
019200         05  AS5ENVCA-PSAE-FACLST1.
019300*            FACILITY BYTES 16:31
019400             07  AS5ENVCA-PSAE-FAC-BYTEG.
019500                 09  AS5ENVCA-FACBG-HEX     PIC X(01).
019600                 09  AS5ENVCA-FACBG-X80     PIC X(01).
019700                 09  AS5ENVCA-FACBG-X40     PIC X(01).
019800                 09  AS5ENVCA-FACBG-X20     PIC X(01).
019900                 09  AS5ENVCA-FACBG-X10     PIC X(01).
020000                 09  AS5ENVCA-FACBG-X08     PIC X(01).
020100                 09  AS5ENVCA-FACBG-X04     PIC X(01).
020200                 09  AS5ENVCA-FACBG-X02     PIC X(01).
020300                 09  AS5ENVCA-FACBG-X01     PIC X(01).
020400             07  AS5ENVCA-PSAE-FAC-BYTEH.
020500                 09  AS5ENVCA-FACBH-HEX     PIC X(01).
020600                 09  AS5ENVCA-FACBH-X80     PIC X(01).
020700                 09  AS5ENVCA-FACBH-X40     PIC X(01).
020800                 09  AS5ENVCA-FACBH-X20     PIC X(01).
020900                 09  AS5ENVCA-FACBH-X10     PIC X(01).
021000                 09  AS5ENVCA-FACBH-X08     PIC X(01).
021100                 09  AS5ENVCA-FACBH-X04     PIC X(01).
021200                 09  AS5ENVCA-FACBH-X02     PIC X(01).
021300                 09  AS5ENVCA-FACBH-X01     PIC X(01).
021400             07  AS5ENVCA-PSAE-FAC-BYTEI.
021500                 09  AS5ENVCA-FACBI-HEX     PIC X(01).
021600                 09  FILLER                 PIC X(08).
021700             07  AS5ENVCA-PSAE-FAC-BYTEJ.
021800                 09  AS5ENVCA-FACBJ-HEX     PIC X(01).
021900                 09  FILLER                 PIC X(08).
022000             07  AS5ENVCA-PSAE-FAC-BYTEK.
022100                 09  AS5ENVCA-FACBK-HEX     PIC X(01).
022200                 09  FILLER                 PIC X(08).
022300             07  AS5ENVCA-PSAE-FAC-BYTEL.
022400                 09  AS5ENVCA-FACBL-HEX     PIC X(01).
022500                 09  FILLER                 PIC X(08).
022600             07  AS5ENVCA-PSAE-FAC-BYTEM.
022700                 09  AS5ENVCA-FACBM-HEX     PIC X(01).
022800                 09  FILLER                 PIC X(08).
022900             07  AS5ENVCA-PSAE-FAC-BYTEN.
023000                 09  AS5ENVCA-FACBN-HEX     PIC X(01).
023100                 09  FILLER                 PIC X(08).
023200             07  AS5ENVCA-PSAE-FAC-BYTEO.
023300                 09  AS5ENVCA-FACBO-HEX     PIC X(01).
023400                 09  FILLER                 PIC X(08).
023500             07  AS5ENVCA-PSAE-FAC-BYTEP.
023600                 09  AS5ENVCA-FACBP-HEX     PIC X(01).
023700                 09  FILLER                 PIC X(08).
023800             07  AS5ENVCA-PSAE-FAC-BYTEQ.
023900                 09  AS5ENVCA-FACBQ-HEX     PIC X(01).
024000                 09  FILLER                 PIC X(08).
024100             07  AS5ENVCA-PSAE-FAC-BYTER.
024200                 09  AS5ENVCA-FACBR-HEX     PIC X(01).
024300                 09  FILLER                 PIC X(08).
024400             07  AS5ENVCA-PSAE-FAC-BYTES.
024500                 09  AS5ENVCA-FACBS-HEX     PIC X(01).
024600                 09  FILLER                 PIC X(08).
024700             07  AS5ENVCA-PSAE-FAC-BYTET.
024800                 09  AS5ENVCA-FACBT-HEX     PIC X(01).
024900                 09  FILLER                 PIC X(08).
025000             07  AS5ENVCA-PSAE-FAC-BYTEU.
025100                 09  AS5ENVCA-FACBU-HEX     PIC X(01).
025200                 09  FILLER                 PIC X(08).
025300             07  AS5ENVCA-PSAE-FAC-BYTEV.
025400                 09  AS5ENVCA-FACBV-HEX     PIC X(01).
025500                 09  FILLER                 PIC X(08).
025600     03  FILLER              COMP-2 SYNC.
025700     03  AS5ENVCA-CVT-AREA.
025800         05  AS5ENVCA-CVT-PNAME   PIC X(08).
025900         05  AS5ENVCA-CVT-FMID    PIC X(08).
026000         05  AS5ENVCA-CVT-UVID    PIC X(16).
026100         05  AS5ENVCA-CVT-CPU     PIC 9(04).
026200         05  AS5ENVCA-CVT-RELNO   PIC X(04).
026300         05  AS5ENVCA-CVT-DCB-BYTE0.
026400             07  AS5ENVCA-DCBB0-HEX    PIC X(01).
026500             07  AS5ENVCA-DCBB0-X80    PIC X(01).
026600             07  AS5ENVCA-DCBB0-X40    PIC X(01).
026700             07  AS5ENVCA-DCBB0-X20    PIC X(01).
026800             07  AS5ENVCA-DCBB0-X10    PIC X(01).
026900             07  AS5ENVCA-DCBB0-X08    PIC X(01).
027000             07  AS5ENVCA-DCBB0-X04    PIC X(01).
027100             07  AS5ENVCA-DCBB0-X02    PIC X(01).
027200             07  AS5ENVCA-DCBB0-X01    PIC X(01).
027300         05  AS5ENVCA-CVT-OPTA-BYTE0.
027400             07  AS5ENVCA-OPTAB0-HEX   PIC X(01).
027500             07  AS5ENVCA-OPTAB0-X80   PIC X(01).
027600             07  AS5ENVCA-OPTAB0-X40   PIC X(01).
027700             07  AS5ENVCA-OPTAB0-X20   PIC X(01).
027800             07  AS5ENVCA-OPTAB0-X10   PIC X(01).
027900             07  AS5ENVCA-OPTAB0-X08   PIC X(01).
028000             07  AS5ENVCA-OPTAB0-X04   PIC X(01).
028100             07  AS5ENVCA-OPTAB0-X02   PIC X(01).
028200             07  AS5ENVCA-OPTAB0-X01   PIC X(01).
028300         05  AS5ENVCA-CVT-OPTB-BYTE0.
028400             07  AS5ENVCA-OPTBB0-HEX   PIC X(01).
028500             07  AS5ENVCA-OPTBB0-X80   PIC X(01).
028600             07  AS5ENVCA-OPTBB0-X40   PIC X(01).
028700             07  AS5ENVCA-OPTBB0-X20   PIC X(01).
028800             07  AS5ENVCA-OPTBB0-X10   PIC X(01).
028900             07  AS5ENVCA-OPTBB0-X08   PIC X(01).
029000             07  AS5ENVCA-OPTBB0-X04   PIC X(01).
029100             07  AS5ENVCA-OPTBB0-X02   PIC X(01).
029200             07  AS5ENVCA-OPTBB0-X01   PIC X(01).
029300         05  AS5ENVCA-CVT-FLG1-BYTE0.
029400             07  AS5ENVCA-FLG1B0-HEX   PIC X(01).
029500             07  AS5ENVCA-FLG1B0-X80   PIC X(01).
029600             07  AS5ENVCA-FLG1B0-X40   PIC X(01).
029700             07  AS5ENVCA-FLG1B0-X20   PIC X(01).
029800             07  AS5ENVCA-FLG1B0-X10   PIC X(01).
029900             07  AS5ENVCA-FLG1B0-X08   PIC X(01).
030000             07  AS5ENVCA-FLG1B0-X04   PIC X(01).
030100             07  AS5ENVCA-FLG1B0-X02   PIC X(01).
030200             07  AS5ENVCA-FLG1B0-X01   PIC X(01).
030300         05  AS5ENVCA-CVT-FLG2-BYTE0.
030400             07  AS5ENVCA-FLG2B0-HEX   PIC X(01).
030500             07  AS5ENVCA-FLG2B0-X80   PIC X(01).
030600             07  AS5ENVCA-FLG2B0-X40   PIC X(01).
030700             07  AS5ENVCA-FLG2B0-X20   PIC X(01).
030800             07  AS5ENVCA-FLG2B0-X10   PIC X(01).
030900             07  AS5ENVCA-FLG2B0-X08   PIC X(01).
031000             07  AS5ENVCA-FLG2B0-X04   PIC X(01).
031100             07  AS5ENVCA-FLG2B0-X02   PIC X(01).
031200             07  AS5ENVCA-FLG2B0-X01   PIC X(01).
031300         05  AS5ENVCA-CVT-FLG3-BYTE0.
031400             07  AS5ENVCA-FLG3B0-HEX   PIC X(01).
031500             07  AS5ENVCA-FLG3B0-X80   PIC X(01).
031600             07  AS5ENVCA-FLG3B0-X40   PIC X(01).
031700             07  AS5ENVCA-FLG3B0-X20   PIC X(01).
031800             07  AS5ENVCA-FLG3B0-X10   PIC X(01).
031900             07  AS5ENVCA-FLG3B0-X08   PIC X(01).
032000             07  AS5ENVCA-FLG3B0-X04   PIC X(01).
032100             07  AS5ENVCA-FLG3B0-X02   PIC X(01).
032200             07  AS5ENVCA-FLG3B0-X01   PIC X(01).
032300         05  AS5ENVCA-CVT-FLG4-BYTE0.
032400             07  AS5ENVCA-FLG4B0-HEX   PIC X(01).
032500             07  AS5ENVCA-FLG4B0-X80   PIC X(01).
032600             07  AS5ENVCA-FLG4B0-X40   PIC X(01).
032700             07  AS5ENVCA-FLG4B0-X20   PIC X(01).
032800             07  AS5ENVCA-FLG4B0-X10   PIC X(01).
032900             07  AS5ENVCA-FLG4B0-X08   PIC X(01).
033000             07  AS5ENVCA-FLG4B0-X04   PIC X(01).
033100             07  AS5ENVCA-FLG4B0-X02   PIC X(01).
033200             07  AS5ENVCA-FLG4B0-X01   PIC X(01).
033300         05  AS5ENVCA-CVT-FLG5-BYTE0.
033400             07  AS5ENVCA-FLG5B0-HEX   PIC X(01).
033500             07  AS5ENVCA-FLG5B0-X80   PIC X(01).
033600             07  AS5ENVCA-FLG5B0-X40   PIC X(01).
033700             07  AS5ENVCA-FLG5B0-X20   PIC X(01).
033800             07  AS5ENVCA-FLG5B0-X10   PIC X(01).
033900             07  AS5ENVCA-FLG5B0-X08   PIC X(01).
034000             07  AS5ENVCA-FLG5B0-X04   PIC X(01).
034100             07  AS5ENVCA-FLG5B0-X02   PIC X(01).
034200             07  AS5ENVCA-FLG5B0-X01   PIC X(01).
034300         05  AS5ENVCA-CVT-FLG6-BYTE0.
034400             07  AS5ENVCA-FLG6B0-HEX   PIC X(01).
034500             07  AS5ENVCA-FLG6B0-X80   PIC X(01).
034600             07  AS5ENVCA-FLG6B0-X40   PIC X(01).
034700             07  AS5ENVCA-FLG6B0-X20   PIC X(01).
034800             07  AS5ENVCA-FLG6B0-X10   PIC X(01).
034900             07  AS5ENVCA-FLG6B0-X08   PIC X(01).
035000             07  AS5ENVCA-FLG6B0-X04   PIC X(01).
035100             07  AS5ENVCA-FLG6B0-X02   PIC X(01).
035200             07  AS5ENVCA-FLG6B0-X01   PIC X(01).
035300         05  AS5ENVCA-CVT-FLG7-BYTE0.
035400             07  AS5ENVCA-FLG7B0-HEX   PIC X(01).
035500             07  AS5ENVCA-FLG7B0-X80   PIC X(01).
035600             07  AS5ENVCA-FLG7B0-X40   PIC X(01).
035700             07  AS5ENVCA-FLG7B0-X20   PIC X(01).
035800             07  AS5ENVCA-FLG7B0-X10   PIC X(01).
035900             07  AS5ENVCA-FLG7B0-X08   PIC X(01).
036000             07  AS5ENVCA-FLG7B0-X04   PIC X(01).
036100             07  AS5ENVCA-FLG7B0-X02   PIC X(01).
036200             07  AS5ENVCA-FLG7B0-X01   PIC X(01).
036300         05  AS5ENVCA-CVT-FLG8-BYTE0.
036400             07  AS5ENVCA-FLG8B0-HEX   PIC X(01).
036500             07  AS5ENVCA-FLG8B0-X80   PIC X(01).
036600             07  AS5ENVCA-FLG8B0-X40   PIC X(01).
036700             07  AS5ENVCA-FLG8B0-X20   PIC X(01).
036800             07  AS5ENVCA-FLG8B0-X10   PIC X(01).
036900             07  AS5ENVCA-FLG8B0-X08   PIC X(01).
037000             07  AS5ENVCA-FLG8B0-X04   PIC X(01).
037100             07  AS5ENVCA-FLG8B0-X02   PIC X(01).
037200             07  AS5ENVCA-FLG8B0-X01   PIC X(01).
037300         05  AS5ENVCA-CVT-LDTOFF  PIC S9(9) BINARY SYNC.
037400         05  AS5ENVCA-CVT-GMTOFF  PIC X(06).
037500         05  AS5ENVCA-CVT-OSLVL.
037600             07  AS5ENVCA-CVT-OSLVL-BYTE0.
037700                 09  AS5ENVCA-OSLB0-HEX     PIC X(01).
037800                 09  AS5ENVCA-OSLB0-X80     PIC X(01).
037900                 09  AS5ENVCA-OSLB0-X40     PIC X(01).
038000                 09  AS5ENVCA-OSLB0-X20     PIC X(01).
038100                 09  AS5ENVCA-OSLB0-X10     PIC X(01).
038200                 09  AS5ENVCA-OSLB0-X08     PIC X(01).
038300                 09  AS5ENVCA-OSLB0-X04     PIC X(01).
038400                 09  AS5ENVCA-OSLB0-X02     PIC X(01).
038500                 09  AS5ENVCA-OSLB0-X01     PIC X(01).
038600             07  AS5ENVCA-CVT-OSLVL-BYTE1.
038700                 09  AS5ENVCA-OSLB1-HEX     PIC X(01).
038800                 09  AS5ENVCA-OSLB1-X80     PIC X(01).
038900                 09  AS5ENVCA-OSLB1-X40     PIC X(01).
039000                 09  AS5ENVCA-OSLB1-X20     PIC X(01).
039100                 09  AS5ENVCA-OSLB1-X10     PIC X(01).
039200                 09  AS5ENVCA-OSLB1-X08     PIC X(01).
039300                 09  AS5ENVCA-OSLB1-X04     PIC X(01).
039400                 09  AS5ENVCA-OSLB1-X02     PIC X(01).
039500                 09  AS5ENVCA-OSLB1-X01     PIC X(01).
039600             07  AS5ENVCA-CVT-OSLVL-BYTE2.
039700                 09  AS5ENVCA-OSLB2-HEX     PIC X(01).
039800                 09  AS5ENVCA-OSLB2-X80     PIC X(01).
039900                 09  AS5ENVCA-OSLB2-X40     PIC X(01).
040000                 09  AS5ENVCA-OSLB2-X20     PIC X(01).
040100                 09  AS5ENVCA-OSLB2-X10     PIC X(01).
040200                 09  AS5ENVCA-OSLB2-X08     PIC X(01).
040300                 09  AS5ENVCA-OSLB2-X04     PIC X(01).
040400                 09  AS5ENVCA-OSLB2-X02     PIC X(01).
040500                 09  AS5ENVCA-OSLB2-X01     PIC X(01).
040600             07  AS5ENVCA-CVT-OSLVL-BYTE3.
040700                 09  AS5ENVCA-OSLB3-HEX     PIC X(01).
040800                 09  AS5ENVCA-OSLB3-X80     PIC X(01).
040900                 09  AS5ENVCA-OSLB3-X40     PIC X(01).
041000                 09  AS5ENVCA-OSLB3-X20     PIC X(01).
041100                 09  AS5ENVCA-OSLB3-X10     PIC X(01).
041200                 09  AS5ENVCA-OSLB3-X08     PIC X(01).
041300                 09  AS5ENVCA-OSLB3-X04     PIC X(01).
041400                 09  AS5ENVCA-OSLB3-X02     PIC X(01).
041500                 09  AS5ENVCA-OSLB3-X01     PIC X(01).
041600             07  AS5ENVCA-CVT-OSLVL-BYTE4.
041700                 09  AS5ENVCA-OSLB4-HEX     PIC X(01).
041800                 09  AS5ENVCA-OSLB4-X80     PIC X(01).
041900                 09  AS5ENVCA-OSLB4-X40     PIC X(01).
042000                 09  AS5ENVCA-OSLB4-X20     PIC X(01).
042100                 09  AS5ENVCA-OSLB4-X10     PIC X(01).
042200                 09  AS5ENVCA-OSLB4-X08     PIC X(01).
042300                 09  AS5ENVCA-OSLB4-X04     PIC X(01).
042400                 09  AS5ENVCA-OSLB4-X02     PIC X(01).
042500                 09  AS5ENVCA-OSLB4-X01     PIC X(01).
042600             07  AS5ENVCA-CVT-OSLVL-BYTE5.
042700                 09  AS5ENVCA-OSLB5-HEX     PIC X(01).
042800                 09  AS5ENVCA-OSLB5-X80     PIC X(01).
042900                 09  AS5ENVCA-OSLB5-X40     PIC X(01).
043000                 09  AS5ENVCA-OSLB5-X20     PIC X(01).
043100                 09  AS5ENVCA-OSLB5-X10     PIC X(01).
043200                 09  AS5ENVCA-OSLB5-X08     PIC X(01).
043300                 09  AS5ENVCA-OSLB5-X04     PIC X(01).
043400                 09  AS5ENVCA-OSLB0-X02     PIC X(01).
043500                 09  AS5ENVCA-OSLB0-X01     PIC X(01).
043600             07  AS5ENVCA-CVT-OSLVL-BYTE6.
043700                 09  AS5ENVCA-OSLB6-HEX     PIC X(01).
043800                 09  AS5ENVCA-OSLB6-X80     PIC X(01).
043900                 09  AS5ENVCA-OSLB6-X40     PIC X(01).
044000                 09  AS5ENVCA-OSLB6-X20     PIC X(01).
044100                 09  AS5ENVCA-OSLB6-X10     PIC X(01).
044200                 09  AS5ENVCA-OSLB6-X08     PIC X(01).
044300                 09  AS5ENVCA-OSLB6-X04     PIC X(01).
044400                 09  AS5ENVCA-OSLB6-X02     PIC X(01).
044500                 09  AS5ENVCA-OSLB6-X01     PIC X(01).
044600             07  AS5ENVCA-CVT-OSLVL-BYTE7.
044700                 09  AS5ENVCA-OSLB7-HEX     PIC X(01).
044800                 09  FILLER                 PIC X(08).
044900             07  AS5ENVCA-CVT-OSLVL-BYTE8.
045000                 09  AS5ENVCA-OSLB8-HEX     PIC X(01).
045100                 09  AS5ENVCA-OSLB8-X80     PIC X(01).
045200                 09  AS5ENVCA-OSLB8-X40     PIC X(01).
045300                 09  AS5ENVCA-OSLB8-X20     PIC X(01).
045400                 09  AS5ENVCA-OSLB8-X10     PIC X(01).
045500                 09  AS5ENVCA-OSLB8-X08     PIC X(01).
045600                 09  AS5ENVCA-OSLB8-X04     PIC X(01).
045700                 09  AS5ENVCA-OSLB8-X02     PIC X(01).
045800                 09  AS5ENVCA-OSLB8-X01     PIC X(01).
045900             07  AS5ENVCA-CVT-OSLVL-BYTE9.
046000                 09  AS5ENVCA-OSLB9-HEX     PIC X(01).
046100                 09  FILLER                 PIC X(08).
046200             07  AS5ENVCA-CVT-OSLVL-BYTEA.
046300                 09  AS5ENVCA-OSLBA-HEX     PIC X(01).
046400                 09  FILLER                 PIC X(08).
046500             07  AS5ENVCA-CVT-OSLVL-BYTEB.
046600                 09  AS5ENVCA-OSLBB-HEX     PIC X(01).
046700                 09  FILLER                 PIC X(08).
046800             07  AS5ENVCA-CVT-OSLVL-BYTEC.
046900                 09  AS5ENVCA-OSLBC-HEX     PIC X(01).
047000                 09  FILLER                 PIC X(08).
047100             07  AS5ENVCA-CVT-OSLVL-BYTED.
047200                 09  AS5ENVCA-OSLBD-HEX     PIC X(01).
047300                 09  FILLER                 PIC X(08).
047400             07  AS5ENVCA-CVT-OSLVL-BYTEE.
047500                 09  AS5ENVCA-OSLBD-HEX     PIC X(01).
047600                 09  FILLER                 PIC X(08).
047700             07  AS5ENVCA-CVT-OSLVL-BYTEF.
047800                 09  AS5ENVCA-OSLBF-HEX     PIC X(01).
047900                 09  FILLER                 PIC X(08).
048000     03  FILLER              COMP-2 SYNC.
048100     03  AS5ENVCA-ECVT-AREA.
048200         05  AS5ENVCA-ECVT-SYSPLEX     PIC X(08).
048300         05  AS5ENVCA-ECVT-HWNAME      PIC X(08).
048400         05  AS5ENVCA-ECVT-LPAR        PIC X(08).
048500         05  AS5ENVCA-ECVT-VMID        PIC X(08).
048600         05  AS5ENVCA-ECVT-PID         PIC X(08).
048700         05  AS5ENVCA-ECVT-PRODNBR     PIC  9(8).
048800         05  AS5ENVCA-ECVT-PRODOWN     PIC X(16).
048900         05  AS5ENVCA-ECVT-PRODNME     PIC X(16).
049000         05  AS5ENVCA-ECVT-PRODVRM     PIC X(06).
049100         05  AS5ENVCA-ECVT-CLONE       PIC X(02).
049200         05  AS5ENCVA-ECVT-LOADPRM     PIC X(08).
049300         05  AS5ENCVA-ECVT-CACHESZ     PIC S9(4) BINARY SYNC.
049400         05  AS5ENCVA-ECVT-GRSMODE     PIC S9(4) BINARY SYNC.
049500*            0-none 1-ring 2-star
049600         05  AS5ENCVA-ECVT-OMVSIND     PIC X(01).
049700     03  FILLER              COMP-2 SYNC.
049800     03  AS5ENVCA-ASCB-AREA.
049900         05  AS5ENVCA-ASCB-LCPUID      PIC S9(4) BINARY SYNC.
050000         05  AS5ENVCA-ASCB-ASID        PIC S9(4) BINARY SYNC.
050100         05  AS5ENVCA-ASCB-DPRI        PIC S9(4) BINARY SYNC.
050200         05  AS5ENVCA-ASCB-LEVEL       PIC S9(4) BINARY SYNC.
050300         05  AS5ENVCA-ASXB-USERID      PIC X(08).
050400     03  AS5ENVCA-ACEE-AREA.
050500         05  AS5ENVCA-ACEE-USERID      PIC X(08).
050600         05  AS5ENVCA-ACEE-GROUP       PIC X(08).
050700         05  AS5ENVCA-ACEE-APPLNM      PIC X(08).
050800         05  AS5ENVCA-ACEE-TERMID      PIC X(08).
050900         05  AS5ENVCA-ACEE-USERNAME    PIC X(24).
051000     03  AS5ENVCA-JSAB-AREA.
051100         05  AS5ENVCA-JSAB-CODELVL     PIC S9(4) BINARY SYNC.
051200         05  AS5ENVCA-JSAB-SCID        PIC X(04).
051300         05  FILLER                    PIC X(08).
051400         05  AS5ENVCA-JSAB-NTRYTS      PIC X(24).
051500         05  FILLER                    PIC X(08).
051600         05  AS5ENVCA-JSAB-EXECTS      PIC X(24).
051700         05  AS5ENVCA-JSAB-JBID        PIC X(08).
051800         05  AS5ENVCA-JSAB-JBNM        PIC X(08).
051900         05  AS5ENVCA-JSAB-EXECLVL     PIC S9(4) BINARY SYNC.
052000         05  AS5ENVCA-JSAB-SSNM        PIC X(04).
052100         05  AS5ENVCA-JSAB-USERID      PIC X(08).
052200         05  AS5ENVCA-JSAB-GROUP       PIC X(08).
052300     03  FILLER              COMP-2 SYNC.
052400     03  AS5ENVCA-DFA-AREA.
052500         05  FILLER               PIC X(02).
052600         05  AS5ENVCA-DFA-P0REL   PIC X(04).
052700         05  FILLER               PIC X(04).
052800         05  AS5ENVCA-DFA-PRELX   PIC X(08).
052900         05  AS5ENVCA-DFA-PRELS.
053000             07  AS5ENVCA-DFA-PPROD    PIC  9(2).
053100             07  AS5ENVCA-DFA-PVER     PIC  9(2).
053200             07  AS5ENVCA-DFA-PREL     PIC  9(2).
053300             07  AS5ENVCA-DFA-PMOD     PIC  9(2).
053400         05  AS5ENVCA-DFA-FEATLST.
053500             07  AS5ENVCA-DFA-FEATURE-BYTE0.
053600                 09  AS5ENVCA-FEAB0-HEX     PIC X(01).
053700                 09  AS5ENVCA-FEAB0-X80     PIC X(01).
053800                 09  AS5ENVCA-FEAB0-X40     PIC X(01).
053900                 09  AS5ENVCA-FEAB0-X20     PIC X(01).
054000                 09  AS5ENVCA-FEAB0-X10     PIC X(01).
054100                 09  AS5ENVCA-FEAB0-X08     PIC X(01).
054200                 09  AS5ENVCA-FEAB0-X04     PIC X(01).
054300                 09  AS5ENVCA-FEAB0-X02     PIC X(01).
054400                 09  AS5ENVCA-FEAB0-X01     PIC X(01).
054500             07  AS5ENVCA-DFA-FEATURE-BYTE1.
054600                 09  AS5ENVCA-FEAB1-HEX     PIC X(01).
054700                 09  AS5ENVCA-FEAB1-X80     PIC X(01).
054800                 09  AS5ENVCA-FEAB1-X40     PIC X(01).
054900                 09  AS5ENVCA-FEAB1-X20     PIC X(01).
055000                 09  AS5ENVCA-FEAB1-X10     PIC X(01).
055100                 09  AS5ENVCA-FEAB1-X08     PIC X(01).
055200                 09  AS5ENVCA-FEAB1-X04     PIC X(01).
055300                 09  AS5ENVCA-FEAB1-X02     PIC X(01).
055400                 09  AS5ENVCA-FEAB1-X01     PIC X(01).
055500             07  AS5ENVCA-DFA-FEATURE-BYTE2.
055600                 09  AS5ENVCA-FEAB2-HEX     PIC X(01).
055700                 09  AS5ENVCA-FEAB2-X80     PIC X(01).
055800                 09  AS5ENVCA-FEAB2-X40     PIC X(01).
055900                 09  AS5ENVCA-FEAB2-X20     PIC X(01).
056000                 09  AS5ENVCA-FEAB2-X10     PIC X(01).
056100                 09  AS5ENVCA-FEAB2-X08     PIC X(01).
056200                 09  AS5ENVCA-FEAB2-X04     PIC X(01).
056300                 09  AS5ENVCA-FEAB2-X02     PIC X(01).
056400                 09  AS5ENVCA-FEAB2-X01     PIC X(01).
056500             07  AS5ENVCA-DFA-FEATURE-BYTE3.
056600                 09  AS5ENVCA-FEAB3-HEX     PIC X(01).
056700                 09  AS5ENVCA-FEAB3-X80     PIC X(01).
056800                 09  AS5ENVCA-FEAB3-X40     PIC X(01).
056900                 09  AS5ENVCA-FEAB3-X20     PIC X(01).
057000                 09  AS5ENVCA-FEAB3-X10     PIC X(01).
057100                 09  AS5ENVCA-FEAB3-X08     PIC X(01).
057200                 09  AS5ENVCA-FEAB3-X04     PIC X(01).
057300                 09  AS5ENVCA-FEAB3-X02     PIC X(01).
057400                 09  AS5ENVCA-FEAB3-X01     PIC X(01).
057500             07  AS5ENVCA-DFA-FEATURE-BYTE4.
057600                 09  AS5ENVCA-FEAB4-HEX     PIC X(01).
057700                 09  AS5ENVCA-FEAB4-X80     PIC X(01).
057800                 09  AS5ENVCA-FEAB4-X40     PIC X(01).
057900                 09  AS5ENVCA-FEAB4-X20     PIC X(01).
058000                 09  AS5ENVCA-FEAB4-X10     PIC X(01).
058100                 09  AS5ENVCA-FEAB4-X08     PIC X(01).
058200                 09  AS5ENVCA-FEAB4-X04     PIC X(01).
058300                 09  AS5ENVCA-FEAB4-X02     PIC X(01).
058400                 09  AS5ENVCA-FEAB4-X01     PIC X(01).
058500             07  AS5ENVCA-DFA-FEATURE-BYTE5.
058600                 09  AS5ENVCA-FEAB5-HEX     PIC X(01).
058700                 09  AS5ENVCA-FEAB5-X80     PIC X(01).
058800                 09  AS5ENVCA-FEAB5-X40     PIC X(01).
058900                 09  AS5ENVCA-FEAB5-X20     PIC X(01).
059000                 09  AS5ENVCA-FEAB5-X10     PIC X(01).
059100                 09  AS5ENVCA-FEAB5-X08     PIC X(01).
059200                 09  AS5ENVCA-FEAB5-X04     PIC X(01).
059300                 09  AS5ENVCA-FEAB5-X02     PIC X(01).
059400                 09  AS5ENVCA-FEAB5-X01     PIC X(01).
059500             07  AS5ENVCA-DFA-FEATURE-BYTE6.
059600                 09  AS5ENVCA-FEAB6-HEX     PIC X(01).
059700                 09  AS5ENVCA-FEAB6-X80     PIC X(01).
059800                 09  AS5ENVCA-FEAB6-X40     PIC X(01).
059900                 09  AS5ENVCA-FEAB6-X20     PIC X(01).
060000                 09  AS5ENVCA-FEAB6-X10     PIC X(01).
060100                 09  AS5ENVCA-FEAB6-X08     PIC X(01).
060200                 09  AS5ENVCA-FEAB6-X04     PIC X(01).
060300                 09  AS5ENVCA-FEAB6-X02     PIC X(01).
060400                 09  AS5ENVCA-FEAB6-X01     PIC X(01).
060500             07  AS5ENVCA-DFA-FEATURE-BYTE7.
060600                 09  AS5ENVCA-FEAB7-HEX     PIC X(01).
060700                 09  AS5ENVCA-FEAB7-X80     PIC X(01).
060800                 09  AS5ENVCA-FEAB7-X40     PIC X(01).
060900                 09  AS5ENVCA-FEAB7-X20     PIC X(01).
061000                 09  AS5ENVCA-FEAB7-X10     PIC X(01).
061100                 09  AS5ENVCA-FEAB7-X08     PIC X(01).
061200                 09  AS5ENVCA-FEAB7-X04     PIC X(01).
061300                 09  AS5ENVCA-FEAB7-X02     PIC X(01).
061400                 09  AS5ENVCA-FEAB7-X01     PIC X(01).
061500             07  AS5ENVCA-DFA-FEATURE-BYTE8.
061600                 09  AS5ENVCA-FEAB8-HEX     PIC X(01).
061700                 09  AS5ENVCA-FEAB8-X80     PIC X(01).
061800                 09  AS5ENVCA-FEAB8-X40     PIC X(01).
061900                 09  AS5ENVCA-FEAB8-X20     PIC X(01).
062000                 09  AS5ENVCA-FEAB8-X10     PIC X(01).
062100                 09  AS5ENVCA-FEAB8-X08     PIC X(01).
062200                 09  AS5ENVCA-FEAB8-X04     PIC X(01).
062300                 09  AS5ENVCA-FEAB8-X02     PIC X(01).
062400                 09  AS5ENVCA-FEAB8-X01     PIC X(01).
062500             07  AS5ENVCA-DFA-FEATURE-BYTE9.
062600                 09  AS5ENVCA-FEAB9-HEX     PIC X(01).
062700                 09  AS5ENVCA-FEAB9-X80     PIC X(01).
062800                 09  AS5ENVCA-FEAB9-X40     PIC X(01).
062900                 09  AS5ENVCA-FEAB9-X20     PIC X(01).
063000                 09  AS5ENVCA-FEAB9-X10     PIC X(01).
063100                 09  AS5ENVCA-FEAB9-X08     PIC X(01).
063200                 09  AS5ENVCA-FEAB9-X04     PIC X(01).
063300                 09  AS5ENVCA-FEAB9-X02     PIC X(01).
063400                 09  AS5ENVCA-FEAB9-X01     PIC X(01).
063500         05  AS5ENVCA-DFA-HPFFEATLST.
063600             07  AS5ENVCA-DFA-HPFFEAT-BYTE1.
063700                 09  AS5ENVCA-HPFB1-HEX     PIC X(01).
063800                 09  AS5ENVCA-HPFB1-X80     PIC X(01).
063900                 09  AS5ENVCA-HPFB1-X40     PIC X(01).
064000                 09  AS5ENVCA-HPFB1-X20     PIC X(01).
064100                 09  AS5ENVCA-HPFB1-X10     PIC X(01).
064200                 09  AS5ENVCA-HPFB1-X08     PIC X(01).
064300                 09  AS5ENVCA-HPFB1-X04     PIC X(01).
064400                 09  AS5ENVCA-HPFB1-X02     PIC X(01).
064500                 09  AS5ENVCA-HPFB1-X01     PIC X(01).
064600             07  AS5ENVCA-DFA-HPFFEAT-BYTE2.
064700                 09  AS5ENVCA-HPFB2-HEX     PIC X(01).
064800                 09  AS5ENVCA-HPFB2-X80     PIC X(01).
064900                 09  AS5ENVCA-HPFB2-X40     PIC X(01).
065000                 09  AS5ENVCA-HPFB2-X20     PIC X(01).
065100                 09  AS5ENVCA-HPFB2-X10     PIC X(01).
065200                 09  AS5ENVCA-HPFB2-X08     PIC X(01).
065300                 09  AS5ENVCA-HPFB2-X04     PIC X(01).
065400                 09  AS5ENVCA-HPFB2-X02     PIC X(01).
065500                 09  AS5ENVCA-HPFB2-X01     PIC X(01).
065600             07  AS5ENVCA-DFA-HPFFEAT-BYTE3.
065700                 09  AS5ENVCA-HPFB3-HEX     PIC X(01).
065800                 09  AS5ENVCA-HPFB3-X80     PIC X(01).
065900                 09  AS5ENVCA-HPFB3-X40     PIC X(01).
066000                 09  AS5ENVCA-HPFB3-X20     PIC X(01).
066100                 09  AS5ENVCA-HPFB3-X10     PIC X(01).
066200                 09  AS5ENVCA-HPFB3-X08     PIC X(01).
066300                 09  AS5ENVCA-HPFB3-X04     PIC X(01).
066400                 09  AS5ENVCA-HPFB3-X02     PIC X(01).
066500                 09  AS5ENVCA-HPFB3-X01     PIC X(01).
066600             07  AS5ENVCA-DFA-HPFFEAT-BYTE4.
066700                 09  AS5ENVCA-HPFB4-HEX     PIC X(01).
066800                 09  AS5ENVCA-HPFB4-X80     PIC X(01).
066900                 09  AS5ENVCA-HPFB4-X40     PIC X(01).
067000                 09  AS5ENVCA-HPFB4-X20     PIC X(01).
067100                 09  AS5ENVCA-HPFB4-X10     PIC X(01).
067200                 09  AS5ENVCA-HPFB4-X08     PIC X(01).
067300                 09  AS5ENVCA-HPFB4-X04     PIC X(01).
067400                 09  AS5ENVCA-HPFB4-X02     PIC X(01).
067500                 09  AS5ENVCA-HPFB4-X01     PIC X(01).
067600         05  FILLER     PIC X(02).
067700         05  AS5ENVCA-DFA-CMPTYPE      PIC S9(4) BINARY SYNC.
067800*            0-generic 1-tailored 2-zEDC req 3-zEDC prefered
067900         05  AS5ENVCA-DFA-PDSEMAXGEN   PIC S9(9) BINARY SYNC.
068000     03  FILLER              COMP-2 SYNC.
068100     03  AS5ENVCA-TIOT-AREA.
068200         05  AS5ENVCA-TIOT-JOBNAME     PIC X(08).
068300         05  AS5ENVCA-TIOT-JOBSTEP     PIC X(08).
068400         05  AS5ENVCA-TIOT-PROCSTEP    PIC X(08).
068500         05  AS5ENVCA-TIOT-DDNCNT      PIC S9(4) BINARY SYNC.
068600         05  AS5ENVCA-TIOTE-DDNTRY
068700                        OCCURS 30 TIMES
068800                        INDEXED BY AS5ENVCA-DDNTRY-NDX.
068900             07  AS5ENVCA-TIOTE-DDNAME      PIC X(08).
069000             07  AS5ENVCA-TIOTE-DSNCNT      PIC S9(4) BINARY SYNC.
069100     03  FILLER              COMP-2 SYNC.
069200     03  AS5ENVCA-LE-AREA.
069300         05  FILLER               PIC X(04).
069400         05  AS5ENVCA-LE-PGPID    PIC X(08).
069500         05  AS5ENVCA-LE-PTEXT    PIC X(16).
069600         05  AS5ENVCA-LE-LEVEL    PIC S9(4) BINARY SYNC.
069700*            1:28 CEECAALEVEL
069800         05  AS5ENVCA-LE-HW       PIC S9(4) BINARY SYNC.
069900*            0:4 CEECAAHRDWR
070000*            2- S/370 NON-XA      3- S/370 XA
070100*            4- S/370 ESA
070200         05  AS5ENVCA-LE-OPSYS    PIC S9(4) BINARY SYNC.
070300*            0:4 CEECAASYSTM
070400*            2- VM/ESA            3- MVS OR Z/OS
070500*            4- VSE
070600         05  AS5ENVCA-LE-SUBSYS   PIC S9(4) BINARY SYNC.
070700*            0:5 CEECAASBSYS
070800*            2- NO                3- TSO
070900*            4- IMS               5- CICS
071000         05  AS5ENVCA-LE-ARCH     PIC S9(9) BINARY SYNC.
071100         05  AS5ENVCA-LE-SYSTEM.
071200             07  AS5ENVCA-SYSTEM-BYTE0.
071300                 09  AS5ENVCA-SYSB0-HEX     PIC X(01).
071400                 09  AS5ENVCA-SYSB0-X80     PIC X(01).
071500                 09  AS5ENVCA-SYSB0-X40     PIC X(01).
071600                 09  AS5ENVCA-SYSB0-X20     PIC X(01).
071700                 09  AS5ENVCA-SYSB0-X10     PIC X(01).
071800                 09  AS5ENVCA-SYSB0-X08     PIC X(01).
071900                 09  AS5ENVCA-SYSB0-X04     PIC X(01).
072000                 09  AS5ENVCA-SYSB0-X02     PIC X(01).
072100                 09  AS5ENVCA-SYSB0-X01     PIC X(01).
072200             07  AS5ENVCA-SYSTEM-BYTE1.
072300                 09  AS5ENVCA-SYSB1-HEX     PIC X(01).
072400                 09  FILLER                 PIC X(08).
072500             07  AS5ENVCA-SYSTEM-BYTE2.
072600                 09  AS5ENVCA-SYSB2-HEX     PIC X(01).
072700                 09  FILLER                 PIC X(08).
072800             07  AS5ENVCA-SYSTEM-BYTE3.
072900                 09  AS5ENVCA-SYSB3-HEX     PIC X(01).
073000                 09  AS5ENVCA-SYSB3-X80     PIC X(01).
073100                 09  AS5ENVCA-SYSB3-X40     PIC X(01).
073200                 09  AS5ENVCA-SYSB3-X20     PIC X(01).
073300                 09  AS5ENVCA-SYSB3-X10     PIC X(01).
073400                 09  AS5ENVCA-SYSB3-X08     PIC X(01).
073500                 09  AS5ENVCA-SYSB3-X04     PIC X(01).
073600                 09  AS5ENVCA-SYSB3-X02     PIC X(01).
073700                 09  AS5ENVCA-SYSB3-X01     PIC X(01).
073800         05  AS5ENVCA-LE-ENV.
073900             07  AS5ENVCA-ENV-BYTE0.
074000                 09  AS5ENVCA-ENVB0-HEX     PIC X(01).
074100                 09  AS5ENVCA-ENVB0-X80     PIC X(01).
074200                 09  AS5ENVCA-ENVB0-X40     PIC X(01).
074300                 09  AS5ENVCA-ENVB0-X20     PIC X(01).
074400                 09  AS5ENVCA-ENVB0-X10     PIC X(01).
074500                 09  AS5ENVCA-ENVB0-X08     PIC X(01).
074600                 09  AS5ENVCA-ENVB0-X04     PIC X(01).
074700                 09  AS5ENVCA-ENVB0-X02     PIC X(01).
074800                 09  AS5ENVCA-ENVB0-X01     PIC X(01).
074900             07  AS5ENVCA-ENV-BYTE1.
075000                 09  AS5ENVCA-ENVB1-HEX     PIC X(01).
075100                 09  AS5ENVCA-ENVB1-X80     PIC X(01).
075200                 09  AS5ENVCA-ENVB1-X40     PIC X(01).
075300                 09  AS5ENVCA-ENVB1-X20     PIC X(01).
075400                 09  AS5ENVCA-ENVB1-X10     PIC X(01).
075500                 09  AS5ENVCA-ENVB1-X08     PIC X(01).
075600                 09  AS5ENVCA-ENVB1-X04     PIC X(01).
075700                 09  AS5ENVCA-ENVB1-X02     PIC X(01).
075800                 09  AS5ENVCA-ENVB1-X01     PIC X(01).
075900             07  AS5ENVCA-ENV-BYTE2.
076000                 09  AS5ENVCA-ENVB2-HEX     PIC X(01).
076100                 09  FILLER                 PIC X(08).
076200             07  AS5ENVCA-ENV-BYTE3.
076300                 09  AS5ENVCA-ENVB3-HEX     PIC X(01).
076400                 09  FILLER                 PIC X(08).
076500         05  AS5ENVCA-LE-OCBVER   PIC S9(4) BINARY SYNC.
076600         05  AS5ENVCA-LE-OCBVTXT  PIC X(16).
076700         05  AS5ENVCA-LE-FORMAT.
076800             07  AS5ENVCA-FMT-BYTE0.
076900                 09  AS5ENVCA-FMTB0-HEX     PIC X(01).
077000                 09  FILLER                 PIC X(07).
077100                 09  AS5ENVCA-FMTB0-X01     PIC X(01).
077200         05  AS5ENVCA-LE-ORIGIN.
077300             07  AS5ENVCA-ORG-BYTE0.
077400                 09  AS5ENVCA-ORGB0-HEX     PIC X(01).
077500                 09  AS5ENVCA-ORGB0-X80     PIC X(01).
077600                 09  FILLER                 PIC X(07).
077700         05  AS5ENVCA-LE-OPTAIX.
077800             07  AS5ENVCA-AIX-BYTE0.
077900                 09  AS5ENVCA-AIXB0-HEX     PIC X(01).
078000                 09  AS5ENVCA-AIXB0-X80     PIC X(01).
078100         05  AS5ENVCA-LE-OPTA31.
078200             07  AS5ENVCA-A31-BYTE0.
078300                 09  AS5ENVCA-A31B0-HEX     PIC X(01).
078400                 09  AS5ENVCA-A31B0-X80     PIC X(01).
078500         05  AS5ENVCA-LE-OPTCBL.
078600             07  AS5ENVCA-CBL-BYTE0.
078700                 09  AS5ENVCA-CBLB0-HEX     PIC X(01).
078800                 09  AS5ENVCA-CBLB0-X80     PIC X(01).
078900         05  AS5ENVCA-LE-OPTQDA.
079000             07  AS5ENVCA-QDA-BYTE0.
079100                 09  AS5ENVCA-QDAB0-HEX     PIC X(01).
079200                 09  AS5ENVCA-QDAB0-X80     PIC X(01).
079300         05  AS5ENVCA-LE-OPTCHK.
079400             07  AS5ENVCA-CHK-BYTE0.
079500                 09  AS5ENVCA-CHKB0-HEX     PIC X(01).
079600                 09  AS5ENVCA-CHKB0-X80     PIC X(01).
079700         05  AS5ENVCA-LE-OPTDBG.
079800             07  AS5ENVCA-DBG-BYTE0.
079900                 09  AS5ENVCA-DBGB0-HEX     PIC X(01).
080000                 09  AS5ENVCA-DBGB0-X80     PIC X(01).
080100         05  AS5ENVCA-LE-OPTHEAP.
080200             07  AS5ENVCA-HEAP-BYTE0.
080300                 09  AS5ENVCA-HEAB0-HEX     PIC X(01).
080400                 09  AS5ENVCA-HEAB0-X80     PIC X(01).
080500             07  AS5ENVCA-HEAP-BYTE1.
080600                 09  AS5ENVCA-HEAB1-HEX     PIC X(01).
080700                 09  AS5ENVCA-HEAB1-X80     PIC X(01).
080800                 09  AS5ENVCA-HEAB1-X40     PIC X(01).
080900             07  AS5ENVCA-HEAP-LOC     PIC X(05).
081000             07  AS5ENVCA-HEAP-DISP    PIC X(04).
081100         05  AS5ENVCA-LE-OPTSTACK.
081200             07  AS5ENVCA-STACK-BYTE0.
081300                 09  AS5ENVCA-STKB0-HEX     PIC X(01).
081400                 09  AS5ENVCA-STKB0-X80     PIC X(01).
081500             07  AS5ENVCA-STACK-BYTE1.
081600                 09  AS5ENVCA-STKB1-HEX     PIC X(01).
081700                 09  AS5ENVCA-STKB1-X80     PIC X(01).
081800                 09  AS5ENVCA-STKB1-X40     PIC X(01).
081900             07  AS5ENVCA-STACK-LOC    PIC X(05).
082000             07  AS5ENVCA-STACK-DISP   PIC X(04).
082100         05  AS5ENVCA-LE-OPTSTG.
082200             07  AS5ENVCA-STG-BYTE0.
082300                 09  AS5ENVCA-STGB0-HEX     PIC X(01).
082400                 09  AS5ENVCA-STGB0-X80     PIC X(01).
082500             07  AS5ENVCA-STG-BYTE1.
082600                 09  AS5ENVCA-STGB1-HEX     PIC X(01).
082700                 09  AS5ENVCA-STGB1-X80     PIC X(01).
082800                 09  AS5ENVCA-STGB1-X40     PIC X(01).
082900                 09  AS5ENVCA-STGB1-X20     PIC X(01).
083000                 09  FILLER                 PIC X(05).
083100             07  AS5ENVCA-HAVAL      PIC X(01).
083200             07  AS5ENVCA-HFVAL      PIC X(01).
083300             07  AS5ENVCA-SAVAL      PIC X(01).
083400         05  AS5ENVCA-LE-OPTTTA.
083500             07  AS5ENVCA-TTA-BYTE0.
083600                 09  AS5ENVCA-TTAB0-HEX     PIC X(01).
083700                 09  AS5ENVCA-TTAB0-X80     PIC X(01).
083800             07  AS5ENVCA-TTA-LEVEL         PIC  9(9) COMP.
083900             07  AS5ENVCA-TTA-VALUE         PIC X(08).
084000     03  FILLER              COMP-2 SYNC.
084100     03  AS5ENVCA-CSV-AREA.
084200         05  AS5ENVCA-CSV-IPGM    PIC X(08).
084300         05  AS5ENVCA-CSV-ATRBLST.
084400             07  AS5ENVCA-CSV-ATRB-BYTE1.
084500                 09  AS5ENVCA-ATRBB1-HEX    PIC X(01).
084600                 09  AS5ENVCA-ATRBB1-X80    PIC X(01).
084700                 09  AS5ENVCA-ATRBB1-X40    PIC X(01).
084800                 09  AS5ENVCA-ATRBB1-X20    PIC X(01).
084900                 09  AS5ENVCA-ATRBB1-X10    PIC X(01).
085000                 09  AS5ENVCA-ATRBB1-X08    PIC X(01).
085100                 09  AS5ENVCA-ATRBB1-X04    PIC X(01).
085200                 09  AS5ENVCA-ATRBB1-X02    PIC X(01).
085300                 09  AS5ENVCA-ATRBB1-X01    PIC X(01).
085400             07  AS5ENVCA-CSV-ATRB-BYTE2.
085500                 09  AS5ENVCA-ATRBB2-HEX    PIC X(01).
085600                 09  AS5ENVCA-ATRBB2-X80    PIC X(01).
085700                 09  AS5ENVCA-ATRBB2-X40    PIC X(01).
085800                 09  AS5ENVCA-ATRBB2-X20    PIC X(01).
085900                 09  AS5ENVCA-ATRBB2-X10    PIC X(01).
086000                 09  AS5ENVCA-ATRBB2-X08    PIC X(01).
086100                 09  AS5ENVCA-ATRBB2-X04    PIC X(01).
086200                 09  AS5ENVCA-ATRBB2-X02    PIC X(01).
086300                 09  AS5ENVCA-ATRBB2-X01    PIC X(01).
086400             07  AS5ENVCA-CSV-ATRB-BYTE3.
086500                 09  AS5ENVCA-ATRBB3-HEX    PIC X(01).
086600                 09  AS5ENVCA-ATRBB3-X80    PIC X(01).
086700                 09  AS5ENVCA-ATRBB3-X40    PIC X(01).
086800                 09  AS5ENVCA-ATRBB3-X20    PIC X(01).
086900                 09  AS5ENVCA-ATRBB3-X10    PIC X(01).
087000                 09  AS5ENVCA-ATRBB3-X08    PIC X(01).
087100                 09  AS5ENVCA-ATRBB3-X04    PIC X(01).
087200                 09  AS5ENVCA-ATRBB3-X02    PIC X(01).
087300                 09  AS5ENVCA-ATRBB3-X01    PIC X(01).
087400         05  AS5ENVCA-CSV-LOADER  PIC X(04).
087500         05  AS5ENVCA-CSV-PDATA   PIC X(32).
./ ADD NAME=AS5FDBK  0109-16238-17243-1546-00019-00024-00000-APLKS   15
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5FDBK
000600*    *         TITLE: LE FEEDBACK DATA STRUCTURE
000700*    *          DATE: 03/09/2015
000800*    * ------------------------------------------------------- *
000900*    *
001000*    * 2015/03/09 CREATE
001100*    * ------------------------------------------------------- *
001200 01  AS5FDBK-COND-AREA.
001300     03  AS5FDBK-COND        PIC X(08).
001400     03  FILLER REDEFINES AS5FDBK-COND.
001500         05  AS5FDBK-SEVNBR  PIC S9(4) BINARY.
001600         05  AS5FDBK-MSGNBR  PIC S9(4) BINARY.
001700         05  FILLER          PIC X(01).
001800         05  AS5FDBK-FACID   PIC X(03).
001900     03  AS5FDBK-ISI         PIC S9(9) BINARY.
./ ADD NAME=AS5LAIT1 0106-18275-18295-1457-00022-00011-00000-APLKS   34
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LAIT1
000600*    *         TITLE: LEXICAL ANALYSIS INPUT TEMPLATE
000700*    *          DATE: 2018/10/02
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2018/10/02 CREATE
001300*    * ------------------------------------------------------- *
001400 01  AS5LAIT1-INPUT-TEMPLATE.
001500     03  AS5LAIT1-INP-PATTYPE PIC X(01).
001600*        additional      input value x'01'
001700*        string pattern  input value x'02'
001800*        numeric pattern input value x'03'
001900     03  AS5LAIT1-INP-STR-LEN PIC S9(4) BINARY.
002000     03  AS5LAIT1-INP-STR-FLD PIC X(256).
002100     03  FILLER REDEFINES AS5LAIT1-INP-STR-FLD.
002200         05  AS5LAIT1-INP-STR-PTR  POINTER.
./ ADD NAME=AS5LAREQ 0118-17242-18295-1511-00117-00073-00000-APLKS   35
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LAREQ
000600*    *         TITLE: LEXICAL ANALYSIS REQUEST PARAMETERS
000700*    *          DATE: 2017/08/30
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2017/08/30 CREATE
001300*    * 2018/10/09 ADD
001400*    * ------------------------------------------------------- *
001500 01  AS5LAREQ-ACTION         PIC S9(9) BINARY VALUE ZERO.
001600   88  AS5LAREQ-APPEND            VALUE +5.
001700   88  AS5LAREQ-CENTER            VALUE +6.
001800   88  AS5LAREQ-KOUNT             VALUE +7.
001900   88  AS5LAREQ-DEEDIT            VALUE +8.
002000   88  AS5LAREQ-UNK1              VALUE +9.
002100   88  AS5LAREQ-JUSTIFY           VALUE +10.
002200   88  AS5LAREQ-LEFT              VALUE +11.
002300   88  AS5LAREQ-LEX               VALUE +12.
002400   88  AS5LAREQ-RIGHT             VALUE +13.
002500   88  AS5LAREQ-SPACE             VALUE +14.
002600   88  AS5LAREQ-STRDEL            VALUE +15.
002700   88  AS5LAREQ-STRFPOS           VALUE +16.
002800   88  AS5LAREQ-STRIP             VALUE +17.
002900   88  AS5LAREQ-STRISRT           VALUE +18.
003000   88  AS5LAREQ-STRLPOS           VALUE +19.
003100   88  AS5LAREQ-STRBPOS           VALUE +20.
003200   88  AS5LAREQ-STRREPL           VALUE +21.
003300   88  AS5LAREQ-SUBSTR            VALUE +22.
003400   88  AS5LAREQ-VAR               VALUE +23.
003500   88  AS5LAREQ-VHEX              VALUE +24.
003600   88  AS5LAREQ-WORDDEL           VALUE +25.
003700   88  AS5LAREQ-UNK2              VALUE +26.
003800   88  AS5LAREQ-WORDPOS           VALUE +27.
003900   88  AS5LAREQ-HHEX              VALUE +28.
004000     SKIP1
004100 01  AS5LAREQ-OPTIONS.
004200     03  AS5LAREQ-STRIP-CHR  PIC X(01) VALUE SPACE.
004300     03  AS5LAREQ-DELIM-CHR  PIC X(01) VALUE SPACE.
004400     03  AS5LAREQ-PAD-CHR    PIC X(01) VALUE SPACE.
004500     03  AS5LAREQ-OPT-FLAG   PIC X(01) VALUE LOW-VALUE.
004600       88  AS5LAREQ-ALLOFF        VALUE X'00'.
004700       88  AS5LAREQ-UCXLATE       VALUE X'80'.
004800       88  AS5LAREQ-CASEISM       VALUE X'40'.
004900       88  AS5LAREQ-STRIP-B       VALUE X'30'.
005000       88  AS5LAREQ-STRIP-L       VALUE X'20'.
005100       88  AS5LAREQ-STRIP-T       VALUE X'10'.
005200       88  AS5LAREQ-CONTREQ       VALUE X'01'.
005300*      OPTION(S) FOR NBR TO TEXT ONLY
005400*      check format input value x'30' off
005500       88  AS5LAREQ-NBR2WRD       VALUE X'20'.
005600       88  AS5LAREQ-NBR2CUR       VALUE X'10'.
005700     03  FILLER              PIC X(03).
005800     03  AS5LAREQ-PSTATE     PIC X(01) VALUE LOW-VALUE.
005900     03  AS5LAREQ-START      PIC 9(04) BINARY VALUE ZERO.
006000     03  AS5LAREQ-COUNT      PIC 9(04) BINARY VALUE ZERO.
006100     03  FILLER              PIC X(06).
006200     03  AS5LAREQ-PSA-LEN    PIC 9(04) BINARY VALUE ZERO.
006300     03  AS5LAREQ-PSA        PIC X(32).
006400     03  FILLER              PIC X(256) VALUE LOW-VALUE.
006500     SKIP1
006600 01  AS5LAREQ-SOURCE.
006700     03  AS5LAREQ-SRC-LEN    PIC S9(4) BINARY VALUE ZERO.
006800     03  AS5LAREQ-SRC-FLD    PIC X(256).
006900     03  FILLER REDEFINES AS5LAREQ-SRC-FLD.
007000         05  AS5LAREQ-SRC-PTR     POINTER.
007100     SKIP1
007200 01  AS5LAREQ-TEMPLATE-CNT   PIC S9(9) BINARY VALUE ZERO.
007300     SKIP1
007400 01  FILLER.
007500     03  AS5LAREQ-INPUT-TEMPLATE
007600                   OCCURS 9
007700                   INDEXED BY AS5LAREQ-INP-NDX.
007800         05  AS5LAREQ-INP-PATTYPE PIC X(01) VALUE LOW-VALUE.
007900*            additional      input value x'01'
008000*            string pattern  input value x'02'
008100*            numeric pattern input value x'03'
008200         05  AS5LAREQ-INP-STR-LEN PIC S9(4) BINARY VALUE ZERO.
008300         05  AS5LAREQ-INP-STR-FLD PIC X(256).
008400         05  FILLER REDEFINES AS5LAREQ-INP-STR-FLD.
008500             07  AS5LAREQ-INP-STR-PTR  POINTER.
008600     SKIP1
008700 01  FILLER.
008800     03  AS5LAREQ-RESULT-TEMPLATE
008900                   OCCURS 16
009000                   INDEXED BY AS5LAREQ-RSLT-NDX.
009100         05  AS5LAREQ-RSLT-PATTYPE     PIC X(01) VALUE X'04'.
009200         05  AS5LAREQ-RSLT-STR-SIZE
009300                        PIC S9(4) BINARY VALUE ZERO.
009400         05  AS5LAREQ-RSLT-STR-LEN
009500                        PIC S9(4) BINARY VALUE ZERO.
009600         05  AS5LAREQ-RSLT-STR-FLD     PIC X(256)
009700                   VALUE LOW-VALUE.
009800         05  FILLER REDEFINES AS5LAREQ-RSLT-STR-FLD.
009900             07  AS5LAREQ-RSLT-TOKEN-TYPE   PIC X(01).
010000*                floating point value c'F'
010100*                real           value c'R'
010200*                integer        value c'Z'
010300             07  AS5LAREQ-RSLT-TOKEN-STYPE  PIC X(01).
010400             07  AS5LAREQ-RSLT-TOKEN-LEN
010500                        PIC S9(4) BINARY.
010600             07  AS5LAREQ-RSLT-TOKEN-INFO.
010700                 09  AS5LAREQ-RSLT-TOKEN-DIGITS
010800                        PIC S9(4) BINARY.
010900                 09  AS5LAREQ-RSLT-TOKEN-SCALES
011000                        PIC S9(4) BINARY.
011100                 09  AS5LAREQ-RSLT-TOKEN-EXPS
011200                        PIC S9(4) BINARY.
011300                 09  AS5LAREQ-RSLT-TOKEN-NBR     PIC X(40).
011400*                    integer - 31 digits max
011500*                    real - 31 digits max
011600*                    floating point - 35 digits max
011700*                    + floating point exponent - 5 digits max
./ ADD NAME=AS5LARO1 0105-18275-18295-1502-00037-00013-00000-APLKS   34
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LARO1
000600*    *         TITLE: LEXICAL ANALYSIS REQUEST OPTIONS
000700*    *          DATE: 2018/10/02
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2018/10/02 CREATE
001300*    * ------------------------------------------------------- *
001400 01  AS5LARO1-OPTIONS.
001500     03  AS5LARO1-STRIP-CHR  PIC X(01).
001600     03  AS5LARO1-DELIM-CHR  PIC X(01).
001700     03  AS5LARO1-PAD-CHR    PIC X(01).
001800     03  AS5LARO1-OPT-FLAG   PIC X(01).
001900       88  AS5LARO1-ALLOFF        VALUE X'00'.
002000       88  AS5LARO1-UCXLATE       VALUE X'80'.
002100       88  AS5LARO1-CASEISM       VALUE X'40'.
002200       88  AS5LARO1-STRIP-B       VALUE X'30'.
002300       88  AS5LARO1-STRIP-L       VALUE X'20'.
002400       88  AS5LARO1-STRIP-T       VALUE X'10'.
002500       88  AS5LARO1-CONTREQ       VALUE X'01'.
002600*      OPTION(S) FOR NBR TO TEXT ONLY
002700*      CHECK FORMAT INPUT VALUE X'30' OFF
002800       88  AS5LARO1-NBR2WRD       VALUE X'20'.
002900       88  AS5LARO1-NBR2CUR       VALUE X'10'.
003000     03  FILLER              PIC X(03).
003100     03  AS5LARO1-PSTATE     PIC X(01).
003200     03  AS5LARO1-START      PIC 9(04) COMP-5.
003300     03  AS5LARO1-COUNT      PIC 9(04) COMP-5.
003400     03  FILLER              PIC X(06).
003500     03  AS5LARO1-PSA-LEN    PIC 9(04) BINARY.
003600     03  AS5LARO1-PSA        PIC X(32).
003700     03  FILLER              PIC X(256).
./ ADD NAME=AS5LART1 0106-18275-18295-1503-00019-00009-00000-APLKS   14
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LART1
000600*    *         TITLE: LEXICAL ANALYSIS RESULT TEMPLATE
000700*    *          DATE: 2018/10/02
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2018/10/02 CREATE
001300*    * ------------------------------------------------------- *
001400 01  AS5LART1-RESULT-TEMPLATE.
001500     05  AS5LART1-RSLT-PATTYPE    PIC X(01).
001600     05  AS5LART1-RSLT-STR-SIZE   PIC S9(4) BINARY.
001700     05  AS5LART1-RSLT.
001800         07  AS5LART1-RSLT-STR-LEN     PIC S9(4) BINARY.
001900         07  AS5LART1-RSLT-STR-FLD     PIC X(256).
./ ADD NAME=AS5LART2 0103-18275-18295-1452-00039-00019-00000-APLKS   33
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LART2
000600*    *         TITLE: LEXICAL ANALYSIS RESULT TEMPLATE
000700*    *                FOR DE-EDITED NUMBER
000800*    *          DATE: 2018/10/02
000900*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
001000*    *                SERVICE(S)
001100*    * ------------------------------------------------------- *
001200*    *
001300*    * 2018/10/02 CREATE
001400*    * ------------------------------------------------------- *
001500 01  AS5LART2-RESULT-TEMPLATE.
001600     03  AS5LART2-RSLT-PATTYPE    PIC X(01).
001700     03  AS5LART2-RSLT-STR-SIZE   PIC S9(4) BINARY.
001800     03  AS5LART2-RSLT.
001900         05  AS5LART2-RSLT-STR-LEN     PIC S9(4) BINARY.
002000         05  AS5LART2-RSLT-STR-FLD     PIC X(50).
002100         05  FILLER REDEFINES AS5LART2-RSLT-STR-FLD.
002200             07  AS5LART2-RSLT-TOKEN-TYPE   PIC X(01).
002300*                F=floating point
002400*                R=real
002500*                Z=integer
002600             07  AS5LART2-RSLT-TOKEN-STYPE  PIC X(01).
002700             07  AS5LART2-RSLT-TOKEN-LEN    PIC S9(4) BINARY.
002800             07  AS5LART2-RSLT-TOKEN-INFO.
002900                 09  AS5LART2-RSLT-TOKEN-DIGIT#
003000                                  PIC S9(4) BINARY.
003100                 09  AS5LART2-RSLT-TOKEN-SCALE#
003200                                  PIC S9(4) BINARY.
003300                 09  AS5LART2-RSLT-TOKEN-EXP#
003400                                  PIC S9(4) BINARY.
003500                 09  AS5LART2-RSLT-TOKEN-NBR     PIC X(40).
003600*                    integer - 31 digits max
003700*                    real - 31 digits max
003800*                    floating point - 35 digits max
003900*                    + floating point exponent - 5 digits max
./ ADD NAME=AS5LART3 0103-18295-18298-1333-00020-00039-00000-APLKS   58
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LART3
000600*    *         TITLE: LEXICAL ANALYSIS RESULT TEMPLATE
000700*    *                FOR MEDIUM RESULTS
000800*    *          DATE: 2018/10/02
000900*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
001000*    *                SERVICE(S)
001100*    * ------------------------------------------------------- *
001200*    *
001300*    * 2018/10/02 CREATE
001400*    * ------------------------------------------------------- *
001500 01  AS5LART3-RESULT-TEMPLATE.
001600     03  AS5LART3-RSLT-PATTYPE    PIC X(01).
001700     03  AS5LART3-RSLT-STR-SIZE   PIC S9(4) BINARY.
001800     03  AS5LART3-RSLT.
001900         05  AS5LART3-RSLT-STR-LEN     PIC S9(4) BINARY.
002000         05  AS5LART3-RSLT-STR-FLD     PIC X(512).
./ ADD NAME=AS5LART4 0101-18296-18296-1159-00020-00020-00000-APLKS   31
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LART4
000600*    *         TITLE: LEXICAL ANALYSIS RESULT TEMPLATE
000700*    *                FOR LARGE RESULTS
000800*    *          DATE: 2018/10/02
000900*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
001000*    *                SERVICE(S)
001100*    * ------------------------------------------------------- *
001200*    *
001300*    * 2018/10/02 CREATE
001400*    * ------------------------------------------------------- *
001500 01  AS5LART4-RESULT-TEMPLATE.
001600     03  AS5LART4-RSLT-PATTYPE    PIC X(01).
001700     03  AS5LART4-RSLT-STR-SIZE   PIC S9(4) COMP-5.
001800     03  AS5LART4-RSLT.
001900         05  AS5LART4-RSLT-STR-LEN     PIC S9(4) COMP-5.
002000         05  AS5LART4-RSLT-STR-FLD     PIC X(32767).
./ ADD NAME=AS5LAST1 0103-18275-18295-1453-00018-00005-00000-APLKS   54
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LAST1
000600*    *         TITLE: LEXICAL ANALYSIS SOURCE TEMPLATE
000700*    *          DATE: 2018/10/02
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2018/10/02 CREATE
001300*    * ------------------------------------------------------- *
001400 01  AS5LAST1-SOURCE.
001500     03  AS5LAST1-SRC-LEN    PIC S9(4) BINARY.
001600     03  AS5LAST1-SRC-FLD    PIC X(256).
001700     03  FILLER REDEFINES AS5LAST1-SRC-FLD.
001800         05  AS5LAST1-SRC-PTR     POINTER.
./ ADD NAME=AS5LAST2 0102-18295-18295-1515-00019-00018-00000-APLKS   24
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LAST2
000600*    *         TITLE: LEXICAL ANALYSIS SOURCE TEMPLATE
000700*    *                FOR LARGE SOURCE
000800*    *          DATE: 2018/10/02
000900*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
001000*    *                SERVICE(S)
001100*    * ------------------------------------------------------- *
001200*    *
001300*    * 2018/10/02 CREATE
001400*    * ------------------------------------------------------- *
001500 01  AS5LAST2-SOURCE.
001600     03  AS5LAST2-SRC-LEN    PIC S9(4) COMP-5.
001700     03  AS5LAST2-SRC-FLD    PIC X(32756).
001800     03  FILLER REDEFINES AS5LAST2-SRC-FLD.
001900         05  AS5LAST2-SRC-PTR     POINTER.
./ ADD NAME=AS5MSGRB 0106-17242-17264-1444-00048-00019-00000-APLKS   49
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5MSGRB
000600*    *         TITLE: LE ERROR MESSAGE REQUEST BLOCK
000700*    *          DATE: 2017/08/30
000800*    *          DESC: INPUT DATA FOR AS ERROR MESSAGE MODULE
000900*    * ------------------------------------------------------- *
001000*    *
001100*    * 2017/08/30 CREATE
001200*    * ------------------------------------------------------- *
001300 01  AS5MSGRB-REQUEST-BLOCK.
001400     03  FILLER.
001500         05  FILLER     OCCURS 03 TIMES
001600                        INDEXED BY AS5MSGRB-CTOK-NDX.
001700*            * ------------------------------------------------ *
001800*            *   1ST OCCURANCE: PRIMARY LE CONDITION TOKEN
001900*            *   2ND OCCURANCE: INFO MESSAGE TIED TO 1ST
002000*            *   3RD OCCURANCE: INFO MESSAGE TIED TO 1ST
002100*            * ------------------------------------------------ *
002200             07  AS5MSGRB-CTOKEN.
002300                 09  AS5MSGRB-COND-VALUE.
002400                   88  CEE000     VALUE X'0000000000000000'.
002500**                     COPY CEEIGZCT.
002600**                     COPY IGZIGZCT.
002700                       COPY ASUIGZCT.
002800                     11  AS5MSGRB-COND PIC X(08).
002900                     11  FILLER REDEFINES AS5MSGRB-COND.
003000                         13  AS5MSGRB-SEVNBR PIC S9(4) BINARY.
003100                         13  AS5MSGRB-MSGNBR PIC S9(4) BINARY.
003200                         13  FILLER          PIC X(04).
003300                 09  AS5MSGRB-ISI      PIC S9(9) BINARY.
003400             07  FILLER      OCCURS 08 TIMES
003500                             INDEXED BY AS5MSGRB-ISI-NDX.
003600*                * -------------------------------------------- *
003700*                *   1ST OCCURANCE: COMPONENT ISSUEING MESSAGE
003800*                *   2ND OCCURANCE: COMPONENT TYPE
003900*                *   3RD OCCURANCE: COMPONENT NAME OF 2ND
004000*                *   4TH OCCURANCE: ACTION
004100*                *   5TH OCCURANCE: NUMBER STRING
004200*                *   6TH OCCURANCE: NUMBER STRING
004300*                *   7TH OCCURANCE: TEXT STRING
004400*                *   8TH OCCURANCE: TEXT STRING
004500*                * -------------------------------------------- *
004600                 09  AS5MSGRB-ISI-VSTR.
004700                     11  AS5MSGRB-ISI-VLEN  PIC S9(4) BINARY.
004800                     11  AS5MSGRB-ISI-VTXT  PIC X(44).
./ ADD NAME=AS5RECA  0106-19249-19249-1121-00074-00074-00000-APLKS   26
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5RECA
000600*    *         TITLE: REGULAR EXPRESSION COMMUNICATION AREA
000700*    *                DATA GENERATED BY REGCOMP()
000800*    *                TO BE USED BY REGEXEC()
000900*    *          DATE: 2019/06/07
001000*    *          DESC: OUTPUT FOR REGCOMP()
001100*    *                INPUT  FOR REGEXEC()
001200*    * ------------------------------------------------------- *
001300*    *
001400*    * 2019/06/07 lks  create
001500*    * ------------------------------------------------------- *
001600     SKIP1
001700 01  AS5RECA-COMMAREA.
001800     03  AS5RECA-RE-NSUB     PIC 9(9) COMP-5.
001900*        number of expressions in RE pattern
002000     03  AS5RECA-RE-COMP     POINTER.
002100*        pointer to compiled RE, freed by REGFREE()
002200     03  AS5RECA-RE-CFLAGS   PIC S9(9) COMP-5.
002300*        saved flages for REGCOMP()
002400        88  USE-EXTENDED-RULES    VALUE +1.
002500        88  IGNORE-CASE-IN-MATCH  VALUE +2.
002600        88  CONVERT-TO-NEWLINE    VALUE +4.
002700        88  DONOT-REPORT-SUB-EXPRESSIONS    VALUE +8.
002800     03  AS5RECA-RE-ERROFF   PIC 9(9) COMP-5.
002900*        error offset for RE pattern
003000     03  AS5RECA-RE-LEN      PIC 9(9) COMP-5.
003100*        number of characters in compiled pattern
003200     03  AS5RECA-RE-UCOLL    PIC 9(4) COMP-5 OCCURS 2.
003300*        min/max unique collating values
003400     03  AS5RECA-RE-LSUB     POINTER OCCURS 10.
003500*        starting position of sub-expression
003600     03  AS5RECA-RE-ESUB     POINTER OCCURS 10.
003700*        ending position of sub-expression
003800     03  AS5RECA-RE-MAP      PIC X(256).
003900*        maps valid pattern characters
004000     03  AS5RECA-RE-SHIFT    PIC S9(4) COMP-5.
004100*        saved shift state
004200     03  AS5RECA-RE-DBCS     PIC S9(4) COMP-5.
004300*        may start with DBCS character
004400     SKIP1
004500 01  AS5RECA-RE-MATCH.
004600     03  AS5RECA-RE-MATCH-ENTRY OCCURS 10.
004700         05  AS5RECA-RE-MSOFFSET PIC S9(9) COMP-5.
004800         05  AS5RECA-RE-MSSTATE  PIC S9(9) COMP-5.
004900         05  AS5RECA-RE-MNOFFSET PIC S9(9) COMP-5.
005000         05  AS5RECA-RE-MNSTATE  PIC S9(9) COMP-5.
005100     SKIP1
005200 01  AS5RECA-RE-EFLAGS  PIC S9(9) COMP-5.
005300*   saved flages for REGEXEC()
005400    88  1ST-CHAR-NOT-BOL     VALUE +100.
005500    88  LST-CHAR-NOT-EOL     VALUE +200.
005600     SKIP1
005700 01  AS5RECA-RE-ECODE   PIC S9(9) COMP-5.
005800*   RE error codes
005900    88  PATTERN-NOT-FOUND    VALUE +1.
006000    88  BAD-PATTERN     VALUE +2.
006100    88  BAD-COLLATING-ELEMENT     VALUE +3.
006200    88  BAD-CHAR-CLASS  VALUE +4.
006300    88  LST-CHAR-ESCAPE VALUE +5.
006400    88  BAD-NUMBER      VALUE +6.
006500    88  IMBAL-BRACK     VALUE +7.
006600    88  IMBAL-PAREN     VALUE +8.
006700    88  IMBAL-BRACE     VALUE +9.
006800    88  BAD-BRACE       VALUE +10.
006900    88  BAD-RANGE       VALUE +11.
007000    88  OUT-OF-SPACE    VALUE +12.
007100    88  BAD-RPT         VALUE +13.
007200    88  BAD-CHAR        VALUE +14.
007300    88  BAD-BOL         VALUE +15.
007400    88  BAD-EOL         VALUE +16.
./ ADD NAME=VBINSRCH 0110-18196-18295-1434-00169-00156-00000-APLKS   01
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. VBINSRCH.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* BINARY SEARCH ROUTINE USED FOR PROCESSING VECTORS.
000700* WILL HANDLE NON-UNIQUE KEYS.  IT WILL RETURN THE
000800* SUBSCRIPT OF THE 1ST MATCHING KEY OCCURANCE.
000900*
001000* COBOL SEARCH ALL DOES NOT HAVE SPECIAL CODE TO HANDLE
001100* NON-UNIQUE KEYS.
001200*
001300* COBOL CALL STATEMENT:
001400*
001500* CALL 'VBINSRCH'
001600*      USING XS-NTRY-SUB     /*SUB OF MATCHING ENTRY OR 0*/
001700*            XS-NTRY-COUNT   /*NBR OF VECTOR ENTRIES*/
001800*            XS-NTRY-LEN     /*ENTRY LENGTH*/
001900*            XS-SRCHKEY-POS  /*SEARCH KEY POSITION IN ENTRY*/
002000*            XS-SRCHKEY-LEN  /*SEARCH KEY LENGTH*/
002100*            XS-SRCHARG      /*SEARCH ARGUMENT TO LOOK FOR*/
002200*            XS-VECTOR       /*1ST ENTRY OF VECTOR TO SEARCH*/
002300*
002400*    INITIALIZE XS-NTRY-SUB TO -1 ON FIRST CALL FOR A NEW
002500*    VECTOR.  NEEDED TO RECOMPUTE NEW VALUES.
002600*
002700* ALGORITHM: PROGRAMMING PEARLS 2ND ED. BY JON BENTLEY
002800*
002900*       lbnds = 0;
003000*       ubnds = n;      /* nbr of vector entries */
003100*       Do While lbnds+1 <> ubnds;
003200*         mid = (lbnds+ubnds)%2;
003300*         If v(mid) < srcharg Then;
003400*           lbnds = mid;
003500*         Else
003600*           ubnds = mid;
003700*       End;
003800*       If ubnds > n | v(ubnds) <> srcharg Then;
003900*         Do;
004000*           sub = 0;
004100*           RC = +4;
004200*         End;
004300*       Else;
004400*         Do;
004500*           sub = ubnds;
004600*           RC = 0;
004700*         End;
004800*
004900* RETURN CODE:
005000*              0 = entry found
005100*              4 = entry not found
005200*              8 = invalid parameters
005300*
005400* ------------------------------------------------------* XXXXXXXX
005500 DATA DIVISION.
005600 WORKING-STORAGE SECTION.
005700 01  FILLER.
005800     03  WS-EYE-CATCHER PIC X(25)
005900              VALUE "BUZZARD CREEK TECH, INC. ".
006000     03  WS-PGMID       PIC X(08) VALUE "VBINSRCH".
006100
006200 LOCAL-STORAGE SECTION.
006300 01  LS-BNDS-LO         PIC S9(9) BINARY SYNC.
006400 01  LS-BNDS-HI         PIC S9(9) BINARY SYNC.
006500 01  LS-BNDS-MID        PIC S9(9) BINARY SYNC.
006600
006700 01  LS-KEY-POS         PIC S9(9) BINARY SYNC.
006800 01  LS-ENCLAVE-RC      PIC S9(9) BINARY SYNC.
006900
007000 LINKAGE SECTION.
007100 01  XS-NTRY-SUB        PIC S9(9) BINARY.
007200 01  XS-NTRY-COUNT      PIC S9(9) BINARY.
007300 01  XS-NTRY-LEN        PIC S9(9) BINARY.
007400 01  XS-SRCHKEY-POS     PIC S9(9) BINARY.
007500 01  XS-SRCHKEY-LEN     PIC S9(9) BINARY.
007600 01  XS-SRCHARG         PIC X(256).
007700 01  XS-VECTOR          PIC X(8388608).
007800
007900 PROCEDURE DIVISION USING
008000     XS-NTRY-SUB
008100     XS-NTRY-COUNT
008200     XS-NTRY-LEN
008300     XS-SRCHKEY-POS
008400     XS-SRCHKEY-LEN
008500     XS-SRCHARG
008600     XS-VECTOR.
008700
008800     CONTINUE.
008900 INIT-ROUTINE.
009000*    IF INITIAL SEARCH, WE NEED TO COMPUTE SOME VALUES
009100*    OTHERWISE GO TO MAINLINE AND DO THE SEARCH
009200     IF XS-NTRY-SUB >= ZERO
009300       GO TO MAINLINE-ROUTINE
009400     END-IF
009500
009600*    VECTOR HAVE ANY ENTRIES
009700     IF NOT (XS-NTRY-COUNT > ZERO)
009800       MOVE +4 TO LS-ENCLAVE-RC
009900       GO TO RETURN-ROUTINE
010000     END-IF
010100
010200*    VECTOR BIGGER THAN 8M BYTES
010300     IF (XS-NTRY-COUNT * XS-NTRY-LEN) > LENGTH OF XS-VECTOR
010400       MOVE +8 TO LS-ENCLAVE-RC
010500       GO TO RETURN-ROUTINE
010600     END-IF
010700
010800*    VECTOR HAVE MORE THAN 32767 ENTRIES
010900     IF NOT (XS-NTRY-COUNT <= 32767)
011000       MOVE +8 TO LS-ENCLAVE-RC
011100       GO TO RETURN-ROUTINE
011200     END-IF
011300
011400*    SEARCH KEY LONGER THAN 256 BYTES
011500     IF NOT (XS-SRCHKEY-LEN > ZERO
011600          AND XS-SRCHKEY-LEN <= 256)
011700       MOVE +8 TO LS-ENCLAVE-RC
011800       GO TO RETURN-ROUTINE
011900     END-IF
012000
012100*    SEARCH KEY LONGER THAN VECTOR ENTRY
012200     IF NOT (XS-NTRY-LEN > ZERO
012300          AND XS-NTRY-LEN >= XS-SRCHKEY-LEN)
012400       MOVE +8 TO LS-ENCLAVE-RC
012500       GO TO RETURN-ROUTINE
012600     END-IF
012700
012800     CONTINUE.
012900 MAINLINE-ROUTINE.
013000     MOVE XS-NTRY-COUNT TO LS-BNDS-HI
013100     MOVE ZERO TO LS-BNDS-LO
013200                  XS-NTRY-SUB
013300
013400     PERFORM
013500          UNTIL (LS-BNDS-LO + 1) >= LS-BNDS-HI
013600       COMPUTE LS-BNDS-MID = (LS-BNDS-LO + LS-BNDS-HI) / 2
013700       COMPUTE LS-KEY-POS =
013800            (LS-BNDS-MID - 1) * XS-NTRY-LEN + 1
013900            + XS-SRCHKEY-POS - 1
014000       IF XS-VECTOR (LS-KEY-POS:XS-SRCHKEY-LEN)
014100             < XS-SRCHARG (1:XS-SRCHKEY-LEN)
014200         MOVE LS-BNDS-MID TO LS-BNDS-LO
014300       ELSE
014400         MOVE LS-BNDS-MID TO LS-BNDS-HI
014500       END-IF
014600     END-PERFORM
014700
014800     COMPUTE LS-KEY-POS =
014900          (LS-BNDS-HI - 1) * XS-NTRY-LEN + 1
015000          + XS-SRCHKEY-POS - 1
015100     IF LS-BNDS-HI > XS-NTRY-COUNT
015200          OR XS-VECTOR (LS-KEY-POS:XS-SRCHKEY-LEN)
015300               NOT = XS-SRCHARG (1:XS-SRCHKEY-LEN)
015400*      EVENT NOT FOUND
015500       MOVE ZERO TO XS-NTRY-SUB
015600       MOVE +4 TO LS-ENCLAVE-RC
015700       GO TO RETURN-ROUTINE
015800     END-IF
015900
016000*    EVENT FOUND
016100     MOVE ZERO TO LS-ENCLAVE-RC
016200     MOVE LS-BNDS-HI TO XS-NTRY-SUB
016300
016400     CONTINUE.
016500 RETURN-ROUTINE.
016600*    LE SET RETURN CODE
016700     CALL 'CEE3SRC' USING LS-ENCLAVE-RC OMITTED
016800     GOBACK.
016900     EXIT PROGRAM.
./ ADD NAME=VBINSRH1 0112-18197-18295-1436-00169-00164-00000-APLKS   54
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. VBINSRH1.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* BINARY SEARCH ROUTINE USED FOR PROCESSING VECTORS.
000700* DOES NO SPECIAL HANDLING OF NON-UNIQUE KEYS.
000800* IT WILL RETURN THE SUBSCRIPT OF A MATCHING KEY OR
000900* THE SMALLEST KEY GREATER THAN THE SEARCH ARGUMENT.
001000*
001100* COBOL CALL STATEMENT:
001200*
001300* CALL 'VBINSRH1'
001400*      USING XS-NTRY-SUB     /*SUB OF ENTRY >= SEARCH ARGUMENT
001500*            XS-NTRY-COUNT   /*NBR OF VECTOR ENTRIES*/
001600*            XS-NTRY-LEN     /*ENTRY LENGTH*/
001700*            XS-SRCHKEY-POS  /*SEARCH KEY POSITION IN ENTRY*/
001800*            XS-SRCHKEY-LEN  /*SEARCH KEY LENGTH*/
001900*            XS-SRCHARG      /*SEARCH ARGUMENT TO LOOK FOR*/
002000*            XS-VECTOR       /*1ST ENTRY OF VECTOR TO SEARCH*/
002100*
002200*    INITIALIZE XS-NTRY-SUB TO -1 ON FIRST CALL FOR A NEW
002300*    VECTOR.  NEEDED TO RECOMPUTE NEW VALUES.
002400*
002500* ALGORITHM:
002600*
002700*      lbnds = 1;
002800*      ubnds = n;      /* nbr of vector entries */
002900*      gteq = 0;       /* >= subscript */
003000*      Do While lbnds <= ubnds;
003100*        mid = (lbnds+ubnds)%2;
003200*        Select;
003300*          When srcharg < v(mid) Then;
003400*            Do;
003500*              ubnds = mid-1;
003600*              gteq = mid;
003700*            End;
003800*          When srcharg > v(mid) Then;
003900*            lbnds = mid+1;
004000*          Otherwise;
004100*            Do;
004200*              RC = 0;
004300*              Return mid;
004400*            End;
004500*        End;
004600*      End;
004700*
004800*      RC = 0;
004900*      Return gteq;
005000*
005100* RETURN CODE:
005200*              0 = entry found
005300*              4 = entry not found
005400*              8 = invalid parameters
005500*
005600* ------------------------------------------------------* XXXXXXXX
005700 DATA DIVISION.
005800 WORKING-STORAGE SECTION.
005900 01  FILLER.
006000     03  WS-EYE-CATCHER PIC X(25)
006100              VALUE "BUZZARD CREEK TECH, INC. ".
006200     03  WS-PGMID       PIC X(08) VALUE "VBINSRH1".
006300
006400 LOCAL-STORAGE SECTION.
006500 01  LS-BNDS-LO         PIC S9(9) BINARY SYNC.
006600 01  LS-BNDS-HI         PIC S9(9) BINARY SYNC.
006700 01  LS-BNDS-MID        PIC S9(9) BINARY SYNC.
006800
006900 01  LS-GTEQ-SUB        PIC S9(9) BINARY SYNC.
007000 01  LS-KEY-POS         PIC S9(9) BINARY SYNC.
007100 01  LS-ENCLAVE-RC      PIC S9(9) BINARY SYNC.
007200
007300 LINKAGE SECTION.
007400 01  XS-NTRY-SUB        PIC S9(9) BINARY.
007500 01  XS-NTRY-COUNT      PIC S9(9) BINARY.
007600 01  XS-NTRY-LEN        PIC S9(9) BINARY.
007700 01  XS-SRCHKEY-POS     PIC S9(9) BINARY.
007800 01  XS-SRCHKEY-LEN     PIC S9(9) BINARY.
007900 01  XS-SRCHARG         PIC X(256).
008000 01  XS-VECTOR          PIC X(8388608).
008100
008200 PROCEDURE DIVISION USING
008300     XS-NTRY-SUB
008400     XS-NTRY-COUNT
008500     XS-NTRY-LEN
008600     XS-SRCHKEY-POS
008700     XS-SRCHKEY-LEN
008800     XS-SRCHARG
008900     XS-VECTOR.
009000
009100     CONTINUE.
009200 INIT-ROUTINE.
009300*    IF INITIAL SEARCH, WE NEED TO COMPUTE SOME VALUES
009400*    OTHERWISE GO TO MAINLINE AND DO THE SEARCH
009500     IF XS-NTRY-SUB >= ZERO
009600       GO TO MAINLINE-ROUTINE
009700     END-IF
009800
009900*    VECTOR HAVE ANY ENTRIES
010000     IF NOT (XS-NTRY-COUNT > ZERO)
010100       MOVE +4 TO LS-ENCLAVE-RC
010200       GO TO RETURN-ROUTINE
010300     END-IF
010400
010500*    VECTOR BIGGER THAN 8M BYTES
010600     IF (XS-NTRY-COUNT * XS-NTRY-LEN) > LENGTH OF XS-VECTOR
010700       MOVE +8 TO LS-ENCLAVE-RC
010800       GO TO RETURN-ROUTINE
010900     END-IF
011000
011100*    VECTOR HAVE MORE THAN 32767 ENTRIES
011200     IF NOT (XS-NTRY-COUNT <= 32767)
011300       MOVE +8 TO LS-ENCLAVE-RC
011400       GO TO RETURN-ROUTINE
011500     END-IF
011600
011700*    SEARCH KEY LONGER THAN 256 BYTES
011800     IF NOT (XS-SRCHKEY-LEN > ZERO
011900          AND XS-SRCHKEY-LEN <= 256)
012000       MOVE +8 TO LS-ENCLAVE-RC
012100       GO TO RETURN-ROUTINE
012200     END-IF
012300
012400*    SEARCH KEY LONGER THAN VECTOR ENTRY
012500     IF NOT (XS-NTRY-LEN > ZERO
012600          AND XS-NTRY-LEN >= XS-SRCHKEY-LEN)
012700       MOVE +8 TO LS-ENCLAVE-RC
012800       GO TO RETURN-ROUTINE
012900     END-IF
013000
013100     CONTINUE.
013200 MAINLINE-ROUTINE.
013300     MOVE XS-NTRY-COUNT TO LS-BNDS-HI
013400     MOVE +1 TO LS-BNDS-LO
013500     MOVE ZERO TO LS-ENCLAVE-RC
013600                  LS-GTEQ-SUB
013700                  XS-NTRY-SUB
013800
013900     PERFORM
014000          UNTIL LS-BNDS-LO > LS-BNDS-HI
014100       COMPUTE LS-BNDS-MID = (LS-BNDS-LO + LS-BNDS-HI) / 2
014200       COMPUTE LS-KEY-POS =
014300            (LS-BNDS-MID - 1) * XS-NTRY-LEN + 1
014400            + XS-SRCHKEY-POS - 1
014500       EVALUATE TRUE
014600         WHEN XS-SRCHARG (1:XS-SRCHKEY-LEN)
014700              < XS-VECTOR (LS-KEY-POS:XS-SRCHKEY-LEN)
014800           COMPUTE LS-BNDS-HI = LS-BNDS-MID - 1
014900           MOVE LS-BNDS-MID TO LS-GTEQ-SUB
015000         WHEN XS-SRCHARG (1:XS-SRCHKEY-LEN)
015100              > XS-VECTOR (LS-KEY-POS:XS-SRCHKEY-LEN)
015200           COMPUTE LS-BNDS-LO = LS-BNDS-MID + 1
015300         WHEN OTHER
015400           MOVE LS-BNDS-MID TO XS-NTRY-SUB
015500           GO TO RETURN-ROUTINE
015600       END-EVALUATE
015700     END-PERFORM
015800
015900     MOVE LS-GTEQ-SUB TO XS-NTRY-SUB
016000     IF XS-NTRY-SUB = ZERO
016100       MOVE +4 TO LS-ENCLAVE-RC
016200     END-IF
016300
016400     CONTINUE.
016500 RETURN-ROUTINE.
016600*    LE SET RETURN CODE
016700     CALL 'CEE3SRC' USING LS-ENCLAVE-RC OMITTED
016800     GOBACK.
016900     EXIT PROGRAM.
./ ADD NAME=VHEAPSRT 0115-18196-18295-1438-00297-00328-00000-APLKS   49
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. VHEAPSRT.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------*
000600* SORT ROUTINE.  USED FOR SORTING VECTORS IN
000700* (COBOL W-S, LOCAL-STORAGE, OR LINKAGE).
000800*
000900* HEAP SORT ALGORITHM IS THE METHOD IMPLEMENTED
001000* IN-PLACE SORT, RUNS IN (n LN n) TIME
001100* NOT A STABLE SORT (VECTOR ENTRIES WITH THE SAME KEY
001200*   WILL NOT MAINTAIN THE SAME ORDER)
001300* ORDERS ONE SORT KEY IN ASCENDING ORDER
001400*
001500* CALL 'VHEAPSRT'
001600*      USING NTRY-COUNT
001700*            NTRY-LEN
001800*            SRTKEY-POS
001900*            SRTKEY-LEN
002000*            VECTOR
002100*
002200* ------------------------------------------------------*
002300 DATA DIVISION.
002400 WORKING-STORAGE SECTION.
002500 01  FILLER.
002600     03  WS-EYE-CATCHER PIC X(25)
002700              VALUE "BUZZARD CREEK TECH, INC. ".
002800     03  WS-PGMID       PIC X(08) VALUE "VHEAPSRT".
002900
003000 LOCAL-STORAGE SECTION.
003100 01  LS-TERM-FLAG       PIC X(01).
003200 01  LS-ENCLAVE-RC      PIC S9(9) BINARY SYNC.
003300
003400*    LOOP CONTROL VARIABLES
003500 01  I                  PIC S9(9) BINARY SYNC.
003600
003700*    CURRENT NODE - SUBSCRIPT, ENTRY POS, KEY POS
003800 01  LS-CURRENT-NODE.
003900     03  LS-SUB-C       PIC S9(9) BINARY SYNC.
004000     03  LS-NPOS-C      PIC S9(9) BINARY SYNC.
004100     03  LS-KPOS-C      PIC S9(9) BINARY SYNC.
004200
004300*    PARENT  NODE - SUBSCRIPT, ENTRY POS, KEY POS
004400 01  LS-PARENT-NODE.
004500     03  LS-SUB-P       PIC S9(9) BINARY SYNC.
004600     03  LS-NPOS-P      PIC S9(9) BINARY SYNC.
004700     03  LS-KPOS-P      PIC S9(9) BINARY SYNC.
004800
004900*    SIBLING NODE - SUBSCRIPT, ENTRY POS, KEY POS,
005000*    LEFT/RIGHT/MAXMIN
005100 01  LS-LEFT-SIBLING-NODE.
005200     03  LS-SUB-LS      PIC S9(9) BINARY SYNC.
005300     03  LS-NPOS-LS     PIC S9(9) BINARY SYNC.
005400     03  LS-KPOS-LS     PIC S9(9) BINARY SYNC.
005500 01  LS-RIGHT-SIBLING-NODE.
005600     03  LS-SUB-RS      PIC S9(9) BINARY SYNC.
005700     03  LS-NPOS-RS     PIC S9(9) BINARY SYNC.
005800     03  LS-KPOS-RS     PIC S9(9) BINARY SYNC.
005900 01  LS-MAXMIN-SIBLING-NODE.
006000     03  LS-SUB-MS      PIC S9(9) BINARY SYNC.
006100     03  LS-NPOS-MS     PIC S9(9) BINARY SYNC.
006200     03  LS-KPOS-MS     PIC S9(9) BINARY SYNC.
006300
006400*    LAST NODE - SUBSCRIPT, ENTRY POS, KEY POS
006500 01  LS-LAST-NODE.
006600     03  LS-SUB-L       PIC S9(9) BINARY SYNC.
006700     03  LS-NPOS-L      PIC S9(9) BINARY SYNC.
006800     03  LS-KPOS-L      PIC S9(9) BINARY SYNC.
006900
007000 01  LS-WORK-NODE       PIC X(256).
007100
007200 LINKAGE SECTION.
007300 01  XS-NTRY-COUNT      PIC S9(9) BINARY.
007400 01  XS-NTRY-LEN        PIC S9(9) BINARY.
007500 01  XS-SRTKEY-POS      PIC S9(9) BINARY.
007600 01  XS-SRTKEY-LEN      PIC S9(9) BINARY.
007700 01  XS-VECTOR          PIC X(8388608).
007800
007900 PROCEDURE DIVISION USING
008000     XS-NTRY-COUNT
008100     XS-NTRY-LEN
008200     XS-SRTKEY-POS
008300     XS-SRTKEY-LEN
008400     XS-VECTOR.
008500
008600     CONTINUE.
008700 INIT-ROUTINE.
008800*    VECTOR HAVE 1 ENTRY (ALREADY SORTED)
008900     IF XS-NTRY-COUNT = 1
009000       MOVE ZERO TO LS-ENCLAVE-RC
009100       GO TO RETURN-ROUTINE
009200     END-IF
009300
009400*    VECTOR HAVE MORE THAN ZERO ENTRIES
009500     IF NOT (XS-NTRY-COUNT > ZERO)
009600*      SORT - NBR OF TABLE ENTRIES = ZERO
009700       MOVE +4 TO LS-ENCLAVE-RC
009800       GO TO RETURN-ROUTINE
009900     END-IF
010000
010100*    VECTOR ENTRY LENGTH GREATER THAN ZERO
010200     IF XS-NTRY-LEN NOT > ZERO
010300*      SORT - TABLE ENTRY LENGTH = ZERO
010400       MOVE +8 TO LS-ENCLAVE-RC
010500       GO TO RETURN-ROUTINE
010600     END-IF
010700
010800*    VECTOR ENTRY LENGTH GREATER THAN 256 BYTES
010900     IF XS-NTRY-LEN > 256
011000*      SORT - TABLE ENTRY LENGTH > 256
011100       MOVE +8 TO LS-ENCLAVE-RC
011200       GO TO RETURN-ROUTINE
011300     END-IF
011400
011500*    SORT KEY = ZERO BYTES
011600     IF XS-SRTKEY-LEN = ZERO
011700*      SORT - KEY LENGTH = 0
011800       MOVE +8 TO LS-ENCLAVE-RC
011900       GO TO RETURN-ROUTINE
012000     END-IF
012100
012200*    SORT KEY + POS LONGER THAN VECTOR ENTRY
012300     IF (XS-SRTKEY-LEN + XS-SRTKEY-POS - 1)
012400          > XS-NTRY-LEN
012500*      SORT - KEY LENGTH TOO LONG
012600       MOVE +8 TO LS-ENCLAVE-RC
012700       GO TO RETURN-ROUTINE
012800     END-IF
012900
013000     CONTINUE.
013100 MAINLINE-ROUTINE.
013200     MOVE ZERO TO LS-ENCLAVE-RC
013300
013400*    TRANSFORM THE VECTOR INTO A HEAP
013500     PERFORM 00100-PERCUP-HI
013600          THRU 00100-PERCUP-HI-END
013700        VARYING I FROM 2 BY +1
013800        UNTIL I > XS-NTRY-COUNT
013900
014000*    SORT THE VECTOR USING THE HEAP SORT METHOD
014100     PERFORM
014200        VARYING I FROM XS-NTRY-COUNT BY -1
014300        UNTIL I < 1
014400*      COMPUTE POSITION OF LAST NODE IN HEAP
014500       COMPUTE LS-NPOS-L = (I - 1) * XS-NTRY-LEN + 1
014600*      SWAP ROOT NODE AND LAST NODE IN HEAP
014700*      MOVE ROOT NODE TO SAVE AREA
014800       MOVE XS-VECTOR (1:XS-NTRY-LEN)
014900            TO LS-WORK-NODE
015000*      MOVE LAST NODE TO ROOT NODE
015100       MOVE XS-VECTOR (LS-NPOS-L:XS-NTRY-LEN)
015200            TO XS-VECTOR (1:XS-NTRY-LEN)
015300*      MOVE SAVE AREA TO LAST NODE
015400       MOVE LS-WORK-NODE
015500            TO XS-VECTOR (LS-NPOS-L:XS-NTRY-LEN)
015600*      REESTABLISH HEAP PROPERTY
015700       PERFORM 00200-PERCDOWN-LO
015800            THRU 00200-PERCDOWN-LO-END
015900     END-PERFORM
016000
016100     CONTINUE.
016200 RETURN-ROUTINE.
016300*    LE SET RETURN CODE
016400     CALL 'CEE3SRC' USING LS-ENCLAVE-RC OMITTED
016500     GOBACK.
016600     EXIT PROGRAM.
016700                                                                        00
016800     EJECT.
016900* ------------------------------------------------------*
017000* PERFORMED ROUTINES
017100* ------------------------------------------------------*
017200
017300     CONTINUE.
017400 00100-PERCUP-HI.
017500     MOVE SPACE TO LS-TERM-FLAG
017600     MOVE I     TO LS-SUB-C
017700     PERFORM 00110-PERCUP-HI
017800          THRU 00110-PERCUP-HI-END
017900        UNTIL LS-TERM-FLAG = 'Y'
018000
018100     CONTINUE.
018200 00100-PERCUP-HI-END.
018300     EXIT.
018400
018500     CONTINUE.
018600 00110-PERCUP-HI.
018700*    CHECK SUBSCRIPT OF CURRENT NODE IN VECTOR
018800     IF LS-SUB-C = +1
018900       MOVE 'Y' TO LS-TERM-FLAG
019000       GO TO 00110-PERCUP-HI-END
019100     END-IF
019200
019300*    COMPUTE SUBSCRIPT OF PARENT NODE IN VECTOR
019400     COMPUTE LS-SUB-P = LS-SUB-C / 2
019500
019600*    COMPUTE POSITION OF CURRENT NODE IN VECTOR
019700     COMPUTE LS-NPOS-C = (LS-SUB-C - 1) * XS-NTRY-LEN + 1
019800     COMPUTE LS-KPOS-C = LS-NPOS-C + XS-SRTKEY-POS - 1
019900
020000*    COMPUTE POSITION OF PARENT NODE IN VECTOR
020100     COMPUTE LS-NPOS-P = (LS-SUB-P - 1) * XS-NTRY-LEN + 1
020200     COMPUTE LS-KPOS-P = LS-NPOS-P + XS-SRTKEY-POS - 1
020300
020400*    IF PARENT NODE > CURRENT NODE (NO NEED TO SWAP)
020500     IF XS-VECTOR (LS-KPOS-P:XS-SRTKEY-LEN)
020600          > XS-VECTOR (LS-KPOS-C:XS-SRTKEY-LEN)
020700       MOVE 'Y' TO LS-TERM-FLAG
020800       GO TO 00110-PERCUP-HI-END
020900     END-IF
021000
021100*    SWAP PARENT NODE AND CURRENT NODE IN VECTOR
021200*    MOVE PARENT NODE TO SAVE AREA
021300     MOVE XS-VECTOR (LS-NPOS-P:XS-NTRY-LEN)
021400          TO LS-WORK-NODE
021500*    MOVE CURRENT NODE TO PARENT NODE
021600     MOVE XS-VECTOR (LS-NPOS-C:XS-NTRY-LEN)
021700          TO XS-VECTOR (LS-NPOS-P:XS-NTRY-LEN)
021800*    MOVE SAVE AREA TO CURRENT NODE
021900     MOVE LS-WORK-NODE
022000          TO XS-VECTOR (LS-NPOS-C:XS-NTRY-LEN)
022100
022200     MOVE LS-SUB-P TO LS-SUB-C
022300
022400     CONTINUE.
022500 00110-PERCUP-HI-END.
022600     EXIT.
022700
022800     CONTINUE.
022900 00200-PERCDOWN-LO.
023000     MOVE SPACE TO LS-TERM-FLAG
023100     MOVE +1    TO LS-SUB-C
023200     PERFORM 00210-PERCDOWN-LO
023300          THRU 00210-PERCDOWN-LO-END
023400        UNTIL LS-TERM-FLAG = 'Y'
023500
023600     CONTINUE.
023700 00200-PERCDOWN-LO-END.
023800     EXIT.
023900
024000     CONTINUE.
024100 00210-PERCDOWN-LO.
024200*    COMPUTE SUBSCRIPT OF LEFT SIBLING NODE IN VECTOR
024300     COMPUTE LS-SUB-LS = LS-SUB-C * 2
024400
024500*    COMPUTE SUBSCRIPT OF RIGHT SIBLING NODE IN VECTOR
024600     COMPUTE LS-SUB-RS = LS-SUB-LS + 1
024700
024800*    CHECK SUBSCRIPT OF LEFT SIBLING NODE IN VECTOR
024900     IF LS-SUB-LS > (I - 1)
025000       MOVE 'Y' TO LS-TERM-FLAG
025100       GO TO 00210-PERCDOWN-LO-END
025200     END-IF
025300
025400*    COMPUTE POSITION OF CURRENT NODE IN VECTOR
025500     COMPUTE LS-NPOS-C = (LS-SUB-C - 1) * XS-NTRY-LEN + 1
025600     COMPUTE LS-KPOS-C = LS-NPOS-C + XS-SRTKEY-POS - 1
025700
025800*    COMPUTE POSITION OF LEFT SIBLING NODE IN VECTOR
025900     COMPUTE LS-NPOS-LS = (LS-SUB-LS - 1) * XS-NTRY-LEN + 1
026000     COMPUTE LS-KPOS-LS = LS-NPOS-LS + XS-SRTKEY-POS - 1
026100     MOVE LS-LEFT-SIBLING-NODE TO LS-MAXMIN-SIBLING-NODE
026200
026300*    CHECK SUBSCRIPT OF RIGHT SIBLING NODE IN VECTOR
026400     IF LS-SUB-RS <= (I - 1)
026500*      COMPUTE POSITION OF RIGHT SIBLING NODE IN VECTOR
026600       COMPUTE LS-NPOS-RS = LS-NPOS-LS + XS-NTRY-LEN
026700       COMPUTE LS-KPOS-RS = LS-NPOS-RS + XS-SRTKEY-POS - 1
026800*      IF RIGHT SIBLING NODE > LEFT SIBLING NODE
026900       IF XS-VECTOR (LS-KPOS-RS:XS-SRTKEY-LEN)
027000            > XS-VECTOR (LS-KPOS-LS:XS-SRTKEY-LEN)
027100         MOVE LS-RIGHT-SIBLING-NODE TO LS-MAXMIN-SIBLING-NODE
027200       END-IF
027300     END-IF
027400
027500*    IF CURRENT NODE > MAX SIBLING NODE IN VECTOR
027600     IF XS-VECTOR (LS-KPOS-C:XS-SRTKEY-LEN)
027700          > XS-VECTOR (LS-KPOS-MS:XS-SRTKEY-LEN)
027800       MOVE 'Y' TO LS-TERM-FLAG
027900       GO TO 00210-PERCDOWN-LO-END
028000     END-IF
028100
028200*    SWAP SIBLING NODE AND CURRENT NODE IN VECTOR
028300*    MOVE SIBLING NODE TO SAVE AREA
028400     MOVE XS-VECTOR (LS-NPOS-MS:XS-NTRY-LEN)
028500          TO LS-WORK-NODE
028600*    MOVE CURRENT NODE TO SIBLING NODE
028700     MOVE XS-VECTOR (LS-NPOS-C:XS-NTRY-LEN)
028800          TO XS-VECTOR (LS-NPOS-MS:XS-NTRY-LEN)
028900*    MOVE SAVE AREA TO CURRENT NODE
029000     MOVE LS-WORK-NODE
029100          TO XS-VECTOR (LS-NPOS-C:XS-NTRY-LEN)
029200
029300     MOVE LS-SUB-MS TO LS-SUB-C
029400
029500     CONTINUE.
029600 00210-PERCDOWN-LO-END.
029700     EXIT.
